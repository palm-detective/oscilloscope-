
oscilliscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016dac  0800c000  0800c000  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021c8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022dac  08022dac  00040760  2**0
                  CONTENTS
  4 .ARM          00000008  08022dac  08022dac  00032dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022db4  08022db4  00040760  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022db4  08022db4  00032db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08022db8  08022db8  00032db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000760  20000000  08022dbc  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006e24  20000760  0802351c  00040760  2**2
                  ALLOC
 10 ._user_heap_stack 00000e04  20007584  0802351c  00047584  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040760  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003ad47  00000000  00000000  00040790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000687e  00000000  00000000  0007b4d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d68  00000000  00000000  00081d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a88  00000000  00000000  00083ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aad1  00000000  00000000  00085548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a001  00000000  00000000  000b0019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e51a8  00000000  00000000  000da01a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001bf1c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007964  00000000  00000000  001bf218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800c000 <__do_global_dtors_aux>:
 800c000:	b510      	push	{r4, lr}
 800c002:	4c05      	ldr	r4, [pc, #20]	; (800c018 <__do_global_dtors_aux+0x18>)
 800c004:	7823      	ldrb	r3, [r4, #0]
 800c006:	b933      	cbnz	r3, 800c016 <__do_global_dtors_aux+0x16>
 800c008:	4b04      	ldr	r3, [pc, #16]	; (800c01c <__do_global_dtors_aux+0x1c>)
 800c00a:	b113      	cbz	r3, 800c012 <__do_global_dtors_aux+0x12>
 800c00c:	4804      	ldr	r0, [pc, #16]	; (800c020 <__do_global_dtors_aux+0x20>)
 800c00e:	f3af 8000 	nop.w
 800c012:	2301      	movs	r3, #1
 800c014:	7023      	strb	r3, [r4, #0]
 800c016:	bd10      	pop	{r4, pc}
 800c018:	20000760 	.word	0x20000760
 800c01c:	00000000 	.word	0x00000000
 800c020:	08022d94 	.word	0x08022d94

0800c024 <frame_dummy>:
 800c024:	b508      	push	{r3, lr}
 800c026:	4b03      	ldr	r3, [pc, #12]	; (800c034 <frame_dummy+0x10>)
 800c028:	b11b      	cbz	r3, 800c032 <frame_dummy+0xe>
 800c02a:	4903      	ldr	r1, [pc, #12]	; (800c038 <frame_dummy+0x14>)
 800c02c:	4803      	ldr	r0, [pc, #12]	; (800c03c <frame_dummy+0x18>)
 800c02e:	f3af 8000 	nop.w
 800c032:	bd08      	pop	{r3, pc}
 800c034:	00000000 	.word	0x00000000
 800c038:	20000764 	.word	0x20000764
 800c03c:	08022d94 	.word	0x08022d94

0800c040 <strlen>:
 800c040:	4603      	mov	r3, r0
 800c042:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c046:	2a00      	cmp	r2, #0
 800c048:	d1fb      	bne.n	800c042 <strlen+0x2>
 800c04a:	1a18      	subs	r0, r3, r0
 800c04c:	3801      	subs	r0, #1
 800c04e:	4770      	bx	lr

0800c050 <__aeabi_uldivmod>:
 800c050:	b953      	cbnz	r3, 800c068 <__aeabi_uldivmod+0x18>
 800c052:	b94a      	cbnz	r2, 800c068 <__aeabi_uldivmod+0x18>
 800c054:	2900      	cmp	r1, #0
 800c056:	bf08      	it	eq
 800c058:	2800      	cmpeq	r0, #0
 800c05a:	bf1c      	itt	ne
 800c05c:	f04f 31ff 	movne.w	r1, #4294967295
 800c060:	f04f 30ff 	movne.w	r0, #4294967295
 800c064:	f000 b96e 	b.w	800c344 <__aeabi_idiv0>
 800c068:	f1ad 0c08 	sub.w	ip, sp, #8
 800c06c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800c070:	f000 f806 	bl	800c080 <__udivmoddi4>
 800c074:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c078:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c07c:	b004      	add	sp, #16
 800c07e:	4770      	bx	lr

0800c080 <__udivmoddi4>:
 800c080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c084:	9d08      	ldr	r5, [sp, #32]
 800c086:	4604      	mov	r4, r0
 800c088:	468c      	mov	ip, r1
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	f040 8083 	bne.w	800c196 <__udivmoddi4+0x116>
 800c090:	428a      	cmp	r2, r1
 800c092:	4617      	mov	r7, r2
 800c094:	d947      	bls.n	800c126 <__udivmoddi4+0xa6>
 800c096:	fab2 f282 	clz	r2, r2
 800c09a:	b142      	cbz	r2, 800c0ae <__udivmoddi4+0x2e>
 800c09c:	f1c2 0020 	rsb	r0, r2, #32
 800c0a0:	fa24 f000 	lsr.w	r0, r4, r0
 800c0a4:	4091      	lsls	r1, r2
 800c0a6:	4097      	lsls	r7, r2
 800c0a8:	ea40 0c01 	orr.w	ip, r0, r1
 800c0ac:	4094      	lsls	r4, r2
 800c0ae:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800c0b2:	0c23      	lsrs	r3, r4, #16
 800c0b4:	fbbc f6f8 	udiv	r6, ip, r8
 800c0b8:	fa1f fe87 	uxth.w	lr, r7
 800c0bc:	fb08 c116 	mls	r1, r8, r6, ip
 800c0c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c0c4:	fb06 f10e 	mul.w	r1, r6, lr
 800c0c8:	4299      	cmp	r1, r3
 800c0ca:	d909      	bls.n	800c0e0 <__udivmoddi4+0x60>
 800c0cc:	18fb      	adds	r3, r7, r3
 800c0ce:	f106 30ff 	add.w	r0, r6, #4294967295
 800c0d2:	f080 8119 	bcs.w	800c308 <__udivmoddi4+0x288>
 800c0d6:	4299      	cmp	r1, r3
 800c0d8:	f240 8116 	bls.w	800c308 <__udivmoddi4+0x288>
 800c0dc:	3e02      	subs	r6, #2
 800c0de:	443b      	add	r3, r7
 800c0e0:	1a5b      	subs	r3, r3, r1
 800c0e2:	b2a4      	uxth	r4, r4
 800c0e4:	fbb3 f0f8 	udiv	r0, r3, r8
 800c0e8:	fb08 3310 	mls	r3, r8, r0, r3
 800c0ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800c0f0:	fb00 fe0e 	mul.w	lr, r0, lr
 800c0f4:	45a6      	cmp	lr, r4
 800c0f6:	d909      	bls.n	800c10c <__udivmoddi4+0x8c>
 800c0f8:	193c      	adds	r4, r7, r4
 800c0fa:	f100 33ff 	add.w	r3, r0, #4294967295
 800c0fe:	f080 8105 	bcs.w	800c30c <__udivmoddi4+0x28c>
 800c102:	45a6      	cmp	lr, r4
 800c104:	f240 8102 	bls.w	800c30c <__udivmoddi4+0x28c>
 800c108:	3802      	subs	r0, #2
 800c10a:	443c      	add	r4, r7
 800c10c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800c110:	eba4 040e 	sub.w	r4, r4, lr
 800c114:	2600      	movs	r6, #0
 800c116:	b11d      	cbz	r5, 800c120 <__udivmoddi4+0xa0>
 800c118:	40d4      	lsrs	r4, r2
 800c11a:	2300      	movs	r3, #0
 800c11c:	e9c5 4300 	strd	r4, r3, [r5]
 800c120:	4631      	mov	r1, r6
 800c122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c126:	b902      	cbnz	r2, 800c12a <__udivmoddi4+0xaa>
 800c128:	deff      	udf	#255	; 0xff
 800c12a:	fab2 f282 	clz	r2, r2
 800c12e:	2a00      	cmp	r2, #0
 800c130:	d150      	bne.n	800c1d4 <__udivmoddi4+0x154>
 800c132:	1bcb      	subs	r3, r1, r7
 800c134:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800c138:	fa1f f887 	uxth.w	r8, r7
 800c13c:	2601      	movs	r6, #1
 800c13e:	fbb3 fcfe 	udiv	ip, r3, lr
 800c142:	0c21      	lsrs	r1, r4, #16
 800c144:	fb0e 331c 	mls	r3, lr, ip, r3
 800c148:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c14c:	fb08 f30c 	mul.w	r3, r8, ip
 800c150:	428b      	cmp	r3, r1
 800c152:	d907      	bls.n	800c164 <__udivmoddi4+0xe4>
 800c154:	1879      	adds	r1, r7, r1
 800c156:	f10c 30ff 	add.w	r0, ip, #4294967295
 800c15a:	d202      	bcs.n	800c162 <__udivmoddi4+0xe2>
 800c15c:	428b      	cmp	r3, r1
 800c15e:	f200 80e9 	bhi.w	800c334 <__udivmoddi4+0x2b4>
 800c162:	4684      	mov	ip, r0
 800c164:	1ac9      	subs	r1, r1, r3
 800c166:	b2a3      	uxth	r3, r4
 800c168:	fbb1 f0fe 	udiv	r0, r1, lr
 800c16c:	fb0e 1110 	mls	r1, lr, r0, r1
 800c170:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800c174:	fb08 f800 	mul.w	r8, r8, r0
 800c178:	45a0      	cmp	r8, r4
 800c17a:	d907      	bls.n	800c18c <__udivmoddi4+0x10c>
 800c17c:	193c      	adds	r4, r7, r4
 800c17e:	f100 33ff 	add.w	r3, r0, #4294967295
 800c182:	d202      	bcs.n	800c18a <__udivmoddi4+0x10a>
 800c184:	45a0      	cmp	r8, r4
 800c186:	f200 80d9 	bhi.w	800c33c <__udivmoddi4+0x2bc>
 800c18a:	4618      	mov	r0, r3
 800c18c:	eba4 0408 	sub.w	r4, r4, r8
 800c190:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800c194:	e7bf      	b.n	800c116 <__udivmoddi4+0x96>
 800c196:	428b      	cmp	r3, r1
 800c198:	d909      	bls.n	800c1ae <__udivmoddi4+0x12e>
 800c19a:	2d00      	cmp	r5, #0
 800c19c:	f000 80b1 	beq.w	800c302 <__udivmoddi4+0x282>
 800c1a0:	2600      	movs	r6, #0
 800c1a2:	e9c5 0100 	strd	r0, r1, [r5]
 800c1a6:	4630      	mov	r0, r6
 800c1a8:	4631      	mov	r1, r6
 800c1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1ae:	fab3 f683 	clz	r6, r3
 800c1b2:	2e00      	cmp	r6, #0
 800c1b4:	d14a      	bne.n	800c24c <__udivmoddi4+0x1cc>
 800c1b6:	428b      	cmp	r3, r1
 800c1b8:	d302      	bcc.n	800c1c0 <__udivmoddi4+0x140>
 800c1ba:	4282      	cmp	r2, r0
 800c1bc:	f200 80b8 	bhi.w	800c330 <__udivmoddi4+0x2b0>
 800c1c0:	1a84      	subs	r4, r0, r2
 800c1c2:	eb61 0103 	sbc.w	r1, r1, r3
 800c1c6:	2001      	movs	r0, #1
 800c1c8:	468c      	mov	ip, r1
 800c1ca:	2d00      	cmp	r5, #0
 800c1cc:	d0a8      	beq.n	800c120 <__udivmoddi4+0xa0>
 800c1ce:	e9c5 4c00 	strd	r4, ip, [r5]
 800c1d2:	e7a5      	b.n	800c120 <__udivmoddi4+0xa0>
 800c1d4:	f1c2 0320 	rsb	r3, r2, #32
 800c1d8:	fa20 f603 	lsr.w	r6, r0, r3
 800c1dc:	4097      	lsls	r7, r2
 800c1de:	fa01 f002 	lsl.w	r0, r1, r2
 800c1e2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800c1e6:	40d9      	lsrs	r1, r3
 800c1e8:	4330      	orrs	r0, r6
 800c1ea:	0c03      	lsrs	r3, r0, #16
 800c1ec:	fbb1 f6fe 	udiv	r6, r1, lr
 800c1f0:	fa1f f887 	uxth.w	r8, r7
 800c1f4:	fb0e 1116 	mls	r1, lr, r6, r1
 800c1f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c1fc:	fb06 f108 	mul.w	r1, r6, r8
 800c200:	4299      	cmp	r1, r3
 800c202:	fa04 f402 	lsl.w	r4, r4, r2
 800c206:	d909      	bls.n	800c21c <__udivmoddi4+0x19c>
 800c208:	18fb      	adds	r3, r7, r3
 800c20a:	f106 3cff 	add.w	ip, r6, #4294967295
 800c20e:	f080 808d 	bcs.w	800c32c <__udivmoddi4+0x2ac>
 800c212:	4299      	cmp	r1, r3
 800c214:	f240 808a 	bls.w	800c32c <__udivmoddi4+0x2ac>
 800c218:	3e02      	subs	r6, #2
 800c21a:	443b      	add	r3, r7
 800c21c:	1a5b      	subs	r3, r3, r1
 800c21e:	b281      	uxth	r1, r0
 800c220:	fbb3 f0fe 	udiv	r0, r3, lr
 800c224:	fb0e 3310 	mls	r3, lr, r0, r3
 800c228:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c22c:	fb00 f308 	mul.w	r3, r0, r8
 800c230:	428b      	cmp	r3, r1
 800c232:	d907      	bls.n	800c244 <__udivmoddi4+0x1c4>
 800c234:	1879      	adds	r1, r7, r1
 800c236:	f100 3cff 	add.w	ip, r0, #4294967295
 800c23a:	d273      	bcs.n	800c324 <__udivmoddi4+0x2a4>
 800c23c:	428b      	cmp	r3, r1
 800c23e:	d971      	bls.n	800c324 <__udivmoddi4+0x2a4>
 800c240:	3802      	subs	r0, #2
 800c242:	4439      	add	r1, r7
 800c244:	1acb      	subs	r3, r1, r3
 800c246:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800c24a:	e778      	b.n	800c13e <__udivmoddi4+0xbe>
 800c24c:	f1c6 0c20 	rsb	ip, r6, #32
 800c250:	fa03 f406 	lsl.w	r4, r3, r6
 800c254:	fa22 f30c 	lsr.w	r3, r2, ip
 800c258:	431c      	orrs	r4, r3
 800c25a:	fa20 f70c 	lsr.w	r7, r0, ip
 800c25e:	fa01 f306 	lsl.w	r3, r1, r6
 800c262:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800c266:	fa21 f10c 	lsr.w	r1, r1, ip
 800c26a:	431f      	orrs	r7, r3
 800c26c:	0c3b      	lsrs	r3, r7, #16
 800c26e:	fbb1 f9fe 	udiv	r9, r1, lr
 800c272:	fa1f f884 	uxth.w	r8, r4
 800c276:	fb0e 1119 	mls	r1, lr, r9, r1
 800c27a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800c27e:	fb09 fa08 	mul.w	sl, r9, r8
 800c282:	458a      	cmp	sl, r1
 800c284:	fa02 f206 	lsl.w	r2, r2, r6
 800c288:	fa00 f306 	lsl.w	r3, r0, r6
 800c28c:	d908      	bls.n	800c2a0 <__udivmoddi4+0x220>
 800c28e:	1861      	adds	r1, r4, r1
 800c290:	f109 30ff 	add.w	r0, r9, #4294967295
 800c294:	d248      	bcs.n	800c328 <__udivmoddi4+0x2a8>
 800c296:	458a      	cmp	sl, r1
 800c298:	d946      	bls.n	800c328 <__udivmoddi4+0x2a8>
 800c29a:	f1a9 0902 	sub.w	r9, r9, #2
 800c29e:	4421      	add	r1, r4
 800c2a0:	eba1 010a 	sub.w	r1, r1, sl
 800c2a4:	b2bf      	uxth	r7, r7
 800c2a6:	fbb1 f0fe 	udiv	r0, r1, lr
 800c2aa:	fb0e 1110 	mls	r1, lr, r0, r1
 800c2ae:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800c2b2:	fb00 f808 	mul.w	r8, r0, r8
 800c2b6:	45b8      	cmp	r8, r7
 800c2b8:	d907      	bls.n	800c2ca <__udivmoddi4+0x24a>
 800c2ba:	19e7      	adds	r7, r4, r7
 800c2bc:	f100 31ff 	add.w	r1, r0, #4294967295
 800c2c0:	d22e      	bcs.n	800c320 <__udivmoddi4+0x2a0>
 800c2c2:	45b8      	cmp	r8, r7
 800c2c4:	d92c      	bls.n	800c320 <__udivmoddi4+0x2a0>
 800c2c6:	3802      	subs	r0, #2
 800c2c8:	4427      	add	r7, r4
 800c2ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800c2ce:	eba7 0708 	sub.w	r7, r7, r8
 800c2d2:	fba0 8902 	umull	r8, r9, r0, r2
 800c2d6:	454f      	cmp	r7, r9
 800c2d8:	46c6      	mov	lr, r8
 800c2da:	4649      	mov	r1, r9
 800c2dc:	d31a      	bcc.n	800c314 <__udivmoddi4+0x294>
 800c2de:	d017      	beq.n	800c310 <__udivmoddi4+0x290>
 800c2e0:	b15d      	cbz	r5, 800c2fa <__udivmoddi4+0x27a>
 800c2e2:	ebb3 020e 	subs.w	r2, r3, lr
 800c2e6:	eb67 0701 	sbc.w	r7, r7, r1
 800c2ea:	fa07 fc0c 	lsl.w	ip, r7, ip
 800c2ee:	40f2      	lsrs	r2, r6
 800c2f0:	ea4c 0202 	orr.w	r2, ip, r2
 800c2f4:	40f7      	lsrs	r7, r6
 800c2f6:	e9c5 2700 	strd	r2, r7, [r5]
 800c2fa:	2600      	movs	r6, #0
 800c2fc:	4631      	mov	r1, r6
 800c2fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c302:	462e      	mov	r6, r5
 800c304:	4628      	mov	r0, r5
 800c306:	e70b      	b.n	800c120 <__udivmoddi4+0xa0>
 800c308:	4606      	mov	r6, r0
 800c30a:	e6e9      	b.n	800c0e0 <__udivmoddi4+0x60>
 800c30c:	4618      	mov	r0, r3
 800c30e:	e6fd      	b.n	800c10c <__udivmoddi4+0x8c>
 800c310:	4543      	cmp	r3, r8
 800c312:	d2e5      	bcs.n	800c2e0 <__udivmoddi4+0x260>
 800c314:	ebb8 0e02 	subs.w	lr, r8, r2
 800c318:	eb69 0104 	sbc.w	r1, r9, r4
 800c31c:	3801      	subs	r0, #1
 800c31e:	e7df      	b.n	800c2e0 <__udivmoddi4+0x260>
 800c320:	4608      	mov	r0, r1
 800c322:	e7d2      	b.n	800c2ca <__udivmoddi4+0x24a>
 800c324:	4660      	mov	r0, ip
 800c326:	e78d      	b.n	800c244 <__udivmoddi4+0x1c4>
 800c328:	4681      	mov	r9, r0
 800c32a:	e7b9      	b.n	800c2a0 <__udivmoddi4+0x220>
 800c32c:	4666      	mov	r6, ip
 800c32e:	e775      	b.n	800c21c <__udivmoddi4+0x19c>
 800c330:	4630      	mov	r0, r6
 800c332:	e74a      	b.n	800c1ca <__udivmoddi4+0x14a>
 800c334:	f1ac 0c02 	sub.w	ip, ip, #2
 800c338:	4439      	add	r1, r7
 800c33a:	e713      	b.n	800c164 <__udivmoddi4+0xe4>
 800c33c:	3802      	subs	r0, #2
 800c33e:	443c      	add	r4, r7
 800c340:	e724      	b.n	800c18c <__udivmoddi4+0x10c>
 800c342:	bf00      	nop

0800c344 <__aeabi_idiv0>:
 800c344:	4770      	bx	lr
 800c346:	bf00      	nop

0800c348 <BIOS_Info>:

/*******************************************************************************
 Info :  Ӳ���豸��Ϣ
*******************************************************************************/
unsigned BIOS_Info(char Item)
{
 800c348:	b480      	push	{r7}
 800c34a:	b083      	sub	sp, #12
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	4603      	mov	r3, r0
 800c350:	71fb      	strb	r3, [r7, #7]
  switch (Item){
 800c352:	79fb      	ldrb	r3, [r7, #7]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d101      	bne.n	800c35c <BIOS_Info+0x14>
    case CHA_CNT:
    	return /*(u16)DMA_CH_A->CNDTR*/0;
 800c358:	2300      	movs	r3, #0
 800c35a:	e000      	b.n	800c35e <BIOS_Info+0x16>
/*    case SIN_TAB: return (u32)SIN_DATA;
    case TRG_TAB: return (u32)TRG_DATA;
    case SAW_TAB: return (u32)SAW_DATA;    */
    default:
    	return 0;
 800c35c:	2300      	movs	r3, #0
  }
}
 800c35e:	4618      	mov	r0, r3
 800c360:	370c      	adds	r7, #12
 800c362:	46bd      	mov	sp, r7
 800c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c368:	4770      	bx	lr
	...

0800c36c <BIOS_Ctrl>:
/*******************************************************************************
 DevCtrl:  Ӳ���豸����
*******************************************************************************/
void BIOS_Ctrl(char Item, unsigned Val)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b088      	sub	sp, #32
 800c370:	af00      	add	r7, sp, #0
 800c372:	4603      	mov	r3, r0
 800c374:	6039      	str	r1, [r7, #0]
 800c376:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef         GPIO_InitStructure;

  switch (Item){
 800c378:	79fb      	ldrb	r3, [r7, #7]
 800c37a:	2b08      	cmp	r3, #8
 800c37c:	f200 8102 	bhi.w	800c584 <BIOS_Ctrl+0x218>
 800c380:	a201      	add	r2, pc, #4	; (adr r2, 800c388 <BIOS_Ctrl+0x1c>)
 800c382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c386:	bf00      	nop
 800c388:	0800c4b7 	.word	0x0800c4b7
 800c38c:	0800c4a7 	.word	0x0800c4a7
 800c390:	0800c585 	.word	0x0800c585
 800c394:	0800c585 	.word	0x0800c585
 800c398:	0800c3ad 	.word	0x0800c3ad
 800c39c:	0800c3ef 	.word	0x0800c3ef
 800c3a0:	0800c419 	.word	0x0800c419
 800c3a4:	0800c437 	.word	0x0800c437
 800c3a8:	0800c499 	.word	0x0800c499
    case SMPL_ST: if(Val == DISABLE)
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	f000 80ea 	beq.w	800c588 <BIOS_Ctrl+0x21c>
    			  {
                    /*DMA1_Channel1->CCR &= (~ENABLE);*/
                  }
    			  else
    				  if(Val == ENABLE)
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	2b01      	cmp	r3, #1
 800c3b8:	f040 80e6 	bne.w	800c588 <BIOS_Ctrl+0x21c>
    				  {
                   /* DMA1_Channel1->CCR |= ENABLE; */
                    __HAL_ADC_ENABLE(&hadc1);  //ADC1->CR2 |= 0x00000001; //AD_ON
 800c3bc:	4b76      	ldr	r3, [pc, #472]	; (800c598 <BIOS_Ctrl+0x22c>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	689a      	ldr	r2, [r3, #8]
 800c3c2:	4b75      	ldr	r3, [pc, #468]	; (800c598 <BIOS_Ctrl+0x22c>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f042 0201 	orr.w	r2, r2, #1
 800c3ca:	609a      	str	r2, [r3, #8]
                    __HAL_ADC_ENABLE(&hadc2);  //ADC2->CR2 |= 0x00000001; //AD_ON
 800c3cc:	4b73      	ldr	r3, [pc, #460]	; (800c59c <BIOS_Ctrl+0x230>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	689a      	ldr	r2, [r3, #8]
 800c3d2:	4b72      	ldr	r3, [pc, #456]	; (800c59c <BIOS_Ctrl+0x230>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	f042 0201 	orr.w	r2, r2, #1
 800c3da:	609a      	str	r2, [r3, #8]
                    __HAL_TIM_ENABLE(&htim1);  /*TIM1->CR1 = 0x0081; */
 800c3dc:	4b70      	ldr	r3, [pc, #448]	; (800c5a0 <BIOS_Ctrl+0x234>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	681a      	ldr	r2, [r3, #0]
 800c3e2:	4b6f      	ldr	r3, [pc, #444]	; (800c5a0 <BIOS_Ctrl+0x234>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	f042 0201 	orr.w	r2, r2, #1
 800c3ea:	601a      	str	r2, [r3, #0]
                    if(Val == INTERLEAVE)
                    {
                      DMA1_Channel1->CCR = 0x3A80;
                    } */
                  }
    			  break;
 800c3ec:	e0cc      	b.n	800c588 <BIOS_Ctrl+0x21c>

    case SMPLTIM:
    			  octim1.Pulse = (Val+1)/2;
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	3301      	adds	r3, #1
 800c3f2:	085b      	lsrs	r3, r3, #1
 800c3f4:	4a6b      	ldr	r2, [pc, #428]	; (800c5a4 <BIOS_Ctrl+0x238>)
 800c3f6:	6053      	str	r3, [r2, #4]
    			  HAL_TIM_OC_ConfigChannel(&htim1, &octim1, 1 );
 800c3f8:	2201      	movs	r2, #1
 800c3fa:	496a      	ldr	r1, [pc, #424]	; (800c5a4 <BIOS_Ctrl+0x238>)
 800c3fc:	4868      	ldr	r0, [pc, #416]	; (800c5a0 <BIOS_Ctrl+0x234>)
 800c3fe:	f010 febb 	bl	801d178 <HAL_TIM_OC_ConfigChannel>
    			  htim1.Init.Prescaler = 0;
 800c402:	4b67      	ldr	r3, [pc, #412]	; (800c5a0 <BIOS_Ctrl+0x234>)
 800c404:	2200      	movs	r2, #0
 800c406:	605a      	str	r2, [r3, #4]
    			  htim1.Init.Period = Val -1;
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	3b01      	subs	r3, #1
 800c40c:	4a64      	ldr	r2, [pc, #400]	; (800c5a0 <BIOS_Ctrl+0x234>)
 800c40e:	60d3      	str	r3, [r2, #12]
    			  HAL_TIM_Base_Init(&htim1);
 800c410:	4863      	ldr	r0, [pc, #396]	; (800c5a0 <BIOS_Ctrl+0x234>)
 800c412:	f010 fce9 	bl	801cde8 <HAL_TIM_Base_Init>
                  break;
 800c416:	e0ba      	b.n	800c58e <BIOS_Ctrl+0x222>

    case SMPLNUM:
    			  __HAL_TIM_URS_DISABLE(&htim1);
 800c418:	4b61      	ldr	r3, [pc, #388]	; (800c5a0 <BIOS_Ctrl+0x234>)
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	681a      	ldr	r2, [r3, #0]
 800c41e:	4b60      	ldr	r3, [pc, #384]	; (800c5a0 <BIOS_Ctrl+0x234>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f022 0204 	bic.w	r2, r2, #4
 800c426:	601a      	str	r2, [r3, #0]
    			  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c428:	4b5d      	ldr	r3, [pc, #372]	; (800c5a0 <BIOS_Ctrl+0x234>)
 800c42a:	2200      	movs	r2, #0
 800c42c:	609a      	str	r2, [r3, #8]
    			  HAL_TIM_Base_Init(&htim1);
 800c42e:	485c      	ldr	r0, [pc, #368]	; (800c5a0 <BIOS_Ctrl+0x234>)
 800c430:	f010 fcda 	bl	801cde8 <HAL_TIM_Base_Init>
                  /* DMA_CH_A->CNDTR = (u32)Val;    */
                  break;
 800c434:	e0ab      	b.n	800c58e <BIOS_Ctrl+0x222>

    case AiRANGE: if(Val & DC)
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	f003 0302 	and.w	r3, r3, #2
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d005      	beq.n	800c44c <BIOS_Ctrl+0xe0>
    				  HAL_GPIO_WritePin(Az_GPIO_Port, Az_Pin,GPIO_PIN_SET);  // AZ_HIGH;
 800c440:	2201      	movs	r2, #1
 800c442:	2110      	movs	r1, #16
 800c444:	4858      	ldr	r0, [pc, #352]	; (800c5a8 <BIOS_Ctrl+0x23c>)
 800c446:	f00d fb7f 	bl	8019b48 <HAL_GPIO_WritePin>
 800c44a:	e004      	b.n	800c456 <BIOS_Ctrl+0xea>
                  else
                	  HAL_GPIO_WritePin(Az_GPIO_Port, Az_Pin,GPIO_PIN_RESET);  //AZ_LOW;   CH_A_AC
 800c44c:	2200      	movs	r2, #0
 800c44e:	2110      	movs	r1, #16
 800c450:	4855      	ldr	r0, [pc, #340]	; (800c5a8 <BIOS_Ctrl+0x23c>)
 800c452:	f00d fb79 	bl	8019b48 <HAL_GPIO_WritePin>
                  if(Val & HV)
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	f003 0301 	and.w	r3, r3, #1
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d005      	beq.n	800c46c <BIOS_Ctrl+0x100>
                	  HAL_GPIO_WritePin(Ay_GPIO_Port, Ay_Pin,GPIO_PIN_SET);  //AY_HIGH;  CH_A_HV
 800c460:	2201      	movs	r2, #1
 800c462:	2120      	movs	r1, #32
 800c464:	4850      	ldr	r0, [pc, #320]	; (800c5a8 <BIOS_Ctrl+0x23c>)
 800c466:	f00d fb6f 	bl	8019b48 <HAL_GPIO_WritePin>
 800c46a:	e004      	b.n	800c476 <BIOS_Ctrl+0x10a>
                  else
                	  HAL_GPIO_WritePin(Ay_GPIO_Port, Ay_Pin,GPIO_PIN_RESET);  //AY_LOW;   CH_A_LV
 800c46c:	2200      	movs	r2, #0
 800c46e:	2120      	movs	r1, #32
 800c470:	484d      	ldr	r0, [pc, #308]	; (800c5a8 <BIOS_Ctrl+0x23c>)
 800c472:	f00d fb69 	bl	8019b48 <HAL_GPIO_WritePin>
                  if(Val & ACT)
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	f003 0304 	and.w	r3, r3, #4
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d005      	beq.n	800c48c <BIOS_Ctrl+0x120>
                	  HAL_GPIO_WritePin(Ax_GPIO_Port, Ax_Pin,GPIO_PIN_SET);  //AX_HIGH;  CH_A_ACT
 800c480:	2201      	movs	r2, #1
 800c482:	2101      	movs	r1, #1
 800c484:	4849      	ldr	r0, [pc, #292]	; (800c5ac <BIOS_Ctrl+0x240>)
 800c486:	f00d fb5f 	bl	8019b48 <HAL_GPIO_WritePin>
                  else
                	  HAL_GPIO_WritePin(Ax_GPIO_Port, Ax_Pin,GPIO_PIN_RESET);  //AX_LOW;   CH_A_GND
                  break;
 800c48a:	e080      	b.n	800c58e <BIOS_Ctrl+0x222>
                	  HAL_GPIO_WritePin(Ax_GPIO_Port, Ax_Pin,GPIO_PIN_RESET);  //AX_LOW;   CH_A_GND
 800c48c:	2200      	movs	r2, #0
 800c48e:	2101      	movs	r1, #1
 800c490:	4846      	ldr	r0, [pc, #280]	; (800c5ac <BIOS_Ctrl+0x240>)
 800c492:	f00d fb59 	bl	8019b48 <HAL_GPIO_WritePin>
                  break;
 800c496:	e07a      	b.n	800c58e <BIOS_Ctrl+0x222>

    case AOFFSET: HAL_DAC_SetValue( &hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, Val);  /*DAC->DHR12R2  = (u16)Val; */
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	2200      	movs	r2, #0
 800c49c:	2110      	movs	r1, #16
 800c49e:	4844      	ldr	r0, [pc, #272]	; (800c5b0 <BIOS_Ctrl+0x244>)
 800c4a0:	f00c fb3d 	bl	8018b1e <HAL_DAC_SetValue>
                  break;
 800c4a4:	e073      	b.n	800c58e <BIOS_Ctrl+0x222>

    case DAC_TIM:
    			  htim7.Init.Period = Val-1;
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	3b01      	subs	r3, #1
 800c4aa:	4a42      	ldr	r2, [pc, #264]	; (800c5b4 <BIOS_Ctrl+0x248>)
 800c4ac:	60d3      	str	r3, [r2, #12]
    			  HAL_TIM_Base_Init(&htim7);
 800c4ae:	4841      	ldr	r0, [pc, #260]	; (800c5b4 <BIOS_Ctrl+0x248>)
 800c4b0:	f010 fc9a 	bl	801cde8 <HAL_TIM_Base_Init>
    			  break;
 800c4b4:	e06b      	b.n	800c58e <BIOS_Ctrl+0x222>
                  break;

    case OUT_CNT: /*OUT_DMA->CNDTR = (u16)Val; */    break;

    case OUT_MOD:
      GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	61bb      	str	r3, [r7, #24]
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	2b04      	cmp	r3, #4
 800c4be:	d009      	beq.n	800c4d4 <BIOS_Ctrl+0x168>
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	2b04      	cmp	r3, #4
 800c4c4:	d862      	bhi.n	800c58c <BIOS_Ctrl+0x220>
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d03d      	beq.n	800c548 <BIOS_Ctrl+0x1dc>
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	2b02      	cmp	r3, #2
 800c4d0:	d01d      	beq.n	800c50e <BIOS_Ctrl+0x1a2>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
                                  break;
                  }
                  break;
 800c4d2:	e05b      	b.n	800c58c <BIOS_Ctrl+0x220>
                    		      __HAL_DAC_DISABLE(&hdac, DAC_CHANNEL_1);
 800c4d4:	4b36      	ldr	r3, [pc, #216]	; (800c5b0 <BIOS_Ctrl+0x244>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	681a      	ldr	r2, [r3, #0]
 800c4da:	4b35      	ldr	r3, [pc, #212]	; (800c5b0 <BIOS_Ctrl+0x244>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	f022 0201 	bic.w	r2, r2, #1
 800c4e2:	601a      	str	r2, [r3, #0]
                                  GPIO_InitStructure.Pin   = Fo2_Pin;
 800c4e4:	2304      	movs	r3, #4
 800c4e6:	60fb      	str	r3, [r7, #12]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800c4e8:	2302      	movs	r3, #2
 800c4ea:	613b      	str	r3, [r7, #16]
                                  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStructure);
 800c4ec:	f107 030c 	add.w	r3, r7, #12
 800c4f0:	4619      	mov	r1, r3
 800c4f2:	4831      	ldr	r0, [pc, #196]	; (800c5b8 <BIOS_Ctrl+0x24c>)
 800c4f4:	f00d f97c 	bl	80197f0 <HAL_GPIO_Init>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
 800c4f8:	2310      	movs	r3, #16
 800c4fa:	60fb      	str	r3, [r7, #12]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	613b      	str	r3, [r7, #16]
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
 800c500:	f107 030c 	add.w	r3, r7, #12
 800c504:	4619      	mov	r1, r3
 800c506:	482c      	ldr	r0, [pc, #176]	; (800c5b8 <BIOS_Ctrl+0x24c>)
 800c508:	f00d f972 	bl	80197f0 <HAL_GPIO_Init>
                                  break;
 800c50c:	e039      	b.n	800c582 <BIOS_Ctrl+0x216>
                    			  GPIO_InitStructure.Pin   = Fo2_Pin ;
 800c50e:	2304      	movs	r3, #4
 800c510:	60fb      	str	r3, [r7, #12]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
 800c512:	2300      	movs	r3, #0
 800c514:	613b      	str	r3, [r7, #16]
                                  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStructure);
 800c516:	f107 030c 	add.w	r3, r7, #12
 800c51a:	4619      	mov	r1, r3
 800c51c:	4826      	ldr	r0, [pc, #152]	; (800c5b8 <BIOS_Ctrl+0x24c>)
 800c51e:	f00d f967 	bl	80197f0 <HAL_GPIO_Init>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
 800c522:	2310      	movs	r3, #16
 800c524:	60fb      	str	r3, [r7, #12]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_ANALOG;
 800c526:	2303      	movs	r3, #3
 800c528:	613b      	str	r3, [r7, #16]
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
 800c52a:	f107 030c 	add.w	r3, r7, #12
 800c52e:	4619      	mov	r1, r3
 800c530:	4821      	ldr	r0, [pc, #132]	; (800c5b8 <BIOS_Ctrl+0x24c>)
 800c532:	f00d f95d 	bl	80197f0 <HAL_GPIO_Init>
                                  __HAL_DAC_ENABLE(&hdac, DAC_CHANNEL_1);
 800c536:	4b1e      	ldr	r3, [pc, #120]	; (800c5b0 <BIOS_Ctrl+0x244>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	681a      	ldr	r2, [r3, #0]
 800c53c:	4b1c      	ldr	r3, [pc, #112]	; (800c5b0 <BIOS_Ctrl+0x244>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f042 0201 	orr.w	r2, r2, #1
 800c544:	601a      	str	r2, [r3, #0]
                                  break;
 800c546:	e01c      	b.n	800c582 <BIOS_Ctrl+0x216>
                    		      __HAL_DAC_DISABLE(&hdac, DAC_CHANNEL_1);
 800c548:	4b19      	ldr	r3, [pc, #100]	; (800c5b0 <BIOS_Ctrl+0x244>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	681a      	ldr	r2, [r3, #0]
 800c54e:	4b18      	ldr	r3, [pc, #96]	; (800c5b0 <BIOS_Ctrl+0x244>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f022 0201 	bic.w	r2, r2, #1
 800c556:	601a      	str	r2, [r3, #0]
                                  GPIO_InitStructure.Pin   = Fo2_Pin ;
 800c558:	2304      	movs	r3, #4
 800c55a:	60fb      	str	r3, [r7, #12]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800c55c:	2302      	movs	r3, #2
 800c55e:	613b      	str	r3, [r7, #16]
                                  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStructure);
 800c560:	f107 030c 	add.w	r3, r7, #12
 800c564:	4619      	mov	r1, r3
 800c566:	4814      	ldr	r0, [pc, #80]	; (800c5b8 <BIOS_Ctrl+0x24c>)
 800c568:	f00d f942 	bl	80197f0 <HAL_GPIO_Init>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
 800c56c:	2310      	movs	r3, #16
 800c56e:	60fb      	str	r3, [r7, #12]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
 800c570:	2300      	movs	r3, #0
 800c572:	613b      	str	r3, [r7, #16]
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
 800c574:	f107 030c 	add.w	r3, r7, #12
 800c578:	4619      	mov	r1, r3
 800c57a:	480f      	ldr	r0, [pc, #60]	; (800c5b8 <BIOS_Ctrl+0x24c>)
 800c57c:	f00d f938 	bl	80197f0 <HAL_GPIO_Init>
                                  break;
 800c580:	bf00      	nop
                  break;
 800c582:	e003      	b.n	800c58c <BIOS_Ctrl+0x220>

    default: break;
 800c584:	bf00      	nop
 800c586:	e002      	b.n	800c58e <BIOS_Ctrl+0x222>
    			  break;
 800c588:	bf00      	nop
 800c58a:	e000      	b.n	800c58e <BIOS_Ctrl+0x222>
                  break;
 800c58c:	bf00      	nop
  }
}
 800c58e:	bf00      	nop
 800c590:	3720      	adds	r7, #32
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}
 800c596:	bf00      	nop
 800c598:	20006ad8 	.word	0x20006ad8
 800c59c:	200068e8 	.word	0x200068e8
 800c5a0:	20006be8 	.word	0x20006be8
 800c5a4:	20006bcc 	.word	0x20006bcc
 800c5a8:	40020800 	.word	0x40020800
 800c5ac:	40020400 	.word	0x40020400
 800c5b0:	20006b58 	.word	0x20006b58
 800c5b4:	20006c30 	.word	0x20006c30
 800c5b8:	40020000 	.word	0x40020000

0800c5bc <Set_Base>:

/*******************************************************************************
 Set_Base: ˮƽɨ��ʱ��ת������
*******************************************************************************/
void Set_Base(short Base)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b082      	sub	sp, #8
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	80fb      	strh	r3, [r7, #6]
	octim1.Pulse = (ARR[Base]+1)/2;
 800c5c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c5ca:	4a13      	ldr	r2, [pc, #76]	; (800c618 <Set_Base+0x5c>)
 800c5cc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c5d0:	3301      	adds	r3, #1
 800c5d2:	0fda      	lsrs	r2, r3, #31
 800c5d4:	4413      	add	r3, r2
 800c5d6:	105b      	asrs	r3, r3, #1
 800c5d8:	461a      	mov	r2, r3
 800c5da:	4b10      	ldr	r3, [pc, #64]	; (800c61c <Set_Base+0x60>)
 800c5dc:	605a      	str	r2, [r3, #4]
	HAL_TIM_OC_ConfigChannel(&htim1, &octim1, 1 );
 800c5de:	2201      	movs	r2, #1
 800c5e0:	490e      	ldr	r1, [pc, #56]	; (800c61c <Set_Base+0x60>)
 800c5e2:	480f      	ldr	r0, [pc, #60]	; (800c620 <Set_Base+0x64>)
 800c5e4:	f010 fdc8 	bl	801d178 <HAL_TIM_OC_ConfigChannel>
	htim1.Init.Prescaler = PSC[Base];
 800c5e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c5ec:	4a0d      	ldr	r2, [pc, #52]	; (800c624 <Set_Base+0x68>)
 800c5ee:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c5f2:	461a      	mov	r2, r3
 800c5f4:	4b0a      	ldr	r3, [pc, #40]	; (800c620 <Set_Base+0x64>)
 800c5f6:	605a      	str	r2, [r3, #4]
	htim1.Init.Period = ARR[Base];
 800c5f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c5fc:	4a06      	ldr	r2, [pc, #24]	; (800c618 <Set_Base+0x5c>)
 800c5fe:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c602:	461a      	mov	r2, r3
 800c604:	4b06      	ldr	r3, [pc, #24]	; (800c620 <Set_Base+0x64>)
 800c606:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Init(&htim1);
 800c608:	4805      	ldr	r0, [pc, #20]	; (800c620 <Set_Base+0x64>)
 800c60a:	f010 fbed 	bl	801cde8 <HAL_TIM_Base_Init>
}
 800c60e:	bf00      	nop
 800c610:	3708      	adds	r7, #8
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}
 800c616:	bf00      	nop
 800c618:	08000b30 	.word	0x08000b30
 800c61c:	20006bcc 	.word	0x20006bcc
 800c620:	20006be8 	.word	0x20006be8
 800c624:	08000b08 	.word	0x08000b08

0800c628 <Set_Duty>:

/*******************************************************************************
 Set_Duty: �������ռ�ձ�����
*******************************************************************************/
void Set_Duty(void)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	af00      	add	r7, sp, #0
	 octim5.Pulse = (FARR[List[FREQ_OUT].Val]+1)*(10-List[FREQ_DUT].Val)/10;
 800c62c:	4b0f      	ldr	r3, [pc, #60]	; (800c66c <Set_Duty+0x44>)
 800c62e:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 800c632:	461a      	mov	r2, r3
 800c634:	4b0e      	ldr	r3, [pc, #56]	; (800c670 <Set_Duty+0x48>)
 800c636:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800c63a:	3301      	adds	r3, #1
 800c63c:	4a0b      	ldr	r2, [pc, #44]	; (800c66c <Set_Duty+0x44>)
 800c63e:	f9b2 2134 	ldrsh.w	r2, [r2, #308]	; 0x134
 800c642:	f1c2 020a 	rsb	r2, r2, #10
 800c646:	fb02 f303 	mul.w	r3, r2, r3
 800c64a:	4a0a      	ldr	r2, [pc, #40]	; (800c674 <Set_Duty+0x4c>)
 800c64c:	fb82 1203 	smull	r1, r2, r2, r3
 800c650:	1092      	asrs	r2, r2, #2
 800c652:	17db      	asrs	r3, r3, #31
 800c654:	1ad3      	subs	r3, r2, r3
 800c656:	461a      	mov	r2, r3
 800c658:	4b07      	ldr	r3, [pc, #28]	; (800c678 <Set_Duty+0x50>)
 800c65a:	605a      	str	r2, [r3, #4]
	 HAL_TIM_OC_ConfigChannel(&htim5, &octim5, 3 );
 800c65c:	2203      	movs	r2, #3
 800c65e:	4906      	ldr	r1, [pc, #24]	; (800c678 <Set_Duty+0x50>)
 800c660:	4806      	ldr	r0, [pc, #24]	; (800c67c <Set_Duty+0x54>)
 800c662:	f010 fd89 	bl	801d178 <HAL_TIM_OC_ConfigChannel>
}
 800c666:	bf00      	nop
 800c668:	bd80      	pop	{r7, pc}
 800c66a:	bf00      	nop
 800c66c:	20000298 	.word	0x20000298
 800c670:	08000ae8 	.word	0x08000ae8
 800c674:	66666667 	.word	0x66666667
 800c678:	20006b3c 	.word	0x20006b3c
 800c67c:	20006990 	.word	0x20006990

0800c680 <Set_Fout>:

/*******************************************************************************
 Set_Fout: �������Ƶ������
*******************************************************************************/
void Set_Fout(short Range)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b082      	sub	sp, #8
 800c684:	af00      	add	r7, sp, #0
 800c686:	4603      	mov	r3, r0
 800c688:	80fb      	strh	r3, [r7, #6]
	octim5.Pulse = (FARR[Range]+1)/2;
 800c68a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c68e:	4a13      	ldr	r2, [pc, #76]	; (800c6dc <Set_Fout+0x5c>)
 800c690:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c694:	3301      	adds	r3, #1
 800c696:	0fda      	lsrs	r2, r3, #31
 800c698:	4413      	add	r3, r2
 800c69a:	105b      	asrs	r3, r3, #1
 800c69c:	461a      	mov	r2, r3
 800c69e:	4b10      	ldr	r3, [pc, #64]	; (800c6e0 <Set_Fout+0x60>)
 800c6a0:	605a      	str	r2, [r3, #4]
	HAL_TIM_OC_ConfigChannel(&htim5, &octim5, 3 );
 800c6a2:	2203      	movs	r2, #3
 800c6a4:	490e      	ldr	r1, [pc, #56]	; (800c6e0 <Set_Fout+0x60>)
 800c6a6:	480f      	ldr	r0, [pc, #60]	; (800c6e4 <Set_Fout+0x64>)
 800c6a8:	f010 fd66 	bl	801d178 <HAL_TIM_OC_ConfigChannel>
	htim5.Init.Prescaler = FPSC[Range];
 800c6ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c6b0:	4a0d      	ldr	r2, [pc, #52]	; (800c6e8 <Set_Fout+0x68>)
 800c6b2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c6b6:	461a      	mov	r2, r3
 800c6b8:	4b0a      	ldr	r3, [pc, #40]	; (800c6e4 <Set_Fout+0x64>)
 800c6ba:	605a      	str	r2, [r3, #4]
	htim5.Init.Period = FARR[Range];
 800c6bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c6c0:	4a06      	ldr	r2, [pc, #24]	; (800c6dc <Set_Fout+0x5c>)
 800c6c2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	4b06      	ldr	r3, [pc, #24]	; (800c6e4 <Set_Fout+0x64>)
 800c6ca:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Init(&htim5);
 800c6cc:	4805      	ldr	r0, [pc, #20]	; (800c6e4 <Set_Fout+0x64>)
 800c6ce:	f010 fb8b 	bl	801cde8 <HAL_TIM_Base_Init>
}
 800c6d2:	bf00      	nop
 800c6d4:	3708      	adds	r7, #8
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}
 800c6da:	bf00      	nop
 800c6dc:	08000ae8 	.word	0x08000ae8
 800c6e0:	20006b3c 	.word	0x20006b3c
 800c6e4:	20006990 	.word	0x20006990
 800c6e8:	08000ac8 	.word	0x08000ac8

0800c6ec <ADC_Start>:

/*******************************************************************************
 ADC_Start: ���¿�ʼADCɨ�����
*******************************************************************************/
void ADC_Start(void)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	af00      	add	r7, sp, #0
  Sampl[0]   = List[TIM_BASE].Val;         // �������ʱ����λֵ
 800c6f0:	4b17      	ldr	r3, [pc, #92]	; (800c750 <ADC_Start+0x64>)
 800c6f2:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 800c6f6:	4b17      	ldr	r3, [pc, #92]	; (800c754 <ADC_Start+0x68>)
 800c6f8:	801a      	strh	r2, [r3, #0]
//  DMA1_Channel1->CCR   &= 0xFFFFFFFFE;
//  DMA1_Channel1->CMAR  = (u32)&Sampl[2];             // �����趨DMAͨ��1
  if(( List[SYNCMODE].Val == NONE|| List[SYNCMODE].Val == SCAN)
 800c6fa:	4b15      	ldr	r3, [pc, #84]	; (800c750 <ADC_Start+0x64>)
 800c6fc:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 800c700:	2b05      	cmp	r3, #5
 800c702:	d004      	beq.n	800c70e <ADC_Start+0x22>
 800c704:	4b12      	ldr	r3, [pc, #72]	; (800c750 <ADC_Start+0x64>)
 800c706:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 800c70a:	2b01      	cmp	r3, #1
 800c70c:	d10e      	bne.n	800c72c <ADC_Start+0x40>
     &&( List[TIM_BASE].Val>11))
 800c70e:	4b10      	ldr	r3, [pc, #64]	; (800c750 <ADC_Start+0x64>)
 800c710:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c714:	2b0b      	cmp	r3, #11
 800c716:	dd09      	ble.n	800c72c <ADC_Start+0x40>
  {
	  __HAL_DMA_SET_COUNTER(&hdma_adc1, 302);//       DMA1_Channel1->CNDTR  = 302;                       //10ms
 800c718:	4b0f      	ldr	r3, [pc, #60]	; (800c758 <ADC_Start+0x6c>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800c720:	605a      	str	r2, [r3, #4]
       List[VIEWPOSI].Val= 0;
 800c722:	4b0b      	ldr	r3, [pc, #44]	; (800c750 <ADC_Start+0x64>)
 800c724:	2200      	movs	r2, #0
 800c726:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800c72a:	e00b      	b.n	800c744 <ADC_Start+0x58>
     }
  else
  __HAL_DMA_SET_COUNTER(&hdma_adc1, DEPTH[List[SMPL_DPTH].Val]);//    DMA1_Channel1->CNDTR = DEPTH[List[SMPL_DPTH].Val]; // 0x00001000;
 800c72c:	4b08      	ldr	r3, [pc, #32]	; (800c750 <ADC_Start+0x64>)
 800c72e:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800c732:	461a      	mov	r2, r3
 800c734:	4b09      	ldr	r3, [pc, #36]	; (800c75c <ADC_Start+0x70>)
 800c736:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800c73a:	b29a      	uxth	r2, r3
 800c73c:	4b06      	ldr	r3, [pc, #24]	; (800c758 <ADC_Start+0x6c>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	605a      	str	r2, [r3, #4]
//  DMA1_Channel1->CCR  |= 0x00000001;                 // ���¿�ʼɨ�����
}
 800c742:	bf00      	nop
 800c744:	bf00      	nop
 800c746:	46bd      	mov	sp, r7
 800c748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74c:	4770      	bx	lr
 800c74e:	bf00      	nop
 800c750:	20000298 	.word	0x20000298
 800c754:	20002870 	.word	0x20002870
 800c758:	20006b6c 	.word	0x20006b6c
 800c75c:	08002270 	.word	0x08002270

0800c760 <touchscan>:

//touchscan -- maps touch to key codes  returns 0 if no change
char touchscan()
{
 800c760:	b480      	push	{r7}
 800c762:	b083      	sub	sp, #12
 800c764:	af00      	add	r7, sp, #0
	short x,y;
	char code;

	code =0;
 800c766:	2300      	movs	r3, #0
 800c768:	71fb      	strb	r3, [r7, #7]

	return code;
 800c76a:	79fb      	ldrb	r3, [r7, #7]
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	370c      	adds	r7, #12
 800c770:	46bd      	mov	sp, r7
 800c772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c776:	4770      	bx	lr

0800c778 <Tim3_ISP>:

/*******************************************************************************
* Tim3�жϴ������
*******************************************************************************/
void Tim3_ISP(void)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b082      	sub	sp, #8
 800c77c:	af00      	add	r7, sp, #0

	char checkpress;
    char KeyCode;

//  TIM3->SR = 0;          //moved to main //���жϱ�־
  if(KeymS_F)KeymS_Cnt++;                  //�������ʱ
 800c77e:	4b73      	ldr	r3, [pc, #460]	; (800c94c <Tim3_ISP+0x1d4>)
 800c780:	781b      	ldrb	r3, [r3, #0]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d008      	beq.n	800c798 <Tim3_ISP+0x20>
 800c786:	4b72      	ldr	r3, [pc, #456]	; (800c950 <Tim3_ISP+0x1d8>)
 800c788:	881b      	ldrh	r3, [r3, #0]
 800c78a:	b21b      	sxth	r3, r3
 800c78c:	b29b      	uxth	r3, r3
 800c78e:	3301      	adds	r3, #1
 800c790:	b29b      	uxth	r3, r3
 800c792:	b21a      	sxth	r2, r3
 800c794:	4b6e      	ldr	r3, [pc, #440]	; (800c950 <Tim3_ISP+0x1d8>)
 800c796:	801a      	strh	r2, [r3, #0]
  Tim_Cnt++;
 800c798:	4b6e      	ldr	r3, [pc, #440]	; (800c954 <Tim3_ISP+0x1dc>)
 800c79a:	881b      	ldrh	r3, [r3, #0]
 800c79c:	b21b      	sxth	r3, r3
 800c79e:	b29b      	uxth	r3, r3
 800c7a0:	3301      	adds	r3, #1
 800c7a2:	b29b      	uxth	r3, r3
 800c7a4:	b21a      	sxth	r2, r3
 800c7a6:	4b6b      	ldr	r3, [pc, #428]	; (800c954 <Tim3_ISP+0x1dc>)
 800c7a8:	801a      	strh	r2, [r3, #0]
  if(Delay_Cnt>0) Delay_Cnt--;
 800c7aa:	4b6b      	ldr	r3, [pc, #428]	; (800c958 <Tim3_ISP+0x1e0>)
 800c7ac:	881b      	ldrh	r3, [r3, #0]
 800c7ae:	b21b      	sxth	r3, r3
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	dd08      	ble.n	800c7c6 <Tim3_ISP+0x4e>
 800c7b4:	4b68      	ldr	r3, [pc, #416]	; (800c958 <Tim3_ISP+0x1e0>)
 800c7b6:	881b      	ldrh	r3, [r3, #0]
 800c7b8:	b21b      	sxth	r3, r3
 800c7ba:	b29b      	uxth	r3, r3
 800c7bc:	3b01      	subs	r3, #1
 800c7be:	b29b      	uxth	r3, r3
 800c7c0:	b21a      	sxth	r2, r3
 800c7c2:	4b65      	ldr	r3, [pc, #404]	; (800c958 <Tim3_ISP+0x1e0>)
 800c7c4:	801a      	strh	r2, [r3, #0]
  if (mS_Cnt > 0)
 800c7c6:	4b65      	ldr	r3, [pc, #404]	; (800c95c <Tim3_ISP+0x1e4>)
 800c7c8:	881b      	ldrh	r3, [r3, #0]
 800c7ca:	b21b      	sxth	r3, r3
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	f340 8081 	ble.w	800c8d4 <Tim3_ISP+0x15c>
  {
    mS_Cnt--;
 800c7d2:	4b62      	ldr	r3, [pc, #392]	; (800c95c <Tim3_ISP+0x1e4>)
 800c7d4:	881b      	ldrh	r3, [r3, #0]
 800c7d6:	b21b      	sxth	r3, r3
 800c7d8:	b29b      	uxth	r3, r3
 800c7da:	3b01      	subs	r3, #1
 800c7dc:	b29b      	uxth	r3, r3
 800c7de:	b21a      	sxth	r2, r3
 800c7e0:	4b5e      	ldr	r3, [pc, #376]	; (800c95c <Tim3_ISP+0x1e4>)
 800c7e2:	801a      	strh	r2, [r3, #0]
    if ((mS_Cnt%20)== 0)
 800c7e4:	4b5d      	ldr	r3, [pc, #372]	; (800c95c <Tim3_ISP+0x1e4>)
 800c7e6:	881b      	ldrh	r3, [r3, #0]
 800c7e8:	b21a      	sxth	r2, r3
 800c7ea:	4b5d      	ldr	r3, [pc, #372]	; (800c960 <Tim3_ISP+0x1e8>)
 800c7ec:	fb83 1302 	smull	r1, r3, r3, r2
 800c7f0:	10d9      	asrs	r1, r3, #3
 800c7f2:	17d3      	asrs	r3, r2, #31
 800c7f4:	1ac9      	subs	r1, r1, r3
 800c7f6:	460b      	mov	r3, r1
 800c7f8:	009b      	lsls	r3, r3, #2
 800c7fa:	440b      	add	r3, r1
 800c7fc:	009b      	lsls	r3, r3, #2
 800c7fe:	1ad3      	subs	r3, r2, r3
 800c800:	b21b      	sxth	r3, r3
 800c802:	2b00      	cmp	r3, #0
 800c804:	f040 809d 	bne.w	800c942 <Tim3_ISP+0x1ca>
    {                 //  20mS  ÿ20mS��1�μ���
    	if(Key_Wait_Cnt)    Key_Wait_Cnt--;
 800c808:	4b56      	ldr	r3, [pc, #344]	; (800c964 <Tim3_ISP+0x1ec>)
 800c80a:	781b      	ldrb	r3, [r3, #0]
 800c80c:	b2db      	uxtb	r3, r3
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d006      	beq.n	800c820 <Tim3_ISP+0xa8>
 800c812:	4b54      	ldr	r3, [pc, #336]	; (800c964 <Tim3_ISP+0x1ec>)
 800c814:	781b      	ldrb	r3, [r3, #0]
 800c816:	b2db      	uxtb	r3, r3
 800c818:	3b01      	subs	r3, #1
 800c81a:	b2da      	uxtb	r2, r3
 800c81c:	4b51      	ldr	r3, [pc, #324]	; (800c964 <Tim3_ISP+0x1ec>)
 800c81e:	701a      	strb	r2, [r3, #0]
    	if(Key_Repeat_Cnt)  Key_Repeat_Cnt--;
 800c820:	4b51      	ldr	r3, [pc, #324]	; (800c968 <Tim3_ISP+0x1f0>)
 800c822:	781b      	ldrb	r3, [r3, #0]
 800c824:	b2db      	uxtb	r3, r3
 800c826:	2b00      	cmp	r3, #0
 800c828:	d006      	beq.n	800c838 <Tim3_ISP+0xc0>
 800c82a:	4b4f      	ldr	r3, [pc, #316]	; (800c968 <Tim3_ISP+0x1f0>)
 800c82c:	781b      	ldrb	r3, [r3, #0]
 800c82e:	b2db      	uxtb	r3, r3
 800c830:	3b01      	subs	r3, #1
 800c832:	b2da      	uxtb	r2, r3
 800c834:	4b4c      	ldr	r3, [pc, #304]	; (800c968 <Tim3_ISP+0x1f0>)
 800c836:	701a      	strb	r2, [r3, #0]
    	KeyCode = checkpress =0 ;
 800c838:	2300      	movs	r3, #0
 800c83a:	71fb      	strb	r3, [r7, #7]
 800c83c:	79fb      	ldrb	r3, [r7, #7]
 800c83e:	71bb      	strb	r3, [r7, #6]
    	Touch = HAL_GPIO_ReadPin(TpI_GPIO_Port, TpI_Pin);  //read pen
 800c840:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c844:	4849      	ldr	r0, [pc, #292]	; (800c96c <Tim3_ISP+0x1f4>)
 800c846:	f00d f967 	bl	8019b18 <HAL_GPIO_ReadPin>
 800c84a:	4603      	mov	r3, r0
 800c84c:	461a      	mov	r2, r3
 800c84e:	4b48      	ldr	r3, [pc, #288]	; (800c970 <Tim3_ISP+0x1f8>)
 800c850:	701a      	strb	r2, [r3, #0]
    	if (Touch != LastTouch)
 800c852:	4b47      	ldr	r3, [pc, #284]	; (800c970 <Tim3_ISP+0x1f8>)
 800c854:	781a      	ldrb	r2, [r3, #0]
 800c856:	4b47      	ldr	r3, [pc, #284]	; (800c974 <Tim3_ISP+0x1fc>)
 800c858:	781b      	ldrb	r3, [r3, #0]
 800c85a:	429a      	cmp	r2, r3
 800c85c:	d006      	beq.n	800c86c <Tim3_ISP+0xf4>
    	{
    	// pen changed
    		checkpress =1; //check pressure if pen changed
 800c85e:	2301      	movs	r3, #1
 800c860:	71fb      	strb	r3, [r7, #7]
    		LastTouch = Touch;
 800c862:	4b43      	ldr	r3, [pc, #268]	; (800c970 <Tim3_ISP+0x1f8>)
 800c864:	781a      	ldrb	r2, [r3, #0]
 800c866:	4b43      	ldr	r3, [pc, #268]	; (800c974 <Tim3_ISP+0x1fc>)
 800c868:	701a      	strb	r2, [r3, #0]
 800c86a:	e005      	b.n	800c878 <Tim3_ISP+0x100>
    	}
    	else
    	{
    	  if(Touch != 0)
 800c86c:	4b40      	ldr	r3, [pc, #256]	; (800c970 <Tim3_ISP+0x1f8>)
 800c86e:	781b      	ldrb	r3, [r3, #0]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d001      	beq.n	800c878 <Tim3_ISP+0x100>
    	  {
    	    //check that press is valid
    		checkpress =1;
 800c874:	2301      	movs	r3, #1
 800c876:	71fb      	strb	r3, [r7, #7]
    	  }
    	}

    	if(checkpress !=0)
 800c878:	79fb      	ldrb	r3, [r7, #7]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d003      	beq.n	800c886 <Tim3_ISP+0x10e>
    	{
    		KeyCode = touchscan();
 800c87e:	f7ff ff6f 	bl	800c760 <touchscan>
 800c882:	4603      	mov	r3, r0
 800c884:	71bb      	strb	r3, [r7, #6]
       	}
//      KeyCode = KeyScan();
      if(KeyCode !=0) Key_Buffer = KeyCode;
 800c886:	79bb      	ldrb	r3, [r7, #6]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d002      	beq.n	800c892 <Tim3_ISP+0x11a>
 800c88c:	4a3a      	ldr	r2, [pc, #232]	; (800c978 <Tim3_ISP+0x200>)
 800c88e:	79bb      	ldrb	r3, [r7, #6]
 800c890:	7013      	strb	r3, [r2, #0]

      if(Cursor_Cnt >0)
 800c892:	4b3a      	ldr	r3, [pc, #232]	; (800c97c <Tim3_ISP+0x204>)
 800c894:	881b      	ldrh	r3, [r3, #0]
 800c896:	b21b      	sxth	r3, r3
 800c898:	2b00      	cmp	r3, #0
 800c89a:	dd09      	ble.n	800c8b0 <Tim3_ISP+0x138>
    	  Cursor_Cnt--;
 800c89c:	4b37      	ldr	r3, [pc, #220]	; (800c97c <Tim3_ISP+0x204>)
 800c89e:	881b      	ldrh	r3, [r3, #0]
 800c8a0:	b21b      	sxth	r3, r3
 800c8a2:	b29b      	uxth	r3, r3
 800c8a4:	3b01      	subs	r3, #1
 800c8a6:	b29b      	uxth	r3, r3
 800c8a8:	b21a      	sxth	r2, r3
 800c8aa:	4b34      	ldr	r3, [pc, #208]	; (800c97c <Tim3_ISP+0x204>)
 800c8ac:	801a      	strh	r2, [r3, #0]
        Windows_Pop = 0;
        Clr_WavePosi(DAR);
      }
    }
  }
}
 800c8ae:	e048      	b.n	800c942 <Tim3_ISP+0x1ca>
        Cursor_Cnt = 12;                  // 12*20mS=240mS
 800c8b0:	4b32      	ldr	r3, [pc, #200]	; (800c97c <Tim3_ISP+0x204>)
 800c8b2:	220c      	movs	r2, #12
 800c8b4:	801a      	strh	r2, [r3, #0]
        Twink = !Twink;
 800c8b6:	4b32      	ldr	r3, [pc, #200]	; (800c980 <Tim3_ISP+0x208>)
 800c8b8:	781b      	ldrb	r3, [r3, #0]
 800c8ba:	b2db      	uxtb	r3, r3
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	bf0c      	ite	eq
 800c8c0:	2301      	moveq	r3, #1
 800c8c2:	2300      	movne	r3, #0
 800c8c4:	b2db      	uxtb	r3, r3
 800c8c6:	461a      	mov	r2, r3
 800c8c8:	4b2d      	ldr	r3, [pc, #180]	; (800c980 <Tim3_ISP+0x208>)
 800c8ca:	701a      	strb	r2, [r3, #0]
        Blink =  BLINK;
 800c8cc:	4b2d      	ldr	r3, [pc, #180]	; (800c984 <Tim3_ISP+0x20c>)
 800c8ce:	2201      	movs	r2, #1
 800c8d0:	701a      	strb	r2, [r3, #0]
}
 800c8d2:	e036      	b.n	800c942 <Tim3_ISP+0x1ca>
    mS_Cnt = 1000;
 800c8d4:	4b21      	ldr	r3, [pc, #132]	; (800c95c <Tim3_ISP+0x1e4>)
 800c8d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c8da:	801a      	strh	r2, [r3, #0]
    if((List[STANDBY].Val !=0) && (StdBy_Time > 0))
 800c8dc:	4b2a      	ldr	r3, [pc, #168]	; (800c988 <Tim3_ISP+0x210>)
 800c8de:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d00d      	beq.n	800c902 <Tim3_ISP+0x18a>
 800c8e6:	4b29      	ldr	r3, [pc, #164]	; (800c98c <Tim3_ISP+0x214>)
 800c8e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	dd08      	ble.n	800c902 <Tim3_ISP+0x18a>
      StdBy_Time--;      //������ʱ
 800c8f0:	4b26      	ldr	r3, [pc, #152]	; (800c98c <Tim3_ISP+0x214>)
 800c8f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c8f6:	b29b      	uxth	r3, r3
 800c8f8:	3b01      	subs	r3, #1
 800c8fa:	b29b      	uxth	r3, r3
 800c8fc:	b21a      	sxth	r2, r3
 800c8fe:	4b23      	ldr	r3, [pc, #140]	; (800c98c <Tim3_ISP+0x214>)
 800c900:	801a      	strh	r2, [r3, #0]
    if(PopupCnt > 0)
 800c902:	4b23      	ldr	r3, [pc, #140]	; (800c990 <Tim3_ISP+0x218>)
 800c904:	881b      	ldrh	r3, [r3, #0]
 800c906:	b21b      	sxth	r3, r3
 800c908:	2b00      	cmp	r3, #0
 800c90a:	dd0d      	ble.n	800c928 <Tim3_ISP+0x1b0>
      if(Cal_Flag == 0)
 800c90c:	4b21      	ldr	r3, [pc, #132]	; (800c994 <Tim3_ISP+0x21c>)
 800c90e:	781b      	ldrb	r3, [r3, #0]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d116      	bne.n	800c942 <Tim3_ISP+0x1ca>
    	  PopupCnt--;
 800c914:	4b1e      	ldr	r3, [pc, #120]	; (800c990 <Tim3_ISP+0x218>)
 800c916:	881b      	ldrh	r3, [r3, #0]
 800c918:	b21b      	sxth	r3, r3
 800c91a:	b29b      	uxth	r3, r3
 800c91c:	3b01      	subs	r3, #1
 800c91e:	b29b      	uxth	r3, r3
 800c920:	b21a      	sxth	r2, r3
 800c922:	4b1b      	ldr	r3, [pc, #108]	; (800c990 <Tim3_ISP+0x218>)
 800c924:	801a      	strh	r2, [r3, #0]
}
 800c926:	e00c      	b.n	800c942 <Tim3_ISP+0x1ca>
      Close_Pop();        // �رնԻ���
 800c928:	f001 ff04 	bl	800e734 <Close_Pop>
      if(Windows_Pop)
 800c92c:	4b1a      	ldr	r3, [pc, #104]	; (800c998 <Tim3_ISP+0x220>)
 800c92e:	781b      	ldrb	r3, [r3, #0]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d006      	beq.n	800c942 <Tim3_ISP+0x1ca>
        Windows_Pop = 0;
 800c934:	4b18      	ldr	r3, [pc, #96]	; (800c998 <Tim3_ISP+0x220>)
 800c936:	2200      	movs	r2, #0
 800c938:	701a      	strb	r2, [r3, #0]
        Clr_WavePosi(DAR);
 800c93a:	f643 10e7 	movw	r0, #14823	; 0x39e7
 800c93e:	f007 fe63 	bl	8014608 <Clr_WavePosi>
}
 800c942:	bf00      	nop
 800c944:	3708      	adds	r7, #8
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}
 800c94a:	bf00      	nop
 800c94c:	20000786 	.word	0x20000786
 800c950:	20000a32 	.word	0x20000a32
 800c954:	20000a34 	.word	0x20000a34
 800c958:	20000784 	.word	0x20000784
 800c95c:	20000782 	.word	0x20000782
 800c960:	66666667 	.word	0x66666667
 800c964:	20000788 	.word	0x20000788
 800c968:	20000787 	.word	0x20000787
 800c96c:	40020400 	.word	0x40020400
 800c970:	20000a30 	.word	0x20000a30
 800c974:	20000789 	.word	0x20000789
 800c978:	2000077d 	.word	0x2000077d
 800c97c:	20000780 	.word	0x20000780
 800c980:	2000077c 	.word	0x2000077c
 800c984:	20000a31 	.word	0x20000a31
 800c988:	20000298 	.word	0x20000298
 800c98c:	2000079c 	.word	0x2000079c
 800c990:	20000000 	.word	0x20000000
 800c994:	200001b4 	.word	0x200001b4
 800c998:	200007a6 	.word	0x200007a6

0800c99c <Fill_Base>:
 800c99c:	b480      	push	{r7}
 800c99e:	af00      	add	r7, sp, #0
 800c9a0:	4b12      	ldr	r3, [pc, #72]	; (800c9ec <Fill_Base+0x50>)
 800c9a2:	4a13      	ldr	r2, [pc, #76]	; (800c9f0 <Fill_Base+0x54>)
 800c9a4:	601a      	str	r2, [r3, #0]
 800c9a6:	4b13      	ldr	r3, [pc, #76]	; (800c9f4 <Fill_Base+0x58>)
 800c9a8:	2266      	movs	r2, #102	; 0x66
 800c9aa:	601a      	str	r2, [r3, #0]
 800c9ac:	4b0f      	ldr	r3, [pc, #60]	; (800c9ec <Fill_Base+0x50>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	4a11      	ldr	r2, [pc, #68]	; (800c9f8 <Fill_Base+0x5c>)
 800c9b2:	6812      	ldr	r2, [r2, #0]
 800c9b4:	601a      	str	r2, [r3, #0]
 800c9b6:	4b0d      	ldr	r3, [pc, #52]	; (800c9ec <Fill_Base+0x50>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	3304      	adds	r3, #4
 800c9bc:	4a0b      	ldr	r2, [pc, #44]	; (800c9ec <Fill_Base+0x50>)
 800c9be:	6013      	str	r3, [r2, #0]
 800c9c0:	4b0c      	ldr	r3, [pc, #48]	; (800c9f4 <Fill_Base+0x58>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	3b01      	subs	r3, #1
 800c9c6:	4a0b      	ldr	r2, [pc, #44]	; (800c9f4 <Fill_Base+0x58>)
 800c9c8:	6013      	str	r3, [r2, #0]
 800c9ca:	4b0a      	ldr	r3, [pc, #40]	; (800c9f4 <Fill_Base+0x58>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d000      	beq.n	800c9d4 <Fill_Base+0x38>
 800c9d2:	e7eb      	b.n	800c9ac <Fill_Base+0x10>
 800c9d4:	4b05      	ldr	r3, [pc, #20]	; (800c9ec <Fill_Base+0x50>)
 800c9d6:	4a09      	ldr	r2, [pc, #36]	; (800c9fc <Fill_Base+0x60>)
 800c9d8:	601a      	str	r2, [r3, #0]
 800c9da:	4b07      	ldr	r3, [pc, #28]	; (800c9f8 <Fill_Base+0x5c>)
 800c9dc:	f647 32ef 	movw	r2, #31727	; 0x7bef
 800c9e0:	601a      	str	r2, [r3, #0]
 800c9e2:	bf00      	nop
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ea:	4770      	bx	lr
 800c9ec:	20000bec 	.word	0x20000bec
 800c9f0:	20000be0 	.word	0x20000be0
 800c9f4:	20000a3c 	.word	0x20000a3c
 800c9f8:	20000a40 	.word	0x20000a40
 800c9fc:	20000bde 	.word	0x20000bde

0800ca00 <Buld_0>:
 800ca00:	b580      	push	{r7, lr}
 800ca02:	af00      	add	r7, sp, #0
 800ca04:	4b03      	ldr	r3, [pc, #12]	; (800ca14 <Buld_0+0x14>)
 800ca06:	2200      	movs	r2, #0
 800ca08:	601a      	str	r2, [r3, #0]
 800ca0a:	f7ff ffc7 	bl	800c99c <Fill_Base>
 800ca0e:	bf00      	nop
 800ca10:	bd80      	pop	{r7, pc}
 800ca12:	bf00      	nop
 800ca14:	20000a40 	.word	0x20000a40

0800ca18 <Buld_1>:
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	4b0e      	ldr	r3, [pc, #56]	; (800ca58 <Buld_1+0x40>)
 800ca1e:	4a0f      	ldr	r2, [pc, #60]	; (800ca5c <Buld_1+0x44>)
 800ca20:	601a      	str	r2, [r3, #0]
 800ca22:	f7ff ffbb 	bl	800c99c <Fill_Base>
 800ca26:	4b0c      	ldr	r3, [pc, #48]	; (800ca58 <Buld_1+0x40>)
 800ca28:	2200      	movs	r2, #0
 800ca2a:	601a      	str	r2, [r3, #0]
 800ca2c:	4b0c      	ldr	r3, [pc, #48]	; (800ca60 <Buld_1+0x48>)
 800ca2e:	f44f 72c9 	mov.w	r2, #402	; 0x192
 800ca32:	601a      	str	r2, [r3, #0]
 800ca34:	4b08      	ldr	r3, [pc, #32]	; (800ca58 <Buld_1+0x40>)
 800ca36:	6819      	ldr	r1, [r3, #0]
 800ca38:	4b0a      	ldr	r3, [pc, #40]	; (800ca64 <Buld_1+0x4c>)
 800ca3a:	681a      	ldr	r2, [r3, #0]
 800ca3c:	4b08      	ldr	r3, [pc, #32]	; (800ca60 <Buld_1+0x48>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	4413      	add	r3, r2
 800ca42:	b28a      	uxth	r2, r1
 800ca44:	801a      	strh	r2, [r3, #0]
 800ca46:	4b04      	ldr	r3, [pc, #16]	; (800ca58 <Buld_1+0x40>)
 800ca48:	681a      	ldr	r2, [r3, #0]
 800ca4a:	4b06      	ldr	r3, [pc, #24]	; (800ca64 <Buld_1+0x4c>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	3b02      	subs	r3, #2
 800ca50:	b292      	uxth	r2, r2
 800ca52:	801a      	strh	r2, [r3, #0]
 800ca54:	bf00      	nop
 800ca56:	bd80      	pop	{r7, pc}
 800ca58:	20000a40 	.word	0x20000a40
 800ca5c:	7bef7bef 	.word	0x7bef7bef
 800ca60:	20000a3c 	.word	0x20000a3c
 800ca64:	20000bec 	.word	0x20000bec

0800ca68 <Buld_2>:
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	af00      	add	r7, sp, #0
 800ca6c:	4b0c      	ldr	r3, [pc, #48]	; (800caa0 <Buld_2+0x38>)
 800ca6e:	2200      	movs	r2, #0
 800ca70:	601a      	str	r2, [r3, #0]
 800ca72:	f7ff ff93 	bl	800c99c <Fill_Base>
 800ca76:	4b0b      	ldr	r3, [pc, #44]	; (800caa4 <Buld_2+0x3c>)
 800ca78:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800ca7c:	601a      	str	r2, [r3, #0]
 800ca7e:	4b08      	ldr	r3, [pc, #32]	; (800caa0 <Buld_2+0x38>)
 800ca80:	6819      	ldr	r1, [r3, #0]
 800ca82:	4b09      	ldr	r3, [pc, #36]	; (800caa8 <Buld_2+0x40>)
 800ca84:	681a      	ldr	r2, [r3, #0]
 800ca86:	4b07      	ldr	r3, [pc, #28]	; (800caa4 <Buld_2+0x3c>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	4413      	add	r3, r2
 800ca8c:	b28a      	uxth	r2, r1
 800ca8e:	801a      	strh	r2, [r3, #0]
 800ca90:	4b03      	ldr	r3, [pc, #12]	; (800caa0 <Buld_2+0x38>)
 800ca92:	681a      	ldr	r2, [r3, #0]
 800ca94:	4b04      	ldr	r3, [pc, #16]	; (800caa8 <Buld_2+0x40>)
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	b292      	uxth	r2, r2
 800ca9a:	801a      	strh	r2, [r3, #0]
 800ca9c:	bf00      	nop
 800ca9e:	bd80      	pop	{r7, pc}
 800caa0:	20000a40 	.word	0x20000a40
 800caa4:	20000a3c 	.word	0x20000a3c
 800caa8:	20000bec 	.word	0x20000bec

0800caac <Buld_3>:
 800caac:	b580      	push	{r7, lr}
 800caae:	af00      	add	r7, sp, #0
 800cab0:	4b0e      	ldr	r3, [pc, #56]	; (800caec <Buld_3+0x40>)
 800cab2:	2200      	movs	r2, #0
 800cab4:	601a      	str	r2, [r3, #0]
 800cab6:	f7ff ff71 	bl	800c99c <Fill_Base>
 800caba:	4b0d      	ldr	r3, [pc, #52]	; (800caf0 <Buld_3+0x44>)
 800cabc:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 800cac0:	601a      	str	r2, [r3, #0]
 800cac2:	4b0b      	ldr	r3, [pc, #44]	; (800caf0 <Buld_3+0x44>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	3b32      	subs	r3, #50	; 0x32
 800cac8:	4a09      	ldr	r2, [pc, #36]	; (800caf0 <Buld_3+0x44>)
 800caca:	6013      	str	r3, [r2, #0]
 800cacc:	4b07      	ldr	r3, [pc, #28]	; (800caec <Buld_3+0x40>)
 800cace:	6819      	ldr	r1, [r3, #0]
 800cad0:	4b08      	ldr	r3, [pc, #32]	; (800caf4 <Buld_3+0x48>)
 800cad2:	681a      	ldr	r2, [r3, #0]
 800cad4:	4b06      	ldr	r3, [pc, #24]	; (800caf0 <Buld_3+0x44>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	4413      	add	r3, r2
 800cada:	b28a      	uxth	r2, r1
 800cadc:	801a      	strh	r2, [r3, #0]
 800cade:	4b04      	ldr	r3, [pc, #16]	; (800caf0 <Buld_3+0x44>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d000      	beq.n	800cae8 <Buld_3+0x3c>
 800cae6:	e7ec      	b.n	800cac2 <Buld_3+0x16>
 800cae8:	bf00      	nop
 800caea:	bd80      	pop	{r7, pc}
 800caec:	20000a40 	.word	0x20000a40
 800caf0:	20000a3c 	.word	0x20000a3c
 800caf4:	20000bec 	.word	0x20000bec

0800caf8 <Buld_4>:
 800caf8:	b580      	push	{r7, lr}
 800cafa:	af00      	add	r7, sp, #0
 800cafc:	4b0e      	ldr	r3, [pc, #56]	; (800cb38 <Buld_4+0x40>)
 800cafe:	2200      	movs	r2, #0
 800cb00:	601a      	str	r2, [r3, #0]
 800cb02:	f7ff ff4b 	bl	800c99c <Fill_Base>
 800cb06:	4b0d      	ldr	r3, [pc, #52]	; (800cb3c <Buld_4+0x44>)
 800cb08:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 800cb0c:	601a      	str	r2, [r3, #0]
 800cb0e:	4b0b      	ldr	r3, [pc, #44]	; (800cb3c <Buld_4+0x44>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	3b0a      	subs	r3, #10
 800cb14:	4a09      	ldr	r2, [pc, #36]	; (800cb3c <Buld_4+0x44>)
 800cb16:	6013      	str	r3, [r2, #0]
 800cb18:	4b07      	ldr	r3, [pc, #28]	; (800cb38 <Buld_4+0x40>)
 800cb1a:	6819      	ldr	r1, [r3, #0]
 800cb1c:	4b08      	ldr	r3, [pc, #32]	; (800cb40 <Buld_4+0x48>)
 800cb1e:	681a      	ldr	r2, [r3, #0]
 800cb20:	4b06      	ldr	r3, [pc, #24]	; (800cb3c <Buld_4+0x44>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	4413      	add	r3, r2
 800cb26:	b28a      	uxth	r2, r1
 800cb28:	801a      	strh	r2, [r3, #0]
 800cb2a:	4b04      	ldr	r3, [pc, #16]	; (800cb3c <Buld_4+0x44>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d000      	beq.n	800cb34 <Buld_4+0x3c>
 800cb32:	e7ec      	b.n	800cb0e <Buld_4+0x16>
 800cb34:	bf00      	nop
 800cb36:	bd80      	pop	{r7, pc}
 800cb38:	20000a40 	.word	0x20000a40
 800cb3c:	20000a3c 	.word	0x20000a3c
 800cb40:	20000bec 	.word	0x20000bec

0800cb44 <Draw_Digit_Analog>:
 800cb44:	b480      	push	{r7}
 800cb46:	b083      	sub	sp, #12
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	80fb      	strh	r3, [r7, #6]
 800cb4e:	88fb      	ldrh	r3, [r7, #6]
 800cb50:	2b01      	cmp	r3, #1
 800cb52:	d144      	bne.n	800cbde <Draw_Digit_Analog+0x9a>
 800cb54:	4b7d      	ldr	r3, [pc, #500]	; (800cd4c <Draw_Digit_Analog+0x208>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	f503 7361 	add.w	r3, r3, #900	; 0x384
 800cb5c:	4a7c      	ldr	r2, [pc, #496]	; (800cd50 <Draw_Digit_Analog+0x20c>)
 800cb5e:	6013      	str	r3, [r2, #0]
 800cb60:	4b7b      	ldr	r3, [pc, #492]	; (800cd50 <Draw_Digit_Analog+0x20c>)
 800cb62:	681a      	ldr	r2, [r3, #0]
 800cb64:	4b7b      	ldr	r3, [pc, #492]	; (800cd54 <Draw_Digit_Analog+0x210>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	4413      	add	r3, r2
 800cb6a:	4a79      	ldr	r2, [pc, #484]	; (800cd50 <Draw_Digit_Analog+0x20c>)
 800cb6c:	6013      	str	r3, [r2, #0]
 800cb6e:	4b78      	ldr	r3, [pc, #480]	; (800cd50 <Draw_Digit_Analog+0x20c>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	781b      	ldrb	r3, [r3, #0]
 800cb74:	461a      	mov	r2, r3
 800cb76:	4b78      	ldr	r3, [pc, #480]	; (800cd58 <Draw_Digit_Analog+0x214>)
 800cb78:	601a      	str	r2, [r3, #0]
 800cb7a:	4b75      	ldr	r3, [pc, #468]	; (800cd50 <Draw_Digit_Analog+0x20c>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	3b01      	subs	r3, #1
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	461a      	mov	r2, r3
 800cb84:	4b75      	ldr	r3, [pc, #468]	; (800cd5c <Draw_Digit_Analog+0x218>)
 800cb86:	601a      	str	r2, [r3, #0]
 800cb88:	4b75      	ldr	r3, [pc, #468]	; (800cd60 <Draw_Digit_Analog+0x21c>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	085b      	lsrs	r3, r3, #1
 800cb8e:	4a74      	ldr	r2, [pc, #464]	; (800cd60 <Draw_Digit_Analog+0x21c>)
 800cb90:	6013      	str	r3, [r2, #0]
 800cb92:	4b71      	ldr	r3, [pc, #452]	; (800cd58 <Draw_Digit_Analog+0x214>)
 800cb94:	681a      	ldr	r2, [r3, #0]
 800cb96:	4b73      	ldr	r3, [pc, #460]	; (800cd64 <Draw_Digit_Analog+0x220>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	4013      	ands	r3, r2
 800cb9c:	4a6e      	ldr	r2, [pc, #440]	; (800cd58 <Draw_Digit_Analog+0x214>)
 800cb9e:	6013      	str	r3, [r2, #0]
 800cba0:	4b6d      	ldr	r3, [pc, #436]	; (800cd58 <Draw_Digit_Analog+0x214>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d104      	bne.n	800cbb2 <Draw_Digit_Analog+0x6e>
 800cba8:	4b6d      	ldr	r3, [pc, #436]	; (800cd60 <Draw_Digit_Analog+0x21c>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	4a6a      	ldr	r2, [pc, #424]	; (800cd58 <Draw_Digit_Analog+0x214>)
 800cbae:	6013      	str	r3, [r2, #0]
 800cbb0:	e004      	b.n	800cbbc <Draw_Digit_Analog+0x78>
 800cbb2:	4b6b      	ldr	r3, [pc, #428]	; (800cd60 <Draw_Digit_Analog+0x21c>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	331e      	adds	r3, #30
 800cbb8:	4a67      	ldr	r2, [pc, #412]	; (800cd58 <Draw_Digit_Analog+0x214>)
 800cbba:	6013      	str	r3, [r2, #0]
 800cbbc:	4b67      	ldr	r3, [pc, #412]	; (800cd5c <Draw_Digit_Analog+0x218>)
 800cbbe:	681a      	ldr	r2, [r3, #0]
 800cbc0:	4b68      	ldr	r3, [pc, #416]	; (800cd64 <Draw_Digit_Analog+0x220>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	4013      	ands	r3, r2
 800cbc6:	4a65      	ldr	r2, [pc, #404]	; (800cd5c <Draw_Digit_Analog+0x218>)
 800cbc8:	6013      	str	r3, [r2, #0]
 800cbca:	4b64      	ldr	r3, [pc, #400]	; (800cd5c <Draw_Digit_Analog+0x218>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d01c      	beq.n	800cc0c <Draw_Digit_Analog+0xc8>
 800cbd2:	4b63      	ldr	r3, [pc, #396]	; (800cd60 <Draw_Digit_Analog+0x21c>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	331e      	adds	r3, #30
 800cbd8:	4a61      	ldr	r2, [pc, #388]	; (800cd60 <Draw_Digit_Analog+0x21c>)
 800cbda:	6013      	str	r3, [r2, #0]
 800cbdc:	e016      	b.n	800cc0c <Draw_Digit_Analog+0xc8>
 800cbde:	88fb      	ldrh	r3, [r7, #6]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	f040 80a5 	bne.w	800cd30 <Draw_Digit_Analog+0x1ec>
 800cbe6:	4b5e      	ldr	r3, [pc, #376]	; (800cd60 <Draw_Digit_Analog+0x21c>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	3302      	adds	r3, #2
 800cbec:	4a5c      	ldr	r2, [pc, #368]	; (800cd60 <Draw_Digit_Analog+0x21c>)
 800cbee:	6013      	str	r3, [r2, #0]
 800cbf0:	4b5b      	ldr	r3, [pc, #364]	; (800cd60 <Draw_Digit_Analog+0x21c>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	461a      	mov	r2, r3
 800cbf8:	4b57      	ldr	r3, [pc, #348]	; (800cd58 <Draw_Digit_Analog+0x214>)
 800cbfa:	601a      	str	r2, [r3, #0]
 800cbfc:	4b58      	ldr	r3, [pc, #352]	; (800cd60 <Draw_Digit_Analog+0x21c>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	3b01      	subs	r3, #1
 800cc02:	781b      	ldrb	r3, [r3, #0]
 800cc04:	461a      	mov	r2, r3
 800cc06:	4b56      	ldr	r3, [pc, #344]	; (800cd60 <Draw_Digit_Analog+0x21c>)
 800cc08:	601a      	str	r2, [r3, #0]
 800cc0a:	e000      	b.n	800cc0e <Draw_Digit_Analog+0xca>
 800cc0c:	bf00      	nop
 800cc0e:	4b52      	ldr	r3, [pc, #328]	; (800cd58 <Draw_Digit_Analog+0x214>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	2bff      	cmp	r3, #255	; 0xff
 800cc14:	f000 808e 	beq.w	800cd34 <Draw_Digit_Analog+0x1f0>
 800cc18:	4b4f      	ldr	r3, [pc, #316]	; (800cd58 <Draw_Digit_Analog+0x214>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	f000 808b 	beq.w	800cd38 <Draw_Digit_Analog+0x1f4>
 800cc22:	4b4f      	ldr	r3, [pc, #316]	; (800cd60 <Draw_Digit_Analog+0x21c>)
 800cc24:	681a      	ldr	r2, [r3, #0]
 800cc26:	4b4c      	ldr	r3, [pc, #304]	; (800cd58 <Draw_Digit_Analog+0x214>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	429a      	cmp	r2, r3
 800cc2c:	d80b      	bhi.n	800cc46 <Draw_Digit_Analog+0x102>
 800cc2e:	4b4c      	ldr	r3, [pc, #304]	; (800cd60 <Draw_Digit_Analog+0x21c>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	4a4a      	ldr	r2, [pc, #296]	; (800cd5c <Draw_Digit_Analog+0x218>)
 800cc34:	6013      	str	r3, [r2, #0]
 800cc36:	4b48      	ldr	r3, [pc, #288]	; (800cd58 <Draw_Digit_Analog+0x214>)
 800cc38:	681a      	ldr	r2, [r3, #0]
 800cc3a:	4b49      	ldr	r3, [pc, #292]	; (800cd60 <Draw_Digit_Analog+0x21c>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	1ad3      	subs	r3, r2, r3
 800cc40:	4a45      	ldr	r2, [pc, #276]	; (800cd58 <Draw_Digit_Analog+0x214>)
 800cc42:	6013      	str	r3, [r2, #0]
 800cc44:	e00a      	b.n	800cc5c <Draw_Digit_Analog+0x118>
 800cc46:	4b44      	ldr	r3, [pc, #272]	; (800cd58 <Draw_Digit_Analog+0x214>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	4a44      	ldr	r2, [pc, #272]	; (800cd5c <Draw_Digit_Analog+0x218>)
 800cc4c:	6013      	str	r3, [r2, #0]
 800cc4e:	4b44      	ldr	r3, [pc, #272]	; (800cd60 <Draw_Digit_Analog+0x21c>)
 800cc50:	681a      	ldr	r2, [r3, #0]
 800cc52:	4b41      	ldr	r3, [pc, #260]	; (800cd58 <Draw_Digit_Analog+0x214>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	1ad3      	subs	r3, r2, r3
 800cc58:	4a3f      	ldr	r2, [pc, #252]	; (800cd58 <Draw_Digit_Analog+0x214>)
 800cc5a:	6013      	str	r3, [r2, #0]
 800cc5c:	4b3f      	ldr	r3, [pc, #252]	; (800cd5c <Draw_Digit_Analog+0x218>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	2bc7      	cmp	r3, #199	; 0xc7
 800cc62:	d86b      	bhi.n	800cd3c <Draw_Digit_Analog+0x1f8>
 800cc64:	4b3c      	ldr	r3, [pc, #240]	; (800cd58 <Draw_Digit_Analog+0x214>)
 800cc66:	681a      	ldr	r2, [r3, #0]
 800cc68:	4b3c      	ldr	r3, [pc, #240]	; (800cd5c <Draw_Digit_Analog+0x218>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	4413      	add	r3, r2
 800cc6e:	4a3c      	ldr	r2, [pc, #240]	; (800cd60 <Draw_Digit_Analog+0x21c>)
 800cc70:	6013      	str	r3, [r2, #0]
 800cc72:	4b3b      	ldr	r3, [pc, #236]	; (800cd60 <Draw_Digit_Analog+0x21c>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	2bc7      	cmp	r3, #199	; 0xc7
 800cc78:	d906      	bls.n	800cc88 <Draw_Digit_Analog+0x144>
 800cc7a:	4b38      	ldr	r3, [pc, #224]	; (800cd5c <Draw_Digit_Analog+0x218>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	f1c3 03c7 	rsb	r3, r3, #199	; 0xc7
 800cc82:	4a35      	ldr	r2, [pc, #212]	; (800cd58 <Draw_Digit_Analog+0x214>)
 800cc84:	6013      	str	r3, [r2, #0]
 800cc86:	e020      	b.n	800ccca <Draw_Digit_Analog+0x186>
 800cc88:	4b35      	ldr	r3, [pc, #212]	; (800cd60 <Draw_Digit_Analog+0x21c>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	2b02      	cmp	r3, #2
 800cc8e:	d957      	bls.n	800cd40 <Draw_Digit_Analog+0x1fc>
 800cc90:	4b32      	ldr	r3, [pc, #200]	; (800cd5c <Draw_Digit_Analog+0x218>)
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	2b02      	cmp	r3, #2
 800cc96:	d808      	bhi.n	800ccaa <Draw_Digit_Analog+0x166>
 800cc98:	4b30      	ldr	r3, [pc, #192]	; (800cd5c <Draw_Digit_Analog+0x218>)
 800cc9a:	2203      	movs	r2, #3
 800cc9c:	601a      	str	r2, [r3, #0]
 800cc9e:	4b30      	ldr	r3, [pc, #192]	; (800cd60 <Draw_Digit_Analog+0x21c>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	3b03      	subs	r3, #3
 800cca4:	4a2c      	ldr	r2, [pc, #176]	; (800cd58 <Draw_Digit_Analog+0x214>)
 800cca6:	6013      	str	r3, [r2, #0]
 800cca8:	e00f      	b.n	800ccca <Draw_Digit_Analog+0x186>
 800ccaa:	4b2b      	ldr	r3, [pc, #172]	; (800cd58 <Draw_Digit_Analog+0x214>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d10a      	bne.n	800ccc8 <Draw_Digit_Analog+0x184>
 800ccb2:	4b2a      	ldr	r3, [pc, #168]	; (800cd5c <Draw_Digit_Analog+0x218>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	3b01      	subs	r3, #1
 800ccb8:	4a28      	ldr	r2, [pc, #160]	; (800cd5c <Draw_Digit_Analog+0x218>)
 800ccba:	6013      	str	r3, [r2, #0]
 800ccbc:	4b26      	ldr	r3, [pc, #152]	; (800cd58 <Draw_Digit_Analog+0x214>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	3302      	adds	r3, #2
 800ccc2:	4a25      	ldr	r2, [pc, #148]	; (800cd58 <Draw_Digit_Analog+0x214>)
 800ccc4:	6013      	str	r3, [r2, #0]
 800ccc6:	e000      	b.n	800ccca <Draw_Digit_Analog+0x186>
 800ccc8:	bf00      	nop
 800ccca:	4b23      	ldr	r3, [pc, #140]	; (800cd58 <Draw_Digit_Analog+0x214>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	2b13      	cmp	r3, #19
 800ccd0:	d904      	bls.n	800ccdc <Draw_Digit_Analog+0x198>
 800ccd2:	4b25      	ldr	r3, [pc, #148]	; (800cd68 <Draw_Digit_Analog+0x224>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	3314      	adds	r3, #20
 800ccd8:	4a23      	ldr	r2, [pc, #140]	; (800cd68 <Draw_Digit_Analog+0x224>)
 800ccda:	6013      	str	r3, [r2, #0]
 800ccdc:	4b23      	ldr	r3, [pc, #140]	; (800cd6c <Draw_Digit_Analog+0x228>)
 800ccde:	681a      	ldr	r2, [r3, #0]
 800cce0:	4b21      	ldr	r3, [pc, #132]	; (800cd68 <Draw_Digit_Analog+0x224>)
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	4413      	add	r3, r2
 800cce6:	881b      	ldrh	r3, [r3, #0]
 800cce8:	461a      	mov	r2, r3
 800ccea:	4b1f      	ldr	r3, [pc, #124]	; (800cd68 <Draw_Digit_Analog+0x224>)
 800ccec:	601a      	str	r2, [r3, #0]
 800ccee:	4b1b      	ldr	r3, [pc, #108]	; (800cd5c <Draw_Digit_Analog+0x218>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	005b      	lsls	r3, r3, #1
 800ccf4:	4a19      	ldr	r2, [pc, #100]	; (800cd5c <Draw_Digit_Analog+0x218>)
 800ccf6:	6013      	str	r3, [r2, #0]
 800ccf8:	4b18      	ldr	r3, [pc, #96]	; (800cd5c <Draw_Digit_Analog+0x218>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	085b      	lsrs	r3, r3, #1
 800ccfe:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800cd02:	005b      	lsls	r3, r3, #1
 800cd04:	4a1a      	ldr	r2, [pc, #104]	; (800cd70 <Draw_Digit_Analog+0x22c>)
 800cd06:	4413      	add	r3, r2
 800cd08:	461a      	mov	r2, r3
 800cd0a:	4b14      	ldr	r3, [pc, #80]	; (800cd5c <Draw_Digit_Analog+0x218>)
 800cd0c:	601a      	str	r2, [r3, #0]
 800cd0e:	4b16      	ldr	r3, [pc, #88]	; (800cd68 <Draw_Digit_Analog+0x224>)
 800cd10:	681a      	ldr	r2, [r3, #0]
 800cd12:	4b12      	ldr	r3, [pc, #72]	; (800cd5c <Draw_Digit_Analog+0x218>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	b292      	uxth	r2, r2
 800cd18:	801a      	strh	r2, [r3, #0]
 800cd1a:	4b10      	ldr	r3, [pc, #64]	; (800cd5c <Draw_Digit_Analog+0x218>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	3302      	adds	r3, #2
 800cd20:	4a0e      	ldr	r2, [pc, #56]	; (800cd5c <Draw_Digit_Analog+0x218>)
 800cd22:	6013      	str	r3, [r2, #0]
 800cd24:	4b0c      	ldr	r3, [pc, #48]	; (800cd58 <Draw_Digit_Analog+0x214>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	3b01      	subs	r3, #1
 800cd2a:	4a0b      	ldr	r2, [pc, #44]	; (800cd58 <Draw_Digit_Analog+0x214>)
 800cd2c:	6013      	str	r3, [r2, #0]
 800cd2e:	e7ee      	b.n	800cd0e <Draw_Digit_Analog+0x1ca>
 800cd30:	bf00      	nop
 800cd32:	e006      	b.n	800cd42 <Draw_Digit_Analog+0x1fe>
 800cd34:	bf00      	nop
 800cd36:	e004      	b.n	800cd42 <Draw_Digit_Analog+0x1fe>
 800cd38:	bf00      	nop
 800cd3a:	e002      	b.n	800cd42 <Draw_Digit_Analog+0x1fe>
 800cd3c:	bf00      	nop
 800cd3e:	e000      	b.n	800cd42 <Draw_Digit_Analog+0x1fe>
 800cd40:	bf00      	nop
 800cd42:	370c      	adds	r7, #12
 800cd44:	46bd      	mov	sp, r7
 800cd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4a:	4770      	bx	lr
 800cd4c:	20000a44 	.word	0x20000a44
 800cd50:	20000c00 	.word	0x20000c00
 800cd54:	20000bf8 	.word	0x20000bf8
 800cd58:	20000a3c 	.word	0x20000a3c
 800cd5c:	20000be8 	.word	0x20000be8
 800cd60:	20000bec 	.word	0x20000bec
 800cd64:	20000a38 	.word	0x20000a38
 800cd68:	20000a40 	.word	0x20000a40
 800cd6c:	20000bf0 	.word	0x20000bf0
 800cd70:	20000a48 	.word	0x20000a48

0800cd74 <Cursor_0>:
 800cd74:	b480      	push	{r7}
 800cd76:	b083      	sub	sp, #12
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
 800cd7c:	4b3c      	ldr	r3, [pc, #240]	; (800ce70 <Cursor_0+0xfc>)
 800cd7e:	2206      	movs	r2, #6
 800cd80:	601a      	str	r2, [r3, #0]
 800cd82:	4b3c      	ldr	r3, [pc, #240]	; (800ce74 <Cursor_0+0x100>)
 800cd84:	4a3c      	ldr	r2, [pc, #240]	; (800ce78 <Cursor_0+0x104>)
 800cd86:	601a      	str	r2, [r3, #0]
 800cd88:	4b39      	ldr	r3, [pc, #228]	; (800ce70 <Cursor_0+0xfc>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	005b      	lsls	r3, r3, #1
 800cd8e:	687a      	ldr	r2, [r7, #4]
 800cd90:	4413      	add	r3, r2
 800cd92:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cd96:	461a      	mov	r2, r3
 800cd98:	4b38      	ldr	r3, [pc, #224]	; (800ce7c <Cursor_0+0x108>)
 800cd9a:	601a      	str	r2, [r3, #0]
 800cd9c:	4b37      	ldr	r3, [pc, #220]	; (800ce7c <Cursor_0+0x108>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	f003 0301 	and.w	r3, r3, #1
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d15c      	bne.n	800ce62 <Cursor_0+0xee>
 800cda8:	4b31      	ldr	r3, [pc, #196]	; (800ce70 <Cursor_0+0xfc>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	330a      	adds	r3, #10
 800cdae:	005b      	lsls	r3, r3, #1
 800cdb0:	687a      	ldr	r2, [r7, #4]
 800cdb2:	4413      	add	r3, r2
 800cdb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cdb8:	461a      	mov	r2, r3
 800cdba:	4b30      	ldr	r3, [pc, #192]	; (800ce7c <Cursor_0+0x108>)
 800cdbc:	601a      	str	r2, [r3, #0]
 800cdbe:	4b2f      	ldr	r3, [pc, #188]	; (800ce7c <Cursor_0+0x108>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	085b      	lsrs	r3, r3, #1
 800cdc4:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800cdc8:	005b      	lsls	r3, r3, #1
 800cdca:	4a2d      	ldr	r2, [pc, #180]	; (800ce80 <Cursor_0+0x10c>)
 800cdcc:	4413      	add	r3, r2
 800cdce:	4a29      	ldr	r2, [pc, #164]	; (800ce74 <Cursor_0+0x100>)
 800cdd0:	6013      	str	r3, [r2, #0]
 800cdd2:	4b27      	ldr	r3, [pc, #156]	; (800ce70 <Cursor_0+0xfc>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	3314      	adds	r3, #20
 800cdd8:	005b      	lsls	r3, r3, #1
 800cdda:	687a      	ldr	r2, [r7, #4]
 800cddc:	4413      	add	r3, r2
 800cdde:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cde2:	461a      	mov	r2, r3
 800cde4:	4b27      	ldr	r3, [pc, #156]	; (800ce84 <Cursor_0+0x110>)
 800cde6:	601a      	str	r2, [r3, #0]
 800cde8:	4b22      	ldr	r3, [pc, #136]	; (800ce74 <Cursor_0+0x100>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	3b04      	subs	r3, #4
 800cdee:	4a21      	ldr	r2, [pc, #132]	; (800ce74 <Cursor_0+0x100>)
 800cdf0:	6013      	str	r3, [r2, #0]
 800cdf2:	4b24      	ldr	r3, [pc, #144]	; (800ce84 <Cursor_0+0x110>)
 800cdf4:	681a      	ldr	r2, [r3, #0]
 800cdf6:	4b1f      	ldr	r3, [pc, #124]	; (800ce74 <Cursor_0+0x100>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	b292      	uxth	r2, r2
 800cdfc:	801a      	strh	r2, [r3, #0]
 800cdfe:	4b1d      	ldr	r3, [pc, #116]	; (800ce74 <Cursor_0+0x100>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	3302      	adds	r3, #2
 800ce04:	4a1b      	ldr	r2, [pc, #108]	; (800ce74 <Cursor_0+0x100>)
 800ce06:	6013      	str	r3, [r2, #0]
 800ce08:	4b1e      	ldr	r3, [pc, #120]	; (800ce84 <Cursor_0+0x110>)
 800ce0a:	681a      	ldr	r2, [r3, #0]
 800ce0c:	4b19      	ldr	r3, [pc, #100]	; (800ce74 <Cursor_0+0x100>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	b292      	uxth	r2, r2
 800ce12:	801a      	strh	r2, [r3, #0]
 800ce14:	4b17      	ldr	r3, [pc, #92]	; (800ce74 <Cursor_0+0x100>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	3302      	adds	r3, #2
 800ce1a:	4a16      	ldr	r2, [pc, #88]	; (800ce74 <Cursor_0+0x100>)
 800ce1c:	6013      	str	r3, [r2, #0]
 800ce1e:	4b19      	ldr	r3, [pc, #100]	; (800ce84 <Cursor_0+0x110>)
 800ce20:	681a      	ldr	r2, [r3, #0]
 800ce22:	4b14      	ldr	r3, [pc, #80]	; (800ce74 <Cursor_0+0x100>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	b292      	uxth	r2, r2
 800ce28:	801a      	strh	r2, [r3, #0]
 800ce2a:	4b12      	ldr	r3, [pc, #72]	; (800ce74 <Cursor_0+0x100>)
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	3302      	adds	r3, #2
 800ce30:	4a10      	ldr	r2, [pc, #64]	; (800ce74 <Cursor_0+0x100>)
 800ce32:	6013      	str	r3, [r2, #0]
 800ce34:	4b13      	ldr	r3, [pc, #76]	; (800ce84 <Cursor_0+0x110>)
 800ce36:	681a      	ldr	r2, [r3, #0]
 800ce38:	4b0e      	ldr	r3, [pc, #56]	; (800ce74 <Cursor_0+0x100>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	b292      	uxth	r2, r2
 800ce3e:	801a      	strh	r2, [r3, #0]
 800ce40:	4b0c      	ldr	r3, [pc, #48]	; (800ce74 <Cursor_0+0x100>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	3302      	adds	r3, #2
 800ce46:	4a0b      	ldr	r2, [pc, #44]	; (800ce74 <Cursor_0+0x100>)
 800ce48:	6013      	str	r3, [r2, #0]
 800ce4a:	4b0e      	ldr	r3, [pc, #56]	; (800ce84 <Cursor_0+0x110>)
 800ce4c:	681a      	ldr	r2, [r3, #0]
 800ce4e:	4b09      	ldr	r3, [pc, #36]	; (800ce74 <Cursor_0+0x100>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	b292      	uxth	r2, r2
 800ce54:	801a      	strh	r2, [r3, #0]
 800ce56:	4b07      	ldr	r3, [pc, #28]	; (800ce74 <Cursor_0+0x100>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	3302      	adds	r3, #2
 800ce5c:	4a05      	ldr	r2, [pc, #20]	; (800ce74 <Cursor_0+0x100>)
 800ce5e:	6013      	str	r3, [r2, #0]
 800ce60:	e000      	b.n	800ce64 <Cursor_0+0xf0>
 800ce62:	bf00      	nop
 800ce64:	4b02      	ldr	r3, [pc, #8]	; (800ce70 <Cursor_0+0xfc>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	3b01      	subs	r3, #1
 800ce6a:	4a01      	ldr	r2, [pc, #4]	; (800ce70 <Cursor_0+0xfc>)
 800ce6c:	6013      	str	r3, [r2, #0]
 800ce6e:	e78b      	b.n	800cd88 <Cursor_0+0x14>
 800ce70:	20000a40 	.word	0x20000a40
 800ce74:	20000bec 	.word	0x20000bec
 800ce78:	20000be0 	.word	0x20000be0
 800ce7c:	20000a3c 	.word	0x20000a3c
 800ce80:	20000a48 	.word	0x20000a48
 800ce84:	20000be8 	.word	0x20000be8

0800ce88 <Cursor_1>:
 800ce88:	b480      	push	{r7}
 800ce8a:	b083      	sub	sp, #12
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
 800ce90:	4b31      	ldr	r3, [pc, #196]	; (800cf58 <Cursor_1+0xd0>)
 800ce92:	2206      	movs	r2, #6
 800ce94:	601a      	str	r2, [r3, #0]
 800ce96:	4b31      	ldr	r3, [pc, #196]	; (800cf5c <Cursor_1+0xd4>)
 800ce98:	4a31      	ldr	r2, [pc, #196]	; (800cf60 <Cursor_1+0xd8>)
 800ce9a:	601a      	str	r2, [r3, #0]
 800ce9c:	4b2e      	ldr	r3, [pc, #184]	; (800cf58 <Cursor_1+0xd0>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	005b      	lsls	r3, r3, #1
 800cea2:	687a      	ldr	r2, [r7, #4]
 800cea4:	4413      	add	r3, r2
 800cea6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ceaa:	461a      	mov	r2, r3
 800ceac:	4b2d      	ldr	r3, [pc, #180]	; (800cf64 <Cursor_1+0xdc>)
 800ceae:	601a      	str	r2, [r3, #0]
 800ceb0:	4b2c      	ldr	r3, [pc, #176]	; (800cf64 <Cursor_1+0xdc>)
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	f003 0301 	and.w	r3, r3, #1
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d146      	bne.n	800cf4a <Cursor_1+0xc2>
 800cebc:	4b26      	ldr	r3, [pc, #152]	; (800cf58 <Cursor_1+0xd0>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	330a      	adds	r3, #10
 800cec2:	005b      	lsls	r3, r3, #1
 800cec4:	687a      	ldr	r2, [r7, #4]
 800cec6:	4413      	add	r3, r2
 800cec8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cecc:	461a      	mov	r2, r3
 800cece:	4b25      	ldr	r3, [pc, #148]	; (800cf64 <Cursor_1+0xdc>)
 800ced0:	601a      	str	r2, [r3, #0]
 800ced2:	4b24      	ldr	r3, [pc, #144]	; (800cf64 <Cursor_1+0xdc>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	085b      	lsrs	r3, r3, #1
 800ced8:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800cedc:	005b      	lsls	r3, r3, #1
 800cede:	4a22      	ldr	r2, [pc, #136]	; (800cf68 <Cursor_1+0xe0>)
 800cee0:	4413      	add	r3, r2
 800cee2:	4a1e      	ldr	r2, [pc, #120]	; (800cf5c <Cursor_1+0xd4>)
 800cee4:	6013      	str	r3, [r2, #0]
 800cee6:	4b1c      	ldr	r3, [pc, #112]	; (800cf58 <Cursor_1+0xd0>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	3314      	adds	r3, #20
 800ceec:	005b      	lsls	r3, r3, #1
 800ceee:	687a      	ldr	r2, [r7, #4]
 800cef0:	4413      	add	r3, r2
 800cef2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cef6:	461a      	mov	r2, r3
 800cef8:	4b1c      	ldr	r3, [pc, #112]	; (800cf6c <Cursor_1+0xe4>)
 800cefa:	601a      	str	r2, [r3, #0]
 800cefc:	4b17      	ldr	r3, [pc, #92]	; (800cf5c <Cursor_1+0xd4>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	3b02      	subs	r3, #2
 800cf02:	4a16      	ldr	r2, [pc, #88]	; (800cf5c <Cursor_1+0xd4>)
 800cf04:	6013      	str	r3, [r2, #0]
 800cf06:	4b19      	ldr	r3, [pc, #100]	; (800cf6c <Cursor_1+0xe4>)
 800cf08:	681a      	ldr	r2, [r3, #0]
 800cf0a:	4b14      	ldr	r3, [pc, #80]	; (800cf5c <Cursor_1+0xd4>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	b292      	uxth	r2, r2
 800cf10:	801a      	strh	r2, [r3, #0]
 800cf12:	4b12      	ldr	r3, [pc, #72]	; (800cf5c <Cursor_1+0xd4>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	3302      	adds	r3, #2
 800cf18:	4a10      	ldr	r2, [pc, #64]	; (800cf5c <Cursor_1+0xd4>)
 800cf1a:	6013      	str	r3, [r2, #0]
 800cf1c:	4b13      	ldr	r3, [pc, #76]	; (800cf6c <Cursor_1+0xe4>)
 800cf1e:	681a      	ldr	r2, [r3, #0]
 800cf20:	4b0e      	ldr	r3, [pc, #56]	; (800cf5c <Cursor_1+0xd4>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	b292      	uxth	r2, r2
 800cf26:	801a      	strh	r2, [r3, #0]
 800cf28:	4b0c      	ldr	r3, [pc, #48]	; (800cf5c <Cursor_1+0xd4>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	3302      	adds	r3, #2
 800cf2e:	4a0b      	ldr	r2, [pc, #44]	; (800cf5c <Cursor_1+0xd4>)
 800cf30:	6013      	str	r3, [r2, #0]
 800cf32:	4b0e      	ldr	r3, [pc, #56]	; (800cf6c <Cursor_1+0xe4>)
 800cf34:	681a      	ldr	r2, [r3, #0]
 800cf36:	4b09      	ldr	r3, [pc, #36]	; (800cf5c <Cursor_1+0xd4>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	b292      	uxth	r2, r2
 800cf3c:	801a      	strh	r2, [r3, #0]
 800cf3e:	4b07      	ldr	r3, [pc, #28]	; (800cf5c <Cursor_1+0xd4>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	3302      	adds	r3, #2
 800cf44:	4a05      	ldr	r2, [pc, #20]	; (800cf5c <Cursor_1+0xd4>)
 800cf46:	6013      	str	r3, [r2, #0]
 800cf48:	e000      	b.n	800cf4c <Cursor_1+0xc4>
 800cf4a:	bf00      	nop
 800cf4c:	4b02      	ldr	r3, [pc, #8]	; (800cf58 <Cursor_1+0xd0>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	3b01      	subs	r3, #1
 800cf52:	4a01      	ldr	r2, [pc, #4]	; (800cf58 <Cursor_1+0xd0>)
 800cf54:	6013      	str	r3, [r2, #0]
 800cf56:	e7a1      	b.n	800ce9c <Cursor_1+0x14>
 800cf58:	20000a40 	.word	0x20000a40
 800cf5c:	20000bec 	.word	0x20000bec
 800cf60:	20000be0 	.word	0x20000be0
 800cf64:	20000a3c 	.word	0x20000a3c
 800cf68:	20000a48 	.word	0x20000a48
 800cf6c:	20000be8 	.word	0x20000be8

0800cf70 <Cursor_2>:
 800cf70:	b480      	push	{r7}
 800cf72:	b083      	sub	sp, #12
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
 800cf78:	4b21      	ldr	r3, [pc, #132]	; (800d000 <Cursor_2+0x90>)
 800cf7a:	2206      	movs	r2, #6
 800cf7c:	601a      	str	r2, [r3, #0]
 800cf7e:	4b21      	ldr	r3, [pc, #132]	; (800d004 <Cursor_2+0x94>)
 800cf80:	4a21      	ldr	r2, [pc, #132]	; (800d008 <Cursor_2+0x98>)
 800cf82:	601a      	str	r2, [r3, #0]
 800cf84:	4b1e      	ldr	r3, [pc, #120]	; (800d000 <Cursor_2+0x90>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	005b      	lsls	r3, r3, #1
 800cf8a:	687a      	ldr	r2, [r7, #4]
 800cf8c:	4413      	add	r3, r2
 800cf8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cf92:	461a      	mov	r2, r3
 800cf94:	4b1d      	ldr	r3, [pc, #116]	; (800d00c <Cursor_2+0x9c>)
 800cf96:	601a      	str	r2, [r3, #0]
 800cf98:	4b1c      	ldr	r3, [pc, #112]	; (800d00c <Cursor_2+0x9c>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	f003 0301 	and.w	r3, r3, #1
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d126      	bne.n	800cff2 <Cursor_2+0x82>
 800cfa4:	4b16      	ldr	r3, [pc, #88]	; (800d000 <Cursor_2+0x90>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	330a      	adds	r3, #10
 800cfaa:	005b      	lsls	r3, r3, #1
 800cfac:	687a      	ldr	r2, [r7, #4]
 800cfae:	4413      	add	r3, r2
 800cfb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cfb4:	461a      	mov	r2, r3
 800cfb6:	4b15      	ldr	r3, [pc, #84]	; (800d00c <Cursor_2+0x9c>)
 800cfb8:	601a      	str	r2, [r3, #0]
 800cfba:	4b14      	ldr	r3, [pc, #80]	; (800d00c <Cursor_2+0x9c>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	085b      	lsrs	r3, r3, #1
 800cfc0:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800cfc4:	005b      	lsls	r3, r3, #1
 800cfc6:	4a12      	ldr	r2, [pc, #72]	; (800d010 <Cursor_2+0xa0>)
 800cfc8:	4413      	add	r3, r2
 800cfca:	4a0e      	ldr	r2, [pc, #56]	; (800d004 <Cursor_2+0x94>)
 800cfcc:	6013      	str	r3, [r2, #0]
 800cfce:	4b0c      	ldr	r3, [pc, #48]	; (800d000 <Cursor_2+0x90>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	3314      	adds	r3, #20
 800cfd4:	005b      	lsls	r3, r3, #1
 800cfd6:	687a      	ldr	r2, [r7, #4]
 800cfd8:	4413      	add	r3, r2
 800cfda:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cfde:	461a      	mov	r2, r3
 800cfe0:	4b0c      	ldr	r3, [pc, #48]	; (800d014 <Cursor_2+0xa4>)
 800cfe2:	601a      	str	r2, [r3, #0]
 800cfe4:	4b0b      	ldr	r3, [pc, #44]	; (800d014 <Cursor_2+0xa4>)
 800cfe6:	681a      	ldr	r2, [r3, #0]
 800cfe8:	4b06      	ldr	r3, [pc, #24]	; (800d004 <Cursor_2+0x94>)
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	b292      	uxth	r2, r2
 800cfee:	801a      	strh	r2, [r3, #0]
 800cff0:	e000      	b.n	800cff4 <Cursor_2+0x84>
 800cff2:	bf00      	nop
 800cff4:	4b02      	ldr	r3, [pc, #8]	; (800d000 <Cursor_2+0x90>)
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	3b01      	subs	r3, #1
 800cffa:	4a01      	ldr	r2, [pc, #4]	; (800d000 <Cursor_2+0x90>)
 800cffc:	6013      	str	r3, [r2, #0]
 800cffe:	e7c1      	b.n	800cf84 <Cursor_2+0x14>
 800d000:	20000a40 	.word	0x20000a40
 800d004:	20000bec 	.word	0x20000bec
 800d008:	20000be0 	.word	0x20000be0
 800d00c:	20000a3c 	.word	0x20000a3c
 800d010:	20000a48 	.word	0x20000a48
 800d014:	20000be8 	.word	0x20000be8

0800d018 <Cursor_3>:
 800d018:	b480      	push	{r7}
 800d01a:	b083      	sub	sp, #12
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
 800d020:	4b2a      	ldr	r3, [pc, #168]	; (800d0cc <Cursor_3+0xb4>)
 800d022:	2206      	movs	r2, #6
 800d024:	601a      	str	r2, [r3, #0]
 800d026:	4b2a      	ldr	r3, [pc, #168]	; (800d0d0 <Cursor_3+0xb8>)
 800d028:	4a2a      	ldr	r2, [pc, #168]	; (800d0d4 <Cursor_3+0xbc>)
 800d02a:	601a      	str	r2, [r3, #0]
 800d02c:	4b27      	ldr	r3, [pc, #156]	; (800d0cc <Cursor_3+0xb4>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	005b      	lsls	r3, r3, #1
 800d032:	687a      	ldr	r2, [r7, #4]
 800d034:	4413      	add	r3, r2
 800d036:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d03a:	461a      	mov	r2, r3
 800d03c:	4b26      	ldr	r3, [pc, #152]	; (800d0d8 <Cursor_3+0xc0>)
 800d03e:	601a      	str	r2, [r3, #0]
 800d040:	4b25      	ldr	r3, [pc, #148]	; (800d0d8 <Cursor_3+0xc0>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	f003 0302 	and.w	r3, r3, #2
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d135      	bne.n	800d0b8 <Cursor_3+0xa0>
 800d04c:	4b23      	ldr	r3, [pc, #140]	; (800d0dc <Cursor_3+0xc4>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	3b01      	subs	r3, #1
 800d052:	4a21      	ldr	r2, [pc, #132]	; (800d0d8 <Cursor_3+0xc0>)
 800d054:	6013      	str	r3, [r2, #0]
 800d056:	4b20      	ldr	r3, [pc, #128]	; (800d0d8 <Cursor_3+0xc0>)
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	f003 0303 	and.w	r3, r3, #3
 800d05e:	4a1e      	ldr	r2, [pc, #120]	; (800d0d8 <Cursor_3+0xc0>)
 800d060:	6013      	str	r3, [r2, #0]
 800d062:	4b1d      	ldr	r3, [pc, #116]	; (800d0d8 <Cursor_3+0xc0>)
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d128      	bne.n	800d0bc <Cursor_3+0xa4>
 800d06a:	4b18      	ldr	r3, [pc, #96]	; (800d0cc <Cursor_3+0xb4>)
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	330a      	adds	r3, #10
 800d070:	005b      	lsls	r3, r3, #1
 800d072:	687a      	ldr	r2, [r7, #4]
 800d074:	4413      	add	r3, r2
 800d076:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d07a:	461a      	mov	r2, r3
 800d07c:	4b16      	ldr	r3, [pc, #88]	; (800d0d8 <Cursor_3+0xc0>)
 800d07e:	601a      	str	r2, [r3, #0]
 800d080:	4b15      	ldr	r3, [pc, #84]	; (800d0d8 <Cursor_3+0xc0>)
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	085b      	lsrs	r3, r3, #1
 800d086:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d08a:	005b      	lsls	r3, r3, #1
 800d08c:	4a14      	ldr	r2, [pc, #80]	; (800d0e0 <Cursor_3+0xc8>)
 800d08e:	4413      	add	r3, r2
 800d090:	4a0f      	ldr	r2, [pc, #60]	; (800d0d0 <Cursor_3+0xb8>)
 800d092:	6013      	str	r3, [r2, #0]
 800d094:	4b0d      	ldr	r3, [pc, #52]	; (800d0cc <Cursor_3+0xb4>)
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	3314      	adds	r3, #20
 800d09a:	005b      	lsls	r3, r3, #1
 800d09c:	687a      	ldr	r2, [r7, #4]
 800d09e:	4413      	add	r3, r2
 800d0a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d0a4:	461a      	mov	r2, r3
 800d0a6:	4b0f      	ldr	r3, [pc, #60]	; (800d0e4 <Cursor_3+0xcc>)
 800d0a8:	601a      	str	r2, [r3, #0]
 800d0aa:	4b0e      	ldr	r3, [pc, #56]	; (800d0e4 <Cursor_3+0xcc>)
 800d0ac:	681a      	ldr	r2, [r3, #0]
 800d0ae:	4b08      	ldr	r3, [pc, #32]	; (800d0d0 <Cursor_3+0xb8>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	b292      	uxth	r2, r2
 800d0b4:	801a      	strh	r2, [r3, #0]
 800d0b6:	e002      	b.n	800d0be <Cursor_3+0xa6>
 800d0b8:	bf00      	nop
 800d0ba:	e000      	b.n	800d0be <Cursor_3+0xa6>
 800d0bc:	bf00      	nop
 800d0be:	4b03      	ldr	r3, [pc, #12]	; (800d0cc <Cursor_3+0xb4>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	3b01      	subs	r3, #1
 800d0c4:	4a01      	ldr	r2, [pc, #4]	; (800d0cc <Cursor_3+0xb4>)
 800d0c6:	6013      	str	r3, [r2, #0]
 800d0c8:	e7b0      	b.n	800d02c <Cursor_3+0x14>
 800d0ca:	bf00      	nop
 800d0cc:	20000a40 	.word	0x20000a40
 800d0d0:	20000bec 	.word	0x20000bec
 800d0d4:	20000be0 	.word	0x20000be0
 800d0d8:	20000a3c 	.word	0x20000a3c
 800d0dc:	20000bf8 	.word	0x20000bf8
 800d0e0:	20000a48 	.word	0x20000a48
 800d0e4:	20000be8 	.word	0x20000be8

0800d0e8 <Cursor_4>:
 800d0e8:	b480      	push	{r7}
 800d0ea:	b083      	sub	sp, #12
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
 800d0f0:	4b7a      	ldr	r3, [pc, #488]	; (800d2dc <Cursor_4+0x1f4>)
 800d0f2:	2207      	movs	r2, #7
 800d0f4:	601a      	str	r2, [r3, #0]
 800d0f6:	4b7a      	ldr	r3, [pc, #488]	; (800d2e0 <Cursor_4+0x1f8>)
 800d0f8:	4a7a      	ldr	r2, [pc, #488]	; (800d2e4 <Cursor_4+0x1fc>)
 800d0fa:	601a      	str	r2, [r3, #0]
 800d0fc:	4b77      	ldr	r3, [pc, #476]	; (800d2dc <Cursor_4+0x1f4>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	005b      	lsls	r3, r3, #1
 800d102:	687a      	ldr	r2, [r7, #4]
 800d104:	4413      	add	r3, r2
 800d106:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d10a:	461a      	mov	r2, r3
 800d10c:	4b76      	ldr	r3, [pc, #472]	; (800d2e8 <Cursor_4+0x200>)
 800d10e:	601a      	str	r2, [r3, #0]
 800d110:	4b75      	ldr	r3, [pc, #468]	; (800d2e8 <Cursor_4+0x200>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	f003 0301 	and.w	r3, r3, #1
 800d118:	2b00      	cmp	r3, #0
 800d11a:	f040 8145 	bne.w	800d3a8 <Cursor_4+0x2c0>
 800d11e:	bf00      	nop
 800d120:	4b6e      	ldr	r3, [pc, #440]	; (800d2dc <Cursor_4+0x1f4>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	330a      	adds	r3, #10
 800d126:	005b      	lsls	r3, r3, #1
 800d128:	687a      	ldr	r2, [r7, #4]
 800d12a:	4413      	add	r3, r2
 800d12c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d130:	461a      	mov	r2, r3
 800d132:	4b6d      	ldr	r3, [pc, #436]	; (800d2e8 <Cursor_4+0x200>)
 800d134:	601a      	str	r2, [r3, #0]
 800d136:	4b69      	ldr	r3, [pc, #420]	; (800d2dc <Cursor_4+0x1f4>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	3314      	adds	r3, #20
 800d13c:	005b      	lsls	r3, r3, #1
 800d13e:	687a      	ldr	r2, [r7, #4]
 800d140:	4413      	add	r3, r2
 800d142:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d146:	461a      	mov	r2, r3
 800d148:	4b68      	ldr	r3, [pc, #416]	; (800d2ec <Cursor_4+0x204>)
 800d14a:	601a      	str	r2, [r3, #0]
 800d14c:	4b66      	ldr	r3, [pc, #408]	; (800d2e8 <Cursor_4+0x200>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	3b02      	subs	r3, #2
 800d152:	4a67      	ldr	r2, [pc, #412]	; (800d2f0 <Cursor_4+0x208>)
 800d154:	6013      	str	r3, [r2, #0]
 800d156:	4b64      	ldr	r3, [pc, #400]	; (800d2e8 <Cursor_4+0x200>)
 800d158:	681a      	ldr	r2, [r3, #0]
 800d15a:	4b65      	ldr	r3, [pc, #404]	; (800d2f0 <Cursor_4+0x208>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	429a      	cmp	r2, r3
 800d160:	d112      	bne.n	800d188 <Cursor_4+0xa0>
 800d162:	4b62      	ldr	r3, [pc, #392]	; (800d2ec <Cursor_4+0x204>)
 800d164:	681a      	ldr	r2, [r3, #0]
 800d166:	4b5e      	ldr	r3, [pc, #376]	; (800d2e0 <Cursor_4+0x1f8>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	b292      	uxth	r2, r2
 800d16c:	801a      	strh	r2, [r3, #0]
 800d16e:	4b5c      	ldr	r3, [pc, #368]	; (800d2e0 <Cursor_4+0x1f8>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800d176:	4a5a      	ldr	r2, [pc, #360]	; (800d2e0 <Cursor_4+0x1f8>)
 800d178:	6013      	str	r3, [r2, #0]
 800d17a:	4b5c      	ldr	r3, [pc, #368]	; (800d2ec <Cursor_4+0x204>)
 800d17c:	681a      	ldr	r2, [r3, #0]
 800d17e:	4b58      	ldr	r3, [pc, #352]	; (800d2e0 <Cursor_4+0x1f8>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	b292      	uxth	r2, r2
 800d184:	801a      	strh	r2, [r3, #0]
 800d186:	e114      	b.n	800d3b2 <Cursor_4+0x2ca>
 800d188:	bf00      	nop
 800d18a:	4b59      	ldr	r3, [pc, #356]	; (800d2f0 <Cursor_4+0x208>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	3301      	adds	r3, #1
 800d190:	4a57      	ldr	r2, [pc, #348]	; (800d2f0 <Cursor_4+0x208>)
 800d192:	6013      	str	r3, [r2, #0]
 800d194:	4b57      	ldr	r3, [pc, #348]	; (800d2f4 <Cursor_4+0x20c>)
 800d196:	681a      	ldr	r2, [r3, #0]
 800d198:	4b55      	ldr	r3, [pc, #340]	; (800d2f0 <Cursor_4+0x208>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	429a      	cmp	r2, r3
 800d19e:	d128      	bne.n	800d1f2 <Cursor_4+0x10a>
 800d1a0:	4b52      	ldr	r3, [pc, #328]	; (800d2ec <Cursor_4+0x204>)
 800d1a2:	681a      	ldr	r2, [r3, #0]
 800d1a4:	4b4e      	ldr	r3, [pc, #312]	; (800d2e0 <Cursor_4+0x1f8>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	b292      	uxth	r2, r2
 800d1aa:	801a      	strh	r2, [r3, #0]
 800d1ac:	4b4c      	ldr	r3, [pc, #304]	; (800d2e0 <Cursor_4+0x1f8>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	3302      	adds	r3, #2
 800d1b2:	4a4b      	ldr	r2, [pc, #300]	; (800d2e0 <Cursor_4+0x1f8>)
 800d1b4:	6013      	str	r3, [r2, #0]
 800d1b6:	4b4d      	ldr	r3, [pc, #308]	; (800d2ec <Cursor_4+0x204>)
 800d1b8:	681a      	ldr	r2, [r3, #0]
 800d1ba:	4b49      	ldr	r3, [pc, #292]	; (800d2e0 <Cursor_4+0x1f8>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	b292      	uxth	r2, r2
 800d1c0:	801a      	strh	r2, [r3, #0]
 800d1c2:	4b47      	ldr	r3, [pc, #284]	; (800d2e0 <Cursor_4+0x1f8>)
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d1ca:	4a45      	ldr	r2, [pc, #276]	; (800d2e0 <Cursor_4+0x1f8>)
 800d1cc:	6013      	str	r3, [r2, #0]
 800d1ce:	4b47      	ldr	r3, [pc, #284]	; (800d2ec <Cursor_4+0x204>)
 800d1d0:	681a      	ldr	r2, [r3, #0]
 800d1d2:	4b43      	ldr	r3, [pc, #268]	; (800d2e0 <Cursor_4+0x1f8>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	b292      	uxth	r2, r2
 800d1d8:	801a      	strh	r2, [r3, #0]
 800d1da:	4b41      	ldr	r3, [pc, #260]	; (800d2e0 <Cursor_4+0x1f8>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	3302      	adds	r3, #2
 800d1e0:	4a3f      	ldr	r2, [pc, #252]	; (800d2e0 <Cursor_4+0x1f8>)
 800d1e2:	6013      	str	r3, [r2, #0]
 800d1e4:	4b41      	ldr	r3, [pc, #260]	; (800d2ec <Cursor_4+0x204>)
 800d1e6:	681a      	ldr	r2, [r3, #0]
 800d1e8:	4b3d      	ldr	r3, [pc, #244]	; (800d2e0 <Cursor_4+0x1f8>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	b292      	uxth	r2, r2
 800d1ee:	801a      	strh	r2, [r3, #0]
 800d1f0:	e0df      	b.n	800d3b2 <Cursor_4+0x2ca>
 800d1f2:	bf00      	nop
 800d1f4:	4b3e      	ldr	r3, [pc, #248]	; (800d2f0 <Cursor_4+0x208>)
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	3301      	adds	r3, #1
 800d1fa:	4a3d      	ldr	r2, [pc, #244]	; (800d2f0 <Cursor_4+0x208>)
 800d1fc:	6013      	str	r3, [r2, #0]
 800d1fe:	4b3d      	ldr	r3, [pc, #244]	; (800d2f4 <Cursor_4+0x20c>)
 800d200:	681a      	ldr	r2, [r3, #0]
 800d202:	4b3b      	ldr	r3, [pc, #236]	; (800d2f0 <Cursor_4+0x208>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	429a      	cmp	r2, r3
 800d208:	d166      	bne.n	800d2d8 <Cursor_4+0x1f0>
 800d20a:	4b38      	ldr	r3, [pc, #224]	; (800d2ec <Cursor_4+0x204>)
 800d20c:	681a      	ldr	r2, [r3, #0]
 800d20e:	4b34      	ldr	r3, [pc, #208]	; (800d2e0 <Cursor_4+0x1f8>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	b292      	uxth	r2, r2
 800d214:	801a      	strh	r2, [r3, #0]
 800d216:	4b32      	ldr	r3, [pc, #200]	; (800d2e0 <Cursor_4+0x1f8>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	3302      	adds	r3, #2
 800d21c:	4a30      	ldr	r2, [pc, #192]	; (800d2e0 <Cursor_4+0x1f8>)
 800d21e:	6013      	str	r3, [r2, #0]
 800d220:	4b32      	ldr	r3, [pc, #200]	; (800d2ec <Cursor_4+0x204>)
 800d222:	681a      	ldr	r2, [r3, #0]
 800d224:	4b2e      	ldr	r3, [pc, #184]	; (800d2e0 <Cursor_4+0x1f8>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	b292      	uxth	r2, r2
 800d22a:	801a      	strh	r2, [r3, #0]
 800d22c:	4b2c      	ldr	r3, [pc, #176]	; (800d2e0 <Cursor_4+0x1f8>)
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	3302      	adds	r3, #2
 800d232:	4a2b      	ldr	r2, [pc, #172]	; (800d2e0 <Cursor_4+0x1f8>)
 800d234:	6013      	str	r3, [r2, #0]
 800d236:	4b2d      	ldr	r3, [pc, #180]	; (800d2ec <Cursor_4+0x204>)
 800d238:	681a      	ldr	r2, [r3, #0]
 800d23a:	4b29      	ldr	r3, [pc, #164]	; (800d2e0 <Cursor_4+0x1f8>)
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	b292      	uxth	r2, r2
 800d240:	801a      	strh	r2, [r3, #0]
 800d242:	4b27      	ldr	r3, [pc, #156]	; (800d2e0 <Cursor_4+0x1f8>)
 800d244:	4a2c      	ldr	r2, [pc, #176]	; (800d2f8 <Cursor_4+0x210>)
 800d246:	601a      	str	r2, [r3, #0]
 800d248:	4b28      	ldr	r3, [pc, #160]	; (800d2ec <Cursor_4+0x204>)
 800d24a:	681a      	ldr	r2, [r3, #0]
 800d24c:	4b24      	ldr	r3, [pc, #144]	; (800d2e0 <Cursor_4+0x1f8>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	b292      	uxth	r2, r2
 800d252:	801a      	strh	r2, [r3, #0]
 800d254:	4b22      	ldr	r3, [pc, #136]	; (800d2e0 <Cursor_4+0x1f8>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	3302      	adds	r3, #2
 800d25a:	4a21      	ldr	r2, [pc, #132]	; (800d2e0 <Cursor_4+0x1f8>)
 800d25c:	6013      	str	r3, [r2, #0]
 800d25e:	4b23      	ldr	r3, [pc, #140]	; (800d2ec <Cursor_4+0x204>)
 800d260:	681a      	ldr	r2, [r3, #0]
 800d262:	4b1f      	ldr	r3, [pc, #124]	; (800d2e0 <Cursor_4+0x1f8>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	b292      	uxth	r2, r2
 800d268:	801a      	strh	r2, [r3, #0]
 800d26a:	4b1d      	ldr	r3, [pc, #116]	; (800d2e0 <Cursor_4+0x1f8>)
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	3302      	adds	r3, #2
 800d270:	4a1b      	ldr	r2, [pc, #108]	; (800d2e0 <Cursor_4+0x1f8>)
 800d272:	6013      	str	r3, [r2, #0]
 800d274:	4b1d      	ldr	r3, [pc, #116]	; (800d2ec <Cursor_4+0x204>)
 800d276:	681a      	ldr	r2, [r3, #0]
 800d278:	4b19      	ldr	r3, [pc, #100]	; (800d2e0 <Cursor_4+0x1f8>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	b292      	uxth	r2, r2
 800d27e:	801a      	strh	r2, [r3, #0]
 800d280:	4b16      	ldr	r3, [pc, #88]	; (800d2dc <Cursor_4+0x1f4>)
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	330a      	adds	r3, #10
 800d286:	005b      	lsls	r3, r3, #1
 800d288:	687a      	ldr	r2, [r7, #4]
 800d28a:	4413      	add	r3, r2
 800d28c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d290:	461a      	mov	r2, r3
 800d292:	4b15      	ldr	r3, [pc, #84]	; (800d2e8 <Cursor_4+0x200>)
 800d294:	601a      	str	r2, [r3, #0]
 800d296:	4b14      	ldr	r3, [pc, #80]	; (800d2e8 <Cursor_4+0x200>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	f003 0302 	and.w	r3, r3, #2
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d12e      	bne.n	800d300 <Cursor_4+0x218>
 800d2a2:	4b0f      	ldr	r3, [pc, #60]	; (800d2e0 <Cursor_4+0x1f8>)
 800d2a4:	4a0f      	ldr	r2, [pc, #60]	; (800d2e4 <Cursor_4+0x1fc>)
 800d2a6:	601a      	str	r2, [r3, #0]
 800d2a8:	4b0d      	ldr	r3, [pc, #52]	; (800d2e0 <Cursor_4+0x1f8>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d2b0:	4a12      	ldr	r2, [pc, #72]	; (800d2fc <Cursor_4+0x214>)
 800d2b2:	6013      	str	r3, [r2, #0]
 800d2b4:	4b0a      	ldr	r3, [pc, #40]	; (800d2e0 <Cursor_4+0x1f8>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	3308      	adds	r3, #8
 800d2ba:	4a09      	ldr	r2, [pc, #36]	; (800d2e0 <Cursor_4+0x1f8>)
 800d2bc:	6013      	str	r3, [r2, #0]
 800d2be:	4b0b      	ldr	r3, [pc, #44]	; (800d2ec <Cursor_4+0x204>)
 800d2c0:	681a      	ldr	r2, [r3, #0]
 800d2c2:	4b07      	ldr	r3, [pc, #28]	; (800d2e0 <Cursor_4+0x1f8>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	b292      	uxth	r2, r2
 800d2c8:	801a      	strh	r2, [r3, #0]
 800d2ca:	4b05      	ldr	r3, [pc, #20]	; (800d2e0 <Cursor_4+0x1f8>)
 800d2cc:	681a      	ldr	r2, [r3, #0]
 800d2ce:	4b0b      	ldr	r3, [pc, #44]	; (800d2fc <Cursor_4+0x214>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	429a      	cmp	r2, r3
 800d2d4:	d86a      	bhi.n	800d3ac <Cursor_4+0x2c4>
 800d2d6:	e7ed      	b.n	800d2b4 <Cursor_4+0x1cc>
 800d2d8:	bf00      	nop
 800d2da:	e012      	b.n	800d302 <Cursor_4+0x21a>
 800d2dc:	20000a40 	.word	0x20000a40
 800d2e0:	20000bec 	.word	0x20000bec
 800d2e4:	20000be0 	.word	0x20000be0
 800d2e8:	20000a3c 	.word	0x20000a3c
 800d2ec:	20000be8 	.word	0x20000be8
 800d2f0:	20000a38 	.word	0x20000a38
 800d2f4:	20000bf8 	.word	0x20000bf8
 800d2f8:	20000a50 	.word	0x20000a50
 800d2fc:	20000c00 	.word	0x20000c00
 800d300:	bf00      	nop
 800d302:	4b34      	ldr	r3, [pc, #208]	; (800d3d4 <Cursor_4+0x2ec>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	3301      	adds	r3, #1
 800d308:	4a32      	ldr	r2, [pc, #200]	; (800d3d4 <Cursor_4+0x2ec>)
 800d30a:	6013      	str	r3, [r2, #0]
 800d30c:	4b31      	ldr	r3, [pc, #196]	; (800d3d4 <Cursor_4+0x2ec>)
 800d30e:	681a      	ldr	r2, [r3, #0]
 800d310:	4b31      	ldr	r3, [pc, #196]	; (800d3d8 <Cursor_4+0x2f0>)
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	429a      	cmp	r2, r3
 800d316:	d128      	bne.n	800d36a <Cursor_4+0x282>
 800d318:	4b30      	ldr	r3, [pc, #192]	; (800d3dc <Cursor_4+0x2f4>)
 800d31a:	681a      	ldr	r2, [r3, #0]
 800d31c:	4b30      	ldr	r3, [pc, #192]	; (800d3e0 <Cursor_4+0x2f8>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	b292      	uxth	r2, r2
 800d322:	801a      	strh	r2, [r3, #0]
 800d324:	4b2e      	ldr	r3, [pc, #184]	; (800d3e0 <Cursor_4+0x2f8>)
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	3302      	adds	r3, #2
 800d32a:	4a2d      	ldr	r2, [pc, #180]	; (800d3e0 <Cursor_4+0x2f8>)
 800d32c:	6013      	str	r3, [r2, #0]
 800d32e:	4b2b      	ldr	r3, [pc, #172]	; (800d3dc <Cursor_4+0x2f4>)
 800d330:	681a      	ldr	r2, [r3, #0]
 800d332:	4b2b      	ldr	r3, [pc, #172]	; (800d3e0 <Cursor_4+0x2f8>)
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	b292      	uxth	r2, r2
 800d338:	801a      	strh	r2, [r3, #0]
 800d33a:	4b29      	ldr	r3, [pc, #164]	; (800d3e0 <Cursor_4+0x2f8>)
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d342:	4a27      	ldr	r2, [pc, #156]	; (800d3e0 <Cursor_4+0x2f8>)
 800d344:	6013      	str	r3, [r2, #0]
 800d346:	4b25      	ldr	r3, [pc, #148]	; (800d3dc <Cursor_4+0x2f4>)
 800d348:	681a      	ldr	r2, [r3, #0]
 800d34a:	4b25      	ldr	r3, [pc, #148]	; (800d3e0 <Cursor_4+0x2f8>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	b292      	uxth	r2, r2
 800d350:	801a      	strh	r2, [r3, #0]
 800d352:	4b23      	ldr	r3, [pc, #140]	; (800d3e0 <Cursor_4+0x2f8>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	3302      	adds	r3, #2
 800d358:	4a21      	ldr	r2, [pc, #132]	; (800d3e0 <Cursor_4+0x2f8>)
 800d35a:	6013      	str	r3, [r2, #0]
 800d35c:	4b1f      	ldr	r3, [pc, #124]	; (800d3dc <Cursor_4+0x2f4>)
 800d35e:	681a      	ldr	r2, [r3, #0]
 800d360:	4b1f      	ldr	r3, [pc, #124]	; (800d3e0 <Cursor_4+0x2f8>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	b292      	uxth	r2, r2
 800d366:	801a      	strh	r2, [r3, #0]
 800d368:	e023      	b.n	800d3b2 <Cursor_4+0x2ca>
 800d36a:	bf00      	nop
 800d36c:	4b19      	ldr	r3, [pc, #100]	; (800d3d4 <Cursor_4+0x2ec>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	3301      	adds	r3, #1
 800d372:	4a18      	ldr	r2, [pc, #96]	; (800d3d4 <Cursor_4+0x2ec>)
 800d374:	6013      	str	r3, [r2, #0]
 800d376:	4b17      	ldr	r3, [pc, #92]	; (800d3d4 <Cursor_4+0x2ec>)
 800d378:	681a      	ldr	r2, [r3, #0]
 800d37a:	4b17      	ldr	r3, [pc, #92]	; (800d3d8 <Cursor_4+0x2f0>)
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	429a      	cmp	r2, r3
 800d380:	d116      	bne.n	800d3b0 <Cursor_4+0x2c8>
 800d382:	4b16      	ldr	r3, [pc, #88]	; (800d3dc <Cursor_4+0x2f4>)
 800d384:	681a      	ldr	r2, [r3, #0]
 800d386:	4b16      	ldr	r3, [pc, #88]	; (800d3e0 <Cursor_4+0x2f8>)
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	b292      	uxth	r2, r2
 800d38c:	801a      	strh	r2, [r3, #0]
 800d38e:	4b14      	ldr	r3, [pc, #80]	; (800d3e0 <Cursor_4+0x2f8>)
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800d396:	4a12      	ldr	r2, [pc, #72]	; (800d3e0 <Cursor_4+0x2f8>)
 800d398:	6013      	str	r3, [r2, #0]
 800d39a:	4b10      	ldr	r3, [pc, #64]	; (800d3dc <Cursor_4+0x2f4>)
 800d39c:	681a      	ldr	r2, [r3, #0]
 800d39e:	4b10      	ldr	r3, [pc, #64]	; (800d3e0 <Cursor_4+0x2f8>)
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	b292      	uxth	r2, r2
 800d3a4:	801a      	strh	r2, [r3, #0]
 800d3a6:	e004      	b.n	800d3b2 <Cursor_4+0x2ca>
 800d3a8:	bf00      	nop
 800d3aa:	e002      	b.n	800d3b2 <Cursor_4+0x2ca>
 800d3ac:	bf00      	nop
 800d3ae:	e000      	b.n	800d3b2 <Cursor_4+0x2ca>
 800d3b0:	bf00      	nop
 800d3b2:	4b0c      	ldr	r3, [pc, #48]	; (800d3e4 <Cursor_4+0x2fc>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	3301      	adds	r3, #1
 800d3b8:	4a0a      	ldr	r2, [pc, #40]	; (800d3e4 <Cursor_4+0x2fc>)
 800d3ba:	6013      	str	r3, [r2, #0]
 800d3bc:	4b09      	ldr	r3, [pc, #36]	; (800d3e4 <Cursor_4+0x2fc>)
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	2b0a      	cmp	r3, #10
 800d3c2:	d000      	beq.n	800d3c6 <Cursor_4+0x2de>
 800d3c4:	e697      	b.n	800d0f6 <Cursor_4+0xe>
 800d3c6:	bf00      	nop
 800d3c8:	370c      	adds	r7, #12
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d0:	4770      	bx	lr
 800d3d2:	bf00      	nop
 800d3d4:	20000a38 	.word	0x20000a38
 800d3d8:	20000bf8 	.word	0x20000bf8
 800d3dc:	20000be8 	.word	0x20000be8
 800d3e0:	20000bec 	.word	0x20000bec
 800d3e4:	20000a40 	.word	0x20000a40

0800d3e8 <Send_LCD>:
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b082      	sub	sp, #8
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
 800d3f0:	4a12      	ldr	r2, [pc, #72]	; (800d43c <Send_LCD+0x54>)
 800d3f2:	4b13      	ldr	r3, [pc, #76]	; (800d440 <Send_LCD+0x58>)
 800d3f4:	601a      	str	r2, [r3, #0]
 800d3f6:	4b13      	ldr	r3, [pc, #76]	; (800d444 <Send_LCD+0x5c>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	b21b      	sxth	r3, r3
 800d3fc:	2113      	movs	r1, #19
 800d3fe:	4618      	mov	r0, r3
 800d400:	f004 fec4 	bl	801218c <LCD_Set_Posi>
 800d404:	4b10      	ldr	r3, [pc, #64]	; (800d448 <Send_LCD+0x60>)
 800d406:	22cb      	movs	r2, #203	; 0xcb
 800d408:	601a      	str	r2, [r3, #0]
 800d40a:	4b0d      	ldr	r3, [pc, #52]	; (800d440 <Send_LCD+0x58>)
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	881b      	ldrh	r3, [r3, #0]
 800d410:	4618      	mov	r0, r3
 800d412:	f004 ff09 	bl	8012228 <LCD_Set_Pixel>
 800d416:	4b0a      	ldr	r3, [pc, #40]	; (800d440 <Send_LCD+0x58>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	3302      	adds	r3, #2
 800d41c:	4a08      	ldr	r2, [pc, #32]	; (800d440 <Send_LCD+0x58>)
 800d41e:	6013      	str	r3, [r2, #0]
 800d420:	4b09      	ldr	r3, [pc, #36]	; (800d448 <Send_LCD+0x60>)
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	3b01      	subs	r3, #1
 800d426:	4a08      	ldr	r2, [pc, #32]	; (800d448 <Send_LCD+0x60>)
 800d428:	6013      	str	r3, [r2, #0]
 800d42a:	4b07      	ldr	r3, [pc, #28]	; (800d448 <Send_LCD+0x60>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d000      	beq.n	800d434 <Send_LCD+0x4c>
 800d432:	e7ea      	b.n	800d40a <Send_LCD+0x22>
 800d434:	bf00      	nop
 800d436:	3708      	adds	r7, #8
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}
 800d43c:	20000be0 	.word	0x20000be0
 800d440:	20000a3c 	.word	0x20000a3c
 800d444:	20000bf8 	.word	0x20000bf8
 800d448:	20000bec 	.word	0x20000bec

0800d44c <Draw_Pop>:
 800d44c:	b480      	push	{r7}
 800d44e:	b083      	sub	sp, #12
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
 800d454:	4b85      	ldr	r3, [pc, #532]	; (800d66c <Draw_Pop+0x220>)
 800d456:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800d45a:	601a      	str	r2, [r3, #0]
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	3348      	adds	r3, #72	; 0x48
 800d460:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d464:	461a      	mov	r2, r3
 800d466:	4b82      	ldr	r3, [pc, #520]	; (800d670 <Draw_Pop+0x224>)
 800d468:	601a      	str	r2, [r3, #0]
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	334a      	adds	r3, #74	; 0x4a
 800d46e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d472:	461a      	mov	r2, r3
 800d474:	4b7f      	ldr	r3, [pc, #508]	; (800d674 <Draw_Pop+0x228>)
 800d476:	601a      	str	r2, [r3, #0]
 800d478:	4b7f      	ldr	r3, [pc, #508]	; (800d678 <Draw_Pop+0x22c>)
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	4a7f      	ldr	r2, [pc, #508]	; (800d67c <Draw_Pop+0x230>)
 800d47e:	6013      	str	r3, [r2, #0]
 800d480:	4b7f      	ldr	r3, [pc, #508]	; (800d680 <Draw_Pop+0x234>)
 800d482:	681a      	ldr	r2, [r3, #0]
 800d484:	4b7d      	ldr	r3, [pc, #500]	; (800d67c <Draw_Pop+0x230>)
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	429a      	cmp	r2, r3
 800d48a:	d10d      	bne.n	800d4a8 <Draw_Pop+0x5c>
 800d48c:	4b78      	ldr	r3, [pc, #480]	; (800d670 <Draw_Pop+0x224>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	3306      	adds	r3, #6
 800d492:	4a77      	ldr	r2, [pc, #476]	; (800d670 <Draw_Pop+0x224>)
 800d494:	6013      	str	r3, [r2, #0]
 800d496:	4b77      	ldr	r3, [pc, #476]	; (800d674 <Draw_Pop+0x228>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	3b0c      	subs	r3, #12
 800d49c:	4a75      	ldr	r2, [pc, #468]	; (800d674 <Draw_Pop+0x228>)
 800d49e:	6013      	str	r3, [r2, #0]
 800d4a0:	4b72      	ldr	r3, [pc, #456]	; (800d66c <Draw_Pop+0x220>)
 800d4a2:	f04f 1208 	mov.w	r2, #524296	; 0x80008
 800d4a6:	601a      	str	r2, [r3, #0]
 800d4a8:	4b73      	ldr	r3, [pc, #460]	; (800d678 <Draw_Pop+0x22c>)
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	3301      	adds	r3, #1
 800d4ae:	4a73      	ldr	r2, [pc, #460]	; (800d67c <Draw_Pop+0x230>)
 800d4b0:	6013      	str	r3, [r2, #0]
 800d4b2:	4b73      	ldr	r3, [pc, #460]	; (800d680 <Draw_Pop+0x234>)
 800d4b4:	681a      	ldr	r2, [r3, #0]
 800d4b6:	4b71      	ldr	r3, [pc, #452]	; (800d67c <Draw_Pop+0x230>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	429a      	cmp	r2, r3
 800d4bc:	d10d      	bne.n	800d4da <Draw_Pop+0x8e>
 800d4be:	4b6c      	ldr	r3, [pc, #432]	; (800d670 <Draw_Pop+0x224>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	3304      	adds	r3, #4
 800d4c4:	4a6a      	ldr	r2, [pc, #424]	; (800d670 <Draw_Pop+0x224>)
 800d4c6:	6013      	str	r3, [r2, #0]
 800d4c8:	4b6a      	ldr	r3, [pc, #424]	; (800d674 <Draw_Pop+0x228>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	3b08      	subs	r3, #8
 800d4ce:	4a69      	ldr	r2, [pc, #420]	; (800d674 <Draw_Pop+0x228>)
 800d4d0:	6013      	str	r3, [r2, #0]
 800d4d2:	4b66      	ldr	r3, [pc, #408]	; (800d66c <Draw_Pop+0x220>)
 800d4d4:	f04f 1204 	mov.w	r2, #262148	; 0x40004
 800d4d8:	601a      	str	r2, [r3, #0]
 800d4da:	4b67      	ldr	r3, [pc, #412]	; (800d678 <Draw_Pop+0x22c>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	3302      	adds	r3, #2
 800d4e0:	4a66      	ldr	r2, [pc, #408]	; (800d67c <Draw_Pop+0x230>)
 800d4e2:	6013      	str	r3, [r2, #0]
 800d4e4:	4b66      	ldr	r3, [pc, #408]	; (800d680 <Draw_Pop+0x234>)
 800d4e6:	681a      	ldr	r2, [r3, #0]
 800d4e8:	4b64      	ldr	r3, [pc, #400]	; (800d67c <Draw_Pop+0x230>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	429a      	cmp	r2, r3
 800d4ee:	d10d      	bne.n	800d50c <Draw_Pop+0xc0>
 800d4f0:	4b5f      	ldr	r3, [pc, #380]	; (800d670 <Draw_Pop+0x224>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	3302      	adds	r3, #2
 800d4f6:	4a5e      	ldr	r2, [pc, #376]	; (800d670 <Draw_Pop+0x224>)
 800d4f8:	6013      	str	r3, [r2, #0]
 800d4fa:	4b5e      	ldr	r3, [pc, #376]	; (800d674 <Draw_Pop+0x228>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	3b04      	subs	r3, #4
 800d500:	4a5c      	ldr	r2, [pc, #368]	; (800d674 <Draw_Pop+0x228>)
 800d502:	6013      	str	r3, [r2, #0]
 800d504:	4b59      	ldr	r3, [pc, #356]	; (800d66c <Draw_Pop+0x220>)
 800d506:	f04f 1202 	mov.w	r2, #131074	; 0x20002
 800d50a:	601a      	str	r2, [r3, #0]
 800d50c:	4b5d      	ldr	r3, [pc, #372]	; (800d684 <Draw_Pop+0x238>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	3b03      	subs	r3, #3
 800d512:	4a5a      	ldr	r2, [pc, #360]	; (800d67c <Draw_Pop+0x230>)
 800d514:	6013      	str	r3, [r2, #0]
 800d516:	4b5a      	ldr	r3, [pc, #360]	; (800d680 <Draw_Pop+0x234>)
 800d518:	681a      	ldr	r2, [r3, #0]
 800d51a:	4b58      	ldr	r3, [pc, #352]	; (800d67c <Draw_Pop+0x230>)
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	429a      	cmp	r2, r3
 800d520:	d10d      	bne.n	800d53e <Draw_Pop+0xf2>
 800d522:	4b53      	ldr	r3, [pc, #332]	; (800d670 <Draw_Pop+0x224>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	3302      	adds	r3, #2
 800d528:	4a51      	ldr	r2, [pc, #324]	; (800d670 <Draw_Pop+0x224>)
 800d52a:	6013      	str	r3, [r2, #0]
 800d52c:	4b51      	ldr	r3, [pc, #324]	; (800d674 <Draw_Pop+0x228>)
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	3b04      	subs	r3, #4
 800d532:	4a50      	ldr	r2, [pc, #320]	; (800d674 <Draw_Pop+0x228>)
 800d534:	6013      	str	r3, [r2, #0]
 800d536:	4b4d      	ldr	r3, [pc, #308]	; (800d66c <Draw_Pop+0x220>)
 800d538:	f04f 1202 	mov.w	r2, #131074	; 0x20002
 800d53c:	601a      	str	r2, [r3, #0]
 800d53e:	4b51      	ldr	r3, [pc, #324]	; (800d684 <Draw_Pop+0x238>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	3b02      	subs	r3, #2
 800d544:	4a4d      	ldr	r2, [pc, #308]	; (800d67c <Draw_Pop+0x230>)
 800d546:	6013      	str	r3, [r2, #0]
 800d548:	4b4d      	ldr	r3, [pc, #308]	; (800d680 <Draw_Pop+0x234>)
 800d54a:	681a      	ldr	r2, [r3, #0]
 800d54c:	4b4b      	ldr	r3, [pc, #300]	; (800d67c <Draw_Pop+0x230>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	429a      	cmp	r2, r3
 800d552:	d10d      	bne.n	800d570 <Draw_Pop+0x124>
 800d554:	4b46      	ldr	r3, [pc, #280]	; (800d670 <Draw_Pop+0x224>)
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	3304      	adds	r3, #4
 800d55a:	4a45      	ldr	r2, [pc, #276]	; (800d670 <Draw_Pop+0x224>)
 800d55c:	6013      	str	r3, [r2, #0]
 800d55e:	4b45      	ldr	r3, [pc, #276]	; (800d674 <Draw_Pop+0x228>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	3b08      	subs	r3, #8
 800d564:	4a43      	ldr	r2, [pc, #268]	; (800d674 <Draw_Pop+0x228>)
 800d566:	6013      	str	r3, [r2, #0]
 800d568:	4b40      	ldr	r3, [pc, #256]	; (800d66c <Draw_Pop+0x220>)
 800d56a:	f04f 1204 	mov.w	r2, #262148	; 0x40004
 800d56e:	601a      	str	r2, [r3, #0]
 800d570:	4b44      	ldr	r3, [pc, #272]	; (800d684 <Draw_Pop+0x238>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	3b01      	subs	r3, #1
 800d576:	4a41      	ldr	r2, [pc, #260]	; (800d67c <Draw_Pop+0x230>)
 800d578:	6013      	str	r3, [r2, #0]
 800d57a:	4b41      	ldr	r3, [pc, #260]	; (800d680 <Draw_Pop+0x234>)
 800d57c:	681a      	ldr	r2, [r3, #0]
 800d57e:	4b3f      	ldr	r3, [pc, #252]	; (800d67c <Draw_Pop+0x230>)
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	429a      	cmp	r2, r3
 800d584:	d10d      	bne.n	800d5a2 <Draw_Pop+0x156>
 800d586:	4b3a      	ldr	r3, [pc, #232]	; (800d670 <Draw_Pop+0x224>)
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	3306      	adds	r3, #6
 800d58c:	4a38      	ldr	r2, [pc, #224]	; (800d670 <Draw_Pop+0x224>)
 800d58e:	6013      	str	r3, [r2, #0]
 800d590:	4b38      	ldr	r3, [pc, #224]	; (800d674 <Draw_Pop+0x228>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	3b0c      	subs	r3, #12
 800d596:	4a37      	ldr	r2, [pc, #220]	; (800d674 <Draw_Pop+0x228>)
 800d598:	6013      	str	r3, [r2, #0]
 800d59a:	4b34      	ldr	r3, [pc, #208]	; (800d66c <Draw_Pop+0x220>)
 800d59c:	f04f 1208 	mov.w	r2, #524296	; 0x80008
 800d5a0:	601a      	str	r2, [r3, #0]
 800d5a2:	4b33      	ldr	r3, [pc, #204]	; (800d670 <Draw_Pop+0x224>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	085b      	lsrs	r3, r3, #1
 800d5a8:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d5ac:	005b      	lsls	r3, r3, #1
 800d5ae:	4a36      	ldr	r2, [pc, #216]	; (800d688 <Draw_Pop+0x23c>)
 800d5b0:	4413      	add	r3, r2
 800d5b2:	4a36      	ldr	r2, [pc, #216]	; (800d68c <Draw_Pop+0x240>)
 800d5b4:	6013      	str	r3, [r2, #0]
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	334e      	adds	r3, #78	; 0x4e
 800d5ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d5be:	461a      	mov	r2, r3
 800d5c0:	4b33      	ldr	r3, [pc, #204]	; (800d690 <Draw_Pop+0x244>)
 800d5c2:	601a      	str	r2, [r3, #0]
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	3350      	adds	r3, #80	; 0x50
 800d5c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d5cc:	461a      	mov	r2, r3
 800d5ce:	4b31      	ldr	r3, [pc, #196]	; (800d694 <Draw_Pop+0x248>)
 800d5d0:	601a      	str	r2, [r3, #0]
 800d5d2:	4b31      	ldr	r3, [pc, #196]	; (800d698 <Draw_Pop+0x24c>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	881b      	ldrh	r3, [r3, #0]
 800d5d8:	461a      	mov	r2, r3
 800d5da:	4b28      	ldr	r3, [pc, #160]	; (800d67c <Draw_Pop+0x230>)
 800d5dc:	601a      	str	r2, [r3, #0]
 800d5de:	4b2e      	ldr	r3, [pc, #184]	; (800d698 <Draw_Pop+0x24c>)
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	3302      	adds	r3, #2
 800d5e4:	4a2c      	ldr	r2, [pc, #176]	; (800d698 <Draw_Pop+0x24c>)
 800d5e6:	6013      	str	r3, [r2, #0]
 800d5e8:	4b29      	ldr	r3, [pc, #164]	; (800d690 <Draw_Pop+0x244>)
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d100      	bne.n	800d5f2 <Draw_Pop+0x1a6>
 800d5f0:	e054      	b.n	800d69c <Draw_Pop+0x250>
 800d5f2:	bf00      	nop
 800d5f4:	4b21      	ldr	r3, [pc, #132]	; (800d67c <Draw_Pop+0x230>)
 800d5f6:	681a      	ldr	r2, [r3, #0]
 800d5f8:	4b1c      	ldr	r3, [pc, #112]	; (800d66c <Draw_Pop+0x220>)
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	4013      	ands	r3, r2
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d006      	beq.n	800d610 <Draw_Pop+0x1c4>
 800d602:	4b22      	ldr	r3, [pc, #136]	; (800d68c <Draw_Pop+0x240>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	781b      	ldrb	r3, [r3, #0]
 800d608:	461a      	mov	r2, r3
 800d60a:	4b22      	ldr	r3, [pc, #136]	; (800d694 <Draw_Pop+0x248>)
 800d60c:	601a      	str	r2, [r3, #0]
 800d60e:	e005      	b.n	800d61c <Draw_Pop+0x1d0>
 800d610:	4b1e      	ldr	r3, [pc, #120]	; (800d68c <Draw_Pop+0x240>)
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	781b      	ldrb	r3, [r3, #0]
 800d616:	461a      	mov	r2, r3
 800d618:	4b1d      	ldr	r3, [pc, #116]	; (800d690 <Draw_Pop+0x244>)
 800d61a:	601a      	str	r2, [r3, #0]
 800d61c:	4b1b      	ldr	r3, [pc, #108]	; (800d68c <Draw_Pop+0x240>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	3301      	adds	r3, #1
 800d622:	4a1a      	ldr	r2, [pc, #104]	; (800d68c <Draw_Pop+0x240>)
 800d624:	6013      	str	r3, [r2, #0]
 800d626:	4b13      	ldr	r3, [pc, #76]	; (800d674 <Draw_Pop+0x228>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	3b02      	subs	r3, #2
 800d62c:	4a11      	ldr	r2, [pc, #68]	; (800d674 <Draw_Pop+0x228>)
 800d62e:	6013      	str	r3, [r2, #0]
 800d630:	4b10      	ldr	r3, [pc, #64]	; (800d674 <Draw_Pop+0x228>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d066      	beq.n	800d706 <Draw_Pop+0x2ba>
 800d638:	4b0c      	ldr	r3, [pc, #48]	; (800d66c <Draw_Pop+0x220>)
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	da0f      	bge.n	800d660 <Draw_Pop+0x214>
 800d640:	4b15      	ldr	r3, [pc, #84]	; (800d698 <Draw_Pop+0x24c>)
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	881b      	ldrh	r3, [r3, #0]
 800d646:	461a      	mov	r2, r3
 800d648:	4b0c      	ldr	r3, [pc, #48]	; (800d67c <Draw_Pop+0x230>)
 800d64a:	601a      	str	r2, [r3, #0]
 800d64c:	4b12      	ldr	r3, [pc, #72]	; (800d698 <Draw_Pop+0x24c>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	3302      	adds	r3, #2
 800d652:	4a11      	ldr	r2, [pc, #68]	; (800d698 <Draw_Pop+0x24c>)
 800d654:	6013      	str	r3, [r2, #0]
 800d656:	4b05      	ldr	r3, [pc, #20]	; (800d66c <Draw_Pop+0x220>)
 800d658:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800d65c:	601a      	str	r2, [r3, #0]
 800d65e:	e7c9      	b.n	800d5f4 <Draw_Pop+0x1a8>
 800d660:	4b02      	ldr	r3, [pc, #8]	; (800d66c <Draw_Pop+0x220>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	005b      	lsls	r3, r3, #1
 800d666:	4a01      	ldr	r2, [pc, #4]	; (800d66c <Draw_Pop+0x220>)
 800d668:	6013      	str	r3, [r2, #0]
 800d66a:	e7c3      	b.n	800d5f4 <Draw_Pop+0x1a8>
 800d66c:	20000c00 	.word	0x20000c00
 800d670:	20000a3c 	.word	0x20000a3c
 800d674:	20000be8 	.word	0x20000be8
 800d678:	20000be4 	.word	0x20000be4
 800d67c:	20000a40 	.word	0x20000a40
 800d680:	20000bf8 	.word	0x20000bf8
 800d684:	20000bf4 	.word	0x20000bf4
 800d688:	20000a48 	.word	0x20000a48
 800d68c:	20000bec 	.word	0x20000bec
 800d690:	20000a38 	.word	0x20000a38
 800d694:	20000bfc 	.word	0x20000bfc
 800d698:	20000c04 	.word	0x20000c04
 800d69c:	4b1e      	ldr	r3, [pc, #120]	; (800d718 <Draw_Pop+0x2cc>)
 800d69e:	681a      	ldr	r2, [r3, #0]
 800d6a0:	4b1e      	ldr	r3, [pc, #120]	; (800d71c <Draw_Pop+0x2d0>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	4013      	ands	r3, r2
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d005      	beq.n	800d6b6 <Draw_Pop+0x26a>
 800d6aa:	4b1d      	ldr	r3, [pc, #116]	; (800d720 <Draw_Pop+0x2d4>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	781b      	ldrb	r3, [r3, #0]
 800d6b0:	461a      	mov	r2, r3
 800d6b2:	4b1c      	ldr	r3, [pc, #112]	; (800d724 <Draw_Pop+0x2d8>)
 800d6b4:	601a      	str	r2, [r3, #0]
 800d6b6:	4b1a      	ldr	r3, [pc, #104]	; (800d720 <Draw_Pop+0x2d4>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	3301      	adds	r3, #1
 800d6bc:	4a18      	ldr	r2, [pc, #96]	; (800d720 <Draw_Pop+0x2d4>)
 800d6be:	6013      	str	r3, [r2, #0]
 800d6c0:	4b19      	ldr	r3, [pc, #100]	; (800d728 <Draw_Pop+0x2dc>)
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	3b02      	subs	r3, #2
 800d6c6:	4a18      	ldr	r2, [pc, #96]	; (800d728 <Draw_Pop+0x2dc>)
 800d6c8:	6013      	str	r3, [r2, #0]
 800d6ca:	4b17      	ldr	r3, [pc, #92]	; (800d728 <Draw_Pop+0x2dc>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d01b      	beq.n	800d70a <Draw_Pop+0x2be>
 800d6d2:	4b12      	ldr	r3, [pc, #72]	; (800d71c <Draw_Pop+0x2d0>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	da0f      	bge.n	800d6fa <Draw_Pop+0x2ae>
 800d6da:	4b14      	ldr	r3, [pc, #80]	; (800d72c <Draw_Pop+0x2e0>)
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	881b      	ldrh	r3, [r3, #0]
 800d6e0:	461a      	mov	r2, r3
 800d6e2:	4b13      	ldr	r3, [pc, #76]	; (800d730 <Draw_Pop+0x2e4>)
 800d6e4:	601a      	str	r2, [r3, #0]
 800d6e6:	4b11      	ldr	r3, [pc, #68]	; (800d72c <Draw_Pop+0x2e0>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	3302      	adds	r3, #2
 800d6ec:	4a0f      	ldr	r2, [pc, #60]	; (800d72c <Draw_Pop+0x2e0>)
 800d6ee:	6013      	str	r3, [r2, #0]
 800d6f0:	4b0a      	ldr	r3, [pc, #40]	; (800d71c <Draw_Pop+0x2d0>)
 800d6f2:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800d6f6:	601a      	str	r2, [r3, #0]
 800d6f8:	e7d0      	b.n	800d69c <Draw_Pop+0x250>
 800d6fa:	4b08      	ldr	r3, [pc, #32]	; (800d71c <Draw_Pop+0x2d0>)
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	005b      	lsls	r3, r3, #1
 800d700:	4a06      	ldr	r2, [pc, #24]	; (800d71c <Draw_Pop+0x2d0>)
 800d702:	6013      	str	r3, [r2, #0]
 800d704:	e7ca      	b.n	800d69c <Draw_Pop+0x250>
 800d706:	bf00      	nop
 800d708:	e000      	b.n	800d70c <Draw_Pop+0x2c0>
 800d70a:	bf00      	nop
 800d70c:	370c      	adds	r7, #12
 800d70e:	46bd      	mov	sp, r7
 800d710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d714:	4770      	bx	lr
 800d716:	bf00      	nop
 800d718:	20000bf8 	.word	0x20000bf8
 800d71c:	20000c00 	.word	0x20000c00
 800d720:	20000bec 	.word	0x20000bec
 800d724:	20000bfc 	.word	0x20000bfc
 800d728:	20000be8 	.word	0x20000be8
 800d72c:	20000c04 	.word	0x20000c04
 800d730:	20000a40 	.word	0x20000a40

0800d734 <DrawWindow>:
 800d734:	b580      	push	{r7, lr}
 800d736:	b082      	sub	sp, #8
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	6039      	str	r1, [r7, #0]
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	4a9b      	ldr	r2, [pc, #620]	; (800d9b0 <DrawWindow+0x27c>)
 800d742:	6013      	str	r3, [r2, #0]
 800d744:	4b9b      	ldr	r3, [pc, #620]	; (800d9b4 <DrawWindow+0x280>)
 800d746:	2200      	movs	r2, #0
 800d748:	601a      	str	r2, [r3, #0]
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f503 7361 	add.w	r3, r3, #900	; 0x384
 800d750:	4a99      	ldr	r2, [pc, #612]	; (800d9b8 <DrawWindow+0x284>)
 800d752:	6013      	str	r3, [r2, #0]
 800d754:	683b      	ldr	r3, [r7, #0]
 800d756:	3344      	adds	r3, #68	; 0x44
 800d758:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d75c:	461a      	mov	r2, r3
 800d75e:	4b97      	ldr	r3, [pc, #604]	; (800d9bc <DrawWindow+0x288>)
 800d760:	601a      	str	r2, [r3, #0]
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	3346      	adds	r3, #70	; 0x46
 800d766:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d76a:	461a      	mov	r2, r3
 800d76c:	4b94      	ldr	r3, [pc, #592]	; (800d9c0 <DrawWindow+0x28c>)
 800d76e:	601a      	str	r2, [r3, #0]
 800d770:	4b92      	ldr	r3, [pc, #584]	; (800d9bc <DrawWindow+0x288>)
 800d772:	681a      	ldr	r2, [r3, #0]
 800d774:	4b92      	ldr	r3, [pc, #584]	; (800d9c0 <DrawWindow+0x28c>)
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	4413      	add	r3, r2
 800d77a:	4a91      	ldr	r2, [pc, #580]	; (800d9c0 <DrawWindow+0x28c>)
 800d77c:	6013      	str	r3, [r2, #0]
 800d77e:	4b8d      	ldr	r3, [pc, #564]	; (800d9b4 <DrawWindow+0x280>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d102      	bne.n	800d78c <DrawWindow+0x58>
 800d786:	f7ff f93b 	bl	800ca00 <Buld_0>
 800d78a:	e064      	b.n	800d856 <DrawWindow+0x122>
 800d78c:	4b89      	ldr	r3, [pc, #548]	; (800d9b4 <DrawWindow+0x280>)
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800d794:	d102      	bne.n	800d79c <DrawWindow+0x68>
 800d796:	f7ff f933 	bl	800ca00 <Buld_0>
 800d79a:	e05c      	b.n	800d856 <DrawWindow+0x122>
 800d79c:	4b85      	ldr	r3, [pc, #532]	; (800d9b4 <DrawWindow+0x280>)
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	2b01      	cmp	r3, #1
 800d7a2:	d102      	bne.n	800d7aa <DrawWindow+0x76>
 800d7a4:	f7ff f938 	bl	800ca18 <Buld_1>
 800d7a8:	e055      	b.n	800d856 <DrawWindow+0x122>
 800d7aa:	4b86      	ldr	r3, [pc, #536]	; (800d9c4 <DrawWindow+0x290>)
 800d7ac:	f240 122d 	movw	r2, #301	; 0x12d
 800d7b0:	601a      	str	r2, [r3, #0]
 800d7b2:	4b80      	ldr	r3, [pc, #512]	; (800d9b4 <DrawWindow+0x280>)
 800d7b4:	681a      	ldr	r2, [r3, #0]
 800d7b6:	4b83      	ldr	r3, [pc, #524]	; (800d9c4 <DrawWindow+0x290>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	429a      	cmp	r2, r3
 800d7bc:	d102      	bne.n	800d7c4 <DrawWindow+0x90>
 800d7be:	f7ff f92b 	bl	800ca18 <Buld_1>
 800d7c2:	e048      	b.n	800d856 <DrawWindow+0x122>
 800d7c4:	4b7b      	ldr	r3, [pc, #492]	; (800d9b4 <DrawWindow+0x280>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	3b01      	subs	r3, #1
 800d7ca:	4a7e      	ldr	r2, [pc, #504]	; (800d9c4 <DrawWindow+0x290>)
 800d7cc:	6013      	str	r3, [r2, #0]
 800d7ce:	4b7e      	ldr	r3, [pc, #504]	; (800d9c8 <DrawWindow+0x294>)
 800d7d0:	2219      	movs	r2, #25
 800d7d2:	601a      	str	r2, [r3, #0]
 800d7d4:	4b7b      	ldr	r3, [pc, #492]	; (800d9c4 <DrawWindow+0x290>)
 800d7d6:	681a      	ldr	r2, [r3, #0]
 800d7d8:	4b7b      	ldr	r3, [pc, #492]	; (800d9c8 <DrawWindow+0x294>)
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7e0:	4a7a      	ldr	r2, [pc, #488]	; (800d9cc <DrawWindow+0x298>)
 800d7e2:	6013      	str	r3, [r2, #0]
 800d7e4:	4b79      	ldr	r3, [pc, #484]	; (800d9cc <DrawWindow+0x298>)
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	4a77      	ldr	r2, [pc, #476]	; (800d9c8 <DrawWindow+0x294>)
 800d7ea:	6812      	ldr	r2, [r2, #0]
 800d7ec:	fb02 f303 	mul.w	r3, r2, r3
 800d7f0:	4a76      	ldr	r2, [pc, #472]	; (800d9cc <DrawWindow+0x298>)
 800d7f2:	6013      	str	r3, [r2, #0]
 800d7f4:	4b73      	ldr	r3, [pc, #460]	; (800d9c4 <DrawWindow+0x290>)
 800d7f6:	681a      	ldr	r2, [r3, #0]
 800d7f8:	4b74      	ldr	r3, [pc, #464]	; (800d9cc <DrawWindow+0x298>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	1ad3      	subs	r3, r2, r3
 800d7fe:	4a73      	ldr	r2, [pc, #460]	; (800d9cc <DrawWindow+0x298>)
 800d800:	6013      	str	r3, [r2, #0]
 800d802:	4b72      	ldr	r3, [pc, #456]	; (800d9cc <DrawWindow+0x298>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d102      	bne.n	800d810 <DrawWindow+0xdc>
 800d80a:	f7ff f975 	bl	800caf8 <Buld_4>
 800d80e:	e022      	b.n	800d856 <DrawWindow+0x122>
 800d810:	4b6d      	ldr	r3, [pc, #436]	; (800d9c8 <DrawWindow+0x294>)
 800d812:	2205      	movs	r2, #5
 800d814:	601a      	str	r2, [r3, #0]
 800d816:	4b6b      	ldr	r3, [pc, #428]	; (800d9c4 <DrawWindow+0x290>)
 800d818:	681a      	ldr	r2, [r3, #0]
 800d81a:	4b6b      	ldr	r3, [pc, #428]	; (800d9c8 <DrawWindow+0x294>)
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d822:	4a6a      	ldr	r2, [pc, #424]	; (800d9cc <DrawWindow+0x298>)
 800d824:	6013      	str	r3, [r2, #0]
 800d826:	4b69      	ldr	r3, [pc, #420]	; (800d9cc <DrawWindow+0x298>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	4a67      	ldr	r2, [pc, #412]	; (800d9c8 <DrawWindow+0x294>)
 800d82c:	6812      	ldr	r2, [r2, #0]
 800d82e:	fb02 f303 	mul.w	r3, r2, r3
 800d832:	4a66      	ldr	r2, [pc, #408]	; (800d9cc <DrawWindow+0x298>)
 800d834:	6013      	str	r3, [r2, #0]
 800d836:	4b63      	ldr	r3, [pc, #396]	; (800d9c4 <DrawWindow+0x290>)
 800d838:	681a      	ldr	r2, [r3, #0]
 800d83a:	4b64      	ldr	r3, [pc, #400]	; (800d9cc <DrawWindow+0x298>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	1ad3      	subs	r3, r2, r3
 800d840:	4a62      	ldr	r2, [pc, #392]	; (800d9cc <DrawWindow+0x298>)
 800d842:	6013      	str	r3, [r2, #0]
 800d844:	4b61      	ldr	r3, [pc, #388]	; (800d9cc <DrawWindow+0x298>)
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d102      	bne.n	800d852 <DrawWindow+0x11e>
 800d84c:	f7ff f92e 	bl	800caac <Buld_3>
 800d850:	e001      	b.n	800d856 <DrawWindow+0x122>
 800d852:	f7ff f909 	bl	800ca68 <Buld_2>
 800d856:	4b57      	ldr	r3, [pc, #348]	; (800d9b4 <DrawWindow+0x280>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	2b02      	cmp	r3, #2
 800d85c:	d96c      	bls.n	800d938 <DrawWindow+0x204>
 800d85e:	4b55      	ldr	r3, [pc, #340]	; (800d9b4 <DrawWindow+0x280>)
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d866:	d267      	bcs.n	800d938 <DrawWindow+0x204>
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	3306      	adds	r3, #6
 800d86c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d870:	461a      	mov	r2, r3
 800d872:	4b54      	ldr	r3, [pc, #336]	; (800d9c4 <DrawWindow+0x290>)
 800d874:	601a      	str	r2, [r3, #0]
 800d876:	4b53      	ldr	r3, [pc, #332]	; (800d9c4 <DrawWindow+0x290>)
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	f003 0304 	and.w	r3, r3, #4
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d10f      	bne.n	800d8a2 <DrawWindow+0x16e>
 800d882:	4b50      	ldr	r3, [pc, #320]	; (800d9c4 <DrawWindow+0x290>)
 800d884:	222e      	movs	r2, #46	; 0x2e
 800d886:	601a      	str	r2, [r3, #0]
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	331a      	adds	r3, #26
 800d88c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d890:	461a      	mov	r2, r3
 800d892:	4b4f      	ldr	r3, [pc, #316]	; (800d9d0 <DrawWindow+0x29c>)
 800d894:	601a      	str	r2, [r3, #0]
 800d896:	4b4f      	ldr	r3, [pc, #316]	; (800d9d4 <DrawWindow+0x2a0>)
 800d898:	2208      	movs	r2, #8
 800d89a:	601a      	str	r2, [r3, #0]
 800d89c:	2001      	movs	r0, #1
 800d89e:	f7ff f951 	bl	800cb44 <Draw_Digit_Analog>
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	3304      	adds	r3, #4
 800d8a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d8aa:	461a      	mov	r2, r3
 800d8ac:	4b45      	ldr	r3, [pc, #276]	; (800d9c4 <DrawWindow+0x290>)
 800d8ae:	601a      	str	r2, [r3, #0]
 800d8b0:	4b44      	ldr	r3, [pc, #272]	; (800d9c4 <DrawWindow+0x290>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	f003 0304 	and.w	r3, r3, #4
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d10f      	bne.n	800d8dc <DrawWindow+0x1a8>
 800d8bc:	4b41      	ldr	r3, [pc, #260]	; (800d9c4 <DrawWindow+0x290>)
 800d8be:	222c      	movs	r2, #44	; 0x2c
 800d8c0:	601a      	str	r2, [r3, #0]
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	3318      	adds	r3, #24
 800d8c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d8ca:	461a      	mov	r2, r3
 800d8cc:	4b40      	ldr	r3, [pc, #256]	; (800d9d0 <DrawWindow+0x29c>)
 800d8ce:	601a      	str	r2, [r3, #0]
 800d8d0:	4b40      	ldr	r3, [pc, #256]	; (800d9d4 <DrawWindow+0x2a0>)
 800d8d2:	2204      	movs	r2, #4
 800d8d4:	601a      	str	r2, [r3, #0]
 800d8d6:	2001      	movs	r0, #1
 800d8d8:	f7ff f934 	bl	800cb44 <Draw_Digit_Analog>
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	3302      	adds	r3, #2
 800d8e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d8e4:	461a      	mov	r2, r3
 800d8e6:	4b37      	ldr	r3, [pc, #220]	; (800d9c4 <DrawWindow+0x290>)
 800d8e8:	601a      	str	r2, [r3, #0]
 800d8ea:	4b36      	ldr	r3, [pc, #216]	; (800d9c4 <DrawWindow+0x290>)
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	f003 0304 	and.w	r3, r3, #4
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d10a      	bne.n	800d90c <DrawWindow+0x1d8>
 800d8f6:	4b33      	ldr	r3, [pc, #204]	; (800d9c4 <DrawWindow+0x290>)
 800d8f8:	222a      	movs	r2, #42	; 0x2a
 800d8fa:	601a      	str	r2, [r3, #0]
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800d902:	4a33      	ldr	r2, [pc, #204]	; (800d9d0 <DrawWindow+0x29c>)
 800d904:	6013      	str	r3, [r2, #0]
 800d906:	2000      	movs	r0, #0
 800d908:	f7ff f91c 	bl	800cb44 <Draw_Digit_Analog>
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d912:	461a      	mov	r2, r3
 800d914:	4b2b      	ldr	r3, [pc, #172]	; (800d9c4 <DrawWindow+0x290>)
 800d916:	601a      	str	r2, [r3, #0]
 800d918:	4b2a      	ldr	r3, [pc, #168]	; (800d9c4 <DrawWindow+0x290>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	f003 0304 	and.w	r3, r3, #4
 800d920:	2b00      	cmp	r3, #0
 800d922:	d10b      	bne.n	800d93c <DrawWindow+0x208>
 800d924:	4b27      	ldr	r3, [pc, #156]	; (800d9c4 <DrawWindow+0x290>)
 800d926:	2228      	movs	r2, #40	; 0x28
 800d928:	601a      	str	r2, [r3, #0]
 800d92a:	4a29      	ldr	r2, [pc, #164]	; (800d9d0 <DrawWindow+0x29c>)
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	6013      	str	r3, [r2, #0]
 800d930:	2000      	movs	r0, #0
 800d932:	f7ff f907 	bl	800cb44 <Draw_Digit_Analog>
 800d936:	e002      	b.n	800d93e <DrawWindow+0x20a>
 800d938:	bf00      	nop
 800d93a:	e000      	b.n	800d93e <DrawWindow+0x20a>
 800d93c:	bf00      	nop
 800d93e:	4b1d      	ldr	r3, [pc, #116]	; (800d9b4 <DrawWindow+0x280>)
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d103      	bne.n	800d94e <DrawWindow+0x21a>
 800d946:	6838      	ldr	r0, [r7, #0]
 800d948:	f7ff fa14 	bl	800cd74 <Cursor_0>
 800d94c:	e047      	b.n	800d9de <DrawWindow+0x2aa>
 800d94e:	4b19      	ldr	r3, [pc, #100]	; (800d9b4 <DrawWindow+0x280>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800d956:	d103      	bne.n	800d960 <DrawWindow+0x22c>
 800d958:	6838      	ldr	r0, [r7, #0]
 800d95a:	f7ff fa0b 	bl	800cd74 <Cursor_0>
 800d95e:	e03e      	b.n	800d9de <DrawWindow+0x2aa>
 800d960:	4b14      	ldr	r3, [pc, #80]	; (800d9b4 <DrawWindow+0x280>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	2b01      	cmp	r3, #1
 800d966:	d103      	bne.n	800d970 <DrawWindow+0x23c>
 800d968:	6838      	ldr	r0, [r7, #0]
 800d96a:	f7ff fa8d 	bl	800ce88 <Cursor_1>
 800d96e:	e036      	b.n	800d9de <DrawWindow+0x2aa>
 800d970:	4b16      	ldr	r3, [pc, #88]	; (800d9cc <DrawWindow+0x298>)
 800d972:	f240 122d 	movw	r2, #301	; 0x12d
 800d976:	601a      	str	r2, [r3, #0]
 800d978:	4b0e      	ldr	r3, [pc, #56]	; (800d9b4 <DrawWindow+0x280>)
 800d97a:	681a      	ldr	r2, [r3, #0]
 800d97c:	4b13      	ldr	r3, [pc, #76]	; (800d9cc <DrawWindow+0x298>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	429a      	cmp	r2, r3
 800d982:	d103      	bne.n	800d98c <DrawWindow+0x258>
 800d984:	6838      	ldr	r0, [r7, #0]
 800d986:	f7ff fa7f 	bl	800ce88 <Cursor_1>
 800d98a:	e028      	b.n	800d9de <DrawWindow+0x2aa>
 800d98c:	4b09      	ldr	r3, [pc, #36]	; (800d9b4 <DrawWindow+0x280>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	2b02      	cmp	r3, #2
 800d992:	d103      	bne.n	800d99c <DrawWindow+0x268>
 800d994:	6838      	ldr	r0, [r7, #0]
 800d996:	f7ff faeb 	bl	800cf70 <Cursor_2>
 800d99a:	e020      	b.n	800d9de <DrawWindow+0x2aa>
 800d99c:	4b05      	ldr	r3, [pc, #20]	; (800d9b4 <DrawWindow+0x280>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d9a4:	d118      	bne.n	800d9d8 <DrawWindow+0x2a4>
 800d9a6:	6838      	ldr	r0, [r7, #0]
 800d9a8:	f7ff fae2 	bl	800cf70 <Cursor_2>
 800d9ac:	e017      	b.n	800d9de <DrawWindow+0x2aa>
 800d9ae:	bf00      	nop
 800d9b0:	20000a44 	.word	0x20000a44
 800d9b4:	20000bf8 	.word	0x20000bf8
 800d9b8:	20000c04 	.word	0x20000c04
 800d9bc:	20000be4 	.word	0x20000be4
 800d9c0:	20000bf4 	.word	0x20000bf4
 800d9c4:	20000a40 	.word	0x20000a40
 800d9c8:	20000be8 	.word	0x20000be8
 800d9cc:	20000a3c 	.word	0x20000a3c
 800d9d0:	20000bec 	.word	0x20000bec
 800d9d4:	20000a38 	.word	0x20000a38
 800d9d8:	6838      	ldr	r0, [r7, #0]
 800d9da:	f7ff fb1d 	bl	800d018 <Cursor_3>
 800d9de:	6838      	ldr	r0, [r7, #0]
 800d9e0:	f7ff fb82 	bl	800d0e8 <Cursor_4>
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	334c      	adds	r3, #76	; 0x4c
 800d9e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d9ec:	461a      	mov	r2, r3
 800d9ee:	4b17      	ldr	r3, [pc, #92]	; (800da4c <DrawWindow+0x318>)
 800d9f0:	601a      	str	r2, [r3, #0]
 800d9f2:	4b16      	ldr	r3, [pc, #88]	; (800da4c <DrawWindow+0x318>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	f003 0301 	and.w	r3, r3, #1
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d00f      	beq.n	800da1e <DrawWindow+0x2ea>
 800d9fe:	4b14      	ldr	r3, [pc, #80]	; (800da50 <DrawWindow+0x31c>)
 800da00:	681a      	ldr	r2, [r3, #0]
 800da02:	4b14      	ldr	r3, [pc, #80]	; (800da54 <DrawWindow+0x320>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	429a      	cmp	r2, r3
 800da08:	d30b      	bcc.n	800da22 <DrawWindow+0x2ee>
 800da0a:	4b11      	ldr	r3, [pc, #68]	; (800da50 <DrawWindow+0x31c>)
 800da0c:	681a      	ldr	r2, [r3, #0]
 800da0e:	4b12      	ldr	r3, [pc, #72]	; (800da58 <DrawWindow+0x324>)
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	429a      	cmp	r2, r3
 800da14:	d207      	bcs.n	800da26 <DrawWindow+0x2f2>
 800da16:	6838      	ldr	r0, [r7, #0]
 800da18:	f7ff fd18 	bl	800d44c <Draw_Pop>
 800da1c:	e004      	b.n	800da28 <DrawWindow+0x2f4>
 800da1e:	bf00      	nop
 800da20:	e002      	b.n	800da28 <DrawWindow+0x2f4>
 800da22:	bf00      	nop
 800da24:	e000      	b.n	800da28 <DrawWindow+0x2f4>
 800da26:	bf00      	nop
 800da28:	6838      	ldr	r0, [r7, #0]
 800da2a:	f7ff fcdd 	bl	800d3e8 <Send_LCD>
 800da2e:	4b08      	ldr	r3, [pc, #32]	; (800da50 <DrawWindow+0x31c>)
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800da36:	d005      	beq.n	800da44 <DrawWindow+0x310>
 800da38:	4b05      	ldr	r3, [pc, #20]	; (800da50 <DrawWindow+0x31c>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	3301      	adds	r3, #1
 800da3e:	4a04      	ldr	r2, [pc, #16]	; (800da50 <DrawWindow+0x31c>)
 800da40:	6013      	str	r3, [r2, #0]
 800da42:	e69c      	b.n	800d77e <DrawWindow+0x4a>
 800da44:	bf00      	nop
 800da46:	3708      	adds	r7, #8
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}
 800da4c:	20000a40 	.word	0x20000a40
 800da50:	20000bf8 	.word	0x20000bf8
 800da54:	20000be4 	.word	0x20000be4
 800da58:	20000bf4 	.word	0x20000bf4

0800da5c <DispChar8x14>:
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b084      	sub	sp, #16
 800da60:	af00      	add	r7, sp, #0
 800da62:	4603      	mov	r3, r0
 800da64:	460a      	mov	r2, r1
 800da66:	71fb      	strb	r3, [r7, #7]
 800da68:	4613      	mov	r3, r2
 800da6a:	71bb      	strb	r3, [r7, #6]
 800da6c:	2300      	movs	r3, #0
 800da6e:	81fb      	strh	r3, [r7, #14]
 800da70:	e06d      	b.n	800db4e <DispChar8x14+0xf2>
 800da72:	79fb      	ldrb	r3, [r7, #7]
 800da74:	f003 0310 	and.w	r3, r3, #16
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d00a      	beq.n	800da92 <DispChar8x14+0x36>
 800da7c:	79bb      	ldrb	r3, [r7, #6]
 800da7e:	3b40      	subs	r3, #64	; 0x40
 800da80:	00da      	lsls	r2, r3, #3
 800da82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800da86:	4413      	add	r3, r2
 800da88:	4a35      	ldr	r2, [pc, #212]	; (800db60 <DispChar8x14+0x104>)
 800da8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da8e:	817b      	strh	r3, [r7, #10]
 800da90:	e005      	b.n	800da9e <DispChar8x14+0x42>
 800da92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800da96:	4a33      	ldr	r2, [pc, #204]	; (800db64 <DispChar8x14+0x108>)
 800da98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da9c:	817b      	strh	r3, [r7, #10]
 800da9e:	79fb      	ldrb	r3, [r7, #7]
 800daa0:	f003 0320 	and.w	r3, r3, #32
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d00c      	beq.n	800dac2 <DispChar8x14+0x66>
 800daa8:	89fb      	ldrh	r3, [r7, #14]
 800daaa:	f003 0301 	and.w	r3, r3, #1
 800daae:	b29b      	uxth	r3, r3
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d001      	beq.n	800dab8 <DispChar8x14+0x5c>
 800dab4:	4a2c      	ldr	r2, [pc, #176]	; (800db68 <DispChar8x14+0x10c>)
 800dab6:	e001      	b.n	800dabc <DispChar8x14+0x60>
 800dab8:	f245 5255 	movw	r2, #21845	; 0x5555
 800dabc:	897b      	ldrh	r3, [r7, #10]
 800dabe:	4013      	ands	r3, r2
 800dac0:	817b      	strh	r3, [r7, #10]
 800dac2:	4b2a      	ldr	r3, [pc, #168]	; (800db6c <DispChar8x14+0x110>)
 800dac4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dac8:	4a29      	ldr	r2, [pc, #164]	; (800db70 <DispChar8x14+0x114>)
 800daca:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dace:	4611      	mov	r1, r2
 800dad0:	4618      	mov	r0, r3
 800dad2:	f004 fb5b 	bl	801218c <LCD_Set_Posi>
 800dad6:	2300      	movs	r3, #0
 800dad8:	81bb      	strh	r3, [r7, #12]
 800dada:	e027      	b.n	800db2c <DispChar8x14+0xd0>
 800dadc:	897b      	ldrh	r3, [r7, #10]
 800dade:	f003 0304 	and.w	r3, r3, #4
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d00d      	beq.n	800db02 <DispChar8x14+0xa6>
 800dae6:	79fb      	ldrb	r3, [r7, #7]
 800dae8:	f003 0301 	and.w	r3, r3, #1
 800daec:	2b00      	cmp	r3, #0
 800daee:	d002      	beq.n	800daf6 <DispChar8x14+0x9a>
 800daf0:	4b20      	ldr	r3, [pc, #128]	; (800db74 <DispChar8x14+0x118>)
 800daf2:	881b      	ldrh	r3, [r3, #0]
 800daf4:	e001      	b.n	800dafa <DispChar8x14+0x9e>
 800daf6:	4b20      	ldr	r3, [pc, #128]	; (800db78 <DispChar8x14+0x11c>)
 800daf8:	881b      	ldrh	r3, [r3, #0]
 800dafa:	4618      	mov	r0, r3
 800dafc:	f004 fb94 	bl	8012228 <LCD_Set_Pixel>
 800db00:	e00c      	b.n	800db1c <DispChar8x14+0xc0>
 800db02:	79fb      	ldrb	r3, [r7, #7]
 800db04:	f003 0301 	and.w	r3, r3, #1
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d002      	beq.n	800db12 <DispChar8x14+0xb6>
 800db0c:	4b1a      	ldr	r3, [pc, #104]	; (800db78 <DispChar8x14+0x11c>)
 800db0e:	881b      	ldrh	r3, [r3, #0]
 800db10:	e001      	b.n	800db16 <DispChar8x14+0xba>
 800db12:	4b18      	ldr	r3, [pc, #96]	; (800db74 <DispChar8x14+0x118>)
 800db14:	881b      	ldrh	r3, [r3, #0]
 800db16:	4618      	mov	r0, r3
 800db18:	f004 fb86 	bl	8012228 <LCD_Set_Pixel>
 800db1c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800db20:	105b      	asrs	r3, r3, #1
 800db22:	817b      	strh	r3, [r7, #10]
 800db24:	89bb      	ldrh	r3, [r7, #12]
 800db26:	3301      	adds	r3, #1
 800db28:	b29b      	uxth	r3, r3
 800db2a:	81bb      	strh	r3, [r7, #12]
 800db2c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800db30:	2b0d      	cmp	r3, #13
 800db32:	ddd3      	ble.n	800dadc <DispChar8x14+0x80>
 800db34:	4b0d      	ldr	r3, [pc, #52]	; (800db6c <DispChar8x14+0x110>)
 800db36:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db3a:	b29b      	uxth	r3, r3
 800db3c:	3301      	adds	r3, #1
 800db3e:	b29b      	uxth	r3, r3
 800db40:	b21a      	sxth	r2, r3
 800db42:	4b0a      	ldr	r3, [pc, #40]	; (800db6c <DispChar8x14+0x110>)
 800db44:	801a      	strh	r2, [r3, #0]
 800db46:	89fb      	ldrh	r3, [r7, #14]
 800db48:	3301      	adds	r3, #1
 800db4a:	b29b      	uxth	r3, r3
 800db4c:	81fb      	strh	r3, [r7, #14]
 800db4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800db52:	2b07      	cmp	r3, #7
 800db54:	dd8d      	ble.n	800da72 <DispChar8x14+0x16>
 800db56:	bf00      	nop
 800db58:	bf00      	nop
 800db5a:	3710      	adds	r7, #16
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}
 800db60:	08001290 	.word	0x08001290
 800db64:	08000c90 	.word	0x08000c90
 800db68:	ffffaaaa 	.word	0xffffaaaa
 800db6c:	2000078a 	.word	0x2000078a
 800db70:	2000078c 	.word	0x2000078c
 800db74:	200015ce 	.word	0x200015ce
 800db78:	200015cc 	.word	0x200015cc

0800db7c <DispStr8x14>:
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b086      	sub	sp, #24
 800db80:	af00      	add	r7, sp, #0
 800db82:	607b      	str	r3, [r7, #4]
 800db84:	4603      	mov	r3, r0
 800db86:	81fb      	strh	r3, [r7, #14]
 800db88:	460b      	mov	r3, r1
 800db8a:	81bb      	strh	r3, [r7, #12]
 800db8c:	4613      	mov	r3, r2
 800db8e:	72fb      	strb	r3, [r7, #11]
 800db90:	4a22      	ldr	r2, [pc, #136]	; (800dc1c <DispStr8x14+0xa0>)
 800db92:	89fb      	ldrh	r3, [r7, #14]
 800db94:	8013      	strh	r3, [r2, #0]
 800db96:	4a22      	ldr	r2, [pc, #136]	; (800dc20 <DispStr8x14+0xa4>)
 800db98:	89bb      	ldrh	r3, [r7, #12]
 800db9a:	8013      	strh	r3, [r2, #0]
 800db9c:	4b1f      	ldr	r3, [pc, #124]	; (800dc1c <DispStr8x14+0xa0>)
 800db9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dba2:	4a1f      	ldr	r2, [pc, #124]	; (800dc20 <DispStr8x14+0xa4>)
 800dba4:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dba8:	4611      	mov	r1, r2
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f004 faee 	bl	801218c <LCD_Set_Posi>
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	82fb      	strh	r3, [r7, #22]
 800dbb4:	e012      	b.n	800dbdc <DispStr8x14+0x60>
 800dbb6:	7afb      	ldrb	r3, [r7, #11]
 800dbb8:	f003 0301 	and.w	r3, r3, #1
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d002      	beq.n	800dbc6 <DispStr8x14+0x4a>
 800dbc0:	4b18      	ldr	r3, [pc, #96]	; (800dc24 <DispStr8x14+0xa8>)
 800dbc2:	881b      	ldrh	r3, [r3, #0]
 800dbc4:	e001      	b.n	800dbca <DispStr8x14+0x4e>
 800dbc6:	4b18      	ldr	r3, [pc, #96]	; (800dc28 <DispStr8x14+0xac>)
 800dbc8:	881b      	ldrh	r3, [r3, #0]
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f004 fb2c 	bl	8012228 <LCD_Set_Pixel>
 800dbd0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dbd4:	b29b      	uxth	r3, r3
 800dbd6:	3301      	adds	r3, #1
 800dbd8:	b29b      	uxth	r3, r3
 800dbda:	82fb      	strh	r3, [r7, #22]
 800dbdc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dbe0:	2b0d      	cmp	r3, #13
 800dbe2:	dde8      	ble.n	800dbb6 <DispStr8x14+0x3a>
 800dbe4:	4b0d      	ldr	r3, [pc, #52]	; (800dc1c <DispStr8x14+0xa0>)
 800dbe6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dbea:	b29b      	uxth	r3, r3
 800dbec:	3301      	adds	r3, #1
 800dbee:	b29b      	uxth	r3, r3
 800dbf0:	b21a      	sxth	r2, r3
 800dbf2:	4b0a      	ldr	r3, [pc, #40]	; (800dc1c <DispStr8x14+0xa0>)
 800dbf4:	801a      	strh	r2, [r3, #0]
 800dbf6:	e008      	b.n	800dc0a <DispStr8x14+0x8e>
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	1c5a      	adds	r2, r3, #1
 800dbfc:	607a      	str	r2, [r7, #4]
 800dbfe:	781a      	ldrb	r2, [r3, #0]
 800dc00:	7afb      	ldrb	r3, [r7, #11]
 800dc02:	4611      	mov	r1, r2
 800dc04:	4618      	mov	r0, r3
 800dc06:	f7ff ff29 	bl	800da5c <DispChar8x14>
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	781b      	ldrb	r3, [r3, #0]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d1f2      	bne.n	800dbf8 <DispStr8x14+0x7c>
 800dc12:	bf00      	nop
 800dc14:	bf00      	nop
 800dc16:	3718      	adds	r7, #24
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd80      	pop	{r7, pc}
 800dc1c:	2000078a 	.word	0x2000078a
 800dc20:	2000078c 	.word	0x2000078c
 800dc24:	200015cc 	.word	0x200015cc
 800dc28:	200015ce 	.word	0x200015ce

0800dc2c <SetColor>:
 800dc2c:	b480      	push	{r7}
 800dc2e:	b083      	sub	sp, #12
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	4603      	mov	r3, r0
 800dc34:	460a      	mov	r2, r1
 800dc36:	80fb      	strh	r3, [r7, #6]
 800dc38:	4613      	mov	r3, r2
 800dc3a:	80bb      	strh	r3, [r7, #4]
 800dc3c:	4a05      	ldr	r2, [pc, #20]	; (800dc54 <SetColor+0x28>)
 800dc3e:	88fb      	ldrh	r3, [r7, #6]
 800dc40:	8013      	strh	r3, [r2, #0]
 800dc42:	4a05      	ldr	r2, [pc, #20]	; (800dc58 <SetColor+0x2c>)
 800dc44:	88bb      	ldrh	r3, [r7, #4]
 800dc46:	8013      	strh	r3, [r2, #0]
 800dc48:	bf00      	nop
 800dc4a:	370c      	adds	r7, #12
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc52:	4770      	bx	lr
 800dc54:	200015ce 	.word	0x200015ce
 800dc58:	200015cc 	.word	0x200015cc

0800dc5c <DispStr>:
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b086      	sub	sp, #24
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	607b      	str	r3, [r7, #4]
 800dc64:	4603      	mov	r3, r0
 800dc66:	81fb      	strh	r3, [r7, #14]
 800dc68:	460b      	mov	r3, r1
 800dc6a:	81bb      	strh	r3, [r7, #12]
 800dc6c:	4613      	mov	r3, r2
 800dc6e:	72fb      	strb	r3, [r7, #11]
 800dc70:	4a5e      	ldr	r2, [pc, #376]	; (800ddec <DispStr+0x190>)
 800dc72:	89fb      	ldrh	r3, [r7, #14]
 800dc74:	8013      	strh	r3, [r2, #0]
 800dc76:	4a5e      	ldr	r2, [pc, #376]	; (800ddf0 <DispStr+0x194>)
 800dc78:	89bb      	ldrh	r3, [r7, #12]
 800dc7a:	8013      	strh	r3, [r2, #0]
 800dc7c:	4b5b      	ldr	r3, [pc, #364]	; (800ddec <DispStr+0x190>)
 800dc7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc82:	4a5b      	ldr	r2, [pc, #364]	; (800ddf0 <DispStr+0x194>)
 800dc84:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dc88:	4611      	mov	r1, r2
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f004 fa7e 	bl	801218c <LCD_Set_Posi>
 800dc90:	e0a1      	b.n	800ddd6 <DispStr+0x17a>
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	1c5a      	adds	r2, r3, #1
 800dc96:	607a      	str	r2, [r7, #4]
 800dc98:	781b      	ldrb	r3, [r3, #0]
 800dc9a:	747b      	strb	r3, [r7, #17]
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	82fb      	strh	r3, [r7, #22]
 800dca0:	e094      	b.n	800ddcc <DispStr+0x170>
 800dca2:	7afb      	ldrb	r3, [r7, #11]
 800dca4:	f003 0310 	and.w	r3, r3, #16
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d10e      	bne.n	800dcca <DispStr+0x6e>
 800dcac:	7c7b      	ldrb	r3, [r7, #17]
 800dcae:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800dcb2:	4613      	mov	r3, r2
 800dcb4:	005b      	lsls	r3, r3, #1
 800dcb6:	4413      	add	r3, r2
 800dcb8:	005b      	lsls	r3, r3, #1
 800dcba:	461a      	mov	r2, r3
 800dcbc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dcc0:	4413      	add	r3, r2
 800dcc2:	4a4c      	ldr	r2, [pc, #304]	; (800ddf4 <DispStr+0x198>)
 800dcc4:	5cd3      	ldrb	r3, [r2, r3]
 800dcc6:	827b      	strh	r3, [r7, #18]
 800dcc8:	e00d      	b.n	800dce6 <DispStr+0x8a>
 800dcca:	7c7b      	ldrb	r3, [r7, #17]
 800dccc:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800dcd0:	4613      	mov	r3, r2
 800dcd2:	005b      	lsls	r3, r3, #1
 800dcd4:	4413      	add	r3, r2
 800dcd6:	005b      	lsls	r3, r3, #1
 800dcd8:	461a      	mov	r2, r3
 800dcda:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dcde:	4413      	add	r3, r2
 800dce0:	4a45      	ldr	r2, [pc, #276]	; (800ddf8 <DispStr+0x19c>)
 800dce2:	5cd3      	ldrb	r3, [r2, r3]
 800dce4:	827b      	strh	r3, [r7, #18]
 800dce6:	7afb      	ldrb	r3, [r7, #11]
 800dce8:	f003 0320 	and.w	r3, r3, #32
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d00c      	beq.n	800dd0a <DispStr+0xae>
 800dcf0:	8afb      	ldrh	r3, [r7, #22]
 800dcf2:	f003 0301 	and.w	r3, r3, #1
 800dcf6:	b29b      	uxth	r3, r3
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d001      	beq.n	800dd00 <DispStr+0xa4>
 800dcfc:	4a3f      	ldr	r2, [pc, #252]	; (800ddfc <DispStr+0x1a0>)
 800dcfe:	e001      	b.n	800dd04 <DispStr+0xa8>
 800dd00:	f245 5255 	movw	r2, #21845	; 0x5555
 800dd04:	8a7b      	ldrh	r3, [r7, #18]
 800dd06:	4013      	ands	r3, r2
 800dd08:	827b      	strh	r3, [r7, #18]
 800dd0a:	4b38      	ldr	r3, [pc, #224]	; (800ddec <DispStr+0x190>)
 800dd0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd10:	4a37      	ldr	r2, [pc, #220]	; (800ddf0 <DispStr+0x194>)
 800dd12:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dd16:	4611      	mov	r1, r2
 800dd18:	4618      	mov	r0, r3
 800dd1a:	f004 fa37 	bl	801218c <LCD_Set_Posi>
 800dd1e:	7afb      	ldrb	r3, [r7, #11]
 800dd20:	f003 0301 	and.w	r3, r3, #1
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d002      	beq.n	800dd2e <DispStr+0xd2>
 800dd28:	4b35      	ldr	r3, [pc, #212]	; (800de00 <DispStr+0x1a4>)
 800dd2a:	881b      	ldrh	r3, [r3, #0]
 800dd2c:	e001      	b.n	800dd32 <DispStr+0xd6>
 800dd2e:	4b35      	ldr	r3, [pc, #212]	; (800de04 <DispStr+0x1a8>)
 800dd30:	881b      	ldrh	r3, [r3, #0]
 800dd32:	4618      	mov	r0, r3
 800dd34:	f004 fa78 	bl	8012228 <LCD_Set_Pixel>
 800dd38:	4b2c      	ldr	r3, [pc, #176]	; (800ddec <DispStr+0x190>)
 800dd3a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800dd3e:	4b2c      	ldr	r3, [pc, #176]	; (800ddf0 <DispStr+0x194>)
 800dd40:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd44:	b29b      	uxth	r3, r3
 800dd46:	3301      	adds	r3, #1
 800dd48:	b29b      	uxth	r3, r3
 800dd4a:	b21b      	sxth	r3, r3
 800dd4c:	4619      	mov	r1, r3
 800dd4e:	4610      	mov	r0, r2
 800dd50:	f004 fa1c 	bl	801218c <LCD_Set_Posi>
 800dd54:	2300      	movs	r3, #0
 800dd56:	82bb      	strh	r3, [r7, #20]
 800dd58:	e027      	b.n	800ddaa <DispStr+0x14e>
 800dd5a:	8a7b      	ldrh	r3, [r7, #18]
 800dd5c:	f003 0301 	and.w	r3, r3, #1
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d00d      	beq.n	800dd80 <DispStr+0x124>
 800dd64:	7afb      	ldrb	r3, [r7, #11]
 800dd66:	f003 0301 	and.w	r3, r3, #1
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d002      	beq.n	800dd74 <DispStr+0x118>
 800dd6e:	4b25      	ldr	r3, [pc, #148]	; (800de04 <DispStr+0x1a8>)
 800dd70:	881b      	ldrh	r3, [r3, #0]
 800dd72:	e001      	b.n	800dd78 <DispStr+0x11c>
 800dd74:	4b22      	ldr	r3, [pc, #136]	; (800de00 <DispStr+0x1a4>)
 800dd76:	881b      	ldrh	r3, [r3, #0]
 800dd78:	4618      	mov	r0, r3
 800dd7a:	f004 fa55 	bl	8012228 <LCD_Set_Pixel>
 800dd7e:	e00c      	b.n	800dd9a <DispStr+0x13e>
 800dd80:	7afb      	ldrb	r3, [r7, #11]
 800dd82:	f003 0301 	and.w	r3, r3, #1
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d002      	beq.n	800dd90 <DispStr+0x134>
 800dd8a:	4b1d      	ldr	r3, [pc, #116]	; (800de00 <DispStr+0x1a4>)
 800dd8c:	881b      	ldrh	r3, [r3, #0]
 800dd8e:	e001      	b.n	800dd94 <DispStr+0x138>
 800dd90:	4b1c      	ldr	r3, [pc, #112]	; (800de04 <DispStr+0x1a8>)
 800dd92:	881b      	ldrh	r3, [r3, #0]
 800dd94:	4618      	mov	r0, r3
 800dd96:	f004 fa47 	bl	8012228 <LCD_Set_Pixel>
 800dd9a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dd9e:	105b      	asrs	r3, r3, #1
 800dda0:	827b      	strh	r3, [r7, #18]
 800dda2:	8abb      	ldrh	r3, [r7, #20]
 800dda4:	3301      	adds	r3, #1
 800dda6:	b29b      	uxth	r3, r3
 800dda8:	82bb      	strh	r3, [r7, #20]
 800ddaa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ddae:	2b09      	cmp	r3, #9
 800ddb0:	ddd3      	ble.n	800dd5a <DispStr+0xfe>
 800ddb2:	4b0e      	ldr	r3, [pc, #56]	; (800ddec <DispStr+0x190>)
 800ddb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ddb8:	b29b      	uxth	r3, r3
 800ddba:	3301      	adds	r3, #1
 800ddbc:	b29b      	uxth	r3, r3
 800ddbe:	b21a      	sxth	r2, r3
 800ddc0:	4b0a      	ldr	r3, [pc, #40]	; (800ddec <DispStr+0x190>)
 800ddc2:	801a      	strh	r2, [r3, #0]
 800ddc4:	8afb      	ldrh	r3, [r7, #22]
 800ddc6:	3301      	adds	r3, #1
 800ddc8:	b29b      	uxth	r3, r3
 800ddca:	82fb      	strh	r3, [r7, #22]
 800ddcc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ddd0:	2b05      	cmp	r3, #5
 800ddd2:	f77f af66 	ble.w	800dca2 <DispStr+0x46>
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	781b      	ldrb	r3, [r3, #0]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	f47f af59 	bne.w	800dc92 <DispStr+0x36>
 800dde0:	bf00      	nop
 800dde2:	bf00      	nop
 800dde4:	3718      	adds	r7, #24
 800dde6:	46bd      	mov	sp, r7
 800dde8:	bd80      	pop	{r7, pc}
 800ddea:	bf00      	nop
 800ddec:	2000078a 	.word	0x2000078a
 800ddf0:	2000078c 	.word	0x2000078c
 800ddf4:	080016c4 	.word	0x080016c4
 800ddf8:	08001490 	.word	0x08001490
 800ddfc:	ffffaaaa 	.word	0xffffaaaa
 800de00:	200015cc 	.word	0x200015cc
 800de04:	200015ce 	.word	0x200015ce

0800de08 <Draw_Circle_D>:
 800de08:	b590      	push	{r4, r7, lr}
 800de0a:	b085      	sub	sp, #20
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	4604      	mov	r4, r0
 800de10:	4608      	mov	r0, r1
 800de12:	4611      	mov	r1, r2
 800de14:	461a      	mov	r2, r3
 800de16:	4623      	mov	r3, r4
 800de18:	71fb      	strb	r3, [r7, #7]
 800de1a:	4603      	mov	r3, r0
 800de1c:	80bb      	strh	r3, [r7, #4]
 800de1e:	460b      	mov	r3, r1
 800de20:	807b      	strh	r3, [r7, #2]
 800de22:	4613      	mov	r3, r2
 800de24:	803b      	strh	r3, [r7, #0]
 800de26:	8c3b      	ldrh	r3, [r7, #32]
 800de28:	005b      	lsls	r3, r3, #1
 800de2a:	b29a      	uxth	r2, r3
 800de2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de2e:	4413      	add	r3, r2
 800de30:	b29b      	uxth	r3, r3
 800de32:	3305      	adds	r3, #5
 800de34:	b29b      	uxth	r3, r3
 800de36:	84bb      	strh	r3, [r7, #36]	; 0x24
 800de38:	88ba      	ldrh	r2, [r7, #4]
 800de3a:	8c3b      	ldrh	r3, [r7, #32]
 800de3c:	1ad3      	subs	r3, r2, r3
 800de3e:	b29b      	uxth	r3, r3
 800de40:	80bb      	strh	r3, [r7, #4]
 800de42:	88bb      	ldrh	r3, [r7, #4]
 800de44:	817b      	strh	r3, [r7, #10]
 800de46:	887b      	ldrh	r3, [r7, #2]
 800de48:	3302      	adds	r3, #2
 800de4a:	b29b      	uxth	r3, r3
 800de4c:	813b      	strh	r3, [r7, #8]
 800de4e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800de52:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800de56:	4611      	mov	r1, r2
 800de58:	4618      	mov	r0, r3
 800de5a:	f004 f997 	bl	801218c <LCD_Set_Posi>
 800de5e:	2300      	movs	r3, #0
 800de60:	81bb      	strh	r3, [r7, #12]
 800de62:	e012      	b.n	800de8a <Draw_Circle_D+0x82>
 800de64:	79fb      	ldrb	r3, [r7, #7]
 800de66:	f003 0301 	and.w	r3, r3, #1
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d002      	beq.n	800de74 <Draw_Circle_D+0x6c>
 800de6e:	4bad      	ldr	r3, [pc, #692]	; (800e124 <Draw_Circle_D+0x31c>)
 800de70:	881b      	ldrh	r3, [r3, #0]
 800de72:	e001      	b.n	800de78 <Draw_Circle_D+0x70>
 800de74:	4bac      	ldr	r3, [pc, #688]	; (800e128 <Draw_Circle_D+0x320>)
 800de76:	881b      	ldrh	r3, [r3, #0]
 800de78:	4618      	mov	r0, r3
 800de7a:	f004 f9d5 	bl	8012228 <LCD_Set_Pixel>
 800de7e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800de82:	b29b      	uxth	r3, r3
 800de84:	3301      	adds	r3, #1
 800de86:	b29b      	uxth	r3, r3
 800de88:	81bb      	strh	r3, [r7, #12]
 800de8a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800de8e:	f9b7 3000 	ldrsh.w	r3, [r7]
 800de92:	3b04      	subs	r3, #4
 800de94:	429a      	cmp	r2, r3
 800de96:	dbe5      	blt.n	800de64 <Draw_Circle_D+0x5c>
 800de98:	88ba      	ldrh	r2, [r7, #4]
 800de9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de9c:	4413      	add	r3, r2
 800de9e:	b29b      	uxth	r3, r3
 800dea0:	817b      	strh	r3, [r7, #10]
 800dea2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800dea6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800deaa:	4611      	mov	r1, r2
 800deac:	4618      	mov	r0, r3
 800deae:	f004 f96d 	bl	801218c <LCD_Set_Posi>
 800deb2:	2300      	movs	r3, #0
 800deb4:	81bb      	strh	r3, [r7, #12]
 800deb6:	e012      	b.n	800dede <Draw_Circle_D+0xd6>
 800deb8:	79fb      	ldrb	r3, [r7, #7]
 800deba:	f003 0301 	and.w	r3, r3, #1
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d002      	beq.n	800dec8 <Draw_Circle_D+0xc0>
 800dec2:	4b98      	ldr	r3, [pc, #608]	; (800e124 <Draw_Circle_D+0x31c>)
 800dec4:	881b      	ldrh	r3, [r3, #0]
 800dec6:	e001      	b.n	800decc <Draw_Circle_D+0xc4>
 800dec8:	4b97      	ldr	r3, [pc, #604]	; (800e128 <Draw_Circle_D+0x320>)
 800deca:	881b      	ldrh	r3, [r3, #0]
 800decc:	4618      	mov	r0, r3
 800dece:	f004 f9ab 	bl	8012228 <LCD_Set_Pixel>
 800ded2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ded6:	b29b      	uxth	r3, r3
 800ded8:	3301      	adds	r3, #1
 800deda:	b29b      	uxth	r3, r3
 800dedc:	81bb      	strh	r3, [r7, #12]
 800dede:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800dee2:	f9b7 3000 	ldrsh.w	r3, [r7]
 800dee6:	3b04      	subs	r3, #4
 800dee8:	429a      	cmp	r2, r3
 800deea:	dbe5      	blt.n	800deb8 <Draw_Circle_D+0xb0>
 800deec:	88bb      	ldrh	r3, [r7, #4]
 800deee:	3301      	adds	r3, #1
 800def0:	b29b      	uxth	r3, r3
 800def2:	817b      	strh	r3, [r7, #10]
 800def4:	887b      	ldrh	r3, [r7, #2]
 800def6:	3301      	adds	r3, #1
 800def8:	b29b      	uxth	r3, r3
 800defa:	813b      	strh	r3, [r7, #8]
 800defc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800df00:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800df04:	4611      	mov	r1, r2
 800df06:	4618      	mov	r0, r3
 800df08:	f004 f940 	bl	801218c <LCD_Set_Posi>
 800df0c:	2300      	movs	r3, #0
 800df0e:	81bb      	strh	r3, [r7, #12]
 800df10:	e012      	b.n	800df38 <Draw_Circle_D+0x130>
 800df12:	79fb      	ldrb	r3, [r7, #7]
 800df14:	f003 0301 	and.w	r3, r3, #1
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d002      	beq.n	800df22 <Draw_Circle_D+0x11a>
 800df1c:	4b81      	ldr	r3, [pc, #516]	; (800e124 <Draw_Circle_D+0x31c>)
 800df1e:	881b      	ldrh	r3, [r3, #0]
 800df20:	e001      	b.n	800df26 <Draw_Circle_D+0x11e>
 800df22:	4b81      	ldr	r3, [pc, #516]	; (800e128 <Draw_Circle_D+0x320>)
 800df24:	881b      	ldrh	r3, [r3, #0]
 800df26:	4618      	mov	r0, r3
 800df28:	f004 f97e 	bl	8012228 <LCD_Set_Pixel>
 800df2c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800df30:	b29b      	uxth	r3, r3
 800df32:	3301      	adds	r3, #1
 800df34:	b29b      	uxth	r3, r3
 800df36:	81bb      	strh	r3, [r7, #12]
 800df38:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800df3c:	f9b7 3000 	ldrsh.w	r3, [r7]
 800df40:	3b02      	subs	r3, #2
 800df42:	429a      	cmp	r2, r3
 800df44:	dbe5      	blt.n	800df12 <Draw_Circle_D+0x10a>
 800df46:	88ba      	ldrh	r2, [r7, #4]
 800df48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df4a:	4413      	add	r3, r2
 800df4c:	b29b      	uxth	r3, r3
 800df4e:	3b01      	subs	r3, #1
 800df50:	b29b      	uxth	r3, r3
 800df52:	817b      	strh	r3, [r7, #10]
 800df54:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800df58:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800df5c:	4611      	mov	r1, r2
 800df5e:	4618      	mov	r0, r3
 800df60:	f004 f914 	bl	801218c <LCD_Set_Posi>
 800df64:	2300      	movs	r3, #0
 800df66:	81bb      	strh	r3, [r7, #12]
 800df68:	e012      	b.n	800df90 <Draw_Circle_D+0x188>
 800df6a:	79fb      	ldrb	r3, [r7, #7]
 800df6c:	f003 0301 	and.w	r3, r3, #1
 800df70:	2b00      	cmp	r3, #0
 800df72:	d002      	beq.n	800df7a <Draw_Circle_D+0x172>
 800df74:	4b6b      	ldr	r3, [pc, #428]	; (800e124 <Draw_Circle_D+0x31c>)
 800df76:	881b      	ldrh	r3, [r3, #0]
 800df78:	e001      	b.n	800df7e <Draw_Circle_D+0x176>
 800df7a:	4b6b      	ldr	r3, [pc, #428]	; (800e128 <Draw_Circle_D+0x320>)
 800df7c:	881b      	ldrh	r3, [r3, #0]
 800df7e:	4618      	mov	r0, r3
 800df80:	f004 f952 	bl	8012228 <LCD_Set_Pixel>
 800df84:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800df88:	b29b      	uxth	r3, r3
 800df8a:	3301      	adds	r3, #1
 800df8c:	b29b      	uxth	r3, r3
 800df8e:	81bb      	strh	r3, [r7, #12]
 800df90:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800df94:	f9b7 3000 	ldrsh.w	r3, [r7]
 800df98:	3b02      	subs	r3, #2
 800df9a:	429a      	cmp	r2, r3
 800df9c:	dbe5      	blt.n	800df6a <Draw_Circle_D+0x162>
 800df9e:	88bb      	ldrh	r3, [r7, #4]
 800dfa0:	3302      	adds	r3, #2
 800dfa2:	b29b      	uxth	r3, r3
 800dfa4:	817b      	strh	r3, [r7, #10]
 800dfa6:	887b      	ldrh	r3, [r7, #2]
 800dfa8:	813b      	strh	r3, [r7, #8]
 800dfaa:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800dfae:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800dfb2:	4611      	mov	r1, r2
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f004 f8e9 	bl	801218c <LCD_Set_Posi>
 800dfba:	2300      	movs	r3, #0
 800dfbc:	81bb      	strh	r3, [r7, #12]
 800dfbe:	e012      	b.n	800dfe6 <Draw_Circle_D+0x1de>
 800dfc0:	79fb      	ldrb	r3, [r7, #7]
 800dfc2:	f003 0301 	and.w	r3, r3, #1
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d002      	beq.n	800dfd0 <Draw_Circle_D+0x1c8>
 800dfca:	4b56      	ldr	r3, [pc, #344]	; (800e124 <Draw_Circle_D+0x31c>)
 800dfcc:	881b      	ldrh	r3, [r3, #0]
 800dfce:	e001      	b.n	800dfd4 <Draw_Circle_D+0x1cc>
 800dfd0:	4b55      	ldr	r3, [pc, #340]	; (800e128 <Draw_Circle_D+0x320>)
 800dfd2:	881b      	ldrh	r3, [r3, #0]
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f004 f927 	bl	8012228 <LCD_Set_Pixel>
 800dfda:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dfde:	b29b      	uxth	r3, r3
 800dfe0:	3301      	adds	r3, #1
 800dfe2:	b29b      	uxth	r3, r3
 800dfe4:	81bb      	strh	r3, [r7, #12]
 800dfe6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800dfea:	f9b7 3000 	ldrsh.w	r3, [r7]
 800dfee:	429a      	cmp	r2, r3
 800dff0:	dbe6      	blt.n	800dfc0 <Draw_Circle_D+0x1b8>
 800dff2:	88ba      	ldrh	r2, [r7, #4]
 800dff4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dff6:	4413      	add	r3, r2
 800dff8:	b29b      	uxth	r3, r3
 800dffa:	3b02      	subs	r3, #2
 800dffc:	b29b      	uxth	r3, r3
 800dffe:	817b      	strh	r3, [r7, #10]
 800e000:	887b      	ldrh	r3, [r7, #2]
 800e002:	813b      	strh	r3, [r7, #8]
 800e004:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e008:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e00c:	4611      	mov	r1, r2
 800e00e:	4618      	mov	r0, r3
 800e010:	f004 f8bc 	bl	801218c <LCD_Set_Posi>
 800e014:	2300      	movs	r3, #0
 800e016:	81bb      	strh	r3, [r7, #12]
 800e018:	e012      	b.n	800e040 <Draw_Circle_D+0x238>
 800e01a:	79fb      	ldrb	r3, [r7, #7]
 800e01c:	f003 0301 	and.w	r3, r3, #1
 800e020:	2b00      	cmp	r3, #0
 800e022:	d002      	beq.n	800e02a <Draw_Circle_D+0x222>
 800e024:	4b3f      	ldr	r3, [pc, #252]	; (800e124 <Draw_Circle_D+0x31c>)
 800e026:	881b      	ldrh	r3, [r3, #0]
 800e028:	e001      	b.n	800e02e <Draw_Circle_D+0x226>
 800e02a:	4b3f      	ldr	r3, [pc, #252]	; (800e128 <Draw_Circle_D+0x320>)
 800e02c:	881b      	ldrh	r3, [r3, #0]
 800e02e:	4618      	mov	r0, r3
 800e030:	f004 f8fa 	bl	8012228 <LCD_Set_Pixel>
 800e034:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e038:	b29b      	uxth	r3, r3
 800e03a:	3301      	adds	r3, #1
 800e03c:	b29b      	uxth	r3, r3
 800e03e:	81bb      	strh	r3, [r7, #12]
 800e040:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e044:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e048:	429a      	cmp	r2, r3
 800e04a:	dbe6      	blt.n	800e01a <Draw_Circle_D+0x212>
 800e04c:	887b      	ldrh	r3, [r7, #2]
 800e04e:	813b      	strh	r3, [r7, #8]
 800e050:	2300      	movs	r3, #0
 800e052:	81fb      	strh	r3, [r7, #14]
 800e054:	e05a      	b.n	800e10c <Draw_Circle_D+0x304>
 800e056:	88ba      	ldrh	r2, [r7, #4]
 800e058:	89fb      	ldrh	r3, [r7, #14]
 800e05a:	4413      	add	r3, r2
 800e05c:	b29b      	uxth	r3, r3
 800e05e:	3303      	adds	r3, #3
 800e060:	b29b      	uxth	r3, r3
 800e062:	b21b      	sxth	r3, r3
 800e064:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e068:	4611      	mov	r1, r2
 800e06a:	4618      	mov	r0, r3
 800e06c:	f004 f88e 	bl	801218c <LCD_Set_Posi>
 800e070:	2300      	movs	r3, #0
 800e072:	81bb      	strh	r3, [r7, #12]
 800e074:	e012      	b.n	800e09c <Draw_Circle_D+0x294>
 800e076:	79fb      	ldrb	r3, [r7, #7]
 800e078:	f003 0301 	and.w	r3, r3, #1
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d002      	beq.n	800e086 <Draw_Circle_D+0x27e>
 800e080:	4b28      	ldr	r3, [pc, #160]	; (800e124 <Draw_Circle_D+0x31c>)
 800e082:	881b      	ldrh	r3, [r3, #0]
 800e084:	e001      	b.n	800e08a <Draw_Circle_D+0x282>
 800e086:	4b28      	ldr	r3, [pc, #160]	; (800e128 <Draw_Circle_D+0x320>)
 800e088:	881b      	ldrh	r3, [r3, #0]
 800e08a:	4618      	mov	r0, r3
 800e08c:	f004 f8cc 	bl	8012228 <LCD_Set_Pixel>
 800e090:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e094:	b29b      	uxth	r3, r3
 800e096:	3301      	adds	r3, #1
 800e098:	b29b      	uxth	r3, r3
 800e09a:	81bb      	strh	r3, [r7, #12]
 800e09c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e0a0:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e0a4:	429a      	cmp	r2, r3
 800e0a6:	dbe6      	blt.n	800e076 <Draw_Circle_D+0x26e>
 800e0a8:	88ba      	ldrh	r2, [r7, #4]
 800e0aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e0ac:	4413      	add	r3, r2
 800e0ae:	b29a      	uxth	r2, r3
 800e0b0:	89fb      	ldrh	r3, [r7, #14]
 800e0b2:	1ad3      	subs	r3, r2, r3
 800e0b4:	b29b      	uxth	r3, r3
 800e0b6:	3b03      	subs	r3, #3
 800e0b8:	b29b      	uxth	r3, r3
 800e0ba:	b21b      	sxth	r3, r3
 800e0bc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e0c0:	4611      	mov	r1, r2
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	f004 f862 	bl	801218c <LCD_Set_Posi>
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	81bb      	strh	r3, [r7, #12]
 800e0cc:	e012      	b.n	800e0f4 <Draw_Circle_D+0x2ec>
 800e0ce:	79fb      	ldrb	r3, [r7, #7]
 800e0d0:	f003 0301 	and.w	r3, r3, #1
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d002      	beq.n	800e0de <Draw_Circle_D+0x2d6>
 800e0d8:	4b12      	ldr	r3, [pc, #72]	; (800e124 <Draw_Circle_D+0x31c>)
 800e0da:	881b      	ldrh	r3, [r3, #0]
 800e0dc:	e001      	b.n	800e0e2 <Draw_Circle_D+0x2da>
 800e0de:	4b12      	ldr	r3, [pc, #72]	; (800e128 <Draw_Circle_D+0x320>)
 800e0e0:	881b      	ldrh	r3, [r3, #0]
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f004 f8a0 	bl	8012228 <LCD_Set_Pixel>
 800e0e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e0ec:	b29b      	uxth	r3, r3
 800e0ee:	3301      	adds	r3, #1
 800e0f0:	b29b      	uxth	r3, r3
 800e0f2:	81bb      	strh	r3, [r7, #12]
 800e0f4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e0f8:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e0fc:	429a      	cmp	r2, r3
 800e0fe:	dbe6      	blt.n	800e0ce <Draw_Circle_D+0x2c6>
 800e100:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e104:	b29b      	uxth	r3, r3
 800e106:	3301      	adds	r3, #1
 800e108:	b29b      	uxth	r3, r3
 800e10a:	81fb      	strh	r3, [r7, #14]
 800e10c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800e110:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e114:	429a      	cmp	r2, r3
 800e116:	db9e      	blt.n	800e056 <Draw_Circle_D+0x24e>
 800e118:	bf00      	nop
 800e11a:	bf00      	nop
 800e11c:	3714      	adds	r7, #20
 800e11e:	46bd      	mov	sp, r7
 800e120:	bd90      	pop	{r4, r7, pc}
 800e122:	bf00      	nop
 800e124:	200015cc 	.word	0x200015cc
 800e128:	200015ce 	.word	0x200015ce

0800e12c <DispStr10x14>:
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b084      	sub	sp, #16
 800e130:	af00      	add	r7, sp, #0
 800e132:	607b      	str	r3, [r7, #4]
 800e134:	4603      	mov	r3, r0
 800e136:	81fb      	strh	r3, [r7, #14]
 800e138:	460b      	mov	r3, r1
 800e13a:	81bb      	strh	r3, [r7, #12]
 800e13c:	4613      	mov	r3, r2
 800e13e:	72fb      	strb	r3, [r7, #11]
 800e140:	4a0c      	ldr	r2, [pc, #48]	; (800e174 <DispStr10x14+0x48>)
 800e142:	89fb      	ldrh	r3, [r7, #14]
 800e144:	8013      	strh	r3, [r2, #0]
 800e146:	4a0c      	ldr	r2, [pc, #48]	; (800e178 <DispStr10x14+0x4c>)
 800e148:	89bb      	ldrh	r3, [r7, #12]
 800e14a:	8013      	strh	r3, [r2, #0]
 800e14c:	e008      	b.n	800e160 <DispStr10x14+0x34>
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	1c5a      	adds	r2, r3, #1
 800e152:	607a      	str	r2, [r7, #4]
 800e154:	781a      	ldrb	r2, [r3, #0]
 800e156:	7afb      	ldrb	r3, [r7, #11]
 800e158:	4611      	mov	r1, r2
 800e15a:	4618      	mov	r0, r3
 800e15c:	f000 f80e 	bl	800e17c <DispChar10x14>
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	781b      	ldrb	r3, [r3, #0]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d1f2      	bne.n	800e14e <DispStr10x14+0x22>
 800e168:	bf00      	nop
 800e16a:	bf00      	nop
 800e16c:	3710      	adds	r7, #16
 800e16e:	46bd      	mov	sp, r7
 800e170:	bd80      	pop	{r7, pc}
 800e172:	bf00      	nop
 800e174:	2000078a 	.word	0x2000078a
 800e178:	2000078c 	.word	0x2000078c

0800e17c <DispChar10x14>:
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b084      	sub	sp, #16
 800e180:	af00      	add	r7, sp, #0
 800e182:	4603      	mov	r3, r0
 800e184:	460a      	mov	r2, r1
 800e186:	71fb      	strb	r3, [r7, #7]
 800e188:	4613      	mov	r3, r2
 800e18a:	71bb      	strb	r3, [r7, #6]
 800e18c:	2300      	movs	r3, #0
 800e18e:	81fb      	strh	r3, [r7, #14]
 800e190:	e0fe      	b.n	800e390 <DispChar10x14+0x214>
 800e192:	79fb      	ldrb	r3, [r7, #7]
 800e194:	f003 0310 	and.w	r3, r3, #16
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d00f      	beq.n	800e1bc <DispChar10x14+0x40>
 800e19c:	79bb      	ldrb	r3, [r7, #6]
 800e19e:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 800e1a2:	4613      	mov	r3, r2
 800e1a4:	009b      	lsls	r3, r3, #2
 800e1a6:	4413      	add	r3, r2
 800e1a8:	005b      	lsls	r3, r3, #1
 800e1aa:	461a      	mov	r2, r3
 800e1ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e1b0:	4413      	add	r3, r2
 800e1b2:	4a7c      	ldr	r2, [pc, #496]	; (800e3a4 <DispChar10x14+0x228>)
 800e1b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e1b8:	817b      	strh	r3, [r7, #10]
 800e1ba:	e00e      	b.n	800e1da <DispChar10x14+0x5e>
 800e1bc:	79bb      	ldrb	r3, [r7, #6]
 800e1be:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800e1c2:	4613      	mov	r3, r2
 800e1c4:	009b      	lsls	r3, r3, #2
 800e1c6:	4413      	add	r3, r2
 800e1c8:	005b      	lsls	r3, r3, #1
 800e1ca:	461a      	mov	r2, r3
 800e1cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e1d0:	4413      	add	r3, r2
 800e1d2:	4a75      	ldr	r2, [pc, #468]	; (800e3a8 <DispChar10x14+0x22c>)
 800e1d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e1d8:	817b      	strh	r3, [r7, #10]
 800e1da:	79fb      	ldrb	r3, [r7, #7]
 800e1dc:	f003 0320 	and.w	r3, r3, #32
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d00c      	beq.n	800e1fe <DispChar10x14+0x82>
 800e1e4:	89fb      	ldrh	r3, [r7, #14]
 800e1e6:	f003 0301 	and.w	r3, r3, #1
 800e1ea:	b29b      	uxth	r3, r3
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d001      	beq.n	800e1f4 <DispChar10x14+0x78>
 800e1f0:	4a6e      	ldr	r2, [pc, #440]	; (800e3ac <DispChar10x14+0x230>)
 800e1f2:	e001      	b.n	800e1f8 <DispChar10x14+0x7c>
 800e1f4:	f245 5255 	movw	r2, #21845	; 0x5555
 800e1f8:	897b      	ldrh	r3, [r7, #10]
 800e1fa:	4013      	ands	r3, r2
 800e1fc:	817b      	strh	r3, [r7, #10]
 800e1fe:	4b6c      	ldr	r3, [pc, #432]	; (800e3b0 <DispChar10x14+0x234>)
 800e200:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e204:	4a6b      	ldr	r2, [pc, #428]	; (800e3b4 <DispChar10x14+0x238>)
 800e206:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e20a:	4611      	mov	r1, r2
 800e20c:	4618      	mov	r0, r3
 800e20e:	f003 ffbd 	bl	801218c <LCD_Set_Posi>
 800e212:	79fb      	ldrb	r3, [r7, #7]
 800e214:	f003 0310 	and.w	r3, r3, #16
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d038      	beq.n	800e28e <DispChar10x14+0x112>
 800e21c:	79bb      	ldrb	r3, [r7, #6]
 800e21e:	2b43      	cmp	r3, #67	; 0x43
 800e220:	d005      	beq.n	800e22e <DispChar10x14+0xb2>
 800e222:	79bb      	ldrb	r3, [r7, #6]
 800e224:	2b44      	cmp	r3, #68	; 0x44
 800e226:	d002      	beq.n	800e22e <DispChar10x14+0xb2>
 800e228:	79bb      	ldrb	r3, [r7, #6]
 800e22a:	2b45      	cmp	r3, #69	; 0x45
 800e22c:	d12f      	bne.n	800e28e <DispChar10x14+0x112>
 800e22e:	2300      	movs	r3, #0
 800e230:	81bb      	strh	r3, [r7, #12]
 800e232:	e027      	b.n	800e284 <DispChar10x14+0x108>
 800e234:	897b      	ldrh	r3, [r7, #10]
 800e236:	f003 0304 	and.w	r3, r3, #4
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d00d      	beq.n	800e25a <DispChar10x14+0xde>
 800e23e:	79fb      	ldrb	r3, [r7, #7]
 800e240:	f003 0301 	and.w	r3, r3, #1
 800e244:	2b00      	cmp	r3, #0
 800e246:	d002      	beq.n	800e24e <DispChar10x14+0xd2>
 800e248:	4b5b      	ldr	r3, [pc, #364]	; (800e3b8 <DispChar10x14+0x23c>)
 800e24a:	881b      	ldrh	r3, [r3, #0]
 800e24c:	e001      	b.n	800e252 <DispChar10x14+0xd6>
 800e24e:	4b5b      	ldr	r3, [pc, #364]	; (800e3bc <DispChar10x14+0x240>)
 800e250:	881b      	ldrh	r3, [r3, #0]
 800e252:	4618      	mov	r0, r3
 800e254:	f003 ffe8 	bl	8012228 <LCD_Set_Pixel>
 800e258:	e00c      	b.n	800e274 <DispChar10x14+0xf8>
 800e25a:	79fb      	ldrb	r3, [r7, #7]
 800e25c:	f003 0301 	and.w	r3, r3, #1
 800e260:	2b00      	cmp	r3, #0
 800e262:	d002      	beq.n	800e26a <DispChar10x14+0xee>
 800e264:	4b55      	ldr	r3, [pc, #340]	; (800e3bc <DispChar10x14+0x240>)
 800e266:	881b      	ldrh	r3, [r3, #0]
 800e268:	e001      	b.n	800e26e <DispChar10x14+0xf2>
 800e26a:	4b53      	ldr	r3, [pc, #332]	; (800e3b8 <DispChar10x14+0x23c>)
 800e26c:	881b      	ldrh	r3, [r3, #0]
 800e26e:	4618      	mov	r0, r3
 800e270:	f003 ffda 	bl	8012228 <LCD_Set_Pixel>
 800e274:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e278:	105b      	asrs	r3, r3, #1
 800e27a:	817b      	strh	r3, [r7, #10]
 800e27c:	89bb      	ldrh	r3, [r7, #12]
 800e27e:	3301      	adds	r3, #1
 800e280:	b29b      	uxth	r3, r3
 800e282:	81bb      	strh	r3, [r7, #12]
 800e284:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e288:	2b0a      	cmp	r3, #10
 800e28a:	ddd3      	ble.n	800e234 <DispChar10x14+0xb8>
 800e28c:	e073      	b.n	800e376 <DispChar10x14+0x1fa>
 800e28e:	79fb      	ldrb	r3, [r7, #7]
 800e290:	f003 0310 	and.w	r3, r3, #16
 800e294:	2b00      	cmp	r3, #0
 800e296:	d03f      	beq.n	800e318 <DispChar10x14+0x19c>
 800e298:	79bb      	ldrb	r3, [r7, #6]
 800e29a:	2b4c      	cmp	r3, #76	; 0x4c
 800e29c:	d002      	beq.n	800e2a4 <DispChar10x14+0x128>
 800e29e:	79bb      	ldrb	r3, [r7, #6]
 800e2a0:	2b48      	cmp	r3, #72	; 0x48
 800e2a2:	d139      	bne.n	800e318 <DispChar10x14+0x19c>
 800e2a4:	4b42      	ldr	r3, [pc, #264]	; (800e3b0 <DispChar10x14+0x234>)
 800e2a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e2aa:	4a42      	ldr	r2, [pc, #264]	; (800e3b4 <DispChar10x14+0x238>)
 800e2ac:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e2b0:	4611      	mov	r1, r2
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f003 ff6a 	bl	801218c <LCD_Set_Posi>
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	81bb      	strh	r3, [r7, #12]
 800e2bc:	e027      	b.n	800e30e <DispChar10x14+0x192>
 800e2be:	897b      	ldrh	r3, [r7, #10]
 800e2c0:	f003 0304 	and.w	r3, r3, #4
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d00d      	beq.n	800e2e4 <DispChar10x14+0x168>
 800e2c8:	79fb      	ldrb	r3, [r7, #7]
 800e2ca:	f003 0301 	and.w	r3, r3, #1
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d002      	beq.n	800e2d8 <DispChar10x14+0x15c>
 800e2d2:	4b39      	ldr	r3, [pc, #228]	; (800e3b8 <DispChar10x14+0x23c>)
 800e2d4:	881b      	ldrh	r3, [r3, #0]
 800e2d6:	e001      	b.n	800e2dc <DispChar10x14+0x160>
 800e2d8:	4b38      	ldr	r3, [pc, #224]	; (800e3bc <DispChar10x14+0x240>)
 800e2da:	881b      	ldrh	r3, [r3, #0]
 800e2dc:	4618      	mov	r0, r3
 800e2de:	f003 ffa3 	bl	8012228 <LCD_Set_Pixel>
 800e2e2:	e00c      	b.n	800e2fe <DispChar10x14+0x182>
 800e2e4:	79fb      	ldrb	r3, [r7, #7]
 800e2e6:	f003 0301 	and.w	r3, r3, #1
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d002      	beq.n	800e2f4 <DispChar10x14+0x178>
 800e2ee:	4b33      	ldr	r3, [pc, #204]	; (800e3bc <DispChar10x14+0x240>)
 800e2f0:	881b      	ldrh	r3, [r3, #0]
 800e2f2:	e001      	b.n	800e2f8 <DispChar10x14+0x17c>
 800e2f4:	4b30      	ldr	r3, [pc, #192]	; (800e3b8 <DispChar10x14+0x23c>)
 800e2f6:	881b      	ldrh	r3, [r3, #0]
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	f003 ff95 	bl	8012228 <LCD_Set_Pixel>
 800e2fe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e302:	105b      	asrs	r3, r3, #1
 800e304:	817b      	strh	r3, [r7, #10]
 800e306:	89bb      	ldrh	r3, [r7, #12]
 800e308:	3301      	adds	r3, #1
 800e30a:	b29b      	uxth	r3, r3
 800e30c:	81bb      	strh	r3, [r7, #12]
 800e30e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e312:	2b0a      	cmp	r3, #10
 800e314:	ddd3      	ble.n	800e2be <DispChar10x14+0x142>
 800e316:	e02e      	b.n	800e376 <DispChar10x14+0x1fa>
 800e318:	2300      	movs	r3, #0
 800e31a:	81bb      	strh	r3, [r7, #12]
 800e31c:	e027      	b.n	800e36e <DispChar10x14+0x1f2>
 800e31e:	897b      	ldrh	r3, [r7, #10]
 800e320:	f003 0304 	and.w	r3, r3, #4
 800e324:	2b00      	cmp	r3, #0
 800e326:	d00d      	beq.n	800e344 <DispChar10x14+0x1c8>
 800e328:	79fb      	ldrb	r3, [r7, #7]
 800e32a:	f003 0301 	and.w	r3, r3, #1
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d002      	beq.n	800e338 <DispChar10x14+0x1bc>
 800e332:	4b21      	ldr	r3, [pc, #132]	; (800e3b8 <DispChar10x14+0x23c>)
 800e334:	881b      	ldrh	r3, [r3, #0]
 800e336:	e001      	b.n	800e33c <DispChar10x14+0x1c0>
 800e338:	4b20      	ldr	r3, [pc, #128]	; (800e3bc <DispChar10x14+0x240>)
 800e33a:	881b      	ldrh	r3, [r3, #0]
 800e33c:	4618      	mov	r0, r3
 800e33e:	f003 ff73 	bl	8012228 <LCD_Set_Pixel>
 800e342:	e00c      	b.n	800e35e <DispChar10x14+0x1e2>
 800e344:	79fb      	ldrb	r3, [r7, #7]
 800e346:	f003 0301 	and.w	r3, r3, #1
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d002      	beq.n	800e354 <DispChar10x14+0x1d8>
 800e34e:	4b1b      	ldr	r3, [pc, #108]	; (800e3bc <DispChar10x14+0x240>)
 800e350:	881b      	ldrh	r3, [r3, #0]
 800e352:	e001      	b.n	800e358 <DispChar10x14+0x1dc>
 800e354:	4b18      	ldr	r3, [pc, #96]	; (800e3b8 <DispChar10x14+0x23c>)
 800e356:	881b      	ldrh	r3, [r3, #0]
 800e358:	4618      	mov	r0, r3
 800e35a:	f003 ff65 	bl	8012228 <LCD_Set_Pixel>
 800e35e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e362:	105b      	asrs	r3, r3, #1
 800e364:	817b      	strh	r3, [r7, #10]
 800e366:	89bb      	ldrh	r3, [r7, #12]
 800e368:	3301      	adds	r3, #1
 800e36a:	b29b      	uxth	r3, r3
 800e36c:	81bb      	strh	r3, [r7, #12]
 800e36e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e372:	2b0d      	cmp	r3, #13
 800e374:	ddd3      	ble.n	800e31e <DispChar10x14+0x1a2>
 800e376:	4b0e      	ldr	r3, [pc, #56]	; (800e3b0 <DispChar10x14+0x234>)
 800e378:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e37c:	b29b      	uxth	r3, r3
 800e37e:	3301      	adds	r3, #1
 800e380:	b29b      	uxth	r3, r3
 800e382:	b21a      	sxth	r2, r3
 800e384:	4b0a      	ldr	r3, [pc, #40]	; (800e3b0 <DispChar10x14+0x234>)
 800e386:	801a      	strh	r2, [r3, #0]
 800e388:	89fb      	ldrh	r3, [r7, #14]
 800e38a:	3301      	adds	r3, #1
 800e38c:	b29b      	uxth	r3, r3
 800e38e:	81fb      	strh	r3, [r7, #14]
 800e390:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e394:	2b09      	cmp	r3, #9
 800e396:	f77f aefc 	ble.w	800e192 <DispChar10x14+0x16>
 800e39a:	bf00      	nop
 800e39c:	bf00      	nop
 800e39e:	3710      	adds	r7, #16
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}
 800e3a4:	080018f8 	.word	0x080018f8
 800e3a8:	08001998 	.word	0x08001998
 800e3ac:	ffffaaaa 	.word	0xffffaaaa
 800e3b0:	2000078a 	.word	0x2000078a
 800e3b4:	2000078c 	.word	0x2000078c
 800e3b8:	200015ce 	.word	0x200015ce
 800e3bc:	200015cc 	.word	0x200015cc

0800e3c0 <NotePixel>:
 800e3c0:	b480      	push	{r7}
 800e3c2:	b085      	sub	sp, #20
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	71fb      	strb	r3, [r7, #7]
 800e3ca:	4b42      	ldr	r3, [pc, #264]	; (800e4d4 <NotePixel+0x114>)
 800e3cc:	60fb      	str	r3, [r7, #12]
 800e3ce:	4b42      	ldr	r3, [pc, #264]	; (800e4d8 <NotePixel+0x118>)
 800e3d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e3d4:	4a41      	ldr	r2, [pc, #260]	; (800e4dc <NotePixel+0x11c>)
 800e3d6:	f9b2 2046 	ldrsh.w	r2, [r2, #70]	; 0x46
 800e3da:	fb93 f1f2 	sdiv	r1, r3, r2
 800e3de:	fb02 f201 	mul.w	r2, r2, r1
 800e3e2:	1a9b      	subs	r3, r3, r2
 800e3e4:	b21a      	sxth	r2, r3
 800e3e6:	4b3c      	ldr	r3, [pc, #240]	; (800e4d8 <NotePixel+0x118>)
 800e3e8:	801a      	strh	r2, [r3, #0]
 800e3ea:	4b3d      	ldr	r3, [pc, #244]	; (800e4e0 <NotePixel+0x120>)
 800e3ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e3f0:	4a3a      	ldr	r2, [pc, #232]	; (800e4dc <NotePixel+0x11c>)
 800e3f2:	f9b2 204a 	ldrsh.w	r2, [r2, #74]	; 0x4a
 800e3f6:	fb93 f1f2 	sdiv	r1, r3, r2
 800e3fa:	fb02 f201 	mul.w	r2, r2, r1
 800e3fe:	1a9b      	subs	r3, r3, r2
 800e400:	b21a      	sxth	r2, r3
 800e402:	4b37      	ldr	r3, [pc, #220]	; (800e4e0 <NotePixel+0x120>)
 800e404:	801a      	strh	r2, [r3, #0]
 800e406:	4b35      	ldr	r3, [pc, #212]	; (800e4dc <NotePixel+0x11c>)
 800e408:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	da00      	bge.n	800e412 <NotePixel+0x52>
 800e410:	331f      	adds	r3, #31
 800e412:	115b      	asrs	r3, r3, #5
 800e414:	b21b      	sxth	r3, r3
 800e416:	b29a      	uxth	r2, r3
 800e418:	4b2f      	ldr	r3, [pc, #188]	; (800e4d8 <NotePixel+0x118>)
 800e41a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e41e:	b29b      	uxth	r3, r3
 800e420:	fb12 f303 	smulbb	r3, r2, r3
 800e424:	b29a      	uxth	r2, r3
 800e426:	4b2e      	ldr	r3, [pc, #184]	; (800e4e0 <NotePixel+0x120>)
 800e428:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	da00      	bge.n	800e432 <NotePixel+0x72>
 800e430:	330f      	adds	r3, #15
 800e432:	111b      	asrs	r3, r3, #4
 800e434:	b21b      	sxth	r3, r3
 800e436:	b29b      	uxth	r3, r3
 800e438:	4413      	add	r3, r2
 800e43a:	b29b      	uxth	r3, r3
 800e43c:	817b      	strh	r3, [r7, #10]
 800e43e:	4b28      	ldr	r3, [pc, #160]	; (800e4e0 <NotePixel+0x120>)
 800e440:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e444:	425a      	negs	r2, r3
 800e446:	f003 030f 	and.w	r3, r3, #15
 800e44a:	f002 020f 	and.w	r2, r2, #15
 800e44e:	bf58      	it	pl
 800e450:	4253      	negpl	r3, r2
 800e452:	813b      	strh	r3, [r7, #8]
 800e454:	79fb      	ldrb	r3, [r7, #7]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d015      	beq.n	800e486 <NotePixel+0xc6>
 800e45a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e45e:	005b      	lsls	r3, r3, #1
 800e460:	68fa      	ldr	r2, [r7, #12]
 800e462:	4413      	add	r3, r2
 800e464:	f9b3 1000 	ldrsh.w	r1, [r3]
 800e468:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800e46c:	2201      	movs	r2, #1
 800e46e:	fa02 f303 	lsl.w	r3, r2, r3
 800e472:	b21a      	sxth	r2, r3
 800e474:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e478:	005b      	lsls	r3, r3, #1
 800e47a:	68f8      	ldr	r0, [r7, #12]
 800e47c:	4403      	add	r3, r0
 800e47e:	430a      	orrs	r2, r1
 800e480:	b212      	sxth	r2, r2
 800e482:	801a      	strh	r2, [r3, #0]
 800e484:	e016      	b.n	800e4b4 <NotePixel+0xf4>
 800e486:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e48a:	005b      	lsls	r3, r3, #1
 800e48c:	68fa      	ldr	r2, [r7, #12]
 800e48e:	4413      	add	r3, r2
 800e490:	f9b3 1000 	ldrsh.w	r1, [r3]
 800e494:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800e498:	2201      	movs	r2, #1
 800e49a:	fa02 f303 	lsl.w	r3, r2, r3
 800e49e:	b21b      	sxth	r3, r3
 800e4a0:	43db      	mvns	r3, r3
 800e4a2:	b21a      	sxth	r2, r3
 800e4a4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e4a8:	005b      	lsls	r3, r3, #1
 800e4aa:	68f8      	ldr	r0, [r7, #12]
 800e4ac:	4403      	add	r3, r0
 800e4ae:	400a      	ands	r2, r1
 800e4b0:	b212      	sxth	r2, r2
 800e4b2:	801a      	strh	r2, [r3, #0]
 800e4b4:	4b0a      	ldr	r3, [pc, #40]	; (800e4e0 <NotePixel+0x120>)
 800e4b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e4ba:	b29b      	uxth	r3, r3
 800e4bc:	3301      	adds	r3, #1
 800e4be:	b29b      	uxth	r3, r3
 800e4c0:	b21a      	sxth	r2, r3
 800e4c2:	4b07      	ldr	r3, [pc, #28]	; (800e4e0 <NotePixel+0x120>)
 800e4c4:	801a      	strh	r2, [r3, #0]
 800e4c6:	bf00      	nop
 800e4c8:	3714      	adds	r7, #20
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d0:	4770      	bx	lr
 800e4d2:	bf00      	nop
 800e4d4:	20000f8c 	.word	0x20000f8c
 800e4d8:	20000002 	.word	0x20000002
 800e4dc:	20000140 	.word	0x20000140
 800e4e0:	20000004 	.word	0x20000004

0800e4e4 <Buil_Pop>:
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b082      	sub	sp, #8
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800e4ee:	2100      	movs	r1, #0
 800e4f0:	487f      	ldr	r0, [pc, #508]	; (800e6f0 <Buil_Pop+0x20c>)
 800e4f2:	f014 fb7f 	bl	8022bf4 <memset>
 800e4f6:	4b7f      	ldr	r3, [pc, #508]	; (800e6f4 <Buil_Pop+0x210>)
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	801a      	strh	r2, [r3, #0]
 800e4fc:	4b7e      	ldr	r3, [pc, #504]	; (800e6f8 <Buil_Pop+0x214>)
 800e4fe:	2203      	movs	r2, #3
 800e500:	801a      	strh	r2, [r3, #0]
 800e502:	2300      	movs	r3, #0
 800e504:	80fb      	strh	r3, [r7, #6]
 800e506:	e008      	b.n	800e51a <Buil_Pop+0x36>
 800e508:	2001      	movs	r0, #1
 800e50a:	f7ff ff59 	bl	800e3c0 <NotePixel>
 800e50e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e512:	b29b      	uxth	r3, r3
 800e514:	3301      	adds	r3, #1
 800e516:	b29b      	uxth	r3, r3
 800e518:	80fb      	strh	r3, [r7, #6]
 800e51a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e51e:	4b77      	ldr	r3, [pc, #476]	; (800e6fc <Buil_Pop+0x218>)
 800e520:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e524:	0fd9      	lsrs	r1, r3, #31
 800e526:	440b      	add	r3, r1
 800e528:	105b      	asrs	r3, r3, #1
 800e52a:	b21b      	sxth	r3, r3
 800e52c:	3b06      	subs	r3, #6
 800e52e:	429a      	cmp	r2, r3
 800e530:	dbea      	blt.n	800e508 <Buil_Pop+0x24>
 800e532:	4b70      	ldr	r3, [pc, #448]	; (800e6f4 <Buil_Pop+0x210>)
 800e534:	2201      	movs	r2, #1
 800e536:	801a      	strh	r2, [r3, #0]
 800e538:	4b6f      	ldr	r3, [pc, #444]	; (800e6f8 <Buil_Pop+0x214>)
 800e53a:	2202      	movs	r2, #2
 800e53c:	801a      	strh	r2, [r3, #0]
 800e53e:	2001      	movs	r0, #1
 800e540:	f7ff ff3e 	bl	800e3c0 <NotePixel>
 800e544:	4b6b      	ldr	r3, [pc, #428]	; (800e6f4 <Buil_Pop+0x210>)
 800e546:	2201      	movs	r2, #1
 800e548:	801a      	strh	r2, [r3, #0]
 800e54a:	4b6c      	ldr	r3, [pc, #432]	; (800e6fc <Buil_Pop+0x218>)
 800e54c:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e550:	0fda      	lsrs	r2, r3, #31
 800e552:	4413      	add	r3, r2
 800e554:	105b      	asrs	r3, r3, #1
 800e556:	b21b      	sxth	r3, r3
 800e558:	b29b      	uxth	r3, r3
 800e55a:	3b03      	subs	r3, #3
 800e55c:	b29b      	uxth	r3, r3
 800e55e:	b21a      	sxth	r2, r3
 800e560:	4b65      	ldr	r3, [pc, #404]	; (800e6f8 <Buil_Pop+0x214>)
 800e562:	801a      	strh	r2, [r3, #0]
 800e564:	2001      	movs	r0, #1
 800e566:	f7ff ff2b 	bl	800e3c0 <NotePixel>
 800e56a:	4b62      	ldr	r3, [pc, #392]	; (800e6f4 <Buil_Pop+0x210>)
 800e56c:	2202      	movs	r2, #2
 800e56e:	801a      	strh	r2, [r3, #0]
 800e570:	4b61      	ldr	r3, [pc, #388]	; (800e6f8 <Buil_Pop+0x214>)
 800e572:	2201      	movs	r2, #1
 800e574:	801a      	strh	r2, [r3, #0]
 800e576:	2001      	movs	r0, #1
 800e578:	f7ff ff22 	bl	800e3c0 <NotePixel>
 800e57c:	4b5d      	ldr	r3, [pc, #372]	; (800e6f4 <Buil_Pop+0x210>)
 800e57e:	2202      	movs	r2, #2
 800e580:	801a      	strh	r2, [r3, #0]
 800e582:	4b5e      	ldr	r3, [pc, #376]	; (800e6fc <Buil_Pop+0x218>)
 800e584:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e588:	0fda      	lsrs	r2, r3, #31
 800e58a:	4413      	add	r3, r2
 800e58c:	105b      	asrs	r3, r3, #1
 800e58e:	b21b      	sxth	r3, r3
 800e590:	b29b      	uxth	r3, r3
 800e592:	3b02      	subs	r3, #2
 800e594:	b29b      	uxth	r3, r3
 800e596:	b21a      	sxth	r2, r3
 800e598:	4b57      	ldr	r3, [pc, #348]	; (800e6f8 <Buil_Pop+0x214>)
 800e59a:	801a      	strh	r2, [r3, #0]
 800e59c:	2001      	movs	r0, #1
 800e59e:	f7ff ff0f 	bl	800e3c0 <NotePixel>
 800e5a2:	4b54      	ldr	r3, [pc, #336]	; (800e6f4 <Buil_Pop+0x210>)
 800e5a4:	2203      	movs	r2, #3
 800e5a6:	801a      	strh	r2, [r3, #0]
 800e5a8:	e01e      	b.n	800e5e8 <Buil_Pop+0x104>
 800e5aa:	4b53      	ldr	r3, [pc, #332]	; (800e6f8 <Buil_Pop+0x214>)
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	801a      	strh	r2, [r3, #0]
 800e5b0:	2001      	movs	r0, #1
 800e5b2:	f7ff ff05 	bl	800e3c0 <NotePixel>
 800e5b6:	4b51      	ldr	r3, [pc, #324]	; (800e6fc <Buil_Pop+0x218>)
 800e5b8:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e5bc:	0fda      	lsrs	r2, r3, #31
 800e5be:	4413      	add	r3, r2
 800e5c0:	105b      	asrs	r3, r3, #1
 800e5c2:	b21b      	sxth	r3, r3
 800e5c4:	b29b      	uxth	r3, r3
 800e5c6:	3b01      	subs	r3, #1
 800e5c8:	b29b      	uxth	r3, r3
 800e5ca:	b21a      	sxth	r2, r3
 800e5cc:	4b4a      	ldr	r3, [pc, #296]	; (800e6f8 <Buil_Pop+0x214>)
 800e5ce:	801a      	strh	r2, [r3, #0]
 800e5d0:	2001      	movs	r0, #1
 800e5d2:	f7ff fef5 	bl	800e3c0 <NotePixel>
 800e5d6:	4b47      	ldr	r3, [pc, #284]	; (800e6f4 <Buil_Pop+0x210>)
 800e5d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e5dc:	b29b      	uxth	r3, r3
 800e5de:	3301      	adds	r3, #1
 800e5e0:	b29b      	uxth	r3, r3
 800e5e2:	b21a      	sxth	r2, r3
 800e5e4:	4b43      	ldr	r3, [pc, #268]	; (800e6f4 <Buil_Pop+0x210>)
 800e5e6:	801a      	strh	r2, [r3, #0]
 800e5e8:	4b42      	ldr	r3, [pc, #264]	; (800e6f4 <Buil_Pop+0x210>)
 800e5ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e5ee:	461a      	mov	r2, r3
 800e5f0:	4b42      	ldr	r3, [pc, #264]	; (800e6fc <Buil_Pop+0x218>)
 800e5f2:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e5f6:	3b02      	subs	r3, #2
 800e5f8:	429a      	cmp	r2, r3
 800e5fa:	dbd6      	blt.n	800e5aa <Buil_Pop+0xc6>
 800e5fc:	4b3f      	ldr	r3, [pc, #252]	; (800e6fc <Buil_Pop+0x218>)
 800e5fe:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e602:	b29b      	uxth	r3, r3
 800e604:	3b03      	subs	r3, #3
 800e606:	b29b      	uxth	r3, r3
 800e608:	b21a      	sxth	r2, r3
 800e60a:	4b3a      	ldr	r3, [pc, #232]	; (800e6f4 <Buil_Pop+0x210>)
 800e60c:	801a      	strh	r2, [r3, #0]
 800e60e:	4b3a      	ldr	r3, [pc, #232]	; (800e6f8 <Buil_Pop+0x214>)
 800e610:	2201      	movs	r2, #1
 800e612:	801a      	strh	r2, [r3, #0]
 800e614:	2001      	movs	r0, #1
 800e616:	f7ff fed3 	bl	800e3c0 <NotePixel>
 800e61a:	4b38      	ldr	r3, [pc, #224]	; (800e6fc <Buil_Pop+0x218>)
 800e61c:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e620:	b29b      	uxth	r3, r3
 800e622:	3b03      	subs	r3, #3
 800e624:	b29b      	uxth	r3, r3
 800e626:	b21a      	sxth	r2, r3
 800e628:	4b32      	ldr	r3, [pc, #200]	; (800e6f4 <Buil_Pop+0x210>)
 800e62a:	801a      	strh	r2, [r3, #0]
 800e62c:	4b33      	ldr	r3, [pc, #204]	; (800e6fc <Buil_Pop+0x218>)
 800e62e:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e632:	0fda      	lsrs	r2, r3, #31
 800e634:	4413      	add	r3, r2
 800e636:	105b      	asrs	r3, r3, #1
 800e638:	b21b      	sxth	r3, r3
 800e63a:	b29b      	uxth	r3, r3
 800e63c:	3b02      	subs	r3, #2
 800e63e:	b29b      	uxth	r3, r3
 800e640:	b21a      	sxth	r2, r3
 800e642:	4b2d      	ldr	r3, [pc, #180]	; (800e6f8 <Buil_Pop+0x214>)
 800e644:	801a      	strh	r2, [r3, #0]
 800e646:	2001      	movs	r0, #1
 800e648:	f7ff feba 	bl	800e3c0 <NotePixel>
 800e64c:	4b2b      	ldr	r3, [pc, #172]	; (800e6fc <Buil_Pop+0x218>)
 800e64e:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e652:	b29b      	uxth	r3, r3
 800e654:	3b02      	subs	r3, #2
 800e656:	b29b      	uxth	r3, r3
 800e658:	b21a      	sxth	r2, r3
 800e65a:	4b26      	ldr	r3, [pc, #152]	; (800e6f4 <Buil_Pop+0x210>)
 800e65c:	801a      	strh	r2, [r3, #0]
 800e65e:	4b26      	ldr	r3, [pc, #152]	; (800e6f8 <Buil_Pop+0x214>)
 800e660:	2202      	movs	r2, #2
 800e662:	801a      	strh	r2, [r3, #0]
 800e664:	2001      	movs	r0, #1
 800e666:	f7ff feab 	bl	800e3c0 <NotePixel>
 800e66a:	4b24      	ldr	r3, [pc, #144]	; (800e6fc <Buil_Pop+0x218>)
 800e66c:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e670:	b29b      	uxth	r3, r3
 800e672:	3b02      	subs	r3, #2
 800e674:	b29b      	uxth	r3, r3
 800e676:	b21a      	sxth	r2, r3
 800e678:	4b1e      	ldr	r3, [pc, #120]	; (800e6f4 <Buil_Pop+0x210>)
 800e67a:	801a      	strh	r2, [r3, #0]
 800e67c:	4b1f      	ldr	r3, [pc, #124]	; (800e6fc <Buil_Pop+0x218>)
 800e67e:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e682:	0fda      	lsrs	r2, r3, #31
 800e684:	4413      	add	r3, r2
 800e686:	105b      	asrs	r3, r3, #1
 800e688:	b21b      	sxth	r3, r3
 800e68a:	b29b      	uxth	r3, r3
 800e68c:	3b03      	subs	r3, #3
 800e68e:	b29b      	uxth	r3, r3
 800e690:	b21a      	sxth	r2, r3
 800e692:	4b19      	ldr	r3, [pc, #100]	; (800e6f8 <Buil_Pop+0x214>)
 800e694:	801a      	strh	r2, [r3, #0]
 800e696:	2001      	movs	r0, #1
 800e698:	f7ff fe92 	bl	800e3c0 <NotePixel>
 800e69c:	4b17      	ldr	r3, [pc, #92]	; (800e6fc <Buil_Pop+0x218>)
 800e69e:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e6a2:	b29b      	uxth	r3, r3
 800e6a4:	3b01      	subs	r3, #1
 800e6a6:	b29b      	uxth	r3, r3
 800e6a8:	b21a      	sxth	r2, r3
 800e6aa:	4b12      	ldr	r3, [pc, #72]	; (800e6f4 <Buil_Pop+0x210>)
 800e6ac:	801a      	strh	r2, [r3, #0]
 800e6ae:	4b12      	ldr	r3, [pc, #72]	; (800e6f8 <Buil_Pop+0x214>)
 800e6b0:	2203      	movs	r2, #3
 800e6b2:	801a      	strh	r2, [r3, #0]
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	80fb      	strh	r3, [r7, #6]
 800e6b8:	e008      	b.n	800e6cc <Buil_Pop+0x1e8>
 800e6ba:	2001      	movs	r0, #1
 800e6bc:	f7ff fe80 	bl	800e3c0 <NotePixel>
 800e6c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e6c4:	b29b      	uxth	r3, r3
 800e6c6:	3301      	adds	r3, #1
 800e6c8:	b29b      	uxth	r3, r3
 800e6ca:	80fb      	strh	r3, [r7, #6]
 800e6cc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e6d0:	4b0a      	ldr	r3, [pc, #40]	; (800e6fc <Buil_Pop+0x218>)
 800e6d2:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e6d6:	0fd9      	lsrs	r1, r3, #31
 800e6d8:	440b      	add	r3, r1
 800e6da:	105b      	asrs	r3, r3, #1
 800e6dc:	b21b      	sxth	r3, r3
 800e6de:	3b06      	subs	r3, #6
 800e6e0:	429a      	cmp	r2, r3
 800e6e2:	dbea      	blt.n	800e6ba <Buil_Pop+0x1d6>
 800e6e4:	bf00      	nop
 800e6e6:	bf00      	nop
 800e6e8:	3708      	adds	r7, #8
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}
 800e6ee:	bf00      	nop
 800e6f0:	20000f8c 	.word	0x20000f8c
 800e6f4:	20000002 	.word	0x20000002
 800e6f8:	20000004 	.word	0x20000004
 800e6fc:	20000140 	.word	0x20000140

0800e700 <PopColor>:
 800e700:	b480      	push	{r7}
 800e702:	b083      	sub	sp, #12
 800e704:	af00      	add	r7, sp, #0
 800e706:	4603      	mov	r3, r0
 800e708:	460a      	mov	r2, r1
 800e70a:	80fb      	strh	r3, [r7, #6]
 800e70c:	4613      	mov	r3, r2
 800e70e:	80bb      	strh	r3, [r7, #4]
 800e710:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e714:	4b06      	ldr	r3, [pc, #24]	; (800e730 <PopColor+0x30>)
 800e716:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800e71a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e71e:	4b04      	ldr	r3, [pc, #16]	; (800e730 <PopColor+0x30>)
 800e720:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800e724:	bf00      	nop
 800e726:	370c      	adds	r7, #12
 800e728:	46bd      	mov	sp, r7
 800e72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72e:	4770      	bx	lr
 800e730:	20000140 	.word	0x20000140

0800e734 <Close_Pop>:
 800e734:	b480      	push	{r7}
 800e736:	af00      	add	r7, sp, #0
 800e738:	4b07      	ldr	r3, [pc, #28]	; (800e758 <Close_Pop+0x24>)
 800e73a:	781b      	ldrb	r3, [r3, #0]
 800e73c:	f023 0306 	bic.w	r3, r3, #6
 800e740:	b2da      	uxtb	r2, r3
 800e742:	4b05      	ldr	r3, [pc, #20]	; (800e758 <Close_Pop+0x24>)
 800e744:	701a      	strb	r2, [r3, #0]
 800e746:	4b05      	ldr	r3, [pc, #20]	; (800e75c <Close_Pop+0x28>)
 800e748:	2201      	movs	r2, #1
 800e74a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800e74e:	bf00      	nop
 800e750:	46bd      	mov	sp, r7
 800e752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e756:	4770      	bx	lr
 800e758:	2000078e 	.word	0x2000078e
 800e75c:	20000140 	.word	0x20000140

0800e760 <List_Pop>:
 800e760:	b480      	push	{r7}
 800e762:	af00      	add	r7, sp, #0
 800e764:	4b07      	ldr	r3, [pc, #28]	; (800e784 <List_Pop+0x24>)
 800e766:	781b      	ldrb	r3, [r3, #0]
 800e768:	f043 0302 	orr.w	r3, r3, #2
 800e76c:	b2da      	uxtb	r2, r3
 800e76e:	4b05      	ldr	r3, [pc, #20]	; (800e784 <List_Pop+0x24>)
 800e770:	701a      	strb	r2, [r3, #0]
 800e772:	4b05      	ldr	r3, [pc, #20]	; (800e788 <List_Pop+0x28>)
 800e774:	2200      	movs	r2, #0
 800e776:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800e77a:	bf00      	nop
 800e77c:	46bd      	mov	sp, r7
 800e77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e782:	4770      	bx	lr
 800e784:	2000078e 	.word	0x2000078e
 800e788:	20000140 	.word	0x20000140

0800e78c <Dialog_Pop>:
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b084      	sub	sp, #16
 800e790:	af02      	add	r7, sp, #8
 800e792:	6078      	str	r0, [r7, #4]
 800e794:	4b2a      	ldr	r3, [pc, #168]	; (800e840 <Dialog_Pop+0xb4>)
 800e796:	781b      	ldrb	r3, [r3, #0]
 800e798:	f043 0304 	orr.w	r3, r3, #4
 800e79c:	b2da      	uxtb	r2, r3
 800e79e:	4b28      	ldr	r3, [pc, #160]	; (800e840 <Dialog_Pop+0xb4>)
 800e7a0:	701a      	strb	r2, [r3, #0]
 800e7a2:	4b28      	ldr	r3, [pc, #160]	; (800e844 <Dialog_Pop+0xb8>)
 800e7a4:	2280      	movs	r2, #128	; 0x80
 800e7a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e7aa:	4b26      	ldr	r3, [pc, #152]	; (800e844 <Dialog_Pop+0xb8>)
 800e7ac:	2260      	movs	r2, #96	; 0x60
 800e7ae:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 800e7b2:	4b24      	ldr	r3, [pc, #144]	; (800e844 <Dialog_Pop+0xb8>)
 800e7b4:	2250      	movs	r2, #80	; 0x50
 800e7b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800e7ba:	4b22      	ldr	r3, [pc, #136]	; (800e844 <Dialog_Pop+0xb8>)
 800e7bc:	22c8      	movs	r2, #200	; 0xc8
 800e7be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e7c2:	f643 11e7 	movw	r1, #14823	; 0x39e7
 800e7c6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e7ca:	f7ff ff99 	bl	800e700 <PopColor>
 800e7ce:	f7ff fe89 	bl	800e4e4 <Buil_Pop>
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	211c      	movs	r1, #28
 800e7d8:	2008      	movs	r0, #8
 800e7da:	f000 f8e1 	bl	800e9a0 <NoteSTR>
 800e7de:	4b1a      	ldr	r3, [pc, #104]	; (800e848 <Dialog_Pop+0xbc>)
 800e7e0:	2211      	movs	r2, #17
 800e7e2:	2108      	movs	r1, #8
 800e7e4:	200c      	movs	r0, #12
 800e7e6:	f000 f8db 	bl	800e9a0 <NoteSTR>
 800e7ea:	230a      	movs	r3, #10
 800e7ec:	9300      	str	r3, [sp, #0]
 800e7ee:	2302      	movs	r3, #2
 800e7f0:	2208      	movs	r2, #8
 800e7f2:	210c      	movs	r1, #12
 800e7f4:	2000      	movs	r0, #0
 800e7f6:	f000 f979 	bl	800eaec <Note_4Point>
 800e7fa:	4b14      	ldr	r3, [pc, #80]	; (800e84c <Dialog_Pop+0xc0>)
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	2108      	movs	r1, #8
 800e800:	2018      	movs	r0, #24
 800e802:	f000 f8cd 	bl	800e9a0 <NoteSTR>
 800e806:	4b12      	ldr	r3, [pc, #72]	; (800e850 <Dialog_Pop+0xc4>)
 800e808:	2211      	movs	r2, #17
 800e80a:	2108      	movs	r1, #8
 800e80c:	2048      	movs	r0, #72	; 0x48
 800e80e:	f000 f8c7 	bl	800e9a0 <NoteSTR>
 800e812:	230a      	movs	r3, #10
 800e814:	9300      	str	r3, [sp, #0]
 800e816:	2302      	movs	r3, #2
 800e818:	2208      	movs	r2, #8
 800e81a:	2148      	movs	r1, #72	; 0x48
 800e81c:	2000      	movs	r0, #0
 800e81e:	f000 f965 	bl	800eaec <Note_4Point>
 800e822:	4b0c      	ldr	r3, [pc, #48]	; (800e854 <Dialog_Pop+0xc8>)
 800e824:	2200      	movs	r2, #0
 800e826:	2108      	movs	r1, #8
 800e828:	2054      	movs	r0, #84	; 0x54
 800e82a:	f000 f8b9 	bl	800e9a0 <NoteSTR>
 800e82e:	4b05      	ldr	r3, [pc, #20]	; (800e844 <Dialog_Pop+0xb8>)
 800e830:	2200      	movs	r2, #0
 800e832:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800e836:	bf00      	nop
 800e838:	3708      	adds	r7, #8
 800e83a:	46bd      	mov	sp, r7
 800e83c:	bd80      	pop	{r7, pc}
 800e83e:	bf00      	nop
 800e840:	2000078e 	.word	0x2000078e
 800e844:	20000140 	.word	0x20000140
 800e848:	080001c4 	.word	0x080001c4
 800e84c:	080001c8 	.word	0x080001c8
 800e850:	080001d0 	.word	0x080001d0
 800e854:	080001d4 	.word	0x080001d4

0800e858 <Calibrate_Pop>:
 800e858:	b580      	push	{r7, lr}
 800e85a:	b082      	sub	sp, #8
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
 800e860:	4b16      	ldr	r3, [pc, #88]	; (800e8bc <Calibrate_Pop+0x64>)
 800e862:	781b      	ldrb	r3, [r3, #0]
 800e864:	f043 0304 	orr.w	r3, r3, #4
 800e868:	b2da      	uxtb	r2, r3
 800e86a:	4b14      	ldr	r3, [pc, #80]	; (800e8bc <Calibrate_Pop+0x64>)
 800e86c:	701a      	strb	r2, [r3, #0]
 800e86e:	4b14      	ldr	r3, [pc, #80]	; (800e8c0 <Calibrate_Pop+0x68>)
 800e870:	22c8      	movs	r2, #200	; 0xc8
 800e872:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e876:	4b12      	ldr	r3, [pc, #72]	; (800e8c0 <Calibrate_Pop+0x68>)
 800e878:	2240      	movs	r2, #64	; 0x40
 800e87a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 800e87e:	4b10      	ldr	r3, [pc, #64]	; (800e8c0 <Calibrate_Pop+0x68>)
 800e880:	2232      	movs	r2, #50	; 0x32
 800e882:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800e886:	4b0e      	ldr	r3, [pc, #56]	; (800e8c0 <Calibrate_Pop+0x68>)
 800e888:	22e6      	movs	r2, #230	; 0xe6
 800e88a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e88e:	f643 11e7 	movw	r1, #14823	; 0x39e7
 800e892:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e896:	f7ff ff33 	bl	800e700 <PopColor>
 800e89a:	f7ff fe23 	bl	800e4e4 <Buil_Pop>
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	210a      	movs	r1, #10
 800e8a4:	2010      	movs	r0, #16
 800e8a6:	f000 f87b 	bl	800e9a0 <NoteSTR>
 800e8aa:	4b05      	ldr	r3, [pc, #20]	; (800e8c0 <Calibrate_Pop+0x68>)
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800e8b2:	bf00      	nop
 800e8b4:	3708      	adds	r7, #8
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}
 800e8ba:	bf00      	nop
 800e8bc:	2000078e 	.word	0x2000078e
 800e8c0:	20000140 	.word	0x20000140

0800e8c4 <CalSave_Pop>:
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b084      	sub	sp, #16
 800e8c8:	af02      	add	r7, sp, #8
 800e8ca:	6078      	str	r0, [r7, #4]
 800e8cc:	4b2d      	ldr	r3, [pc, #180]	; (800e984 <CalSave_Pop+0xc0>)
 800e8ce:	781b      	ldrb	r3, [r3, #0]
 800e8d0:	f043 0304 	orr.w	r3, r3, #4
 800e8d4:	b2da      	uxtb	r2, r3
 800e8d6:	4b2b      	ldr	r3, [pc, #172]	; (800e984 <CalSave_Pop+0xc0>)
 800e8d8:	701a      	strb	r2, [r3, #0]
 800e8da:	4b2b      	ldr	r3, [pc, #172]	; (800e988 <CalSave_Pop+0xc4>)
 800e8dc:	22d0      	movs	r2, #208	; 0xd0
 800e8de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e8e2:	4b29      	ldr	r3, [pc, #164]	; (800e988 <CalSave_Pop+0xc4>)
 800e8e4:	2260      	movs	r2, #96	; 0x60
 800e8e6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 800e8ea:	4b27      	ldr	r3, [pc, #156]	; (800e988 <CalSave_Pop+0xc4>)
 800e8ec:	221e      	movs	r2, #30
 800e8ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800e8f2:	4b25      	ldr	r3, [pc, #148]	; (800e988 <CalSave_Pop+0xc4>)
 800e8f4:	22c8      	movs	r2, #200	; 0xc8
 800e8f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e8fa:	f643 11e7 	movw	r1, #14823	; 0x39e7
 800e8fe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e902:	f7ff fefd 	bl	800e700 <PopColor>
 800e906:	f7ff fded 	bl	800e4e4 <Buil_Pop>
 800e90a:	4b20      	ldr	r3, [pc, #128]	; (800e98c <CalSave_Pop+0xc8>)
 800e90c:	2200      	movs	r2, #0
 800e90e:	211c      	movs	r1, #28
 800e910:	2006      	movs	r0, #6
 800e912:	f000 f845 	bl	800e9a0 <NoteSTR>
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	2200      	movs	r2, #0
 800e91a:	211c      	movs	r1, #28
 800e91c:	205a      	movs	r0, #90	; 0x5a
 800e91e:	f000 f83f 	bl	800e9a0 <NoteSTR>
 800e922:	4b1b      	ldr	r3, [pc, #108]	; (800e990 <CalSave_Pop+0xcc>)
 800e924:	2211      	movs	r2, #17
 800e926:	2108      	movs	r1, #8
 800e928:	201e      	movs	r0, #30
 800e92a:	f000 f839 	bl	800e9a0 <NoteSTR>
 800e92e:	230a      	movs	r3, #10
 800e930:	9300      	str	r3, [sp, #0]
 800e932:	2302      	movs	r3, #2
 800e934:	2208      	movs	r2, #8
 800e936:	211e      	movs	r1, #30
 800e938:	2000      	movs	r0, #0
 800e93a:	f000 f8d7 	bl	800eaec <Note_4Point>
 800e93e:	4b15      	ldr	r3, [pc, #84]	; (800e994 <CalSave_Pop+0xd0>)
 800e940:	2200      	movs	r2, #0
 800e942:	2108      	movs	r1, #8
 800e944:	202a      	movs	r0, #42	; 0x2a
 800e946:	f000 f82b 	bl	800e9a0 <NoteSTR>
 800e94a:	4b13      	ldr	r3, [pc, #76]	; (800e998 <CalSave_Pop+0xd4>)
 800e94c:	2211      	movs	r2, #17
 800e94e:	2108      	movs	r1, #8
 800e950:	2078      	movs	r0, #120	; 0x78
 800e952:	f000 f825 	bl	800e9a0 <NoteSTR>
 800e956:	230a      	movs	r3, #10
 800e958:	9300      	str	r3, [sp, #0]
 800e95a:	2302      	movs	r3, #2
 800e95c:	2208      	movs	r2, #8
 800e95e:	2178      	movs	r1, #120	; 0x78
 800e960:	2000      	movs	r0, #0
 800e962:	f000 f8c3 	bl	800eaec <Note_4Point>
 800e966:	4b0d      	ldr	r3, [pc, #52]	; (800e99c <CalSave_Pop+0xd8>)
 800e968:	2200      	movs	r2, #0
 800e96a:	2108      	movs	r1, #8
 800e96c:	2084      	movs	r0, #132	; 0x84
 800e96e:	f000 f817 	bl	800e9a0 <NoteSTR>
 800e972:	4b05      	ldr	r3, [pc, #20]	; (800e988 <CalSave_Pop+0xc4>)
 800e974:	2200      	movs	r2, #0
 800e976:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800e97a:	bf00      	nop
 800e97c:	3708      	adds	r7, #8
 800e97e:	46bd      	mov	sp, r7
 800e980:	bd80      	pop	{r7, pc}
 800e982:	bf00      	nop
 800e984:	2000078e 	.word	0x2000078e
 800e988:	20000140 	.word	0x20000140
 800e98c:	080001dc 	.word	0x080001dc
 800e990:	080001c4 	.word	0x080001c4
 800e994:	080001c8 	.word	0x080001c8
 800e998:	080001d0 	.word	0x080001d0
 800e99c:	080001d4 	.word	0x080001d4

0800e9a0 <NoteSTR>:
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b086      	sub	sp, #24
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	607b      	str	r3, [r7, #4]
 800e9a8:	4603      	mov	r3, r0
 800e9aa:	81fb      	strh	r3, [r7, #14]
 800e9ac:	460b      	mov	r3, r1
 800e9ae:	81bb      	strh	r3, [r7, #12]
 800e9b0:	4613      	mov	r3, r2
 800e9b2:	72fb      	strb	r3, [r7, #11]
 800e9b4:	4a48      	ldr	r2, [pc, #288]	; (800ead8 <NoteSTR+0x138>)
 800e9b6:	89fb      	ldrh	r3, [r7, #14]
 800e9b8:	8013      	strh	r3, [r2, #0]
 800e9ba:	4a48      	ldr	r2, [pc, #288]	; (800eadc <NoteSTR+0x13c>)
 800e9bc:	89bb      	ldrh	r3, [r7, #12]
 800e9be:	8013      	strh	r3, [r2, #0]
 800e9c0:	e080      	b.n	800eac4 <NoteSTR+0x124>
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	1c5a      	adds	r2, r3, #1
 800e9c6:	607a      	str	r2, [r7, #4]
 800e9c8:	781b      	ldrb	r3, [r3, #0]
 800e9ca:	747b      	strb	r3, [r7, #17]
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	82fb      	strh	r3, [r7, #22]
 800e9d0:	e074      	b.n	800eabc <NoteSTR+0x11c>
 800e9d2:	7afb      	ldrb	r3, [r7, #11]
 800e9d4:	f003 0310 	and.w	r3, r3, #16
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d10e      	bne.n	800e9fa <NoteSTR+0x5a>
 800e9dc:	7c7b      	ldrb	r3, [r7, #17]
 800e9de:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800e9e2:	4613      	mov	r3, r2
 800e9e4:	005b      	lsls	r3, r3, #1
 800e9e6:	4413      	add	r3, r2
 800e9e8:	005b      	lsls	r3, r3, #1
 800e9ea:	461a      	mov	r2, r3
 800e9ec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e9f0:	4413      	add	r3, r2
 800e9f2:	4a3b      	ldr	r2, [pc, #236]	; (800eae0 <NoteSTR+0x140>)
 800e9f4:	5cd3      	ldrb	r3, [r2, r3]
 800e9f6:	827b      	strh	r3, [r7, #18]
 800e9f8:	e00d      	b.n	800ea16 <NoteSTR+0x76>
 800e9fa:	7c7b      	ldrb	r3, [r7, #17]
 800e9fc:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800ea00:	4613      	mov	r3, r2
 800ea02:	005b      	lsls	r3, r3, #1
 800ea04:	4413      	add	r3, r2
 800ea06:	005b      	lsls	r3, r3, #1
 800ea08:	461a      	mov	r2, r3
 800ea0a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ea0e:	4413      	add	r3, r2
 800ea10:	4a34      	ldr	r2, [pc, #208]	; (800eae4 <NoteSTR+0x144>)
 800ea12:	5cd3      	ldrb	r3, [r2, r3]
 800ea14:	827b      	strh	r3, [r7, #18]
 800ea16:	7afb      	ldrb	r3, [r7, #11]
 800ea18:	f003 0320 	and.w	r3, r3, #32
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d00c      	beq.n	800ea3a <NoteSTR+0x9a>
 800ea20:	8afb      	ldrh	r3, [r7, #22]
 800ea22:	f003 0301 	and.w	r3, r3, #1
 800ea26:	b29b      	uxth	r3, r3
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d001      	beq.n	800ea30 <NoteSTR+0x90>
 800ea2c:	4a2e      	ldr	r2, [pc, #184]	; (800eae8 <NoteSTR+0x148>)
 800ea2e:	e001      	b.n	800ea34 <NoteSTR+0x94>
 800ea30:	f245 5255 	movw	r2, #21845	; 0x5555
 800ea34:	8a7b      	ldrh	r3, [r7, #18]
 800ea36:	4013      	ands	r3, r2
 800ea38:	827b      	strh	r3, [r7, #18]
 800ea3a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ea3e:	009b      	lsls	r3, r3, #2
 800ea40:	827b      	strh	r3, [r7, #18]
 800ea42:	2300      	movs	r3, #0
 800ea44:	82bb      	strh	r3, [r7, #20]
 800ea46:	e01f      	b.n	800ea88 <NoteSTR+0xe8>
 800ea48:	8a7b      	ldrh	r3, [r7, #18]
 800ea4a:	f003 0301 	and.w	r3, r3, #1
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d00b      	beq.n	800ea6a <NoteSTR+0xca>
 800ea52:	7afb      	ldrb	r3, [r7, #11]
 800ea54:	f003 0301 	and.w	r3, r3, #1
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	bf0c      	ite	eq
 800ea5c:	2301      	moveq	r3, #1
 800ea5e:	2300      	movne	r3, #0
 800ea60:	b2db      	uxtb	r3, r3
 800ea62:	4618      	mov	r0, r3
 800ea64:	f7ff fcac 	bl	800e3c0 <NotePixel>
 800ea68:	e006      	b.n	800ea78 <NoteSTR+0xd8>
 800ea6a:	7afb      	ldrb	r3, [r7, #11]
 800ea6c:	f003 0301 	and.w	r3, r3, #1
 800ea70:	b2db      	uxtb	r3, r3
 800ea72:	4618      	mov	r0, r3
 800ea74:	f7ff fca4 	bl	800e3c0 <NotePixel>
 800ea78:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ea7c:	105b      	asrs	r3, r3, #1
 800ea7e:	827b      	strh	r3, [r7, #18]
 800ea80:	8abb      	ldrh	r3, [r7, #20]
 800ea82:	3301      	adds	r3, #1
 800ea84:	b29b      	uxth	r3, r3
 800ea86:	82bb      	strh	r3, [r7, #20]
 800ea88:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ea8c:	2b0d      	cmp	r3, #13
 800ea8e:	dddb      	ble.n	800ea48 <NoteSTR+0xa8>
 800ea90:	4b11      	ldr	r3, [pc, #68]	; (800ead8 <NoteSTR+0x138>)
 800ea92:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ea96:	b29b      	uxth	r3, r3
 800ea98:	3301      	adds	r3, #1
 800ea9a:	b29b      	uxth	r3, r3
 800ea9c:	b21a      	sxth	r2, r3
 800ea9e:	4b0e      	ldr	r3, [pc, #56]	; (800ead8 <NoteSTR+0x138>)
 800eaa0:	801a      	strh	r2, [r3, #0]
 800eaa2:	4b0e      	ldr	r3, [pc, #56]	; (800eadc <NoteSTR+0x13c>)
 800eaa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eaa8:	b29b      	uxth	r3, r3
 800eaaa:	3b0e      	subs	r3, #14
 800eaac:	b29b      	uxth	r3, r3
 800eaae:	b21a      	sxth	r2, r3
 800eab0:	4b0a      	ldr	r3, [pc, #40]	; (800eadc <NoteSTR+0x13c>)
 800eab2:	801a      	strh	r2, [r3, #0]
 800eab4:	8afb      	ldrh	r3, [r7, #22]
 800eab6:	3301      	adds	r3, #1
 800eab8:	b29b      	uxth	r3, r3
 800eaba:	82fb      	strh	r3, [r7, #22]
 800eabc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800eac0:	2b05      	cmp	r3, #5
 800eac2:	dd86      	ble.n	800e9d2 <NoteSTR+0x32>
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	781b      	ldrb	r3, [r3, #0]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	f47f af7a 	bne.w	800e9c2 <NoteSTR+0x22>
 800eace:	bf00      	nop
 800ead0:	bf00      	nop
 800ead2:	3718      	adds	r7, #24
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bd80      	pop	{r7, pc}
 800ead8:	20000002 	.word	0x20000002
 800eadc:	20000004 	.word	0x20000004
 800eae0:	080016c4 	.word	0x080016c4
 800eae4:	08001490 	.word	0x08001490
 800eae8:	ffffaaaa 	.word	0xffffaaaa

0800eaec <Note_4Point>:
 800eaec:	b590      	push	{r4, r7, lr}
 800eaee:	b083      	sub	sp, #12
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	4604      	mov	r4, r0
 800eaf4:	4608      	mov	r0, r1
 800eaf6:	4611      	mov	r1, r2
 800eaf8:	461a      	mov	r2, r3
 800eafa:	4623      	mov	r3, r4
 800eafc:	71fb      	strb	r3, [r7, #7]
 800eafe:	4603      	mov	r3, r0
 800eb00:	80bb      	strh	r3, [r7, #4]
 800eb02:	460b      	mov	r3, r1
 800eb04:	807b      	strh	r3, [r7, #2]
 800eb06:	4613      	mov	r3, r2
 800eb08:	71bb      	strb	r3, [r7, #6]
 800eb0a:	7e3b      	ldrb	r3, [r7, #24]
 800eb0c:	3304      	adds	r3, #4
 800eb0e:	763b      	strb	r3, [r7, #24]
 800eb10:	4a2e      	ldr	r2, [pc, #184]	; (800ebcc <Note_4Point+0xe0>)
 800eb12:	88bb      	ldrh	r3, [r7, #4]
 800eb14:	8013      	strh	r3, [r2, #0]
 800eb16:	4a2e      	ldr	r2, [pc, #184]	; (800ebd0 <Note_4Point+0xe4>)
 800eb18:	887b      	ldrh	r3, [r7, #2]
 800eb1a:	8013      	strh	r3, [r2, #0]
 800eb1c:	79fb      	ldrb	r3, [r7, #7]
 800eb1e:	f003 0301 	and.w	r3, r3, #1
 800eb22:	b2db      	uxtb	r3, r3
 800eb24:	4618      	mov	r0, r3
 800eb26:	f7ff fc4b 	bl	800e3c0 <NotePixel>
 800eb2a:	4a28      	ldr	r2, [pc, #160]	; (800ebcc <Note_4Point+0xe0>)
 800eb2c:	88bb      	ldrh	r3, [r7, #4]
 800eb2e:	8013      	strh	r3, [r2, #0]
 800eb30:	7e3b      	ldrb	r3, [r7, #24]
 800eb32:	b29a      	uxth	r2, r3
 800eb34:	887b      	ldrh	r3, [r7, #2]
 800eb36:	4413      	add	r3, r2
 800eb38:	b29b      	uxth	r3, r3
 800eb3a:	3b01      	subs	r3, #1
 800eb3c:	b29b      	uxth	r3, r3
 800eb3e:	b21a      	sxth	r2, r3
 800eb40:	4b23      	ldr	r3, [pc, #140]	; (800ebd0 <Note_4Point+0xe4>)
 800eb42:	801a      	strh	r2, [r3, #0]
 800eb44:	79fb      	ldrb	r3, [r7, #7]
 800eb46:	f003 0301 	and.w	r3, r3, #1
 800eb4a:	b2db      	uxtb	r3, r3
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	f7ff fc37 	bl	800e3c0 <NotePixel>
 800eb52:	79bb      	ldrb	r3, [r7, #6]
 800eb54:	b29b      	uxth	r3, r3
 800eb56:	461a      	mov	r2, r3
 800eb58:	0052      	lsls	r2, r2, #1
 800eb5a:	4413      	add	r3, r2
 800eb5c:	005b      	lsls	r3, r3, #1
 800eb5e:	b29a      	uxth	r2, r3
 800eb60:	88bb      	ldrh	r3, [r7, #4]
 800eb62:	4413      	add	r3, r2
 800eb64:	b29b      	uxth	r3, r3
 800eb66:	3b01      	subs	r3, #1
 800eb68:	b29b      	uxth	r3, r3
 800eb6a:	b21a      	sxth	r2, r3
 800eb6c:	4b17      	ldr	r3, [pc, #92]	; (800ebcc <Note_4Point+0xe0>)
 800eb6e:	801a      	strh	r2, [r3, #0]
 800eb70:	4a17      	ldr	r2, [pc, #92]	; (800ebd0 <Note_4Point+0xe4>)
 800eb72:	887b      	ldrh	r3, [r7, #2]
 800eb74:	8013      	strh	r3, [r2, #0]
 800eb76:	79fb      	ldrb	r3, [r7, #7]
 800eb78:	f003 0301 	and.w	r3, r3, #1
 800eb7c:	b2db      	uxtb	r3, r3
 800eb7e:	4618      	mov	r0, r3
 800eb80:	f7ff fc1e 	bl	800e3c0 <NotePixel>
 800eb84:	79bb      	ldrb	r3, [r7, #6]
 800eb86:	b29b      	uxth	r3, r3
 800eb88:	461a      	mov	r2, r3
 800eb8a:	0052      	lsls	r2, r2, #1
 800eb8c:	4413      	add	r3, r2
 800eb8e:	005b      	lsls	r3, r3, #1
 800eb90:	b29a      	uxth	r2, r3
 800eb92:	88bb      	ldrh	r3, [r7, #4]
 800eb94:	4413      	add	r3, r2
 800eb96:	b29b      	uxth	r3, r3
 800eb98:	3b01      	subs	r3, #1
 800eb9a:	b29b      	uxth	r3, r3
 800eb9c:	b21a      	sxth	r2, r3
 800eb9e:	4b0b      	ldr	r3, [pc, #44]	; (800ebcc <Note_4Point+0xe0>)
 800eba0:	801a      	strh	r2, [r3, #0]
 800eba2:	7e3b      	ldrb	r3, [r7, #24]
 800eba4:	b29a      	uxth	r2, r3
 800eba6:	887b      	ldrh	r3, [r7, #2]
 800eba8:	4413      	add	r3, r2
 800ebaa:	b29b      	uxth	r3, r3
 800ebac:	3b01      	subs	r3, #1
 800ebae:	b29b      	uxth	r3, r3
 800ebb0:	b21a      	sxth	r2, r3
 800ebb2:	4b07      	ldr	r3, [pc, #28]	; (800ebd0 <Note_4Point+0xe4>)
 800ebb4:	801a      	strh	r2, [r3, #0]
 800ebb6:	79fb      	ldrb	r3, [r7, #7]
 800ebb8:	f003 0301 	and.w	r3, r3, #1
 800ebbc:	b2db      	uxtb	r3, r3
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	f7ff fbfe 	bl	800e3c0 <NotePixel>
 800ebc4:	bf00      	nop
 800ebc6:	370c      	adds	r7, #12
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	bd90      	pop	{r4, r7, pc}
 800ebcc:	20000002 	.word	0x20000002
 800ebd0:	20000004 	.word	0x20000004

0800ebd4 <ExtFlash_SendByte>:

/*******************************************************************************
 SPI_FLASH_SendByte
*******************************************************************************/
char ExtFlash_SendByte(char byte)
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b084      	sub	sp, #16
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	4603      	mov	r3, r0
 800ebdc:	71fb      	strb	r3, [r7, #7]
   char retbyte=0;
 800ebde:	2300      	movs	r3, #0
 800ebe0:	73fb      	strb	r3, [r7, #15]
	Tout = 0;
 800ebe2:	4b1d      	ldr	r3, [pc, #116]	; (800ec58 <ExtFlash_SendByte+0x84>)
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	601a      	str	r2, [r3, #0]
  while(HAL_SPI_GetState( &hspi2 ) != HAL_SPI_STATE_READY) /*SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET*/
 800ebe8:	e009      	b.n	800ebfe <ExtFlash_SendByte+0x2a>
  {
    if(Tout++ > TMAX)
 800ebea:	4b1b      	ldr	r3, [pc, #108]	; (800ec58 <ExtFlash_SendByte+0x84>)
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	1c5a      	adds	r2, r3, #1
 800ebf0:	4919      	ldr	r1, [pc, #100]	; (800ec58 <ExtFlash_SendByte+0x84>)
 800ebf2:	600a      	str	r2, [r1, #0]
 800ebf4:	4a19      	ldr	r2, [pc, #100]	; (800ec5c <ExtFlash_SendByte+0x88>)
 800ebf6:	4293      	cmp	r3, r2
 800ebf8:	d901      	bls.n	800ebfe <ExtFlash_SendByte+0x2a>
    	return 255;
 800ebfa:	23ff      	movs	r3, #255	; 0xff
 800ebfc:	e027      	b.n	800ec4e <ExtFlash_SendByte+0x7a>
  while(HAL_SPI_GetState( &hspi2 ) != HAL_SPI_STATE_READY) /*SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET*/
 800ebfe:	4818      	ldr	r0, [pc, #96]	; (800ec60 <ExtFlash_SendByte+0x8c>)
 800ec00:	f00d ffa0 	bl	801cb44 <HAL_SPI_GetState>
 800ec04:	4603      	mov	r3, r0
 800ec06:	2b01      	cmp	r3, #1
 800ec08:	d1ef      	bne.n	800ebea <ExtFlash_SendByte+0x16>
  }
  HAL_SPI_Transmit(&hspi2, (unsigned char*)&byte, 1, 1);// timeout 1 ms  SPI_I2S_SendData(SPI2, byte);
 800ec0a:	1df9      	adds	r1, r7, #7
 800ec0c:	2301      	movs	r3, #1
 800ec0e:	2201      	movs	r2, #1
 800ec10:	4813      	ldr	r0, [pc, #76]	; (800ec60 <ExtFlash_SendByte+0x8c>)
 800ec12:	f00d fa9e 	bl	801c152 <HAL_SPI_Transmit>
  Tout = 0;
 800ec16:	4b10      	ldr	r3, [pc, #64]	; (800ec58 <ExtFlash_SendByte+0x84>)
 800ec18:	2200      	movs	r2, #0
 800ec1a:	601a      	str	r2, [r3, #0]
  while(HAL_SPI_GetState( &hspi2 ) != HAL_SPI_STATE_READY) //  while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET)
 800ec1c:	e009      	b.n	800ec32 <ExtFlash_SendByte+0x5e>
  {
    if(Tout++ > TMAX)
 800ec1e:	4b0e      	ldr	r3, [pc, #56]	; (800ec58 <ExtFlash_SendByte+0x84>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	1c5a      	adds	r2, r3, #1
 800ec24:	490c      	ldr	r1, [pc, #48]	; (800ec58 <ExtFlash_SendByte+0x84>)
 800ec26:	600a      	str	r2, [r1, #0]
 800ec28:	4a0c      	ldr	r2, [pc, #48]	; (800ec5c <ExtFlash_SendByte+0x88>)
 800ec2a:	4293      	cmp	r3, r2
 800ec2c:	d901      	bls.n	800ec32 <ExtFlash_SendByte+0x5e>
    	return 255;
 800ec2e:	23ff      	movs	r3, #255	; 0xff
 800ec30:	e00d      	b.n	800ec4e <ExtFlash_SendByte+0x7a>
  while(HAL_SPI_GetState( &hspi2 ) != HAL_SPI_STATE_READY) //  while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET)
 800ec32:	480b      	ldr	r0, [pc, #44]	; (800ec60 <ExtFlash_SendByte+0x8c>)
 800ec34:	f00d ff86 	bl	801cb44 <HAL_SPI_GetState>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	2b01      	cmp	r3, #1
 800ec3c:	d1ef      	bne.n	800ec1e <ExtFlash_SendByte+0x4a>
  }
  HAL_SPI_Receive(&hspi2, (unsigned char*)&retbyte, 1, 1); //timeout 1 ms
 800ec3e:	f107 010f 	add.w	r1, r7, #15
 800ec42:	2301      	movs	r3, #1
 800ec44:	2201      	movs	r2, #1
 800ec46:	4806      	ldr	r0, [pc, #24]	; (800ec60 <ExtFlash_SendByte+0x8c>)
 800ec48:	f00d fbbf 	bl	801c3ca <HAL_SPI_Receive>
  return retbyte/*SPI_I2S_ReceiveData(SPI2)*/;
 800ec4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec4e:	4618      	mov	r0, r3
 800ec50:	3710      	adds	r7, #16
 800ec52:	46bd      	mov	sp, r7
 800ec54:	bd80      	pop	{r7, pc}
 800ec56:	bf00      	nop
 800ec58:	200015d0 	.word	0x200015d0
 800ec5c:	000186a0 	.word	0x000186a0
 800ec60:	20006890 	.word	0x20006890

0800ec64 <ExtFlash_WaitForWriteEnd>:

/*******************************************************************************
 SPI_FLASH_WaitForWriteEnd
*******************************************************************************/
void ExtFlash_WaitForWriteEnd(void)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b082      	sub	sp, #8
 800ec68:	af00      	add	r7, sp, #0
  char FLASH_Status = 0;
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	71fb      	strb	r3, [r7, #7]

  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800ec6e:	2200      	movs	r2, #0
 800ec70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ec74:	4812      	ldr	r0, [pc, #72]	; (800ecc0 <ExtFlash_WaitForWriteEnd+0x5c>)
 800ec76:	f00a ff67 	bl	8019b48 <HAL_GPIO_WritePin>
  ExtFlash_SendByte(RDSR);
 800ec7a:	2005      	movs	r0, #5
 800ec7c:	f7ff ffaa 	bl	800ebd4 <ExtFlash_SendByte>
  Tout = 0;
 800ec80:	4b10      	ldr	r3, [pc, #64]	; (800ecc4 <ExtFlash_WaitForWriteEnd+0x60>)
 800ec82:	2200      	movs	r2, #0
 800ec84:	601a      	str	r2, [r3, #0]
  do
  {
	  FLASH_Status = ExtFlash_SendByte(Dummy_Byte);
 800ec86:	20a5      	movs	r0, #165	; 0xa5
 800ec88:	f7ff ffa4 	bl	800ebd4 <ExtFlash_SendByte>
 800ec8c:	4603      	mov	r3, r0
 800ec8e:	71fb      	strb	r3, [r7, #7]
      if(Tout++ > TMAX)
 800ec90:	4b0c      	ldr	r3, [pc, #48]	; (800ecc4 <ExtFlash_WaitForWriteEnd+0x60>)
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	1c5a      	adds	r2, r3, #1
 800ec96:	490b      	ldr	r1, [pc, #44]	; (800ecc4 <ExtFlash_WaitForWriteEnd+0x60>)
 800ec98:	600a      	str	r2, [r1, #0]
 800ec9a:	4a0b      	ldr	r2, [pc, #44]	; (800ecc8 <ExtFlash_WaitForWriteEnd+0x64>)
 800ec9c:	4293      	cmp	r3, r2
 800ec9e:	d80b      	bhi.n	800ecb8 <ExtFlash_WaitForWriteEnd+0x54>
    	  return;
  }
  while((FLASH_Status & WIP_Flag) == SET);              // Write in progress
 800eca0:	79fb      	ldrb	r3, [r7, #7]
 800eca2:	f003 0301 	and.w	r3, r3, #1
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d1ed      	bne.n	800ec86 <ExtFlash_WaitForWriteEnd+0x22>
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET);
 800ecaa:	2201      	movs	r2, #1
 800ecac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ecb0:	4803      	ldr	r0, [pc, #12]	; (800ecc0 <ExtFlash_WaitForWriteEnd+0x5c>)
 800ecb2:	f00a ff49 	bl	8019b48 <HAL_GPIO_WritePin>
 800ecb6:	e000      	b.n	800ecba <ExtFlash_WaitForWriteEnd+0x56>
    	  return;
 800ecb8:	bf00      	nop
}
 800ecba:	3708      	adds	r7, #8
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	bd80      	pop	{r7, pc}
 800ecc0:	40020400 	.word	0x40020400
 800ecc4:	200015d0 	.word	0x200015d0
 800ecc8:	000186a0 	.word	0x000186a0

0800eccc <ExtFlash_PageRD>:

/*******************************************************************************
 SPI_FLASH_BufferRead
*******************************************************************************/
void ExtFlash_PageRD(char* pBuffer, unsigned ReadAddr, short Length)
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b084      	sub	sp, #16
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	60f8      	str	r0, [r7, #12]
 800ecd4:	60b9      	str	r1, [r7, #8]
 800ecd6:	4613      	mov	r3, r2
 800ecd8:	80fb      	strh	r3, [r7, #6]
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800ecda:	2201      	movs	r2, #1
 800ecdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ece0:	481d      	ldr	r0, [pc, #116]	; (800ed58 <ExtFlash_PageRD+0x8c>)
 800ece2:	f00a ff31 	bl	8019b48 <HAL_GPIO_WritePin>
  ExtFlash_WaitForWriteEnd();
 800ece6:	f7ff ffbd 	bl	800ec64 <ExtFlash_WaitForWriteEnd>
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800ecea:	2200      	movs	r2, #0
 800ecec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ecf0:	4819      	ldr	r0, [pc, #100]	; (800ed58 <ExtFlash_PageRD+0x8c>)
 800ecf2:	f00a ff29 	bl	8019b48 <HAL_GPIO_WritePin>
  ExtFlash_SendByte(READ);
 800ecf6:	2003      	movs	r0, #3
 800ecf8:	f7ff ff6c 	bl	800ebd4 <ExtFlash_SendByte>
  ExtFlash_SendByte((ReadAddr & 0xFF0000) >> 16);
 800ecfc:	68bb      	ldr	r3, [r7, #8]
 800ecfe:	0c1b      	lsrs	r3, r3, #16
 800ed00:	b2db      	uxtb	r3, r3
 800ed02:	4618      	mov	r0, r3
 800ed04:	f7ff ff66 	bl	800ebd4 <ExtFlash_SendByte>
  ExtFlash_SendByte((ReadAddr& 0xFF00) >> 8);
 800ed08:	68bb      	ldr	r3, [r7, #8]
 800ed0a:	0a1b      	lsrs	r3, r3, #8
 800ed0c:	b2db      	uxtb	r3, r3
 800ed0e:	4618      	mov	r0, r3
 800ed10:	f7ff ff60 	bl	800ebd4 <ExtFlash_SendByte>
  ExtFlash_SendByte(ReadAddr & 0xFF);
 800ed14:	68bb      	ldr	r3, [r7, #8]
 800ed16:	b2db      	uxtb	r3, r3
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f7ff ff5b 	bl	800ebd4 <ExtFlash_SendByte>

  while(Length--)
 800ed1e:	e009      	b.n	800ed34 <ExtFlash_PageRD+0x68>
  { // while there is data to be read
    *pBuffer = (ExtFlash_SendByte(Dummy_Byte));
 800ed20:	20a5      	movs	r0, #165	; 0xa5
 800ed22:	f7ff ff57 	bl	800ebd4 <ExtFlash_SendByte>
 800ed26:	4603      	mov	r3, r0
 800ed28:	461a      	mov	r2, r3
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	701a      	strb	r2, [r3, #0]
    pBuffer++;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	3301      	adds	r3, #1
 800ed32:	60fb      	str	r3, [r7, #12]
  while(Length--)
 800ed34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ed38:	b29a      	uxth	r2, r3
 800ed3a:	3a01      	subs	r2, #1
 800ed3c:	b292      	uxth	r2, r2
 800ed3e:	80fa      	strh	r2, [r7, #6]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d1ed      	bne.n	800ed20 <ExtFlash_PageRD+0x54>
  }
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET);
 800ed44:	2201      	movs	r2, #1
 800ed46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ed4a:	4803      	ldr	r0, [pc, #12]	; (800ed58 <ExtFlash_PageRD+0x8c>)
 800ed4c:	f00a fefc 	bl	8019b48 <HAL_GPIO_WritePin>
}
 800ed50:	bf00      	nop
 800ed52:	3710      	adds	r7, #16
 800ed54:	46bd      	mov	sp, r7
 800ed56:	bd80      	pop	{r7, pc}
 800ed58:	40020400 	.word	0x40020400

0800ed5c <ExtFlash_WriteEnable>:

/*******************************************************************************
 SPI_FLASH_WriteEnable
*******************************************************************************/
void ExtFlash_WriteEnable(void)
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800ed60:	2200      	movs	r2, #0
 800ed62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ed66:	4807      	ldr	r0, [pc, #28]	; (800ed84 <ExtFlash_WriteEnable+0x28>)
 800ed68:	f00a feee 	bl	8019b48 <HAL_GPIO_WritePin>
  ExtFlash_SendByte(WREN);
 800ed6c:	2006      	movs	r0, #6
 800ed6e:	f7ff ff31 	bl	800ebd4 <ExtFlash_SendByte>
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800ed72:	2201      	movs	r2, #1
 800ed74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ed78:	4802      	ldr	r0, [pc, #8]	; (800ed84 <ExtFlash_WriteEnable+0x28>)
 800ed7a:	f00a fee5 	bl	8019b48 <HAL_GPIO_WritePin>
}
 800ed7e:	bf00      	nop
 800ed80:	bd80      	pop	{r7, pc}
 800ed82:	bf00      	nop
 800ed84:	40020400 	.word	0x40020400

0800ed88 <ExtFlash_PageProg>:

/*******************************************************************************
 дFLASHҳ(256 Bytes)�� Mode=0: ��0��1���ݸ�д   Mode=1: ������д
*******************************************************************************/
void ExtFlash_PageProg(char* pBuffer, unsigned WriteAddr)
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b084      	sub	sp, #16
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
 800ed90:	6039      	str	r1, [r7, #0]
  short   Lenght = 256;
 800ed92:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ed96:	81fb      	strh	r3, [r7, #14]

  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800ed98:	2201      	movs	r2, #1
 800ed9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ed9e:	481f      	ldr	r0, [pc, #124]	; (800ee1c <ExtFlash_PageProg+0x94>)
 800eda0:	f00a fed2 	bl	8019b48 <HAL_GPIO_WritePin>
  ExtFlash_WaitForWriteEnd();
 800eda4:	f7ff ff5e 	bl	800ec64 <ExtFlash_WaitForWriteEnd>
  ExtFlash_WriteEnable();
 800eda8:	f7ff ffd8 	bl	800ed5c <ExtFlash_WriteEnable>
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800edac:	2200      	movs	r2, #0
 800edae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800edb2:	481a      	ldr	r0, [pc, #104]	; (800ee1c <ExtFlash_PageProg+0x94>)
 800edb4:	f00a fec8 	bl	8019b48 <HAL_GPIO_WritePin>
  ExtFlash_SendByte(PP);
 800edb8:	2002      	movs	r0, #2
 800edba:	f7ff ff0b 	bl	800ebd4 <ExtFlash_SendByte>
  ExtFlash_SendByte((WriteAddr & 0xFF0000) >> 16);
 800edbe:	683b      	ldr	r3, [r7, #0]
 800edc0:	0c1b      	lsrs	r3, r3, #16
 800edc2:	b2db      	uxtb	r3, r3
 800edc4:	4618      	mov	r0, r3
 800edc6:	f7ff ff05 	bl	800ebd4 <ExtFlash_SendByte>
  ExtFlash_SendByte((WriteAddr & 0xFF00) >> 8);
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	0a1b      	lsrs	r3, r3, #8
 800edce:	b2db      	uxtb	r3, r3
 800edd0:	4618      	mov	r0, r3
 800edd2:	f7ff feff 	bl	800ebd4 <ExtFlash_SendByte>
  ExtFlash_SendByte(WriteAddr & 0xFF);
 800edd6:	683b      	ldr	r3, [r7, #0]
 800edd8:	b2db      	uxtb	r3, r3
 800edda:	4618      	mov	r0, r3
 800eddc:	f7ff fefa 	bl	800ebd4 <ExtFlash_SendByte>
  while(Lenght--) {
 800ede0:	e007      	b.n	800edf2 <ExtFlash_PageProg+0x6a>
    ExtFlash_SendByte((*pBuffer));
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	781b      	ldrb	r3, [r3, #0]
 800ede6:	4618      	mov	r0, r3
 800ede8:	f7ff fef4 	bl	800ebd4 <ExtFlash_SendByte>
    pBuffer++;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	3301      	adds	r3, #1
 800edf0:	607b      	str	r3, [r7, #4]
  while(Lenght--) {
 800edf2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800edf6:	b29a      	uxth	r2, r3
 800edf8:	3a01      	subs	r2, #1
 800edfa:	b292      	uxth	r2, r2
 800edfc:	81fa      	strh	r2, [r7, #14]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d1ef      	bne.n	800ede2 <ExtFlash_PageProg+0x5a>
  }
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800ee02:	2201      	movs	r2, #1
 800ee04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ee08:	4804      	ldr	r0, [pc, #16]	; (800ee1c <ExtFlash_PageProg+0x94>)
 800ee0a:	f00a fe9d 	bl	8019b48 <HAL_GPIO_WritePin>
  ExtFlash_WaitForWriteEnd();
 800ee0e:	f7ff ff29 	bl	800ec64 <ExtFlash_WaitForWriteEnd>
}
 800ee12:	bf00      	nop
 800ee14:	3710      	adds	r7, #16
 800ee16:	46bd      	mov	sp, r7
 800ee18:	bd80      	pop	{r7, pc}
 800ee1a:	bf00      	nop
 800ee1c:	40020400 	.word	0x40020400

0800ee20 <ExtFLASH_SectorErase>:

/*******************************************************************************
 SPI_FLASH_SectorErase  : Sector Erases the specified FLASH Page.(4k/sector)
*******************************************************************************/
void ExtFLASH_SectorErase(unsigned SectorAddr)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b082      	sub	sp, #8
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
    ExtFlash_WriteEnable();
 800ee28:	f7ff ff98 	bl	800ed5c <ExtFlash_WriteEnable>
    HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ee32:	4811      	ldr	r0, [pc, #68]	; (800ee78 <ExtFLASH_SectorErase+0x58>)
 800ee34:	f00a fe88 	bl	8019b48 <HAL_GPIO_WritePin>
    ExtFlash_SendByte(SE);
 800ee38:	2020      	movs	r0, #32
 800ee3a:	f7ff fecb 	bl	800ebd4 <ExtFlash_SendByte>
    ExtFlash_SendByte((SectorAddr & 0xFF0000) >> 16);   //Send high address byte
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	0c1b      	lsrs	r3, r3, #16
 800ee42:	b2db      	uxtb	r3, r3
 800ee44:	4618      	mov	r0, r3
 800ee46:	f7ff fec5 	bl	800ebd4 <ExtFlash_SendByte>
    ExtFlash_SendByte((SectorAddr & 0xFF00) >> 8);      //Send medium address byte
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	0a1b      	lsrs	r3, r3, #8
 800ee4e:	b2db      	uxtb	r3, r3
 800ee50:	4618      	mov	r0, r3
 800ee52:	f7ff febf 	bl	800ebd4 <ExtFlash_SendByte>
    ExtFlash_SendByte(SectorAddr & 0xFF);               //Send low address byte */
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	b2db      	uxtb	r3, r3
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	f7ff feba 	bl	800ebd4 <ExtFlash_SendByte>
    HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800ee60:	2201      	movs	r2, #1
 800ee62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ee66:	4804      	ldr	r0, [pc, #16]	; (800ee78 <ExtFLASH_SectorErase+0x58>)
 800ee68:	f00a fe6e 	bl	8019b48 <HAL_GPIO_WritePin>
    ExtFlash_WaitForWriteEnd();                         // Wait the end of Flash writing
 800ee6c:	f7ff fefa 	bl	800ec64 <ExtFlash_WaitForWriteEnd>
}
 800ee70:	bf00      	nop
 800ee72:	3708      	adds	r7, #8
 800ee74:	46bd      	mov	sp, r7
 800ee76:	bd80      	pop	{r7, pc}
 800ee78:	40020400 	.word	0x40020400

0800ee7c <ExtFlash_PageWR>:

void ExtFlash_PageWR(char* pBuffer, unsigned WriteAddr)
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b0c8      	sub	sp, #288	; 0x120
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	1d3b      	adds	r3, r7, #4
 800ee84:	6018      	str	r0, [r3, #0]
 800ee86:	463b      	mov	r3, r7
 800ee88:	6019      	str	r1, [r3, #0]
  unsigned addr,i,j;
  char* ptr;
  char  page=0,flag=0;
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800ee90:	2300      	movs	r3, #0
 800ee92:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
  char  buffer[256];

  flag=0;
 800ee96:	2300      	movs	r3, #0
 800ee98:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
    addr=WriteAddr & 0xFFF000;
 800ee9c:	463b      	mov	r3, r7
 800ee9e:	681a      	ldr	r2, [r3, #0]
 800eea0:	4b3b      	ldr	r3, [pc, #236]	; (800ef90 <ExtFlash_PageWR+0x114>)
 800eea2:	4013      	ands	r3, r2
 800eea4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    page=16;
 800eea8:	2310      	movs	r3, #16
 800eeaa:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  while(page>0)
 800eeae:	e02e      	b.n	800ef0e <ExtFlash_PageWR+0x92>
  {
    ExtFlash_PageRD((char*)&buffer,addr, 256);
 800eeb0:	f107 030c 	add.w	r3, r7, #12
 800eeb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800eeb8:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800eebc:	4618      	mov	r0, r3
 800eebe:	f7ff ff05 	bl	800eccc <ExtFlash_PageRD>
    for(j=0;j<255;j++){
 800eec2:	2300      	movs	r3, #0
 800eec4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800eec8:	e012      	b.n	800eef0 <ExtFlash_PageWR+0x74>
      if(buffer[j++]!=0xff){
 800eeca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eece:	1c5a      	adds	r2, r3, #1
 800eed0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 800eed4:	f107 020c 	add.w	r2, r7, #12
 800eed8:	5cd3      	ldrb	r3, [r2, r3]
 800eeda:	2bff      	cmp	r3, #255	; 0xff
 800eedc:	d003      	beq.n	800eee6 <ExtFlash_PageWR+0x6a>
        flag=1;
 800eede:	2301      	movs	r3, #1
 800eee0:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
        break;
 800eee4:	e008      	b.n	800eef8 <ExtFlash_PageWR+0x7c>
    for(j=0;j<255;j++){
 800eee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eeea:	3301      	adds	r3, #1
 800eeec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800eef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eef4:	2bfe      	cmp	r3, #254	; 0xfe
 800eef6:	d9e8      	bls.n	800eeca <ExtFlash_PageWR+0x4e>
      }
    }
    addr+=256;
 800eef8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800eefc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ef00:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    page--;
 800ef04:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800ef08:	3b01      	subs	r3, #1
 800ef0a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  while(page>0)
 800ef0e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d1cc      	bne.n	800eeb0 <ExtFlash_PageWR+0x34>
  }
    page=16;
 800ef16:	2310      	movs	r3, #16
 800ef18:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
    addr=WriteAddr & 0xFFF000;
 800ef1c:	463b      	mov	r3, r7
 800ef1e:	681a      	ldr	r2, [r3, #0]
 800ef20:	4b1b      	ldr	r3, [pc, #108]	; (800ef90 <ExtFlash_PageWR+0x114>)
 800ef22:	4013      	ands	r3, r2
 800ef24:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    if(flag==1)ExtFLASH_SectorErase(addr);
 800ef28:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800ef2c:	2b01      	cmp	r3, #1
 800ef2e:	d103      	bne.n	800ef38 <ExtFlash_PageWR+0xbc>
 800ef30:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800ef34:	f7ff ff74 	bl	800ee20 <ExtFLASH_SectorErase>
  ptr=pBuffer;
 800ef38:	1d3b      	adds	r3, r7, #4
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  for(i=0;i<page;i++){
 800ef40:	2300      	movs	r3, #0
 800ef42:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800ef46:	e016      	b.n	800ef76 <ExtFlash_PageWR+0xfa>
    ExtFlash_PageProg(ptr, addr);
 800ef48:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800ef4c:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800ef50:	f7ff ff1a 	bl	800ed88 <ExtFlash_PageProg>
    addr+=256;
 800ef54:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ef58:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ef5c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    ptr+=256;
 800ef60:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ef64:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ef68:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  for(i=0;i<page;i++){
 800ef6c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ef70:	3301      	adds	r3, #1
 800ef72:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800ef76:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800ef7a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800ef7e:	429a      	cmp	r2, r3
 800ef80:	d3e2      	bcc.n	800ef48 <ExtFlash_PageWR+0xcc>
  }
}
 800ef82:	bf00      	nop
 800ef84:	bf00      	nop
 800ef86:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}
 800ef8e:	bf00      	nop
 800ef90:	00fff000 	.word	0x00fff000

0800ef94 <ReadDiskData>:
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b086      	sub	sp, #24
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	60f8      	str	r0, [r7, #12]
 800ef9c:	60b9      	str	r1, [r7, #8]
 800ef9e:	4613      	mov	r3, r2
 800efa0:	80fb      	strh	r3, [r7, #6]
 800efa2:	2300      	movs	r3, #0
 800efa4:	75fb      	strb	r3, [r7, #23]
 800efa6:	4b0d      	ldr	r3, [pc, #52]	; (800efdc <ReadDiskData+0x48>)
 800efa8:	2200      	movs	r2, #0
 800efaa:	701a      	strb	r2, [r3, #0]
 800efac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800efb0:	461a      	mov	r2, r3
 800efb2:	68b9      	ldr	r1, [r7, #8]
 800efb4:	68f8      	ldr	r0, [r7, #12]
 800efb6:	f7ff fe89 	bl	800eccc <ExtFlash_PageRD>
 800efba:	7dfb      	ldrb	r3, [r7, #23]
 800efbc:	1c5a      	adds	r2, r3, #1
 800efbe:	75fa      	strb	r2, [r7, #23]
 800efc0:	2b06      	cmp	r3, #6
 800efc2:	d901      	bls.n	800efc8 <ReadDiskData+0x34>
 800efc4:	2301      	movs	r3, #1
 800efc6:	e004      	b.n	800efd2 <ReadDiskData+0x3e>
 800efc8:	4b04      	ldr	r3, [pc, #16]	; (800efdc <ReadDiskData+0x48>)
 800efca:	781b      	ldrb	r3, [r3, #0]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d1ea      	bne.n	800efa6 <ReadDiskData+0x12>
 800efd0:	2300      	movs	r3, #0
 800efd2:	4618      	mov	r0, r3
 800efd4:	3718      	adds	r7, #24
 800efd6:	46bd      	mov	sp, r7
 800efd8:	bd80      	pop	{r7, pc}
 800efda:	bf00      	nop
 800efdc:	2000078f 	.word	0x2000078f

0800efe0 <OpenFileRd>:
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b086      	sub	sp, #24
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	60f8      	str	r0, [r7, #12]
 800efe8:	60b9      	str	r1, [r7, #8]
 800efea:	607a      	str	r2, [r7, #4]
 800efec:	603b      	str	r3, [r7, #0]
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	2200      	movs	r2, #0
 800eff2:	801a      	strh	r2, [r3, #0]
 800eff4:	4b35      	ldr	r3, [pc, #212]	; (800f0cc <OpenFileRd+0xec>)
 800eff6:	689a      	ldr	r2, [r3, #8]
 800eff8:	683b      	ldr	r3, [r7, #0]
 800effa:	601a      	str	r2, [r3, #0]
 800effc:	e05b      	b.n	800f0b6 <OpenFileRd+0xd6>
 800effe:	683b      	ldr	r3, [r7, #0]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	4a32      	ldr	r2, [pc, #200]	; (800f0cc <OpenFileRd+0xec>)
 800f004:	6952      	ldr	r2, [r2, #20]
 800f006:	b212      	sxth	r2, r2
 800f008:	4619      	mov	r1, r3
 800f00a:	68f8      	ldr	r0, [r7, #12]
 800f00c:	f7ff ffc2 	bl	800ef94 <ReadDiskData>
 800f010:	4603      	mov	r3, r0
 800f012:	2b00      	cmp	r3, #0
 800f014:	d001      	beq.n	800f01a <OpenFileRd+0x3a>
 800f016:	2301      	movs	r3, #1
 800f018:	e054      	b.n	800f0c4 <OpenFileRd+0xe4>
 800f01a:	2300      	movs	r3, #0
 800f01c:	82bb      	strh	r3, [r7, #20]
 800f01e:	e044      	b.n	800f0aa <OpenFileRd+0xca>
 800f020:	2300      	movs	r3, #0
 800f022:	82fb      	strh	r3, [r7, #22]
 800f024:	e031      	b.n	800f08a <OpenFileRd+0xaa>
 800f026:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800f02a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f02e:	4413      	add	r3, r2
 800f030:	461a      	mov	r2, r3
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	4413      	add	r3, r2
 800f036:	781b      	ldrb	r3, [r3, #0]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d01e      	beq.n	800f07a <OpenFileRd+0x9a>
 800f03c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800f040:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f044:	4413      	add	r3, r2
 800f046:	461a      	mov	r2, r3
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	4413      	add	r3, r2
 800f04c:	781a      	ldrb	r2, [r3, #0]
 800f04e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f052:	68b9      	ldr	r1, [r7, #8]
 800f054:	440b      	add	r3, r1
 800f056:	781b      	ldrb	r3, [r3, #0]
 800f058:	429a      	cmp	r2, r3
 800f05a:	d11b      	bne.n	800f094 <OpenFileRd+0xb4>
 800f05c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f060:	2b0a      	cmp	r3, #10
 800f062:	d10c      	bne.n	800f07e <OpenFileRd+0x9e>
 800f064:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f068:	331a      	adds	r3, #26
 800f06a:	68fa      	ldr	r2, [r7, #12]
 800f06c:	4413      	add	r3, r2
 800f06e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	801a      	strh	r2, [r3, #0]
 800f076:	2300      	movs	r3, #0
 800f078:	e024      	b.n	800f0c4 <OpenFileRd+0xe4>
 800f07a:	2304      	movs	r3, #4
 800f07c:	e022      	b.n	800f0c4 <OpenFileRd+0xe4>
 800f07e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f082:	b29b      	uxth	r3, r3
 800f084:	3301      	adds	r3, #1
 800f086:	b29b      	uxth	r3, r3
 800f088:	82fb      	strh	r3, [r7, #22]
 800f08a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f08e:	2b0a      	cmp	r3, #10
 800f090:	ddc9      	ble.n	800f026 <OpenFileRd+0x46>
 800f092:	e000      	b.n	800f096 <OpenFileRd+0xb6>
 800f094:	bf00      	nop
 800f096:	683b      	ldr	r3, [r7, #0]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	f103 0220 	add.w	r2, r3, #32
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	601a      	str	r2, [r3, #0]
 800f0a2:	8abb      	ldrh	r3, [r7, #20]
 800f0a4:	3320      	adds	r3, #32
 800f0a6:	b29b      	uxth	r3, r3
 800f0a8:	82bb      	strh	r3, [r7, #20]
 800f0aa:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800f0ae:	4b07      	ldr	r3, [pc, #28]	; (800f0cc <OpenFileRd+0xec>)
 800f0b0:	695b      	ldr	r3, [r3, #20]
 800f0b2:	429a      	cmp	r2, r3
 800f0b4:	d3b4      	bcc.n	800f020 <OpenFileRd+0x40>
 800f0b6:	683b      	ldr	r3, [r7, #0]
 800f0b8:	681a      	ldr	r2, [r3, #0]
 800f0ba:	4b04      	ldr	r3, [pc, #16]	; (800f0cc <OpenFileRd+0xec>)
 800f0bc:	68db      	ldr	r3, [r3, #12]
 800f0be:	429a      	cmp	r2, r3
 800f0c0:	d39d      	bcc.n	800effe <OpenFileRd+0x1e>
 800f0c2:	2303      	movs	r3, #3
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	3718      	adds	r7, #24
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	bd80      	pop	{r7, pc}
 800f0cc:	20000194 	.word	0x20000194

0800f0d0 <ProgDiskPage>:
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b084      	sub	sp, #16
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
 800f0d8:	6039      	str	r1, [r7, #0]
 800f0da:	2300      	movs	r3, #0
 800f0dc:	73fb      	strb	r3, [r7, #15]
 800f0de:	4b0c      	ldr	r3, [pc, #48]	; (800f110 <ProgDiskPage+0x40>)
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	701a      	strb	r2, [r3, #0]
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	4619      	mov	r1, r3
 800f0e8:	6878      	ldr	r0, [r7, #4]
 800f0ea:	f7ff fec7 	bl	800ee7c <ExtFlash_PageWR>
 800f0ee:	7bfb      	ldrb	r3, [r7, #15]
 800f0f0:	1c5a      	adds	r2, r3, #1
 800f0f2:	73fa      	strb	r2, [r7, #15]
 800f0f4:	2b06      	cmp	r3, #6
 800f0f6:	d901      	bls.n	800f0fc <ProgDiskPage+0x2c>
 800f0f8:	2301      	movs	r3, #1
 800f0fa:	e004      	b.n	800f106 <ProgDiskPage+0x36>
 800f0fc:	4b04      	ldr	r3, [pc, #16]	; (800f110 <ProgDiskPage+0x40>)
 800f0fe:	781b      	ldrb	r3, [r3, #0]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d1ec      	bne.n	800f0de <ProgDiskPage+0xe>
 800f104:	2300      	movs	r3, #0
 800f106:	4618      	mov	r0, r3
 800f108:	3710      	adds	r7, #16
 800f10a:	46bd      	mov	sp, r7
 800f10c:	bd80      	pop	{r7, pc}
 800f10e:	bf00      	nop
 800f110:	2000078f 	.word	0x2000078f

0800f114 <SeekBlank>:
 800f114:	b580      	push	{r7, lr}
 800f116:	b084      	sub	sp, #16
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
 800f11c:	6039      	str	r1, [r7, #0]
 800f11e:	2301      	movs	r3, #1
 800f120:	73fb      	strb	r3, [r7, #15]
 800f122:	683b      	ldr	r3, [r7, #0]
 800f124:	3302      	adds	r3, #2
 800f126:	683a      	ldr	r2, [r7, #0]
 800f128:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f12c:	801a      	strh	r2, [r3, #0]
 800f12e:	683b      	ldr	r3, [r7, #0]
 800f130:	2200      	movs	r2, #0
 800f132:	801a      	strh	r2, [r3, #0]
 800f134:	e05b      	b.n	800f1ee <SeekBlank+0xda>
 800f136:	4b34      	ldr	r3, [pc, #208]	; (800f208 <SeekBlank+0xf4>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	683a      	ldr	r2, [r7, #0]
 800f13c:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f140:	441a      	add	r2, r3
 800f142:	683b      	ldr	r3, [r7, #0]
 800f144:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f148:	0fd9      	lsrs	r1, r3, #31
 800f14a:	440b      	add	r3, r1
 800f14c:	105b      	asrs	r3, r3, #1
 800f14e:	b21b      	sxth	r3, r3
 800f150:	18d1      	adds	r1, r2, r3
 800f152:	f107 0308 	add.w	r3, r7, #8
 800f156:	2202      	movs	r2, #2
 800f158:	4618      	mov	r0, r3
 800f15a:	f7ff ff1b 	bl	800ef94 <ReadDiskData>
 800f15e:	4603      	mov	r3, r0
 800f160:	2b00      	cmp	r3, #0
 800f162:	d001      	beq.n	800f168 <SeekBlank+0x54>
 800f164:	2301      	movs	r3, #1
 800f166:	e04a      	b.n	800f1fe <SeekBlank+0xea>
 800f168:	683b      	ldr	r3, [r7, #0]
 800f16a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f16e:	b29b      	uxth	r3, r3
 800f170:	f003 0301 	and.w	r3, r3, #1
 800f174:	2b00      	cmp	r3, #0
 800f176:	d006      	beq.n	800f186 <SeekBlank+0x72>
 800f178:	f107 0308 	add.w	r3, r7, #8
 800f17c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f180:	111b      	asrs	r3, r3, #4
 800f182:	b21b      	sxth	r3, r3
 800f184:	e006      	b.n	800f194 <SeekBlank+0x80>
 800f186:	f107 0308 	add.w	r3, r7, #8
 800f18a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f18e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f192:	b21b      	sxth	r3, r3
 800f194:	81bb      	strh	r3, [r7, #12]
 800f196:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d10f      	bne.n	800f1be <SeekBlank+0xaa>
 800f19e:	7bfb      	ldrb	r3, [r7, #15]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d10c      	bne.n	800f1be <SeekBlank+0xaa>
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	3302      	adds	r3, #2
 800f1ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f1b2:	429a      	cmp	r2, r3
 800f1b4:	d003      	beq.n	800f1be <SeekBlank+0xaa>
 800f1b6:	2301      	movs	r3, #1
 800f1b8:	73fb      	strb	r3, [r7, #15]
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	e01f      	b.n	800f1fe <SeekBlank+0xea>
 800f1be:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d10a      	bne.n	800f1dc <SeekBlank+0xc8>
 800f1c6:	7bfb      	ldrb	r3, [r7, #15]
 800f1c8:	2b01      	cmp	r3, #1
 800f1ca:	d107      	bne.n	800f1dc <SeekBlank+0xc8>
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	3304      	adds	r3, #4
 800f1d0:	683a      	ldr	r2, [r7, #0]
 800f1d2:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f1d6:	801a      	strh	r2, [r3, #0]
 800f1d8:	2300      	movs	r3, #0
 800f1da:	73fb      	strb	r3, [r7, #15]
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f1e2:	b29b      	uxth	r3, r3
 800f1e4:	3301      	adds	r3, #1
 800f1e6:	b29b      	uxth	r3, r3
 800f1e8:	b21a      	sxth	r2, r3
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	801a      	strh	r2, [r3, #0]
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f1f4:	f640 72fe 	movw	r2, #4094	; 0xffe
 800f1f8:	4293      	cmp	r3, r2
 800f1fa:	dd9c      	ble.n	800f136 <SeekBlank+0x22>
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	4618      	mov	r0, r3
 800f200:	3710      	adds	r7, #16
 800f202:	46bd      	mov	sp, r7
 800f204:	bd80      	pop	{r7, pc}
 800f206:	bf00      	nop
 800f208:	20000194 	.word	0x20000194

0800f20c <SetCluster>:
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b086      	sub	sp, #24
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
 800f214:	6039      	str	r1, [r7, #0]
 800f216:	683b      	ldr	r3, [r7, #0]
 800f218:	885b      	ldrh	r3, [r3, #2]
 800f21a:	82fb      	strh	r3, [r7, #22]
 800f21c:	683b      	ldr	r3, [r7, #0]
 800f21e:	881b      	ldrh	r3, [r3, #0]
 800f220:	82bb      	strh	r3, [r7, #20]
 800f222:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f226:	0fda      	lsrs	r2, r3, #31
 800f228:	4413      	add	r3, r2
 800f22a:	105b      	asrs	r3, r3, #1
 800f22c:	b21b      	sxth	r3, r3
 800f22e:	b29a      	uxth	r2, r3
 800f230:	8afb      	ldrh	r3, [r7, #22]
 800f232:	4413      	add	r3, r2
 800f234:	b29b      	uxth	r3, r3
 800f236:	827b      	strh	r3, [r7, #18]
 800f238:	4b36      	ldr	r3, [pc, #216]	; (800f314 <SetCluster+0x108>)
 800f23a:	681a      	ldr	r2, [r3, #0]
 800f23c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f240:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800f244:	4413      	add	r3, r2
 800f246:	60fb      	str	r3, [r7, #12]
 800f248:	8a7b      	ldrh	r3, [r7, #18]
 800f24a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f24e:	827b      	strh	r3, [r7, #18]
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	4a30      	ldr	r2, [pc, #192]	; (800f314 <SetCluster+0x108>)
 800f254:	6952      	ldr	r2, [r2, #20]
 800f256:	b212      	sxth	r2, r2
 800f258:	4619      	mov	r1, r3
 800f25a:	6878      	ldr	r0, [r7, #4]
 800f25c:	f7ff fe9a 	bl	800ef94 <ReadDiskData>
 800f260:	4603      	mov	r3, r0
 800f262:	2b00      	cmp	r3, #0
 800f264:	d001      	beq.n	800f26a <SetCluster+0x5e>
 800f266:	2301      	movs	r3, #1
 800f268:	e04f      	b.n	800f30a <SetCluster+0xfe>
 800f26a:	8afb      	ldrh	r3, [r7, #22]
 800f26c:	f003 0301 	and.w	r3, r3, #1
 800f270:	2b00      	cmp	r3, #0
 800f272:	d01e      	beq.n	800f2b2 <SetCluster+0xa6>
 800f274:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f278:	687a      	ldr	r2, [r7, #4]
 800f27a:	4413      	add	r3, r2
 800f27c:	781b      	ldrb	r3, [r3, #0]
 800f27e:	f003 030f 	and.w	r3, r3, #15
 800f282:	b2d9      	uxtb	r1, r3
 800f284:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f288:	011b      	lsls	r3, r3, #4
 800f28a:	b2da      	uxtb	r2, r3
 800f28c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	4403      	add	r3, r0
 800f294:	440a      	add	r2, r1
 800f296:	b2d2      	uxtb	r2, r2
 800f298:	701a      	strb	r2, [r3, #0]
 800f29a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f29e:	111b      	asrs	r3, r3, #4
 800f2a0:	b219      	sxth	r1, r3
 800f2a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f2a6:	3301      	adds	r3, #1
 800f2a8:	687a      	ldr	r2, [r7, #4]
 800f2aa:	4413      	add	r3, r2
 800f2ac:	b2ca      	uxtb	r2, r1
 800f2ae:	701a      	strb	r2, [r3, #0]
 800f2b0:	e021      	b.n	800f2f6 <SetCluster+0xea>
 800f2b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f2b6:	687a      	ldr	r2, [r7, #4]
 800f2b8:	4413      	add	r3, r2
 800f2ba:	8aba      	ldrh	r2, [r7, #20]
 800f2bc:	b2d2      	uxtb	r2, r2
 800f2be:	701a      	strb	r2, [r3, #0]
 800f2c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f2c4:	3301      	adds	r3, #1
 800f2c6:	687a      	ldr	r2, [r7, #4]
 800f2c8:	4413      	add	r3, r2
 800f2ca:	781b      	ldrb	r3, [r3, #0]
 800f2cc:	b25b      	sxtb	r3, r3
 800f2ce:	f023 030f 	bic.w	r3, r3, #15
 800f2d2:	b25a      	sxtb	r2, r3
 800f2d4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f2d8:	121b      	asrs	r3, r3, #8
 800f2da:	b21b      	sxth	r3, r3
 800f2dc:	b25b      	sxtb	r3, r3
 800f2de:	f003 030f 	and.w	r3, r3, #15
 800f2e2:	b25b      	sxtb	r3, r3
 800f2e4:	4313      	orrs	r3, r2
 800f2e6:	b259      	sxtb	r1, r3
 800f2e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f2ec:	3301      	adds	r3, #1
 800f2ee:	687a      	ldr	r2, [r7, #4]
 800f2f0:	4413      	add	r3, r2
 800f2f2:	b2ca      	uxtb	r2, r1
 800f2f4:	701a      	strb	r2, [r3, #0]
 800f2f6:	68f9      	ldr	r1, [r7, #12]
 800f2f8:	6878      	ldr	r0, [r7, #4]
 800f2fa:	f7ff fee9 	bl	800f0d0 <ProgDiskPage>
 800f2fe:	4603      	mov	r3, r0
 800f300:	2b00      	cmp	r3, #0
 800f302:	d001      	beq.n	800f308 <SetCluster+0xfc>
 800f304:	2301      	movs	r3, #1
 800f306:	e000      	b.n	800f30a <SetCluster+0xfe>
 800f308:	2300      	movs	r3, #0
 800f30a:	4618      	mov	r0, r3
 800f30c:	3718      	adds	r7, #24
 800f30e:	46bd      	mov	sp, r7
 800f310:	bd80      	pop	{r7, pc}
 800f312:	bf00      	nop
 800f314:	20000194 	.word	0x20000194

0800f318 <NextCluster>:
 800f318:	b580      	push	{r7, lr}
 800f31a:	b084      	sub	sp, #16
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
 800f320:	4b27      	ldr	r3, [pc, #156]	; (800f3c0 <NextCluster+0xa8>)
 800f322:	681a      	ldr	r2, [r3, #0]
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f32a:	4618      	mov	r0, r3
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f332:	0fd9      	lsrs	r1, r3, #31
 800f334:	440b      	add	r3, r1
 800f336:	105b      	asrs	r3, r3, #1
 800f338:	b21b      	sxth	r3, r3
 800f33a:	4403      	add	r3, r0
 800f33c:	4413      	add	r3, r2
 800f33e:	60fb      	str	r3, [r7, #12]
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	3302      	adds	r3, #2
 800f344:	687a      	ldr	r2, [r7, #4]
 800f346:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f34a:	801a      	strh	r2, [r3, #0]
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	2200      	movs	r2, #0
 800f350:	801a      	strh	r2, [r3, #0]
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	3302      	adds	r3, #2
 800f356:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f35a:	461a      	mov	r2, r3
 800f35c:	4b18      	ldr	r3, [pc, #96]	; (800f3c0 <NextCluster+0xa8>)
 800f35e:	699b      	ldr	r3, [r3, #24]
 800f360:	429a      	cmp	r2, r3
 800f362:	d205      	bcs.n	800f370 <NextCluster+0x58>
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	3302      	adds	r3, #2
 800f368:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f36c:	2b01      	cmp	r3, #1
 800f36e:	dc01      	bgt.n	800f374 <NextCluster+0x5c>
 800f370:	2301      	movs	r3, #1
 800f372:	e021      	b.n	800f3b8 <NextCluster+0xa0>
 800f374:	68f9      	ldr	r1, [r7, #12]
 800f376:	f107 030a 	add.w	r3, r7, #10
 800f37a:	2202      	movs	r2, #2
 800f37c:	4618      	mov	r0, r3
 800f37e:	f7ff fe09 	bl	800ef94 <ReadDiskData>
 800f382:	4603      	mov	r3, r0
 800f384:	2b00      	cmp	r3, #0
 800f386:	d001      	beq.n	800f38c <NextCluster+0x74>
 800f388:	2301      	movs	r3, #1
 800f38a:	e015      	b.n	800f3b8 <NextCluster+0xa0>
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	3302      	adds	r3, #2
 800f390:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f394:	b29b      	uxth	r3, r3
 800f396:	f003 0301 	and.w	r3, r3, #1
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d004      	beq.n	800f3a8 <NextCluster+0x90>
 800f39e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f3a2:	111b      	asrs	r3, r3, #4
 800f3a4:	b21b      	sxth	r3, r3
 800f3a6:	e004      	b.n	800f3b2 <NextCluster+0x9a>
 800f3a8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f3ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f3b0:	b21b      	sxth	r3, r3
 800f3b2:	687a      	ldr	r2, [r7, #4]
 800f3b4:	8013      	strh	r3, [r2, #0]
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	3710      	adds	r7, #16
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	bd80      	pop	{r7, pc}
 800f3c0:	20000194 	.word	0x20000194

0800f3c4 <ProgFileSec>:
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b084      	sub	sp, #16
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
 800f3cc:	6039      	str	r1, [r7, #0]
 800f3ce:	4b1f      	ldr	r3, [pc, #124]	; (800f44c <ProgFileSec+0x88>)
 800f3d0:	68da      	ldr	r2, [r3, #12]
 800f3d2:	4b1e      	ldr	r3, [pc, #120]	; (800f44c <ProgFileSec+0x88>)
 800f3d4:	695b      	ldr	r3, [r3, #20]
 800f3d6:	6839      	ldr	r1, [r7, #0]
 800f3d8:	f9b1 1000 	ldrsh.w	r1, [r1]
 800f3dc:	3902      	subs	r1, #2
 800f3de:	fb01 f303 	mul.w	r3, r1, r3
 800f3e2:	4413      	add	r3, r2
 800f3e4:	60fb      	str	r3, [r7, #12]
 800f3e6:	68f9      	ldr	r1, [r7, #12]
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f7ff fe71 	bl	800f0d0 <ProgDiskPage>
 800f3ee:	4603      	mov	r3, r0
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d001      	beq.n	800f3f8 <ProgFileSec+0x34>
 800f3f4:	2301      	movs	r3, #1
 800f3f6:	e025      	b.n	800f444 <ProgFileSec+0x80>
 800f3f8:	6838      	ldr	r0, [r7, #0]
 800f3fa:	f7ff ff8d 	bl	800f318 <NextCluster>
 800f3fe:	4603      	mov	r3, r0
 800f400:	2b00      	cmp	r3, #0
 800f402:	d001      	beq.n	800f408 <ProgFileSec+0x44>
 800f404:	2302      	movs	r3, #2
 800f406:	e01d      	b.n	800f444 <ProgFileSec+0x80>
 800f408:	683b      	ldr	r3, [r7, #0]
 800f40a:	885b      	ldrh	r3, [r3, #2]
 800f40c:	817b      	strh	r3, [r7, #10]
 800f40e:	683b      	ldr	r3, [r7, #0]
 800f410:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d114      	bne.n	800f442 <ProgFileSec+0x7e>
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	897a      	ldrh	r2, [r7, #10]
 800f41c:	801a      	strh	r2, [r3, #0]
 800f41e:	6839      	ldr	r1, [r7, #0]
 800f420:	6878      	ldr	r0, [r7, #4]
 800f422:	f7ff fe77 	bl	800f114 <SeekBlank>
 800f426:	4603      	mov	r3, r0
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d001      	beq.n	800f430 <ProgFileSec+0x6c>
 800f42c:	2303      	movs	r3, #3
 800f42e:	e009      	b.n	800f444 <ProgFileSec+0x80>
 800f430:	6839      	ldr	r1, [r7, #0]
 800f432:	6878      	ldr	r0, [r7, #4]
 800f434:	f7ff feea 	bl	800f20c <SetCluster>
 800f438:	4603      	mov	r3, r0
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d001      	beq.n	800f442 <ProgFileSec+0x7e>
 800f43e:	2301      	movs	r3, #1
 800f440:	e000      	b.n	800f444 <ProgFileSec+0x80>
 800f442:	2300      	movs	r3, #0
 800f444:	4618      	mov	r0, r3
 800f446:	3710      	adds	r7, #16
 800f448:	46bd      	mov	sp, r7
 800f44a:	bd80      	pop	{r7, pc}
 800f44c:	20000194 	.word	0x20000194

0800f450 <ReadFileSec>:
 800f450:	b580      	push	{r7, lr}
 800f452:	b084      	sub	sp, #16
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
 800f458:	6039      	str	r1, [r7, #0]
 800f45a:	4b13      	ldr	r3, [pc, #76]	; (800f4a8 <ReadFileSec+0x58>)
 800f45c:	68da      	ldr	r2, [r3, #12]
 800f45e:	4b12      	ldr	r3, [pc, #72]	; (800f4a8 <ReadFileSec+0x58>)
 800f460:	695b      	ldr	r3, [r3, #20]
 800f462:	6839      	ldr	r1, [r7, #0]
 800f464:	f9b1 1000 	ldrsh.w	r1, [r1]
 800f468:	3902      	subs	r1, #2
 800f46a:	fb01 f303 	mul.w	r3, r1, r3
 800f46e:	4413      	add	r3, r2
 800f470:	60fb      	str	r3, [r7, #12]
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	4a0c      	ldr	r2, [pc, #48]	; (800f4a8 <ReadFileSec+0x58>)
 800f476:	6952      	ldr	r2, [r2, #20]
 800f478:	b212      	sxth	r2, r2
 800f47a:	4619      	mov	r1, r3
 800f47c:	6878      	ldr	r0, [r7, #4]
 800f47e:	f7ff fd89 	bl	800ef94 <ReadDiskData>
 800f482:	4603      	mov	r3, r0
 800f484:	2b00      	cmp	r3, #0
 800f486:	d001      	beq.n	800f48c <ReadFileSec+0x3c>
 800f488:	2301      	movs	r3, #1
 800f48a:	e008      	b.n	800f49e <ReadFileSec+0x4e>
 800f48c:	6838      	ldr	r0, [r7, #0]
 800f48e:	f7ff ff43 	bl	800f318 <NextCluster>
 800f492:	4603      	mov	r3, r0
 800f494:	2b00      	cmp	r3, #0
 800f496:	d001      	beq.n	800f49c <ReadFileSec+0x4c>
 800f498:	2302      	movs	r3, #2
 800f49a:	e000      	b.n	800f49e <ReadFileSec+0x4e>
 800f49c:	2300      	movs	r3, #0
 800f49e:	4618      	mov	r0, r3
 800f4a0:	3710      	adds	r7, #16
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	bd80      	pop	{r7, pc}
 800f4a6:	bf00      	nop
 800f4a8:	20000194 	.word	0x20000194

0800f4ac <CloseFile>:
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b086      	sub	sp, #24
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	60f8      	str	r0, [r7, #12]
 800f4b4:	60b9      	str	r1, [r7, #8]
 800f4b6:	607a      	str	r2, [r7, #4]
 800f4b8:	603b      	str	r3, [r7, #0]
 800f4ba:	f640 73ff 	movw	r3, #4095	; 0xfff
 800f4be:	617b      	str	r3, [r7, #20]
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	f640 72ff 	movw	r2, #4095	; 0xfff
 800f4c6:	801a      	strh	r2, [r3, #0]
 800f4c8:	6879      	ldr	r1, [r7, #4]
 800f4ca:	68f8      	ldr	r0, [r7, #12]
 800f4cc:	f7ff fe9e 	bl	800f20c <SetCluster>
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	681a      	ldr	r2, [r3, #0]
 800f4d4:	697b      	ldr	r3, [r7, #20]
 800f4d6:	43db      	mvns	r3, r3
 800f4d8:	4013      	ands	r3, r2
 800f4da:	4619      	mov	r1, r3
 800f4dc:	4b24      	ldr	r3, [pc, #144]	; (800f570 <CloseFile+0xc4>)
 800f4de:	695b      	ldr	r3, [r3, #20]
 800f4e0:	b21b      	sxth	r3, r3
 800f4e2:	461a      	mov	r2, r3
 800f4e4:	68f8      	ldr	r0, [r7, #12]
 800f4e6:	f7ff fd55 	bl	800ef94 <ReadDiskData>
 800f4ea:	4603      	mov	r3, r0
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d001      	beq.n	800f4f4 <CloseFile+0x48>
 800f4f0:	2301      	movs	r3, #1
 800f4f2:	e039      	b.n	800f568 <CloseFile+0xbc>
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	681a      	ldr	r2, [r3, #0]
 800f4f8:	697b      	ldr	r3, [r7, #20]
 800f4fa:	4013      	ands	r3, r2
 800f4fc:	330b      	adds	r3, #11
 800f4fe:	68fa      	ldr	r2, [r7, #12]
 800f500:	4413      	add	r3, r2
 800f502:	2220      	movs	r2, #32
 800f504:	701a      	strb	r2, [r3, #0]
 800f506:	683b      	ldr	r3, [r7, #0]
 800f508:	681a      	ldr	r2, [r3, #0]
 800f50a:	697b      	ldr	r3, [r7, #20]
 800f50c:	4013      	ands	r3, r2
 800f50e:	331c      	adds	r3, #28
 800f510:	68fa      	ldr	r2, [r7, #12]
 800f512:	4413      	add	r3, r2
 800f514:	68ba      	ldr	r2, [r7, #8]
 800f516:	601a      	str	r2, [r3, #0]
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	681a      	ldr	r2, [r3, #0]
 800f51c:	697b      	ldr	r3, [r7, #20]
 800f51e:	43db      	mvns	r3, r3
 800f520:	4013      	ands	r3, r2
 800f522:	4619      	mov	r1, r3
 800f524:	68f8      	ldr	r0, [r7, #12]
 800f526:	f7ff fdd3 	bl	800f0d0 <ProgDiskPage>
 800f52a:	4603      	mov	r3, r0
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d001      	beq.n	800f534 <CloseFile+0x88>
 800f530:	2301      	movs	r3, #1
 800f532:	e019      	b.n	800f568 <CloseFile+0xbc>
 800f534:	4b0e      	ldr	r3, [pc, #56]	; (800f570 <CloseFile+0xc4>)
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	4a0d      	ldr	r2, [pc, #52]	; (800f570 <CloseFile+0xc4>)
 800f53a:	6952      	ldr	r2, [r2, #20]
 800f53c:	b212      	sxth	r2, r2
 800f53e:	4619      	mov	r1, r3
 800f540:	68f8      	ldr	r0, [r7, #12]
 800f542:	f7ff fd27 	bl	800ef94 <ReadDiskData>
 800f546:	4603      	mov	r3, r0
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d001      	beq.n	800f550 <CloseFile+0xa4>
 800f54c:	2301      	movs	r3, #1
 800f54e:	e00b      	b.n	800f568 <CloseFile+0xbc>
 800f550:	4b07      	ldr	r3, [pc, #28]	; (800f570 <CloseFile+0xc4>)
 800f552:	685b      	ldr	r3, [r3, #4]
 800f554:	4619      	mov	r1, r3
 800f556:	68f8      	ldr	r0, [r7, #12]
 800f558:	f7ff fdba 	bl	800f0d0 <ProgDiskPage>
 800f55c:	4603      	mov	r3, r0
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d001      	beq.n	800f566 <CloseFile+0xba>
 800f562:	2301      	movs	r3, #1
 800f564:	e000      	b.n	800f568 <CloseFile+0xbc>
 800f566:	2300      	movs	r3, #0
 800f568:	4618      	mov	r0, r3
 800f56a:	3718      	adds	r7, #24
 800f56c:	46bd      	mov	sp, r7
 800f56e:	bd80      	pop	{r7, pc}
 800f570:	20000194 	.word	0x20000194

0800f574 <OpenFileWr>:
 800f574:	b580      	push	{r7, lr}
 800f576:	b088      	sub	sp, #32
 800f578:	af00      	add	r7, sp, #0
 800f57a:	60f8      	str	r0, [r7, #12]
 800f57c:	60b9      	str	r1, [r7, #8]
 800f57e:	607a      	str	r2, [r7, #4]
 800f580:	603b      	str	r3, [r7, #0]
 800f582:	683b      	ldr	r3, [r7, #0]
 800f584:	687a      	ldr	r2, [r7, #4]
 800f586:	68b9      	ldr	r1, [r7, #8]
 800f588:	68f8      	ldr	r0, [r7, #12]
 800f58a:	f7ff fd29 	bl	800efe0 <OpenFileRd>
 800f58e:	4603      	mov	r3, r0
 800f590:	61fb      	str	r3, [r7, #28]
 800f592:	69fb      	ldr	r3, [r7, #28]
 800f594:	2b04      	cmp	r3, #4
 800f596:	d002      	beq.n	800f59e <OpenFileWr+0x2a>
 800f598:	69fb      	ldr	r3, [r7, #28]
 800f59a:	b2db      	uxtb	r3, r3
 800f59c:	e045      	b.n	800f62a <OpenFileWr+0xb6>
 800f59e:	6879      	ldr	r1, [r7, #4]
 800f5a0:	68f8      	ldr	r0, [r7, #12]
 800f5a2:	f7ff fdb7 	bl	800f114 <SeekBlank>
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d001      	beq.n	800f5b0 <OpenFileWr+0x3c>
 800f5ac:	2303      	movs	r3, #3
 800f5ae:	e03c      	b.n	800f62a <OpenFileWr+0xb6>
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f5b8:	61bb      	str	r3, [r7, #24]
 800f5ba:	683b      	ldr	r3, [r7, #0]
 800f5bc:	681a      	ldr	r2, [r3, #0]
 800f5be:	69bb      	ldr	r3, [r7, #24]
 800f5c0:	1ad3      	subs	r3, r2, r3
 800f5c2:	617b      	str	r3, [r7, #20]
 800f5c4:	697b      	ldr	r3, [r7, #20]
 800f5c6:	4a1b      	ldr	r2, [pc, #108]	; (800f634 <OpenFileWr+0xc0>)
 800f5c8:	6952      	ldr	r2, [r2, #20]
 800f5ca:	b212      	sxth	r2, r2
 800f5cc:	4619      	mov	r1, r3
 800f5ce:	68f8      	ldr	r0, [r7, #12]
 800f5d0:	f7ff fce0 	bl	800ef94 <ReadDiskData>
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d001      	beq.n	800f5de <OpenFileWr+0x6a>
 800f5da:	2301      	movs	r3, #1
 800f5dc:	e025      	b.n	800f62a <OpenFileWr+0xb6>
 800f5de:	2300      	movs	r3, #0
 800f5e0:	61fb      	str	r3, [r7, #28]
 800f5e2:	e00d      	b.n	800f600 <OpenFileWr+0x8c>
 800f5e4:	69fb      	ldr	r3, [r7, #28]
 800f5e6:	68ba      	ldr	r2, [r7, #8]
 800f5e8:	441a      	add	r2, r3
 800f5ea:	69b9      	ldr	r1, [r7, #24]
 800f5ec:	69fb      	ldr	r3, [r7, #28]
 800f5ee:	440b      	add	r3, r1
 800f5f0:	4619      	mov	r1, r3
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	440b      	add	r3, r1
 800f5f6:	7812      	ldrb	r2, [r2, #0]
 800f5f8:	701a      	strb	r2, [r3, #0]
 800f5fa:	69fb      	ldr	r3, [r7, #28]
 800f5fc:	3301      	adds	r3, #1
 800f5fe:	61fb      	str	r3, [r7, #28]
 800f600:	69fb      	ldr	r3, [r7, #28]
 800f602:	2b0a      	cmp	r3, #10
 800f604:	ddee      	ble.n	800f5e4 <OpenFileWr+0x70>
 800f606:	69bb      	ldr	r3, [r7, #24]
 800f608:	331a      	adds	r3, #26
 800f60a:	68fa      	ldr	r2, [r7, #12]
 800f60c:	4413      	add	r3, r2
 800f60e:	687a      	ldr	r2, [r7, #4]
 800f610:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f614:	801a      	strh	r2, [r3, #0]
 800f616:	6979      	ldr	r1, [r7, #20]
 800f618:	68f8      	ldr	r0, [r7, #12]
 800f61a:	f7ff fd59 	bl	800f0d0 <ProgDiskPage>
 800f61e:	4603      	mov	r3, r0
 800f620:	2b00      	cmp	r3, #0
 800f622:	d001      	beq.n	800f628 <OpenFileWr+0xb4>
 800f624:	2301      	movs	r3, #1
 800f626:	e000      	b.n	800f62a <OpenFileWr+0xb6>
 800f628:	2300      	movs	r3, #0
 800f62a:	4618      	mov	r0, r3
 800f62c:	3720      	adds	r7, #32
 800f62e:	46bd      	mov	sp, r7
 800f630:	bd80      	pop	{r7, pc}
 800f632:	bf00      	nop
 800f634:	20000194 	.word	0x20000194

0800f638 <Color_Num>:
 800f638:	b480      	push	{r7}
 800f63a:	b083      	sub	sp, #12
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	4603      	mov	r3, r0
 800f640:	80fb      	strh	r3, [r7, #6]
 800f642:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f646:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800f64a:	4013      	ands	r3, r2
 800f64c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800f650:	4293      	cmp	r3, r2
 800f652:	d101      	bne.n	800f658 <Color_Num+0x20>
 800f654:	2301      	movs	r3, #1
 800f656:	e068      	b.n	800f72a <Color_Num+0xf2>
 800f658:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f65c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800f660:	f5b3 4f04 	cmp.w	r3, #33792	; 0x8400
 800f664:	d101      	bne.n	800f66a <Color_Num+0x32>
 800f666:	2302      	movs	r3, #2
 800f668:	e05f      	b.n	800f72a <Color_Num+0xf2>
 800f66a:	88fb      	ldrh	r3, [r7, #6]
 800f66c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f670:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f674:	4293      	cmp	r3, r2
 800f676:	d101      	bne.n	800f67c <Color_Num+0x44>
 800f678:	2303      	movs	r3, #3
 800f67a:	e056      	b.n	800f72a <Color_Num+0xf2>
 800f67c:	88fb      	ldrh	r3, [r7, #6]
 800f67e:	f403 6382 	and.w	r3, r3, #1040	; 0x410
 800f682:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800f686:	d101      	bne.n	800f68c <Color_Num+0x54>
 800f688:	2304      	movs	r3, #4
 800f68a:	e04e      	b.n	800f72a <Color_Num+0xf2>
 800f68c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f690:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800f694:	4013      	ands	r3, r2
 800f696:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800f69a:	4293      	cmp	r3, r2
 800f69c:	d101      	bne.n	800f6a2 <Color_Num+0x6a>
 800f69e:	2305      	movs	r3, #5
 800f6a0:	e043      	b.n	800f72a <Color_Num+0xf2>
 800f6a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f6a6:	f248 0310 	movw	r3, #32784	; 0x8010
 800f6aa:	4013      	ands	r3, r2
 800f6ac:	f248 0210 	movw	r2, #32784	; 0x8010
 800f6b0:	4293      	cmp	r3, r2
 800f6b2:	d101      	bne.n	800f6b8 <Color_Num+0x80>
 800f6b4:	2306      	movs	r3, #6
 800f6b6:	e038      	b.n	800f72a <Color_Num+0xf2>
 800f6b8:	88fb      	ldrh	r3, [r7, #6]
 800f6ba:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800f6be:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 800f6c2:	d101      	bne.n	800f6c8 <Color_Num+0x90>
 800f6c4:	2307      	movs	r3, #7
 800f6c6:	e030      	b.n	800f72a <Color_Num+0xf2>
 800f6c8:	88fb      	ldrh	r3, [r7, #6]
 800f6ca:	f403 6382 	and.w	r3, r3, #1040	; 0x410
 800f6ce:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800f6d2:	d101      	bne.n	800f6d8 <Color_Num+0xa0>
 800f6d4:	2308      	movs	r3, #8
 800f6d6:	e028      	b.n	800f72a <Color_Num+0xf2>
 800f6d8:	88fb      	ldrh	r3, [r7, #6]
 800f6da:	461a      	mov	r2, r3
 800f6dc:	f643 13e7 	movw	r3, #14823	; 0x39e7
 800f6e0:	4013      	ands	r3, r2
 800f6e2:	f643 12e7 	movw	r2, #14823	; 0x39e7
 800f6e6:	4293      	cmp	r3, r2
 800f6e8:	d101      	bne.n	800f6ee <Color_Num+0xb6>
 800f6ea:	2309      	movs	r3, #9
 800f6ec:	e01d      	b.n	800f72a <Color_Num+0xf2>
 800f6ee:	88fb      	ldrh	r3, [r7, #6]
 800f6f0:	461a      	mov	r2, r3
 800f6f2:	f240 531f 	movw	r3, #1311	; 0x51f
 800f6f6:	4013      	ands	r3, r2
 800f6f8:	f240 521f 	movw	r2, #1311	; 0x51f
 800f6fc:	4293      	cmp	r3, r2
 800f6fe:	d101      	bne.n	800f704 <Color_Num+0xcc>
 800f700:	230a      	movs	r3, #10
 800f702:	e012      	b.n	800f72a <Color_Num+0xf2>
 800f704:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f708:	f64f 4310 	movw	r3, #64528	; 0xfc10
 800f70c:	4013      	ands	r3, r2
 800f70e:	f64f 4210 	movw	r2, #64528	; 0xfc10
 800f712:	4293      	cmp	r3, r2
 800f714:	d101      	bne.n	800f71a <Color_Num+0xe2>
 800f716:	230b      	movs	r3, #11
 800f718:	e007      	b.n	800f72a <Color_Num+0xf2>
 800f71a:	88fb      	ldrh	r3, [r7, #6]
 800f71c:	f003 031f 	and.w	r3, r3, #31
 800f720:	2b1f      	cmp	r3, #31
 800f722:	d101      	bne.n	800f728 <Color_Num+0xf0>
 800f724:	230c      	movs	r3, #12
 800f726:	e000      	b.n	800f72a <Color_Num+0xf2>
 800f728:	230d      	movs	r3, #13
 800f72a:	4618      	mov	r0, r3
 800f72c:	370c      	adds	r7, #12
 800f72e:	46bd      	mov	sp, r7
 800f730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f734:	4770      	bx	lr
	...

0800f738 <PrintClk>:
 800f738:	b580      	push	{r7, lr}
 800f73a:	b084      	sub	sp, #16
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	4603      	mov	r3, r0
 800f740:	80fb      	strh	r3, [r7, #6]
 800f742:	460b      	mov	r3, r1
 800f744:	80bb      	strh	r3, [r7, #4]
 800f746:	4613      	mov	r3, r2
 800f748:	70fb      	strb	r3, [r7, #3]
 800f74a:	4b31      	ldr	r3, [pc, #196]	; (800f810 <PrintClk+0xd8>)
 800f74c:	895b      	ldrh	r3, [r3, #10]
 800f74e:	4619      	mov	r1, r3
 800f750:	f643 10e7 	movw	r0, #14823	; 0x39e7
 800f754:	f7fe fa6a 	bl	800dc2c <SetColor>
 800f758:	4b2e      	ldr	r3, [pc, #184]	; (800f814 <PrintClk+0xdc>)
 800f75a:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800f75e:	b29b      	uxth	r3, r3
 800f760:	331e      	adds	r3, #30
 800f762:	b29b      	uxth	r3, r3
 800f764:	80fb      	strh	r3, [r7, #6]
 800f766:	4b2b      	ldr	r3, [pc, #172]	; (800f814 <PrintClk+0xdc>)
 800f768:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800f76c:	b29b      	uxth	r3, r3
 800f76e:	3b03      	subs	r3, #3
 800f770:	b29b      	uxth	r3, r3
 800f772:	b218      	sxth	r0, r3
 800f774:	4b28      	ldr	r3, [pc, #160]	; (800f818 <PrintClk+0xe0>)
 800f776:	2200      	movs	r2, #0
 800f778:	2103      	movs	r1, #3
 800f77a:	f7fe fa6f 	bl	800dc5c <DispStr>
 800f77e:	2301      	movs	r3, #1
 800f780:	81fb      	strh	r3, [r7, #14]
 800f782:	e03c      	b.n	800f7fe <PrintClk+0xc6>
 800f784:	78fa      	ldrb	r2, [r7, #3]
 800f786:	4613      	mov	r3, r2
 800f788:	009b      	lsls	r3, r3, #2
 800f78a:	4413      	add	r3, r2
 800f78c:	005b      	lsls	r3, r3, #1
 800f78e:	441a      	add	r2, r3
 800f790:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f794:	4413      	add	r3, r2
 800f796:	4a21      	ldr	r2, [pc, #132]	; (800f81c <PrintClk+0xe4>)
 800f798:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f79c:	817b      	strh	r3, [r7, #10]
 800f79e:	2300      	movs	r3, #0
 800f7a0:	81bb      	strh	r3, [r7, #12]
 800f7a2:	e024      	b.n	800f7ee <PrintClk+0xb6>
 800f7a4:	88fa      	ldrh	r2, [r7, #6]
 800f7a6:	89bb      	ldrh	r3, [r7, #12]
 800f7a8:	4413      	add	r3, r2
 800f7aa:	b29b      	uxth	r3, r3
 800f7ac:	b218      	sxth	r0, r3
 800f7ae:	88ba      	ldrh	r2, [r7, #4]
 800f7b0:	89fb      	ldrh	r3, [r7, #14]
 800f7b2:	4413      	add	r3, r2
 800f7b4:	b29b      	uxth	r3, r3
 800f7b6:	b21b      	sxth	r3, r3
 800f7b8:	4619      	mov	r1, r3
 800f7ba:	f002 fce7 	bl	801218c <LCD_Set_Posi>
 800f7be:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800f7c2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f7c6:	fa42 f303 	asr.w	r3, r2, r3
 800f7ca:	f003 0301 	and.w	r3, r3, #1
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d004      	beq.n	800f7dc <PrintClk+0xa4>
 800f7d2:	f64f 4010 	movw	r0, #64528	; 0xfc10
 800f7d6:	f002 fd27 	bl	8012228 <LCD_Set_Pixel>
 800f7da:	e004      	b.n	800f7e6 <PrintClk+0xae>
 800f7dc:	4b10      	ldr	r3, [pc, #64]	; (800f820 <PrintClk+0xe8>)
 800f7de:	881b      	ldrh	r3, [r3, #0]
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	f002 fd21 	bl	8012228 <LCD_Set_Pixel>
 800f7e6:	89bb      	ldrh	r3, [r7, #12]
 800f7e8:	3301      	adds	r3, #1
 800f7ea:	b29b      	uxth	r3, r3
 800f7ec:	81bb      	strh	r3, [r7, #12]
 800f7ee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f7f2:	2b0a      	cmp	r3, #10
 800f7f4:	ddd6      	ble.n	800f7a4 <PrintClk+0x6c>
 800f7f6:	89fb      	ldrh	r3, [r7, #14]
 800f7f8:	3301      	adds	r3, #1
 800f7fa:	b29b      	uxth	r3, r3
 800f7fc:	81fb      	strh	r3, [r7, #14]
 800f7fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f802:	2b0a      	cmp	r3, #10
 800f804:	ddbe      	ble.n	800f784 <PrintClk+0x4c>
 800f806:	bf00      	nop
 800f808:	bf00      	nop
 800f80a:	3710      	adds	r7, #16
 800f80c:	46bd      	mov	sp, r7
 800f80e:	bd80      	pop	{r7, pc}
 800f810:	08001f08 	.word	0x08001f08
 800f814:	0800215c 	.word	0x0800215c
 800f818:	080001ec 	.word	0x080001ec
 800f81c:	08001bbc 	.word	0x08001bbc
 800f820:	200015ce 	.word	0x200015ce

0800f824 <WriteVar>:
 800f824:	b580      	push	{r7, lr}
 800f826:	b084      	sub	sp, #16
 800f828:	af00      	add	r7, sp, #0
 800f82a:	4603      	mov	r3, r0
 800f82c:	6039      	str	r1, [r7, #0]
 800f82e:	80fb      	strh	r3, [r7, #6]
 800f830:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f834:	81fb      	strh	r3, [r7, #14]
 800f836:	2204      	movs	r2, #4
 800f838:	2100      	movs	r1, #0
 800f83a:	4847      	ldr	r0, [pc, #284]	; (800f958 <WriteVar+0x134>)
 800f83c:	f013 f9da 	bl	8022bf4 <memset>
 800f840:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f844:	4619      	mov	r1, r3
 800f846:	4844      	ldr	r0, [pc, #272]	; (800f958 <WriteVar+0x134>)
 800f848:	f002 fa1e 	bl	8011c88 <u16ToDec4Str>
 800f84c:	4842      	ldr	r0, [pc, #264]	; (800f958 <WriteVar+0x134>)
 800f84e:	f7fc fbf7 	bl	800c040 <strlen>
 800f852:	4603      	mov	r3, r0
 800f854:	b21a      	sxth	r2, r3
 800f856:	4b41      	ldr	r3, [pc, #260]	; (800f95c <WriteVar+0x138>)
 800f858:	801a      	strh	r2, [r3, #0]
 800f85a:	4b41      	ldr	r3, [pc, #260]	; (800f960 <WriteVar+0x13c>)
 800f85c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f860:	461a      	mov	r2, r3
 800f862:	4b40      	ldr	r3, [pc, #256]	; (800f964 <WriteVar+0x140>)
 800f864:	4413      	add	r3, r2
 800f866:	4a3d      	ldr	r2, [pc, #244]	; (800f95c <WriteVar+0x138>)
 800f868:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f86c:	493a      	ldr	r1, [pc, #232]	; (800f958 <WriteVar+0x134>)
 800f86e:	4618      	mov	r0, r3
 800f870:	f013 f9b2 	bl	8022bd8 <memcpy>
 800f874:	4b3a      	ldr	r3, [pc, #232]	; (800f960 <WriteVar+0x13c>)
 800f876:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f87a:	b29a      	uxth	r2, r3
 800f87c:	4b37      	ldr	r3, [pc, #220]	; (800f95c <WriteVar+0x138>)
 800f87e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f882:	b29b      	uxth	r3, r3
 800f884:	4413      	add	r3, r2
 800f886:	b29b      	uxth	r3, r3
 800f888:	b21a      	sxth	r2, r3
 800f88a:	4b35      	ldr	r3, [pc, #212]	; (800f960 <WriteVar+0x13c>)
 800f88c:	801a      	strh	r2, [r3, #0]
 800f88e:	4b33      	ldr	r3, [pc, #204]	; (800f95c <WriteVar+0x138>)
 800f890:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f894:	461a      	mov	r2, r3
 800f896:	4b34      	ldr	r3, [pc, #208]	; (800f968 <WriteVar+0x144>)
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	4413      	add	r3, r2
 800f89c:	4a32      	ldr	r2, [pc, #200]	; (800f968 <WriteVar+0x144>)
 800f89e:	6013      	str	r3, [r2, #0]
 800f8a0:	4b2f      	ldr	r3, [pc, #188]	; (800f960 <WriteVar+0x13c>)
 800f8a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f8a6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f8aa:	429a      	cmp	r2, r3
 800f8ac:	dc4f      	bgt.n	800f94e <WriteVar+0x12a>
 800f8ae:	6839      	ldr	r1, [r7, #0]
 800f8b0:	482c      	ldr	r0, [pc, #176]	; (800f964 <WriteVar+0x140>)
 800f8b2:	f7ff fd87 	bl	800f3c4 <ProgFileSec>
 800f8b6:	4b2d      	ldr	r3, [pc, #180]	; (800f96c <WriteVar+0x148>)
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	1c5a      	adds	r2, r3, #1
 800f8bc:	492b      	ldr	r1, [pc, #172]	; (800f96c <WriteVar+0x148>)
 800f8be:	600a      	str	r2, [r1, #0]
 800f8c0:	105b      	asrs	r3, r3, #1
 800f8c2:	b2db      	uxtb	r3, r3
 800f8c4:	f003 0303 	and.w	r3, r3, #3
 800f8c8:	b2db      	uxtb	r3, r3
 800f8ca:	461a      	mov	r2, r3
 800f8cc:	2102      	movs	r1, #2
 800f8ce:	f44f 7084 	mov.w	r0, #264	; 0x108
 800f8d2:	f7ff ff31 	bl	800f738 <PrintClk>
 800f8d6:	4b22      	ldr	r3, [pc, #136]	; (800f960 <WriteVar+0x13c>)
 800f8d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f8dc:	b29a      	uxth	r2, r3
 800f8de:	89fb      	ldrh	r3, [r7, #14]
 800f8e0:	1ad3      	subs	r3, r2, r3
 800f8e2:	b29b      	uxth	r3, r3
 800f8e4:	81bb      	strh	r3, [r7, #12]
 800f8e6:	4b1d      	ldr	r3, [pc, #116]	; (800f95c <WriteVar+0x138>)
 800f8e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f8ec:	b29a      	uxth	r2, r3
 800f8ee:	89bb      	ldrh	r3, [r7, #12]
 800f8f0:	1ad3      	subs	r3, r2, r3
 800f8f2:	b29b      	uxth	r3, r3
 800f8f4:	817b      	strh	r3, [r7, #10]
 800f8f6:	4b1a      	ldr	r3, [pc, #104]	; (800f960 <WriteVar+0x13c>)
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	801a      	strh	r2, [r3, #0]
 800f8fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f900:	461a      	mov	r2, r3
 800f902:	2100      	movs	r1, #0
 800f904:	4817      	ldr	r0, [pc, #92]	; (800f964 <WriteVar+0x140>)
 800f906:	f013 f975 	bl	8022bf4 <memset>
 800f90a:	f44f 729b 	mov.w	r2, #310	; 0x136
 800f90e:	2100      	movs	r1, #0
 800f910:	4817      	ldr	r0, [pc, #92]	; (800f970 <WriteVar+0x14c>)
 800f912:	f013 f96f 	bl	8022bf4 <memset>
 800f916:	4b12      	ldr	r3, [pc, #72]	; (800f960 <WriteVar+0x13c>)
 800f918:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f91c:	461a      	mov	r2, r3
 800f91e:	4b11      	ldr	r3, [pc, #68]	; (800f964 <WriteVar+0x140>)
 800f920:	18d0      	adds	r0, r2, r3
 800f922:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f926:	4a0c      	ldr	r2, [pc, #48]	; (800f958 <WriteVar+0x134>)
 800f928:	4413      	add	r3, r2
 800f92a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800f92e:	4619      	mov	r1, r3
 800f930:	f013 f952 	bl	8022bd8 <memcpy>
 800f934:	4b0a      	ldr	r3, [pc, #40]	; (800f960 <WriteVar+0x13c>)
 800f936:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f93a:	b29a      	uxth	r2, r3
 800f93c:	89bb      	ldrh	r3, [r7, #12]
 800f93e:	4413      	add	r3, r2
 800f940:	b29b      	uxth	r3, r3
 800f942:	b21a      	sxth	r2, r3
 800f944:	4b06      	ldr	r3, [pc, #24]	; (800f960 <WriteVar+0x13c>)
 800f946:	801a      	strh	r2, [r3, #0]
 800f948:	4b04      	ldr	r3, [pc, #16]	; (800f95c <WriteVar+0x138>)
 800f94a:	2200      	movs	r2, #0
 800f94c:	801a      	strh	r2, [r3, #0]
 800f94e:	bf00      	nop
 800f950:	3710      	adds	r7, #16
 800f952:	46bd      	mov	sp, r7
 800f954:	bd80      	pop	{r7, pc}
 800f956:	bf00      	nop
 800f958:	200015d4 	.word	0x200015d4
 800f95c:	20000792 	.word	0x20000792
 800f960:	20000790 	.word	0x20000790
 800f964:	200017d8 	.word	0x200017d8
 800f968:	20000794 	.word	0x20000794
 800f96c:	20000798 	.word	0x20000798
 800f970:	20000008 	.word	0x20000008

0800f974 <WriteStr>:
 800f974:	b580      	push	{r7, lr}
 800f976:	b084      	sub	sp, #16
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]
 800f97c:	6039      	str	r1, [r7, #0]
 800f97e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f982:	81fb      	strh	r3, [r7, #14]
 800f984:	6878      	ldr	r0, [r7, #4]
 800f986:	f7fc fb5b 	bl	800c040 <strlen>
 800f98a:	4603      	mov	r3, r0
 800f98c:	b21a      	sxth	r2, r3
 800f98e:	4b40      	ldr	r3, [pc, #256]	; (800fa90 <WriteStr+0x11c>)
 800f990:	801a      	strh	r2, [r3, #0]
 800f992:	4b40      	ldr	r3, [pc, #256]	; (800fa94 <WriteStr+0x120>)
 800f994:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f998:	461a      	mov	r2, r3
 800f99a:	4b3f      	ldr	r3, [pc, #252]	; (800fa98 <WriteStr+0x124>)
 800f99c:	4413      	add	r3, r2
 800f99e:	4a3c      	ldr	r2, [pc, #240]	; (800fa90 <WriteStr+0x11c>)
 800f9a0:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f9a4:	6879      	ldr	r1, [r7, #4]
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	f013 f916 	bl	8022bd8 <memcpy>
 800f9ac:	4b39      	ldr	r3, [pc, #228]	; (800fa94 <WriteStr+0x120>)
 800f9ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f9b2:	b29a      	uxth	r2, r3
 800f9b4:	4b36      	ldr	r3, [pc, #216]	; (800fa90 <WriteStr+0x11c>)
 800f9b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f9ba:	b29b      	uxth	r3, r3
 800f9bc:	4413      	add	r3, r2
 800f9be:	b29b      	uxth	r3, r3
 800f9c0:	b21a      	sxth	r2, r3
 800f9c2:	4b34      	ldr	r3, [pc, #208]	; (800fa94 <WriteStr+0x120>)
 800f9c4:	801a      	strh	r2, [r3, #0]
 800f9c6:	4b32      	ldr	r3, [pc, #200]	; (800fa90 <WriteStr+0x11c>)
 800f9c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f9cc:	461a      	mov	r2, r3
 800f9ce:	4b33      	ldr	r3, [pc, #204]	; (800fa9c <WriteStr+0x128>)
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	4413      	add	r3, r2
 800f9d4:	4a31      	ldr	r2, [pc, #196]	; (800fa9c <WriteStr+0x128>)
 800f9d6:	6013      	str	r3, [r2, #0]
 800f9d8:	4b2e      	ldr	r3, [pc, #184]	; (800fa94 <WriteStr+0x120>)
 800f9da:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f9de:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f9e2:	429a      	cmp	r2, r3
 800f9e4:	dc4f      	bgt.n	800fa86 <WriteStr+0x112>
 800f9e6:	6839      	ldr	r1, [r7, #0]
 800f9e8:	482b      	ldr	r0, [pc, #172]	; (800fa98 <WriteStr+0x124>)
 800f9ea:	f7ff fceb 	bl	800f3c4 <ProgFileSec>
 800f9ee:	4b2c      	ldr	r3, [pc, #176]	; (800faa0 <WriteStr+0x12c>)
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	1c5a      	adds	r2, r3, #1
 800f9f4:	492a      	ldr	r1, [pc, #168]	; (800faa0 <WriteStr+0x12c>)
 800f9f6:	600a      	str	r2, [r1, #0]
 800f9f8:	105b      	asrs	r3, r3, #1
 800f9fa:	b2db      	uxtb	r3, r3
 800f9fc:	f003 0303 	and.w	r3, r3, #3
 800fa00:	b2db      	uxtb	r3, r3
 800fa02:	461a      	mov	r2, r3
 800fa04:	2102      	movs	r1, #2
 800fa06:	f44f 7084 	mov.w	r0, #264	; 0x108
 800fa0a:	f7ff fe95 	bl	800f738 <PrintClk>
 800fa0e:	4b21      	ldr	r3, [pc, #132]	; (800fa94 <WriteStr+0x120>)
 800fa10:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fa14:	b29a      	uxth	r2, r3
 800fa16:	89fb      	ldrh	r3, [r7, #14]
 800fa18:	1ad3      	subs	r3, r2, r3
 800fa1a:	b29b      	uxth	r3, r3
 800fa1c:	81bb      	strh	r3, [r7, #12]
 800fa1e:	4b1c      	ldr	r3, [pc, #112]	; (800fa90 <WriteStr+0x11c>)
 800fa20:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fa24:	b29a      	uxth	r2, r3
 800fa26:	89bb      	ldrh	r3, [r7, #12]
 800fa28:	1ad3      	subs	r3, r2, r3
 800fa2a:	b29b      	uxth	r3, r3
 800fa2c:	817b      	strh	r3, [r7, #10]
 800fa2e:	4b19      	ldr	r3, [pc, #100]	; (800fa94 <WriteStr+0x120>)
 800fa30:	2200      	movs	r2, #0
 800fa32:	801a      	strh	r2, [r3, #0]
 800fa34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fa38:	461a      	mov	r2, r3
 800fa3a:	2100      	movs	r1, #0
 800fa3c:	4816      	ldr	r0, [pc, #88]	; (800fa98 <WriteStr+0x124>)
 800fa3e:	f013 f8d9 	bl	8022bf4 <memset>
 800fa42:	f44f 729b 	mov.w	r2, #310	; 0x136
 800fa46:	2100      	movs	r1, #0
 800fa48:	4816      	ldr	r0, [pc, #88]	; (800faa4 <WriteStr+0x130>)
 800fa4a:	f013 f8d3 	bl	8022bf4 <memset>
 800fa4e:	4b11      	ldr	r3, [pc, #68]	; (800fa94 <WriteStr+0x120>)
 800fa50:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fa54:	461a      	mov	r2, r3
 800fa56:	4b10      	ldr	r3, [pc, #64]	; (800fa98 <WriteStr+0x124>)
 800fa58:	18d0      	adds	r0, r2, r3
 800fa5a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800fa5e:	687a      	ldr	r2, [r7, #4]
 800fa60:	4413      	add	r3, r2
 800fa62:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800fa66:	4619      	mov	r1, r3
 800fa68:	f013 f8b6 	bl	8022bd8 <memcpy>
 800fa6c:	4b09      	ldr	r3, [pc, #36]	; (800fa94 <WriteStr+0x120>)
 800fa6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fa72:	b29a      	uxth	r2, r3
 800fa74:	89bb      	ldrh	r3, [r7, #12]
 800fa76:	4413      	add	r3, r2
 800fa78:	b29b      	uxth	r3, r3
 800fa7a:	b21a      	sxth	r2, r3
 800fa7c:	4b05      	ldr	r3, [pc, #20]	; (800fa94 <WriteStr+0x120>)
 800fa7e:	801a      	strh	r2, [r3, #0]
 800fa80:	4b03      	ldr	r3, [pc, #12]	; (800fa90 <WriteStr+0x11c>)
 800fa82:	2200      	movs	r2, #0
 800fa84:	801a      	strh	r2, [r3, #0]
 800fa86:	bf00      	nop
 800fa88:	3710      	adds	r7, #16
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	bd80      	pop	{r7, pc}
 800fa8e:	bf00      	nop
 800fa90:	20000792 	.word	0x20000792
 800fa94:	20000790 	.word	0x20000790
 800fa98:	200017d8 	.word	0x200017d8
 800fa9c:	20000794 	.word	0x20000794
 800faa0:	20000798 	.word	0x20000798
 800faa4:	20000008 	.word	0x20000008

0800faa8 <Make_Filename>:
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b084      	sub	sp, #16
 800faac:	af00      	add	r7, sp, #0
 800faae:	4603      	mov	r3, r0
 800fab0:	6039      	str	r1, [r7, #0]
 800fab2:	80fb      	strh	r3, [r7, #6]
 800fab4:	88fb      	ldrh	r3, [r7, #6]
 800fab6:	b2da      	uxtb	r2, r3
 800fab8:	f107 030c 	add.w	r3, r7, #12
 800fabc:	4611      	mov	r1, r2
 800fabe:	4618      	mov	r0, r3
 800fac0:	f001 ff3c 	bl	801193c <u8ToDec3>
 800fac4:	683b      	ldr	r3, [r7, #0]
 800fac6:	3304      	adds	r3, #4
 800fac8:	7b3a      	ldrb	r2, [r7, #12]
 800faca:	701a      	strb	r2, [r3, #0]
 800facc:	683b      	ldr	r3, [r7, #0]
 800face:	3305      	adds	r3, #5
 800fad0:	7b7a      	ldrb	r2, [r7, #13]
 800fad2:	701a      	strb	r2, [r3, #0]
 800fad4:	683b      	ldr	r3, [r7, #0]
 800fad6:	3306      	adds	r3, #6
 800fad8:	7bba      	ldrb	r2, [r7, #14]
 800fada:	701a      	strb	r2, [r3, #0]
 800fadc:	bf00      	nop
 800fade:	3710      	adds	r7, #16
 800fae0:	46bd      	mov	sp, r7
 800fae2:	bd80      	pop	{r7, pc}

0800fae4 <Load_File_Num>:
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b08a      	sub	sp, #40	; 0x28
 800fae8:	af00      	add	r7, sp, #0
 800faea:	4603      	mov	r3, r0
 800faec:	71fb      	strb	r3, [r7, #7]
 800faee:	2300      	movs	r3, #0
 800faf0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800faf2:	4a87      	ldr	r2, [pc, #540]	; (800fd10 <Load_File_Num+0x22c>)
 800faf4:	f107 0318 	add.w	r3, r7, #24
 800faf8:	ca07      	ldmia	r2, {r0, r1, r2}
 800fafa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fafe:	79fb      	ldrb	r3, [r7, #7]
 800fb00:	3b1d      	subs	r3, #29
 800fb02:	2b04      	cmp	r3, #4
 800fb04:	f200 80fe 	bhi.w	800fd04 <Load_File_Num+0x220>
 800fb08:	a201      	add	r2, pc, #4	; (adr r2, 800fb10 <Load_File_Num+0x2c>)
 800fb0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb0e:	bf00      	nop
 800fb10:	0800fb25 	.word	0x0800fb25
 800fb14:	0800fb85 	.word	0x0800fb85
 800fb18:	0800fbe5 	.word	0x0800fbe5
 800fb1c:	0800fc45 	.word	0x0800fc45
 800fb20:	0800fca5 	.word	0x0800fca5
 800fb24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fb28:	2100      	movs	r1, #0
 800fb2a:	487a      	ldr	r0, [pc, #488]	; (800fd14 <Load_File_Num+0x230>)
 800fb2c:	f013 f862 	bl	8022bf4 <memset>
 800fb30:	4a79      	ldr	r2, [pc, #484]	; (800fd18 <Load_File_Num+0x234>)
 800fb32:	f107 0318 	add.w	r3, r7, #24
 800fb36:	ca07      	ldmia	r2, {r0, r1, r2}
 800fb38:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fb3c:	f107 0218 	add.w	r2, r7, #24
 800fb40:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fb44:	4611      	mov	r1, r2
 800fb46:	4618      	mov	r0, r3
 800fb48:	f7ff ffae 	bl	800faa8 <Make_Filename>
 800fb4c:	e00d      	b.n	800fb6a <Load_File_Num+0x86>
 800fb4e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fb52:	b29b      	uxth	r3, r3
 800fb54:	3301      	adds	r3, #1
 800fb56:	b29b      	uxth	r3, r3
 800fb58:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fb5a:	f107 0218 	add.w	r2, r7, #24
 800fb5e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fb62:	4611      	mov	r1, r2
 800fb64:	4618      	mov	r0, r3
 800fb66:	f7ff ff9f 	bl	800faa8 <Make_Filename>
 800fb6a:	f107 030c 	add.w	r3, r7, #12
 800fb6e:	f107 0210 	add.w	r2, r7, #16
 800fb72:	f107 0118 	add.w	r1, r7, #24
 800fb76:	4867      	ldr	r0, [pc, #412]	; (800fd14 <Load_File_Num+0x230>)
 800fb78:	f7ff fa32 	bl	800efe0 <OpenFileRd>
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d0e5      	beq.n	800fb4e <Load_File_Num+0x6a>
 800fb82:	e0bf      	b.n	800fd04 <Load_File_Num+0x220>
 800fb84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fb88:	2100      	movs	r1, #0
 800fb8a:	4862      	ldr	r0, [pc, #392]	; (800fd14 <Load_File_Num+0x230>)
 800fb8c:	f013 f832 	bl	8022bf4 <memset>
 800fb90:	4a62      	ldr	r2, [pc, #392]	; (800fd1c <Load_File_Num+0x238>)
 800fb92:	f107 0318 	add.w	r3, r7, #24
 800fb96:	ca07      	ldmia	r2, {r0, r1, r2}
 800fb98:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fb9c:	f107 0218 	add.w	r2, r7, #24
 800fba0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fba4:	4611      	mov	r1, r2
 800fba6:	4618      	mov	r0, r3
 800fba8:	f7ff ff7e 	bl	800faa8 <Make_Filename>
 800fbac:	e00d      	b.n	800fbca <Load_File_Num+0xe6>
 800fbae:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fbb2:	b29b      	uxth	r3, r3
 800fbb4:	3301      	adds	r3, #1
 800fbb6:	b29b      	uxth	r3, r3
 800fbb8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fbba:	f107 0218 	add.w	r2, r7, #24
 800fbbe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fbc2:	4611      	mov	r1, r2
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	f7ff ff6f 	bl	800faa8 <Make_Filename>
 800fbca:	f107 030c 	add.w	r3, r7, #12
 800fbce:	f107 0210 	add.w	r2, r7, #16
 800fbd2:	f107 0118 	add.w	r1, r7, #24
 800fbd6:	484f      	ldr	r0, [pc, #316]	; (800fd14 <Load_File_Num+0x230>)
 800fbd8:	f7ff fa02 	bl	800efe0 <OpenFileRd>
 800fbdc:	4603      	mov	r3, r0
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d0e5      	beq.n	800fbae <Load_File_Num+0xca>
 800fbe2:	e08f      	b.n	800fd04 <Load_File_Num+0x220>
 800fbe4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fbe8:	2100      	movs	r1, #0
 800fbea:	484a      	ldr	r0, [pc, #296]	; (800fd14 <Load_File_Num+0x230>)
 800fbec:	f013 f802 	bl	8022bf4 <memset>
 800fbf0:	4a4b      	ldr	r2, [pc, #300]	; (800fd20 <Load_File_Num+0x23c>)
 800fbf2:	f107 0318 	add.w	r3, r7, #24
 800fbf6:	ca07      	ldmia	r2, {r0, r1, r2}
 800fbf8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fbfc:	f107 0218 	add.w	r2, r7, #24
 800fc00:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fc04:	4611      	mov	r1, r2
 800fc06:	4618      	mov	r0, r3
 800fc08:	f7ff ff4e 	bl	800faa8 <Make_Filename>
 800fc0c:	e00d      	b.n	800fc2a <Load_File_Num+0x146>
 800fc0e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fc12:	b29b      	uxth	r3, r3
 800fc14:	3301      	adds	r3, #1
 800fc16:	b29b      	uxth	r3, r3
 800fc18:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fc1a:	f107 0218 	add.w	r2, r7, #24
 800fc1e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fc22:	4611      	mov	r1, r2
 800fc24:	4618      	mov	r0, r3
 800fc26:	f7ff ff3f 	bl	800faa8 <Make_Filename>
 800fc2a:	f107 030c 	add.w	r3, r7, #12
 800fc2e:	f107 0210 	add.w	r2, r7, #16
 800fc32:	f107 0118 	add.w	r1, r7, #24
 800fc36:	4837      	ldr	r0, [pc, #220]	; (800fd14 <Load_File_Num+0x230>)
 800fc38:	f7ff f9d2 	bl	800efe0 <OpenFileRd>
 800fc3c:	4603      	mov	r3, r0
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d0e5      	beq.n	800fc0e <Load_File_Num+0x12a>
 800fc42:	e05f      	b.n	800fd04 <Load_File_Num+0x220>
 800fc44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fc48:	2100      	movs	r1, #0
 800fc4a:	4832      	ldr	r0, [pc, #200]	; (800fd14 <Load_File_Num+0x230>)
 800fc4c:	f012 ffd2 	bl	8022bf4 <memset>
 800fc50:	4a34      	ldr	r2, [pc, #208]	; (800fd24 <Load_File_Num+0x240>)
 800fc52:	f107 0318 	add.w	r3, r7, #24
 800fc56:	ca07      	ldmia	r2, {r0, r1, r2}
 800fc58:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fc5c:	f107 0218 	add.w	r2, r7, #24
 800fc60:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fc64:	4611      	mov	r1, r2
 800fc66:	4618      	mov	r0, r3
 800fc68:	f7ff ff1e 	bl	800faa8 <Make_Filename>
 800fc6c:	e00d      	b.n	800fc8a <Load_File_Num+0x1a6>
 800fc6e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fc72:	b29b      	uxth	r3, r3
 800fc74:	3301      	adds	r3, #1
 800fc76:	b29b      	uxth	r3, r3
 800fc78:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fc7a:	f107 0218 	add.w	r2, r7, #24
 800fc7e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fc82:	4611      	mov	r1, r2
 800fc84:	4618      	mov	r0, r3
 800fc86:	f7ff ff0f 	bl	800faa8 <Make_Filename>
 800fc8a:	f107 030c 	add.w	r3, r7, #12
 800fc8e:	f107 0210 	add.w	r2, r7, #16
 800fc92:	f107 0118 	add.w	r1, r7, #24
 800fc96:	481f      	ldr	r0, [pc, #124]	; (800fd14 <Load_File_Num+0x230>)
 800fc98:	f7ff f9a2 	bl	800efe0 <OpenFileRd>
 800fc9c:	4603      	mov	r3, r0
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d0e5      	beq.n	800fc6e <Load_File_Num+0x18a>
 800fca2:	e02f      	b.n	800fd04 <Load_File_Num+0x220>
 800fca4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fca8:	2100      	movs	r1, #0
 800fcaa:	481a      	ldr	r0, [pc, #104]	; (800fd14 <Load_File_Num+0x230>)
 800fcac:	f012 ffa2 	bl	8022bf4 <memset>
 800fcb0:	4a1d      	ldr	r2, [pc, #116]	; (800fd28 <Load_File_Num+0x244>)
 800fcb2:	f107 0318 	add.w	r3, r7, #24
 800fcb6:	ca07      	ldmia	r2, {r0, r1, r2}
 800fcb8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fcbc:	f107 0218 	add.w	r2, r7, #24
 800fcc0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fcc4:	4611      	mov	r1, r2
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	f7ff feee 	bl	800faa8 <Make_Filename>
 800fccc:	e00d      	b.n	800fcea <Load_File_Num+0x206>
 800fcce:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fcd2:	b29b      	uxth	r3, r3
 800fcd4:	3301      	adds	r3, #1
 800fcd6:	b29b      	uxth	r3, r3
 800fcd8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fcda:	f107 0218 	add.w	r2, r7, #24
 800fcde:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fce2:	4611      	mov	r1, r2
 800fce4:	4618      	mov	r0, r3
 800fce6:	f7ff fedf 	bl	800faa8 <Make_Filename>
 800fcea:	f107 030c 	add.w	r3, r7, #12
 800fcee:	f107 0210 	add.w	r2, r7, #16
 800fcf2:	f107 0118 	add.w	r1, r7, #24
 800fcf6:	4807      	ldr	r0, [pc, #28]	; (800fd14 <Load_File_Num+0x230>)
 800fcf8:	f7ff f972 	bl	800efe0 <OpenFileRd>
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d0e5      	beq.n	800fcce <Load_File_Num+0x1ea>
 800fd02:	bf00      	nop
 800fd04:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fd08:	4618      	mov	r0, r3
 800fd0a:	3728      	adds	r7, #40	; 0x28
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	bd80      	pop	{r7, pc}
 800fd10:	08000238 	.word	0x08000238
 800fd14:	200017d8 	.word	0x200017d8
 800fd18:	080001fc 	.word	0x080001fc
 800fd1c:	08000208 	.word	0x08000208
 800fd20:	08000214 	.word	0x08000214
 800fd24:	08000220 	.word	0x08000220
 800fd28:	0800022c 	.word	0x0800022c

0800fd2c <File_Num>:
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	af00      	add	r7, sp, #0
 800fd30:	201d      	movs	r0, #29
 800fd32:	f7ff fed7 	bl	800fae4 <Load_File_Num>
 800fd36:	4603      	mov	r3, r0
 800fd38:	461a      	mov	r2, r3
 800fd3a:	4b12      	ldr	r3, [pc, #72]	; (800fd84 <File_Num+0x58>)
 800fd3c:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 800fd40:	201e      	movs	r0, #30
 800fd42:	f7ff fecf 	bl	800fae4 <Load_File_Num>
 800fd46:	4603      	mov	r3, r0
 800fd48:	461a      	mov	r2, r3
 800fd4a:	4b0e      	ldr	r3, [pc, #56]	; (800fd84 <File_Num+0x58>)
 800fd4c:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
 800fd50:	201f      	movs	r0, #31
 800fd52:	f7ff fec7 	bl	800fae4 <Load_File_Num>
 800fd56:	4603      	mov	r3, r0
 800fd58:	461a      	mov	r2, r3
 800fd5a:	4b0a      	ldr	r3, [pc, #40]	; (800fd84 <File_Num+0x58>)
 800fd5c:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
 800fd60:	2020      	movs	r0, #32
 800fd62:	f7ff febf 	bl	800fae4 <Load_File_Num>
 800fd66:	4603      	mov	r3, r0
 800fd68:	461a      	mov	r2, r3
 800fd6a:	4b06      	ldr	r3, [pc, #24]	; (800fd84 <File_Num+0x58>)
 800fd6c:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 800fd70:	2021      	movs	r0, #33	; 0x21
 800fd72:	f7ff feb7 	bl	800fae4 <Load_File_Num>
 800fd76:	4603      	mov	r3, r0
 800fd78:	461a      	mov	r2, r3
 800fd7a:	4b02      	ldr	r3, [pc, #8]	; (800fd84 <File_Num+0x58>)
 800fd7c:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
 800fd80:	bf00      	nop
 800fd82:	bd80      	pop	{r7, pc}
 800fd84:	20000298 	.word	0x20000298

0800fd88 <Load_Buf>:
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b08e      	sub	sp, #56	; 0x38
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	4603      	mov	r3, r0
 800fd90:	80fb      	strh	r3, [r7, #6]
 800fd92:	4a66      	ldr	r2, [pc, #408]	; (800ff2c <Load_Buf+0x1a4>)
 800fd94:	f107 0318 	add.w	r3, r7, #24
 800fd98:	ca07      	ldmia	r2, {r0, r1, r2}
 800fd9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fd9e:	2301      	movs	r3, #1
 800fda0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fda2:	f107 0218 	add.w	r2, r7, #24
 800fda6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fdaa:	4611      	mov	r1, r2
 800fdac:	4618      	mov	r0, r3
 800fdae:	f7ff fe7b 	bl	800faa8 <Make_Filename>
 800fdb2:	f107 030c 	add.w	r3, r7, #12
 800fdb6:	f107 0210 	add.w	r2, r7, #16
 800fdba:	f107 0118 	add.w	r1, r7, #24
 800fdbe:	485c      	ldr	r0, [pc, #368]	; (800ff30 <Load_Buf+0x1a8>)
 800fdc0:	f7ff f90e 	bl	800efe0 <OpenFileRd>
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fdc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d002      	beq.n	800fdd4 <Load_Buf+0x4c>
 800fdce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdd0:	b2db      	uxtb	r3, r3
 800fdd2:	e0a6      	b.n	800ff22 <Load_Buf+0x19a>
 800fdd4:	2302      	movs	r3, #2
 800fdd6:	633b      	str	r3, [r7, #48]	; 0x30
 800fdd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fddc:	62bb      	str	r3, [r7, #40]	; 0x28
 800fdde:	4b55      	ldr	r3, [pc, #340]	; (800ff34 <Load_Buf+0x1ac>)
 800fde0:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800fde4:	2b03      	cmp	r3, #3
 800fde6:	d101      	bne.n	800fdec <Load_Buf+0x64>
 800fde8:	2304      	movs	r3, #4
 800fdea:	633b      	str	r3, [r7, #48]	; 0x30
 800fdec:	2300      	movs	r3, #0
 800fdee:	637b      	str	r3, [r7, #52]	; 0x34
 800fdf0:	e01d      	b.n	800fe2e <Load_Buf+0xa6>
 800fdf2:	f107 0310 	add.w	r3, r7, #16
 800fdf6:	4619      	mov	r1, r3
 800fdf8:	484d      	ldr	r0, [pc, #308]	; (800ff30 <Load_Buf+0x1a8>)
 800fdfa:	f7ff fb29 	bl	800f450 <ReadFileSec>
 800fdfe:	4603      	mov	r3, r0
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d001      	beq.n	800fe08 <Load_Buf+0x80>
 800fe04:	2303      	movs	r3, #3
 800fe06:	e08c      	b.n	800ff22 <Load_Buf+0x19a>
 800fe08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe0c:	fb02 f303 	mul.w	r3, r2, r3
 800fe10:	0fda      	lsrs	r2, r3, #31
 800fe12:	4413      	add	r3, r2
 800fe14:	105b      	asrs	r3, r3, #1
 800fe16:	3302      	adds	r3, #2
 800fe18:	005b      	lsls	r3, r3, #1
 800fe1a:	4a47      	ldr	r2, [pc, #284]	; (800ff38 <Load_Buf+0x1b0>)
 800fe1c:	4413      	add	r3, r2
 800fe1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe20:	4943      	ldr	r1, [pc, #268]	; (800ff30 <Load_Buf+0x1a8>)
 800fe22:	4618      	mov	r0, r3
 800fe24:	f012 fed8 	bl	8022bd8 <memcpy>
 800fe28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe2a:	3301      	adds	r3, #1
 800fe2c:	637b      	str	r3, [r7, #52]	; 0x34
 800fe2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe32:	429a      	cmp	r2, r3
 800fe34:	dbdd      	blt.n	800fdf2 <Load_Buf+0x6a>
 800fe36:	f107 0310 	add.w	r3, r7, #16
 800fe3a:	4619      	mov	r1, r3
 800fe3c:	483c      	ldr	r0, [pc, #240]	; (800ff30 <Load_Buf+0x1a8>)
 800fe3e:	f7ff fb07 	bl	800f450 <ReadFileSec>
 800fe42:	4603      	mov	r3, r0
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d001      	beq.n	800fe4c <Load_Buf+0xc4>
 800fe48:	2303      	movs	r3, #3
 800fe4a:	e06a      	b.n	800ff22 <Load_Buf+0x19a>
 800fe4c:	4b3b      	ldr	r3, [pc, #236]	; (800ff3c <Load_Buf+0x1b4>)
 800fe4e:	627b      	str	r3, [r7, #36]	; 0x24
 800fe50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe52:	1c9a      	adds	r2, r3, #2
 800fe54:	627a      	str	r2, [r7, #36]	; 0x24
 800fe56:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800fe5a:	801a      	strh	r2, [r3, #0]
 800fe5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe5e:	1c9a      	adds	r2, r3, #2
 800fe60:	627a      	str	r2, [r7, #36]	; 0x24
 800fe62:	4a35      	ldr	r2, [pc, #212]	; (800ff38 <Load_Buf+0x1b0>)
 800fe64:	f9b2 2000 	ldrsh.w	r2, [r2]
 800fe68:	801a      	strh	r2, [r3, #0]
 800fe6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe6c:	1c9a      	adds	r2, r3, #2
 800fe6e:	627a      	str	r2, [r7, #36]	; 0x24
 800fe70:	4a31      	ldr	r2, [pc, #196]	; (800ff38 <Load_Buf+0x1b0>)
 800fe72:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800fe76:	801a      	strh	r2, [r3, #0]
 800fe78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe7a:	1c9a      	adds	r2, r3, #2
 800fe7c:	627a      	str	r2, [r7, #36]	; 0x24
 800fe7e:	4a2d      	ldr	r2, [pc, #180]	; (800ff34 <Load_Buf+0x1ac>)
 800fe80:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800fe84:	801a      	strh	r2, [r3, #0]
 800fe86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe88:	1c9a      	adds	r2, r3, #2
 800fe8a:	627a      	str	r2, [r7, #36]	; 0x24
 800fe8c:	4a29      	ldr	r2, [pc, #164]	; (800ff34 <Load_Buf+0x1ac>)
 800fe8e:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 800fe92:	801a      	strh	r2, [r3, #0]
 800fe94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe96:	1c9a      	adds	r2, r3, #2
 800fe98:	627a      	str	r2, [r7, #36]	; 0x24
 800fe9a:	4a26      	ldr	r2, [pc, #152]	; (800ff34 <Load_Buf+0x1ac>)
 800fe9c:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 800fea0:	801a      	strh	r2, [r3, #0]
 800fea2:	4b23      	ldr	r3, [pc, #140]	; (800ff30 <Load_Buf+0x1a8>)
 800fea4:	627b      	str	r3, [r7, #36]	; 0x24
 800fea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fea8:	1c9a      	adds	r2, r3, #2
 800feaa:	627a      	str	r2, [r7, #36]	; 0x24
 800feac:	f9b3 2000 	ldrsh.w	r2, [r3]
 800feb0:	4b21      	ldr	r3, [pc, #132]	; (800ff38 <Load_Buf+0x1b0>)
 800feb2:	801a      	strh	r2, [r3, #0]
 800feb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feb6:	1c9a      	adds	r2, r3, #2
 800feb8:	627a      	str	r2, [r7, #36]	; 0x24
 800feba:	f9b3 2000 	ldrsh.w	r2, [r3]
 800febe:	4b1e      	ldr	r3, [pc, #120]	; (800ff38 <Load_Buf+0x1b0>)
 800fec0:	805a      	strh	r2, [r3, #2]
 800fec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fec4:	1c9a      	adds	r2, r3, #2
 800fec6:	627a      	str	r2, [r7, #36]	; 0x24
 800fec8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fecc:	4b19      	ldr	r3, [pc, #100]	; (800ff34 <Load_Buf+0x1ac>)
 800fece:	809a      	strh	r2, [r3, #4]
 800fed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fed2:	1c9a      	adds	r2, r3, #2
 800fed4:	627a      	str	r2, [r7, #36]	; 0x24
 800fed6:	f9b3 2000 	ldrsh.w	r2, [r3]
 800feda:	4b16      	ldr	r3, [pc, #88]	; (800ff34 <Load_Buf+0x1ac>)
 800fedc:	829a      	strh	r2, [r3, #20]
 800fede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fee0:	1c9a      	adds	r2, r3, #2
 800fee2:	627a      	str	r2, [r7, #36]	; 0x24
 800fee4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fee8:	4b12      	ldr	r3, [pc, #72]	; (800ff34 <Load_Buf+0x1ac>)
 800feea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800feee:	4b14      	ldr	r3, [pc, #80]	; (800ff40 <Load_Buf+0x1b8>)
 800fef0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fef4:	f043 0301 	orr.w	r3, r3, #1
 800fef8:	b21a      	sxth	r2, r3
 800fefa:	4b11      	ldr	r3, [pc, #68]	; (800ff40 <Load_Buf+0x1b8>)
 800fefc:	801a      	strh	r2, [r3, #0]
 800fefe:	f004 fa51 	bl	80143a4 <DispStatus>
 800ff02:	4b0c      	ldr	r3, [pc, #48]	; (800ff34 <Load_Buf+0x1ac>)
 800ff04:	f9b3 311c 	ldrsh.w	r3, [r3, #284]	; 0x11c
 800ff08:	2b62      	cmp	r3, #98	; 0x62
 800ff0a:	dc09      	bgt.n	800ff20 <Load_Buf+0x198>
 800ff0c:	4b09      	ldr	r3, [pc, #36]	; (800ff34 <Load_Buf+0x1ac>)
 800ff0e:	f9b3 311c 	ldrsh.w	r3, [r3, #284]	; 0x11c
 800ff12:	b29b      	uxth	r3, r3
 800ff14:	3301      	adds	r3, #1
 800ff16:	b29b      	uxth	r3, r3
 800ff18:	b21a      	sxth	r2, r3
 800ff1a:	4b06      	ldr	r3, [pc, #24]	; (800ff34 <Load_Buf+0x1ac>)
 800ff1c:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
 800ff20:	2300      	movs	r3, #0
 800ff22:	4618      	mov	r0, r3
 800ff24:	3738      	adds	r7, #56	; 0x38
 800ff26:	46bd      	mov	sp, r7
 800ff28:	bd80      	pop	{r7, pc}
 800ff2a:	bf00      	nop
 800ff2c:	08000214 	.word	0x08000214
 800ff30:	200017d8 	.word	0x200017d8
 800ff34:	20000298 	.word	0x20000298
 800ff38:	20002870 	.word	0x20002870
 800ff3c:	200015d8 	.word	0x200015d8
 800ff40:	200007a0 	.word	0x200007a0

0800ff44 <Save_Buf>:
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b08e      	sub	sp, #56	; 0x38
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	80fb      	strh	r3, [r7, #6]
 800ff4e:	4a64      	ldr	r2, [pc, #400]	; (80100e0 <Save_Buf+0x19c>)
 800ff50:	f107 0318 	add.w	r3, r7, #24
 800ff54:	ca07      	ldmia	r2, {r0, r1, r2}
 800ff56:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	637b      	str	r3, [r7, #52]	; 0x34
 800ff5e:	2304      	movs	r3, #4
 800ff60:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ff62:	2300      	movs	r3, #0
 800ff64:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff68:	2302      	movs	r3, #2
 800ff6a:	863b      	strh	r3, [r7, #48]	; 0x30
 800ff6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ff70:	857b      	strh	r3, [r7, #42]	; 0x2a
 800ff72:	4b5c      	ldr	r3, [pc, #368]	; (80100e4 <Save_Buf+0x1a0>)
 800ff74:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800ff78:	2b03      	cmp	r3, #3
 800ff7a:	d101      	bne.n	800ff80 <Save_Buf+0x3c>
 800ff7c:	2304      	movs	r3, #4
 800ff7e:	863b      	strh	r3, [r7, #48]	; 0x30
 800ff80:	f107 0218 	add.w	r2, r7, #24
 800ff84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ff88:	4611      	mov	r1, r2
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	f7ff fd8c 	bl	800faa8 <Make_Filename>
 800ff90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ff94:	2100      	movs	r1, #0
 800ff96:	4854      	ldr	r0, [pc, #336]	; (80100e8 <Save_Buf+0x1a4>)
 800ff98:	f012 fe2c 	bl	8022bf4 <memset>
 800ff9c:	f107 030c 	add.w	r3, r7, #12
 800ffa0:	f107 0210 	add.w	r2, r7, #16
 800ffa4:	f107 0118 	add.w	r1, r7, #24
 800ffa8:	484f      	ldr	r0, [pc, #316]	; (80100e8 <Save_Buf+0x1a4>)
 800ffaa:	f7ff fae3 	bl	800f574 <OpenFileWr>
 800ffae:	4603      	mov	r3, r0
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d002      	beq.n	800ffba <Save_Buf+0x76>
 800ffb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffb6:	b2db      	uxtb	r3, r3
 800ffb8:	e08e      	b.n	80100d8 <Save_Buf+0x194>
 800ffba:	2300      	movs	r3, #0
 800ffbc:	637b      	str	r3, [r7, #52]	; 0x34
 800ffbe:	e02f      	b.n	8010020 <Save_Buf+0xdc>
 800ffc0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800ffc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ffc6:	fb02 f303 	mul.w	r3, r2, r3
 800ffca:	0fda      	lsrs	r2, r3, #31
 800ffcc:	4413      	add	r3, r2
 800ffce:	105b      	asrs	r3, r3, #1
 800ffd0:	3302      	adds	r3, #2
 800ffd2:	005b      	lsls	r3, r3, #1
 800ffd4:	4a45      	ldr	r2, [pc, #276]	; (80100ec <Save_Buf+0x1a8>)
 800ffd6:	4413      	add	r3, r2
 800ffd8:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800ffdc:	4619      	mov	r1, r3
 800ffde:	4842      	ldr	r0, [pc, #264]	; (80100e8 <Save_Buf+0x1a4>)
 800ffe0:	f012 fdfa 	bl	8022bd8 <memcpy>
 800ffe4:	f107 0310 	add.w	r3, r7, #16
 800ffe8:	4619      	mov	r1, r3
 800ffea:	483f      	ldr	r0, [pc, #252]	; (80100e8 <Save_Buf+0x1a4>)
 800ffec:	f7ff f9ea 	bl	800f3c4 <ProgFileSec>
 800fff0:	4603      	mov	r3, r0
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d001      	beq.n	800fffa <Save_Buf+0xb6>
 800fff6:	2303      	movs	r3, #3
 800fff8:	e06e      	b.n	80100d8 <Save_Buf+0x194>
 800fffa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800fffe:	1c5a      	adds	r2, r3, #1
 8010000:	f887 2033 	strb.w	r2, [r7, #51]	; 0x33
 8010004:	085b      	lsrs	r3, r3, #1
 8010006:	b2db      	uxtb	r3, r3
 8010008:	f003 0303 	and.w	r3, r3, #3
 801000c:	b2db      	uxtb	r3, r3
 801000e:	461a      	mov	r2, r3
 8010010:	2102      	movs	r1, #2
 8010012:	f44f 7084 	mov.w	r0, #264	; 0x108
 8010016:	f7ff fb8f 	bl	800f738 <PrintClk>
 801001a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801001c:	3301      	adds	r3, #1
 801001e:	637b      	str	r3, [r7, #52]	; 0x34
 8010020:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010024:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010026:	429a      	cmp	r2, r3
 8010028:	dbca      	blt.n	800ffc0 <Save_Buf+0x7c>
 801002a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801002e:	461a      	mov	r2, r3
 8010030:	2100      	movs	r1, #0
 8010032:	482d      	ldr	r0, [pc, #180]	; (80100e8 <Save_Buf+0x1a4>)
 8010034:	f012 fdde 	bl	8022bf4 <memset>
 8010038:	4b2b      	ldr	r3, [pc, #172]	; (80100e8 <Save_Buf+0x1a4>)
 801003a:	627b      	str	r3, [r7, #36]	; 0x24
 801003c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801003e:	1c9a      	adds	r2, r3, #2
 8010040:	627a      	str	r2, [r7, #36]	; 0x24
 8010042:	4a2a      	ldr	r2, [pc, #168]	; (80100ec <Save_Buf+0x1a8>)
 8010044:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010048:	801a      	strh	r2, [r3, #0]
 801004a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801004c:	1c9a      	adds	r2, r3, #2
 801004e:	627a      	str	r2, [r7, #36]	; 0x24
 8010050:	4a26      	ldr	r2, [pc, #152]	; (80100ec <Save_Buf+0x1a8>)
 8010052:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8010056:	801a      	strh	r2, [r3, #0]
 8010058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801005a:	1c9a      	adds	r2, r3, #2
 801005c:	627a      	str	r2, [r7, #36]	; 0x24
 801005e:	4a21      	ldr	r2, [pc, #132]	; (80100e4 <Save_Buf+0x1a0>)
 8010060:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8010064:	801a      	strh	r2, [r3, #0]
 8010066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010068:	1c9a      	adds	r2, r3, #2
 801006a:	627a      	str	r2, [r7, #36]	; 0x24
 801006c:	4a1d      	ldr	r2, [pc, #116]	; (80100e4 <Save_Buf+0x1a0>)
 801006e:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 8010072:	801a      	strh	r2, [r3, #0]
 8010074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010076:	1c9a      	adds	r2, r3, #2
 8010078:	627a      	str	r2, [r7, #36]	; 0x24
 801007a:	4a1a      	ldr	r2, [pc, #104]	; (80100e4 <Save_Buf+0x1a0>)
 801007c:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 8010080:	801a      	strh	r2, [r3, #0]
 8010082:	f107 0310 	add.w	r3, r7, #16
 8010086:	4619      	mov	r1, r3
 8010088:	4817      	ldr	r0, [pc, #92]	; (80100e8 <Save_Buf+0x1a4>)
 801008a:	f7ff f99b 	bl	800f3c4 <ProgFileSec>
 801008e:	4603      	mov	r3, r0
 8010090:	2b00      	cmp	r3, #0
 8010092:	d001      	beq.n	8010098 <Save_Buf+0x154>
 8010094:	2303      	movs	r3, #3
 8010096:	e01f      	b.n	80100d8 <Save_Buf+0x194>
 8010098:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801009c:	f503 5100 	add.w	r1, r3, #8192	; 0x2000
 80100a0:	f107 030c 	add.w	r3, r7, #12
 80100a4:	f107 0210 	add.w	r2, r7, #16
 80100a8:	480f      	ldr	r0, [pc, #60]	; (80100e8 <Save_Buf+0x1a4>)
 80100aa:	f7ff f9ff 	bl	800f4ac <CloseFile>
 80100ae:	4603      	mov	r3, r0
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d001      	beq.n	80100b8 <Save_Buf+0x174>
 80100b4:	2303      	movs	r3, #3
 80100b6:	e00f      	b.n	80100d8 <Save_Buf+0x194>
 80100b8:	4b0a      	ldr	r3, [pc, #40]	; (80100e4 <Save_Buf+0x1a0>)
 80100ba:	f9b3 30fc 	ldrsh.w	r3, [r3, #252]	; 0xfc
 80100be:	2b62      	cmp	r3, #98	; 0x62
 80100c0:	dc09      	bgt.n	80100d6 <Save_Buf+0x192>
 80100c2:	4b08      	ldr	r3, [pc, #32]	; (80100e4 <Save_Buf+0x1a0>)
 80100c4:	f9b3 30fc 	ldrsh.w	r3, [r3, #252]	; 0xfc
 80100c8:	b29b      	uxth	r3, r3
 80100ca:	3301      	adds	r3, #1
 80100cc:	b29b      	uxth	r3, r3
 80100ce:	b21a      	sxth	r2, r3
 80100d0:	4b04      	ldr	r3, [pc, #16]	; (80100e4 <Save_Buf+0x1a0>)
 80100d2:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
 80100d6:	2300      	movs	r3, #0
 80100d8:	4618      	mov	r0, r3
 80100da:	3738      	adds	r7, #56	; 0x38
 80100dc:	46bd      	mov	sp, r7
 80100de:	bd80      	pop	{r7, pc}
 80100e0:	08000214 	.word	0x08000214
 80100e4:	20000298 	.word	0x20000298
 80100e8:	200017d8 	.word	0x200017d8
 80100ec:	20002870 	.word	0x20002870

080100f0 <Save_Dat>:
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b08a      	sub	sp, #40	; 0x28
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	4603      	mov	r3, r0
 80100f8:	80fb      	strh	r3, [r7, #6]
 80100fa:	4a42      	ldr	r2, [pc, #264]	; (8010204 <Save_Dat+0x114>)
 80100fc:	f107 0318 	add.w	r3, r7, #24
 8010100:	ca07      	ldmia	r2, {r0, r1, r2}
 8010102:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010106:	2304      	movs	r3, #4
 8010108:	84fb      	strh	r3, [r7, #38]	; 0x26
 801010a:	f107 0218 	add.w	r2, r7, #24
 801010e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010112:	4611      	mov	r1, r2
 8010114:	4618      	mov	r0, r3
 8010116:	f7ff fcc7 	bl	800faa8 <Make_Filename>
 801011a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801011e:	2100      	movs	r1, #0
 8010120:	4839      	ldr	r0, [pc, #228]	; (8010208 <Save_Dat+0x118>)
 8010122:	f012 fd67 	bl	8022bf4 <memset>
 8010126:	f107 030c 	add.w	r3, r7, #12
 801012a:	f107 0210 	add.w	r2, r7, #16
 801012e:	f107 0118 	add.w	r1, r7, #24
 8010132:	4835      	ldr	r0, [pc, #212]	; (8010208 <Save_Dat+0x118>)
 8010134:	f7ff fa1e 	bl	800f574 <OpenFileWr>
 8010138:	4603      	mov	r3, r0
 801013a:	2b00      	cmp	r3, #0
 801013c:	d002      	beq.n	8010144 <Save_Dat+0x54>
 801013e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010140:	b2db      	uxtb	r3, r3
 8010142:	e05b      	b.n	80101fc <Save_Dat+0x10c>
 8010144:	4b30      	ldr	r3, [pc, #192]	; (8010208 <Save_Dat+0x118>)
 8010146:	2201      	movs	r2, #1
 8010148:	701a      	strb	r2, [r3, #0]
 801014a:	4b30      	ldr	r3, [pc, #192]	; (801020c <Save_Dat+0x11c>)
 801014c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8010150:	b2da      	uxtb	r2, r3
 8010152:	4b2d      	ldr	r3, [pc, #180]	; (8010208 <Save_Dat+0x118>)
 8010154:	705a      	strb	r2, [r3, #1]
 8010156:	4b2d      	ldr	r3, [pc, #180]	; (801020c <Save_Dat+0x11c>)
 8010158:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 801015c:	b2da      	uxtb	r2, r3
 801015e:	4b2a      	ldr	r3, [pc, #168]	; (8010208 <Save_Dat+0x118>)
 8010160:	709a      	strb	r2, [r3, #2]
 8010162:	4b2a      	ldr	r3, [pc, #168]	; (801020c <Save_Dat+0x11c>)
 8010164:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010168:	b2da      	uxtb	r2, r3
 801016a:	4b27      	ldr	r3, [pc, #156]	; (8010208 <Save_Dat+0x118>)
 801016c:	70da      	strb	r2, [r3, #3]
 801016e:	4b27      	ldr	r3, [pc, #156]	; (801020c <Save_Dat+0x11c>)
 8010170:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010174:	b2da      	uxtb	r2, r3
 8010176:	4b24      	ldr	r3, [pc, #144]	; (8010208 <Save_Dat+0x118>)
 8010178:	711a      	strb	r2, [r3, #4]
 801017a:	4b24      	ldr	r3, [pc, #144]	; (801020c <Save_Dat+0x11c>)
 801017c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8010180:	b2da      	uxtb	r2, r3
 8010182:	4b21      	ldr	r3, [pc, #132]	; (8010208 <Save_Dat+0x118>)
 8010184:	715a      	strb	r2, [r3, #5]
 8010186:	4b21      	ldr	r3, [pc, #132]	; (801020c <Save_Dat+0x11c>)
 8010188:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801018c:	b2da      	uxtb	r2, r3
 801018e:	4b1e      	ldr	r3, [pc, #120]	; (8010208 <Save_Dat+0x118>)
 8010190:	719a      	strb	r2, [r3, #6]
 8010192:	4b1e      	ldr	r3, [pc, #120]	; (801020c <Save_Dat+0x11c>)
 8010194:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8010198:	b2da      	uxtb	r2, r3
 801019a:	4b1b      	ldr	r3, [pc, #108]	; (8010208 <Save_Dat+0x118>)
 801019c:	71da      	strb	r2, [r3, #7]
 801019e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80101a2:	491b      	ldr	r1, [pc, #108]	; (8010210 <Save_Dat+0x120>)
 80101a4:	481b      	ldr	r0, [pc, #108]	; (8010214 <Save_Dat+0x124>)
 80101a6:	f012 fd17 	bl	8022bd8 <memcpy>
 80101aa:	f107 0310 	add.w	r3, r7, #16
 80101ae:	4619      	mov	r1, r3
 80101b0:	4815      	ldr	r0, [pc, #84]	; (8010208 <Save_Dat+0x118>)
 80101b2:	f7ff f907 	bl	800f3c4 <ProgFileSec>
 80101b6:	4603      	mov	r3, r0
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d001      	beq.n	80101c0 <Save_Dat+0xd0>
 80101bc:	2303      	movs	r3, #3
 80101be:	e01d      	b.n	80101fc <Save_Dat+0x10c>
 80101c0:	f107 030c 	add.w	r3, r7, #12
 80101c4:	f107 0210 	add.w	r2, r7, #16
 80101c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80101cc:	480e      	ldr	r0, [pc, #56]	; (8010208 <Save_Dat+0x118>)
 80101ce:	f7ff f96d 	bl	800f4ac <CloseFile>
 80101d2:	4603      	mov	r3, r0
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d001      	beq.n	80101dc <Save_Dat+0xec>
 80101d8:	2303      	movs	r3, #3
 80101da:	e00f      	b.n	80101fc <Save_Dat+0x10c>
 80101dc:	4b0b      	ldr	r3, [pc, #44]	; (801020c <Save_Dat+0x11c>)
 80101de:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 80101e2:	2b62      	cmp	r3, #98	; 0x62
 80101e4:	dc09      	bgt.n	80101fa <Save_Dat+0x10a>
 80101e6:	4b09      	ldr	r3, [pc, #36]	; (801020c <Save_Dat+0x11c>)
 80101e8:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 80101ec:	b29b      	uxth	r3, r3
 80101ee:	3301      	adds	r3, #1
 80101f0:	b29b      	uxth	r3, r3
 80101f2:	b21a      	sxth	r2, r3
 80101f4:	4b05      	ldr	r3, [pc, #20]	; (801020c <Save_Dat+0x11c>)
 80101f6:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
 80101fa:	2300      	movs	r3, #0
 80101fc:	4618      	mov	r0, r3
 80101fe:	3728      	adds	r7, #40	; 0x28
 8010200:	46bd      	mov	sp, r7
 8010202:	bd80      	pop	{r7, pc}
 8010204:	08000208 	.word	0x08000208
 8010208:	200017d8 	.word	0x200017d8
 801020c:	20000298 	.word	0x20000298
 8010210:	20000c08 	.word	0x20000c08
 8010214:	200017e2 	.word	0x200017e2

08010218 <Load_Dat>:
 8010218:	b580      	push	{r7, lr}
 801021a:	b08a      	sub	sp, #40	; 0x28
 801021c:	af00      	add	r7, sp, #0
 801021e:	4603      	mov	r3, r0
 8010220:	80fb      	strh	r3, [r7, #6]
 8010222:	4a4f      	ldr	r2, [pc, #316]	; (8010360 <Load_Dat+0x148>)
 8010224:	f107 0314 	add.w	r3, r7, #20
 8010228:	ca07      	ldmia	r2, {r0, r1, r2}
 801022a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801022e:	2300      	movs	r3, #0
 8010230:	847b      	strh	r3, [r7, #34]	; 0x22
 8010232:	f107 0214 	add.w	r2, r7, #20
 8010236:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801023a:	4611      	mov	r1, r2
 801023c:	4618      	mov	r0, r3
 801023e:	f7ff fc33 	bl	800faa8 <Make_Filename>
 8010242:	f107 0308 	add.w	r3, r7, #8
 8010246:	f107 020c 	add.w	r2, r7, #12
 801024a:	f107 0114 	add.w	r1, r7, #20
 801024e:	4845      	ldr	r0, [pc, #276]	; (8010364 <Load_Dat+0x14c>)
 8010250:	f7fe fec6 	bl	800efe0 <OpenFileRd>
 8010254:	4603      	mov	r3, r0
 8010256:	847b      	strh	r3, [r7, #34]	; 0x22
 8010258:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801025c:	2b00      	cmp	r3, #0
 801025e:	d002      	beq.n	8010266 <Load_Dat+0x4e>
 8010260:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010262:	b2db      	uxtb	r3, r3
 8010264:	e077      	b.n	8010356 <Load_Dat+0x13e>
 8010266:	f107 030c 	add.w	r3, r7, #12
 801026a:	4619      	mov	r1, r3
 801026c:	483d      	ldr	r0, [pc, #244]	; (8010364 <Load_Dat+0x14c>)
 801026e:	f7ff f8ef 	bl	800f450 <ReadFileSec>
 8010272:	4603      	mov	r3, r0
 8010274:	2b00      	cmp	r3, #0
 8010276:	d001      	beq.n	801027c <Load_Dat+0x64>
 8010278:	2303      	movs	r3, #3
 801027a:	e06c      	b.n	8010356 <Load_Dat+0x13e>
 801027c:	f44f 729b 	mov.w	r2, #310	; 0x136
 8010280:	4938      	ldr	r1, [pc, #224]	; (8010364 <Load_Dat+0x14c>)
 8010282:	4839      	ldr	r0, [pc, #228]	; (8010368 <Load_Dat+0x150>)
 8010284:	f012 fca8 	bl	8022bd8 <memcpy>
 8010288:	4b36      	ldr	r3, [pc, #216]	; (8010364 <Load_Dat+0x14c>)
 801028a:	78db      	ldrb	r3, [r3, #3]
 801028c:	b21a      	sxth	r2, r3
 801028e:	4b37      	ldr	r3, [pc, #220]	; (801036c <Load_Dat+0x154>)
 8010290:	879a      	strh	r2, [r3, #60]	; 0x3c
 8010292:	4b34      	ldr	r3, [pc, #208]	; (8010364 <Load_Dat+0x14c>)
 8010294:	791b      	ldrb	r3, [r3, #4]
 8010296:	b21a      	sxth	r2, r3
 8010298:	4b34      	ldr	r3, [pc, #208]	; (801036c <Load_Dat+0x154>)
 801029a:	809a      	strh	r2, [r3, #4]
 801029c:	4b31      	ldr	r3, [pc, #196]	; (8010364 <Load_Dat+0x14c>)
 801029e:	795b      	ldrb	r3, [r3, #5]
 80102a0:	b21a      	sxth	r2, r3
 80102a2:	4b32      	ldr	r3, [pc, #200]	; (801036c <Load_Dat+0x154>)
 80102a4:	819a      	strh	r2, [r3, #12]
 80102a6:	4b2f      	ldr	r3, [pc, #188]	; (8010364 <Load_Dat+0x14c>)
 80102a8:	799b      	ldrb	r3, [r3, #6]
 80102aa:	b21a      	sxth	r2, r3
 80102ac:	4b2f      	ldr	r3, [pc, #188]	; (801036c <Load_Dat+0x154>)
 80102ae:	829a      	strh	r2, [r3, #20]
 80102b0:	4b2c      	ldr	r3, [pc, #176]	; (8010364 <Load_Dat+0x14c>)
 80102b2:	79db      	ldrb	r3, [r3, #7]
 80102b4:	b21a      	sxth	r2, r3
 80102b6:	4b2d      	ldr	r3, [pc, #180]	; (801036c <Load_Dat+0x154>)
 80102b8:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 80102bc:	2300      	movs	r3, #0
 80102be:	627b      	str	r3, [r7, #36]	; 0x24
 80102c0:	e010      	b.n	80102e4 <Load_Dat+0xcc>
 80102c2:	4a2a      	ldr	r2, [pc, #168]	; (801036c <Load_Dat+0x154>)
 80102c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102c6:	00db      	lsls	r3, r3, #3
 80102c8:	4413      	add	r3, r2
 80102ca:	799b      	ldrb	r3, [r3, #6]
 80102cc:	f043 0320 	orr.w	r3, r3, #32
 80102d0:	b2d9      	uxtb	r1, r3
 80102d2:	4a26      	ldr	r2, [pc, #152]	; (801036c <Load_Dat+0x154>)
 80102d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102d6:	00db      	lsls	r3, r3, #3
 80102d8:	4413      	add	r3, r2
 80102da:	460a      	mov	r2, r1
 80102dc:	719a      	strb	r2, [r3, #6]
 80102de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102e0:	3301      	adds	r3, #1
 80102e2:	627b      	str	r3, [r7, #36]	; 0x24
 80102e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102e6:	2b03      	cmp	r3, #3
 80102e8:	ddeb      	ble.n	80102c2 <Load_Dat+0xaa>
 80102ea:	4b20      	ldr	r3, [pc, #128]	; (801036c <Load_Dat+0x154>)
 80102ec:	f893 30d6 	ldrb.w	r3, [r3, #214]	; 0xd6
 80102f0:	f043 0320 	orr.w	r3, r3, #32
 80102f4:	b2da      	uxtb	r2, r3
 80102f6:	4b1d      	ldr	r3, [pc, #116]	; (801036c <Load_Dat+0x154>)
 80102f8:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
 80102fc:	4b1b      	ldr	r3, [pc, #108]	; (801036c <Load_Dat+0x154>)
 80102fe:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 8010302:	f043 0320 	orr.w	r3, r3, #32
 8010306:	b2da      	uxtb	r2, r3
 8010308:	4b18      	ldr	r3, [pc, #96]	; (801036c <Load_Dat+0x154>)
 801030a:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
 801030e:	4b17      	ldr	r3, [pc, #92]	; (801036c <Load_Dat+0x154>)
 8010310:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010314:	f043 0320 	orr.w	r3, r3, #32
 8010318:	b2da      	uxtb	r2, r3
 801031a:	4b14      	ldr	r3, [pc, #80]	; (801036c <Load_Dat+0x154>)
 801031c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010320:	4b12      	ldr	r3, [pc, #72]	; (801036c <Load_Dat+0x154>)
 8010322:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8010326:	f043 0320 	orr.w	r3, r3, #32
 801032a:	b2da      	uxtb	r2, r3
 801032c:	4b0f      	ldr	r3, [pc, #60]	; (801036c <Load_Dat+0x154>)
 801032e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8010332:	f002 ffab 	bl	801328c <Update_Detail>
 8010336:	4b0d      	ldr	r3, [pc, #52]	; (801036c <Load_Dat+0x154>)
 8010338:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	; 0x114
 801033c:	2b62      	cmp	r3, #98	; 0x62
 801033e:	dc09      	bgt.n	8010354 <Load_Dat+0x13c>
 8010340:	4b0a      	ldr	r3, [pc, #40]	; (801036c <Load_Dat+0x154>)
 8010342:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	; 0x114
 8010346:	b29b      	uxth	r3, r3
 8010348:	3301      	adds	r3, #1
 801034a:	b29b      	uxth	r3, r3
 801034c:	b21a      	sxth	r2, r3
 801034e:	4b07      	ldr	r3, [pc, #28]	; (801036c <Load_Dat+0x154>)
 8010350:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
 8010354:	2300      	movs	r3, #0
 8010356:	4618      	mov	r0, r3
 8010358:	3728      	adds	r7, #40	; 0x28
 801035a:	46bd      	mov	sp, r7
 801035c:	bd80      	pop	{r7, pc}
 801035e:	bf00      	nop
 8010360:	08000208 	.word	0x08000208
 8010364:	200017d8 	.word	0x200017d8
 8010368:	20000008 	.word	0x20000008
 801036c:	20000298 	.word	0x20000298

08010370 <Save_Bmp>:
 8010370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010372:	b08f      	sub	sp, #60	; 0x3c
 8010374:	af00      	add	r7, sp, #0
 8010376:	4603      	mov	r3, r0
 8010378:	80fb      	strh	r3, [r7, #6]
 801037a:	4aaa      	ldr	r2, [pc, #680]	; (8010624 <Save_Bmp+0x2b4>)
 801037c:	f107 0314 	add.w	r3, r7, #20
 8010380:	ca07      	ldmia	r2, {r0, r1, r2}
 8010382:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010386:	2304      	movs	r3, #4
 8010388:	62bb      	str	r3, [r7, #40]	; 0x28
 801038a:	2336      	movs	r3, #54	; 0x36
 801038c:	867b      	strh	r3, [r7, #50]	; 0x32
 801038e:	2300      	movs	r3, #0
 8010390:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8010392:	2300      	movs	r3, #0
 8010394:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8010396:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801039a:	627b      	str	r3, [r7, #36]	; 0x24
 801039c:	4ba2      	ldr	r3, [pc, #648]	; (8010628 <Save_Bmp+0x2b8>)
 801039e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80103a2:	2b05      	cmp	r3, #5
 80103a4:	d105      	bne.n	80103b2 <Save_Bmp+0x42>
 80103a6:	f7fe f9c5 	bl	800e734 <Close_Pop>
 80103aa:	49a0      	ldr	r1, [pc, #640]	; (801062c <Save_Bmp+0x2bc>)
 80103ac:	48a0      	ldr	r0, [pc, #640]	; (8010630 <Save_Bmp+0x2c0>)
 80103ae:	f7fd f9c1 	bl	800d734 <DrawWindow>
 80103b2:	f107 0214 	add.w	r2, r7, #20
 80103b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80103ba:	4611      	mov	r1, r2
 80103bc:	4618      	mov	r0, r3
 80103be:	f7ff fb73 	bl	800faa8 <Make_Filename>
 80103c2:	f107 0308 	add.w	r3, r7, #8
 80103c6:	f107 020c 	add.w	r2, r7, #12
 80103ca:	f107 0114 	add.w	r1, r7, #20
 80103ce:	4899      	ldr	r0, [pc, #612]	; (8010634 <Save_Bmp+0x2c4>)
 80103d0:	f7ff f8d0 	bl	800f574 <OpenFileWr>
 80103d4:	4603      	mov	r3, r0
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d002      	beq.n	80103e0 <Save_Bmp+0x70>
 80103da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103dc:	b2db      	uxtb	r3, r3
 80103de:	e11c      	b.n	801061a <Save_Bmp+0x2aa>
 80103e0:	4b94      	ldr	r3, [pc, #592]	; (8010634 <Save_Bmp+0x2c4>)
 80103e2:	4a95      	ldr	r2, [pc, #596]	; (8010638 <Save_Bmp+0x2c8>)
 80103e4:	4614      	mov	r4, r2
 80103e6:	469c      	mov	ip, r3
 80103e8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80103ec:	4665      	mov	r5, ip
 80103ee:	4626      	mov	r6, r4
 80103f0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80103f2:	6028      	str	r0, [r5, #0]
 80103f4:	6069      	str	r1, [r5, #4]
 80103f6:	60aa      	str	r2, [r5, #8]
 80103f8:	60eb      	str	r3, [r5, #12]
 80103fa:	3410      	adds	r4, #16
 80103fc:	f10c 0c10 	add.w	ip, ip, #16
 8010400:	4574      	cmp	r4, lr
 8010402:	d1f3      	bne.n	80103ec <Save_Bmp+0x7c>
 8010404:	4663      	mov	r3, ip
 8010406:	4622      	mov	r2, r4
 8010408:	6810      	ldr	r0, [r2, #0]
 801040a:	6018      	str	r0, [r3, #0]
 801040c:	8892      	ldrh	r2, [r2, #4]
 801040e:	809a      	strh	r2, [r3, #4]
 8010410:	2336      	movs	r3, #54	; 0x36
 8010412:	867b      	strh	r3, [r7, #50]	; 0x32
 8010414:	2300      	movs	r3, #0
 8010416:	863b      	strh	r3, [r7, #48]	; 0x30
 8010418:	e042      	b.n	80104a0 <Save_Bmp+0x130>
 801041a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801041e:	4a87      	ldr	r2, [pc, #540]	; (801063c <Save_Bmp+0x2cc>)
 8010420:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010424:	121b      	asrs	r3, r3, #8
 8010426:	b2da      	uxtb	r2, r3
 8010428:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801042c:	0099      	lsls	r1, r3, #2
 801042e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8010432:	440b      	add	r3, r1
 8010434:	f022 0207 	bic.w	r2, r2, #7
 8010438:	b2d1      	uxtb	r1, r2
 801043a:	4a7e      	ldr	r2, [pc, #504]	; (8010634 <Save_Bmp+0x2c4>)
 801043c:	54d1      	strb	r1, [r2, r3]
 801043e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010442:	4a7e      	ldr	r2, [pc, #504]	; (801063c <Save_Bmp+0x2cc>)
 8010444:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010448:	10db      	asrs	r3, r3, #3
 801044a:	b2da      	uxtb	r2, r3
 801044c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010450:	0099      	lsls	r1, r3, #2
 8010452:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8010456:	440b      	add	r3, r1
 8010458:	3301      	adds	r3, #1
 801045a:	f022 0203 	bic.w	r2, r2, #3
 801045e:	b2d1      	uxtb	r1, r2
 8010460:	4a74      	ldr	r2, [pc, #464]	; (8010634 <Save_Bmp+0x2c4>)
 8010462:	54d1      	strb	r1, [r2, r3]
 8010464:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010468:	4a74      	ldr	r2, [pc, #464]	; (801063c <Save_Bmp+0x2cc>)
 801046a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801046e:	00d9      	lsls	r1, r3, #3
 8010470:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010474:	009a      	lsls	r2, r3, #2
 8010476:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801047a:	4413      	add	r3, r2
 801047c:	3302      	adds	r3, #2
 801047e:	b2c9      	uxtb	r1, r1
 8010480:	4a6c      	ldr	r2, [pc, #432]	; (8010634 <Save_Bmp+0x2c4>)
 8010482:	54d1      	strb	r1, [r2, r3]
 8010484:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010488:	009a      	lsls	r2, r3, #2
 801048a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801048e:	4413      	add	r3, r2
 8010490:	3303      	adds	r3, #3
 8010492:	4a68      	ldr	r2, [pc, #416]	; (8010634 <Save_Bmp+0x2c4>)
 8010494:	2100      	movs	r1, #0
 8010496:	54d1      	strb	r1, [r2, r3]
 8010498:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801049a:	3301      	adds	r3, #1
 801049c:	b29b      	uxth	r3, r3
 801049e:	863b      	strh	r3, [r7, #48]	; 0x30
 80104a0:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80104a4:	2b0f      	cmp	r3, #15
 80104a6:	ddb8      	ble.n	801041a <Save_Bmp+0xaa>
 80104a8:	2376      	movs	r3, #118	; 0x76
 80104aa:	867b      	strh	r3, [r7, #50]	; 0x32
 80104ac:	2300      	movs	r3, #0
 80104ae:	86bb      	strh	r3, [r7, #52]	; 0x34
 80104b0:	e079      	b.n	80105a6 <Save_Bmp+0x236>
 80104b2:	2300      	movs	r3, #0
 80104b4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80104b6:	e06b      	b.n	8010590 <Save_Bmp+0x220>
 80104b8:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 80104bc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80104c0:	4611      	mov	r1, r2
 80104c2:	4618      	mov	r0, r3
 80104c4:	f001 fe62 	bl	801218c <LCD_Set_Posi>
 80104c8:	f001 fed6 	bl	8012278 <LCD_Get_Pixel>
 80104cc:	4603      	mov	r3, r0
 80104ce:	847b      	strh	r3, [r7, #34]	; 0x22
 80104d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80104d2:	3301      	adds	r3, #1
 80104d4:	b29b      	uxth	r3, r3
 80104d6:	b21b      	sxth	r3, r3
 80104d8:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 80104dc:	4611      	mov	r1, r2
 80104de:	4618      	mov	r0, r3
 80104e0:	f001 fe54 	bl	801218c <LCD_Set_Posi>
 80104e4:	f001 fec8 	bl	8012278 <LCD_Get_Pixel>
 80104e8:	4603      	mov	r3, r0
 80104ea:	843b      	strh	r3, [r7, #32]
 80104ec:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80104f0:	4618      	mov	r0, r3
 80104f2:	f7ff f8a1 	bl	800f638 <Color_Num>
 80104f6:	4603      	mov	r3, r0
 80104f8:	011b      	lsls	r3, r3, #4
 80104fa:	b2dc      	uxtb	r4, r3
 80104fc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010500:	4618      	mov	r0, r3
 8010502:	f7ff f899 	bl	800f638 <Color_Num>
 8010506:	4603      	mov	r3, r0
 8010508:	461a      	mov	r2, r3
 801050a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801050e:	4422      	add	r2, r4
 8010510:	b2d1      	uxtb	r1, r2
 8010512:	4a48      	ldr	r2, [pc, #288]	; (8010634 <Save_Bmp+0x2c4>)
 8010514:	54d1      	strb	r1, [r2, r3]
 8010516:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801051a:	b29b      	uxth	r3, r3
 801051c:	3301      	adds	r3, #1
 801051e:	b29b      	uxth	r3, r3
 8010520:	867b      	strh	r3, [r7, #50]	; 0x32
 8010522:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8010526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010528:	429a      	cmp	r2, r3
 801052a:	dc2d      	bgt.n	8010588 <Save_Bmp+0x218>
 801052c:	2300      	movs	r3, #0
 801052e:	867b      	strh	r3, [r7, #50]	; 0x32
 8010530:	f107 030c 	add.w	r3, r7, #12
 8010534:	4619      	mov	r1, r3
 8010536:	483f      	ldr	r0, [pc, #252]	; (8010634 <Save_Bmp+0x2c4>)
 8010538:	f7fe ff44 	bl	800f3c4 <ProgFileSec>
 801053c:	4603      	mov	r3, r0
 801053e:	2b00      	cmp	r3, #0
 8010540:	d001      	beq.n	8010546 <Save_Bmp+0x1d6>
 8010542:	2303      	movs	r3, #3
 8010544:	e069      	b.n	801061a <Save_Bmp+0x2aa>
 8010546:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 801054a:	2b00      	cmp	r3, #0
 801054c:	d110      	bne.n	8010570 <Save_Bmp+0x200>
 801054e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8010552:	b29a      	uxth	r2, r3
 8010554:	3201      	adds	r2, #1
 8010556:	b292      	uxth	r2, r2
 8010558:	85fa      	strh	r2, [r7, #46]	; 0x2e
 801055a:	105b      	asrs	r3, r3, #1
 801055c:	b21b      	sxth	r3, r3
 801055e:	b2db      	uxtb	r3, r3
 8010560:	f003 0303 	and.w	r3, r3, #3
 8010564:	b2db      	uxtb	r3, r3
 8010566:	461a      	mov	r2, r3
 8010568:	2102      	movs	r1, #2
 801056a:	20a8      	movs	r0, #168	; 0xa8
 801056c:	f7ff f8e4 	bl	800f738 <PrintClk>
 8010570:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8010574:	b29b      	uxth	r3, r3
 8010576:	3301      	adds	r3, #1
 8010578:	b29b      	uxth	r3, r3
 801057a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 801057c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8010580:	2b01      	cmp	r3, #1
 8010582:	dd01      	ble.n	8010588 <Save_Bmp+0x218>
 8010584:	2300      	movs	r3, #0
 8010586:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8010588:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801058a:	3302      	adds	r3, #2
 801058c:	b29b      	uxth	r3, r3
 801058e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8010590:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8010594:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8010598:	db8e      	blt.n	80104b8 <Save_Bmp+0x148>
 801059a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801059e:	b29b      	uxth	r3, r3
 80105a0:	3301      	adds	r3, #1
 80105a2:	b29b      	uxth	r3, r3
 80105a4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80105a6:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80105aa:	2bef      	cmp	r3, #239	; 0xef
 80105ac:	dd81      	ble.n	80104b2 <Save_Bmp+0x142>
 80105ae:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d00c      	beq.n	80105d0 <Save_Bmp+0x260>
 80105b6:	f107 030c 	add.w	r3, r7, #12
 80105ba:	4619      	mov	r1, r3
 80105bc:	481d      	ldr	r0, [pc, #116]	; (8010634 <Save_Bmp+0x2c4>)
 80105be:	f7fe ff01 	bl	800f3c4 <ProgFileSec>
 80105c2:	4603      	mov	r3, r0
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d003      	beq.n	80105d0 <Save_Bmp+0x260>
 80105c8:	f7fe f8ca 	bl	800e760 <List_Pop>
 80105cc:	2303      	movs	r3, #3
 80105ce:	e024      	b.n	801061a <Save_Bmp+0x2aa>
 80105d0:	f107 0308 	add.w	r3, r7, #8
 80105d4:	f107 020c 	add.w	r2, r7, #12
 80105d8:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 80105dc:	4815      	ldr	r0, [pc, #84]	; (8010634 <Save_Bmp+0x2c4>)
 80105de:	f7fe ff65 	bl	800f4ac <CloseFile>
 80105e2:	4603      	mov	r3, r0
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d001      	beq.n	80105ec <Save_Bmp+0x27c>
 80105e8:	2303      	movs	r3, #3
 80105ea:	e016      	b.n	801061a <Save_Bmp+0x2aa>
 80105ec:	4b0e      	ldr	r3, [pc, #56]	; (8010628 <Save_Bmp+0x2b8>)
 80105ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80105f2:	2b05      	cmp	r3, #5
 80105f4:	d101      	bne.n	80105fa <Save_Bmp+0x28a>
 80105f6:	f7fe f8b3 	bl	800e760 <List_Pop>
 80105fa:	4b11      	ldr	r3, [pc, #68]	; (8010640 <Save_Bmp+0x2d0>)
 80105fc:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 8010600:	2b62      	cmp	r3, #98	; 0x62
 8010602:	dc09      	bgt.n	8010618 <Save_Bmp+0x2a8>
 8010604:	4b0e      	ldr	r3, [pc, #56]	; (8010640 <Save_Bmp+0x2d0>)
 8010606:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 801060a:	b29b      	uxth	r3, r3
 801060c:	3301      	adds	r3, #1
 801060e:	b29b      	uxth	r3, r3
 8010610:	b21a      	sxth	r2, r3
 8010612:	4b0b      	ldr	r3, [pc, #44]	; (8010640 <Save_Bmp+0x2d0>)
 8010614:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 8010618:	2300      	movs	r3, #0
 801061a:	4618      	mov	r0, r3
 801061c:	373c      	adds	r7, #60	; 0x3c
 801061e:	46bd      	mov	sp, r7
 8010620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010622:	bf00      	nop
 8010624:	080001fc 	.word	0x080001fc
 8010628:	2000079e 	.word	0x2000079e
 801062c:	20000140 	.word	0x20000140
 8010630:	20000c08 	.word	0x20000c08
 8010634:	200017d8 	.word	0x200017d8
 8010638:	08001b84 	.word	0x08001b84
 801063c:	08001b64 	.word	0x08001b64
 8010640:	20000298 	.word	0x20000298

08010644 <Save_Csv>:
 8010644:	b580      	push	{r7, lr}
 8010646:	b094      	sub	sp, #80	; 0x50
 8010648:	af00      	add	r7, sp, #0
 801064a:	4603      	mov	r3, r0
 801064c:	80fb      	strh	r3, [r7, #6]
 801064e:	4baf      	ldr	r3, [pc, #700]	; (801090c <Save_Csv+0x2c8>)
 8010650:	681a      	ldr	r2, [r3, #0]
 8010652:	4baf      	ldr	r3, [pc, #700]	; (8010910 <Save_Csv+0x2cc>)
 8010654:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010658:	4619      	mov	r1, r3
 801065a:	4bae      	ldr	r3, [pc, #696]	; (8010914 <Save_Csv+0x2d0>)
 801065c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010660:	2b00      	cmp	r3, #0
 8010662:	bf14      	ite	ne
 8010664:	2301      	movne	r3, #1
 8010666:	2300      	moveq	r3, #0
 8010668:	b2db      	uxtb	r3, r3
 801066a:	440b      	add	r3, r1
 801066c:	005b      	lsls	r3, r3, #1
 801066e:	4413      	add	r3, r2
 8010670:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010674:	009b      	lsls	r3, r3, #2
 8010676:	4aa8      	ldr	r2, [pc, #672]	; (8010918 <Save_Csv+0x2d4>)
 8010678:	f9b2 2000 	ldrsh.w	r2, [r2]
 801067c:	4611      	mov	r1, r2
 801067e:	4aa7      	ldr	r2, [pc, #668]	; (801091c <Save_Csv+0x2d8>)
 8010680:	5c52      	ldrb	r2, [r2, r1]
 8010682:	fb93 f3f2 	sdiv	r3, r3, r2
 8010686:	63bb      	str	r3, [r7, #56]	; 0x38
 8010688:	4aa5      	ldr	r2, [pc, #660]	; (8010920 <Save_Csv+0x2dc>)
 801068a:	f107 031c 	add.w	r3, r7, #28
 801068e:	ca07      	ldmia	r2, {r0, r1, r2}
 8010690:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010694:	2300      	movs	r3, #0
 8010696:	64bb      	str	r3, [r7, #72]	; 0x48
 8010698:	2300      	movs	r3, #0
 801069a:	647b      	str	r3, [r7, #68]	; 0x44
 801069c:	2304      	movs	r3, #4
 801069e:	637b      	str	r3, [r7, #52]	; 0x34
 80106a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80106a4:	633b      	str	r3, [r7, #48]	; 0x30
 80106a6:	f107 021c 	add.w	r2, r7, #28
 80106aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80106ae:	4611      	mov	r1, r2
 80106b0:	4618      	mov	r0, r3
 80106b2:	f7ff f9f9 	bl	800faa8 <Make_Filename>
 80106b6:	f107 0310 	add.w	r3, r7, #16
 80106ba:	f107 0214 	add.w	r2, r7, #20
 80106be:	f107 011c 	add.w	r1, r7, #28
 80106c2:	4898      	ldr	r0, [pc, #608]	; (8010924 <Save_Csv+0x2e0>)
 80106c4:	f7fe ff56 	bl	800f574 <OpenFileWr>
 80106c8:	4603      	mov	r3, r0
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d002      	beq.n	80106d4 <Save_Csv+0x90>
 80106ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106d0:	b2db      	uxtb	r3, r3
 80106d2:	e1d3      	b.n	8010a7c <Save_Csv+0x438>
 80106d4:	4b94      	ldr	r3, [pc, #592]	; (8010928 <Save_Csv+0x2e4>)
 80106d6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80106da:	00db      	lsls	r3, r3, #3
 80106dc:	4a93      	ldr	r2, [pc, #588]	; (801092c <Save_Csv+0x2e8>)
 80106de:	4413      	add	r3, r2
 80106e0:	2205      	movs	r2, #5
 80106e2:	4619      	mov	r1, r3
 80106e4:	488f      	ldr	r0, [pc, #572]	; (8010924 <Save_Csv+0x2e0>)
 80106e6:	f012 fa77 	bl	8022bd8 <memcpy>
 80106ea:	2203      	movs	r2, #3
 80106ec:	4990      	ldr	r1, [pc, #576]	; (8010930 <Save_Csv+0x2ec>)
 80106ee:	4891      	ldr	r0, [pc, #580]	; (8010934 <Save_Csv+0x2f0>)
 80106f0:	f012 fa72 	bl	8022bd8 <memcpy>
 80106f4:	4b90      	ldr	r3, [pc, #576]	; (8010938 <Save_Csv+0x2f4>)
 80106f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80106f8:	2300      	movs	r3, #0
 80106fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80106fc:	4b8a      	ldr	r3, [pc, #552]	; (8010928 <Save_Csv+0x2e4>)
 80106fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010702:	461a      	mov	r2, r3
 8010704:	4613      	mov	r3, r2
 8010706:	005b      	lsls	r3, r3, #1
 8010708:	4413      	add	r3, r2
 801070a:	005b      	lsls	r3, r3, #1
 801070c:	4a8b      	ldr	r2, [pc, #556]	; (801093c <Save_Csv+0x2f8>)
 801070e:	4413      	add	r3, r2
 8010710:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010712:	e00a      	b.n	801072a <Save_Csv+0xe6>
 8010714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010716:	1c5a      	adds	r2, r3, #1
 8010718:	63fa      	str	r2, [r7, #60]	; 0x3c
 801071a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801071c:	1c51      	adds	r1, r2, #1
 801071e:	64f9      	str	r1, [r7, #76]	; 0x4c
 8010720:	4611      	mov	r1, r2
 8010722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010724:	440a      	add	r2, r1
 8010726:	781b      	ldrb	r3, [r3, #0]
 8010728:	7013      	strb	r3, [r2, #0]
 801072a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801072c:	781b      	ldrb	r3, [r3, #0]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d1f0      	bne.n	8010714 <Save_Csv+0xd0>
 8010732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010734:	1c5a      	adds	r2, r3, #1
 8010736:	64fa      	str	r2, [r7, #76]	; 0x4c
 8010738:	461a      	mov	r2, r3
 801073a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801073c:	4413      	add	r3, r2
 801073e:	222a      	movs	r2, #42	; 0x2a
 8010740:	701a      	strb	r2, [r3, #0]
 8010742:	4b79      	ldr	r3, [pc, #484]	; (8010928 <Save_Csv+0x2e4>)
 8010744:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8010748:	461a      	mov	r2, r3
 801074a:	4613      	mov	r3, r2
 801074c:	005b      	lsls	r3, r3, #1
 801074e:	4413      	add	r3, r2
 8010750:	005b      	lsls	r3, r3, #1
 8010752:	4a7b      	ldr	r2, [pc, #492]	; (8010940 <Save_Csv+0x2fc>)
 8010754:	4413      	add	r3, r2
 8010756:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010758:	e00a      	b.n	8010770 <Save_Csv+0x12c>
 801075a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801075c:	1c5a      	adds	r2, r3, #1
 801075e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010760:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010762:	1c51      	adds	r1, r2, #1
 8010764:	64f9      	str	r1, [r7, #76]	; 0x4c
 8010766:	4611      	mov	r1, r2
 8010768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801076a:	440a      	add	r2, r1
 801076c:	781b      	ldrb	r3, [r3, #0]
 801076e:	7013      	strb	r3, [r2, #0]
 8010770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010772:	781b      	ldrb	r3, [r3, #0]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d1f0      	bne.n	801075a <Save_Csv+0x116>
 8010778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801077a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801077c:	4413      	add	r3, r2
 801077e:	222c      	movs	r2, #44	; 0x2c
 8010780:	701a      	strb	r2, [r3, #0]
 8010782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010784:	3301      	adds	r3, #1
 8010786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010788:	4413      	add	r3, r2
 801078a:	2200      	movs	r2, #0
 801078c:	701a      	strb	r2, [r3, #0]
 801078e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010790:	b29b      	uxth	r3, r3
 8010792:	3301      	adds	r3, #1
 8010794:	b29b      	uxth	r3, r3
 8010796:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801079a:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 801079e:	3308      	adds	r3, #8
 80107a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80107a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80107a4:	4a5f      	ldr	r2, [pc, #380]	; (8010924 <Save_Csv+0x2e0>)
 80107a6:	4413      	add	r3, r2
 80107a8:	2202      	movs	r2, #2
 80107aa:	4966      	ldr	r1, [pc, #408]	; (8010944 <Save_Csv+0x300>)
 80107ac:	4618      	mov	r0, r3
 80107ae:	f012 fa13 	bl	8022bd8 <memcpy>
 80107b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80107b4:	3302      	adds	r3, #2
 80107b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80107b8:	2300      	movs	r3, #0
 80107ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80107bc:	e0fe      	b.n	80109bc <Save_Csv+0x378>
 80107be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107c0:	3302      	adds	r3, #2
 80107c2:	4a61      	ldr	r2, [pc, #388]	; (8010948 <Save_Csv+0x304>)
 80107c4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80107c8:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80107cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80107ce:	fb02 f303 	mul.w	r3, r2, r3
 80107d2:	131b      	asrs	r3, r3, #12
 80107d4:	b29b      	uxth	r3, r3
 80107d6:	3364      	adds	r3, #100	; 0x64
 80107d8:	b29b      	uxth	r3, r3
 80107da:	857b      	strh	r3, [r7, #42]	; 0x2a
 80107dc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	dd0a      	ble.n	80107fa <Save_Csv+0x1b6>
 80107e4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80107e8:	2bc8      	cmp	r3, #200	; 0xc8
 80107ea:	dd02      	ble.n	80107f2 <Save_Csv+0x1ae>
 80107ec:	23c7      	movs	r3, #199	; 0xc7
 80107ee:	723b      	strb	r3, [r7, #8]
 80107f0:	e005      	b.n	80107fe <Save_Csv+0x1ba>
 80107f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80107f4:	b2db      	uxtb	r3, r3
 80107f6:	723b      	strb	r3, [r7, #8]
 80107f8:	e001      	b.n	80107fe <Save_Csv+0x1ba>
 80107fa:	2300      	movs	r3, #0
 80107fc:	723b      	strb	r3, [r7, #8]
 80107fe:	7a3a      	ldrb	r2, [r7, #8]
 8010800:	f107 030c 	add.w	r3, r7, #12
 8010804:	4611      	mov	r1, r2
 8010806:	4618      	mov	r0, r3
 8010808:	f001 f898 	bl	801193c <u8ToDec3>
 801080c:	2300      	movs	r3, #0
 801080e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010812:	e03a      	b.n	801088a <Save_Csv+0x246>
 8010814:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8010818:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801081c:	4413      	add	r3, r2
 801081e:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d036      	beq.n	8010894 <Save_Csv+0x250>
 8010826:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 801082a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801082c:	1c59      	adds	r1, r3, #1
 801082e:	64b9      	str	r1, [r7, #72]	; 0x48
 8010830:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8010834:	440a      	add	r2, r1
 8010836:	f812 1c44 	ldrb.w	r1, [r2, #-68]
 801083a:	4a3a      	ldr	r2, [pc, #232]	; (8010924 <Save_Csv+0x2e0>)
 801083c:	54d1      	strb	r1, [r2, r3]
 801083e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010842:	429a      	cmp	r2, r3
 8010844:	db1a      	blt.n	801087c <Save_Csv+0x238>
 8010846:	f107 0314 	add.w	r3, r7, #20
 801084a:	4619      	mov	r1, r3
 801084c:	4835      	ldr	r0, [pc, #212]	; (8010924 <Save_Csv+0x2e0>)
 801084e:	f7fe fdb9 	bl	800f3c4 <ProgFileSec>
 8010852:	4603      	mov	r3, r0
 8010854:	2b00      	cmp	r3, #0
 8010856:	d001      	beq.n	801085c <Save_Csv+0x218>
 8010858:	2303      	movs	r3, #3
 801085a:	e10f      	b.n	8010a7c <Save_Csv+0x438>
 801085c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801085e:	1c5a      	adds	r2, r3, #1
 8010860:	647a      	str	r2, [r7, #68]	; 0x44
 8010862:	105b      	asrs	r3, r3, #1
 8010864:	b2db      	uxtb	r3, r3
 8010866:	f003 0303 	and.w	r3, r3, #3
 801086a:	b2db      	uxtb	r3, r3
 801086c:	461a      	mov	r2, r3
 801086e:	2102      	movs	r1, #2
 8010870:	f44f 7084 	mov.w	r0, #264	; 0x108
 8010874:	f7fe ff60 	bl	800f738 <PrintClk>
 8010878:	2300      	movs	r3, #0
 801087a:	64bb      	str	r3, [r7, #72]	; 0x48
 801087c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8010880:	b29b      	uxth	r3, r3
 8010882:	3301      	adds	r3, #1
 8010884:	b29b      	uxth	r3, r3
 8010886:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801088a:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 801088e:	2b02      	cmp	r3, #2
 8010890:	ddc0      	ble.n	8010814 <Save_Csv+0x1d0>
 8010892:	e000      	b.n	8010896 <Save_Csv+0x252>
 8010894:	bf00      	nop
 8010896:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010898:	1c5a      	adds	r2, r3, #1
 801089a:	64ba      	str	r2, [r7, #72]	; 0x48
 801089c:	4a21      	ldr	r2, [pc, #132]	; (8010924 <Save_Csv+0x2e0>)
 801089e:	212c      	movs	r1, #44	; 0x2c
 80108a0:	54d1      	strb	r1, [r2, r3]
 80108a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80108a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108a6:	429a      	cmp	r2, r3
 80108a8:	db1a      	blt.n	80108e0 <Save_Csv+0x29c>
 80108aa:	f107 0314 	add.w	r3, r7, #20
 80108ae:	4619      	mov	r1, r3
 80108b0:	481c      	ldr	r0, [pc, #112]	; (8010924 <Save_Csv+0x2e0>)
 80108b2:	f7fe fd87 	bl	800f3c4 <ProgFileSec>
 80108b6:	4603      	mov	r3, r0
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d001      	beq.n	80108c0 <Save_Csv+0x27c>
 80108bc:	2303      	movs	r3, #3
 80108be:	e0dd      	b.n	8010a7c <Save_Csv+0x438>
 80108c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80108c2:	1c5a      	adds	r2, r3, #1
 80108c4:	647a      	str	r2, [r7, #68]	; 0x44
 80108c6:	105b      	asrs	r3, r3, #1
 80108c8:	b2db      	uxtb	r3, r3
 80108ca:	f003 0303 	and.w	r3, r3, #3
 80108ce:	b2db      	uxtb	r3, r3
 80108d0:	461a      	mov	r2, r3
 80108d2:	2102      	movs	r1, #2
 80108d4:	f44f 7084 	mov.w	r0, #264	; 0x108
 80108d8:	f7fe ff2e 	bl	800f738 <PrintClk>
 80108dc:	2300      	movs	r3, #0
 80108de:	64bb      	str	r3, [r7, #72]	; 0x48
 80108e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80108e2:	1c5a      	adds	r2, r3, #1
 80108e4:	64ba      	str	r2, [r7, #72]	; 0x48
 80108e6:	4a0f      	ldr	r2, [pc, #60]	; (8010924 <Save_Csv+0x2e0>)
 80108e8:	210d      	movs	r1, #13
 80108ea:	54d1      	strb	r1, [r2, r3]
 80108ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80108ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108f0:	429a      	cmp	r2, r3
 80108f2:	db3b      	blt.n	801096c <Save_Csv+0x328>
 80108f4:	f107 0314 	add.w	r3, r7, #20
 80108f8:	4619      	mov	r1, r3
 80108fa:	480a      	ldr	r0, [pc, #40]	; (8010924 <Save_Csv+0x2e0>)
 80108fc:	f7fe fd62 	bl	800f3c4 <ProgFileSec>
 8010900:	4603      	mov	r3, r0
 8010902:	2b00      	cmp	r3, #0
 8010904:	d022      	beq.n	801094c <Save_Csv+0x308>
 8010906:	2303      	movs	r3, #3
 8010908:	e0b8      	b.n	8010a7c <Save_Csv+0x438>
 801090a:	bf00      	nop
 801090c:	2000057c 	.word	0x2000057c
 8010910:	20006886 	.word	0x20006886
 8010914:	20002862 	.word	0x20002862
 8010918:	2000284a 	.word	0x2000284a
 801091c:	20000560 	.word	0x20000560
 8010920:	08000220 	.word	0x08000220
 8010924:	200017d8 	.word	0x200017d8
 8010928:	20000298 	.word	0x20000298
 801092c:	200001d0 	.word	0x200001d0
 8010930:	08000244 	.word	0x08000244
 8010934:	200017dd 	.word	0x200017dd
 8010938:	200017e0 	.word	0x200017e0
 801093c:	08001da8 	.word	0x08001da8
 8010940:	08001cd4 	.word	0x08001cd4
 8010944:	08000248 	.word	0x08000248
 8010948:	20002870 	.word	0x20002870
 801094c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801094e:	1c5a      	adds	r2, r3, #1
 8010950:	647a      	str	r2, [r7, #68]	; 0x44
 8010952:	105b      	asrs	r3, r3, #1
 8010954:	b2db      	uxtb	r3, r3
 8010956:	f003 0303 	and.w	r3, r3, #3
 801095a:	b2db      	uxtb	r3, r3
 801095c:	461a      	mov	r2, r3
 801095e:	2102      	movs	r1, #2
 8010960:	f44f 7084 	mov.w	r0, #264	; 0x108
 8010964:	f7fe fee8 	bl	800f738 <PrintClk>
 8010968:	2300      	movs	r3, #0
 801096a:	64bb      	str	r3, [r7, #72]	; 0x48
 801096c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801096e:	1c5a      	adds	r2, r3, #1
 8010970:	64ba      	str	r2, [r7, #72]	; 0x48
 8010972:	4a44      	ldr	r2, [pc, #272]	; (8010a84 <Save_Csv+0x440>)
 8010974:	210a      	movs	r1, #10
 8010976:	54d1      	strb	r1, [r2, r3]
 8010978:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801097a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801097c:	429a      	cmp	r2, r3
 801097e:	db1a      	blt.n	80109b6 <Save_Csv+0x372>
 8010980:	f107 0314 	add.w	r3, r7, #20
 8010984:	4619      	mov	r1, r3
 8010986:	483f      	ldr	r0, [pc, #252]	; (8010a84 <Save_Csv+0x440>)
 8010988:	f7fe fd1c 	bl	800f3c4 <ProgFileSec>
 801098c:	4603      	mov	r3, r0
 801098e:	2b00      	cmp	r3, #0
 8010990:	d001      	beq.n	8010996 <Save_Csv+0x352>
 8010992:	2303      	movs	r3, #3
 8010994:	e072      	b.n	8010a7c <Save_Csv+0x438>
 8010996:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010998:	1c5a      	adds	r2, r3, #1
 801099a:	647a      	str	r2, [r7, #68]	; 0x44
 801099c:	105b      	asrs	r3, r3, #1
 801099e:	b2db      	uxtb	r3, r3
 80109a0:	f003 0303 	and.w	r3, r3, #3
 80109a4:	b2db      	uxtb	r3, r3
 80109a6:	461a      	mov	r2, r3
 80109a8:	2102      	movs	r1, #2
 80109aa:	f44f 7084 	mov.w	r0, #264	; 0x108
 80109ae:	f7fe fec3 	bl	800f738 <PrintClk>
 80109b2:	2300      	movs	r3, #0
 80109b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80109b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109b8:	3301      	adds	r3, #1
 80109ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80109bc:	4b32      	ldr	r3, [pc, #200]	; (8010a88 <Save_Csv+0x444>)
 80109be:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 80109c2:	461a      	mov	r2, r3
 80109c4:	4b31      	ldr	r3, [pc, #196]	; (8010a8c <Save_Csv+0x448>)
 80109c6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80109ca:	461a      	mov	r2, r3
 80109cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109ce:	4293      	cmp	r3, r2
 80109d0:	f6ff aef5 	blt.w	80107be <Save_Csv+0x17a>
 80109d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d030      	beq.n	8010a3c <Save_Csv+0x3f8>
 80109da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80109dc:	1c5a      	adds	r2, r3, #1
 80109de:	64ba      	str	r2, [r7, #72]	; 0x48
 80109e0:	4a28      	ldr	r2, [pc, #160]	; (8010a84 <Save_Csv+0x440>)
 80109e2:	210d      	movs	r1, #13
 80109e4:	54d1      	strb	r1, [r2, r3]
 80109e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80109e8:	1c5a      	adds	r2, r3, #1
 80109ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80109ec:	4a25      	ldr	r2, [pc, #148]	; (8010a84 <Save_Csv+0x440>)
 80109ee:	210a      	movs	r1, #10
 80109f0:	54d1      	strb	r1, [r2, r3]
 80109f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80109f4:	4a23      	ldr	r2, [pc, #140]	; (8010a84 <Save_Csv+0x440>)
 80109f6:	1898      	adds	r0, r3, r2
 80109f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80109fa:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80109fe:	461a      	mov	r2, r3
 8010a00:	2120      	movs	r1, #32
 8010a02:	f012 f8f7 	bl	8022bf4 <memset>
 8010a06:	2300      	movs	r3, #0
 8010a08:	64bb      	str	r3, [r7, #72]	; 0x48
 8010a0a:	f107 0314 	add.w	r3, r7, #20
 8010a0e:	4619      	mov	r1, r3
 8010a10:	481c      	ldr	r0, [pc, #112]	; (8010a84 <Save_Csv+0x440>)
 8010a12:	f7fe fcd7 	bl	800f3c4 <ProgFileSec>
 8010a16:	4603      	mov	r3, r0
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d001      	beq.n	8010a20 <Save_Csv+0x3dc>
 8010a1c:	2303      	movs	r3, #3
 8010a1e:	e02d      	b.n	8010a7c <Save_Csv+0x438>
 8010a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a22:	1c5a      	adds	r2, r3, #1
 8010a24:	647a      	str	r2, [r7, #68]	; 0x44
 8010a26:	105b      	asrs	r3, r3, #1
 8010a28:	b2db      	uxtb	r3, r3
 8010a2a:	f003 0303 	and.w	r3, r3, #3
 8010a2e:	b2db      	uxtb	r3, r3
 8010a30:	461a      	mov	r2, r3
 8010a32:	2102      	movs	r1, #2
 8010a34:	f44f 7084 	mov.w	r0, #264	; 0x108
 8010a38:	f7fe fe7e 	bl	800f738 <PrintClk>
 8010a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a40:	fb02 f103 	mul.w	r1, r2, r3
 8010a44:	f107 0310 	add.w	r3, r7, #16
 8010a48:	f107 0214 	add.w	r2, r7, #20
 8010a4c:	480d      	ldr	r0, [pc, #52]	; (8010a84 <Save_Csv+0x440>)
 8010a4e:	f7fe fd2d 	bl	800f4ac <CloseFile>
 8010a52:	4603      	mov	r3, r0
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d001      	beq.n	8010a5c <Save_Csv+0x418>
 8010a58:	2304      	movs	r3, #4
 8010a5a:	e00f      	b.n	8010a7c <Save_Csv+0x438>
 8010a5c:	4b0a      	ldr	r3, [pc, #40]	; (8010a88 <Save_Csv+0x444>)
 8010a5e:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
 8010a62:	2b62      	cmp	r3, #98	; 0x62
 8010a64:	dc09      	bgt.n	8010a7a <Save_Csv+0x436>
 8010a66:	4b08      	ldr	r3, [pc, #32]	; (8010a88 <Save_Csv+0x444>)
 8010a68:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
 8010a6c:	b29b      	uxth	r3, r3
 8010a6e:	3301      	adds	r3, #1
 8010a70:	b29b      	uxth	r3, r3
 8010a72:	b21a      	sxth	r2, r3
 8010a74:	4b04      	ldr	r3, [pc, #16]	; (8010a88 <Save_Csv+0x444>)
 8010a76:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	3750      	adds	r7, #80	; 0x50
 8010a80:	46bd      	mov	sp, r7
 8010a82:	bd80      	pop	{r7, pc}
 8010a84:	200017d8 	.word	0x200017d8
 8010a88:	20000298 	.word	0x20000298
 8010a8c:	08002270 	.word	0x08002270

08010a90 <Save_Svg>:
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b092      	sub	sp, #72	; 0x48
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	4603      	mov	r3, r0
 8010a98:	80fb      	strh	r3, [r7, #6]
 8010a9a:	4abb      	ldr	r2, [pc, #748]	; (8010d88 <Save_Svg+0x2f8>)
 8010a9c:	f107 031c 	add.w	r3, r7, #28
 8010aa0:	ca07      	ldmia	r2, {r0, r1, r2}
 8010aa2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010aa6:	2304      	movs	r3, #4
 8010aa8:	63bb      	str	r3, [r7, #56]	; 0x38
 8010aaa:	2300      	movs	r3, #0
 8010aac:	637b      	str	r3, [r7, #52]	; 0x34
 8010aae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010ab2:	867b      	strh	r3, [r7, #50]	; 0x32
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	863b      	strh	r3, [r7, #48]	; 0x30
 8010ab8:	4bb4      	ldr	r3, [pc, #720]	; (8010d8c <Save_Svg+0x2fc>)
 8010aba:	681a      	ldr	r2, [r3, #0]
 8010abc:	4bb4      	ldr	r3, [pc, #720]	; (8010d90 <Save_Svg+0x300>)
 8010abe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010ac2:	4619      	mov	r1, r3
 8010ac4:	4bb3      	ldr	r3, [pc, #716]	; (8010d94 <Save_Svg+0x304>)
 8010ac6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	bf14      	ite	ne
 8010ace:	2301      	movne	r3, #1
 8010ad0:	2300      	moveq	r3, #0
 8010ad2:	b2db      	uxtb	r3, r3
 8010ad4:	440b      	add	r3, r1
 8010ad6:	005b      	lsls	r3, r3, #1
 8010ad8:	4413      	add	r3, r2
 8010ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010ade:	009b      	lsls	r3, r3, #2
 8010ae0:	4aad      	ldr	r2, [pc, #692]	; (8010d98 <Save_Svg+0x308>)
 8010ae2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010ae6:	4611      	mov	r1, r2
 8010ae8:	4aac      	ldr	r2, [pc, #688]	; (8010d9c <Save_Svg+0x30c>)
 8010aea:	5c52      	ldrb	r2, [r2, r1]
 8010aec:	fb93 f3f2 	sdiv	r3, r3, r2
 8010af0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010af2:	4bab      	ldr	r3, [pc, #684]	; (8010da0 <Save_Svg+0x310>)
 8010af4:	2200      	movs	r2, #0
 8010af6:	601a      	str	r2, [r3, #0]
 8010af8:	4baa      	ldr	r3, [pc, #680]	; (8010da4 <Save_Svg+0x314>)
 8010afa:	2200      	movs	r2, #0
 8010afc:	801a      	strh	r2, [r3, #0]
 8010afe:	4baa      	ldr	r3, [pc, #680]	; (8010da8 <Save_Svg+0x318>)
 8010b00:	2200      	movs	r2, #0
 8010b02:	801a      	strh	r2, [r3, #0]
 8010b04:	4ba9      	ldr	r3, [pc, #676]	; (8010dac <Save_Svg+0x31c>)
 8010b06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010b08:	f44f 729b 	mov.w	r2, #310	; 0x136
 8010b0c:	2100      	movs	r1, #0
 8010b0e:	48a7      	ldr	r0, [pc, #668]	; (8010dac <Save_Svg+0x31c>)
 8010b10:	f012 f870 	bl	8022bf4 <memset>
 8010b14:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8010b18:	461a      	mov	r2, r3
 8010b1a:	2100      	movs	r1, #0
 8010b1c:	48a4      	ldr	r0, [pc, #656]	; (8010db0 <Save_Svg+0x320>)
 8010b1e:	f012 f869 	bl	8022bf4 <memset>
 8010b22:	f107 021c 	add.w	r2, r7, #28
 8010b26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010b2a:	4611      	mov	r1, r2
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	f7fe ffbb 	bl	800faa8 <Make_Filename>
 8010b32:	f107 0310 	add.w	r3, r7, #16
 8010b36:	f107 0214 	add.w	r2, r7, #20
 8010b3a:	f107 011c 	add.w	r1, r7, #28
 8010b3e:	489c      	ldr	r0, [pc, #624]	; (8010db0 <Save_Svg+0x320>)
 8010b40:	f7fe fd18 	bl	800f574 <OpenFileWr>
 8010b44:	4603      	mov	r3, r0
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d002      	beq.n	8010b50 <Save_Svg+0xc0>
 8010b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b4c:	b2db      	uxtb	r3, r3
 8010b4e:	e3d5      	b.n	80112fc <Save_Svg+0x86c>
 8010b50:	4b98      	ldr	r3, [pc, #608]	; (8010db4 <Save_Svg+0x324>)
 8010b52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010b54:	f107 0314 	add.w	r3, r7, #20
 8010b58:	4619      	mov	r1, r3
 8010b5a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010b5c:	f7fe ff0a 	bl	800f974 <WriteStr>
 8010b60:	4b95      	ldr	r3, [pc, #596]	; (8010db8 <Save_Svg+0x328>)
 8010b62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010b64:	f107 0314 	add.w	r3, r7, #20
 8010b68:	4619      	mov	r1, r3
 8010b6a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010b6c:	f7fe ff02 	bl	800f974 <WriteStr>
 8010b70:	4b92      	ldr	r3, [pc, #584]	; (8010dbc <Save_Svg+0x32c>)
 8010b72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010b74:	f107 0314 	add.w	r3, r7, #20
 8010b78:	4619      	mov	r1, r3
 8010b7a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010b7c:	f7fe fefa 	bl	800f974 <WriteStr>
 8010b80:	4b8f      	ldr	r3, [pc, #572]	; (8010dc0 <Save_Svg+0x330>)
 8010b82:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010b86:	461a      	mov	r2, r3
 8010b88:	4b8e      	ldr	r3, [pc, #568]	; (8010dc4 <Save_Svg+0x334>)
 8010b8a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010b8e:	f107 0214 	add.w	r2, r7, #20
 8010b92:	4611      	mov	r1, r2
 8010b94:	4618      	mov	r0, r3
 8010b96:	f7fe fe45 	bl	800f824 <WriteVar>
 8010b9a:	4b8b      	ldr	r3, [pc, #556]	; (8010dc8 <Save_Svg+0x338>)
 8010b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010b9e:	f107 0314 	add.w	r3, r7, #20
 8010ba2:	4619      	mov	r1, r3
 8010ba4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010ba6:	f7fe fee5 	bl	800f974 <WriteStr>
 8010baa:	4b88      	ldr	r3, [pc, #544]	; (8010dcc <Save_Svg+0x33c>)
 8010bac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010bae:	f107 0314 	add.w	r3, r7, #20
 8010bb2:	4619      	mov	r1, r3
 8010bb4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010bb6:	f7fe fedd 	bl	800f974 <WriteStr>
 8010bba:	4b81      	ldr	r3, [pc, #516]	; (8010dc0 <Save_Svg+0x330>)
 8010bbc:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010bc0:	461a      	mov	r2, r3
 8010bc2:	4b80      	ldr	r3, [pc, #512]	; (8010dc4 <Save_Svg+0x334>)
 8010bc4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010bc8:	f107 0214 	add.w	r2, r7, #20
 8010bcc:	4611      	mov	r1, r2
 8010bce:	4618      	mov	r0, r3
 8010bd0:	f7fe fe28 	bl	800f824 <WriteVar>
 8010bd4:	4b7e      	ldr	r3, [pc, #504]	; (8010dd0 <Save_Svg+0x340>)
 8010bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010bd8:	f107 0314 	add.w	r3, r7, #20
 8010bdc:	4619      	mov	r1, r3
 8010bde:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010be0:	f7fe fec8 	bl	800f974 <WriteStr>
 8010be4:	4b7b      	ldr	r3, [pc, #492]	; (8010dd4 <Save_Svg+0x344>)
 8010be6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010be8:	f107 0314 	add.w	r3, r7, #20
 8010bec:	4619      	mov	r1, r3
 8010bee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010bf0:	f7fe fec0 	bl	800f974 <WriteStr>
 8010bf4:	4b72      	ldr	r3, [pc, #456]	; (8010dc0 <Save_Svg+0x330>)
 8010bf6:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8010bfa:	f107 0214 	add.w	r2, r7, #20
 8010bfe:	4611      	mov	r1, r2
 8010c00:	4618      	mov	r0, r3
 8010c02:	f7fe fe0f 	bl	800f824 <WriteVar>
 8010c06:	4b74      	ldr	r3, [pc, #464]	; (8010dd8 <Save_Svg+0x348>)
 8010c08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c0a:	f107 0314 	add.w	r3, r7, #20
 8010c0e:	4619      	mov	r1, r3
 8010c10:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010c12:	f7fe feaf 	bl	800f974 <WriteStr>
 8010c16:	4b6a      	ldr	r3, [pc, #424]	; (8010dc0 <Save_Svg+0x330>)
 8010c18:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8010c1c:	f107 0214 	add.w	r2, r7, #20
 8010c20:	4611      	mov	r1, r2
 8010c22:	4618      	mov	r0, r3
 8010c24:	f7fe fdfe 	bl	800f824 <WriteVar>
 8010c28:	4b6c      	ldr	r3, [pc, #432]	; (8010ddc <Save_Svg+0x34c>)
 8010c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c2c:	f107 0314 	add.w	r3, r7, #20
 8010c30:	4619      	mov	r1, r3
 8010c32:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010c34:	f7fe fe9e 	bl	800f974 <WriteStr>
 8010c38:	4b61      	ldr	r3, [pc, #388]	; (8010dc0 <Save_Svg+0x330>)
 8010c3a:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8010c3e:	b29b      	uxth	r3, r3
 8010c40:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8010c44:	b29b      	uxth	r3, r3
 8010c46:	b21b      	sxth	r3, r3
 8010c48:	f107 0214 	add.w	r2, r7, #20
 8010c4c:	4611      	mov	r1, r2
 8010c4e:	4618      	mov	r0, r3
 8010c50:	f7fe fde8 	bl	800f824 <WriteVar>
 8010c54:	4b62      	ldr	r3, [pc, #392]	; (8010de0 <Save_Svg+0x350>)
 8010c56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c58:	f107 0314 	add.w	r3, r7, #20
 8010c5c:	4619      	mov	r1, r3
 8010c5e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010c60:	f7fe fe88 	bl	800f974 <WriteStr>
 8010c64:	2300      	movs	r3, #0
 8010c66:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010c6a:	e032      	b.n	8010cd2 <Save_Svg+0x242>
 8010c6c:	4b5d      	ldr	r3, [pc, #372]	; (8010de4 <Save_Svg+0x354>)
 8010c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c70:	f107 0314 	add.w	r3, r7, #20
 8010c74:	4619      	mov	r1, r3
 8010c76:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010c78:	f7fe fe7c 	bl	800f974 <WriteStr>
 8010c7c:	f107 0214 	add.w	r2, r7, #20
 8010c80:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8010c84:	4611      	mov	r1, r2
 8010c86:	4618      	mov	r0, r3
 8010c88:	f7fe fdcc 	bl	800f824 <WriteVar>
 8010c8c:	4b56      	ldr	r3, [pc, #344]	; (8010de8 <Save_Svg+0x358>)
 8010c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c90:	f107 0314 	add.w	r3, r7, #20
 8010c94:	4619      	mov	r1, r3
 8010c96:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010c98:	f7fe fe6c 	bl	800f974 <WriteStr>
 8010c9c:	4b48      	ldr	r3, [pc, #288]	; (8010dc0 <Save_Svg+0x330>)
 8010c9e:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010ca2:	461a      	mov	r2, r3
 8010ca4:	4b47      	ldr	r3, [pc, #284]	; (8010dc4 <Save_Svg+0x334>)
 8010ca6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010caa:	f107 0214 	add.w	r2, r7, #20
 8010cae:	4611      	mov	r1, r2
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	f7fe fdb7 	bl	800f824 <WriteVar>
 8010cb6:	4b4d      	ldr	r3, [pc, #308]	; (8010dec <Save_Svg+0x35c>)
 8010cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010cba:	f107 0314 	add.w	r3, r7, #20
 8010cbe:	4619      	mov	r1, r3
 8010cc0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010cc2:	f7fe fe57 	bl	800f974 <WriteStr>
 8010cc6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010cca:	3319      	adds	r3, #25
 8010ccc:	b29b      	uxth	r3, r3
 8010cce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010cd2:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8010cd6:	2bc8      	cmp	r3, #200	; 0xc8
 8010cd8:	ddc8      	ble.n	8010c6c <Save_Svg+0x1dc>
 8010cda:	2300      	movs	r3, #0
 8010cdc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8010ce0:	e01d      	b.n	8010d1e <Save_Svg+0x28e>
 8010ce2:	4b43      	ldr	r3, [pc, #268]	; (8010df0 <Save_Svg+0x360>)
 8010ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ce6:	f107 0314 	add.w	r3, r7, #20
 8010cea:	4619      	mov	r1, r3
 8010cec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010cee:	f7fe fe41 	bl	800f974 <WriteStr>
 8010cf2:	f107 0214 	add.w	r2, r7, #20
 8010cf6:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8010cfa:	4611      	mov	r1, r2
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	f7fe fd91 	bl	800f824 <WriteVar>
 8010d02:	4b3c      	ldr	r3, [pc, #240]	; (8010df4 <Save_Svg+0x364>)
 8010d04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010d06:	f107 0314 	add.w	r3, r7, #20
 8010d0a:	4619      	mov	r1, r3
 8010d0c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010d0e:	f7fe fe31 	bl	800f974 <WriteStr>
 8010d12:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010d16:	3319      	adds	r3, #25
 8010d18:	b29b      	uxth	r3, r3
 8010d1a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8010d1e:	4b28      	ldr	r3, [pc, #160]	; (8010dc0 <Save_Svg+0x330>)
 8010d20:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010d24:	461a      	mov	r2, r3
 8010d26:	4b27      	ldr	r3, [pc, #156]	; (8010dc4 <Save_Svg+0x334>)
 8010d28:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010d2c:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8010d30:	429a      	cmp	r2, r3
 8010d32:	ddd6      	ble.n	8010ce2 <Save_Svg+0x252>
 8010d34:	4b30      	ldr	r3, [pc, #192]	; (8010df8 <Save_Svg+0x368>)
 8010d36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010d38:	f107 0314 	add.w	r3, r7, #20
 8010d3c:	4619      	mov	r1, r3
 8010d3e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010d40:	f7fe fe18 	bl	800f974 <WriteStr>
 8010d44:	2300      	movs	r3, #0
 8010d46:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8010d4a:	e091      	b.n	8010e70 <Save_Svg+0x3e0>
 8010d4c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8010d50:	3302      	adds	r3, #2
 8010d52:	4a2a      	ldr	r2, [pc, #168]	; (8010dfc <Save_Svg+0x36c>)
 8010d54:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8010d58:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8010d5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d5e:	fb02 f303 	mul.w	r3, r2, r3
 8010d62:	131b      	asrs	r3, r3, #12
 8010d64:	b29b      	uxth	r3, r3
 8010d66:	3364      	adds	r3, #100	; 0x64
 8010d68:	b29b      	uxth	r3, r3
 8010d6a:	857b      	strh	r3, [r7, #42]	; 0x2a
 8010d6c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	dd45      	ble.n	8010e00 <Save_Svg+0x370>
 8010d74:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010d78:	2bc8      	cmp	r3, #200	; 0xc8
 8010d7a:	dd02      	ble.n	8010d82 <Save_Svg+0x2f2>
 8010d7c:	23c7      	movs	r3, #199	; 0xc7
 8010d7e:	813b      	strh	r3, [r7, #8]
 8010d80:	e040      	b.n	8010e04 <Save_Svg+0x374>
 8010d82:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010d84:	813b      	strh	r3, [r7, #8]
 8010d86:	e03d      	b.n	8010e04 <Save_Svg+0x374>
 8010d88:	0800022c 	.word	0x0800022c
 8010d8c:	2000057c 	.word	0x2000057c
 8010d90:	20006886 	.word	0x20006886
 8010d94:	20002862 	.word	0x20002862
 8010d98:	2000284a 	.word	0x2000284a
 8010d9c:	20000560 	.word	0x20000560
 8010da0:	20000794 	.word	0x20000794
 8010da4:	20000790 	.word	0x20000790
 8010da8:	20000792 	.word	0x20000792
 8010dac:	20000008 	.word	0x20000008
 8010db0:	200017d8 	.word	0x200017d8
 8010db4:	0800024c 	.word	0x0800024c
 8010db8:	0800027c 	.word	0x0800027c
 8010dbc:	080002e8 	.word	0x080002e8
 8010dc0:	20000298 	.word	0x20000298
 8010dc4:	08002270 	.word	0x08002270
 8010dc8:	080002f8 	.word	0x080002f8
 8010dcc:	08000384 	.word	0x08000384
 8010dd0:	080003b0 	.word	0x080003b0
 8010dd4:	080003c0 	.word	0x080003c0
 8010dd8:	080003e8 	.word	0x080003e8
 8010ddc:	080003f0 	.word	0x080003f0
 8010de0:	080003f8 	.word	0x080003f8
 8010de4:	08000404 	.word	0x08000404
 8010de8:	08000424 	.word	0x08000424
 8010dec:	08000428 	.word	0x08000428
 8010df0:	08000430 	.word	0x08000430
 8010df4:	0800044c 	.word	0x0800044c
 8010df8:	08000458 	.word	0x08000458
 8010dfc:	20002870 	.word	0x20002870
 8010e00:	2300      	movs	r3, #0
 8010e02:	813b      	strh	r3, [r7, #8]
 8010e04:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8010e08:	b29b      	uxth	r3, r3
 8010e0a:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8010e0e:	b29b      	uxth	r3, r3
 8010e10:	b21b      	sxth	r3, r3
 8010e12:	813b      	strh	r3, [r7, #8]
 8010e14:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d102      	bne.n	8010e22 <Save_Svg+0x392>
 8010e1c:	4b3b      	ldr	r3, [pc, #236]	; (8010f0c <Save_Svg+0x47c>)
 8010e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e20:	e001      	b.n	8010e26 <Save_Svg+0x396>
 8010e22:	4b3b      	ldr	r3, [pc, #236]	; (8010f10 <Save_Svg+0x480>)
 8010e24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e26:	f107 0314 	add.w	r3, r7, #20
 8010e2a:	4619      	mov	r1, r3
 8010e2c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010e2e:	f7fe fda1 	bl	800f974 <WriteStr>
 8010e32:	f107 0214 	add.w	r2, r7, #20
 8010e36:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8010e3a:	4611      	mov	r1, r2
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	f7fe fcf1 	bl	800f824 <WriteVar>
 8010e42:	4b34      	ldr	r3, [pc, #208]	; (8010f14 <Save_Svg+0x484>)
 8010e44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e46:	f107 0314 	add.w	r3, r7, #20
 8010e4a:	4619      	mov	r1, r3
 8010e4c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010e4e:	f7fe fd91 	bl	800f974 <WriteStr>
 8010e52:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8010e56:	f107 0214 	add.w	r2, r7, #20
 8010e5a:	4611      	mov	r1, r2
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	f7fe fce1 	bl	800f824 <WriteVar>
 8010e62:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8010e66:	b29b      	uxth	r3, r3
 8010e68:	3301      	adds	r3, #1
 8010e6a:	b29b      	uxth	r3, r3
 8010e6c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8010e70:	4b29      	ldr	r3, [pc, #164]	; (8010f18 <Save_Svg+0x488>)
 8010e72:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010e76:	461a      	mov	r2, r3
 8010e78:	4b28      	ldr	r3, [pc, #160]	; (8010f1c <Save_Svg+0x48c>)
 8010e7a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010e7e:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8010e82:	429a      	cmp	r2, r3
 8010e84:	f77f af62 	ble.w	8010d4c <Save_Svg+0x2bc>
 8010e88:	4b25      	ldr	r3, [pc, #148]	; (8010f20 <Save_Svg+0x490>)
 8010e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e8c:	f107 0314 	add.w	r3, r7, #20
 8010e90:	4619      	mov	r1, r3
 8010e92:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010e94:	f7fe fd6e 	bl	800f974 <WriteStr>
 8010e98:	4b22      	ldr	r3, [pc, #136]	; (8010f24 <Save_Svg+0x494>)
 8010e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e9c:	f107 0314 	add.w	r3, r7, #20
 8010ea0:	4619      	mov	r1, r3
 8010ea2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010ea4:	f7fe fd66 	bl	800f974 <WriteStr>
 8010ea8:	4b1b      	ldr	r3, [pc, #108]	; (8010f18 <Save_Svg+0x488>)
 8010eaa:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d007      	beq.n	8010ec2 <Save_Svg+0x432>
 8010eb2:	4b19      	ldr	r3, [pc, #100]	; (8010f18 <Save_Svg+0x488>)
 8010eb4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010eb8:	00db      	lsls	r3, r3, #3
 8010eba:	4a1b      	ldr	r2, [pc, #108]	; (8010f28 <Save_Svg+0x498>)
 8010ebc:	4413      	add	r3, r2
 8010ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ec0:	e006      	b.n	8010ed0 <Save_Svg+0x440>
 8010ec2:	4b15      	ldr	r3, [pc, #84]	; (8010f18 <Save_Svg+0x488>)
 8010ec4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010ec8:	00db      	lsls	r3, r3, #3
 8010eca:	4a18      	ldr	r2, [pc, #96]	; (8010f2c <Save_Svg+0x49c>)
 8010ecc:	4413      	add	r3, r2
 8010ece:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ed0:	f107 0314 	add.w	r3, r7, #20
 8010ed4:	4619      	mov	r1, r3
 8010ed6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010ed8:	f7fe fd4c 	bl	800f974 <WriteStr>
 8010edc:	4b14      	ldr	r3, [pc, #80]	; (8010f30 <Save_Svg+0x4a0>)
 8010ede:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ee0:	f107 0314 	add.w	r3, r7, #20
 8010ee4:	4619      	mov	r1, r3
 8010ee6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010ee8:	f7fe fd44 	bl	800f974 <WriteStr>
 8010eec:	4b11      	ldr	r3, [pc, #68]	; (8010f34 <Save_Svg+0x4a4>)
 8010eee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ef0:	f107 0314 	add.w	r3, r7, #20
 8010ef4:	4619      	mov	r1, r3
 8010ef6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010ef8:	f7fe fd3c 	bl	800f974 <WriteStr>
 8010efc:	4b06      	ldr	r3, [pc, #24]	; (8010f18 <Save_Svg+0x488>)
 8010efe:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d01a      	beq.n	8010f3c <Save_Svg+0x4ac>
 8010f06:	4b0c      	ldr	r3, [pc, #48]	; (8010f38 <Save_Svg+0x4a8>)
 8010f08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f0a:	e019      	b.n	8010f40 <Save_Svg+0x4b0>
 8010f0c:	08000490 	.word	0x08000490
 8010f10:	08000494 	.word	0x08000494
 8010f14:	08000498 	.word	0x08000498
 8010f18:	20000298 	.word	0x20000298
 8010f1c:	08002270 	.word	0x08002270
 8010f20:	08000428 	.word	0x08000428
 8010f24:	0800049c 	.word	0x0800049c
 8010f28:	080019fc 	.word	0x080019fc
 8010f2c:	080019ac 	.word	0x080019ac
 8010f30:	08000504 	.word	0x08000504
 8010f34:	0800050c 	.word	0x0800050c
 8010f38:	08000510 	.word	0x08000510
 8010f3c:	4bb1      	ldr	r3, [pc, #708]	; (8011204 <Save_Svg+0x774>)
 8010f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f40:	f107 0314 	add.w	r3, r7, #20
 8010f44:	4619      	mov	r1, r3
 8010f46:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f48:	f7fe fd14 	bl	800f974 <WriteStr>
 8010f4c:	4bae      	ldr	r3, [pc, #696]	; (8011208 <Save_Svg+0x778>)
 8010f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f50:	f107 0314 	add.w	r3, r7, #20
 8010f54:	4619      	mov	r1, r3
 8010f56:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f58:	f7fe fd0c 	bl	800f974 <WriteStr>
 8010f5c:	4bab      	ldr	r3, [pc, #684]	; (801120c <Save_Svg+0x77c>)
 8010f5e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010f62:	00db      	lsls	r3, r3, #3
 8010f64:	4aaa      	ldr	r2, [pc, #680]	; (8011210 <Save_Svg+0x780>)
 8010f66:	4413      	add	r3, r2
 8010f68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f6a:	f107 0314 	add.w	r3, r7, #20
 8010f6e:	4619      	mov	r1, r3
 8010f70:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f72:	f7fe fcff 	bl	800f974 <WriteStr>
 8010f76:	4ba7      	ldr	r3, [pc, #668]	; (8011214 <Save_Svg+0x784>)
 8010f78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f7a:	f107 0314 	add.w	r3, r7, #20
 8010f7e:	4619      	mov	r1, r3
 8010f80:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f82:	f7fe fcf7 	bl	800f974 <WriteStr>
 8010f86:	4ba4      	ldr	r3, [pc, #656]	; (8011218 <Save_Svg+0x788>)
 8010f88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f8a:	f107 0314 	add.w	r3, r7, #20
 8010f8e:	4619      	mov	r1, r3
 8010f90:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f92:	f7fe fcef 	bl	800f974 <WriteStr>
 8010f96:	4b9d      	ldr	r3, [pc, #628]	; (801120c <Save_Svg+0x77c>)
 8010f98:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8010f9c:	b29b      	uxth	r3, r3
 8010f9e:	f1c3 03c7 	rsb	r3, r3, #199	; 0xc7
 8010fa2:	b29b      	uxth	r3, r3
 8010fa4:	863b      	strh	r3, [r7, #48]	; 0x30
 8010fa6:	4b9d      	ldr	r3, [pc, #628]	; (801121c <Save_Svg+0x78c>)
 8010fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010faa:	f107 0314 	add.w	r3, r7, #20
 8010fae:	4619      	mov	r1, r3
 8010fb0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010fb2:	f7fe fcdf 	bl	800f974 <WriteStr>
 8010fb6:	4b9a      	ldr	r3, [pc, #616]	; (8011220 <Save_Svg+0x790>)
 8010fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010fba:	f107 0314 	add.w	r3, r7, #20
 8010fbe:	4619      	mov	r1, r3
 8010fc0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010fc2:	f7fe fcd7 	bl	800f974 <WriteStr>
 8010fc6:	4b97      	ldr	r3, [pc, #604]	; (8011224 <Save_Svg+0x794>)
 8010fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010fca:	f107 0314 	add.w	r3, r7, #20
 8010fce:	4619      	mov	r1, r3
 8010fd0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010fd2:	f7fe fccf 	bl	800f974 <WriteStr>
 8010fd6:	4b94      	ldr	r3, [pc, #592]	; (8011228 <Save_Svg+0x798>)
 8010fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010fda:	f107 0314 	add.w	r3, r7, #20
 8010fde:	4619      	mov	r1, r3
 8010fe0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010fe2:	f7fe fcc7 	bl	800f974 <WriteStr>
 8010fe6:	4b91      	ldr	r3, [pc, #580]	; (801122c <Save_Svg+0x79c>)
 8010fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010fea:	f107 0314 	add.w	r3, r7, #20
 8010fee:	4619      	mov	r1, r3
 8010ff0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010ff2:	f7fe fcbf 	bl	800f974 <WriteStr>
 8010ff6:	4b8e      	ldr	r3, [pc, #568]	; (8011230 <Save_Svg+0x7a0>)
 8010ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ffa:	f107 0314 	add.w	r3, r7, #20
 8010ffe:	4619      	mov	r1, r3
 8011000:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011002:	f7fe fcb7 	bl	800f974 <WriteStr>
 8011006:	4b8b      	ldr	r3, [pc, #556]	; (8011234 <Save_Svg+0x7a4>)
 8011008:	63fb      	str	r3, [r7, #60]	; 0x3c
 801100a:	f107 0314 	add.w	r3, r7, #20
 801100e:	4619      	mov	r1, r3
 8011010:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011012:	f7fe fcaf 	bl	800f974 <WriteStr>
 8011016:	4b88      	ldr	r3, [pc, #544]	; (8011238 <Save_Svg+0x7a8>)
 8011018:	63fb      	str	r3, [r7, #60]	; 0x3c
 801101a:	f107 0314 	add.w	r3, r7, #20
 801101e:	4619      	mov	r1, r3
 8011020:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011022:	f7fe fca7 	bl	800f974 <WriteStr>
 8011026:	4b85      	ldr	r3, [pc, #532]	; (801123c <Save_Svg+0x7ac>)
 8011028:	63fb      	str	r3, [r7, #60]	; 0x3c
 801102a:	f107 0314 	add.w	r3, r7, #20
 801102e:	4619      	mov	r1, r3
 8011030:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011032:	f7fe fc9f 	bl	800f974 <WriteStr>
 8011036:	4b82      	ldr	r3, [pc, #520]	; (8011240 <Save_Svg+0x7b0>)
 8011038:	63fb      	str	r3, [r7, #60]	; 0x3c
 801103a:	f107 0314 	add.w	r3, r7, #20
 801103e:	4619      	mov	r1, r3
 8011040:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011042:	f7fe fc97 	bl	800f974 <WriteStr>
 8011046:	4b7f      	ldr	r3, [pc, #508]	; (8011244 <Save_Svg+0x7b4>)
 8011048:	63fb      	str	r3, [r7, #60]	; 0x3c
 801104a:	f107 0314 	add.w	r3, r7, #20
 801104e:	4619      	mov	r1, r3
 8011050:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011052:	f7fe fc8f 	bl	800f974 <WriteStr>
 8011056:	4b7c      	ldr	r3, [pc, #496]	; (8011248 <Save_Svg+0x7b8>)
 8011058:	63fb      	str	r3, [r7, #60]	; 0x3c
 801105a:	f107 0314 	add.w	r3, r7, #20
 801105e:	4619      	mov	r1, r3
 8011060:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011062:	f7fe fc87 	bl	800f974 <WriteStr>
 8011066:	4b79      	ldr	r3, [pc, #484]	; (801124c <Save_Svg+0x7bc>)
 8011068:	63fb      	str	r3, [r7, #60]	; 0x3c
 801106a:	f107 0314 	add.w	r3, r7, #20
 801106e:	4619      	mov	r1, r3
 8011070:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011072:	f7fe fc7f 	bl	800f974 <WriteStr>
 8011076:	4b65      	ldr	r3, [pc, #404]	; (801120c <Save_Svg+0x77c>)
 8011078:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 801107c:	461a      	mov	r2, r3
 801107e:	4b74      	ldr	r3, [pc, #464]	; (8011250 <Save_Svg+0x7c0>)
 8011080:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8011084:	f107 0214 	add.w	r2, r7, #20
 8011088:	4611      	mov	r1, r2
 801108a:	4618      	mov	r0, r3
 801108c:	f7fe fbca 	bl	800f824 <WriteVar>
 8011090:	4b70      	ldr	r3, [pc, #448]	; (8011254 <Save_Svg+0x7c4>)
 8011092:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011094:	f107 0314 	add.w	r3, r7, #20
 8011098:	4619      	mov	r1, r3
 801109a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801109c:	f7fe fc6a 	bl	800f974 <WriteStr>
 80110a0:	4b6d      	ldr	r3, [pc, #436]	; (8011258 <Save_Svg+0x7c8>)
 80110a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110a4:	f107 0314 	add.w	r3, r7, #20
 80110a8:	4619      	mov	r1, r3
 80110aa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80110ac:	f7fe fc62 	bl	800f974 <WriteStr>
 80110b0:	4b6a      	ldr	r3, [pc, #424]	; (801125c <Save_Svg+0x7cc>)
 80110b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110b4:	f107 0314 	add.w	r3, r7, #20
 80110b8:	4619      	mov	r1, r3
 80110ba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80110bc:	f7fe fc5a 	bl	800f974 <WriteStr>
 80110c0:	4b67      	ldr	r3, [pc, #412]	; (8011260 <Save_Svg+0x7d0>)
 80110c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110c4:	f107 0314 	add.w	r3, r7, #20
 80110c8:	4619      	mov	r1, r3
 80110ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80110cc:	f7fe fc52 	bl	800f974 <WriteStr>
 80110d0:	4b64      	ldr	r3, [pc, #400]	; (8011264 <Save_Svg+0x7d4>)
 80110d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110d4:	f107 0314 	add.w	r3, r7, #20
 80110d8:	4619      	mov	r1, r3
 80110da:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80110dc:	f7fe fc4a 	bl	800f974 <WriteStr>
 80110e0:	4b61      	ldr	r3, [pc, #388]	; (8011268 <Save_Svg+0x7d8>)
 80110e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110e4:	f107 0314 	add.w	r3, r7, #20
 80110e8:	4619      	mov	r1, r3
 80110ea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80110ec:	f7fe fc42 	bl	800f974 <WriteStr>
 80110f0:	4b5e      	ldr	r3, [pc, #376]	; (801126c <Save_Svg+0x7dc>)
 80110f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110f4:	f107 0314 	add.w	r3, r7, #20
 80110f8:	4619      	mov	r1, r3
 80110fa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80110fc:	f7fe fc3a 	bl	800f974 <WriteStr>
 8011100:	4b58      	ldr	r3, [pc, #352]	; (8011264 <Save_Svg+0x7d4>)
 8011102:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011104:	f107 0314 	add.w	r3, r7, #20
 8011108:	4619      	mov	r1, r3
 801110a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801110c:	f7fe fc32 	bl	800f974 <WriteStr>
 8011110:	4b57      	ldr	r3, [pc, #348]	; (8011270 <Save_Svg+0x7e0>)
 8011112:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011114:	f107 0314 	add.w	r3, r7, #20
 8011118:	4619      	mov	r1, r3
 801111a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801111c:	f7fe fc2a 	bl	800f974 <WriteStr>
 8011120:	4b3a      	ldr	r3, [pc, #232]	; (801120c <Save_Svg+0x77c>)
 8011122:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d00b      	beq.n	8011142 <Save_Svg+0x6b2>
 801112a:	4b38      	ldr	r3, [pc, #224]	; (801120c <Save_Svg+0x77c>)
 801112c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011130:	461a      	mov	r2, r3
 8011132:	4613      	mov	r3, r2
 8011134:	005b      	lsls	r3, r3, #1
 8011136:	4413      	add	r3, r2
 8011138:	005b      	lsls	r3, r3, #1
 801113a:	4a4e      	ldr	r2, [pc, #312]	; (8011274 <Save_Svg+0x7e4>)
 801113c:	4413      	add	r3, r2
 801113e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011140:	e00a      	b.n	8011158 <Save_Svg+0x6c8>
 8011142:	4b32      	ldr	r3, [pc, #200]	; (801120c <Save_Svg+0x77c>)
 8011144:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011148:	461a      	mov	r2, r3
 801114a:	4613      	mov	r3, r2
 801114c:	005b      	lsls	r3, r3, #1
 801114e:	4413      	add	r3, r2
 8011150:	005b      	lsls	r3, r3, #1
 8011152:	4a49      	ldr	r2, [pc, #292]	; (8011278 <Save_Svg+0x7e8>)
 8011154:	4413      	add	r3, r2
 8011156:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011158:	f107 0314 	add.w	r3, r7, #20
 801115c:	4619      	mov	r1, r3
 801115e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011160:	f7fe fc08 	bl	800f974 <WriteStr>
 8011164:	4b45      	ldr	r3, [pc, #276]	; (801127c <Save_Svg+0x7ec>)
 8011166:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011168:	f107 0314 	add.w	r3, r7, #20
 801116c:	4619      	mov	r1, r3
 801116e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011170:	f7fe fc00 	bl	800f974 <WriteStr>
 8011174:	f107 0214 	add.w	r2, r7, #20
 8011178:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801117c:	4611      	mov	r1, r2
 801117e:	4618      	mov	r0, r3
 8011180:	f7fe fb50 	bl	800f824 <WriteVar>
 8011184:	4b3e      	ldr	r3, [pc, #248]	; (8011280 <Save_Svg+0x7f0>)
 8011186:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011188:	f107 0314 	add.w	r3, r7, #20
 801118c:	4619      	mov	r1, r3
 801118e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011190:	f7fe fbf0 	bl	800f974 <WriteStr>
 8011194:	4b1d      	ldr	r3, [pc, #116]	; (801120c <Save_Svg+0x77c>)
 8011196:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801119a:	00db      	lsls	r3, r3, #3
 801119c:	4a39      	ldr	r2, [pc, #228]	; (8011284 <Save_Svg+0x7f4>)
 801119e:	4413      	add	r3, r2
 80111a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111a2:	f107 0314 	add.w	r3, r7, #20
 80111a6:	4619      	mov	r1, r3
 80111a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80111aa:	f7fe fbe3 	bl	800f974 <WriteStr>
 80111ae:	4b36      	ldr	r3, [pc, #216]	; (8011288 <Save_Svg+0x7f8>)
 80111b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111b2:	f107 0314 	add.w	r3, r7, #20
 80111b6:	4619      	mov	r1, r3
 80111b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80111ba:	f7fe fbdb 	bl	800f974 <WriteStr>
 80111be:	4b1d      	ldr	r3, [pc, #116]	; (8011234 <Save_Svg+0x7a4>)
 80111c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111c2:	f107 0314 	add.w	r3, r7, #20
 80111c6:	4619      	mov	r1, r3
 80111c8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80111ca:	f7fe fbd3 	bl	800f974 <WriteStr>
 80111ce:	4b2f      	ldr	r3, [pc, #188]	; (801128c <Save_Svg+0x7fc>)
 80111d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111d2:	f107 0314 	add.w	r3, r7, #20
 80111d6:	4619      	mov	r1, r3
 80111d8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80111da:	f7fe fbcb 	bl	800f974 <WriteStr>
 80111de:	4b2c      	ldr	r3, [pc, #176]	; (8011290 <Save_Svg+0x800>)
 80111e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111e2:	f107 0314 	add.w	r3, r7, #20
 80111e6:	4619      	mov	r1, r3
 80111e8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80111ea:	f7fe fbc3 	bl	800f974 <WriteStr>
 80111ee:	f107 0314 	add.w	r3, r7, #20
 80111f2:	4619      	mov	r1, r3
 80111f4:	4827      	ldr	r0, [pc, #156]	; (8011294 <Save_Svg+0x804>)
 80111f6:	f7fe f8e5 	bl	800f3c4 <ProgFileSec>
 80111fa:	4603      	mov	r3, r0
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d04b      	beq.n	8011298 <Save_Svg+0x808>
 8011200:	2303      	movs	r3, #3
 8011202:	e07b      	b.n	80112fc <Save_Svg+0x86c>
 8011204:	08000514 	.word	0x08000514
 8011208:	08000518 	.word	0x08000518
 801120c:	20000298 	.word	0x20000298
 8011210:	200001d0 	.word	0x200001d0
 8011214:	0800051c 	.word	0x0800051c
 8011218:	0800052c 	.word	0x0800052c
 801121c:	08000598 	.word	0x08000598
 8011220:	080005c4 	.word	0x080005c4
 8011224:	08000628 	.word	0x08000628
 8011228:	08000644 	.word	0x08000644
 801122c:	08000684 	.word	0x08000684
 8011230:	080006c0 	.word	0x080006c0
 8011234:	080006f4 	.word	0x080006f4
 8011238:	080006f8 	.word	0x080006f8
 801123c:	0800074c 	.word	0x0800074c
 8011240:	08000764 	.word	0x08000764
 8011244:	08000768 	.word	0x08000768
 8011248:	0800077c 	.word	0x0800077c
 801124c:	08000794 	.word	0x08000794
 8011250:	08002270 	.word	0x08002270
 8011254:	080007b0 	.word	0x080007b0
 8011258:	080007c0 	.word	0x080007c0
 801125c:	080007cc 	.word	0x080007cc
 8011260:	08000818 	.word	0x08000818
 8011264:	08000838 	.word	0x08000838
 8011268:	0800083c 	.word	0x0800083c
 801126c:	08000880 	.word	0x08000880
 8011270:	080008cc 	.word	0x080008cc
 8011274:	08001a88 	.word	0x08001a88
 8011278:	08001a4c 	.word	0x08001a4c
 801127c:	08000914 	.word	0x08000914
 8011280:	08000918 	.word	0x08000918
 8011284:	08001ac4 	.word	0x08001ac4
 8011288:	0800092c 	.word	0x0800092c
 801128c:	08000930 	.word	0x08000930
 8011290:	08000940 	.word	0x08000940
 8011294:	200017d8 	.word	0x200017d8
 8011298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801129a:	1c5a      	adds	r2, r3, #1
 801129c:	637a      	str	r2, [r7, #52]	; 0x34
 801129e:	105b      	asrs	r3, r3, #1
 80112a0:	b2db      	uxtb	r3, r3
 80112a2:	f003 0303 	and.w	r3, r3, #3
 80112a6:	b2db      	uxtb	r3, r3
 80112a8:	461a      	mov	r2, r3
 80112aa:	2102      	movs	r1, #2
 80112ac:	f44f 7084 	mov.w	r0, #264	; 0x108
 80112b0:	f7fe fa42 	bl	800f738 <PrintClk>
 80112b4:	4b13      	ldr	r3, [pc, #76]	; (8011304 <Save_Svg+0x874>)
 80112b6:	6819      	ldr	r1, [r3, #0]
 80112b8:	f107 0310 	add.w	r3, r7, #16
 80112bc:	f107 0214 	add.w	r2, r7, #20
 80112c0:	4811      	ldr	r0, [pc, #68]	; (8011308 <Save_Svg+0x878>)
 80112c2:	f7fe f8f3 	bl	800f4ac <CloseFile>
 80112c6:	4603      	mov	r3, r0
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d001      	beq.n	80112d0 <Save_Svg+0x840>
 80112cc:	2304      	movs	r3, #4
 80112ce:	e015      	b.n	80112fc <Save_Svg+0x86c>
 80112d0:	4b0e      	ldr	r3, [pc, #56]	; (801130c <Save_Svg+0x87c>)
 80112d2:	f9b3 310c 	ldrsh.w	r3, [r3, #268]	; 0x10c
 80112d6:	2b62      	cmp	r3, #98	; 0x62
 80112d8:	dc09      	bgt.n	80112ee <Save_Svg+0x85e>
 80112da:	4b0c      	ldr	r3, [pc, #48]	; (801130c <Save_Svg+0x87c>)
 80112dc:	f9b3 310c 	ldrsh.w	r3, [r3, #268]	; 0x10c
 80112e0:	b29b      	uxth	r3, r3
 80112e2:	3301      	adds	r3, #1
 80112e4:	b29b      	uxth	r3, r3
 80112e6:	b21a      	sxth	r2, r3
 80112e8:	4b08      	ldr	r3, [pc, #32]	; (801130c <Save_Svg+0x87c>)
 80112ea:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
 80112ee:	f44f 729b 	mov.w	r2, #310	; 0x136
 80112f2:	2100      	movs	r1, #0
 80112f4:	4806      	ldr	r0, [pc, #24]	; (8011310 <Save_Svg+0x880>)
 80112f6:	f011 fc7d 	bl	8022bf4 <memset>
 80112fa:	2300      	movs	r3, #0
 80112fc:	4618      	mov	r0, r3
 80112fe:	3748      	adds	r7, #72	; 0x48
 8011300:	46bd      	mov	sp, r7
 8011302:	bd80      	pop	{r7, pc}
 8011304:	20000794 	.word	0x20000794
 8011308:	200017d8 	.word	0x200017d8
 801130c:	20000298 	.word	0x20000298
 8011310:	20000008 	.word	0x20000008

08011314 <Read_CalFlag>:
unsigned long err;

FLASH_EraseInitTypeDef Flash_Erase ={0, 1, 1, 1, 2};

 void Read_CalFlag(void)
 {
 8011314:	b480      	push	{r7}
 8011316:	b083      	sub	sp, #12
 8011318:	af00      	add	r7, sp, #0
	  unsigned short* ptr;
	  ptr=(unsigned short*)Kpg_Address;
 801131a:	4b10      	ldr	r3, [pc, #64]	; (801135c <Read_CalFlag+0x48>)
 801131c:	607b      	str	r3, [r7, #4]
	  if(*ptr++!=0xaa55)
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	1c9a      	adds	r2, r3, #2
 8011322:	607a      	str	r2, [r7, #4]
 8011324:	881b      	ldrh	r3, [r3, #0]
 8011326:	f64a 2255 	movw	r2, #43605	; 0xaa55
 801132a:	4293      	cmp	r3, r2
 801132c:	d10e      	bne.n	801134c <Read_CalFlag+0x38>
		  return;
	  if(*ptr++!=0x0400)
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	1c9a      	adds	r2, r3, #2
 8011332:	607a      	str	r2, [r7, #4]
 8011334:	881b      	ldrh	r3, [r3, #0]
 8011336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801133a:	d109      	bne.n	8011350 <Read_CalFlag+0x3c>
		  return;
	  Cal_Flag = *ptr++;
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	1c9a      	adds	r2, r3, #2
 8011340:	607a      	str	r2, [r7, #4]
 8011342:	881b      	ldrh	r3, [r3, #0]
 8011344:	b2da      	uxtb	r2, r3
 8011346:	4b06      	ldr	r3, [pc, #24]	; (8011360 <Read_CalFlag+0x4c>)
 8011348:	701a      	strb	r2, [r3, #0]
	  return;
 801134a:	e002      	b.n	8011352 <Read_CalFlag+0x3e>
		  return;
 801134c:	bf00      	nop
 801134e:	e000      	b.n	8011352 <Read_CalFlag+0x3e>
		  return;
 8011350:	bf00      	nop
 }
 8011352:	370c      	adds	r7, #12
 8011354:	46bd      	mov	sp, r7
 8011356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801135a:	4770      	bx	lr
 801135c:	08004000 	.word	0x08004000
 8011360:	200001b4 	.word	0x200001b4

08011364 <Save_Parameter>:

 /*******************************************************************************
  Save_Parameter:                          Return: 0= Success
 *******************************************************************************/
 char Save_Parameter(void)
 {
 8011364:	b580      	push	{r7, lr}
 8011366:	b082      	sub	sp, #8
 8011368:	af00      	add	r7, sp, #0
   short i, j;
   unsigned short* ptr;

   Flash_Erase.Sector = 2;
 801136a:	4b45      	ldr	r3, [pc, #276]	; (8011480 <Save_Parameter+0x11c>)
 801136c:	2202      	movs	r2, #2
 801136e:	609a      	str	r2, [r3, #8]

   HAL_FLASH_Unlock();
 8011370:	f007 ffaa 	bl	80192c8 <HAL_FLASH_Unlock>
   j=HAL_FLASHEx_Erase( &Flash_Erase, &err);
 8011374:	4943      	ldr	r1, [pc, #268]	; (8011484 <Save_Parameter+0x120>)
 8011376:	4842      	ldr	r0, [pc, #264]	; (8011480 <Save_Parameter+0x11c>)
 8011378:	f008 f918 	bl	80195ac <HAL_FLASHEx_Erase>
 801137c:	4603      	mov	r3, r0
 801137e:	80bb      	strh	r3, [r7, #4]
   if(j== HAL_OK)
 8011380:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d173      	bne.n	8011470 <Save_Parameter+0x10c>
   {
     ptr=F_Buff;
 8011388:	4b3f      	ldr	r3, [pc, #252]	; (8011488 <Save_Parameter+0x124>)
 801138a:	603b      	str	r3, [r7, #0]
     *ptr++=0x0400;                              //Ver:4.00
 801138c:	683b      	ldr	r3, [r7, #0]
 801138e:	1c9a      	adds	r2, r3, #2
 8011390:	603a      	str	r2, [r7, #0]
 8011392:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011396:	801a      	strh	r2, [r3, #0]
     *ptr++=Current;
 8011398:	4b3c      	ldr	r3, [pc, #240]	; (801148c <Save_Parameter+0x128>)
 801139a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801139e:	683b      	ldr	r3, [r7, #0]
 80113a0:	1c9a      	adds	r2, r3, #2
 80113a2:	603a      	str	r2, [r7, #0]
 80113a4:	b28a      	uxth	r2, r1
 80113a6:	801a      	strh	r2, [r3, #0]
     *ptr++=Status;
 80113a8:	4b39      	ldr	r3, [pc, #228]	; (8011490 <Save_Parameter+0x12c>)
 80113aa:	f9b3 1000 	ldrsh.w	r1, [r3]
 80113ae:	683b      	ldr	r3, [r7, #0]
 80113b0:	1c9a      	adds	r2, r3, #2
 80113b2:	603a      	str	r2, [r7, #0]
 80113b4:	b28a      	uxth	r2, r1
 80113b6:	801a      	strh	r2, [r3, #0]
     for(i=0;i<42;i++)
 80113b8:	2300      	movs	r3, #0
 80113ba:	80fb      	strh	r3, [r7, #6]
 80113bc:	e011      	b.n	80113e2 <Save_Parameter+0x7e>
    	 *ptr++=List[i].Val;
 80113be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80113c2:	4a34      	ldr	r2, [pc, #208]	; (8011494 <Save_Parameter+0x130>)
 80113c4:	00db      	lsls	r3, r3, #3
 80113c6:	4413      	add	r3, r2
 80113c8:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80113cc:	683b      	ldr	r3, [r7, #0]
 80113ce:	1c9a      	adds	r2, r3, #2
 80113d0:	603a      	str	r2, [r7, #0]
 80113d2:	b28a      	uxth	r2, r1
 80113d4:	801a      	strh	r2, [r3, #0]
     for(i=0;i<42;i++)
 80113d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80113da:	b29b      	uxth	r3, r3
 80113dc:	3301      	adds	r3, #1
 80113de:	b29b      	uxth	r3, r3
 80113e0:	80fb      	strh	r3, [r7, #6]
 80113e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80113e6:	2b29      	cmp	r3, #41	; 0x29
 80113e8:	dde9      	ble.n	80113be <Save_Parameter+0x5a>
     for(i=0;i<8;i++)
 80113ea:	2300      	movs	r3, #0
 80113ec:	80fb      	strh	r3, [r7, #6]
 80113ee:	e00f      	b.n	8011410 <Save_Parameter+0xac>
    	 *ptr++=MenuNow[i];
 80113f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80113f4:	4a28      	ldr	r2, [pc, #160]	; (8011498 <Save_Parameter+0x134>)
 80113f6:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 80113fa:	683b      	ldr	r3, [r7, #0]
 80113fc:	1c9a      	adds	r2, r3, #2
 80113fe:	603a      	str	r2, [r7, #0]
 8011400:	b28a      	uxth	r2, r1
 8011402:	801a      	strh	r2, [r3, #0]
     for(i=0;i<8;i++)
 8011404:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011408:	b29b      	uxth	r3, r3
 801140a:	3301      	adds	r3, #1
 801140c:	b29b      	uxth	r3, r3
 801140e:	80fb      	strh	r3, [r7, #6]
 8011410:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011414:	2b07      	cmp	r3, #7
 8011416:	ddeb      	ble.n	80113f0 <Save_Parameter+0x8c>
     *ptr++=0xaa55;
 8011418:	683b      	ldr	r3, [r7, #0]
 801141a:	1c9a      	adds	r2, r3, #2
 801141c:	603a      	str	r2, [r7, #0]
 801141e:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8011422:	801a      	strh	r2, [r3, #0]
     ptr=F_Buff;
 8011424:	4b18      	ldr	r3, [pc, #96]	; (8011488 <Save_Parameter+0x124>)
 8011426:	603b      	str	r3, [r7, #0]
     for(i=0; i<256; i+=2)
 8011428:	2300      	movs	r3, #0
 801142a:	80fb      	strh	r3, [r7, #6]
 801142c:	e01a      	b.n	8011464 <Save_Parameter+0x100>
     {                      //128 SHORT
       j= HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Page_Address+i, *ptr++);
 801142e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011432:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8011436:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801143a:	4619      	mov	r1, r3
 801143c:	683b      	ldr	r3, [r7, #0]
 801143e:	1c9a      	adds	r2, r3, #2
 8011440:	603a      	str	r2, [r7, #0]
 8011442:	881b      	ldrh	r3, [r3, #0]
 8011444:	b29a      	uxth	r2, r3
 8011446:	f04f 0300 	mov.w	r3, #0
 801144a:	2001      	movs	r0, #1
 801144c:	f007 fee8 	bl	8019220 <HAL_FLASH_Program>
 8011450:	4603      	mov	r3, r0
 8011452:	80bb      	strh	r3, [r7, #4]
       if(j!= HAL_OK)
 8011454:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d108      	bne.n	801146e <Save_Parameter+0x10a>
     for(i=0; i<256; i+=2)
 801145c:	88fb      	ldrh	r3, [r7, #6]
 801145e:	3302      	adds	r3, #2
 8011460:	b29b      	uxth	r3, r3
 8011462:	80fb      	strh	r3, [r7, #6]
 8011464:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011468:	2bff      	cmp	r3, #255	; 0xff
 801146a:	dde0      	ble.n	801142e <Save_Parameter+0xca>
 801146c:	e000      	b.n	8011470 <Save_Parameter+0x10c>
    	   break;
 801146e:	bf00      	nop
     }
   }
   HAL_FLASH_Lock();
 8011470:	f007 ff4c 	bl	801930c <HAL_FLASH_Lock>

   return j;
 8011474:	88bb      	ldrh	r3, [r7, #4]
 8011476:	b2db      	uxtb	r3, r3
 }
 8011478:	4618      	mov	r0, r3
 801147a:	3708      	adds	r7, #8
 801147c:	46bd      	mov	sp, r7
 801147e:	bd80      	pop	{r7, pc}
 8011480:	200001b8 	.word	0x200001b8
 8011484:	20002818 	.word	0x20002818
 8011488:	200017d8 	.word	0x200017d8
 801148c:	2000079e 	.word	0x2000079e
 8011490:	200007a0 	.word	0x200007a0
 8011494:	20000298 	.word	0x20000298
 8011498:	20000538 	.word	0x20000538

0801149c <Read_Parameter>:
 /*******************************************************************************
 Read_Parameter:
 *******************************************************************************/
 void Read_Parameter(void)
 {
 801149c:	b480      	push	{r7}
 801149e:	b083      	sub	sp, #12
 80114a0:	af00      	add	r7, sp, #0
   short i;
   unsigned short* ptr;
   ptr=(unsigned short*)(Page_Address+55*2); //94*2-40
 80114a2:	4b3f      	ldr	r3, [pc, #252]	; (80115a0 <Read_Parameter+0x104>)
 80114a4:	603b      	str	r3, [r7, #0]
   TIM_BASE_Val=List[TIM_BASE].Val;
 80114a6:	4b3f      	ldr	r3, [pc, #252]	; (80115a4 <Read_Parameter+0x108>)
 80114a8:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 80114ac:	4b3e      	ldr	r3, [pc, #248]	; (80115a8 <Read_Parameter+0x10c>)
 80114ae:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 80114b0:	4b3c      	ldr	r3, [pc, #240]	; (80115a4 <Read_Parameter+0x108>)
 80114b2:	2200      	movs	r2, #0
 80114b4:	879a      	strh	r2, [r3, #60]	; 0x3c
   if(*ptr!=0xaa55)
 80114b6:	683b      	ldr	r3, [r7, #0]
 80114b8:	881b      	ldrh	r3, [r3, #0]
 80114ba:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80114be:	4293      	cmp	r3, r2
 80114c0:	d166      	bne.n	8011590 <Read_Parameter+0xf4>
	   return ;
   ptr=(unsigned short*)Page_Address;
 80114c2:	4b3a      	ldr	r3, [pc, #232]	; (80115ac <Read_Parameter+0x110>)
 80114c4:	603b      	str	r3, [r7, #0]
   if(*ptr++!=0x0400)
 80114c6:	683b      	ldr	r3, [r7, #0]
 80114c8:	1c9a      	adds	r2, r3, #2
 80114ca:	603a      	str	r2, [r7, #0]
 80114cc:	881b      	ldrh	r3, [r3, #0]
 80114ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80114d2:	d15f      	bne.n	8011594 <Read_Parameter+0xf8>
	   return ;
   Current=*ptr++;
 80114d4:	683b      	ldr	r3, [r7, #0]
 80114d6:	1c9a      	adds	r2, r3, #2
 80114d8:	603a      	str	r2, [r7, #0]
 80114da:	881b      	ldrh	r3, [r3, #0]
 80114dc:	b21a      	sxth	r2, r3
 80114de:	4b34      	ldr	r3, [pc, #208]	; (80115b0 <Read_Parameter+0x114>)
 80114e0:	801a      	strh	r2, [r3, #0]
   List[MenuNow[Current]].Flg |= UPD;
 80114e2:	4b33      	ldr	r3, [pc, #204]	; (80115b0 <Read_Parameter+0x114>)
 80114e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80114e8:	461a      	mov	r2, r3
 80114ea:	4b32      	ldr	r3, [pc, #200]	; (80115b4 <Read_Parameter+0x118>)
 80114ec:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80114f0:	4a2c      	ldr	r2, [pc, #176]	; (80115a4 <Read_Parameter+0x108>)
 80114f2:	00db      	lsls	r3, r3, #3
 80114f4:	4413      	add	r3, r2
 80114f6:	799b      	ldrb	r3, [r3, #6]
 80114f8:	4a2d      	ldr	r2, [pc, #180]	; (80115b0 <Read_Parameter+0x114>)
 80114fa:	f9b2 2000 	ldrsh.w	r2, [r2]
 80114fe:	4611      	mov	r1, r2
 8011500:	4a2c      	ldr	r2, [pc, #176]	; (80115b4 <Read_Parameter+0x118>)
 8011502:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8011506:	4610      	mov	r0, r2
 8011508:	f043 0320 	orr.w	r3, r3, #32
 801150c:	b2d9      	uxtb	r1, r3
 801150e:	4a25      	ldr	r2, [pc, #148]	; (80115a4 <Read_Parameter+0x108>)
 8011510:	00c3      	lsls	r3, r0, #3
 8011512:	4413      	add	r3, r2
 8011514:	460a      	mov	r2, r1
 8011516:	719a      	strb	r2, [r3, #6]
   ptr++;
 8011518:	683b      	ldr	r3, [r7, #0]
 801151a:	3302      	adds	r3, #2
 801151c:	603b      	str	r3, [r7, #0]
   for(i=0;i<42;i++)
 801151e:	2300      	movs	r3, #0
 8011520:	80fb      	strh	r3, [r7, #6]
 8011522:	e011      	b.n	8011548 <Read_Parameter+0xac>
	   List[i].Val=*ptr++;
 8011524:	683b      	ldr	r3, [r7, #0]
 8011526:	1c9a      	adds	r2, r3, #2
 8011528:	603a      	str	r2, [r7, #0]
 801152a:	881a      	ldrh	r2, [r3, #0]
 801152c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011530:	b211      	sxth	r1, r2
 8011532:	4a1c      	ldr	r2, [pc, #112]	; (80115a4 <Read_Parameter+0x108>)
 8011534:	00db      	lsls	r3, r3, #3
 8011536:	4413      	add	r3, r2
 8011538:	460a      	mov	r2, r1
 801153a:	809a      	strh	r2, [r3, #4]
   for(i=0;i<42;i++)
 801153c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011540:	b29b      	uxth	r3, r3
 8011542:	3301      	adds	r3, #1
 8011544:	b29b      	uxth	r3, r3
 8011546:	80fb      	strh	r3, [r7, #6]
 8011548:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801154c:	2b29      	cmp	r3, #41	; 0x29
 801154e:	dde9      	ble.n	8011524 <Read_Parameter+0x88>
   for(i=0;i<8;i++)
 8011550:	2300      	movs	r3, #0
 8011552:	80fb      	strh	r3, [r7, #6]
 8011554:	e00f      	b.n	8011576 <Read_Parameter+0xda>
	   MenuNow[i]=*ptr++;
 8011556:	683b      	ldr	r3, [r7, #0]
 8011558:	1c9a      	adds	r2, r3, #2
 801155a:	603a      	str	r2, [r7, #0]
 801155c:	881a      	ldrh	r2, [r3, #0]
 801155e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011562:	b211      	sxth	r1, r2
 8011564:	4a13      	ldr	r2, [pc, #76]	; (80115b4 <Read_Parameter+0x118>)
 8011566:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(i=0;i<8;i++)
 801156a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801156e:	b29b      	uxth	r3, r3
 8011570:	3301      	adds	r3, #1
 8011572:	b29b      	uxth	r3, r3
 8011574:	80fb      	strh	r3, [r7, #6]
 8011576:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801157a:	2b07      	cmp	r3, #7
 801157c:	ddeb      	ble.n	8011556 <Read_Parameter+0xba>
   TIM_BASE_Val=List[TIM_BASE].Val;
 801157e:	4b09      	ldr	r3, [pc, #36]	; (80115a4 <Read_Parameter+0x108>)
 8011580:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8011584:	4b08      	ldr	r3, [pc, #32]	; (80115a8 <Read_Parameter+0x10c>)
 8011586:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 8011588:	4b06      	ldr	r3, [pc, #24]	; (80115a4 <Read_Parameter+0x108>)
 801158a:	2200      	movs	r2, #0
 801158c:	879a      	strh	r2, [r3, #60]	; 0x3c

   return ;
 801158e:	e002      	b.n	8011596 <Read_Parameter+0xfa>
	   return ;
 8011590:	bf00      	nop
 8011592:	e000      	b.n	8011596 <Read_Parameter+0xfa>
	   return ;
 8011594:	bf00      	nop
 }
 8011596:	370c      	adds	r7, #12
 8011598:	46bd      	mov	sp, r7
 801159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801159e:	4770      	bx	lr
 80115a0:	0800806e 	.word	0x0800806e
 80115a4:	20000298 	.word	0x20000298
 80115a8:	20002814 	.word	0x20002814
 80115ac:	08008000 	.word	0x08008000
 80115b0:	2000079e 	.word	0x2000079e
 80115b4:	20000538 	.word	0x20000538

080115b8 <Save_Kpg>:
 /*******************************************************************************
  Save_Kpg:                       Return: 0= Success
 *******************************************************************************/
 char Save_Kpg(void)
 {
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b082      	sub	sp, #8
 80115bc:	af00      	add	r7, sp, #0
   short i, j;
   unsigned short* ptr;

   Flash_Erase.Sector = 1;
 80115be:	4b34      	ldr	r3, [pc, #208]	; (8011690 <Save_Kpg+0xd8>)
 80115c0:	2201      	movs	r2, #1
 80115c2:	609a      	str	r2, [r3, #8]

   HAL_FLASH_Unlock();
 80115c4:	f007 fe80 	bl	80192c8 <HAL_FLASH_Unlock>
   j=HAL_FLASHEx_Erase( &Flash_Erase, &err);
 80115c8:	4932      	ldr	r1, [pc, #200]	; (8011694 <Save_Kpg+0xdc>)
 80115ca:	4831      	ldr	r0, [pc, #196]	; (8011690 <Save_Kpg+0xd8>)
 80115cc:	f007 ffee 	bl	80195ac <HAL_FLASHEx_Erase>
 80115d0:	4603      	mov	r3, r0
 80115d2:	80bb      	strh	r3, [r7, #4]
   if(j== HAL_OK)
 80115d4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d151      	bne.n	8011680 <Save_Kpg+0xc8>
   {
     ptr=F_Buff;
 80115dc:	4b2e      	ldr	r3, [pc, #184]	; (8011698 <Save_Kpg+0xe0>)
 80115de:	603b      	str	r3, [r7, #0]
     *ptr++=0xaa55;
 80115e0:	683b      	ldr	r3, [r7, #0]
 80115e2:	1c9a      	adds	r2, r3, #2
 80115e4:	603a      	str	r2, [r7, #0]
 80115e6:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80115ea:	801a      	strh	r2, [r3, #0]
     *ptr++=0x0400;                              //Ver:3.00
 80115ec:	683b      	ldr	r3, [r7, #0]
 80115ee:	1c9a      	adds	r2, r3, #2
 80115f0:	603a      	str	r2, [r7, #0]
 80115f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80115f6:	801a      	strh	r2, [r3, #0]
     *ptr++=Cal_Flag;
 80115f8:	4b28      	ldr	r3, [pc, #160]	; (801169c <Save_Kpg+0xe4>)
 80115fa:	7819      	ldrb	r1, [r3, #0]
 80115fc:	683b      	ldr	r3, [r7, #0]
 80115fe:	1c9a      	adds	r2, r3, #2
 8011600:	603a      	str	r2, [r7, #0]
 8011602:	b28a      	uxth	r2, r1
 8011604:	801a      	strh	r2, [r3, #0]
     for(i=0;i<3;i++)
 8011606:	2300      	movs	r3, #0
 8011608:	80fb      	strh	r3, [r7, #6]
 801160a:	e00f      	b.n	801162c <Save_Kpg+0x74>
    	 *ptr++=Kpg[i];
 801160c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011610:	4a23      	ldr	r2, [pc, #140]	; (80116a0 <Save_Kpg+0xe8>)
 8011612:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8011616:	683b      	ldr	r3, [r7, #0]
 8011618:	1c9a      	adds	r2, r3, #2
 801161a:	603a      	str	r2, [r7, #0]
 801161c:	b28a      	uxth	r2, r1
 801161e:	801a      	strh	r2, [r3, #0]
     for(i=0;i<3;i++)
 8011620:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011624:	b29b      	uxth	r3, r3
 8011626:	3301      	adds	r3, #1
 8011628:	b29b      	uxth	r3, r3
 801162a:	80fb      	strh	r3, [r7, #6]
 801162c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011630:	2b02      	cmp	r3, #2
 8011632:	ddeb      	ble.n	801160c <Save_Kpg+0x54>
     ptr=F_Buff;
 8011634:	4b18      	ldr	r3, [pc, #96]	; (8011698 <Save_Kpg+0xe0>)
 8011636:	603b      	str	r3, [r7, #0]
     for(i=0; i<256; i+=2)
 8011638:	2300      	movs	r3, #0
 801163a:	80fb      	strh	r3, [r7, #6]
 801163c:	e01a      	b.n	8011674 <Save_Kpg+0xbc>
     {                      //128 SHORT
       j= HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Kpg_Address+i, *ptr++);
 801163e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011642:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8011646:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801164a:	4619      	mov	r1, r3
 801164c:	683b      	ldr	r3, [r7, #0]
 801164e:	1c9a      	adds	r2, r3, #2
 8011650:	603a      	str	r2, [r7, #0]
 8011652:	881b      	ldrh	r3, [r3, #0]
 8011654:	b29a      	uxth	r2, r3
 8011656:	f04f 0300 	mov.w	r3, #0
 801165a:	2001      	movs	r0, #1
 801165c:	f007 fde0 	bl	8019220 <HAL_FLASH_Program>
 8011660:	4603      	mov	r3, r0
 8011662:	80bb      	strh	r3, [r7, #4]
       if(j!= HAL_OK)
 8011664:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d108      	bne.n	801167e <Save_Kpg+0xc6>
     for(i=0; i<256; i+=2)
 801166c:	88fb      	ldrh	r3, [r7, #6]
 801166e:	3302      	adds	r3, #2
 8011670:	b29b      	uxth	r3, r3
 8011672:	80fb      	strh	r3, [r7, #6]
 8011674:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011678:	2bff      	cmp	r3, #255	; 0xff
 801167a:	dde0      	ble.n	801163e <Save_Kpg+0x86>
 801167c:	e000      	b.n	8011680 <Save_Kpg+0xc8>
    	   break;
 801167e:	bf00      	nop
     }
   }
   HAL_FLASH_Lock();
 8011680:	f007 fe44 	bl	801930c <HAL_FLASH_Lock>
   return j;
 8011684:	88bb      	ldrh	r3, [r7, #4]
 8011686:	b2db      	uxtb	r3, r3
 }
 8011688:	4618      	mov	r0, r3
 801168a:	3708      	adds	r7, #8
 801168c:	46bd      	mov	sp, r7
 801168e:	bd80      	pop	{r7, pc}
 8011690:	200001b8 	.word	0x200001b8
 8011694:	20002818 	.word	0x20002818
 8011698:	200017d8 	.word	0x200017d8
 801169c:	200001b4 	.word	0x200001b4
 80116a0:	2000056c 	.word	0x2000056c

080116a4 <Read_Kpg>:
 /*******************************************************************************
 Read_Kpg:
 *******************************************************************************/
 void Read_Kpg(void)
 {
 80116a4:	b480      	push	{r7}
 80116a6:	b083      	sub	sp, #12
 80116a8:	af00      	add	r7, sp, #0
   short i;
   unsigned short* ptr;
   ptr=(unsigned short*)Kpg_Address;
 80116aa:	4b1c      	ldr	r3, [pc, #112]	; (801171c <Read_Kpg+0x78>)
 80116ac:	603b      	str	r3, [r7, #0]
   if(*ptr++!=0xaa55)
 80116ae:	683b      	ldr	r3, [r7, #0]
 80116b0:	1c9a      	adds	r2, r3, #2
 80116b2:	603a      	str	r2, [r7, #0]
 80116b4:	881b      	ldrh	r3, [r3, #0]
 80116b6:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80116ba:	4293      	cmp	r3, r2
 80116bc:	d125      	bne.n	801170a <Read_Kpg+0x66>
	   return ;
   if(*ptr++!=0x0400)
 80116be:	683b      	ldr	r3, [r7, #0]
 80116c0:	1c9a      	adds	r2, r3, #2
 80116c2:	603a      	str	r2, [r7, #0]
 80116c4:	881b      	ldrh	r3, [r3, #0]
 80116c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80116ca:	d120      	bne.n	801170e <Read_Kpg+0x6a>
	   return ;
   Cal_Flag = *ptr++;
 80116cc:	683b      	ldr	r3, [r7, #0]
 80116ce:	1c9a      	adds	r2, r3, #2
 80116d0:	603a      	str	r2, [r7, #0]
 80116d2:	881b      	ldrh	r3, [r3, #0]
 80116d4:	b2da      	uxtb	r2, r3
 80116d6:	4b12      	ldr	r3, [pc, #72]	; (8011720 <Read_Kpg+0x7c>)
 80116d8:	701a      	strb	r2, [r3, #0]
   for(i=0;i< 3;i++)
 80116da:	2300      	movs	r3, #0
 80116dc:	80fb      	strh	r3, [r7, #6]
 80116de:	e00f      	b.n	8011700 <Read_Kpg+0x5c>
       Kpg[i] = *ptr++;  //CH_A,CH_B
 80116e0:	683b      	ldr	r3, [r7, #0]
 80116e2:	1c9a      	adds	r2, r3, #2
 80116e4:	603a      	str	r2, [r7, #0]
 80116e6:	881a      	ldrh	r2, [r3, #0]
 80116e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80116ec:	b211      	sxth	r1, r2
 80116ee:	4a0d      	ldr	r2, [pc, #52]	; (8011724 <Read_Kpg+0x80>)
 80116f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(i=0;i< 3;i++)
 80116f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80116f8:	b29b      	uxth	r3, r3
 80116fa:	3301      	adds	r3, #1
 80116fc:	b29b      	uxth	r3, r3
 80116fe:	80fb      	strh	r3, [r7, #6]
 8011700:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011704:	2b02      	cmp	r3, #2
 8011706:	ddeb      	ble.n	80116e0 <Read_Kpg+0x3c>
   return ;
 8011708:	e002      	b.n	8011710 <Read_Kpg+0x6c>
	   return ;
 801170a:	bf00      	nop
 801170c:	e000      	b.n	8011710 <Read_Kpg+0x6c>
	   return ;
 801170e:	bf00      	nop
 }
 8011710:	370c      	adds	r7, #12
 8011712:	46bd      	mov	sp, r7
 8011714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011718:	4770      	bx	lr
 801171a:	bf00      	nop
 801171c:	08004000 	.word	0x08004000
 8011720:	200001b4 	.word	0x200001b4
 8011724:	2000056c 	.word	0x2000056c

08011728 <Restore>:

 void Restore(void)
 {
 8011728:	b580      	push	{r7, lr}
 801172a:	b082      	sub	sp, #8
 801172c:	af00      	add	r7, sp, #0
   short i;
   TIM_BASE_Val=List[TIM_BASE].Val;
 801172e:	4b2d      	ldr	r3, [pc, #180]	; (80117e4 <Restore+0xbc>)
 8011730:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8011734:	4b2c      	ldr	r3, [pc, #176]	; (80117e8 <Restore+0xc0>)
 8011736:	801a      	strh	r2, [r3, #0]
   Current=0;
 8011738:	4b2c      	ldr	r3, [pc, #176]	; (80117ec <Restore+0xc4>)
 801173a:	2200      	movs	r2, #0
 801173c:	801a      	strh	r2, [r3, #0]
   List[MenuNow[Current]].Flg |= UPD;
 801173e:	4b2b      	ldr	r3, [pc, #172]	; (80117ec <Restore+0xc4>)
 8011740:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011744:	461a      	mov	r2, r3
 8011746:	4b2a      	ldr	r3, [pc, #168]	; (80117f0 <Restore+0xc8>)
 8011748:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801174c:	4a25      	ldr	r2, [pc, #148]	; (80117e4 <Restore+0xbc>)
 801174e:	00db      	lsls	r3, r3, #3
 8011750:	4413      	add	r3, r2
 8011752:	799b      	ldrb	r3, [r3, #6]
 8011754:	4a25      	ldr	r2, [pc, #148]	; (80117ec <Restore+0xc4>)
 8011756:	f9b2 2000 	ldrsh.w	r2, [r2]
 801175a:	4611      	mov	r1, r2
 801175c:	4a24      	ldr	r2, [pc, #144]	; (80117f0 <Restore+0xc8>)
 801175e:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8011762:	4610      	mov	r0, r2
 8011764:	f043 0320 	orr.w	r3, r3, #32
 8011768:	b2d9      	uxtb	r1, r3
 801176a:	4a1e      	ldr	r2, [pc, #120]	; (80117e4 <Restore+0xbc>)
 801176c:	00c3      	lsls	r3, r0, #3
 801176e:	4413      	add	r3, r2
 8011770:	460a      	mov	r2, r1
 8011772:	719a      	strb	r2, [r3, #6]
   for(i=0;i<42;i++)
 8011774:	2300      	movs	r3, #0
 8011776:	80fb      	strh	r3, [r7, #6]
 8011778:	e013      	b.n	80117a2 <Restore+0x7a>
	   List[i].Val= List_c[i].Val;
 801177a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801177e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011782:	491c      	ldr	r1, [pc, #112]	; (80117f4 <Restore+0xcc>)
 8011784:	00db      	lsls	r3, r3, #3
 8011786:	440b      	add	r3, r1
 8011788:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 801178c:	4915      	ldr	r1, [pc, #84]	; (80117e4 <Restore+0xbc>)
 801178e:	00d3      	lsls	r3, r2, #3
 8011790:	440b      	add	r3, r1
 8011792:	4602      	mov	r2, r0
 8011794:	809a      	strh	r2, [r3, #4]
   for(i=0;i<42;i++)
 8011796:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801179a:	b29b      	uxth	r3, r3
 801179c:	3301      	adds	r3, #1
 801179e:	b29b      	uxth	r3, r3
 80117a0:	80fb      	strh	r3, [r7, #6]
 80117a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80117a6:	2b29      	cmp	r3, #41	; 0x29
 80117a8:	dde7      	ble.n	801177a <Restore+0x52>
   for(i=0;i<8;i++)
 80117aa:	2300      	movs	r3, #0
 80117ac:	80fb      	strh	r3, [r7, #6]
 80117ae:	e00f      	b.n	80117d0 <Restore+0xa8>
	   MenuNow[i]= MenuNow_C[i];
 80117b0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80117b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80117b8:	490f      	ldr	r1, [pc, #60]	; (80117f8 <Restore+0xd0>)
 80117ba:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80117be:	4a0c      	ldr	r2, [pc, #48]	; (80117f0 <Restore+0xc8>)
 80117c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(i=0;i<8;i++)
 80117c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80117c8:	b29b      	uxth	r3, r3
 80117ca:	3301      	adds	r3, #1
 80117cc:	b29b      	uxth	r3, r3
 80117ce:	80fb      	strh	r3, [r7, #6]
 80117d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80117d4:	2b07      	cmp	r3, #7
 80117d6:	ddeb      	ble.n	80117b0 <Restore+0x88>
   Update_Title();
 80117d8:	f000 fdec 	bl	80123b4 <Update_Title>
}
 80117dc:	bf00      	nop
 80117de:	3708      	adds	r7, #8
 80117e0:	46bd      	mov	sp, r7
 80117e2:	bd80      	pop	{r7, pc}
 80117e4:	20000298 	.word	0x20000298
 80117e8:	20002814 	.word	0x20002814
 80117ec:	2000079e 	.word	0x2000079e
 80117f0:	20000538 	.word	0x20000538
 80117f4:	200003e8 	.word	0x200003e8
 80117f8:	08001ef8 	.word	0x08001ef8

080117fc <Restore_CalPar>:

 void Restore_CalPar(void)
 {
 80117fc:	b580      	push	{r7, lr}
 80117fe:	b082      	sub	sp, #8
 8011800:	af00      	add	r7, sp, #0
   short i = 0;
 8011802:	2300      	movs	r3, #0
 8011804:	80fb      	strh	r3, [r7, #6]
   List[SMPL_DPTH].Flg |= UPD;
 8011806:	4b47      	ldr	r3, [pc, #284]	; (8011924 <Restore_CalPar+0x128>)
 8011808:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 801180c:	f043 0320 	orr.w	r3, r3, #32
 8011810:	b2da      	uxtb	r2, r3
 8011812:	4b44      	ldr	r3, [pc, #272]	; (8011924 <Restore_CalPar+0x128>)
 8011814:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
   TIM_BASE_Val=List[TIM_BASE].Val;
 8011818:	4b42      	ldr	r3, [pc, #264]	; (8011924 <Restore_CalPar+0x128>)
 801181a:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 801181e:	4b42      	ldr	r3, [pc, #264]	; (8011928 <Restore_CalPar+0x12c>)
 8011820:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 8011822:	4b40      	ldr	r3, [pc, #256]	; (8011924 <Restore_CalPar+0x128>)
 8011824:	2200      	movs	r2, #0
 8011826:	879a      	strh	r2, [r3, #60]	; 0x3c
   Current=0;
 8011828:	4b40      	ldr	r3, [pc, #256]	; (801192c <Restore_CalPar+0x130>)
 801182a:	2200      	movs	r2, #0
 801182c:	801a      	strh	r2, [r3, #0]
   List[MenuNow[Current]].Flg |= UPD;
 801182e:	4b3f      	ldr	r3, [pc, #252]	; (801192c <Restore_CalPar+0x130>)
 8011830:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011834:	461a      	mov	r2, r3
 8011836:	4b3e      	ldr	r3, [pc, #248]	; (8011930 <Restore_CalPar+0x134>)
 8011838:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801183c:	4a39      	ldr	r2, [pc, #228]	; (8011924 <Restore_CalPar+0x128>)
 801183e:	00db      	lsls	r3, r3, #3
 8011840:	4413      	add	r3, r2
 8011842:	799b      	ldrb	r3, [r3, #6]
 8011844:	4a39      	ldr	r2, [pc, #228]	; (801192c <Restore_CalPar+0x130>)
 8011846:	f9b2 2000 	ldrsh.w	r2, [r2]
 801184a:	4611      	mov	r1, r2
 801184c:	4a38      	ldr	r2, [pc, #224]	; (8011930 <Restore_CalPar+0x134>)
 801184e:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8011852:	4610      	mov	r0, r2
 8011854:	f043 0320 	orr.w	r3, r3, #32
 8011858:	b2d9      	uxtb	r1, r3
 801185a:	4a32      	ldr	r2, [pc, #200]	; (8011924 <Restore_CalPar+0x128>)
 801185c:	00c3      	lsls	r3, r0, #3
 801185e:	4413      	add	r3, r2
 8011860:	460a      	mov	r2, r1
 8011862:	719a      	strb	r2, [r3, #6]
   for(i=0;i<42;i++) List[i].Val= List_c[i].Val;
 8011864:	2300      	movs	r3, #0
 8011866:	80fb      	strh	r3, [r7, #6]
 8011868:	e013      	b.n	8011892 <Restore_CalPar+0x96>
 801186a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801186e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011872:	4930      	ldr	r1, [pc, #192]	; (8011934 <Restore_CalPar+0x138>)
 8011874:	00db      	lsls	r3, r3, #3
 8011876:	440b      	add	r3, r1
 8011878:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 801187c:	4929      	ldr	r1, [pc, #164]	; (8011924 <Restore_CalPar+0x128>)
 801187e:	00d3      	lsls	r3, r2, #3
 8011880:	440b      	add	r3, r1
 8011882:	4602      	mov	r2, r0
 8011884:	809a      	strh	r2, [r3, #4]
 8011886:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801188a:	b29b      	uxth	r3, r3
 801188c:	3301      	adds	r3, #1
 801188e:	b29b      	uxth	r3, r3
 8011890:	80fb      	strh	r3, [r7, #6]
 8011892:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011896:	2b29      	cmp	r3, #41	; 0x29
 8011898:	dde7      	ble.n	801186a <Restore_CalPar+0x6e>
   for(i=0;i<8;i++)  MenuNow[i]= MenuNow_C[i];
 801189a:	2300      	movs	r3, #0
 801189c:	80fb      	strh	r3, [r7, #6]
 801189e:	e00f      	b.n	80118c0 <Restore_CalPar+0xc4>
 80118a0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80118a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80118a8:	4923      	ldr	r1, [pc, #140]	; (8011938 <Restore_CalPar+0x13c>)
 80118aa:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80118ae:	4a20      	ldr	r2, [pc, #128]	; (8011930 <Restore_CalPar+0x134>)
 80118b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80118b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80118b8:	b29b      	uxth	r3, r3
 80118ba:	3301      	adds	r3, #1
 80118bc:	b29b      	uxth	r3, r3
 80118be:	80fb      	strh	r3, [r7, #6]
 80118c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80118c4:	2b07      	cmp	r3, #7
 80118c6:	ddeb      	ble.n	80118a0 <Restore_CalPar+0xa4>
   TIM_BASE_Val=List[TIM_BASE].Val;
 80118c8:	4b16      	ldr	r3, [pc, #88]	; (8011924 <Restore_CalPar+0x128>)
 80118ca:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 80118ce:	4b16      	ldr	r3, [pc, #88]	; (8011928 <Restore_CalPar+0x12c>)
 80118d0:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 80118d2:	4b14      	ldr	r3, [pc, #80]	; (8011924 <Restore_CalPar+0x128>)
 80118d4:	2200      	movs	r2, #0
 80118d6:	879a      	strh	r2, [r3, #60]	; 0x3c
   for(i=Y_RANGES; i<=STANDBY; i++){
 80118d8:	2300      	movs	r3, #0
 80118da:	80fb      	strh	r3, [r7, #6]
 80118dc:	e015      	b.n	801190a <Restore_CalPar+0x10e>
   List[i].Flg |= UPD;
 80118de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80118e2:	4a10      	ldr	r2, [pc, #64]	; (8011924 <Restore_CalPar+0x128>)
 80118e4:	00db      	lsls	r3, r3, #3
 80118e6:	4413      	add	r3, r2
 80118e8:	799a      	ldrb	r2, [r3, #6]
 80118ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80118ee:	f042 0220 	orr.w	r2, r2, #32
 80118f2:	b2d1      	uxtb	r1, r2
 80118f4:	4a0b      	ldr	r2, [pc, #44]	; (8011924 <Restore_CalPar+0x128>)
 80118f6:	00db      	lsls	r3, r3, #3
 80118f8:	4413      	add	r3, r2
 80118fa:	460a      	mov	r2, r1
 80118fc:	719a      	strb	r2, [r3, #6]
   for(i=Y_RANGES; i<=STANDBY; i++){
 80118fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011902:	b29b      	uxth	r3, r3
 8011904:	3301      	adds	r3, #1
 8011906:	b29b      	uxth	r3, r3
 8011908:	80fb      	strh	r3, [r7, #6]
 801190a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801190e:	2b29      	cmp	r3, #41	; 0x29
 8011910:	dde5      	ble.n	80118de <Restore_CalPar+0xe2>
   }
   Update_Title();
 8011912:	f000 fd4f 	bl	80123b4 <Update_Title>
   Close_Pop();
 8011916:	f7fc ff0d 	bl	800e734 <Close_Pop>
 }
 801191a:	bf00      	nop
 801191c:	3708      	adds	r7, #8
 801191e:	46bd      	mov	sp, r7
 8011920:	bd80      	pop	{r7, pc}
 8011922:	bf00      	nop
 8011924:	20000298 	.word	0x20000298
 8011928:	20002814 	.word	0x20002814
 801192c:	2000079e 	.word	0x2000079e
 8011930:	20000538 	.word	0x20000538
 8011934:	200003e8 	.word	0x200003e8
 8011938:	08001ef8 	.word	0x08001ef8

0801193c <u8ToDec3>:
 801193c:	b480      	push	{r7}
 801193e:	b083      	sub	sp, #12
 8011940:	af00      	add	r7, sp, #0
 8011942:	6078      	str	r0, [r7, #4]
 8011944:	460b      	mov	r3, r1
 8011946:	70fb      	strb	r3, [r7, #3]
 8011948:	78fb      	ldrb	r3, [r7, #3]
 801194a:	4a1e      	ldr	r2, [pc, #120]	; (80119c4 <u8ToDec3+0x88>)
 801194c:	fba2 2303 	umull	r2, r3, r2, r3
 8011950:	095b      	lsrs	r3, r3, #5
 8011952:	b2da      	uxtb	r2, r3
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	1c59      	adds	r1, r3, #1
 8011958:	6079      	str	r1, [r7, #4]
 801195a:	3230      	adds	r2, #48	; 0x30
 801195c:	b2d2      	uxtb	r2, r2
 801195e:	701a      	strb	r2, [r3, #0]
 8011960:	78fb      	ldrb	r3, [r7, #3]
 8011962:	4a18      	ldr	r2, [pc, #96]	; (80119c4 <u8ToDec3+0x88>)
 8011964:	fba2 1203 	umull	r1, r2, r2, r3
 8011968:	0952      	lsrs	r2, r2, #5
 801196a:	2164      	movs	r1, #100	; 0x64
 801196c:	fb01 f202 	mul.w	r2, r1, r2
 8011970:	1a9b      	subs	r3, r3, r2
 8011972:	70fb      	strb	r3, [r7, #3]
 8011974:	78fb      	ldrb	r3, [r7, #3]
 8011976:	4a14      	ldr	r2, [pc, #80]	; (80119c8 <u8ToDec3+0x8c>)
 8011978:	fba2 2303 	umull	r2, r3, r2, r3
 801197c:	08db      	lsrs	r3, r3, #3
 801197e:	b2da      	uxtb	r2, r3
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	1c59      	adds	r1, r3, #1
 8011984:	6079      	str	r1, [r7, #4]
 8011986:	3230      	adds	r2, #48	; 0x30
 8011988:	b2d2      	uxtb	r2, r2
 801198a:	701a      	strb	r2, [r3, #0]
 801198c:	78fa      	ldrb	r2, [r7, #3]
 801198e:	4b0e      	ldr	r3, [pc, #56]	; (80119c8 <u8ToDec3+0x8c>)
 8011990:	fba3 1302 	umull	r1, r3, r3, r2
 8011994:	08d9      	lsrs	r1, r3, #3
 8011996:	460b      	mov	r3, r1
 8011998:	009b      	lsls	r3, r3, #2
 801199a:	440b      	add	r3, r1
 801199c:	005b      	lsls	r3, r3, #1
 801199e:	1ad3      	subs	r3, r2, r3
 80119a0:	70fb      	strb	r3, [r7, #3]
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	1c5a      	adds	r2, r3, #1
 80119a6:	607a      	str	r2, [r7, #4]
 80119a8:	78fa      	ldrb	r2, [r7, #3]
 80119aa:	3230      	adds	r2, #48	; 0x30
 80119ac:	b2d2      	uxtb	r2, r2
 80119ae:	701a      	strb	r2, [r3, #0]
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	2200      	movs	r2, #0
 80119b4:	701a      	strb	r2, [r3, #0]
 80119b6:	bf00      	nop
 80119b8:	370c      	adds	r7, #12
 80119ba:	46bd      	mov	sp, r7
 80119bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c0:	4770      	bx	lr
 80119c2:	bf00      	nop
 80119c4:	51eb851f 	.word	0x51eb851f
 80119c8:	cccccccd 	.word	0xcccccccd

080119cc <memset16>:
 80119cc:	b480      	push	{r7}
 80119ce:	b083      	sub	sp, #12
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	6078      	str	r0, [r7, #4]
 80119d4:	460b      	mov	r3, r1
 80119d6:	807b      	strh	r3, [r7, #2]
 80119d8:	4613      	mov	r3, r2
 80119da:	803b      	strh	r3, [r7, #0]
 80119dc:	e00a      	b.n	80119f4 <memset16+0x28>
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	1c9a      	adds	r2, r3, #2
 80119e2:	607a      	str	r2, [r7, #4]
 80119e4:	887a      	ldrh	r2, [r7, #2]
 80119e6:	801a      	strh	r2, [r3, #0]
 80119e8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80119ec:	b29b      	uxth	r3, r3
 80119ee:	3b01      	subs	r3, #1
 80119f0:	b29b      	uxth	r3, r3
 80119f2:	803b      	strh	r3, [r7, #0]
 80119f4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d1f0      	bne.n	80119de <memset16+0x12>
 80119fc:	bf00      	nop
 80119fe:	bf00      	nop
 8011a00:	370c      	adds	r7, #12
 8011a02:	46bd      	mov	sp, r7
 8011a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a08:	4770      	bx	lr
	...

08011a0c <Value2Str>:
 8011a0c:	b580      	push	{r7, lr}
 8011a0e:	b088      	sub	sp, #32
 8011a10:	af00      	add	r7, sp, #0
 8011a12:	60f8      	str	r0, [r7, #12]
 8011a14:	60b9      	str	r1, [r7, #8]
 8011a16:	607a      	str	r2, [r7, #4]
 8011a18:	70fb      	strb	r3, [r7, #3]
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	83fb      	strh	r3, [r7, #30]
 8011a1e:	68bb      	ldr	r3, [r7, #8]
 8011a20:	61bb      	str	r3, [r7, #24]
 8011a22:	2305      	movs	r3, #5
 8011a24:	617b      	str	r3, [r7, #20]
 8011a26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d129      	bne.n	8011a82 <Value2Str+0x76>
 8011a2e:	68bb      	ldr	r3, [r7, #8]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d104      	bne.n	8011a3e <Value2Str+0x32>
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	1c5a      	adds	r2, r3, #1
 8011a38:	60fa      	str	r2, [r7, #12]
 8011a3a:	2220      	movs	r2, #32
 8011a3c:	701a      	strb	r2, [r3, #0]
 8011a3e:	68bb      	ldr	r3, [r7, #8]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	dd04      	ble.n	8011a4e <Value2Str+0x42>
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	1c5a      	adds	r2, r3, #1
 8011a48:	60fa      	str	r2, [r7, #12]
 8011a4a:	222b      	movs	r2, #43	; 0x2b
 8011a4c:	701a      	strb	r2, [r3, #0]
 8011a4e:	68bb      	ldr	r3, [r7, #8]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	da16      	bge.n	8011a82 <Value2Str+0x76>
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	1c5a      	adds	r2, r3, #1
 8011a58:	60fa      	str	r2, [r7, #12]
 8011a5a:	222d      	movs	r2, #45	; 0x2d
 8011a5c:	701a      	strb	r2, [r3, #0]
 8011a5e:	68bb      	ldr	r3, [r7, #8]
 8011a60:	425b      	negs	r3, r3
 8011a62:	60bb      	str	r3, [r7, #8]
 8011a64:	e00d      	b.n	8011a82 <Value2Str+0x76>
 8011a66:	69bb      	ldr	r3, [r7, #24]
 8011a68:	4a64      	ldr	r2, [pc, #400]	; (8011bfc <Value2Str+0x1f0>)
 8011a6a:	fb82 1203 	smull	r1, r2, r2, r3
 8011a6e:	1092      	asrs	r2, r2, #2
 8011a70:	17db      	asrs	r3, r3, #31
 8011a72:	1ad3      	subs	r3, r2, r3
 8011a74:	61bb      	str	r3, [r7, #24]
 8011a76:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011a7a:	b29b      	uxth	r3, r3
 8011a7c:	3301      	adds	r3, #1
 8011a7e:	b29b      	uxth	r3, r3
 8011a80:	83fb      	strh	r3, [r7, #30]
 8011a82:	69bb      	ldr	r3, [r7, #24]
 8011a84:	2b09      	cmp	r3, #9
 8011a86:	dcee      	bgt.n	8011a66 <Value2Str+0x5a>
 8011a88:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011a8c:	4b5c      	ldr	r3, [pc, #368]	; (8011c00 <Value2Str+0x1f4>)
 8011a8e:	fb83 3102 	smull	r3, r1, r3, r2
 8011a92:	17d3      	asrs	r3, r2, #31
 8011a94:	1ac9      	subs	r1, r1, r3
 8011a96:	460b      	mov	r3, r1
 8011a98:	005b      	lsls	r3, r3, #1
 8011a9a:	440b      	add	r3, r1
 8011a9c:	1ad3      	subs	r3, r2, r3
 8011a9e:	b21b      	sxth	r3, r3
 8011aa0:	2b02      	cmp	r3, #2
 8011aa2:	d105      	bne.n	8011ab0 <Value2Str+0xa4>
 8011aa4:	78fb      	ldrb	r3, [r7, #3]
 8011aa6:	2b02      	cmp	r3, #2
 8011aa8:	d102      	bne.n	8011ab0 <Value2Str+0xa4>
 8011aaa:	78fb      	ldrb	r3, [r7, #3]
 8011aac:	3301      	adds	r3, #1
 8011aae:	70fb      	strb	r3, [r7, #3]
 8011ab0:	68bb      	ldr	r3, [r7, #8]
 8011ab2:	61bb      	str	r3, [r7, #24]
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	83fb      	strh	r3, [r7, #30]
 8011ab8:	e016      	b.n	8011ae8 <Value2Str+0xdc>
 8011aba:	69bb      	ldr	r3, [r7, #24]
 8011abc:	4a4f      	ldr	r2, [pc, #316]	; (8011bfc <Value2Str+0x1f0>)
 8011abe:	fb82 1203 	smull	r1, r2, r2, r3
 8011ac2:	1092      	asrs	r2, r2, #2
 8011ac4:	17db      	asrs	r3, r3, #31
 8011ac6:	1ad3      	subs	r3, r2, r3
 8011ac8:	61bb      	str	r3, [r7, #24]
 8011aca:	8bfb      	ldrh	r3, [r7, #30]
 8011acc:	3301      	adds	r3, #1
 8011ace:	b29b      	uxth	r3, r3
 8011ad0:	83fb      	strh	r3, [r7, #30]
 8011ad2:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011ad6:	78fb      	ldrb	r3, [r7, #3]
 8011ad8:	429a      	cmp	r2, r3
 8011ada:	dd05      	ble.n	8011ae8 <Value2Str+0xdc>
 8011adc:	697a      	ldr	r2, [r7, #20]
 8011ade:	4613      	mov	r3, r2
 8011ae0:	009b      	lsls	r3, r3, #2
 8011ae2:	4413      	add	r3, r2
 8011ae4:	005b      	lsls	r3, r3, #1
 8011ae6:	617b      	str	r3, [r7, #20]
 8011ae8:	69bb      	ldr	r3, [r7, #24]
 8011aea:	2b09      	cmp	r3, #9
 8011aec:	dce5      	bgt.n	8011aba <Value2Str+0xae>
 8011aee:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011af2:	78fb      	ldrb	r3, [r7, #3]
 8011af4:	429a      	cmp	r2, r3
 8011af6:	db03      	blt.n	8011b00 <Value2Str+0xf4>
 8011af8:	68ba      	ldr	r2, [r7, #8]
 8011afa:	697b      	ldr	r3, [r7, #20]
 8011afc:	4413      	add	r3, r2
 8011afe:	60bb      	str	r3, [r7, #8]
 8011b00:	68bb      	ldr	r3, [r7, #8]
 8011b02:	61bb      	str	r3, [r7, #24]
 8011b04:	2300      	movs	r3, #0
 8011b06:	83fb      	strh	r3, [r7, #30]
 8011b08:	e00d      	b.n	8011b26 <Value2Str+0x11a>
 8011b0a:	69bb      	ldr	r3, [r7, #24]
 8011b0c:	4a3b      	ldr	r2, [pc, #236]	; (8011bfc <Value2Str+0x1f0>)
 8011b0e:	fb82 1203 	smull	r1, r2, r2, r3
 8011b12:	1092      	asrs	r2, r2, #2
 8011b14:	17db      	asrs	r3, r3, #31
 8011b16:	1ad3      	subs	r3, r2, r3
 8011b18:	61bb      	str	r3, [r7, #24]
 8011b1a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011b1e:	b29b      	uxth	r3, r3
 8011b20:	3301      	adds	r3, #1
 8011b22:	b29b      	uxth	r3, r3
 8011b24:	83fb      	strh	r3, [r7, #30]
 8011b26:	69bb      	ldr	r3, [r7, #24]
 8011b28:	2b09      	cmp	r3, #9
 8011b2a:	dcee      	bgt.n	8011b0a <Value2Str+0xfe>
 8011b2c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011b30:	4a33      	ldr	r2, [pc, #204]	; (8011c00 <Value2Str+0x1f4>)
 8011b32:	fb82 1203 	smull	r1, r2, r2, r3
 8011b36:	17db      	asrs	r3, r3, #31
 8011b38:	1ad3      	subs	r3, r2, r3
 8011b3a:	b21b      	sxth	r3, r3
 8011b3c:	61bb      	str	r3, [r7, #24]
 8011b3e:	e03e      	b.n	8011bbe <Value2Str+0x1b2>
 8011b40:	8bfb      	ldrh	r3, [r7, #30]
 8011b42:	b2db      	uxtb	r3, r3
 8011b44:	4618      	mov	r0, r3
 8011b46:	f000 f85d 	bl	8011c04 <Exp>
 8011b4a:	4602      	mov	r2, r0
 8011b4c:	68bb      	ldr	r3, [r7, #8]
 8011b4e:	fb93 f3f2 	sdiv	r3, r3, r2
 8011b52:	b2da      	uxtb	r2, r3
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	1c59      	adds	r1, r3, #1
 8011b58:	60f9      	str	r1, [r7, #12]
 8011b5a:	3230      	adds	r2, #48	; 0x30
 8011b5c:	b2d2      	uxtb	r2, r2
 8011b5e:	701a      	strb	r2, [r3, #0]
 8011b60:	78fb      	ldrb	r3, [r7, #3]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d012      	beq.n	8011b8c <Value2Str+0x180>
 8011b66:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011b6a:	4b25      	ldr	r3, [pc, #148]	; (8011c00 <Value2Str+0x1f4>)
 8011b6c:	fb83 3102 	smull	r3, r1, r3, r2
 8011b70:	17d3      	asrs	r3, r2, #31
 8011b72:	1ac9      	subs	r1, r1, r3
 8011b74:	460b      	mov	r3, r1
 8011b76:	005b      	lsls	r3, r3, #1
 8011b78:	440b      	add	r3, r1
 8011b7a:	1ad3      	subs	r3, r2, r3
 8011b7c:	b21b      	sxth	r3, r3
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d104      	bne.n	8011b8c <Value2Str+0x180>
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	1c5a      	adds	r2, r3, #1
 8011b86:	60fa      	str	r2, [r7, #12]
 8011b88:	222e      	movs	r2, #46	; 0x2e
 8011b8a:	701a      	strb	r2, [r3, #0]
 8011b8c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	db0c      	blt.n	8011bae <Value2Str+0x1a2>
 8011b94:	8bfb      	ldrh	r3, [r7, #30]
 8011b96:	b2db      	uxtb	r3, r3
 8011b98:	4618      	mov	r0, r3
 8011b9a:	f000 f833 	bl	8011c04 <Exp>
 8011b9e:	4602      	mov	r2, r0
 8011ba0:	68bb      	ldr	r3, [r7, #8]
 8011ba2:	fb93 f1f2 	sdiv	r1, r3, r2
 8011ba6:	fb02 f201 	mul.w	r2, r2, r1
 8011baa:	1a9b      	subs	r3, r3, r2
 8011bac:	e000      	b.n	8011bb0 <Value2Str+0x1a4>
 8011bae:	2300      	movs	r3, #0
 8011bb0:	60bb      	str	r3, [r7, #8]
 8011bb2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011bb6:	b29b      	uxth	r3, r3
 8011bb8:	3b01      	subs	r3, #1
 8011bba:	b29b      	uxth	r3, r3
 8011bbc:	83fb      	strh	r3, [r7, #30]
 8011bbe:	78fb      	ldrb	r3, [r7, #3]
 8011bc0:	1e5a      	subs	r2, r3, #1
 8011bc2:	70fa      	strb	r2, [r7, #3]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d1bb      	bne.n	8011b40 <Value2Str+0x134>
 8011bc8:	69ba      	ldr	r2, [r7, #24]
 8011bca:	4613      	mov	r3, r2
 8011bcc:	005b      	lsls	r3, r3, #1
 8011bce:	4413      	add	r3, r2
 8011bd0:	005b      	lsls	r3, r3, #1
 8011bd2:	461a      	mov	r2, r3
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	4413      	add	r3, r2
 8011bd8:	607b      	str	r3, [r7, #4]
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	1c5a      	adds	r2, r3, #1
 8011bde:	60fa      	str	r2, [r7, #12]
 8011be0:	687a      	ldr	r2, [r7, #4]
 8011be2:	7812      	ldrb	r2, [r2, #0]
 8011be4:	701a      	strb	r2, [r3, #0]
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	1c5a      	adds	r2, r3, #1
 8011bea:	607a      	str	r2, [r7, #4]
 8011bec:	781b      	ldrb	r3, [r3, #0]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d1f3      	bne.n	8011bda <Value2Str+0x1ce>
 8011bf2:	bf00      	nop
 8011bf4:	bf00      	nop
 8011bf6:	3720      	adds	r7, #32
 8011bf8:	46bd      	mov	sp, r7
 8011bfa:	bd80      	pop	{r7, pc}
 8011bfc:	66666667 	.word	0x66666667
 8011c00:	55555556 	.word	0x55555556

08011c04 <Exp>:
 8011c04:	b480      	push	{r7}
 8011c06:	b085      	sub	sp, #20
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	4603      	mov	r3, r0
 8011c0c:	71fb      	strb	r3, [r7, #7]
 8011c0e:	2301      	movs	r3, #1
 8011c10:	60fb      	str	r3, [r7, #12]
 8011c12:	e005      	b.n	8011c20 <Exp+0x1c>
 8011c14:	68fa      	ldr	r2, [r7, #12]
 8011c16:	4613      	mov	r3, r2
 8011c18:	009b      	lsls	r3, r3, #2
 8011c1a:	4413      	add	r3, r2
 8011c1c:	005b      	lsls	r3, r3, #1
 8011c1e:	60fb      	str	r3, [r7, #12]
 8011c20:	79fb      	ldrb	r3, [r7, #7]
 8011c22:	1e5a      	subs	r2, r3, #1
 8011c24:	71fa      	strb	r2, [r7, #7]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d1f4      	bne.n	8011c14 <Exp+0x10>
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	3714      	adds	r7, #20
 8011c30:	46bd      	mov	sp, r7
 8011c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c36:	4770      	bx	lr

08011c38 <Sqrt32>:
 8011c38:	b580      	push	{r7, lr}
 8011c3a:	b084      	sub	sp, #16
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	6078      	str	r0, [r7, #4]
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d101      	bne.n	8011c4a <Sqrt32+0x12>
 8011c46:	2300      	movs	r3, #0
 8011c48:	e019      	b.n	8011c7e <Sqrt32+0x46>
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	da00      	bge.n	8011c52 <Sqrt32+0x1a>
 8011c50:	3303      	adds	r3, #3
 8011c52:	109b      	asrs	r3, r3, #2
 8011c54:	4618      	mov	r0, r3
 8011c56:	f7ff ffef 	bl	8011c38 <Sqrt32>
 8011c5a:	4603      	mov	r3, r0
 8011c5c:	005b      	lsls	r3, r3, #1
 8011c5e:	3301      	adds	r3, #1
 8011c60:	60fb      	str	r3, [r7, #12]
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	fb03 f303 	mul.w	r3, r3, r3
 8011c68:	687a      	ldr	r2, [r7, #4]
 8011c6a:	429a      	cmp	r2, r3
 8011c6c:	da05      	bge.n	8011c7a <Sqrt32+0x42>
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	b29b      	uxth	r3, r3
 8011c72:	3b01      	subs	r3, #1
 8011c74:	b29b      	uxth	r3, r3
 8011c76:	b21b      	sxth	r3, r3
 8011c78:	e001      	b.n	8011c7e <Sqrt32+0x46>
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	b21b      	sxth	r3, r3
 8011c7e:	4618      	mov	r0, r3
 8011c80:	3710      	adds	r7, #16
 8011c82:	46bd      	mov	sp, r7
 8011c84:	bd80      	pop	{r7, pc}
	...

08011c88 <u16ToDec4Str>:
 8011c88:	b480      	push	{r7}
 8011c8a:	b083      	sub	sp, #12
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	6078      	str	r0, [r7, #4]
 8011c90:	460b      	mov	r3, r1
 8011c92:	807b      	strh	r3, [r7, #2]
 8011c94:	887b      	ldrh	r3, [r7, #2]
 8011c96:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8011c9a:	330f      	adds	r3, #15
 8011c9c:	b29b      	uxth	r3, r3
 8011c9e:	f644 621e 	movw	r2, #19998	; 0x4e1e
 8011ca2:	4293      	cmp	r3, r2
 8011ca4:	d917      	bls.n	8011cd6 <u16ToDec4Str+0x4e>
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	1c5a      	adds	r2, r3, #1
 8011caa:	607a      	str	r2, [r7, #4]
 8011cac:	224f      	movs	r2, #79	; 0x4f
 8011cae:	701a      	strb	r2, [r3, #0]
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	1c5a      	adds	r2, r3, #1
 8011cb4:	607a      	str	r2, [r7, #4]
 8011cb6:	2276      	movs	r2, #118	; 0x76
 8011cb8:	701a      	strb	r2, [r3, #0]
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	1c5a      	adds	r2, r3, #1
 8011cbe:	607a      	str	r2, [r7, #4]
 8011cc0:	2265      	movs	r2, #101	; 0x65
 8011cc2:	701a      	strb	r2, [r3, #0]
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	1c5a      	adds	r2, r3, #1
 8011cc8:	607a      	str	r2, [r7, #4]
 8011cca:	2272      	movs	r2, #114	; 0x72
 8011ccc:	701a      	strb	r2, [r3, #0]
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	2200      	movs	r2, #0
 8011cd2:	701a      	strb	r2, [r3, #0]
 8011cd4:	e07e      	b.n	8011dd4 <u16ToDec4Str+0x14c>
 8011cd6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011cda:	4a41      	ldr	r2, [pc, #260]	; (8011de0 <u16ToDec4Str+0x158>)
 8011cdc:	fb82 1203 	smull	r1, r2, r2, r3
 8011ce0:	1192      	asrs	r2, r2, #6
 8011ce2:	17db      	asrs	r3, r3, #31
 8011ce4:	1ad3      	subs	r3, r2, r3
 8011ce6:	b21b      	sxth	r3, r3
 8011ce8:	b2da      	uxtb	r2, r3
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	1c59      	adds	r1, r3, #1
 8011cee:	6079      	str	r1, [r7, #4]
 8011cf0:	3230      	adds	r2, #48	; 0x30
 8011cf2:	b2d2      	uxtb	r2, r2
 8011cf4:	701a      	strb	r2, [r3, #0]
 8011cf6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011cfa:	4a39      	ldr	r2, [pc, #228]	; (8011de0 <u16ToDec4Str+0x158>)
 8011cfc:	fb82 1203 	smull	r1, r2, r2, r3
 8011d00:	1191      	asrs	r1, r2, #6
 8011d02:	17da      	asrs	r2, r3, #31
 8011d04:	1a8a      	subs	r2, r1, r2
 8011d06:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011d0a:	fb01 f202 	mul.w	r2, r1, r2
 8011d0e:	1a9b      	subs	r3, r3, r2
 8011d10:	807b      	strh	r3, [r7, #2]
 8011d12:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011d16:	4a33      	ldr	r2, [pc, #204]	; (8011de4 <u16ToDec4Str+0x15c>)
 8011d18:	fb82 1203 	smull	r1, r2, r2, r3
 8011d1c:	1152      	asrs	r2, r2, #5
 8011d1e:	17db      	asrs	r3, r3, #31
 8011d20:	1ad3      	subs	r3, r2, r3
 8011d22:	b21b      	sxth	r3, r3
 8011d24:	b2da      	uxtb	r2, r3
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	1c59      	adds	r1, r3, #1
 8011d2a:	6079      	str	r1, [r7, #4]
 8011d2c:	3230      	adds	r2, #48	; 0x30
 8011d2e:	b2d2      	uxtb	r2, r2
 8011d30:	701a      	strb	r2, [r3, #0]
 8011d32:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011d36:	4a2b      	ldr	r2, [pc, #172]	; (8011de4 <u16ToDec4Str+0x15c>)
 8011d38:	fb82 1203 	smull	r1, r2, r2, r3
 8011d3c:	1151      	asrs	r1, r2, #5
 8011d3e:	17da      	asrs	r2, r3, #31
 8011d40:	1a8a      	subs	r2, r1, r2
 8011d42:	2164      	movs	r1, #100	; 0x64
 8011d44:	fb01 f202 	mul.w	r2, r1, r2
 8011d48:	1a9b      	subs	r3, r3, r2
 8011d4a:	807b      	strh	r3, [r7, #2]
 8011d4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011d50:	4a25      	ldr	r2, [pc, #148]	; (8011de8 <u16ToDec4Str+0x160>)
 8011d52:	fb82 1203 	smull	r1, r2, r2, r3
 8011d56:	1092      	asrs	r2, r2, #2
 8011d58:	17db      	asrs	r3, r3, #31
 8011d5a:	1ad3      	subs	r3, r2, r3
 8011d5c:	b21b      	sxth	r3, r3
 8011d5e:	b2da      	uxtb	r2, r3
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	1c59      	adds	r1, r3, #1
 8011d64:	6079      	str	r1, [r7, #4]
 8011d66:	3230      	adds	r2, #48	; 0x30
 8011d68:	b2d2      	uxtb	r2, r2
 8011d6a:	701a      	strb	r2, [r3, #0]
 8011d6c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8011d70:	4b1d      	ldr	r3, [pc, #116]	; (8011de8 <u16ToDec4Str+0x160>)
 8011d72:	fb83 1302 	smull	r1, r3, r3, r2
 8011d76:	1099      	asrs	r1, r3, #2
 8011d78:	17d3      	asrs	r3, r2, #31
 8011d7a:	1ac9      	subs	r1, r1, r3
 8011d7c:	460b      	mov	r3, r1
 8011d7e:	009b      	lsls	r3, r3, #2
 8011d80:	440b      	add	r3, r1
 8011d82:	005b      	lsls	r3, r3, #1
 8011d84:	1ad3      	subs	r3, r2, r3
 8011d86:	807b      	strh	r3, [r7, #2]
 8011d88:	887b      	ldrh	r3, [r7, #2]
 8011d8a:	b2da      	uxtb	r2, r3
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	1c59      	adds	r1, r3, #1
 8011d90:	6079      	str	r1, [r7, #4]
 8011d92:	3230      	adds	r2, #48	; 0x30
 8011d94:	b2d2      	uxtb	r2, r2
 8011d96:	701a      	strb	r2, [r3, #0]
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	2200      	movs	r2, #0
 8011d9c:	701a      	strb	r2, [r3, #0]
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	3b04      	subs	r3, #4
 8011da2:	781b      	ldrb	r3, [r3, #0]
 8011da4:	2b30      	cmp	r3, #48	; 0x30
 8011da6:	d115      	bne.n	8011dd4 <u16ToDec4Str+0x14c>
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	3b04      	subs	r3, #4
 8011dac:	2220      	movs	r2, #32
 8011dae:	701a      	strb	r2, [r3, #0]
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	3b03      	subs	r3, #3
 8011db4:	781b      	ldrb	r3, [r3, #0]
 8011db6:	2b30      	cmp	r3, #48	; 0x30
 8011db8:	d10c      	bne.n	8011dd4 <u16ToDec4Str+0x14c>
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	3b03      	subs	r3, #3
 8011dbe:	2220      	movs	r2, #32
 8011dc0:	701a      	strb	r2, [r3, #0]
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	3b02      	subs	r3, #2
 8011dc6:	781b      	ldrb	r3, [r3, #0]
 8011dc8:	2b30      	cmp	r3, #48	; 0x30
 8011dca:	d103      	bne.n	8011dd4 <u16ToDec4Str+0x14c>
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	3b02      	subs	r3, #2
 8011dd0:	2220      	movs	r2, #32
 8011dd2:	701a      	strb	r2, [r3, #0]
 8011dd4:	370c      	adds	r7, #12
 8011dd6:	46bd      	mov	sp, r7
 8011dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ddc:	4770      	bx	lr
 8011dde:	bf00      	nop
 8011de0:	10624dd3 	.word	0x10624dd3
 8011de4:	51eb851f 	.word	0x51eb851f
 8011de8:	66666667 	.word	0x66666667

08011dec <lcd_write_cmd_data>:
#include "Func.h"

unsigned short data[15];

void lcd_write_cmd_data( unsigned short Cmd, short Len, unsigned short *Data )
{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b082      	sub	sp, #8
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	4603      	mov	r3, r0
 8011df4:	603a      	str	r2, [r7, #0]
 8011df6:	80fb      	strh	r3, [r7, #6]
 8011df8:	460b      	mov	r3, r1
 8011dfa:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( LcdRs_GPIO_Port, LcdRs_Pin, GPIO_PIN_RESET); // low for command
 8011dfc:	2200      	movs	r2, #0
 8011dfe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011e02:	480e      	ldr	r0, [pc, #56]	; (8011e3c <lcd_write_cmd_data+0x50>)
 8011e04:	f007 fea0 	bl	8019b48 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (unsigned char*)&Cmd, 1, 1);// timeout 1 ms
 8011e08:	1db9      	adds	r1, r7, #6
 8011e0a:	2301      	movs	r3, #1
 8011e0c:	2201      	movs	r2, #1
 8011e0e:	480c      	ldr	r0, [pc, #48]	; (8011e40 <lcd_write_cmd_data+0x54>)
 8011e10:	f00a f99f 	bl	801c152 <HAL_SPI_Transmit>

	if(Len !=0)
 8011e14:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d00b      	beq.n	8011e34 <lcd_write_cmd_data+0x48>
	{
		HAL_GPIO_WritePin( LcdRs_GPIO_Port, LcdRs_Pin, GPIO_PIN_SET);  //high for data
 8011e1c:	2201      	movs	r2, #1
 8011e1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011e22:	4806      	ldr	r0, [pc, #24]	; (8011e3c <lcd_write_cmd_data+0x50>)
 8011e24:	f007 fe90 	bl	8019b48 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, (unsigned char*)Data, Len, 1);// timeout 1 ms
 8011e28:	88ba      	ldrh	r2, [r7, #4]
 8011e2a:	2301      	movs	r3, #1
 8011e2c:	6839      	ldr	r1, [r7, #0]
 8011e2e:	4804      	ldr	r0, [pc, #16]	; (8011e40 <lcd_write_cmd_data+0x54>)
 8011e30:	f00a f98f 	bl	801c152 <HAL_SPI_Transmit>
	}
}
 8011e34:	bf00      	nop
 8011e36:	3708      	adds	r7, #8
 8011e38:	46bd      	mov	sp, r7
 8011e3a:	bd80      	pop	{r7, pc}
 8011e3c:	40020800 	.word	0x40020800
 8011e40:	20006a20 	.word	0x20006a20

08011e44 <Init_LCD>:

// initialize the LCD
void Init_LCD(void)
{
 8011e44:	b580      	push	{r7, lr}
 8011e46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 8011e48:	2200      	movs	r2, #0
 8011e4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011e4e:	4885      	ldr	r0, [pc, #532]	; (8012064 <Init_LCD+0x220>)
 8011e50:	f007 fe7a 	bl	8019b48 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin( Dres_GPIO_Port, Dres_Pin, GPIO_PIN_SET);  //display reset
 8011e54:	2201      	movs	r2, #1
 8011e56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011e5a:	4883      	ldr	r0, [pc, #524]	; (8012068 <Init_LCD+0x224>)
 8011e5c:	f007 fe74 	bl	8019b48 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8011e60:	2001      	movs	r0, #1
 8011e62:	f006 fa93 	bl	801838c <HAL_Delay>
	HAL_GPIO_WritePin( Dres_GPIO_Port, Dres_Pin, GPIO_PIN_RESET);
 8011e66:	2200      	movs	r2, #0
 8011e68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011e6c:	487e      	ldr	r0, [pc, #504]	; (8012068 <Init_LCD+0x224>)
 8011e6e:	f007 fe6b 	bl	8019b48 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8011e72:	200a      	movs	r0, #10
 8011e74:	f006 fa8a 	bl	801838c <HAL_Delay>
	HAL_GPIO_WritePin( Dres_GPIO_Port, Dres_Pin, GPIO_PIN_SET);
 8011e78:	2201      	movs	r2, #1
 8011e7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011e7e:	487a      	ldr	r0, [pc, #488]	; (8012068 <Init_LCD+0x224>)
 8011e80:	f007 fe62 	bl	8019b48 <HAL_GPIO_WritePin>
	HAL_Delay(120);
 8011e84:	2078      	movs	r0, #120	; 0x78
 8011e86:	f006 fa81 	bl	801838c <HAL_Delay>

	data[0]=0;
 8011e8a:	4b78      	ldr	r3, [pc, #480]	; (801206c <Init_LCD+0x228>)
 8011e8c:	2200      	movs	r2, #0
 8011e8e:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0xb0, 1, data);  //set interface
 8011e90:	4a76      	ldr	r2, [pc, #472]	; (801206c <Init_LCD+0x228>)
 8011e92:	2101      	movs	r1, #1
 8011e94:	20b0      	movs	r0, #176	; 0xb0
 8011e96:	f7ff ffa9 	bl	8011dec <lcd_write_cmd_data>
	lcd_write_cmd_data(0x11, 0, data);  //sleep
 8011e9a:	4a74      	ldr	r2, [pc, #464]	; (801206c <Init_LCD+0x228>)
 8011e9c:	2100      	movs	r1, #0
 8011e9e:	2011      	movs	r0, #17
 8011ea0:	f7ff ffa4 	bl	8011dec <lcd_write_cmd_data>
	HAL_Delay(120);
 8011ea4:	2078      	movs	r0, #120	; 0x78
 8011ea6:	f006 fa71 	bl	801838c <HAL_Delay>
	data[0]=0x55;
 8011eaa:	4b70      	ldr	r3, [pc, #448]	; (801206c <Init_LCD+0x228>)
 8011eac:	2255      	movs	r2, #85	; 0x55
 8011eae:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0x3A, 1, data);  //set pixels to 16 bit
 8011eb0:	4a6e      	ldr	r2, [pc, #440]	; (801206c <Init_LCD+0x228>)
 8011eb2:	2101      	movs	r1, #1
 8011eb4:	203a      	movs	r0, #58	; 0x3a
 8011eb6:	f7ff ff99 	bl	8011dec <lcd_write_cmd_data>
	data[0]=data[1]=9;
 8011eba:	4b6c      	ldr	r3, [pc, #432]	; (801206c <Init_LCD+0x228>)
 8011ebc:	2209      	movs	r2, #9
 8011ebe:	805a      	strh	r2, [r3, #2]
 8011ec0:	4b6a      	ldr	r3, [pc, #424]	; (801206c <Init_LCD+0x228>)
 8011ec2:	885a      	ldrh	r2, [r3, #2]
 8011ec4:	4b69      	ldr	r3, [pc, #420]	; (801206c <Init_LCD+0x228>)
 8011ec6:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0xc0, 2, data);  //set power
 8011ec8:	4a68      	ldr	r2, [pc, #416]	; (801206c <Init_LCD+0x228>)
 8011eca:	2102      	movs	r1, #2
 8011ecc:	20c0      	movs	r0, #192	; 0xc0
 8011ece:	f7ff ff8d 	bl	8011dec <lcd_write_cmd_data>
	data[0]= 0x41;
 8011ed2:	4b66      	ldr	r3, [pc, #408]	; (801206c <Init_LCD+0x228>)
 8011ed4:	2241      	movs	r2, #65	; 0x41
 8011ed6:	801a      	strh	r2, [r3, #0]
	data[1]=0;
 8011ed8:	4b64      	ldr	r3, [pc, #400]	; (801206c <Init_LCD+0x228>)
 8011eda:	2200      	movs	r2, #0
 8011edc:	805a      	strh	r2, [r3, #2]
	lcd_write_cmd_data(0xc1, 2, data);  //set power
 8011ede:	4a63      	ldr	r2, [pc, #396]	; (801206c <Init_LCD+0x228>)
 8011ee0:	2102      	movs	r1, #2
 8011ee2:	20c1      	movs	r0, #193	; 0xc1
 8011ee4:	f7ff ff82 	bl	8011dec <lcd_write_cmd_data>
	data[0]= 0x33;
 8011ee8:	4b60      	ldr	r3, [pc, #384]	; (801206c <Init_LCD+0x228>)
 8011eea:	2233      	movs	r2, #51	; 0x33
 8011eec:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0xc2, 1, data);  //set power
 8011eee:	4a5f      	ldr	r2, [pc, #380]	; (801206c <Init_LCD+0x228>)
 8011ef0:	2101      	movs	r1, #1
 8011ef2:	20c2      	movs	r0, #194	; 0xc2
 8011ef4:	f7ff ff7a 	bl	8011dec <lcd_write_cmd_data>
	data[0]=data[1]=0;
 8011ef8:	4b5c      	ldr	r3, [pc, #368]	; (801206c <Init_LCD+0x228>)
 8011efa:	2200      	movs	r2, #0
 8011efc:	805a      	strh	r2, [r3, #2]
 8011efe:	4b5b      	ldr	r3, [pc, #364]	; (801206c <Init_LCD+0x228>)
 8011f00:	885a      	ldrh	r2, [r3, #2]
 8011f02:	4b5a      	ldr	r3, [pc, #360]	; (801206c <Init_LCD+0x228>)
 8011f04:	801a      	strh	r2, [r3, #0]
	data[2]=data[3]=0;  //#3 may be 0x36
 8011f06:	4b59      	ldr	r3, [pc, #356]	; (801206c <Init_LCD+0x228>)
 8011f08:	2200      	movs	r2, #0
 8011f0a:	80da      	strh	r2, [r3, #6]
 8011f0c:	4b57      	ldr	r3, [pc, #348]	; (801206c <Init_LCD+0x228>)
 8011f0e:	88da      	ldrh	r2, [r3, #6]
 8011f10:	4b56      	ldr	r3, [pc, #344]	; (801206c <Init_LCD+0x228>)
 8011f12:	809a      	strh	r2, [r3, #4]
	lcd_write_cmd_data(0xc5, 4, data);  //Vcom control
 8011f14:	4a55      	ldr	r2, [pc, #340]	; (801206c <Init_LCD+0x228>)
 8011f16:	2104      	movs	r1, #4
 8011f18:	20c5      	movs	r0, #197	; 0xc5
 8011f1a:	f7ff ff67 	bl	8011dec <lcd_write_cmd_data>

	data[0]=  0;
 8011f1e:	4b53      	ldr	r3, [pc, #332]	; (801206c <Init_LCD+0x228>)
 8011f20:	2200      	movs	r2, #0
 8011f22:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0x36, 1, data);  //madctl
 8011f24:	4a51      	ldr	r2, [pc, #324]	; (801206c <Init_LCD+0x228>)
 8011f26:	2101      	movs	r1, #1
 8011f28:	2036      	movs	r0, #54	; 0x36
 8011f2a:	f7ff ff5f 	bl	8011dec <lcd_write_cmd_data>
	 Digital Gamma Control 1
	-1, 0xE2, 0x0F, 0x32, 0x2E, 0x0B, 0x0D, 0x05, 0x47, 0x75,
	          0x37, 0x06, 0x10, 0x03, 0x24, 0x20, 0x00,
    SPI_TRANSFER(0xE0 Positive Gamma Control, 0x00, 0x2C, 0x2C, 0x0B, 0x0C, 0x04, 0x4C, 0x64, 0x36, 0x03, 0x0E, 0x01, 0x10, 0x01, 0x00);
    SPI_TRANSFER(0xE1 Negative Gamma Control, 0x0F, 0x37, 0x37, 0x0C, 0x0F, 0x05, 0x50, 0x32, 0x36, 0x04, 0x0B, 0x00, 0x19, 0x14, 0x0F); */
	data[0]=data[14]=  0;
 8011f2e:	4b4f      	ldr	r3, [pc, #316]	; (801206c <Init_LCD+0x228>)
 8011f30:	2200      	movs	r2, #0
 8011f32:	839a      	strh	r2, [r3, #28]
 8011f34:	4b4d      	ldr	r3, [pc, #308]	; (801206c <Init_LCD+0x228>)
 8011f36:	8b9a      	ldrh	r2, [r3, #28]
 8011f38:	4b4c      	ldr	r3, [pc, #304]	; (801206c <Init_LCD+0x228>)
 8011f3a:	801a      	strh	r2, [r3, #0]
	data[1]=data[2]=   0x2C;
 8011f3c:	4b4b      	ldr	r3, [pc, #300]	; (801206c <Init_LCD+0x228>)
 8011f3e:	222c      	movs	r2, #44	; 0x2c
 8011f40:	809a      	strh	r2, [r3, #4]
 8011f42:	4b4a      	ldr	r3, [pc, #296]	; (801206c <Init_LCD+0x228>)
 8011f44:	889a      	ldrh	r2, [r3, #4]
 8011f46:	4b49      	ldr	r3, [pc, #292]	; (801206c <Init_LCD+0x228>)
 8011f48:	805a      	strh	r2, [r3, #2]
	data[3]=  0x0B;
 8011f4a:	4b48      	ldr	r3, [pc, #288]	; (801206c <Init_LCD+0x228>)
 8011f4c:	220b      	movs	r2, #11
 8011f4e:	80da      	strh	r2, [r3, #6]
	data[4]=  0x0C;
 8011f50:	4b46      	ldr	r3, [pc, #280]	; (801206c <Init_LCD+0x228>)
 8011f52:	220c      	movs	r2, #12
 8011f54:	811a      	strh	r2, [r3, #8]
	data[5]=  0x04;
 8011f56:	4b45      	ldr	r3, [pc, #276]	; (801206c <Init_LCD+0x228>)
 8011f58:	2204      	movs	r2, #4
 8011f5a:	815a      	strh	r2, [r3, #10]
	data[6]=  0x4C;
 8011f5c:	4b43      	ldr	r3, [pc, #268]	; (801206c <Init_LCD+0x228>)
 8011f5e:	224c      	movs	r2, #76	; 0x4c
 8011f60:	819a      	strh	r2, [r3, #12]
	data[7]=  0x64;
 8011f62:	4b42      	ldr	r3, [pc, #264]	; (801206c <Init_LCD+0x228>)
 8011f64:	2264      	movs	r2, #100	; 0x64
 8011f66:	81da      	strh	r2, [r3, #14]
	data[8]=  0x36;
 8011f68:	4b40      	ldr	r3, [pc, #256]	; (801206c <Init_LCD+0x228>)
 8011f6a:	2236      	movs	r2, #54	; 0x36
 8011f6c:	821a      	strh	r2, [r3, #16]
	data[9]=  0x03;
 8011f6e:	4b3f      	ldr	r3, [pc, #252]	; (801206c <Init_LCD+0x228>)
 8011f70:	2203      	movs	r2, #3
 8011f72:	825a      	strh	r2, [r3, #18]
	data[10]= 0x0E;
 8011f74:	4b3d      	ldr	r3, [pc, #244]	; (801206c <Init_LCD+0x228>)
 8011f76:	220e      	movs	r2, #14
 8011f78:	829a      	strh	r2, [r3, #20]
	data[11]=data[13]= 0x2C;
 8011f7a:	4b3c      	ldr	r3, [pc, #240]	; (801206c <Init_LCD+0x228>)
 8011f7c:	222c      	movs	r2, #44	; 0x2c
 8011f7e:	835a      	strh	r2, [r3, #26]
 8011f80:	4b3a      	ldr	r3, [pc, #232]	; (801206c <Init_LCD+0x228>)
 8011f82:	8b5a      	ldrh	r2, [r3, #26]
 8011f84:	4b39      	ldr	r3, [pc, #228]	; (801206c <Init_LCD+0x228>)
 8011f86:	82da      	strh	r2, [r3, #22]
	data[12]= 0x10;
 8011f88:	4b38      	ldr	r3, [pc, #224]	; (801206c <Init_LCD+0x228>)
 8011f8a:	2210      	movs	r2, #16
 8011f8c:	831a      	strh	r2, [r3, #24]
	lcd_write_cmd_data(0xe0, 15, data);  //positive gamma control
 8011f8e:	4a37      	ldr	r2, [pc, #220]	; (801206c <Init_LCD+0x228>)
 8011f90:	210f      	movs	r1, #15
 8011f92:	20e0      	movs	r0, #224	; 0xe0
 8011f94:	f7ff ff2a 	bl	8011dec <lcd_write_cmd_data>

	data[0]=data[4]= data[14]= 0x0F;
 8011f98:	4b34      	ldr	r3, [pc, #208]	; (801206c <Init_LCD+0x228>)
 8011f9a:	220f      	movs	r2, #15
 8011f9c:	839a      	strh	r2, [r3, #28]
 8011f9e:	4b33      	ldr	r3, [pc, #204]	; (801206c <Init_LCD+0x228>)
 8011fa0:	8b9a      	ldrh	r2, [r3, #28]
 8011fa2:	4b32      	ldr	r3, [pc, #200]	; (801206c <Init_LCD+0x228>)
 8011fa4:	811a      	strh	r2, [r3, #8]
 8011fa6:	4b31      	ldr	r3, [pc, #196]	; (801206c <Init_LCD+0x228>)
 8011fa8:	891a      	ldrh	r2, [r3, #8]
 8011faa:	4b30      	ldr	r3, [pc, #192]	; (801206c <Init_LCD+0x228>)
 8011fac:	801a      	strh	r2, [r3, #0]
	data[1]=data[2]= 0x37;
 8011fae:	4b2f      	ldr	r3, [pc, #188]	; (801206c <Init_LCD+0x228>)
 8011fb0:	2237      	movs	r2, #55	; 0x37
 8011fb2:	809a      	strh	r2, [r3, #4]
 8011fb4:	4b2d      	ldr	r3, [pc, #180]	; (801206c <Init_LCD+0x228>)
 8011fb6:	889a      	ldrh	r2, [r3, #4]
 8011fb8:	4b2c      	ldr	r3, [pc, #176]	; (801206c <Init_LCD+0x228>)
 8011fba:	805a      	strh	r2, [r3, #2]
	data[3]=  0x0C;
 8011fbc:	4b2b      	ldr	r3, [pc, #172]	; (801206c <Init_LCD+0x228>)
 8011fbe:	220c      	movs	r2, #12
 8011fc0:	80da      	strh	r2, [r3, #6]
	data[5]=  0x05;
 8011fc2:	4b2a      	ldr	r3, [pc, #168]	; (801206c <Init_LCD+0x228>)
 8011fc4:	2205      	movs	r2, #5
 8011fc6:	815a      	strh	r2, [r3, #10]
	data[6]=  0x50;
 8011fc8:	4b28      	ldr	r3, [pc, #160]	; (801206c <Init_LCD+0x228>)
 8011fca:	2250      	movs	r2, #80	; 0x50
 8011fcc:	819a      	strh	r2, [r3, #12]
	data[7]=  0x32;
 8011fce:	4b27      	ldr	r3, [pc, #156]	; (801206c <Init_LCD+0x228>)
 8011fd0:	2232      	movs	r2, #50	; 0x32
 8011fd2:	81da      	strh	r2, [r3, #14]
	data[8]=  0x36;
 8011fd4:	4b25      	ldr	r3, [pc, #148]	; (801206c <Init_LCD+0x228>)
 8011fd6:	2236      	movs	r2, #54	; 0x36
 8011fd8:	821a      	strh	r2, [r3, #16]
	data[9]=  0x04;
 8011fda:	4b24      	ldr	r3, [pc, #144]	; (801206c <Init_LCD+0x228>)
 8011fdc:	2204      	movs	r2, #4
 8011fde:	825a      	strh	r2, [r3, #18]
	data[10]= 0x0B;
 8011fe0:	4b22      	ldr	r3, [pc, #136]	; (801206c <Init_LCD+0x228>)
 8011fe2:	220b      	movs	r2, #11
 8011fe4:	829a      	strh	r2, [r3, #20]
	data[11]= 0;
 8011fe6:	4b21      	ldr	r3, [pc, #132]	; (801206c <Init_LCD+0x228>)
 8011fe8:	2200      	movs	r2, #0
 8011fea:	82da      	strh	r2, [r3, #22]
	data[12]= 0x19;
 8011fec:	4b1f      	ldr	r3, [pc, #124]	; (801206c <Init_LCD+0x228>)
 8011fee:	2219      	movs	r2, #25
 8011ff0:	831a      	strh	r2, [r3, #24]
	data[13]= 0x14;
 8011ff2:	4b1e      	ldr	r3, [pc, #120]	; (801206c <Init_LCD+0x228>)
 8011ff4:	2214      	movs	r2, #20
 8011ff6:	835a      	strh	r2, [r3, #26]
	lcd_write_cmd_data(0xe1, 15, data);  //Negitive gamma control
 8011ff8:	4a1c      	ldr	r2, [pc, #112]	; (801206c <Init_LCD+0x228>)
 8011ffa:	210f      	movs	r1, #15
 8011ffc:	20e1      	movs	r0, #225	; 0xe1
 8011ffe:	f7ff fef5 	bl	8011dec <lcd_write_cmd_data>

//	SPI_TRANSFER(0xB6/*Display Function Control*/, 0, /*ISC=2*/2, /*Display Height h=*/59); // Actual display height = (h+1)*8 so (59+1)*8=480
	data[0]=0;
 8012002:	4b1a      	ldr	r3, [pc, #104]	; (801206c <Init_LCD+0x228>)
 8012004:	2200      	movs	r2, #0
 8012006:	801a      	strh	r2, [r3, #0]
	data[1]=2;
 8012008:	4b18      	ldr	r3, [pc, #96]	; (801206c <Init_LCD+0x228>)
 801200a:	2202      	movs	r2, #2
 801200c:	805a      	strh	r2, [r3, #2]
	data[2]=59;
 801200e:	4b17      	ldr	r3, [pc, #92]	; (801206c <Init_LCD+0x228>)
 8012010:	223b      	movs	r2, #59	; 0x3b
 8012012:	809a      	strh	r2, [r3, #4]
	lcd_write_cmd_data(0xb6, 3, data);  //display function control
 8012014:	4a15      	ldr	r2, [pc, #84]	; (801206c <Init_LCD+0x228>)
 8012016:	2103      	movs	r1, #3
 8012018:	20b6      	movs	r0, #182	; 0xb6
 801201a:	f7ff fee7 	bl	8011dec <lcd_write_cmd_data>

	lcd_write_cmd_data(0x11, 0, data);  //sleep
 801201e:	4a13      	ldr	r2, [pc, #76]	; (801206c <Init_LCD+0x228>)
 8012020:	2100      	movs	r1, #0
 8012022:	2011      	movs	r0, #17
 8012024:	f7ff fee2 	bl	8011dec <lcd_write_cmd_data>
	HAL_Delay(120);
 8012028:	2078      	movs	r0, #120	; 0x78
 801202a:	f006 f9af 	bl	801838c <HAL_Delay>
	lcd_write_cmd_data(0x29, 0, data);  //display on
 801202e:	4a0f      	ldr	r2, [pc, #60]	; (801206c <Init_LCD+0x228>)
 8012030:	2100      	movs	r1, #0
 8012032:	2029      	movs	r0, #41	; 0x29
 8012034:	f7ff feda 	bl	8011dec <lcd_write_cmd_data>
	lcd_write_cmd_data(0x38, 0, data);  //idle off
 8012038:	4a0c      	ldr	r2, [pc, #48]	; (801206c <Init_LCD+0x228>)
 801203a:	2100      	movs	r1, #0
 801203c:	2038      	movs	r0, #56	; 0x38
 801203e:	f7ff fed5 	bl	8011dec <lcd_write_cmd_data>
	lcd_write_cmd_data(0x13, 0, data);  //Normal Display Mode ON
 8012042:	4a0a      	ldr	r2, [pc, #40]	; (801206c <Init_LCD+0x228>)
 8012044:	2100      	movs	r1, #0
 8012046:	2013      	movs	r0, #19
 8012048:	f7ff fed0 	bl	8011dec <lcd_write_cmd_data>

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);  //disable lcd controller
 801204c:	2201      	movs	r2, #1
 801204e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012052:	4804      	ldr	r0, [pc, #16]	; (8012064 <Init_LCD+0x220>)
 8012054:	f007 fd78 	bl	8019b48 <HAL_GPIO_WritePin>

	LCD_ClrScrn(0);  //clear screen to black
 8012058:	2000      	movs	r0, #0
 801205a:	f000 f809 	bl	8012070 <LCD_ClrScrn>
}
 801205e:	bf00      	nop
 8012060:	bd80      	pop	{r7, pc}
 8012062:	bf00      	nop
 8012064:	40020800 	.word	0x40020800
 8012068:	40020400 	.word	0x40020400
 801206c:	2000281c 	.word	0x2000281c

08012070 <LCD_ClrScrn>:

void LCD_ClrScrn(unsigned short Color)
{
 8012070:	b580      	push	{r7, lr}
 8012072:	b084      	sub	sp, #16
 8012074:	af00      	add	r7, sp, #0
 8012076:	4603      	mov	r3, r0
 8012078:	80fb      	strh	r3, [r7, #6]
short y;
unsigned short *ptr;

ptr = malloc(320*2);
 801207a:	f44f 7020 	mov.w	r0, #640	; 0x280
 801207e:	f010 fd9b 	bl	8022bb8 <malloc>
 8012082:	4603      	mov	r3, r0
 8012084:	60bb      	str	r3, [r7, #8]
HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 8012086:	2200      	movs	r2, #0
 8012088:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801208c:	483d      	ldr	r0, [pc, #244]	; (8012184 <LCD_ClrScrn+0x114>)
 801208e:	f007 fd5b 	bl	8019b48 <HAL_GPIO_WritePin>

for(y=0; y<480; ++y )
 8012092:	2300      	movs	r3, #0
 8012094:	81fb      	strh	r3, [r7, #14]
 8012096:	e03c      	b.n	8012112 <LCD_ClrScrn+0xa2>
{
	data[0]=data[1]= 0;
 8012098:	4b3b      	ldr	r3, [pc, #236]	; (8012188 <LCD_ClrScrn+0x118>)
 801209a:	2200      	movs	r2, #0
 801209c:	805a      	strh	r2, [r3, #2]
 801209e:	4b3a      	ldr	r3, [pc, #232]	; (8012188 <LCD_ClrScrn+0x118>)
 80120a0:	885a      	ldrh	r2, [r3, #2]
 80120a2:	4b39      	ldr	r3, [pc, #228]	; (8012188 <LCD_ClrScrn+0x118>)
 80120a4:	801a      	strh	r2, [r3, #0]
	data[2]= 319>>8;
 80120a6:	4b38      	ldr	r3, [pc, #224]	; (8012188 <LCD_ClrScrn+0x118>)
 80120a8:	2201      	movs	r2, #1
 80120aa:	809a      	strh	r2, [r3, #4]
	data[3]= 319 & 0xFF;
 80120ac:	4b36      	ldr	r3, [pc, #216]	; (8012188 <LCD_ClrScrn+0x118>)
 80120ae:	223f      	movs	r2, #63	; 0x3f
 80120b0:	80da      	strh	r2, [r3, #6]
	lcd_write_cmd_data(0x2A, 4, data);  //set x
 80120b2:	4a35      	ldr	r2, [pc, #212]	; (8012188 <LCD_ClrScrn+0x118>)
 80120b4:	2104      	movs	r1, #4
 80120b6:	202a      	movs	r0, #42	; 0x2a
 80120b8:	f7ff fe98 	bl	8011dec <lcd_write_cmd_data>
	data[0]= y>>8;
 80120bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80120c0:	121b      	asrs	r3, r3, #8
 80120c2:	b21b      	sxth	r3, r3
 80120c4:	b29a      	uxth	r2, r3
 80120c6:	4b30      	ldr	r3, [pc, #192]	; (8012188 <LCD_ClrScrn+0x118>)
 80120c8:	801a      	strh	r2, [r3, #0]
	data[1]= y & 0xFF;
 80120ca:	89fb      	ldrh	r3, [r7, #14]
 80120cc:	b2db      	uxtb	r3, r3
 80120ce:	b29a      	uxth	r2, r3
 80120d0:	4b2d      	ldr	r3, [pc, #180]	; (8012188 <LCD_ClrScrn+0x118>)
 80120d2:	805a      	strh	r2, [r3, #2]
	data[2]= 479>>8;
 80120d4:	4b2c      	ldr	r3, [pc, #176]	; (8012188 <LCD_ClrScrn+0x118>)
 80120d6:	2201      	movs	r2, #1
 80120d8:	809a      	strh	r2, [r3, #4]
	data[3]= 479 & 0xFF;
 80120da:	4b2b      	ldr	r3, [pc, #172]	; (8012188 <LCD_ClrScrn+0x118>)
 80120dc:	22df      	movs	r2, #223	; 0xdf
 80120de:	80da      	strh	r2, [r3, #6]
	lcd_write_cmd_data(0x2B, 4, data);  //set y
 80120e0:	4a29      	ldr	r2, [pc, #164]	; (8012188 <LCD_ClrScrn+0x118>)
 80120e2:	2104      	movs	r1, #4
 80120e4:	202b      	movs	r0, #43	; 0x2b
 80120e6:	f7ff fe81 	bl	8011dec <lcd_write_cmd_data>

	if(ptr != NULL)
 80120ea:	68bb      	ldr	r3, [r7, #8]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d016      	beq.n	801211e <LCD_ClrScrn+0xae>
	{
		memset16(ptr, Color, 320);
 80120f0:	88fb      	ldrh	r3, [r7, #6]
 80120f2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80120f6:	4619      	mov	r1, r3
 80120f8:	68b8      	ldr	r0, [r7, #8]
 80120fa:	f7ff fc67 	bl	80119cc <memset16>
		lcd_write_cmd_data(0x2C, 320, ptr);  //write out pixels
 80120fe:	68ba      	ldr	r2, [r7, #8]
 8012100:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012104:	202c      	movs	r0, #44	; 0x2c
 8012106:	f7ff fe71 	bl	8011dec <lcd_write_cmd_data>
for(y=0; y<480; ++y )
 801210a:	89fb      	ldrh	r3, [r7, #14]
 801210c:	3301      	adds	r3, #1
 801210e:	b29b      	uxth	r3, r3
 8012110:	81fb      	strh	r3, [r7, #14]
 8012112:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012116:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 801211a:	dbbd      	blt.n	8012098 <LCD_ClrScrn+0x28>
 801211c:	e000      	b.n	8012120 <LCD_ClrScrn+0xb0>
	}
	else
		break; //bail out
 801211e:	bf00      	nop
}

free(ptr);
 8012120:	68b8      	ldr	r0, [r7, #8]
 8012122:	f010 fd51 	bl	8022bc8 <free>

data[0]=data[1]= 0;
 8012126:	4b18      	ldr	r3, [pc, #96]	; (8012188 <LCD_ClrScrn+0x118>)
 8012128:	2200      	movs	r2, #0
 801212a:	805a      	strh	r2, [r3, #2]
 801212c:	4b16      	ldr	r3, [pc, #88]	; (8012188 <LCD_ClrScrn+0x118>)
 801212e:	885a      	ldrh	r2, [r3, #2]
 8012130:	4b15      	ldr	r3, [pc, #84]	; (8012188 <LCD_ClrScrn+0x118>)
 8012132:	801a      	strh	r2, [r3, #0]
data[2]= 319>>8;
 8012134:	4b14      	ldr	r3, [pc, #80]	; (8012188 <LCD_ClrScrn+0x118>)
 8012136:	2201      	movs	r2, #1
 8012138:	809a      	strh	r2, [r3, #4]
data[3]= 319 & 0xFF;
 801213a:	4b13      	ldr	r3, [pc, #76]	; (8012188 <LCD_ClrScrn+0x118>)
 801213c:	223f      	movs	r2, #63	; 0x3f
 801213e:	80da      	strh	r2, [r3, #6]
lcd_write_cmd_data(0x2A, 4, data);  //set x
 8012140:	4a11      	ldr	r2, [pc, #68]	; (8012188 <LCD_ClrScrn+0x118>)
 8012142:	2104      	movs	r1, #4
 8012144:	202a      	movs	r0, #42	; 0x2a
 8012146:	f7ff fe51 	bl	8011dec <lcd_write_cmd_data>
data[0]=data[1]= 0;
 801214a:	4b0f      	ldr	r3, [pc, #60]	; (8012188 <LCD_ClrScrn+0x118>)
 801214c:	2200      	movs	r2, #0
 801214e:	805a      	strh	r2, [r3, #2]
 8012150:	4b0d      	ldr	r3, [pc, #52]	; (8012188 <LCD_ClrScrn+0x118>)
 8012152:	885a      	ldrh	r2, [r3, #2]
 8012154:	4b0c      	ldr	r3, [pc, #48]	; (8012188 <LCD_ClrScrn+0x118>)
 8012156:	801a      	strh	r2, [r3, #0]
data[2]= 479>>8;
 8012158:	4b0b      	ldr	r3, [pc, #44]	; (8012188 <LCD_ClrScrn+0x118>)
 801215a:	2201      	movs	r2, #1
 801215c:	809a      	strh	r2, [r3, #4]
data[3]= 479 & 0xFF;
 801215e:	4b0a      	ldr	r3, [pc, #40]	; (8012188 <LCD_ClrScrn+0x118>)
 8012160:	22df      	movs	r2, #223	; 0xdf
 8012162:	80da      	strh	r2, [r3, #6]
lcd_write_cmd_data(0x2B, 4, data);  //set y
 8012164:	4a08      	ldr	r2, [pc, #32]	; (8012188 <LCD_ClrScrn+0x118>)
 8012166:	2104      	movs	r1, #4
 8012168:	202b      	movs	r0, #43	; 0x2b
 801216a:	f7ff fe3f 	bl	8011dec <lcd_write_cmd_data>

HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);  //disable lcd controller
 801216e:	2201      	movs	r2, #1
 8012170:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012174:	4803      	ldr	r0, [pc, #12]	; (8012184 <LCD_ClrScrn+0x114>)
 8012176:	f007 fce7 	bl	8019b48 <HAL_GPIO_WritePin>

}
 801217a:	bf00      	nop
 801217c:	3710      	adds	r7, #16
 801217e:	46bd      	mov	sp, r7
 8012180:	bd80      	pop	{r7, pc}
 8012182:	bf00      	nop
 8012184:	40020800 	.word	0x40020800
 8012188:	2000281c 	.word	0x2000281c

0801218c <LCD_Set_Posi>:

void LCD_Set_Posi(short Sx, short Sy)
{
 801218c:	b580      	push	{r7, lr}
 801218e:	b082      	sub	sp, #8
 8012190:	af00      	add	r7, sp, #0
 8012192:	4603      	mov	r3, r0
 8012194:	460a      	mov	r2, r1
 8012196:	80fb      	strh	r3, [r7, #6]
 8012198:	4613      	mov	r3, r2
 801219a:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 801219c:	2200      	movs	r2, #0
 801219e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80121a2:	481f      	ldr	r0, [pc, #124]	; (8012220 <LCD_Set_Posi+0x94>)
 80121a4:	f007 fcd0 	bl	8019b48 <HAL_GPIO_WritePin>

	data[0]= data[2]= Sx>>8;
 80121a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80121ac:	121b      	asrs	r3, r3, #8
 80121ae:	b21b      	sxth	r3, r3
 80121b0:	b29a      	uxth	r2, r3
 80121b2:	4b1c      	ldr	r3, [pc, #112]	; (8012224 <LCD_Set_Posi+0x98>)
 80121b4:	809a      	strh	r2, [r3, #4]
 80121b6:	4b1b      	ldr	r3, [pc, #108]	; (8012224 <LCD_Set_Posi+0x98>)
 80121b8:	889a      	ldrh	r2, [r3, #4]
 80121ba:	4b1a      	ldr	r3, [pc, #104]	; (8012224 <LCD_Set_Posi+0x98>)
 80121bc:	801a      	strh	r2, [r3, #0]
	data[1]= data[3]= Sx & 0xFF;
 80121be:	88fb      	ldrh	r3, [r7, #6]
 80121c0:	b2db      	uxtb	r3, r3
 80121c2:	b29a      	uxth	r2, r3
 80121c4:	4b17      	ldr	r3, [pc, #92]	; (8012224 <LCD_Set_Posi+0x98>)
 80121c6:	80da      	strh	r2, [r3, #6]
 80121c8:	4b16      	ldr	r3, [pc, #88]	; (8012224 <LCD_Set_Posi+0x98>)
 80121ca:	88da      	ldrh	r2, [r3, #6]
 80121cc:	4b15      	ldr	r3, [pc, #84]	; (8012224 <LCD_Set_Posi+0x98>)
 80121ce:	805a      	strh	r2, [r3, #2]
	lcd_write_cmd_data(0x2A, 4, data);  //set x
 80121d0:	4a14      	ldr	r2, [pc, #80]	; (8012224 <LCD_Set_Posi+0x98>)
 80121d2:	2104      	movs	r1, #4
 80121d4:	202a      	movs	r0, #42	; 0x2a
 80121d6:	f7ff fe09 	bl	8011dec <lcd_write_cmd_data>
	data[0]= data[1]= Sy>>8;
 80121da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80121de:	121b      	asrs	r3, r3, #8
 80121e0:	b21b      	sxth	r3, r3
 80121e2:	b29a      	uxth	r2, r3
 80121e4:	4b0f      	ldr	r3, [pc, #60]	; (8012224 <LCD_Set_Posi+0x98>)
 80121e6:	805a      	strh	r2, [r3, #2]
 80121e8:	4b0e      	ldr	r3, [pc, #56]	; (8012224 <LCD_Set_Posi+0x98>)
 80121ea:	885a      	ldrh	r2, [r3, #2]
 80121ec:	4b0d      	ldr	r3, [pc, #52]	; (8012224 <LCD_Set_Posi+0x98>)
 80121ee:	801a      	strh	r2, [r3, #0]
	data[2]= data[3]= Sy & 0xFF;
 80121f0:	88bb      	ldrh	r3, [r7, #4]
 80121f2:	b2db      	uxtb	r3, r3
 80121f4:	b29a      	uxth	r2, r3
 80121f6:	4b0b      	ldr	r3, [pc, #44]	; (8012224 <LCD_Set_Posi+0x98>)
 80121f8:	80da      	strh	r2, [r3, #6]
 80121fa:	4b0a      	ldr	r3, [pc, #40]	; (8012224 <LCD_Set_Posi+0x98>)
 80121fc:	88da      	ldrh	r2, [r3, #6]
 80121fe:	4b09      	ldr	r3, [pc, #36]	; (8012224 <LCD_Set_Posi+0x98>)
 8012200:	809a      	strh	r2, [r3, #4]
	lcd_write_cmd_data(0x2B, 4, data);  //set y
 8012202:	4a08      	ldr	r2, [pc, #32]	; (8012224 <LCD_Set_Posi+0x98>)
 8012204:	2104      	movs	r1, #4
 8012206:	202b      	movs	r0, #43	; 0x2b
 8012208:	f7ff fdf0 	bl	8011dec <lcd_write_cmd_data>

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);    //disable lcd controller
 801220c:	2201      	movs	r2, #1
 801220e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012212:	4803      	ldr	r0, [pc, #12]	; (8012220 <LCD_Set_Posi+0x94>)
 8012214:	f007 fc98 	bl	8019b48 <HAL_GPIO_WritePin>
}
 8012218:	bf00      	nop
 801221a:	3708      	adds	r7, #8
 801221c:	46bd      	mov	sp, r7
 801221e:	bd80      	pop	{r7, pc}
 8012220:	40020800 	.word	0x40020800
 8012224:	2000281c 	.word	0x2000281c

08012228 <LCD_Set_Pixel>:

void LCD_Set_Pixel(unsigned short Color)
{
 8012228:	b580      	push	{r7, lr}
 801222a:	b082      	sub	sp, #8
 801222c:	af00      	add	r7, sp, #0
 801222e:	4603      	mov	r3, r0
 8012230:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 8012232:	2200      	movs	r2, #0
 8012234:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012238:	480d      	ldr	r0, [pc, #52]	; (8012270 <LCD_Set_Pixel+0x48>)
 801223a:	f007 fc85 	bl	8019b48 <HAL_GPIO_WritePin>

	data[0]= Color>>8;
 801223e:	88fb      	ldrh	r3, [r7, #6]
 8012240:	0a1b      	lsrs	r3, r3, #8
 8012242:	b29a      	uxth	r2, r3
 8012244:	4b0b      	ldr	r3, [pc, #44]	; (8012274 <LCD_Set_Pixel+0x4c>)
 8012246:	801a      	strh	r2, [r3, #0]
	data[1]= Color & 0xFF;
 8012248:	88fb      	ldrh	r3, [r7, #6]
 801224a:	b2db      	uxtb	r3, r3
 801224c:	b29a      	uxth	r2, r3
 801224e:	4b09      	ldr	r3, [pc, #36]	; (8012274 <LCD_Set_Pixel+0x4c>)
 8012250:	805a      	strh	r2, [r3, #2]
	lcd_write_cmd_data(0x2C, 2, data);  //set pixel
 8012252:	4a08      	ldr	r2, [pc, #32]	; (8012274 <LCD_Set_Pixel+0x4c>)
 8012254:	2102      	movs	r1, #2
 8012256:	202c      	movs	r0, #44	; 0x2c
 8012258:	f7ff fdc8 	bl	8011dec <lcd_write_cmd_data>
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);    //disable lcd controller
 801225c:	2201      	movs	r2, #1
 801225e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012262:	4803      	ldr	r0, [pc, #12]	; (8012270 <LCD_Set_Pixel+0x48>)
 8012264:	f007 fc70 	bl	8019b48 <HAL_GPIO_WritePin>
}
 8012268:	bf00      	nop
 801226a:	3708      	adds	r7, #8
 801226c:	46bd      	mov	sp, r7
 801226e:	bd80      	pop	{r7, pc}
 8012270:	40020800 	.word	0x40020800
 8012274:	2000281c 	.word	0x2000281c

08012278 <LCD_Get_Pixel>:

unsigned short LCD_Get_Pixel(void)
{
 8012278:	b580      	push	{r7, lr}
 801227a:	b082      	sub	sp, #8
 801227c:	af00      	add	r7, sp, #0
	short ret;
	unsigned short fred;

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 801227e:	2200      	movs	r2, #0
 8012280:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012284:	4814      	ldr	r0, [pc, #80]	; (80122d8 <LCD_Get_Pixel+0x60>)
 8012286:	f007 fc5f 	bl	8019b48 <HAL_GPIO_WritePin>
	lcd_write_cmd_data(0x2E, 0, data);  //read data
 801228a:	4a14      	ldr	r2, [pc, #80]	; (80122dc <LCD_Get_Pixel+0x64>)
 801228c:	2100      	movs	r1, #0
 801228e:	202e      	movs	r0, #46	; 0x2e
 8012290:	f7ff fdac 	bl	8011dec <lcd_write_cmd_data>

	ret = HAL_SPI_Receive(&hspi3, (unsigned char *)data, 2, 1);
 8012294:	2301      	movs	r3, #1
 8012296:	2202      	movs	r2, #2
 8012298:	4910      	ldr	r1, [pc, #64]	; (80122dc <LCD_Get_Pixel+0x64>)
 801229a:	4811      	ldr	r0, [pc, #68]	; (80122e0 <LCD_Get_Pixel+0x68>)
 801229c:	f00a f895 	bl	801c3ca <HAL_SPI_Receive>
 80122a0:	4603      	mov	r3, r0
 80122a2:	80fb      	strh	r3, [r7, #6]

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);    //disable lcd controller
 80122a4:	2201      	movs	r2, #1
 80122a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80122aa:	480b      	ldr	r0, [pc, #44]	; (80122d8 <LCD_Get_Pixel+0x60>)
 80122ac:	f007 fc4c 	bl	8019b48 <HAL_GPIO_WritePin>

	if( ret == HAL_OK )
 80122b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d10a      	bne.n	80122ce <LCD_Get_Pixel+0x56>
		{
		fred =data[0]<<8;
 80122b8:	4b08      	ldr	r3, [pc, #32]	; (80122dc <LCD_Get_Pixel+0x64>)
 80122ba:	881b      	ldrh	r3, [r3, #0]
 80122bc:	021b      	lsls	r3, r3, #8
 80122be:	80bb      	strh	r3, [r7, #4]
		fred |= data[1];
 80122c0:	4b06      	ldr	r3, [pc, #24]	; (80122dc <LCD_Get_Pixel+0x64>)
 80122c2:	885a      	ldrh	r2, [r3, #2]
 80122c4:	88bb      	ldrh	r3, [r7, #4]
 80122c6:	4313      	orrs	r3, r2
 80122c8:	80bb      	strh	r3, [r7, #4]
		return (fred);
 80122ca:	88bb      	ldrh	r3, [r7, #4]
 80122cc:	e000      	b.n	80122d0 <LCD_Get_Pixel+0x58>
		}
	else
		return 0;
 80122ce:	2300      	movs	r3, #0

}
 80122d0:	4618      	mov	r0, r3
 80122d2:	3708      	adds	r7, #8
 80122d4:	46bd      	mov	sp, r7
 80122d6:	bd80      	pop	{r7, pc}
 80122d8:	40020800 	.word	0x40020800
 80122dc:	2000281c 	.word	0x2000281c
 80122e0:	20006a20 	.word	0x20006a20

080122e4 <Draw_4Point>:

/*******************************************************************************
Draw_4Point:
*******************************************************************************/
void Draw_4Point(short x, short y, char Str_Cnt, char High)
{
 80122e4:	b590      	push	{r4, r7, lr}
 80122e6:	b083      	sub	sp, #12
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	4604      	mov	r4, r0
 80122ec:	4608      	mov	r0, r1
 80122ee:	4611      	mov	r1, r2
 80122f0:	461a      	mov	r2, r3
 80122f2:	4623      	mov	r3, r4
 80122f4:	80fb      	strh	r3, [r7, #6]
 80122f6:	4603      	mov	r3, r0
 80122f8:	80bb      	strh	r3, [r7, #4]
 80122fa:	460b      	mov	r3, r1
 80122fc:	70fb      	strb	r3, [r7, #3]
 80122fe:	4613      	mov	r3, r2
 8012300:	70bb      	strb	r3, [r7, #2]
  LCD_Set_Posi(x,y);
 8012302:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8012306:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801230a:	4611      	mov	r1, r2
 801230c:	4618      	mov	r0, r3
 801230e:	f7ff ff3d 	bl	801218c <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 8012312:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012316:	f7ff ff87 	bl	8012228 <LCD_Set_Pixel>
  LCD_Set_Posi(x,y+High-1);
 801231a:	78bb      	ldrb	r3, [r7, #2]
 801231c:	b29a      	uxth	r2, r3
 801231e:	88bb      	ldrh	r3, [r7, #4]
 8012320:	4413      	add	r3, r2
 8012322:	b29b      	uxth	r3, r3
 8012324:	3b01      	subs	r3, #1
 8012326:	b29b      	uxth	r3, r3
 8012328:	b21a      	sxth	r2, r3
 801232a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801232e:	4611      	mov	r1, r2
 8012330:	4618      	mov	r0, r3
 8012332:	f7ff ff2b 	bl	801218c <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 8012336:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801233a:	f7ff ff75 	bl	8012228 <LCD_Set_Pixel>
  LCD_Set_Posi(x+Str_Cnt*((High>10)? 8:6),y);
 801233e:	78fb      	ldrb	r3, [r7, #3]
 8012340:	b29b      	uxth	r3, r3
 8012342:	78ba      	ldrb	r2, [r7, #2]
 8012344:	2a0a      	cmp	r2, #10
 8012346:	d901      	bls.n	801234c <Draw_4Point+0x68>
 8012348:	2208      	movs	r2, #8
 801234a:	e000      	b.n	801234e <Draw_4Point+0x6a>
 801234c:	2206      	movs	r2, #6
 801234e:	fb12 f303 	smulbb	r3, r2, r3
 8012352:	b29a      	uxth	r2, r3
 8012354:	88fb      	ldrh	r3, [r7, #6]
 8012356:	4413      	add	r3, r2
 8012358:	b29b      	uxth	r3, r3
 801235a:	b21b      	sxth	r3, r3
 801235c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8012360:	4611      	mov	r1, r2
 8012362:	4618      	mov	r0, r3
 8012364:	f7ff ff12 	bl	801218c <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 8012368:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801236c:	f7ff ff5c 	bl	8012228 <LCD_Set_Pixel>
  LCD_Set_Posi(x+Str_Cnt*((High>10)? 8:6),y+High-1);
 8012370:	78fb      	ldrb	r3, [r7, #3]
 8012372:	b29b      	uxth	r3, r3
 8012374:	78ba      	ldrb	r2, [r7, #2]
 8012376:	2a0a      	cmp	r2, #10
 8012378:	d901      	bls.n	801237e <Draw_4Point+0x9a>
 801237a:	2208      	movs	r2, #8
 801237c:	e000      	b.n	8012380 <Draw_4Point+0x9c>
 801237e:	2206      	movs	r2, #6
 8012380:	fb12 f303 	smulbb	r3, r2, r3
 8012384:	b29a      	uxth	r2, r3
 8012386:	88fb      	ldrh	r3, [r7, #6]
 8012388:	4413      	add	r3, r2
 801238a:	b29b      	uxth	r3, r3
 801238c:	b218      	sxth	r0, r3
 801238e:	78bb      	ldrb	r3, [r7, #2]
 8012390:	b29a      	uxth	r2, r3
 8012392:	88bb      	ldrh	r3, [r7, #4]
 8012394:	4413      	add	r3, r2
 8012396:	b29b      	uxth	r3, r3
 8012398:	3b01      	subs	r3, #1
 801239a:	b29b      	uxth	r3, r3
 801239c:	b21b      	sxth	r3, r3
 801239e:	4619      	mov	r1, r3
 80123a0:	f7ff fef4 	bl	801218c <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 80123a4:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80123a8:	f7ff ff3e 	bl	8012228 <LCD_Set_Pixel>
}
 80123ac:	bf00      	nop
 80123ae:	370c      	adds	r7, #12
 80123b0:	46bd      	mov	sp, r7
 80123b2:	bd90      	pop	{r4, r7, pc}

080123b4 <Update_Title>:

/*******************************************************************************
 Update_Item:
*******************************************************************************/
void Update_Title(void)
{
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b082      	sub	sp, #8
 80123b8:	af00      	add	r7, sp, #0
  short i;

  for(i=0; i<8; i++)
 80123ba:	2300      	movs	r3, #0
 80123bc:	80fb      	strh	r3, [r7, #6]
 80123be:	e03b      	b.n	8012438 <Update_Title+0x84>
  {
    SetColor(GRY, TCOLOR[i]);
 80123c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80123c4:	4a21      	ldr	r2, [pc, #132]	; (801244c <Update_Title+0x98>)
 80123c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80123ca:	4619      	mov	r1, r3
 80123cc:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80123d0:	f7fb fc2c 	bl	800dc2c <SetColor>
    DispStr8x14(T_X-2, TITLE_Y[i], (Current == i)? INV : PRN, (char*)TSTR[i]);
 80123d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80123d8:	4a1d      	ldr	r2, [pc, #116]	; (8012450 <Update_Title+0x9c>)
 80123da:	5cd3      	ldrb	r3, [r2, r3]
 80123dc:	b219      	sxth	r1, r3
 80123de:	4b1d      	ldr	r3, [pc, #116]	; (8012454 <Update_Title+0xa0>)
 80123e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80123e4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80123e8:	429a      	cmp	r2, r3
 80123ea:	bf0c      	ite	eq
 80123ec:	2301      	moveq	r3, #1
 80123ee:	2300      	movne	r3, #0
 80123f0:	b2db      	uxtb	r3, r3
 80123f2:	4618      	mov	r0, r3
 80123f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80123f8:	009b      	lsls	r3, r3, #2
 80123fa:	4a17      	ldr	r2, [pc, #92]	; (8012458 <Update_Title+0xa4>)
 80123fc:	4413      	add	r3, r2
 80123fe:	4602      	mov	r2, r0
 8012400:	f240 102f 	movw	r0, #303	; 0x12f
 8012404:	f7fb fbba 	bl	800db7c <DispStr8x14>
    if(Current == i)
 8012408:	4b12      	ldr	r3, [pc, #72]	; (8012454 <Update_Title+0xa0>)
 801240a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801240e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012412:	429a      	cmp	r2, r3
 8012414:	d10a      	bne.n	801242c <Update_Title+0x78>
    {
        Draw_4Point(T_X-2, TITLE_Y[i], 2, Font8x14_H);
 8012416:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801241a:	4a0d      	ldr	r2, [pc, #52]	; (8012450 <Update_Title+0x9c>)
 801241c:	5cd3      	ldrb	r3, [r2, r3]
 801241e:	b219      	sxth	r1, r3
 8012420:	230e      	movs	r3, #14
 8012422:	2202      	movs	r2, #2
 8012424:	f240 102f 	movw	r0, #303	; 0x12f
 8012428:	f7ff ff5c 	bl	80122e4 <Draw_4Point>
  for(i=0; i<8; i++)
 801242c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012430:	b29b      	uxth	r3, r3
 8012432:	3301      	adds	r3, #1
 8012434:	b29b      	uxth	r3, r3
 8012436:	80fb      	strh	r3, [r7, #6]
 8012438:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801243c:	2b07      	cmp	r3, #7
 801243e:	ddbf      	ble.n	80123c0 <Update_Title+0xc>
    }
  }
}
 8012440:	bf00      	nop
 8012442:	bf00      	nop
 8012444:	3708      	adds	r7, #8
 8012446:	46bd      	mov	sp, r7
 8012448:	bd80      	pop	{r7, pc}
 801244a:	bf00      	nop
 801244c:	08001f08 	.word	0x08001f08
 8012450:	08001f38 	.word	0x08001f38
 8012454:	2000079e 	.word	0x2000079e
 8012458:	08001f18 	.word	0x08001f18

0801245c <Update_Blink>:

/*******************************************************************************
 Update_Blink:
*******************************************************************************/
void Update_Blink(void)
{
 801245c:	b590      	push	{r4, r7, lr}
 801245e:	b087      	sub	sp, #28
 8012460:	af02      	add	r7, sp, #8
  char* ptr;
  long Tmp;
  unsigned short i, Range = List[Y_RANGES].Val + 10*List[PROBEATT].Val;
 8012462:	4bbd      	ldr	r3, [pc, #756]	; (8012758 <Update_Blink+0x2fc>)
 8012464:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012468:	b29a      	uxth	r2, r3
 801246a:	4bbb      	ldr	r3, [pc, #748]	; (8012758 <Update_Blink+0x2fc>)
 801246c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8012470:	b29b      	uxth	r3, r3
 8012472:	4619      	mov	r1, r3
 8012474:	0089      	lsls	r1, r1, #2
 8012476:	440b      	add	r3, r1
 8012478:	005b      	lsls	r3, r3, #1
 801247a:	b29b      	uxth	r3, r3
 801247c:	4413      	add	r3, r2
 801247e:	81fb      	strh	r3, [r7, #14]

  i = MenuNow[Current];
 8012480:	4bb6      	ldr	r3, [pc, #728]	; (801275c <Update_Blink+0x300>)
 8012482:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012486:	461a      	mov	r2, r3
 8012488:	4bb5      	ldr	r3, [pc, #724]	; (8012760 <Update_Blink+0x304>)
 801248a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801248e:	81bb      	strh	r3, [r7, #12]
  ptr = (char*)(List[i].PTR +(List[i].Val)*6);
 8012490:	89bb      	ldrh	r3, [r7, #12]
 8012492:	4ab1      	ldr	r2, [pc, #708]	; (8012758 <Update_Blink+0x2fc>)
 8012494:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8012498:	89bb      	ldrh	r3, [r7, #12]
 801249a:	49af      	ldr	r1, [pc, #700]	; (8012758 <Update_Blink+0x2fc>)
 801249c:	00db      	lsls	r3, r3, #3
 801249e:	440b      	add	r3, r1
 80124a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80124a4:	4619      	mov	r1, r3
 80124a6:	460b      	mov	r3, r1
 80124a8:	005b      	lsls	r3, r3, #1
 80124aa:	440b      	add	r3, r1
 80124ac:	005b      	lsls	r3, r3, #1
 80124ae:	4413      	add	r3, r2
 80124b0:	60bb      	str	r3, [r7, #8]
  if(Blink == BLINK)
 80124b2:	4bac      	ldr	r3, [pc, #688]	; (8012764 <Update_Blink+0x308>)
 80124b4:	781b      	ldrb	r3, [r3, #0]
 80124b6:	b2db      	uxtb	r3, r3
 80124b8:	2b01      	cmp	r3, #1
 80124ba:	f040 86ca 	bne.w	8013252 <Update_Blink+0xdf6>
  {
    Blink = 0;
 80124be:	4ba9      	ldr	r3, [pc, #676]	; (8012764 <Update_Blink+0x308>)
 80124c0:	2200      	movs	r2, #0
 80124c2:	701a      	strb	r2, [r3, #0]
    List[MenuNow[ME]].Flg |= UPD; //
 80124c4:	4ba6      	ldr	r3, [pc, #664]	; (8012760 <Update_Blink+0x304>)
 80124c6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80124ca:	4aa3      	ldr	r2, [pc, #652]	; (8012758 <Update_Blink+0x2fc>)
 80124cc:	00db      	lsls	r3, r3, #3
 80124ce:	4413      	add	r3, r2
 80124d0:	799b      	ldrb	r3, [r3, #6]
 80124d2:	4aa3      	ldr	r2, [pc, #652]	; (8012760 <Update_Blink+0x304>)
 80124d4:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80124d8:	4610      	mov	r0, r2
 80124da:	f043 0320 	orr.w	r3, r3, #32
 80124de:	b2d9      	uxtb	r1, r3
 80124e0:	4a9d      	ldr	r2, [pc, #628]	; (8012758 <Update_Blink+0x2fc>)
 80124e2:	00c3      	lsls	r3, r0, #3
 80124e4:	4413      	add	r3, r2
 80124e6:	460a      	mov	r2, r1
 80124e8:	719a      	strb	r2, [r3, #6]
    switch(i)
 80124ea:	89bb      	ldrh	r3, [r7, #12]
 80124ec:	2b29      	cmp	r3, #41	; 0x29
 80124ee:	f200 86aa 	bhi.w	8013246 <Update_Blink+0xdea>
 80124f2:	a201      	add	r2, pc, #4	; (adr r2, 80124f8 <Update_Blink+0x9c>)
 80124f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124f8:	08012663 	.word	0x08012663
 80124fc:	08012663 	.word	0x08012663
 8012500:	08012663 	.word	0x08012663
 8012504:	080126f7 	.word	0x080126f7
 8012508:	08012729 	.word	0x08012729
 801250c:	08012729 	.word	0x08012729
 8012510:	0801285f 	.word	0x0801285f
 8012514:	080128bd 	.word	0x080128bd
 8012518:	08012915 	.word	0x08012915
 801251c:	08012947 	.word	0x08012947
 8012520:	080129b3 	.word	0x080129b3
 8012524:	080129b3 	.word	0x080129b3
 8012528:	08012b15 	.word	0x08012b15
 801252c:	08012b6f 	.word	0x08012b6f
 8012530:	08012bcd 	.word	0x08012bcd
 8012534:	08012c9d 	.word	0x08012c9d
 8012538:	08012cc7 	.word	0x08012cc7
 801253c:	08012bcd 	.word	0x08012bcd
 8012540:	08012cf5 	.word	0x08012cf5
 8012544:	08013247 	.word	0x08013247
 8012548:	08013247 	.word	0x08013247
 801254c:	08013247 	.word	0x08013247
 8012550:	08013247 	.word	0x08013247
 8012554:	08013247 	.word	0x08013247
 8012558:	08013247 	.word	0x08013247
 801255c:	08013247 	.word	0x08013247
 8012560:	08012d6d 	.word	0x08012d6d
 8012564:	08012de9 	.word	0x08012de9
 8012568:	08012e17 	.word	0x08012e17
 801256c:	080125a1 	.word	0x080125a1
 8012570:	080125a1 	.word	0x080125a1
 8012574:	080125a1 	.word	0x080125a1
 8012578:	080125a1 	.word	0x080125a1
 801257c:	080125a1 	.word	0x080125a1
 8012580:	080125a1 	.word	0x080125a1
 8012584:	080125a1 	.word	0x080125a1
 8012588:	08012e93 	.word	0x08012e93
 801258c:	08012f2d 	.word	0x08012f2d
 8012590:	08012ff1 	.word	0x08012ff1
 8012594:	0801309f 	.word	0x0801309f
 8012598:	08013139 	.word	0x08013139
 801259c:	080131a7 	.word	0x080131a7
    case SAVE_BUF:
    case SAVE_CSV:
    case SAVE_SVG:
    case LOAD_DAT:
    case LOAD_BUF:
      SetColor(GRY, TCOLOR[FN]);
 80125a0:	f64f 4310 	movw	r3, #64528	; 0xfc10
 80125a4:	4619      	mov	r1, r3
 80125a6:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80125aa:	f7fb fb3f 	bl	800dc2c <SetColor>
      u8ToDec3(NumStr, List[i].Val);
 80125ae:	89bb      	ldrh	r3, [r7, #12]
 80125b0:	4a69      	ldr	r2, [pc, #420]	; (8012758 <Update_Blink+0x2fc>)
 80125b2:	00db      	lsls	r3, r3, #3
 80125b4:	4413      	add	r3, r2
 80125b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80125ba:	b2db      	uxtb	r3, r3
 80125bc:	4619      	mov	r1, r3
 80125be:	486a      	ldr	r0, [pc, #424]	; (8012768 <Update_Blink+0x30c>)
 80125c0:	f7ff f9bc 	bl	801193c <u8ToDec3>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*11);
 80125c4:	4b69      	ldr	r3, [pc, #420]	; (801276c <Update_Blink+0x310>)
 80125c6:	781b      	ldrb	r3, [r3, #0]
 80125c8:	b2d8      	uxtb	r0, r3
 80125ca:	89bb      	ldrh	r3, [r7, #12]
 80125cc:	4a68      	ldr	r2, [pc, #416]	; (8012770 <Update_Blink+0x314>)
 80125ce:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80125d2:	b29b      	uxth	r3, r3
 80125d4:	3b03      	subs	r3, #3
 80125d6:	b29b      	uxth	r3, r3
 80125d8:	b219      	sxth	r1, r3
 80125da:	2342      	movs	r3, #66	; 0x42
 80125dc:	9301      	str	r3, [sp, #4]
 80125de:	2300      	movs	r3, #0
 80125e0:	9300      	str	r3, [sp, #0]
 80125e2:	230b      	movs	r3, #11
 80125e4:	2203      	movs	r2, #3
 80125e6:	f7fb fc0f 	bl	800de08 <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, ((i > SAVE_SVG)? "Load" : "Save"));//0513
 80125ea:	89bb      	ldrh	r3, [r7, #12]
 80125ec:	4a60      	ldr	r2, [pc, #384]	; (8012770 <Update_Blink+0x314>)
 80125ee:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 80125f2:	4b5e      	ldr	r3, [pc, #376]	; (801276c <Update_Blink+0x310>)
 80125f4:	781b      	ldrb	r3, [r3, #0]
 80125f6:	b2da      	uxtb	r2, r3
 80125f8:	89bb      	ldrh	r3, [r7, #12]
 80125fa:	2b21      	cmp	r3, #33	; 0x21
 80125fc:	d901      	bls.n	8012602 <Update_Blink+0x1a6>
 80125fe:	4b5d      	ldr	r3, [pc, #372]	; (8012774 <Update_Blink+0x318>)
 8012600:	e000      	b.n	8012604 <Update_Blink+0x1a8>
 8012602:	4b5d      	ldr	r3, [pc, #372]	; (8012778 <Update_Blink+0x31c>)
 8012604:	2103      	movs	r1, #3
 8012606:	f7fb fb29 	bl	800dc5c <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, (char *)NumStr);
 801260a:	89bb      	ldrh	r3, [r7, #12]
 801260c:	4a58      	ldr	r2, [pc, #352]	; (8012770 <Update_Blink+0x314>)
 801260e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012612:	b29b      	uxth	r3, r3
 8012614:	3318      	adds	r3, #24
 8012616:	b29b      	uxth	r3, r3
 8012618:	b218      	sxth	r0, r3
 801261a:	4b54      	ldr	r3, [pc, #336]	; (801276c <Update_Blink+0x310>)
 801261c:	781b      	ldrb	r3, [r3, #0]
 801261e:	b2da      	uxtb	r2, r3
 8012620:	4b51      	ldr	r3, [pc, #324]	; (8012768 <Update_Blink+0x30c>)
 8012622:	2103      	movs	r1, #3
 8012624:	f7fb fb1a 	bl	800dc5c <DispStr>
      DispStr(S_X[i]+42, LABLE_Y, Twink, (List[i].PTR +(i - SAVE_BMP)*6));
 8012628:	89bb      	ldrh	r3, [r7, #12]
 801262a:	4a51      	ldr	r2, [pc, #324]	; (8012770 <Update_Blink+0x314>)
 801262c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012630:	b29b      	uxth	r3, r3
 8012632:	332a      	adds	r3, #42	; 0x2a
 8012634:	b29b      	uxth	r3, r3
 8012636:	b218      	sxth	r0, r3
 8012638:	4b4c      	ldr	r3, [pc, #304]	; (801276c <Update_Blink+0x310>)
 801263a:	781b      	ldrb	r3, [r3, #0]
 801263c:	b2dc      	uxtb	r4, r3
 801263e:	89bb      	ldrh	r3, [r7, #12]
 8012640:	4a45      	ldr	r2, [pc, #276]	; (8012758 <Update_Blink+0x2fc>)
 8012642:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8012646:	89bb      	ldrh	r3, [r7, #12]
 8012648:	f1a3 021d 	sub.w	r2, r3, #29
 801264c:	4613      	mov	r3, r2
 801264e:	005b      	lsls	r3, r3, #1
 8012650:	4413      	add	r3, r2
 8012652:	005b      	lsls	r3, r3, #1
 8012654:	440b      	add	r3, r1
 8012656:	4622      	mov	r2, r4
 8012658:	2103      	movs	r1, #3
 801265a:	f7fb faff 	bl	800dc5c <DispStr>
      break;
 801265e:	f000 bdf2 	b.w	8013246 <Update_Blink+0xdea>

    case Y_RANGES:
    case COUPLING:
    case PROBEATT:
      SetColor(GRY, TCOLOR[YN]);
 8012662:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8012666:	4619      	mov	r1, r3
 8012668:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801266c:	f7fb fade 	bl	800dc2c <SetColor>
      Draw_Circle_D(Twink, S_X[Y_RANGES]-3, TITLE_Y_POS, 11, 0, 6*7);
 8012670:	4b3e      	ldr	r3, [pc, #248]	; (801276c <Update_Blink+0x310>)
 8012672:	781b      	ldrb	r3, [r3, #0]
 8012674:	b2d8      	uxtb	r0, r3
 8012676:	232f      	movs	r3, #47	; 0x2f
 8012678:	b29b      	uxth	r3, r3
 801267a:	3b03      	subs	r3, #3
 801267c:	b29b      	uxth	r3, r3
 801267e:	b219      	sxth	r1, r3
 8012680:	232a      	movs	r3, #42	; 0x2a
 8012682:	9301      	str	r3, [sp, #4]
 8012684:	2300      	movs	r3, #0
 8012686:	9300      	str	r3, [sp, #0]
 8012688:	230b      	movs	r3, #11
 801268a:	22e1      	movs	r2, #225	; 0xe1
 801268c:	f7fb fbbc 	bl	800de08 <Draw_Circle_D>
      DispStr(S_X[Y_RANGES], TITLE_Y_POS, Twink, (List[Y_RANGES].PTR +(Range)*6));
 8012690:	242f      	movs	r4, #47	; 0x2f
 8012692:	4b36      	ldr	r3, [pc, #216]	; (801276c <Update_Blink+0x310>)
 8012694:	781b      	ldrb	r3, [r3, #0]
 8012696:	b2d8      	uxtb	r0, r3
 8012698:	4b2f      	ldr	r3, [pc, #188]	; (8012758 <Update_Blink+0x2fc>)
 801269a:	6819      	ldr	r1, [r3, #0]
 801269c:	89fa      	ldrh	r2, [r7, #14]
 801269e:	4613      	mov	r3, r2
 80126a0:	005b      	lsls	r3, r3, #1
 80126a2:	4413      	add	r3, r2
 80126a4:	005b      	lsls	r3, r3, #1
 80126a6:	440b      	add	r3, r1
 80126a8:	4602      	mov	r2, r0
 80126aa:	21e1      	movs	r1, #225	; 0xe1
 80126ac:	4620      	mov	r0, r4
 80126ae:	f7fb fad5 	bl	800dc5c <DispStr>
      DispStr(S_X[COUPLING], TITLE_Y_POS, Twink, (List[COUPLING].PTR +(List[COUPLING].Val)*6));
 80126b2:	2047      	movs	r0, #71	; 0x47
 80126b4:	4b2d      	ldr	r3, [pc, #180]	; (801276c <Update_Blink+0x310>)
 80126b6:	781b      	ldrb	r3, [r3, #0]
 80126b8:	b2d9      	uxtb	r1, r3
 80126ba:	4b27      	ldr	r3, [pc, #156]	; (8012758 <Update_Blink+0x2fc>)
 80126bc:	689a      	ldr	r2, [r3, #8]
 80126be:	4b26      	ldr	r3, [pc, #152]	; (8012758 <Update_Blink+0x2fc>)
 80126c0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80126c4:	461c      	mov	r4, r3
 80126c6:	4623      	mov	r3, r4
 80126c8:	005b      	lsls	r3, r3, #1
 80126ca:	4423      	add	r3, r4
 80126cc:	005b      	lsls	r3, r3, #1
 80126ce:	4413      	add	r3, r2
 80126d0:	460a      	mov	r2, r1
 80126d2:	21e1      	movs	r1, #225	; 0xe1
 80126d4:	f7fb fac2 	bl	800dc5c <DispStr>
      DispStr10x14(S_X[PROBEATT], TITLE_Y_POS, PRN+SYMB,(List[PROBEATT].Val?("A"):("B")));
 80126d8:	2020      	movs	r0, #32
 80126da:	4b1f      	ldr	r3, [pc, #124]	; (8012758 <Update_Blink+0x2fc>)
 80126dc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d001      	beq.n	80126e8 <Update_Blink+0x28c>
 80126e4:	4b25      	ldr	r3, [pc, #148]	; (801277c <Update_Blink+0x320>)
 80126e6:	e000      	b.n	80126ea <Update_Blink+0x28e>
 80126e8:	4b25      	ldr	r3, [pc, #148]	; (8012780 <Update_Blink+0x324>)
 80126ea:	2210      	movs	r2, #16
 80126ec:	21e1      	movs	r1, #225	; 0xe1
 80126ee:	f7fb fd1d 	bl	800e12c <DispStr10x14>
      break;
 80126f2:	f000 bda8 	b.w	8013246 <Update_Blink+0xdea>

    case V0_POSI:
      if(Twink) ParamTab[P1F] |=  D_HID;
 80126f6:	4b1d      	ldr	r3, [pc, #116]	; (801276c <Update_Blink+0x310>)
 80126f8:	781b      	ldrb	r3, [r3, #0]
 80126fa:	b2db      	uxtb	r3, r3
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d009      	beq.n	8012714 <Update_Blink+0x2b8>
 8012700:	4b20      	ldr	r3, [pc, #128]	; (8012784 <Update_Blink+0x328>)
 8012702:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012706:	f043 0301 	orr.w	r3, r3, #1
 801270a:	b21a      	sxth	r2, r3
 801270c:	4b1d      	ldr	r3, [pc, #116]	; (8012784 <Update_Blink+0x328>)
 801270e:	801a      	strh	r2, [r3, #0]
      else      ParamTab[P1F] &= ~D_HID;
      break;
 8012710:	f000 bd99 	b.w	8013246 <Update_Blink+0xdea>
      else      ParamTab[P1F] &= ~D_HID;
 8012714:	4b1b      	ldr	r3, [pc, #108]	; (8012784 <Update_Blink+0x328>)
 8012716:	f9b3 3000 	ldrsh.w	r3, [r3]
 801271a:	f023 0301 	bic.w	r3, r3, #1
 801271e:	b21a      	sxth	r2, r3
 8012720:	4b18      	ldr	r3, [pc, #96]	; (8012784 <Update_Blink+0x328>)
 8012722:	801a      	strh	r2, [r3, #0]
      break;
 8012724:	f000 bd8f 	b.w	8013246 <Update_Blink+0xdea>

    case V1_POSI:
    case V2_POSI:
      Tmp = (i == V1_POSI)? V1F : V2F;
 8012728:	89bb      	ldrh	r3, [r7, #12]
 801272a:	2b04      	cmp	r3, #4
 801272c:	d101      	bne.n	8012732 <Update_Blink+0x2d6>
 801272e:	2305      	movs	r3, #5
 8012730:	e000      	b.n	8012734 <Update_Blink+0x2d8>
 8012732:	2306      	movs	r3, #6
 8012734:	607b      	str	r3, [r7, #4]
      if(Twink) ParamTab[Tmp] |=  D_HID;
 8012736:	4b0d      	ldr	r3, [pc, #52]	; (801276c <Update_Blink+0x310>)
 8012738:	781b      	ldrb	r3, [r3, #0]
 801273a:	b2db      	uxtb	r3, r3
 801273c:	2b00      	cmp	r3, #0
 801273e:	d023      	beq.n	8012788 <Update_Blink+0x32c>
 8012740:	4a10      	ldr	r2, [pc, #64]	; (8012784 <Update_Blink+0x328>)
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012748:	f043 0301 	orr.w	r3, r3, #1
 801274c:	b219      	sxth	r1, r3
 801274e:	4a0d      	ldr	r2, [pc, #52]	; (8012784 <Update_Blink+0x328>)
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8012756:	e022      	b.n	801279e <Update_Blink+0x342>
 8012758:	20000298 	.word	0x20000298
 801275c:	2000079e 	.word	0x2000079e
 8012760:	20000538 	.word	0x20000538
 8012764:	20000a31 	.word	0x20000a31
 8012768:	2000283c 	.word	0x2000283c
 801276c:	2000077c 	.word	0x2000077c
 8012770:	0800215c 	.word	0x0800215c
 8012774:	08000948 	.word	0x08000948
 8012778:	08000950 	.word	0x08000950
 801277c:	08000958 	.word	0x08000958
 8012780:	0800095c 	.word	0x0800095c
 8012784:	20000140 	.word	0x20000140
      else      ParamTab[Tmp] &= ~D_HID;
 8012788:	4ab1      	ldr	r2, [pc, #708]	; (8012a50 <Update_Blink+0x5f4>)
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012790:	f023 0301 	bic.w	r3, r3, #1
 8012794:	b219      	sxth	r1, r3
 8012796:	4aae      	ldr	r2, [pc, #696]	; (8012a50 <Update_Blink+0x5f4>)
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      Tmp  =(ParamTab[V1x2]- ParamTab[V2x2])/2;         // V2 - V1 ��ֵ
 801279e:	4bac      	ldr	r3, [pc, #688]	; (8012a50 <Update_Blink+0x5f4>)
 80127a0:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80127a4:	461a      	mov	r2, r3
 80127a6:	4baa      	ldr	r3, [pc, #680]	; (8012a50 <Update_Blink+0x5f4>)
 80127a8:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80127ac:	1ad3      	subs	r3, r2, r3
 80127ae:	0fda      	lsrs	r2, r3, #31
 80127b0:	4413      	add	r3, r2
 80127b2:	105b      	asrs	r3, r3, #1
 80127b4:	607b      	str	r3, [r7, #4]
      Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 80127b6:	89fb      	ldrh	r3, [r7, #14]
 80127b8:	4aa6      	ldr	r2, [pc, #664]	; (8012a54 <Update_Blink+0x5f8>)
 80127ba:	5cd3      	ldrb	r3, [r2, r3]
 80127bc:	461c      	mov	r4, r3
 80127be:	89fb      	ldrh	r3, [r7, #14]
 80127c0:	4aa5      	ldr	r2, [pc, #660]	; (8012a58 <Update_Blink+0x5fc>)
 80127c2:	5cd3      	ldrb	r3, [r2, r3]
 80127c4:	4618      	mov	r0, r3
 80127c6:	f7ff fa1d 	bl	8011c04 <Exp>
 80127ca:	4603      	mov	r3, r0
 80127cc:	fb03 f204 	mul.w	r2, r3, r4
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	fb02 f303 	mul.w	r3, r2, r3
 80127d6:	607b      	str	r3, [r7, #4]
      Value2Str(NumStr, Tmp, V[0], 3, UNSIGN);
 80127d8:	2301      	movs	r3, #1
 80127da:	9300      	str	r3, [sp, #0]
 80127dc:	2303      	movs	r3, #3
 80127de:	4a9f      	ldr	r2, [pc, #636]	; (8012a5c <Update_Blink+0x600>)
 80127e0:	6879      	ldr	r1, [r7, #4]
 80127e2:	489f      	ldr	r0, [pc, #636]	; (8012a60 <Update_Blink+0x604>)
 80127e4:	f7ff f912 	bl	8011a0c <Value2Str>
      SetColor(GRY, TCOLOR[YN]);
 80127e8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80127ec:	4619      	mov	r1, r3
 80127ee:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80127f2:	f7fb fa1b 	bl	800dc2c <SetColor>
      Draw_Circle_D(Twink, S_X[V1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 80127f6:	4b9b      	ldr	r3, [pc, #620]	; (8012a64 <Update_Blink+0x608>)
 80127f8:	781b      	ldrb	r3, [r3, #0]
 80127fa:	b2d8      	uxtb	r0, r3
 80127fc:	2307      	movs	r3, #7
 80127fe:	b29b      	uxth	r3, r3
 8012800:	3b03      	subs	r3, #3
 8012802:	b29b      	uxth	r3, r3
 8012804:	b219      	sxth	r1, r3
 8012806:	2336      	movs	r3, #54	; 0x36
 8012808:	9301      	str	r3, [sp, #4]
 801280a:	2300      	movs	r3, #0
 801280c:	9300      	str	r3, [sp, #0]
 801280e:	230b      	movs	r3, #11
 8012810:	2203      	movs	r2, #3
 8012812:	f7fb faf9 	bl	800de08 <Draw_Circle_D>
      DispStr(S_X[V1_POSI]+0*6, LABLE_Y, Twink+SYMB, "]");
 8012816:	2007      	movs	r0, #7
 8012818:	4b92      	ldr	r3, [pc, #584]	; (8012a64 <Update_Blink+0x608>)
 801281a:	781b      	ldrb	r3, [r3, #0]
 801281c:	b2db      	uxtb	r3, r3
 801281e:	3310      	adds	r3, #16
 8012820:	b2da      	uxtb	r2, r3
 8012822:	4b91      	ldr	r3, [pc, #580]	; (8012a68 <Update_Blink+0x60c>)
 8012824:	2103      	movs	r1, #3
 8012826:	f7fb fa19 	bl	800dc5c <DispStr>
      DispStr(S_X[V1_POSI]+1*6, LABLE_Y, Twink,      "V:      ");
 801282a:	2307      	movs	r3, #7
 801282c:	b29b      	uxth	r3, r3
 801282e:	3306      	adds	r3, #6
 8012830:	b29b      	uxth	r3, r3
 8012832:	b218      	sxth	r0, r3
 8012834:	4b8b      	ldr	r3, [pc, #556]	; (8012a64 <Update_Blink+0x608>)
 8012836:	781b      	ldrb	r3, [r3, #0]
 8012838:	b2da      	uxtb	r2, r3
 801283a:	4b8c      	ldr	r3, [pc, #560]	; (8012a6c <Update_Blink+0x610>)
 801283c:	2103      	movs	r1, #3
 801283e:	f7fb fa0d 	bl	800dc5c <DispStr>
      DispStr(S_X[V1_POSI]+3*6, LABLE_Y, Twink, (char *)NumStr);
 8012842:	2307      	movs	r3, #7
 8012844:	b29b      	uxth	r3, r3
 8012846:	3312      	adds	r3, #18
 8012848:	b29b      	uxth	r3, r3
 801284a:	b218      	sxth	r0, r3
 801284c:	4b85      	ldr	r3, [pc, #532]	; (8012a64 <Update_Blink+0x608>)
 801284e:	781b      	ldrb	r3, [r3, #0]
 8012850:	b2da      	uxtb	r2, r3
 8012852:	4b83      	ldr	r3, [pc, #524]	; (8012a60 <Update_Blink+0x604>)
 8012854:	2103      	movs	r1, #3
 8012856:	f7fb fa01 	bl	800dc5c <DispStr>
      break;
 801285a:	f000 bcf4 	b.w	8013246 <Update_Blink+0xdea>

    case YN_TYPE:
      if(Twink) ParamTab[V1F] |=  D_HID;
 801285e:	4b81      	ldr	r3, [pc, #516]	; (8012a64 <Update_Blink+0x608>)
 8012860:	781b      	ldrb	r3, [r3, #0]
 8012862:	b2db      	uxtb	r3, r3
 8012864:	2b00      	cmp	r3, #0
 8012866:	d008      	beq.n	801287a <Update_Blink+0x41e>
 8012868:	4b79      	ldr	r3, [pc, #484]	; (8012a50 <Update_Blink+0x5f4>)
 801286a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801286e:	f043 0301 	orr.w	r3, r3, #1
 8012872:	b21a      	sxth	r2, r3
 8012874:	4b76      	ldr	r3, [pc, #472]	; (8012a50 <Update_Blink+0x5f4>)
 8012876:	815a      	strh	r2, [r3, #10]
 8012878:	e007      	b.n	801288a <Update_Blink+0x42e>
      else      ParamTab[V1F] &= ~D_HID;
 801287a:	4b75      	ldr	r3, [pc, #468]	; (8012a50 <Update_Blink+0x5f4>)
 801287c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8012880:	f023 0301 	bic.w	r3, r3, #1
 8012884:	b21a      	sxth	r2, r3
 8012886:	4b72      	ldr	r3, [pc, #456]	; (8012a50 <Update_Blink+0x5f4>)
 8012888:	815a      	strh	r2, [r3, #10]
      if(Twink) ParamTab[V2F] |=  D_HID;
 801288a:	4b76      	ldr	r3, [pc, #472]	; (8012a64 <Update_Blink+0x608>)
 801288c:	781b      	ldrb	r3, [r3, #0]
 801288e:	b2db      	uxtb	r3, r3
 8012890:	2b00      	cmp	r3, #0
 8012892:	d009      	beq.n	80128a8 <Update_Blink+0x44c>
 8012894:	4b6e      	ldr	r3, [pc, #440]	; (8012a50 <Update_Blink+0x5f4>)
 8012896:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801289a:	f043 0301 	orr.w	r3, r3, #1
 801289e:	b21a      	sxth	r2, r3
 80128a0:	4b6b      	ldr	r3, [pc, #428]	; (8012a50 <Update_Blink+0x5f4>)
 80128a2:	819a      	strh	r2, [r3, #12]
      else      ParamTab[V2F] &= ~D_HID;
      break;
 80128a4:	f000 bccf 	b.w	8013246 <Update_Blink+0xdea>
      else      ParamTab[V2F] &= ~D_HID;
 80128a8:	4b69      	ldr	r3, [pc, #420]	; (8012a50 <Update_Blink+0x5f4>)
 80128aa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80128ae:	f023 0301 	bic.w	r3, r3, #1
 80128b2:	b21a      	sxth	r2, r3
 80128b4:	4b66      	ldr	r3, [pc, #408]	; (8012a50 <Update_Blink+0x5f4>)
 80128b6:	819a      	strh	r2, [r3, #12]
      break;
 80128b8:	f000 bcc5 	b.w	8013246 <Update_Blink+0xdea>

    case TIM_BASE:
      SetColor(GRY, TCOLOR[XN]);
 80128bc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80128c0:	4619      	mov	r1, r3
 80128c2:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80128c6:	f7fb f9b1 	bl	800dc2c <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 2, 6*5);
 80128ca:	4b66      	ldr	r3, [pc, #408]	; (8012a64 <Update_Blink+0x608>)
 80128cc:	781b      	ldrb	r3, [r3, #0]
 80128ce:	b2d8      	uxtb	r0, r3
 80128d0:	89bb      	ldrh	r3, [r7, #12]
 80128d2:	4a67      	ldr	r2, [pc, #412]	; (8012a70 <Update_Blink+0x614>)
 80128d4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80128d8:	b29b      	uxth	r3, r3
 80128da:	3b03      	subs	r3, #3
 80128dc:	b29b      	uxth	r3, r3
 80128de:	b219      	sxth	r1, r3
 80128e0:	231e      	movs	r3, #30
 80128e2:	9301      	str	r3, [sp, #4]
 80128e4:	2302      	movs	r3, #2
 80128e6:	9300      	str	r3, [sp, #0]
 80128e8:	230b      	movs	r3, #11
 80128ea:	22e1      	movs	r2, #225	; 0xe1
 80128ec:	f7fb fa8c 	bl	800de08 <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, TimeBase_Str[List[TIM_BASE].Val]);
 80128f0:	89bb      	ldrh	r3, [r7, #12]
 80128f2:	4a5f      	ldr	r2, [pc, #380]	; (8012a70 <Update_Blink+0x614>)
 80128f4:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 80128f8:	4b5a      	ldr	r3, [pc, #360]	; (8012a64 <Update_Blink+0x608>)
 80128fa:	781b      	ldrb	r3, [r3, #0]
 80128fc:	b2da      	uxtb	r2, r3
 80128fe:	4b5d      	ldr	r3, [pc, #372]	; (8012a74 <Update_Blink+0x618>)
 8012900:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012904:	00db      	lsls	r3, r3, #3
 8012906:	495c      	ldr	r1, [pc, #368]	; (8012a78 <Update_Blink+0x61c>)
 8012908:	440b      	add	r3, r1
 801290a:	21e1      	movs	r1, #225	; 0xe1
 801290c:	f7fb f9a6 	bl	800dc5c <DispStr>
      break;
 8012910:	f000 bc99 	b.w	8013246 <Update_Blink+0xdea>

    case VIEWPOSI:
      if(Twink) ParamTab[T0F] |=  D_HID;
 8012914:	4b53      	ldr	r3, [pc, #332]	; (8012a64 <Update_Blink+0x608>)
 8012916:	781b      	ldrb	r3, [r3, #0]
 8012918:	b2db      	uxtb	r3, r3
 801291a:	2b00      	cmp	r3, #0
 801291c:	d009      	beq.n	8012932 <Update_Blink+0x4d6>
 801291e:	4b4c      	ldr	r3, [pc, #304]	; (8012a50 <Update_Blink+0x5f4>)
 8012920:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012924:	f043 0301 	orr.w	r3, r3, #1
 8012928:	b21a      	sxth	r2, r3
 801292a:	4b49      	ldr	r3, [pc, #292]	; (8012a50 <Update_Blink+0x5f4>)
 801292c:	81da      	strh	r2, [r3, #14]
      else      ParamTab[T0F] &= ~D_HID;
      break;
 801292e:	f000 bc8a 	b.w	8013246 <Update_Blink+0xdea>
      else      ParamTab[T0F] &= ~D_HID;
 8012932:	4b47      	ldr	r3, [pc, #284]	; (8012a50 <Update_Blink+0x5f4>)
 8012934:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012938:	f023 0301 	bic.w	r3, r3, #1
 801293c:	b21a      	sxth	r2, r3
 801293e:	4b44      	ldr	r3, [pc, #272]	; (8012a50 <Update_Blink+0x5f4>)
 8012940:	81da      	strh	r2, [r3, #14]
      break;
 8012942:	f000 bc80 	b.w	8013246 <Update_Blink+0xdea>

    case SMPL_DPTH:
      SetColor(GRY, TCOLOR[XN]);
 8012946:	f240 73ff 	movw	r3, #2047	; 0x7ff
 801294a:	4619      	mov	r1, r3
 801294c:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012950:	f7fb f96c 	bl	800dc2c <SetColor>
      Draw_Circle_D(Twink, S_X[SMPL_DPTH]-3, LABLE_Y, 11, 0, 6*11);
 8012954:	4b43      	ldr	r3, [pc, #268]	; (8012a64 <Update_Blink+0x608>)
 8012956:	781b      	ldrb	r3, [r3, #0]
 8012958:	b2d8      	uxtb	r0, r3
 801295a:	23f8      	movs	r3, #248	; 0xf8
 801295c:	b29b      	uxth	r3, r3
 801295e:	3b03      	subs	r3, #3
 8012960:	b29b      	uxth	r3, r3
 8012962:	b219      	sxth	r1, r3
 8012964:	2342      	movs	r3, #66	; 0x42
 8012966:	9301      	str	r3, [sp, #4]
 8012968:	2300      	movs	r3, #0
 801296a:	9300      	str	r3, [sp, #0]
 801296c:	230b      	movs	r3, #11
 801296e:	2203      	movs	r2, #3
 8012970:	f7fb fa4a 	bl	800de08 <Draw_Circle_D>
      DispStr(S_X[SMPL_DPTH],    LABLE_Y,  Twink, "SmplDpth:  ");
 8012974:	20f8      	movs	r0, #248	; 0xf8
 8012976:	4b3b      	ldr	r3, [pc, #236]	; (8012a64 <Update_Blink+0x608>)
 8012978:	781b      	ldrb	r3, [r3, #0]
 801297a:	b2da      	uxtb	r2, r3
 801297c:	4b3f      	ldr	r3, [pc, #252]	; (8012a7c <Update_Blink+0x620>)
 801297e:	2103      	movs	r1, #3
 8012980:	f7fb f96c 	bl	800dc5c <DispStr>
      DispStr(S_X[SMPL_DPTH]+6*9, LABLE_Y,  Twink, (char *)&D[List[SMPL_DPTH].Val]);
 8012984:	23f8      	movs	r3, #248	; 0xf8
 8012986:	b29b      	uxth	r3, r3
 8012988:	3336      	adds	r3, #54	; 0x36
 801298a:	b29b      	uxth	r3, r3
 801298c:	b218      	sxth	r0, r3
 801298e:	4b35      	ldr	r3, [pc, #212]	; (8012a64 <Update_Blink+0x608>)
 8012990:	781b      	ldrb	r3, [r3, #0]
 8012992:	b2da      	uxtb	r2, r3
 8012994:	4b37      	ldr	r3, [pc, #220]	; (8012a74 <Update_Blink+0x618>)
 8012996:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 801299a:	4619      	mov	r1, r3
 801299c:	460b      	mov	r3, r1
 801299e:	005b      	lsls	r3, r3, #1
 80129a0:	440b      	add	r3, r1
 80129a2:	005b      	lsls	r3, r3, #1
 80129a4:	4936      	ldr	r1, [pc, #216]	; (8012a80 <Update_Blink+0x624>)
 80129a6:	440b      	add	r3, r1
 80129a8:	2103      	movs	r1, #3
 80129aa:	f7fb f957 	bl	800dc5c <DispStr>
      break;
 80129ae:	f000 bc4a 	b.w	8013246 <Update_Blink+0xdea>

    case T1_POSI:
    case T2_POSI:
      Tmp = (i == T1_POSI)? T1F : T2F;
 80129b2:	89bb      	ldrh	r3, [r7, #12]
 80129b4:	2b0a      	cmp	r3, #10
 80129b6:	d101      	bne.n	80129bc <Update_Blink+0x560>
 80129b8:	2308      	movs	r3, #8
 80129ba:	e000      	b.n	80129be <Update_Blink+0x562>
 80129bc:	2309      	movs	r3, #9
 80129be:	607b      	str	r3, [r7, #4]
      if(Twink) ParamTab[Tmp] |=  D_HID;
 80129c0:	4b28      	ldr	r3, [pc, #160]	; (8012a64 <Update_Blink+0x608>)
 80129c2:	781b      	ldrb	r3, [r3, #0]
 80129c4:	b2db      	uxtb	r3, r3
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d00b      	beq.n	80129e2 <Update_Blink+0x586>
 80129ca:	4a21      	ldr	r2, [pc, #132]	; (8012a50 <Update_Blink+0x5f4>)
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80129d2:	f043 0301 	orr.w	r3, r3, #1
 80129d6:	b219      	sxth	r1, r3
 80129d8:	4a1d      	ldr	r2, [pc, #116]	; (8012a50 <Update_Blink+0x5f4>)
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80129e0:	e00a      	b.n	80129f8 <Update_Blink+0x59c>
      else      ParamTab[Tmp] &= ~D_HID;
 80129e2:	4a1b      	ldr	r2, [pc, #108]	; (8012a50 <Update_Blink+0x5f4>)
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80129ea:	f023 0301 	bic.w	r3, r3, #1
 80129ee:	b219      	sxth	r1, r3
 80129f0:	4a17      	ldr	r2, [pc, #92]	; (8012a50 <Update_Blink+0x5f4>)
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      Tmp  = ParamTab[T2x1] - ParamTab[T1x1];          // T2 - T1 ��ֵ
 80129f8:	4b15      	ldr	r3, [pc, #84]	; (8012a50 <Update_Blink+0x5f4>)
 80129fa:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80129fe:	461a      	mov	r2, r3
 8012a00:	4b13      	ldr	r3, [pc, #76]	; (8012a50 <Update_Blink+0x5f4>)
 8012a02:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8012a06:	1ad3      	subs	r3, r2, r3
 8012a08:	607b      	str	r3, [r7, #4]
      Tmp *= B_SCALE[List[TIM_BASE].Val]* Exp(T_SCALE[List[TIM_BASE].Val]);
 8012a0a:	4b1a      	ldr	r3, [pc, #104]	; (8012a74 <Update_Blink+0x618>)
 8012a0c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012a10:	461a      	mov	r2, r3
 8012a12:	4b1c      	ldr	r3, [pc, #112]	; (8012a84 <Update_Blink+0x628>)
 8012a14:	5c9b      	ldrb	r3, [r3, r2]
 8012a16:	461c      	mov	r4, r3
 8012a18:	4b16      	ldr	r3, [pc, #88]	; (8012a74 <Update_Blink+0x618>)
 8012a1a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012a1e:	461a      	mov	r2, r3
 8012a20:	4b19      	ldr	r3, [pc, #100]	; (8012a88 <Update_Blink+0x62c>)
 8012a22:	5c9b      	ldrb	r3, [r3, r2]
 8012a24:	4618      	mov	r0, r3
 8012a26:	f7ff f8ed 	bl	8011c04 <Exp>
 8012a2a:	4603      	mov	r3, r0
 8012a2c:	fb03 f204 	mul.w	r2, r3, r4
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	fb02 f303 	mul.w	r3, r2, r3
 8012a36:	607b      	str	r3, [r7, #4]
      if(Tmp>=0)
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	db28      	blt.n	8012a90 <Update_Blink+0x634>
        Value2Str(NumStr, Tmp, T[0], 3, UNSIGN);
 8012a3e:	2301      	movs	r3, #1
 8012a40:	9300      	str	r3, [sp, #0]
 8012a42:	2303      	movs	r3, #3
 8012a44:	4a11      	ldr	r2, [pc, #68]	; (8012a8c <Update_Blink+0x630>)
 8012a46:	6879      	ldr	r1, [r7, #4]
 8012a48:	4805      	ldr	r0, [pc, #20]	; (8012a60 <Update_Blink+0x604>)
 8012a4a:	f7fe ffdf 	bl	8011a0c <Value2Str>
 8012a4e:	e027      	b.n	8012aa0 <Update_Blink+0x644>
 8012a50:	20000140 	.word	0x20000140
 8012a54:	08002130 	.word	0x08002130
 8012a58:	08002108 	.word	0x08002108
 8012a5c:	08001d00 	.word	0x08001d00
 8012a60:	2000283c 	.word	0x2000283c
 8012a64:	2000077c 	.word	0x2000077c
 8012a68:	08000960 	.word	0x08000960
 8012a6c:	08000964 	.word	0x08000964
 8012a70:	0800215c 	.word	0x0800215c
 8012a74:	20000298 	.word	0x20000298
 8012a78:	200001d0 	.word	0x200001d0
 8012a7c:	08000970 	.word	0x08000970
 8012a80:	08001c4c 	.word	0x08001c4c
 8012a84:	0800211c 	.word	0x0800211c
 8012a88:	080020f4 	.word	0x080020f4
 8012a8c:	08001ce8 	.word	0x08001ce8
      else
        Value2Str(NumStr, Tmp, T[0], 3, SIGN);
 8012a90:	2300      	movs	r3, #0
 8012a92:	9300      	str	r3, [sp, #0]
 8012a94:	2303      	movs	r3, #3
 8012a96:	4aa3      	ldr	r2, [pc, #652]	; (8012d24 <Update_Blink+0x8c8>)
 8012a98:	6879      	ldr	r1, [r7, #4]
 8012a9a:	48a3      	ldr	r0, [pc, #652]	; (8012d28 <Update_Blink+0x8cc>)
 8012a9c:	f7fe ffb6 	bl	8011a0c <Value2Str>
      SetColor(GRY, TCOLOR[XN]);
 8012aa0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8012aa4:	4619      	mov	r1, r3
 8012aa6:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012aaa:	f7fb f8bf 	bl	800dc2c <SetColor>
      Draw_Circle_D(Twink, S_X[T1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 8012aae:	4b9f      	ldr	r3, [pc, #636]	; (8012d2c <Update_Blink+0x8d0>)
 8012ab0:	781b      	ldrb	r3, [r3, #0]
 8012ab2:	b2d8      	uxtb	r0, r3
 8012ab4:	2307      	movs	r3, #7
 8012ab6:	b29b      	uxth	r3, r3
 8012ab8:	3b03      	subs	r3, #3
 8012aba:	b29b      	uxth	r3, r3
 8012abc:	b219      	sxth	r1, r3
 8012abe:	2336      	movs	r3, #54	; 0x36
 8012ac0:	9301      	str	r3, [sp, #4]
 8012ac2:	2300      	movs	r3, #0
 8012ac4:	9300      	str	r3, [sp, #0]
 8012ac6:	230b      	movs	r3, #11
 8012ac8:	2203      	movs	r2, #3
 8012aca:	f7fb f99d 	bl	800de08 <Draw_Circle_D>
      DispStr(S_X[T1_POSI]+0*6, LABLE_Y, Twink+SYMB, "]");
 8012ace:	2007      	movs	r0, #7
 8012ad0:	4b96      	ldr	r3, [pc, #600]	; (8012d2c <Update_Blink+0x8d0>)
 8012ad2:	781b      	ldrb	r3, [r3, #0]
 8012ad4:	b2db      	uxtb	r3, r3
 8012ad6:	3310      	adds	r3, #16
 8012ad8:	b2da      	uxtb	r2, r3
 8012ada:	4b95      	ldr	r3, [pc, #596]	; (8012d30 <Update_Blink+0x8d4>)
 8012adc:	2103      	movs	r1, #3
 8012ade:	f7fb f8bd 	bl	800dc5c <DispStr>
      DispStr(S_X[T1_POSI]+1*6, LABLE_Y, Twink,      "T:      ");
 8012ae2:	2307      	movs	r3, #7
 8012ae4:	b29b      	uxth	r3, r3
 8012ae6:	3306      	adds	r3, #6
 8012ae8:	b29b      	uxth	r3, r3
 8012aea:	b218      	sxth	r0, r3
 8012aec:	4b8f      	ldr	r3, [pc, #572]	; (8012d2c <Update_Blink+0x8d0>)
 8012aee:	781b      	ldrb	r3, [r3, #0]
 8012af0:	b2da      	uxtb	r2, r3
 8012af2:	4b90      	ldr	r3, [pc, #576]	; (8012d34 <Update_Blink+0x8d8>)
 8012af4:	2103      	movs	r1, #3
 8012af6:	f7fb f8b1 	bl	800dc5c <DispStr>
      DispStr(S_X[T1_POSI]+3*6, LABLE_Y, Twink,      (char *)NumStr);
 8012afa:	2307      	movs	r3, #7
 8012afc:	b29b      	uxth	r3, r3
 8012afe:	3312      	adds	r3, #18
 8012b00:	b29b      	uxth	r3, r3
 8012b02:	b218      	sxth	r0, r3
 8012b04:	4b89      	ldr	r3, [pc, #548]	; (8012d2c <Update_Blink+0x8d0>)
 8012b06:	781b      	ldrb	r3, [r3, #0]
 8012b08:	b2da      	uxtb	r2, r3
 8012b0a:	4b87      	ldr	r3, [pc, #540]	; (8012d28 <Update_Blink+0x8cc>)
 8012b0c:	2103      	movs	r1, #3
 8012b0e:	f7fb f8a5 	bl	800dc5c <DispStr>
      break;
 8012b12:	e398      	b.n	8013246 <Update_Blink+0xdea>

    case XN_TYPE:
      if(Twink) ParamTab[T1F] |=  D_HID;
 8012b14:	4b85      	ldr	r3, [pc, #532]	; (8012d2c <Update_Blink+0x8d0>)
 8012b16:	781b      	ldrb	r3, [r3, #0]
 8012b18:	b2db      	uxtb	r3, r3
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d008      	beq.n	8012b30 <Update_Blink+0x6d4>
 8012b1e:	4b86      	ldr	r3, [pc, #536]	; (8012d38 <Update_Blink+0x8dc>)
 8012b20:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8012b24:	f043 0301 	orr.w	r3, r3, #1
 8012b28:	b21a      	sxth	r2, r3
 8012b2a:	4b83      	ldr	r3, [pc, #524]	; (8012d38 <Update_Blink+0x8dc>)
 8012b2c:	821a      	strh	r2, [r3, #16]
 8012b2e:	e007      	b.n	8012b40 <Update_Blink+0x6e4>
      else      ParamTab[T1F] &= ~D_HID;
 8012b30:	4b81      	ldr	r3, [pc, #516]	; (8012d38 <Update_Blink+0x8dc>)
 8012b32:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8012b36:	f023 0301 	bic.w	r3, r3, #1
 8012b3a:	b21a      	sxth	r2, r3
 8012b3c:	4b7e      	ldr	r3, [pc, #504]	; (8012d38 <Update_Blink+0x8dc>)
 8012b3e:	821a      	strh	r2, [r3, #16]
      if(Twink) ParamTab[T2F] |=  D_HID;
 8012b40:	4b7a      	ldr	r3, [pc, #488]	; (8012d2c <Update_Blink+0x8d0>)
 8012b42:	781b      	ldrb	r3, [r3, #0]
 8012b44:	b2db      	uxtb	r3, r3
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d008      	beq.n	8012b5c <Update_Blink+0x700>
 8012b4a:	4b7b      	ldr	r3, [pc, #492]	; (8012d38 <Update_Blink+0x8dc>)
 8012b4c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8012b50:	f043 0301 	orr.w	r3, r3, #1
 8012b54:	b21a      	sxth	r2, r3
 8012b56:	4b78      	ldr	r3, [pc, #480]	; (8012d38 <Update_Blink+0x8dc>)
 8012b58:	825a      	strh	r2, [r3, #18]
      else      ParamTab[T2F] &= ~D_HID;
      break;
 8012b5a:	e374      	b.n	8013246 <Update_Blink+0xdea>
      else      ParamTab[T2F] &= ~D_HID;
 8012b5c:	4b76      	ldr	r3, [pc, #472]	; (8012d38 <Update_Blink+0x8dc>)
 8012b5e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8012b62:	f023 0301 	bic.w	r3, r3, #1
 8012b66:	b21a      	sxth	r2, r3
 8012b68:	4b73      	ldr	r3, [pc, #460]	; (8012d38 <Update_Blink+0x8dc>)
 8012b6a:	825a      	strh	r2, [r3, #18]
      break;
 8012b6c:	e36b      	b.n	8013246 <Update_Blink+0xdea>

    case SYNCMODE:
      if(!(Status &  STOP))
 8012b6e:	4b73      	ldr	r3, [pc, #460]	; (8012d3c <Update_Blink+0x8e0>)
 8012b70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012b74:	b29b      	uxth	r3, r3
 8012b76:	f003 0301 	and.w	r3, r3, #1
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	f040 8362 	bne.w	8013244 <Update_Blink+0xde8>
      {
      SetColor(GRY, TCOLOR[TRG]);
 8012b80:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8012b84:	4619      	mov	r1, r3
 8012b86:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012b8a:	f7fb f84f 	bl	800dc2c <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 1, 6*4);
 8012b8e:	4b67      	ldr	r3, [pc, #412]	; (8012d2c <Update_Blink+0x8d0>)
 8012b90:	781b      	ldrb	r3, [r3, #0]
 8012b92:	b2d8      	uxtb	r0, r3
 8012b94:	89bb      	ldrh	r3, [r7, #12]
 8012b96:	4a6a      	ldr	r2, [pc, #424]	; (8012d40 <Update_Blink+0x8e4>)
 8012b98:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012b9c:	b29b      	uxth	r3, r3
 8012b9e:	3b03      	subs	r3, #3
 8012ba0:	b29b      	uxth	r3, r3
 8012ba2:	b219      	sxth	r1, r3
 8012ba4:	2318      	movs	r3, #24
 8012ba6:	9301      	str	r3, [sp, #4]
 8012ba8:	2301      	movs	r3, #1
 8012baa:	9300      	str	r3, [sp, #0]
 8012bac:	230b      	movs	r3, #11
 8012bae:	22e1      	movs	r2, #225	; 0xe1
 8012bb0:	f7fb f92a 	bl	800de08 <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, (char *)ptr);
 8012bb4:	89bb      	ldrh	r3, [r7, #12]
 8012bb6:	4a62      	ldr	r2, [pc, #392]	; (8012d40 <Update_Blink+0x8e4>)
 8012bb8:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012bbc:	4b5b      	ldr	r3, [pc, #364]	; (8012d2c <Update_Blink+0x8d0>)
 8012bbe:	781b      	ldrb	r3, [r3, #0]
 8012bc0:	b2da      	uxtb	r2, r3
 8012bc2:	68bb      	ldr	r3, [r7, #8]
 8012bc4:	21e1      	movs	r1, #225	; 0xe1
 8012bc6:	f7fb f849 	bl	800dc5c <DispStr>
      }
      break;
 8012bca:	e33b      	b.n	8013244 <Update_Blink+0xde8>

    case TR_MODE:
    case SENSITIVE:
      SetColor(GRY, TCOLOR[TRG]);
 8012bcc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8012bd0:	4619      	mov	r1, r3
 8012bd2:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012bd6:	f7fb f829 	bl	800dc2c <SetColor>
      Draw_Circle_D(Twink, S_X[TR_MODE]-3, TITLE_Y_POS, 11, 0, 6*8);
 8012bda:	4b54      	ldr	r3, [pc, #336]	; (8012d2c <Update_Blink+0x8d0>)
 8012bdc:	781b      	ldrb	r3, [r3, #0]
 8012bde:	b2d8      	uxtb	r0, r3
 8012be0:	23dd      	movs	r3, #221	; 0xdd
 8012be2:	b29b      	uxth	r3, r3
 8012be4:	3b03      	subs	r3, #3
 8012be6:	b29b      	uxth	r3, r3
 8012be8:	b219      	sxth	r1, r3
 8012bea:	2330      	movs	r3, #48	; 0x30
 8012bec:	9301      	str	r3, [sp, #4]
 8012bee:	2300      	movs	r3, #0
 8012bf0:	9300      	str	r3, [sp, #0]
 8012bf2:	230b      	movs	r3, #11
 8012bf4:	22e1      	movs	r2, #225	; 0xe1
 8012bf6:	f7fb f907 	bl	800de08 <Draw_Circle_D>
      DispStr10x14(S_X[TR_MODE], TITLE_Y_POS, Twink+SYMB,(List[TR_MODE].Val?("D"):("C")));
 8012bfa:	20dd      	movs	r0, #221	; 0xdd
 8012bfc:	4b4b      	ldr	r3, [pc, #300]	; (8012d2c <Update_Blink+0x8d0>)
 8012bfe:	781b      	ldrb	r3, [r3, #0]
 8012c00:	b2db      	uxtb	r3, r3
 8012c02:	3310      	adds	r3, #16
 8012c04:	b2da      	uxtb	r2, r3
 8012c06:	4b4f      	ldr	r3, [pc, #316]	; (8012d44 <Update_Blink+0x8e8>)
 8012c08:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d001      	beq.n	8012c14 <Update_Blink+0x7b8>
 8012c10:	4b4d      	ldr	r3, [pc, #308]	; (8012d48 <Update_Blink+0x8ec>)
 8012c12:	e000      	b.n	8012c16 <Update_Blink+0x7ba>
 8012c14:	4b4d      	ldr	r3, [pc, #308]	; (8012d4c <Update_Blink+0x8f0>)
 8012c16:	21e1      	movs	r1, #225	; 0xe1
 8012c18:	f7fb fa88 	bl	800e12c <DispStr10x14>

      Tmp  = List[SENSITIVE].Val;                        // �����ز�ֵ
 8012c1c:	4b49      	ldr	r3, [pc, #292]	; (8012d44 <Update_Blink+0x8e8>)
 8012c1e:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8012c22:	607b      	str	r3, [r7, #4]
      Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8012c24:	89fb      	ldrh	r3, [r7, #14]
 8012c26:	4a4a      	ldr	r2, [pc, #296]	; (8012d50 <Update_Blink+0x8f4>)
 8012c28:	5cd3      	ldrb	r3, [r2, r3]
 8012c2a:	461c      	mov	r4, r3
 8012c2c:	89fb      	ldrh	r3, [r7, #14]
 8012c2e:	4a49      	ldr	r2, [pc, #292]	; (8012d54 <Update_Blink+0x8f8>)
 8012c30:	5cd3      	ldrb	r3, [r2, r3]
 8012c32:	4618      	mov	r0, r3
 8012c34:	f7fe ffe6 	bl	8011c04 <Exp>
 8012c38:	4603      	mov	r3, r0
 8012c3a:	fb03 f204 	mul.w	r2, r3, r4
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	fb02 f303 	mul.w	r3, r2, r3
 8012c44:	607b      	str	r3, [r7, #4]
      Value2Str(NumStr, Tmp, V[0], 2, UNSIGN);
 8012c46:	2301      	movs	r3, #1
 8012c48:	9300      	str	r3, [sp, #0]
 8012c4a:	2302      	movs	r3, #2
 8012c4c:	4a42      	ldr	r2, [pc, #264]	; (8012d58 <Update_Blink+0x8fc>)
 8012c4e:	6879      	ldr	r1, [r7, #4]
 8012c50:	4835      	ldr	r0, [pc, #212]	; (8012d28 <Update_Blink+0x8cc>)
 8012c52:	f7fe fedb 	bl	8011a0c <Value2Str>
      DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, Twink,  "     ");
 8012c56:	23e7      	movs	r3, #231	; 0xe7
 8012c58:	b29b      	uxth	r3, r3
 8012c5a:	3309      	adds	r3, #9
 8012c5c:	b29b      	uxth	r3, r3
 8012c5e:	b218      	sxth	r0, r3
 8012c60:	4b32      	ldr	r3, [pc, #200]	; (8012d2c <Update_Blink+0x8d0>)
 8012c62:	781b      	ldrb	r3, [r3, #0]
 8012c64:	b2da      	uxtb	r2, r3
 8012c66:	4b3d      	ldr	r3, [pc, #244]	; (8012d5c <Update_Blink+0x900>)
 8012c68:	21e1      	movs	r1, #225	; 0xe1
 8012c6a:	f7fa fff7 	bl	800dc5c <DispStr>
      DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, Twink+SYMB,"E");
 8012c6e:	20e7      	movs	r0, #231	; 0xe7
 8012c70:	4b2e      	ldr	r3, [pc, #184]	; (8012d2c <Update_Blink+0x8d0>)
 8012c72:	781b      	ldrb	r3, [r3, #0]
 8012c74:	b2db      	uxtb	r3, r3
 8012c76:	3310      	adds	r3, #16
 8012c78:	b2da      	uxtb	r2, r3
 8012c7a:	4b39      	ldr	r3, [pc, #228]	; (8012d60 <Update_Blink+0x904>)
 8012c7c:	21e1      	movs	r1, #225	; 0xe1
 8012c7e:	f7fb fa55 	bl	800e12c <DispStr10x14>
      DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, Twink     ,  (char *)NumStr);
 8012c82:	23e7      	movs	r3, #231	; 0xe7
 8012c84:	b29b      	uxth	r3, r3
 8012c86:	3309      	adds	r3, #9
 8012c88:	b29b      	uxth	r3, r3
 8012c8a:	b218      	sxth	r0, r3
 8012c8c:	4b27      	ldr	r3, [pc, #156]	; (8012d2c <Update_Blink+0x8d0>)
 8012c8e:	781b      	ldrb	r3, [r3, #0]
 8012c90:	b2da      	uxtb	r2, r3
 8012c92:	4b25      	ldr	r3, [pc, #148]	; (8012d28 <Update_Blink+0x8cc>)
 8012c94:	21e1      	movs	r1, #225	; 0xe1
 8012c96:	f7fa ffe1 	bl	800dc5c <DispStr>
      break;
 8012c9a:	e2d4      	b.n	8013246 <Update_Blink+0xdea>

    case FITTRIGG:
      SetColor(GRY, TCOLOR[TRG]);
 8012c9c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8012ca0:	4619      	mov	r1, r3
 8012ca2:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012ca6:	f7fa ffc1 	bl	800dc2c <SetColor>
      DispStr10x14(S_X[FITTRIGG], TITLE_Y_POS, PRN+SYMB,(List[FITTRIGG].Val?("F"):("B")));
 8012caa:	20cf      	movs	r0, #207	; 0xcf
 8012cac:	4b25      	ldr	r3, [pc, #148]	; (8012d44 <Update_Blink+0x8e8>)
 8012cae:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d001      	beq.n	8012cba <Update_Blink+0x85e>
 8012cb6:	4b2b      	ldr	r3, [pc, #172]	; (8012d64 <Update_Blink+0x908>)
 8012cb8:	e000      	b.n	8012cbc <Update_Blink+0x860>
 8012cba:	4b2b      	ldr	r3, [pc, #172]	; (8012d68 <Update_Blink+0x90c>)
 8012cbc:	2210      	movs	r2, #16
 8012cbe:	21e1      	movs	r1, #225	; 0xe1
 8012cc0:	f7fb fa34 	bl	800e12c <DispStr10x14>
      break;
 8012cc4:	e2bf      	b.n	8013246 <Update_Blink+0xdea>

    case THRESHOLD:
      if(Twink) ParamTab[VTF] |=  D_HID;
 8012cc6:	4b19      	ldr	r3, [pc, #100]	; (8012d2c <Update_Blink+0x8d0>)
 8012cc8:	781b      	ldrb	r3, [r3, #0]
 8012cca:	b2db      	uxtb	r3, r3
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d008      	beq.n	8012ce2 <Update_Blink+0x886>
 8012cd0:	4b19      	ldr	r3, [pc, #100]	; (8012d38 <Update_Blink+0x8dc>)
 8012cd2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012cd6:	f043 0301 	orr.w	r3, r3, #1
 8012cda:	b21a      	sxth	r2, r3
 8012cdc:	4b16      	ldr	r3, [pc, #88]	; (8012d38 <Update_Blink+0x8dc>)
 8012cde:	811a      	strh	r2, [r3, #8]
      else      ParamTab[VTF] &= ~D_HID;
      break;
 8012ce0:	e2b1      	b.n	8013246 <Update_Blink+0xdea>
      else      ParamTab[VTF] &= ~D_HID;
 8012ce2:	4b15      	ldr	r3, [pc, #84]	; (8012d38 <Update_Blink+0x8dc>)
 8012ce4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012ce8:	f023 0301 	bic.w	r3, r3, #1
 8012cec:	b21a      	sxth	r2, r3
 8012cee:	4b12      	ldr	r3, [pc, #72]	; (8012d38 <Update_Blink+0x8dc>)
 8012cf0:	811a      	strh	r2, [r3, #8]
      break;
 8012cf2:	e2a8      	b.n	8013246 <Update_Blink+0xdea>

    case TR_TYPE:
      if(Twink) ParamTab[VTF] |=  D_HID;
 8012cf4:	4b0d      	ldr	r3, [pc, #52]	; (8012d2c <Update_Blink+0x8d0>)
 8012cf6:	781b      	ldrb	r3, [r3, #0]
 8012cf8:	b2db      	uxtb	r3, r3
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d008      	beq.n	8012d10 <Update_Blink+0x8b4>
 8012cfe:	4b0e      	ldr	r3, [pc, #56]	; (8012d38 <Update_Blink+0x8dc>)
 8012d00:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012d04:	f043 0301 	orr.w	r3, r3, #1
 8012d08:	b21a      	sxth	r2, r3
 8012d0a:	4b0b      	ldr	r3, [pc, #44]	; (8012d38 <Update_Blink+0x8dc>)
 8012d0c:	811a      	strh	r2, [r3, #8]
      else      ParamTab[VTF] &= ~D_HID;
      break;
 8012d0e:	e29a      	b.n	8013246 <Update_Blink+0xdea>
      else      ParamTab[VTF] &= ~D_HID;
 8012d10:	4b09      	ldr	r3, [pc, #36]	; (8012d38 <Update_Blink+0x8dc>)
 8012d12:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012d16:	f023 0301 	bic.w	r3, r3, #1
 8012d1a:	b21a      	sxth	r2, r3
 8012d1c:	4b06      	ldr	r3, [pc, #24]	; (8012d38 <Update_Blink+0x8dc>)
 8012d1e:	811a      	strh	r2, [r3, #8]
      break;
 8012d20:	e291      	b.n	8013246 <Update_Blink+0xdea>
 8012d22:	bf00      	nop
 8012d24:	08001ce8 	.word	0x08001ce8
 8012d28:	2000283c 	.word	0x2000283c
 8012d2c:	2000077c 	.word	0x2000077c
 8012d30:	08000960 	.word	0x08000960
 8012d34:	0800097c 	.word	0x0800097c
 8012d38:	20000140 	.word	0x20000140
 8012d3c:	200007a0 	.word	0x200007a0
 8012d40:	0800215c 	.word	0x0800215c
 8012d44:	20000298 	.word	0x20000298
 8012d48:	08000988 	.word	0x08000988
 8012d4c:	0800098c 	.word	0x0800098c
 8012d50:	08002130 	.word	0x08002130
 8012d54:	08002108 	.word	0x08002108
 8012d58:	08001d00 	.word	0x08001d00
 8012d5c:	08000990 	.word	0x08000990
 8012d60:	08000998 	.word	0x08000998
 8012d64:	0800099c 	.word	0x0800099c
 8012d68:	0800095c 	.word	0x0800095c

    case EXT_REFN:
      SetColor(GRY, TCOLOR[EX]);
 8012d6c:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8012d70:	4619      	mov	r1, r3
 8012d72:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012d76:	f7fa ff59 	bl	800dc2c <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 1, 6*5);
 8012d7a:	4b93      	ldr	r3, [pc, #588]	; (8012fc8 <Update_Blink+0xb6c>)
 8012d7c:	781b      	ldrb	r3, [r3, #0]
 8012d7e:	b2d8      	uxtb	r0, r3
 8012d80:	89bb      	ldrh	r3, [r7, #12]
 8012d82:	4a92      	ldr	r2, [pc, #584]	; (8012fcc <Update_Blink+0xb70>)
 8012d84:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012d88:	b29b      	uxth	r3, r3
 8012d8a:	3b03      	subs	r3, #3
 8012d8c:	b29b      	uxth	r3, r3
 8012d8e:	b219      	sxth	r1, r3
 8012d90:	231e      	movs	r3, #30
 8012d92:	9301      	str	r3, [sp, #4]
 8012d94:	2301      	movs	r3, #1
 8012d96:	9300      	str	r3, [sp, #0]
 8012d98:	230b      	movs	r3, #11
 8012d9a:	22e1      	movs	r2, #225	; 0xe1
 8012d9c:	f7fb f834 	bl	800de08 <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 8012da0:	89bb      	ldrh	r3, [r7, #12]
 8012da2:	4a8a      	ldr	r2, [pc, #552]	; (8012fcc <Update_Blink+0xb70>)
 8012da4:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012da8:	4b87      	ldr	r3, [pc, #540]	; (8012fc8 <Update_Blink+0xb6c>)
 8012daa:	781b      	ldrb	r3, [r3, #0]
 8012dac:	b2da      	uxtb	r2, r3
 8012dae:	4b88      	ldr	r3, [pc, #544]	; (8012fd0 <Update_Blink+0xb74>)
 8012db0:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d00a      	beq.n	8012dce <Update_Blink+0x972>
 8012db8:	4b85      	ldr	r3, [pc, #532]	; (8012fd0 <Update_Blink+0xb74>)
 8012dba:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8012dbe:	4619      	mov	r1, r3
 8012dc0:	460b      	mov	r3, r1
 8012dc2:	005b      	lsls	r3, r3, #1
 8012dc4:	440b      	add	r3, r1
 8012dc6:	005b      	lsls	r3, r3, #1
 8012dc8:	4982      	ldr	r1, [pc, #520]	; (8012fd4 <Update_Blink+0xb78>)
 8012dca:	440b      	add	r3, r1
 8012dcc:	e000      	b.n	8012dd0 <Update_Blink+0x974>
 8012dce:	4b82      	ldr	r3, [pc, #520]	; (8012fd8 <Update_Blink+0xb7c>)
 8012dd0:	21e1      	movs	r1, #225	; 0xe1
 8012dd2:	f7fa ff43 	bl	800dc5c <DispStr>
      ParamTab[P2F] &= ~D_HID;
 8012dd6:	4b81      	ldr	r3, [pc, #516]	; (8012fdc <Update_Blink+0xb80>)
 8012dd8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012ddc:	f023 0301 	bic.w	r3, r3, #1
 8012de0:	b21a      	sxth	r2, r3
 8012de2:	4b7e      	ldr	r3, [pc, #504]	; (8012fdc <Update_Blink+0xb80>)
 8012de4:	805a      	strh	r2, [r3, #2]
      break;
 8012de6:	e22e      	b.n	8013246 <Update_Blink+0xdea>

    case EXT_POSI:
      if(Twink) ParamTab[P2F] |=  D_HID;
 8012de8:	4b77      	ldr	r3, [pc, #476]	; (8012fc8 <Update_Blink+0xb6c>)
 8012dea:	781b      	ldrb	r3, [r3, #0]
 8012dec:	b2db      	uxtb	r3, r3
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d008      	beq.n	8012e04 <Update_Blink+0x9a8>
 8012df2:	4b7a      	ldr	r3, [pc, #488]	; (8012fdc <Update_Blink+0xb80>)
 8012df4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012df8:	f043 0301 	orr.w	r3, r3, #1
 8012dfc:	b21a      	sxth	r2, r3
 8012dfe:	4b77      	ldr	r3, [pc, #476]	; (8012fdc <Update_Blink+0xb80>)
 8012e00:	805a      	strh	r2, [r3, #2]
      else      ParamTab[P2F] &= ~D_HID;
      break;
 8012e02:	e220      	b.n	8013246 <Update_Blink+0xdea>
      else      ParamTab[P2F] &= ~D_HID;
 8012e04:	4b75      	ldr	r3, [pc, #468]	; (8012fdc <Update_Blink+0xb80>)
 8012e06:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012e0a:	f023 0301 	bic.w	r3, r3, #1
 8012e0e:	b21a      	sxth	r2, r3
 8012e10:	4b72      	ldr	r3, [pc, #456]	; (8012fdc <Update_Blink+0xb80>)
 8012e12:	805a      	strh	r2, [r3, #2]
      break;
 8012e14:	e217      	b.n	8013246 <Update_Blink+0xdea>

    case EXT_HIDE:
      SetColor(GRY, TCOLOR[EX]);
 8012e16:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8012e1a:	4619      	mov	r1, r3
 8012e1c:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012e20:	f7fa ff04 	bl	800dc2c <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 1, 6*5);
 8012e24:	4b68      	ldr	r3, [pc, #416]	; (8012fc8 <Update_Blink+0xb6c>)
 8012e26:	781b      	ldrb	r3, [r3, #0]
 8012e28:	b2d8      	uxtb	r0, r3
 8012e2a:	89bb      	ldrh	r3, [r7, #12]
 8012e2c:	4a67      	ldr	r2, [pc, #412]	; (8012fcc <Update_Blink+0xb70>)
 8012e2e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012e32:	b29b      	uxth	r3, r3
 8012e34:	3b03      	subs	r3, #3
 8012e36:	b29b      	uxth	r3, r3
 8012e38:	b219      	sxth	r1, r3
 8012e3a:	231e      	movs	r3, #30
 8012e3c:	9301      	str	r3, [sp, #4]
 8012e3e:	2301      	movs	r3, #1
 8012e40:	9300      	str	r3, [sp, #0]
 8012e42:	230b      	movs	r3, #11
 8012e44:	22e1      	movs	r2, #225	; 0xe1
 8012e46:	f7fa ffdf 	bl	800de08 <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 8012e4a:	89bb      	ldrh	r3, [r7, #12]
 8012e4c:	4a5f      	ldr	r2, [pc, #380]	; (8012fcc <Update_Blink+0xb70>)
 8012e4e:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012e52:	4b5d      	ldr	r3, [pc, #372]	; (8012fc8 <Update_Blink+0xb6c>)
 8012e54:	781b      	ldrb	r3, [r3, #0]
 8012e56:	b2da      	uxtb	r2, r3
 8012e58:	4b5d      	ldr	r3, [pc, #372]	; (8012fd0 <Update_Blink+0xb74>)
 8012e5a:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d00a      	beq.n	8012e78 <Update_Blink+0xa1c>
 8012e62:	4b5b      	ldr	r3, [pc, #364]	; (8012fd0 <Update_Blink+0xb74>)
 8012e64:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8012e68:	4619      	mov	r1, r3
 8012e6a:	460b      	mov	r3, r1
 8012e6c:	005b      	lsls	r3, r3, #1
 8012e6e:	440b      	add	r3, r1
 8012e70:	005b      	lsls	r3, r3, #1
 8012e72:	4958      	ldr	r1, [pc, #352]	; (8012fd4 <Update_Blink+0xb78>)
 8012e74:	440b      	add	r3, r1
 8012e76:	e000      	b.n	8012e7a <Update_Blink+0xa1e>
 8012e78:	4b57      	ldr	r3, [pc, #348]	; (8012fd8 <Update_Blink+0xb7c>)
 8012e7a:	21e1      	movs	r1, #225	; 0xe1
 8012e7c:	f7fa feee 	bl	800dc5c <DispStr>
      ParamTab[P2F] &= ~D_HID;
 8012e80:	4b56      	ldr	r3, [pc, #344]	; (8012fdc <Update_Blink+0xb80>)
 8012e82:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012e86:	f023 0301 	bic.w	r3, r3, #1
 8012e8a:	b21a      	sxth	r2, r3
 8012e8c:	4b53      	ldr	r3, [pc, #332]	; (8012fdc <Update_Blink+0xb80>)
 8012e8e:	805a      	strh	r2, [r3, #2]
      break;
 8012e90:	e1d9      	b.n	8013246 <Update_Blink+0xdea>

    case TPYE_OUT:
      SetColor(GRY, TCOLOR[SN]);
 8012e92:	f240 531f 	movw	r3, #1311	; 0x51f
 8012e96:	4619      	mov	r1, r3
 8012e98:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012e9c:	f7fa fec6 	bl	800dc2c <SetColor>
      Draw_Circle_D(Twink, S_X[TPYE_OUT]-3, LABLE_Y, 11, 0, 6*9);
 8012ea0:	4b49      	ldr	r3, [pc, #292]	; (8012fc8 <Update_Blink+0xb6c>)
 8012ea2:	781b      	ldrb	r3, [r3, #0]
 8012ea4:	b2d8      	uxtb	r0, r3
 8012ea6:	2307      	movs	r3, #7
 8012ea8:	b29b      	uxth	r3, r3
 8012eaa:	3b03      	subs	r3, #3
 8012eac:	b29b      	uxth	r3, r3
 8012eae:	b219      	sxth	r1, r3
 8012eb0:	2336      	movs	r3, #54	; 0x36
 8012eb2:	9301      	str	r3, [sp, #4]
 8012eb4:	2300      	movs	r3, #0
 8012eb6:	9300      	str	r3, [sp, #0]
 8012eb8:	230b      	movs	r3, #11
 8012eba:	2203      	movs	r2, #3
 8012ebc:	f7fa ffa4 	bl	800de08 <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, "FO: ");
 8012ec0:	89bb      	ldrh	r3, [r7, #12]
 8012ec2:	4a42      	ldr	r2, [pc, #264]	; (8012fcc <Update_Blink+0xb70>)
 8012ec4:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012ec8:	4b3f      	ldr	r3, [pc, #252]	; (8012fc8 <Update_Blink+0xb6c>)
 8012eca:	781b      	ldrb	r3, [r3, #0]
 8012ecc:	b2da      	uxtb	r2, r3
 8012ece:	4b44      	ldr	r3, [pc, #272]	; (8012fe0 <Update_Blink+0xb84>)
 8012ed0:	2103      	movs	r1, #3
 8012ed2:	f7fa fec3 	bl	800dc5c <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, "     ");
 8012ed6:	89bb      	ldrh	r3, [r7, #12]
 8012ed8:	4a3c      	ldr	r2, [pc, #240]	; (8012fcc <Update_Blink+0xb70>)
 8012eda:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012ede:	b29b      	uxth	r3, r3
 8012ee0:	3318      	adds	r3, #24
 8012ee2:	b29b      	uxth	r3, r3
 8012ee4:	b218      	sxth	r0, r3
 8012ee6:	4b38      	ldr	r3, [pc, #224]	; (8012fc8 <Update_Blink+0xb6c>)
 8012ee8:	781b      	ldrb	r3, [r3, #0]
 8012eea:	b2da      	uxtb	r2, r3
 8012eec:	4b3d      	ldr	r3, [pc, #244]	; (8012fe4 <Update_Blink+0xb88>)
 8012eee:	2103      	movs	r1, #3
 8012ef0:	f7fa feb4 	bl	800dc5c <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, (char*)OT[List[i].Val]);
 8012ef4:	89bb      	ldrh	r3, [r7, #12]
 8012ef6:	4a35      	ldr	r2, [pc, #212]	; (8012fcc <Update_Blink+0xb70>)
 8012ef8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012efc:	b29b      	uxth	r3, r3
 8012efe:	3318      	adds	r3, #24
 8012f00:	b29b      	uxth	r3, r3
 8012f02:	b218      	sxth	r0, r3
 8012f04:	4b30      	ldr	r3, [pc, #192]	; (8012fc8 <Update_Blink+0xb6c>)
 8012f06:	781b      	ldrb	r3, [r3, #0]
 8012f08:	b2da      	uxtb	r2, r3
 8012f0a:	89bb      	ldrh	r3, [r7, #12]
 8012f0c:	4930      	ldr	r1, [pc, #192]	; (8012fd0 <Update_Blink+0xb74>)
 8012f0e:	00db      	lsls	r3, r3, #3
 8012f10:	440b      	add	r3, r1
 8012f12:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012f16:	4619      	mov	r1, r3
 8012f18:	460b      	mov	r3, r1
 8012f1a:	005b      	lsls	r3, r3, #1
 8012f1c:	440b      	add	r3, r1
 8012f1e:	005b      	lsls	r3, r3, #1
 8012f20:	4931      	ldr	r1, [pc, #196]	; (8012fe8 <Update_Blink+0xb8c>)
 8012f22:	440b      	add	r3, r1
 8012f24:	2103      	movs	r1, #3
 8012f26:	f7fa fe99 	bl	800dc5c <DispStr>
      break;
 8012f2a:	e18c      	b.n	8013246 <Update_Blink+0xdea>

    case FREQ_OUT:
      SetColor(GRY, TCOLOR[SN]);
 8012f2c:	f240 531f 	movw	r3, #1311	; 0x51f
 8012f30:	4619      	mov	r1, r3
 8012f32:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012f36:	f7fa fe79 	bl	800dc2c <SetColor>
      Draw_Circle_D(Twink, S_X[FREQ_OUT]-3, LABLE_Y, 11, 0, 6*9);
 8012f3a:	4b23      	ldr	r3, [pc, #140]	; (8012fc8 <Update_Blink+0xb6c>)
 8012f3c:	781b      	ldrb	r3, [r3, #0]
 8012f3e:	b2d8      	uxtb	r0, r3
 8012f40:	2307      	movs	r3, #7
 8012f42:	b29b      	uxth	r3, r3
 8012f44:	3b03      	subs	r3, #3
 8012f46:	b29b      	uxth	r3, r3
 8012f48:	b219      	sxth	r1, r3
 8012f4a:	2336      	movs	r3, #54	; 0x36
 8012f4c:	9301      	str	r3, [sp, #4]
 8012f4e:	2300      	movs	r3, #0
 8012f50:	9300      	str	r3, [sp, #0]
 8012f52:	230b      	movs	r3, #11
 8012f54:	2203      	movs	r2, #3
 8012f56:	f7fa ff57 	bl	800de08 <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, "FO: ");
 8012f5a:	89bb      	ldrh	r3, [r7, #12]
 8012f5c:	4a1b      	ldr	r2, [pc, #108]	; (8012fcc <Update_Blink+0xb70>)
 8012f5e:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012f62:	4b19      	ldr	r3, [pc, #100]	; (8012fc8 <Update_Blink+0xb6c>)
 8012f64:	781b      	ldrb	r3, [r3, #0]
 8012f66:	b2da      	uxtb	r2, r3
 8012f68:	4b1d      	ldr	r3, [pc, #116]	; (8012fe0 <Update_Blink+0xb84>)
 8012f6a:	2103      	movs	r1, #3
 8012f6c:	f7fa fe76 	bl	800dc5c <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, "     ");
 8012f70:	89bb      	ldrh	r3, [r7, #12]
 8012f72:	4a16      	ldr	r2, [pc, #88]	; (8012fcc <Update_Blink+0xb70>)
 8012f74:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012f78:	b29b      	uxth	r3, r3
 8012f7a:	3318      	adds	r3, #24
 8012f7c:	b29b      	uxth	r3, r3
 8012f7e:	b218      	sxth	r0, r3
 8012f80:	4b11      	ldr	r3, [pc, #68]	; (8012fc8 <Update_Blink+0xb6c>)
 8012f82:	781b      	ldrb	r3, [r3, #0]
 8012f84:	b2da      	uxtb	r2, r3
 8012f86:	4b17      	ldr	r3, [pc, #92]	; (8012fe4 <Update_Blink+0xb88>)
 8012f88:	2103      	movs	r1, #3
 8012f8a:	f7fa fe67 	bl	800dc5c <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, (char*)Q[List[i].Val]);
 8012f8e:	89bb      	ldrh	r3, [r7, #12]
 8012f90:	4a0e      	ldr	r2, [pc, #56]	; (8012fcc <Update_Blink+0xb70>)
 8012f92:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012f96:	b29b      	uxth	r3, r3
 8012f98:	3318      	adds	r3, #24
 8012f9a:	b29b      	uxth	r3, r3
 8012f9c:	b218      	sxth	r0, r3
 8012f9e:	4b0a      	ldr	r3, [pc, #40]	; (8012fc8 <Update_Blink+0xb6c>)
 8012fa0:	781b      	ldrb	r3, [r3, #0]
 8012fa2:	b2da      	uxtb	r2, r3
 8012fa4:	89bb      	ldrh	r3, [r7, #12]
 8012fa6:	490a      	ldr	r1, [pc, #40]	; (8012fd0 <Update_Blink+0xb74>)
 8012fa8:	00db      	lsls	r3, r3, #3
 8012faa:	440b      	add	r3, r1
 8012fac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012fb0:	4619      	mov	r1, r3
 8012fb2:	460b      	mov	r3, r1
 8012fb4:	005b      	lsls	r3, r3, #1
 8012fb6:	440b      	add	r3, r1
 8012fb8:	005b      	lsls	r3, r3, #1
 8012fba:	490c      	ldr	r1, [pc, #48]	; (8012fec <Update_Blink+0xb90>)
 8012fbc:	440b      	add	r3, r1
 8012fbe:	2103      	movs	r1, #3
 8012fc0:	f7fa fe4c 	bl	800dc5c <DispStr>
      break;
 8012fc4:	e13f      	b.n	8013246 <Update_Blink+0xdea>
 8012fc6:	bf00      	nop
 8012fc8:	2000077c 	.word	0x2000077c
 8012fcc:	0800215c 	.word	0x0800215c
 8012fd0:	20000298 	.word	0x20000298
 8012fd4:	08001c88 	.word	0x08001c88
 8012fd8:	08001cac 	.word	0x08001cac
 8012fdc:	20000140 	.word	0x20000140
 8012fe0:	080009a0 	.word	0x080009a0
 8012fe4:	08000990 	.word	0x08000990
 8012fe8:	08001d50 	.word	0x08001d50
 8012fec:	08001e98 	.word	0x08001e98

    case FREQ_DUT:
      SetColor(GRY, TCOLOR[SN]);
 8012ff0:	f240 531f 	movw	r3, #1311	; 0x51f
 8012ff4:	4619      	mov	r1, r3
 8012ff6:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012ffa:	f7fa fe17 	bl	800dc2c <SetColor>
      Value2Str(NumStr, List[i].Val*10, List[i].PTR, 2, UNSIGN);
 8012ffe:	89bb      	ldrh	r3, [r7, #12]
 8013000:	4a96      	ldr	r2, [pc, #600]	; (801325c <Update_Blink+0xe00>)
 8013002:	00db      	lsls	r3, r3, #3
 8013004:	4413      	add	r3, r2
 8013006:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801300a:	461a      	mov	r2, r3
 801300c:	4613      	mov	r3, r2
 801300e:	009b      	lsls	r3, r3, #2
 8013010:	4413      	add	r3, r2
 8013012:	005b      	lsls	r3, r3, #1
 8013014:	4619      	mov	r1, r3
 8013016:	89bb      	ldrh	r3, [r7, #12]
 8013018:	4a90      	ldr	r2, [pc, #576]	; (801325c <Update_Blink+0xe00>)
 801301a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801301e:	2301      	movs	r3, #1
 8013020:	9300      	str	r3, [sp, #0]
 8013022:	2302      	movs	r3, #2
 8013024:	488e      	ldr	r0, [pc, #568]	; (8013260 <Update_Blink+0xe04>)
 8013026:	f7fe fcf1 	bl	8011a0c <Value2Str>
      Draw_Circle_D(Twink, S_X[FREQ_DUT]-3, LABLE_Y, 11, 0, 6*9);
 801302a:	4b8e      	ldr	r3, [pc, #568]	; (8013264 <Update_Blink+0xe08>)
 801302c:	781b      	ldrb	r3, [r3, #0]
 801302e:	b2d8      	uxtb	r0, r3
 8013030:	2307      	movs	r3, #7
 8013032:	b29b      	uxth	r3, r3
 8013034:	3b03      	subs	r3, #3
 8013036:	b29b      	uxth	r3, r3
 8013038:	b219      	sxth	r1, r3
 801303a:	2336      	movs	r3, #54	; 0x36
 801303c:	9301      	str	r3, [sp, #4]
 801303e:	2300      	movs	r3, #0
 8013040:	9300      	str	r3, [sp, #0]
 8013042:	230b      	movs	r3, #11
 8013044:	2203      	movs	r2, #3
 8013046:	f7fa fedf 	bl	800de08 <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, "Duty: ");
 801304a:	89bb      	ldrh	r3, [r7, #12]
 801304c:	4a86      	ldr	r2, [pc, #536]	; (8013268 <Update_Blink+0xe0c>)
 801304e:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8013052:	4b84      	ldr	r3, [pc, #528]	; (8013264 <Update_Blink+0xe08>)
 8013054:	781b      	ldrb	r3, [r3, #0]
 8013056:	b2da      	uxtb	r2, r3
 8013058:	4b84      	ldr	r3, [pc, #528]	; (801326c <Update_Blink+0xe10>)
 801305a:	2103      	movs	r1, #3
 801305c:	f7fa fdfe 	bl	800dc5c <DispStr>
      DispStr(S_X[i]+36, LABLE_Y, Twink, "   ");
 8013060:	89bb      	ldrh	r3, [r7, #12]
 8013062:	4a81      	ldr	r2, [pc, #516]	; (8013268 <Update_Blink+0xe0c>)
 8013064:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013068:	b29b      	uxth	r3, r3
 801306a:	3324      	adds	r3, #36	; 0x24
 801306c:	b29b      	uxth	r3, r3
 801306e:	b218      	sxth	r0, r3
 8013070:	4b7c      	ldr	r3, [pc, #496]	; (8013264 <Update_Blink+0xe08>)
 8013072:	781b      	ldrb	r3, [r3, #0]
 8013074:	b2da      	uxtb	r2, r3
 8013076:	4b7e      	ldr	r3, [pc, #504]	; (8013270 <Update_Blink+0xe14>)
 8013078:	2103      	movs	r1, #3
 801307a:	f7fa fdef 	bl	800dc5c <DispStr>
      DispStr(S_X[i]+36, LABLE_Y, Twink, (char *)NumStr);
 801307e:	89bb      	ldrh	r3, [r7, #12]
 8013080:	4a79      	ldr	r2, [pc, #484]	; (8013268 <Update_Blink+0xe0c>)
 8013082:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013086:	b29b      	uxth	r3, r3
 8013088:	3324      	adds	r3, #36	; 0x24
 801308a:	b29b      	uxth	r3, r3
 801308c:	b218      	sxth	r0, r3
 801308e:	4b75      	ldr	r3, [pc, #468]	; (8013264 <Update_Blink+0xe08>)
 8013090:	781b      	ldrb	r3, [r3, #0]
 8013092:	b2da      	uxtb	r2, r3
 8013094:	4b72      	ldr	r3, [pc, #456]	; (8013260 <Update_Blink+0xe04>)
 8013096:	2103      	movs	r1, #3
 8013098:	f7fa fde0 	bl	800dc5c <DispStr>
      break;
 801309c:	e0d3      	b.n	8013246 <Update_Blink+0xdea>

    case AUTO_CAL:
      if(Twink) ParamTab[P1F] |=  W_HID;
 801309e:	4b71      	ldr	r3, [pc, #452]	; (8013264 <Update_Blink+0xe08>)
 80130a0:	781b      	ldrb	r3, [r3, #0]
 80130a2:	b2db      	uxtb	r3, r3
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d008      	beq.n	80130ba <Update_Blink+0xc5e>
 80130a8:	4b72      	ldr	r3, [pc, #456]	; (8013274 <Update_Blink+0xe18>)
 80130aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80130ae:	f043 0304 	orr.w	r3, r3, #4
 80130b2:	b21a      	sxth	r2, r3
 80130b4:	4b6f      	ldr	r3, [pc, #444]	; (8013274 <Update_Blink+0xe18>)
 80130b6:	801a      	strh	r2, [r3, #0]
 80130b8:	e007      	b.n	80130ca <Update_Blink+0xc6e>
      else      ParamTab[P1F] &= ~W_HID;
 80130ba:	4b6e      	ldr	r3, [pc, #440]	; (8013274 <Update_Blink+0xe18>)
 80130bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80130c0:	f023 0304 	bic.w	r3, r3, #4
 80130c4:	b21a      	sxth	r2, r3
 80130c6:	4b6b      	ldr	r3, [pc, #428]	; (8013274 <Update_Blink+0xe18>)
 80130c8:	801a      	strh	r2, [r3, #0]

      SetColor(GRY, TCOLOR[ST]);
 80130ca:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80130ce:	4619      	mov	r1, r3
 80130d0:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80130d4:	f7fa fdaa 	bl	800dc2c <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 80130d8:	4b62      	ldr	r3, [pc, #392]	; (8013264 <Update_Blink+0xe08>)
 80130da:	781b      	ldrb	r3, [r3, #0]
 80130dc:	b2d8      	uxtb	r0, r3
 80130de:	89bb      	ldrh	r3, [r7, #12]
 80130e0:	4a61      	ldr	r2, [pc, #388]	; (8013268 <Update_Blink+0xe0c>)
 80130e2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80130e6:	b29b      	uxth	r3, r3
 80130e8:	3b03      	subs	r3, #3
 80130ea:	b29b      	uxth	r3, r3
 80130ec:	b219      	sxth	r1, r3
 80130ee:	2336      	movs	r3, #54	; 0x36
 80130f0:	9301      	str	r3, [sp, #4]
 80130f2:	2300      	movs	r3, #0
 80130f4:	9300      	str	r3, [sp, #0]
 80130f6:	230b      	movs	r3, #11
 80130f8:	2203      	movs	r2, #3
 80130fa:	f7fa fe85 	bl	800de08 <Draw_Circle_D>
      DispStr( S_X[i]+0, LABLE_Y, Twink+PRN,  "Press:   ");
 80130fe:	89bb      	ldrh	r3, [r7, #12]
 8013100:	4a59      	ldr	r2, [pc, #356]	; (8013268 <Update_Blink+0xe0c>)
 8013102:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8013106:	4b57      	ldr	r3, [pc, #348]	; (8013264 <Update_Blink+0xe08>)
 8013108:	781b      	ldrb	r3, [r3, #0]
 801310a:	b2da      	uxtb	r2, r3
 801310c:	4b5a      	ldr	r3, [pc, #360]	; (8013278 <Update_Blink+0xe1c>)
 801310e:	2103      	movs	r1, #3
 8013110:	f7fa fda4 	bl	800dc5c <DispStr>
      DispStr(S_X[i]+40, LABLE_Y, Twink+SYMB, "{|");//������ͣͼ��
 8013114:	89bb      	ldrh	r3, [r7, #12]
 8013116:	4a54      	ldr	r2, [pc, #336]	; (8013268 <Update_Blink+0xe0c>)
 8013118:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801311c:	b29b      	uxth	r3, r3
 801311e:	3328      	adds	r3, #40	; 0x28
 8013120:	b29b      	uxth	r3, r3
 8013122:	b218      	sxth	r0, r3
 8013124:	4b4f      	ldr	r3, [pc, #316]	; (8013264 <Update_Blink+0xe08>)
 8013126:	781b      	ldrb	r3, [r3, #0]
 8013128:	b2db      	uxtb	r3, r3
 801312a:	3310      	adds	r3, #16
 801312c:	b2da      	uxtb	r2, r3
 801312e:	4b53      	ldr	r3, [pc, #332]	; (801327c <Update_Blink+0xe20>)
 8013130:	2103      	movs	r1, #3
 8013132:	f7fa fd93 	bl	800dc5c <DispStr>
      break;
 8013136:	e086      	b.n	8013246 <Update_Blink+0xdea>

    case RESTORE:
      SetColor(GRY, TCOLOR[ST]);
 8013138:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 801313c:	4619      	mov	r1, r3
 801313e:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013142:	f7fa fd73 	bl	800dc2c <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 8013146:	4b47      	ldr	r3, [pc, #284]	; (8013264 <Update_Blink+0xe08>)
 8013148:	781b      	ldrb	r3, [r3, #0]
 801314a:	b2d8      	uxtb	r0, r3
 801314c:	89bb      	ldrh	r3, [r7, #12]
 801314e:	4a46      	ldr	r2, [pc, #280]	; (8013268 <Update_Blink+0xe0c>)
 8013150:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013154:	b29b      	uxth	r3, r3
 8013156:	3b03      	subs	r3, #3
 8013158:	b29b      	uxth	r3, r3
 801315a:	b219      	sxth	r1, r3
 801315c:	2336      	movs	r3, #54	; 0x36
 801315e:	9301      	str	r3, [sp, #4]
 8013160:	2300      	movs	r3, #0
 8013162:	9300      	str	r3, [sp, #0]
 8013164:	230b      	movs	r3, #11
 8013166:	2203      	movs	r2, #3
 8013168:	f7fa fe4e 	bl	800de08 <Draw_Circle_D>
      DispStr( S_X[i]+0, LABLE_Y, Twink+PRN,  "Press:   ");
 801316c:	89bb      	ldrh	r3, [r7, #12]
 801316e:	4a3e      	ldr	r2, [pc, #248]	; (8013268 <Update_Blink+0xe0c>)
 8013170:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8013174:	4b3b      	ldr	r3, [pc, #236]	; (8013264 <Update_Blink+0xe08>)
 8013176:	781b      	ldrb	r3, [r3, #0]
 8013178:	b2da      	uxtb	r2, r3
 801317a:	4b3f      	ldr	r3, [pc, #252]	; (8013278 <Update_Blink+0xe1c>)
 801317c:	2103      	movs	r1, #3
 801317e:	f7fa fd6d 	bl	800dc5c <DispStr>
      DispStr( S_X[i]+40, LABLE_Y, Twink+SYMB, "{|");//������ͣͼ��
 8013182:	89bb      	ldrh	r3, [r7, #12]
 8013184:	4a38      	ldr	r2, [pc, #224]	; (8013268 <Update_Blink+0xe0c>)
 8013186:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801318a:	b29b      	uxth	r3, r3
 801318c:	3328      	adds	r3, #40	; 0x28
 801318e:	b29b      	uxth	r3, r3
 8013190:	b218      	sxth	r0, r3
 8013192:	4b34      	ldr	r3, [pc, #208]	; (8013264 <Update_Blink+0xe08>)
 8013194:	781b      	ldrb	r3, [r3, #0]
 8013196:	b2db      	uxtb	r3, r3
 8013198:	3310      	adds	r3, #16
 801319a:	b2da      	uxtb	r2, r3
 801319c:	4b37      	ldr	r3, [pc, #220]	; (801327c <Update_Blink+0xe20>)
 801319e:	2103      	movs	r1, #3
 80131a0:	f7fa fd5c 	bl	800dc5c <DispStr>
      break;
 80131a4:	e04f      	b.n	8013246 <Update_Blink+0xdea>

    case STANDBY:
      SetColor(GRY, TCOLOR[ST]);
 80131a6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80131aa:	4619      	mov	r1, r3
 80131ac:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80131b0:	f7fa fd3c 	bl	800dc2c <SetColor>
      Value2Str(NumStr, List[STANDBY].Val, NSTR[0], 2, UNSIGN);
 80131b4:	4b29      	ldr	r3, [pc, #164]	; (801325c <Update_Blink+0xe00>)
 80131b6:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 80131ba:	4619      	mov	r1, r3
 80131bc:	2301      	movs	r3, #1
 80131be:	9300      	str	r3, [sp, #0]
 80131c0:	2302      	movs	r3, #2
 80131c2:	4a2f      	ldr	r2, [pc, #188]	; (8013280 <Update_Blink+0xe24>)
 80131c4:	4826      	ldr	r0, [pc, #152]	; (8013260 <Update_Blink+0xe04>)
 80131c6:	f7fe fc21 	bl	8011a0c <Value2Str>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 80131ca:	4b26      	ldr	r3, [pc, #152]	; (8013264 <Update_Blink+0xe08>)
 80131cc:	781b      	ldrb	r3, [r3, #0]
 80131ce:	b2d8      	uxtb	r0, r3
 80131d0:	89bb      	ldrh	r3, [r7, #12]
 80131d2:	4a25      	ldr	r2, [pc, #148]	; (8013268 <Update_Blink+0xe0c>)
 80131d4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80131d8:	b29b      	uxth	r3, r3
 80131da:	3b03      	subs	r3, #3
 80131dc:	b29b      	uxth	r3, r3
 80131de:	b219      	sxth	r1, r3
 80131e0:	2336      	movs	r3, #54	; 0x36
 80131e2:	9301      	str	r3, [sp, #4]
 80131e4:	2300      	movs	r3, #0
 80131e6:	9300      	str	r3, [sp, #0]
 80131e8:	230b      	movs	r3, #11
 80131ea:	2203      	movs	r2, #3
 80131ec:	f7fa fe0c 	bl	800de08 <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink+PRN,  " ");
 80131f0:	89bb      	ldrh	r3, [r7, #12]
 80131f2:	4a1d      	ldr	r2, [pc, #116]	; (8013268 <Update_Blink+0xe0c>)
 80131f4:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 80131f8:	4b1a      	ldr	r3, [pc, #104]	; (8013264 <Update_Blink+0xe08>)
 80131fa:	781b      	ldrb	r3, [r3, #0]
 80131fc:	b2da      	uxtb	r2, r3
 80131fe:	4b21      	ldr	r3, [pc, #132]	; (8013284 <Update_Blink+0xe28>)
 8013200:	2103      	movs	r1, #3
 8013202:	f7fa fd2b 	bl	800dc5c <DispStr>
      DispStr(S_X[i]+6, LABLE_Y, Twink+PRN,  (char *)NumStr);
 8013206:	89bb      	ldrh	r3, [r7, #12]
 8013208:	4a17      	ldr	r2, [pc, #92]	; (8013268 <Update_Blink+0xe0c>)
 801320a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801320e:	b29b      	uxth	r3, r3
 8013210:	3306      	adds	r3, #6
 8013212:	b29b      	uxth	r3, r3
 8013214:	b218      	sxth	r0, r3
 8013216:	4b13      	ldr	r3, [pc, #76]	; (8013264 <Update_Blink+0xe08>)
 8013218:	781b      	ldrb	r3, [r3, #0]
 801321a:	b2da      	uxtb	r2, r3
 801321c:	4b10      	ldr	r3, [pc, #64]	; (8013260 <Update_Blink+0xe04>)
 801321e:	2103      	movs	r1, #3
 8013220:	f7fa fd1c 	bl	800dc5c <DispStr>
      DispStr(S_X[i]+30, LABLE_Y, Twink+PRN,  "min ");
 8013224:	89bb      	ldrh	r3, [r7, #12]
 8013226:	4a10      	ldr	r2, [pc, #64]	; (8013268 <Update_Blink+0xe0c>)
 8013228:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801322c:	b29b      	uxth	r3, r3
 801322e:	331e      	adds	r3, #30
 8013230:	b29b      	uxth	r3, r3
 8013232:	b218      	sxth	r0, r3
 8013234:	4b0b      	ldr	r3, [pc, #44]	; (8013264 <Update_Blink+0xe08>)
 8013236:	781b      	ldrb	r3, [r3, #0]
 8013238:	b2da      	uxtb	r2, r3
 801323a:	4b13      	ldr	r3, [pc, #76]	; (8013288 <Update_Blink+0xe2c>)
 801323c:	2103      	movs	r1, #3
 801323e:	f7fa fd0d 	bl	800dc5c <DispStr>
      break;
 8013242:	e000      	b.n	8013246 <Update_Blink+0xdea>
      break;
 8013244:	bf00      	nop

    }
    if(i != V0_POSI)  ParamTab[P1F]   = L_HID ;//0513
 8013246:	89bb      	ldrh	r3, [r7, #12]
 8013248:	2b03      	cmp	r3, #3
 801324a:	d002      	beq.n	8013252 <Update_Blink+0xdf6>
 801324c:	4b09      	ldr	r3, [pc, #36]	; (8013274 <Update_Blink+0xe18>)
 801324e:	2202      	movs	r2, #2
 8013250:	801a      	strh	r2, [r3, #0]
  }
}
 8013252:	bf00      	nop
 8013254:	3714      	adds	r7, #20
 8013256:	46bd      	mov	sp, r7
 8013258:	bd90      	pop	{r4, r7, pc}
 801325a:	bf00      	nop
 801325c:	20000298 	.word	0x20000298
 8013260:	2000283c 	.word	0x2000283c
 8013264:	2000077c 	.word	0x2000077c
 8013268:	0800215c 	.word	0x0800215c
 801326c:	080009a8 	.word	0x080009a8
 8013270:	080009b0 	.word	0x080009b0
 8013274:	20000140 	.word	0x20000140
 8013278:	080009b4 	.word	0x080009b4
 801327c:	080009c0 	.word	0x080009c0
 8013280:	20000548 	.word	0x20000548
 8013284:	080009c4 	.word	0x080009c4
 8013288:	080009c8 	.word	0x080009c8

0801328c <Update_Detail>:
/*******************************************************************************
 Update_Detail:
*******************************************************************************/
void Update_Detail(void)
{
 801328c:	b590      	push	{r4, r7, lr}
 801328e:	b089      	sub	sp, #36	; 0x24
 8013290:	af02      	add	r7, sp, #8
  long scale = 0;
 8013292:	2300      	movs	r3, #0
 8013294:	60bb      	str	r3, [r7, #8]
  int  Ak = (KgA[KindA+(StateA?1:0)]*4)/GK[GainA];
 8013296:	4ba9      	ldr	r3, [pc, #676]	; (801353c <Update_Detail+0x2b0>)
 8013298:	681a      	ldr	r2, [r3, #0]
 801329a:	4ba9      	ldr	r3, [pc, #676]	; (8013540 <Update_Detail+0x2b4>)
 801329c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80132a0:	4619      	mov	r1, r3
 80132a2:	4ba8      	ldr	r3, [pc, #672]	; (8013544 <Update_Detail+0x2b8>)
 80132a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	bf14      	ite	ne
 80132ac:	2301      	movne	r3, #1
 80132ae:	2300      	moveq	r3, #0
 80132b0:	b2db      	uxtb	r3, r3
 80132b2:	440b      	add	r3, r1
 80132b4:	005b      	lsls	r3, r3, #1
 80132b6:	4413      	add	r3, r2
 80132b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80132bc:	009b      	lsls	r3, r3, #2
 80132be:	4aa2      	ldr	r2, [pc, #648]	; (8013548 <Update_Detail+0x2bc>)
 80132c0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80132c4:	4611      	mov	r1, r2
 80132c6:	4aa1      	ldr	r2, [pc, #644]	; (801354c <Update_Detail+0x2c0>)
 80132c8:	5c52      	ldrb	r2, [r2, r1]
 80132ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80132ce:	607b      	str	r3, [r7, #4]
  unsigned short i, k = HighT+LowT;
 80132d0:	4b9f      	ldr	r3, [pc, #636]	; (8013550 <Update_Detail+0x2c4>)
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	b29a      	uxth	r2, r3
 80132d6:	4b9f      	ldr	r3, [pc, #636]	; (8013554 <Update_Detail+0x2c8>)
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	b29b      	uxth	r3, r3
 80132dc:	4413      	add	r3, r2
 80132de:	807b      	strh	r3, [r7, #2]
  long Tmp = 0;
 80132e0:	2300      	movs	r3, #0
 80132e2:	613b      	str	r3, [r7, #16]
  short Range = List[Y_RANGES].Val + 10*List[PROBEATT].Val;
 80132e4:	4b9c      	ldr	r3, [pc, #624]	; (8013558 <Update_Detail+0x2cc>)
 80132e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80132ea:	b29a      	uxth	r2, r3
 80132ec:	4b9a      	ldr	r3, [pc, #616]	; (8013558 <Update_Detail+0x2cc>)
 80132ee:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80132f2:	b29b      	uxth	r3, r3
 80132f4:	4619      	mov	r1, r3
 80132f6:	0089      	lsls	r1, r1, #2
 80132f8:	440b      	add	r3, r1
 80132fa:	005b      	lsls	r3, r3, #1
 80132fc:	b29b      	uxth	r3, r3
 80132fe:	4413      	add	r3, r2
 8013300:	b29b      	uxth	r3, r3
 8013302:	803b      	strh	r3, [r7, #0]
  unsigned long FTmp;

  for(i=Y_RANGES; i<=STANDBY; i++){
 8013304:	2300      	movs	r3, #0
 8013306:	82fb      	strh	r3, [r7, #22]
 8013308:	f000 bfb3 	b.w	8014272 <Update_Detail+0xfe6>
    if(i==FREQUENC)
 801330c:	8afb      	ldrh	r3, [r7, #22]
 801330e:	2b13      	cmp	r3, #19
 8013310:	d118      	bne.n	8013344 <Update_Detail+0xb8>
    {
      if(Freq_Cnt > 10){
 8013312:	4b92      	ldr	r3, [pc, #584]	; (801355c <Update_Detail+0x2d0>)
 8013314:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013318:	2b0a      	cmp	r3, #10
 801331a:	dd0a      	ble.n	8013332 <Update_Detail+0xa6>
        Freq_Cnt = 0;
 801331c:	4b8f      	ldr	r3, [pc, #572]	; (801355c <Update_Detail+0x2d0>)
 801331e:	2200      	movs	r2, #0
 8013320:	801a      	strh	r2, [r3, #0]
        Freq_Flag |= UPD;
 8013322:	4b8f      	ldr	r3, [pc, #572]	; (8013560 <Update_Detail+0x2d4>)
 8013324:	781b      	ldrb	r3, [r3, #0]
 8013326:	f043 0320 	orr.w	r3, r3, #32
 801332a:	b2da      	uxtb	r2, r3
 801332c:	4b8c      	ldr	r3, [pc, #560]	; (8013560 <Update_Detail+0x2d4>)
 801332e:	701a      	strb	r2, [r3, #0]
 8013330:	e008      	b.n	8013344 <Update_Detail+0xb8>
      }
      else Freq_Cnt++;
 8013332:	4b8a      	ldr	r3, [pc, #552]	; (801355c <Update_Detail+0x2d0>)
 8013334:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013338:	b29b      	uxth	r3, r3
 801333a:	3301      	adds	r3, #1
 801333c:	b29b      	uxth	r3, r3
 801333e:	b21a      	sxth	r2, r3
 8013340:	4b86      	ldr	r3, [pc, #536]	; (801355c <Update_Detail+0x2d0>)
 8013342:	801a      	strh	r2, [r3, #0]
    }

    if(List[i].Flg & UPD){
 8013344:	8afb      	ldrh	r3, [r7, #22]
 8013346:	4a84      	ldr	r2, [pc, #528]	; (8013558 <Update_Detail+0x2cc>)
 8013348:	00db      	lsls	r3, r3, #3
 801334a:	4413      	add	r3, r2
 801334c:	799b      	ldrb	r3, [r3, #6]
 801334e:	f003 0320 	and.w	r3, r3, #32
 8013352:	2b00      	cmp	r3, #0
 8013354:	f000 878a 	beq.w	801426c <Update_Detail+0xfe0>
      List[i].Flg &= ~UPD;
 8013358:	8afb      	ldrh	r3, [r7, #22]
 801335a:	4a7f      	ldr	r2, [pc, #508]	; (8013558 <Update_Detail+0x2cc>)
 801335c:	00db      	lsls	r3, r3, #3
 801335e:	4413      	add	r3, r2
 8013360:	799a      	ldrb	r2, [r3, #6]
 8013362:	8afb      	ldrh	r3, [r7, #22]
 8013364:	f022 0220 	bic.w	r2, r2, #32
 8013368:	b2d1      	uxtb	r1, r2
 801336a:	4a7b      	ldr	r2, [pc, #492]	; (8013558 <Update_Detail+0x2cc>)
 801336c:	00db      	lsls	r3, r3, #3
 801336e:	4413      	add	r3, r2
 8013370:	460a      	mov	r2, r1
 8013372:	719a      	strb	r2, [r3, #6]
      switch (i){
 8013374:	8afb      	ldrh	r3, [r7, #22]
 8013376:	2b29      	cmp	r3, #41	; 0x29
 8013378:	f200 8739 	bhi.w	80141ee <Update_Detail+0xf62>
 801337c:	a201      	add	r2, pc, #4	; (adr r2, 8013384 <Update_Detail+0xf8>)
 801337e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013382:	bf00      	nop
 8013384:	0801342d 	.word	0x0801342d
 8013388:	0801342d 	.word	0x0801342d
 801338c:	0801342d 	.word	0x0801342d
 8013390:	0801342d 	.word	0x0801342d
 8013394:	0801342d 	.word	0x0801342d
 8013398:	0801342d 	.word	0x0801342d
 801339c:	0801342d 	.word	0x0801342d
 80133a0:	08013c35 	.word	0x08013c35
 80133a4:	08013c35 	.word	0x08013c35
 80133a8:	08013c35 	.word	0x08013c35
 80133ac:	08013c35 	.word	0x08013c35
 80133b0:	08013c35 	.word	0x08013c35
 80133b4:	08013c35 	.word	0x08013c35
 80133b8:	08013acb 	.word	0x08013acb
 80133bc:	08013acb 	.word	0x08013acb
 80133c0:	08013acb 	.word	0x08013acb
 80133c4:	08013acb 	.word	0x08013acb
 80133c8:	08013acb 	.word	0x08013acb
 80133cc:	08013acb 	.word	0x08013acb
 80133d0:	08013e8d 	.word	0x08013e8d
 80133d4:	08013f01 	.word	0x08013f01
 80133d8:	08013f21 	.word	0x08013f21
 80133dc:	08014027 	.word	0x08014027
 80133e0:	08013f97 	.word	0x08013f97
 80133e4:	080140ad 	.word	0x080140ad
 80133e8:	08014133 	.word	0x08014133
 80133ec:	080139af 	.word	0x080139af
 80133f0:	080139af 	.word	0x080139af
 80133f4:	08013a47 	.word	0x08013a47
 80133f8:	0801372d 	.word	0x0801372d
 80133fc:	0801372d 	.word	0x0801372d
 8013400:	0801372d 	.word	0x0801372d
 8013404:	0801372d 	.word	0x0801372d
 8013408:	0801372d 	.word	0x0801372d
 801340c:	0801372d 	.word	0x0801372d
 8013410:	0801372d 	.word	0x0801372d
 8013414:	080137dd 	.word	0x080137dd
 8013418:	080138c9 	.word	0x080138c9
 801341c:	0801396b 	.word	0x0801396b
 8013420:	080141ef 	.word	0x080141ef
 8013424:	080141ef 	.word	0x080141ef
 8013428:	080141ef 	.word	0x080141ef
      case COUPLING:   // ˢ����ʾ���ģʽ״̬
      case V0_POSI:    // ˢ����ʾ��ֱƫ��λ��
      case V1_POSI:    // ˢ����ʾ��λ�α�λ��
      case V2_POSI:    // ˢ����ʾ��λ�α�λ��
      case YN_TYPE:    // ˢ����ʾ�α���ʽ
        SetColor(GRY, TCOLOR[YN]);
 801342c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8013430:	4619      	mov	r1, r3
 8013432:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013436:	f7fa fbf9 	bl	800dc2c <SetColor>
        if(i == Y_RANGES || i == COUPLING||i == PROBEATT)
 801343a:	8afb      	ldrh	r3, [r7, #22]
 801343c:	2b00      	cmp	r3, #0
 801343e:	d005      	beq.n	801344c <Update_Detail+0x1c0>
 8013440:	8afb      	ldrh	r3, [r7, #22]
 8013442:	2b01      	cmp	r3, #1
 8013444:	d002      	beq.n	801344c <Update_Detail+0x1c0>
 8013446:	8afb      	ldrh	r3, [r7, #22]
 8013448:	2b02      	cmp	r3, #2
 801344a:	d138      	bne.n	80134be <Update_Detail+0x232>
        {
      Draw_Circle_D(INV, S_X[Y_RANGES]-3, TITLE_Y_POS, 11, 0, 6*7);
 801344c:	232f      	movs	r3, #47	; 0x2f
 801344e:	b29b      	uxth	r3, r3
 8013450:	3b03      	subs	r3, #3
 8013452:	b29b      	uxth	r3, r3
 8013454:	b219      	sxth	r1, r3
 8013456:	232a      	movs	r3, #42	; 0x2a
 8013458:	9301      	str	r3, [sp, #4]
 801345a:	2300      	movs	r3, #0
 801345c:	9300      	str	r3, [sp, #0]
 801345e:	230b      	movs	r3, #11
 8013460:	22e1      	movs	r2, #225	; 0xe1
 8013462:	2001      	movs	r0, #1
 8013464:	f7fa fcd0 	bl	800de08 <Draw_Circle_D>
      DispStr(S_X[Y_RANGES], TITLE_Y_POS, INV,      (List[Y_RANGES].PTR +(Range)*6));
 8013468:	202f      	movs	r0, #47	; 0x2f
 801346a:	4b3b      	ldr	r3, [pc, #236]	; (8013558 <Update_Detail+0x2cc>)
 801346c:	6819      	ldr	r1, [r3, #0]
 801346e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8013472:	4613      	mov	r3, r2
 8013474:	005b      	lsls	r3, r3, #1
 8013476:	4413      	add	r3, r2
 8013478:	005b      	lsls	r3, r3, #1
 801347a:	440b      	add	r3, r1
 801347c:	2201      	movs	r2, #1
 801347e:	21e1      	movs	r1, #225	; 0xe1
 8013480:	f7fa fbec 	bl	800dc5c <DispStr>
      DispStr(S_X[COUPLING], TITLE_Y_POS, INV,      (List[COUPLING].PTR +(List[COUPLING].Val)*6));
 8013484:	2047      	movs	r0, #71	; 0x47
 8013486:	4b34      	ldr	r3, [pc, #208]	; (8013558 <Update_Detail+0x2cc>)
 8013488:	689a      	ldr	r2, [r3, #8]
 801348a:	4b33      	ldr	r3, [pc, #204]	; (8013558 <Update_Detail+0x2cc>)
 801348c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8013490:	4619      	mov	r1, r3
 8013492:	460b      	mov	r3, r1
 8013494:	005b      	lsls	r3, r3, #1
 8013496:	440b      	add	r3, r1
 8013498:	005b      	lsls	r3, r3, #1
 801349a:	4413      	add	r3, r2
 801349c:	2201      	movs	r2, #1
 801349e:	21e1      	movs	r1, #225	; 0xe1
 80134a0:	f7fa fbdc 	bl	800dc5c <DispStr>
      DispStr10x14(S_X[PROBEATT], TITLE_Y_POS, PRN+SYMB,(List[PROBEATT].Val?("A"):("B")));
 80134a4:	2020      	movs	r0, #32
 80134a6:	4b2c      	ldr	r3, [pc, #176]	; (8013558 <Update_Detail+0x2cc>)
 80134a8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d001      	beq.n	80134b4 <Update_Detail+0x228>
 80134b0:	4b2c      	ldr	r3, [pc, #176]	; (8013564 <Update_Detail+0x2d8>)
 80134b2:	e000      	b.n	80134b6 <Update_Detail+0x22a>
 80134b4:	4b2c      	ldr	r3, [pc, #176]	; (8013568 <Update_Detail+0x2dc>)
 80134b6:	2210      	movs	r2, #16
 80134b8:	21e1      	movs	r1, #225	; 0xe1
 80134ba:	f7fa fe37 	bl	800e12c <DispStr10x14>
        }
        ParamTab[P1x2] = 2*((List[V0_POSI].Val+1));
 80134be:	4b26      	ldr	r3, [pc, #152]	; (8013558 <Update_Detail+0x2cc>)
 80134c0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80134c4:	3301      	adds	r3, #1
 80134c6:	b29b      	uxth	r3, r3
 80134c8:	005b      	lsls	r3, r3, #1
 80134ca:	b29b      	uxth	r3, r3
 80134cc:	b21a      	sxth	r2, r3
 80134ce:	4b27      	ldr	r3, [pc, #156]	; (801356c <Update_Detail+0x2e0>)
 80134d0:	829a      	strh	r2, [r3, #20]
        ParamTab[VTx2] = ParamTab[P1x2]+ 2*(List[THRESHOLD].Val+1);
 80134d2:	4b26      	ldr	r3, [pc, #152]	; (801356c <Update_Detail+0x2e0>)
 80134d4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80134d8:	b29a      	uxth	r2, r3
 80134da:	4b1f      	ldr	r3, [pc, #124]	; (8013558 <Update_Detail+0x2cc>)
 80134dc:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 80134e0:	3301      	adds	r3, #1
 80134e2:	b29b      	uxth	r3, r3
 80134e4:	005b      	lsls	r3, r3, #1
 80134e6:	b29b      	uxth	r3, r3
 80134e8:	4413      	add	r3, r2
 80134ea:	b29b      	uxth	r3, r3
 80134ec:	b21a      	sxth	r2, r3
 80134ee:	4b1f      	ldr	r3, [pc, #124]	; (801356c <Update_Detail+0x2e0>)
 80134f0:	839a      	strh	r2, [r3, #28]
        ParamTab[V1x2] = 2*(List[V1_POSI].Val+1);
 80134f2:	4b19      	ldr	r3, [pc, #100]	; (8013558 <Update_Detail+0x2cc>)
 80134f4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80134f8:	3301      	adds	r3, #1
 80134fa:	b29b      	uxth	r3, r3
 80134fc:	005b      	lsls	r3, r3, #1
 80134fe:	b29b      	uxth	r3, r3
 8013500:	b21a      	sxth	r2, r3
 8013502:	4b1a      	ldr	r3, [pc, #104]	; (801356c <Update_Detail+0x2e0>)
 8013504:	83da      	strh	r2, [r3, #30]
        ParamTab[V2x2] = 2*(List[V2_POSI].Val+1);
 8013506:	4b14      	ldr	r3, [pc, #80]	; (8013558 <Update_Detail+0x2cc>)
 8013508:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 801350c:	3301      	adds	r3, #1
 801350e:	b29b      	uxth	r3, r3
 8013510:	005b      	lsls	r3, r3, #1
 8013512:	b29b      	uxth	r3, r3
 8013514:	b21a      	sxth	r2, r3
 8013516:	4b15      	ldr	r3, [pc, #84]	; (801356c <Update_Detail+0x2e0>)
 8013518:	841a      	strh	r2, [r3, #32]
        ParamTab[V1F]  = (List[YN_TYPE].Val)? L_HID : SHOW;
 801351a:	4b0f      	ldr	r3, [pc, #60]	; (8013558 <Update_Detail+0x2cc>)
 801351c:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8013520:	2b00      	cmp	r3, #0
 8013522:	d001      	beq.n	8013528 <Update_Detail+0x29c>
 8013524:	2202      	movs	r2, #2
 8013526:	e000      	b.n	801352a <Update_Detail+0x29e>
 8013528:	2200      	movs	r2, #0
 801352a:	4b10      	ldr	r3, [pc, #64]	; (801356c <Update_Detail+0x2e0>)
 801352c:	815a      	strh	r2, [r3, #10]
        ParamTab[V2F]  = (List[YN_TYPE].Val)? L_HID : SHOW;
 801352e:	4b0a      	ldr	r3, [pc, #40]	; (8013558 <Update_Detail+0x2cc>)
 8013530:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8013534:	2b00      	cmp	r3, #0
 8013536:	d01b      	beq.n	8013570 <Update_Detail+0x2e4>
 8013538:	2202      	movs	r2, #2
 801353a:	e01a      	b.n	8013572 <Update_Detail+0x2e6>
 801353c:	2000057c 	.word	0x2000057c
 8013540:	20006886 	.word	0x20006886
 8013544:	20002862 	.word	0x20002862
 8013548:	2000284a 	.word	0x2000284a
 801354c:	20000560 	.word	0x20000560
 8013550:	20006878 	.word	0x20006878
 8013554:	2000688c 	.word	0x2000688c
 8013558:	20000298 	.word	0x20000298
 801355c:	200007a4 	.word	0x200007a4
 8013560:	200001cc 	.word	0x200001cc
 8013564:	08000958 	.word	0x08000958
 8013568:	0800095c 	.word	0x0800095c
 801356c:	20000140 	.word	0x20000140
 8013570:	2200      	movs	r2, #0
 8013572:	4ba6      	ldr	r3, [pc, #664]	; (801380c <Update_Detail+0x580>)
 8013574:	819a      	strh	r2, [r3, #12]

        Tmp  =(ParamTab[V1x2]- ParamTab[V2x2])/2;         // ˢ����ʾV2-V1��ֵ
 8013576:	4ba5      	ldr	r3, [pc, #660]	; (801380c <Update_Detail+0x580>)
 8013578:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801357c:	461a      	mov	r2, r3
 801357e:	4ba3      	ldr	r3, [pc, #652]	; (801380c <Update_Detail+0x580>)
 8013580:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8013584:	1ad3      	subs	r3, r2, r3
 8013586:	0fda      	lsrs	r2, r3, #31
 8013588:	4413      	add	r3, r2
 801358a:	105b      	asrs	r3, r3, #1
 801358c:	613b      	str	r3, [r7, #16]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 801358e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013592:	4a9f      	ldr	r2, [pc, #636]	; (8013810 <Update_Detail+0x584>)
 8013594:	5cd3      	ldrb	r3, [r2, r3]
 8013596:	461c      	mov	r4, r3
 8013598:	f9b7 3000 	ldrsh.w	r3, [r7]
 801359c:	4a9d      	ldr	r2, [pc, #628]	; (8013814 <Update_Detail+0x588>)
 801359e:	5cd3      	ldrb	r3, [r2, r3]
 80135a0:	4618      	mov	r0, r3
 80135a2:	f7fe fb2f 	bl	8011c04 <Exp>
 80135a6:	4603      	mov	r3, r0
 80135a8:	fb03 f204 	mul.w	r2, r3, r4
 80135ac:	693b      	ldr	r3, [r7, #16]
 80135ae:	fb02 f303 	mul.w	r3, r2, r3
 80135b2:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp, V[0], 3, UNSIGN);
 80135b4:	2301      	movs	r3, #1
 80135b6:	9300      	str	r3, [sp, #0]
 80135b8:	2303      	movs	r3, #3
 80135ba:	4a97      	ldr	r2, [pc, #604]	; (8013818 <Update_Detail+0x58c>)
 80135bc:	6939      	ldr	r1, [r7, #16]
 80135be:	4897      	ldr	r0, [pc, #604]	; (801381c <Update_Detail+0x590>)
 80135c0:	f7fe fa24 	bl	8011a0c <Value2Str>
        Draw_Circle_D(INV, S_X[V1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 80135c4:	2307      	movs	r3, #7
 80135c6:	b29b      	uxth	r3, r3
 80135c8:	3b03      	subs	r3, #3
 80135ca:	b29b      	uxth	r3, r3
 80135cc:	b219      	sxth	r1, r3
 80135ce:	2336      	movs	r3, #54	; 0x36
 80135d0:	9301      	str	r3, [sp, #4]
 80135d2:	2300      	movs	r3, #0
 80135d4:	9300      	str	r3, [sp, #0]
 80135d6:	230b      	movs	r3, #11
 80135d8:	2203      	movs	r2, #3
 80135da:	2001      	movs	r0, #1
 80135dc:	f7fa fc14 	bl	800de08 <Draw_Circle_D>
        DispStr(S_X[V1_POSI]+0*6, LABLE_Y, INV+SYMB, "]");
 80135e0:	2007      	movs	r0, #7
 80135e2:	4b8f      	ldr	r3, [pc, #572]	; (8013820 <Update_Detail+0x594>)
 80135e4:	2211      	movs	r2, #17
 80135e6:	2103      	movs	r1, #3
 80135e8:	f7fa fb38 	bl	800dc5c <DispStr>
        DispStr(S_X[V1_POSI]+1*6, LABLE_Y, INV,      "V:      ");
 80135ec:	2307      	movs	r3, #7
 80135ee:	b29b      	uxth	r3, r3
 80135f0:	3306      	adds	r3, #6
 80135f2:	b29b      	uxth	r3, r3
 80135f4:	b218      	sxth	r0, r3
 80135f6:	4b8b      	ldr	r3, [pc, #556]	; (8013824 <Update_Detail+0x598>)
 80135f8:	2201      	movs	r2, #1
 80135fa:	2103      	movs	r1, #3
 80135fc:	f7fa fb2e 	bl	800dc5c <DispStr>
        DispStr(S_X[V1_POSI]+7*6, LABLE_Y, INV,  "  ");
 8013600:	2307      	movs	r3, #7
 8013602:	b29b      	uxth	r3, r3
 8013604:	332a      	adds	r3, #42	; 0x2a
 8013606:	b29b      	uxth	r3, r3
 8013608:	b218      	sxth	r0, r3
 801360a:	4b87      	ldr	r3, [pc, #540]	; (8013828 <Update_Detail+0x59c>)
 801360c:	2201      	movs	r2, #1
 801360e:	2103      	movs	r1, #3
 8013610:	f7fa fb24 	bl	800dc5c <DispStr>
        DispStr(S_X[V1_POSI]+3*6, LABLE_Y, INV,  (char *)NumStr);
 8013614:	2307      	movs	r3, #7
 8013616:	b29b      	uxth	r3, r3
 8013618:	3312      	adds	r3, #18
 801361a:	b29b      	uxth	r3, r3
 801361c:	b218      	sxth	r0, r3
 801361e:	4b7f      	ldr	r3, [pc, #508]	; (801381c <Update_Detail+0x590>)
 8013620:	2201      	movs	r2, #1
 8013622:	2103      	movs	r1, #3
 8013624:	f7fa fb1a 	bl	800dc5c <DispStr>

        SetColor(GRY, TCOLOR[TRG]);
 8013628:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 801362c:	4619      	mov	r1, r3
 801362e:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013632:	f7fa fafb 	bl	800dc2c <SetColor>
        Tmp  = List[SENSITIVE].Val;                       // ˢ����ʾ�����ز�ֵ
 8013636:	4b7d      	ldr	r3, [pc, #500]	; (801382c <Update_Detail+0x5a0>)
 8013638:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 801363c:	613b      	str	r3, [r7, #16]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 801363e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013642:	4a73      	ldr	r2, [pc, #460]	; (8013810 <Update_Detail+0x584>)
 8013644:	5cd3      	ldrb	r3, [r2, r3]
 8013646:	461c      	mov	r4, r3
 8013648:	f9b7 3000 	ldrsh.w	r3, [r7]
 801364c:	4a71      	ldr	r2, [pc, #452]	; (8013814 <Update_Detail+0x588>)
 801364e:	5cd3      	ldrb	r3, [r2, r3]
 8013650:	4618      	mov	r0, r3
 8013652:	f7fe fad7 	bl	8011c04 <Exp>
 8013656:	4603      	mov	r3, r0
 8013658:	fb03 f204 	mul.w	r2, r3, r4
 801365c:	693b      	ldr	r3, [r7, #16]
 801365e:	fb02 f303 	mul.w	r3, r2, r3
 8013662:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp,V[0], 2, UNSIGN);
 8013664:	2301      	movs	r3, #1
 8013666:	9300      	str	r3, [sp, #0]
 8013668:	2302      	movs	r3, #2
 801366a:	4a6b      	ldr	r2, [pc, #428]	; (8013818 <Update_Detail+0x58c>)
 801366c:	6939      	ldr	r1, [r7, #16]
 801366e:	486b      	ldr	r0, [pc, #428]	; (801381c <Update_Detail+0x590>)
 8013670:	f7fe f9cc 	bl	8011a0c <Value2Str>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  "     ");
 8013674:	23e7      	movs	r3, #231	; 0xe7
 8013676:	b29b      	uxth	r3, r3
 8013678:	3309      	adds	r3, #9
 801367a:	b29b      	uxth	r3, r3
 801367c:	b218      	sxth	r0, r3
 801367e:	4b6c      	ldr	r3, [pc, #432]	; (8013830 <Update_Detail+0x5a4>)
 8013680:	2201      	movs	r2, #1
 8013682:	21e1      	movs	r1, #225	; 0xe1
 8013684:	f7fa faea 	bl	800dc5c <DispStr>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  (char *)NumStr);
 8013688:	23e7      	movs	r3, #231	; 0xe7
 801368a:	b29b      	uxth	r3, r3
 801368c:	3309      	adds	r3, #9
 801368e:	b29b      	uxth	r3, r3
 8013690:	b218      	sxth	r0, r3
 8013692:	4b62      	ldr	r3, [pc, #392]	; (801381c <Update_Detail+0x590>)
 8013694:	2201      	movs	r2, #1
 8013696:	21e1      	movs	r1, #225	; 0xe1
 8013698:	f7fa fae0 	bl	800dc5c <DispStr>
        DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, INV+SYMB,"E");
 801369c:	20e7      	movs	r0, #231	; 0xe7
 801369e:	4b65      	ldr	r3, [pc, #404]	; (8013834 <Update_Detail+0x5a8>)
 80136a0:	2211      	movs	r2, #17
 80136a2:	21e1      	movs	r1, #225	; 0xe1
 80136a4:	f7fa fd42 	bl	800e12c <DispStr10x14>
        GainA  = (char)List[Y_RANGES].Val;
 80136a8:	4b60      	ldr	r3, [pc, #384]	; (801382c <Update_Detail+0x5a0>)
 80136aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80136ae:	b2db      	uxtb	r3, r3
 80136b0:	b21a      	sxth	r2, r3
 80136b2:	4b61      	ldr	r3, [pc, #388]	; (8013838 <Update_Detail+0x5ac>)
 80136b4:	801a      	strh	r2, [r3, #0]

        if((char)List[Y_RANGES].Val>1)
 80136b6:	4b5d      	ldr	r3, [pc, #372]	; (801382c <Update_Detail+0x5a0>)
 80136b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80136bc:	b2db      	uxtb	r3, r3
 80136be:	2b01      	cmp	r3, #1
 80136c0:	d903      	bls.n	80136ca <Update_Detail+0x43e>
          KindA  = HV;
 80136c2:	4b5e      	ldr	r3, [pc, #376]	; (801383c <Update_Detail+0x5b0>)
 80136c4:	2201      	movs	r2, #1
 80136c6:	801a      	strh	r2, [r3, #0]
 80136c8:	e002      	b.n	80136d0 <Update_Detail+0x444>
        else
          KindA  = LV;                //Ch1ѡ���ѹ���ѹ����
 80136ca:	4b5c      	ldr	r3, [pc, #368]	; (801383c <Update_Detail+0x5b0>)
 80136cc:	2200      	movs	r2, #0
 80136ce:	801a      	strh	r2, [r3, #0]
        StateA =  ((char)List[Y_RANGES].Val>5)?ACT: GND;
 80136d0:	4b56      	ldr	r3, [pc, #344]	; (801382c <Update_Detail+0x5a0>)
 80136d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80136d6:	b2db      	uxtb	r3, r3
 80136d8:	2b05      	cmp	r3, #5
 80136da:	d901      	bls.n	80136e0 <Update_Detail+0x454>
 80136dc:	2204      	movs	r2, #4
 80136de:	e000      	b.n	80136e2 <Update_Detail+0x456>
 80136e0:	2200      	movs	r2, #0
 80136e2:	4b57      	ldr	r3, [pc, #348]	; (8013840 <Update_Detail+0x5b4>)
 80136e4:	801a      	strh	r2, [r3, #0]

        CouplA = (List[COUPLING].Val)? AC : DC;                      // AC);  //AC/DC��Ϸ�ʽ
 80136e6:	4b51      	ldr	r3, [pc, #324]	; (801382c <Update_Detail+0x5a0>)
 80136e8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d001      	beq.n	80136f4 <Update_Detail+0x468>
 80136f0:	2200      	movs	r2, #0
 80136f2:	e000      	b.n	80136f6 <Update_Detail+0x46a>
 80136f4:	2202      	movs	r2, #2
 80136f6:	4b53      	ldr	r3, [pc, #332]	; (8013844 <Update_Detail+0x5b8>)
 80136f8:	801a      	strh	r2, [r3, #0]
        BIOS_Ctrl(AiRANGE, KindA+CouplA+StateA);             //Ch1״̬ˢ��
 80136fa:	4b50      	ldr	r3, [pc, #320]	; (801383c <Update_Detail+0x5b0>)
 80136fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013700:	461a      	mov	r2, r3
 8013702:	4b50      	ldr	r3, [pc, #320]	; (8013844 <Update_Detail+0x5b8>)
 8013704:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013708:	4413      	add	r3, r2
 801370a:	4a4d      	ldr	r2, [pc, #308]	; (8013840 <Update_Detail+0x5b4>)
 801370c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8013710:	4413      	add	r3, r2
 8013712:	4619      	mov	r1, r3
 8013714:	2007      	movs	r0, #7
 8013716:	f7f8 fe29 	bl	800c36c <BIOS_Ctrl>
        AiPosi(List[V0_POSI].Val);                        //Ch1Ӳ����Ӧλ��
 801371a:	4b44      	ldr	r3, [pc, #272]	; (801382c <Update_Detail+0x5a0>)
 801371c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8013720:	b2db      	uxtb	r3, r3
 8013722:	4618      	mov	r0, r3
 8013724:	f001 fc5c 	bl	8014fe0 <AiPosi>
        break;
 8013728:	f000 bd61 	b.w	80141ee <Update_Detail+0xf62>
      case SAVE_BUF:
      case SAVE_CSV:
      case SAVE_SVG:
      case LOAD_DAT: //��ʾ��ѡ��Ҫ��ȡ���ļ����
      case LOAD_BUF:
        SetColor(GRY, TCOLOR[FN]);
 801372c:	f64f 4310 	movw	r3, #64528	; 0xfc10
 8013730:	4619      	mov	r1, r3
 8013732:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013736:	f7fa fa79 	bl	800dc2c <SetColor>
        u8ToDec3(NumStr, List[i].Val);
 801373a:	8afb      	ldrh	r3, [r7, #22]
 801373c:	4a3b      	ldr	r2, [pc, #236]	; (801382c <Update_Detail+0x5a0>)
 801373e:	00db      	lsls	r3, r3, #3
 8013740:	4413      	add	r3, r2
 8013742:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013746:	b2db      	uxtb	r3, r3
 8013748:	4619      	mov	r1, r3
 801374a:	4834      	ldr	r0, [pc, #208]	; (801381c <Update_Detail+0x590>)
 801374c:	f7fe f8f6 	bl	801193c <u8ToDec3>
        Draw_Circle_D(INV, S_X[i]-3, LABLE_Y, 11, 0, 6*11);
 8013750:	8afb      	ldrh	r3, [r7, #22]
 8013752:	4a3d      	ldr	r2, [pc, #244]	; (8013848 <Update_Detail+0x5bc>)
 8013754:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013758:	b29b      	uxth	r3, r3
 801375a:	3b03      	subs	r3, #3
 801375c:	b29b      	uxth	r3, r3
 801375e:	b219      	sxth	r1, r3
 8013760:	2342      	movs	r3, #66	; 0x42
 8013762:	9301      	str	r3, [sp, #4]
 8013764:	2300      	movs	r3, #0
 8013766:	9300      	str	r3, [sp, #0]
 8013768:	230b      	movs	r3, #11
 801376a:	2203      	movs	r2, #3
 801376c:	2001      	movs	r0, #1
 801376e:	f7fa fb4b 	bl	800de08 <Draw_Circle_D>
        DispStr(S_X[i],    LABLE_Y, INV, ((i > SAVE_SVG)? "Load" : "Save"));//0513
 8013772:	8afb      	ldrh	r3, [r7, #22]
 8013774:	4a34      	ldr	r2, [pc, #208]	; (8013848 <Update_Detail+0x5bc>)
 8013776:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 801377a:	8afb      	ldrh	r3, [r7, #22]
 801377c:	2b21      	cmp	r3, #33	; 0x21
 801377e:	d901      	bls.n	8013784 <Update_Detail+0x4f8>
 8013780:	4b32      	ldr	r3, [pc, #200]	; (801384c <Update_Detail+0x5c0>)
 8013782:	e000      	b.n	8013786 <Update_Detail+0x4fa>
 8013784:	4b32      	ldr	r3, [pc, #200]	; (8013850 <Update_Detail+0x5c4>)
 8013786:	2201      	movs	r2, #1
 8013788:	2103      	movs	r1, #3
 801378a:	f7fa fa67 	bl	800dc5c <DispStr>
        DispStr(S_X[i]+24, LABLE_Y, INV, (char *)NumStr);
 801378e:	8afb      	ldrh	r3, [r7, #22]
 8013790:	4a2d      	ldr	r2, [pc, #180]	; (8013848 <Update_Detail+0x5bc>)
 8013792:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013796:	b29b      	uxth	r3, r3
 8013798:	3318      	adds	r3, #24
 801379a:	b29b      	uxth	r3, r3
 801379c:	b218      	sxth	r0, r3
 801379e:	4b1f      	ldr	r3, [pc, #124]	; (801381c <Update_Detail+0x590>)
 80137a0:	2201      	movs	r2, #1
 80137a2:	2103      	movs	r1, #3
 80137a4:	f7fa fa5a 	bl	800dc5c <DispStr>
        DispStr(S_X[i]+42, LABLE_Y, INV, (List[i].PTR +(i - SAVE_BMP)*6));
 80137a8:	8afb      	ldrh	r3, [r7, #22]
 80137aa:	4a27      	ldr	r2, [pc, #156]	; (8013848 <Update_Detail+0x5bc>)
 80137ac:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80137b0:	b29b      	uxth	r3, r3
 80137b2:	332a      	adds	r3, #42	; 0x2a
 80137b4:	b29b      	uxth	r3, r3
 80137b6:	b218      	sxth	r0, r3
 80137b8:	8afb      	ldrh	r3, [r7, #22]
 80137ba:	4a1c      	ldr	r2, [pc, #112]	; (801382c <Update_Detail+0x5a0>)
 80137bc:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80137c0:	8afb      	ldrh	r3, [r7, #22]
 80137c2:	f1a3 021d 	sub.w	r2, r3, #29
 80137c6:	4613      	mov	r3, r2
 80137c8:	005b      	lsls	r3, r3, #1
 80137ca:	4413      	add	r3, r2
 80137cc:	005b      	lsls	r3, r3, #1
 80137ce:	440b      	add	r3, r1
 80137d0:	2201      	movs	r2, #1
 80137d2:	2103      	movs	r1, #3
 80137d4:	f7fa fa42 	bl	800dc5c <DispStr>
        break;
 80137d8:	f000 bd09 	b.w	80141ee <Update_Detail+0xf62>

      case TPYE_OUT:
        if(List[TPYE_OUT].Val ==0) //suqar
 80137dc:	4b13      	ldr	r3, [pc, #76]	; (801382c <Update_Detail+0x5a0>)
 80137de:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d136      	bne.n	8013854 <Update_Detail+0x5c8>
        {
          BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 80137e6:	2100      	movs	r1, #0
 80137e8:	2000      	movs	r0, #0
 80137ea:	f7f8 fdbf 	bl	800c36c <BIOS_Ctrl>
          Set_Fout(List[FREQ_OUT].Val);
 80137ee:	4b0f      	ldr	r3, [pc, #60]	; (801382c <Update_Detail+0x5a0>)
 80137f0:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 80137f4:	4618      	mov	r0, r3
 80137f6:	f7f8 ff43 	bl	800c680 <Set_Fout>
          Set_Duty();
 80137fa:	f7f8 ff15 	bl	800c628 <Set_Duty>
          BIOS_Ctrl(OUT_MOD, PULSED);             // �趨�������ģʽ
 80137fe:	2104      	movs	r1, #4
 8013800:	2000      	movs	r0, #0
 8013802:	f7f8 fdb3 	bl	800c36c <BIOS_Ctrl>
           BIOS_Ctrl(OUT_CNT, 180);
           BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
           BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
        }

      break;
 8013806:	f000 bcf2 	b.w	80141ee <Update_Detail+0xf62>
 801380a:	bf00      	nop
 801380c:	20000140 	.word	0x20000140
 8013810:	08002130 	.word	0x08002130
 8013814:	08002108 	.word	0x08002108
 8013818:	08001d00 	.word	0x08001d00
 801381c:	2000283c 	.word	0x2000283c
 8013820:	08000960 	.word	0x08000960
 8013824:	08000964 	.word	0x08000964
 8013828:	080009d0 	.word	0x080009d0
 801382c:	20000298 	.word	0x20000298
 8013830:	08000990 	.word	0x08000990
 8013834:	08000998 	.word	0x08000998
 8013838:	2000284a 	.word	0x2000284a
 801383c:	20006886 	.word	0x20006886
 8013840:	20002862 	.word	0x20002862
 8013844:	20006888 	.word	0x20006888
 8013848:	0800215c 	.word	0x0800215c
 801384c:	08000948 	.word	0x08000948
 8013850:	08000950 	.word	0x08000950
          if(List[FREQ_OUT].Val > MAX_FREQ)
 8013854:	4bbf      	ldr	r3, [pc, #764]	; (8013b54 <Update_Detail+0x8c8>)
 8013856:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 801385a:	2b09      	cmp	r3, #9
 801385c:	dd03      	ble.n	8013866 <Update_Detail+0x5da>
             List[FREQ_OUT].Val = MAX_FREQ ;   //10KHz
 801385e:	4bbd      	ldr	r3, [pc, #756]	; (8013b54 <Update_Detail+0x8c8>)
 8013860:	2209      	movs	r2, #9
 8013862:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
           BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 8013866:	2100      	movs	r1, #0
 8013868:	2000      	movs	r0, #0
 801386a:	f7f8 fd7f 	bl	800c36c <BIOS_Ctrl>
           htim7.Init.Prescaler = Dac_Psc[List[FREQ_OUT].Val] - 1;
 801386e:	4bb9      	ldr	r3, [pc, #740]	; (8013b54 <Update_Detail+0x8c8>)
 8013870:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013874:	461a      	mov	r2, r3
 8013876:	4bb8      	ldr	r3, [pc, #736]	; (8013b58 <Update_Detail+0x8cc>)
 8013878:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801387c:	3b01      	subs	r3, #1
 801387e:	461a      	mov	r2, r3
 8013880:	4bb6      	ldr	r3, [pc, #728]	; (8013b5c <Update_Detail+0x8d0>)
 8013882:	605a      	str	r2, [r3, #4]
           BIOS_Ctrl(DAC_TIM, Dac_Tim[List[FREQ_OUT].Val]-1); // 72MHz/2/180/100 = 2KHz ģ���������(ÿ����36��)
 8013884:	4bb3      	ldr	r3, [pc, #716]	; (8013b54 <Update_Detail+0x8c8>)
 8013886:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 801388a:	461a      	mov	r2, r3
 801388c:	4bb4      	ldr	r3, [pc, #720]	; (8013b60 <Update_Detail+0x8d4>)
 801388e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8013892:	3b01      	subs	r3, #1
 8013894:	4619      	mov	r1, r3
 8013896:	2001      	movs	r0, #1
 8013898:	f7f8 fd68 	bl	800c36c <BIOS_Ctrl>
           BIOS_Ctrl(OUT_CNT, 180);
 801389c:	21b4      	movs	r1, #180	; 0xb4
 801389e:	2002      	movs	r0, #2
 80138a0:	f7f8 fd64 	bl	800c36c <BIOS_Ctrl>
           BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
 80138a4:	4bab      	ldr	r3, [pc, #684]	; (8013b54 <Update_Detail+0x8c8>)
 80138a6:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 80138aa:	b2db      	uxtb	r3, r3
 80138ac:	4618      	mov	r0, r3
 80138ae:	f7f8 fd4b 	bl	800c348 <BIOS_Info>
 80138b2:	4603      	mov	r3, r0
 80138b4:	4619      	mov	r1, r3
 80138b6:	2003      	movs	r0, #3
 80138b8:	f7f8 fd58 	bl	800c36c <BIOS_Ctrl>
           BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
 80138bc:	2102      	movs	r1, #2
 80138be:	2000      	movs	r0, #0
 80138c0:	f7f8 fd54 	bl	800c36c <BIOS_Ctrl>
      break;
 80138c4:	f000 bc93 	b.w	80141ee <Update_Detail+0xf62>

      case FREQ_OUT: // ��ʾ�������Ƶ��
        if(List[TPYE_OUT].Val ==0) //suqar
 80138c8:	4ba2      	ldr	r3, [pc, #648]	; (8013b54 <Update_Detail+0x8c8>)
 80138ca:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d111      	bne.n	80138f6 <Update_Detail+0x66a>
        {
          BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 80138d2:	2100      	movs	r1, #0
 80138d4:	2000      	movs	r0, #0
 80138d6:	f7f8 fd49 	bl	800c36c <BIOS_Ctrl>
          Set_Fout(List[FREQ_OUT].Val);
 80138da:	4b9e      	ldr	r3, [pc, #632]	; (8013b54 <Update_Detail+0x8c8>)
 80138dc:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 80138e0:	4618      	mov	r0, r3
 80138e2:	f7f8 fecd 	bl	800c680 <Set_Fout>
          Set_Duty();
 80138e6:	f7f8 fe9f 	bl	800c628 <Set_Duty>
          BIOS_Ctrl(OUT_MOD, PULSED);             // �趨�������ģʽ
 80138ea:	2104      	movs	r1, #4
 80138ec:	2000      	movs	r0, #0
 80138ee:	f7f8 fd3d 	bl	800c36c <BIOS_Ctrl>
          BIOS_Ctrl(DAC_TIM, Dac_Tim[List[FREQ_OUT].Val]-1); // 72MHz/2/180/100 = 2KHz ģ���������(ÿ����36��)
          BIOS_Ctrl(OUT_CNT, 180);
          BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
          BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
        }
        break;
 80138f2:	f000 bc7c 	b.w	80141ee <Update_Detail+0xf62>
          if(List[FREQ_OUT].Val > MAX_FREQ)
 80138f6:	4b97      	ldr	r3, [pc, #604]	; (8013b54 <Update_Detail+0x8c8>)
 80138f8:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 80138fc:	2b09      	cmp	r3, #9
 80138fe:	dd03      	ble.n	8013908 <Update_Detail+0x67c>
            List[FREQ_OUT].Val = MAX_FREQ ;   //10KHz
 8013900:	4b94      	ldr	r3, [pc, #592]	; (8013b54 <Update_Detail+0x8c8>)
 8013902:	2209      	movs	r2, #9
 8013904:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
          BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 8013908:	2100      	movs	r1, #0
 801390a:	2000      	movs	r0, #0
 801390c:	f7f8 fd2e 	bl	800c36c <BIOS_Ctrl>
          htim7.Init.Prescaler = Dac_Psc[List[FREQ_OUT].Val] - 1;
 8013910:	4b90      	ldr	r3, [pc, #576]	; (8013b54 <Update_Detail+0x8c8>)
 8013912:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013916:	461a      	mov	r2, r3
 8013918:	4b8f      	ldr	r3, [pc, #572]	; (8013b58 <Update_Detail+0x8cc>)
 801391a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801391e:	3b01      	subs	r3, #1
 8013920:	461a      	mov	r2, r3
 8013922:	4b8e      	ldr	r3, [pc, #568]	; (8013b5c <Update_Detail+0x8d0>)
 8013924:	605a      	str	r2, [r3, #4]
          BIOS_Ctrl(DAC_TIM, Dac_Tim[List[FREQ_OUT].Val]-1); // 72MHz/2/180/100 = 2KHz ģ���������(ÿ����36��)
 8013926:	4b8b      	ldr	r3, [pc, #556]	; (8013b54 <Update_Detail+0x8c8>)
 8013928:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 801392c:	461a      	mov	r2, r3
 801392e:	4b8c      	ldr	r3, [pc, #560]	; (8013b60 <Update_Detail+0x8d4>)
 8013930:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8013934:	3b01      	subs	r3, #1
 8013936:	4619      	mov	r1, r3
 8013938:	2001      	movs	r0, #1
 801393a:	f7f8 fd17 	bl	800c36c <BIOS_Ctrl>
          BIOS_Ctrl(OUT_CNT, 180);
 801393e:	21b4      	movs	r1, #180	; 0xb4
 8013940:	2002      	movs	r0, #2
 8013942:	f7f8 fd13 	bl	800c36c <BIOS_Ctrl>
          BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
 8013946:	4b83      	ldr	r3, [pc, #524]	; (8013b54 <Update_Detail+0x8c8>)
 8013948:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 801394c:	b2db      	uxtb	r3, r3
 801394e:	4618      	mov	r0, r3
 8013950:	f7f8 fcfa 	bl	800c348 <BIOS_Info>
 8013954:	4603      	mov	r3, r0
 8013956:	4619      	mov	r1, r3
 8013958:	2003      	movs	r0, #3
 801395a:	f7f8 fd07 	bl	800c36c <BIOS_Ctrl>
          BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
 801395e:	2102      	movs	r1, #2
 8013960:	2000      	movs	r0, #0
 8013962:	f7f8 fd03 	bl	800c36c <BIOS_Ctrl>
        break;
 8013966:	f000 bc42 	b.w	80141ee <Update_Detail+0xf62>

      case FREQ_DUT: // ��ʾ�������ռ�ձ�
        SetColor(GRY, TCOLOR[SN]);
 801396a:	f240 531f 	movw	r3, #1311	; 0x51f
 801396e:	4619      	mov	r1, r3
 8013970:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013974:	f7fa f95a 	bl	800dc2c <SetColor>
        Draw_Circle_D(INV, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 8013978:	8afb      	ldrh	r3, [r7, #22]
 801397a:	4a7a      	ldr	r2, [pc, #488]	; (8013b64 <Update_Detail+0x8d8>)
 801397c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013980:	b29b      	uxth	r3, r3
 8013982:	3b03      	subs	r3, #3
 8013984:	b29b      	uxth	r3, r3
 8013986:	b219      	sxth	r1, r3
 8013988:	2336      	movs	r3, #54	; 0x36
 801398a:	9301      	str	r3, [sp, #4]
 801398c:	2300      	movs	r3, #0
 801398e:	9300      	str	r3, [sp, #0]
 8013990:	230b      	movs	r3, #11
 8013992:	2203      	movs	r2, #3
 8013994:	2001      	movs	r0, #1
 8013996:	f7fa fa37 	bl	800de08 <Draw_Circle_D>
        if(List[TPYE_OUT].Val == 0) //suqar
 801399a:	4b6e      	ldr	r3, [pc, #440]	; (8013b54 <Update_Detail+0x8c8>)
 801399c:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	f040 8423 	bne.w	80141ec <Update_Detail+0xf60>
        {
          Set_Duty();
 80139a6:	f7f8 fe3f 	bl	800c628 <Set_Duty>
        }
        break;
 80139aa:	f000 bc1f 	b.w	80141ec <Update_Detail+0xf60>

      case EXT_REFN: // ��ʾ�ο���������
      case EXT_POSI: // ��ʾ�ο�����ƫ��
        SetColor(GRY, TCOLOR[EX]);
 80139ae:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80139b2:	4619      	mov	r1, r3
 80139b4:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80139b8:	f7fa f938 	bl	800dc2c <SetColor>
        if((i == EXT_REFN) || (i == EXT_POSI))
 80139bc:	8afb      	ldrh	r3, [r7, #22]
 80139be:	2b1a      	cmp	r3, #26
 80139c0:	d002      	beq.n	80139c8 <Update_Detail+0x73c>
 80139c2:	8afb      	ldrh	r3, [r7, #22]
 80139c4:	2b1b      	cmp	r3, #27
 80139c6:	d123      	bne.n	8013a10 <Update_Detail+0x784>
        {
          Draw_Circle_D(INV, S_X[EXT_REFN]-3, TITLE_Y_POS, 11, 1, 6*5);
 80139c8:	23a8      	movs	r3, #168	; 0xa8
 80139ca:	b29b      	uxth	r3, r3
 80139cc:	3b03      	subs	r3, #3
 80139ce:	b29b      	uxth	r3, r3
 80139d0:	b219      	sxth	r1, r3
 80139d2:	231e      	movs	r3, #30
 80139d4:	9301      	str	r3, [sp, #4]
 80139d6:	2301      	movs	r3, #1
 80139d8:	9300      	str	r3, [sp, #0]
 80139da:	230b      	movs	r3, #11
 80139dc:	22e1      	movs	r2, #225	; 0xe1
 80139de:	2001      	movs	r0, #1
 80139e0:	f7fa fa12 	bl	800de08 <Draw_Circle_D>
          DispStr(S_X[EXT_REFN], TITLE_Y_POS, INV, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 80139e4:	20a8      	movs	r0, #168	; 0xa8
 80139e6:	4b5b      	ldr	r3, [pc, #364]	; (8013b54 <Update_Detail+0x8c8>)
 80139e8:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d00a      	beq.n	8013a06 <Update_Detail+0x77a>
 80139f0:	4b58      	ldr	r3, [pc, #352]	; (8013b54 <Update_Detail+0x8c8>)
 80139f2:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 80139f6:	461a      	mov	r2, r3
 80139f8:	4613      	mov	r3, r2
 80139fa:	005b      	lsls	r3, r3, #1
 80139fc:	4413      	add	r3, r2
 80139fe:	005b      	lsls	r3, r3, #1
 8013a00:	4a59      	ldr	r2, [pc, #356]	; (8013b68 <Update_Detail+0x8dc>)
 8013a02:	4413      	add	r3, r2
 8013a04:	e000      	b.n	8013a08 <Update_Detail+0x77c>
 8013a06:	4b59      	ldr	r3, [pc, #356]	; (8013b6c <Update_Detail+0x8e0>)
 8013a08:	2201      	movs	r2, #1
 8013a0a:	21e1      	movs	r1, #225	; 0xe1
 8013a0c:	f7fa f926 	bl	800dc5c <DispStr>
        }
        if(List[EXT_REFN].Val < 6) ParamTab[P2x2]=(List[EXT_POSI].Val + 1)*2;
 8013a10:	4b50      	ldr	r3, [pc, #320]	; (8013b54 <Update_Detail+0x8c8>)
 8013a12:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8013a16:	2b05      	cmp	r3, #5
 8013a18:	dc0a      	bgt.n	8013a30 <Update_Detail+0x7a4>
 8013a1a:	4b4e      	ldr	r3, [pc, #312]	; (8013b54 <Update_Detail+0x8c8>)
 8013a1c:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8013a20:	3301      	adds	r3, #1
 8013a22:	b29b      	uxth	r3, r3
 8013a24:	005b      	lsls	r3, r3, #1
 8013a26:	b29b      	uxth	r3, r3
 8013a28:	b21a      	sxth	r2, r3
 8013a2a:	4b51      	ldr	r3, [pc, #324]	; (8013b70 <Update_Detail+0x8e4>)
 8013a2c:	82da      	strh	r2, [r3, #22]
        else                       ParamTab[P2x2]=(List[ V0_POSI].Val + 1)*2;
        break;
 8013a2e:	e3de      	b.n	80141ee <Update_Detail+0xf62>
        else                       ParamTab[P2x2]=(List[ V0_POSI].Val + 1)*2;
 8013a30:	4b48      	ldr	r3, [pc, #288]	; (8013b54 <Update_Detail+0x8c8>)
 8013a32:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8013a36:	3301      	adds	r3, #1
 8013a38:	b29b      	uxth	r3, r3
 8013a3a:	005b      	lsls	r3, r3, #1
 8013a3c:	b29b      	uxth	r3, r3
 8013a3e:	b21a      	sxth	r2, r3
 8013a40:	4b4b      	ldr	r3, [pc, #300]	; (8013b70 <Update_Detail+0x8e4>)
 8013a42:	82da      	strh	r2, [r3, #22]
        break;
 8013a44:	e3d3      	b.n	80141ee <Update_Detail+0xf62>

      case EXT_HIDE:
        if(List[EXT_HIDE].Val == 0) ParamTab[P2F] |=  W_HID;  // W_HID�����ο�����
 8013a46:	4b43      	ldr	r3, [pc, #268]	; (8013b54 <Update_Detail+0x8c8>)
 8013a48:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d108      	bne.n	8013a62 <Update_Detail+0x7d6>
 8013a50:	4b47      	ldr	r3, [pc, #284]	; (8013b70 <Update_Detail+0x8e4>)
 8013a52:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013a56:	f043 0304 	orr.w	r3, r3, #4
 8013a5a:	b21a      	sxth	r2, r3
 8013a5c:	4b44      	ldr	r3, [pc, #272]	; (8013b70 <Update_Detail+0x8e4>)
 8013a5e:	805a      	strh	r2, [r3, #2]
 8013a60:	e007      	b.n	8013a72 <Update_Detail+0x7e6>
        else                        ParamTab[P2F] &= ~W_HID;  // W_HID��ʾ�ο�����
 8013a62:	4b43      	ldr	r3, [pc, #268]	; (8013b70 <Update_Detail+0x8e4>)
 8013a64:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013a68:	f023 0304 	bic.w	r3, r3, #4
 8013a6c:	b21a      	sxth	r2, r3
 8013a6e:	4b40      	ldr	r3, [pc, #256]	; (8013b70 <Update_Detail+0x8e4>)
 8013a70:	805a      	strh	r2, [r3, #2]
        SetColor(GRY, TCOLOR[EX]);
 8013a72:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8013a76:	4619      	mov	r1, r3
 8013a78:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013a7c:	f7fa f8d6 	bl	800dc2c <SetColor>
        Draw_Circle_D(INV, S_X[EXT_REFN]-3, TITLE_Y_POS, 11, 1, 6*5);
 8013a80:	23a8      	movs	r3, #168	; 0xa8
 8013a82:	b29b      	uxth	r3, r3
 8013a84:	3b03      	subs	r3, #3
 8013a86:	b29b      	uxth	r3, r3
 8013a88:	b219      	sxth	r1, r3
 8013a8a:	231e      	movs	r3, #30
 8013a8c:	9301      	str	r3, [sp, #4]
 8013a8e:	2301      	movs	r3, #1
 8013a90:	9300      	str	r3, [sp, #0]
 8013a92:	230b      	movs	r3, #11
 8013a94:	22e1      	movs	r2, #225	; 0xe1
 8013a96:	2001      	movs	r0, #1
 8013a98:	f7fa f9b6 	bl	800de08 <Draw_Circle_D>
        DispStr(S_X[EXT_REFN], TITLE_Y_POS, INV, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 8013a9c:	20a8      	movs	r0, #168	; 0xa8
 8013a9e:	4b2d      	ldr	r3, [pc, #180]	; (8013b54 <Update_Detail+0x8c8>)
 8013aa0:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d00a      	beq.n	8013abe <Update_Detail+0x832>
 8013aa8:	4b2a      	ldr	r3, [pc, #168]	; (8013b54 <Update_Detail+0x8c8>)
 8013aaa:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8013aae:	461a      	mov	r2, r3
 8013ab0:	4613      	mov	r3, r2
 8013ab2:	005b      	lsls	r3, r3, #1
 8013ab4:	4413      	add	r3, r2
 8013ab6:	005b      	lsls	r3, r3, #1
 8013ab8:	4a2b      	ldr	r2, [pc, #172]	; (8013b68 <Update_Detail+0x8dc>)
 8013aba:	4413      	add	r3, r2
 8013abc:	e000      	b.n	8013ac0 <Update_Detail+0x834>
 8013abe:	4b2b      	ldr	r3, [pc, #172]	; (8013b6c <Update_Detail+0x8e0>)
 8013ac0:	2201      	movs	r2, #1
 8013ac2:	21e1      	movs	r1, #225	; 0xe1
 8013ac4:	f7fa f8ca 	bl	800dc5c <DispStr>
      break;
 8013ac8:	e391      	b.n	80141ee <Update_Detail+0xf62>
      case TR_MODE:   // ˢ����ʾ������ʽ
      case FITTRIGG:  // ˢ����ʾ�Զ�������ֵ
      case THRESHOLD: // ˢ����ʾ������ֵ
      case SENSITIVE: // ˢ����ʾ����������
      case TR_TYPE:   // ˢ����ʾ�α���ʽ
        DispStatus();
 8013aca:	f000 fc6b 	bl	80143a4 <DispStatus>
        SetColor(GRY, TCOLOR[TRG]);
 8013ace:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8013ad2:	4619      	mov	r1, r3
 8013ad4:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013ad8:	f7fa f8a8 	bl	800dc2c <SetColor>
        if(i == TR_MODE || i==SENSITIVE)
 8013adc:	8afb      	ldrh	r3, [r7, #22]
 8013ade:	2b0e      	cmp	r3, #14
 8013ae0:	d002      	beq.n	8013ae8 <Update_Detail+0x85c>
 8013ae2:	8afb      	ldrh	r3, [r7, #22]
 8013ae4:	2b11      	cmp	r3, #17
 8013ae6:	d11a      	bne.n	8013b1e <Update_Detail+0x892>
        {
          Draw_Circle_D(INV, S_X[TR_MODE]-3, TITLE_Y_POS, 11, 0, 6*8);
 8013ae8:	23dd      	movs	r3, #221	; 0xdd
 8013aea:	b29b      	uxth	r3, r3
 8013aec:	3b03      	subs	r3, #3
 8013aee:	b29b      	uxth	r3, r3
 8013af0:	b219      	sxth	r1, r3
 8013af2:	2330      	movs	r3, #48	; 0x30
 8013af4:	9301      	str	r3, [sp, #4]
 8013af6:	2300      	movs	r3, #0
 8013af8:	9300      	str	r3, [sp, #0]
 8013afa:	230b      	movs	r3, #11
 8013afc:	22e1      	movs	r2, #225	; 0xe1
 8013afe:	2001      	movs	r0, #1
 8013b00:	f7fa f982 	bl	800de08 <Draw_Circle_D>
          DispStr10x14(S_X[TR_MODE], TITLE_Y_POS, INV+SYMB,(List[TR_MODE].Val?("D"):("C")));
 8013b04:	20dd      	movs	r0, #221	; 0xdd
 8013b06:	4b13      	ldr	r3, [pc, #76]	; (8013b54 <Update_Detail+0x8c8>)
 8013b08:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d001      	beq.n	8013b14 <Update_Detail+0x888>
 8013b10:	4b18      	ldr	r3, [pc, #96]	; (8013b74 <Update_Detail+0x8e8>)
 8013b12:	e000      	b.n	8013b16 <Update_Detail+0x88a>
 8013b14:	4b18      	ldr	r3, [pc, #96]	; (8013b78 <Update_Detail+0x8ec>)
 8013b16:	2211      	movs	r2, #17
 8013b18:	21e1      	movs	r1, #225	; 0xe1
 8013b1a:	f7fa fb07 	bl	800e12c <DispStr10x14>
        }
        if(i == FITTRIGG)
 8013b1e:	8afb      	ldrh	r3, [r7, #22]
 8013b20:	2b0f      	cmp	r3, #15
 8013b22:	d134      	bne.n	8013b8e <Update_Detail+0x902>
        {
          DispStr10x14(S_X[FITTRIGG], TITLE_Y_POS, PRN+SYMB,(List[FITTRIGG].Val?("F"):("B")));
 8013b24:	20cf      	movs	r0, #207	; 0xcf
 8013b26:	4b0b      	ldr	r3, [pc, #44]	; (8013b54 <Update_Detail+0x8c8>)
 8013b28:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d001      	beq.n	8013b34 <Update_Detail+0x8a8>
 8013b30:	4b12      	ldr	r3, [pc, #72]	; (8013b7c <Update_Detail+0x8f0>)
 8013b32:	e000      	b.n	8013b36 <Update_Detail+0x8aa>
 8013b34:	4b12      	ldr	r3, [pc, #72]	; (8013b80 <Update_Detail+0x8f4>)
 8013b36:	2210      	movs	r2, #16
 8013b38:	21e1      	movs	r1, #225	; 0xe1
 8013b3a:	f7fa faf7 	bl	800e12c <DispStr10x14>
          if(List[FITTRIGG].Val)KEYTIME = 300;
 8013b3e:	4b05      	ldr	r3, [pc, #20]	; (8013b54 <Update_Detail+0x8c8>)
 8013b40:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d01f      	beq.n	8013b88 <Update_Detail+0x8fc>
 8013b48:	4b0e      	ldr	r3, [pc, #56]	; (8013b84 <Update_Detail+0x8f8>)
 8013b4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8013b4e:	801a      	strh	r2, [r3, #0]
 8013b50:	e01d      	b.n	8013b8e <Update_Detail+0x902>
 8013b52:	bf00      	nop
 8013b54:	20000298 	.word	0x20000298
 8013b58:	08002338 	.word	0x08002338
 8013b5c:	20006c30 	.word	0x20006c30
 8013b60:	08001d90 	.word	0x08001d90
 8013b64:	0800215c 	.word	0x0800215c
 8013b68:	08001c88 	.word	0x08001c88
 8013b6c:	08001cac 	.word	0x08001cac
 8013b70:	20000140 	.word	0x20000140
 8013b74:	08000988 	.word	0x08000988
 8013b78:	0800098c 	.word	0x0800098c
 8013b7c:	0800099c 	.word	0x0800099c
 8013b80:	0800095c 	.word	0x0800095c
 8013b84:	2000077e 	.word	0x2000077e
          else KEYTIME = 0;
 8013b88:	4bac      	ldr	r3, [pc, #688]	; (8013e3c <Update_Detail+0xbb0>)
 8013b8a:	2200      	movs	r2, #0
 8013b8c:	801a      	strh	r2, [r3, #0]
        }
        ParamTab[VTx2]= ParamTab[P1x2]+2*List[THRESHOLD].Val;
 8013b8e:	4bac      	ldr	r3, [pc, #688]	; (8013e40 <Update_Detail+0xbb4>)
 8013b90:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8013b94:	b29a      	uxth	r2, r3
 8013b96:	4bab      	ldr	r3, [pc, #684]	; (8013e44 <Update_Detail+0xbb8>)
 8013b98:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8013b9c:	b29b      	uxth	r3, r3
 8013b9e:	005b      	lsls	r3, r3, #1
 8013ba0:	b29b      	uxth	r3, r3
 8013ba2:	4413      	add	r3, r2
 8013ba4:	b29b      	uxth	r3, r3
 8013ba6:	b21a      	sxth	r2, r3
 8013ba8:	4ba5      	ldr	r3, [pc, #660]	; (8013e40 <Update_Detail+0xbb4>)
 8013baa:	839a      	strh	r2, [r3, #28]
        Tmp  = List[SENSITIVE].Val;
 8013bac:	4ba5      	ldr	r3, [pc, #660]	; (8013e44 <Update_Detail+0xbb8>)
 8013bae:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8013bb2:	613b      	str	r3, [r7, #16]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8013bb4:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013bb8:	4aa3      	ldr	r2, [pc, #652]	; (8013e48 <Update_Detail+0xbbc>)
 8013bba:	5cd3      	ldrb	r3, [r2, r3]
 8013bbc:	461c      	mov	r4, r3
 8013bbe:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013bc2:	4aa2      	ldr	r2, [pc, #648]	; (8013e4c <Update_Detail+0xbc0>)
 8013bc4:	5cd3      	ldrb	r3, [r2, r3]
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	f7fe f81c 	bl	8011c04 <Exp>
 8013bcc:	4603      	mov	r3, r0
 8013bce:	fb03 f204 	mul.w	r2, r3, r4
 8013bd2:	693b      	ldr	r3, [r7, #16]
 8013bd4:	fb02 f303 	mul.w	r3, r2, r3
 8013bd8:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp, V[0], 2, UNSIGN);
 8013bda:	2301      	movs	r3, #1
 8013bdc:	9300      	str	r3, [sp, #0]
 8013bde:	2302      	movs	r3, #2
 8013be0:	4a9b      	ldr	r2, [pc, #620]	; (8013e50 <Update_Detail+0xbc4>)
 8013be2:	6939      	ldr	r1, [r7, #16]
 8013be4:	489b      	ldr	r0, [pc, #620]	; (8013e54 <Update_Detail+0xbc8>)
 8013be6:	f7fd ff11 	bl	8011a0c <Value2Str>
        DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, INV+SYMB,"E");
 8013bea:	20e7      	movs	r0, #231	; 0xe7
 8013bec:	4b9a      	ldr	r3, [pc, #616]	; (8013e58 <Update_Detail+0xbcc>)
 8013bee:	2211      	movs	r2, #17
 8013bf0:	21e1      	movs	r1, #225	; 0xe1
 8013bf2:	f7fa fa9b 	bl	800e12c <DispStr10x14>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  "     ");
 8013bf6:	23e7      	movs	r3, #231	; 0xe7
 8013bf8:	b29b      	uxth	r3, r3
 8013bfa:	3309      	adds	r3, #9
 8013bfc:	b29b      	uxth	r3, r3
 8013bfe:	b218      	sxth	r0, r3
 8013c00:	4b96      	ldr	r3, [pc, #600]	; (8013e5c <Update_Detail+0xbd0>)
 8013c02:	2201      	movs	r2, #1
 8013c04:	21e1      	movs	r1, #225	; 0xe1
 8013c06:	f7fa f829 	bl	800dc5c <DispStr>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  (char *)NumStr);
 8013c0a:	23e7      	movs	r3, #231	; 0xe7
 8013c0c:	b29b      	uxth	r3, r3
 8013c0e:	3309      	adds	r3, #9
 8013c10:	b29b      	uxth	r3, r3
 8013c12:	b218      	sxth	r0, r3
 8013c14:	4b8f      	ldr	r3, [pc, #572]	; (8013e54 <Update_Detail+0xbc8>)
 8013c16:	2201      	movs	r2, #1
 8013c18:	21e1      	movs	r1, #225	; 0xe1
 8013c1a:	f7fa f81f 	bl	800dc5c <DispStr>
        ParamTab[VTF]=(List[TR_TYPE].Val)? L_HID : SHOW;
 8013c1e:	4b89      	ldr	r3, [pc, #548]	; (8013e44 <Update_Detail+0xbb8>)
 8013c20:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d001      	beq.n	8013c2c <Update_Detail+0x9a0>
 8013c28:	2202      	movs	r2, #2
 8013c2a:	e000      	b.n	8013c2e <Update_Detail+0x9a2>
 8013c2c:	2200      	movs	r2, #0
 8013c2e:	4b84      	ldr	r3, [pc, #528]	; (8013e40 <Update_Detail+0xbb4>)
 8013c30:	811a      	strh	r2, [r3, #8]
        break;
 8013c32:	e2dc      	b.n	80141ee <Update_Detail+0xf62>
      case VIEWPOSI:  // ˢ����ʾˮƽ�Ӵ�λ��
      case SMPL_DPTH: // ˢ����ʾ�������
      case T1_POSI:   // ˢ����ʾ����α�λ��
      case T2_POSI:   // ˢ����ʾ�Ҷ��α�λ��
      case XN_TYPE:   // ˢ����ʾ�α���ʽ
        SetColor(GRY, TCOLOR[XN]);
 8013c34:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8013c38:	4619      	mov	r1, r3
 8013c3a:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013c3e:	f7f9 fff5 	bl	800dc2c <SetColor>
        if(i == TIM_BASE)
 8013c42:	8afb      	ldrh	r3, [r7, #22]
 8013c44:	2b07      	cmp	r3, #7
 8013c46:	d11e      	bne.n	8013c86 <Update_Detail+0x9fa>
        {
          Draw_Circle_D(INV, S_X[i]-3, TITLE_Y_POS, 11, 2, 6*5);
 8013c48:	8afb      	ldrh	r3, [r7, #22]
 8013c4a:	4a85      	ldr	r2, [pc, #532]	; (8013e60 <Update_Detail+0xbd4>)
 8013c4c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013c50:	b29b      	uxth	r3, r3
 8013c52:	3b03      	subs	r3, #3
 8013c54:	b29b      	uxth	r3, r3
 8013c56:	b219      	sxth	r1, r3
 8013c58:	231e      	movs	r3, #30
 8013c5a:	9301      	str	r3, [sp, #4]
 8013c5c:	2302      	movs	r3, #2
 8013c5e:	9300      	str	r3, [sp, #0]
 8013c60:	230b      	movs	r3, #11
 8013c62:	22e1      	movs	r2, #225	; 0xe1
 8013c64:	2001      	movs	r0, #1
 8013c66:	f7fa f8cf 	bl	800de08 <Draw_Circle_D>
          DispStr(S_X[i], TITLE_Y_POS, INV, TimeBase_Str[List[TIM_BASE].Val]);
 8013c6a:	8afb      	ldrh	r3, [r7, #22]
 8013c6c:	4a7c      	ldr	r2, [pc, #496]	; (8013e60 <Update_Detail+0xbd4>)
 8013c6e:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8013c72:	4b74      	ldr	r3, [pc, #464]	; (8013e44 <Update_Detail+0xbb8>)
 8013c74:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013c78:	00db      	lsls	r3, r3, #3
 8013c7a:	4a7a      	ldr	r2, [pc, #488]	; (8013e64 <Update_Detail+0xbd8>)
 8013c7c:	4413      	add	r3, r2
 8013c7e:	2201      	movs	r2, #1
 8013c80:	21e1      	movs	r1, #225	; 0xe1
 8013c82:	f7f9 ffeb 	bl	800dc5c <DispStr>
        }
        if(i == SMPL_DPTH){
 8013c86:	8afb      	ldrh	r3, [r7, #22]
 8013c88:	2b09      	cmp	r3, #9
 8013c8a:	d126      	bne.n	8013cda <Update_Detail+0xa4e>
          Draw_Circle_D(INV, S_X[SMPL_DPTH]-3, LABLE_Y, 11, 0, 6*11);
 8013c8c:	23f8      	movs	r3, #248	; 0xf8
 8013c8e:	b29b      	uxth	r3, r3
 8013c90:	3b03      	subs	r3, #3
 8013c92:	b29b      	uxth	r3, r3
 8013c94:	b219      	sxth	r1, r3
 8013c96:	2342      	movs	r3, #66	; 0x42
 8013c98:	9301      	str	r3, [sp, #4]
 8013c9a:	2300      	movs	r3, #0
 8013c9c:	9300      	str	r3, [sp, #0]
 8013c9e:	230b      	movs	r3, #11
 8013ca0:	2203      	movs	r2, #3
 8013ca2:	2001      	movs	r0, #1
 8013ca4:	f7fa f8b0 	bl	800de08 <Draw_Circle_D>
          DispStr(S_X[SMPL_DPTH],    LABLE_Y,  INV, "SmplDpth:  ");
 8013ca8:	20f8      	movs	r0, #248	; 0xf8
 8013caa:	4b6f      	ldr	r3, [pc, #444]	; (8013e68 <Update_Detail+0xbdc>)
 8013cac:	2201      	movs	r2, #1
 8013cae:	2103      	movs	r1, #3
 8013cb0:	f7f9 ffd4 	bl	800dc5c <DispStr>
          DispStr(S_X[SMPL_DPTH]+6*9, LABLE_Y,  INV, (char *)&D[List[SMPL_DPTH].Val]);
 8013cb4:	23f8      	movs	r3, #248	; 0xf8
 8013cb6:	b29b      	uxth	r3, r3
 8013cb8:	3336      	adds	r3, #54	; 0x36
 8013cba:	b29b      	uxth	r3, r3
 8013cbc:	b218      	sxth	r0, r3
 8013cbe:	4b61      	ldr	r3, [pc, #388]	; (8013e44 <Update_Detail+0xbb8>)
 8013cc0:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8013cc4:	461a      	mov	r2, r3
 8013cc6:	4613      	mov	r3, r2
 8013cc8:	005b      	lsls	r3, r3, #1
 8013cca:	4413      	add	r3, r2
 8013ccc:	005b      	lsls	r3, r3, #1
 8013cce:	4a67      	ldr	r2, [pc, #412]	; (8013e6c <Update_Detail+0xbe0>)
 8013cd0:	4413      	add	r3, r2
 8013cd2:	2201      	movs	r2, #1
 8013cd4:	2103      	movs	r1, #3
 8013cd6:	f7f9 ffc1 	bl	800dc5c <DispStr>
        }
        Update_Windows();
 8013cda:	f000 fbad 	bl	8014438 <Update_Windows>

        ParamTab[T0x1] = 2 + Presampling - List[VIEWPOSI].Val;
 8013cde:	4b64      	ldr	r3, [pc, #400]	; (8013e70 <Update_Detail+0xbe4>)
 8013ce0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013ce4:	b29a      	uxth	r2, r3
 8013ce6:	4b57      	ldr	r3, [pc, #348]	; (8013e44 <Update_Detail+0xbb8>)
 8013ce8:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8013cec:	b29b      	uxth	r3, r3
 8013cee:	1ad3      	subs	r3, r2, r3
 8013cf0:	b29b      	uxth	r3, r3
 8013cf2:	3302      	adds	r3, #2
 8013cf4:	b29b      	uxth	r3, r3
 8013cf6:	b21a      	sxth	r2, r3
 8013cf8:	4b51      	ldr	r3, [pc, #324]	; (8013e40 <Update_Detail+0xbb4>)
 8013cfa:	845a      	strh	r2, [r3, #34]	; 0x22
        ParamTab[T0F] &= ~D_HID;
 8013cfc:	4b50      	ldr	r3, [pc, #320]	; (8013e40 <Update_Detail+0xbb4>)
 8013cfe:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8013d02:	f023 0301 	bic.w	r3, r3, #1
 8013d06:	b21a      	sxth	r2, r3
 8013d08:	4b4d      	ldr	r3, [pc, #308]	; (8013e40 <Update_Detail+0xbb4>)
 8013d0a:	81da      	strh	r2, [r3, #14]
        ParamTab[T1F] &= ~D_HID;
 8013d0c:	4b4c      	ldr	r3, [pc, #304]	; (8013e40 <Update_Detail+0xbb4>)
 8013d0e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8013d12:	f023 0301 	bic.w	r3, r3, #1
 8013d16:	b21a      	sxth	r2, r3
 8013d18:	4b49      	ldr	r3, [pc, #292]	; (8013e40 <Update_Detail+0xbb4>)
 8013d1a:	821a      	strh	r2, [r3, #16]
        ParamTab[T1F] &= ~D_HID;
 8013d1c:	4b48      	ldr	r3, [pc, #288]	; (8013e40 <Update_Detail+0xbb4>)
 8013d1e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8013d22:	f023 0301 	bic.w	r3, r3, #1
 8013d26:	b21a      	sxth	r2, r3
 8013d28:	4b45      	ldr	r3, [pc, #276]	; (8013e40 <Update_Detail+0xbb4>)
 8013d2a:	821a      	strh	r2, [r3, #16]
        ParamTab[T1x1] = List[T1_POSI].Val+1;
 8013d2c:	4b45      	ldr	r3, [pc, #276]	; (8013e44 <Update_Detail+0xbb8>)
 8013d2e:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8013d32:	b29b      	uxth	r3, r3
 8013d34:	3301      	adds	r3, #1
 8013d36:	b29b      	uxth	r3, r3
 8013d38:	b21a      	sxth	r2, r3
 8013d3a:	4b41      	ldr	r3, [pc, #260]	; (8013e40 <Update_Detail+0xbb4>)
 8013d3c:	849a      	strh	r2, [r3, #36]	; 0x24
        ParamTab[T2x1] = List[T2_POSI].Val+1;
 8013d3e:	4b41      	ldr	r3, [pc, #260]	; (8013e44 <Update_Detail+0xbb8>)
 8013d40:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 8013d44:	b29b      	uxth	r3, r3
 8013d46:	3301      	adds	r3, #1
 8013d48:	b29b      	uxth	r3, r3
 8013d4a:	b21a      	sxth	r2, r3
 8013d4c:	4b3c      	ldr	r3, [pc, #240]	; (8013e40 <Update_Detail+0xbb4>)
 8013d4e:	84da      	strh	r2, [r3, #38]	; 0x26
        ParamTab[T1F]  = (List[XN_TYPE].Val)? L_HID : SHOW;
 8013d50:	4b3c      	ldr	r3, [pc, #240]	; (8013e44 <Update_Detail+0xbb8>)
 8013d52:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d001      	beq.n	8013d5e <Update_Detail+0xad2>
 8013d5a:	2202      	movs	r2, #2
 8013d5c:	e000      	b.n	8013d60 <Update_Detail+0xad4>
 8013d5e:	2200      	movs	r2, #0
 8013d60:	4b37      	ldr	r3, [pc, #220]	; (8013e40 <Update_Detail+0xbb4>)
 8013d62:	821a      	strh	r2, [r3, #16]
        ParamTab[T2F]  = (List[XN_TYPE].Val)? L_HID : SHOW;
 8013d64:	4b37      	ldr	r3, [pc, #220]	; (8013e44 <Update_Detail+0xbb8>)
 8013d66:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d001      	beq.n	8013d72 <Update_Detail+0xae6>
 8013d6e:	2202      	movs	r2, #2
 8013d70:	e000      	b.n	8013d74 <Update_Detail+0xae8>
 8013d72:	2200      	movs	r2, #0
 8013d74:	4b32      	ldr	r3, [pc, #200]	; (8013e40 <Update_Detail+0xbb4>)
 8013d76:	825a      	strh	r2, [r3, #18]
        Tmp  = ParamTab[T2x1] - ParamTab[T1x1];
 8013d78:	4b31      	ldr	r3, [pc, #196]	; (8013e40 <Update_Detail+0xbb4>)
 8013d7a:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8013d7e:	461a      	mov	r2, r3
 8013d80:	4b2f      	ldr	r3, [pc, #188]	; (8013e40 <Update_Detail+0xbb4>)
 8013d82:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8013d86:	1ad3      	subs	r3, r2, r3
 8013d88:	613b      	str	r3, [r7, #16]
        Tmp *= B_SCALE[List[TIM_BASE].Val]* Exp(T_SCALE[List[TIM_BASE].Val]);
 8013d8a:	4b2e      	ldr	r3, [pc, #184]	; (8013e44 <Update_Detail+0xbb8>)
 8013d8c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013d90:	461a      	mov	r2, r3
 8013d92:	4b38      	ldr	r3, [pc, #224]	; (8013e74 <Update_Detail+0xbe8>)
 8013d94:	5c9b      	ldrb	r3, [r3, r2]
 8013d96:	461c      	mov	r4, r3
 8013d98:	4b2a      	ldr	r3, [pc, #168]	; (8013e44 <Update_Detail+0xbb8>)
 8013d9a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013d9e:	461a      	mov	r2, r3
 8013da0:	4b35      	ldr	r3, [pc, #212]	; (8013e78 <Update_Detail+0xbec>)
 8013da2:	5c9b      	ldrb	r3, [r3, r2]
 8013da4:	4618      	mov	r0, r3
 8013da6:	f7fd ff2d 	bl	8011c04 <Exp>
 8013daa:	4603      	mov	r3, r0
 8013dac:	fb03 f204 	mul.w	r2, r3, r4
 8013db0:	693b      	ldr	r3, [r7, #16]
 8013db2:	fb02 f303 	mul.w	r3, r2, r3
 8013db6:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp, T[0], 3, UNSIGN);
 8013db8:	2301      	movs	r3, #1
 8013dba:	9300      	str	r3, [sp, #0]
 8013dbc:	2303      	movs	r3, #3
 8013dbe:	4a2f      	ldr	r2, [pc, #188]	; (8013e7c <Update_Detail+0xbf0>)
 8013dc0:	6939      	ldr	r1, [r7, #16]
 8013dc2:	4824      	ldr	r0, [pc, #144]	; (8013e54 <Update_Detail+0xbc8>)
 8013dc4:	f7fd fe22 	bl	8011a0c <Value2Str>
        Draw_Circle_D(INV, S_X[V1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 8013dc8:	2307      	movs	r3, #7
 8013dca:	b29b      	uxth	r3, r3
 8013dcc:	3b03      	subs	r3, #3
 8013dce:	b29b      	uxth	r3, r3
 8013dd0:	b219      	sxth	r1, r3
 8013dd2:	2336      	movs	r3, #54	; 0x36
 8013dd4:	9301      	str	r3, [sp, #4]
 8013dd6:	2300      	movs	r3, #0
 8013dd8:	9300      	str	r3, [sp, #0]
 8013dda:	230b      	movs	r3, #11
 8013ddc:	2203      	movs	r2, #3
 8013dde:	2001      	movs	r0, #1
 8013de0:	f7fa f812 	bl	800de08 <Draw_Circle_D>
        DispStr(S_X[T1_POSI]+0*6, LABLE_Y, INV+SYMB, "]");
 8013de4:	2007      	movs	r0, #7
 8013de6:	4b26      	ldr	r3, [pc, #152]	; (8013e80 <Update_Detail+0xbf4>)
 8013de8:	2211      	movs	r2, #17
 8013dea:	2103      	movs	r1, #3
 8013dec:	f7f9 ff36 	bl	800dc5c <DispStr>
        DispStr(S_X[T1_POSI]+1*6, LABLE_Y, INV,      "T:      ");
 8013df0:	2307      	movs	r3, #7
 8013df2:	b29b      	uxth	r3, r3
 8013df4:	3306      	adds	r3, #6
 8013df6:	b29b      	uxth	r3, r3
 8013df8:	b218      	sxth	r0, r3
 8013dfa:	4b22      	ldr	r3, [pc, #136]	; (8013e84 <Update_Detail+0xbf8>)
 8013dfc:	2201      	movs	r2, #1
 8013dfe:	2103      	movs	r1, #3
 8013e00:	f7f9 ff2c 	bl	800dc5c <DispStr>
        DispStr(S_X[T1_POSI]+7*6, LABLE_Y, INV,  "  ");
 8013e04:	2307      	movs	r3, #7
 8013e06:	b29b      	uxth	r3, r3
 8013e08:	332a      	adds	r3, #42	; 0x2a
 8013e0a:	b29b      	uxth	r3, r3
 8013e0c:	b218      	sxth	r0, r3
 8013e0e:	4b1e      	ldr	r3, [pc, #120]	; (8013e88 <Update_Detail+0xbfc>)
 8013e10:	2201      	movs	r2, #1
 8013e12:	2103      	movs	r1, #3
 8013e14:	f7f9 ff22 	bl	800dc5c <DispStr>
        DispStr(S_X[T1_POSI]+3*6, LABLE_Y, INV,  (char *)NumStr);
 8013e18:	2307      	movs	r3, #7
 8013e1a:	b29b      	uxth	r3, r3
 8013e1c:	3312      	adds	r3, #18
 8013e1e:	b29b      	uxth	r3, r3
 8013e20:	b218      	sxth	r0, r3
 8013e22:	4b0c      	ldr	r3, [pc, #48]	; (8013e54 <Update_Detail+0xbc8>)
 8013e24:	2201      	movs	r2, #1
 8013e26:	2103      	movs	r1, #3
 8013e28:	f7f9 ff18 	bl	800dc5c <DispStr>
        Set_Base(List[TIM_BASE].Val);          // Ӳ������ɨ��ʱ����λ
 8013e2c:	4b05      	ldr	r3, [pc, #20]	; (8013e44 <Update_Detail+0xbb8>)
 8013e2e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013e32:	4618      	mov	r0, r3
 8013e34:	f7f8 fbc2 	bl	800c5bc <Set_Base>
      break;
 8013e38:	e1d9      	b.n	80141ee <Update_Detail+0xf62>
 8013e3a:	bf00      	nop
 8013e3c:	2000077e 	.word	0x2000077e
 8013e40:	20000140 	.word	0x20000140
 8013e44:	20000298 	.word	0x20000298
 8013e48:	08002130 	.word	0x08002130
 8013e4c:	08002108 	.word	0x08002108
 8013e50:	08001d00 	.word	0x08001d00
 8013e54:	2000283c 	.word	0x2000283c
 8013e58:	08000998 	.word	0x08000998
 8013e5c:	08000990 	.word	0x08000990
 8013e60:	0800215c 	.word	0x0800215c
 8013e64:	200001d0 	.word	0x200001d0
 8013e68:	08000970 	.word	0x08000970
 8013e6c:	08001c4c 	.word	0x08001c4c
 8013e70:	2000055a 	.word	0x2000055a
 8013e74:	0800211c 	.word	0x0800211c
 8013e78:	080020f4 	.word	0x080020f4
 8013e7c:	08001ce8 	.word	0x08001ce8
 8013e80:	08000960 	.word	0x08000960
 8013e84:	0800097c 	.word	0x0800097c
 8013e88:	080009d0 	.word	0x080009d0

      case FREQUENC://��ʾƵ��
        FTmp=Edge*25*1000/2;
 8013e8c:	4bb7      	ldr	r3, [pc, #732]	; (801416c <Update_Detail+0xee0>)
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	f243 02d4 	movw	r2, #12500	; 0x30d4
 8013e94:	fb02 f303 	mul.w	r3, r2, r3
 8013e98:	60fb      	str	r3, [r7, #12]
        if(List[TIM_BASE].Val<9)FTmp= FTmp*1000000;
 8013e9a:	4bb5      	ldr	r3, [pc, #724]	; (8014170 <Update_Detail+0xee4>)
 8013e9c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013ea0:	2b08      	cmp	r3, #8
 8013ea2:	dc05      	bgt.n	8013eb0 <Update_Detail+0xc24>
 8013ea4:	68fb      	ldr	r3, [r7, #12]
 8013ea6:	4ab3      	ldr	r2, [pc, #716]	; (8014174 <Update_Detail+0xee8>)
 8013ea8:	fb02 f303 	mul.w	r3, r2, r3
 8013eac:	60fb      	str	r3, [r7, #12]
 8013eae:	e00a      	b.n	8013ec6 <Update_Detail+0xc3a>
        else if(List[TIM_BASE].Val<18)FTmp= FTmp*1000;
 8013eb0:	4baf      	ldr	r3, [pc, #700]	; (8014170 <Update_Detail+0xee4>)
 8013eb2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013eb6:	2b11      	cmp	r3, #17
 8013eb8:	dc05      	bgt.n	8013ec6 <Update_Detail+0xc3a>
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013ec0:	fb02 f303 	mul.w	r3, r2, r3
 8013ec4:	60fb      	str	r3, [r7, #12]
        FTmp=FTmp/Ts[List[TIM_BASE].Val]/DEPTH[List[SMPL_DPTH].Val];
 8013ec6:	4baa      	ldr	r3, [pc, #680]	; (8014170 <Update_Detail+0xee4>)
 8013ec8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013ecc:	461a      	mov	r2, r3
 8013ece:	4baa      	ldr	r3, [pc, #680]	; (8014178 <Update_Detail+0xeec>)
 8013ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ed4:	461a      	mov	r2, r3
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	fbb3 f3f2 	udiv	r3, r3, r2
 8013edc:	4aa4      	ldr	r2, [pc, #656]	; (8014170 <Update_Detail+0xee4>)
 8013ede:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 8013ee2:	4611      	mov	r1, r2
 8013ee4:	4aa5      	ldr	r2, [pc, #660]	; (801417c <Update_Detail+0xef0>)
 8013ee6:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8013eea:	fbb3 f3f2 	udiv	r3, r3, r2
 8013eee:	60fb      	str	r3, [r7, #12]
          DispMeter(i, 1, UNSIGN,FTmp);
 8013ef0:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	2201      	movs	r2, #1
 8013ef8:	2101      	movs	r1, #1
 8013efa:	f000 f9d3 	bl	80142a4 <DispMeter>
      break;
 8013efe:	e176      	b.n	80141ee <Update_Detail+0xf62>

      case DUTY:    //��ʾռ�ձ�
         DispMeter(i, k, UNSIGN,(HighT*100)/k);
 8013f00:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8013f04:	887b      	ldrh	r3, [r7, #2]
 8013f06:	b2d9      	uxtb	r1, r3
 8013f08:	4b9d      	ldr	r3, [pc, #628]	; (8014180 <Update_Detail+0xef4>)
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	2264      	movs	r2, #100	; 0x64
 8013f0e:	fb02 f203 	mul.w	r2, r2, r3
 8013f12:	887b      	ldrh	r3, [r7, #2]
 8013f14:	fb92 f3f3 	sdiv	r3, r2, r3
 8013f18:	2201      	movs	r2, #1
 8013f1a:	f000 f9c3 	bl	80142a4 <DispMeter>
        break;
 8013f1e:	e166      	b.n	80141ee <Update_Detail+0xf62>

      case VRMS://��ʾ��ѹ��Чֵ
        if(abs(Vrms)<4)
 8013f20:	4b98      	ldr	r3, [pc, #608]	; (8014184 <Update_Detail+0xef8>)
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	f113 0f03 	cmn.w	r3, #3
 8013f28:	db06      	blt.n	8013f38 <Update_Detail+0xcac>
 8013f2a:	4b96      	ldr	r3, [pc, #600]	; (8014184 <Update_Detail+0xef8>)
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	2b03      	cmp	r3, #3
 8013f30:	dc02      	bgt.n	8013f38 <Update_Detail+0xcac>
        {
          Tmp = 0.00;
 8013f32:	2300      	movs	r3, #0
 8013f34:	613b      	str	r3, [r7, #16]
 8013f36:	e026      	b.n	8013f86 <Update_Detail+0xcfa>
        }else{
		  scale = (List[PROBEATT].Val?
 8013f38:	4b8d      	ldr	r3, [pc, #564]	; (8014170 <Update_Detail+0xee4>)
 8013f3a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d00b      	beq.n	8013f5a <Update_Detail+0xcce>
 8013f42:	4b8b      	ldr	r3, [pc, #556]	; (8014170 <Update_Detail+0xee4>)
 8013f44:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013f48:	461a      	mov	r2, r3
 8013f4a:	4b8f      	ldr	r3, [pc, #572]	; (8014188 <Update_Detail+0xefc>)
 8013f4c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013f50:	4613      	mov	r3, r2
 8013f52:	009b      	lsls	r3, r3, #2
 8013f54:	4413      	add	r3, r2
 8013f56:	00db      	lsls	r3, r3, #3
 8013f58:	e00a      	b.n	8013f70 <Update_Detail+0xce4>
 8013f5a:	4b85      	ldr	r3, [pc, #532]	; (8014170 <Update_Detail+0xee4>)
 8013f5c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013f60:	461a      	mov	r2, r3
 8013f62:	4b8a      	ldr	r3, [pc, #552]	; (801418c <Update_Detail+0xf00>)
 8013f64:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013f68:	4613      	mov	r3, r2
 8013f6a:	009b      	lsls	r3, r3, #2
 8013f6c:	4413      	add	r3, r2
 8013f6e:	00db      	lsls	r3, r3, #3
		  scale = (List[PROBEATT].Val?
 8013f70:	60bb      	str	r3, [r7, #8]
	          Tmp  = ((((Vrms)*Ak)>>12))*scale;
 8013f72:	4b84      	ldr	r3, [pc, #528]	; (8014184 <Update_Detail+0xef8>)
 8013f74:	681b      	ldr	r3, [r3, #0]
 8013f76:	687a      	ldr	r2, [r7, #4]
 8013f78:	fb02 f303 	mul.w	r3, r2, r3
 8013f7c:	131a      	asrs	r2, r3, #12
 8013f7e:	68bb      	ldr	r3, [r7, #8]
 8013f80:	fb02 f303 	mul.w	r3, r2, r3
 8013f84:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 8013f86:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8013f8a:	693b      	ldr	r3, [r7, #16]
 8013f8c:	2201      	movs	r2, #1
 8013f8e:	2101      	movs	r1, #1
 8013f90:	f000 f988 	bl	80142a4 <DispMeter>
        break;
 8013f94:	e12b      	b.n	80141ee <Update_Detail+0xf62>

      case VP_P://��ʾ��ѹ���ֵ
        if(abs(Vpp)<7){
 8013f96:	4b7e      	ldr	r3, [pc, #504]	; (8014190 <Update_Detail+0xf04>)
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	f113 0f06 	cmn.w	r3, #6
 8013f9e:	db06      	blt.n	8013fae <Update_Detail+0xd22>
 8013fa0:	4b7b      	ldr	r3, [pc, #492]	; (8014190 <Update_Detail+0xf04>)
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	2b06      	cmp	r3, #6
 8013fa6:	dc02      	bgt.n	8013fae <Update_Detail+0xd22>
          Tmp = 0.00;
 8013fa8:	2300      	movs	r3, #0
 8013faa:	613b      	str	r3, [r7, #16]
 8013fac:	e033      	b.n	8014016 <Update_Detail+0xd8a>
        }
        else
        {
           scale = (List[PROBEATT].Val?
 8013fae:	4b70      	ldr	r3, [pc, #448]	; (8014170 <Update_Detail+0xee4>)
 8013fb0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d00b      	beq.n	8013fd0 <Update_Detail+0xd44>
 8013fb8:	4b6d      	ldr	r3, [pc, #436]	; (8014170 <Update_Detail+0xee4>)
 8013fba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013fbe:	461a      	mov	r2, r3
 8013fc0:	4b71      	ldr	r3, [pc, #452]	; (8014188 <Update_Detail+0xefc>)
 8013fc2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013fc6:	4613      	mov	r3, r2
 8013fc8:	009b      	lsls	r3, r3, #2
 8013fca:	4413      	add	r3, r2
 8013fcc:	00db      	lsls	r3, r3, #3
 8013fce:	e00a      	b.n	8013fe6 <Update_Detail+0xd5a>
 8013fd0:	4b67      	ldr	r3, [pc, #412]	; (8014170 <Update_Detail+0xee4>)
 8013fd2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013fd6:	461a      	mov	r2, r3
 8013fd8:	4b6c      	ldr	r3, [pc, #432]	; (801418c <Update_Detail+0xf00>)
 8013fda:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013fde:	4613      	mov	r3, r2
 8013fe0:	009b      	lsls	r3, r3, #2
 8013fe2:	4413      	add	r3, r2
 8013fe4:	00db      	lsls	r3, r3, #3
           scale = (List[PROBEATT].Val?
 8013fe6:	60bb      	str	r3, [r7, #8]
          Tmp  = ((((Vmax-2048)*(Ak))>>12)-(((Vmin-2048)*(Ak))>>12))*scale;
 8013fe8:	4b6a      	ldr	r3, [pc, #424]	; (8014194 <Update_Detail+0xf08>)
 8013fea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013fee:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8013ff2:	687a      	ldr	r2, [r7, #4]
 8013ff4:	fb02 f303 	mul.w	r3, r2, r3
 8013ff8:	131a      	asrs	r2, r3, #12
 8013ffa:	4b67      	ldr	r3, [pc, #412]	; (8014198 <Update_Detail+0xf0c>)
 8013ffc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014000:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8014004:	6879      	ldr	r1, [r7, #4]
 8014006:	fb01 f303 	mul.w	r3, r1, r3
 801400a:	131b      	asrs	r3, r3, #12
 801400c:	1ad2      	subs	r2, r2, r3
 801400e:	68bb      	ldr	r3, [r7, #8]
 8014010:	fb02 f303 	mul.w	r3, r2, r3
 8014014:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 8014016:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 801401a:	693b      	ldr	r3, [r7, #16]
 801401c:	2201      	movs	r2, #1
 801401e:	2101      	movs	r1, #1
 8014020:	f000 f940 	bl	80142a4 <DispMeter>
        break;
 8014024:	e0e3      	b.n	80141ee <Update_Detail+0xf62>

      case VAVG://��ʾ��ѹƽ��ֵ
        if(abs(Vavg)<4)
 8014026:	4b5d      	ldr	r3, [pc, #372]	; (801419c <Update_Detail+0xf10>)
 8014028:	f9b3 3000 	ldrsh.w	r3, [r3]
 801402c:	2b00      	cmp	r3, #0
 801402e:	bfb8      	it	lt
 8014030:	425b      	neglt	r3, r3
 8014032:	b29b      	uxth	r3, r3
 8014034:	2b03      	cmp	r3, #3
 8014036:	d802      	bhi.n	801403e <Update_Detail+0xdb2>
        {
          Tmp = 0.00;
 8014038:	2300      	movs	r3, #0
 801403a:	613b      	str	r3, [r7, #16]
 801403c:	e02e      	b.n	801409c <Update_Detail+0xe10>
        }else{
          scale = (List[PROBEATT].Val?
 801403e:	4b4c      	ldr	r3, [pc, #304]	; (8014170 <Update_Detail+0xee4>)
 8014040:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 8014044:	2b00      	cmp	r3, #0
 8014046:	d00b      	beq.n	8014060 <Update_Detail+0xdd4>
 8014048:	4b49      	ldr	r3, [pc, #292]	; (8014170 <Update_Detail+0xee4>)
 801404a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801404e:	461a      	mov	r2, r3
 8014050:	4b4d      	ldr	r3, [pc, #308]	; (8014188 <Update_Detail+0xefc>)
 8014052:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014056:	4613      	mov	r3, r2
 8014058:	009b      	lsls	r3, r3, #2
 801405a:	4413      	add	r3, r2
 801405c:	00db      	lsls	r3, r3, #3
 801405e:	e00a      	b.n	8014076 <Update_Detail+0xdea>
 8014060:	4b43      	ldr	r3, [pc, #268]	; (8014170 <Update_Detail+0xee4>)
 8014062:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014066:	461a      	mov	r2, r3
 8014068:	4b48      	ldr	r3, [pc, #288]	; (801418c <Update_Detail+0xf00>)
 801406a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801406e:	4613      	mov	r3, r2
 8014070:	009b      	lsls	r3, r3, #2
 8014072:	4413      	add	r3, r2
 8014074:	00db      	lsls	r3, r3, #3
          scale = (List[PROBEATT].Val?
 8014076:	60bb      	str	r3, [r7, #8]
          Tmp = ((((Vavg-2048)*(Ak))>>12)+100-List[V0_POSI].Val)*scale;
 8014078:	4b48      	ldr	r3, [pc, #288]	; (801419c <Update_Detail+0xf10>)
 801407a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801407e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8014082:	687a      	ldr	r2, [r7, #4]
 8014084:	fb02 f303 	mul.w	r3, r2, r3
 8014088:	131b      	asrs	r3, r3, #12
 801408a:	3364      	adds	r3, #100	; 0x64
 801408c:	4a38      	ldr	r2, [pc, #224]	; (8014170 <Update_Detail+0xee4>)
 801408e:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8014092:	1a9a      	subs	r2, r3, r2
 8014094:	68bb      	ldr	r3, [r7, #8]
 8014096:	fb02 f303 	mul.w	r3, r2, r3
 801409a:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 801409c:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 80140a0:	693b      	ldr	r3, [r7, #16]
 80140a2:	2201      	movs	r2, #1
 80140a4:	2101      	movs	r1, #1
 80140a6:	f000 f8fd 	bl	80142a4 <DispMeter>
        break;
 80140aa:	e0a0      	b.n	80141ee <Update_Detail+0xf62>

      case VMAX://��ʾ��ѹ���ֵ
        if(abs(Vmax)<4){
 80140ac:	4b39      	ldr	r3, [pc, #228]	; (8014194 <Update_Detail+0xf08>)
 80140ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	bfb8      	it	lt
 80140b6:	425b      	neglt	r3, r3
 80140b8:	b29b      	uxth	r3, r3
 80140ba:	2b03      	cmp	r3, #3
 80140bc:	d802      	bhi.n	80140c4 <Update_Detail+0xe38>
          Tmp = 0.00;
 80140be:	2300      	movs	r3, #0
 80140c0:	613b      	str	r3, [r7, #16]
 80140c2:	e02e      	b.n	8014122 <Update_Detail+0xe96>
        }else{
		  scale = (List[PROBEATT].Val?
 80140c4:	4b2a      	ldr	r3, [pc, #168]	; (8014170 <Update_Detail+0xee4>)
 80140c6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d00b      	beq.n	80140e6 <Update_Detail+0xe5a>
 80140ce:	4b28      	ldr	r3, [pc, #160]	; (8014170 <Update_Detail+0xee4>)
 80140d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80140d4:	461a      	mov	r2, r3
 80140d6:	4b2c      	ldr	r3, [pc, #176]	; (8014188 <Update_Detail+0xefc>)
 80140d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80140dc:	4613      	mov	r3, r2
 80140de:	009b      	lsls	r3, r3, #2
 80140e0:	4413      	add	r3, r2
 80140e2:	00db      	lsls	r3, r3, #3
 80140e4:	e00a      	b.n	80140fc <Update_Detail+0xe70>
 80140e6:	4b22      	ldr	r3, [pc, #136]	; (8014170 <Update_Detail+0xee4>)
 80140e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80140ec:	461a      	mov	r2, r3
 80140ee:	4b27      	ldr	r3, [pc, #156]	; (801418c <Update_Detail+0xf00>)
 80140f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80140f4:	4613      	mov	r3, r2
 80140f6:	009b      	lsls	r3, r3, #2
 80140f8:	4413      	add	r3, r2
 80140fa:	00db      	lsls	r3, r3, #3
		  scale = (List[PROBEATT].Val?
 80140fc:	60bb      	str	r3, [r7, #8]
          Tmp  = ((((Vmax-2048)*(Ak))>>12)+100-List[V0_POSI].Val)*scale;
 80140fe:	4b25      	ldr	r3, [pc, #148]	; (8014194 <Update_Detail+0xf08>)
 8014100:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014104:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8014108:	687a      	ldr	r2, [r7, #4]
 801410a:	fb02 f303 	mul.w	r3, r2, r3
 801410e:	131b      	asrs	r3, r3, #12
 8014110:	3364      	adds	r3, #100	; 0x64
 8014112:	4a17      	ldr	r2, [pc, #92]	; (8014170 <Update_Detail+0xee4>)
 8014114:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8014118:	1a9a      	subs	r2, r3, r2
 801411a:	68bb      	ldr	r3, [r7, #8]
 801411c:	fb02 f303 	mul.w	r3, r2, r3
 8014120:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 8014122:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8014126:	693b      	ldr	r3, [r7, #16]
 8014128:	2201      	movs	r2, #1
 801412a:	2101      	movs	r1, #1
 801412c:	f000 f8ba 	bl	80142a4 <DispMeter>
        break;
 8014130:	e05d      	b.n	80141ee <Update_Detail+0xf62>

      case VMIN://��ʾ��ѹ��Сֵ
        if(abs(Vmin)<4){
 8014132:	4b19      	ldr	r3, [pc, #100]	; (8014198 <Update_Detail+0xf0c>)
 8014134:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014138:	2b00      	cmp	r3, #0
 801413a:	bfb8      	it	lt
 801413c:	425b      	neglt	r3, r3
 801413e:	b29b      	uxth	r3, r3
 8014140:	2b03      	cmp	r3, #3
 8014142:	d802      	bhi.n	801414a <Update_Detail+0xebe>
          Tmp = 0.00;
 8014144:	2300      	movs	r3, #0
 8014146:	613b      	str	r3, [r7, #16]
 8014148:	e048      	b.n	80141dc <Update_Detail+0xf50>
        }else{
		  scale = (List[PROBEATT].Val?
 801414a:	4b09      	ldr	r3, [pc, #36]	; (8014170 <Update_Detail+0xee4>)
 801414c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                           VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 8014150:	2b00      	cmp	r3, #0
 8014152:	d025      	beq.n	80141a0 <Update_Detail+0xf14>
 8014154:	4b06      	ldr	r3, [pc, #24]	; (8014170 <Update_Detail+0xee4>)
 8014156:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801415a:	461a      	mov	r2, r3
 801415c:	4b0a      	ldr	r3, [pc, #40]	; (8014188 <Update_Detail+0xefc>)
 801415e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014162:	4613      	mov	r3, r2
 8014164:	009b      	lsls	r3, r3, #2
 8014166:	4413      	add	r3, r2
 8014168:	00db      	lsls	r3, r3, #3
 801416a:	e024      	b.n	80141b6 <Update_Detail+0xf2a>
 801416c:	20002850 	.word	0x20002850
 8014170:	20000298 	.word	0x20000298
 8014174:	000f4240 	.word	0x000f4240
 8014178:	080022a0 	.word	0x080022a0
 801417c:	08002270 	.word	0x08002270
 8014180:	20006878 	.word	0x20006878
 8014184:	20002864 	.word	0x20002864
 8014188:	20000270 	.word	0x20000270
 801418c:	08001d68 	.word	0x08001d68
 8014190:	20006880 	.word	0x20006880
 8014194:	20002856 	.word	0x20002856
 8014198:	20002868 	.word	0x20002868
 801419c:	20002858 	.word	0x20002858
 80141a0:	4b38      	ldr	r3, [pc, #224]	; (8014284 <Update_Detail+0xff8>)
 80141a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80141a6:	461a      	mov	r2, r3
 80141a8:	4b37      	ldr	r3, [pc, #220]	; (8014288 <Update_Detail+0xffc>)
 80141aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80141ae:	4613      	mov	r3, r2
 80141b0:	009b      	lsls	r3, r3, #2
 80141b2:	4413      	add	r3, r2
 80141b4:	00db      	lsls	r3, r3, #3
		  scale = (List[PROBEATT].Val?
 80141b6:	60bb      	str	r3, [r7, #8]
                  Tmp  = ((((Vmin-2048)*(Ak))>>12)+100-List[V0_POSI].Val)*scale;
 80141b8:	4b34      	ldr	r3, [pc, #208]	; (801428c <Update_Detail+0x1000>)
 80141ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80141be:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80141c2:	687a      	ldr	r2, [r7, #4]
 80141c4:	fb02 f303 	mul.w	r3, r2, r3
 80141c8:	131b      	asrs	r3, r3, #12
 80141ca:	3364      	adds	r3, #100	; 0x64
 80141cc:	4a2d      	ldr	r2, [pc, #180]	; (8014284 <Update_Detail+0xff8>)
 80141ce:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 80141d2:	1a9a      	subs	r2, r3, r2
 80141d4:	68bb      	ldr	r3, [r7, #8]
 80141d6:	fb02 f303 	mul.w	r3, r2, r3
 80141da:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, SIGN, Tmp);
 80141dc:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 80141e0:	693b      	ldr	r3, [r7, #16]
 80141e2:	2200      	movs	r2, #0
 80141e4:	2101      	movs	r1, #1
 80141e6:	f000 f85d 	bl	80142a4 <DispMeter>
        break;
 80141ea:	e000      	b.n	80141ee <Update_Detail+0xf62>
        break;
 80141ec:	bf00      	nop

        break;

      }
      /**/
      if(Freq_Flag){
 80141ee:	4b28      	ldr	r3, [pc, #160]	; (8014290 <Update_Detail+0x1004>)
 80141f0:	781b      	ldrb	r3, [r3, #0]
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d03a      	beq.n	801426c <Update_Detail+0xfe0>
        Freq_Flag = 0;
 80141f6:	4b26      	ldr	r3, [pc, #152]	; (8014290 <Update_Detail+0x1004>)
 80141f8:	2200      	movs	r2, #0
 80141fa:	701a      	strb	r2, [r3, #0]
        FTmp=Edge*25*1000/2;
 80141fc:	4b25      	ldr	r3, [pc, #148]	; (8014294 <Update_Detail+0x1008>)
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	f243 02d4 	movw	r2, #12500	; 0x30d4
 8014204:	fb02 f303 	mul.w	r3, r2, r3
 8014208:	60fb      	str	r3, [r7, #12]
        if(List[TIM_BASE].Val<9)FTmp= FTmp*1000000;
 801420a:	4b1e      	ldr	r3, [pc, #120]	; (8014284 <Update_Detail+0xff8>)
 801420c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014210:	2b08      	cmp	r3, #8
 8014212:	dc05      	bgt.n	8014220 <Update_Detail+0xf94>
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	4a20      	ldr	r2, [pc, #128]	; (8014298 <Update_Detail+0x100c>)
 8014218:	fb02 f303 	mul.w	r3, r2, r3
 801421c:	60fb      	str	r3, [r7, #12]
 801421e:	e00a      	b.n	8014236 <Update_Detail+0xfaa>
        else if(List[TIM_BASE].Val<18)FTmp= FTmp*1000;
 8014220:	4b18      	ldr	r3, [pc, #96]	; (8014284 <Update_Detail+0xff8>)
 8014222:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014226:	2b11      	cmp	r3, #17
 8014228:	dc05      	bgt.n	8014236 <Update_Detail+0xfaa>
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014230:	fb02 f303 	mul.w	r3, r2, r3
 8014234:	60fb      	str	r3, [r7, #12]
        FTmp=FTmp/Ts[List[TIM_BASE].Val]/DEPTH[List[SMPL_DPTH].Val];
 8014236:	4b13      	ldr	r3, [pc, #76]	; (8014284 <Update_Detail+0xff8>)
 8014238:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801423c:	461a      	mov	r2, r3
 801423e:	4b17      	ldr	r3, [pc, #92]	; (801429c <Update_Detail+0x1010>)
 8014240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014244:	461a      	mov	r2, r3
 8014246:	68fb      	ldr	r3, [r7, #12]
 8014248:	fbb3 f3f2 	udiv	r3, r3, r2
 801424c:	4a0d      	ldr	r2, [pc, #52]	; (8014284 <Update_Detail+0xff8>)
 801424e:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 8014252:	4611      	mov	r1, r2
 8014254:	4a12      	ldr	r2, [pc, #72]	; (80142a0 <Update_Detail+0x1014>)
 8014256:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 801425a:	fbb3 f3f2 	udiv	r3, r3, r2
 801425e:	60fb      	str	r3, [r7, #12]
        DispFreq(    1, UNSIGN,FTmp);
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	461a      	mov	r2, r3
 8014264:	2101      	movs	r1, #1
 8014266:	2001      	movs	r0, #1
 8014268:	f000 fa08 	bl	801467c <DispFreq>
  for(i=Y_RANGES; i<=STANDBY; i++){
 801426c:	8afb      	ldrh	r3, [r7, #22]
 801426e:	3301      	adds	r3, #1
 8014270:	82fb      	strh	r3, [r7, #22]
 8014272:	8afb      	ldrh	r3, [r7, #22]
 8014274:	2b29      	cmp	r3, #41	; 0x29
 8014276:	f67f a849 	bls.w	801330c <Update_Detail+0x80>
      }
    }
  }

}
 801427a:	bf00      	nop
 801427c:	bf00      	nop
 801427e:	371c      	adds	r7, #28
 8014280:	46bd      	mov	sp, r7
 8014282:	bd90      	pop	{r4, r7, pc}
 8014284:	20000298 	.word	0x20000298
 8014288:	08001d68 	.word	0x08001d68
 801428c:	20002868 	.word	0x20002868
 8014290:	200001cc 	.word	0x200001cc
 8014294:	20002850 	.word	0x20002850
 8014298:	000f4240 	.word	0x000f4240
 801429c:	080022a0 	.word	0x080022a0
 80142a0:	08002270 	.word	0x08002270

080142a4 <DispMeter>:
/*******************************************************************************

*******************************************************************************/
void DispMeter(short Item, char St, char Mode, int Val)
{
 80142a4:	b580      	push	{r7, lr}
 80142a6:	b084      	sub	sp, #16
 80142a8:	af02      	add	r7, sp, #8
 80142aa:	603b      	str	r3, [r7, #0]
 80142ac:	4603      	mov	r3, r0
 80142ae:	80fb      	strh	r3, [r7, #6]
 80142b0:	460b      	mov	r3, r1
 80142b2:	717b      	strb	r3, [r7, #5]
 80142b4:	4613      	mov	r3, r2
 80142b6:	713b      	strb	r3, [r7, #4]
  SetColor(GRY, TCOLOR[ME]);
 80142b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80142bc:	4619      	mov	r1, r3
 80142be:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80142c2:	f7f9 fcb3 	bl	800dc2c <SetColor>

  Draw_Circle_D(INV, S_X[Item]-3, LABLE_Y, 11, 0, 6*12);
 80142c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80142ca:	4a30      	ldr	r2, [pc, #192]	; (801438c <DispMeter+0xe8>)
 80142cc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80142d0:	b29b      	uxth	r3, r3
 80142d2:	3b03      	subs	r3, #3
 80142d4:	b29b      	uxth	r3, r3
 80142d6:	b219      	sxth	r1, r3
 80142d8:	2348      	movs	r3, #72	; 0x48
 80142da:	9301      	str	r3, [sp, #4]
 80142dc:	2300      	movs	r3, #0
 80142de:	9300      	str	r3, [sp, #0]
 80142e0:	230b      	movs	r3, #11
 80142e2:	2203      	movs	r2, #3
 80142e4:	2001      	movs	r0, #1
 80142e6:	f7f9 fd8f 	bl	800de08 <Draw_Circle_D>
  DispStr(S_X[Item], LABLE_Y, INV, (char *)&Z[Item-FREQUENC]);// ��ʾ������Ŀ����
 80142ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80142ee:	4a27      	ldr	r2, [pc, #156]	; (801438c <DispMeter+0xe8>)
 80142f0:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 80142f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80142f8:	f1a3 0213 	sub.w	r2, r3, #19
 80142fc:	4613      	mov	r3, r2
 80142fe:	005b      	lsls	r3, r3, #1
 8014300:	4413      	add	r3, r2
 8014302:	005b      	lsls	r3, r3, #1
 8014304:	4a22      	ldr	r2, [pc, #136]	; (8014390 <DispMeter+0xec>)
 8014306:	4413      	add	r3, r2
 8014308:	2201      	movs	r2, #1
 801430a:	2103      	movs	r1, #3
 801430c:	f7f9 fca6 	bl	800dc5c <DispStr>
  Value2Str(NumStr, Val, List[Item].PTR, 3, Mode);
 8014310:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014314:	4a1f      	ldr	r2, [pc, #124]	; (8014394 <DispMeter+0xf0>)
 8014316:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801431a:	793b      	ldrb	r3, [r7, #4]
 801431c:	9300      	str	r3, [sp, #0]
 801431e:	2303      	movs	r3, #3
 8014320:	6839      	ldr	r1, [r7, #0]
 8014322:	481d      	ldr	r0, [pc, #116]	; (8014398 <DispMeter+0xf4>)
 8014324:	f7fd fb72 	bl	8011a0c <Value2Str>

  if(St)
 8014328:	797b      	ldrb	r3, [r7, #5]
 801432a:	2b00      	cmp	r3, #0
 801432c:	d01c      	beq.n	8014368 <DispMeter+0xc4>
  {
    DispStr(S_X[Item]+24, LABLE_Y, INV, ":       ");
 801432e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014332:	4a16      	ldr	r2, [pc, #88]	; (801438c <DispMeter+0xe8>)
 8014334:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8014338:	b29b      	uxth	r3, r3
 801433a:	3318      	adds	r3, #24
 801433c:	b29b      	uxth	r3, r3
 801433e:	b218      	sxth	r0, r3
 8014340:	4b16      	ldr	r3, [pc, #88]	; (801439c <DispMeter+0xf8>)
 8014342:	2201      	movs	r2, #1
 8014344:	2103      	movs	r1, #3
 8014346:	f7f9 fc89 	bl	800dc5c <DispStr>
    DispStr(S_X[Item]+30, LABLE_Y, INV, (char *)NumStr);   // ��ʾ������ֵ+����
 801434a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801434e:	4a0f      	ldr	r2, [pc, #60]	; (801438c <DispMeter+0xe8>)
 8014350:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8014354:	b29b      	uxth	r3, r3
 8014356:	331e      	adds	r3, #30
 8014358:	b29b      	uxth	r3, r3
 801435a:	b218      	sxth	r0, r3
 801435c:	4b0e      	ldr	r3, [pc, #56]	; (8014398 <DispMeter+0xf4>)
 801435e:	2201      	movs	r2, #1
 8014360:	2103      	movs	r1, #3
 8014362:	f7f9 fc7b 	bl	800dc5c <DispStr>
  }
  else
	  DispStr(S_X[Item]+24, LABLE_Y, INV, ": ----- ");
}
 8014366:	e00d      	b.n	8014384 <DispMeter+0xe0>
	  DispStr(S_X[Item]+24, LABLE_Y, INV, ": ----- ");
 8014368:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801436c:	4a07      	ldr	r2, [pc, #28]	; (801438c <DispMeter+0xe8>)
 801436e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8014372:	b29b      	uxth	r3, r3
 8014374:	3318      	adds	r3, #24
 8014376:	b29b      	uxth	r3, r3
 8014378:	b218      	sxth	r0, r3
 801437a:	4b09      	ldr	r3, [pc, #36]	; (80143a0 <DispMeter+0xfc>)
 801437c:	2201      	movs	r2, #1
 801437e:	2103      	movs	r1, #3
 8014380:	f7f9 fc6c 	bl	800dc5c <DispStr>
}
 8014384:	bf00      	nop
 8014386:	3708      	adds	r7, #8
 8014388:	46bd      	mov	sp, r7
 801438a:	bd80      	pop	{r7, pc}
 801438c:	0800215c 	.word	0x0800215c
 8014390:	08001d18 	.word	0x08001d18
 8014394:	20000298 	.word	0x20000298
 8014398:	2000283c 	.word	0x2000283c
 801439c:	080009d4 	.word	0x080009d4
 80143a0:	080009e0 	.word	0x080009e0

080143a4 <DispStatus>:

/*******************************************************************************

*******************************************************************************/
void DispStatus(void)
{
 80143a4:	b580      	push	{r7, lr}
 80143a6:	b084      	sub	sp, #16
 80143a8:	af02      	add	r7, sp, #8
  char* p;
  SetColor(GRY, (Status & STOP) ? RED : TCOLOR[TRG]);
 80143aa:	4b20      	ldr	r3, [pc, #128]	; (801442c <DispStatus+0x88>)
 80143ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80143b0:	b29b      	uxth	r3, r3
 80143b2:	f003 0301 	and.w	r3, r3, #1
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d102      	bne.n	80143c0 <DispStatus+0x1c>
 80143ba:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80143be:	e000      	b.n	80143c2 <DispStatus+0x1e>
 80143c0:	231f      	movs	r3, #31
 80143c2:	4619      	mov	r1, r3
 80143c4:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80143c8:	f7f9 fc30 	bl	800dc2c <SetColor>
  p =(Status & STOP)?(char*)M :(List[SYNCMODE].PTR +(List[SYNCMODE].Val)*6);
 80143cc:	4b17      	ldr	r3, [pc, #92]	; (801442c <DispStatus+0x88>)
 80143ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80143d2:	b29b      	uxth	r3, r3
 80143d4:	f003 0301 	and.w	r3, r3, #1
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d10b      	bne.n	80143f4 <DispStatus+0x50>
 80143dc:	4b14      	ldr	r3, [pc, #80]	; (8014430 <DispStatus+0x8c>)
 80143de:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80143e0:	4b13      	ldr	r3, [pc, #76]	; (8014430 <DispStatus+0x8c>)
 80143e2:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 80143e6:	4619      	mov	r1, r3
 80143e8:	460b      	mov	r3, r1
 80143ea:	005b      	lsls	r3, r3, #1
 80143ec:	440b      	add	r3, r1
 80143ee:	005b      	lsls	r3, r3, #1
 80143f0:	4413      	add	r3, r2
 80143f2:	e000      	b.n	80143f6 <DispStatus+0x52>
 80143f4:	4b0f      	ldr	r3, [pc, #60]	; (8014434 <DispStatus+0x90>)
 80143f6:	607b      	str	r3, [r7, #4]
  Draw_Circle_D(INV, S_X[SYNCMODE]-3, TITLE_Y_POS, 11, 1, 6*4);
 80143f8:	f240 1321 	movw	r3, #289	; 0x121
 80143fc:	b29b      	uxth	r3, r3
 80143fe:	3b03      	subs	r3, #3
 8014400:	b29b      	uxth	r3, r3
 8014402:	b219      	sxth	r1, r3
 8014404:	2318      	movs	r3, #24
 8014406:	9301      	str	r3, [sp, #4]
 8014408:	2301      	movs	r3, #1
 801440a:	9300      	str	r3, [sp, #0]
 801440c:	230b      	movs	r3, #11
 801440e:	22e1      	movs	r2, #225	; 0xe1
 8014410:	2001      	movs	r0, #1
 8014412:	f7f9 fcf9 	bl	800de08 <Draw_Circle_D>
  DispStr(S_X[SYNCMODE], TITLE_Y_POS, INV, (char *)p);
 8014416:	f240 1021 	movw	r0, #289	; 0x121
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	2201      	movs	r2, #1
 801441e:	21e1      	movs	r1, #225	; 0xe1
 8014420:	f7f9 fc1c 	bl	800dc5c <DispStr>
}
 8014424:	bf00      	nop
 8014426:	3708      	adds	r7, #8
 8014428:	46bd      	mov	sp, r7
 801442a:	bd80      	pop	{r7, pc}
 801442c:	200007a0 	.word	0x200007a0
 8014430:	20000298 	.word	0x20000298
 8014434:	08001cb4 	.word	0x08001cb4

08014438 <Update_Windows>:

/*******************************************************************************
���»���������λ��
*******************************************************************************/
void Update_Windows(void)
{
 8014438:	b580      	push	{r7, lr}
 801443a:	b084      	sub	sp, #16
 801443c:	af00      	add	r7, sp, #0
  short  x0,x,y,i,j,Width;
  short  Depth =  DEPTH[List[SMPL_DPTH].Val];
 801443e:	4b6a      	ldr	r3, [pc, #424]	; (80145e8 <Update_Windows+0x1b0>)
 8014440:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8014444:	461a      	mov	r2, r3
 8014446:	4b69      	ldr	r3, [pc, #420]	; (80145ec <Update_Windows+0x1b4>)
 8014448:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801444c:	80fb      	strh	r3, [r7, #6]
  Width =(300*300)/Depth;
 801444e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014452:	4a67      	ldr	r2, [pc, #412]	; (80145f0 <Update_Windows+0x1b8>)
 8014454:	fb92 f3f3 	sdiv	r3, r2, r3
 8014458:	80bb      	strh	r3, [r7, #4]
  if(Current == XN &&(PopType & LIST_POP) )
 801445a:	4b66      	ldr	r3, [pc, #408]	; (80145f4 <Update_Windows+0x1bc>)
 801445c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014460:	2b01      	cmp	r3, #1
 8014462:	f040 80a9 	bne.w	80145b8 <Update_Windows+0x180>
 8014466:	4b64      	ldr	r3, [pc, #400]	; (80145f8 <Update_Windows+0x1c0>)
 8014468:	781b      	ldrb	r3, [r3, #0]
 801446a:	f003 0302 	and.w	r3, r3, #2
 801446e:	2b00      	cmp	r3, #0
 8014470:	f000 80a2 	beq.w	80145b8 <Update_Windows+0x180>
  {
      Windows_Pop = 1;
 8014474:	4b61      	ldr	r3, [pc, #388]	; (80145fc <Update_Windows+0x1c4>)
 8014476:	2201      	movs	r2, #1
 8014478:	701a      	strb	r2, [r3, #0]
      x0=2+(List[VIEWPOSI].Val)*300/Depth;
 801447a:	4b5b      	ldr	r3, [pc, #364]	; (80145e8 <Update_Windows+0x1b0>)
 801447c:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8014480:	461a      	mov	r2, r3
 8014482:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8014486:	fb03 f202 	mul.w	r2, r3, r2
 801448a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801448e:	fb92 f3f3 	sdiv	r3, r2, r3
 8014492:	b29b      	uxth	r3, r3
 8014494:	3302      	adds	r3, #2
 8014496:	b29b      	uxth	r3, r3
 8014498:	81fb      	strh	r3, [r7, #14]
      x=2;
 801449a:	2302      	movs	r3, #2
 801449c:	81bb      	strh	r3, [r7, #12]
      y=15;
 801449e:	230f      	movs	r3, #15
 80144a0:	807b      	strh	r3, [r7, #2]
      for(i=0;i<300;i++){    //��������
 80144a2:	2300      	movs	r3, #0
 80144a4:	817b      	strh	r3, [r7, #10]
 80144a6:	e029      	b.n	80144fc <Update_Windows+0xc4>
        LCD_Set_Posi(x++, y);
 80144a8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80144ac:	b293      	uxth	r3, r2
 80144ae:	3301      	adds	r3, #1
 80144b0:	b29b      	uxth	r3, r3
 80144b2:	81bb      	strh	r3, [r7, #12]
 80144b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80144b8:	4619      	mov	r1, r3
 80144ba:	4610      	mov	r0, r2
 80144bc:	f7fd fe66 	bl	801218c <LCD_Set_Posi>
        LCD_Set_Pixel(DAR);
 80144c0:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80144c4:	f7fd feb0 	bl	8012228 <LCD_Set_Pixel>
        for(j=0; j<2; j++)LCD_Set_Pixel(RED);
 80144c8:	2300      	movs	r3, #0
 80144ca:	813b      	strh	r3, [r7, #8]
 80144cc:	e008      	b.n	80144e0 <Update_Windows+0xa8>
 80144ce:	201f      	movs	r0, #31
 80144d0:	f7fd feaa 	bl	8012228 <LCD_Set_Pixel>
 80144d4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80144d8:	b29b      	uxth	r3, r3
 80144da:	3301      	adds	r3, #1
 80144dc:	b29b      	uxth	r3, r3
 80144de:	813b      	strh	r3, [r7, #8]
 80144e0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80144e4:	2b01      	cmp	r3, #1
 80144e6:	ddf2      	ble.n	80144ce <Update_Windows+0x96>
        LCD_Set_Pixel(DAR);
 80144e8:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80144ec:	f7fd fe9c 	bl	8012228 <LCD_Set_Pixel>
      for(i=0;i<300;i++){    //��������
 80144f0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80144f4:	b29b      	uxth	r3, r3
 80144f6:	3301      	adds	r3, #1
 80144f8:	b29b      	uxth	r3, r3
 80144fa:	817b      	strh	r3, [r7, #10]
 80144fc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014500:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014504:	dbd0      	blt.n	80144a8 <Update_Windows+0x70>
      }
      if(Current == XN && (MenuNow[XN]==SMPL_DPTH ))
 8014506:	4b3b      	ldr	r3, [pc, #236]	; (80145f4 <Update_Windows+0x1bc>)
 8014508:	f9b3 3000 	ldrsh.w	r3, [r3]
 801450c:	2b01      	cmp	r3, #1
 801450e:	d122      	bne.n	8014556 <Update_Windows+0x11e>
 8014510:	4b3b      	ldr	r3, [pc, #236]	; (8014600 <Update_Windows+0x1c8>)
 8014512:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014516:	2b09      	cmp	r3, #9
 8014518:	d11d      	bne.n	8014556 <Update_Windows+0x11e>
      {  //Depthѡ��
        if(Key_Buffer == KEYCODE_RIGHT || Key_Buffer == KEYCODE_LEFT)
 801451a:	4b3a      	ldr	r3, [pc, #232]	; (8014604 <Update_Windows+0x1cc>)
 801451c:	781b      	ldrb	r3, [r3, #0]
 801451e:	b2db      	uxtb	r3, r3
 8014520:	2b06      	cmp	r3, #6
 8014522:	d004      	beq.n	801452e <Update_Windows+0xf6>
 8014524:	4b37      	ldr	r3, [pc, #220]	; (8014604 <Update_Windows+0x1cc>)
 8014526:	781b      	ldrb	r3, [r3, #0]
 8014528:	b2db      	uxtb	r3, r3
 801452a:	2b05      	cmp	r3, #5
 801452c:	d113      	bne.n	8014556 <Update_Windows+0x11e>
        {  //ѡ���б䶯ʱ�ı�Ԥ����λ��
          List[VIEWPOSI].Val= 0;
 801452e:	4b2e      	ldr	r3, [pc, #184]	; (80145e8 <Update_Windows+0x1b0>)
 8014530:	2200      	movs	r2, #0
 8014532:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
          x0=2+(List[VIEWPOSI].Val)*300/Depth;
 8014536:	4b2c      	ldr	r3, [pc, #176]	; (80145e8 <Update_Windows+0x1b0>)
 8014538:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 801453c:	461a      	mov	r2, r3
 801453e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8014542:	fb03 f202 	mul.w	r2, r3, r2
 8014546:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801454a:	fb92 f3f3 	sdiv	r3, r2, r3
 801454e:	b29b      	uxth	r3, r3
 8014550:	3302      	adds	r3, #2
 8014552:	b29b      	uxth	r3, r3
 8014554:	81fb      	strh	r3, [r7, #14]
        }
      }
      x = x0;               //��ǰ�����ڻ�����λ��
 8014556:	89fb      	ldrh	r3, [r7, #14]
 8014558:	81bb      	strh	r3, [r7, #12]
      y=15;
 801455a:	230f      	movs	r3, #15
 801455c:	807b      	strh	r3, [r7, #2]
      for(i=0;i<Width;i++){
 801455e:	2300      	movs	r3, #0
 8014560:	817b      	strh	r3, [r7, #10]
 8014562:	e022      	b.n	80145aa <Update_Windows+0x172>
        LCD_Set_Posi(x++, y);
 8014564:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8014568:	b293      	uxth	r3, r2
 801456a:	3301      	adds	r3, #1
 801456c:	b29b      	uxth	r3, r3
 801456e:	81bb      	strh	r3, [r7, #12]
 8014570:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014574:	4619      	mov	r1, r3
 8014576:	4610      	mov	r0, r2
 8014578:	f7fd fe08 	bl	801218c <LCD_Set_Posi>
        for(j=0; j<4; j++)LCD_Set_Pixel(GRN);
 801457c:	2300      	movs	r3, #0
 801457e:	813b      	strh	r3, [r7, #8]
 8014580:	e009      	b.n	8014596 <Update_Windows+0x15e>
 8014582:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8014586:	f7fd fe4f 	bl	8012228 <LCD_Set_Pixel>
 801458a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801458e:	b29b      	uxth	r3, r3
 8014590:	3301      	adds	r3, #1
 8014592:	b29b      	uxth	r3, r3
 8014594:	813b      	strh	r3, [r7, #8]
 8014596:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801459a:	2b03      	cmp	r3, #3
 801459c:	ddf1      	ble.n	8014582 <Update_Windows+0x14a>
      for(i=0;i<Width;i++){
 801459e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80145a2:	b29b      	uxth	r3, r3
 80145a4:	3301      	adds	r3, #1
 80145a6:	b29b      	uxth	r3, r3
 80145a8:	817b      	strh	r3, [r7, #10]
 80145aa:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80145ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80145b2:	429a      	cmp	r2, r3
 80145b4:	dbd6      	blt.n	8014564 <Update_Windows+0x12c>
  if(Current == XN &&(PopType & LIST_POP) )
 80145b6:	e012      	b.n	80145de <Update_Windows+0x1a6>
      }
  }
  else if(Current == XN &&!(PopType & LIST_POP))
 80145b8:	4b0e      	ldr	r3, [pc, #56]	; (80145f4 <Update_Windows+0x1bc>)
 80145ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80145be:	2b01      	cmp	r3, #1
 80145c0:	d10d      	bne.n	80145de <Update_Windows+0x1a6>
 80145c2:	4b0d      	ldr	r3, [pc, #52]	; (80145f8 <Update_Windows+0x1c0>)
 80145c4:	781b      	ldrb	r3, [r3, #0]
 80145c6:	f003 0302 	and.w	r3, r3, #2
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d107      	bne.n	80145de <Update_Windows+0x1a6>
  {
    Windows_Pop = 0;
 80145ce:	4b0b      	ldr	r3, [pc, #44]	; (80145fc <Update_Windows+0x1c4>)
 80145d0:	2200      	movs	r2, #0
 80145d2:	701a      	strb	r2, [r3, #0]
    Clr_WavePosi(DAR);
 80145d4:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80145d8:	f000 f816 	bl	8014608 <Clr_WavePosi>
  }
}
 80145dc:	e7ff      	b.n	80145de <Update_Windows+0x1a6>
 80145de:	bf00      	nop
 80145e0:	3710      	adds	r7, #16
 80145e2:	46bd      	mov	sp, r7
 80145e4:	bd80      	pop	{r7, pc}
 80145e6:	bf00      	nop
 80145e8:	20000298 	.word	0x20000298
 80145ec:	08002270 	.word	0x08002270
 80145f0:	00015f90 	.word	0x00015f90
 80145f4:	2000079e 	.word	0x2000079e
 80145f8:	2000078e 	.word	0x2000078e
 80145fc:	200007a6 	.word	0x200007a6
 8014600:	20000538 	.word	0x20000538
 8014604:	2000077d 	.word	0x2000077d

08014608 <Clr_WavePosi>:

/*******************************************************************************
 void Clr_WavePosi(u16 Col)  �������λ����ʾ
*******************************************************************************/
void Clr_WavePosi(short Col)
{
 8014608:	b580      	push	{r7, lr}
 801460a:	b084      	sub	sp, #16
 801460c:	af00      	add	r7, sp, #0
 801460e:	4603      	mov	r3, r0
 8014610:	80fb      	strh	r3, [r7, #6]
  short x,y,i,j;
  x=2;
 8014612:	2302      	movs	r3, #2
 8014614:	81fb      	strh	r3, [r7, #14]
  y=14;
 8014616:	230e      	movs	r3, #14
 8014618:	813b      	strh	r3, [r7, #8]
  for(i=0;i<300;i++)
 801461a:	2300      	movs	r3, #0
 801461c:	81bb      	strh	r3, [r7, #12]
 801461e:	e022      	b.n	8014666 <Clr_WavePosi+0x5e>
  {
    LCD_Set_Posi(x++, y);
 8014620:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8014624:	b293      	uxth	r3, r2
 8014626:	3301      	adds	r3, #1
 8014628:	b29b      	uxth	r3, r3
 801462a:	81fb      	strh	r3, [r7, #14]
 801462c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014630:	4619      	mov	r1, r3
 8014632:	4610      	mov	r0, r2
 8014634:	f7fd fdaa 	bl	801218c <LCD_Set_Posi>
    for(j=0; j<6; j++)
 8014638:	2300      	movs	r3, #0
 801463a:	817b      	strh	r3, [r7, #10]
 801463c:	e009      	b.n	8014652 <Clr_WavePosi+0x4a>
    	LCD_Set_Pixel(Col);
 801463e:	88fb      	ldrh	r3, [r7, #6]
 8014640:	4618      	mov	r0, r3
 8014642:	f7fd fdf1 	bl	8012228 <LCD_Set_Pixel>
    for(j=0; j<6; j++)
 8014646:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801464a:	b29b      	uxth	r3, r3
 801464c:	3301      	adds	r3, #1
 801464e:	b29b      	uxth	r3, r3
 8014650:	817b      	strh	r3, [r7, #10]
 8014652:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014656:	2b05      	cmp	r3, #5
 8014658:	ddf1      	ble.n	801463e <Clr_WavePosi+0x36>
  for(i=0;i<300;i++)
 801465a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801465e:	b29b      	uxth	r3, r3
 8014660:	3301      	adds	r3, #1
 8014662:	b29b      	uxth	r3, r3
 8014664:	81bb      	strh	r3, [r7, #12]
 8014666:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801466a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801466e:	dbd7      	blt.n	8014620 <Clr_WavePosi+0x18>
  }
}
 8014670:	bf00      	nop
 8014672:	bf00      	nop
 8014674:	3710      	adds	r7, #16
 8014676:	46bd      	mov	sp, r7
 8014678:	bd80      	pop	{r7, pc}
	...

0801467c <DispFreq>:

/*******************************************************************************

*******************************************************************************/
void DispFreq(char St, char Mode, int Val)
{
 801467c:	b580      	push	{r7, lr}
 801467e:	b084      	sub	sp, #16
 8014680:	af02      	add	r7, sp, #8
 8014682:	4603      	mov	r3, r0
 8014684:	603a      	str	r2, [r7, #0]
 8014686:	71fb      	strb	r3, [r7, #7]
 8014688:	460b      	mov	r3, r1
 801468a:	71bb      	strb	r3, [r7, #6]
  SetColor(GRY, TCOLOR[ME]);
 801468c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014690:	4619      	mov	r1, r3
 8014692:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014696:	f7f9 fac9 	bl	800dc2c <SetColor>

  Draw_Circle_D(INV, S_X[FREQUENC]-6*15-3+4, LABLE_Y, 11, 0, 6*12);
 801469a:	23a2      	movs	r3, #162	; 0xa2
 801469c:	b29b      	uxth	r3, r3
 801469e:	3b59      	subs	r3, #89	; 0x59
 80146a0:	b29b      	uxth	r3, r3
 80146a2:	b219      	sxth	r1, r3
 80146a4:	2348      	movs	r3, #72	; 0x48
 80146a6:	9301      	str	r3, [sp, #4]
 80146a8:	2300      	movs	r3, #0
 80146aa:	9300      	str	r3, [sp, #0]
 80146ac:	230b      	movs	r3, #11
 80146ae:	2203      	movs	r2, #3
 80146b0:	2001      	movs	r0, #1
 80146b2:	f7f9 fba9 	bl	800de08 <Draw_Circle_D>
  DispStr(S_X[FREQUENC]-6*15+4, LABLE_Y, INV, (char*)&Z[0]);// ��ʾ������Ŀ����
 80146b6:	23a2      	movs	r3, #162	; 0xa2
 80146b8:	b29b      	uxth	r3, r3
 80146ba:	3b56      	subs	r3, #86	; 0x56
 80146bc:	b29b      	uxth	r3, r3
 80146be:	b218      	sxth	r0, r3
 80146c0:	4b1a      	ldr	r3, [pc, #104]	; (801472c <DispFreq+0xb0>)
 80146c2:	2201      	movs	r2, #1
 80146c4:	2103      	movs	r1, #3
 80146c6:	f7f9 fac9 	bl	800dc5c <DispStr>
  Value2Str(NumStr, Val, List[FREQUENC].PTR, 3, Mode);
 80146ca:	4b19      	ldr	r3, [pc, #100]	; (8014730 <DispFreq+0xb4>)
 80146cc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80146d0:	79bb      	ldrb	r3, [r7, #6]
 80146d2:	9300      	str	r3, [sp, #0]
 80146d4:	2303      	movs	r3, #3
 80146d6:	6839      	ldr	r1, [r7, #0]
 80146d8:	4816      	ldr	r0, [pc, #88]	; (8014734 <DispFreq+0xb8>)
 80146da:	f7fd f997 	bl	8011a0c <Value2Str>

  if(St) {
 80146de:	79fb      	ldrb	r3, [r7, #7]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d014      	beq.n	801470e <DispFreq+0x92>
    DispStr(24+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, ":       ");
 80146e4:	23a2      	movs	r3, #162	; 0xa2
 80146e6:	b29b      	uxth	r3, r3
 80146e8:	3b3e      	subs	r3, #62	; 0x3e
 80146ea:	b29b      	uxth	r3, r3
 80146ec:	b218      	sxth	r0, r3
 80146ee:	4b12      	ldr	r3, [pc, #72]	; (8014738 <DispFreq+0xbc>)
 80146f0:	2201      	movs	r2, #1
 80146f2:	2103      	movs	r1, #3
 80146f4:	f7f9 fab2 	bl	800dc5c <DispStr>
    DispStr(30+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, (char *)NumStr);   // ��ʾ������ֵ+����
 80146f8:	23a2      	movs	r3, #162	; 0xa2
 80146fa:	b29b      	uxth	r3, r3
 80146fc:	3b38      	subs	r3, #56	; 0x38
 80146fe:	b29b      	uxth	r3, r3
 8014700:	b218      	sxth	r0, r3
 8014702:	4b0c      	ldr	r3, [pc, #48]	; (8014734 <DispFreq+0xb8>)
 8014704:	2201      	movs	r2, #1
 8014706:	2103      	movs	r1, #3
 8014708:	f7f9 faa8 	bl	800dc5c <DispStr>
  }
  else   DispStr(24+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, ": ---- ");
}
 801470c:	e009      	b.n	8014722 <DispFreq+0xa6>
  else   DispStr(24+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, ": ---- ");
 801470e:	23a2      	movs	r3, #162	; 0xa2
 8014710:	b29b      	uxth	r3, r3
 8014712:	3b3e      	subs	r3, #62	; 0x3e
 8014714:	b29b      	uxth	r3, r3
 8014716:	b218      	sxth	r0, r3
 8014718:	4b08      	ldr	r3, [pc, #32]	; (801473c <DispFreq+0xc0>)
 801471a:	2201      	movs	r2, #1
 801471c:	2103      	movs	r1, #3
 801471e:	f7f9 fa9d 	bl	800dc5c <DispStr>
}
 8014722:	bf00      	nop
 8014724:	3708      	adds	r7, #8
 8014726:	46bd      	mov	sp, r7
 8014728:	bd80      	pop	{r7, pc}
 801472a:	bf00      	nop
 801472c:	08001d18 	.word	0x08001d18
 8014730:	20000298 	.word	0x20000298
 8014734:	2000283c 	.word	0x2000283c
 8014738:	080009d4 	.word	0x080009d4
 801473c:	080009ec 	.word	0x080009ec

08014740 <Show_List>:

/*******************************************************************************
 Show_List: ���ò˵���λ�á��ߴ硢��ɫ����ʾ����
*******************************************************************************/
void Show_List(void)
{
 8014740:	b580      	push	{r7, lr}
 8014742:	b088      	sub	sp, #32
 8014744:	af02      	add	r7, sp, #8
  short i, Ny0, Nx0, CurrentMax = MU_BEGN[Current]+ M_ITEMS[Current];
 8014746:	4b59      	ldr	r3, [pc, #356]	; (80148ac <Show_List+0x16c>)
 8014748:	f9b3 3000 	ldrsh.w	r3, [r3]
 801474c:	461a      	mov	r2, r3
 801474e:	4b58      	ldr	r3, [pc, #352]	; (80148b0 <Show_List+0x170>)
 8014750:	5c9b      	ldrb	r3, [r3, r2]
 8014752:	b29a      	uxth	r2, r3
 8014754:	4b55      	ldr	r3, [pc, #340]	; (80148ac <Show_List+0x16c>)
 8014756:	f9b3 3000 	ldrsh.w	r3, [r3]
 801475a:	4619      	mov	r1, r3
 801475c:	4b55      	ldr	r3, [pc, #340]	; (80148b4 <Show_List+0x174>)
 801475e:	5c5b      	ldrb	r3, [r3, r1]
 8014760:	b29b      	uxth	r3, r3
 8014762:	4413      	add	r3, r2
 8014764:	b29b      	uxth	r3, r3
 8014766:	827b      	strh	r3, [r7, #18]
  char  Flag = 0;
 8014768:	2300      	movs	r3, #0
 801476a:	757b      	strb	r3, [r7, #21]
  char  str[12];
  ParamTab[BXx1]= BLOCK_X[Current];
 801476c:	4b4f      	ldr	r3, [pc, #316]	; (80148ac <Show_List+0x16c>)
 801476e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014772:	461a      	mov	r2, r3
 8014774:	4b50      	ldr	r3, [pc, #320]	; (80148b8 <Show_List+0x178>)
 8014776:	5c9b      	ldrb	r3, [r3, r2]
 8014778:	b21a      	sxth	r2, r3
 801477a:	4b50      	ldr	r3, [pc, #320]	; (80148bc <Show_List+0x17c>)
 801477c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  ParamTab[BYx2]= BLOCK_Y[Current]*2;
 8014780:	4b4a      	ldr	r3, [pc, #296]	; (80148ac <Show_List+0x16c>)
 8014782:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014786:	461a      	mov	r2, r3
 8014788:	4b4d      	ldr	r3, [pc, #308]	; (80148c0 <Show_List+0x180>)
 801478a:	5c9b      	ldrb	r3, [r3, r2]
 801478c:	b29b      	uxth	r3, r3
 801478e:	005b      	lsls	r3, r3, #1
 8014790:	b29b      	uxth	r3, r3
 8014792:	b21a      	sxth	r2, r3
 8014794:	4b49      	ldr	r3, [pc, #292]	; (80148bc <Show_List+0x17c>)
 8014796:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  ParamTab[WXx1]= BLOCK_W[Current];
 801479a:	4b44      	ldr	r3, [pc, #272]	; (80148ac <Show_List+0x16c>)
 801479c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80147a0:	461a      	mov	r2, r3
 80147a2:	4b48      	ldr	r3, [pc, #288]	; (80148c4 <Show_List+0x184>)
 80147a4:	5c9b      	ldrb	r3, [r3, r2]
 80147a6:	b21a      	sxth	r2, r3
 80147a8:	4b44      	ldr	r3, [pc, #272]	; (80148bc <Show_List+0x17c>)
 80147aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  ParamTab[HYx2]=(M_ITEMS[Current]+1)*32;
 80147ae:	4b3f      	ldr	r3, [pc, #252]	; (80148ac <Show_List+0x16c>)
 80147b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80147b4:	461a      	mov	r2, r3
 80147b6:	4b3f      	ldr	r3, [pc, #252]	; (80148b4 <Show_List+0x174>)
 80147b8:	5c9b      	ldrb	r3, [r3, r2]
 80147ba:	3301      	adds	r3, #1
 80147bc:	b29b      	uxth	r3, r3
 80147be:	015b      	lsls	r3, r3, #5
 80147c0:	b29b      	uxth	r3, r3
 80147c2:	b21a      	sxth	r2, r3
 80147c4:	4b3d      	ldr	r3, [pc, #244]	; (80148bc <Show_List+0x17c>)
 80147c6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  PopColor(WHT, DAR);
 80147ca:	f643 11e7 	movw	r1, #14823	; 0x39e7
 80147ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80147d2:	f7f9 ff95 	bl	800e700 <PopColor>
  Buil_Pop();
 80147d6:	f7f9 fe85 	bl	800e4e4 <Buil_Pop>
  for(i=MU_BEGN[Current]; i<CurrentMax; i++){
 80147da:	4b34      	ldr	r3, [pc, #208]	; (80148ac <Show_List+0x16c>)
 80147dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80147e0:	461a      	mov	r2, r3
 80147e2:	4b33      	ldr	r3, [pc, #204]	; (80148b0 <Show_List+0x170>)
 80147e4:	5c9b      	ldrb	r3, [r3, r2]
 80147e6:	82fb      	strh	r3, [r7, #22]
 80147e8:	e054      	b.n	8014894 <Show_List+0x154>
    if(i == MenuNow[Current]) {
 80147ea:	4b30      	ldr	r3, [pc, #192]	; (80148ac <Show_List+0x16c>)
 80147ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80147f0:	461a      	mov	r2, r3
 80147f2:	4b35      	ldr	r3, [pc, #212]	; (80148c8 <Show_List+0x188>)
 80147f4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80147f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80147fc:	429a      	cmp	r2, r3
 80147fe:	d102      	bne.n	8014806 <Show_List+0xc6>
      Flag = INV;
 8014800:	2301      	movs	r3, #1
 8014802:	757b      	strb	r3, [r7, #21]
 8014804:	e007      	b.n	8014816 <Show_List+0xd6>
    }
    else                      {
      PopColor(WHT, DAR);
 8014806:	f643 11e7 	movw	r1, #14823	; 0x39e7
 801480a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801480e:	f7f9 ff77 	bl	800e700 <PopColor>
      Flag = PRN;
 8014812:	2300      	movs	r3, #0
 8014814:	757b      	strb	r3, [r7, #21]
    }
    Ny0 = ((CurrentMax - i)*17 - 10);
 8014816:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 801481a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801481e:	1ad3      	subs	r3, r2, r3
 8014820:	b29b      	uxth	r3, r3
 8014822:	461a      	mov	r2, r3
 8014824:	0112      	lsls	r2, r2, #4
 8014826:	4413      	add	r3, r2
 8014828:	b29b      	uxth	r3, r3
 801482a:	3b0a      	subs	r3, #10
 801482c:	b29b      	uxth	r3, r3
 801482e:	823b      	strh	r3, [r7, #16]
    Nx0 = N_X ;
 8014830:	2304      	movs	r3, #4
 8014832:	81fb      	strh	r3, [r7, #14]
    memset(str,0,12);
 8014834:	463b      	mov	r3, r7
 8014836:	220c      	movs	r2, #12
 8014838:	2100      	movs	r1, #0
 801483a:	4618      	mov	r0, r3
 801483c:	f00e f9da 	bl	8022bf4 <memset>
    memcpy(str,&ESTR[i],10);
 8014840:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014844:	4613      	mov	r3, r2
 8014846:	009b      	lsls	r3, r3, #2
 8014848:	4413      	add	r3, r2
 801484a:	005b      	lsls	r3, r3, #1
 801484c:	4a1f      	ldr	r2, [pc, #124]	; (80148cc <Show_List+0x18c>)
 801484e:	1899      	adds	r1, r3, r2
 8014850:	463b      	mov	r3, r7
 8014852:	220a      	movs	r2, #10
 8014854:	4618      	mov	r0, r3
 8014856:	f00e f9bf 	bl	8022bd8 <memcpy>
    NoteSTR(Nx0, Ny0, Flag, (char *)str);
 801485a:	463b      	mov	r3, r7
 801485c:	7d7a      	ldrb	r2, [r7, #21]
 801485e:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8014862:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8014866:	f7fa f89b 	bl	800e9a0 <NoteSTR>
    Note_4Point(PRN, Nx0, Ny0, strlen((char*)str), Font6x8_H);
 801486a:	463b      	mov	r3, r7
 801486c:	4618      	mov	r0, r3
 801486e:	f7f7 fbe7 	bl	800c040 <strlen>
 8014872:	4603      	mov	r3, r0
 8014874:	b2db      	uxtb	r3, r3
 8014876:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 801487a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 801487e:	200a      	movs	r0, #10
 8014880:	9000      	str	r0, [sp, #0]
 8014882:	2000      	movs	r0, #0
 8014884:	f7fa f932 	bl	800eaec <Note_4Point>
  for(i=MU_BEGN[Current]; i<CurrentMax; i++){
 8014888:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801488c:	b29b      	uxth	r3, r3
 801488e:	3301      	adds	r3, #1
 8014890:	b29b      	uxth	r3, r3
 8014892:	82fb      	strh	r3, [r7, #22]
 8014894:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014898:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801489c:	429a      	cmp	r2, r3
 801489e:	dba4      	blt.n	80147ea <Show_List+0xaa>
  }
  List_Pop();
 80148a0:	f7f9 ff5e 	bl	800e760 <List_Pop>
}
 80148a4:	bf00      	nop
 80148a6:	3718      	adds	r7, #24
 80148a8:	46bd      	mov	sp, r7
 80148aa:	bd80      	pop	{r7, pc}
 80148ac:	2000079e 	.word	0x2000079e
 80148b0:	08001f40 	.word	0x08001f40
 80148b4:	08001f48 	.word	0x08001f48
 80148b8:	08002144 	.word	0x08002144
 80148bc:	20000140 	.word	0x20000140
 80148c0:	0800214c 	.word	0x0800214c
 80148c4:	08002154 	.word	0x08002154
 80148c8:	20000538 	.word	0x20000538
 80148cc:	08001f50 	.word	0x08001f50

080148d0 <DispFileInfo>:

/*******************************************************************************

*******************************************************************************/
void DispFileInfo(char Info)
{
 80148d0:	b580      	push	{r7, lr}
 80148d2:	b084      	sub	sp, #16
 80148d4:	af02      	add	r7, sp, #8
 80148d6:	4603      	mov	r3, r0
 80148d8:	71fb      	strb	r3, [r7, #7]
  SetColor(DAR, BLU);
 80148da:	f64f 4110 	movw	r1, #64528	; 0xfc10
 80148de:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80148e2:	f7f9 f9a3 	bl	800dc2c <SetColor>
  Draw_Circle_D(INV, S_X[SAVE_BMP]-3, LABLE_Y, 11, 0, 6*11);
 80148e6:	23f8      	movs	r3, #248	; 0xf8
 80148e8:	b29b      	uxth	r3, r3
 80148ea:	3b03      	subs	r3, #3
 80148ec:	b29b      	uxth	r3, r3
 80148ee:	b219      	sxth	r1, r3
 80148f0:	2342      	movs	r3, #66	; 0x42
 80148f2:	9301      	str	r3, [sp, #4]
 80148f4:	2300      	movs	r3, #0
 80148f6:	9300      	str	r3, [sp, #0]
 80148f8:	230b      	movs	r3, #11
 80148fa:	2203      	movs	r2, #3
 80148fc:	2001      	movs	r0, #1
 80148fe:	f7f9 fa83 	bl	800de08 <Draw_Circle_D>
  DispStr(S_X[SAVE_BMP], LABLE_Y, INV, (char *)(&FnNote+14*Info));
 8014902:	20f8      	movs	r0, #248	; 0xf8
 8014904:	79fb      	ldrb	r3, [r7, #7]
 8014906:	f44f 7275 	mov.w	r2, #980	; 0x3d4
 801490a:	fb02 f303 	mul.w	r3, r2, r3
 801490e:	4a07      	ldr	r2, [pc, #28]	; (801492c <DispFileInfo+0x5c>)
 8014910:	4413      	add	r3, r2
 8014912:	2201      	movs	r2, #1
 8014914:	2103      	movs	r1, #3
 8014916:	f7f9 f9a1 	bl	800dc5c <DispStr>
  HAL_Delay(2000);
 801491a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 801491e:	f003 fd35 	bl	801838c <HAL_Delay>

}
 8014922:	bf00      	nop
 8014924:	3708      	adds	r7, #8
 8014926:	46bd      	mov	sp, r7
 8014928:	bd80      	pop	{r7, pc}
 801492a:	bf00      	nop
 801492c:	080022f0 	.word	0x080022f0

08014930 <DispBMPInfo>:

/*******************************************************************************

*******************************************************************************/
void DispBMPInfo(void)
{
 8014930:	b580      	push	{r7, lr}
 8014932:	b082      	sub	sp, #8
 8014934:	af02      	add	r7, sp, #8
  SetColor(GRY, TCOLOR[FN]);
 8014936:	f64f 4310 	movw	r3, #64528	; 0xfc10
 801493a:	4619      	mov	r1, r3
 801493c:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014940:	f7f9 f974 	bl	800dc2c <SetColor>
  u8ToDec3(NumStr, List[SAVE_BMP].Val);
 8014944:	4b1a      	ldr	r3, [pc, #104]	; (80149b0 <DispBMPInfo+0x80>)
 8014946:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 801494a:	b2db      	uxtb	r3, r3
 801494c:	4619      	mov	r1, r3
 801494e:	4819      	ldr	r0, [pc, #100]	; (80149b4 <DispBMPInfo+0x84>)
 8014950:	f7fc fff4 	bl	801193c <u8ToDec3>
  Draw_Circle_D(INV, S_X[SAVE_BMP]-3, LABLE_Y, 11, 0, 6*11);
 8014954:	23f8      	movs	r3, #248	; 0xf8
 8014956:	b29b      	uxth	r3, r3
 8014958:	3b03      	subs	r3, #3
 801495a:	b29b      	uxth	r3, r3
 801495c:	b219      	sxth	r1, r3
 801495e:	2342      	movs	r3, #66	; 0x42
 8014960:	9301      	str	r3, [sp, #4]
 8014962:	2300      	movs	r3, #0
 8014964:	9300      	str	r3, [sp, #0]
 8014966:	230b      	movs	r3, #11
 8014968:	2203      	movs	r2, #3
 801496a:	2001      	movs	r0, #1
 801496c:	f7f9 fa4c 	bl	800de08 <Draw_Circle_D>
  DispStr(S_X[SAVE_BMP],    LABLE_Y, INV, ("Save"));//0513
 8014970:	20f8      	movs	r0, #248	; 0xf8
 8014972:	4b11      	ldr	r3, [pc, #68]	; (80149b8 <DispBMPInfo+0x88>)
 8014974:	2201      	movs	r2, #1
 8014976:	2103      	movs	r1, #3
 8014978:	f7f9 f970 	bl	800dc5c <DispStr>
  DispStr(S_X[SAVE_BMP]+24, LABLE_Y, INV, (char *)NumStr);
 801497c:	23f8      	movs	r3, #248	; 0xf8
 801497e:	b29b      	uxth	r3, r3
 8014980:	3318      	adds	r3, #24
 8014982:	b29b      	uxth	r3, r3
 8014984:	b218      	sxth	r0, r3
 8014986:	4b0b      	ldr	r3, [pc, #44]	; (80149b4 <DispBMPInfo+0x84>)
 8014988:	2201      	movs	r2, #1
 801498a:	2103      	movs	r1, #3
 801498c:	f7f9 f966 	bl	800dc5c <DispStr>
  DispStr(S_X[SAVE_BMP]+42, LABLE_Y, INV, (List[SAVE_BMP].PTR ));
 8014990:	23f8      	movs	r3, #248	; 0xf8
 8014992:	b29b      	uxth	r3, r3
 8014994:	332a      	adds	r3, #42	; 0x2a
 8014996:	b29b      	uxth	r3, r3
 8014998:	b218      	sxth	r0, r3
 801499a:	4b05      	ldr	r3, [pc, #20]	; (80149b0 <DispBMPInfo+0x80>)
 801499c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80149a0:	2201      	movs	r2, #1
 80149a2:	2103      	movs	r1, #3
 80149a4:	f7f9 f95a 	bl	800dc5c <DispStr>
}
 80149a8:	bf00      	nop
 80149aa:	46bd      	mov	sp, r7
 80149ac:	bd80      	pop	{r7, pc}
 80149ae:	bf00      	nop
 80149b0:	20000298 	.word	0x20000298
 80149b4:	2000283c 	.word	0x2000283c
 80149b8:	08000950 	.word	0x08000950

080149bc <Update_Proc_All>:

/*******************************************************************************
Update_Proc_All  ȫ��ˢ��
*******************************************************************************/
void Update_Proc_All(void)
{
 80149bc:	b590      	push	{r4, r7, lr}
 80149be:	b087      	sub	sp, #28
 80149c0:	af02      	add	r7, sp, #8
  short i;
  long Tmp = 0;
 80149c2:	2300      	movs	r3, #0
 80149c4:	60bb      	str	r3, [r7, #8]
  short Range = List[Y_RANGES].Val + 10*List[PROBEATT].Val;
 80149c6:	4ba3      	ldr	r3, [pc, #652]	; (8014c54 <Update_Proc_All+0x298>)
 80149c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80149cc:	b29a      	uxth	r2, r3
 80149ce:	4ba1      	ldr	r3, [pc, #644]	; (8014c54 <Update_Proc_All+0x298>)
 80149d0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80149d4:	b29b      	uxth	r3, r3
 80149d6:	4619      	mov	r1, r3
 80149d8:	0089      	lsls	r1, r1, #2
 80149da:	440b      	add	r3, r1
 80149dc:	005b      	lsls	r3, r3, #1
 80149de:	b29b      	uxth	r3, r3
 80149e0:	4413      	add	r3, r2
 80149e2:	b29b      	uxth	r3, r3
 80149e4:	80fb      	strh	r3, [r7, #6]

  for(i=Y_RANGES; i<=STANDBY; i++){
 80149e6:	2300      	movs	r3, #0
 80149e8:	81fb      	strh	r3, [r7, #14]
 80149ea:	e015      	b.n	8014a18 <Update_Proc_All+0x5c>
    List[i].Flg |= UPD;
 80149ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80149f0:	4a98      	ldr	r2, [pc, #608]	; (8014c54 <Update_Proc_All+0x298>)
 80149f2:	00db      	lsls	r3, r3, #3
 80149f4:	4413      	add	r3, r2
 80149f6:	799a      	ldrb	r2, [r3, #6]
 80149f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80149fc:	f042 0220 	orr.w	r2, r2, #32
 8014a00:	b2d1      	uxtb	r1, r2
 8014a02:	4a94      	ldr	r2, [pc, #592]	; (8014c54 <Update_Proc_All+0x298>)
 8014a04:	00db      	lsls	r3, r3, #3
 8014a06:	4413      	add	r3, r2
 8014a08:	460a      	mov	r2, r1
 8014a0a:	719a      	strb	r2, [r3, #6]
  for(i=Y_RANGES; i<=STANDBY; i++){
 8014a0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014a10:	b29b      	uxth	r3, r3
 8014a12:	3301      	adds	r3, #1
 8014a14:	b29b      	uxth	r3, r3
 8014a16:	81fb      	strh	r3, [r7, #14]
 8014a18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014a1c:	2b29      	cmp	r3, #41	; 0x29
 8014a1e:	dde5      	ble.n	80149ec <Update_Proc_All+0x30>
  }

  for(i=Y_RANGES; i<=STANDBY; i++){
 8014a20:	2300      	movs	r3, #0
 8014a22:	81fb      	strh	r3, [r7, #14]
 8014a24:	e1be      	b.n	8014da4 <Update_Proc_All+0x3e8>
    if(List[i].Flg & UPD){
 8014a26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014a2a:	4a8a      	ldr	r2, [pc, #552]	; (8014c54 <Update_Proc_All+0x298>)
 8014a2c:	00db      	lsls	r3, r3, #3
 8014a2e:	4413      	add	r3, r2
 8014a30:	799b      	ldrb	r3, [r3, #6]
 8014a32:	f003 0320 	and.w	r3, r3, #32
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	f000 81ad 	beq.w	8014d96 <Update_Proc_All+0x3da>
      List[i].Flg &= ~UPD;
 8014a3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014a40:	4a84      	ldr	r2, [pc, #528]	; (8014c54 <Update_Proc_All+0x298>)
 8014a42:	00db      	lsls	r3, r3, #3
 8014a44:	4413      	add	r3, r2
 8014a46:	799a      	ldrb	r2, [r3, #6]
 8014a48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014a4c:	f022 0220 	bic.w	r2, r2, #32
 8014a50:	b2d1      	uxtb	r1, r2
 8014a52:	4a80      	ldr	r2, [pc, #512]	; (8014c54 <Update_Proc_All+0x298>)
 8014a54:	00db      	lsls	r3, r3, #3
 8014a56:	4413      	add	r3, r2
 8014a58:	460a      	mov	r2, r1
 8014a5a:	719a      	strb	r2, [r3, #6]
      switch (i){
 8014a5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014a60:	2b12      	cmp	r3, #18
 8014a62:	f300 8199 	bgt.w	8014d98 <Update_Proc_All+0x3dc>
 8014a66:	2b0d      	cmp	r3, #13
 8014a68:	f280 80ac 	bge.w	8014bc4 <Update_Proc_All+0x208>
 8014a6c:	2b03      	cmp	r3, #3
 8014a6e:	dc02      	bgt.n	8014a76 <Update_Proc_All+0xba>
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	da04      	bge.n	8014a7e <Update_Proc_All+0xc2>
 8014a74:	e190      	b.n	8014d98 <Update_Proc_All+0x3dc>
 8014a76:	2b07      	cmp	r3, #7
 8014a78:	f000 815a 	beq.w	8014d30 <Update_Proc_All+0x374>
 8014a7c:	e18c      	b.n	8014d98 <Update_Proc_All+0x3dc>
      case Y_RANGES:   // ˢ����ʾ Y ���̵�λ
      case PROBEATT:   // ˢ����ʾ̽ͷ˥������
      case COUPLING:   // ˢ����ʾ���ģʽ״̬
      case V0_POSI:    // ˢ����ʾ��ֱƫ��λ��
        SetColor(GRY, TCOLOR[YN]);
 8014a7e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8014a82:	4619      	mov	r1, r3
 8014a84:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014a88:	f7f9 f8d0 	bl	800dc2c <SetColor>
        if(i == Y_RANGES || i == COUPLING||i == PROBEATT){
 8014a8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d007      	beq.n	8014aa4 <Update_Proc_All+0xe8>
 8014a94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014a98:	2b01      	cmp	r3, #1
 8014a9a:	d003      	beq.n	8014aa4 <Update_Proc_All+0xe8>
 8014a9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014aa0:	2b02      	cmp	r3, #2
 8014aa2:	d138      	bne.n	8014b16 <Update_Proc_All+0x15a>
          Draw_Circle_D(INV, S_X[Y_RANGES]-3, TITLE_Y_POS, 11, 0, 6*7);
 8014aa4:	232f      	movs	r3, #47	; 0x2f
 8014aa6:	b29b      	uxth	r3, r3
 8014aa8:	3b03      	subs	r3, #3
 8014aaa:	b29b      	uxth	r3, r3
 8014aac:	b219      	sxth	r1, r3
 8014aae:	232a      	movs	r3, #42	; 0x2a
 8014ab0:	9301      	str	r3, [sp, #4]
 8014ab2:	2300      	movs	r3, #0
 8014ab4:	9300      	str	r3, [sp, #0]
 8014ab6:	230b      	movs	r3, #11
 8014ab8:	22e1      	movs	r2, #225	; 0xe1
 8014aba:	2001      	movs	r0, #1
 8014abc:	f7f9 f9a4 	bl	800de08 <Draw_Circle_D>
          DispStr(S_X[Y_RANGES], TITLE_Y_POS, INV,      (List[Y_RANGES].PTR +(Range)*6));
 8014ac0:	202f      	movs	r0, #47	; 0x2f
 8014ac2:	4b64      	ldr	r3, [pc, #400]	; (8014c54 <Update_Proc_All+0x298>)
 8014ac4:	6819      	ldr	r1, [r3, #0]
 8014ac6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014aca:	4613      	mov	r3, r2
 8014acc:	005b      	lsls	r3, r3, #1
 8014ace:	4413      	add	r3, r2
 8014ad0:	005b      	lsls	r3, r3, #1
 8014ad2:	440b      	add	r3, r1
 8014ad4:	2201      	movs	r2, #1
 8014ad6:	21e1      	movs	r1, #225	; 0xe1
 8014ad8:	f7f9 f8c0 	bl	800dc5c <DispStr>
          DispStr(S_X[COUPLING], TITLE_Y_POS, INV,      (List[COUPLING].PTR +(List[COUPLING].Val)*6));
 8014adc:	2047      	movs	r0, #71	; 0x47
 8014ade:	4b5d      	ldr	r3, [pc, #372]	; (8014c54 <Update_Proc_All+0x298>)
 8014ae0:	689a      	ldr	r2, [r3, #8]
 8014ae2:	4b5c      	ldr	r3, [pc, #368]	; (8014c54 <Update_Proc_All+0x298>)
 8014ae4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8014ae8:	4619      	mov	r1, r3
 8014aea:	460b      	mov	r3, r1
 8014aec:	005b      	lsls	r3, r3, #1
 8014aee:	440b      	add	r3, r1
 8014af0:	005b      	lsls	r3, r3, #1
 8014af2:	4413      	add	r3, r2
 8014af4:	2201      	movs	r2, #1
 8014af6:	21e1      	movs	r1, #225	; 0xe1
 8014af8:	f7f9 f8b0 	bl	800dc5c <DispStr>
          DispStr10x14(S_X[PROBEATT], TITLE_Y_POS, PRN+SYMB,(List[PROBEATT].Val?("A"):("B")));
 8014afc:	2020      	movs	r0, #32
 8014afe:	4b55      	ldr	r3, [pc, #340]	; (8014c54 <Update_Proc_All+0x298>)
 8014b00:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d001      	beq.n	8014b0c <Update_Proc_All+0x150>
 8014b08:	4b53      	ldr	r3, [pc, #332]	; (8014c58 <Update_Proc_All+0x29c>)
 8014b0a:	e000      	b.n	8014b0e <Update_Proc_All+0x152>
 8014b0c:	4b53      	ldr	r3, [pc, #332]	; (8014c5c <Update_Proc_All+0x2a0>)
 8014b0e:	2210      	movs	r2, #16
 8014b10:	21e1      	movs	r1, #225	; 0xe1
 8014b12:	f7f9 fb0b 	bl	800e12c <DispStr10x14>
        }
        ParamTab[P1x2] = 2*((List[V0_POSI].Val+1));
 8014b16:	4b4f      	ldr	r3, [pc, #316]	; (8014c54 <Update_Proc_All+0x298>)
 8014b18:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8014b1c:	3301      	adds	r3, #1
 8014b1e:	b29b      	uxth	r3, r3
 8014b20:	005b      	lsls	r3, r3, #1
 8014b22:	b29b      	uxth	r3, r3
 8014b24:	b21a      	sxth	r2, r3
 8014b26:	4b4e      	ldr	r3, [pc, #312]	; (8014c60 <Update_Proc_All+0x2a4>)
 8014b28:	829a      	strh	r2, [r3, #20]
        ParamTab[VTx2] = ParamTab[P1x2]+ 2*(List[THRESHOLD].Val+1);
 8014b2a:	4b4d      	ldr	r3, [pc, #308]	; (8014c60 <Update_Proc_All+0x2a4>)
 8014b2c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8014b30:	b29a      	uxth	r2, r3
 8014b32:	4b48      	ldr	r3, [pc, #288]	; (8014c54 <Update_Proc_All+0x298>)
 8014b34:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8014b38:	3301      	adds	r3, #1
 8014b3a:	b29b      	uxth	r3, r3
 8014b3c:	005b      	lsls	r3, r3, #1
 8014b3e:	b29b      	uxth	r3, r3
 8014b40:	4413      	add	r3, r2
 8014b42:	b29b      	uxth	r3, r3
 8014b44:	b21a      	sxth	r2, r3
 8014b46:	4b46      	ldr	r3, [pc, #280]	; (8014c60 <Update_Proc_All+0x2a4>)
 8014b48:	839a      	strh	r2, [r3, #28]

        StateA =  (List[Y_RANGES].Val>5)?ACT: GND;                                    //ACT GND �ӵػ򼤻�״̬
 8014b4a:	4b42      	ldr	r3, [pc, #264]	; (8014c54 <Update_Proc_All+0x298>)
 8014b4c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014b50:	2b05      	cmp	r3, #5
 8014b52:	dd01      	ble.n	8014b58 <Update_Proc_All+0x19c>
 8014b54:	2204      	movs	r2, #4
 8014b56:	e000      	b.n	8014b5a <Update_Proc_All+0x19e>
 8014b58:	2200      	movs	r2, #0
 8014b5a:	4b42      	ldr	r3, [pc, #264]	; (8014c64 <Update_Proc_All+0x2a8>)
 8014b5c:	801a      	strh	r2, [r3, #0]
        GainA  = List[Y_RANGES].Val;
 8014b5e:	4b3d      	ldr	r3, [pc, #244]	; (8014c54 <Update_Proc_All+0x298>)
 8014b60:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8014b64:	4b40      	ldr	r3, [pc, #256]	; (8014c68 <Update_Proc_All+0x2ac>)
 8014b66:	801a      	strh	r2, [r3, #0]
        if(List[Y_RANGES].Val>1)
 8014b68:	4b3a      	ldr	r3, [pc, #232]	; (8014c54 <Update_Proc_All+0x298>)
 8014b6a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014b6e:	2b01      	cmp	r3, #1
 8014b70:	dd03      	ble.n	8014b7a <Update_Proc_All+0x1be>
          KindA  = HV;
 8014b72:	4b3e      	ldr	r3, [pc, #248]	; (8014c6c <Update_Proc_All+0x2b0>)
 8014b74:	2201      	movs	r2, #1
 8014b76:	801a      	strh	r2, [r3, #0]
 8014b78:	e002      	b.n	8014b80 <Update_Proc_All+0x1c4>
        else
          KindA  = LV;                //Ch1ѡ���ѹ���ѹ����
 8014b7a:	4b3c      	ldr	r3, [pc, #240]	; (8014c6c <Update_Proc_All+0x2b0>)
 8014b7c:	2200      	movs	r2, #0
 8014b7e:	801a      	strh	r2, [r3, #0]

        CouplA = (List[COUPLING].Val)? AC : DC;                      // AC);  //AC/DC��Ϸ�ʽ
 8014b80:	4b34      	ldr	r3, [pc, #208]	; (8014c54 <Update_Proc_All+0x298>)
 8014b82:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d001      	beq.n	8014b8e <Update_Proc_All+0x1d2>
 8014b8a:	2200      	movs	r2, #0
 8014b8c:	e000      	b.n	8014b90 <Update_Proc_All+0x1d4>
 8014b8e:	2202      	movs	r2, #2
 8014b90:	4b37      	ldr	r3, [pc, #220]	; (8014c70 <Update_Proc_All+0x2b4>)
 8014b92:	801a      	strh	r2, [r3, #0]
        BIOS_Ctrl(AiRANGE, KindA+CouplA+StateA);             //Ch1״̬ˢ��
 8014b94:	4b35      	ldr	r3, [pc, #212]	; (8014c6c <Update_Proc_All+0x2b0>)
 8014b96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014b9a:	461a      	mov	r2, r3
 8014b9c:	4b34      	ldr	r3, [pc, #208]	; (8014c70 <Update_Proc_All+0x2b4>)
 8014b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014ba2:	4413      	add	r3, r2
 8014ba4:	4a2f      	ldr	r2, [pc, #188]	; (8014c64 <Update_Proc_All+0x2a8>)
 8014ba6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014baa:	4413      	add	r3, r2
 8014bac:	4619      	mov	r1, r3
 8014bae:	2007      	movs	r0, #7
 8014bb0:	f7f7 fbdc 	bl	800c36c <BIOS_Ctrl>
        AiPosi(List[V0_POSI].Val);                        //Ch1Ӳ����Ӧλ��
 8014bb4:	4b27      	ldr	r3, [pc, #156]	; (8014c54 <Update_Proc_All+0x298>)
 8014bb6:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8014bba:	b2db      	uxtb	r3, r3
 8014bbc:	4618      	mov	r0, r3
 8014bbe:	f000 fa0f 	bl	8014fe0 <AiPosi>

        break;
 8014bc2:	e0e9      	b.n	8014d98 <Update_Proc_All+0x3dc>
      case TR_MODE:   // ˢ����ʾ������ʽ
      case FITTRIGG:  // ˢ����ʾ�Զ�������ֵ
      case THRESHOLD: // ˢ����ʾ������ֵ
      case SENSITIVE: // ˢ����ʾ����������
      case TR_TYPE:   // ˢ����ʾ�α���ʽ
        DispStatus();
 8014bc4:	f7ff fbee 	bl	80143a4 <DispStatus>
        SetColor(GRY, TCOLOR[TRG]);
 8014bc8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8014bcc:	4619      	mov	r1, r3
 8014bce:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014bd2:	f7f9 f82b 	bl	800dc2c <SetColor>
        if(i == TR_MODE || i==SENSITIVE)
 8014bd6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014bda:	2b0e      	cmp	r3, #14
 8014bdc:	d003      	beq.n	8014be6 <Update_Proc_All+0x22a>
 8014bde:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014be2:	2b11      	cmp	r3, #17
 8014be4:	d11a      	bne.n	8014c1c <Update_Proc_All+0x260>
        {
          Draw_Circle_D(INV, S_X[TR_MODE]-3, TITLE_Y_POS, 11, 0, 6*8);
 8014be6:	23dd      	movs	r3, #221	; 0xdd
 8014be8:	b29b      	uxth	r3, r3
 8014bea:	3b03      	subs	r3, #3
 8014bec:	b29b      	uxth	r3, r3
 8014bee:	b219      	sxth	r1, r3
 8014bf0:	2330      	movs	r3, #48	; 0x30
 8014bf2:	9301      	str	r3, [sp, #4]
 8014bf4:	2300      	movs	r3, #0
 8014bf6:	9300      	str	r3, [sp, #0]
 8014bf8:	230b      	movs	r3, #11
 8014bfa:	22e1      	movs	r2, #225	; 0xe1
 8014bfc:	2001      	movs	r0, #1
 8014bfe:	f7f9 f903 	bl	800de08 <Draw_Circle_D>
          DispStr10x14(S_X[TR_MODE], TITLE_Y_POS, INV+SYMB,(List[TR_MODE].Val?("D"):("C")));
 8014c02:	20dd      	movs	r0, #221	; 0xdd
 8014c04:	4b13      	ldr	r3, [pc, #76]	; (8014c54 <Update_Proc_All+0x298>)
 8014c06:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d001      	beq.n	8014c12 <Update_Proc_All+0x256>
 8014c0e:	4b19      	ldr	r3, [pc, #100]	; (8014c74 <Update_Proc_All+0x2b8>)
 8014c10:	e000      	b.n	8014c14 <Update_Proc_All+0x258>
 8014c12:	4b19      	ldr	r3, [pc, #100]	; (8014c78 <Update_Proc_All+0x2bc>)
 8014c14:	2211      	movs	r2, #17
 8014c16:	21e1      	movs	r1, #225	; 0xe1
 8014c18:	f7f9 fa88 	bl	800e12c <DispStr10x14>
        }
        if(i == FITTRIGG)
 8014c1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014c20:	2b0f      	cmp	r3, #15
 8014c22:	d132      	bne.n	8014c8a <Update_Proc_All+0x2ce>
        {
          DispStr10x14(S_X[FITTRIGG], TITLE_Y_POS, PRN+SYMB,(List[FITTRIGG].Val?("F"):("B")));
 8014c24:	20cf      	movs	r0, #207	; 0xcf
 8014c26:	4b0b      	ldr	r3, [pc, #44]	; (8014c54 <Update_Proc_All+0x298>)
 8014c28:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d001      	beq.n	8014c34 <Update_Proc_All+0x278>
 8014c30:	4b12      	ldr	r3, [pc, #72]	; (8014c7c <Update_Proc_All+0x2c0>)
 8014c32:	e000      	b.n	8014c36 <Update_Proc_All+0x27a>
 8014c34:	4b09      	ldr	r3, [pc, #36]	; (8014c5c <Update_Proc_All+0x2a0>)
 8014c36:	2210      	movs	r2, #16
 8014c38:	21e1      	movs	r1, #225	; 0xe1
 8014c3a:	f7f9 fa77 	bl	800e12c <DispStr10x14>
          if(List[FITTRIGG].Val)KEYTIME = 300;
 8014c3e:	4b05      	ldr	r3, [pc, #20]	; (8014c54 <Update_Proc_All+0x298>)
 8014c40:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d01d      	beq.n	8014c84 <Update_Proc_All+0x2c8>
 8014c48:	4b0d      	ldr	r3, [pc, #52]	; (8014c80 <Update_Proc_All+0x2c4>)
 8014c4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8014c4e:	801a      	strh	r2, [r3, #0]
 8014c50:	e01b      	b.n	8014c8a <Update_Proc_All+0x2ce>
 8014c52:	bf00      	nop
 8014c54:	20000298 	.word	0x20000298
 8014c58:	08000958 	.word	0x08000958
 8014c5c:	0800095c 	.word	0x0800095c
 8014c60:	20000140 	.word	0x20000140
 8014c64:	20002862 	.word	0x20002862
 8014c68:	2000284a 	.word	0x2000284a
 8014c6c:	20006886 	.word	0x20006886
 8014c70:	20006888 	.word	0x20006888
 8014c74:	08000988 	.word	0x08000988
 8014c78:	0800098c 	.word	0x0800098c
 8014c7c:	0800099c 	.word	0x0800099c
 8014c80:	2000077e 	.word	0x2000077e
          else KEYTIME = 0;
 8014c84:	4b4c      	ldr	r3, [pc, #304]	; (8014db8 <Update_Proc_All+0x3fc>)
 8014c86:	2200      	movs	r2, #0
 8014c88:	801a      	strh	r2, [r3, #0]
        };
        ParamTab[VTx2]= ParamTab[P1x2]+2*List[THRESHOLD].Val;
 8014c8a:	4b4c      	ldr	r3, [pc, #304]	; (8014dbc <Update_Proc_All+0x400>)
 8014c8c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8014c90:	b29a      	uxth	r2, r3
 8014c92:	4b4b      	ldr	r3, [pc, #300]	; (8014dc0 <Update_Proc_All+0x404>)
 8014c94:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8014c98:	b29b      	uxth	r3, r3
 8014c9a:	005b      	lsls	r3, r3, #1
 8014c9c:	b29b      	uxth	r3, r3
 8014c9e:	4413      	add	r3, r2
 8014ca0:	b29b      	uxth	r3, r3
 8014ca2:	b21a      	sxth	r2, r3
 8014ca4:	4b45      	ldr	r3, [pc, #276]	; (8014dbc <Update_Proc_All+0x400>)
 8014ca6:	839a      	strh	r2, [r3, #28]
        Tmp  = List[SENSITIVE].Val;
 8014ca8:	4b45      	ldr	r3, [pc, #276]	; (8014dc0 <Update_Proc_All+0x404>)
 8014caa:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8014cae:	60bb      	str	r3, [r7, #8]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8014cb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014cb4:	4a43      	ldr	r2, [pc, #268]	; (8014dc4 <Update_Proc_All+0x408>)
 8014cb6:	5cd3      	ldrb	r3, [r2, r3]
 8014cb8:	461c      	mov	r4, r3
 8014cba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014cbe:	4a42      	ldr	r2, [pc, #264]	; (8014dc8 <Update_Proc_All+0x40c>)
 8014cc0:	5cd3      	ldrb	r3, [r2, r3]
 8014cc2:	4618      	mov	r0, r3
 8014cc4:	f7fc ff9e 	bl	8011c04 <Exp>
 8014cc8:	4603      	mov	r3, r0
 8014cca:	fb03 f204 	mul.w	r2, r3, r4
 8014cce:	68bb      	ldr	r3, [r7, #8]
 8014cd0:	fb02 f303 	mul.w	r3, r2, r3
 8014cd4:	60bb      	str	r3, [r7, #8]
        Value2Str(NumStr, Tmp, V[2], 2, UNSIGN);
 8014cd6:	2301      	movs	r3, #1
 8014cd8:	9300      	str	r3, [sp, #0]
 8014cda:	2302      	movs	r3, #2
 8014cdc:	4a3b      	ldr	r2, [pc, #236]	; (8014dcc <Update_Proc_All+0x410>)
 8014cde:	68b9      	ldr	r1, [r7, #8]
 8014ce0:	483b      	ldr	r0, [pc, #236]	; (8014dd0 <Update_Proc_All+0x414>)
 8014ce2:	f7fc fe93 	bl	8011a0c <Value2Str>
        DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, INV+SYMB,"E");
 8014ce6:	20e7      	movs	r0, #231	; 0xe7
 8014ce8:	4b3a      	ldr	r3, [pc, #232]	; (8014dd4 <Update_Proc_All+0x418>)
 8014cea:	2211      	movs	r2, #17
 8014cec:	21e1      	movs	r1, #225	; 0xe1
 8014cee:	f7f9 fa1d 	bl	800e12c <DispStr10x14>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  "     ");
 8014cf2:	23e7      	movs	r3, #231	; 0xe7
 8014cf4:	b29b      	uxth	r3, r3
 8014cf6:	3309      	adds	r3, #9
 8014cf8:	b29b      	uxth	r3, r3
 8014cfa:	b218      	sxth	r0, r3
 8014cfc:	4b36      	ldr	r3, [pc, #216]	; (8014dd8 <Update_Proc_All+0x41c>)
 8014cfe:	2201      	movs	r2, #1
 8014d00:	21e1      	movs	r1, #225	; 0xe1
 8014d02:	f7f8 ffab 	bl	800dc5c <DispStr>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  (char *)NumStr);
 8014d06:	23e7      	movs	r3, #231	; 0xe7
 8014d08:	b29b      	uxth	r3, r3
 8014d0a:	3309      	adds	r3, #9
 8014d0c:	b29b      	uxth	r3, r3
 8014d0e:	b218      	sxth	r0, r3
 8014d10:	4b2f      	ldr	r3, [pc, #188]	; (8014dd0 <Update_Proc_All+0x414>)
 8014d12:	2201      	movs	r2, #1
 8014d14:	21e1      	movs	r1, #225	; 0xe1
 8014d16:	f7f8 ffa1 	bl	800dc5c <DispStr>
        ParamTab[VTF]=(List[TR_TYPE].Val)? L_HID : SHOW;
 8014d1a:	4b29      	ldr	r3, [pc, #164]	; (8014dc0 <Update_Proc_All+0x404>)
 8014d1c:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d001      	beq.n	8014d28 <Update_Proc_All+0x36c>
 8014d24:	2202      	movs	r2, #2
 8014d26:	e000      	b.n	8014d2a <Update_Proc_All+0x36e>
 8014d28:	2200      	movs	r2, #0
 8014d2a:	4b24      	ldr	r3, [pc, #144]	; (8014dbc <Update_Proc_All+0x400>)
 8014d2c:	811a      	strh	r2, [r3, #8]
        break;
 8014d2e:	e033      	b.n	8014d98 <Update_Proc_All+0x3dc>

      case TIM_BASE:  // ˢ����ʾʱ����λ
        SetColor(GRY, TCOLOR[XN]);
 8014d30:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8014d34:	4619      	mov	r1, r3
 8014d36:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014d3a:	f7f8 ff77 	bl	800dc2c <SetColor>
        if(i == TIM_BASE)
 8014d3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014d42:	2b07      	cmp	r3, #7
 8014d44:	d120      	bne.n	8014d88 <Update_Proc_All+0x3cc>
        {
          Draw_Circle_D(INV, S_X[i]-3, TITLE_Y_POS, 11, 2, 6*5);
 8014d46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014d4a:	4a24      	ldr	r2, [pc, #144]	; (8014ddc <Update_Proc_All+0x420>)
 8014d4c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8014d50:	b29b      	uxth	r3, r3
 8014d52:	3b03      	subs	r3, #3
 8014d54:	b29b      	uxth	r3, r3
 8014d56:	b219      	sxth	r1, r3
 8014d58:	231e      	movs	r3, #30
 8014d5a:	9301      	str	r3, [sp, #4]
 8014d5c:	2302      	movs	r3, #2
 8014d5e:	9300      	str	r3, [sp, #0]
 8014d60:	230b      	movs	r3, #11
 8014d62:	22e1      	movs	r2, #225	; 0xe1
 8014d64:	2001      	movs	r0, #1
 8014d66:	f7f9 f84f 	bl	800de08 <Draw_Circle_D>
          DispStr(S_X[i], TITLE_Y_POS, INV, (char *)TimeBase_Str[List[TIM_BASE].Val]);
 8014d6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014d6e:	4a1b      	ldr	r2, [pc, #108]	; (8014ddc <Update_Proc_All+0x420>)
 8014d70:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8014d74:	4b12      	ldr	r3, [pc, #72]	; (8014dc0 <Update_Proc_All+0x404>)
 8014d76:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014d7a:	00db      	lsls	r3, r3, #3
 8014d7c:	4a18      	ldr	r2, [pc, #96]	; (8014de0 <Update_Proc_All+0x424>)
 8014d7e:	4413      	add	r3, r2
 8014d80:	2201      	movs	r2, #1
 8014d82:	21e1      	movs	r1, #225	; 0xe1
 8014d84:	f7f8 ff6a 	bl	800dc5c <DispStr>
        }
        Set_Base(List[TIM_BASE].Val);          // Ӳ������ɨ��ʱ����λ
 8014d88:	4b0d      	ldr	r3, [pc, #52]	; (8014dc0 <Update_Proc_All+0x404>)
 8014d8a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014d8e:	4618      	mov	r0, r3
 8014d90:	f7f7 fc14 	bl	800c5bc <Set_Base>
      break;
 8014d94:	e000      	b.n	8014d98 <Update_Proc_All+0x3dc>

      }
    }
 8014d96:	bf00      	nop
  for(i=Y_RANGES; i<=STANDBY; i++){
 8014d98:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014d9c:	b29b      	uxth	r3, r3
 8014d9e:	3301      	adds	r3, #1
 8014da0:	b29b      	uxth	r3, r3
 8014da2:	81fb      	strh	r3, [r7, #14]
 8014da4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014da8:	2b29      	cmp	r3, #41	; 0x29
 8014daa:	f77f ae3c 	ble.w	8014a26 <Update_Proc_All+0x6a>
  }
}
 8014dae:	bf00      	nop
 8014db0:	bf00      	nop
 8014db2:	3714      	adds	r7, #20
 8014db4:	46bd      	mov	sp, r7
 8014db6:	bd90      	pop	{r4, r7, pc}
 8014db8:	2000077e 	.word	0x2000077e
 8014dbc:	20000140 	.word	0x20000140
 8014dc0:	20000298 	.word	0x20000298
 8014dc4:	08002130 	.word	0x08002130
 8014dc8:	08002108 	.word	0x08002108
 8014dcc:	08001d0c 	.word	0x08001d0c
 8014dd0:	2000283c 	.word	0x2000283c
 8014dd4:	08000998 	.word	0x08000998
 8014dd8:	08000990 	.word	0x08000990
 8014ddc:	0800215c 	.word	0x0800215c
 8014de0:	200001d0 	.word	0x200001d0

08014de4 <Align_Set>:

/*******************************************************************************
 Align_Set:
*******************************************************************************/
void Align_Set(void)
{
 8014de4:	b580      	push	{r7, lr}
 8014de6:	b082      	sub	sp, #8
 8014de8:	af00      	add	r7, sp, #0
  unsigned short i, TmpA = 0, StA = 0;
 8014dea:	2300      	movs	r3, #0
 8014dec:	807b      	strh	r3, [r7, #2]
 8014dee:	2300      	movs	r3, #0
 8014df0:	80bb      	strh	r3, [r7, #4]

  Analys();
 8014df2:	f000 f8b1 	bl	8014f58 <Analys>
  for(i=0; i<100; i++)
 8014df6:	2300      	movs	r3, #0
 8014df8:	80fb      	strh	r3, [r7, #6]
 8014dfa:	e051      	b.n	8014ea0 <Align_Set+0xbc>
  {
    AiPosi(100);
 8014dfc:	2064      	movs	r0, #100	; 0x64
 8014dfe:	f000 f8ef 	bl	8014fe0 <AiPosi>
    HAL_Delay(10);                             // Wait 10mS
 8014e02:	200a      	movs	r0, #10
 8014e04:	f003 fac2 	bl	801838c <HAL_Delay>
    Analys();
 8014e08:	f000 f8a6 	bl	8014f58 <Analys>
    TmpA = 2048-Vavg;
 8014e0c:	4b28      	ldr	r3, [pc, #160]	; (8014eb0 <Align_Set+0xcc>)
 8014e0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014e12:	b29b      	uxth	r3, r3
 8014e14:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8014e18:	807b      	strh	r3, [r7, #2]

    if(TmpA != 0)
 8014e1a:	887b      	ldrh	r3, [r7, #2]
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d036      	beq.n	8014e8e <Align_Set+0xaa>
    {
      KpA[KindA+(StateA?1:0)] += 700*TmpA/2048;
 8014e20:	4b24      	ldr	r3, [pc, #144]	; (8014eb4 <Align_Set+0xd0>)
 8014e22:	681a      	ldr	r2, [r3, #0]
 8014e24:	4b24      	ldr	r3, [pc, #144]	; (8014eb8 <Align_Set+0xd4>)
 8014e26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014e2a:	4619      	mov	r1, r3
 8014e2c:	4b23      	ldr	r3, [pc, #140]	; (8014ebc <Align_Set+0xd8>)
 8014e2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	bf14      	ite	ne
 8014e36:	2301      	movne	r3, #1
 8014e38:	2300      	moveq	r3, #0
 8014e3a:	b2db      	uxtb	r3, r3
 8014e3c:	440b      	add	r3, r1
 8014e3e:	005b      	lsls	r3, r3, #1
 8014e40:	4413      	add	r3, r2
 8014e42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014e46:	b29a      	uxth	r2, r3
 8014e48:	887b      	ldrh	r3, [r7, #2]
 8014e4a:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8014e4e:	fb01 f303 	mul.w	r3, r1, r3
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	da01      	bge.n	8014e5a <Align_Set+0x76>
 8014e56:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8014e5a:	12db      	asrs	r3, r3, #11
 8014e5c:	b29b      	uxth	r3, r3
 8014e5e:	4413      	add	r3, r2
 8014e60:	b299      	uxth	r1, r3
 8014e62:	4b14      	ldr	r3, [pc, #80]	; (8014eb4 <Align_Set+0xd0>)
 8014e64:	681a      	ldr	r2, [r3, #0]
 8014e66:	4b14      	ldr	r3, [pc, #80]	; (8014eb8 <Align_Set+0xd4>)
 8014e68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014e6c:	4618      	mov	r0, r3
 8014e6e:	4b13      	ldr	r3, [pc, #76]	; (8014ebc <Align_Set+0xd8>)
 8014e70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	bf14      	ite	ne
 8014e78:	2301      	movne	r3, #1
 8014e7a:	2300      	moveq	r3, #0
 8014e7c:	b2db      	uxtb	r3, r3
 8014e7e:	4403      	add	r3, r0
 8014e80:	005b      	lsls	r3, r3, #1
 8014e82:	4413      	add	r3, r2
 8014e84:	b20a      	sxth	r2, r1
 8014e86:	801a      	strh	r2, [r3, #0]
      StA = 0;
 8014e88:	2300      	movs	r3, #0
 8014e8a:	80bb      	strh	r3, [r7, #4]
 8014e8c:	e002      	b.n	8014e94 <Align_Set+0xb0>
    }
    else
      StA++;
 8014e8e:	88bb      	ldrh	r3, [r7, #4]
 8014e90:	3301      	adds	r3, #1
 8014e92:	80bb      	strh	r3, [r7, #4]

    if(StA > 4)
 8014e94:	88bb      	ldrh	r3, [r7, #4]
 8014e96:	2b04      	cmp	r3, #4
 8014e98:	d806      	bhi.n	8014ea8 <Align_Set+0xc4>
  for(i=0; i<100; i++)
 8014e9a:	88fb      	ldrh	r3, [r7, #6]
 8014e9c:	3301      	adds	r3, #1
 8014e9e:	80fb      	strh	r3, [r7, #6]
 8014ea0:	88fb      	ldrh	r3, [r7, #6]
 8014ea2:	2b63      	cmp	r3, #99	; 0x63
 8014ea4:	d9aa      	bls.n	8014dfc <Align_Set+0x18>
 8014ea6:	e000      	b.n	8014eaa <Align_Set+0xc6>
    	return;
 8014ea8:	bf00      	nop
  }

}
 8014eaa:	3708      	adds	r7, #8
 8014eac:	46bd      	mov	sp, r7
 8014eae:	bd80      	pop	{r7, pc}
 8014eb0:	20002858 	.word	0x20002858
 8014eb4:	20000578 	.word	0x20000578
 8014eb8:	20006886 	.word	0x20006886
 8014ebc:	20002862 	.word	0x20002862

08014ec0 <Zero_Align>:

/*******************************************************************************
 Channel's zero alignment:
*******************************************************************************/
void Zero_Align(void)
{
 8014ec0:	b580      	push	{r7, lr}
 8014ec2:	af00      	add	r7, sp, #0
  GainA  = 0;//0x20;
 8014ec4:	4b21      	ldr	r3, [pc, #132]	; (8014f4c <Zero_Align+0x8c>)
 8014ec6:	2200      	movs	r2, #0
 8014ec8:	801a      	strh	r2, [r3, #0]
  KindA  = HV;
 8014eca:	4b21      	ldr	r3, [pc, #132]	; (8014f50 <Zero_Align+0x90>)
 8014ecc:	2201      	movs	r2, #1
 8014ece:	801a      	strh	r2, [r3, #0]
  StateA = ACT;
 8014ed0:	4b20      	ldr	r3, [pc, #128]	; (8014f54 <Zero_Align+0x94>)
 8014ed2:	2204      	movs	r2, #4
 8014ed4:	801a      	strh	r2, [r3, #0]
  BIOS_Ctrl(AiRANGE, HV+AC+ACT);
 8014ed6:	2105      	movs	r1, #5
 8014ed8:	2007      	movs	r0, #7
 8014eda:	f7f7 fa47 	bl	800c36c <BIOS_Ctrl>
  AiPosi(100);
 8014ede:	2064      	movs	r0, #100	; 0x64
 8014ee0:	f000 f87e 	bl	8014fe0 <AiPosi>
  HAL_Delay(1000);
 8014ee4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014ee8:	f003 fa50 	bl	801838c <HAL_Delay>
  Align_Set();
 8014eec:	f7ff ff7a 	bl	8014de4 <Align_Set>

  GainA  = 0;//0x20;
 8014ef0:	4b16      	ldr	r3, [pc, #88]	; (8014f4c <Zero_Align+0x8c>)
 8014ef2:	2200      	movs	r2, #0
 8014ef4:	801a      	strh	r2, [r3, #0]
  KindA  = HV;
 8014ef6:	4b16      	ldr	r3, [pc, #88]	; (8014f50 <Zero_Align+0x90>)
 8014ef8:	2201      	movs	r2, #1
 8014efa:	801a      	strh	r2, [r3, #0]
  StateA = GND;
 8014efc:	4b15      	ldr	r3, [pc, #84]	; (8014f54 <Zero_Align+0x94>)
 8014efe:	2200      	movs	r2, #0
 8014f00:	801a      	strh	r2, [r3, #0]
  BIOS_Ctrl(AiRANGE, HV+AC+GND);
 8014f02:	2101      	movs	r1, #1
 8014f04:	2007      	movs	r0, #7
 8014f06:	f7f7 fa31 	bl	800c36c <BIOS_Ctrl>
  AiPosi(100);
 8014f0a:	2064      	movs	r0, #100	; 0x64
 8014f0c:	f000 f868 	bl	8014fe0 <AiPosi>
  HAL_Delay(1000);
 8014f10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014f14:	f003 fa3a 	bl	801838c <HAL_Delay>
  Align_Set();
 8014f18:	f7ff ff64 	bl	8014de4 <Align_Set>

  GainA  = 0;//0x20;
 8014f1c:	4b0b      	ldr	r3, [pc, #44]	; (8014f4c <Zero_Align+0x8c>)
 8014f1e:	2200      	movs	r2, #0
 8014f20:	801a      	strh	r2, [r3, #0]
  KindA  = LV;
 8014f22:	4b0b      	ldr	r3, [pc, #44]	; (8014f50 <Zero_Align+0x90>)
 8014f24:	2200      	movs	r2, #0
 8014f26:	801a      	strh	r2, [r3, #0]
  StateA = GND;
 8014f28:	4b0a      	ldr	r3, [pc, #40]	; (8014f54 <Zero_Align+0x94>)
 8014f2a:	2200      	movs	r2, #0
 8014f2c:	801a      	strh	r2, [r3, #0]
  BIOS_Ctrl(AiRANGE, LV+AC+GND);
 8014f2e:	2100      	movs	r1, #0
 8014f30:	2007      	movs	r0, #7
 8014f32:	f7f7 fa1b 	bl	800c36c <BIOS_Ctrl>
  AiPosi(100);
 8014f36:	2064      	movs	r0, #100	; 0x64
 8014f38:	f000 f852 	bl	8014fe0 <AiPosi>
  HAL_Delay(1000);
 8014f3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014f40:	f003 fa24 	bl	801838c <HAL_Delay>
  Align_Set();
 8014f44:	f7ff ff4e 	bl	8014de4 <Align_Set>

}
 8014f48:	bf00      	nop
 8014f4a:	bd80      	pop	{r7, pc}
 8014f4c:	2000284a 	.word	0x2000284a
 8014f50:	20006886 	.word	0x20006886
 8014f54:	20002862 	.word	0x20002862

08014f58 <Analys>:

/*******************************************************************************
 Channel's error analys
*******************************************************************************/
void Analys(void)
{
 8014f58:	b580      	push	{r7, lr}
 8014f5a:	b082      	sub	sp, #8
 8014f5c:	af00      	add	r7, sp, #0
  unsigned i, SumA = 0;
 8014f5e:	2300      	movs	r3, #0
 8014f60:	603b      	str	r3, [r7, #0]

  BIOS_Ctrl(SMPL_ST, DISABLE);
 8014f62:	2100      	movs	r1, #0
 8014f64:	2004      	movs	r0, #4
 8014f66:	f7f7 fa01 	bl	800c36c <BIOS_Ctrl>
  BIOS_Ctrl(SMPLTIM, 720-1);      // 72MHz/360 = 400kHz = 2.5uS
 8014f6a:	f240 21cf 	movw	r1, #719	; 0x2cf
 8014f6e:	2005      	movs	r0, #5
 8014f70:	f7f7 f9fc 	bl	800c36c <BIOS_Ctrl>
  BIOS_Ctrl(SMPLNUM, 4096);       // 8192
 8014f74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8014f78:	2006      	movs	r0, #6
 8014f7a:	f7f7 f9f7 	bl	800c36c <BIOS_Ctrl>
  BIOS_Ctrl(SMPL_ST, ENABLE);
 8014f7e:	2101      	movs	r1, #1
 8014f80:	2004      	movs	r0, #4
 8014f82:	f7f7 f9f3 	bl	800c36c <BIOS_Ctrl>
  while((BIOS_Info(CHA_CNT) != 0)) {};
 8014f86:	bf00      	nop
 8014f88:	2000      	movs	r0, #0
 8014f8a:	f7f7 f9dd 	bl	800c348 <BIOS_Info>
 8014f8e:	4603      	mov	r3, r0
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d1f9      	bne.n	8014f88 <Analys+0x30>
  for(i=2; i<4000+2; i++){
 8014f94:	2302      	movs	r3, #2
 8014f96:	607b      	str	r3, [r7, #4]
 8014f98:	e00a      	b.n	8014fb0 <Analys+0x58>
    SumA += Sampl[i];
 8014f9a:	4a0e      	ldr	r2, [pc, #56]	; (8014fd4 <Analys+0x7c>)
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8014fa2:	461a      	mov	r2, r3
 8014fa4:	683b      	ldr	r3, [r7, #0]
 8014fa6:	4413      	add	r3, r2
 8014fa8:	603b      	str	r3, [r7, #0]
  for(i=2; i<4000+2; i++){
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	3301      	adds	r3, #1
 8014fae:	607b      	str	r3, [r7, #4]
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	f640 72a1 	movw	r2, #4001	; 0xfa1
 8014fb6:	4293      	cmp	r3, r2
 8014fb8:	d9ef      	bls.n	8014f9a <Analys+0x42>
  }
  Vavg = SumA/4000; // 4000
 8014fba:	683b      	ldr	r3, [r7, #0]
 8014fbc:	4a06      	ldr	r2, [pc, #24]	; (8014fd8 <Analys+0x80>)
 8014fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8014fc2:	0a1b      	lsrs	r3, r3, #8
 8014fc4:	b21a      	sxth	r2, r3
 8014fc6:	4b05      	ldr	r3, [pc, #20]	; (8014fdc <Analys+0x84>)
 8014fc8:	801a      	strh	r2, [r3, #0]
}
 8014fca:	bf00      	nop
 8014fcc:	3708      	adds	r7, #8
 8014fce:	46bd      	mov	sp, r7
 8014fd0:	bd80      	pop	{r7, pc}
 8014fd2:	bf00      	nop
 8014fd4:	20002870 	.word	0x20002870
 8014fd8:	10624dd3 	.word	0x10624dd3
 8014fdc:	20002858 	.word	0x20002858

08014fe0 <AiPosi>:

/*******************************************************************************
 DevCtrl:  offset
*******************************************************************************/
void AiPosi(char Val)
{
 8014fe0:	b580      	push	{r7, lr}
 8014fe2:	b082      	sub	sp, #8
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	4603      	mov	r3, r0
 8014fe8:	71fb      	strb	r3, [r7, #7]
   BIOS_Ctrl(AOFFSET,((char)Val-100)*(KpA[KindA+(StateA?1:0)]/2)*GK[GainA]/KgA[KindA+(StateA?1:0)]+KpA[KindA+(StateA?1:0)]);
 8014fea:	79fb      	ldrb	r3, [r7, #7]
 8014fec:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8014ff0:	4b28      	ldr	r3, [pc, #160]	; (8015094 <AiPosi+0xb4>)
 8014ff2:	6819      	ldr	r1, [r3, #0]
 8014ff4:	4b28      	ldr	r3, [pc, #160]	; (8015098 <AiPosi+0xb8>)
 8014ff6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014ffa:	4618      	mov	r0, r3
 8014ffc:	4b27      	ldr	r3, [pc, #156]	; (801509c <AiPosi+0xbc>)
 8014ffe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015002:	2b00      	cmp	r3, #0
 8015004:	bf14      	ite	ne
 8015006:	2301      	movne	r3, #1
 8015008:	2300      	moveq	r3, #0
 801500a:	b2db      	uxtb	r3, r3
 801500c:	4403      	add	r3, r0
 801500e:	005b      	lsls	r3, r3, #1
 8015010:	440b      	add	r3, r1
 8015012:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015016:	0fd9      	lsrs	r1, r3, #31
 8015018:	440b      	add	r3, r1
 801501a:	105b      	asrs	r3, r3, #1
 801501c:	b21b      	sxth	r3, r3
 801501e:	fb03 f302 	mul.w	r3, r3, r2
 8015022:	4a1f      	ldr	r2, [pc, #124]	; (80150a0 <AiPosi+0xc0>)
 8015024:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015028:	4611      	mov	r1, r2
 801502a:	4a1e      	ldr	r2, [pc, #120]	; (80150a4 <AiPosi+0xc4>)
 801502c:	5c52      	ldrb	r2, [r2, r1]
 801502e:	fb02 f303 	mul.w	r3, r2, r3
 8015032:	4a1d      	ldr	r2, [pc, #116]	; (80150a8 <AiPosi+0xc8>)
 8015034:	6811      	ldr	r1, [r2, #0]
 8015036:	4a18      	ldr	r2, [pc, #96]	; (8015098 <AiPosi+0xb8>)
 8015038:	f9b2 2000 	ldrsh.w	r2, [r2]
 801503c:	4610      	mov	r0, r2
 801503e:	4a17      	ldr	r2, [pc, #92]	; (801509c <AiPosi+0xbc>)
 8015040:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015044:	2a00      	cmp	r2, #0
 8015046:	bf14      	ite	ne
 8015048:	2201      	movne	r2, #1
 801504a:	2200      	moveq	r2, #0
 801504c:	b2d2      	uxtb	r2, r2
 801504e:	4402      	add	r2, r0
 8015050:	0052      	lsls	r2, r2, #1
 8015052:	440a      	add	r2, r1
 8015054:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015058:	fb93 f3f2 	sdiv	r3, r3, r2
 801505c:	4a0d      	ldr	r2, [pc, #52]	; (8015094 <AiPosi+0xb4>)
 801505e:	6811      	ldr	r1, [r2, #0]
 8015060:	4a0d      	ldr	r2, [pc, #52]	; (8015098 <AiPosi+0xb8>)
 8015062:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015066:	4610      	mov	r0, r2
 8015068:	4a0c      	ldr	r2, [pc, #48]	; (801509c <AiPosi+0xbc>)
 801506a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801506e:	2a00      	cmp	r2, #0
 8015070:	bf14      	ite	ne
 8015072:	2201      	movne	r2, #1
 8015074:	2200      	moveq	r2, #0
 8015076:	b2d2      	uxtb	r2, r2
 8015078:	4402      	add	r2, r0
 801507a:	0052      	lsls	r2, r2, #1
 801507c:	440a      	add	r2, r1
 801507e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015082:	4413      	add	r3, r2
 8015084:	4619      	mov	r1, r3
 8015086:	2008      	movs	r0, #8
 8015088:	f7f7 f970 	bl	800c36c <BIOS_Ctrl>
}
 801508c:	bf00      	nop
 801508e:	3708      	adds	r7, #8
 8015090:	46bd      	mov	sp, r7
 8015092:	bd80      	pop	{r7, pc}
 8015094:	20000578 	.word	0x20000578
 8015098:	20006886 	.word	0x20006886
 801509c:	20002862 	.word	0x20002862
 80150a0:	2000284a 	.word	0x2000284a
 80150a4:	20000560 	.word	0x20000560
 80150a8:	2000057c 	.word	0x2000057c

080150ac <WaveProcess>:
/*******************************************************************************
 WaveProcess: ���㴦���������������
*******************************************************************************/

void WaveProcess(void)
{
 80150ac:	b580      	push	{r7, lr}
 80150ae:	b094      	sub	sp, #80	; 0x50
 80150b0:	af00      	add	r7, sp, #0
  //------------------ ����Ԥ����,���ɽ���ָ��������ݵ���Ч�� -----------------//

  short* Ain  = (short*)&Sampl[2];
 80150b2:	4bb0      	ldr	r3, [pc, #704]	; (8015374 <WaveProcess+0x2c8>)
 80150b4:	617b      	str	r3, [r7, #20]

  int  Ak = (KgA[KindA+(StateA?1:0)]*4)/GK[GainA];
 80150b6:	4bb0      	ldr	r3, [pc, #704]	; (8015378 <WaveProcess+0x2cc>)
 80150b8:	681a      	ldr	r2, [r3, #0]
 80150ba:	4bb0      	ldr	r3, [pc, #704]	; (801537c <WaveProcess+0x2d0>)
 80150bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80150c0:	4619      	mov	r1, r3
 80150c2:	4baf      	ldr	r3, [pc, #700]	; (8015380 <WaveProcess+0x2d4>)
 80150c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	bf14      	ite	ne
 80150cc:	2301      	movne	r3, #1
 80150ce:	2300      	moveq	r3, #0
 80150d0:	b2db      	uxtb	r3, r3
 80150d2:	440b      	add	r3, r1
 80150d4:	005b      	lsls	r3, r3, #1
 80150d6:	4413      	add	r3, r2
 80150d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80150dc:	009b      	lsls	r3, r3, #2
 80150de:	4aa9      	ldr	r2, [pc, #676]	; (8015384 <WaveProcess+0x2d8>)
 80150e0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80150e4:	4611      	mov	r1, r2
 80150e6:	4aa8      	ldr	r2, [pc, #672]	; (8015388 <WaveProcess+0x2dc>)
 80150e8:	5c52      	ldrb	r2, [r2, r1]
 80150ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80150ee:	613b      	str	r3, [r7, #16]
  short  i, n, k, p = 0;
 80150f0:	2300      	movs	r3, #0
 80150f2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

  short  VtlA, ViA, VthA, VeA, VpA, VoA;            // VtA,

  short  DtA   = 0, TslA  =  0, TshA = 0, StA  = 2;
 80150f6:	2300      	movs	r3, #0
 80150f8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80150fa:	2300      	movs	r3, #0
 80150fc:	877b      	strh	r3, [r7, #58]	; 0x3a
 80150fe:	2300      	movs	r3, #0
 8015100:	873b      	strh	r3, [r7, #56]	; 0x38
 8015102:	2302      	movs	r3, #2
 8015104:	86fb      	strh	r3, [r7, #54]	; 0x36
  short  FallA = 0, RiseA =  0, UpA  = 0, DnA  = 0;
 8015106:	2300      	movs	r3, #0
 8015108:	86bb      	strh	r3, [r7, #52]	; 0x34
 801510a:	2300      	movs	r3, #0
 801510c:	867b      	strh	r3, [r7, #50]	; 0x32
 801510e:	2300      	movs	r3, #0
 8015110:	863b      	strh	r3, [r7, #48]	; 0x30
 8015112:	2300      	movs	r3, #0
 8015114:	85fb      	strh	r3, [r7, #46]	; 0x2e
  int  MaxA  = 0, MinA  = ~0, SumA = 0, SsqA = 0; // ���/��Сֵ,�ۼ�/ƽ���� = 0
 8015116:	2300      	movs	r3, #0
 8015118:	62bb      	str	r3, [r7, #40]	; 0x28
 801511a:	f04f 33ff 	mov.w	r3, #4294967295
 801511e:	627b      	str	r3, [r7, #36]	; 0x24
 8015120:	2300      	movs	r3, #0
 8015122:	623b      	str	r3, [r7, #32]
 8015124:	2300      	movs	r3, #0
 8015126:	61fb      	str	r3, [r7, #28]

  short  Dpth  = DEPTH[List[SMPL_DPTH].Val] - 1;
 8015128:	4b98      	ldr	r3, [pc, #608]	; (801538c <WaveProcess+0x2e0>)
 801512a:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 801512e:	461a      	mov	r2, r3
 8015130:	4b97      	ldr	r3, [pc, #604]	; (8015390 <WaveProcess+0x2e4>)
 8015132:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8015136:	b29b      	uxth	r3, r3
 8015138:	3b01      	subs	r3, #1
 801513a:	b29b      	uxth	r3, r3
 801513c:	837b      	strh	r3, [r7, #26]
  short  Tp    = PRE_SMPL+1, Tm = List[TR_MODE].Val & 1;
 801513e:	2397      	movs	r3, #151	; 0x97
 8015140:	81fb      	strh	r3, [r7, #14]
 8015142:	4b92      	ldr	r3, [pc, #584]	; (801538c <WaveProcess+0x2e0>)
 8015144:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8015148:	f003 0301 	and.w	r3, r3, #1
 801514c:	81bb      	strh	r3, [r7, #12]
  short  Ks    = KS[List[TIM_BASE].Val],  Sm = List[SYNCMODE].Val;
 801514e:	4b8f      	ldr	r3, [pc, #572]	; (801538c <WaveProcess+0x2e0>)
 8015150:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015154:	461a      	mov	r2, r3
 8015156:	4b8f      	ldr	r3, [pc, #572]	; (8015394 <WaveProcess+0x2e8>)
 8015158:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801515c:	817b      	strh	r3, [r7, #10]
 801515e:	4b8b      	ldr	r3, [pc, #556]	; (801538c <WaveProcess+0x2e0>)
 8015160:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8015164:	813b      	strh	r3, [r7, #8]
  char   Ext = List[EXT_REFN].Val;
 8015166:	4b89      	ldr	r3, [pc, #548]	; (801538c <WaveProcess+0x2e0>)
 8015168:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 801516c:	71fb      	strb	r3, [r7, #7]

//---------------------- ��������Ԥ����,����ʵ�ʴ�����ֵ ---------------------//
  if(Status == STOP)
 801516e:	4b8a      	ldr	r3, [pc, #552]	; (8015398 <WaveProcess+0x2ec>)
 8015170:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015174:	2b01      	cmp	r3, #1
 8015176:	d13c      	bne.n	80151f2 <WaveProcess+0x146>
  {
    VtlA  = (((Tri_Posi + Ch1_Posi - List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 8015178:	4b88      	ldr	r3, [pc, #544]	; (801539c <WaveProcess+0x2f0>)
 801517a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801517e:	461a      	mov	r2, r3
 8015180:	4b87      	ldr	r3, [pc, #540]	; (80153a0 <WaveProcess+0x2f4>)
 8015182:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015186:	4413      	add	r3, r2
 8015188:	4a80      	ldr	r2, [pc, #512]	; (801538c <WaveProcess+0x2e0>)
 801518a:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 801518e:	1a9b      	subs	r3, r3, r2
 8015190:	3b64      	subs	r3, #100	; 0x64
 8015192:	031a      	lsls	r2, r3, #12
 8015194:	693b      	ldr	r3, [r7, #16]
 8015196:	fb92 f3f3 	sdiv	r3, r2, r3
 801519a:	b29b      	uxth	r3, r3
 801519c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80151a0:	b29b      	uxth	r3, r3
 80151a2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    VthA  = (((Tri_Posi + Ch1_Posi + List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 80151a6:	4b7d      	ldr	r3, [pc, #500]	; (801539c <WaveProcess+0x2f0>)
 80151a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80151ac:	461a      	mov	r2, r3
 80151ae:	4b7c      	ldr	r3, [pc, #496]	; (80153a0 <WaveProcess+0x2f4>)
 80151b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80151b4:	4413      	add	r3, r2
 80151b6:	4a75      	ldr	r2, [pc, #468]	; (801538c <WaveProcess+0x2e0>)
 80151b8:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 80151bc:	4413      	add	r3, r2
 80151be:	3b64      	subs	r3, #100	; 0x64
 80151c0:	031a      	lsls	r2, r3, #12
 80151c2:	693b      	ldr	r3, [r7, #16]
 80151c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80151c8:	b29b      	uxth	r3, r3
 80151ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80151ce:	b29b      	uxth	r3, r3
 80151d0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    VpA   = ((((List[V0_POSI].Val)       -100)<<12)/Ak)+2048; //??
 80151d4:	4b6d      	ldr	r3, [pc, #436]	; (801538c <WaveProcess+0x2e0>)
 80151d6:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80151da:	3b64      	subs	r3, #100	; 0x64
 80151dc:	031a      	lsls	r2, r3, #12
 80151de:	693b      	ldr	r3, [r7, #16]
 80151e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80151e4:	b29b      	uxth	r3, r3
 80151e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80151ea:	b29b      	uxth	r3, r3
 80151ec:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80151f0:	e03b      	b.n	801526a <WaveProcess+0x1be>
  }
  else
  {
    VtlA  = (((List[THRESHOLD].Val + List[V0_POSI].Val - List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 80151f2:	4b66      	ldr	r3, [pc, #408]	; (801538c <WaveProcess+0x2e0>)
 80151f4:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 80151f8:	461a      	mov	r2, r3
 80151fa:	4b64      	ldr	r3, [pc, #400]	; (801538c <WaveProcess+0x2e0>)
 80151fc:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015200:	4413      	add	r3, r2
 8015202:	4a62      	ldr	r2, [pc, #392]	; (801538c <WaveProcess+0x2e0>)
 8015204:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 8015208:	1a9b      	subs	r3, r3, r2
 801520a:	3b64      	subs	r3, #100	; 0x64
 801520c:	031a      	lsls	r2, r3, #12
 801520e:	693b      	ldr	r3, [r7, #16]
 8015210:	fb92 f3f3 	sdiv	r3, r2, r3
 8015214:	b29b      	uxth	r3, r3
 8015216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801521a:	b29b      	uxth	r3, r3
 801521c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    VthA  = (((List[THRESHOLD].Val + List[V0_POSI].Val + List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 8015220:	4b5a      	ldr	r3, [pc, #360]	; (801538c <WaveProcess+0x2e0>)
 8015222:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8015226:	461a      	mov	r2, r3
 8015228:	4b58      	ldr	r3, [pc, #352]	; (801538c <WaveProcess+0x2e0>)
 801522a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801522e:	4413      	add	r3, r2
 8015230:	4a56      	ldr	r2, [pc, #344]	; (801538c <WaveProcess+0x2e0>)
 8015232:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 8015236:	4413      	add	r3, r2
 8015238:	3b64      	subs	r3, #100	; 0x64
 801523a:	031a      	lsls	r2, r3, #12
 801523c:	693b      	ldr	r3, [r7, #16]
 801523e:	fb92 f3f3 	sdiv	r3, r2, r3
 8015242:	b29b      	uxth	r3, r3
 8015244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015248:	b29b      	uxth	r3, r3
 801524a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    VpA   = ((((List[V0_POSI].Val)       -100)<<12)/Ak)+2048;
 801524e:	4b4f      	ldr	r3, [pc, #316]	; (801538c <WaveProcess+0x2e0>)
 8015250:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015254:	3b64      	subs	r3, #100	; 0x64
 8015256:	031a      	lsls	r2, r3, #12
 8015258:	693b      	ldr	r3, [r7, #16]
 801525a:	fb92 f3f3 	sdiv	r3, r2, r3
 801525e:	b29b      	uxth	r3, r3
 8015260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015264:	b29b      	uxth	r3, r3
 8015266:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  }
//-------------------------- ��������ͳ������� ------------------------------//


  if(((List[SYNCMODE].Val == NONE)||(List[SYNCMODE].Val == SCAN))
 801526a:	4b48      	ldr	r3, [pc, #288]	; (801538c <WaveProcess+0x2e0>)
 801526c:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8015270:	2b05      	cmp	r3, #5
 8015272:	d004      	beq.n	801527e <WaveProcess+0x1d2>
 8015274:	4b45      	ldr	r3, [pc, #276]	; (801538c <WaveProcess+0x2e0>)
 8015276:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 801527a:	2b01      	cmp	r3, #1
 801527c:	d10b      	bne.n	8015296 <WaveProcess+0x1ea>
     &&(List[TIM_BASE].Val>11))
 801527e:	4b43      	ldr	r3, [pc, #268]	; (801538c <WaveProcess+0x2e0>)
 8015280:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015284:	2b0b      	cmp	r3, #11
 8015286:	dd06      	ble.n	8015296 <WaveProcess+0x1ea>
  {
    Dpth = 302;
 8015288:	f44f 7397 	mov.w	r3, #302	; 0x12e
 801528c:	837b      	strh	r3, [r7, #26]
    List[VIEWPOSI].Val = 0;
 801528e:	4b3f      	ldr	r3, [pc, #252]	; (801538c <WaveProcess+0x2e0>)
 8015290:	2200      	movs	r2, #0
 8015292:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  for(i=0; i<Dpth; i++)
 8015296:	2300      	movs	r3, #0
 8015298:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 801529c:	e0ad      	b.n	80153fa <WaveProcess+0x34e>
  {
	n = __HAL_DMA_GET_COUNTER(&hdma_adc1);//    DMA1_Channel1->CNDTR;              //DMA_CH_A->CNDTR; //DMA1_CNDTR1
 801529e:	4b41      	ldr	r3, [pc, #260]	; (80153a4 <WaveProcess+0x2f8>)
 80152a0:	681b      	ldr	r3, [r3, #0]
 80152a2:	685b      	ldr	r3, [r3, #4]
 80152a4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    if(i >= (Dpth-n)) break;      // ����һ���ڵȴ�A/Dת�����
 80152a8:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 80152ac:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 80152b0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80152b4:	1acb      	subs	r3, r1, r3
 80152b6:	429a      	cmp	r2, r3
 80152b8:	f280 80a7 	bge.w	801540a <WaveProcess+0x35e>
    ViA = Ain[i];
 80152bc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80152c0:	005b      	lsls	r3, r3, #1
 80152c2:	697a      	ldr	r2, [r7, #20]
 80152c4:	4413      	add	r3, r2
 80152c6:	881b      	ldrh	r3, [r3, #0]
 80152c8:	80bb      	strh	r3, [r7, #4]

    if(MaxA < ViA) MaxA = ViA;    // ͳ�����ֵ
 80152ca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80152ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80152d0:	429a      	cmp	r2, r3
 80152d2:	da02      	bge.n	80152da <WaveProcess+0x22e>
 80152d4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80152d8:	62bb      	str	r3, [r7, #40]	; 0x28
    if(MinA > ViA) MinA = ViA;    // ͳ����Сֵ
 80152da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80152de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80152e0:	429a      	cmp	r2, r3
 80152e2:	dd02      	ble.n	80152ea <WaveProcess+0x23e>
 80152e4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80152e8:	627b      	str	r3, [r7, #36]	; 0x24
    SumA += ViA;                  // ͳ���ۼӺ�
 80152ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80152ee:	6a3a      	ldr	r2, [r7, #32]
 80152f0:	4413      	add	r3, r2
 80152f2:	623b      	str	r3, [r7, #32]
    SsqA +=(ViA-VpA)*(ViA-VpA);   // ͳ��ƽ����
 80152f4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80152f8:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80152fc:	1ad3      	subs	r3, r2, r3
 80152fe:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8015302:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 8015306:	1a8a      	subs	r2, r1, r2
 8015308:	fb02 f303 	mul.w	r3, r2, r3
 801530c:	69fa      	ldr	r2, [r7, #28]
 801530e:	4413      	add	r3, r2
 8015310:	61fb      	str	r3, [r7, #28]


    if(StA == 2) DtA = 0;                  // ����CH_A�׸�������ǰ��ʱ���ۼ�
 8015312:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8015316:	2b02      	cmp	r3, #2
 8015318:	d102      	bne.n	8015320 <WaveProcess+0x274>
 801531a:	2300      	movs	r3, #0
 801531c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801531e:	e005      	b.n	801532c <WaveProcess+0x280>
    else         DtA++;
 8015320:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8015324:	b29b      	uxth	r3, r3
 8015326:	3301      	adds	r3, #1
 8015328:	b29b      	uxth	r3, r3
 801532a:	87bb      	strh	r3, [r7, #60]	; 0x3c

    if(ViA > VthA){                        // ViA ������ֵ����
 801532c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8015330:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8015334:	429a      	cmp	r2, r3
 8015336:	dd37      	ble.n	80153a8 <WaveProcess+0x2fc>
      if(StA == 0){
 8015338:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801533c:	2b00      	cmp	r3, #0
 801533e:	d115      	bne.n	801536c <WaveProcess+0x2c0>
        TslA += DtA; DtA = 0; RiseA++;     // CH_A��λʱ���ۼƣ��������ۼ�
 8015340:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015342:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015344:	4413      	add	r3, r2
 8015346:	b29b      	uxth	r3, r3
 8015348:	877b      	strh	r3, [r7, #58]	; 0x3a
 801534a:	2300      	movs	r3, #0
 801534c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801534e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8015352:	b29b      	uxth	r3, r3
 8015354:	3301      	adds	r3, #1
 8015356:	b29b      	uxth	r3, r3
 8015358:	867b      	strh	r3, [r7, #50]	; 0x32
        if(UpA < Tp) UpA = i;              // ��¼Ԥ������CH_A��һ��������λ��
 801535a:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 801535e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015362:	429a      	cmp	r2, r3
 8015364:	da02      	bge.n	801536c <WaveProcess+0x2c0>
 8015366:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801536a:	863b      	strh	r3, [r7, #48]	; 0x30
      }
      StA = 1;                             // ��ǰCH_A״̬��Ϊ��λ
 801536c:	2301      	movs	r3, #1
 801536e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8015370:	e03c      	b.n	80153ec <WaveProcess+0x340>
 8015372:	bf00      	nop
 8015374:	20002874 	.word	0x20002874
 8015378:	2000057c 	.word	0x2000057c
 801537c:	20006886 	.word	0x20006886
 8015380:	20002862 	.word	0x20002862
 8015384:	2000284a 	.word	0x2000284a
 8015388:	20000560 	.word	0x20000560
 801538c:	20000298 	.word	0x20000298
 8015390:	08002270 	.word	0x08002270
 8015394:	08002278 	.word	0x08002278
 8015398:	200007a0 	.word	0x200007a0
 801539c:	20002860 	.word	0x20002860
 80153a0:	20006884 	.word	0x20006884
 80153a4:	20006b6c 	.word	0x20006b6c
    } else if(ViA < VtlA){                 // ViA ������ֵ����
 80153a8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80153ac:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80153b0:	429a      	cmp	r2, r3
 80153b2:	da1b      	bge.n	80153ec <WaveProcess+0x340>
      if(StA == 1){
 80153b4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80153b8:	2b01      	cmp	r3, #1
 80153ba:	d115      	bne.n	80153e8 <WaveProcess+0x33c>
        TshA += DtA; DtA = 0; FallA++;     // CH_A��λʱ���ۼƣ��½����ۼ�
 80153bc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80153be:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80153c0:	4413      	add	r3, r2
 80153c2:	b29b      	uxth	r3, r3
 80153c4:	873b      	strh	r3, [r7, #56]	; 0x38
 80153c6:	2300      	movs	r3, #0
 80153c8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80153ca:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80153ce:	b29b      	uxth	r3, r3
 80153d0:	3301      	adds	r3, #1
 80153d2:	b29b      	uxth	r3, r3
 80153d4:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(DnA < Tp) DnA = i;              // ��¼Ԥ������CH_A��һ���½���λ��
 80153d6:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80153da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80153de:	429a      	cmp	r2, r3
 80153e0:	da02      	bge.n	80153e8 <WaveProcess+0x33c>
 80153e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80153e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      StA = 0;                             // ��ǰCH_A״̬��Ϊ��λ
 80153e8:	2300      	movs	r3, #0
 80153ea:	86fb      	strh	r3, [r7, #54]	; 0x36
  for(i=0; i<Dpth; i++)
 80153ec:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80153f0:	b29b      	uxth	r3, r3
 80153f2:	3301      	adds	r3, #1
 80153f4:	b29b      	uxth	r3, r3
 80153f6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80153fa:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 80153fe:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8015402:	429a      	cmp	r2, r3
 8015404:	f6ff af4b 	blt.w	801529e <WaveProcess+0x1f2>
 8015408:	e000      	b.n	801540c <WaveProcess+0x360>
    if(i >= (Dpth-n)) break;      // ����һ���ڵȴ�A/Dת�����
 801540a:	bf00      	nop
    }
  }
  if(n == 0)
 801540c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015410:	2b00      	cmp	r3, #0
 8015412:	d14f      	bne.n	80154b4 <WaveProcess+0x408>
  {                              // ����ȫ����ɺ��������ֵ i == Dpth
    Vmax = MaxA; Vmin = MinA; Vavg = SumA/i; Vssq = SsqA/(i+1);
 8015414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015416:	b21a      	sxth	r2, r3
 8015418:	4b9a      	ldr	r3, [pc, #616]	; (8015684 <WaveProcess+0x5d8>)
 801541a:	801a      	strh	r2, [r3, #0]
 801541c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801541e:	b21a      	sxth	r2, r3
 8015420:	4b99      	ldr	r3, [pc, #612]	; (8015688 <WaveProcess+0x5dc>)
 8015422:	801a      	strh	r2, [r3, #0]
 8015424:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015428:	6a3a      	ldr	r2, [r7, #32]
 801542a:	fb92 f3f3 	sdiv	r3, r2, r3
 801542e:	b21a      	sxth	r2, r3
 8015430:	4b96      	ldr	r3, [pc, #600]	; (801568c <WaveProcess+0x5e0>)
 8015432:	801a      	strh	r2, [r3, #0]
 8015434:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015438:	3301      	adds	r3, #1
 801543a:	69fa      	ldr	r2, [r7, #28]
 801543c:	fb92 f3f3 	sdiv	r3, r2, r3
 8015440:	4a93      	ldr	r2, [pc, #588]	; (8015690 <WaveProcess+0x5e4>)
 8015442:	6013      	str	r3, [r2, #0]
    Vrms = (Sqrt32(Vssq)); Vmid = (Vmax + Vmin)/2; Vpp = Vmax - Vmin;
 8015444:	4b92      	ldr	r3, [pc, #584]	; (8015690 <WaveProcess+0x5e4>)
 8015446:	681b      	ldr	r3, [r3, #0]
 8015448:	4618      	mov	r0, r3
 801544a:	f7fc fbf5 	bl	8011c38 <Sqrt32>
 801544e:	4603      	mov	r3, r0
 8015450:	461a      	mov	r2, r3
 8015452:	4b90      	ldr	r3, [pc, #576]	; (8015694 <WaveProcess+0x5e8>)
 8015454:	601a      	str	r2, [r3, #0]
 8015456:	4b8b      	ldr	r3, [pc, #556]	; (8015684 <WaveProcess+0x5d8>)
 8015458:	f9b3 3000 	ldrsh.w	r3, [r3]
 801545c:	461a      	mov	r2, r3
 801545e:	4b8a      	ldr	r3, [pc, #552]	; (8015688 <WaveProcess+0x5dc>)
 8015460:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015464:	4413      	add	r3, r2
 8015466:	0fda      	lsrs	r2, r3, #31
 8015468:	4413      	add	r3, r2
 801546a:	105b      	asrs	r3, r3, #1
 801546c:	b21a      	sxth	r2, r3
 801546e:	4b8a      	ldr	r3, [pc, #552]	; (8015698 <WaveProcess+0x5ec>)
 8015470:	801a      	strh	r2, [r3, #0]
 8015472:	4b84      	ldr	r3, [pc, #528]	; (8015684 <WaveProcess+0x5d8>)
 8015474:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015478:	461a      	mov	r2, r3
 801547a:	4b83      	ldr	r3, [pc, #524]	; (8015688 <WaveProcess+0x5dc>)
 801547c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015480:	1ad3      	subs	r3, r2, r3
 8015482:	4a86      	ldr	r2, [pc, #536]	; (801569c <WaveProcess+0x5f0>)
 8015484:	6013      	str	r3, [r2, #0]
    HighT = TshA/FallA; LowT = TslA/RiseA; Edge = FallA+ RiseA;
 8015486:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 801548a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801548e:	fb92 f3f3 	sdiv	r3, r2, r3
 8015492:	4a83      	ldr	r2, [pc, #524]	; (80156a0 <WaveProcess+0x5f4>)
 8015494:	6013      	str	r3, [r2, #0]
 8015496:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 801549a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801549e:	fb92 f3f3 	sdiv	r3, r2, r3
 80154a2:	4a80      	ldr	r2, [pc, #512]	; (80156a4 <WaveProcess+0x5f8>)
 80154a4:	6013      	str	r3, [r2, #0]
 80154a6:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 80154aa:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80154ae:	4413      	add	r3, r2
 80154b0:	4a7d      	ldr	r2, [pc, #500]	; (80156a8 <WaveProcess+0x5fc>)
 80154b2:	6013      	str	r3, [r2, #0]

  }
//--------------------------- ���ɲ�����ʾ���� -------------------------------//

  if(((Sm == NONE)||(Sm == SCAN))){
 80154b4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80154b8:	2b05      	cmp	r3, #5
 80154ba:	d003      	beq.n	80154c4 <WaveProcess+0x418>
 80154bc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80154c0:	2b01      	cmp	r3, #1
 80154c2:	d12f      	bne.n	8015524 <WaveProcess+0x478>
    if(List[TIM_BASE].Val > 11)
 80154c4:	4b79      	ldr	r3, [pc, #484]	; (80156ac <WaveProcess+0x600>)
 80154c6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80154ca:	2b0b      	cmp	r3, #11
 80154cc:	dd03      	ble.n	80154d6 <WaveProcess+0x42a>
      k = 1;                         // NONE SCAN ģʽ��ǿ�ƴ���
 80154ce:	2301      	movs	r3, #1
 80154d0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if(List[TIM_BASE].Val > 11)
 80154d4:	e033      	b.n	801553e <WaveProcess+0x492>
    else
    {
      k =((Tm == RISE)? UpA : DnA)-Tp; // k:Ԥ�����󴥷���λ��
 80154d6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d101      	bne.n	80154e2 <WaveProcess+0x436>
 80154de:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80154e0:	e000      	b.n	80154e4 <WaveProcess+0x438>
 80154e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80154e4:	89fa      	ldrh	r2, [r7, #14]
 80154e6:	1a9b      	subs	r3, r3, r2
 80154e8:	b29b      	uxth	r3, r3
 80154ea:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if((Sm == SCAN)&&(k < 0)){ // AUTO ģʽ���޴���ʱ
 80154ee:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80154f2:	2b01      	cmp	r3, #1
 80154f4:	d123      	bne.n	801553e <WaveProcess+0x492>
 80154f6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	da1f      	bge.n	801553e <WaveProcess+0x492>
        if(i > Dpth/4) k = 1;    // ������1/4����ǿ�ƴ���
 80154fe:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8015502:	2b00      	cmp	r3, #0
 8015504:	da00      	bge.n	8015508 <WaveProcess+0x45c>
 8015506:	3303      	adds	r3, #3
 8015508:	109b      	asrs	r3, r3, #2
 801550a:	b21b      	sxth	r3, r3
 801550c:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8015510:	429a      	cmp	r2, r3
 8015512:	dd03      	ble.n	801551c <WaveProcess+0x470>
 8015514:	2301      	movs	r3, #1
 8015516:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if(List[TIM_BASE].Val > 11)
 801551a:	e010      	b.n	801553e <WaveProcess+0x492>
        else           k = 0;    // ������1/4��ǰ����ʾ
 801551c:	2300      	movs	r3, #0
 801551e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if(List[TIM_BASE].Val > 11)
 8015522:	e00c      	b.n	801553e <WaveProcess+0x492>
      }

    }
  } else
    k =((Tm == RISE)? UpA : DnA)-Tp; // k:Ԥ�����󴥷���λ��
 8015524:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8015528:	2b00      	cmp	r3, #0
 801552a:	d101      	bne.n	8015530 <WaveProcess+0x484>
 801552c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801552e:	e000      	b.n	8015532 <WaveProcess+0x486>
 8015530:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015532:	89fa      	ldrh	r2, [r7, #14]
 8015534:	1a9b      	subs	r3, r3, r2
 8015536:	b29b      	uxth	r3, r3
 8015538:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 801553c:	e000      	b.n	8015540 <WaveProcess+0x494>
    if(List[TIM_BASE].Val > 11)
 801553e:	bf00      	nop

  if((!n)&&(Sm == SINGL)&&(k > 0)){ // SNGL ģʽ���д���ʱ�����������Զ�ֹͣ
 8015540:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015544:	2b00      	cmp	r3, #0
 8015546:	d10c      	bne.n	8015562 <WaveProcess+0x4b6>
 8015548:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801554c:	2b04      	cmp	r3, #4
 801554e:	d108      	bne.n	8015562 <WaveProcess+0x4b6>
 8015550:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8015554:	2b00      	cmp	r3, #0
 8015556:	dd04      	ble.n	8015562 <WaveProcess+0x4b6>
    Status = STOP;
 8015558:	4b55      	ldr	r3, [pc, #340]	; (80156b0 <WaveProcess+0x604>)
 801555a:	2201      	movs	r2, #1
 801555c:	801a      	strh	r2, [r3, #0]
    DispStatus();
 801555e:	f7fe ff21 	bl	80143a4 <DispStatus>
  }

  if((Sm == AUTO)&&(k < 0)){ // AUTO ģʽ���޴���ʱ
 8015562:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8015566:	2b02      	cmp	r3, #2
 8015568:	d115      	bne.n	8015596 <WaveProcess+0x4ea>
 801556a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 801556e:	2b00      	cmp	r3, #0
 8015570:	da11      	bge.n	8015596 <WaveProcess+0x4ea>
    if(i > Dpth/4) k = 1;    // ������1/4����ǿ�ƴ���
 8015572:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8015576:	2b00      	cmp	r3, #0
 8015578:	da00      	bge.n	801557c <WaveProcess+0x4d0>
 801557a:	3303      	adds	r3, #3
 801557c:	109b      	asrs	r3, r3, #2
 801557e:	b21b      	sxth	r3, r3
 8015580:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8015584:	429a      	cmp	r2, r3
 8015586:	dd03      	ble.n	8015590 <WaveProcess+0x4e4>
 8015588:	2301      	movs	r3, #1
 801558a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 801558e:	e002      	b.n	8015596 <WaveProcess+0x4ea>
    else           k = 0;    // ������1/4��ǰ����ʾ
 8015590:	2300      	movs	r3, #0
 8015592:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  }

  Trigger_k = k;
 8015596:	4a47      	ldr	r2, [pc, #284]	; (80156b4 <WaveProcess+0x608>)
 8015598:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 801559c:	8013      	strh	r3, [r2, #0]

  if(Trigger_k>0)NORM_Kflag = 1;
 801559e:	4b45      	ldr	r3, [pc, #276]	; (80156b4 <WaveProcess+0x608>)
 80155a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	dd02      	ble.n	80155ae <WaveProcess+0x502>
 80155a8:	4b43      	ldr	r3, [pc, #268]	; (80156b8 <WaveProcess+0x60c>)
 80155aa:	2201      	movs	r2, #1
 80155ac:	701a      	strb	r2, [r3, #0]

  if((SNGL_Kflag)&&(Status == STOP))
 80155ae:	4b43      	ldr	r3, [pc, #268]	; (80156bc <WaveProcess+0x610>)
 80155b0:	781b      	ldrb	r3, [r3, #0]
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d016      	beq.n	80155e4 <WaveProcess+0x538>
 80155b6:	4b3e      	ldr	r3, [pc, #248]	; (80156b0 <WaveProcess+0x604>)
 80155b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80155bc:	2b01      	cmp	r3, #1
 80155be:	d111      	bne.n	80155e4 <WaveProcess+0x538>
  {
    Ch1_Posi = List[V0_POSI].Val;
 80155c0:	4b3a      	ldr	r3, [pc, #232]	; (80156ac <WaveProcess+0x600>)
 80155c2:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 80155c6:	4b3e      	ldr	r3, [pc, #248]	; (80156c0 <WaveProcess+0x614>)
 80155c8:	801a      	strh	r2, [r3, #0]
    Ch2_Posi = List[EXT_POSI].Val;
 80155ca:	4b38      	ldr	r3, [pc, #224]	; (80156ac <WaveProcess+0x600>)
 80155cc:	f9b3 20dc 	ldrsh.w	r2, [r3, #220]	; 0xdc
 80155d0:	4b3c      	ldr	r3, [pc, #240]	; (80156c4 <WaveProcess+0x618>)
 80155d2:	801a      	strh	r2, [r3, #0]
    Tri_Posi = List[THRESHOLD].Val;
 80155d4:	4b35      	ldr	r3, [pc, #212]	; (80156ac <WaveProcess+0x600>)
 80155d6:	f9b3 2084 	ldrsh.w	r2, [r3, #132]	; 0x84
 80155da:	4b3b      	ldr	r3, [pc, #236]	; (80156c8 <WaveProcess+0x61c>)
 80155dc:	801a      	strh	r2, [r3, #0]
    SNGL_Kflag = 0;
 80155de:	4b37      	ldr	r3, [pc, #220]	; (80156bc <WaveProcess+0x610>)
 80155e0:	2200      	movs	r2, #0
 80155e2:	701a      	strb	r2, [r3, #0]
  }

  if(k > 0)
 80155e4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	f340 8104 	ble.w	80157f6 <WaveProcess+0x74a>
  {                                               // �д���ʱ����ʾ����
    k += List[VIEWPOSI].Val+((1024-Ks)*Tp+512)/1024; // ���β�ֵ���
 80155ee:	4b2f      	ldr	r3, [pc, #188]	; (80156ac <WaveProcess+0x600>)
 80155f0:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80155f4:	b29a      	uxth	r2, r3
 80155f6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80155fa:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80155fe:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8015602:	fb01 f303 	mul.w	r3, r1, r3
 8015606:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801560a:	2b00      	cmp	r3, #0
 801560c:	da01      	bge.n	8015612 <WaveProcess+0x566>
 801560e:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8015612:	129b      	asrs	r3, r3, #10
 8015614:	b29b      	uxth	r3, r3
 8015616:	4413      	add	r3, r2
 8015618:	b29a      	uxth	r2, r3
 801561a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 801561e:	4413      	add	r3, r2
 8015620:	b29b      	uxth	r3, r3
 8015622:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    VeA =(((Ain[k]-2048)*Ak)>>12)+100;
 8015626:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 801562a:	005b      	lsls	r3, r3, #1
 801562c:	697a      	ldr	r2, [r7, #20]
 801562e:	4413      	add	r3, r2
 8015630:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015634:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015638:	693a      	ldr	r2, [r7, #16]
 801563a:	fb02 f303 	mul.w	r3, r2, r3
 801563e:	131b      	asrs	r3, r3, #12
 8015640:	b29b      	uxth	r3, r3
 8015642:	3364      	adds	r3, #100	; 0x64
 8015644:	b29b      	uxth	r3, r3
 8015646:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    for(n=0; n<300;)
 801564a:	2300      	movs	r3, #0
 801564c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8015650:	e0c7      	b.n	80157e2 <WaveProcess+0x736>
    {
      ViA =(((Ain[k]-2048)*Ak)>>12)+100;
 8015652:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8015656:	005b      	lsls	r3, r3, #1
 8015658:	697a      	ldr	r2, [r7, #20]
 801565a:	4413      	add	r3, r2
 801565c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015660:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015664:	693a      	ldr	r2, [r7, #16]
 8015666:	fb02 f303 	mul.w	r3, r2, r3
 801566a:	131b      	asrs	r3, r3, #12
 801566c:	b29b      	uxth	r3, r3
 801566e:	3364      	adds	r3, #100	; 0x64
 8015670:	b29b      	uxth	r3, r3
 8015672:	80bb      	strh	r3, [r7, #4]
      k++;
 8015674:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8015678:	b29b      	uxth	r3, r3
 801567a:	3301      	adds	r3, #1
 801567c:	b29b      	uxth	r3, r3
 801567e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
      while(p > 0){
 8015682:	e09e      	b.n	80157c2 <WaveProcess+0x716>
 8015684:	20002856 	.word	0x20002856
 8015688:	20002868 	.word	0x20002868
 801568c:	20002858 	.word	0x20002858
 8015690:	2000285c 	.word	0x2000285c
 8015694:	20002864 	.word	0x20002864
 8015698:	2000286a 	.word	0x2000286a
 801569c:	20006880 	.word	0x20006880
 80156a0:	20006878 	.word	0x20006878
 80156a4:	2000688c 	.word	0x2000688c
 80156a8:	20002850 	.word	0x20002850
 80156ac:	20000298 	.word	0x20000298
 80156b0:	200007a0 	.word	0x200007a0
 80156b4:	20002854 	.word	0x20002854
 80156b8:	2000286c 	.word	0x2000286c
 80156bc:	2000055c 	.word	0x2000055c
 80156c0:	20006884 	.word	0x20006884
 80156c4:	2000687c 	.word	0x2000687c
 80156c8:	20002860 	.word	0x20002860
        VoA = VeA +((ViA-VeA)*(1024-p))/1024; // ���� A ͨ����ǰ���ε�Ĳ�ֵ
 80156cc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80156d0:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80156d4:	1ad3      	subs	r3, r2, r3
 80156d6:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80156da:	f5c2 6280 	rsb	r2, r2, #1024	; 0x400
 80156de:	fb02 f303 	mul.w	r3, r2, r3
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	da01      	bge.n	80156ea <WaveProcess+0x63e>
 80156e6:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80156ea:	129b      	asrs	r3, r3, #10
 80156ec:	b29a      	uxth	r2, r3
 80156ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80156f2:	4413      	add	r3, r2
 80156f4:	b29b      	uxth	r3, r3
 80156f6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        if(Status == STOP){
 80156f8:	4b63      	ldr	r3, [pc, #396]	; (8015888 <WaveProcess+0x7dc>)
 80156fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80156fe:	2b01      	cmp	r3, #1
 8015700:	d132      	bne.n	8015768 <WaveProcess+0x6bc>

          Vo_Temp = VoA+(List[V0_POSI].Val-Ch1_Posi);
 8015702:	4b62      	ldr	r3, [pc, #392]	; (801588c <WaveProcess+0x7e0>)
 8015704:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015708:	b29a      	uxth	r2, r3
 801570a:	4b61      	ldr	r3, [pc, #388]	; (8015890 <WaveProcess+0x7e4>)
 801570c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015710:	b29b      	uxth	r3, r3
 8015712:	1ad3      	subs	r3, r2, r3
 8015714:	b29a      	uxth	r2, r3
 8015716:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015718:	4413      	add	r3, r2
 801571a:	b29b      	uxth	r3, r3
 801571c:	b21a      	sxth	r2, r3
 801571e:	4b5d      	ldr	r3, [pc, #372]	; (8015894 <WaveProcess+0x7e8>)
 8015720:	801a      	strh	r2, [r3, #0]

          if(Vo_Temp > 199) Vo_Temp = 202;
 8015722:	4b5c      	ldr	r3, [pc, #368]	; (8015894 <WaveProcess+0x7e8>)
 8015724:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015728:	2bc7      	cmp	r3, #199	; 0xc7
 801572a:	dd02      	ble.n	8015732 <WaveProcess+0x686>
 801572c:	4b59      	ldr	r3, [pc, #356]	; (8015894 <WaveProcess+0x7e8>)
 801572e:	22ca      	movs	r2, #202	; 0xca
 8015730:	801a      	strh	r2, [r3, #0]
          if(Vo_Temp <   3) Vo_Temp = 1;                     // �����޷�
 8015732:	4b58      	ldr	r3, [pc, #352]	; (8015894 <WaveProcess+0x7e8>)
 8015734:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015738:	2b02      	cmp	r3, #2
 801573a:	dc02      	bgt.n	8015742 <WaveProcess+0x696>
 801573c:	4b55      	ldr	r3, [pc, #340]	; (8015894 <WaveProcess+0x7e8>)
 801573e:	2201      	movs	r2, #1
 8015740:	801a      	strh	r2, [r3, #0]

          WaveBuf[n]= Vo_Temp;
 8015742:	4b54      	ldr	r3, [pc, #336]	; (8015894 <WaveProcess+0x7e8>)
 8015744:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015748:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801574c:	b2d1      	uxtb	r1, r2
 801574e:	4a52      	ldr	r2, [pc, #328]	; (8015898 <WaveProcess+0x7ec>)
 8015750:	54d1      	strb	r1, [r2, r3]

          Build_Ext(n, Ext, List[V0_POSI].Val);
 8015752:	4b4e      	ldr	r3, [pc, #312]	; (801588c <WaveProcess+0x7e0>)
 8015754:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015758:	b2da      	uxtb	r2, r3
 801575a:	79f9      	ldrb	r1, [r7, #7]
 801575c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015760:	4618      	mov	r0, r3
 8015762:	f000 f89d 	bl	80158a0 <Build_Ext>
 8015766:	e01b      	b.n	80157a0 <WaveProcess+0x6f4>
        }
        else{
          if(VoA > 199) VoA = 202;                   // �����޷�  ��������
 8015768:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801576c:	2bc7      	cmp	r3, #199	; 0xc7
 801576e:	dd01      	ble.n	8015774 <WaveProcess+0x6c8>
 8015770:	23ca      	movs	r3, #202	; 0xca
 8015772:	87fb      	strh	r3, [r7, #62]	; 0x3e
          if(VoA <   3) VoA = 2;                     // �����޷�
 8015774:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8015778:	2b02      	cmp	r3, #2
 801577a:	dc01      	bgt.n	8015780 <WaveProcess+0x6d4>
 801577c:	2302      	movs	r3, #2
 801577e:	87fb      	strh	r3, [r7, #62]	; 0x3e
          WaveBuf[n]= VoA;
 8015780:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015784:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015786:	b2d1      	uxtb	r1, r2
 8015788:	4a43      	ldr	r2, [pc, #268]	; (8015898 <WaveProcess+0x7ec>)
 801578a:	54d1      	strb	r1, [r2, r3]

          Build_Ext(n, Ext, List[V0_POSI].Val);
 801578c:	4b3f      	ldr	r3, [pc, #252]	; (801588c <WaveProcess+0x7e0>)
 801578e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015792:	b2da      	uxtb	r2, r3
 8015794:	79f9      	ldrb	r1, [r7, #7]
 8015796:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801579a:	4618      	mov	r0, r3
 801579c:	f000 f880 	bl	80158a0 <Build_Ext>
        }

        if(n++ >= 300) break;
 80157a0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80157a4:	b29a      	uxth	r2, r3
 80157a6:	3201      	adds	r2, #1
 80157a8:	b292      	uxth	r2, r2
 80157aa:	f8a7 204c 	strh.w	r2, [r7, #76]	; 0x4c
 80157ae:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80157b2:	da0b      	bge.n	80157cc <WaveProcess+0x720>
        p -= Ks;
 80157b4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80157b8:	897b      	ldrh	r3, [r7, #10]
 80157ba:	1ad3      	subs	r3, r2, r3
 80157bc:	b29b      	uxth	r3, r3
 80157be:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      while(p > 0){
 80157c2:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	dc80      	bgt.n	80156cc <WaveProcess+0x620>
 80157ca:	e000      	b.n	80157ce <WaveProcess+0x722>
        if(n++ >= 300) break;
 80157cc:	bf00      	nop
      }
      p += 1024;
 80157ce:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80157d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80157d6:	b29b      	uxth	r3, r3
 80157d8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      VeA = ViA;                              // �ݴ浱ǰ���ε��ֵ
 80157dc:	88bb      	ldrh	r3, [r7, #4]
 80157de:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    for(n=0; n<300;)
 80157e2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80157e6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80157ea:	f6ff af32 	blt.w	8015652 <WaveProcess+0x5a6>
    }
    Norm_Clr = 0;                                          //NORM����
 80157ee:	4b2b      	ldr	r3, [pc, #172]	; (801589c <WaveProcess+0x7f0>)
 80157f0:	2200      	movs	r2, #0
 80157f2:	701a      	strb	r2, [r3, #0]
 80157f4:	e037      	b.n	8015866 <WaveProcess+0x7ba>
  }
  else if((k < 0) && ((Sm != NORM)||(Norm_Clr))){          //NORM��������Ļ
 80157f6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	da33      	bge.n	8015866 <WaveProcess+0x7ba>
 80157fe:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8015802:	2b03      	cmp	r3, #3
 8015804:	d103      	bne.n	801580e <WaveProcess+0x762>
 8015806:	4b25      	ldr	r3, [pc, #148]	; (801589c <WaveProcess+0x7f0>)
 8015808:	781b      	ldrb	r3, [r3, #0]
 801580a:	2b00      	cmp	r3, #0
 801580c:	d02b      	beq.n	8015866 <WaveProcess+0x7ba>
    for(n=0; n<300;){
 801580e:	2300      	movs	r3, #0
 8015810:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8015814:	e022      	b.n	801585c <WaveProcess+0x7b0>
      while(p > 0){
        WaveBuf[n]= 255;
 8015816:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801581a:	4a1f      	ldr	r2, [pc, #124]	; (8015898 <WaveProcess+0x7ec>)
 801581c:	21ff      	movs	r1, #255	; 0xff
 801581e:	54d1      	strb	r1, [r2, r3]

        if(n++ >= 300) break;
 8015820:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015824:	b29a      	uxth	r2, r3
 8015826:	3201      	adds	r2, #1
 8015828:	b292      	uxth	r2, r2
 801582a:	f8a7 204c 	strh.w	r2, [r7, #76]	; 0x4c
 801582e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015832:	da0b      	bge.n	801584c <WaveProcess+0x7a0>
        p -= Ks;
 8015834:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8015838:	897b      	ldrh	r3, [r7, #10]
 801583a:	1ad3      	subs	r3, r2, r3
 801583c:	b29b      	uxth	r3, r3
 801583e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      while(p > 0){
 8015842:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8015846:	2b00      	cmp	r3, #0
 8015848:	dce5      	bgt.n	8015816 <WaveProcess+0x76a>
 801584a:	e000      	b.n	801584e <WaveProcess+0x7a2>
        if(n++ >= 300) break;
 801584c:	bf00      	nop
      }
      p += 1024;
 801584e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8015852:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015856:	b29b      	uxth	r3, r3
 8015858:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    for(n=0; n<300;){
 801585c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015860:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015864:	dbed      	blt.n	8015842 <WaveProcess+0x796>
    }
  }
  if((i == Dpth)&&(Status != STOP))
 8015866:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 801586a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801586e:	429a      	cmp	r2, r3
 8015870:	d106      	bne.n	8015880 <WaveProcess+0x7d4>
 8015872:	4b05      	ldr	r3, [pc, #20]	; (8015888 <WaveProcess+0x7dc>)
 8015874:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015878:	2b01      	cmp	r3, #1
 801587a:	d001      	beq.n	8015880 <WaveProcess+0x7d4>
  {
	  ADC_Start();       // ���¿�ʼ ADC ɨ�����
 801587c:	f7f6 ff36 	bl	800c6ec <ADC_Start>
  }
}
 8015880:	bf00      	nop
 8015882:	3750      	adds	r7, #80	; 0x50
 8015884:	46bd      	mov	sp, r7
 8015886:	bd80      	pop	{r7, pc}
 8015888:	200007a0 	.word	0x200007a0
 801588c:	20000298 	.word	0x20000298
 8015890:	20006884 	.word	0x20006884
 8015894:	20002848 	.word	0x20002848
 8015898:	20000c08 	.word	0x20000c08
 801589c:	200007a7 	.word	0x200007a7

080158a0 <Build_Ext>:

/*******************************************************************************
 Build_Ext: ��չͨ��������ʾ
*******************************************************************************/
void  Build_Ext(short x, char Ext, char Yp)
{
 80158a0:	b480      	push	{r7}
 80158a2:	b085      	sub	sp, #20
 80158a4:	af00      	add	r7, sp, #0
 80158a6:	4603      	mov	r3, r0
 80158a8:	80fb      	strh	r3, [r7, #6]
 80158aa:	460b      	mov	r3, r1
 80158ac:	717b      	strb	r3, [r7, #5]
 80158ae:	4613      	mov	r3, r2
 80158b0:	713b      	strb	r3, [r7, #4]
  char* Buf = WaveBuf + TRACK1_SIZE;
 80158b2:	4b69      	ldr	r3, [pc, #420]	; (8015a58 <Build_Ext+0x1b8>)
 80158b4:	60bb      	str	r3, [r7, #8]
  short  Vo;

  Posi_2F1 = List[EXT_POSI].Val -  Data[1] - List[V0_POSI].Val;
 80158b6:	4b69      	ldr	r3, [pc, #420]	; (8015a5c <Build_Ext+0x1bc>)
 80158b8:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 80158bc:	b29a      	uxth	r2, r3
 80158be:	4b68      	ldr	r3, [pc, #416]	; (8015a60 <Build_Ext+0x1c0>)
 80158c0:	785b      	ldrb	r3, [r3, #1]
 80158c2:	b29b      	uxth	r3, r3
 80158c4:	1ad3      	subs	r3, r2, r3
 80158c6:	b29a      	uxth	r2, r3
 80158c8:	4b64      	ldr	r3, [pc, #400]	; (8015a5c <Build_Ext+0x1bc>)
 80158ca:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80158ce:	b29b      	uxth	r3, r3
 80158d0:	1ad3      	subs	r3, r2, r3
 80158d2:	b29b      	uxth	r3, r3
 80158d4:	b21a      	sxth	r2, r3
 80158d6:	4b63      	ldr	r3, [pc, #396]	; (8015a64 <Build_Ext+0x1c4>)
 80158d8:	801a      	strh	r2, [r3, #0]
  Posi_2F2 = List[EXT_POSI].Val;// - Data[2];
 80158da:	4b60      	ldr	r3, [pc, #384]	; (8015a5c <Build_Ext+0x1bc>)
 80158dc:	f9b3 20dc 	ldrsh.w	r2, [r3, #220]	; 0xdc
 80158e0:	4b61      	ldr	r3, [pc, #388]	; (8015a68 <Build_Ext+0x1c8>)
 80158e2:	801a      	strh	r2, [r3, #0]

  switch(Ext)
 80158e4:	797b      	ldrb	r3, [r7, #5]
 80158e6:	2b05      	cmp	r3, #5
 80158e8:	f200 809c 	bhi.w	8015a24 <Build_Ext+0x184>
 80158ec:	a201      	add	r2, pc, #4	; (adr r2, 80158f4 <Build_Ext+0x54>)
 80158ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80158f2:	bf00      	nop
 80158f4:	0801590d 	.word	0x0801590d
 80158f8:	08015933 	.word	0x08015933
 80158fc:	08015959 	.word	0x08015959
 8015900:	08015983 	.word	0x08015983
 8015904:	080159c3 	.word	0x080159c3
 8015908:	08015a03 	.word	0x08015a03
  {
  case 0: // D
    Vo = Data[x+10]-Data[1]+List[EXT_POSI].Val; break;
 801590c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015910:	330a      	adds	r3, #10
 8015912:	4a53      	ldr	r2, [pc, #332]	; (8015a60 <Build_Ext+0x1c0>)
 8015914:	5cd3      	ldrb	r3, [r2, r3]
 8015916:	b29a      	uxth	r2, r3
 8015918:	4b51      	ldr	r3, [pc, #324]	; (8015a60 <Build_Ext+0x1c0>)
 801591a:	785b      	ldrb	r3, [r3, #1]
 801591c:	b29b      	uxth	r3, r3
 801591e:	1ad3      	subs	r3, r2, r3
 8015920:	b29a      	uxth	r2, r3
 8015922:	4b4e      	ldr	r3, [pc, #312]	; (8015a5c <Build_Ext+0x1bc>)
 8015924:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015928:	b29b      	uxth	r3, r3
 801592a:	4413      	add	r3, r2
 801592c:	b29b      	uxth	r3, r3
 801592e:	81fb      	strh	r3, [r7, #14]
 8015930:	e078      	b.n	8015a24 <Build_Ext+0x184>
  case 1: // -D
    Vo = List[EXT_POSI].Val+Data[1]-Data[x+10]; break;
 8015932:	4b4a      	ldr	r3, [pc, #296]	; (8015a5c <Build_Ext+0x1bc>)
 8015934:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015938:	b29a      	uxth	r2, r3
 801593a:	4b49      	ldr	r3, [pc, #292]	; (8015a60 <Build_Ext+0x1c0>)
 801593c:	785b      	ldrb	r3, [r3, #1]
 801593e:	b29b      	uxth	r3, r3
 8015940:	4413      	add	r3, r2
 8015942:	b29a      	uxth	r2, r3
 8015944:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015948:	330a      	adds	r3, #10
 801594a:	4945      	ldr	r1, [pc, #276]	; (8015a60 <Build_Ext+0x1c0>)
 801594c:	5ccb      	ldrb	r3, [r1, r3]
 801594e:	b29b      	uxth	r3, r3
 8015950:	1ad3      	subs	r3, r2, r3
 8015952:	b29b      	uxth	r3, r3
 8015954:	81fb      	strh	r3, [r7, #14]
 8015956:	e065      	b.n	8015a24 <Build_Ext+0x184>
  case 2: // Inp+D
    Vo = Data[x+10]+ WaveBuf[x]+Posi_2F1; break;
 8015958:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801595c:	330a      	adds	r3, #10
 801595e:	4a40      	ldr	r2, [pc, #256]	; (8015a60 <Build_Ext+0x1c0>)
 8015960:	5cd3      	ldrb	r3, [r2, r3]
 8015962:	b29a      	uxth	r2, r3
 8015964:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015968:	4940      	ldr	r1, [pc, #256]	; (8015a6c <Build_Ext+0x1cc>)
 801596a:	5ccb      	ldrb	r3, [r1, r3]
 801596c:	b29b      	uxth	r3, r3
 801596e:	4413      	add	r3, r2
 8015970:	b29a      	uxth	r2, r3
 8015972:	4b3c      	ldr	r3, [pc, #240]	; (8015a64 <Build_Ext+0x1c4>)
 8015974:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015978:	b29b      	uxth	r3, r3
 801597a:	4413      	add	r3, r2
 801597c:	b29b      	uxth	r3, r3
 801597e:	81fb      	strh	r3, [r7, #14]
 8015980:	e050      	b.n	8015a24 <Build_Ext+0x184>
  case 3: // D-Inp
    Vo = (Data[x+10]-Data[1])- (WaveBuf[x]-List[V0_POSI].Val)+ List[EXT_POSI].Val; break;
 8015982:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015986:	330a      	adds	r3, #10
 8015988:	4a35      	ldr	r2, [pc, #212]	; (8015a60 <Build_Ext+0x1c0>)
 801598a:	5cd3      	ldrb	r3, [r2, r3]
 801598c:	b29a      	uxth	r2, r3
 801598e:	4b34      	ldr	r3, [pc, #208]	; (8015a60 <Build_Ext+0x1c0>)
 8015990:	785b      	ldrb	r3, [r3, #1]
 8015992:	b29b      	uxth	r3, r3
 8015994:	1ad3      	subs	r3, r2, r3
 8015996:	b29a      	uxth	r2, r3
 8015998:	4b30      	ldr	r3, [pc, #192]	; (8015a5c <Build_Ext+0x1bc>)
 801599a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801599e:	b299      	uxth	r1, r3
 80159a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80159a4:	4831      	ldr	r0, [pc, #196]	; (8015a6c <Build_Ext+0x1cc>)
 80159a6:	5cc3      	ldrb	r3, [r0, r3]
 80159a8:	b29b      	uxth	r3, r3
 80159aa:	1acb      	subs	r3, r1, r3
 80159ac:	b29b      	uxth	r3, r3
 80159ae:	4413      	add	r3, r2
 80159b0:	b29a      	uxth	r2, r3
 80159b2:	4b2a      	ldr	r3, [pc, #168]	; (8015a5c <Build_Ext+0x1bc>)
 80159b4:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 80159b8:	b29b      	uxth	r3, r3
 80159ba:	4413      	add	r3, r2
 80159bc:	b29b      	uxth	r3, r3
 80159be:	81fb      	strh	r3, [r7, #14]
 80159c0:	e030      	b.n	8015a24 <Build_Ext+0x184>
  case 4: // Inp-D
    Vo = (WaveBuf[x]-List[V0_POSI].Val)-(Data[x+10]-Data[1]) + List[EXT_POSI].Val; break;
 80159c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80159c6:	4a29      	ldr	r2, [pc, #164]	; (8015a6c <Build_Ext+0x1cc>)
 80159c8:	5cd3      	ldrb	r3, [r2, r3]
 80159ca:	b29a      	uxth	r2, r3
 80159cc:	4b23      	ldr	r3, [pc, #140]	; (8015a5c <Build_Ext+0x1bc>)
 80159ce:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80159d2:	b29b      	uxth	r3, r3
 80159d4:	1ad3      	subs	r3, r2, r3
 80159d6:	b29a      	uxth	r2, r3
 80159d8:	4b21      	ldr	r3, [pc, #132]	; (8015a60 <Build_Ext+0x1c0>)
 80159da:	785b      	ldrb	r3, [r3, #1]
 80159dc:	b299      	uxth	r1, r3
 80159de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80159e2:	330a      	adds	r3, #10
 80159e4:	481e      	ldr	r0, [pc, #120]	; (8015a60 <Build_Ext+0x1c0>)
 80159e6:	5cc3      	ldrb	r3, [r0, r3]
 80159e8:	b29b      	uxth	r3, r3
 80159ea:	1acb      	subs	r3, r1, r3
 80159ec:	b29b      	uxth	r3, r3
 80159ee:	4413      	add	r3, r2
 80159f0:	b29a      	uxth	r2, r3
 80159f2:	4b1a      	ldr	r3, [pc, #104]	; (8015a5c <Build_Ext+0x1bc>)
 80159f4:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 80159f8:	b29b      	uxth	r3, r3
 80159fa:	4413      	add	r3, r2
 80159fc:	b29b      	uxth	r3, r3
 80159fe:	81fb      	strh	r3, [r7, #14]
 8015a00:	e010      	b.n	8015a24 <Build_Ext+0x184>
  case 5: // -Inp
    Vo = Yp+List[EXT_POSI].Val - WaveBuf[x]; break;
 8015a02:	793b      	ldrb	r3, [r7, #4]
 8015a04:	b29a      	uxth	r2, r3
 8015a06:	4b15      	ldr	r3, [pc, #84]	; (8015a5c <Build_Ext+0x1bc>)
 8015a08:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015a0c:	b29b      	uxth	r3, r3
 8015a0e:	4413      	add	r3, r2
 8015a10:	b29a      	uxth	r2, r3
 8015a12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015a16:	4915      	ldr	r1, [pc, #84]	; (8015a6c <Build_Ext+0x1cc>)
 8015a18:	5ccb      	ldrb	r3, [r1, r3]
 8015a1a:	b29b      	uxth	r3, r3
 8015a1c:	1ad3      	subs	r3, r2, r3
 8015a1e:	b29b      	uxth	r3, r3
 8015a20:	81fb      	strh	r3, [r7, #14]
 8015a22:	bf00      	nop
  }
  if(Vo > 199) Vo = 202;
 8015a24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015a28:	2bc7      	cmp	r3, #199	; 0xc7
 8015a2a:	dd01      	ble.n	8015a30 <Build_Ext+0x190>
 8015a2c:	23ca      	movs	r3, #202	; 0xca
 8015a2e:	81fb      	strh	r3, [r7, #14]
  if(Vo <   3) Vo = 1;                     // �����޷�
 8015a30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015a34:	2b02      	cmp	r3, #2
 8015a36:	dc01      	bgt.n	8015a3c <Build_Ext+0x19c>
 8015a38:	2301      	movs	r3, #1
 8015a3a:	81fb      	strh	r3, [r7, #14]
  Buf[x]= Vo;
 8015a3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015a40:	68ba      	ldr	r2, [r7, #8]
 8015a42:	4413      	add	r3, r2
 8015a44:	89fa      	ldrh	r2, [r7, #14]
 8015a46:	b2d2      	uxtb	r2, r2
 8015a48:	701a      	strb	r2, [r3, #0]
}
 8015a4a:	bf00      	nop
 8015a4c:	3714      	adds	r7, #20
 8015a4e:	46bd      	mov	sp, r7
 8015a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a54:	4770      	bx	lr
 8015a56:	bf00      	nop
 8015a58:	20000d34 	.word	0x20000d34
 8015a5c:	20000298 	.word	0x20000298
 8015a60:	20000008 	.word	0x20000008
 8015a64:	2000284c 	.word	0x2000284c
 8015a68:	20006874 	.word	0x20006874
 8015a6c:	20000c08 	.word	0x20000c08

08015a70 <Auto_Fit>:

void Auto_Fit(void)
{
 8015a70:	b590      	push	{r4, r7, lr}
 8015a72:	b083      	sub	sp, #12
 8015a74:	af00      	add	r7, sp, #0
  char i,j,k=0;
 8015a76:	2300      	movs	r3, #0
 8015a78:	717b      	strb	r3, [r7, #5]
  short Tmp,Tmp1;

  if(Status != STOP){
 8015a7a:	4b38      	ldr	r3, [pc, #224]	; (8015b5c <Auto_Fit+0xec>)
 8015a7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015a80:	2b01      	cmp	r3, #1
 8015a82:	f000 83de 	beq.w	8016242 <Auto_Fit+0x7d2>
    //======��ѹ���Զ�ѡ��==============
    for(i=0;i<9;i++){
 8015a86:	2300      	movs	r3, #0
 8015a88:	71fb      	strb	r3, [r7, #7]
 8015a8a:	e098      	b.n	8015bbe <Auto_Fit+0x14e>
      //******Aͨ��***********
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015a8c:	4b34      	ldr	r3, [pc, #208]	; (8015b60 <Auto_Fit+0xf0>)
 8015a8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015a92:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015a96:	4a33      	ldr	r2, [pc, #204]	; (8015b64 <Auto_Fit+0xf4>)
 8015a98:	6811      	ldr	r1, [r2, #0]
 8015a9a:	4a33      	ldr	r2, [pc, #204]	; (8015b68 <Auto_Fit+0xf8>)
 8015a9c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015aa0:	4610      	mov	r0, r2
 8015aa2:	4a32      	ldr	r2, [pc, #200]	; (8015b6c <Auto_Fit+0xfc>)
 8015aa4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015aa8:	2a00      	cmp	r2, #0
 8015aaa:	bf14      	ite	ne
 8015aac:	2201      	movne	r2, #1
 8015aae:	2200      	moveq	r2, #0
 8015ab0:	b2d2      	uxtb	r2, r2
 8015ab2:	4402      	add	r2, r0
 8015ab4:	0052      	lsls	r2, r2, #1
 8015ab6:	440a      	add	r2, r1
 8015ab8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015abc:	0092      	lsls	r2, r2, #2
 8015abe:	492c      	ldr	r1, [pc, #176]	; (8015b70 <Auto_Fit+0x100>)
 8015ac0:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015ac4:	4608      	mov	r0, r1
 8015ac6:	492b      	ldr	r1, [pc, #172]	; (8015b74 <Auto_Fit+0x104>)
 8015ac8:	5c09      	ldrb	r1, [r1, r0]
 8015aca:	fb92 f2f1 	sdiv	r2, r2, r1
 8015ace:	fb02 f303 	mul.w	r3, r2, r3
 8015ad2:	131b      	asrs	r3, r3, #12
           - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val);
 8015ad4:	b29a      	uxth	r2, r3
 8015ad6:	4b28      	ldr	r3, [pc, #160]	; (8015b78 <Auto_Fit+0x108>)
 8015ad8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015adc:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015ae0:	4920      	ldr	r1, [pc, #128]	; (8015b64 <Auto_Fit+0xf4>)
 8015ae2:	6808      	ldr	r0, [r1, #0]
 8015ae4:	4920      	ldr	r1, [pc, #128]	; (8015b68 <Auto_Fit+0xf8>)
 8015ae6:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015aea:	460c      	mov	r4, r1
 8015aec:	491f      	ldr	r1, [pc, #124]	; (8015b6c <Auto_Fit+0xfc>)
 8015aee:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015af2:	2900      	cmp	r1, #0
 8015af4:	bf14      	ite	ne
 8015af6:	2101      	movne	r1, #1
 8015af8:	2100      	moveq	r1, #0
 8015afa:	b2c9      	uxtb	r1, r1
 8015afc:	4421      	add	r1, r4
 8015afe:	0049      	lsls	r1, r1, #1
 8015b00:	4401      	add	r1, r0
 8015b02:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015b06:	0089      	lsls	r1, r1, #2
 8015b08:	4819      	ldr	r0, [pc, #100]	; (8015b70 <Auto_Fit+0x100>)
 8015b0a:	f9b0 0000 	ldrsh.w	r0, [r0]
 8015b0e:	4604      	mov	r4, r0
 8015b10:	4818      	ldr	r0, [pc, #96]	; (8015b74 <Auto_Fit+0x104>)
 8015b12:	5d00      	ldrb	r0, [r0, r4]
 8015b14:	fb91 f1f0 	sdiv	r1, r1, r0
 8015b18:	fb01 f303 	mul.w	r3, r1, r3
 8015b1c:	131b      	asrs	r3, r3, #12
 8015b1e:	b29b      	uxth	r3, r3
 8015b20:	1ad3      	subs	r3, r2, r3
 8015b22:	b29b      	uxth	r3, r3
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015b24:	803b      	strh	r3, [r7, #0]
      if((Tmp1 < 40)&&(List[Y_RANGES].Val > 2)){       //40
 8015b26:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015b2a:	2b27      	cmp	r3, #39	; 0x27
 8015b2c:	dc28      	bgt.n	8015b80 <Auto_Fit+0x110>
 8015b2e:	4b13      	ldr	r3, [pc, #76]	; (8015b7c <Auto_Fit+0x10c>)
 8015b30:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015b34:	2b02      	cmp	r3, #2
 8015b36:	dd23      	ble.n	8015b80 <Auto_Fit+0x110>
        List[Y_RANGES].Val--;
 8015b38:	4b10      	ldr	r3, [pc, #64]	; (8015b7c <Auto_Fit+0x10c>)
 8015b3a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015b3e:	b29b      	uxth	r3, r3
 8015b40:	3b01      	subs	r3, #1
 8015b42:	b29b      	uxth	r3, r3
 8015b44:	b21a      	sxth	r2, r3
 8015b46:	4b0d      	ldr	r3, [pc, #52]	; (8015b7c <Auto_Fit+0x10c>)
 8015b48:	809a      	strh	r2, [r3, #4]
        List[V0_POSI].Val=100;
 8015b4a:	4b0c      	ldr	r3, [pc, #48]	; (8015b7c <Auto_Fit+0x10c>)
 8015b4c:	2264      	movs	r2, #100	; 0x64
 8015b4e:	839a      	strh	r2, [r3, #28]
        WaveProcess();
 8015b50:	f7ff faac 	bl	80150ac <WaveProcess>
        Update_Proc_All();
 8015b54:	f7fe ff32 	bl	80149bc <Update_Proc_All>
 8015b58:	e02b      	b.n	8015bb2 <Auto_Fit+0x142>
 8015b5a:	bf00      	nop
 8015b5c:	200007a0 	.word	0x200007a0
 8015b60:	20002856 	.word	0x20002856
 8015b64:	2000057c 	.word	0x2000057c
 8015b68:	20006886 	.word	0x20006886
 8015b6c:	20002862 	.word	0x20002862
 8015b70:	2000284a 	.word	0x2000284a
 8015b74:	20000560 	.word	0x20000560
 8015b78:	20002868 	.word	0x20002868
 8015b7c:	20000298 	.word	0x20000298
      }
      else if((Tmp1 > 110)&&(List[Y_RANGES].Val < 9)){ //110
 8015b80:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015b84:	2b6e      	cmp	r3, #110	; 0x6e
 8015b86:	dd14      	ble.n	8015bb2 <Auto_Fit+0x142>
 8015b88:	4bbe      	ldr	r3, [pc, #760]	; (8015e84 <Auto_Fit+0x414>)
 8015b8a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015b8e:	2b08      	cmp	r3, #8
 8015b90:	dc0f      	bgt.n	8015bb2 <Auto_Fit+0x142>
        List[Y_RANGES].Val++;
 8015b92:	4bbc      	ldr	r3, [pc, #752]	; (8015e84 <Auto_Fit+0x414>)
 8015b94:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015b98:	b29b      	uxth	r3, r3
 8015b9a:	3301      	adds	r3, #1
 8015b9c:	b29b      	uxth	r3, r3
 8015b9e:	b21a      	sxth	r2, r3
 8015ba0:	4bb8      	ldr	r3, [pc, #736]	; (8015e84 <Auto_Fit+0x414>)
 8015ba2:	809a      	strh	r2, [r3, #4]
        List[V0_POSI].Val=100;
 8015ba4:	4bb7      	ldr	r3, [pc, #732]	; (8015e84 <Auto_Fit+0x414>)
 8015ba6:	2264      	movs	r2, #100	; 0x64
 8015ba8:	839a      	strh	r2, [r3, #28]
        WaveProcess();
 8015baa:	f7ff fa7f 	bl	80150ac <WaveProcess>
        Update_Proc_All();
 8015bae:	f7fe ff05 	bl	80149bc <Update_Proc_All>
      }
      HAL_Delay(50);
 8015bb2:	2032      	movs	r0, #50	; 0x32
 8015bb4:	f002 fbea 	bl	801838c <HAL_Delay>
    for(i=0;i<9;i++){
 8015bb8:	79fb      	ldrb	r3, [r7, #7]
 8015bba:	3301      	adds	r3, #1
 8015bbc:	71fb      	strb	r3, [r7, #7]
 8015bbe:	79fb      	ldrb	r3, [r7, #7]
 8015bc0:	2b08      	cmp	r3, #8
 8015bc2:	f67f af63 	bls.w	8015a8c <Auto_Fit+0x1c>
    //============ʶ�𴥷�Դ======================


    //======�������Զ�ѡ��==============
    //if(!List[TRI_Ch]){//******Aͨ��***********
      Tmp = (((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015bc6:	4bb0      	ldr	r3, [pc, #704]	; (8015e88 <Auto_Fit+0x418>)
 8015bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015bcc:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015bd0:	4aae      	ldr	r2, [pc, #696]	; (8015e8c <Auto_Fit+0x41c>)
 8015bd2:	6811      	ldr	r1, [r2, #0]
 8015bd4:	4aae      	ldr	r2, [pc, #696]	; (8015e90 <Auto_Fit+0x420>)
 8015bd6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015bda:	4610      	mov	r0, r2
 8015bdc:	4aad      	ldr	r2, [pc, #692]	; (8015e94 <Auto_Fit+0x424>)
 8015bde:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015be2:	2a00      	cmp	r2, #0
 8015be4:	bf14      	ite	ne
 8015be6:	2201      	movne	r2, #1
 8015be8:	2200      	moveq	r2, #0
 8015bea:	b2d2      	uxtb	r2, r2
 8015bec:	4402      	add	r2, r0
 8015bee:	0052      	lsls	r2, r2, #1
 8015bf0:	440a      	add	r2, r1
 8015bf2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015bf6:	0092      	lsls	r2, r2, #2
 8015bf8:	49a7      	ldr	r1, [pc, #668]	; (8015e98 <Auto_Fit+0x428>)
 8015bfa:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015bfe:	4608      	mov	r0, r1
 8015c00:	49a6      	ldr	r1, [pc, #664]	; (8015e9c <Auto_Fit+0x42c>)
 8015c02:	5c09      	ldrb	r1, [r1, r0]
 8015c04:	fb92 f2f1 	sdiv	r2, r2, r1
 8015c08:	fb02 f303 	mul.w	r3, r2, r3
 8015c0c:	131a      	asrs	r2, r3, #12
           - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val))/4;
 8015c0e:	4ba4      	ldr	r3, [pc, #656]	; (8015ea0 <Auto_Fit+0x430>)
 8015c10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015c14:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015c18:	499c      	ldr	r1, [pc, #624]	; (8015e8c <Auto_Fit+0x41c>)
 8015c1a:	6808      	ldr	r0, [r1, #0]
 8015c1c:	499c      	ldr	r1, [pc, #624]	; (8015e90 <Auto_Fit+0x420>)
 8015c1e:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015c22:	460c      	mov	r4, r1
 8015c24:	499b      	ldr	r1, [pc, #620]	; (8015e94 <Auto_Fit+0x424>)
 8015c26:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015c2a:	2900      	cmp	r1, #0
 8015c2c:	bf14      	ite	ne
 8015c2e:	2101      	movne	r1, #1
 8015c30:	2100      	moveq	r1, #0
 8015c32:	b2c9      	uxtb	r1, r1
 8015c34:	4421      	add	r1, r4
 8015c36:	0049      	lsls	r1, r1, #1
 8015c38:	4401      	add	r1, r0
 8015c3a:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015c3e:	0089      	lsls	r1, r1, #2
 8015c40:	4895      	ldr	r0, [pc, #596]	; (8015e98 <Auto_Fit+0x428>)
 8015c42:	f9b0 0000 	ldrsh.w	r0, [r0]
 8015c46:	4604      	mov	r4, r0
 8015c48:	4894      	ldr	r0, [pc, #592]	; (8015e9c <Auto_Fit+0x42c>)
 8015c4a:	5d00      	ldrb	r0, [r0, r4]
 8015c4c:	fb91 f1f0 	sdiv	r1, r1, r0
 8015c50:	fb01 f303 	mul.w	r3, r1, r3
 8015c54:	131b      	asrs	r3, r3, #12
 8015c56:	1ad3      	subs	r3, r2, r3
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	da00      	bge.n	8015c5e <Auto_Fit+0x1ee>
 8015c5c:	3303      	adds	r3, #3
 8015c5e:	109b      	asrs	r3, r3, #2
      Tmp = (((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015c60:	807b      	strh	r3, [r7, #2]
      if((List[THRESHOLD].Val > (((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)  + Tmp))||
 8015c62:	4b88      	ldr	r3, [pc, #544]	; (8015e84 <Auto_Fit+0x414>)
 8015c64:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8015c68:	4618      	mov	r0, r3
 8015c6a:	4b8e      	ldr	r3, [pc, #568]	; (8015ea4 <Auto_Fit+0x434>)
 8015c6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015c70:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015c74:	4a85      	ldr	r2, [pc, #532]	; (8015e8c <Auto_Fit+0x41c>)
 8015c76:	6811      	ldr	r1, [r2, #0]
 8015c78:	4a85      	ldr	r2, [pc, #532]	; (8015e90 <Auto_Fit+0x420>)
 8015c7a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015c7e:	4614      	mov	r4, r2
 8015c80:	4a84      	ldr	r2, [pc, #528]	; (8015e94 <Auto_Fit+0x424>)
 8015c82:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015c86:	2a00      	cmp	r2, #0
 8015c88:	bf14      	ite	ne
 8015c8a:	2201      	movne	r2, #1
 8015c8c:	2200      	moveq	r2, #0
 8015c8e:	b2d2      	uxtb	r2, r2
 8015c90:	4422      	add	r2, r4
 8015c92:	0052      	lsls	r2, r2, #1
 8015c94:	440a      	add	r2, r1
 8015c96:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015c9a:	0092      	lsls	r2, r2, #2
 8015c9c:	497e      	ldr	r1, [pc, #504]	; (8015e98 <Auto_Fit+0x428>)
 8015c9e:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015ca2:	460c      	mov	r4, r1
 8015ca4:	497d      	ldr	r1, [pc, #500]	; (8015e9c <Auto_Fit+0x42c>)
 8015ca6:	5d09      	ldrb	r1, [r1, r4]
 8015ca8:	fb92 f2f1 	sdiv	r2, r2, r1
 8015cac:	fb02 f303 	mul.w	r3, r2, r3
 8015cb0:	131b      	asrs	r3, r3, #12
 8015cb2:	3364      	adds	r3, #100	; 0x64
 8015cb4:	4a73      	ldr	r2, [pc, #460]	; (8015e84 <Auto_Fit+0x414>)
 8015cb6:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015cba:	1a9a      	subs	r2, r3, r2
 8015cbc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015cc0:	4413      	add	r3, r2
 8015cc2:	4298      	cmp	r0, r3
 8015cc4:	dc32      	bgt.n	8015d2c <Auto_Fit+0x2bc>
         (List[THRESHOLD].Val < (((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)  - Tmp))){
 8015cc6:	4b6f      	ldr	r3, [pc, #444]	; (8015e84 <Auto_Fit+0x414>)
 8015cc8:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8015ccc:	4618      	mov	r0, r3
 8015cce:	4b75      	ldr	r3, [pc, #468]	; (8015ea4 <Auto_Fit+0x434>)
 8015cd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015cd4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015cd8:	4a6c      	ldr	r2, [pc, #432]	; (8015e8c <Auto_Fit+0x41c>)
 8015cda:	6811      	ldr	r1, [r2, #0]
 8015cdc:	4a6c      	ldr	r2, [pc, #432]	; (8015e90 <Auto_Fit+0x420>)
 8015cde:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015ce2:	4614      	mov	r4, r2
 8015ce4:	4a6b      	ldr	r2, [pc, #428]	; (8015e94 <Auto_Fit+0x424>)
 8015ce6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015cea:	2a00      	cmp	r2, #0
 8015cec:	bf14      	ite	ne
 8015cee:	2201      	movne	r2, #1
 8015cf0:	2200      	moveq	r2, #0
 8015cf2:	b2d2      	uxtb	r2, r2
 8015cf4:	4422      	add	r2, r4
 8015cf6:	0052      	lsls	r2, r2, #1
 8015cf8:	440a      	add	r2, r1
 8015cfa:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015cfe:	0092      	lsls	r2, r2, #2
 8015d00:	4965      	ldr	r1, [pc, #404]	; (8015e98 <Auto_Fit+0x428>)
 8015d02:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015d06:	460c      	mov	r4, r1
 8015d08:	4964      	ldr	r1, [pc, #400]	; (8015e9c <Auto_Fit+0x42c>)
 8015d0a:	5d09      	ldrb	r1, [r1, r4]
 8015d0c:	fb92 f2f1 	sdiv	r2, r2, r1
 8015d10:	fb02 f303 	mul.w	r3, r2, r3
 8015d14:	131b      	asrs	r3, r3, #12
 8015d16:	3364      	adds	r3, #100	; 0x64
 8015d18:	4a5a      	ldr	r2, [pc, #360]	; (8015e84 <Auto_Fit+0x414>)
 8015d1a:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015d1e:	1a9a      	subs	r2, r3, r2
 8015d20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015d24:	1ad3      	subs	r3, r2, r3
      if((List[THRESHOLD].Val > (((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)  + Tmp))||
 8015d26:	4298      	cmp	r0, r3
 8015d28:	f280 808e 	bge.w	8015e48 <Auto_Fit+0x3d8>
           if(abs(((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)+15)<195)
 8015d2c:	4b5d      	ldr	r3, [pc, #372]	; (8015ea4 <Auto_Fit+0x434>)
 8015d2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015d32:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015d36:	4a55      	ldr	r2, [pc, #340]	; (8015e8c <Auto_Fit+0x41c>)
 8015d38:	6811      	ldr	r1, [r2, #0]
 8015d3a:	4a55      	ldr	r2, [pc, #340]	; (8015e90 <Auto_Fit+0x420>)
 8015d3c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015d40:	4610      	mov	r0, r2
 8015d42:	4a54      	ldr	r2, [pc, #336]	; (8015e94 <Auto_Fit+0x424>)
 8015d44:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015d48:	2a00      	cmp	r2, #0
 8015d4a:	bf14      	ite	ne
 8015d4c:	2201      	movne	r2, #1
 8015d4e:	2200      	moveq	r2, #0
 8015d50:	b2d2      	uxtb	r2, r2
 8015d52:	4402      	add	r2, r0
 8015d54:	0052      	lsls	r2, r2, #1
 8015d56:	440a      	add	r2, r1
 8015d58:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015d5c:	0092      	lsls	r2, r2, #2
 8015d5e:	494e      	ldr	r1, [pc, #312]	; (8015e98 <Auto_Fit+0x428>)
 8015d60:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015d64:	4608      	mov	r0, r1
 8015d66:	494d      	ldr	r1, [pc, #308]	; (8015e9c <Auto_Fit+0x42c>)
 8015d68:	5c09      	ldrb	r1, [r1, r0]
 8015d6a:	fb92 f2f1 	sdiv	r2, r2, r1
 8015d6e:	fb02 f303 	mul.w	r3, r2, r3
 8015d72:	131b      	asrs	r3, r3, #12
 8015d74:	3364      	adds	r3, #100	; 0x64
 8015d76:	4a43      	ldr	r2, [pc, #268]	; (8015e84 <Auto_Fit+0x414>)
 8015d78:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015d7c:	1a9b      	subs	r3, r3, r2
 8015d7e:	330f      	adds	r3, #15
 8015d80:	f113 0fc2 	cmn.w	r3, #194	; 0xc2
 8015d84:	db5c      	blt.n	8015e40 <Auto_Fit+0x3d0>
 8015d86:	4b47      	ldr	r3, [pc, #284]	; (8015ea4 <Auto_Fit+0x434>)
 8015d88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015d8c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015d90:	4a3e      	ldr	r2, [pc, #248]	; (8015e8c <Auto_Fit+0x41c>)
 8015d92:	6811      	ldr	r1, [r2, #0]
 8015d94:	4a3e      	ldr	r2, [pc, #248]	; (8015e90 <Auto_Fit+0x420>)
 8015d96:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015d9a:	4610      	mov	r0, r2
 8015d9c:	4a3d      	ldr	r2, [pc, #244]	; (8015e94 <Auto_Fit+0x424>)
 8015d9e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015da2:	2a00      	cmp	r2, #0
 8015da4:	bf14      	ite	ne
 8015da6:	2201      	movne	r2, #1
 8015da8:	2200      	moveq	r2, #0
 8015daa:	b2d2      	uxtb	r2, r2
 8015dac:	4402      	add	r2, r0
 8015dae:	0052      	lsls	r2, r2, #1
 8015db0:	440a      	add	r2, r1
 8015db2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015db6:	0092      	lsls	r2, r2, #2
 8015db8:	4937      	ldr	r1, [pc, #220]	; (8015e98 <Auto_Fit+0x428>)
 8015dba:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015dbe:	4608      	mov	r0, r1
 8015dc0:	4936      	ldr	r1, [pc, #216]	; (8015e9c <Auto_Fit+0x42c>)
 8015dc2:	5c09      	ldrb	r1, [r1, r0]
 8015dc4:	fb92 f2f1 	sdiv	r2, r2, r1
 8015dc8:	fb02 f303 	mul.w	r3, r2, r3
 8015dcc:	131b      	asrs	r3, r3, #12
 8015dce:	3364      	adds	r3, #100	; 0x64
 8015dd0:	4a2c      	ldr	r2, [pc, #176]	; (8015e84 <Auto_Fit+0x414>)
 8015dd2:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015dd6:	1a9b      	subs	r3, r3, r2
 8015dd8:	330f      	adds	r3, #15
 8015dda:	2bc2      	cmp	r3, #194	; 0xc2
 8015ddc:	dc30      	bgt.n	8015e40 <Auto_Fit+0x3d0>
             List[THRESHOLD].Val = ((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)+15 ;
 8015dde:	4b31      	ldr	r3, [pc, #196]	; (8015ea4 <Auto_Fit+0x434>)
 8015de0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015de4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015de8:	4a28      	ldr	r2, [pc, #160]	; (8015e8c <Auto_Fit+0x41c>)
 8015dea:	6811      	ldr	r1, [r2, #0]
 8015dec:	4a28      	ldr	r2, [pc, #160]	; (8015e90 <Auto_Fit+0x420>)
 8015dee:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015df2:	4610      	mov	r0, r2
 8015df4:	4a27      	ldr	r2, [pc, #156]	; (8015e94 <Auto_Fit+0x424>)
 8015df6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015dfa:	2a00      	cmp	r2, #0
 8015dfc:	bf14      	ite	ne
 8015dfe:	2201      	movne	r2, #1
 8015e00:	2200      	moveq	r2, #0
 8015e02:	b2d2      	uxtb	r2, r2
 8015e04:	4402      	add	r2, r0
 8015e06:	0052      	lsls	r2, r2, #1
 8015e08:	440a      	add	r2, r1
 8015e0a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015e0e:	0092      	lsls	r2, r2, #2
 8015e10:	4921      	ldr	r1, [pc, #132]	; (8015e98 <Auto_Fit+0x428>)
 8015e12:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015e16:	4608      	mov	r0, r1
 8015e18:	4920      	ldr	r1, [pc, #128]	; (8015e9c <Auto_Fit+0x42c>)
 8015e1a:	5c09      	ldrb	r1, [r1, r0]
 8015e1c:	fb92 f2f1 	sdiv	r2, r2, r1
 8015e20:	fb02 f303 	mul.w	r3, r2, r3
 8015e24:	131b      	asrs	r3, r3, #12
 8015e26:	b29a      	uxth	r2, r3
 8015e28:	4b16      	ldr	r3, [pc, #88]	; (8015e84 <Auto_Fit+0x414>)
 8015e2a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015e2e:	b29b      	uxth	r3, r3
 8015e30:	1ad3      	subs	r3, r2, r3
 8015e32:	b29b      	uxth	r3, r3
 8015e34:	3373      	adds	r3, #115	; 0x73
 8015e36:	b29b      	uxth	r3, r3
 8015e38:	b21a      	sxth	r2, r3
 8015e3a:	4b12      	ldr	r3, [pc, #72]	; (8015e84 <Auto_Fit+0x414>)
 8015e3c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
           WaveProcess();
 8015e40:	f7ff f934 	bl	80150ac <WaveProcess>
           Update_Proc_All();
 8015e44:	f7fe fdba 	bl	80149bc <Update_Proc_All>
         }

      ParamTab[VTx2]= ParamTab[P1x2] + 2*List[THRESHOLD].Val;
 8015e48:	4b17      	ldr	r3, [pc, #92]	; (8015ea8 <Auto_Fit+0x438>)
 8015e4a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8015e4e:	b29a      	uxth	r2, r3
 8015e50:	4b0c      	ldr	r3, [pc, #48]	; (8015e84 <Auto_Fit+0x414>)
 8015e52:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8015e56:	b29b      	uxth	r3, r3
 8015e58:	005b      	lsls	r3, r3, #1
 8015e5a:	b29b      	uxth	r3, r3
 8015e5c:	4413      	add	r3, r2
 8015e5e:	b29b      	uxth	r3, r3
 8015e60:	b21a      	sxth	r2, r3
 8015e62:	4b11      	ldr	r3, [pc, #68]	; (8015ea8 <Auto_Fit+0x438>)
 8015e64:	839a      	strh	r2, [r3, #28]
      List[THRESHOLD].Flg |= UPD;
 8015e66:	4b07      	ldr	r3, [pc, #28]	; (8015e84 <Auto_Fit+0x414>)
 8015e68:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8015e6c:	f043 0320 	orr.w	r3, r3, #32
 8015e70:	b2da      	uxtb	r2, r3
 8015e72:	4b04      	ldr	r3, [pc, #16]	; (8015e84 <Auto_Fit+0x414>)
 8015e74:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      Update_Title();
 8015e78:	f7fc fa9c 	bl	80123b4 <Update_Title>

    //===========��ƽʱ��������==================
    HAL_Delay(100);
 8015e7c:	2064      	movs	r0, #100	; 0x64
 8015e7e:	f002 fa85 	bl	801838c <HAL_Delay>
 8015e82:	e013      	b.n	8015eac <Auto_Fit+0x43c>
 8015e84:	20000298 	.word	0x20000298
 8015e88:	20002856 	.word	0x20002856
 8015e8c:	2000057c 	.word	0x2000057c
 8015e90:	20006886 	.word	0x20006886
 8015e94:	20002862 	.word	0x20002862
 8015e98:	2000284a 	.word	0x2000284a
 8015e9c:	20000560 	.word	0x20000560
 8015ea0:	20002868 	.word	0x20002868
 8015ea4:	2000286a 	.word	0x2000286a
 8015ea8:	20000140 	.word	0x20000140

        if(((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)>10){
 8015eac:	4ba3      	ldr	r3, [pc, #652]	; (801613c <Auto_Fit+0x6cc>)
 8015eae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015eb2:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015eb6:	4aa2      	ldr	r2, [pc, #648]	; (8016140 <Auto_Fit+0x6d0>)
 8015eb8:	6811      	ldr	r1, [r2, #0]
 8015eba:	4aa2      	ldr	r2, [pc, #648]	; (8016144 <Auto_Fit+0x6d4>)
 8015ebc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015ec0:	4610      	mov	r0, r2
 8015ec2:	4aa1      	ldr	r2, [pc, #644]	; (8016148 <Auto_Fit+0x6d8>)
 8015ec4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015ec8:	2a00      	cmp	r2, #0
 8015eca:	bf14      	ite	ne
 8015ecc:	2201      	movne	r2, #1
 8015ece:	2200      	moveq	r2, #0
 8015ed0:	b2d2      	uxtb	r2, r2
 8015ed2:	4402      	add	r2, r0
 8015ed4:	0052      	lsls	r2, r2, #1
 8015ed6:	440a      	add	r2, r1
 8015ed8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015edc:	0092      	lsls	r2, r2, #2
 8015ede:	499b      	ldr	r1, [pc, #620]	; (801614c <Auto_Fit+0x6dc>)
 8015ee0:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015ee4:	4608      	mov	r0, r1
 8015ee6:	499a      	ldr	r1, [pc, #616]	; (8016150 <Auto_Fit+0x6e0>)
 8015ee8:	5c09      	ldrb	r1, [r1, r0]
 8015eea:	fb92 f2f1 	sdiv	r2, r2, r1
 8015eee:	fb02 f303 	mul.w	r3, r2, r3
 8015ef2:	131b      	asrs	r3, r3, #12
 8015ef4:	3364      	adds	r3, #100	; 0x64
 8015ef6:	4a97      	ldr	r2, [pc, #604]	; (8016154 <Auto_Fit+0x6e4>)
 8015ef8:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015efc:	1a9b      	subs	r3, r3, r2
 8015efe:	2b0a      	cmp	r3, #10
 8015f00:	dd76      	ble.n	8015ff0 <Auto_Fit+0x580>
      WaveProcess();
 8015f02:	f7ff f8d3 	bl	80150ac <WaveProcess>
      Update_Proc_All();
 8015f06:	f7fe fd59 	bl	80149bc <Update_Proc_All>
      HAL_Delay(100);
 8015f0a:	2064      	movs	r0, #100	; 0x64
 8015f0c:	f002 fa3e 	bl	801838c <HAL_Delay>
      for(i=0;i<9;i++){
 8015f10:	2300      	movs	r3, #0
 8015f12:	71fb      	strb	r3, [r7, #7]
 8015f14:	e068      	b.n	8015fe8 <Auto_Fit+0x578>
        WaveProcess();
 8015f16:	f7ff f8c9 	bl	80150ac <WaveProcess>
        Tmp1 = (((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val;
 8015f1a:	4b8f      	ldr	r3, [pc, #572]	; (8016158 <Auto_Fit+0x6e8>)
 8015f1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015f20:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015f24:	4a86      	ldr	r2, [pc, #536]	; (8016140 <Auto_Fit+0x6d0>)
 8015f26:	6811      	ldr	r1, [r2, #0]
 8015f28:	4a86      	ldr	r2, [pc, #536]	; (8016144 <Auto_Fit+0x6d4>)
 8015f2a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015f2e:	4610      	mov	r0, r2
 8015f30:	4a85      	ldr	r2, [pc, #532]	; (8016148 <Auto_Fit+0x6d8>)
 8015f32:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015f36:	2a00      	cmp	r2, #0
 8015f38:	bf14      	ite	ne
 8015f3a:	2201      	movne	r2, #1
 8015f3c:	2200      	moveq	r2, #0
 8015f3e:	b2d2      	uxtb	r2, r2
 8015f40:	4402      	add	r2, r0
 8015f42:	0052      	lsls	r2, r2, #1
 8015f44:	440a      	add	r2, r1
 8015f46:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015f4a:	0092      	lsls	r2, r2, #2
 8015f4c:	497f      	ldr	r1, [pc, #508]	; (801614c <Auto_Fit+0x6dc>)
 8015f4e:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015f52:	4608      	mov	r0, r1
 8015f54:	497e      	ldr	r1, [pc, #504]	; (8016150 <Auto_Fit+0x6e0>)
 8015f56:	5c09      	ldrb	r1, [r1, r0]
 8015f58:	fb92 f2f1 	sdiv	r2, r2, r1
 8015f5c:	fb02 f303 	mul.w	r3, r2, r3
 8015f60:	131b      	asrs	r3, r3, #12
 8015f62:	b29a      	uxth	r2, r3
 8015f64:	4b7b      	ldr	r3, [pc, #492]	; (8016154 <Auto_Fit+0x6e4>)
 8015f66:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015f6a:	b29b      	uxth	r3, r3
 8015f6c:	1ad3      	subs	r3, r2, r3
 8015f6e:	b29b      	uxth	r3, r3
 8015f70:	3364      	adds	r3, #100	; 0x64
 8015f72:	b29b      	uxth	r3, r3
 8015f74:	803b      	strh	r3, [r7, #0]
        if((Tmp1 < 40)&&(List[Y_RANGES].Val > 2)){       //40
 8015f76:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015f7a:	2b27      	cmp	r3, #39	; 0x27
 8015f7c:	dc15      	bgt.n	8015faa <Auto_Fit+0x53a>
 8015f7e:	4b75      	ldr	r3, [pc, #468]	; (8016154 <Auto_Fit+0x6e4>)
 8015f80:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015f84:	2b02      	cmp	r3, #2
 8015f86:	dd10      	ble.n	8015faa <Auto_Fit+0x53a>
          List[Y_RANGES].Val--;
 8015f88:	4b72      	ldr	r3, [pc, #456]	; (8016154 <Auto_Fit+0x6e4>)
 8015f8a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015f8e:	b29b      	uxth	r3, r3
 8015f90:	3b01      	subs	r3, #1
 8015f92:	b29b      	uxth	r3, r3
 8015f94:	b21a      	sxth	r2, r3
 8015f96:	4b6f      	ldr	r3, [pc, #444]	; (8016154 <Auto_Fit+0x6e4>)
 8015f98:	809a      	strh	r2, [r3, #4]
          List[V0_POSI].Val=100;
 8015f9a:	4b6e      	ldr	r3, [pc, #440]	; (8016154 <Auto_Fit+0x6e4>)
 8015f9c:	2264      	movs	r2, #100	; 0x64
 8015f9e:	839a      	strh	r2, [r3, #28]
          WaveProcess();
 8015fa0:	f7ff f884 	bl	80150ac <WaveProcess>
          Update_Proc_All();
 8015fa4:	f7fe fd0a 	bl	80149bc <Update_Proc_All>
 8015fa8:	e018      	b.n	8015fdc <Auto_Fit+0x56c>
        }
        else if((Tmp1 > 100)&&(List[Y_RANGES].Val < 9)){ //110
 8015faa:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015fae:	2b64      	cmp	r3, #100	; 0x64
 8015fb0:	dd14      	ble.n	8015fdc <Auto_Fit+0x56c>
 8015fb2:	4b68      	ldr	r3, [pc, #416]	; (8016154 <Auto_Fit+0x6e4>)
 8015fb4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015fb8:	2b08      	cmp	r3, #8
 8015fba:	dc0f      	bgt.n	8015fdc <Auto_Fit+0x56c>
          List[Y_RANGES].Val++;
 8015fbc:	4b65      	ldr	r3, [pc, #404]	; (8016154 <Auto_Fit+0x6e4>)
 8015fbe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015fc2:	b29b      	uxth	r3, r3
 8015fc4:	3301      	adds	r3, #1
 8015fc6:	b29b      	uxth	r3, r3
 8015fc8:	b21a      	sxth	r2, r3
 8015fca:	4b62      	ldr	r3, [pc, #392]	; (8016154 <Auto_Fit+0x6e4>)
 8015fcc:	809a      	strh	r2, [r3, #4]
          List[V0_POSI].Val=100;
 8015fce:	4b61      	ldr	r3, [pc, #388]	; (8016154 <Auto_Fit+0x6e4>)
 8015fd0:	2264      	movs	r2, #100	; 0x64
 8015fd2:	839a      	strh	r2, [r3, #28]
          WaveProcess();
 8015fd4:	f7ff f86a 	bl	80150ac <WaveProcess>
          Update_Proc_All();
 8015fd8:	f7fe fcf0 	bl	80149bc <Update_Proc_All>
        }
        HAL_Delay(50);
 8015fdc:	2032      	movs	r0, #50	; 0x32
 8015fde:	f002 f9d5 	bl	801838c <HAL_Delay>
      for(i=0;i<9;i++){
 8015fe2:	79fb      	ldrb	r3, [r7, #7]
 8015fe4:	3301      	adds	r3, #1
 8015fe6:	71fb      	strb	r3, [r7, #7]
 8015fe8:	79fb      	ldrb	r3, [r7, #7]
 8015fea:	2b08      	cmp	r3, #8
 8015fec:	d993      	bls.n	8015f16 <Auto_Fit+0x4a6>
 8015fee:	e054      	b.n	801609a <Auto_Fit+0x62a>
      }
    }
    else if((((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015ff0:	4b59      	ldr	r3, [pc, #356]	; (8016158 <Auto_Fit+0x6e8>)
 8015ff2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015ff6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015ffa:	4a51      	ldr	r2, [pc, #324]	; (8016140 <Auto_Fit+0x6d0>)
 8015ffc:	6811      	ldr	r1, [r2, #0]
 8015ffe:	4a51      	ldr	r2, [pc, #324]	; (8016144 <Auto_Fit+0x6d4>)
 8016000:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016004:	4610      	mov	r0, r2
 8016006:	4a50      	ldr	r2, [pc, #320]	; (8016148 <Auto_Fit+0x6d8>)
 8016008:	f9b2 2000 	ldrsh.w	r2, [r2]
 801600c:	2a00      	cmp	r2, #0
 801600e:	bf14      	ite	ne
 8016010:	2201      	movne	r2, #1
 8016012:	2200      	moveq	r2, #0
 8016014:	b2d2      	uxtb	r2, r2
 8016016:	4402      	add	r2, r0
 8016018:	0052      	lsls	r2, r2, #1
 801601a:	440a      	add	r2, r1
 801601c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016020:	0092      	lsls	r2, r2, #2
 8016022:	494a      	ldr	r1, [pc, #296]	; (801614c <Auto_Fit+0x6dc>)
 8016024:	f9b1 1000 	ldrsh.w	r1, [r1]
 8016028:	4608      	mov	r0, r1
 801602a:	4949      	ldr	r1, [pc, #292]	; (8016150 <Auto_Fit+0x6e0>)
 801602c:	5c09      	ldrb	r1, [r1, r0]
 801602e:	fb92 f2f1 	sdiv	r2, r2, r1
 8016032:	fb02 f303 	mul.w	r3, r2, r3
 8016036:	131a      	asrs	r2, r3, #12
         - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)) <10){
 8016038:	4b48      	ldr	r3, [pc, #288]	; (801615c <Auto_Fit+0x6ec>)
 801603a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801603e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8016042:	493f      	ldr	r1, [pc, #252]	; (8016140 <Auto_Fit+0x6d0>)
 8016044:	6808      	ldr	r0, [r1, #0]
 8016046:	493f      	ldr	r1, [pc, #252]	; (8016144 <Auto_Fit+0x6d4>)
 8016048:	f9b1 1000 	ldrsh.w	r1, [r1]
 801604c:	460c      	mov	r4, r1
 801604e:	493e      	ldr	r1, [pc, #248]	; (8016148 <Auto_Fit+0x6d8>)
 8016050:	f9b1 1000 	ldrsh.w	r1, [r1]
 8016054:	2900      	cmp	r1, #0
 8016056:	bf14      	ite	ne
 8016058:	2101      	movne	r1, #1
 801605a:	2100      	moveq	r1, #0
 801605c:	b2c9      	uxtb	r1, r1
 801605e:	4421      	add	r1, r4
 8016060:	0049      	lsls	r1, r1, #1
 8016062:	4401      	add	r1, r0
 8016064:	f9b1 1000 	ldrsh.w	r1, [r1]
 8016068:	0089      	lsls	r1, r1, #2
 801606a:	4838      	ldr	r0, [pc, #224]	; (801614c <Auto_Fit+0x6dc>)
 801606c:	f9b0 0000 	ldrsh.w	r0, [r0]
 8016070:	4604      	mov	r4, r0
 8016072:	4837      	ldr	r0, [pc, #220]	; (8016150 <Auto_Fit+0x6e0>)
 8016074:	5d00      	ldrb	r0, [r0, r4]
 8016076:	fb91 f1f0 	sdiv	r1, r1, r0
 801607a:	fb01 f303 	mul.w	r3, r1, r3
 801607e:	131b      	asrs	r3, r3, #12
 8016080:	1ad3      	subs	r3, r2, r3
    else if((((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8016082:	2b09      	cmp	r3, #9
 8016084:	dc09      	bgt.n	801609a <Auto_Fit+0x62a>
      //===========���ź�ʱ��ѹ��2V==================
        List[Y_RANGES].Val=7; //2v
 8016086:	4b33      	ldr	r3, [pc, #204]	; (8016154 <Auto_Fit+0x6e4>)
 8016088:	2207      	movs	r2, #7
 801608a:	809a      	strh	r2, [r3, #4]
        WaveProcess();
 801608c:	f7ff f80e 	bl	80150ac <WaveProcess>
        Update_Proc_All();
 8016090:	f7fe fc94 	bl	80149bc <Update_Proc_All>
        HAL_Delay(50);
 8016094:	2032      	movs	r0, #50	; 0x32
 8016096:	f002 f979 	bl	801838c <HAL_Delay>


    //======ʱ���Զ�ѡ��==============

    //if(!List[TRI_Ch].Val){//******Aͨ��***********
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 801609a:	4b2f      	ldr	r3, [pc, #188]	; (8016158 <Auto_Fit+0x6e8>)
 801609c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80160a0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80160a4:	4a26      	ldr	r2, [pc, #152]	; (8016140 <Auto_Fit+0x6d0>)
 80160a6:	6811      	ldr	r1, [r2, #0]
 80160a8:	4a26      	ldr	r2, [pc, #152]	; (8016144 <Auto_Fit+0x6d4>)
 80160aa:	f9b2 2000 	ldrsh.w	r2, [r2]
 80160ae:	4610      	mov	r0, r2
 80160b0:	4a25      	ldr	r2, [pc, #148]	; (8016148 <Auto_Fit+0x6d8>)
 80160b2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80160b6:	2a00      	cmp	r2, #0
 80160b8:	bf14      	ite	ne
 80160ba:	2201      	movne	r2, #1
 80160bc:	2200      	moveq	r2, #0
 80160be:	b2d2      	uxtb	r2, r2
 80160c0:	4402      	add	r2, r0
 80160c2:	0052      	lsls	r2, r2, #1
 80160c4:	440a      	add	r2, r1
 80160c6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80160ca:	0092      	lsls	r2, r2, #2
 80160cc:	491f      	ldr	r1, [pc, #124]	; (801614c <Auto_Fit+0x6dc>)
 80160ce:	f9b1 1000 	ldrsh.w	r1, [r1]
 80160d2:	4608      	mov	r0, r1
 80160d4:	491e      	ldr	r1, [pc, #120]	; (8016150 <Auto_Fit+0x6e0>)
 80160d6:	5c09      	ldrb	r1, [r1, r0]
 80160d8:	fb92 f2f1 	sdiv	r2, r2, r1
 80160dc:	fb02 f303 	mul.w	r3, r2, r3
 80160e0:	131b      	asrs	r3, r3, #12
           - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val);
 80160e2:	b29a      	uxth	r2, r3
 80160e4:	4b1d      	ldr	r3, [pc, #116]	; (801615c <Auto_Fit+0x6ec>)
 80160e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80160ea:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80160ee:	4914      	ldr	r1, [pc, #80]	; (8016140 <Auto_Fit+0x6d0>)
 80160f0:	6808      	ldr	r0, [r1, #0]
 80160f2:	4914      	ldr	r1, [pc, #80]	; (8016144 <Auto_Fit+0x6d4>)
 80160f4:	f9b1 1000 	ldrsh.w	r1, [r1]
 80160f8:	460c      	mov	r4, r1
 80160fa:	4913      	ldr	r1, [pc, #76]	; (8016148 <Auto_Fit+0x6d8>)
 80160fc:	f9b1 1000 	ldrsh.w	r1, [r1]
 8016100:	2900      	cmp	r1, #0
 8016102:	bf14      	ite	ne
 8016104:	2101      	movne	r1, #1
 8016106:	2100      	moveq	r1, #0
 8016108:	b2c9      	uxtb	r1, r1
 801610a:	4421      	add	r1, r4
 801610c:	0049      	lsls	r1, r1, #1
 801610e:	4401      	add	r1, r0
 8016110:	f9b1 1000 	ldrsh.w	r1, [r1]
 8016114:	0089      	lsls	r1, r1, #2
 8016116:	480d      	ldr	r0, [pc, #52]	; (801614c <Auto_Fit+0x6dc>)
 8016118:	f9b0 0000 	ldrsh.w	r0, [r0]
 801611c:	4604      	mov	r4, r0
 801611e:	480c      	ldr	r0, [pc, #48]	; (8016150 <Auto_Fit+0x6e0>)
 8016120:	5d00      	ldrb	r0, [r0, r4]
 8016122:	fb91 f1f0 	sdiv	r1, r1, r0
 8016126:	fb01 f303 	mul.w	r3, r1, r3
 801612a:	131b      	asrs	r3, r3, #12
 801612c:	b29b      	uxth	r3, r3
 801612e:	1ad3      	subs	r3, r2, r3
 8016130:	b29b      	uxth	r3, r3
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8016132:	803b      	strh	r3, [r7, #0]
      for(j=0;j<11;j++){
 8016134:	2300      	movs	r3, #0
 8016136:	71bb      	strb	r3, [r7, #6]
 8016138:	e06e      	b.n	8016218 <Auto_Fit+0x7a8>
 801613a:	bf00      	nop
 801613c:	2000286a 	.word	0x2000286a
 8016140:	2000057c 	.word	0x2000057c
 8016144:	20006886 	.word	0x20006886
 8016148:	20002862 	.word	0x20002862
 801614c:	2000284a 	.word	0x2000284a
 8016150:	20000560 	.word	0x20000560
 8016154:	20000298 	.word	0x20000298
 8016158:	20002856 	.word	0x20002856
 801615c:	20002868 	.word	0x20002868
        WaveProcess();
 8016160:	f7fe ffa4 	bl	80150ac <WaveProcess>
        if((k==0)&&(Edge < 60)&&(List[TIM_BASE].Val >5)){
 8016164:	797b      	ldrb	r3, [r7, #5]
 8016166:	2b00      	cmp	r3, #0
 8016168:	d114      	bne.n	8016194 <Auto_Fit+0x724>
 801616a:	4b38      	ldr	r3, [pc, #224]	; (801624c <Auto_Fit+0x7dc>)
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	2b3b      	cmp	r3, #59	; 0x3b
 8016170:	dc10      	bgt.n	8016194 <Auto_Fit+0x724>
 8016172:	4b37      	ldr	r3, [pc, #220]	; (8016250 <Auto_Fit+0x7e0>)
 8016174:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016178:	2b05      	cmp	r3, #5
 801617a:	dd0b      	ble.n	8016194 <Auto_Fit+0x724>
          Set_Base(5);                           // Ӳ������ɨ��ʱ����λ
 801617c:	2005      	movs	r0, #5
 801617e:	f7f6 fa1d 	bl	800c5bc <Set_Base>
          List[TIM_BASE].Val = 5;
 8016182:	4b33      	ldr	r3, [pc, #204]	; (8016250 <Auto_Fit+0x7e0>)
 8016184:	2205      	movs	r2, #5
 8016186:	879a      	strh	r2, [r3, #60]	; 0x3c
          WaveProcess();
 8016188:	f7fe ff90 	bl	80150ac <WaveProcess>
          Update_Proc_All();
 801618c:	f7fe fc16 	bl	80149bc <Update_Proc_All>
          k=1;
 8016190:	2301      	movs	r3, #1
 8016192:	717b      	strb	r3, [r7, #5]
        }
        if((Edge > 180)&&(List[TIM_BASE].Val > 2)){
 8016194:	4b2d      	ldr	r3, [pc, #180]	; (801624c <Auto_Fit+0x7dc>)
 8016196:	681b      	ldr	r3, [r3, #0]
 8016198:	2bb4      	cmp	r3, #180	; 0xb4
 801619a:	dd1b      	ble.n	80161d4 <Auto_Fit+0x764>
 801619c:	4b2c      	ldr	r3, [pc, #176]	; (8016250 <Auto_Fit+0x7e0>)
 801619e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80161a2:	2b02      	cmp	r3, #2
 80161a4:	dd16      	ble.n	80161d4 <Auto_Fit+0x764>
          List[TIM_BASE].Val--;
 80161a6:	4b2a      	ldr	r3, [pc, #168]	; (8016250 <Auto_Fit+0x7e0>)
 80161a8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80161ac:	b29b      	uxth	r3, r3
 80161ae:	3b01      	subs	r3, #1
 80161b0:	b29b      	uxth	r3, r3
 80161b2:	b21a      	sxth	r2, r3
 80161b4:	4b26      	ldr	r3, [pc, #152]	; (8016250 <Auto_Fit+0x7e0>)
 80161b6:	879a      	strh	r2, [r3, #60]	; 0x3c
          Set_Base(List[TIM_BASE].Val);   // Ӳ������ɨ��ʱ����λ
 80161b8:	4b25      	ldr	r3, [pc, #148]	; (8016250 <Auto_Fit+0x7e0>)
 80161ba:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80161be:	4618      	mov	r0, r3
 80161c0:	f7f6 f9fc 	bl	800c5bc <Set_Base>
          WaveProcess();
 80161c4:	f7fe ff72 	bl	80150ac <WaveProcess>
                 Update_Proc_All();
 80161c8:	f7fe fbf8 	bl	80149bc <Update_Proc_All>
          HAL_Delay(50);
 80161cc:	2032      	movs	r0, #50	; 0x32
 80161ce:	f002 f8dd 	bl	801838c <HAL_Delay>
 80161d2:	e01e      	b.n	8016212 <Auto_Fit+0x7a2>
        }
        else if((Edge < 80)&&(List[TIM_BASE].Val< 11)){
 80161d4:	4b1d      	ldr	r3, [pc, #116]	; (801624c <Auto_Fit+0x7dc>)
 80161d6:	681b      	ldr	r3, [r3, #0]
 80161d8:	2b4f      	cmp	r3, #79	; 0x4f
 80161da:	dc1a      	bgt.n	8016212 <Auto_Fit+0x7a2>
 80161dc:	4b1c      	ldr	r3, [pc, #112]	; (8016250 <Auto_Fit+0x7e0>)
 80161de:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80161e2:	2b0a      	cmp	r3, #10
 80161e4:	dc15      	bgt.n	8016212 <Auto_Fit+0x7a2>
          List[TIM_BASE].Val++;
 80161e6:	4b1a      	ldr	r3, [pc, #104]	; (8016250 <Auto_Fit+0x7e0>)
 80161e8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80161ec:	b29b      	uxth	r3, r3
 80161ee:	3301      	adds	r3, #1
 80161f0:	b29b      	uxth	r3, r3
 80161f2:	b21a      	sxth	r2, r3
 80161f4:	4b16      	ldr	r3, [pc, #88]	; (8016250 <Auto_Fit+0x7e0>)
 80161f6:	879a      	strh	r2, [r3, #60]	; 0x3c
          Set_Base(List[TIM_BASE].Val);   // Ӳ������ɨ��ʱ����λ
 80161f8:	4b15      	ldr	r3, [pc, #84]	; (8016250 <Auto_Fit+0x7e0>)
 80161fa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80161fe:	4618      	mov	r0, r3
 8016200:	f7f6 f9dc 	bl	800c5bc <Set_Base>
          WaveProcess();
 8016204:	f7fe ff52 	bl	80150ac <WaveProcess>
                 Update_Proc_All();
 8016208:	f7fe fbd8 	bl	80149bc <Update_Proc_All>
          HAL_Delay(50);
 801620c:	2032      	movs	r0, #50	; 0x32
 801620e:	f002 f8bd 	bl	801838c <HAL_Delay>
      for(j=0;j<11;j++){
 8016212:	79bb      	ldrb	r3, [r7, #6]
 8016214:	3301      	adds	r3, #1
 8016216:	71bb      	strb	r3, [r7, #6]
 8016218:	79bb      	ldrb	r3, [r7, #6]
 801621a:	2b0a      	cmp	r3, #10
 801621c:	d9a0      	bls.n	8016160 <Auto_Fit+0x6f0>
        }
      }

      if(Tmp1 < 20){
 801621e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8016222:	2b13      	cmp	r3, #19
 8016224:	dc0b      	bgt.n	801623e <Auto_Fit+0x7ce>
        List[TIM_BASE].Val=5; //50us
 8016226:	4b0a      	ldr	r3, [pc, #40]	; (8016250 <Auto_Fit+0x7e0>)
 8016228:	2205      	movs	r2, #5
 801622a:	879a      	strh	r2, [r3, #60]	; 0x3c
        Set_Base(List[TIM_BASE].Val);   // Ӳ������ɨ��ʱ����λ
 801622c:	4b08      	ldr	r3, [pc, #32]	; (8016250 <Auto_Fit+0x7e0>)
 801622e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016232:	4618      	mov	r0, r3
 8016234:	f7f6 f9c2 	bl	800c5bc <Set_Base>
        HAL_Delay(50);
 8016238:	2032      	movs	r0, #50	; 0x32
 801623a:	f002 f8a7 	bl	801838c <HAL_Delay>
      }
       Update_Proc_All();
 801623e:	f7fe fbbd 	bl	80149bc <Update_Proc_All>
  }
}
 8016242:	bf00      	nop
 8016244:	370c      	adds	r7, #12
 8016246:	46bd      	mov	sp, r7
 8016248:	bd90      	pop	{r4, r7, pc}
 801624a:	bf00      	nop
 801624c:	20002850 	.word	0x20002850
 8016250:	20000298 	.word	0x20000298

08016254 <Init_Touch>:

unsigned char val[2]; //input buffer

// initialize touch screen
void Init_Touch(void)
{
 8016254:	b580      	push	{r7, lr}
 8016256:	af00      	add	r7, sp, #0
	Touch_SPI();
 8016258:	f000 f810 	bl	801627c <Touch_SPI>
	HAL_GPIO_WritePin( TpCs_GPIO_Port, TpCs_Pin, GPIO_PIN_RESET);
 801625c:	2200      	movs	r2, #0
 801625e:	2140      	movs	r1, #64	; 0x40
 8016260:	4805      	ldr	r0, [pc, #20]	; (8016278 <Init_Touch+0x24>)
 8016262:	f003 fc71 	bl	8019b48 <HAL_GPIO_WritePin>
// not needed yet
	HAL_GPIO_WritePin( TpCs_GPIO_Port, TpCs_Pin, GPIO_PIN_SET);
 8016266:	2201      	movs	r2, #1
 8016268:	2140      	movs	r1, #64	; 0x40
 801626a:	4803      	ldr	r0, [pc, #12]	; (8016278 <Init_Touch+0x24>)
 801626c:	f003 fc6c 	bl	8019b48 <HAL_GPIO_WritePin>
	LCD_SPI();
 8016270:	f000 f814 	bl	801629c <LCD_SPI>
}
 8016274:	bf00      	nop
 8016276:	bd80      	pop	{r7, pc}
 8016278:	40020400 	.word	0x40020400

0801627c <Touch_SPI>:

// set SPI for touch controller
void Touch_SPI(void)
{
 801627c:	b580      	push	{r7, lr}
 801627e:	af00      	add	r7, sp, #0
//	HAL_SPI_DeInit(&hspi3);  switch on the fly
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8016280:	4b05      	ldr	r3, [pc, #20]	; (8016298 <Touch_SPI+0x1c>)
 8016282:	2200      	movs	r2, #0
 8016284:	60da      	str	r2, [r3, #12]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16; //slow clock for touch controller
 8016286:	4b04      	ldr	r3, [pc, #16]	; (8016298 <Touch_SPI+0x1c>)
 8016288:	2218      	movs	r2, #24
 801628a:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi3);
 801628c:	4802      	ldr	r0, [pc, #8]	; (8016298 <Touch_SPI+0x1c>)
 801628e:	f005 fed7 	bl	801c040 <HAL_SPI_Init>
}
 8016292:	bf00      	nop
 8016294:	bd80      	pop	{r7, pc}
 8016296:	bf00      	nop
 8016298:	20006a20 	.word	0x20006a20

0801629c <LCD_SPI>:

// set SPI for LCD display
void LCD_SPI(void)
{
 801629c:	b580      	push	{r7, lr}
 801629e:	af00      	add	r7, sp, #0
//	HAL_SPI_DeInit(&hspi3); switch on fly
	hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80162a0:	4b05      	ldr	r3, [pc, #20]	; (80162b8 <LCD_SPI+0x1c>)
 80162a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80162a6:	60da      	str	r2, [r3, #12]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80162a8:	4b03      	ldr	r3, [pc, #12]	; (80162b8 <LCD_SPI+0x1c>)
 80162aa:	2210      	movs	r2, #16
 80162ac:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi3);
 80162ae:	4802      	ldr	r0, [pc, #8]	; (80162b8 <LCD_SPI+0x1c>)
 80162b0:	f005 fec6 	bl	801c040 <HAL_SPI_Init>
}
 80162b4:	bf00      	nop
 80162b6:	bd80      	pop	{r7, pc}
 80162b8:	20006a20 	.word	0x20006a20

080162bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80162bc:	b580      	push	{r7, lr}
 80162be:	b082      	sub	sp, #8
 80162c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  short i;
  char SAVE_FLAG = 0;
 80162c2:	2300      	movs	r3, #0
 80162c4:	717b      	strb	r3, [r7, #5]
  char Pop_Num = 0;
 80162c6:	2300      	movs	r3, #0
 80162c8:	713b      	strb	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80162ca:	f001 ffed 	bl	80182a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80162ce:	f001 f81d 	bl	801730c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80162d2:	f001 fbc7 	bl	8017a64 <MX_GPIO_Init>
  MX_DMA_Init();
 80162d6:	f001 fb87 	bl	80179e8 <MX_DMA_Init>
  MX_ADC1_Init();
 80162da:	f001 f88b 	bl	80173f4 <MX_ADC1_Init>
  MX_ADC2_Init();
 80162de:	f001 f8db 	bl	8017498 <MX_ADC2_Init>
  MX_DAC_Init();
 80162e2:	f001 f92b 	bl	801753c <MX_DAC_Init>
  MX_SPI2_Init();
 80162e6:	f001 f967 	bl	80175b8 <MX_SPI2_Init>
  MX_SPI3_Init();
 80162ea:	f001 f99b 	bl	8017624 <MX_SPI3_Init>
  MX_TIM1_Init();
 80162ee:	f001 f9d1 	bl	8017694 <MX_TIM1_Init>
  MX_TIM3_Init();
 80162f2:	f001 fa45 	bl	8017780 <MX_TIM3_Init>
  MX_TIM5_Init();
 80162f6:	f001 faa3 	bl	8017840 <MX_TIM5_Init>
  MX_USB_DEVICE_Init();
 80162fa:	f00b fecf 	bl	802209c <MX_USB_DEVICE_Init>
  MX_TIM7_Init();
 80162fe:	f001 fb2d 	bl	801795c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  Init_LCD();
 8016302:	f7fb fd9f 	bl	8011e44 <Init_LCD>
  Init_Touch();
 8016306:	f7ff ffa5 	bl	8016254 <Init_Touch>

  SetColor(BLK, WHT);
 801630a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801630e:	2000      	movs	r0, #0
 8016310:	f7f7 fc8c 	bl	800dc2c <SetColor>

  DispStr8x14(8, 90, PRN, "         Oscilloscope              ");
 8016314:	4bb3      	ldr	r3, [pc, #716]	; (80165e4 <main+0x328>)
 8016316:	2200      	movs	r2, #0
 8016318:	215a      	movs	r1, #90	; 0x5a
 801631a:	2008      	movs	r0, #8
 801631c:	f7f7 fc2e 	bl	800db7c <DispStr8x14>
  DispStr8x14(8+22*8, 90, PRN, APP_VERSION);
 8016320:	4bb1      	ldr	r3, [pc, #708]	; (80165e8 <main+0x32c>)
 8016322:	2200      	movs	r2, #0
 8016324:	215a      	movs	r1, #90	; 0x5a
 8016326:	20b8      	movs	r0, #184	; 0xb8
 8016328:	f7f7 fc28 	bl	800db7c <DispStr8x14>
  DispStr8x14(8, 70, PRN, "        System Initializing...       ");
 801632c:	4baf      	ldr	r3, [pc, #700]	; (80165ec <main+0x330>)
 801632e:	2200      	movs	r2, #0
 8016330:	2146      	movs	r1, #70	; 0x46
 8016332:	2008      	movs	r0, #8
 8016334:	f7f7 fc22 	bl	800db7c <DispStr8x14>

  HAL_Delay(1000);
 8016338:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801633c:	f002 f826 	bl	801838c <HAL_Delay>

//=============================check callibration׼===========================
  Read_CalFlag();
 8016340:	f7fa ffe8 	bl	8011314 <Read_CalFlag>

  if(Cal_Flag == 1)
 8016344:	4baa      	ldr	r3, [pc, #680]	; (80165f0 <main+0x334>)
 8016346:	781b      	ldrb	r3, [r3, #0]
 8016348:	2b01      	cmp	r3, #1
 801634a:	d10f      	bne.n	801636c <main+0xb0>
  {
	  Cal_Flag = 0;
 801634c:	4ba8      	ldr	r3, [pc, #672]	; (80165f0 <main+0x334>)
 801634e:	2200      	movs	r2, #0
 8016350:	701a      	strb	r2, [r3, #0]
	  SetColor(BLK, WHT);
 8016352:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016356:	2000      	movs	r0, #0
 8016358:	f7f7 fc68 	bl	800dc2c <SetColor>
	  Zero_Align();                              //set zero
 801635c:	f7fe fdb0 	bl	8014ec0 <Zero_Align>
	  Restore();                                 //restore list
 8016360:	f7fb f9e2 	bl	8011728 <Restore>
	  Save_Parameter();                          //save list
 8016364:	f7fa fffe 	bl	8011364 <Save_Parameter>
	  Save_Kpg();
 8016368:	f7fb f926 	bl	80115b8 <Save_Kpg>
  }
  Read_Kpg();
 801636c:	f7fb f99a 	bl	80116a4 <Read_Kpg>
  Read_Parameter();
 8016370:	f7fb f894 	bl	801149c <Read_Parameter>
  File_Num();
 8016374:	f7f9 fcda 	bl	800fd2c <File_Num>
  memcpy(Data, DEMO, 310);
 8016378:	f44f 729b 	mov.w	r2, #310	; 0x136
 801637c:	499d      	ldr	r1, [pc, #628]	; (80165f4 <main+0x338>)
 801637e:	489e      	ldr	r0, [pc, #632]	; (80165f8 <main+0x33c>)
 8016380:	f00c fc2a 	bl	8022bd8 <memcpy>

  LCD_ClrScrn(GRY);
 8016384:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8016388:	f7fb fe72 	bl	8012070 <LCD_ClrScrn>
  Update_Title();
 801638c:	f7fc f812 	bl	80123b4 <Update_Title>

  List[SMPL_DPTH].Flg |= UPD;
 8016390:	4b9a      	ldr	r3, [pc, #616]	; (80165fc <main+0x340>)
 8016392:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8016396:	f043 0320 	orr.w	r3, r3, #32
 801639a:	b2da      	uxtb	r2, r3
 801639c:	4b97      	ldr	r3, [pc, #604]	; (80165fc <main+0x340>)
 801639e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

  StdBy_Time = List[STANDBY].Val * MIN_UNIT;
 80163a2:	4b96      	ldr	r3, [pc, #600]	; (80165fc <main+0x340>)
 80163a4:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 80163a8:	b29b      	uxth	r3, r3
 80163aa:	461a      	mov	r2, r3
 80163ac:	0112      	lsls	r2, r2, #4
 80163ae:	1ad3      	subs	r3, r2, r3
 80163b0:	009b      	lsls	r3, r3, #2
 80163b2:	b29b      	uxth	r3, r3
 80163b4:	b21a      	sxth	r2, r3
 80163b6:	4b92      	ldr	r3, [pc, #584]	; (8016600 <main+0x344>)
 80163b8:	801a      	strh	r2, [r3, #0]

  // Start timer
  HAL_TIM_Base_Start_IT(&htim3);
 80163ba:	4892      	ldr	r0, [pc, #584]	; (8016604 <main+0x348>)
 80163bc:	f006 fd64 	bl	801ce88 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    if((List[STANDBY].Val != 0)&&(StdBy_Time == 0))
 80163c0:	4b8e      	ldr	r3, [pc, #568]	; (80165fc <main+0x340>)
 80163c2:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d007      	beq.n	80163da <main+0x11e>
 80163ca:	4b8d      	ldr	r3, [pc, #564]	; (8016600 <main+0x344>)
 80163cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d102      	bne.n	80163da <main+0x11e>
	    {
	      StdBy_Flag = 1;
 80163d4:	4b8c      	ldr	r3, [pc, #560]	; (8016608 <main+0x34c>)
 80163d6:	2201      	movs	r2, #1
 80163d8:	701a      	strb	r2, [r3, #0]
	    }

	    Update_Detail();
 80163da:	f7fc ff57 	bl	801328c <Update_Detail>
	    Update_Blink();
 80163de:	f7fc f83d 	bl	801245c <Update_Blink>
	    WaveProcess();
 80163e2:	f7fe fe63 	bl	80150ac <WaveProcess>
	    DrawWindow(WaveBuf, ParamTab);
 80163e6:	4989      	ldr	r1, [pc, #548]	; (801660c <main+0x350>)
 80163e8:	4889      	ldr	r0, [pc, #548]	; (8016610 <main+0x354>)
 80163ea:	f7f7 f9a3 	bl	800d734 <DrawWindow>

	   if(TIM_BASE_Val!=0)
 80163ee:	4b89      	ldr	r3, [pc, #548]	; (8016614 <main+0x358>)
 80163f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d01c      	beq.n	8016432 <main+0x176>
	    {
	      List[TIM_BASE].Val=TIM_BASE_Val;
 80163f8:	4b86      	ldr	r3, [pc, #536]	; (8016614 <main+0x358>)
 80163fa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80163fe:	4b7f      	ldr	r3, [pc, #508]	; (80165fc <main+0x340>)
 8016400:	879a      	strh	r2, [r3, #60]	; 0x3c
	      List[TIM_BASE].Flg |= UPD;
 8016402:	4b7e      	ldr	r3, [pc, #504]	; (80165fc <main+0x340>)
 8016404:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016408:	f043 0320 	orr.w	r3, r3, #32
 801640c:	b2da      	uxtb	r2, r3
 801640e:	4b7b      	ldr	r3, [pc, #492]	; (80165fc <main+0x340>)
 8016410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	      TIM_BASE_Val=Current;
 8016414:	4b80      	ldr	r3, [pc, #512]	; (8016618 <main+0x35c>)
 8016416:	f9b3 2000 	ldrsh.w	r2, [r3]
 801641a:	4b7e      	ldr	r3, [pc, #504]	; (8016614 <main+0x358>)
 801641c:	801a      	strh	r2, [r3, #0]
	      Update_Title();
 801641e:	f7fb ffc9 	bl	80123b4 <Update_Title>
	      Current=TIM_BASE_Val;
 8016422:	4b7c      	ldr	r3, [pc, #496]	; (8016614 <main+0x358>)
 8016424:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016428:	4b7b      	ldr	r3, [pc, #492]	; (8016618 <main+0x35c>)
 801642a:	801a      	strh	r2, [r3, #0]
	      TIM_BASE_Val=0;
 801642c:	4b79      	ldr	r3, [pc, #484]	; (8016614 <main+0x358>)
 801642e:	2200      	movs	r2, #0
 8016430:	801a      	strh	r2, [r3, #0]
	    }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    if(Key_Buffer != 0)
 8016432:	4b7a      	ldr	r3, [pc, #488]	; (801661c <main+0x360>)
 8016434:	781b      	ldrb	r3, [r3, #0]
 8016436:	b2db      	uxtb	r3, r3
 8016438:	2b00      	cmp	r3, #0
 801643a:	d0c1      	beq.n	80163c0 <main+0x104>
	    {
	      StdBy_Flag = 0;
 801643c:	4b72      	ldr	r3, [pc, #456]	; (8016608 <main+0x34c>)
 801643e:	2200      	movs	r2, #0
 8016440:	701a      	strb	r2, [r3, #0]
	      PopupCnt = 10;                  // �ް���ʱ�˵���ά����ʾ 10��
 8016442:	4b77      	ldr	r3, [pc, #476]	; (8016620 <main+0x364>)
 8016444:	220a      	movs	r2, #10
 8016446:	801a      	strh	r2, [r3, #0]
	      List[MenuNow[Current]].Flg |= UPD;
 8016448:	4b73      	ldr	r3, [pc, #460]	; (8016618 <main+0x35c>)
 801644a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801644e:	461a      	mov	r2, r3
 8016450:	4b74      	ldr	r3, [pc, #464]	; (8016624 <main+0x368>)
 8016452:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016456:	4a69      	ldr	r2, [pc, #420]	; (80165fc <main+0x340>)
 8016458:	00db      	lsls	r3, r3, #3
 801645a:	4413      	add	r3, r2
 801645c:	799b      	ldrb	r3, [r3, #6]
 801645e:	4a6e      	ldr	r2, [pc, #440]	; (8016618 <main+0x35c>)
 8016460:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016464:	4611      	mov	r1, r2
 8016466:	4a6f      	ldr	r2, [pc, #444]	; (8016624 <main+0x368>)
 8016468:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 801646c:	4610      	mov	r0, r2
 801646e:	f043 0320 	orr.w	r3, r3, #32
 8016472:	b2d9      	uxtb	r1, r3
 8016474:	4a61      	ldr	r2, [pc, #388]	; (80165fc <main+0x340>)
 8016476:	00c3      	lsls	r3, r0, #3
 8016478:	4413      	add	r3, r2
 801647a:	460a      	mov	r2, r1
 801647c:	719a      	strb	r2, [r3, #6]

	      switch (Key_Buffer)
 801647e:	4b67      	ldr	r3, [pc, #412]	; (801661c <main+0x360>)
 8016480:	781b      	ldrb	r3, [r3, #0]
 8016482:	b2db      	uxtb	r3, r3
 8016484:	3b01      	subs	r3, #1
 8016486:	2b09      	cmp	r3, #9
 8016488:	f200 86fc 	bhi.w	8017284 <main+0xfc8>
 801648c:	a201      	add	r2, pc, #4	; (adr r2, 8016494 <main+0x1d8>)
 801648e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016492:	bf00      	nop
 8016494:	08016505 	.word	0x08016505
 8016498:	0801680f 	.word	0x0801680f
 801649c:	08016959 	.word	0x08016959
 80164a0:	08016a07 	.word	0x08016a07
 80164a4:	08016aa3 	.word	0x08016aa3
 80164a8:	08016e61 	.word	0x08016e61
 80164ac:	08017285 	.word	0x08017285
 80164b0:	080164df 	.word	0x080164df
 80164b4:	080164bd 	.word	0x080164bd
 80164b8:	080167fb 	.word	0x080167fb
	      {
	     case KEYCODE_MEM:
	         i = Save_Bmp(List[SAVE_BMP].Val);
 80164bc:	4b4f      	ldr	r3, [pc, #316]	; (80165fc <main+0x340>)
 80164be:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 80164c2:	4618      	mov	r0, r3
 80164c4:	f7f9 ff54 	bl	8010370 <Save_Bmp>
 80164c8:	4603      	mov	r3, r0
 80164ca:	80fb      	strh	r3, [r7, #6]
	         DispFileInfo(i);
 80164cc:	88fb      	ldrh	r3, [r7, #6]
 80164ce:	b2db      	uxtb	r3, r3
 80164d0:	4618      	mov	r0, r3
 80164d2:	f7fe f9fd 	bl	80148d0 <DispFileInfo>
	         DispBMPInfo();
 80164d6:	f7fe fa2b 	bl	8014930 <DispBMPInfo>
	        break;
 80164da:	f000 bed3 	b.w	8017284 <main+0xfc8>

	     case KEYCODE_ACT:
	       SAVE_FLAG=0;
 80164de:	2300      	movs	r3, #0
 80164e0:	717b      	strb	r3, [r7, #5]
	       if(PopType & DAILOG_POP) Close_Pop();
 80164e2:	4b51      	ldr	r3, [pc, #324]	; (8016628 <main+0x36c>)
 80164e4:	781b      	ldrb	r3, [r3, #0]
 80164e6:	f003 0304 	and.w	r3, r3, #4
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d003      	beq.n	80164f6 <main+0x23a>
 80164ee:	f7f8 f921 	bl	800e734 <Close_Pop>
	       else {
	         Dialog_Pop("Save All ParamTab?");
	         Pop_Num = 1;
	       }
	       break;
 80164f2:	f000 bec7 	b.w	8017284 <main+0xfc8>
	         Dialog_Pop("Save All ParamTab?");
 80164f6:	484d      	ldr	r0, [pc, #308]	; (801662c <main+0x370>)
 80164f8:	f7f8 f948 	bl	800e78c <Dialog_Pop>
	         Pop_Num = 1;
 80164fc:	2301      	movs	r3, #1
 80164fe:	713b      	strb	r3, [r7, #4]
	       break;
 8016500:	f000 bec0 	b.w	8017284 <main+0xfc8>

	     case KEYCODE_PLAY:
	       if((Current == ST)&&(Cal_Flag==0))
 8016504:	4b44      	ldr	r3, [pc, #272]	; (8016618 <main+0x35c>)
 8016506:	f9b3 3000 	ldrsh.w	r3, [r3]
 801650a:	2b07      	cmp	r3, #7
 801650c:	d151      	bne.n	80165b2 <main+0x2f6>
 801650e:	4b38      	ldr	r3, [pc, #224]	; (80165f0 <main+0x334>)
 8016510:	781b      	ldrb	r3, [r3, #0]
 8016512:	2b00      	cmp	r3, #0
 8016514:	d14d      	bne.n	80165b2 <main+0x2f6>
	       {
	         if(PopType & DAILOG_POP){
 8016516:	4b44      	ldr	r3, [pc, #272]	; (8016628 <main+0x36c>)
 8016518:	781b      	ldrb	r3, [r3, #0]
 801651a:	f003 0304 	and.w	r3, r3, #4
 801651e:	2b00      	cmp	r3, #0
 8016520:	d00e      	beq.n	8016540 <main+0x284>
	           if(Pop_Num == 1){
 8016522:	793b      	ldrb	r3, [r7, #4]
 8016524:	2b01      	cmp	r3, #1
 8016526:	d105      	bne.n	8016534 <main+0x278>
	             Save_Parameter();
 8016528:	f7fa ff1c 	bl	8011364 <Save_Parameter>
	             Close_Pop();
 801652c:	f7f8 f902 	bl	800e734 <Close_Pop>
	           Zero_Align();
	           Update_Proc_All();
	           Close_Pop();
	           CalSave_Pop("Save Cal ParamTab?");
	         }
	         break;
 8016530:	f000 be99 	b.w	8017266 <main+0xfaa>
	             Close_Pop();
 8016534:	f7f8 f8fe 	bl	800e734 <Close_Pop>
	             List_Pop();
 8016538:	f7f8 f912 	bl	800e760 <List_Pop>
	         break;
 801653c:	f000 be93 	b.w	8017266 <main+0xfaa>
	         else if((PopType & LIST_POP) && (MenuNow[ST]==RESTORE )) {
 8016540:	4b39      	ldr	r3, [pc, #228]	; (8016628 <main+0x36c>)
 8016542:	781b      	ldrb	r3, [r3, #0]
 8016544:	f003 0302 	and.w	r3, r3, #2
 8016548:	2b00      	cmp	r3, #0
 801654a:	d00e      	beq.n	801656a <main+0x2ae>
 801654c:	4b35      	ldr	r3, [pc, #212]	; (8016624 <main+0x368>)
 801654e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8016552:	2b28      	cmp	r3, #40	; 0x28
 8016554:	d109      	bne.n	801656a <main+0x2ae>
	           Restore_CalPar();
 8016556:	f7fb f951 	bl	80117fc <Restore_CalPar>
	           Dialog_Pop("Save All ParamTab?");
 801655a:	4834      	ldr	r0, [pc, #208]	; (801662c <main+0x370>)
 801655c:	f7f8 f916 	bl	800e78c <Dialog_Pop>
	           Cal_Flag = 1;
 8016560:	4b23      	ldr	r3, [pc, #140]	; (80165f0 <main+0x334>)
 8016562:	2201      	movs	r2, #1
 8016564:	701a      	strb	r2, [r3, #0]
	         break;
 8016566:	f000 be7e 	b.w	8017266 <main+0xfaa>
	         else if((PopType & LIST_POP) && (MenuNow[ST]==AUTO_CAL )) {
 801656a:	4b2f      	ldr	r3, [pc, #188]	; (8016628 <main+0x36c>)
 801656c:	781b      	ldrb	r3, [r3, #0]
 801656e:	f003 0302 	and.w	r3, r3, #2
 8016572:	2b00      	cmp	r3, #0
 8016574:	f000 8677 	beq.w	8017266 <main+0xfaa>
 8016578:	4b2a      	ldr	r3, [pc, #168]	; (8016624 <main+0x368>)
 801657a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801657e:	2b27      	cmp	r3, #39	; 0x27
 8016580:	f040 8671 	bne.w	8017266 <main+0xfaa>
	           Close_Pop();
 8016584:	f7f8 f8d6 	bl	800e734 <Close_Pop>
	           Calibrate_Pop("Waiting for Calibration...");
 8016588:	4829      	ldr	r0, [pc, #164]	; (8016630 <main+0x374>)
 801658a:	f7f8 f965 	bl	800e858 <Calibrate_Pop>
	           Cal_Flag = 1;
 801658e:	4b18      	ldr	r3, [pc, #96]	; (80165f0 <main+0x334>)
 8016590:	2201      	movs	r2, #1
 8016592:	701a      	strb	r2, [r3, #0]
	           DrawWindow(WaveBuf, ParamTab);
 8016594:	491d      	ldr	r1, [pc, #116]	; (801660c <main+0x350>)
 8016596:	481e      	ldr	r0, [pc, #120]	; (8016610 <main+0x354>)
 8016598:	f7f7 f8cc 	bl	800d734 <DrawWindow>
	           Zero_Align();
 801659c:	f7fe fc90 	bl	8014ec0 <Zero_Align>
	           Update_Proc_All();
 80165a0:	f7fe fa0c 	bl	80149bc <Update_Proc_All>
	           Close_Pop();
 80165a4:	f7f8 f8c6 	bl	800e734 <Close_Pop>
	           CalSave_Pop("Save Cal ParamTab?");
 80165a8:	4822      	ldr	r0, [pc, #136]	; (8016634 <main+0x378>)
 80165aa:	f7f8 f98b 	bl	800e8c4 <CalSave_Pop>
	         break;
 80165ae:	f000 be5a 	b.w	8017266 <main+0xfaa>
	       }
	       else if((Current == ST)&&(Cal_Flag==1)){
 80165b2:	4b19      	ldr	r3, [pc, #100]	; (8016618 <main+0x35c>)
 80165b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80165b8:	2b07      	cmp	r3, #7
 80165ba:	d13d      	bne.n	8016638 <main+0x37c>
 80165bc:	4b0c      	ldr	r3, [pc, #48]	; (80165f0 <main+0x334>)
 80165be:	781b      	ldrb	r3, [r3, #0]
 80165c0:	2b01      	cmp	r3, #1
 80165c2:	d139      	bne.n	8016638 <main+0x37c>
	         if(PopType & DAILOG_POP){
 80165c4:	4b18      	ldr	r3, [pc, #96]	; (8016628 <main+0x36c>)
 80165c6:	781b      	ldrb	r3, [r3, #0]
 80165c8:	f003 0304 	and.w	r3, r3, #4
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	f000 864c 	beq.w	801726a <main+0xfae>
	           Save_Kpg();
 80165d2:	f7fa fff1 	bl	80115b8 <Save_Kpg>
	           Close_Pop();
 80165d6:	f7f8 f8ad 	bl	800e734 <Close_Pop>
	           Cal_Flag = 0;
 80165da:	4b05      	ldr	r3, [pc, #20]	; (80165f0 <main+0x334>)
 80165dc:	2200      	movs	r2, #0
 80165de:	701a      	strb	r2, [r3, #0]
	         }
	         break;
 80165e0:	f000 be43 	b.w	801726a <main+0xfae>
 80165e4:	080009f4 	.word	0x080009f4
 80165e8:	20000580 	.word	0x20000580
 80165ec:	08000a18 	.word	0x08000a18
 80165f0:	200001b4 	.word	0x200001b4
 80165f4:	08000b58 	.word	0x08000b58
 80165f8:	20000008 	.word	0x20000008
 80165fc:	20000298 	.word	0x20000298
 8016600:	2000079c 	.word	0x2000079c
 8016604:	200069d8 	.word	0x200069d8
 8016608:	200007a2 	.word	0x200007a2
 801660c:	20000140 	.word	0x20000140
 8016610:	20000c08 	.word	0x20000c08
 8016614:	20002814 	.word	0x20002814
 8016618:	2000079e 	.word	0x2000079e
 801661c:	2000077d 	.word	0x2000077d
 8016620:	20000000 	.word	0x20000000
 8016624:	20000538 	.word	0x20000538
 8016628:	2000078e 	.word	0x2000078e
 801662c:	08000a40 	.word	0x08000a40
 8016630:	08000a54 	.word	0x08000a54
 8016634:	08000a70 	.word	0x08000a70
	       }

	       if ((Current == FN)&&(PopType & LIST_POP)){
 8016638:	4bbc      	ldr	r3, [pc, #752]	; (801692c <main+0x670>)
 801663a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801663e:	2b05      	cmp	r3, #5
 8016640:	d177      	bne.n	8016732 <main+0x476>
 8016642:	4bbb      	ldr	r3, [pc, #748]	; (8016930 <main+0x674>)
 8016644:	781b      	ldrb	r3, [r3, #0]
 8016646:	f003 0302 	and.w	r3, r3, #2
 801664a:	2b00      	cmp	r3, #0
 801664c:	d071      	beq.n	8016732 <main+0x476>
	         i = 0;
 801664e:	2300      	movs	r3, #0
 8016650:	80fb      	strh	r3, [r7, #6]
	         {
	           if(SAVE_FLAG==KEYCODE_MEM)Close_Pop();
 8016652:	797b      	ldrb	r3, [r7, #5]
 8016654:	2b09      	cmp	r3, #9
 8016656:	d101      	bne.n	801665c <main+0x3a0>
 8016658:	f7f8 f86c 	bl	800e734 <Close_Pop>
	           if(MenuNow[FN] == SAVE_BMP) i = Save_Bmp(List[SAVE_BMP].Val);
 801665c:	4bb5      	ldr	r3, [pc, #724]	; (8016934 <main+0x678>)
 801665e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016662:	2b1d      	cmp	r3, #29
 8016664:	d107      	bne.n	8016676 <main+0x3ba>
 8016666:	4bb4      	ldr	r3, [pc, #720]	; (8016938 <main+0x67c>)
 8016668:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 801666c:	4618      	mov	r0, r3
 801666e:	f7f9 fe7f 	bl	8010370 <Save_Bmp>
 8016672:	4603      	mov	r3, r0
 8016674:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_DAT) i = Save_Dat(List[SAVE_DAT].Val);
 8016676:	4baf      	ldr	r3, [pc, #700]	; (8016934 <main+0x678>)
 8016678:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801667c:	2b1e      	cmp	r3, #30
 801667e:	d107      	bne.n	8016690 <main+0x3d4>
 8016680:	4bad      	ldr	r3, [pc, #692]	; (8016938 <main+0x67c>)
 8016682:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 8016686:	4618      	mov	r0, r3
 8016688:	f7f9 fd32 	bl	80100f0 <Save_Dat>
 801668c:	4603      	mov	r3, r0
 801668e:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_BUF) i = Save_Buf(List[SAVE_BUF].Val);
 8016690:	4ba8      	ldr	r3, [pc, #672]	; (8016934 <main+0x678>)
 8016692:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016696:	2b1f      	cmp	r3, #31
 8016698:	d107      	bne.n	80166aa <main+0x3ee>
 801669a:	4ba7      	ldr	r3, [pc, #668]	; (8016938 <main+0x67c>)
 801669c:	f9b3 30fc 	ldrsh.w	r3, [r3, #252]	; 0xfc
 80166a0:	4618      	mov	r0, r3
 80166a2:	f7f9 fc4f 	bl	800ff44 <Save_Buf>
 80166a6:	4603      	mov	r3, r0
 80166a8:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_CSV) i = Save_Csv(List[SAVE_CSV].Val);
 80166aa:	4ba2      	ldr	r3, [pc, #648]	; (8016934 <main+0x678>)
 80166ac:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80166b0:	2b20      	cmp	r3, #32
 80166b2:	d107      	bne.n	80166c4 <main+0x408>
 80166b4:	4ba0      	ldr	r3, [pc, #640]	; (8016938 <main+0x67c>)
 80166b6:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
 80166ba:	4618      	mov	r0, r3
 80166bc:	f7f9 ffc2 	bl	8010644 <Save_Csv>
 80166c0:	4603      	mov	r3, r0
 80166c2:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_SVG) i = Save_Svg(List[SAVE_SVG].Val);
 80166c4:	4b9b      	ldr	r3, [pc, #620]	; (8016934 <main+0x678>)
 80166c6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80166ca:	2b21      	cmp	r3, #33	; 0x21
 80166cc:	d107      	bne.n	80166de <main+0x422>
 80166ce:	4b9a      	ldr	r3, [pc, #616]	; (8016938 <main+0x67c>)
 80166d0:	f9b3 310c 	ldrsh.w	r3, [r3, #268]	; 0x10c
 80166d4:	4618      	mov	r0, r3
 80166d6:	f7fa f9db 	bl	8010a90 <Save_Svg>
 80166da:	4603      	mov	r3, r0
 80166dc:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == LOAD_DAT) i = Load_Dat(List[LOAD_DAT].Val);
 80166de:	4b95      	ldr	r3, [pc, #596]	; (8016934 <main+0x678>)
 80166e0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80166e4:	2b22      	cmp	r3, #34	; 0x22
 80166e6:	d107      	bne.n	80166f8 <main+0x43c>
 80166e8:	4b93      	ldr	r3, [pc, #588]	; (8016938 <main+0x67c>)
 80166ea:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	; 0x114
 80166ee:	4618      	mov	r0, r3
 80166f0:	f7f9 fd92 	bl	8010218 <Load_Dat>
 80166f4:	4603      	mov	r3, r0
 80166f6:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == LOAD_BUF) i = Load_Buf(List[LOAD_BUF].Val);
 80166f8:	4b8e      	ldr	r3, [pc, #568]	; (8016934 <main+0x678>)
 80166fa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80166fe:	2b23      	cmp	r3, #35	; 0x23
 8016700:	d107      	bne.n	8016712 <main+0x456>
 8016702:	4b8d      	ldr	r3, [pc, #564]	; (8016938 <main+0x67c>)
 8016704:	f9b3 311c 	ldrsh.w	r3, [r3, #284]	; 0x11c
 8016708:	4618      	mov	r0, r3
 801670a:	f7f9 fb3d 	bl	800fd88 <Load_Buf>
 801670e:	4603      	mov	r3, r0
 8016710:	80fb      	strh	r3, [r7, #6]
	           SAVE_FLAG = 0;
 8016712:	2300      	movs	r3, #0
 8016714:	717b      	strb	r3, [r7, #5]
	         }
	         DispFileInfo(i);
 8016716:	88fb      	ldrh	r3, [r7, #6]
 8016718:	b2db      	uxtb	r3, r3
 801671a:	4618      	mov	r0, r3
 801671c:	f7fe f8d8 	bl	80148d0 <DispFileInfo>

	         if(PopType & DAILOG_POP)  Close_Pop();
 8016720:	4b83      	ldr	r3, [pc, #524]	; (8016930 <main+0x674>)
 8016722:	781b      	ldrb	r3, [r3, #0]
 8016724:	f003 0304 	and.w	r3, r3, #4
 8016728:	2b00      	cmp	r3, #0
 801672a:	d062      	beq.n	80167f2 <main+0x536>
 801672c:	f7f8 f802 	bl	800e734 <Close_Pop>
 8016730:	e05f      	b.n	80167f2 <main+0x536>

	       }
	       else if((PopType & DAILOG_POP ) &&(SAVE_FLAG!=KEYCODE_MEM)){
 8016732:	4b7f      	ldr	r3, [pc, #508]	; (8016930 <main+0x674>)
 8016734:	781b      	ldrb	r3, [r3, #0]
 8016736:	f003 0304 	and.w	r3, r3, #4
 801673a:	2b00      	cmp	r3, #0
 801673c:	d00b      	beq.n	8016756 <main+0x49a>
 801673e:	797b      	ldrb	r3, [r7, #5]
 8016740:	2b09      	cmp	r3, #9
 8016742:	d008      	beq.n	8016756 <main+0x49a>
	         Save_Parameter();
 8016744:	f7fa fe0e 	bl	8011364 <Save_Parameter>
	         Cal_Flag = 0;
 8016748:	4b7c      	ldr	r3, [pc, #496]	; (801693c <main+0x680>)
 801674a:	2200      	movs	r2, #0
 801674c:	701a      	strb	r2, [r3, #0]
	         Close_Pop();
 801674e:	f7f7 fff1 	bl	800e734 <Close_Pop>
	         break;
 8016752:	f000 bd97 	b.w	8017284 <main+0xfc8>
	       }
	       else {
	          if(Status & STOP){
 8016756:	4b7a      	ldr	r3, [pc, #488]	; (8016940 <main+0x684>)
 8016758:	f9b3 3000 	ldrsh.w	r3, [r3]
 801675c:	b29b      	uxth	r3, r3
 801675e:	f003 0301 	and.w	r3, r3, #1
 8016762:	2b00      	cmp	r3, #0
 8016764:	d02e      	beq.n	80167c4 <main+0x508>
	            if(Status & LOADM )Status &= ~LOADM;
 8016766:	4b76      	ldr	r3, [pc, #472]	; (8016940 <main+0x684>)
 8016768:	f9b3 3000 	ldrsh.w	r3, [r3]
 801676c:	b29b      	uxth	r3, r3
 801676e:	f003 0310 	and.w	r3, r3, #16
 8016772:	2b00      	cmp	r3, #0
 8016774:	d007      	beq.n	8016786 <main+0x4ca>
 8016776:	4b72      	ldr	r3, [pc, #456]	; (8016940 <main+0x684>)
 8016778:	f9b3 3000 	ldrsh.w	r3, [r3]
 801677c:	f023 0310 	bic.w	r3, r3, #16
 8016780:	b21a      	sxth	r2, r3
 8016782:	4b6f      	ldr	r3, [pc, #444]	; (8016940 <main+0x684>)
 8016784:	801a      	strh	r2, [r3, #0]
	            Status &= ~STOP;     // ��������״̬
 8016786:	4b6e      	ldr	r3, [pc, #440]	; (8016940 <main+0x684>)
 8016788:	f9b3 3000 	ldrsh.w	r3, [r3]
 801678c:	f023 0301 	bic.w	r3, r3, #1
 8016790:	b21a      	sxth	r2, r3
 8016792:	4b6b      	ldr	r3, [pc, #428]	; (8016940 <main+0x684>)
 8016794:	801a      	strh	r2, [r3, #0]
	            if(List[SYNCMODE].Val==SINGL) ADC_Start();
 8016796:	4b68      	ldr	r3, [pc, #416]	; (8016938 <main+0x67c>)
 8016798:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 801679c:	2b04      	cmp	r3, #4
 801679e:	d101      	bne.n	80167a4 <main+0x4e8>
 80167a0:	f7f5 ffa4 	bl	800c6ec <ADC_Start>
	            if(List[SYNCMODE].Val==NORM)  ADC_Start();
 80167a4:	4b64      	ldr	r3, [pc, #400]	; (8016938 <main+0x67c>)
 80167a6:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 80167aa:	2b03      	cmp	r3, #3
 80167ac:	d101      	bne.n	80167b2 <main+0x4f6>
 80167ae:	f7f5 ff9d 	bl	800c6ec <ADC_Start>
	            Norm_Clr = 1;
 80167b2:	4b64      	ldr	r3, [pc, #400]	; (8016944 <main+0x688>)
 80167b4:	2201      	movs	r2, #1
 80167b6:	701a      	strb	r2, [r3, #0]
	            SNGL_Kflag = 1;
 80167b8:	4b63      	ldr	r3, [pc, #396]	; (8016948 <main+0x68c>)
 80167ba:	2201      	movs	r2, #1
 80167bc:	701a      	strb	r2, [r3, #0]
	            Update_Proc_All();
 80167be:	f7fe f8fd 	bl	80149bc <Update_Proc_All>
 80167c2:	e016      	b.n	80167f2 <main+0x536>

	            if(*(short*)F_Sector==0xaa55)Restore_Scene();

	          }
	          else {
	            Status |=  STOP;     // ������ͣ״̬
 80167c4:	4b5e      	ldr	r3, [pc, #376]	; (8016940 <main+0x684>)
 80167c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80167ca:	f043 0301 	orr.w	r3, r3, #1
 80167ce:	b21a      	sxth	r2, r3
 80167d0:	4b5b      	ldr	r3, [pc, #364]	; (8016940 <main+0x684>)
 80167d2:	801a      	strh	r2, [r3, #0]
	            Ch1_Posi = List[V0_POSI].Val;
 80167d4:	4b58      	ldr	r3, [pc, #352]	; (8016938 <main+0x67c>)
 80167d6:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 80167da:	4b5c      	ldr	r3, [pc, #368]	; (801694c <main+0x690>)
 80167dc:	801a      	strh	r2, [r3, #0]
	            Ch2_Posi = List[EXT_POSI].Val;
 80167de:	4b56      	ldr	r3, [pc, #344]	; (8016938 <main+0x67c>)
 80167e0:	f9b3 20dc 	ldrsh.w	r2, [r3, #220]	; 0xdc
 80167e4:	4b5a      	ldr	r3, [pc, #360]	; (8016950 <main+0x694>)
 80167e6:	801a      	strh	r2, [r3, #0]
	            Tri_Posi = List[THRESHOLD].Val;
 80167e8:	4b53      	ldr	r3, [pc, #332]	; (8016938 <main+0x67c>)
 80167ea:	f9b3 2084 	ldrsh.w	r2, [r3, #132]	; 0x84
 80167ee:	4b59      	ldr	r3, [pc, #356]	; (8016954 <main+0x698>)
 80167f0:	801a      	strh	r2, [r3, #0]
	            Save_Bmp(List[SAVE_BMP].Val);
	            List[SAVE_BMP].Val++;
	          #endif
	          }
	        }
	        DispStatus();            // ��ʾ����״̬
 80167f2:	f7fd fdd7 	bl	80143a4 <DispStatus>
 	       break;
 80167f6:	f000 bd45 	b.w	8017284 <main+0xfc8>

	      case KEYCODE_D_MANU:
	        if(List[FITTRIGG].Val)
 80167fa:	4b4f      	ldr	r3, [pc, #316]	; (8016938 <main+0x67c>)
 80167fc:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8016800:	2b00      	cmp	r3, #0
 8016802:	f000 8534 	beq.w	801726e <main+0xfb2>
	        {
	          Auto_Fit();
 8016806:	f7ff f933 	bl	8015a70 <Auto_Fit>
	        }
	        break;
 801680a:	f000 bd30 	b.w	801726e <main+0xfb2>

	      case KEYCODE_MANU:
	        if(!(PopType & LIST_POP)){
 801680e:	4b48      	ldr	r3, [pc, #288]	; (8016930 <main+0x674>)
 8016810:	781b      	ldrb	r3, [r3, #0]
 8016812:	f003 0302 	and.w	r3, r3, #2
 8016816:	2b00      	cmp	r3, #0
 8016818:	d111      	bne.n	801683e <main+0x582>
	            if(Cal_Flag){
 801681a:	4b48      	ldr	r3, [pc, #288]	; (801693c <main+0x680>)
 801681c:	781b      	ldrb	r3, [r3, #0]
 801681e:	2b00      	cmp	r3, #0
 8016820:	d006      	beq.n	8016830 <main+0x574>
	              Cal_Flag = 0;
 8016822:	4b46      	ldr	r3, [pc, #280]	; (801693c <main+0x680>)
 8016824:	2200      	movs	r2, #0
 8016826:	701a      	strb	r2, [r3, #0]
	              Close_Pop();
 8016828:	f7f7 ff84 	bl	800e734 <Close_Pop>
	          // ------------ �ָ���ʾ��Ϣ��ʾ���Ҷ�ԭ����ʾ��Ϣ ------------
	          if(MenuNow[Current] == SMPL_DPTH) List[SMPL_DPTH].Flg  |= UPD; // ������ȸ�����ʾ
	          else if(Current == FN)           List[MenuNow[FN]].Flg |= UPD; // ָ�����ļ���д�������ʾ
	          else                             List[MenuNow[ME]].Flg |= UPD; // ָ���Ĳ��β����������ʾ
	        }
	        break;
 801682c:	f000 bd2a 	b.w	8017284 <main+0xfc8>
	              Cal_Flag = 0;
 8016830:	4b42      	ldr	r3, [pc, #264]	; (801693c <main+0x680>)
 8016832:	2200      	movs	r2, #0
 8016834:	701a      	strb	r2, [r3, #0]
	              List_Pop(); // �˵����ر�ʱ, �򿪲˵���
 8016836:	f7f7 ff93 	bl	800e760 <List_Pop>
	        break;
 801683a:	f000 bd23 	b.w	8017284 <main+0xfc8>
	          Close_Pop();                // �˵����Ѵ�ʱ, �رղ˵���
 801683e:	f7f7 ff79 	bl	800e734 <Close_Pop>
	          if(Current == XN)      List[T1_POSI   ].Flg |= UPD;
 8016842:	4b3a      	ldr	r3, [pc, #232]	; (801692c <main+0x670>)
 8016844:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016848:	2b01      	cmp	r3, #1
 801684a:	d109      	bne.n	8016860 <main+0x5a4>
 801684c:	4b3a      	ldr	r3, [pc, #232]	; (8016938 <main+0x67c>)
 801684e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8016852:	f043 0320 	orr.w	r3, r3, #32
 8016856:	b2da      	uxtb	r2, r3
 8016858:	4b37      	ldr	r3, [pc, #220]	; (8016938 <main+0x67c>)
 801685a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 801685e:	e021      	b.n	80168a4 <main+0x5e8>
	          else if(Current == YN) List[V1_POSI   ].Flg |= UPD;
 8016860:	4b32      	ldr	r3, [pc, #200]	; (801692c <main+0x670>)
 8016862:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016866:	2b00      	cmp	r3, #0
 8016868:	d109      	bne.n	801687e <main+0x5c2>
 801686a:	4b33      	ldr	r3, [pc, #204]	; (8016938 <main+0x67c>)
 801686c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8016870:	f043 0320 	orr.w	r3, r3, #32
 8016874:	b2da      	uxtb	r2, r3
 8016876:	4b30      	ldr	r3, [pc, #192]	; (8016938 <main+0x67c>)
 8016878:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 801687c:	e012      	b.n	80168a4 <main+0x5e8>
	          else                   List[MenuNow[SN]].Flg |= UPD;
 801687e:	4b2d      	ldr	r3, [pc, #180]	; (8016934 <main+0x678>)
 8016880:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8016884:	4a2c      	ldr	r2, [pc, #176]	; (8016938 <main+0x67c>)
 8016886:	00db      	lsls	r3, r3, #3
 8016888:	4413      	add	r3, r2
 801688a:	799b      	ldrb	r3, [r3, #6]
 801688c:	4a29      	ldr	r2, [pc, #164]	; (8016934 <main+0x678>)
 801688e:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8016892:	4610      	mov	r0, r2
 8016894:	f043 0320 	orr.w	r3, r3, #32
 8016898:	b2d9      	uxtb	r1, r3
 801689a:	4a27      	ldr	r2, [pc, #156]	; (8016938 <main+0x67c>)
 801689c:	00c3      	lsls	r3, r0, #3
 801689e:	4413      	add	r3, r2
 80168a0:	460a      	mov	r2, r1
 80168a2:	719a      	strb	r2, [r3, #6]
	          if(MenuNow[Current] == SMPL_DPTH) List[SMPL_DPTH].Flg  |= UPD; // ������ȸ�����ʾ
 80168a4:	4b21      	ldr	r3, [pc, #132]	; (801692c <main+0x670>)
 80168a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80168aa:	461a      	mov	r2, r3
 80168ac:	4b21      	ldr	r3, [pc, #132]	; (8016934 <main+0x678>)
 80168ae:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80168b2:	2b09      	cmp	r3, #9
 80168b4:	d10a      	bne.n	80168cc <main+0x610>
 80168b6:	4b20      	ldr	r3, [pc, #128]	; (8016938 <main+0x67c>)
 80168b8:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80168bc:	f043 0320 	orr.w	r3, r3, #32
 80168c0:	b2da      	uxtb	r2, r3
 80168c2:	4b1d      	ldr	r3, [pc, #116]	; (8016938 <main+0x67c>)
 80168c4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	        break;
 80168c8:	f000 bcdc 	b.w	8017284 <main+0xfc8>
	          else if(Current == FN)           List[MenuNow[FN]].Flg |= UPD; // ָ�����ļ���д�������ʾ
 80168cc:	4b17      	ldr	r3, [pc, #92]	; (801692c <main+0x670>)
 80168ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80168d2:	2b05      	cmp	r3, #5
 80168d4:	d114      	bne.n	8016900 <main+0x644>
 80168d6:	4b17      	ldr	r3, [pc, #92]	; (8016934 <main+0x678>)
 80168d8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80168dc:	4a16      	ldr	r2, [pc, #88]	; (8016938 <main+0x67c>)
 80168de:	00db      	lsls	r3, r3, #3
 80168e0:	4413      	add	r3, r2
 80168e2:	799b      	ldrb	r3, [r3, #6]
 80168e4:	4a13      	ldr	r2, [pc, #76]	; (8016934 <main+0x678>)
 80168e6:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80168ea:	4610      	mov	r0, r2
 80168ec:	f043 0320 	orr.w	r3, r3, #32
 80168f0:	b2d9      	uxtb	r1, r3
 80168f2:	4a11      	ldr	r2, [pc, #68]	; (8016938 <main+0x67c>)
 80168f4:	00c3      	lsls	r3, r0, #3
 80168f6:	4413      	add	r3, r2
 80168f8:	460a      	mov	r2, r1
 80168fa:	719a      	strb	r2, [r3, #6]
	        break;
 80168fc:	f000 bcc2 	b.w	8017284 <main+0xfc8>
	          else                             List[MenuNow[ME]].Flg |= UPD; // ָ���Ĳ��β����������ʾ
 8016900:	4b0c      	ldr	r3, [pc, #48]	; (8016934 <main+0x678>)
 8016902:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8016906:	4a0c      	ldr	r2, [pc, #48]	; (8016938 <main+0x67c>)
 8016908:	00db      	lsls	r3, r3, #3
 801690a:	4413      	add	r3, r2
 801690c:	799b      	ldrb	r3, [r3, #6]
 801690e:	4a09      	ldr	r2, [pc, #36]	; (8016934 <main+0x678>)
 8016910:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8016914:	4610      	mov	r0, r2
 8016916:	f043 0320 	orr.w	r3, r3, #32
 801691a:	b2d9      	uxtb	r1, r3
 801691c:	4a06      	ldr	r2, [pc, #24]	; (8016938 <main+0x67c>)
 801691e:	00c3      	lsls	r3, r0, #3
 8016920:	4413      	add	r3, r2
 8016922:	460a      	mov	r2, r1
 8016924:	719a      	strb	r2, [r3, #6]
	        break;
 8016926:	f000 bcad 	b.w	8017284 <main+0xfc8>
 801692a:	bf00      	nop
 801692c:	2000079e 	.word	0x2000079e
 8016930:	2000078e 	.word	0x2000078e
 8016934:	20000538 	.word	0x20000538
 8016938:	20000298 	.word	0x20000298
 801693c:	200001b4 	.word	0x200001b4
 8016940:	200007a0 	.word	0x200007a0
 8016944:	200007a7 	.word	0x200007a7
 8016948:	2000055c 	.word	0x2000055c
 801694c:	20006884 	.word	0x20006884
 8016950:	2000687c 	.word	0x2000687c
 8016954:	20002860 	.word	0x20002860

	      case KEYCODE_UP:
	        if (PopType & LIST_POP){
 8016958:	4bac      	ldr	r3, [pc, #688]	; (8016c0c <main+0x950>)
 801695a:	781b      	ldrb	r3, [r3, #0]
 801695c:	f003 0302 	and.w	r3, r3, #2
 8016960:	2b00      	cmp	r3, #0
 8016962:	d03b      	beq.n	80169dc <main+0x720>
	          if(MenuNow[Current] > MU_BEGN[Current]) MenuNow[Current]--;
 8016964:	4baa      	ldr	r3, [pc, #680]	; (8016c10 <main+0x954>)
 8016966:	f9b3 3000 	ldrsh.w	r3, [r3]
 801696a:	461a      	mov	r2, r3
 801696c:	4ba9      	ldr	r3, [pc, #676]	; (8016c14 <main+0x958>)
 801696e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016972:	461a      	mov	r2, r3
 8016974:	4ba6      	ldr	r3, [pc, #664]	; (8016c10 <main+0x954>)
 8016976:	f9b3 3000 	ldrsh.w	r3, [r3]
 801697a:	4619      	mov	r1, r3
 801697c:	4ba6      	ldr	r3, [pc, #664]	; (8016c18 <main+0x95c>)
 801697e:	5c5b      	ldrb	r3, [r3, r1]
 8016980:	429a      	cmp	r2, r3
 8016982:	dd0e      	ble.n	80169a2 <main+0x6e6>
 8016984:	4ba2      	ldr	r3, [pc, #648]	; (8016c10 <main+0x954>)
 8016986:	f9b3 3000 	ldrsh.w	r3, [r3]
 801698a:	4aa2      	ldr	r2, [pc, #648]	; (8016c14 <main+0x958>)
 801698c:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8016990:	b292      	uxth	r2, r2
 8016992:	3a01      	subs	r2, #1
 8016994:	b292      	uxth	r2, r2
 8016996:	b211      	sxth	r1, r2
 8016998:	4a9e      	ldr	r2, [pc, #632]	; (8016c14 <main+0x958>)
 801699a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	          else                  MenuNow[Current] += M_ITEMS[Current]-1;
	        } else {
	          if (Current > 0) Current--;
	          else             Current = ST;
	        }
	        break;
 801699e:	f000 bc71 	b.w	8017284 <main+0xfc8>
	          else                  MenuNow[Current] += M_ITEMS[Current]-1;
 80169a2:	4b9b      	ldr	r3, [pc, #620]	; (8016c10 <main+0x954>)
 80169a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80169a8:	461a      	mov	r2, r3
 80169aa:	4b9a      	ldr	r3, [pc, #616]	; (8016c14 <main+0x958>)
 80169ac:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80169b0:	b29a      	uxth	r2, r3
 80169b2:	4b97      	ldr	r3, [pc, #604]	; (8016c10 <main+0x954>)
 80169b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80169b8:	4619      	mov	r1, r3
 80169ba:	4b98      	ldr	r3, [pc, #608]	; (8016c1c <main+0x960>)
 80169bc:	5c5b      	ldrb	r3, [r3, r1]
 80169be:	b29b      	uxth	r3, r3
 80169c0:	4413      	add	r3, r2
 80169c2:	b29b      	uxth	r3, r3
 80169c4:	3b01      	subs	r3, #1
 80169c6:	b299      	uxth	r1, r3
 80169c8:	4b91      	ldr	r3, [pc, #580]	; (8016c10 <main+0x954>)
 80169ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80169ce:	461a      	mov	r2, r3
 80169d0:	b209      	sxth	r1, r1
 80169d2:	4b90      	ldr	r3, [pc, #576]	; (8016c14 <main+0x958>)
 80169d4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	        break;
 80169d8:	f000 bc54 	b.w	8017284 <main+0xfc8>
	          if (Current > 0) Current--;
 80169dc:	4b8c      	ldr	r3, [pc, #560]	; (8016c10 <main+0x954>)
 80169de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	dd0a      	ble.n	80169fc <main+0x740>
 80169e6:	4b8a      	ldr	r3, [pc, #552]	; (8016c10 <main+0x954>)
 80169e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80169ec:	b29b      	uxth	r3, r3
 80169ee:	3b01      	subs	r3, #1
 80169f0:	b29b      	uxth	r3, r3
 80169f2:	b21a      	sxth	r2, r3
 80169f4:	4b86      	ldr	r3, [pc, #536]	; (8016c10 <main+0x954>)
 80169f6:	801a      	strh	r2, [r3, #0]
	        break;
 80169f8:	f000 bc44 	b.w	8017284 <main+0xfc8>
	          else             Current = ST;
 80169fc:	4b84      	ldr	r3, [pc, #528]	; (8016c10 <main+0x954>)
 80169fe:	2207      	movs	r2, #7
 8016a00:	801a      	strh	r2, [r3, #0]
	        break;
 8016a02:	f000 bc3f 	b.w	8017284 <main+0xfc8>

	     case KEYCODE_DOWN:
	        if(PopType & LIST_POP){
 8016a06:	4b81      	ldr	r3, [pc, #516]	; (8016c0c <main+0x950>)
 8016a08:	781b      	ldrb	r3, [r3, #0]
 8016a0a:	f003 0302 	and.w	r3, r3, #2
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d034      	beq.n	8016a7c <main+0x7c0>
	          MenuNow[Current]++;
 8016a12:	4b7f      	ldr	r3, [pc, #508]	; (8016c10 <main+0x954>)
 8016a14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a18:	4a7e      	ldr	r2, [pc, #504]	; (8016c14 <main+0x958>)
 8016a1a:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8016a1e:	b292      	uxth	r2, r2
 8016a20:	3201      	adds	r2, #1
 8016a22:	b292      	uxth	r2, r2
 8016a24:	b211      	sxth	r1, r2
 8016a26:	4a7b      	ldr	r2, [pc, #492]	; (8016c14 <main+0x958>)
 8016a28:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	          if(MenuNow[Current] >=(MU_BEGN[Current]+M_ITEMS[Current])){
 8016a2c:	4b78      	ldr	r3, [pc, #480]	; (8016c10 <main+0x954>)
 8016a2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a32:	461a      	mov	r2, r3
 8016a34:	4b77      	ldr	r3, [pc, #476]	; (8016c14 <main+0x958>)
 8016a36:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016a3a:	461a      	mov	r2, r3
 8016a3c:	4b74      	ldr	r3, [pc, #464]	; (8016c10 <main+0x954>)
 8016a3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a42:	4619      	mov	r1, r3
 8016a44:	4b74      	ldr	r3, [pc, #464]	; (8016c18 <main+0x95c>)
 8016a46:	5c5b      	ldrb	r3, [r3, r1]
 8016a48:	4619      	mov	r1, r3
 8016a4a:	4b71      	ldr	r3, [pc, #452]	; (8016c10 <main+0x954>)
 8016a4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a50:	4618      	mov	r0, r3
 8016a52:	4b72      	ldr	r3, [pc, #456]	; (8016c1c <main+0x960>)
 8016a54:	5c1b      	ldrb	r3, [r3, r0]
 8016a56:	440b      	add	r3, r1
 8016a58:	429a      	cmp	r2, r3
 8016a5a:	f2c0 840a 	blt.w	8017272 <main+0xfb6>
	            MenuNow[Current] = MU_BEGN[Current];
 8016a5e:	4b6c      	ldr	r3, [pc, #432]	; (8016c10 <main+0x954>)
 8016a60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a64:	461a      	mov	r2, r3
 8016a66:	4b6c      	ldr	r3, [pc, #432]	; (8016c18 <main+0x95c>)
 8016a68:	5c99      	ldrb	r1, [r3, r2]
 8016a6a:	4b69      	ldr	r3, [pc, #420]	; (8016c10 <main+0x954>)
 8016a6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a70:	461a      	mov	r2, r3
 8016a72:	b209      	sxth	r1, r1
 8016a74:	4b67      	ldr	r3, [pc, #412]	; (8016c14 <main+0x958>)
 8016a76:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	          }
	        } else {
	          if (Current < 7) Current++;
	          else             Current = YN;
	        }
	        break;
 8016a7a:	e3fa      	b.n	8017272 <main+0xfb6>
	          if (Current < 7) Current++;
 8016a7c:	4b64      	ldr	r3, [pc, #400]	; (8016c10 <main+0x954>)
 8016a7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a82:	2b06      	cmp	r3, #6
 8016a84:	dc09      	bgt.n	8016a9a <main+0x7de>
 8016a86:	4b62      	ldr	r3, [pc, #392]	; (8016c10 <main+0x954>)
 8016a88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a8c:	b29b      	uxth	r3, r3
 8016a8e:	3301      	adds	r3, #1
 8016a90:	b29b      	uxth	r3, r3
 8016a92:	b21a      	sxth	r2, r3
 8016a94:	4b5e      	ldr	r3, [pc, #376]	; (8016c10 <main+0x954>)
 8016a96:	801a      	strh	r2, [r3, #0]
	        break;
 8016a98:	e3eb      	b.n	8017272 <main+0xfb6>
	          else             Current = YN;
 8016a9a:	4b5d      	ldr	r3, [pc, #372]	; (8016c10 <main+0x954>)
 8016a9c:	2200      	movs	r2, #0
 8016a9e:	801a      	strh	r2, [r3, #0]
	        break;
 8016aa0:	e3e7      	b.n	8017272 <main+0xfb6>

	      case KEYCODE_LEFT:
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 8016aa2:	4b5b      	ldr	r3, [pc, #364]	; (8016c10 <main+0x954>)
 8016aa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016aa8:	2b07      	cmp	r3, #7
 8016aaa:	d106      	bne.n	8016aba <main+0x7fe>
 8016aac:	4b57      	ldr	r3, [pc, #348]	; (8016c0c <main+0x950>)
 8016aae:	781b      	ldrb	r3, [r3, #0]
 8016ab0:	f003 0302 	and.w	r3, r3, #2
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	f000 83de 	beq.w	8017276 <main+0xfba>
	        List[MenuNow[Current]].Flg |= UPD;  // ˢ�±��ǰԭ��ʾ��Ŀ����
 8016aba:	4b55      	ldr	r3, [pc, #340]	; (8016c10 <main+0x954>)
 8016abc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ac0:	461a      	mov	r2, r3
 8016ac2:	4b54      	ldr	r3, [pc, #336]	; (8016c14 <main+0x958>)
 8016ac4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016ac8:	4a55      	ldr	r2, [pc, #340]	; (8016c20 <main+0x964>)
 8016aca:	00db      	lsls	r3, r3, #3
 8016acc:	4413      	add	r3, r2
 8016ace:	799b      	ldrb	r3, [r3, #6]
 8016ad0:	4a4f      	ldr	r2, [pc, #316]	; (8016c10 <main+0x954>)
 8016ad2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016ad6:	4611      	mov	r1, r2
 8016ad8:	4a4e      	ldr	r2, [pc, #312]	; (8016c14 <main+0x958>)
 8016ada:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8016ade:	4610      	mov	r0, r2
 8016ae0:	f043 0320 	orr.w	r3, r3, #32
 8016ae4:	b2d9      	uxtb	r1, r3
 8016ae6:	4a4e      	ldr	r2, [pc, #312]	; (8016c20 <main+0x964>)
 8016ae8:	00c3      	lsls	r3, r0, #3
 8016aea:	4413      	add	r3, r2
 8016aec:	460a      	mov	r2, r1
 8016aee:	719a      	strb	r2, [r3, #6]
	        if(List[MenuNow[Current]].Val <=MIN[MenuNow[Current]]){
 8016af0:	4b47      	ldr	r3, [pc, #284]	; (8016c10 <main+0x954>)
 8016af2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016af6:	461a      	mov	r2, r3
 8016af8:	4b46      	ldr	r3, [pc, #280]	; (8016c14 <main+0x958>)
 8016afa:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016afe:	4a48      	ldr	r2, [pc, #288]	; (8016c20 <main+0x964>)
 8016b00:	00db      	lsls	r3, r3, #3
 8016b02:	4413      	add	r3, r2
 8016b04:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8016b08:	4b41      	ldr	r3, [pc, #260]	; (8016c10 <main+0x954>)
 8016b0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b0e:	4619      	mov	r1, r3
 8016b10:	4b40      	ldr	r3, [pc, #256]	; (8016c14 <main+0x958>)
 8016b12:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016b16:	4619      	mov	r1, r3
 8016b18:	4b42      	ldr	r3, [pc, #264]	; (8016c24 <main+0x968>)
 8016b1a:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016b1e:	429a      	cmp	r2, r3
 8016b20:	f300 8084 	bgt.w	8016c2c <main+0x970>
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 8016b24:	4b3a      	ldr	r3, [pc, #232]	; (8016c10 <main+0x954>)
 8016b26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b2a:	461a      	mov	r2, r3
 8016b2c:	4b39      	ldr	r3, [pc, #228]	; (8016c14 <main+0x958>)
 8016b2e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016b32:	2b01      	cmp	r3, #1
 8016b34:	d051      	beq.n	8016bda <main+0x91e>
 8016b36:	4b36      	ldr	r3, [pc, #216]	; (8016c10 <main+0x954>)
 8016b38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b3c:	461a      	mov	r2, r3
 8016b3e:	4b35      	ldr	r3, [pc, #212]	; (8016c14 <main+0x958>)
 8016b40:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016b44:	2b06      	cmp	r3, #6
 8016b46:	d048      	beq.n	8016bda <main+0x91e>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016b48:	4b31      	ldr	r3, [pc, #196]	; (8016c10 <main+0x954>)
 8016b4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b4e:	461a      	mov	r2, r3
 8016b50:	4b30      	ldr	r3, [pc, #192]	; (8016c14 <main+0x958>)
 8016b52:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 8016b56:	2b0c      	cmp	r3, #12
 8016b58:	d03f      	beq.n	8016bda <main+0x91e>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016b5a:	4b2d      	ldr	r3, [pc, #180]	; (8016c10 <main+0x954>)
 8016b5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b60:	461a      	mov	r2, r3
 8016b62:	4b2c      	ldr	r3, [pc, #176]	; (8016c14 <main+0x958>)
 8016b64:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016b68:	2b1c      	cmp	r3, #28
 8016b6a:	d036      	beq.n	8016bda <main+0x91e>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8016b6c:	4b28      	ldr	r3, [pc, #160]	; (8016c10 <main+0x954>)
 8016b6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b72:	461a      	mov	r2, r3
 8016b74:	4b27      	ldr	r3, [pc, #156]	; (8016c14 <main+0x958>)
 8016b76:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016b7a:	2b0f      	cmp	r3, #15
 8016b7c:	d02d      	beq.n	8016bda <main+0x91e>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8016b7e:	4b24      	ldr	r3, [pc, #144]	; (8016c10 <main+0x954>)
 8016b80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b84:	461a      	mov	r2, r3
 8016b86:	4b23      	ldr	r3, [pc, #140]	; (8016c14 <main+0x958>)
 8016b88:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016b8c:	2b0e      	cmp	r3, #14
 8016b8e:	d024      	beq.n	8016bda <main+0x91e>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8016b90:	4b1f      	ldr	r3, [pc, #124]	; (8016c10 <main+0x954>)
 8016b92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b96:	461a      	mov	r2, r3
 8016b98:	4b1e      	ldr	r3, [pc, #120]	; (8016c14 <main+0x958>)
 8016b9a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8016b9e:	2b0d      	cmp	r3, #13
 8016ba0:	d01b      	beq.n	8016bda <main+0x91e>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8016ba2:	4b1b      	ldr	r3, [pc, #108]	; (8016c10 <main+0x954>)
 8016ba4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ba8:	461a      	mov	r2, r3
 8016baa:	4b1a      	ldr	r3, [pc, #104]	; (8016c14 <main+0x958>)
 8016bac:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016bb0:	2b1a      	cmp	r3, #26
 8016bb2:	d012      	beq.n	8016bda <main+0x91e>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 8016bb4:	4b16      	ldr	r3, [pc, #88]	; (8016c10 <main+0x954>)
 8016bb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016bba:	461a      	mov	r2, r3
 8016bbc:	4b15      	ldr	r3, [pc, #84]	; (8016c14 <main+0x958>)
 8016bbe:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8016bc2:	2b02      	cmp	r3, #2
 8016bc4:	d009      	beq.n	8016bda <main+0x91e>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 8016bc6:	4b12      	ldr	r3, [pc, #72]	; (8016c10 <main+0x954>)
 8016bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016bcc:	461a      	mov	r2, r3
 8016bce:	4b11      	ldr	r3, [pc, #68]	; (8016c14 <main+0x958>)
 8016bd0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016bd4:	2b24      	cmp	r3, #36	; 0x24
 8016bd6:	f040 812c 	bne.w	8016e32 <main+0xb76>
	            List[MenuNow[Current]].Val =MAX[MenuNow[Current]] ;
 8016bda:	4b0d      	ldr	r3, [pc, #52]	; (8016c10 <main+0x954>)
 8016bdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016be0:	461a      	mov	r2, r3
 8016be2:	4b0c      	ldr	r3, [pc, #48]	; (8016c14 <main+0x958>)
 8016be4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016be8:	461a      	mov	r2, r3
 8016bea:	4b09      	ldr	r3, [pc, #36]	; (8016c10 <main+0x954>)
 8016bec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016bf0:	4619      	mov	r1, r3
 8016bf2:	4b08      	ldr	r3, [pc, #32]	; (8016c14 <main+0x958>)
 8016bf4:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016bf8:	4618      	mov	r0, r3
 8016bfa:	4b0b      	ldr	r3, [pc, #44]	; (8016c28 <main+0x96c>)
 8016bfc:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 8016c00:	4a07      	ldr	r2, [pc, #28]	; (8016c20 <main+0x964>)
 8016c02:	00c3      	lsls	r3, r0, #3
 8016c04:	4413      	add	r3, r2
 8016c06:	460a      	mov	r2, r1
 8016c08:	809a      	strh	r2, [r3, #4]
 8016c0a:	e112      	b.n	8016e32 <main+0xb76>
 8016c0c:	2000078e 	.word	0x2000078e
 8016c10:	2000079e 	.word	0x2000079e
 8016c14:	20000538 	.word	0x20000538
 8016c18:	08001f40 	.word	0x08001f40
 8016c1c:	08001f48 	.word	0x08001f48
 8016c20:	20000298 	.word	0x20000298
 8016c24:	08002214 	.word	0x08002214
 8016c28:	080021b8 	.word	0x080021b8
	        } else {
	          if((MenuNow[Current] == VIEWPOSI)&&((List[MenuNow[Current]].Val) >=150 ))
 8016c2c:	4b88      	ldr	r3, [pc, #544]	; (8016e50 <main+0xb94>)
 8016c2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c32:	461a      	mov	r2, r3
 8016c34:	4b87      	ldr	r3, [pc, #540]	; (8016e54 <main+0xb98>)
 8016c36:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016c3a:	2b08      	cmp	r3, #8
 8016c3c:	d12a      	bne.n	8016c94 <main+0x9d8>
 8016c3e:	4b84      	ldr	r3, [pc, #528]	; (8016e50 <main+0xb94>)
 8016c40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c44:	461a      	mov	r2, r3
 8016c46:	4b83      	ldr	r3, [pc, #524]	; (8016e54 <main+0xb98>)
 8016c48:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016c4c:	4a82      	ldr	r2, [pc, #520]	; (8016e58 <main+0xb9c>)
 8016c4e:	00db      	lsls	r3, r3, #3
 8016c50:	4413      	add	r3, r2
 8016c52:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016c56:	2b95      	cmp	r3, #149	; 0x95
 8016c58:	dd1c      	ble.n	8016c94 <main+0x9d8>
	            List[MenuNow[Current]].Val-=25;
 8016c5a:	4b7d      	ldr	r3, [pc, #500]	; (8016e50 <main+0xb94>)
 8016c5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c60:	461a      	mov	r2, r3
 8016c62:	4b7c      	ldr	r3, [pc, #496]	; (8016e54 <main+0xb98>)
 8016c64:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016c68:	4a7b      	ldr	r2, [pc, #492]	; (8016e58 <main+0xb9c>)
 8016c6a:	00db      	lsls	r3, r3, #3
 8016c6c:	4413      	add	r3, r2
 8016c6e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016c72:	b29b      	uxth	r3, r3
 8016c74:	3b19      	subs	r3, #25
 8016c76:	b29a      	uxth	r2, r3
 8016c78:	4b75      	ldr	r3, [pc, #468]	; (8016e50 <main+0xb94>)
 8016c7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c7e:	4619      	mov	r1, r3
 8016c80:	4b74      	ldr	r3, [pc, #464]	; (8016e54 <main+0xb98>)
 8016c82:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016c86:	b211      	sxth	r1, r2
 8016c88:	4a73      	ldr	r2, [pc, #460]	; (8016e58 <main+0xb9c>)
 8016c8a:	00db      	lsls	r3, r3, #3
 8016c8c:	4413      	add	r3, r2
 8016c8e:	460a      	mov	r2, r1
 8016c90:	809a      	strh	r2, [r3, #4]
 8016c92:	e0a0      	b.n	8016dd6 <main+0xb1a>
	          else{
	          //============5.04�޸������߳�����������========
	            if(MenuNow[Current] == THRESHOLD){
 8016c94:	4b6e      	ldr	r3, [pc, #440]	; (8016e50 <main+0xb94>)
 8016c96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c9a:	461a      	mov	r2, r3
 8016c9c:	4b6d      	ldr	r3, [pc, #436]	; (8016e54 <main+0xb98>)
 8016c9e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016ca2:	2b10      	cmp	r3, #16
 8016ca4:	d121      	bne.n	8016cea <main+0xa2e>
	              if((List[V0_POSI].Val + List[THRESHOLD].Val) > 2)  //����������
 8016ca6:	4b6c      	ldr	r3, [pc, #432]	; (8016e58 <main+0xb9c>)
 8016ca8:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8016cac:	461a      	mov	r2, r3
 8016cae:	4b6a      	ldr	r3, [pc, #424]	; (8016e58 <main+0xb9c>)
 8016cb0:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8016cb4:	4413      	add	r3, r2
 8016cb6:	2b02      	cmp	r3, #2
 8016cb8:	f340 808d 	ble.w	8016dd6 <main+0xb1a>
	                List[MenuNow[Current]].Val--;
 8016cbc:	4b64      	ldr	r3, [pc, #400]	; (8016e50 <main+0xb94>)
 8016cbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016cc2:	461a      	mov	r2, r3
 8016cc4:	4b63      	ldr	r3, [pc, #396]	; (8016e54 <main+0xb98>)
 8016cc6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016cca:	461a      	mov	r2, r3
 8016ccc:	4962      	ldr	r1, [pc, #392]	; (8016e58 <main+0xb9c>)
 8016cce:	00d3      	lsls	r3, r2, #3
 8016cd0:	440b      	add	r3, r1
 8016cd2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016cd6:	b29b      	uxth	r3, r3
 8016cd8:	3b01      	subs	r3, #1
 8016cda:	b29b      	uxth	r3, r3
 8016cdc:	b218      	sxth	r0, r3
 8016cde:	495e      	ldr	r1, [pc, #376]	; (8016e58 <main+0xb9c>)
 8016ce0:	00d3      	lsls	r3, r2, #3
 8016ce2:	440b      	add	r3, r1
 8016ce4:	4602      	mov	r2, r0
 8016ce6:	809a      	strh	r2, [r3, #4]
 8016ce8:	e075      	b.n	8016dd6 <main+0xb1a>
	            }
	            else if(MenuNow[Current] == V0_POSI){
 8016cea:	4b59      	ldr	r3, [pc, #356]	; (8016e50 <main+0xb94>)
 8016cec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016cf0:	461a      	mov	r2, r3
 8016cf2:	4b58      	ldr	r3, [pc, #352]	; (8016e54 <main+0xb98>)
 8016cf4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016cf8:	2b03      	cmp	r3, #3
 8016cfa:	d134      	bne.n	8016d66 <main+0xaaa>
	              if((List[V0_POSI].Val + List[THRESHOLD].Val) <2){
 8016cfc:	4b56      	ldr	r3, [pc, #344]	; (8016e58 <main+0xb9c>)
 8016cfe:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8016d02:	461a      	mov	r2, r3
 8016d04:	4b54      	ldr	r3, [pc, #336]	; (8016e58 <main+0xb9c>)
 8016d06:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8016d0a:	4413      	add	r3, r2
 8016d0c:	2b01      	cmp	r3, #1
 8016d0e:	dc13      	bgt.n	8016d38 <main+0xa7c>
	                List[V0_POSI].Val--;
 8016d10:	4b51      	ldr	r3, [pc, #324]	; (8016e58 <main+0xb9c>)
 8016d12:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8016d16:	b29b      	uxth	r3, r3
 8016d18:	3b01      	subs	r3, #1
 8016d1a:	b29b      	uxth	r3, r3
 8016d1c:	b21a      	sxth	r2, r3
 8016d1e:	4b4e      	ldr	r3, [pc, #312]	; (8016e58 <main+0xb9c>)
 8016d20:	839a      	strh	r2, [r3, #28]
	                List[THRESHOLD].Val++;
 8016d22:	4b4d      	ldr	r3, [pc, #308]	; (8016e58 <main+0xb9c>)
 8016d24:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8016d28:	b29b      	uxth	r3, r3
 8016d2a:	3301      	adds	r3, #1
 8016d2c:	b29b      	uxth	r3, r3
 8016d2e:	b21a      	sxth	r2, r3
 8016d30:	4b49      	ldr	r3, [pc, #292]	; (8016e58 <main+0xb9c>)
 8016d32:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8016d36:	e04e      	b.n	8016dd6 <main+0xb1a>
	              }else List[MenuNow[Current]].Val--;
 8016d38:	4b45      	ldr	r3, [pc, #276]	; (8016e50 <main+0xb94>)
 8016d3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d3e:	461a      	mov	r2, r3
 8016d40:	4b44      	ldr	r3, [pc, #272]	; (8016e54 <main+0xb98>)
 8016d42:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016d46:	461a      	mov	r2, r3
 8016d48:	4943      	ldr	r1, [pc, #268]	; (8016e58 <main+0xb9c>)
 8016d4a:	00d3      	lsls	r3, r2, #3
 8016d4c:	440b      	add	r3, r1
 8016d4e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016d52:	b29b      	uxth	r3, r3
 8016d54:	3b01      	subs	r3, #1
 8016d56:	b29b      	uxth	r3, r3
 8016d58:	b218      	sxth	r0, r3
 8016d5a:	493f      	ldr	r1, [pc, #252]	; (8016e58 <main+0xb9c>)
 8016d5c:	00d3      	lsls	r3, r2, #3
 8016d5e:	440b      	add	r3, r1
 8016d60:	4602      	mov	r2, r0
 8016d62:	809a      	strh	r2, [r3, #4]
 8016d64:	e037      	b.n	8016dd6 <main+0xb1a>
	            }
	            else if((MenuNow[Current] ==V1_POSI) && (List[V1_POSI].Val <= List[V2_POSI].Val))
 8016d66:	4b3a      	ldr	r3, [pc, #232]	; (8016e50 <main+0xb94>)
 8016d68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d6c:	461a      	mov	r2, r3
 8016d6e:	4b39      	ldr	r3, [pc, #228]	; (8016e54 <main+0xb98>)
 8016d70:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016d74:	2b04      	cmp	r3, #4
 8016d76:	d118      	bne.n	8016daa <main+0xaee>
 8016d78:	4b37      	ldr	r3, [pc, #220]	; (8016e58 <main+0xb9c>)
 8016d7a:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8016d7e:	4b36      	ldr	r3, [pc, #216]	; (8016e58 <main+0xb9c>)
 8016d80:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8016d84:	429a      	cmp	r2, r3
 8016d86:	dc10      	bgt.n	8016daa <main+0xaee>
	            List[MenuNow[Current]].Val=List[V2_POSI].Val;
 8016d88:	4b31      	ldr	r3, [pc, #196]	; (8016e50 <main+0xb94>)
 8016d8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d8e:	461a      	mov	r2, r3
 8016d90:	4b30      	ldr	r3, [pc, #192]	; (8016e54 <main+0xb98>)
 8016d92:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016d96:	4618      	mov	r0, r3
 8016d98:	4b2f      	ldr	r3, [pc, #188]	; (8016e58 <main+0xb9c>)
 8016d9a:	f9b3 102c 	ldrsh.w	r1, [r3, #44]	; 0x2c
 8016d9e:	4a2e      	ldr	r2, [pc, #184]	; (8016e58 <main+0xb9c>)
 8016da0:	00c3      	lsls	r3, r0, #3
 8016da2:	4413      	add	r3, r2
 8016da4:	460a      	mov	r2, r1
 8016da6:	809a      	strh	r2, [r3, #4]
 8016da8:	e015      	b.n	8016dd6 <main+0xb1a>
	            else List[MenuNow[Current]].Val--;
 8016daa:	4b29      	ldr	r3, [pc, #164]	; (8016e50 <main+0xb94>)
 8016dac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016db0:	461a      	mov	r2, r3
 8016db2:	4b28      	ldr	r3, [pc, #160]	; (8016e54 <main+0xb98>)
 8016db4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016db8:	461a      	mov	r2, r3
 8016dba:	4927      	ldr	r1, [pc, #156]	; (8016e58 <main+0xb9c>)
 8016dbc:	00d3      	lsls	r3, r2, #3
 8016dbe:	440b      	add	r3, r1
 8016dc0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016dc4:	b29b      	uxth	r3, r3
 8016dc6:	3b01      	subs	r3, #1
 8016dc8:	b29b      	uxth	r3, r3
 8016dca:	b218      	sxth	r0, r3
 8016dcc:	4922      	ldr	r1, [pc, #136]	; (8016e58 <main+0xb9c>)
 8016dce:	00d3      	lsls	r3, r2, #3
 8016dd0:	440b      	add	r3, r1
 8016dd2:	4602      	mov	r2, r0
 8016dd4:	809a      	strh	r2, [r3, #4]
	          }
	          //==============================================
	            if(MenuNow[Current] == SMPL_DPTH){
 8016dd6:	4b1e      	ldr	r3, [pc, #120]	; (8016e50 <main+0xb94>)
 8016dd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ddc:	461a      	mov	r2, r3
 8016dde:	4b1d      	ldr	r3, [pc, #116]	; (8016e54 <main+0xb98>)
 8016de0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016de4:	2b09      	cmp	r3, #9
 8016de6:	d103      	bne.n	8016df0 <main+0xb34>
	              List[VIEWPOSI].Val=1 ;
 8016de8:	4b1b      	ldr	r3, [pc, #108]	; (8016e58 <main+0xb9c>)
 8016dea:	2201      	movs	r2, #1
 8016dec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	           }
	            if((MenuNow[Current] ==T2_POSI) && (List[T2_POSI].Val <= List[T1_POSI].Val))
 8016df0:	4b17      	ldr	r3, [pc, #92]	; (8016e50 <main+0xb94>)
 8016df2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016df6:	461a      	mov	r2, r3
 8016df8:	4b16      	ldr	r3, [pc, #88]	; (8016e54 <main+0xb98>)
 8016dfa:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016dfe:	2b0b      	cmp	r3, #11
 8016e00:	d117      	bne.n	8016e32 <main+0xb76>
 8016e02:	4b15      	ldr	r3, [pc, #84]	; (8016e58 <main+0xb9c>)
 8016e04:	f9b3 205c 	ldrsh.w	r2, [r3, #92]	; 0x5c
 8016e08:	4b13      	ldr	r3, [pc, #76]	; (8016e58 <main+0xb9c>)
 8016e0a:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8016e0e:	429a      	cmp	r2, r3
 8016e10:	dc0f      	bgt.n	8016e32 <main+0xb76>
	              List[MenuNow[Current]].Val=List[T1_POSI].Val;
 8016e12:	4b0f      	ldr	r3, [pc, #60]	; (8016e50 <main+0xb94>)
 8016e14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e18:	461a      	mov	r2, r3
 8016e1a:	4b0e      	ldr	r3, [pc, #56]	; (8016e54 <main+0xb98>)
 8016e1c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016e20:	4618      	mov	r0, r3
 8016e22:	4b0d      	ldr	r3, [pc, #52]	; (8016e58 <main+0xb9c>)
 8016e24:	f9b3 1054 	ldrsh.w	r1, [r3, #84]	; 0x54
 8016e28:	4a0b      	ldr	r2, [pc, #44]	; (8016e58 <main+0xb9c>)
 8016e2a:	00c3      	lsls	r3, r0, #3
 8016e2c:	4413      	add	r3, r2
 8016e2e:	460a      	mov	r2, r1
 8016e30:	809a      	strh	r2, [r3, #4]
	        }
	        if(Current == TRG) Status &= ~STOP; // �ı�ͬ��ģʽ��ָ�����״̬
 8016e32:	4b07      	ldr	r3, [pc, #28]	; (8016e50 <main+0xb94>)
 8016e34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e38:	2b02      	cmp	r3, #2
 8016e3a:	f040 821e 	bne.w	801727a <main+0xfbe>
 8016e3e:	4b07      	ldr	r3, [pc, #28]	; (8016e5c <main+0xba0>)
 8016e40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e44:	f023 0301 	bic.w	r3, r3, #1
 8016e48:	b21a      	sxth	r2, r3
 8016e4a:	4b04      	ldr	r3, [pc, #16]	; (8016e5c <main+0xba0>)
 8016e4c:	801a      	strh	r2, [r3, #0]
	        break;
 8016e4e:	e214      	b.n	801727a <main+0xfbe>
 8016e50:	2000079e 	.word	0x2000079e
 8016e54:	20000538 	.word	0x20000538
 8016e58:	20000298 	.word	0x20000298
 8016e5c:	200007a0 	.word	0x200007a0

	      case KEYCODE_RIGHT:
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 8016e60:	4bb7      	ldr	r3, [pc, #732]	; (8017140 <main+0xe84>)
 8016e62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e66:	2b07      	cmp	r3, #7
 8016e68:	d106      	bne.n	8016e78 <main+0xbbc>
 8016e6a:	4bb6      	ldr	r3, [pc, #728]	; (8017144 <main+0xe88>)
 8016e6c:	781b      	ldrb	r3, [r3, #0]
 8016e6e:	f003 0302 	and.w	r3, r3, #2
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	f000 8203 	beq.w	801727e <main+0xfc2>
	        List[MenuNow[Current]].Flg |= UPD;  // ˢ�±��ǰԭ��ʾ��Ŀ����
 8016e78:	4bb1      	ldr	r3, [pc, #708]	; (8017140 <main+0xe84>)
 8016e7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e7e:	461a      	mov	r2, r3
 8016e80:	4bb1      	ldr	r3, [pc, #708]	; (8017148 <main+0xe8c>)
 8016e82:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016e86:	4ab1      	ldr	r2, [pc, #708]	; (801714c <main+0xe90>)
 8016e88:	00db      	lsls	r3, r3, #3
 8016e8a:	4413      	add	r3, r2
 8016e8c:	799b      	ldrb	r3, [r3, #6]
 8016e8e:	4aac      	ldr	r2, [pc, #688]	; (8017140 <main+0xe84>)
 8016e90:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016e94:	4611      	mov	r1, r2
 8016e96:	4aac      	ldr	r2, [pc, #688]	; (8017148 <main+0xe8c>)
 8016e98:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8016e9c:	4610      	mov	r0, r2
 8016e9e:	f043 0320 	orr.w	r3, r3, #32
 8016ea2:	b2d9      	uxtb	r1, r3
 8016ea4:	4aa9      	ldr	r2, [pc, #676]	; (801714c <main+0xe90>)
 8016ea6:	00c3      	lsls	r3, r0, #3
 8016ea8:	4413      	add	r3, r2
 8016eaa:	460a      	mov	r2, r1
 8016eac:	719a      	strb	r2, [r3, #6]
	        if(List[MenuNow[Current]].Val >=MAX[MenuNow[Current]] ){
 8016eae:	4ba4      	ldr	r3, [pc, #656]	; (8017140 <main+0xe84>)
 8016eb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016eb4:	461a      	mov	r2, r3
 8016eb6:	4ba4      	ldr	r3, [pc, #656]	; (8017148 <main+0xe8c>)
 8016eb8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016ebc:	4aa3      	ldr	r2, [pc, #652]	; (801714c <main+0xe90>)
 8016ebe:	00db      	lsls	r3, r3, #3
 8016ec0:	4413      	add	r3, r2
 8016ec2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8016ec6:	4b9e      	ldr	r3, [pc, #632]	; (8017140 <main+0xe84>)
 8016ec8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ecc:	4619      	mov	r1, r3
 8016ece:	4b9e      	ldr	r3, [pc, #632]	; (8017148 <main+0xe8c>)
 8016ed0:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016ed4:	4619      	mov	r1, r3
 8016ed6:	4b9e      	ldr	r3, [pc, #632]	; (8017150 <main+0xe94>)
 8016ed8:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016edc:	429a      	cmp	r2, r3
 8016ede:	db73      	blt.n	8016fc8 <main+0xd0c>
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 8016ee0:	4b97      	ldr	r3, [pc, #604]	; (8017140 <main+0xe84>)
 8016ee2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ee6:	461a      	mov	r2, r3
 8016ee8:	4b97      	ldr	r3, [pc, #604]	; (8017148 <main+0xe8c>)
 8016eea:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016eee:	2b01      	cmp	r3, #1
 8016ef0:	d051      	beq.n	8016f96 <main+0xcda>
 8016ef2:	4b93      	ldr	r3, [pc, #588]	; (8017140 <main+0xe84>)
 8016ef4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ef8:	461a      	mov	r2, r3
 8016efa:	4b93      	ldr	r3, [pc, #588]	; (8017148 <main+0xe8c>)
 8016efc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016f00:	2b06      	cmp	r3, #6
 8016f02:	d048      	beq.n	8016f96 <main+0xcda>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016f04:	4b8e      	ldr	r3, [pc, #568]	; (8017140 <main+0xe84>)
 8016f06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f0a:	461a      	mov	r2, r3
 8016f0c:	4b8e      	ldr	r3, [pc, #568]	; (8017148 <main+0xe8c>)
 8016f0e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 8016f12:	2b0c      	cmp	r3, #12
 8016f14:	d03f      	beq.n	8016f96 <main+0xcda>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016f16:	4b8a      	ldr	r3, [pc, #552]	; (8017140 <main+0xe84>)
 8016f18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f1c:	461a      	mov	r2, r3
 8016f1e:	4b8a      	ldr	r3, [pc, #552]	; (8017148 <main+0xe8c>)
 8016f20:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016f24:	2b1c      	cmp	r3, #28
 8016f26:	d036      	beq.n	8016f96 <main+0xcda>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8016f28:	4b85      	ldr	r3, [pc, #532]	; (8017140 <main+0xe84>)
 8016f2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f2e:	461a      	mov	r2, r3
 8016f30:	4b85      	ldr	r3, [pc, #532]	; (8017148 <main+0xe8c>)
 8016f32:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016f36:	2b0f      	cmp	r3, #15
 8016f38:	d02d      	beq.n	8016f96 <main+0xcda>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8016f3a:	4b81      	ldr	r3, [pc, #516]	; (8017140 <main+0xe84>)
 8016f3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f40:	461a      	mov	r2, r3
 8016f42:	4b81      	ldr	r3, [pc, #516]	; (8017148 <main+0xe8c>)
 8016f44:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016f48:	2b0e      	cmp	r3, #14
 8016f4a:	d024      	beq.n	8016f96 <main+0xcda>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8016f4c:	4b7c      	ldr	r3, [pc, #496]	; (8017140 <main+0xe84>)
 8016f4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f52:	461a      	mov	r2, r3
 8016f54:	4b7c      	ldr	r3, [pc, #496]	; (8017148 <main+0xe8c>)
 8016f56:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8016f5a:	2b0d      	cmp	r3, #13
 8016f5c:	d01b      	beq.n	8016f96 <main+0xcda>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8016f5e:	4b78      	ldr	r3, [pc, #480]	; (8017140 <main+0xe84>)
 8016f60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f64:	461a      	mov	r2, r3
 8016f66:	4b78      	ldr	r3, [pc, #480]	; (8017148 <main+0xe8c>)
 8016f68:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016f6c:	2b1a      	cmp	r3, #26
 8016f6e:	d012      	beq.n	8016f96 <main+0xcda>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 8016f70:	4b73      	ldr	r3, [pc, #460]	; (8017140 <main+0xe84>)
 8016f72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f76:	461a      	mov	r2, r3
 8016f78:	4b73      	ldr	r3, [pc, #460]	; (8017148 <main+0xe8c>)
 8016f7a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8016f7e:	2b02      	cmp	r3, #2
 8016f80:	d009      	beq.n	8016f96 <main+0xcda>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 8016f82:	4b6f      	ldr	r3, [pc, #444]	; (8017140 <main+0xe84>)
 8016f84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f88:	461a      	mov	r2, r3
 8016f8a:	4b6f      	ldr	r3, [pc, #444]	; (8017148 <main+0xe8c>)
 8016f8c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016f90:	2b24      	cmp	r3, #36	; 0x24
 8016f92:	f040 8153 	bne.w	801723c <main+0xf80>
	            List[MenuNow[Current]].Val =MIN[MenuNow[Current]] ;
 8016f96:	4b6a      	ldr	r3, [pc, #424]	; (8017140 <main+0xe84>)
 8016f98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f9c:	461a      	mov	r2, r3
 8016f9e:	4b6a      	ldr	r3, [pc, #424]	; (8017148 <main+0xe8c>)
 8016fa0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016fa4:	461a      	mov	r2, r3
 8016fa6:	4b66      	ldr	r3, [pc, #408]	; (8017140 <main+0xe84>)
 8016fa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016fac:	4619      	mov	r1, r3
 8016fae:	4b66      	ldr	r3, [pc, #408]	; (8017148 <main+0xe8c>)
 8016fb0:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016fb4:	4618      	mov	r0, r3
 8016fb6:	4b67      	ldr	r3, [pc, #412]	; (8017154 <main+0xe98>)
 8016fb8:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 8016fbc:	4a63      	ldr	r2, [pc, #396]	; (801714c <main+0xe90>)
 8016fbe:	00c3      	lsls	r3, r0, #3
 8016fc0:	4413      	add	r3, r2
 8016fc2:	460a      	mov	r2, r1
 8016fc4:	809a      	strh	r2, [r3, #4]
 8016fc6:	e139      	b.n	801723c <main+0xf80>
	        } else {
	            if(MenuNow[Current] == VIEWPOSI)
 8016fc8:	4b5d      	ldr	r3, [pc, #372]	; (8017140 <main+0xe84>)
 8016fca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016fce:	461a      	mov	r2, r3
 8016fd0:	4b5d      	ldr	r3, [pc, #372]	; (8017148 <main+0xe8c>)
 8016fd2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016fd6:	2b08      	cmp	r3, #8
 8016fd8:	d15f      	bne.n	801709a <main+0xdde>
	            {
	              if(List[MenuNow[Current]].Val <(DEPTH[List[SMPL_DPTH].Val]-(350-List[SMPL_DPTH].Val)))
 8016fda:	4b59      	ldr	r3, [pc, #356]	; (8017140 <main+0xe84>)
 8016fdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016fe0:	461a      	mov	r2, r3
 8016fe2:	4b59      	ldr	r3, [pc, #356]	; (8017148 <main+0xe8c>)
 8016fe4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016fe8:	4a58      	ldr	r2, [pc, #352]	; (801714c <main+0xe90>)
 8016fea:	00db      	lsls	r3, r3, #3
 8016fec:	4413      	add	r3, r2
 8016fee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016ff2:	461a      	mov	r2, r3
 8016ff4:	4b55      	ldr	r3, [pc, #340]	; (801714c <main+0xe90>)
 8016ff6:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8016ffa:	4619      	mov	r1, r3
 8016ffc:	4b56      	ldr	r3, [pc, #344]	; (8017158 <main+0xe9c>)
 8016ffe:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8017002:	4619      	mov	r1, r3
 8017004:	4b51      	ldr	r3, [pc, #324]	; (801714c <main+0xe90>)
 8017006:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 801700a:	f5c3 73af 	rsb	r3, r3, #350	; 0x15e
 801700e:	1acb      	subs	r3, r1, r3
 8017010:	429a      	cmp	r2, r3
 8017012:	f280 80f2 	bge.w	80171fa <main+0xf3e>
	              {
	                if(List[MenuNow[Current]].Val >150 )
 8017016:	4b4a      	ldr	r3, [pc, #296]	; (8017140 <main+0xe84>)
 8017018:	f9b3 3000 	ldrsh.w	r3, [r3]
 801701c:	461a      	mov	r2, r3
 801701e:	4b4a      	ldr	r3, [pc, #296]	; (8017148 <main+0xe8c>)
 8017020:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017024:	4a49      	ldr	r2, [pc, #292]	; (801714c <main+0xe90>)
 8017026:	00db      	lsls	r3, r3, #3
 8017028:	4413      	add	r3, r2
 801702a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801702e:	2b96      	cmp	r3, #150	; 0x96
 8017030:	dd1c      	ble.n	801706c <main+0xdb0>
	                  List[MenuNow[Current]].Val += 25;
 8017032:	4b43      	ldr	r3, [pc, #268]	; (8017140 <main+0xe84>)
 8017034:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017038:	461a      	mov	r2, r3
 801703a:	4b43      	ldr	r3, [pc, #268]	; (8017148 <main+0xe8c>)
 801703c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017040:	4a42      	ldr	r2, [pc, #264]	; (801714c <main+0xe90>)
 8017042:	00db      	lsls	r3, r3, #3
 8017044:	4413      	add	r3, r2
 8017046:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801704a:	b29b      	uxth	r3, r3
 801704c:	3319      	adds	r3, #25
 801704e:	b29a      	uxth	r2, r3
 8017050:	4b3b      	ldr	r3, [pc, #236]	; (8017140 <main+0xe84>)
 8017052:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017056:	4619      	mov	r1, r3
 8017058:	4b3b      	ldr	r3, [pc, #236]	; (8017148 <main+0xe8c>)
 801705a:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 801705e:	b211      	sxth	r1, r2
 8017060:	4a3a      	ldr	r2, [pc, #232]	; (801714c <main+0xe90>)
 8017062:	00db      	lsls	r3, r3, #3
 8017064:	4413      	add	r3, r2
 8017066:	460a      	mov	r2, r1
 8017068:	809a      	strh	r2, [r3, #4]
 801706a:	e0c6      	b.n	80171fa <main+0xf3e>
	                else
	                  List[MenuNow[Current]].Val++;
 801706c:	4b34      	ldr	r3, [pc, #208]	; (8017140 <main+0xe84>)
 801706e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017072:	461a      	mov	r2, r3
 8017074:	4b34      	ldr	r3, [pc, #208]	; (8017148 <main+0xe8c>)
 8017076:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801707a:	461a      	mov	r2, r3
 801707c:	4933      	ldr	r1, [pc, #204]	; (801714c <main+0xe90>)
 801707e:	00d3      	lsls	r3, r2, #3
 8017080:	440b      	add	r3, r1
 8017082:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017086:	b29b      	uxth	r3, r3
 8017088:	3301      	adds	r3, #1
 801708a:	b29b      	uxth	r3, r3
 801708c:	b218      	sxth	r0, r3
 801708e:	492f      	ldr	r1, [pc, #188]	; (801714c <main+0xe90>)
 8017090:	00d3      	lsls	r3, r2, #3
 8017092:	440b      	add	r3, r1
 8017094:	4602      	mov	r2, r0
 8017096:	809a      	strh	r2, [r3, #4]
 8017098:	e0af      	b.n	80171fa <main+0xf3e>
	              }
	            }
	            else{
	              //============4.27�޸������߳�����������========
	              if(MenuNow[Current] == THRESHOLD){
 801709a:	4b29      	ldr	r3, [pc, #164]	; (8017140 <main+0xe84>)
 801709c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80170a0:	461a      	mov	r2, r3
 80170a2:	4b29      	ldr	r3, [pc, #164]	; (8017148 <main+0xe8c>)
 80170a4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80170a8:	2b10      	cmp	r3, #16
 80170aa:	d121      	bne.n	80170f0 <main+0xe34>
	                if((List[V0_POSI].Val + List[THRESHOLD].Val) < 198)
 80170ac:	4b27      	ldr	r3, [pc, #156]	; (801714c <main+0xe90>)
 80170ae:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80170b2:	461a      	mov	r2, r3
 80170b4:	4b25      	ldr	r3, [pc, #148]	; (801714c <main+0xe90>)
 80170b6:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 80170ba:	4413      	add	r3, r2
 80170bc:	2bc5      	cmp	r3, #197	; 0xc5
 80170be:	f300 809c 	bgt.w	80171fa <main+0xf3e>
	                 List[MenuNow[Current]].Val++;
 80170c2:	4b1f      	ldr	r3, [pc, #124]	; (8017140 <main+0xe84>)
 80170c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80170c8:	461a      	mov	r2, r3
 80170ca:	4b1f      	ldr	r3, [pc, #124]	; (8017148 <main+0xe8c>)
 80170cc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80170d0:	461a      	mov	r2, r3
 80170d2:	491e      	ldr	r1, [pc, #120]	; (801714c <main+0xe90>)
 80170d4:	00d3      	lsls	r3, r2, #3
 80170d6:	440b      	add	r3, r1
 80170d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80170dc:	b29b      	uxth	r3, r3
 80170de:	3301      	adds	r3, #1
 80170e0:	b29b      	uxth	r3, r3
 80170e2:	b218      	sxth	r0, r3
 80170e4:	4919      	ldr	r1, [pc, #100]	; (801714c <main+0xe90>)
 80170e6:	00d3      	lsls	r3, r2, #3
 80170e8:	440b      	add	r3, r1
 80170ea:	4602      	mov	r2, r0
 80170ec:	809a      	strh	r2, [r3, #4]
 80170ee:	e084      	b.n	80171fa <main+0xf3e>
	              }
	              else if(MenuNow[Current] == V0_POSI){
 80170f0:	4b13      	ldr	r3, [pc, #76]	; (8017140 <main+0xe84>)
 80170f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80170f6:	461a      	mov	r2, r3
 80170f8:	4b13      	ldr	r3, [pc, #76]	; (8017148 <main+0xe8c>)
 80170fa:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80170fe:	2b03      	cmp	r3, #3
 8017100:	d143      	bne.n	801718a <main+0xece>
	                if((List[V0_POSI].Val + List[THRESHOLD].Val) > 198){
 8017102:	4b12      	ldr	r3, [pc, #72]	; (801714c <main+0xe90>)
 8017104:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8017108:	461a      	mov	r2, r3
 801710a:	4b10      	ldr	r3, [pc, #64]	; (801714c <main+0xe90>)
 801710c:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8017110:	4413      	add	r3, r2
 8017112:	2bc6      	cmp	r3, #198	; 0xc6
 8017114:	dd22      	ble.n	801715c <main+0xea0>
	                  List[V0_POSI].Val++;
 8017116:	4b0d      	ldr	r3, [pc, #52]	; (801714c <main+0xe90>)
 8017118:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801711c:	b29b      	uxth	r3, r3
 801711e:	3301      	adds	r3, #1
 8017120:	b29b      	uxth	r3, r3
 8017122:	b21a      	sxth	r2, r3
 8017124:	4b09      	ldr	r3, [pc, #36]	; (801714c <main+0xe90>)
 8017126:	839a      	strh	r2, [r3, #28]
	                  List[THRESHOLD].Val--;
 8017128:	4b08      	ldr	r3, [pc, #32]	; (801714c <main+0xe90>)
 801712a:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 801712e:	b29b      	uxth	r3, r3
 8017130:	3b01      	subs	r3, #1
 8017132:	b29b      	uxth	r3, r3
 8017134:	b21a      	sxth	r2, r3
 8017136:	4b05      	ldr	r3, [pc, #20]	; (801714c <main+0xe90>)
 8017138:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 801713c:	e05d      	b.n	80171fa <main+0xf3e>
 801713e:	bf00      	nop
 8017140:	2000079e 	.word	0x2000079e
 8017144:	2000078e 	.word	0x2000078e
 8017148:	20000538 	.word	0x20000538
 801714c:	20000298 	.word	0x20000298
 8017150:	080021b8 	.word	0x080021b8
 8017154:	08002214 	.word	0x08002214
 8017158:	08002270 	.word	0x08002270
	                }else List[MenuNow[Current]].Val++;
 801715c:	4b64      	ldr	r3, [pc, #400]	; (80172f0 <main+0x1034>)
 801715e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017162:	461a      	mov	r2, r3
 8017164:	4b63      	ldr	r3, [pc, #396]	; (80172f4 <main+0x1038>)
 8017166:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801716a:	461a      	mov	r2, r3
 801716c:	4962      	ldr	r1, [pc, #392]	; (80172f8 <main+0x103c>)
 801716e:	00d3      	lsls	r3, r2, #3
 8017170:	440b      	add	r3, r1
 8017172:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017176:	b29b      	uxth	r3, r3
 8017178:	3301      	adds	r3, #1
 801717a:	b29b      	uxth	r3, r3
 801717c:	b218      	sxth	r0, r3
 801717e:	495e      	ldr	r1, [pc, #376]	; (80172f8 <main+0x103c>)
 8017180:	00d3      	lsls	r3, r2, #3
 8017182:	440b      	add	r3, r1
 8017184:	4602      	mov	r2, r0
 8017186:	809a      	strh	r2, [r3, #4]
 8017188:	e037      	b.n	80171fa <main+0xf3e>
	              }
	              else if((MenuNow[Current] ==V2_POSI) && (List[V2_POSI].Val >= List[V1_POSI].Val))
 801718a:	4b59      	ldr	r3, [pc, #356]	; (80172f0 <main+0x1034>)
 801718c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017190:	461a      	mov	r2, r3
 8017192:	4b58      	ldr	r3, [pc, #352]	; (80172f4 <main+0x1038>)
 8017194:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017198:	2b05      	cmp	r3, #5
 801719a:	d118      	bne.n	80171ce <main+0xf12>
 801719c:	4b56      	ldr	r3, [pc, #344]	; (80172f8 <main+0x103c>)
 801719e:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 80171a2:	4b55      	ldr	r3, [pc, #340]	; (80172f8 <main+0x103c>)
 80171a4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80171a8:	429a      	cmp	r2, r3
 80171aa:	db10      	blt.n	80171ce <main+0xf12>
	                List[MenuNow[Current]].Val=List[V1_POSI].Val;
 80171ac:	4b50      	ldr	r3, [pc, #320]	; (80172f0 <main+0x1034>)
 80171ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80171b2:	461a      	mov	r2, r3
 80171b4:	4b4f      	ldr	r3, [pc, #316]	; (80172f4 <main+0x1038>)
 80171b6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80171ba:	4618      	mov	r0, r3
 80171bc:	4b4e      	ldr	r3, [pc, #312]	; (80172f8 <main+0x103c>)
 80171be:	f9b3 1024 	ldrsh.w	r1, [r3, #36]	; 0x24
 80171c2:	4a4d      	ldr	r2, [pc, #308]	; (80172f8 <main+0x103c>)
 80171c4:	00c3      	lsls	r3, r0, #3
 80171c6:	4413      	add	r3, r2
 80171c8:	460a      	mov	r2, r1
 80171ca:	809a      	strh	r2, [r3, #4]
 80171cc:	e015      	b.n	80171fa <main+0xf3e>
	              else List[MenuNow[Current]].Val++;
 80171ce:	4b48      	ldr	r3, [pc, #288]	; (80172f0 <main+0x1034>)
 80171d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80171d4:	461a      	mov	r2, r3
 80171d6:	4b47      	ldr	r3, [pc, #284]	; (80172f4 <main+0x1038>)
 80171d8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80171dc:	461a      	mov	r2, r3
 80171de:	4946      	ldr	r1, [pc, #280]	; (80172f8 <main+0x103c>)
 80171e0:	00d3      	lsls	r3, r2, #3
 80171e2:	440b      	add	r3, r1
 80171e4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80171e8:	b29b      	uxth	r3, r3
 80171ea:	3301      	adds	r3, #1
 80171ec:	b29b      	uxth	r3, r3
 80171ee:	b218      	sxth	r0, r3
 80171f0:	4941      	ldr	r1, [pc, #260]	; (80172f8 <main+0x103c>)
 80171f2:	00d3      	lsls	r3, r2, #3
 80171f4:	440b      	add	r3, r1
 80171f6:	4602      	mov	r2, r0
 80171f8:	809a      	strh	r2, [r3, #4]
	            }
	            //==============================================
	            if((MenuNow[Current] ==T1_POSI) && (List[T1_POSI].Val >= List[T2_POSI].Val))
 80171fa:	4b3d      	ldr	r3, [pc, #244]	; (80172f0 <main+0x1034>)
 80171fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017200:	461a      	mov	r2, r3
 8017202:	4b3c      	ldr	r3, [pc, #240]	; (80172f4 <main+0x1038>)
 8017204:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017208:	2b0a      	cmp	r3, #10
 801720a:	d117      	bne.n	801723c <main+0xf80>
 801720c:	4b3a      	ldr	r3, [pc, #232]	; (80172f8 <main+0x103c>)
 801720e:	f9b3 2054 	ldrsh.w	r2, [r3, #84]	; 0x54
 8017212:	4b39      	ldr	r3, [pc, #228]	; (80172f8 <main+0x103c>)
 8017214:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 8017218:	429a      	cmp	r2, r3
 801721a:	db0f      	blt.n	801723c <main+0xf80>
	               List[MenuNow[Current]].Val=List[T2_POSI].Val;
 801721c:	4b34      	ldr	r3, [pc, #208]	; (80172f0 <main+0x1034>)
 801721e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017222:	461a      	mov	r2, r3
 8017224:	4b33      	ldr	r3, [pc, #204]	; (80172f4 <main+0x1038>)
 8017226:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801722a:	4618      	mov	r0, r3
 801722c:	4b32      	ldr	r3, [pc, #200]	; (80172f8 <main+0x103c>)
 801722e:	f9b3 105c 	ldrsh.w	r1, [r3, #92]	; 0x5c
 8017232:	4a31      	ldr	r2, [pc, #196]	; (80172f8 <main+0x103c>)
 8017234:	00c3      	lsls	r3, r0, #3
 8017236:	4413      	add	r3, r2
 8017238:	460a      	mov	r2, r1
 801723a:	809a      	strh	r2, [r3, #4]
	        }
	        if(Current == TRG) {Status &= ~STOP; // �ı�ͬ��ģʽ��ָ�����״̬
 801723c:	4b2c      	ldr	r3, [pc, #176]	; (80172f0 <main+0x1034>)
 801723e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017242:	2b02      	cmp	r3, #2
 8017244:	d11d      	bne.n	8017282 <main+0xfc6>
 8017246:	4b2d      	ldr	r3, [pc, #180]	; (80172fc <main+0x1040>)
 8017248:	f9b3 3000 	ldrsh.w	r3, [r3]
 801724c:	f023 0301 	bic.w	r3, r3, #1
 8017250:	b21a      	sxth	r2, r3
 8017252:	4b2a      	ldr	r3, [pc, #168]	; (80172fc <main+0x1040>)
 8017254:	801a      	strh	r2, [r3, #0]
	        if(List[SYNCMODE].Val==SINGL)ADC_Start(); }
 8017256:	4b28      	ldr	r3, [pc, #160]	; (80172f8 <main+0x103c>)
 8017258:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 801725c:	2b04      	cmp	r3, #4
 801725e:	d110      	bne.n	8017282 <main+0xfc6>
 8017260:	f7f5 fa44 	bl	800c6ec <ADC_Start>
	        break;
 8017264:	e00d      	b.n	8017282 <main+0xfc6>
	         break;
 8017266:	bf00      	nop
 8017268:	e00c      	b.n	8017284 <main+0xfc8>
	         break;
 801726a:	bf00      	nop
 801726c:	e00a      	b.n	8017284 <main+0xfc8>
	        break;
 801726e:	bf00      	nop
 8017270:	e008      	b.n	8017284 <main+0xfc8>
	        break;
 8017272:	bf00      	nop
 8017274:	e006      	b.n	8017284 <main+0xfc8>
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 8017276:	bf00      	nop
 8017278:	e004      	b.n	8017284 <main+0xfc8>
	        break;
 801727a:	bf00      	nop
 801727c:	e002      	b.n	8017284 <main+0xfc8>
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 801727e:	bf00      	nop
 8017280:	e000      	b.n	8017284 <main+0xfc8>
	        break;
 8017282:	bf00      	nop

	     } //switch end
	     List[MenuNow[Current]].Flg |= UPD;
 8017284:	4b1a      	ldr	r3, [pc, #104]	; (80172f0 <main+0x1034>)
 8017286:	f9b3 3000 	ldrsh.w	r3, [r3]
 801728a:	461a      	mov	r2, r3
 801728c:	4b19      	ldr	r3, [pc, #100]	; (80172f4 <main+0x1038>)
 801728e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017292:	4a19      	ldr	r2, [pc, #100]	; (80172f8 <main+0x103c>)
 8017294:	00db      	lsls	r3, r3, #3
 8017296:	4413      	add	r3, r2
 8017298:	799b      	ldrb	r3, [r3, #6]
 801729a:	4a15      	ldr	r2, [pc, #84]	; (80172f0 <main+0x1034>)
 801729c:	f9b2 2000 	ldrsh.w	r2, [r2]
 80172a0:	4611      	mov	r1, r2
 80172a2:	4a14      	ldr	r2, [pc, #80]	; (80172f4 <main+0x1038>)
 80172a4:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80172a8:	4610      	mov	r0, r2
 80172aa:	f043 0320 	orr.w	r3, r3, #32
 80172ae:	b2d9      	uxtb	r1, r3
 80172b0:	4a11      	ldr	r2, [pc, #68]	; (80172f8 <main+0x103c>)
 80172b2:	00c3      	lsls	r3, r0, #3
 80172b4:	4413      	add	r3, r2
 80172b6:	460a      	mov	r2, r1
 80172b8:	719a      	strb	r2, [r3, #6]
	     StdBy_Time  = List[STANDBY].Val * MIN_UNIT;  //����
 80172ba:	4b0f      	ldr	r3, [pc, #60]	; (80172f8 <main+0x103c>)
 80172bc:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 80172c0:	b29b      	uxth	r3, r3
 80172c2:	461a      	mov	r2, r3
 80172c4:	0112      	lsls	r2, r2, #4
 80172c6:	1ad3      	subs	r3, r2, r3
 80172c8:	009b      	lsls	r3, r3, #2
 80172ca:	b29b      	uxth	r3, r3
 80172cc:	b21a      	sxth	r2, r3
 80172ce:	4b0c      	ldr	r3, [pc, #48]	; (8017300 <main+0x1044>)
 80172d0:	801a      	strh	r2, [r3, #0]

	      if(PopType & LIST_POP) Show_List();
 80172d2:	4b0c      	ldr	r3, [pc, #48]	; (8017304 <main+0x1048>)
 80172d4:	781b      	ldrb	r3, [r3, #0]
 80172d6:	f003 0302 	and.w	r3, r3, #2
 80172da:	2b00      	cmp	r3, #0
 80172dc:	d001      	beq.n	80172e2 <main+0x1026>
 80172de:	f7fd fa2f 	bl	8014740 <Show_List>
	      Update_Title();
 80172e2:	f7fb f867 	bl	80123b4 <Update_Title>
	      Key_Buffer = 0;
 80172e6:	4b08      	ldr	r3, [pc, #32]	; (8017308 <main+0x104c>)
 80172e8:	2200      	movs	r2, #0
 80172ea:	701a      	strb	r2, [r3, #0]
	    if((List[STANDBY].Val != 0)&&(StdBy_Time == 0))
 80172ec:	f7ff b868 	b.w	80163c0 <main+0x104>
 80172f0:	2000079e 	.word	0x2000079e
 80172f4:	20000538 	.word	0x20000538
 80172f8:	20000298 	.word	0x20000298
 80172fc:	200007a0 	.word	0x200007a0
 8017300:	2000079c 	.word	0x2000079c
 8017304:	2000078e 	.word	0x2000078e
 8017308:	2000077d 	.word	0x2000077d

0801730c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 801730c:	b580      	push	{r7, lr}
 801730e:	b094      	sub	sp, #80	; 0x50
 8017310:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8017312:	f107 031c 	add.w	r3, r7, #28
 8017316:	2234      	movs	r2, #52	; 0x34
 8017318:	2100      	movs	r1, #0
 801731a:	4618      	mov	r0, r3
 801731c:	f00b fc6a 	bl	8022bf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8017320:	f107 0308 	add.w	r3, r7, #8
 8017324:	2200      	movs	r2, #0
 8017326:	601a      	str	r2, [r3, #0]
 8017328:	605a      	str	r2, [r3, #4]
 801732a:	609a      	str	r2, [r3, #8]
 801732c:	60da      	str	r2, [r3, #12]
 801732e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8017330:	2300      	movs	r3, #0
 8017332:	607b      	str	r3, [r7, #4]
 8017334:	4b2d      	ldr	r3, [pc, #180]	; (80173ec <SystemClock_Config+0xe0>)
 8017336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017338:	4a2c      	ldr	r2, [pc, #176]	; (80173ec <SystemClock_Config+0xe0>)
 801733a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801733e:	6413      	str	r3, [r2, #64]	; 0x40
 8017340:	4b2a      	ldr	r3, [pc, #168]	; (80173ec <SystemClock_Config+0xe0>)
 8017342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017348:	607b      	str	r3, [r7, #4]
 801734a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801734c:	2300      	movs	r3, #0
 801734e:	603b      	str	r3, [r7, #0]
 8017350:	4b27      	ldr	r3, [pc, #156]	; (80173f0 <SystemClock_Config+0xe4>)
 8017352:	681b      	ldr	r3, [r3, #0]
 8017354:	4a26      	ldr	r2, [pc, #152]	; (80173f0 <SystemClock_Config+0xe4>)
 8017356:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801735a:	6013      	str	r3, [r2, #0]
 801735c:	4b24      	ldr	r3, [pc, #144]	; (80173f0 <SystemClock_Config+0xe4>)
 801735e:	681b      	ldr	r3, [r3, #0]
 8017360:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8017364:	603b      	str	r3, [r7, #0]
 8017366:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8017368:	2301      	movs	r3, #1
 801736a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801736c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8017370:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8017372:	2302      	movs	r3, #2
 8017374:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8017376:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801737a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 801737c:	2319      	movs	r3, #25
 801737e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8017380:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8017384:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8017386:	2302      	movs	r3, #2
 8017388:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 5;
 801738a:	2305      	movs	r3, #5
 801738c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 801738e:	2302      	movs	r3, #2
 8017390:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8017392:	f107 031c 	add.w	r3, r7, #28
 8017396:	4618      	mov	r0, r3
 8017398:	f004 fbb4 	bl	801bb04 <HAL_RCC_OscConfig>
 801739c:	4603      	mov	r3, r0
 801739e:	2b00      	cmp	r3, #0
 80173a0:	d001      	beq.n	80173a6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80173a2:	f000 fc21 	bl	8017be8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80173a6:	f003 fde5 	bl	801af74 <HAL_PWREx_EnableOverDrive>
 80173aa:	4603      	mov	r3, r0
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d001      	beq.n	80173b4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80173b0:	f000 fc1a 	bl	8017be8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80173b4:	230f      	movs	r3, #15
 80173b6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80173b8:	2302      	movs	r3, #2
 80173ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80173bc:	2300      	movs	r3, #0
 80173be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80173c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80173c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80173c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80173ca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80173cc:	f107 0308 	add.w	r3, r7, #8
 80173d0:	2105      	movs	r1, #5
 80173d2:	4618      	mov	r0, r3
 80173d4:	f003 fe1e 	bl	801b014 <HAL_RCC_ClockConfig>
 80173d8:	4603      	mov	r3, r0
 80173da:	2b00      	cmp	r3, #0
 80173dc:	d001      	beq.n	80173e2 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80173de:	f000 fc03 	bl	8017be8 <Error_Handler>
  }
}
 80173e2:	bf00      	nop
 80173e4:	3750      	adds	r7, #80	; 0x50
 80173e6:	46bd      	mov	sp, r7
 80173e8:	bd80      	pop	{r7, pc}
 80173ea:	bf00      	nop
 80173ec:	40023800 	.word	0x40023800
 80173f0:	40007000 	.word	0x40007000

080173f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80173f4:	b580      	push	{r7, lr}
 80173f6:	b084      	sub	sp, #16
 80173f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80173fa:	463b      	mov	r3, r7
 80173fc:	2200      	movs	r2, #0
 80173fe:	601a      	str	r2, [r3, #0]
 8017400:	605a      	str	r2, [r3, #4]
 8017402:	609a      	str	r2, [r3, #8]
 8017404:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8017406:	4b22      	ldr	r3, [pc, #136]	; (8017490 <MX_ADC1_Init+0x9c>)
 8017408:	4a22      	ldr	r2, [pc, #136]	; (8017494 <MX_ADC1_Init+0xa0>)
 801740a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 801740c:	4b20      	ldr	r3, [pc, #128]	; (8017490 <MX_ADC1_Init+0x9c>)
 801740e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8017412:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8017414:	4b1e      	ldr	r3, [pc, #120]	; (8017490 <MX_ADC1_Init+0x9c>)
 8017416:	2200      	movs	r2, #0
 8017418:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 801741a:	4b1d      	ldr	r3, [pc, #116]	; (8017490 <MX_ADC1_Init+0x9c>)
 801741c:	2200      	movs	r2, #0
 801741e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8017420:	4b1b      	ldr	r3, [pc, #108]	; (8017490 <MX_ADC1_Init+0x9c>)
 8017422:	2200      	movs	r2, #0
 8017424:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8017426:	4b1a      	ldr	r3, [pc, #104]	; (8017490 <MX_ADC1_Init+0x9c>)
 8017428:	2200      	movs	r2, #0
 801742a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 801742e:	4b18      	ldr	r3, [pc, #96]	; (8017490 <MX_ADC1_Init+0x9c>)
 8017430:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017434:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 8017436:	4b16      	ldr	r3, [pc, #88]	; (8017490 <MX_ADC1_Init+0x9c>)
 8017438:	2200      	movs	r2, #0
 801743a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 801743c:	4b14      	ldr	r3, [pc, #80]	; (8017490 <MX_ADC1_Init+0x9c>)
 801743e:	2200      	movs	r2, #0
 8017440:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8017442:	4b13      	ldr	r3, [pc, #76]	; (8017490 <MX_ADC1_Init+0x9c>)
 8017444:	2201      	movs	r2, #1
 8017446:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8017448:	4b11      	ldr	r3, [pc, #68]	; (8017490 <MX_ADC1_Init+0x9c>)
 801744a:	2200      	movs	r2, #0
 801744c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8017450:	4b0f      	ldr	r3, [pc, #60]	; (8017490 <MX_ADC1_Init+0x9c>)
 8017452:	2201      	movs	r2, #1
 8017454:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8017456:	480e      	ldr	r0, [pc, #56]	; (8017490 <MX_ADC1_Init+0x9c>)
 8017458:	f000 ffbc 	bl	80183d4 <HAL_ADC_Init>
 801745c:	4603      	mov	r3, r0
 801745e:	2b00      	cmp	r3, #0
 8017460:	d001      	beq.n	8017466 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8017462:	f000 fbc1 	bl	8017be8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8017466:	2306      	movs	r3, #6
 8017468:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 801746a:	2301      	movs	r3, #1
 801746c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 801746e:	2300      	movs	r3, #0
 8017470:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8017472:	463b      	mov	r3, r7
 8017474:	4619      	mov	r1, r3
 8017476:	4806      	ldr	r0, [pc, #24]	; (8017490 <MX_ADC1_Init+0x9c>)
 8017478:	f000 fff0 	bl	801845c <HAL_ADC_ConfigChannel>
 801747c:	4603      	mov	r3, r0
 801747e:	2b00      	cmp	r3, #0
 8017480:	d001      	beq.n	8017486 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8017482:	f000 fbb1 	bl	8017be8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8017486:	bf00      	nop
 8017488:	3710      	adds	r7, #16
 801748a:	46bd      	mov	sp, r7
 801748c:	bd80      	pop	{r7, pc}
 801748e:	bf00      	nop
 8017490:	20006ad8 	.word	0x20006ad8
 8017494:	40012000 	.word	0x40012000

08017498 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8017498:	b580      	push	{r7, lr}
 801749a:	b084      	sub	sp, #16
 801749c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 801749e:	463b      	mov	r3, r7
 80174a0:	2200      	movs	r2, #0
 80174a2:	601a      	str	r2, [r3, #0]
 80174a4:	605a      	str	r2, [r3, #4]
 80174a6:	609a      	str	r2, [r3, #8]
 80174a8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80174aa:	4b22      	ldr	r3, [pc, #136]	; (8017534 <MX_ADC2_Init+0x9c>)
 80174ac:	4a22      	ldr	r2, [pc, #136]	; (8017538 <MX_ADC2_Init+0xa0>)
 80174ae:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80174b0:	4b20      	ldr	r3, [pc, #128]	; (8017534 <MX_ADC2_Init+0x9c>)
 80174b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80174b6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80174b8:	4b1e      	ldr	r3, [pc, #120]	; (8017534 <MX_ADC2_Init+0x9c>)
 80174ba:	2200      	movs	r2, #0
 80174bc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80174be:	4b1d      	ldr	r3, [pc, #116]	; (8017534 <MX_ADC2_Init+0x9c>)
 80174c0:	2200      	movs	r2, #0
 80174c2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80174c4:	4b1b      	ldr	r3, [pc, #108]	; (8017534 <MX_ADC2_Init+0x9c>)
 80174c6:	2200      	movs	r2, #0
 80174c8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80174ca:	4b1a      	ldr	r3, [pc, #104]	; (8017534 <MX_ADC2_Init+0x9c>)
 80174cc:	2200      	movs	r2, #0
 80174ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80174d2:	4b18      	ldr	r3, [pc, #96]	; (8017534 <MX_ADC2_Init+0x9c>)
 80174d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80174d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 80174da:	4b16      	ldr	r3, [pc, #88]	; (8017534 <MX_ADC2_Init+0x9c>)
 80174dc:	2200      	movs	r2, #0
 80174de:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80174e0:	4b14      	ldr	r3, [pc, #80]	; (8017534 <MX_ADC2_Init+0x9c>)
 80174e2:	2200      	movs	r2, #0
 80174e4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80174e6:	4b13      	ldr	r3, [pc, #76]	; (8017534 <MX_ADC2_Init+0x9c>)
 80174e8:	2201      	movs	r2, #1
 80174ea:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80174ec:	4b11      	ldr	r3, [pc, #68]	; (8017534 <MX_ADC2_Init+0x9c>)
 80174ee:	2200      	movs	r2, #0
 80174f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80174f4:	4b0f      	ldr	r3, [pc, #60]	; (8017534 <MX_ADC2_Init+0x9c>)
 80174f6:	2201      	movs	r2, #1
 80174f8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80174fa:	480e      	ldr	r0, [pc, #56]	; (8017534 <MX_ADC2_Init+0x9c>)
 80174fc:	f000 ff6a 	bl	80183d4 <HAL_ADC_Init>
 8017500:	4603      	mov	r3, r0
 8017502:	2b00      	cmp	r3, #0
 8017504:	d001      	beq.n	801750a <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 8017506:	f000 fb6f 	bl	8017be8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 801750a:	2307      	movs	r3, #7
 801750c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 801750e:	2301      	movs	r3, #1
 8017510:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8017512:	2300      	movs	r3, #0
 8017514:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8017516:	463b      	mov	r3, r7
 8017518:	4619      	mov	r1, r3
 801751a:	4806      	ldr	r0, [pc, #24]	; (8017534 <MX_ADC2_Init+0x9c>)
 801751c:	f000 ff9e 	bl	801845c <HAL_ADC_ConfigChannel>
 8017520:	4603      	mov	r3, r0
 8017522:	2b00      	cmp	r3, #0
 8017524:	d001      	beq.n	801752a <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 8017526:	f000 fb5f 	bl	8017be8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 801752a:	bf00      	nop
 801752c:	3710      	adds	r7, #16
 801752e:	46bd      	mov	sp, r7
 8017530:	bd80      	pop	{r7, pc}
 8017532:	bf00      	nop
 8017534:	200068e8 	.word	0x200068e8
 8017538:	40012100 	.word	0x40012100

0801753c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 801753c:	b580      	push	{r7, lr}
 801753e:	b082      	sub	sp, #8
 8017540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8017542:	463b      	mov	r3, r7
 8017544:	2200      	movs	r2, #0
 8017546:	601a      	str	r2, [r3, #0]
 8017548:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 801754a:	4b19      	ldr	r3, [pc, #100]	; (80175b0 <MX_DAC_Init+0x74>)
 801754c:	4a19      	ldr	r2, [pc, #100]	; (80175b4 <MX_DAC_Init+0x78>)
 801754e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8017550:	4817      	ldr	r0, [pc, #92]	; (80175b0 <MX_DAC_Init+0x74>)
 8017552:	f001 fac2 	bl	8018ada <HAL_DAC_Init>
 8017556:	4603      	mov	r3, r0
 8017558:	2b00      	cmp	r3, #0
 801755a:	d001      	beq.n	8017560 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 801755c:	f000 fb44 	bl	8017be8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8017560:	2300      	movs	r3, #0
 8017562:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8017564:	2300      	movs	r3, #0
 8017566:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8017568:	463b      	mov	r3, r7
 801756a:	2200      	movs	r2, #0
 801756c:	4619      	mov	r1, r3
 801756e:	4810      	ldr	r0, [pc, #64]	; (80175b0 <MX_DAC_Init+0x74>)
 8017570:	f001 fafa 	bl	8018b68 <HAL_DAC_ConfigChannel>
 8017574:	4603      	mov	r3, r0
 8017576:	2b00      	cmp	r3, #0
 8017578:	d001      	beq.n	801757e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 801757a:	f000 fb35 	bl	8017be8 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 801757e:	2302      	movs	r3, #2
 8017580:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8017582:	463b      	mov	r3, r7
 8017584:	2210      	movs	r2, #16
 8017586:	4619      	mov	r1, r3
 8017588:	4809      	ldr	r0, [pc, #36]	; (80175b0 <MX_DAC_Init+0x74>)
 801758a:	f001 faed 	bl	8018b68 <HAL_DAC_ConfigChannel>
 801758e:	4603      	mov	r3, r0
 8017590:	2b00      	cmp	r3, #0
 8017592:	d001      	beq.n	8017598 <MX_DAC_Init+0x5c>
  {
    Error_Handler();
 8017594:	f000 fb28 	bl	8017be8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 620);  //(620*4095)/330;//50mv
 8017598:	f44f 731b 	mov.w	r3, #620	; 0x26c
 801759c:	2200      	movs	r2, #0
 801759e:	2110      	movs	r1, #16
 80175a0:	4803      	ldr	r0, [pc, #12]	; (80175b0 <MX_DAC_Init+0x74>)
 80175a2:	f001 fabc 	bl	8018b1e <HAL_DAC_SetValue>
  /* USER CODE END DAC_Init 2 */

}
 80175a6:	bf00      	nop
 80175a8:	3708      	adds	r7, #8
 80175aa:	46bd      	mov	sp, r7
 80175ac:	bd80      	pop	{r7, pc}
 80175ae:	bf00      	nop
 80175b0:	20006b58 	.word	0x20006b58
 80175b4:	40007400 	.word	0x40007400

080175b8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80175b8:	b580      	push	{r7, lr}
 80175ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80175bc:	4b17      	ldr	r3, [pc, #92]	; (801761c <MX_SPI2_Init+0x64>)
 80175be:	4a18      	ldr	r2, [pc, #96]	; (8017620 <MX_SPI2_Init+0x68>)
 80175c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80175c2:	4b16      	ldr	r3, [pc, #88]	; (801761c <MX_SPI2_Init+0x64>)
 80175c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80175c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80175ca:	4b14      	ldr	r3, [pc, #80]	; (801761c <MX_SPI2_Init+0x64>)
 80175cc:	2200      	movs	r2, #0
 80175ce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80175d0:	4b12      	ldr	r3, [pc, #72]	; (801761c <MX_SPI2_Init+0x64>)
 80175d2:	2200      	movs	r2, #0
 80175d4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80175d6:	4b11      	ldr	r3, [pc, #68]	; (801761c <MX_SPI2_Init+0x64>)
 80175d8:	2202      	movs	r2, #2
 80175da:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80175dc:	4b0f      	ldr	r3, [pc, #60]	; (801761c <MX_SPI2_Init+0x64>)
 80175de:	2201      	movs	r2, #1
 80175e0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80175e2:	4b0e      	ldr	r3, [pc, #56]	; (801761c <MX_SPI2_Init+0x64>)
 80175e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80175e8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80175ea:	4b0c      	ldr	r3, [pc, #48]	; (801761c <MX_SPI2_Init+0x64>)
 80175ec:	2200      	movs	r2, #0
 80175ee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80175f0:	4b0a      	ldr	r3, [pc, #40]	; (801761c <MX_SPI2_Init+0x64>)
 80175f2:	2280      	movs	r2, #128	; 0x80
 80175f4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80175f6:	4b09      	ldr	r3, [pc, #36]	; (801761c <MX_SPI2_Init+0x64>)
 80175f8:	2200      	movs	r2, #0
 80175fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80175fc:	4b07      	ldr	r3, [pc, #28]	; (801761c <MX_SPI2_Init+0x64>)
 80175fe:	2200      	movs	r2, #0
 8017600:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8017602:	4b06      	ldr	r3, [pc, #24]	; (801761c <MX_SPI2_Init+0x64>)
 8017604:	220a      	movs	r2, #10
 8017606:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8017608:	4804      	ldr	r0, [pc, #16]	; (801761c <MX_SPI2_Init+0x64>)
 801760a:	f004 fd19 	bl	801c040 <HAL_SPI_Init>
 801760e:	4603      	mov	r3, r0
 8017610:	2b00      	cmp	r3, #0
 8017612:	d001      	beq.n	8017618 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8017614:	f000 fae8 	bl	8017be8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8017618:	bf00      	nop
 801761a:	bd80      	pop	{r7, pc}
 801761c:	20006890 	.word	0x20006890
 8017620:	40003800 	.word	0x40003800

08017624 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8017624:	b580      	push	{r7, lr}
 8017626:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8017628:	4b18      	ldr	r3, [pc, #96]	; (801768c <MX_SPI3_Init+0x68>)
 801762a:	4a19      	ldr	r2, [pc, #100]	; (8017690 <MX_SPI3_Init+0x6c>)
 801762c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 801762e:	4b17      	ldr	r3, [pc, #92]	; (801768c <MX_SPI3_Init+0x68>)
 8017630:	f44f 7282 	mov.w	r2, #260	; 0x104
 8017634:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8017636:	4b15      	ldr	r3, [pc, #84]	; (801768c <MX_SPI3_Init+0x68>)
 8017638:	2200      	movs	r2, #0
 801763a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 801763c:	4b13      	ldr	r3, [pc, #76]	; (801768c <MX_SPI3_Init+0x68>)
 801763e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017642:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8017644:	4b11      	ldr	r3, [pc, #68]	; (801768c <MX_SPI3_Init+0x68>)
 8017646:	2200      	movs	r2, #0
 8017648:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 801764a:	4b10      	ldr	r3, [pc, #64]	; (801768c <MX_SPI3_Init+0x68>)
 801764c:	2200      	movs	r2, #0
 801764e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8017650:	4b0e      	ldr	r3, [pc, #56]	; (801768c <MX_SPI3_Init+0x68>)
 8017652:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017656:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8017658:	4b0c      	ldr	r3, [pc, #48]	; (801768c <MX_SPI3_Init+0x68>)
 801765a:	2210      	movs	r2, #16
 801765c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_LSB;
 801765e:	4b0b      	ldr	r3, [pc, #44]	; (801768c <MX_SPI3_Init+0x68>)
 8017660:	2280      	movs	r2, #128	; 0x80
 8017662:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8017664:	4b09      	ldr	r3, [pc, #36]	; (801768c <MX_SPI3_Init+0x68>)
 8017666:	2200      	movs	r2, #0
 8017668:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801766a:	4b08      	ldr	r3, [pc, #32]	; (801768c <MX_SPI3_Init+0x68>)
 801766c:	2200      	movs	r2, #0
 801766e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8017670:	4b06      	ldr	r3, [pc, #24]	; (801768c <MX_SPI3_Init+0x68>)
 8017672:	220a      	movs	r2, #10
 8017674:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8017676:	4805      	ldr	r0, [pc, #20]	; (801768c <MX_SPI3_Init+0x68>)
 8017678:	f004 fce2 	bl	801c040 <HAL_SPI_Init>
 801767c:	4603      	mov	r3, r0
 801767e:	2b00      	cmp	r3, #0
 8017680:	d001      	beq.n	8017686 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8017682:	f000 fab1 	bl	8017be8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8017686:	bf00      	nop
 8017688:	bd80      	pop	{r7, pc}
 801768a:	bf00      	nop
 801768c:	20006a20 	.word	0x20006a20
 8017690:	40003c00 	.word	0x40003c00

08017694 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8017694:	b580      	push	{r7, lr}
 8017696:	b086      	sub	sp, #24
 8017698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801769a:	f107 0308 	add.w	r3, r7, #8
 801769e:	2200      	movs	r2, #0
 80176a0:	601a      	str	r2, [r3, #0]
 80176a2:	605a      	str	r2, [r3, #4]
 80176a4:	609a      	str	r2, [r3, #8]
 80176a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80176a8:	463b      	mov	r3, r7
 80176aa:	2200      	movs	r2, #0
 80176ac:	601a      	str	r2, [r3, #0]
 80176ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */
  octim1.Pulse = 500;
 80176b0:	4b30      	ldr	r3, [pc, #192]	; (8017774 <MX_TIM1_Init+0xe0>)
 80176b2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80176b6:	605a      	str	r2, [r3, #4]
  octim1.OCMode = TIM_OCMODE_PWM2;
 80176b8:	4b2e      	ldr	r3, [pc, #184]	; (8017774 <MX_TIM1_Init+0xe0>)
 80176ba:	2270      	movs	r2, #112	; 0x70
 80176bc:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80176be:	4b2e      	ldr	r3, [pc, #184]	; (8017778 <MX_TIM1_Init+0xe4>)
 80176c0:	4a2e      	ldr	r2, [pc, #184]	; (801777c <MX_TIM1_Init+0xe8>)
 80176c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 89;
 80176c4:	4b2c      	ldr	r3, [pc, #176]	; (8017778 <MX_TIM1_Init+0xe4>)
 80176c6:	2259      	movs	r2, #89	; 0x59
 80176c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80176ca:	4b2b      	ldr	r3, [pc, #172]	; (8017778 <MX_TIM1_Init+0xe4>)
 80176cc:	2210      	movs	r2, #16
 80176ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80176d0:	4b29      	ldr	r3, [pc, #164]	; (8017778 <MX_TIM1_Init+0xe4>)
 80176d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80176d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80176d8:	4b27      	ldr	r3, [pc, #156]	; (8017778 <MX_TIM1_Init+0xe4>)
 80176da:	2200      	movs	r2, #0
 80176dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80176de:	4b26      	ldr	r3, [pc, #152]	; (8017778 <MX_TIM1_Init+0xe4>)
 80176e0:	2200      	movs	r2, #0
 80176e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80176e4:	4b24      	ldr	r3, [pc, #144]	; (8017778 <MX_TIM1_Init+0xe4>)
 80176e6:	2280      	movs	r2, #128	; 0x80
 80176e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80176ea:	4823      	ldr	r0, [pc, #140]	; (8017778 <MX_TIM1_Init+0xe4>)
 80176ec:	f005 fb7c 	bl	801cde8 <HAL_TIM_Base_Init>
 80176f0:	4603      	mov	r3, r0
 80176f2:	2b00      	cmp	r3, #0
 80176f4:	d001      	beq.n	80176fa <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 80176f6:	f000 fa77 	bl	8017be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80176fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80176fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8017700:	f107 0308 	add.w	r3, r7, #8
 8017704:	4619      	mov	r1, r3
 8017706:	481c      	ldr	r0, [pc, #112]	; (8017778 <MX_TIM1_Init+0xe4>)
 8017708:	f005 fd92 	bl	801d230 <HAL_TIM_ConfigClockSource>
 801770c:	4603      	mov	r3, r0
 801770e:	2b00      	cmp	r3, #0
 8017710:	d001      	beq.n	8017716 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8017712:	f000 fa69 	bl	8017be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017716:	2300      	movs	r3, #0
 8017718:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801771a:	2300      	movs	r3, #0
 801771c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 801771e:	463b      	mov	r3, r7
 8017720:	4619      	mov	r1, r3
 8017722:	4815      	ldr	r0, [pc, #84]	; (8017778 <MX_TIM1_Init+0xe4>)
 8017724:	f006 f95e 	bl	801d9e4 <HAL_TIMEx_MasterConfigSynchronization>
 8017728:	4603      	mov	r3, r0
 801772a:	2b00      	cmp	r3, #0
 801772c:	d001      	beq.n	8017732 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 801772e:	f000 fa5b 	bl	8017be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_OC_ConfigChannel(&htim1, &octim1, 1 );
 8017732:	2201      	movs	r2, #1
 8017734:	490f      	ldr	r1, [pc, #60]	; (8017774 <MX_TIM1_Init+0xe0>)
 8017736:	4810      	ldr	r0, [pc, #64]	; (8017778 <MX_TIM1_Init+0xe4>)
 8017738:	f005 fd1e 	bl	801d178 <HAL_TIM_OC_ConfigChannel>
  __HAL_TIM_URS_ENABLE(&htim1);
 801773c:	4b0e      	ldr	r3, [pc, #56]	; (8017778 <MX_TIM1_Init+0xe4>)
 801773e:	681b      	ldr	r3, [r3, #0]
 8017740:	681a      	ldr	r2, [r3, #0]
 8017742:	4b0d      	ldr	r3, [pc, #52]	; (8017778 <MX_TIM1_Init+0xe4>)
 8017744:	681b      	ldr	r3, [r3, #0]
 8017746:	f042 0204 	orr.w	r2, r2, #4
 801774a:	601a      	str	r2, [r3, #0]
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_CC1 | TIM_DMA_TRIGGER);
 801774c:	4b0a      	ldr	r3, [pc, #40]	; (8017778 <MX_TIM1_Init+0xe4>)
 801774e:	681b      	ldr	r3, [r3, #0]
 8017750:	68da      	ldr	r2, [r3, #12]
 8017752:	4b09      	ldr	r3, [pc, #36]	; (8017778 <MX_TIM1_Init+0xe4>)
 8017754:	681b      	ldr	r3, [r3, #0]
 8017756:	f442 4284 	orr.w	r2, r2, #16896	; 0x4200
 801775a:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 801775c:	4b06      	ldr	r3, [pc, #24]	; (8017778 <MX_TIM1_Init+0xe4>)
 801775e:	681b      	ldr	r3, [r3, #0]
 8017760:	681a      	ldr	r2, [r3, #0]
 8017762:	4b05      	ldr	r3, [pc, #20]	; (8017778 <MX_TIM1_Init+0xe4>)
 8017764:	681b      	ldr	r3, [r3, #0]
 8017766:	f042 0201 	orr.w	r2, r2, #1
 801776a:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM1_Init 2 */

}
 801776c:	bf00      	nop
 801776e:	3718      	adds	r7, #24
 8017770:	46bd      	mov	sp, r7
 8017772:	bd80      	pop	{r7, pc}
 8017774:	20006bcc 	.word	0x20006bcc
 8017778:	20006be8 	.word	0x20006be8
 801777c:	40010000 	.word	0x40010000

08017780 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8017780:	b580      	push	{r7, lr}
 8017782:	b086      	sub	sp, #24
 8017784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8017786:	f107 0308 	add.w	r3, r7, #8
 801778a:	2200      	movs	r2, #0
 801778c:	601a      	str	r2, [r3, #0]
 801778e:	605a      	str	r2, [r3, #4]
 8017790:	609a      	str	r2, [r3, #8]
 8017792:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017794:	463b      	mov	r3, r7
 8017796:	2200      	movs	r2, #0
 8017798:	601a      	str	r2, [r3, #0]
 801779a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */
  octim3.Pulse = 3750;
 801779c:	4b25      	ldr	r3, [pc, #148]	; (8017834 <MX_TIM3_Init+0xb4>)
 801779e:	f640 62a6 	movw	r2, #3750	; 0xea6
 80177a2:	605a      	str	r2, [r3, #4]
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80177a4:	4b24      	ldr	r3, [pc, #144]	; (8017838 <MX_TIM3_Init+0xb8>)
 80177a6:	4a25      	ldr	r2, [pc, #148]	; (801783c <MX_TIM3_Init+0xbc>)
 80177a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 11;
 80177aa:	4b23      	ldr	r3, [pc, #140]	; (8017838 <MX_TIM3_Init+0xb8>)
 80177ac:	220b      	movs	r2, #11
 80177ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80177b0:	4b21      	ldr	r3, [pc, #132]	; (8017838 <MX_TIM3_Init+0xb8>)
 80177b2:	2200      	movs	r2, #0
 80177b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7499;
 80177b6:	4b20      	ldr	r3, [pc, #128]	; (8017838 <MX_TIM3_Init+0xb8>)
 80177b8:	f641 524b 	movw	r2, #7499	; 0x1d4b
 80177bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80177be:	4b1e      	ldr	r3, [pc, #120]	; (8017838 <MX_TIM3_Init+0xb8>)
 80177c0:	2200      	movs	r2, #0
 80177c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80177c4:	4b1c      	ldr	r3, [pc, #112]	; (8017838 <MX_TIM3_Init+0xb8>)
 80177c6:	2280      	movs	r2, #128	; 0x80
 80177c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80177ca:	481b      	ldr	r0, [pc, #108]	; (8017838 <MX_TIM3_Init+0xb8>)
 80177cc:	f005 fb0c 	bl	801cde8 <HAL_TIM_Base_Init>
 80177d0:	4603      	mov	r3, r0
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	d001      	beq.n	80177da <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80177d6:	f000 fa07 	bl	8017be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80177da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80177de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80177e0:	f107 0308 	add.w	r3, r7, #8
 80177e4:	4619      	mov	r1, r3
 80177e6:	4814      	ldr	r0, [pc, #80]	; (8017838 <MX_TIM3_Init+0xb8>)
 80177e8:	f005 fd22 	bl	801d230 <HAL_TIM_ConfigClockSource>
 80177ec:	4603      	mov	r3, r0
 80177ee:	2b00      	cmp	r3, #0
 80177f0:	d001      	beq.n	80177f6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80177f2:	f000 f9f9 	bl	8017be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80177f6:	2320      	movs	r3, #32
 80177f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80177fa:	2300      	movs	r3, #0
 80177fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80177fe:	463b      	mov	r3, r7
 8017800:	4619      	mov	r1, r3
 8017802:	480d      	ldr	r0, [pc, #52]	; (8017838 <MX_TIM3_Init+0xb8>)
 8017804:	f006 f8ee 	bl	801d9e4 <HAL_TIMEx_MasterConfigSynchronization>
 8017808:	4603      	mov	r3, r0
 801780a:	2b00      	cmp	r3, #0
 801780c:	d001      	beq.n	8017812 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 801780e:	f000 f9eb 	bl	8017be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_OC_ConfigChannel(&htim3, &octim3, 1 );
 8017812:	2201      	movs	r2, #1
 8017814:	4907      	ldr	r1, [pc, #28]	; (8017834 <MX_TIM3_Init+0xb4>)
 8017816:	4808      	ldr	r0, [pc, #32]	; (8017838 <MX_TIM3_Init+0xb8>)
 8017818:	f005 fcae 	bl	801d178 <HAL_TIM_OC_ConfigChannel>
  __HAL_TIM_ENABLE(&htim3);
 801781c:	4b06      	ldr	r3, [pc, #24]	; (8017838 <MX_TIM3_Init+0xb8>)
 801781e:	681b      	ldr	r3, [r3, #0]
 8017820:	681a      	ldr	r2, [r3, #0]
 8017822:	4b05      	ldr	r3, [pc, #20]	; (8017838 <MX_TIM3_Init+0xb8>)
 8017824:	681b      	ldr	r3, [r3, #0]
 8017826:	f042 0201 	orr.w	r2, r2, #1
 801782a:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM3_Init 2 */

}
 801782c:	bf00      	nop
 801782e:	3718      	adds	r7, #24
 8017830:	46bd      	mov	sp, r7
 8017832:	bd80      	pop	{r7, pc}
 8017834:	20006b20 	.word	0x20006b20
 8017838:	200069d8 	.word	0x200069d8
 801783c:	40000400 	.word	0x40000400

08017840 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8017840:	b580      	push	{r7, lr}
 8017842:	b086      	sub	sp, #24
 8017844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8017846:	f107 0308 	add.w	r3, r7, #8
 801784a:	2200      	movs	r2, #0
 801784c:	601a      	str	r2, [r3, #0]
 801784e:	605a      	str	r2, [r3, #4]
 8017850:	609a      	str	r2, [r3, #8]
 8017852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017854:	463b      	mov	r3, r7
 8017856:	2200      	movs	r2, #0
 8017858:	601a      	str	r2, [r3, #0]
 801785a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */
  octim5.Pulse = (FARR[List[FREQ_OUT].Val]+1)/2;
 801785c:	4b3a      	ldr	r3, [pc, #232]	; (8017948 <MX_TIM5_Init+0x108>)
 801785e:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8017862:	461a      	mov	r2, r3
 8017864:	4b39      	ldr	r3, [pc, #228]	; (801794c <MX_TIM5_Init+0x10c>)
 8017866:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801786a:	3301      	adds	r3, #1
 801786c:	0fda      	lsrs	r2, r3, #31
 801786e:	4413      	add	r3, r2
 8017870:	105b      	asrs	r3, r3, #1
 8017872:	461a      	mov	r2, r3
 8017874:	4b36      	ldr	r3, [pc, #216]	; (8017950 <MX_TIM5_Init+0x110>)
 8017876:	605a      	str	r2, [r3, #4]
  octim5.OCMode = TIM_OCMODE_PWM2;
 8017878:	4b35      	ldr	r3, [pc, #212]	; (8017950 <MX_TIM5_Init+0x110>)
 801787a:	2270      	movs	r2, #112	; 0x70
 801787c:	601a      	str	r2, [r3, #0]
  octim5.OCFastMode = TIM_OCFAST_ENABLE;
 801787e:	4b34      	ldr	r3, [pc, #208]	; (8017950 <MX_TIM5_Init+0x110>)
 8017880:	2204      	movs	r2, #4
 8017882:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8017884:	4b33      	ldr	r3, [pc, #204]	; (8017954 <MX_TIM5_Init+0x114>)
 8017886:	4a34      	ldr	r2, [pc, #208]	; (8017958 <MX_TIM5_Init+0x118>)
 8017888:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9;
 801788a:	4b32      	ldr	r3, [pc, #200]	; (8017954 <MX_TIM5_Init+0x114>)
 801788c:	2209      	movs	r2, #9
 801788e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017890:	4b30      	ldr	r3, [pc, #192]	; (8017954 <MX_TIM5_Init+0x114>)
 8017892:	2200      	movs	r2, #0
 8017894:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 18000;
 8017896:	4b2f      	ldr	r3, [pc, #188]	; (8017954 <MX_TIM5_Init+0x114>)
 8017898:	f244 6250 	movw	r2, #18000	; 0x4650
 801789c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801789e:	4b2d      	ldr	r3, [pc, #180]	; (8017954 <MX_TIM5_Init+0x114>)
 80178a0:	2200      	movs	r2, #0
 80178a2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80178a4:	4b2b      	ldr	r3, [pc, #172]	; (8017954 <MX_TIM5_Init+0x114>)
 80178a6:	2280      	movs	r2, #128	; 0x80
 80178a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80178aa:	482a      	ldr	r0, [pc, #168]	; (8017954 <MX_TIM5_Init+0x114>)
 80178ac:	f005 fa9c 	bl	801cde8 <HAL_TIM_Base_Init>
 80178b0:	4603      	mov	r3, r0
 80178b2:	2b00      	cmp	r3, #0
 80178b4:	d001      	beq.n	80178ba <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
 80178b6:	f000 f997 	bl	8017be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80178ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80178be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80178c0:	f107 0308 	add.w	r3, r7, #8
 80178c4:	4619      	mov	r1, r3
 80178c6:	4823      	ldr	r0, [pc, #140]	; (8017954 <MX_TIM5_Init+0x114>)
 80178c8:	f005 fcb2 	bl	801d230 <HAL_TIM_ConfigClockSource>
 80178cc:	4603      	mov	r3, r0
 80178ce:	2b00      	cmp	r3, #0
 80178d0:	d001      	beq.n	80178d6 <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 80178d2:	f000 f989 	bl	8017be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80178d6:	2300      	movs	r3, #0
 80178d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80178da:	2300      	movs	r3, #0
 80178dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80178de:	463b      	mov	r3, r7
 80178e0:	4619      	mov	r1, r3
 80178e2:	481c      	ldr	r0, [pc, #112]	; (8017954 <MX_TIM5_Init+0x114>)
 80178e4:	f006 f87e 	bl	801d9e4 <HAL_TIMEx_MasterConfigSynchronization>
 80178e8:	4603      	mov	r3, r0
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d001      	beq.n	80178f2 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80178ee:	f000 f97b 	bl	8017be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  htim5.Init.Period = FARR[List[FREQ_OUT].Val];
 80178f2:	4b15      	ldr	r3, [pc, #84]	; (8017948 <MX_TIM5_Init+0x108>)
 80178f4:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 80178f8:	461a      	mov	r2, r3
 80178fa:	4b14      	ldr	r3, [pc, #80]	; (801794c <MX_TIM5_Init+0x10c>)
 80178fc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017900:	461a      	mov	r2, r3
 8017902:	4b14      	ldr	r3, [pc, #80]	; (8017954 <MX_TIM5_Init+0x114>)
 8017904:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8017906:	4813      	ldr	r0, [pc, #76]	; (8017954 <MX_TIM5_Init+0x114>)
 8017908:	f005 fa6e 	bl	801cde8 <HAL_TIM_Base_Init>
 801790c:	4603      	mov	r3, r0
 801790e:	2b00      	cmp	r3, #0
 8017910:	d001      	beq.n	8017916 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8017912:	f000 f969 	bl	8017be8 <Error_Handler>
  }
  HAL_TIM_OC_ConfigChannel(&htim5, &octim5, 3 );
 8017916:	2203      	movs	r2, #3
 8017918:	490d      	ldr	r1, [pc, #52]	; (8017950 <MX_TIM5_Init+0x110>)
 801791a:	480e      	ldr	r0, [pc, #56]	; (8017954 <MX_TIM5_Init+0x114>)
 801791c:	f005 fc2c 	bl	801d178 <HAL_TIM_OC_ConfigChannel>
  __HAL_TIM_URS_ENABLE(&htim5);
 8017920:	4b0c      	ldr	r3, [pc, #48]	; (8017954 <MX_TIM5_Init+0x114>)
 8017922:	681b      	ldr	r3, [r3, #0]
 8017924:	681a      	ldr	r2, [r3, #0]
 8017926:	4b0b      	ldr	r3, [pc, #44]	; (8017954 <MX_TIM5_Init+0x114>)
 8017928:	681b      	ldr	r3, [r3, #0]
 801792a:	f042 0204 	orr.w	r2, r2, #4
 801792e:	601a      	str	r2, [r3, #0]
  __HAL_TIM_ENABLE(&htim5);
 8017930:	4b08      	ldr	r3, [pc, #32]	; (8017954 <MX_TIM5_Init+0x114>)
 8017932:	681b      	ldr	r3, [r3, #0]
 8017934:	681a      	ldr	r2, [r3, #0]
 8017936:	4b07      	ldr	r3, [pc, #28]	; (8017954 <MX_TIM5_Init+0x114>)
 8017938:	681b      	ldr	r3, [r3, #0]
 801793a:	f042 0201 	orr.w	r2, r2, #1
 801793e:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM5_Init 2 */

}
 8017940:	bf00      	nop
 8017942:	3718      	adds	r7, #24
 8017944:	46bd      	mov	sp, r7
 8017946:	bd80      	pop	{r7, pc}
 8017948:	20000298 	.word	0x20000298
 801794c:	08000ae8 	.word	0x08000ae8
 8017950:	20006b3c 	.word	0x20006b3c
 8017954:	20006990 	.word	0x20006990
 8017958:	40000c00 	.word	0x40000c00

0801795c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 801795c:	b580      	push	{r7, lr}
 801795e:	b082      	sub	sp, #8
 8017960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */
  // aka tim_da
  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017962:	463b      	mov	r3, r7
 8017964:	2200      	movs	r2, #0
 8017966:	601a      	str	r2, [r3, #0]
 8017968:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 801796a:	4b1d      	ldr	r3, [pc, #116]	; (80179e0 <MX_TIM7_Init+0x84>)
 801796c:	4a1d      	ldr	r2, [pc, #116]	; (80179e4 <MX_TIM7_Init+0x88>)
 801796e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2;
 8017970:	4b1b      	ldr	r3, [pc, #108]	; (80179e0 <MX_TIM7_Init+0x84>)
 8017972:	2202      	movs	r2, #2
 8017974:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017976:	4b1a      	ldr	r3, [pc, #104]	; (80179e0 <MX_TIM7_Init+0x84>)
 8017978:	2200      	movs	r2, #0
 801797a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 801797c:	4b18      	ldr	r3, [pc, #96]	; (80179e0 <MX_TIM7_Init+0x84>)
 801797e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8017982:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8017984:	4b16      	ldr	r3, [pc, #88]	; (80179e0 <MX_TIM7_Init+0x84>)
 8017986:	2200      	movs	r2, #0
 8017988:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 801798a:	4815      	ldr	r0, [pc, #84]	; (80179e0 <MX_TIM7_Init+0x84>)
 801798c:	f005 fa2c 	bl	801cde8 <HAL_TIM_Base_Init>
 8017990:	4603      	mov	r3, r0
 8017992:	2b00      	cmp	r3, #0
 8017994:	d001      	beq.n	801799a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8017996:	f000 f927 	bl	8017be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801799a:	2300      	movs	r3, #0
 801799c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801799e:	2300      	movs	r3, #0
 80179a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80179a2:	463b      	mov	r3, r7
 80179a4:	4619      	mov	r1, r3
 80179a6:	480e      	ldr	r0, [pc, #56]	; (80179e0 <MX_TIM7_Init+0x84>)
 80179a8:	f006 f81c 	bl	801d9e4 <HAL_TIMEx_MasterConfigSynchronization>
 80179ac:	4603      	mov	r3, r0
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	d001      	beq.n	80179b6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80179b2:	f000 f919 	bl	8017be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  __HAL_TIM_ENABLE_DMA(&htim7,TIM_DMA_UPDATE);
 80179b6:	4b0a      	ldr	r3, [pc, #40]	; (80179e0 <MX_TIM7_Init+0x84>)
 80179b8:	681b      	ldr	r3, [r3, #0]
 80179ba:	68da      	ldr	r2, [r3, #12]
 80179bc:	4b08      	ldr	r3, [pc, #32]	; (80179e0 <MX_TIM7_Init+0x84>)
 80179be:	681b      	ldr	r3, [r3, #0]
 80179c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80179c4:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim7);
 80179c6:	4b06      	ldr	r3, [pc, #24]	; (80179e0 <MX_TIM7_Init+0x84>)
 80179c8:	681b      	ldr	r3, [r3, #0]
 80179ca:	681a      	ldr	r2, [r3, #0]
 80179cc:	4b04      	ldr	r3, [pc, #16]	; (80179e0 <MX_TIM7_Init+0x84>)
 80179ce:	681b      	ldr	r3, [r3, #0]
 80179d0:	f042 0201 	orr.w	r2, r2, #1
 80179d4:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM7_Init 2 */

}
 80179d6:	bf00      	nop
 80179d8:	3708      	adds	r7, #8
 80179da:	46bd      	mov	sp, r7
 80179dc:	bd80      	pop	{r7, pc}
 80179de:	bf00      	nop
 80179e0:	20006c30 	.word	0x20006c30
 80179e4:	40001400 	.word	0x40001400

080179e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80179e8:	b580      	push	{r7, lr}
 80179ea:	b082      	sub	sp, #8
 80179ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80179ee:	2300      	movs	r3, #0
 80179f0:	607b      	str	r3, [r7, #4]
 80179f2:	4b1b      	ldr	r3, [pc, #108]	; (8017a60 <MX_DMA_Init+0x78>)
 80179f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80179f6:	4a1a      	ldr	r2, [pc, #104]	; (8017a60 <MX_DMA_Init+0x78>)
 80179f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80179fc:	6313      	str	r3, [r2, #48]	; 0x30
 80179fe:	4b18      	ldr	r3, [pc, #96]	; (8017a60 <MX_DMA_Init+0x78>)
 8017a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8017a06:	607b      	str	r3, [r7, #4]
 8017a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8017a0a:	2300      	movs	r3, #0
 8017a0c:	603b      	str	r3, [r7, #0]
 8017a0e:	4b14      	ldr	r3, [pc, #80]	; (8017a60 <MX_DMA_Init+0x78>)
 8017a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a12:	4a13      	ldr	r2, [pc, #76]	; (8017a60 <MX_DMA_Init+0x78>)
 8017a14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8017a18:	6313      	str	r3, [r2, #48]	; 0x30
 8017a1a:	4b11      	ldr	r3, [pc, #68]	; (8017a60 <MX_DMA_Init+0x78>)
 8017a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8017a22:	603b      	str	r3, [r7, #0]
 8017a24:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8017a26:	2200      	movs	r2, #0
 8017a28:	2100      	movs	r1, #0
 8017a2a:	200d      	movs	r0, #13
 8017a2c:	f001 f81f 	bl	8018a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8017a30:	200d      	movs	r0, #13
 8017a32:	f001 f838 	bl	8018aa6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8017a36:	2200      	movs	r2, #0
 8017a38:	2100      	movs	r1, #0
 8017a3a:	2010      	movs	r0, #16
 8017a3c:	f001 f817 	bl	8018a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8017a40:	2010      	movs	r0, #16
 8017a42:	f001 f830 	bl	8018aa6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8017a46:	2200      	movs	r2, #0
 8017a48:	2100      	movs	r1, #0
 8017a4a:	2038      	movs	r0, #56	; 0x38
 8017a4c:	f001 f80f 	bl	8018a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8017a50:	2038      	movs	r0, #56	; 0x38
 8017a52:	f001 f828 	bl	8018aa6 <HAL_NVIC_EnableIRQ>

}
 8017a56:	bf00      	nop
 8017a58:	3708      	adds	r7, #8
 8017a5a:	46bd      	mov	sp, r7
 8017a5c:	bd80      	pop	{r7, pc}
 8017a5e:	bf00      	nop
 8017a60:	40023800 	.word	0x40023800

08017a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8017a64:	b580      	push	{r7, lr}
 8017a66:	b08a      	sub	sp, #40	; 0x28
 8017a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017a6a:	f107 0314 	add.w	r3, r7, #20
 8017a6e:	2200      	movs	r2, #0
 8017a70:	601a      	str	r2, [r3, #0]
 8017a72:	605a      	str	r2, [r3, #4]
 8017a74:	609a      	str	r2, [r3, #8]
 8017a76:	60da      	str	r2, [r3, #12]
 8017a78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8017a7a:	2300      	movs	r3, #0
 8017a7c:	613b      	str	r3, [r7, #16]
 8017a7e:	4b4e      	ldr	r3, [pc, #312]	; (8017bb8 <MX_GPIO_Init+0x154>)
 8017a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a82:	4a4d      	ldr	r2, [pc, #308]	; (8017bb8 <MX_GPIO_Init+0x154>)
 8017a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017a88:	6313      	str	r3, [r2, #48]	; 0x30
 8017a8a:	4b4b      	ldr	r3, [pc, #300]	; (8017bb8 <MX_GPIO_Init+0x154>)
 8017a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017a92:	613b      	str	r3, [r7, #16]
 8017a94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8017a96:	2300      	movs	r3, #0
 8017a98:	60fb      	str	r3, [r7, #12]
 8017a9a:	4b47      	ldr	r3, [pc, #284]	; (8017bb8 <MX_GPIO_Init+0x154>)
 8017a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a9e:	4a46      	ldr	r2, [pc, #280]	; (8017bb8 <MX_GPIO_Init+0x154>)
 8017aa0:	f043 0301 	orr.w	r3, r3, #1
 8017aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8017aa6:	4b44      	ldr	r3, [pc, #272]	; (8017bb8 <MX_GPIO_Init+0x154>)
 8017aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017aaa:	f003 0301 	and.w	r3, r3, #1
 8017aae:	60fb      	str	r3, [r7, #12]
 8017ab0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8017ab2:	2300      	movs	r3, #0
 8017ab4:	60bb      	str	r3, [r7, #8]
 8017ab6:	4b40      	ldr	r3, [pc, #256]	; (8017bb8 <MX_GPIO_Init+0x154>)
 8017ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017aba:	4a3f      	ldr	r2, [pc, #252]	; (8017bb8 <MX_GPIO_Init+0x154>)
 8017abc:	f043 0304 	orr.w	r3, r3, #4
 8017ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8017ac2:	4b3d      	ldr	r3, [pc, #244]	; (8017bb8 <MX_GPIO_Init+0x154>)
 8017ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ac6:	f003 0304 	and.w	r3, r3, #4
 8017aca:	60bb      	str	r3, [r7, #8]
 8017acc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8017ace:	2300      	movs	r3, #0
 8017ad0:	607b      	str	r3, [r7, #4]
 8017ad2:	4b39      	ldr	r3, [pc, #228]	; (8017bb8 <MX_GPIO_Init+0x154>)
 8017ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ad6:	4a38      	ldr	r2, [pc, #224]	; (8017bb8 <MX_GPIO_Init+0x154>)
 8017ad8:	f043 0302 	orr.w	r3, r3, #2
 8017adc:	6313      	str	r3, [r2, #48]	; 0x30
 8017ade:	4b36      	ldr	r3, [pc, #216]	; (8017bb8 <MX_GPIO_Init+0x154>)
 8017ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ae2:	f003 0302 	and.w	r3, r3, #2
 8017ae6:	607b      	str	r3, [r7, #4]
 8017ae8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Fo2_GPIO_Port, Fo2_Pin, GPIO_PIN_RESET);
 8017aea:	2200      	movs	r2, #0
 8017aec:	2104      	movs	r1, #4
 8017aee:	4833      	ldr	r0, [pc, #204]	; (8017bbc <MX_GPIO_Init+0x158>)
 8017af0:	f002 f82a 	bl	8019b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Az_Pin|Ay_Pin|LcdRs_Pin, GPIO_PIN_RESET);
 8017af4:	2200      	movs	r2, #0
 8017af6:	f44f 6103 	mov.w	r1, #2096	; 0x830
 8017afa:	4831      	ldr	r0, [pc, #196]	; (8017bc0 <MX_GPIO_Init+0x15c>)
 8017afc:	f002 f824 	bl	8019b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Ax_Pin|Dres_Pin, GPIO_PIN_RESET);
 8017b00:	2200      	movs	r2, #0
 8017b02:	f240 2101 	movw	r1, #513	; 0x201
 8017b06:	482f      	ldr	r0, [pc, #188]	; (8017bc4 <MX_GPIO_Init+0x160>)
 8017b08:	f002 f81e 	bl	8019b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS_Pin|TpCs_Pin, GPIO_PIN_SET);
 8017b0c:	2201      	movs	r2, #1
 8017b0e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8017b12:	482c      	ldr	r0, [pc, #176]	; (8017bc4 <MX_GPIO_Init+0x160>)
 8017b14:	f002 f818 	bl	8019b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);
 8017b18:	2201      	movs	r2, #1
 8017b1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017b1e:	4828      	ldr	r0, [pc, #160]	; (8017bc0 <MX_GPIO_Init+0x15c>)
 8017b20:	f002 f812 	bl	8019b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Fo2_Pin */
  GPIO_InitStruct.Pin = Fo2_Pin;
 8017b24:	2304      	movs	r3, #4
 8017b26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017b28:	2301      	movs	r3, #1
 8017b2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017b2c:	2300      	movs	r3, #0
 8017b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017b30:	2300      	movs	r3, #0
 8017b32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStruct);
 8017b34:	f107 0314 	add.w	r3, r7, #20
 8017b38:	4619      	mov	r1, r3
 8017b3a:	4820      	ldr	r0, [pc, #128]	; (8017bbc <MX_GPIO_Init+0x158>)
 8017b3c:	f001 fe58 	bl	80197f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Az_Pin Ay_Pin LcdRs_Pin LcdCs_Pin */
  GPIO_InitStruct.Pin = Az_Pin|Ay_Pin|LcdRs_Pin|LcdCs_Pin;
 8017b40:	f641 0330 	movw	r3, #6192	; 0x1830
 8017b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017b46:	2301      	movs	r3, #1
 8017b48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017b4a:	2300      	movs	r3, #0
 8017b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017b4e:	2300      	movs	r3, #0
 8017b50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8017b52:	f107 0314 	add.w	r3, r7, #20
 8017b56:	4619      	mov	r1, r3
 8017b58:	4819      	ldr	r0, [pc, #100]	; (8017bc0 <MX_GPIO_Init+0x15c>)
 8017b5a:	f001 fe49 	bl	80197f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Ax_Pin SS_Pin TpCs_Pin Dres_Pin */
  GPIO_InitStruct.Pin = Ax_Pin|SS_Pin|TpCs_Pin|Dres_Pin;
 8017b5e:	f241 2341 	movw	r3, #4673	; 0x1241
 8017b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017b64:	2301      	movs	r3, #1
 8017b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017b68:	2300      	movs	r3, #0
 8017b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017b6c:	2300      	movs	r3, #0
 8017b6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017b70:	f107 0314 	add.w	r3, r7, #20
 8017b74:	4619      	mov	r1, r3
 8017b76:	4813      	ldr	r0, [pc, #76]	; (8017bc4 <MX_GPIO_Init+0x160>)
 8017b78:	f001 fe3a 	bl	80197f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Boot1_Pin */
  GPIO_InitStruct.Pin = Boot1_Pin;
 8017b7c:	2304      	movs	r3, #4
 8017b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8017b80:	2300      	movs	r3, #0
 8017b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017b84:	2300      	movs	r3, #0
 8017b86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Boot1_GPIO_Port, &GPIO_InitStruct);
 8017b88:	f107 0314 	add.w	r3, r7, #20
 8017b8c:	4619      	mov	r1, r3
 8017b8e:	480d      	ldr	r0, [pc, #52]	; (8017bc4 <MX_GPIO_Init+0x160>)
 8017b90:	f001 fe2e 	bl	80197f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TpI_Pin */
  GPIO_InitStruct.Pin = TpI_Pin;
 8017b94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8017b98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8017b9a:	2300      	movs	r3, #0
 8017b9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8017b9e:	2301      	movs	r3, #1
 8017ba0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TpI_GPIO_Port, &GPIO_InitStruct);
 8017ba2:	f107 0314 	add.w	r3, r7, #20
 8017ba6:	4619      	mov	r1, r3
 8017ba8:	4806      	ldr	r0, [pc, #24]	; (8017bc4 <MX_GPIO_Init+0x160>)
 8017baa:	f001 fe21 	bl	80197f0 <HAL_GPIO_Init>

}
 8017bae:	bf00      	nop
 8017bb0:	3728      	adds	r7, #40	; 0x28
 8017bb2:	46bd      	mov	sp, r7
 8017bb4:	bd80      	pop	{r7, pc}
 8017bb6:	bf00      	nop
 8017bb8:	40023800 	.word	0x40023800
 8017bbc:	40020000 	.word	0x40020000
 8017bc0:	40020800 	.word	0x40020800
 8017bc4:	40020400 	.word	0x40020400

08017bc8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8017bc8:	b580      	push	{r7, lr}
 8017bca:	b082      	sub	sp, #8
 8017bcc:	af00      	add	r7, sp, #0
 8017bce:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback
  if (htim == &htim3 )
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	4a04      	ldr	r2, [pc, #16]	; (8017be4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8017bd4:	4293      	cmp	r3, r2
 8017bd6:	d101      	bne.n	8017bdc <HAL_TIM_PeriodElapsedCallback+0x14>
  {
//	  htim3->Instance->SR =0;
	  Tim3_ISP();
 8017bd8:	f7f4 fdce 	bl	800c778 <Tim3_ISP>
  }
}
 8017bdc:	bf00      	nop
 8017bde:	3708      	adds	r7, #8
 8017be0:	46bd      	mov	sp, r7
 8017be2:	bd80      	pop	{r7, pc}
 8017be4:	200069d8 	.word	0x200069d8

08017be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8017be8:	b480      	push	{r7}
 8017bea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8017bec:	b672      	cpsid	i
}
 8017bee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8017bf0:	e7fe      	b.n	8017bf0 <Error_Handler+0x8>
	...

08017bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8017bf4:	b480      	push	{r7}
 8017bf6:	b083      	sub	sp, #12
 8017bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8017bfa:	2300      	movs	r3, #0
 8017bfc:	607b      	str	r3, [r7, #4]
 8017bfe:	4b10      	ldr	r3, [pc, #64]	; (8017c40 <HAL_MspInit+0x4c>)
 8017c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017c02:	4a0f      	ldr	r2, [pc, #60]	; (8017c40 <HAL_MspInit+0x4c>)
 8017c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017c08:	6453      	str	r3, [r2, #68]	; 0x44
 8017c0a:	4b0d      	ldr	r3, [pc, #52]	; (8017c40 <HAL_MspInit+0x4c>)
 8017c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017c12:	607b      	str	r3, [r7, #4]
 8017c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8017c16:	2300      	movs	r3, #0
 8017c18:	603b      	str	r3, [r7, #0]
 8017c1a:	4b09      	ldr	r3, [pc, #36]	; (8017c40 <HAL_MspInit+0x4c>)
 8017c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c1e:	4a08      	ldr	r2, [pc, #32]	; (8017c40 <HAL_MspInit+0x4c>)
 8017c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017c24:	6413      	str	r3, [r2, #64]	; 0x40
 8017c26:	4b06      	ldr	r3, [pc, #24]	; (8017c40 <HAL_MspInit+0x4c>)
 8017c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017c2e:	603b      	str	r3, [r7, #0]
 8017c30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8017c32:	bf00      	nop
 8017c34:	370c      	adds	r7, #12
 8017c36:	46bd      	mov	sp, r7
 8017c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c3c:	4770      	bx	lr
 8017c3e:	bf00      	nop
 8017c40:	40023800 	.word	0x40023800

08017c44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8017c44:	b580      	push	{r7, lr}
 8017c46:	b08c      	sub	sp, #48	; 0x30
 8017c48:	af00      	add	r7, sp, #0
 8017c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017c4c:	f107 031c 	add.w	r3, r7, #28
 8017c50:	2200      	movs	r2, #0
 8017c52:	601a      	str	r2, [r3, #0]
 8017c54:	605a      	str	r2, [r3, #4]
 8017c56:	609a      	str	r2, [r3, #8]
 8017c58:	60da      	str	r2, [r3, #12]
 8017c5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	681b      	ldr	r3, [r3, #0]
 8017c60:	4a45      	ldr	r2, [pc, #276]	; (8017d78 <HAL_ADC_MspInit+0x134>)
 8017c62:	4293      	cmp	r3, r2
 8017c64:	d157      	bne.n	8017d16 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8017c66:	2300      	movs	r3, #0
 8017c68:	61bb      	str	r3, [r7, #24]
 8017c6a:	4b44      	ldr	r3, [pc, #272]	; (8017d7c <HAL_ADC_MspInit+0x138>)
 8017c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017c6e:	4a43      	ldr	r2, [pc, #268]	; (8017d7c <HAL_ADC_MspInit+0x138>)
 8017c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017c74:	6453      	str	r3, [r2, #68]	; 0x44
 8017c76:	4b41      	ldr	r3, [pc, #260]	; (8017d7c <HAL_ADC_MspInit+0x138>)
 8017c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017c7e:	61bb      	str	r3, [r7, #24]
 8017c80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017c82:	2300      	movs	r3, #0
 8017c84:	617b      	str	r3, [r7, #20]
 8017c86:	4b3d      	ldr	r3, [pc, #244]	; (8017d7c <HAL_ADC_MspInit+0x138>)
 8017c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017c8a:	4a3c      	ldr	r2, [pc, #240]	; (8017d7c <HAL_ADC_MspInit+0x138>)
 8017c8c:	f043 0301 	orr.w	r3, r3, #1
 8017c90:	6313      	str	r3, [r2, #48]	; 0x30
 8017c92:	4b3a      	ldr	r3, [pc, #232]	; (8017d7c <HAL_ADC_MspInit+0x138>)
 8017c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017c96:	f003 0301 	and.w	r3, r3, #1
 8017c9a:	617b      	str	r3, [r7, #20]
 8017c9c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = Ao_Pin;
 8017c9e:	2340      	movs	r3, #64	; 0x40
 8017ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8017ca2:	2303      	movs	r3, #3
 8017ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017ca6:	2300      	movs	r3, #0
 8017ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Ao_GPIO_Port, &GPIO_InitStruct);
 8017caa:	f107 031c 	add.w	r3, r7, #28
 8017cae:	4619      	mov	r1, r3
 8017cb0:	4833      	ldr	r0, [pc, #204]	; (8017d80 <HAL_ADC_MspInit+0x13c>)
 8017cb2:	f001 fd9d 	bl	80197f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8017cb6:	4b33      	ldr	r3, [pc, #204]	; (8017d84 <HAL_ADC_MspInit+0x140>)
 8017cb8:	4a33      	ldr	r2, [pc, #204]	; (8017d88 <HAL_ADC_MspInit+0x144>)
 8017cba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8017cbc:	4b31      	ldr	r3, [pc, #196]	; (8017d84 <HAL_ADC_MspInit+0x140>)
 8017cbe:	2200      	movs	r2, #0
 8017cc0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8017cc2:	4b30      	ldr	r3, [pc, #192]	; (8017d84 <HAL_ADC_MspInit+0x140>)
 8017cc4:	2200      	movs	r2, #0
 8017cc6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8017cc8:	4b2e      	ldr	r3, [pc, #184]	; (8017d84 <HAL_ADC_MspInit+0x140>)
 8017cca:	2200      	movs	r2, #0
 8017ccc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8017cce:	4b2d      	ldr	r3, [pc, #180]	; (8017d84 <HAL_ADC_MspInit+0x140>)
 8017cd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017cd4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8017cd6:	4b2b      	ldr	r3, [pc, #172]	; (8017d84 <HAL_ADC_MspInit+0x140>)
 8017cd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017cdc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8017cde:	4b29      	ldr	r3, [pc, #164]	; (8017d84 <HAL_ADC_MspInit+0x140>)
 8017ce0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8017ce4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8017ce6:	4b27      	ldr	r3, [pc, #156]	; (8017d84 <HAL_ADC_MspInit+0x140>)
 8017ce8:	2200      	movs	r2, #0
 8017cea:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8017cec:	4b25      	ldr	r3, [pc, #148]	; (8017d84 <HAL_ADC_MspInit+0x140>)
 8017cee:	2200      	movs	r2, #0
 8017cf0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8017cf2:	4b24      	ldr	r3, [pc, #144]	; (8017d84 <HAL_ADC_MspInit+0x140>)
 8017cf4:	2200      	movs	r2, #0
 8017cf6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8017cf8:	4822      	ldr	r0, [pc, #136]	; (8017d84 <HAL_ADC_MspInit+0x140>)
 8017cfa:	f000 ff85 	bl	8018c08 <HAL_DMA_Init>
 8017cfe:	4603      	mov	r3, r0
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d001      	beq.n	8017d08 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8017d04:	f7ff ff70 	bl	8017be8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8017d08:	687b      	ldr	r3, [r7, #4]
 8017d0a:	4a1e      	ldr	r2, [pc, #120]	; (8017d84 <HAL_ADC_MspInit+0x140>)
 8017d0c:	639a      	str	r2, [r3, #56]	; 0x38
 8017d0e:	4a1d      	ldr	r2, [pc, #116]	; (8017d84 <HAL_ADC_MspInit+0x140>)
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8017d14:	e02c      	b.n	8017d70 <HAL_ADC_MspInit+0x12c>
  else if(hadc->Instance==ADC2)
 8017d16:	687b      	ldr	r3, [r7, #4]
 8017d18:	681b      	ldr	r3, [r3, #0]
 8017d1a:	4a1c      	ldr	r2, [pc, #112]	; (8017d8c <HAL_ADC_MspInit+0x148>)
 8017d1c:	4293      	cmp	r3, r2
 8017d1e:	d127      	bne.n	8017d70 <HAL_ADC_MspInit+0x12c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8017d20:	2300      	movs	r3, #0
 8017d22:	613b      	str	r3, [r7, #16]
 8017d24:	4b15      	ldr	r3, [pc, #84]	; (8017d7c <HAL_ADC_MspInit+0x138>)
 8017d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017d28:	4a14      	ldr	r2, [pc, #80]	; (8017d7c <HAL_ADC_MspInit+0x138>)
 8017d2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8017d2e:	6453      	str	r3, [r2, #68]	; 0x44
 8017d30:	4b12      	ldr	r3, [pc, #72]	; (8017d7c <HAL_ADC_MspInit+0x138>)
 8017d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8017d38:	613b      	str	r3, [r7, #16]
 8017d3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017d3c:	2300      	movs	r3, #0
 8017d3e:	60fb      	str	r3, [r7, #12]
 8017d40:	4b0e      	ldr	r3, [pc, #56]	; (8017d7c <HAL_ADC_MspInit+0x138>)
 8017d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d44:	4a0d      	ldr	r2, [pc, #52]	; (8017d7c <HAL_ADC_MspInit+0x138>)
 8017d46:	f043 0301 	orr.w	r3, r3, #1
 8017d4a:	6313      	str	r3, [r2, #48]	; 0x30
 8017d4c:	4b0b      	ldr	r3, [pc, #44]	; (8017d7c <HAL_ADC_MspInit+0x138>)
 8017d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d50:	f003 0301 	and.w	r3, r3, #1
 8017d54:	60fb      	str	r3, [r7, #12]
 8017d56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AoA7_Pin;
 8017d58:	2380      	movs	r3, #128	; 0x80
 8017d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8017d5c:	2303      	movs	r3, #3
 8017d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017d60:	2300      	movs	r3, #0
 8017d62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AoA7_GPIO_Port, &GPIO_InitStruct);
 8017d64:	f107 031c 	add.w	r3, r7, #28
 8017d68:	4619      	mov	r1, r3
 8017d6a:	4805      	ldr	r0, [pc, #20]	; (8017d80 <HAL_ADC_MspInit+0x13c>)
 8017d6c:	f001 fd40 	bl	80197f0 <HAL_GPIO_Init>
}
 8017d70:	bf00      	nop
 8017d72:	3730      	adds	r7, #48	; 0x30
 8017d74:	46bd      	mov	sp, r7
 8017d76:	bd80      	pop	{r7, pc}
 8017d78:	40012000 	.word	0x40012000
 8017d7c:	40023800 	.word	0x40023800
 8017d80:	40020000 	.word	0x40020000
 8017d84:	20006b6c 	.word	0x20006b6c
 8017d88:	40026410 	.word	0x40026410
 8017d8c:	40012100 	.word	0x40012100

08017d90 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8017d90:	b580      	push	{r7, lr}
 8017d92:	b08a      	sub	sp, #40	; 0x28
 8017d94:	af00      	add	r7, sp, #0
 8017d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017d98:	f107 0314 	add.w	r3, r7, #20
 8017d9c:	2200      	movs	r2, #0
 8017d9e:	601a      	str	r2, [r3, #0]
 8017da0:	605a      	str	r2, [r3, #4]
 8017da2:	609a      	str	r2, [r3, #8]
 8017da4:	60da      	str	r2, [r3, #12]
 8017da6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	681b      	ldr	r3, [r3, #0]
 8017dac:	4a33      	ldr	r2, [pc, #204]	; (8017e7c <HAL_DAC_MspInit+0xec>)
 8017dae:	4293      	cmp	r3, r2
 8017db0:	d15f      	bne.n	8017e72 <HAL_DAC_MspInit+0xe2>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8017db2:	2300      	movs	r3, #0
 8017db4:	613b      	str	r3, [r7, #16]
 8017db6:	4b32      	ldr	r3, [pc, #200]	; (8017e80 <HAL_DAC_MspInit+0xf0>)
 8017db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017dba:	4a31      	ldr	r2, [pc, #196]	; (8017e80 <HAL_DAC_MspInit+0xf0>)
 8017dbc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8017dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8017dc2:	4b2f      	ldr	r3, [pc, #188]	; (8017e80 <HAL_DAC_MspInit+0xf0>)
 8017dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017dc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8017dca:	613b      	str	r3, [r7, #16]
 8017dcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017dce:	2300      	movs	r3, #0
 8017dd0:	60fb      	str	r3, [r7, #12]
 8017dd2:	4b2b      	ldr	r3, [pc, #172]	; (8017e80 <HAL_DAC_MspInit+0xf0>)
 8017dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017dd6:	4a2a      	ldr	r2, [pc, #168]	; (8017e80 <HAL_DAC_MspInit+0xf0>)
 8017dd8:	f043 0301 	orr.w	r3, r3, #1
 8017ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8017dde:	4b28      	ldr	r3, [pc, #160]	; (8017e80 <HAL_DAC_MspInit+0xf0>)
 8017de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017de2:	f003 0301 	and.w	r3, r3, #1
 8017de6:	60fb      	str	r3, [r7, #12]
 8017de8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = Fo4_Pin|Ap_Pin;
 8017dea:	2330      	movs	r3, #48	; 0x30
 8017dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8017dee:	2303      	movs	r3, #3
 8017df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017df2:	2300      	movs	r3, #0
 8017df4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017df6:	f107 0314 	add.w	r3, r7, #20
 8017dfa:	4619      	mov	r1, r3
 8017dfc:	4821      	ldr	r0, [pc, #132]	; (8017e84 <HAL_DAC_MspInit+0xf4>)
 8017dfe:	f001 fcf7 	bl	80197f0 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8017e02:	4b21      	ldr	r3, [pc, #132]	; (8017e88 <HAL_DAC_MspInit+0xf8>)
 8017e04:	4a21      	ldr	r2, [pc, #132]	; (8017e8c <HAL_DAC_MspInit+0xfc>)
 8017e06:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8017e08:	4b1f      	ldr	r3, [pc, #124]	; (8017e88 <HAL_DAC_MspInit+0xf8>)
 8017e0a:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8017e0e:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8017e10:	4b1d      	ldr	r3, [pc, #116]	; (8017e88 <HAL_DAC_MspInit+0xf8>)
 8017e12:	2240      	movs	r2, #64	; 0x40
 8017e14:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8017e16:	4b1c      	ldr	r3, [pc, #112]	; (8017e88 <HAL_DAC_MspInit+0xf8>)
 8017e18:	2200      	movs	r2, #0
 8017e1a:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8017e1c:	4b1a      	ldr	r3, [pc, #104]	; (8017e88 <HAL_DAC_MspInit+0xf8>)
 8017e1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017e22:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8017e24:	4b18      	ldr	r3, [pc, #96]	; (8017e88 <HAL_DAC_MspInit+0xf8>)
 8017e26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017e2a:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8017e2c:	4b16      	ldr	r3, [pc, #88]	; (8017e88 <HAL_DAC_MspInit+0xf8>)
 8017e2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8017e32:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 8017e34:	4b14      	ldr	r3, [pc, #80]	; (8017e88 <HAL_DAC_MspInit+0xf8>)
 8017e36:	2200      	movs	r2, #0
 8017e38:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8017e3a:	4b13      	ldr	r3, [pc, #76]	; (8017e88 <HAL_DAC_MspInit+0xf8>)
 8017e3c:	2200      	movs	r2, #0
 8017e3e:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8017e40:	4b11      	ldr	r3, [pc, #68]	; (8017e88 <HAL_DAC_MspInit+0xf8>)
 8017e42:	2200      	movs	r2, #0
 8017e44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8017e46:	4810      	ldr	r0, [pc, #64]	; (8017e88 <HAL_DAC_MspInit+0xf8>)
 8017e48:	f000 fede 	bl	8018c08 <HAL_DMA_Init>
 8017e4c:	4603      	mov	r3, r0
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	d001      	beq.n	8017e56 <HAL_DAC_MspInit+0xc6>
    {
      Error_Handler();
 8017e52:	f7ff fec9 	bl	8017be8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	4a0b      	ldr	r2, [pc, #44]	; (8017e88 <HAL_DAC_MspInit+0xf8>)
 8017e5a:	609a      	str	r2, [r3, #8]
 8017e5c:	4a0a      	ldr	r2, [pc, #40]	; (8017e88 <HAL_DAC_MspInit+0xf8>)
 8017e5e:	687b      	ldr	r3, [r7, #4]
 8017e60:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8017e62:	2200      	movs	r2, #0
 8017e64:	2100      	movs	r1, #0
 8017e66:	2036      	movs	r0, #54	; 0x36
 8017e68:	f000 fe01 	bl	8018a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8017e6c:	2036      	movs	r0, #54	; 0x36
 8017e6e:	f000 fe1a 	bl	8018aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8017e72:	bf00      	nop
 8017e74:	3728      	adds	r7, #40	; 0x28
 8017e76:	46bd      	mov	sp, r7
 8017e78:	bd80      	pop	{r7, pc}
 8017e7a:	bf00      	nop
 8017e7c:	40007400 	.word	0x40007400
 8017e80:	40023800 	.word	0x40023800
 8017e84:	40020000 	.word	0x40020000
 8017e88:	20006a78 	.word	0x20006a78
 8017e8c:	40026088 	.word	0x40026088

08017e90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8017e90:	b580      	push	{r7, lr}
 8017e92:	b08c      	sub	sp, #48	; 0x30
 8017e94:	af00      	add	r7, sp, #0
 8017e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017e98:	f107 031c 	add.w	r3, r7, #28
 8017e9c:	2200      	movs	r2, #0
 8017e9e:	601a      	str	r2, [r3, #0]
 8017ea0:	605a      	str	r2, [r3, #4]
 8017ea2:	609a      	str	r2, [r3, #8]
 8017ea4:	60da      	str	r2, [r3, #12]
 8017ea6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	681b      	ldr	r3, [r3, #0]
 8017eac:	4a3a      	ldr	r2, [pc, #232]	; (8017f98 <HAL_SPI_MspInit+0x108>)
 8017eae:	4293      	cmp	r3, r2
 8017eb0:	d135      	bne.n	8017f1e <HAL_SPI_MspInit+0x8e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8017eb2:	2300      	movs	r3, #0
 8017eb4:	61bb      	str	r3, [r7, #24]
 8017eb6:	4b39      	ldr	r3, [pc, #228]	; (8017f9c <HAL_SPI_MspInit+0x10c>)
 8017eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017eba:	4a38      	ldr	r2, [pc, #224]	; (8017f9c <HAL_SPI_MspInit+0x10c>)
 8017ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8017ec2:	4b36      	ldr	r3, [pc, #216]	; (8017f9c <HAL_SPI_MspInit+0x10c>)
 8017ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017eca:	61bb      	str	r3, [r7, #24]
 8017ecc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8017ece:	2300      	movs	r3, #0
 8017ed0:	617b      	str	r3, [r7, #20]
 8017ed2:	4b32      	ldr	r3, [pc, #200]	; (8017f9c <HAL_SPI_MspInit+0x10c>)
 8017ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ed6:	4a31      	ldr	r2, [pc, #196]	; (8017f9c <HAL_SPI_MspInit+0x10c>)
 8017ed8:	f043 0302 	orr.w	r3, r3, #2
 8017edc:	6313      	str	r3, [r2, #48]	; 0x30
 8017ede:	4b2f      	ldr	r3, [pc, #188]	; (8017f9c <HAL_SPI_MspInit+0x10c>)
 8017ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ee2:	f003 0302 	and.w	r3, r3, #2
 8017ee6:	617b      	str	r3, [r7, #20]
 8017ee8:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|So_Pin|Si_Pin;
 8017eea:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8017eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017ef0:	2302      	movs	r3, #2
 8017ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017ef4:	2300      	movs	r3, #0
 8017ef6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017ef8:	2303      	movs	r3, #3
 8017efa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8017efc:	2305      	movs	r3, #5
 8017efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017f00:	f107 031c 	add.w	r3, r7, #28
 8017f04:	4619      	mov	r1, r3
 8017f06:	4826      	ldr	r0, [pc, #152]	; (8017fa0 <HAL_SPI_MspInit+0x110>)
 8017f08:	f001 fc72 	bl	80197f0 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 1, 0);
 8017f0c:	2200      	movs	r2, #0
 8017f0e:	2101      	movs	r1, #1
 8017f10:	2024      	movs	r0, #36	; 0x24
 8017f12:	f000 fdac 	bl	8018a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8017f16:	2024      	movs	r0, #36	; 0x24
 8017f18:	f000 fdc5 	bl	8018aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8017f1c:	e038      	b.n	8017f90 <HAL_SPI_MspInit+0x100>
  else if(hspi->Instance==SPI3)
 8017f1e:	687b      	ldr	r3, [r7, #4]
 8017f20:	681b      	ldr	r3, [r3, #0]
 8017f22:	4a20      	ldr	r2, [pc, #128]	; (8017fa4 <HAL_SPI_MspInit+0x114>)
 8017f24:	4293      	cmp	r3, r2
 8017f26:	d133      	bne.n	8017f90 <HAL_SPI_MspInit+0x100>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8017f28:	2300      	movs	r3, #0
 8017f2a:	613b      	str	r3, [r7, #16]
 8017f2c:	4b1b      	ldr	r3, [pc, #108]	; (8017f9c <HAL_SPI_MspInit+0x10c>)
 8017f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f30:	4a1a      	ldr	r2, [pc, #104]	; (8017f9c <HAL_SPI_MspInit+0x10c>)
 8017f32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8017f36:	6413      	str	r3, [r2, #64]	; 0x40
 8017f38:	4b18      	ldr	r3, [pc, #96]	; (8017f9c <HAL_SPI_MspInit+0x10c>)
 8017f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8017f40:	613b      	str	r3, [r7, #16]
 8017f42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8017f44:	2300      	movs	r3, #0
 8017f46:	60fb      	str	r3, [r7, #12]
 8017f48:	4b14      	ldr	r3, [pc, #80]	; (8017f9c <HAL_SPI_MspInit+0x10c>)
 8017f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f4c:	4a13      	ldr	r2, [pc, #76]	; (8017f9c <HAL_SPI_MspInit+0x10c>)
 8017f4e:	f043 0302 	orr.w	r3, r3, #2
 8017f52:	6313      	str	r3, [r2, #48]	; 0x30
 8017f54:	4b11      	ldr	r3, [pc, #68]	; (8017f9c <HAL_SPI_MspInit+0x10c>)
 8017f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f58:	f003 0302 	and.w	r3, r3, #2
 8017f5c:	60fb      	str	r3, [r7, #12]
 8017f5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TpCk_Pin|TpSo_Pin|TpSi_Pin;
 8017f60:	2338      	movs	r3, #56	; 0x38
 8017f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017f64:	2302      	movs	r3, #2
 8017f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017f68:	2300      	movs	r3, #0
 8017f6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017f6c:	2303      	movs	r3, #3
 8017f6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8017f70:	2306      	movs	r3, #6
 8017f72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017f74:	f107 031c 	add.w	r3, r7, #28
 8017f78:	4619      	mov	r1, r3
 8017f7a:	4809      	ldr	r0, [pc, #36]	; (8017fa0 <HAL_SPI_MspInit+0x110>)
 8017f7c:	f001 fc38 	bl	80197f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 1, 0);
 8017f80:	2200      	movs	r2, #0
 8017f82:	2101      	movs	r1, #1
 8017f84:	2033      	movs	r0, #51	; 0x33
 8017f86:	f000 fd72 	bl	8018a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8017f8a:	2033      	movs	r0, #51	; 0x33
 8017f8c:	f000 fd8b 	bl	8018aa6 <HAL_NVIC_EnableIRQ>
}
 8017f90:	bf00      	nop
 8017f92:	3730      	adds	r7, #48	; 0x30
 8017f94:	46bd      	mov	sp, r7
 8017f96:	bd80      	pop	{r7, pc}
 8017f98:	40003800 	.word	0x40003800
 8017f9c:	40023800 	.word	0x40023800
 8017fa0:	40020400 	.word	0x40020400
 8017fa4:	40003c00 	.word	0x40003c00

08017fa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8017fa8:	b580      	push	{r7, lr}
 8017faa:	b086      	sub	sp, #24
 8017fac:	af00      	add	r7, sp, #0
 8017fae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	681b      	ldr	r3, [r3, #0]
 8017fb4:	4a44      	ldr	r2, [pc, #272]	; (80180c8 <HAL_TIM_Base_MspInit+0x120>)
 8017fb6:	4293      	cmp	r3, r2
 8017fb8:	d10e      	bne.n	8017fd8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8017fba:	2300      	movs	r3, #0
 8017fbc:	617b      	str	r3, [r7, #20]
 8017fbe:	4b43      	ldr	r3, [pc, #268]	; (80180cc <HAL_TIM_Base_MspInit+0x124>)
 8017fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017fc2:	4a42      	ldr	r2, [pc, #264]	; (80180cc <HAL_TIM_Base_MspInit+0x124>)
 8017fc4:	f043 0301 	orr.w	r3, r3, #1
 8017fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8017fca:	4b40      	ldr	r3, [pc, #256]	; (80180cc <HAL_TIM_Base_MspInit+0x124>)
 8017fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017fce:	f003 0301 	and.w	r3, r3, #1
 8017fd2:	617b      	str	r3, [r7, #20]
 8017fd4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8017fd6:	e072      	b.n	80180be <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM3)
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	681b      	ldr	r3, [r3, #0]
 8017fdc:	4a3c      	ldr	r2, [pc, #240]	; (80180d0 <HAL_TIM_Base_MspInit+0x128>)
 8017fde:	4293      	cmp	r3, r2
 8017fe0:	d116      	bne.n	8018010 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8017fe2:	2300      	movs	r3, #0
 8017fe4:	613b      	str	r3, [r7, #16]
 8017fe6:	4b39      	ldr	r3, [pc, #228]	; (80180cc <HAL_TIM_Base_MspInit+0x124>)
 8017fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017fea:	4a38      	ldr	r2, [pc, #224]	; (80180cc <HAL_TIM_Base_MspInit+0x124>)
 8017fec:	f043 0302 	orr.w	r3, r3, #2
 8017ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8017ff2:	4b36      	ldr	r3, [pc, #216]	; (80180cc <HAL_TIM_Base_MspInit+0x124>)
 8017ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ff6:	f003 0302 	and.w	r3, r3, #2
 8017ffa:	613b      	str	r3, [r7, #16]
 8017ffc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8017ffe:	2200      	movs	r2, #0
 8018000:	2100      	movs	r1, #0
 8018002:	201d      	movs	r0, #29
 8018004:	f000 fd33 	bl	8018a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8018008:	201d      	movs	r0, #29
 801800a:	f000 fd4c 	bl	8018aa6 <HAL_NVIC_EnableIRQ>
}
 801800e:	e056      	b.n	80180be <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM5)
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	681b      	ldr	r3, [r3, #0]
 8018014:	4a2f      	ldr	r2, [pc, #188]	; (80180d4 <HAL_TIM_Base_MspInit+0x12c>)
 8018016:	4293      	cmp	r3, r2
 8018018:	d10e      	bne.n	8018038 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM5_CLK_ENABLE();
 801801a:	2300      	movs	r3, #0
 801801c:	60fb      	str	r3, [r7, #12]
 801801e:	4b2b      	ldr	r3, [pc, #172]	; (80180cc <HAL_TIM_Base_MspInit+0x124>)
 8018020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018022:	4a2a      	ldr	r2, [pc, #168]	; (80180cc <HAL_TIM_Base_MspInit+0x124>)
 8018024:	f043 0308 	orr.w	r3, r3, #8
 8018028:	6413      	str	r3, [r2, #64]	; 0x40
 801802a:	4b28      	ldr	r3, [pc, #160]	; (80180cc <HAL_TIM_Base_MspInit+0x124>)
 801802c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801802e:	f003 0308 	and.w	r3, r3, #8
 8018032:	60fb      	str	r3, [r7, #12]
 8018034:	68fb      	ldr	r3, [r7, #12]
}
 8018036:	e042      	b.n	80180be <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM7)
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	681b      	ldr	r3, [r3, #0]
 801803c:	4a26      	ldr	r2, [pc, #152]	; (80180d8 <HAL_TIM_Base_MspInit+0x130>)
 801803e:	4293      	cmp	r3, r2
 8018040:	d13d      	bne.n	80180be <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8018042:	2300      	movs	r3, #0
 8018044:	60bb      	str	r3, [r7, #8]
 8018046:	4b21      	ldr	r3, [pc, #132]	; (80180cc <HAL_TIM_Base_MspInit+0x124>)
 8018048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801804a:	4a20      	ldr	r2, [pc, #128]	; (80180cc <HAL_TIM_Base_MspInit+0x124>)
 801804c:	f043 0320 	orr.w	r3, r3, #32
 8018050:	6413      	str	r3, [r2, #64]	; 0x40
 8018052:	4b1e      	ldr	r3, [pc, #120]	; (80180cc <HAL_TIM_Base_MspInit+0x124>)
 8018054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018056:	f003 0320 	and.w	r3, r3, #32
 801805a:	60bb      	str	r3, [r7, #8]
 801805c:	68bb      	ldr	r3, [r7, #8]
    hdma_tim7_up.Instance = DMA1_Stream2;
 801805e:	4b1f      	ldr	r3, [pc, #124]	; (80180dc <HAL_TIM_Base_MspInit+0x134>)
 8018060:	4a1f      	ldr	r2, [pc, #124]	; (80180e0 <HAL_TIM_Base_MspInit+0x138>)
 8018062:	601a      	str	r2, [r3, #0]
    hdma_tim7_up.Init.Channel = DMA_CHANNEL_1;
 8018064:	4b1d      	ldr	r3, [pc, #116]	; (80180dc <HAL_TIM_Base_MspInit+0x134>)
 8018066:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 801806a:	605a      	str	r2, [r3, #4]
    hdma_tim7_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 801806c:	4b1b      	ldr	r3, [pc, #108]	; (80180dc <HAL_TIM_Base_MspInit+0x134>)
 801806e:	2200      	movs	r2, #0
 8018070:	609a      	str	r2, [r3, #8]
    hdma_tim7_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8018072:	4b1a      	ldr	r3, [pc, #104]	; (80180dc <HAL_TIM_Base_MspInit+0x134>)
 8018074:	2200      	movs	r2, #0
 8018076:	60da      	str	r2, [r3, #12]
    hdma_tim7_up.Init.MemInc = DMA_MINC_ENABLE;
 8018078:	4b18      	ldr	r3, [pc, #96]	; (80180dc <HAL_TIM_Base_MspInit+0x134>)
 801807a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801807e:	611a      	str	r2, [r3, #16]
    hdma_tim7_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8018080:	4b16      	ldr	r3, [pc, #88]	; (80180dc <HAL_TIM_Base_MspInit+0x134>)
 8018082:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018086:	615a      	str	r2, [r3, #20]
    hdma_tim7_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8018088:	4b14      	ldr	r3, [pc, #80]	; (80180dc <HAL_TIM_Base_MspInit+0x134>)
 801808a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801808e:	619a      	str	r2, [r3, #24]
    hdma_tim7_up.Init.Mode = DMA_NORMAL;
 8018090:	4b12      	ldr	r3, [pc, #72]	; (80180dc <HAL_TIM_Base_MspInit+0x134>)
 8018092:	2200      	movs	r2, #0
 8018094:	61da      	str	r2, [r3, #28]
    hdma_tim7_up.Init.Priority = DMA_PRIORITY_LOW;
 8018096:	4b11      	ldr	r3, [pc, #68]	; (80180dc <HAL_TIM_Base_MspInit+0x134>)
 8018098:	2200      	movs	r2, #0
 801809a:	621a      	str	r2, [r3, #32]
    hdma_tim7_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801809c:	4b0f      	ldr	r3, [pc, #60]	; (80180dc <HAL_TIM_Base_MspInit+0x134>)
 801809e:	2200      	movs	r2, #0
 80180a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim7_up) != HAL_OK)
 80180a2:	480e      	ldr	r0, [pc, #56]	; (80180dc <HAL_TIM_Base_MspInit+0x134>)
 80180a4:	f000 fdb0 	bl	8018c08 <HAL_DMA_Init>
 80180a8:	4603      	mov	r3, r0
 80180aa:	2b00      	cmp	r3, #0
 80180ac:	d001      	beq.n	80180b2 <HAL_TIM_Base_MspInit+0x10a>
      Error_Handler();
 80180ae:	f7ff fd9b 	bl	8017be8 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim7_up);
 80180b2:	687b      	ldr	r3, [r7, #4]
 80180b4:	4a09      	ldr	r2, [pc, #36]	; (80180dc <HAL_TIM_Base_MspInit+0x134>)
 80180b6:	621a      	str	r2, [r3, #32]
 80180b8:	4a08      	ldr	r2, [pc, #32]	; (80180dc <HAL_TIM_Base_MspInit+0x134>)
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	6393      	str	r3, [r2, #56]	; 0x38
}
 80180be:	bf00      	nop
 80180c0:	3718      	adds	r7, #24
 80180c2:	46bd      	mov	sp, r7
 80180c4:	bd80      	pop	{r7, pc}
 80180c6:	bf00      	nop
 80180c8:	40010000 	.word	0x40010000
 80180cc:	40023800 	.word	0x40023800
 80180d0:	40000400 	.word	0x40000400
 80180d4:	40000c00 	.word	0x40000c00
 80180d8:	40001400 	.word	0x40001400
 80180dc:	20006930 	.word	0x20006930
 80180e0:	40026040 	.word	0x40026040

080180e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80180e4:	b480      	push	{r7}
 80180e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80180e8:	e7fe      	b.n	80180e8 <NMI_Handler+0x4>

080180ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80180ea:	b480      	push	{r7}
 80180ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80180ee:	e7fe      	b.n	80180ee <HardFault_Handler+0x4>

080180f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80180f0:	b480      	push	{r7}
 80180f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80180f4:	e7fe      	b.n	80180f4 <MemManage_Handler+0x4>

080180f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80180f6:	b480      	push	{r7}
 80180f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80180fa:	e7fe      	b.n	80180fa <BusFault_Handler+0x4>

080180fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80180fc:	b480      	push	{r7}
 80180fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8018100:	e7fe      	b.n	8018100 <UsageFault_Handler+0x4>

08018102 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8018102:	b480      	push	{r7}
 8018104:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8018106:	bf00      	nop
 8018108:	46bd      	mov	sp, r7
 801810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801810e:	4770      	bx	lr

08018110 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8018110:	b480      	push	{r7}
 8018112:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8018114:	bf00      	nop
 8018116:	46bd      	mov	sp, r7
 8018118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801811c:	4770      	bx	lr

0801811e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801811e:	b480      	push	{r7}
 8018120:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8018122:	bf00      	nop
 8018124:	46bd      	mov	sp, r7
 8018126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801812a:	4770      	bx	lr

0801812c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 801812c:	b580      	push	{r7, lr}
 801812e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8018130:	f000 f90c 	bl	801834c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8018134:	bf00      	nop
 8018136:	bd80      	pop	{r7, pc}

08018138 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8018138:	b580      	push	{r7, lr}
 801813a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim7_up);
 801813c:	4802      	ldr	r0, [pc, #8]	; (8018148 <DMA1_Stream2_IRQHandler+0x10>)
 801813e:	f000 fe33 	bl	8018da8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8018142:	bf00      	nop
 8018144:	bd80      	pop	{r7, pc}
 8018146:	bf00      	nop
 8018148:	20006930 	.word	0x20006930

0801814c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 801814c:	b580      	push	{r7, lr}
 801814e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8018150:	4802      	ldr	r0, [pc, #8]	; (801815c <DMA1_Stream5_IRQHandler+0x10>)
 8018152:	f000 fe29 	bl	8018da8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8018156:	bf00      	nop
 8018158:	bd80      	pop	{r7, pc}
 801815a:	bf00      	nop
 801815c:	20006a78 	.word	0x20006a78

08018160 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8018160:	b580      	push	{r7, lr}
 8018162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8018164:	4802      	ldr	r0, [pc, #8]	; (8018170 <TIM3_IRQHandler+0x10>)
 8018166:	f004 feff 	bl	801cf68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 801816a:	bf00      	nop
 801816c:	bd80      	pop	{r7, pc}
 801816e:	bf00      	nop
 8018170:	200069d8 	.word	0x200069d8

08018174 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8018174:	b580      	push	{r7, lr}
 8018176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8018178:	4802      	ldr	r0, [pc, #8]	; (8018184 <SPI2_IRQHandler+0x10>)
 801817a:	f004 fbd9 	bl	801c930 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 801817e:	bf00      	nop
 8018180:	bd80      	pop	{r7, pc}
 8018182:	bf00      	nop
 8018184:	20006890 	.word	0x20006890

08018188 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8018188:	b580      	push	{r7, lr}
 801818a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 801818c:	4802      	ldr	r0, [pc, #8]	; (8018198 <SPI3_IRQHandler+0x10>)
 801818e:	f004 fbcf 	bl	801c930 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8018192:	bf00      	nop
 8018194:	bd80      	pop	{r7, pc}
 8018196:	bf00      	nop
 8018198:	20006a20 	.word	0x20006a20

0801819c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 801819c:	b580      	push	{r7, lr}
 801819e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80181a0:	4802      	ldr	r0, [pc, #8]	; (80181ac <DMA2_Stream0_IRQHandler+0x10>)
 80181a2:	f000 fe01 	bl	8018da8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80181a6:	bf00      	nop
 80181a8:	bd80      	pop	{r7, pc}
 80181aa:	bf00      	nop
 80181ac:	20006b6c 	.word	0x20006b6c

080181b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80181b0:	b580      	push	{r7, lr}
 80181b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80181b4:	4802      	ldr	r0, [pc, #8]	; (80181c0 <OTG_FS_IRQHandler+0x10>)
 80181b6:	f001 fe37 	bl	8019e28 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80181ba:	bf00      	nop
 80181bc:	bd80      	pop	{r7, pc}
 80181be:	bf00      	nop
 80181c0:	2000716c 	.word	0x2000716c

080181c4 <_sbrk>:
 80181c4:	b580      	push	{r7, lr}
 80181c6:	b086      	sub	sp, #24
 80181c8:	af00      	add	r7, sp, #0
 80181ca:	6078      	str	r0, [r7, #4]
 80181cc:	4a14      	ldr	r2, [pc, #80]	; (8018220 <_sbrk+0x5c>)
 80181ce:	4b15      	ldr	r3, [pc, #84]	; (8018224 <_sbrk+0x60>)
 80181d0:	1ad3      	subs	r3, r2, r3
 80181d2:	617b      	str	r3, [r7, #20]
 80181d4:	697b      	ldr	r3, [r7, #20]
 80181d6:	613b      	str	r3, [r7, #16]
 80181d8:	4b13      	ldr	r3, [pc, #76]	; (8018228 <_sbrk+0x64>)
 80181da:	681b      	ldr	r3, [r3, #0]
 80181dc:	2b00      	cmp	r3, #0
 80181de:	d102      	bne.n	80181e6 <_sbrk+0x22>
 80181e0:	4b11      	ldr	r3, [pc, #68]	; (8018228 <_sbrk+0x64>)
 80181e2:	4a12      	ldr	r2, [pc, #72]	; (801822c <_sbrk+0x68>)
 80181e4:	601a      	str	r2, [r3, #0]
 80181e6:	4b10      	ldr	r3, [pc, #64]	; (8018228 <_sbrk+0x64>)
 80181e8:	681a      	ldr	r2, [r3, #0]
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	4413      	add	r3, r2
 80181ee:	693a      	ldr	r2, [r7, #16]
 80181f0:	429a      	cmp	r2, r3
 80181f2:	d207      	bcs.n	8018204 <_sbrk+0x40>
 80181f4:	f00a fcb6 	bl	8022b64 <__errno>
 80181f8:	4603      	mov	r3, r0
 80181fa:	220c      	movs	r2, #12
 80181fc:	601a      	str	r2, [r3, #0]
 80181fe:	f04f 33ff 	mov.w	r3, #4294967295
 8018202:	e009      	b.n	8018218 <_sbrk+0x54>
 8018204:	4b08      	ldr	r3, [pc, #32]	; (8018228 <_sbrk+0x64>)
 8018206:	681b      	ldr	r3, [r3, #0]
 8018208:	60fb      	str	r3, [r7, #12]
 801820a:	4b07      	ldr	r3, [pc, #28]	; (8018228 <_sbrk+0x64>)
 801820c:	681a      	ldr	r2, [r3, #0]
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	4413      	add	r3, r2
 8018212:	4a05      	ldr	r2, [pc, #20]	; (8018228 <_sbrk+0x64>)
 8018214:	6013      	str	r3, [r2, #0]
 8018216:	68fb      	ldr	r3, [r7, #12]
 8018218:	4618      	mov	r0, r3
 801821a:	3718      	adds	r7, #24
 801821c:	46bd      	mov	sp, r7
 801821e:	bd80      	pop	{r7, pc}
 8018220:	20020000 	.word	0x20020000
 8018224:	00000600 	.word	0x00000600
 8018228:	200007a8 	.word	0x200007a8
 801822c:	20007588 	.word	0x20007588

08018230 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8018230:	b480      	push	{r7}
 8018232:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8018234:	4b06      	ldr	r3, [pc, #24]	; (8018250 <SystemInit+0x20>)
 8018236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801823a:	4a05      	ldr	r2, [pc, #20]	; (8018250 <SystemInit+0x20>)
 801823c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018240:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8018244:	bf00      	nop
 8018246:	46bd      	mov	sp, r7
 8018248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801824c:	4770      	bx	lr
 801824e:	bf00      	nop
 8018250:	e000ed00 	.word	0xe000ed00

08018254 <Reset_Handler>:
 8018254:	f8df d034 	ldr.w	sp, [pc, #52]	; 801828c <LoopFillZerobss+0x12>
 8018258:	480d      	ldr	r0, [pc, #52]	; (8018290 <LoopFillZerobss+0x16>)
 801825a:	490e      	ldr	r1, [pc, #56]	; (8018294 <LoopFillZerobss+0x1a>)
 801825c:	4a0e      	ldr	r2, [pc, #56]	; (8018298 <LoopFillZerobss+0x1e>)
 801825e:	2300      	movs	r3, #0
 8018260:	e002      	b.n	8018268 <LoopCopyDataInit>

08018262 <CopyDataInit>:
 8018262:	58d4      	ldr	r4, [r2, r3]
 8018264:	50c4      	str	r4, [r0, r3]
 8018266:	3304      	adds	r3, #4

08018268 <LoopCopyDataInit>:
 8018268:	18c4      	adds	r4, r0, r3
 801826a:	428c      	cmp	r4, r1
 801826c:	d3f9      	bcc.n	8018262 <CopyDataInit>
 801826e:	4a0b      	ldr	r2, [pc, #44]	; (801829c <LoopFillZerobss+0x22>)
 8018270:	4c0b      	ldr	r4, [pc, #44]	; (80182a0 <LoopFillZerobss+0x26>)
 8018272:	2300      	movs	r3, #0
 8018274:	e001      	b.n	801827a <LoopFillZerobss>

08018276 <FillZerobss>:
 8018276:	6013      	str	r3, [r2, #0]
 8018278:	3204      	adds	r2, #4

0801827a <LoopFillZerobss>:
 801827a:	42a2      	cmp	r2, r4
 801827c:	d3fb      	bcc.n	8018276 <FillZerobss>
 801827e:	f7ff ffd7 	bl	8018230 <SystemInit>
 8018282:	f00a fc75 	bl	8022b70 <__libc_init_array>
 8018286:	f7fe f819 	bl	80162bc <main>
 801828a:	4770      	bx	lr
 801828c:	20020000 	.word	0x20020000
 8018290:	20000000 	.word	0x20000000
 8018294:	20000760 	.word	0x20000760
 8018298:	08022dbc 	.word	0x08022dbc
 801829c:	20000760 	.word	0x20000760
 80182a0:	20007584 	.word	0x20007584

080182a4 <ADC_IRQHandler>:
 80182a4:	e7fe      	b.n	80182a4 <ADC_IRQHandler>
	...

080182a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80182a8:	b580      	push	{r7, lr}
 80182aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80182ac:	4b0e      	ldr	r3, [pc, #56]	; (80182e8 <HAL_Init+0x40>)
 80182ae:	681b      	ldr	r3, [r3, #0]
 80182b0:	4a0d      	ldr	r2, [pc, #52]	; (80182e8 <HAL_Init+0x40>)
 80182b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80182b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80182b8:	4b0b      	ldr	r3, [pc, #44]	; (80182e8 <HAL_Init+0x40>)
 80182ba:	681b      	ldr	r3, [r3, #0]
 80182bc:	4a0a      	ldr	r2, [pc, #40]	; (80182e8 <HAL_Init+0x40>)
 80182be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80182c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80182c4:	4b08      	ldr	r3, [pc, #32]	; (80182e8 <HAL_Init+0x40>)
 80182c6:	681b      	ldr	r3, [r3, #0]
 80182c8:	4a07      	ldr	r2, [pc, #28]	; (80182e8 <HAL_Init+0x40>)
 80182ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80182ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80182d0:	2003      	movs	r0, #3
 80182d2:	f000 fbc1 	bl	8018a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80182d6:	2000      	movs	r0, #0
 80182d8:	f000 f808 	bl	80182ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80182dc:	f7ff fc8a 	bl	8017bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80182e0:	2300      	movs	r3, #0
}
 80182e2:	4618      	mov	r0, r3
 80182e4:	bd80      	pop	{r7, pc}
 80182e6:	bf00      	nop
 80182e8:	40023c00 	.word	0x40023c00

080182ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80182ec:	b580      	push	{r7, lr}
 80182ee:	b082      	sub	sp, #8
 80182f0:	af00      	add	r7, sp, #0
 80182f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80182f4:	4b12      	ldr	r3, [pc, #72]	; (8018340 <HAL_InitTick+0x54>)
 80182f6:	681a      	ldr	r2, [r3, #0]
 80182f8:	4b12      	ldr	r3, [pc, #72]	; (8018344 <HAL_InitTick+0x58>)
 80182fa:	781b      	ldrb	r3, [r3, #0]
 80182fc:	4619      	mov	r1, r3
 80182fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018302:	fbb3 f3f1 	udiv	r3, r3, r1
 8018306:	fbb2 f3f3 	udiv	r3, r2, r3
 801830a:	4618      	mov	r0, r3
 801830c:	f000 fbd9 	bl	8018ac2 <HAL_SYSTICK_Config>
 8018310:	4603      	mov	r3, r0
 8018312:	2b00      	cmp	r3, #0
 8018314:	d001      	beq.n	801831a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8018316:	2301      	movs	r3, #1
 8018318:	e00e      	b.n	8018338 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801831a:	687b      	ldr	r3, [r7, #4]
 801831c:	2b0f      	cmp	r3, #15
 801831e:	d80a      	bhi.n	8018336 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8018320:	2200      	movs	r2, #0
 8018322:	6879      	ldr	r1, [r7, #4]
 8018324:	f04f 30ff 	mov.w	r0, #4294967295
 8018328:	f000 fba1 	bl	8018a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801832c:	4a06      	ldr	r2, [pc, #24]	; (8018348 <HAL_InitTick+0x5c>)
 801832e:	687b      	ldr	r3, [r7, #4]
 8018330:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8018332:	2300      	movs	r3, #0
 8018334:	e000      	b.n	8018338 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8018336:	2301      	movs	r3, #1
}
 8018338:	4618      	mov	r0, r3
 801833a:	3708      	adds	r7, #8
 801833c:	46bd      	mov	sp, r7
 801833e:	bd80      	pop	{r7, pc}
 8018340:	20000588 	.word	0x20000588
 8018344:	20000590 	.word	0x20000590
 8018348:	2000058c 	.word	0x2000058c

0801834c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801834c:	b480      	push	{r7}
 801834e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8018350:	4b06      	ldr	r3, [pc, #24]	; (801836c <HAL_IncTick+0x20>)
 8018352:	781b      	ldrb	r3, [r3, #0]
 8018354:	461a      	mov	r2, r3
 8018356:	4b06      	ldr	r3, [pc, #24]	; (8018370 <HAL_IncTick+0x24>)
 8018358:	681b      	ldr	r3, [r3, #0]
 801835a:	4413      	add	r3, r2
 801835c:	4a04      	ldr	r2, [pc, #16]	; (8018370 <HAL_IncTick+0x24>)
 801835e:	6013      	str	r3, [r2, #0]
}
 8018360:	bf00      	nop
 8018362:	46bd      	mov	sp, r7
 8018364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018368:	4770      	bx	lr
 801836a:	bf00      	nop
 801836c:	20000590 	.word	0x20000590
 8018370:	20006c78 	.word	0x20006c78

08018374 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8018374:	b480      	push	{r7}
 8018376:	af00      	add	r7, sp, #0
  return uwTick;
 8018378:	4b03      	ldr	r3, [pc, #12]	; (8018388 <HAL_GetTick+0x14>)
 801837a:	681b      	ldr	r3, [r3, #0]
}
 801837c:	4618      	mov	r0, r3
 801837e:	46bd      	mov	sp, r7
 8018380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018384:	4770      	bx	lr
 8018386:	bf00      	nop
 8018388:	20006c78 	.word	0x20006c78

0801838c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801838c:	b580      	push	{r7, lr}
 801838e:	b084      	sub	sp, #16
 8018390:	af00      	add	r7, sp, #0
 8018392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8018394:	f7ff ffee 	bl	8018374 <HAL_GetTick>
 8018398:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801839e:	68fb      	ldr	r3, [r7, #12]
 80183a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80183a4:	d005      	beq.n	80183b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80183a6:	4b0a      	ldr	r3, [pc, #40]	; (80183d0 <HAL_Delay+0x44>)
 80183a8:	781b      	ldrb	r3, [r3, #0]
 80183aa:	461a      	mov	r2, r3
 80183ac:	68fb      	ldr	r3, [r7, #12]
 80183ae:	4413      	add	r3, r2
 80183b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80183b2:	bf00      	nop
 80183b4:	f7ff ffde 	bl	8018374 <HAL_GetTick>
 80183b8:	4602      	mov	r2, r0
 80183ba:	68bb      	ldr	r3, [r7, #8]
 80183bc:	1ad3      	subs	r3, r2, r3
 80183be:	68fa      	ldr	r2, [r7, #12]
 80183c0:	429a      	cmp	r2, r3
 80183c2:	d8f7      	bhi.n	80183b4 <HAL_Delay+0x28>
  {
  }
}
 80183c4:	bf00      	nop
 80183c6:	bf00      	nop
 80183c8:	3710      	adds	r7, #16
 80183ca:	46bd      	mov	sp, r7
 80183cc:	bd80      	pop	{r7, pc}
 80183ce:	bf00      	nop
 80183d0:	20000590 	.word	0x20000590

080183d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80183d4:	b580      	push	{r7, lr}
 80183d6:	b084      	sub	sp, #16
 80183d8:	af00      	add	r7, sp, #0
 80183da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80183dc:	2300      	movs	r3, #0
 80183de:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	2b00      	cmp	r3, #0
 80183e4:	d101      	bne.n	80183ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80183e6:	2301      	movs	r3, #1
 80183e8:	e033      	b.n	8018452 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	d109      	bne.n	8018406 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80183f2:	6878      	ldr	r0, [r7, #4]
 80183f4:	f7ff fc26 	bl	8017c44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	2200      	movs	r2, #0
 80183fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	2200      	movs	r2, #0
 8018402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8018406:	687b      	ldr	r3, [r7, #4]
 8018408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801840a:	f003 0310 	and.w	r3, r3, #16
 801840e:	2b00      	cmp	r3, #0
 8018410:	d118      	bne.n	8018444 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8018412:	687b      	ldr	r3, [r7, #4]
 8018414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018416:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801841a:	f023 0302 	bic.w	r3, r3, #2
 801841e:	f043 0202 	orr.w	r2, r3, #2
 8018422:	687b      	ldr	r3, [r7, #4]
 8018424:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8018426:	6878      	ldr	r0, [r7, #4]
 8018428:	f000 f94a 	bl	80186c0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	2200      	movs	r2, #0
 8018430:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018436:	f023 0303 	bic.w	r3, r3, #3
 801843a:	f043 0201 	orr.w	r2, r3, #1
 801843e:	687b      	ldr	r3, [r7, #4]
 8018440:	641a      	str	r2, [r3, #64]	; 0x40
 8018442:	e001      	b.n	8018448 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8018444:	2301      	movs	r3, #1
 8018446:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	2200      	movs	r2, #0
 801844c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8018450:	7bfb      	ldrb	r3, [r7, #15]
}
 8018452:	4618      	mov	r0, r3
 8018454:	3710      	adds	r7, #16
 8018456:	46bd      	mov	sp, r7
 8018458:	bd80      	pop	{r7, pc}
	...

0801845c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 801845c:	b480      	push	{r7}
 801845e:	b085      	sub	sp, #20
 8018460:	af00      	add	r7, sp, #0
 8018462:	6078      	str	r0, [r7, #4]
 8018464:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8018466:	2300      	movs	r3, #0
 8018468:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8018470:	2b01      	cmp	r3, #1
 8018472:	d101      	bne.n	8018478 <HAL_ADC_ConfigChannel+0x1c>
 8018474:	2302      	movs	r3, #2
 8018476:	e113      	b.n	80186a0 <HAL_ADC_ConfigChannel+0x244>
 8018478:	687b      	ldr	r3, [r7, #4]
 801847a:	2201      	movs	r2, #1
 801847c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8018480:	683b      	ldr	r3, [r7, #0]
 8018482:	681b      	ldr	r3, [r3, #0]
 8018484:	2b09      	cmp	r3, #9
 8018486:	d925      	bls.n	80184d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	681b      	ldr	r3, [r3, #0]
 801848c:	68d9      	ldr	r1, [r3, #12]
 801848e:	683b      	ldr	r3, [r7, #0]
 8018490:	681b      	ldr	r3, [r3, #0]
 8018492:	b29b      	uxth	r3, r3
 8018494:	461a      	mov	r2, r3
 8018496:	4613      	mov	r3, r2
 8018498:	005b      	lsls	r3, r3, #1
 801849a:	4413      	add	r3, r2
 801849c:	3b1e      	subs	r3, #30
 801849e:	2207      	movs	r2, #7
 80184a0:	fa02 f303 	lsl.w	r3, r2, r3
 80184a4:	43da      	mvns	r2, r3
 80184a6:	687b      	ldr	r3, [r7, #4]
 80184a8:	681b      	ldr	r3, [r3, #0]
 80184aa:	400a      	ands	r2, r1
 80184ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80184ae:	687b      	ldr	r3, [r7, #4]
 80184b0:	681b      	ldr	r3, [r3, #0]
 80184b2:	68d9      	ldr	r1, [r3, #12]
 80184b4:	683b      	ldr	r3, [r7, #0]
 80184b6:	689a      	ldr	r2, [r3, #8]
 80184b8:	683b      	ldr	r3, [r7, #0]
 80184ba:	681b      	ldr	r3, [r3, #0]
 80184bc:	b29b      	uxth	r3, r3
 80184be:	4618      	mov	r0, r3
 80184c0:	4603      	mov	r3, r0
 80184c2:	005b      	lsls	r3, r3, #1
 80184c4:	4403      	add	r3, r0
 80184c6:	3b1e      	subs	r3, #30
 80184c8:	409a      	lsls	r2, r3
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	681b      	ldr	r3, [r3, #0]
 80184ce:	430a      	orrs	r2, r1
 80184d0:	60da      	str	r2, [r3, #12]
 80184d2:	e022      	b.n	801851a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	681b      	ldr	r3, [r3, #0]
 80184d8:	6919      	ldr	r1, [r3, #16]
 80184da:	683b      	ldr	r3, [r7, #0]
 80184dc:	681b      	ldr	r3, [r3, #0]
 80184de:	b29b      	uxth	r3, r3
 80184e0:	461a      	mov	r2, r3
 80184e2:	4613      	mov	r3, r2
 80184e4:	005b      	lsls	r3, r3, #1
 80184e6:	4413      	add	r3, r2
 80184e8:	2207      	movs	r2, #7
 80184ea:	fa02 f303 	lsl.w	r3, r2, r3
 80184ee:	43da      	mvns	r2, r3
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	681b      	ldr	r3, [r3, #0]
 80184f4:	400a      	ands	r2, r1
 80184f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80184f8:	687b      	ldr	r3, [r7, #4]
 80184fa:	681b      	ldr	r3, [r3, #0]
 80184fc:	6919      	ldr	r1, [r3, #16]
 80184fe:	683b      	ldr	r3, [r7, #0]
 8018500:	689a      	ldr	r2, [r3, #8]
 8018502:	683b      	ldr	r3, [r7, #0]
 8018504:	681b      	ldr	r3, [r3, #0]
 8018506:	b29b      	uxth	r3, r3
 8018508:	4618      	mov	r0, r3
 801850a:	4603      	mov	r3, r0
 801850c:	005b      	lsls	r3, r3, #1
 801850e:	4403      	add	r3, r0
 8018510:	409a      	lsls	r2, r3
 8018512:	687b      	ldr	r3, [r7, #4]
 8018514:	681b      	ldr	r3, [r3, #0]
 8018516:	430a      	orrs	r2, r1
 8018518:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 801851a:	683b      	ldr	r3, [r7, #0]
 801851c:	685b      	ldr	r3, [r3, #4]
 801851e:	2b06      	cmp	r3, #6
 8018520:	d824      	bhi.n	801856c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	681b      	ldr	r3, [r3, #0]
 8018526:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8018528:	683b      	ldr	r3, [r7, #0]
 801852a:	685a      	ldr	r2, [r3, #4]
 801852c:	4613      	mov	r3, r2
 801852e:	009b      	lsls	r3, r3, #2
 8018530:	4413      	add	r3, r2
 8018532:	3b05      	subs	r3, #5
 8018534:	221f      	movs	r2, #31
 8018536:	fa02 f303 	lsl.w	r3, r2, r3
 801853a:	43da      	mvns	r2, r3
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	681b      	ldr	r3, [r3, #0]
 8018540:	400a      	ands	r2, r1
 8018542:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8018544:	687b      	ldr	r3, [r7, #4]
 8018546:	681b      	ldr	r3, [r3, #0]
 8018548:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801854a:	683b      	ldr	r3, [r7, #0]
 801854c:	681b      	ldr	r3, [r3, #0]
 801854e:	b29b      	uxth	r3, r3
 8018550:	4618      	mov	r0, r3
 8018552:	683b      	ldr	r3, [r7, #0]
 8018554:	685a      	ldr	r2, [r3, #4]
 8018556:	4613      	mov	r3, r2
 8018558:	009b      	lsls	r3, r3, #2
 801855a:	4413      	add	r3, r2
 801855c:	3b05      	subs	r3, #5
 801855e:	fa00 f203 	lsl.w	r2, r0, r3
 8018562:	687b      	ldr	r3, [r7, #4]
 8018564:	681b      	ldr	r3, [r3, #0]
 8018566:	430a      	orrs	r2, r1
 8018568:	635a      	str	r2, [r3, #52]	; 0x34
 801856a:	e04c      	b.n	8018606 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 801856c:	683b      	ldr	r3, [r7, #0]
 801856e:	685b      	ldr	r3, [r3, #4]
 8018570:	2b0c      	cmp	r3, #12
 8018572:	d824      	bhi.n	80185be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8018574:	687b      	ldr	r3, [r7, #4]
 8018576:	681b      	ldr	r3, [r3, #0]
 8018578:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801857a:	683b      	ldr	r3, [r7, #0]
 801857c:	685a      	ldr	r2, [r3, #4]
 801857e:	4613      	mov	r3, r2
 8018580:	009b      	lsls	r3, r3, #2
 8018582:	4413      	add	r3, r2
 8018584:	3b23      	subs	r3, #35	; 0x23
 8018586:	221f      	movs	r2, #31
 8018588:	fa02 f303 	lsl.w	r3, r2, r3
 801858c:	43da      	mvns	r2, r3
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	681b      	ldr	r3, [r3, #0]
 8018592:	400a      	ands	r2, r1
 8018594:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8018596:	687b      	ldr	r3, [r7, #4]
 8018598:	681b      	ldr	r3, [r3, #0]
 801859a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801859c:	683b      	ldr	r3, [r7, #0]
 801859e:	681b      	ldr	r3, [r3, #0]
 80185a0:	b29b      	uxth	r3, r3
 80185a2:	4618      	mov	r0, r3
 80185a4:	683b      	ldr	r3, [r7, #0]
 80185a6:	685a      	ldr	r2, [r3, #4]
 80185a8:	4613      	mov	r3, r2
 80185aa:	009b      	lsls	r3, r3, #2
 80185ac:	4413      	add	r3, r2
 80185ae:	3b23      	subs	r3, #35	; 0x23
 80185b0:	fa00 f203 	lsl.w	r2, r0, r3
 80185b4:	687b      	ldr	r3, [r7, #4]
 80185b6:	681b      	ldr	r3, [r3, #0]
 80185b8:	430a      	orrs	r2, r1
 80185ba:	631a      	str	r2, [r3, #48]	; 0x30
 80185bc:	e023      	b.n	8018606 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	681b      	ldr	r3, [r3, #0]
 80185c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80185c4:	683b      	ldr	r3, [r7, #0]
 80185c6:	685a      	ldr	r2, [r3, #4]
 80185c8:	4613      	mov	r3, r2
 80185ca:	009b      	lsls	r3, r3, #2
 80185cc:	4413      	add	r3, r2
 80185ce:	3b41      	subs	r3, #65	; 0x41
 80185d0:	221f      	movs	r2, #31
 80185d2:	fa02 f303 	lsl.w	r3, r2, r3
 80185d6:	43da      	mvns	r2, r3
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	681b      	ldr	r3, [r3, #0]
 80185dc:	400a      	ands	r2, r1
 80185de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	681b      	ldr	r3, [r3, #0]
 80185e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80185e6:	683b      	ldr	r3, [r7, #0]
 80185e8:	681b      	ldr	r3, [r3, #0]
 80185ea:	b29b      	uxth	r3, r3
 80185ec:	4618      	mov	r0, r3
 80185ee:	683b      	ldr	r3, [r7, #0]
 80185f0:	685a      	ldr	r2, [r3, #4]
 80185f2:	4613      	mov	r3, r2
 80185f4:	009b      	lsls	r3, r3, #2
 80185f6:	4413      	add	r3, r2
 80185f8:	3b41      	subs	r3, #65	; 0x41
 80185fa:	fa00 f203 	lsl.w	r2, r0, r3
 80185fe:	687b      	ldr	r3, [r7, #4]
 8018600:	681b      	ldr	r3, [r3, #0]
 8018602:	430a      	orrs	r2, r1
 8018604:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8018606:	4b29      	ldr	r3, [pc, #164]	; (80186ac <HAL_ADC_ConfigChannel+0x250>)
 8018608:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 801860a:	687b      	ldr	r3, [r7, #4]
 801860c:	681b      	ldr	r3, [r3, #0]
 801860e:	4a28      	ldr	r2, [pc, #160]	; (80186b0 <HAL_ADC_ConfigChannel+0x254>)
 8018610:	4293      	cmp	r3, r2
 8018612:	d10f      	bne.n	8018634 <HAL_ADC_ConfigChannel+0x1d8>
 8018614:	683b      	ldr	r3, [r7, #0]
 8018616:	681b      	ldr	r3, [r3, #0]
 8018618:	2b12      	cmp	r3, #18
 801861a:	d10b      	bne.n	8018634 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 801861c:	68fb      	ldr	r3, [r7, #12]
 801861e:	685b      	ldr	r3, [r3, #4]
 8018620:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8018624:	68fb      	ldr	r3, [r7, #12]
 8018626:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8018628:	68fb      	ldr	r3, [r7, #12]
 801862a:	685b      	ldr	r3, [r3, #4]
 801862c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8018630:	68fb      	ldr	r3, [r7, #12]
 8018632:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8018634:	687b      	ldr	r3, [r7, #4]
 8018636:	681b      	ldr	r3, [r3, #0]
 8018638:	4a1d      	ldr	r2, [pc, #116]	; (80186b0 <HAL_ADC_ConfigChannel+0x254>)
 801863a:	4293      	cmp	r3, r2
 801863c:	d12b      	bne.n	8018696 <HAL_ADC_ConfigChannel+0x23a>
 801863e:	683b      	ldr	r3, [r7, #0]
 8018640:	681b      	ldr	r3, [r3, #0]
 8018642:	4a1c      	ldr	r2, [pc, #112]	; (80186b4 <HAL_ADC_ConfigChannel+0x258>)
 8018644:	4293      	cmp	r3, r2
 8018646:	d003      	beq.n	8018650 <HAL_ADC_ConfigChannel+0x1f4>
 8018648:	683b      	ldr	r3, [r7, #0]
 801864a:	681b      	ldr	r3, [r3, #0]
 801864c:	2b11      	cmp	r3, #17
 801864e:	d122      	bne.n	8018696 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8018650:	68fb      	ldr	r3, [r7, #12]
 8018652:	685b      	ldr	r3, [r3, #4]
 8018654:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8018658:	68fb      	ldr	r3, [r7, #12]
 801865a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 801865c:	68fb      	ldr	r3, [r7, #12]
 801865e:	685b      	ldr	r3, [r3, #4]
 8018660:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8018664:	68fb      	ldr	r3, [r7, #12]
 8018666:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8018668:	683b      	ldr	r3, [r7, #0]
 801866a:	681b      	ldr	r3, [r3, #0]
 801866c:	4a11      	ldr	r2, [pc, #68]	; (80186b4 <HAL_ADC_ConfigChannel+0x258>)
 801866e:	4293      	cmp	r3, r2
 8018670:	d111      	bne.n	8018696 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8018672:	4b11      	ldr	r3, [pc, #68]	; (80186b8 <HAL_ADC_ConfigChannel+0x25c>)
 8018674:	681b      	ldr	r3, [r3, #0]
 8018676:	4a11      	ldr	r2, [pc, #68]	; (80186bc <HAL_ADC_ConfigChannel+0x260>)
 8018678:	fba2 2303 	umull	r2, r3, r2, r3
 801867c:	0c9a      	lsrs	r2, r3, #18
 801867e:	4613      	mov	r3, r2
 8018680:	009b      	lsls	r3, r3, #2
 8018682:	4413      	add	r3, r2
 8018684:	005b      	lsls	r3, r3, #1
 8018686:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8018688:	e002      	b.n	8018690 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 801868a:	68bb      	ldr	r3, [r7, #8]
 801868c:	3b01      	subs	r3, #1
 801868e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8018690:	68bb      	ldr	r3, [r7, #8]
 8018692:	2b00      	cmp	r3, #0
 8018694:	d1f9      	bne.n	801868a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	2200      	movs	r2, #0
 801869a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 801869e:	2300      	movs	r3, #0
}
 80186a0:	4618      	mov	r0, r3
 80186a2:	3714      	adds	r7, #20
 80186a4:	46bd      	mov	sp, r7
 80186a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186aa:	4770      	bx	lr
 80186ac:	40012300 	.word	0x40012300
 80186b0:	40012000 	.word	0x40012000
 80186b4:	10000012 	.word	0x10000012
 80186b8:	20000588 	.word	0x20000588
 80186bc:	431bde83 	.word	0x431bde83

080186c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80186c0:	b480      	push	{r7}
 80186c2:	b085      	sub	sp, #20
 80186c4:	af00      	add	r7, sp, #0
 80186c6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80186c8:	4b79      	ldr	r3, [pc, #484]	; (80188b0 <ADC_Init+0x1f0>)
 80186ca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80186cc:	68fb      	ldr	r3, [r7, #12]
 80186ce:	685b      	ldr	r3, [r3, #4]
 80186d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80186d4:	68fb      	ldr	r3, [r7, #12]
 80186d6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80186d8:	68fb      	ldr	r3, [r7, #12]
 80186da:	685a      	ldr	r2, [r3, #4]
 80186dc:	687b      	ldr	r3, [r7, #4]
 80186de:	685b      	ldr	r3, [r3, #4]
 80186e0:	431a      	orrs	r2, r3
 80186e2:	68fb      	ldr	r3, [r7, #12]
 80186e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80186e6:	687b      	ldr	r3, [r7, #4]
 80186e8:	681b      	ldr	r3, [r3, #0]
 80186ea:	685a      	ldr	r2, [r3, #4]
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	681b      	ldr	r3, [r3, #0]
 80186f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80186f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80186f6:	687b      	ldr	r3, [r7, #4]
 80186f8:	681b      	ldr	r3, [r3, #0]
 80186fa:	6859      	ldr	r1, [r3, #4]
 80186fc:	687b      	ldr	r3, [r7, #4]
 80186fe:	691b      	ldr	r3, [r3, #16]
 8018700:	021a      	lsls	r2, r3, #8
 8018702:	687b      	ldr	r3, [r7, #4]
 8018704:	681b      	ldr	r3, [r3, #0]
 8018706:	430a      	orrs	r2, r1
 8018708:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	681b      	ldr	r3, [r3, #0]
 801870e:	685a      	ldr	r2, [r3, #4]
 8018710:	687b      	ldr	r3, [r7, #4]
 8018712:	681b      	ldr	r3, [r3, #0]
 8018714:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8018718:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	681b      	ldr	r3, [r3, #0]
 801871e:	6859      	ldr	r1, [r3, #4]
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	689a      	ldr	r2, [r3, #8]
 8018724:	687b      	ldr	r3, [r7, #4]
 8018726:	681b      	ldr	r3, [r3, #0]
 8018728:	430a      	orrs	r2, r1
 801872a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 801872c:	687b      	ldr	r3, [r7, #4]
 801872e:	681b      	ldr	r3, [r3, #0]
 8018730:	689a      	ldr	r2, [r3, #8]
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	681b      	ldr	r3, [r3, #0]
 8018736:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801873a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 801873c:	687b      	ldr	r3, [r7, #4]
 801873e:	681b      	ldr	r3, [r3, #0]
 8018740:	6899      	ldr	r1, [r3, #8]
 8018742:	687b      	ldr	r3, [r7, #4]
 8018744:	68da      	ldr	r2, [r3, #12]
 8018746:	687b      	ldr	r3, [r7, #4]
 8018748:	681b      	ldr	r3, [r3, #0]
 801874a:	430a      	orrs	r2, r1
 801874c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 801874e:	687b      	ldr	r3, [r7, #4]
 8018750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018752:	4a58      	ldr	r2, [pc, #352]	; (80188b4 <ADC_Init+0x1f4>)
 8018754:	4293      	cmp	r3, r2
 8018756:	d022      	beq.n	801879e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	681b      	ldr	r3, [r3, #0]
 801875c:	689a      	ldr	r2, [r3, #8]
 801875e:	687b      	ldr	r3, [r7, #4]
 8018760:	681b      	ldr	r3, [r3, #0]
 8018762:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8018766:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	681b      	ldr	r3, [r3, #0]
 801876c:	6899      	ldr	r1, [r3, #8]
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8018772:	687b      	ldr	r3, [r7, #4]
 8018774:	681b      	ldr	r3, [r3, #0]
 8018776:	430a      	orrs	r2, r1
 8018778:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	681b      	ldr	r3, [r3, #0]
 801877e:	689a      	ldr	r2, [r3, #8]
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	681b      	ldr	r3, [r3, #0]
 8018784:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8018788:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	681b      	ldr	r3, [r3, #0]
 801878e:	6899      	ldr	r1, [r3, #8]
 8018790:	687b      	ldr	r3, [r7, #4]
 8018792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	681b      	ldr	r3, [r3, #0]
 8018798:	430a      	orrs	r2, r1
 801879a:	609a      	str	r2, [r3, #8]
 801879c:	e00f      	b.n	80187be <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 801879e:	687b      	ldr	r3, [r7, #4]
 80187a0:	681b      	ldr	r3, [r3, #0]
 80187a2:	689a      	ldr	r2, [r3, #8]
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	681b      	ldr	r3, [r3, #0]
 80187a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80187ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	681b      	ldr	r3, [r3, #0]
 80187b2:	689a      	ldr	r2, [r3, #8]
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	681b      	ldr	r3, [r3, #0]
 80187b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80187bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80187be:	687b      	ldr	r3, [r7, #4]
 80187c0:	681b      	ldr	r3, [r3, #0]
 80187c2:	689a      	ldr	r2, [r3, #8]
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	681b      	ldr	r3, [r3, #0]
 80187c8:	f022 0202 	bic.w	r2, r2, #2
 80187cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80187ce:	687b      	ldr	r3, [r7, #4]
 80187d0:	681b      	ldr	r3, [r3, #0]
 80187d2:	6899      	ldr	r1, [r3, #8]
 80187d4:	687b      	ldr	r3, [r7, #4]
 80187d6:	7e1b      	ldrb	r3, [r3, #24]
 80187d8:	005a      	lsls	r2, r3, #1
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	681b      	ldr	r3, [r3, #0]
 80187de:	430a      	orrs	r2, r1
 80187e0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80187e2:	687b      	ldr	r3, [r7, #4]
 80187e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80187e8:	2b00      	cmp	r3, #0
 80187ea:	d01b      	beq.n	8018824 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	681b      	ldr	r3, [r3, #0]
 80187f0:	685a      	ldr	r2, [r3, #4]
 80187f2:	687b      	ldr	r3, [r7, #4]
 80187f4:	681b      	ldr	r3, [r3, #0]
 80187f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80187fa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	681b      	ldr	r3, [r3, #0]
 8018800:	685a      	ldr	r2, [r3, #4]
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	681b      	ldr	r3, [r3, #0]
 8018806:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 801880a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	681b      	ldr	r3, [r3, #0]
 8018810:	6859      	ldr	r1, [r3, #4]
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018816:	3b01      	subs	r3, #1
 8018818:	035a      	lsls	r2, r3, #13
 801881a:	687b      	ldr	r3, [r7, #4]
 801881c:	681b      	ldr	r3, [r3, #0]
 801881e:	430a      	orrs	r2, r1
 8018820:	605a      	str	r2, [r3, #4]
 8018822:	e007      	b.n	8018834 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8018824:	687b      	ldr	r3, [r7, #4]
 8018826:	681b      	ldr	r3, [r3, #0]
 8018828:	685a      	ldr	r2, [r3, #4]
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	681b      	ldr	r3, [r3, #0]
 801882e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8018832:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	681b      	ldr	r3, [r3, #0]
 8018838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801883a:	687b      	ldr	r3, [r7, #4]
 801883c:	681b      	ldr	r3, [r3, #0]
 801883e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8018842:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	681b      	ldr	r3, [r3, #0]
 8018848:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	69db      	ldr	r3, [r3, #28]
 801884e:	3b01      	subs	r3, #1
 8018850:	051a      	lsls	r2, r3, #20
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	681b      	ldr	r3, [r3, #0]
 8018856:	430a      	orrs	r2, r1
 8018858:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	681b      	ldr	r3, [r3, #0]
 801885e:	689a      	ldr	r2, [r3, #8]
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	681b      	ldr	r3, [r3, #0]
 8018864:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8018868:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 801886a:	687b      	ldr	r3, [r7, #4]
 801886c:	681b      	ldr	r3, [r3, #0]
 801886e:	6899      	ldr	r1, [r3, #8]
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018876:	025a      	lsls	r2, r3, #9
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	681b      	ldr	r3, [r3, #0]
 801887c:	430a      	orrs	r2, r1
 801887e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	681b      	ldr	r3, [r3, #0]
 8018884:	689a      	ldr	r2, [r3, #8]
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	681b      	ldr	r3, [r3, #0]
 801888a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801888e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	681b      	ldr	r3, [r3, #0]
 8018894:	6899      	ldr	r1, [r3, #8]
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	695b      	ldr	r3, [r3, #20]
 801889a:	029a      	lsls	r2, r3, #10
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	681b      	ldr	r3, [r3, #0]
 80188a0:	430a      	orrs	r2, r1
 80188a2:	609a      	str	r2, [r3, #8]
}
 80188a4:	bf00      	nop
 80188a6:	3714      	adds	r7, #20
 80188a8:	46bd      	mov	sp, r7
 80188aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188ae:	4770      	bx	lr
 80188b0:	40012300 	.word	0x40012300
 80188b4:	0f000001 	.word	0x0f000001

080188b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80188b8:	b480      	push	{r7}
 80188ba:	b085      	sub	sp, #20
 80188bc:	af00      	add	r7, sp, #0
 80188be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	f003 0307 	and.w	r3, r3, #7
 80188c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80188c8:	4b0c      	ldr	r3, [pc, #48]	; (80188fc <__NVIC_SetPriorityGrouping+0x44>)
 80188ca:	68db      	ldr	r3, [r3, #12]
 80188cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80188ce:	68ba      	ldr	r2, [r7, #8]
 80188d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80188d4:	4013      	ands	r3, r2
 80188d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80188d8:	68fb      	ldr	r3, [r7, #12]
 80188da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80188dc:	68bb      	ldr	r3, [r7, #8]
 80188de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80188e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80188e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80188e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80188ea:	4a04      	ldr	r2, [pc, #16]	; (80188fc <__NVIC_SetPriorityGrouping+0x44>)
 80188ec:	68bb      	ldr	r3, [r7, #8]
 80188ee:	60d3      	str	r3, [r2, #12]
}
 80188f0:	bf00      	nop
 80188f2:	3714      	adds	r7, #20
 80188f4:	46bd      	mov	sp, r7
 80188f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188fa:	4770      	bx	lr
 80188fc:	e000ed00 	.word	0xe000ed00

08018900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8018900:	b480      	push	{r7}
 8018902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8018904:	4b04      	ldr	r3, [pc, #16]	; (8018918 <__NVIC_GetPriorityGrouping+0x18>)
 8018906:	68db      	ldr	r3, [r3, #12]
 8018908:	0a1b      	lsrs	r3, r3, #8
 801890a:	f003 0307 	and.w	r3, r3, #7
}
 801890e:	4618      	mov	r0, r3
 8018910:	46bd      	mov	sp, r7
 8018912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018916:	4770      	bx	lr
 8018918:	e000ed00 	.word	0xe000ed00

0801891c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801891c:	b480      	push	{r7}
 801891e:	b083      	sub	sp, #12
 8018920:	af00      	add	r7, sp, #0
 8018922:	4603      	mov	r3, r0
 8018924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8018926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801892a:	2b00      	cmp	r3, #0
 801892c:	db0b      	blt.n	8018946 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801892e:	79fb      	ldrb	r3, [r7, #7]
 8018930:	f003 021f 	and.w	r2, r3, #31
 8018934:	4907      	ldr	r1, [pc, #28]	; (8018954 <__NVIC_EnableIRQ+0x38>)
 8018936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801893a:	095b      	lsrs	r3, r3, #5
 801893c:	2001      	movs	r0, #1
 801893e:	fa00 f202 	lsl.w	r2, r0, r2
 8018942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8018946:	bf00      	nop
 8018948:	370c      	adds	r7, #12
 801894a:	46bd      	mov	sp, r7
 801894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018950:	4770      	bx	lr
 8018952:	bf00      	nop
 8018954:	e000e100 	.word	0xe000e100

08018958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8018958:	b480      	push	{r7}
 801895a:	b083      	sub	sp, #12
 801895c:	af00      	add	r7, sp, #0
 801895e:	4603      	mov	r3, r0
 8018960:	6039      	str	r1, [r7, #0]
 8018962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8018964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018968:	2b00      	cmp	r3, #0
 801896a:	db0a      	blt.n	8018982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801896c:	683b      	ldr	r3, [r7, #0]
 801896e:	b2da      	uxtb	r2, r3
 8018970:	490c      	ldr	r1, [pc, #48]	; (80189a4 <__NVIC_SetPriority+0x4c>)
 8018972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018976:	0112      	lsls	r2, r2, #4
 8018978:	b2d2      	uxtb	r2, r2
 801897a:	440b      	add	r3, r1
 801897c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8018980:	e00a      	b.n	8018998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018982:	683b      	ldr	r3, [r7, #0]
 8018984:	b2da      	uxtb	r2, r3
 8018986:	4908      	ldr	r1, [pc, #32]	; (80189a8 <__NVIC_SetPriority+0x50>)
 8018988:	79fb      	ldrb	r3, [r7, #7]
 801898a:	f003 030f 	and.w	r3, r3, #15
 801898e:	3b04      	subs	r3, #4
 8018990:	0112      	lsls	r2, r2, #4
 8018992:	b2d2      	uxtb	r2, r2
 8018994:	440b      	add	r3, r1
 8018996:	761a      	strb	r2, [r3, #24]
}
 8018998:	bf00      	nop
 801899a:	370c      	adds	r7, #12
 801899c:	46bd      	mov	sp, r7
 801899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189a2:	4770      	bx	lr
 80189a4:	e000e100 	.word	0xe000e100
 80189a8:	e000ed00 	.word	0xe000ed00

080189ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80189ac:	b480      	push	{r7}
 80189ae:	b089      	sub	sp, #36	; 0x24
 80189b0:	af00      	add	r7, sp, #0
 80189b2:	60f8      	str	r0, [r7, #12]
 80189b4:	60b9      	str	r1, [r7, #8]
 80189b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80189b8:	68fb      	ldr	r3, [r7, #12]
 80189ba:	f003 0307 	and.w	r3, r3, #7
 80189be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80189c0:	69fb      	ldr	r3, [r7, #28]
 80189c2:	f1c3 0307 	rsb	r3, r3, #7
 80189c6:	2b04      	cmp	r3, #4
 80189c8:	bf28      	it	cs
 80189ca:	2304      	movcs	r3, #4
 80189cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80189ce:	69fb      	ldr	r3, [r7, #28]
 80189d0:	3304      	adds	r3, #4
 80189d2:	2b06      	cmp	r3, #6
 80189d4:	d902      	bls.n	80189dc <NVIC_EncodePriority+0x30>
 80189d6:	69fb      	ldr	r3, [r7, #28]
 80189d8:	3b03      	subs	r3, #3
 80189da:	e000      	b.n	80189de <NVIC_EncodePriority+0x32>
 80189dc:	2300      	movs	r3, #0
 80189de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80189e0:	f04f 32ff 	mov.w	r2, #4294967295
 80189e4:	69bb      	ldr	r3, [r7, #24]
 80189e6:	fa02 f303 	lsl.w	r3, r2, r3
 80189ea:	43da      	mvns	r2, r3
 80189ec:	68bb      	ldr	r3, [r7, #8]
 80189ee:	401a      	ands	r2, r3
 80189f0:	697b      	ldr	r3, [r7, #20]
 80189f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80189f4:	f04f 31ff 	mov.w	r1, #4294967295
 80189f8:	697b      	ldr	r3, [r7, #20]
 80189fa:	fa01 f303 	lsl.w	r3, r1, r3
 80189fe:	43d9      	mvns	r1, r3
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8018a04:	4313      	orrs	r3, r2
         );
}
 8018a06:	4618      	mov	r0, r3
 8018a08:	3724      	adds	r7, #36	; 0x24
 8018a0a:	46bd      	mov	sp, r7
 8018a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a10:	4770      	bx	lr
	...

08018a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8018a14:	b580      	push	{r7, lr}
 8018a16:	b082      	sub	sp, #8
 8018a18:	af00      	add	r7, sp, #0
 8018a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8018a1c:	687b      	ldr	r3, [r7, #4]
 8018a1e:	3b01      	subs	r3, #1
 8018a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8018a24:	d301      	bcc.n	8018a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8018a26:	2301      	movs	r3, #1
 8018a28:	e00f      	b.n	8018a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8018a2a:	4a0a      	ldr	r2, [pc, #40]	; (8018a54 <SysTick_Config+0x40>)
 8018a2c:	687b      	ldr	r3, [r7, #4]
 8018a2e:	3b01      	subs	r3, #1
 8018a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8018a32:	210f      	movs	r1, #15
 8018a34:	f04f 30ff 	mov.w	r0, #4294967295
 8018a38:	f7ff ff8e 	bl	8018958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8018a3c:	4b05      	ldr	r3, [pc, #20]	; (8018a54 <SysTick_Config+0x40>)
 8018a3e:	2200      	movs	r2, #0
 8018a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8018a42:	4b04      	ldr	r3, [pc, #16]	; (8018a54 <SysTick_Config+0x40>)
 8018a44:	2207      	movs	r2, #7
 8018a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8018a48:	2300      	movs	r3, #0
}
 8018a4a:	4618      	mov	r0, r3
 8018a4c:	3708      	adds	r7, #8
 8018a4e:	46bd      	mov	sp, r7
 8018a50:	bd80      	pop	{r7, pc}
 8018a52:	bf00      	nop
 8018a54:	e000e010 	.word	0xe000e010

08018a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8018a58:	b580      	push	{r7, lr}
 8018a5a:	b082      	sub	sp, #8
 8018a5c:	af00      	add	r7, sp, #0
 8018a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8018a60:	6878      	ldr	r0, [r7, #4]
 8018a62:	f7ff ff29 	bl	80188b8 <__NVIC_SetPriorityGrouping>
}
 8018a66:	bf00      	nop
 8018a68:	3708      	adds	r7, #8
 8018a6a:	46bd      	mov	sp, r7
 8018a6c:	bd80      	pop	{r7, pc}

08018a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8018a6e:	b580      	push	{r7, lr}
 8018a70:	b086      	sub	sp, #24
 8018a72:	af00      	add	r7, sp, #0
 8018a74:	4603      	mov	r3, r0
 8018a76:	60b9      	str	r1, [r7, #8]
 8018a78:	607a      	str	r2, [r7, #4]
 8018a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8018a7c:	2300      	movs	r3, #0
 8018a7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8018a80:	f7ff ff3e 	bl	8018900 <__NVIC_GetPriorityGrouping>
 8018a84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8018a86:	687a      	ldr	r2, [r7, #4]
 8018a88:	68b9      	ldr	r1, [r7, #8]
 8018a8a:	6978      	ldr	r0, [r7, #20]
 8018a8c:	f7ff ff8e 	bl	80189ac <NVIC_EncodePriority>
 8018a90:	4602      	mov	r2, r0
 8018a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018a96:	4611      	mov	r1, r2
 8018a98:	4618      	mov	r0, r3
 8018a9a:	f7ff ff5d 	bl	8018958 <__NVIC_SetPriority>
}
 8018a9e:	bf00      	nop
 8018aa0:	3718      	adds	r7, #24
 8018aa2:	46bd      	mov	sp, r7
 8018aa4:	bd80      	pop	{r7, pc}

08018aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8018aa6:	b580      	push	{r7, lr}
 8018aa8:	b082      	sub	sp, #8
 8018aaa:	af00      	add	r7, sp, #0
 8018aac:	4603      	mov	r3, r0
 8018aae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8018ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018ab4:	4618      	mov	r0, r3
 8018ab6:	f7ff ff31 	bl	801891c <__NVIC_EnableIRQ>
}
 8018aba:	bf00      	nop
 8018abc:	3708      	adds	r7, #8
 8018abe:	46bd      	mov	sp, r7
 8018ac0:	bd80      	pop	{r7, pc}

08018ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8018ac2:	b580      	push	{r7, lr}
 8018ac4:	b082      	sub	sp, #8
 8018ac6:	af00      	add	r7, sp, #0
 8018ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8018aca:	6878      	ldr	r0, [r7, #4]
 8018acc:	f7ff ffa2 	bl	8018a14 <SysTick_Config>
 8018ad0:	4603      	mov	r3, r0
}
 8018ad2:	4618      	mov	r0, r3
 8018ad4:	3708      	adds	r7, #8
 8018ad6:	46bd      	mov	sp, r7
 8018ad8:	bd80      	pop	{r7, pc}

08018ada <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8018ada:	b580      	push	{r7, lr}
 8018adc:	b082      	sub	sp, #8
 8018ade:	af00      	add	r7, sp, #0
 8018ae0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8018ae2:	687b      	ldr	r3, [r7, #4]
 8018ae4:	2b00      	cmp	r3, #0
 8018ae6:	d101      	bne.n	8018aec <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8018ae8:	2301      	movs	r3, #1
 8018aea:	e014      	b.n	8018b16 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	791b      	ldrb	r3, [r3, #4]
 8018af0:	b2db      	uxtb	r3, r3
 8018af2:	2b00      	cmp	r3, #0
 8018af4:	d105      	bne.n	8018b02 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8018af6:	687b      	ldr	r3, [r7, #4]
 8018af8:	2200      	movs	r2, #0
 8018afa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8018afc:	6878      	ldr	r0, [r7, #4]
 8018afe:	f7ff f947 	bl	8017d90 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8018b02:	687b      	ldr	r3, [r7, #4]
 8018b04:	2202      	movs	r2, #2
 8018b06:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8018b08:	687b      	ldr	r3, [r7, #4]
 8018b0a:	2200      	movs	r2, #0
 8018b0c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	2201      	movs	r2, #1
 8018b12:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8018b14:	2300      	movs	r3, #0
}
 8018b16:	4618      	mov	r0, r3
 8018b18:	3708      	adds	r7, #8
 8018b1a:	46bd      	mov	sp, r7
 8018b1c:	bd80      	pop	{r7, pc}

08018b1e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8018b1e:	b480      	push	{r7}
 8018b20:	b087      	sub	sp, #28
 8018b22:	af00      	add	r7, sp, #0
 8018b24:	60f8      	str	r0, [r7, #12]
 8018b26:	60b9      	str	r1, [r7, #8]
 8018b28:	607a      	str	r2, [r7, #4]
 8018b2a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8018b2c:	2300      	movs	r3, #0
 8018b2e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8018b30:	68fb      	ldr	r3, [r7, #12]
 8018b32:	681b      	ldr	r3, [r3, #0]
 8018b34:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8018b36:	68bb      	ldr	r3, [r7, #8]
 8018b38:	2b00      	cmp	r3, #0
 8018b3a:	d105      	bne.n	8018b48 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8018b3c:	697a      	ldr	r2, [r7, #20]
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	4413      	add	r3, r2
 8018b42:	3308      	adds	r3, #8
 8018b44:	617b      	str	r3, [r7, #20]
 8018b46:	e004      	b.n	8018b52 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8018b48:	697a      	ldr	r2, [r7, #20]
 8018b4a:	687b      	ldr	r3, [r7, #4]
 8018b4c:	4413      	add	r3, r2
 8018b4e:	3314      	adds	r3, #20
 8018b50:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8018b52:	697b      	ldr	r3, [r7, #20]
 8018b54:	461a      	mov	r2, r3
 8018b56:	683b      	ldr	r3, [r7, #0]
 8018b58:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8018b5a:	2300      	movs	r3, #0
}
 8018b5c:	4618      	mov	r0, r3
 8018b5e:	371c      	adds	r7, #28
 8018b60:	46bd      	mov	sp, r7
 8018b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b66:	4770      	bx	lr

08018b68 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8018b68:	b480      	push	{r7}
 8018b6a:	b087      	sub	sp, #28
 8018b6c:	af00      	add	r7, sp, #0
 8018b6e:	60f8      	str	r0, [r7, #12]
 8018b70:	60b9      	str	r1, [r7, #8]
 8018b72:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8018b74:	68fb      	ldr	r3, [r7, #12]
 8018b76:	795b      	ldrb	r3, [r3, #5]
 8018b78:	2b01      	cmp	r3, #1
 8018b7a:	d101      	bne.n	8018b80 <HAL_DAC_ConfigChannel+0x18>
 8018b7c:	2302      	movs	r3, #2
 8018b7e:	e03c      	b.n	8018bfa <HAL_DAC_ConfigChannel+0x92>
 8018b80:	68fb      	ldr	r3, [r7, #12]
 8018b82:	2201      	movs	r2, #1
 8018b84:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8018b86:	68fb      	ldr	r3, [r7, #12]
 8018b88:	2202      	movs	r2, #2
 8018b8a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8018b8c:	68fb      	ldr	r3, [r7, #12]
 8018b8e:	681b      	ldr	r3, [r3, #0]
 8018b90:	681b      	ldr	r3, [r3, #0]
 8018b92:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	f003 0310 	and.w	r3, r3, #16
 8018b9a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8018b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8018ba2:	43db      	mvns	r3, r3
 8018ba4:	697a      	ldr	r2, [r7, #20]
 8018ba6:	4013      	ands	r3, r2
 8018ba8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8018baa:	68bb      	ldr	r3, [r7, #8]
 8018bac:	681a      	ldr	r2, [r3, #0]
 8018bae:	68bb      	ldr	r3, [r7, #8]
 8018bb0:	685b      	ldr	r3, [r3, #4]
 8018bb2:	4313      	orrs	r3, r2
 8018bb4:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8018bb6:	687b      	ldr	r3, [r7, #4]
 8018bb8:	f003 0310 	and.w	r3, r3, #16
 8018bbc:	693a      	ldr	r2, [r7, #16]
 8018bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8018bc2:	697a      	ldr	r2, [r7, #20]
 8018bc4:	4313      	orrs	r3, r2
 8018bc6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8018bc8:	68fb      	ldr	r3, [r7, #12]
 8018bca:	681b      	ldr	r3, [r3, #0]
 8018bcc:	697a      	ldr	r2, [r7, #20]
 8018bce:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8018bd0:	68fb      	ldr	r3, [r7, #12]
 8018bd2:	681b      	ldr	r3, [r3, #0]
 8018bd4:	6819      	ldr	r1, [r3, #0]
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	f003 0310 	and.w	r3, r3, #16
 8018bdc:	22c0      	movs	r2, #192	; 0xc0
 8018bde:	fa02 f303 	lsl.w	r3, r2, r3
 8018be2:	43da      	mvns	r2, r3
 8018be4:	68fb      	ldr	r3, [r7, #12]
 8018be6:	681b      	ldr	r3, [r3, #0]
 8018be8:	400a      	ands	r2, r1
 8018bea:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8018bec:	68fb      	ldr	r3, [r7, #12]
 8018bee:	2201      	movs	r2, #1
 8018bf0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8018bf2:	68fb      	ldr	r3, [r7, #12]
 8018bf4:	2200      	movs	r2, #0
 8018bf6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8018bf8:	2300      	movs	r3, #0
}
 8018bfa:	4618      	mov	r0, r3
 8018bfc:	371c      	adds	r7, #28
 8018bfe:	46bd      	mov	sp, r7
 8018c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c04:	4770      	bx	lr
	...

08018c08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8018c08:	b580      	push	{r7, lr}
 8018c0a:	b086      	sub	sp, #24
 8018c0c:	af00      	add	r7, sp, #0
 8018c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8018c10:	2300      	movs	r3, #0
 8018c12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8018c14:	f7ff fbae 	bl	8018374 <HAL_GetTick>
 8018c18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	2b00      	cmp	r3, #0
 8018c1e:	d101      	bne.n	8018c24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8018c20:	2301      	movs	r3, #1
 8018c22:	e099      	b.n	8018d58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	2202      	movs	r2, #2
 8018c28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	2200      	movs	r2, #0
 8018c30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	681b      	ldr	r3, [r3, #0]
 8018c38:	681a      	ldr	r2, [r3, #0]
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	681b      	ldr	r3, [r3, #0]
 8018c3e:	f022 0201 	bic.w	r2, r2, #1
 8018c42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8018c44:	e00f      	b.n	8018c66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8018c46:	f7ff fb95 	bl	8018374 <HAL_GetTick>
 8018c4a:	4602      	mov	r2, r0
 8018c4c:	693b      	ldr	r3, [r7, #16]
 8018c4e:	1ad3      	subs	r3, r2, r3
 8018c50:	2b05      	cmp	r3, #5
 8018c52:	d908      	bls.n	8018c66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	2220      	movs	r2, #32
 8018c58:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	2203      	movs	r2, #3
 8018c5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8018c62:	2303      	movs	r3, #3
 8018c64:	e078      	b.n	8018d58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8018c66:	687b      	ldr	r3, [r7, #4]
 8018c68:	681b      	ldr	r3, [r3, #0]
 8018c6a:	681b      	ldr	r3, [r3, #0]
 8018c6c:	f003 0301 	and.w	r3, r3, #1
 8018c70:	2b00      	cmp	r3, #0
 8018c72:	d1e8      	bne.n	8018c46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8018c74:	687b      	ldr	r3, [r7, #4]
 8018c76:	681b      	ldr	r3, [r3, #0]
 8018c78:	681b      	ldr	r3, [r3, #0]
 8018c7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8018c7c:	697a      	ldr	r2, [r7, #20]
 8018c7e:	4b38      	ldr	r3, [pc, #224]	; (8018d60 <HAL_DMA_Init+0x158>)
 8018c80:	4013      	ands	r3, r2
 8018c82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	685a      	ldr	r2, [r3, #4]
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	689b      	ldr	r3, [r3, #8]
 8018c8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8018c92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	691b      	ldr	r3, [r3, #16]
 8018c98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8018c9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	699b      	ldr	r3, [r3, #24]
 8018ca4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8018ca6:	687b      	ldr	r3, [r7, #4]
 8018ca8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8018caa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	6a1b      	ldr	r3, [r3, #32]
 8018cb0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8018cb2:	697a      	ldr	r2, [r7, #20]
 8018cb4:	4313      	orrs	r3, r2
 8018cb6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cbc:	2b04      	cmp	r3, #4
 8018cbe:	d107      	bne.n	8018cd0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018cc8:	4313      	orrs	r3, r2
 8018cca:	697a      	ldr	r2, [r7, #20]
 8018ccc:	4313      	orrs	r3, r2
 8018cce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	681b      	ldr	r3, [r3, #0]
 8018cd4:	697a      	ldr	r2, [r7, #20]
 8018cd6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	681b      	ldr	r3, [r3, #0]
 8018cdc:	695b      	ldr	r3, [r3, #20]
 8018cde:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8018ce0:	697b      	ldr	r3, [r7, #20]
 8018ce2:	f023 0307 	bic.w	r3, r3, #7
 8018ce6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8018ce8:	687b      	ldr	r3, [r7, #4]
 8018cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cec:	697a      	ldr	r2, [r7, #20]
 8018cee:	4313      	orrs	r3, r2
 8018cf0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cf6:	2b04      	cmp	r3, #4
 8018cf8:	d117      	bne.n	8018d2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8018cfa:	687b      	ldr	r3, [r7, #4]
 8018cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018cfe:	697a      	ldr	r2, [r7, #20]
 8018d00:	4313      	orrs	r3, r2
 8018d02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d08:	2b00      	cmp	r3, #0
 8018d0a:	d00e      	beq.n	8018d2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8018d0c:	6878      	ldr	r0, [r7, #4]
 8018d0e:	f000 fa0b 	bl	8019128 <DMA_CheckFifoParam>
 8018d12:	4603      	mov	r3, r0
 8018d14:	2b00      	cmp	r3, #0
 8018d16:	d008      	beq.n	8018d2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	2240      	movs	r2, #64	; 0x40
 8018d1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8018d1e:	687b      	ldr	r3, [r7, #4]
 8018d20:	2201      	movs	r2, #1
 8018d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8018d26:	2301      	movs	r3, #1
 8018d28:	e016      	b.n	8018d58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	681b      	ldr	r3, [r3, #0]
 8018d2e:	697a      	ldr	r2, [r7, #20]
 8018d30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8018d32:	6878      	ldr	r0, [r7, #4]
 8018d34:	f000 f9c2 	bl	80190bc <DMA_CalcBaseAndBitshift>
 8018d38:	4603      	mov	r3, r0
 8018d3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018d40:	223f      	movs	r2, #63	; 0x3f
 8018d42:	409a      	lsls	r2, r3
 8018d44:	68fb      	ldr	r3, [r7, #12]
 8018d46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	2200      	movs	r2, #0
 8018d4c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	2201      	movs	r2, #1
 8018d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8018d56:	2300      	movs	r3, #0
}
 8018d58:	4618      	mov	r0, r3
 8018d5a:	3718      	adds	r7, #24
 8018d5c:	46bd      	mov	sp, r7
 8018d5e:	bd80      	pop	{r7, pc}
 8018d60:	f010803f 	.word	0xf010803f

08018d64 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8018d64:	b480      	push	{r7}
 8018d66:	b083      	sub	sp, #12
 8018d68:	af00      	add	r7, sp, #0
 8018d6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8018d6c:	687b      	ldr	r3, [r7, #4]
 8018d6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8018d72:	b2db      	uxtb	r3, r3
 8018d74:	2b02      	cmp	r3, #2
 8018d76:	d004      	beq.n	8018d82 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	2280      	movs	r2, #128	; 0x80
 8018d7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8018d7e:	2301      	movs	r3, #1
 8018d80:	e00c      	b.n	8018d9c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	2205      	movs	r2, #5
 8018d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	681b      	ldr	r3, [r3, #0]
 8018d8e:	681a      	ldr	r2, [r3, #0]
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	681b      	ldr	r3, [r3, #0]
 8018d94:	f022 0201 	bic.w	r2, r2, #1
 8018d98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8018d9a:	2300      	movs	r3, #0
}
 8018d9c:	4618      	mov	r0, r3
 8018d9e:	370c      	adds	r7, #12
 8018da0:	46bd      	mov	sp, r7
 8018da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018da6:	4770      	bx	lr

08018da8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8018da8:	b580      	push	{r7, lr}
 8018daa:	b086      	sub	sp, #24
 8018dac:	af00      	add	r7, sp, #0
 8018dae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8018db0:	2300      	movs	r3, #0
 8018db2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8018db4:	4b92      	ldr	r3, [pc, #584]	; (8019000 <HAL_DMA_IRQHandler+0x258>)
 8018db6:	681b      	ldr	r3, [r3, #0]
 8018db8:	4a92      	ldr	r2, [pc, #584]	; (8019004 <HAL_DMA_IRQHandler+0x25c>)
 8018dba:	fba2 2303 	umull	r2, r3, r2, r3
 8018dbe:	0a9b      	lsrs	r3, r3, #10
 8018dc0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8018dc2:	687b      	ldr	r3, [r7, #4]
 8018dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018dc6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8018dc8:	693b      	ldr	r3, [r7, #16]
 8018dca:	681b      	ldr	r3, [r3, #0]
 8018dcc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8018dce:	687b      	ldr	r3, [r7, #4]
 8018dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018dd2:	2208      	movs	r2, #8
 8018dd4:	409a      	lsls	r2, r3
 8018dd6:	68fb      	ldr	r3, [r7, #12]
 8018dd8:	4013      	ands	r3, r2
 8018dda:	2b00      	cmp	r3, #0
 8018ddc:	d01a      	beq.n	8018e14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8018dde:	687b      	ldr	r3, [r7, #4]
 8018de0:	681b      	ldr	r3, [r3, #0]
 8018de2:	681b      	ldr	r3, [r3, #0]
 8018de4:	f003 0304 	and.w	r3, r3, #4
 8018de8:	2b00      	cmp	r3, #0
 8018dea:	d013      	beq.n	8018e14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	681b      	ldr	r3, [r3, #0]
 8018df0:	681a      	ldr	r2, [r3, #0]
 8018df2:	687b      	ldr	r3, [r7, #4]
 8018df4:	681b      	ldr	r3, [r3, #0]
 8018df6:	f022 0204 	bic.w	r2, r2, #4
 8018dfa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018e00:	2208      	movs	r2, #8
 8018e02:	409a      	lsls	r2, r3
 8018e04:	693b      	ldr	r3, [r7, #16]
 8018e06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018e0c:	f043 0201 	orr.w	r2, r3, #1
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018e18:	2201      	movs	r2, #1
 8018e1a:	409a      	lsls	r2, r3
 8018e1c:	68fb      	ldr	r3, [r7, #12]
 8018e1e:	4013      	ands	r3, r2
 8018e20:	2b00      	cmp	r3, #0
 8018e22:	d012      	beq.n	8018e4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	681b      	ldr	r3, [r3, #0]
 8018e28:	695b      	ldr	r3, [r3, #20]
 8018e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018e2e:	2b00      	cmp	r3, #0
 8018e30:	d00b      	beq.n	8018e4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8018e32:	687b      	ldr	r3, [r7, #4]
 8018e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018e36:	2201      	movs	r2, #1
 8018e38:	409a      	lsls	r2, r3
 8018e3a:	693b      	ldr	r3, [r7, #16]
 8018e3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8018e3e:	687b      	ldr	r3, [r7, #4]
 8018e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018e42:	f043 0202 	orr.w	r2, r3, #2
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8018e4a:	687b      	ldr	r3, [r7, #4]
 8018e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018e4e:	2204      	movs	r2, #4
 8018e50:	409a      	lsls	r2, r3
 8018e52:	68fb      	ldr	r3, [r7, #12]
 8018e54:	4013      	ands	r3, r2
 8018e56:	2b00      	cmp	r3, #0
 8018e58:	d012      	beq.n	8018e80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	681b      	ldr	r3, [r3, #0]
 8018e5e:	681b      	ldr	r3, [r3, #0]
 8018e60:	f003 0302 	and.w	r3, r3, #2
 8018e64:	2b00      	cmp	r3, #0
 8018e66:	d00b      	beq.n	8018e80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8018e68:	687b      	ldr	r3, [r7, #4]
 8018e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018e6c:	2204      	movs	r2, #4
 8018e6e:	409a      	lsls	r2, r3
 8018e70:	693b      	ldr	r3, [r7, #16]
 8018e72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8018e74:	687b      	ldr	r3, [r7, #4]
 8018e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018e78:	f043 0204 	orr.w	r2, r3, #4
 8018e7c:	687b      	ldr	r3, [r7, #4]
 8018e7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018e84:	2210      	movs	r2, #16
 8018e86:	409a      	lsls	r2, r3
 8018e88:	68fb      	ldr	r3, [r7, #12]
 8018e8a:	4013      	ands	r3, r2
 8018e8c:	2b00      	cmp	r3, #0
 8018e8e:	d043      	beq.n	8018f18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	681b      	ldr	r3, [r3, #0]
 8018e94:	681b      	ldr	r3, [r3, #0]
 8018e96:	f003 0308 	and.w	r3, r3, #8
 8018e9a:	2b00      	cmp	r3, #0
 8018e9c:	d03c      	beq.n	8018f18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018ea2:	2210      	movs	r2, #16
 8018ea4:	409a      	lsls	r2, r3
 8018ea6:	693b      	ldr	r3, [r7, #16]
 8018ea8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	681b      	ldr	r3, [r3, #0]
 8018eae:	681b      	ldr	r3, [r3, #0]
 8018eb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8018eb4:	2b00      	cmp	r3, #0
 8018eb6:	d018      	beq.n	8018eea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	681b      	ldr	r3, [r3, #0]
 8018ebc:	681b      	ldr	r3, [r3, #0]
 8018ebe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8018ec2:	2b00      	cmp	r3, #0
 8018ec4:	d108      	bne.n	8018ed8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8018ec6:	687b      	ldr	r3, [r7, #4]
 8018ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018eca:	2b00      	cmp	r3, #0
 8018ecc:	d024      	beq.n	8018f18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018ed2:	6878      	ldr	r0, [r7, #4]
 8018ed4:	4798      	blx	r3
 8018ed6:	e01f      	b.n	8018f18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	d01b      	beq.n	8018f18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8018ee0:	687b      	ldr	r3, [r7, #4]
 8018ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018ee4:	6878      	ldr	r0, [r7, #4]
 8018ee6:	4798      	blx	r3
 8018ee8:	e016      	b.n	8018f18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8018eea:	687b      	ldr	r3, [r7, #4]
 8018eec:	681b      	ldr	r3, [r3, #0]
 8018eee:	681b      	ldr	r3, [r3, #0]
 8018ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018ef4:	2b00      	cmp	r3, #0
 8018ef6:	d107      	bne.n	8018f08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	681b      	ldr	r3, [r3, #0]
 8018efc:	681a      	ldr	r2, [r3, #0]
 8018efe:	687b      	ldr	r3, [r7, #4]
 8018f00:	681b      	ldr	r3, [r3, #0]
 8018f02:	f022 0208 	bic.w	r2, r2, #8
 8018f06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f0c:	2b00      	cmp	r3, #0
 8018f0e:	d003      	beq.n	8018f18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8018f10:	687b      	ldr	r3, [r7, #4]
 8018f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f14:	6878      	ldr	r0, [r7, #4]
 8018f16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8018f18:	687b      	ldr	r3, [r7, #4]
 8018f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018f1c:	2220      	movs	r2, #32
 8018f1e:	409a      	lsls	r2, r3
 8018f20:	68fb      	ldr	r3, [r7, #12]
 8018f22:	4013      	ands	r3, r2
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	f000 808e 	beq.w	8019046 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	681b      	ldr	r3, [r3, #0]
 8018f2e:	681b      	ldr	r3, [r3, #0]
 8018f30:	f003 0310 	and.w	r3, r3, #16
 8018f34:	2b00      	cmp	r3, #0
 8018f36:	f000 8086 	beq.w	8019046 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018f3e:	2220      	movs	r2, #32
 8018f40:	409a      	lsls	r2, r3
 8018f42:	693b      	ldr	r3, [r7, #16]
 8018f44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8018f46:	687b      	ldr	r3, [r7, #4]
 8018f48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8018f4c:	b2db      	uxtb	r3, r3
 8018f4e:	2b05      	cmp	r3, #5
 8018f50:	d136      	bne.n	8018fc0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8018f52:	687b      	ldr	r3, [r7, #4]
 8018f54:	681b      	ldr	r3, [r3, #0]
 8018f56:	681a      	ldr	r2, [r3, #0]
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	681b      	ldr	r3, [r3, #0]
 8018f5c:	f022 0216 	bic.w	r2, r2, #22
 8018f60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8018f62:	687b      	ldr	r3, [r7, #4]
 8018f64:	681b      	ldr	r3, [r3, #0]
 8018f66:	695a      	ldr	r2, [r3, #20]
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	681b      	ldr	r3, [r3, #0]
 8018f6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8018f70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8018f72:	687b      	ldr	r3, [r7, #4]
 8018f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f76:	2b00      	cmp	r3, #0
 8018f78:	d103      	bne.n	8018f82 <HAL_DMA_IRQHandler+0x1da>
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018f7e:	2b00      	cmp	r3, #0
 8018f80:	d007      	beq.n	8018f92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8018f82:	687b      	ldr	r3, [r7, #4]
 8018f84:	681b      	ldr	r3, [r3, #0]
 8018f86:	681a      	ldr	r2, [r3, #0]
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	681b      	ldr	r3, [r3, #0]
 8018f8c:	f022 0208 	bic.w	r2, r2, #8
 8018f90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018f96:	223f      	movs	r2, #63	; 0x3f
 8018f98:	409a      	lsls	r2, r3
 8018f9a:	693b      	ldr	r3, [r7, #16]
 8018f9c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8018f9e:	687b      	ldr	r3, [r7, #4]
 8018fa0:	2201      	movs	r2, #1
 8018fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8018fa6:	687b      	ldr	r3, [r7, #4]
 8018fa8:	2200      	movs	r2, #0
 8018faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8018fae:	687b      	ldr	r3, [r7, #4]
 8018fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	d07d      	beq.n	80190b2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8018fb6:	687b      	ldr	r3, [r7, #4]
 8018fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018fba:	6878      	ldr	r0, [r7, #4]
 8018fbc:	4798      	blx	r3
        }
        return;
 8018fbe:	e078      	b.n	80190b2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	681b      	ldr	r3, [r3, #0]
 8018fc4:	681b      	ldr	r3, [r3, #0]
 8018fc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8018fca:	2b00      	cmp	r3, #0
 8018fcc:	d01c      	beq.n	8019008 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8018fce:	687b      	ldr	r3, [r7, #4]
 8018fd0:	681b      	ldr	r3, [r3, #0]
 8018fd2:	681b      	ldr	r3, [r3, #0]
 8018fd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8018fd8:	2b00      	cmp	r3, #0
 8018fda:	d108      	bne.n	8018fee <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018fe0:	2b00      	cmp	r3, #0
 8018fe2:	d030      	beq.n	8019046 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8018fe4:	687b      	ldr	r3, [r7, #4]
 8018fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018fe8:	6878      	ldr	r0, [r7, #4]
 8018fea:	4798      	blx	r3
 8018fec:	e02b      	b.n	8019046 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018ff2:	2b00      	cmp	r3, #0
 8018ff4:	d027      	beq.n	8019046 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8018ff6:	687b      	ldr	r3, [r7, #4]
 8018ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018ffa:	6878      	ldr	r0, [r7, #4]
 8018ffc:	4798      	blx	r3
 8018ffe:	e022      	b.n	8019046 <HAL_DMA_IRQHandler+0x29e>
 8019000:	20000588 	.word	0x20000588
 8019004:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	681b      	ldr	r3, [r3, #0]
 801900c:	681b      	ldr	r3, [r3, #0]
 801900e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019012:	2b00      	cmp	r3, #0
 8019014:	d10f      	bne.n	8019036 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8019016:	687b      	ldr	r3, [r7, #4]
 8019018:	681b      	ldr	r3, [r3, #0]
 801901a:	681a      	ldr	r2, [r3, #0]
 801901c:	687b      	ldr	r3, [r7, #4]
 801901e:	681b      	ldr	r3, [r3, #0]
 8019020:	f022 0210 	bic.w	r2, r2, #16
 8019024:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8019026:	687b      	ldr	r3, [r7, #4]
 8019028:	2201      	movs	r2, #1
 801902a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801902e:	687b      	ldr	r3, [r7, #4]
 8019030:	2200      	movs	r2, #0
 8019032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8019036:	687b      	ldr	r3, [r7, #4]
 8019038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801903a:	2b00      	cmp	r3, #0
 801903c:	d003      	beq.n	8019046 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801903e:	687b      	ldr	r3, [r7, #4]
 8019040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019042:	6878      	ldr	r0, [r7, #4]
 8019044:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801904a:	2b00      	cmp	r3, #0
 801904c:	d032      	beq.n	80190b4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 801904e:	687b      	ldr	r3, [r7, #4]
 8019050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019052:	f003 0301 	and.w	r3, r3, #1
 8019056:	2b00      	cmp	r3, #0
 8019058:	d022      	beq.n	80190a0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 801905a:	687b      	ldr	r3, [r7, #4]
 801905c:	2205      	movs	r2, #5
 801905e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8019062:	687b      	ldr	r3, [r7, #4]
 8019064:	681b      	ldr	r3, [r3, #0]
 8019066:	681a      	ldr	r2, [r3, #0]
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	681b      	ldr	r3, [r3, #0]
 801906c:	f022 0201 	bic.w	r2, r2, #1
 8019070:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8019072:	68bb      	ldr	r3, [r7, #8]
 8019074:	3301      	adds	r3, #1
 8019076:	60bb      	str	r3, [r7, #8]
 8019078:	697a      	ldr	r2, [r7, #20]
 801907a:	429a      	cmp	r2, r3
 801907c:	d307      	bcc.n	801908e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 801907e:	687b      	ldr	r3, [r7, #4]
 8019080:	681b      	ldr	r3, [r3, #0]
 8019082:	681b      	ldr	r3, [r3, #0]
 8019084:	f003 0301 	and.w	r3, r3, #1
 8019088:	2b00      	cmp	r3, #0
 801908a:	d1f2      	bne.n	8019072 <HAL_DMA_IRQHandler+0x2ca>
 801908c:	e000      	b.n	8019090 <HAL_DMA_IRQHandler+0x2e8>
          break;
 801908e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	2201      	movs	r2, #1
 8019094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	2200      	movs	r2, #0
 801909c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80190a0:	687b      	ldr	r3, [r7, #4]
 80190a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80190a4:	2b00      	cmp	r3, #0
 80190a6:	d005      	beq.n	80190b4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80190a8:	687b      	ldr	r3, [r7, #4]
 80190aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80190ac:	6878      	ldr	r0, [r7, #4]
 80190ae:	4798      	blx	r3
 80190b0:	e000      	b.n	80190b4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80190b2:	bf00      	nop
    }
  }
}
 80190b4:	3718      	adds	r7, #24
 80190b6:	46bd      	mov	sp, r7
 80190b8:	bd80      	pop	{r7, pc}
 80190ba:	bf00      	nop

080190bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80190bc:	b480      	push	{r7}
 80190be:	b085      	sub	sp, #20
 80190c0:	af00      	add	r7, sp, #0
 80190c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80190c4:	687b      	ldr	r3, [r7, #4]
 80190c6:	681b      	ldr	r3, [r3, #0]
 80190c8:	b2db      	uxtb	r3, r3
 80190ca:	3b10      	subs	r3, #16
 80190cc:	4a14      	ldr	r2, [pc, #80]	; (8019120 <DMA_CalcBaseAndBitshift+0x64>)
 80190ce:	fba2 2303 	umull	r2, r3, r2, r3
 80190d2:	091b      	lsrs	r3, r3, #4
 80190d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80190d6:	4a13      	ldr	r2, [pc, #76]	; (8019124 <DMA_CalcBaseAndBitshift+0x68>)
 80190d8:	68fb      	ldr	r3, [r7, #12]
 80190da:	4413      	add	r3, r2
 80190dc:	781b      	ldrb	r3, [r3, #0]
 80190de:	461a      	mov	r2, r3
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80190e4:	68fb      	ldr	r3, [r7, #12]
 80190e6:	2b03      	cmp	r3, #3
 80190e8:	d909      	bls.n	80190fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80190ea:	687b      	ldr	r3, [r7, #4]
 80190ec:	681b      	ldr	r3, [r3, #0]
 80190ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80190f2:	f023 0303 	bic.w	r3, r3, #3
 80190f6:	1d1a      	adds	r2, r3, #4
 80190f8:	687b      	ldr	r3, [r7, #4]
 80190fa:	659a      	str	r2, [r3, #88]	; 0x58
 80190fc:	e007      	b.n	801910e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80190fe:	687b      	ldr	r3, [r7, #4]
 8019100:	681b      	ldr	r3, [r3, #0]
 8019102:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8019106:	f023 0303 	bic.w	r3, r3, #3
 801910a:	687a      	ldr	r2, [r7, #4]
 801910c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 801910e:	687b      	ldr	r3, [r7, #4]
 8019110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8019112:	4618      	mov	r0, r3
 8019114:	3714      	adds	r7, #20
 8019116:	46bd      	mov	sp, r7
 8019118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801911c:	4770      	bx	lr
 801911e:	bf00      	nop
 8019120:	aaaaaaab 	.word	0xaaaaaaab
 8019124:	08002360 	.word	0x08002360

08019128 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8019128:	b480      	push	{r7}
 801912a:	b085      	sub	sp, #20
 801912c:	af00      	add	r7, sp, #0
 801912e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8019130:	2300      	movs	r3, #0
 8019132:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019138:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	699b      	ldr	r3, [r3, #24]
 801913e:	2b00      	cmp	r3, #0
 8019140:	d11f      	bne.n	8019182 <DMA_CheckFifoParam+0x5a>
 8019142:	68bb      	ldr	r3, [r7, #8]
 8019144:	2b03      	cmp	r3, #3
 8019146:	d856      	bhi.n	80191f6 <DMA_CheckFifoParam+0xce>
 8019148:	a201      	add	r2, pc, #4	; (adr r2, 8019150 <DMA_CheckFifoParam+0x28>)
 801914a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801914e:	bf00      	nop
 8019150:	08019161 	.word	0x08019161
 8019154:	08019173 	.word	0x08019173
 8019158:	08019161 	.word	0x08019161
 801915c:	080191f7 	.word	0x080191f7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8019160:	687b      	ldr	r3, [r7, #4]
 8019162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019164:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8019168:	2b00      	cmp	r3, #0
 801916a:	d046      	beq.n	80191fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 801916c:	2301      	movs	r3, #1
 801916e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8019170:	e043      	b.n	80191fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8019172:	687b      	ldr	r3, [r7, #4]
 8019174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019176:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801917a:	d140      	bne.n	80191fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 801917c:	2301      	movs	r3, #1
 801917e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8019180:	e03d      	b.n	80191fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8019182:	687b      	ldr	r3, [r7, #4]
 8019184:	699b      	ldr	r3, [r3, #24]
 8019186:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801918a:	d121      	bne.n	80191d0 <DMA_CheckFifoParam+0xa8>
 801918c:	68bb      	ldr	r3, [r7, #8]
 801918e:	2b03      	cmp	r3, #3
 8019190:	d837      	bhi.n	8019202 <DMA_CheckFifoParam+0xda>
 8019192:	a201      	add	r2, pc, #4	; (adr r2, 8019198 <DMA_CheckFifoParam+0x70>)
 8019194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019198:	080191a9 	.word	0x080191a9
 801919c:	080191af 	.word	0x080191af
 80191a0:	080191a9 	.word	0x080191a9
 80191a4:	080191c1 	.word	0x080191c1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80191a8:	2301      	movs	r3, #1
 80191aa:	73fb      	strb	r3, [r7, #15]
      break;
 80191ac:	e030      	b.n	8019210 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80191b6:	2b00      	cmp	r3, #0
 80191b8:	d025      	beq.n	8019206 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80191ba:	2301      	movs	r3, #1
 80191bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80191be:	e022      	b.n	8019206 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80191c0:	687b      	ldr	r3, [r7, #4]
 80191c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80191c8:	d11f      	bne.n	801920a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80191ca:	2301      	movs	r3, #1
 80191cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80191ce:	e01c      	b.n	801920a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80191d0:	68bb      	ldr	r3, [r7, #8]
 80191d2:	2b02      	cmp	r3, #2
 80191d4:	d903      	bls.n	80191de <DMA_CheckFifoParam+0xb6>
 80191d6:	68bb      	ldr	r3, [r7, #8]
 80191d8:	2b03      	cmp	r3, #3
 80191da:	d003      	beq.n	80191e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80191dc:	e018      	b.n	8019210 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80191de:	2301      	movs	r3, #1
 80191e0:	73fb      	strb	r3, [r7, #15]
      break;
 80191e2:	e015      	b.n	8019210 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80191e4:	687b      	ldr	r3, [r7, #4]
 80191e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80191ec:	2b00      	cmp	r3, #0
 80191ee:	d00e      	beq.n	801920e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80191f0:	2301      	movs	r3, #1
 80191f2:	73fb      	strb	r3, [r7, #15]
      break;
 80191f4:	e00b      	b.n	801920e <DMA_CheckFifoParam+0xe6>
      break;
 80191f6:	bf00      	nop
 80191f8:	e00a      	b.n	8019210 <DMA_CheckFifoParam+0xe8>
      break;
 80191fa:	bf00      	nop
 80191fc:	e008      	b.n	8019210 <DMA_CheckFifoParam+0xe8>
      break;
 80191fe:	bf00      	nop
 8019200:	e006      	b.n	8019210 <DMA_CheckFifoParam+0xe8>
      break;
 8019202:	bf00      	nop
 8019204:	e004      	b.n	8019210 <DMA_CheckFifoParam+0xe8>
      break;
 8019206:	bf00      	nop
 8019208:	e002      	b.n	8019210 <DMA_CheckFifoParam+0xe8>
      break;   
 801920a:	bf00      	nop
 801920c:	e000      	b.n	8019210 <DMA_CheckFifoParam+0xe8>
      break;
 801920e:	bf00      	nop
    }
  } 
  
  return status; 
 8019210:	7bfb      	ldrb	r3, [r7, #15]
}
 8019212:	4618      	mov	r0, r3
 8019214:	3714      	adds	r7, #20
 8019216:	46bd      	mov	sp, r7
 8019218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801921c:	4770      	bx	lr
 801921e:	bf00      	nop

08019220 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8019220:	b580      	push	{r7, lr}
 8019222:	b086      	sub	sp, #24
 8019224:	af00      	add	r7, sp, #0
 8019226:	60f8      	str	r0, [r7, #12]
 8019228:	60b9      	str	r1, [r7, #8]
 801922a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 801922e:	2301      	movs	r3, #1
 8019230:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8019232:	4b23      	ldr	r3, [pc, #140]	; (80192c0 <HAL_FLASH_Program+0xa0>)
 8019234:	7e1b      	ldrb	r3, [r3, #24]
 8019236:	2b01      	cmp	r3, #1
 8019238:	d101      	bne.n	801923e <HAL_FLASH_Program+0x1e>
 801923a:	2302      	movs	r3, #2
 801923c:	e03b      	b.n	80192b6 <HAL_FLASH_Program+0x96>
 801923e:	4b20      	ldr	r3, [pc, #128]	; (80192c0 <HAL_FLASH_Program+0xa0>)
 8019240:	2201      	movs	r2, #1
 8019242:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8019244:	f24c 3050 	movw	r0, #50000	; 0xc350
 8019248:	f000 f870 	bl	801932c <FLASH_WaitForLastOperation>
 801924c:	4603      	mov	r3, r0
 801924e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8019250:	7dfb      	ldrb	r3, [r7, #23]
 8019252:	2b00      	cmp	r3, #0
 8019254:	d12b      	bne.n	80192ae <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8019256:	68fb      	ldr	r3, [r7, #12]
 8019258:	2b00      	cmp	r3, #0
 801925a:	d105      	bne.n	8019268 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 801925c:	783b      	ldrb	r3, [r7, #0]
 801925e:	4619      	mov	r1, r3
 8019260:	68b8      	ldr	r0, [r7, #8]
 8019262:	f000 f91b 	bl	801949c <FLASH_Program_Byte>
 8019266:	e016      	b.n	8019296 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8019268:	68fb      	ldr	r3, [r7, #12]
 801926a:	2b01      	cmp	r3, #1
 801926c:	d105      	bne.n	801927a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 801926e:	883b      	ldrh	r3, [r7, #0]
 8019270:	4619      	mov	r1, r3
 8019272:	68b8      	ldr	r0, [r7, #8]
 8019274:	f000 f8ee 	bl	8019454 <FLASH_Program_HalfWord>
 8019278:	e00d      	b.n	8019296 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 801927a:	68fb      	ldr	r3, [r7, #12]
 801927c:	2b02      	cmp	r3, #2
 801927e:	d105      	bne.n	801928c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8019280:	683b      	ldr	r3, [r7, #0]
 8019282:	4619      	mov	r1, r3
 8019284:	68b8      	ldr	r0, [r7, #8]
 8019286:	f000 f8c3 	bl	8019410 <FLASH_Program_Word>
 801928a:	e004      	b.n	8019296 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 801928c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019290:	68b8      	ldr	r0, [r7, #8]
 8019292:	f000 f88b 	bl	80193ac <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8019296:	f24c 3050 	movw	r0, #50000	; 0xc350
 801929a:	f000 f847 	bl	801932c <FLASH_WaitForLastOperation>
 801929e:	4603      	mov	r3, r0
 80192a0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80192a2:	4b08      	ldr	r3, [pc, #32]	; (80192c4 <HAL_FLASH_Program+0xa4>)
 80192a4:	691b      	ldr	r3, [r3, #16]
 80192a6:	4a07      	ldr	r2, [pc, #28]	; (80192c4 <HAL_FLASH_Program+0xa4>)
 80192a8:	f023 0301 	bic.w	r3, r3, #1
 80192ac:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80192ae:	4b04      	ldr	r3, [pc, #16]	; (80192c0 <HAL_FLASH_Program+0xa0>)
 80192b0:	2200      	movs	r2, #0
 80192b2:	761a      	strb	r2, [r3, #24]
  
  return status;
 80192b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80192b6:	4618      	mov	r0, r3
 80192b8:	3718      	adds	r7, #24
 80192ba:	46bd      	mov	sp, r7
 80192bc:	bd80      	pop	{r7, pc}
 80192be:	bf00      	nop
 80192c0:	20006c7c 	.word	0x20006c7c
 80192c4:	40023c00 	.word	0x40023c00

080192c8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80192c8:	b480      	push	{r7}
 80192ca:	b083      	sub	sp, #12
 80192cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80192ce:	2300      	movs	r3, #0
 80192d0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80192d2:	4b0b      	ldr	r3, [pc, #44]	; (8019300 <HAL_FLASH_Unlock+0x38>)
 80192d4:	691b      	ldr	r3, [r3, #16]
 80192d6:	2b00      	cmp	r3, #0
 80192d8:	da0b      	bge.n	80192f2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80192da:	4b09      	ldr	r3, [pc, #36]	; (8019300 <HAL_FLASH_Unlock+0x38>)
 80192dc:	4a09      	ldr	r2, [pc, #36]	; (8019304 <HAL_FLASH_Unlock+0x3c>)
 80192de:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80192e0:	4b07      	ldr	r3, [pc, #28]	; (8019300 <HAL_FLASH_Unlock+0x38>)
 80192e2:	4a09      	ldr	r2, [pc, #36]	; (8019308 <HAL_FLASH_Unlock+0x40>)
 80192e4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80192e6:	4b06      	ldr	r3, [pc, #24]	; (8019300 <HAL_FLASH_Unlock+0x38>)
 80192e8:	691b      	ldr	r3, [r3, #16]
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	da01      	bge.n	80192f2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80192ee:	2301      	movs	r3, #1
 80192f0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80192f2:	79fb      	ldrb	r3, [r7, #7]
}
 80192f4:	4618      	mov	r0, r3
 80192f6:	370c      	adds	r7, #12
 80192f8:	46bd      	mov	sp, r7
 80192fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192fe:	4770      	bx	lr
 8019300:	40023c00 	.word	0x40023c00
 8019304:	45670123 	.word	0x45670123
 8019308:	cdef89ab 	.word	0xcdef89ab

0801930c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 801930c:	b480      	push	{r7}
 801930e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8019310:	4b05      	ldr	r3, [pc, #20]	; (8019328 <HAL_FLASH_Lock+0x1c>)
 8019312:	691b      	ldr	r3, [r3, #16]
 8019314:	4a04      	ldr	r2, [pc, #16]	; (8019328 <HAL_FLASH_Lock+0x1c>)
 8019316:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801931a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 801931c:	2300      	movs	r3, #0
}
 801931e:	4618      	mov	r0, r3
 8019320:	46bd      	mov	sp, r7
 8019322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019326:	4770      	bx	lr
 8019328:	40023c00 	.word	0x40023c00

0801932c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 801932c:	b580      	push	{r7, lr}
 801932e:	b084      	sub	sp, #16
 8019330:	af00      	add	r7, sp, #0
 8019332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8019334:	2300      	movs	r3, #0
 8019336:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8019338:	4b1a      	ldr	r3, [pc, #104]	; (80193a4 <FLASH_WaitForLastOperation+0x78>)
 801933a:	2200      	movs	r2, #0
 801933c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 801933e:	f7ff f819 	bl	8018374 <HAL_GetTick>
 8019342:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8019344:	e010      	b.n	8019368 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8019346:	687b      	ldr	r3, [r7, #4]
 8019348:	f1b3 3fff 	cmp.w	r3, #4294967295
 801934c:	d00c      	beq.n	8019368 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	2b00      	cmp	r3, #0
 8019352:	d007      	beq.n	8019364 <FLASH_WaitForLastOperation+0x38>
 8019354:	f7ff f80e 	bl	8018374 <HAL_GetTick>
 8019358:	4602      	mov	r2, r0
 801935a:	68fb      	ldr	r3, [r7, #12]
 801935c:	1ad3      	subs	r3, r2, r3
 801935e:	687a      	ldr	r2, [r7, #4]
 8019360:	429a      	cmp	r2, r3
 8019362:	d201      	bcs.n	8019368 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8019364:	2303      	movs	r3, #3
 8019366:	e019      	b.n	801939c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8019368:	4b0f      	ldr	r3, [pc, #60]	; (80193a8 <FLASH_WaitForLastOperation+0x7c>)
 801936a:	68db      	ldr	r3, [r3, #12]
 801936c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019370:	2b00      	cmp	r3, #0
 8019372:	d1e8      	bne.n	8019346 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8019374:	4b0c      	ldr	r3, [pc, #48]	; (80193a8 <FLASH_WaitForLastOperation+0x7c>)
 8019376:	68db      	ldr	r3, [r3, #12]
 8019378:	f003 0301 	and.w	r3, r3, #1
 801937c:	2b00      	cmp	r3, #0
 801937e:	d002      	beq.n	8019386 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8019380:	4b09      	ldr	r3, [pc, #36]	; (80193a8 <FLASH_WaitForLastOperation+0x7c>)
 8019382:	2201      	movs	r2, #1
 8019384:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8019386:	4b08      	ldr	r3, [pc, #32]	; (80193a8 <FLASH_WaitForLastOperation+0x7c>)
 8019388:	68db      	ldr	r3, [r3, #12]
 801938a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 801938e:	2b00      	cmp	r3, #0
 8019390:	d003      	beq.n	801939a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8019392:	f000 f8a5 	bl	80194e0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8019396:	2301      	movs	r3, #1
 8019398:	e000      	b.n	801939c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 801939a:	2300      	movs	r3, #0
  
}  
 801939c:	4618      	mov	r0, r3
 801939e:	3710      	adds	r7, #16
 80193a0:	46bd      	mov	sp, r7
 80193a2:	bd80      	pop	{r7, pc}
 80193a4:	20006c7c 	.word	0x20006c7c
 80193a8:	40023c00 	.word	0x40023c00

080193ac <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80193ac:	b480      	push	{r7}
 80193ae:	b085      	sub	sp, #20
 80193b0:	af00      	add	r7, sp, #0
 80193b2:	60f8      	str	r0, [r7, #12]
 80193b4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80193b8:	4b14      	ldr	r3, [pc, #80]	; (801940c <FLASH_Program_DoubleWord+0x60>)
 80193ba:	691b      	ldr	r3, [r3, #16]
 80193bc:	4a13      	ldr	r2, [pc, #76]	; (801940c <FLASH_Program_DoubleWord+0x60>)
 80193be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80193c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80193c4:	4b11      	ldr	r3, [pc, #68]	; (801940c <FLASH_Program_DoubleWord+0x60>)
 80193c6:	691b      	ldr	r3, [r3, #16]
 80193c8:	4a10      	ldr	r2, [pc, #64]	; (801940c <FLASH_Program_DoubleWord+0x60>)
 80193ca:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80193ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80193d0:	4b0e      	ldr	r3, [pc, #56]	; (801940c <FLASH_Program_DoubleWord+0x60>)
 80193d2:	691b      	ldr	r3, [r3, #16]
 80193d4:	4a0d      	ldr	r2, [pc, #52]	; (801940c <FLASH_Program_DoubleWord+0x60>)
 80193d6:	f043 0301 	orr.w	r3, r3, #1
 80193da:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80193dc:	68fb      	ldr	r3, [r7, #12]
 80193de:	683a      	ldr	r2, [r7, #0]
 80193e0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80193e2:	f3bf 8f6f 	isb	sy
}
 80193e6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80193e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80193ec:	f04f 0200 	mov.w	r2, #0
 80193f0:	f04f 0300 	mov.w	r3, #0
 80193f4:	000a      	movs	r2, r1
 80193f6:	2300      	movs	r3, #0
 80193f8:	68f9      	ldr	r1, [r7, #12]
 80193fa:	3104      	adds	r1, #4
 80193fc:	4613      	mov	r3, r2
 80193fe:	600b      	str	r3, [r1, #0]
}
 8019400:	bf00      	nop
 8019402:	3714      	adds	r7, #20
 8019404:	46bd      	mov	sp, r7
 8019406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801940a:	4770      	bx	lr
 801940c:	40023c00 	.word	0x40023c00

08019410 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8019410:	b480      	push	{r7}
 8019412:	b083      	sub	sp, #12
 8019414:	af00      	add	r7, sp, #0
 8019416:	6078      	str	r0, [r7, #4]
 8019418:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801941a:	4b0d      	ldr	r3, [pc, #52]	; (8019450 <FLASH_Program_Word+0x40>)
 801941c:	691b      	ldr	r3, [r3, #16]
 801941e:	4a0c      	ldr	r2, [pc, #48]	; (8019450 <FLASH_Program_Word+0x40>)
 8019420:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019424:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8019426:	4b0a      	ldr	r3, [pc, #40]	; (8019450 <FLASH_Program_Word+0x40>)
 8019428:	691b      	ldr	r3, [r3, #16]
 801942a:	4a09      	ldr	r2, [pc, #36]	; (8019450 <FLASH_Program_Word+0x40>)
 801942c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8019430:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8019432:	4b07      	ldr	r3, [pc, #28]	; (8019450 <FLASH_Program_Word+0x40>)
 8019434:	691b      	ldr	r3, [r3, #16]
 8019436:	4a06      	ldr	r2, [pc, #24]	; (8019450 <FLASH_Program_Word+0x40>)
 8019438:	f043 0301 	orr.w	r3, r3, #1
 801943c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 801943e:	687b      	ldr	r3, [r7, #4]
 8019440:	683a      	ldr	r2, [r7, #0]
 8019442:	601a      	str	r2, [r3, #0]
}
 8019444:	bf00      	nop
 8019446:	370c      	adds	r7, #12
 8019448:	46bd      	mov	sp, r7
 801944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801944e:	4770      	bx	lr
 8019450:	40023c00 	.word	0x40023c00

08019454 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8019454:	b480      	push	{r7}
 8019456:	b083      	sub	sp, #12
 8019458:	af00      	add	r7, sp, #0
 801945a:	6078      	str	r0, [r7, #4]
 801945c:	460b      	mov	r3, r1
 801945e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8019460:	4b0d      	ldr	r3, [pc, #52]	; (8019498 <FLASH_Program_HalfWord+0x44>)
 8019462:	691b      	ldr	r3, [r3, #16]
 8019464:	4a0c      	ldr	r2, [pc, #48]	; (8019498 <FLASH_Program_HalfWord+0x44>)
 8019466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801946a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 801946c:	4b0a      	ldr	r3, [pc, #40]	; (8019498 <FLASH_Program_HalfWord+0x44>)
 801946e:	691b      	ldr	r3, [r3, #16]
 8019470:	4a09      	ldr	r2, [pc, #36]	; (8019498 <FLASH_Program_HalfWord+0x44>)
 8019472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8019476:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8019478:	4b07      	ldr	r3, [pc, #28]	; (8019498 <FLASH_Program_HalfWord+0x44>)
 801947a:	691b      	ldr	r3, [r3, #16]
 801947c:	4a06      	ldr	r2, [pc, #24]	; (8019498 <FLASH_Program_HalfWord+0x44>)
 801947e:	f043 0301 	orr.w	r3, r3, #1
 8019482:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	887a      	ldrh	r2, [r7, #2]
 8019488:	801a      	strh	r2, [r3, #0]
}
 801948a:	bf00      	nop
 801948c:	370c      	adds	r7, #12
 801948e:	46bd      	mov	sp, r7
 8019490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019494:	4770      	bx	lr
 8019496:	bf00      	nop
 8019498:	40023c00 	.word	0x40023c00

0801949c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 801949c:	b480      	push	{r7}
 801949e:	b083      	sub	sp, #12
 80194a0:	af00      	add	r7, sp, #0
 80194a2:	6078      	str	r0, [r7, #4]
 80194a4:	460b      	mov	r3, r1
 80194a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80194a8:	4b0c      	ldr	r3, [pc, #48]	; (80194dc <FLASH_Program_Byte+0x40>)
 80194aa:	691b      	ldr	r3, [r3, #16]
 80194ac:	4a0b      	ldr	r2, [pc, #44]	; (80194dc <FLASH_Program_Byte+0x40>)
 80194ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80194b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80194b4:	4b09      	ldr	r3, [pc, #36]	; (80194dc <FLASH_Program_Byte+0x40>)
 80194b6:	4a09      	ldr	r2, [pc, #36]	; (80194dc <FLASH_Program_Byte+0x40>)
 80194b8:	691b      	ldr	r3, [r3, #16]
 80194ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80194bc:	4b07      	ldr	r3, [pc, #28]	; (80194dc <FLASH_Program_Byte+0x40>)
 80194be:	691b      	ldr	r3, [r3, #16]
 80194c0:	4a06      	ldr	r2, [pc, #24]	; (80194dc <FLASH_Program_Byte+0x40>)
 80194c2:	f043 0301 	orr.w	r3, r3, #1
 80194c6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	78fa      	ldrb	r2, [r7, #3]
 80194cc:	701a      	strb	r2, [r3, #0]
}
 80194ce:	bf00      	nop
 80194d0:	370c      	adds	r7, #12
 80194d2:	46bd      	mov	sp, r7
 80194d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194d8:	4770      	bx	lr
 80194da:	bf00      	nop
 80194dc:	40023c00 	.word	0x40023c00

080194e0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80194e0:	b480      	push	{r7}
 80194e2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80194e4:	4b2f      	ldr	r3, [pc, #188]	; (80195a4 <FLASH_SetErrorCode+0xc4>)
 80194e6:	68db      	ldr	r3, [r3, #12]
 80194e8:	f003 0310 	and.w	r3, r3, #16
 80194ec:	2b00      	cmp	r3, #0
 80194ee:	d008      	beq.n	8019502 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80194f0:	4b2d      	ldr	r3, [pc, #180]	; (80195a8 <FLASH_SetErrorCode+0xc8>)
 80194f2:	69db      	ldr	r3, [r3, #28]
 80194f4:	f043 0310 	orr.w	r3, r3, #16
 80194f8:	4a2b      	ldr	r2, [pc, #172]	; (80195a8 <FLASH_SetErrorCode+0xc8>)
 80194fa:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80194fc:	4b29      	ldr	r3, [pc, #164]	; (80195a4 <FLASH_SetErrorCode+0xc4>)
 80194fe:	2210      	movs	r2, #16
 8019500:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8019502:	4b28      	ldr	r3, [pc, #160]	; (80195a4 <FLASH_SetErrorCode+0xc4>)
 8019504:	68db      	ldr	r3, [r3, #12]
 8019506:	f003 0320 	and.w	r3, r3, #32
 801950a:	2b00      	cmp	r3, #0
 801950c:	d008      	beq.n	8019520 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 801950e:	4b26      	ldr	r3, [pc, #152]	; (80195a8 <FLASH_SetErrorCode+0xc8>)
 8019510:	69db      	ldr	r3, [r3, #28]
 8019512:	f043 0308 	orr.w	r3, r3, #8
 8019516:	4a24      	ldr	r2, [pc, #144]	; (80195a8 <FLASH_SetErrorCode+0xc8>)
 8019518:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 801951a:	4b22      	ldr	r3, [pc, #136]	; (80195a4 <FLASH_SetErrorCode+0xc4>)
 801951c:	2220      	movs	r2, #32
 801951e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8019520:	4b20      	ldr	r3, [pc, #128]	; (80195a4 <FLASH_SetErrorCode+0xc4>)
 8019522:	68db      	ldr	r3, [r3, #12]
 8019524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019528:	2b00      	cmp	r3, #0
 801952a:	d008      	beq.n	801953e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 801952c:	4b1e      	ldr	r3, [pc, #120]	; (80195a8 <FLASH_SetErrorCode+0xc8>)
 801952e:	69db      	ldr	r3, [r3, #28]
 8019530:	f043 0304 	orr.w	r3, r3, #4
 8019534:	4a1c      	ldr	r2, [pc, #112]	; (80195a8 <FLASH_SetErrorCode+0xc8>)
 8019536:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8019538:	4b1a      	ldr	r3, [pc, #104]	; (80195a4 <FLASH_SetErrorCode+0xc4>)
 801953a:	2240      	movs	r2, #64	; 0x40
 801953c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 801953e:	4b19      	ldr	r3, [pc, #100]	; (80195a4 <FLASH_SetErrorCode+0xc4>)
 8019540:	68db      	ldr	r3, [r3, #12]
 8019542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019546:	2b00      	cmp	r3, #0
 8019548:	d008      	beq.n	801955c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 801954a:	4b17      	ldr	r3, [pc, #92]	; (80195a8 <FLASH_SetErrorCode+0xc8>)
 801954c:	69db      	ldr	r3, [r3, #28]
 801954e:	f043 0302 	orr.w	r3, r3, #2
 8019552:	4a15      	ldr	r2, [pc, #84]	; (80195a8 <FLASH_SetErrorCode+0xc8>)
 8019554:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8019556:	4b13      	ldr	r3, [pc, #76]	; (80195a4 <FLASH_SetErrorCode+0xc4>)
 8019558:	2280      	movs	r2, #128	; 0x80
 801955a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 801955c:	4b11      	ldr	r3, [pc, #68]	; (80195a4 <FLASH_SetErrorCode+0xc4>)
 801955e:	68db      	ldr	r3, [r3, #12]
 8019560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019564:	2b00      	cmp	r3, #0
 8019566:	d009      	beq.n	801957c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8019568:	4b0f      	ldr	r3, [pc, #60]	; (80195a8 <FLASH_SetErrorCode+0xc8>)
 801956a:	69db      	ldr	r3, [r3, #28]
 801956c:	f043 0301 	orr.w	r3, r3, #1
 8019570:	4a0d      	ldr	r2, [pc, #52]	; (80195a8 <FLASH_SetErrorCode+0xc8>)
 8019572:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8019574:	4b0b      	ldr	r3, [pc, #44]	; (80195a4 <FLASH_SetErrorCode+0xc4>)
 8019576:	f44f 7280 	mov.w	r2, #256	; 0x100
 801957a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 801957c:	4b09      	ldr	r3, [pc, #36]	; (80195a4 <FLASH_SetErrorCode+0xc4>)
 801957e:	68db      	ldr	r3, [r3, #12]
 8019580:	f003 0302 	and.w	r3, r3, #2
 8019584:	2b00      	cmp	r3, #0
 8019586:	d008      	beq.n	801959a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8019588:	4b07      	ldr	r3, [pc, #28]	; (80195a8 <FLASH_SetErrorCode+0xc8>)
 801958a:	69db      	ldr	r3, [r3, #28]
 801958c:	f043 0320 	orr.w	r3, r3, #32
 8019590:	4a05      	ldr	r2, [pc, #20]	; (80195a8 <FLASH_SetErrorCode+0xc8>)
 8019592:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8019594:	4b03      	ldr	r3, [pc, #12]	; (80195a4 <FLASH_SetErrorCode+0xc4>)
 8019596:	2202      	movs	r2, #2
 8019598:	60da      	str	r2, [r3, #12]
  }
}
 801959a:	bf00      	nop
 801959c:	46bd      	mov	sp, r7
 801959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195a2:	4770      	bx	lr
 80195a4:	40023c00 	.word	0x40023c00
 80195a8:	20006c7c 	.word	0x20006c7c

080195ac <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80195ac:	b580      	push	{r7, lr}
 80195ae:	b084      	sub	sp, #16
 80195b0:	af00      	add	r7, sp, #0
 80195b2:	6078      	str	r0, [r7, #4]
 80195b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80195b6:	2301      	movs	r3, #1
 80195b8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80195ba:	2300      	movs	r3, #0
 80195bc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80195be:	4b31      	ldr	r3, [pc, #196]	; (8019684 <HAL_FLASHEx_Erase+0xd8>)
 80195c0:	7e1b      	ldrb	r3, [r3, #24]
 80195c2:	2b01      	cmp	r3, #1
 80195c4:	d101      	bne.n	80195ca <HAL_FLASHEx_Erase+0x1e>
 80195c6:	2302      	movs	r3, #2
 80195c8:	e058      	b.n	801967c <HAL_FLASHEx_Erase+0xd0>
 80195ca:	4b2e      	ldr	r3, [pc, #184]	; (8019684 <HAL_FLASHEx_Erase+0xd8>)
 80195cc:	2201      	movs	r2, #1
 80195ce:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80195d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80195d4:	f7ff feaa 	bl	801932c <FLASH_WaitForLastOperation>
 80195d8:	4603      	mov	r3, r0
 80195da:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80195dc:	7bfb      	ldrb	r3, [r7, #15]
 80195de:	2b00      	cmp	r3, #0
 80195e0:	d148      	bne.n	8019674 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80195e2:	683b      	ldr	r3, [r7, #0]
 80195e4:	f04f 32ff 	mov.w	r2, #4294967295
 80195e8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	681b      	ldr	r3, [r3, #0]
 80195ee:	2b01      	cmp	r3, #1
 80195f0:	d115      	bne.n	801961e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	691b      	ldr	r3, [r3, #16]
 80195f6:	b2da      	uxtb	r2, r3
 80195f8:	687b      	ldr	r3, [r7, #4]
 80195fa:	685b      	ldr	r3, [r3, #4]
 80195fc:	4619      	mov	r1, r3
 80195fe:	4610      	mov	r0, r2
 8019600:	f000 f844 	bl	801968c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8019604:	f24c 3050 	movw	r0, #50000	; 0xc350
 8019608:	f7ff fe90 	bl	801932c <FLASH_WaitForLastOperation>
 801960c:	4603      	mov	r3, r0
 801960e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8019610:	4b1d      	ldr	r3, [pc, #116]	; (8019688 <HAL_FLASHEx_Erase+0xdc>)
 8019612:	691b      	ldr	r3, [r3, #16]
 8019614:	4a1c      	ldr	r2, [pc, #112]	; (8019688 <HAL_FLASHEx_Erase+0xdc>)
 8019616:	f023 0304 	bic.w	r3, r3, #4
 801961a:	6113      	str	r3, [r2, #16]
 801961c:	e028      	b.n	8019670 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 801961e:	687b      	ldr	r3, [r7, #4]
 8019620:	689b      	ldr	r3, [r3, #8]
 8019622:	60bb      	str	r3, [r7, #8]
 8019624:	e01c      	b.n	8019660 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8019626:	687b      	ldr	r3, [r7, #4]
 8019628:	691b      	ldr	r3, [r3, #16]
 801962a:	b2db      	uxtb	r3, r3
 801962c:	4619      	mov	r1, r3
 801962e:	68b8      	ldr	r0, [r7, #8]
 8019630:	f000 f850 	bl	80196d4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8019634:	f24c 3050 	movw	r0, #50000	; 0xc350
 8019638:	f7ff fe78 	bl	801932c <FLASH_WaitForLastOperation>
 801963c:	4603      	mov	r3, r0
 801963e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8019640:	4b11      	ldr	r3, [pc, #68]	; (8019688 <HAL_FLASHEx_Erase+0xdc>)
 8019642:	691b      	ldr	r3, [r3, #16]
 8019644:	4a10      	ldr	r2, [pc, #64]	; (8019688 <HAL_FLASHEx_Erase+0xdc>)
 8019646:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 801964a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 801964c:	7bfb      	ldrb	r3, [r7, #15]
 801964e:	2b00      	cmp	r3, #0
 8019650:	d003      	beq.n	801965a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8019652:	683b      	ldr	r3, [r7, #0]
 8019654:	68ba      	ldr	r2, [r7, #8]
 8019656:	601a      	str	r2, [r3, #0]
          break;
 8019658:	e00a      	b.n	8019670 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 801965a:	68bb      	ldr	r3, [r7, #8]
 801965c:	3301      	adds	r3, #1
 801965e:	60bb      	str	r3, [r7, #8]
 8019660:	687b      	ldr	r3, [r7, #4]
 8019662:	68da      	ldr	r2, [r3, #12]
 8019664:	687b      	ldr	r3, [r7, #4]
 8019666:	689b      	ldr	r3, [r3, #8]
 8019668:	4413      	add	r3, r2
 801966a:	68ba      	ldr	r2, [r7, #8]
 801966c:	429a      	cmp	r2, r3
 801966e:	d3da      	bcc.n	8019626 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8019670:	f000 f878 	bl	8019764 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8019674:	4b03      	ldr	r3, [pc, #12]	; (8019684 <HAL_FLASHEx_Erase+0xd8>)
 8019676:	2200      	movs	r2, #0
 8019678:	761a      	strb	r2, [r3, #24]

  return status;
 801967a:	7bfb      	ldrb	r3, [r7, #15]
}
 801967c:	4618      	mov	r0, r3
 801967e:	3710      	adds	r7, #16
 8019680:	46bd      	mov	sp, r7
 8019682:	bd80      	pop	{r7, pc}
 8019684:	20006c7c 	.word	0x20006c7c
 8019688:	40023c00 	.word	0x40023c00

0801968c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 801968c:	b480      	push	{r7}
 801968e:	b083      	sub	sp, #12
 8019690:	af00      	add	r7, sp, #0
 8019692:	4603      	mov	r3, r0
 8019694:	6039      	str	r1, [r7, #0]
 8019696:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8019698:	4b0d      	ldr	r3, [pc, #52]	; (80196d0 <FLASH_MassErase+0x44>)
 801969a:	691b      	ldr	r3, [r3, #16]
 801969c:	4a0c      	ldr	r2, [pc, #48]	; (80196d0 <FLASH_MassErase+0x44>)
 801969e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80196a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80196a4:	4b0a      	ldr	r3, [pc, #40]	; (80196d0 <FLASH_MassErase+0x44>)
 80196a6:	691b      	ldr	r3, [r3, #16]
 80196a8:	4a09      	ldr	r2, [pc, #36]	; (80196d0 <FLASH_MassErase+0x44>)
 80196aa:	f043 0304 	orr.w	r3, r3, #4
 80196ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80196b0:	4b07      	ldr	r3, [pc, #28]	; (80196d0 <FLASH_MassErase+0x44>)
 80196b2:	691a      	ldr	r2, [r3, #16]
 80196b4:	79fb      	ldrb	r3, [r7, #7]
 80196b6:	021b      	lsls	r3, r3, #8
 80196b8:	4313      	orrs	r3, r2
 80196ba:	4a05      	ldr	r2, [pc, #20]	; (80196d0 <FLASH_MassErase+0x44>)
 80196bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80196c0:	6113      	str	r3, [r2, #16]
}
 80196c2:	bf00      	nop
 80196c4:	370c      	adds	r7, #12
 80196c6:	46bd      	mov	sp, r7
 80196c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196cc:	4770      	bx	lr
 80196ce:	bf00      	nop
 80196d0:	40023c00 	.word	0x40023c00

080196d4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80196d4:	b480      	push	{r7}
 80196d6:	b085      	sub	sp, #20
 80196d8:	af00      	add	r7, sp, #0
 80196da:	6078      	str	r0, [r7, #4]
 80196dc:	460b      	mov	r3, r1
 80196de:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80196e0:	2300      	movs	r3, #0
 80196e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80196e4:	78fb      	ldrb	r3, [r7, #3]
 80196e6:	2b00      	cmp	r3, #0
 80196e8:	d102      	bne.n	80196f0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80196ea:	2300      	movs	r3, #0
 80196ec:	60fb      	str	r3, [r7, #12]
 80196ee:	e010      	b.n	8019712 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80196f0:	78fb      	ldrb	r3, [r7, #3]
 80196f2:	2b01      	cmp	r3, #1
 80196f4:	d103      	bne.n	80196fe <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80196f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80196fa:	60fb      	str	r3, [r7, #12]
 80196fc:	e009      	b.n	8019712 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80196fe:	78fb      	ldrb	r3, [r7, #3]
 8019700:	2b02      	cmp	r3, #2
 8019702:	d103      	bne.n	801970c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8019704:	f44f 7300 	mov.w	r3, #512	; 0x200
 8019708:	60fb      	str	r3, [r7, #12]
 801970a:	e002      	b.n	8019712 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 801970c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8019710:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8019712:	4b13      	ldr	r3, [pc, #76]	; (8019760 <FLASH_Erase_Sector+0x8c>)
 8019714:	691b      	ldr	r3, [r3, #16]
 8019716:	4a12      	ldr	r2, [pc, #72]	; (8019760 <FLASH_Erase_Sector+0x8c>)
 8019718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801971c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 801971e:	4b10      	ldr	r3, [pc, #64]	; (8019760 <FLASH_Erase_Sector+0x8c>)
 8019720:	691a      	ldr	r2, [r3, #16]
 8019722:	490f      	ldr	r1, [pc, #60]	; (8019760 <FLASH_Erase_Sector+0x8c>)
 8019724:	68fb      	ldr	r3, [r7, #12]
 8019726:	4313      	orrs	r3, r2
 8019728:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 801972a:	4b0d      	ldr	r3, [pc, #52]	; (8019760 <FLASH_Erase_Sector+0x8c>)
 801972c:	691b      	ldr	r3, [r3, #16]
 801972e:	4a0c      	ldr	r2, [pc, #48]	; (8019760 <FLASH_Erase_Sector+0x8c>)
 8019730:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8019734:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8019736:	4b0a      	ldr	r3, [pc, #40]	; (8019760 <FLASH_Erase_Sector+0x8c>)
 8019738:	691a      	ldr	r2, [r3, #16]
 801973a:	687b      	ldr	r3, [r7, #4]
 801973c:	00db      	lsls	r3, r3, #3
 801973e:	4313      	orrs	r3, r2
 8019740:	4a07      	ldr	r2, [pc, #28]	; (8019760 <FLASH_Erase_Sector+0x8c>)
 8019742:	f043 0302 	orr.w	r3, r3, #2
 8019746:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8019748:	4b05      	ldr	r3, [pc, #20]	; (8019760 <FLASH_Erase_Sector+0x8c>)
 801974a:	691b      	ldr	r3, [r3, #16]
 801974c:	4a04      	ldr	r2, [pc, #16]	; (8019760 <FLASH_Erase_Sector+0x8c>)
 801974e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019752:	6113      	str	r3, [r2, #16]
}
 8019754:	bf00      	nop
 8019756:	3714      	adds	r7, #20
 8019758:	46bd      	mov	sp, r7
 801975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801975e:	4770      	bx	lr
 8019760:	40023c00 	.word	0x40023c00

08019764 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8019764:	b480      	push	{r7}
 8019766:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8019768:	4b20      	ldr	r3, [pc, #128]	; (80197ec <FLASH_FlushCaches+0x88>)
 801976a:	681b      	ldr	r3, [r3, #0]
 801976c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019770:	2b00      	cmp	r3, #0
 8019772:	d017      	beq.n	80197a4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8019774:	4b1d      	ldr	r3, [pc, #116]	; (80197ec <FLASH_FlushCaches+0x88>)
 8019776:	681b      	ldr	r3, [r3, #0]
 8019778:	4a1c      	ldr	r2, [pc, #112]	; (80197ec <FLASH_FlushCaches+0x88>)
 801977a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801977e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8019780:	4b1a      	ldr	r3, [pc, #104]	; (80197ec <FLASH_FlushCaches+0x88>)
 8019782:	681b      	ldr	r3, [r3, #0]
 8019784:	4a19      	ldr	r2, [pc, #100]	; (80197ec <FLASH_FlushCaches+0x88>)
 8019786:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801978a:	6013      	str	r3, [r2, #0]
 801978c:	4b17      	ldr	r3, [pc, #92]	; (80197ec <FLASH_FlushCaches+0x88>)
 801978e:	681b      	ldr	r3, [r3, #0]
 8019790:	4a16      	ldr	r2, [pc, #88]	; (80197ec <FLASH_FlushCaches+0x88>)
 8019792:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019796:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8019798:	4b14      	ldr	r3, [pc, #80]	; (80197ec <FLASH_FlushCaches+0x88>)
 801979a:	681b      	ldr	r3, [r3, #0]
 801979c:	4a13      	ldr	r2, [pc, #76]	; (80197ec <FLASH_FlushCaches+0x88>)
 801979e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80197a2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80197a4:	4b11      	ldr	r3, [pc, #68]	; (80197ec <FLASH_FlushCaches+0x88>)
 80197a6:	681b      	ldr	r3, [r3, #0]
 80197a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80197ac:	2b00      	cmp	r3, #0
 80197ae:	d017      	beq.n	80197e0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80197b0:	4b0e      	ldr	r3, [pc, #56]	; (80197ec <FLASH_FlushCaches+0x88>)
 80197b2:	681b      	ldr	r3, [r3, #0]
 80197b4:	4a0d      	ldr	r2, [pc, #52]	; (80197ec <FLASH_FlushCaches+0x88>)
 80197b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80197ba:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80197bc:	4b0b      	ldr	r3, [pc, #44]	; (80197ec <FLASH_FlushCaches+0x88>)
 80197be:	681b      	ldr	r3, [r3, #0]
 80197c0:	4a0a      	ldr	r2, [pc, #40]	; (80197ec <FLASH_FlushCaches+0x88>)
 80197c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80197c6:	6013      	str	r3, [r2, #0]
 80197c8:	4b08      	ldr	r3, [pc, #32]	; (80197ec <FLASH_FlushCaches+0x88>)
 80197ca:	681b      	ldr	r3, [r3, #0]
 80197cc:	4a07      	ldr	r2, [pc, #28]	; (80197ec <FLASH_FlushCaches+0x88>)
 80197ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80197d2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80197d4:	4b05      	ldr	r3, [pc, #20]	; (80197ec <FLASH_FlushCaches+0x88>)
 80197d6:	681b      	ldr	r3, [r3, #0]
 80197d8:	4a04      	ldr	r2, [pc, #16]	; (80197ec <FLASH_FlushCaches+0x88>)
 80197da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80197de:	6013      	str	r3, [r2, #0]
  }
}
 80197e0:	bf00      	nop
 80197e2:	46bd      	mov	sp, r7
 80197e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197e8:	4770      	bx	lr
 80197ea:	bf00      	nop
 80197ec:	40023c00 	.word	0x40023c00

080197f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80197f0:	b480      	push	{r7}
 80197f2:	b089      	sub	sp, #36	; 0x24
 80197f4:	af00      	add	r7, sp, #0
 80197f6:	6078      	str	r0, [r7, #4]
 80197f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80197fa:	2300      	movs	r3, #0
 80197fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80197fe:	2300      	movs	r3, #0
 8019800:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8019802:	2300      	movs	r3, #0
 8019804:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8019806:	2300      	movs	r3, #0
 8019808:	61fb      	str	r3, [r7, #28]
 801980a:	e165      	b.n	8019ad8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801980c:	2201      	movs	r2, #1
 801980e:	69fb      	ldr	r3, [r7, #28]
 8019810:	fa02 f303 	lsl.w	r3, r2, r3
 8019814:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8019816:	683b      	ldr	r3, [r7, #0]
 8019818:	681b      	ldr	r3, [r3, #0]
 801981a:	697a      	ldr	r2, [r7, #20]
 801981c:	4013      	ands	r3, r2
 801981e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8019820:	693a      	ldr	r2, [r7, #16]
 8019822:	697b      	ldr	r3, [r7, #20]
 8019824:	429a      	cmp	r2, r3
 8019826:	f040 8154 	bne.w	8019ad2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801982a:	683b      	ldr	r3, [r7, #0]
 801982c:	685b      	ldr	r3, [r3, #4]
 801982e:	f003 0303 	and.w	r3, r3, #3
 8019832:	2b01      	cmp	r3, #1
 8019834:	d005      	beq.n	8019842 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8019836:	683b      	ldr	r3, [r7, #0]
 8019838:	685b      	ldr	r3, [r3, #4]
 801983a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801983e:	2b02      	cmp	r3, #2
 8019840:	d130      	bne.n	80198a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8019842:	687b      	ldr	r3, [r7, #4]
 8019844:	689b      	ldr	r3, [r3, #8]
 8019846:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8019848:	69fb      	ldr	r3, [r7, #28]
 801984a:	005b      	lsls	r3, r3, #1
 801984c:	2203      	movs	r2, #3
 801984e:	fa02 f303 	lsl.w	r3, r2, r3
 8019852:	43db      	mvns	r3, r3
 8019854:	69ba      	ldr	r2, [r7, #24]
 8019856:	4013      	ands	r3, r2
 8019858:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801985a:	683b      	ldr	r3, [r7, #0]
 801985c:	68da      	ldr	r2, [r3, #12]
 801985e:	69fb      	ldr	r3, [r7, #28]
 8019860:	005b      	lsls	r3, r3, #1
 8019862:	fa02 f303 	lsl.w	r3, r2, r3
 8019866:	69ba      	ldr	r2, [r7, #24]
 8019868:	4313      	orrs	r3, r2
 801986a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	69ba      	ldr	r2, [r7, #24]
 8019870:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8019872:	687b      	ldr	r3, [r7, #4]
 8019874:	685b      	ldr	r3, [r3, #4]
 8019876:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8019878:	2201      	movs	r2, #1
 801987a:	69fb      	ldr	r3, [r7, #28]
 801987c:	fa02 f303 	lsl.w	r3, r2, r3
 8019880:	43db      	mvns	r3, r3
 8019882:	69ba      	ldr	r2, [r7, #24]
 8019884:	4013      	ands	r3, r2
 8019886:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8019888:	683b      	ldr	r3, [r7, #0]
 801988a:	685b      	ldr	r3, [r3, #4]
 801988c:	091b      	lsrs	r3, r3, #4
 801988e:	f003 0201 	and.w	r2, r3, #1
 8019892:	69fb      	ldr	r3, [r7, #28]
 8019894:	fa02 f303 	lsl.w	r3, r2, r3
 8019898:	69ba      	ldr	r2, [r7, #24]
 801989a:	4313      	orrs	r3, r2
 801989c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	69ba      	ldr	r2, [r7, #24]
 80198a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80198a4:	683b      	ldr	r3, [r7, #0]
 80198a6:	685b      	ldr	r3, [r3, #4]
 80198a8:	f003 0303 	and.w	r3, r3, #3
 80198ac:	2b03      	cmp	r3, #3
 80198ae:	d017      	beq.n	80198e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	68db      	ldr	r3, [r3, #12]
 80198b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80198b6:	69fb      	ldr	r3, [r7, #28]
 80198b8:	005b      	lsls	r3, r3, #1
 80198ba:	2203      	movs	r2, #3
 80198bc:	fa02 f303 	lsl.w	r3, r2, r3
 80198c0:	43db      	mvns	r3, r3
 80198c2:	69ba      	ldr	r2, [r7, #24]
 80198c4:	4013      	ands	r3, r2
 80198c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80198c8:	683b      	ldr	r3, [r7, #0]
 80198ca:	689a      	ldr	r2, [r3, #8]
 80198cc:	69fb      	ldr	r3, [r7, #28]
 80198ce:	005b      	lsls	r3, r3, #1
 80198d0:	fa02 f303 	lsl.w	r3, r2, r3
 80198d4:	69ba      	ldr	r2, [r7, #24]
 80198d6:	4313      	orrs	r3, r2
 80198d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80198da:	687b      	ldr	r3, [r7, #4]
 80198dc:	69ba      	ldr	r2, [r7, #24]
 80198de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80198e0:	683b      	ldr	r3, [r7, #0]
 80198e2:	685b      	ldr	r3, [r3, #4]
 80198e4:	f003 0303 	and.w	r3, r3, #3
 80198e8:	2b02      	cmp	r3, #2
 80198ea:	d123      	bne.n	8019934 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80198ec:	69fb      	ldr	r3, [r7, #28]
 80198ee:	08da      	lsrs	r2, r3, #3
 80198f0:	687b      	ldr	r3, [r7, #4]
 80198f2:	3208      	adds	r2, #8
 80198f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80198f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80198fa:	69fb      	ldr	r3, [r7, #28]
 80198fc:	f003 0307 	and.w	r3, r3, #7
 8019900:	009b      	lsls	r3, r3, #2
 8019902:	220f      	movs	r2, #15
 8019904:	fa02 f303 	lsl.w	r3, r2, r3
 8019908:	43db      	mvns	r3, r3
 801990a:	69ba      	ldr	r2, [r7, #24]
 801990c:	4013      	ands	r3, r2
 801990e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8019910:	683b      	ldr	r3, [r7, #0]
 8019912:	691a      	ldr	r2, [r3, #16]
 8019914:	69fb      	ldr	r3, [r7, #28]
 8019916:	f003 0307 	and.w	r3, r3, #7
 801991a:	009b      	lsls	r3, r3, #2
 801991c:	fa02 f303 	lsl.w	r3, r2, r3
 8019920:	69ba      	ldr	r2, [r7, #24]
 8019922:	4313      	orrs	r3, r2
 8019924:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8019926:	69fb      	ldr	r3, [r7, #28]
 8019928:	08da      	lsrs	r2, r3, #3
 801992a:	687b      	ldr	r3, [r7, #4]
 801992c:	3208      	adds	r2, #8
 801992e:	69b9      	ldr	r1, [r7, #24]
 8019930:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8019934:	687b      	ldr	r3, [r7, #4]
 8019936:	681b      	ldr	r3, [r3, #0]
 8019938:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801993a:	69fb      	ldr	r3, [r7, #28]
 801993c:	005b      	lsls	r3, r3, #1
 801993e:	2203      	movs	r2, #3
 8019940:	fa02 f303 	lsl.w	r3, r2, r3
 8019944:	43db      	mvns	r3, r3
 8019946:	69ba      	ldr	r2, [r7, #24]
 8019948:	4013      	ands	r3, r2
 801994a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801994c:	683b      	ldr	r3, [r7, #0]
 801994e:	685b      	ldr	r3, [r3, #4]
 8019950:	f003 0203 	and.w	r2, r3, #3
 8019954:	69fb      	ldr	r3, [r7, #28]
 8019956:	005b      	lsls	r3, r3, #1
 8019958:	fa02 f303 	lsl.w	r3, r2, r3
 801995c:	69ba      	ldr	r2, [r7, #24]
 801995e:	4313      	orrs	r3, r2
 8019960:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8019962:	687b      	ldr	r3, [r7, #4]
 8019964:	69ba      	ldr	r2, [r7, #24]
 8019966:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8019968:	683b      	ldr	r3, [r7, #0]
 801996a:	685b      	ldr	r3, [r3, #4]
 801996c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8019970:	2b00      	cmp	r3, #0
 8019972:	f000 80ae 	beq.w	8019ad2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8019976:	2300      	movs	r3, #0
 8019978:	60fb      	str	r3, [r7, #12]
 801997a:	4b5d      	ldr	r3, [pc, #372]	; (8019af0 <HAL_GPIO_Init+0x300>)
 801997c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801997e:	4a5c      	ldr	r2, [pc, #368]	; (8019af0 <HAL_GPIO_Init+0x300>)
 8019980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8019984:	6453      	str	r3, [r2, #68]	; 0x44
 8019986:	4b5a      	ldr	r3, [pc, #360]	; (8019af0 <HAL_GPIO_Init+0x300>)
 8019988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801998a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801998e:	60fb      	str	r3, [r7, #12]
 8019990:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8019992:	4a58      	ldr	r2, [pc, #352]	; (8019af4 <HAL_GPIO_Init+0x304>)
 8019994:	69fb      	ldr	r3, [r7, #28]
 8019996:	089b      	lsrs	r3, r3, #2
 8019998:	3302      	adds	r3, #2
 801999a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801999e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80199a0:	69fb      	ldr	r3, [r7, #28]
 80199a2:	f003 0303 	and.w	r3, r3, #3
 80199a6:	009b      	lsls	r3, r3, #2
 80199a8:	220f      	movs	r2, #15
 80199aa:	fa02 f303 	lsl.w	r3, r2, r3
 80199ae:	43db      	mvns	r3, r3
 80199b0:	69ba      	ldr	r2, [r7, #24]
 80199b2:	4013      	ands	r3, r2
 80199b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80199b6:	687b      	ldr	r3, [r7, #4]
 80199b8:	4a4f      	ldr	r2, [pc, #316]	; (8019af8 <HAL_GPIO_Init+0x308>)
 80199ba:	4293      	cmp	r3, r2
 80199bc:	d025      	beq.n	8019a0a <HAL_GPIO_Init+0x21a>
 80199be:	687b      	ldr	r3, [r7, #4]
 80199c0:	4a4e      	ldr	r2, [pc, #312]	; (8019afc <HAL_GPIO_Init+0x30c>)
 80199c2:	4293      	cmp	r3, r2
 80199c4:	d01f      	beq.n	8019a06 <HAL_GPIO_Init+0x216>
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	4a4d      	ldr	r2, [pc, #308]	; (8019b00 <HAL_GPIO_Init+0x310>)
 80199ca:	4293      	cmp	r3, r2
 80199cc:	d019      	beq.n	8019a02 <HAL_GPIO_Init+0x212>
 80199ce:	687b      	ldr	r3, [r7, #4]
 80199d0:	4a4c      	ldr	r2, [pc, #304]	; (8019b04 <HAL_GPIO_Init+0x314>)
 80199d2:	4293      	cmp	r3, r2
 80199d4:	d013      	beq.n	80199fe <HAL_GPIO_Init+0x20e>
 80199d6:	687b      	ldr	r3, [r7, #4]
 80199d8:	4a4b      	ldr	r2, [pc, #300]	; (8019b08 <HAL_GPIO_Init+0x318>)
 80199da:	4293      	cmp	r3, r2
 80199dc:	d00d      	beq.n	80199fa <HAL_GPIO_Init+0x20a>
 80199de:	687b      	ldr	r3, [r7, #4]
 80199e0:	4a4a      	ldr	r2, [pc, #296]	; (8019b0c <HAL_GPIO_Init+0x31c>)
 80199e2:	4293      	cmp	r3, r2
 80199e4:	d007      	beq.n	80199f6 <HAL_GPIO_Init+0x206>
 80199e6:	687b      	ldr	r3, [r7, #4]
 80199e8:	4a49      	ldr	r2, [pc, #292]	; (8019b10 <HAL_GPIO_Init+0x320>)
 80199ea:	4293      	cmp	r3, r2
 80199ec:	d101      	bne.n	80199f2 <HAL_GPIO_Init+0x202>
 80199ee:	2306      	movs	r3, #6
 80199f0:	e00c      	b.n	8019a0c <HAL_GPIO_Init+0x21c>
 80199f2:	2307      	movs	r3, #7
 80199f4:	e00a      	b.n	8019a0c <HAL_GPIO_Init+0x21c>
 80199f6:	2305      	movs	r3, #5
 80199f8:	e008      	b.n	8019a0c <HAL_GPIO_Init+0x21c>
 80199fa:	2304      	movs	r3, #4
 80199fc:	e006      	b.n	8019a0c <HAL_GPIO_Init+0x21c>
 80199fe:	2303      	movs	r3, #3
 8019a00:	e004      	b.n	8019a0c <HAL_GPIO_Init+0x21c>
 8019a02:	2302      	movs	r3, #2
 8019a04:	e002      	b.n	8019a0c <HAL_GPIO_Init+0x21c>
 8019a06:	2301      	movs	r3, #1
 8019a08:	e000      	b.n	8019a0c <HAL_GPIO_Init+0x21c>
 8019a0a:	2300      	movs	r3, #0
 8019a0c:	69fa      	ldr	r2, [r7, #28]
 8019a0e:	f002 0203 	and.w	r2, r2, #3
 8019a12:	0092      	lsls	r2, r2, #2
 8019a14:	4093      	lsls	r3, r2
 8019a16:	69ba      	ldr	r2, [r7, #24]
 8019a18:	4313      	orrs	r3, r2
 8019a1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8019a1c:	4935      	ldr	r1, [pc, #212]	; (8019af4 <HAL_GPIO_Init+0x304>)
 8019a1e:	69fb      	ldr	r3, [r7, #28]
 8019a20:	089b      	lsrs	r3, r3, #2
 8019a22:	3302      	adds	r3, #2
 8019a24:	69ba      	ldr	r2, [r7, #24]
 8019a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8019a2a:	4b3a      	ldr	r3, [pc, #232]	; (8019b14 <HAL_GPIO_Init+0x324>)
 8019a2c:	681b      	ldr	r3, [r3, #0]
 8019a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019a30:	693b      	ldr	r3, [r7, #16]
 8019a32:	43db      	mvns	r3, r3
 8019a34:	69ba      	ldr	r2, [r7, #24]
 8019a36:	4013      	ands	r3, r2
 8019a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8019a3a:	683b      	ldr	r3, [r7, #0]
 8019a3c:	685b      	ldr	r3, [r3, #4]
 8019a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019a42:	2b00      	cmp	r3, #0
 8019a44:	d003      	beq.n	8019a4e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8019a46:	69ba      	ldr	r2, [r7, #24]
 8019a48:	693b      	ldr	r3, [r7, #16]
 8019a4a:	4313      	orrs	r3, r2
 8019a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8019a4e:	4a31      	ldr	r2, [pc, #196]	; (8019b14 <HAL_GPIO_Init+0x324>)
 8019a50:	69bb      	ldr	r3, [r7, #24]
 8019a52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8019a54:	4b2f      	ldr	r3, [pc, #188]	; (8019b14 <HAL_GPIO_Init+0x324>)
 8019a56:	685b      	ldr	r3, [r3, #4]
 8019a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019a5a:	693b      	ldr	r3, [r7, #16]
 8019a5c:	43db      	mvns	r3, r3
 8019a5e:	69ba      	ldr	r2, [r7, #24]
 8019a60:	4013      	ands	r3, r2
 8019a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8019a64:	683b      	ldr	r3, [r7, #0]
 8019a66:	685b      	ldr	r3, [r3, #4]
 8019a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019a6c:	2b00      	cmp	r3, #0
 8019a6e:	d003      	beq.n	8019a78 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8019a70:	69ba      	ldr	r2, [r7, #24]
 8019a72:	693b      	ldr	r3, [r7, #16]
 8019a74:	4313      	orrs	r3, r2
 8019a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8019a78:	4a26      	ldr	r2, [pc, #152]	; (8019b14 <HAL_GPIO_Init+0x324>)
 8019a7a:	69bb      	ldr	r3, [r7, #24]
 8019a7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8019a7e:	4b25      	ldr	r3, [pc, #148]	; (8019b14 <HAL_GPIO_Init+0x324>)
 8019a80:	689b      	ldr	r3, [r3, #8]
 8019a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019a84:	693b      	ldr	r3, [r7, #16]
 8019a86:	43db      	mvns	r3, r3
 8019a88:	69ba      	ldr	r2, [r7, #24]
 8019a8a:	4013      	ands	r3, r2
 8019a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8019a8e:	683b      	ldr	r3, [r7, #0]
 8019a90:	685b      	ldr	r3, [r3, #4]
 8019a92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8019a96:	2b00      	cmp	r3, #0
 8019a98:	d003      	beq.n	8019aa2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8019a9a:	69ba      	ldr	r2, [r7, #24]
 8019a9c:	693b      	ldr	r3, [r7, #16]
 8019a9e:	4313      	orrs	r3, r2
 8019aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8019aa2:	4a1c      	ldr	r2, [pc, #112]	; (8019b14 <HAL_GPIO_Init+0x324>)
 8019aa4:	69bb      	ldr	r3, [r7, #24]
 8019aa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8019aa8:	4b1a      	ldr	r3, [pc, #104]	; (8019b14 <HAL_GPIO_Init+0x324>)
 8019aaa:	68db      	ldr	r3, [r3, #12]
 8019aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019aae:	693b      	ldr	r3, [r7, #16]
 8019ab0:	43db      	mvns	r3, r3
 8019ab2:	69ba      	ldr	r2, [r7, #24]
 8019ab4:	4013      	ands	r3, r2
 8019ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8019ab8:	683b      	ldr	r3, [r7, #0]
 8019aba:	685b      	ldr	r3, [r3, #4]
 8019abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8019ac0:	2b00      	cmp	r3, #0
 8019ac2:	d003      	beq.n	8019acc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8019ac4:	69ba      	ldr	r2, [r7, #24]
 8019ac6:	693b      	ldr	r3, [r7, #16]
 8019ac8:	4313      	orrs	r3, r2
 8019aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8019acc:	4a11      	ldr	r2, [pc, #68]	; (8019b14 <HAL_GPIO_Init+0x324>)
 8019ace:	69bb      	ldr	r3, [r7, #24]
 8019ad0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8019ad2:	69fb      	ldr	r3, [r7, #28]
 8019ad4:	3301      	adds	r3, #1
 8019ad6:	61fb      	str	r3, [r7, #28]
 8019ad8:	69fb      	ldr	r3, [r7, #28]
 8019ada:	2b0f      	cmp	r3, #15
 8019adc:	f67f ae96 	bls.w	801980c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8019ae0:	bf00      	nop
 8019ae2:	bf00      	nop
 8019ae4:	3724      	adds	r7, #36	; 0x24
 8019ae6:	46bd      	mov	sp, r7
 8019ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019aec:	4770      	bx	lr
 8019aee:	bf00      	nop
 8019af0:	40023800 	.word	0x40023800
 8019af4:	40013800 	.word	0x40013800
 8019af8:	40020000 	.word	0x40020000
 8019afc:	40020400 	.word	0x40020400
 8019b00:	40020800 	.word	0x40020800
 8019b04:	40020c00 	.word	0x40020c00
 8019b08:	40021000 	.word	0x40021000
 8019b0c:	40021400 	.word	0x40021400
 8019b10:	40021800 	.word	0x40021800
 8019b14:	40013c00 	.word	0x40013c00

08019b18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8019b18:	b480      	push	{r7}
 8019b1a:	b085      	sub	sp, #20
 8019b1c:	af00      	add	r7, sp, #0
 8019b1e:	6078      	str	r0, [r7, #4]
 8019b20:	460b      	mov	r3, r1
 8019b22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8019b24:	687b      	ldr	r3, [r7, #4]
 8019b26:	691a      	ldr	r2, [r3, #16]
 8019b28:	887b      	ldrh	r3, [r7, #2]
 8019b2a:	4013      	ands	r3, r2
 8019b2c:	2b00      	cmp	r3, #0
 8019b2e:	d002      	beq.n	8019b36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8019b30:	2301      	movs	r3, #1
 8019b32:	73fb      	strb	r3, [r7, #15]
 8019b34:	e001      	b.n	8019b3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8019b36:	2300      	movs	r3, #0
 8019b38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8019b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8019b3c:	4618      	mov	r0, r3
 8019b3e:	3714      	adds	r7, #20
 8019b40:	46bd      	mov	sp, r7
 8019b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b46:	4770      	bx	lr

08019b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8019b48:	b480      	push	{r7}
 8019b4a:	b083      	sub	sp, #12
 8019b4c:	af00      	add	r7, sp, #0
 8019b4e:	6078      	str	r0, [r7, #4]
 8019b50:	460b      	mov	r3, r1
 8019b52:	807b      	strh	r3, [r7, #2]
 8019b54:	4613      	mov	r3, r2
 8019b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8019b58:	787b      	ldrb	r3, [r7, #1]
 8019b5a:	2b00      	cmp	r3, #0
 8019b5c:	d003      	beq.n	8019b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8019b5e:	887a      	ldrh	r2, [r7, #2]
 8019b60:	687b      	ldr	r3, [r7, #4]
 8019b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8019b64:	e003      	b.n	8019b6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8019b66:	887b      	ldrh	r3, [r7, #2]
 8019b68:	041a      	lsls	r2, r3, #16
 8019b6a:	687b      	ldr	r3, [r7, #4]
 8019b6c:	619a      	str	r2, [r3, #24]
}
 8019b6e:	bf00      	nop
 8019b70:	370c      	adds	r7, #12
 8019b72:	46bd      	mov	sp, r7
 8019b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b78:	4770      	bx	lr

08019b7a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8019b7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b7c:	b08f      	sub	sp, #60	; 0x3c
 8019b7e:	af0a      	add	r7, sp, #40	; 0x28
 8019b80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8019b82:	687b      	ldr	r3, [r7, #4]
 8019b84:	2b00      	cmp	r3, #0
 8019b86:	d101      	bne.n	8019b8c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8019b88:	2301      	movs	r3, #1
 8019b8a:	e116      	b.n	8019dba <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8019b8c:	687b      	ldr	r3, [r7, #4]
 8019b8e:	681b      	ldr	r3, [r3, #0]
 8019b90:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8019b92:	687b      	ldr	r3, [r7, #4]
 8019b94:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8019b98:	b2db      	uxtb	r3, r3
 8019b9a:	2b00      	cmp	r3, #0
 8019b9c:	d106      	bne.n	8019bac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8019b9e:	687b      	ldr	r3, [r7, #4]
 8019ba0:	2200      	movs	r2, #0
 8019ba2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8019ba6:	6878      	ldr	r0, [r7, #4]
 8019ba8:	f008 fc38 	bl	802241c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8019bac:	687b      	ldr	r3, [r7, #4]
 8019bae:	2203      	movs	r2, #3
 8019bb0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8019bb4:	68bb      	ldr	r3, [r7, #8]
 8019bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019bbc:	2b00      	cmp	r3, #0
 8019bbe:	d102      	bne.n	8019bc6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8019bc0:	687b      	ldr	r3, [r7, #4]
 8019bc2:	2200      	movs	r2, #0
 8019bc4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8019bc6:	687b      	ldr	r3, [r7, #4]
 8019bc8:	681b      	ldr	r3, [r3, #0]
 8019bca:	4618      	mov	r0, r3
 8019bcc:	f004 f8af 	bl	801dd2e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8019bd0:	687b      	ldr	r3, [r7, #4]
 8019bd2:	681b      	ldr	r3, [r3, #0]
 8019bd4:	603b      	str	r3, [r7, #0]
 8019bd6:	687e      	ldr	r6, [r7, #4]
 8019bd8:	466d      	mov	r5, sp
 8019bda:	f106 0410 	add.w	r4, r6, #16
 8019bde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019be0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019be2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019be4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019be6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8019bea:	e885 0003 	stmia.w	r5, {r0, r1}
 8019bee:	1d33      	adds	r3, r6, #4
 8019bf0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019bf2:	6838      	ldr	r0, [r7, #0]
 8019bf4:	f003 ff86 	bl	801db04 <USB_CoreInit>
 8019bf8:	4603      	mov	r3, r0
 8019bfa:	2b00      	cmp	r3, #0
 8019bfc:	d005      	beq.n	8019c0a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8019bfe:	687b      	ldr	r3, [r7, #4]
 8019c00:	2202      	movs	r2, #2
 8019c02:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8019c06:	2301      	movs	r3, #1
 8019c08:	e0d7      	b.n	8019dba <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8019c0a:	687b      	ldr	r3, [r7, #4]
 8019c0c:	681b      	ldr	r3, [r3, #0]
 8019c0e:	2100      	movs	r1, #0
 8019c10:	4618      	mov	r0, r3
 8019c12:	f004 f89d 	bl	801dd50 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019c16:	2300      	movs	r3, #0
 8019c18:	73fb      	strb	r3, [r7, #15]
 8019c1a:	e04a      	b.n	8019cb2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8019c1c:	7bfa      	ldrb	r2, [r7, #15]
 8019c1e:	6879      	ldr	r1, [r7, #4]
 8019c20:	4613      	mov	r3, r2
 8019c22:	00db      	lsls	r3, r3, #3
 8019c24:	1a9b      	subs	r3, r3, r2
 8019c26:	009b      	lsls	r3, r3, #2
 8019c28:	440b      	add	r3, r1
 8019c2a:	333d      	adds	r3, #61	; 0x3d
 8019c2c:	2201      	movs	r2, #1
 8019c2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8019c30:	7bfa      	ldrb	r2, [r7, #15]
 8019c32:	6879      	ldr	r1, [r7, #4]
 8019c34:	4613      	mov	r3, r2
 8019c36:	00db      	lsls	r3, r3, #3
 8019c38:	1a9b      	subs	r3, r3, r2
 8019c3a:	009b      	lsls	r3, r3, #2
 8019c3c:	440b      	add	r3, r1
 8019c3e:	333c      	adds	r3, #60	; 0x3c
 8019c40:	7bfa      	ldrb	r2, [r7, #15]
 8019c42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8019c44:	7bfa      	ldrb	r2, [r7, #15]
 8019c46:	7bfb      	ldrb	r3, [r7, #15]
 8019c48:	b298      	uxth	r0, r3
 8019c4a:	6879      	ldr	r1, [r7, #4]
 8019c4c:	4613      	mov	r3, r2
 8019c4e:	00db      	lsls	r3, r3, #3
 8019c50:	1a9b      	subs	r3, r3, r2
 8019c52:	009b      	lsls	r3, r3, #2
 8019c54:	440b      	add	r3, r1
 8019c56:	3342      	adds	r3, #66	; 0x42
 8019c58:	4602      	mov	r2, r0
 8019c5a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8019c5c:	7bfa      	ldrb	r2, [r7, #15]
 8019c5e:	6879      	ldr	r1, [r7, #4]
 8019c60:	4613      	mov	r3, r2
 8019c62:	00db      	lsls	r3, r3, #3
 8019c64:	1a9b      	subs	r3, r3, r2
 8019c66:	009b      	lsls	r3, r3, #2
 8019c68:	440b      	add	r3, r1
 8019c6a:	333f      	adds	r3, #63	; 0x3f
 8019c6c:	2200      	movs	r2, #0
 8019c6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8019c70:	7bfa      	ldrb	r2, [r7, #15]
 8019c72:	6879      	ldr	r1, [r7, #4]
 8019c74:	4613      	mov	r3, r2
 8019c76:	00db      	lsls	r3, r3, #3
 8019c78:	1a9b      	subs	r3, r3, r2
 8019c7a:	009b      	lsls	r3, r3, #2
 8019c7c:	440b      	add	r3, r1
 8019c7e:	3344      	adds	r3, #68	; 0x44
 8019c80:	2200      	movs	r2, #0
 8019c82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8019c84:	7bfa      	ldrb	r2, [r7, #15]
 8019c86:	6879      	ldr	r1, [r7, #4]
 8019c88:	4613      	mov	r3, r2
 8019c8a:	00db      	lsls	r3, r3, #3
 8019c8c:	1a9b      	subs	r3, r3, r2
 8019c8e:	009b      	lsls	r3, r3, #2
 8019c90:	440b      	add	r3, r1
 8019c92:	3348      	adds	r3, #72	; 0x48
 8019c94:	2200      	movs	r2, #0
 8019c96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8019c98:	7bfa      	ldrb	r2, [r7, #15]
 8019c9a:	6879      	ldr	r1, [r7, #4]
 8019c9c:	4613      	mov	r3, r2
 8019c9e:	00db      	lsls	r3, r3, #3
 8019ca0:	1a9b      	subs	r3, r3, r2
 8019ca2:	009b      	lsls	r3, r3, #2
 8019ca4:	440b      	add	r3, r1
 8019ca6:	3350      	adds	r3, #80	; 0x50
 8019ca8:	2200      	movs	r2, #0
 8019caa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019cac:	7bfb      	ldrb	r3, [r7, #15]
 8019cae:	3301      	adds	r3, #1
 8019cb0:	73fb      	strb	r3, [r7, #15]
 8019cb2:	7bfa      	ldrb	r2, [r7, #15]
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	685b      	ldr	r3, [r3, #4]
 8019cb8:	429a      	cmp	r2, r3
 8019cba:	d3af      	bcc.n	8019c1c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019cbc:	2300      	movs	r3, #0
 8019cbe:	73fb      	strb	r3, [r7, #15]
 8019cc0:	e044      	b.n	8019d4c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8019cc2:	7bfa      	ldrb	r2, [r7, #15]
 8019cc4:	6879      	ldr	r1, [r7, #4]
 8019cc6:	4613      	mov	r3, r2
 8019cc8:	00db      	lsls	r3, r3, #3
 8019cca:	1a9b      	subs	r3, r3, r2
 8019ccc:	009b      	lsls	r3, r3, #2
 8019cce:	440b      	add	r3, r1
 8019cd0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8019cd4:	2200      	movs	r2, #0
 8019cd6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8019cd8:	7bfa      	ldrb	r2, [r7, #15]
 8019cda:	6879      	ldr	r1, [r7, #4]
 8019cdc:	4613      	mov	r3, r2
 8019cde:	00db      	lsls	r3, r3, #3
 8019ce0:	1a9b      	subs	r3, r3, r2
 8019ce2:	009b      	lsls	r3, r3, #2
 8019ce4:	440b      	add	r3, r1
 8019ce6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8019cea:	7bfa      	ldrb	r2, [r7, #15]
 8019cec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8019cee:	7bfa      	ldrb	r2, [r7, #15]
 8019cf0:	6879      	ldr	r1, [r7, #4]
 8019cf2:	4613      	mov	r3, r2
 8019cf4:	00db      	lsls	r3, r3, #3
 8019cf6:	1a9b      	subs	r3, r3, r2
 8019cf8:	009b      	lsls	r3, r3, #2
 8019cfa:	440b      	add	r3, r1
 8019cfc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8019d00:	2200      	movs	r2, #0
 8019d02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8019d04:	7bfa      	ldrb	r2, [r7, #15]
 8019d06:	6879      	ldr	r1, [r7, #4]
 8019d08:	4613      	mov	r3, r2
 8019d0a:	00db      	lsls	r3, r3, #3
 8019d0c:	1a9b      	subs	r3, r3, r2
 8019d0e:	009b      	lsls	r3, r3, #2
 8019d10:	440b      	add	r3, r1
 8019d12:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8019d16:	2200      	movs	r2, #0
 8019d18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8019d1a:	7bfa      	ldrb	r2, [r7, #15]
 8019d1c:	6879      	ldr	r1, [r7, #4]
 8019d1e:	4613      	mov	r3, r2
 8019d20:	00db      	lsls	r3, r3, #3
 8019d22:	1a9b      	subs	r3, r3, r2
 8019d24:	009b      	lsls	r3, r3, #2
 8019d26:	440b      	add	r3, r1
 8019d28:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019d2c:	2200      	movs	r2, #0
 8019d2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8019d30:	7bfa      	ldrb	r2, [r7, #15]
 8019d32:	6879      	ldr	r1, [r7, #4]
 8019d34:	4613      	mov	r3, r2
 8019d36:	00db      	lsls	r3, r3, #3
 8019d38:	1a9b      	subs	r3, r3, r2
 8019d3a:	009b      	lsls	r3, r3, #2
 8019d3c:	440b      	add	r3, r1
 8019d3e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8019d42:	2200      	movs	r2, #0
 8019d44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019d46:	7bfb      	ldrb	r3, [r7, #15]
 8019d48:	3301      	adds	r3, #1
 8019d4a:	73fb      	strb	r3, [r7, #15]
 8019d4c:	7bfa      	ldrb	r2, [r7, #15]
 8019d4e:	687b      	ldr	r3, [r7, #4]
 8019d50:	685b      	ldr	r3, [r3, #4]
 8019d52:	429a      	cmp	r2, r3
 8019d54:	d3b5      	bcc.n	8019cc2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8019d56:	687b      	ldr	r3, [r7, #4]
 8019d58:	681b      	ldr	r3, [r3, #0]
 8019d5a:	603b      	str	r3, [r7, #0]
 8019d5c:	687e      	ldr	r6, [r7, #4]
 8019d5e:	466d      	mov	r5, sp
 8019d60:	f106 0410 	add.w	r4, r6, #16
 8019d64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019d66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019d68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019d6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019d6c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8019d70:	e885 0003 	stmia.w	r5, {r0, r1}
 8019d74:	1d33      	adds	r3, r6, #4
 8019d76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019d78:	6838      	ldr	r0, [r7, #0]
 8019d7a:	f004 f835 	bl	801dde8 <USB_DevInit>
 8019d7e:	4603      	mov	r3, r0
 8019d80:	2b00      	cmp	r3, #0
 8019d82:	d005      	beq.n	8019d90 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8019d84:	687b      	ldr	r3, [r7, #4]
 8019d86:	2202      	movs	r2, #2
 8019d88:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8019d8c:	2301      	movs	r3, #1
 8019d8e:	e014      	b.n	8019dba <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8019d90:	687b      	ldr	r3, [r7, #4]
 8019d92:	2200      	movs	r2, #0
 8019d94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8019d98:	687b      	ldr	r3, [r7, #4]
 8019d9a:	2201      	movs	r2, #1
 8019d9c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8019da0:	687b      	ldr	r3, [r7, #4]
 8019da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019da4:	2b01      	cmp	r3, #1
 8019da6:	d102      	bne.n	8019dae <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8019da8:	6878      	ldr	r0, [r7, #4]
 8019daa:	f001 f8bf 	bl	801af2c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	681b      	ldr	r3, [r3, #0]
 8019db2:	4618      	mov	r0, r3
 8019db4:	f005 f8a4 	bl	801ef00 <USB_DevDisconnect>

  return HAL_OK;
 8019db8:	2300      	movs	r3, #0
}
 8019dba:	4618      	mov	r0, r3
 8019dbc:	3714      	adds	r7, #20
 8019dbe:	46bd      	mov	sp, r7
 8019dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019dc2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8019dc2:	b580      	push	{r7, lr}
 8019dc4:	b084      	sub	sp, #16
 8019dc6:	af00      	add	r7, sp, #0
 8019dc8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8019dca:	687b      	ldr	r3, [r7, #4]
 8019dcc:	681b      	ldr	r3, [r3, #0]
 8019dce:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8019dd6:	2b01      	cmp	r3, #1
 8019dd8:	d101      	bne.n	8019dde <HAL_PCD_Start+0x1c>
 8019dda:	2302      	movs	r3, #2
 8019ddc:	e020      	b.n	8019e20 <HAL_PCD_Start+0x5e>
 8019dde:	687b      	ldr	r3, [r7, #4]
 8019de0:	2201      	movs	r2, #1
 8019de2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8019de6:	687b      	ldr	r3, [r7, #4]
 8019de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019dea:	2b01      	cmp	r3, #1
 8019dec:	d109      	bne.n	8019e02 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8019df2:	2b01      	cmp	r3, #1
 8019df4:	d005      	beq.n	8019e02 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8019df6:	68fb      	ldr	r3, [r7, #12]
 8019df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019dfa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8019dfe:	68fb      	ldr	r3, [r7, #12]
 8019e00:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8019e02:	687b      	ldr	r3, [r7, #4]
 8019e04:	681b      	ldr	r3, [r3, #0]
 8019e06:	4618      	mov	r0, r3
 8019e08:	f003 ff80 	bl	801dd0c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8019e0c:	687b      	ldr	r3, [r7, #4]
 8019e0e:	681b      	ldr	r3, [r3, #0]
 8019e10:	4618      	mov	r0, r3
 8019e12:	f005 f854 	bl	801eebe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8019e16:	687b      	ldr	r3, [r7, #4]
 8019e18:	2200      	movs	r2, #0
 8019e1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8019e1e:	2300      	movs	r3, #0
}
 8019e20:	4618      	mov	r0, r3
 8019e22:	3710      	adds	r7, #16
 8019e24:	46bd      	mov	sp, r7
 8019e26:	bd80      	pop	{r7, pc}

08019e28 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8019e28:	b590      	push	{r4, r7, lr}
 8019e2a:	b08d      	sub	sp, #52	; 0x34
 8019e2c:	af00      	add	r7, sp, #0
 8019e2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8019e30:	687b      	ldr	r3, [r7, #4]
 8019e32:	681b      	ldr	r3, [r3, #0]
 8019e34:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019e36:	6a3b      	ldr	r3, [r7, #32]
 8019e38:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8019e3a:	687b      	ldr	r3, [r7, #4]
 8019e3c:	681b      	ldr	r3, [r3, #0]
 8019e3e:	4618      	mov	r0, r3
 8019e40:	f005 f912 	bl	801f068 <USB_GetMode>
 8019e44:	4603      	mov	r3, r0
 8019e46:	2b00      	cmp	r3, #0
 8019e48:	f040 83ca 	bne.w	801a5e0 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8019e4c:	687b      	ldr	r3, [r7, #4]
 8019e4e:	681b      	ldr	r3, [r3, #0]
 8019e50:	4618      	mov	r0, r3
 8019e52:	f005 f876 	bl	801ef42 <USB_ReadInterrupts>
 8019e56:	4603      	mov	r3, r0
 8019e58:	2b00      	cmp	r3, #0
 8019e5a:	f000 83c0 	beq.w	801a5de <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8019e5e:	687b      	ldr	r3, [r7, #4]
 8019e60:	681b      	ldr	r3, [r3, #0]
 8019e62:	4618      	mov	r0, r3
 8019e64:	f005 f86d 	bl	801ef42 <USB_ReadInterrupts>
 8019e68:	4603      	mov	r3, r0
 8019e6a:	f003 0302 	and.w	r3, r3, #2
 8019e6e:	2b02      	cmp	r3, #2
 8019e70:	d107      	bne.n	8019e82 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8019e72:	687b      	ldr	r3, [r7, #4]
 8019e74:	681b      	ldr	r3, [r3, #0]
 8019e76:	695a      	ldr	r2, [r3, #20]
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	681b      	ldr	r3, [r3, #0]
 8019e7c:	f002 0202 	and.w	r2, r2, #2
 8019e80:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8019e82:	687b      	ldr	r3, [r7, #4]
 8019e84:	681b      	ldr	r3, [r3, #0]
 8019e86:	4618      	mov	r0, r3
 8019e88:	f005 f85b 	bl	801ef42 <USB_ReadInterrupts>
 8019e8c:	4603      	mov	r3, r0
 8019e8e:	f003 0310 	and.w	r3, r3, #16
 8019e92:	2b10      	cmp	r3, #16
 8019e94:	d161      	bne.n	8019f5a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8019e96:	687b      	ldr	r3, [r7, #4]
 8019e98:	681b      	ldr	r3, [r3, #0]
 8019e9a:	699a      	ldr	r2, [r3, #24]
 8019e9c:	687b      	ldr	r3, [r7, #4]
 8019e9e:	681b      	ldr	r3, [r3, #0]
 8019ea0:	f022 0210 	bic.w	r2, r2, #16
 8019ea4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8019ea6:	6a3b      	ldr	r3, [r7, #32]
 8019ea8:	6a1b      	ldr	r3, [r3, #32]
 8019eaa:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8019eac:	69bb      	ldr	r3, [r7, #24]
 8019eae:	f003 020f 	and.w	r2, r3, #15
 8019eb2:	4613      	mov	r3, r2
 8019eb4:	00db      	lsls	r3, r3, #3
 8019eb6:	1a9b      	subs	r3, r3, r2
 8019eb8:	009b      	lsls	r3, r3, #2
 8019eba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8019ebe:	687a      	ldr	r2, [r7, #4]
 8019ec0:	4413      	add	r3, r2
 8019ec2:	3304      	adds	r3, #4
 8019ec4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8019ec6:	69bb      	ldr	r3, [r7, #24]
 8019ec8:	0c5b      	lsrs	r3, r3, #17
 8019eca:	f003 030f 	and.w	r3, r3, #15
 8019ece:	2b02      	cmp	r3, #2
 8019ed0:	d124      	bne.n	8019f1c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8019ed2:	69ba      	ldr	r2, [r7, #24]
 8019ed4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8019ed8:	4013      	ands	r3, r2
 8019eda:	2b00      	cmp	r3, #0
 8019edc:	d035      	beq.n	8019f4a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8019ede:	697b      	ldr	r3, [r7, #20]
 8019ee0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8019ee2:	69bb      	ldr	r3, [r7, #24]
 8019ee4:	091b      	lsrs	r3, r3, #4
 8019ee6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8019ee8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019eec:	b29b      	uxth	r3, r3
 8019eee:	461a      	mov	r2, r3
 8019ef0:	6a38      	ldr	r0, [r7, #32]
 8019ef2:	f004 fe92 	bl	801ec1a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8019ef6:	697b      	ldr	r3, [r7, #20]
 8019ef8:	68da      	ldr	r2, [r3, #12]
 8019efa:	69bb      	ldr	r3, [r7, #24]
 8019efc:	091b      	lsrs	r3, r3, #4
 8019efe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019f02:	441a      	add	r2, r3
 8019f04:	697b      	ldr	r3, [r7, #20]
 8019f06:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8019f08:	697b      	ldr	r3, [r7, #20]
 8019f0a:	699a      	ldr	r2, [r3, #24]
 8019f0c:	69bb      	ldr	r3, [r7, #24]
 8019f0e:	091b      	lsrs	r3, r3, #4
 8019f10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019f14:	441a      	add	r2, r3
 8019f16:	697b      	ldr	r3, [r7, #20]
 8019f18:	619a      	str	r2, [r3, #24]
 8019f1a:	e016      	b.n	8019f4a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8019f1c:	69bb      	ldr	r3, [r7, #24]
 8019f1e:	0c5b      	lsrs	r3, r3, #17
 8019f20:	f003 030f 	and.w	r3, r3, #15
 8019f24:	2b06      	cmp	r3, #6
 8019f26:	d110      	bne.n	8019f4a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8019f28:	687b      	ldr	r3, [r7, #4]
 8019f2a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8019f2e:	2208      	movs	r2, #8
 8019f30:	4619      	mov	r1, r3
 8019f32:	6a38      	ldr	r0, [r7, #32]
 8019f34:	f004 fe71 	bl	801ec1a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8019f38:	697b      	ldr	r3, [r7, #20]
 8019f3a:	699a      	ldr	r2, [r3, #24]
 8019f3c:	69bb      	ldr	r3, [r7, #24]
 8019f3e:	091b      	lsrs	r3, r3, #4
 8019f40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019f44:	441a      	add	r2, r3
 8019f46:	697b      	ldr	r3, [r7, #20]
 8019f48:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8019f4a:	687b      	ldr	r3, [r7, #4]
 8019f4c:	681b      	ldr	r3, [r3, #0]
 8019f4e:	699a      	ldr	r2, [r3, #24]
 8019f50:	687b      	ldr	r3, [r7, #4]
 8019f52:	681b      	ldr	r3, [r3, #0]
 8019f54:	f042 0210 	orr.w	r2, r2, #16
 8019f58:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8019f5a:	687b      	ldr	r3, [r7, #4]
 8019f5c:	681b      	ldr	r3, [r3, #0]
 8019f5e:	4618      	mov	r0, r3
 8019f60:	f004 ffef 	bl	801ef42 <USB_ReadInterrupts>
 8019f64:	4603      	mov	r3, r0
 8019f66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8019f6a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8019f6e:	d16e      	bne.n	801a04e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8019f70:	2300      	movs	r3, #0
 8019f72:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8019f74:	687b      	ldr	r3, [r7, #4]
 8019f76:	681b      	ldr	r3, [r3, #0]
 8019f78:	4618      	mov	r0, r3
 8019f7a:	f004 fff5 	bl	801ef68 <USB_ReadDevAllOutEpInterrupt>
 8019f7e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8019f80:	e062      	b.n	801a048 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8019f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f84:	f003 0301 	and.w	r3, r3, #1
 8019f88:	2b00      	cmp	r3, #0
 8019f8a:	d057      	beq.n	801a03c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8019f8c:	687b      	ldr	r3, [r7, #4]
 8019f8e:	681b      	ldr	r3, [r3, #0]
 8019f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f92:	b2d2      	uxtb	r2, r2
 8019f94:	4611      	mov	r1, r2
 8019f96:	4618      	mov	r0, r3
 8019f98:	f005 f81a 	bl	801efd0 <USB_ReadDevOutEPInterrupt>
 8019f9c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8019f9e:	693b      	ldr	r3, [r7, #16]
 8019fa0:	f003 0301 	and.w	r3, r3, #1
 8019fa4:	2b00      	cmp	r3, #0
 8019fa6:	d00c      	beq.n	8019fc2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8019fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019faa:	015a      	lsls	r2, r3, #5
 8019fac:	69fb      	ldr	r3, [r7, #28]
 8019fae:	4413      	add	r3, r2
 8019fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019fb4:	461a      	mov	r2, r3
 8019fb6:	2301      	movs	r3, #1
 8019fb8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8019fba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019fbc:	6878      	ldr	r0, [r7, #4]
 8019fbe:	f000 fe0b 	bl	801abd8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8019fc2:	693b      	ldr	r3, [r7, #16]
 8019fc4:	f003 0308 	and.w	r3, r3, #8
 8019fc8:	2b00      	cmp	r3, #0
 8019fca:	d00c      	beq.n	8019fe6 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8019fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fce:	015a      	lsls	r2, r3, #5
 8019fd0:	69fb      	ldr	r3, [r7, #28]
 8019fd2:	4413      	add	r3, r2
 8019fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019fd8:	461a      	mov	r2, r3
 8019fda:	2308      	movs	r3, #8
 8019fdc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8019fde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019fe0:	6878      	ldr	r0, [r7, #4]
 8019fe2:	f000 ff05 	bl	801adf0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8019fe6:	693b      	ldr	r3, [r7, #16]
 8019fe8:	f003 0310 	and.w	r3, r3, #16
 8019fec:	2b00      	cmp	r3, #0
 8019fee:	d008      	beq.n	801a002 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8019ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ff2:	015a      	lsls	r2, r3, #5
 8019ff4:	69fb      	ldr	r3, [r7, #28]
 8019ff6:	4413      	add	r3, r2
 8019ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019ffc:	461a      	mov	r2, r3
 8019ffe:	2310      	movs	r3, #16
 801a000:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 801a002:	693b      	ldr	r3, [r7, #16]
 801a004:	f003 0320 	and.w	r3, r3, #32
 801a008:	2b00      	cmp	r3, #0
 801a00a:	d008      	beq.n	801a01e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801a00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a00e:	015a      	lsls	r2, r3, #5
 801a010:	69fb      	ldr	r3, [r7, #28]
 801a012:	4413      	add	r3, r2
 801a014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a018:	461a      	mov	r2, r3
 801a01a:	2320      	movs	r3, #32
 801a01c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 801a01e:	693b      	ldr	r3, [r7, #16]
 801a020:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a024:	2b00      	cmp	r3, #0
 801a026:	d009      	beq.n	801a03c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 801a028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a02a:	015a      	lsls	r2, r3, #5
 801a02c:	69fb      	ldr	r3, [r7, #28]
 801a02e:	4413      	add	r3, r2
 801a030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a034:	461a      	mov	r2, r3
 801a036:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801a03a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 801a03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a03e:	3301      	adds	r3, #1
 801a040:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 801a042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a044:	085b      	lsrs	r3, r3, #1
 801a046:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 801a048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a04a:	2b00      	cmp	r3, #0
 801a04c:	d199      	bne.n	8019f82 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 801a04e:	687b      	ldr	r3, [r7, #4]
 801a050:	681b      	ldr	r3, [r3, #0]
 801a052:	4618      	mov	r0, r3
 801a054:	f004 ff75 	bl	801ef42 <USB_ReadInterrupts>
 801a058:	4603      	mov	r3, r0
 801a05a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801a05e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801a062:	f040 80c0 	bne.w	801a1e6 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 801a066:	687b      	ldr	r3, [r7, #4]
 801a068:	681b      	ldr	r3, [r3, #0]
 801a06a:	4618      	mov	r0, r3
 801a06c:	f004 ff96 	bl	801ef9c <USB_ReadDevAllInEpInterrupt>
 801a070:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 801a072:	2300      	movs	r3, #0
 801a074:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 801a076:	e0b2      	b.n	801a1de <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 801a078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a07a:	f003 0301 	and.w	r3, r3, #1
 801a07e:	2b00      	cmp	r3, #0
 801a080:	f000 80a7 	beq.w	801a1d2 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 801a084:	687b      	ldr	r3, [r7, #4]
 801a086:	681b      	ldr	r3, [r3, #0]
 801a088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a08a:	b2d2      	uxtb	r2, r2
 801a08c:	4611      	mov	r1, r2
 801a08e:	4618      	mov	r0, r3
 801a090:	f004 ffbc 	bl	801f00c <USB_ReadDevInEPInterrupt>
 801a094:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 801a096:	693b      	ldr	r3, [r7, #16]
 801a098:	f003 0301 	and.w	r3, r3, #1
 801a09c:	2b00      	cmp	r3, #0
 801a09e:	d057      	beq.n	801a150 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 801a0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0a2:	f003 030f 	and.w	r3, r3, #15
 801a0a6:	2201      	movs	r2, #1
 801a0a8:	fa02 f303 	lsl.w	r3, r2, r3
 801a0ac:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 801a0ae:	69fb      	ldr	r3, [r7, #28]
 801a0b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a0b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801a0b6:	68fb      	ldr	r3, [r7, #12]
 801a0b8:	43db      	mvns	r3, r3
 801a0ba:	69f9      	ldr	r1, [r7, #28]
 801a0bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801a0c0:	4013      	ands	r3, r2
 801a0c2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 801a0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0c6:	015a      	lsls	r2, r3, #5
 801a0c8:	69fb      	ldr	r3, [r7, #28]
 801a0ca:	4413      	add	r3, r2
 801a0cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a0d0:	461a      	mov	r2, r3
 801a0d2:	2301      	movs	r3, #1
 801a0d4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 801a0d6:	687b      	ldr	r3, [r7, #4]
 801a0d8:	691b      	ldr	r3, [r3, #16]
 801a0da:	2b01      	cmp	r3, #1
 801a0dc:	d132      	bne.n	801a144 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 801a0de:	6879      	ldr	r1, [r7, #4]
 801a0e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a0e2:	4613      	mov	r3, r2
 801a0e4:	00db      	lsls	r3, r3, #3
 801a0e6:	1a9b      	subs	r3, r3, r2
 801a0e8:	009b      	lsls	r3, r3, #2
 801a0ea:	440b      	add	r3, r1
 801a0ec:	3348      	adds	r3, #72	; 0x48
 801a0ee:	6819      	ldr	r1, [r3, #0]
 801a0f0:	6878      	ldr	r0, [r7, #4]
 801a0f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a0f4:	4613      	mov	r3, r2
 801a0f6:	00db      	lsls	r3, r3, #3
 801a0f8:	1a9b      	subs	r3, r3, r2
 801a0fa:	009b      	lsls	r3, r3, #2
 801a0fc:	4403      	add	r3, r0
 801a0fe:	3344      	adds	r3, #68	; 0x44
 801a100:	681b      	ldr	r3, [r3, #0]
 801a102:	4419      	add	r1, r3
 801a104:	6878      	ldr	r0, [r7, #4]
 801a106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a108:	4613      	mov	r3, r2
 801a10a:	00db      	lsls	r3, r3, #3
 801a10c:	1a9b      	subs	r3, r3, r2
 801a10e:	009b      	lsls	r3, r3, #2
 801a110:	4403      	add	r3, r0
 801a112:	3348      	adds	r3, #72	; 0x48
 801a114:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 801a116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a118:	2b00      	cmp	r3, #0
 801a11a:	d113      	bne.n	801a144 <HAL_PCD_IRQHandler+0x31c>
 801a11c:	6879      	ldr	r1, [r7, #4]
 801a11e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a120:	4613      	mov	r3, r2
 801a122:	00db      	lsls	r3, r3, #3
 801a124:	1a9b      	subs	r3, r3, r2
 801a126:	009b      	lsls	r3, r3, #2
 801a128:	440b      	add	r3, r1
 801a12a:	3350      	adds	r3, #80	; 0x50
 801a12c:	681b      	ldr	r3, [r3, #0]
 801a12e:	2b00      	cmp	r3, #0
 801a130:	d108      	bne.n	801a144 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801a132:	687b      	ldr	r3, [r7, #4]
 801a134:	6818      	ldr	r0, [r3, #0]
 801a136:	687b      	ldr	r3, [r7, #4]
 801a138:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801a13c:	461a      	mov	r2, r3
 801a13e:	2101      	movs	r1, #1
 801a140:	f004 ffc4 	bl	801f0cc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 801a144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a146:	b2db      	uxtb	r3, r3
 801a148:	4619      	mov	r1, r3
 801a14a:	6878      	ldr	r0, [r7, #4]
 801a14c:	f008 fa09 	bl	8022562 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 801a150:	693b      	ldr	r3, [r7, #16]
 801a152:	f003 0308 	and.w	r3, r3, #8
 801a156:	2b00      	cmp	r3, #0
 801a158:	d008      	beq.n	801a16c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 801a15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a15c:	015a      	lsls	r2, r3, #5
 801a15e:	69fb      	ldr	r3, [r7, #28]
 801a160:	4413      	add	r3, r2
 801a162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a166:	461a      	mov	r2, r3
 801a168:	2308      	movs	r3, #8
 801a16a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 801a16c:	693b      	ldr	r3, [r7, #16]
 801a16e:	f003 0310 	and.w	r3, r3, #16
 801a172:	2b00      	cmp	r3, #0
 801a174:	d008      	beq.n	801a188 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 801a176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a178:	015a      	lsls	r2, r3, #5
 801a17a:	69fb      	ldr	r3, [r7, #28]
 801a17c:	4413      	add	r3, r2
 801a17e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a182:	461a      	mov	r2, r3
 801a184:	2310      	movs	r3, #16
 801a186:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 801a188:	693b      	ldr	r3, [r7, #16]
 801a18a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a18e:	2b00      	cmp	r3, #0
 801a190:	d008      	beq.n	801a1a4 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 801a192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a194:	015a      	lsls	r2, r3, #5
 801a196:	69fb      	ldr	r3, [r7, #28]
 801a198:	4413      	add	r3, r2
 801a19a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a19e:	461a      	mov	r2, r3
 801a1a0:	2340      	movs	r3, #64	; 0x40
 801a1a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 801a1a4:	693b      	ldr	r3, [r7, #16]
 801a1a6:	f003 0302 	and.w	r3, r3, #2
 801a1aa:	2b00      	cmp	r3, #0
 801a1ac:	d008      	beq.n	801a1c0 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 801a1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1b0:	015a      	lsls	r2, r3, #5
 801a1b2:	69fb      	ldr	r3, [r7, #28]
 801a1b4:	4413      	add	r3, r2
 801a1b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a1ba:	461a      	mov	r2, r3
 801a1bc:	2302      	movs	r3, #2
 801a1be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 801a1c0:	693b      	ldr	r3, [r7, #16]
 801a1c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a1c6:	2b00      	cmp	r3, #0
 801a1c8:	d003      	beq.n	801a1d2 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 801a1ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a1cc:	6878      	ldr	r0, [r7, #4]
 801a1ce:	f000 fc75 	bl	801aabc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 801a1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1d4:	3301      	adds	r3, #1
 801a1d6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 801a1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1da:	085b      	lsrs	r3, r3, #1
 801a1dc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 801a1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1e0:	2b00      	cmp	r3, #0
 801a1e2:	f47f af49 	bne.w	801a078 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 801a1e6:	687b      	ldr	r3, [r7, #4]
 801a1e8:	681b      	ldr	r3, [r3, #0]
 801a1ea:	4618      	mov	r0, r3
 801a1ec:	f004 fea9 	bl	801ef42 <USB_ReadInterrupts>
 801a1f0:	4603      	mov	r3, r0
 801a1f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801a1f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a1fa:	d122      	bne.n	801a242 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 801a1fc:	69fb      	ldr	r3, [r7, #28]
 801a1fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a202:	685b      	ldr	r3, [r3, #4]
 801a204:	69fa      	ldr	r2, [r7, #28]
 801a206:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a20a:	f023 0301 	bic.w	r3, r3, #1
 801a20e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 801a210:	687b      	ldr	r3, [r7, #4]
 801a212:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 801a216:	2b01      	cmp	r3, #1
 801a218:	d108      	bne.n	801a22c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 801a21a:	687b      	ldr	r3, [r7, #4]
 801a21c:	2200      	movs	r2, #0
 801a21e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 801a222:	2100      	movs	r1, #0
 801a224:	6878      	ldr	r0, [r7, #4]
 801a226:	f008 fc0b 	bl	8022a40 <HAL_PCDEx_LPM_Callback>
 801a22a:	e002      	b.n	801a232 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 801a22c:	6878      	ldr	r0, [r7, #4]
 801a22e:	f008 fa0f 	bl	8022650 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 801a232:	687b      	ldr	r3, [r7, #4]
 801a234:	681b      	ldr	r3, [r3, #0]
 801a236:	695a      	ldr	r2, [r3, #20]
 801a238:	687b      	ldr	r3, [r7, #4]
 801a23a:	681b      	ldr	r3, [r3, #0]
 801a23c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 801a240:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 801a242:	687b      	ldr	r3, [r7, #4]
 801a244:	681b      	ldr	r3, [r3, #0]
 801a246:	4618      	mov	r0, r3
 801a248:	f004 fe7b 	bl	801ef42 <USB_ReadInterrupts>
 801a24c:	4603      	mov	r3, r0
 801a24e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801a252:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a256:	d112      	bne.n	801a27e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 801a258:	69fb      	ldr	r3, [r7, #28]
 801a25a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a25e:	689b      	ldr	r3, [r3, #8]
 801a260:	f003 0301 	and.w	r3, r3, #1
 801a264:	2b01      	cmp	r3, #1
 801a266:	d102      	bne.n	801a26e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 801a268:	6878      	ldr	r0, [r7, #4]
 801a26a:	f008 f9cb 	bl	8022604 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 801a26e:	687b      	ldr	r3, [r7, #4]
 801a270:	681b      	ldr	r3, [r3, #0]
 801a272:	695a      	ldr	r2, [r3, #20]
 801a274:	687b      	ldr	r3, [r7, #4]
 801a276:	681b      	ldr	r3, [r3, #0]
 801a278:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 801a27c:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 801a27e:	687b      	ldr	r3, [r7, #4]
 801a280:	681b      	ldr	r3, [r3, #0]
 801a282:	4618      	mov	r0, r3
 801a284:	f004 fe5d 	bl	801ef42 <USB_ReadInterrupts>
 801a288:	4603      	mov	r3, r0
 801a28a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801a28e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801a292:	d121      	bne.n	801a2d8 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 801a294:	687b      	ldr	r3, [r7, #4]
 801a296:	681b      	ldr	r3, [r3, #0]
 801a298:	695a      	ldr	r2, [r3, #20]
 801a29a:	687b      	ldr	r3, [r7, #4]
 801a29c:	681b      	ldr	r3, [r3, #0]
 801a29e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 801a2a2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 801a2aa:	2b00      	cmp	r3, #0
 801a2ac:	d111      	bne.n	801a2d2 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 801a2ae:	687b      	ldr	r3, [r7, #4]
 801a2b0:	2201      	movs	r2, #1
 801a2b2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 801a2b6:	687b      	ldr	r3, [r7, #4]
 801a2b8:	681b      	ldr	r3, [r3, #0]
 801a2ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a2bc:	089b      	lsrs	r3, r3, #2
 801a2be:	f003 020f 	and.w	r2, r3, #15
 801a2c2:	687b      	ldr	r3, [r7, #4]
 801a2c4:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 801a2c8:	2101      	movs	r1, #1
 801a2ca:	6878      	ldr	r0, [r7, #4]
 801a2cc:	f008 fbb8 	bl	8022a40 <HAL_PCDEx_LPM_Callback>
 801a2d0:	e002      	b.n	801a2d8 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 801a2d2:	6878      	ldr	r0, [r7, #4]
 801a2d4:	f008 f996 	bl	8022604 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 801a2d8:	687b      	ldr	r3, [r7, #4]
 801a2da:	681b      	ldr	r3, [r3, #0]
 801a2dc:	4618      	mov	r0, r3
 801a2de:	f004 fe30 	bl	801ef42 <USB_ReadInterrupts>
 801a2e2:	4603      	mov	r3, r0
 801a2e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801a2e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a2ec:	f040 80c7 	bne.w	801a47e <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 801a2f0:	69fb      	ldr	r3, [r7, #28]
 801a2f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a2f6:	685b      	ldr	r3, [r3, #4]
 801a2f8:	69fa      	ldr	r2, [r7, #28]
 801a2fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a2fe:	f023 0301 	bic.w	r3, r3, #1
 801a302:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 801a304:	687b      	ldr	r3, [r7, #4]
 801a306:	681b      	ldr	r3, [r3, #0]
 801a308:	2110      	movs	r1, #16
 801a30a:	4618      	mov	r0, r3
 801a30c:	f003 feca 	bl	801e0a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801a310:	2300      	movs	r3, #0
 801a312:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a314:	e056      	b.n	801a3c4 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 801a316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a318:	015a      	lsls	r2, r3, #5
 801a31a:	69fb      	ldr	r3, [r7, #28]
 801a31c:	4413      	add	r3, r2
 801a31e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a322:	461a      	mov	r2, r3
 801a324:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801a328:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801a32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a32c:	015a      	lsls	r2, r3, #5
 801a32e:	69fb      	ldr	r3, [r7, #28]
 801a330:	4413      	add	r3, r2
 801a332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a336:	681b      	ldr	r3, [r3, #0]
 801a338:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a33a:	0151      	lsls	r1, r2, #5
 801a33c:	69fa      	ldr	r2, [r7, #28]
 801a33e:	440a      	add	r2, r1
 801a340:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a344:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801a348:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801a34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a34c:	015a      	lsls	r2, r3, #5
 801a34e:	69fb      	ldr	r3, [r7, #28]
 801a350:	4413      	add	r3, r2
 801a352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a356:	681b      	ldr	r3, [r3, #0]
 801a358:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a35a:	0151      	lsls	r1, r2, #5
 801a35c:	69fa      	ldr	r2, [r7, #28]
 801a35e:	440a      	add	r2, r1
 801a360:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a364:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801a368:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 801a36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a36c:	015a      	lsls	r2, r3, #5
 801a36e:	69fb      	ldr	r3, [r7, #28]
 801a370:	4413      	add	r3, r2
 801a372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a376:	461a      	mov	r2, r3
 801a378:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801a37c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801a37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a380:	015a      	lsls	r2, r3, #5
 801a382:	69fb      	ldr	r3, [r7, #28]
 801a384:	4413      	add	r3, r2
 801a386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a38a:	681b      	ldr	r3, [r3, #0]
 801a38c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a38e:	0151      	lsls	r1, r2, #5
 801a390:	69fa      	ldr	r2, [r7, #28]
 801a392:	440a      	add	r2, r1
 801a394:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a398:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801a39c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801a39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3a0:	015a      	lsls	r2, r3, #5
 801a3a2:	69fb      	ldr	r3, [r7, #28]
 801a3a4:	4413      	add	r3, r2
 801a3a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a3aa:	681b      	ldr	r3, [r3, #0]
 801a3ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a3ae:	0151      	lsls	r1, r2, #5
 801a3b0:	69fa      	ldr	r2, [r7, #28]
 801a3b2:	440a      	add	r2, r1
 801a3b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a3b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801a3bc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801a3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3c0:	3301      	adds	r3, #1
 801a3c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a3c4:	687b      	ldr	r3, [r7, #4]
 801a3c6:	685b      	ldr	r3, [r3, #4]
 801a3c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a3ca:	429a      	cmp	r2, r3
 801a3cc:	d3a3      	bcc.n	801a316 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 801a3ce:	69fb      	ldr	r3, [r7, #28]
 801a3d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a3d4:	69db      	ldr	r3, [r3, #28]
 801a3d6:	69fa      	ldr	r2, [r7, #28]
 801a3d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a3dc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 801a3e0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 801a3e2:	687b      	ldr	r3, [r7, #4]
 801a3e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a3e6:	2b00      	cmp	r3, #0
 801a3e8:	d016      	beq.n	801a418 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 801a3ea:	69fb      	ldr	r3, [r7, #28]
 801a3ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a3f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a3f4:	69fa      	ldr	r2, [r7, #28]
 801a3f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a3fa:	f043 030b 	orr.w	r3, r3, #11
 801a3fe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 801a402:	69fb      	ldr	r3, [r7, #28]
 801a404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a40a:	69fa      	ldr	r2, [r7, #28]
 801a40c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a410:	f043 030b 	orr.w	r3, r3, #11
 801a414:	6453      	str	r3, [r2, #68]	; 0x44
 801a416:	e015      	b.n	801a444 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 801a418:	69fb      	ldr	r3, [r7, #28]
 801a41a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a41e:	695b      	ldr	r3, [r3, #20]
 801a420:	69fa      	ldr	r2, [r7, #28]
 801a422:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a426:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a42a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 801a42e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 801a430:	69fb      	ldr	r3, [r7, #28]
 801a432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a436:	691b      	ldr	r3, [r3, #16]
 801a438:	69fa      	ldr	r2, [r7, #28]
 801a43a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a43e:	f043 030b 	orr.w	r3, r3, #11
 801a442:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 801a444:	69fb      	ldr	r3, [r7, #28]
 801a446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a44a:	681b      	ldr	r3, [r3, #0]
 801a44c:	69fa      	ldr	r2, [r7, #28]
 801a44e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a452:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801a456:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 801a458:	687b      	ldr	r3, [r7, #4]
 801a45a:	6818      	ldr	r0, [r3, #0]
 801a45c:	687b      	ldr	r3, [r7, #4]
 801a45e:	691b      	ldr	r3, [r3, #16]
 801a460:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 801a462:	687b      	ldr	r3, [r7, #4]
 801a464:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 801a468:	461a      	mov	r2, r3
 801a46a:	f004 fe2f 	bl	801f0cc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 801a46e:	687b      	ldr	r3, [r7, #4]
 801a470:	681b      	ldr	r3, [r3, #0]
 801a472:	695a      	ldr	r2, [r3, #20]
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	681b      	ldr	r3, [r3, #0]
 801a478:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 801a47c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 801a47e:	687b      	ldr	r3, [r7, #4]
 801a480:	681b      	ldr	r3, [r3, #0]
 801a482:	4618      	mov	r0, r3
 801a484:	f004 fd5d 	bl	801ef42 <USB_ReadInterrupts>
 801a488:	4603      	mov	r3, r0
 801a48a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a48e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801a492:	d124      	bne.n	801a4de <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 801a494:	687b      	ldr	r3, [r7, #4]
 801a496:	681b      	ldr	r3, [r3, #0]
 801a498:	4618      	mov	r0, r3
 801a49a:	f004 fdf3 	bl	801f084 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 801a49e:	687b      	ldr	r3, [r7, #4]
 801a4a0:	681b      	ldr	r3, [r3, #0]
 801a4a2:	4618      	mov	r0, r3
 801a4a4:	f003 fe5b 	bl	801e15e <USB_GetDevSpeed>
 801a4a8:	4603      	mov	r3, r0
 801a4aa:	461a      	mov	r2, r3
 801a4ac:	687b      	ldr	r3, [r7, #4]
 801a4ae:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 801a4b0:	687b      	ldr	r3, [r7, #4]
 801a4b2:	681c      	ldr	r4, [r3, #0]
 801a4b4:	f000 fe94 	bl	801b1e0 <HAL_RCC_GetHCLKFreq>
 801a4b8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 801a4ba:	687b      	ldr	r3, [r7, #4]
 801a4bc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 801a4be:	b2db      	uxtb	r3, r3
 801a4c0:	461a      	mov	r2, r3
 801a4c2:	4620      	mov	r0, r4
 801a4c4:	f003 fb80 	bl	801dbc8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 801a4c8:	6878      	ldr	r0, [r7, #4]
 801a4ca:	f008 f872 	bl	80225b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 801a4ce:	687b      	ldr	r3, [r7, #4]
 801a4d0:	681b      	ldr	r3, [r3, #0]
 801a4d2:	695a      	ldr	r2, [r3, #20]
 801a4d4:	687b      	ldr	r3, [r7, #4]
 801a4d6:	681b      	ldr	r3, [r3, #0]
 801a4d8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 801a4dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 801a4de:	687b      	ldr	r3, [r7, #4]
 801a4e0:	681b      	ldr	r3, [r3, #0]
 801a4e2:	4618      	mov	r0, r3
 801a4e4:	f004 fd2d 	bl	801ef42 <USB_ReadInterrupts>
 801a4e8:	4603      	mov	r3, r0
 801a4ea:	f003 0308 	and.w	r3, r3, #8
 801a4ee:	2b08      	cmp	r3, #8
 801a4f0:	d10a      	bne.n	801a508 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 801a4f2:	6878      	ldr	r0, [r7, #4]
 801a4f4:	f008 f84f 	bl	8022596 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 801a4f8:	687b      	ldr	r3, [r7, #4]
 801a4fa:	681b      	ldr	r3, [r3, #0]
 801a4fc:	695a      	ldr	r2, [r3, #20]
 801a4fe:	687b      	ldr	r3, [r7, #4]
 801a500:	681b      	ldr	r3, [r3, #0]
 801a502:	f002 0208 	and.w	r2, r2, #8
 801a506:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 801a508:	687b      	ldr	r3, [r7, #4]
 801a50a:	681b      	ldr	r3, [r3, #0]
 801a50c:	4618      	mov	r0, r3
 801a50e:	f004 fd18 	bl	801ef42 <USB_ReadInterrupts>
 801a512:	4603      	mov	r3, r0
 801a514:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801a518:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801a51c:	d10f      	bne.n	801a53e <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 801a51e:	2300      	movs	r3, #0
 801a520:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 801a522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a524:	b2db      	uxtb	r3, r3
 801a526:	4619      	mov	r1, r3
 801a528:	6878      	ldr	r0, [r7, #4]
 801a52a:	f008 f8b1 	bl	8022690 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 801a52e:	687b      	ldr	r3, [r7, #4]
 801a530:	681b      	ldr	r3, [r3, #0]
 801a532:	695a      	ldr	r2, [r3, #20]
 801a534:	687b      	ldr	r3, [r7, #4]
 801a536:	681b      	ldr	r3, [r3, #0]
 801a538:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 801a53c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 801a53e:	687b      	ldr	r3, [r7, #4]
 801a540:	681b      	ldr	r3, [r3, #0]
 801a542:	4618      	mov	r0, r3
 801a544:	f004 fcfd 	bl	801ef42 <USB_ReadInterrupts>
 801a548:	4603      	mov	r3, r0
 801a54a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801a54e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801a552:	d10f      	bne.n	801a574 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 801a554:	2300      	movs	r3, #0
 801a556:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 801a558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a55a:	b2db      	uxtb	r3, r3
 801a55c:	4619      	mov	r1, r3
 801a55e:	6878      	ldr	r0, [r7, #4]
 801a560:	f008 f884 	bl	802266c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 801a564:	687b      	ldr	r3, [r7, #4]
 801a566:	681b      	ldr	r3, [r3, #0]
 801a568:	695a      	ldr	r2, [r3, #20]
 801a56a:	687b      	ldr	r3, [r7, #4]
 801a56c:	681b      	ldr	r3, [r3, #0]
 801a56e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 801a572:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 801a574:	687b      	ldr	r3, [r7, #4]
 801a576:	681b      	ldr	r3, [r3, #0]
 801a578:	4618      	mov	r0, r3
 801a57a:	f004 fce2 	bl	801ef42 <USB_ReadInterrupts>
 801a57e:	4603      	mov	r3, r0
 801a580:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801a584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a588:	d10a      	bne.n	801a5a0 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 801a58a:	6878      	ldr	r0, [r7, #4]
 801a58c:	f008 f892 	bl	80226b4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 801a590:	687b      	ldr	r3, [r7, #4]
 801a592:	681b      	ldr	r3, [r3, #0]
 801a594:	695a      	ldr	r2, [r3, #20]
 801a596:	687b      	ldr	r3, [r7, #4]
 801a598:	681b      	ldr	r3, [r3, #0]
 801a59a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 801a59e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 801a5a0:	687b      	ldr	r3, [r7, #4]
 801a5a2:	681b      	ldr	r3, [r3, #0]
 801a5a4:	4618      	mov	r0, r3
 801a5a6:	f004 fccc 	bl	801ef42 <USB_ReadInterrupts>
 801a5aa:	4603      	mov	r3, r0
 801a5ac:	f003 0304 	and.w	r3, r3, #4
 801a5b0:	2b04      	cmp	r3, #4
 801a5b2:	d115      	bne.n	801a5e0 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 801a5b4:	687b      	ldr	r3, [r7, #4]
 801a5b6:	681b      	ldr	r3, [r3, #0]
 801a5b8:	685b      	ldr	r3, [r3, #4]
 801a5ba:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 801a5bc:	69bb      	ldr	r3, [r7, #24]
 801a5be:	f003 0304 	and.w	r3, r3, #4
 801a5c2:	2b00      	cmp	r3, #0
 801a5c4:	d002      	beq.n	801a5cc <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 801a5c6:	6878      	ldr	r0, [r7, #4]
 801a5c8:	f008 f882 	bl	80226d0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 801a5cc:	687b      	ldr	r3, [r7, #4]
 801a5ce:	681b      	ldr	r3, [r3, #0]
 801a5d0:	6859      	ldr	r1, [r3, #4]
 801a5d2:	687b      	ldr	r3, [r7, #4]
 801a5d4:	681b      	ldr	r3, [r3, #0]
 801a5d6:	69ba      	ldr	r2, [r7, #24]
 801a5d8:	430a      	orrs	r2, r1
 801a5da:	605a      	str	r2, [r3, #4]
 801a5dc:	e000      	b.n	801a5e0 <HAL_PCD_IRQHandler+0x7b8>
      return;
 801a5de:	bf00      	nop
    }
  }
}
 801a5e0:	3734      	adds	r7, #52	; 0x34
 801a5e2:	46bd      	mov	sp, r7
 801a5e4:	bd90      	pop	{r4, r7, pc}

0801a5e6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 801a5e6:	b580      	push	{r7, lr}
 801a5e8:	b082      	sub	sp, #8
 801a5ea:	af00      	add	r7, sp, #0
 801a5ec:	6078      	str	r0, [r7, #4]
 801a5ee:	460b      	mov	r3, r1
 801a5f0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 801a5f2:	687b      	ldr	r3, [r7, #4]
 801a5f4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801a5f8:	2b01      	cmp	r3, #1
 801a5fa:	d101      	bne.n	801a600 <HAL_PCD_SetAddress+0x1a>
 801a5fc:	2302      	movs	r3, #2
 801a5fe:	e013      	b.n	801a628 <HAL_PCD_SetAddress+0x42>
 801a600:	687b      	ldr	r3, [r7, #4]
 801a602:	2201      	movs	r2, #1
 801a604:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 801a608:	687b      	ldr	r3, [r7, #4]
 801a60a:	78fa      	ldrb	r2, [r7, #3]
 801a60c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 801a610:	687b      	ldr	r3, [r7, #4]
 801a612:	681b      	ldr	r3, [r3, #0]
 801a614:	78fa      	ldrb	r2, [r7, #3]
 801a616:	4611      	mov	r1, r2
 801a618:	4618      	mov	r0, r3
 801a61a:	f004 fc2a 	bl	801ee72 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 801a61e:	687b      	ldr	r3, [r7, #4]
 801a620:	2200      	movs	r2, #0
 801a622:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801a626:	2300      	movs	r3, #0
}
 801a628:	4618      	mov	r0, r3
 801a62a:	3708      	adds	r7, #8
 801a62c:	46bd      	mov	sp, r7
 801a62e:	bd80      	pop	{r7, pc}

0801a630 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 801a630:	b580      	push	{r7, lr}
 801a632:	b084      	sub	sp, #16
 801a634:	af00      	add	r7, sp, #0
 801a636:	6078      	str	r0, [r7, #4]
 801a638:	4608      	mov	r0, r1
 801a63a:	4611      	mov	r1, r2
 801a63c:	461a      	mov	r2, r3
 801a63e:	4603      	mov	r3, r0
 801a640:	70fb      	strb	r3, [r7, #3]
 801a642:	460b      	mov	r3, r1
 801a644:	803b      	strh	r3, [r7, #0]
 801a646:	4613      	mov	r3, r2
 801a648:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 801a64a:	2300      	movs	r3, #0
 801a64c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801a64e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a652:	2b00      	cmp	r3, #0
 801a654:	da0f      	bge.n	801a676 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a656:	78fb      	ldrb	r3, [r7, #3]
 801a658:	f003 020f 	and.w	r2, r3, #15
 801a65c:	4613      	mov	r3, r2
 801a65e:	00db      	lsls	r3, r3, #3
 801a660:	1a9b      	subs	r3, r3, r2
 801a662:	009b      	lsls	r3, r3, #2
 801a664:	3338      	adds	r3, #56	; 0x38
 801a666:	687a      	ldr	r2, [r7, #4]
 801a668:	4413      	add	r3, r2
 801a66a:	3304      	adds	r3, #4
 801a66c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801a66e:	68fb      	ldr	r3, [r7, #12]
 801a670:	2201      	movs	r2, #1
 801a672:	705a      	strb	r2, [r3, #1]
 801a674:	e00f      	b.n	801a696 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801a676:	78fb      	ldrb	r3, [r7, #3]
 801a678:	f003 020f 	and.w	r2, r3, #15
 801a67c:	4613      	mov	r3, r2
 801a67e:	00db      	lsls	r3, r3, #3
 801a680:	1a9b      	subs	r3, r3, r2
 801a682:	009b      	lsls	r3, r3, #2
 801a684:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801a688:	687a      	ldr	r2, [r7, #4]
 801a68a:	4413      	add	r3, r2
 801a68c:	3304      	adds	r3, #4
 801a68e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801a690:	68fb      	ldr	r3, [r7, #12]
 801a692:	2200      	movs	r2, #0
 801a694:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 801a696:	78fb      	ldrb	r3, [r7, #3]
 801a698:	f003 030f 	and.w	r3, r3, #15
 801a69c:	b2da      	uxtb	r2, r3
 801a69e:	68fb      	ldr	r3, [r7, #12]
 801a6a0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 801a6a2:	883a      	ldrh	r2, [r7, #0]
 801a6a4:	68fb      	ldr	r3, [r7, #12]
 801a6a6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 801a6a8:	68fb      	ldr	r3, [r7, #12]
 801a6aa:	78ba      	ldrb	r2, [r7, #2]
 801a6ac:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 801a6ae:	68fb      	ldr	r3, [r7, #12]
 801a6b0:	785b      	ldrb	r3, [r3, #1]
 801a6b2:	2b00      	cmp	r3, #0
 801a6b4:	d004      	beq.n	801a6c0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 801a6b6:	68fb      	ldr	r3, [r7, #12]
 801a6b8:	781b      	ldrb	r3, [r3, #0]
 801a6ba:	b29a      	uxth	r2, r3
 801a6bc:	68fb      	ldr	r3, [r7, #12]
 801a6be:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 801a6c0:	78bb      	ldrb	r3, [r7, #2]
 801a6c2:	2b02      	cmp	r3, #2
 801a6c4:	d102      	bne.n	801a6cc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 801a6c6:	68fb      	ldr	r3, [r7, #12]
 801a6c8:	2200      	movs	r2, #0
 801a6ca:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 801a6cc:	687b      	ldr	r3, [r7, #4]
 801a6ce:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801a6d2:	2b01      	cmp	r3, #1
 801a6d4:	d101      	bne.n	801a6da <HAL_PCD_EP_Open+0xaa>
 801a6d6:	2302      	movs	r3, #2
 801a6d8:	e00e      	b.n	801a6f8 <HAL_PCD_EP_Open+0xc8>
 801a6da:	687b      	ldr	r3, [r7, #4]
 801a6dc:	2201      	movs	r2, #1
 801a6de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 801a6e2:	687b      	ldr	r3, [r7, #4]
 801a6e4:	681b      	ldr	r3, [r3, #0]
 801a6e6:	68f9      	ldr	r1, [r7, #12]
 801a6e8:	4618      	mov	r0, r3
 801a6ea:	f003 fd5d 	bl	801e1a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801a6ee:	687b      	ldr	r3, [r7, #4]
 801a6f0:	2200      	movs	r2, #0
 801a6f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 801a6f6:	7afb      	ldrb	r3, [r7, #11]
}
 801a6f8:	4618      	mov	r0, r3
 801a6fa:	3710      	adds	r7, #16
 801a6fc:	46bd      	mov	sp, r7
 801a6fe:	bd80      	pop	{r7, pc}

0801a700 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801a700:	b580      	push	{r7, lr}
 801a702:	b084      	sub	sp, #16
 801a704:	af00      	add	r7, sp, #0
 801a706:	6078      	str	r0, [r7, #4]
 801a708:	460b      	mov	r3, r1
 801a70a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801a70c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a710:	2b00      	cmp	r3, #0
 801a712:	da0f      	bge.n	801a734 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a714:	78fb      	ldrb	r3, [r7, #3]
 801a716:	f003 020f 	and.w	r2, r3, #15
 801a71a:	4613      	mov	r3, r2
 801a71c:	00db      	lsls	r3, r3, #3
 801a71e:	1a9b      	subs	r3, r3, r2
 801a720:	009b      	lsls	r3, r3, #2
 801a722:	3338      	adds	r3, #56	; 0x38
 801a724:	687a      	ldr	r2, [r7, #4]
 801a726:	4413      	add	r3, r2
 801a728:	3304      	adds	r3, #4
 801a72a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801a72c:	68fb      	ldr	r3, [r7, #12]
 801a72e:	2201      	movs	r2, #1
 801a730:	705a      	strb	r2, [r3, #1]
 801a732:	e00f      	b.n	801a754 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801a734:	78fb      	ldrb	r3, [r7, #3]
 801a736:	f003 020f 	and.w	r2, r3, #15
 801a73a:	4613      	mov	r3, r2
 801a73c:	00db      	lsls	r3, r3, #3
 801a73e:	1a9b      	subs	r3, r3, r2
 801a740:	009b      	lsls	r3, r3, #2
 801a742:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801a746:	687a      	ldr	r2, [r7, #4]
 801a748:	4413      	add	r3, r2
 801a74a:	3304      	adds	r3, #4
 801a74c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801a74e:	68fb      	ldr	r3, [r7, #12]
 801a750:	2200      	movs	r2, #0
 801a752:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 801a754:	78fb      	ldrb	r3, [r7, #3]
 801a756:	f003 030f 	and.w	r3, r3, #15
 801a75a:	b2da      	uxtb	r2, r3
 801a75c:	68fb      	ldr	r3, [r7, #12]
 801a75e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801a760:	687b      	ldr	r3, [r7, #4]
 801a762:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801a766:	2b01      	cmp	r3, #1
 801a768:	d101      	bne.n	801a76e <HAL_PCD_EP_Close+0x6e>
 801a76a:	2302      	movs	r3, #2
 801a76c:	e00e      	b.n	801a78c <HAL_PCD_EP_Close+0x8c>
 801a76e:	687b      	ldr	r3, [r7, #4]
 801a770:	2201      	movs	r2, #1
 801a772:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 801a776:	687b      	ldr	r3, [r7, #4]
 801a778:	681b      	ldr	r3, [r3, #0]
 801a77a:	68f9      	ldr	r1, [r7, #12]
 801a77c:	4618      	mov	r0, r3
 801a77e:	f003 fd9b 	bl	801e2b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801a782:	687b      	ldr	r3, [r7, #4]
 801a784:	2200      	movs	r2, #0
 801a786:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 801a78a:	2300      	movs	r3, #0
}
 801a78c:	4618      	mov	r0, r3
 801a78e:	3710      	adds	r7, #16
 801a790:	46bd      	mov	sp, r7
 801a792:	bd80      	pop	{r7, pc}

0801a794 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801a794:	b580      	push	{r7, lr}
 801a796:	b086      	sub	sp, #24
 801a798:	af00      	add	r7, sp, #0
 801a79a:	60f8      	str	r0, [r7, #12]
 801a79c:	607a      	str	r2, [r7, #4]
 801a79e:	603b      	str	r3, [r7, #0]
 801a7a0:	460b      	mov	r3, r1
 801a7a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801a7a4:	7afb      	ldrb	r3, [r7, #11]
 801a7a6:	f003 020f 	and.w	r2, r3, #15
 801a7aa:	4613      	mov	r3, r2
 801a7ac:	00db      	lsls	r3, r3, #3
 801a7ae:	1a9b      	subs	r3, r3, r2
 801a7b0:	009b      	lsls	r3, r3, #2
 801a7b2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801a7b6:	68fa      	ldr	r2, [r7, #12]
 801a7b8:	4413      	add	r3, r2
 801a7ba:	3304      	adds	r3, #4
 801a7bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801a7be:	697b      	ldr	r3, [r7, #20]
 801a7c0:	687a      	ldr	r2, [r7, #4]
 801a7c2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 801a7c4:	697b      	ldr	r3, [r7, #20]
 801a7c6:	683a      	ldr	r2, [r7, #0]
 801a7c8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 801a7ca:	697b      	ldr	r3, [r7, #20]
 801a7cc:	2200      	movs	r2, #0
 801a7ce:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 801a7d0:	697b      	ldr	r3, [r7, #20]
 801a7d2:	2200      	movs	r2, #0
 801a7d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801a7d6:	7afb      	ldrb	r3, [r7, #11]
 801a7d8:	f003 030f 	and.w	r3, r3, #15
 801a7dc:	b2da      	uxtb	r2, r3
 801a7de:	697b      	ldr	r3, [r7, #20]
 801a7e0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 801a7e2:	68fb      	ldr	r3, [r7, #12]
 801a7e4:	691b      	ldr	r3, [r3, #16]
 801a7e6:	2b01      	cmp	r3, #1
 801a7e8:	d102      	bne.n	801a7f0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 801a7ea:	687a      	ldr	r2, [r7, #4]
 801a7ec:	697b      	ldr	r3, [r7, #20]
 801a7ee:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801a7f0:	7afb      	ldrb	r3, [r7, #11]
 801a7f2:	f003 030f 	and.w	r3, r3, #15
 801a7f6:	2b00      	cmp	r3, #0
 801a7f8:	d109      	bne.n	801a80e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801a7fa:	68fb      	ldr	r3, [r7, #12]
 801a7fc:	6818      	ldr	r0, [r3, #0]
 801a7fe:	68fb      	ldr	r3, [r7, #12]
 801a800:	691b      	ldr	r3, [r3, #16]
 801a802:	b2db      	uxtb	r3, r3
 801a804:	461a      	mov	r2, r3
 801a806:	6979      	ldr	r1, [r7, #20]
 801a808:	f004 f876 	bl	801e8f8 <USB_EP0StartXfer>
 801a80c:	e008      	b.n	801a820 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801a80e:	68fb      	ldr	r3, [r7, #12]
 801a810:	6818      	ldr	r0, [r3, #0]
 801a812:	68fb      	ldr	r3, [r7, #12]
 801a814:	691b      	ldr	r3, [r3, #16]
 801a816:	b2db      	uxtb	r3, r3
 801a818:	461a      	mov	r2, r3
 801a81a:	6979      	ldr	r1, [r7, #20]
 801a81c:	f003 fe28 	bl	801e470 <USB_EPStartXfer>
  }

  return HAL_OK;
 801a820:	2300      	movs	r3, #0
}
 801a822:	4618      	mov	r0, r3
 801a824:	3718      	adds	r7, #24
 801a826:	46bd      	mov	sp, r7
 801a828:	bd80      	pop	{r7, pc}

0801a82a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801a82a:	b480      	push	{r7}
 801a82c:	b083      	sub	sp, #12
 801a82e:	af00      	add	r7, sp, #0
 801a830:	6078      	str	r0, [r7, #4]
 801a832:	460b      	mov	r3, r1
 801a834:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 801a836:	78fb      	ldrb	r3, [r7, #3]
 801a838:	f003 020f 	and.w	r2, r3, #15
 801a83c:	6879      	ldr	r1, [r7, #4]
 801a83e:	4613      	mov	r3, r2
 801a840:	00db      	lsls	r3, r3, #3
 801a842:	1a9b      	subs	r3, r3, r2
 801a844:	009b      	lsls	r3, r3, #2
 801a846:	440b      	add	r3, r1
 801a848:	f503 7305 	add.w	r3, r3, #532	; 0x214
 801a84c:	681b      	ldr	r3, [r3, #0]
}
 801a84e:	4618      	mov	r0, r3
 801a850:	370c      	adds	r7, #12
 801a852:	46bd      	mov	sp, r7
 801a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a858:	4770      	bx	lr

0801a85a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801a85a:	b580      	push	{r7, lr}
 801a85c:	b086      	sub	sp, #24
 801a85e:	af00      	add	r7, sp, #0
 801a860:	60f8      	str	r0, [r7, #12]
 801a862:	607a      	str	r2, [r7, #4]
 801a864:	603b      	str	r3, [r7, #0]
 801a866:	460b      	mov	r3, r1
 801a868:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a86a:	7afb      	ldrb	r3, [r7, #11]
 801a86c:	f003 020f 	and.w	r2, r3, #15
 801a870:	4613      	mov	r3, r2
 801a872:	00db      	lsls	r3, r3, #3
 801a874:	1a9b      	subs	r3, r3, r2
 801a876:	009b      	lsls	r3, r3, #2
 801a878:	3338      	adds	r3, #56	; 0x38
 801a87a:	68fa      	ldr	r2, [r7, #12]
 801a87c:	4413      	add	r3, r2
 801a87e:	3304      	adds	r3, #4
 801a880:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801a882:	697b      	ldr	r3, [r7, #20]
 801a884:	687a      	ldr	r2, [r7, #4]
 801a886:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 801a888:	697b      	ldr	r3, [r7, #20]
 801a88a:	683a      	ldr	r2, [r7, #0]
 801a88c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 801a88e:	697b      	ldr	r3, [r7, #20]
 801a890:	2200      	movs	r2, #0
 801a892:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 801a894:	697b      	ldr	r3, [r7, #20]
 801a896:	2201      	movs	r2, #1
 801a898:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801a89a:	7afb      	ldrb	r3, [r7, #11]
 801a89c:	f003 030f 	and.w	r3, r3, #15
 801a8a0:	b2da      	uxtb	r2, r3
 801a8a2:	697b      	ldr	r3, [r7, #20]
 801a8a4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 801a8a6:	68fb      	ldr	r3, [r7, #12]
 801a8a8:	691b      	ldr	r3, [r3, #16]
 801a8aa:	2b01      	cmp	r3, #1
 801a8ac:	d102      	bne.n	801a8b4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 801a8ae:	687a      	ldr	r2, [r7, #4]
 801a8b0:	697b      	ldr	r3, [r7, #20]
 801a8b2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801a8b4:	7afb      	ldrb	r3, [r7, #11]
 801a8b6:	f003 030f 	and.w	r3, r3, #15
 801a8ba:	2b00      	cmp	r3, #0
 801a8bc:	d109      	bne.n	801a8d2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801a8be:	68fb      	ldr	r3, [r7, #12]
 801a8c0:	6818      	ldr	r0, [r3, #0]
 801a8c2:	68fb      	ldr	r3, [r7, #12]
 801a8c4:	691b      	ldr	r3, [r3, #16]
 801a8c6:	b2db      	uxtb	r3, r3
 801a8c8:	461a      	mov	r2, r3
 801a8ca:	6979      	ldr	r1, [r7, #20]
 801a8cc:	f004 f814 	bl	801e8f8 <USB_EP0StartXfer>
 801a8d0:	e008      	b.n	801a8e4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801a8d2:	68fb      	ldr	r3, [r7, #12]
 801a8d4:	6818      	ldr	r0, [r3, #0]
 801a8d6:	68fb      	ldr	r3, [r7, #12]
 801a8d8:	691b      	ldr	r3, [r3, #16]
 801a8da:	b2db      	uxtb	r3, r3
 801a8dc:	461a      	mov	r2, r3
 801a8de:	6979      	ldr	r1, [r7, #20]
 801a8e0:	f003 fdc6 	bl	801e470 <USB_EPStartXfer>
  }

  return HAL_OK;
 801a8e4:	2300      	movs	r3, #0
}
 801a8e6:	4618      	mov	r0, r3
 801a8e8:	3718      	adds	r7, #24
 801a8ea:	46bd      	mov	sp, r7
 801a8ec:	bd80      	pop	{r7, pc}

0801a8ee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801a8ee:	b580      	push	{r7, lr}
 801a8f0:	b084      	sub	sp, #16
 801a8f2:	af00      	add	r7, sp, #0
 801a8f4:	6078      	str	r0, [r7, #4]
 801a8f6:	460b      	mov	r3, r1
 801a8f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 801a8fa:	78fb      	ldrb	r3, [r7, #3]
 801a8fc:	f003 020f 	and.w	r2, r3, #15
 801a900:	687b      	ldr	r3, [r7, #4]
 801a902:	685b      	ldr	r3, [r3, #4]
 801a904:	429a      	cmp	r2, r3
 801a906:	d901      	bls.n	801a90c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 801a908:	2301      	movs	r3, #1
 801a90a:	e050      	b.n	801a9ae <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801a90c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a910:	2b00      	cmp	r3, #0
 801a912:	da0f      	bge.n	801a934 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a914:	78fb      	ldrb	r3, [r7, #3]
 801a916:	f003 020f 	and.w	r2, r3, #15
 801a91a:	4613      	mov	r3, r2
 801a91c:	00db      	lsls	r3, r3, #3
 801a91e:	1a9b      	subs	r3, r3, r2
 801a920:	009b      	lsls	r3, r3, #2
 801a922:	3338      	adds	r3, #56	; 0x38
 801a924:	687a      	ldr	r2, [r7, #4]
 801a926:	4413      	add	r3, r2
 801a928:	3304      	adds	r3, #4
 801a92a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801a92c:	68fb      	ldr	r3, [r7, #12]
 801a92e:	2201      	movs	r2, #1
 801a930:	705a      	strb	r2, [r3, #1]
 801a932:	e00d      	b.n	801a950 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801a934:	78fa      	ldrb	r2, [r7, #3]
 801a936:	4613      	mov	r3, r2
 801a938:	00db      	lsls	r3, r3, #3
 801a93a:	1a9b      	subs	r3, r3, r2
 801a93c:	009b      	lsls	r3, r3, #2
 801a93e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801a942:	687a      	ldr	r2, [r7, #4]
 801a944:	4413      	add	r3, r2
 801a946:	3304      	adds	r3, #4
 801a948:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801a94a:	68fb      	ldr	r3, [r7, #12]
 801a94c:	2200      	movs	r2, #0
 801a94e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 801a950:	68fb      	ldr	r3, [r7, #12]
 801a952:	2201      	movs	r2, #1
 801a954:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801a956:	78fb      	ldrb	r3, [r7, #3]
 801a958:	f003 030f 	and.w	r3, r3, #15
 801a95c:	b2da      	uxtb	r2, r3
 801a95e:	68fb      	ldr	r3, [r7, #12]
 801a960:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801a962:	687b      	ldr	r3, [r7, #4]
 801a964:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801a968:	2b01      	cmp	r3, #1
 801a96a:	d101      	bne.n	801a970 <HAL_PCD_EP_SetStall+0x82>
 801a96c:	2302      	movs	r3, #2
 801a96e:	e01e      	b.n	801a9ae <HAL_PCD_EP_SetStall+0xc0>
 801a970:	687b      	ldr	r3, [r7, #4]
 801a972:	2201      	movs	r2, #1
 801a974:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	681b      	ldr	r3, [r3, #0]
 801a97c:	68f9      	ldr	r1, [r7, #12]
 801a97e:	4618      	mov	r0, r3
 801a980:	f004 f9a3 	bl	801ecca <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801a984:	78fb      	ldrb	r3, [r7, #3]
 801a986:	f003 030f 	and.w	r3, r3, #15
 801a98a:	2b00      	cmp	r3, #0
 801a98c:	d10a      	bne.n	801a9a4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 801a98e:	687b      	ldr	r3, [r7, #4]
 801a990:	6818      	ldr	r0, [r3, #0]
 801a992:	687b      	ldr	r3, [r7, #4]
 801a994:	691b      	ldr	r3, [r3, #16]
 801a996:	b2d9      	uxtb	r1, r3
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801a99e:	461a      	mov	r2, r3
 801a9a0:	f004 fb94 	bl	801f0cc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 801a9a4:	687b      	ldr	r3, [r7, #4]
 801a9a6:	2200      	movs	r2, #0
 801a9a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801a9ac:	2300      	movs	r3, #0
}
 801a9ae:	4618      	mov	r0, r3
 801a9b0:	3710      	adds	r7, #16
 801a9b2:	46bd      	mov	sp, r7
 801a9b4:	bd80      	pop	{r7, pc}

0801a9b6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801a9b6:	b580      	push	{r7, lr}
 801a9b8:	b084      	sub	sp, #16
 801a9ba:	af00      	add	r7, sp, #0
 801a9bc:	6078      	str	r0, [r7, #4]
 801a9be:	460b      	mov	r3, r1
 801a9c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 801a9c2:	78fb      	ldrb	r3, [r7, #3]
 801a9c4:	f003 020f 	and.w	r2, r3, #15
 801a9c8:	687b      	ldr	r3, [r7, #4]
 801a9ca:	685b      	ldr	r3, [r3, #4]
 801a9cc:	429a      	cmp	r2, r3
 801a9ce:	d901      	bls.n	801a9d4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 801a9d0:	2301      	movs	r3, #1
 801a9d2:	e042      	b.n	801aa5a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801a9d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a9d8:	2b00      	cmp	r3, #0
 801a9da:	da0f      	bge.n	801a9fc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a9dc:	78fb      	ldrb	r3, [r7, #3]
 801a9de:	f003 020f 	and.w	r2, r3, #15
 801a9e2:	4613      	mov	r3, r2
 801a9e4:	00db      	lsls	r3, r3, #3
 801a9e6:	1a9b      	subs	r3, r3, r2
 801a9e8:	009b      	lsls	r3, r3, #2
 801a9ea:	3338      	adds	r3, #56	; 0x38
 801a9ec:	687a      	ldr	r2, [r7, #4]
 801a9ee:	4413      	add	r3, r2
 801a9f0:	3304      	adds	r3, #4
 801a9f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801a9f4:	68fb      	ldr	r3, [r7, #12]
 801a9f6:	2201      	movs	r2, #1
 801a9f8:	705a      	strb	r2, [r3, #1]
 801a9fa:	e00f      	b.n	801aa1c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801a9fc:	78fb      	ldrb	r3, [r7, #3]
 801a9fe:	f003 020f 	and.w	r2, r3, #15
 801aa02:	4613      	mov	r3, r2
 801aa04:	00db      	lsls	r3, r3, #3
 801aa06:	1a9b      	subs	r3, r3, r2
 801aa08:	009b      	lsls	r3, r3, #2
 801aa0a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801aa0e:	687a      	ldr	r2, [r7, #4]
 801aa10:	4413      	add	r3, r2
 801aa12:	3304      	adds	r3, #4
 801aa14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801aa16:	68fb      	ldr	r3, [r7, #12]
 801aa18:	2200      	movs	r2, #0
 801aa1a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 801aa1c:	68fb      	ldr	r3, [r7, #12]
 801aa1e:	2200      	movs	r2, #0
 801aa20:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801aa22:	78fb      	ldrb	r3, [r7, #3]
 801aa24:	f003 030f 	and.w	r3, r3, #15
 801aa28:	b2da      	uxtb	r2, r3
 801aa2a:	68fb      	ldr	r3, [r7, #12]
 801aa2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801aa2e:	687b      	ldr	r3, [r7, #4]
 801aa30:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801aa34:	2b01      	cmp	r3, #1
 801aa36:	d101      	bne.n	801aa3c <HAL_PCD_EP_ClrStall+0x86>
 801aa38:	2302      	movs	r3, #2
 801aa3a:	e00e      	b.n	801aa5a <HAL_PCD_EP_ClrStall+0xa4>
 801aa3c:	687b      	ldr	r3, [r7, #4]
 801aa3e:	2201      	movs	r2, #1
 801aa40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 801aa44:	687b      	ldr	r3, [r7, #4]
 801aa46:	681b      	ldr	r3, [r3, #0]
 801aa48:	68f9      	ldr	r1, [r7, #12]
 801aa4a:	4618      	mov	r0, r3
 801aa4c:	f004 f9ab 	bl	801eda6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 801aa50:	687b      	ldr	r3, [r7, #4]
 801aa52:	2200      	movs	r2, #0
 801aa54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801aa58:	2300      	movs	r3, #0
}
 801aa5a:	4618      	mov	r0, r3
 801aa5c:	3710      	adds	r7, #16
 801aa5e:	46bd      	mov	sp, r7
 801aa60:	bd80      	pop	{r7, pc}

0801aa62 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801aa62:	b580      	push	{r7, lr}
 801aa64:	b082      	sub	sp, #8
 801aa66:	af00      	add	r7, sp, #0
 801aa68:	6078      	str	r0, [r7, #4]
 801aa6a:	460b      	mov	r3, r1
 801aa6c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 801aa6e:	687b      	ldr	r3, [r7, #4]
 801aa70:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801aa74:	2b01      	cmp	r3, #1
 801aa76:	d101      	bne.n	801aa7c <HAL_PCD_EP_Flush+0x1a>
 801aa78:	2302      	movs	r3, #2
 801aa7a:	e01b      	b.n	801aab4 <HAL_PCD_EP_Flush+0x52>
 801aa7c:	687b      	ldr	r3, [r7, #4]
 801aa7e:	2201      	movs	r2, #1
 801aa80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 801aa84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801aa88:	2b00      	cmp	r3, #0
 801aa8a:	da09      	bge.n	801aaa0 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 801aa8c:	687b      	ldr	r3, [r7, #4]
 801aa8e:	681a      	ldr	r2, [r3, #0]
 801aa90:	78fb      	ldrb	r3, [r7, #3]
 801aa92:	f003 030f 	and.w	r3, r3, #15
 801aa96:	4619      	mov	r1, r3
 801aa98:	4610      	mov	r0, r2
 801aa9a:	f003 fb03 	bl	801e0a4 <USB_FlushTxFifo>
 801aa9e:	e004      	b.n	801aaaa <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 801aaa0:	687b      	ldr	r3, [r7, #4]
 801aaa2:	681b      	ldr	r3, [r3, #0]
 801aaa4:	4618      	mov	r0, r3
 801aaa6:	f003 fb21 	bl	801e0ec <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 801aaaa:	687b      	ldr	r3, [r7, #4]
 801aaac:	2200      	movs	r2, #0
 801aaae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801aab2:	2300      	movs	r3, #0
}
 801aab4:	4618      	mov	r0, r3
 801aab6:	3708      	adds	r7, #8
 801aab8:	46bd      	mov	sp, r7
 801aaba:	bd80      	pop	{r7, pc}

0801aabc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801aabc:	b580      	push	{r7, lr}
 801aabe:	b08a      	sub	sp, #40	; 0x28
 801aac0:	af02      	add	r7, sp, #8
 801aac2:	6078      	str	r0, [r7, #4]
 801aac4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801aac6:	687b      	ldr	r3, [r7, #4]
 801aac8:	681b      	ldr	r3, [r3, #0]
 801aaca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801aacc:	697b      	ldr	r3, [r7, #20]
 801aace:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 801aad0:	683a      	ldr	r2, [r7, #0]
 801aad2:	4613      	mov	r3, r2
 801aad4:	00db      	lsls	r3, r3, #3
 801aad6:	1a9b      	subs	r3, r3, r2
 801aad8:	009b      	lsls	r3, r3, #2
 801aada:	3338      	adds	r3, #56	; 0x38
 801aadc:	687a      	ldr	r2, [r7, #4]
 801aade:	4413      	add	r3, r2
 801aae0:	3304      	adds	r3, #4
 801aae2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 801aae4:	68fb      	ldr	r3, [r7, #12]
 801aae6:	699a      	ldr	r2, [r3, #24]
 801aae8:	68fb      	ldr	r3, [r7, #12]
 801aaea:	695b      	ldr	r3, [r3, #20]
 801aaec:	429a      	cmp	r2, r3
 801aaee:	d901      	bls.n	801aaf4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 801aaf0:	2301      	movs	r3, #1
 801aaf2:	e06c      	b.n	801abce <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 801aaf4:	68fb      	ldr	r3, [r7, #12]
 801aaf6:	695a      	ldr	r2, [r3, #20]
 801aaf8:	68fb      	ldr	r3, [r7, #12]
 801aafa:	699b      	ldr	r3, [r3, #24]
 801aafc:	1ad3      	subs	r3, r2, r3
 801aafe:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 801ab00:	68fb      	ldr	r3, [r7, #12]
 801ab02:	689b      	ldr	r3, [r3, #8]
 801ab04:	69fa      	ldr	r2, [r7, #28]
 801ab06:	429a      	cmp	r2, r3
 801ab08:	d902      	bls.n	801ab10 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 801ab0a:	68fb      	ldr	r3, [r7, #12]
 801ab0c:	689b      	ldr	r3, [r3, #8]
 801ab0e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 801ab10:	69fb      	ldr	r3, [r7, #28]
 801ab12:	3303      	adds	r3, #3
 801ab14:	089b      	lsrs	r3, r3, #2
 801ab16:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801ab18:	e02b      	b.n	801ab72 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 801ab1a:	68fb      	ldr	r3, [r7, #12]
 801ab1c:	695a      	ldr	r2, [r3, #20]
 801ab1e:	68fb      	ldr	r3, [r7, #12]
 801ab20:	699b      	ldr	r3, [r3, #24]
 801ab22:	1ad3      	subs	r3, r2, r3
 801ab24:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 801ab26:	68fb      	ldr	r3, [r7, #12]
 801ab28:	689b      	ldr	r3, [r3, #8]
 801ab2a:	69fa      	ldr	r2, [r7, #28]
 801ab2c:	429a      	cmp	r2, r3
 801ab2e:	d902      	bls.n	801ab36 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 801ab30:	68fb      	ldr	r3, [r7, #12]
 801ab32:	689b      	ldr	r3, [r3, #8]
 801ab34:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 801ab36:	69fb      	ldr	r3, [r7, #28]
 801ab38:	3303      	adds	r3, #3
 801ab3a:	089b      	lsrs	r3, r3, #2
 801ab3c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 801ab3e:	68fb      	ldr	r3, [r7, #12]
 801ab40:	68d9      	ldr	r1, [r3, #12]
 801ab42:	683b      	ldr	r3, [r7, #0]
 801ab44:	b2da      	uxtb	r2, r3
 801ab46:	69fb      	ldr	r3, [r7, #28]
 801ab48:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 801ab4a:	687b      	ldr	r3, [r7, #4]
 801ab4c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 801ab4e:	b2db      	uxtb	r3, r3
 801ab50:	9300      	str	r3, [sp, #0]
 801ab52:	4603      	mov	r3, r0
 801ab54:	6978      	ldr	r0, [r7, #20]
 801ab56:	f004 f822 	bl	801eb9e <USB_WritePacket>

    ep->xfer_buff  += len;
 801ab5a:	68fb      	ldr	r3, [r7, #12]
 801ab5c:	68da      	ldr	r2, [r3, #12]
 801ab5e:	69fb      	ldr	r3, [r7, #28]
 801ab60:	441a      	add	r2, r3
 801ab62:	68fb      	ldr	r3, [r7, #12]
 801ab64:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 801ab66:	68fb      	ldr	r3, [r7, #12]
 801ab68:	699a      	ldr	r2, [r3, #24]
 801ab6a:	69fb      	ldr	r3, [r7, #28]
 801ab6c:	441a      	add	r2, r3
 801ab6e:	68fb      	ldr	r3, [r7, #12]
 801ab70:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801ab72:	683b      	ldr	r3, [r7, #0]
 801ab74:	015a      	lsls	r2, r3, #5
 801ab76:	693b      	ldr	r3, [r7, #16]
 801ab78:	4413      	add	r3, r2
 801ab7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ab7e:	699b      	ldr	r3, [r3, #24]
 801ab80:	b29b      	uxth	r3, r3
 801ab82:	69ba      	ldr	r2, [r7, #24]
 801ab84:	429a      	cmp	r2, r3
 801ab86:	d809      	bhi.n	801ab9c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801ab88:	68fb      	ldr	r3, [r7, #12]
 801ab8a:	699a      	ldr	r2, [r3, #24]
 801ab8c:	68fb      	ldr	r3, [r7, #12]
 801ab8e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801ab90:	429a      	cmp	r2, r3
 801ab92:	d203      	bcs.n	801ab9c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801ab94:	68fb      	ldr	r3, [r7, #12]
 801ab96:	695b      	ldr	r3, [r3, #20]
 801ab98:	2b00      	cmp	r3, #0
 801ab9a:	d1be      	bne.n	801ab1a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 801ab9c:	68fb      	ldr	r3, [r7, #12]
 801ab9e:	695a      	ldr	r2, [r3, #20]
 801aba0:	68fb      	ldr	r3, [r7, #12]
 801aba2:	699b      	ldr	r3, [r3, #24]
 801aba4:	429a      	cmp	r2, r3
 801aba6:	d811      	bhi.n	801abcc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 801aba8:	683b      	ldr	r3, [r7, #0]
 801abaa:	f003 030f 	and.w	r3, r3, #15
 801abae:	2201      	movs	r2, #1
 801abb0:	fa02 f303 	lsl.w	r3, r2, r3
 801abb4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 801abb6:	693b      	ldr	r3, [r7, #16]
 801abb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801abbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801abbe:	68bb      	ldr	r3, [r7, #8]
 801abc0:	43db      	mvns	r3, r3
 801abc2:	6939      	ldr	r1, [r7, #16]
 801abc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801abc8:	4013      	ands	r3, r2
 801abca:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 801abcc:	2300      	movs	r3, #0
}
 801abce:	4618      	mov	r0, r3
 801abd0:	3720      	adds	r7, #32
 801abd2:	46bd      	mov	sp, r7
 801abd4:	bd80      	pop	{r7, pc}
	...

0801abd8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801abd8:	b580      	push	{r7, lr}
 801abda:	b086      	sub	sp, #24
 801abdc:	af00      	add	r7, sp, #0
 801abde:	6078      	str	r0, [r7, #4]
 801abe0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801abe2:	687b      	ldr	r3, [r7, #4]
 801abe4:	681b      	ldr	r3, [r3, #0]
 801abe6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801abe8:	697b      	ldr	r3, [r7, #20]
 801abea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801abec:	697b      	ldr	r3, [r7, #20]
 801abee:	333c      	adds	r3, #60	; 0x3c
 801abf0:	3304      	adds	r3, #4
 801abf2:	681b      	ldr	r3, [r3, #0]
 801abf4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801abf6:	683b      	ldr	r3, [r7, #0]
 801abf8:	015a      	lsls	r2, r3, #5
 801abfa:	693b      	ldr	r3, [r7, #16]
 801abfc:	4413      	add	r3, r2
 801abfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ac02:	689b      	ldr	r3, [r3, #8]
 801ac04:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 801ac06:	687b      	ldr	r3, [r7, #4]
 801ac08:	691b      	ldr	r3, [r3, #16]
 801ac0a:	2b01      	cmp	r3, #1
 801ac0c:	f040 80a0 	bne.w	801ad50 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 801ac10:	68bb      	ldr	r3, [r7, #8]
 801ac12:	f003 0308 	and.w	r3, r3, #8
 801ac16:	2b00      	cmp	r3, #0
 801ac18:	d015      	beq.n	801ac46 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801ac1a:	68fb      	ldr	r3, [r7, #12]
 801ac1c:	4a72      	ldr	r2, [pc, #456]	; (801ade8 <PCD_EP_OutXfrComplete_int+0x210>)
 801ac1e:	4293      	cmp	r3, r2
 801ac20:	f240 80dd 	bls.w	801adde <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801ac24:	68bb      	ldr	r3, [r7, #8]
 801ac26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801ac2a:	2b00      	cmp	r3, #0
 801ac2c:	f000 80d7 	beq.w	801adde <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801ac30:	683b      	ldr	r3, [r7, #0]
 801ac32:	015a      	lsls	r2, r3, #5
 801ac34:	693b      	ldr	r3, [r7, #16]
 801ac36:	4413      	add	r3, r2
 801ac38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ac3c:	461a      	mov	r2, r3
 801ac3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801ac42:	6093      	str	r3, [r2, #8]
 801ac44:	e0cb      	b.n	801adde <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 801ac46:	68bb      	ldr	r3, [r7, #8]
 801ac48:	f003 0320 	and.w	r3, r3, #32
 801ac4c:	2b00      	cmp	r3, #0
 801ac4e:	d009      	beq.n	801ac64 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801ac50:	683b      	ldr	r3, [r7, #0]
 801ac52:	015a      	lsls	r2, r3, #5
 801ac54:	693b      	ldr	r3, [r7, #16]
 801ac56:	4413      	add	r3, r2
 801ac58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ac5c:	461a      	mov	r2, r3
 801ac5e:	2320      	movs	r3, #32
 801ac60:	6093      	str	r3, [r2, #8]
 801ac62:	e0bc      	b.n	801adde <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 801ac64:	68bb      	ldr	r3, [r7, #8]
 801ac66:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801ac6a:	2b00      	cmp	r3, #0
 801ac6c:	f040 80b7 	bne.w	801adde <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801ac70:	68fb      	ldr	r3, [r7, #12]
 801ac72:	4a5d      	ldr	r2, [pc, #372]	; (801ade8 <PCD_EP_OutXfrComplete_int+0x210>)
 801ac74:	4293      	cmp	r3, r2
 801ac76:	d90f      	bls.n	801ac98 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801ac78:	68bb      	ldr	r3, [r7, #8]
 801ac7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801ac7e:	2b00      	cmp	r3, #0
 801ac80:	d00a      	beq.n	801ac98 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801ac82:	683b      	ldr	r3, [r7, #0]
 801ac84:	015a      	lsls	r2, r3, #5
 801ac86:	693b      	ldr	r3, [r7, #16]
 801ac88:	4413      	add	r3, r2
 801ac8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ac8e:	461a      	mov	r2, r3
 801ac90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801ac94:	6093      	str	r3, [r2, #8]
 801ac96:	e0a2      	b.n	801adde <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 801ac98:	6879      	ldr	r1, [r7, #4]
 801ac9a:	683a      	ldr	r2, [r7, #0]
 801ac9c:	4613      	mov	r3, r2
 801ac9e:	00db      	lsls	r3, r3, #3
 801aca0:	1a9b      	subs	r3, r3, r2
 801aca2:	009b      	lsls	r3, r3, #2
 801aca4:	440b      	add	r3, r1
 801aca6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 801acaa:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 801acac:	683b      	ldr	r3, [r7, #0]
 801acae:	0159      	lsls	r1, r3, #5
 801acb0:	693b      	ldr	r3, [r7, #16]
 801acb2:	440b      	add	r3, r1
 801acb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801acb8:	691b      	ldr	r3, [r3, #16]
 801acba:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 801acbe:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 801acc0:	6878      	ldr	r0, [r7, #4]
 801acc2:	683a      	ldr	r2, [r7, #0]
 801acc4:	4613      	mov	r3, r2
 801acc6:	00db      	lsls	r3, r3, #3
 801acc8:	1a9b      	subs	r3, r3, r2
 801acca:	009b      	lsls	r3, r3, #2
 801accc:	4403      	add	r3, r0
 801acce:	f503 7305 	add.w	r3, r3, #532	; 0x214
 801acd2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 801acd4:	6879      	ldr	r1, [r7, #4]
 801acd6:	683a      	ldr	r2, [r7, #0]
 801acd8:	4613      	mov	r3, r2
 801acda:	00db      	lsls	r3, r3, #3
 801acdc:	1a9b      	subs	r3, r3, r2
 801acde:	009b      	lsls	r3, r3, #2
 801ace0:	440b      	add	r3, r1
 801ace2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801ace6:	6819      	ldr	r1, [r3, #0]
 801ace8:	6878      	ldr	r0, [r7, #4]
 801acea:	683a      	ldr	r2, [r7, #0]
 801acec:	4613      	mov	r3, r2
 801acee:	00db      	lsls	r3, r3, #3
 801acf0:	1a9b      	subs	r3, r3, r2
 801acf2:	009b      	lsls	r3, r3, #2
 801acf4:	4403      	add	r3, r0
 801acf6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 801acfa:	681b      	ldr	r3, [r3, #0]
 801acfc:	4419      	add	r1, r3
 801acfe:	6878      	ldr	r0, [r7, #4]
 801ad00:	683a      	ldr	r2, [r7, #0]
 801ad02:	4613      	mov	r3, r2
 801ad04:	00db      	lsls	r3, r3, #3
 801ad06:	1a9b      	subs	r3, r3, r2
 801ad08:	009b      	lsls	r3, r3, #2
 801ad0a:	4403      	add	r3, r0
 801ad0c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801ad10:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 801ad12:	683b      	ldr	r3, [r7, #0]
 801ad14:	2b00      	cmp	r3, #0
 801ad16:	d114      	bne.n	801ad42 <PCD_EP_OutXfrComplete_int+0x16a>
 801ad18:	6879      	ldr	r1, [r7, #4]
 801ad1a:	683a      	ldr	r2, [r7, #0]
 801ad1c:	4613      	mov	r3, r2
 801ad1e:	00db      	lsls	r3, r3, #3
 801ad20:	1a9b      	subs	r3, r3, r2
 801ad22:	009b      	lsls	r3, r3, #2
 801ad24:	440b      	add	r3, r1
 801ad26:	f503 7304 	add.w	r3, r3, #528	; 0x210
 801ad2a:	681b      	ldr	r3, [r3, #0]
 801ad2c:	2b00      	cmp	r3, #0
 801ad2e:	d108      	bne.n	801ad42 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801ad30:	687b      	ldr	r3, [r7, #4]
 801ad32:	6818      	ldr	r0, [r3, #0]
 801ad34:	687b      	ldr	r3, [r7, #4]
 801ad36:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801ad3a:	461a      	mov	r2, r3
 801ad3c:	2101      	movs	r1, #1
 801ad3e:	f004 f9c5 	bl	801f0cc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801ad42:	683b      	ldr	r3, [r7, #0]
 801ad44:	b2db      	uxtb	r3, r3
 801ad46:	4619      	mov	r1, r3
 801ad48:	6878      	ldr	r0, [r7, #4]
 801ad4a:	f007 fbef 	bl	802252c <HAL_PCD_DataOutStageCallback>
 801ad4e:	e046      	b.n	801adde <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 801ad50:	68fb      	ldr	r3, [r7, #12]
 801ad52:	4a26      	ldr	r2, [pc, #152]	; (801adec <PCD_EP_OutXfrComplete_int+0x214>)
 801ad54:	4293      	cmp	r3, r2
 801ad56:	d124      	bne.n	801ada2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 801ad58:	68bb      	ldr	r3, [r7, #8]
 801ad5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801ad5e:	2b00      	cmp	r3, #0
 801ad60:	d00a      	beq.n	801ad78 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801ad62:	683b      	ldr	r3, [r7, #0]
 801ad64:	015a      	lsls	r2, r3, #5
 801ad66:	693b      	ldr	r3, [r7, #16]
 801ad68:	4413      	add	r3, r2
 801ad6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ad6e:	461a      	mov	r2, r3
 801ad70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801ad74:	6093      	str	r3, [r2, #8]
 801ad76:	e032      	b.n	801adde <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 801ad78:	68bb      	ldr	r3, [r7, #8]
 801ad7a:	f003 0320 	and.w	r3, r3, #32
 801ad7e:	2b00      	cmp	r3, #0
 801ad80:	d008      	beq.n	801ad94 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801ad82:	683b      	ldr	r3, [r7, #0]
 801ad84:	015a      	lsls	r2, r3, #5
 801ad86:	693b      	ldr	r3, [r7, #16]
 801ad88:	4413      	add	r3, r2
 801ad8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ad8e:	461a      	mov	r2, r3
 801ad90:	2320      	movs	r3, #32
 801ad92:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801ad94:	683b      	ldr	r3, [r7, #0]
 801ad96:	b2db      	uxtb	r3, r3
 801ad98:	4619      	mov	r1, r3
 801ad9a:	6878      	ldr	r0, [r7, #4]
 801ad9c:	f007 fbc6 	bl	802252c <HAL_PCD_DataOutStageCallback>
 801ada0:	e01d      	b.n	801adde <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 801ada2:	683b      	ldr	r3, [r7, #0]
 801ada4:	2b00      	cmp	r3, #0
 801ada6:	d114      	bne.n	801add2 <PCD_EP_OutXfrComplete_int+0x1fa>
 801ada8:	6879      	ldr	r1, [r7, #4]
 801adaa:	683a      	ldr	r2, [r7, #0]
 801adac:	4613      	mov	r3, r2
 801adae:	00db      	lsls	r3, r3, #3
 801adb0:	1a9b      	subs	r3, r3, r2
 801adb2:	009b      	lsls	r3, r3, #2
 801adb4:	440b      	add	r3, r1
 801adb6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 801adba:	681b      	ldr	r3, [r3, #0]
 801adbc:	2b00      	cmp	r3, #0
 801adbe:	d108      	bne.n	801add2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 801adc0:	687b      	ldr	r3, [r7, #4]
 801adc2:	6818      	ldr	r0, [r3, #0]
 801adc4:	687b      	ldr	r3, [r7, #4]
 801adc6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801adca:	461a      	mov	r2, r3
 801adcc:	2100      	movs	r1, #0
 801adce:	f004 f97d 	bl	801f0cc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801add2:	683b      	ldr	r3, [r7, #0]
 801add4:	b2db      	uxtb	r3, r3
 801add6:	4619      	mov	r1, r3
 801add8:	6878      	ldr	r0, [r7, #4]
 801adda:	f007 fba7 	bl	802252c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 801adde:	2300      	movs	r3, #0
}
 801ade0:	4618      	mov	r0, r3
 801ade2:	3718      	adds	r7, #24
 801ade4:	46bd      	mov	sp, r7
 801ade6:	bd80      	pop	{r7, pc}
 801ade8:	4f54300a 	.word	0x4f54300a
 801adec:	4f54310a 	.word	0x4f54310a

0801adf0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801adf0:	b580      	push	{r7, lr}
 801adf2:	b086      	sub	sp, #24
 801adf4:	af00      	add	r7, sp, #0
 801adf6:	6078      	str	r0, [r7, #4]
 801adf8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801adfa:	687b      	ldr	r3, [r7, #4]
 801adfc:	681b      	ldr	r3, [r3, #0]
 801adfe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ae00:	697b      	ldr	r3, [r7, #20]
 801ae02:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801ae04:	697b      	ldr	r3, [r7, #20]
 801ae06:	333c      	adds	r3, #60	; 0x3c
 801ae08:	3304      	adds	r3, #4
 801ae0a:	681b      	ldr	r3, [r3, #0]
 801ae0c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801ae0e:	683b      	ldr	r3, [r7, #0]
 801ae10:	015a      	lsls	r2, r3, #5
 801ae12:	693b      	ldr	r3, [r7, #16]
 801ae14:	4413      	add	r3, r2
 801ae16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ae1a:	689b      	ldr	r3, [r3, #8]
 801ae1c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801ae1e:	68fb      	ldr	r3, [r7, #12]
 801ae20:	4a15      	ldr	r2, [pc, #84]	; (801ae78 <PCD_EP_OutSetupPacket_int+0x88>)
 801ae22:	4293      	cmp	r3, r2
 801ae24:	d90e      	bls.n	801ae44 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801ae26:	68bb      	ldr	r3, [r7, #8]
 801ae28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801ae2c:	2b00      	cmp	r3, #0
 801ae2e:	d009      	beq.n	801ae44 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801ae30:	683b      	ldr	r3, [r7, #0]
 801ae32:	015a      	lsls	r2, r3, #5
 801ae34:	693b      	ldr	r3, [r7, #16]
 801ae36:	4413      	add	r3, r2
 801ae38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ae3c:	461a      	mov	r2, r3
 801ae3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801ae42:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 801ae44:	6878      	ldr	r0, [r7, #4]
 801ae46:	f007 fb5f 	bl	8022508 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 801ae4a:	68fb      	ldr	r3, [r7, #12]
 801ae4c:	4a0a      	ldr	r2, [pc, #40]	; (801ae78 <PCD_EP_OutSetupPacket_int+0x88>)
 801ae4e:	4293      	cmp	r3, r2
 801ae50:	d90c      	bls.n	801ae6c <PCD_EP_OutSetupPacket_int+0x7c>
 801ae52:	687b      	ldr	r3, [r7, #4]
 801ae54:	691b      	ldr	r3, [r3, #16]
 801ae56:	2b01      	cmp	r3, #1
 801ae58:	d108      	bne.n	801ae6c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801ae5a:	687b      	ldr	r3, [r7, #4]
 801ae5c:	6818      	ldr	r0, [r3, #0]
 801ae5e:	687b      	ldr	r3, [r7, #4]
 801ae60:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801ae64:	461a      	mov	r2, r3
 801ae66:	2101      	movs	r1, #1
 801ae68:	f004 f930 	bl	801f0cc <USB_EP0_OutStart>
  }

  return HAL_OK;
 801ae6c:	2300      	movs	r3, #0
}
 801ae6e:	4618      	mov	r0, r3
 801ae70:	3718      	adds	r7, #24
 801ae72:	46bd      	mov	sp, r7
 801ae74:	bd80      	pop	{r7, pc}
 801ae76:	bf00      	nop
 801ae78:	4f54300a 	.word	0x4f54300a

0801ae7c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 801ae7c:	b480      	push	{r7}
 801ae7e:	b085      	sub	sp, #20
 801ae80:	af00      	add	r7, sp, #0
 801ae82:	6078      	str	r0, [r7, #4]
 801ae84:	460b      	mov	r3, r1
 801ae86:	70fb      	strb	r3, [r7, #3]
 801ae88:	4613      	mov	r3, r2
 801ae8a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 801ae8c:	687b      	ldr	r3, [r7, #4]
 801ae8e:	681b      	ldr	r3, [r3, #0]
 801ae90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ae92:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 801ae94:	78fb      	ldrb	r3, [r7, #3]
 801ae96:	2b00      	cmp	r3, #0
 801ae98:	d107      	bne.n	801aeaa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 801ae9a:	883b      	ldrh	r3, [r7, #0]
 801ae9c:	0419      	lsls	r1, r3, #16
 801ae9e:	687b      	ldr	r3, [r7, #4]
 801aea0:	681b      	ldr	r3, [r3, #0]
 801aea2:	68ba      	ldr	r2, [r7, #8]
 801aea4:	430a      	orrs	r2, r1
 801aea6:	629a      	str	r2, [r3, #40]	; 0x28
 801aea8:	e028      	b.n	801aefc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 801aeaa:	687b      	ldr	r3, [r7, #4]
 801aeac:	681b      	ldr	r3, [r3, #0]
 801aeae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aeb0:	0c1b      	lsrs	r3, r3, #16
 801aeb2:	68ba      	ldr	r2, [r7, #8]
 801aeb4:	4413      	add	r3, r2
 801aeb6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 801aeb8:	2300      	movs	r3, #0
 801aeba:	73fb      	strb	r3, [r7, #15]
 801aebc:	e00d      	b.n	801aeda <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 801aebe:	687b      	ldr	r3, [r7, #4]
 801aec0:	681a      	ldr	r2, [r3, #0]
 801aec2:	7bfb      	ldrb	r3, [r7, #15]
 801aec4:	3340      	adds	r3, #64	; 0x40
 801aec6:	009b      	lsls	r3, r3, #2
 801aec8:	4413      	add	r3, r2
 801aeca:	685b      	ldr	r3, [r3, #4]
 801aecc:	0c1b      	lsrs	r3, r3, #16
 801aece:	68ba      	ldr	r2, [r7, #8]
 801aed0:	4413      	add	r3, r2
 801aed2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 801aed4:	7bfb      	ldrb	r3, [r7, #15]
 801aed6:	3301      	adds	r3, #1
 801aed8:	73fb      	strb	r3, [r7, #15]
 801aeda:	7bfa      	ldrb	r2, [r7, #15]
 801aedc:	78fb      	ldrb	r3, [r7, #3]
 801aede:	3b01      	subs	r3, #1
 801aee0:	429a      	cmp	r2, r3
 801aee2:	d3ec      	bcc.n	801aebe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 801aee4:	883b      	ldrh	r3, [r7, #0]
 801aee6:	0418      	lsls	r0, r3, #16
 801aee8:	687b      	ldr	r3, [r7, #4]
 801aeea:	6819      	ldr	r1, [r3, #0]
 801aeec:	78fb      	ldrb	r3, [r7, #3]
 801aeee:	3b01      	subs	r3, #1
 801aef0:	68ba      	ldr	r2, [r7, #8]
 801aef2:	4302      	orrs	r2, r0
 801aef4:	3340      	adds	r3, #64	; 0x40
 801aef6:	009b      	lsls	r3, r3, #2
 801aef8:	440b      	add	r3, r1
 801aefa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 801aefc:	2300      	movs	r3, #0
}
 801aefe:	4618      	mov	r0, r3
 801af00:	3714      	adds	r7, #20
 801af02:	46bd      	mov	sp, r7
 801af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af08:	4770      	bx	lr

0801af0a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 801af0a:	b480      	push	{r7}
 801af0c:	b083      	sub	sp, #12
 801af0e:	af00      	add	r7, sp, #0
 801af10:	6078      	str	r0, [r7, #4]
 801af12:	460b      	mov	r3, r1
 801af14:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 801af16:	687b      	ldr	r3, [r7, #4]
 801af18:	681b      	ldr	r3, [r3, #0]
 801af1a:	887a      	ldrh	r2, [r7, #2]
 801af1c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 801af1e:	2300      	movs	r3, #0
}
 801af20:	4618      	mov	r0, r3
 801af22:	370c      	adds	r7, #12
 801af24:	46bd      	mov	sp, r7
 801af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af2a:	4770      	bx	lr

0801af2c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801af2c:	b480      	push	{r7}
 801af2e:	b085      	sub	sp, #20
 801af30:	af00      	add	r7, sp, #0
 801af32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801af34:	687b      	ldr	r3, [r7, #4]
 801af36:	681b      	ldr	r3, [r3, #0]
 801af38:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 801af3a:	687b      	ldr	r3, [r7, #4]
 801af3c:	2201      	movs	r2, #1
 801af3e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 801af42:	687b      	ldr	r3, [r7, #4]
 801af44:	2200      	movs	r2, #0
 801af46:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 801af4a:	68fb      	ldr	r3, [r7, #12]
 801af4c:	699b      	ldr	r3, [r3, #24]
 801af4e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801af52:	68fb      	ldr	r3, [r7, #12]
 801af54:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 801af56:	68fb      	ldr	r3, [r7, #12]
 801af58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801af5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801af5e:	f043 0303 	orr.w	r3, r3, #3
 801af62:	68fa      	ldr	r2, [r7, #12]
 801af64:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 801af66:	2300      	movs	r3, #0
}
 801af68:	4618      	mov	r0, r3
 801af6a:	3714      	adds	r7, #20
 801af6c:	46bd      	mov	sp, r7
 801af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af72:	4770      	bx	lr

0801af74 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 801af74:	b580      	push	{r7, lr}
 801af76:	b082      	sub	sp, #8
 801af78:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 801af7a:	2300      	movs	r3, #0
 801af7c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 801af7e:	2300      	movs	r3, #0
 801af80:	603b      	str	r3, [r7, #0]
 801af82:	4b20      	ldr	r3, [pc, #128]	; (801b004 <HAL_PWREx_EnableOverDrive+0x90>)
 801af84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801af86:	4a1f      	ldr	r2, [pc, #124]	; (801b004 <HAL_PWREx_EnableOverDrive+0x90>)
 801af88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801af8c:	6413      	str	r3, [r2, #64]	; 0x40
 801af8e:	4b1d      	ldr	r3, [pc, #116]	; (801b004 <HAL_PWREx_EnableOverDrive+0x90>)
 801af90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801af92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801af96:	603b      	str	r3, [r7, #0]
 801af98:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 801af9a:	4b1b      	ldr	r3, [pc, #108]	; (801b008 <HAL_PWREx_EnableOverDrive+0x94>)
 801af9c:	2201      	movs	r2, #1
 801af9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801afa0:	f7fd f9e8 	bl	8018374 <HAL_GetTick>
 801afa4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801afa6:	e009      	b.n	801afbc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801afa8:	f7fd f9e4 	bl	8018374 <HAL_GetTick>
 801afac:	4602      	mov	r2, r0
 801afae:	687b      	ldr	r3, [r7, #4]
 801afb0:	1ad3      	subs	r3, r2, r3
 801afb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801afb6:	d901      	bls.n	801afbc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 801afb8:	2303      	movs	r3, #3
 801afba:	e01f      	b.n	801affc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801afbc:	4b13      	ldr	r3, [pc, #76]	; (801b00c <HAL_PWREx_EnableOverDrive+0x98>)
 801afbe:	685b      	ldr	r3, [r3, #4]
 801afc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801afc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801afc8:	d1ee      	bne.n	801afa8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 801afca:	4b11      	ldr	r3, [pc, #68]	; (801b010 <HAL_PWREx_EnableOverDrive+0x9c>)
 801afcc:	2201      	movs	r2, #1
 801afce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801afd0:	f7fd f9d0 	bl	8018374 <HAL_GetTick>
 801afd4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801afd6:	e009      	b.n	801afec <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801afd8:	f7fd f9cc 	bl	8018374 <HAL_GetTick>
 801afdc:	4602      	mov	r2, r0
 801afde:	687b      	ldr	r3, [r7, #4]
 801afe0:	1ad3      	subs	r3, r2, r3
 801afe2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801afe6:	d901      	bls.n	801afec <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 801afe8:	2303      	movs	r3, #3
 801afea:	e007      	b.n	801affc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801afec:	4b07      	ldr	r3, [pc, #28]	; (801b00c <HAL_PWREx_EnableOverDrive+0x98>)
 801afee:	685b      	ldr	r3, [r3, #4]
 801aff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801aff4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801aff8:	d1ee      	bne.n	801afd8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 801affa:	2300      	movs	r3, #0
}
 801affc:	4618      	mov	r0, r3
 801affe:	3708      	adds	r7, #8
 801b000:	46bd      	mov	sp, r7
 801b002:	bd80      	pop	{r7, pc}
 801b004:	40023800 	.word	0x40023800
 801b008:	420e0040 	.word	0x420e0040
 801b00c:	40007000 	.word	0x40007000
 801b010:	420e0044 	.word	0x420e0044

0801b014 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801b014:	b580      	push	{r7, lr}
 801b016:	b084      	sub	sp, #16
 801b018:	af00      	add	r7, sp, #0
 801b01a:	6078      	str	r0, [r7, #4]
 801b01c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801b01e:	687b      	ldr	r3, [r7, #4]
 801b020:	2b00      	cmp	r3, #0
 801b022:	d101      	bne.n	801b028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801b024:	2301      	movs	r3, #1
 801b026:	e0cc      	b.n	801b1c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801b028:	4b68      	ldr	r3, [pc, #416]	; (801b1cc <HAL_RCC_ClockConfig+0x1b8>)
 801b02a:	681b      	ldr	r3, [r3, #0]
 801b02c:	f003 030f 	and.w	r3, r3, #15
 801b030:	683a      	ldr	r2, [r7, #0]
 801b032:	429a      	cmp	r2, r3
 801b034:	d90c      	bls.n	801b050 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b036:	4b65      	ldr	r3, [pc, #404]	; (801b1cc <HAL_RCC_ClockConfig+0x1b8>)
 801b038:	683a      	ldr	r2, [r7, #0]
 801b03a:	b2d2      	uxtb	r2, r2
 801b03c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801b03e:	4b63      	ldr	r3, [pc, #396]	; (801b1cc <HAL_RCC_ClockConfig+0x1b8>)
 801b040:	681b      	ldr	r3, [r3, #0]
 801b042:	f003 030f 	and.w	r3, r3, #15
 801b046:	683a      	ldr	r2, [r7, #0]
 801b048:	429a      	cmp	r2, r3
 801b04a:	d001      	beq.n	801b050 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801b04c:	2301      	movs	r3, #1
 801b04e:	e0b8      	b.n	801b1c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801b050:	687b      	ldr	r3, [r7, #4]
 801b052:	681b      	ldr	r3, [r3, #0]
 801b054:	f003 0302 	and.w	r3, r3, #2
 801b058:	2b00      	cmp	r3, #0
 801b05a:	d020      	beq.n	801b09e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b05c:	687b      	ldr	r3, [r7, #4]
 801b05e:	681b      	ldr	r3, [r3, #0]
 801b060:	f003 0304 	and.w	r3, r3, #4
 801b064:	2b00      	cmp	r3, #0
 801b066:	d005      	beq.n	801b074 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801b068:	4b59      	ldr	r3, [pc, #356]	; (801b1d0 <HAL_RCC_ClockConfig+0x1bc>)
 801b06a:	689b      	ldr	r3, [r3, #8]
 801b06c:	4a58      	ldr	r2, [pc, #352]	; (801b1d0 <HAL_RCC_ClockConfig+0x1bc>)
 801b06e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801b072:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b074:	687b      	ldr	r3, [r7, #4]
 801b076:	681b      	ldr	r3, [r3, #0]
 801b078:	f003 0308 	and.w	r3, r3, #8
 801b07c:	2b00      	cmp	r3, #0
 801b07e:	d005      	beq.n	801b08c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801b080:	4b53      	ldr	r3, [pc, #332]	; (801b1d0 <HAL_RCC_ClockConfig+0x1bc>)
 801b082:	689b      	ldr	r3, [r3, #8]
 801b084:	4a52      	ldr	r2, [pc, #328]	; (801b1d0 <HAL_RCC_ClockConfig+0x1bc>)
 801b086:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801b08a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801b08c:	4b50      	ldr	r3, [pc, #320]	; (801b1d0 <HAL_RCC_ClockConfig+0x1bc>)
 801b08e:	689b      	ldr	r3, [r3, #8]
 801b090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801b094:	687b      	ldr	r3, [r7, #4]
 801b096:	689b      	ldr	r3, [r3, #8]
 801b098:	494d      	ldr	r1, [pc, #308]	; (801b1d0 <HAL_RCC_ClockConfig+0x1bc>)
 801b09a:	4313      	orrs	r3, r2
 801b09c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801b09e:	687b      	ldr	r3, [r7, #4]
 801b0a0:	681b      	ldr	r3, [r3, #0]
 801b0a2:	f003 0301 	and.w	r3, r3, #1
 801b0a6:	2b00      	cmp	r3, #0
 801b0a8:	d044      	beq.n	801b134 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801b0aa:	687b      	ldr	r3, [r7, #4]
 801b0ac:	685b      	ldr	r3, [r3, #4]
 801b0ae:	2b01      	cmp	r3, #1
 801b0b0:	d107      	bne.n	801b0c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801b0b2:	4b47      	ldr	r3, [pc, #284]	; (801b1d0 <HAL_RCC_ClockConfig+0x1bc>)
 801b0b4:	681b      	ldr	r3, [r3, #0]
 801b0b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b0ba:	2b00      	cmp	r3, #0
 801b0bc:	d119      	bne.n	801b0f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801b0be:	2301      	movs	r3, #1
 801b0c0:	e07f      	b.n	801b1c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801b0c2:	687b      	ldr	r3, [r7, #4]
 801b0c4:	685b      	ldr	r3, [r3, #4]
 801b0c6:	2b02      	cmp	r3, #2
 801b0c8:	d003      	beq.n	801b0d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801b0ca:	687b      	ldr	r3, [r7, #4]
 801b0cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801b0ce:	2b03      	cmp	r3, #3
 801b0d0:	d107      	bne.n	801b0e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801b0d2:	4b3f      	ldr	r3, [pc, #252]	; (801b1d0 <HAL_RCC_ClockConfig+0x1bc>)
 801b0d4:	681b      	ldr	r3, [r3, #0]
 801b0d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b0da:	2b00      	cmp	r3, #0
 801b0dc:	d109      	bne.n	801b0f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801b0de:	2301      	movs	r3, #1
 801b0e0:	e06f      	b.n	801b1c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801b0e2:	4b3b      	ldr	r3, [pc, #236]	; (801b1d0 <HAL_RCC_ClockConfig+0x1bc>)
 801b0e4:	681b      	ldr	r3, [r3, #0]
 801b0e6:	f003 0302 	and.w	r3, r3, #2
 801b0ea:	2b00      	cmp	r3, #0
 801b0ec:	d101      	bne.n	801b0f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801b0ee:	2301      	movs	r3, #1
 801b0f0:	e067      	b.n	801b1c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801b0f2:	4b37      	ldr	r3, [pc, #220]	; (801b1d0 <HAL_RCC_ClockConfig+0x1bc>)
 801b0f4:	689b      	ldr	r3, [r3, #8]
 801b0f6:	f023 0203 	bic.w	r2, r3, #3
 801b0fa:	687b      	ldr	r3, [r7, #4]
 801b0fc:	685b      	ldr	r3, [r3, #4]
 801b0fe:	4934      	ldr	r1, [pc, #208]	; (801b1d0 <HAL_RCC_ClockConfig+0x1bc>)
 801b100:	4313      	orrs	r3, r2
 801b102:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801b104:	f7fd f936 	bl	8018374 <HAL_GetTick>
 801b108:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b10a:	e00a      	b.n	801b122 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b10c:	f7fd f932 	bl	8018374 <HAL_GetTick>
 801b110:	4602      	mov	r2, r0
 801b112:	68fb      	ldr	r3, [r7, #12]
 801b114:	1ad3      	subs	r3, r2, r3
 801b116:	f241 3288 	movw	r2, #5000	; 0x1388
 801b11a:	4293      	cmp	r3, r2
 801b11c:	d901      	bls.n	801b122 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801b11e:	2303      	movs	r3, #3
 801b120:	e04f      	b.n	801b1c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b122:	4b2b      	ldr	r3, [pc, #172]	; (801b1d0 <HAL_RCC_ClockConfig+0x1bc>)
 801b124:	689b      	ldr	r3, [r3, #8]
 801b126:	f003 020c 	and.w	r2, r3, #12
 801b12a:	687b      	ldr	r3, [r7, #4]
 801b12c:	685b      	ldr	r3, [r3, #4]
 801b12e:	009b      	lsls	r3, r3, #2
 801b130:	429a      	cmp	r2, r3
 801b132:	d1eb      	bne.n	801b10c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801b134:	4b25      	ldr	r3, [pc, #148]	; (801b1cc <HAL_RCC_ClockConfig+0x1b8>)
 801b136:	681b      	ldr	r3, [r3, #0]
 801b138:	f003 030f 	and.w	r3, r3, #15
 801b13c:	683a      	ldr	r2, [r7, #0]
 801b13e:	429a      	cmp	r2, r3
 801b140:	d20c      	bcs.n	801b15c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b142:	4b22      	ldr	r3, [pc, #136]	; (801b1cc <HAL_RCC_ClockConfig+0x1b8>)
 801b144:	683a      	ldr	r2, [r7, #0]
 801b146:	b2d2      	uxtb	r2, r2
 801b148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801b14a:	4b20      	ldr	r3, [pc, #128]	; (801b1cc <HAL_RCC_ClockConfig+0x1b8>)
 801b14c:	681b      	ldr	r3, [r3, #0]
 801b14e:	f003 030f 	and.w	r3, r3, #15
 801b152:	683a      	ldr	r2, [r7, #0]
 801b154:	429a      	cmp	r2, r3
 801b156:	d001      	beq.n	801b15c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801b158:	2301      	movs	r3, #1
 801b15a:	e032      	b.n	801b1c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b15c:	687b      	ldr	r3, [r7, #4]
 801b15e:	681b      	ldr	r3, [r3, #0]
 801b160:	f003 0304 	and.w	r3, r3, #4
 801b164:	2b00      	cmp	r3, #0
 801b166:	d008      	beq.n	801b17a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801b168:	4b19      	ldr	r3, [pc, #100]	; (801b1d0 <HAL_RCC_ClockConfig+0x1bc>)
 801b16a:	689b      	ldr	r3, [r3, #8]
 801b16c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801b170:	687b      	ldr	r3, [r7, #4]
 801b172:	68db      	ldr	r3, [r3, #12]
 801b174:	4916      	ldr	r1, [pc, #88]	; (801b1d0 <HAL_RCC_ClockConfig+0x1bc>)
 801b176:	4313      	orrs	r3, r2
 801b178:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b17a:	687b      	ldr	r3, [r7, #4]
 801b17c:	681b      	ldr	r3, [r3, #0]
 801b17e:	f003 0308 	and.w	r3, r3, #8
 801b182:	2b00      	cmp	r3, #0
 801b184:	d009      	beq.n	801b19a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801b186:	4b12      	ldr	r3, [pc, #72]	; (801b1d0 <HAL_RCC_ClockConfig+0x1bc>)
 801b188:	689b      	ldr	r3, [r3, #8]
 801b18a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801b18e:	687b      	ldr	r3, [r7, #4]
 801b190:	691b      	ldr	r3, [r3, #16]
 801b192:	00db      	lsls	r3, r3, #3
 801b194:	490e      	ldr	r1, [pc, #56]	; (801b1d0 <HAL_RCC_ClockConfig+0x1bc>)
 801b196:	4313      	orrs	r3, r2
 801b198:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801b19a:	f000 fb57 	bl	801b84c <HAL_RCC_GetSysClockFreq>
 801b19e:	4602      	mov	r2, r0
 801b1a0:	4b0b      	ldr	r3, [pc, #44]	; (801b1d0 <HAL_RCC_ClockConfig+0x1bc>)
 801b1a2:	689b      	ldr	r3, [r3, #8]
 801b1a4:	091b      	lsrs	r3, r3, #4
 801b1a6:	f003 030f 	and.w	r3, r3, #15
 801b1aa:	490a      	ldr	r1, [pc, #40]	; (801b1d4 <HAL_RCC_ClockConfig+0x1c0>)
 801b1ac:	5ccb      	ldrb	r3, [r1, r3]
 801b1ae:	fa22 f303 	lsr.w	r3, r2, r3
 801b1b2:	4a09      	ldr	r2, [pc, #36]	; (801b1d8 <HAL_RCC_ClockConfig+0x1c4>)
 801b1b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801b1b6:	4b09      	ldr	r3, [pc, #36]	; (801b1dc <HAL_RCC_ClockConfig+0x1c8>)
 801b1b8:	681b      	ldr	r3, [r3, #0]
 801b1ba:	4618      	mov	r0, r3
 801b1bc:	f7fd f896 	bl	80182ec <HAL_InitTick>

  return HAL_OK;
 801b1c0:	2300      	movs	r3, #0
}
 801b1c2:	4618      	mov	r0, r3
 801b1c4:	3710      	adds	r7, #16
 801b1c6:	46bd      	mov	sp, r7
 801b1c8:	bd80      	pop	{r7, pc}
 801b1ca:	bf00      	nop
 801b1cc:	40023c00 	.word	0x40023c00
 801b1d0:	40023800 	.word	0x40023800
 801b1d4:	08002350 	.word	0x08002350
 801b1d8:	20000588 	.word	0x20000588
 801b1dc:	2000058c 	.word	0x2000058c

0801b1e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801b1e0:	b480      	push	{r7}
 801b1e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801b1e4:	4b03      	ldr	r3, [pc, #12]	; (801b1f4 <HAL_RCC_GetHCLKFreq+0x14>)
 801b1e6:	681b      	ldr	r3, [r3, #0]
}
 801b1e8:	4618      	mov	r0, r3
 801b1ea:	46bd      	mov	sp, r7
 801b1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1f0:	4770      	bx	lr
 801b1f2:	bf00      	nop
 801b1f4:	20000588 	.word	0x20000588

0801b1f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801b1f8:	b580      	push	{r7, lr}
 801b1fa:	b08c      	sub	sp, #48	; 0x30
 801b1fc:	af00      	add	r7, sp, #0
 801b1fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801b200:	2300      	movs	r3, #0
 801b202:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 801b204:	2300      	movs	r3, #0
 801b206:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 801b208:	2300      	movs	r3, #0
 801b20a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 801b20c:	2300      	movs	r3, #0
 801b20e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 801b210:	2300      	movs	r3, #0
 801b212:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 801b214:	2300      	movs	r3, #0
 801b216:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 801b218:	2300      	movs	r3, #0
 801b21a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 801b21c:	2300      	movs	r3, #0
 801b21e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 801b220:	2300      	movs	r3, #0
 801b222:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 801b224:	687b      	ldr	r3, [r7, #4]
 801b226:	681b      	ldr	r3, [r3, #0]
 801b228:	f003 0301 	and.w	r3, r3, #1
 801b22c:	2b00      	cmp	r3, #0
 801b22e:	d010      	beq.n	801b252 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 801b230:	4b6f      	ldr	r3, [pc, #444]	; (801b3f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b232:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b236:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 801b23a:	687b      	ldr	r3, [r7, #4]
 801b23c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b23e:	496c      	ldr	r1, [pc, #432]	; (801b3f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b240:	4313      	orrs	r3, r2
 801b242:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 801b246:	687b      	ldr	r3, [r7, #4]
 801b248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b24a:	2b00      	cmp	r3, #0
 801b24c:	d101      	bne.n	801b252 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 801b24e:	2301      	movs	r3, #1
 801b250:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 801b252:	687b      	ldr	r3, [r7, #4]
 801b254:	681b      	ldr	r3, [r3, #0]
 801b256:	f003 0302 	and.w	r3, r3, #2
 801b25a:	2b00      	cmp	r3, #0
 801b25c:	d010      	beq.n	801b280 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 801b25e:	4b64      	ldr	r3, [pc, #400]	; (801b3f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b260:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b264:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 801b268:	687b      	ldr	r3, [r7, #4]
 801b26a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b26c:	4960      	ldr	r1, [pc, #384]	; (801b3f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b26e:	4313      	orrs	r3, r2
 801b270:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 801b274:	687b      	ldr	r3, [r7, #4]
 801b276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b278:	2b00      	cmp	r3, #0
 801b27a:	d101      	bne.n	801b280 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 801b27c:	2301      	movs	r3, #1
 801b27e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 801b280:	687b      	ldr	r3, [r7, #4]
 801b282:	681b      	ldr	r3, [r3, #0]
 801b284:	f003 0304 	and.w	r3, r3, #4
 801b288:	2b00      	cmp	r3, #0
 801b28a:	d017      	beq.n	801b2bc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801b28c:	4b58      	ldr	r3, [pc, #352]	; (801b3f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b28e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b292:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801b296:	687b      	ldr	r3, [r7, #4]
 801b298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b29a:	4955      	ldr	r1, [pc, #340]	; (801b3f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b29c:	4313      	orrs	r3, r2
 801b29e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 801b2a2:	687b      	ldr	r3, [r7, #4]
 801b2a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b2a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801b2aa:	d101      	bne.n	801b2b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 801b2ac:	2301      	movs	r3, #1
 801b2ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 801b2b0:	687b      	ldr	r3, [r7, #4]
 801b2b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b2b4:	2b00      	cmp	r3, #0
 801b2b6:	d101      	bne.n	801b2bc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 801b2b8:	2301      	movs	r3, #1
 801b2ba:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 801b2bc:	687b      	ldr	r3, [r7, #4]
 801b2be:	681b      	ldr	r3, [r3, #0]
 801b2c0:	f003 0308 	and.w	r3, r3, #8
 801b2c4:	2b00      	cmp	r3, #0
 801b2c6:	d017      	beq.n	801b2f8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 801b2c8:	4b49      	ldr	r3, [pc, #292]	; (801b3f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b2ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b2ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801b2d2:	687b      	ldr	r3, [r7, #4]
 801b2d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b2d6:	4946      	ldr	r1, [pc, #280]	; (801b3f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b2d8:	4313      	orrs	r3, r2
 801b2da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 801b2de:	687b      	ldr	r3, [r7, #4]
 801b2e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b2e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801b2e6:	d101      	bne.n	801b2ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 801b2e8:	2301      	movs	r3, #1
 801b2ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 801b2ec:	687b      	ldr	r3, [r7, #4]
 801b2ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b2f0:	2b00      	cmp	r3, #0
 801b2f2:	d101      	bne.n	801b2f8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 801b2f4:	2301      	movs	r3, #1
 801b2f6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801b2f8:	687b      	ldr	r3, [r7, #4]
 801b2fa:	681b      	ldr	r3, [r3, #0]
 801b2fc:	f003 0320 	and.w	r3, r3, #32
 801b300:	2b00      	cmp	r3, #0
 801b302:	f000 808a 	beq.w	801b41a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 801b306:	2300      	movs	r3, #0
 801b308:	60bb      	str	r3, [r7, #8]
 801b30a:	4b39      	ldr	r3, [pc, #228]	; (801b3f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b30c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b30e:	4a38      	ldr	r2, [pc, #224]	; (801b3f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b314:	6413      	str	r3, [r2, #64]	; 0x40
 801b316:	4b36      	ldr	r3, [pc, #216]	; (801b3f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b31a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b31e:	60bb      	str	r3, [r7, #8]
 801b320:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 801b322:	4b34      	ldr	r3, [pc, #208]	; (801b3f4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 801b324:	681b      	ldr	r3, [r3, #0]
 801b326:	4a33      	ldr	r2, [pc, #204]	; (801b3f4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 801b328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b32c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 801b32e:	f7fd f821 	bl	8018374 <HAL_GetTick>
 801b332:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 801b334:	e008      	b.n	801b348 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 801b336:	f7fd f81d 	bl	8018374 <HAL_GetTick>
 801b33a:	4602      	mov	r2, r0
 801b33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b33e:	1ad3      	subs	r3, r2, r3
 801b340:	2b02      	cmp	r3, #2
 801b342:	d901      	bls.n	801b348 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 801b344:	2303      	movs	r3, #3
 801b346:	e278      	b.n	801b83a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 801b348:	4b2a      	ldr	r3, [pc, #168]	; (801b3f4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 801b34a:	681b      	ldr	r3, [r3, #0]
 801b34c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b350:	2b00      	cmp	r3, #0
 801b352:	d0f0      	beq.n	801b336 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 801b354:	4b26      	ldr	r3, [pc, #152]	; (801b3f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b358:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b35c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 801b35e:	6a3b      	ldr	r3, [r7, #32]
 801b360:	2b00      	cmp	r3, #0
 801b362:	d02f      	beq.n	801b3c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 801b364:	687b      	ldr	r3, [r7, #4]
 801b366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b368:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b36c:	6a3a      	ldr	r2, [r7, #32]
 801b36e:	429a      	cmp	r2, r3
 801b370:	d028      	beq.n	801b3c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801b372:	4b1f      	ldr	r3, [pc, #124]	; (801b3f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b376:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b37a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801b37c:	4b1e      	ldr	r3, [pc, #120]	; (801b3f8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 801b37e:	2201      	movs	r2, #1
 801b380:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 801b382:	4b1d      	ldr	r3, [pc, #116]	; (801b3f8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 801b384:	2200      	movs	r2, #0
 801b386:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 801b388:	4a19      	ldr	r2, [pc, #100]	; (801b3f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b38a:	6a3b      	ldr	r3, [r7, #32]
 801b38c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 801b38e:	4b18      	ldr	r3, [pc, #96]	; (801b3f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b392:	f003 0301 	and.w	r3, r3, #1
 801b396:	2b01      	cmp	r3, #1
 801b398:	d114      	bne.n	801b3c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 801b39a:	f7fc ffeb 	bl	8018374 <HAL_GetTick>
 801b39e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801b3a0:	e00a      	b.n	801b3b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801b3a2:	f7fc ffe7 	bl	8018374 <HAL_GetTick>
 801b3a6:	4602      	mov	r2, r0
 801b3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3aa:	1ad3      	subs	r3, r2, r3
 801b3ac:	f241 3288 	movw	r2, #5000	; 0x1388
 801b3b0:	4293      	cmp	r3, r2
 801b3b2:	d901      	bls.n	801b3b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 801b3b4:	2303      	movs	r3, #3
 801b3b6:	e240      	b.n	801b83a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801b3b8:	4b0d      	ldr	r3, [pc, #52]	; (801b3f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b3ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b3bc:	f003 0302 	and.w	r3, r3, #2
 801b3c0:	2b00      	cmp	r3, #0
 801b3c2:	d0ee      	beq.n	801b3a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801b3c4:	687b      	ldr	r3, [r7, #4]
 801b3c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b3c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b3cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801b3d0:	d114      	bne.n	801b3fc <HAL_RCCEx_PeriphCLKConfig+0x204>
 801b3d2:	4b07      	ldr	r3, [pc, #28]	; (801b3f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b3d4:	689b      	ldr	r3, [r3, #8]
 801b3d6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 801b3da:	687b      	ldr	r3, [r7, #4]
 801b3dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b3de:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801b3e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b3e6:	4902      	ldr	r1, [pc, #8]	; (801b3f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b3e8:	4313      	orrs	r3, r2
 801b3ea:	608b      	str	r3, [r1, #8]
 801b3ec:	e00c      	b.n	801b408 <HAL_RCCEx_PeriphCLKConfig+0x210>
 801b3ee:	bf00      	nop
 801b3f0:	40023800 	.word	0x40023800
 801b3f4:	40007000 	.word	0x40007000
 801b3f8:	42470e40 	.word	0x42470e40
 801b3fc:	4b4a      	ldr	r3, [pc, #296]	; (801b528 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b3fe:	689b      	ldr	r3, [r3, #8]
 801b400:	4a49      	ldr	r2, [pc, #292]	; (801b528 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b402:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 801b406:	6093      	str	r3, [r2, #8]
 801b408:	4b47      	ldr	r3, [pc, #284]	; (801b528 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b40a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801b40c:	687b      	ldr	r3, [r7, #4]
 801b40e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b410:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801b414:	4944      	ldr	r1, [pc, #272]	; (801b528 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b416:	4313      	orrs	r3, r2
 801b418:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 801b41a:	687b      	ldr	r3, [r7, #4]
 801b41c:	681b      	ldr	r3, [r3, #0]
 801b41e:	f003 0310 	and.w	r3, r3, #16
 801b422:	2b00      	cmp	r3, #0
 801b424:	d004      	beq.n	801b430 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801b426:	687b      	ldr	r3, [r7, #4]
 801b428:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 801b42c:	4b3f      	ldr	r3, [pc, #252]	; (801b52c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 801b42e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 801b430:	687b      	ldr	r3, [r7, #4]
 801b432:	681b      	ldr	r3, [r3, #0]
 801b434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b438:	2b00      	cmp	r3, #0
 801b43a:	d00a      	beq.n	801b452 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 801b43c:	4b3a      	ldr	r3, [pc, #232]	; (801b528 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b43e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b442:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801b446:	687b      	ldr	r3, [r7, #4]
 801b448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b44a:	4937      	ldr	r1, [pc, #220]	; (801b528 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b44c:	4313      	orrs	r3, r2
 801b44e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801b452:	687b      	ldr	r3, [r7, #4]
 801b454:	681b      	ldr	r3, [r3, #0]
 801b456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b45a:	2b00      	cmp	r3, #0
 801b45c:	d00a      	beq.n	801b474 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801b45e:	4b32      	ldr	r3, [pc, #200]	; (801b528 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b460:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b464:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 801b468:	687b      	ldr	r3, [r7, #4]
 801b46a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b46c:	492e      	ldr	r1, [pc, #184]	; (801b528 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b46e:	4313      	orrs	r3, r2
 801b470:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 801b474:	687b      	ldr	r3, [r7, #4]
 801b476:	681b      	ldr	r3, [r3, #0]
 801b478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b47c:	2b00      	cmp	r3, #0
 801b47e:	d011      	beq.n	801b4a4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 801b480:	4b29      	ldr	r3, [pc, #164]	; (801b528 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b482:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b486:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 801b48a:	687b      	ldr	r3, [r7, #4]
 801b48c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b48e:	4926      	ldr	r1, [pc, #152]	; (801b528 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b490:	4313      	orrs	r3, r2
 801b492:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 801b496:	687b      	ldr	r3, [r7, #4]
 801b498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b49a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801b49e:	d101      	bne.n	801b4a4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 801b4a0:	2301      	movs	r3, #1
 801b4a2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 801b4a4:	687b      	ldr	r3, [r7, #4]
 801b4a6:	681b      	ldr	r3, [r3, #0]
 801b4a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801b4ac:	2b00      	cmp	r3, #0
 801b4ae:	d00a      	beq.n	801b4c6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 801b4b0:	4b1d      	ldr	r3, [pc, #116]	; (801b528 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b4b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b4b6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801b4ba:	687b      	ldr	r3, [r7, #4]
 801b4bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b4be:	491a      	ldr	r1, [pc, #104]	; (801b528 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b4c0:	4313      	orrs	r3, r2
 801b4c2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801b4c6:	687b      	ldr	r3, [r7, #4]
 801b4c8:	681b      	ldr	r3, [r3, #0]
 801b4ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b4ce:	2b00      	cmp	r3, #0
 801b4d0:	d011      	beq.n	801b4f6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 801b4d2:	4b15      	ldr	r3, [pc, #84]	; (801b528 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b4d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b4d8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801b4dc:	687b      	ldr	r3, [r7, #4]
 801b4de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b4e0:	4911      	ldr	r1, [pc, #68]	; (801b528 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b4e2:	4313      	orrs	r3, r2
 801b4e4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 801b4e8:	687b      	ldr	r3, [r7, #4]
 801b4ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b4ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b4f0:	d101      	bne.n	801b4f6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 801b4f2:	2301      	movs	r3, #1
 801b4f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 801b4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4f8:	2b01      	cmp	r3, #1
 801b4fa:	d005      	beq.n	801b508 <HAL_RCCEx_PeriphCLKConfig+0x310>
 801b4fc:	687b      	ldr	r3, [r7, #4]
 801b4fe:	681b      	ldr	r3, [r3, #0]
 801b500:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801b504:	f040 80ff 	bne.w	801b706 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 801b508:	4b09      	ldr	r3, [pc, #36]	; (801b530 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b50a:	2200      	movs	r2, #0
 801b50c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801b50e:	f7fc ff31 	bl	8018374 <HAL_GetTick>
 801b512:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801b514:	e00e      	b.n	801b534 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 801b516:	f7fc ff2d 	bl	8018374 <HAL_GetTick>
 801b51a:	4602      	mov	r2, r0
 801b51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b51e:	1ad3      	subs	r3, r2, r3
 801b520:	2b02      	cmp	r3, #2
 801b522:	d907      	bls.n	801b534 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801b524:	2303      	movs	r3, #3
 801b526:	e188      	b.n	801b83a <HAL_RCCEx_PeriphCLKConfig+0x642>
 801b528:	40023800 	.word	0x40023800
 801b52c:	424711e0 	.word	0x424711e0
 801b530:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801b534:	4b7e      	ldr	r3, [pc, #504]	; (801b730 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b536:	681b      	ldr	r3, [r3, #0]
 801b538:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801b53c:	2b00      	cmp	r3, #0
 801b53e:	d1ea      	bne.n	801b516 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 801b540:	687b      	ldr	r3, [r7, #4]
 801b542:	681b      	ldr	r3, [r3, #0]
 801b544:	f003 0301 	and.w	r3, r3, #1
 801b548:	2b00      	cmp	r3, #0
 801b54a:	d003      	beq.n	801b554 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 801b54c:	687b      	ldr	r3, [r7, #4]
 801b54e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b550:	2b00      	cmp	r3, #0
 801b552:	d009      	beq.n	801b568 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 801b554:	687b      	ldr	r3, [r7, #4]
 801b556:	681b      	ldr	r3, [r3, #0]
 801b558:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 801b55c:	2b00      	cmp	r3, #0
 801b55e:	d028      	beq.n	801b5b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 801b560:	687b      	ldr	r3, [r7, #4]
 801b562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b564:	2b00      	cmp	r3, #0
 801b566:	d124      	bne.n	801b5b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 801b568:	4b71      	ldr	r3, [pc, #452]	; (801b730 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b56a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b56e:	0c1b      	lsrs	r3, r3, #16
 801b570:	f003 0303 	and.w	r3, r3, #3
 801b574:	3301      	adds	r3, #1
 801b576:	005b      	lsls	r3, r3, #1
 801b578:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 801b57a:	4b6d      	ldr	r3, [pc, #436]	; (801b730 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b57c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b580:	0e1b      	lsrs	r3, r3, #24
 801b582:	f003 030f 	and.w	r3, r3, #15
 801b586:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 801b588:	687b      	ldr	r3, [r7, #4]
 801b58a:	685a      	ldr	r2, [r3, #4]
 801b58c:	687b      	ldr	r3, [r7, #4]
 801b58e:	689b      	ldr	r3, [r3, #8]
 801b590:	019b      	lsls	r3, r3, #6
 801b592:	431a      	orrs	r2, r3
 801b594:	69fb      	ldr	r3, [r7, #28]
 801b596:	085b      	lsrs	r3, r3, #1
 801b598:	3b01      	subs	r3, #1
 801b59a:	041b      	lsls	r3, r3, #16
 801b59c:	431a      	orrs	r2, r3
 801b59e:	69bb      	ldr	r3, [r7, #24]
 801b5a0:	061b      	lsls	r3, r3, #24
 801b5a2:	431a      	orrs	r2, r3
 801b5a4:	687b      	ldr	r3, [r7, #4]
 801b5a6:	695b      	ldr	r3, [r3, #20]
 801b5a8:	071b      	lsls	r3, r3, #28
 801b5aa:	4961      	ldr	r1, [pc, #388]	; (801b730 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b5ac:	4313      	orrs	r3, r2
 801b5ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801b5b2:	687b      	ldr	r3, [r7, #4]
 801b5b4:	681b      	ldr	r3, [r3, #0]
 801b5b6:	f003 0304 	and.w	r3, r3, #4
 801b5ba:	2b00      	cmp	r3, #0
 801b5bc:	d004      	beq.n	801b5c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 801b5be:	687b      	ldr	r3, [r7, #4]
 801b5c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b5c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801b5c6:	d00a      	beq.n	801b5de <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801b5c8:	687b      	ldr	r3, [r7, #4]
 801b5ca:	681b      	ldr	r3, [r3, #0]
 801b5cc:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801b5d0:	2b00      	cmp	r3, #0
 801b5d2:	d035      	beq.n	801b640 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801b5d4:	687b      	ldr	r3, [r7, #4]
 801b5d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b5d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801b5dc:	d130      	bne.n	801b640 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 801b5de:	4b54      	ldr	r3, [pc, #336]	; (801b730 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b5e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b5e4:	0c1b      	lsrs	r3, r3, #16
 801b5e6:	f003 0303 	and.w	r3, r3, #3
 801b5ea:	3301      	adds	r3, #1
 801b5ec:	005b      	lsls	r3, r3, #1
 801b5ee:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801b5f0:	4b4f      	ldr	r3, [pc, #316]	; (801b730 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b5f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b5f6:	0f1b      	lsrs	r3, r3, #28
 801b5f8:	f003 0307 	and.w	r3, r3, #7
 801b5fc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 801b5fe:	687b      	ldr	r3, [r7, #4]
 801b600:	685a      	ldr	r2, [r3, #4]
 801b602:	687b      	ldr	r3, [r7, #4]
 801b604:	689b      	ldr	r3, [r3, #8]
 801b606:	019b      	lsls	r3, r3, #6
 801b608:	431a      	orrs	r2, r3
 801b60a:	69fb      	ldr	r3, [r7, #28]
 801b60c:	085b      	lsrs	r3, r3, #1
 801b60e:	3b01      	subs	r3, #1
 801b610:	041b      	lsls	r3, r3, #16
 801b612:	431a      	orrs	r2, r3
 801b614:	687b      	ldr	r3, [r7, #4]
 801b616:	691b      	ldr	r3, [r3, #16]
 801b618:	061b      	lsls	r3, r3, #24
 801b61a:	431a      	orrs	r2, r3
 801b61c:	697b      	ldr	r3, [r7, #20]
 801b61e:	071b      	lsls	r3, r3, #28
 801b620:	4943      	ldr	r1, [pc, #268]	; (801b730 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b622:	4313      	orrs	r3, r2
 801b624:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 801b628:	4b41      	ldr	r3, [pc, #260]	; (801b730 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b62a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b62e:	f023 021f 	bic.w	r2, r3, #31
 801b632:	687b      	ldr	r3, [r7, #4]
 801b634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b636:	3b01      	subs	r3, #1
 801b638:	493d      	ldr	r1, [pc, #244]	; (801b730 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b63a:	4313      	orrs	r3, r2
 801b63c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 801b640:	687b      	ldr	r3, [r7, #4]
 801b642:	681b      	ldr	r3, [r3, #0]
 801b644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b648:	2b00      	cmp	r3, #0
 801b64a:	d029      	beq.n	801b6a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 801b64c:	687b      	ldr	r3, [r7, #4]
 801b64e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b650:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b654:	d124      	bne.n	801b6a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 801b656:	4b36      	ldr	r3, [pc, #216]	; (801b730 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b65c:	0c1b      	lsrs	r3, r3, #16
 801b65e:	f003 0303 	and.w	r3, r3, #3
 801b662:	3301      	adds	r3, #1
 801b664:	005b      	lsls	r3, r3, #1
 801b666:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801b668:	4b31      	ldr	r3, [pc, #196]	; (801b730 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b66a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b66e:	0f1b      	lsrs	r3, r3, #28
 801b670:	f003 0307 	and.w	r3, r3, #7
 801b674:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 801b676:	687b      	ldr	r3, [r7, #4]
 801b678:	685a      	ldr	r2, [r3, #4]
 801b67a:	687b      	ldr	r3, [r7, #4]
 801b67c:	689b      	ldr	r3, [r3, #8]
 801b67e:	019b      	lsls	r3, r3, #6
 801b680:	431a      	orrs	r2, r3
 801b682:	687b      	ldr	r3, [r7, #4]
 801b684:	68db      	ldr	r3, [r3, #12]
 801b686:	085b      	lsrs	r3, r3, #1
 801b688:	3b01      	subs	r3, #1
 801b68a:	041b      	lsls	r3, r3, #16
 801b68c:	431a      	orrs	r2, r3
 801b68e:	69bb      	ldr	r3, [r7, #24]
 801b690:	061b      	lsls	r3, r3, #24
 801b692:	431a      	orrs	r2, r3
 801b694:	697b      	ldr	r3, [r7, #20]
 801b696:	071b      	lsls	r3, r3, #28
 801b698:	4925      	ldr	r1, [pc, #148]	; (801b730 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b69a:	4313      	orrs	r3, r2
 801b69c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 801b6a0:	687b      	ldr	r3, [r7, #4]
 801b6a2:	681b      	ldr	r3, [r3, #0]
 801b6a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b6a8:	2b00      	cmp	r3, #0
 801b6aa:	d016      	beq.n	801b6da <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 801b6ac:	687b      	ldr	r3, [r7, #4]
 801b6ae:	685a      	ldr	r2, [r3, #4]
 801b6b0:	687b      	ldr	r3, [r7, #4]
 801b6b2:	689b      	ldr	r3, [r3, #8]
 801b6b4:	019b      	lsls	r3, r3, #6
 801b6b6:	431a      	orrs	r2, r3
 801b6b8:	687b      	ldr	r3, [r7, #4]
 801b6ba:	68db      	ldr	r3, [r3, #12]
 801b6bc:	085b      	lsrs	r3, r3, #1
 801b6be:	3b01      	subs	r3, #1
 801b6c0:	041b      	lsls	r3, r3, #16
 801b6c2:	431a      	orrs	r2, r3
 801b6c4:	687b      	ldr	r3, [r7, #4]
 801b6c6:	691b      	ldr	r3, [r3, #16]
 801b6c8:	061b      	lsls	r3, r3, #24
 801b6ca:	431a      	orrs	r2, r3
 801b6cc:	687b      	ldr	r3, [r7, #4]
 801b6ce:	695b      	ldr	r3, [r3, #20]
 801b6d0:	071b      	lsls	r3, r3, #28
 801b6d2:	4917      	ldr	r1, [pc, #92]	; (801b730 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b6d4:	4313      	orrs	r3, r2
 801b6d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 801b6da:	4b16      	ldr	r3, [pc, #88]	; (801b734 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 801b6dc:	2201      	movs	r2, #1
 801b6de:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801b6e0:	f7fc fe48 	bl	8018374 <HAL_GetTick>
 801b6e4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801b6e6:	e008      	b.n	801b6fa <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 801b6e8:	f7fc fe44 	bl	8018374 <HAL_GetTick>
 801b6ec:	4602      	mov	r2, r0
 801b6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6f0:	1ad3      	subs	r3, r2, r3
 801b6f2:	2b02      	cmp	r3, #2
 801b6f4:	d901      	bls.n	801b6fa <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801b6f6:	2303      	movs	r3, #3
 801b6f8:	e09f      	b.n	801b83a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801b6fa:	4b0d      	ldr	r3, [pc, #52]	; (801b730 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b6fc:	681b      	ldr	r3, [r3, #0]
 801b6fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801b702:	2b00      	cmp	r3, #0
 801b704:	d0f0      	beq.n	801b6e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 801b706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b708:	2b01      	cmp	r3, #1
 801b70a:	f040 8095 	bne.w	801b838 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 801b70e:	4b0a      	ldr	r3, [pc, #40]	; (801b738 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 801b710:	2200      	movs	r2, #0
 801b712:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801b714:	f7fc fe2e 	bl	8018374 <HAL_GetTick>
 801b718:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801b71a:	e00f      	b.n	801b73c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 801b71c:	f7fc fe2a 	bl	8018374 <HAL_GetTick>
 801b720:	4602      	mov	r2, r0
 801b722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b724:	1ad3      	subs	r3, r2, r3
 801b726:	2b02      	cmp	r3, #2
 801b728:	d908      	bls.n	801b73c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801b72a:	2303      	movs	r3, #3
 801b72c:	e085      	b.n	801b83a <HAL_RCCEx_PeriphCLKConfig+0x642>
 801b72e:	bf00      	nop
 801b730:	40023800 	.word	0x40023800
 801b734:	42470068 	.word	0x42470068
 801b738:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801b73c:	4b41      	ldr	r3, [pc, #260]	; (801b844 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b73e:	681b      	ldr	r3, [r3, #0]
 801b740:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801b744:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b748:	d0e8      	beq.n	801b71c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 801b74a:	687b      	ldr	r3, [r7, #4]
 801b74c:	681b      	ldr	r3, [r3, #0]
 801b74e:	f003 0304 	and.w	r3, r3, #4
 801b752:	2b00      	cmp	r3, #0
 801b754:	d003      	beq.n	801b75e <HAL_RCCEx_PeriphCLKConfig+0x566>
 801b756:	687b      	ldr	r3, [r7, #4]
 801b758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b75a:	2b00      	cmp	r3, #0
 801b75c:	d009      	beq.n	801b772 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801b75e:	687b      	ldr	r3, [r7, #4]
 801b760:	681b      	ldr	r3, [r3, #0]
 801b762:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 801b766:	2b00      	cmp	r3, #0
 801b768:	d02b      	beq.n	801b7c2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801b76a:	687b      	ldr	r3, [r7, #4]
 801b76c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b76e:	2b00      	cmp	r3, #0
 801b770:	d127      	bne.n	801b7c2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 801b772:	4b34      	ldr	r3, [pc, #208]	; (801b844 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b778:	0c1b      	lsrs	r3, r3, #16
 801b77a:	f003 0303 	and.w	r3, r3, #3
 801b77e:	3301      	adds	r3, #1
 801b780:	005b      	lsls	r3, r3, #1
 801b782:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 801b784:	687b      	ldr	r3, [r7, #4]
 801b786:	699a      	ldr	r2, [r3, #24]
 801b788:	687b      	ldr	r3, [r7, #4]
 801b78a:	69db      	ldr	r3, [r3, #28]
 801b78c:	019b      	lsls	r3, r3, #6
 801b78e:	431a      	orrs	r2, r3
 801b790:	693b      	ldr	r3, [r7, #16]
 801b792:	085b      	lsrs	r3, r3, #1
 801b794:	3b01      	subs	r3, #1
 801b796:	041b      	lsls	r3, r3, #16
 801b798:	431a      	orrs	r2, r3
 801b79a:	687b      	ldr	r3, [r7, #4]
 801b79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b79e:	061b      	lsls	r3, r3, #24
 801b7a0:	4928      	ldr	r1, [pc, #160]	; (801b844 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b7a2:	4313      	orrs	r3, r2
 801b7a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 801b7a8:	4b26      	ldr	r3, [pc, #152]	; (801b844 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b7aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b7ae:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 801b7b2:	687b      	ldr	r3, [r7, #4]
 801b7b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b7b6:	3b01      	subs	r3, #1
 801b7b8:	021b      	lsls	r3, r3, #8
 801b7ba:	4922      	ldr	r1, [pc, #136]	; (801b844 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b7bc:	4313      	orrs	r3, r2
 801b7be:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 801b7c2:	687b      	ldr	r3, [r7, #4]
 801b7c4:	681b      	ldr	r3, [r3, #0]
 801b7c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b7ca:	2b00      	cmp	r3, #0
 801b7cc:	d01d      	beq.n	801b80a <HAL_RCCEx_PeriphCLKConfig+0x612>
 801b7ce:	687b      	ldr	r3, [r7, #4]
 801b7d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b7d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801b7d6:	d118      	bne.n	801b80a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 801b7d8:	4b1a      	ldr	r3, [pc, #104]	; (801b844 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b7da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b7de:	0e1b      	lsrs	r3, r3, #24
 801b7e0:	f003 030f 	and.w	r3, r3, #15
 801b7e4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 801b7e6:	687b      	ldr	r3, [r7, #4]
 801b7e8:	699a      	ldr	r2, [r3, #24]
 801b7ea:	687b      	ldr	r3, [r7, #4]
 801b7ec:	69db      	ldr	r3, [r3, #28]
 801b7ee:	019b      	lsls	r3, r3, #6
 801b7f0:	431a      	orrs	r2, r3
 801b7f2:	687b      	ldr	r3, [r7, #4]
 801b7f4:	6a1b      	ldr	r3, [r3, #32]
 801b7f6:	085b      	lsrs	r3, r3, #1
 801b7f8:	3b01      	subs	r3, #1
 801b7fa:	041b      	lsls	r3, r3, #16
 801b7fc:	431a      	orrs	r2, r3
 801b7fe:	68fb      	ldr	r3, [r7, #12]
 801b800:	061b      	lsls	r3, r3, #24
 801b802:	4910      	ldr	r1, [pc, #64]	; (801b844 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b804:	4313      	orrs	r3, r2
 801b806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 801b80a:	4b0f      	ldr	r3, [pc, #60]	; (801b848 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 801b80c:	2201      	movs	r2, #1
 801b80e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801b810:	f7fc fdb0 	bl	8018374 <HAL_GetTick>
 801b814:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801b816:	e008      	b.n	801b82a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 801b818:	f7fc fdac 	bl	8018374 <HAL_GetTick>
 801b81c:	4602      	mov	r2, r0
 801b81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b820:	1ad3      	subs	r3, r2, r3
 801b822:	2b02      	cmp	r3, #2
 801b824:	d901      	bls.n	801b82a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801b826:	2303      	movs	r3, #3
 801b828:	e007      	b.n	801b83a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801b82a:	4b06      	ldr	r3, [pc, #24]	; (801b844 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b82c:	681b      	ldr	r3, [r3, #0]
 801b82e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801b832:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b836:	d1ef      	bne.n	801b818 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 801b838:	2300      	movs	r3, #0
}
 801b83a:	4618      	mov	r0, r3
 801b83c:	3730      	adds	r7, #48	; 0x30
 801b83e:	46bd      	mov	sp, r7
 801b840:	bd80      	pop	{r7, pc}
 801b842:	bf00      	nop
 801b844:	40023800 	.word	0x40023800
 801b848:	42470070 	.word	0x42470070

0801b84c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801b84c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b850:	b087      	sub	sp, #28
 801b852:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 801b854:	2600      	movs	r6, #0
 801b856:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 801b858:	2600      	movs	r6, #0
 801b85a:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 801b85c:	2600      	movs	r6, #0
 801b85e:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 801b860:	2600      	movs	r6, #0
 801b862:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 801b864:	2600      	movs	r6, #0
 801b866:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801b868:	4ea3      	ldr	r6, [pc, #652]	; (801baf8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b86a:	68b6      	ldr	r6, [r6, #8]
 801b86c:	f006 060c 	and.w	r6, r6, #12
 801b870:	2e0c      	cmp	r6, #12
 801b872:	f200 8137 	bhi.w	801bae4 <HAL_RCC_GetSysClockFreq+0x298>
 801b876:	f20f 0c08 	addw	ip, pc, #8
 801b87a:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 801b87e:	bf00      	nop
 801b880:	0801b8b5 	.word	0x0801b8b5
 801b884:	0801bae5 	.word	0x0801bae5
 801b888:	0801bae5 	.word	0x0801bae5
 801b88c:	0801bae5 	.word	0x0801bae5
 801b890:	0801b8bb 	.word	0x0801b8bb
 801b894:	0801bae5 	.word	0x0801bae5
 801b898:	0801bae5 	.word	0x0801bae5
 801b89c:	0801bae5 	.word	0x0801bae5
 801b8a0:	0801b8c1 	.word	0x0801b8c1
 801b8a4:	0801bae5 	.word	0x0801bae5
 801b8a8:	0801bae5 	.word	0x0801bae5
 801b8ac:	0801bae5 	.word	0x0801bae5
 801b8b0:	0801b9d7 	.word	0x0801b9d7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801b8b4:	4b91      	ldr	r3, [pc, #580]	; (801bafc <HAL_RCC_GetSysClockFreq+0x2b0>)
 801b8b6:	613b      	str	r3, [r7, #16]
       break;
 801b8b8:	e117      	b.n	801baea <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801b8ba:	4b91      	ldr	r3, [pc, #580]	; (801bb00 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801b8bc:	613b      	str	r3, [r7, #16]
      break;
 801b8be:	e114      	b.n	801baea <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801b8c0:	4b8d      	ldr	r3, [pc, #564]	; (801baf8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b8c2:	685b      	ldr	r3, [r3, #4]
 801b8c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b8c8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801b8ca:	4b8b      	ldr	r3, [pc, #556]	; (801baf8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b8cc:	685b      	ldr	r3, [r3, #4]
 801b8ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801b8d2:	2b00      	cmp	r3, #0
 801b8d4:	d024      	beq.n	801b920 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801b8d6:	4b88      	ldr	r3, [pc, #544]	; (801baf8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b8d8:	685b      	ldr	r3, [r3, #4]
 801b8da:	099b      	lsrs	r3, r3, #6
 801b8dc:	461a      	mov	r2, r3
 801b8de:	f04f 0300 	mov.w	r3, #0
 801b8e2:	f240 14ff 	movw	r4, #511	; 0x1ff
 801b8e6:	f04f 0500 	mov.w	r5, #0
 801b8ea:	ea02 0004 	and.w	r0, r2, r4
 801b8ee:	ea03 0105 	and.w	r1, r3, r5
 801b8f2:	4b83      	ldr	r3, [pc, #524]	; (801bb00 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801b8f4:	fb03 f201 	mul.w	r2, r3, r1
 801b8f8:	2300      	movs	r3, #0
 801b8fa:	fb03 f300 	mul.w	r3, r3, r0
 801b8fe:	4413      	add	r3, r2
 801b900:	4a7f      	ldr	r2, [pc, #508]	; (801bb00 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801b902:	fba0 0102 	umull	r0, r1, r0, r2
 801b906:	440b      	add	r3, r1
 801b908:	4619      	mov	r1, r3
 801b90a:	68fb      	ldr	r3, [r7, #12]
 801b90c:	461a      	mov	r2, r3
 801b90e:	f04f 0300 	mov.w	r3, #0
 801b912:	f7f0 fb9d 	bl	800c050 <__aeabi_uldivmod>
 801b916:	4602      	mov	r2, r0
 801b918:	460b      	mov	r3, r1
 801b91a:	4613      	mov	r3, r2
 801b91c:	617b      	str	r3, [r7, #20]
 801b91e:	e04c      	b.n	801b9ba <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801b920:	4b75      	ldr	r3, [pc, #468]	; (801baf8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b922:	685b      	ldr	r3, [r3, #4]
 801b924:	099b      	lsrs	r3, r3, #6
 801b926:	461a      	mov	r2, r3
 801b928:	f04f 0300 	mov.w	r3, #0
 801b92c:	f240 10ff 	movw	r0, #511	; 0x1ff
 801b930:	f04f 0100 	mov.w	r1, #0
 801b934:	ea02 0800 	and.w	r8, r2, r0
 801b938:	ea03 0901 	and.w	r9, r3, r1
 801b93c:	4640      	mov	r0, r8
 801b93e:	4649      	mov	r1, r9
 801b940:	f04f 0200 	mov.w	r2, #0
 801b944:	f04f 0300 	mov.w	r3, #0
 801b948:	014b      	lsls	r3, r1, #5
 801b94a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 801b94e:	0142      	lsls	r2, r0, #5
 801b950:	4610      	mov	r0, r2
 801b952:	4619      	mov	r1, r3
 801b954:	ebb0 0008 	subs.w	r0, r0, r8
 801b958:	eb61 0109 	sbc.w	r1, r1, r9
 801b95c:	f04f 0200 	mov.w	r2, #0
 801b960:	f04f 0300 	mov.w	r3, #0
 801b964:	018b      	lsls	r3, r1, #6
 801b966:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 801b96a:	0182      	lsls	r2, r0, #6
 801b96c:	1a12      	subs	r2, r2, r0
 801b96e:	eb63 0301 	sbc.w	r3, r3, r1
 801b972:	f04f 0000 	mov.w	r0, #0
 801b976:	f04f 0100 	mov.w	r1, #0
 801b97a:	00d9      	lsls	r1, r3, #3
 801b97c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801b980:	00d0      	lsls	r0, r2, #3
 801b982:	4602      	mov	r2, r0
 801b984:	460b      	mov	r3, r1
 801b986:	eb12 0208 	adds.w	r2, r2, r8
 801b98a:	eb43 0309 	adc.w	r3, r3, r9
 801b98e:	f04f 0000 	mov.w	r0, #0
 801b992:	f04f 0100 	mov.w	r1, #0
 801b996:	0299      	lsls	r1, r3, #10
 801b998:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 801b99c:	0290      	lsls	r0, r2, #10
 801b99e:	4602      	mov	r2, r0
 801b9a0:	460b      	mov	r3, r1
 801b9a2:	4610      	mov	r0, r2
 801b9a4:	4619      	mov	r1, r3
 801b9a6:	68fb      	ldr	r3, [r7, #12]
 801b9a8:	461a      	mov	r2, r3
 801b9aa:	f04f 0300 	mov.w	r3, #0
 801b9ae:	f7f0 fb4f 	bl	800c050 <__aeabi_uldivmod>
 801b9b2:	4602      	mov	r2, r0
 801b9b4:	460b      	mov	r3, r1
 801b9b6:	4613      	mov	r3, r2
 801b9b8:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801b9ba:	4b4f      	ldr	r3, [pc, #316]	; (801baf8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b9bc:	685b      	ldr	r3, [r3, #4]
 801b9be:	0c1b      	lsrs	r3, r3, #16
 801b9c0:	f003 0303 	and.w	r3, r3, #3
 801b9c4:	3301      	adds	r3, #1
 801b9c6:	005b      	lsls	r3, r3, #1
 801b9c8:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 801b9ca:	697a      	ldr	r2, [r7, #20]
 801b9cc:	68bb      	ldr	r3, [r7, #8]
 801b9ce:	fbb2 f3f3 	udiv	r3, r2, r3
 801b9d2:	613b      	str	r3, [r7, #16]
      break;
 801b9d4:	e089      	b.n	801baea <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801b9d6:	4948      	ldr	r1, [pc, #288]	; (801baf8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b9d8:	6849      	ldr	r1, [r1, #4]
 801b9da:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 801b9de:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801b9e0:	4945      	ldr	r1, [pc, #276]	; (801baf8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b9e2:	6849      	ldr	r1, [r1, #4]
 801b9e4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 801b9e8:	2900      	cmp	r1, #0
 801b9ea:	d024      	beq.n	801ba36 <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801b9ec:	4942      	ldr	r1, [pc, #264]	; (801baf8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b9ee:	6849      	ldr	r1, [r1, #4]
 801b9f0:	0989      	lsrs	r1, r1, #6
 801b9f2:	4608      	mov	r0, r1
 801b9f4:	f04f 0100 	mov.w	r1, #0
 801b9f8:	f240 14ff 	movw	r4, #511	; 0x1ff
 801b9fc:	f04f 0500 	mov.w	r5, #0
 801ba00:	ea00 0204 	and.w	r2, r0, r4
 801ba04:	ea01 0305 	and.w	r3, r1, r5
 801ba08:	493d      	ldr	r1, [pc, #244]	; (801bb00 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801ba0a:	fb01 f003 	mul.w	r0, r1, r3
 801ba0e:	2100      	movs	r1, #0
 801ba10:	fb01 f102 	mul.w	r1, r1, r2
 801ba14:	1844      	adds	r4, r0, r1
 801ba16:	493a      	ldr	r1, [pc, #232]	; (801bb00 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801ba18:	fba2 0101 	umull	r0, r1, r2, r1
 801ba1c:	1863      	adds	r3, r4, r1
 801ba1e:	4619      	mov	r1, r3
 801ba20:	68fb      	ldr	r3, [r7, #12]
 801ba22:	461a      	mov	r2, r3
 801ba24:	f04f 0300 	mov.w	r3, #0
 801ba28:	f7f0 fb12 	bl	800c050 <__aeabi_uldivmod>
 801ba2c:	4602      	mov	r2, r0
 801ba2e:	460b      	mov	r3, r1
 801ba30:	4613      	mov	r3, r2
 801ba32:	617b      	str	r3, [r7, #20]
 801ba34:	e04a      	b.n	801bacc <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801ba36:	4b30      	ldr	r3, [pc, #192]	; (801baf8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801ba38:	685b      	ldr	r3, [r3, #4]
 801ba3a:	099b      	lsrs	r3, r3, #6
 801ba3c:	461a      	mov	r2, r3
 801ba3e:	f04f 0300 	mov.w	r3, #0
 801ba42:	f240 10ff 	movw	r0, #511	; 0x1ff
 801ba46:	f04f 0100 	mov.w	r1, #0
 801ba4a:	ea02 0400 	and.w	r4, r2, r0
 801ba4e:	ea03 0501 	and.w	r5, r3, r1
 801ba52:	4620      	mov	r0, r4
 801ba54:	4629      	mov	r1, r5
 801ba56:	f04f 0200 	mov.w	r2, #0
 801ba5a:	f04f 0300 	mov.w	r3, #0
 801ba5e:	014b      	lsls	r3, r1, #5
 801ba60:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 801ba64:	0142      	lsls	r2, r0, #5
 801ba66:	4610      	mov	r0, r2
 801ba68:	4619      	mov	r1, r3
 801ba6a:	1b00      	subs	r0, r0, r4
 801ba6c:	eb61 0105 	sbc.w	r1, r1, r5
 801ba70:	f04f 0200 	mov.w	r2, #0
 801ba74:	f04f 0300 	mov.w	r3, #0
 801ba78:	018b      	lsls	r3, r1, #6
 801ba7a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 801ba7e:	0182      	lsls	r2, r0, #6
 801ba80:	1a12      	subs	r2, r2, r0
 801ba82:	eb63 0301 	sbc.w	r3, r3, r1
 801ba86:	f04f 0000 	mov.w	r0, #0
 801ba8a:	f04f 0100 	mov.w	r1, #0
 801ba8e:	00d9      	lsls	r1, r3, #3
 801ba90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801ba94:	00d0      	lsls	r0, r2, #3
 801ba96:	4602      	mov	r2, r0
 801ba98:	460b      	mov	r3, r1
 801ba9a:	1912      	adds	r2, r2, r4
 801ba9c:	eb45 0303 	adc.w	r3, r5, r3
 801baa0:	f04f 0000 	mov.w	r0, #0
 801baa4:	f04f 0100 	mov.w	r1, #0
 801baa8:	0299      	lsls	r1, r3, #10
 801baaa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 801baae:	0290      	lsls	r0, r2, #10
 801bab0:	4602      	mov	r2, r0
 801bab2:	460b      	mov	r3, r1
 801bab4:	4610      	mov	r0, r2
 801bab6:	4619      	mov	r1, r3
 801bab8:	68fb      	ldr	r3, [r7, #12]
 801baba:	461a      	mov	r2, r3
 801babc:	f04f 0300 	mov.w	r3, #0
 801bac0:	f7f0 fac6 	bl	800c050 <__aeabi_uldivmod>
 801bac4:	4602      	mov	r2, r0
 801bac6:	460b      	mov	r3, r1
 801bac8:	4613      	mov	r3, r2
 801baca:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 801bacc:	4b0a      	ldr	r3, [pc, #40]	; (801baf8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801bace:	685b      	ldr	r3, [r3, #4]
 801bad0:	0f1b      	lsrs	r3, r3, #28
 801bad2:	f003 0307 	and.w	r3, r3, #7
 801bad6:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 801bad8:	697a      	ldr	r2, [r7, #20]
 801bada:	687b      	ldr	r3, [r7, #4]
 801badc:	fbb2 f3f3 	udiv	r3, r2, r3
 801bae0:	613b      	str	r3, [r7, #16]
      break;
 801bae2:	e002      	b.n	801baea <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801bae4:	4b05      	ldr	r3, [pc, #20]	; (801bafc <HAL_RCC_GetSysClockFreq+0x2b0>)
 801bae6:	613b      	str	r3, [r7, #16]
      break;
 801bae8:	bf00      	nop
    }
  }
  return sysclockfreq;
 801baea:	693b      	ldr	r3, [r7, #16]
}
 801baec:	4618      	mov	r0, r3
 801baee:	371c      	adds	r7, #28
 801baf0:	46bd      	mov	sp, r7
 801baf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801baf6:	bf00      	nop
 801baf8:	40023800 	.word	0x40023800
 801bafc:	00f42400 	.word	0x00f42400
 801bb00:	017d7840 	.word	0x017d7840

0801bb04 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801bb04:	b580      	push	{r7, lr}
 801bb06:	b086      	sub	sp, #24
 801bb08:	af00      	add	r7, sp, #0
 801bb0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801bb0c:	687b      	ldr	r3, [r7, #4]
 801bb0e:	2b00      	cmp	r3, #0
 801bb10:	d101      	bne.n	801bb16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801bb12:	2301      	movs	r3, #1
 801bb14:	e28d      	b.n	801c032 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801bb16:	687b      	ldr	r3, [r7, #4]
 801bb18:	681b      	ldr	r3, [r3, #0]
 801bb1a:	f003 0301 	and.w	r3, r3, #1
 801bb1e:	2b00      	cmp	r3, #0
 801bb20:	f000 8083 	beq.w	801bc2a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 801bb24:	4b94      	ldr	r3, [pc, #592]	; (801bd78 <HAL_RCC_OscConfig+0x274>)
 801bb26:	689b      	ldr	r3, [r3, #8]
 801bb28:	f003 030c 	and.w	r3, r3, #12
 801bb2c:	2b04      	cmp	r3, #4
 801bb2e:	d019      	beq.n	801bb64 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 801bb30:	4b91      	ldr	r3, [pc, #580]	; (801bd78 <HAL_RCC_OscConfig+0x274>)
 801bb32:	689b      	ldr	r3, [r3, #8]
 801bb34:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 801bb38:	2b08      	cmp	r3, #8
 801bb3a:	d106      	bne.n	801bb4a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 801bb3c:	4b8e      	ldr	r3, [pc, #568]	; (801bd78 <HAL_RCC_OscConfig+0x274>)
 801bb3e:	685b      	ldr	r3, [r3, #4]
 801bb40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bb44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801bb48:	d00c      	beq.n	801bb64 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801bb4a:	4b8b      	ldr	r3, [pc, #556]	; (801bd78 <HAL_RCC_OscConfig+0x274>)
 801bb4c:	689b      	ldr	r3, [r3, #8]
 801bb4e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 801bb52:	2b0c      	cmp	r3, #12
 801bb54:	d112      	bne.n	801bb7c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801bb56:	4b88      	ldr	r3, [pc, #544]	; (801bd78 <HAL_RCC_OscConfig+0x274>)
 801bb58:	685b      	ldr	r3, [r3, #4]
 801bb5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bb5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801bb62:	d10b      	bne.n	801bb7c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801bb64:	4b84      	ldr	r3, [pc, #528]	; (801bd78 <HAL_RCC_OscConfig+0x274>)
 801bb66:	681b      	ldr	r3, [r3, #0]
 801bb68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bb6c:	2b00      	cmp	r3, #0
 801bb6e:	d05b      	beq.n	801bc28 <HAL_RCC_OscConfig+0x124>
 801bb70:	687b      	ldr	r3, [r7, #4]
 801bb72:	685b      	ldr	r3, [r3, #4]
 801bb74:	2b00      	cmp	r3, #0
 801bb76:	d157      	bne.n	801bc28 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 801bb78:	2301      	movs	r3, #1
 801bb7a:	e25a      	b.n	801c032 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801bb7c:	687b      	ldr	r3, [r7, #4]
 801bb7e:	685b      	ldr	r3, [r3, #4]
 801bb80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801bb84:	d106      	bne.n	801bb94 <HAL_RCC_OscConfig+0x90>
 801bb86:	4b7c      	ldr	r3, [pc, #496]	; (801bd78 <HAL_RCC_OscConfig+0x274>)
 801bb88:	681b      	ldr	r3, [r3, #0]
 801bb8a:	4a7b      	ldr	r2, [pc, #492]	; (801bd78 <HAL_RCC_OscConfig+0x274>)
 801bb8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bb90:	6013      	str	r3, [r2, #0]
 801bb92:	e01d      	b.n	801bbd0 <HAL_RCC_OscConfig+0xcc>
 801bb94:	687b      	ldr	r3, [r7, #4]
 801bb96:	685b      	ldr	r3, [r3, #4]
 801bb98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801bb9c:	d10c      	bne.n	801bbb8 <HAL_RCC_OscConfig+0xb4>
 801bb9e:	4b76      	ldr	r3, [pc, #472]	; (801bd78 <HAL_RCC_OscConfig+0x274>)
 801bba0:	681b      	ldr	r3, [r3, #0]
 801bba2:	4a75      	ldr	r2, [pc, #468]	; (801bd78 <HAL_RCC_OscConfig+0x274>)
 801bba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801bba8:	6013      	str	r3, [r2, #0]
 801bbaa:	4b73      	ldr	r3, [pc, #460]	; (801bd78 <HAL_RCC_OscConfig+0x274>)
 801bbac:	681b      	ldr	r3, [r3, #0]
 801bbae:	4a72      	ldr	r2, [pc, #456]	; (801bd78 <HAL_RCC_OscConfig+0x274>)
 801bbb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bbb4:	6013      	str	r3, [r2, #0]
 801bbb6:	e00b      	b.n	801bbd0 <HAL_RCC_OscConfig+0xcc>
 801bbb8:	4b6f      	ldr	r3, [pc, #444]	; (801bd78 <HAL_RCC_OscConfig+0x274>)
 801bbba:	681b      	ldr	r3, [r3, #0]
 801bbbc:	4a6e      	ldr	r2, [pc, #440]	; (801bd78 <HAL_RCC_OscConfig+0x274>)
 801bbbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801bbc2:	6013      	str	r3, [r2, #0]
 801bbc4:	4b6c      	ldr	r3, [pc, #432]	; (801bd78 <HAL_RCC_OscConfig+0x274>)
 801bbc6:	681b      	ldr	r3, [r3, #0]
 801bbc8:	4a6b      	ldr	r2, [pc, #428]	; (801bd78 <HAL_RCC_OscConfig+0x274>)
 801bbca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801bbce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801bbd0:	687b      	ldr	r3, [r7, #4]
 801bbd2:	685b      	ldr	r3, [r3, #4]
 801bbd4:	2b00      	cmp	r3, #0
 801bbd6:	d013      	beq.n	801bc00 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bbd8:	f7fc fbcc 	bl	8018374 <HAL_GetTick>
 801bbdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801bbde:	e008      	b.n	801bbf2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801bbe0:	f7fc fbc8 	bl	8018374 <HAL_GetTick>
 801bbe4:	4602      	mov	r2, r0
 801bbe6:	693b      	ldr	r3, [r7, #16]
 801bbe8:	1ad3      	subs	r3, r2, r3
 801bbea:	2b64      	cmp	r3, #100	; 0x64
 801bbec:	d901      	bls.n	801bbf2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 801bbee:	2303      	movs	r3, #3
 801bbf0:	e21f      	b.n	801c032 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801bbf2:	4b61      	ldr	r3, [pc, #388]	; (801bd78 <HAL_RCC_OscConfig+0x274>)
 801bbf4:	681b      	ldr	r3, [r3, #0]
 801bbf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bbfa:	2b00      	cmp	r3, #0
 801bbfc:	d0f0      	beq.n	801bbe0 <HAL_RCC_OscConfig+0xdc>
 801bbfe:	e014      	b.n	801bc2a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bc00:	f7fc fbb8 	bl	8018374 <HAL_GetTick>
 801bc04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801bc06:	e008      	b.n	801bc1a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801bc08:	f7fc fbb4 	bl	8018374 <HAL_GetTick>
 801bc0c:	4602      	mov	r2, r0
 801bc0e:	693b      	ldr	r3, [r7, #16]
 801bc10:	1ad3      	subs	r3, r2, r3
 801bc12:	2b64      	cmp	r3, #100	; 0x64
 801bc14:	d901      	bls.n	801bc1a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 801bc16:	2303      	movs	r3, #3
 801bc18:	e20b      	b.n	801c032 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801bc1a:	4b57      	ldr	r3, [pc, #348]	; (801bd78 <HAL_RCC_OscConfig+0x274>)
 801bc1c:	681b      	ldr	r3, [r3, #0]
 801bc1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bc22:	2b00      	cmp	r3, #0
 801bc24:	d1f0      	bne.n	801bc08 <HAL_RCC_OscConfig+0x104>
 801bc26:	e000      	b.n	801bc2a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801bc28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801bc2a:	687b      	ldr	r3, [r7, #4]
 801bc2c:	681b      	ldr	r3, [r3, #0]
 801bc2e:	f003 0302 	and.w	r3, r3, #2
 801bc32:	2b00      	cmp	r3, #0
 801bc34:	d06f      	beq.n	801bd16 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 801bc36:	4b50      	ldr	r3, [pc, #320]	; (801bd78 <HAL_RCC_OscConfig+0x274>)
 801bc38:	689b      	ldr	r3, [r3, #8]
 801bc3a:	f003 030c 	and.w	r3, r3, #12
 801bc3e:	2b00      	cmp	r3, #0
 801bc40:	d017      	beq.n	801bc72 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 801bc42:	4b4d      	ldr	r3, [pc, #308]	; (801bd78 <HAL_RCC_OscConfig+0x274>)
 801bc44:	689b      	ldr	r3, [r3, #8]
 801bc46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 801bc4a:	2b08      	cmp	r3, #8
 801bc4c:	d105      	bne.n	801bc5a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 801bc4e:	4b4a      	ldr	r3, [pc, #296]	; (801bd78 <HAL_RCC_OscConfig+0x274>)
 801bc50:	685b      	ldr	r3, [r3, #4]
 801bc52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bc56:	2b00      	cmp	r3, #0
 801bc58:	d00b      	beq.n	801bc72 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801bc5a:	4b47      	ldr	r3, [pc, #284]	; (801bd78 <HAL_RCC_OscConfig+0x274>)
 801bc5c:	689b      	ldr	r3, [r3, #8]
 801bc5e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 801bc62:	2b0c      	cmp	r3, #12
 801bc64:	d11c      	bne.n	801bca0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801bc66:	4b44      	ldr	r3, [pc, #272]	; (801bd78 <HAL_RCC_OscConfig+0x274>)
 801bc68:	685b      	ldr	r3, [r3, #4]
 801bc6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bc6e:	2b00      	cmp	r3, #0
 801bc70:	d116      	bne.n	801bca0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801bc72:	4b41      	ldr	r3, [pc, #260]	; (801bd78 <HAL_RCC_OscConfig+0x274>)
 801bc74:	681b      	ldr	r3, [r3, #0]
 801bc76:	f003 0302 	and.w	r3, r3, #2
 801bc7a:	2b00      	cmp	r3, #0
 801bc7c:	d005      	beq.n	801bc8a <HAL_RCC_OscConfig+0x186>
 801bc7e:	687b      	ldr	r3, [r7, #4]
 801bc80:	68db      	ldr	r3, [r3, #12]
 801bc82:	2b01      	cmp	r3, #1
 801bc84:	d001      	beq.n	801bc8a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 801bc86:	2301      	movs	r3, #1
 801bc88:	e1d3      	b.n	801c032 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801bc8a:	4b3b      	ldr	r3, [pc, #236]	; (801bd78 <HAL_RCC_OscConfig+0x274>)
 801bc8c:	681b      	ldr	r3, [r3, #0]
 801bc8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801bc92:	687b      	ldr	r3, [r7, #4]
 801bc94:	691b      	ldr	r3, [r3, #16]
 801bc96:	00db      	lsls	r3, r3, #3
 801bc98:	4937      	ldr	r1, [pc, #220]	; (801bd78 <HAL_RCC_OscConfig+0x274>)
 801bc9a:	4313      	orrs	r3, r2
 801bc9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801bc9e:	e03a      	b.n	801bd16 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801bca0:	687b      	ldr	r3, [r7, #4]
 801bca2:	68db      	ldr	r3, [r3, #12]
 801bca4:	2b00      	cmp	r3, #0
 801bca6:	d020      	beq.n	801bcea <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801bca8:	4b34      	ldr	r3, [pc, #208]	; (801bd7c <HAL_RCC_OscConfig+0x278>)
 801bcaa:	2201      	movs	r2, #1
 801bcac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bcae:	f7fc fb61 	bl	8018374 <HAL_GetTick>
 801bcb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801bcb4:	e008      	b.n	801bcc8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801bcb6:	f7fc fb5d 	bl	8018374 <HAL_GetTick>
 801bcba:	4602      	mov	r2, r0
 801bcbc:	693b      	ldr	r3, [r7, #16]
 801bcbe:	1ad3      	subs	r3, r2, r3
 801bcc0:	2b02      	cmp	r3, #2
 801bcc2:	d901      	bls.n	801bcc8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 801bcc4:	2303      	movs	r3, #3
 801bcc6:	e1b4      	b.n	801c032 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801bcc8:	4b2b      	ldr	r3, [pc, #172]	; (801bd78 <HAL_RCC_OscConfig+0x274>)
 801bcca:	681b      	ldr	r3, [r3, #0]
 801bccc:	f003 0302 	and.w	r3, r3, #2
 801bcd0:	2b00      	cmp	r3, #0
 801bcd2:	d0f0      	beq.n	801bcb6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801bcd4:	4b28      	ldr	r3, [pc, #160]	; (801bd78 <HAL_RCC_OscConfig+0x274>)
 801bcd6:	681b      	ldr	r3, [r3, #0]
 801bcd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801bcdc:	687b      	ldr	r3, [r7, #4]
 801bcde:	691b      	ldr	r3, [r3, #16]
 801bce0:	00db      	lsls	r3, r3, #3
 801bce2:	4925      	ldr	r1, [pc, #148]	; (801bd78 <HAL_RCC_OscConfig+0x274>)
 801bce4:	4313      	orrs	r3, r2
 801bce6:	600b      	str	r3, [r1, #0]
 801bce8:	e015      	b.n	801bd16 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801bcea:	4b24      	ldr	r3, [pc, #144]	; (801bd7c <HAL_RCC_OscConfig+0x278>)
 801bcec:	2200      	movs	r2, #0
 801bcee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bcf0:	f7fc fb40 	bl	8018374 <HAL_GetTick>
 801bcf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801bcf6:	e008      	b.n	801bd0a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801bcf8:	f7fc fb3c 	bl	8018374 <HAL_GetTick>
 801bcfc:	4602      	mov	r2, r0
 801bcfe:	693b      	ldr	r3, [r7, #16]
 801bd00:	1ad3      	subs	r3, r2, r3
 801bd02:	2b02      	cmp	r3, #2
 801bd04:	d901      	bls.n	801bd0a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 801bd06:	2303      	movs	r3, #3
 801bd08:	e193      	b.n	801c032 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801bd0a:	4b1b      	ldr	r3, [pc, #108]	; (801bd78 <HAL_RCC_OscConfig+0x274>)
 801bd0c:	681b      	ldr	r3, [r3, #0]
 801bd0e:	f003 0302 	and.w	r3, r3, #2
 801bd12:	2b00      	cmp	r3, #0
 801bd14:	d1f0      	bne.n	801bcf8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801bd16:	687b      	ldr	r3, [r7, #4]
 801bd18:	681b      	ldr	r3, [r3, #0]
 801bd1a:	f003 0308 	and.w	r3, r3, #8
 801bd1e:	2b00      	cmp	r3, #0
 801bd20:	d036      	beq.n	801bd90 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801bd22:	687b      	ldr	r3, [r7, #4]
 801bd24:	695b      	ldr	r3, [r3, #20]
 801bd26:	2b00      	cmp	r3, #0
 801bd28:	d016      	beq.n	801bd58 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801bd2a:	4b15      	ldr	r3, [pc, #84]	; (801bd80 <HAL_RCC_OscConfig+0x27c>)
 801bd2c:	2201      	movs	r2, #1
 801bd2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bd30:	f7fc fb20 	bl	8018374 <HAL_GetTick>
 801bd34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801bd36:	e008      	b.n	801bd4a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801bd38:	f7fc fb1c 	bl	8018374 <HAL_GetTick>
 801bd3c:	4602      	mov	r2, r0
 801bd3e:	693b      	ldr	r3, [r7, #16]
 801bd40:	1ad3      	subs	r3, r2, r3
 801bd42:	2b02      	cmp	r3, #2
 801bd44:	d901      	bls.n	801bd4a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 801bd46:	2303      	movs	r3, #3
 801bd48:	e173      	b.n	801c032 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801bd4a:	4b0b      	ldr	r3, [pc, #44]	; (801bd78 <HAL_RCC_OscConfig+0x274>)
 801bd4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bd4e:	f003 0302 	and.w	r3, r3, #2
 801bd52:	2b00      	cmp	r3, #0
 801bd54:	d0f0      	beq.n	801bd38 <HAL_RCC_OscConfig+0x234>
 801bd56:	e01b      	b.n	801bd90 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801bd58:	4b09      	ldr	r3, [pc, #36]	; (801bd80 <HAL_RCC_OscConfig+0x27c>)
 801bd5a:	2200      	movs	r2, #0
 801bd5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bd5e:	f7fc fb09 	bl	8018374 <HAL_GetTick>
 801bd62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801bd64:	e00e      	b.n	801bd84 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801bd66:	f7fc fb05 	bl	8018374 <HAL_GetTick>
 801bd6a:	4602      	mov	r2, r0
 801bd6c:	693b      	ldr	r3, [r7, #16]
 801bd6e:	1ad3      	subs	r3, r2, r3
 801bd70:	2b02      	cmp	r3, #2
 801bd72:	d907      	bls.n	801bd84 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 801bd74:	2303      	movs	r3, #3
 801bd76:	e15c      	b.n	801c032 <HAL_RCC_OscConfig+0x52e>
 801bd78:	40023800 	.word	0x40023800
 801bd7c:	42470000 	.word	0x42470000
 801bd80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801bd84:	4b8a      	ldr	r3, [pc, #552]	; (801bfb0 <HAL_RCC_OscConfig+0x4ac>)
 801bd86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bd88:	f003 0302 	and.w	r3, r3, #2
 801bd8c:	2b00      	cmp	r3, #0
 801bd8e:	d1ea      	bne.n	801bd66 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801bd90:	687b      	ldr	r3, [r7, #4]
 801bd92:	681b      	ldr	r3, [r3, #0]
 801bd94:	f003 0304 	and.w	r3, r3, #4
 801bd98:	2b00      	cmp	r3, #0
 801bd9a:	f000 8097 	beq.w	801becc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801bd9e:	2300      	movs	r3, #0
 801bda0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801bda2:	4b83      	ldr	r3, [pc, #524]	; (801bfb0 <HAL_RCC_OscConfig+0x4ac>)
 801bda4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bda6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801bdaa:	2b00      	cmp	r3, #0
 801bdac:	d10f      	bne.n	801bdce <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801bdae:	2300      	movs	r3, #0
 801bdb0:	60bb      	str	r3, [r7, #8]
 801bdb2:	4b7f      	ldr	r3, [pc, #508]	; (801bfb0 <HAL_RCC_OscConfig+0x4ac>)
 801bdb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bdb6:	4a7e      	ldr	r2, [pc, #504]	; (801bfb0 <HAL_RCC_OscConfig+0x4ac>)
 801bdb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801bdbc:	6413      	str	r3, [r2, #64]	; 0x40
 801bdbe:	4b7c      	ldr	r3, [pc, #496]	; (801bfb0 <HAL_RCC_OscConfig+0x4ac>)
 801bdc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bdc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801bdc6:	60bb      	str	r3, [r7, #8]
 801bdc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801bdca:	2301      	movs	r3, #1
 801bdcc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801bdce:	4b79      	ldr	r3, [pc, #484]	; (801bfb4 <HAL_RCC_OscConfig+0x4b0>)
 801bdd0:	681b      	ldr	r3, [r3, #0]
 801bdd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bdd6:	2b00      	cmp	r3, #0
 801bdd8:	d118      	bne.n	801be0c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801bdda:	4b76      	ldr	r3, [pc, #472]	; (801bfb4 <HAL_RCC_OscConfig+0x4b0>)
 801bddc:	681b      	ldr	r3, [r3, #0]
 801bdde:	4a75      	ldr	r2, [pc, #468]	; (801bfb4 <HAL_RCC_OscConfig+0x4b0>)
 801bde0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801bde4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801bde6:	f7fc fac5 	bl	8018374 <HAL_GetTick>
 801bdea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801bdec:	e008      	b.n	801be00 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801bdee:	f7fc fac1 	bl	8018374 <HAL_GetTick>
 801bdf2:	4602      	mov	r2, r0
 801bdf4:	693b      	ldr	r3, [r7, #16]
 801bdf6:	1ad3      	subs	r3, r2, r3
 801bdf8:	2b02      	cmp	r3, #2
 801bdfa:	d901      	bls.n	801be00 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 801bdfc:	2303      	movs	r3, #3
 801bdfe:	e118      	b.n	801c032 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801be00:	4b6c      	ldr	r3, [pc, #432]	; (801bfb4 <HAL_RCC_OscConfig+0x4b0>)
 801be02:	681b      	ldr	r3, [r3, #0]
 801be04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801be08:	2b00      	cmp	r3, #0
 801be0a:	d0f0      	beq.n	801bdee <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801be0c:	687b      	ldr	r3, [r7, #4]
 801be0e:	689b      	ldr	r3, [r3, #8]
 801be10:	2b01      	cmp	r3, #1
 801be12:	d106      	bne.n	801be22 <HAL_RCC_OscConfig+0x31e>
 801be14:	4b66      	ldr	r3, [pc, #408]	; (801bfb0 <HAL_RCC_OscConfig+0x4ac>)
 801be16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801be18:	4a65      	ldr	r2, [pc, #404]	; (801bfb0 <HAL_RCC_OscConfig+0x4ac>)
 801be1a:	f043 0301 	orr.w	r3, r3, #1
 801be1e:	6713      	str	r3, [r2, #112]	; 0x70
 801be20:	e01c      	b.n	801be5c <HAL_RCC_OscConfig+0x358>
 801be22:	687b      	ldr	r3, [r7, #4]
 801be24:	689b      	ldr	r3, [r3, #8]
 801be26:	2b05      	cmp	r3, #5
 801be28:	d10c      	bne.n	801be44 <HAL_RCC_OscConfig+0x340>
 801be2a:	4b61      	ldr	r3, [pc, #388]	; (801bfb0 <HAL_RCC_OscConfig+0x4ac>)
 801be2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801be2e:	4a60      	ldr	r2, [pc, #384]	; (801bfb0 <HAL_RCC_OscConfig+0x4ac>)
 801be30:	f043 0304 	orr.w	r3, r3, #4
 801be34:	6713      	str	r3, [r2, #112]	; 0x70
 801be36:	4b5e      	ldr	r3, [pc, #376]	; (801bfb0 <HAL_RCC_OscConfig+0x4ac>)
 801be38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801be3a:	4a5d      	ldr	r2, [pc, #372]	; (801bfb0 <HAL_RCC_OscConfig+0x4ac>)
 801be3c:	f043 0301 	orr.w	r3, r3, #1
 801be40:	6713      	str	r3, [r2, #112]	; 0x70
 801be42:	e00b      	b.n	801be5c <HAL_RCC_OscConfig+0x358>
 801be44:	4b5a      	ldr	r3, [pc, #360]	; (801bfb0 <HAL_RCC_OscConfig+0x4ac>)
 801be46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801be48:	4a59      	ldr	r2, [pc, #356]	; (801bfb0 <HAL_RCC_OscConfig+0x4ac>)
 801be4a:	f023 0301 	bic.w	r3, r3, #1
 801be4e:	6713      	str	r3, [r2, #112]	; 0x70
 801be50:	4b57      	ldr	r3, [pc, #348]	; (801bfb0 <HAL_RCC_OscConfig+0x4ac>)
 801be52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801be54:	4a56      	ldr	r2, [pc, #344]	; (801bfb0 <HAL_RCC_OscConfig+0x4ac>)
 801be56:	f023 0304 	bic.w	r3, r3, #4
 801be5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801be5c:	687b      	ldr	r3, [r7, #4]
 801be5e:	689b      	ldr	r3, [r3, #8]
 801be60:	2b00      	cmp	r3, #0
 801be62:	d015      	beq.n	801be90 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801be64:	f7fc fa86 	bl	8018374 <HAL_GetTick>
 801be68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801be6a:	e00a      	b.n	801be82 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801be6c:	f7fc fa82 	bl	8018374 <HAL_GetTick>
 801be70:	4602      	mov	r2, r0
 801be72:	693b      	ldr	r3, [r7, #16]
 801be74:	1ad3      	subs	r3, r2, r3
 801be76:	f241 3288 	movw	r2, #5000	; 0x1388
 801be7a:	4293      	cmp	r3, r2
 801be7c:	d901      	bls.n	801be82 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 801be7e:	2303      	movs	r3, #3
 801be80:	e0d7      	b.n	801c032 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801be82:	4b4b      	ldr	r3, [pc, #300]	; (801bfb0 <HAL_RCC_OscConfig+0x4ac>)
 801be84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801be86:	f003 0302 	and.w	r3, r3, #2
 801be8a:	2b00      	cmp	r3, #0
 801be8c:	d0ee      	beq.n	801be6c <HAL_RCC_OscConfig+0x368>
 801be8e:	e014      	b.n	801beba <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801be90:	f7fc fa70 	bl	8018374 <HAL_GetTick>
 801be94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801be96:	e00a      	b.n	801beae <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801be98:	f7fc fa6c 	bl	8018374 <HAL_GetTick>
 801be9c:	4602      	mov	r2, r0
 801be9e:	693b      	ldr	r3, [r7, #16]
 801bea0:	1ad3      	subs	r3, r2, r3
 801bea2:	f241 3288 	movw	r2, #5000	; 0x1388
 801bea6:	4293      	cmp	r3, r2
 801bea8:	d901      	bls.n	801beae <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 801beaa:	2303      	movs	r3, #3
 801beac:	e0c1      	b.n	801c032 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801beae:	4b40      	ldr	r3, [pc, #256]	; (801bfb0 <HAL_RCC_OscConfig+0x4ac>)
 801beb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801beb2:	f003 0302 	and.w	r3, r3, #2
 801beb6:	2b00      	cmp	r3, #0
 801beb8:	d1ee      	bne.n	801be98 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801beba:	7dfb      	ldrb	r3, [r7, #23]
 801bebc:	2b01      	cmp	r3, #1
 801bebe:	d105      	bne.n	801becc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801bec0:	4b3b      	ldr	r3, [pc, #236]	; (801bfb0 <HAL_RCC_OscConfig+0x4ac>)
 801bec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bec4:	4a3a      	ldr	r2, [pc, #232]	; (801bfb0 <HAL_RCC_OscConfig+0x4ac>)
 801bec6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801beca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801becc:	687b      	ldr	r3, [r7, #4]
 801bece:	699b      	ldr	r3, [r3, #24]
 801bed0:	2b00      	cmp	r3, #0
 801bed2:	f000 80ad 	beq.w	801c030 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801bed6:	4b36      	ldr	r3, [pc, #216]	; (801bfb0 <HAL_RCC_OscConfig+0x4ac>)
 801bed8:	689b      	ldr	r3, [r3, #8]
 801beda:	f003 030c 	and.w	r3, r3, #12
 801bede:	2b08      	cmp	r3, #8
 801bee0:	d060      	beq.n	801bfa4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801bee2:	687b      	ldr	r3, [r7, #4]
 801bee4:	699b      	ldr	r3, [r3, #24]
 801bee6:	2b02      	cmp	r3, #2
 801bee8:	d145      	bne.n	801bf76 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801beea:	4b33      	ldr	r3, [pc, #204]	; (801bfb8 <HAL_RCC_OscConfig+0x4b4>)
 801beec:	2200      	movs	r2, #0
 801beee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bef0:	f7fc fa40 	bl	8018374 <HAL_GetTick>
 801bef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801bef6:	e008      	b.n	801bf0a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801bef8:	f7fc fa3c 	bl	8018374 <HAL_GetTick>
 801befc:	4602      	mov	r2, r0
 801befe:	693b      	ldr	r3, [r7, #16]
 801bf00:	1ad3      	subs	r3, r2, r3
 801bf02:	2b02      	cmp	r3, #2
 801bf04:	d901      	bls.n	801bf0a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 801bf06:	2303      	movs	r3, #3
 801bf08:	e093      	b.n	801c032 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801bf0a:	4b29      	ldr	r3, [pc, #164]	; (801bfb0 <HAL_RCC_OscConfig+0x4ac>)
 801bf0c:	681b      	ldr	r3, [r3, #0]
 801bf0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801bf12:	2b00      	cmp	r3, #0
 801bf14:	d1f0      	bne.n	801bef8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801bf16:	687b      	ldr	r3, [r7, #4]
 801bf18:	69da      	ldr	r2, [r3, #28]
 801bf1a:	687b      	ldr	r3, [r7, #4]
 801bf1c:	6a1b      	ldr	r3, [r3, #32]
 801bf1e:	431a      	orrs	r2, r3
 801bf20:	687b      	ldr	r3, [r7, #4]
 801bf22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bf24:	019b      	lsls	r3, r3, #6
 801bf26:	431a      	orrs	r2, r3
 801bf28:	687b      	ldr	r3, [r7, #4]
 801bf2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bf2c:	085b      	lsrs	r3, r3, #1
 801bf2e:	3b01      	subs	r3, #1
 801bf30:	041b      	lsls	r3, r3, #16
 801bf32:	431a      	orrs	r2, r3
 801bf34:	687b      	ldr	r3, [r7, #4]
 801bf36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bf38:	061b      	lsls	r3, r3, #24
 801bf3a:	431a      	orrs	r2, r3
 801bf3c:	687b      	ldr	r3, [r7, #4]
 801bf3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bf40:	071b      	lsls	r3, r3, #28
 801bf42:	491b      	ldr	r1, [pc, #108]	; (801bfb0 <HAL_RCC_OscConfig+0x4ac>)
 801bf44:	4313      	orrs	r3, r2
 801bf46:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801bf48:	4b1b      	ldr	r3, [pc, #108]	; (801bfb8 <HAL_RCC_OscConfig+0x4b4>)
 801bf4a:	2201      	movs	r2, #1
 801bf4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bf4e:	f7fc fa11 	bl	8018374 <HAL_GetTick>
 801bf52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801bf54:	e008      	b.n	801bf68 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801bf56:	f7fc fa0d 	bl	8018374 <HAL_GetTick>
 801bf5a:	4602      	mov	r2, r0
 801bf5c:	693b      	ldr	r3, [r7, #16]
 801bf5e:	1ad3      	subs	r3, r2, r3
 801bf60:	2b02      	cmp	r3, #2
 801bf62:	d901      	bls.n	801bf68 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 801bf64:	2303      	movs	r3, #3
 801bf66:	e064      	b.n	801c032 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801bf68:	4b11      	ldr	r3, [pc, #68]	; (801bfb0 <HAL_RCC_OscConfig+0x4ac>)
 801bf6a:	681b      	ldr	r3, [r3, #0]
 801bf6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801bf70:	2b00      	cmp	r3, #0
 801bf72:	d0f0      	beq.n	801bf56 <HAL_RCC_OscConfig+0x452>
 801bf74:	e05c      	b.n	801c030 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801bf76:	4b10      	ldr	r3, [pc, #64]	; (801bfb8 <HAL_RCC_OscConfig+0x4b4>)
 801bf78:	2200      	movs	r2, #0
 801bf7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bf7c:	f7fc f9fa 	bl	8018374 <HAL_GetTick>
 801bf80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801bf82:	e008      	b.n	801bf96 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801bf84:	f7fc f9f6 	bl	8018374 <HAL_GetTick>
 801bf88:	4602      	mov	r2, r0
 801bf8a:	693b      	ldr	r3, [r7, #16]
 801bf8c:	1ad3      	subs	r3, r2, r3
 801bf8e:	2b02      	cmp	r3, #2
 801bf90:	d901      	bls.n	801bf96 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 801bf92:	2303      	movs	r3, #3
 801bf94:	e04d      	b.n	801c032 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801bf96:	4b06      	ldr	r3, [pc, #24]	; (801bfb0 <HAL_RCC_OscConfig+0x4ac>)
 801bf98:	681b      	ldr	r3, [r3, #0]
 801bf9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801bf9e:	2b00      	cmp	r3, #0
 801bfa0:	d1f0      	bne.n	801bf84 <HAL_RCC_OscConfig+0x480>
 801bfa2:	e045      	b.n	801c030 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801bfa4:	687b      	ldr	r3, [r7, #4]
 801bfa6:	699b      	ldr	r3, [r3, #24]
 801bfa8:	2b01      	cmp	r3, #1
 801bfaa:	d107      	bne.n	801bfbc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 801bfac:	2301      	movs	r3, #1
 801bfae:	e040      	b.n	801c032 <HAL_RCC_OscConfig+0x52e>
 801bfb0:	40023800 	.word	0x40023800
 801bfb4:	40007000 	.word	0x40007000
 801bfb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801bfbc:	4b1f      	ldr	r3, [pc, #124]	; (801c03c <HAL_RCC_OscConfig+0x538>)
 801bfbe:	685b      	ldr	r3, [r3, #4]
 801bfc0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801bfc2:	687b      	ldr	r3, [r7, #4]
 801bfc4:	699b      	ldr	r3, [r3, #24]
 801bfc6:	2b01      	cmp	r3, #1
 801bfc8:	d030      	beq.n	801c02c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801bfca:	68fb      	ldr	r3, [r7, #12]
 801bfcc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801bfd0:	687b      	ldr	r3, [r7, #4]
 801bfd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801bfd4:	429a      	cmp	r2, r3
 801bfd6:	d129      	bne.n	801c02c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801bfd8:	68fb      	ldr	r3, [r7, #12]
 801bfda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801bfde:	687b      	ldr	r3, [r7, #4]
 801bfe0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801bfe2:	429a      	cmp	r2, r3
 801bfe4:	d122      	bne.n	801c02c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801bfe6:	68fa      	ldr	r2, [r7, #12]
 801bfe8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801bfec:	4013      	ands	r3, r2
 801bfee:	687a      	ldr	r2, [r7, #4]
 801bff0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801bff2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801bff4:	4293      	cmp	r3, r2
 801bff6:	d119      	bne.n	801c02c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801bff8:	68fb      	ldr	r3, [r7, #12]
 801bffa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801bffe:	687b      	ldr	r3, [r7, #4]
 801c000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c002:	085b      	lsrs	r3, r3, #1
 801c004:	3b01      	subs	r3, #1
 801c006:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801c008:	429a      	cmp	r2, r3
 801c00a:	d10f      	bne.n	801c02c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801c00c:	68fb      	ldr	r3, [r7, #12]
 801c00e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801c012:	687b      	ldr	r3, [r7, #4]
 801c014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c016:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801c018:	429a      	cmp	r2, r3
 801c01a:	d107      	bne.n	801c02c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 801c01c:	68fb      	ldr	r3, [r7, #12]
 801c01e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 801c022:	687b      	ldr	r3, [r7, #4]
 801c024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c026:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801c028:	429a      	cmp	r2, r3
 801c02a:	d001      	beq.n	801c030 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 801c02c:	2301      	movs	r3, #1
 801c02e:	e000      	b.n	801c032 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 801c030:	2300      	movs	r3, #0
}
 801c032:	4618      	mov	r0, r3
 801c034:	3718      	adds	r7, #24
 801c036:	46bd      	mov	sp, r7
 801c038:	bd80      	pop	{r7, pc}
 801c03a:	bf00      	nop
 801c03c:	40023800 	.word	0x40023800

0801c040 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801c040:	b580      	push	{r7, lr}
 801c042:	b082      	sub	sp, #8
 801c044:	af00      	add	r7, sp, #0
 801c046:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801c048:	687b      	ldr	r3, [r7, #4]
 801c04a:	2b00      	cmp	r3, #0
 801c04c:	d101      	bne.n	801c052 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801c04e:	2301      	movs	r3, #1
 801c050:	e07b      	b.n	801c14a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801c052:	687b      	ldr	r3, [r7, #4]
 801c054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c056:	2b00      	cmp	r3, #0
 801c058:	d108      	bne.n	801c06c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801c05a:	687b      	ldr	r3, [r7, #4]
 801c05c:	685b      	ldr	r3, [r3, #4]
 801c05e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c062:	d009      	beq.n	801c078 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801c064:	687b      	ldr	r3, [r7, #4]
 801c066:	2200      	movs	r2, #0
 801c068:	61da      	str	r2, [r3, #28]
 801c06a:	e005      	b.n	801c078 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801c06c:	687b      	ldr	r3, [r7, #4]
 801c06e:	2200      	movs	r2, #0
 801c070:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801c072:	687b      	ldr	r3, [r7, #4]
 801c074:	2200      	movs	r2, #0
 801c076:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801c078:	687b      	ldr	r3, [r7, #4]
 801c07a:	2200      	movs	r2, #0
 801c07c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801c07e:	687b      	ldr	r3, [r7, #4]
 801c080:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c084:	b2db      	uxtb	r3, r3
 801c086:	2b00      	cmp	r3, #0
 801c088:	d106      	bne.n	801c098 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801c08a:	687b      	ldr	r3, [r7, #4]
 801c08c:	2200      	movs	r2, #0
 801c08e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801c092:	6878      	ldr	r0, [r7, #4]
 801c094:	f7fb fefc 	bl	8017e90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801c098:	687b      	ldr	r3, [r7, #4]
 801c09a:	2202      	movs	r2, #2
 801c09c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801c0a0:	687b      	ldr	r3, [r7, #4]
 801c0a2:	681b      	ldr	r3, [r3, #0]
 801c0a4:	681a      	ldr	r2, [r3, #0]
 801c0a6:	687b      	ldr	r3, [r7, #4]
 801c0a8:	681b      	ldr	r3, [r3, #0]
 801c0aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c0ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801c0b0:	687b      	ldr	r3, [r7, #4]
 801c0b2:	685b      	ldr	r3, [r3, #4]
 801c0b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801c0b8:	687b      	ldr	r3, [r7, #4]
 801c0ba:	689b      	ldr	r3, [r3, #8]
 801c0bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801c0c0:	431a      	orrs	r2, r3
 801c0c2:	687b      	ldr	r3, [r7, #4]
 801c0c4:	68db      	ldr	r3, [r3, #12]
 801c0c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c0ca:	431a      	orrs	r2, r3
 801c0cc:	687b      	ldr	r3, [r7, #4]
 801c0ce:	691b      	ldr	r3, [r3, #16]
 801c0d0:	f003 0302 	and.w	r3, r3, #2
 801c0d4:	431a      	orrs	r2, r3
 801c0d6:	687b      	ldr	r3, [r7, #4]
 801c0d8:	695b      	ldr	r3, [r3, #20]
 801c0da:	f003 0301 	and.w	r3, r3, #1
 801c0de:	431a      	orrs	r2, r3
 801c0e0:	687b      	ldr	r3, [r7, #4]
 801c0e2:	699b      	ldr	r3, [r3, #24]
 801c0e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801c0e8:	431a      	orrs	r2, r3
 801c0ea:	687b      	ldr	r3, [r7, #4]
 801c0ec:	69db      	ldr	r3, [r3, #28]
 801c0ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801c0f2:	431a      	orrs	r2, r3
 801c0f4:	687b      	ldr	r3, [r7, #4]
 801c0f6:	6a1b      	ldr	r3, [r3, #32]
 801c0f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c0fc:	ea42 0103 	orr.w	r1, r2, r3
 801c100:	687b      	ldr	r3, [r7, #4]
 801c102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c104:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801c108:	687b      	ldr	r3, [r7, #4]
 801c10a:	681b      	ldr	r3, [r3, #0]
 801c10c:	430a      	orrs	r2, r1
 801c10e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 801c110:	687b      	ldr	r3, [r7, #4]
 801c112:	699b      	ldr	r3, [r3, #24]
 801c114:	0c1b      	lsrs	r3, r3, #16
 801c116:	f003 0104 	and.w	r1, r3, #4
 801c11a:	687b      	ldr	r3, [r7, #4]
 801c11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c11e:	f003 0210 	and.w	r2, r3, #16
 801c122:	687b      	ldr	r3, [r7, #4]
 801c124:	681b      	ldr	r3, [r3, #0]
 801c126:	430a      	orrs	r2, r1
 801c128:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801c12a:	687b      	ldr	r3, [r7, #4]
 801c12c:	681b      	ldr	r3, [r3, #0]
 801c12e:	69da      	ldr	r2, [r3, #28]
 801c130:	687b      	ldr	r3, [r7, #4]
 801c132:	681b      	ldr	r3, [r3, #0]
 801c134:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801c138:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801c13a:	687b      	ldr	r3, [r7, #4]
 801c13c:	2200      	movs	r2, #0
 801c13e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 801c140:	687b      	ldr	r3, [r7, #4]
 801c142:	2201      	movs	r2, #1
 801c144:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 801c148:	2300      	movs	r3, #0
}
 801c14a:	4618      	mov	r0, r3
 801c14c:	3708      	adds	r7, #8
 801c14e:	46bd      	mov	sp, r7
 801c150:	bd80      	pop	{r7, pc}

0801c152 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c152:	b580      	push	{r7, lr}
 801c154:	b088      	sub	sp, #32
 801c156:	af00      	add	r7, sp, #0
 801c158:	60f8      	str	r0, [r7, #12]
 801c15a:	60b9      	str	r1, [r7, #8]
 801c15c:	603b      	str	r3, [r7, #0]
 801c15e:	4613      	mov	r3, r2
 801c160:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801c162:	2300      	movs	r3, #0
 801c164:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c166:	68fb      	ldr	r3, [r7, #12]
 801c168:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801c16c:	2b01      	cmp	r3, #1
 801c16e:	d101      	bne.n	801c174 <HAL_SPI_Transmit+0x22>
 801c170:	2302      	movs	r3, #2
 801c172:	e126      	b.n	801c3c2 <HAL_SPI_Transmit+0x270>
 801c174:	68fb      	ldr	r3, [r7, #12]
 801c176:	2201      	movs	r2, #1
 801c178:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c17c:	f7fc f8fa 	bl	8018374 <HAL_GetTick>
 801c180:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801c182:	88fb      	ldrh	r3, [r7, #6]
 801c184:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801c186:	68fb      	ldr	r3, [r7, #12]
 801c188:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c18c:	b2db      	uxtb	r3, r3
 801c18e:	2b01      	cmp	r3, #1
 801c190:	d002      	beq.n	801c198 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801c192:	2302      	movs	r3, #2
 801c194:	77fb      	strb	r3, [r7, #31]
    goto error;
 801c196:	e10b      	b.n	801c3b0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 801c198:	68bb      	ldr	r3, [r7, #8]
 801c19a:	2b00      	cmp	r3, #0
 801c19c:	d002      	beq.n	801c1a4 <HAL_SPI_Transmit+0x52>
 801c19e:	88fb      	ldrh	r3, [r7, #6]
 801c1a0:	2b00      	cmp	r3, #0
 801c1a2:	d102      	bne.n	801c1aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801c1a4:	2301      	movs	r3, #1
 801c1a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 801c1a8:	e102      	b.n	801c3b0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801c1aa:	68fb      	ldr	r3, [r7, #12]
 801c1ac:	2203      	movs	r2, #3
 801c1ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c1b2:	68fb      	ldr	r3, [r7, #12]
 801c1b4:	2200      	movs	r2, #0
 801c1b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801c1b8:	68fb      	ldr	r3, [r7, #12]
 801c1ba:	68ba      	ldr	r2, [r7, #8]
 801c1bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 801c1be:	68fb      	ldr	r3, [r7, #12]
 801c1c0:	88fa      	ldrh	r2, [r7, #6]
 801c1c2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 801c1c4:	68fb      	ldr	r3, [r7, #12]
 801c1c6:	88fa      	ldrh	r2, [r7, #6]
 801c1c8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801c1ca:	68fb      	ldr	r3, [r7, #12]
 801c1cc:	2200      	movs	r2, #0
 801c1ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 801c1d0:	68fb      	ldr	r3, [r7, #12]
 801c1d2:	2200      	movs	r2, #0
 801c1d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 801c1d6:	68fb      	ldr	r3, [r7, #12]
 801c1d8:	2200      	movs	r2, #0
 801c1da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 801c1dc:	68fb      	ldr	r3, [r7, #12]
 801c1de:	2200      	movs	r2, #0
 801c1e0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 801c1e2:	68fb      	ldr	r3, [r7, #12]
 801c1e4:	2200      	movs	r2, #0
 801c1e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c1e8:	68fb      	ldr	r3, [r7, #12]
 801c1ea:	689b      	ldr	r3, [r3, #8]
 801c1ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c1f0:	d10f      	bne.n	801c212 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801c1f2:	68fb      	ldr	r3, [r7, #12]
 801c1f4:	681b      	ldr	r3, [r3, #0]
 801c1f6:	681a      	ldr	r2, [r3, #0]
 801c1f8:	68fb      	ldr	r3, [r7, #12]
 801c1fa:	681b      	ldr	r3, [r3, #0]
 801c1fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c200:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801c202:	68fb      	ldr	r3, [r7, #12]
 801c204:	681b      	ldr	r3, [r3, #0]
 801c206:	681a      	ldr	r2, [r3, #0]
 801c208:	68fb      	ldr	r3, [r7, #12]
 801c20a:	681b      	ldr	r3, [r3, #0]
 801c20c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801c210:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c212:	68fb      	ldr	r3, [r7, #12]
 801c214:	681b      	ldr	r3, [r3, #0]
 801c216:	681b      	ldr	r3, [r3, #0]
 801c218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c21c:	2b40      	cmp	r3, #64	; 0x40
 801c21e:	d007      	beq.n	801c230 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c220:	68fb      	ldr	r3, [r7, #12]
 801c222:	681b      	ldr	r3, [r3, #0]
 801c224:	681a      	ldr	r2, [r3, #0]
 801c226:	68fb      	ldr	r3, [r7, #12]
 801c228:	681b      	ldr	r3, [r3, #0]
 801c22a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c22e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801c230:	68fb      	ldr	r3, [r7, #12]
 801c232:	68db      	ldr	r3, [r3, #12]
 801c234:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c238:	d14b      	bne.n	801c2d2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c23a:	68fb      	ldr	r3, [r7, #12]
 801c23c:	685b      	ldr	r3, [r3, #4]
 801c23e:	2b00      	cmp	r3, #0
 801c240:	d002      	beq.n	801c248 <HAL_SPI_Transmit+0xf6>
 801c242:	8afb      	ldrh	r3, [r7, #22]
 801c244:	2b01      	cmp	r3, #1
 801c246:	d13e      	bne.n	801c2c6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c248:	68fb      	ldr	r3, [r7, #12]
 801c24a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c24c:	881a      	ldrh	r2, [r3, #0]
 801c24e:	68fb      	ldr	r3, [r7, #12]
 801c250:	681b      	ldr	r3, [r3, #0]
 801c252:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801c254:	68fb      	ldr	r3, [r7, #12]
 801c256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c258:	1c9a      	adds	r2, r3, #2
 801c25a:	68fb      	ldr	r3, [r7, #12]
 801c25c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801c25e:	68fb      	ldr	r3, [r7, #12]
 801c260:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c262:	b29b      	uxth	r3, r3
 801c264:	3b01      	subs	r3, #1
 801c266:	b29a      	uxth	r2, r3
 801c268:	68fb      	ldr	r3, [r7, #12]
 801c26a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801c26c:	e02b      	b.n	801c2c6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801c26e:	68fb      	ldr	r3, [r7, #12]
 801c270:	681b      	ldr	r3, [r3, #0]
 801c272:	689b      	ldr	r3, [r3, #8]
 801c274:	f003 0302 	and.w	r3, r3, #2
 801c278:	2b02      	cmp	r3, #2
 801c27a:	d112      	bne.n	801c2a2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c27c:	68fb      	ldr	r3, [r7, #12]
 801c27e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c280:	881a      	ldrh	r2, [r3, #0]
 801c282:	68fb      	ldr	r3, [r7, #12]
 801c284:	681b      	ldr	r3, [r3, #0]
 801c286:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801c288:	68fb      	ldr	r3, [r7, #12]
 801c28a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c28c:	1c9a      	adds	r2, r3, #2
 801c28e:	68fb      	ldr	r3, [r7, #12]
 801c290:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801c292:	68fb      	ldr	r3, [r7, #12]
 801c294:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c296:	b29b      	uxth	r3, r3
 801c298:	3b01      	subs	r3, #1
 801c29a:	b29a      	uxth	r2, r3
 801c29c:	68fb      	ldr	r3, [r7, #12]
 801c29e:	86da      	strh	r2, [r3, #54]	; 0x36
 801c2a0:	e011      	b.n	801c2c6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c2a2:	f7fc f867 	bl	8018374 <HAL_GetTick>
 801c2a6:	4602      	mov	r2, r0
 801c2a8:	69bb      	ldr	r3, [r7, #24]
 801c2aa:	1ad3      	subs	r3, r2, r3
 801c2ac:	683a      	ldr	r2, [r7, #0]
 801c2ae:	429a      	cmp	r2, r3
 801c2b0:	d803      	bhi.n	801c2ba <HAL_SPI_Transmit+0x168>
 801c2b2:	683b      	ldr	r3, [r7, #0]
 801c2b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c2b8:	d102      	bne.n	801c2c0 <HAL_SPI_Transmit+0x16e>
 801c2ba:	683b      	ldr	r3, [r7, #0]
 801c2bc:	2b00      	cmp	r3, #0
 801c2be:	d102      	bne.n	801c2c6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 801c2c0:	2303      	movs	r3, #3
 801c2c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 801c2c4:	e074      	b.n	801c3b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 801c2c6:	68fb      	ldr	r3, [r7, #12]
 801c2c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c2ca:	b29b      	uxth	r3, r3
 801c2cc:	2b00      	cmp	r3, #0
 801c2ce:	d1ce      	bne.n	801c26e <HAL_SPI_Transmit+0x11c>
 801c2d0:	e04c      	b.n	801c36c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c2d2:	68fb      	ldr	r3, [r7, #12]
 801c2d4:	685b      	ldr	r3, [r3, #4]
 801c2d6:	2b00      	cmp	r3, #0
 801c2d8:	d002      	beq.n	801c2e0 <HAL_SPI_Transmit+0x18e>
 801c2da:	8afb      	ldrh	r3, [r7, #22]
 801c2dc:	2b01      	cmp	r3, #1
 801c2de:	d140      	bne.n	801c362 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801c2e0:	68fb      	ldr	r3, [r7, #12]
 801c2e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c2e4:	68fb      	ldr	r3, [r7, #12]
 801c2e6:	681b      	ldr	r3, [r3, #0]
 801c2e8:	330c      	adds	r3, #12
 801c2ea:	7812      	ldrb	r2, [r2, #0]
 801c2ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801c2ee:	68fb      	ldr	r3, [r7, #12]
 801c2f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c2f2:	1c5a      	adds	r2, r3, #1
 801c2f4:	68fb      	ldr	r3, [r7, #12]
 801c2f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801c2f8:	68fb      	ldr	r3, [r7, #12]
 801c2fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c2fc:	b29b      	uxth	r3, r3
 801c2fe:	3b01      	subs	r3, #1
 801c300:	b29a      	uxth	r2, r3
 801c302:	68fb      	ldr	r3, [r7, #12]
 801c304:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 801c306:	e02c      	b.n	801c362 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801c308:	68fb      	ldr	r3, [r7, #12]
 801c30a:	681b      	ldr	r3, [r3, #0]
 801c30c:	689b      	ldr	r3, [r3, #8]
 801c30e:	f003 0302 	and.w	r3, r3, #2
 801c312:	2b02      	cmp	r3, #2
 801c314:	d113      	bne.n	801c33e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801c316:	68fb      	ldr	r3, [r7, #12]
 801c318:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c31a:	68fb      	ldr	r3, [r7, #12]
 801c31c:	681b      	ldr	r3, [r3, #0]
 801c31e:	330c      	adds	r3, #12
 801c320:	7812      	ldrb	r2, [r2, #0]
 801c322:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801c324:	68fb      	ldr	r3, [r7, #12]
 801c326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c328:	1c5a      	adds	r2, r3, #1
 801c32a:	68fb      	ldr	r3, [r7, #12]
 801c32c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801c32e:	68fb      	ldr	r3, [r7, #12]
 801c330:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c332:	b29b      	uxth	r3, r3
 801c334:	3b01      	subs	r3, #1
 801c336:	b29a      	uxth	r2, r3
 801c338:	68fb      	ldr	r3, [r7, #12]
 801c33a:	86da      	strh	r2, [r3, #54]	; 0x36
 801c33c:	e011      	b.n	801c362 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c33e:	f7fc f819 	bl	8018374 <HAL_GetTick>
 801c342:	4602      	mov	r2, r0
 801c344:	69bb      	ldr	r3, [r7, #24]
 801c346:	1ad3      	subs	r3, r2, r3
 801c348:	683a      	ldr	r2, [r7, #0]
 801c34a:	429a      	cmp	r2, r3
 801c34c:	d803      	bhi.n	801c356 <HAL_SPI_Transmit+0x204>
 801c34e:	683b      	ldr	r3, [r7, #0]
 801c350:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c354:	d102      	bne.n	801c35c <HAL_SPI_Transmit+0x20a>
 801c356:	683b      	ldr	r3, [r7, #0]
 801c358:	2b00      	cmp	r3, #0
 801c35a:	d102      	bne.n	801c362 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 801c35c:	2303      	movs	r3, #3
 801c35e:	77fb      	strb	r3, [r7, #31]
          goto error;
 801c360:	e026      	b.n	801c3b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 801c362:	68fb      	ldr	r3, [r7, #12]
 801c364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c366:	b29b      	uxth	r3, r3
 801c368:	2b00      	cmp	r3, #0
 801c36a:	d1cd      	bne.n	801c308 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c36c:	69ba      	ldr	r2, [r7, #24]
 801c36e:	6839      	ldr	r1, [r7, #0]
 801c370:	68f8      	ldr	r0, [r7, #12]
 801c372:	f000 fcf7 	bl	801cd64 <SPI_EndRxTxTransaction>
 801c376:	4603      	mov	r3, r0
 801c378:	2b00      	cmp	r3, #0
 801c37a:	d002      	beq.n	801c382 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c37c:	68fb      	ldr	r3, [r7, #12]
 801c37e:	2220      	movs	r2, #32
 801c380:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801c382:	68fb      	ldr	r3, [r7, #12]
 801c384:	689b      	ldr	r3, [r3, #8]
 801c386:	2b00      	cmp	r3, #0
 801c388:	d10a      	bne.n	801c3a0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801c38a:	2300      	movs	r3, #0
 801c38c:	613b      	str	r3, [r7, #16]
 801c38e:	68fb      	ldr	r3, [r7, #12]
 801c390:	681b      	ldr	r3, [r3, #0]
 801c392:	68db      	ldr	r3, [r3, #12]
 801c394:	613b      	str	r3, [r7, #16]
 801c396:	68fb      	ldr	r3, [r7, #12]
 801c398:	681b      	ldr	r3, [r3, #0]
 801c39a:	689b      	ldr	r3, [r3, #8]
 801c39c:	613b      	str	r3, [r7, #16]
 801c39e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801c3a0:	68fb      	ldr	r3, [r7, #12]
 801c3a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c3a4:	2b00      	cmp	r3, #0
 801c3a6:	d002      	beq.n	801c3ae <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 801c3a8:	2301      	movs	r3, #1
 801c3aa:	77fb      	strb	r3, [r7, #31]
 801c3ac:	e000      	b.n	801c3b0 <HAL_SPI_Transmit+0x25e>
  }

error:
 801c3ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c3b0:	68fb      	ldr	r3, [r7, #12]
 801c3b2:	2201      	movs	r2, #1
 801c3b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801c3b8:	68fb      	ldr	r3, [r7, #12]
 801c3ba:	2200      	movs	r2, #0
 801c3bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801c3c0:	7ffb      	ldrb	r3, [r7, #31]
}
 801c3c2:	4618      	mov	r0, r3
 801c3c4:	3720      	adds	r7, #32
 801c3c6:	46bd      	mov	sp, r7
 801c3c8:	bd80      	pop	{r7, pc}

0801c3ca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c3ca:	b580      	push	{r7, lr}
 801c3cc:	b088      	sub	sp, #32
 801c3ce:	af02      	add	r7, sp, #8
 801c3d0:	60f8      	str	r0, [r7, #12]
 801c3d2:	60b9      	str	r1, [r7, #8]
 801c3d4:	603b      	str	r3, [r7, #0]
 801c3d6:	4613      	mov	r3, r2
 801c3d8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801c3da:	2300      	movs	r3, #0
 801c3dc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801c3de:	68fb      	ldr	r3, [r7, #12]
 801c3e0:	685b      	ldr	r3, [r3, #4]
 801c3e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c3e6:	d112      	bne.n	801c40e <HAL_SPI_Receive+0x44>
 801c3e8:	68fb      	ldr	r3, [r7, #12]
 801c3ea:	689b      	ldr	r3, [r3, #8]
 801c3ec:	2b00      	cmp	r3, #0
 801c3ee:	d10e      	bne.n	801c40e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801c3f0:	68fb      	ldr	r3, [r7, #12]
 801c3f2:	2204      	movs	r2, #4
 801c3f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801c3f8:	88fa      	ldrh	r2, [r7, #6]
 801c3fa:	683b      	ldr	r3, [r7, #0]
 801c3fc:	9300      	str	r3, [sp, #0]
 801c3fe:	4613      	mov	r3, r2
 801c400:	68ba      	ldr	r2, [r7, #8]
 801c402:	68b9      	ldr	r1, [r7, #8]
 801c404:	68f8      	ldr	r0, [r7, #12]
 801c406:	f000 f8f1 	bl	801c5ec <HAL_SPI_TransmitReceive>
 801c40a:	4603      	mov	r3, r0
 801c40c:	e0ea      	b.n	801c5e4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c40e:	68fb      	ldr	r3, [r7, #12]
 801c410:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801c414:	2b01      	cmp	r3, #1
 801c416:	d101      	bne.n	801c41c <HAL_SPI_Receive+0x52>
 801c418:	2302      	movs	r3, #2
 801c41a:	e0e3      	b.n	801c5e4 <HAL_SPI_Receive+0x21a>
 801c41c:	68fb      	ldr	r3, [r7, #12]
 801c41e:	2201      	movs	r2, #1
 801c420:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c424:	f7fb ffa6 	bl	8018374 <HAL_GetTick>
 801c428:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801c42a:	68fb      	ldr	r3, [r7, #12]
 801c42c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c430:	b2db      	uxtb	r3, r3
 801c432:	2b01      	cmp	r3, #1
 801c434:	d002      	beq.n	801c43c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801c436:	2302      	movs	r3, #2
 801c438:	75fb      	strb	r3, [r7, #23]
    goto error;
 801c43a:	e0ca      	b.n	801c5d2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 801c43c:	68bb      	ldr	r3, [r7, #8]
 801c43e:	2b00      	cmp	r3, #0
 801c440:	d002      	beq.n	801c448 <HAL_SPI_Receive+0x7e>
 801c442:	88fb      	ldrh	r3, [r7, #6]
 801c444:	2b00      	cmp	r3, #0
 801c446:	d102      	bne.n	801c44e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801c448:	2301      	movs	r3, #1
 801c44a:	75fb      	strb	r3, [r7, #23]
    goto error;
 801c44c:	e0c1      	b.n	801c5d2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801c44e:	68fb      	ldr	r3, [r7, #12]
 801c450:	2204      	movs	r2, #4
 801c452:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c456:	68fb      	ldr	r3, [r7, #12]
 801c458:	2200      	movs	r2, #0
 801c45a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801c45c:	68fb      	ldr	r3, [r7, #12]
 801c45e:	68ba      	ldr	r2, [r7, #8]
 801c460:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 801c462:	68fb      	ldr	r3, [r7, #12]
 801c464:	88fa      	ldrh	r2, [r7, #6]
 801c466:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 801c468:	68fb      	ldr	r3, [r7, #12]
 801c46a:	88fa      	ldrh	r2, [r7, #6]
 801c46c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801c46e:	68fb      	ldr	r3, [r7, #12]
 801c470:	2200      	movs	r2, #0
 801c472:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 801c474:	68fb      	ldr	r3, [r7, #12]
 801c476:	2200      	movs	r2, #0
 801c478:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 801c47a:	68fb      	ldr	r3, [r7, #12]
 801c47c:	2200      	movs	r2, #0
 801c47e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 801c480:	68fb      	ldr	r3, [r7, #12]
 801c482:	2200      	movs	r2, #0
 801c484:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801c486:	68fb      	ldr	r3, [r7, #12]
 801c488:	2200      	movs	r2, #0
 801c48a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c48c:	68fb      	ldr	r3, [r7, #12]
 801c48e:	689b      	ldr	r3, [r3, #8]
 801c490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c494:	d10f      	bne.n	801c4b6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801c496:	68fb      	ldr	r3, [r7, #12]
 801c498:	681b      	ldr	r3, [r3, #0]
 801c49a:	681a      	ldr	r2, [r3, #0]
 801c49c:	68fb      	ldr	r3, [r7, #12]
 801c49e:	681b      	ldr	r3, [r3, #0]
 801c4a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c4a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801c4a6:	68fb      	ldr	r3, [r7, #12]
 801c4a8:	681b      	ldr	r3, [r3, #0]
 801c4aa:	681a      	ldr	r2, [r3, #0]
 801c4ac:	68fb      	ldr	r3, [r7, #12]
 801c4ae:	681b      	ldr	r3, [r3, #0]
 801c4b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801c4b4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c4b6:	68fb      	ldr	r3, [r7, #12]
 801c4b8:	681b      	ldr	r3, [r3, #0]
 801c4ba:	681b      	ldr	r3, [r3, #0]
 801c4bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c4c0:	2b40      	cmp	r3, #64	; 0x40
 801c4c2:	d007      	beq.n	801c4d4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c4c4:	68fb      	ldr	r3, [r7, #12]
 801c4c6:	681b      	ldr	r3, [r3, #0]
 801c4c8:	681a      	ldr	r2, [r3, #0]
 801c4ca:	68fb      	ldr	r3, [r7, #12]
 801c4cc:	681b      	ldr	r3, [r3, #0]
 801c4ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c4d2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 801c4d4:	68fb      	ldr	r3, [r7, #12]
 801c4d6:	68db      	ldr	r3, [r3, #12]
 801c4d8:	2b00      	cmp	r3, #0
 801c4da:	d162      	bne.n	801c5a2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801c4dc:	e02e      	b.n	801c53c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801c4de:	68fb      	ldr	r3, [r7, #12]
 801c4e0:	681b      	ldr	r3, [r3, #0]
 801c4e2:	689b      	ldr	r3, [r3, #8]
 801c4e4:	f003 0301 	and.w	r3, r3, #1
 801c4e8:	2b01      	cmp	r3, #1
 801c4ea:	d115      	bne.n	801c518 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801c4ec:	68fb      	ldr	r3, [r7, #12]
 801c4ee:	681b      	ldr	r3, [r3, #0]
 801c4f0:	f103 020c 	add.w	r2, r3, #12
 801c4f4:	68fb      	ldr	r3, [r7, #12]
 801c4f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c4f8:	7812      	ldrb	r2, [r2, #0]
 801c4fa:	b2d2      	uxtb	r2, r2
 801c4fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801c4fe:	68fb      	ldr	r3, [r7, #12]
 801c500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c502:	1c5a      	adds	r2, r3, #1
 801c504:	68fb      	ldr	r3, [r7, #12]
 801c506:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801c508:	68fb      	ldr	r3, [r7, #12]
 801c50a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c50c:	b29b      	uxth	r3, r3
 801c50e:	3b01      	subs	r3, #1
 801c510:	b29a      	uxth	r2, r3
 801c512:	68fb      	ldr	r3, [r7, #12]
 801c514:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c516:	e011      	b.n	801c53c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c518:	f7fb ff2c 	bl	8018374 <HAL_GetTick>
 801c51c:	4602      	mov	r2, r0
 801c51e:	693b      	ldr	r3, [r7, #16]
 801c520:	1ad3      	subs	r3, r2, r3
 801c522:	683a      	ldr	r2, [r7, #0]
 801c524:	429a      	cmp	r2, r3
 801c526:	d803      	bhi.n	801c530 <HAL_SPI_Receive+0x166>
 801c528:	683b      	ldr	r3, [r7, #0]
 801c52a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c52e:	d102      	bne.n	801c536 <HAL_SPI_Receive+0x16c>
 801c530:	683b      	ldr	r3, [r7, #0]
 801c532:	2b00      	cmp	r3, #0
 801c534:	d102      	bne.n	801c53c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 801c536:	2303      	movs	r3, #3
 801c538:	75fb      	strb	r3, [r7, #23]
          goto error;
 801c53a:	e04a      	b.n	801c5d2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 801c53c:	68fb      	ldr	r3, [r7, #12]
 801c53e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c540:	b29b      	uxth	r3, r3
 801c542:	2b00      	cmp	r3, #0
 801c544:	d1cb      	bne.n	801c4de <HAL_SPI_Receive+0x114>
 801c546:	e031      	b.n	801c5ac <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801c548:	68fb      	ldr	r3, [r7, #12]
 801c54a:	681b      	ldr	r3, [r3, #0]
 801c54c:	689b      	ldr	r3, [r3, #8]
 801c54e:	f003 0301 	and.w	r3, r3, #1
 801c552:	2b01      	cmp	r3, #1
 801c554:	d113      	bne.n	801c57e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801c556:	68fb      	ldr	r3, [r7, #12]
 801c558:	681b      	ldr	r3, [r3, #0]
 801c55a:	68da      	ldr	r2, [r3, #12]
 801c55c:	68fb      	ldr	r3, [r7, #12]
 801c55e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c560:	b292      	uxth	r2, r2
 801c562:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801c564:	68fb      	ldr	r3, [r7, #12]
 801c566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c568:	1c9a      	adds	r2, r3, #2
 801c56a:	68fb      	ldr	r3, [r7, #12]
 801c56c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801c56e:	68fb      	ldr	r3, [r7, #12]
 801c570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c572:	b29b      	uxth	r3, r3
 801c574:	3b01      	subs	r3, #1
 801c576:	b29a      	uxth	r2, r3
 801c578:	68fb      	ldr	r3, [r7, #12]
 801c57a:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c57c:	e011      	b.n	801c5a2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c57e:	f7fb fef9 	bl	8018374 <HAL_GetTick>
 801c582:	4602      	mov	r2, r0
 801c584:	693b      	ldr	r3, [r7, #16]
 801c586:	1ad3      	subs	r3, r2, r3
 801c588:	683a      	ldr	r2, [r7, #0]
 801c58a:	429a      	cmp	r2, r3
 801c58c:	d803      	bhi.n	801c596 <HAL_SPI_Receive+0x1cc>
 801c58e:	683b      	ldr	r3, [r7, #0]
 801c590:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c594:	d102      	bne.n	801c59c <HAL_SPI_Receive+0x1d2>
 801c596:	683b      	ldr	r3, [r7, #0]
 801c598:	2b00      	cmp	r3, #0
 801c59a:	d102      	bne.n	801c5a2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 801c59c:	2303      	movs	r3, #3
 801c59e:	75fb      	strb	r3, [r7, #23]
          goto error;
 801c5a0:	e017      	b.n	801c5d2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 801c5a2:	68fb      	ldr	r3, [r7, #12]
 801c5a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c5a6:	b29b      	uxth	r3, r3
 801c5a8:	2b00      	cmp	r3, #0
 801c5aa:	d1cd      	bne.n	801c548 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c5ac:	693a      	ldr	r2, [r7, #16]
 801c5ae:	6839      	ldr	r1, [r7, #0]
 801c5b0:	68f8      	ldr	r0, [r7, #12]
 801c5b2:	f000 fb71 	bl	801cc98 <SPI_EndRxTransaction>
 801c5b6:	4603      	mov	r3, r0
 801c5b8:	2b00      	cmp	r3, #0
 801c5ba:	d002      	beq.n	801c5c2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c5bc:	68fb      	ldr	r3, [r7, #12]
 801c5be:	2220      	movs	r2, #32
 801c5c0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801c5c2:	68fb      	ldr	r3, [r7, #12]
 801c5c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c5c6:	2b00      	cmp	r3, #0
 801c5c8:	d002      	beq.n	801c5d0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 801c5ca:	2301      	movs	r3, #1
 801c5cc:	75fb      	strb	r3, [r7, #23]
 801c5ce:	e000      	b.n	801c5d2 <HAL_SPI_Receive+0x208>
  }

error :
 801c5d0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c5d2:	68fb      	ldr	r3, [r7, #12]
 801c5d4:	2201      	movs	r2, #1
 801c5d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801c5da:	68fb      	ldr	r3, [r7, #12]
 801c5dc:	2200      	movs	r2, #0
 801c5de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801c5e2:	7dfb      	ldrb	r3, [r7, #23]
}
 801c5e4:	4618      	mov	r0, r3
 801c5e6:	3718      	adds	r7, #24
 801c5e8:	46bd      	mov	sp, r7
 801c5ea:	bd80      	pop	{r7, pc}

0801c5ec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801c5ec:	b580      	push	{r7, lr}
 801c5ee:	b08c      	sub	sp, #48	; 0x30
 801c5f0:	af00      	add	r7, sp, #0
 801c5f2:	60f8      	str	r0, [r7, #12]
 801c5f4:	60b9      	str	r1, [r7, #8]
 801c5f6:	607a      	str	r2, [r7, #4]
 801c5f8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801c5fa:	2301      	movs	r3, #1
 801c5fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801c5fe:	2300      	movs	r3, #0
 801c600:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c604:	68fb      	ldr	r3, [r7, #12]
 801c606:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801c60a:	2b01      	cmp	r3, #1
 801c60c:	d101      	bne.n	801c612 <HAL_SPI_TransmitReceive+0x26>
 801c60e:	2302      	movs	r3, #2
 801c610:	e18a      	b.n	801c928 <HAL_SPI_TransmitReceive+0x33c>
 801c612:	68fb      	ldr	r3, [r7, #12]
 801c614:	2201      	movs	r2, #1
 801c616:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c61a:	f7fb feab 	bl	8018374 <HAL_GetTick>
 801c61e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801c620:	68fb      	ldr	r3, [r7, #12]
 801c622:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 801c62a:	68fb      	ldr	r3, [r7, #12]
 801c62c:	685b      	ldr	r3, [r3, #4]
 801c62e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 801c630:	887b      	ldrh	r3, [r7, #2]
 801c632:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801c634:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801c638:	2b01      	cmp	r3, #1
 801c63a:	d00f      	beq.n	801c65c <HAL_SPI_TransmitReceive+0x70>
 801c63c:	69fb      	ldr	r3, [r7, #28]
 801c63e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c642:	d107      	bne.n	801c654 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801c644:	68fb      	ldr	r3, [r7, #12]
 801c646:	689b      	ldr	r3, [r3, #8]
 801c648:	2b00      	cmp	r3, #0
 801c64a:	d103      	bne.n	801c654 <HAL_SPI_TransmitReceive+0x68>
 801c64c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801c650:	2b04      	cmp	r3, #4
 801c652:	d003      	beq.n	801c65c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 801c654:	2302      	movs	r3, #2
 801c656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801c65a:	e15b      	b.n	801c914 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801c65c:	68bb      	ldr	r3, [r7, #8]
 801c65e:	2b00      	cmp	r3, #0
 801c660:	d005      	beq.n	801c66e <HAL_SPI_TransmitReceive+0x82>
 801c662:	687b      	ldr	r3, [r7, #4]
 801c664:	2b00      	cmp	r3, #0
 801c666:	d002      	beq.n	801c66e <HAL_SPI_TransmitReceive+0x82>
 801c668:	887b      	ldrh	r3, [r7, #2]
 801c66a:	2b00      	cmp	r3, #0
 801c66c:	d103      	bne.n	801c676 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 801c66e:	2301      	movs	r3, #1
 801c670:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801c674:	e14e      	b.n	801c914 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801c676:	68fb      	ldr	r3, [r7, #12]
 801c678:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c67c:	b2db      	uxtb	r3, r3
 801c67e:	2b04      	cmp	r3, #4
 801c680:	d003      	beq.n	801c68a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801c682:	68fb      	ldr	r3, [r7, #12]
 801c684:	2205      	movs	r2, #5
 801c686:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c68a:	68fb      	ldr	r3, [r7, #12]
 801c68c:	2200      	movs	r2, #0
 801c68e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801c690:	68fb      	ldr	r3, [r7, #12]
 801c692:	687a      	ldr	r2, [r7, #4]
 801c694:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 801c696:	68fb      	ldr	r3, [r7, #12]
 801c698:	887a      	ldrh	r2, [r7, #2]
 801c69a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 801c69c:	68fb      	ldr	r3, [r7, #12]
 801c69e:	887a      	ldrh	r2, [r7, #2]
 801c6a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801c6a2:	68fb      	ldr	r3, [r7, #12]
 801c6a4:	68ba      	ldr	r2, [r7, #8]
 801c6a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 801c6a8:	68fb      	ldr	r3, [r7, #12]
 801c6aa:	887a      	ldrh	r2, [r7, #2]
 801c6ac:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 801c6ae:	68fb      	ldr	r3, [r7, #12]
 801c6b0:	887a      	ldrh	r2, [r7, #2]
 801c6b2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801c6b4:	68fb      	ldr	r3, [r7, #12]
 801c6b6:	2200      	movs	r2, #0
 801c6b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801c6ba:	68fb      	ldr	r3, [r7, #12]
 801c6bc:	2200      	movs	r2, #0
 801c6be:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c6c0:	68fb      	ldr	r3, [r7, #12]
 801c6c2:	681b      	ldr	r3, [r3, #0]
 801c6c4:	681b      	ldr	r3, [r3, #0]
 801c6c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c6ca:	2b40      	cmp	r3, #64	; 0x40
 801c6cc:	d007      	beq.n	801c6de <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c6ce:	68fb      	ldr	r3, [r7, #12]
 801c6d0:	681b      	ldr	r3, [r3, #0]
 801c6d2:	681a      	ldr	r2, [r3, #0]
 801c6d4:	68fb      	ldr	r3, [r7, #12]
 801c6d6:	681b      	ldr	r3, [r3, #0]
 801c6d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c6dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801c6de:	68fb      	ldr	r3, [r7, #12]
 801c6e0:	68db      	ldr	r3, [r3, #12]
 801c6e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c6e6:	d178      	bne.n	801c7da <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c6e8:	68fb      	ldr	r3, [r7, #12]
 801c6ea:	685b      	ldr	r3, [r3, #4]
 801c6ec:	2b00      	cmp	r3, #0
 801c6ee:	d002      	beq.n	801c6f6 <HAL_SPI_TransmitReceive+0x10a>
 801c6f0:	8b7b      	ldrh	r3, [r7, #26]
 801c6f2:	2b01      	cmp	r3, #1
 801c6f4:	d166      	bne.n	801c7c4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c6f6:	68fb      	ldr	r3, [r7, #12]
 801c6f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c6fa:	881a      	ldrh	r2, [r3, #0]
 801c6fc:	68fb      	ldr	r3, [r7, #12]
 801c6fe:	681b      	ldr	r3, [r3, #0]
 801c700:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801c702:	68fb      	ldr	r3, [r7, #12]
 801c704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c706:	1c9a      	adds	r2, r3, #2
 801c708:	68fb      	ldr	r3, [r7, #12]
 801c70a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801c70c:	68fb      	ldr	r3, [r7, #12]
 801c70e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c710:	b29b      	uxth	r3, r3
 801c712:	3b01      	subs	r3, #1
 801c714:	b29a      	uxth	r2, r3
 801c716:	68fb      	ldr	r3, [r7, #12]
 801c718:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c71a:	e053      	b.n	801c7c4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801c71c:	68fb      	ldr	r3, [r7, #12]
 801c71e:	681b      	ldr	r3, [r3, #0]
 801c720:	689b      	ldr	r3, [r3, #8]
 801c722:	f003 0302 	and.w	r3, r3, #2
 801c726:	2b02      	cmp	r3, #2
 801c728:	d11b      	bne.n	801c762 <HAL_SPI_TransmitReceive+0x176>
 801c72a:	68fb      	ldr	r3, [r7, #12]
 801c72c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c72e:	b29b      	uxth	r3, r3
 801c730:	2b00      	cmp	r3, #0
 801c732:	d016      	beq.n	801c762 <HAL_SPI_TransmitReceive+0x176>
 801c734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c736:	2b01      	cmp	r3, #1
 801c738:	d113      	bne.n	801c762 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c73a:	68fb      	ldr	r3, [r7, #12]
 801c73c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c73e:	881a      	ldrh	r2, [r3, #0]
 801c740:	68fb      	ldr	r3, [r7, #12]
 801c742:	681b      	ldr	r3, [r3, #0]
 801c744:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801c746:	68fb      	ldr	r3, [r7, #12]
 801c748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c74a:	1c9a      	adds	r2, r3, #2
 801c74c:	68fb      	ldr	r3, [r7, #12]
 801c74e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801c750:	68fb      	ldr	r3, [r7, #12]
 801c752:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c754:	b29b      	uxth	r3, r3
 801c756:	3b01      	subs	r3, #1
 801c758:	b29a      	uxth	r2, r3
 801c75a:	68fb      	ldr	r3, [r7, #12]
 801c75c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801c75e:	2300      	movs	r3, #0
 801c760:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801c762:	68fb      	ldr	r3, [r7, #12]
 801c764:	681b      	ldr	r3, [r3, #0]
 801c766:	689b      	ldr	r3, [r3, #8]
 801c768:	f003 0301 	and.w	r3, r3, #1
 801c76c:	2b01      	cmp	r3, #1
 801c76e:	d119      	bne.n	801c7a4 <HAL_SPI_TransmitReceive+0x1b8>
 801c770:	68fb      	ldr	r3, [r7, #12]
 801c772:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c774:	b29b      	uxth	r3, r3
 801c776:	2b00      	cmp	r3, #0
 801c778:	d014      	beq.n	801c7a4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801c77a:	68fb      	ldr	r3, [r7, #12]
 801c77c:	681b      	ldr	r3, [r3, #0]
 801c77e:	68da      	ldr	r2, [r3, #12]
 801c780:	68fb      	ldr	r3, [r7, #12]
 801c782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c784:	b292      	uxth	r2, r2
 801c786:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801c788:	68fb      	ldr	r3, [r7, #12]
 801c78a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c78c:	1c9a      	adds	r2, r3, #2
 801c78e:	68fb      	ldr	r3, [r7, #12]
 801c790:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801c792:	68fb      	ldr	r3, [r7, #12]
 801c794:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c796:	b29b      	uxth	r3, r3
 801c798:	3b01      	subs	r3, #1
 801c79a:	b29a      	uxth	r2, r3
 801c79c:	68fb      	ldr	r3, [r7, #12]
 801c79e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801c7a0:	2301      	movs	r3, #1
 801c7a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801c7a4:	f7fb fde6 	bl	8018374 <HAL_GetTick>
 801c7a8:	4602      	mov	r2, r0
 801c7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7ac:	1ad3      	subs	r3, r2, r3
 801c7ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c7b0:	429a      	cmp	r2, r3
 801c7b2:	d807      	bhi.n	801c7c4 <HAL_SPI_TransmitReceive+0x1d8>
 801c7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c7b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c7ba:	d003      	beq.n	801c7c4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 801c7bc:	2303      	movs	r3, #3
 801c7be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 801c7c2:	e0a7      	b.n	801c914 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c7c4:	68fb      	ldr	r3, [r7, #12]
 801c7c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c7c8:	b29b      	uxth	r3, r3
 801c7ca:	2b00      	cmp	r3, #0
 801c7cc:	d1a6      	bne.n	801c71c <HAL_SPI_TransmitReceive+0x130>
 801c7ce:	68fb      	ldr	r3, [r7, #12]
 801c7d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c7d2:	b29b      	uxth	r3, r3
 801c7d4:	2b00      	cmp	r3, #0
 801c7d6:	d1a1      	bne.n	801c71c <HAL_SPI_TransmitReceive+0x130>
 801c7d8:	e07c      	b.n	801c8d4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c7da:	68fb      	ldr	r3, [r7, #12]
 801c7dc:	685b      	ldr	r3, [r3, #4]
 801c7de:	2b00      	cmp	r3, #0
 801c7e0:	d002      	beq.n	801c7e8 <HAL_SPI_TransmitReceive+0x1fc>
 801c7e2:	8b7b      	ldrh	r3, [r7, #26]
 801c7e4:	2b01      	cmp	r3, #1
 801c7e6:	d16b      	bne.n	801c8c0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801c7e8:	68fb      	ldr	r3, [r7, #12]
 801c7ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c7ec:	68fb      	ldr	r3, [r7, #12]
 801c7ee:	681b      	ldr	r3, [r3, #0]
 801c7f0:	330c      	adds	r3, #12
 801c7f2:	7812      	ldrb	r2, [r2, #0]
 801c7f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801c7f6:	68fb      	ldr	r3, [r7, #12]
 801c7f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c7fa:	1c5a      	adds	r2, r3, #1
 801c7fc:	68fb      	ldr	r3, [r7, #12]
 801c7fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801c800:	68fb      	ldr	r3, [r7, #12]
 801c802:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c804:	b29b      	uxth	r3, r3
 801c806:	3b01      	subs	r3, #1
 801c808:	b29a      	uxth	r2, r3
 801c80a:	68fb      	ldr	r3, [r7, #12]
 801c80c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c80e:	e057      	b.n	801c8c0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801c810:	68fb      	ldr	r3, [r7, #12]
 801c812:	681b      	ldr	r3, [r3, #0]
 801c814:	689b      	ldr	r3, [r3, #8]
 801c816:	f003 0302 	and.w	r3, r3, #2
 801c81a:	2b02      	cmp	r3, #2
 801c81c:	d11c      	bne.n	801c858 <HAL_SPI_TransmitReceive+0x26c>
 801c81e:	68fb      	ldr	r3, [r7, #12]
 801c820:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c822:	b29b      	uxth	r3, r3
 801c824:	2b00      	cmp	r3, #0
 801c826:	d017      	beq.n	801c858 <HAL_SPI_TransmitReceive+0x26c>
 801c828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c82a:	2b01      	cmp	r3, #1
 801c82c:	d114      	bne.n	801c858 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801c82e:	68fb      	ldr	r3, [r7, #12]
 801c830:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c832:	68fb      	ldr	r3, [r7, #12]
 801c834:	681b      	ldr	r3, [r3, #0]
 801c836:	330c      	adds	r3, #12
 801c838:	7812      	ldrb	r2, [r2, #0]
 801c83a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801c83c:	68fb      	ldr	r3, [r7, #12]
 801c83e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c840:	1c5a      	adds	r2, r3, #1
 801c842:	68fb      	ldr	r3, [r7, #12]
 801c844:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801c846:	68fb      	ldr	r3, [r7, #12]
 801c848:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c84a:	b29b      	uxth	r3, r3
 801c84c:	3b01      	subs	r3, #1
 801c84e:	b29a      	uxth	r2, r3
 801c850:	68fb      	ldr	r3, [r7, #12]
 801c852:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801c854:	2300      	movs	r3, #0
 801c856:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801c858:	68fb      	ldr	r3, [r7, #12]
 801c85a:	681b      	ldr	r3, [r3, #0]
 801c85c:	689b      	ldr	r3, [r3, #8]
 801c85e:	f003 0301 	and.w	r3, r3, #1
 801c862:	2b01      	cmp	r3, #1
 801c864:	d119      	bne.n	801c89a <HAL_SPI_TransmitReceive+0x2ae>
 801c866:	68fb      	ldr	r3, [r7, #12]
 801c868:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c86a:	b29b      	uxth	r3, r3
 801c86c:	2b00      	cmp	r3, #0
 801c86e:	d014      	beq.n	801c89a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 801c870:	68fb      	ldr	r3, [r7, #12]
 801c872:	681b      	ldr	r3, [r3, #0]
 801c874:	68da      	ldr	r2, [r3, #12]
 801c876:	68fb      	ldr	r3, [r7, #12]
 801c878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c87a:	b2d2      	uxtb	r2, r2
 801c87c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 801c87e:	68fb      	ldr	r3, [r7, #12]
 801c880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c882:	1c5a      	adds	r2, r3, #1
 801c884:	68fb      	ldr	r3, [r7, #12]
 801c886:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801c888:	68fb      	ldr	r3, [r7, #12]
 801c88a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c88c:	b29b      	uxth	r3, r3
 801c88e:	3b01      	subs	r3, #1
 801c890:	b29a      	uxth	r2, r3
 801c892:	68fb      	ldr	r3, [r7, #12]
 801c894:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801c896:	2301      	movs	r3, #1
 801c898:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801c89a:	f7fb fd6b 	bl	8018374 <HAL_GetTick>
 801c89e:	4602      	mov	r2, r0
 801c8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c8a2:	1ad3      	subs	r3, r2, r3
 801c8a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c8a6:	429a      	cmp	r2, r3
 801c8a8:	d803      	bhi.n	801c8b2 <HAL_SPI_TransmitReceive+0x2c6>
 801c8aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c8ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c8b0:	d102      	bne.n	801c8b8 <HAL_SPI_TransmitReceive+0x2cc>
 801c8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c8b4:	2b00      	cmp	r3, #0
 801c8b6:	d103      	bne.n	801c8c0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 801c8b8:	2303      	movs	r3, #3
 801c8ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 801c8be:	e029      	b.n	801c914 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c8c0:	68fb      	ldr	r3, [r7, #12]
 801c8c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c8c4:	b29b      	uxth	r3, r3
 801c8c6:	2b00      	cmp	r3, #0
 801c8c8:	d1a2      	bne.n	801c810 <HAL_SPI_TransmitReceive+0x224>
 801c8ca:	68fb      	ldr	r3, [r7, #12]
 801c8cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c8ce:	b29b      	uxth	r3, r3
 801c8d0:	2b00      	cmp	r3, #0
 801c8d2:	d19d      	bne.n	801c810 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c8d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c8d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801c8d8:	68f8      	ldr	r0, [r7, #12]
 801c8da:	f000 fa43 	bl	801cd64 <SPI_EndRxTxTransaction>
 801c8de:	4603      	mov	r3, r0
 801c8e0:	2b00      	cmp	r3, #0
 801c8e2:	d006      	beq.n	801c8f2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 801c8e4:	2301      	movs	r3, #1
 801c8e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c8ea:	68fb      	ldr	r3, [r7, #12]
 801c8ec:	2220      	movs	r2, #32
 801c8ee:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 801c8f0:	e010      	b.n	801c914 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801c8f2:	68fb      	ldr	r3, [r7, #12]
 801c8f4:	689b      	ldr	r3, [r3, #8]
 801c8f6:	2b00      	cmp	r3, #0
 801c8f8:	d10b      	bne.n	801c912 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801c8fa:	2300      	movs	r3, #0
 801c8fc:	617b      	str	r3, [r7, #20]
 801c8fe:	68fb      	ldr	r3, [r7, #12]
 801c900:	681b      	ldr	r3, [r3, #0]
 801c902:	68db      	ldr	r3, [r3, #12]
 801c904:	617b      	str	r3, [r7, #20]
 801c906:	68fb      	ldr	r3, [r7, #12]
 801c908:	681b      	ldr	r3, [r3, #0]
 801c90a:	689b      	ldr	r3, [r3, #8]
 801c90c:	617b      	str	r3, [r7, #20]
 801c90e:	697b      	ldr	r3, [r7, #20]
 801c910:	e000      	b.n	801c914 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 801c912:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c914:	68fb      	ldr	r3, [r7, #12]
 801c916:	2201      	movs	r2, #1
 801c918:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801c91c:	68fb      	ldr	r3, [r7, #12]
 801c91e:	2200      	movs	r2, #0
 801c920:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801c924:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 801c928:	4618      	mov	r0, r3
 801c92a:	3730      	adds	r7, #48	; 0x30
 801c92c:	46bd      	mov	sp, r7
 801c92e:	bd80      	pop	{r7, pc}

0801c930 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801c930:	b580      	push	{r7, lr}
 801c932:	b088      	sub	sp, #32
 801c934:	af00      	add	r7, sp, #0
 801c936:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 801c938:	687b      	ldr	r3, [r7, #4]
 801c93a:	681b      	ldr	r3, [r3, #0]
 801c93c:	685b      	ldr	r3, [r3, #4]
 801c93e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 801c940:	687b      	ldr	r3, [r7, #4]
 801c942:	681b      	ldr	r3, [r3, #0]
 801c944:	689b      	ldr	r3, [r3, #8]
 801c946:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 801c948:	69bb      	ldr	r3, [r7, #24]
 801c94a:	099b      	lsrs	r3, r3, #6
 801c94c:	f003 0301 	and.w	r3, r3, #1
 801c950:	2b00      	cmp	r3, #0
 801c952:	d10f      	bne.n	801c974 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801c954:	69bb      	ldr	r3, [r7, #24]
 801c956:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 801c95a:	2b00      	cmp	r3, #0
 801c95c:	d00a      	beq.n	801c974 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801c95e:	69fb      	ldr	r3, [r7, #28]
 801c960:	099b      	lsrs	r3, r3, #6
 801c962:	f003 0301 	and.w	r3, r3, #1
 801c966:	2b00      	cmp	r3, #0
 801c968:	d004      	beq.n	801c974 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 801c96a:	687b      	ldr	r3, [r7, #4]
 801c96c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c96e:	6878      	ldr	r0, [r7, #4]
 801c970:	4798      	blx	r3
    return;
 801c972:	e0d7      	b.n	801cb24 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 801c974:	69bb      	ldr	r3, [r7, #24]
 801c976:	085b      	lsrs	r3, r3, #1
 801c978:	f003 0301 	and.w	r3, r3, #1
 801c97c:	2b00      	cmp	r3, #0
 801c97e:	d00a      	beq.n	801c996 <HAL_SPI_IRQHandler+0x66>
 801c980:	69fb      	ldr	r3, [r7, #28]
 801c982:	09db      	lsrs	r3, r3, #7
 801c984:	f003 0301 	and.w	r3, r3, #1
 801c988:	2b00      	cmp	r3, #0
 801c98a:	d004      	beq.n	801c996 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 801c98c:	687b      	ldr	r3, [r7, #4]
 801c98e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c990:	6878      	ldr	r0, [r7, #4]
 801c992:	4798      	blx	r3
    return;
 801c994:	e0c6      	b.n	801cb24 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801c996:	69bb      	ldr	r3, [r7, #24]
 801c998:	095b      	lsrs	r3, r3, #5
 801c99a:	f003 0301 	and.w	r3, r3, #1
 801c99e:	2b00      	cmp	r3, #0
 801c9a0:	d10c      	bne.n	801c9bc <HAL_SPI_IRQHandler+0x8c>
 801c9a2:	69bb      	ldr	r3, [r7, #24]
 801c9a4:	099b      	lsrs	r3, r3, #6
 801c9a6:	f003 0301 	and.w	r3, r3, #1
 801c9aa:	2b00      	cmp	r3, #0
 801c9ac:	d106      	bne.n	801c9bc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 801c9ae:	69bb      	ldr	r3, [r7, #24]
 801c9b0:	0a1b      	lsrs	r3, r3, #8
 801c9b2:	f003 0301 	and.w	r3, r3, #1
 801c9b6:	2b00      	cmp	r3, #0
 801c9b8:	f000 80b4 	beq.w	801cb24 <HAL_SPI_IRQHandler+0x1f4>
 801c9bc:	69fb      	ldr	r3, [r7, #28]
 801c9be:	095b      	lsrs	r3, r3, #5
 801c9c0:	f003 0301 	and.w	r3, r3, #1
 801c9c4:	2b00      	cmp	r3, #0
 801c9c6:	f000 80ad 	beq.w	801cb24 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801c9ca:	69bb      	ldr	r3, [r7, #24]
 801c9cc:	099b      	lsrs	r3, r3, #6
 801c9ce:	f003 0301 	and.w	r3, r3, #1
 801c9d2:	2b00      	cmp	r3, #0
 801c9d4:	d023      	beq.n	801ca1e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801c9d6:	687b      	ldr	r3, [r7, #4]
 801c9d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c9dc:	b2db      	uxtb	r3, r3
 801c9de:	2b03      	cmp	r3, #3
 801c9e0:	d011      	beq.n	801ca06 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801c9e2:	687b      	ldr	r3, [r7, #4]
 801c9e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c9e6:	f043 0204 	orr.w	r2, r3, #4
 801c9ea:	687b      	ldr	r3, [r7, #4]
 801c9ec:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801c9ee:	2300      	movs	r3, #0
 801c9f0:	617b      	str	r3, [r7, #20]
 801c9f2:	687b      	ldr	r3, [r7, #4]
 801c9f4:	681b      	ldr	r3, [r3, #0]
 801c9f6:	68db      	ldr	r3, [r3, #12]
 801c9f8:	617b      	str	r3, [r7, #20]
 801c9fa:	687b      	ldr	r3, [r7, #4]
 801c9fc:	681b      	ldr	r3, [r3, #0]
 801c9fe:	689b      	ldr	r3, [r3, #8]
 801ca00:	617b      	str	r3, [r7, #20]
 801ca02:	697b      	ldr	r3, [r7, #20]
 801ca04:	e00b      	b.n	801ca1e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801ca06:	2300      	movs	r3, #0
 801ca08:	613b      	str	r3, [r7, #16]
 801ca0a:	687b      	ldr	r3, [r7, #4]
 801ca0c:	681b      	ldr	r3, [r3, #0]
 801ca0e:	68db      	ldr	r3, [r3, #12]
 801ca10:	613b      	str	r3, [r7, #16]
 801ca12:	687b      	ldr	r3, [r7, #4]
 801ca14:	681b      	ldr	r3, [r3, #0]
 801ca16:	689b      	ldr	r3, [r3, #8]
 801ca18:	613b      	str	r3, [r7, #16]
 801ca1a:	693b      	ldr	r3, [r7, #16]
        return;
 801ca1c:	e082      	b.n	801cb24 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 801ca1e:	69bb      	ldr	r3, [r7, #24]
 801ca20:	095b      	lsrs	r3, r3, #5
 801ca22:	f003 0301 	and.w	r3, r3, #1
 801ca26:	2b00      	cmp	r3, #0
 801ca28:	d014      	beq.n	801ca54 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801ca2a:	687b      	ldr	r3, [r7, #4]
 801ca2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ca2e:	f043 0201 	orr.w	r2, r3, #1
 801ca32:	687b      	ldr	r3, [r7, #4]
 801ca34:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801ca36:	2300      	movs	r3, #0
 801ca38:	60fb      	str	r3, [r7, #12]
 801ca3a:	687b      	ldr	r3, [r7, #4]
 801ca3c:	681b      	ldr	r3, [r3, #0]
 801ca3e:	689b      	ldr	r3, [r3, #8]
 801ca40:	60fb      	str	r3, [r7, #12]
 801ca42:	687b      	ldr	r3, [r7, #4]
 801ca44:	681b      	ldr	r3, [r3, #0]
 801ca46:	681a      	ldr	r2, [r3, #0]
 801ca48:	687b      	ldr	r3, [r7, #4]
 801ca4a:	681b      	ldr	r3, [r3, #0]
 801ca4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801ca50:	601a      	str	r2, [r3, #0]
 801ca52:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 801ca54:	69bb      	ldr	r3, [r7, #24]
 801ca56:	0a1b      	lsrs	r3, r3, #8
 801ca58:	f003 0301 	and.w	r3, r3, #1
 801ca5c:	2b00      	cmp	r3, #0
 801ca5e:	d00c      	beq.n	801ca7a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801ca60:	687b      	ldr	r3, [r7, #4]
 801ca62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ca64:	f043 0208 	orr.w	r2, r3, #8
 801ca68:	687b      	ldr	r3, [r7, #4]
 801ca6a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 801ca6c:	2300      	movs	r3, #0
 801ca6e:	60bb      	str	r3, [r7, #8]
 801ca70:	687b      	ldr	r3, [r7, #4]
 801ca72:	681b      	ldr	r3, [r3, #0]
 801ca74:	689b      	ldr	r3, [r3, #8]
 801ca76:	60bb      	str	r3, [r7, #8]
 801ca78:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801ca7a:	687b      	ldr	r3, [r7, #4]
 801ca7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ca7e:	2b00      	cmp	r3, #0
 801ca80:	d04f      	beq.n	801cb22 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 801ca82:	687b      	ldr	r3, [r7, #4]
 801ca84:	681b      	ldr	r3, [r3, #0]
 801ca86:	685a      	ldr	r2, [r3, #4]
 801ca88:	687b      	ldr	r3, [r7, #4]
 801ca8a:	681b      	ldr	r3, [r3, #0]
 801ca8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801ca90:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 801ca92:	687b      	ldr	r3, [r7, #4]
 801ca94:	2201      	movs	r2, #1
 801ca96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 801ca9a:	69fb      	ldr	r3, [r7, #28]
 801ca9c:	f003 0302 	and.w	r3, r3, #2
 801caa0:	2b00      	cmp	r3, #0
 801caa2:	d104      	bne.n	801caae <HAL_SPI_IRQHandler+0x17e>
 801caa4:	69fb      	ldr	r3, [r7, #28]
 801caa6:	f003 0301 	and.w	r3, r3, #1
 801caaa:	2b00      	cmp	r3, #0
 801caac:	d034      	beq.n	801cb18 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 801caae:	687b      	ldr	r3, [r7, #4]
 801cab0:	681b      	ldr	r3, [r3, #0]
 801cab2:	685a      	ldr	r2, [r3, #4]
 801cab4:	687b      	ldr	r3, [r7, #4]
 801cab6:	681b      	ldr	r3, [r3, #0]
 801cab8:	f022 0203 	bic.w	r2, r2, #3
 801cabc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801cabe:	687b      	ldr	r3, [r7, #4]
 801cac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cac2:	2b00      	cmp	r3, #0
 801cac4:	d011      	beq.n	801caea <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801cac6:	687b      	ldr	r3, [r7, #4]
 801cac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801caca:	4a18      	ldr	r2, [pc, #96]	; (801cb2c <HAL_SPI_IRQHandler+0x1fc>)
 801cacc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801cace:	687b      	ldr	r3, [r7, #4]
 801cad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cad2:	4618      	mov	r0, r3
 801cad4:	f7fc f946 	bl	8018d64 <HAL_DMA_Abort_IT>
 801cad8:	4603      	mov	r3, r0
 801cada:	2b00      	cmp	r3, #0
 801cadc:	d005      	beq.n	801caea <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801cade:	687b      	ldr	r3, [r7, #4]
 801cae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cae2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801cae6:	687b      	ldr	r3, [r7, #4]
 801cae8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801caea:	687b      	ldr	r3, [r7, #4]
 801caec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801caee:	2b00      	cmp	r3, #0
 801caf0:	d016      	beq.n	801cb20 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801caf2:	687b      	ldr	r3, [r7, #4]
 801caf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801caf6:	4a0d      	ldr	r2, [pc, #52]	; (801cb2c <HAL_SPI_IRQHandler+0x1fc>)
 801caf8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801cafa:	687b      	ldr	r3, [r7, #4]
 801cafc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cafe:	4618      	mov	r0, r3
 801cb00:	f7fc f930 	bl	8018d64 <HAL_DMA_Abort_IT>
 801cb04:	4603      	mov	r3, r0
 801cb06:	2b00      	cmp	r3, #0
 801cb08:	d00a      	beq.n	801cb20 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801cb0a:	687b      	ldr	r3, [r7, #4]
 801cb0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cb0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801cb12:	687b      	ldr	r3, [r7, #4]
 801cb14:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 801cb16:	e003      	b.n	801cb20 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 801cb18:	6878      	ldr	r0, [r7, #4]
 801cb1a:	f000 f809 	bl	801cb30 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801cb1e:	e000      	b.n	801cb22 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 801cb20:	bf00      	nop
    return;
 801cb22:	bf00      	nop
  }
}
 801cb24:	3720      	adds	r7, #32
 801cb26:	46bd      	mov	sp, r7
 801cb28:	bd80      	pop	{r7, pc}
 801cb2a:	bf00      	nop
 801cb2c:	0801cb61 	.word	0x0801cb61

0801cb30 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 801cb30:	b480      	push	{r7}
 801cb32:	b083      	sub	sp, #12
 801cb34:	af00      	add	r7, sp, #0
 801cb36:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 801cb38:	bf00      	nop
 801cb3a:	370c      	adds	r7, #12
 801cb3c:	46bd      	mov	sp, r7
 801cb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb42:	4770      	bx	lr

0801cb44 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 801cb44:	b480      	push	{r7}
 801cb46:	b083      	sub	sp, #12
 801cb48:	af00      	add	r7, sp, #0
 801cb4a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 801cb4c:	687b      	ldr	r3, [r7, #4]
 801cb4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801cb52:	b2db      	uxtb	r3, r3
}
 801cb54:	4618      	mov	r0, r3
 801cb56:	370c      	adds	r7, #12
 801cb58:	46bd      	mov	sp, r7
 801cb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb5e:	4770      	bx	lr

0801cb60 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801cb60:	b580      	push	{r7, lr}
 801cb62:	b084      	sub	sp, #16
 801cb64:	af00      	add	r7, sp, #0
 801cb66:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801cb68:	687b      	ldr	r3, [r7, #4]
 801cb6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cb6c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 801cb6e:	68fb      	ldr	r3, [r7, #12]
 801cb70:	2200      	movs	r2, #0
 801cb72:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 801cb74:	68fb      	ldr	r3, [r7, #12]
 801cb76:	2200      	movs	r2, #0
 801cb78:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801cb7a:	68f8      	ldr	r0, [r7, #12]
 801cb7c:	f7ff ffd8 	bl	801cb30 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801cb80:	bf00      	nop
 801cb82:	3710      	adds	r7, #16
 801cb84:	46bd      	mov	sp, r7
 801cb86:	bd80      	pop	{r7, pc}

0801cb88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801cb88:	b580      	push	{r7, lr}
 801cb8a:	b088      	sub	sp, #32
 801cb8c:	af00      	add	r7, sp, #0
 801cb8e:	60f8      	str	r0, [r7, #12]
 801cb90:	60b9      	str	r1, [r7, #8]
 801cb92:	603b      	str	r3, [r7, #0]
 801cb94:	4613      	mov	r3, r2
 801cb96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801cb98:	f7fb fbec 	bl	8018374 <HAL_GetTick>
 801cb9c:	4602      	mov	r2, r0
 801cb9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cba0:	1a9b      	subs	r3, r3, r2
 801cba2:	683a      	ldr	r2, [r7, #0]
 801cba4:	4413      	add	r3, r2
 801cba6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801cba8:	f7fb fbe4 	bl	8018374 <HAL_GetTick>
 801cbac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801cbae:	4b39      	ldr	r3, [pc, #228]	; (801cc94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801cbb0:	681b      	ldr	r3, [r3, #0]
 801cbb2:	015b      	lsls	r3, r3, #5
 801cbb4:	0d1b      	lsrs	r3, r3, #20
 801cbb6:	69fa      	ldr	r2, [r7, #28]
 801cbb8:	fb02 f303 	mul.w	r3, r2, r3
 801cbbc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801cbbe:	e054      	b.n	801cc6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801cbc0:	683b      	ldr	r3, [r7, #0]
 801cbc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cbc6:	d050      	beq.n	801cc6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801cbc8:	f7fb fbd4 	bl	8018374 <HAL_GetTick>
 801cbcc:	4602      	mov	r2, r0
 801cbce:	69bb      	ldr	r3, [r7, #24]
 801cbd0:	1ad3      	subs	r3, r2, r3
 801cbd2:	69fa      	ldr	r2, [r7, #28]
 801cbd4:	429a      	cmp	r2, r3
 801cbd6:	d902      	bls.n	801cbde <SPI_WaitFlagStateUntilTimeout+0x56>
 801cbd8:	69fb      	ldr	r3, [r7, #28]
 801cbda:	2b00      	cmp	r3, #0
 801cbdc:	d13d      	bne.n	801cc5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801cbde:	68fb      	ldr	r3, [r7, #12]
 801cbe0:	681b      	ldr	r3, [r3, #0]
 801cbe2:	685a      	ldr	r2, [r3, #4]
 801cbe4:	68fb      	ldr	r3, [r7, #12]
 801cbe6:	681b      	ldr	r3, [r3, #0]
 801cbe8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801cbec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801cbee:	68fb      	ldr	r3, [r7, #12]
 801cbf0:	685b      	ldr	r3, [r3, #4]
 801cbf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801cbf6:	d111      	bne.n	801cc1c <SPI_WaitFlagStateUntilTimeout+0x94>
 801cbf8:	68fb      	ldr	r3, [r7, #12]
 801cbfa:	689b      	ldr	r3, [r3, #8]
 801cbfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801cc00:	d004      	beq.n	801cc0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801cc02:	68fb      	ldr	r3, [r7, #12]
 801cc04:	689b      	ldr	r3, [r3, #8]
 801cc06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cc0a:	d107      	bne.n	801cc1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801cc0c:	68fb      	ldr	r3, [r7, #12]
 801cc0e:	681b      	ldr	r3, [r3, #0]
 801cc10:	681a      	ldr	r2, [r3, #0]
 801cc12:	68fb      	ldr	r3, [r7, #12]
 801cc14:	681b      	ldr	r3, [r3, #0]
 801cc16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801cc1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801cc1c:	68fb      	ldr	r3, [r7, #12]
 801cc1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cc20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801cc24:	d10f      	bne.n	801cc46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801cc26:	68fb      	ldr	r3, [r7, #12]
 801cc28:	681b      	ldr	r3, [r3, #0]
 801cc2a:	681a      	ldr	r2, [r3, #0]
 801cc2c:	68fb      	ldr	r3, [r7, #12]
 801cc2e:	681b      	ldr	r3, [r3, #0]
 801cc30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801cc34:	601a      	str	r2, [r3, #0]
 801cc36:	68fb      	ldr	r3, [r7, #12]
 801cc38:	681b      	ldr	r3, [r3, #0]
 801cc3a:	681a      	ldr	r2, [r3, #0]
 801cc3c:	68fb      	ldr	r3, [r7, #12]
 801cc3e:	681b      	ldr	r3, [r3, #0]
 801cc40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801cc44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801cc46:	68fb      	ldr	r3, [r7, #12]
 801cc48:	2201      	movs	r2, #1
 801cc4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801cc4e:	68fb      	ldr	r3, [r7, #12]
 801cc50:	2200      	movs	r2, #0
 801cc52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 801cc56:	2303      	movs	r3, #3
 801cc58:	e017      	b.n	801cc8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 801cc5a:	697b      	ldr	r3, [r7, #20]
 801cc5c:	2b00      	cmp	r3, #0
 801cc5e:	d101      	bne.n	801cc64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801cc60:	2300      	movs	r3, #0
 801cc62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801cc64:	697b      	ldr	r3, [r7, #20]
 801cc66:	3b01      	subs	r3, #1
 801cc68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801cc6a:	68fb      	ldr	r3, [r7, #12]
 801cc6c:	681b      	ldr	r3, [r3, #0]
 801cc6e:	689a      	ldr	r2, [r3, #8]
 801cc70:	68bb      	ldr	r3, [r7, #8]
 801cc72:	4013      	ands	r3, r2
 801cc74:	68ba      	ldr	r2, [r7, #8]
 801cc76:	429a      	cmp	r2, r3
 801cc78:	bf0c      	ite	eq
 801cc7a:	2301      	moveq	r3, #1
 801cc7c:	2300      	movne	r3, #0
 801cc7e:	b2db      	uxtb	r3, r3
 801cc80:	461a      	mov	r2, r3
 801cc82:	79fb      	ldrb	r3, [r7, #7]
 801cc84:	429a      	cmp	r2, r3
 801cc86:	d19b      	bne.n	801cbc0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801cc88:	2300      	movs	r3, #0
}
 801cc8a:	4618      	mov	r0, r3
 801cc8c:	3720      	adds	r7, #32
 801cc8e:	46bd      	mov	sp, r7
 801cc90:	bd80      	pop	{r7, pc}
 801cc92:	bf00      	nop
 801cc94:	20000588 	.word	0x20000588

0801cc98 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801cc98:	b580      	push	{r7, lr}
 801cc9a:	b086      	sub	sp, #24
 801cc9c:	af02      	add	r7, sp, #8
 801cc9e:	60f8      	str	r0, [r7, #12]
 801cca0:	60b9      	str	r1, [r7, #8]
 801cca2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801cca4:	68fb      	ldr	r3, [r7, #12]
 801cca6:	685b      	ldr	r3, [r3, #4]
 801cca8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801ccac:	d111      	bne.n	801ccd2 <SPI_EndRxTransaction+0x3a>
 801ccae:	68fb      	ldr	r3, [r7, #12]
 801ccb0:	689b      	ldr	r3, [r3, #8]
 801ccb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801ccb6:	d004      	beq.n	801ccc2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801ccb8:	68fb      	ldr	r3, [r7, #12]
 801ccba:	689b      	ldr	r3, [r3, #8]
 801ccbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ccc0:	d107      	bne.n	801ccd2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801ccc2:	68fb      	ldr	r3, [r7, #12]
 801ccc4:	681b      	ldr	r3, [r3, #0]
 801ccc6:	681a      	ldr	r2, [r3, #0]
 801ccc8:	68fb      	ldr	r3, [r7, #12]
 801ccca:	681b      	ldr	r3, [r3, #0]
 801cccc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801ccd0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801ccd2:	68fb      	ldr	r3, [r7, #12]
 801ccd4:	685b      	ldr	r3, [r3, #4]
 801ccd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801ccda:	d12a      	bne.n	801cd32 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 801ccdc:	68fb      	ldr	r3, [r7, #12]
 801ccde:	689b      	ldr	r3, [r3, #8]
 801cce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cce4:	d012      	beq.n	801cd0c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801cce6:	687b      	ldr	r3, [r7, #4]
 801cce8:	9300      	str	r3, [sp, #0]
 801ccea:	68bb      	ldr	r3, [r7, #8]
 801ccec:	2200      	movs	r2, #0
 801ccee:	2180      	movs	r1, #128	; 0x80
 801ccf0:	68f8      	ldr	r0, [r7, #12]
 801ccf2:	f7ff ff49 	bl	801cb88 <SPI_WaitFlagStateUntilTimeout>
 801ccf6:	4603      	mov	r3, r0
 801ccf8:	2b00      	cmp	r3, #0
 801ccfa:	d02d      	beq.n	801cd58 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801ccfc:	68fb      	ldr	r3, [r7, #12]
 801ccfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cd00:	f043 0220 	orr.w	r2, r3, #32
 801cd04:	68fb      	ldr	r3, [r7, #12]
 801cd06:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801cd08:	2303      	movs	r3, #3
 801cd0a:	e026      	b.n	801cd5a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801cd0c:	687b      	ldr	r3, [r7, #4]
 801cd0e:	9300      	str	r3, [sp, #0]
 801cd10:	68bb      	ldr	r3, [r7, #8]
 801cd12:	2200      	movs	r2, #0
 801cd14:	2101      	movs	r1, #1
 801cd16:	68f8      	ldr	r0, [r7, #12]
 801cd18:	f7ff ff36 	bl	801cb88 <SPI_WaitFlagStateUntilTimeout>
 801cd1c:	4603      	mov	r3, r0
 801cd1e:	2b00      	cmp	r3, #0
 801cd20:	d01a      	beq.n	801cd58 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801cd22:	68fb      	ldr	r3, [r7, #12]
 801cd24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cd26:	f043 0220 	orr.w	r2, r3, #32
 801cd2a:	68fb      	ldr	r3, [r7, #12]
 801cd2c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801cd2e:	2303      	movs	r3, #3
 801cd30:	e013      	b.n	801cd5a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801cd32:	687b      	ldr	r3, [r7, #4]
 801cd34:	9300      	str	r3, [sp, #0]
 801cd36:	68bb      	ldr	r3, [r7, #8]
 801cd38:	2200      	movs	r2, #0
 801cd3a:	2101      	movs	r1, #1
 801cd3c:	68f8      	ldr	r0, [r7, #12]
 801cd3e:	f7ff ff23 	bl	801cb88 <SPI_WaitFlagStateUntilTimeout>
 801cd42:	4603      	mov	r3, r0
 801cd44:	2b00      	cmp	r3, #0
 801cd46:	d007      	beq.n	801cd58 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801cd48:	68fb      	ldr	r3, [r7, #12]
 801cd4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cd4c:	f043 0220 	orr.w	r2, r3, #32
 801cd50:	68fb      	ldr	r3, [r7, #12]
 801cd52:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801cd54:	2303      	movs	r3, #3
 801cd56:	e000      	b.n	801cd5a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 801cd58:	2300      	movs	r3, #0
}
 801cd5a:	4618      	mov	r0, r3
 801cd5c:	3710      	adds	r7, #16
 801cd5e:	46bd      	mov	sp, r7
 801cd60:	bd80      	pop	{r7, pc}
	...

0801cd64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801cd64:	b580      	push	{r7, lr}
 801cd66:	b088      	sub	sp, #32
 801cd68:	af02      	add	r7, sp, #8
 801cd6a:	60f8      	str	r0, [r7, #12]
 801cd6c:	60b9      	str	r1, [r7, #8]
 801cd6e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801cd70:	4b1b      	ldr	r3, [pc, #108]	; (801cde0 <SPI_EndRxTxTransaction+0x7c>)
 801cd72:	681b      	ldr	r3, [r3, #0]
 801cd74:	4a1b      	ldr	r2, [pc, #108]	; (801cde4 <SPI_EndRxTxTransaction+0x80>)
 801cd76:	fba2 2303 	umull	r2, r3, r2, r3
 801cd7a:	0d5b      	lsrs	r3, r3, #21
 801cd7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801cd80:	fb02 f303 	mul.w	r3, r2, r3
 801cd84:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801cd86:	68fb      	ldr	r3, [r7, #12]
 801cd88:	685b      	ldr	r3, [r3, #4]
 801cd8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801cd8e:	d112      	bne.n	801cdb6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801cd90:	687b      	ldr	r3, [r7, #4]
 801cd92:	9300      	str	r3, [sp, #0]
 801cd94:	68bb      	ldr	r3, [r7, #8]
 801cd96:	2200      	movs	r2, #0
 801cd98:	2180      	movs	r1, #128	; 0x80
 801cd9a:	68f8      	ldr	r0, [r7, #12]
 801cd9c:	f7ff fef4 	bl	801cb88 <SPI_WaitFlagStateUntilTimeout>
 801cda0:	4603      	mov	r3, r0
 801cda2:	2b00      	cmp	r3, #0
 801cda4:	d016      	beq.n	801cdd4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801cda6:	68fb      	ldr	r3, [r7, #12]
 801cda8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cdaa:	f043 0220 	orr.w	r2, r3, #32
 801cdae:	68fb      	ldr	r3, [r7, #12]
 801cdb0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801cdb2:	2303      	movs	r3, #3
 801cdb4:	e00f      	b.n	801cdd6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801cdb6:	697b      	ldr	r3, [r7, #20]
 801cdb8:	2b00      	cmp	r3, #0
 801cdba:	d00a      	beq.n	801cdd2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 801cdbc:	697b      	ldr	r3, [r7, #20]
 801cdbe:	3b01      	subs	r3, #1
 801cdc0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801cdc2:	68fb      	ldr	r3, [r7, #12]
 801cdc4:	681b      	ldr	r3, [r3, #0]
 801cdc6:	689b      	ldr	r3, [r3, #8]
 801cdc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801cdcc:	2b80      	cmp	r3, #128	; 0x80
 801cdce:	d0f2      	beq.n	801cdb6 <SPI_EndRxTxTransaction+0x52>
 801cdd0:	e000      	b.n	801cdd4 <SPI_EndRxTxTransaction+0x70>
        break;
 801cdd2:	bf00      	nop
  }

  return HAL_OK;
 801cdd4:	2300      	movs	r3, #0
}
 801cdd6:	4618      	mov	r0, r3
 801cdd8:	3718      	adds	r7, #24
 801cdda:	46bd      	mov	sp, r7
 801cddc:	bd80      	pop	{r7, pc}
 801cdde:	bf00      	nop
 801cde0:	20000588 	.word	0x20000588
 801cde4:	165e9f81 	.word	0x165e9f81

0801cde8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801cde8:	b580      	push	{r7, lr}
 801cdea:	b082      	sub	sp, #8
 801cdec:	af00      	add	r7, sp, #0
 801cdee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801cdf0:	687b      	ldr	r3, [r7, #4]
 801cdf2:	2b00      	cmp	r3, #0
 801cdf4:	d101      	bne.n	801cdfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801cdf6:	2301      	movs	r3, #1
 801cdf8:	e041      	b.n	801ce7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801cdfa:	687b      	ldr	r3, [r7, #4]
 801cdfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ce00:	b2db      	uxtb	r3, r3
 801ce02:	2b00      	cmp	r3, #0
 801ce04:	d106      	bne.n	801ce14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801ce06:	687b      	ldr	r3, [r7, #4]
 801ce08:	2200      	movs	r2, #0
 801ce0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801ce0e:	6878      	ldr	r0, [r7, #4]
 801ce10:	f7fb f8ca 	bl	8017fa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ce14:	687b      	ldr	r3, [r7, #4]
 801ce16:	2202      	movs	r2, #2
 801ce18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801ce1c:	687b      	ldr	r3, [r7, #4]
 801ce1e:	681a      	ldr	r2, [r3, #0]
 801ce20:	687b      	ldr	r3, [r7, #4]
 801ce22:	3304      	adds	r3, #4
 801ce24:	4619      	mov	r1, r3
 801ce26:	4610      	mov	r0, r2
 801ce28:	f000 faf2 	bl	801d410 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801ce2c:	687b      	ldr	r3, [r7, #4]
 801ce2e:	2201      	movs	r2, #1
 801ce30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ce34:	687b      	ldr	r3, [r7, #4]
 801ce36:	2201      	movs	r2, #1
 801ce38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801ce3c:	687b      	ldr	r3, [r7, #4]
 801ce3e:	2201      	movs	r2, #1
 801ce40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801ce44:	687b      	ldr	r3, [r7, #4]
 801ce46:	2201      	movs	r2, #1
 801ce48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801ce4c:	687b      	ldr	r3, [r7, #4]
 801ce4e:	2201      	movs	r2, #1
 801ce50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ce54:	687b      	ldr	r3, [r7, #4]
 801ce56:	2201      	movs	r2, #1
 801ce58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801ce5c:	687b      	ldr	r3, [r7, #4]
 801ce5e:	2201      	movs	r2, #1
 801ce60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801ce64:	687b      	ldr	r3, [r7, #4]
 801ce66:	2201      	movs	r2, #1
 801ce68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ce6c:	687b      	ldr	r3, [r7, #4]
 801ce6e:	2201      	movs	r2, #1
 801ce70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801ce74:	687b      	ldr	r3, [r7, #4]
 801ce76:	2201      	movs	r2, #1
 801ce78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801ce7c:	2300      	movs	r3, #0
}
 801ce7e:	4618      	mov	r0, r3
 801ce80:	3708      	adds	r7, #8
 801ce82:	46bd      	mov	sp, r7
 801ce84:	bd80      	pop	{r7, pc}
	...

0801ce88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801ce88:	b480      	push	{r7}
 801ce8a:	b085      	sub	sp, #20
 801ce8c:	af00      	add	r7, sp, #0
 801ce8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801ce90:	687b      	ldr	r3, [r7, #4]
 801ce92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ce96:	b2db      	uxtb	r3, r3
 801ce98:	2b01      	cmp	r3, #1
 801ce9a:	d001      	beq.n	801cea0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801ce9c:	2301      	movs	r3, #1
 801ce9e:	e04e      	b.n	801cf3e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cea0:	687b      	ldr	r3, [r7, #4]
 801cea2:	2202      	movs	r2, #2
 801cea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801cea8:	687b      	ldr	r3, [r7, #4]
 801ceaa:	681b      	ldr	r3, [r3, #0]
 801ceac:	68da      	ldr	r2, [r3, #12]
 801ceae:	687b      	ldr	r3, [r7, #4]
 801ceb0:	681b      	ldr	r3, [r3, #0]
 801ceb2:	f042 0201 	orr.w	r2, r2, #1
 801ceb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801ceb8:	687b      	ldr	r3, [r7, #4]
 801ceba:	681b      	ldr	r3, [r3, #0]
 801cebc:	4a23      	ldr	r2, [pc, #140]	; (801cf4c <HAL_TIM_Base_Start_IT+0xc4>)
 801cebe:	4293      	cmp	r3, r2
 801cec0:	d022      	beq.n	801cf08 <HAL_TIM_Base_Start_IT+0x80>
 801cec2:	687b      	ldr	r3, [r7, #4]
 801cec4:	681b      	ldr	r3, [r3, #0]
 801cec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ceca:	d01d      	beq.n	801cf08 <HAL_TIM_Base_Start_IT+0x80>
 801cecc:	687b      	ldr	r3, [r7, #4]
 801cece:	681b      	ldr	r3, [r3, #0]
 801ced0:	4a1f      	ldr	r2, [pc, #124]	; (801cf50 <HAL_TIM_Base_Start_IT+0xc8>)
 801ced2:	4293      	cmp	r3, r2
 801ced4:	d018      	beq.n	801cf08 <HAL_TIM_Base_Start_IT+0x80>
 801ced6:	687b      	ldr	r3, [r7, #4]
 801ced8:	681b      	ldr	r3, [r3, #0]
 801ceda:	4a1e      	ldr	r2, [pc, #120]	; (801cf54 <HAL_TIM_Base_Start_IT+0xcc>)
 801cedc:	4293      	cmp	r3, r2
 801cede:	d013      	beq.n	801cf08 <HAL_TIM_Base_Start_IT+0x80>
 801cee0:	687b      	ldr	r3, [r7, #4]
 801cee2:	681b      	ldr	r3, [r3, #0]
 801cee4:	4a1c      	ldr	r2, [pc, #112]	; (801cf58 <HAL_TIM_Base_Start_IT+0xd0>)
 801cee6:	4293      	cmp	r3, r2
 801cee8:	d00e      	beq.n	801cf08 <HAL_TIM_Base_Start_IT+0x80>
 801ceea:	687b      	ldr	r3, [r7, #4]
 801ceec:	681b      	ldr	r3, [r3, #0]
 801ceee:	4a1b      	ldr	r2, [pc, #108]	; (801cf5c <HAL_TIM_Base_Start_IT+0xd4>)
 801cef0:	4293      	cmp	r3, r2
 801cef2:	d009      	beq.n	801cf08 <HAL_TIM_Base_Start_IT+0x80>
 801cef4:	687b      	ldr	r3, [r7, #4]
 801cef6:	681b      	ldr	r3, [r3, #0]
 801cef8:	4a19      	ldr	r2, [pc, #100]	; (801cf60 <HAL_TIM_Base_Start_IT+0xd8>)
 801cefa:	4293      	cmp	r3, r2
 801cefc:	d004      	beq.n	801cf08 <HAL_TIM_Base_Start_IT+0x80>
 801cefe:	687b      	ldr	r3, [r7, #4]
 801cf00:	681b      	ldr	r3, [r3, #0]
 801cf02:	4a18      	ldr	r2, [pc, #96]	; (801cf64 <HAL_TIM_Base_Start_IT+0xdc>)
 801cf04:	4293      	cmp	r3, r2
 801cf06:	d111      	bne.n	801cf2c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801cf08:	687b      	ldr	r3, [r7, #4]
 801cf0a:	681b      	ldr	r3, [r3, #0]
 801cf0c:	689b      	ldr	r3, [r3, #8]
 801cf0e:	f003 0307 	and.w	r3, r3, #7
 801cf12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cf14:	68fb      	ldr	r3, [r7, #12]
 801cf16:	2b06      	cmp	r3, #6
 801cf18:	d010      	beq.n	801cf3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 801cf1a:	687b      	ldr	r3, [r7, #4]
 801cf1c:	681b      	ldr	r3, [r3, #0]
 801cf1e:	681a      	ldr	r2, [r3, #0]
 801cf20:	687b      	ldr	r3, [r7, #4]
 801cf22:	681b      	ldr	r3, [r3, #0]
 801cf24:	f042 0201 	orr.w	r2, r2, #1
 801cf28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cf2a:	e007      	b.n	801cf3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801cf2c:	687b      	ldr	r3, [r7, #4]
 801cf2e:	681b      	ldr	r3, [r3, #0]
 801cf30:	681a      	ldr	r2, [r3, #0]
 801cf32:	687b      	ldr	r3, [r7, #4]
 801cf34:	681b      	ldr	r3, [r3, #0]
 801cf36:	f042 0201 	orr.w	r2, r2, #1
 801cf3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801cf3c:	2300      	movs	r3, #0
}
 801cf3e:	4618      	mov	r0, r3
 801cf40:	3714      	adds	r7, #20
 801cf42:	46bd      	mov	sp, r7
 801cf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf48:	4770      	bx	lr
 801cf4a:	bf00      	nop
 801cf4c:	40010000 	.word	0x40010000
 801cf50:	40000400 	.word	0x40000400
 801cf54:	40000800 	.word	0x40000800
 801cf58:	40000c00 	.word	0x40000c00
 801cf5c:	40010400 	.word	0x40010400
 801cf60:	40014000 	.word	0x40014000
 801cf64:	40001800 	.word	0x40001800

0801cf68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801cf68:	b580      	push	{r7, lr}
 801cf6a:	b082      	sub	sp, #8
 801cf6c:	af00      	add	r7, sp, #0
 801cf6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801cf70:	687b      	ldr	r3, [r7, #4]
 801cf72:	681b      	ldr	r3, [r3, #0]
 801cf74:	691b      	ldr	r3, [r3, #16]
 801cf76:	f003 0302 	and.w	r3, r3, #2
 801cf7a:	2b02      	cmp	r3, #2
 801cf7c:	d122      	bne.n	801cfc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801cf7e:	687b      	ldr	r3, [r7, #4]
 801cf80:	681b      	ldr	r3, [r3, #0]
 801cf82:	68db      	ldr	r3, [r3, #12]
 801cf84:	f003 0302 	and.w	r3, r3, #2
 801cf88:	2b02      	cmp	r3, #2
 801cf8a:	d11b      	bne.n	801cfc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801cf8c:	687b      	ldr	r3, [r7, #4]
 801cf8e:	681b      	ldr	r3, [r3, #0]
 801cf90:	f06f 0202 	mvn.w	r2, #2
 801cf94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801cf96:	687b      	ldr	r3, [r7, #4]
 801cf98:	2201      	movs	r2, #1
 801cf9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801cf9c:	687b      	ldr	r3, [r7, #4]
 801cf9e:	681b      	ldr	r3, [r3, #0]
 801cfa0:	699b      	ldr	r3, [r3, #24]
 801cfa2:	f003 0303 	and.w	r3, r3, #3
 801cfa6:	2b00      	cmp	r3, #0
 801cfa8:	d003      	beq.n	801cfb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801cfaa:	6878      	ldr	r0, [r7, #4]
 801cfac:	f000 fa11 	bl	801d3d2 <HAL_TIM_IC_CaptureCallback>
 801cfb0:	e005      	b.n	801cfbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801cfb2:	6878      	ldr	r0, [r7, #4]
 801cfb4:	f000 fa03 	bl	801d3be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801cfb8:	6878      	ldr	r0, [r7, #4]
 801cfba:	f000 fa14 	bl	801d3e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801cfbe:	687b      	ldr	r3, [r7, #4]
 801cfc0:	2200      	movs	r2, #0
 801cfc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801cfc4:	687b      	ldr	r3, [r7, #4]
 801cfc6:	681b      	ldr	r3, [r3, #0]
 801cfc8:	691b      	ldr	r3, [r3, #16]
 801cfca:	f003 0304 	and.w	r3, r3, #4
 801cfce:	2b04      	cmp	r3, #4
 801cfd0:	d122      	bne.n	801d018 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801cfd2:	687b      	ldr	r3, [r7, #4]
 801cfd4:	681b      	ldr	r3, [r3, #0]
 801cfd6:	68db      	ldr	r3, [r3, #12]
 801cfd8:	f003 0304 	and.w	r3, r3, #4
 801cfdc:	2b04      	cmp	r3, #4
 801cfde:	d11b      	bne.n	801d018 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801cfe0:	687b      	ldr	r3, [r7, #4]
 801cfe2:	681b      	ldr	r3, [r3, #0]
 801cfe4:	f06f 0204 	mvn.w	r2, #4
 801cfe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801cfea:	687b      	ldr	r3, [r7, #4]
 801cfec:	2202      	movs	r2, #2
 801cfee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801cff0:	687b      	ldr	r3, [r7, #4]
 801cff2:	681b      	ldr	r3, [r3, #0]
 801cff4:	699b      	ldr	r3, [r3, #24]
 801cff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801cffa:	2b00      	cmp	r3, #0
 801cffc:	d003      	beq.n	801d006 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801cffe:	6878      	ldr	r0, [r7, #4]
 801d000:	f000 f9e7 	bl	801d3d2 <HAL_TIM_IC_CaptureCallback>
 801d004:	e005      	b.n	801d012 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d006:	6878      	ldr	r0, [r7, #4]
 801d008:	f000 f9d9 	bl	801d3be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d00c:	6878      	ldr	r0, [r7, #4]
 801d00e:	f000 f9ea 	bl	801d3e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d012:	687b      	ldr	r3, [r7, #4]
 801d014:	2200      	movs	r2, #0
 801d016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801d018:	687b      	ldr	r3, [r7, #4]
 801d01a:	681b      	ldr	r3, [r3, #0]
 801d01c:	691b      	ldr	r3, [r3, #16]
 801d01e:	f003 0308 	and.w	r3, r3, #8
 801d022:	2b08      	cmp	r3, #8
 801d024:	d122      	bne.n	801d06c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801d026:	687b      	ldr	r3, [r7, #4]
 801d028:	681b      	ldr	r3, [r3, #0]
 801d02a:	68db      	ldr	r3, [r3, #12]
 801d02c:	f003 0308 	and.w	r3, r3, #8
 801d030:	2b08      	cmp	r3, #8
 801d032:	d11b      	bne.n	801d06c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801d034:	687b      	ldr	r3, [r7, #4]
 801d036:	681b      	ldr	r3, [r3, #0]
 801d038:	f06f 0208 	mvn.w	r2, #8
 801d03c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801d03e:	687b      	ldr	r3, [r7, #4]
 801d040:	2204      	movs	r2, #4
 801d042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801d044:	687b      	ldr	r3, [r7, #4]
 801d046:	681b      	ldr	r3, [r3, #0]
 801d048:	69db      	ldr	r3, [r3, #28]
 801d04a:	f003 0303 	and.w	r3, r3, #3
 801d04e:	2b00      	cmp	r3, #0
 801d050:	d003      	beq.n	801d05a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d052:	6878      	ldr	r0, [r7, #4]
 801d054:	f000 f9bd 	bl	801d3d2 <HAL_TIM_IC_CaptureCallback>
 801d058:	e005      	b.n	801d066 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d05a:	6878      	ldr	r0, [r7, #4]
 801d05c:	f000 f9af 	bl	801d3be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d060:	6878      	ldr	r0, [r7, #4]
 801d062:	f000 f9c0 	bl	801d3e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d066:	687b      	ldr	r3, [r7, #4]
 801d068:	2200      	movs	r2, #0
 801d06a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801d06c:	687b      	ldr	r3, [r7, #4]
 801d06e:	681b      	ldr	r3, [r3, #0]
 801d070:	691b      	ldr	r3, [r3, #16]
 801d072:	f003 0310 	and.w	r3, r3, #16
 801d076:	2b10      	cmp	r3, #16
 801d078:	d122      	bne.n	801d0c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801d07a:	687b      	ldr	r3, [r7, #4]
 801d07c:	681b      	ldr	r3, [r3, #0]
 801d07e:	68db      	ldr	r3, [r3, #12]
 801d080:	f003 0310 	and.w	r3, r3, #16
 801d084:	2b10      	cmp	r3, #16
 801d086:	d11b      	bne.n	801d0c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801d088:	687b      	ldr	r3, [r7, #4]
 801d08a:	681b      	ldr	r3, [r3, #0]
 801d08c:	f06f 0210 	mvn.w	r2, #16
 801d090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801d092:	687b      	ldr	r3, [r7, #4]
 801d094:	2208      	movs	r2, #8
 801d096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801d098:	687b      	ldr	r3, [r7, #4]
 801d09a:	681b      	ldr	r3, [r3, #0]
 801d09c:	69db      	ldr	r3, [r3, #28]
 801d09e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d0a2:	2b00      	cmp	r3, #0
 801d0a4:	d003      	beq.n	801d0ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d0a6:	6878      	ldr	r0, [r7, #4]
 801d0a8:	f000 f993 	bl	801d3d2 <HAL_TIM_IC_CaptureCallback>
 801d0ac:	e005      	b.n	801d0ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d0ae:	6878      	ldr	r0, [r7, #4]
 801d0b0:	f000 f985 	bl	801d3be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d0b4:	6878      	ldr	r0, [r7, #4]
 801d0b6:	f000 f996 	bl	801d3e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d0ba:	687b      	ldr	r3, [r7, #4]
 801d0bc:	2200      	movs	r2, #0
 801d0be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801d0c0:	687b      	ldr	r3, [r7, #4]
 801d0c2:	681b      	ldr	r3, [r3, #0]
 801d0c4:	691b      	ldr	r3, [r3, #16]
 801d0c6:	f003 0301 	and.w	r3, r3, #1
 801d0ca:	2b01      	cmp	r3, #1
 801d0cc:	d10e      	bne.n	801d0ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801d0ce:	687b      	ldr	r3, [r7, #4]
 801d0d0:	681b      	ldr	r3, [r3, #0]
 801d0d2:	68db      	ldr	r3, [r3, #12]
 801d0d4:	f003 0301 	and.w	r3, r3, #1
 801d0d8:	2b01      	cmp	r3, #1
 801d0da:	d107      	bne.n	801d0ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801d0dc:	687b      	ldr	r3, [r7, #4]
 801d0de:	681b      	ldr	r3, [r3, #0]
 801d0e0:	f06f 0201 	mvn.w	r2, #1
 801d0e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801d0e6:	6878      	ldr	r0, [r7, #4]
 801d0e8:	f7fa fd6e 	bl	8017bc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801d0ec:	687b      	ldr	r3, [r7, #4]
 801d0ee:	681b      	ldr	r3, [r3, #0]
 801d0f0:	691b      	ldr	r3, [r3, #16]
 801d0f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d0f6:	2b80      	cmp	r3, #128	; 0x80
 801d0f8:	d10e      	bne.n	801d118 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801d0fa:	687b      	ldr	r3, [r7, #4]
 801d0fc:	681b      	ldr	r3, [r3, #0]
 801d0fe:	68db      	ldr	r3, [r3, #12]
 801d100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d104:	2b80      	cmp	r3, #128	; 0x80
 801d106:	d107      	bne.n	801d118 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801d108:	687b      	ldr	r3, [r7, #4]
 801d10a:	681b      	ldr	r3, [r3, #0]
 801d10c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801d110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801d112:	6878      	ldr	r0, [r7, #4]
 801d114:	f000 fcec 	bl	801daf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801d118:	687b      	ldr	r3, [r7, #4]
 801d11a:	681b      	ldr	r3, [r3, #0]
 801d11c:	691b      	ldr	r3, [r3, #16]
 801d11e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d122:	2b40      	cmp	r3, #64	; 0x40
 801d124:	d10e      	bne.n	801d144 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801d126:	687b      	ldr	r3, [r7, #4]
 801d128:	681b      	ldr	r3, [r3, #0]
 801d12a:	68db      	ldr	r3, [r3, #12]
 801d12c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d130:	2b40      	cmp	r3, #64	; 0x40
 801d132:	d107      	bne.n	801d144 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801d134:	687b      	ldr	r3, [r7, #4]
 801d136:	681b      	ldr	r3, [r3, #0]
 801d138:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801d13c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801d13e:	6878      	ldr	r0, [r7, #4]
 801d140:	f000 f95b 	bl	801d3fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801d144:	687b      	ldr	r3, [r7, #4]
 801d146:	681b      	ldr	r3, [r3, #0]
 801d148:	691b      	ldr	r3, [r3, #16]
 801d14a:	f003 0320 	and.w	r3, r3, #32
 801d14e:	2b20      	cmp	r3, #32
 801d150:	d10e      	bne.n	801d170 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801d152:	687b      	ldr	r3, [r7, #4]
 801d154:	681b      	ldr	r3, [r3, #0]
 801d156:	68db      	ldr	r3, [r3, #12]
 801d158:	f003 0320 	and.w	r3, r3, #32
 801d15c:	2b20      	cmp	r3, #32
 801d15e:	d107      	bne.n	801d170 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801d160:	687b      	ldr	r3, [r7, #4]
 801d162:	681b      	ldr	r3, [r3, #0]
 801d164:	f06f 0220 	mvn.w	r2, #32
 801d168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801d16a:	6878      	ldr	r0, [r7, #4]
 801d16c:	f000 fcb6 	bl	801dadc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801d170:	bf00      	nop
 801d172:	3708      	adds	r7, #8
 801d174:	46bd      	mov	sp, r7
 801d176:	bd80      	pop	{r7, pc}

0801d178 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 801d178:	b580      	push	{r7, lr}
 801d17a:	b086      	sub	sp, #24
 801d17c:	af00      	add	r7, sp, #0
 801d17e:	60f8      	str	r0, [r7, #12]
 801d180:	60b9      	str	r1, [r7, #8]
 801d182:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801d184:	2300      	movs	r3, #0
 801d186:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 801d188:	68fb      	ldr	r3, [r7, #12]
 801d18a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d18e:	2b01      	cmp	r3, #1
 801d190:	d101      	bne.n	801d196 <HAL_TIM_OC_ConfigChannel+0x1e>
 801d192:	2302      	movs	r3, #2
 801d194:	e048      	b.n	801d228 <HAL_TIM_OC_ConfigChannel+0xb0>
 801d196:	68fb      	ldr	r3, [r7, #12]
 801d198:	2201      	movs	r2, #1
 801d19a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 801d19e:	687b      	ldr	r3, [r7, #4]
 801d1a0:	2b0c      	cmp	r3, #12
 801d1a2:	d839      	bhi.n	801d218 <HAL_TIM_OC_ConfigChannel+0xa0>
 801d1a4:	a201      	add	r2, pc, #4	; (adr r2, 801d1ac <HAL_TIM_OC_ConfigChannel+0x34>)
 801d1a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d1aa:	bf00      	nop
 801d1ac:	0801d1e1 	.word	0x0801d1e1
 801d1b0:	0801d219 	.word	0x0801d219
 801d1b4:	0801d219 	.word	0x0801d219
 801d1b8:	0801d219 	.word	0x0801d219
 801d1bc:	0801d1ef 	.word	0x0801d1ef
 801d1c0:	0801d219 	.word	0x0801d219
 801d1c4:	0801d219 	.word	0x0801d219
 801d1c8:	0801d219 	.word	0x0801d219
 801d1cc:	0801d1fd 	.word	0x0801d1fd
 801d1d0:	0801d219 	.word	0x0801d219
 801d1d4:	0801d219 	.word	0x0801d219
 801d1d8:	0801d219 	.word	0x0801d219
 801d1dc:	0801d20b 	.word	0x0801d20b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801d1e0:	68fb      	ldr	r3, [r7, #12]
 801d1e2:	681b      	ldr	r3, [r3, #0]
 801d1e4:	68b9      	ldr	r1, [r7, #8]
 801d1e6:	4618      	mov	r0, r3
 801d1e8:	f000 f9b2 	bl	801d550 <TIM_OC1_SetConfig>
      break;
 801d1ec:	e017      	b.n	801d21e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801d1ee:	68fb      	ldr	r3, [r7, #12]
 801d1f0:	681b      	ldr	r3, [r3, #0]
 801d1f2:	68b9      	ldr	r1, [r7, #8]
 801d1f4:	4618      	mov	r0, r3
 801d1f6:	f000 fa1b 	bl	801d630 <TIM_OC2_SetConfig>
      break;
 801d1fa:	e010      	b.n	801d21e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801d1fc:	68fb      	ldr	r3, [r7, #12]
 801d1fe:	681b      	ldr	r3, [r3, #0]
 801d200:	68b9      	ldr	r1, [r7, #8]
 801d202:	4618      	mov	r0, r3
 801d204:	f000 fa8a 	bl	801d71c <TIM_OC3_SetConfig>
      break;
 801d208:	e009      	b.n	801d21e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801d20a:	68fb      	ldr	r3, [r7, #12]
 801d20c:	681b      	ldr	r3, [r3, #0]
 801d20e:	68b9      	ldr	r1, [r7, #8]
 801d210:	4618      	mov	r0, r3
 801d212:	f000 faf7 	bl	801d804 <TIM_OC4_SetConfig>
      break;
 801d216:	e002      	b.n	801d21e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 801d218:	2301      	movs	r3, #1
 801d21a:	75fb      	strb	r3, [r7, #23]
      break;
 801d21c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801d21e:	68fb      	ldr	r3, [r7, #12]
 801d220:	2200      	movs	r2, #0
 801d222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801d226:	7dfb      	ldrb	r3, [r7, #23]
}
 801d228:	4618      	mov	r0, r3
 801d22a:	3718      	adds	r7, #24
 801d22c:	46bd      	mov	sp, r7
 801d22e:	bd80      	pop	{r7, pc}

0801d230 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801d230:	b580      	push	{r7, lr}
 801d232:	b084      	sub	sp, #16
 801d234:	af00      	add	r7, sp, #0
 801d236:	6078      	str	r0, [r7, #4]
 801d238:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801d23a:	2300      	movs	r3, #0
 801d23c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801d23e:	687b      	ldr	r3, [r7, #4]
 801d240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d244:	2b01      	cmp	r3, #1
 801d246:	d101      	bne.n	801d24c <HAL_TIM_ConfigClockSource+0x1c>
 801d248:	2302      	movs	r3, #2
 801d24a:	e0b4      	b.n	801d3b6 <HAL_TIM_ConfigClockSource+0x186>
 801d24c:	687b      	ldr	r3, [r7, #4]
 801d24e:	2201      	movs	r2, #1
 801d250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801d254:	687b      	ldr	r3, [r7, #4]
 801d256:	2202      	movs	r2, #2
 801d258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801d25c:	687b      	ldr	r3, [r7, #4]
 801d25e:	681b      	ldr	r3, [r3, #0]
 801d260:	689b      	ldr	r3, [r3, #8]
 801d262:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801d264:	68bb      	ldr	r3, [r7, #8]
 801d266:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801d26a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801d26c:	68bb      	ldr	r3, [r7, #8]
 801d26e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801d272:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801d274:	687b      	ldr	r3, [r7, #4]
 801d276:	681b      	ldr	r3, [r3, #0]
 801d278:	68ba      	ldr	r2, [r7, #8]
 801d27a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801d27c:	683b      	ldr	r3, [r7, #0]
 801d27e:	681b      	ldr	r3, [r3, #0]
 801d280:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d284:	d03e      	beq.n	801d304 <HAL_TIM_ConfigClockSource+0xd4>
 801d286:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d28a:	f200 8087 	bhi.w	801d39c <HAL_TIM_ConfigClockSource+0x16c>
 801d28e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d292:	f000 8086 	beq.w	801d3a2 <HAL_TIM_ConfigClockSource+0x172>
 801d296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d29a:	d87f      	bhi.n	801d39c <HAL_TIM_ConfigClockSource+0x16c>
 801d29c:	2b70      	cmp	r3, #112	; 0x70
 801d29e:	d01a      	beq.n	801d2d6 <HAL_TIM_ConfigClockSource+0xa6>
 801d2a0:	2b70      	cmp	r3, #112	; 0x70
 801d2a2:	d87b      	bhi.n	801d39c <HAL_TIM_ConfigClockSource+0x16c>
 801d2a4:	2b60      	cmp	r3, #96	; 0x60
 801d2a6:	d050      	beq.n	801d34a <HAL_TIM_ConfigClockSource+0x11a>
 801d2a8:	2b60      	cmp	r3, #96	; 0x60
 801d2aa:	d877      	bhi.n	801d39c <HAL_TIM_ConfigClockSource+0x16c>
 801d2ac:	2b50      	cmp	r3, #80	; 0x50
 801d2ae:	d03c      	beq.n	801d32a <HAL_TIM_ConfigClockSource+0xfa>
 801d2b0:	2b50      	cmp	r3, #80	; 0x50
 801d2b2:	d873      	bhi.n	801d39c <HAL_TIM_ConfigClockSource+0x16c>
 801d2b4:	2b40      	cmp	r3, #64	; 0x40
 801d2b6:	d058      	beq.n	801d36a <HAL_TIM_ConfigClockSource+0x13a>
 801d2b8:	2b40      	cmp	r3, #64	; 0x40
 801d2ba:	d86f      	bhi.n	801d39c <HAL_TIM_ConfigClockSource+0x16c>
 801d2bc:	2b30      	cmp	r3, #48	; 0x30
 801d2be:	d064      	beq.n	801d38a <HAL_TIM_ConfigClockSource+0x15a>
 801d2c0:	2b30      	cmp	r3, #48	; 0x30
 801d2c2:	d86b      	bhi.n	801d39c <HAL_TIM_ConfigClockSource+0x16c>
 801d2c4:	2b20      	cmp	r3, #32
 801d2c6:	d060      	beq.n	801d38a <HAL_TIM_ConfigClockSource+0x15a>
 801d2c8:	2b20      	cmp	r3, #32
 801d2ca:	d867      	bhi.n	801d39c <HAL_TIM_ConfigClockSource+0x16c>
 801d2cc:	2b00      	cmp	r3, #0
 801d2ce:	d05c      	beq.n	801d38a <HAL_TIM_ConfigClockSource+0x15a>
 801d2d0:	2b10      	cmp	r3, #16
 801d2d2:	d05a      	beq.n	801d38a <HAL_TIM_ConfigClockSource+0x15a>
 801d2d4:	e062      	b.n	801d39c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801d2d6:	687b      	ldr	r3, [r7, #4]
 801d2d8:	6818      	ldr	r0, [r3, #0]
 801d2da:	683b      	ldr	r3, [r7, #0]
 801d2dc:	6899      	ldr	r1, [r3, #8]
 801d2de:	683b      	ldr	r3, [r7, #0]
 801d2e0:	685a      	ldr	r2, [r3, #4]
 801d2e2:	683b      	ldr	r3, [r7, #0]
 801d2e4:	68db      	ldr	r3, [r3, #12]
 801d2e6:	f000 fb5d 	bl	801d9a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801d2ea:	687b      	ldr	r3, [r7, #4]
 801d2ec:	681b      	ldr	r3, [r3, #0]
 801d2ee:	689b      	ldr	r3, [r3, #8]
 801d2f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801d2f2:	68bb      	ldr	r3, [r7, #8]
 801d2f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801d2f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801d2fa:	687b      	ldr	r3, [r7, #4]
 801d2fc:	681b      	ldr	r3, [r3, #0]
 801d2fe:	68ba      	ldr	r2, [r7, #8]
 801d300:	609a      	str	r2, [r3, #8]
      break;
 801d302:	e04f      	b.n	801d3a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801d304:	687b      	ldr	r3, [r7, #4]
 801d306:	6818      	ldr	r0, [r3, #0]
 801d308:	683b      	ldr	r3, [r7, #0]
 801d30a:	6899      	ldr	r1, [r3, #8]
 801d30c:	683b      	ldr	r3, [r7, #0]
 801d30e:	685a      	ldr	r2, [r3, #4]
 801d310:	683b      	ldr	r3, [r7, #0]
 801d312:	68db      	ldr	r3, [r3, #12]
 801d314:	f000 fb46 	bl	801d9a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801d318:	687b      	ldr	r3, [r7, #4]
 801d31a:	681b      	ldr	r3, [r3, #0]
 801d31c:	689a      	ldr	r2, [r3, #8]
 801d31e:	687b      	ldr	r3, [r7, #4]
 801d320:	681b      	ldr	r3, [r3, #0]
 801d322:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801d326:	609a      	str	r2, [r3, #8]
      break;
 801d328:	e03c      	b.n	801d3a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801d32a:	687b      	ldr	r3, [r7, #4]
 801d32c:	6818      	ldr	r0, [r3, #0]
 801d32e:	683b      	ldr	r3, [r7, #0]
 801d330:	6859      	ldr	r1, [r3, #4]
 801d332:	683b      	ldr	r3, [r7, #0]
 801d334:	68db      	ldr	r3, [r3, #12]
 801d336:	461a      	mov	r2, r3
 801d338:	f000 faba 	bl	801d8b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801d33c:	687b      	ldr	r3, [r7, #4]
 801d33e:	681b      	ldr	r3, [r3, #0]
 801d340:	2150      	movs	r1, #80	; 0x50
 801d342:	4618      	mov	r0, r3
 801d344:	f000 fb13 	bl	801d96e <TIM_ITRx_SetConfig>
      break;
 801d348:	e02c      	b.n	801d3a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801d34a:	687b      	ldr	r3, [r7, #4]
 801d34c:	6818      	ldr	r0, [r3, #0]
 801d34e:	683b      	ldr	r3, [r7, #0]
 801d350:	6859      	ldr	r1, [r3, #4]
 801d352:	683b      	ldr	r3, [r7, #0]
 801d354:	68db      	ldr	r3, [r3, #12]
 801d356:	461a      	mov	r2, r3
 801d358:	f000 fad9 	bl	801d90e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801d35c:	687b      	ldr	r3, [r7, #4]
 801d35e:	681b      	ldr	r3, [r3, #0]
 801d360:	2160      	movs	r1, #96	; 0x60
 801d362:	4618      	mov	r0, r3
 801d364:	f000 fb03 	bl	801d96e <TIM_ITRx_SetConfig>
      break;
 801d368:	e01c      	b.n	801d3a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801d36a:	687b      	ldr	r3, [r7, #4]
 801d36c:	6818      	ldr	r0, [r3, #0]
 801d36e:	683b      	ldr	r3, [r7, #0]
 801d370:	6859      	ldr	r1, [r3, #4]
 801d372:	683b      	ldr	r3, [r7, #0]
 801d374:	68db      	ldr	r3, [r3, #12]
 801d376:	461a      	mov	r2, r3
 801d378:	f000 fa9a 	bl	801d8b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801d37c:	687b      	ldr	r3, [r7, #4]
 801d37e:	681b      	ldr	r3, [r3, #0]
 801d380:	2140      	movs	r1, #64	; 0x40
 801d382:	4618      	mov	r0, r3
 801d384:	f000 faf3 	bl	801d96e <TIM_ITRx_SetConfig>
      break;
 801d388:	e00c      	b.n	801d3a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801d38a:	687b      	ldr	r3, [r7, #4]
 801d38c:	681a      	ldr	r2, [r3, #0]
 801d38e:	683b      	ldr	r3, [r7, #0]
 801d390:	681b      	ldr	r3, [r3, #0]
 801d392:	4619      	mov	r1, r3
 801d394:	4610      	mov	r0, r2
 801d396:	f000 faea 	bl	801d96e <TIM_ITRx_SetConfig>
      break;
 801d39a:	e003      	b.n	801d3a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 801d39c:	2301      	movs	r3, #1
 801d39e:	73fb      	strb	r3, [r7, #15]
      break;
 801d3a0:	e000      	b.n	801d3a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 801d3a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801d3a4:	687b      	ldr	r3, [r7, #4]
 801d3a6:	2201      	movs	r2, #1
 801d3a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801d3ac:	687b      	ldr	r3, [r7, #4]
 801d3ae:	2200      	movs	r2, #0
 801d3b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801d3b4:	7bfb      	ldrb	r3, [r7, #15]
}
 801d3b6:	4618      	mov	r0, r3
 801d3b8:	3710      	adds	r7, #16
 801d3ba:	46bd      	mov	sp, r7
 801d3bc:	bd80      	pop	{r7, pc}

0801d3be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801d3be:	b480      	push	{r7}
 801d3c0:	b083      	sub	sp, #12
 801d3c2:	af00      	add	r7, sp, #0
 801d3c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801d3c6:	bf00      	nop
 801d3c8:	370c      	adds	r7, #12
 801d3ca:	46bd      	mov	sp, r7
 801d3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3d0:	4770      	bx	lr

0801d3d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801d3d2:	b480      	push	{r7}
 801d3d4:	b083      	sub	sp, #12
 801d3d6:	af00      	add	r7, sp, #0
 801d3d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801d3da:	bf00      	nop
 801d3dc:	370c      	adds	r7, #12
 801d3de:	46bd      	mov	sp, r7
 801d3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3e4:	4770      	bx	lr

0801d3e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801d3e6:	b480      	push	{r7}
 801d3e8:	b083      	sub	sp, #12
 801d3ea:	af00      	add	r7, sp, #0
 801d3ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801d3ee:	bf00      	nop
 801d3f0:	370c      	adds	r7, #12
 801d3f2:	46bd      	mov	sp, r7
 801d3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3f8:	4770      	bx	lr

0801d3fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801d3fa:	b480      	push	{r7}
 801d3fc:	b083      	sub	sp, #12
 801d3fe:	af00      	add	r7, sp, #0
 801d400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801d402:	bf00      	nop
 801d404:	370c      	adds	r7, #12
 801d406:	46bd      	mov	sp, r7
 801d408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d40c:	4770      	bx	lr
	...

0801d410 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801d410:	b480      	push	{r7}
 801d412:	b085      	sub	sp, #20
 801d414:	af00      	add	r7, sp, #0
 801d416:	6078      	str	r0, [r7, #4]
 801d418:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801d41a:	687b      	ldr	r3, [r7, #4]
 801d41c:	681b      	ldr	r3, [r3, #0]
 801d41e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801d420:	687b      	ldr	r3, [r7, #4]
 801d422:	4a40      	ldr	r2, [pc, #256]	; (801d524 <TIM_Base_SetConfig+0x114>)
 801d424:	4293      	cmp	r3, r2
 801d426:	d013      	beq.n	801d450 <TIM_Base_SetConfig+0x40>
 801d428:	687b      	ldr	r3, [r7, #4]
 801d42a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d42e:	d00f      	beq.n	801d450 <TIM_Base_SetConfig+0x40>
 801d430:	687b      	ldr	r3, [r7, #4]
 801d432:	4a3d      	ldr	r2, [pc, #244]	; (801d528 <TIM_Base_SetConfig+0x118>)
 801d434:	4293      	cmp	r3, r2
 801d436:	d00b      	beq.n	801d450 <TIM_Base_SetConfig+0x40>
 801d438:	687b      	ldr	r3, [r7, #4]
 801d43a:	4a3c      	ldr	r2, [pc, #240]	; (801d52c <TIM_Base_SetConfig+0x11c>)
 801d43c:	4293      	cmp	r3, r2
 801d43e:	d007      	beq.n	801d450 <TIM_Base_SetConfig+0x40>
 801d440:	687b      	ldr	r3, [r7, #4]
 801d442:	4a3b      	ldr	r2, [pc, #236]	; (801d530 <TIM_Base_SetConfig+0x120>)
 801d444:	4293      	cmp	r3, r2
 801d446:	d003      	beq.n	801d450 <TIM_Base_SetConfig+0x40>
 801d448:	687b      	ldr	r3, [r7, #4]
 801d44a:	4a3a      	ldr	r2, [pc, #232]	; (801d534 <TIM_Base_SetConfig+0x124>)
 801d44c:	4293      	cmp	r3, r2
 801d44e:	d108      	bne.n	801d462 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801d450:	68fb      	ldr	r3, [r7, #12]
 801d452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d456:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801d458:	683b      	ldr	r3, [r7, #0]
 801d45a:	685b      	ldr	r3, [r3, #4]
 801d45c:	68fa      	ldr	r2, [r7, #12]
 801d45e:	4313      	orrs	r3, r2
 801d460:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801d462:	687b      	ldr	r3, [r7, #4]
 801d464:	4a2f      	ldr	r2, [pc, #188]	; (801d524 <TIM_Base_SetConfig+0x114>)
 801d466:	4293      	cmp	r3, r2
 801d468:	d02b      	beq.n	801d4c2 <TIM_Base_SetConfig+0xb2>
 801d46a:	687b      	ldr	r3, [r7, #4]
 801d46c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d470:	d027      	beq.n	801d4c2 <TIM_Base_SetConfig+0xb2>
 801d472:	687b      	ldr	r3, [r7, #4]
 801d474:	4a2c      	ldr	r2, [pc, #176]	; (801d528 <TIM_Base_SetConfig+0x118>)
 801d476:	4293      	cmp	r3, r2
 801d478:	d023      	beq.n	801d4c2 <TIM_Base_SetConfig+0xb2>
 801d47a:	687b      	ldr	r3, [r7, #4]
 801d47c:	4a2b      	ldr	r2, [pc, #172]	; (801d52c <TIM_Base_SetConfig+0x11c>)
 801d47e:	4293      	cmp	r3, r2
 801d480:	d01f      	beq.n	801d4c2 <TIM_Base_SetConfig+0xb2>
 801d482:	687b      	ldr	r3, [r7, #4]
 801d484:	4a2a      	ldr	r2, [pc, #168]	; (801d530 <TIM_Base_SetConfig+0x120>)
 801d486:	4293      	cmp	r3, r2
 801d488:	d01b      	beq.n	801d4c2 <TIM_Base_SetConfig+0xb2>
 801d48a:	687b      	ldr	r3, [r7, #4]
 801d48c:	4a29      	ldr	r2, [pc, #164]	; (801d534 <TIM_Base_SetConfig+0x124>)
 801d48e:	4293      	cmp	r3, r2
 801d490:	d017      	beq.n	801d4c2 <TIM_Base_SetConfig+0xb2>
 801d492:	687b      	ldr	r3, [r7, #4]
 801d494:	4a28      	ldr	r2, [pc, #160]	; (801d538 <TIM_Base_SetConfig+0x128>)
 801d496:	4293      	cmp	r3, r2
 801d498:	d013      	beq.n	801d4c2 <TIM_Base_SetConfig+0xb2>
 801d49a:	687b      	ldr	r3, [r7, #4]
 801d49c:	4a27      	ldr	r2, [pc, #156]	; (801d53c <TIM_Base_SetConfig+0x12c>)
 801d49e:	4293      	cmp	r3, r2
 801d4a0:	d00f      	beq.n	801d4c2 <TIM_Base_SetConfig+0xb2>
 801d4a2:	687b      	ldr	r3, [r7, #4]
 801d4a4:	4a26      	ldr	r2, [pc, #152]	; (801d540 <TIM_Base_SetConfig+0x130>)
 801d4a6:	4293      	cmp	r3, r2
 801d4a8:	d00b      	beq.n	801d4c2 <TIM_Base_SetConfig+0xb2>
 801d4aa:	687b      	ldr	r3, [r7, #4]
 801d4ac:	4a25      	ldr	r2, [pc, #148]	; (801d544 <TIM_Base_SetConfig+0x134>)
 801d4ae:	4293      	cmp	r3, r2
 801d4b0:	d007      	beq.n	801d4c2 <TIM_Base_SetConfig+0xb2>
 801d4b2:	687b      	ldr	r3, [r7, #4]
 801d4b4:	4a24      	ldr	r2, [pc, #144]	; (801d548 <TIM_Base_SetConfig+0x138>)
 801d4b6:	4293      	cmp	r3, r2
 801d4b8:	d003      	beq.n	801d4c2 <TIM_Base_SetConfig+0xb2>
 801d4ba:	687b      	ldr	r3, [r7, #4]
 801d4bc:	4a23      	ldr	r2, [pc, #140]	; (801d54c <TIM_Base_SetConfig+0x13c>)
 801d4be:	4293      	cmp	r3, r2
 801d4c0:	d108      	bne.n	801d4d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801d4c2:	68fb      	ldr	r3, [r7, #12]
 801d4c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d4c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801d4ca:	683b      	ldr	r3, [r7, #0]
 801d4cc:	68db      	ldr	r3, [r3, #12]
 801d4ce:	68fa      	ldr	r2, [r7, #12]
 801d4d0:	4313      	orrs	r3, r2
 801d4d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801d4d4:	68fb      	ldr	r3, [r7, #12]
 801d4d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801d4da:	683b      	ldr	r3, [r7, #0]
 801d4dc:	695b      	ldr	r3, [r3, #20]
 801d4de:	4313      	orrs	r3, r2
 801d4e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801d4e2:	687b      	ldr	r3, [r7, #4]
 801d4e4:	68fa      	ldr	r2, [r7, #12]
 801d4e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801d4e8:	683b      	ldr	r3, [r7, #0]
 801d4ea:	689a      	ldr	r2, [r3, #8]
 801d4ec:	687b      	ldr	r3, [r7, #4]
 801d4ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801d4f0:	683b      	ldr	r3, [r7, #0]
 801d4f2:	681a      	ldr	r2, [r3, #0]
 801d4f4:	687b      	ldr	r3, [r7, #4]
 801d4f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801d4f8:	687b      	ldr	r3, [r7, #4]
 801d4fa:	4a0a      	ldr	r2, [pc, #40]	; (801d524 <TIM_Base_SetConfig+0x114>)
 801d4fc:	4293      	cmp	r3, r2
 801d4fe:	d003      	beq.n	801d508 <TIM_Base_SetConfig+0xf8>
 801d500:	687b      	ldr	r3, [r7, #4]
 801d502:	4a0c      	ldr	r2, [pc, #48]	; (801d534 <TIM_Base_SetConfig+0x124>)
 801d504:	4293      	cmp	r3, r2
 801d506:	d103      	bne.n	801d510 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801d508:	683b      	ldr	r3, [r7, #0]
 801d50a:	691a      	ldr	r2, [r3, #16]
 801d50c:	687b      	ldr	r3, [r7, #4]
 801d50e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801d510:	687b      	ldr	r3, [r7, #4]
 801d512:	2201      	movs	r2, #1
 801d514:	615a      	str	r2, [r3, #20]
}
 801d516:	bf00      	nop
 801d518:	3714      	adds	r7, #20
 801d51a:	46bd      	mov	sp, r7
 801d51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d520:	4770      	bx	lr
 801d522:	bf00      	nop
 801d524:	40010000 	.word	0x40010000
 801d528:	40000400 	.word	0x40000400
 801d52c:	40000800 	.word	0x40000800
 801d530:	40000c00 	.word	0x40000c00
 801d534:	40010400 	.word	0x40010400
 801d538:	40014000 	.word	0x40014000
 801d53c:	40014400 	.word	0x40014400
 801d540:	40014800 	.word	0x40014800
 801d544:	40001800 	.word	0x40001800
 801d548:	40001c00 	.word	0x40001c00
 801d54c:	40002000 	.word	0x40002000

0801d550 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d550:	b480      	push	{r7}
 801d552:	b087      	sub	sp, #28
 801d554:	af00      	add	r7, sp, #0
 801d556:	6078      	str	r0, [r7, #4]
 801d558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801d55a:	687b      	ldr	r3, [r7, #4]
 801d55c:	6a1b      	ldr	r3, [r3, #32]
 801d55e:	f023 0201 	bic.w	r2, r3, #1
 801d562:	687b      	ldr	r3, [r7, #4]
 801d564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d566:	687b      	ldr	r3, [r7, #4]
 801d568:	6a1b      	ldr	r3, [r3, #32]
 801d56a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d56c:	687b      	ldr	r3, [r7, #4]
 801d56e:	685b      	ldr	r3, [r3, #4]
 801d570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d572:	687b      	ldr	r3, [r7, #4]
 801d574:	699b      	ldr	r3, [r3, #24]
 801d576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801d578:	68fb      	ldr	r3, [r7, #12]
 801d57a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d57e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801d580:	68fb      	ldr	r3, [r7, #12]
 801d582:	f023 0303 	bic.w	r3, r3, #3
 801d586:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d588:	683b      	ldr	r3, [r7, #0]
 801d58a:	681b      	ldr	r3, [r3, #0]
 801d58c:	68fa      	ldr	r2, [r7, #12]
 801d58e:	4313      	orrs	r3, r2
 801d590:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801d592:	697b      	ldr	r3, [r7, #20]
 801d594:	f023 0302 	bic.w	r3, r3, #2
 801d598:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801d59a:	683b      	ldr	r3, [r7, #0]
 801d59c:	689b      	ldr	r3, [r3, #8]
 801d59e:	697a      	ldr	r2, [r7, #20]
 801d5a0:	4313      	orrs	r3, r2
 801d5a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801d5a4:	687b      	ldr	r3, [r7, #4]
 801d5a6:	4a20      	ldr	r2, [pc, #128]	; (801d628 <TIM_OC1_SetConfig+0xd8>)
 801d5a8:	4293      	cmp	r3, r2
 801d5aa:	d003      	beq.n	801d5b4 <TIM_OC1_SetConfig+0x64>
 801d5ac:	687b      	ldr	r3, [r7, #4]
 801d5ae:	4a1f      	ldr	r2, [pc, #124]	; (801d62c <TIM_OC1_SetConfig+0xdc>)
 801d5b0:	4293      	cmp	r3, r2
 801d5b2:	d10c      	bne.n	801d5ce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801d5b4:	697b      	ldr	r3, [r7, #20]
 801d5b6:	f023 0308 	bic.w	r3, r3, #8
 801d5ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801d5bc:	683b      	ldr	r3, [r7, #0]
 801d5be:	68db      	ldr	r3, [r3, #12]
 801d5c0:	697a      	ldr	r2, [r7, #20]
 801d5c2:	4313      	orrs	r3, r2
 801d5c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801d5c6:	697b      	ldr	r3, [r7, #20]
 801d5c8:	f023 0304 	bic.w	r3, r3, #4
 801d5cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d5ce:	687b      	ldr	r3, [r7, #4]
 801d5d0:	4a15      	ldr	r2, [pc, #84]	; (801d628 <TIM_OC1_SetConfig+0xd8>)
 801d5d2:	4293      	cmp	r3, r2
 801d5d4:	d003      	beq.n	801d5de <TIM_OC1_SetConfig+0x8e>
 801d5d6:	687b      	ldr	r3, [r7, #4]
 801d5d8:	4a14      	ldr	r2, [pc, #80]	; (801d62c <TIM_OC1_SetConfig+0xdc>)
 801d5da:	4293      	cmp	r3, r2
 801d5dc:	d111      	bne.n	801d602 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801d5de:	693b      	ldr	r3, [r7, #16]
 801d5e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801d5e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801d5e6:	693b      	ldr	r3, [r7, #16]
 801d5e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801d5ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801d5ee:	683b      	ldr	r3, [r7, #0]
 801d5f0:	695b      	ldr	r3, [r3, #20]
 801d5f2:	693a      	ldr	r2, [r7, #16]
 801d5f4:	4313      	orrs	r3, r2
 801d5f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801d5f8:	683b      	ldr	r3, [r7, #0]
 801d5fa:	699b      	ldr	r3, [r3, #24]
 801d5fc:	693a      	ldr	r2, [r7, #16]
 801d5fe:	4313      	orrs	r3, r2
 801d600:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d602:	687b      	ldr	r3, [r7, #4]
 801d604:	693a      	ldr	r2, [r7, #16]
 801d606:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d608:	687b      	ldr	r3, [r7, #4]
 801d60a:	68fa      	ldr	r2, [r7, #12]
 801d60c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801d60e:	683b      	ldr	r3, [r7, #0]
 801d610:	685a      	ldr	r2, [r3, #4]
 801d612:	687b      	ldr	r3, [r7, #4]
 801d614:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d616:	687b      	ldr	r3, [r7, #4]
 801d618:	697a      	ldr	r2, [r7, #20]
 801d61a:	621a      	str	r2, [r3, #32]
}
 801d61c:	bf00      	nop
 801d61e:	371c      	adds	r7, #28
 801d620:	46bd      	mov	sp, r7
 801d622:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d626:	4770      	bx	lr
 801d628:	40010000 	.word	0x40010000
 801d62c:	40010400 	.word	0x40010400

0801d630 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d630:	b480      	push	{r7}
 801d632:	b087      	sub	sp, #28
 801d634:	af00      	add	r7, sp, #0
 801d636:	6078      	str	r0, [r7, #4]
 801d638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801d63a:	687b      	ldr	r3, [r7, #4]
 801d63c:	6a1b      	ldr	r3, [r3, #32]
 801d63e:	f023 0210 	bic.w	r2, r3, #16
 801d642:	687b      	ldr	r3, [r7, #4]
 801d644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d646:	687b      	ldr	r3, [r7, #4]
 801d648:	6a1b      	ldr	r3, [r3, #32]
 801d64a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d64c:	687b      	ldr	r3, [r7, #4]
 801d64e:	685b      	ldr	r3, [r3, #4]
 801d650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d652:	687b      	ldr	r3, [r7, #4]
 801d654:	699b      	ldr	r3, [r3, #24]
 801d656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801d658:	68fb      	ldr	r3, [r7, #12]
 801d65a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801d65e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801d660:	68fb      	ldr	r3, [r7, #12]
 801d662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d668:	683b      	ldr	r3, [r7, #0]
 801d66a:	681b      	ldr	r3, [r3, #0]
 801d66c:	021b      	lsls	r3, r3, #8
 801d66e:	68fa      	ldr	r2, [r7, #12]
 801d670:	4313      	orrs	r3, r2
 801d672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801d674:	697b      	ldr	r3, [r7, #20]
 801d676:	f023 0320 	bic.w	r3, r3, #32
 801d67a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801d67c:	683b      	ldr	r3, [r7, #0]
 801d67e:	689b      	ldr	r3, [r3, #8]
 801d680:	011b      	lsls	r3, r3, #4
 801d682:	697a      	ldr	r2, [r7, #20]
 801d684:	4313      	orrs	r3, r2
 801d686:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801d688:	687b      	ldr	r3, [r7, #4]
 801d68a:	4a22      	ldr	r2, [pc, #136]	; (801d714 <TIM_OC2_SetConfig+0xe4>)
 801d68c:	4293      	cmp	r3, r2
 801d68e:	d003      	beq.n	801d698 <TIM_OC2_SetConfig+0x68>
 801d690:	687b      	ldr	r3, [r7, #4]
 801d692:	4a21      	ldr	r2, [pc, #132]	; (801d718 <TIM_OC2_SetConfig+0xe8>)
 801d694:	4293      	cmp	r3, r2
 801d696:	d10d      	bne.n	801d6b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801d698:	697b      	ldr	r3, [r7, #20]
 801d69a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801d69e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801d6a0:	683b      	ldr	r3, [r7, #0]
 801d6a2:	68db      	ldr	r3, [r3, #12]
 801d6a4:	011b      	lsls	r3, r3, #4
 801d6a6:	697a      	ldr	r2, [r7, #20]
 801d6a8:	4313      	orrs	r3, r2
 801d6aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801d6ac:	697b      	ldr	r3, [r7, #20]
 801d6ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801d6b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d6b4:	687b      	ldr	r3, [r7, #4]
 801d6b6:	4a17      	ldr	r2, [pc, #92]	; (801d714 <TIM_OC2_SetConfig+0xe4>)
 801d6b8:	4293      	cmp	r3, r2
 801d6ba:	d003      	beq.n	801d6c4 <TIM_OC2_SetConfig+0x94>
 801d6bc:	687b      	ldr	r3, [r7, #4]
 801d6be:	4a16      	ldr	r2, [pc, #88]	; (801d718 <TIM_OC2_SetConfig+0xe8>)
 801d6c0:	4293      	cmp	r3, r2
 801d6c2:	d113      	bne.n	801d6ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801d6c4:	693b      	ldr	r3, [r7, #16]
 801d6c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801d6ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801d6cc:	693b      	ldr	r3, [r7, #16]
 801d6ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801d6d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801d6d4:	683b      	ldr	r3, [r7, #0]
 801d6d6:	695b      	ldr	r3, [r3, #20]
 801d6d8:	009b      	lsls	r3, r3, #2
 801d6da:	693a      	ldr	r2, [r7, #16]
 801d6dc:	4313      	orrs	r3, r2
 801d6de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801d6e0:	683b      	ldr	r3, [r7, #0]
 801d6e2:	699b      	ldr	r3, [r3, #24]
 801d6e4:	009b      	lsls	r3, r3, #2
 801d6e6:	693a      	ldr	r2, [r7, #16]
 801d6e8:	4313      	orrs	r3, r2
 801d6ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d6ec:	687b      	ldr	r3, [r7, #4]
 801d6ee:	693a      	ldr	r2, [r7, #16]
 801d6f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d6f2:	687b      	ldr	r3, [r7, #4]
 801d6f4:	68fa      	ldr	r2, [r7, #12]
 801d6f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801d6f8:	683b      	ldr	r3, [r7, #0]
 801d6fa:	685a      	ldr	r2, [r3, #4]
 801d6fc:	687b      	ldr	r3, [r7, #4]
 801d6fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d700:	687b      	ldr	r3, [r7, #4]
 801d702:	697a      	ldr	r2, [r7, #20]
 801d704:	621a      	str	r2, [r3, #32]
}
 801d706:	bf00      	nop
 801d708:	371c      	adds	r7, #28
 801d70a:	46bd      	mov	sp, r7
 801d70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d710:	4770      	bx	lr
 801d712:	bf00      	nop
 801d714:	40010000 	.word	0x40010000
 801d718:	40010400 	.word	0x40010400

0801d71c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d71c:	b480      	push	{r7}
 801d71e:	b087      	sub	sp, #28
 801d720:	af00      	add	r7, sp, #0
 801d722:	6078      	str	r0, [r7, #4]
 801d724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801d726:	687b      	ldr	r3, [r7, #4]
 801d728:	6a1b      	ldr	r3, [r3, #32]
 801d72a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801d72e:	687b      	ldr	r3, [r7, #4]
 801d730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d732:	687b      	ldr	r3, [r7, #4]
 801d734:	6a1b      	ldr	r3, [r3, #32]
 801d736:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d738:	687b      	ldr	r3, [r7, #4]
 801d73a:	685b      	ldr	r3, [r3, #4]
 801d73c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801d73e:	687b      	ldr	r3, [r7, #4]
 801d740:	69db      	ldr	r3, [r3, #28]
 801d742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801d744:	68fb      	ldr	r3, [r7, #12]
 801d746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d74a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801d74c:	68fb      	ldr	r3, [r7, #12]
 801d74e:	f023 0303 	bic.w	r3, r3, #3
 801d752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d754:	683b      	ldr	r3, [r7, #0]
 801d756:	681b      	ldr	r3, [r3, #0]
 801d758:	68fa      	ldr	r2, [r7, #12]
 801d75a:	4313      	orrs	r3, r2
 801d75c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801d75e:	697b      	ldr	r3, [r7, #20]
 801d760:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801d764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801d766:	683b      	ldr	r3, [r7, #0]
 801d768:	689b      	ldr	r3, [r3, #8]
 801d76a:	021b      	lsls	r3, r3, #8
 801d76c:	697a      	ldr	r2, [r7, #20]
 801d76e:	4313      	orrs	r3, r2
 801d770:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801d772:	687b      	ldr	r3, [r7, #4]
 801d774:	4a21      	ldr	r2, [pc, #132]	; (801d7fc <TIM_OC3_SetConfig+0xe0>)
 801d776:	4293      	cmp	r3, r2
 801d778:	d003      	beq.n	801d782 <TIM_OC3_SetConfig+0x66>
 801d77a:	687b      	ldr	r3, [r7, #4]
 801d77c:	4a20      	ldr	r2, [pc, #128]	; (801d800 <TIM_OC3_SetConfig+0xe4>)
 801d77e:	4293      	cmp	r3, r2
 801d780:	d10d      	bne.n	801d79e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801d782:	697b      	ldr	r3, [r7, #20]
 801d784:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801d788:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801d78a:	683b      	ldr	r3, [r7, #0]
 801d78c:	68db      	ldr	r3, [r3, #12]
 801d78e:	021b      	lsls	r3, r3, #8
 801d790:	697a      	ldr	r2, [r7, #20]
 801d792:	4313      	orrs	r3, r2
 801d794:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801d796:	697b      	ldr	r3, [r7, #20]
 801d798:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801d79c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d79e:	687b      	ldr	r3, [r7, #4]
 801d7a0:	4a16      	ldr	r2, [pc, #88]	; (801d7fc <TIM_OC3_SetConfig+0xe0>)
 801d7a2:	4293      	cmp	r3, r2
 801d7a4:	d003      	beq.n	801d7ae <TIM_OC3_SetConfig+0x92>
 801d7a6:	687b      	ldr	r3, [r7, #4]
 801d7a8:	4a15      	ldr	r2, [pc, #84]	; (801d800 <TIM_OC3_SetConfig+0xe4>)
 801d7aa:	4293      	cmp	r3, r2
 801d7ac:	d113      	bne.n	801d7d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801d7ae:	693b      	ldr	r3, [r7, #16]
 801d7b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d7b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801d7b6:	693b      	ldr	r3, [r7, #16]
 801d7b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801d7bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801d7be:	683b      	ldr	r3, [r7, #0]
 801d7c0:	695b      	ldr	r3, [r3, #20]
 801d7c2:	011b      	lsls	r3, r3, #4
 801d7c4:	693a      	ldr	r2, [r7, #16]
 801d7c6:	4313      	orrs	r3, r2
 801d7c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801d7ca:	683b      	ldr	r3, [r7, #0]
 801d7cc:	699b      	ldr	r3, [r3, #24]
 801d7ce:	011b      	lsls	r3, r3, #4
 801d7d0:	693a      	ldr	r2, [r7, #16]
 801d7d2:	4313      	orrs	r3, r2
 801d7d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d7d6:	687b      	ldr	r3, [r7, #4]
 801d7d8:	693a      	ldr	r2, [r7, #16]
 801d7da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801d7dc:	687b      	ldr	r3, [r7, #4]
 801d7de:	68fa      	ldr	r2, [r7, #12]
 801d7e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801d7e2:	683b      	ldr	r3, [r7, #0]
 801d7e4:	685a      	ldr	r2, [r3, #4]
 801d7e6:	687b      	ldr	r3, [r7, #4]
 801d7e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d7ea:	687b      	ldr	r3, [r7, #4]
 801d7ec:	697a      	ldr	r2, [r7, #20]
 801d7ee:	621a      	str	r2, [r3, #32]
}
 801d7f0:	bf00      	nop
 801d7f2:	371c      	adds	r7, #28
 801d7f4:	46bd      	mov	sp, r7
 801d7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7fa:	4770      	bx	lr
 801d7fc:	40010000 	.word	0x40010000
 801d800:	40010400 	.word	0x40010400

0801d804 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d804:	b480      	push	{r7}
 801d806:	b087      	sub	sp, #28
 801d808:	af00      	add	r7, sp, #0
 801d80a:	6078      	str	r0, [r7, #4]
 801d80c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801d80e:	687b      	ldr	r3, [r7, #4]
 801d810:	6a1b      	ldr	r3, [r3, #32]
 801d812:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801d816:	687b      	ldr	r3, [r7, #4]
 801d818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d81a:	687b      	ldr	r3, [r7, #4]
 801d81c:	6a1b      	ldr	r3, [r3, #32]
 801d81e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d820:	687b      	ldr	r3, [r7, #4]
 801d822:	685b      	ldr	r3, [r3, #4]
 801d824:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801d826:	687b      	ldr	r3, [r7, #4]
 801d828:	69db      	ldr	r3, [r3, #28]
 801d82a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801d82c:	68fb      	ldr	r3, [r7, #12]
 801d82e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801d832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801d834:	68fb      	ldr	r3, [r7, #12]
 801d836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d83a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d83c:	683b      	ldr	r3, [r7, #0]
 801d83e:	681b      	ldr	r3, [r3, #0]
 801d840:	021b      	lsls	r3, r3, #8
 801d842:	68fa      	ldr	r2, [r7, #12]
 801d844:	4313      	orrs	r3, r2
 801d846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801d848:	693b      	ldr	r3, [r7, #16]
 801d84a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801d84e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801d850:	683b      	ldr	r3, [r7, #0]
 801d852:	689b      	ldr	r3, [r3, #8]
 801d854:	031b      	lsls	r3, r3, #12
 801d856:	693a      	ldr	r2, [r7, #16]
 801d858:	4313      	orrs	r3, r2
 801d85a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d85c:	687b      	ldr	r3, [r7, #4]
 801d85e:	4a12      	ldr	r2, [pc, #72]	; (801d8a8 <TIM_OC4_SetConfig+0xa4>)
 801d860:	4293      	cmp	r3, r2
 801d862:	d003      	beq.n	801d86c <TIM_OC4_SetConfig+0x68>
 801d864:	687b      	ldr	r3, [r7, #4]
 801d866:	4a11      	ldr	r2, [pc, #68]	; (801d8ac <TIM_OC4_SetConfig+0xa8>)
 801d868:	4293      	cmp	r3, r2
 801d86a:	d109      	bne.n	801d880 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801d86c:	697b      	ldr	r3, [r7, #20]
 801d86e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801d872:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801d874:	683b      	ldr	r3, [r7, #0]
 801d876:	695b      	ldr	r3, [r3, #20]
 801d878:	019b      	lsls	r3, r3, #6
 801d87a:	697a      	ldr	r2, [r7, #20]
 801d87c:	4313      	orrs	r3, r2
 801d87e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d880:	687b      	ldr	r3, [r7, #4]
 801d882:	697a      	ldr	r2, [r7, #20]
 801d884:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801d886:	687b      	ldr	r3, [r7, #4]
 801d888:	68fa      	ldr	r2, [r7, #12]
 801d88a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801d88c:	683b      	ldr	r3, [r7, #0]
 801d88e:	685a      	ldr	r2, [r3, #4]
 801d890:	687b      	ldr	r3, [r7, #4]
 801d892:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d894:	687b      	ldr	r3, [r7, #4]
 801d896:	693a      	ldr	r2, [r7, #16]
 801d898:	621a      	str	r2, [r3, #32]
}
 801d89a:	bf00      	nop
 801d89c:	371c      	adds	r7, #28
 801d89e:	46bd      	mov	sp, r7
 801d8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8a4:	4770      	bx	lr
 801d8a6:	bf00      	nop
 801d8a8:	40010000 	.word	0x40010000
 801d8ac:	40010400 	.word	0x40010400

0801d8b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801d8b0:	b480      	push	{r7}
 801d8b2:	b087      	sub	sp, #28
 801d8b4:	af00      	add	r7, sp, #0
 801d8b6:	60f8      	str	r0, [r7, #12]
 801d8b8:	60b9      	str	r1, [r7, #8]
 801d8ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801d8bc:	68fb      	ldr	r3, [r7, #12]
 801d8be:	6a1b      	ldr	r3, [r3, #32]
 801d8c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801d8c2:	68fb      	ldr	r3, [r7, #12]
 801d8c4:	6a1b      	ldr	r3, [r3, #32]
 801d8c6:	f023 0201 	bic.w	r2, r3, #1
 801d8ca:	68fb      	ldr	r3, [r7, #12]
 801d8cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801d8ce:	68fb      	ldr	r3, [r7, #12]
 801d8d0:	699b      	ldr	r3, [r3, #24]
 801d8d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801d8d4:	693b      	ldr	r3, [r7, #16]
 801d8d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801d8da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801d8dc:	687b      	ldr	r3, [r7, #4]
 801d8de:	011b      	lsls	r3, r3, #4
 801d8e0:	693a      	ldr	r2, [r7, #16]
 801d8e2:	4313      	orrs	r3, r2
 801d8e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801d8e6:	697b      	ldr	r3, [r7, #20]
 801d8e8:	f023 030a 	bic.w	r3, r3, #10
 801d8ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801d8ee:	697a      	ldr	r2, [r7, #20]
 801d8f0:	68bb      	ldr	r3, [r7, #8]
 801d8f2:	4313      	orrs	r3, r2
 801d8f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801d8f6:	68fb      	ldr	r3, [r7, #12]
 801d8f8:	693a      	ldr	r2, [r7, #16]
 801d8fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801d8fc:	68fb      	ldr	r3, [r7, #12]
 801d8fe:	697a      	ldr	r2, [r7, #20]
 801d900:	621a      	str	r2, [r3, #32]
}
 801d902:	bf00      	nop
 801d904:	371c      	adds	r7, #28
 801d906:	46bd      	mov	sp, r7
 801d908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d90c:	4770      	bx	lr

0801d90e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801d90e:	b480      	push	{r7}
 801d910:	b087      	sub	sp, #28
 801d912:	af00      	add	r7, sp, #0
 801d914:	60f8      	str	r0, [r7, #12]
 801d916:	60b9      	str	r1, [r7, #8]
 801d918:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801d91a:	68fb      	ldr	r3, [r7, #12]
 801d91c:	6a1b      	ldr	r3, [r3, #32]
 801d91e:	f023 0210 	bic.w	r2, r3, #16
 801d922:	68fb      	ldr	r3, [r7, #12]
 801d924:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801d926:	68fb      	ldr	r3, [r7, #12]
 801d928:	699b      	ldr	r3, [r3, #24]
 801d92a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801d92c:	68fb      	ldr	r3, [r7, #12]
 801d92e:	6a1b      	ldr	r3, [r3, #32]
 801d930:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801d932:	697b      	ldr	r3, [r7, #20]
 801d934:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801d938:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801d93a:	687b      	ldr	r3, [r7, #4]
 801d93c:	031b      	lsls	r3, r3, #12
 801d93e:	697a      	ldr	r2, [r7, #20]
 801d940:	4313      	orrs	r3, r2
 801d942:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801d944:	693b      	ldr	r3, [r7, #16]
 801d946:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801d94a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801d94c:	68bb      	ldr	r3, [r7, #8]
 801d94e:	011b      	lsls	r3, r3, #4
 801d950:	693a      	ldr	r2, [r7, #16]
 801d952:	4313      	orrs	r3, r2
 801d954:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801d956:	68fb      	ldr	r3, [r7, #12]
 801d958:	697a      	ldr	r2, [r7, #20]
 801d95a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801d95c:	68fb      	ldr	r3, [r7, #12]
 801d95e:	693a      	ldr	r2, [r7, #16]
 801d960:	621a      	str	r2, [r3, #32]
}
 801d962:	bf00      	nop
 801d964:	371c      	adds	r7, #28
 801d966:	46bd      	mov	sp, r7
 801d968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d96c:	4770      	bx	lr

0801d96e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801d96e:	b480      	push	{r7}
 801d970:	b085      	sub	sp, #20
 801d972:	af00      	add	r7, sp, #0
 801d974:	6078      	str	r0, [r7, #4]
 801d976:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801d978:	687b      	ldr	r3, [r7, #4]
 801d97a:	689b      	ldr	r3, [r3, #8]
 801d97c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801d97e:	68fb      	ldr	r3, [r7, #12]
 801d980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d984:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801d986:	683a      	ldr	r2, [r7, #0]
 801d988:	68fb      	ldr	r3, [r7, #12]
 801d98a:	4313      	orrs	r3, r2
 801d98c:	f043 0307 	orr.w	r3, r3, #7
 801d990:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801d992:	687b      	ldr	r3, [r7, #4]
 801d994:	68fa      	ldr	r2, [r7, #12]
 801d996:	609a      	str	r2, [r3, #8]
}
 801d998:	bf00      	nop
 801d99a:	3714      	adds	r7, #20
 801d99c:	46bd      	mov	sp, r7
 801d99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9a2:	4770      	bx	lr

0801d9a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801d9a4:	b480      	push	{r7}
 801d9a6:	b087      	sub	sp, #28
 801d9a8:	af00      	add	r7, sp, #0
 801d9aa:	60f8      	str	r0, [r7, #12]
 801d9ac:	60b9      	str	r1, [r7, #8]
 801d9ae:	607a      	str	r2, [r7, #4]
 801d9b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801d9b2:	68fb      	ldr	r3, [r7, #12]
 801d9b4:	689b      	ldr	r3, [r3, #8]
 801d9b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801d9b8:	697b      	ldr	r3, [r7, #20]
 801d9ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801d9be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801d9c0:	683b      	ldr	r3, [r7, #0]
 801d9c2:	021a      	lsls	r2, r3, #8
 801d9c4:	687b      	ldr	r3, [r7, #4]
 801d9c6:	431a      	orrs	r2, r3
 801d9c8:	68bb      	ldr	r3, [r7, #8]
 801d9ca:	4313      	orrs	r3, r2
 801d9cc:	697a      	ldr	r2, [r7, #20]
 801d9ce:	4313      	orrs	r3, r2
 801d9d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801d9d2:	68fb      	ldr	r3, [r7, #12]
 801d9d4:	697a      	ldr	r2, [r7, #20]
 801d9d6:	609a      	str	r2, [r3, #8]
}
 801d9d8:	bf00      	nop
 801d9da:	371c      	adds	r7, #28
 801d9dc:	46bd      	mov	sp, r7
 801d9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9e2:	4770      	bx	lr

0801d9e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801d9e4:	b480      	push	{r7}
 801d9e6:	b085      	sub	sp, #20
 801d9e8:	af00      	add	r7, sp, #0
 801d9ea:	6078      	str	r0, [r7, #4]
 801d9ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801d9ee:	687b      	ldr	r3, [r7, #4]
 801d9f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d9f4:	2b01      	cmp	r3, #1
 801d9f6:	d101      	bne.n	801d9fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801d9f8:	2302      	movs	r3, #2
 801d9fa:	e05a      	b.n	801dab2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 801d9fc:	687b      	ldr	r3, [r7, #4]
 801d9fe:	2201      	movs	r2, #1
 801da00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801da04:	687b      	ldr	r3, [r7, #4]
 801da06:	2202      	movs	r2, #2
 801da08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801da0c:	687b      	ldr	r3, [r7, #4]
 801da0e:	681b      	ldr	r3, [r3, #0]
 801da10:	685b      	ldr	r3, [r3, #4]
 801da12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801da14:	687b      	ldr	r3, [r7, #4]
 801da16:	681b      	ldr	r3, [r3, #0]
 801da18:	689b      	ldr	r3, [r3, #8]
 801da1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801da1c:	68fb      	ldr	r3, [r7, #12]
 801da1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801da22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801da24:	683b      	ldr	r3, [r7, #0]
 801da26:	681b      	ldr	r3, [r3, #0]
 801da28:	68fa      	ldr	r2, [r7, #12]
 801da2a:	4313      	orrs	r3, r2
 801da2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801da2e:	687b      	ldr	r3, [r7, #4]
 801da30:	681b      	ldr	r3, [r3, #0]
 801da32:	68fa      	ldr	r2, [r7, #12]
 801da34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801da36:	687b      	ldr	r3, [r7, #4]
 801da38:	681b      	ldr	r3, [r3, #0]
 801da3a:	4a21      	ldr	r2, [pc, #132]	; (801dac0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 801da3c:	4293      	cmp	r3, r2
 801da3e:	d022      	beq.n	801da86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801da40:	687b      	ldr	r3, [r7, #4]
 801da42:	681b      	ldr	r3, [r3, #0]
 801da44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801da48:	d01d      	beq.n	801da86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801da4a:	687b      	ldr	r3, [r7, #4]
 801da4c:	681b      	ldr	r3, [r3, #0]
 801da4e:	4a1d      	ldr	r2, [pc, #116]	; (801dac4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 801da50:	4293      	cmp	r3, r2
 801da52:	d018      	beq.n	801da86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801da54:	687b      	ldr	r3, [r7, #4]
 801da56:	681b      	ldr	r3, [r3, #0]
 801da58:	4a1b      	ldr	r2, [pc, #108]	; (801dac8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801da5a:	4293      	cmp	r3, r2
 801da5c:	d013      	beq.n	801da86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801da5e:	687b      	ldr	r3, [r7, #4]
 801da60:	681b      	ldr	r3, [r3, #0]
 801da62:	4a1a      	ldr	r2, [pc, #104]	; (801dacc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 801da64:	4293      	cmp	r3, r2
 801da66:	d00e      	beq.n	801da86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801da68:	687b      	ldr	r3, [r7, #4]
 801da6a:	681b      	ldr	r3, [r3, #0]
 801da6c:	4a18      	ldr	r2, [pc, #96]	; (801dad0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801da6e:	4293      	cmp	r3, r2
 801da70:	d009      	beq.n	801da86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801da72:	687b      	ldr	r3, [r7, #4]
 801da74:	681b      	ldr	r3, [r3, #0]
 801da76:	4a17      	ldr	r2, [pc, #92]	; (801dad4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 801da78:	4293      	cmp	r3, r2
 801da7a:	d004      	beq.n	801da86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801da7c:	687b      	ldr	r3, [r7, #4]
 801da7e:	681b      	ldr	r3, [r3, #0]
 801da80:	4a15      	ldr	r2, [pc, #84]	; (801dad8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 801da82:	4293      	cmp	r3, r2
 801da84:	d10c      	bne.n	801daa0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801da86:	68bb      	ldr	r3, [r7, #8]
 801da88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801da8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801da8e:	683b      	ldr	r3, [r7, #0]
 801da90:	685b      	ldr	r3, [r3, #4]
 801da92:	68ba      	ldr	r2, [r7, #8]
 801da94:	4313      	orrs	r3, r2
 801da96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801da98:	687b      	ldr	r3, [r7, #4]
 801da9a:	681b      	ldr	r3, [r3, #0]
 801da9c:	68ba      	ldr	r2, [r7, #8]
 801da9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801daa0:	687b      	ldr	r3, [r7, #4]
 801daa2:	2201      	movs	r2, #1
 801daa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801daa8:	687b      	ldr	r3, [r7, #4]
 801daaa:	2200      	movs	r2, #0
 801daac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801dab0:	2300      	movs	r3, #0
}
 801dab2:	4618      	mov	r0, r3
 801dab4:	3714      	adds	r7, #20
 801dab6:	46bd      	mov	sp, r7
 801dab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dabc:	4770      	bx	lr
 801dabe:	bf00      	nop
 801dac0:	40010000 	.word	0x40010000
 801dac4:	40000400 	.word	0x40000400
 801dac8:	40000800 	.word	0x40000800
 801dacc:	40000c00 	.word	0x40000c00
 801dad0:	40010400 	.word	0x40010400
 801dad4:	40014000 	.word	0x40014000
 801dad8:	40001800 	.word	0x40001800

0801dadc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801dadc:	b480      	push	{r7}
 801dade:	b083      	sub	sp, #12
 801dae0:	af00      	add	r7, sp, #0
 801dae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801dae4:	bf00      	nop
 801dae6:	370c      	adds	r7, #12
 801dae8:	46bd      	mov	sp, r7
 801daea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801daee:	4770      	bx	lr

0801daf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801daf0:	b480      	push	{r7}
 801daf2:	b083      	sub	sp, #12
 801daf4:	af00      	add	r7, sp, #0
 801daf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801daf8:	bf00      	nop
 801dafa:	370c      	adds	r7, #12
 801dafc:	46bd      	mov	sp, r7
 801dafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db02:	4770      	bx	lr

0801db04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801db04:	b084      	sub	sp, #16
 801db06:	b580      	push	{r7, lr}
 801db08:	b084      	sub	sp, #16
 801db0a:	af00      	add	r7, sp, #0
 801db0c:	6078      	str	r0, [r7, #4]
 801db0e:	f107 001c 	add.w	r0, r7, #28
 801db12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801db16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801db18:	2b01      	cmp	r3, #1
 801db1a:	d122      	bne.n	801db62 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801db1c:	687b      	ldr	r3, [r7, #4]
 801db1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801db20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801db24:	687b      	ldr	r3, [r7, #4]
 801db26:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801db28:	687b      	ldr	r3, [r7, #4]
 801db2a:	68db      	ldr	r3, [r3, #12]
 801db2c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 801db30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801db34:	687a      	ldr	r2, [r7, #4]
 801db36:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801db38:	687b      	ldr	r3, [r7, #4]
 801db3a:	68db      	ldr	r3, [r3, #12]
 801db3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801db40:	687b      	ldr	r3, [r7, #4]
 801db42:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801db44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801db46:	2b01      	cmp	r3, #1
 801db48:	d105      	bne.n	801db56 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801db4a:	687b      	ldr	r3, [r7, #4]
 801db4c:	68db      	ldr	r3, [r3, #12]
 801db4e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801db52:	687b      	ldr	r3, [r7, #4]
 801db54:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801db56:	6878      	ldr	r0, [r7, #4]
 801db58:	f001 fb16 	bl	801f188 <USB_CoreReset>
 801db5c:	4603      	mov	r3, r0
 801db5e:	73fb      	strb	r3, [r7, #15]
 801db60:	e01a      	b.n	801db98 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801db62:	687b      	ldr	r3, [r7, #4]
 801db64:	68db      	ldr	r3, [r3, #12]
 801db66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801db6a:	687b      	ldr	r3, [r7, #4]
 801db6c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801db6e:	6878      	ldr	r0, [r7, #4]
 801db70:	f001 fb0a 	bl	801f188 <USB_CoreReset>
 801db74:	4603      	mov	r3, r0
 801db76:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801db78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801db7a:	2b00      	cmp	r3, #0
 801db7c:	d106      	bne.n	801db8c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801db7e:	687b      	ldr	r3, [r7, #4]
 801db80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801db82:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801db86:	687b      	ldr	r3, [r7, #4]
 801db88:	639a      	str	r2, [r3, #56]	; 0x38
 801db8a:	e005      	b.n	801db98 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801db8c:	687b      	ldr	r3, [r7, #4]
 801db8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801db90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801db94:	687b      	ldr	r3, [r7, #4]
 801db96:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801db98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801db9a:	2b01      	cmp	r3, #1
 801db9c:	d10b      	bne.n	801dbb6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801db9e:	687b      	ldr	r3, [r7, #4]
 801dba0:	689b      	ldr	r3, [r3, #8]
 801dba2:	f043 0206 	orr.w	r2, r3, #6
 801dba6:	687b      	ldr	r3, [r7, #4]
 801dba8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801dbaa:	687b      	ldr	r3, [r7, #4]
 801dbac:	689b      	ldr	r3, [r3, #8]
 801dbae:	f043 0220 	orr.w	r2, r3, #32
 801dbb2:	687b      	ldr	r3, [r7, #4]
 801dbb4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801dbb6:	7bfb      	ldrb	r3, [r7, #15]
}
 801dbb8:	4618      	mov	r0, r3
 801dbba:	3710      	adds	r7, #16
 801dbbc:	46bd      	mov	sp, r7
 801dbbe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801dbc2:	b004      	add	sp, #16
 801dbc4:	4770      	bx	lr
	...

0801dbc8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801dbc8:	b480      	push	{r7}
 801dbca:	b087      	sub	sp, #28
 801dbcc:	af00      	add	r7, sp, #0
 801dbce:	60f8      	str	r0, [r7, #12]
 801dbd0:	60b9      	str	r1, [r7, #8]
 801dbd2:	4613      	mov	r3, r2
 801dbd4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801dbd6:	79fb      	ldrb	r3, [r7, #7]
 801dbd8:	2b02      	cmp	r3, #2
 801dbda:	d165      	bne.n	801dca8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801dbdc:	68bb      	ldr	r3, [r7, #8]
 801dbde:	4a41      	ldr	r2, [pc, #260]	; (801dce4 <USB_SetTurnaroundTime+0x11c>)
 801dbe0:	4293      	cmp	r3, r2
 801dbe2:	d906      	bls.n	801dbf2 <USB_SetTurnaroundTime+0x2a>
 801dbe4:	68bb      	ldr	r3, [r7, #8]
 801dbe6:	4a40      	ldr	r2, [pc, #256]	; (801dce8 <USB_SetTurnaroundTime+0x120>)
 801dbe8:	4293      	cmp	r3, r2
 801dbea:	d202      	bcs.n	801dbf2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801dbec:	230f      	movs	r3, #15
 801dbee:	617b      	str	r3, [r7, #20]
 801dbf0:	e062      	b.n	801dcb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801dbf2:	68bb      	ldr	r3, [r7, #8]
 801dbf4:	4a3c      	ldr	r2, [pc, #240]	; (801dce8 <USB_SetTurnaroundTime+0x120>)
 801dbf6:	4293      	cmp	r3, r2
 801dbf8:	d306      	bcc.n	801dc08 <USB_SetTurnaroundTime+0x40>
 801dbfa:	68bb      	ldr	r3, [r7, #8]
 801dbfc:	4a3b      	ldr	r2, [pc, #236]	; (801dcec <USB_SetTurnaroundTime+0x124>)
 801dbfe:	4293      	cmp	r3, r2
 801dc00:	d202      	bcs.n	801dc08 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801dc02:	230e      	movs	r3, #14
 801dc04:	617b      	str	r3, [r7, #20]
 801dc06:	e057      	b.n	801dcb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801dc08:	68bb      	ldr	r3, [r7, #8]
 801dc0a:	4a38      	ldr	r2, [pc, #224]	; (801dcec <USB_SetTurnaroundTime+0x124>)
 801dc0c:	4293      	cmp	r3, r2
 801dc0e:	d306      	bcc.n	801dc1e <USB_SetTurnaroundTime+0x56>
 801dc10:	68bb      	ldr	r3, [r7, #8]
 801dc12:	4a37      	ldr	r2, [pc, #220]	; (801dcf0 <USB_SetTurnaroundTime+0x128>)
 801dc14:	4293      	cmp	r3, r2
 801dc16:	d202      	bcs.n	801dc1e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801dc18:	230d      	movs	r3, #13
 801dc1a:	617b      	str	r3, [r7, #20]
 801dc1c:	e04c      	b.n	801dcb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801dc1e:	68bb      	ldr	r3, [r7, #8]
 801dc20:	4a33      	ldr	r2, [pc, #204]	; (801dcf0 <USB_SetTurnaroundTime+0x128>)
 801dc22:	4293      	cmp	r3, r2
 801dc24:	d306      	bcc.n	801dc34 <USB_SetTurnaroundTime+0x6c>
 801dc26:	68bb      	ldr	r3, [r7, #8]
 801dc28:	4a32      	ldr	r2, [pc, #200]	; (801dcf4 <USB_SetTurnaroundTime+0x12c>)
 801dc2a:	4293      	cmp	r3, r2
 801dc2c:	d802      	bhi.n	801dc34 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801dc2e:	230c      	movs	r3, #12
 801dc30:	617b      	str	r3, [r7, #20]
 801dc32:	e041      	b.n	801dcb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 801dc34:	68bb      	ldr	r3, [r7, #8]
 801dc36:	4a2f      	ldr	r2, [pc, #188]	; (801dcf4 <USB_SetTurnaroundTime+0x12c>)
 801dc38:	4293      	cmp	r3, r2
 801dc3a:	d906      	bls.n	801dc4a <USB_SetTurnaroundTime+0x82>
 801dc3c:	68bb      	ldr	r3, [r7, #8]
 801dc3e:	4a2e      	ldr	r2, [pc, #184]	; (801dcf8 <USB_SetTurnaroundTime+0x130>)
 801dc40:	4293      	cmp	r3, r2
 801dc42:	d802      	bhi.n	801dc4a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 801dc44:	230b      	movs	r3, #11
 801dc46:	617b      	str	r3, [r7, #20]
 801dc48:	e036      	b.n	801dcb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801dc4a:	68bb      	ldr	r3, [r7, #8]
 801dc4c:	4a2a      	ldr	r2, [pc, #168]	; (801dcf8 <USB_SetTurnaroundTime+0x130>)
 801dc4e:	4293      	cmp	r3, r2
 801dc50:	d906      	bls.n	801dc60 <USB_SetTurnaroundTime+0x98>
 801dc52:	68bb      	ldr	r3, [r7, #8]
 801dc54:	4a29      	ldr	r2, [pc, #164]	; (801dcfc <USB_SetTurnaroundTime+0x134>)
 801dc56:	4293      	cmp	r3, r2
 801dc58:	d802      	bhi.n	801dc60 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801dc5a:	230a      	movs	r3, #10
 801dc5c:	617b      	str	r3, [r7, #20]
 801dc5e:	e02b      	b.n	801dcb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801dc60:	68bb      	ldr	r3, [r7, #8]
 801dc62:	4a26      	ldr	r2, [pc, #152]	; (801dcfc <USB_SetTurnaroundTime+0x134>)
 801dc64:	4293      	cmp	r3, r2
 801dc66:	d906      	bls.n	801dc76 <USB_SetTurnaroundTime+0xae>
 801dc68:	68bb      	ldr	r3, [r7, #8]
 801dc6a:	4a25      	ldr	r2, [pc, #148]	; (801dd00 <USB_SetTurnaroundTime+0x138>)
 801dc6c:	4293      	cmp	r3, r2
 801dc6e:	d202      	bcs.n	801dc76 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801dc70:	2309      	movs	r3, #9
 801dc72:	617b      	str	r3, [r7, #20]
 801dc74:	e020      	b.n	801dcb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801dc76:	68bb      	ldr	r3, [r7, #8]
 801dc78:	4a21      	ldr	r2, [pc, #132]	; (801dd00 <USB_SetTurnaroundTime+0x138>)
 801dc7a:	4293      	cmp	r3, r2
 801dc7c:	d306      	bcc.n	801dc8c <USB_SetTurnaroundTime+0xc4>
 801dc7e:	68bb      	ldr	r3, [r7, #8]
 801dc80:	4a20      	ldr	r2, [pc, #128]	; (801dd04 <USB_SetTurnaroundTime+0x13c>)
 801dc82:	4293      	cmp	r3, r2
 801dc84:	d802      	bhi.n	801dc8c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801dc86:	2308      	movs	r3, #8
 801dc88:	617b      	str	r3, [r7, #20]
 801dc8a:	e015      	b.n	801dcb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801dc8c:	68bb      	ldr	r3, [r7, #8]
 801dc8e:	4a1d      	ldr	r2, [pc, #116]	; (801dd04 <USB_SetTurnaroundTime+0x13c>)
 801dc90:	4293      	cmp	r3, r2
 801dc92:	d906      	bls.n	801dca2 <USB_SetTurnaroundTime+0xda>
 801dc94:	68bb      	ldr	r3, [r7, #8]
 801dc96:	4a1c      	ldr	r2, [pc, #112]	; (801dd08 <USB_SetTurnaroundTime+0x140>)
 801dc98:	4293      	cmp	r3, r2
 801dc9a:	d202      	bcs.n	801dca2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 801dc9c:	2307      	movs	r3, #7
 801dc9e:	617b      	str	r3, [r7, #20]
 801dca0:	e00a      	b.n	801dcb8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801dca2:	2306      	movs	r3, #6
 801dca4:	617b      	str	r3, [r7, #20]
 801dca6:	e007      	b.n	801dcb8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 801dca8:	79fb      	ldrb	r3, [r7, #7]
 801dcaa:	2b00      	cmp	r3, #0
 801dcac:	d102      	bne.n	801dcb4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801dcae:	2309      	movs	r3, #9
 801dcb0:	617b      	str	r3, [r7, #20]
 801dcb2:	e001      	b.n	801dcb8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 801dcb4:	2309      	movs	r3, #9
 801dcb6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801dcb8:	68fb      	ldr	r3, [r7, #12]
 801dcba:	68db      	ldr	r3, [r3, #12]
 801dcbc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 801dcc0:	68fb      	ldr	r3, [r7, #12]
 801dcc2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 801dcc4:	68fb      	ldr	r3, [r7, #12]
 801dcc6:	68da      	ldr	r2, [r3, #12]
 801dcc8:	697b      	ldr	r3, [r7, #20]
 801dcca:	029b      	lsls	r3, r3, #10
 801dccc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 801dcd0:	431a      	orrs	r2, r3
 801dcd2:	68fb      	ldr	r3, [r7, #12]
 801dcd4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801dcd6:	2300      	movs	r3, #0
}
 801dcd8:	4618      	mov	r0, r3
 801dcda:	371c      	adds	r7, #28
 801dcdc:	46bd      	mov	sp, r7
 801dcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dce2:	4770      	bx	lr
 801dce4:	00d8acbf 	.word	0x00d8acbf
 801dce8:	00e4e1c0 	.word	0x00e4e1c0
 801dcec:	00f42400 	.word	0x00f42400
 801dcf0:	01067380 	.word	0x01067380
 801dcf4:	011a499f 	.word	0x011a499f
 801dcf8:	01312cff 	.word	0x01312cff
 801dcfc:	014ca43f 	.word	0x014ca43f
 801dd00:	016e3600 	.word	0x016e3600
 801dd04:	01a6ab1f 	.word	0x01a6ab1f
 801dd08:	01e84800 	.word	0x01e84800

0801dd0c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801dd0c:	b480      	push	{r7}
 801dd0e:	b083      	sub	sp, #12
 801dd10:	af00      	add	r7, sp, #0
 801dd12:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801dd14:	687b      	ldr	r3, [r7, #4]
 801dd16:	689b      	ldr	r3, [r3, #8]
 801dd18:	f043 0201 	orr.w	r2, r3, #1
 801dd1c:	687b      	ldr	r3, [r7, #4]
 801dd1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801dd20:	2300      	movs	r3, #0
}
 801dd22:	4618      	mov	r0, r3
 801dd24:	370c      	adds	r7, #12
 801dd26:	46bd      	mov	sp, r7
 801dd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd2c:	4770      	bx	lr

0801dd2e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801dd2e:	b480      	push	{r7}
 801dd30:	b083      	sub	sp, #12
 801dd32:	af00      	add	r7, sp, #0
 801dd34:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801dd36:	687b      	ldr	r3, [r7, #4]
 801dd38:	689b      	ldr	r3, [r3, #8]
 801dd3a:	f023 0201 	bic.w	r2, r3, #1
 801dd3e:	687b      	ldr	r3, [r7, #4]
 801dd40:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801dd42:	2300      	movs	r3, #0
}
 801dd44:	4618      	mov	r0, r3
 801dd46:	370c      	adds	r7, #12
 801dd48:	46bd      	mov	sp, r7
 801dd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd4e:	4770      	bx	lr

0801dd50 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801dd50:	b580      	push	{r7, lr}
 801dd52:	b084      	sub	sp, #16
 801dd54:	af00      	add	r7, sp, #0
 801dd56:	6078      	str	r0, [r7, #4]
 801dd58:	460b      	mov	r3, r1
 801dd5a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801dd5c:	2300      	movs	r3, #0
 801dd5e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801dd60:	687b      	ldr	r3, [r7, #4]
 801dd62:	68db      	ldr	r3, [r3, #12]
 801dd64:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 801dd68:	687b      	ldr	r3, [r7, #4]
 801dd6a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801dd6c:	78fb      	ldrb	r3, [r7, #3]
 801dd6e:	2b01      	cmp	r3, #1
 801dd70:	d115      	bne.n	801dd9e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801dd72:	687b      	ldr	r3, [r7, #4]
 801dd74:	68db      	ldr	r3, [r3, #12]
 801dd76:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801dd7a:	687b      	ldr	r3, [r7, #4]
 801dd7c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801dd7e:	2001      	movs	r0, #1
 801dd80:	f7fa fb04 	bl	801838c <HAL_Delay>
      ms++;
 801dd84:	68fb      	ldr	r3, [r7, #12]
 801dd86:	3301      	adds	r3, #1
 801dd88:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801dd8a:	6878      	ldr	r0, [r7, #4]
 801dd8c:	f001 f96c 	bl	801f068 <USB_GetMode>
 801dd90:	4603      	mov	r3, r0
 801dd92:	2b01      	cmp	r3, #1
 801dd94:	d01e      	beq.n	801ddd4 <USB_SetCurrentMode+0x84>
 801dd96:	68fb      	ldr	r3, [r7, #12]
 801dd98:	2b31      	cmp	r3, #49	; 0x31
 801dd9a:	d9f0      	bls.n	801dd7e <USB_SetCurrentMode+0x2e>
 801dd9c:	e01a      	b.n	801ddd4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801dd9e:	78fb      	ldrb	r3, [r7, #3]
 801dda0:	2b00      	cmp	r3, #0
 801dda2:	d115      	bne.n	801ddd0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801dda4:	687b      	ldr	r3, [r7, #4]
 801dda6:	68db      	ldr	r3, [r3, #12]
 801dda8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801ddac:	687b      	ldr	r3, [r7, #4]
 801ddae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801ddb0:	2001      	movs	r0, #1
 801ddb2:	f7fa faeb 	bl	801838c <HAL_Delay>
      ms++;
 801ddb6:	68fb      	ldr	r3, [r7, #12]
 801ddb8:	3301      	adds	r3, #1
 801ddba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 801ddbc:	6878      	ldr	r0, [r7, #4]
 801ddbe:	f001 f953 	bl	801f068 <USB_GetMode>
 801ddc2:	4603      	mov	r3, r0
 801ddc4:	2b00      	cmp	r3, #0
 801ddc6:	d005      	beq.n	801ddd4 <USB_SetCurrentMode+0x84>
 801ddc8:	68fb      	ldr	r3, [r7, #12]
 801ddca:	2b31      	cmp	r3, #49	; 0x31
 801ddcc:	d9f0      	bls.n	801ddb0 <USB_SetCurrentMode+0x60>
 801ddce:	e001      	b.n	801ddd4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801ddd0:	2301      	movs	r3, #1
 801ddd2:	e005      	b.n	801dde0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 801ddd4:	68fb      	ldr	r3, [r7, #12]
 801ddd6:	2b32      	cmp	r3, #50	; 0x32
 801ddd8:	d101      	bne.n	801ddde <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801ddda:	2301      	movs	r3, #1
 801dddc:	e000      	b.n	801dde0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801ddde:	2300      	movs	r3, #0
}
 801dde0:	4618      	mov	r0, r3
 801dde2:	3710      	adds	r7, #16
 801dde4:	46bd      	mov	sp, r7
 801dde6:	bd80      	pop	{r7, pc}

0801dde8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801dde8:	b084      	sub	sp, #16
 801ddea:	b580      	push	{r7, lr}
 801ddec:	b086      	sub	sp, #24
 801ddee:	af00      	add	r7, sp, #0
 801ddf0:	6078      	str	r0, [r7, #4]
 801ddf2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801ddf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801ddfa:	2300      	movs	r3, #0
 801ddfc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ddfe:	687b      	ldr	r3, [r7, #4]
 801de00:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801de02:	2300      	movs	r3, #0
 801de04:	613b      	str	r3, [r7, #16]
 801de06:	e009      	b.n	801de1c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801de08:	687a      	ldr	r2, [r7, #4]
 801de0a:	693b      	ldr	r3, [r7, #16]
 801de0c:	3340      	adds	r3, #64	; 0x40
 801de0e:	009b      	lsls	r3, r3, #2
 801de10:	4413      	add	r3, r2
 801de12:	2200      	movs	r2, #0
 801de14:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801de16:	693b      	ldr	r3, [r7, #16]
 801de18:	3301      	adds	r3, #1
 801de1a:	613b      	str	r3, [r7, #16]
 801de1c:	693b      	ldr	r3, [r7, #16]
 801de1e:	2b0e      	cmp	r3, #14
 801de20:	d9f2      	bls.n	801de08 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801de22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801de24:	2b00      	cmp	r3, #0
 801de26:	d11c      	bne.n	801de62 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801de28:	68fb      	ldr	r3, [r7, #12]
 801de2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801de2e:	685b      	ldr	r3, [r3, #4]
 801de30:	68fa      	ldr	r2, [r7, #12]
 801de32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801de36:	f043 0302 	orr.w	r3, r3, #2
 801de3a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801de3c:	687b      	ldr	r3, [r7, #4]
 801de3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801de40:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801de44:	687b      	ldr	r3, [r7, #4]
 801de46:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801de48:	687b      	ldr	r3, [r7, #4]
 801de4a:	681b      	ldr	r3, [r3, #0]
 801de4c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801de50:	687b      	ldr	r3, [r7, #4]
 801de52:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801de54:	687b      	ldr	r3, [r7, #4]
 801de56:	681b      	ldr	r3, [r3, #0]
 801de58:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801de5c:	687b      	ldr	r3, [r7, #4]
 801de5e:	601a      	str	r2, [r3, #0]
 801de60:	e005      	b.n	801de6e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801de62:	687b      	ldr	r3, [r7, #4]
 801de64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801de66:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801de6a:	687b      	ldr	r3, [r7, #4]
 801de6c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801de6e:	68fb      	ldr	r3, [r7, #12]
 801de70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801de74:	461a      	mov	r2, r3
 801de76:	2300      	movs	r3, #0
 801de78:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801de7a:	68fb      	ldr	r3, [r7, #12]
 801de7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801de80:	4619      	mov	r1, r3
 801de82:	68fb      	ldr	r3, [r7, #12]
 801de84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801de88:	461a      	mov	r2, r3
 801de8a:	680b      	ldr	r3, [r1, #0]
 801de8c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801de8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801de90:	2b01      	cmp	r3, #1
 801de92:	d10c      	bne.n	801deae <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 801de94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801de96:	2b00      	cmp	r3, #0
 801de98:	d104      	bne.n	801dea4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801de9a:	2100      	movs	r1, #0
 801de9c:	6878      	ldr	r0, [r7, #4]
 801de9e:	f000 f945 	bl	801e12c <USB_SetDevSpeed>
 801dea2:	e008      	b.n	801deb6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801dea4:	2101      	movs	r1, #1
 801dea6:	6878      	ldr	r0, [r7, #4]
 801dea8:	f000 f940 	bl	801e12c <USB_SetDevSpeed>
 801deac:	e003      	b.n	801deb6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801deae:	2103      	movs	r1, #3
 801deb0:	6878      	ldr	r0, [r7, #4]
 801deb2:	f000 f93b 	bl	801e12c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801deb6:	2110      	movs	r1, #16
 801deb8:	6878      	ldr	r0, [r7, #4]
 801deba:	f000 f8f3 	bl	801e0a4 <USB_FlushTxFifo>
 801debe:	4603      	mov	r3, r0
 801dec0:	2b00      	cmp	r3, #0
 801dec2:	d001      	beq.n	801dec8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 801dec4:	2301      	movs	r3, #1
 801dec6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801dec8:	6878      	ldr	r0, [r7, #4]
 801deca:	f000 f90f 	bl	801e0ec <USB_FlushRxFifo>
 801dece:	4603      	mov	r3, r0
 801ded0:	2b00      	cmp	r3, #0
 801ded2:	d001      	beq.n	801ded8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 801ded4:	2301      	movs	r3, #1
 801ded6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801ded8:	68fb      	ldr	r3, [r7, #12]
 801deda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801dede:	461a      	mov	r2, r3
 801dee0:	2300      	movs	r3, #0
 801dee2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801dee4:	68fb      	ldr	r3, [r7, #12]
 801dee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801deea:	461a      	mov	r2, r3
 801deec:	2300      	movs	r3, #0
 801deee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801def0:	68fb      	ldr	r3, [r7, #12]
 801def2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801def6:	461a      	mov	r2, r3
 801def8:	2300      	movs	r3, #0
 801defa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801defc:	2300      	movs	r3, #0
 801defe:	613b      	str	r3, [r7, #16]
 801df00:	e043      	b.n	801df8a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801df02:	693b      	ldr	r3, [r7, #16]
 801df04:	015a      	lsls	r2, r3, #5
 801df06:	68fb      	ldr	r3, [r7, #12]
 801df08:	4413      	add	r3, r2
 801df0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801df0e:	681b      	ldr	r3, [r3, #0]
 801df10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801df14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801df18:	d118      	bne.n	801df4c <USB_DevInit+0x164>
    {
      if (i == 0U)
 801df1a:	693b      	ldr	r3, [r7, #16]
 801df1c:	2b00      	cmp	r3, #0
 801df1e:	d10a      	bne.n	801df36 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801df20:	693b      	ldr	r3, [r7, #16]
 801df22:	015a      	lsls	r2, r3, #5
 801df24:	68fb      	ldr	r3, [r7, #12]
 801df26:	4413      	add	r3, r2
 801df28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801df2c:	461a      	mov	r2, r3
 801df2e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801df32:	6013      	str	r3, [r2, #0]
 801df34:	e013      	b.n	801df5e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801df36:	693b      	ldr	r3, [r7, #16]
 801df38:	015a      	lsls	r2, r3, #5
 801df3a:	68fb      	ldr	r3, [r7, #12]
 801df3c:	4413      	add	r3, r2
 801df3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801df42:	461a      	mov	r2, r3
 801df44:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801df48:	6013      	str	r3, [r2, #0]
 801df4a:	e008      	b.n	801df5e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801df4c:	693b      	ldr	r3, [r7, #16]
 801df4e:	015a      	lsls	r2, r3, #5
 801df50:	68fb      	ldr	r3, [r7, #12]
 801df52:	4413      	add	r3, r2
 801df54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801df58:	461a      	mov	r2, r3
 801df5a:	2300      	movs	r3, #0
 801df5c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801df5e:	693b      	ldr	r3, [r7, #16]
 801df60:	015a      	lsls	r2, r3, #5
 801df62:	68fb      	ldr	r3, [r7, #12]
 801df64:	4413      	add	r3, r2
 801df66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801df6a:	461a      	mov	r2, r3
 801df6c:	2300      	movs	r3, #0
 801df6e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801df70:	693b      	ldr	r3, [r7, #16]
 801df72:	015a      	lsls	r2, r3, #5
 801df74:	68fb      	ldr	r3, [r7, #12]
 801df76:	4413      	add	r3, r2
 801df78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801df7c:	461a      	mov	r2, r3
 801df7e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801df82:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801df84:	693b      	ldr	r3, [r7, #16]
 801df86:	3301      	adds	r3, #1
 801df88:	613b      	str	r3, [r7, #16]
 801df8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df8c:	693a      	ldr	r2, [r7, #16]
 801df8e:	429a      	cmp	r2, r3
 801df90:	d3b7      	bcc.n	801df02 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801df92:	2300      	movs	r3, #0
 801df94:	613b      	str	r3, [r7, #16]
 801df96:	e043      	b.n	801e020 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801df98:	693b      	ldr	r3, [r7, #16]
 801df9a:	015a      	lsls	r2, r3, #5
 801df9c:	68fb      	ldr	r3, [r7, #12]
 801df9e:	4413      	add	r3, r2
 801dfa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801dfa4:	681b      	ldr	r3, [r3, #0]
 801dfa6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801dfaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801dfae:	d118      	bne.n	801dfe2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 801dfb0:	693b      	ldr	r3, [r7, #16]
 801dfb2:	2b00      	cmp	r3, #0
 801dfb4:	d10a      	bne.n	801dfcc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801dfb6:	693b      	ldr	r3, [r7, #16]
 801dfb8:	015a      	lsls	r2, r3, #5
 801dfba:	68fb      	ldr	r3, [r7, #12]
 801dfbc:	4413      	add	r3, r2
 801dfbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801dfc2:	461a      	mov	r2, r3
 801dfc4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801dfc8:	6013      	str	r3, [r2, #0]
 801dfca:	e013      	b.n	801dff4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801dfcc:	693b      	ldr	r3, [r7, #16]
 801dfce:	015a      	lsls	r2, r3, #5
 801dfd0:	68fb      	ldr	r3, [r7, #12]
 801dfd2:	4413      	add	r3, r2
 801dfd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801dfd8:	461a      	mov	r2, r3
 801dfda:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801dfde:	6013      	str	r3, [r2, #0]
 801dfe0:	e008      	b.n	801dff4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801dfe2:	693b      	ldr	r3, [r7, #16]
 801dfe4:	015a      	lsls	r2, r3, #5
 801dfe6:	68fb      	ldr	r3, [r7, #12]
 801dfe8:	4413      	add	r3, r2
 801dfea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801dfee:	461a      	mov	r2, r3
 801dff0:	2300      	movs	r3, #0
 801dff2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801dff4:	693b      	ldr	r3, [r7, #16]
 801dff6:	015a      	lsls	r2, r3, #5
 801dff8:	68fb      	ldr	r3, [r7, #12]
 801dffa:	4413      	add	r3, r2
 801dffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e000:	461a      	mov	r2, r3
 801e002:	2300      	movs	r3, #0
 801e004:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801e006:	693b      	ldr	r3, [r7, #16]
 801e008:	015a      	lsls	r2, r3, #5
 801e00a:	68fb      	ldr	r3, [r7, #12]
 801e00c:	4413      	add	r3, r2
 801e00e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e012:	461a      	mov	r2, r3
 801e014:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801e018:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801e01a:	693b      	ldr	r3, [r7, #16]
 801e01c:	3301      	adds	r3, #1
 801e01e:	613b      	str	r3, [r7, #16]
 801e020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e022:	693a      	ldr	r2, [r7, #16]
 801e024:	429a      	cmp	r2, r3
 801e026:	d3b7      	bcc.n	801df98 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801e028:	68fb      	ldr	r3, [r7, #12]
 801e02a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e02e:	691b      	ldr	r3, [r3, #16]
 801e030:	68fa      	ldr	r2, [r7, #12]
 801e032:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801e036:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801e03a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801e03c:	687b      	ldr	r3, [r7, #4]
 801e03e:	2200      	movs	r2, #0
 801e040:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801e042:	687b      	ldr	r3, [r7, #4]
 801e044:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801e048:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801e04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e04c:	2b00      	cmp	r3, #0
 801e04e:	d105      	bne.n	801e05c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801e050:	687b      	ldr	r3, [r7, #4]
 801e052:	699b      	ldr	r3, [r3, #24]
 801e054:	f043 0210 	orr.w	r2, r3, #16
 801e058:	687b      	ldr	r3, [r7, #4]
 801e05a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801e05c:	687b      	ldr	r3, [r7, #4]
 801e05e:	699a      	ldr	r2, [r3, #24]
 801e060:	4b0f      	ldr	r3, [pc, #60]	; (801e0a0 <USB_DevInit+0x2b8>)
 801e062:	4313      	orrs	r3, r2
 801e064:	687a      	ldr	r2, [r7, #4]
 801e066:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801e068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e06a:	2b00      	cmp	r3, #0
 801e06c:	d005      	beq.n	801e07a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801e06e:	687b      	ldr	r3, [r7, #4]
 801e070:	699b      	ldr	r3, [r3, #24]
 801e072:	f043 0208 	orr.w	r2, r3, #8
 801e076:	687b      	ldr	r3, [r7, #4]
 801e078:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801e07a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e07c:	2b01      	cmp	r3, #1
 801e07e:	d107      	bne.n	801e090 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801e080:	687b      	ldr	r3, [r7, #4]
 801e082:	699b      	ldr	r3, [r3, #24]
 801e084:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801e088:	f043 0304 	orr.w	r3, r3, #4
 801e08c:	687a      	ldr	r2, [r7, #4]
 801e08e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801e090:	7dfb      	ldrb	r3, [r7, #23]
}
 801e092:	4618      	mov	r0, r3
 801e094:	3718      	adds	r7, #24
 801e096:	46bd      	mov	sp, r7
 801e098:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801e09c:	b004      	add	sp, #16
 801e09e:	4770      	bx	lr
 801e0a0:	803c3800 	.word	0x803c3800

0801e0a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801e0a4:	b480      	push	{r7}
 801e0a6:	b085      	sub	sp, #20
 801e0a8:	af00      	add	r7, sp, #0
 801e0aa:	6078      	str	r0, [r7, #4]
 801e0ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801e0ae:	2300      	movs	r3, #0
 801e0b0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801e0b2:	683b      	ldr	r3, [r7, #0]
 801e0b4:	019b      	lsls	r3, r3, #6
 801e0b6:	f043 0220 	orr.w	r2, r3, #32
 801e0ba:	687b      	ldr	r3, [r7, #4]
 801e0bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801e0be:	68fb      	ldr	r3, [r7, #12]
 801e0c0:	3301      	adds	r3, #1
 801e0c2:	60fb      	str	r3, [r7, #12]
 801e0c4:	4a08      	ldr	r2, [pc, #32]	; (801e0e8 <USB_FlushTxFifo+0x44>)
 801e0c6:	4293      	cmp	r3, r2
 801e0c8:	d901      	bls.n	801e0ce <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 801e0ca:	2303      	movs	r3, #3
 801e0cc:	e006      	b.n	801e0dc <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801e0ce:	687b      	ldr	r3, [r7, #4]
 801e0d0:	691b      	ldr	r3, [r3, #16]
 801e0d2:	f003 0320 	and.w	r3, r3, #32
 801e0d6:	2b20      	cmp	r3, #32
 801e0d8:	d0f1      	beq.n	801e0be <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 801e0da:	2300      	movs	r3, #0
}
 801e0dc:	4618      	mov	r0, r3
 801e0de:	3714      	adds	r7, #20
 801e0e0:	46bd      	mov	sp, r7
 801e0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0e6:	4770      	bx	lr
 801e0e8:	00030d40 	.word	0x00030d40

0801e0ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801e0ec:	b480      	push	{r7}
 801e0ee:	b085      	sub	sp, #20
 801e0f0:	af00      	add	r7, sp, #0
 801e0f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801e0f4:	2300      	movs	r3, #0
 801e0f6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801e0f8:	687b      	ldr	r3, [r7, #4]
 801e0fa:	2210      	movs	r2, #16
 801e0fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801e0fe:	68fb      	ldr	r3, [r7, #12]
 801e100:	3301      	adds	r3, #1
 801e102:	60fb      	str	r3, [r7, #12]
 801e104:	4a08      	ldr	r2, [pc, #32]	; (801e128 <USB_FlushRxFifo+0x3c>)
 801e106:	4293      	cmp	r3, r2
 801e108:	d901      	bls.n	801e10e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 801e10a:	2303      	movs	r3, #3
 801e10c:	e006      	b.n	801e11c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801e10e:	687b      	ldr	r3, [r7, #4]
 801e110:	691b      	ldr	r3, [r3, #16]
 801e112:	f003 0310 	and.w	r3, r3, #16
 801e116:	2b10      	cmp	r3, #16
 801e118:	d0f1      	beq.n	801e0fe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 801e11a:	2300      	movs	r3, #0
}
 801e11c:	4618      	mov	r0, r3
 801e11e:	3714      	adds	r7, #20
 801e120:	46bd      	mov	sp, r7
 801e122:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e126:	4770      	bx	lr
 801e128:	00030d40 	.word	0x00030d40

0801e12c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801e12c:	b480      	push	{r7}
 801e12e:	b085      	sub	sp, #20
 801e130:	af00      	add	r7, sp, #0
 801e132:	6078      	str	r0, [r7, #4]
 801e134:	460b      	mov	r3, r1
 801e136:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e138:	687b      	ldr	r3, [r7, #4]
 801e13a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801e13c:	68fb      	ldr	r3, [r7, #12]
 801e13e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e142:	681a      	ldr	r2, [r3, #0]
 801e144:	78fb      	ldrb	r3, [r7, #3]
 801e146:	68f9      	ldr	r1, [r7, #12]
 801e148:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e14c:	4313      	orrs	r3, r2
 801e14e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801e150:	2300      	movs	r3, #0
}
 801e152:	4618      	mov	r0, r3
 801e154:	3714      	adds	r7, #20
 801e156:	46bd      	mov	sp, r7
 801e158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e15c:	4770      	bx	lr

0801e15e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801e15e:	b480      	push	{r7}
 801e160:	b087      	sub	sp, #28
 801e162:	af00      	add	r7, sp, #0
 801e164:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e166:	687b      	ldr	r3, [r7, #4]
 801e168:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801e16a:	693b      	ldr	r3, [r7, #16]
 801e16c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e170:	689b      	ldr	r3, [r3, #8]
 801e172:	f003 0306 	and.w	r3, r3, #6
 801e176:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801e178:	68fb      	ldr	r3, [r7, #12]
 801e17a:	2b00      	cmp	r3, #0
 801e17c:	d102      	bne.n	801e184 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801e17e:	2300      	movs	r3, #0
 801e180:	75fb      	strb	r3, [r7, #23]
 801e182:	e00a      	b.n	801e19a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801e184:	68fb      	ldr	r3, [r7, #12]
 801e186:	2b02      	cmp	r3, #2
 801e188:	d002      	beq.n	801e190 <USB_GetDevSpeed+0x32>
 801e18a:	68fb      	ldr	r3, [r7, #12]
 801e18c:	2b06      	cmp	r3, #6
 801e18e:	d102      	bne.n	801e196 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801e190:	2302      	movs	r3, #2
 801e192:	75fb      	strb	r3, [r7, #23]
 801e194:	e001      	b.n	801e19a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801e196:	230f      	movs	r3, #15
 801e198:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801e19a:	7dfb      	ldrb	r3, [r7, #23]
}
 801e19c:	4618      	mov	r0, r3
 801e19e:	371c      	adds	r7, #28
 801e1a0:	46bd      	mov	sp, r7
 801e1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e1a6:	4770      	bx	lr

0801e1a8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801e1a8:	b480      	push	{r7}
 801e1aa:	b085      	sub	sp, #20
 801e1ac:	af00      	add	r7, sp, #0
 801e1ae:	6078      	str	r0, [r7, #4]
 801e1b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e1b2:	687b      	ldr	r3, [r7, #4]
 801e1b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801e1b6:	683b      	ldr	r3, [r7, #0]
 801e1b8:	781b      	ldrb	r3, [r3, #0]
 801e1ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801e1bc:	683b      	ldr	r3, [r7, #0]
 801e1be:	785b      	ldrb	r3, [r3, #1]
 801e1c0:	2b01      	cmp	r3, #1
 801e1c2:	d13a      	bne.n	801e23a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801e1c4:	68fb      	ldr	r3, [r7, #12]
 801e1c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e1ca:	69da      	ldr	r2, [r3, #28]
 801e1cc:	683b      	ldr	r3, [r7, #0]
 801e1ce:	781b      	ldrb	r3, [r3, #0]
 801e1d0:	f003 030f 	and.w	r3, r3, #15
 801e1d4:	2101      	movs	r1, #1
 801e1d6:	fa01 f303 	lsl.w	r3, r1, r3
 801e1da:	b29b      	uxth	r3, r3
 801e1dc:	68f9      	ldr	r1, [r7, #12]
 801e1de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e1e2:	4313      	orrs	r3, r2
 801e1e4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801e1e6:	68bb      	ldr	r3, [r7, #8]
 801e1e8:	015a      	lsls	r2, r3, #5
 801e1ea:	68fb      	ldr	r3, [r7, #12]
 801e1ec:	4413      	add	r3, r2
 801e1ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e1f2:	681b      	ldr	r3, [r3, #0]
 801e1f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801e1f8:	2b00      	cmp	r3, #0
 801e1fa:	d155      	bne.n	801e2a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801e1fc:	68bb      	ldr	r3, [r7, #8]
 801e1fe:	015a      	lsls	r2, r3, #5
 801e200:	68fb      	ldr	r3, [r7, #12]
 801e202:	4413      	add	r3, r2
 801e204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e208:	681a      	ldr	r2, [r3, #0]
 801e20a:	683b      	ldr	r3, [r7, #0]
 801e20c:	689b      	ldr	r3, [r3, #8]
 801e20e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801e212:	683b      	ldr	r3, [r7, #0]
 801e214:	78db      	ldrb	r3, [r3, #3]
 801e216:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801e218:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801e21a:	68bb      	ldr	r3, [r7, #8]
 801e21c:	059b      	lsls	r3, r3, #22
 801e21e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801e220:	4313      	orrs	r3, r2
 801e222:	68ba      	ldr	r2, [r7, #8]
 801e224:	0151      	lsls	r1, r2, #5
 801e226:	68fa      	ldr	r2, [r7, #12]
 801e228:	440a      	add	r2, r1
 801e22a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e22e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801e236:	6013      	str	r3, [r2, #0]
 801e238:	e036      	b.n	801e2a8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801e23a:	68fb      	ldr	r3, [r7, #12]
 801e23c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e240:	69da      	ldr	r2, [r3, #28]
 801e242:	683b      	ldr	r3, [r7, #0]
 801e244:	781b      	ldrb	r3, [r3, #0]
 801e246:	f003 030f 	and.w	r3, r3, #15
 801e24a:	2101      	movs	r1, #1
 801e24c:	fa01 f303 	lsl.w	r3, r1, r3
 801e250:	041b      	lsls	r3, r3, #16
 801e252:	68f9      	ldr	r1, [r7, #12]
 801e254:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e258:	4313      	orrs	r3, r2
 801e25a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801e25c:	68bb      	ldr	r3, [r7, #8]
 801e25e:	015a      	lsls	r2, r3, #5
 801e260:	68fb      	ldr	r3, [r7, #12]
 801e262:	4413      	add	r3, r2
 801e264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e268:	681b      	ldr	r3, [r3, #0]
 801e26a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801e26e:	2b00      	cmp	r3, #0
 801e270:	d11a      	bne.n	801e2a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801e272:	68bb      	ldr	r3, [r7, #8]
 801e274:	015a      	lsls	r2, r3, #5
 801e276:	68fb      	ldr	r3, [r7, #12]
 801e278:	4413      	add	r3, r2
 801e27a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e27e:	681a      	ldr	r2, [r3, #0]
 801e280:	683b      	ldr	r3, [r7, #0]
 801e282:	689b      	ldr	r3, [r3, #8]
 801e284:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801e288:	683b      	ldr	r3, [r7, #0]
 801e28a:	78db      	ldrb	r3, [r3, #3]
 801e28c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801e28e:	430b      	orrs	r3, r1
 801e290:	4313      	orrs	r3, r2
 801e292:	68ba      	ldr	r2, [r7, #8]
 801e294:	0151      	lsls	r1, r2, #5
 801e296:	68fa      	ldr	r2, [r7, #12]
 801e298:	440a      	add	r2, r1
 801e29a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e29e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e2a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801e2a6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801e2a8:	2300      	movs	r3, #0
}
 801e2aa:	4618      	mov	r0, r3
 801e2ac:	3714      	adds	r7, #20
 801e2ae:	46bd      	mov	sp, r7
 801e2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2b4:	4770      	bx	lr
	...

0801e2b8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801e2b8:	b480      	push	{r7}
 801e2ba:	b085      	sub	sp, #20
 801e2bc:	af00      	add	r7, sp, #0
 801e2be:	6078      	str	r0, [r7, #4]
 801e2c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e2c2:	687b      	ldr	r3, [r7, #4]
 801e2c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801e2c6:	683b      	ldr	r3, [r7, #0]
 801e2c8:	781b      	ldrb	r3, [r3, #0]
 801e2ca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801e2cc:	683b      	ldr	r3, [r7, #0]
 801e2ce:	785b      	ldrb	r3, [r3, #1]
 801e2d0:	2b01      	cmp	r3, #1
 801e2d2:	d161      	bne.n	801e398 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801e2d4:	68bb      	ldr	r3, [r7, #8]
 801e2d6:	015a      	lsls	r2, r3, #5
 801e2d8:	68fb      	ldr	r3, [r7, #12]
 801e2da:	4413      	add	r3, r2
 801e2dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e2e0:	681b      	ldr	r3, [r3, #0]
 801e2e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801e2e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801e2ea:	d11f      	bne.n	801e32c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801e2ec:	68bb      	ldr	r3, [r7, #8]
 801e2ee:	015a      	lsls	r2, r3, #5
 801e2f0:	68fb      	ldr	r3, [r7, #12]
 801e2f2:	4413      	add	r3, r2
 801e2f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e2f8:	681b      	ldr	r3, [r3, #0]
 801e2fa:	68ba      	ldr	r2, [r7, #8]
 801e2fc:	0151      	lsls	r1, r2, #5
 801e2fe:	68fa      	ldr	r2, [r7, #12]
 801e300:	440a      	add	r2, r1
 801e302:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e306:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801e30a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801e30c:	68bb      	ldr	r3, [r7, #8]
 801e30e:	015a      	lsls	r2, r3, #5
 801e310:	68fb      	ldr	r3, [r7, #12]
 801e312:	4413      	add	r3, r2
 801e314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e318:	681b      	ldr	r3, [r3, #0]
 801e31a:	68ba      	ldr	r2, [r7, #8]
 801e31c:	0151      	lsls	r1, r2, #5
 801e31e:	68fa      	ldr	r2, [r7, #12]
 801e320:	440a      	add	r2, r1
 801e322:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e326:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801e32a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801e32c:	68fb      	ldr	r3, [r7, #12]
 801e32e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e332:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e334:	683b      	ldr	r3, [r7, #0]
 801e336:	781b      	ldrb	r3, [r3, #0]
 801e338:	f003 030f 	and.w	r3, r3, #15
 801e33c:	2101      	movs	r1, #1
 801e33e:	fa01 f303 	lsl.w	r3, r1, r3
 801e342:	b29b      	uxth	r3, r3
 801e344:	43db      	mvns	r3, r3
 801e346:	68f9      	ldr	r1, [r7, #12]
 801e348:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e34c:	4013      	ands	r3, r2
 801e34e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801e350:	68fb      	ldr	r3, [r7, #12]
 801e352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e356:	69da      	ldr	r2, [r3, #28]
 801e358:	683b      	ldr	r3, [r7, #0]
 801e35a:	781b      	ldrb	r3, [r3, #0]
 801e35c:	f003 030f 	and.w	r3, r3, #15
 801e360:	2101      	movs	r1, #1
 801e362:	fa01 f303 	lsl.w	r3, r1, r3
 801e366:	b29b      	uxth	r3, r3
 801e368:	43db      	mvns	r3, r3
 801e36a:	68f9      	ldr	r1, [r7, #12]
 801e36c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e370:	4013      	ands	r3, r2
 801e372:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801e374:	68bb      	ldr	r3, [r7, #8]
 801e376:	015a      	lsls	r2, r3, #5
 801e378:	68fb      	ldr	r3, [r7, #12]
 801e37a:	4413      	add	r3, r2
 801e37c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e380:	681a      	ldr	r2, [r3, #0]
 801e382:	68bb      	ldr	r3, [r7, #8]
 801e384:	0159      	lsls	r1, r3, #5
 801e386:	68fb      	ldr	r3, [r7, #12]
 801e388:	440b      	add	r3, r1
 801e38a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e38e:	4619      	mov	r1, r3
 801e390:	4b35      	ldr	r3, [pc, #212]	; (801e468 <USB_DeactivateEndpoint+0x1b0>)
 801e392:	4013      	ands	r3, r2
 801e394:	600b      	str	r3, [r1, #0]
 801e396:	e060      	b.n	801e45a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801e398:	68bb      	ldr	r3, [r7, #8]
 801e39a:	015a      	lsls	r2, r3, #5
 801e39c:	68fb      	ldr	r3, [r7, #12]
 801e39e:	4413      	add	r3, r2
 801e3a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e3a4:	681b      	ldr	r3, [r3, #0]
 801e3a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801e3aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801e3ae:	d11f      	bne.n	801e3f0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801e3b0:	68bb      	ldr	r3, [r7, #8]
 801e3b2:	015a      	lsls	r2, r3, #5
 801e3b4:	68fb      	ldr	r3, [r7, #12]
 801e3b6:	4413      	add	r3, r2
 801e3b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e3bc:	681b      	ldr	r3, [r3, #0]
 801e3be:	68ba      	ldr	r2, [r7, #8]
 801e3c0:	0151      	lsls	r1, r2, #5
 801e3c2:	68fa      	ldr	r2, [r7, #12]
 801e3c4:	440a      	add	r2, r1
 801e3c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e3ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801e3ce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801e3d0:	68bb      	ldr	r3, [r7, #8]
 801e3d2:	015a      	lsls	r2, r3, #5
 801e3d4:	68fb      	ldr	r3, [r7, #12]
 801e3d6:	4413      	add	r3, r2
 801e3d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e3dc:	681b      	ldr	r3, [r3, #0]
 801e3de:	68ba      	ldr	r2, [r7, #8]
 801e3e0:	0151      	lsls	r1, r2, #5
 801e3e2:	68fa      	ldr	r2, [r7, #12]
 801e3e4:	440a      	add	r2, r1
 801e3e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e3ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801e3ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801e3f0:	68fb      	ldr	r3, [r7, #12]
 801e3f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e3f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e3f8:	683b      	ldr	r3, [r7, #0]
 801e3fa:	781b      	ldrb	r3, [r3, #0]
 801e3fc:	f003 030f 	and.w	r3, r3, #15
 801e400:	2101      	movs	r1, #1
 801e402:	fa01 f303 	lsl.w	r3, r1, r3
 801e406:	041b      	lsls	r3, r3, #16
 801e408:	43db      	mvns	r3, r3
 801e40a:	68f9      	ldr	r1, [r7, #12]
 801e40c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e410:	4013      	ands	r3, r2
 801e412:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801e414:	68fb      	ldr	r3, [r7, #12]
 801e416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e41a:	69da      	ldr	r2, [r3, #28]
 801e41c:	683b      	ldr	r3, [r7, #0]
 801e41e:	781b      	ldrb	r3, [r3, #0]
 801e420:	f003 030f 	and.w	r3, r3, #15
 801e424:	2101      	movs	r1, #1
 801e426:	fa01 f303 	lsl.w	r3, r1, r3
 801e42a:	041b      	lsls	r3, r3, #16
 801e42c:	43db      	mvns	r3, r3
 801e42e:	68f9      	ldr	r1, [r7, #12]
 801e430:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e434:	4013      	ands	r3, r2
 801e436:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801e438:	68bb      	ldr	r3, [r7, #8]
 801e43a:	015a      	lsls	r2, r3, #5
 801e43c:	68fb      	ldr	r3, [r7, #12]
 801e43e:	4413      	add	r3, r2
 801e440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e444:	681a      	ldr	r2, [r3, #0]
 801e446:	68bb      	ldr	r3, [r7, #8]
 801e448:	0159      	lsls	r1, r3, #5
 801e44a:	68fb      	ldr	r3, [r7, #12]
 801e44c:	440b      	add	r3, r1
 801e44e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e452:	4619      	mov	r1, r3
 801e454:	4b05      	ldr	r3, [pc, #20]	; (801e46c <USB_DeactivateEndpoint+0x1b4>)
 801e456:	4013      	ands	r3, r2
 801e458:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801e45a:	2300      	movs	r3, #0
}
 801e45c:	4618      	mov	r0, r3
 801e45e:	3714      	adds	r7, #20
 801e460:	46bd      	mov	sp, r7
 801e462:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e466:	4770      	bx	lr
 801e468:	ec337800 	.word	0xec337800
 801e46c:	eff37800 	.word	0xeff37800

0801e470 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801e470:	b580      	push	{r7, lr}
 801e472:	b08a      	sub	sp, #40	; 0x28
 801e474:	af02      	add	r7, sp, #8
 801e476:	60f8      	str	r0, [r7, #12]
 801e478:	60b9      	str	r1, [r7, #8]
 801e47a:	4613      	mov	r3, r2
 801e47c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e47e:	68fb      	ldr	r3, [r7, #12]
 801e480:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801e482:	68bb      	ldr	r3, [r7, #8]
 801e484:	781b      	ldrb	r3, [r3, #0]
 801e486:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801e488:	68bb      	ldr	r3, [r7, #8]
 801e48a:	785b      	ldrb	r3, [r3, #1]
 801e48c:	2b01      	cmp	r3, #1
 801e48e:	f040 815c 	bne.w	801e74a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801e492:	68bb      	ldr	r3, [r7, #8]
 801e494:	695b      	ldr	r3, [r3, #20]
 801e496:	2b00      	cmp	r3, #0
 801e498:	d132      	bne.n	801e500 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801e49a:	69bb      	ldr	r3, [r7, #24]
 801e49c:	015a      	lsls	r2, r3, #5
 801e49e:	69fb      	ldr	r3, [r7, #28]
 801e4a0:	4413      	add	r3, r2
 801e4a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e4a6:	691b      	ldr	r3, [r3, #16]
 801e4a8:	69ba      	ldr	r2, [r7, #24]
 801e4aa:	0151      	lsls	r1, r2, #5
 801e4ac:	69fa      	ldr	r2, [r7, #28]
 801e4ae:	440a      	add	r2, r1
 801e4b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e4b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e4b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e4bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801e4be:	69bb      	ldr	r3, [r7, #24]
 801e4c0:	015a      	lsls	r2, r3, #5
 801e4c2:	69fb      	ldr	r3, [r7, #28]
 801e4c4:	4413      	add	r3, r2
 801e4c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e4ca:	691b      	ldr	r3, [r3, #16]
 801e4cc:	69ba      	ldr	r2, [r7, #24]
 801e4ce:	0151      	lsls	r1, r2, #5
 801e4d0:	69fa      	ldr	r2, [r7, #28]
 801e4d2:	440a      	add	r2, r1
 801e4d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e4d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801e4dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801e4de:	69bb      	ldr	r3, [r7, #24]
 801e4e0:	015a      	lsls	r2, r3, #5
 801e4e2:	69fb      	ldr	r3, [r7, #28]
 801e4e4:	4413      	add	r3, r2
 801e4e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e4ea:	691b      	ldr	r3, [r3, #16]
 801e4ec:	69ba      	ldr	r2, [r7, #24]
 801e4ee:	0151      	lsls	r1, r2, #5
 801e4f0:	69fa      	ldr	r2, [r7, #28]
 801e4f2:	440a      	add	r2, r1
 801e4f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e4f8:	0cdb      	lsrs	r3, r3, #19
 801e4fa:	04db      	lsls	r3, r3, #19
 801e4fc:	6113      	str	r3, [r2, #16]
 801e4fe:	e074      	b.n	801e5ea <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801e500:	69bb      	ldr	r3, [r7, #24]
 801e502:	015a      	lsls	r2, r3, #5
 801e504:	69fb      	ldr	r3, [r7, #28]
 801e506:	4413      	add	r3, r2
 801e508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e50c:	691b      	ldr	r3, [r3, #16]
 801e50e:	69ba      	ldr	r2, [r7, #24]
 801e510:	0151      	lsls	r1, r2, #5
 801e512:	69fa      	ldr	r2, [r7, #28]
 801e514:	440a      	add	r2, r1
 801e516:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e51a:	0cdb      	lsrs	r3, r3, #19
 801e51c:	04db      	lsls	r3, r3, #19
 801e51e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801e520:	69bb      	ldr	r3, [r7, #24]
 801e522:	015a      	lsls	r2, r3, #5
 801e524:	69fb      	ldr	r3, [r7, #28]
 801e526:	4413      	add	r3, r2
 801e528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e52c:	691b      	ldr	r3, [r3, #16]
 801e52e:	69ba      	ldr	r2, [r7, #24]
 801e530:	0151      	lsls	r1, r2, #5
 801e532:	69fa      	ldr	r2, [r7, #28]
 801e534:	440a      	add	r2, r1
 801e536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e53a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e53e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e542:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801e544:	69bb      	ldr	r3, [r7, #24]
 801e546:	015a      	lsls	r2, r3, #5
 801e548:	69fb      	ldr	r3, [r7, #28]
 801e54a:	4413      	add	r3, r2
 801e54c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e550:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801e552:	68bb      	ldr	r3, [r7, #8]
 801e554:	6959      	ldr	r1, [r3, #20]
 801e556:	68bb      	ldr	r3, [r7, #8]
 801e558:	689b      	ldr	r3, [r3, #8]
 801e55a:	440b      	add	r3, r1
 801e55c:	1e59      	subs	r1, r3, #1
 801e55e:	68bb      	ldr	r3, [r7, #8]
 801e560:	689b      	ldr	r3, [r3, #8]
 801e562:	fbb1 f3f3 	udiv	r3, r1, r3
 801e566:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801e568:	4b9d      	ldr	r3, [pc, #628]	; (801e7e0 <USB_EPStartXfer+0x370>)
 801e56a:	400b      	ands	r3, r1
 801e56c:	69b9      	ldr	r1, [r7, #24]
 801e56e:	0148      	lsls	r0, r1, #5
 801e570:	69f9      	ldr	r1, [r7, #28]
 801e572:	4401      	add	r1, r0
 801e574:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801e578:	4313      	orrs	r3, r2
 801e57a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801e57c:	69bb      	ldr	r3, [r7, #24]
 801e57e:	015a      	lsls	r2, r3, #5
 801e580:	69fb      	ldr	r3, [r7, #28]
 801e582:	4413      	add	r3, r2
 801e584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e588:	691a      	ldr	r2, [r3, #16]
 801e58a:	68bb      	ldr	r3, [r7, #8]
 801e58c:	695b      	ldr	r3, [r3, #20]
 801e58e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801e592:	69b9      	ldr	r1, [r7, #24]
 801e594:	0148      	lsls	r0, r1, #5
 801e596:	69f9      	ldr	r1, [r7, #28]
 801e598:	4401      	add	r1, r0
 801e59a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801e59e:	4313      	orrs	r3, r2
 801e5a0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801e5a2:	68bb      	ldr	r3, [r7, #8]
 801e5a4:	78db      	ldrb	r3, [r3, #3]
 801e5a6:	2b01      	cmp	r3, #1
 801e5a8:	d11f      	bne.n	801e5ea <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801e5aa:	69bb      	ldr	r3, [r7, #24]
 801e5ac:	015a      	lsls	r2, r3, #5
 801e5ae:	69fb      	ldr	r3, [r7, #28]
 801e5b0:	4413      	add	r3, r2
 801e5b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e5b6:	691b      	ldr	r3, [r3, #16]
 801e5b8:	69ba      	ldr	r2, [r7, #24]
 801e5ba:	0151      	lsls	r1, r2, #5
 801e5bc:	69fa      	ldr	r2, [r7, #28]
 801e5be:	440a      	add	r2, r1
 801e5c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e5c4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801e5c8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801e5ca:	69bb      	ldr	r3, [r7, #24]
 801e5cc:	015a      	lsls	r2, r3, #5
 801e5ce:	69fb      	ldr	r3, [r7, #28]
 801e5d0:	4413      	add	r3, r2
 801e5d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e5d6:	691b      	ldr	r3, [r3, #16]
 801e5d8:	69ba      	ldr	r2, [r7, #24]
 801e5da:	0151      	lsls	r1, r2, #5
 801e5dc:	69fa      	ldr	r2, [r7, #28]
 801e5de:	440a      	add	r2, r1
 801e5e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e5e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801e5e8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801e5ea:	79fb      	ldrb	r3, [r7, #7]
 801e5ec:	2b01      	cmp	r3, #1
 801e5ee:	d14b      	bne.n	801e688 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801e5f0:	68bb      	ldr	r3, [r7, #8]
 801e5f2:	691b      	ldr	r3, [r3, #16]
 801e5f4:	2b00      	cmp	r3, #0
 801e5f6:	d009      	beq.n	801e60c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801e5f8:	69bb      	ldr	r3, [r7, #24]
 801e5fa:	015a      	lsls	r2, r3, #5
 801e5fc:	69fb      	ldr	r3, [r7, #28]
 801e5fe:	4413      	add	r3, r2
 801e600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e604:	461a      	mov	r2, r3
 801e606:	68bb      	ldr	r3, [r7, #8]
 801e608:	691b      	ldr	r3, [r3, #16]
 801e60a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801e60c:	68bb      	ldr	r3, [r7, #8]
 801e60e:	78db      	ldrb	r3, [r3, #3]
 801e610:	2b01      	cmp	r3, #1
 801e612:	d128      	bne.n	801e666 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801e614:	69fb      	ldr	r3, [r7, #28]
 801e616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e61a:	689b      	ldr	r3, [r3, #8]
 801e61c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e620:	2b00      	cmp	r3, #0
 801e622:	d110      	bne.n	801e646 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801e624:	69bb      	ldr	r3, [r7, #24]
 801e626:	015a      	lsls	r2, r3, #5
 801e628:	69fb      	ldr	r3, [r7, #28]
 801e62a:	4413      	add	r3, r2
 801e62c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e630:	681b      	ldr	r3, [r3, #0]
 801e632:	69ba      	ldr	r2, [r7, #24]
 801e634:	0151      	lsls	r1, r2, #5
 801e636:	69fa      	ldr	r2, [r7, #28]
 801e638:	440a      	add	r2, r1
 801e63a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e63e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801e642:	6013      	str	r3, [r2, #0]
 801e644:	e00f      	b.n	801e666 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801e646:	69bb      	ldr	r3, [r7, #24]
 801e648:	015a      	lsls	r2, r3, #5
 801e64a:	69fb      	ldr	r3, [r7, #28]
 801e64c:	4413      	add	r3, r2
 801e64e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e652:	681b      	ldr	r3, [r3, #0]
 801e654:	69ba      	ldr	r2, [r7, #24]
 801e656:	0151      	lsls	r1, r2, #5
 801e658:	69fa      	ldr	r2, [r7, #28]
 801e65a:	440a      	add	r2, r1
 801e65c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e664:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801e666:	69bb      	ldr	r3, [r7, #24]
 801e668:	015a      	lsls	r2, r3, #5
 801e66a:	69fb      	ldr	r3, [r7, #28]
 801e66c:	4413      	add	r3, r2
 801e66e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e672:	681b      	ldr	r3, [r3, #0]
 801e674:	69ba      	ldr	r2, [r7, #24]
 801e676:	0151      	lsls	r1, r2, #5
 801e678:	69fa      	ldr	r2, [r7, #28]
 801e67a:	440a      	add	r2, r1
 801e67c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e680:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801e684:	6013      	str	r3, [r2, #0]
 801e686:	e12f      	b.n	801e8e8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801e688:	69bb      	ldr	r3, [r7, #24]
 801e68a:	015a      	lsls	r2, r3, #5
 801e68c:	69fb      	ldr	r3, [r7, #28]
 801e68e:	4413      	add	r3, r2
 801e690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e694:	681b      	ldr	r3, [r3, #0]
 801e696:	69ba      	ldr	r2, [r7, #24]
 801e698:	0151      	lsls	r1, r2, #5
 801e69a:	69fa      	ldr	r2, [r7, #28]
 801e69c:	440a      	add	r2, r1
 801e69e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e6a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801e6a6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801e6a8:	68bb      	ldr	r3, [r7, #8]
 801e6aa:	78db      	ldrb	r3, [r3, #3]
 801e6ac:	2b01      	cmp	r3, #1
 801e6ae:	d015      	beq.n	801e6dc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801e6b0:	68bb      	ldr	r3, [r7, #8]
 801e6b2:	695b      	ldr	r3, [r3, #20]
 801e6b4:	2b00      	cmp	r3, #0
 801e6b6:	f000 8117 	beq.w	801e8e8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801e6ba:	69fb      	ldr	r3, [r7, #28]
 801e6bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e6c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801e6c2:	68bb      	ldr	r3, [r7, #8]
 801e6c4:	781b      	ldrb	r3, [r3, #0]
 801e6c6:	f003 030f 	and.w	r3, r3, #15
 801e6ca:	2101      	movs	r1, #1
 801e6cc:	fa01 f303 	lsl.w	r3, r1, r3
 801e6d0:	69f9      	ldr	r1, [r7, #28]
 801e6d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e6d6:	4313      	orrs	r3, r2
 801e6d8:	634b      	str	r3, [r1, #52]	; 0x34
 801e6da:	e105      	b.n	801e8e8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801e6dc:	69fb      	ldr	r3, [r7, #28]
 801e6de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e6e2:	689b      	ldr	r3, [r3, #8]
 801e6e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e6e8:	2b00      	cmp	r3, #0
 801e6ea:	d110      	bne.n	801e70e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801e6ec:	69bb      	ldr	r3, [r7, #24]
 801e6ee:	015a      	lsls	r2, r3, #5
 801e6f0:	69fb      	ldr	r3, [r7, #28]
 801e6f2:	4413      	add	r3, r2
 801e6f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e6f8:	681b      	ldr	r3, [r3, #0]
 801e6fa:	69ba      	ldr	r2, [r7, #24]
 801e6fc:	0151      	lsls	r1, r2, #5
 801e6fe:	69fa      	ldr	r2, [r7, #28]
 801e700:	440a      	add	r2, r1
 801e702:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e706:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801e70a:	6013      	str	r3, [r2, #0]
 801e70c:	e00f      	b.n	801e72e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801e70e:	69bb      	ldr	r3, [r7, #24]
 801e710:	015a      	lsls	r2, r3, #5
 801e712:	69fb      	ldr	r3, [r7, #28]
 801e714:	4413      	add	r3, r2
 801e716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e71a:	681b      	ldr	r3, [r3, #0]
 801e71c:	69ba      	ldr	r2, [r7, #24]
 801e71e:	0151      	lsls	r1, r2, #5
 801e720:	69fa      	ldr	r2, [r7, #28]
 801e722:	440a      	add	r2, r1
 801e724:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e72c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801e72e:	68bb      	ldr	r3, [r7, #8]
 801e730:	68d9      	ldr	r1, [r3, #12]
 801e732:	68bb      	ldr	r3, [r7, #8]
 801e734:	781a      	ldrb	r2, [r3, #0]
 801e736:	68bb      	ldr	r3, [r7, #8]
 801e738:	695b      	ldr	r3, [r3, #20]
 801e73a:	b298      	uxth	r0, r3
 801e73c:	79fb      	ldrb	r3, [r7, #7]
 801e73e:	9300      	str	r3, [sp, #0]
 801e740:	4603      	mov	r3, r0
 801e742:	68f8      	ldr	r0, [r7, #12]
 801e744:	f000 fa2b 	bl	801eb9e <USB_WritePacket>
 801e748:	e0ce      	b.n	801e8e8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801e74a:	69bb      	ldr	r3, [r7, #24]
 801e74c:	015a      	lsls	r2, r3, #5
 801e74e:	69fb      	ldr	r3, [r7, #28]
 801e750:	4413      	add	r3, r2
 801e752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e756:	691b      	ldr	r3, [r3, #16]
 801e758:	69ba      	ldr	r2, [r7, #24]
 801e75a:	0151      	lsls	r1, r2, #5
 801e75c:	69fa      	ldr	r2, [r7, #28]
 801e75e:	440a      	add	r2, r1
 801e760:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e764:	0cdb      	lsrs	r3, r3, #19
 801e766:	04db      	lsls	r3, r3, #19
 801e768:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801e76a:	69bb      	ldr	r3, [r7, #24]
 801e76c:	015a      	lsls	r2, r3, #5
 801e76e:	69fb      	ldr	r3, [r7, #28]
 801e770:	4413      	add	r3, r2
 801e772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e776:	691b      	ldr	r3, [r3, #16]
 801e778:	69ba      	ldr	r2, [r7, #24]
 801e77a:	0151      	lsls	r1, r2, #5
 801e77c:	69fa      	ldr	r2, [r7, #28]
 801e77e:	440a      	add	r2, r1
 801e780:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e784:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e788:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e78c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 801e78e:	68bb      	ldr	r3, [r7, #8]
 801e790:	695b      	ldr	r3, [r3, #20]
 801e792:	2b00      	cmp	r3, #0
 801e794:	d126      	bne.n	801e7e4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801e796:	69bb      	ldr	r3, [r7, #24]
 801e798:	015a      	lsls	r2, r3, #5
 801e79a:	69fb      	ldr	r3, [r7, #28]
 801e79c:	4413      	add	r3, r2
 801e79e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e7a2:	691a      	ldr	r2, [r3, #16]
 801e7a4:	68bb      	ldr	r3, [r7, #8]
 801e7a6:	689b      	ldr	r3, [r3, #8]
 801e7a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801e7ac:	69b9      	ldr	r1, [r7, #24]
 801e7ae:	0148      	lsls	r0, r1, #5
 801e7b0:	69f9      	ldr	r1, [r7, #28]
 801e7b2:	4401      	add	r1, r0
 801e7b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801e7b8:	4313      	orrs	r3, r2
 801e7ba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801e7bc:	69bb      	ldr	r3, [r7, #24]
 801e7be:	015a      	lsls	r2, r3, #5
 801e7c0:	69fb      	ldr	r3, [r7, #28]
 801e7c2:	4413      	add	r3, r2
 801e7c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e7c8:	691b      	ldr	r3, [r3, #16]
 801e7ca:	69ba      	ldr	r2, [r7, #24]
 801e7cc:	0151      	lsls	r1, r2, #5
 801e7ce:	69fa      	ldr	r2, [r7, #28]
 801e7d0:	440a      	add	r2, r1
 801e7d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e7d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801e7da:	6113      	str	r3, [r2, #16]
 801e7dc:	e036      	b.n	801e84c <USB_EPStartXfer+0x3dc>
 801e7de:	bf00      	nop
 801e7e0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801e7e4:	68bb      	ldr	r3, [r7, #8]
 801e7e6:	695a      	ldr	r2, [r3, #20]
 801e7e8:	68bb      	ldr	r3, [r7, #8]
 801e7ea:	689b      	ldr	r3, [r3, #8]
 801e7ec:	4413      	add	r3, r2
 801e7ee:	1e5a      	subs	r2, r3, #1
 801e7f0:	68bb      	ldr	r3, [r7, #8]
 801e7f2:	689b      	ldr	r3, [r3, #8]
 801e7f4:	fbb2 f3f3 	udiv	r3, r2, r3
 801e7f8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801e7fa:	69bb      	ldr	r3, [r7, #24]
 801e7fc:	015a      	lsls	r2, r3, #5
 801e7fe:	69fb      	ldr	r3, [r7, #28]
 801e800:	4413      	add	r3, r2
 801e802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e806:	691a      	ldr	r2, [r3, #16]
 801e808:	8afb      	ldrh	r3, [r7, #22]
 801e80a:	04d9      	lsls	r1, r3, #19
 801e80c:	4b39      	ldr	r3, [pc, #228]	; (801e8f4 <USB_EPStartXfer+0x484>)
 801e80e:	400b      	ands	r3, r1
 801e810:	69b9      	ldr	r1, [r7, #24]
 801e812:	0148      	lsls	r0, r1, #5
 801e814:	69f9      	ldr	r1, [r7, #28]
 801e816:	4401      	add	r1, r0
 801e818:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801e81c:	4313      	orrs	r3, r2
 801e81e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 801e820:	69bb      	ldr	r3, [r7, #24]
 801e822:	015a      	lsls	r2, r3, #5
 801e824:	69fb      	ldr	r3, [r7, #28]
 801e826:	4413      	add	r3, r2
 801e828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e82c:	691a      	ldr	r2, [r3, #16]
 801e82e:	68bb      	ldr	r3, [r7, #8]
 801e830:	689b      	ldr	r3, [r3, #8]
 801e832:	8af9      	ldrh	r1, [r7, #22]
 801e834:	fb01 f303 	mul.w	r3, r1, r3
 801e838:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801e83c:	69b9      	ldr	r1, [r7, #24]
 801e83e:	0148      	lsls	r0, r1, #5
 801e840:	69f9      	ldr	r1, [r7, #28]
 801e842:	4401      	add	r1, r0
 801e844:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801e848:	4313      	orrs	r3, r2
 801e84a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801e84c:	79fb      	ldrb	r3, [r7, #7]
 801e84e:	2b01      	cmp	r3, #1
 801e850:	d10d      	bne.n	801e86e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801e852:	68bb      	ldr	r3, [r7, #8]
 801e854:	68db      	ldr	r3, [r3, #12]
 801e856:	2b00      	cmp	r3, #0
 801e858:	d009      	beq.n	801e86e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801e85a:	68bb      	ldr	r3, [r7, #8]
 801e85c:	68d9      	ldr	r1, [r3, #12]
 801e85e:	69bb      	ldr	r3, [r7, #24]
 801e860:	015a      	lsls	r2, r3, #5
 801e862:	69fb      	ldr	r3, [r7, #28]
 801e864:	4413      	add	r3, r2
 801e866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e86a:	460a      	mov	r2, r1
 801e86c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801e86e:	68bb      	ldr	r3, [r7, #8]
 801e870:	78db      	ldrb	r3, [r3, #3]
 801e872:	2b01      	cmp	r3, #1
 801e874:	d128      	bne.n	801e8c8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801e876:	69fb      	ldr	r3, [r7, #28]
 801e878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e87c:	689b      	ldr	r3, [r3, #8]
 801e87e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e882:	2b00      	cmp	r3, #0
 801e884:	d110      	bne.n	801e8a8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801e886:	69bb      	ldr	r3, [r7, #24]
 801e888:	015a      	lsls	r2, r3, #5
 801e88a:	69fb      	ldr	r3, [r7, #28]
 801e88c:	4413      	add	r3, r2
 801e88e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e892:	681b      	ldr	r3, [r3, #0]
 801e894:	69ba      	ldr	r2, [r7, #24]
 801e896:	0151      	lsls	r1, r2, #5
 801e898:	69fa      	ldr	r2, [r7, #28]
 801e89a:	440a      	add	r2, r1
 801e89c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e8a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801e8a4:	6013      	str	r3, [r2, #0]
 801e8a6:	e00f      	b.n	801e8c8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801e8a8:	69bb      	ldr	r3, [r7, #24]
 801e8aa:	015a      	lsls	r2, r3, #5
 801e8ac:	69fb      	ldr	r3, [r7, #28]
 801e8ae:	4413      	add	r3, r2
 801e8b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e8b4:	681b      	ldr	r3, [r3, #0]
 801e8b6:	69ba      	ldr	r2, [r7, #24]
 801e8b8:	0151      	lsls	r1, r2, #5
 801e8ba:	69fa      	ldr	r2, [r7, #28]
 801e8bc:	440a      	add	r2, r1
 801e8be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e8c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e8c6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801e8c8:	69bb      	ldr	r3, [r7, #24]
 801e8ca:	015a      	lsls	r2, r3, #5
 801e8cc:	69fb      	ldr	r3, [r7, #28]
 801e8ce:	4413      	add	r3, r2
 801e8d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e8d4:	681b      	ldr	r3, [r3, #0]
 801e8d6:	69ba      	ldr	r2, [r7, #24]
 801e8d8:	0151      	lsls	r1, r2, #5
 801e8da:	69fa      	ldr	r2, [r7, #28]
 801e8dc:	440a      	add	r2, r1
 801e8de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e8e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801e8e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801e8e8:	2300      	movs	r3, #0
}
 801e8ea:	4618      	mov	r0, r3
 801e8ec:	3720      	adds	r7, #32
 801e8ee:	46bd      	mov	sp, r7
 801e8f0:	bd80      	pop	{r7, pc}
 801e8f2:	bf00      	nop
 801e8f4:	1ff80000 	.word	0x1ff80000

0801e8f8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801e8f8:	b480      	push	{r7}
 801e8fa:	b087      	sub	sp, #28
 801e8fc:	af00      	add	r7, sp, #0
 801e8fe:	60f8      	str	r0, [r7, #12]
 801e900:	60b9      	str	r1, [r7, #8]
 801e902:	4613      	mov	r3, r2
 801e904:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e906:	68fb      	ldr	r3, [r7, #12]
 801e908:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801e90a:	68bb      	ldr	r3, [r7, #8]
 801e90c:	781b      	ldrb	r3, [r3, #0]
 801e90e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801e910:	68bb      	ldr	r3, [r7, #8]
 801e912:	785b      	ldrb	r3, [r3, #1]
 801e914:	2b01      	cmp	r3, #1
 801e916:	f040 80cd 	bne.w	801eab4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801e91a:	68bb      	ldr	r3, [r7, #8]
 801e91c:	695b      	ldr	r3, [r3, #20]
 801e91e:	2b00      	cmp	r3, #0
 801e920:	d132      	bne.n	801e988 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801e922:	693b      	ldr	r3, [r7, #16]
 801e924:	015a      	lsls	r2, r3, #5
 801e926:	697b      	ldr	r3, [r7, #20]
 801e928:	4413      	add	r3, r2
 801e92a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e92e:	691b      	ldr	r3, [r3, #16]
 801e930:	693a      	ldr	r2, [r7, #16]
 801e932:	0151      	lsls	r1, r2, #5
 801e934:	697a      	ldr	r2, [r7, #20]
 801e936:	440a      	add	r2, r1
 801e938:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e93c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e940:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e944:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801e946:	693b      	ldr	r3, [r7, #16]
 801e948:	015a      	lsls	r2, r3, #5
 801e94a:	697b      	ldr	r3, [r7, #20]
 801e94c:	4413      	add	r3, r2
 801e94e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e952:	691b      	ldr	r3, [r3, #16]
 801e954:	693a      	ldr	r2, [r7, #16]
 801e956:	0151      	lsls	r1, r2, #5
 801e958:	697a      	ldr	r2, [r7, #20]
 801e95a:	440a      	add	r2, r1
 801e95c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e960:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801e964:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801e966:	693b      	ldr	r3, [r7, #16]
 801e968:	015a      	lsls	r2, r3, #5
 801e96a:	697b      	ldr	r3, [r7, #20]
 801e96c:	4413      	add	r3, r2
 801e96e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e972:	691b      	ldr	r3, [r3, #16]
 801e974:	693a      	ldr	r2, [r7, #16]
 801e976:	0151      	lsls	r1, r2, #5
 801e978:	697a      	ldr	r2, [r7, #20]
 801e97a:	440a      	add	r2, r1
 801e97c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e980:	0cdb      	lsrs	r3, r3, #19
 801e982:	04db      	lsls	r3, r3, #19
 801e984:	6113      	str	r3, [r2, #16]
 801e986:	e04e      	b.n	801ea26 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801e988:	693b      	ldr	r3, [r7, #16]
 801e98a:	015a      	lsls	r2, r3, #5
 801e98c:	697b      	ldr	r3, [r7, #20]
 801e98e:	4413      	add	r3, r2
 801e990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e994:	691b      	ldr	r3, [r3, #16]
 801e996:	693a      	ldr	r2, [r7, #16]
 801e998:	0151      	lsls	r1, r2, #5
 801e99a:	697a      	ldr	r2, [r7, #20]
 801e99c:	440a      	add	r2, r1
 801e99e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e9a2:	0cdb      	lsrs	r3, r3, #19
 801e9a4:	04db      	lsls	r3, r3, #19
 801e9a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801e9a8:	693b      	ldr	r3, [r7, #16]
 801e9aa:	015a      	lsls	r2, r3, #5
 801e9ac:	697b      	ldr	r3, [r7, #20]
 801e9ae:	4413      	add	r3, r2
 801e9b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e9b4:	691b      	ldr	r3, [r3, #16]
 801e9b6:	693a      	ldr	r2, [r7, #16]
 801e9b8:	0151      	lsls	r1, r2, #5
 801e9ba:	697a      	ldr	r2, [r7, #20]
 801e9bc:	440a      	add	r2, r1
 801e9be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e9c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e9c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e9ca:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 801e9cc:	68bb      	ldr	r3, [r7, #8]
 801e9ce:	695a      	ldr	r2, [r3, #20]
 801e9d0:	68bb      	ldr	r3, [r7, #8]
 801e9d2:	689b      	ldr	r3, [r3, #8]
 801e9d4:	429a      	cmp	r2, r3
 801e9d6:	d903      	bls.n	801e9e0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 801e9d8:	68bb      	ldr	r3, [r7, #8]
 801e9da:	689a      	ldr	r2, [r3, #8]
 801e9dc:	68bb      	ldr	r3, [r7, #8]
 801e9de:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801e9e0:	693b      	ldr	r3, [r7, #16]
 801e9e2:	015a      	lsls	r2, r3, #5
 801e9e4:	697b      	ldr	r3, [r7, #20]
 801e9e6:	4413      	add	r3, r2
 801e9e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e9ec:	691b      	ldr	r3, [r3, #16]
 801e9ee:	693a      	ldr	r2, [r7, #16]
 801e9f0:	0151      	lsls	r1, r2, #5
 801e9f2:	697a      	ldr	r2, [r7, #20]
 801e9f4:	440a      	add	r2, r1
 801e9f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e9fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801e9fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801ea00:	693b      	ldr	r3, [r7, #16]
 801ea02:	015a      	lsls	r2, r3, #5
 801ea04:	697b      	ldr	r3, [r7, #20]
 801ea06:	4413      	add	r3, r2
 801ea08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ea0c:	691a      	ldr	r2, [r3, #16]
 801ea0e:	68bb      	ldr	r3, [r7, #8]
 801ea10:	695b      	ldr	r3, [r3, #20]
 801ea12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801ea16:	6939      	ldr	r1, [r7, #16]
 801ea18:	0148      	lsls	r0, r1, #5
 801ea1a:	6979      	ldr	r1, [r7, #20]
 801ea1c:	4401      	add	r1, r0
 801ea1e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801ea22:	4313      	orrs	r3, r2
 801ea24:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801ea26:	79fb      	ldrb	r3, [r7, #7]
 801ea28:	2b01      	cmp	r3, #1
 801ea2a:	d11e      	bne.n	801ea6a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801ea2c:	68bb      	ldr	r3, [r7, #8]
 801ea2e:	691b      	ldr	r3, [r3, #16]
 801ea30:	2b00      	cmp	r3, #0
 801ea32:	d009      	beq.n	801ea48 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801ea34:	693b      	ldr	r3, [r7, #16]
 801ea36:	015a      	lsls	r2, r3, #5
 801ea38:	697b      	ldr	r3, [r7, #20]
 801ea3a:	4413      	add	r3, r2
 801ea3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ea40:	461a      	mov	r2, r3
 801ea42:	68bb      	ldr	r3, [r7, #8]
 801ea44:	691b      	ldr	r3, [r3, #16]
 801ea46:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801ea48:	693b      	ldr	r3, [r7, #16]
 801ea4a:	015a      	lsls	r2, r3, #5
 801ea4c:	697b      	ldr	r3, [r7, #20]
 801ea4e:	4413      	add	r3, r2
 801ea50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ea54:	681b      	ldr	r3, [r3, #0]
 801ea56:	693a      	ldr	r2, [r7, #16]
 801ea58:	0151      	lsls	r1, r2, #5
 801ea5a:	697a      	ldr	r2, [r7, #20]
 801ea5c:	440a      	add	r2, r1
 801ea5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ea62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801ea66:	6013      	str	r3, [r2, #0]
 801ea68:	e092      	b.n	801eb90 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801ea6a:	693b      	ldr	r3, [r7, #16]
 801ea6c:	015a      	lsls	r2, r3, #5
 801ea6e:	697b      	ldr	r3, [r7, #20]
 801ea70:	4413      	add	r3, r2
 801ea72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ea76:	681b      	ldr	r3, [r3, #0]
 801ea78:	693a      	ldr	r2, [r7, #16]
 801ea7a:	0151      	lsls	r1, r2, #5
 801ea7c:	697a      	ldr	r2, [r7, #20]
 801ea7e:	440a      	add	r2, r1
 801ea80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ea84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801ea88:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801ea8a:	68bb      	ldr	r3, [r7, #8]
 801ea8c:	695b      	ldr	r3, [r3, #20]
 801ea8e:	2b00      	cmp	r3, #0
 801ea90:	d07e      	beq.n	801eb90 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801ea92:	697b      	ldr	r3, [r7, #20]
 801ea94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ea98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801ea9a:	68bb      	ldr	r3, [r7, #8]
 801ea9c:	781b      	ldrb	r3, [r3, #0]
 801ea9e:	f003 030f 	and.w	r3, r3, #15
 801eaa2:	2101      	movs	r1, #1
 801eaa4:	fa01 f303 	lsl.w	r3, r1, r3
 801eaa8:	6979      	ldr	r1, [r7, #20]
 801eaaa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801eaae:	4313      	orrs	r3, r2
 801eab0:	634b      	str	r3, [r1, #52]	; 0x34
 801eab2:	e06d      	b.n	801eb90 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801eab4:	693b      	ldr	r3, [r7, #16]
 801eab6:	015a      	lsls	r2, r3, #5
 801eab8:	697b      	ldr	r3, [r7, #20]
 801eaba:	4413      	add	r3, r2
 801eabc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eac0:	691b      	ldr	r3, [r3, #16]
 801eac2:	693a      	ldr	r2, [r7, #16]
 801eac4:	0151      	lsls	r1, r2, #5
 801eac6:	697a      	ldr	r2, [r7, #20]
 801eac8:	440a      	add	r2, r1
 801eaca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801eace:	0cdb      	lsrs	r3, r3, #19
 801ead0:	04db      	lsls	r3, r3, #19
 801ead2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801ead4:	693b      	ldr	r3, [r7, #16]
 801ead6:	015a      	lsls	r2, r3, #5
 801ead8:	697b      	ldr	r3, [r7, #20]
 801eada:	4413      	add	r3, r2
 801eadc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eae0:	691b      	ldr	r3, [r3, #16]
 801eae2:	693a      	ldr	r2, [r7, #16]
 801eae4:	0151      	lsls	r1, r2, #5
 801eae6:	697a      	ldr	r2, [r7, #20]
 801eae8:	440a      	add	r2, r1
 801eaea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801eaee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801eaf2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801eaf6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 801eaf8:	68bb      	ldr	r3, [r7, #8]
 801eafa:	695b      	ldr	r3, [r3, #20]
 801eafc:	2b00      	cmp	r3, #0
 801eafe:	d003      	beq.n	801eb08 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 801eb00:	68bb      	ldr	r3, [r7, #8]
 801eb02:	689a      	ldr	r2, [r3, #8]
 801eb04:	68bb      	ldr	r3, [r7, #8]
 801eb06:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801eb08:	693b      	ldr	r3, [r7, #16]
 801eb0a:	015a      	lsls	r2, r3, #5
 801eb0c:	697b      	ldr	r3, [r7, #20]
 801eb0e:	4413      	add	r3, r2
 801eb10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eb14:	691b      	ldr	r3, [r3, #16]
 801eb16:	693a      	ldr	r2, [r7, #16]
 801eb18:	0151      	lsls	r1, r2, #5
 801eb1a:	697a      	ldr	r2, [r7, #20]
 801eb1c:	440a      	add	r2, r1
 801eb1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801eb22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801eb26:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 801eb28:	693b      	ldr	r3, [r7, #16]
 801eb2a:	015a      	lsls	r2, r3, #5
 801eb2c:	697b      	ldr	r3, [r7, #20]
 801eb2e:	4413      	add	r3, r2
 801eb30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eb34:	691a      	ldr	r2, [r3, #16]
 801eb36:	68bb      	ldr	r3, [r7, #8]
 801eb38:	689b      	ldr	r3, [r3, #8]
 801eb3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801eb3e:	6939      	ldr	r1, [r7, #16]
 801eb40:	0148      	lsls	r0, r1, #5
 801eb42:	6979      	ldr	r1, [r7, #20]
 801eb44:	4401      	add	r1, r0
 801eb46:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801eb4a:	4313      	orrs	r3, r2
 801eb4c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 801eb4e:	79fb      	ldrb	r3, [r7, #7]
 801eb50:	2b01      	cmp	r3, #1
 801eb52:	d10d      	bne.n	801eb70 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801eb54:	68bb      	ldr	r3, [r7, #8]
 801eb56:	68db      	ldr	r3, [r3, #12]
 801eb58:	2b00      	cmp	r3, #0
 801eb5a:	d009      	beq.n	801eb70 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801eb5c:	68bb      	ldr	r3, [r7, #8]
 801eb5e:	68d9      	ldr	r1, [r3, #12]
 801eb60:	693b      	ldr	r3, [r7, #16]
 801eb62:	015a      	lsls	r2, r3, #5
 801eb64:	697b      	ldr	r3, [r7, #20]
 801eb66:	4413      	add	r3, r2
 801eb68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eb6c:	460a      	mov	r2, r1
 801eb6e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801eb70:	693b      	ldr	r3, [r7, #16]
 801eb72:	015a      	lsls	r2, r3, #5
 801eb74:	697b      	ldr	r3, [r7, #20]
 801eb76:	4413      	add	r3, r2
 801eb78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eb7c:	681b      	ldr	r3, [r3, #0]
 801eb7e:	693a      	ldr	r2, [r7, #16]
 801eb80:	0151      	lsls	r1, r2, #5
 801eb82:	697a      	ldr	r2, [r7, #20]
 801eb84:	440a      	add	r2, r1
 801eb86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801eb8a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801eb8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801eb90:	2300      	movs	r3, #0
}
 801eb92:	4618      	mov	r0, r3
 801eb94:	371c      	adds	r7, #28
 801eb96:	46bd      	mov	sp, r7
 801eb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb9c:	4770      	bx	lr

0801eb9e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801eb9e:	b480      	push	{r7}
 801eba0:	b089      	sub	sp, #36	; 0x24
 801eba2:	af00      	add	r7, sp, #0
 801eba4:	60f8      	str	r0, [r7, #12]
 801eba6:	60b9      	str	r1, [r7, #8]
 801eba8:	4611      	mov	r1, r2
 801ebaa:	461a      	mov	r2, r3
 801ebac:	460b      	mov	r3, r1
 801ebae:	71fb      	strb	r3, [r7, #7]
 801ebb0:	4613      	mov	r3, r2
 801ebb2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ebb4:	68fb      	ldr	r3, [r7, #12]
 801ebb6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801ebb8:	68bb      	ldr	r3, [r7, #8]
 801ebba:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801ebbc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801ebc0:	2b00      	cmp	r3, #0
 801ebc2:	d123      	bne.n	801ec0c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801ebc4:	88bb      	ldrh	r3, [r7, #4]
 801ebc6:	3303      	adds	r3, #3
 801ebc8:	089b      	lsrs	r3, r3, #2
 801ebca:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801ebcc:	2300      	movs	r3, #0
 801ebce:	61bb      	str	r3, [r7, #24]
 801ebd0:	e018      	b.n	801ec04 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801ebd2:	79fb      	ldrb	r3, [r7, #7]
 801ebd4:	031a      	lsls	r2, r3, #12
 801ebd6:	697b      	ldr	r3, [r7, #20]
 801ebd8:	4413      	add	r3, r2
 801ebda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ebde:	461a      	mov	r2, r3
 801ebe0:	69fb      	ldr	r3, [r7, #28]
 801ebe2:	681b      	ldr	r3, [r3, #0]
 801ebe4:	6013      	str	r3, [r2, #0]
      pSrc++;
 801ebe6:	69fb      	ldr	r3, [r7, #28]
 801ebe8:	3301      	adds	r3, #1
 801ebea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801ebec:	69fb      	ldr	r3, [r7, #28]
 801ebee:	3301      	adds	r3, #1
 801ebf0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801ebf2:	69fb      	ldr	r3, [r7, #28]
 801ebf4:	3301      	adds	r3, #1
 801ebf6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801ebf8:	69fb      	ldr	r3, [r7, #28]
 801ebfa:	3301      	adds	r3, #1
 801ebfc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801ebfe:	69bb      	ldr	r3, [r7, #24]
 801ec00:	3301      	adds	r3, #1
 801ec02:	61bb      	str	r3, [r7, #24]
 801ec04:	69ba      	ldr	r2, [r7, #24]
 801ec06:	693b      	ldr	r3, [r7, #16]
 801ec08:	429a      	cmp	r2, r3
 801ec0a:	d3e2      	bcc.n	801ebd2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801ec0c:	2300      	movs	r3, #0
}
 801ec0e:	4618      	mov	r0, r3
 801ec10:	3724      	adds	r7, #36	; 0x24
 801ec12:	46bd      	mov	sp, r7
 801ec14:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec18:	4770      	bx	lr

0801ec1a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801ec1a:	b480      	push	{r7}
 801ec1c:	b08b      	sub	sp, #44	; 0x2c
 801ec1e:	af00      	add	r7, sp, #0
 801ec20:	60f8      	str	r0, [r7, #12]
 801ec22:	60b9      	str	r1, [r7, #8]
 801ec24:	4613      	mov	r3, r2
 801ec26:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ec28:	68fb      	ldr	r3, [r7, #12]
 801ec2a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801ec2c:	68bb      	ldr	r3, [r7, #8]
 801ec2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801ec30:	88fb      	ldrh	r3, [r7, #6]
 801ec32:	089b      	lsrs	r3, r3, #2
 801ec34:	b29b      	uxth	r3, r3
 801ec36:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801ec38:	88fb      	ldrh	r3, [r7, #6]
 801ec3a:	f003 0303 	and.w	r3, r3, #3
 801ec3e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801ec40:	2300      	movs	r3, #0
 801ec42:	623b      	str	r3, [r7, #32]
 801ec44:	e014      	b.n	801ec70 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801ec46:	69bb      	ldr	r3, [r7, #24]
 801ec48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ec4c:	681a      	ldr	r2, [r3, #0]
 801ec4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec50:	601a      	str	r2, [r3, #0]
    pDest++;
 801ec52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec54:	3301      	adds	r3, #1
 801ec56:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801ec58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec5a:	3301      	adds	r3, #1
 801ec5c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801ec5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec60:	3301      	adds	r3, #1
 801ec62:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801ec64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec66:	3301      	adds	r3, #1
 801ec68:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 801ec6a:	6a3b      	ldr	r3, [r7, #32]
 801ec6c:	3301      	adds	r3, #1
 801ec6e:	623b      	str	r3, [r7, #32]
 801ec70:	6a3a      	ldr	r2, [r7, #32]
 801ec72:	697b      	ldr	r3, [r7, #20]
 801ec74:	429a      	cmp	r2, r3
 801ec76:	d3e6      	bcc.n	801ec46 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801ec78:	8bfb      	ldrh	r3, [r7, #30]
 801ec7a:	2b00      	cmp	r3, #0
 801ec7c:	d01e      	beq.n	801ecbc <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801ec7e:	2300      	movs	r3, #0
 801ec80:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801ec82:	69bb      	ldr	r3, [r7, #24]
 801ec84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ec88:	461a      	mov	r2, r3
 801ec8a:	f107 0310 	add.w	r3, r7, #16
 801ec8e:	6812      	ldr	r2, [r2, #0]
 801ec90:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801ec92:	693a      	ldr	r2, [r7, #16]
 801ec94:	6a3b      	ldr	r3, [r7, #32]
 801ec96:	b2db      	uxtb	r3, r3
 801ec98:	00db      	lsls	r3, r3, #3
 801ec9a:	fa22 f303 	lsr.w	r3, r2, r3
 801ec9e:	b2da      	uxtb	r2, r3
 801eca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eca2:	701a      	strb	r2, [r3, #0]
      i++;
 801eca4:	6a3b      	ldr	r3, [r7, #32]
 801eca6:	3301      	adds	r3, #1
 801eca8:	623b      	str	r3, [r7, #32]
      pDest++;
 801ecaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ecac:	3301      	adds	r3, #1
 801ecae:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801ecb0:	8bfb      	ldrh	r3, [r7, #30]
 801ecb2:	3b01      	subs	r3, #1
 801ecb4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801ecb6:	8bfb      	ldrh	r3, [r7, #30]
 801ecb8:	2b00      	cmp	r3, #0
 801ecba:	d1ea      	bne.n	801ec92 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801ecbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801ecbe:	4618      	mov	r0, r3
 801ecc0:	372c      	adds	r7, #44	; 0x2c
 801ecc2:	46bd      	mov	sp, r7
 801ecc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ecc8:	4770      	bx	lr

0801ecca <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801ecca:	b480      	push	{r7}
 801eccc:	b085      	sub	sp, #20
 801ecce:	af00      	add	r7, sp, #0
 801ecd0:	6078      	str	r0, [r7, #4]
 801ecd2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ecd4:	687b      	ldr	r3, [r7, #4]
 801ecd6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801ecd8:	683b      	ldr	r3, [r7, #0]
 801ecda:	781b      	ldrb	r3, [r3, #0]
 801ecdc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801ecde:	683b      	ldr	r3, [r7, #0]
 801ece0:	785b      	ldrb	r3, [r3, #1]
 801ece2:	2b01      	cmp	r3, #1
 801ece4:	d12c      	bne.n	801ed40 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801ece6:	68bb      	ldr	r3, [r7, #8]
 801ece8:	015a      	lsls	r2, r3, #5
 801ecea:	68fb      	ldr	r3, [r7, #12]
 801ecec:	4413      	add	r3, r2
 801ecee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ecf2:	681b      	ldr	r3, [r3, #0]
 801ecf4:	2b00      	cmp	r3, #0
 801ecf6:	db12      	blt.n	801ed1e <USB_EPSetStall+0x54>
 801ecf8:	68bb      	ldr	r3, [r7, #8]
 801ecfa:	2b00      	cmp	r3, #0
 801ecfc:	d00f      	beq.n	801ed1e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801ecfe:	68bb      	ldr	r3, [r7, #8]
 801ed00:	015a      	lsls	r2, r3, #5
 801ed02:	68fb      	ldr	r3, [r7, #12]
 801ed04:	4413      	add	r3, r2
 801ed06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ed0a:	681b      	ldr	r3, [r3, #0]
 801ed0c:	68ba      	ldr	r2, [r7, #8]
 801ed0e:	0151      	lsls	r1, r2, #5
 801ed10:	68fa      	ldr	r2, [r7, #12]
 801ed12:	440a      	add	r2, r1
 801ed14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ed18:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801ed1c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801ed1e:	68bb      	ldr	r3, [r7, #8]
 801ed20:	015a      	lsls	r2, r3, #5
 801ed22:	68fb      	ldr	r3, [r7, #12]
 801ed24:	4413      	add	r3, r2
 801ed26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ed2a:	681b      	ldr	r3, [r3, #0]
 801ed2c:	68ba      	ldr	r2, [r7, #8]
 801ed2e:	0151      	lsls	r1, r2, #5
 801ed30:	68fa      	ldr	r2, [r7, #12]
 801ed32:	440a      	add	r2, r1
 801ed34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ed38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801ed3c:	6013      	str	r3, [r2, #0]
 801ed3e:	e02b      	b.n	801ed98 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801ed40:	68bb      	ldr	r3, [r7, #8]
 801ed42:	015a      	lsls	r2, r3, #5
 801ed44:	68fb      	ldr	r3, [r7, #12]
 801ed46:	4413      	add	r3, r2
 801ed48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ed4c:	681b      	ldr	r3, [r3, #0]
 801ed4e:	2b00      	cmp	r3, #0
 801ed50:	db12      	blt.n	801ed78 <USB_EPSetStall+0xae>
 801ed52:	68bb      	ldr	r3, [r7, #8]
 801ed54:	2b00      	cmp	r3, #0
 801ed56:	d00f      	beq.n	801ed78 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801ed58:	68bb      	ldr	r3, [r7, #8]
 801ed5a:	015a      	lsls	r2, r3, #5
 801ed5c:	68fb      	ldr	r3, [r7, #12]
 801ed5e:	4413      	add	r3, r2
 801ed60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ed64:	681b      	ldr	r3, [r3, #0]
 801ed66:	68ba      	ldr	r2, [r7, #8]
 801ed68:	0151      	lsls	r1, r2, #5
 801ed6a:	68fa      	ldr	r2, [r7, #12]
 801ed6c:	440a      	add	r2, r1
 801ed6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ed72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801ed76:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801ed78:	68bb      	ldr	r3, [r7, #8]
 801ed7a:	015a      	lsls	r2, r3, #5
 801ed7c:	68fb      	ldr	r3, [r7, #12]
 801ed7e:	4413      	add	r3, r2
 801ed80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ed84:	681b      	ldr	r3, [r3, #0]
 801ed86:	68ba      	ldr	r2, [r7, #8]
 801ed88:	0151      	lsls	r1, r2, #5
 801ed8a:	68fa      	ldr	r2, [r7, #12]
 801ed8c:	440a      	add	r2, r1
 801ed8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ed92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801ed96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801ed98:	2300      	movs	r3, #0
}
 801ed9a:	4618      	mov	r0, r3
 801ed9c:	3714      	adds	r7, #20
 801ed9e:	46bd      	mov	sp, r7
 801eda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eda4:	4770      	bx	lr

0801eda6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801eda6:	b480      	push	{r7}
 801eda8:	b085      	sub	sp, #20
 801edaa:	af00      	add	r7, sp, #0
 801edac:	6078      	str	r0, [r7, #4]
 801edae:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801edb0:	687b      	ldr	r3, [r7, #4]
 801edb2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801edb4:	683b      	ldr	r3, [r7, #0]
 801edb6:	781b      	ldrb	r3, [r3, #0]
 801edb8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801edba:	683b      	ldr	r3, [r7, #0]
 801edbc:	785b      	ldrb	r3, [r3, #1]
 801edbe:	2b01      	cmp	r3, #1
 801edc0:	d128      	bne.n	801ee14 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801edc2:	68bb      	ldr	r3, [r7, #8]
 801edc4:	015a      	lsls	r2, r3, #5
 801edc6:	68fb      	ldr	r3, [r7, #12]
 801edc8:	4413      	add	r3, r2
 801edca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801edce:	681b      	ldr	r3, [r3, #0]
 801edd0:	68ba      	ldr	r2, [r7, #8]
 801edd2:	0151      	lsls	r1, r2, #5
 801edd4:	68fa      	ldr	r2, [r7, #12]
 801edd6:	440a      	add	r2, r1
 801edd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801eddc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801ede0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801ede2:	683b      	ldr	r3, [r7, #0]
 801ede4:	78db      	ldrb	r3, [r3, #3]
 801ede6:	2b03      	cmp	r3, #3
 801ede8:	d003      	beq.n	801edf2 <USB_EPClearStall+0x4c>
 801edea:	683b      	ldr	r3, [r7, #0]
 801edec:	78db      	ldrb	r3, [r3, #3]
 801edee:	2b02      	cmp	r3, #2
 801edf0:	d138      	bne.n	801ee64 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801edf2:	68bb      	ldr	r3, [r7, #8]
 801edf4:	015a      	lsls	r2, r3, #5
 801edf6:	68fb      	ldr	r3, [r7, #12]
 801edf8:	4413      	add	r3, r2
 801edfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801edfe:	681b      	ldr	r3, [r3, #0]
 801ee00:	68ba      	ldr	r2, [r7, #8]
 801ee02:	0151      	lsls	r1, r2, #5
 801ee04:	68fa      	ldr	r2, [r7, #12]
 801ee06:	440a      	add	r2, r1
 801ee08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ee0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801ee10:	6013      	str	r3, [r2, #0]
 801ee12:	e027      	b.n	801ee64 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801ee14:	68bb      	ldr	r3, [r7, #8]
 801ee16:	015a      	lsls	r2, r3, #5
 801ee18:	68fb      	ldr	r3, [r7, #12]
 801ee1a:	4413      	add	r3, r2
 801ee1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ee20:	681b      	ldr	r3, [r3, #0]
 801ee22:	68ba      	ldr	r2, [r7, #8]
 801ee24:	0151      	lsls	r1, r2, #5
 801ee26:	68fa      	ldr	r2, [r7, #12]
 801ee28:	440a      	add	r2, r1
 801ee2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ee2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801ee32:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801ee34:	683b      	ldr	r3, [r7, #0]
 801ee36:	78db      	ldrb	r3, [r3, #3]
 801ee38:	2b03      	cmp	r3, #3
 801ee3a:	d003      	beq.n	801ee44 <USB_EPClearStall+0x9e>
 801ee3c:	683b      	ldr	r3, [r7, #0]
 801ee3e:	78db      	ldrb	r3, [r3, #3]
 801ee40:	2b02      	cmp	r3, #2
 801ee42:	d10f      	bne.n	801ee64 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801ee44:	68bb      	ldr	r3, [r7, #8]
 801ee46:	015a      	lsls	r2, r3, #5
 801ee48:	68fb      	ldr	r3, [r7, #12]
 801ee4a:	4413      	add	r3, r2
 801ee4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ee50:	681b      	ldr	r3, [r3, #0]
 801ee52:	68ba      	ldr	r2, [r7, #8]
 801ee54:	0151      	lsls	r1, r2, #5
 801ee56:	68fa      	ldr	r2, [r7, #12]
 801ee58:	440a      	add	r2, r1
 801ee5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ee5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801ee62:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801ee64:	2300      	movs	r3, #0
}
 801ee66:	4618      	mov	r0, r3
 801ee68:	3714      	adds	r7, #20
 801ee6a:	46bd      	mov	sp, r7
 801ee6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee70:	4770      	bx	lr

0801ee72 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801ee72:	b480      	push	{r7}
 801ee74:	b085      	sub	sp, #20
 801ee76:	af00      	add	r7, sp, #0
 801ee78:	6078      	str	r0, [r7, #4]
 801ee7a:	460b      	mov	r3, r1
 801ee7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ee7e:	687b      	ldr	r3, [r7, #4]
 801ee80:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801ee82:	68fb      	ldr	r3, [r7, #12]
 801ee84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ee88:	681b      	ldr	r3, [r3, #0]
 801ee8a:	68fa      	ldr	r2, [r7, #12]
 801ee8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801ee90:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801ee94:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801ee96:	68fb      	ldr	r3, [r7, #12]
 801ee98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ee9c:	681a      	ldr	r2, [r3, #0]
 801ee9e:	78fb      	ldrb	r3, [r7, #3]
 801eea0:	011b      	lsls	r3, r3, #4
 801eea2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801eea6:	68f9      	ldr	r1, [r7, #12]
 801eea8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801eeac:	4313      	orrs	r3, r2
 801eeae:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801eeb0:	2300      	movs	r3, #0
}
 801eeb2:	4618      	mov	r0, r3
 801eeb4:	3714      	adds	r7, #20
 801eeb6:	46bd      	mov	sp, r7
 801eeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eebc:	4770      	bx	lr

0801eebe <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801eebe:	b480      	push	{r7}
 801eec0:	b085      	sub	sp, #20
 801eec2:	af00      	add	r7, sp, #0
 801eec4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801eec6:	687b      	ldr	r3, [r7, #4]
 801eec8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801eeca:	68fb      	ldr	r3, [r7, #12]
 801eecc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801eed0:	681b      	ldr	r3, [r3, #0]
 801eed2:	68fa      	ldr	r2, [r7, #12]
 801eed4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801eed8:	f023 0303 	bic.w	r3, r3, #3
 801eedc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801eede:	68fb      	ldr	r3, [r7, #12]
 801eee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801eee4:	685b      	ldr	r3, [r3, #4]
 801eee6:	68fa      	ldr	r2, [r7, #12]
 801eee8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801eeec:	f023 0302 	bic.w	r3, r3, #2
 801eef0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801eef2:	2300      	movs	r3, #0
}
 801eef4:	4618      	mov	r0, r3
 801eef6:	3714      	adds	r7, #20
 801eef8:	46bd      	mov	sp, r7
 801eefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eefe:	4770      	bx	lr

0801ef00 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801ef00:	b480      	push	{r7}
 801ef02:	b085      	sub	sp, #20
 801ef04:	af00      	add	r7, sp, #0
 801ef06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ef08:	687b      	ldr	r3, [r7, #4]
 801ef0a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801ef0c:	68fb      	ldr	r3, [r7, #12]
 801ef0e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801ef12:	681b      	ldr	r3, [r3, #0]
 801ef14:	68fa      	ldr	r2, [r7, #12]
 801ef16:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801ef1a:	f023 0303 	bic.w	r3, r3, #3
 801ef1e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801ef20:	68fb      	ldr	r3, [r7, #12]
 801ef22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ef26:	685b      	ldr	r3, [r3, #4]
 801ef28:	68fa      	ldr	r2, [r7, #12]
 801ef2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801ef2e:	f043 0302 	orr.w	r3, r3, #2
 801ef32:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801ef34:	2300      	movs	r3, #0
}
 801ef36:	4618      	mov	r0, r3
 801ef38:	3714      	adds	r7, #20
 801ef3a:	46bd      	mov	sp, r7
 801ef3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef40:	4770      	bx	lr

0801ef42 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801ef42:	b480      	push	{r7}
 801ef44:	b085      	sub	sp, #20
 801ef46:	af00      	add	r7, sp, #0
 801ef48:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801ef4a:	687b      	ldr	r3, [r7, #4]
 801ef4c:	695b      	ldr	r3, [r3, #20]
 801ef4e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801ef50:	687b      	ldr	r3, [r7, #4]
 801ef52:	699b      	ldr	r3, [r3, #24]
 801ef54:	68fa      	ldr	r2, [r7, #12]
 801ef56:	4013      	ands	r3, r2
 801ef58:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801ef5a:	68fb      	ldr	r3, [r7, #12]
}
 801ef5c:	4618      	mov	r0, r3
 801ef5e:	3714      	adds	r7, #20
 801ef60:	46bd      	mov	sp, r7
 801ef62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef66:	4770      	bx	lr

0801ef68 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801ef68:	b480      	push	{r7}
 801ef6a:	b085      	sub	sp, #20
 801ef6c:	af00      	add	r7, sp, #0
 801ef6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ef70:	687b      	ldr	r3, [r7, #4]
 801ef72:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801ef74:	68fb      	ldr	r3, [r7, #12]
 801ef76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ef7a:	699b      	ldr	r3, [r3, #24]
 801ef7c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801ef7e:	68fb      	ldr	r3, [r7, #12]
 801ef80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ef84:	69db      	ldr	r3, [r3, #28]
 801ef86:	68ba      	ldr	r2, [r7, #8]
 801ef88:	4013      	ands	r3, r2
 801ef8a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801ef8c:	68bb      	ldr	r3, [r7, #8]
 801ef8e:	0c1b      	lsrs	r3, r3, #16
}
 801ef90:	4618      	mov	r0, r3
 801ef92:	3714      	adds	r7, #20
 801ef94:	46bd      	mov	sp, r7
 801ef96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef9a:	4770      	bx	lr

0801ef9c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801ef9c:	b480      	push	{r7}
 801ef9e:	b085      	sub	sp, #20
 801efa0:	af00      	add	r7, sp, #0
 801efa2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801efa4:	687b      	ldr	r3, [r7, #4]
 801efa6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801efa8:	68fb      	ldr	r3, [r7, #12]
 801efaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801efae:	699b      	ldr	r3, [r3, #24]
 801efb0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801efb2:	68fb      	ldr	r3, [r7, #12]
 801efb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801efb8:	69db      	ldr	r3, [r3, #28]
 801efba:	68ba      	ldr	r2, [r7, #8]
 801efbc:	4013      	ands	r3, r2
 801efbe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801efc0:	68bb      	ldr	r3, [r7, #8]
 801efc2:	b29b      	uxth	r3, r3
}
 801efc4:	4618      	mov	r0, r3
 801efc6:	3714      	adds	r7, #20
 801efc8:	46bd      	mov	sp, r7
 801efca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801efce:	4770      	bx	lr

0801efd0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801efd0:	b480      	push	{r7}
 801efd2:	b085      	sub	sp, #20
 801efd4:	af00      	add	r7, sp, #0
 801efd6:	6078      	str	r0, [r7, #4]
 801efd8:	460b      	mov	r3, r1
 801efda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801efdc:	687b      	ldr	r3, [r7, #4]
 801efde:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801efe0:	78fb      	ldrb	r3, [r7, #3]
 801efe2:	015a      	lsls	r2, r3, #5
 801efe4:	68fb      	ldr	r3, [r7, #12]
 801efe6:	4413      	add	r3, r2
 801efe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801efec:	689b      	ldr	r3, [r3, #8]
 801efee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801eff0:	68fb      	ldr	r3, [r7, #12]
 801eff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801eff6:	695b      	ldr	r3, [r3, #20]
 801eff8:	68ba      	ldr	r2, [r7, #8]
 801effa:	4013      	ands	r3, r2
 801effc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801effe:	68bb      	ldr	r3, [r7, #8]
}
 801f000:	4618      	mov	r0, r3
 801f002:	3714      	adds	r7, #20
 801f004:	46bd      	mov	sp, r7
 801f006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f00a:	4770      	bx	lr

0801f00c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801f00c:	b480      	push	{r7}
 801f00e:	b087      	sub	sp, #28
 801f010:	af00      	add	r7, sp, #0
 801f012:	6078      	str	r0, [r7, #4]
 801f014:	460b      	mov	r3, r1
 801f016:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f018:	687b      	ldr	r3, [r7, #4]
 801f01a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801f01c:	697b      	ldr	r3, [r7, #20]
 801f01e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f022:	691b      	ldr	r3, [r3, #16]
 801f024:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801f026:	697b      	ldr	r3, [r7, #20]
 801f028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f02c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f02e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801f030:	78fb      	ldrb	r3, [r7, #3]
 801f032:	f003 030f 	and.w	r3, r3, #15
 801f036:	68fa      	ldr	r2, [r7, #12]
 801f038:	fa22 f303 	lsr.w	r3, r2, r3
 801f03c:	01db      	lsls	r3, r3, #7
 801f03e:	b2db      	uxtb	r3, r3
 801f040:	693a      	ldr	r2, [r7, #16]
 801f042:	4313      	orrs	r3, r2
 801f044:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801f046:	78fb      	ldrb	r3, [r7, #3]
 801f048:	015a      	lsls	r2, r3, #5
 801f04a:	697b      	ldr	r3, [r7, #20]
 801f04c:	4413      	add	r3, r2
 801f04e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801f052:	689b      	ldr	r3, [r3, #8]
 801f054:	693a      	ldr	r2, [r7, #16]
 801f056:	4013      	ands	r3, r2
 801f058:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801f05a:	68bb      	ldr	r3, [r7, #8]
}
 801f05c:	4618      	mov	r0, r3
 801f05e:	371c      	adds	r7, #28
 801f060:	46bd      	mov	sp, r7
 801f062:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f066:	4770      	bx	lr

0801f068 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801f068:	b480      	push	{r7}
 801f06a:	b083      	sub	sp, #12
 801f06c:	af00      	add	r7, sp, #0
 801f06e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801f070:	687b      	ldr	r3, [r7, #4]
 801f072:	695b      	ldr	r3, [r3, #20]
 801f074:	f003 0301 	and.w	r3, r3, #1
}
 801f078:	4618      	mov	r0, r3
 801f07a:	370c      	adds	r7, #12
 801f07c:	46bd      	mov	sp, r7
 801f07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f082:	4770      	bx	lr

0801f084 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801f084:	b480      	push	{r7}
 801f086:	b085      	sub	sp, #20
 801f088:	af00      	add	r7, sp, #0
 801f08a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f08c:	687b      	ldr	r3, [r7, #4]
 801f08e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801f090:	68fb      	ldr	r3, [r7, #12]
 801f092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801f096:	681b      	ldr	r3, [r3, #0]
 801f098:	68fa      	ldr	r2, [r7, #12]
 801f09a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801f09e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801f0a2:	f023 0307 	bic.w	r3, r3, #7
 801f0a6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801f0a8:	68fb      	ldr	r3, [r7, #12]
 801f0aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f0ae:	685b      	ldr	r3, [r3, #4]
 801f0b0:	68fa      	ldr	r2, [r7, #12]
 801f0b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801f0b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801f0ba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801f0bc:	2300      	movs	r3, #0
}
 801f0be:	4618      	mov	r0, r3
 801f0c0:	3714      	adds	r7, #20
 801f0c2:	46bd      	mov	sp, r7
 801f0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f0c8:	4770      	bx	lr
	...

0801f0cc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 801f0cc:	b480      	push	{r7}
 801f0ce:	b087      	sub	sp, #28
 801f0d0:	af00      	add	r7, sp, #0
 801f0d2:	60f8      	str	r0, [r7, #12]
 801f0d4:	460b      	mov	r3, r1
 801f0d6:	607a      	str	r2, [r7, #4]
 801f0d8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f0da:	68fb      	ldr	r3, [r7, #12]
 801f0dc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801f0de:	68fb      	ldr	r3, [r7, #12]
 801f0e0:	333c      	adds	r3, #60	; 0x3c
 801f0e2:	3304      	adds	r3, #4
 801f0e4:	681b      	ldr	r3, [r3, #0]
 801f0e6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801f0e8:	693b      	ldr	r3, [r7, #16]
 801f0ea:	4a26      	ldr	r2, [pc, #152]	; (801f184 <USB_EP0_OutStart+0xb8>)
 801f0ec:	4293      	cmp	r3, r2
 801f0ee:	d90a      	bls.n	801f106 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801f0f0:	697b      	ldr	r3, [r7, #20]
 801f0f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f0f6:	681b      	ldr	r3, [r3, #0]
 801f0f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801f0fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801f100:	d101      	bne.n	801f106 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801f102:	2300      	movs	r3, #0
 801f104:	e037      	b.n	801f176 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801f106:	697b      	ldr	r3, [r7, #20]
 801f108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f10c:	461a      	mov	r2, r3
 801f10e:	2300      	movs	r3, #0
 801f110:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801f112:	697b      	ldr	r3, [r7, #20]
 801f114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f118:	691b      	ldr	r3, [r3, #16]
 801f11a:	697a      	ldr	r2, [r7, #20]
 801f11c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f120:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801f124:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801f126:	697b      	ldr	r3, [r7, #20]
 801f128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f12c:	691b      	ldr	r3, [r3, #16]
 801f12e:	697a      	ldr	r2, [r7, #20]
 801f130:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f134:	f043 0318 	orr.w	r3, r3, #24
 801f138:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801f13a:	697b      	ldr	r3, [r7, #20]
 801f13c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f140:	691b      	ldr	r3, [r3, #16]
 801f142:	697a      	ldr	r2, [r7, #20]
 801f144:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f148:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801f14c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801f14e:	7afb      	ldrb	r3, [r7, #11]
 801f150:	2b01      	cmp	r3, #1
 801f152:	d10f      	bne.n	801f174 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801f154:	697b      	ldr	r3, [r7, #20]
 801f156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f15a:	461a      	mov	r2, r3
 801f15c:	687b      	ldr	r3, [r7, #4]
 801f15e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801f160:	697b      	ldr	r3, [r7, #20]
 801f162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f166:	681b      	ldr	r3, [r3, #0]
 801f168:	697a      	ldr	r2, [r7, #20]
 801f16a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f16e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801f172:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801f174:	2300      	movs	r3, #0
}
 801f176:	4618      	mov	r0, r3
 801f178:	371c      	adds	r7, #28
 801f17a:	46bd      	mov	sp, r7
 801f17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f180:	4770      	bx	lr
 801f182:	bf00      	nop
 801f184:	4f54300a 	.word	0x4f54300a

0801f188 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801f188:	b480      	push	{r7}
 801f18a:	b085      	sub	sp, #20
 801f18c:	af00      	add	r7, sp, #0
 801f18e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801f190:	2300      	movs	r3, #0
 801f192:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 801f194:	68fb      	ldr	r3, [r7, #12]
 801f196:	3301      	adds	r3, #1
 801f198:	60fb      	str	r3, [r7, #12]
 801f19a:	4a13      	ldr	r2, [pc, #76]	; (801f1e8 <USB_CoreReset+0x60>)
 801f19c:	4293      	cmp	r3, r2
 801f19e:	d901      	bls.n	801f1a4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 801f1a0:	2303      	movs	r3, #3
 801f1a2:	e01a      	b.n	801f1da <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801f1a4:	687b      	ldr	r3, [r7, #4]
 801f1a6:	691b      	ldr	r3, [r3, #16]
 801f1a8:	2b00      	cmp	r3, #0
 801f1aa:	daf3      	bge.n	801f194 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801f1ac:	2300      	movs	r3, #0
 801f1ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801f1b0:	687b      	ldr	r3, [r7, #4]
 801f1b2:	691b      	ldr	r3, [r3, #16]
 801f1b4:	f043 0201 	orr.w	r2, r3, #1
 801f1b8:	687b      	ldr	r3, [r7, #4]
 801f1ba:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801f1bc:	68fb      	ldr	r3, [r7, #12]
 801f1be:	3301      	adds	r3, #1
 801f1c0:	60fb      	str	r3, [r7, #12]
 801f1c2:	4a09      	ldr	r2, [pc, #36]	; (801f1e8 <USB_CoreReset+0x60>)
 801f1c4:	4293      	cmp	r3, r2
 801f1c6:	d901      	bls.n	801f1cc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 801f1c8:	2303      	movs	r3, #3
 801f1ca:	e006      	b.n	801f1da <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801f1cc:	687b      	ldr	r3, [r7, #4]
 801f1ce:	691b      	ldr	r3, [r3, #16]
 801f1d0:	f003 0301 	and.w	r3, r3, #1
 801f1d4:	2b01      	cmp	r3, #1
 801f1d6:	d0f1      	beq.n	801f1bc <USB_CoreReset+0x34>

  return HAL_OK;
 801f1d8:	2300      	movs	r3, #0
}
 801f1da:	4618      	mov	r0, r3
 801f1dc:	3714      	adds	r7, #20
 801f1de:	46bd      	mov	sp, r7
 801f1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f1e4:	4770      	bx	lr
 801f1e6:	bf00      	nop
 801f1e8:	00030d40 	.word	0x00030d40

0801f1ec <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801f1ec:	b580      	push	{r7, lr}
 801f1ee:	b084      	sub	sp, #16
 801f1f0:	af00      	add	r7, sp, #0
 801f1f2:	6078      	str	r0, [r7, #4]
 801f1f4:	460b      	mov	r3, r1
 801f1f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 801f1f8:	f44f 701d 	mov.w	r0, #628	; 0x274
 801f1fc:	f003 fc6e 	bl	8022adc <USBD_static_malloc>
 801f200:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 801f202:	68fb      	ldr	r3, [r7, #12]
 801f204:	2b00      	cmp	r3, #0
 801f206:	d105      	bne.n	801f214 <USBD_MSC_Init+0x28>
  {
    pdev->pClassData = NULL;
 801f208:	687b      	ldr	r3, [r7, #4]
 801f20a:	2200      	movs	r2, #0
 801f20c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 801f210:	2302      	movs	r3, #2
 801f212:	e034      	b.n	801f27e <USBD_MSC_Init+0x92>
  }

  pdev->pClassData = (void *)hmsc;
 801f214:	687b      	ldr	r3, [r7, #4]
 801f216:	68fa      	ldr	r2, [r7, #12]
 801f218:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801f21c:	687b      	ldr	r3, [r7, #4]
 801f21e:	7c1b      	ldrb	r3, [r3, #16]
 801f220:	2b00      	cmp	r3, #0
 801f222:	d115      	bne.n	801f250 <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801f224:	f44f 7300 	mov.w	r3, #512	; 0x200
 801f228:	2202      	movs	r2, #2
 801f22a:	2101      	movs	r1, #1
 801f22c:	6878      	ldr	r0, [r7, #4]
 801f22e:	f003 fac4 	bl	80227ba <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 801f232:	687b      	ldr	r3, [r7, #4]
 801f234:	2201      	movs	r2, #1
 801f236:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801f23a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801f23e:	2202      	movs	r2, #2
 801f240:	2181      	movs	r1, #129	; 0x81
 801f242:	6878      	ldr	r0, [r7, #4]
 801f244:	f003 fab9 	bl	80227ba <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 801f248:	687b      	ldr	r3, [r7, #4]
 801f24a:	2201      	movs	r2, #1
 801f24c:	871a      	strh	r2, [r3, #56]	; 0x38
 801f24e:	e012      	b.n	801f276 <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801f250:	2340      	movs	r3, #64	; 0x40
 801f252:	2202      	movs	r2, #2
 801f254:	2101      	movs	r1, #1
 801f256:	6878      	ldr	r0, [r7, #4]
 801f258:	f003 faaf 	bl	80227ba <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 801f25c:	687b      	ldr	r3, [r7, #4]
 801f25e:	2201      	movs	r2, #1
 801f260:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801f264:	2340      	movs	r3, #64	; 0x40
 801f266:	2202      	movs	r2, #2
 801f268:	2181      	movs	r1, #129	; 0x81
 801f26a:	6878      	ldr	r0, [r7, #4]
 801f26c:	f003 faa5 	bl	80227ba <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 801f270:	687b      	ldr	r3, [r7, #4]
 801f272:	2201      	movs	r2, #1
 801f274:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 801f276:	6878      	ldr	r0, [r7, #4]
 801f278:	f000 f999 	bl	801f5ae <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 801f27c:	2300      	movs	r3, #0
}
 801f27e:	4618      	mov	r0, r3
 801f280:	3710      	adds	r7, #16
 801f282:	46bd      	mov	sp, r7
 801f284:	bd80      	pop	{r7, pc}

0801f286 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801f286:	b580      	push	{r7, lr}
 801f288:	b082      	sub	sp, #8
 801f28a:	af00      	add	r7, sp, #0
 801f28c:	6078      	str	r0, [r7, #4]
 801f28e:	460b      	mov	r3, r1
 801f290:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 801f292:	2101      	movs	r1, #1
 801f294:	6878      	ldr	r0, [r7, #4]
 801f296:	f003 fab6 	bl	8022806 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 801f29a:	687b      	ldr	r3, [r7, #4]
 801f29c:	2200      	movs	r2, #0
 801f29e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 801f2a2:	2181      	movs	r1, #129	; 0x81
 801f2a4:	6878      	ldr	r0, [r7, #4]
 801f2a6:	f003 faae 	bl	8022806 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 801f2aa:	687b      	ldr	r3, [r7, #4]
 801f2ac:	2200      	movs	r2, #0
 801f2ae:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 801f2b0:	687b      	ldr	r3, [r7, #4]
 801f2b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f2b6:	2b00      	cmp	r3, #0
 801f2b8:	d00c      	beq.n	801f2d4 <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 801f2ba:	6878      	ldr	r0, [r7, #4]
 801f2bc:	f000 f9d5 	bl	801f66a <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassData);
 801f2c0:	687b      	ldr	r3, [r7, #4]
 801f2c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f2c6:	4618      	mov	r0, r3
 801f2c8:	f003 fc16 	bl	8022af8 <USBD_static_free>
    pdev->pClassData = NULL;
 801f2cc:	687b      	ldr	r3, [r7, #4]
 801f2ce:	2200      	movs	r2, #0
 801f2d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801f2d4:	2300      	movs	r3, #0
}
 801f2d6:	4618      	mov	r0, r3
 801f2d8:	3708      	adds	r7, #8
 801f2da:	46bd      	mov	sp, r7
 801f2dc:	bd80      	pop	{r7, pc}
	...

0801f2e0 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801f2e0:	b580      	push	{r7, lr}
 801f2e2:	b086      	sub	sp, #24
 801f2e4:	af00      	add	r7, sp, #0
 801f2e6:	6078      	str	r0, [r7, #4]
 801f2e8:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f2ea:	687b      	ldr	r3, [r7, #4]
 801f2ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f2f0:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 801f2f2:	2300      	movs	r3, #0
 801f2f4:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 801f2f6:	2300      	movs	r3, #0
 801f2f8:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 801f2fa:	693b      	ldr	r3, [r7, #16]
 801f2fc:	2b00      	cmp	r3, #0
 801f2fe:	d101      	bne.n	801f304 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801f300:	2303      	movs	r3, #3
 801f302:	e0db      	b.n	801f4bc <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801f304:	683b      	ldr	r3, [r7, #0]
 801f306:	781b      	ldrb	r3, [r3, #0]
 801f308:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801f30c:	2b00      	cmp	r3, #0
 801f30e:	d04e      	beq.n	801f3ae <USBD_MSC_Setup+0xce>
 801f310:	2b20      	cmp	r3, #32
 801f312:	f040 80cb 	bne.w	801f4ac <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 801f316:	683b      	ldr	r3, [r7, #0]
 801f318:	785b      	ldrb	r3, [r3, #1]
 801f31a:	2bfe      	cmp	r3, #254	; 0xfe
 801f31c:	d002      	beq.n	801f324 <USBD_MSC_Setup+0x44>
 801f31e:	2bff      	cmp	r3, #255	; 0xff
 801f320:	d025      	beq.n	801f36e <USBD_MSC_Setup+0x8e>
 801f322:	e03c      	b.n	801f39e <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801f324:	683b      	ldr	r3, [r7, #0]
 801f326:	885b      	ldrh	r3, [r3, #2]
 801f328:	2b00      	cmp	r3, #0
 801f32a:	d119      	bne.n	801f360 <USBD_MSC_Setup+0x80>
 801f32c:	683b      	ldr	r3, [r7, #0]
 801f32e:	88db      	ldrh	r3, [r3, #6]
 801f330:	2b01      	cmp	r3, #1
 801f332:	d115      	bne.n	801f360 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 801f334:	683b      	ldr	r3, [r7, #0]
 801f336:	781b      	ldrb	r3, [r3, #0]
 801f338:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801f33a:	2b00      	cmp	r3, #0
 801f33c:	da10      	bge.n	801f360 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 801f33e:	687b      	ldr	r3, [r7, #4]
 801f340:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801f344:	699b      	ldr	r3, [r3, #24]
 801f346:	4798      	blx	r3
 801f348:	4603      	mov	r3, r0
 801f34a:	461a      	mov	r2, r3
 801f34c:	693b      	ldr	r3, [r7, #16]
 801f34e:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 801f350:	693b      	ldr	r3, [r7, #16]
 801f352:	2201      	movs	r2, #1
 801f354:	4619      	mov	r1, r3
 801f356:	6878      	ldr	r0, [r7, #4]
 801f358:	f002 fe3d 	bl	8021fd6 <USBD_CtlSendData>
 801f35c:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f35e:	e025      	b.n	801f3ac <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 801f360:	6839      	ldr	r1, [r7, #0]
 801f362:	6878      	ldr	r0, [r7, #4]
 801f364:	f002 fdc6 	bl	8021ef4 <USBD_CtlError>
            ret = USBD_FAIL;
 801f368:	2303      	movs	r3, #3
 801f36a:	75fb      	strb	r3, [r7, #23]
          break;
 801f36c:	e01e      	b.n	801f3ac <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801f36e:	683b      	ldr	r3, [r7, #0]
 801f370:	885b      	ldrh	r3, [r3, #2]
 801f372:	2b00      	cmp	r3, #0
 801f374:	d10c      	bne.n	801f390 <USBD_MSC_Setup+0xb0>
 801f376:	683b      	ldr	r3, [r7, #0]
 801f378:	88db      	ldrh	r3, [r3, #6]
 801f37a:	2b00      	cmp	r3, #0
 801f37c:	d108      	bne.n	801f390 <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 801f37e:	683b      	ldr	r3, [r7, #0]
 801f380:	781b      	ldrb	r3, [r3, #0]
 801f382:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801f384:	2b00      	cmp	r3, #0
 801f386:	db03      	blt.n	801f390 <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 801f388:	6878      	ldr	r0, [r7, #4]
 801f38a:	f000 f948 	bl	801f61e <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f38e:	e00d      	b.n	801f3ac <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 801f390:	6839      	ldr	r1, [r7, #0]
 801f392:	6878      	ldr	r0, [r7, #4]
 801f394:	f002 fdae 	bl	8021ef4 <USBD_CtlError>
            ret = USBD_FAIL;
 801f398:	2303      	movs	r3, #3
 801f39a:	75fb      	strb	r3, [r7, #23]
          break;
 801f39c:	e006      	b.n	801f3ac <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801f39e:	6839      	ldr	r1, [r7, #0]
 801f3a0:	6878      	ldr	r0, [r7, #4]
 801f3a2:	f002 fda7 	bl	8021ef4 <USBD_CtlError>
          ret = USBD_FAIL;
 801f3a6:	2303      	movs	r3, #3
 801f3a8:	75fb      	strb	r3, [r7, #23]
          break;
 801f3aa:	bf00      	nop
      }
      break;
 801f3ac:	e085      	b.n	801f4ba <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801f3ae:	683b      	ldr	r3, [r7, #0]
 801f3b0:	785b      	ldrb	r3, [r3, #1]
 801f3b2:	2b0b      	cmp	r3, #11
 801f3b4:	d871      	bhi.n	801f49a <USBD_MSC_Setup+0x1ba>
 801f3b6:	a201      	add	r2, pc, #4	; (adr r2, 801f3bc <USBD_MSC_Setup+0xdc>)
 801f3b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f3bc:	0801f3ed 	.word	0x0801f3ed
 801f3c0:	0801f469 	.word	0x0801f469
 801f3c4:	0801f49b 	.word	0x0801f49b
 801f3c8:	0801f49b 	.word	0x0801f49b
 801f3cc:	0801f49b 	.word	0x0801f49b
 801f3d0:	0801f49b 	.word	0x0801f49b
 801f3d4:	0801f49b 	.word	0x0801f49b
 801f3d8:	0801f49b 	.word	0x0801f49b
 801f3dc:	0801f49b 	.word	0x0801f49b
 801f3e0:	0801f49b 	.word	0x0801f49b
 801f3e4:	0801f417 	.word	0x0801f417
 801f3e8:	0801f441 	.word	0x0801f441
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f3ec:	687b      	ldr	r3, [r7, #4]
 801f3ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f3f2:	b2db      	uxtb	r3, r3
 801f3f4:	2b03      	cmp	r3, #3
 801f3f6:	d107      	bne.n	801f408 <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801f3f8:	f107 030e 	add.w	r3, r7, #14
 801f3fc:	2202      	movs	r2, #2
 801f3fe:	4619      	mov	r1, r3
 801f400:	6878      	ldr	r0, [r7, #4]
 801f402:	f002 fde8 	bl	8021fd6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f406:	e050      	b.n	801f4aa <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801f408:	6839      	ldr	r1, [r7, #0]
 801f40a:	6878      	ldr	r0, [r7, #4]
 801f40c:	f002 fd72 	bl	8021ef4 <USBD_CtlError>
            ret = USBD_FAIL;
 801f410:	2303      	movs	r3, #3
 801f412:	75fb      	strb	r3, [r7, #23]
          break;
 801f414:	e049      	b.n	801f4aa <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f416:	687b      	ldr	r3, [r7, #4]
 801f418:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f41c:	b2db      	uxtb	r3, r3
 801f41e:	2b03      	cmp	r3, #3
 801f420:	d107      	bne.n	801f432 <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 801f422:	693b      	ldr	r3, [r7, #16]
 801f424:	3304      	adds	r3, #4
 801f426:	2201      	movs	r2, #1
 801f428:	4619      	mov	r1, r3
 801f42a:	6878      	ldr	r0, [r7, #4]
 801f42c:	f002 fdd3 	bl	8021fd6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f430:	e03b      	b.n	801f4aa <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801f432:	6839      	ldr	r1, [r7, #0]
 801f434:	6878      	ldr	r0, [r7, #4]
 801f436:	f002 fd5d 	bl	8021ef4 <USBD_CtlError>
            ret = USBD_FAIL;
 801f43a:	2303      	movs	r3, #3
 801f43c:	75fb      	strb	r3, [r7, #23]
          break;
 801f43e:	e034      	b.n	801f4aa <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f440:	687b      	ldr	r3, [r7, #4]
 801f442:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f446:	b2db      	uxtb	r3, r3
 801f448:	2b03      	cmp	r3, #3
 801f44a:	d106      	bne.n	801f45a <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 801f44c:	683b      	ldr	r3, [r7, #0]
 801f44e:	885b      	ldrh	r3, [r3, #2]
 801f450:	b2db      	uxtb	r3, r3
 801f452:	461a      	mov	r2, r3
 801f454:	693b      	ldr	r3, [r7, #16]
 801f456:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f458:	e027      	b.n	801f4aa <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801f45a:	6839      	ldr	r1, [r7, #0]
 801f45c:	6878      	ldr	r0, [r7, #4]
 801f45e:	f002 fd49 	bl	8021ef4 <USBD_CtlError>
            ret = USBD_FAIL;
 801f462:	2303      	movs	r3, #3
 801f464:	75fb      	strb	r3, [r7, #23]
          break;
 801f466:	e020      	b.n	801f4aa <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f468:	687b      	ldr	r3, [r7, #4]
 801f46a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f46e:	b2db      	uxtb	r3, r3
 801f470:	2b03      	cmp	r3, #3
 801f472:	d119      	bne.n	801f4a8 <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 801f474:	683b      	ldr	r3, [r7, #0]
 801f476:	885b      	ldrh	r3, [r3, #2]
 801f478:	2b00      	cmp	r3, #0
 801f47a:	d115      	bne.n	801f4a8 <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 801f47c:	683b      	ldr	r3, [r7, #0]
 801f47e:	889b      	ldrh	r3, [r3, #4]
 801f480:	b2db      	uxtb	r3, r3
 801f482:	4619      	mov	r1, r3
 801f484:	6878      	ldr	r0, [r7, #4]
 801f486:	f003 f9dd 	bl	8022844 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 801f48a:	683b      	ldr	r3, [r7, #0]
 801f48c:	889b      	ldrh	r3, [r3, #4]
 801f48e:	b2db      	uxtb	r3, r3
 801f490:	4619      	mov	r1, r3
 801f492:	6878      	ldr	r0, [r7, #4]
 801f494:	f000 fa82 	bl	801f99c <MSC_BOT_CplClrFeature>
            }
          }
          break;
 801f498:	e006      	b.n	801f4a8 <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 801f49a:	6839      	ldr	r1, [r7, #0]
 801f49c:	6878      	ldr	r0, [r7, #4]
 801f49e:	f002 fd29 	bl	8021ef4 <USBD_CtlError>
          ret = USBD_FAIL;
 801f4a2:	2303      	movs	r3, #3
 801f4a4:	75fb      	strb	r3, [r7, #23]
          break;
 801f4a6:	e000      	b.n	801f4aa <USBD_MSC_Setup+0x1ca>
          break;
 801f4a8:	bf00      	nop
      }
      break;
 801f4aa:	e006      	b.n	801f4ba <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 801f4ac:	6839      	ldr	r1, [r7, #0]
 801f4ae:	6878      	ldr	r0, [r7, #4]
 801f4b0:	f002 fd20 	bl	8021ef4 <USBD_CtlError>
      ret = USBD_FAIL;
 801f4b4:	2303      	movs	r3, #3
 801f4b6:	75fb      	strb	r3, [r7, #23]
      break;
 801f4b8:	bf00      	nop
  }

  return (uint8_t)ret;
 801f4ba:	7dfb      	ldrb	r3, [r7, #23]
}
 801f4bc:	4618      	mov	r0, r3
 801f4be:	3718      	adds	r7, #24
 801f4c0:	46bd      	mov	sp, r7
 801f4c2:	bd80      	pop	{r7, pc}

0801f4c4 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f4c4:	b580      	push	{r7, lr}
 801f4c6:	b082      	sub	sp, #8
 801f4c8:	af00      	add	r7, sp, #0
 801f4ca:	6078      	str	r0, [r7, #4]
 801f4cc:	460b      	mov	r3, r1
 801f4ce:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 801f4d0:	78fb      	ldrb	r3, [r7, #3]
 801f4d2:	4619      	mov	r1, r3
 801f4d4:	6878      	ldr	r0, [r7, #4]
 801f4d6:	f000 f8dc 	bl	801f692 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 801f4da:	2300      	movs	r3, #0
}
 801f4dc:	4618      	mov	r0, r3
 801f4de:	3708      	adds	r7, #8
 801f4e0:	46bd      	mov	sp, r7
 801f4e2:	bd80      	pop	{r7, pc}

0801f4e4 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f4e4:	b580      	push	{r7, lr}
 801f4e6:	b082      	sub	sp, #8
 801f4e8:	af00      	add	r7, sp, #0
 801f4ea:	6078      	str	r0, [r7, #4]
 801f4ec:	460b      	mov	r3, r1
 801f4ee:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 801f4f0:	78fb      	ldrb	r3, [r7, #3]
 801f4f2:	4619      	mov	r1, r3
 801f4f4:	6878      	ldr	r0, [r7, #4]
 801f4f6:	f000 f902 	bl	801f6fe <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 801f4fa:	2300      	movs	r3, #0
}
 801f4fc:	4618      	mov	r0, r3
 801f4fe:	3708      	adds	r7, #8
 801f500:	46bd      	mov	sp, r7
 801f502:	bd80      	pop	{r7, pc}

0801f504 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 801f504:	b480      	push	{r7}
 801f506:	b083      	sub	sp, #12
 801f508:	af00      	add	r7, sp, #0
 801f50a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 801f50c:	687b      	ldr	r3, [r7, #4]
 801f50e:	2220      	movs	r2, #32
 801f510:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 801f512:	4b03      	ldr	r3, [pc, #12]	; (801f520 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 801f514:	4618      	mov	r0, r3
 801f516:	370c      	adds	r7, #12
 801f518:	46bd      	mov	sp, r7
 801f51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f51e:	4770      	bx	lr
 801f520:	200005cc 	.word	0x200005cc

0801f524 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 801f524:	b480      	push	{r7}
 801f526:	b083      	sub	sp, #12
 801f528:	af00      	add	r7, sp, #0
 801f52a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 801f52c:	687b      	ldr	r3, [r7, #4]
 801f52e:	2220      	movs	r2, #32
 801f530:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 801f532:	4b03      	ldr	r3, [pc, #12]	; (801f540 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 801f534:	4618      	mov	r0, r3
 801f536:	370c      	adds	r7, #12
 801f538:	46bd      	mov	sp, r7
 801f53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f53e:	4770      	bx	lr
 801f540:	200005ec 	.word	0x200005ec

0801f544 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801f544:	b480      	push	{r7}
 801f546:	b083      	sub	sp, #12
 801f548:	af00      	add	r7, sp, #0
 801f54a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 801f54c:	687b      	ldr	r3, [r7, #4]
 801f54e:	2220      	movs	r2, #32
 801f550:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 801f552:	4b03      	ldr	r3, [pc, #12]	; (801f560 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 801f554:	4618      	mov	r0, r3
 801f556:	370c      	adds	r7, #12
 801f558:	46bd      	mov	sp, r7
 801f55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f55e:	4770      	bx	lr
 801f560:	2000060c 	.word	0x2000060c

0801f564 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801f564:	b480      	push	{r7}
 801f566:	b083      	sub	sp, #12
 801f568:	af00      	add	r7, sp, #0
 801f56a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 801f56c:	687b      	ldr	r3, [r7, #4]
 801f56e:	220a      	movs	r2, #10
 801f570:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 801f572:	4b03      	ldr	r3, [pc, #12]	; (801f580 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 801f574:	4618      	mov	r0, r3
 801f576:	370c      	adds	r7, #12
 801f578:	46bd      	mov	sp, r7
 801f57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f57e:	4770      	bx	lr
 801f580:	2000062c 	.word	0x2000062c

0801f584 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 801f584:	b480      	push	{r7}
 801f586:	b083      	sub	sp, #12
 801f588:	af00      	add	r7, sp, #0
 801f58a:	6078      	str	r0, [r7, #4]
 801f58c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801f58e:	683b      	ldr	r3, [r7, #0]
 801f590:	2b00      	cmp	r3, #0
 801f592:	d101      	bne.n	801f598 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801f594:	2303      	movs	r3, #3
 801f596:	e004      	b.n	801f5a2 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 801f598:	687b      	ldr	r3, [r7, #4]
 801f59a:	683a      	ldr	r2, [r7, #0]
 801f59c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 801f5a0:	2300      	movs	r3, #0
}
 801f5a2:	4618      	mov	r0, r3
 801f5a4:	370c      	adds	r7, #12
 801f5a6:	46bd      	mov	sp, r7
 801f5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5ac:	4770      	bx	lr

0801f5ae <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 801f5ae:	b580      	push	{r7, lr}
 801f5b0:	b084      	sub	sp, #16
 801f5b2:	af00      	add	r7, sp, #0
 801f5b4:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f5b6:	687b      	ldr	r3, [r7, #4]
 801f5b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f5bc:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f5be:	68fb      	ldr	r3, [r7, #12]
 801f5c0:	2b00      	cmp	r3, #0
 801f5c2:	d028      	beq.n	801f616 <MSC_BOT_Init+0x68>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 801f5c4:	68fb      	ldr	r3, [r7, #12]
 801f5c6:	2200      	movs	r2, #0
 801f5c8:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 801f5ca:	68fb      	ldr	r3, [r7, #12]
 801f5cc:	2200      	movs	r2, #0
 801f5ce:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 801f5d0:	68fb      	ldr	r3, [r7, #12]
 801f5d2:	2200      	movs	r2, #0
 801f5d4:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 801f5d8:	68fb      	ldr	r3, [r7, #12]
 801f5da:	2200      	movs	r2, #0
 801f5dc:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801f5e0:	68fb      	ldr	r3, [r7, #12]
 801f5e2:	2200      	movs	r2, #0
 801f5e4:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 801f5e8:	687b      	ldr	r3, [r7, #4]
 801f5ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801f5ee:	681b      	ldr	r3, [r3, #0]
 801f5f0:	2000      	movs	r0, #0
 801f5f2:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 801f5f4:	2101      	movs	r1, #1
 801f5f6:	6878      	ldr	r0, [r7, #4]
 801f5f8:	f003 f924 	bl	8022844 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 801f5fc:	2181      	movs	r1, #129	; 0x81
 801f5fe:	6878      	ldr	r0, [r7, #4]
 801f600:	f003 f920 	bl	8022844 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 801f604:	68fb      	ldr	r3, [r7, #12]
 801f606:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801f60a:	231f      	movs	r3, #31
 801f60c:	2101      	movs	r1, #1
 801f60e:	6878      	ldr	r0, [r7, #4]
 801f610:	f003 f9e1 	bl	80229d6 <USBD_LL_PrepareReceive>
 801f614:	e000      	b.n	801f618 <MSC_BOT_Init+0x6a>
    return;
 801f616:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801f618:	3710      	adds	r7, #16
 801f61a:	46bd      	mov	sp, r7
 801f61c:	bd80      	pop	{r7, pc}

0801f61e <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 801f61e:	b580      	push	{r7, lr}
 801f620:	b084      	sub	sp, #16
 801f622:	af00      	add	r7, sp, #0
 801f624:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f626:	687b      	ldr	r3, [r7, #4]
 801f628:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f62c:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f62e:	68fb      	ldr	r3, [r7, #12]
 801f630:	2b00      	cmp	r3, #0
 801f632:	d016      	beq.n	801f662 <MSC_BOT_Reset+0x44>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 801f634:	68fb      	ldr	r3, [r7, #12]
 801f636:	2200      	movs	r2, #0
 801f638:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 801f63a:	68fb      	ldr	r3, [r7, #12]
 801f63c:	2201      	movs	r2, #1
 801f63e:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 801f640:	2181      	movs	r1, #129	; 0x81
 801f642:	6878      	ldr	r0, [r7, #4]
 801f644:	f003 f93c 	bl	80228c0 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 801f648:	2101      	movs	r1, #1
 801f64a:	6878      	ldr	r0, [r7, #4]
 801f64c:	f003 f938 	bl	80228c0 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 801f650:	68fb      	ldr	r3, [r7, #12]
 801f652:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801f656:	231f      	movs	r3, #31
 801f658:	2101      	movs	r1, #1
 801f65a:	6878      	ldr	r0, [r7, #4]
 801f65c:	f003 f9bb 	bl	80229d6 <USBD_LL_PrepareReceive>
 801f660:	e000      	b.n	801f664 <MSC_BOT_Reset+0x46>
    return;
 801f662:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801f664:	3710      	adds	r7, #16
 801f666:	46bd      	mov	sp, r7
 801f668:	bd80      	pop	{r7, pc}

0801f66a <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 801f66a:	b480      	push	{r7}
 801f66c:	b085      	sub	sp, #20
 801f66e:	af00      	add	r7, sp, #0
 801f670:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f672:	687b      	ldr	r3, [r7, #4]
 801f674:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f678:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 801f67a:	68fb      	ldr	r3, [r7, #12]
 801f67c:	2b00      	cmp	r3, #0
 801f67e:	d002      	beq.n	801f686 <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 801f680:	68fb      	ldr	r3, [r7, #12]
 801f682:	2200      	movs	r2, #0
 801f684:	721a      	strb	r2, [r3, #8]
  }
}
 801f686:	bf00      	nop
 801f688:	3714      	adds	r7, #20
 801f68a:	46bd      	mov	sp, r7
 801f68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f690:	4770      	bx	lr

0801f692 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f692:	b580      	push	{r7, lr}
 801f694:	b084      	sub	sp, #16
 801f696:	af00      	add	r7, sp, #0
 801f698:	6078      	str	r0, [r7, #4]
 801f69a:	460b      	mov	r3, r1
 801f69c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f69e:	687b      	ldr	r3, [r7, #4]
 801f6a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f6a4:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f6a6:	68fb      	ldr	r3, [r7, #12]
 801f6a8:	2b00      	cmp	r3, #0
 801f6aa:	d020      	beq.n	801f6ee <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 801f6ac:	68fb      	ldr	r3, [r7, #12]
 801f6ae:	7a1b      	ldrb	r3, [r3, #8]
 801f6b0:	2b02      	cmp	r3, #2
 801f6b2:	d005      	beq.n	801f6c0 <MSC_BOT_DataIn+0x2e>
 801f6b4:	2b02      	cmp	r3, #2
 801f6b6:	db1c      	blt.n	801f6f2 <MSC_BOT_DataIn+0x60>
 801f6b8:	3b03      	subs	r3, #3
 801f6ba:	2b01      	cmp	r3, #1
 801f6bc:	d819      	bhi.n	801f6f2 <MSC_BOT_DataIn+0x60>
 801f6be:	e011      	b.n	801f6e4 <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801f6c0:	68fb      	ldr	r3, [r7, #12]
 801f6c2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801f6c6:	68fb      	ldr	r3, [r7, #12]
 801f6c8:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801f6cc:	461a      	mov	r2, r3
 801f6ce:	6878      	ldr	r0, [r7, #4]
 801f6d0:	f000 f992 	bl	801f9f8 <SCSI_ProcessCmd>
 801f6d4:	4603      	mov	r3, r0
 801f6d6:	2b00      	cmp	r3, #0
 801f6d8:	da0d      	bge.n	801f6f6 <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801f6da:	2101      	movs	r1, #1
 801f6dc:	6878      	ldr	r0, [r7, #4]
 801f6de:	f000 f8fb 	bl	801f8d8 <MSC_BOT_SendCSW>
      }
      break;
 801f6e2:	e008      	b.n	801f6f6 <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801f6e4:	2100      	movs	r1, #0
 801f6e6:	6878      	ldr	r0, [r7, #4]
 801f6e8:	f000 f8f6 	bl	801f8d8 <MSC_BOT_SendCSW>
      break;
 801f6ec:	e004      	b.n	801f6f8 <MSC_BOT_DataIn+0x66>
    return;
 801f6ee:	bf00      	nop
 801f6f0:	e002      	b.n	801f6f8 <MSC_BOT_DataIn+0x66>

    default:
      break;
 801f6f2:	bf00      	nop
 801f6f4:	e000      	b.n	801f6f8 <MSC_BOT_DataIn+0x66>
      break;
 801f6f6:	bf00      	nop
  }
}
 801f6f8:	3710      	adds	r7, #16
 801f6fa:	46bd      	mov	sp, r7
 801f6fc:	bd80      	pop	{r7, pc}

0801f6fe <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f6fe:	b580      	push	{r7, lr}
 801f700:	b084      	sub	sp, #16
 801f702:	af00      	add	r7, sp, #0
 801f704:	6078      	str	r0, [r7, #4]
 801f706:	460b      	mov	r3, r1
 801f708:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f70a:	687b      	ldr	r3, [r7, #4]
 801f70c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f710:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f712:	68fb      	ldr	r3, [r7, #12]
 801f714:	2b00      	cmp	r3, #0
 801f716:	d01c      	beq.n	801f752 <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 801f718:	68fb      	ldr	r3, [r7, #12]
 801f71a:	7a1b      	ldrb	r3, [r3, #8]
 801f71c:	2b00      	cmp	r3, #0
 801f71e:	d002      	beq.n	801f726 <MSC_BOT_DataOut+0x28>
 801f720:	2b01      	cmp	r3, #1
 801f722:	d004      	beq.n	801f72e <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 801f724:	e018      	b.n	801f758 <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 801f726:	6878      	ldr	r0, [r7, #4]
 801f728:	f000 f81a 	bl	801f760 <MSC_BOT_CBW_Decode>
      break;
 801f72c:	e014      	b.n	801f758 <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801f72e:	68fb      	ldr	r3, [r7, #12]
 801f730:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801f734:	68fb      	ldr	r3, [r7, #12]
 801f736:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801f73a:	461a      	mov	r2, r3
 801f73c:	6878      	ldr	r0, [r7, #4]
 801f73e:	f000 f95b 	bl	801f9f8 <SCSI_ProcessCmd>
 801f742:	4603      	mov	r3, r0
 801f744:	2b00      	cmp	r3, #0
 801f746:	da06      	bge.n	801f756 <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801f748:	2101      	movs	r1, #1
 801f74a:	6878      	ldr	r0, [r7, #4]
 801f74c:	f000 f8c4 	bl	801f8d8 <MSC_BOT_SendCSW>
      break;
 801f750:	e001      	b.n	801f756 <MSC_BOT_DataOut+0x58>
    return;
 801f752:	bf00      	nop
 801f754:	e000      	b.n	801f758 <MSC_BOT_DataOut+0x5a>
      break;
 801f756:	bf00      	nop
  }
}
 801f758:	3710      	adds	r7, #16
 801f75a:	46bd      	mov	sp, r7
 801f75c:	bd80      	pop	{r7, pc}
	...

0801f760 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 801f760:	b580      	push	{r7, lr}
 801f762:	b084      	sub	sp, #16
 801f764:	af00      	add	r7, sp, #0
 801f766:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f768:	687b      	ldr	r3, [r7, #4]
 801f76a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f76e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f770:	68fb      	ldr	r3, [r7, #12]
 801f772:	2b00      	cmp	r3, #0
 801f774:	d077      	beq.n	801f866 <MSC_BOT_CBW_Decode+0x106>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 801f776:	68fb      	ldr	r3, [r7, #12]
 801f778:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 801f77c:	68fb      	ldr	r3, [r7, #12]
 801f77e:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 801f782:	68fb      	ldr	r3, [r7, #12]
 801f784:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801f788:	68fb      	ldr	r3, [r7, #12]
 801f78a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 801f78e:	2101      	movs	r1, #1
 801f790:	6878      	ldr	r0, [r7, #4]
 801f792:	f003 f941 	bl	8022a18 <USBD_LL_GetRxDataSize>
 801f796:	4603      	mov	r3, r0
 801f798:	2b1f      	cmp	r3, #31
 801f79a:	d114      	bne.n	801f7c6 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801f79c:	68fb      	ldr	r3, [r7, #12]
 801f79e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 801f7a2:	4a34      	ldr	r2, [pc, #208]	; (801f874 <MSC_BOT_CBW_Decode+0x114>)
 801f7a4:	4293      	cmp	r3, r2
 801f7a6:	d10e      	bne.n	801f7c6 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801f7a8:	68fb      	ldr	r3, [r7, #12]
 801f7aa:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801f7ae:	2b01      	cmp	r3, #1
 801f7b0:	d809      	bhi.n	801f7c6 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801f7b2:	68fb      	ldr	r3, [r7, #12]
 801f7b4:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 801f7b8:	2b00      	cmp	r3, #0
 801f7ba:	d004      	beq.n	801f7c6 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bCBLength > 16U))
 801f7bc:	68fb      	ldr	r3, [r7, #12]
 801f7be:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801f7c2:	2b10      	cmp	r3, #16
 801f7c4:	d90e      	bls.n	801f7e4 <MSC_BOT_CBW_Decode+0x84>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801f7c6:	68fb      	ldr	r3, [r7, #12]
 801f7c8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801f7cc:	2320      	movs	r3, #32
 801f7ce:	2205      	movs	r2, #5
 801f7d0:	6878      	ldr	r0, [r7, #4]
 801f7d2:	f000 fdbc 	bl	802034e <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801f7d6:	68fb      	ldr	r3, [r7, #12]
 801f7d8:	2202      	movs	r2, #2
 801f7da:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 801f7dc:	6878      	ldr	r0, [r7, #4]
 801f7de:	f000 f8ab 	bl	801f938 <MSC_BOT_Abort>
 801f7e2:	e043      	b.n	801f86c <MSC_BOT_CBW_Decode+0x10c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801f7e4:	68fb      	ldr	r3, [r7, #12]
 801f7e6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801f7ea:	68fb      	ldr	r3, [r7, #12]
 801f7ec:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801f7f0:	461a      	mov	r2, r3
 801f7f2:	6878      	ldr	r0, [r7, #4]
 801f7f4:	f000 f900 	bl	801f9f8 <SCSI_ProcessCmd>
 801f7f8:	4603      	mov	r3, r0
 801f7fa:	2b00      	cmp	r3, #0
 801f7fc:	da0c      	bge.n	801f818 <MSC_BOT_CBW_Decode+0xb8>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 801f7fe:	68fb      	ldr	r3, [r7, #12]
 801f800:	7a1b      	ldrb	r3, [r3, #8]
 801f802:	2b05      	cmp	r3, #5
 801f804:	d104      	bne.n	801f810 <MSC_BOT_CBW_Decode+0xb0>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801f806:	2101      	movs	r1, #1
 801f808:	6878      	ldr	r0, [r7, #4]
 801f80a:	f000 f865 	bl	801f8d8 <MSC_BOT_SendCSW>
 801f80e:	e02d      	b.n	801f86c <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801f810:	6878      	ldr	r0, [r7, #4]
 801f812:	f000 f891 	bl	801f938 <MSC_BOT_Abort>
 801f816:	e029      	b.n	801f86c <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801f818:	68fb      	ldr	r3, [r7, #12]
 801f81a:	7a1b      	ldrb	r3, [r3, #8]
 801f81c:	2b02      	cmp	r3, #2
 801f81e:	d024      	beq.n	801f86a <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801f820:	68fb      	ldr	r3, [r7, #12]
 801f822:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801f824:	2b01      	cmp	r3, #1
 801f826:	d020      	beq.n	801f86a <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 801f828:	68fb      	ldr	r3, [r7, #12]
 801f82a:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801f82c:	2b03      	cmp	r3, #3
 801f82e:	d01c      	beq.n	801f86a <MSC_BOT_CBW_Decode+0x10a>
    {
      if (hmsc->bot_data_length > 0U)
 801f830:	68fb      	ldr	r3, [r7, #12]
 801f832:	68db      	ldr	r3, [r3, #12]
 801f834:	2b00      	cmp	r3, #0
 801f836:	d009      	beq.n	801f84c <MSC_BOT_CBW_Decode+0xec>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 801f838:	68fb      	ldr	r3, [r7, #12]
 801f83a:	f103 0110 	add.w	r1, r3, #16
 801f83e:	68fb      	ldr	r3, [r7, #12]
 801f840:	68db      	ldr	r3, [r3, #12]
 801f842:	461a      	mov	r2, r3
 801f844:	6878      	ldr	r0, [r7, #4]
 801f846:	f000 f817 	bl	801f878 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 801f84a:	e00f      	b.n	801f86c <MSC_BOT_CBW_Decode+0x10c>
      }
      else if (hmsc->bot_data_length == 0U)
 801f84c:	68fb      	ldr	r3, [r7, #12]
 801f84e:	68db      	ldr	r3, [r3, #12]
 801f850:	2b00      	cmp	r3, #0
 801f852:	d104      	bne.n	801f85e <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801f854:	2100      	movs	r1, #0
 801f856:	6878      	ldr	r0, [r7, #4]
 801f858:	f000 f83e 	bl	801f8d8 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 801f85c:	e006      	b.n	801f86c <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801f85e:	6878      	ldr	r0, [r7, #4]
 801f860:	f000 f86a 	bl	801f938 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 801f864:	e002      	b.n	801f86c <MSC_BOT_CBW_Decode+0x10c>
    return;
 801f866:	bf00      	nop
 801f868:	e000      	b.n	801f86c <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    else
    {
      return;
 801f86a:	bf00      	nop
    }
  }
}
 801f86c:	3710      	adds	r7, #16
 801f86e:	46bd      	mov	sp, r7
 801f870:	bd80      	pop	{r7, pc}
 801f872:	bf00      	nop
 801f874:	43425355 	.word	0x43425355

0801f878 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 801f878:	b580      	push	{r7, lr}
 801f87a:	b086      	sub	sp, #24
 801f87c:	af00      	add	r7, sp, #0
 801f87e:	60f8      	str	r0, [r7, #12]
 801f880:	60b9      	str	r1, [r7, #8]
 801f882:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f884:	68fb      	ldr	r3, [r7, #12]
 801f886:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f88a:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 801f88c:	697b      	ldr	r3, [r7, #20]
 801f88e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801f892:	687a      	ldr	r2, [r7, #4]
 801f894:	4293      	cmp	r3, r2
 801f896:	bf28      	it	cs
 801f898:	4613      	movcs	r3, r2
 801f89a:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801f89c:	697b      	ldr	r3, [r7, #20]
 801f89e:	2b00      	cmp	r3, #0
 801f8a0:	d015      	beq.n	801f8ce <MSC_BOT_SendData+0x56>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 801f8a2:	697b      	ldr	r3, [r7, #20]
 801f8a4:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 801f8a8:	687b      	ldr	r3, [r7, #4]
 801f8aa:	1ad2      	subs	r2, r2, r3
 801f8ac:	697b      	ldr	r3, [r7, #20]
 801f8ae:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 801f8b2:	697b      	ldr	r3, [r7, #20]
 801f8b4:	2200      	movs	r2, #0
 801f8b6:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 801f8ba:	697b      	ldr	r3, [r7, #20]
 801f8bc:	2204      	movs	r2, #4
 801f8be:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 801f8c0:	693b      	ldr	r3, [r7, #16]
 801f8c2:	68ba      	ldr	r2, [r7, #8]
 801f8c4:	2181      	movs	r1, #129	; 0x81
 801f8c6:	68f8      	ldr	r0, [r7, #12]
 801f8c8:	f003 f864 	bl	8022994 <USBD_LL_Transmit>
 801f8cc:	e000      	b.n	801f8d0 <MSC_BOT_SendData+0x58>
    return;
 801f8ce:	bf00      	nop
}
 801f8d0:	3718      	adds	r7, #24
 801f8d2:	46bd      	mov	sp, r7
 801f8d4:	bd80      	pop	{r7, pc}
	...

0801f8d8 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 801f8d8:	b580      	push	{r7, lr}
 801f8da:	b084      	sub	sp, #16
 801f8dc:	af00      	add	r7, sp, #0
 801f8de:	6078      	str	r0, [r7, #4]
 801f8e0:	460b      	mov	r3, r1
 801f8e2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f8e4:	687b      	ldr	r3, [r7, #4]
 801f8e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f8ea:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f8ec:	68fb      	ldr	r3, [r7, #12]
 801f8ee:	2b00      	cmp	r3, #0
 801f8f0:	d01b      	beq.n	801f92a <MSC_BOT_SendCSW+0x52>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 801f8f2:	68fb      	ldr	r3, [r7, #12]
 801f8f4:	4a0f      	ldr	r2, [pc, #60]	; (801f934 <MSC_BOT_SendCSW+0x5c>)
 801f8f6:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 801f8fa:	68fb      	ldr	r3, [r7, #12]
 801f8fc:	78fa      	ldrb	r2, [r7, #3]
 801f8fe:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 801f902:	68fb      	ldr	r3, [r7, #12]
 801f904:	2200      	movs	r2, #0
 801f906:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 801f908:	68fb      	ldr	r3, [r7, #12]
 801f90a:	f503 720c 	add.w	r2, r3, #560	; 0x230
 801f90e:	230d      	movs	r3, #13
 801f910:	2181      	movs	r1, #129	; 0x81
 801f912:	6878      	ldr	r0, [r7, #4]
 801f914:	f003 f83e 	bl	8022994 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 801f918:	68fb      	ldr	r3, [r7, #12]
 801f91a:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801f91e:	231f      	movs	r3, #31
 801f920:	2101      	movs	r1, #1
 801f922:	6878      	ldr	r0, [r7, #4]
 801f924:	f003 f857 	bl	80229d6 <USBD_LL_PrepareReceive>
 801f928:	e000      	b.n	801f92c <MSC_BOT_SendCSW+0x54>
    return;
 801f92a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801f92c:	3710      	adds	r7, #16
 801f92e:	46bd      	mov	sp, r7
 801f930:	bd80      	pop	{r7, pc}
 801f932:	bf00      	nop
 801f934:	53425355 	.word	0x53425355

0801f938 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 801f938:	b580      	push	{r7, lr}
 801f93a:	b084      	sub	sp, #16
 801f93c:	af00      	add	r7, sp, #0
 801f93e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f940:	687b      	ldr	r3, [r7, #4]
 801f942:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f946:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f948:	68fb      	ldr	r3, [r7, #12]
 801f94a:	2b00      	cmp	r3, #0
 801f94c:	d022      	beq.n	801f994 <MSC_BOT_Abort+0x5c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 801f94e:	68fb      	ldr	r3, [r7, #12]
 801f950:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801f954:	2b00      	cmp	r3, #0
 801f956:	d10c      	bne.n	801f972 <MSC_BOT_Abort+0x3a>
      (hmsc->cbw.dDataLength != 0U) &&
 801f958:	68fb      	ldr	r3, [r7, #12]
 801f95a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 801f95e:	2b00      	cmp	r3, #0
 801f960:	d007      	beq.n	801f972 <MSC_BOT_Abort+0x3a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 801f962:	68fb      	ldr	r3, [r7, #12]
 801f964:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 801f966:	2b00      	cmp	r3, #0
 801f968:	d103      	bne.n	801f972 <MSC_BOT_Abort+0x3a>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 801f96a:	2101      	movs	r1, #1
 801f96c:	6878      	ldr	r0, [r7, #4]
 801f96e:	f002 ff88 	bl	8022882 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 801f972:	2181      	movs	r1, #129	; 0x81
 801f974:	6878      	ldr	r0, [r7, #4]
 801f976:	f002 ff84 	bl	8022882 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 801f97a:	68fb      	ldr	r3, [r7, #12]
 801f97c:	7a5b      	ldrb	r3, [r3, #9]
 801f97e:	2b02      	cmp	r3, #2
 801f980:	d109      	bne.n	801f996 <MSC_BOT_Abort+0x5e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 801f982:	2181      	movs	r1, #129	; 0x81
 801f984:	6878      	ldr	r0, [r7, #4]
 801f986:	f002 ff7c 	bl	8022882 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 801f98a:	2101      	movs	r1, #1
 801f98c:	6878      	ldr	r0, [r7, #4]
 801f98e:	f002 ff78 	bl	8022882 <USBD_LL_StallEP>
 801f992:	e000      	b.n	801f996 <MSC_BOT_Abort+0x5e>
    return;
 801f994:	bf00      	nop
  }
}
 801f996:	3710      	adds	r7, #16
 801f998:	46bd      	mov	sp, r7
 801f99a:	bd80      	pop	{r7, pc}

0801f99c <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f99c:	b580      	push	{r7, lr}
 801f99e:	b084      	sub	sp, #16
 801f9a0:	af00      	add	r7, sp, #0
 801f9a2:	6078      	str	r0, [r7, #4]
 801f9a4:	460b      	mov	r3, r1
 801f9a6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f9a8:	687b      	ldr	r3, [r7, #4]
 801f9aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f9ae:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f9b0:	68fb      	ldr	r3, [r7, #12]
 801f9b2:	2b00      	cmp	r3, #0
 801f9b4:	d019      	beq.n	801f9ea <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 801f9b6:	68fb      	ldr	r3, [r7, #12]
 801f9b8:	7a5b      	ldrb	r3, [r3, #9]
 801f9ba:	2b02      	cmp	r3, #2
 801f9bc:	d108      	bne.n	801f9d0 <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 801f9be:	2181      	movs	r1, #129	; 0x81
 801f9c0:	6878      	ldr	r0, [r7, #4]
 801f9c2:	f002 ff5e 	bl	8022882 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 801f9c6:	2101      	movs	r1, #1
 801f9c8:	6878      	ldr	r0, [r7, #4]
 801f9ca:	f002 ff5a 	bl	8022882 <USBD_LL_StallEP>
 801f9ce:	e00f      	b.n	801f9f0 <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 801f9d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801f9d4:	2b00      	cmp	r3, #0
 801f9d6:	da0a      	bge.n	801f9ee <MSC_BOT_CplClrFeature+0x52>
 801f9d8:	68fb      	ldr	r3, [r7, #12]
 801f9da:	7a5b      	ldrb	r3, [r3, #9]
 801f9dc:	2b01      	cmp	r3, #1
 801f9de:	d006      	beq.n	801f9ee <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801f9e0:	2101      	movs	r1, #1
 801f9e2:	6878      	ldr	r0, [r7, #4]
 801f9e4:	f7ff ff78 	bl	801f8d8 <MSC_BOT_SendCSW>
 801f9e8:	e002      	b.n	801f9f0 <MSC_BOT_CplClrFeature+0x54>
    return;
 801f9ea:	bf00      	nop
 801f9ec:	e000      	b.n	801f9f0 <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 801f9ee:	bf00      	nop
  }
}
 801f9f0:	3710      	adds	r7, #16
 801f9f2:	46bd      	mov	sp, r7
 801f9f4:	bd80      	pop	{r7, pc}
	...

0801f9f8 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 801f9f8:	b580      	push	{r7, lr}
 801f9fa:	b086      	sub	sp, #24
 801f9fc:	af00      	add	r7, sp, #0
 801f9fe:	60f8      	str	r0, [r7, #12]
 801fa00:	460b      	mov	r3, r1
 801fa02:	607a      	str	r2, [r7, #4]
 801fa04:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fa06:	68fb      	ldr	r3, [r7, #12]
 801fa08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fa0c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801fa0e:	693b      	ldr	r3, [r7, #16]
 801fa10:	2b00      	cmp	r3, #0
 801fa12:	d102      	bne.n	801fa1a <SCSI_ProcessCmd+0x22>
  {
    return -1;
 801fa14:	f04f 33ff 	mov.w	r3, #4294967295
 801fa18:	e168      	b.n	801fcec <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 801fa1a:	687b      	ldr	r3, [r7, #4]
 801fa1c:	781b      	ldrb	r3, [r3, #0]
 801fa1e:	2baa      	cmp	r3, #170	; 0xaa
 801fa20:	f000 8144 	beq.w	801fcac <SCSI_ProcessCmd+0x2b4>
 801fa24:	2baa      	cmp	r3, #170	; 0xaa
 801fa26:	f300 8153 	bgt.w	801fcd0 <SCSI_ProcessCmd+0x2d8>
 801fa2a:	2ba8      	cmp	r3, #168	; 0xa8
 801fa2c:	f000 812c 	beq.w	801fc88 <SCSI_ProcessCmd+0x290>
 801fa30:	2ba8      	cmp	r3, #168	; 0xa8
 801fa32:	f300 814d 	bgt.w	801fcd0 <SCSI_ProcessCmd+0x2d8>
 801fa36:	2b5a      	cmp	r3, #90	; 0x5a
 801fa38:	f300 80c0 	bgt.w	801fbbc <SCSI_ProcessCmd+0x1c4>
 801fa3c:	2b00      	cmp	r3, #0
 801fa3e:	f2c0 8147 	blt.w	801fcd0 <SCSI_ProcessCmd+0x2d8>
 801fa42:	2b5a      	cmp	r3, #90	; 0x5a
 801fa44:	f200 8144 	bhi.w	801fcd0 <SCSI_ProcessCmd+0x2d8>
 801fa48:	a201      	add	r2, pc, #4	; (adr r2, 801fa50 <SCSI_ProcessCmd+0x58>)
 801fa4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fa4e:	bf00      	nop
 801fa50:	0801fbc3 	.word	0x0801fbc3
 801fa54:	0801fcd1 	.word	0x0801fcd1
 801fa58:	0801fcd1 	.word	0x0801fcd1
 801fa5c:	0801fbd5 	.word	0x0801fbd5
 801fa60:	0801fcd1 	.word	0x0801fcd1
 801fa64:	0801fcd1 	.word	0x0801fcd1
 801fa68:	0801fcd1 	.word	0x0801fcd1
 801fa6c:	0801fcd1 	.word	0x0801fcd1
 801fa70:	0801fcd1 	.word	0x0801fcd1
 801fa74:	0801fcd1 	.word	0x0801fcd1
 801fa78:	0801fcd1 	.word	0x0801fcd1
 801fa7c:	0801fcd1 	.word	0x0801fcd1
 801fa80:	0801fcd1 	.word	0x0801fcd1
 801fa84:	0801fcd1 	.word	0x0801fcd1
 801fa88:	0801fcd1 	.word	0x0801fcd1
 801fa8c:	0801fcd1 	.word	0x0801fcd1
 801fa90:	0801fcd1 	.word	0x0801fcd1
 801fa94:	0801fcd1 	.word	0x0801fcd1
 801fa98:	0801fbe7 	.word	0x0801fbe7
 801fa9c:	0801fcd1 	.word	0x0801fcd1
 801faa0:	0801fcd1 	.word	0x0801fcd1
 801faa4:	0801fcd1 	.word	0x0801fcd1
 801faa8:	0801fcd1 	.word	0x0801fcd1
 801faac:	0801fcd1 	.word	0x0801fcd1
 801fab0:	0801fcd1 	.word	0x0801fcd1
 801fab4:	0801fcd1 	.word	0x0801fcd1
 801fab8:	0801fc1d 	.word	0x0801fc1d
 801fabc:	0801fbf9 	.word	0x0801fbf9
 801fac0:	0801fcd1 	.word	0x0801fcd1
 801fac4:	0801fcd1 	.word	0x0801fcd1
 801fac8:	0801fc0b 	.word	0x0801fc0b
 801facc:	0801fcd1 	.word	0x0801fcd1
 801fad0:	0801fcd1 	.word	0x0801fcd1
 801fad4:	0801fcd1 	.word	0x0801fcd1
 801fad8:	0801fcd1 	.word	0x0801fcd1
 801fadc:	0801fc41 	.word	0x0801fc41
 801fae0:	0801fcd1 	.word	0x0801fcd1
 801fae4:	0801fc53 	.word	0x0801fc53
 801fae8:	0801fcd1 	.word	0x0801fcd1
 801faec:	0801fcd1 	.word	0x0801fcd1
 801faf0:	0801fc77 	.word	0x0801fc77
 801faf4:	0801fcd1 	.word	0x0801fcd1
 801faf8:	0801fc9b 	.word	0x0801fc9b
 801fafc:	0801fcd1 	.word	0x0801fcd1
 801fb00:	0801fcd1 	.word	0x0801fcd1
 801fb04:	0801fcd1 	.word	0x0801fcd1
 801fb08:	0801fcd1 	.word	0x0801fcd1
 801fb0c:	0801fcbf 	.word	0x0801fcbf
 801fb10:	0801fcd1 	.word	0x0801fcd1
 801fb14:	0801fcd1 	.word	0x0801fcd1
 801fb18:	0801fcd1 	.word	0x0801fcd1
 801fb1c:	0801fcd1 	.word	0x0801fcd1
 801fb20:	0801fcd1 	.word	0x0801fcd1
 801fb24:	0801fcd1 	.word	0x0801fcd1
 801fb28:	0801fcd1 	.word	0x0801fcd1
 801fb2c:	0801fcd1 	.word	0x0801fcd1
 801fb30:	0801fcd1 	.word	0x0801fcd1
 801fb34:	0801fcd1 	.word	0x0801fcd1
 801fb38:	0801fcd1 	.word	0x0801fcd1
 801fb3c:	0801fcd1 	.word	0x0801fcd1
 801fb40:	0801fcd1 	.word	0x0801fcd1
 801fb44:	0801fcd1 	.word	0x0801fcd1
 801fb48:	0801fcd1 	.word	0x0801fcd1
 801fb4c:	0801fcd1 	.word	0x0801fcd1
 801fb50:	0801fcd1 	.word	0x0801fcd1
 801fb54:	0801fcd1 	.word	0x0801fcd1
 801fb58:	0801fcd1 	.word	0x0801fcd1
 801fb5c:	0801fcd1 	.word	0x0801fcd1
 801fb60:	0801fcd1 	.word	0x0801fcd1
 801fb64:	0801fcd1 	.word	0x0801fcd1
 801fb68:	0801fcd1 	.word	0x0801fcd1
 801fb6c:	0801fcd1 	.word	0x0801fcd1
 801fb70:	0801fcd1 	.word	0x0801fcd1
 801fb74:	0801fcd1 	.word	0x0801fcd1
 801fb78:	0801fcd1 	.word	0x0801fcd1
 801fb7c:	0801fcd1 	.word	0x0801fcd1
 801fb80:	0801fcd1 	.word	0x0801fcd1
 801fb84:	0801fcd1 	.word	0x0801fcd1
 801fb88:	0801fcd1 	.word	0x0801fcd1
 801fb8c:	0801fcd1 	.word	0x0801fcd1
 801fb90:	0801fcd1 	.word	0x0801fcd1
 801fb94:	0801fcd1 	.word	0x0801fcd1
 801fb98:	0801fcd1 	.word	0x0801fcd1
 801fb9c:	0801fcd1 	.word	0x0801fcd1
 801fba0:	0801fcd1 	.word	0x0801fcd1
 801fba4:	0801fcd1 	.word	0x0801fcd1
 801fba8:	0801fcd1 	.word	0x0801fcd1
 801fbac:	0801fcd1 	.word	0x0801fcd1
 801fbb0:	0801fcd1 	.word	0x0801fcd1
 801fbb4:	0801fcd1 	.word	0x0801fcd1
 801fbb8:	0801fc2f 	.word	0x0801fc2f
 801fbbc:	2b9e      	cmp	r3, #158	; 0x9e
 801fbbe:	d051      	beq.n	801fc64 <SCSI_ProcessCmd+0x26c>
 801fbc0:	e086      	b.n	801fcd0 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 801fbc2:	7afb      	ldrb	r3, [r7, #11]
 801fbc4:	687a      	ldr	r2, [r7, #4]
 801fbc6:	4619      	mov	r1, r3
 801fbc8:	68f8      	ldr	r0, [r7, #12]
 801fbca:	f000 f893 	bl	801fcf4 <SCSI_TestUnitReady>
 801fbce:	4603      	mov	r3, r0
 801fbd0:	75fb      	strb	r3, [r7, #23]
      break;
 801fbd2:	e089      	b.n	801fce8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 801fbd4:	7afb      	ldrb	r3, [r7, #11]
 801fbd6:	687a      	ldr	r2, [r7, #4]
 801fbd8:	4619      	mov	r1, r3
 801fbda:	68f8      	ldr	r0, [r7, #12]
 801fbdc:	f000 fb38 	bl	8020250 <SCSI_RequestSense>
 801fbe0:	4603      	mov	r3, r0
 801fbe2:	75fb      	strb	r3, [r7, #23]
      break;
 801fbe4:	e080      	b.n	801fce8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 801fbe6:	7afb      	ldrb	r3, [r7, #11]
 801fbe8:	687a      	ldr	r2, [r7, #4]
 801fbea:	4619      	mov	r1, r3
 801fbec:	68f8      	ldr	r0, [r7, #12]
 801fbee:	f000 f8d1 	bl	801fd94 <SCSI_Inquiry>
 801fbf2:	4603      	mov	r3, r0
 801fbf4:	75fb      	strb	r3, [r7, #23]
      break;
 801fbf6:	e077      	b.n	801fce8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 801fbf8:	7afb      	ldrb	r3, [r7, #11]
 801fbfa:	687a      	ldr	r2, [r7, #4]
 801fbfc:	4619      	mov	r1, r3
 801fbfe:	68f8      	ldr	r0, [r7, #12]
 801fc00:	f000 fbec 	bl	80203dc <SCSI_StartStopUnit>
 801fc04:	4603      	mov	r3, r0
 801fc06:	75fb      	strb	r3, [r7, #23]
      break;
 801fc08:	e06e      	b.n	801fce8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 801fc0a:	7afb      	ldrb	r3, [r7, #11]
 801fc0c:	687a      	ldr	r2, [r7, #4]
 801fc0e:	4619      	mov	r1, r3
 801fc10:	68f8      	ldr	r0, [r7, #12]
 801fc12:	f000 fc34 	bl	802047e <SCSI_AllowPreventRemovable>
 801fc16:	4603      	mov	r3, r0
 801fc18:	75fb      	strb	r3, [r7, #23]
      break;
 801fc1a:	e065      	b.n	801fce8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 801fc1c:	7afb      	ldrb	r3, [r7, #11]
 801fc1e:	687a      	ldr	r2, [r7, #4]
 801fc20:	4619      	mov	r1, r3
 801fc22:	68f8      	ldr	r0, [r7, #12]
 801fc24:	f000 fabc 	bl	80201a0 <SCSI_ModeSense6>
 801fc28:	4603      	mov	r3, r0
 801fc2a:	75fb      	strb	r3, [r7, #23]
      break;
 801fc2c:	e05c      	b.n	801fce8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 801fc2e:	7afb      	ldrb	r3, [r7, #11]
 801fc30:	687a      	ldr	r2, [r7, #4]
 801fc32:	4619      	mov	r1, r3
 801fc34:	68f8      	ldr	r0, [r7, #12]
 801fc36:	f000 fadf 	bl	80201f8 <SCSI_ModeSense10>
 801fc3a:	4603      	mov	r3, r0
 801fc3c:	75fb      	strb	r3, [r7, #23]
      break;
 801fc3e:	e053      	b.n	801fce8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 801fc40:	7afb      	ldrb	r3, [r7, #11]
 801fc42:	687a      	ldr	r2, [r7, #4]
 801fc44:	4619      	mov	r1, r3
 801fc46:	68f8      	ldr	r0, [r7, #12]
 801fc48:	f000 fa37 	bl	80200ba <SCSI_ReadFormatCapacity>
 801fc4c:	4603      	mov	r3, r0
 801fc4e:	75fb      	strb	r3, [r7, #23]
      break;
 801fc50:	e04a      	b.n	801fce8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 801fc52:	7afb      	ldrb	r3, [r7, #11]
 801fc54:	687a      	ldr	r2, [r7, #4]
 801fc56:	4619      	mov	r1, r3
 801fc58:	68f8      	ldr	r0, [r7, #12]
 801fc5a:	f000 f90f 	bl	801fe7c <SCSI_ReadCapacity10>
 801fc5e:	4603      	mov	r3, r0
 801fc60:	75fb      	strb	r3, [r7, #23]
      break;
 801fc62:	e041      	b.n	801fce8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 801fc64:	7afb      	ldrb	r3, [r7, #11]
 801fc66:	687a      	ldr	r2, [r7, #4]
 801fc68:	4619      	mov	r1, r3
 801fc6a:	68f8      	ldr	r0, [r7, #12]
 801fc6c:	f000 f97b 	bl	801ff66 <SCSI_ReadCapacity16>
 801fc70:	4603      	mov	r3, r0
 801fc72:	75fb      	strb	r3, [r7, #23]
      break;
 801fc74:	e038      	b.n	801fce8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 801fc76:	7afb      	ldrb	r3, [r7, #11]
 801fc78:	687a      	ldr	r2, [r7, #4]
 801fc7a:	4619      	mov	r1, r3
 801fc7c:	68f8      	ldr	r0, [r7, #12]
 801fc7e:	f000 fc27 	bl	80204d0 <SCSI_Read10>
 801fc82:	4603      	mov	r3, r0
 801fc84:	75fb      	strb	r3, [r7, #23]
      break;
 801fc86:	e02f      	b.n	801fce8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 801fc88:	7afb      	ldrb	r3, [r7, #11]
 801fc8a:	687a      	ldr	r2, [r7, #4]
 801fc8c:	4619      	mov	r1, r3
 801fc8e:	68f8      	ldr	r0, [r7, #12]
 801fc90:	f000 fcbe 	bl	8020610 <SCSI_Read12>
 801fc94:	4603      	mov	r3, r0
 801fc96:	75fb      	strb	r3, [r7, #23]
      break;
 801fc98:	e026      	b.n	801fce8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 801fc9a:	7afb      	ldrb	r3, [r7, #11]
 801fc9c:	687a      	ldr	r2, [r7, #4]
 801fc9e:	4619      	mov	r1, r3
 801fca0:	68f8      	ldr	r0, [r7, #12]
 801fca2:	f000 fd60 	bl	8020766 <SCSI_Write10>
 801fca6:	4603      	mov	r3, r0
 801fca8:	75fb      	strb	r3, [r7, #23]
      break;
 801fcaa:	e01d      	b.n	801fce8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 801fcac:	7afb      	ldrb	r3, [r7, #11]
 801fcae:	687a      	ldr	r2, [r7, #4]
 801fcb0:	4619      	mov	r1, r3
 801fcb2:	68f8      	ldr	r0, [r7, #12]
 801fcb4:	f000 fe1c 	bl	80208f0 <SCSI_Write12>
 801fcb8:	4603      	mov	r3, r0
 801fcba:	75fb      	strb	r3, [r7, #23]
      break;
 801fcbc:	e014      	b.n	801fce8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 801fcbe:	7afb      	ldrb	r3, [r7, #11]
 801fcc0:	687a      	ldr	r2, [r7, #4]
 801fcc2:	4619      	mov	r1, r3
 801fcc4:	68f8      	ldr	r0, [r7, #12]
 801fcc6:	f000 fee8 	bl	8020a9a <SCSI_Verify10>
 801fcca:	4603      	mov	r3, r0
 801fccc:	75fb      	strb	r3, [r7, #23]
      break;
 801fcce:	e00b      	b.n	801fce8 <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 801fcd0:	7af9      	ldrb	r1, [r7, #11]
 801fcd2:	2320      	movs	r3, #32
 801fcd4:	2205      	movs	r2, #5
 801fcd6:	68f8      	ldr	r0, [r7, #12]
 801fcd8:	f000 fb39 	bl	802034e <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801fcdc:	693b      	ldr	r3, [r7, #16]
 801fcde:	2202      	movs	r2, #2
 801fce0:	725a      	strb	r2, [r3, #9]
      ret = -1;
 801fce2:	23ff      	movs	r3, #255	; 0xff
 801fce4:	75fb      	strb	r3, [r7, #23]
      break;
 801fce6:	bf00      	nop
  }

  return ret;
 801fce8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801fcec:	4618      	mov	r0, r3
 801fcee:	3718      	adds	r7, #24
 801fcf0:	46bd      	mov	sp, r7
 801fcf2:	bd80      	pop	{r7, pc}

0801fcf4 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801fcf4:	b580      	push	{r7, lr}
 801fcf6:	b086      	sub	sp, #24
 801fcf8:	af00      	add	r7, sp, #0
 801fcfa:	60f8      	str	r0, [r7, #12]
 801fcfc:	460b      	mov	r3, r1
 801fcfe:	607a      	str	r2, [r7, #4]
 801fd00:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fd02:	68fb      	ldr	r3, [r7, #12]
 801fd04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fd08:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801fd0a:	697b      	ldr	r3, [r7, #20]
 801fd0c:	2b00      	cmp	r3, #0
 801fd0e:	d102      	bne.n	801fd16 <SCSI_TestUnitReady+0x22>
  {
    return -1;
 801fd10:	f04f 33ff 	mov.w	r3, #4294967295
 801fd14:	e03a      	b.n	801fd8c <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 801fd16:	697b      	ldr	r3, [r7, #20]
 801fd18:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801fd1c:	2b00      	cmp	r3, #0
 801fd1e:	d00a      	beq.n	801fd36 <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801fd20:	697b      	ldr	r3, [r7, #20]
 801fd22:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801fd26:	2320      	movs	r3, #32
 801fd28:	2205      	movs	r2, #5
 801fd2a:	68f8      	ldr	r0, [r7, #12]
 801fd2c:	f000 fb0f 	bl	802034e <SCSI_SenseCode>

    return -1;
 801fd30:	f04f 33ff 	mov.w	r3, #4294967295
 801fd34:	e02a      	b.n	801fd8c <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801fd36:	697b      	ldr	r3, [r7, #20]
 801fd38:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801fd3c:	2b02      	cmp	r3, #2
 801fd3e:	d10b      	bne.n	801fd58 <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801fd40:	7af9      	ldrb	r1, [r7, #11]
 801fd42:	233a      	movs	r3, #58	; 0x3a
 801fd44:	2202      	movs	r2, #2
 801fd46:	68f8      	ldr	r0, [r7, #12]
 801fd48:	f000 fb01 	bl	802034e <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801fd4c:	697b      	ldr	r3, [r7, #20]
 801fd4e:	2205      	movs	r2, #5
 801fd50:	721a      	strb	r2, [r3, #8]
    return -1;
 801fd52:	f04f 33ff 	mov.w	r3, #4294967295
 801fd56:	e019      	b.n	801fd8c <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 801fd58:	68fb      	ldr	r3, [r7, #12]
 801fd5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801fd5e:	689b      	ldr	r3, [r3, #8]
 801fd60:	7afa      	ldrb	r2, [r7, #11]
 801fd62:	4610      	mov	r0, r2
 801fd64:	4798      	blx	r3
 801fd66:	4603      	mov	r3, r0
 801fd68:	2b00      	cmp	r3, #0
 801fd6a:	d00b      	beq.n	801fd84 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801fd6c:	7af9      	ldrb	r1, [r7, #11]
 801fd6e:	233a      	movs	r3, #58	; 0x3a
 801fd70:	2202      	movs	r2, #2
 801fd72:	68f8      	ldr	r0, [r7, #12]
 801fd74:	f000 faeb 	bl	802034e <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801fd78:	697b      	ldr	r3, [r7, #20]
 801fd7a:	2205      	movs	r2, #5
 801fd7c:	721a      	strb	r2, [r3, #8]

    return -1;
 801fd7e:	f04f 33ff 	mov.w	r3, #4294967295
 801fd82:	e003      	b.n	801fd8c <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 801fd84:	697b      	ldr	r3, [r7, #20]
 801fd86:	2200      	movs	r2, #0
 801fd88:	60da      	str	r2, [r3, #12]

  return 0;
 801fd8a:	2300      	movs	r3, #0
}
 801fd8c:	4618      	mov	r0, r3
 801fd8e:	3718      	adds	r7, #24
 801fd90:	46bd      	mov	sp, r7
 801fd92:	bd80      	pop	{r7, pc}

0801fd94 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801fd94:	b580      	push	{r7, lr}
 801fd96:	b088      	sub	sp, #32
 801fd98:	af00      	add	r7, sp, #0
 801fd9a:	60f8      	str	r0, [r7, #12]
 801fd9c:	460b      	mov	r3, r1
 801fd9e:	607a      	str	r2, [r7, #4]
 801fda0:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fda2:	68fb      	ldr	r3, [r7, #12]
 801fda4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fda8:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801fdaa:	69bb      	ldr	r3, [r7, #24]
 801fdac:	2b00      	cmp	r3, #0
 801fdae:	d102      	bne.n	801fdb6 <SCSI_Inquiry+0x22>
  {
    return -1;
 801fdb0:	f04f 33ff 	mov.w	r3, #4294967295
 801fdb4:	e05a      	b.n	801fe6c <SCSI_Inquiry+0xd8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 801fdb6:	69bb      	ldr	r3, [r7, #24]
 801fdb8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801fdbc:	2b00      	cmp	r3, #0
 801fdbe:	d10a      	bne.n	801fdd6 <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801fdc0:	69bb      	ldr	r3, [r7, #24]
 801fdc2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801fdc6:	2320      	movs	r3, #32
 801fdc8:	2205      	movs	r2, #5
 801fdca:	68f8      	ldr	r0, [r7, #12]
 801fdcc:	f000 fabf 	bl	802034e <SCSI_SenseCode>
    return -1;
 801fdd0:	f04f 33ff 	mov.w	r3, #4294967295
 801fdd4:	e04a      	b.n	801fe6c <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 801fdd6:	687b      	ldr	r3, [r7, #4]
 801fdd8:	3301      	adds	r3, #1
 801fdda:	781b      	ldrb	r3, [r3, #0]
 801fddc:	f003 0301 	and.w	r3, r3, #1
 801fde0:	2b00      	cmp	r3, #0
 801fde2:	d020      	beq.n	801fe26 <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 801fde4:	687b      	ldr	r3, [r7, #4]
 801fde6:	3302      	adds	r3, #2
 801fde8:	781b      	ldrb	r3, [r3, #0]
 801fdea:	2b00      	cmp	r3, #0
 801fdec:	d105      	bne.n	801fdfa <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 801fdee:	2206      	movs	r2, #6
 801fdf0:	4920      	ldr	r1, [pc, #128]	; (801fe74 <SCSI_Inquiry+0xe0>)
 801fdf2:	69b8      	ldr	r0, [r7, #24]
 801fdf4:	f000 ffb4 	bl	8020d60 <SCSI_UpdateBotData>
 801fdf8:	e037      	b.n	801fe6a <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 801fdfa:	687b      	ldr	r3, [r7, #4]
 801fdfc:	3302      	adds	r3, #2
 801fdfe:	781b      	ldrb	r3, [r3, #0]
 801fe00:	2b80      	cmp	r3, #128	; 0x80
 801fe02:	d105      	bne.n	801fe10 <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 801fe04:	2208      	movs	r2, #8
 801fe06:	491c      	ldr	r1, [pc, #112]	; (801fe78 <SCSI_Inquiry+0xe4>)
 801fe08:	69b8      	ldr	r0, [r7, #24]
 801fe0a:	f000 ffa9 	bl	8020d60 <SCSI_UpdateBotData>
 801fe0e:	e02c      	b.n	801fe6a <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 801fe10:	69bb      	ldr	r3, [r7, #24]
 801fe12:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801fe16:	2324      	movs	r3, #36	; 0x24
 801fe18:	2205      	movs	r2, #5
 801fe1a:	68f8      	ldr	r0, [r7, #12]
 801fe1c:	f000 fa97 	bl	802034e <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 801fe20:	f04f 33ff 	mov.w	r3, #4294967295
 801fe24:	e022      	b.n	801fe6c <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 801fe26:	68fb      	ldr	r3, [r7, #12]
 801fe28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801fe2c:	69d9      	ldr	r1, [r3, #28]
 801fe2e:	7afa      	ldrb	r2, [r7, #11]
 801fe30:	4613      	mov	r3, r2
 801fe32:	00db      	lsls	r3, r3, #3
 801fe34:	4413      	add	r3, r2
 801fe36:	009b      	lsls	r3, r3, #2
 801fe38:	440b      	add	r3, r1
 801fe3a:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 801fe3c:	697b      	ldr	r3, [r7, #20]
 801fe3e:	3304      	adds	r3, #4
 801fe40:	781b      	ldrb	r3, [r3, #0]
 801fe42:	b29b      	uxth	r3, r3
 801fe44:	3305      	adds	r3, #5
 801fe46:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 801fe48:	687b      	ldr	r3, [r7, #4]
 801fe4a:	3304      	adds	r3, #4
 801fe4c:	781b      	ldrb	r3, [r3, #0]
 801fe4e:	b29b      	uxth	r3, r3
 801fe50:	8bfa      	ldrh	r2, [r7, #30]
 801fe52:	429a      	cmp	r2, r3
 801fe54:	d303      	bcc.n	801fe5e <SCSI_Inquiry+0xca>
    {
      len = params[4];
 801fe56:	687b      	ldr	r3, [r7, #4]
 801fe58:	3304      	adds	r3, #4
 801fe5a:	781b      	ldrb	r3, [r3, #0]
 801fe5c:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 801fe5e:	8bfb      	ldrh	r3, [r7, #30]
 801fe60:	461a      	mov	r2, r3
 801fe62:	6979      	ldr	r1, [r7, #20]
 801fe64:	69b8      	ldr	r0, [r7, #24]
 801fe66:	f000 ff7b 	bl	8020d60 <SCSI_UpdateBotData>
  }

  return 0;
 801fe6a:	2300      	movs	r3, #0
}
 801fe6c:	4618      	mov	r0, r3
 801fe6e:	3720      	adds	r7, #32
 801fe70:	46bd      	mov	sp, r7
 801fe72:	bd80      	pop	{r7, pc}
 801fe74:	20000638 	.word	0x20000638
 801fe78:	20000640 	.word	0x20000640

0801fe7c <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801fe7c:	b580      	push	{r7, lr}
 801fe7e:	b086      	sub	sp, #24
 801fe80:	af00      	add	r7, sp, #0
 801fe82:	60f8      	str	r0, [r7, #12]
 801fe84:	460b      	mov	r3, r1
 801fe86:	607a      	str	r2, [r7, #4]
 801fe88:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fe8a:	68fb      	ldr	r3, [r7, #12]
 801fe8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fe90:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801fe92:	697b      	ldr	r3, [r7, #20]
 801fe94:	2b00      	cmp	r3, #0
 801fe96:	d102      	bne.n	801fe9e <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 801fe98:	f04f 33ff 	mov.w	r3, #4294967295
 801fe9c:	e05f      	b.n	801ff5e <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 801fe9e:	68fb      	ldr	r3, [r7, #12]
 801fea0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801fea4:	685b      	ldr	r3, [r3, #4]
 801fea6:	697a      	ldr	r2, [r7, #20]
 801fea8:	f502 711a 	add.w	r1, r2, #616	; 0x268
 801feac:	697a      	ldr	r2, [r7, #20]
 801feae:	f502 7219 	add.w	r2, r2, #612	; 0x264
 801feb2:	7af8      	ldrb	r0, [r7, #11]
 801feb4:	4798      	blx	r3
 801feb6:	4603      	mov	r3, r0
 801feb8:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801feba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801febe:	2b00      	cmp	r3, #0
 801fec0:	d104      	bne.n	801fecc <SCSI_ReadCapacity10+0x50>
 801fec2:	697b      	ldr	r3, [r7, #20]
 801fec4:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801fec8:	2b02      	cmp	r3, #2
 801feca:	d108      	bne.n	801fede <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801fecc:	7af9      	ldrb	r1, [r7, #11]
 801fece:	233a      	movs	r3, #58	; 0x3a
 801fed0:	2202      	movs	r2, #2
 801fed2:	68f8      	ldr	r0, [r7, #12]
 801fed4:	f000 fa3b 	bl	802034e <SCSI_SenseCode>
    return -1;
 801fed8:	f04f 33ff 	mov.w	r3, #4294967295
 801fedc:	e03f      	b.n	801ff5e <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 801fede:	697b      	ldr	r3, [r7, #20]
 801fee0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801fee4:	3b01      	subs	r3, #1
 801fee6:	0e1b      	lsrs	r3, r3, #24
 801fee8:	b2da      	uxtb	r2, r3
 801feea:	697b      	ldr	r3, [r7, #20]
 801feec:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 801feee:	697b      	ldr	r3, [r7, #20]
 801fef0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801fef4:	3b01      	subs	r3, #1
 801fef6:	0c1b      	lsrs	r3, r3, #16
 801fef8:	b2da      	uxtb	r2, r3
 801fefa:	697b      	ldr	r3, [r7, #20]
 801fefc:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 801fefe:	697b      	ldr	r3, [r7, #20]
 801ff00:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801ff04:	3b01      	subs	r3, #1
 801ff06:	0a1b      	lsrs	r3, r3, #8
 801ff08:	b2da      	uxtb	r2, r3
 801ff0a:	697b      	ldr	r3, [r7, #20]
 801ff0c:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 801ff0e:	697b      	ldr	r3, [r7, #20]
 801ff10:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801ff14:	b2db      	uxtb	r3, r3
 801ff16:	3b01      	subs	r3, #1
 801ff18:	b2da      	uxtb	r2, r3
 801ff1a:	697b      	ldr	r3, [r7, #20]
 801ff1c:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 801ff1e:	697b      	ldr	r3, [r7, #20]
 801ff20:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801ff24:	161b      	asrs	r3, r3, #24
 801ff26:	b2da      	uxtb	r2, r3
 801ff28:	697b      	ldr	r3, [r7, #20]
 801ff2a:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801ff2c:	697b      	ldr	r3, [r7, #20]
 801ff2e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801ff32:	141b      	asrs	r3, r3, #16
 801ff34:	b2da      	uxtb	r2, r3
 801ff36:	697b      	ldr	r3, [r7, #20]
 801ff38:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 801ff3a:	697b      	ldr	r3, [r7, #20]
 801ff3c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801ff40:	0a1b      	lsrs	r3, r3, #8
 801ff42:	b29b      	uxth	r3, r3
 801ff44:	b2da      	uxtb	r2, r3
 801ff46:	697b      	ldr	r3, [r7, #20]
 801ff48:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 801ff4a:	697b      	ldr	r3, [r7, #20]
 801ff4c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801ff50:	b2da      	uxtb	r2, r3
 801ff52:	697b      	ldr	r3, [r7, #20]
 801ff54:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 801ff56:	697b      	ldr	r3, [r7, #20]
 801ff58:	2208      	movs	r2, #8
 801ff5a:	60da      	str	r2, [r3, #12]

  return 0;
 801ff5c:	2300      	movs	r3, #0

}
 801ff5e:	4618      	mov	r0, r3
 801ff60:	3718      	adds	r7, #24
 801ff62:	46bd      	mov	sp, r7
 801ff64:	bd80      	pop	{r7, pc}

0801ff66 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801ff66:	b580      	push	{r7, lr}
 801ff68:	b088      	sub	sp, #32
 801ff6a:	af00      	add	r7, sp, #0
 801ff6c:	60f8      	str	r0, [r7, #12]
 801ff6e:	460b      	mov	r3, r1
 801ff70:	607a      	str	r2, [r7, #4]
 801ff72:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801ff74:	68fb      	ldr	r3, [r7, #12]
 801ff76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801ff7a:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801ff7c:	69bb      	ldr	r3, [r7, #24]
 801ff7e:	2b00      	cmp	r3, #0
 801ff80:	d102      	bne.n	801ff88 <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 801ff82:	f04f 33ff 	mov.w	r3, #4294967295
 801ff86:	e094      	b.n	80200b2 <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 801ff88:	68fb      	ldr	r3, [r7, #12]
 801ff8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801ff8e:	685b      	ldr	r3, [r3, #4]
 801ff90:	69ba      	ldr	r2, [r7, #24]
 801ff92:	f502 711a 	add.w	r1, r2, #616	; 0x268
 801ff96:	69ba      	ldr	r2, [r7, #24]
 801ff98:	f502 7219 	add.w	r2, r2, #612	; 0x264
 801ff9c:	7af8      	ldrb	r0, [r7, #11]
 801ff9e:	4798      	blx	r3
 801ffa0:	4603      	mov	r3, r0
 801ffa2:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801ffa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801ffa8:	2b00      	cmp	r3, #0
 801ffaa:	d104      	bne.n	801ffb6 <SCSI_ReadCapacity16+0x50>
 801ffac:	69bb      	ldr	r3, [r7, #24]
 801ffae:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801ffb2:	2b02      	cmp	r3, #2
 801ffb4:	d108      	bne.n	801ffc8 <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801ffb6:	7af9      	ldrb	r1, [r7, #11]
 801ffb8:	233a      	movs	r3, #58	; 0x3a
 801ffba:	2202      	movs	r2, #2
 801ffbc:	68f8      	ldr	r0, [r7, #12]
 801ffbe:	f000 f9c6 	bl	802034e <SCSI_SenseCode>
    return -1;
 801ffc2:	f04f 33ff 	mov.w	r3, #4294967295
 801ffc6:	e074      	b.n	80200b2 <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801ffc8:	687b      	ldr	r3, [r7, #4]
 801ffca:	330a      	adds	r3, #10
 801ffcc:	781b      	ldrb	r3, [r3, #0]
 801ffce:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 801ffd0:	687b      	ldr	r3, [r7, #4]
 801ffd2:	330b      	adds	r3, #11
 801ffd4:	781b      	ldrb	r3, [r3, #0]
 801ffd6:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801ffd8:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801ffda:	687b      	ldr	r3, [r7, #4]
 801ffdc:	330c      	adds	r3, #12
 801ffde:	781b      	ldrb	r3, [r3, #0]
 801ffe0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 801ffe2:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 801ffe4:	687a      	ldr	r2, [r7, #4]
 801ffe6:	320d      	adds	r2, #13
 801ffe8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801ffea:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801ffec:	69bb      	ldr	r3, [r7, #24]
 801ffee:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 801fff0:	2300      	movs	r3, #0
 801fff2:	77fb      	strb	r3, [r7, #31]
 801fff4:	e007      	b.n	8020006 <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 801fff6:	7ffb      	ldrb	r3, [r7, #31]
 801fff8:	69ba      	ldr	r2, [r7, #24]
 801fffa:	4413      	add	r3, r2
 801fffc:	2200      	movs	r2, #0
 801fffe:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8020000:	7ffb      	ldrb	r3, [r7, #31]
 8020002:	3301      	adds	r3, #1
 8020004:	77fb      	strb	r3, [r7, #31]
 8020006:	7ffa      	ldrb	r2, [r7, #31]
 8020008:	69bb      	ldr	r3, [r7, #24]
 802000a:	68db      	ldr	r3, [r3, #12]
 802000c:	429a      	cmp	r2, r3
 802000e:	d3f2      	bcc.n	801fff6 <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8020010:	69bb      	ldr	r3, [r7, #24]
 8020012:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8020016:	3b01      	subs	r3, #1
 8020018:	0e1b      	lsrs	r3, r3, #24
 802001a:	b2da      	uxtb	r2, r3
 802001c:	69bb      	ldr	r3, [r7, #24]
 802001e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8020020:	69bb      	ldr	r3, [r7, #24]
 8020022:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8020026:	3b01      	subs	r3, #1
 8020028:	0c1b      	lsrs	r3, r3, #16
 802002a:	b2da      	uxtb	r2, r3
 802002c:	69bb      	ldr	r3, [r7, #24]
 802002e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8020030:	69bb      	ldr	r3, [r7, #24]
 8020032:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8020036:	3b01      	subs	r3, #1
 8020038:	0a1b      	lsrs	r3, r3, #8
 802003a:	b2da      	uxtb	r2, r3
 802003c:	69bb      	ldr	r3, [r7, #24]
 802003e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8020040:	69bb      	ldr	r3, [r7, #24]
 8020042:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8020046:	b2db      	uxtb	r3, r3
 8020048:	3b01      	subs	r3, #1
 802004a:	b2da      	uxtb	r2, r3
 802004c:	69bb      	ldr	r3, [r7, #24]
 802004e:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8020050:	69bb      	ldr	r3, [r7, #24]
 8020052:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020056:	161b      	asrs	r3, r3, #24
 8020058:	b2da      	uxtb	r2, r3
 802005a:	69bb      	ldr	r3, [r7, #24]
 802005c:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 802005e:	69bb      	ldr	r3, [r7, #24]
 8020060:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020064:	141b      	asrs	r3, r3, #16
 8020066:	b2da      	uxtb	r2, r3
 8020068:	69bb      	ldr	r3, [r7, #24]
 802006a:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 802006c:	69bb      	ldr	r3, [r7, #24]
 802006e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020072:	0a1b      	lsrs	r3, r3, #8
 8020074:	b29b      	uxth	r3, r3
 8020076:	b2da      	uxtb	r2, r3
 8020078:	69bb      	ldr	r3, [r7, #24]
 802007a:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 802007c:	69bb      	ldr	r3, [r7, #24]
 802007e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020082:	b2da      	uxtb	r2, r3
 8020084:	69bb      	ldr	r3, [r7, #24]
 8020086:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8020088:	687b      	ldr	r3, [r7, #4]
 802008a:	330a      	adds	r3, #10
 802008c:	781b      	ldrb	r3, [r3, #0]
 802008e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8020090:	687b      	ldr	r3, [r7, #4]
 8020092:	330b      	adds	r3, #11
 8020094:	781b      	ldrb	r3, [r3, #0]
 8020096:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8020098:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 802009a:	687b      	ldr	r3, [r7, #4]
 802009c:	330c      	adds	r3, #12
 802009e:	781b      	ldrb	r3, [r3, #0]
 80200a0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80200a2:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80200a4:	687a      	ldr	r2, [r7, #4]
 80200a6:	320d      	adds	r2, #13
 80200a8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80200aa:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80200ac:	69bb      	ldr	r3, [r7, #24]
 80200ae:	60da      	str	r2, [r3, #12]

  return 0;
 80200b0:	2300      	movs	r3, #0
}
 80200b2:	4618      	mov	r0, r3
 80200b4:	3720      	adds	r7, #32
 80200b6:	46bd      	mov	sp, r7
 80200b8:	bd80      	pop	{r7, pc}

080200ba <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80200ba:	b580      	push	{r7, lr}
 80200bc:	b088      	sub	sp, #32
 80200be:	af00      	add	r7, sp, #0
 80200c0:	60f8      	str	r0, [r7, #12]
 80200c2:	460b      	mov	r3, r1
 80200c4:	607a      	str	r2, [r7, #4]
 80200c6:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80200c8:	68fb      	ldr	r3, [r7, #12]
 80200ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80200ce:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80200d0:	69bb      	ldr	r3, [r7, #24]
 80200d2:	2b00      	cmp	r3, #0
 80200d4:	d102      	bne.n	80200dc <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 80200d6:	f04f 33ff 	mov.w	r3, #4294967295
 80200da:	e05c      	b.n	8020196 <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 80200dc:	68fb      	ldr	r3, [r7, #12]
 80200de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80200e2:	685b      	ldr	r3, [r3, #4]
 80200e4:	f107 0214 	add.w	r2, r7, #20
 80200e8:	f107 0110 	add.w	r1, r7, #16
 80200ec:	7af8      	ldrb	r0, [r7, #11]
 80200ee:	4798      	blx	r3
 80200f0:	4603      	mov	r3, r0
 80200f2:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80200f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80200f8:	2b00      	cmp	r3, #0
 80200fa:	d104      	bne.n	8020106 <SCSI_ReadFormatCapacity+0x4c>
 80200fc:	69bb      	ldr	r3, [r7, #24]
 80200fe:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8020102:	2b02      	cmp	r3, #2
 8020104:	d108      	bne.n	8020118 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020106:	7af9      	ldrb	r1, [r7, #11]
 8020108:	233a      	movs	r3, #58	; 0x3a
 802010a:	2202      	movs	r2, #2
 802010c:	68f8      	ldr	r0, [r7, #12]
 802010e:	f000 f91e 	bl	802034e <SCSI_SenseCode>
    return -1;
 8020112:	f04f 33ff 	mov.w	r3, #4294967295
 8020116:	e03e      	b.n	8020196 <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 8020118:	2300      	movs	r3, #0
 802011a:	83fb      	strh	r3, [r7, #30]
 802011c:	e007      	b.n	802012e <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 802011e:	8bfb      	ldrh	r3, [r7, #30]
 8020120:	69ba      	ldr	r2, [r7, #24]
 8020122:	4413      	add	r3, r2
 8020124:	2200      	movs	r2, #0
 8020126:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8020128:	8bfb      	ldrh	r3, [r7, #30]
 802012a:	3301      	adds	r3, #1
 802012c:	83fb      	strh	r3, [r7, #30]
 802012e:	8bfb      	ldrh	r3, [r7, #30]
 8020130:	2b0b      	cmp	r3, #11
 8020132:	d9f4      	bls.n	802011e <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 8020134:	69bb      	ldr	r3, [r7, #24]
 8020136:	2208      	movs	r2, #8
 8020138:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 802013a:	693b      	ldr	r3, [r7, #16]
 802013c:	3b01      	subs	r3, #1
 802013e:	0e1b      	lsrs	r3, r3, #24
 8020140:	b2da      	uxtb	r2, r3
 8020142:	69bb      	ldr	r3, [r7, #24]
 8020144:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8020146:	693b      	ldr	r3, [r7, #16]
 8020148:	3b01      	subs	r3, #1
 802014a:	0c1b      	lsrs	r3, r3, #16
 802014c:	b2da      	uxtb	r2, r3
 802014e:	69bb      	ldr	r3, [r7, #24]
 8020150:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8020152:	693b      	ldr	r3, [r7, #16]
 8020154:	3b01      	subs	r3, #1
 8020156:	0a1b      	lsrs	r3, r3, #8
 8020158:	b2da      	uxtb	r2, r3
 802015a:	69bb      	ldr	r3, [r7, #24]
 802015c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 802015e:	693b      	ldr	r3, [r7, #16]
 8020160:	b2db      	uxtb	r3, r3
 8020162:	3b01      	subs	r3, #1
 8020164:	b2da      	uxtb	r2, r3
 8020166:	69bb      	ldr	r3, [r7, #24]
 8020168:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 802016a:	69bb      	ldr	r3, [r7, #24]
 802016c:	2202      	movs	r2, #2
 802016e:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8020170:	8abb      	ldrh	r3, [r7, #20]
 8020172:	141b      	asrs	r3, r3, #16
 8020174:	b2da      	uxtb	r2, r3
 8020176:	69bb      	ldr	r3, [r7, #24]
 8020178:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 802017a:	8abb      	ldrh	r3, [r7, #20]
 802017c:	0a1b      	lsrs	r3, r3, #8
 802017e:	b29b      	uxth	r3, r3
 8020180:	b2da      	uxtb	r2, r3
 8020182:	69bb      	ldr	r3, [r7, #24]
 8020184:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8020186:	8abb      	ldrh	r3, [r7, #20]
 8020188:	b2da      	uxtb	r2, r3
 802018a:	69bb      	ldr	r3, [r7, #24]
 802018c:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 802018e:	69bb      	ldr	r3, [r7, #24]
 8020190:	220c      	movs	r2, #12
 8020192:	60da      	str	r2, [r3, #12]

  return 0;
 8020194:	2300      	movs	r3, #0
}
 8020196:	4618      	mov	r0, r3
 8020198:	3720      	adds	r7, #32
 802019a:	46bd      	mov	sp, r7
 802019c:	bd80      	pop	{r7, pc}
	...

080201a0 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80201a0:	b580      	push	{r7, lr}
 80201a2:	b086      	sub	sp, #24
 80201a4:	af00      	add	r7, sp, #0
 80201a6:	60f8      	str	r0, [r7, #12]
 80201a8:	460b      	mov	r3, r1
 80201aa:	607a      	str	r2, [r7, #4]
 80201ac:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80201ae:	68fb      	ldr	r3, [r7, #12]
 80201b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80201b4:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 80201b6:	2317      	movs	r3, #23
 80201b8:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80201ba:	693b      	ldr	r3, [r7, #16]
 80201bc:	2b00      	cmp	r3, #0
 80201be:	d102      	bne.n	80201c6 <SCSI_ModeSense6+0x26>
  {
    return -1;
 80201c0:	f04f 33ff 	mov.w	r3, #4294967295
 80201c4:	e011      	b.n	80201ea <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 80201c6:	687b      	ldr	r3, [r7, #4]
 80201c8:	3304      	adds	r3, #4
 80201ca:	781b      	ldrb	r3, [r3, #0]
 80201cc:	b29b      	uxth	r3, r3
 80201ce:	8afa      	ldrh	r2, [r7, #22]
 80201d0:	429a      	cmp	r2, r3
 80201d2:	d303      	bcc.n	80201dc <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 80201d4:	687b      	ldr	r3, [r7, #4]
 80201d6:	3304      	adds	r3, #4
 80201d8:	781b      	ldrb	r3, [r3, #0]
 80201da:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 80201dc:	8afb      	ldrh	r3, [r7, #22]
 80201de:	461a      	mov	r2, r3
 80201e0:	4904      	ldr	r1, [pc, #16]	; (80201f4 <SCSI_ModeSense6+0x54>)
 80201e2:	6938      	ldr	r0, [r7, #16]
 80201e4:	f000 fdbc 	bl	8020d60 <SCSI_UpdateBotData>

  return 0;
 80201e8:	2300      	movs	r3, #0
}
 80201ea:	4618      	mov	r0, r3
 80201ec:	3718      	adds	r7, #24
 80201ee:	46bd      	mov	sp, r7
 80201f0:	bd80      	pop	{r7, pc}
 80201f2:	bf00      	nop
 80201f4:	20000648 	.word	0x20000648

080201f8 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80201f8:	b580      	push	{r7, lr}
 80201fa:	b086      	sub	sp, #24
 80201fc:	af00      	add	r7, sp, #0
 80201fe:	60f8      	str	r0, [r7, #12]
 8020200:	460b      	mov	r3, r1
 8020202:	607a      	str	r2, [r7, #4]
 8020204:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020206:	68fb      	ldr	r3, [r7, #12]
 8020208:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802020c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 802020e:	231b      	movs	r3, #27
 8020210:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8020212:	693b      	ldr	r3, [r7, #16]
 8020214:	2b00      	cmp	r3, #0
 8020216:	d102      	bne.n	802021e <SCSI_ModeSense10+0x26>
  {
    return -1;
 8020218:	f04f 33ff 	mov.w	r3, #4294967295
 802021c:	e011      	b.n	8020242 <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 802021e:	687b      	ldr	r3, [r7, #4]
 8020220:	3308      	adds	r3, #8
 8020222:	781b      	ldrb	r3, [r3, #0]
 8020224:	b29b      	uxth	r3, r3
 8020226:	8afa      	ldrh	r2, [r7, #22]
 8020228:	429a      	cmp	r2, r3
 802022a:	d303      	bcc.n	8020234 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 802022c:	687b      	ldr	r3, [r7, #4]
 802022e:	3308      	adds	r3, #8
 8020230:	781b      	ldrb	r3, [r3, #0]
 8020232:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8020234:	8afb      	ldrh	r3, [r7, #22]
 8020236:	461a      	mov	r2, r3
 8020238:	4904      	ldr	r1, [pc, #16]	; (802024c <SCSI_ModeSense10+0x54>)
 802023a:	6938      	ldr	r0, [r7, #16]
 802023c:	f000 fd90 	bl	8020d60 <SCSI_UpdateBotData>

  return 0;
 8020240:	2300      	movs	r3, #0
}
 8020242:	4618      	mov	r0, r3
 8020244:	3718      	adds	r7, #24
 8020246:	46bd      	mov	sp, r7
 8020248:	bd80      	pop	{r7, pc}
 802024a:	bf00      	nop
 802024c:	20000660 	.word	0x20000660

08020250 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020250:	b580      	push	{r7, lr}
 8020252:	b086      	sub	sp, #24
 8020254:	af00      	add	r7, sp, #0
 8020256:	60f8      	str	r0, [r7, #12]
 8020258:	460b      	mov	r3, r1
 802025a:	607a      	str	r2, [r7, #4]
 802025c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 802025e:	68fb      	ldr	r3, [r7, #12]
 8020260:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020264:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8020266:	693b      	ldr	r3, [r7, #16]
 8020268:	2b00      	cmp	r3, #0
 802026a:	d102      	bne.n	8020272 <SCSI_RequestSense+0x22>
  {
    return -1;
 802026c:	f04f 33ff 	mov.w	r3, #4294967295
 8020270:	e069      	b.n	8020346 <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8020272:	693b      	ldr	r3, [r7, #16]
 8020274:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8020278:	2b00      	cmp	r3, #0
 802027a:	d10a      	bne.n	8020292 <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 802027c:	693b      	ldr	r3, [r7, #16]
 802027e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020282:	2320      	movs	r3, #32
 8020284:	2205      	movs	r2, #5
 8020286:	68f8      	ldr	r0, [r7, #12]
 8020288:	f000 f861 	bl	802034e <SCSI_SenseCode>
    return -1;
 802028c:	f04f 33ff 	mov.w	r3, #4294967295
 8020290:	e059      	b.n	8020346 <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8020292:	2300      	movs	r3, #0
 8020294:	75fb      	strb	r3, [r7, #23]
 8020296:	e007      	b.n	80202a8 <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 8020298:	7dfb      	ldrb	r3, [r7, #23]
 802029a:	693a      	ldr	r2, [r7, #16]
 802029c:	4413      	add	r3, r2
 802029e:	2200      	movs	r2, #0
 80202a0:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80202a2:	7dfb      	ldrb	r3, [r7, #23]
 80202a4:	3301      	adds	r3, #1
 80202a6:	75fb      	strb	r3, [r7, #23]
 80202a8:	7dfb      	ldrb	r3, [r7, #23]
 80202aa:	2b11      	cmp	r3, #17
 80202ac:	d9f4      	bls.n	8020298 <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 80202ae:	693b      	ldr	r3, [r7, #16]
 80202b0:	2270      	movs	r2, #112	; 0x70
 80202b2:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 80202b4:	693b      	ldr	r3, [r7, #16]
 80202b6:	220c      	movs	r2, #12
 80202b8:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 80202ba:	693b      	ldr	r3, [r7, #16]
 80202bc:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 80202c0:	693b      	ldr	r3, [r7, #16]
 80202c2:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80202c6:	429a      	cmp	r2, r3
 80202c8:	d02e      	beq.n	8020328 <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 80202ca:	693b      	ldr	r3, [r7, #16]
 80202cc:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80202d0:	461a      	mov	r2, r3
 80202d2:	693b      	ldr	r3, [r7, #16]
 80202d4:	3248      	adds	r2, #72	; 0x48
 80202d6:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 80202da:	693b      	ldr	r3, [r7, #16]
 80202dc:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 80202de:	693b      	ldr	r3, [r7, #16]
 80202e0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80202e4:	693a      	ldr	r2, [r7, #16]
 80202e6:	3348      	adds	r3, #72	; 0x48
 80202e8:	00db      	lsls	r3, r3, #3
 80202ea:	4413      	add	r3, r2
 80202ec:	791a      	ldrb	r2, [r3, #4]
 80202ee:	693b      	ldr	r3, [r7, #16]
 80202f0:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80202f2:	693b      	ldr	r3, [r7, #16]
 80202f4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80202f8:	693a      	ldr	r2, [r7, #16]
 80202fa:	3348      	adds	r3, #72	; 0x48
 80202fc:	00db      	lsls	r3, r3, #3
 80202fe:	4413      	add	r3, r2
 8020300:	795a      	ldrb	r2, [r3, #5]
 8020302:	693b      	ldr	r3, [r7, #16]
 8020304:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8020306:	693b      	ldr	r3, [r7, #16]
 8020308:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 802030c:	3301      	adds	r3, #1
 802030e:	b2da      	uxtb	r2, r3
 8020310:	693b      	ldr	r3, [r7, #16]
 8020312:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8020316:	693b      	ldr	r3, [r7, #16]
 8020318:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 802031c:	2b04      	cmp	r3, #4
 802031e:	d103      	bne.n	8020328 <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 8020320:	693b      	ldr	r3, [r7, #16]
 8020322:	2200      	movs	r2, #0
 8020324:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8020328:	693b      	ldr	r3, [r7, #16]
 802032a:	2212      	movs	r2, #18
 802032c:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 802032e:	687b      	ldr	r3, [r7, #4]
 8020330:	3304      	adds	r3, #4
 8020332:	781b      	ldrb	r3, [r3, #0]
 8020334:	2b12      	cmp	r3, #18
 8020336:	d805      	bhi.n	8020344 <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 8020338:	687b      	ldr	r3, [r7, #4]
 802033a:	3304      	adds	r3, #4
 802033c:	781b      	ldrb	r3, [r3, #0]
 802033e:	461a      	mov	r2, r3
 8020340:	693b      	ldr	r3, [r7, #16]
 8020342:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8020344:	2300      	movs	r3, #0
}
 8020346:	4618      	mov	r0, r3
 8020348:	3718      	adds	r7, #24
 802034a:	46bd      	mov	sp, r7
 802034c:	bd80      	pop	{r7, pc}

0802034e <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 802034e:	b480      	push	{r7}
 8020350:	b085      	sub	sp, #20
 8020352:	af00      	add	r7, sp, #0
 8020354:	6078      	str	r0, [r7, #4]
 8020356:	4608      	mov	r0, r1
 8020358:	4611      	mov	r1, r2
 802035a:	461a      	mov	r2, r3
 802035c:	4603      	mov	r3, r0
 802035e:	70fb      	strb	r3, [r7, #3]
 8020360:	460b      	mov	r3, r1
 8020362:	70bb      	strb	r3, [r7, #2]
 8020364:	4613      	mov	r3, r2
 8020366:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020368:	687b      	ldr	r3, [r7, #4]
 802036a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802036e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8020370:	68fb      	ldr	r3, [r7, #12]
 8020372:	2b00      	cmp	r3, #0
 8020374:	d02c      	beq.n	80203d0 <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8020376:	68fb      	ldr	r3, [r7, #12]
 8020378:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 802037c:	461a      	mov	r2, r3
 802037e:	68fb      	ldr	r3, [r7, #12]
 8020380:	3248      	adds	r2, #72	; 0x48
 8020382:	78b9      	ldrb	r1, [r7, #2]
 8020384:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8020388:	68fb      	ldr	r3, [r7, #12]
 802038a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 802038e:	68fa      	ldr	r2, [r7, #12]
 8020390:	3348      	adds	r3, #72	; 0x48
 8020392:	00db      	lsls	r3, r3, #3
 8020394:	4413      	add	r3, r2
 8020396:	787a      	ldrb	r2, [r7, #1]
 8020398:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 802039a:	68fb      	ldr	r3, [r7, #12]
 802039c:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80203a0:	68fa      	ldr	r2, [r7, #12]
 80203a2:	3348      	adds	r3, #72	; 0x48
 80203a4:	00db      	lsls	r3, r3, #3
 80203a6:	4413      	add	r3, r2
 80203a8:	2200      	movs	r2, #0
 80203aa:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 80203ac:	68fb      	ldr	r3, [r7, #12]
 80203ae:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80203b2:	3301      	adds	r3, #1
 80203b4:	b2da      	uxtb	r2, r3
 80203b6:	68fb      	ldr	r3, [r7, #12]
 80203b8:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80203bc:	68fb      	ldr	r3, [r7, #12]
 80203be:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80203c2:	2b04      	cmp	r3, #4
 80203c4:	d105      	bne.n	80203d2 <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 80203c6:	68fb      	ldr	r3, [r7, #12]
 80203c8:	2200      	movs	r2, #0
 80203ca:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 80203ce:	e000      	b.n	80203d2 <SCSI_SenseCode+0x84>
    return;
 80203d0:	bf00      	nop
  }
}
 80203d2:	3714      	adds	r7, #20
 80203d4:	46bd      	mov	sp, r7
 80203d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203da:	4770      	bx	lr

080203dc <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80203dc:	b580      	push	{r7, lr}
 80203de:	b086      	sub	sp, #24
 80203e0:	af00      	add	r7, sp, #0
 80203e2:	60f8      	str	r0, [r7, #12]
 80203e4:	460b      	mov	r3, r1
 80203e6:	607a      	str	r2, [r7, #4]
 80203e8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80203ea:	68fb      	ldr	r3, [r7, #12]
 80203ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80203f0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80203f2:	697b      	ldr	r3, [r7, #20]
 80203f4:	2b00      	cmp	r3, #0
 80203f6:	d102      	bne.n	80203fe <SCSI_StartStopUnit+0x22>
  {
    return -1;
 80203f8:	f04f 33ff 	mov.w	r3, #4294967295
 80203fc:	e03b      	b.n	8020476 <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 80203fe:	697b      	ldr	r3, [r7, #20]
 8020400:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8020404:	2b01      	cmp	r3, #1
 8020406:	d10f      	bne.n	8020428 <SCSI_StartStopUnit+0x4c>
 8020408:	687b      	ldr	r3, [r7, #4]
 802040a:	3304      	adds	r3, #4
 802040c:	781b      	ldrb	r3, [r3, #0]
 802040e:	f003 0303 	and.w	r3, r3, #3
 8020412:	2b02      	cmp	r3, #2
 8020414:	d108      	bne.n	8020428 <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8020416:	7af9      	ldrb	r1, [r7, #11]
 8020418:	2324      	movs	r3, #36	; 0x24
 802041a:	2205      	movs	r2, #5
 802041c:	68f8      	ldr	r0, [r7, #12]
 802041e:	f7ff ff96 	bl	802034e <SCSI_SenseCode>

    return -1;
 8020422:	f04f 33ff 	mov.w	r3, #4294967295
 8020426:	e026      	b.n	8020476 <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8020428:	687b      	ldr	r3, [r7, #4]
 802042a:	3304      	adds	r3, #4
 802042c:	781b      	ldrb	r3, [r3, #0]
 802042e:	f003 0303 	and.w	r3, r3, #3
 8020432:	2b01      	cmp	r3, #1
 8020434:	d104      	bne.n	8020440 <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8020436:	697b      	ldr	r3, [r7, #20]
 8020438:	2200      	movs	r2, #0
 802043a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 802043e:	e016      	b.n	802046e <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8020440:	687b      	ldr	r3, [r7, #4]
 8020442:	3304      	adds	r3, #4
 8020444:	781b      	ldrb	r3, [r3, #0]
 8020446:	f003 0303 	and.w	r3, r3, #3
 802044a:	2b02      	cmp	r3, #2
 802044c:	d104      	bne.n	8020458 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 802044e:	697b      	ldr	r3, [r7, #20]
 8020450:	2202      	movs	r2, #2
 8020452:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8020456:	e00a      	b.n	802046e <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8020458:	687b      	ldr	r3, [r7, #4]
 802045a:	3304      	adds	r3, #4
 802045c:	781b      	ldrb	r3, [r3, #0]
 802045e:	f003 0303 	and.w	r3, r3, #3
 8020462:	2b03      	cmp	r3, #3
 8020464:	d103      	bne.n	802046e <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8020466:	697b      	ldr	r3, [r7, #20]
 8020468:	2200      	movs	r2, #0
 802046a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 802046e:	697b      	ldr	r3, [r7, #20]
 8020470:	2200      	movs	r2, #0
 8020472:	60da      	str	r2, [r3, #12]

  return 0;
 8020474:	2300      	movs	r3, #0
}
 8020476:	4618      	mov	r0, r3
 8020478:	3718      	adds	r7, #24
 802047a:	46bd      	mov	sp, r7
 802047c:	bd80      	pop	{r7, pc}

0802047e <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 802047e:	b480      	push	{r7}
 8020480:	b087      	sub	sp, #28
 8020482:	af00      	add	r7, sp, #0
 8020484:	60f8      	str	r0, [r7, #12]
 8020486:	460b      	mov	r3, r1
 8020488:	607a      	str	r2, [r7, #4]
 802048a:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 802048c:	68fb      	ldr	r3, [r7, #12]
 802048e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020492:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020494:	697b      	ldr	r3, [r7, #20]
 8020496:	2b00      	cmp	r3, #0
 8020498:	d102      	bne.n	80204a0 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 802049a:	f04f 33ff 	mov.w	r3, #4294967295
 802049e:	e011      	b.n	80204c4 <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 80204a0:	687b      	ldr	r3, [r7, #4]
 80204a2:	3304      	adds	r3, #4
 80204a4:	781b      	ldrb	r3, [r3, #0]
 80204a6:	2b00      	cmp	r3, #0
 80204a8:	d104      	bne.n	80204b4 <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80204aa:	697b      	ldr	r3, [r7, #20]
 80204ac:	2200      	movs	r2, #0
 80204ae:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80204b2:	e003      	b.n	80204bc <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 80204b4:	697b      	ldr	r3, [r7, #20]
 80204b6:	2201      	movs	r2, #1
 80204b8:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 80204bc:	697b      	ldr	r3, [r7, #20]
 80204be:	2200      	movs	r2, #0
 80204c0:	60da      	str	r2, [r3, #12]

  return 0;
 80204c2:	2300      	movs	r3, #0
}
 80204c4:	4618      	mov	r0, r3
 80204c6:	371c      	adds	r7, #28
 80204c8:	46bd      	mov	sp, r7
 80204ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204ce:	4770      	bx	lr

080204d0 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80204d0:	b580      	push	{r7, lr}
 80204d2:	b086      	sub	sp, #24
 80204d4:	af00      	add	r7, sp, #0
 80204d6:	60f8      	str	r0, [r7, #12]
 80204d8:	460b      	mov	r3, r1
 80204da:	607a      	str	r2, [r7, #4]
 80204dc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80204de:	68fb      	ldr	r3, [r7, #12]
 80204e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80204e4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80204e6:	697b      	ldr	r3, [r7, #20]
 80204e8:	2b00      	cmp	r3, #0
 80204ea:	d102      	bne.n	80204f2 <SCSI_Read10+0x22>
  {
    return -1;
 80204ec:	f04f 33ff 	mov.w	r3, #4294967295
 80204f0:	e08a      	b.n	8020608 <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80204f2:	697b      	ldr	r3, [r7, #20]
 80204f4:	7a1b      	ldrb	r3, [r3, #8]
 80204f6:	2b00      	cmp	r3, #0
 80204f8:	d17c      	bne.n	80205f4 <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80204fa:	697b      	ldr	r3, [r7, #20]
 80204fc:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8020500:	b25b      	sxtb	r3, r3
 8020502:	2b00      	cmp	r3, #0
 8020504:	db0a      	blt.n	802051c <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020506:	697b      	ldr	r3, [r7, #20]
 8020508:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 802050c:	2320      	movs	r3, #32
 802050e:	2205      	movs	r2, #5
 8020510:	68f8      	ldr	r0, [r7, #12]
 8020512:	f7ff ff1c 	bl	802034e <SCSI_SenseCode>
      return -1;
 8020516:	f04f 33ff 	mov.w	r3, #4294967295
 802051a:	e075      	b.n	8020608 <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 802051c:	697b      	ldr	r3, [r7, #20]
 802051e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8020522:	2b02      	cmp	r3, #2
 8020524:	d108      	bne.n	8020538 <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020526:	7af9      	ldrb	r1, [r7, #11]
 8020528:	233a      	movs	r3, #58	; 0x3a
 802052a:	2202      	movs	r2, #2
 802052c:	68f8      	ldr	r0, [r7, #12]
 802052e:	f7ff ff0e 	bl	802034e <SCSI_SenseCode>

      return -1;
 8020532:	f04f 33ff 	mov.w	r3, #4294967295
 8020536:	e067      	b.n	8020608 <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8020538:	68fb      	ldr	r3, [r7, #12]
 802053a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802053e:	689b      	ldr	r3, [r3, #8]
 8020540:	7afa      	ldrb	r2, [r7, #11]
 8020542:	4610      	mov	r0, r2
 8020544:	4798      	blx	r3
 8020546:	4603      	mov	r3, r0
 8020548:	2b00      	cmp	r3, #0
 802054a:	d008      	beq.n	802055e <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 802054c:	7af9      	ldrb	r1, [r7, #11]
 802054e:	233a      	movs	r3, #58	; 0x3a
 8020550:	2202      	movs	r2, #2
 8020552:	68f8      	ldr	r0, [r7, #12]
 8020554:	f7ff fefb 	bl	802034e <SCSI_SenseCode>
      return -1;
 8020558:	f04f 33ff 	mov.w	r3, #4294967295
 802055c:	e054      	b.n	8020608 <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 802055e:	687b      	ldr	r3, [r7, #4]
 8020560:	3302      	adds	r3, #2
 8020562:	781b      	ldrb	r3, [r3, #0]
 8020564:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8020566:	687b      	ldr	r3, [r7, #4]
 8020568:	3303      	adds	r3, #3
 802056a:	781b      	ldrb	r3, [r3, #0]
 802056c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 802056e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8020570:	687b      	ldr	r3, [r7, #4]
 8020572:	3304      	adds	r3, #4
 8020574:	781b      	ldrb	r3, [r3, #0]
 8020576:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8020578:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 802057a:	687a      	ldr	r2, [r7, #4]
 802057c:	3205      	adds	r2, #5
 802057e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8020580:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020582:	697b      	ldr	r3, [r7, #20]
 8020584:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8020588:	687b      	ldr	r3, [r7, #4]
 802058a:	3307      	adds	r3, #7
 802058c:	781b      	ldrb	r3, [r3, #0]
 802058e:	021b      	lsls	r3, r3, #8
 8020590:	687a      	ldr	r2, [r7, #4]
 8020592:	3208      	adds	r2, #8
 8020594:	7812      	ldrb	r2, [r2, #0]
 8020596:	431a      	orrs	r2, r3
 8020598:	697b      	ldr	r3, [r7, #20]
 802059a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 802059e:	697b      	ldr	r3, [r7, #20]
 80205a0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80205a4:	697b      	ldr	r3, [r7, #20]
 80205a6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80205aa:	7af9      	ldrb	r1, [r7, #11]
 80205ac:	68f8      	ldr	r0, [r7, #12]
 80205ae:	f000 faad 	bl	8020b0c <SCSI_CheckAddressRange>
 80205b2:	4603      	mov	r3, r0
 80205b4:	2b00      	cmp	r3, #0
 80205b6:	da02      	bge.n	80205be <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80205b8:	f04f 33ff 	mov.w	r3, #4294967295
 80205bc:	e024      	b.n	8020608 <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80205be:	697b      	ldr	r3, [r7, #20]
 80205c0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80205c4:	697b      	ldr	r3, [r7, #20]
 80205c6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80205ca:	6979      	ldr	r1, [r7, #20]
 80205cc:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 80205d0:	fb01 f303 	mul.w	r3, r1, r3
 80205d4:	429a      	cmp	r2, r3
 80205d6:	d00a      	beq.n	80205ee <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80205d8:	697b      	ldr	r3, [r7, #20]
 80205da:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80205de:	2320      	movs	r3, #32
 80205e0:	2205      	movs	r2, #5
 80205e2:	68f8      	ldr	r0, [r7, #12]
 80205e4:	f7ff feb3 	bl	802034e <SCSI_SenseCode>
      return -1;
 80205e8:	f04f 33ff 	mov.w	r3, #4294967295
 80205ec:	e00c      	b.n	8020608 <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80205ee:	697b      	ldr	r3, [r7, #20]
 80205f0:	2202      	movs	r2, #2
 80205f2:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80205f4:	697b      	ldr	r3, [r7, #20]
 80205f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80205fa:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80205fc:	7afb      	ldrb	r3, [r7, #11]
 80205fe:	4619      	mov	r1, r3
 8020600:	68f8      	ldr	r0, [r7, #12]
 8020602:	f000 faab 	bl	8020b5c <SCSI_ProcessRead>
 8020606:	4603      	mov	r3, r0
}
 8020608:	4618      	mov	r0, r3
 802060a:	3718      	adds	r7, #24
 802060c:	46bd      	mov	sp, r7
 802060e:	bd80      	pop	{r7, pc}

08020610 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020610:	b580      	push	{r7, lr}
 8020612:	b086      	sub	sp, #24
 8020614:	af00      	add	r7, sp, #0
 8020616:	60f8      	str	r0, [r7, #12]
 8020618:	460b      	mov	r3, r1
 802061a:	607a      	str	r2, [r7, #4]
 802061c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 802061e:	68fb      	ldr	r3, [r7, #12]
 8020620:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020624:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020626:	697b      	ldr	r3, [r7, #20]
 8020628:	2b00      	cmp	r3, #0
 802062a:	d102      	bne.n	8020632 <SCSI_Read12+0x22>
  {
    return -1;
 802062c:	f04f 33ff 	mov.w	r3, #4294967295
 8020630:	e095      	b.n	802075e <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8020632:	697b      	ldr	r3, [r7, #20]
 8020634:	7a1b      	ldrb	r3, [r3, #8]
 8020636:	2b00      	cmp	r3, #0
 8020638:	f040 8087 	bne.w	802074a <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 802063c:	697b      	ldr	r3, [r7, #20]
 802063e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8020642:	b25b      	sxtb	r3, r3
 8020644:	2b00      	cmp	r3, #0
 8020646:	db0a      	blt.n	802065e <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020648:	697b      	ldr	r3, [r7, #20]
 802064a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 802064e:	2320      	movs	r3, #32
 8020650:	2205      	movs	r2, #5
 8020652:	68f8      	ldr	r0, [r7, #12]
 8020654:	f7ff fe7b 	bl	802034e <SCSI_SenseCode>
      return -1;
 8020658:	f04f 33ff 	mov.w	r3, #4294967295
 802065c:	e07f      	b.n	802075e <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 802065e:	697b      	ldr	r3, [r7, #20]
 8020660:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8020664:	2b02      	cmp	r3, #2
 8020666:	d108      	bne.n	802067a <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020668:	7af9      	ldrb	r1, [r7, #11]
 802066a:	233a      	movs	r3, #58	; 0x3a
 802066c:	2202      	movs	r2, #2
 802066e:	68f8      	ldr	r0, [r7, #12]
 8020670:	f7ff fe6d 	bl	802034e <SCSI_SenseCode>
      return -1;
 8020674:	f04f 33ff 	mov.w	r3, #4294967295
 8020678:	e071      	b.n	802075e <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 802067a:	68fb      	ldr	r3, [r7, #12]
 802067c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020680:	689b      	ldr	r3, [r3, #8]
 8020682:	7afa      	ldrb	r2, [r7, #11]
 8020684:	4610      	mov	r0, r2
 8020686:	4798      	blx	r3
 8020688:	4603      	mov	r3, r0
 802068a:	2b00      	cmp	r3, #0
 802068c:	d008      	beq.n	80206a0 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 802068e:	7af9      	ldrb	r1, [r7, #11]
 8020690:	233a      	movs	r3, #58	; 0x3a
 8020692:	2202      	movs	r2, #2
 8020694:	68f8      	ldr	r0, [r7, #12]
 8020696:	f7ff fe5a 	bl	802034e <SCSI_SenseCode>
      return -1;
 802069a:	f04f 33ff 	mov.w	r3, #4294967295
 802069e:	e05e      	b.n	802075e <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80206a0:	687b      	ldr	r3, [r7, #4]
 80206a2:	3302      	adds	r3, #2
 80206a4:	781b      	ldrb	r3, [r3, #0]
 80206a6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80206a8:	687b      	ldr	r3, [r7, #4]
 80206aa:	3303      	adds	r3, #3
 80206ac:	781b      	ldrb	r3, [r3, #0]
 80206ae:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80206b0:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80206b2:	687b      	ldr	r3, [r7, #4]
 80206b4:	3304      	adds	r3, #4
 80206b6:	781b      	ldrb	r3, [r3, #0]
 80206b8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80206ba:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80206bc:	687a      	ldr	r2, [r7, #4]
 80206be:	3205      	adds	r2, #5
 80206c0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80206c2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80206c4:	697b      	ldr	r3, [r7, #20]
 80206c6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80206ca:	687b      	ldr	r3, [r7, #4]
 80206cc:	3306      	adds	r3, #6
 80206ce:	781b      	ldrb	r3, [r3, #0]
 80206d0:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80206d2:	687b      	ldr	r3, [r7, #4]
 80206d4:	3307      	adds	r3, #7
 80206d6:	781b      	ldrb	r3, [r3, #0]
 80206d8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80206da:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80206dc:	687b      	ldr	r3, [r7, #4]
 80206de:	3308      	adds	r3, #8
 80206e0:	781b      	ldrb	r3, [r3, #0]
 80206e2:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80206e4:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80206e6:	687a      	ldr	r2, [r7, #4]
 80206e8:	3209      	adds	r2, #9
 80206ea:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80206ec:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80206ee:	697b      	ldr	r3, [r7, #20]
 80206f0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80206f4:	697b      	ldr	r3, [r7, #20]
 80206f6:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80206fa:	697b      	ldr	r3, [r7, #20]
 80206fc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020700:	7af9      	ldrb	r1, [r7, #11]
 8020702:	68f8      	ldr	r0, [r7, #12]
 8020704:	f000 fa02 	bl	8020b0c <SCSI_CheckAddressRange>
 8020708:	4603      	mov	r3, r0
 802070a:	2b00      	cmp	r3, #0
 802070c:	da02      	bge.n	8020714 <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 802070e:	f04f 33ff 	mov.w	r3, #4294967295
 8020712:	e024      	b.n	802075e <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8020714:	697b      	ldr	r3, [r7, #20]
 8020716:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 802071a:	697b      	ldr	r3, [r7, #20]
 802071c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020720:	6979      	ldr	r1, [r7, #20]
 8020722:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8020726:	fb01 f303 	mul.w	r3, r1, r3
 802072a:	429a      	cmp	r2, r3
 802072c:	d00a      	beq.n	8020744 <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 802072e:	697b      	ldr	r3, [r7, #20]
 8020730:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020734:	2320      	movs	r3, #32
 8020736:	2205      	movs	r2, #5
 8020738:	68f8      	ldr	r0, [r7, #12]
 802073a:	f7ff fe08 	bl	802034e <SCSI_SenseCode>
      return -1;
 802073e:	f04f 33ff 	mov.w	r3, #4294967295
 8020742:	e00c      	b.n	802075e <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8020744:	697b      	ldr	r3, [r7, #20]
 8020746:	2202      	movs	r2, #2
 8020748:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 802074a:	697b      	ldr	r3, [r7, #20]
 802074c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020750:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8020752:	7afb      	ldrb	r3, [r7, #11]
 8020754:	4619      	mov	r1, r3
 8020756:	68f8      	ldr	r0, [r7, #12]
 8020758:	f000 fa00 	bl	8020b5c <SCSI_ProcessRead>
 802075c:	4603      	mov	r3, r0
}
 802075e:	4618      	mov	r0, r3
 8020760:	3718      	adds	r7, #24
 8020762:	46bd      	mov	sp, r7
 8020764:	bd80      	pop	{r7, pc}

08020766 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020766:	b580      	push	{r7, lr}
 8020768:	b086      	sub	sp, #24
 802076a:	af00      	add	r7, sp, #0
 802076c:	60f8      	str	r0, [r7, #12]
 802076e:	460b      	mov	r3, r1
 8020770:	607a      	str	r2, [r7, #4]
 8020772:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020774:	68fb      	ldr	r3, [r7, #12]
 8020776:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802077a:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 802077c:	697b      	ldr	r3, [r7, #20]
 802077e:	2b00      	cmp	r3, #0
 8020780:	d102      	bne.n	8020788 <SCSI_Write10+0x22>
  {
    return -1;
 8020782:	f04f 33ff 	mov.w	r3, #4294967295
 8020786:	e0af      	b.n	80208e8 <SCSI_Write10+0x182>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8020788:	697b      	ldr	r3, [r7, #20]
 802078a:	7a1b      	ldrb	r3, [r3, #8]
 802078c:	2b00      	cmp	r3, #0
 802078e:	f040 80a5 	bne.w	80208dc <SCSI_Write10+0x176>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8020792:	697b      	ldr	r3, [r7, #20]
 8020794:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8020798:	2b00      	cmp	r3, #0
 802079a:	d10a      	bne.n	80207b2 <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 802079c:	697b      	ldr	r3, [r7, #20]
 802079e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80207a2:	2320      	movs	r3, #32
 80207a4:	2205      	movs	r2, #5
 80207a6:	68f8      	ldr	r0, [r7, #12]
 80207a8:	f7ff fdd1 	bl	802034e <SCSI_SenseCode>
      return -1;
 80207ac:	f04f 33ff 	mov.w	r3, #4294967295
 80207b0:	e09a      	b.n	80208e8 <SCSI_Write10+0x182>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80207b2:	697b      	ldr	r3, [r7, #20]
 80207b4:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80207b8:	b25b      	sxtb	r3, r3
 80207ba:	2b00      	cmp	r3, #0
 80207bc:	da0a      	bge.n	80207d4 <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80207be:	697b      	ldr	r3, [r7, #20]
 80207c0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80207c4:	2320      	movs	r3, #32
 80207c6:	2205      	movs	r2, #5
 80207c8:	68f8      	ldr	r0, [r7, #12]
 80207ca:	f7ff fdc0 	bl	802034e <SCSI_SenseCode>
      return -1;
 80207ce:	f04f 33ff 	mov.w	r3, #4294967295
 80207d2:	e089      	b.n	80208e8 <SCSI_Write10+0x182>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80207d4:	68fb      	ldr	r3, [r7, #12]
 80207d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80207da:	689b      	ldr	r3, [r3, #8]
 80207dc:	7afa      	ldrb	r2, [r7, #11]
 80207de:	4610      	mov	r0, r2
 80207e0:	4798      	blx	r3
 80207e2:	4603      	mov	r3, r0
 80207e4:	2b00      	cmp	r3, #0
 80207e6:	d008      	beq.n	80207fa <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80207e8:	7af9      	ldrb	r1, [r7, #11]
 80207ea:	233a      	movs	r3, #58	; 0x3a
 80207ec:	2202      	movs	r2, #2
 80207ee:	68f8      	ldr	r0, [r7, #12]
 80207f0:	f7ff fdad 	bl	802034e <SCSI_SenseCode>
      return -1;
 80207f4:	f04f 33ff 	mov.w	r3, #4294967295
 80207f8:	e076      	b.n	80208e8 <SCSI_Write10+0x182>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 80207fa:	68fb      	ldr	r3, [r7, #12]
 80207fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020800:	68db      	ldr	r3, [r3, #12]
 8020802:	7afa      	ldrb	r2, [r7, #11]
 8020804:	4610      	mov	r0, r2
 8020806:	4798      	blx	r3
 8020808:	4603      	mov	r3, r0
 802080a:	2b00      	cmp	r3, #0
 802080c:	d008      	beq.n	8020820 <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 802080e:	7af9      	ldrb	r1, [r7, #11]
 8020810:	2327      	movs	r3, #39	; 0x27
 8020812:	2202      	movs	r2, #2
 8020814:	68f8      	ldr	r0, [r7, #12]
 8020816:	f7ff fd9a 	bl	802034e <SCSI_SenseCode>
      return -1;
 802081a:	f04f 33ff 	mov.w	r3, #4294967295
 802081e:	e063      	b.n	80208e8 <SCSI_Write10+0x182>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020820:	687b      	ldr	r3, [r7, #4]
 8020822:	3302      	adds	r3, #2
 8020824:	781b      	ldrb	r3, [r3, #0]
 8020826:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8020828:	687b      	ldr	r3, [r7, #4]
 802082a:	3303      	adds	r3, #3
 802082c:	781b      	ldrb	r3, [r3, #0]
 802082e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020830:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8020832:	687b      	ldr	r3, [r7, #4]
 8020834:	3304      	adds	r3, #4
 8020836:	781b      	ldrb	r3, [r3, #0]
 8020838:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 802083a:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 802083c:	687a      	ldr	r2, [r7, #4]
 802083e:	3205      	adds	r2, #5
 8020840:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8020842:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020844:	697b      	ldr	r3, [r7, #20]
 8020846:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 802084a:	687b      	ldr	r3, [r7, #4]
 802084c:	3307      	adds	r3, #7
 802084e:	781b      	ldrb	r3, [r3, #0]
 8020850:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8020852:	687a      	ldr	r2, [r7, #4]
 8020854:	3208      	adds	r2, #8
 8020856:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8020858:	431a      	orrs	r2, r3
 802085a:	697b      	ldr	r3, [r7, #20]
 802085c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8020860:	697b      	ldr	r3, [r7, #20]
 8020862:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020866:	697b      	ldr	r3, [r7, #20]
 8020868:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 802086c:	7af9      	ldrb	r1, [r7, #11]
 802086e:	68f8      	ldr	r0, [r7, #12]
 8020870:	f000 f94c 	bl	8020b0c <SCSI_CheckAddressRange>
 8020874:	4603      	mov	r3, r0
 8020876:	2b00      	cmp	r3, #0
 8020878:	da02      	bge.n	8020880 <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 802087a:	f04f 33ff 	mov.w	r3, #4294967295
 802087e:	e033      	b.n	80208e8 <SCSI_Write10+0x182>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8020880:	697b      	ldr	r3, [r7, #20]
 8020882:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020886:	697a      	ldr	r2, [r7, #20]
 8020888:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 802088c:	fb02 f303 	mul.w	r3, r2, r3
 8020890:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8020892:	697b      	ldr	r3, [r7, #20]
 8020894:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8020898:	693a      	ldr	r2, [r7, #16]
 802089a:	429a      	cmp	r2, r3
 802089c:	d00a      	beq.n	80208b4 <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 802089e:	697b      	ldr	r3, [r7, #20]
 80208a0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80208a4:	2320      	movs	r3, #32
 80208a6:	2205      	movs	r2, #5
 80208a8:	68f8      	ldr	r0, [r7, #12]
 80208aa:	f7ff fd50 	bl	802034e <SCSI_SenseCode>
      return -1;
 80208ae:	f04f 33ff 	mov.w	r3, #4294967295
 80208b2:	e019      	b.n	80208e8 <SCSI_Write10+0x182>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80208b4:	693b      	ldr	r3, [r7, #16]
 80208b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80208ba:	bf28      	it	cs
 80208bc:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80208c0:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80208c2:	697b      	ldr	r3, [r7, #20]
 80208c4:	2201      	movs	r2, #1
 80208c6:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80208c8:	697b      	ldr	r3, [r7, #20]
 80208ca:	f103 0210 	add.w	r2, r3, #16
 80208ce:	693b      	ldr	r3, [r7, #16]
 80208d0:	2101      	movs	r1, #1
 80208d2:	68f8      	ldr	r0, [r7, #12]
 80208d4:	f002 f87f 	bl	80229d6 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80208d8:	2300      	movs	r3, #0
 80208da:	e005      	b.n	80208e8 <SCSI_Write10+0x182>
    return SCSI_ProcessWrite(pdev, lun);
 80208dc:	7afb      	ldrb	r3, [r7, #11]
 80208de:	4619      	mov	r1, r3
 80208e0:	68f8      	ldr	r0, [r7, #12]
 80208e2:	f000 f9b4 	bl	8020c4e <SCSI_ProcessWrite>
 80208e6:	4603      	mov	r3, r0
}
 80208e8:	4618      	mov	r0, r3
 80208ea:	3718      	adds	r7, #24
 80208ec:	46bd      	mov	sp, r7
 80208ee:	bd80      	pop	{r7, pc}

080208f0 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80208f0:	b580      	push	{r7, lr}
 80208f2:	b086      	sub	sp, #24
 80208f4:	af00      	add	r7, sp, #0
 80208f6:	60f8      	str	r0, [r7, #12]
 80208f8:	460b      	mov	r3, r1
 80208fa:	607a      	str	r2, [r7, #4]
 80208fc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80208fe:	68fb      	ldr	r3, [r7, #12]
 8020900:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020904:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8020906:	697b      	ldr	r3, [r7, #20]
 8020908:	2b00      	cmp	r3, #0
 802090a:	d102      	bne.n	8020912 <SCSI_Write12+0x22>
  {
    return -1;
 802090c:	f04f 33ff 	mov.w	r3, #4294967295
 8020910:	e0bf      	b.n	8020a92 <SCSI_Write12+0x1a2>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8020912:	697b      	ldr	r3, [r7, #20]
 8020914:	7a1b      	ldrb	r3, [r3, #8]
 8020916:	2b00      	cmp	r3, #0
 8020918:	f040 80b5 	bne.w	8020a86 <SCSI_Write12+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 802091c:	697b      	ldr	r3, [r7, #20]
 802091e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8020922:	2b00      	cmp	r3, #0
 8020924:	d10a      	bne.n	802093c <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020926:	697b      	ldr	r3, [r7, #20]
 8020928:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 802092c:	2320      	movs	r3, #32
 802092e:	2205      	movs	r2, #5
 8020930:	68f8      	ldr	r0, [r7, #12]
 8020932:	f7ff fd0c 	bl	802034e <SCSI_SenseCode>
      return -1;
 8020936:	f04f 33ff 	mov.w	r3, #4294967295
 802093a:	e0aa      	b.n	8020a92 <SCSI_Write12+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 802093c:	697b      	ldr	r3, [r7, #20]
 802093e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8020942:	b25b      	sxtb	r3, r3
 8020944:	2b00      	cmp	r3, #0
 8020946:	da0a      	bge.n	802095e <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020948:	697b      	ldr	r3, [r7, #20]
 802094a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 802094e:	2320      	movs	r3, #32
 8020950:	2205      	movs	r2, #5
 8020952:	68f8      	ldr	r0, [r7, #12]
 8020954:	f7ff fcfb 	bl	802034e <SCSI_SenseCode>
      return -1;
 8020958:	f04f 33ff 	mov.w	r3, #4294967295
 802095c:	e099      	b.n	8020a92 <SCSI_Write12+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 802095e:	68fb      	ldr	r3, [r7, #12]
 8020960:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020964:	689b      	ldr	r3, [r3, #8]
 8020966:	7afa      	ldrb	r2, [r7, #11]
 8020968:	4610      	mov	r0, r2
 802096a:	4798      	blx	r3
 802096c:	4603      	mov	r3, r0
 802096e:	2b00      	cmp	r3, #0
 8020970:	d00b      	beq.n	802098a <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020972:	7af9      	ldrb	r1, [r7, #11]
 8020974:	233a      	movs	r3, #58	; 0x3a
 8020976:	2202      	movs	r2, #2
 8020978:	68f8      	ldr	r0, [r7, #12]
 802097a:	f7ff fce8 	bl	802034e <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 802097e:	697b      	ldr	r3, [r7, #20]
 8020980:	2205      	movs	r2, #5
 8020982:	721a      	strb	r2, [r3, #8]
      return -1;
 8020984:	f04f 33ff 	mov.w	r3, #4294967295
 8020988:	e083      	b.n	8020a92 <SCSI_Write12+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 802098a:	68fb      	ldr	r3, [r7, #12]
 802098c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020990:	68db      	ldr	r3, [r3, #12]
 8020992:	7afa      	ldrb	r2, [r7, #11]
 8020994:	4610      	mov	r0, r2
 8020996:	4798      	blx	r3
 8020998:	4603      	mov	r3, r0
 802099a:	2b00      	cmp	r3, #0
 802099c:	d00b      	beq.n	80209b6 <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 802099e:	7af9      	ldrb	r1, [r7, #11]
 80209a0:	2327      	movs	r3, #39	; 0x27
 80209a2:	2202      	movs	r2, #2
 80209a4:	68f8      	ldr	r0, [r7, #12]
 80209a6:	f7ff fcd2 	bl	802034e <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80209aa:	697b      	ldr	r3, [r7, #20]
 80209ac:	2205      	movs	r2, #5
 80209ae:	721a      	strb	r2, [r3, #8]
      return -1;
 80209b0:	f04f 33ff 	mov.w	r3, #4294967295
 80209b4:	e06d      	b.n	8020a92 <SCSI_Write12+0x1a2>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80209b6:	687b      	ldr	r3, [r7, #4]
 80209b8:	3302      	adds	r3, #2
 80209ba:	781b      	ldrb	r3, [r3, #0]
 80209bc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80209be:	687b      	ldr	r3, [r7, #4]
 80209c0:	3303      	adds	r3, #3
 80209c2:	781b      	ldrb	r3, [r3, #0]
 80209c4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80209c6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80209c8:	687b      	ldr	r3, [r7, #4]
 80209ca:	3304      	adds	r3, #4
 80209cc:	781b      	ldrb	r3, [r3, #0]
 80209ce:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80209d0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80209d2:	687a      	ldr	r2, [r7, #4]
 80209d4:	3205      	adds	r2, #5
 80209d6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80209d8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80209da:	697b      	ldr	r3, [r7, #20]
 80209dc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80209e0:	687b      	ldr	r3, [r7, #4]
 80209e2:	3306      	adds	r3, #6
 80209e4:	781b      	ldrb	r3, [r3, #0]
 80209e6:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80209e8:	687b      	ldr	r3, [r7, #4]
 80209ea:	3307      	adds	r3, #7
 80209ec:	781b      	ldrb	r3, [r3, #0]
 80209ee:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80209f0:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80209f2:	687b      	ldr	r3, [r7, #4]
 80209f4:	3308      	adds	r3, #8
 80209f6:	781b      	ldrb	r3, [r3, #0]
 80209f8:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80209fa:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80209fc:	687a      	ldr	r2, [r7, #4]
 80209fe:	3209      	adds	r2, #9
 8020a00:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8020a02:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020a04:	697b      	ldr	r3, [r7, #20]
 8020a06:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8020a0a:	697b      	ldr	r3, [r7, #20]
 8020a0c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020a10:	697b      	ldr	r3, [r7, #20]
 8020a12:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020a16:	7af9      	ldrb	r1, [r7, #11]
 8020a18:	68f8      	ldr	r0, [r7, #12]
 8020a1a:	f000 f877 	bl	8020b0c <SCSI_CheckAddressRange>
 8020a1e:	4603      	mov	r3, r0
 8020a20:	2b00      	cmp	r3, #0
 8020a22:	da02      	bge.n	8020a2a <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8020a24:	f04f 33ff 	mov.w	r3, #4294967295
 8020a28:	e033      	b.n	8020a92 <SCSI_Write12+0x1a2>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8020a2a:	697b      	ldr	r3, [r7, #20]
 8020a2c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020a30:	697a      	ldr	r2, [r7, #20]
 8020a32:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8020a36:	fb02 f303 	mul.w	r3, r2, r3
 8020a3a:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8020a3c:	697b      	ldr	r3, [r7, #20]
 8020a3e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8020a42:	693a      	ldr	r2, [r7, #16]
 8020a44:	429a      	cmp	r2, r3
 8020a46:	d00a      	beq.n	8020a5e <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020a48:	697b      	ldr	r3, [r7, #20]
 8020a4a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020a4e:	2320      	movs	r3, #32
 8020a50:	2205      	movs	r2, #5
 8020a52:	68f8      	ldr	r0, [r7, #12]
 8020a54:	f7ff fc7b 	bl	802034e <SCSI_SenseCode>
      return -1;
 8020a58:	f04f 33ff 	mov.w	r3, #4294967295
 8020a5c:	e019      	b.n	8020a92 <SCSI_Write12+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8020a5e:	693b      	ldr	r3, [r7, #16]
 8020a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020a64:	bf28      	it	cs
 8020a66:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8020a6a:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8020a6c:	697b      	ldr	r3, [r7, #20]
 8020a6e:	2201      	movs	r2, #1
 8020a70:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8020a72:	697b      	ldr	r3, [r7, #20]
 8020a74:	f103 0210 	add.w	r2, r3, #16
 8020a78:	693b      	ldr	r3, [r7, #16]
 8020a7a:	2101      	movs	r1, #1
 8020a7c:	68f8      	ldr	r0, [r7, #12]
 8020a7e:	f001 ffaa 	bl	80229d6 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8020a82:	2300      	movs	r3, #0
 8020a84:	e005      	b.n	8020a92 <SCSI_Write12+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 8020a86:	7afb      	ldrb	r3, [r7, #11]
 8020a88:	4619      	mov	r1, r3
 8020a8a:	68f8      	ldr	r0, [r7, #12]
 8020a8c:	f000 f8df 	bl	8020c4e <SCSI_ProcessWrite>
 8020a90:	4603      	mov	r3, r0
}
 8020a92:	4618      	mov	r0, r3
 8020a94:	3718      	adds	r7, #24
 8020a96:	46bd      	mov	sp, r7
 8020a98:	bd80      	pop	{r7, pc}

08020a9a <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020a9a:	b580      	push	{r7, lr}
 8020a9c:	b086      	sub	sp, #24
 8020a9e:	af00      	add	r7, sp, #0
 8020aa0:	60f8      	str	r0, [r7, #12]
 8020aa2:	460b      	mov	r3, r1
 8020aa4:	607a      	str	r2, [r7, #4]
 8020aa6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020aa8:	68fb      	ldr	r3, [r7, #12]
 8020aaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020aae:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020ab0:	697b      	ldr	r3, [r7, #20]
 8020ab2:	2b00      	cmp	r3, #0
 8020ab4:	d102      	bne.n	8020abc <SCSI_Verify10+0x22>
  {
    return -1;
 8020ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8020aba:	e023      	b.n	8020b04 <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8020abc:	687b      	ldr	r3, [r7, #4]
 8020abe:	3301      	adds	r3, #1
 8020ac0:	781b      	ldrb	r3, [r3, #0]
 8020ac2:	f003 0302 	and.w	r3, r3, #2
 8020ac6:	2b00      	cmp	r3, #0
 8020ac8:	d008      	beq.n	8020adc <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8020aca:	7af9      	ldrb	r1, [r7, #11]
 8020acc:	2324      	movs	r3, #36	; 0x24
 8020ace:	2205      	movs	r2, #5
 8020ad0:	68f8      	ldr	r0, [r7, #12]
 8020ad2:	f7ff fc3c 	bl	802034e <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8020ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8020ada:	e013      	b.n	8020b04 <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8020adc:	697b      	ldr	r3, [r7, #20]
 8020ade:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020ae2:	697b      	ldr	r3, [r7, #20]
 8020ae4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020ae8:	7af9      	ldrb	r1, [r7, #11]
 8020aea:	68f8      	ldr	r0, [r7, #12]
 8020aec:	f000 f80e 	bl	8020b0c <SCSI_CheckAddressRange>
 8020af0:	4603      	mov	r3, r0
 8020af2:	2b00      	cmp	r3, #0
 8020af4:	da02      	bge.n	8020afc <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 8020af6:	f04f 33ff 	mov.w	r3, #4294967295
 8020afa:	e003      	b.n	8020b04 <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 8020afc:	697b      	ldr	r3, [r7, #20]
 8020afe:	2200      	movs	r2, #0
 8020b00:	60da      	str	r2, [r3, #12]

  return 0;
 8020b02:	2300      	movs	r3, #0
}
 8020b04:	4618      	mov	r0, r3
 8020b06:	3718      	adds	r7, #24
 8020b08:	46bd      	mov	sp, r7
 8020b0a:	bd80      	pop	{r7, pc}

08020b0c <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8020b0c:	b580      	push	{r7, lr}
 8020b0e:	b086      	sub	sp, #24
 8020b10:	af00      	add	r7, sp, #0
 8020b12:	60f8      	str	r0, [r7, #12]
 8020b14:	607a      	str	r2, [r7, #4]
 8020b16:	603b      	str	r3, [r7, #0]
 8020b18:	460b      	mov	r3, r1
 8020b1a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020b1c:	68fb      	ldr	r3, [r7, #12]
 8020b1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020b22:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020b24:	697b      	ldr	r3, [r7, #20]
 8020b26:	2b00      	cmp	r3, #0
 8020b28:	d102      	bne.n	8020b30 <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 8020b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8020b2e:	e011      	b.n	8020b54 <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8020b30:	687a      	ldr	r2, [r7, #4]
 8020b32:	683b      	ldr	r3, [r7, #0]
 8020b34:	441a      	add	r2, r3
 8020b36:	697b      	ldr	r3, [r7, #20]
 8020b38:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8020b3c:	429a      	cmp	r2, r3
 8020b3e:	d908      	bls.n	8020b52 <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8020b40:	7af9      	ldrb	r1, [r7, #11]
 8020b42:	2321      	movs	r3, #33	; 0x21
 8020b44:	2205      	movs	r2, #5
 8020b46:	68f8      	ldr	r0, [r7, #12]
 8020b48:	f7ff fc01 	bl	802034e <SCSI_SenseCode>
    return -1;
 8020b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8020b50:	e000      	b.n	8020b54 <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 8020b52:	2300      	movs	r3, #0
}
 8020b54:	4618      	mov	r0, r3
 8020b56:	3718      	adds	r7, #24
 8020b58:	46bd      	mov	sp, r7
 8020b5a:	bd80      	pop	{r7, pc}

08020b5c <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8020b5c:	b590      	push	{r4, r7, lr}
 8020b5e:	b085      	sub	sp, #20
 8020b60:	af00      	add	r7, sp, #0
 8020b62:	6078      	str	r0, [r7, #4]
 8020b64:	460b      	mov	r3, r1
 8020b66:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020b68:	687b      	ldr	r3, [r7, #4]
 8020b6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020b6e:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8020b70:	68fb      	ldr	r3, [r7, #12]
 8020b72:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020b76:	68fa      	ldr	r2, [r7, #12]
 8020b78:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8020b7c:	fb02 f303 	mul.w	r3, r2, r3
 8020b80:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8020b82:	68fb      	ldr	r3, [r7, #12]
 8020b84:	2b00      	cmp	r3, #0
 8020b86:	d102      	bne.n	8020b8e <SCSI_ProcessRead+0x32>
  {
    return -1;
 8020b88:	f04f 33ff 	mov.w	r3, #4294967295
 8020b8c:	e05b      	b.n	8020c46 <SCSI_ProcessRead+0xea>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8020b8e:	68bb      	ldr	r3, [r7, #8]
 8020b90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020b94:	bf28      	it	cs
 8020b96:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8020b9a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8020b9c:	687b      	ldr	r3, [r7, #4]
 8020b9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020ba2:	691c      	ldr	r4, [r3, #16]
 8020ba4:	68fb      	ldr	r3, [r7, #12]
 8020ba6:	f103 0110 	add.w	r1, r3, #16
 8020baa:	68fb      	ldr	r3, [r7, #12]
 8020bac:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8020bb0:	68fb      	ldr	r3, [r7, #12]
 8020bb2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020bb6:	4618      	mov	r0, r3
 8020bb8:	68bb      	ldr	r3, [r7, #8]
 8020bba:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8020bbe:	b29b      	uxth	r3, r3
 8020bc0:	78f8      	ldrb	r0, [r7, #3]
 8020bc2:	47a0      	blx	r4
 8020bc4:	4603      	mov	r3, r0
 8020bc6:	2b00      	cmp	r3, #0
 8020bc8:	da08      	bge.n	8020bdc <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8020bca:	78f9      	ldrb	r1, [r7, #3]
 8020bcc:	2311      	movs	r3, #17
 8020bce:	2204      	movs	r2, #4
 8020bd0:	6878      	ldr	r0, [r7, #4]
 8020bd2:	f7ff fbbc 	bl	802034e <SCSI_SenseCode>
    return -1;
 8020bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8020bda:	e034      	b.n	8020c46 <SCSI_ProcessRead+0xea>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8020bdc:	68fb      	ldr	r3, [r7, #12]
 8020bde:	f103 0210 	add.w	r2, r3, #16
 8020be2:	68bb      	ldr	r3, [r7, #8]
 8020be4:	2181      	movs	r1, #129	; 0x81
 8020be6:	6878      	ldr	r0, [r7, #4]
 8020be8:	f001 fed4 	bl	8022994 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8020bec:	68fb      	ldr	r3, [r7, #12]
 8020bee:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020bf2:	68fb      	ldr	r3, [r7, #12]
 8020bf4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020bf8:	4619      	mov	r1, r3
 8020bfa:	68bb      	ldr	r3, [r7, #8]
 8020bfc:	fbb3 f3f1 	udiv	r3, r3, r1
 8020c00:	441a      	add	r2, r3
 8020c02:	68fb      	ldr	r3, [r7, #12]
 8020c04:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8020c08:	68fb      	ldr	r3, [r7, #12]
 8020c0a:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8020c0e:	68fb      	ldr	r3, [r7, #12]
 8020c10:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020c14:	4619      	mov	r1, r3
 8020c16:	68bb      	ldr	r3, [r7, #8]
 8020c18:	fbb3 f3f1 	udiv	r3, r3, r1
 8020c1c:	1ad2      	subs	r2, r2, r3
 8020c1e:	68fb      	ldr	r3, [r7, #12]
 8020c20:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8020c24:	68fb      	ldr	r3, [r7, #12]
 8020c26:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8020c2a:	68bb      	ldr	r3, [r7, #8]
 8020c2c:	1ad2      	subs	r2, r2, r3
 8020c2e:	68fb      	ldr	r3, [r7, #12]
 8020c30:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8020c34:	68fb      	ldr	r3, [r7, #12]
 8020c36:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020c3a:	2b00      	cmp	r3, #0
 8020c3c:	d102      	bne.n	8020c44 <SCSI_ProcessRead+0xe8>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8020c3e:	68fb      	ldr	r3, [r7, #12]
 8020c40:	2203      	movs	r2, #3
 8020c42:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8020c44:	2300      	movs	r3, #0
}
 8020c46:	4618      	mov	r0, r3
 8020c48:	3714      	adds	r7, #20
 8020c4a:	46bd      	mov	sp, r7
 8020c4c:	bd90      	pop	{r4, r7, pc}

08020c4e <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8020c4e:	b590      	push	{r4, r7, lr}
 8020c50:	b085      	sub	sp, #20
 8020c52:	af00      	add	r7, sp, #0
 8020c54:	6078      	str	r0, [r7, #4]
 8020c56:	460b      	mov	r3, r1
 8020c58:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020c5a:	687b      	ldr	r3, [r7, #4]
 8020c5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020c60:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8020c62:	68fb      	ldr	r3, [r7, #12]
 8020c64:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020c68:	68fa      	ldr	r2, [r7, #12]
 8020c6a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8020c6e:	fb02 f303 	mul.w	r3, r2, r3
 8020c72:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8020c74:	68fb      	ldr	r3, [r7, #12]
 8020c76:	2b00      	cmp	r3, #0
 8020c78:	d102      	bne.n	8020c80 <SCSI_ProcessWrite+0x32>
  {
    return -1;
 8020c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8020c7e:	e06b      	b.n	8020d58 <SCSI_ProcessWrite+0x10a>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8020c80:	68bb      	ldr	r3, [r7, #8]
 8020c82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020c86:	bf28      	it	cs
 8020c88:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8020c8c:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8020c8e:	687b      	ldr	r3, [r7, #4]
 8020c90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020c94:	695c      	ldr	r4, [r3, #20]
 8020c96:	68fb      	ldr	r3, [r7, #12]
 8020c98:	f103 0110 	add.w	r1, r3, #16
 8020c9c:	68fb      	ldr	r3, [r7, #12]
 8020c9e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8020ca2:	68fb      	ldr	r3, [r7, #12]
 8020ca4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020ca8:	4618      	mov	r0, r3
 8020caa:	68bb      	ldr	r3, [r7, #8]
 8020cac:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8020cb0:	b29b      	uxth	r3, r3
 8020cb2:	78f8      	ldrb	r0, [r7, #3]
 8020cb4:	47a0      	blx	r4
 8020cb6:	4603      	mov	r3, r0
 8020cb8:	2b00      	cmp	r3, #0
 8020cba:	da08      	bge.n	8020cce <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8020cbc:	78f9      	ldrb	r1, [r7, #3]
 8020cbe:	2303      	movs	r3, #3
 8020cc0:	2204      	movs	r2, #4
 8020cc2:	6878      	ldr	r0, [r7, #4]
 8020cc4:	f7ff fb43 	bl	802034e <SCSI_SenseCode>
    return -1;
 8020cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8020ccc:	e044      	b.n	8020d58 <SCSI_ProcessWrite+0x10a>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8020cce:	68fb      	ldr	r3, [r7, #12]
 8020cd0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020cd4:	68fb      	ldr	r3, [r7, #12]
 8020cd6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020cda:	4619      	mov	r1, r3
 8020cdc:	68bb      	ldr	r3, [r7, #8]
 8020cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8020ce2:	441a      	add	r2, r3
 8020ce4:	68fb      	ldr	r3, [r7, #12]
 8020ce6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8020cea:	68fb      	ldr	r3, [r7, #12]
 8020cec:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8020cf0:	68fb      	ldr	r3, [r7, #12]
 8020cf2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020cf6:	4619      	mov	r1, r3
 8020cf8:	68bb      	ldr	r3, [r7, #8]
 8020cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8020cfe:	1ad2      	subs	r2, r2, r3
 8020d00:	68fb      	ldr	r3, [r7, #12]
 8020d02:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8020d06:	68fb      	ldr	r3, [r7, #12]
 8020d08:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8020d0c:	68bb      	ldr	r3, [r7, #8]
 8020d0e:	1ad2      	subs	r2, r2, r3
 8020d10:	68fb      	ldr	r3, [r7, #12]
 8020d12:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8020d16:	68fb      	ldr	r3, [r7, #12]
 8020d18:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020d1c:	2b00      	cmp	r3, #0
 8020d1e:	d104      	bne.n	8020d2a <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8020d20:	2100      	movs	r1, #0
 8020d22:	6878      	ldr	r0, [r7, #4]
 8020d24:	f7fe fdd8 	bl	801f8d8 <MSC_BOT_SendCSW>
 8020d28:	e015      	b.n	8020d56 <SCSI_ProcessWrite+0x108>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8020d2a:	68fb      	ldr	r3, [r7, #12]
 8020d2c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020d30:	68fa      	ldr	r2, [r7, #12]
 8020d32:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8020d36:	fb02 f303 	mul.w	r3, r2, r3
 8020d3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020d3e:	bf28      	it	cs
 8020d40:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8020d44:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8020d46:	68fb      	ldr	r3, [r7, #12]
 8020d48:	f103 0210 	add.w	r2, r3, #16
 8020d4c:	68bb      	ldr	r3, [r7, #8]
 8020d4e:	2101      	movs	r1, #1
 8020d50:	6878      	ldr	r0, [r7, #4]
 8020d52:	f001 fe40 	bl	80229d6 <USBD_LL_PrepareReceive>
  }

  return 0;
 8020d56:	2300      	movs	r3, #0
}
 8020d58:	4618      	mov	r0, r3
 8020d5a:	3714      	adds	r7, #20
 8020d5c:	46bd      	mov	sp, r7
 8020d5e:	bd90      	pop	{r4, r7, pc}

08020d60 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8020d60:	b480      	push	{r7}
 8020d62:	b087      	sub	sp, #28
 8020d64:	af00      	add	r7, sp, #0
 8020d66:	60f8      	str	r0, [r7, #12]
 8020d68:	60b9      	str	r1, [r7, #8]
 8020d6a:	4613      	mov	r3, r2
 8020d6c:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8020d6e:	88fb      	ldrh	r3, [r7, #6]
 8020d70:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8020d72:	68fb      	ldr	r3, [r7, #12]
 8020d74:	2b00      	cmp	r3, #0
 8020d76:	d102      	bne.n	8020d7e <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8020d78:	f04f 33ff 	mov.w	r3, #4294967295
 8020d7c:	e013      	b.n	8020da6 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8020d7e:	8afa      	ldrh	r2, [r7, #22]
 8020d80:	68fb      	ldr	r3, [r7, #12]
 8020d82:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8020d84:	e00b      	b.n	8020d9e <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8020d86:	8afb      	ldrh	r3, [r7, #22]
 8020d88:	3b01      	subs	r3, #1
 8020d8a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8020d8c:	8afb      	ldrh	r3, [r7, #22]
 8020d8e:	68ba      	ldr	r2, [r7, #8]
 8020d90:	441a      	add	r2, r3
 8020d92:	8afb      	ldrh	r3, [r7, #22]
 8020d94:	7811      	ldrb	r1, [r2, #0]
 8020d96:	68fa      	ldr	r2, [r7, #12]
 8020d98:	4413      	add	r3, r2
 8020d9a:	460a      	mov	r2, r1
 8020d9c:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8020d9e:	8afb      	ldrh	r3, [r7, #22]
 8020da0:	2b00      	cmp	r3, #0
 8020da2:	d1f0      	bne.n	8020d86 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8020da4:	2300      	movs	r3, #0
}
 8020da6:	4618      	mov	r0, r3
 8020da8:	371c      	adds	r7, #28
 8020daa:	46bd      	mov	sp, r7
 8020dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020db0:	4770      	bx	lr

08020db2 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8020db2:	b580      	push	{r7, lr}
 8020db4:	b086      	sub	sp, #24
 8020db6:	af00      	add	r7, sp, #0
 8020db8:	60f8      	str	r0, [r7, #12]
 8020dba:	60b9      	str	r1, [r7, #8]
 8020dbc:	4613      	mov	r3, r2
 8020dbe:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8020dc0:	68fb      	ldr	r3, [r7, #12]
 8020dc2:	2b00      	cmp	r3, #0
 8020dc4:	d101      	bne.n	8020dca <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8020dc6:	2303      	movs	r3, #3
 8020dc8:	e01f      	b.n	8020e0a <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8020dca:	68fb      	ldr	r3, [r7, #12]
 8020dcc:	2200      	movs	r2, #0
 8020dce:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8020dd2:	68fb      	ldr	r3, [r7, #12]
 8020dd4:	2200      	movs	r2, #0
 8020dd6:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8020dda:	68fb      	ldr	r3, [r7, #12]
 8020ddc:	2200      	movs	r2, #0
 8020dde:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8020de2:	68bb      	ldr	r3, [r7, #8]
 8020de4:	2b00      	cmp	r3, #0
 8020de6:	d003      	beq.n	8020df0 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8020de8:	68fb      	ldr	r3, [r7, #12]
 8020dea:	68ba      	ldr	r2, [r7, #8]
 8020dec:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8020df0:	68fb      	ldr	r3, [r7, #12]
 8020df2:	2201      	movs	r2, #1
 8020df4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8020df8:	68fb      	ldr	r3, [r7, #12]
 8020dfa:	79fa      	ldrb	r2, [r7, #7]
 8020dfc:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8020dfe:	68f8      	ldr	r0, [r7, #12]
 8020e00:	f001 fc74 	bl	80226ec <USBD_LL_Init>
 8020e04:	4603      	mov	r3, r0
 8020e06:	75fb      	strb	r3, [r7, #23]

  return ret;
 8020e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8020e0a:	4618      	mov	r0, r3
 8020e0c:	3718      	adds	r7, #24
 8020e0e:	46bd      	mov	sp, r7
 8020e10:	bd80      	pop	{r7, pc}

08020e12 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8020e12:	b580      	push	{r7, lr}
 8020e14:	b084      	sub	sp, #16
 8020e16:	af00      	add	r7, sp, #0
 8020e18:	6078      	str	r0, [r7, #4]
 8020e1a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8020e1c:	2300      	movs	r3, #0
 8020e1e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8020e20:	683b      	ldr	r3, [r7, #0]
 8020e22:	2b00      	cmp	r3, #0
 8020e24:	d101      	bne.n	8020e2a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8020e26:	2303      	movs	r3, #3
 8020e28:	e016      	b.n	8020e58 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8020e2a:	687b      	ldr	r3, [r7, #4]
 8020e2c:	683a      	ldr	r2, [r7, #0]
 8020e2e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8020e32:	687b      	ldr	r3, [r7, #4]
 8020e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020e3a:	2b00      	cmp	r3, #0
 8020e3c:	d00b      	beq.n	8020e56 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8020e3e:	687b      	ldr	r3, [r7, #4]
 8020e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020e46:	f107 020e 	add.w	r2, r7, #14
 8020e4a:	4610      	mov	r0, r2
 8020e4c:	4798      	blx	r3
 8020e4e:	4602      	mov	r2, r0
 8020e50:	687b      	ldr	r3, [r7, #4]
 8020e52:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8020e56:	2300      	movs	r3, #0
}
 8020e58:	4618      	mov	r0, r3
 8020e5a:	3710      	adds	r7, #16
 8020e5c:	46bd      	mov	sp, r7
 8020e5e:	bd80      	pop	{r7, pc}

08020e60 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8020e60:	b580      	push	{r7, lr}
 8020e62:	b082      	sub	sp, #8
 8020e64:	af00      	add	r7, sp, #0
 8020e66:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8020e68:	6878      	ldr	r0, [r7, #4]
 8020e6a:	f001 fc8b 	bl	8022784 <USBD_LL_Start>
 8020e6e:	4603      	mov	r3, r0
}
 8020e70:	4618      	mov	r0, r3
 8020e72:	3708      	adds	r7, #8
 8020e74:	46bd      	mov	sp, r7
 8020e76:	bd80      	pop	{r7, pc}

08020e78 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8020e78:	b480      	push	{r7}
 8020e7a:	b083      	sub	sp, #12
 8020e7c:	af00      	add	r7, sp, #0
 8020e7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8020e80:	2300      	movs	r3, #0
}
 8020e82:	4618      	mov	r0, r3
 8020e84:	370c      	adds	r7, #12
 8020e86:	46bd      	mov	sp, r7
 8020e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e8c:	4770      	bx	lr

08020e8e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8020e8e:	b580      	push	{r7, lr}
 8020e90:	b084      	sub	sp, #16
 8020e92:	af00      	add	r7, sp, #0
 8020e94:	6078      	str	r0, [r7, #4]
 8020e96:	460b      	mov	r3, r1
 8020e98:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8020e9a:	2303      	movs	r3, #3
 8020e9c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8020e9e:	687b      	ldr	r3, [r7, #4]
 8020ea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020ea4:	2b00      	cmp	r3, #0
 8020ea6:	d009      	beq.n	8020ebc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8020ea8:	687b      	ldr	r3, [r7, #4]
 8020eaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020eae:	681b      	ldr	r3, [r3, #0]
 8020eb0:	78fa      	ldrb	r2, [r7, #3]
 8020eb2:	4611      	mov	r1, r2
 8020eb4:	6878      	ldr	r0, [r7, #4]
 8020eb6:	4798      	blx	r3
 8020eb8:	4603      	mov	r3, r0
 8020eba:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8020ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8020ebe:	4618      	mov	r0, r3
 8020ec0:	3710      	adds	r7, #16
 8020ec2:	46bd      	mov	sp, r7
 8020ec4:	bd80      	pop	{r7, pc}

08020ec6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8020ec6:	b580      	push	{r7, lr}
 8020ec8:	b082      	sub	sp, #8
 8020eca:	af00      	add	r7, sp, #0
 8020ecc:	6078      	str	r0, [r7, #4]
 8020ece:	460b      	mov	r3, r1
 8020ed0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8020ed2:	687b      	ldr	r3, [r7, #4]
 8020ed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020ed8:	2b00      	cmp	r3, #0
 8020eda:	d007      	beq.n	8020eec <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8020edc:	687b      	ldr	r3, [r7, #4]
 8020ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020ee2:	685b      	ldr	r3, [r3, #4]
 8020ee4:	78fa      	ldrb	r2, [r7, #3]
 8020ee6:	4611      	mov	r1, r2
 8020ee8:	6878      	ldr	r0, [r7, #4]
 8020eea:	4798      	blx	r3
  }

  return USBD_OK;
 8020eec:	2300      	movs	r3, #0
}
 8020eee:	4618      	mov	r0, r3
 8020ef0:	3708      	adds	r7, #8
 8020ef2:	46bd      	mov	sp, r7
 8020ef4:	bd80      	pop	{r7, pc}

08020ef6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8020ef6:	b580      	push	{r7, lr}
 8020ef8:	b084      	sub	sp, #16
 8020efa:	af00      	add	r7, sp, #0
 8020efc:	6078      	str	r0, [r7, #4]
 8020efe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8020f00:	687b      	ldr	r3, [r7, #4]
 8020f02:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8020f06:	6839      	ldr	r1, [r7, #0]
 8020f08:	4618      	mov	r0, r3
 8020f0a:	f000 ffb9 	bl	8021e80 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8020f0e:	687b      	ldr	r3, [r7, #4]
 8020f10:	2201      	movs	r2, #1
 8020f12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8020f16:	687b      	ldr	r3, [r7, #4]
 8020f18:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8020f1c:	461a      	mov	r2, r3
 8020f1e:	687b      	ldr	r3, [r7, #4]
 8020f20:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8020f24:	687b      	ldr	r3, [r7, #4]
 8020f26:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8020f2a:	f003 031f 	and.w	r3, r3, #31
 8020f2e:	2b02      	cmp	r3, #2
 8020f30:	d01a      	beq.n	8020f68 <USBD_LL_SetupStage+0x72>
 8020f32:	2b02      	cmp	r3, #2
 8020f34:	d822      	bhi.n	8020f7c <USBD_LL_SetupStage+0x86>
 8020f36:	2b00      	cmp	r3, #0
 8020f38:	d002      	beq.n	8020f40 <USBD_LL_SetupStage+0x4a>
 8020f3a:	2b01      	cmp	r3, #1
 8020f3c:	d00a      	beq.n	8020f54 <USBD_LL_SetupStage+0x5e>
 8020f3e:	e01d      	b.n	8020f7c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8020f40:	687b      	ldr	r3, [r7, #4]
 8020f42:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8020f46:	4619      	mov	r1, r3
 8020f48:	6878      	ldr	r0, [r7, #4]
 8020f4a:	f000 fa61 	bl	8021410 <USBD_StdDevReq>
 8020f4e:	4603      	mov	r3, r0
 8020f50:	73fb      	strb	r3, [r7, #15]
      break;
 8020f52:	e020      	b.n	8020f96 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8020f54:	687b      	ldr	r3, [r7, #4]
 8020f56:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8020f5a:	4619      	mov	r1, r3
 8020f5c:	6878      	ldr	r0, [r7, #4]
 8020f5e:	f000 fac5 	bl	80214ec <USBD_StdItfReq>
 8020f62:	4603      	mov	r3, r0
 8020f64:	73fb      	strb	r3, [r7, #15]
      break;
 8020f66:	e016      	b.n	8020f96 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8020f68:	687b      	ldr	r3, [r7, #4]
 8020f6a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8020f6e:	4619      	mov	r1, r3
 8020f70:	6878      	ldr	r0, [r7, #4]
 8020f72:	f000 fb04 	bl	802157e <USBD_StdEPReq>
 8020f76:	4603      	mov	r3, r0
 8020f78:	73fb      	strb	r3, [r7, #15]
      break;
 8020f7a:	e00c      	b.n	8020f96 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8020f7c:	687b      	ldr	r3, [r7, #4]
 8020f7e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8020f82:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8020f86:	b2db      	uxtb	r3, r3
 8020f88:	4619      	mov	r1, r3
 8020f8a:	6878      	ldr	r0, [r7, #4]
 8020f8c:	f001 fc79 	bl	8022882 <USBD_LL_StallEP>
 8020f90:	4603      	mov	r3, r0
 8020f92:	73fb      	strb	r3, [r7, #15]
      break;
 8020f94:	bf00      	nop
  }

  return ret;
 8020f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8020f98:	4618      	mov	r0, r3
 8020f9a:	3710      	adds	r7, #16
 8020f9c:	46bd      	mov	sp, r7
 8020f9e:	bd80      	pop	{r7, pc}

08020fa0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8020fa0:	b580      	push	{r7, lr}
 8020fa2:	b086      	sub	sp, #24
 8020fa4:	af00      	add	r7, sp, #0
 8020fa6:	60f8      	str	r0, [r7, #12]
 8020fa8:	460b      	mov	r3, r1
 8020faa:	607a      	str	r2, [r7, #4]
 8020fac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8020fae:	7afb      	ldrb	r3, [r7, #11]
 8020fb0:	2b00      	cmp	r3, #0
 8020fb2:	d138      	bne.n	8021026 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8020fb4:	68fb      	ldr	r3, [r7, #12]
 8020fb6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8020fba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8020fbc:	68fb      	ldr	r3, [r7, #12]
 8020fbe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8020fc2:	2b03      	cmp	r3, #3
 8020fc4:	d14a      	bne.n	802105c <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8020fc6:	693b      	ldr	r3, [r7, #16]
 8020fc8:	689a      	ldr	r2, [r3, #8]
 8020fca:	693b      	ldr	r3, [r7, #16]
 8020fcc:	68db      	ldr	r3, [r3, #12]
 8020fce:	429a      	cmp	r2, r3
 8020fd0:	d913      	bls.n	8020ffa <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8020fd2:	693b      	ldr	r3, [r7, #16]
 8020fd4:	689a      	ldr	r2, [r3, #8]
 8020fd6:	693b      	ldr	r3, [r7, #16]
 8020fd8:	68db      	ldr	r3, [r3, #12]
 8020fda:	1ad2      	subs	r2, r2, r3
 8020fdc:	693b      	ldr	r3, [r7, #16]
 8020fde:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8020fe0:	693b      	ldr	r3, [r7, #16]
 8020fe2:	68da      	ldr	r2, [r3, #12]
 8020fe4:	693b      	ldr	r3, [r7, #16]
 8020fe6:	689b      	ldr	r3, [r3, #8]
 8020fe8:	4293      	cmp	r3, r2
 8020fea:	bf28      	it	cs
 8020fec:	4613      	movcs	r3, r2
 8020fee:	461a      	mov	r2, r3
 8020ff0:	6879      	ldr	r1, [r7, #4]
 8020ff2:	68f8      	ldr	r0, [r7, #12]
 8020ff4:	f001 f81b 	bl	802202e <USBD_CtlContinueRx>
 8020ff8:	e030      	b.n	802105c <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8020ffa:	68fb      	ldr	r3, [r7, #12]
 8020ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021000:	b2db      	uxtb	r3, r3
 8021002:	2b03      	cmp	r3, #3
 8021004:	d10b      	bne.n	802101e <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8021006:	68fb      	ldr	r3, [r7, #12]
 8021008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802100c:	691b      	ldr	r3, [r3, #16]
 802100e:	2b00      	cmp	r3, #0
 8021010:	d005      	beq.n	802101e <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8021012:	68fb      	ldr	r3, [r7, #12]
 8021014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021018:	691b      	ldr	r3, [r3, #16]
 802101a:	68f8      	ldr	r0, [r7, #12]
 802101c:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 802101e:	68f8      	ldr	r0, [r7, #12]
 8021020:	f001 f816 	bl	8022050 <USBD_CtlSendStatus>
 8021024:	e01a      	b.n	802105c <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021026:	68fb      	ldr	r3, [r7, #12]
 8021028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802102c:	b2db      	uxtb	r3, r3
 802102e:	2b03      	cmp	r3, #3
 8021030:	d114      	bne.n	802105c <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8021032:	68fb      	ldr	r3, [r7, #12]
 8021034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021038:	699b      	ldr	r3, [r3, #24]
 802103a:	2b00      	cmp	r3, #0
 802103c:	d00e      	beq.n	802105c <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 802103e:	68fb      	ldr	r3, [r7, #12]
 8021040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021044:	699b      	ldr	r3, [r3, #24]
 8021046:	7afa      	ldrb	r2, [r7, #11]
 8021048:	4611      	mov	r1, r2
 802104a:	68f8      	ldr	r0, [r7, #12]
 802104c:	4798      	blx	r3
 802104e:	4603      	mov	r3, r0
 8021050:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8021052:	7dfb      	ldrb	r3, [r7, #23]
 8021054:	2b00      	cmp	r3, #0
 8021056:	d001      	beq.n	802105c <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8021058:	7dfb      	ldrb	r3, [r7, #23]
 802105a:	e000      	b.n	802105e <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 802105c:	2300      	movs	r3, #0
}
 802105e:	4618      	mov	r0, r3
 8021060:	3718      	adds	r7, #24
 8021062:	46bd      	mov	sp, r7
 8021064:	bd80      	pop	{r7, pc}

08021066 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8021066:	b580      	push	{r7, lr}
 8021068:	b086      	sub	sp, #24
 802106a:	af00      	add	r7, sp, #0
 802106c:	60f8      	str	r0, [r7, #12]
 802106e:	460b      	mov	r3, r1
 8021070:	607a      	str	r2, [r7, #4]
 8021072:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8021074:	7afb      	ldrb	r3, [r7, #11]
 8021076:	2b00      	cmp	r3, #0
 8021078:	d16b      	bne.n	8021152 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 802107a:	68fb      	ldr	r3, [r7, #12]
 802107c:	3314      	adds	r3, #20
 802107e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8021080:	68fb      	ldr	r3, [r7, #12]
 8021082:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8021086:	2b02      	cmp	r3, #2
 8021088:	d156      	bne.n	8021138 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 802108a:	693b      	ldr	r3, [r7, #16]
 802108c:	689a      	ldr	r2, [r3, #8]
 802108e:	693b      	ldr	r3, [r7, #16]
 8021090:	68db      	ldr	r3, [r3, #12]
 8021092:	429a      	cmp	r2, r3
 8021094:	d914      	bls.n	80210c0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8021096:	693b      	ldr	r3, [r7, #16]
 8021098:	689a      	ldr	r2, [r3, #8]
 802109a:	693b      	ldr	r3, [r7, #16]
 802109c:	68db      	ldr	r3, [r3, #12]
 802109e:	1ad2      	subs	r2, r2, r3
 80210a0:	693b      	ldr	r3, [r7, #16]
 80210a2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80210a4:	693b      	ldr	r3, [r7, #16]
 80210a6:	689b      	ldr	r3, [r3, #8]
 80210a8:	461a      	mov	r2, r3
 80210aa:	6879      	ldr	r1, [r7, #4]
 80210ac:	68f8      	ldr	r0, [r7, #12]
 80210ae:	f000 ffad 	bl	802200c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80210b2:	2300      	movs	r3, #0
 80210b4:	2200      	movs	r2, #0
 80210b6:	2100      	movs	r1, #0
 80210b8:	68f8      	ldr	r0, [r7, #12]
 80210ba:	f001 fc8c 	bl	80229d6 <USBD_LL_PrepareReceive>
 80210be:	e03b      	b.n	8021138 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80210c0:	693b      	ldr	r3, [r7, #16]
 80210c2:	68da      	ldr	r2, [r3, #12]
 80210c4:	693b      	ldr	r3, [r7, #16]
 80210c6:	689b      	ldr	r3, [r3, #8]
 80210c8:	429a      	cmp	r2, r3
 80210ca:	d11c      	bne.n	8021106 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80210cc:	693b      	ldr	r3, [r7, #16]
 80210ce:	685a      	ldr	r2, [r3, #4]
 80210d0:	693b      	ldr	r3, [r7, #16]
 80210d2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80210d4:	429a      	cmp	r2, r3
 80210d6:	d316      	bcc.n	8021106 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80210d8:	693b      	ldr	r3, [r7, #16]
 80210da:	685a      	ldr	r2, [r3, #4]
 80210dc:	68fb      	ldr	r3, [r7, #12]
 80210de:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80210e2:	429a      	cmp	r2, r3
 80210e4:	d20f      	bcs.n	8021106 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80210e6:	2200      	movs	r2, #0
 80210e8:	2100      	movs	r1, #0
 80210ea:	68f8      	ldr	r0, [r7, #12]
 80210ec:	f000 ff8e 	bl	802200c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80210f0:	68fb      	ldr	r3, [r7, #12]
 80210f2:	2200      	movs	r2, #0
 80210f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80210f8:	2300      	movs	r3, #0
 80210fa:	2200      	movs	r2, #0
 80210fc:	2100      	movs	r1, #0
 80210fe:	68f8      	ldr	r0, [r7, #12]
 8021100:	f001 fc69 	bl	80229d6 <USBD_LL_PrepareReceive>
 8021104:	e018      	b.n	8021138 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021106:	68fb      	ldr	r3, [r7, #12]
 8021108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802110c:	b2db      	uxtb	r3, r3
 802110e:	2b03      	cmp	r3, #3
 8021110:	d10b      	bne.n	802112a <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8021112:	68fb      	ldr	r3, [r7, #12]
 8021114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021118:	68db      	ldr	r3, [r3, #12]
 802111a:	2b00      	cmp	r3, #0
 802111c:	d005      	beq.n	802112a <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 802111e:	68fb      	ldr	r3, [r7, #12]
 8021120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021124:	68db      	ldr	r3, [r3, #12]
 8021126:	68f8      	ldr	r0, [r7, #12]
 8021128:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 802112a:	2180      	movs	r1, #128	; 0x80
 802112c:	68f8      	ldr	r0, [r7, #12]
 802112e:	f001 fba8 	bl	8022882 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8021132:	68f8      	ldr	r0, [r7, #12]
 8021134:	f000 ff9f 	bl	8022076 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8021138:	68fb      	ldr	r3, [r7, #12]
 802113a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 802113e:	2b01      	cmp	r3, #1
 8021140:	d122      	bne.n	8021188 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8021142:	68f8      	ldr	r0, [r7, #12]
 8021144:	f7ff fe98 	bl	8020e78 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8021148:	68fb      	ldr	r3, [r7, #12]
 802114a:	2200      	movs	r2, #0
 802114c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8021150:	e01a      	b.n	8021188 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021152:	68fb      	ldr	r3, [r7, #12]
 8021154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021158:	b2db      	uxtb	r3, r3
 802115a:	2b03      	cmp	r3, #3
 802115c:	d114      	bne.n	8021188 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 802115e:	68fb      	ldr	r3, [r7, #12]
 8021160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021164:	695b      	ldr	r3, [r3, #20]
 8021166:	2b00      	cmp	r3, #0
 8021168:	d00e      	beq.n	8021188 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 802116a:	68fb      	ldr	r3, [r7, #12]
 802116c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021170:	695b      	ldr	r3, [r3, #20]
 8021172:	7afa      	ldrb	r2, [r7, #11]
 8021174:	4611      	mov	r1, r2
 8021176:	68f8      	ldr	r0, [r7, #12]
 8021178:	4798      	blx	r3
 802117a:	4603      	mov	r3, r0
 802117c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 802117e:	7dfb      	ldrb	r3, [r7, #23]
 8021180:	2b00      	cmp	r3, #0
 8021182:	d001      	beq.n	8021188 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8021184:	7dfb      	ldrb	r3, [r7, #23]
 8021186:	e000      	b.n	802118a <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8021188:	2300      	movs	r3, #0
}
 802118a:	4618      	mov	r0, r3
 802118c:	3718      	adds	r7, #24
 802118e:	46bd      	mov	sp, r7
 8021190:	bd80      	pop	{r7, pc}

08021192 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8021192:	b580      	push	{r7, lr}
 8021194:	b082      	sub	sp, #8
 8021196:	af00      	add	r7, sp, #0
 8021198:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 802119a:	687b      	ldr	r3, [r7, #4]
 802119c:	2201      	movs	r2, #1
 802119e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80211a2:	687b      	ldr	r3, [r7, #4]
 80211a4:	2200      	movs	r2, #0
 80211a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80211aa:	687b      	ldr	r3, [r7, #4]
 80211ac:	2200      	movs	r2, #0
 80211ae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80211b0:	687b      	ldr	r3, [r7, #4]
 80211b2:	2200      	movs	r2, #0
 80211b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80211b8:	687b      	ldr	r3, [r7, #4]
 80211ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80211be:	2b00      	cmp	r3, #0
 80211c0:	d101      	bne.n	80211c6 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80211c2:	2303      	movs	r3, #3
 80211c4:	e02f      	b.n	8021226 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80211c6:	687b      	ldr	r3, [r7, #4]
 80211c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80211cc:	2b00      	cmp	r3, #0
 80211ce:	d00f      	beq.n	80211f0 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80211d0:	687b      	ldr	r3, [r7, #4]
 80211d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80211d6:	685b      	ldr	r3, [r3, #4]
 80211d8:	2b00      	cmp	r3, #0
 80211da:	d009      	beq.n	80211f0 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80211dc:	687b      	ldr	r3, [r7, #4]
 80211de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80211e2:	685b      	ldr	r3, [r3, #4]
 80211e4:	687a      	ldr	r2, [r7, #4]
 80211e6:	6852      	ldr	r2, [r2, #4]
 80211e8:	b2d2      	uxtb	r2, r2
 80211ea:	4611      	mov	r1, r2
 80211ec:	6878      	ldr	r0, [r7, #4]
 80211ee:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80211f0:	2340      	movs	r3, #64	; 0x40
 80211f2:	2200      	movs	r2, #0
 80211f4:	2100      	movs	r1, #0
 80211f6:	6878      	ldr	r0, [r7, #4]
 80211f8:	f001 fadf 	bl	80227ba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80211fc:	687b      	ldr	r3, [r7, #4]
 80211fe:	2201      	movs	r2, #1
 8021200:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8021204:	687b      	ldr	r3, [r7, #4]
 8021206:	2240      	movs	r2, #64	; 0x40
 8021208:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 802120c:	2340      	movs	r3, #64	; 0x40
 802120e:	2200      	movs	r2, #0
 8021210:	2180      	movs	r1, #128	; 0x80
 8021212:	6878      	ldr	r0, [r7, #4]
 8021214:	f001 fad1 	bl	80227ba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8021218:	687b      	ldr	r3, [r7, #4]
 802121a:	2201      	movs	r2, #1
 802121c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 802121e:	687b      	ldr	r3, [r7, #4]
 8021220:	2240      	movs	r2, #64	; 0x40
 8021222:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8021224:	2300      	movs	r3, #0
}
 8021226:	4618      	mov	r0, r3
 8021228:	3708      	adds	r7, #8
 802122a:	46bd      	mov	sp, r7
 802122c:	bd80      	pop	{r7, pc}

0802122e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 802122e:	b480      	push	{r7}
 8021230:	b083      	sub	sp, #12
 8021232:	af00      	add	r7, sp, #0
 8021234:	6078      	str	r0, [r7, #4]
 8021236:	460b      	mov	r3, r1
 8021238:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 802123a:	687b      	ldr	r3, [r7, #4]
 802123c:	78fa      	ldrb	r2, [r7, #3]
 802123e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8021240:	2300      	movs	r3, #0
}
 8021242:	4618      	mov	r0, r3
 8021244:	370c      	adds	r7, #12
 8021246:	46bd      	mov	sp, r7
 8021248:	f85d 7b04 	ldr.w	r7, [sp], #4
 802124c:	4770      	bx	lr

0802124e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 802124e:	b480      	push	{r7}
 8021250:	b083      	sub	sp, #12
 8021252:	af00      	add	r7, sp, #0
 8021254:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8021256:	687b      	ldr	r3, [r7, #4]
 8021258:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802125c:	b2da      	uxtb	r2, r3
 802125e:	687b      	ldr	r3, [r7, #4]
 8021260:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8021264:	687b      	ldr	r3, [r7, #4]
 8021266:	2204      	movs	r2, #4
 8021268:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 802126c:	2300      	movs	r3, #0
}
 802126e:	4618      	mov	r0, r3
 8021270:	370c      	adds	r7, #12
 8021272:	46bd      	mov	sp, r7
 8021274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021278:	4770      	bx	lr

0802127a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 802127a:	b480      	push	{r7}
 802127c:	b083      	sub	sp, #12
 802127e:	af00      	add	r7, sp, #0
 8021280:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8021282:	687b      	ldr	r3, [r7, #4]
 8021284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021288:	b2db      	uxtb	r3, r3
 802128a:	2b04      	cmp	r3, #4
 802128c:	d106      	bne.n	802129c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 802128e:	687b      	ldr	r3, [r7, #4]
 8021290:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8021294:	b2da      	uxtb	r2, r3
 8021296:	687b      	ldr	r3, [r7, #4]
 8021298:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 802129c:	2300      	movs	r3, #0
}
 802129e:	4618      	mov	r0, r3
 80212a0:	370c      	adds	r7, #12
 80212a2:	46bd      	mov	sp, r7
 80212a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212a8:	4770      	bx	lr

080212aa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80212aa:	b580      	push	{r7, lr}
 80212ac:	b082      	sub	sp, #8
 80212ae:	af00      	add	r7, sp, #0
 80212b0:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80212b2:	687b      	ldr	r3, [r7, #4]
 80212b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80212b8:	2b00      	cmp	r3, #0
 80212ba:	d101      	bne.n	80212c0 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80212bc:	2303      	movs	r3, #3
 80212be:	e012      	b.n	80212e6 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80212c0:	687b      	ldr	r3, [r7, #4]
 80212c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80212c6:	b2db      	uxtb	r3, r3
 80212c8:	2b03      	cmp	r3, #3
 80212ca:	d10b      	bne.n	80212e4 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80212cc:	687b      	ldr	r3, [r7, #4]
 80212ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80212d2:	69db      	ldr	r3, [r3, #28]
 80212d4:	2b00      	cmp	r3, #0
 80212d6:	d005      	beq.n	80212e4 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80212d8:	687b      	ldr	r3, [r7, #4]
 80212da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80212de:	69db      	ldr	r3, [r3, #28]
 80212e0:	6878      	ldr	r0, [r7, #4]
 80212e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80212e4:	2300      	movs	r3, #0
}
 80212e6:	4618      	mov	r0, r3
 80212e8:	3708      	adds	r7, #8
 80212ea:	46bd      	mov	sp, r7
 80212ec:	bd80      	pop	{r7, pc}

080212ee <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80212ee:	b580      	push	{r7, lr}
 80212f0:	b082      	sub	sp, #8
 80212f2:	af00      	add	r7, sp, #0
 80212f4:	6078      	str	r0, [r7, #4]
 80212f6:	460b      	mov	r3, r1
 80212f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80212fa:	687b      	ldr	r3, [r7, #4]
 80212fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021300:	2b00      	cmp	r3, #0
 8021302:	d101      	bne.n	8021308 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8021304:	2303      	movs	r3, #3
 8021306:	e014      	b.n	8021332 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021308:	687b      	ldr	r3, [r7, #4]
 802130a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802130e:	b2db      	uxtb	r3, r3
 8021310:	2b03      	cmp	r3, #3
 8021312:	d10d      	bne.n	8021330 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8021314:	687b      	ldr	r3, [r7, #4]
 8021316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802131a:	6a1b      	ldr	r3, [r3, #32]
 802131c:	2b00      	cmp	r3, #0
 802131e:	d007      	beq.n	8021330 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8021320:	687b      	ldr	r3, [r7, #4]
 8021322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021326:	6a1b      	ldr	r3, [r3, #32]
 8021328:	78fa      	ldrb	r2, [r7, #3]
 802132a:	4611      	mov	r1, r2
 802132c:	6878      	ldr	r0, [r7, #4]
 802132e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8021330:	2300      	movs	r3, #0
}
 8021332:	4618      	mov	r0, r3
 8021334:	3708      	adds	r7, #8
 8021336:	46bd      	mov	sp, r7
 8021338:	bd80      	pop	{r7, pc}

0802133a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 802133a:	b580      	push	{r7, lr}
 802133c:	b082      	sub	sp, #8
 802133e:	af00      	add	r7, sp, #0
 8021340:	6078      	str	r0, [r7, #4]
 8021342:	460b      	mov	r3, r1
 8021344:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8021346:	687b      	ldr	r3, [r7, #4]
 8021348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802134c:	2b00      	cmp	r3, #0
 802134e:	d101      	bne.n	8021354 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8021350:	2303      	movs	r3, #3
 8021352:	e014      	b.n	802137e <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021354:	687b      	ldr	r3, [r7, #4]
 8021356:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802135a:	b2db      	uxtb	r3, r3
 802135c:	2b03      	cmp	r3, #3
 802135e:	d10d      	bne.n	802137c <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8021360:	687b      	ldr	r3, [r7, #4]
 8021362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021368:	2b00      	cmp	r3, #0
 802136a:	d007      	beq.n	802137c <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 802136c:	687b      	ldr	r3, [r7, #4]
 802136e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021374:	78fa      	ldrb	r2, [r7, #3]
 8021376:	4611      	mov	r1, r2
 8021378:	6878      	ldr	r0, [r7, #4]
 802137a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 802137c:	2300      	movs	r3, #0
}
 802137e:	4618      	mov	r0, r3
 8021380:	3708      	adds	r7, #8
 8021382:	46bd      	mov	sp, r7
 8021384:	bd80      	pop	{r7, pc}

08021386 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8021386:	b480      	push	{r7}
 8021388:	b083      	sub	sp, #12
 802138a:	af00      	add	r7, sp, #0
 802138c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 802138e:	2300      	movs	r3, #0
}
 8021390:	4618      	mov	r0, r3
 8021392:	370c      	adds	r7, #12
 8021394:	46bd      	mov	sp, r7
 8021396:	f85d 7b04 	ldr.w	r7, [sp], #4
 802139a:	4770      	bx	lr

0802139c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 802139c:	b580      	push	{r7, lr}
 802139e:	b082      	sub	sp, #8
 80213a0:	af00      	add	r7, sp, #0
 80213a2:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80213a4:	687b      	ldr	r3, [r7, #4]
 80213a6:	2201      	movs	r2, #1
 80213a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80213ac:	687b      	ldr	r3, [r7, #4]
 80213ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80213b2:	2b00      	cmp	r3, #0
 80213b4:	d009      	beq.n	80213ca <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80213b6:	687b      	ldr	r3, [r7, #4]
 80213b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80213bc:	685b      	ldr	r3, [r3, #4]
 80213be:	687a      	ldr	r2, [r7, #4]
 80213c0:	6852      	ldr	r2, [r2, #4]
 80213c2:	b2d2      	uxtb	r2, r2
 80213c4:	4611      	mov	r1, r2
 80213c6:	6878      	ldr	r0, [r7, #4]
 80213c8:	4798      	blx	r3
  }

  return USBD_OK;
 80213ca:	2300      	movs	r3, #0
}
 80213cc:	4618      	mov	r0, r3
 80213ce:	3708      	adds	r7, #8
 80213d0:	46bd      	mov	sp, r7
 80213d2:	bd80      	pop	{r7, pc}

080213d4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80213d4:	b480      	push	{r7}
 80213d6:	b087      	sub	sp, #28
 80213d8:	af00      	add	r7, sp, #0
 80213da:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80213dc:	687b      	ldr	r3, [r7, #4]
 80213de:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80213e0:	697b      	ldr	r3, [r7, #20]
 80213e2:	781b      	ldrb	r3, [r3, #0]
 80213e4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80213e6:	697b      	ldr	r3, [r7, #20]
 80213e8:	3301      	adds	r3, #1
 80213ea:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80213ec:	697b      	ldr	r3, [r7, #20]
 80213ee:	781b      	ldrb	r3, [r3, #0]
 80213f0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80213f2:	8a3b      	ldrh	r3, [r7, #16]
 80213f4:	021b      	lsls	r3, r3, #8
 80213f6:	b21a      	sxth	r2, r3
 80213f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80213fc:	4313      	orrs	r3, r2
 80213fe:	b21b      	sxth	r3, r3
 8021400:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8021402:	89fb      	ldrh	r3, [r7, #14]
}
 8021404:	4618      	mov	r0, r3
 8021406:	371c      	adds	r7, #28
 8021408:	46bd      	mov	sp, r7
 802140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802140e:	4770      	bx	lr

08021410 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021410:	b580      	push	{r7, lr}
 8021412:	b084      	sub	sp, #16
 8021414:	af00      	add	r7, sp, #0
 8021416:	6078      	str	r0, [r7, #4]
 8021418:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 802141a:	2300      	movs	r3, #0
 802141c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802141e:	683b      	ldr	r3, [r7, #0]
 8021420:	781b      	ldrb	r3, [r3, #0]
 8021422:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8021426:	2b40      	cmp	r3, #64	; 0x40
 8021428:	d005      	beq.n	8021436 <USBD_StdDevReq+0x26>
 802142a:	2b40      	cmp	r3, #64	; 0x40
 802142c:	d853      	bhi.n	80214d6 <USBD_StdDevReq+0xc6>
 802142e:	2b00      	cmp	r3, #0
 8021430:	d00b      	beq.n	802144a <USBD_StdDevReq+0x3a>
 8021432:	2b20      	cmp	r3, #32
 8021434:	d14f      	bne.n	80214d6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8021436:	687b      	ldr	r3, [r7, #4]
 8021438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802143c:	689b      	ldr	r3, [r3, #8]
 802143e:	6839      	ldr	r1, [r7, #0]
 8021440:	6878      	ldr	r0, [r7, #4]
 8021442:	4798      	blx	r3
 8021444:	4603      	mov	r3, r0
 8021446:	73fb      	strb	r3, [r7, #15]
      break;
 8021448:	e04a      	b.n	80214e0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 802144a:	683b      	ldr	r3, [r7, #0]
 802144c:	785b      	ldrb	r3, [r3, #1]
 802144e:	2b09      	cmp	r3, #9
 8021450:	d83b      	bhi.n	80214ca <USBD_StdDevReq+0xba>
 8021452:	a201      	add	r2, pc, #4	; (adr r2, 8021458 <USBD_StdDevReq+0x48>)
 8021454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021458:	080214ad 	.word	0x080214ad
 802145c:	080214c1 	.word	0x080214c1
 8021460:	080214cb 	.word	0x080214cb
 8021464:	080214b7 	.word	0x080214b7
 8021468:	080214cb 	.word	0x080214cb
 802146c:	0802148b 	.word	0x0802148b
 8021470:	08021481 	.word	0x08021481
 8021474:	080214cb 	.word	0x080214cb
 8021478:	080214a3 	.word	0x080214a3
 802147c:	08021495 	.word	0x08021495
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8021480:	6839      	ldr	r1, [r7, #0]
 8021482:	6878      	ldr	r0, [r7, #4]
 8021484:	f000 f9de 	bl	8021844 <USBD_GetDescriptor>
          break;
 8021488:	e024      	b.n	80214d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 802148a:	6839      	ldr	r1, [r7, #0]
 802148c:	6878      	ldr	r0, [r7, #4]
 802148e:	f000 fb6d 	bl	8021b6c <USBD_SetAddress>
          break;
 8021492:	e01f      	b.n	80214d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8021494:	6839      	ldr	r1, [r7, #0]
 8021496:	6878      	ldr	r0, [r7, #4]
 8021498:	f000 fbac 	bl	8021bf4 <USBD_SetConfig>
 802149c:	4603      	mov	r3, r0
 802149e:	73fb      	strb	r3, [r7, #15]
          break;
 80214a0:	e018      	b.n	80214d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80214a2:	6839      	ldr	r1, [r7, #0]
 80214a4:	6878      	ldr	r0, [r7, #4]
 80214a6:	f000 fc4b 	bl	8021d40 <USBD_GetConfig>
          break;
 80214aa:	e013      	b.n	80214d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80214ac:	6839      	ldr	r1, [r7, #0]
 80214ae:	6878      	ldr	r0, [r7, #4]
 80214b0:	f000 fc7c 	bl	8021dac <USBD_GetStatus>
          break;
 80214b4:	e00e      	b.n	80214d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80214b6:	6839      	ldr	r1, [r7, #0]
 80214b8:	6878      	ldr	r0, [r7, #4]
 80214ba:	f000 fcab 	bl	8021e14 <USBD_SetFeature>
          break;
 80214be:	e009      	b.n	80214d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80214c0:	6839      	ldr	r1, [r7, #0]
 80214c2:	6878      	ldr	r0, [r7, #4]
 80214c4:	f000 fcba 	bl	8021e3c <USBD_ClrFeature>
          break;
 80214c8:	e004      	b.n	80214d4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80214ca:	6839      	ldr	r1, [r7, #0]
 80214cc:	6878      	ldr	r0, [r7, #4]
 80214ce:	f000 fd11 	bl	8021ef4 <USBD_CtlError>
          break;
 80214d2:	bf00      	nop
      }
      break;
 80214d4:	e004      	b.n	80214e0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80214d6:	6839      	ldr	r1, [r7, #0]
 80214d8:	6878      	ldr	r0, [r7, #4]
 80214da:	f000 fd0b 	bl	8021ef4 <USBD_CtlError>
      break;
 80214de:	bf00      	nop
  }

  return ret;
 80214e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80214e2:	4618      	mov	r0, r3
 80214e4:	3710      	adds	r7, #16
 80214e6:	46bd      	mov	sp, r7
 80214e8:	bd80      	pop	{r7, pc}
 80214ea:	bf00      	nop

080214ec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80214ec:	b580      	push	{r7, lr}
 80214ee:	b084      	sub	sp, #16
 80214f0:	af00      	add	r7, sp, #0
 80214f2:	6078      	str	r0, [r7, #4]
 80214f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80214f6:	2300      	movs	r3, #0
 80214f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80214fa:	683b      	ldr	r3, [r7, #0]
 80214fc:	781b      	ldrb	r3, [r3, #0]
 80214fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8021502:	2b40      	cmp	r3, #64	; 0x40
 8021504:	d005      	beq.n	8021512 <USBD_StdItfReq+0x26>
 8021506:	2b40      	cmp	r3, #64	; 0x40
 8021508:	d82f      	bhi.n	802156a <USBD_StdItfReq+0x7e>
 802150a:	2b00      	cmp	r3, #0
 802150c:	d001      	beq.n	8021512 <USBD_StdItfReq+0x26>
 802150e:	2b20      	cmp	r3, #32
 8021510:	d12b      	bne.n	802156a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8021512:	687b      	ldr	r3, [r7, #4]
 8021514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021518:	b2db      	uxtb	r3, r3
 802151a:	3b01      	subs	r3, #1
 802151c:	2b02      	cmp	r3, #2
 802151e:	d81d      	bhi.n	802155c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8021520:	683b      	ldr	r3, [r7, #0]
 8021522:	889b      	ldrh	r3, [r3, #4]
 8021524:	b2db      	uxtb	r3, r3
 8021526:	2b01      	cmp	r3, #1
 8021528:	d813      	bhi.n	8021552 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 802152a:	687b      	ldr	r3, [r7, #4]
 802152c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021530:	689b      	ldr	r3, [r3, #8]
 8021532:	6839      	ldr	r1, [r7, #0]
 8021534:	6878      	ldr	r0, [r7, #4]
 8021536:	4798      	blx	r3
 8021538:	4603      	mov	r3, r0
 802153a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 802153c:	683b      	ldr	r3, [r7, #0]
 802153e:	88db      	ldrh	r3, [r3, #6]
 8021540:	2b00      	cmp	r3, #0
 8021542:	d110      	bne.n	8021566 <USBD_StdItfReq+0x7a>
 8021544:	7bfb      	ldrb	r3, [r7, #15]
 8021546:	2b00      	cmp	r3, #0
 8021548:	d10d      	bne.n	8021566 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 802154a:	6878      	ldr	r0, [r7, #4]
 802154c:	f000 fd80 	bl	8022050 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8021550:	e009      	b.n	8021566 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8021552:	6839      	ldr	r1, [r7, #0]
 8021554:	6878      	ldr	r0, [r7, #4]
 8021556:	f000 fccd 	bl	8021ef4 <USBD_CtlError>
          break;
 802155a:	e004      	b.n	8021566 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 802155c:	6839      	ldr	r1, [r7, #0]
 802155e:	6878      	ldr	r0, [r7, #4]
 8021560:	f000 fcc8 	bl	8021ef4 <USBD_CtlError>
          break;
 8021564:	e000      	b.n	8021568 <USBD_StdItfReq+0x7c>
          break;
 8021566:	bf00      	nop
      }
      break;
 8021568:	e004      	b.n	8021574 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 802156a:	6839      	ldr	r1, [r7, #0]
 802156c:	6878      	ldr	r0, [r7, #4]
 802156e:	f000 fcc1 	bl	8021ef4 <USBD_CtlError>
      break;
 8021572:	bf00      	nop
  }

  return ret;
 8021574:	7bfb      	ldrb	r3, [r7, #15]
}
 8021576:	4618      	mov	r0, r3
 8021578:	3710      	adds	r7, #16
 802157a:	46bd      	mov	sp, r7
 802157c:	bd80      	pop	{r7, pc}

0802157e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802157e:	b580      	push	{r7, lr}
 8021580:	b084      	sub	sp, #16
 8021582:	af00      	add	r7, sp, #0
 8021584:	6078      	str	r0, [r7, #4]
 8021586:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8021588:	2300      	movs	r3, #0
 802158a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 802158c:	683b      	ldr	r3, [r7, #0]
 802158e:	889b      	ldrh	r3, [r3, #4]
 8021590:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8021592:	683b      	ldr	r3, [r7, #0]
 8021594:	781b      	ldrb	r3, [r3, #0]
 8021596:	f003 0360 	and.w	r3, r3, #96	; 0x60
 802159a:	2b40      	cmp	r3, #64	; 0x40
 802159c:	d007      	beq.n	80215ae <USBD_StdEPReq+0x30>
 802159e:	2b40      	cmp	r3, #64	; 0x40
 80215a0:	f200 8145 	bhi.w	802182e <USBD_StdEPReq+0x2b0>
 80215a4:	2b00      	cmp	r3, #0
 80215a6:	d00c      	beq.n	80215c2 <USBD_StdEPReq+0x44>
 80215a8:	2b20      	cmp	r3, #32
 80215aa:	f040 8140 	bne.w	802182e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80215ae:	687b      	ldr	r3, [r7, #4]
 80215b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80215b4:	689b      	ldr	r3, [r3, #8]
 80215b6:	6839      	ldr	r1, [r7, #0]
 80215b8:	6878      	ldr	r0, [r7, #4]
 80215ba:	4798      	blx	r3
 80215bc:	4603      	mov	r3, r0
 80215be:	73fb      	strb	r3, [r7, #15]
      break;
 80215c0:	e13a      	b.n	8021838 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80215c2:	683b      	ldr	r3, [r7, #0]
 80215c4:	785b      	ldrb	r3, [r3, #1]
 80215c6:	2b03      	cmp	r3, #3
 80215c8:	d007      	beq.n	80215da <USBD_StdEPReq+0x5c>
 80215ca:	2b03      	cmp	r3, #3
 80215cc:	f300 8129 	bgt.w	8021822 <USBD_StdEPReq+0x2a4>
 80215d0:	2b00      	cmp	r3, #0
 80215d2:	d07f      	beq.n	80216d4 <USBD_StdEPReq+0x156>
 80215d4:	2b01      	cmp	r3, #1
 80215d6:	d03c      	beq.n	8021652 <USBD_StdEPReq+0xd4>
 80215d8:	e123      	b.n	8021822 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80215da:	687b      	ldr	r3, [r7, #4]
 80215dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80215e0:	b2db      	uxtb	r3, r3
 80215e2:	2b02      	cmp	r3, #2
 80215e4:	d002      	beq.n	80215ec <USBD_StdEPReq+0x6e>
 80215e6:	2b03      	cmp	r3, #3
 80215e8:	d016      	beq.n	8021618 <USBD_StdEPReq+0x9a>
 80215ea:	e02c      	b.n	8021646 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80215ec:	7bbb      	ldrb	r3, [r7, #14]
 80215ee:	2b00      	cmp	r3, #0
 80215f0:	d00d      	beq.n	802160e <USBD_StdEPReq+0x90>
 80215f2:	7bbb      	ldrb	r3, [r7, #14]
 80215f4:	2b80      	cmp	r3, #128	; 0x80
 80215f6:	d00a      	beq.n	802160e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80215f8:	7bbb      	ldrb	r3, [r7, #14]
 80215fa:	4619      	mov	r1, r3
 80215fc:	6878      	ldr	r0, [r7, #4]
 80215fe:	f001 f940 	bl	8022882 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8021602:	2180      	movs	r1, #128	; 0x80
 8021604:	6878      	ldr	r0, [r7, #4]
 8021606:	f001 f93c 	bl	8022882 <USBD_LL_StallEP>
 802160a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 802160c:	e020      	b.n	8021650 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 802160e:	6839      	ldr	r1, [r7, #0]
 8021610:	6878      	ldr	r0, [r7, #4]
 8021612:	f000 fc6f 	bl	8021ef4 <USBD_CtlError>
              break;
 8021616:	e01b      	b.n	8021650 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8021618:	683b      	ldr	r3, [r7, #0]
 802161a:	885b      	ldrh	r3, [r3, #2]
 802161c:	2b00      	cmp	r3, #0
 802161e:	d10e      	bne.n	802163e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8021620:	7bbb      	ldrb	r3, [r7, #14]
 8021622:	2b00      	cmp	r3, #0
 8021624:	d00b      	beq.n	802163e <USBD_StdEPReq+0xc0>
 8021626:	7bbb      	ldrb	r3, [r7, #14]
 8021628:	2b80      	cmp	r3, #128	; 0x80
 802162a:	d008      	beq.n	802163e <USBD_StdEPReq+0xc0>
 802162c:	683b      	ldr	r3, [r7, #0]
 802162e:	88db      	ldrh	r3, [r3, #6]
 8021630:	2b00      	cmp	r3, #0
 8021632:	d104      	bne.n	802163e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8021634:	7bbb      	ldrb	r3, [r7, #14]
 8021636:	4619      	mov	r1, r3
 8021638:	6878      	ldr	r0, [r7, #4]
 802163a:	f001 f922 	bl	8022882 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 802163e:	6878      	ldr	r0, [r7, #4]
 8021640:	f000 fd06 	bl	8022050 <USBD_CtlSendStatus>

              break;
 8021644:	e004      	b.n	8021650 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8021646:	6839      	ldr	r1, [r7, #0]
 8021648:	6878      	ldr	r0, [r7, #4]
 802164a:	f000 fc53 	bl	8021ef4 <USBD_CtlError>
              break;
 802164e:	bf00      	nop
          }
          break;
 8021650:	e0ec      	b.n	802182c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8021652:	687b      	ldr	r3, [r7, #4]
 8021654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021658:	b2db      	uxtb	r3, r3
 802165a:	2b02      	cmp	r3, #2
 802165c:	d002      	beq.n	8021664 <USBD_StdEPReq+0xe6>
 802165e:	2b03      	cmp	r3, #3
 8021660:	d016      	beq.n	8021690 <USBD_StdEPReq+0x112>
 8021662:	e030      	b.n	80216c6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8021664:	7bbb      	ldrb	r3, [r7, #14]
 8021666:	2b00      	cmp	r3, #0
 8021668:	d00d      	beq.n	8021686 <USBD_StdEPReq+0x108>
 802166a:	7bbb      	ldrb	r3, [r7, #14]
 802166c:	2b80      	cmp	r3, #128	; 0x80
 802166e:	d00a      	beq.n	8021686 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8021670:	7bbb      	ldrb	r3, [r7, #14]
 8021672:	4619      	mov	r1, r3
 8021674:	6878      	ldr	r0, [r7, #4]
 8021676:	f001 f904 	bl	8022882 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 802167a:	2180      	movs	r1, #128	; 0x80
 802167c:	6878      	ldr	r0, [r7, #4]
 802167e:	f001 f900 	bl	8022882 <USBD_LL_StallEP>
 8021682:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8021684:	e025      	b.n	80216d2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8021686:	6839      	ldr	r1, [r7, #0]
 8021688:	6878      	ldr	r0, [r7, #4]
 802168a:	f000 fc33 	bl	8021ef4 <USBD_CtlError>
              break;
 802168e:	e020      	b.n	80216d2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8021690:	683b      	ldr	r3, [r7, #0]
 8021692:	885b      	ldrh	r3, [r3, #2]
 8021694:	2b00      	cmp	r3, #0
 8021696:	d11b      	bne.n	80216d0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8021698:	7bbb      	ldrb	r3, [r7, #14]
 802169a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802169e:	2b00      	cmp	r3, #0
 80216a0:	d004      	beq.n	80216ac <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80216a2:	7bbb      	ldrb	r3, [r7, #14]
 80216a4:	4619      	mov	r1, r3
 80216a6:	6878      	ldr	r0, [r7, #4]
 80216a8:	f001 f90a 	bl	80228c0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80216ac:	6878      	ldr	r0, [r7, #4]
 80216ae:	f000 fccf 	bl	8022050 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80216b2:	687b      	ldr	r3, [r7, #4]
 80216b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80216b8:	689b      	ldr	r3, [r3, #8]
 80216ba:	6839      	ldr	r1, [r7, #0]
 80216bc:	6878      	ldr	r0, [r7, #4]
 80216be:	4798      	blx	r3
 80216c0:	4603      	mov	r3, r0
 80216c2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80216c4:	e004      	b.n	80216d0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80216c6:	6839      	ldr	r1, [r7, #0]
 80216c8:	6878      	ldr	r0, [r7, #4]
 80216ca:	f000 fc13 	bl	8021ef4 <USBD_CtlError>
              break;
 80216ce:	e000      	b.n	80216d2 <USBD_StdEPReq+0x154>
              break;
 80216d0:	bf00      	nop
          }
          break;
 80216d2:	e0ab      	b.n	802182c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80216d4:	687b      	ldr	r3, [r7, #4]
 80216d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80216da:	b2db      	uxtb	r3, r3
 80216dc:	2b02      	cmp	r3, #2
 80216de:	d002      	beq.n	80216e6 <USBD_StdEPReq+0x168>
 80216e0:	2b03      	cmp	r3, #3
 80216e2:	d032      	beq.n	802174a <USBD_StdEPReq+0x1cc>
 80216e4:	e097      	b.n	8021816 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80216e6:	7bbb      	ldrb	r3, [r7, #14]
 80216e8:	2b00      	cmp	r3, #0
 80216ea:	d007      	beq.n	80216fc <USBD_StdEPReq+0x17e>
 80216ec:	7bbb      	ldrb	r3, [r7, #14]
 80216ee:	2b80      	cmp	r3, #128	; 0x80
 80216f0:	d004      	beq.n	80216fc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80216f2:	6839      	ldr	r1, [r7, #0]
 80216f4:	6878      	ldr	r0, [r7, #4]
 80216f6:	f000 fbfd 	bl	8021ef4 <USBD_CtlError>
                break;
 80216fa:	e091      	b.n	8021820 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80216fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8021700:	2b00      	cmp	r3, #0
 8021702:	da0b      	bge.n	802171c <USBD_StdEPReq+0x19e>
 8021704:	7bbb      	ldrb	r3, [r7, #14]
 8021706:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 802170a:	4613      	mov	r3, r2
 802170c:	009b      	lsls	r3, r3, #2
 802170e:	4413      	add	r3, r2
 8021710:	009b      	lsls	r3, r3, #2
 8021712:	3310      	adds	r3, #16
 8021714:	687a      	ldr	r2, [r7, #4]
 8021716:	4413      	add	r3, r2
 8021718:	3304      	adds	r3, #4
 802171a:	e00b      	b.n	8021734 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 802171c:	7bbb      	ldrb	r3, [r7, #14]
 802171e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8021722:	4613      	mov	r3, r2
 8021724:	009b      	lsls	r3, r3, #2
 8021726:	4413      	add	r3, r2
 8021728:	009b      	lsls	r3, r3, #2
 802172a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 802172e:	687a      	ldr	r2, [r7, #4]
 8021730:	4413      	add	r3, r2
 8021732:	3304      	adds	r3, #4
 8021734:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8021736:	68bb      	ldr	r3, [r7, #8]
 8021738:	2200      	movs	r2, #0
 802173a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 802173c:	68bb      	ldr	r3, [r7, #8]
 802173e:	2202      	movs	r2, #2
 8021740:	4619      	mov	r1, r3
 8021742:	6878      	ldr	r0, [r7, #4]
 8021744:	f000 fc47 	bl	8021fd6 <USBD_CtlSendData>
              break;
 8021748:	e06a      	b.n	8021820 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 802174a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 802174e:	2b00      	cmp	r3, #0
 8021750:	da11      	bge.n	8021776 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8021752:	7bbb      	ldrb	r3, [r7, #14]
 8021754:	f003 020f 	and.w	r2, r3, #15
 8021758:	6879      	ldr	r1, [r7, #4]
 802175a:	4613      	mov	r3, r2
 802175c:	009b      	lsls	r3, r3, #2
 802175e:	4413      	add	r3, r2
 8021760:	009b      	lsls	r3, r3, #2
 8021762:	440b      	add	r3, r1
 8021764:	3324      	adds	r3, #36	; 0x24
 8021766:	881b      	ldrh	r3, [r3, #0]
 8021768:	2b00      	cmp	r3, #0
 802176a:	d117      	bne.n	802179c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 802176c:	6839      	ldr	r1, [r7, #0]
 802176e:	6878      	ldr	r0, [r7, #4]
 8021770:	f000 fbc0 	bl	8021ef4 <USBD_CtlError>
                  break;
 8021774:	e054      	b.n	8021820 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8021776:	7bbb      	ldrb	r3, [r7, #14]
 8021778:	f003 020f 	and.w	r2, r3, #15
 802177c:	6879      	ldr	r1, [r7, #4]
 802177e:	4613      	mov	r3, r2
 8021780:	009b      	lsls	r3, r3, #2
 8021782:	4413      	add	r3, r2
 8021784:	009b      	lsls	r3, r3, #2
 8021786:	440b      	add	r3, r1
 8021788:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 802178c:	881b      	ldrh	r3, [r3, #0]
 802178e:	2b00      	cmp	r3, #0
 8021790:	d104      	bne.n	802179c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8021792:	6839      	ldr	r1, [r7, #0]
 8021794:	6878      	ldr	r0, [r7, #4]
 8021796:	f000 fbad 	bl	8021ef4 <USBD_CtlError>
                  break;
 802179a:	e041      	b.n	8021820 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802179c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80217a0:	2b00      	cmp	r3, #0
 80217a2:	da0b      	bge.n	80217bc <USBD_StdEPReq+0x23e>
 80217a4:	7bbb      	ldrb	r3, [r7, #14]
 80217a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80217aa:	4613      	mov	r3, r2
 80217ac:	009b      	lsls	r3, r3, #2
 80217ae:	4413      	add	r3, r2
 80217b0:	009b      	lsls	r3, r3, #2
 80217b2:	3310      	adds	r3, #16
 80217b4:	687a      	ldr	r2, [r7, #4]
 80217b6:	4413      	add	r3, r2
 80217b8:	3304      	adds	r3, #4
 80217ba:	e00b      	b.n	80217d4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80217bc:	7bbb      	ldrb	r3, [r7, #14]
 80217be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80217c2:	4613      	mov	r3, r2
 80217c4:	009b      	lsls	r3, r3, #2
 80217c6:	4413      	add	r3, r2
 80217c8:	009b      	lsls	r3, r3, #2
 80217ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80217ce:	687a      	ldr	r2, [r7, #4]
 80217d0:	4413      	add	r3, r2
 80217d2:	3304      	adds	r3, #4
 80217d4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80217d6:	7bbb      	ldrb	r3, [r7, #14]
 80217d8:	2b00      	cmp	r3, #0
 80217da:	d002      	beq.n	80217e2 <USBD_StdEPReq+0x264>
 80217dc:	7bbb      	ldrb	r3, [r7, #14]
 80217de:	2b80      	cmp	r3, #128	; 0x80
 80217e0:	d103      	bne.n	80217ea <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80217e2:	68bb      	ldr	r3, [r7, #8]
 80217e4:	2200      	movs	r2, #0
 80217e6:	601a      	str	r2, [r3, #0]
 80217e8:	e00e      	b.n	8021808 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80217ea:	7bbb      	ldrb	r3, [r7, #14]
 80217ec:	4619      	mov	r1, r3
 80217ee:	6878      	ldr	r0, [r7, #4]
 80217f0:	f001 f885 	bl	80228fe <USBD_LL_IsStallEP>
 80217f4:	4603      	mov	r3, r0
 80217f6:	2b00      	cmp	r3, #0
 80217f8:	d003      	beq.n	8021802 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80217fa:	68bb      	ldr	r3, [r7, #8]
 80217fc:	2201      	movs	r2, #1
 80217fe:	601a      	str	r2, [r3, #0]
 8021800:	e002      	b.n	8021808 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8021802:	68bb      	ldr	r3, [r7, #8]
 8021804:	2200      	movs	r2, #0
 8021806:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8021808:	68bb      	ldr	r3, [r7, #8]
 802180a:	2202      	movs	r2, #2
 802180c:	4619      	mov	r1, r3
 802180e:	6878      	ldr	r0, [r7, #4]
 8021810:	f000 fbe1 	bl	8021fd6 <USBD_CtlSendData>
              break;
 8021814:	e004      	b.n	8021820 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8021816:	6839      	ldr	r1, [r7, #0]
 8021818:	6878      	ldr	r0, [r7, #4]
 802181a:	f000 fb6b 	bl	8021ef4 <USBD_CtlError>
              break;
 802181e:	bf00      	nop
          }
          break;
 8021820:	e004      	b.n	802182c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8021822:	6839      	ldr	r1, [r7, #0]
 8021824:	6878      	ldr	r0, [r7, #4]
 8021826:	f000 fb65 	bl	8021ef4 <USBD_CtlError>
          break;
 802182a:	bf00      	nop
      }
      break;
 802182c:	e004      	b.n	8021838 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 802182e:	6839      	ldr	r1, [r7, #0]
 8021830:	6878      	ldr	r0, [r7, #4]
 8021832:	f000 fb5f 	bl	8021ef4 <USBD_CtlError>
      break;
 8021836:	bf00      	nop
  }

  return ret;
 8021838:	7bfb      	ldrb	r3, [r7, #15]
}
 802183a:	4618      	mov	r0, r3
 802183c:	3710      	adds	r7, #16
 802183e:	46bd      	mov	sp, r7
 8021840:	bd80      	pop	{r7, pc}
	...

08021844 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021844:	b580      	push	{r7, lr}
 8021846:	b084      	sub	sp, #16
 8021848:	af00      	add	r7, sp, #0
 802184a:	6078      	str	r0, [r7, #4]
 802184c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 802184e:	2300      	movs	r3, #0
 8021850:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8021852:	2300      	movs	r3, #0
 8021854:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8021856:	2300      	movs	r3, #0
 8021858:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 802185a:	683b      	ldr	r3, [r7, #0]
 802185c:	885b      	ldrh	r3, [r3, #2]
 802185e:	0a1b      	lsrs	r3, r3, #8
 8021860:	b29b      	uxth	r3, r3
 8021862:	3b01      	subs	r3, #1
 8021864:	2b0e      	cmp	r3, #14
 8021866:	f200 8152 	bhi.w	8021b0e <USBD_GetDescriptor+0x2ca>
 802186a:	a201      	add	r2, pc, #4	; (adr r2, 8021870 <USBD_GetDescriptor+0x2c>)
 802186c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021870:	080218e1 	.word	0x080218e1
 8021874:	080218f9 	.word	0x080218f9
 8021878:	08021939 	.word	0x08021939
 802187c:	08021b0f 	.word	0x08021b0f
 8021880:	08021b0f 	.word	0x08021b0f
 8021884:	08021aaf 	.word	0x08021aaf
 8021888:	08021adb 	.word	0x08021adb
 802188c:	08021b0f 	.word	0x08021b0f
 8021890:	08021b0f 	.word	0x08021b0f
 8021894:	08021b0f 	.word	0x08021b0f
 8021898:	08021b0f 	.word	0x08021b0f
 802189c:	08021b0f 	.word	0x08021b0f
 80218a0:	08021b0f 	.word	0x08021b0f
 80218a4:	08021b0f 	.word	0x08021b0f
 80218a8:	080218ad 	.word	0x080218ad
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80218ac:	687b      	ldr	r3, [r7, #4]
 80218ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80218b2:	69db      	ldr	r3, [r3, #28]
 80218b4:	2b00      	cmp	r3, #0
 80218b6:	d00b      	beq.n	80218d0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80218b8:	687b      	ldr	r3, [r7, #4]
 80218ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80218be:	69db      	ldr	r3, [r3, #28]
 80218c0:	687a      	ldr	r2, [r7, #4]
 80218c2:	7c12      	ldrb	r2, [r2, #16]
 80218c4:	f107 0108 	add.w	r1, r7, #8
 80218c8:	4610      	mov	r0, r2
 80218ca:	4798      	blx	r3
 80218cc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80218ce:	e126      	b.n	8021b1e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80218d0:	6839      	ldr	r1, [r7, #0]
 80218d2:	6878      	ldr	r0, [r7, #4]
 80218d4:	f000 fb0e 	bl	8021ef4 <USBD_CtlError>
        err++;
 80218d8:	7afb      	ldrb	r3, [r7, #11]
 80218da:	3301      	adds	r3, #1
 80218dc:	72fb      	strb	r3, [r7, #11]
      break;
 80218de:	e11e      	b.n	8021b1e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80218e0:	687b      	ldr	r3, [r7, #4]
 80218e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80218e6:	681b      	ldr	r3, [r3, #0]
 80218e8:	687a      	ldr	r2, [r7, #4]
 80218ea:	7c12      	ldrb	r2, [r2, #16]
 80218ec:	f107 0108 	add.w	r1, r7, #8
 80218f0:	4610      	mov	r0, r2
 80218f2:	4798      	blx	r3
 80218f4:	60f8      	str	r0, [r7, #12]
      break;
 80218f6:	e112      	b.n	8021b1e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80218f8:	687b      	ldr	r3, [r7, #4]
 80218fa:	7c1b      	ldrb	r3, [r3, #16]
 80218fc:	2b00      	cmp	r3, #0
 80218fe:	d10d      	bne.n	802191c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8021900:	687b      	ldr	r3, [r7, #4]
 8021902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021908:	f107 0208 	add.w	r2, r7, #8
 802190c:	4610      	mov	r0, r2
 802190e:	4798      	blx	r3
 8021910:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8021912:	68fb      	ldr	r3, [r7, #12]
 8021914:	3301      	adds	r3, #1
 8021916:	2202      	movs	r2, #2
 8021918:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 802191a:	e100      	b.n	8021b1e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 802191c:	687b      	ldr	r3, [r7, #4]
 802191e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021924:	f107 0208 	add.w	r2, r7, #8
 8021928:	4610      	mov	r0, r2
 802192a:	4798      	blx	r3
 802192c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 802192e:	68fb      	ldr	r3, [r7, #12]
 8021930:	3301      	adds	r3, #1
 8021932:	2202      	movs	r2, #2
 8021934:	701a      	strb	r2, [r3, #0]
      break;
 8021936:	e0f2      	b.n	8021b1e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8021938:	683b      	ldr	r3, [r7, #0]
 802193a:	885b      	ldrh	r3, [r3, #2]
 802193c:	b2db      	uxtb	r3, r3
 802193e:	2b05      	cmp	r3, #5
 8021940:	f200 80ac 	bhi.w	8021a9c <USBD_GetDescriptor+0x258>
 8021944:	a201      	add	r2, pc, #4	; (adr r2, 802194c <USBD_GetDescriptor+0x108>)
 8021946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802194a:	bf00      	nop
 802194c:	08021965 	.word	0x08021965
 8021950:	08021999 	.word	0x08021999
 8021954:	080219cd 	.word	0x080219cd
 8021958:	08021a01 	.word	0x08021a01
 802195c:	08021a35 	.word	0x08021a35
 8021960:	08021a69 	.word	0x08021a69
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8021964:	687b      	ldr	r3, [r7, #4]
 8021966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802196a:	685b      	ldr	r3, [r3, #4]
 802196c:	2b00      	cmp	r3, #0
 802196e:	d00b      	beq.n	8021988 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8021970:	687b      	ldr	r3, [r7, #4]
 8021972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021976:	685b      	ldr	r3, [r3, #4]
 8021978:	687a      	ldr	r2, [r7, #4]
 802197a:	7c12      	ldrb	r2, [r2, #16]
 802197c:	f107 0108 	add.w	r1, r7, #8
 8021980:	4610      	mov	r0, r2
 8021982:	4798      	blx	r3
 8021984:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021986:	e091      	b.n	8021aac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021988:	6839      	ldr	r1, [r7, #0]
 802198a:	6878      	ldr	r0, [r7, #4]
 802198c:	f000 fab2 	bl	8021ef4 <USBD_CtlError>
            err++;
 8021990:	7afb      	ldrb	r3, [r7, #11]
 8021992:	3301      	adds	r3, #1
 8021994:	72fb      	strb	r3, [r7, #11]
          break;
 8021996:	e089      	b.n	8021aac <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8021998:	687b      	ldr	r3, [r7, #4]
 802199a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802199e:	689b      	ldr	r3, [r3, #8]
 80219a0:	2b00      	cmp	r3, #0
 80219a2:	d00b      	beq.n	80219bc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80219a4:	687b      	ldr	r3, [r7, #4]
 80219a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80219aa:	689b      	ldr	r3, [r3, #8]
 80219ac:	687a      	ldr	r2, [r7, #4]
 80219ae:	7c12      	ldrb	r2, [r2, #16]
 80219b0:	f107 0108 	add.w	r1, r7, #8
 80219b4:	4610      	mov	r0, r2
 80219b6:	4798      	blx	r3
 80219b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80219ba:	e077      	b.n	8021aac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80219bc:	6839      	ldr	r1, [r7, #0]
 80219be:	6878      	ldr	r0, [r7, #4]
 80219c0:	f000 fa98 	bl	8021ef4 <USBD_CtlError>
            err++;
 80219c4:	7afb      	ldrb	r3, [r7, #11]
 80219c6:	3301      	adds	r3, #1
 80219c8:	72fb      	strb	r3, [r7, #11]
          break;
 80219ca:	e06f      	b.n	8021aac <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80219cc:	687b      	ldr	r3, [r7, #4]
 80219ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80219d2:	68db      	ldr	r3, [r3, #12]
 80219d4:	2b00      	cmp	r3, #0
 80219d6:	d00b      	beq.n	80219f0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80219d8:	687b      	ldr	r3, [r7, #4]
 80219da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80219de:	68db      	ldr	r3, [r3, #12]
 80219e0:	687a      	ldr	r2, [r7, #4]
 80219e2:	7c12      	ldrb	r2, [r2, #16]
 80219e4:	f107 0108 	add.w	r1, r7, #8
 80219e8:	4610      	mov	r0, r2
 80219ea:	4798      	blx	r3
 80219ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80219ee:	e05d      	b.n	8021aac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80219f0:	6839      	ldr	r1, [r7, #0]
 80219f2:	6878      	ldr	r0, [r7, #4]
 80219f4:	f000 fa7e 	bl	8021ef4 <USBD_CtlError>
            err++;
 80219f8:	7afb      	ldrb	r3, [r7, #11]
 80219fa:	3301      	adds	r3, #1
 80219fc:	72fb      	strb	r3, [r7, #11]
          break;
 80219fe:	e055      	b.n	8021aac <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8021a00:	687b      	ldr	r3, [r7, #4]
 8021a02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021a06:	691b      	ldr	r3, [r3, #16]
 8021a08:	2b00      	cmp	r3, #0
 8021a0a:	d00b      	beq.n	8021a24 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8021a0c:	687b      	ldr	r3, [r7, #4]
 8021a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021a12:	691b      	ldr	r3, [r3, #16]
 8021a14:	687a      	ldr	r2, [r7, #4]
 8021a16:	7c12      	ldrb	r2, [r2, #16]
 8021a18:	f107 0108 	add.w	r1, r7, #8
 8021a1c:	4610      	mov	r0, r2
 8021a1e:	4798      	blx	r3
 8021a20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021a22:	e043      	b.n	8021aac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021a24:	6839      	ldr	r1, [r7, #0]
 8021a26:	6878      	ldr	r0, [r7, #4]
 8021a28:	f000 fa64 	bl	8021ef4 <USBD_CtlError>
            err++;
 8021a2c:	7afb      	ldrb	r3, [r7, #11]
 8021a2e:	3301      	adds	r3, #1
 8021a30:	72fb      	strb	r3, [r7, #11]
          break;
 8021a32:	e03b      	b.n	8021aac <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8021a34:	687b      	ldr	r3, [r7, #4]
 8021a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021a3a:	695b      	ldr	r3, [r3, #20]
 8021a3c:	2b00      	cmp	r3, #0
 8021a3e:	d00b      	beq.n	8021a58 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8021a40:	687b      	ldr	r3, [r7, #4]
 8021a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021a46:	695b      	ldr	r3, [r3, #20]
 8021a48:	687a      	ldr	r2, [r7, #4]
 8021a4a:	7c12      	ldrb	r2, [r2, #16]
 8021a4c:	f107 0108 	add.w	r1, r7, #8
 8021a50:	4610      	mov	r0, r2
 8021a52:	4798      	blx	r3
 8021a54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021a56:	e029      	b.n	8021aac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021a58:	6839      	ldr	r1, [r7, #0]
 8021a5a:	6878      	ldr	r0, [r7, #4]
 8021a5c:	f000 fa4a 	bl	8021ef4 <USBD_CtlError>
            err++;
 8021a60:	7afb      	ldrb	r3, [r7, #11]
 8021a62:	3301      	adds	r3, #1
 8021a64:	72fb      	strb	r3, [r7, #11]
          break;
 8021a66:	e021      	b.n	8021aac <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8021a68:	687b      	ldr	r3, [r7, #4]
 8021a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021a6e:	699b      	ldr	r3, [r3, #24]
 8021a70:	2b00      	cmp	r3, #0
 8021a72:	d00b      	beq.n	8021a8c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8021a74:	687b      	ldr	r3, [r7, #4]
 8021a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021a7a:	699b      	ldr	r3, [r3, #24]
 8021a7c:	687a      	ldr	r2, [r7, #4]
 8021a7e:	7c12      	ldrb	r2, [r2, #16]
 8021a80:	f107 0108 	add.w	r1, r7, #8
 8021a84:	4610      	mov	r0, r2
 8021a86:	4798      	blx	r3
 8021a88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021a8a:	e00f      	b.n	8021aac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021a8c:	6839      	ldr	r1, [r7, #0]
 8021a8e:	6878      	ldr	r0, [r7, #4]
 8021a90:	f000 fa30 	bl	8021ef4 <USBD_CtlError>
            err++;
 8021a94:	7afb      	ldrb	r3, [r7, #11]
 8021a96:	3301      	adds	r3, #1
 8021a98:	72fb      	strb	r3, [r7, #11]
          break;
 8021a9a:	e007      	b.n	8021aac <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8021a9c:	6839      	ldr	r1, [r7, #0]
 8021a9e:	6878      	ldr	r0, [r7, #4]
 8021aa0:	f000 fa28 	bl	8021ef4 <USBD_CtlError>
          err++;
 8021aa4:	7afb      	ldrb	r3, [r7, #11]
 8021aa6:	3301      	adds	r3, #1
 8021aa8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8021aaa:	bf00      	nop
      }
      break;
 8021aac:	e037      	b.n	8021b1e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021aae:	687b      	ldr	r3, [r7, #4]
 8021ab0:	7c1b      	ldrb	r3, [r3, #16]
 8021ab2:	2b00      	cmp	r3, #0
 8021ab4:	d109      	bne.n	8021aca <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8021ab6:	687b      	ldr	r3, [r7, #4]
 8021ab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021abe:	f107 0208 	add.w	r2, r7, #8
 8021ac2:	4610      	mov	r0, r2
 8021ac4:	4798      	blx	r3
 8021ac6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8021ac8:	e029      	b.n	8021b1e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8021aca:	6839      	ldr	r1, [r7, #0]
 8021acc:	6878      	ldr	r0, [r7, #4]
 8021ace:	f000 fa11 	bl	8021ef4 <USBD_CtlError>
        err++;
 8021ad2:	7afb      	ldrb	r3, [r7, #11]
 8021ad4:	3301      	adds	r3, #1
 8021ad6:	72fb      	strb	r3, [r7, #11]
      break;
 8021ad8:	e021      	b.n	8021b1e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021ada:	687b      	ldr	r3, [r7, #4]
 8021adc:	7c1b      	ldrb	r3, [r3, #16]
 8021ade:	2b00      	cmp	r3, #0
 8021ae0:	d10d      	bne.n	8021afe <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8021ae2:	687b      	ldr	r3, [r7, #4]
 8021ae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021aea:	f107 0208 	add.w	r2, r7, #8
 8021aee:	4610      	mov	r0, r2
 8021af0:	4798      	blx	r3
 8021af2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8021af4:	68fb      	ldr	r3, [r7, #12]
 8021af6:	3301      	adds	r3, #1
 8021af8:	2207      	movs	r2, #7
 8021afa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8021afc:	e00f      	b.n	8021b1e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8021afe:	6839      	ldr	r1, [r7, #0]
 8021b00:	6878      	ldr	r0, [r7, #4]
 8021b02:	f000 f9f7 	bl	8021ef4 <USBD_CtlError>
        err++;
 8021b06:	7afb      	ldrb	r3, [r7, #11]
 8021b08:	3301      	adds	r3, #1
 8021b0a:	72fb      	strb	r3, [r7, #11]
      break;
 8021b0c:	e007      	b.n	8021b1e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8021b0e:	6839      	ldr	r1, [r7, #0]
 8021b10:	6878      	ldr	r0, [r7, #4]
 8021b12:	f000 f9ef 	bl	8021ef4 <USBD_CtlError>
      err++;
 8021b16:	7afb      	ldrb	r3, [r7, #11]
 8021b18:	3301      	adds	r3, #1
 8021b1a:	72fb      	strb	r3, [r7, #11]
      break;
 8021b1c:	bf00      	nop
  }

  if (err != 0U)
 8021b1e:	7afb      	ldrb	r3, [r7, #11]
 8021b20:	2b00      	cmp	r3, #0
 8021b22:	d11e      	bne.n	8021b62 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8021b24:	683b      	ldr	r3, [r7, #0]
 8021b26:	88db      	ldrh	r3, [r3, #6]
 8021b28:	2b00      	cmp	r3, #0
 8021b2a:	d016      	beq.n	8021b5a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8021b2c:	893b      	ldrh	r3, [r7, #8]
 8021b2e:	2b00      	cmp	r3, #0
 8021b30:	d00e      	beq.n	8021b50 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8021b32:	683b      	ldr	r3, [r7, #0]
 8021b34:	88da      	ldrh	r2, [r3, #6]
 8021b36:	893b      	ldrh	r3, [r7, #8]
 8021b38:	4293      	cmp	r3, r2
 8021b3a:	bf28      	it	cs
 8021b3c:	4613      	movcs	r3, r2
 8021b3e:	b29b      	uxth	r3, r3
 8021b40:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8021b42:	893b      	ldrh	r3, [r7, #8]
 8021b44:	461a      	mov	r2, r3
 8021b46:	68f9      	ldr	r1, [r7, #12]
 8021b48:	6878      	ldr	r0, [r7, #4]
 8021b4a:	f000 fa44 	bl	8021fd6 <USBD_CtlSendData>
 8021b4e:	e009      	b.n	8021b64 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8021b50:	6839      	ldr	r1, [r7, #0]
 8021b52:	6878      	ldr	r0, [r7, #4]
 8021b54:	f000 f9ce 	bl	8021ef4 <USBD_CtlError>
 8021b58:	e004      	b.n	8021b64 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8021b5a:	6878      	ldr	r0, [r7, #4]
 8021b5c:	f000 fa78 	bl	8022050 <USBD_CtlSendStatus>
 8021b60:	e000      	b.n	8021b64 <USBD_GetDescriptor+0x320>
    return;
 8021b62:	bf00      	nop
  }
}
 8021b64:	3710      	adds	r7, #16
 8021b66:	46bd      	mov	sp, r7
 8021b68:	bd80      	pop	{r7, pc}
 8021b6a:	bf00      	nop

08021b6c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021b6c:	b580      	push	{r7, lr}
 8021b6e:	b084      	sub	sp, #16
 8021b70:	af00      	add	r7, sp, #0
 8021b72:	6078      	str	r0, [r7, #4]
 8021b74:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8021b76:	683b      	ldr	r3, [r7, #0]
 8021b78:	889b      	ldrh	r3, [r3, #4]
 8021b7a:	2b00      	cmp	r3, #0
 8021b7c:	d131      	bne.n	8021be2 <USBD_SetAddress+0x76>
 8021b7e:	683b      	ldr	r3, [r7, #0]
 8021b80:	88db      	ldrh	r3, [r3, #6]
 8021b82:	2b00      	cmp	r3, #0
 8021b84:	d12d      	bne.n	8021be2 <USBD_SetAddress+0x76>
 8021b86:	683b      	ldr	r3, [r7, #0]
 8021b88:	885b      	ldrh	r3, [r3, #2]
 8021b8a:	2b7f      	cmp	r3, #127	; 0x7f
 8021b8c:	d829      	bhi.n	8021be2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8021b8e:	683b      	ldr	r3, [r7, #0]
 8021b90:	885b      	ldrh	r3, [r3, #2]
 8021b92:	b2db      	uxtb	r3, r3
 8021b94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8021b98:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021b9a:	687b      	ldr	r3, [r7, #4]
 8021b9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021ba0:	b2db      	uxtb	r3, r3
 8021ba2:	2b03      	cmp	r3, #3
 8021ba4:	d104      	bne.n	8021bb0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8021ba6:	6839      	ldr	r1, [r7, #0]
 8021ba8:	6878      	ldr	r0, [r7, #4]
 8021baa:	f000 f9a3 	bl	8021ef4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021bae:	e01d      	b.n	8021bec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8021bb0:	687b      	ldr	r3, [r7, #4]
 8021bb2:	7bfa      	ldrb	r2, [r7, #15]
 8021bb4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8021bb8:	7bfb      	ldrb	r3, [r7, #15]
 8021bba:	4619      	mov	r1, r3
 8021bbc:	6878      	ldr	r0, [r7, #4]
 8021bbe:	f000 feca 	bl	8022956 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8021bc2:	6878      	ldr	r0, [r7, #4]
 8021bc4:	f000 fa44 	bl	8022050 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8021bc8:	7bfb      	ldrb	r3, [r7, #15]
 8021bca:	2b00      	cmp	r3, #0
 8021bcc:	d004      	beq.n	8021bd8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8021bce:	687b      	ldr	r3, [r7, #4]
 8021bd0:	2202      	movs	r2, #2
 8021bd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021bd6:	e009      	b.n	8021bec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8021bd8:	687b      	ldr	r3, [r7, #4]
 8021bda:	2201      	movs	r2, #1
 8021bdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021be0:	e004      	b.n	8021bec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8021be2:	6839      	ldr	r1, [r7, #0]
 8021be4:	6878      	ldr	r0, [r7, #4]
 8021be6:	f000 f985 	bl	8021ef4 <USBD_CtlError>
  }
}
 8021bea:	bf00      	nop
 8021bec:	bf00      	nop
 8021bee:	3710      	adds	r7, #16
 8021bf0:	46bd      	mov	sp, r7
 8021bf2:	bd80      	pop	{r7, pc}

08021bf4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021bf4:	b580      	push	{r7, lr}
 8021bf6:	b084      	sub	sp, #16
 8021bf8:	af00      	add	r7, sp, #0
 8021bfa:	6078      	str	r0, [r7, #4]
 8021bfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8021bfe:	2300      	movs	r3, #0
 8021c00:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8021c02:	683b      	ldr	r3, [r7, #0]
 8021c04:	885b      	ldrh	r3, [r3, #2]
 8021c06:	b2da      	uxtb	r2, r3
 8021c08:	4b4c      	ldr	r3, [pc, #304]	; (8021d3c <USBD_SetConfig+0x148>)
 8021c0a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8021c0c:	4b4b      	ldr	r3, [pc, #300]	; (8021d3c <USBD_SetConfig+0x148>)
 8021c0e:	781b      	ldrb	r3, [r3, #0]
 8021c10:	2b01      	cmp	r3, #1
 8021c12:	d905      	bls.n	8021c20 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8021c14:	6839      	ldr	r1, [r7, #0]
 8021c16:	6878      	ldr	r0, [r7, #4]
 8021c18:	f000 f96c 	bl	8021ef4 <USBD_CtlError>
    return USBD_FAIL;
 8021c1c:	2303      	movs	r3, #3
 8021c1e:	e088      	b.n	8021d32 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8021c20:	687b      	ldr	r3, [r7, #4]
 8021c22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021c26:	b2db      	uxtb	r3, r3
 8021c28:	2b02      	cmp	r3, #2
 8021c2a:	d002      	beq.n	8021c32 <USBD_SetConfig+0x3e>
 8021c2c:	2b03      	cmp	r3, #3
 8021c2e:	d025      	beq.n	8021c7c <USBD_SetConfig+0x88>
 8021c30:	e071      	b.n	8021d16 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8021c32:	4b42      	ldr	r3, [pc, #264]	; (8021d3c <USBD_SetConfig+0x148>)
 8021c34:	781b      	ldrb	r3, [r3, #0]
 8021c36:	2b00      	cmp	r3, #0
 8021c38:	d01c      	beq.n	8021c74 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8021c3a:	4b40      	ldr	r3, [pc, #256]	; (8021d3c <USBD_SetConfig+0x148>)
 8021c3c:	781b      	ldrb	r3, [r3, #0]
 8021c3e:	461a      	mov	r2, r3
 8021c40:	687b      	ldr	r3, [r7, #4]
 8021c42:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8021c44:	4b3d      	ldr	r3, [pc, #244]	; (8021d3c <USBD_SetConfig+0x148>)
 8021c46:	781b      	ldrb	r3, [r3, #0]
 8021c48:	4619      	mov	r1, r3
 8021c4a:	6878      	ldr	r0, [r7, #4]
 8021c4c:	f7ff f91f 	bl	8020e8e <USBD_SetClassConfig>
 8021c50:	4603      	mov	r3, r0
 8021c52:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8021c54:	7bfb      	ldrb	r3, [r7, #15]
 8021c56:	2b00      	cmp	r3, #0
 8021c58:	d004      	beq.n	8021c64 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8021c5a:	6839      	ldr	r1, [r7, #0]
 8021c5c:	6878      	ldr	r0, [r7, #4]
 8021c5e:	f000 f949 	bl	8021ef4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8021c62:	e065      	b.n	8021d30 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8021c64:	6878      	ldr	r0, [r7, #4]
 8021c66:	f000 f9f3 	bl	8022050 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8021c6a:	687b      	ldr	r3, [r7, #4]
 8021c6c:	2203      	movs	r2, #3
 8021c6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8021c72:	e05d      	b.n	8021d30 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8021c74:	6878      	ldr	r0, [r7, #4]
 8021c76:	f000 f9eb 	bl	8022050 <USBD_CtlSendStatus>
      break;
 8021c7a:	e059      	b.n	8021d30 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8021c7c:	4b2f      	ldr	r3, [pc, #188]	; (8021d3c <USBD_SetConfig+0x148>)
 8021c7e:	781b      	ldrb	r3, [r3, #0]
 8021c80:	2b00      	cmp	r3, #0
 8021c82:	d112      	bne.n	8021caa <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8021c84:	687b      	ldr	r3, [r7, #4]
 8021c86:	2202      	movs	r2, #2
 8021c88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8021c8c:	4b2b      	ldr	r3, [pc, #172]	; (8021d3c <USBD_SetConfig+0x148>)
 8021c8e:	781b      	ldrb	r3, [r3, #0]
 8021c90:	461a      	mov	r2, r3
 8021c92:	687b      	ldr	r3, [r7, #4]
 8021c94:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8021c96:	4b29      	ldr	r3, [pc, #164]	; (8021d3c <USBD_SetConfig+0x148>)
 8021c98:	781b      	ldrb	r3, [r3, #0]
 8021c9a:	4619      	mov	r1, r3
 8021c9c:	6878      	ldr	r0, [r7, #4]
 8021c9e:	f7ff f912 	bl	8020ec6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8021ca2:	6878      	ldr	r0, [r7, #4]
 8021ca4:	f000 f9d4 	bl	8022050 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8021ca8:	e042      	b.n	8021d30 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8021caa:	4b24      	ldr	r3, [pc, #144]	; (8021d3c <USBD_SetConfig+0x148>)
 8021cac:	781b      	ldrb	r3, [r3, #0]
 8021cae:	461a      	mov	r2, r3
 8021cb0:	687b      	ldr	r3, [r7, #4]
 8021cb2:	685b      	ldr	r3, [r3, #4]
 8021cb4:	429a      	cmp	r2, r3
 8021cb6:	d02a      	beq.n	8021d0e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8021cb8:	687b      	ldr	r3, [r7, #4]
 8021cba:	685b      	ldr	r3, [r3, #4]
 8021cbc:	b2db      	uxtb	r3, r3
 8021cbe:	4619      	mov	r1, r3
 8021cc0:	6878      	ldr	r0, [r7, #4]
 8021cc2:	f7ff f900 	bl	8020ec6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8021cc6:	4b1d      	ldr	r3, [pc, #116]	; (8021d3c <USBD_SetConfig+0x148>)
 8021cc8:	781b      	ldrb	r3, [r3, #0]
 8021cca:	461a      	mov	r2, r3
 8021ccc:	687b      	ldr	r3, [r7, #4]
 8021cce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8021cd0:	4b1a      	ldr	r3, [pc, #104]	; (8021d3c <USBD_SetConfig+0x148>)
 8021cd2:	781b      	ldrb	r3, [r3, #0]
 8021cd4:	4619      	mov	r1, r3
 8021cd6:	6878      	ldr	r0, [r7, #4]
 8021cd8:	f7ff f8d9 	bl	8020e8e <USBD_SetClassConfig>
 8021cdc:	4603      	mov	r3, r0
 8021cde:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8021ce0:	7bfb      	ldrb	r3, [r7, #15]
 8021ce2:	2b00      	cmp	r3, #0
 8021ce4:	d00f      	beq.n	8021d06 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8021ce6:	6839      	ldr	r1, [r7, #0]
 8021ce8:	6878      	ldr	r0, [r7, #4]
 8021cea:	f000 f903 	bl	8021ef4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8021cee:	687b      	ldr	r3, [r7, #4]
 8021cf0:	685b      	ldr	r3, [r3, #4]
 8021cf2:	b2db      	uxtb	r3, r3
 8021cf4:	4619      	mov	r1, r3
 8021cf6:	6878      	ldr	r0, [r7, #4]
 8021cf8:	f7ff f8e5 	bl	8020ec6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8021cfc:	687b      	ldr	r3, [r7, #4]
 8021cfe:	2202      	movs	r2, #2
 8021d00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8021d04:	e014      	b.n	8021d30 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8021d06:	6878      	ldr	r0, [r7, #4]
 8021d08:	f000 f9a2 	bl	8022050 <USBD_CtlSendStatus>
      break;
 8021d0c:	e010      	b.n	8021d30 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8021d0e:	6878      	ldr	r0, [r7, #4]
 8021d10:	f000 f99e 	bl	8022050 <USBD_CtlSendStatus>
      break;
 8021d14:	e00c      	b.n	8021d30 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8021d16:	6839      	ldr	r1, [r7, #0]
 8021d18:	6878      	ldr	r0, [r7, #4]
 8021d1a:	f000 f8eb 	bl	8021ef4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8021d1e:	4b07      	ldr	r3, [pc, #28]	; (8021d3c <USBD_SetConfig+0x148>)
 8021d20:	781b      	ldrb	r3, [r3, #0]
 8021d22:	4619      	mov	r1, r3
 8021d24:	6878      	ldr	r0, [r7, #4]
 8021d26:	f7ff f8ce 	bl	8020ec6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8021d2a:	2303      	movs	r3, #3
 8021d2c:	73fb      	strb	r3, [r7, #15]
      break;
 8021d2e:	bf00      	nop
  }

  return ret;
 8021d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8021d32:	4618      	mov	r0, r3
 8021d34:	3710      	adds	r7, #16
 8021d36:	46bd      	mov	sp, r7
 8021d38:	bd80      	pop	{r7, pc}
 8021d3a:	bf00      	nop
 8021d3c:	200007ac 	.word	0x200007ac

08021d40 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021d40:	b580      	push	{r7, lr}
 8021d42:	b082      	sub	sp, #8
 8021d44:	af00      	add	r7, sp, #0
 8021d46:	6078      	str	r0, [r7, #4]
 8021d48:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8021d4a:	683b      	ldr	r3, [r7, #0]
 8021d4c:	88db      	ldrh	r3, [r3, #6]
 8021d4e:	2b01      	cmp	r3, #1
 8021d50:	d004      	beq.n	8021d5c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8021d52:	6839      	ldr	r1, [r7, #0]
 8021d54:	6878      	ldr	r0, [r7, #4]
 8021d56:	f000 f8cd 	bl	8021ef4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8021d5a:	e023      	b.n	8021da4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8021d5c:	687b      	ldr	r3, [r7, #4]
 8021d5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021d62:	b2db      	uxtb	r3, r3
 8021d64:	2b02      	cmp	r3, #2
 8021d66:	dc02      	bgt.n	8021d6e <USBD_GetConfig+0x2e>
 8021d68:	2b00      	cmp	r3, #0
 8021d6a:	dc03      	bgt.n	8021d74 <USBD_GetConfig+0x34>
 8021d6c:	e015      	b.n	8021d9a <USBD_GetConfig+0x5a>
 8021d6e:	2b03      	cmp	r3, #3
 8021d70:	d00b      	beq.n	8021d8a <USBD_GetConfig+0x4a>
 8021d72:	e012      	b.n	8021d9a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8021d74:	687b      	ldr	r3, [r7, #4]
 8021d76:	2200      	movs	r2, #0
 8021d78:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8021d7a:	687b      	ldr	r3, [r7, #4]
 8021d7c:	3308      	adds	r3, #8
 8021d7e:	2201      	movs	r2, #1
 8021d80:	4619      	mov	r1, r3
 8021d82:	6878      	ldr	r0, [r7, #4]
 8021d84:	f000 f927 	bl	8021fd6 <USBD_CtlSendData>
        break;
 8021d88:	e00c      	b.n	8021da4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8021d8a:	687b      	ldr	r3, [r7, #4]
 8021d8c:	3304      	adds	r3, #4
 8021d8e:	2201      	movs	r2, #1
 8021d90:	4619      	mov	r1, r3
 8021d92:	6878      	ldr	r0, [r7, #4]
 8021d94:	f000 f91f 	bl	8021fd6 <USBD_CtlSendData>
        break;
 8021d98:	e004      	b.n	8021da4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8021d9a:	6839      	ldr	r1, [r7, #0]
 8021d9c:	6878      	ldr	r0, [r7, #4]
 8021d9e:	f000 f8a9 	bl	8021ef4 <USBD_CtlError>
        break;
 8021da2:	bf00      	nop
}
 8021da4:	bf00      	nop
 8021da6:	3708      	adds	r7, #8
 8021da8:	46bd      	mov	sp, r7
 8021daa:	bd80      	pop	{r7, pc}

08021dac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021dac:	b580      	push	{r7, lr}
 8021dae:	b082      	sub	sp, #8
 8021db0:	af00      	add	r7, sp, #0
 8021db2:	6078      	str	r0, [r7, #4]
 8021db4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8021db6:	687b      	ldr	r3, [r7, #4]
 8021db8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021dbc:	b2db      	uxtb	r3, r3
 8021dbe:	3b01      	subs	r3, #1
 8021dc0:	2b02      	cmp	r3, #2
 8021dc2:	d81e      	bhi.n	8021e02 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8021dc4:	683b      	ldr	r3, [r7, #0]
 8021dc6:	88db      	ldrh	r3, [r3, #6]
 8021dc8:	2b02      	cmp	r3, #2
 8021dca:	d004      	beq.n	8021dd6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8021dcc:	6839      	ldr	r1, [r7, #0]
 8021dce:	6878      	ldr	r0, [r7, #4]
 8021dd0:	f000 f890 	bl	8021ef4 <USBD_CtlError>
        break;
 8021dd4:	e01a      	b.n	8021e0c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8021dd6:	687b      	ldr	r3, [r7, #4]
 8021dd8:	2201      	movs	r2, #1
 8021dda:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8021ddc:	687b      	ldr	r3, [r7, #4]
 8021dde:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8021de2:	2b00      	cmp	r3, #0
 8021de4:	d005      	beq.n	8021df2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8021de6:	687b      	ldr	r3, [r7, #4]
 8021de8:	68db      	ldr	r3, [r3, #12]
 8021dea:	f043 0202 	orr.w	r2, r3, #2
 8021dee:	687b      	ldr	r3, [r7, #4]
 8021df0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8021df2:	687b      	ldr	r3, [r7, #4]
 8021df4:	330c      	adds	r3, #12
 8021df6:	2202      	movs	r2, #2
 8021df8:	4619      	mov	r1, r3
 8021dfa:	6878      	ldr	r0, [r7, #4]
 8021dfc:	f000 f8eb 	bl	8021fd6 <USBD_CtlSendData>
      break;
 8021e00:	e004      	b.n	8021e0c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8021e02:	6839      	ldr	r1, [r7, #0]
 8021e04:	6878      	ldr	r0, [r7, #4]
 8021e06:	f000 f875 	bl	8021ef4 <USBD_CtlError>
      break;
 8021e0a:	bf00      	nop
  }
}
 8021e0c:	bf00      	nop
 8021e0e:	3708      	adds	r7, #8
 8021e10:	46bd      	mov	sp, r7
 8021e12:	bd80      	pop	{r7, pc}

08021e14 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021e14:	b580      	push	{r7, lr}
 8021e16:	b082      	sub	sp, #8
 8021e18:	af00      	add	r7, sp, #0
 8021e1a:	6078      	str	r0, [r7, #4]
 8021e1c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8021e1e:	683b      	ldr	r3, [r7, #0]
 8021e20:	885b      	ldrh	r3, [r3, #2]
 8021e22:	2b01      	cmp	r3, #1
 8021e24:	d106      	bne.n	8021e34 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8021e26:	687b      	ldr	r3, [r7, #4]
 8021e28:	2201      	movs	r2, #1
 8021e2a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8021e2e:	6878      	ldr	r0, [r7, #4]
 8021e30:	f000 f90e 	bl	8022050 <USBD_CtlSendStatus>
  }
}
 8021e34:	bf00      	nop
 8021e36:	3708      	adds	r7, #8
 8021e38:	46bd      	mov	sp, r7
 8021e3a:	bd80      	pop	{r7, pc}

08021e3c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021e3c:	b580      	push	{r7, lr}
 8021e3e:	b082      	sub	sp, #8
 8021e40:	af00      	add	r7, sp, #0
 8021e42:	6078      	str	r0, [r7, #4]
 8021e44:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8021e46:	687b      	ldr	r3, [r7, #4]
 8021e48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021e4c:	b2db      	uxtb	r3, r3
 8021e4e:	3b01      	subs	r3, #1
 8021e50:	2b02      	cmp	r3, #2
 8021e52:	d80b      	bhi.n	8021e6c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8021e54:	683b      	ldr	r3, [r7, #0]
 8021e56:	885b      	ldrh	r3, [r3, #2]
 8021e58:	2b01      	cmp	r3, #1
 8021e5a:	d10c      	bne.n	8021e76 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8021e5c:	687b      	ldr	r3, [r7, #4]
 8021e5e:	2200      	movs	r2, #0
 8021e60:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8021e64:	6878      	ldr	r0, [r7, #4]
 8021e66:	f000 f8f3 	bl	8022050 <USBD_CtlSendStatus>
      }
      break;
 8021e6a:	e004      	b.n	8021e76 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8021e6c:	6839      	ldr	r1, [r7, #0]
 8021e6e:	6878      	ldr	r0, [r7, #4]
 8021e70:	f000 f840 	bl	8021ef4 <USBD_CtlError>
      break;
 8021e74:	e000      	b.n	8021e78 <USBD_ClrFeature+0x3c>
      break;
 8021e76:	bf00      	nop
  }
}
 8021e78:	bf00      	nop
 8021e7a:	3708      	adds	r7, #8
 8021e7c:	46bd      	mov	sp, r7
 8021e7e:	bd80      	pop	{r7, pc}

08021e80 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8021e80:	b580      	push	{r7, lr}
 8021e82:	b084      	sub	sp, #16
 8021e84:	af00      	add	r7, sp, #0
 8021e86:	6078      	str	r0, [r7, #4]
 8021e88:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8021e8a:	683b      	ldr	r3, [r7, #0]
 8021e8c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8021e8e:	68fb      	ldr	r3, [r7, #12]
 8021e90:	781a      	ldrb	r2, [r3, #0]
 8021e92:	687b      	ldr	r3, [r7, #4]
 8021e94:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8021e96:	68fb      	ldr	r3, [r7, #12]
 8021e98:	3301      	adds	r3, #1
 8021e9a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8021e9c:	68fb      	ldr	r3, [r7, #12]
 8021e9e:	781a      	ldrb	r2, [r3, #0]
 8021ea0:	687b      	ldr	r3, [r7, #4]
 8021ea2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8021ea4:	68fb      	ldr	r3, [r7, #12]
 8021ea6:	3301      	adds	r3, #1
 8021ea8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8021eaa:	68f8      	ldr	r0, [r7, #12]
 8021eac:	f7ff fa92 	bl	80213d4 <SWAPBYTE>
 8021eb0:	4603      	mov	r3, r0
 8021eb2:	461a      	mov	r2, r3
 8021eb4:	687b      	ldr	r3, [r7, #4]
 8021eb6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8021eb8:	68fb      	ldr	r3, [r7, #12]
 8021eba:	3301      	adds	r3, #1
 8021ebc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8021ebe:	68fb      	ldr	r3, [r7, #12]
 8021ec0:	3301      	adds	r3, #1
 8021ec2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8021ec4:	68f8      	ldr	r0, [r7, #12]
 8021ec6:	f7ff fa85 	bl	80213d4 <SWAPBYTE>
 8021eca:	4603      	mov	r3, r0
 8021ecc:	461a      	mov	r2, r3
 8021ece:	687b      	ldr	r3, [r7, #4]
 8021ed0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8021ed2:	68fb      	ldr	r3, [r7, #12]
 8021ed4:	3301      	adds	r3, #1
 8021ed6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8021ed8:	68fb      	ldr	r3, [r7, #12]
 8021eda:	3301      	adds	r3, #1
 8021edc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8021ede:	68f8      	ldr	r0, [r7, #12]
 8021ee0:	f7ff fa78 	bl	80213d4 <SWAPBYTE>
 8021ee4:	4603      	mov	r3, r0
 8021ee6:	461a      	mov	r2, r3
 8021ee8:	687b      	ldr	r3, [r7, #4]
 8021eea:	80da      	strh	r2, [r3, #6]
}
 8021eec:	bf00      	nop
 8021eee:	3710      	adds	r7, #16
 8021ef0:	46bd      	mov	sp, r7
 8021ef2:	bd80      	pop	{r7, pc}

08021ef4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021ef4:	b580      	push	{r7, lr}
 8021ef6:	b082      	sub	sp, #8
 8021ef8:	af00      	add	r7, sp, #0
 8021efa:	6078      	str	r0, [r7, #4]
 8021efc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8021efe:	2180      	movs	r1, #128	; 0x80
 8021f00:	6878      	ldr	r0, [r7, #4]
 8021f02:	f000 fcbe 	bl	8022882 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8021f06:	2100      	movs	r1, #0
 8021f08:	6878      	ldr	r0, [r7, #4]
 8021f0a:	f000 fcba 	bl	8022882 <USBD_LL_StallEP>
}
 8021f0e:	bf00      	nop
 8021f10:	3708      	adds	r7, #8
 8021f12:	46bd      	mov	sp, r7
 8021f14:	bd80      	pop	{r7, pc}

08021f16 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8021f16:	b580      	push	{r7, lr}
 8021f18:	b086      	sub	sp, #24
 8021f1a:	af00      	add	r7, sp, #0
 8021f1c:	60f8      	str	r0, [r7, #12]
 8021f1e:	60b9      	str	r1, [r7, #8]
 8021f20:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8021f22:	2300      	movs	r3, #0
 8021f24:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8021f26:	68fb      	ldr	r3, [r7, #12]
 8021f28:	2b00      	cmp	r3, #0
 8021f2a:	d036      	beq.n	8021f9a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8021f2c:	68fb      	ldr	r3, [r7, #12]
 8021f2e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8021f30:	6938      	ldr	r0, [r7, #16]
 8021f32:	f000 f836 	bl	8021fa2 <USBD_GetLen>
 8021f36:	4603      	mov	r3, r0
 8021f38:	3301      	adds	r3, #1
 8021f3a:	b29b      	uxth	r3, r3
 8021f3c:	005b      	lsls	r3, r3, #1
 8021f3e:	b29a      	uxth	r2, r3
 8021f40:	687b      	ldr	r3, [r7, #4]
 8021f42:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8021f44:	7dfb      	ldrb	r3, [r7, #23]
 8021f46:	68ba      	ldr	r2, [r7, #8]
 8021f48:	4413      	add	r3, r2
 8021f4a:	687a      	ldr	r2, [r7, #4]
 8021f4c:	7812      	ldrb	r2, [r2, #0]
 8021f4e:	701a      	strb	r2, [r3, #0]
  idx++;
 8021f50:	7dfb      	ldrb	r3, [r7, #23]
 8021f52:	3301      	adds	r3, #1
 8021f54:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8021f56:	7dfb      	ldrb	r3, [r7, #23]
 8021f58:	68ba      	ldr	r2, [r7, #8]
 8021f5a:	4413      	add	r3, r2
 8021f5c:	2203      	movs	r2, #3
 8021f5e:	701a      	strb	r2, [r3, #0]
  idx++;
 8021f60:	7dfb      	ldrb	r3, [r7, #23]
 8021f62:	3301      	adds	r3, #1
 8021f64:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8021f66:	e013      	b.n	8021f90 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8021f68:	7dfb      	ldrb	r3, [r7, #23]
 8021f6a:	68ba      	ldr	r2, [r7, #8]
 8021f6c:	4413      	add	r3, r2
 8021f6e:	693a      	ldr	r2, [r7, #16]
 8021f70:	7812      	ldrb	r2, [r2, #0]
 8021f72:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8021f74:	693b      	ldr	r3, [r7, #16]
 8021f76:	3301      	adds	r3, #1
 8021f78:	613b      	str	r3, [r7, #16]
    idx++;
 8021f7a:	7dfb      	ldrb	r3, [r7, #23]
 8021f7c:	3301      	adds	r3, #1
 8021f7e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8021f80:	7dfb      	ldrb	r3, [r7, #23]
 8021f82:	68ba      	ldr	r2, [r7, #8]
 8021f84:	4413      	add	r3, r2
 8021f86:	2200      	movs	r2, #0
 8021f88:	701a      	strb	r2, [r3, #0]
    idx++;
 8021f8a:	7dfb      	ldrb	r3, [r7, #23]
 8021f8c:	3301      	adds	r3, #1
 8021f8e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8021f90:	693b      	ldr	r3, [r7, #16]
 8021f92:	781b      	ldrb	r3, [r3, #0]
 8021f94:	2b00      	cmp	r3, #0
 8021f96:	d1e7      	bne.n	8021f68 <USBD_GetString+0x52>
 8021f98:	e000      	b.n	8021f9c <USBD_GetString+0x86>
    return;
 8021f9a:	bf00      	nop
  }
}
 8021f9c:	3718      	adds	r7, #24
 8021f9e:	46bd      	mov	sp, r7
 8021fa0:	bd80      	pop	{r7, pc}

08021fa2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8021fa2:	b480      	push	{r7}
 8021fa4:	b085      	sub	sp, #20
 8021fa6:	af00      	add	r7, sp, #0
 8021fa8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8021faa:	2300      	movs	r3, #0
 8021fac:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8021fae:	687b      	ldr	r3, [r7, #4]
 8021fb0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8021fb2:	e005      	b.n	8021fc0 <USBD_GetLen+0x1e>
  {
    len++;
 8021fb4:	7bfb      	ldrb	r3, [r7, #15]
 8021fb6:	3301      	adds	r3, #1
 8021fb8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8021fba:	68bb      	ldr	r3, [r7, #8]
 8021fbc:	3301      	adds	r3, #1
 8021fbe:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8021fc0:	68bb      	ldr	r3, [r7, #8]
 8021fc2:	781b      	ldrb	r3, [r3, #0]
 8021fc4:	2b00      	cmp	r3, #0
 8021fc6:	d1f5      	bne.n	8021fb4 <USBD_GetLen+0x12>
  }

  return len;
 8021fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8021fca:	4618      	mov	r0, r3
 8021fcc:	3714      	adds	r7, #20
 8021fce:	46bd      	mov	sp, r7
 8021fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021fd4:	4770      	bx	lr

08021fd6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8021fd6:	b580      	push	{r7, lr}
 8021fd8:	b084      	sub	sp, #16
 8021fda:	af00      	add	r7, sp, #0
 8021fdc:	60f8      	str	r0, [r7, #12]
 8021fde:	60b9      	str	r1, [r7, #8]
 8021fe0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8021fe2:	68fb      	ldr	r3, [r7, #12]
 8021fe4:	2202      	movs	r2, #2
 8021fe6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8021fea:	68fb      	ldr	r3, [r7, #12]
 8021fec:	687a      	ldr	r2, [r7, #4]
 8021fee:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8021ff0:	68fb      	ldr	r3, [r7, #12]
 8021ff2:	687a      	ldr	r2, [r7, #4]
 8021ff4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8021ff6:	687b      	ldr	r3, [r7, #4]
 8021ff8:	68ba      	ldr	r2, [r7, #8]
 8021ffa:	2100      	movs	r1, #0
 8021ffc:	68f8      	ldr	r0, [r7, #12]
 8021ffe:	f000 fcc9 	bl	8022994 <USBD_LL_Transmit>

  return USBD_OK;
 8022002:	2300      	movs	r3, #0
}
 8022004:	4618      	mov	r0, r3
 8022006:	3710      	adds	r7, #16
 8022008:	46bd      	mov	sp, r7
 802200a:	bd80      	pop	{r7, pc}

0802200c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 802200c:	b580      	push	{r7, lr}
 802200e:	b084      	sub	sp, #16
 8022010:	af00      	add	r7, sp, #0
 8022012:	60f8      	str	r0, [r7, #12]
 8022014:	60b9      	str	r1, [r7, #8]
 8022016:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8022018:	687b      	ldr	r3, [r7, #4]
 802201a:	68ba      	ldr	r2, [r7, #8]
 802201c:	2100      	movs	r1, #0
 802201e:	68f8      	ldr	r0, [r7, #12]
 8022020:	f000 fcb8 	bl	8022994 <USBD_LL_Transmit>

  return USBD_OK;
 8022024:	2300      	movs	r3, #0
}
 8022026:	4618      	mov	r0, r3
 8022028:	3710      	adds	r7, #16
 802202a:	46bd      	mov	sp, r7
 802202c:	bd80      	pop	{r7, pc}

0802202e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 802202e:	b580      	push	{r7, lr}
 8022030:	b084      	sub	sp, #16
 8022032:	af00      	add	r7, sp, #0
 8022034:	60f8      	str	r0, [r7, #12]
 8022036:	60b9      	str	r1, [r7, #8]
 8022038:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 802203a:	687b      	ldr	r3, [r7, #4]
 802203c:	68ba      	ldr	r2, [r7, #8]
 802203e:	2100      	movs	r1, #0
 8022040:	68f8      	ldr	r0, [r7, #12]
 8022042:	f000 fcc8 	bl	80229d6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8022046:	2300      	movs	r3, #0
}
 8022048:	4618      	mov	r0, r3
 802204a:	3710      	adds	r7, #16
 802204c:	46bd      	mov	sp, r7
 802204e:	bd80      	pop	{r7, pc}

08022050 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8022050:	b580      	push	{r7, lr}
 8022052:	b082      	sub	sp, #8
 8022054:	af00      	add	r7, sp, #0
 8022056:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8022058:	687b      	ldr	r3, [r7, #4]
 802205a:	2204      	movs	r2, #4
 802205c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8022060:	2300      	movs	r3, #0
 8022062:	2200      	movs	r2, #0
 8022064:	2100      	movs	r1, #0
 8022066:	6878      	ldr	r0, [r7, #4]
 8022068:	f000 fc94 	bl	8022994 <USBD_LL_Transmit>

  return USBD_OK;
 802206c:	2300      	movs	r3, #0
}
 802206e:	4618      	mov	r0, r3
 8022070:	3708      	adds	r7, #8
 8022072:	46bd      	mov	sp, r7
 8022074:	bd80      	pop	{r7, pc}

08022076 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8022076:	b580      	push	{r7, lr}
 8022078:	b082      	sub	sp, #8
 802207a:	af00      	add	r7, sp, #0
 802207c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 802207e:	687b      	ldr	r3, [r7, #4]
 8022080:	2205      	movs	r2, #5
 8022082:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8022086:	2300      	movs	r3, #0
 8022088:	2200      	movs	r2, #0
 802208a:	2100      	movs	r1, #0
 802208c:	6878      	ldr	r0, [r7, #4]
 802208e:	f000 fca2 	bl	80229d6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8022092:	2300      	movs	r3, #0
}
 8022094:	4618      	mov	r0, r3
 8022096:	3708      	adds	r7, #8
 8022098:	46bd      	mov	sp, r7
 802209a:	bd80      	pop	{r7, pc}

0802209c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 802209c:	b580      	push	{r7, lr}
 802209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80220a0:	2200      	movs	r2, #0
 80220a2:	4912      	ldr	r1, [pc, #72]	; (80220ec <MX_USB_DEVICE_Init+0x50>)
 80220a4:	4812      	ldr	r0, [pc, #72]	; (80220f0 <MX_USB_DEVICE_Init+0x54>)
 80220a6:	f7fe fe84 	bl	8020db2 <USBD_Init>
 80220aa:	4603      	mov	r3, r0
 80220ac:	2b00      	cmp	r3, #0
 80220ae:	d001      	beq.n	80220b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80220b0:	f7f5 fd9a 	bl	8017be8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 80220b4:	490f      	ldr	r1, [pc, #60]	; (80220f4 <MX_USB_DEVICE_Init+0x58>)
 80220b6:	480e      	ldr	r0, [pc, #56]	; (80220f0 <MX_USB_DEVICE_Init+0x54>)
 80220b8:	f7fe feab 	bl	8020e12 <USBD_RegisterClass>
 80220bc:	4603      	mov	r3, r0
 80220be:	2b00      	cmp	r3, #0
 80220c0:	d001      	beq.n	80220c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80220c2:	f7f5 fd91 	bl	8017be8 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 80220c6:	490c      	ldr	r1, [pc, #48]	; (80220f8 <MX_USB_DEVICE_Init+0x5c>)
 80220c8:	4809      	ldr	r0, [pc, #36]	; (80220f0 <MX_USB_DEVICE_Init+0x54>)
 80220ca:	f7fd fa5b 	bl	801f584 <USBD_MSC_RegisterStorage>
 80220ce:	4603      	mov	r3, r0
 80220d0:	2b00      	cmp	r3, #0
 80220d2:	d001      	beq.n	80220d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80220d4:	f7f5 fd88 	bl	8017be8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80220d8:	4805      	ldr	r0, [pc, #20]	; (80220f0 <MX_USB_DEVICE_Init+0x54>)
 80220da:	f7fe fec1 	bl	8020e60 <USBD_Start>
 80220de:	4603      	mov	r3, r0
 80220e0:	2b00      	cmp	r3, #0
 80220e2:	d001      	beq.n	80220e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80220e4:	f7f5 fd80 	bl	8017be8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80220e8:	bf00      	nop
 80220ea:	bd80      	pop	{r7, pc}
 80220ec:	2000067c 	.word	0x2000067c
 80220f0:	20006c9c 	.word	0x20006c9c
 80220f4:	20000594 	.word	0x20000594
 80220f8:	200006dc 	.word	0x200006dc

080220fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80220fc:	b480      	push	{r7}
 80220fe:	b083      	sub	sp, #12
 8022100:	af00      	add	r7, sp, #0
 8022102:	4603      	mov	r3, r0
 8022104:	6039      	str	r1, [r7, #0]
 8022106:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8022108:	683b      	ldr	r3, [r7, #0]
 802210a:	2212      	movs	r2, #18
 802210c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 802210e:	4b03      	ldr	r3, [pc, #12]	; (802211c <USBD_FS_DeviceDescriptor+0x20>)
}
 8022110:	4618      	mov	r0, r3
 8022112:	370c      	adds	r7, #12
 8022114:	46bd      	mov	sp, r7
 8022116:	f85d 7b04 	ldr.w	r7, [sp], #4
 802211a:	4770      	bx	lr
 802211c:	2000069c 	.word	0x2000069c

08022120 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022120:	b480      	push	{r7}
 8022122:	b083      	sub	sp, #12
 8022124:	af00      	add	r7, sp, #0
 8022126:	4603      	mov	r3, r0
 8022128:	6039      	str	r1, [r7, #0]
 802212a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 802212c:	683b      	ldr	r3, [r7, #0]
 802212e:	2204      	movs	r2, #4
 8022130:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8022132:	4b03      	ldr	r3, [pc, #12]	; (8022140 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8022134:	4618      	mov	r0, r3
 8022136:	370c      	adds	r7, #12
 8022138:	46bd      	mov	sp, r7
 802213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802213e:	4770      	bx	lr
 8022140:	200006bc 	.word	0x200006bc

08022144 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022144:	b580      	push	{r7, lr}
 8022146:	b082      	sub	sp, #8
 8022148:	af00      	add	r7, sp, #0
 802214a:	4603      	mov	r3, r0
 802214c:	6039      	str	r1, [r7, #0]
 802214e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8022150:	79fb      	ldrb	r3, [r7, #7]
 8022152:	2b00      	cmp	r3, #0
 8022154:	d105      	bne.n	8022162 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8022156:	683a      	ldr	r2, [r7, #0]
 8022158:	4907      	ldr	r1, [pc, #28]	; (8022178 <USBD_FS_ProductStrDescriptor+0x34>)
 802215a:	4808      	ldr	r0, [pc, #32]	; (802217c <USBD_FS_ProductStrDescriptor+0x38>)
 802215c:	f7ff fedb 	bl	8021f16 <USBD_GetString>
 8022160:	e004      	b.n	802216c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8022162:	683a      	ldr	r2, [r7, #0]
 8022164:	4904      	ldr	r1, [pc, #16]	; (8022178 <USBD_FS_ProductStrDescriptor+0x34>)
 8022166:	4805      	ldr	r0, [pc, #20]	; (802217c <USBD_FS_ProductStrDescriptor+0x38>)
 8022168:	f7ff fed5 	bl	8021f16 <USBD_GetString>
  }
  return USBD_StrDesc;
 802216c:	4b02      	ldr	r3, [pc, #8]	; (8022178 <USBD_FS_ProductStrDescriptor+0x34>)
}
 802216e:	4618      	mov	r0, r3
 8022170:	3708      	adds	r7, #8
 8022172:	46bd      	mov	sp, r7
 8022174:	bd80      	pop	{r7, pc}
 8022176:	bf00      	nop
 8022178:	20006f6c 	.word	0x20006f6c
 802217c:	08000a84 	.word	0x08000a84

08022180 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022180:	b580      	push	{r7, lr}
 8022182:	b082      	sub	sp, #8
 8022184:	af00      	add	r7, sp, #0
 8022186:	4603      	mov	r3, r0
 8022188:	6039      	str	r1, [r7, #0]
 802218a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 802218c:	683a      	ldr	r2, [r7, #0]
 802218e:	4904      	ldr	r1, [pc, #16]	; (80221a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8022190:	4804      	ldr	r0, [pc, #16]	; (80221a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8022192:	f7ff fec0 	bl	8021f16 <USBD_GetString>
  return USBD_StrDesc;
 8022196:	4b02      	ldr	r3, [pc, #8]	; (80221a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8022198:	4618      	mov	r0, r3
 802219a:	3708      	adds	r7, #8
 802219c:	46bd      	mov	sp, r7
 802219e:	bd80      	pop	{r7, pc}
 80221a0:	20006f6c 	.word	0x20006f6c
 80221a4:	08000a98 	.word	0x08000a98

080221a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80221a8:	b580      	push	{r7, lr}
 80221aa:	b082      	sub	sp, #8
 80221ac:	af00      	add	r7, sp, #0
 80221ae:	4603      	mov	r3, r0
 80221b0:	6039      	str	r1, [r7, #0]
 80221b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80221b4:	683b      	ldr	r3, [r7, #0]
 80221b6:	221a      	movs	r2, #26
 80221b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80221ba:	f000 f855 	bl	8022268 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80221be:	4b02      	ldr	r3, [pc, #8]	; (80221c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80221c0:	4618      	mov	r0, r3
 80221c2:	3708      	adds	r7, #8
 80221c4:	46bd      	mov	sp, r7
 80221c6:	bd80      	pop	{r7, pc}
 80221c8:	200006c0 	.word	0x200006c0

080221cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80221cc:	b580      	push	{r7, lr}
 80221ce:	b082      	sub	sp, #8
 80221d0:	af00      	add	r7, sp, #0
 80221d2:	4603      	mov	r3, r0
 80221d4:	6039      	str	r1, [r7, #0]
 80221d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80221d8:	79fb      	ldrb	r3, [r7, #7]
 80221da:	2b00      	cmp	r3, #0
 80221dc:	d105      	bne.n	80221ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80221de:	683a      	ldr	r2, [r7, #0]
 80221e0:	4907      	ldr	r1, [pc, #28]	; (8022200 <USBD_FS_ConfigStrDescriptor+0x34>)
 80221e2:	4808      	ldr	r0, [pc, #32]	; (8022204 <USBD_FS_ConfigStrDescriptor+0x38>)
 80221e4:	f7ff fe97 	bl	8021f16 <USBD_GetString>
 80221e8:	e004      	b.n	80221f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80221ea:	683a      	ldr	r2, [r7, #0]
 80221ec:	4904      	ldr	r1, [pc, #16]	; (8022200 <USBD_FS_ConfigStrDescriptor+0x34>)
 80221ee:	4805      	ldr	r0, [pc, #20]	; (8022204 <USBD_FS_ConfigStrDescriptor+0x38>)
 80221f0:	f7ff fe91 	bl	8021f16 <USBD_GetString>
  }
  return USBD_StrDesc;
 80221f4:	4b02      	ldr	r3, [pc, #8]	; (8022200 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80221f6:	4618      	mov	r0, r3
 80221f8:	3708      	adds	r7, #8
 80221fa:	46bd      	mov	sp, r7
 80221fc:	bd80      	pop	{r7, pc}
 80221fe:	bf00      	nop
 8022200:	20006f6c 	.word	0x20006f6c
 8022204:	08000aac 	.word	0x08000aac

08022208 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022208:	b580      	push	{r7, lr}
 802220a:	b082      	sub	sp, #8
 802220c:	af00      	add	r7, sp, #0
 802220e:	4603      	mov	r3, r0
 8022210:	6039      	str	r1, [r7, #0]
 8022212:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8022214:	79fb      	ldrb	r3, [r7, #7]
 8022216:	2b00      	cmp	r3, #0
 8022218:	d105      	bne.n	8022226 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 802221a:	683a      	ldr	r2, [r7, #0]
 802221c:	4907      	ldr	r1, [pc, #28]	; (802223c <USBD_FS_InterfaceStrDescriptor+0x34>)
 802221e:	4808      	ldr	r0, [pc, #32]	; (8022240 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8022220:	f7ff fe79 	bl	8021f16 <USBD_GetString>
 8022224:	e004      	b.n	8022230 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8022226:	683a      	ldr	r2, [r7, #0]
 8022228:	4904      	ldr	r1, [pc, #16]	; (802223c <USBD_FS_InterfaceStrDescriptor+0x34>)
 802222a:	4805      	ldr	r0, [pc, #20]	; (8022240 <USBD_FS_InterfaceStrDescriptor+0x38>)
 802222c:	f7ff fe73 	bl	8021f16 <USBD_GetString>
  }
  return USBD_StrDesc;
 8022230:	4b02      	ldr	r3, [pc, #8]	; (802223c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8022232:	4618      	mov	r0, r3
 8022234:	3708      	adds	r7, #8
 8022236:	46bd      	mov	sp, r7
 8022238:	bd80      	pop	{r7, pc}
 802223a:	bf00      	nop
 802223c:	20006f6c 	.word	0x20006f6c
 8022240:	08000ab8 	.word	0x08000ab8

08022244 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022244:	b480      	push	{r7}
 8022246:	b083      	sub	sp, #12
 8022248:	af00      	add	r7, sp, #0
 802224a:	4603      	mov	r3, r0
 802224c:	6039      	str	r1, [r7, #0]
 802224e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8022250:	683b      	ldr	r3, [r7, #0]
 8022252:	220c      	movs	r2, #12
 8022254:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8022256:	4b03      	ldr	r3, [pc, #12]	; (8022264 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8022258:	4618      	mov	r0, r3
 802225a:	370c      	adds	r7, #12
 802225c:	46bd      	mov	sp, r7
 802225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022262:	4770      	bx	lr
 8022264:	200006b0 	.word	0x200006b0

08022268 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8022268:	b580      	push	{r7, lr}
 802226a:	b084      	sub	sp, #16
 802226c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 802226e:	4b0f      	ldr	r3, [pc, #60]	; (80222ac <Get_SerialNum+0x44>)
 8022270:	681b      	ldr	r3, [r3, #0]
 8022272:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8022274:	4b0e      	ldr	r3, [pc, #56]	; (80222b0 <Get_SerialNum+0x48>)
 8022276:	681b      	ldr	r3, [r3, #0]
 8022278:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 802227a:	4b0e      	ldr	r3, [pc, #56]	; (80222b4 <Get_SerialNum+0x4c>)
 802227c:	681b      	ldr	r3, [r3, #0]
 802227e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8022280:	68fa      	ldr	r2, [r7, #12]
 8022282:	687b      	ldr	r3, [r7, #4]
 8022284:	4413      	add	r3, r2
 8022286:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8022288:	68fb      	ldr	r3, [r7, #12]
 802228a:	2b00      	cmp	r3, #0
 802228c:	d009      	beq.n	80222a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 802228e:	2208      	movs	r2, #8
 8022290:	4909      	ldr	r1, [pc, #36]	; (80222b8 <Get_SerialNum+0x50>)
 8022292:	68f8      	ldr	r0, [r7, #12]
 8022294:	f000 f814 	bl	80222c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8022298:	2204      	movs	r2, #4
 802229a:	4908      	ldr	r1, [pc, #32]	; (80222bc <Get_SerialNum+0x54>)
 802229c:	68b8      	ldr	r0, [r7, #8]
 802229e:	f000 f80f 	bl	80222c0 <IntToUnicode>
  }
}
 80222a2:	bf00      	nop
 80222a4:	3710      	adds	r7, #16
 80222a6:	46bd      	mov	sp, r7
 80222a8:	bd80      	pop	{r7, pc}
 80222aa:	bf00      	nop
 80222ac:	1fff7a10 	.word	0x1fff7a10
 80222b0:	1fff7a14 	.word	0x1fff7a14
 80222b4:	1fff7a18 	.word	0x1fff7a18
 80222b8:	200006c2 	.word	0x200006c2
 80222bc:	200006d2 	.word	0x200006d2

080222c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80222c0:	b480      	push	{r7}
 80222c2:	b087      	sub	sp, #28
 80222c4:	af00      	add	r7, sp, #0
 80222c6:	60f8      	str	r0, [r7, #12]
 80222c8:	60b9      	str	r1, [r7, #8]
 80222ca:	4613      	mov	r3, r2
 80222cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80222ce:	2300      	movs	r3, #0
 80222d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80222d2:	2300      	movs	r3, #0
 80222d4:	75fb      	strb	r3, [r7, #23]
 80222d6:	e027      	b.n	8022328 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80222d8:	68fb      	ldr	r3, [r7, #12]
 80222da:	0f1b      	lsrs	r3, r3, #28
 80222dc:	2b09      	cmp	r3, #9
 80222de:	d80b      	bhi.n	80222f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80222e0:	68fb      	ldr	r3, [r7, #12]
 80222e2:	0f1b      	lsrs	r3, r3, #28
 80222e4:	b2da      	uxtb	r2, r3
 80222e6:	7dfb      	ldrb	r3, [r7, #23]
 80222e8:	005b      	lsls	r3, r3, #1
 80222ea:	4619      	mov	r1, r3
 80222ec:	68bb      	ldr	r3, [r7, #8]
 80222ee:	440b      	add	r3, r1
 80222f0:	3230      	adds	r2, #48	; 0x30
 80222f2:	b2d2      	uxtb	r2, r2
 80222f4:	701a      	strb	r2, [r3, #0]
 80222f6:	e00a      	b.n	802230e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80222f8:	68fb      	ldr	r3, [r7, #12]
 80222fa:	0f1b      	lsrs	r3, r3, #28
 80222fc:	b2da      	uxtb	r2, r3
 80222fe:	7dfb      	ldrb	r3, [r7, #23]
 8022300:	005b      	lsls	r3, r3, #1
 8022302:	4619      	mov	r1, r3
 8022304:	68bb      	ldr	r3, [r7, #8]
 8022306:	440b      	add	r3, r1
 8022308:	3237      	adds	r2, #55	; 0x37
 802230a:	b2d2      	uxtb	r2, r2
 802230c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 802230e:	68fb      	ldr	r3, [r7, #12]
 8022310:	011b      	lsls	r3, r3, #4
 8022312:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8022314:	7dfb      	ldrb	r3, [r7, #23]
 8022316:	005b      	lsls	r3, r3, #1
 8022318:	3301      	adds	r3, #1
 802231a:	68ba      	ldr	r2, [r7, #8]
 802231c:	4413      	add	r3, r2
 802231e:	2200      	movs	r2, #0
 8022320:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8022322:	7dfb      	ldrb	r3, [r7, #23]
 8022324:	3301      	adds	r3, #1
 8022326:	75fb      	strb	r3, [r7, #23]
 8022328:	7dfa      	ldrb	r2, [r7, #23]
 802232a:	79fb      	ldrb	r3, [r7, #7]
 802232c:	429a      	cmp	r2, r3
 802232e:	d3d3      	bcc.n	80222d8 <IntToUnicode+0x18>
  }
}
 8022330:	bf00      	nop
 8022332:	bf00      	nop
 8022334:	371c      	adds	r7, #28
 8022336:	46bd      	mov	sp, r7
 8022338:	f85d 7b04 	ldr.w	r7, [sp], #4
 802233c:	4770      	bx	lr

0802233e <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 802233e:	b480      	push	{r7}
 8022340:	b083      	sub	sp, #12
 8022342:	af00      	add	r7, sp, #0
 8022344:	4603      	mov	r3, r0
 8022346:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8022348:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 802234a:	4618      	mov	r0, r3
 802234c:	370c      	adds	r7, #12
 802234e:	46bd      	mov	sp, r7
 8022350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022354:	4770      	bx	lr

08022356 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8022356:	b480      	push	{r7}
 8022358:	b085      	sub	sp, #20
 802235a:	af00      	add	r7, sp, #0
 802235c:	4603      	mov	r3, r0
 802235e:	60b9      	str	r1, [r7, #8]
 8022360:	607a      	str	r2, [r7, #4]
 8022362:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8022364:	68bb      	ldr	r3, [r7, #8]
 8022366:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 802236a:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 802236c:	687b      	ldr	r3, [r7, #4]
 802236e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8022372:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8022374:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8022376:	4618      	mov	r0, r3
 8022378:	3714      	adds	r7, #20
 802237a:	46bd      	mov	sp, r7
 802237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022380:	4770      	bx	lr

08022382 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8022382:	b480      	push	{r7}
 8022384:	b083      	sub	sp, #12
 8022386:	af00      	add	r7, sp, #0
 8022388:	4603      	mov	r3, r0
 802238a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 802238c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 802238e:	4618      	mov	r0, r3
 8022390:	370c      	adds	r7, #12
 8022392:	46bd      	mov	sp, r7
 8022394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022398:	4770      	bx	lr

0802239a <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 802239a:	b480      	push	{r7}
 802239c:	b083      	sub	sp, #12
 802239e:	af00      	add	r7, sp, #0
 80223a0:	4603      	mov	r3, r0
 80223a2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80223a4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80223a6:	4618      	mov	r0, r3
 80223a8:	370c      	adds	r7, #12
 80223aa:	46bd      	mov	sp, r7
 80223ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223b0:	4770      	bx	lr

080223b2 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80223b2:	b580      	push	{r7, lr}
 80223b4:	b084      	sub	sp, #16
 80223b6:	af00      	add	r7, sp, #0
 80223b8:	60b9      	str	r1, [r7, #8]
 80223ba:	607a      	str	r2, [r7, #4]
 80223bc:	461a      	mov	r2, r3
 80223be:	4603      	mov	r3, r0
 80223c0:	73fb      	strb	r3, [r7, #15]
 80223c2:	4613      	mov	r3, r2
 80223c4:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	ExtFlash_PageRD( (char *)buf, blk_addr*STORAGE_BLK_SIZ, blk_len);
 80223c6:	687b      	ldr	r3, [r7, #4]
 80223c8:	025b      	lsls	r3, r3, #9
 80223ca:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80223ce:	4619      	mov	r1, r3
 80223d0:	68b8      	ldr	r0, [r7, #8]
 80223d2:	f7ec fc7b 	bl	800eccc <ExtFlash_PageRD>
  return (USBD_OK);
 80223d6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80223d8:	4618      	mov	r0, r3
 80223da:	3710      	adds	r7, #16
 80223dc:	46bd      	mov	sp, r7
 80223de:	bd80      	pop	{r7, pc}

080223e0 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80223e0:	b580      	push	{r7, lr}
 80223e2:	b084      	sub	sp, #16
 80223e4:	af00      	add	r7, sp, #0
 80223e6:	60b9      	str	r1, [r7, #8]
 80223e8:	607a      	str	r2, [r7, #4]
 80223ea:	461a      	mov	r2, r3
 80223ec:	4603      	mov	r3, r0
 80223ee:	73fb      	strb	r3, [r7, #15]
 80223f0:	4613      	mov	r3, r2
 80223f2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	ExtFlash_PageWR( (char *)buf, blk_addr*STORAGE_BLK_SIZ);
 80223f4:	687b      	ldr	r3, [r7, #4]
 80223f6:	025b      	lsls	r3, r3, #9
 80223f8:	4619      	mov	r1, r3
 80223fa:	68b8      	ldr	r0, [r7, #8]
 80223fc:	f7ec fd3e 	bl	800ee7c <ExtFlash_PageWR>
	return (USBD_OK);
 8022400:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8022402:	4618      	mov	r0, r3
 8022404:	3710      	adds	r7, #16
 8022406:	46bd      	mov	sp, r7
 8022408:	bd80      	pop	{r7, pc}

0802240a <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 802240a:	b480      	push	{r7}
 802240c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 802240e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8022410:	4618      	mov	r0, r3
 8022412:	46bd      	mov	sp, r7
 8022414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022418:	4770      	bx	lr
	...

0802241c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 802241c:	b580      	push	{r7, lr}
 802241e:	b0a0      	sub	sp, #128	; 0x80
 8022420:	af00      	add	r7, sp, #0
 8022422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8022424:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8022428:	2200      	movs	r2, #0
 802242a:	601a      	str	r2, [r3, #0]
 802242c:	605a      	str	r2, [r3, #4]
 802242e:	609a      	str	r2, [r3, #8]
 8022430:	60da      	str	r2, [r3, #12]
 8022432:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8022434:	f107 0310 	add.w	r3, r7, #16
 8022438:	225c      	movs	r2, #92	; 0x5c
 802243a:	2100      	movs	r1, #0
 802243c:	4618      	mov	r0, r3
 802243e:	f000 fbd9 	bl	8022bf4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8022442:	687b      	ldr	r3, [r7, #4]
 8022444:	681b      	ldr	r3, [r3, #0]
 8022446:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 802244a:	d154      	bne.n	80224f6 <HAL_PCD_MspInit+0xda>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 802244c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8022450:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 25;
 8022452:	2319      	movs	r3, #25
 8022454:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8022456:	23c0      	movs	r3, #192	; 0xc0
 8022458:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 802245a:	2302      	movs	r3, #2
 802245c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 802245e:	2304      	movs	r3, #4
 8022460:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8022462:	2301      	movs	r3, #1
 8022464:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8022466:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 802246a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802246c:	f107 0310 	add.w	r3, r7, #16
 8022470:	4618      	mov	r0, r3
 8022472:	f7f8 fec1 	bl	801b1f8 <HAL_RCCEx_PeriphCLKConfig>
 8022476:	4603      	mov	r3, r0
 8022478:	2b00      	cmp	r3, #0
 802247a:	d001      	beq.n	8022480 <HAL_PCD_MspInit+0x64>
    {
      Error_Handler();
 802247c:	f7f5 fbb4 	bl	8017be8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8022480:	2300      	movs	r3, #0
 8022482:	60fb      	str	r3, [r7, #12]
 8022484:	4b1e      	ldr	r3, [pc, #120]	; (8022500 <HAL_PCD_MspInit+0xe4>)
 8022486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022488:	4a1d      	ldr	r2, [pc, #116]	; (8022500 <HAL_PCD_MspInit+0xe4>)
 802248a:	f043 0301 	orr.w	r3, r3, #1
 802248e:	6313      	str	r3, [r2, #48]	; 0x30
 8022490:	4b1b      	ldr	r3, [pc, #108]	; (8022500 <HAL_PCD_MspInit+0xe4>)
 8022492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022494:	f003 0301 	and.w	r3, r3, #1
 8022498:	60fb      	str	r3, [r7, #12]
 802249a:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = D__Pin|D_A12_Pin;
 802249c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80224a0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80224a2:	2302      	movs	r3, #2
 80224a4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80224a6:	2300      	movs	r3, #0
 80224a8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80224aa:	2303      	movs	r3, #3
 80224ac:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80224ae:	230a      	movs	r3, #10
 80224b0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80224b2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80224b6:	4619      	mov	r1, r3
 80224b8:	4812      	ldr	r0, [pc, #72]	; (8022504 <HAL_PCD_MspInit+0xe8>)
 80224ba:	f7f7 f999 	bl	80197f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80224be:	4b10      	ldr	r3, [pc, #64]	; (8022500 <HAL_PCD_MspInit+0xe4>)
 80224c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80224c2:	4a0f      	ldr	r2, [pc, #60]	; (8022500 <HAL_PCD_MspInit+0xe4>)
 80224c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80224c8:	6353      	str	r3, [r2, #52]	; 0x34
 80224ca:	2300      	movs	r3, #0
 80224cc:	60bb      	str	r3, [r7, #8]
 80224ce:	4b0c      	ldr	r3, [pc, #48]	; (8022500 <HAL_PCD_MspInit+0xe4>)
 80224d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80224d2:	4a0b      	ldr	r2, [pc, #44]	; (8022500 <HAL_PCD_MspInit+0xe4>)
 80224d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80224d8:	6453      	str	r3, [r2, #68]	; 0x44
 80224da:	4b09      	ldr	r3, [pc, #36]	; (8022500 <HAL_PCD_MspInit+0xe4>)
 80224dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80224de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80224e2:	60bb      	str	r3, [r7, #8]
 80224e4:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80224e6:	2200      	movs	r2, #0
 80224e8:	2100      	movs	r1, #0
 80224ea:	2043      	movs	r0, #67	; 0x43
 80224ec:	f7f6 fabf 	bl	8018a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80224f0:	2043      	movs	r0, #67	; 0x43
 80224f2:	f7f6 fad8 	bl	8018aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80224f6:	bf00      	nop
 80224f8:	3780      	adds	r7, #128	; 0x80
 80224fa:	46bd      	mov	sp, r7
 80224fc:	bd80      	pop	{r7, pc}
 80224fe:	bf00      	nop
 8022500:	40023800 	.word	0x40023800
 8022504:	40020000 	.word	0x40020000

08022508 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022508:	b580      	push	{r7, lr}
 802250a:	b082      	sub	sp, #8
 802250c:	af00      	add	r7, sp, #0
 802250e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8022510:	687b      	ldr	r3, [r7, #4]
 8022512:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8022516:	687b      	ldr	r3, [r7, #4]
 8022518:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 802251c:	4619      	mov	r1, r3
 802251e:	4610      	mov	r0, r2
 8022520:	f7fe fce9 	bl	8020ef6 <USBD_LL_SetupStage>
}
 8022524:	bf00      	nop
 8022526:	3708      	adds	r7, #8
 8022528:	46bd      	mov	sp, r7
 802252a:	bd80      	pop	{r7, pc}

0802252c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802252c:	b580      	push	{r7, lr}
 802252e:	b082      	sub	sp, #8
 8022530:	af00      	add	r7, sp, #0
 8022532:	6078      	str	r0, [r7, #4]
 8022534:	460b      	mov	r3, r1
 8022536:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8022538:	687b      	ldr	r3, [r7, #4]
 802253a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 802253e:	78fa      	ldrb	r2, [r7, #3]
 8022540:	6879      	ldr	r1, [r7, #4]
 8022542:	4613      	mov	r3, r2
 8022544:	00db      	lsls	r3, r3, #3
 8022546:	1a9b      	subs	r3, r3, r2
 8022548:	009b      	lsls	r3, r3, #2
 802254a:	440b      	add	r3, r1
 802254c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8022550:	681a      	ldr	r2, [r3, #0]
 8022552:	78fb      	ldrb	r3, [r7, #3]
 8022554:	4619      	mov	r1, r3
 8022556:	f7fe fd23 	bl	8020fa0 <USBD_LL_DataOutStage>
}
 802255a:	bf00      	nop
 802255c:	3708      	adds	r7, #8
 802255e:	46bd      	mov	sp, r7
 8022560:	bd80      	pop	{r7, pc}

08022562 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022562:	b580      	push	{r7, lr}
 8022564:	b082      	sub	sp, #8
 8022566:	af00      	add	r7, sp, #0
 8022568:	6078      	str	r0, [r7, #4]
 802256a:	460b      	mov	r3, r1
 802256c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 802256e:	687b      	ldr	r3, [r7, #4]
 8022570:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8022574:	78fa      	ldrb	r2, [r7, #3]
 8022576:	6879      	ldr	r1, [r7, #4]
 8022578:	4613      	mov	r3, r2
 802257a:	00db      	lsls	r3, r3, #3
 802257c:	1a9b      	subs	r3, r3, r2
 802257e:	009b      	lsls	r3, r3, #2
 8022580:	440b      	add	r3, r1
 8022582:	3348      	adds	r3, #72	; 0x48
 8022584:	681a      	ldr	r2, [r3, #0]
 8022586:	78fb      	ldrb	r3, [r7, #3]
 8022588:	4619      	mov	r1, r3
 802258a:	f7fe fd6c 	bl	8021066 <USBD_LL_DataInStage>
}
 802258e:	bf00      	nop
 8022590:	3708      	adds	r7, #8
 8022592:	46bd      	mov	sp, r7
 8022594:	bd80      	pop	{r7, pc}

08022596 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022596:	b580      	push	{r7, lr}
 8022598:	b082      	sub	sp, #8
 802259a:	af00      	add	r7, sp, #0
 802259c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 802259e:	687b      	ldr	r3, [r7, #4]
 80225a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80225a4:	4618      	mov	r0, r3
 80225a6:	f7fe fe80 	bl	80212aa <USBD_LL_SOF>
}
 80225aa:	bf00      	nop
 80225ac:	3708      	adds	r7, #8
 80225ae:	46bd      	mov	sp, r7
 80225b0:	bd80      	pop	{r7, pc}

080225b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80225b2:	b580      	push	{r7, lr}
 80225b4:	b084      	sub	sp, #16
 80225b6:	af00      	add	r7, sp, #0
 80225b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80225ba:	2301      	movs	r3, #1
 80225bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80225be:	687b      	ldr	r3, [r7, #4]
 80225c0:	68db      	ldr	r3, [r3, #12]
 80225c2:	2b00      	cmp	r3, #0
 80225c4:	d102      	bne.n	80225cc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80225c6:	2300      	movs	r3, #0
 80225c8:	73fb      	strb	r3, [r7, #15]
 80225ca:	e008      	b.n	80225de <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80225cc:	687b      	ldr	r3, [r7, #4]
 80225ce:	68db      	ldr	r3, [r3, #12]
 80225d0:	2b02      	cmp	r3, #2
 80225d2:	d102      	bne.n	80225da <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80225d4:	2301      	movs	r3, #1
 80225d6:	73fb      	strb	r3, [r7, #15]
 80225d8:	e001      	b.n	80225de <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80225da:	f7f5 fb05 	bl	8017be8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80225de:	687b      	ldr	r3, [r7, #4]
 80225e0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80225e4:	7bfa      	ldrb	r2, [r7, #15]
 80225e6:	4611      	mov	r1, r2
 80225e8:	4618      	mov	r0, r3
 80225ea:	f7fe fe20 	bl	802122e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80225ee:	687b      	ldr	r3, [r7, #4]
 80225f0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80225f4:	4618      	mov	r0, r3
 80225f6:	f7fe fdcc 	bl	8021192 <USBD_LL_Reset>
}
 80225fa:	bf00      	nop
 80225fc:	3710      	adds	r7, #16
 80225fe:	46bd      	mov	sp, r7
 8022600:	bd80      	pop	{r7, pc}
	...

08022604 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022604:	b580      	push	{r7, lr}
 8022606:	b082      	sub	sp, #8
 8022608:	af00      	add	r7, sp, #0
 802260a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 802260c:	687b      	ldr	r3, [r7, #4]
 802260e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022612:	4618      	mov	r0, r3
 8022614:	f7fe fe1b 	bl	802124e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8022618:	687b      	ldr	r3, [r7, #4]
 802261a:	681b      	ldr	r3, [r3, #0]
 802261c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8022620:	681b      	ldr	r3, [r3, #0]
 8022622:	687a      	ldr	r2, [r7, #4]
 8022624:	6812      	ldr	r2, [r2, #0]
 8022626:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 802262a:	f043 0301 	orr.w	r3, r3, #1
 802262e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8022630:	687b      	ldr	r3, [r7, #4]
 8022632:	6a1b      	ldr	r3, [r3, #32]
 8022634:	2b00      	cmp	r3, #0
 8022636:	d005      	beq.n	8022644 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8022638:	4b04      	ldr	r3, [pc, #16]	; (802264c <HAL_PCD_SuspendCallback+0x48>)
 802263a:	691b      	ldr	r3, [r3, #16]
 802263c:	4a03      	ldr	r2, [pc, #12]	; (802264c <HAL_PCD_SuspendCallback+0x48>)
 802263e:	f043 0306 	orr.w	r3, r3, #6
 8022642:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8022644:	bf00      	nop
 8022646:	3708      	adds	r7, #8
 8022648:	46bd      	mov	sp, r7
 802264a:	bd80      	pop	{r7, pc}
 802264c:	e000ed00 	.word	0xe000ed00

08022650 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022650:	b580      	push	{r7, lr}
 8022652:	b082      	sub	sp, #8
 8022654:	af00      	add	r7, sp, #0
 8022656:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8022658:	687b      	ldr	r3, [r7, #4]
 802265a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 802265e:	4618      	mov	r0, r3
 8022660:	f7fe fe0b 	bl	802127a <USBD_LL_Resume>
}
 8022664:	bf00      	nop
 8022666:	3708      	adds	r7, #8
 8022668:	46bd      	mov	sp, r7
 802266a:	bd80      	pop	{r7, pc}

0802266c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802266c:	b580      	push	{r7, lr}
 802266e:	b082      	sub	sp, #8
 8022670:	af00      	add	r7, sp, #0
 8022672:	6078      	str	r0, [r7, #4]
 8022674:	460b      	mov	r3, r1
 8022676:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8022678:	687b      	ldr	r3, [r7, #4]
 802267a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 802267e:	78fa      	ldrb	r2, [r7, #3]
 8022680:	4611      	mov	r1, r2
 8022682:	4618      	mov	r0, r3
 8022684:	f7fe fe59 	bl	802133a <USBD_LL_IsoOUTIncomplete>
}
 8022688:	bf00      	nop
 802268a:	3708      	adds	r7, #8
 802268c:	46bd      	mov	sp, r7
 802268e:	bd80      	pop	{r7, pc}

08022690 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022690:	b580      	push	{r7, lr}
 8022692:	b082      	sub	sp, #8
 8022694:	af00      	add	r7, sp, #0
 8022696:	6078      	str	r0, [r7, #4]
 8022698:	460b      	mov	r3, r1
 802269a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 802269c:	687b      	ldr	r3, [r7, #4]
 802269e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80226a2:	78fa      	ldrb	r2, [r7, #3]
 80226a4:	4611      	mov	r1, r2
 80226a6:	4618      	mov	r0, r3
 80226a8:	f7fe fe21 	bl	80212ee <USBD_LL_IsoINIncomplete>
}
 80226ac:	bf00      	nop
 80226ae:	3708      	adds	r7, #8
 80226b0:	46bd      	mov	sp, r7
 80226b2:	bd80      	pop	{r7, pc}

080226b4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80226b4:	b580      	push	{r7, lr}
 80226b6:	b082      	sub	sp, #8
 80226b8:	af00      	add	r7, sp, #0
 80226ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80226bc:	687b      	ldr	r3, [r7, #4]
 80226be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80226c2:	4618      	mov	r0, r3
 80226c4:	f7fe fe5f 	bl	8021386 <USBD_LL_DevConnected>
}
 80226c8:	bf00      	nop
 80226ca:	3708      	adds	r7, #8
 80226cc:	46bd      	mov	sp, r7
 80226ce:	bd80      	pop	{r7, pc}

080226d0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80226d0:	b580      	push	{r7, lr}
 80226d2:	b082      	sub	sp, #8
 80226d4:	af00      	add	r7, sp, #0
 80226d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80226d8:	687b      	ldr	r3, [r7, #4]
 80226da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80226de:	4618      	mov	r0, r3
 80226e0:	f7fe fe5c 	bl	802139c <USBD_LL_DevDisconnected>
}
 80226e4:	bf00      	nop
 80226e6:	3708      	adds	r7, #8
 80226e8:	46bd      	mov	sp, r7
 80226ea:	bd80      	pop	{r7, pc}

080226ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80226ec:	b580      	push	{r7, lr}
 80226ee:	b082      	sub	sp, #8
 80226f0:	af00      	add	r7, sp, #0
 80226f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80226f4:	687b      	ldr	r3, [r7, #4]
 80226f6:	781b      	ldrb	r3, [r3, #0]
 80226f8:	2b00      	cmp	r3, #0
 80226fa:	d13c      	bne.n	8022776 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80226fc:	4a20      	ldr	r2, [pc, #128]	; (8022780 <USBD_LL_Init+0x94>)
 80226fe:	687b      	ldr	r3, [r7, #4]
 8022700:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8022704:	687b      	ldr	r3, [r7, #4]
 8022706:	4a1e      	ldr	r2, [pc, #120]	; (8022780 <USBD_LL_Init+0x94>)
 8022708:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 802270c:	4b1c      	ldr	r3, [pc, #112]	; (8022780 <USBD_LL_Init+0x94>)
 802270e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8022712:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8022714:	4b1a      	ldr	r3, [pc, #104]	; (8022780 <USBD_LL_Init+0x94>)
 8022716:	2206      	movs	r2, #6
 8022718:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 802271a:	4b19      	ldr	r3, [pc, #100]	; (8022780 <USBD_LL_Init+0x94>)
 802271c:	2202      	movs	r2, #2
 802271e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8022720:	4b17      	ldr	r3, [pc, #92]	; (8022780 <USBD_LL_Init+0x94>)
 8022722:	2200      	movs	r2, #0
 8022724:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8022726:	4b16      	ldr	r3, [pc, #88]	; (8022780 <USBD_LL_Init+0x94>)
 8022728:	2202      	movs	r2, #2
 802272a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 802272c:	4b14      	ldr	r3, [pc, #80]	; (8022780 <USBD_LL_Init+0x94>)
 802272e:	2200      	movs	r2, #0
 8022730:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8022732:	4b13      	ldr	r3, [pc, #76]	; (8022780 <USBD_LL_Init+0x94>)
 8022734:	2200      	movs	r2, #0
 8022736:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8022738:	4b11      	ldr	r3, [pc, #68]	; (8022780 <USBD_LL_Init+0x94>)
 802273a:	2200      	movs	r2, #0
 802273c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 802273e:	4b10      	ldr	r3, [pc, #64]	; (8022780 <USBD_LL_Init+0x94>)
 8022740:	2200      	movs	r2, #0
 8022742:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8022744:	4b0e      	ldr	r3, [pc, #56]	; (8022780 <USBD_LL_Init+0x94>)
 8022746:	2200      	movs	r2, #0
 8022748:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 802274a:	480d      	ldr	r0, [pc, #52]	; (8022780 <USBD_LL_Init+0x94>)
 802274c:	f7f7 fa15 	bl	8019b7a <HAL_PCD_Init>
 8022750:	4603      	mov	r3, r0
 8022752:	2b00      	cmp	r3, #0
 8022754:	d001      	beq.n	802275a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8022756:	f7f5 fa47 	bl	8017be8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 802275a:	2180      	movs	r1, #128	; 0x80
 802275c:	4808      	ldr	r0, [pc, #32]	; (8022780 <USBD_LL_Init+0x94>)
 802275e:	f7f8 fbd4 	bl	801af0a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8022762:	2240      	movs	r2, #64	; 0x40
 8022764:	2100      	movs	r1, #0
 8022766:	4806      	ldr	r0, [pc, #24]	; (8022780 <USBD_LL_Init+0x94>)
 8022768:	f7f8 fb88 	bl	801ae7c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 802276c:	2280      	movs	r2, #128	; 0x80
 802276e:	2101      	movs	r1, #1
 8022770:	4803      	ldr	r0, [pc, #12]	; (8022780 <USBD_LL_Init+0x94>)
 8022772:	f7f8 fb83 	bl	801ae7c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8022776:	2300      	movs	r3, #0
}
 8022778:	4618      	mov	r0, r3
 802277a:	3708      	adds	r7, #8
 802277c:	46bd      	mov	sp, r7
 802277e:	bd80      	pop	{r7, pc}
 8022780:	2000716c 	.word	0x2000716c

08022784 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8022784:	b580      	push	{r7, lr}
 8022786:	b084      	sub	sp, #16
 8022788:	af00      	add	r7, sp, #0
 802278a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802278c:	2300      	movs	r3, #0
 802278e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022790:	2300      	movs	r3, #0
 8022792:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8022794:	687b      	ldr	r3, [r7, #4]
 8022796:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 802279a:	4618      	mov	r0, r3
 802279c:	f7f7 fb11 	bl	8019dc2 <HAL_PCD_Start>
 80227a0:	4603      	mov	r3, r0
 80227a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80227a4:	7bfb      	ldrb	r3, [r7, #15]
 80227a6:	4618      	mov	r0, r3
 80227a8:	f000 f9b0 	bl	8022b0c <USBD_Get_USB_Status>
 80227ac:	4603      	mov	r3, r0
 80227ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80227b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80227b2:	4618      	mov	r0, r3
 80227b4:	3710      	adds	r7, #16
 80227b6:	46bd      	mov	sp, r7
 80227b8:	bd80      	pop	{r7, pc}

080227ba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80227ba:	b580      	push	{r7, lr}
 80227bc:	b084      	sub	sp, #16
 80227be:	af00      	add	r7, sp, #0
 80227c0:	6078      	str	r0, [r7, #4]
 80227c2:	4608      	mov	r0, r1
 80227c4:	4611      	mov	r1, r2
 80227c6:	461a      	mov	r2, r3
 80227c8:	4603      	mov	r3, r0
 80227ca:	70fb      	strb	r3, [r7, #3]
 80227cc:	460b      	mov	r3, r1
 80227ce:	70bb      	strb	r3, [r7, #2]
 80227d0:	4613      	mov	r3, r2
 80227d2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80227d4:	2300      	movs	r3, #0
 80227d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80227d8:	2300      	movs	r3, #0
 80227da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80227dc:	687b      	ldr	r3, [r7, #4]
 80227de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80227e2:	78bb      	ldrb	r3, [r7, #2]
 80227e4:	883a      	ldrh	r2, [r7, #0]
 80227e6:	78f9      	ldrb	r1, [r7, #3]
 80227e8:	f7f7 ff22 	bl	801a630 <HAL_PCD_EP_Open>
 80227ec:	4603      	mov	r3, r0
 80227ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80227f0:	7bfb      	ldrb	r3, [r7, #15]
 80227f2:	4618      	mov	r0, r3
 80227f4:	f000 f98a 	bl	8022b0c <USBD_Get_USB_Status>
 80227f8:	4603      	mov	r3, r0
 80227fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80227fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80227fe:	4618      	mov	r0, r3
 8022800:	3710      	adds	r7, #16
 8022802:	46bd      	mov	sp, r7
 8022804:	bd80      	pop	{r7, pc}

08022806 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022806:	b580      	push	{r7, lr}
 8022808:	b084      	sub	sp, #16
 802280a:	af00      	add	r7, sp, #0
 802280c:	6078      	str	r0, [r7, #4]
 802280e:	460b      	mov	r3, r1
 8022810:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022812:	2300      	movs	r3, #0
 8022814:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022816:	2300      	movs	r3, #0
 8022818:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 802281a:	687b      	ldr	r3, [r7, #4]
 802281c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022820:	78fa      	ldrb	r2, [r7, #3]
 8022822:	4611      	mov	r1, r2
 8022824:	4618      	mov	r0, r3
 8022826:	f7f7 ff6b 	bl	801a700 <HAL_PCD_EP_Close>
 802282a:	4603      	mov	r3, r0
 802282c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802282e:	7bfb      	ldrb	r3, [r7, #15]
 8022830:	4618      	mov	r0, r3
 8022832:	f000 f96b 	bl	8022b0c <USBD_Get_USB_Status>
 8022836:	4603      	mov	r3, r0
 8022838:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802283a:	7bbb      	ldrb	r3, [r7, #14]
}
 802283c:	4618      	mov	r0, r3
 802283e:	3710      	adds	r7, #16
 8022840:	46bd      	mov	sp, r7
 8022842:	bd80      	pop	{r7, pc}

08022844 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022844:	b580      	push	{r7, lr}
 8022846:	b084      	sub	sp, #16
 8022848:	af00      	add	r7, sp, #0
 802284a:	6078      	str	r0, [r7, #4]
 802284c:	460b      	mov	r3, r1
 802284e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022850:	2300      	movs	r3, #0
 8022852:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022854:	2300      	movs	r3, #0
 8022856:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8022858:	687b      	ldr	r3, [r7, #4]
 802285a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 802285e:	78fa      	ldrb	r2, [r7, #3]
 8022860:	4611      	mov	r1, r2
 8022862:	4618      	mov	r0, r3
 8022864:	f7f8 f8fd 	bl	801aa62 <HAL_PCD_EP_Flush>
 8022868:	4603      	mov	r3, r0
 802286a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802286c:	7bfb      	ldrb	r3, [r7, #15]
 802286e:	4618      	mov	r0, r3
 8022870:	f000 f94c 	bl	8022b0c <USBD_Get_USB_Status>
 8022874:	4603      	mov	r3, r0
 8022876:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022878:	7bbb      	ldrb	r3, [r7, #14]
}
 802287a:	4618      	mov	r0, r3
 802287c:	3710      	adds	r7, #16
 802287e:	46bd      	mov	sp, r7
 8022880:	bd80      	pop	{r7, pc}

08022882 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022882:	b580      	push	{r7, lr}
 8022884:	b084      	sub	sp, #16
 8022886:	af00      	add	r7, sp, #0
 8022888:	6078      	str	r0, [r7, #4]
 802288a:	460b      	mov	r3, r1
 802288c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802288e:	2300      	movs	r3, #0
 8022890:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022892:	2300      	movs	r3, #0
 8022894:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8022896:	687b      	ldr	r3, [r7, #4]
 8022898:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 802289c:	78fa      	ldrb	r2, [r7, #3]
 802289e:	4611      	mov	r1, r2
 80228a0:	4618      	mov	r0, r3
 80228a2:	f7f8 f824 	bl	801a8ee <HAL_PCD_EP_SetStall>
 80228a6:	4603      	mov	r3, r0
 80228a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80228aa:	7bfb      	ldrb	r3, [r7, #15]
 80228ac:	4618      	mov	r0, r3
 80228ae:	f000 f92d 	bl	8022b0c <USBD_Get_USB_Status>
 80228b2:	4603      	mov	r3, r0
 80228b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80228b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80228b8:	4618      	mov	r0, r3
 80228ba:	3710      	adds	r7, #16
 80228bc:	46bd      	mov	sp, r7
 80228be:	bd80      	pop	{r7, pc}

080228c0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80228c0:	b580      	push	{r7, lr}
 80228c2:	b084      	sub	sp, #16
 80228c4:	af00      	add	r7, sp, #0
 80228c6:	6078      	str	r0, [r7, #4]
 80228c8:	460b      	mov	r3, r1
 80228ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80228cc:	2300      	movs	r3, #0
 80228ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80228d0:	2300      	movs	r3, #0
 80228d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80228d4:	687b      	ldr	r3, [r7, #4]
 80228d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80228da:	78fa      	ldrb	r2, [r7, #3]
 80228dc:	4611      	mov	r1, r2
 80228de:	4618      	mov	r0, r3
 80228e0:	f7f8 f869 	bl	801a9b6 <HAL_PCD_EP_ClrStall>
 80228e4:	4603      	mov	r3, r0
 80228e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80228e8:	7bfb      	ldrb	r3, [r7, #15]
 80228ea:	4618      	mov	r0, r3
 80228ec:	f000 f90e 	bl	8022b0c <USBD_Get_USB_Status>
 80228f0:	4603      	mov	r3, r0
 80228f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80228f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80228f6:	4618      	mov	r0, r3
 80228f8:	3710      	adds	r7, #16
 80228fa:	46bd      	mov	sp, r7
 80228fc:	bd80      	pop	{r7, pc}

080228fe <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80228fe:	b480      	push	{r7}
 8022900:	b085      	sub	sp, #20
 8022902:	af00      	add	r7, sp, #0
 8022904:	6078      	str	r0, [r7, #4]
 8022906:	460b      	mov	r3, r1
 8022908:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 802290a:	687b      	ldr	r3, [r7, #4]
 802290c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022910:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8022912:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8022916:	2b00      	cmp	r3, #0
 8022918:	da0b      	bge.n	8022932 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 802291a:	78fb      	ldrb	r3, [r7, #3]
 802291c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8022920:	68f9      	ldr	r1, [r7, #12]
 8022922:	4613      	mov	r3, r2
 8022924:	00db      	lsls	r3, r3, #3
 8022926:	1a9b      	subs	r3, r3, r2
 8022928:	009b      	lsls	r3, r3, #2
 802292a:	440b      	add	r3, r1
 802292c:	333e      	adds	r3, #62	; 0x3e
 802292e:	781b      	ldrb	r3, [r3, #0]
 8022930:	e00b      	b.n	802294a <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8022932:	78fb      	ldrb	r3, [r7, #3]
 8022934:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8022938:	68f9      	ldr	r1, [r7, #12]
 802293a:	4613      	mov	r3, r2
 802293c:	00db      	lsls	r3, r3, #3
 802293e:	1a9b      	subs	r3, r3, r2
 8022940:	009b      	lsls	r3, r3, #2
 8022942:	440b      	add	r3, r1
 8022944:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8022948:	781b      	ldrb	r3, [r3, #0]
  }
}
 802294a:	4618      	mov	r0, r3
 802294c:	3714      	adds	r7, #20
 802294e:	46bd      	mov	sp, r7
 8022950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022954:	4770      	bx	lr

08022956 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8022956:	b580      	push	{r7, lr}
 8022958:	b084      	sub	sp, #16
 802295a:	af00      	add	r7, sp, #0
 802295c:	6078      	str	r0, [r7, #4]
 802295e:	460b      	mov	r3, r1
 8022960:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022962:	2300      	movs	r3, #0
 8022964:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022966:	2300      	movs	r3, #0
 8022968:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 802296a:	687b      	ldr	r3, [r7, #4]
 802296c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022970:	78fa      	ldrb	r2, [r7, #3]
 8022972:	4611      	mov	r1, r2
 8022974:	4618      	mov	r0, r3
 8022976:	f7f7 fe36 	bl	801a5e6 <HAL_PCD_SetAddress>
 802297a:	4603      	mov	r3, r0
 802297c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802297e:	7bfb      	ldrb	r3, [r7, #15]
 8022980:	4618      	mov	r0, r3
 8022982:	f000 f8c3 	bl	8022b0c <USBD_Get_USB_Status>
 8022986:	4603      	mov	r3, r0
 8022988:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802298a:	7bbb      	ldrb	r3, [r7, #14]
}
 802298c:	4618      	mov	r0, r3
 802298e:	3710      	adds	r7, #16
 8022990:	46bd      	mov	sp, r7
 8022992:	bd80      	pop	{r7, pc}

08022994 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8022994:	b580      	push	{r7, lr}
 8022996:	b086      	sub	sp, #24
 8022998:	af00      	add	r7, sp, #0
 802299a:	60f8      	str	r0, [r7, #12]
 802299c:	607a      	str	r2, [r7, #4]
 802299e:	603b      	str	r3, [r7, #0]
 80229a0:	460b      	mov	r3, r1
 80229a2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80229a4:	2300      	movs	r3, #0
 80229a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80229a8:	2300      	movs	r3, #0
 80229aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80229ac:	68fb      	ldr	r3, [r7, #12]
 80229ae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80229b2:	7af9      	ldrb	r1, [r7, #11]
 80229b4:	683b      	ldr	r3, [r7, #0]
 80229b6:	687a      	ldr	r2, [r7, #4]
 80229b8:	f7f7 ff4f 	bl	801a85a <HAL_PCD_EP_Transmit>
 80229bc:	4603      	mov	r3, r0
 80229be:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80229c0:	7dfb      	ldrb	r3, [r7, #23]
 80229c2:	4618      	mov	r0, r3
 80229c4:	f000 f8a2 	bl	8022b0c <USBD_Get_USB_Status>
 80229c8:	4603      	mov	r3, r0
 80229ca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80229cc:	7dbb      	ldrb	r3, [r7, #22]
}
 80229ce:	4618      	mov	r0, r3
 80229d0:	3718      	adds	r7, #24
 80229d2:	46bd      	mov	sp, r7
 80229d4:	bd80      	pop	{r7, pc}

080229d6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80229d6:	b580      	push	{r7, lr}
 80229d8:	b086      	sub	sp, #24
 80229da:	af00      	add	r7, sp, #0
 80229dc:	60f8      	str	r0, [r7, #12]
 80229de:	607a      	str	r2, [r7, #4]
 80229e0:	603b      	str	r3, [r7, #0]
 80229e2:	460b      	mov	r3, r1
 80229e4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80229e6:	2300      	movs	r3, #0
 80229e8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80229ea:	2300      	movs	r3, #0
 80229ec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80229ee:	68fb      	ldr	r3, [r7, #12]
 80229f0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80229f4:	7af9      	ldrb	r1, [r7, #11]
 80229f6:	683b      	ldr	r3, [r7, #0]
 80229f8:	687a      	ldr	r2, [r7, #4]
 80229fa:	f7f7 fecb 	bl	801a794 <HAL_PCD_EP_Receive>
 80229fe:	4603      	mov	r3, r0
 8022a00:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022a02:	7dfb      	ldrb	r3, [r7, #23]
 8022a04:	4618      	mov	r0, r3
 8022a06:	f000 f881 	bl	8022b0c <USBD_Get_USB_Status>
 8022a0a:	4603      	mov	r3, r0
 8022a0c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8022a0e:	7dbb      	ldrb	r3, [r7, #22]
}
 8022a10:	4618      	mov	r0, r3
 8022a12:	3718      	adds	r7, #24
 8022a14:	46bd      	mov	sp, r7
 8022a16:	bd80      	pop	{r7, pc}

08022a18 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022a18:	b580      	push	{r7, lr}
 8022a1a:	b082      	sub	sp, #8
 8022a1c:	af00      	add	r7, sp, #0
 8022a1e:	6078      	str	r0, [r7, #4]
 8022a20:	460b      	mov	r3, r1
 8022a22:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8022a24:	687b      	ldr	r3, [r7, #4]
 8022a26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022a2a:	78fa      	ldrb	r2, [r7, #3]
 8022a2c:	4611      	mov	r1, r2
 8022a2e:	4618      	mov	r0, r3
 8022a30:	f7f7 fefb 	bl	801a82a <HAL_PCD_EP_GetRxCount>
 8022a34:	4603      	mov	r3, r0
}
 8022a36:	4618      	mov	r0, r3
 8022a38:	3708      	adds	r7, #8
 8022a3a:	46bd      	mov	sp, r7
 8022a3c:	bd80      	pop	{r7, pc}
	...

08022a40 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8022a40:	b580      	push	{r7, lr}
 8022a42:	b082      	sub	sp, #8
 8022a44:	af00      	add	r7, sp, #0
 8022a46:	6078      	str	r0, [r7, #4]
 8022a48:	460b      	mov	r3, r1
 8022a4a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8022a4c:	78fb      	ldrb	r3, [r7, #3]
 8022a4e:	2b00      	cmp	r3, #0
 8022a50:	d002      	beq.n	8022a58 <HAL_PCDEx_LPM_Callback+0x18>
 8022a52:	2b01      	cmp	r3, #1
 8022a54:	d01f      	beq.n	8022a96 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8022a56:	e03b      	b.n	8022ad0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8022a58:	687b      	ldr	r3, [r7, #4]
 8022a5a:	6a1b      	ldr	r3, [r3, #32]
 8022a5c:	2b00      	cmp	r3, #0
 8022a5e:	d007      	beq.n	8022a70 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8022a60:	f7f4 fc54 	bl	801730c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8022a64:	4b1c      	ldr	r3, [pc, #112]	; (8022ad8 <HAL_PCDEx_LPM_Callback+0x98>)
 8022a66:	691b      	ldr	r3, [r3, #16]
 8022a68:	4a1b      	ldr	r2, [pc, #108]	; (8022ad8 <HAL_PCDEx_LPM_Callback+0x98>)
 8022a6a:	f023 0306 	bic.w	r3, r3, #6
 8022a6e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8022a70:	687b      	ldr	r3, [r7, #4]
 8022a72:	681b      	ldr	r3, [r3, #0]
 8022a74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8022a78:	681b      	ldr	r3, [r3, #0]
 8022a7a:	687a      	ldr	r2, [r7, #4]
 8022a7c:	6812      	ldr	r2, [r2, #0]
 8022a7e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8022a82:	f023 0301 	bic.w	r3, r3, #1
 8022a86:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8022a88:	687b      	ldr	r3, [r7, #4]
 8022a8a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022a8e:	4618      	mov	r0, r3
 8022a90:	f7fe fbf3 	bl	802127a <USBD_LL_Resume>
    break;
 8022a94:	e01c      	b.n	8022ad0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8022a96:	687b      	ldr	r3, [r7, #4]
 8022a98:	681b      	ldr	r3, [r3, #0]
 8022a9a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8022a9e:	681b      	ldr	r3, [r3, #0]
 8022aa0:	687a      	ldr	r2, [r7, #4]
 8022aa2:	6812      	ldr	r2, [r2, #0]
 8022aa4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8022aa8:	f043 0301 	orr.w	r3, r3, #1
 8022aac:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8022aae:	687b      	ldr	r3, [r7, #4]
 8022ab0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022ab4:	4618      	mov	r0, r3
 8022ab6:	f7fe fbca 	bl	802124e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8022aba:	687b      	ldr	r3, [r7, #4]
 8022abc:	6a1b      	ldr	r3, [r3, #32]
 8022abe:	2b00      	cmp	r3, #0
 8022ac0:	d005      	beq.n	8022ace <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8022ac2:	4b05      	ldr	r3, [pc, #20]	; (8022ad8 <HAL_PCDEx_LPM_Callback+0x98>)
 8022ac4:	691b      	ldr	r3, [r3, #16]
 8022ac6:	4a04      	ldr	r2, [pc, #16]	; (8022ad8 <HAL_PCDEx_LPM_Callback+0x98>)
 8022ac8:	f043 0306 	orr.w	r3, r3, #6
 8022acc:	6113      	str	r3, [r2, #16]
    break;
 8022ace:	bf00      	nop
}
 8022ad0:	bf00      	nop
 8022ad2:	3708      	adds	r7, #8
 8022ad4:	46bd      	mov	sp, r7
 8022ad6:	bd80      	pop	{r7, pc}
 8022ad8:	e000ed00 	.word	0xe000ed00

08022adc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8022adc:	b480      	push	{r7}
 8022ade:	b083      	sub	sp, #12
 8022ae0:	af00      	add	r7, sp, #0
 8022ae2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8022ae4:	4b03      	ldr	r3, [pc, #12]	; (8022af4 <USBD_static_malloc+0x18>)
}
 8022ae6:	4618      	mov	r0, r3
 8022ae8:	370c      	adds	r7, #12
 8022aea:	46bd      	mov	sp, r7
 8022aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022af0:	4770      	bx	lr
 8022af2:	bf00      	nop
 8022af4:	200007b0 	.word	0x200007b0

08022af8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8022af8:	b480      	push	{r7}
 8022afa:	b083      	sub	sp, #12
 8022afc:	af00      	add	r7, sp, #0
 8022afe:	6078      	str	r0, [r7, #4]

}
 8022b00:	bf00      	nop
 8022b02:	370c      	adds	r7, #12
 8022b04:	46bd      	mov	sp, r7
 8022b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b0a:	4770      	bx	lr

08022b0c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8022b0c:	b480      	push	{r7}
 8022b0e:	b085      	sub	sp, #20
 8022b10:	af00      	add	r7, sp, #0
 8022b12:	4603      	mov	r3, r0
 8022b14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022b16:	2300      	movs	r3, #0
 8022b18:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8022b1a:	79fb      	ldrb	r3, [r7, #7]
 8022b1c:	2b03      	cmp	r3, #3
 8022b1e:	d817      	bhi.n	8022b50 <USBD_Get_USB_Status+0x44>
 8022b20:	a201      	add	r2, pc, #4	; (adr r2, 8022b28 <USBD_Get_USB_Status+0x1c>)
 8022b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022b26:	bf00      	nop
 8022b28:	08022b39 	.word	0x08022b39
 8022b2c:	08022b3f 	.word	0x08022b3f
 8022b30:	08022b45 	.word	0x08022b45
 8022b34:	08022b4b 	.word	0x08022b4b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8022b38:	2300      	movs	r3, #0
 8022b3a:	73fb      	strb	r3, [r7, #15]
    break;
 8022b3c:	e00b      	b.n	8022b56 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8022b3e:	2303      	movs	r3, #3
 8022b40:	73fb      	strb	r3, [r7, #15]
    break;
 8022b42:	e008      	b.n	8022b56 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8022b44:	2301      	movs	r3, #1
 8022b46:	73fb      	strb	r3, [r7, #15]
    break;
 8022b48:	e005      	b.n	8022b56 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8022b4a:	2303      	movs	r3, #3
 8022b4c:	73fb      	strb	r3, [r7, #15]
    break;
 8022b4e:	e002      	b.n	8022b56 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8022b50:	2303      	movs	r3, #3
 8022b52:	73fb      	strb	r3, [r7, #15]
    break;
 8022b54:	bf00      	nop
  }
  return usb_status;
 8022b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8022b58:	4618      	mov	r0, r3
 8022b5a:	3714      	adds	r7, #20
 8022b5c:	46bd      	mov	sp, r7
 8022b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b62:	4770      	bx	lr

08022b64 <__errno>:
 8022b64:	4b01      	ldr	r3, [pc, #4]	; (8022b6c <__errno+0x8>)
 8022b66:	6818      	ldr	r0, [r3, #0]
 8022b68:	4770      	bx	lr
 8022b6a:	bf00      	nop
 8022b6c:	200006fc 	.word	0x200006fc

08022b70 <__libc_init_array>:
 8022b70:	b570      	push	{r4, r5, r6, lr}
 8022b72:	4d0d      	ldr	r5, [pc, #52]	; (8022ba8 <__libc_init_array+0x38>)
 8022b74:	4c0d      	ldr	r4, [pc, #52]	; (8022bac <__libc_init_array+0x3c>)
 8022b76:	1b64      	subs	r4, r4, r5
 8022b78:	10a4      	asrs	r4, r4, #2
 8022b7a:	2600      	movs	r6, #0
 8022b7c:	42a6      	cmp	r6, r4
 8022b7e:	d109      	bne.n	8022b94 <__libc_init_array+0x24>
 8022b80:	4d0b      	ldr	r5, [pc, #44]	; (8022bb0 <__libc_init_array+0x40>)
 8022b82:	4c0c      	ldr	r4, [pc, #48]	; (8022bb4 <__libc_init_array+0x44>)
 8022b84:	f000 f906 	bl	8022d94 <_init>
 8022b88:	1b64      	subs	r4, r4, r5
 8022b8a:	10a4      	asrs	r4, r4, #2
 8022b8c:	2600      	movs	r6, #0
 8022b8e:	42a6      	cmp	r6, r4
 8022b90:	d105      	bne.n	8022b9e <__libc_init_array+0x2e>
 8022b92:	bd70      	pop	{r4, r5, r6, pc}
 8022b94:	f855 3b04 	ldr.w	r3, [r5], #4
 8022b98:	4798      	blx	r3
 8022b9a:	3601      	adds	r6, #1
 8022b9c:	e7ee      	b.n	8022b7c <__libc_init_array+0xc>
 8022b9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8022ba2:	4798      	blx	r3
 8022ba4:	3601      	adds	r6, #1
 8022ba6:	e7f2      	b.n	8022b8e <__libc_init_array+0x1e>
 8022ba8:	08022db4 	.word	0x08022db4
 8022bac:	08022db4 	.word	0x08022db4
 8022bb0:	08022db4 	.word	0x08022db4
 8022bb4:	08022db8 	.word	0x08022db8

08022bb8 <malloc>:
 8022bb8:	4b02      	ldr	r3, [pc, #8]	; (8022bc4 <malloc+0xc>)
 8022bba:	4601      	mov	r1, r0
 8022bbc:	6818      	ldr	r0, [r3, #0]
 8022bbe:	f000 b871 	b.w	8022ca4 <_malloc_r>
 8022bc2:	bf00      	nop
 8022bc4:	200006fc 	.word	0x200006fc

08022bc8 <free>:
 8022bc8:	4b02      	ldr	r3, [pc, #8]	; (8022bd4 <free+0xc>)
 8022bca:	4601      	mov	r1, r0
 8022bcc:	6818      	ldr	r0, [r3, #0]
 8022bce:	f000 b819 	b.w	8022c04 <_free_r>
 8022bd2:	bf00      	nop
 8022bd4:	200006fc 	.word	0x200006fc

08022bd8 <memcpy>:
 8022bd8:	440a      	add	r2, r1
 8022bda:	4291      	cmp	r1, r2
 8022bdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8022be0:	d100      	bne.n	8022be4 <memcpy+0xc>
 8022be2:	4770      	bx	lr
 8022be4:	b510      	push	{r4, lr}
 8022be6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022bea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8022bee:	4291      	cmp	r1, r2
 8022bf0:	d1f9      	bne.n	8022be6 <memcpy+0xe>
 8022bf2:	bd10      	pop	{r4, pc}

08022bf4 <memset>:
 8022bf4:	4402      	add	r2, r0
 8022bf6:	4603      	mov	r3, r0
 8022bf8:	4293      	cmp	r3, r2
 8022bfa:	d100      	bne.n	8022bfe <memset+0xa>
 8022bfc:	4770      	bx	lr
 8022bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8022c02:	e7f9      	b.n	8022bf8 <memset+0x4>

08022c04 <_free_r>:
 8022c04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022c06:	2900      	cmp	r1, #0
 8022c08:	d048      	beq.n	8022c9c <_free_r+0x98>
 8022c0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022c0e:	9001      	str	r0, [sp, #4]
 8022c10:	2b00      	cmp	r3, #0
 8022c12:	f1a1 0404 	sub.w	r4, r1, #4
 8022c16:	bfb8      	it	lt
 8022c18:	18e4      	addlt	r4, r4, r3
 8022c1a:	f000 f8ad 	bl	8022d78 <__malloc_lock>
 8022c1e:	4a20      	ldr	r2, [pc, #128]	; (8022ca0 <_free_r+0x9c>)
 8022c20:	9801      	ldr	r0, [sp, #4]
 8022c22:	6813      	ldr	r3, [r2, #0]
 8022c24:	4615      	mov	r5, r2
 8022c26:	b933      	cbnz	r3, 8022c36 <_free_r+0x32>
 8022c28:	6063      	str	r3, [r4, #4]
 8022c2a:	6014      	str	r4, [r2, #0]
 8022c2c:	b003      	add	sp, #12
 8022c2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022c32:	f000 b8a7 	b.w	8022d84 <__malloc_unlock>
 8022c36:	42a3      	cmp	r3, r4
 8022c38:	d90b      	bls.n	8022c52 <_free_r+0x4e>
 8022c3a:	6821      	ldr	r1, [r4, #0]
 8022c3c:	1862      	adds	r2, r4, r1
 8022c3e:	4293      	cmp	r3, r2
 8022c40:	bf04      	itt	eq
 8022c42:	681a      	ldreq	r2, [r3, #0]
 8022c44:	685b      	ldreq	r3, [r3, #4]
 8022c46:	6063      	str	r3, [r4, #4]
 8022c48:	bf04      	itt	eq
 8022c4a:	1852      	addeq	r2, r2, r1
 8022c4c:	6022      	streq	r2, [r4, #0]
 8022c4e:	602c      	str	r4, [r5, #0]
 8022c50:	e7ec      	b.n	8022c2c <_free_r+0x28>
 8022c52:	461a      	mov	r2, r3
 8022c54:	685b      	ldr	r3, [r3, #4]
 8022c56:	b10b      	cbz	r3, 8022c5c <_free_r+0x58>
 8022c58:	42a3      	cmp	r3, r4
 8022c5a:	d9fa      	bls.n	8022c52 <_free_r+0x4e>
 8022c5c:	6811      	ldr	r1, [r2, #0]
 8022c5e:	1855      	adds	r5, r2, r1
 8022c60:	42a5      	cmp	r5, r4
 8022c62:	d10b      	bne.n	8022c7c <_free_r+0x78>
 8022c64:	6824      	ldr	r4, [r4, #0]
 8022c66:	4421      	add	r1, r4
 8022c68:	1854      	adds	r4, r2, r1
 8022c6a:	42a3      	cmp	r3, r4
 8022c6c:	6011      	str	r1, [r2, #0]
 8022c6e:	d1dd      	bne.n	8022c2c <_free_r+0x28>
 8022c70:	681c      	ldr	r4, [r3, #0]
 8022c72:	685b      	ldr	r3, [r3, #4]
 8022c74:	6053      	str	r3, [r2, #4]
 8022c76:	4421      	add	r1, r4
 8022c78:	6011      	str	r1, [r2, #0]
 8022c7a:	e7d7      	b.n	8022c2c <_free_r+0x28>
 8022c7c:	d902      	bls.n	8022c84 <_free_r+0x80>
 8022c7e:	230c      	movs	r3, #12
 8022c80:	6003      	str	r3, [r0, #0]
 8022c82:	e7d3      	b.n	8022c2c <_free_r+0x28>
 8022c84:	6825      	ldr	r5, [r4, #0]
 8022c86:	1961      	adds	r1, r4, r5
 8022c88:	428b      	cmp	r3, r1
 8022c8a:	bf04      	itt	eq
 8022c8c:	6819      	ldreq	r1, [r3, #0]
 8022c8e:	685b      	ldreq	r3, [r3, #4]
 8022c90:	6063      	str	r3, [r4, #4]
 8022c92:	bf04      	itt	eq
 8022c94:	1949      	addeq	r1, r1, r5
 8022c96:	6021      	streq	r1, [r4, #0]
 8022c98:	6054      	str	r4, [r2, #4]
 8022c9a:	e7c7      	b.n	8022c2c <_free_r+0x28>
 8022c9c:	b003      	add	sp, #12
 8022c9e:	bd30      	pop	{r4, r5, pc}
 8022ca0:	20000a28 	.word	0x20000a28

08022ca4 <_malloc_r>:
 8022ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022ca6:	1ccd      	adds	r5, r1, #3
 8022ca8:	f025 0503 	bic.w	r5, r5, #3
 8022cac:	3508      	adds	r5, #8
 8022cae:	2d0c      	cmp	r5, #12
 8022cb0:	bf38      	it	cc
 8022cb2:	250c      	movcc	r5, #12
 8022cb4:	2d00      	cmp	r5, #0
 8022cb6:	4606      	mov	r6, r0
 8022cb8:	db01      	blt.n	8022cbe <_malloc_r+0x1a>
 8022cba:	42a9      	cmp	r1, r5
 8022cbc:	d903      	bls.n	8022cc6 <_malloc_r+0x22>
 8022cbe:	230c      	movs	r3, #12
 8022cc0:	6033      	str	r3, [r6, #0]
 8022cc2:	2000      	movs	r0, #0
 8022cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022cc6:	f000 f857 	bl	8022d78 <__malloc_lock>
 8022cca:	4921      	ldr	r1, [pc, #132]	; (8022d50 <_malloc_r+0xac>)
 8022ccc:	680a      	ldr	r2, [r1, #0]
 8022cce:	4614      	mov	r4, r2
 8022cd0:	b99c      	cbnz	r4, 8022cfa <_malloc_r+0x56>
 8022cd2:	4f20      	ldr	r7, [pc, #128]	; (8022d54 <_malloc_r+0xb0>)
 8022cd4:	683b      	ldr	r3, [r7, #0]
 8022cd6:	b923      	cbnz	r3, 8022ce2 <_malloc_r+0x3e>
 8022cd8:	4621      	mov	r1, r4
 8022cda:	4630      	mov	r0, r6
 8022cdc:	f000 f83c 	bl	8022d58 <_sbrk_r>
 8022ce0:	6038      	str	r0, [r7, #0]
 8022ce2:	4629      	mov	r1, r5
 8022ce4:	4630      	mov	r0, r6
 8022ce6:	f000 f837 	bl	8022d58 <_sbrk_r>
 8022cea:	1c43      	adds	r3, r0, #1
 8022cec:	d123      	bne.n	8022d36 <_malloc_r+0x92>
 8022cee:	230c      	movs	r3, #12
 8022cf0:	6033      	str	r3, [r6, #0]
 8022cf2:	4630      	mov	r0, r6
 8022cf4:	f000 f846 	bl	8022d84 <__malloc_unlock>
 8022cf8:	e7e3      	b.n	8022cc2 <_malloc_r+0x1e>
 8022cfa:	6823      	ldr	r3, [r4, #0]
 8022cfc:	1b5b      	subs	r3, r3, r5
 8022cfe:	d417      	bmi.n	8022d30 <_malloc_r+0x8c>
 8022d00:	2b0b      	cmp	r3, #11
 8022d02:	d903      	bls.n	8022d0c <_malloc_r+0x68>
 8022d04:	6023      	str	r3, [r4, #0]
 8022d06:	441c      	add	r4, r3
 8022d08:	6025      	str	r5, [r4, #0]
 8022d0a:	e004      	b.n	8022d16 <_malloc_r+0x72>
 8022d0c:	6863      	ldr	r3, [r4, #4]
 8022d0e:	42a2      	cmp	r2, r4
 8022d10:	bf0c      	ite	eq
 8022d12:	600b      	streq	r3, [r1, #0]
 8022d14:	6053      	strne	r3, [r2, #4]
 8022d16:	4630      	mov	r0, r6
 8022d18:	f000 f834 	bl	8022d84 <__malloc_unlock>
 8022d1c:	f104 000b 	add.w	r0, r4, #11
 8022d20:	1d23      	adds	r3, r4, #4
 8022d22:	f020 0007 	bic.w	r0, r0, #7
 8022d26:	1ac2      	subs	r2, r0, r3
 8022d28:	d0cc      	beq.n	8022cc4 <_malloc_r+0x20>
 8022d2a:	1a1b      	subs	r3, r3, r0
 8022d2c:	50a3      	str	r3, [r4, r2]
 8022d2e:	e7c9      	b.n	8022cc4 <_malloc_r+0x20>
 8022d30:	4622      	mov	r2, r4
 8022d32:	6864      	ldr	r4, [r4, #4]
 8022d34:	e7cc      	b.n	8022cd0 <_malloc_r+0x2c>
 8022d36:	1cc4      	adds	r4, r0, #3
 8022d38:	f024 0403 	bic.w	r4, r4, #3
 8022d3c:	42a0      	cmp	r0, r4
 8022d3e:	d0e3      	beq.n	8022d08 <_malloc_r+0x64>
 8022d40:	1a21      	subs	r1, r4, r0
 8022d42:	4630      	mov	r0, r6
 8022d44:	f000 f808 	bl	8022d58 <_sbrk_r>
 8022d48:	3001      	adds	r0, #1
 8022d4a:	d1dd      	bne.n	8022d08 <_malloc_r+0x64>
 8022d4c:	e7cf      	b.n	8022cee <_malloc_r+0x4a>
 8022d4e:	bf00      	nop
 8022d50:	20000a28 	.word	0x20000a28
 8022d54:	20000a2c 	.word	0x20000a2c

08022d58 <_sbrk_r>:
 8022d58:	b538      	push	{r3, r4, r5, lr}
 8022d5a:	4d06      	ldr	r5, [pc, #24]	; (8022d74 <_sbrk_r+0x1c>)
 8022d5c:	2300      	movs	r3, #0
 8022d5e:	4604      	mov	r4, r0
 8022d60:	4608      	mov	r0, r1
 8022d62:	602b      	str	r3, [r5, #0]
 8022d64:	f7f5 fa2e 	bl	80181c4 <_sbrk>
 8022d68:	1c43      	adds	r3, r0, #1
 8022d6a:	d102      	bne.n	8022d72 <_sbrk_r+0x1a>
 8022d6c:	682b      	ldr	r3, [r5, #0]
 8022d6e:	b103      	cbz	r3, 8022d72 <_sbrk_r+0x1a>
 8022d70:	6023      	str	r3, [r4, #0]
 8022d72:	bd38      	pop	{r3, r4, r5, pc}
 8022d74:	20007574 	.word	0x20007574

08022d78 <__malloc_lock>:
 8022d78:	4801      	ldr	r0, [pc, #4]	; (8022d80 <__malloc_lock+0x8>)
 8022d7a:	f000 b809 	b.w	8022d90 <__retarget_lock_acquire_recursive>
 8022d7e:	bf00      	nop
 8022d80:	2000757c 	.word	0x2000757c

08022d84 <__malloc_unlock>:
 8022d84:	4801      	ldr	r0, [pc, #4]	; (8022d8c <__malloc_unlock+0x8>)
 8022d86:	f000 b804 	b.w	8022d92 <__retarget_lock_release_recursive>
 8022d8a:	bf00      	nop
 8022d8c:	2000757c 	.word	0x2000757c

08022d90 <__retarget_lock_acquire_recursive>:
 8022d90:	4770      	bx	lr

08022d92 <__retarget_lock_release_recursive>:
 8022d92:	4770      	bx	lr

08022d94 <_init>:
 8022d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022d96:	bf00      	nop
 8022d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022d9a:	bc08      	pop	{r3}
 8022d9c:	469e      	mov	lr, r3
 8022d9e:	4770      	bx	lr

08022da0 <_fini>:
 8022da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022da2:	bf00      	nop
 8022da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022da6:	bc08      	pop	{r3}
 8022da8:	469e      	mov	lr, r3
 8022daa:	4770      	bx	lr
