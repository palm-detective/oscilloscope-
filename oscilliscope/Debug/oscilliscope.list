
oscilliscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016df4  0800c000  0800c000  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021c8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022df4  08022df4  00040760  2**0
                  CONTENTS
  4 .ARM          00000008  08022df4  08022df4  00032df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022dfc  08022dfc  00040760  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022dfc  08022dfc  00032dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08022e00  08022e00  00032e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000760  20000000  08022e04  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006dc4  20000760  08023564  00040760  2**2
                  ALLOC
 10 ._user_heap_stack 00000e04  20007524  08023564  00047524  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040760  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003adf0  00000000  00000000  00040790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000687e  00000000  00000000  0007b580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d60  00000000  00000000  00081e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a80  00000000  00000000  00083b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aad1  00000000  00000000  000855e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a002  00000000  00000000  000b00b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e518b  00000000  00000000  000da0b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001bf23e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007948  00000000  00000000  001bf294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800c000 <__do_global_dtors_aux>:
 800c000:	b510      	push	{r4, lr}
 800c002:	4c05      	ldr	r4, [pc, #20]	; (800c018 <__do_global_dtors_aux+0x18>)
 800c004:	7823      	ldrb	r3, [r4, #0]
 800c006:	b933      	cbnz	r3, 800c016 <__do_global_dtors_aux+0x16>
 800c008:	4b04      	ldr	r3, [pc, #16]	; (800c01c <__do_global_dtors_aux+0x1c>)
 800c00a:	b113      	cbz	r3, 800c012 <__do_global_dtors_aux+0x12>
 800c00c:	4804      	ldr	r0, [pc, #16]	; (800c020 <__do_global_dtors_aux+0x20>)
 800c00e:	f3af 8000 	nop.w
 800c012:	2301      	movs	r3, #1
 800c014:	7023      	strb	r3, [r4, #0]
 800c016:	bd10      	pop	{r4, pc}
 800c018:	20000760 	.word	0x20000760
 800c01c:	00000000 	.word	0x00000000
 800c020:	08022ddc 	.word	0x08022ddc

0800c024 <frame_dummy>:
 800c024:	b508      	push	{r3, lr}
 800c026:	4b03      	ldr	r3, [pc, #12]	; (800c034 <frame_dummy+0x10>)
 800c028:	b11b      	cbz	r3, 800c032 <frame_dummy+0xe>
 800c02a:	4903      	ldr	r1, [pc, #12]	; (800c038 <frame_dummy+0x14>)
 800c02c:	4803      	ldr	r0, [pc, #12]	; (800c03c <frame_dummy+0x18>)
 800c02e:	f3af 8000 	nop.w
 800c032:	bd08      	pop	{r3, pc}
 800c034:	00000000 	.word	0x00000000
 800c038:	20000764 	.word	0x20000764
 800c03c:	08022ddc 	.word	0x08022ddc

0800c040 <strlen>:
 800c040:	4603      	mov	r3, r0
 800c042:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c046:	2a00      	cmp	r2, #0
 800c048:	d1fb      	bne.n	800c042 <strlen+0x2>
 800c04a:	1a18      	subs	r0, r3, r0
 800c04c:	3801      	subs	r0, #1
 800c04e:	4770      	bx	lr

0800c050 <__aeabi_uldivmod>:
 800c050:	b953      	cbnz	r3, 800c068 <__aeabi_uldivmod+0x18>
 800c052:	b94a      	cbnz	r2, 800c068 <__aeabi_uldivmod+0x18>
 800c054:	2900      	cmp	r1, #0
 800c056:	bf08      	it	eq
 800c058:	2800      	cmpeq	r0, #0
 800c05a:	bf1c      	itt	ne
 800c05c:	f04f 31ff 	movne.w	r1, #4294967295
 800c060:	f04f 30ff 	movne.w	r0, #4294967295
 800c064:	f000 b96e 	b.w	800c344 <__aeabi_idiv0>
 800c068:	f1ad 0c08 	sub.w	ip, sp, #8
 800c06c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800c070:	f000 f806 	bl	800c080 <__udivmoddi4>
 800c074:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c078:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c07c:	b004      	add	sp, #16
 800c07e:	4770      	bx	lr

0800c080 <__udivmoddi4>:
 800c080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c084:	9d08      	ldr	r5, [sp, #32]
 800c086:	4604      	mov	r4, r0
 800c088:	468c      	mov	ip, r1
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	f040 8083 	bne.w	800c196 <__udivmoddi4+0x116>
 800c090:	428a      	cmp	r2, r1
 800c092:	4617      	mov	r7, r2
 800c094:	d947      	bls.n	800c126 <__udivmoddi4+0xa6>
 800c096:	fab2 f282 	clz	r2, r2
 800c09a:	b142      	cbz	r2, 800c0ae <__udivmoddi4+0x2e>
 800c09c:	f1c2 0020 	rsb	r0, r2, #32
 800c0a0:	fa24 f000 	lsr.w	r0, r4, r0
 800c0a4:	4091      	lsls	r1, r2
 800c0a6:	4097      	lsls	r7, r2
 800c0a8:	ea40 0c01 	orr.w	ip, r0, r1
 800c0ac:	4094      	lsls	r4, r2
 800c0ae:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800c0b2:	0c23      	lsrs	r3, r4, #16
 800c0b4:	fbbc f6f8 	udiv	r6, ip, r8
 800c0b8:	fa1f fe87 	uxth.w	lr, r7
 800c0bc:	fb08 c116 	mls	r1, r8, r6, ip
 800c0c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c0c4:	fb06 f10e 	mul.w	r1, r6, lr
 800c0c8:	4299      	cmp	r1, r3
 800c0ca:	d909      	bls.n	800c0e0 <__udivmoddi4+0x60>
 800c0cc:	18fb      	adds	r3, r7, r3
 800c0ce:	f106 30ff 	add.w	r0, r6, #4294967295
 800c0d2:	f080 8119 	bcs.w	800c308 <__udivmoddi4+0x288>
 800c0d6:	4299      	cmp	r1, r3
 800c0d8:	f240 8116 	bls.w	800c308 <__udivmoddi4+0x288>
 800c0dc:	3e02      	subs	r6, #2
 800c0de:	443b      	add	r3, r7
 800c0e0:	1a5b      	subs	r3, r3, r1
 800c0e2:	b2a4      	uxth	r4, r4
 800c0e4:	fbb3 f0f8 	udiv	r0, r3, r8
 800c0e8:	fb08 3310 	mls	r3, r8, r0, r3
 800c0ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800c0f0:	fb00 fe0e 	mul.w	lr, r0, lr
 800c0f4:	45a6      	cmp	lr, r4
 800c0f6:	d909      	bls.n	800c10c <__udivmoddi4+0x8c>
 800c0f8:	193c      	adds	r4, r7, r4
 800c0fa:	f100 33ff 	add.w	r3, r0, #4294967295
 800c0fe:	f080 8105 	bcs.w	800c30c <__udivmoddi4+0x28c>
 800c102:	45a6      	cmp	lr, r4
 800c104:	f240 8102 	bls.w	800c30c <__udivmoddi4+0x28c>
 800c108:	3802      	subs	r0, #2
 800c10a:	443c      	add	r4, r7
 800c10c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800c110:	eba4 040e 	sub.w	r4, r4, lr
 800c114:	2600      	movs	r6, #0
 800c116:	b11d      	cbz	r5, 800c120 <__udivmoddi4+0xa0>
 800c118:	40d4      	lsrs	r4, r2
 800c11a:	2300      	movs	r3, #0
 800c11c:	e9c5 4300 	strd	r4, r3, [r5]
 800c120:	4631      	mov	r1, r6
 800c122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c126:	b902      	cbnz	r2, 800c12a <__udivmoddi4+0xaa>
 800c128:	deff      	udf	#255	; 0xff
 800c12a:	fab2 f282 	clz	r2, r2
 800c12e:	2a00      	cmp	r2, #0
 800c130:	d150      	bne.n	800c1d4 <__udivmoddi4+0x154>
 800c132:	1bcb      	subs	r3, r1, r7
 800c134:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800c138:	fa1f f887 	uxth.w	r8, r7
 800c13c:	2601      	movs	r6, #1
 800c13e:	fbb3 fcfe 	udiv	ip, r3, lr
 800c142:	0c21      	lsrs	r1, r4, #16
 800c144:	fb0e 331c 	mls	r3, lr, ip, r3
 800c148:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c14c:	fb08 f30c 	mul.w	r3, r8, ip
 800c150:	428b      	cmp	r3, r1
 800c152:	d907      	bls.n	800c164 <__udivmoddi4+0xe4>
 800c154:	1879      	adds	r1, r7, r1
 800c156:	f10c 30ff 	add.w	r0, ip, #4294967295
 800c15a:	d202      	bcs.n	800c162 <__udivmoddi4+0xe2>
 800c15c:	428b      	cmp	r3, r1
 800c15e:	f200 80e9 	bhi.w	800c334 <__udivmoddi4+0x2b4>
 800c162:	4684      	mov	ip, r0
 800c164:	1ac9      	subs	r1, r1, r3
 800c166:	b2a3      	uxth	r3, r4
 800c168:	fbb1 f0fe 	udiv	r0, r1, lr
 800c16c:	fb0e 1110 	mls	r1, lr, r0, r1
 800c170:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800c174:	fb08 f800 	mul.w	r8, r8, r0
 800c178:	45a0      	cmp	r8, r4
 800c17a:	d907      	bls.n	800c18c <__udivmoddi4+0x10c>
 800c17c:	193c      	adds	r4, r7, r4
 800c17e:	f100 33ff 	add.w	r3, r0, #4294967295
 800c182:	d202      	bcs.n	800c18a <__udivmoddi4+0x10a>
 800c184:	45a0      	cmp	r8, r4
 800c186:	f200 80d9 	bhi.w	800c33c <__udivmoddi4+0x2bc>
 800c18a:	4618      	mov	r0, r3
 800c18c:	eba4 0408 	sub.w	r4, r4, r8
 800c190:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800c194:	e7bf      	b.n	800c116 <__udivmoddi4+0x96>
 800c196:	428b      	cmp	r3, r1
 800c198:	d909      	bls.n	800c1ae <__udivmoddi4+0x12e>
 800c19a:	2d00      	cmp	r5, #0
 800c19c:	f000 80b1 	beq.w	800c302 <__udivmoddi4+0x282>
 800c1a0:	2600      	movs	r6, #0
 800c1a2:	e9c5 0100 	strd	r0, r1, [r5]
 800c1a6:	4630      	mov	r0, r6
 800c1a8:	4631      	mov	r1, r6
 800c1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1ae:	fab3 f683 	clz	r6, r3
 800c1b2:	2e00      	cmp	r6, #0
 800c1b4:	d14a      	bne.n	800c24c <__udivmoddi4+0x1cc>
 800c1b6:	428b      	cmp	r3, r1
 800c1b8:	d302      	bcc.n	800c1c0 <__udivmoddi4+0x140>
 800c1ba:	4282      	cmp	r2, r0
 800c1bc:	f200 80b8 	bhi.w	800c330 <__udivmoddi4+0x2b0>
 800c1c0:	1a84      	subs	r4, r0, r2
 800c1c2:	eb61 0103 	sbc.w	r1, r1, r3
 800c1c6:	2001      	movs	r0, #1
 800c1c8:	468c      	mov	ip, r1
 800c1ca:	2d00      	cmp	r5, #0
 800c1cc:	d0a8      	beq.n	800c120 <__udivmoddi4+0xa0>
 800c1ce:	e9c5 4c00 	strd	r4, ip, [r5]
 800c1d2:	e7a5      	b.n	800c120 <__udivmoddi4+0xa0>
 800c1d4:	f1c2 0320 	rsb	r3, r2, #32
 800c1d8:	fa20 f603 	lsr.w	r6, r0, r3
 800c1dc:	4097      	lsls	r7, r2
 800c1de:	fa01 f002 	lsl.w	r0, r1, r2
 800c1e2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800c1e6:	40d9      	lsrs	r1, r3
 800c1e8:	4330      	orrs	r0, r6
 800c1ea:	0c03      	lsrs	r3, r0, #16
 800c1ec:	fbb1 f6fe 	udiv	r6, r1, lr
 800c1f0:	fa1f f887 	uxth.w	r8, r7
 800c1f4:	fb0e 1116 	mls	r1, lr, r6, r1
 800c1f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c1fc:	fb06 f108 	mul.w	r1, r6, r8
 800c200:	4299      	cmp	r1, r3
 800c202:	fa04 f402 	lsl.w	r4, r4, r2
 800c206:	d909      	bls.n	800c21c <__udivmoddi4+0x19c>
 800c208:	18fb      	adds	r3, r7, r3
 800c20a:	f106 3cff 	add.w	ip, r6, #4294967295
 800c20e:	f080 808d 	bcs.w	800c32c <__udivmoddi4+0x2ac>
 800c212:	4299      	cmp	r1, r3
 800c214:	f240 808a 	bls.w	800c32c <__udivmoddi4+0x2ac>
 800c218:	3e02      	subs	r6, #2
 800c21a:	443b      	add	r3, r7
 800c21c:	1a5b      	subs	r3, r3, r1
 800c21e:	b281      	uxth	r1, r0
 800c220:	fbb3 f0fe 	udiv	r0, r3, lr
 800c224:	fb0e 3310 	mls	r3, lr, r0, r3
 800c228:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c22c:	fb00 f308 	mul.w	r3, r0, r8
 800c230:	428b      	cmp	r3, r1
 800c232:	d907      	bls.n	800c244 <__udivmoddi4+0x1c4>
 800c234:	1879      	adds	r1, r7, r1
 800c236:	f100 3cff 	add.w	ip, r0, #4294967295
 800c23a:	d273      	bcs.n	800c324 <__udivmoddi4+0x2a4>
 800c23c:	428b      	cmp	r3, r1
 800c23e:	d971      	bls.n	800c324 <__udivmoddi4+0x2a4>
 800c240:	3802      	subs	r0, #2
 800c242:	4439      	add	r1, r7
 800c244:	1acb      	subs	r3, r1, r3
 800c246:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800c24a:	e778      	b.n	800c13e <__udivmoddi4+0xbe>
 800c24c:	f1c6 0c20 	rsb	ip, r6, #32
 800c250:	fa03 f406 	lsl.w	r4, r3, r6
 800c254:	fa22 f30c 	lsr.w	r3, r2, ip
 800c258:	431c      	orrs	r4, r3
 800c25a:	fa20 f70c 	lsr.w	r7, r0, ip
 800c25e:	fa01 f306 	lsl.w	r3, r1, r6
 800c262:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800c266:	fa21 f10c 	lsr.w	r1, r1, ip
 800c26a:	431f      	orrs	r7, r3
 800c26c:	0c3b      	lsrs	r3, r7, #16
 800c26e:	fbb1 f9fe 	udiv	r9, r1, lr
 800c272:	fa1f f884 	uxth.w	r8, r4
 800c276:	fb0e 1119 	mls	r1, lr, r9, r1
 800c27a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800c27e:	fb09 fa08 	mul.w	sl, r9, r8
 800c282:	458a      	cmp	sl, r1
 800c284:	fa02 f206 	lsl.w	r2, r2, r6
 800c288:	fa00 f306 	lsl.w	r3, r0, r6
 800c28c:	d908      	bls.n	800c2a0 <__udivmoddi4+0x220>
 800c28e:	1861      	adds	r1, r4, r1
 800c290:	f109 30ff 	add.w	r0, r9, #4294967295
 800c294:	d248      	bcs.n	800c328 <__udivmoddi4+0x2a8>
 800c296:	458a      	cmp	sl, r1
 800c298:	d946      	bls.n	800c328 <__udivmoddi4+0x2a8>
 800c29a:	f1a9 0902 	sub.w	r9, r9, #2
 800c29e:	4421      	add	r1, r4
 800c2a0:	eba1 010a 	sub.w	r1, r1, sl
 800c2a4:	b2bf      	uxth	r7, r7
 800c2a6:	fbb1 f0fe 	udiv	r0, r1, lr
 800c2aa:	fb0e 1110 	mls	r1, lr, r0, r1
 800c2ae:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800c2b2:	fb00 f808 	mul.w	r8, r0, r8
 800c2b6:	45b8      	cmp	r8, r7
 800c2b8:	d907      	bls.n	800c2ca <__udivmoddi4+0x24a>
 800c2ba:	19e7      	adds	r7, r4, r7
 800c2bc:	f100 31ff 	add.w	r1, r0, #4294967295
 800c2c0:	d22e      	bcs.n	800c320 <__udivmoddi4+0x2a0>
 800c2c2:	45b8      	cmp	r8, r7
 800c2c4:	d92c      	bls.n	800c320 <__udivmoddi4+0x2a0>
 800c2c6:	3802      	subs	r0, #2
 800c2c8:	4427      	add	r7, r4
 800c2ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800c2ce:	eba7 0708 	sub.w	r7, r7, r8
 800c2d2:	fba0 8902 	umull	r8, r9, r0, r2
 800c2d6:	454f      	cmp	r7, r9
 800c2d8:	46c6      	mov	lr, r8
 800c2da:	4649      	mov	r1, r9
 800c2dc:	d31a      	bcc.n	800c314 <__udivmoddi4+0x294>
 800c2de:	d017      	beq.n	800c310 <__udivmoddi4+0x290>
 800c2e0:	b15d      	cbz	r5, 800c2fa <__udivmoddi4+0x27a>
 800c2e2:	ebb3 020e 	subs.w	r2, r3, lr
 800c2e6:	eb67 0701 	sbc.w	r7, r7, r1
 800c2ea:	fa07 fc0c 	lsl.w	ip, r7, ip
 800c2ee:	40f2      	lsrs	r2, r6
 800c2f0:	ea4c 0202 	orr.w	r2, ip, r2
 800c2f4:	40f7      	lsrs	r7, r6
 800c2f6:	e9c5 2700 	strd	r2, r7, [r5]
 800c2fa:	2600      	movs	r6, #0
 800c2fc:	4631      	mov	r1, r6
 800c2fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c302:	462e      	mov	r6, r5
 800c304:	4628      	mov	r0, r5
 800c306:	e70b      	b.n	800c120 <__udivmoddi4+0xa0>
 800c308:	4606      	mov	r6, r0
 800c30a:	e6e9      	b.n	800c0e0 <__udivmoddi4+0x60>
 800c30c:	4618      	mov	r0, r3
 800c30e:	e6fd      	b.n	800c10c <__udivmoddi4+0x8c>
 800c310:	4543      	cmp	r3, r8
 800c312:	d2e5      	bcs.n	800c2e0 <__udivmoddi4+0x260>
 800c314:	ebb8 0e02 	subs.w	lr, r8, r2
 800c318:	eb69 0104 	sbc.w	r1, r9, r4
 800c31c:	3801      	subs	r0, #1
 800c31e:	e7df      	b.n	800c2e0 <__udivmoddi4+0x260>
 800c320:	4608      	mov	r0, r1
 800c322:	e7d2      	b.n	800c2ca <__udivmoddi4+0x24a>
 800c324:	4660      	mov	r0, ip
 800c326:	e78d      	b.n	800c244 <__udivmoddi4+0x1c4>
 800c328:	4681      	mov	r9, r0
 800c32a:	e7b9      	b.n	800c2a0 <__udivmoddi4+0x220>
 800c32c:	4666      	mov	r6, ip
 800c32e:	e775      	b.n	800c21c <__udivmoddi4+0x19c>
 800c330:	4630      	mov	r0, r6
 800c332:	e74a      	b.n	800c1ca <__udivmoddi4+0x14a>
 800c334:	f1ac 0c02 	sub.w	ip, ip, #2
 800c338:	4439      	add	r1, r7
 800c33a:	e713      	b.n	800c164 <__udivmoddi4+0xe4>
 800c33c:	3802      	subs	r0, #2
 800c33e:	443c      	add	r4, r7
 800c340:	e724      	b.n	800c18c <__udivmoddi4+0x10c>
 800c342:	bf00      	nop

0800c344 <__aeabi_idiv0>:
 800c344:	4770      	bx	lr
 800c346:	bf00      	nop

0800c348 <BIOS_Info>:

/*******************************************************************************
 Info :  Ӳ���豸��Ϣ
*******************************************************************************/
unsigned BIOS_Info(char Item)
{
 800c348:	b480      	push	{r7}
 800c34a:	b083      	sub	sp, #12
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	4603      	mov	r3, r0
 800c350:	71fb      	strb	r3, [r7, #7]
  switch (Item){
 800c352:	79fb      	ldrb	r3, [r7, #7]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d103      	bne.n	800c360 <BIOS_Info+0x18>
    case CHA_CNT:
    	return __HAL_DMA_GET_COUNTER(&hdma_adc1);  /*(u16)DMA_CH_A->CNDTR*/
 800c358:	4b05      	ldr	r3, [pc, #20]	; (800c370 <BIOS_Info+0x28>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	e000      	b.n	800c362 <BIOS_Info+0x1a>
/*    case SIN_TAB: return (u32)SIN_DATA;
    case TRG_TAB: return (u32)TRG_DATA;
    case SAW_TAB: return (u32)SAW_DATA;    */
    default:
    	return 0;
 800c360:	2300      	movs	r3, #0
  }
}
 800c362:	4618      	mov	r0, r3
 800c364:	370c      	adds	r7, #12
 800c366:	46bd      	mov	sp, r7
 800c368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36c:	4770      	bx	lr
 800c36e:	bf00      	nop
 800c370:	20006b0c 	.word	0x20006b0c

0800c374 <BIOS_Ctrl>:
/*******************************************************************************
 DevCtrl:  Ӳ���豸����
*******************************************************************************/
void BIOS_Ctrl(char Item, unsigned Val)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b088      	sub	sp, #32
 800c378:	af00      	add	r7, sp, #0
 800c37a:	4603      	mov	r3, r0
 800c37c:	6039      	str	r1, [r7, #0]
 800c37e:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef         GPIO_InitStructure;
  unsigned dma_tmp;

  switch (Item){
 800c380:	79fb      	ldrb	r3, [r7, #7]
 800c382:	2b08      	cmp	r3, #8
 800c384:	f200 8150 	bhi.w	800c628 <BIOS_Ctrl+0x2b4>
 800c388:	a201      	add	r2, pc, #4	; (adr r2, 800c390 <BIOS_Ctrl+0x1c>)
 800c38a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c38e:	bf00      	nop
 800c390:	0800c52b 	.word	0x0800c52b
 800c394:	0800c4d9 	.word	0x0800c4d9
 800c398:	0800c51f 	.word	0x0800c51f
 800c39c:	0800c4e9 	.word	0x0800c4e9
 800c3a0:	0800c3b5 	.word	0x0800c3b5
 800c3a4:	0800c417 	.word	0x0800c417
 800c3a8:	0800c441 	.word	0x0800c441
 800c3ac:	0800c469 	.word	0x0800c469
 800c3b0:	0800c4cb 	.word	0x0800c4cb
    case SMPL_ST: if(Val == DISABLE)
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d108      	bne.n	800c3cc <BIOS_Ctrl+0x58>
    			  {
    				  __HAL_DMA_DISABLE(&hdma_adc1);  /*DMA1_Channel1->CCR &= (~ENABLE);*/
 800c3ba:	4ba0      	ldr	r3, [pc, #640]	; (800c63c <BIOS_Ctrl+0x2c8>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	681a      	ldr	r2, [r3, #0]
 800c3c0:	4b9e      	ldr	r3, [pc, #632]	; (800c63c <BIOS_Ctrl+0x2c8>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f022 0201 	bic.w	r2, r2, #1
 800c3c8:	601a      	str	r2, [r3, #0]
                    if(Val == INTERLEAVE)
                    {
                      DMA1_Channel1->CCR = 0x3A80;
                    } */
                  }
    			  break;
 800c3ca:	e12f      	b.n	800c62c <BIOS_Ctrl+0x2b8>
    				  if(Val == ENABLE)
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	2b01      	cmp	r3, #1
 800c3d0:	f040 812c 	bne.w	800c62c <BIOS_Ctrl+0x2b8>
    			    __HAL_DMA_ENABLE(&hdma_adc1);  /* DMA1_Channel1->CCR |= ENABLE; */
 800c3d4:	4b99      	ldr	r3, [pc, #612]	; (800c63c <BIOS_Ctrl+0x2c8>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	681a      	ldr	r2, [r3, #0]
 800c3da:	4b98      	ldr	r3, [pc, #608]	; (800c63c <BIOS_Ctrl+0x2c8>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f042 0201 	orr.w	r2, r2, #1
 800c3e2:	601a      	str	r2, [r3, #0]
                    __HAL_ADC_ENABLE(&hadc1);  //ADC1->CR2 |= 0x00000001; //AD_ON
 800c3e4:	4b96      	ldr	r3, [pc, #600]	; (800c640 <BIOS_Ctrl+0x2cc>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	689a      	ldr	r2, [r3, #8]
 800c3ea:	4b95      	ldr	r3, [pc, #596]	; (800c640 <BIOS_Ctrl+0x2cc>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f042 0201 	orr.w	r2, r2, #1
 800c3f2:	609a      	str	r2, [r3, #8]
                    __HAL_ADC_ENABLE(&hadc2);  //ADC2->CR2 |= 0x00000001; //AD_ON
 800c3f4:	4b93      	ldr	r3, [pc, #588]	; (800c644 <BIOS_Ctrl+0x2d0>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	689a      	ldr	r2, [r3, #8]
 800c3fa:	4b92      	ldr	r3, [pc, #584]	; (800c644 <BIOS_Ctrl+0x2d0>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f042 0201 	orr.w	r2, r2, #1
 800c402:	609a      	str	r2, [r3, #8]
                    __HAL_TIM_ENABLE(&htim1);  /*TIM1->CR1 = 0x0081; */
 800c404:	4b90      	ldr	r3, [pc, #576]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	681a      	ldr	r2, [r3, #0]
 800c40a:	4b8f      	ldr	r3, [pc, #572]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f042 0201 	orr.w	r2, r2, #1
 800c412:	601a      	str	r2, [r3, #0]
    			  break;
 800c414:	e10a      	b.n	800c62c <BIOS_Ctrl+0x2b8>

    case SMPLTIM:
    			  octim1.Pulse = (Val+1)/2;
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	3301      	adds	r3, #1
 800c41a:	085b      	lsrs	r3, r3, #1
 800c41c:	4a8b      	ldr	r2, [pc, #556]	; (800c64c <BIOS_Ctrl+0x2d8>)
 800c41e:	6053      	str	r3, [r2, #4]
    			  HAL_TIM_OC_ConfigChannel(&htim1, &octim1, 1 );
 800c420:	2201      	movs	r2, #1
 800c422:	498a      	ldr	r1, [pc, #552]	; (800c64c <BIOS_Ctrl+0x2d8>)
 800c424:	4888      	ldr	r0, [pc, #544]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c426:	f010 fecb 	bl	801d1c0 <HAL_TIM_OC_ConfigChannel>
    			  htim1.Init.Prescaler = 0;
 800c42a:	4b87      	ldr	r3, [pc, #540]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c42c:	2200      	movs	r2, #0
 800c42e:	605a      	str	r2, [r3, #4]
    			  htim1.Init.Period = Val -1;
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	3b01      	subs	r3, #1
 800c434:	4a84      	ldr	r2, [pc, #528]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c436:	60d3      	str	r3, [r2, #12]
    			  HAL_TIM_Base_Init(&htim1);
 800c438:	4883      	ldr	r0, [pc, #524]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c43a:	f010 fcf9 	bl	801ce30 <HAL_TIM_Base_Init>
                  break;
 800c43e:	e0f8      	b.n	800c632 <BIOS_Ctrl+0x2be>

    case SMPLNUM:
    			  __HAL_TIM_URS_DISABLE(&htim1);
 800c440:	4b81      	ldr	r3, [pc, #516]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	681a      	ldr	r2, [r3, #0]
 800c446:	4b80      	ldr	r3, [pc, #512]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f022 0204 	bic.w	r2, r2, #4
 800c44e:	601a      	str	r2, [r3, #0]
    			  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c450:	4b7d      	ldr	r3, [pc, #500]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c452:	2200      	movs	r2, #0
 800c454:	609a      	str	r2, [r3, #8]
    			  HAL_TIM_Base_Init(&htim1);
 800c456:	487c      	ldr	r0, [pc, #496]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c458:	f010 fcea 	bl	801ce30 <HAL_TIM_Base_Init>
    			  __HAL_DMA_SET_COUNTER( &hdma_adc1, Val);  /* DMA_CH_A->CNDTR = (u32)Val;    */
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	b29a      	uxth	r2, r3
 800c460:	4b76      	ldr	r3, [pc, #472]	; (800c63c <BIOS_Ctrl+0x2c8>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	605a      	str	r2, [r3, #4]
                  break;
 800c466:	e0e4      	b.n	800c632 <BIOS_Ctrl+0x2be>

    case AiRANGE: if(Val & DC)
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	f003 0302 	and.w	r3, r3, #2
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d005      	beq.n	800c47e <BIOS_Ctrl+0x10a>
    				  HAL_GPIO_WritePin(Az_GPIO_Port, Az_Pin,GPIO_PIN_SET);  // AZ_HIGH;
 800c472:	2201      	movs	r2, #1
 800c474:	2110      	movs	r1, #16
 800c476:	4876      	ldr	r0, [pc, #472]	; (800c650 <BIOS_Ctrl+0x2dc>)
 800c478:	f00d fb8a 	bl	8019b90 <HAL_GPIO_WritePin>
 800c47c:	e004      	b.n	800c488 <BIOS_Ctrl+0x114>
                  else
                	  HAL_GPIO_WritePin(Az_GPIO_Port, Az_Pin,GPIO_PIN_RESET);  //AZ_LOW;   CH_A_AC
 800c47e:	2200      	movs	r2, #0
 800c480:	2110      	movs	r1, #16
 800c482:	4873      	ldr	r0, [pc, #460]	; (800c650 <BIOS_Ctrl+0x2dc>)
 800c484:	f00d fb84 	bl	8019b90 <HAL_GPIO_WritePin>
                  if(Val & HV)
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	f003 0301 	and.w	r3, r3, #1
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d005      	beq.n	800c49e <BIOS_Ctrl+0x12a>
                	  HAL_GPIO_WritePin(Ay_GPIO_Port, Ay_Pin,GPIO_PIN_SET);  //AY_HIGH;  CH_A_HV
 800c492:	2201      	movs	r2, #1
 800c494:	2120      	movs	r1, #32
 800c496:	486e      	ldr	r0, [pc, #440]	; (800c650 <BIOS_Ctrl+0x2dc>)
 800c498:	f00d fb7a 	bl	8019b90 <HAL_GPIO_WritePin>
 800c49c:	e004      	b.n	800c4a8 <BIOS_Ctrl+0x134>
                  else
                	  HAL_GPIO_WritePin(Ay_GPIO_Port, Ay_Pin,GPIO_PIN_RESET);  //AY_LOW;   CH_A_LV
 800c49e:	2200      	movs	r2, #0
 800c4a0:	2120      	movs	r1, #32
 800c4a2:	486b      	ldr	r0, [pc, #428]	; (800c650 <BIOS_Ctrl+0x2dc>)
 800c4a4:	f00d fb74 	bl	8019b90 <HAL_GPIO_WritePin>
                  if(Val & ACT)
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	f003 0304 	and.w	r3, r3, #4
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d005      	beq.n	800c4be <BIOS_Ctrl+0x14a>
                	  HAL_GPIO_WritePin(Ax_GPIO_Port, Ax_Pin,GPIO_PIN_SET);  //AX_HIGH;  CH_A_ACT
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	2101      	movs	r1, #1
 800c4b6:	4867      	ldr	r0, [pc, #412]	; (800c654 <BIOS_Ctrl+0x2e0>)
 800c4b8:	f00d fb6a 	bl	8019b90 <HAL_GPIO_WritePin>
                  else
                	  HAL_GPIO_WritePin(Ax_GPIO_Port, Ax_Pin,GPIO_PIN_RESET);  //AX_LOW;   CH_A_GND
                  break;
 800c4bc:	e0b9      	b.n	800c632 <BIOS_Ctrl+0x2be>
                	  HAL_GPIO_WritePin(Ax_GPIO_Port, Ax_Pin,GPIO_PIN_RESET);  //AX_LOW;   CH_A_GND
 800c4be:	2200      	movs	r2, #0
 800c4c0:	2101      	movs	r1, #1
 800c4c2:	4864      	ldr	r0, [pc, #400]	; (800c654 <BIOS_Ctrl+0x2e0>)
 800c4c4:	f00d fb64 	bl	8019b90 <HAL_GPIO_WritePin>
                  break;
 800c4c8:	e0b3      	b.n	800c632 <BIOS_Ctrl+0x2be>

    case AOFFSET: HAL_DAC_SetValue( &hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, Val);  /*DAC->DHR12R2  = (u16)Val; */
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	2110      	movs	r1, #16
 800c4d0:	4861      	ldr	r0, [pc, #388]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c4d2:	f00c fb48 	bl	8018b66 <HAL_DAC_SetValue>
                  break;
 800c4d6:	e0ac      	b.n	800c632 <BIOS_Ctrl+0x2be>

    case DAC_TIM:
    			  htim7.Init.Period = Val-1;
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	3b01      	subs	r3, #1
 800c4dc:	4a5f      	ldr	r2, [pc, #380]	; (800c65c <BIOS_Ctrl+0x2e8>)
 800c4de:	60d3      	str	r3, [r2, #12]
    			  HAL_TIM_Base_Init(&htim7);
 800c4e0:	485e      	ldr	r0, [pc, #376]	; (800c65c <BIOS_Ctrl+0x2e8>)
 800c4e2:	f010 fca5 	bl	801ce30 <HAL_TIM_Base_Init>
    			  break;
 800c4e6:	e0a4      	b.n	800c632 <BIOS_Ctrl+0x2be>

    case OUT_BUF:
    // need to do this at low level
        		  // set circular  /* OUT_DMA->CCR   = 0x15B0; // PL=01, M/P_SIZE=0101, M/P_INC=10, CIRC=1, DIR=1, En=0 */
    			  dma_tmp = hdma_dac1.Instance->CR;
 800c4e8:	4b5d      	ldr	r3, [pc, #372]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	61fb      	str	r3, [r7, #28]
    			  dma_tmp &= 0x0FFFFEDE;
 800c4f0:	69fa      	ldr	r2, [r7, #28]
 800c4f2:	4b5c      	ldr	r3, [pc, #368]	; (800c664 <BIOS_Ctrl+0x2f0>)
 800c4f4:	4013      	ands	r3, r2
 800c4f6:	61fb      	str	r3, [r7, #28]
    			  dma_tmp |= 0x120; //set circ anf pfctrl
 800c4f8:	69fb      	ldr	r3, [r7, #28]
 800c4fa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c4fe:	61fb      	str	r3, [r7, #28]
				  hdma_dac1.Instance->CR = dma_tmp;
 800c500:	4b57      	ldr	r3, [pc, #348]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	69fa      	ldr	r2, [r7, #28]
 800c506:	601a      	str	r2, [r3, #0]
         		  hdma_dac1.Instance->PAR = hdac.Instance->DHR12R1;  /* OUT_DMA->CPAR  = (u32)&DAC->DHR12R1; */
 800c508:	4b53      	ldr	r3, [pc, #332]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c50a:	681a      	ldr	r2, [r3, #0]
 800c50c:	4b54      	ldr	r3, [pc, #336]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	6892      	ldr	r2, [r2, #8]
 800c512:	609a      	str	r2, [r3, #8]
        		  hdma_dac1.Instance->M0AR = Val;  /*  OUT_DMA->CMAR  = (u32)Val; */
 800c514:	4b52      	ldr	r3, [pc, #328]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	683a      	ldr	r2, [r7, #0]
 800c51a:	60da      	str	r2, [r3, #12]
                  break;
 800c51c:	e089      	b.n	800c632 <BIOS_Ctrl+0x2be>

    case OUT_CNT:
    			  __HAL_DMA_SET_COUNTER( &hdma_dac1, Val);  /*OUT_DMA->CNDTR = (u16)Val; */
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	b29a      	uxth	r2, r3
 800c522:	4b4f      	ldr	r3, [pc, #316]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	605a      	str	r2, [r3, #4]
    			  break;
 800c528:	e083      	b.n	800c632 <BIOS_Ctrl+0x2be>

    case OUT_MOD:
      GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800c52a:	2301      	movs	r3, #1
 800c52c:	617b      	str	r3, [r7, #20]
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	2b04      	cmp	r3, #4
 800c532:	d009      	beq.n	800c548 <BIOS_Ctrl+0x1d4>
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	2b04      	cmp	r3, #4
 800c538:	d87a      	bhi.n	800c630 <BIOS_Ctrl+0x2bc>
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d04d      	beq.n	800c5dc <BIOS_Ctrl+0x268>
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	2b02      	cmp	r3, #2
 800c544:	d025      	beq.n	800c592 <BIOS_Ctrl+0x21e>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
                                  break;
                  }
                  break;
 800c546:	e073      	b.n	800c630 <BIOS_Ctrl+0x2bc>
                                  __HAL_DMA_DISABLE(&hdma_dac1); // OUT_DMA->CCR &= 0xFFFE;               //�رղ������DMA
 800c548:	4b45      	ldr	r3, [pc, #276]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	681a      	ldr	r2, [r3, #0]
 800c54e:	4b44      	ldr	r3, [pc, #272]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f022 0201 	bic.w	r2, r2, #1
 800c556:	601a      	str	r2, [r3, #0]
                    		      __HAL_DAC_DISABLE(&hdac, DAC_CHANNEL_1);
 800c558:	4b3f      	ldr	r3, [pc, #252]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	681a      	ldr	r2, [r3, #0]
 800c55e:	4b3e      	ldr	r3, [pc, #248]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f022 0201 	bic.w	r2, r2, #1
 800c566:	601a      	str	r2, [r3, #0]
                                  GPIO_InitStructure.Pin   = Fo2_Pin;
 800c568:	2304      	movs	r3, #4
 800c56a:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800c56c:	2302      	movs	r3, #2
 800c56e:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStructure);
 800c570:	f107 0308 	add.w	r3, r7, #8
 800c574:	4619      	mov	r1, r3
 800c576:	483c      	ldr	r0, [pc, #240]	; (800c668 <BIOS_Ctrl+0x2f4>)
 800c578:	f00d f95e 	bl	8019838 <HAL_GPIO_Init>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
 800c57c:	2310      	movs	r3, #16
 800c57e:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
 800c580:	2300      	movs	r3, #0
 800c582:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
 800c584:	f107 0308 	add.w	r3, r7, #8
 800c588:	4619      	mov	r1, r3
 800c58a:	4837      	ldr	r0, [pc, #220]	; (800c668 <BIOS_Ctrl+0x2f4>)
 800c58c:	f00d f954 	bl	8019838 <HAL_GPIO_Init>
                                  break;
 800c590:	e049      	b.n	800c626 <BIOS_Ctrl+0x2b2>
                    			  GPIO_InitStructure.Pin   = Fo2_Pin ;
 800c592:	2304      	movs	r3, #4
 800c594:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
 800c596:	2300      	movs	r3, #0
 800c598:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStructure);
 800c59a:	f107 0308 	add.w	r3, r7, #8
 800c59e:	4619      	mov	r1, r3
 800c5a0:	4831      	ldr	r0, [pc, #196]	; (800c668 <BIOS_Ctrl+0x2f4>)
 800c5a2:	f00d f949 	bl	8019838 <HAL_GPIO_Init>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
 800c5a6:	2310      	movs	r3, #16
 800c5a8:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_ANALOG;
 800c5aa:	2303      	movs	r3, #3
 800c5ac:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
 800c5ae:	f107 0308 	add.w	r3, r7, #8
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	482c      	ldr	r0, [pc, #176]	; (800c668 <BIOS_Ctrl+0x2f4>)
 800c5b6:	f00d f93f 	bl	8019838 <HAL_GPIO_Init>
                                  __HAL_DMA_ENABLE(&hdma_dac1);  // OUT_DMA->CCR |= ENABLE;               //���������DMA
 800c5ba:	4b29      	ldr	r3, [pc, #164]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	681a      	ldr	r2, [r3, #0]
 800c5c0:	4b27      	ldr	r3, [pc, #156]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f042 0201 	orr.w	r2, r2, #1
 800c5c8:	601a      	str	r2, [r3, #0]
                                  __HAL_DAC_ENABLE(&hdac, DAC_CHANNEL_1);
 800c5ca:	4b23      	ldr	r3, [pc, #140]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	681a      	ldr	r2, [r3, #0]
 800c5d0:	4b21      	ldr	r3, [pc, #132]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f042 0201 	orr.w	r2, r2, #1
 800c5d8:	601a      	str	r2, [r3, #0]
                                  break;
 800c5da:	e024      	b.n	800c626 <BIOS_Ctrl+0x2b2>
                    			  __HAL_DMA_DISABLE(&hdma_dac1);  // OUT_DMA->CCR &= 0xFFFE;                //�رղ������DMA
 800c5dc:	4b20      	ldr	r3, [pc, #128]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	681a      	ldr	r2, [r3, #0]
 800c5e2:	4b1f      	ldr	r3, [pc, #124]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	f022 0201 	bic.w	r2, r2, #1
 800c5ea:	601a      	str	r2, [r3, #0]
                    		      __HAL_DAC_DISABLE(&hdac, DAC_CHANNEL_1);
 800c5ec:	4b1a      	ldr	r3, [pc, #104]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	681a      	ldr	r2, [r3, #0]
 800c5f2:	4b19      	ldr	r3, [pc, #100]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f022 0201 	bic.w	r2, r2, #1
 800c5fa:	601a      	str	r2, [r3, #0]
                                  GPIO_InitStructure.Pin   = Fo2_Pin ;
 800c5fc:	2304      	movs	r3, #4
 800c5fe:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800c600:	2302      	movs	r3, #2
 800c602:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStructure);
 800c604:	f107 0308 	add.w	r3, r7, #8
 800c608:	4619      	mov	r1, r3
 800c60a:	4817      	ldr	r0, [pc, #92]	; (800c668 <BIOS_Ctrl+0x2f4>)
 800c60c:	f00d f914 	bl	8019838 <HAL_GPIO_Init>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
 800c610:	2310      	movs	r3, #16
 800c612:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
 800c614:	2300      	movs	r3, #0
 800c616:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
 800c618:	f107 0308 	add.w	r3, r7, #8
 800c61c:	4619      	mov	r1, r3
 800c61e:	4812      	ldr	r0, [pc, #72]	; (800c668 <BIOS_Ctrl+0x2f4>)
 800c620:	f00d f90a 	bl	8019838 <HAL_GPIO_Init>
                                  break;
 800c624:	bf00      	nop
                  break;
 800c626:	e003      	b.n	800c630 <BIOS_Ctrl+0x2bc>

    default: break;
 800c628:	bf00      	nop
 800c62a:	e002      	b.n	800c632 <BIOS_Ctrl+0x2be>
    			  break;
 800c62c:	bf00      	nop
 800c62e:	e000      	b.n	800c632 <BIOS_Ctrl+0x2be>
                  break;
 800c630:	bf00      	nop
  }
}
 800c632:	bf00      	nop
 800c634:	3720      	adds	r7, #32
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}
 800c63a:	bf00      	nop
 800c63c:	20006b0c 	.word	0x20006b0c
 800c640:	20006a78 	.word	0x20006a78
 800c644:	200068e8 	.word	0x200068e8
 800c648:	20006b88 	.word	0x20006b88
 800c64c:	20006b6c 	.word	0x20006b6c
 800c650:	40020800 	.word	0x40020800
 800c654:	40020400 	.word	0x40020400
 800c658:	20006af8 	.word	0x20006af8
 800c65c:	20006bd0 	.word	0x20006bd0
 800c660:	20006a18 	.word	0x20006a18
 800c664:	0ffffede 	.word	0x0ffffede
 800c668:	40020000 	.word	0x40020000

0800c66c <Set_Base>:

/*******************************************************************************
 Set_Base: ˮƽɨ��ʱ��ת������
*******************************************************************************/
void Set_Base(short Base)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b082      	sub	sp, #8
 800c670:	af00      	add	r7, sp, #0
 800c672:	4603      	mov	r3, r0
 800c674:	80fb      	strh	r3, [r7, #6]
	octim1.Pulse = (ARR[Base]+1)/2;
 800c676:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c67a:	4a13      	ldr	r2, [pc, #76]	; (800c6c8 <Set_Base+0x5c>)
 800c67c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c680:	3301      	adds	r3, #1
 800c682:	0fda      	lsrs	r2, r3, #31
 800c684:	4413      	add	r3, r2
 800c686:	105b      	asrs	r3, r3, #1
 800c688:	461a      	mov	r2, r3
 800c68a:	4b10      	ldr	r3, [pc, #64]	; (800c6cc <Set_Base+0x60>)
 800c68c:	605a      	str	r2, [r3, #4]
	HAL_TIM_OC_ConfigChannel(&htim1, &octim1, 1 );
 800c68e:	2201      	movs	r2, #1
 800c690:	490e      	ldr	r1, [pc, #56]	; (800c6cc <Set_Base+0x60>)
 800c692:	480f      	ldr	r0, [pc, #60]	; (800c6d0 <Set_Base+0x64>)
 800c694:	f010 fd94 	bl	801d1c0 <HAL_TIM_OC_ConfigChannel>
	htim1.Init.Prescaler = PSC[Base];
 800c698:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c69c:	4a0d      	ldr	r2, [pc, #52]	; (800c6d4 <Set_Base+0x68>)
 800c69e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c6a2:	461a      	mov	r2, r3
 800c6a4:	4b0a      	ldr	r3, [pc, #40]	; (800c6d0 <Set_Base+0x64>)
 800c6a6:	605a      	str	r2, [r3, #4]
	htim1.Init.Period = ARR[Base];
 800c6a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c6ac:	4a06      	ldr	r2, [pc, #24]	; (800c6c8 <Set_Base+0x5c>)
 800c6ae:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	4b06      	ldr	r3, [pc, #24]	; (800c6d0 <Set_Base+0x64>)
 800c6b6:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Init(&htim1);
 800c6b8:	4805      	ldr	r0, [pc, #20]	; (800c6d0 <Set_Base+0x64>)
 800c6ba:	f010 fbb9 	bl	801ce30 <HAL_TIM_Base_Init>
}
 800c6be:	bf00      	nop
 800c6c0:	3708      	adds	r7, #8
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}
 800c6c6:	bf00      	nop
 800c6c8:	08000b30 	.word	0x08000b30
 800c6cc:	20006b6c 	.word	0x20006b6c
 800c6d0:	20006b88 	.word	0x20006b88
 800c6d4:	08000b08 	.word	0x08000b08

0800c6d8 <Set_Duty>:

/*******************************************************************************
 Set_Duty: �������ռ�ձ�����
*******************************************************************************/
void Set_Duty(void)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	af00      	add	r7, sp, #0
	 octim5.Pulse = (FARR[List[FREQ_OUT].Val]+1)*(10-List[FREQ_DUT].Val)/10;
 800c6dc:	4b0f      	ldr	r3, [pc, #60]	; (800c71c <Set_Duty+0x44>)
 800c6de:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 800c6e2:	461a      	mov	r2, r3
 800c6e4:	4b0e      	ldr	r3, [pc, #56]	; (800c720 <Set_Duty+0x48>)
 800c6e6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800c6ea:	3301      	adds	r3, #1
 800c6ec:	4a0b      	ldr	r2, [pc, #44]	; (800c71c <Set_Duty+0x44>)
 800c6ee:	f9b2 2134 	ldrsh.w	r2, [r2, #308]	; 0x134
 800c6f2:	f1c2 020a 	rsb	r2, r2, #10
 800c6f6:	fb02 f303 	mul.w	r3, r2, r3
 800c6fa:	4a0a      	ldr	r2, [pc, #40]	; (800c724 <Set_Duty+0x4c>)
 800c6fc:	fb82 1203 	smull	r1, r2, r2, r3
 800c700:	1092      	asrs	r2, r2, #2
 800c702:	17db      	asrs	r3, r3, #31
 800c704:	1ad3      	subs	r3, r2, r3
 800c706:	461a      	mov	r2, r3
 800c708:	4b07      	ldr	r3, [pc, #28]	; (800c728 <Set_Duty+0x50>)
 800c70a:	605a      	str	r2, [r3, #4]
	 HAL_TIM_OC_ConfigChannel(&htim5, &octim5, 3 );
 800c70c:	2203      	movs	r2, #3
 800c70e:	4906      	ldr	r1, [pc, #24]	; (800c728 <Set_Duty+0x50>)
 800c710:	4806      	ldr	r0, [pc, #24]	; (800c72c <Set_Duty+0x54>)
 800c712:	f010 fd55 	bl	801d1c0 <HAL_TIM_OC_ConfigChannel>
}
 800c716:	bf00      	nop
 800c718:	bd80      	pop	{r7, pc}
 800c71a:	bf00      	nop
 800c71c:	20000298 	.word	0x20000298
 800c720:	08000ae8 	.word	0x08000ae8
 800c724:	66666667 	.word	0x66666667
 800c728:	20006adc 	.word	0x20006adc
 800c72c:	20006930 	.word	0x20006930

0800c730 <Set_Fout>:

/*******************************************************************************
 Set_Fout: �������Ƶ������
*******************************************************************************/
void Set_Fout(short Range)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b082      	sub	sp, #8
 800c734:	af00      	add	r7, sp, #0
 800c736:	4603      	mov	r3, r0
 800c738:	80fb      	strh	r3, [r7, #6]
	octim5.Pulse = (FARR[Range]+1)/2;
 800c73a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c73e:	4a13      	ldr	r2, [pc, #76]	; (800c78c <Set_Fout+0x5c>)
 800c740:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c744:	3301      	adds	r3, #1
 800c746:	0fda      	lsrs	r2, r3, #31
 800c748:	4413      	add	r3, r2
 800c74a:	105b      	asrs	r3, r3, #1
 800c74c:	461a      	mov	r2, r3
 800c74e:	4b10      	ldr	r3, [pc, #64]	; (800c790 <Set_Fout+0x60>)
 800c750:	605a      	str	r2, [r3, #4]
	HAL_TIM_OC_ConfigChannel(&htim5, &octim5, 3 );
 800c752:	2203      	movs	r2, #3
 800c754:	490e      	ldr	r1, [pc, #56]	; (800c790 <Set_Fout+0x60>)
 800c756:	480f      	ldr	r0, [pc, #60]	; (800c794 <Set_Fout+0x64>)
 800c758:	f010 fd32 	bl	801d1c0 <HAL_TIM_OC_ConfigChannel>
	htim5.Init.Prescaler = FPSC[Range];
 800c75c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c760:	4a0d      	ldr	r2, [pc, #52]	; (800c798 <Set_Fout+0x68>)
 800c762:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c766:	461a      	mov	r2, r3
 800c768:	4b0a      	ldr	r3, [pc, #40]	; (800c794 <Set_Fout+0x64>)
 800c76a:	605a      	str	r2, [r3, #4]
	htim5.Init.Period = FARR[Range];
 800c76c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c770:	4a06      	ldr	r2, [pc, #24]	; (800c78c <Set_Fout+0x5c>)
 800c772:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c776:	461a      	mov	r2, r3
 800c778:	4b06      	ldr	r3, [pc, #24]	; (800c794 <Set_Fout+0x64>)
 800c77a:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Init(&htim5);
 800c77c:	4805      	ldr	r0, [pc, #20]	; (800c794 <Set_Fout+0x64>)
 800c77e:	f010 fb57 	bl	801ce30 <HAL_TIM_Base_Init>
}
 800c782:	bf00      	nop
 800c784:	3708      	adds	r7, #8
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}
 800c78a:	bf00      	nop
 800c78c:	08000ae8 	.word	0x08000ae8
 800c790:	20006adc 	.word	0x20006adc
 800c794:	20006930 	.word	0x20006930
 800c798:	08000ac8 	.word	0x08000ac8

0800c79c <ADC_Start>:

/*******************************************************************************
 ADC_Start: ���¿�ʼADCɨ�����
*******************************************************************************/
void ADC_Start(void)
{
 800c79c:	b480      	push	{r7}
 800c79e:	af00      	add	r7, sp, #0
  Sampl[0]   = List[TIM_BASE].Val;         // �������ʱ����λֵ
 800c7a0:	4b1e      	ldr	r3, [pc, #120]	; (800c81c <ADC_Start+0x80>)
 800c7a2:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 800c7a6:	4b1e      	ldr	r3, [pc, #120]	; (800c820 <ADC_Start+0x84>)
 800c7a8:	801a      	strh	r2, [r3, #0]
  __HAL_DMA_DISABLE(&hdma_adc1);  //  DMA1_Channel1->CCR   &= 0xFFFFFFFFE;
 800c7aa:	4b1e      	ldr	r3, [pc, #120]	; (800c824 <ADC_Start+0x88>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	681a      	ldr	r2, [r3, #0]
 800c7b0:	4b1c      	ldr	r3, [pc, #112]	; (800c824 <ADC_Start+0x88>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	f022 0201 	bic.w	r2, r2, #1
 800c7b8:	601a      	str	r2, [r3, #0]
//  DMA1_Channel1->CMAR  = (u32)&Sampl[2];             // �����趨DMAͨ��1
  if(( List[SYNCMODE].Val == NONE|| List[SYNCMODE].Val == SCAN)
 800c7ba:	4b18      	ldr	r3, [pc, #96]	; (800c81c <ADC_Start+0x80>)
 800c7bc:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 800c7c0:	2b05      	cmp	r3, #5
 800c7c2:	d004      	beq.n	800c7ce <ADC_Start+0x32>
 800c7c4:	4b15      	ldr	r3, [pc, #84]	; (800c81c <ADC_Start+0x80>)
 800c7c6:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 800c7ca:	2b01      	cmp	r3, #1
 800c7cc:	d10e      	bne.n	800c7ec <ADC_Start+0x50>
     &&( List[TIM_BASE].Val>11))
 800c7ce:	4b13      	ldr	r3, [pc, #76]	; (800c81c <ADC_Start+0x80>)
 800c7d0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c7d4:	2b0b      	cmp	r3, #11
 800c7d6:	dd09      	ble.n	800c7ec <ADC_Start+0x50>
  {
	  __HAL_DMA_SET_COUNTER(&hdma_adc1, 302);//       DMA1_Channel1->CNDTR  = 302;                       //10ms
 800c7d8:	4b12      	ldr	r3, [pc, #72]	; (800c824 <ADC_Start+0x88>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800c7e0:	605a      	str	r2, [r3, #4]
       List[VIEWPOSI].Val= 0;
 800c7e2:	4b0e      	ldr	r3, [pc, #56]	; (800c81c <ADC_Start+0x80>)
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800c7ea:	e00a      	b.n	800c802 <ADC_Start+0x66>
     }
  else
  __HAL_DMA_SET_COUNTER(&hdma_adc1, DEPTH[List[SMPL_DPTH].Val]);//    DMA1_Channel1->CNDTR = DEPTH[List[SMPL_DPTH].Val]; // 0x00001000;
 800c7ec:	4b0b      	ldr	r3, [pc, #44]	; (800c81c <ADC_Start+0x80>)
 800c7ee:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800c7f2:	461a      	mov	r2, r3
 800c7f4:	4b0c      	ldr	r3, [pc, #48]	; (800c828 <ADC_Start+0x8c>)
 800c7f6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800c7fa:	b29a      	uxth	r2, r3
 800c7fc:	4b09      	ldr	r3, [pc, #36]	; (800c824 <ADC_Start+0x88>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	605a      	str	r2, [r3, #4]
  __HAL_DMA_ENABLE(&hdma_adc1);  //  DMA1_Channel1->CCR  |= 0x00000001;                 // ���¿�ʼɨ�����
 800c802:	4b08      	ldr	r3, [pc, #32]	; (800c824 <ADC_Start+0x88>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	681a      	ldr	r2, [r3, #0]
 800c808:	4b06      	ldr	r3, [pc, #24]	; (800c824 <ADC_Start+0x88>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	f042 0201 	orr.w	r2, r2, #1
 800c810:	601a      	str	r2, [r3, #0]
}
 800c812:	bf00      	nop
 800c814:	46bd      	mov	sp, r7
 800c816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81a:	4770      	bx	lr
 800c81c:	20000298 	.word	0x20000298
 800c820:	20002870 	.word	0x20002870
 800c824:	20006b0c 	.word	0x20006b0c
 800c828:	08002270 	.word	0x08002270

0800c82c <touchscan>:

//touchscan -- maps touch to key codes  returns 0 if no change
char touchscan()
{
 800c82c:	b480      	push	{r7}
 800c82e:	b083      	sub	sp, #12
 800c830:	af00      	add	r7, sp, #0
	short x,y;
	char code;

	code =0;
 800c832:	2300      	movs	r3, #0
 800c834:	71fb      	strb	r3, [r7, #7]

	return code;
 800c836:	79fb      	ldrb	r3, [r7, #7]
}
 800c838:	4618      	mov	r0, r3
 800c83a:	370c      	adds	r7, #12
 800c83c:	46bd      	mov	sp, r7
 800c83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c842:	4770      	bx	lr

0800c844 <Tim3_ISP>:

/*******************************************************************************
* Tim3�жϴ������
*******************************************************************************/
void Tim3_ISP(void)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b082      	sub	sp, #8
 800c848:	af00      	add	r7, sp, #0

	char checkpress;
    char KeyCode;

//  TIM3->SR = 0;          //moved to main //���жϱ�־
  if(KeymS_F)KeymS_Cnt++;                  //�������ʱ
 800c84a:	4b73      	ldr	r3, [pc, #460]	; (800ca18 <Tim3_ISP+0x1d4>)
 800c84c:	781b      	ldrb	r3, [r3, #0]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d008      	beq.n	800c864 <Tim3_ISP+0x20>
 800c852:	4b72      	ldr	r3, [pc, #456]	; (800ca1c <Tim3_ISP+0x1d8>)
 800c854:	881b      	ldrh	r3, [r3, #0]
 800c856:	b21b      	sxth	r3, r3
 800c858:	b29b      	uxth	r3, r3
 800c85a:	3301      	adds	r3, #1
 800c85c:	b29b      	uxth	r3, r3
 800c85e:	b21a      	sxth	r2, r3
 800c860:	4b6e      	ldr	r3, [pc, #440]	; (800ca1c <Tim3_ISP+0x1d8>)
 800c862:	801a      	strh	r2, [r3, #0]
  Tim_Cnt++;
 800c864:	4b6e      	ldr	r3, [pc, #440]	; (800ca20 <Tim3_ISP+0x1dc>)
 800c866:	881b      	ldrh	r3, [r3, #0]
 800c868:	b21b      	sxth	r3, r3
 800c86a:	b29b      	uxth	r3, r3
 800c86c:	3301      	adds	r3, #1
 800c86e:	b29b      	uxth	r3, r3
 800c870:	b21a      	sxth	r2, r3
 800c872:	4b6b      	ldr	r3, [pc, #428]	; (800ca20 <Tim3_ISP+0x1dc>)
 800c874:	801a      	strh	r2, [r3, #0]
  if(Delay_Cnt>0) Delay_Cnt--;
 800c876:	4b6b      	ldr	r3, [pc, #428]	; (800ca24 <Tim3_ISP+0x1e0>)
 800c878:	881b      	ldrh	r3, [r3, #0]
 800c87a:	b21b      	sxth	r3, r3
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	dd08      	ble.n	800c892 <Tim3_ISP+0x4e>
 800c880:	4b68      	ldr	r3, [pc, #416]	; (800ca24 <Tim3_ISP+0x1e0>)
 800c882:	881b      	ldrh	r3, [r3, #0]
 800c884:	b21b      	sxth	r3, r3
 800c886:	b29b      	uxth	r3, r3
 800c888:	3b01      	subs	r3, #1
 800c88a:	b29b      	uxth	r3, r3
 800c88c:	b21a      	sxth	r2, r3
 800c88e:	4b65      	ldr	r3, [pc, #404]	; (800ca24 <Tim3_ISP+0x1e0>)
 800c890:	801a      	strh	r2, [r3, #0]
  if (mS_Cnt > 0)
 800c892:	4b65      	ldr	r3, [pc, #404]	; (800ca28 <Tim3_ISP+0x1e4>)
 800c894:	881b      	ldrh	r3, [r3, #0]
 800c896:	b21b      	sxth	r3, r3
 800c898:	2b00      	cmp	r3, #0
 800c89a:	f340 8081 	ble.w	800c9a0 <Tim3_ISP+0x15c>
  {
    mS_Cnt--;
 800c89e:	4b62      	ldr	r3, [pc, #392]	; (800ca28 <Tim3_ISP+0x1e4>)
 800c8a0:	881b      	ldrh	r3, [r3, #0]
 800c8a2:	b21b      	sxth	r3, r3
 800c8a4:	b29b      	uxth	r3, r3
 800c8a6:	3b01      	subs	r3, #1
 800c8a8:	b29b      	uxth	r3, r3
 800c8aa:	b21a      	sxth	r2, r3
 800c8ac:	4b5e      	ldr	r3, [pc, #376]	; (800ca28 <Tim3_ISP+0x1e4>)
 800c8ae:	801a      	strh	r2, [r3, #0]
    if ((mS_Cnt%20)== 0)
 800c8b0:	4b5d      	ldr	r3, [pc, #372]	; (800ca28 <Tim3_ISP+0x1e4>)
 800c8b2:	881b      	ldrh	r3, [r3, #0]
 800c8b4:	b21a      	sxth	r2, r3
 800c8b6:	4b5d      	ldr	r3, [pc, #372]	; (800ca2c <Tim3_ISP+0x1e8>)
 800c8b8:	fb83 1302 	smull	r1, r3, r3, r2
 800c8bc:	10d9      	asrs	r1, r3, #3
 800c8be:	17d3      	asrs	r3, r2, #31
 800c8c0:	1ac9      	subs	r1, r1, r3
 800c8c2:	460b      	mov	r3, r1
 800c8c4:	009b      	lsls	r3, r3, #2
 800c8c6:	440b      	add	r3, r1
 800c8c8:	009b      	lsls	r3, r3, #2
 800c8ca:	1ad3      	subs	r3, r2, r3
 800c8cc:	b21b      	sxth	r3, r3
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	f040 809d 	bne.w	800ca0e <Tim3_ISP+0x1ca>
    {                 //  20mS  ÿ20mS��1�μ���
    	if(Key_Wait_Cnt)    Key_Wait_Cnt--;
 800c8d4:	4b56      	ldr	r3, [pc, #344]	; (800ca30 <Tim3_ISP+0x1ec>)
 800c8d6:	781b      	ldrb	r3, [r3, #0]
 800c8d8:	b2db      	uxtb	r3, r3
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d006      	beq.n	800c8ec <Tim3_ISP+0xa8>
 800c8de:	4b54      	ldr	r3, [pc, #336]	; (800ca30 <Tim3_ISP+0x1ec>)
 800c8e0:	781b      	ldrb	r3, [r3, #0]
 800c8e2:	b2db      	uxtb	r3, r3
 800c8e4:	3b01      	subs	r3, #1
 800c8e6:	b2da      	uxtb	r2, r3
 800c8e8:	4b51      	ldr	r3, [pc, #324]	; (800ca30 <Tim3_ISP+0x1ec>)
 800c8ea:	701a      	strb	r2, [r3, #0]
    	if(Key_Repeat_Cnt)  Key_Repeat_Cnt--;
 800c8ec:	4b51      	ldr	r3, [pc, #324]	; (800ca34 <Tim3_ISP+0x1f0>)
 800c8ee:	781b      	ldrb	r3, [r3, #0]
 800c8f0:	b2db      	uxtb	r3, r3
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d006      	beq.n	800c904 <Tim3_ISP+0xc0>
 800c8f6:	4b4f      	ldr	r3, [pc, #316]	; (800ca34 <Tim3_ISP+0x1f0>)
 800c8f8:	781b      	ldrb	r3, [r3, #0]
 800c8fa:	b2db      	uxtb	r3, r3
 800c8fc:	3b01      	subs	r3, #1
 800c8fe:	b2da      	uxtb	r2, r3
 800c900:	4b4c      	ldr	r3, [pc, #304]	; (800ca34 <Tim3_ISP+0x1f0>)
 800c902:	701a      	strb	r2, [r3, #0]
    	KeyCode = checkpress =0 ;
 800c904:	2300      	movs	r3, #0
 800c906:	71fb      	strb	r3, [r7, #7]
 800c908:	79fb      	ldrb	r3, [r7, #7]
 800c90a:	71bb      	strb	r3, [r7, #6]
    	Touch = HAL_GPIO_ReadPin(TpI_GPIO_Port, TpI_Pin);  //read pen
 800c90c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c910:	4849      	ldr	r0, [pc, #292]	; (800ca38 <Tim3_ISP+0x1f4>)
 800c912:	f00d f925 	bl	8019b60 <HAL_GPIO_ReadPin>
 800c916:	4603      	mov	r3, r0
 800c918:	461a      	mov	r2, r3
 800c91a:	4b48      	ldr	r3, [pc, #288]	; (800ca3c <Tim3_ISP+0x1f8>)
 800c91c:	701a      	strb	r2, [r3, #0]
    	if (Touch != LastTouch)
 800c91e:	4b47      	ldr	r3, [pc, #284]	; (800ca3c <Tim3_ISP+0x1f8>)
 800c920:	781a      	ldrb	r2, [r3, #0]
 800c922:	4b47      	ldr	r3, [pc, #284]	; (800ca40 <Tim3_ISP+0x1fc>)
 800c924:	781b      	ldrb	r3, [r3, #0]
 800c926:	429a      	cmp	r2, r3
 800c928:	d006      	beq.n	800c938 <Tim3_ISP+0xf4>
    	{
    	// pen changed
    		checkpress =1; //check pressure if pen changed
 800c92a:	2301      	movs	r3, #1
 800c92c:	71fb      	strb	r3, [r7, #7]
    		LastTouch = Touch;
 800c92e:	4b43      	ldr	r3, [pc, #268]	; (800ca3c <Tim3_ISP+0x1f8>)
 800c930:	781a      	ldrb	r2, [r3, #0]
 800c932:	4b43      	ldr	r3, [pc, #268]	; (800ca40 <Tim3_ISP+0x1fc>)
 800c934:	701a      	strb	r2, [r3, #0]
 800c936:	e005      	b.n	800c944 <Tim3_ISP+0x100>
    	}
    	else
    	{
    	  if(Touch != 0)
 800c938:	4b40      	ldr	r3, [pc, #256]	; (800ca3c <Tim3_ISP+0x1f8>)
 800c93a:	781b      	ldrb	r3, [r3, #0]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d001      	beq.n	800c944 <Tim3_ISP+0x100>
    	  {
    	    //check that press is valid
    		checkpress =1;
 800c940:	2301      	movs	r3, #1
 800c942:	71fb      	strb	r3, [r7, #7]
    	  }
    	}

    	if(checkpress !=0)
 800c944:	79fb      	ldrb	r3, [r7, #7]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d003      	beq.n	800c952 <Tim3_ISP+0x10e>
    	{
    		KeyCode = touchscan();
 800c94a:	f7ff ff6f 	bl	800c82c <touchscan>
 800c94e:	4603      	mov	r3, r0
 800c950:	71bb      	strb	r3, [r7, #6]
       	}
//      KeyCode = KeyScan();
      if(KeyCode !=0) Key_Buffer = KeyCode;
 800c952:	79bb      	ldrb	r3, [r7, #6]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d002      	beq.n	800c95e <Tim3_ISP+0x11a>
 800c958:	4a3a      	ldr	r2, [pc, #232]	; (800ca44 <Tim3_ISP+0x200>)
 800c95a:	79bb      	ldrb	r3, [r7, #6]
 800c95c:	7013      	strb	r3, [r2, #0]

      if(Cursor_Cnt >0)
 800c95e:	4b3a      	ldr	r3, [pc, #232]	; (800ca48 <Tim3_ISP+0x204>)
 800c960:	881b      	ldrh	r3, [r3, #0]
 800c962:	b21b      	sxth	r3, r3
 800c964:	2b00      	cmp	r3, #0
 800c966:	dd09      	ble.n	800c97c <Tim3_ISP+0x138>
    	  Cursor_Cnt--;
 800c968:	4b37      	ldr	r3, [pc, #220]	; (800ca48 <Tim3_ISP+0x204>)
 800c96a:	881b      	ldrh	r3, [r3, #0]
 800c96c:	b21b      	sxth	r3, r3
 800c96e:	b29b      	uxth	r3, r3
 800c970:	3b01      	subs	r3, #1
 800c972:	b29b      	uxth	r3, r3
 800c974:	b21a      	sxth	r2, r3
 800c976:	4b34      	ldr	r3, [pc, #208]	; (800ca48 <Tim3_ISP+0x204>)
 800c978:	801a      	strh	r2, [r3, #0]
        Windows_Pop = 0;
        Clr_WavePosi(DAR);
      }
    }
  }
}
 800c97a:	e048      	b.n	800ca0e <Tim3_ISP+0x1ca>
        Cursor_Cnt = 12;                  // 12*20mS=240mS
 800c97c:	4b32      	ldr	r3, [pc, #200]	; (800ca48 <Tim3_ISP+0x204>)
 800c97e:	220c      	movs	r2, #12
 800c980:	801a      	strh	r2, [r3, #0]
        Twink = !Twink;
 800c982:	4b32      	ldr	r3, [pc, #200]	; (800ca4c <Tim3_ISP+0x208>)
 800c984:	781b      	ldrb	r3, [r3, #0]
 800c986:	b2db      	uxtb	r3, r3
 800c988:	2b00      	cmp	r3, #0
 800c98a:	bf0c      	ite	eq
 800c98c:	2301      	moveq	r3, #1
 800c98e:	2300      	movne	r3, #0
 800c990:	b2db      	uxtb	r3, r3
 800c992:	461a      	mov	r2, r3
 800c994:	4b2d      	ldr	r3, [pc, #180]	; (800ca4c <Tim3_ISP+0x208>)
 800c996:	701a      	strb	r2, [r3, #0]
        Blink =  BLINK;
 800c998:	4b2d      	ldr	r3, [pc, #180]	; (800ca50 <Tim3_ISP+0x20c>)
 800c99a:	2201      	movs	r2, #1
 800c99c:	701a      	strb	r2, [r3, #0]
}
 800c99e:	e036      	b.n	800ca0e <Tim3_ISP+0x1ca>
    mS_Cnt = 1000;
 800c9a0:	4b21      	ldr	r3, [pc, #132]	; (800ca28 <Tim3_ISP+0x1e4>)
 800c9a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c9a6:	801a      	strh	r2, [r3, #0]
    if((List[STANDBY].Val !=0) && (StdBy_Time > 0))
 800c9a8:	4b2a      	ldr	r3, [pc, #168]	; (800ca54 <Tim3_ISP+0x210>)
 800c9aa:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d00d      	beq.n	800c9ce <Tim3_ISP+0x18a>
 800c9b2:	4b29      	ldr	r3, [pc, #164]	; (800ca58 <Tim3_ISP+0x214>)
 800c9b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	dd08      	ble.n	800c9ce <Tim3_ISP+0x18a>
      StdBy_Time--;      //������ʱ
 800c9bc:	4b26      	ldr	r3, [pc, #152]	; (800ca58 <Tim3_ISP+0x214>)
 800c9be:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c9c2:	b29b      	uxth	r3, r3
 800c9c4:	3b01      	subs	r3, #1
 800c9c6:	b29b      	uxth	r3, r3
 800c9c8:	b21a      	sxth	r2, r3
 800c9ca:	4b23      	ldr	r3, [pc, #140]	; (800ca58 <Tim3_ISP+0x214>)
 800c9cc:	801a      	strh	r2, [r3, #0]
    if(PopupCnt > 0)
 800c9ce:	4b23      	ldr	r3, [pc, #140]	; (800ca5c <Tim3_ISP+0x218>)
 800c9d0:	881b      	ldrh	r3, [r3, #0]
 800c9d2:	b21b      	sxth	r3, r3
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	dd0d      	ble.n	800c9f4 <Tim3_ISP+0x1b0>
      if(Cal_Flag == 0)
 800c9d8:	4b21      	ldr	r3, [pc, #132]	; (800ca60 <Tim3_ISP+0x21c>)
 800c9da:	781b      	ldrb	r3, [r3, #0]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d116      	bne.n	800ca0e <Tim3_ISP+0x1ca>
    	  PopupCnt--;
 800c9e0:	4b1e      	ldr	r3, [pc, #120]	; (800ca5c <Tim3_ISP+0x218>)
 800c9e2:	881b      	ldrh	r3, [r3, #0]
 800c9e4:	b21b      	sxth	r3, r3
 800c9e6:	b29b      	uxth	r3, r3
 800c9e8:	3b01      	subs	r3, #1
 800c9ea:	b29b      	uxth	r3, r3
 800c9ec:	b21a      	sxth	r2, r3
 800c9ee:	4b1b      	ldr	r3, [pc, #108]	; (800ca5c <Tim3_ISP+0x218>)
 800c9f0:	801a      	strh	r2, [r3, #0]
}
 800c9f2:	e00c      	b.n	800ca0e <Tim3_ISP+0x1ca>
      Close_Pop();        // �رնԻ���
 800c9f4:	f001 ff04 	bl	800e800 <Close_Pop>
      if(Windows_Pop)
 800c9f8:	4b1a      	ldr	r3, [pc, #104]	; (800ca64 <Tim3_ISP+0x220>)
 800c9fa:	781b      	ldrb	r3, [r3, #0]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d006      	beq.n	800ca0e <Tim3_ISP+0x1ca>
        Windows_Pop = 0;
 800ca00:	4b18      	ldr	r3, [pc, #96]	; (800ca64 <Tim3_ISP+0x220>)
 800ca02:	2200      	movs	r2, #0
 800ca04:	701a      	strb	r2, [r3, #0]
        Clr_WavePosi(DAR);
 800ca06:	f643 10e7 	movw	r0, #14823	; 0x39e7
 800ca0a:	f007 fe63 	bl	80146d4 <Clr_WavePosi>
}
 800ca0e:	bf00      	nop
 800ca10:	3708      	adds	r7, #8
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}
 800ca16:	bf00      	nop
 800ca18:	20000786 	.word	0x20000786
 800ca1c:	20000a32 	.word	0x20000a32
 800ca20:	20000a34 	.word	0x20000a34
 800ca24:	20000784 	.word	0x20000784
 800ca28:	20000782 	.word	0x20000782
 800ca2c:	66666667 	.word	0x66666667
 800ca30:	20000788 	.word	0x20000788
 800ca34:	20000787 	.word	0x20000787
 800ca38:	40020400 	.word	0x40020400
 800ca3c:	20000a30 	.word	0x20000a30
 800ca40:	20000789 	.word	0x20000789
 800ca44:	2000077d 	.word	0x2000077d
 800ca48:	20000780 	.word	0x20000780
 800ca4c:	2000077c 	.word	0x2000077c
 800ca50:	20000a31 	.word	0x20000a31
 800ca54:	20000298 	.word	0x20000298
 800ca58:	2000079c 	.word	0x2000079c
 800ca5c:	20000000 	.word	0x20000000
 800ca60:	200001b4 	.word	0x200001b4
 800ca64:	200007a6 	.word	0x200007a6

0800ca68 <Fill_Base>:
 800ca68:	b480      	push	{r7}
 800ca6a:	af00      	add	r7, sp, #0
 800ca6c:	4b12      	ldr	r3, [pc, #72]	; (800cab8 <Fill_Base+0x50>)
 800ca6e:	4a13      	ldr	r2, [pc, #76]	; (800cabc <Fill_Base+0x54>)
 800ca70:	601a      	str	r2, [r3, #0]
 800ca72:	4b13      	ldr	r3, [pc, #76]	; (800cac0 <Fill_Base+0x58>)
 800ca74:	2266      	movs	r2, #102	; 0x66
 800ca76:	601a      	str	r2, [r3, #0]
 800ca78:	4b0f      	ldr	r3, [pc, #60]	; (800cab8 <Fill_Base+0x50>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	4a11      	ldr	r2, [pc, #68]	; (800cac4 <Fill_Base+0x5c>)
 800ca7e:	6812      	ldr	r2, [r2, #0]
 800ca80:	601a      	str	r2, [r3, #0]
 800ca82:	4b0d      	ldr	r3, [pc, #52]	; (800cab8 <Fill_Base+0x50>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	3304      	adds	r3, #4
 800ca88:	4a0b      	ldr	r2, [pc, #44]	; (800cab8 <Fill_Base+0x50>)
 800ca8a:	6013      	str	r3, [r2, #0]
 800ca8c:	4b0c      	ldr	r3, [pc, #48]	; (800cac0 <Fill_Base+0x58>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	3b01      	subs	r3, #1
 800ca92:	4a0b      	ldr	r2, [pc, #44]	; (800cac0 <Fill_Base+0x58>)
 800ca94:	6013      	str	r3, [r2, #0]
 800ca96:	4b0a      	ldr	r3, [pc, #40]	; (800cac0 <Fill_Base+0x58>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d000      	beq.n	800caa0 <Fill_Base+0x38>
 800ca9e:	e7eb      	b.n	800ca78 <Fill_Base+0x10>
 800caa0:	4b05      	ldr	r3, [pc, #20]	; (800cab8 <Fill_Base+0x50>)
 800caa2:	4a09      	ldr	r2, [pc, #36]	; (800cac8 <Fill_Base+0x60>)
 800caa4:	601a      	str	r2, [r3, #0]
 800caa6:	4b07      	ldr	r3, [pc, #28]	; (800cac4 <Fill_Base+0x5c>)
 800caa8:	f647 32ef 	movw	r2, #31727	; 0x7bef
 800caac:	601a      	str	r2, [r3, #0]
 800caae:	bf00      	nop
 800cab0:	46bd      	mov	sp, r7
 800cab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab6:	4770      	bx	lr
 800cab8:	20000bec 	.word	0x20000bec
 800cabc:	20000be0 	.word	0x20000be0
 800cac0:	20000a3c 	.word	0x20000a3c
 800cac4:	20000a40 	.word	0x20000a40
 800cac8:	20000bde 	.word	0x20000bde

0800cacc <Buld_0>:
 800cacc:	b580      	push	{r7, lr}
 800cace:	af00      	add	r7, sp, #0
 800cad0:	4b03      	ldr	r3, [pc, #12]	; (800cae0 <Buld_0+0x14>)
 800cad2:	2200      	movs	r2, #0
 800cad4:	601a      	str	r2, [r3, #0]
 800cad6:	f7ff ffc7 	bl	800ca68 <Fill_Base>
 800cada:	bf00      	nop
 800cadc:	bd80      	pop	{r7, pc}
 800cade:	bf00      	nop
 800cae0:	20000a40 	.word	0x20000a40

0800cae4 <Buld_1>:
 800cae4:	b580      	push	{r7, lr}
 800cae6:	af00      	add	r7, sp, #0
 800cae8:	4b0e      	ldr	r3, [pc, #56]	; (800cb24 <Buld_1+0x40>)
 800caea:	4a0f      	ldr	r2, [pc, #60]	; (800cb28 <Buld_1+0x44>)
 800caec:	601a      	str	r2, [r3, #0]
 800caee:	f7ff ffbb 	bl	800ca68 <Fill_Base>
 800caf2:	4b0c      	ldr	r3, [pc, #48]	; (800cb24 <Buld_1+0x40>)
 800caf4:	2200      	movs	r2, #0
 800caf6:	601a      	str	r2, [r3, #0]
 800caf8:	4b0c      	ldr	r3, [pc, #48]	; (800cb2c <Buld_1+0x48>)
 800cafa:	f44f 72c9 	mov.w	r2, #402	; 0x192
 800cafe:	601a      	str	r2, [r3, #0]
 800cb00:	4b08      	ldr	r3, [pc, #32]	; (800cb24 <Buld_1+0x40>)
 800cb02:	6819      	ldr	r1, [r3, #0]
 800cb04:	4b0a      	ldr	r3, [pc, #40]	; (800cb30 <Buld_1+0x4c>)
 800cb06:	681a      	ldr	r2, [r3, #0]
 800cb08:	4b08      	ldr	r3, [pc, #32]	; (800cb2c <Buld_1+0x48>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	4413      	add	r3, r2
 800cb0e:	b28a      	uxth	r2, r1
 800cb10:	801a      	strh	r2, [r3, #0]
 800cb12:	4b04      	ldr	r3, [pc, #16]	; (800cb24 <Buld_1+0x40>)
 800cb14:	681a      	ldr	r2, [r3, #0]
 800cb16:	4b06      	ldr	r3, [pc, #24]	; (800cb30 <Buld_1+0x4c>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	3b02      	subs	r3, #2
 800cb1c:	b292      	uxth	r2, r2
 800cb1e:	801a      	strh	r2, [r3, #0]
 800cb20:	bf00      	nop
 800cb22:	bd80      	pop	{r7, pc}
 800cb24:	20000a40 	.word	0x20000a40
 800cb28:	7bef7bef 	.word	0x7bef7bef
 800cb2c:	20000a3c 	.word	0x20000a3c
 800cb30:	20000bec 	.word	0x20000bec

0800cb34 <Buld_2>:
 800cb34:	b580      	push	{r7, lr}
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	4b0c      	ldr	r3, [pc, #48]	; (800cb6c <Buld_2+0x38>)
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	601a      	str	r2, [r3, #0]
 800cb3e:	f7ff ff93 	bl	800ca68 <Fill_Base>
 800cb42:	4b0b      	ldr	r3, [pc, #44]	; (800cb70 <Buld_2+0x3c>)
 800cb44:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800cb48:	601a      	str	r2, [r3, #0]
 800cb4a:	4b08      	ldr	r3, [pc, #32]	; (800cb6c <Buld_2+0x38>)
 800cb4c:	6819      	ldr	r1, [r3, #0]
 800cb4e:	4b09      	ldr	r3, [pc, #36]	; (800cb74 <Buld_2+0x40>)
 800cb50:	681a      	ldr	r2, [r3, #0]
 800cb52:	4b07      	ldr	r3, [pc, #28]	; (800cb70 <Buld_2+0x3c>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	4413      	add	r3, r2
 800cb58:	b28a      	uxth	r2, r1
 800cb5a:	801a      	strh	r2, [r3, #0]
 800cb5c:	4b03      	ldr	r3, [pc, #12]	; (800cb6c <Buld_2+0x38>)
 800cb5e:	681a      	ldr	r2, [r3, #0]
 800cb60:	4b04      	ldr	r3, [pc, #16]	; (800cb74 <Buld_2+0x40>)
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	b292      	uxth	r2, r2
 800cb66:	801a      	strh	r2, [r3, #0]
 800cb68:	bf00      	nop
 800cb6a:	bd80      	pop	{r7, pc}
 800cb6c:	20000a40 	.word	0x20000a40
 800cb70:	20000a3c 	.word	0x20000a3c
 800cb74:	20000bec 	.word	0x20000bec

0800cb78 <Buld_3>:
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	af00      	add	r7, sp, #0
 800cb7c:	4b0e      	ldr	r3, [pc, #56]	; (800cbb8 <Buld_3+0x40>)
 800cb7e:	2200      	movs	r2, #0
 800cb80:	601a      	str	r2, [r3, #0]
 800cb82:	f7ff ff71 	bl	800ca68 <Fill_Base>
 800cb86:	4b0d      	ldr	r3, [pc, #52]	; (800cbbc <Buld_3+0x44>)
 800cb88:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 800cb8c:	601a      	str	r2, [r3, #0]
 800cb8e:	4b0b      	ldr	r3, [pc, #44]	; (800cbbc <Buld_3+0x44>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	3b32      	subs	r3, #50	; 0x32
 800cb94:	4a09      	ldr	r2, [pc, #36]	; (800cbbc <Buld_3+0x44>)
 800cb96:	6013      	str	r3, [r2, #0]
 800cb98:	4b07      	ldr	r3, [pc, #28]	; (800cbb8 <Buld_3+0x40>)
 800cb9a:	6819      	ldr	r1, [r3, #0]
 800cb9c:	4b08      	ldr	r3, [pc, #32]	; (800cbc0 <Buld_3+0x48>)
 800cb9e:	681a      	ldr	r2, [r3, #0]
 800cba0:	4b06      	ldr	r3, [pc, #24]	; (800cbbc <Buld_3+0x44>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	4413      	add	r3, r2
 800cba6:	b28a      	uxth	r2, r1
 800cba8:	801a      	strh	r2, [r3, #0]
 800cbaa:	4b04      	ldr	r3, [pc, #16]	; (800cbbc <Buld_3+0x44>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d000      	beq.n	800cbb4 <Buld_3+0x3c>
 800cbb2:	e7ec      	b.n	800cb8e <Buld_3+0x16>
 800cbb4:	bf00      	nop
 800cbb6:	bd80      	pop	{r7, pc}
 800cbb8:	20000a40 	.word	0x20000a40
 800cbbc:	20000a3c 	.word	0x20000a3c
 800cbc0:	20000bec 	.word	0x20000bec

0800cbc4 <Buld_4>:
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	af00      	add	r7, sp, #0
 800cbc8:	4b0e      	ldr	r3, [pc, #56]	; (800cc04 <Buld_4+0x40>)
 800cbca:	2200      	movs	r2, #0
 800cbcc:	601a      	str	r2, [r3, #0]
 800cbce:	f7ff ff4b 	bl	800ca68 <Fill_Base>
 800cbd2:	4b0d      	ldr	r3, [pc, #52]	; (800cc08 <Buld_4+0x44>)
 800cbd4:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 800cbd8:	601a      	str	r2, [r3, #0]
 800cbda:	4b0b      	ldr	r3, [pc, #44]	; (800cc08 <Buld_4+0x44>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	3b0a      	subs	r3, #10
 800cbe0:	4a09      	ldr	r2, [pc, #36]	; (800cc08 <Buld_4+0x44>)
 800cbe2:	6013      	str	r3, [r2, #0]
 800cbe4:	4b07      	ldr	r3, [pc, #28]	; (800cc04 <Buld_4+0x40>)
 800cbe6:	6819      	ldr	r1, [r3, #0]
 800cbe8:	4b08      	ldr	r3, [pc, #32]	; (800cc0c <Buld_4+0x48>)
 800cbea:	681a      	ldr	r2, [r3, #0]
 800cbec:	4b06      	ldr	r3, [pc, #24]	; (800cc08 <Buld_4+0x44>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	4413      	add	r3, r2
 800cbf2:	b28a      	uxth	r2, r1
 800cbf4:	801a      	strh	r2, [r3, #0]
 800cbf6:	4b04      	ldr	r3, [pc, #16]	; (800cc08 <Buld_4+0x44>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d000      	beq.n	800cc00 <Buld_4+0x3c>
 800cbfe:	e7ec      	b.n	800cbda <Buld_4+0x16>
 800cc00:	bf00      	nop
 800cc02:	bd80      	pop	{r7, pc}
 800cc04:	20000a40 	.word	0x20000a40
 800cc08:	20000a3c 	.word	0x20000a3c
 800cc0c:	20000bec 	.word	0x20000bec

0800cc10 <Draw_Digit_Analog>:
 800cc10:	b480      	push	{r7}
 800cc12:	b083      	sub	sp, #12
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	4603      	mov	r3, r0
 800cc18:	80fb      	strh	r3, [r7, #6]
 800cc1a:	88fb      	ldrh	r3, [r7, #6]
 800cc1c:	2b01      	cmp	r3, #1
 800cc1e:	d144      	bne.n	800ccaa <Draw_Digit_Analog+0x9a>
 800cc20:	4b7d      	ldr	r3, [pc, #500]	; (800ce18 <Draw_Digit_Analog+0x208>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	f503 7361 	add.w	r3, r3, #900	; 0x384
 800cc28:	4a7c      	ldr	r2, [pc, #496]	; (800ce1c <Draw_Digit_Analog+0x20c>)
 800cc2a:	6013      	str	r3, [r2, #0]
 800cc2c:	4b7b      	ldr	r3, [pc, #492]	; (800ce1c <Draw_Digit_Analog+0x20c>)
 800cc2e:	681a      	ldr	r2, [r3, #0]
 800cc30:	4b7b      	ldr	r3, [pc, #492]	; (800ce20 <Draw_Digit_Analog+0x210>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	4413      	add	r3, r2
 800cc36:	4a79      	ldr	r2, [pc, #484]	; (800ce1c <Draw_Digit_Analog+0x20c>)
 800cc38:	6013      	str	r3, [r2, #0]
 800cc3a:	4b78      	ldr	r3, [pc, #480]	; (800ce1c <Draw_Digit_Analog+0x20c>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	781b      	ldrb	r3, [r3, #0]
 800cc40:	461a      	mov	r2, r3
 800cc42:	4b78      	ldr	r3, [pc, #480]	; (800ce24 <Draw_Digit_Analog+0x214>)
 800cc44:	601a      	str	r2, [r3, #0]
 800cc46:	4b75      	ldr	r3, [pc, #468]	; (800ce1c <Draw_Digit_Analog+0x20c>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	3b01      	subs	r3, #1
 800cc4c:	781b      	ldrb	r3, [r3, #0]
 800cc4e:	461a      	mov	r2, r3
 800cc50:	4b75      	ldr	r3, [pc, #468]	; (800ce28 <Draw_Digit_Analog+0x218>)
 800cc52:	601a      	str	r2, [r3, #0]
 800cc54:	4b75      	ldr	r3, [pc, #468]	; (800ce2c <Draw_Digit_Analog+0x21c>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	085b      	lsrs	r3, r3, #1
 800cc5a:	4a74      	ldr	r2, [pc, #464]	; (800ce2c <Draw_Digit_Analog+0x21c>)
 800cc5c:	6013      	str	r3, [r2, #0]
 800cc5e:	4b71      	ldr	r3, [pc, #452]	; (800ce24 <Draw_Digit_Analog+0x214>)
 800cc60:	681a      	ldr	r2, [r3, #0]
 800cc62:	4b73      	ldr	r3, [pc, #460]	; (800ce30 <Draw_Digit_Analog+0x220>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	4013      	ands	r3, r2
 800cc68:	4a6e      	ldr	r2, [pc, #440]	; (800ce24 <Draw_Digit_Analog+0x214>)
 800cc6a:	6013      	str	r3, [r2, #0]
 800cc6c:	4b6d      	ldr	r3, [pc, #436]	; (800ce24 <Draw_Digit_Analog+0x214>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d104      	bne.n	800cc7e <Draw_Digit_Analog+0x6e>
 800cc74:	4b6d      	ldr	r3, [pc, #436]	; (800ce2c <Draw_Digit_Analog+0x21c>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	4a6a      	ldr	r2, [pc, #424]	; (800ce24 <Draw_Digit_Analog+0x214>)
 800cc7a:	6013      	str	r3, [r2, #0]
 800cc7c:	e004      	b.n	800cc88 <Draw_Digit_Analog+0x78>
 800cc7e:	4b6b      	ldr	r3, [pc, #428]	; (800ce2c <Draw_Digit_Analog+0x21c>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	331e      	adds	r3, #30
 800cc84:	4a67      	ldr	r2, [pc, #412]	; (800ce24 <Draw_Digit_Analog+0x214>)
 800cc86:	6013      	str	r3, [r2, #0]
 800cc88:	4b67      	ldr	r3, [pc, #412]	; (800ce28 <Draw_Digit_Analog+0x218>)
 800cc8a:	681a      	ldr	r2, [r3, #0]
 800cc8c:	4b68      	ldr	r3, [pc, #416]	; (800ce30 <Draw_Digit_Analog+0x220>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	4013      	ands	r3, r2
 800cc92:	4a65      	ldr	r2, [pc, #404]	; (800ce28 <Draw_Digit_Analog+0x218>)
 800cc94:	6013      	str	r3, [r2, #0]
 800cc96:	4b64      	ldr	r3, [pc, #400]	; (800ce28 <Draw_Digit_Analog+0x218>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d01c      	beq.n	800ccd8 <Draw_Digit_Analog+0xc8>
 800cc9e:	4b63      	ldr	r3, [pc, #396]	; (800ce2c <Draw_Digit_Analog+0x21c>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	331e      	adds	r3, #30
 800cca4:	4a61      	ldr	r2, [pc, #388]	; (800ce2c <Draw_Digit_Analog+0x21c>)
 800cca6:	6013      	str	r3, [r2, #0]
 800cca8:	e016      	b.n	800ccd8 <Draw_Digit_Analog+0xc8>
 800ccaa:	88fb      	ldrh	r3, [r7, #6]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	f040 80a5 	bne.w	800cdfc <Draw_Digit_Analog+0x1ec>
 800ccb2:	4b5e      	ldr	r3, [pc, #376]	; (800ce2c <Draw_Digit_Analog+0x21c>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	3302      	adds	r3, #2
 800ccb8:	4a5c      	ldr	r2, [pc, #368]	; (800ce2c <Draw_Digit_Analog+0x21c>)
 800ccba:	6013      	str	r3, [r2, #0]
 800ccbc:	4b5b      	ldr	r3, [pc, #364]	; (800ce2c <Draw_Digit_Analog+0x21c>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	781b      	ldrb	r3, [r3, #0]
 800ccc2:	461a      	mov	r2, r3
 800ccc4:	4b57      	ldr	r3, [pc, #348]	; (800ce24 <Draw_Digit_Analog+0x214>)
 800ccc6:	601a      	str	r2, [r3, #0]
 800ccc8:	4b58      	ldr	r3, [pc, #352]	; (800ce2c <Draw_Digit_Analog+0x21c>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	3b01      	subs	r3, #1
 800ccce:	781b      	ldrb	r3, [r3, #0]
 800ccd0:	461a      	mov	r2, r3
 800ccd2:	4b56      	ldr	r3, [pc, #344]	; (800ce2c <Draw_Digit_Analog+0x21c>)
 800ccd4:	601a      	str	r2, [r3, #0]
 800ccd6:	e000      	b.n	800ccda <Draw_Digit_Analog+0xca>
 800ccd8:	bf00      	nop
 800ccda:	4b52      	ldr	r3, [pc, #328]	; (800ce24 <Draw_Digit_Analog+0x214>)
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	2bff      	cmp	r3, #255	; 0xff
 800cce0:	f000 808e 	beq.w	800ce00 <Draw_Digit_Analog+0x1f0>
 800cce4:	4b4f      	ldr	r3, [pc, #316]	; (800ce24 <Draw_Digit_Analog+0x214>)
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	f000 808b 	beq.w	800ce04 <Draw_Digit_Analog+0x1f4>
 800ccee:	4b4f      	ldr	r3, [pc, #316]	; (800ce2c <Draw_Digit_Analog+0x21c>)
 800ccf0:	681a      	ldr	r2, [r3, #0]
 800ccf2:	4b4c      	ldr	r3, [pc, #304]	; (800ce24 <Draw_Digit_Analog+0x214>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	429a      	cmp	r2, r3
 800ccf8:	d80b      	bhi.n	800cd12 <Draw_Digit_Analog+0x102>
 800ccfa:	4b4c      	ldr	r3, [pc, #304]	; (800ce2c <Draw_Digit_Analog+0x21c>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	4a4a      	ldr	r2, [pc, #296]	; (800ce28 <Draw_Digit_Analog+0x218>)
 800cd00:	6013      	str	r3, [r2, #0]
 800cd02:	4b48      	ldr	r3, [pc, #288]	; (800ce24 <Draw_Digit_Analog+0x214>)
 800cd04:	681a      	ldr	r2, [r3, #0]
 800cd06:	4b49      	ldr	r3, [pc, #292]	; (800ce2c <Draw_Digit_Analog+0x21c>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	1ad3      	subs	r3, r2, r3
 800cd0c:	4a45      	ldr	r2, [pc, #276]	; (800ce24 <Draw_Digit_Analog+0x214>)
 800cd0e:	6013      	str	r3, [r2, #0]
 800cd10:	e00a      	b.n	800cd28 <Draw_Digit_Analog+0x118>
 800cd12:	4b44      	ldr	r3, [pc, #272]	; (800ce24 <Draw_Digit_Analog+0x214>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	4a44      	ldr	r2, [pc, #272]	; (800ce28 <Draw_Digit_Analog+0x218>)
 800cd18:	6013      	str	r3, [r2, #0]
 800cd1a:	4b44      	ldr	r3, [pc, #272]	; (800ce2c <Draw_Digit_Analog+0x21c>)
 800cd1c:	681a      	ldr	r2, [r3, #0]
 800cd1e:	4b41      	ldr	r3, [pc, #260]	; (800ce24 <Draw_Digit_Analog+0x214>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	1ad3      	subs	r3, r2, r3
 800cd24:	4a3f      	ldr	r2, [pc, #252]	; (800ce24 <Draw_Digit_Analog+0x214>)
 800cd26:	6013      	str	r3, [r2, #0]
 800cd28:	4b3f      	ldr	r3, [pc, #252]	; (800ce28 <Draw_Digit_Analog+0x218>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	2bc7      	cmp	r3, #199	; 0xc7
 800cd2e:	d86b      	bhi.n	800ce08 <Draw_Digit_Analog+0x1f8>
 800cd30:	4b3c      	ldr	r3, [pc, #240]	; (800ce24 <Draw_Digit_Analog+0x214>)
 800cd32:	681a      	ldr	r2, [r3, #0]
 800cd34:	4b3c      	ldr	r3, [pc, #240]	; (800ce28 <Draw_Digit_Analog+0x218>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	4413      	add	r3, r2
 800cd3a:	4a3c      	ldr	r2, [pc, #240]	; (800ce2c <Draw_Digit_Analog+0x21c>)
 800cd3c:	6013      	str	r3, [r2, #0]
 800cd3e:	4b3b      	ldr	r3, [pc, #236]	; (800ce2c <Draw_Digit_Analog+0x21c>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	2bc7      	cmp	r3, #199	; 0xc7
 800cd44:	d906      	bls.n	800cd54 <Draw_Digit_Analog+0x144>
 800cd46:	4b38      	ldr	r3, [pc, #224]	; (800ce28 <Draw_Digit_Analog+0x218>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	f1c3 03c7 	rsb	r3, r3, #199	; 0xc7
 800cd4e:	4a35      	ldr	r2, [pc, #212]	; (800ce24 <Draw_Digit_Analog+0x214>)
 800cd50:	6013      	str	r3, [r2, #0]
 800cd52:	e020      	b.n	800cd96 <Draw_Digit_Analog+0x186>
 800cd54:	4b35      	ldr	r3, [pc, #212]	; (800ce2c <Draw_Digit_Analog+0x21c>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	2b02      	cmp	r3, #2
 800cd5a:	d957      	bls.n	800ce0c <Draw_Digit_Analog+0x1fc>
 800cd5c:	4b32      	ldr	r3, [pc, #200]	; (800ce28 <Draw_Digit_Analog+0x218>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	2b02      	cmp	r3, #2
 800cd62:	d808      	bhi.n	800cd76 <Draw_Digit_Analog+0x166>
 800cd64:	4b30      	ldr	r3, [pc, #192]	; (800ce28 <Draw_Digit_Analog+0x218>)
 800cd66:	2203      	movs	r2, #3
 800cd68:	601a      	str	r2, [r3, #0]
 800cd6a:	4b30      	ldr	r3, [pc, #192]	; (800ce2c <Draw_Digit_Analog+0x21c>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	3b03      	subs	r3, #3
 800cd70:	4a2c      	ldr	r2, [pc, #176]	; (800ce24 <Draw_Digit_Analog+0x214>)
 800cd72:	6013      	str	r3, [r2, #0]
 800cd74:	e00f      	b.n	800cd96 <Draw_Digit_Analog+0x186>
 800cd76:	4b2b      	ldr	r3, [pc, #172]	; (800ce24 <Draw_Digit_Analog+0x214>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d10a      	bne.n	800cd94 <Draw_Digit_Analog+0x184>
 800cd7e:	4b2a      	ldr	r3, [pc, #168]	; (800ce28 <Draw_Digit_Analog+0x218>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	3b01      	subs	r3, #1
 800cd84:	4a28      	ldr	r2, [pc, #160]	; (800ce28 <Draw_Digit_Analog+0x218>)
 800cd86:	6013      	str	r3, [r2, #0]
 800cd88:	4b26      	ldr	r3, [pc, #152]	; (800ce24 <Draw_Digit_Analog+0x214>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	3302      	adds	r3, #2
 800cd8e:	4a25      	ldr	r2, [pc, #148]	; (800ce24 <Draw_Digit_Analog+0x214>)
 800cd90:	6013      	str	r3, [r2, #0]
 800cd92:	e000      	b.n	800cd96 <Draw_Digit_Analog+0x186>
 800cd94:	bf00      	nop
 800cd96:	4b23      	ldr	r3, [pc, #140]	; (800ce24 <Draw_Digit_Analog+0x214>)
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	2b13      	cmp	r3, #19
 800cd9c:	d904      	bls.n	800cda8 <Draw_Digit_Analog+0x198>
 800cd9e:	4b25      	ldr	r3, [pc, #148]	; (800ce34 <Draw_Digit_Analog+0x224>)
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	3314      	adds	r3, #20
 800cda4:	4a23      	ldr	r2, [pc, #140]	; (800ce34 <Draw_Digit_Analog+0x224>)
 800cda6:	6013      	str	r3, [r2, #0]
 800cda8:	4b23      	ldr	r3, [pc, #140]	; (800ce38 <Draw_Digit_Analog+0x228>)
 800cdaa:	681a      	ldr	r2, [r3, #0]
 800cdac:	4b21      	ldr	r3, [pc, #132]	; (800ce34 <Draw_Digit_Analog+0x224>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	4413      	add	r3, r2
 800cdb2:	881b      	ldrh	r3, [r3, #0]
 800cdb4:	461a      	mov	r2, r3
 800cdb6:	4b1f      	ldr	r3, [pc, #124]	; (800ce34 <Draw_Digit_Analog+0x224>)
 800cdb8:	601a      	str	r2, [r3, #0]
 800cdba:	4b1b      	ldr	r3, [pc, #108]	; (800ce28 <Draw_Digit_Analog+0x218>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	005b      	lsls	r3, r3, #1
 800cdc0:	4a19      	ldr	r2, [pc, #100]	; (800ce28 <Draw_Digit_Analog+0x218>)
 800cdc2:	6013      	str	r3, [r2, #0]
 800cdc4:	4b18      	ldr	r3, [pc, #96]	; (800ce28 <Draw_Digit_Analog+0x218>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	085b      	lsrs	r3, r3, #1
 800cdca:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800cdce:	005b      	lsls	r3, r3, #1
 800cdd0:	4a1a      	ldr	r2, [pc, #104]	; (800ce3c <Draw_Digit_Analog+0x22c>)
 800cdd2:	4413      	add	r3, r2
 800cdd4:	461a      	mov	r2, r3
 800cdd6:	4b14      	ldr	r3, [pc, #80]	; (800ce28 <Draw_Digit_Analog+0x218>)
 800cdd8:	601a      	str	r2, [r3, #0]
 800cdda:	4b16      	ldr	r3, [pc, #88]	; (800ce34 <Draw_Digit_Analog+0x224>)
 800cddc:	681a      	ldr	r2, [r3, #0]
 800cdde:	4b12      	ldr	r3, [pc, #72]	; (800ce28 <Draw_Digit_Analog+0x218>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	b292      	uxth	r2, r2
 800cde4:	801a      	strh	r2, [r3, #0]
 800cde6:	4b10      	ldr	r3, [pc, #64]	; (800ce28 <Draw_Digit_Analog+0x218>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	3302      	adds	r3, #2
 800cdec:	4a0e      	ldr	r2, [pc, #56]	; (800ce28 <Draw_Digit_Analog+0x218>)
 800cdee:	6013      	str	r3, [r2, #0]
 800cdf0:	4b0c      	ldr	r3, [pc, #48]	; (800ce24 <Draw_Digit_Analog+0x214>)
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	3b01      	subs	r3, #1
 800cdf6:	4a0b      	ldr	r2, [pc, #44]	; (800ce24 <Draw_Digit_Analog+0x214>)
 800cdf8:	6013      	str	r3, [r2, #0]
 800cdfa:	e7ee      	b.n	800cdda <Draw_Digit_Analog+0x1ca>
 800cdfc:	bf00      	nop
 800cdfe:	e006      	b.n	800ce0e <Draw_Digit_Analog+0x1fe>
 800ce00:	bf00      	nop
 800ce02:	e004      	b.n	800ce0e <Draw_Digit_Analog+0x1fe>
 800ce04:	bf00      	nop
 800ce06:	e002      	b.n	800ce0e <Draw_Digit_Analog+0x1fe>
 800ce08:	bf00      	nop
 800ce0a:	e000      	b.n	800ce0e <Draw_Digit_Analog+0x1fe>
 800ce0c:	bf00      	nop
 800ce0e:	370c      	adds	r7, #12
 800ce10:	46bd      	mov	sp, r7
 800ce12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce16:	4770      	bx	lr
 800ce18:	20000a44 	.word	0x20000a44
 800ce1c:	20000c00 	.word	0x20000c00
 800ce20:	20000bf8 	.word	0x20000bf8
 800ce24:	20000a3c 	.word	0x20000a3c
 800ce28:	20000be8 	.word	0x20000be8
 800ce2c:	20000bec 	.word	0x20000bec
 800ce30:	20000a38 	.word	0x20000a38
 800ce34:	20000a40 	.word	0x20000a40
 800ce38:	20000bf0 	.word	0x20000bf0
 800ce3c:	20000a48 	.word	0x20000a48

0800ce40 <Cursor_0>:
 800ce40:	b480      	push	{r7}
 800ce42:	b083      	sub	sp, #12
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
 800ce48:	4b3c      	ldr	r3, [pc, #240]	; (800cf3c <Cursor_0+0xfc>)
 800ce4a:	2206      	movs	r2, #6
 800ce4c:	601a      	str	r2, [r3, #0]
 800ce4e:	4b3c      	ldr	r3, [pc, #240]	; (800cf40 <Cursor_0+0x100>)
 800ce50:	4a3c      	ldr	r2, [pc, #240]	; (800cf44 <Cursor_0+0x104>)
 800ce52:	601a      	str	r2, [r3, #0]
 800ce54:	4b39      	ldr	r3, [pc, #228]	; (800cf3c <Cursor_0+0xfc>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	005b      	lsls	r3, r3, #1
 800ce5a:	687a      	ldr	r2, [r7, #4]
 800ce5c:	4413      	add	r3, r2
 800ce5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ce62:	461a      	mov	r2, r3
 800ce64:	4b38      	ldr	r3, [pc, #224]	; (800cf48 <Cursor_0+0x108>)
 800ce66:	601a      	str	r2, [r3, #0]
 800ce68:	4b37      	ldr	r3, [pc, #220]	; (800cf48 <Cursor_0+0x108>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	f003 0301 	and.w	r3, r3, #1
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d15c      	bne.n	800cf2e <Cursor_0+0xee>
 800ce74:	4b31      	ldr	r3, [pc, #196]	; (800cf3c <Cursor_0+0xfc>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	330a      	adds	r3, #10
 800ce7a:	005b      	lsls	r3, r3, #1
 800ce7c:	687a      	ldr	r2, [r7, #4]
 800ce7e:	4413      	add	r3, r2
 800ce80:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ce84:	461a      	mov	r2, r3
 800ce86:	4b30      	ldr	r3, [pc, #192]	; (800cf48 <Cursor_0+0x108>)
 800ce88:	601a      	str	r2, [r3, #0]
 800ce8a:	4b2f      	ldr	r3, [pc, #188]	; (800cf48 <Cursor_0+0x108>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	085b      	lsrs	r3, r3, #1
 800ce90:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800ce94:	005b      	lsls	r3, r3, #1
 800ce96:	4a2d      	ldr	r2, [pc, #180]	; (800cf4c <Cursor_0+0x10c>)
 800ce98:	4413      	add	r3, r2
 800ce9a:	4a29      	ldr	r2, [pc, #164]	; (800cf40 <Cursor_0+0x100>)
 800ce9c:	6013      	str	r3, [r2, #0]
 800ce9e:	4b27      	ldr	r3, [pc, #156]	; (800cf3c <Cursor_0+0xfc>)
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	3314      	adds	r3, #20
 800cea4:	005b      	lsls	r3, r3, #1
 800cea6:	687a      	ldr	r2, [r7, #4]
 800cea8:	4413      	add	r3, r2
 800ceaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ceae:	461a      	mov	r2, r3
 800ceb0:	4b27      	ldr	r3, [pc, #156]	; (800cf50 <Cursor_0+0x110>)
 800ceb2:	601a      	str	r2, [r3, #0]
 800ceb4:	4b22      	ldr	r3, [pc, #136]	; (800cf40 <Cursor_0+0x100>)
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	3b04      	subs	r3, #4
 800ceba:	4a21      	ldr	r2, [pc, #132]	; (800cf40 <Cursor_0+0x100>)
 800cebc:	6013      	str	r3, [r2, #0]
 800cebe:	4b24      	ldr	r3, [pc, #144]	; (800cf50 <Cursor_0+0x110>)
 800cec0:	681a      	ldr	r2, [r3, #0]
 800cec2:	4b1f      	ldr	r3, [pc, #124]	; (800cf40 <Cursor_0+0x100>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	b292      	uxth	r2, r2
 800cec8:	801a      	strh	r2, [r3, #0]
 800ceca:	4b1d      	ldr	r3, [pc, #116]	; (800cf40 <Cursor_0+0x100>)
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	3302      	adds	r3, #2
 800ced0:	4a1b      	ldr	r2, [pc, #108]	; (800cf40 <Cursor_0+0x100>)
 800ced2:	6013      	str	r3, [r2, #0]
 800ced4:	4b1e      	ldr	r3, [pc, #120]	; (800cf50 <Cursor_0+0x110>)
 800ced6:	681a      	ldr	r2, [r3, #0]
 800ced8:	4b19      	ldr	r3, [pc, #100]	; (800cf40 <Cursor_0+0x100>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	b292      	uxth	r2, r2
 800cede:	801a      	strh	r2, [r3, #0]
 800cee0:	4b17      	ldr	r3, [pc, #92]	; (800cf40 <Cursor_0+0x100>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	3302      	adds	r3, #2
 800cee6:	4a16      	ldr	r2, [pc, #88]	; (800cf40 <Cursor_0+0x100>)
 800cee8:	6013      	str	r3, [r2, #0]
 800ceea:	4b19      	ldr	r3, [pc, #100]	; (800cf50 <Cursor_0+0x110>)
 800ceec:	681a      	ldr	r2, [r3, #0]
 800ceee:	4b14      	ldr	r3, [pc, #80]	; (800cf40 <Cursor_0+0x100>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	b292      	uxth	r2, r2
 800cef4:	801a      	strh	r2, [r3, #0]
 800cef6:	4b12      	ldr	r3, [pc, #72]	; (800cf40 <Cursor_0+0x100>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	3302      	adds	r3, #2
 800cefc:	4a10      	ldr	r2, [pc, #64]	; (800cf40 <Cursor_0+0x100>)
 800cefe:	6013      	str	r3, [r2, #0]
 800cf00:	4b13      	ldr	r3, [pc, #76]	; (800cf50 <Cursor_0+0x110>)
 800cf02:	681a      	ldr	r2, [r3, #0]
 800cf04:	4b0e      	ldr	r3, [pc, #56]	; (800cf40 <Cursor_0+0x100>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	b292      	uxth	r2, r2
 800cf0a:	801a      	strh	r2, [r3, #0]
 800cf0c:	4b0c      	ldr	r3, [pc, #48]	; (800cf40 <Cursor_0+0x100>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	3302      	adds	r3, #2
 800cf12:	4a0b      	ldr	r2, [pc, #44]	; (800cf40 <Cursor_0+0x100>)
 800cf14:	6013      	str	r3, [r2, #0]
 800cf16:	4b0e      	ldr	r3, [pc, #56]	; (800cf50 <Cursor_0+0x110>)
 800cf18:	681a      	ldr	r2, [r3, #0]
 800cf1a:	4b09      	ldr	r3, [pc, #36]	; (800cf40 <Cursor_0+0x100>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	b292      	uxth	r2, r2
 800cf20:	801a      	strh	r2, [r3, #0]
 800cf22:	4b07      	ldr	r3, [pc, #28]	; (800cf40 <Cursor_0+0x100>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	3302      	adds	r3, #2
 800cf28:	4a05      	ldr	r2, [pc, #20]	; (800cf40 <Cursor_0+0x100>)
 800cf2a:	6013      	str	r3, [r2, #0]
 800cf2c:	e000      	b.n	800cf30 <Cursor_0+0xf0>
 800cf2e:	bf00      	nop
 800cf30:	4b02      	ldr	r3, [pc, #8]	; (800cf3c <Cursor_0+0xfc>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	3b01      	subs	r3, #1
 800cf36:	4a01      	ldr	r2, [pc, #4]	; (800cf3c <Cursor_0+0xfc>)
 800cf38:	6013      	str	r3, [r2, #0]
 800cf3a:	e78b      	b.n	800ce54 <Cursor_0+0x14>
 800cf3c:	20000a40 	.word	0x20000a40
 800cf40:	20000bec 	.word	0x20000bec
 800cf44:	20000be0 	.word	0x20000be0
 800cf48:	20000a3c 	.word	0x20000a3c
 800cf4c:	20000a48 	.word	0x20000a48
 800cf50:	20000be8 	.word	0x20000be8

0800cf54 <Cursor_1>:
 800cf54:	b480      	push	{r7}
 800cf56:	b083      	sub	sp, #12
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
 800cf5c:	4b31      	ldr	r3, [pc, #196]	; (800d024 <Cursor_1+0xd0>)
 800cf5e:	2206      	movs	r2, #6
 800cf60:	601a      	str	r2, [r3, #0]
 800cf62:	4b31      	ldr	r3, [pc, #196]	; (800d028 <Cursor_1+0xd4>)
 800cf64:	4a31      	ldr	r2, [pc, #196]	; (800d02c <Cursor_1+0xd8>)
 800cf66:	601a      	str	r2, [r3, #0]
 800cf68:	4b2e      	ldr	r3, [pc, #184]	; (800d024 <Cursor_1+0xd0>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	005b      	lsls	r3, r3, #1
 800cf6e:	687a      	ldr	r2, [r7, #4]
 800cf70:	4413      	add	r3, r2
 800cf72:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cf76:	461a      	mov	r2, r3
 800cf78:	4b2d      	ldr	r3, [pc, #180]	; (800d030 <Cursor_1+0xdc>)
 800cf7a:	601a      	str	r2, [r3, #0]
 800cf7c:	4b2c      	ldr	r3, [pc, #176]	; (800d030 <Cursor_1+0xdc>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	f003 0301 	and.w	r3, r3, #1
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d146      	bne.n	800d016 <Cursor_1+0xc2>
 800cf88:	4b26      	ldr	r3, [pc, #152]	; (800d024 <Cursor_1+0xd0>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	330a      	adds	r3, #10
 800cf8e:	005b      	lsls	r3, r3, #1
 800cf90:	687a      	ldr	r2, [r7, #4]
 800cf92:	4413      	add	r3, r2
 800cf94:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cf98:	461a      	mov	r2, r3
 800cf9a:	4b25      	ldr	r3, [pc, #148]	; (800d030 <Cursor_1+0xdc>)
 800cf9c:	601a      	str	r2, [r3, #0]
 800cf9e:	4b24      	ldr	r3, [pc, #144]	; (800d030 <Cursor_1+0xdc>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	085b      	lsrs	r3, r3, #1
 800cfa4:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800cfa8:	005b      	lsls	r3, r3, #1
 800cfaa:	4a22      	ldr	r2, [pc, #136]	; (800d034 <Cursor_1+0xe0>)
 800cfac:	4413      	add	r3, r2
 800cfae:	4a1e      	ldr	r2, [pc, #120]	; (800d028 <Cursor_1+0xd4>)
 800cfb0:	6013      	str	r3, [r2, #0]
 800cfb2:	4b1c      	ldr	r3, [pc, #112]	; (800d024 <Cursor_1+0xd0>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	3314      	adds	r3, #20
 800cfb8:	005b      	lsls	r3, r3, #1
 800cfba:	687a      	ldr	r2, [r7, #4]
 800cfbc:	4413      	add	r3, r2
 800cfbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cfc2:	461a      	mov	r2, r3
 800cfc4:	4b1c      	ldr	r3, [pc, #112]	; (800d038 <Cursor_1+0xe4>)
 800cfc6:	601a      	str	r2, [r3, #0]
 800cfc8:	4b17      	ldr	r3, [pc, #92]	; (800d028 <Cursor_1+0xd4>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	3b02      	subs	r3, #2
 800cfce:	4a16      	ldr	r2, [pc, #88]	; (800d028 <Cursor_1+0xd4>)
 800cfd0:	6013      	str	r3, [r2, #0]
 800cfd2:	4b19      	ldr	r3, [pc, #100]	; (800d038 <Cursor_1+0xe4>)
 800cfd4:	681a      	ldr	r2, [r3, #0]
 800cfd6:	4b14      	ldr	r3, [pc, #80]	; (800d028 <Cursor_1+0xd4>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	b292      	uxth	r2, r2
 800cfdc:	801a      	strh	r2, [r3, #0]
 800cfde:	4b12      	ldr	r3, [pc, #72]	; (800d028 <Cursor_1+0xd4>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	3302      	adds	r3, #2
 800cfe4:	4a10      	ldr	r2, [pc, #64]	; (800d028 <Cursor_1+0xd4>)
 800cfe6:	6013      	str	r3, [r2, #0]
 800cfe8:	4b13      	ldr	r3, [pc, #76]	; (800d038 <Cursor_1+0xe4>)
 800cfea:	681a      	ldr	r2, [r3, #0]
 800cfec:	4b0e      	ldr	r3, [pc, #56]	; (800d028 <Cursor_1+0xd4>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	b292      	uxth	r2, r2
 800cff2:	801a      	strh	r2, [r3, #0]
 800cff4:	4b0c      	ldr	r3, [pc, #48]	; (800d028 <Cursor_1+0xd4>)
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	3302      	adds	r3, #2
 800cffa:	4a0b      	ldr	r2, [pc, #44]	; (800d028 <Cursor_1+0xd4>)
 800cffc:	6013      	str	r3, [r2, #0]
 800cffe:	4b0e      	ldr	r3, [pc, #56]	; (800d038 <Cursor_1+0xe4>)
 800d000:	681a      	ldr	r2, [r3, #0]
 800d002:	4b09      	ldr	r3, [pc, #36]	; (800d028 <Cursor_1+0xd4>)
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	b292      	uxth	r2, r2
 800d008:	801a      	strh	r2, [r3, #0]
 800d00a:	4b07      	ldr	r3, [pc, #28]	; (800d028 <Cursor_1+0xd4>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	3302      	adds	r3, #2
 800d010:	4a05      	ldr	r2, [pc, #20]	; (800d028 <Cursor_1+0xd4>)
 800d012:	6013      	str	r3, [r2, #0]
 800d014:	e000      	b.n	800d018 <Cursor_1+0xc4>
 800d016:	bf00      	nop
 800d018:	4b02      	ldr	r3, [pc, #8]	; (800d024 <Cursor_1+0xd0>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	3b01      	subs	r3, #1
 800d01e:	4a01      	ldr	r2, [pc, #4]	; (800d024 <Cursor_1+0xd0>)
 800d020:	6013      	str	r3, [r2, #0]
 800d022:	e7a1      	b.n	800cf68 <Cursor_1+0x14>
 800d024:	20000a40 	.word	0x20000a40
 800d028:	20000bec 	.word	0x20000bec
 800d02c:	20000be0 	.word	0x20000be0
 800d030:	20000a3c 	.word	0x20000a3c
 800d034:	20000a48 	.word	0x20000a48
 800d038:	20000be8 	.word	0x20000be8

0800d03c <Cursor_2>:
 800d03c:	b480      	push	{r7}
 800d03e:	b083      	sub	sp, #12
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
 800d044:	4b21      	ldr	r3, [pc, #132]	; (800d0cc <Cursor_2+0x90>)
 800d046:	2206      	movs	r2, #6
 800d048:	601a      	str	r2, [r3, #0]
 800d04a:	4b21      	ldr	r3, [pc, #132]	; (800d0d0 <Cursor_2+0x94>)
 800d04c:	4a21      	ldr	r2, [pc, #132]	; (800d0d4 <Cursor_2+0x98>)
 800d04e:	601a      	str	r2, [r3, #0]
 800d050:	4b1e      	ldr	r3, [pc, #120]	; (800d0cc <Cursor_2+0x90>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	005b      	lsls	r3, r3, #1
 800d056:	687a      	ldr	r2, [r7, #4]
 800d058:	4413      	add	r3, r2
 800d05a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d05e:	461a      	mov	r2, r3
 800d060:	4b1d      	ldr	r3, [pc, #116]	; (800d0d8 <Cursor_2+0x9c>)
 800d062:	601a      	str	r2, [r3, #0]
 800d064:	4b1c      	ldr	r3, [pc, #112]	; (800d0d8 <Cursor_2+0x9c>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	f003 0301 	and.w	r3, r3, #1
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d126      	bne.n	800d0be <Cursor_2+0x82>
 800d070:	4b16      	ldr	r3, [pc, #88]	; (800d0cc <Cursor_2+0x90>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	330a      	adds	r3, #10
 800d076:	005b      	lsls	r3, r3, #1
 800d078:	687a      	ldr	r2, [r7, #4]
 800d07a:	4413      	add	r3, r2
 800d07c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d080:	461a      	mov	r2, r3
 800d082:	4b15      	ldr	r3, [pc, #84]	; (800d0d8 <Cursor_2+0x9c>)
 800d084:	601a      	str	r2, [r3, #0]
 800d086:	4b14      	ldr	r3, [pc, #80]	; (800d0d8 <Cursor_2+0x9c>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	085b      	lsrs	r3, r3, #1
 800d08c:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d090:	005b      	lsls	r3, r3, #1
 800d092:	4a12      	ldr	r2, [pc, #72]	; (800d0dc <Cursor_2+0xa0>)
 800d094:	4413      	add	r3, r2
 800d096:	4a0e      	ldr	r2, [pc, #56]	; (800d0d0 <Cursor_2+0x94>)
 800d098:	6013      	str	r3, [r2, #0]
 800d09a:	4b0c      	ldr	r3, [pc, #48]	; (800d0cc <Cursor_2+0x90>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	3314      	adds	r3, #20
 800d0a0:	005b      	lsls	r3, r3, #1
 800d0a2:	687a      	ldr	r2, [r7, #4]
 800d0a4:	4413      	add	r3, r2
 800d0a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d0aa:	461a      	mov	r2, r3
 800d0ac:	4b0c      	ldr	r3, [pc, #48]	; (800d0e0 <Cursor_2+0xa4>)
 800d0ae:	601a      	str	r2, [r3, #0]
 800d0b0:	4b0b      	ldr	r3, [pc, #44]	; (800d0e0 <Cursor_2+0xa4>)
 800d0b2:	681a      	ldr	r2, [r3, #0]
 800d0b4:	4b06      	ldr	r3, [pc, #24]	; (800d0d0 <Cursor_2+0x94>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	b292      	uxth	r2, r2
 800d0ba:	801a      	strh	r2, [r3, #0]
 800d0bc:	e000      	b.n	800d0c0 <Cursor_2+0x84>
 800d0be:	bf00      	nop
 800d0c0:	4b02      	ldr	r3, [pc, #8]	; (800d0cc <Cursor_2+0x90>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	3b01      	subs	r3, #1
 800d0c6:	4a01      	ldr	r2, [pc, #4]	; (800d0cc <Cursor_2+0x90>)
 800d0c8:	6013      	str	r3, [r2, #0]
 800d0ca:	e7c1      	b.n	800d050 <Cursor_2+0x14>
 800d0cc:	20000a40 	.word	0x20000a40
 800d0d0:	20000bec 	.word	0x20000bec
 800d0d4:	20000be0 	.word	0x20000be0
 800d0d8:	20000a3c 	.word	0x20000a3c
 800d0dc:	20000a48 	.word	0x20000a48
 800d0e0:	20000be8 	.word	0x20000be8

0800d0e4 <Cursor_3>:
 800d0e4:	b480      	push	{r7}
 800d0e6:	b083      	sub	sp, #12
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
 800d0ec:	4b2a      	ldr	r3, [pc, #168]	; (800d198 <Cursor_3+0xb4>)
 800d0ee:	2206      	movs	r2, #6
 800d0f0:	601a      	str	r2, [r3, #0]
 800d0f2:	4b2a      	ldr	r3, [pc, #168]	; (800d19c <Cursor_3+0xb8>)
 800d0f4:	4a2a      	ldr	r2, [pc, #168]	; (800d1a0 <Cursor_3+0xbc>)
 800d0f6:	601a      	str	r2, [r3, #0]
 800d0f8:	4b27      	ldr	r3, [pc, #156]	; (800d198 <Cursor_3+0xb4>)
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	005b      	lsls	r3, r3, #1
 800d0fe:	687a      	ldr	r2, [r7, #4]
 800d100:	4413      	add	r3, r2
 800d102:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d106:	461a      	mov	r2, r3
 800d108:	4b26      	ldr	r3, [pc, #152]	; (800d1a4 <Cursor_3+0xc0>)
 800d10a:	601a      	str	r2, [r3, #0]
 800d10c:	4b25      	ldr	r3, [pc, #148]	; (800d1a4 <Cursor_3+0xc0>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	f003 0302 	and.w	r3, r3, #2
 800d114:	2b00      	cmp	r3, #0
 800d116:	d135      	bne.n	800d184 <Cursor_3+0xa0>
 800d118:	4b23      	ldr	r3, [pc, #140]	; (800d1a8 <Cursor_3+0xc4>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	3b01      	subs	r3, #1
 800d11e:	4a21      	ldr	r2, [pc, #132]	; (800d1a4 <Cursor_3+0xc0>)
 800d120:	6013      	str	r3, [r2, #0]
 800d122:	4b20      	ldr	r3, [pc, #128]	; (800d1a4 <Cursor_3+0xc0>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f003 0303 	and.w	r3, r3, #3
 800d12a:	4a1e      	ldr	r2, [pc, #120]	; (800d1a4 <Cursor_3+0xc0>)
 800d12c:	6013      	str	r3, [r2, #0]
 800d12e:	4b1d      	ldr	r3, [pc, #116]	; (800d1a4 <Cursor_3+0xc0>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d128      	bne.n	800d188 <Cursor_3+0xa4>
 800d136:	4b18      	ldr	r3, [pc, #96]	; (800d198 <Cursor_3+0xb4>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	330a      	adds	r3, #10
 800d13c:	005b      	lsls	r3, r3, #1
 800d13e:	687a      	ldr	r2, [r7, #4]
 800d140:	4413      	add	r3, r2
 800d142:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d146:	461a      	mov	r2, r3
 800d148:	4b16      	ldr	r3, [pc, #88]	; (800d1a4 <Cursor_3+0xc0>)
 800d14a:	601a      	str	r2, [r3, #0]
 800d14c:	4b15      	ldr	r3, [pc, #84]	; (800d1a4 <Cursor_3+0xc0>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	085b      	lsrs	r3, r3, #1
 800d152:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d156:	005b      	lsls	r3, r3, #1
 800d158:	4a14      	ldr	r2, [pc, #80]	; (800d1ac <Cursor_3+0xc8>)
 800d15a:	4413      	add	r3, r2
 800d15c:	4a0f      	ldr	r2, [pc, #60]	; (800d19c <Cursor_3+0xb8>)
 800d15e:	6013      	str	r3, [r2, #0]
 800d160:	4b0d      	ldr	r3, [pc, #52]	; (800d198 <Cursor_3+0xb4>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	3314      	adds	r3, #20
 800d166:	005b      	lsls	r3, r3, #1
 800d168:	687a      	ldr	r2, [r7, #4]
 800d16a:	4413      	add	r3, r2
 800d16c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d170:	461a      	mov	r2, r3
 800d172:	4b0f      	ldr	r3, [pc, #60]	; (800d1b0 <Cursor_3+0xcc>)
 800d174:	601a      	str	r2, [r3, #0]
 800d176:	4b0e      	ldr	r3, [pc, #56]	; (800d1b0 <Cursor_3+0xcc>)
 800d178:	681a      	ldr	r2, [r3, #0]
 800d17a:	4b08      	ldr	r3, [pc, #32]	; (800d19c <Cursor_3+0xb8>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	b292      	uxth	r2, r2
 800d180:	801a      	strh	r2, [r3, #0]
 800d182:	e002      	b.n	800d18a <Cursor_3+0xa6>
 800d184:	bf00      	nop
 800d186:	e000      	b.n	800d18a <Cursor_3+0xa6>
 800d188:	bf00      	nop
 800d18a:	4b03      	ldr	r3, [pc, #12]	; (800d198 <Cursor_3+0xb4>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	3b01      	subs	r3, #1
 800d190:	4a01      	ldr	r2, [pc, #4]	; (800d198 <Cursor_3+0xb4>)
 800d192:	6013      	str	r3, [r2, #0]
 800d194:	e7b0      	b.n	800d0f8 <Cursor_3+0x14>
 800d196:	bf00      	nop
 800d198:	20000a40 	.word	0x20000a40
 800d19c:	20000bec 	.word	0x20000bec
 800d1a0:	20000be0 	.word	0x20000be0
 800d1a4:	20000a3c 	.word	0x20000a3c
 800d1a8:	20000bf8 	.word	0x20000bf8
 800d1ac:	20000a48 	.word	0x20000a48
 800d1b0:	20000be8 	.word	0x20000be8

0800d1b4 <Cursor_4>:
 800d1b4:	b480      	push	{r7}
 800d1b6:	b083      	sub	sp, #12
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
 800d1bc:	4b7a      	ldr	r3, [pc, #488]	; (800d3a8 <Cursor_4+0x1f4>)
 800d1be:	2207      	movs	r2, #7
 800d1c0:	601a      	str	r2, [r3, #0]
 800d1c2:	4b7a      	ldr	r3, [pc, #488]	; (800d3ac <Cursor_4+0x1f8>)
 800d1c4:	4a7a      	ldr	r2, [pc, #488]	; (800d3b0 <Cursor_4+0x1fc>)
 800d1c6:	601a      	str	r2, [r3, #0]
 800d1c8:	4b77      	ldr	r3, [pc, #476]	; (800d3a8 <Cursor_4+0x1f4>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	005b      	lsls	r3, r3, #1
 800d1ce:	687a      	ldr	r2, [r7, #4]
 800d1d0:	4413      	add	r3, r2
 800d1d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d1d6:	461a      	mov	r2, r3
 800d1d8:	4b76      	ldr	r3, [pc, #472]	; (800d3b4 <Cursor_4+0x200>)
 800d1da:	601a      	str	r2, [r3, #0]
 800d1dc:	4b75      	ldr	r3, [pc, #468]	; (800d3b4 <Cursor_4+0x200>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f003 0301 	and.w	r3, r3, #1
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	f040 8145 	bne.w	800d474 <Cursor_4+0x2c0>
 800d1ea:	bf00      	nop
 800d1ec:	4b6e      	ldr	r3, [pc, #440]	; (800d3a8 <Cursor_4+0x1f4>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	330a      	adds	r3, #10
 800d1f2:	005b      	lsls	r3, r3, #1
 800d1f4:	687a      	ldr	r2, [r7, #4]
 800d1f6:	4413      	add	r3, r2
 800d1f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d1fc:	461a      	mov	r2, r3
 800d1fe:	4b6d      	ldr	r3, [pc, #436]	; (800d3b4 <Cursor_4+0x200>)
 800d200:	601a      	str	r2, [r3, #0]
 800d202:	4b69      	ldr	r3, [pc, #420]	; (800d3a8 <Cursor_4+0x1f4>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	3314      	adds	r3, #20
 800d208:	005b      	lsls	r3, r3, #1
 800d20a:	687a      	ldr	r2, [r7, #4]
 800d20c:	4413      	add	r3, r2
 800d20e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d212:	461a      	mov	r2, r3
 800d214:	4b68      	ldr	r3, [pc, #416]	; (800d3b8 <Cursor_4+0x204>)
 800d216:	601a      	str	r2, [r3, #0]
 800d218:	4b66      	ldr	r3, [pc, #408]	; (800d3b4 <Cursor_4+0x200>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	3b02      	subs	r3, #2
 800d21e:	4a67      	ldr	r2, [pc, #412]	; (800d3bc <Cursor_4+0x208>)
 800d220:	6013      	str	r3, [r2, #0]
 800d222:	4b64      	ldr	r3, [pc, #400]	; (800d3b4 <Cursor_4+0x200>)
 800d224:	681a      	ldr	r2, [r3, #0]
 800d226:	4b65      	ldr	r3, [pc, #404]	; (800d3bc <Cursor_4+0x208>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	429a      	cmp	r2, r3
 800d22c:	d112      	bne.n	800d254 <Cursor_4+0xa0>
 800d22e:	4b62      	ldr	r3, [pc, #392]	; (800d3b8 <Cursor_4+0x204>)
 800d230:	681a      	ldr	r2, [r3, #0]
 800d232:	4b5e      	ldr	r3, [pc, #376]	; (800d3ac <Cursor_4+0x1f8>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	b292      	uxth	r2, r2
 800d238:	801a      	strh	r2, [r3, #0]
 800d23a:	4b5c      	ldr	r3, [pc, #368]	; (800d3ac <Cursor_4+0x1f8>)
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800d242:	4a5a      	ldr	r2, [pc, #360]	; (800d3ac <Cursor_4+0x1f8>)
 800d244:	6013      	str	r3, [r2, #0]
 800d246:	4b5c      	ldr	r3, [pc, #368]	; (800d3b8 <Cursor_4+0x204>)
 800d248:	681a      	ldr	r2, [r3, #0]
 800d24a:	4b58      	ldr	r3, [pc, #352]	; (800d3ac <Cursor_4+0x1f8>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	b292      	uxth	r2, r2
 800d250:	801a      	strh	r2, [r3, #0]
 800d252:	e114      	b.n	800d47e <Cursor_4+0x2ca>
 800d254:	bf00      	nop
 800d256:	4b59      	ldr	r3, [pc, #356]	; (800d3bc <Cursor_4+0x208>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	3301      	adds	r3, #1
 800d25c:	4a57      	ldr	r2, [pc, #348]	; (800d3bc <Cursor_4+0x208>)
 800d25e:	6013      	str	r3, [r2, #0]
 800d260:	4b57      	ldr	r3, [pc, #348]	; (800d3c0 <Cursor_4+0x20c>)
 800d262:	681a      	ldr	r2, [r3, #0]
 800d264:	4b55      	ldr	r3, [pc, #340]	; (800d3bc <Cursor_4+0x208>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	429a      	cmp	r2, r3
 800d26a:	d128      	bne.n	800d2be <Cursor_4+0x10a>
 800d26c:	4b52      	ldr	r3, [pc, #328]	; (800d3b8 <Cursor_4+0x204>)
 800d26e:	681a      	ldr	r2, [r3, #0]
 800d270:	4b4e      	ldr	r3, [pc, #312]	; (800d3ac <Cursor_4+0x1f8>)
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	b292      	uxth	r2, r2
 800d276:	801a      	strh	r2, [r3, #0]
 800d278:	4b4c      	ldr	r3, [pc, #304]	; (800d3ac <Cursor_4+0x1f8>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	3302      	adds	r3, #2
 800d27e:	4a4b      	ldr	r2, [pc, #300]	; (800d3ac <Cursor_4+0x1f8>)
 800d280:	6013      	str	r3, [r2, #0]
 800d282:	4b4d      	ldr	r3, [pc, #308]	; (800d3b8 <Cursor_4+0x204>)
 800d284:	681a      	ldr	r2, [r3, #0]
 800d286:	4b49      	ldr	r3, [pc, #292]	; (800d3ac <Cursor_4+0x1f8>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	b292      	uxth	r2, r2
 800d28c:	801a      	strh	r2, [r3, #0]
 800d28e:	4b47      	ldr	r3, [pc, #284]	; (800d3ac <Cursor_4+0x1f8>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d296:	4a45      	ldr	r2, [pc, #276]	; (800d3ac <Cursor_4+0x1f8>)
 800d298:	6013      	str	r3, [r2, #0]
 800d29a:	4b47      	ldr	r3, [pc, #284]	; (800d3b8 <Cursor_4+0x204>)
 800d29c:	681a      	ldr	r2, [r3, #0]
 800d29e:	4b43      	ldr	r3, [pc, #268]	; (800d3ac <Cursor_4+0x1f8>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	b292      	uxth	r2, r2
 800d2a4:	801a      	strh	r2, [r3, #0]
 800d2a6:	4b41      	ldr	r3, [pc, #260]	; (800d3ac <Cursor_4+0x1f8>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	3302      	adds	r3, #2
 800d2ac:	4a3f      	ldr	r2, [pc, #252]	; (800d3ac <Cursor_4+0x1f8>)
 800d2ae:	6013      	str	r3, [r2, #0]
 800d2b0:	4b41      	ldr	r3, [pc, #260]	; (800d3b8 <Cursor_4+0x204>)
 800d2b2:	681a      	ldr	r2, [r3, #0]
 800d2b4:	4b3d      	ldr	r3, [pc, #244]	; (800d3ac <Cursor_4+0x1f8>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	b292      	uxth	r2, r2
 800d2ba:	801a      	strh	r2, [r3, #0]
 800d2bc:	e0df      	b.n	800d47e <Cursor_4+0x2ca>
 800d2be:	bf00      	nop
 800d2c0:	4b3e      	ldr	r3, [pc, #248]	; (800d3bc <Cursor_4+0x208>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	3301      	adds	r3, #1
 800d2c6:	4a3d      	ldr	r2, [pc, #244]	; (800d3bc <Cursor_4+0x208>)
 800d2c8:	6013      	str	r3, [r2, #0]
 800d2ca:	4b3d      	ldr	r3, [pc, #244]	; (800d3c0 <Cursor_4+0x20c>)
 800d2cc:	681a      	ldr	r2, [r3, #0]
 800d2ce:	4b3b      	ldr	r3, [pc, #236]	; (800d3bc <Cursor_4+0x208>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	429a      	cmp	r2, r3
 800d2d4:	d166      	bne.n	800d3a4 <Cursor_4+0x1f0>
 800d2d6:	4b38      	ldr	r3, [pc, #224]	; (800d3b8 <Cursor_4+0x204>)
 800d2d8:	681a      	ldr	r2, [r3, #0]
 800d2da:	4b34      	ldr	r3, [pc, #208]	; (800d3ac <Cursor_4+0x1f8>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	b292      	uxth	r2, r2
 800d2e0:	801a      	strh	r2, [r3, #0]
 800d2e2:	4b32      	ldr	r3, [pc, #200]	; (800d3ac <Cursor_4+0x1f8>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	3302      	adds	r3, #2
 800d2e8:	4a30      	ldr	r2, [pc, #192]	; (800d3ac <Cursor_4+0x1f8>)
 800d2ea:	6013      	str	r3, [r2, #0]
 800d2ec:	4b32      	ldr	r3, [pc, #200]	; (800d3b8 <Cursor_4+0x204>)
 800d2ee:	681a      	ldr	r2, [r3, #0]
 800d2f0:	4b2e      	ldr	r3, [pc, #184]	; (800d3ac <Cursor_4+0x1f8>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	b292      	uxth	r2, r2
 800d2f6:	801a      	strh	r2, [r3, #0]
 800d2f8:	4b2c      	ldr	r3, [pc, #176]	; (800d3ac <Cursor_4+0x1f8>)
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	3302      	adds	r3, #2
 800d2fe:	4a2b      	ldr	r2, [pc, #172]	; (800d3ac <Cursor_4+0x1f8>)
 800d300:	6013      	str	r3, [r2, #0]
 800d302:	4b2d      	ldr	r3, [pc, #180]	; (800d3b8 <Cursor_4+0x204>)
 800d304:	681a      	ldr	r2, [r3, #0]
 800d306:	4b29      	ldr	r3, [pc, #164]	; (800d3ac <Cursor_4+0x1f8>)
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	b292      	uxth	r2, r2
 800d30c:	801a      	strh	r2, [r3, #0]
 800d30e:	4b27      	ldr	r3, [pc, #156]	; (800d3ac <Cursor_4+0x1f8>)
 800d310:	4a2c      	ldr	r2, [pc, #176]	; (800d3c4 <Cursor_4+0x210>)
 800d312:	601a      	str	r2, [r3, #0]
 800d314:	4b28      	ldr	r3, [pc, #160]	; (800d3b8 <Cursor_4+0x204>)
 800d316:	681a      	ldr	r2, [r3, #0]
 800d318:	4b24      	ldr	r3, [pc, #144]	; (800d3ac <Cursor_4+0x1f8>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	b292      	uxth	r2, r2
 800d31e:	801a      	strh	r2, [r3, #0]
 800d320:	4b22      	ldr	r3, [pc, #136]	; (800d3ac <Cursor_4+0x1f8>)
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	3302      	adds	r3, #2
 800d326:	4a21      	ldr	r2, [pc, #132]	; (800d3ac <Cursor_4+0x1f8>)
 800d328:	6013      	str	r3, [r2, #0]
 800d32a:	4b23      	ldr	r3, [pc, #140]	; (800d3b8 <Cursor_4+0x204>)
 800d32c:	681a      	ldr	r2, [r3, #0]
 800d32e:	4b1f      	ldr	r3, [pc, #124]	; (800d3ac <Cursor_4+0x1f8>)
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	b292      	uxth	r2, r2
 800d334:	801a      	strh	r2, [r3, #0]
 800d336:	4b1d      	ldr	r3, [pc, #116]	; (800d3ac <Cursor_4+0x1f8>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	3302      	adds	r3, #2
 800d33c:	4a1b      	ldr	r2, [pc, #108]	; (800d3ac <Cursor_4+0x1f8>)
 800d33e:	6013      	str	r3, [r2, #0]
 800d340:	4b1d      	ldr	r3, [pc, #116]	; (800d3b8 <Cursor_4+0x204>)
 800d342:	681a      	ldr	r2, [r3, #0]
 800d344:	4b19      	ldr	r3, [pc, #100]	; (800d3ac <Cursor_4+0x1f8>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	b292      	uxth	r2, r2
 800d34a:	801a      	strh	r2, [r3, #0]
 800d34c:	4b16      	ldr	r3, [pc, #88]	; (800d3a8 <Cursor_4+0x1f4>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	330a      	adds	r3, #10
 800d352:	005b      	lsls	r3, r3, #1
 800d354:	687a      	ldr	r2, [r7, #4]
 800d356:	4413      	add	r3, r2
 800d358:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d35c:	461a      	mov	r2, r3
 800d35e:	4b15      	ldr	r3, [pc, #84]	; (800d3b4 <Cursor_4+0x200>)
 800d360:	601a      	str	r2, [r3, #0]
 800d362:	4b14      	ldr	r3, [pc, #80]	; (800d3b4 <Cursor_4+0x200>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	f003 0302 	and.w	r3, r3, #2
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d12e      	bne.n	800d3cc <Cursor_4+0x218>
 800d36e:	4b0f      	ldr	r3, [pc, #60]	; (800d3ac <Cursor_4+0x1f8>)
 800d370:	4a0f      	ldr	r2, [pc, #60]	; (800d3b0 <Cursor_4+0x1fc>)
 800d372:	601a      	str	r2, [r3, #0]
 800d374:	4b0d      	ldr	r3, [pc, #52]	; (800d3ac <Cursor_4+0x1f8>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d37c:	4a12      	ldr	r2, [pc, #72]	; (800d3c8 <Cursor_4+0x214>)
 800d37e:	6013      	str	r3, [r2, #0]
 800d380:	4b0a      	ldr	r3, [pc, #40]	; (800d3ac <Cursor_4+0x1f8>)
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	3308      	adds	r3, #8
 800d386:	4a09      	ldr	r2, [pc, #36]	; (800d3ac <Cursor_4+0x1f8>)
 800d388:	6013      	str	r3, [r2, #0]
 800d38a:	4b0b      	ldr	r3, [pc, #44]	; (800d3b8 <Cursor_4+0x204>)
 800d38c:	681a      	ldr	r2, [r3, #0]
 800d38e:	4b07      	ldr	r3, [pc, #28]	; (800d3ac <Cursor_4+0x1f8>)
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	b292      	uxth	r2, r2
 800d394:	801a      	strh	r2, [r3, #0]
 800d396:	4b05      	ldr	r3, [pc, #20]	; (800d3ac <Cursor_4+0x1f8>)
 800d398:	681a      	ldr	r2, [r3, #0]
 800d39a:	4b0b      	ldr	r3, [pc, #44]	; (800d3c8 <Cursor_4+0x214>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d86a      	bhi.n	800d478 <Cursor_4+0x2c4>
 800d3a2:	e7ed      	b.n	800d380 <Cursor_4+0x1cc>
 800d3a4:	bf00      	nop
 800d3a6:	e012      	b.n	800d3ce <Cursor_4+0x21a>
 800d3a8:	20000a40 	.word	0x20000a40
 800d3ac:	20000bec 	.word	0x20000bec
 800d3b0:	20000be0 	.word	0x20000be0
 800d3b4:	20000a3c 	.word	0x20000a3c
 800d3b8:	20000be8 	.word	0x20000be8
 800d3bc:	20000a38 	.word	0x20000a38
 800d3c0:	20000bf8 	.word	0x20000bf8
 800d3c4:	20000a50 	.word	0x20000a50
 800d3c8:	20000c00 	.word	0x20000c00
 800d3cc:	bf00      	nop
 800d3ce:	4b34      	ldr	r3, [pc, #208]	; (800d4a0 <Cursor_4+0x2ec>)
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	3301      	adds	r3, #1
 800d3d4:	4a32      	ldr	r2, [pc, #200]	; (800d4a0 <Cursor_4+0x2ec>)
 800d3d6:	6013      	str	r3, [r2, #0]
 800d3d8:	4b31      	ldr	r3, [pc, #196]	; (800d4a0 <Cursor_4+0x2ec>)
 800d3da:	681a      	ldr	r2, [r3, #0]
 800d3dc:	4b31      	ldr	r3, [pc, #196]	; (800d4a4 <Cursor_4+0x2f0>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	429a      	cmp	r2, r3
 800d3e2:	d128      	bne.n	800d436 <Cursor_4+0x282>
 800d3e4:	4b30      	ldr	r3, [pc, #192]	; (800d4a8 <Cursor_4+0x2f4>)
 800d3e6:	681a      	ldr	r2, [r3, #0]
 800d3e8:	4b30      	ldr	r3, [pc, #192]	; (800d4ac <Cursor_4+0x2f8>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	b292      	uxth	r2, r2
 800d3ee:	801a      	strh	r2, [r3, #0]
 800d3f0:	4b2e      	ldr	r3, [pc, #184]	; (800d4ac <Cursor_4+0x2f8>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	3302      	adds	r3, #2
 800d3f6:	4a2d      	ldr	r2, [pc, #180]	; (800d4ac <Cursor_4+0x2f8>)
 800d3f8:	6013      	str	r3, [r2, #0]
 800d3fa:	4b2b      	ldr	r3, [pc, #172]	; (800d4a8 <Cursor_4+0x2f4>)
 800d3fc:	681a      	ldr	r2, [r3, #0]
 800d3fe:	4b2b      	ldr	r3, [pc, #172]	; (800d4ac <Cursor_4+0x2f8>)
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	b292      	uxth	r2, r2
 800d404:	801a      	strh	r2, [r3, #0]
 800d406:	4b29      	ldr	r3, [pc, #164]	; (800d4ac <Cursor_4+0x2f8>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d40e:	4a27      	ldr	r2, [pc, #156]	; (800d4ac <Cursor_4+0x2f8>)
 800d410:	6013      	str	r3, [r2, #0]
 800d412:	4b25      	ldr	r3, [pc, #148]	; (800d4a8 <Cursor_4+0x2f4>)
 800d414:	681a      	ldr	r2, [r3, #0]
 800d416:	4b25      	ldr	r3, [pc, #148]	; (800d4ac <Cursor_4+0x2f8>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	b292      	uxth	r2, r2
 800d41c:	801a      	strh	r2, [r3, #0]
 800d41e:	4b23      	ldr	r3, [pc, #140]	; (800d4ac <Cursor_4+0x2f8>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	3302      	adds	r3, #2
 800d424:	4a21      	ldr	r2, [pc, #132]	; (800d4ac <Cursor_4+0x2f8>)
 800d426:	6013      	str	r3, [r2, #0]
 800d428:	4b1f      	ldr	r3, [pc, #124]	; (800d4a8 <Cursor_4+0x2f4>)
 800d42a:	681a      	ldr	r2, [r3, #0]
 800d42c:	4b1f      	ldr	r3, [pc, #124]	; (800d4ac <Cursor_4+0x2f8>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	b292      	uxth	r2, r2
 800d432:	801a      	strh	r2, [r3, #0]
 800d434:	e023      	b.n	800d47e <Cursor_4+0x2ca>
 800d436:	bf00      	nop
 800d438:	4b19      	ldr	r3, [pc, #100]	; (800d4a0 <Cursor_4+0x2ec>)
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	3301      	adds	r3, #1
 800d43e:	4a18      	ldr	r2, [pc, #96]	; (800d4a0 <Cursor_4+0x2ec>)
 800d440:	6013      	str	r3, [r2, #0]
 800d442:	4b17      	ldr	r3, [pc, #92]	; (800d4a0 <Cursor_4+0x2ec>)
 800d444:	681a      	ldr	r2, [r3, #0]
 800d446:	4b17      	ldr	r3, [pc, #92]	; (800d4a4 <Cursor_4+0x2f0>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	429a      	cmp	r2, r3
 800d44c:	d116      	bne.n	800d47c <Cursor_4+0x2c8>
 800d44e:	4b16      	ldr	r3, [pc, #88]	; (800d4a8 <Cursor_4+0x2f4>)
 800d450:	681a      	ldr	r2, [r3, #0]
 800d452:	4b16      	ldr	r3, [pc, #88]	; (800d4ac <Cursor_4+0x2f8>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	b292      	uxth	r2, r2
 800d458:	801a      	strh	r2, [r3, #0]
 800d45a:	4b14      	ldr	r3, [pc, #80]	; (800d4ac <Cursor_4+0x2f8>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800d462:	4a12      	ldr	r2, [pc, #72]	; (800d4ac <Cursor_4+0x2f8>)
 800d464:	6013      	str	r3, [r2, #0]
 800d466:	4b10      	ldr	r3, [pc, #64]	; (800d4a8 <Cursor_4+0x2f4>)
 800d468:	681a      	ldr	r2, [r3, #0]
 800d46a:	4b10      	ldr	r3, [pc, #64]	; (800d4ac <Cursor_4+0x2f8>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	b292      	uxth	r2, r2
 800d470:	801a      	strh	r2, [r3, #0]
 800d472:	e004      	b.n	800d47e <Cursor_4+0x2ca>
 800d474:	bf00      	nop
 800d476:	e002      	b.n	800d47e <Cursor_4+0x2ca>
 800d478:	bf00      	nop
 800d47a:	e000      	b.n	800d47e <Cursor_4+0x2ca>
 800d47c:	bf00      	nop
 800d47e:	4b0c      	ldr	r3, [pc, #48]	; (800d4b0 <Cursor_4+0x2fc>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	3301      	adds	r3, #1
 800d484:	4a0a      	ldr	r2, [pc, #40]	; (800d4b0 <Cursor_4+0x2fc>)
 800d486:	6013      	str	r3, [r2, #0]
 800d488:	4b09      	ldr	r3, [pc, #36]	; (800d4b0 <Cursor_4+0x2fc>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	2b0a      	cmp	r3, #10
 800d48e:	d000      	beq.n	800d492 <Cursor_4+0x2de>
 800d490:	e697      	b.n	800d1c2 <Cursor_4+0xe>
 800d492:	bf00      	nop
 800d494:	370c      	adds	r7, #12
 800d496:	46bd      	mov	sp, r7
 800d498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49c:	4770      	bx	lr
 800d49e:	bf00      	nop
 800d4a0:	20000a38 	.word	0x20000a38
 800d4a4:	20000bf8 	.word	0x20000bf8
 800d4a8:	20000be8 	.word	0x20000be8
 800d4ac:	20000bec 	.word	0x20000bec
 800d4b0:	20000a40 	.word	0x20000a40

0800d4b4 <Send_LCD>:
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b082      	sub	sp, #8
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
 800d4bc:	4a12      	ldr	r2, [pc, #72]	; (800d508 <Send_LCD+0x54>)
 800d4be:	4b13      	ldr	r3, [pc, #76]	; (800d50c <Send_LCD+0x58>)
 800d4c0:	601a      	str	r2, [r3, #0]
 800d4c2:	4b13      	ldr	r3, [pc, #76]	; (800d510 <Send_LCD+0x5c>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	b21b      	sxth	r3, r3
 800d4c8:	2113      	movs	r1, #19
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f004 fec4 	bl	8012258 <LCD_Set_Posi>
 800d4d0:	4b10      	ldr	r3, [pc, #64]	; (800d514 <Send_LCD+0x60>)
 800d4d2:	22cb      	movs	r2, #203	; 0xcb
 800d4d4:	601a      	str	r2, [r3, #0]
 800d4d6:	4b0d      	ldr	r3, [pc, #52]	; (800d50c <Send_LCD+0x58>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	881b      	ldrh	r3, [r3, #0]
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f004 ff09 	bl	80122f4 <LCD_Set_Pixel>
 800d4e2:	4b0a      	ldr	r3, [pc, #40]	; (800d50c <Send_LCD+0x58>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	3302      	adds	r3, #2
 800d4e8:	4a08      	ldr	r2, [pc, #32]	; (800d50c <Send_LCD+0x58>)
 800d4ea:	6013      	str	r3, [r2, #0]
 800d4ec:	4b09      	ldr	r3, [pc, #36]	; (800d514 <Send_LCD+0x60>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	3b01      	subs	r3, #1
 800d4f2:	4a08      	ldr	r2, [pc, #32]	; (800d514 <Send_LCD+0x60>)
 800d4f4:	6013      	str	r3, [r2, #0]
 800d4f6:	4b07      	ldr	r3, [pc, #28]	; (800d514 <Send_LCD+0x60>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d000      	beq.n	800d500 <Send_LCD+0x4c>
 800d4fe:	e7ea      	b.n	800d4d6 <Send_LCD+0x22>
 800d500:	bf00      	nop
 800d502:	3708      	adds	r7, #8
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}
 800d508:	20000be0 	.word	0x20000be0
 800d50c:	20000a3c 	.word	0x20000a3c
 800d510:	20000bf8 	.word	0x20000bf8
 800d514:	20000bec 	.word	0x20000bec

0800d518 <Draw_Pop>:
 800d518:	b480      	push	{r7}
 800d51a:	b083      	sub	sp, #12
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
 800d520:	4b85      	ldr	r3, [pc, #532]	; (800d738 <Draw_Pop+0x220>)
 800d522:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800d526:	601a      	str	r2, [r3, #0]
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	3348      	adds	r3, #72	; 0x48
 800d52c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d530:	461a      	mov	r2, r3
 800d532:	4b82      	ldr	r3, [pc, #520]	; (800d73c <Draw_Pop+0x224>)
 800d534:	601a      	str	r2, [r3, #0]
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	334a      	adds	r3, #74	; 0x4a
 800d53a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d53e:	461a      	mov	r2, r3
 800d540:	4b7f      	ldr	r3, [pc, #508]	; (800d740 <Draw_Pop+0x228>)
 800d542:	601a      	str	r2, [r3, #0]
 800d544:	4b7f      	ldr	r3, [pc, #508]	; (800d744 <Draw_Pop+0x22c>)
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	4a7f      	ldr	r2, [pc, #508]	; (800d748 <Draw_Pop+0x230>)
 800d54a:	6013      	str	r3, [r2, #0]
 800d54c:	4b7f      	ldr	r3, [pc, #508]	; (800d74c <Draw_Pop+0x234>)
 800d54e:	681a      	ldr	r2, [r3, #0]
 800d550:	4b7d      	ldr	r3, [pc, #500]	; (800d748 <Draw_Pop+0x230>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	429a      	cmp	r2, r3
 800d556:	d10d      	bne.n	800d574 <Draw_Pop+0x5c>
 800d558:	4b78      	ldr	r3, [pc, #480]	; (800d73c <Draw_Pop+0x224>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	3306      	adds	r3, #6
 800d55e:	4a77      	ldr	r2, [pc, #476]	; (800d73c <Draw_Pop+0x224>)
 800d560:	6013      	str	r3, [r2, #0]
 800d562:	4b77      	ldr	r3, [pc, #476]	; (800d740 <Draw_Pop+0x228>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	3b0c      	subs	r3, #12
 800d568:	4a75      	ldr	r2, [pc, #468]	; (800d740 <Draw_Pop+0x228>)
 800d56a:	6013      	str	r3, [r2, #0]
 800d56c:	4b72      	ldr	r3, [pc, #456]	; (800d738 <Draw_Pop+0x220>)
 800d56e:	f04f 1208 	mov.w	r2, #524296	; 0x80008
 800d572:	601a      	str	r2, [r3, #0]
 800d574:	4b73      	ldr	r3, [pc, #460]	; (800d744 <Draw_Pop+0x22c>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	3301      	adds	r3, #1
 800d57a:	4a73      	ldr	r2, [pc, #460]	; (800d748 <Draw_Pop+0x230>)
 800d57c:	6013      	str	r3, [r2, #0]
 800d57e:	4b73      	ldr	r3, [pc, #460]	; (800d74c <Draw_Pop+0x234>)
 800d580:	681a      	ldr	r2, [r3, #0]
 800d582:	4b71      	ldr	r3, [pc, #452]	; (800d748 <Draw_Pop+0x230>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	429a      	cmp	r2, r3
 800d588:	d10d      	bne.n	800d5a6 <Draw_Pop+0x8e>
 800d58a:	4b6c      	ldr	r3, [pc, #432]	; (800d73c <Draw_Pop+0x224>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	3304      	adds	r3, #4
 800d590:	4a6a      	ldr	r2, [pc, #424]	; (800d73c <Draw_Pop+0x224>)
 800d592:	6013      	str	r3, [r2, #0]
 800d594:	4b6a      	ldr	r3, [pc, #424]	; (800d740 <Draw_Pop+0x228>)
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	3b08      	subs	r3, #8
 800d59a:	4a69      	ldr	r2, [pc, #420]	; (800d740 <Draw_Pop+0x228>)
 800d59c:	6013      	str	r3, [r2, #0]
 800d59e:	4b66      	ldr	r3, [pc, #408]	; (800d738 <Draw_Pop+0x220>)
 800d5a0:	f04f 1204 	mov.w	r2, #262148	; 0x40004
 800d5a4:	601a      	str	r2, [r3, #0]
 800d5a6:	4b67      	ldr	r3, [pc, #412]	; (800d744 <Draw_Pop+0x22c>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	3302      	adds	r3, #2
 800d5ac:	4a66      	ldr	r2, [pc, #408]	; (800d748 <Draw_Pop+0x230>)
 800d5ae:	6013      	str	r3, [r2, #0]
 800d5b0:	4b66      	ldr	r3, [pc, #408]	; (800d74c <Draw_Pop+0x234>)
 800d5b2:	681a      	ldr	r2, [r3, #0]
 800d5b4:	4b64      	ldr	r3, [pc, #400]	; (800d748 <Draw_Pop+0x230>)
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	d10d      	bne.n	800d5d8 <Draw_Pop+0xc0>
 800d5bc:	4b5f      	ldr	r3, [pc, #380]	; (800d73c <Draw_Pop+0x224>)
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	3302      	adds	r3, #2
 800d5c2:	4a5e      	ldr	r2, [pc, #376]	; (800d73c <Draw_Pop+0x224>)
 800d5c4:	6013      	str	r3, [r2, #0]
 800d5c6:	4b5e      	ldr	r3, [pc, #376]	; (800d740 <Draw_Pop+0x228>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	3b04      	subs	r3, #4
 800d5cc:	4a5c      	ldr	r2, [pc, #368]	; (800d740 <Draw_Pop+0x228>)
 800d5ce:	6013      	str	r3, [r2, #0]
 800d5d0:	4b59      	ldr	r3, [pc, #356]	; (800d738 <Draw_Pop+0x220>)
 800d5d2:	f04f 1202 	mov.w	r2, #131074	; 0x20002
 800d5d6:	601a      	str	r2, [r3, #0]
 800d5d8:	4b5d      	ldr	r3, [pc, #372]	; (800d750 <Draw_Pop+0x238>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	3b03      	subs	r3, #3
 800d5de:	4a5a      	ldr	r2, [pc, #360]	; (800d748 <Draw_Pop+0x230>)
 800d5e0:	6013      	str	r3, [r2, #0]
 800d5e2:	4b5a      	ldr	r3, [pc, #360]	; (800d74c <Draw_Pop+0x234>)
 800d5e4:	681a      	ldr	r2, [r3, #0]
 800d5e6:	4b58      	ldr	r3, [pc, #352]	; (800d748 <Draw_Pop+0x230>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	429a      	cmp	r2, r3
 800d5ec:	d10d      	bne.n	800d60a <Draw_Pop+0xf2>
 800d5ee:	4b53      	ldr	r3, [pc, #332]	; (800d73c <Draw_Pop+0x224>)
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	3302      	adds	r3, #2
 800d5f4:	4a51      	ldr	r2, [pc, #324]	; (800d73c <Draw_Pop+0x224>)
 800d5f6:	6013      	str	r3, [r2, #0]
 800d5f8:	4b51      	ldr	r3, [pc, #324]	; (800d740 <Draw_Pop+0x228>)
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	3b04      	subs	r3, #4
 800d5fe:	4a50      	ldr	r2, [pc, #320]	; (800d740 <Draw_Pop+0x228>)
 800d600:	6013      	str	r3, [r2, #0]
 800d602:	4b4d      	ldr	r3, [pc, #308]	; (800d738 <Draw_Pop+0x220>)
 800d604:	f04f 1202 	mov.w	r2, #131074	; 0x20002
 800d608:	601a      	str	r2, [r3, #0]
 800d60a:	4b51      	ldr	r3, [pc, #324]	; (800d750 <Draw_Pop+0x238>)
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	3b02      	subs	r3, #2
 800d610:	4a4d      	ldr	r2, [pc, #308]	; (800d748 <Draw_Pop+0x230>)
 800d612:	6013      	str	r3, [r2, #0]
 800d614:	4b4d      	ldr	r3, [pc, #308]	; (800d74c <Draw_Pop+0x234>)
 800d616:	681a      	ldr	r2, [r3, #0]
 800d618:	4b4b      	ldr	r3, [pc, #300]	; (800d748 <Draw_Pop+0x230>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	429a      	cmp	r2, r3
 800d61e:	d10d      	bne.n	800d63c <Draw_Pop+0x124>
 800d620:	4b46      	ldr	r3, [pc, #280]	; (800d73c <Draw_Pop+0x224>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	3304      	adds	r3, #4
 800d626:	4a45      	ldr	r2, [pc, #276]	; (800d73c <Draw_Pop+0x224>)
 800d628:	6013      	str	r3, [r2, #0]
 800d62a:	4b45      	ldr	r3, [pc, #276]	; (800d740 <Draw_Pop+0x228>)
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	3b08      	subs	r3, #8
 800d630:	4a43      	ldr	r2, [pc, #268]	; (800d740 <Draw_Pop+0x228>)
 800d632:	6013      	str	r3, [r2, #0]
 800d634:	4b40      	ldr	r3, [pc, #256]	; (800d738 <Draw_Pop+0x220>)
 800d636:	f04f 1204 	mov.w	r2, #262148	; 0x40004
 800d63a:	601a      	str	r2, [r3, #0]
 800d63c:	4b44      	ldr	r3, [pc, #272]	; (800d750 <Draw_Pop+0x238>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	3b01      	subs	r3, #1
 800d642:	4a41      	ldr	r2, [pc, #260]	; (800d748 <Draw_Pop+0x230>)
 800d644:	6013      	str	r3, [r2, #0]
 800d646:	4b41      	ldr	r3, [pc, #260]	; (800d74c <Draw_Pop+0x234>)
 800d648:	681a      	ldr	r2, [r3, #0]
 800d64a:	4b3f      	ldr	r3, [pc, #252]	; (800d748 <Draw_Pop+0x230>)
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	429a      	cmp	r2, r3
 800d650:	d10d      	bne.n	800d66e <Draw_Pop+0x156>
 800d652:	4b3a      	ldr	r3, [pc, #232]	; (800d73c <Draw_Pop+0x224>)
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	3306      	adds	r3, #6
 800d658:	4a38      	ldr	r2, [pc, #224]	; (800d73c <Draw_Pop+0x224>)
 800d65a:	6013      	str	r3, [r2, #0]
 800d65c:	4b38      	ldr	r3, [pc, #224]	; (800d740 <Draw_Pop+0x228>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	3b0c      	subs	r3, #12
 800d662:	4a37      	ldr	r2, [pc, #220]	; (800d740 <Draw_Pop+0x228>)
 800d664:	6013      	str	r3, [r2, #0]
 800d666:	4b34      	ldr	r3, [pc, #208]	; (800d738 <Draw_Pop+0x220>)
 800d668:	f04f 1208 	mov.w	r2, #524296	; 0x80008
 800d66c:	601a      	str	r2, [r3, #0]
 800d66e:	4b33      	ldr	r3, [pc, #204]	; (800d73c <Draw_Pop+0x224>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	085b      	lsrs	r3, r3, #1
 800d674:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d678:	005b      	lsls	r3, r3, #1
 800d67a:	4a36      	ldr	r2, [pc, #216]	; (800d754 <Draw_Pop+0x23c>)
 800d67c:	4413      	add	r3, r2
 800d67e:	4a36      	ldr	r2, [pc, #216]	; (800d758 <Draw_Pop+0x240>)
 800d680:	6013      	str	r3, [r2, #0]
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	334e      	adds	r3, #78	; 0x4e
 800d686:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d68a:	461a      	mov	r2, r3
 800d68c:	4b33      	ldr	r3, [pc, #204]	; (800d75c <Draw_Pop+0x244>)
 800d68e:	601a      	str	r2, [r3, #0]
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	3350      	adds	r3, #80	; 0x50
 800d694:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d698:	461a      	mov	r2, r3
 800d69a:	4b31      	ldr	r3, [pc, #196]	; (800d760 <Draw_Pop+0x248>)
 800d69c:	601a      	str	r2, [r3, #0]
 800d69e:	4b31      	ldr	r3, [pc, #196]	; (800d764 <Draw_Pop+0x24c>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	881b      	ldrh	r3, [r3, #0]
 800d6a4:	461a      	mov	r2, r3
 800d6a6:	4b28      	ldr	r3, [pc, #160]	; (800d748 <Draw_Pop+0x230>)
 800d6a8:	601a      	str	r2, [r3, #0]
 800d6aa:	4b2e      	ldr	r3, [pc, #184]	; (800d764 <Draw_Pop+0x24c>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	3302      	adds	r3, #2
 800d6b0:	4a2c      	ldr	r2, [pc, #176]	; (800d764 <Draw_Pop+0x24c>)
 800d6b2:	6013      	str	r3, [r2, #0]
 800d6b4:	4b29      	ldr	r3, [pc, #164]	; (800d75c <Draw_Pop+0x244>)
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d100      	bne.n	800d6be <Draw_Pop+0x1a6>
 800d6bc:	e054      	b.n	800d768 <Draw_Pop+0x250>
 800d6be:	bf00      	nop
 800d6c0:	4b21      	ldr	r3, [pc, #132]	; (800d748 <Draw_Pop+0x230>)
 800d6c2:	681a      	ldr	r2, [r3, #0]
 800d6c4:	4b1c      	ldr	r3, [pc, #112]	; (800d738 <Draw_Pop+0x220>)
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	4013      	ands	r3, r2
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d006      	beq.n	800d6dc <Draw_Pop+0x1c4>
 800d6ce:	4b22      	ldr	r3, [pc, #136]	; (800d758 <Draw_Pop+0x240>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	781b      	ldrb	r3, [r3, #0]
 800d6d4:	461a      	mov	r2, r3
 800d6d6:	4b22      	ldr	r3, [pc, #136]	; (800d760 <Draw_Pop+0x248>)
 800d6d8:	601a      	str	r2, [r3, #0]
 800d6da:	e005      	b.n	800d6e8 <Draw_Pop+0x1d0>
 800d6dc:	4b1e      	ldr	r3, [pc, #120]	; (800d758 <Draw_Pop+0x240>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	781b      	ldrb	r3, [r3, #0]
 800d6e2:	461a      	mov	r2, r3
 800d6e4:	4b1d      	ldr	r3, [pc, #116]	; (800d75c <Draw_Pop+0x244>)
 800d6e6:	601a      	str	r2, [r3, #0]
 800d6e8:	4b1b      	ldr	r3, [pc, #108]	; (800d758 <Draw_Pop+0x240>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	3301      	adds	r3, #1
 800d6ee:	4a1a      	ldr	r2, [pc, #104]	; (800d758 <Draw_Pop+0x240>)
 800d6f0:	6013      	str	r3, [r2, #0]
 800d6f2:	4b13      	ldr	r3, [pc, #76]	; (800d740 <Draw_Pop+0x228>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	3b02      	subs	r3, #2
 800d6f8:	4a11      	ldr	r2, [pc, #68]	; (800d740 <Draw_Pop+0x228>)
 800d6fa:	6013      	str	r3, [r2, #0]
 800d6fc:	4b10      	ldr	r3, [pc, #64]	; (800d740 <Draw_Pop+0x228>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d066      	beq.n	800d7d2 <Draw_Pop+0x2ba>
 800d704:	4b0c      	ldr	r3, [pc, #48]	; (800d738 <Draw_Pop+0x220>)
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	da0f      	bge.n	800d72c <Draw_Pop+0x214>
 800d70c:	4b15      	ldr	r3, [pc, #84]	; (800d764 <Draw_Pop+0x24c>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	881b      	ldrh	r3, [r3, #0]
 800d712:	461a      	mov	r2, r3
 800d714:	4b0c      	ldr	r3, [pc, #48]	; (800d748 <Draw_Pop+0x230>)
 800d716:	601a      	str	r2, [r3, #0]
 800d718:	4b12      	ldr	r3, [pc, #72]	; (800d764 <Draw_Pop+0x24c>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	3302      	adds	r3, #2
 800d71e:	4a11      	ldr	r2, [pc, #68]	; (800d764 <Draw_Pop+0x24c>)
 800d720:	6013      	str	r3, [r2, #0]
 800d722:	4b05      	ldr	r3, [pc, #20]	; (800d738 <Draw_Pop+0x220>)
 800d724:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800d728:	601a      	str	r2, [r3, #0]
 800d72a:	e7c9      	b.n	800d6c0 <Draw_Pop+0x1a8>
 800d72c:	4b02      	ldr	r3, [pc, #8]	; (800d738 <Draw_Pop+0x220>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	005b      	lsls	r3, r3, #1
 800d732:	4a01      	ldr	r2, [pc, #4]	; (800d738 <Draw_Pop+0x220>)
 800d734:	6013      	str	r3, [r2, #0]
 800d736:	e7c3      	b.n	800d6c0 <Draw_Pop+0x1a8>
 800d738:	20000c00 	.word	0x20000c00
 800d73c:	20000a3c 	.word	0x20000a3c
 800d740:	20000be8 	.word	0x20000be8
 800d744:	20000be4 	.word	0x20000be4
 800d748:	20000a40 	.word	0x20000a40
 800d74c:	20000bf8 	.word	0x20000bf8
 800d750:	20000bf4 	.word	0x20000bf4
 800d754:	20000a48 	.word	0x20000a48
 800d758:	20000bec 	.word	0x20000bec
 800d75c:	20000a38 	.word	0x20000a38
 800d760:	20000bfc 	.word	0x20000bfc
 800d764:	20000c04 	.word	0x20000c04
 800d768:	4b1e      	ldr	r3, [pc, #120]	; (800d7e4 <Draw_Pop+0x2cc>)
 800d76a:	681a      	ldr	r2, [r3, #0]
 800d76c:	4b1e      	ldr	r3, [pc, #120]	; (800d7e8 <Draw_Pop+0x2d0>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	4013      	ands	r3, r2
 800d772:	2b00      	cmp	r3, #0
 800d774:	d005      	beq.n	800d782 <Draw_Pop+0x26a>
 800d776:	4b1d      	ldr	r3, [pc, #116]	; (800d7ec <Draw_Pop+0x2d4>)
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	781b      	ldrb	r3, [r3, #0]
 800d77c:	461a      	mov	r2, r3
 800d77e:	4b1c      	ldr	r3, [pc, #112]	; (800d7f0 <Draw_Pop+0x2d8>)
 800d780:	601a      	str	r2, [r3, #0]
 800d782:	4b1a      	ldr	r3, [pc, #104]	; (800d7ec <Draw_Pop+0x2d4>)
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	3301      	adds	r3, #1
 800d788:	4a18      	ldr	r2, [pc, #96]	; (800d7ec <Draw_Pop+0x2d4>)
 800d78a:	6013      	str	r3, [r2, #0]
 800d78c:	4b19      	ldr	r3, [pc, #100]	; (800d7f4 <Draw_Pop+0x2dc>)
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	3b02      	subs	r3, #2
 800d792:	4a18      	ldr	r2, [pc, #96]	; (800d7f4 <Draw_Pop+0x2dc>)
 800d794:	6013      	str	r3, [r2, #0]
 800d796:	4b17      	ldr	r3, [pc, #92]	; (800d7f4 <Draw_Pop+0x2dc>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d01b      	beq.n	800d7d6 <Draw_Pop+0x2be>
 800d79e:	4b12      	ldr	r3, [pc, #72]	; (800d7e8 <Draw_Pop+0x2d0>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	da0f      	bge.n	800d7c6 <Draw_Pop+0x2ae>
 800d7a6:	4b14      	ldr	r3, [pc, #80]	; (800d7f8 <Draw_Pop+0x2e0>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	881b      	ldrh	r3, [r3, #0]
 800d7ac:	461a      	mov	r2, r3
 800d7ae:	4b13      	ldr	r3, [pc, #76]	; (800d7fc <Draw_Pop+0x2e4>)
 800d7b0:	601a      	str	r2, [r3, #0]
 800d7b2:	4b11      	ldr	r3, [pc, #68]	; (800d7f8 <Draw_Pop+0x2e0>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	3302      	adds	r3, #2
 800d7b8:	4a0f      	ldr	r2, [pc, #60]	; (800d7f8 <Draw_Pop+0x2e0>)
 800d7ba:	6013      	str	r3, [r2, #0]
 800d7bc:	4b0a      	ldr	r3, [pc, #40]	; (800d7e8 <Draw_Pop+0x2d0>)
 800d7be:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800d7c2:	601a      	str	r2, [r3, #0]
 800d7c4:	e7d0      	b.n	800d768 <Draw_Pop+0x250>
 800d7c6:	4b08      	ldr	r3, [pc, #32]	; (800d7e8 <Draw_Pop+0x2d0>)
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	005b      	lsls	r3, r3, #1
 800d7cc:	4a06      	ldr	r2, [pc, #24]	; (800d7e8 <Draw_Pop+0x2d0>)
 800d7ce:	6013      	str	r3, [r2, #0]
 800d7d0:	e7ca      	b.n	800d768 <Draw_Pop+0x250>
 800d7d2:	bf00      	nop
 800d7d4:	e000      	b.n	800d7d8 <Draw_Pop+0x2c0>
 800d7d6:	bf00      	nop
 800d7d8:	370c      	adds	r7, #12
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e0:	4770      	bx	lr
 800d7e2:	bf00      	nop
 800d7e4:	20000bf8 	.word	0x20000bf8
 800d7e8:	20000c00 	.word	0x20000c00
 800d7ec:	20000bec 	.word	0x20000bec
 800d7f0:	20000bfc 	.word	0x20000bfc
 800d7f4:	20000be8 	.word	0x20000be8
 800d7f8:	20000c04 	.word	0x20000c04
 800d7fc:	20000a40 	.word	0x20000a40

0800d800 <DrawWindow>:
 800d800:	b580      	push	{r7, lr}
 800d802:	b082      	sub	sp, #8
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
 800d808:	6039      	str	r1, [r7, #0]
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	4a9b      	ldr	r2, [pc, #620]	; (800da7c <DrawWindow+0x27c>)
 800d80e:	6013      	str	r3, [r2, #0]
 800d810:	4b9b      	ldr	r3, [pc, #620]	; (800da80 <DrawWindow+0x280>)
 800d812:	2200      	movs	r2, #0
 800d814:	601a      	str	r2, [r3, #0]
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	f503 7361 	add.w	r3, r3, #900	; 0x384
 800d81c:	4a99      	ldr	r2, [pc, #612]	; (800da84 <DrawWindow+0x284>)
 800d81e:	6013      	str	r3, [r2, #0]
 800d820:	683b      	ldr	r3, [r7, #0]
 800d822:	3344      	adds	r3, #68	; 0x44
 800d824:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d828:	461a      	mov	r2, r3
 800d82a:	4b97      	ldr	r3, [pc, #604]	; (800da88 <DrawWindow+0x288>)
 800d82c:	601a      	str	r2, [r3, #0]
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	3346      	adds	r3, #70	; 0x46
 800d832:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d836:	461a      	mov	r2, r3
 800d838:	4b94      	ldr	r3, [pc, #592]	; (800da8c <DrawWindow+0x28c>)
 800d83a:	601a      	str	r2, [r3, #0]
 800d83c:	4b92      	ldr	r3, [pc, #584]	; (800da88 <DrawWindow+0x288>)
 800d83e:	681a      	ldr	r2, [r3, #0]
 800d840:	4b92      	ldr	r3, [pc, #584]	; (800da8c <DrawWindow+0x28c>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	4413      	add	r3, r2
 800d846:	4a91      	ldr	r2, [pc, #580]	; (800da8c <DrawWindow+0x28c>)
 800d848:	6013      	str	r3, [r2, #0]
 800d84a:	4b8d      	ldr	r3, [pc, #564]	; (800da80 <DrawWindow+0x280>)
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d102      	bne.n	800d858 <DrawWindow+0x58>
 800d852:	f7ff f93b 	bl	800cacc <Buld_0>
 800d856:	e064      	b.n	800d922 <DrawWindow+0x122>
 800d858:	4b89      	ldr	r3, [pc, #548]	; (800da80 <DrawWindow+0x280>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800d860:	d102      	bne.n	800d868 <DrawWindow+0x68>
 800d862:	f7ff f933 	bl	800cacc <Buld_0>
 800d866:	e05c      	b.n	800d922 <DrawWindow+0x122>
 800d868:	4b85      	ldr	r3, [pc, #532]	; (800da80 <DrawWindow+0x280>)
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	2b01      	cmp	r3, #1
 800d86e:	d102      	bne.n	800d876 <DrawWindow+0x76>
 800d870:	f7ff f938 	bl	800cae4 <Buld_1>
 800d874:	e055      	b.n	800d922 <DrawWindow+0x122>
 800d876:	4b86      	ldr	r3, [pc, #536]	; (800da90 <DrawWindow+0x290>)
 800d878:	f240 122d 	movw	r2, #301	; 0x12d
 800d87c:	601a      	str	r2, [r3, #0]
 800d87e:	4b80      	ldr	r3, [pc, #512]	; (800da80 <DrawWindow+0x280>)
 800d880:	681a      	ldr	r2, [r3, #0]
 800d882:	4b83      	ldr	r3, [pc, #524]	; (800da90 <DrawWindow+0x290>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	429a      	cmp	r2, r3
 800d888:	d102      	bne.n	800d890 <DrawWindow+0x90>
 800d88a:	f7ff f92b 	bl	800cae4 <Buld_1>
 800d88e:	e048      	b.n	800d922 <DrawWindow+0x122>
 800d890:	4b7b      	ldr	r3, [pc, #492]	; (800da80 <DrawWindow+0x280>)
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	3b01      	subs	r3, #1
 800d896:	4a7e      	ldr	r2, [pc, #504]	; (800da90 <DrawWindow+0x290>)
 800d898:	6013      	str	r3, [r2, #0]
 800d89a:	4b7e      	ldr	r3, [pc, #504]	; (800da94 <DrawWindow+0x294>)
 800d89c:	2219      	movs	r2, #25
 800d89e:	601a      	str	r2, [r3, #0]
 800d8a0:	4b7b      	ldr	r3, [pc, #492]	; (800da90 <DrawWindow+0x290>)
 800d8a2:	681a      	ldr	r2, [r3, #0]
 800d8a4:	4b7b      	ldr	r3, [pc, #492]	; (800da94 <DrawWindow+0x294>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8ac:	4a7a      	ldr	r2, [pc, #488]	; (800da98 <DrawWindow+0x298>)
 800d8ae:	6013      	str	r3, [r2, #0]
 800d8b0:	4b79      	ldr	r3, [pc, #484]	; (800da98 <DrawWindow+0x298>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	4a77      	ldr	r2, [pc, #476]	; (800da94 <DrawWindow+0x294>)
 800d8b6:	6812      	ldr	r2, [r2, #0]
 800d8b8:	fb02 f303 	mul.w	r3, r2, r3
 800d8bc:	4a76      	ldr	r2, [pc, #472]	; (800da98 <DrawWindow+0x298>)
 800d8be:	6013      	str	r3, [r2, #0]
 800d8c0:	4b73      	ldr	r3, [pc, #460]	; (800da90 <DrawWindow+0x290>)
 800d8c2:	681a      	ldr	r2, [r3, #0]
 800d8c4:	4b74      	ldr	r3, [pc, #464]	; (800da98 <DrawWindow+0x298>)
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	1ad3      	subs	r3, r2, r3
 800d8ca:	4a73      	ldr	r2, [pc, #460]	; (800da98 <DrawWindow+0x298>)
 800d8cc:	6013      	str	r3, [r2, #0]
 800d8ce:	4b72      	ldr	r3, [pc, #456]	; (800da98 <DrawWindow+0x298>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d102      	bne.n	800d8dc <DrawWindow+0xdc>
 800d8d6:	f7ff f975 	bl	800cbc4 <Buld_4>
 800d8da:	e022      	b.n	800d922 <DrawWindow+0x122>
 800d8dc:	4b6d      	ldr	r3, [pc, #436]	; (800da94 <DrawWindow+0x294>)
 800d8de:	2205      	movs	r2, #5
 800d8e0:	601a      	str	r2, [r3, #0]
 800d8e2:	4b6b      	ldr	r3, [pc, #428]	; (800da90 <DrawWindow+0x290>)
 800d8e4:	681a      	ldr	r2, [r3, #0]
 800d8e6:	4b6b      	ldr	r3, [pc, #428]	; (800da94 <DrawWindow+0x294>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8ee:	4a6a      	ldr	r2, [pc, #424]	; (800da98 <DrawWindow+0x298>)
 800d8f0:	6013      	str	r3, [r2, #0]
 800d8f2:	4b69      	ldr	r3, [pc, #420]	; (800da98 <DrawWindow+0x298>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	4a67      	ldr	r2, [pc, #412]	; (800da94 <DrawWindow+0x294>)
 800d8f8:	6812      	ldr	r2, [r2, #0]
 800d8fa:	fb02 f303 	mul.w	r3, r2, r3
 800d8fe:	4a66      	ldr	r2, [pc, #408]	; (800da98 <DrawWindow+0x298>)
 800d900:	6013      	str	r3, [r2, #0]
 800d902:	4b63      	ldr	r3, [pc, #396]	; (800da90 <DrawWindow+0x290>)
 800d904:	681a      	ldr	r2, [r3, #0]
 800d906:	4b64      	ldr	r3, [pc, #400]	; (800da98 <DrawWindow+0x298>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	1ad3      	subs	r3, r2, r3
 800d90c:	4a62      	ldr	r2, [pc, #392]	; (800da98 <DrawWindow+0x298>)
 800d90e:	6013      	str	r3, [r2, #0]
 800d910:	4b61      	ldr	r3, [pc, #388]	; (800da98 <DrawWindow+0x298>)
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d102      	bne.n	800d91e <DrawWindow+0x11e>
 800d918:	f7ff f92e 	bl	800cb78 <Buld_3>
 800d91c:	e001      	b.n	800d922 <DrawWindow+0x122>
 800d91e:	f7ff f909 	bl	800cb34 <Buld_2>
 800d922:	4b57      	ldr	r3, [pc, #348]	; (800da80 <DrawWindow+0x280>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	2b02      	cmp	r3, #2
 800d928:	d96c      	bls.n	800da04 <DrawWindow+0x204>
 800d92a:	4b55      	ldr	r3, [pc, #340]	; (800da80 <DrawWindow+0x280>)
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d932:	d267      	bcs.n	800da04 <DrawWindow+0x204>
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	3306      	adds	r3, #6
 800d938:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d93c:	461a      	mov	r2, r3
 800d93e:	4b54      	ldr	r3, [pc, #336]	; (800da90 <DrawWindow+0x290>)
 800d940:	601a      	str	r2, [r3, #0]
 800d942:	4b53      	ldr	r3, [pc, #332]	; (800da90 <DrawWindow+0x290>)
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	f003 0304 	and.w	r3, r3, #4
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d10f      	bne.n	800d96e <DrawWindow+0x16e>
 800d94e:	4b50      	ldr	r3, [pc, #320]	; (800da90 <DrawWindow+0x290>)
 800d950:	222e      	movs	r2, #46	; 0x2e
 800d952:	601a      	str	r2, [r3, #0]
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	331a      	adds	r3, #26
 800d958:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d95c:	461a      	mov	r2, r3
 800d95e:	4b4f      	ldr	r3, [pc, #316]	; (800da9c <DrawWindow+0x29c>)
 800d960:	601a      	str	r2, [r3, #0]
 800d962:	4b4f      	ldr	r3, [pc, #316]	; (800daa0 <DrawWindow+0x2a0>)
 800d964:	2208      	movs	r2, #8
 800d966:	601a      	str	r2, [r3, #0]
 800d968:	2001      	movs	r0, #1
 800d96a:	f7ff f951 	bl	800cc10 <Draw_Digit_Analog>
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	3304      	adds	r3, #4
 800d972:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d976:	461a      	mov	r2, r3
 800d978:	4b45      	ldr	r3, [pc, #276]	; (800da90 <DrawWindow+0x290>)
 800d97a:	601a      	str	r2, [r3, #0]
 800d97c:	4b44      	ldr	r3, [pc, #272]	; (800da90 <DrawWindow+0x290>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	f003 0304 	and.w	r3, r3, #4
 800d984:	2b00      	cmp	r3, #0
 800d986:	d10f      	bne.n	800d9a8 <DrawWindow+0x1a8>
 800d988:	4b41      	ldr	r3, [pc, #260]	; (800da90 <DrawWindow+0x290>)
 800d98a:	222c      	movs	r2, #44	; 0x2c
 800d98c:	601a      	str	r2, [r3, #0]
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	3318      	adds	r3, #24
 800d992:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d996:	461a      	mov	r2, r3
 800d998:	4b40      	ldr	r3, [pc, #256]	; (800da9c <DrawWindow+0x29c>)
 800d99a:	601a      	str	r2, [r3, #0]
 800d99c:	4b40      	ldr	r3, [pc, #256]	; (800daa0 <DrawWindow+0x2a0>)
 800d99e:	2204      	movs	r2, #4
 800d9a0:	601a      	str	r2, [r3, #0]
 800d9a2:	2001      	movs	r0, #1
 800d9a4:	f7ff f934 	bl	800cc10 <Draw_Digit_Analog>
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	3302      	adds	r3, #2
 800d9ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d9b0:	461a      	mov	r2, r3
 800d9b2:	4b37      	ldr	r3, [pc, #220]	; (800da90 <DrawWindow+0x290>)
 800d9b4:	601a      	str	r2, [r3, #0]
 800d9b6:	4b36      	ldr	r3, [pc, #216]	; (800da90 <DrawWindow+0x290>)
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	f003 0304 	and.w	r3, r3, #4
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d10a      	bne.n	800d9d8 <DrawWindow+0x1d8>
 800d9c2:	4b33      	ldr	r3, [pc, #204]	; (800da90 <DrawWindow+0x290>)
 800d9c4:	222a      	movs	r2, #42	; 0x2a
 800d9c6:	601a      	str	r2, [r3, #0]
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800d9ce:	4a33      	ldr	r2, [pc, #204]	; (800da9c <DrawWindow+0x29c>)
 800d9d0:	6013      	str	r3, [r2, #0]
 800d9d2:	2000      	movs	r0, #0
 800d9d4:	f7ff f91c 	bl	800cc10 <Draw_Digit_Analog>
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d9de:	461a      	mov	r2, r3
 800d9e0:	4b2b      	ldr	r3, [pc, #172]	; (800da90 <DrawWindow+0x290>)
 800d9e2:	601a      	str	r2, [r3, #0]
 800d9e4:	4b2a      	ldr	r3, [pc, #168]	; (800da90 <DrawWindow+0x290>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	f003 0304 	and.w	r3, r3, #4
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d10b      	bne.n	800da08 <DrawWindow+0x208>
 800d9f0:	4b27      	ldr	r3, [pc, #156]	; (800da90 <DrawWindow+0x290>)
 800d9f2:	2228      	movs	r2, #40	; 0x28
 800d9f4:	601a      	str	r2, [r3, #0]
 800d9f6:	4a29      	ldr	r2, [pc, #164]	; (800da9c <DrawWindow+0x29c>)
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	6013      	str	r3, [r2, #0]
 800d9fc:	2000      	movs	r0, #0
 800d9fe:	f7ff f907 	bl	800cc10 <Draw_Digit_Analog>
 800da02:	e002      	b.n	800da0a <DrawWindow+0x20a>
 800da04:	bf00      	nop
 800da06:	e000      	b.n	800da0a <DrawWindow+0x20a>
 800da08:	bf00      	nop
 800da0a:	4b1d      	ldr	r3, [pc, #116]	; (800da80 <DrawWindow+0x280>)
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d103      	bne.n	800da1a <DrawWindow+0x21a>
 800da12:	6838      	ldr	r0, [r7, #0]
 800da14:	f7ff fa14 	bl	800ce40 <Cursor_0>
 800da18:	e047      	b.n	800daaa <DrawWindow+0x2aa>
 800da1a:	4b19      	ldr	r3, [pc, #100]	; (800da80 <DrawWindow+0x280>)
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800da22:	d103      	bne.n	800da2c <DrawWindow+0x22c>
 800da24:	6838      	ldr	r0, [r7, #0]
 800da26:	f7ff fa0b 	bl	800ce40 <Cursor_0>
 800da2a:	e03e      	b.n	800daaa <DrawWindow+0x2aa>
 800da2c:	4b14      	ldr	r3, [pc, #80]	; (800da80 <DrawWindow+0x280>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	2b01      	cmp	r3, #1
 800da32:	d103      	bne.n	800da3c <DrawWindow+0x23c>
 800da34:	6838      	ldr	r0, [r7, #0]
 800da36:	f7ff fa8d 	bl	800cf54 <Cursor_1>
 800da3a:	e036      	b.n	800daaa <DrawWindow+0x2aa>
 800da3c:	4b16      	ldr	r3, [pc, #88]	; (800da98 <DrawWindow+0x298>)
 800da3e:	f240 122d 	movw	r2, #301	; 0x12d
 800da42:	601a      	str	r2, [r3, #0]
 800da44:	4b0e      	ldr	r3, [pc, #56]	; (800da80 <DrawWindow+0x280>)
 800da46:	681a      	ldr	r2, [r3, #0]
 800da48:	4b13      	ldr	r3, [pc, #76]	; (800da98 <DrawWindow+0x298>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	429a      	cmp	r2, r3
 800da4e:	d103      	bne.n	800da58 <DrawWindow+0x258>
 800da50:	6838      	ldr	r0, [r7, #0]
 800da52:	f7ff fa7f 	bl	800cf54 <Cursor_1>
 800da56:	e028      	b.n	800daaa <DrawWindow+0x2aa>
 800da58:	4b09      	ldr	r3, [pc, #36]	; (800da80 <DrawWindow+0x280>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	2b02      	cmp	r3, #2
 800da5e:	d103      	bne.n	800da68 <DrawWindow+0x268>
 800da60:	6838      	ldr	r0, [r7, #0]
 800da62:	f7ff faeb 	bl	800d03c <Cursor_2>
 800da66:	e020      	b.n	800daaa <DrawWindow+0x2aa>
 800da68:	4b05      	ldr	r3, [pc, #20]	; (800da80 <DrawWindow+0x280>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800da70:	d118      	bne.n	800daa4 <DrawWindow+0x2a4>
 800da72:	6838      	ldr	r0, [r7, #0]
 800da74:	f7ff fae2 	bl	800d03c <Cursor_2>
 800da78:	e017      	b.n	800daaa <DrawWindow+0x2aa>
 800da7a:	bf00      	nop
 800da7c:	20000a44 	.word	0x20000a44
 800da80:	20000bf8 	.word	0x20000bf8
 800da84:	20000c04 	.word	0x20000c04
 800da88:	20000be4 	.word	0x20000be4
 800da8c:	20000bf4 	.word	0x20000bf4
 800da90:	20000a40 	.word	0x20000a40
 800da94:	20000be8 	.word	0x20000be8
 800da98:	20000a3c 	.word	0x20000a3c
 800da9c:	20000bec 	.word	0x20000bec
 800daa0:	20000a38 	.word	0x20000a38
 800daa4:	6838      	ldr	r0, [r7, #0]
 800daa6:	f7ff fb1d 	bl	800d0e4 <Cursor_3>
 800daaa:	6838      	ldr	r0, [r7, #0]
 800daac:	f7ff fb82 	bl	800d1b4 <Cursor_4>
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	334c      	adds	r3, #76	; 0x4c
 800dab4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dab8:	461a      	mov	r2, r3
 800daba:	4b17      	ldr	r3, [pc, #92]	; (800db18 <DrawWindow+0x318>)
 800dabc:	601a      	str	r2, [r3, #0]
 800dabe:	4b16      	ldr	r3, [pc, #88]	; (800db18 <DrawWindow+0x318>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	f003 0301 	and.w	r3, r3, #1
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d00f      	beq.n	800daea <DrawWindow+0x2ea>
 800daca:	4b14      	ldr	r3, [pc, #80]	; (800db1c <DrawWindow+0x31c>)
 800dacc:	681a      	ldr	r2, [r3, #0]
 800dace:	4b14      	ldr	r3, [pc, #80]	; (800db20 <DrawWindow+0x320>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	429a      	cmp	r2, r3
 800dad4:	d30b      	bcc.n	800daee <DrawWindow+0x2ee>
 800dad6:	4b11      	ldr	r3, [pc, #68]	; (800db1c <DrawWindow+0x31c>)
 800dad8:	681a      	ldr	r2, [r3, #0]
 800dada:	4b12      	ldr	r3, [pc, #72]	; (800db24 <DrawWindow+0x324>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	429a      	cmp	r2, r3
 800dae0:	d207      	bcs.n	800daf2 <DrawWindow+0x2f2>
 800dae2:	6838      	ldr	r0, [r7, #0]
 800dae4:	f7ff fd18 	bl	800d518 <Draw_Pop>
 800dae8:	e004      	b.n	800daf4 <DrawWindow+0x2f4>
 800daea:	bf00      	nop
 800daec:	e002      	b.n	800daf4 <DrawWindow+0x2f4>
 800daee:	bf00      	nop
 800daf0:	e000      	b.n	800daf4 <DrawWindow+0x2f4>
 800daf2:	bf00      	nop
 800daf4:	6838      	ldr	r0, [r7, #0]
 800daf6:	f7ff fcdd 	bl	800d4b4 <Send_LCD>
 800dafa:	4b08      	ldr	r3, [pc, #32]	; (800db1c <DrawWindow+0x31c>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800db02:	d005      	beq.n	800db10 <DrawWindow+0x310>
 800db04:	4b05      	ldr	r3, [pc, #20]	; (800db1c <DrawWindow+0x31c>)
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	3301      	adds	r3, #1
 800db0a:	4a04      	ldr	r2, [pc, #16]	; (800db1c <DrawWindow+0x31c>)
 800db0c:	6013      	str	r3, [r2, #0]
 800db0e:	e69c      	b.n	800d84a <DrawWindow+0x4a>
 800db10:	bf00      	nop
 800db12:	3708      	adds	r7, #8
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}
 800db18:	20000a40 	.word	0x20000a40
 800db1c:	20000bf8 	.word	0x20000bf8
 800db20:	20000be4 	.word	0x20000be4
 800db24:	20000bf4 	.word	0x20000bf4

0800db28 <DispChar8x14>:
 800db28:	b580      	push	{r7, lr}
 800db2a:	b084      	sub	sp, #16
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	4603      	mov	r3, r0
 800db30:	460a      	mov	r2, r1
 800db32:	71fb      	strb	r3, [r7, #7]
 800db34:	4613      	mov	r3, r2
 800db36:	71bb      	strb	r3, [r7, #6]
 800db38:	2300      	movs	r3, #0
 800db3a:	81fb      	strh	r3, [r7, #14]
 800db3c:	e06d      	b.n	800dc1a <DispChar8x14+0xf2>
 800db3e:	79fb      	ldrb	r3, [r7, #7]
 800db40:	f003 0310 	and.w	r3, r3, #16
 800db44:	2b00      	cmp	r3, #0
 800db46:	d00a      	beq.n	800db5e <DispChar8x14+0x36>
 800db48:	79bb      	ldrb	r3, [r7, #6]
 800db4a:	3b40      	subs	r3, #64	; 0x40
 800db4c:	00da      	lsls	r2, r3, #3
 800db4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800db52:	4413      	add	r3, r2
 800db54:	4a35      	ldr	r2, [pc, #212]	; (800dc2c <DispChar8x14+0x104>)
 800db56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db5a:	817b      	strh	r3, [r7, #10]
 800db5c:	e005      	b.n	800db6a <DispChar8x14+0x42>
 800db5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800db62:	4a33      	ldr	r2, [pc, #204]	; (800dc30 <DispChar8x14+0x108>)
 800db64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db68:	817b      	strh	r3, [r7, #10]
 800db6a:	79fb      	ldrb	r3, [r7, #7]
 800db6c:	f003 0320 	and.w	r3, r3, #32
 800db70:	2b00      	cmp	r3, #0
 800db72:	d00c      	beq.n	800db8e <DispChar8x14+0x66>
 800db74:	89fb      	ldrh	r3, [r7, #14]
 800db76:	f003 0301 	and.w	r3, r3, #1
 800db7a:	b29b      	uxth	r3, r3
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d001      	beq.n	800db84 <DispChar8x14+0x5c>
 800db80:	4a2c      	ldr	r2, [pc, #176]	; (800dc34 <DispChar8x14+0x10c>)
 800db82:	e001      	b.n	800db88 <DispChar8x14+0x60>
 800db84:	f245 5255 	movw	r2, #21845	; 0x5555
 800db88:	897b      	ldrh	r3, [r7, #10]
 800db8a:	4013      	ands	r3, r2
 800db8c:	817b      	strh	r3, [r7, #10]
 800db8e:	4b2a      	ldr	r3, [pc, #168]	; (800dc38 <DispChar8x14+0x110>)
 800db90:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db94:	4a29      	ldr	r2, [pc, #164]	; (800dc3c <DispChar8x14+0x114>)
 800db96:	f9b2 2000 	ldrsh.w	r2, [r2]
 800db9a:	4611      	mov	r1, r2
 800db9c:	4618      	mov	r0, r3
 800db9e:	f004 fb5b 	bl	8012258 <LCD_Set_Posi>
 800dba2:	2300      	movs	r3, #0
 800dba4:	81bb      	strh	r3, [r7, #12]
 800dba6:	e027      	b.n	800dbf8 <DispChar8x14+0xd0>
 800dba8:	897b      	ldrh	r3, [r7, #10]
 800dbaa:	f003 0304 	and.w	r3, r3, #4
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d00d      	beq.n	800dbce <DispChar8x14+0xa6>
 800dbb2:	79fb      	ldrb	r3, [r7, #7]
 800dbb4:	f003 0301 	and.w	r3, r3, #1
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d002      	beq.n	800dbc2 <DispChar8x14+0x9a>
 800dbbc:	4b20      	ldr	r3, [pc, #128]	; (800dc40 <DispChar8x14+0x118>)
 800dbbe:	881b      	ldrh	r3, [r3, #0]
 800dbc0:	e001      	b.n	800dbc6 <DispChar8x14+0x9e>
 800dbc2:	4b20      	ldr	r3, [pc, #128]	; (800dc44 <DispChar8x14+0x11c>)
 800dbc4:	881b      	ldrh	r3, [r3, #0]
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f004 fb94 	bl	80122f4 <LCD_Set_Pixel>
 800dbcc:	e00c      	b.n	800dbe8 <DispChar8x14+0xc0>
 800dbce:	79fb      	ldrb	r3, [r7, #7]
 800dbd0:	f003 0301 	and.w	r3, r3, #1
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d002      	beq.n	800dbde <DispChar8x14+0xb6>
 800dbd8:	4b1a      	ldr	r3, [pc, #104]	; (800dc44 <DispChar8x14+0x11c>)
 800dbda:	881b      	ldrh	r3, [r3, #0]
 800dbdc:	e001      	b.n	800dbe2 <DispChar8x14+0xba>
 800dbde:	4b18      	ldr	r3, [pc, #96]	; (800dc40 <DispChar8x14+0x118>)
 800dbe0:	881b      	ldrh	r3, [r3, #0]
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f004 fb86 	bl	80122f4 <LCD_Set_Pixel>
 800dbe8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800dbec:	105b      	asrs	r3, r3, #1
 800dbee:	817b      	strh	r3, [r7, #10]
 800dbf0:	89bb      	ldrh	r3, [r7, #12]
 800dbf2:	3301      	adds	r3, #1
 800dbf4:	b29b      	uxth	r3, r3
 800dbf6:	81bb      	strh	r3, [r7, #12]
 800dbf8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dbfc:	2b0d      	cmp	r3, #13
 800dbfe:	ddd3      	ble.n	800dba8 <DispChar8x14+0x80>
 800dc00:	4b0d      	ldr	r3, [pc, #52]	; (800dc38 <DispChar8x14+0x110>)
 800dc02:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc06:	b29b      	uxth	r3, r3
 800dc08:	3301      	adds	r3, #1
 800dc0a:	b29b      	uxth	r3, r3
 800dc0c:	b21a      	sxth	r2, r3
 800dc0e:	4b0a      	ldr	r3, [pc, #40]	; (800dc38 <DispChar8x14+0x110>)
 800dc10:	801a      	strh	r2, [r3, #0]
 800dc12:	89fb      	ldrh	r3, [r7, #14]
 800dc14:	3301      	adds	r3, #1
 800dc16:	b29b      	uxth	r3, r3
 800dc18:	81fb      	strh	r3, [r7, #14]
 800dc1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dc1e:	2b07      	cmp	r3, #7
 800dc20:	dd8d      	ble.n	800db3e <DispChar8x14+0x16>
 800dc22:	bf00      	nop
 800dc24:	bf00      	nop
 800dc26:	3710      	adds	r7, #16
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bd80      	pop	{r7, pc}
 800dc2c:	08001290 	.word	0x08001290
 800dc30:	08000c90 	.word	0x08000c90
 800dc34:	ffffaaaa 	.word	0xffffaaaa
 800dc38:	2000078a 	.word	0x2000078a
 800dc3c:	2000078c 	.word	0x2000078c
 800dc40:	200015ce 	.word	0x200015ce
 800dc44:	200015cc 	.word	0x200015cc

0800dc48 <DispStr8x14>:
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b086      	sub	sp, #24
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	607b      	str	r3, [r7, #4]
 800dc50:	4603      	mov	r3, r0
 800dc52:	81fb      	strh	r3, [r7, #14]
 800dc54:	460b      	mov	r3, r1
 800dc56:	81bb      	strh	r3, [r7, #12]
 800dc58:	4613      	mov	r3, r2
 800dc5a:	72fb      	strb	r3, [r7, #11]
 800dc5c:	4a22      	ldr	r2, [pc, #136]	; (800dce8 <DispStr8x14+0xa0>)
 800dc5e:	89fb      	ldrh	r3, [r7, #14]
 800dc60:	8013      	strh	r3, [r2, #0]
 800dc62:	4a22      	ldr	r2, [pc, #136]	; (800dcec <DispStr8x14+0xa4>)
 800dc64:	89bb      	ldrh	r3, [r7, #12]
 800dc66:	8013      	strh	r3, [r2, #0]
 800dc68:	4b1f      	ldr	r3, [pc, #124]	; (800dce8 <DispStr8x14+0xa0>)
 800dc6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc6e:	4a1f      	ldr	r2, [pc, #124]	; (800dcec <DispStr8x14+0xa4>)
 800dc70:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dc74:	4611      	mov	r1, r2
 800dc76:	4618      	mov	r0, r3
 800dc78:	f004 faee 	bl	8012258 <LCD_Set_Posi>
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	82fb      	strh	r3, [r7, #22]
 800dc80:	e012      	b.n	800dca8 <DispStr8x14+0x60>
 800dc82:	7afb      	ldrb	r3, [r7, #11]
 800dc84:	f003 0301 	and.w	r3, r3, #1
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d002      	beq.n	800dc92 <DispStr8x14+0x4a>
 800dc8c:	4b18      	ldr	r3, [pc, #96]	; (800dcf0 <DispStr8x14+0xa8>)
 800dc8e:	881b      	ldrh	r3, [r3, #0]
 800dc90:	e001      	b.n	800dc96 <DispStr8x14+0x4e>
 800dc92:	4b18      	ldr	r3, [pc, #96]	; (800dcf4 <DispStr8x14+0xac>)
 800dc94:	881b      	ldrh	r3, [r3, #0]
 800dc96:	4618      	mov	r0, r3
 800dc98:	f004 fb2c 	bl	80122f4 <LCD_Set_Pixel>
 800dc9c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dca0:	b29b      	uxth	r3, r3
 800dca2:	3301      	adds	r3, #1
 800dca4:	b29b      	uxth	r3, r3
 800dca6:	82fb      	strh	r3, [r7, #22]
 800dca8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dcac:	2b0d      	cmp	r3, #13
 800dcae:	dde8      	ble.n	800dc82 <DispStr8x14+0x3a>
 800dcb0:	4b0d      	ldr	r3, [pc, #52]	; (800dce8 <DispStr8x14+0xa0>)
 800dcb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dcb6:	b29b      	uxth	r3, r3
 800dcb8:	3301      	adds	r3, #1
 800dcba:	b29b      	uxth	r3, r3
 800dcbc:	b21a      	sxth	r2, r3
 800dcbe:	4b0a      	ldr	r3, [pc, #40]	; (800dce8 <DispStr8x14+0xa0>)
 800dcc0:	801a      	strh	r2, [r3, #0]
 800dcc2:	e008      	b.n	800dcd6 <DispStr8x14+0x8e>
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	1c5a      	adds	r2, r3, #1
 800dcc8:	607a      	str	r2, [r7, #4]
 800dcca:	781a      	ldrb	r2, [r3, #0]
 800dccc:	7afb      	ldrb	r3, [r7, #11]
 800dcce:	4611      	mov	r1, r2
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f7ff ff29 	bl	800db28 <DispChar8x14>
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	781b      	ldrb	r3, [r3, #0]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d1f2      	bne.n	800dcc4 <DispStr8x14+0x7c>
 800dcde:	bf00      	nop
 800dce0:	bf00      	nop
 800dce2:	3718      	adds	r7, #24
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}
 800dce8:	2000078a 	.word	0x2000078a
 800dcec:	2000078c 	.word	0x2000078c
 800dcf0:	200015cc 	.word	0x200015cc
 800dcf4:	200015ce 	.word	0x200015ce

0800dcf8 <SetColor>:
 800dcf8:	b480      	push	{r7}
 800dcfa:	b083      	sub	sp, #12
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	4603      	mov	r3, r0
 800dd00:	460a      	mov	r2, r1
 800dd02:	80fb      	strh	r3, [r7, #6]
 800dd04:	4613      	mov	r3, r2
 800dd06:	80bb      	strh	r3, [r7, #4]
 800dd08:	4a05      	ldr	r2, [pc, #20]	; (800dd20 <SetColor+0x28>)
 800dd0a:	88fb      	ldrh	r3, [r7, #6]
 800dd0c:	8013      	strh	r3, [r2, #0]
 800dd0e:	4a05      	ldr	r2, [pc, #20]	; (800dd24 <SetColor+0x2c>)
 800dd10:	88bb      	ldrh	r3, [r7, #4]
 800dd12:	8013      	strh	r3, [r2, #0]
 800dd14:	bf00      	nop
 800dd16:	370c      	adds	r7, #12
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1e:	4770      	bx	lr
 800dd20:	200015ce 	.word	0x200015ce
 800dd24:	200015cc 	.word	0x200015cc

0800dd28 <DispStr>:
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b086      	sub	sp, #24
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	607b      	str	r3, [r7, #4]
 800dd30:	4603      	mov	r3, r0
 800dd32:	81fb      	strh	r3, [r7, #14]
 800dd34:	460b      	mov	r3, r1
 800dd36:	81bb      	strh	r3, [r7, #12]
 800dd38:	4613      	mov	r3, r2
 800dd3a:	72fb      	strb	r3, [r7, #11]
 800dd3c:	4a5e      	ldr	r2, [pc, #376]	; (800deb8 <DispStr+0x190>)
 800dd3e:	89fb      	ldrh	r3, [r7, #14]
 800dd40:	8013      	strh	r3, [r2, #0]
 800dd42:	4a5e      	ldr	r2, [pc, #376]	; (800debc <DispStr+0x194>)
 800dd44:	89bb      	ldrh	r3, [r7, #12]
 800dd46:	8013      	strh	r3, [r2, #0]
 800dd48:	4b5b      	ldr	r3, [pc, #364]	; (800deb8 <DispStr+0x190>)
 800dd4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd4e:	4a5b      	ldr	r2, [pc, #364]	; (800debc <DispStr+0x194>)
 800dd50:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dd54:	4611      	mov	r1, r2
 800dd56:	4618      	mov	r0, r3
 800dd58:	f004 fa7e 	bl	8012258 <LCD_Set_Posi>
 800dd5c:	e0a1      	b.n	800dea2 <DispStr+0x17a>
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	1c5a      	adds	r2, r3, #1
 800dd62:	607a      	str	r2, [r7, #4]
 800dd64:	781b      	ldrb	r3, [r3, #0]
 800dd66:	747b      	strb	r3, [r7, #17]
 800dd68:	2300      	movs	r3, #0
 800dd6a:	82fb      	strh	r3, [r7, #22]
 800dd6c:	e094      	b.n	800de98 <DispStr+0x170>
 800dd6e:	7afb      	ldrb	r3, [r7, #11]
 800dd70:	f003 0310 	and.w	r3, r3, #16
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d10e      	bne.n	800dd96 <DispStr+0x6e>
 800dd78:	7c7b      	ldrb	r3, [r7, #17]
 800dd7a:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800dd7e:	4613      	mov	r3, r2
 800dd80:	005b      	lsls	r3, r3, #1
 800dd82:	4413      	add	r3, r2
 800dd84:	005b      	lsls	r3, r3, #1
 800dd86:	461a      	mov	r2, r3
 800dd88:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dd8c:	4413      	add	r3, r2
 800dd8e:	4a4c      	ldr	r2, [pc, #304]	; (800dec0 <DispStr+0x198>)
 800dd90:	5cd3      	ldrb	r3, [r2, r3]
 800dd92:	827b      	strh	r3, [r7, #18]
 800dd94:	e00d      	b.n	800ddb2 <DispStr+0x8a>
 800dd96:	7c7b      	ldrb	r3, [r7, #17]
 800dd98:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800dd9c:	4613      	mov	r3, r2
 800dd9e:	005b      	lsls	r3, r3, #1
 800dda0:	4413      	add	r3, r2
 800dda2:	005b      	lsls	r3, r3, #1
 800dda4:	461a      	mov	r2, r3
 800dda6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ddaa:	4413      	add	r3, r2
 800ddac:	4a45      	ldr	r2, [pc, #276]	; (800dec4 <DispStr+0x19c>)
 800ddae:	5cd3      	ldrb	r3, [r2, r3]
 800ddb0:	827b      	strh	r3, [r7, #18]
 800ddb2:	7afb      	ldrb	r3, [r7, #11]
 800ddb4:	f003 0320 	and.w	r3, r3, #32
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d00c      	beq.n	800ddd6 <DispStr+0xae>
 800ddbc:	8afb      	ldrh	r3, [r7, #22]
 800ddbe:	f003 0301 	and.w	r3, r3, #1
 800ddc2:	b29b      	uxth	r3, r3
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d001      	beq.n	800ddcc <DispStr+0xa4>
 800ddc8:	4a3f      	ldr	r2, [pc, #252]	; (800dec8 <DispStr+0x1a0>)
 800ddca:	e001      	b.n	800ddd0 <DispStr+0xa8>
 800ddcc:	f245 5255 	movw	r2, #21845	; 0x5555
 800ddd0:	8a7b      	ldrh	r3, [r7, #18]
 800ddd2:	4013      	ands	r3, r2
 800ddd4:	827b      	strh	r3, [r7, #18]
 800ddd6:	4b38      	ldr	r3, [pc, #224]	; (800deb8 <DispStr+0x190>)
 800ddd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dddc:	4a37      	ldr	r2, [pc, #220]	; (800debc <DispStr+0x194>)
 800ddde:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dde2:	4611      	mov	r1, r2
 800dde4:	4618      	mov	r0, r3
 800dde6:	f004 fa37 	bl	8012258 <LCD_Set_Posi>
 800ddea:	7afb      	ldrb	r3, [r7, #11]
 800ddec:	f003 0301 	and.w	r3, r3, #1
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d002      	beq.n	800ddfa <DispStr+0xd2>
 800ddf4:	4b35      	ldr	r3, [pc, #212]	; (800decc <DispStr+0x1a4>)
 800ddf6:	881b      	ldrh	r3, [r3, #0]
 800ddf8:	e001      	b.n	800ddfe <DispStr+0xd6>
 800ddfa:	4b35      	ldr	r3, [pc, #212]	; (800ded0 <DispStr+0x1a8>)
 800ddfc:	881b      	ldrh	r3, [r3, #0]
 800ddfe:	4618      	mov	r0, r3
 800de00:	f004 fa78 	bl	80122f4 <LCD_Set_Pixel>
 800de04:	4b2c      	ldr	r3, [pc, #176]	; (800deb8 <DispStr+0x190>)
 800de06:	f9b3 2000 	ldrsh.w	r2, [r3]
 800de0a:	4b2c      	ldr	r3, [pc, #176]	; (800debc <DispStr+0x194>)
 800de0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de10:	b29b      	uxth	r3, r3
 800de12:	3301      	adds	r3, #1
 800de14:	b29b      	uxth	r3, r3
 800de16:	b21b      	sxth	r3, r3
 800de18:	4619      	mov	r1, r3
 800de1a:	4610      	mov	r0, r2
 800de1c:	f004 fa1c 	bl	8012258 <LCD_Set_Posi>
 800de20:	2300      	movs	r3, #0
 800de22:	82bb      	strh	r3, [r7, #20]
 800de24:	e027      	b.n	800de76 <DispStr+0x14e>
 800de26:	8a7b      	ldrh	r3, [r7, #18]
 800de28:	f003 0301 	and.w	r3, r3, #1
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d00d      	beq.n	800de4c <DispStr+0x124>
 800de30:	7afb      	ldrb	r3, [r7, #11]
 800de32:	f003 0301 	and.w	r3, r3, #1
 800de36:	2b00      	cmp	r3, #0
 800de38:	d002      	beq.n	800de40 <DispStr+0x118>
 800de3a:	4b25      	ldr	r3, [pc, #148]	; (800ded0 <DispStr+0x1a8>)
 800de3c:	881b      	ldrh	r3, [r3, #0]
 800de3e:	e001      	b.n	800de44 <DispStr+0x11c>
 800de40:	4b22      	ldr	r3, [pc, #136]	; (800decc <DispStr+0x1a4>)
 800de42:	881b      	ldrh	r3, [r3, #0]
 800de44:	4618      	mov	r0, r3
 800de46:	f004 fa55 	bl	80122f4 <LCD_Set_Pixel>
 800de4a:	e00c      	b.n	800de66 <DispStr+0x13e>
 800de4c:	7afb      	ldrb	r3, [r7, #11]
 800de4e:	f003 0301 	and.w	r3, r3, #1
 800de52:	2b00      	cmp	r3, #0
 800de54:	d002      	beq.n	800de5c <DispStr+0x134>
 800de56:	4b1d      	ldr	r3, [pc, #116]	; (800decc <DispStr+0x1a4>)
 800de58:	881b      	ldrh	r3, [r3, #0]
 800de5a:	e001      	b.n	800de60 <DispStr+0x138>
 800de5c:	4b1c      	ldr	r3, [pc, #112]	; (800ded0 <DispStr+0x1a8>)
 800de5e:	881b      	ldrh	r3, [r3, #0]
 800de60:	4618      	mov	r0, r3
 800de62:	f004 fa47 	bl	80122f4 <LCD_Set_Pixel>
 800de66:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800de6a:	105b      	asrs	r3, r3, #1
 800de6c:	827b      	strh	r3, [r7, #18]
 800de6e:	8abb      	ldrh	r3, [r7, #20]
 800de70:	3301      	adds	r3, #1
 800de72:	b29b      	uxth	r3, r3
 800de74:	82bb      	strh	r3, [r7, #20]
 800de76:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800de7a:	2b09      	cmp	r3, #9
 800de7c:	ddd3      	ble.n	800de26 <DispStr+0xfe>
 800de7e:	4b0e      	ldr	r3, [pc, #56]	; (800deb8 <DispStr+0x190>)
 800de80:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de84:	b29b      	uxth	r3, r3
 800de86:	3301      	adds	r3, #1
 800de88:	b29b      	uxth	r3, r3
 800de8a:	b21a      	sxth	r2, r3
 800de8c:	4b0a      	ldr	r3, [pc, #40]	; (800deb8 <DispStr+0x190>)
 800de8e:	801a      	strh	r2, [r3, #0]
 800de90:	8afb      	ldrh	r3, [r7, #22]
 800de92:	3301      	adds	r3, #1
 800de94:	b29b      	uxth	r3, r3
 800de96:	82fb      	strh	r3, [r7, #22]
 800de98:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800de9c:	2b05      	cmp	r3, #5
 800de9e:	f77f af66 	ble.w	800dd6e <DispStr+0x46>
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	781b      	ldrb	r3, [r3, #0]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	f47f af59 	bne.w	800dd5e <DispStr+0x36>
 800deac:	bf00      	nop
 800deae:	bf00      	nop
 800deb0:	3718      	adds	r7, #24
 800deb2:	46bd      	mov	sp, r7
 800deb4:	bd80      	pop	{r7, pc}
 800deb6:	bf00      	nop
 800deb8:	2000078a 	.word	0x2000078a
 800debc:	2000078c 	.word	0x2000078c
 800dec0:	080016c4 	.word	0x080016c4
 800dec4:	08001490 	.word	0x08001490
 800dec8:	ffffaaaa 	.word	0xffffaaaa
 800decc:	200015cc 	.word	0x200015cc
 800ded0:	200015ce 	.word	0x200015ce

0800ded4 <Draw_Circle_D>:
 800ded4:	b590      	push	{r4, r7, lr}
 800ded6:	b085      	sub	sp, #20
 800ded8:	af00      	add	r7, sp, #0
 800deda:	4604      	mov	r4, r0
 800dedc:	4608      	mov	r0, r1
 800dede:	4611      	mov	r1, r2
 800dee0:	461a      	mov	r2, r3
 800dee2:	4623      	mov	r3, r4
 800dee4:	71fb      	strb	r3, [r7, #7]
 800dee6:	4603      	mov	r3, r0
 800dee8:	80bb      	strh	r3, [r7, #4]
 800deea:	460b      	mov	r3, r1
 800deec:	807b      	strh	r3, [r7, #2]
 800deee:	4613      	mov	r3, r2
 800def0:	803b      	strh	r3, [r7, #0]
 800def2:	8c3b      	ldrh	r3, [r7, #32]
 800def4:	005b      	lsls	r3, r3, #1
 800def6:	b29a      	uxth	r2, r3
 800def8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800defa:	4413      	add	r3, r2
 800defc:	b29b      	uxth	r3, r3
 800defe:	3305      	adds	r3, #5
 800df00:	b29b      	uxth	r3, r3
 800df02:	84bb      	strh	r3, [r7, #36]	; 0x24
 800df04:	88ba      	ldrh	r2, [r7, #4]
 800df06:	8c3b      	ldrh	r3, [r7, #32]
 800df08:	1ad3      	subs	r3, r2, r3
 800df0a:	b29b      	uxth	r3, r3
 800df0c:	80bb      	strh	r3, [r7, #4]
 800df0e:	88bb      	ldrh	r3, [r7, #4]
 800df10:	817b      	strh	r3, [r7, #10]
 800df12:	887b      	ldrh	r3, [r7, #2]
 800df14:	3302      	adds	r3, #2
 800df16:	b29b      	uxth	r3, r3
 800df18:	813b      	strh	r3, [r7, #8]
 800df1a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800df1e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800df22:	4611      	mov	r1, r2
 800df24:	4618      	mov	r0, r3
 800df26:	f004 f997 	bl	8012258 <LCD_Set_Posi>
 800df2a:	2300      	movs	r3, #0
 800df2c:	81bb      	strh	r3, [r7, #12]
 800df2e:	e012      	b.n	800df56 <Draw_Circle_D+0x82>
 800df30:	79fb      	ldrb	r3, [r7, #7]
 800df32:	f003 0301 	and.w	r3, r3, #1
 800df36:	2b00      	cmp	r3, #0
 800df38:	d002      	beq.n	800df40 <Draw_Circle_D+0x6c>
 800df3a:	4bad      	ldr	r3, [pc, #692]	; (800e1f0 <Draw_Circle_D+0x31c>)
 800df3c:	881b      	ldrh	r3, [r3, #0]
 800df3e:	e001      	b.n	800df44 <Draw_Circle_D+0x70>
 800df40:	4bac      	ldr	r3, [pc, #688]	; (800e1f4 <Draw_Circle_D+0x320>)
 800df42:	881b      	ldrh	r3, [r3, #0]
 800df44:	4618      	mov	r0, r3
 800df46:	f004 f9d5 	bl	80122f4 <LCD_Set_Pixel>
 800df4a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800df4e:	b29b      	uxth	r3, r3
 800df50:	3301      	adds	r3, #1
 800df52:	b29b      	uxth	r3, r3
 800df54:	81bb      	strh	r3, [r7, #12]
 800df56:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800df5a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800df5e:	3b04      	subs	r3, #4
 800df60:	429a      	cmp	r2, r3
 800df62:	dbe5      	blt.n	800df30 <Draw_Circle_D+0x5c>
 800df64:	88ba      	ldrh	r2, [r7, #4]
 800df66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df68:	4413      	add	r3, r2
 800df6a:	b29b      	uxth	r3, r3
 800df6c:	817b      	strh	r3, [r7, #10]
 800df6e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800df72:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800df76:	4611      	mov	r1, r2
 800df78:	4618      	mov	r0, r3
 800df7a:	f004 f96d 	bl	8012258 <LCD_Set_Posi>
 800df7e:	2300      	movs	r3, #0
 800df80:	81bb      	strh	r3, [r7, #12]
 800df82:	e012      	b.n	800dfaa <Draw_Circle_D+0xd6>
 800df84:	79fb      	ldrb	r3, [r7, #7]
 800df86:	f003 0301 	and.w	r3, r3, #1
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d002      	beq.n	800df94 <Draw_Circle_D+0xc0>
 800df8e:	4b98      	ldr	r3, [pc, #608]	; (800e1f0 <Draw_Circle_D+0x31c>)
 800df90:	881b      	ldrh	r3, [r3, #0]
 800df92:	e001      	b.n	800df98 <Draw_Circle_D+0xc4>
 800df94:	4b97      	ldr	r3, [pc, #604]	; (800e1f4 <Draw_Circle_D+0x320>)
 800df96:	881b      	ldrh	r3, [r3, #0]
 800df98:	4618      	mov	r0, r3
 800df9a:	f004 f9ab 	bl	80122f4 <LCD_Set_Pixel>
 800df9e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dfa2:	b29b      	uxth	r3, r3
 800dfa4:	3301      	adds	r3, #1
 800dfa6:	b29b      	uxth	r3, r3
 800dfa8:	81bb      	strh	r3, [r7, #12]
 800dfaa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800dfae:	f9b7 3000 	ldrsh.w	r3, [r7]
 800dfb2:	3b04      	subs	r3, #4
 800dfb4:	429a      	cmp	r2, r3
 800dfb6:	dbe5      	blt.n	800df84 <Draw_Circle_D+0xb0>
 800dfb8:	88bb      	ldrh	r3, [r7, #4]
 800dfba:	3301      	adds	r3, #1
 800dfbc:	b29b      	uxth	r3, r3
 800dfbe:	817b      	strh	r3, [r7, #10]
 800dfc0:	887b      	ldrh	r3, [r7, #2]
 800dfc2:	3301      	adds	r3, #1
 800dfc4:	b29b      	uxth	r3, r3
 800dfc6:	813b      	strh	r3, [r7, #8]
 800dfc8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800dfcc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800dfd0:	4611      	mov	r1, r2
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f004 f940 	bl	8012258 <LCD_Set_Posi>
 800dfd8:	2300      	movs	r3, #0
 800dfda:	81bb      	strh	r3, [r7, #12]
 800dfdc:	e012      	b.n	800e004 <Draw_Circle_D+0x130>
 800dfde:	79fb      	ldrb	r3, [r7, #7]
 800dfe0:	f003 0301 	and.w	r3, r3, #1
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d002      	beq.n	800dfee <Draw_Circle_D+0x11a>
 800dfe8:	4b81      	ldr	r3, [pc, #516]	; (800e1f0 <Draw_Circle_D+0x31c>)
 800dfea:	881b      	ldrh	r3, [r3, #0]
 800dfec:	e001      	b.n	800dff2 <Draw_Circle_D+0x11e>
 800dfee:	4b81      	ldr	r3, [pc, #516]	; (800e1f4 <Draw_Circle_D+0x320>)
 800dff0:	881b      	ldrh	r3, [r3, #0]
 800dff2:	4618      	mov	r0, r3
 800dff4:	f004 f97e 	bl	80122f4 <LCD_Set_Pixel>
 800dff8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dffc:	b29b      	uxth	r3, r3
 800dffe:	3301      	adds	r3, #1
 800e000:	b29b      	uxth	r3, r3
 800e002:	81bb      	strh	r3, [r7, #12]
 800e004:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e008:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e00c:	3b02      	subs	r3, #2
 800e00e:	429a      	cmp	r2, r3
 800e010:	dbe5      	blt.n	800dfde <Draw_Circle_D+0x10a>
 800e012:	88ba      	ldrh	r2, [r7, #4]
 800e014:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e016:	4413      	add	r3, r2
 800e018:	b29b      	uxth	r3, r3
 800e01a:	3b01      	subs	r3, #1
 800e01c:	b29b      	uxth	r3, r3
 800e01e:	817b      	strh	r3, [r7, #10]
 800e020:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e024:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e028:	4611      	mov	r1, r2
 800e02a:	4618      	mov	r0, r3
 800e02c:	f004 f914 	bl	8012258 <LCD_Set_Posi>
 800e030:	2300      	movs	r3, #0
 800e032:	81bb      	strh	r3, [r7, #12]
 800e034:	e012      	b.n	800e05c <Draw_Circle_D+0x188>
 800e036:	79fb      	ldrb	r3, [r7, #7]
 800e038:	f003 0301 	and.w	r3, r3, #1
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d002      	beq.n	800e046 <Draw_Circle_D+0x172>
 800e040:	4b6b      	ldr	r3, [pc, #428]	; (800e1f0 <Draw_Circle_D+0x31c>)
 800e042:	881b      	ldrh	r3, [r3, #0]
 800e044:	e001      	b.n	800e04a <Draw_Circle_D+0x176>
 800e046:	4b6b      	ldr	r3, [pc, #428]	; (800e1f4 <Draw_Circle_D+0x320>)
 800e048:	881b      	ldrh	r3, [r3, #0]
 800e04a:	4618      	mov	r0, r3
 800e04c:	f004 f952 	bl	80122f4 <LCD_Set_Pixel>
 800e050:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e054:	b29b      	uxth	r3, r3
 800e056:	3301      	adds	r3, #1
 800e058:	b29b      	uxth	r3, r3
 800e05a:	81bb      	strh	r3, [r7, #12]
 800e05c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e060:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e064:	3b02      	subs	r3, #2
 800e066:	429a      	cmp	r2, r3
 800e068:	dbe5      	blt.n	800e036 <Draw_Circle_D+0x162>
 800e06a:	88bb      	ldrh	r3, [r7, #4]
 800e06c:	3302      	adds	r3, #2
 800e06e:	b29b      	uxth	r3, r3
 800e070:	817b      	strh	r3, [r7, #10]
 800e072:	887b      	ldrh	r3, [r7, #2]
 800e074:	813b      	strh	r3, [r7, #8]
 800e076:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e07a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e07e:	4611      	mov	r1, r2
 800e080:	4618      	mov	r0, r3
 800e082:	f004 f8e9 	bl	8012258 <LCD_Set_Posi>
 800e086:	2300      	movs	r3, #0
 800e088:	81bb      	strh	r3, [r7, #12]
 800e08a:	e012      	b.n	800e0b2 <Draw_Circle_D+0x1de>
 800e08c:	79fb      	ldrb	r3, [r7, #7]
 800e08e:	f003 0301 	and.w	r3, r3, #1
 800e092:	2b00      	cmp	r3, #0
 800e094:	d002      	beq.n	800e09c <Draw_Circle_D+0x1c8>
 800e096:	4b56      	ldr	r3, [pc, #344]	; (800e1f0 <Draw_Circle_D+0x31c>)
 800e098:	881b      	ldrh	r3, [r3, #0]
 800e09a:	e001      	b.n	800e0a0 <Draw_Circle_D+0x1cc>
 800e09c:	4b55      	ldr	r3, [pc, #340]	; (800e1f4 <Draw_Circle_D+0x320>)
 800e09e:	881b      	ldrh	r3, [r3, #0]
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f004 f927 	bl	80122f4 <LCD_Set_Pixel>
 800e0a6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e0aa:	b29b      	uxth	r3, r3
 800e0ac:	3301      	adds	r3, #1
 800e0ae:	b29b      	uxth	r3, r3
 800e0b0:	81bb      	strh	r3, [r7, #12]
 800e0b2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e0b6:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e0ba:	429a      	cmp	r2, r3
 800e0bc:	dbe6      	blt.n	800e08c <Draw_Circle_D+0x1b8>
 800e0be:	88ba      	ldrh	r2, [r7, #4]
 800e0c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e0c2:	4413      	add	r3, r2
 800e0c4:	b29b      	uxth	r3, r3
 800e0c6:	3b02      	subs	r3, #2
 800e0c8:	b29b      	uxth	r3, r3
 800e0ca:	817b      	strh	r3, [r7, #10]
 800e0cc:	887b      	ldrh	r3, [r7, #2]
 800e0ce:	813b      	strh	r3, [r7, #8]
 800e0d0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e0d4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e0d8:	4611      	mov	r1, r2
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f004 f8bc 	bl	8012258 <LCD_Set_Posi>
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	81bb      	strh	r3, [r7, #12]
 800e0e4:	e012      	b.n	800e10c <Draw_Circle_D+0x238>
 800e0e6:	79fb      	ldrb	r3, [r7, #7]
 800e0e8:	f003 0301 	and.w	r3, r3, #1
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d002      	beq.n	800e0f6 <Draw_Circle_D+0x222>
 800e0f0:	4b3f      	ldr	r3, [pc, #252]	; (800e1f0 <Draw_Circle_D+0x31c>)
 800e0f2:	881b      	ldrh	r3, [r3, #0]
 800e0f4:	e001      	b.n	800e0fa <Draw_Circle_D+0x226>
 800e0f6:	4b3f      	ldr	r3, [pc, #252]	; (800e1f4 <Draw_Circle_D+0x320>)
 800e0f8:	881b      	ldrh	r3, [r3, #0]
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f004 f8fa 	bl	80122f4 <LCD_Set_Pixel>
 800e100:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e104:	b29b      	uxth	r3, r3
 800e106:	3301      	adds	r3, #1
 800e108:	b29b      	uxth	r3, r3
 800e10a:	81bb      	strh	r3, [r7, #12]
 800e10c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e110:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e114:	429a      	cmp	r2, r3
 800e116:	dbe6      	blt.n	800e0e6 <Draw_Circle_D+0x212>
 800e118:	887b      	ldrh	r3, [r7, #2]
 800e11a:	813b      	strh	r3, [r7, #8]
 800e11c:	2300      	movs	r3, #0
 800e11e:	81fb      	strh	r3, [r7, #14]
 800e120:	e05a      	b.n	800e1d8 <Draw_Circle_D+0x304>
 800e122:	88ba      	ldrh	r2, [r7, #4]
 800e124:	89fb      	ldrh	r3, [r7, #14]
 800e126:	4413      	add	r3, r2
 800e128:	b29b      	uxth	r3, r3
 800e12a:	3303      	adds	r3, #3
 800e12c:	b29b      	uxth	r3, r3
 800e12e:	b21b      	sxth	r3, r3
 800e130:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e134:	4611      	mov	r1, r2
 800e136:	4618      	mov	r0, r3
 800e138:	f004 f88e 	bl	8012258 <LCD_Set_Posi>
 800e13c:	2300      	movs	r3, #0
 800e13e:	81bb      	strh	r3, [r7, #12]
 800e140:	e012      	b.n	800e168 <Draw_Circle_D+0x294>
 800e142:	79fb      	ldrb	r3, [r7, #7]
 800e144:	f003 0301 	and.w	r3, r3, #1
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d002      	beq.n	800e152 <Draw_Circle_D+0x27e>
 800e14c:	4b28      	ldr	r3, [pc, #160]	; (800e1f0 <Draw_Circle_D+0x31c>)
 800e14e:	881b      	ldrh	r3, [r3, #0]
 800e150:	e001      	b.n	800e156 <Draw_Circle_D+0x282>
 800e152:	4b28      	ldr	r3, [pc, #160]	; (800e1f4 <Draw_Circle_D+0x320>)
 800e154:	881b      	ldrh	r3, [r3, #0]
 800e156:	4618      	mov	r0, r3
 800e158:	f004 f8cc 	bl	80122f4 <LCD_Set_Pixel>
 800e15c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e160:	b29b      	uxth	r3, r3
 800e162:	3301      	adds	r3, #1
 800e164:	b29b      	uxth	r3, r3
 800e166:	81bb      	strh	r3, [r7, #12]
 800e168:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e16c:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e170:	429a      	cmp	r2, r3
 800e172:	dbe6      	blt.n	800e142 <Draw_Circle_D+0x26e>
 800e174:	88ba      	ldrh	r2, [r7, #4]
 800e176:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e178:	4413      	add	r3, r2
 800e17a:	b29a      	uxth	r2, r3
 800e17c:	89fb      	ldrh	r3, [r7, #14]
 800e17e:	1ad3      	subs	r3, r2, r3
 800e180:	b29b      	uxth	r3, r3
 800e182:	3b03      	subs	r3, #3
 800e184:	b29b      	uxth	r3, r3
 800e186:	b21b      	sxth	r3, r3
 800e188:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e18c:	4611      	mov	r1, r2
 800e18e:	4618      	mov	r0, r3
 800e190:	f004 f862 	bl	8012258 <LCD_Set_Posi>
 800e194:	2300      	movs	r3, #0
 800e196:	81bb      	strh	r3, [r7, #12]
 800e198:	e012      	b.n	800e1c0 <Draw_Circle_D+0x2ec>
 800e19a:	79fb      	ldrb	r3, [r7, #7]
 800e19c:	f003 0301 	and.w	r3, r3, #1
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d002      	beq.n	800e1aa <Draw_Circle_D+0x2d6>
 800e1a4:	4b12      	ldr	r3, [pc, #72]	; (800e1f0 <Draw_Circle_D+0x31c>)
 800e1a6:	881b      	ldrh	r3, [r3, #0]
 800e1a8:	e001      	b.n	800e1ae <Draw_Circle_D+0x2da>
 800e1aa:	4b12      	ldr	r3, [pc, #72]	; (800e1f4 <Draw_Circle_D+0x320>)
 800e1ac:	881b      	ldrh	r3, [r3, #0]
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f004 f8a0 	bl	80122f4 <LCD_Set_Pixel>
 800e1b4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e1b8:	b29b      	uxth	r3, r3
 800e1ba:	3301      	adds	r3, #1
 800e1bc:	b29b      	uxth	r3, r3
 800e1be:	81bb      	strh	r3, [r7, #12]
 800e1c0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e1c4:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e1c8:	429a      	cmp	r2, r3
 800e1ca:	dbe6      	blt.n	800e19a <Draw_Circle_D+0x2c6>
 800e1cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e1d0:	b29b      	uxth	r3, r3
 800e1d2:	3301      	adds	r3, #1
 800e1d4:	b29b      	uxth	r3, r3
 800e1d6:	81fb      	strh	r3, [r7, #14]
 800e1d8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800e1dc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e1e0:	429a      	cmp	r2, r3
 800e1e2:	db9e      	blt.n	800e122 <Draw_Circle_D+0x24e>
 800e1e4:	bf00      	nop
 800e1e6:	bf00      	nop
 800e1e8:	3714      	adds	r7, #20
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	bd90      	pop	{r4, r7, pc}
 800e1ee:	bf00      	nop
 800e1f0:	200015cc 	.word	0x200015cc
 800e1f4:	200015ce 	.word	0x200015ce

0800e1f8 <DispStr10x14>:
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b084      	sub	sp, #16
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	607b      	str	r3, [r7, #4]
 800e200:	4603      	mov	r3, r0
 800e202:	81fb      	strh	r3, [r7, #14]
 800e204:	460b      	mov	r3, r1
 800e206:	81bb      	strh	r3, [r7, #12]
 800e208:	4613      	mov	r3, r2
 800e20a:	72fb      	strb	r3, [r7, #11]
 800e20c:	4a0c      	ldr	r2, [pc, #48]	; (800e240 <DispStr10x14+0x48>)
 800e20e:	89fb      	ldrh	r3, [r7, #14]
 800e210:	8013      	strh	r3, [r2, #0]
 800e212:	4a0c      	ldr	r2, [pc, #48]	; (800e244 <DispStr10x14+0x4c>)
 800e214:	89bb      	ldrh	r3, [r7, #12]
 800e216:	8013      	strh	r3, [r2, #0]
 800e218:	e008      	b.n	800e22c <DispStr10x14+0x34>
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	1c5a      	adds	r2, r3, #1
 800e21e:	607a      	str	r2, [r7, #4]
 800e220:	781a      	ldrb	r2, [r3, #0]
 800e222:	7afb      	ldrb	r3, [r7, #11]
 800e224:	4611      	mov	r1, r2
 800e226:	4618      	mov	r0, r3
 800e228:	f000 f80e 	bl	800e248 <DispChar10x14>
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	781b      	ldrb	r3, [r3, #0]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d1f2      	bne.n	800e21a <DispStr10x14+0x22>
 800e234:	bf00      	nop
 800e236:	bf00      	nop
 800e238:	3710      	adds	r7, #16
 800e23a:	46bd      	mov	sp, r7
 800e23c:	bd80      	pop	{r7, pc}
 800e23e:	bf00      	nop
 800e240:	2000078a 	.word	0x2000078a
 800e244:	2000078c 	.word	0x2000078c

0800e248 <DispChar10x14>:
 800e248:	b580      	push	{r7, lr}
 800e24a:	b084      	sub	sp, #16
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	4603      	mov	r3, r0
 800e250:	460a      	mov	r2, r1
 800e252:	71fb      	strb	r3, [r7, #7]
 800e254:	4613      	mov	r3, r2
 800e256:	71bb      	strb	r3, [r7, #6]
 800e258:	2300      	movs	r3, #0
 800e25a:	81fb      	strh	r3, [r7, #14]
 800e25c:	e0fe      	b.n	800e45c <DispChar10x14+0x214>
 800e25e:	79fb      	ldrb	r3, [r7, #7]
 800e260:	f003 0310 	and.w	r3, r3, #16
 800e264:	2b00      	cmp	r3, #0
 800e266:	d00f      	beq.n	800e288 <DispChar10x14+0x40>
 800e268:	79bb      	ldrb	r3, [r7, #6]
 800e26a:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 800e26e:	4613      	mov	r3, r2
 800e270:	009b      	lsls	r3, r3, #2
 800e272:	4413      	add	r3, r2
 800e274:	005b      	lsls	r3, r3, #1
 800e276:	461a      	mov	r2, r3
 800e278:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e27c:	4413      	add	r3, r2
 800e27e:	4a7c      	ldr	r2, [pc, #496]	; (800e470 <DispChar10x14+0x228>)
 800e280:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e284:	817b      	strh	r3, [r7, #10]
 800e286:	e00e      	b.n	800e2a6 <DispChar10x14+0x5e>
 800e288:	79bb      	ldrb	r3, [r7, #6]
 800e28a:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800e28e:	4613      	mov	r3, r2
 800e290:	009b      	lsls	r3, r3, #2
 800e292:	4413      	add	r3, r2
 800e294:	005b      	lsls	r3, r3, #1
 800e296:	461a      	mov	r2, r3
 800e298:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e29c:	4413      	add	r3, r2
 800e29e:	4a75      	ldr	r2, [pc, #468]	; (800e474 <DispChar10x14+0x22c>)
 800e2a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e2a4:	817b      	strh	r3, [r7, #10]
 800e2a6:	79fb      	ldrb	r3, [r7, #7]
 800e2a8:	f003 0320 	and.w	r3, r3, #32
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d00c      	beq.n	800e2ca <DispChar10x14+0x82>
 800e2b0:	89fb      	ldrh	r3, [r7, #14]
 800e2b2:	f003 0301 	and.w	r3, r3, #1
 800e2b6:	b29b      	uxth	r3, r3
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d001      	beq.n	800e2c0 <DispChar10x14+0x78>
 800e2bc:	4a6e      	ldr	r2, [pc, #440]	; (800e478 <DispChar10x14+0x230>)
 800e2be:	e001      	b.n	800e2c4 <DispChar10x14+0x7c>
 800e2c0:	f245 5255 	movw	r2, #21845	; 0x5555
 800e2c4:	897b      	ldrh	r3, [r7, #10]
 800e2c6:	4013      	ands	r3, r2
 800e2c8:	817b      	strh	r3, [r7, #10]
 800e2ca:	4b6c      	ldr	r3, [pc, #432]	; (800e47c <DispChar10x14+0x234>)
 800e2cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e2d0:	4a6b      	ldr	r2, [pc, #428]	; (800e480 <DispChar10x14+0x238>)
 800e2d2:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e2d6:	4611      	mov	r1, r2
 800e2d8:	4618      	mov	r0, r3
 800e2da:	f003 ffbd 	bl	8012258 <LCD_Set_Posi>
 800e2de:	79fb      	ldrb	r3, [r7, #7]
 800e2e0:	f003 0310 	and.w	r3, r3, #16
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d038      	beq.n	800e35a <DispChar10x14+0x112>
 800e2e8:	79bb      	ldrb	r3, [r7, #6]
 800e2ea:	2b43      	cmp	r3, #67	; 0x43
 800e2ec:	d005      	beq.n	800e2fa <DispChar10x14+0xb2>
 800e2ee:	79bb      	ldrb	r3, [r7, #6]
 800e2f0:	2b44      	cmp	r3, #68	; 0x44
 800e2f2:	d002      	beq.n	800e2fa <DispChar10x14+0xb2>
 800e2f4:	79bb      	ldrb	r3, [r7, #6]
 800e2f6:	2b45      	cmp	r3, #69	; 0x45
 800e2f8:	d12f      	bne.n	800e35a <DispChar10x14+0x112>
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	81bb      	strh	r3, [r7, #12]
 800e2fe:	e027      	b.n	800e350 <DispChar10x14+0x108>
 800e300:	897b      	ldrh	r3, [r7, #10]
 800e302:	f003 0304 	and.w	r3, r3, #4
 800e306:	2b00      	cmp	r3, #0
 800e308:	d00d      	beq.n	800e326 <DispChar10x14+0xde>
 800e30a:	79fb      	ldrb	r3, [r7, #7]
 800e30c:	f003 0301 	and.w	r3, r3, #1
 800e310:	2b00      	cmp	r3, #0
 800e312:	d002      	beq.n	800e31a <DispChar10x14+0xd2>
 800e314:	4b5b      	ldr	r3, [pc, #364]	; (800e484 <DispChar10x14+0x23c>)
 800e316:	881b      	ldrh	r3, [r3, #0]
 800e318:	e001      	b.n	800e31e <DispChar10x14+0xd6>
 800e31a:	4b5b      	ldr	r3, [pc, #364]	; (800e488 <DispChar10x14+0x240>)
 800e31c:	881b      	ldrh	r3, [r3, #0]
 800e31e:	4618      	mov	r0, r3
 800e320:	f003 ffe8 	bl	80122f4 <LCD_Set_Pixel>
 800e324:	e00c      	b.n	800e340 <DispChar10x14+0xf8>
 800e326:	79fb      	ldrb	r3, [r7, #7]
 800e328:	f003 0301 	and.w	r3, r3, #1
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d002      	beq.n	800e336 <DispChar10x14+0xee>
 800e330:	4b55      	ldr	r3, [pc, #340]	; (800e488 <DispChar10x14+0x240>)
 800e332:	881b      	ldrh	r3, [r3, #0]
 800e334:	e001      	b.n	800e33a <DispChar10x14+0xf2>
 800e336:	4b53      	ldr	r3, [pc, #332]	; (800e484 <DispChar10x14+0x23c>)
 800e338:	881b      	ldrh	r3, [r3, #0]
 800e33a:	4618      	mov	r0, r3
 800e33c:	f003 ffda 	bl	80122f4 <LCD_Set_Pixel>
 800e340:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e344:	105b      	asrs	r3, r3, #1
 800e346:	817b      	strh	r3, [r7, #10]
 800e348:	89bb      	ldrh	r3, [r7, #12]
 800e34a:	3301      	adds	r3, #1
 800e34c:	b29b      	uxth	r3, r3
 800e34e:	81bb      	strh	r3, [r7, #12]
 800e350:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e354:	2b0a      	cmp	r3, #10
 800e356:	ddd3      	ble.n	800e300 <DispChar10x14+0xb8>
 800e358:	e073      	b.n	800e442 <DispChar10x14+0x1fa>
 800e35a:	79fb      	ldrb	r3, [r7, #7]
 800e35c:	f003 0310 	and.w	r3, r3, #16
 800e360:	2b00      	cmp	r3, #0
 800e362:	d03f      	beq.n	800e3e4 <DispChar10x14+0x19c>
 800e364:	79bb      	ldrb	r3, [r7, #6]
 800e366:	2b4c      	cmp	r3, #76	; 0x4c
 800e368:	d002      	beq.n	800e370 <DispChar10x14+0x128>
 800e36a:	79bb      	ldrb	r3, [r7, #6]
 800e36c:	2b48      	cmp	r3, #72	; 0x48
 800e36e:	d139      	bne.n	800e3e4 <DispChar10x14+0x19c>
 800e370:	4b42      	ldr	r3, [pc, #264]	; (800e47c <DispChar10x14+0x234>)
 800e372:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e376:	4a42      	ldr	r2, [pc, #264]	; (800e480 <DispChar10x14+0x238>)
 800e378:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e37c:	4611      	mov	r1, r2
 800e37e:	4618      	mov	r0, r3
 800e380:	f003 ff6a 	bl	8012258 <LCD_Set_Posi>
 800e384:	2300      	movs	r3, #0
 800e386:	81bb      	strh	r3, [r7, #12]
 800e388:	e027      	b.n	800e3da <DispChar10x14+0x192>
 800e38a:	897b      	ldrh	r3, [r7, #10]
 800e38c:	f003 0304 	and.w	r3, r3, #4
 800e390:	2b00      	cmp	r3, #0
 800e392:	d00d      	beq.n	800e3b0 <DispChar10x14+0x168>
 800e394:	79fb      	ldrb	r3, [r7, #7]
 800e396:	f003 0301 	and.w	r3, r3, #1
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d002      	beq.n	800e3a4 <DispChar10x14+0x15c>
 800e39e:	4b39      	ldr	r3, [pc, #228]	; (800e484 <DispChar10x14+0x23c>)
 800e3a0:	881b      	ldrh	r3, [r3, #0]
 800e3a2:	e001      	b.n	800e3a8 <DispChar10x14+0x160>
 800e3a4:	4b38      	ldr	r3, [pc, #224]	; (800e488 <DispChar10x14+0x240>)
 800e3a6:	881b      	ldrh	r3, [r3, #0]
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	f003 ffa3 	bl	80122f4 <LCD_Set_Pixel>
 800e3ae:	e00c      	b.n	800e3ca <DispChar10x14+0x182>
 800e3b0:	79fb      	ldrb	r3, [r7, #7]
 800e3b2:	f003 0301 	and.w	r3, r3, #1
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d002      	beq.n	800e3c0 <DispChar10x14+0x178>
 800e3ba:	4b33      	ldr	r3, [pc, #204]	; (800e488 <DispChar10x14+0x240>)
 800e3bc:	881b      	ldrh	r3, [r3, #0]
 800e3be:	e001      	b.n	800e3c4 <DispChar10x14+0x17c>
 800e3c0:	4b30      	ldr	r3, [pc, #192]	; (800e484 <DispChar10x14+0x23c>)
 800e3c2:	881b      	ldrh	r3, [r3, #0]
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f003 ff95 	bl	80122f4 <LCD_Set_Pixel>
 800e3ca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e3ce:	105b      	asrs	r3, r3, #1
 800e3d0:	817b      	strh	r3, [r7, #10]
 800e3d2:	89bb      	ldrh	r3, [r7, #12]
 800e3d4:	3301      	adds	r3, #1
 800e3d6:	b29b      	uxth	r3, r3
 800e3d8:	81bb      	strh	r3, [r7, #12]
 800e3da:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e3de:	2b0a      	cmp	r3, #10
 800e3e0:	ddd3      	ble.n	800e38a <DispChar10x14+0x142>
 800e3e2:	e02e      	b.n	800e442 <DispChar10x14+0x1fa>
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	81bb      	strh	r3, [r7, #12]
 800e3e8:	e027      	b.n	800e43a <DispChar10x14+0x1f2>
 800e3ea:	897b      	ldrh	r3, [r7, #10]
 800e3ec:	f003 0304 	and.w	r3, r3, #4
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d00d      	beq.n	800e410 <DispChar10x14+0x1c8>
 800e3f4:	79fb      	ldrb	r3, [r7, #7]
 800e3f6:	f003 0301 	and.w	r3, r3, #1
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d002      	beq.n	800e404 <DispChar10x14+0x1bc>
 800e3fe:	4b21      	ldr	r3, [pc, #132]	; (800e484 <DispChar10x14+0x23c>)
 800e400:	881b      	ldrh	r3, [r3, #0]
 800e402:	e001      	b.n	800e408 <DispChar10x14+0x1c0>
 800e404:	4b20      	ldr	r3, [pc, #128]	; (800e488 <DispChar10x14+0x240>)
 800e406:	881b      	ldrh	r3, [r3, #0]
 800e408:	4618      	mov	r0, r3
 800e40a:	f003 ff73 	bl	80122f4 <LCD_Set_Pixel>
 800e40e:	e00c      	b.n	800e42a <DispChar10x14+0x1e2>
 800e410:	79fb      	ldrb	r3, [r7, #7]
 800e412:	f003 0301 	and.w	r3, r3, #1
 800e416:	2b00      	cmp	r3, #0
 800e418:	d002      	beq.n	800e420 <DispChar10x14+0x1d8>
 800e41a:	4b1b      	ldr	r3, [pc, #108]	; (800e488 <DispChar10x14+0x240>)
 800e41c:	881b      	ldrh	r3, [r3, #0]
 800e41e:	e001      	b.n	800e424 <DispChar10x14+0x1dc>
 800e420:	4b18      	ldr	r3, [pc, #96]	; (800e484 <DispChar10x14+0x23c>)
 800e422:	881b      	ldrh	r3, [r3, #0]
 800e424:	4618      	mov	r0, r3
 800e426:	f003 ff65 	bl	80122f4 <LCD_Set_Pixel>
 800e42a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e42e:	105b      	asrs	r3, r3, #1
 800e430:	817b      	strh	r3, [r7, #10]
 800e432:	89bb      	ldrh	r3, [r7, #12]
 800e434:	3301      	adds	r3, #1
 800e436:	b29b      	uxth	r3, r3
 800e438:	81bb      	strh	r3, [r7, #12]
 800e43a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e43e:	2b0d      	cmp	r3, #13
 800e440:	ddd3      	ble.n	800e3ea <DispChar10x14+0x1a2>
 800e442:	4b0e      	ldr	r3, [pc, #56]	; (800e47c <DispChar10x14+0x234>)
 800e444:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e448:	b29b      	uxth	r3, r3
 800e44a:	3301      	adds	r3, #1
 800e44c:	b29b      	uxth	r3, r3
 800e44e:	b21a      	sxth	r2, r3
 800e450:	4b0a      	ldr	r3, [pc, #40]	; (800e47c <DispChar10x14+0x234>)
 800e452:	801a      	strh	r2, [r3, #0]
 800e454:	89fb      	ldrh	r3, [r7, #14]
 800e456:	3301      	adds	r3, #1
 800e458:	b29b      	uxth	r3, r3
 800e45a:	81fb      	strh	r3, [r7, #14]
 800e45c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e460:	2b09      	cmp	r3, #9
 800e462:	f77f aefc 	ble.w	800e25e <DispChar10x14+0x16>
 800e466:	bf00      	nop
 800e468:	bf00      	nop
 800e46a:	3710      	adds	r7, #16
 800e46c:	46bd      	mov	sp, r7
 800e46e:	bd80      	pop	{r7, pc}
 800e470:	080018f8 	.word	0x080018f8
 800e474:	08001998 	.word	0x08001998
 800e478:	ffffaaaa 	.word	0xffffaaaa
 800e47c:	2000078a 	.word	0x2000078a
 800e480:	2000078c 	.word	0x2000078c
 800e484:	200015ce 	.word	0x200015ce
 800e488:	200015cc 	.word	0x200015cc

0800e48c <NotePixel>:
 800e48c:	b480      	push	{r7}
 800e48e:	b085      	sub	sp, #20
 800e490:	af00      	add	r7, sp, #0
 800e492:	4603      	mov	r3, r0
 800e494:	71fb      	strb	r3, [r7, #7]
 800e496:	4b42      	ldr	r3, [pc, #264]	; (800e5a0 <NotePixel+0x114>)
 800e498:	60fb      	str	r3, [r7, #12]
 800e49a:	4b42      	ldr	r3, [pc, #264]	; (800e5a4 <NotePixel+0x118>)
 800e49c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e4a0:	4a41      	ldr	r2, [pc, #260]	; (800e5a8 <NotePixel+0x11c>)
 800e4a2:	f9b2 2046 	ldrsh.w	r2, [r2, #70]	; 0x46
 800e4a6:	fb93 f1f2 	sdiv	r1, r3, r2
 800e4aa:	fb02 f201 	mul.w	r2, r2, r1
 800e4ae:	1a9b      	subs	r3, r3, r2
 800e4b0:	b21a      	sxth	r2, r3
 800e4b2:	4b3c      	ldr	r3, [pc, #240]	; (800e5a4 <NotePixel+0x118>)
 800e4b4:	801a      	strh	r2, [r3, #0]
 800e4b6:	4b3d      	ldr	r3, [pc, #244]	; (800e5ac <NotePixel+0x120>)
 800e4b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e4bc:	4a3a      	ldr	r2, [pc, #232]	; (800e5a8 <NotePixel+0x11c>)
 800e4be:	f9b2 204a 	ldrsh.w	r2, [r2, #74]	; 0x4a
 800e4c2:	fb93 f1f2 	sdiv	r1, r3, r2
 800e4c6:	fb02 f201 	mul.w	r2, r2, r1
 800e4ca:	1a9b      	subs	r3, r3, r2
 800e4cc:	b21a      	sxth	r2, r3
 800e4ce:	4b37      	ldr	r3, [pc, #220]	; (800e5ac <NotePixel+0x120>)
 800e4d0:	801a      	strh	r2, [r3, #0]
 800e4d2:	4b35      	ldr	r3, [pc, #212]	; (800e5a8 <NotePixel+0x11c>)
 800e4d4:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	da00      	bge.n	800e4de <NotePixel+0x52>
 800e4dc:	331f      	adds	r3, #31
 800e4de:	115b      	asrs	r3, r3, #5
 800e4e0:	b21b      	sxth	r3, r3
 800e4e2:	b29a      	uxth	r2, r3
 800e4e4:	4b2f      	ldr	r3, [pc, #188]	; (800e5a4 <NotePixel+0x118>)
 800e4e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e4ea:	b29b      	uxth	r3, r3
 800e4ec:	fb12 f303 	smulbb	r3, r2, r3
 800e4f0:	b29a      	uxth	r2, r3
 800e4f2:	4b2e      	ldr	r3, [pc, #184]	; (800e5ac <NotePixel+0x120>)
 800e4f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	da00      	bge.n	800e4fe <NotePixel+0x72>
 800e4fc:	330f      	adds	r3, #15
 800e4fe:	111b      	asrs	r3, r3, #4
 800e500:	b21b      	sxth	r3, r3
 800e502:	b29b      	uxth	r3, r3
 800e504:	4413      	add	r3, r2
 800e506:	b29b      	uxth	r3, r3
 800e508:	817b      	strh	r3, [r7, #10]
 800e50a:	4b28      	ldr	r3, [pc, #160]	; (800e5ac <NotePixel+0x120>)
 800e50c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e510:	425a      	negs	r2, r3
 800e512:	f003 030f 	and.w	r3, r3, #15
 800e516:	f002 020f 	and.w	r2, r2, #15
 800e51a:	bf58      	it	pl
 800e51c:	4253      	negpl	r3, r2
 800e51e:	813b      	strh	r3, [r7, #8]
 800e520:	79fb      	ldrb	r3, [r7, #7]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d015      	beq.n	800e552 <NotePixel+0xc6>
 800e526:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e52a:	005b      	lsls	r3, r3, #1
 800e52c:	68fa      	ldr	r2, [r7, #12]
 800e52e:	4413      	add	r3, r2
 800e530:	f9b3 1000 	ldrsh.w	r1, [r3]
 800e534:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800e538:	2201      	movs	r2, #1
 800e53a:	fa02 f303 	lsl.w	r3, r2, r3
 800e53e:	b21a      	sxth	r2, r3
 800e540:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e544:	005b      	lsls	r3, r3, #1
 800e546:	68f8      	ldr	r0, [r7, #12]
 800e548:	4403      	add	r3, r0
 800e54a:	430a      	orrs	r2, r1
 800e54c:	b212      	sxth	r2, r2
 800e54e:	801a      	strh	r2, [r3, #0]
 800e550:	e016      	b.n	800e580 <NotePixel+0xf4>
 800e552:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e556:	005b      	lsls	r3, r3, #1
 800e558:	68fa      	ldr	r2, [r7, #12]
 800e55a:	4413      	add	r3, r2
 800e55c:	f9b3 1000 	ldrsh.w	r1, [r3]
 800e560:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800e564:	2201      	movs	r2, #1
 800e566:	fa02 f303 	lsl.w	r3, r2, r3
 800e56a:	b21b      	sxth	r3, r3
 800e56c:	43db      	mvns	r3, r3
 800e56e:	b21a      	sxth	r2, r3
 800e570:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e574:	005b      	lsls	r3, r3, #1
 800e576:	68f8      	ldr	r0, [r7, #12]
 800e578:	4403      	add	r3, r0
 800e57a:	400a      	ands	r2, r1
 800e57c:	b212      	sxth	r2, r2
 800e57e:	801a      	strh	r2, [r3, #0]
 800e580:	4b0a      	ldr	r3, [pc, #40]	; (800e5ac <NotePixel+0x120>)
 800e582:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e586:	b29b      	uxth	r3, r3
 800e588:	3301      	adds	r3, #1
 800e58a:	b29b      	uxth	r3, r3
 800e58c:	b21a      	sxth	r2, r3
 800e58e:	4b07      	ldr	r3, [pc, #28]	; (800e5ac <NotePixel+0x120>)
 800e590:	801a      	strh	r2, [r3, #0]
 800e592:	bf00      	nop
 800e594:	3714      	adds	r7, #20
 800e596:	46bd      	mov	sp, r7
 800e598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59c:	4770      	bx	lr
 800e59e:	bf00      	nop
 800e5a0:	20000f8c 	.word	0x20000f8c
 800e5a4:	20000002 	.word	0x20000002
 800e5a8:	20000140 	.word	0x20000140
 800e5ac:	20000004 	.word	0x20000004

0800e5b0 <Buil_Pop>:
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b082      	sub	sp, #8
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800e5ba:	2100      	movs	r1, #0
 800e5bc:	487f      	ldr	r0, [pc, #508]	; (800e7bc <Buil_Pop+0x20c>)
 800e5be:	f014 fb3d 	bl	8022c3c <memset>
 800e5c2:	4b7f      	ldr	r3, [pc, #508]	; (800e7c0 <Buil_Pop+0x210>)
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	801a      	strh	r2, [r3, #0]
 800e5c8:	4b7e      	ldr	r3, [pc, #504]	; (800e7c4 <Buil_Pop+0x214>)
 800e5ca:	2203      	movs	r2, #3
 800e5cc:	801a      	strh	r2, [r3, #0]
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	80fb      	strh	r3, [r7, #6]
 800e5d2:	e008      	b.n	800e5e6 <Buil_Pop+0x36>
 800e5d4:	2001      	movs	r0, #1
 800e5d6:	f7ff ff59 	bl	800e48c <NotePixel>
 800e5da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e5de:	b29b      	uxth	r3, r3
 800e5e0:	3301      	adds	r3, #1
 800e5e2:	b29b      	uxth	r3, r3
 800e5e4:	80fb      	strh	r3, [r7, #6]
 800e5e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e5ea:	4b77      	ldr	r3, [pc, #476]	; (800e7c8 <Buil_Pop+0x218>)
 800e5ec:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e5f0:	0fd9      	lsrs	r1, r3, #31
 800e5f2:	440b      	add	r3, r1
 800e5f4:	105b      	asrs	r3, r3, #1
 800e5f6:	b21b      	sxth	r3, r3
 800e5f8:	3b06      	subs	r3, #6
 800e5fa:	429a      	cmp	r2, r3
 800e5fc:	dbea      	blt.n	800e5d4 <Buil_Pop+0x24>
 800e5fe:	4b70      	ldr	r3, [pc, #448]	; (800e7c0 <Buil_Pop+0x210>)
 800e600:	2201      	movs	r2, #1
 800e602:	801a      	strh	r2, [r3, #0]
 800e604:	4b6f      	ldr	r3, [pc, #444]	; (800e7c4 <Buil_Pop+0x214>)
 800e606:	2202      	movs	r2, #2
 800e608:	801a      	strh	r2, [r3, #0]
 800e60a:	2001      	movs	r0, #1
 800e60c:	f7ff ff3e 	bl	800e48c <NotePixel>
 800e610:	4b6b      	ldr	r3, [pc, #428]	; (800e7c0 <Buil_Pop+0x210>)
 800e612:	2201      	movs	r2, #1
 800e614:	801a      	strh	r2, [r3, #0]
 800e616:	4b6c      	ldr	r3, [pc, #432]	; (800e7c8 <Buil_Pop+0x218>)
 800e618:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e61c:	0fda      	lsrs	r2, r3, #31
 800e61e:	4413      	add	r3, r2
 800e620:	105b      	asrs	r3, r3, #1
 800e622:	b21b      	sxth	r3, r3
 800e624:	b29b      	uxth	r3, r3
 800e626:	3b03      	subs	r3, #3
 800e628:	b29b      	uxth	r3, r3
 800e62a:	b21a      	sxth	r2, r3
 800e62c:	4b65      	ldr	r3, [pc, #404]	; (800e7c4 <Buil_Pop+0x214>)
 800e62e:	801a      	strh	r2, [r3, #0]
 800e630:	2001      	movs	r0, #1
 800e632:	f7ff ff2b 	bl	800e48c <NotePixel>
 800e636:	4b62      	ldr	r3, [pc, #392]	; (800e7c0 <Buil_Pop+0x210>)
 800e638:	2202      	movs	r2, #2
 800e63a:	801a      	strh	r2, [r3, #0]
 800e63c:	4b61      	ldr	r3, [pc, #388]	; (800e7c4 <Buil_Pop+0x214>)
 800e63e:	2201      	movs	r2, #1
 800e640:	801a      	strh	r2, [r3, #0]
 800e642:	2001      	movs	r0, #1
 800e644:	f7ff ff22 	bl	800e48c <NotePixel>
 800e648:	4b5d      	ldr	r3, [pc, #372]	; (800e7c0 <Buil_Pop+0x210>)
 800e64a:	2202      	movs	r2, #2
 800e64c:	801a      	strh	r2, [r3, #0]
 800e64e:	4b5e      	ldr	r3, [pc, #376]	; (800e7c8 <Buil_Pop+0x218>)
 800e650:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e654:	0fda      	lsrs	r2, r3, #31
 800e656:	4413      	add	r3, r2
 800e658:	105b      	asrs	r3, r3, #1
 800e65a:	b21b      	sxth	r3, r3
 800e65c:	b29b      	uxth	r3, r3
 800e65e:	3b02      	subs	r3, #2
 800e660:	b29b      	uxth	r3, r3
 800e662:	b21a      	sxth	r2, r3
 800e664:	4b57      	ldr	r3, [pc, #348]	; (800e7c4 <Buil_Pop+0x214>)
 800e666:	801a      	strh	r2, [r3, #0]
 800e668:	2001      	movs	r0, #1
 800e66a:	f7ff ff0f 	bl	800e48c <NotePixel>
 800e66e:	4b54      	ldr	r3, [pc, #336]	; (800e7c0 <Buil_Pop+0x210>)
 800e670:	2203      	movs	r2, #3
 800e672:	801a      	strh	r2, [r3, #0]
 800e674:	e01e      	b.n	800e6b4 <Buil_Pop+0x104>
 800e676:	4b53      	ldr	r3, [pc, #332]	; (800e7c4 <Buil_Pop+0x214>)
 800e678:	2200      	movs	r2, #0
 800e67a:	801a      	strh	r2, [r3, #0]
 800e67c:	2001      	movs	r0, #1
 800e67e:	f7ff ff05 	bl	800e48c <NotePixel>
 800e682:	4b51      	ldr	r3, [pc, #324]	; (800e7c8 <Buil_Pop+0x218>)
 800e684:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e688:	0fda      	lsrs	r2, r3, #31
 800e68a:	4413      	add	r3, r2
 800e68c:	105b      	asrs	r3, r3, #1
 800e68e:	b21b      	sxth	r3, r3
 800e690:	b29b      	uxth	r3, r3
 800e692:	3b01      	subs	r3, #1
 800e694:	b29b      	uxth	r3, r3
 800e696:	b21a      	sxth	r2, r3
 800e698:	4b4a      	ldr	r3, [pc, #296]	; (800e7c4 <Buil_Pop+0x214>)
 800e69a:	801a      	strh	r2, [r3, #0]
 800e69c:	2001      	movs	r0, #1
 800e69e:	f7ff fef5 	bl	800e48c <NotePixel>
 800e6a2:	4b47      	ldr	r3, [pc, #284]	; (800e7c0 <Buil_Pop+0x210>)
 800e6a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e6a8:	b29b      	uxth	r3, r3
 800e6aa:	3301      	adds	r3, #1
 800e6ac:	b29b      	uxth	r3, r3
 800e6ae:	b21a      	sxth	r2, r3
 800e6b0:	4b43      	ldr	r3, [pc, #268]	; (800e7c0 <Buil_Pop+0x210>)
 800e6b2:	801a      	strh	r2, [r3, #0]
 800e6b4:	4b42      	ldr	r3, [pc, #264]	; (800e7c0 <Buil_Pop+0x210>)
 800e6b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e6ba:	461a      	mov	r2, r3
 800e6bc:	4b42      	ldr	r3, [pc, #264]	; (800e7c8 <Buil_Pop+0x218>)
 800e6be:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e6c2:	3b02      	subs	r3, #2
 800e6c4:	429a      	cmp	r2, r3
 800e6c6:	dbd6      	blt.n	800e676 <Buil_Pop+0xc6>
 800e6c8:	4b3f      	ldr	r3, [pc, #252]	; (800e7c8 <Buil_Pop+0x218>)
 800e6ca:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e6ce:	b29b      	uxth	r3, r3
 800e6d0:	3b03      	subs	r3, #3
 800e6d2:	b29b      	uxth	r3, r3
 800e6d4:	b21a      	sxth	r2, r3
 800e6d6:	4b3a      	ldr	r3, [pc, #232]	; (800e7c0 <Buil_Pop+0x210>)
 800e6d8:	801a      	strh	r2, [r3, #0]
 800e6da:	4b3a      	ldr	r3, [pc, #232]	; (800e7c4 <Buil_Pop+0x214>)
 800e6dc:	2201      	movs	r2, #1
 800e6de:	801a      	strh	r2, [r3, #0]
 800e6e0:	2001      	movs	r0, #1
 800e6e2:	f7ff fed3 	bl	800e48c <NotePixel>
 800e6e6:	4b38      	ldr	r3, [pc, #224]	; (800e7c8 <Buil_Pop+0x218>)
 800e6e8:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e6ec:	b29b      	uxth	r3, r3
 800e6ee:	3b03      	subs	r3, #3
 800e6f0:	b29b      	uxth	r3, r3
 800e6f2:	b21a      	sxth	r2, r3
 800e6f4:	4b32      	ldr	r3, [pc, #200]	; (800e7c0 <Buil_Pop+0x210>)
 800e6f6:	801a      	strh	r2, [r3, #0]
 800e6f8:	4b33      	ldr	r3, [pc, #204]	; (800e7c8 <Buil_Pop+0x218>)
 800e6fa:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e6fe:	0fda      	lsrs	r2, r3, #31
 800e700:	4413      	add	r3, r2
 800e702:	105b      	asrs	r3, r3, #1
 800e704:	b21b      	sxth	r3, r3
 800e706:	b29b      	uxth	r3, r3
 800e708:	3b02      	subs	r3, #2
 800e70a:	b29b      	uxth	r3, r3
 800e70c:	b21a      	sxth	r2, r3
 800e70e:	4b2d      	ldr	r3, [pc, #180]	; (800e7c4 <Buil_Pop+0x214>)
 800e710:	801a      	strh	r2, [r3, #0]
 800e712:	2001      	movs	r0, #1
 800e714:	f7ff feba 	bl	800e48c <NotePixel>
 800e718:	4b2b      	ldr	r3, [pc, #172]	; (800e7c8 <Buil_Pop+0x218>)
 800e71a:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e71e:	b29b      	uxth	r3, r3
 800e720:	3b02      	subs	r3, #2
 800e722:	b29b      	uxth	r3, r3
 800e724:	b21a      	sxth	r2, r3
 800e726:	4b26      	ldr	r3, [pc, #152]	; (800e7c0 <Buil_Pop+0x210>)
 800e728:	801a      	strh	r2, [r3, #0]
 800e72a:	4b26      	ldr	r3, [pc, #152]	; (800e7c4 <Buil_Pop+0x214>)
 800e72c:	2202      	movs	r2, #2
 800e72e:	801a      	strh	r2, [r3, #0]
 800e730:	2001      	movs	r0, #1
 800e732:	f7ff feab 	bl	800e48c <NotePixel>
 800e736:	4b24      	ldr	r3, [pc, #144]	; (800e7c8 <Buil_Pop+0x218>)
 800e738:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e73c:	b29b      	uxth	r3, r3
 800e73e:	3b02      	subs	r3, #2
 800e740:	b29b      	uxth	r3, r3
 800e742:	b21a      	sxth	r2, r3
 800e744:	4b1e      	ldr	r3, [pc, #120]	; (800e7c0 <Buil_Pop+0x210>)
 800e746:	801a      	strh	r2, [r3, #0]
 800e748:	4b1f      	ldr	r3, [pc, #124]	; (800e7c8 <Buil_Pop+0x218>)
 800e74a:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e74e:	0fda      	lsrs	r2, r3, #31
 800e750:	4413      	add	r3, r2
 800e752:	105b      	asrs	r3, r3, #1
 800e754:	b21b      	sxth	r3, r3
 800e756:	b29b      	uxth	r3, r3
 800e758:	3b03      	subs	r3, #3
 800e75a:	b29b      	uxth	r3, r3
 800e75c:	b21a      	sxth	r2, r3
 800e75e:	4b19      	ldr	r3, [pc, #100]	; (800e7c4 <Buil_Pop+0x214>)
 800e760:	801a      	strh	r2, [r3, #0]
 800e762:	2001      	movs	r0, #1
 800e764:	f7ff fe92 	bl	800e48c <NotePixel>
 800e768:	4b17      	ldr	r3, [pc, #92]	; (800e7c8 <Buil_Pop+0x218>)
 800e76a:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e76e:	b29b      	uxth	r3, r3
 800e770:	3b01      	subs	r3, #1
 800e772:	b29b      	uxth	r3, r3
 800e774:	b21a      	sxth	r2, r3
 800e776:	4b12      	ldr	r3, [pc, #72]	; (800e7c0 <Buil_Pop+0x210>)
 800e778:	801a      	strh	r2, [r3, #0]
 800e77a:	4b12      	ldr	r3, [pc, #72]	; (800e7c4 <Buil_Pop+0x214>)
 800e77c:	2203      	movs	r2, #3
 800e77e:	801a      	strh	r2, [r3, #0]
 800e780:	2300      	movs	r3, #0
 800e782:	80fb      	strh	r3, [r7, #6]
 800e784:	e008      	b.n	800e798 <Buil_Pop+0x1e8>
 800e786:	2001      	movs	r0, #1
 800e788:	f7ff fe80 	bl	800e48c <NotePixel>
 800e78c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e790:	b29b      	uxth	r3, r3
 800e792:	3301      	adds	r3, #1
 800e794:	b29b      	uxth	r3, r3
 800e796:	80fb      	strh	r3, [r7, #6]
 800e798:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e79c:	4b0a      	ldr	r3, [pc, #40]	; (800e7c8 <Buil_Pop+0x218>)
 800e79e:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e7a2:	0fd9      	lsrs	r1, r3, #31
 800e7a4:	440b      	add	r3, r1
 800e7a6:	105b      	asrs	r3, r3, #1
 800e7a8:	b21b      	sxth	r3, r3
 800e7aa:	3b06      	subs	r3, #6
 800e7ac:	429a      	cmp	r2, r3
 800e7ae:	dbea      	blt.n	800e786 <Buil_Pop+0x1d6>
 800e7b0:	bf00      	nop
 800e7b2:	bf00      	nop
 800e7b4:	3708      	adds	r7, #8
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	bd80      	pop	{r7, pc}
 800e7ba:	bf00      	nop
 800e7bc:	20000f8c 	.word	0x20000f8c
 800e7c0:	20000002 	.word	0x20000002
 800e7c4:	20000004 	.word	0x20000004
 800e7c8:	20000140 	.word	0x20000140

0800e7cc <PopColor>:
 800e7cc:	b480      	push	{r7}
 800e7ce:	b083      	sub	sp, #12
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	460a      	mov	r2, r1
 800e7d6:	80fb      	strh	r3, [r7, #6]
 800e7d8:	4613      	mov	r3, r2
 800e7da:	80bb      	strh	r3, [r7, #4]
 800e7dc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e7e0:	4b06      	ldr	r3, [pc, #24]	; (800e7fc <PopColor+0x30>)
 800e7e2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800e7e6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e7ea:	4b04      	ldr	r3, [pc, #16]	; (800e7fc <PopColor+0x30>)
 800e7ec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800e7f0:	bf00      	nop
 800e7f2:	370c      	adds	r7, #12
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fa:	4770      	bx	lr
 800e7fc:	20000140 	.word	0x20000140

0800e800 <Close_Pop>:
 800e800:	b480      	push	{r7}
 800e802:	af00      	add	r7, sp, #0
 800e804:	4b07      	ldr	r3, [pc, #28]	; (800e824 <Close_Pop+0x24>)
 800e806:	781b      	ldrb	r3, [r3, #0]
 800e808:	f023 0306 	bic.w	r3, r3, #6
 800e80c:	b2da      	uxtb	r2, r3
 800e80e:	4b05      	ldr	r3, [pc, #20]	; (800e824 <Close_Pop+0x24>)
 800e810:	701a      	strb	r2, [r3, #0]
 800e812:	4b05      	ldr	r3, [pc, #20]	; (800e828 <Close_Pop+0x28>)
 800e814:	2201      	movs	r2, #1
 800e816:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800e81a:	bf00      	nop
 800e81c:	46bd      	mov	sp, r7
 800e81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e822:	4770      	bx	lr
 800e824:	2000078e 	.word	0x2000078e
 800e828:	20000140 	.word	0x20000140

0800e82c <List_Pop>:
 800e82c:	b480      	push	{r7}
 800e82e:	af00      	add	r7, sp, #0
 800e830:	4b07      	ldr	r3, [pc, #28]	; (800e850 <List_Pop+0x24>)
 800e832:	781b      	ldrb	r3, [r3, #0]
 800e834:	f043 0302 	orr.w	r3, r3, #2
 800e838:	b2da      	uxtb	r2, r3
 800e83a:	4b05      	ldr	r3, [pc, #20]	; (800e850 <List_Pop+0x24>)
 800e83c:	701a      	strb	r2, [r3, #0]
 800e83e:	4b05      	ldr	r3, [pc, #20]	; (800e854 <List_Pop+0x28>)
 800e840:	2200      	movs	r2, #0
 800e842:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800e846:	bf00      	nop
 800e848:	46bd      	mov	sp, r7
 800e84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84e:	4770      	bx	lr
 800e850:	2000078e 	.word	0x2000078e
 800e854:	20000140 	.word	0x20000140

0800e858 <Dialog_Pop>:
 800e858:	b580      	push	{r7, lr}
 800e85a:	b084      	sub	sp, #16
 800e85c:	af02      	add	r7, sp, #8
 800e85e:	6078      	str	r0, [r7, #4]
 800e860:	4b2a      	ldr	r3, [pc, #168]	; (800e90c <Dialog_Pop+0xb4>)
 800e862:	781b      	ldrb	r3, [r3, #0]
 800e864:	f043 0304 	orr.w	r3, r3, #4
 800e868:	b2da      	uxtb	r2, r3
 800e86a:	4b28      	ldr	r3, [pc, #160]	; (800e90c <Dialog_Pop+0xb4>)
 800e86c:	701a      	strb	r2, [r3, #0]
 800e86e:	4b28      	ldr	r3, [pc, #160]	; (800e910 <Dialog_Pop+0xb8>)
 800e870:	2280      	movs	r2, #128	; 0x80
 800e872:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e876:	4b26      	ldr	r3, [pc, #152]	; (800e910 <Dialog_Pop+0xb8>)
 800e878:	2260      	movs	r2, #96	; 0x60
 800e87a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 800e87e:	4b24      	ldr	r3, [pc, #144]	; (800e910 <Dialog_Pop+0xb8>)
 800e880:	2250      	movs	r2, #80	; 0x50
 800e882:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800e886:	4b22      	ldr	r3, [pc, #136]	; (800e910 <Dialog_Pop+0xb8>)
 800e888:	22c8      	movs	r2, #200	; 0xc8
 800e88a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e88e:	f643 11e7 	movw	r1, #14823	; 0x39e7
 800e892:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e896:	f7ff ff99 	bl	800e7cc <PopColor>
 800e89a:	f7ff fe89 	bl	800e5b0 <Buil_Pop>
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	211c      	movs	r1, #28
 800e8a4:	2008      	movs	r0, #8
 800e8a6:	f000 f8e1 	bl	800ea6c <NoteSTR>
 800e8aa:	4b1a      	ldr	r3, [pc, #104]	; (800e914 <Dialog_Pop+0xbc>)
 800e8ac:	2211      	movs	r2, #17
 800e8ae:	2108      	movs	r1, #8
 800e8b0:	200c      	movs	r0, #12
 800e8b2:	f000 f8db 	bl	800ea6c <NoteSTR>
 800e8b6:	230a      	movs	r3, #10
 800e8b8:	9300      	str	r3, [sp, #0]
 800e8ba:	2302      	movs	r3, #2
 800e8bc:	2208      	movs	r2, #8
 800e8be:	210c      	movs	r1, #12
 800e8c0:	2000      	movs	r0, #0
 800e8c2:	f000 f979 	bl	800ebb8 <Note_4Point>
 800e8c6:	4b14      	ldr	r3, [pc, #80]	; (800e918 <Dialog_Pop+0xc0>)
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	2108      	movs	r1, #8
 800e8cc:	2018      	movs	r0, #24
 800e8ce:	f000 f8cd 	bl	800ea6c <NoteSTR>
 800e8d2:	4b12      	ldr	r3, [pc, #72]	; (800e91c <Dialog_Pop+0xc4>)
 800e8d4:	2211      	movs	r2, #17
 800e8d6:	2108      	movs	r1, #8
 800e8d8:	2048      	movs	r0, #72	; 0x48
 800e8da:	f000 f8c7 	bl	800ea6c <NoteSTR>
 800e8de:	230a      	movs	r3, #10
 800e8e0:	9300      	str	r3, [sp, #0]
 800e8e2:	2302      	movs	r3, #2
 800e8e4:	2208      	movs	r2, #8
 800e8e6:	2148      	movs	r1, #72	; 0x48
 800e8e8:	2000      	movs	r0, #0
 800e8ea:	f000 f965 	bl	800ebb8 <Note_4Point>
 800e8ee:	4b0c      	ldr	r3, [pc, #48]	; (800e920 <Dialog_Pop+0xc8>)
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	2108      	movs	r1, #8
 800e8f4:	2054      	movs	r0, #84	; 0x54
 800e8f6:	f000 f8b9 	bl	800ea6c <NoteSTR>
 800e8fa:	4b05      	ldr	r3, [pc, #20]	; (800e910 <Dialog_Pop+0xb8>)
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800e902:	bf00      	nop
 800e904:	3708      	adds	r7, #8
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}
 800e90a:	bf00      	nop
 800e90c:	2000078e 	.word	0x2000078e
 800e910:	20000140 	.word	0x20000140
 800e914:	080001c4 	.word	0x080001c4
 800e918:	080001c8 	.word	0x080001c8
 800e91c:	080001d0 	.word	0x080001d0
 800e920:	080001d4 	.word	0x080001d4

0800e924 <Calibrate_Pop>:
 800e924:	b580      	push	{r7, lr}
 800e926:	b082      	sub	sp, #8
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
 800e92c:	4b16      	ldr	r3, [pc, #88]	; (800e988 <Calibrate_Pop+0x64>)
 800e92e:	781b      	ldrb	r3, [r3, #0]
 800e930:	f043 0304 	orr.w	r3, r3, #4
 800e934:	b2da      	uxtb	r2, r3
 800e936:	4b14      	ldr	r3, [pc, #80]	; (800e988 <Calibrate_Pop+0x64>)
 800e938:	701a      	strb	r2, [r3, #0]
 800e93a:	4b14      	ldr	r3, [pc, #80]	; (800e98c <Calibrate_Pop+0x68>)
 800e93c:	22c8      	movs	r2, #200	; 0xc8
 800e93e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e942:	4b12      	ldr	r3, [pc, #72]	; (800e98c <Calibrate_Pop+0x68>)
 800e944:	2240      	movs	r2, #64	; 0x40
 800e946:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 800e94a:	4b10      	ldr	r3, [pc, #64]	; (800e98c <Calibrate_Pop+0x68>)
 800e94c:	2232      	movs	r2, #50	; 0x32
 800e94e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800e952:	4b0e      	ldr	r3, [pc, #56]	; (800e98c <Calibrate_Pop+0x68>)
 800e954:	22e6      	movs	r2, #230	; 0xe6
 800e956:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e95a:	f643 11e7 	movw	r1, #14823	; 0x39e7
 800e95e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e962:	f7ff ff33 	bl	800e7cc <PopColor>
 800e966:	f7ff fe23 	bl	800e5b0 <Buil_Pop>
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	2200      	movs	r2, #0
 800e96e:	210a      	movs	r1, #10
 800e970:	2010      	movs	r0, #16
 800e972:	f000 f87b 	bl	800ea6c <NoteSTR>
 800e976:	4b05      	ldr	r3, [pc, #20]	; (800e98c <Calibrate_Pop+0x68>)
 800e978:	2200      	movs	r2, #0
 800e97a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800e97e:	bf00      	nop
 800e980:	3708      	adds	r7, #8
 800e982:	46bd      	mov	sp, r7
 800e984:	bd80      	pop	{r7, pc}
 800e986:	bf00      	nop
 800e988:	2000078e 	.word	0x2000078e
 800e98c:	20000140 	.word	0x20000140

0800e990 <CalSave_Pop>:
 800e990:	b580      	push	{r7, lr}
 800e992:	b084      	sub	sp, #16
 800e994:	af02      	add	r7, sp, #8
 800e996:	6078      	str	r0, [r7, #4]
 800e998:	4b2d      	ldr	r3, [pc, #180]	; (800ea50 <CalSave_Pop+0xc0>)
 800e99a:	781b      	ldrb	r3, [r3, #0]
 800e99c:	f043 0304 	orr.w	r3, r3, #4
 800e9a0:	b2da      	uxtb	r2, r3
 800e9a2:	4b2b      	ldr	r3, [pc, #172]	; (800ea50 <CalSave_Pop+0xc0>)
 800e9a4:	701a      	strb	r2, [r3, #0]
 800e9a6:	4b2b      	ldr	r3, [pc, #172]	; (800ea54 <CalSave_Pop+0xc4>)
 800e9a8:	22d0      	movs	r2, #208	; 0xd0
 800e9aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e9ae:	4b29      	ldr	r3, [pc, #164]	; (800ea54 <CalSave_Pop+0xc4>)
 800e9b0:	2260      	movs	r2, #96	; 0x60
 800e9b2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 800e9b6:	4b27      	ldr	r3, [pc, #156]	; (800ea54 <CalSave_Pop+0xc4>)
 800e9b8:	221e      	movs	r2, #30
 800e9ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800e9be:	4b25      	ldr	r3, [pc, #148]	; (800ea54 <CalSave_Pop+0xc4>)
 800e9c0:	22c8      	movs	r2, #200	; 0xc8
 800e9c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e9c6:	f643 11e7 	movw	r1, #14823	; 0x39e7
 800e9ca:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e9ce:	f7ff fefd 	bl	800e7cc <PopColor>
 800e9d2:	f7ff fded 	bl	800e5b0 <Buil_Pop>
 800e9d6:	4b20      	ldr	r3, [pc, #128]	; (800ea58 <CalSave_Pop+0xc8>)
 800e9d8:	2200      	movs	r2, #0
 800e9da:	211c      	movs	r1, #28
 800e9dc:	2006      	movs	r0, #6
 800e9de:	f000 f845 	bl	800ea6c <NoteSTR>
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	211c      	movs	r1, #28
 800e9e8:	205a      	movs	r0, #90	; 0x5a
 800e9ea:	f000 f83f 	bl	800ea6c <NoteSTR>
 800e9ee:	4b1b      	ldr	r3, [pc, #108]	; (800ea5c <CalSave_Pop+0xcc>)
 800e9f0:	2211      	movs	r2, #17
 800e9f2:	2108      	movs	r1, #8
 800e9f4:	201e      	movs	r0, #30
 800e9f6:	f000 f839 	bl	800ea6c <NoteSTR>
 800e9fa:	230a      	movs	r3, #10
 800e9fc:	9300      	str	r3, [sp, #0]
 800e9fe:	2302      	movs	r3, #2
 800ea00:	2208      	movs	r2, #8
 800ea02:	211e      	movs	r1, #30
 800ea04:	2000      	movs	r0, #0
 800ea06:	f000 f8d7 	bl	800ebb8 <Note_4Point>
 800ea0a:	4b15      	ldr	r3, [pc, #84]	; (800ea60 <CalSave_Pop+0xd0>)
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	2108      	movs	r1, #8
 800ea10:	202a      	movs	r0, #42	; 0x2a
 800ea12:	f000 f82b 	bl	800ea6c <NoteSTR>
 800ea16:	4b13      	ldr	r3, [pc, #76]	; (800ea64 <CalSave_Pop+0xd4>)
 800ea18:	2211      	movs	r2, #17
 800ea1a:	2108      	movs	r1, #8
 800ea1c:	2078      	movs	r0, #120	; 0x78
 800ea1e:	f000 f825 	bl	800ea6c <NoteSTR>
 800ea22:	230a      	movs	r3, #10
 800ea24:	9300      	str	r3, [sp, #0]
 800ea26:	2302      	movs	r3, #2
 800ea28:	2208      	movs	r2, #8
 800ea2a:	2178      	movs	r1, #120	; 0x78
 800ea2c:	2000      	movs	r0, #0
 800ea2e:	f000 f8c3 	bl	800ebb8 <Note_4Point>
 800ea32:	4b0d      	ldr	r3, [pc, #52]	; (800ea68 <CalSave_Pop+0xd8>)
 800ea34:	2200      	movs	r2, #0
 800ea36:	2108      	movs	r1, #8
 800ea38:	2084      	movs	r0, #132	; 0x84
 800ea3a:	f000 f817 	bl	800ea6c <NoteSTR>
 800ea3e:	4b05      	ldr	r3, [pc, #20]	; (800ea54 <CalSave_Pop+0xc4>)
 800ea40:	2200      	movs	r2, #0
 800ea42:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800ea46:	bf00      	nop
 800ea48:	3708      	adds	r7, #8
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}
 800ea4e:	bf00      	nop
 800ea50:	2000078e 	.word	0x2000078e
 800ea54:	20000140 	.word	0x20000140
 800ea58:	080001dc 	.word	0x080001dc
 800ea5c:	080001c4 	.word	0x080001c4
 800ea60:	080001c8 	.word	0x080001c8
 800ea64:	080001d0 	.word	0x080001d0
 800ea68:	080001d4 	.word	0x080001d4

0800ea6c <NoteSTR>:
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b086      	sub	sp, #24
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	607b      	str	r3, [r7, #4]
 800ea74:	4603      	mov	r3, r0
 800ea76:	81fb      	strh	r3, [r7, #14]
 800ea78:	460b      	mov	r3, r1
 800ea7a:	81bb      	strh	r3, [r7, #12]
 800ea7c:	4613      	mov	r3, r2
 800ea7e:	72fb      	strb	r3, [r7, #11]
 800ea80:	4a48      	ldr	r2, [pc, #288]	; (800eba4 <NoteSTR+0x138>)
 800ea82:	89fb      	ldrh	r3, [r7, #14]
 800ea84:	8013      	strh	r3, [r2, #0]
 800ea86:	4a48      	ldr	r2, [pc, #288]	; (800eba8 <NoteSTR+0x13c>)
 800ea88:	89bb      	ldrh	r3, [r7, #12]
 800ea8a:	8013      	strh	r3, [r2, #0]
 800ea8c:	e080      	b.n	800eb90 <NoteSTR+0x124>
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	1c5a      	adds	r2, r3, #1
 800ea92:	607a      	str	r2, [r7, #4]
 800ea94:	781b      	ldrb	r3, [r3, #0]
 800ea96:	747b      	strb	r3, [r7, #17]
 800ea98:	2300      	movs	r3, #0
 800ea9a:	82fb      	strh	r3, [r7, #22]
 800ea9c:	e074      	b.n	800eb88 <NoteSTR+0x11c>
 800ea9e:	7afb      	ldrb	r3, [r7, #11]
 800eaa0:	f003 0310 	and.w	r3, r3, #16
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d10e      	bne.n	800eac6 <NoteSTR+0x5a>
 800eaa8:	7c7b      	ldrb	r3, [r7, #17]
 800eaaa:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800eaae:	4613      	mov	r3, r2
 800eab0:	005b      	lsls	r3, r3, #1
 800eab2:	4413      	add	r3, r2
 800eab4:	005b      	lsls	r3, r3, #1
 800eab6:	461a      	mov	r2, r3
 800eab8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800eabc:	4413      	add	r3, r2
 800eabe:	4a3b      	ldr	r2, [pc, #236]	; (800ebac <NoteSTR+0x140>)
 800eac0:	5cd3      	ldrb	r3, [r2, r3]
 800eac2:	827b      	strh	r3, [r7, #18]
 800eac4:	e00d      	b.n	800eae2 <NoteSTR+0x76>
 800eac6:	7c7b      	ldrb	r3, [r7, #17]
 800eac8:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800eacc:	4613      	mov	r3, r2
 800eace:	005b      	lsls	r3, r3, #1
 800ead0:	4413      	add	r3, r2
 800ead2:	005b      	lsls	r3, r3, #1
 800ead4:	461a      	mov	r2, r3
 800ead6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800eada:	4413      	add	r3, r2
 800eadc:	4a34      	ldr	r2, [pc, #208]	; (800ebb0 <NoteSTR+0x144>)
 800eade:	5cd3      	ldrb	r3, [r2, r3]
 800eae0:	827b      	strh	r3, [r7, #18]
 800eae2:	7afb      	ldrb	r3, [r7, #11]
 800eae4:	f003 0320 	and.w	r3, r3, #32
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d00c      	beq.n	800eb06 <NoteSTR+0x9a>
 800eaec:	8afb      	ldrh	r3, [r7, #22]
 800eaee:	f003 0301 	and.w	r3, r3, #1
 800eaf2:	b29b      	uxth	r3, r3
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d001      	beq.n	800eafc <NoteSTR+0x90>
 800eaf8:	4a2e      	ldr	r2, [pc, #184]	; (800ebb4 <NoteSTR+0x148>)
 800eafa:	e001      	b.n	800eb00 <NoteSTR+0x94>
 800eafc:	f245 5255 	movw	r2, #21845	; 0x5555
 800eb00:	8a7b      	ldrh	r3, [r7, #18]
 800eb02:	4013      	ands	r3, r2
 800eb04:	827b      	strh	r3, [r7, #18]
 800eb06:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800eb0a:	009b      	lsls	r3, r3, #2
 800eb0c:	827b      	strh	r3, [r7, #18]
 800eb0e:	2300      	movs	r3, #0
 800eb10:	82bb      	strh	r3, [r7, #20]
 800eb12:	e01f      	b.n	800eb54 <NoteSTR+0xe8>
 800eb14:	8a7b      	ldrh	r3, [r7, #18]
 800eb16:	f003 0301 	and.w	r3, r3, #1
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d00b      	beq.n	800eb36 <NoteSTR+0xca>
 800eb1e:	7afb      	ldrb	r3, [r7, #11]
 800eb20:	f003 0301 	and.w	r3, r3, #1
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	bf0c      	ite	eq
 800eb28:	2301      	moveq	r3, #1
 800eb2a:	2300      	movne	r3, #0
 800eb2c:	b2db      	uxtb	r3, r3
 800eb2e:	4618      	mov	r0, r3
 800eb30:	f7ff fcac 	bl	800e48c <NotePixel>
 800eb34:	e006      	b.n	800eb44 <NoteSTR+0xd8>
 800eb36:	7afb      	ldrb	r3, [r7, #11]
 800eb38:	f003 0301 	and.w	r3, r3, #1
 800eb3c:	b2db      	uxtb	r3, r3
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f7ff fca4 	bl	800e48c <NotePixel>
 800eb44:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800eb48:	105b      	asrs	r3, r3, #1
 800eb4a:	827b      	strh	r3, [r7, #18]
 800eb4c:	8abb      	ldrh	r3, [r7, #20]
 800eb4e:	3301      	adds	r3, #1
 800eb50:	b29b      	uxth	r3, r3
 800eb52:	82bb      	strh	r3, [r7, #20]
 800eb54:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800eb58:	2b0d      	cmp	r3, #13
 800eb5a:	dddb      	ble.n	800eb14 <NoteSTR+0xa8>
 800eb5c:	4b11      	ldr	r3, [pc, #68]	; (800eba4 <NoteSTR+0x138>)
 800eb5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eb62:	b29b      	uxth	r3, r3
 800eb64:	3301      	adds	r3, #1
 800eb66:	b29b      	uxth	r3, r3
 800eb68:	b21a      	sxth	r2, r3
 800eb6a:	4b0e      	ldr	r3, [pc, #56]	; (800eba4 <NoteSTR+0x138>)
 800eb6c:	801a      	strh	r2, [r3, #0]
 800eb6e:	4b0e      	ldr	r3, [pc, #56]	; (800eba8 <NoteSTR+0x13c>)
 800eb70:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eb74:	b29b      	uxth	r3, r3
 800eb76:	3b0e      	subs	r3, #14
 800eb78:	b29b      	uxth	r3, r3
 800eb7a:	b21a      	sxth	r2, r3
 800eb7c:	4b0a      	ldr	r3, [pc, #40]	; (800eba8 <NoteSTR+0x13c>)
 800eb7e:	801a      	strh	r2, [r3, #0]
 800eb80:	8afb      	ldrh	r3, [r7, #22]
 800eb82:	3301      	adds	r3, #1
 800eb84:	b29b      	uxth	r3, r3
 800eb86:	82fb      	strh	r3, [r7, #22]
 800eb88:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800eb8c:	2b05      	cmp	r3, #5
 800eb8e:	dd86      	ble.n	800ea9e <NoteSTR+0x32>
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	781b      	ldrb	r3, [r3, #0]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	f47f af7a 	bne.w	800ea8e <NoteSTR+0x22>
 800eb9a:	bf00      	nop
 800eb9c:	bf00      	nop
 800eb9e:	3718      	adds	r7, #24
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bd80      	pop	{r7, pc}
 800eba4:	20000002 	.word	0x20000002
 800eba8:	20000004 	.word	0x20000004
 800ebac:	080016c4 	.word	0x080016c4
 800ebb0:	08001490 	.word	0x08001490
 800ebb4:	ffffaaaa 	.word	0xffffaaaa

0800ebb8 <Note_4Point>:
 800ebb8:	b590      	push	{r4, r7, lr}
 800ebba:	b083      	sub	sp, #12
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	4604      	mov	r4, r0
 800ebc0:	4608      	mov	r0, r1
 800ebc2:	4611      	mov	r1, r2
 800ebc4:	461a      	mov	r2, r3
 800ebc6:	4623      	mov	r3, r4
 800ebc8:	71fb      	strb	r3, [r7, #7]
 800ebca:	4603      	mov	r3, r0
 800ebcc:	80bb      	strh	r3, [r7, #4]
 800ebce:	460b      	mov	r3, r1
 800ebd0:	807b      	strh	r3, [r7, #2]
 800ebd2:	4613      	mov	r3, r2
 800ebd4:	71bb      	strb	r3, [r7, #6]
 800ebd6:	7e3b      	ldrb	r3, [r7, #24]
 800ebd8:	3304      	adds	r3, #4
 800ebda:	763b      	strb	r3, [r7, #24]
 800ebdc:	4a2e      	ldr	r2, [pc, #184]	; (800ec98 <Note_4Point+0xe0>)
 800ebde:	88bb      	ldrh	r3, [r7, #4]
 800ebe0:	8013      	strh	r3, [r2, #0]
 800ebe2:	4a2e      	ldr	r2, [pc, #184]	; (800ec9c <Note_4Point+0xe4>)
 800ebe4:	887b      	ldrh	r3, [r7, #2]
 800ebe6:	8013      	strh	r3, [r2, #0]
 800ebe8:	79fb      	ldrb	r3, [r7, #7]
 800ebea:	f003 0301 	and.w	r3, r3, #1
 800ebee:	b2db      	uxtb	r3, r3
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f7ff fc4b 	bl	800e48c <NotePixel>
 800ebf6:	4a28      	ldr	r2, [pc, #160]	; (800ec98 <Note_4Point+0xe0>)
 800ebf8:	88bb      	ldrh	r3, [r7, #4]
 800ebfa:	8013      	strh	r3, [r2, #0]
 800ebfc:	7e3b      	ldrb	r3, [r7, #24]
 800ebfe:	b29a      	uxth	r2, r3
 800ec00:	887b      	ldrh	r3, [r7, #2]
 800ec02:	4413      	add	r3, r2
 800ec04:	b29b      	uxth	r3, r3
 800ec06:	3b01      	subs	r3, #1
 800ec08:	b29b      	uxth	r3, r3
 800ec0a:	b21a      	sxth	r2, r3
 800ec0c:	4b23      	ldr	r3, [pc, #140]	; (800ec9c <Note_4Point+0xe4>)
 800ec0e:	801a      	strh	r2, [r3, #0]
 800ec10:	79fb      	ldrb	r3, [r7, #7]
 800ec12:	f003 0301 	and.w	r3, r3, #1
 800ec16:	b2db      	uxtb	r3, r3
 800ec18:	4618      	mov	r0, r3
 800ec1a:	f7ff fc37 	bl	800e48c <NotePixel>
 800ec1e:	79bb      	ldrb	r3, [r7, #6]
 800ec20:	b29b      	uxth	r3, r3
 800ec22:	461a      	mov	r2, r3
 800ec24:	0052      	lsls	r2, r2, #1
 800ec26:	4413      	add	r3, r2
 800ec28:	005b      	lsls	r3, r3, #1
 800ec2a:	b29a      	uxth	r2, r3
 800ec2c:	88bb      	ldrh	r3, [r7, #4]
 800ec2e:	4413      	add	r3, r2
 800ec30:	b29b      	uxth	r3, r3
 800ec32:	3b01      	subs	r3, #1
 800ec34:	b29b      	uxth	r3, r3
 800ec36:	b21a      	sxth	r2, r3
 800ec38:	4b17      	ldr	r3, [pc, #92]	; (800ec98 <Note_4Point+0xe0>)
 800ec3a:	801a      	strh	r2, [r3, #0]
 800ec3c:	4a17      	ldr	r2, [pc, #92]	; (800ec9c <Note_4Point+0xe4>)
 800ec3e:	887b      	ldrh	r3, [r7, #2]
 800ec40:	8013      	strh	r3, [r2, #0]
 800ec42:	79fb      	ldrb	r3, [r7, #7]
 800ec44:	f003 0301 	and.w	r3, r3, #1
 800ec48:	b2db      	uxtb	r3, r3
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	f7ff fc1e 	bl	800e48c <NotePixel>
 800ec50:	79bb      	ldrb	r3, [r7, #6]
 800ec52:	b29b      	uxth	r3, r3
 800ec54:	461a      	mov	r2, r3
 800ec56:	0052      	lsls	r2, r2, #1
 800ec58:	4413      	add	r3, r2
 800ec5a:	005b      	lsls	r3, r3, #1
 800ec5c:	b29a      	uxth	r2, r3
 800ec5e:	88bb      	ldrh	r3, [r7, #4]
 800ec60:	4413      	add	r3, r2
 800ec62:	b29b      	uxth	r3, r3
 800ec64:	3b01      	subs	r3, #1
 800ec66:	b29b      	uxth	r3, r3
 800ec68:	b21a      	sxth	r2, r3
 800ec6a:	4b0b      	ldr	r3, [pc, #44]	; (800ec98 <Note_4Point+0xe0>)
 800ec6c:	801a      	strh	r2, [r3, #0]
 800ec6e:	7e3b      	ldrb	r3, [r7, #24]
 800ec70:	b29a      	uxth	r2, r3
 800ec72:	887b      	ldrh	r3, [r7, #2]
 800ec74:	4413      	add	r3, r2
 800ec76:	b29b      	uxth	r3, r3
 800ec78:	3b01      	subs	r3, #1
 800ec7a:	b29b      	uxth	r3, r3
 800ec7c:	b21a      	sxth	r2, r3
 800ec7e:	4b07      	ldr	r3, [pc, #28]	; (800ec9c <Note_4Point+0xe4>)
 800ec80:	801a      	strh	r2, [r3, #0]
 800ec82:	79fb      	ldrb	r3, [r7, #7]
 800ec84:	f003 0301 	and.w	r3, r3, #1
 800ec88:	b2db      	uxtb	r3, r3
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f7ff fbfe 	bl	800e48c <NotePixel>
 800ec90:	bf00      	nop
 800ec92:	370c      	adds	r7, #12
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd90      	pop	{r4, r7, pc}
 800ec98:	20000002 	.word	0x20000002
 800ec9c:	20000004 	.word	0x20000004

0800eca0 <ExtFlash_SendByte>:

/*******************************************************************************
 SPI_FLASH_SendByte
*******************************************************************************/
char ExtFlash_SendByte(char byte)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b084      	sub	sp, #16
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	4603      	mov	r3, r0
 800eca8:	71fb      	strb	r3, [r7, #7]
   char retbyte=0;
 800ecaa:	2300      	movs	r3, #0
 800ecac:	73fb      	strb	r3, [r7, #15]
	Tout = 0;
 800ecae:	4b1d      	ldr	r3, [pc, #116]	; (800ed24 <ExtFlash_SendByte+0x84>)
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	601a      	str	r2, [r3, #0]
  while(HAL_SPI_GetState( &hspi2 ) != HAL_SPI_STATE_READY) /*SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET*/
 800ecb4:	e009      	b.n	800ecca <ExtFlash_SendByte+0x2a>
  {
    if(Tout++ > TMAX)
 800ecb6:	4b1b      	ldr	r3, [pc, #108]	; (800ed24 <ExtFlash_SendByte+0x84>)
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	1c5a      	adds	r2, r3, #1
 800ecbc:	4919      	ldr	r1, [pc, #100]	; (800ed24 <ExtFlash_SendByte+0x84>)
 800ecbe:	600a      	str	r2, [r1, #0]
 800ecc0:	4a19      	ldr	r2, [pc, #100]	; (800ed28 <ExtFlash_SendByte+0x88>)
 800ecc2:	4293      	cmp	r3, r2
 800ecc4:	d901      	bls.n	800ecca <ExtFlash_SendByte+0x2a>
    	return 255;
 800ecc6:	23ff      	movs	r3, #255	; 0xff
 800ecc8:	e027      	b.n	800ed1a <ExtFlash_SendByte+0x7a>
  while(HAL_SPI_GetState( &hspi2 ) != HAL_SPI_STATE_READY) /*SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET*/
 800ecca:	4818      	ldr	r0, [pc, #96]	; (800ed2c <ExtFlash_SendByte+0x8c>)
 800eccc:	f00d ff5e 	bl	801cb8c <HAL_SPI_GetState>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	2b01      	cmp	r3, #1
 800ecd4:	d1ef      	bne.n	800ecb6 <ExtFlash_SendByte+0x16>
  }
  HAL_SPI_Transmit(&hspi2, (unsigned char*)&byte, 1, 1);// timeout 1 ms  SPI_I2S_SendData(SPI2, byte);
 800ecd6:	1df9      	adds	r1, r7, #7
 800ecd8:	2301      	movs	r3, #1
 800ecda:	2201      	movs	r2, #1
 800ecdc:	4813      	ldr	r0, [pc, #76]	; (800ed2c <ExtFlash_SendByte+0x8c>)
 800ecde:	f00d fa5c 	bl	801c19a <HAL_SPI_Transmit>
  Tout = 0;
 800ece2:	4b10      	ldr	r3, [pc, #64]	; (800ed24 <ExtFlash_SendByte+0x84>)
 800ece4:	2200      	movs	r2, #0
 800ece6:	601a      	str	r2, [r3, #0]
  while(HAL_SPI_GetState( &hspi2 ) != HAL_SPI_STATE_READY) //  while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET)
 800ece8:	e009      	b.n	800ecfe <ExtFlash_SendByte+0x5e>
  {
    if(Tout++ > TMAX)
 800ecea:	4b0e      	ldr	r3, [pc, #56]	; (800ed24 <ExtFlash_SendByte+0x84>)
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	1c5a      	adds	r2, r3, #1
 800ecf0:	490c      	ldr	r1, [pc, #48]	; (800ed24 <ExtFlash_SendByte+0x84>)
 800ecf2:	600a      	str	r2, [r1, #0]
 800ecf4:	4a0c      	ldr	r2, [pc, #48]	; (800ed28 <ExtFlash_SendByte+0x88>)
 800ecf6:	4293      	cmp	r3, r2
 800ecf8:	d901      	bls.n	800ecfe <ExtFlash_SendByte+0x5e>
    	return 255;
 800ecfa:	23ff      	movs	r3, #255	; 0xff
 800ecfc:	e00d      	b.n	800ed1a <ExtFlash_SendByte+0x7a>
  while(HAL_SPI_GetState( &hspi2 ) != HAL_SPI_STATE_READY) //  while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET)
 800ecfe:	480b      	ldr	r0, [pc, #44]	; (800ed2c <ExtFlash_SendByte+0x8c>)
 800ed00:	f00d ff44 	bl	801cb8c <HAL_SPI_GetState>
 800ed04:	4603      	mov	r3, r0
 800ed06:	2b01      	cmp	r3, #1
 800ed08:	d1ef      	bne.n	800ecea <ExtFlash_SendByte+0x4a>
  }
  HAL_SPI_Receive(&hspi2, (unsigned char*)&retbyte, 1, 1); //timeout 1 ms
 800ed0a:	f107 010f 	add.w	r1, r7, #15
 800ed0e:	2301      	movs	r3, #1
 800ed10:	2201      	movs	r2, #1
 800ed12:	4806      	ldr	r0, [pc, #24]	; (800ed2c <ExtFlash_SendByte+0x8c>)
 800ed14:	f00d fb7d 	bl	801c412 <HAL_SPI_Receive>
  return retbyte/*SPI_I2S_ReceiveData(SPI2)*/;
 800ed18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	3710      	adds	r7, #16
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	bd80      	pop	{r7, pc}
 800ed22:	bf00      	nop
 800ed24:	200015d0 	.word	0x200015d0
 800ed28:	000186a0 	.word	0x000186a0
 800ed2c:	20006890 	.word	0x20006890

0800ed30 <ExtFlash_WaitForWriteEnd>:

/*******************************************************************************
 SPI_FLASH_WaitForWriteEnd
*******************************************************************************/
void ExtFlash_WaitForWriteEnd(void)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b082      	sub	sp, #8
 800ed34:	af00      	add	r7, sp, #0
  char FLASH_Status = 0;
 800ed36:	2300      	movs	r3, #0
 800ed38:	71fb      	strb	r3, [r7, #7]

  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ed40:	4812      	ldr	r0, [pc, #72]	; (800ed8c <ExtFlash_WaitForWriteEnd+0x5c>)
 800ed42:	f00a ff25 	bl	8019b90 <HAL_GPIO_WritePin>
  ExtFlash_SendByte(RDSR);
 800ed46:	2005      	movs	r0, #5
 800ed48:	f7ff ffaa 	bl	800eca0 <ExtFlash_SendByte>
  Tout = 0;
 800ed4c:	4b10      	ldr	r3, [pc, #64]	; (800ed90 <ExtFlash_WaitForWriteEnd+0x60>)
 800ed4e:	2200      	movs	r2, #0
 800ed50:	601a      	str	r2, [r3, #0]
  do
  {
	  FLASH_Status = ExtFlash_SendByte(Dummy_Byte);
 800ed52:	20a5      	movs	r0, #165	; 0xa5
 800ed54:	f7ff ffa4 	bl	800eca0 <ExtFlash_SendByte>
 800ed58:	4603      	mov	r3, r0
 800ed5a:	71fb      	strb	r3, [r7, #7]
      if(Tout++ > TMAX)
 800ed5c:	4b0c      	ldr	r3, [pc, #48]	; (800ed90 <ExtFlash_WaitForWriteEnd+0x60>)
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	1c5a      	adds	r2, r3, #1
 800ed62:	490b      	ldr	r1, [pc, #44]	; (800ed90 <ExtFlash_WaitForWriteEnd+0x60>)
 800ed64:	600a      	str	r2, [r1, #0]
 800ed66:	4a0b      	ldr	r2, [pc, #44]	; (800ed94 <ExtFlash_WaitForWriteEnd+0x64>)
 800ed68:	4293      	cmp	r3, r2
 800ed6a:	d80b      	bhi.n	800ed84 <ExtFlash_WaitForWriteEnd+0x54>
    	  return;
  }
  while((FLASH_Status & WIP_Flag) == SET);              // Write in progress
 800ed6c:	79fb      	ldrb	r3, [r7, #7]
 800ed6e:	f003 0301 	and.w	r3, r3, #1
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d1ed      	bne.n	800ed52 <ExtFlash_WaitForWriteEnd+0x22>
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET);
 800ed76:	2201      	movs	r2, #1
 800ed78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ed7c:	4803      	ldr	r0, [pc, #12]	; (800ed8c <ExtFlash_WaitForWriteEnd+0x5c>)
 800ed7e:	f00a ff07 	bl	8019b90 <HAL_GPIO_WritePin>
 800ed82:	e000      	b.n	800ed86 <ExtFlash_WaitForWriteEnd+0x56>
    	  return;
 800ed84:	bf00      	nop
}
 800ed86:	3708      	adds	r7, #8
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	bd80      	pop	{r7, pc}
 800ed8c:	40020400 	.word	0x40020400
 800ed90:	200015d0 	.word	0x200015d0
 800ed94:	000186a0 	.word	0x000186a0

0800ed98 <ExtFlash_PageRD>:

/*******************************************************************************
 SPI_FLASH_BufferRead
*******************************************************************************/
void ExtFlash_PageRD(char* pBuffer, unsigned ReadAddr, short Length)
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b084      	sub	sp, #16
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	60f8      	str	r0, [r7, #12]
 800eda0:	60b9      	str	r1, [r7, #8]
 800eda2:	4613      	mov	r3, r2
 800eda4:	80fb      	strh	r3, [r7, #6]
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800eda6:	2201      	movs	r2, #1
 800eda8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800edac:	481d      	ldr	r0, [pc, #116]	; (800ee24 <ExtFlash_PageRD+0x8c>)
 800edae:	f00a feef 	bl	8019b90 <HAL_GPIO_WritePin>
  ExtFlash_WaitForWriteEnd();
 800edb2:	f7ff ffbd 	bl	800ed30 <ExtFlash_WaitForWriteEnd>
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800edb6:	2200      	movs	r2, #0
 800edb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800edbc:	4819      	ldr	r0, [pc, #100]	; (800ee24 <ExtFlash_PageRD+0x8c>)
 800edbe:	f00a fee7 	bl	8019b90 <HAL_GPIO_WritePin>
  ExtFlash_SendByte(READ);
 800edc2:	2003      	movs	r0, #3
 800edc4:	f7ff ff6c 	bl	800eca0 <ExtFlash_SendByte>
  ExtFlash_SendByte((ReadAddr & 0xFF0000) >> 16);
 800edc8:	68bb      	ldr	r3, [r7, #8]
 800edca:	0c1b      	lsrs	r3, r3, #16
 800edcc:	b2db      	uxtb	r3, r3
 800edce:	4618      	mov	r0, r3
 800edd0:	f7ff ff66 	bl	800eca0 <ExtFlash_SendByte>
  ExtFlash_SendByte((ReadAddr& 0xFF00) >> 8);
 800edd4:	68bb      	ldr	r3, [r7, #8]
 800edd6:	0a1b      	lsrs	r3, r3, #8
 800edd8:	b2db      	uxtb	r3, r3
 800edda:	4618      	mov	r0, r3
 800eddc:	f7ff ff60 	bl	800eca0 <ExtFlash_SendByte>
  ExtFlash_SendByte(ReadAddr & 0xFF);
 800ede0:	68bb      	ldr	r3, [r7, #8]
 800ede2:	b2db      	uxtb	r3, r3
 800ede4:	4618      	mov	r0, r3
 800ede6:	f7ff ff5b 	bl	800eca0 <ExtFlash_SendByte>

  while(Length--)
 800edea:	e009      	b.n	800ee00 <ExtFlash_PageRD+0x68>
  { // while there is data to be read
    *pBuffer = (ExtFlash_SendByte(Dummy_Byte));
 800edec:	20a5      	movs	r0, #165	; 0xa5
 800edee:	f7ff ff57 	bl	800eca0 <ExtFlash_SendByte>
 800edf2:	4603      	mov	r3, r0
 800edf4:	461a      	mov	r2, r3
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	701a      	strb	r2, [r3, #0]
    pBuffer++;
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	3301      	adds	r3, #1
 800edfe:	60fb      	str	r3, [r7, #12]
  while(Length--)
 800ee00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ee04:	b29a      	uxth	r2, r3
 800ee06:	3a01      	subs	r2, #1
 800ee08:	b292      	uxth	r2, r2
 800ee0a:	80fa      	strh	r2, [r7, #6]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d1ed      	bne.n	800edec <ExtFlash_PageRD+0x54>
  }
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET);
 800ee10:	2201      	movs	r2, #1
 800ee12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ee16:	4803      	ldr	r0, [pc, #12]	; (800ee24 <ExtFlash_PageRD+0x8c>)
 800ee18:	f00a feba 	bl	8019b90 <HAL_GPIO_WritePin>
}
 800ee1c:	bf00      	nop
 800ee1e:	3710      	adds	r7, #16
 800ee20:	46bd      	mov	sp, r7
 800ee22:	bd80      	pop	{r7, pc}
 800ee24:	40020400 	.word	0x40020400

0800ee28 <ExtFlash_WriteEnable>:

/*******************************************************************************
 SPI_FLASH_WriteEnable
*******************************************************************************/
void ExtFlash_WriteEnable(void)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ee32:	4807      	ldr	r0, [pc, #28]	; (800ee50 <ExtFlash_WriteEnable+0x28>)
 800ee34:	f00a feac 	bl	8019b90 <HAL_GPIO_WritePin>
  ExtFlash_SendByte(WREN);
 800ee38:	2006      	movs	r0, #6
 800ee3a:	f7ff ff31 	bl	800eca0 <ExtFlash_SendByte>
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800ee3e:	2201      	movs	r2, #1
 800ee40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ee44:	4802      	ldr	r0, [pc, #8]	; (800ee50 <ExtFlash_WriteEnable+0x28>)
 800ee46:	f00a fea3 	bl	8019b90 <HAL_GPIO_WritePin>
}
 800ee4a:	bf00      	nop
 800ee4c:	bd80      	pop	{r7, pc}
 800ee4e:	bf00      	nop
 800ee50:	40020400 	.word	0x40020400

0800ee54 <ExtFlash_PageProg>:

/*******************************************************************************
 дFLASHҳ(256 Bytes)�� Mode=0: ��0��1���ݸ�д   Mode=1: ������д
*******************************************************************************/
void ExtFlash_PageProg(char* pBuffer, unsigned WriteAddr)
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b084      	sub	sp, #16
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
 800ee5c:	6039      	str	r1, [r7, #0]
  short   Lenght = 256;
 800ee5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ee62:	81fb      	strh	r3, [r7, #14]

  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800ee64:	2201      	movs	r2, #1
 800ee66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ee6a:	481f      	ldr	r0, [pc, #124]	; (800eee8 <ExtFlash_PageProg+0x94>)
 800ee6c:	f00a fe90 	bl	8019b90 <HAL_GPIO_WritePin>
  ExtFlash_WaitForWriteEnd();
 800ee70:	f7ff ff5e 	bl	800ed30 <ExtFlash_WaitForWriteEnd>
  ExtFlash_WriteEnable();
 800ee74:	f7ff ffd8 	bl	800ee28 <ExtFlash_WriteEnable>
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800ee78:	2200      	movs	r2, #0
 800ee7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ee7e:	481a      	ldr	r0, [pc, #104]	; (800eee8 <ExtFlash_PageProg+0x94>)
 800ee80:	f00a fe86 	bl	8019b90 <HAL_GPIO_WritePin>
  ExtFlash_SendByte(PP);
 800ee84:	2002      	movs	r0, #2
 800ee86:	f7ff ff0b 	bl	800eca0 <ExtFlash_SendByte>
  ExtFlash_SendByte((WriteAddr & 0xFF0000) >> 16);
 800ee8a:	683b      	ldr	r3, [r7, #0]
 800ee8c:	0c1b      	lsrs	r3, r3, #16
 800ee8e:	b2db      	uxtb	r3, r3
 800ee90:	4618      	mov	r0, r3
 800ee92:	f7ff ff05 	bl	800eca0 <ExtFlash_SendByte>
  ExtFlash_SendByte((WriteAddr & 0xFF00) >> 8);
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	0a1b      	lsrs	r3, r3, #8
 800ee9a:	b2db      	uxtb	r3, r3
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	f7ff feff 	bl	800eca0 <ExtFlash_SendByte>
  ExtFlash_SendByte(WriteAddr & 0xFF);
 800eea2:	683b      	ldr	r3, [r7, #0]
 800eea4:	b2db      	uxtb	r3, r3
 800eea6:	4618      	mov	r0, r3
 800eea8:	f7ff fefa 	bl	800eca0 <ExtFlash_SendByte>
  while(Lenght--) {
 800eeac:	e007      	b.n	800eebe <ExtFlash_PageProg+0x6a>
    ExtFlash_SendByte((*pBuffer));
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	781b      	ldrb	r3, [r3, #0]
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	f7ff fef4 	bl	800eca0 <ExtFlash_SendByte>
    pBuffer++;
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	3301      	adds	r3, #1
 800eebc:	607b      	str	r3, [r7, #4]
  while(Lenght--) {
 800eebe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800eec2:	b29a      	uxth	r2, r3
 800eec4:	3a01      	subs	r2, #1
 800eec6:	b292      	uxth	r2, r2
 800eec8:	81fa      	strh	r2, [r7, #14]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d1ef      	bne.n	800eeae <ExtFlash_PageProg+0x5a>
  }
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800eece:	2201      	movs	r2, #1
 800eed0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800eed4:	4804      	ldr	r0, [pc, #16]	; (800eee8 <ExtFlash_PageProg+0x94>)
 800eed6:	f00a fe5b 	bl	8019b90 <HAL_GPIO_WritePin>
  ExtFlash_WaitForWriteEnd();
 800eeda:	f7ff ff29 	bl	800ed30 <ExtFlash_WaitForWriteEnd>
}
 800eede:	bf00      	nop
 800eee0:	3710      	adds	r7, #16
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd80      	pop	{r7, pc}
 800eee6:	bf00      	nop
 800eee8:	40020400 	.word	0x40020400

0800eeec <ExtFLASH_SectorErase>:

/*******************************************************************************
 SPI_FLASH_SectorErase  : Sector Erases the specified FLASH Page.(4k/sector)
*******************************************************************************/
void ExtFLASH_SectorErase(unsigned SectorAddr)
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b082      	sub	sp, #8
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
    ExtFlash_WriteEnable();
 800eef4:	f7ff ff98 	bl	800ee28 <ExtFlash_WriteEnable>
    HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800eef8:	2200      	movs	r2, #0
 800eefa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800eefe:	4811      	ldr	r0, [pc, #68]	; (800ef44 <ExtFLASH_SectorErase+0x58>)
 800ef00:	f00a fe46 	bl	8019b90 <HAL_GPIO_WritePin>
    ExtFlash_SendByte(SE);
 800ef04:	2020      	movs	r0, #32
 800ef06:	f7ff fecb 	bl	800eca0 <ExtFlash_SendByte>
    ExtFlash_SendByte((SectorAddr & 0xFF0000) >> 16);   //Send high address byte
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	0c1b      	lsrs	r3, r3, #16
 800ef0e:	b2db      	uxtb	r3, r3
 800ef10:	4618      	mov	r0, r3
 800ef12:	f7ff fec5 	bl	800eca0 <ExtFlash_SendByte>
    ExtFlash_SendByte((SectorAddr & 0xFF00) >> 8);      //Send medium address byte
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	0a1b      	lsrs	r3, r3, #8
 800ef1a:	b2db      	uxtb	r3, r3
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	f7ff febf 	bl	800eca0 <ExtFlash_SendByte>
    ExtFlash_SendByte(SectorAddr & 0xFF);               //Send low address byte */
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	b2db      	uxtb	r3, r3
 800ef26:	4618      	mov	r0, r3
 800ef28:	f7ff feba 	bl	800eca0 <ExtFlash_SendByte>
    HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800ef2c:	2201      	movs	r2, #1
 800ef2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ef32:	4804      	ldr	r0, [pc, #16]	; (800ef44 <ExtFLASH_SectorErase+0x58>)
 800ef34:	f00a fe2c 	bl	8019b90 <HAL_GPIO_WritePin>
    ExtFlash_WaitForWriteEnd();                         // Wait the end of Flash writing
 800ef38:	f7ff fefa 	bl	800ed30 <ExtFlash_WaitForWriteEnd>
}
 800ef3c:	bf00      	nop
 800ef3e:	3708      	adds	r7, #8
 800ef40:	46bd      	mov	sp, r7
 800ef42:	bd80      	pop	{r7, pc}
 800ef44:	40020400 	.word	0x40020400

0800ef48 <ExtFlash_PageWR>:

void ExtFlash_PageWR(char* pBuffer, unsigned WriteAddr)
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b0c8      	sub	sp, #288	; 0x120
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	1d3b      	adds	r3, r7, #4
 800ef50:	6018      	str	r0, [r3, #0]
 800ef52:	463b      	mov	r3, r7
 800ef54:	6019      	str	r1, [r3, #0]
  unsigned addr,i,j;
  char* ptr;
  char  page=0,flag=0;
 800ef56:	2300      	movs	r3, #0
 800ef58:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
  char  buffer[256];

  flag=0;
 800ef62:	2300      	movs	r3, #0
 800ef64:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
    addr=WriteAddr & 0xFFF000;
 800ef68:	463b      	mov	r3, r7
 800ef6a:	681a      	ldr	r2, [r3, #0]
 800ef6c:	4b3b      	ldr	r3, [pc, #236]	; (800f05c <ExtFlash_PageWR+0x114>)
 800ef6e:	4013      	ands	r3, r2
 800ef70:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    page=16;
 800ef74:	2310      	movs	r3, #16
 800ef76:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  while(page>0)
 800ef7a:	e02e      	b.n	800efda <ExtFlash_PageWR+0x92>
  {
    ExtFlash_PageRD((char*)&buffer,addr, 256);
 800ef7c:	f107 030c 	add.w	r3, r7, #12
 800ef80:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ef84:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800ef88:	4618      	mov	r0, r3
 800ef8a:	f7ff ff05 	bl	800ed98 <ExtFlash_PageRD>
    for(j=0;j<255;j++){
 800ef8e:	2300      	movs	r3, #0
 800ef90:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800ef94:	e012      	b.n	800efbc <ExtFlash_PageWR+0x74>
      if(buffer[j++]!=0xff){
 800ef96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef9a:	1c5a      	adds	r2, r3, #1
 800ef9c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 800efa0:	f107 020c 	add.w	r2, r7, #12
 800efa4:	5cd3      	ldrb	r3, [r2, r3]
 800efa6:	2bff      	cmp	r3, #255	; 0xff
 800efa8:	d003      	beq.n	800efb2 <ExtFlash_PageWR+0x6a>
        flag=1;
 800efaa:	2301      	movs	r3, #1
 800efac:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
        break;
 800efb0:	e008      	b.n	800efc4 <ExtFlash_PageWR+0x7c>
    for(j=0;j<255;j++){
 800efb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800efb6:	3301      	adds	r3, #1
 800efb8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800efbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800efc0:	2bfe      	cmp	r3, #254	; 0xfe
 800efc2:	d9e8      	bls.n	800ef96 <ExtFlash_PageWR+0x4e>
      }
    }
    addr+=256;
 800efc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800efc8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800efcc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    page--;
 800efd0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800efd4:	3b01      	subs	r3, #1
 800efd6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  while(page>0)
 800efda:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d1cc      	bne.n	800ef7c <ExtFlash_PageWR+0x34>
  }
    page=16;
 800efe2:	2310      	movs	r3, #16
 800efe4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
    addr=WriteAddr & 0xFFF000;
 800efe8:	463b      	mov	r3, r7
 800efea:	681a      	ldr	r2, [r3, #0]
 800efec:	4b1b      	ldr	r3, [pc, #108]	; (800f05c <ExtFlash_PageWR+0x114>)
 800efee:	4013      	ands	r3, r2
 800eff0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    if(flag==1)ExtFLASH_SectorErase(addr);
 800eff4:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800eff8:	2b01      	cmp	r3, #1
 800effa:	d103      	bne.n	800f004 <ExtFlash_PageWR+0xbc>
 800effc:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800f000:	f7ff ff74 	bl	800eeec <ExtFLASH_SectorErase>
  ptr=pBuffer;
 800f004:	1d3b      	adds	r3, r7, #4
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  for(i=0;i<page;i++){
 800f00c:	2300      	movs	r3, #0
 800f00e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800f012:	e016      	b.n	800f042 <ExtFlash_PageWR+0xfa>
    ExtFlash_PageProg(ptr, addr);
 800f014:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800f018:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800f01c:	f7ff ff1a 	bl	800ee54 <ExtFlash_PageProg>
    addr+=256;
 800f020:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f024:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f028:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    ptr+=256;
 800f02c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800f030:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f034:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  for(i=0;i<page;i++){
 800f038:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f03c:	3301      	adds	r3, #1
 800f03e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800f042:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800f046:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f04a:	429a      	cmp	r2, r3
 800f04c:	d3e2      	bcc.n	800f014 <ExtFlash_PageWR+0xcc>
  }
}
 800f04e:	bf00      	nop
 800f050:	bf00      	nop
 800f052:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800f056:	46bd      	mov	sp, r7
 800f058:	bd80      	pop	{r7, pc}
 800f05a:	bf00      	nop
 800f05c:	00fff000 	.word	0x00fff000

0800f060 <ReadDiskData>:
 800f060:	b580      	push	{r7, lr}
 800f062:	b086      	sub	sp, #24
 800f064:	af00      	add	r7, sp, #0
 800f066:	60f8      	str	r0, [r7, #12]
 800f068:	60b9      	str	r1, [r7, #8]
 800f06a:	4613      	mov	r3, r2
 800f06c:	80fb      	strh	r3, [r7, #6]
 800f06e:	2300      	movs	r3, #0
 800f070:	75fb      	strb	r3, [r7, #23]
 800f072:	4b0d      	ldr	r3, [pc, #52]	; (800f0a8 <ReadDiskData+0x48>)
 800f074:	2200      	movs	r2, #0
 800f076:	701a      	strb	r2, [r3, #0]
 800f078:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f07c:	461a      	mov	r2, r3
 800f07e:	68b9      	ldr	r1, [r7, #8]
 800f080:	68f8      	ldr	r0, [r7, #12]
 800f082:	f7ff fe89 	bl	800ed98 <ExtFlash_PageRD>
 800f086:	7dfb      	ldrb	r3, [r7, #23]
 800f088:	1c5a      	adds	r2, r3, #1
 800f08a:	75fa      	strb	r2, [r7, #23]
 800f08c:	2b06      	cmp	r3, #6
 800f08e:	d901      	bls.n	800f094 <ReadDiskData+0x34>
 800f090:	2301      	movs	r3, #1
 800f092:	e004      	b.n	800f09e <ReadDiskData+0x3e>
 800f094:	4b04      	ldr	r3, [pc, #16]	; (800f0a8 <ReadDiskData+0x48>)
 800f096:	781b      	ldrb	r3, [r3, #0]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d1ea      	bne.n	800f072 <ReadDiskData+0x12>
 800f09c:	2300      	movs	r3, #0
 800f09e:	4618      	mov	r0, r3
 800f0a0:	3718      	adds	r7, #24
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	bd80      	pop	{r7, pc}
 800f0a6:	bf00      	nop
 800f0a8:	2000078f 	.word	0x2000078f

0800f0ac <OpenFileRd>:
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b086      	sub	sp, #24
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	60f8      	str	r0, [r7, #12]
 800f0b4:	60b9      	str	r1, [r7, #8]
 800f0b6:	607a      	str	r2, [r7, #4]
 800f0b8:	603b      	str	r3, [r7, #0]
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	2200      	movs	r2, #0
 800f0be:	801a      	strh	r2, [r3, #0]
 800f0c0:	4b35      	ldr	r3, [pc, #212]	; (800f198 <OpenFileRd+0xec>)
 800f0c2:	689a      	ldr	r2, [r3, #8]
 800f0c4:	683b      	ldr	r3, [r7, #0]
 800f0c6:	601a      	str	r2, [r3, #0]
 800f0c8:	e05b      	b.n	800f182 <OpenFileRd+0xd6>
 800f0ca:	683b      	ldr	r3, [r7, #0]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	4a32      	ldr	r2, [pc, #200]	; (800f198 <OpenFileRd+0xec>)
 800f0d0:	6952      	ldr	r2, [r2, #20]
 800f0d2:	b212      	sxth	r2, r2
 800f0d4:	4619      	mov	r1, r3
 800f0d6:	68f8      	ldr	r0, [r7, #12]
 800f0d8:	f7ff ffc2 	bl	800f060 <ReadDiskData>
 800f0dc:	4603      	mov	r3, r0
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d001      	beq.n	800f0e6 <OpenFileRd+0x3a>
 800f0e2:	2301      	movs	r3, #1
 800f0e4:	e054      	b.n	800f190 <OpenFileRd+0xe4>
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	82bb      	strh	r3, [r7, #20]
 800f0ea:	e044      	b.n	800f176 <OpenFileRd+0xca>
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	82fb      	strh	r3, [r7, #22]
 800f0f0:	e031      	b.n	800f156 <OpenFileRd+0xaa>
 800f0f2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800f0f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f0fa:	4413      	add	r3, r2
 800f0fc:	461a      	mov	r2, r3
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	4413      	add	r3, r2
 800f102:	781b      	ldrb	r3, [r3, #0]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d01e      	beq.n	800f146 <OpenFileRd+0x9a>
 800f108:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800f10c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f110:	4413      	add	r3, r2
 800f112:	461a      	mov	r2, r3
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	4413      	add	r3, r2
 800f118:	781a      	ldrb	r2, [r3, #0]
 800f11a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f11e:	68b9      	ldr	r1, [r7, #8]
 800f120:	440b      	add	r3, r1
 800f122:	781b      	ldrb	r3, [r3, #0]
 800f124:	429a      	cmp	r2, r3
 800f126:	d11b      	bne.n	800f160 <OpenFileRd+0xb4>
 800f128:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f12c:	2b0a      	cmp	r3, #10
 800f12e:	d10c      	bne.n	800f14a <OpenFileRd+0x9e>
 800f130:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f134:	331a      	adds	r3, #26
 800f136:	68fa      	ldr	r2, [r7, #12]
 800f138:	4413      	add	r3, r2
 800f13a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	801a      	strh	r2, [r3, #0]
 800f142:	2300      	movs	r3, #0
 800f144:	e024      	b.n	800f190 <OpenFileRd+0xe4>
 800f146:	2304      	movs	r3, #4
 800f148:	e022      	b.n	800f190 <OpenFileRd+0xe4>
 800f14a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f14e:	b29b      	uxth	r3, r3
 800f150:	3301      	adds	r3, #1
 800f152:	b29b      	uxth	r3, r3
 800f154:	82fb      	strh	r3, [r7, #22]
 800f156:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f15a:	2b0a      	cmp	r3, #10
 800f15c:	ddc9      	ble.n	800f0f2 <OpenFileRd+0x46>
 800f15e:	e000      	b.n	800f162 <OpenFileRd+0xb6>
 800f160:	bf00      	nop
 800f162:	683b      	ldr	r3, [r7, #0]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	f103 0220 	add.w	r2, r3, #32
 800f16a:	683b      	ldr	r3, [r7, #0]
 800f16c:	601a      	str	r2, [r3, #0]
 800f16e:	8abb      	ldrh	r3, [r7, #20]
 800f170:	3320      	adds	r3, #32
 800f172:	b29b      	uxth	r3, r3
 800f174:	82bb      	strh	r3, [r7, #20]
 800f176:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800f17a:	4b07      	ldr	r3, [pc, #28]	; (800f198 <OpenFileRd+0xec>)
 800f17c:	695b      	ldr	r3, [r3, #20]
 800f17e:	429a      	cmp	r2, r3
 800f180:	d3b4      	bcc.n	800f0ec <OpenFileRd+0x40>
 800f182:	683b      	ldr	r3, [r7, #0]
 800f184:	681a      	ldr	r2, [r3, #0]
 800f186:	4b04      	ldr	r3, [pc, #16]	; (800f198 <OpenFileRd+0xec>)
 800f188:	68db      	ldr	r3, [r3, #12]
 800f18a:	429a      	cmp	r2, r3
 800f18c:	d39d      	bcc.n	800f0ca <OpenFileRd+0x1e>
 800f18e:	2303      	movs	r3, #3
 800f190:	4618      	mov	r0, r3
 800f192:	3718      	adds	r7, #24
 800f194:	46bd      	mov	sp, r7
 800f196:	bd80      	pop	{r7, pc}
 800f198:	20000194 	.word	0x20000194

0800f19c <ProgDiskPage>:
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b084      	sub	sp, #16
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
 800f1a4:	6039      	str	r1, [r7, #0]
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	73fb      	strb	r3, [r7, #15]
 800f1aa:	4b0c      	ldr	r3, [pc, #48]	; (800f1dc <ProgDiskPage+0x40>)
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	701a      	strb	r2, [r3, #0]
 800f1b0:	683b      	ldr	r3, [r7, #0]
 800f1b2:	4619      	mov	r1, r3
 800f1b4:	6878      	ldr	r0, [r7, #4]
 800f1b6:	f7ff fec7 	bl	800ef48 <ExtFlash_PageWR>
 800f1ba:	7bfb      	ldrb	r3, [r7, #15]
 800f1bc:	1c5a      	adds	r2, r3, #1
 800f1be:	73fa      	strb	r2, [r7, #15]
 800f1c0:	2b06      	cmp	r3, #6
 800f1c2:	d901      	bls.n	800f1c8 <ProgDiskPage+0x2c>
 800f1c4:	2301      	movs	r3, #1
 800f1c6:	e004      	b.n	800f1d2 <ProgDiskPage+0x36>
 800f1c8:	4b04      	ldr	r3, [pc, #16]	; (800f1dc <ProgDiskPage+0x40>)
 800f1ca:	781b      	ldrb	r3, [r3, #0]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d1ec      	bne.n	800f1aa <ProgDiskPage+0xe>
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	3710      	adds	r7, #16
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	bd80      	pop	{r7, pc}
 800f1da:	bf00      	nop
 800f1dc:	2000078f 	.word	0x2000078f

0800f1e0 <SeekBlank>:
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b084      	sub	sp, #16
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
 800f1e8:	6039      	str	r1, [r7, #0]
 800f1ea:	2301      	movs	r3, #1
 800f1ec:	73fb      	strb	r3, [r7, #15]
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	3302      	adds	r3, #2
 800f1f2:	683a      	ldr	r2, [r7, #0]
 800f1f4:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f1f8:	801a      	strh	r2, [r3, #0]
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	801a      	strh	r2, [r3, #0]
 800f200:	e05b      	b.n	800f2ba <SeekBlank+0xda>
 800f202:	4b34      	ldr	r3, [pc, #208]	; (800f2d4 <SeekBlank+0xf4>)
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	683a      	ldr	r2, [r7, #0]
 800f208:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f20c:	441a      	add	r2, r3
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f214:	0fd9      	lsrs	r1, r3, #31
 800f216:	440b      	add	r3, r1
 800f218:	105b      	asrs	r3, r3, #1
 800f21a:	b21b      	sxth	r3, r3
 800f21c:	18d1      	adds	r1, r2, r3
 800f21e:	f107 0308 	add.w	r3, r7, #8
 800f222:	2202      	movs	r2, #2
 800f224:	4618      	mov	r0, r3
 800f226:	f7ff ff1b 	bl	800f060 <ReadDiskData>
 800f22a:	4603      	mov	r3, r0
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d001      	beq.n	800f234 <SeekBlank+0x54>
 800f230:	2301      	movs	r3, #1
 800f232:	e04a      	b.n	800f2ca <SeekBlank+0xea>
 800f234:	683b      	ldr	r3, [r7, #0]
 800f236:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f23a:	b29b      	uxth	r3, r3
 800f23c:	f003 0301 	and.w	r3, r3, #1
 800f240:	2b00      	cmp	r3, #0
 800f242:	d006      	beq.n	800f252 <SeekBlank+0x72>
 800f244:	f107 0308 	add.w	r3, r7, #8
 800f248:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f24c:	111b      	asrs	r3, r3, #4
 800f24e:	b21b      	sxth	r3, r3
 800f250:	e006      	b.n	800f260 <SeekBlank+0x80>
 800f252:	f107 0308 	add.w	r3, r7, #8
 800f256:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f25a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f25e:	b21b      	sxth	r3, r3
 800f260:	81bb      	strh	r3, [r7, #12]
 800f262:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d10f      	bne.n	800f28a <SeekBlank+0xaa>
 800f26a:	7bfb      	ldrb	r3, [r7, #15]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d10c      	bne.n	800f28a <SeekBlank+0xaa>
 800f270:	683b      	ldr	r3, [r7, #0]
 800f272:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f276:	683b      	ldr	r3, [r7, #0]
 800f278:	3302      	adds	r3, #2
 800f27a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f27e:	429a      	cmp	r2, r3
 800f280:	d003      	beq.n	800f28a <SeekBlank+0xaa>
 800f282:	2301      	movs	r3, #1
 800f284:	73fb      	strb	r3, [r7, #15]
 800f286:	2300      	movs	r3, #0
 800f288:	e01f      	b.n	800f2ca <SeekBlank+0xea>
 800f28a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d10a      	bne.n	800f2a8 <SeekBlank+0xc8>
 800f292:	7bfb      	ldrb	r3, [r7, #15]
 800f294:	2b01      	cmp	r3, #1
 800f296:	d107      	bne.n	800f2a8 <SeekBlank+0xc8>
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	3304      	adds	r3, #4
 800f29c:	683a      	ldr	r2, [r7, #0]
 800f29e:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f2a2:	801a      	strh	r2, [r3, #0]
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	73fb      	strb	r3, [r7, #15]
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2ae:	b29b      	uxth	r3, r3
 800f2b0:	3301      	adds	r3, #1
 800f2b2:	b29b      	uxth	r3, r3
 800f2b4:	b21a      	sxth	r2, r3
 800f2b6:	683b      	ldr	r3, [r7, #0]
 800f2b8:	801a      	strh	r2, [r3, #0]
 800f2ba:	683b      	ldr	r3, [r7, #0]
 800f2bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2c0:	f640 72fe 	movw	r2, #4094	; 0xffe
 800f2c4:	4293      	cmp	r3, r2
 800f2c6:	dd9c      	ble.n	800f202 <SeekBlank+0x22>
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	3710      	adds	r7, #16
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	bd80      	pop	{r7, pc}
 800f2d2:	bf00      	nop
 800f2d4:	20000194 	.word	0x20000194

0800f2d8 <SetCluster>:
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b086      	sub	sp, #24
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
 800f2e0:	6039      	str	r1, [r7, #0]
 800f2e2:	683b      	ldr	r3, [r7, #0]
 800f2e4:	885b      	ldrh	r3, [r3, #2]
 800f2e6:	82fb      	strh	r3, [r7, #22]
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	881b      	ldrh	r3, [r3, #0]
 800f2ec:	82bb      	strh	r3, [r7, #20]
 800f2ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f2f2:	0fda      	lsrs	r2, r3, #31
 800f2f4:	4413      	add	r3, r2
 800f2f6:	105b      	asrs	r3, r3, #1
 800f2f8:	b21b      	sxth	r3, r3
 800f2fa:	b29a      	uxth	r2, r3
 800f2fc:	8afb      	ldrh	r3, [r7, #22]
 800f2fe:	4413      	add	r3, r2
 800f300:	b29b      	uxth	r3, r3
 800f302:	827b      	strh	r3, [r7, #18]
 800f304:	4b36      	ldr	r3, [pc, #216]	; (800f3e0 <SetCluster+0x108>)
 800f306:	681a      	ldr	r2, [r3, #0]
 800f308:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f30c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800f310:	4413      	add	r3, r2
 800f312:	60fb      	str	r3, [r7, #12]
 800f314:	8a7b      	ldrh	r3, [r7, #18]
 800f316:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f31a:	827b      	strh	r3, [r7, #18]
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	4a30      	ldr	r2, [pc, #192]	; (800f3e0 <SetCluster+0x108>)
 800f320:	6952      	ldr	r2, [r2, #20]
 800f322:	b212      	sxth	r2, r2
 800f324:	4619      	mov	r1, r3
 800f326:	6878      	ldr	r0, [r7, #4]
 800f328:	f7ff fe9a 	bl	800f060 <ReadDiskData>
 800f32c:	4603      	mov	r3, r0
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d001      	beq.n	800f336 <SetCluster+0x5e>
 800f332:	2301      	movs	r3, #1
 800f334:	e04f      	b.n	800f3d6 <SetCluster+0xfe>
 800f336:	8afb      	ldrh	r3, [r7, #22]
 800f338:	f003 0301 	and.w	r3, r3, #1
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d01e      	beq.n	800f37e <SetCluster+0xa6>
 800f340:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f344:	687a      	ldr	r2, [r7, #4]
 800f346:	4413      	add	r3, r2
 800f348:	781b      	ldrb	r3, [r3, #0]
 800f34a:	f003 030f 	and.w	r3, r3, #15
 800f34e:	b2d9      	uxtb	r1, r3
 800f350:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f354:	011b      	lsls	r3, r3, #4
 800f356:	b2da      	uxtb	r2, r3
 800f358:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f35c:	6878      	ldr	r0, [r7, #4]
 800f35e:	4403      	add	r3, r0
 800f360:	440a      	add	r2, r1
 800f362:	b2d2      	uxtb	r2, r2
 800f364:	701a      	strb	r2, [r3, #0]
 800f366:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f36a:	111b      	asrs	r3, r3, #4
 800f36c:	b219      	sxth	r1, r3
 800f36e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f372:	3301      	adds	r3, #1
 800f374:	687a      	ldr	r2, [r7, #4]
 800f376:	4413      	add	r3, r2
 800f378:	b2ca      	uxtb	r2, r1
 800f37a:	701a      	strb	r2, [r3, #0]
 800f37c:	e021      	b.n	800f3c2 <SetCluster+0xea>
 800f37e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f382:	687a      	ldr	r2, [r7, #4]
 800f384:	4413      	add	r3, r2
 800f386:	8aba      	ldrh	r2, [r7, #20]
 800f388:	b2d2      	uxtb	r2, r2
 800f38a:	701a      	strb	r2, [r3, #0]
 800f38c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f390:	3301      	adds	r3, #1
 800f392:	687a      	ldr	r2, [r7, #4]
 800f394:	4413      	add	r3, r2
 800f396:	781b      	ldrb	r3, [r3, #0]
 800f398:	b25b      	sxtb	r3, r3
 800f39a:	f023 030f 	bic.w	r3, r3, #15
 800f39e:	b25a      	sxtb	r2, r3
 800f3a0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f3a4:	121b      	asrs	r3, r3, #8
 800f3a6:	b21b      	sxth	r3, r3
 800f3a8:	b25b      	sxtb	r3, r3
 800f3aa:	f003 030f 	and.w	r3, r3, #15
 800f3ae:	b25b      	sxtb	r3, r3
 800f3b0:	4313      	orrs	r3, r2
 800f3b2:	b259      	sxtb	r1, r3
 800f3b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f3b8:	3301      	adds	r3, #1
 800f3ba:	687a      	ldr	r2, [r7, #4]
 800f3bc:	4413      	add	r3, r2
 800f3be:	b2ca      	uxtb	r2, r1
 800f3c0:	701a      	strb	r2, [r3, #0]
 800f3c2:	68f9      	ldr	r1, [r7, #12]
 800f3c4:	6878      	ldr	r0, [r7, #4]
 800f3c6:	f7ff fee9 	bl	800f19c <ProgDiskPage>
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d001      	beq.n	800f3d4 <SetCluster+0xfc>
 800f3d0:	2301      	movs	r3, #1
 800f3d2:	e000      	b.n	800f3d6 <SetCluster+0xfe>
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	3718      	adds	r7, #24
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	bd80      	pop	{r7, pc}
 800f3de:	bf00      	nop
 800f3e0:	20000194 	.word	0x20000194

0800f3e4 <NextCluster>:
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b084      	sub	sp, #16
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	6078      	str	r0, [r7, #4]
 800f3ec:	4b27      	ldr	r3, [pc, #156]	; (800f48c <NextCluster+0xa8>)
 800f3ee:	681a      	ldr	r2, [r3, #0]
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f3fe:	0fd9      	lsrs	r1, r3, #31
 800f400:	440b      	add	r3, r1
 800f402:	105b      	asrs	r3, r3, #1
 800f404:	b21b      	sxth	r3, r3
 800f406:	4403      	add	r3, r0
 800f408:	4413      	add	r3, r2
 800f40a:	60fb      	str	r3, [r7, #12]
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	3302      	adds	r3, #2
 800f410:	687a      	ldr	r2, [r7, #4]
 800f412:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f416:	801a      	strh	r2, [r3, #0]
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	2200      	movs	r2, #0
 800f41c:	801a      	strh	r2, [r3, #0]
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	3302      	adds	r3, #2
 800f422:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f426:	461a      	mov	r2, r3
 800f428:	4b18      	ldr	r3, [pc, #96]	; (800f48c <NextCluster+0xa8>)
 800f42a:	699b      	ldr	r3, [r3, #24]
 800f42c:	429a      	cmp	r2, r3
 800f42e:	d205      	bcs.n	800f43c <NextCluster+0x58>
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	3302      	adds	r3, #2
 800f434:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f438:	2b01      	cmp	r3, #1
 800f43a:	dc01      	bgt.n	800f440 <NextCluster+0x5c>
 800f43c:	2301      	movs	r3, #1
 800f43e:	e021      	b.n	800f484 <NextCluster+0xa0>
 800f440:	68f9      	ldr	r1, [r7, #12]
 800f442:	f107 030a 	add.w	r3, r7, #10
 800f446:	2202      	movs	r2, #2
 800f448:	4618      	mov	r0, r3
 800f44a:	f7ff fe09 	bl	800f060 <ReadDiskData>
 800f44e:	4603      	mov	r3, r0
 800f450:	2b00      	cmp	r3, #0
 800f452:	d001      	beq.n	800f458 <NextCluster+0x74>
 800f454:	2301      	movs	r3, #1
 800f456:	e015      	b.n	800f484 <NextCluster+0xa0>
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	3302      	adds	r3, #2
 800f45c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f460:	b29b      	uxth	r3, r3
 800f462:	f003 0301 	and.w	r3, r3, #1
 800f466:	2b00      	cmp	r3, #0
 800f468:	d004      	beq.n	800f474 <NextCluster+0x90>
 800f46a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f46e:	111b      	asrs	r3, r3, #4
 800f470:	b21b      	sxth	r3, r3
 800f472:	e004      	b.n	800f47e <NextCluster+0x9a>
 800f474:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f47c:	b21b      	sxth	r3, r3
 800f47e:	687a      	ldr	r2, [r7, #4]
 800f480:	8013      	strh	r3, [r2, #0]
 800f482:	2300      	movs	r3, #0
 800f484:	4618      	mov	r0, r3
 800f486:	3710      	adds	r7, #16
 800f488:	46bd      	mov	sp, r7
 800f48a:	bd80      	pop	{r7, pc}
 800f48c:	20000194 	.word	0x20000194

0800f490 <ProgFileSec>:
 800f490:	b580      	push	{r7, lr}
 800f492:	b084      	sub	sp, #16
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]
 800f498:	6039      	str	r1, [r7, #0]
 800f49a:	4b1f      	ldr	r3, [pc, #124]	; (800f518 <ProgFileSec+0x88>)
 800f49c:	68da      	ldr	r2, [r3, #12]
 800f49e:	4b1e      	ldr	r3, [pc, #120]	; (800f518 <ProgFileSec+0x88>)
 800f4a0:	695b      	ldr	r3, [r3, #20]
 800f4a2:	6839      	ldr	r1, [r7, #0]
 800f4a4:	f9b1 1000 	ldrsh.w	r1, [r1]
 800f4a8:	3902      	subs	r1, #2
 800f4aa:	fb01 f303 	mul.w	r3, r1, r3
 800f4ae:	4413      	add	r3, r2
 800f4b0:	60fb      	str	r3, [r7, #12]
 800f4b2:	68f9      	ldr	r1, [r7, #12]
 800f4b4:	6878      	ldr	r0, [r7, #4]
 800f4b6:	f7ff fe71 	bl	800f19c <ProgDiskPage>
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d001      	beq.n	800f4c4 <ProgFileSec+0x34>
 800f4c0:	2301      	movs	r3, #1
 800f4c2:	e025      	b.n	800f510 <ProgFileSec+0x80>
 800f4c4:	6838      	ldr	r0, [r7, #0]
 800f4c6:	f7ff ff8d 	bl	800f3e4 <NextCluster>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d001      	beq.n	800f4d4 <ProgFileSec+0x44>
 800f4d0:	2302      	movs	r3, #2
 800f4d2:	e01d      	b.n	800f510 <ProgFileSec+0x80>
 800f4d4:	683b      	ldr	r3, [r7, #0]
 800f4d6:	885b      	ldrh	r3, [r3, #2]
 800f4d8:	817b      	strh	r3, [r7, #10]
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d114      	bne.n	800f50e <ProgFileSec+0x7e>
 800f4e4:	683b      	ldr	r3, [r7, #0]
 800f4e6:	897a      	ldrh	r2, [r7, #10]
 800f4e8:	801a      	strh	r2, [r3, #0]
 800f4ea:	6839      	ldr	r1, [r7, #0]
 800f4ec:	6878      	ldr	r0, [r7, #4]
 800f4ee:	f7ff fe77 	bl	800f1e0 <SeekBlank>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d001      	beq.n	800f4fc <ProgFileSec+0x6c>
 800f4f8:	2303      	movs	r3, #3
 800f4fa:	e009      	b.n	800f510 <ProgFileSec+0x80>
 800f4fc:	6839      	ldr	r1, [r7, #0]
 800f4fe:	6878      	ldr	r0, [r7, #4]
 800f500:	f7ff feea 	bl	800f2d8 <SetCluster>
 800f504:	4603      	mov	r3, r0
 800f506:	2b00      	cmp	r3, #0
 800f508:	d001      	beq.n	800f50e <ProgFileSec+0x7e>
 800f50a:	2301      	movs	r3, #1
 800f50c:	e000      	b.n	800f510 <ProgFileSec+0x80>
 800f50e:	2300      	movs	r3, #0
 800f510:	4618      	mov	r0, r3
 800f512:	3710      	adds	r7, #16
 800f514:	46bd      	mov	sp, r7
 800f516:	bd80      	pop	{r7, pc}
 800f518:	20000194 	.word	0x20000194

0800f51c <ReadFileSec>:
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b084      	sub	sp, #16
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
 800f524:	6039      	str	r1, [r7, #0]
 800f526:	4b13      	ldr	r3, [pc, #76]	; (800f574 <ReadFileSec+0x58>)
 800f528:	68da      	ldr	r2, [r3, #12]
 800f52a:	4b12      	ldr	r3, [pc, #72]	; (800f574 <ReadFileSec+0x58>)
 800f52c:	695b      	ldr	r3, [r3, #20]
 800f52e:	6839      	ldr	r1, [r7, #0]
 800f530:	f9b1 1000 	ldrsh.w	r1, [r1]
 800f534:	3902      	subs	r1, #2
 800f536:	fb01 f303 	mul.w	r3, r1, r3
 800f53a:	4413      	add	r3, r2
 800f53c:	60fb      	str	r3, [r7, #12]
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	4a0c      	ldr	r2, [pc, #48]	; (800f574 <ReadFileSec+0x58>)
 800f542:	6952      	ldr	r2, [r2, #20]
 800f544:	b212      	sxth	r2, r2
 800f546:	4619      	mov	r1, r3
 800f548:	6878      	ldr	r0, [r7, #4]
 800f54a:	f7ff fd89 	bl	800f060 <ReadDiskData>
 800f54e:	4603      	mov	r3, r0
 800f550:	2b00      	cmp	r3, #0
 800f552:	d001      	beq.n	800f558 <ReadFileSec+0x3c>
 800f554:	2301      	movs	r3, #1
 800f556:	e008      	b.n	800f56a <ReadFileSec+0x4e>
 800f558:	6838      	ldr	r0, [r7, #0]
 800f55a:	f7ff ff43 	bl	800f3e4 <NextCluster>
 800f55e:	4603      	mov	r3, r0
 800f560:	2b00      	cmp	r3, #0
 800f562:	d001      	beq.n	800f568 <ReadFileSec+0x4c>
 800f564:	2302      	movs	r3, #2
 800f566:	e000      	b.n	800f56a <ReadFileSec+0x4e>
 800f568:	2300      	movs	r3, #0
 800f56a:	4618      	mov	r0, r3
 800f56c:	3710      	adds	r7, #16
 800f56e:	46bd      	mov	sp, r7
 800f570:	bd80      	pop	{r7, pc}
 800f572:	bf00      	nop
 800f574:	20000194 	.word	0x20000194

0800f578 <CloseFile>:
 800f578:	b580      	push	{r7, lr}
 800f57a:	b086      	sub	sp, #24
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	60f8      	str	r0, [r7, #12]
 800f580:	60b9      	str	r1, [r7, #8]
 800f582:	607a      	str	r2, [r7, #4]
 800f584:	603b      	str	r3, [r7, #0]
 800f586:	f640 73ff 	movw	r3, #4095	; 0xfff
 800f58a:	617b      	str	r3, [r7, #20]
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	f640 72ff 	movw	r2, #4095	; 0xfff
 800f592:	801a      	strh	r2, [r3, #0]
 800f594:	6879      	ldr	r1, [r7, #4]
 800f596:	68f8      	ldr	r0, [r7, #12]
 800f598:	f7ff fe9e 	bl	800f2d8 <SetCluster>
 800f59c:	683b      	ldr	r3, [r7, #0]
 800f59e:	681a      	ldr	r2, [r3, #0]
 800f5a0:	697b      	ldr	r3, [r7, #20]
 800f5a2:	43db      	mvns	r3, r3
 800f5a4:	4013      	ands	r3, r2
 800f5a6:	4619      	mov	r1, r3
 800f5a8:	4b24      	ldr	r3, [pc, #144]	; (800f63c <CloseFile+0xc4>)
 800f5aa:	695b      	ldr	r3, [r3, #20]
 800f5ac:	b21b      	sxth	r3, r3
 800f5ae:	461a      	mov	r2, r3
 800f5b0:	68f8      	ldr	r0, [r7, #12]
 800f5b2:	f7ff fd55 	bl	800f060 <ReadDiskData>
 800f5b6:	4603      	mov	r3, r0
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d001      	beq.n	800f5c0 <CloseFile+0x48>
 800f5bc:	2301      	movs	r3, #1
 800f5be:	e039      	b.n	800f634 <CloseFile+0xbc>
 800f5c0:	683b      	ldr	r3, [r7, #0]
 800f5c2:	681a      	ldr	r2, [r3, #0]
 800f5c4:	697b      	ldr	r3, [r7, #20]
 800f5c6:	4013      	ands	r3, r2
 800f5c8:	330b      	adds	r3, #11
 800f5ca:	68fa      	ldr	r2, [r7, #12]
 800f5cc:	4413      	add	r3, r2
 800f5ce:	2220      	movs	r2, #32
 800f5d0:	701a      	strb	r2, [r3, #0]
 800f5d2:	683b      	ldr	r3, [r7, #0]
 800f5d4:	681a      	ldr	r2, [r3, #0]
 800f5d6:	697b      	ldr	r3, [r7, #20]
 800f5d8:	4013      	ands	r3, r2
 800f5da:	331c      	adds	r3, #28
 800f5dc:	68fa      	ldr	r2, [r7, #12]
 800f5de:	4413      	add	r3, r2
 800f5e0:	68ba      	ldr	r2, [r7, #8]
 800f5e2:	601a      	str	r2, [r3, #0]
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	681a      	ldr	r2, [r3, #0]
 800f5e8:	697b      	ldr	r3, [r7, #20]
 800f5ea:	43db      	mvns	r3, r3
 800f5ec:	4013      	ands	r3, r2
 800f5ee:	4619      	mov	r1, r3
 800f5f0:	68f8      	ldr	r0, [r7, #12]
 800f5f2:	f7ff fdd3 	bl	800f19c <ProgDiskPage>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d001      	beq.n	800f600 <CloseFile+0x88>
 800f5fc:	2301      	movs	r3, #1
 800f5fe:	e019      	b.n	800f634 <CloseFile+0xbc>
 800f600:	4b0e      	ldr	r3, [pc, #56]	; (800f63c <CloseFile+0xc4>)
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	4a0d      	ldr	r2, [pc, #52]	; (800f63c <CloseFile+0xc4>)
 800f606:	6952      	ldr	r2, [r2, #20]
 800f608:	b212      	sxth	r2, r2
 800f60a:	4619      	mov	r1, r3
 800f60c:	68f8      	ldr	r0, [r7, #12]
 800f60e:	f7ff fd27 	bl	800f060 <ReadDiskData>
 800f612:	4603      	mov	r3, r0
 800f614:	2b00      	cmp	r3, #0
 800f616:	d001      	beq.n	800f61c <CloseFile+0xa4>
 800f618:	2301      	movs	r3, #1
 800f61a:	e00b      	b.n	800f634 <CloseFile+0xbc>
 800f61c:	4b07      	ldr	r3, [pc, #28]	; (800f63c <CloseFile+0xc4>)
 800f61e:	685b      	ldr	r3, [r3, #4]
 800f620:	4619      	mov	r1, r3
 800f622:	68f8      	ldr	r0, [r7, #12]
 800f624:	f7ff fdba 	bl	800f19c <ProgDiskPage>
 800f628:	4603      	mov	r3, r0
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d001      	beq.n	800f632 <CloseFile+0xba>
 800f62e:	2301      	movs	r3, #1
 800f630:	e000      	b.n	800f634 <CloseFile+0xbc>
 800f632:	2300      	movs	r3, #0
 800f634:	4618      	mov	r0, r3
 800f636:	3718      	adds	r7, #24
 800f638:	46bd      	mov	sp, r7
 800f63a:	bd80      	pop	{r7, pc}
 800f63c:	20000194 	.word	0x20000194

0800f640 <OpenFileWr>:
 800f640:	b580      	push	{r7, lr}
 800f642:	b088      	sub	sp, #32
 800f644:	af00      	add	r7, sp, #0
 800f646:	60f8      	str	r0, [r7, #12]
 800f648:	60b9      	str	r1, [r7, #8]
 800f64a:	607a      	str	r2, [r7, #4]
 800f64c:	603b      	str	r3, [r7, #0]
 800f64e:	683b      	ldr	r3, [r7, #0]
 800f650:	687a      	ldr	r2, [r7, #4]
 800f652:	68b9      	ldr	r1, [r7, #8]
 800f654:	68f8      	ldr	r0, [r7, #12]
 800f656:	f7ff fd29 	bl	800f0ac <OpenFileRd>
 800f65a:	4603      	mov	r3, r0
 800f65c:	61fb      	str	r3, [r7, #28]
 800f65e:	69fb      	ldr	r3, [r7, #28]
 800f660:	2b04      	cmp	r3, #4
 800f662:	d002      	beq.n	800f66a <OpenFileWr+0x2a>
 800f664:	69fb      	ldr	r3, [r7, #28]
 800f666:	b2db      	uxtb	r3, r3
 800f668:	e045      	b.n	800f6f6 <OpenFileWr+0xb6>
 800f66a:	6879      	ldr	r1, [r7, #4]
 800f66c:	68f8      	ldr	r0, [r7, #12]
 800f66e:	f7ff fdb7 	bl	800f1e0 <SeekBlank>
 800f672:	4603      	mov	r3, r0
 800f674:	2b00      	cmp	r3, #0
 800f676:	d001      	beq.n	800f67c <OpenFileWr+0x3c>
 800f678:	2303      	movs	r3, #3
 800f67a:	e03c      	b.n	800f6f6 <OpenFileWr+0xb6>
 800f67c:	683b      	ldr	r3, [r7, #0]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f684:	61bb      	str	r3, [r7, #24]
 800f686:	683b      	ldr	r3, [r7, #0]
 800f688:	681a      	ldr	r2, [r3, #0]
 800f68a:	69bb      	ldr	r3, [r7, #24]
 800f68c:	1ad3      	subs	r3, r2, r3
 800f68e:	617b      	str	r3, [r7, #20]
 800f690:	697b      	ldr	r3, [r7, #20]
 800f692:	4a1b      	ldr	r2, [pc, #108]	; (800f700 <OpenFileWr+0xc0>)
 800f694:	6952      	ldr	r2, [r2, #20]
 800f696:	b212      	sxth	r2, r2
 800f698:	4619      	mov	r1, r3
 800f69a:	68f8      	ldr	r0, [r7, #12]
 800f69c:	f7ff fce0 	bl	800f060 <ReadDiskData>
 800f6a0:	4603      	mov	r3, r0
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d001      	beq.n	800f6aa <OpenFileWr+0x6a>
 800f6a6:	2301      	movs	r3, #1
 800f6a8:	e025      	b.n	800f6f6 <OpenFileWr+0xb6>
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	61fb      	str	r3, [r7, #28]
 800f6ae:	e00d      	b.n	800f6cc <OpenFileWr+0x8c>
 800f6b0:	69fb      	ldr	r3, [r7, #28]
 800f6b2:	68ba      	ldr	r2, [r7, #8]
 800f6b4:	441a      	add	r2, r3
 800f6b6:	69b9      	ldr	r1, [r7, #24]
 800f6b8:	69fb      	ldr	r3, [r7, #28]
 800f6ba:	440b      	add	r3, r1
 800f6bc:	4619      	mov	r1, r3
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	440b      	add	r3, r1
 800f6c2:	7812      	ldrb	r2, [r2, #0]
 800f6c4:	701a      	strb	r2, [r3, #0]
 800f6c6:	69fb      	ldr	r3, [r7, #28]
 800f6c8:	3301      	adds	r3, #1
 800f6ca:	61fb      	str	r3, [r7, #28]
 800f6cc:	69fb      	ldr	r3, [r7, #28]
 800f6ce:	2b0a      	cmp	r3, #10
 800f6d0:	ddee      	ble.n	800f6b0 <OpenFileWr+0x70>
 800f6d2:	69bb      	ldr	r3, [r7, #24]
 800f6d4:	331a      	adds	r3, #26
 800f6d6:	68fa      	ldr	r2, [r7, #12]
 800f6d8:	4413      	add	r3, r2
 800f6da:	687a      	ldr	r2, [r7, #4]
 800f6dc:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f6e0:	801a      	strh	r2, [r3, #0]
 800f6e2:	6979      	ldr	r1, [r7, #20]
 800f6e4:	68f8      	ldr	r0, [r7, #12]
 800f6e6:	f7ff fd59 	bl	800f19c <ProgDiskPage>
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d001      	beq.n	800f6f4 <OpenFileWr+0xb4>
 800f6f0:	2301      	movs	r3, #1
 800f6f2:	e000      	b.n	800f6f6 <OpenFileWr+0xb6>
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	3720      	adds	r7, #32
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	bd80      	pop	{r7, pc}
 800f6fe:	bf00      	nop
 800f700:	20000194 	.word	0x20000194

0800f704 <Color_Num>:
 800f704:	b480      	push	{r7}
 800f706:	b083      	sub	sp, #12
 800f708:	af00      	add	r7, sp, #0
 800f70a:	4603      	mov	r3, r0
 800f70c:	80fb      	strh	r3, [r7, #6]
 800f70e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f712:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800f716:	4013      	ands	r3, r2
 800f718:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800f71c:	4293      	cmp	r3, r2
 800f71e:	d101      	bne.n	800f724 <Color_Num+0x20>
 800f720:	2301      	movs	r3, #1
 800f722:	e068      	b.n	800f7f6 <Color_Num+0xf2>
 800f724:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f728:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800f72c:	f5b3 4f04 	cmp.w	r3, #33792	; 0x8400
 800f730:	d101      	bne.n	800f736 <Color_Num+0x32>
 800f732:	2302      	movs	r3, #2
 800f734:	e05f      	b.n	800f7f6 <Color_Num+0xf2>
 800f736:	88fb      	ldrh	r3, [r7, #6]
 800f738:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f73c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f740:	4293      	cmp	r3, r2
 800f742:	d101      	bne.n	800f748 <Color_Num+0x44>
 800f744:	2303      	movs	r3, #3
 800f746:	e056      	b.n	800f7f6 <Color_Num+0xf2>
 800f748:	88fb      	ldrh	r3, [r7, #6]
 800f74a:	f403 6382 	and.w	r3, r3, #1040	; 0x410
 800f74e:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800f752:	d101      	bne.n	800f758 <Color_Num+0x54>
 800f754:	2304      	movs	r3, #4
 800f756:	e04e      	b.n	800f7f6 <Color_Num+0xf2>
 800f758:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f75c:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800f760:	4013      	ands	r3, r2
 800f762:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800f766:	4293      	cmp	r3, r2
 800f768:	d101      	bne.n	800f76e <Color_Num+0x6a>
 800f76a:	2305      	movs	r3, #5
 800f76c:	e043      	b.n	800f7f6 <Color_Num+0xf2>
 800f76e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f772:	f248 0310 	movw	r3, #32784	; 0x8010
 800f776:	4013      	ands	r3, r2
 800f778:	f248 0210 	movw	r2, #32784	; 0x8010
 800f77c:	4293      	cmp	r3, r2
 800f77e:	d101      	bne.n	800f784 <Color_Num+0x80>
 800f780:	2306      	movs	r3, #6
 800f782:	e038      	b.n	800f7f6 <Color_Num+0xf2>
 800f784:	88fb      	ldrh	r3, [r7, #6]
 800f786:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800f78a:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 800f78e:	d101      	bne.n	800f794 <Color_Num+0x90>
 800f790:	2307      	movs	r3, #7
 800f792:	e030      	b.n	800f7f6 <Color_Num+0xf2>
 800f794:	88fb      	ldrh	r3, [r7, #6]
 800f796:	f403 6382 	and.w	r3, r3, #1040	; 0x410
 800f79a:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800f79e:	d101      	bne.n	800f7a4 <Color_Num+0xa0>
 800f7a0:	2308      	movs	r3, #8
 800f7a2:	e028      	b.n	800f7f6 <Color_Num+0xf2>
 800f7a4:	88fb      	ldrh	r3, [r7, #6]
 800f7a6:	461a      	mov	r2, r3
 800f7a8:	f643 13e7 	movw	r3, #14823	; 0x39e7
 800f7ac:	4013      	ands	r3, r2
 800f7ae:	f643 12e7 	movw	r2, #14823	; 0x39e7
 800f7b2:	4293      	cmp	r3, r2
 800f7b4:	d101      	bne.n	800f7ba <Color_Num+0xb6>
 800f7b6:	2309      	movs	r3, #9
 800f7b8:	e01d      	b.n	800f7f6 <Color_Num+0xf2>
 800f7ba:	88fb      	ldrh	r3, [r7, #6]
 800f7bc:	461a      	mov	r2, r3
 800f7be:	f240 531f 	movw	r3, #1311	; 0x51f
 800f7c2:	4013      	ands	r3, r2
 800f7c4:	f240 521f 	movw	r2, #1311	; 0x51f
 800f7c8:	4293      	cmp	r3, r2
 800f7ca:	d101      	bne.n	800f7d0 <Color_Num+0xcc>
 800f7cc:	230a      	movs	r3, #10
 800f7ce:	e012      	b.n	800f7f6 <Color_Num+0xf2>
 800f7d0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f7d4:	f64f 4310 	movw	r3, #64528	; 0xfc10
 800f7d8:	4013      	ands	r3, r2
 800f7da:	f64f 4210 	movw	r2, #64528	; 0xfc10
 800f7de:	4293      	cmp	r3, r2
 800f7e0:	d101      	bne.n	800f7e6 <Color_Num+0xe2>
 800f7e2:	230b      	movs	r3, #11
 800f7e4:	e007      	b.n	800f7f6 <Color_Num+0xf2>
 800f7e6:	88fb      	ldrh	r3, [r7, #6]
 800f7e8:	f003 031f 	and.w	r3, r3, #31
 800f7ec:	2b1f      	cmp	r3, #31
 800f7ee:	d101      	bne.n	800f7f4 <Color_Num+0xf0>
 800f7f0:	230c      	movs	r3, #12
 800f7f2:	e000      	b.n	800f7f6 <Color_Num+0xf2>
 800f7f4:	230d      	movs	r3, #13
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	370c      	adds	r7, #12
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f800:	4770      	bx	lr
	...

0800f804 <PrintClk>:
 800f804:	b580      	push	{r7, lr}
 800f806:	b084      	sub	sp, #16
 800f808:	af00      	add	r7, sp, #0
 800f80a:	4603      	mov	r3, r0
 800f80c:	80fb      	strh	r3, [r7, #6]
 800f80e:	460b      	mov	r3, r1
 800f810:	80bb      	strh	r3, [r7, #4]
 800f812:	4613      	mov	r3, r2
 800f814:	70fb      	strb	r3, [r7, #3]
 800f816:	4b31      	ldr	r3, [pc, #196]	; (800f8dc <PrintClk+0xd8>)
 800f818:	895b      	ldrh	r3, [r3, #10]
 800f81a:	4619      	mov	r1, r3
 800f81c:	f643 10e7 	movw	r0, #14823	; 0x39e7
 800f820:	f7fe fa6a 	bl	800dcf8 <SetColor>
 800f824:	4b2e      	ldr	r3, [pc, #184]	; (800f8e0 <PrintClk+0xdc>)
 800f826:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800f82a:	b29b      	uxth	r3, r3
 800f82c:	331e      	adds	r3, #30
 800f82e:	b29b      	uxth	r3, r3
 800f830:	80fb      	strh	r3, [r7, #6]
 800f832:	4b2b      	ldr	r3, [pc, #172]	; (800f8e0 <PrintClk+0xdc>)
 800f834:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800f838:	b29b      	uxth	r3, r3
 800f83a:	3b03      	subs	r3, #3
 800f83c:	b29b      	uxth	r3, r3
 800f83e:	b218      	sxth	r0, r3
 800f840:	4b28      	ldr	r3, [pc, #160]	; (800f8e4 <PrintClk+0xe0>)
 800f842:	2200      	movs	r2, #0
 800f844:	2103      	movs	r1, #3
 800f846:	f7fe fa6f 	bl	800dd28 <DispStr>
 800f84a:	2301      	movs	r3, #1
 800f84c:	81fb      	strh	r3, [r7, #14]
 800f84e:	e03c      	b.n	800f8ca <PrintClk+0xc6>
 800f850:	78fa      	ldrb	r2, [r7, #3]
 800f852:	4613      	mov	r3, r2
 800f854:	009b      	lsls	r3, r3, #2
 800f856:	4413      	add	r3, r2
 800f858:	005b      	lsls	r3, r3, #1
 800f85a:	441a      	add	r2, r3
 800f85c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f860:	4413      	add	r3, r2
 800f862:	4a21      	ldr	r2, [pc, #132]	; (800f8e8 <PrintClk+0xe4>)
 800f864:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f868:	817b      	strh	r3, [r7, #10]
 800f86a:	2300      	movs	r3, #0
 800f86c:	81bb      	strh	r3, [r7, #12]
 800f86e:	e024      	b.n	800f8ba <PrintClk+0xb6>
 800f870:	88fa      	ldrh	r2, [r7, #6]
 800f872:	89bb      	ldrh	r3, [r7, #12]
 800f874:	4413      	add	r3, r2
 800f876:	b29b      	uxth	r3, r3
 800f878:	b218      	sxth	r0, r3
 800f87a:	88ba      	ldrh	r2, [r7, #4]
 800f87c:	89fb      	ldrh	r3, [r7, #14]
 800f87e:	4413      	add	r3, r2
 800f880:	b29b      	uxth	r3, r3
 800f882:	b21b      	sxth	r3, r3
 800f884:	4619      	mov	r1, r3
 800f886:	f002 fce7 	bl	8012258 <LCD_Set_Posi>
 800f88a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800f88e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f892:	fa42 f303 	asr.w	r3, r2, r3
 800f896:	f003 0301 	and.w	r3, r3, #1
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d004      	beq.n	800f8a8 <PrintClk+0xa4>
 800f89e:	f64f 4010 	movw	r0, #64528	; 0xfc10
 800f8a2:	f002 fd27 	bl	80122f4 <LCD_Set_Pixel>
 800f8a6:	e004      	b.n	800f8b2 <PrintClk+0xae>
 800f8a8:	4b10      	ldr	r3, [pc, #64]	; (800f8ec <PrintClk+0xe8>)
 800f8aa:	881b      	ldrh	r3, [r3, #0]
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	f002 fd21 	bl	80122f4 <LCD_Set_Pixel>
 800f8b2:	89bb      	ldrh	r3, [r7, #12]
 800f8b4:	3301      	adds	r3, #1
 800f8b6:	b29b      	uxth	r3, r3
 800f8b8:	81bb      	strh	r3, [r7, #12]
 800f8ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f8be:	2b0a      	cmp	r3, #10
 800f8c0:	ddd6      	ble.n	800f870 <PrintClk+0x6c>
 800f8c2:	89fb      	ldrh	r3, [r7, #14]
 800f8c4:	3301      	adds	r3, #1
 800f8c6:	b29b      	uxth	r3, r3
 800f8c8:	81fb      	strh	r3, [r7, #14]
 800f8ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f8ce:	2b0a      	cmp	r3, #10
 800f8d0:	ddbe      	ble.n	800f850 <PrintClk+0x4c>
 800f8d2:	bf00      	nop
 800f8d4:	bf00      	nop
 800f8d6:	3710      	adds	r7, #16
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}
 800f8dc:	08001f08 	.word	0x08001f08
 800f8e0:	0800215c 	.word	0x0800215c
 800f8e4:	080001ec 	.word	0x080001ec
 800f8e8:	08001bbc 	.word	0x08001bbc
 800f8ec:	200015ce 	.word	0x200015ce

0800f8f0 <WriteVar>:
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b084      	sub	sp, #16
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	6039      	str	r1, [r7, #0]
 800f8fa:	80fb      	strh	r3, [r7, #6]
 800f8fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f900:	81fb      	strh	r3, [r7, #14]
 800f902:	2204      	movs	r2, #4
 800f904:	2100      	movs	r1, #0
 800f906:	4847      	ldr	r0, [pc, #284]	; (800fa24 <WriteVar+0x134>)
 800f908:	f013 f998 	bl	8022c3c <memset>
 800f90c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f910:	4619      	mov	r1, r3
 800f912:	4844      	ldr	r0, [pc, #272]	; (800fa24 <WriteVar+0x134>)
 800f914:	f002 fa1e 	bl	8011d54 <u16ToDec4Str>
 800f918:	4842      	ldr	r0, [pc, #264]	; (800fa24 <WriteVar+0x134>)
 800f91a:	f7fc fb91 	bl	800c040 <strlen>
 800f91e:	4603      	mov	r3, r0
 800f920:	b21a      	sxth	r2, r3
 800f922:	4b41      	ldr	r3, [pc, #260]	; (800fa28 <WriteVar+0x138>)
 800f924:	801a      	strh	r2, [r3, #0]
 800f926:	4b41      	ldr	r3, [pc, #260]	; (800fa2c <WriteVar+0x13c>)
 800f928:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f92c:	461a      	mov	r2, r3
 800f92e:	4b40      	ldr	r3, [pc, #256]	; (800fa30 <WriteVar+0x140>)
 800f930:	4413      	add	r3, r2
 800f932:	4a3d      	ldr	r2, [pc, #244]	; (800fa28 <WriteVar+0x138>)
 800f934:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f938:	493a      	ldr	r1, [pc, #232]	; (800fa24 <WriteVar+0x134>)
 800f93a:	4618      	mov	r0, r3
 800f93c:	f013 f970 	bl	8022c20 <memcpy>
 800f940:	4b3a      	ldr	r3, [pc, #232]	; (800fa2c <WriteVar+0x13c>)
 800f942:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f946:	b29a      	uxth	r2, r3
 800f948:	4b37      	ldr	r3, [pc, #220]	; (800fa28 <WriteVar+0x138>)
 800f94a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f94e:	b29b      	uxth	r3, r3
 800f950:	4413      	add	r3, r2
 800f952:	b29b      	uxth	r3, r3
 800f954:	b21a      	sxth	r2, r3
 800f956:	4b35      	ldr	r3, [pc, #212]	; (800fa2c <WriteVar+0x13c>)
 800f958:	801a      	strh	r2, [r3, #0]
 800f95a:	4b33      	ldr	r3, [pc, #204]	; (800fa28 <WriteVar+0x138>)
 800f95c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f960:	461a      	mov	r2, r3
 800f962:	4b34      	ldr	r3, [pc, #208]	; (800fa34 <WriteVar+0x144>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	4413      	add	r3, r2
 800f968:	4a32      	ldr	r2, [pc, #200]	; (800fa34 <WriteVar+0x144>)
 800f96a:	6013      	str	r3, [r2, #0]
 800f96c:	4b2f      	ldr	r3, [pc, #188]	; (800fa2c <WriteVar+0x13c>)
 800f96e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f972:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f976:	429a      	cmp	r2, r3
 800f978:	dc4f      	bgt.n	800fa1a <WriteVar+0x12a>
 800f97a:	6839      	ldr	r1, [r7, #0]
 800f97c:	482c      	ldr	r0, [pc, #176]	; (800fa30 <WriteVar+0x140>)
 800f97e:	f7ff fd87 	bl	800f490 <ProgFileSec>
 800f982:	4b2d      	ldr	r3, [pc, #180]	; (800fa38 <WriteVar+0x148>)
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	1c5a      	adds	r2, r3, #1
 800f988:	492b      	ldr	r1, [pc, #172]	; (800fa38 <WriteVar+0x148>)
 800f98a:	600a      	str	r2, [r1, #0]
 800f98c:	105b      	asrs	r3, r3, #1
 800f98e:	b2db      	uxtb	r3, r3
 800f990:	f003 0303 	and.w	r3, r3, #3
 800f994:	b2db      	uxtb	r3, r3
 800f996:	461a      	mov	r2, r3
 800f998:	2102      	movs	r1, #2
 800f99a:	f44f 7084 	mov.w	r0, #264	; 0x108
 800f99e:	f7ff ff31 	bl	800f804 <PrintClk>
 800f9a2:	4b22      	ldr	r3, [pc, #136]	; (800fa2c <WriteVar+0x13c>)
 800f9a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f9a8:	b29a      	uxth	r2, r3
 800f9aa:	89fb      	ldrh	r3, [r7, #14]
 800f9ac:	1ad3      	subs	r3, r2, r3
 800f9ae:	b29b      	uxth	r3, r3
 800f9b0:	81bb      	strh	r3, [r7, #12]
 800f9b2:	4b1d      	ldr	r3, [pc, #116]	; (800fa28 <WriteVar+0x138>)
 800f9b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f9b8:	b29a      	uxth	r2, r3
 800f9ba:	89bb      	ldrh	r3, [r7, #12]
 800f9bc:	1ad3      	subs	r3, r2, r3
 800f9be:	b29b      	uxth	r3, r3
 800f9c0:	817b      	strh	r3, [r7, #10]
 800f9c2:	4b1a      	ldr	r3, [pc, #104]	; (800fa2c <WriteVar+0x13c>)
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	801a      	strh	r2, [r3, #0]
 800f9c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f9cc:	461a      	mov	r2, r3
 800f9ce:	2100      	movs	r1, #0
 800f9d0:	4817      	ldr	r0, [pc, #92]	; (800fa30 <WriteVar+0x140>)
 800f9d2:	f013 f933 	bl	8022c3c <memset>
 800f9d6:	f44f 729b 	mov.w	r2, #310	; 0x136
 800f9da:	2100      	movs	r1, #0
 800f9dc:	4817      	ldr	r0, [pc, #92]	; (800fa3c <WriteVar+0x14c>)
 800f9de:	f013 f92d 	bl	8022c3c <memset>
 800f9e2:	4b12      	ldr	r3, [pc, #72]	; (800fa2c <WriteVar+0x13c>)
 800f9e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f9e8:	461a      	mov	r2, r3
 800f9ea:	4b11      	ldr	r3, [pc, #68]	; (800fa30 <WriteVar+0x140>)
 800f9ec:	18d0      	adds	r0, r2, r3
 800f9ee:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f9f2:	4a0c      	ldr	r2, [pc, #48]	; (800fa24 <WriteVar+0x134>)
 800f9f4:	4413      	add	r3, r2
 800f9f6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800f9fa:	4619      	mov	r1, r3
 800f9fc:	f013 f910 	bl	8022c20 <memcpy>
 800fa00:	4b0a      	ldr	r3, [pc, #40]	; (800fa2c <WriteVar+0x13c>)
 800fa02:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fa06:	b29a      	uxth	r2, r3
 800fa08:	89bb      	ldrh	r3, [r7, #12]
 800fa0a:	4413      	add	r3, r2
 800fa0c:	b29b      	uxth	r3, r3
 800fa0e:	b21a      	sxth	r2, r3
 800fa10:	4b06      	ldr	r3, [pc, #24]	; (800fa2c <WriteVar+0x13c>)
 800fa12:	801a      	strh	r2, [r3, #0]
 800fa14:	4b04      	ldr	r3, [pc, #16]	; (800fa28 <WriteVar+0x138>)
 800fa16:	2200      	movs	r2, #0
 800fa18:	801a      	strh	r2, [r3, #0]
 800fa1a:	bf00      	nop
 800fa1c:	3710      	adds	r7, #16
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	bd80      	pop	{r7, pc}
 800fa22:	bf00      	nop
 800fa24:	200015d4 	.word	0x200015d4
 800fa28:	20000792 	.word	0x20000792
 800fa2c:	20000790 	.word	0x20000790
 800fa30:	200017d8 	.word	0x200017d8
 800fa34:	20000794 	.word	0x20000794
 800fa38:	20000798 	.word	0x20000798
 800fa3c:	20000008 	.word	0x20000008

0800fa40 <WriteStr>:
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b084      	sub	sp, #16
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
 800fa48:	6039      	str	r1, [r7, #0]
 800fa4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fa4e:	81fb      	strh	r3, [r7, #14]
 800fa50:	6878      	ldr	r0, [r7, #4]
 800fa52:	f7fc faf5 	bl	800c040 <strlen>
 800fa56:	4603      	mov	r3, r0
 800fa58:	b21a      	sxth	r2, r3
 800fa5a:	4b40      	ldr	r3, [pc, #256]	; (800fb5c <WriteStr+0x11c>)
 800fa5c:	801a      	strh	r2, [r3, #0]
 800fa5e:	4b40      	ldr	r3, [pc, #256]	; (800fb60 <WriteStr+0x120>)
 800fa60:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fa64:	461a      	mov	r2, r3
 800fa66:	4b3f      	ldr	r3, [pc, #252]	; (800fb64 <WriteStr+0x124>)
 800fa68:	4413      	add	r3, r2
 800fa6a:	4a3c      	ldr	r2, [pc, #240]	; (800fb5c <WriteStr+0x11c>)
 800fa6c:	f9b2 2000 	ldrsh.w	r2, [r2]
 800fa70:	6879      	ldr	r1, [r7, #4]
 800fa72:	4618      	mov	r0, r3
 800fa74:	f013 f8d4 	bl	8022c20 <memcpy>
 800fa78:	4b39      	ldr	r3, [pc, #228]	; (800fb60 <WriteStr+0x120>)
 800fa7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fa7e:	b29a      	uxth	r2, r3
 800fa80:	4b36      	ldr	r3, [pc, #216]	; (800fb5c <WriteStr+0x11c>)
 800fa82:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fa86:	b29b      	uxth	r3, r3
 800fa88:	4413      	add	r3, r2
 800fa8a:	b29b      	uxth	r3, r3
 800fa8c:	b21a      	sxth	r2, r3
 800fa8e:	4b34      	ldr	r3, [pc, #208]	; (800fb60 <WriteStr+0x120>)
 800fa90:	801a      	strh	r2, [r3, #0]
 800fa92:	4b32      	ldr	r3, [pc, #200]	; (800fb5c <WriteStr+0x11c>)
 800fa94:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fa98:	461a      	mov	r2, r3
 800fa9a:	4b33      	ldr	r3, [pc, #204]	; (800fb68 <WriteStr+0x128>)
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	4413      	add	r3, r2
 800faa0:	4a31      	ldr	r2, [pc, #196]	; (800fb68 <WriteStr+0x128>)
 800faa2:	6013      	str	r3, [r2, #0]
 800faa4:	4b2e      	ldr	r3, [pc, #184]	; (800fb60 <WriteStr+0x120>)
 800faa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800faaa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800faae:	429a      	cmp	r2, r3
 800fab0:	dc4f      	bgt.n	800fb52 <WriteStr+0x112>
 800fab2:	6839      	ldr	r1, [r7, #0]
 800fab4:	482b      	ldr	r0, [pc, #172]	; (800fb64 <WriteStr+0x124>)
 800fab6:	f7ff fceb 	bl	800f490 <ProgFileSec>
 800faba:	4b2c      	ldr	r3, [pc, #176]	; (800fb6c <WriteStr+0x12c>)
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	1c5a      	adds	r2, r3, #1
 800fac0:	492a      	ldr	r1, [pc, #168]	; (800fb6c <WriteStr+0x12c>)
 800fac2:	600a      	str	r2, [r1, #0]
 800fac4:	105b      	asrs	r3, r3, #1
 800fac6:	b2db      	uxtb	r3, r3
 800fac8:	f003 0303 	and.w	r3, r3, #3
 800facc:	b2db      	uxtb	r3, r3
 800face:	461a      	mov	r2, r3
 800fad0:	2102      	movs	r1, #2
 800fad2:	f44f 7084 	mov.w	r0, #264	; 0x108
 800fad6:	f7ff fe95 	bl	800f804 <PrintClk>
 800fada:	4b21      	ldr	r3, [pc, #132]	; (800fb60 <WriteStr+0x120>)
 800fadc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fae0:	b29a      	uxth	r2, r3
 800fae2:	89fb      	ldrh	r3, [r7, #14]
 800fae4:	1ad3      	subs	r3, r2, r3
 800fae6:	b29b      	uxth	r3, r3
 800fae8:	81bb      	strh	r3, [r7, #12]
 800faea:	4b1c      	ldr	r3, [pc, #112]	; (800fb5c <WriteStr+0x11c>)
 800faec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800faf0:	b29a      	uxth	r2, r3
 800faf2:	89bb      	ldrh	r3, [r7, #12]
 800faf4:	1ad3      	subs	r3, r2, r3
 800faf6:	b29b      	uxth	r3, r3
 800faf8:	817b      	strh	r3, [r7, #10]
 800fafa:	4b19      	ldr	r3, [pc, #100]	; (800fb60 <WriteStr+0x120>)
 800fafc:	2200      	movs	r2, #0
 800fafe:	801a      	strh	r2, [r3, #0]
 800fb00:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fb04:	461a      	mov	r2, r3
 800fb06:	2100      	movs	r1, #0
 800fb08:	4816      	ldr	r0, [pc, #88]	; (800fb64 <WriteStr+0x124>)
 800fb0a:	f013 f897 	bl	8022c3c <memset>
 800fb0e:	f44f 729b 	mov.w	r2, #310	; 0x136
 800fb12:	2100      	movs	r1, #0
 800fb14:	4816      	ldr	r0, [pc, #88]	; (800fb70 <WriteStr+0x130>)
 800fb16:	f013 f891 	bl	8022c3c <memset>
 800fb1a:	4b11      	ldr	r3, [pc, #68]	; (800fb60 <WriteStr+0x120>)
 800fb1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fb20:	461a      	mov	r2, r3
 800fb22:	4b10      	ldr	r3, [pc, #64]	; (800fb64 <WriteStr+0x124>)
 800fb24:	18d0      	adds	r0, r2, r3
 800fb26:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800fb2a:	687a      	ldr	r2, [r7, #4]
 800fb2c:	4413      	add	r3, r2
 800fb2e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800fb32:	4619      	mov	r1, r3
 800fb34:	f013 f874 	bl	8022c20 <memcpy>
 800fb38:	4b09      	ldr	r3, [pc, #36]	; (800fb60 <WriteStr+0x120>)
 800fb3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fb3e:	b29a      	uxth	r2, r3
 800fb40:	89bb      	ldrh	r3, [r7, #12]
 800fb42:	4413      	add	r3, r2
 800fb44:	b29b      	uxth	r3, r3
 800fb46:	b21a      	sxth	r2, r3
 800fb48:	4b05      	ldr	r3, [pc, #20]	; (800fb60 <WriteStr+0x120>)
 800fb4a:	801a      	strh	r2, [r3, #0]
 800fb4c:	4b03      	ldr	r3, [pc, #12]	; (800fb5c <WriteStr+0x11c>)
 800fb4e:	2200      	movs	r2, #0
 800fb50:	801a      	strh	r2, [r3, #0]
 800fb52:	bf00      	nop
 800fb54:	3710      	adds	r7, #16
 800fb56:	46bd      	mov	sp, r7
 800fb58:	bd80      	pop	{r7, pc}
 800fb5a:	bf00      	nop
 800fb5c:	20000792 	.word	0x20000792
 800fb60:	20000790 	.word	0x20000790
 800fb64:	200017d8 	.word	0x200017d8
 800fb68:	20000794 	.word	0x20000794
 800fb6c:	20000798 	.word	0x20000798
 800fb70:	20000008 	.word	0x20000008

0800fb74 <Make_Filename>:
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b084      	sub	sp, #16
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	4603      	mov	r3, r0
 800fb7c:	6039      	str	r1, [r7, #0]
 800fb7e:	80fb      	strh	r3, [r7, #6]
 800fb80:	88fb      	ldrh	r3, [r7, #6]
 800fb82:	b2da      	uxtb	r2, r3
 800fb84:	f107 030c 	add.w	r3, r7, #12
 800fb88:	4611      	mov	r1, r2
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	f001 ff3c 	bl	8011a08 <u8ToDec3>
 800fb90:	683b      	ldr	r3, [r7, #0]
 800fb92:	3304      	adds	r3, #4
 800fb94:	7b3a      	ldrb	r2, [r7, #12]
 800fb96:	701a      	strb	r2, [r3, #0]
 800fb98:	683b      	ldr	r3, [r7, #0]
 800fb9a:	3305      	adds	r3, #5
 800fb9c:	7b7a      	ldrb	r2, [r7, #13]
 800fb9e:	701a      	strb	r2, [r3, #0]
 800fba0:	683b      	ldr	r3, [r7, #0]
 800fba2:	3306      	adds	r3, #6
 800fba4:	7bba      	ldrb	r2, [r7, #14]
 800fba6:	701a      	strb	r2, [r3, #0]
 800fba8:	bf00      	nop
 800fbaa:	3710      	adds	r7, #16
 800fbac:	46bd      	mov	sp, r7
 800fbae:	bd80      	pop	{r7, pc}

0800fbb0 <Load_File_Num>:
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b08a      	sub	sp, #40	; 0x28
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	71fb      	strb	r3, [r7, #7]
 800fbba:	2300      	movs	r3, #0
 800fbbc:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fbbe:	4a87      	ldr	r2, [pc, #540]	; (800fddc <Load_File_Num+0x22c>)
 800fbc0:	f107 0318 	add.w	r3, r7, #24
 800fbc4:	ca07      	ldmia	r2, {r0, r1, r2}
 800fbc6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fbca:	79fb      	ldrb	r3, [r7, #7]
 800fbcc:	3b1d      	subs	r3, #29
 800fbce:	2b04      	cmp	r3, #4
 800fbd0:	f200 80fe 	bhi.w	800fdd0 <Load_File_Num+0x220>
 800fbd4:	a201      	add	r2, pc, #4	; (adr r2, 800fbdc <Load_File_Num+0x2c>)
 800fbd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbda:	bf00      	nop
 800fbdc:	0800fbf1 	.word	0x0800fbf1
 800fbe0:	0800fc51 	.word	0x0800fc51
 800fbe4:	0800fcb1 	.word	0x0800fcb1
 800fbe8:	0800fd11 	.word	0x0800fd11
 800fbec:	0800fd71 	.word	0x0800fd71
 800fbf0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fbf4:	2100      	movs	r1, #0
 800fbf6:	487a      	ldr	r0, [pc, #488]	; (800fde0 <Load_File_Num+0x230>)
 800fbf8:	f013 f820 	bl	8022c3c <memset>
 800fbfc:	4a79      	ldr	r2, [pc, #484]	; (800fde4 <Load_File_Num+0x234>)
 800fbfe:	f107 0318 	add.w	r3, r7, #24
 800fc02:	ca07      	ldmia	r2, {r0, r1, r2}
 800fc04:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fc08:	f107 0218 	add.w	r2, r7, #24
 800fc0c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fc10:	4611      	mov	r1, r2
 800fc12:	4618      	mov	r0, r3
 800fc14:	f7ff ffae 	bl	800fb74 <Make_Filename>
 800fc18:	e00d      	b.n	800fc36 <Load_File_Num+0x86>
 800fc1a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fc1e:	b29b      	uxth	r3, r3
 800fc20:	3301      	adds	r3, #1
 800fc22:	b29b      	uxth	r3, r3
 800fc24:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fc26:	f107 0218 	add.w	r2, r7, #24
 800fc2a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fc2e:	4611      	mov	r1, r2
 800fc30:	4618      	mov	r0, r3
 800fc32:	f7ff ff9f 	bl	800fb74 <Make_Filename>
 800fc36:	f107 030c 	add.w	r3, r7, #12
 800fc3a:	f107 0210 	add.w	r2, r7, #16
 800fc3e:	f107 0118 	add.w	r1, r7, #24
 800fc42:	4867      	ldr	r0, [pc, #412]	; (800fde0 <Load_File_Num+0x230>)
 800fc44:	f7ff fa32 	bl	800f0ac <OpenFileRd>
 800fc48:	4603      	mov	r3, r0
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d0e5      	beq.n	800fc1a <Load_File_Num+0x6a>
 800fc4e:	e0bf      	b.n	800fdd0 <Load_File_Num+0x220>
 800fc50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fc54:	2100      	movs	r1, #0
 800fc56:	4862      	ldr	r0, [pc, #392]	; (800fde0 <Load_File_Num+0x230>)
 800fc58:	f012 fff0 	bl	8022c3c <memset>
 800fc5c:	4a62      	ldr	r2, [pc, #392]	; (800fde8 <Load_File_Num+0x238>)
 800fc5e:	f107 0318 	add.w	r3, r7, #24
 800fc62:	ca07      	ldmia	r2, {r0, r1, r2}
 800fc64:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fc68:	f107 0218 	add.w	r2, r7, #24
 800fc6c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fc70:	4611      	mov	r1, r2
 800fc72:	4618      	mov	r0, r3
 800fc74:	f7ff ff7e 	bl	800fb74 <Make_Filename>
 800fc78:	e00d      	b.n	800fc96 <Load_File_Num+0xe6>
 800fc7a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fc7e:	b29b      	uxth	r3, r3
 800fc80:	3301      	adds	r3, #1
 800fc82:	b29b      	uxth	r3, r3
 800fc84:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fc86:	f107 0218 	add.w	r2, r7, #24
 800fc8a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fc8e:	4611      	mov	r1, r2
 800fc90:	4618      	mov	r0, r3
 800fc92:	f7ff ff6f 	bl	800fb74 <Make_Filename>
 800fc96:	f107 030c 	add.w	r3, r7, #12
 800fc9a:	f107 0210 	add.w	r2, r7, #16
 800fc9e:	f107 0118 	add.w	r1, r7, #24
 800fca2:	484f      	ldr	r0, [pc, #316]	; (800fde0 <Load_File_Num+0x230>)
 800fca4:	f7ff fa02 	bl	800f0ac <OpenFileRd>
 800fca8:	4603      	mov	r3, r0
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d0e5      	beq.n	800fc7a <Load_File_Num+0xca>
 800fcae:	e08f      	b.n	800fdd0 <Load_File_Num+0x220>
 800fcb0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fcb4:	2100      	movs	r1, #0
 800fcb6:	484a      	ldr	r0, [pc, #296]	; (800fde0 <Load_File_Num+0x230>)
 800fcb8:	f012 ffc0 	bl	8022c3c <memset>
 800fcbc:	4a4b      	ldr	r2, [pc, #300]	; (800fdec <Load_File_Num+0x23c>)
 800fcbe:	f107 0318 	add.w	r3, r7, #24
 800fcc2:	ca07      	ldmia	r2, {r0, r1, r2}
 800fcc4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fcc8:	f107 0218 	add.w	r2, r7, #24
 800fccc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fcd0:	4611      	mov	r1, r2
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	f7ff ff4e 	bl	800fb74 <Make_Filename>
 800fcd8:	e00d      	b.n	800fcf6 <Load_File_Num+0x146>
 800fcda:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fcde:	b29b      	uxth	r3, r3
 800fce0:	3301      	adds	r3, #1
 800fce2:	b29b      	uxth	r3, r3
 800fce4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fce6:	f107 0218 	add.w	r2, r7, #24
 800fcea:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fcee:	4611      	mov	r1, r2
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	f7ff ff3f 	bl	800fb74 <Make_Filename>
 800fcf6:	f107 030c 	add.w	r3, r7, #12
 800fcfa:	f107 0210 	add.w	r2, r7, #16
 800fcfe:	f107 0118 	add.w	r1, r7, #24
 800fd02:	4837      	ldr	r0, [pc, #220]	; (800fde0 <Load_File_Num+0x230>)
 800fd04:	f7ff f9d2 	bl	800f0ac <OpenFileRd>
 800fd08:	4603      	mov	r3, r0
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d0e5      	beq.n	800fcda <Load_File_Num+0x12a>
 800fd0e:	e05f      	b.n	800fdd0 <Load_File_Num+0x220>
 800fd10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fd14:	2100      	movs	r1, #0
 800fd16:	4832      	ldr	r0, [pc, #200]	; (800fde0 <Load_File_Num+0x230>)
 800fd18:	f012 ff90 	bl	8022c3c <memset>
 800fd1c:	4a34      	ldr	r2, [pc, #208]	; (800fdf0 <Load_File_Num+0x240>)
 800fd1e:	f107 0318 	add.w	r3, r7, #24
 800fd22:	ca07      	ldmia	r2, {r0, r1, r2}
 800fd24:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fd28:	f107 0218 	add.w	r2, r7, #24
 800fd2c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fd30:	4611      	mov	r1, r2
 800fd32:	4618      	mov	r0, r3
 800fd34:	f7ff ff1e 	bl	800fb74 <Make_Filename>
 800fd38:	e00d      	b.n	800fd56 <Load_File_Num+0x1a6>
 800fd3a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fd3e:	b29b      	uxth	r3, r3
 800fd40:	3301      	adds	r3, #1
 800fd42:	b29b      	uxth	r3, r3
 800fd44:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fd46:	f107 0218 	add.w	r2, r7, #24
 800fd4a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fd4e:	4611      	mov	r1, r2
 800fd50:	4618      	mov	r0, r3
 800fd52:	f7ff ff0f 	bl	800fb74 <Make_Filename>
 800fd56:	f107 030c 	add.w	r3, r7, #12
 800fd5a:	f107 0210 	add.w	r2, r7, #16
 800fd5e:	f107 0118 	add.w	r1, r7, #24
 800fd62:	481f      	ldr	r0, [pc, #124]	; (800fde0 <Load_File_Num+0x230>)
 800fd64:	f7ff f9a2 	bl	800f0ac <OpenFileRd>
 800fd68:	4603      	mov	r3, r0
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d0e5      	beq.n	800fd3a <Load_File_Num+0x18a>
 800fd6e:	e02f      	b.n	800fdd0 <Load_File_Num+0x220>
 800fd70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fd74:	2100      	movs	r1, #0
 800fd76:	481a      	ldr	r0, [pc, #104]	; (800fde0 <Load_File_Num+0x230>)
 800fd78:	f012 ff60 	bl	8022c3c <memset>
 800fd7c:	4a1d      	ldr	r2, [pc, #116]	; (800fdf4 <Load_File_Num+0x244>)
 800fd7e:	f107 0318 	add.w	r3, r7, #24
 800fd82:	ca07      	ldmia	r2, {r0, r1, r2}
 800fd84:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fd88:	f107 0218 	add.w	r2, r7, #24
 800fd8c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fd90:	4611      	mov	r1, r2
 800fd92:	4618      	mov	r0, r3
 800fd94:	f7ff feee 	bl	800fb74 <Make_Filename>
 800fd98:	e00d      	b.n	800fdb6 <Load_File_Num+0x206>
 800fd9a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fd9e:	b29b      	uxth	r3, r3
 800fda0:	3301      	adds	r3, #1
 800fda2:	b29b      	uxth	r3, r3
 800fda4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fda6:	f107 0218 	add.w	r2, r7, #24
 800fdaa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fdae:	4611      	mov	r1, r2
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	f7ff fedf 	bl	800fb74 <Make_Filename>
 800fdb6:	f107 030c 	add.w	r3, r7, #12
 800fdba:	f107 0210 	add.w	r2, r7, #16
 800fdbe:	f107 0118 	add.w	r1, r7, #24
 800fdc2:	4807      	ldr	r0, [pc, #28]	; (800fde0 <Load_File_Num+0x230>)
 800fdc4:	f7ff f972 	bl	800f0ac <OpenFileRd>
 800fdc8:	4603      	mov	r3, r0
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d0e5      	beq.n	800fd9a <Load_File_Num+0x1ea>
 800fdce:	bf00      	nop
 800fdd0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	3728      	adds	r7, #40	; 0x28
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	bd80      	pop	{r7, pc}
 800fddc:	08000238 	.word	0x08000238
 800fde0:	200017d8 	.word	0x200017d8
 800fde4:	080001fc 	.word	0x080001fc
 800fde8:	08000208 	.word	0x08000208
 800fdec:	08000214 	.word	0x08000214
 800fdf0:	08000220 	.word	0x08000220
 800fdf4:	0800022c 	.word	0x0800022c

0800fdf8 <File_Num>:
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	af00      	add	r7, sp, #0
 800fdfc:	201d      	movs	r0, #29
 800fdfe:	f7ff fed7 	bl	800fbb0 <Load_File_Num>
 800fe02:	4603      	mov	r3, r0
 800fe04:	461a      	mov	r2, r3
 800fe06:	4b12      	ldr	r3, [pc, #72]	; (800fe50 <File_Num+0x58>)
 800fe08:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 800fe0c:	201e      	movs	r0, #30
 800fe0e:	f7ff fecf 	bl	800fbb0 <Load_File_Num>
 800fe12:	4603      	mov	r3, r0
 800fe14:	461a      	mov	r2, r3
 800fe16:	4b0e      	ldr	r3, [pc, #56]	; (800fe50 <File_Num+0x58>)
 800fe18:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
 800fe1c:	201f      	movs	r0, #31
 800fe1e:	f7ff fec7 	bl	800fbb0 <Load_File_Num>
 800fe22:	4603      	mov	r3, r0
 800fe24:	461a      	mov	r2, r3
 800fe26:	4b0a      	ldr	r3, [pc, #40]	; (800fe50 <File_Num+0x58>)
 800fe28:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
 800fe2c:	2020      	movs	r0, #32
 800fe2e:	f7ff febf 	bl	800fbb0 <Load_File_Num>
 800fe32:	4603      	mov	r3, r0
 800fe34:	461a      	mov	r2, r3
 800fe36:	4b06      	ldr	r3, [pc, #24]	; (800fe50 <File_Num+0x58>)
 800fe38:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 800fe3c:	2021      	movs	r0, #33	; 0x21
 800fe3e:	f7ff feb7 	bl	800fbb0 <Load_File_Num>
 800fe42:	4603      	mov	r3, r0
 800fe44:	461a      	mov	r2, r3
 800fe46:	4b02      	ldr	r3, [pc, #8]	; (800fe50 <File_Num+0x58>)
 800fe48:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
 800fe4c:	bf00      	nop
 800fe4e:	bd80      	pop	{r7, pc}
 800fe50:	20000298 	.word	0x20000298

0800fe54 <Load_Buf>:
 800fe54:	b580      	push	{r7, lr}
 800fe56:	b08e      	sub	sp, #56	; 0x38
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	80fb      	strh	r3, [r7, #6]
 800fe5e:	4a66      	ldr	r2, [pc, #408]	; (800fff8 <Load_Buf+0x1a4>)
 800fe60:	f107 0318 	add.w	r3, r7, #24
 800fe64:	ca07      	ldmia	r2, {r0, r1, r2}
 800fe66:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fe6a:	2301      	movs	r3, #1
 800fe6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe6e:	f107 0218 	add.w	r2, r7, #24
 800fe72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fe76:	4611      	mov	r1, r2
 800fe78:	4618      	mov	r0, r3
 800fe7a:	f7ff fe7b 	bl	800fb74 <Make_Filename>
 800fe7e:	f107 030c 	add.w	r3, r7, #12
 800fe82:	f107 0210 	add.w	r2, r7, #16
 800fe86:	f107 0118 	add.w	r1, r7, #24
 800fe8a:	485c      	ldr	r0, [pc, #368]	; (800fffc <Load_Buf+0x1a8>)
 800fe8c:	f7ff f90e 	bl	800f0ac <OpenFileRd>
 800fe90:	4603      	mov	r3, r0
 800fe92:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d002      	beq.n	800fea0 <Load_Buf+0x4c>
 800fe9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe9c:	b2db      	uxtb	r3, r3
 800fe9e:	e0a6      	b.n	800ffee <Load_Buf+0x19a>
 800fea0:	2302      	movs	r3, #2
 800fea2:	633b      	str	r3, [r7, #48]	; 0x30
 800fea4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fea8:	62bb      	str	r3, [r7, #40]	; 0x28
 800feaa:	4b55      	ldr	r3, [pc, #340]	; (8010000 <Load_Buf+0x1ac>)
 800feac:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800feb0:	2b03      	cmp	r3, #3
 800feb2:	d101      	bne.n	800feb8 <Load_Buf+0x64>
 800feb4:	2304      	movs	r3, #4
 800feb6:	633b      	str	r3, [r7, #48]	; 0x30
 800feb8:	2300      	movs	r3, #0
 800feba:	637b      	str	r3, [r7, #52]	; 0x34
 800febc:	e01d      	b.n	800fefa <Load_Buf+0xa6>
 800febe:	f107 0310 	add.w	r3, r7, #16
 800fec2:	4619      	mov	r1, r3
 800fec4:	484d      	ldr	r0, [pc, #308]	; (800fffc <Load_Buf+0x1a8>)
 800fec6:	f7ff fb29 	bl	800f51c <ReadFileSec>
 800feca:	4603      	mov	r3, r0
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d001      	beq.n	800fed4 <Load_Buf+0x80>
 800fed0:	2303      	movs	r3, #3
 800fed2:	e08c      	b.n	800ffee <Load_Buf+0x19a>
 800fed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fed6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fed8:	fb02 f303 	mul.w	r3, r2, r3
 800fedc:	0fda      	lsrs	r2, r3, #31
 800fede:	4413      	add	r3, r2
 800fee0:	105b      	asrs	r3, r3, #1
 800fee2:	3302      	adds	r3, #2
 800fee4:	005b      	lsls	r3, r3, #1
 800fee6:	4a47      	ldr	r2, [pc, #284]	; (8010004 <Load_Buf+0x1b0>)
 800fee8:	4413      	add	r3, r2
 800feea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800feec:	4943      	ldr	r1, [pc, #268]	; (800fffc <Load_Buf+0x1a8>)
 800feee:	4618      	mov	r0, r3
 800fef0:	f012 fe96 	bl	8022c20 <memcpy>
 800fef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fef6:	3301      	adds	r3, #1
 800fef8:	637b      	str	r3, [r7, #52]	; 0x34
 800fefa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fefc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fefe:	429a      	cmp	r2, r3
 800ff00:	dbdd      	blt.n	800febe <Load_Buf+0x6a>
 800ff02:	f107 0310 	add.w	r3, r7, #16
 800ff06:	4619      	mov	r1, r3
 800ff08:	483c      	ldr	r0, [pc, #240]	; (800fffc <Load_Buf+0x1a8>)
 800ff0a:	f7ff fb07 	bl	800f51c <ReadFileSec>
 800ff0e:	4603      	mov	r3, r0
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d001      	beq.n	800ff18 <Load_Buf+0xc4>
 800ff14:	2303      	movs	r3, #3
 800ff16:	e06a      	b.n	800ffee <Load_Buf+0x19a>
 800ff18:	4b3b      	ldr	r3, [pc, #236]	; (8010008 <Load_Buf+0x1b4>)
 800ff1a:	627b      	str	r3, [r7, #36]	; 0x24
 800ff1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff1e:	1c9a      	adds	r2, r3, #2
 800ff20:	627a      	str	r2, [r7, #36]	; 0x24
 800ff22:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800ff26:	801a      	strh	r2, [r3, #0]
 800ff28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff2a:	1c9a      	adds	r2, r3, #2
 800ff2c:	627a      	str	r2, [r7, #36]	; 0x24
 800ff2e:	4a35      	ldr	r2, [pc, #212]	; (8010004 <Load_Buf+0x1b0>)
 800ff30:	f9b2 2000 	ldrsh.w	r2, [r2]
 800ff34:	801a      	strh	r2, [r3, #0]
 800ff36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff38:	1c9a      	adds	r2, r3, #2
 800ff3a:	627a      	str	r2, [r7, #36]	; 0x24
 800ff3c:	4a31      	ldr	r2, [pc, #196]	; (8010004 <Load_Buf+0x1b0>)
 800ff3e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800ff42:	801a      	strh	r2, [r3, #0]
 800ff44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff46:	1c9a      	adds	r2, r3, #2
 800ff48:	627a      	str	r2, [r7, #36]	; 0x24
 800ff4a:	4a2d      	ldr	r2, [pc, #180]	; (8010000 <Load_Buf+0x1ac>)
 800ff4c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800ff50:	801a      	strh	r2, [r3, #0]
 800ff52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff54:	1c9a      	adds	r2, r3, #2
 800ff56:	627a      	str	r2, [r7, #36]	; 0x24
 800ff58:	4a29      	ldr	r2, [pc, #164]	; (8010000 <Load_Buf+0x1ac>)
 800ff5a:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 800ff5e:	801a      	strh	r2, [r3, #0]
 800ff60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff62:	1c9a      	adds	r2, r3, #2
 800ff64:	627a      	str	r2, [r7, #36]	; 0x24
 800ff66:	4a26      	ldr	r2, [pc, #152]	; (8010000 <Load_Buf+0x1ac>)
 800ff68:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 800ff6c:	801a      	strh	r2, [r3, #0]
 800ff6e:	4b23      	ldr	r3, [pc, #140]	; (800fffc <Load_Buf+0x1a8>)
 800ff70:	627b      	str	r3, [r7, #36]	; 0x24
 800ff72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff74:	1c9a      	adds	r2, r3, #2
 800ff76:	627a      	str	r2, [r7, #36]	; 0x24
 800ff78:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ff7c:	4b21      	ldr	r3, [pc, #132]	; (8010004 <Load_Buf+0x1b0>)
 800ff7e:	801a      	strh	r2, [r3, #0]
 800ff80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff82:	1c9a      	adds	r2, r3, #2
 800ff84:	627a      	str	r2, [r7, #36]	; 0x24
 800ff86:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ff8a:	4b1e      	ldr	r3, [pc, #120]	; (8010004 <Load_Buf+0x1b0>)
 800ff8c:	805a      	strh	r2, [r3, #2]
 800ff8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff90:	1c9a      	adds	r2, r3, #2
 800ff92:	627a      	str	r2, [r7, #36]	; 0x24
 800ff94:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ff98:	4b19      	ldr	r3, [pc, #100]	; (8010000 <Load_Buf+0x1ac>)
 800ff9a:	809a      	strh	r2, [r3, #4]
 800ff9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff9e:	1c9a      	adds	r2, r3, #2
 800ffa0:	627a      	str	r2, [r7, #36]	; 0x24
 800ffa2:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ffa6:	4b16      	ldr	r3, [pc, #88]	; (8010000 <Load_Buf+0x1ac>)
 800ffa8:	829a      	strh	r2, [r3, #20]
 800ffaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffac:	1c9a      	adds	r2, r3, #2
 800ffae:	627a      	str	r2, [r7, #36]	; 0x24
 800ffb0:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ffb4:	4b12      	ldr	r3, [pc, #72]	; (8010000 <Load_Buf+0x1ac>)
 800ffb6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800ffba:	4b14      	ldr	r3, [pc, #80]	; (801000c <Load_Buf+0x1b8>)
 800ffbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ffc0:	f043 0301 	orr.w	r3, r3, #1
 800ffc4:	b21a      	sxth	r2, r3
 800ffc6:	4b11      	ldr	r3, [pc, #68]	; (801000c <Load_Buf+0x1b8>)
 800ffc8:	801a      	strh	r2, [r3, #0]
 800ffca:	f004 fa51 	bl	8014470 <DispStatus>
 800ffce:	4b0c      	ldr	r3, [pc, #48]	; (8010000 <Load_Buf+0x1ac>)
 800ffd0:	f9b3 311c 	ldrsh.w	r3, [r3, #284]	; 0x11c
 800ffd4:	2b62      	cmp	r3, #98	; 0x62
 800ffd6:	dc09      	bgt.n	800ffec <Load_Buf+0x198>
 800ffd8:	4b09      	ldr	r3, [pc, #36]	; (8010000 <Load_Buf+0x1ac>)
 800ffda:	f9b3 311c 	ldrsh.w	r3, [r3, #284]	; 0x11c
 800ffde:	b29b      	uxth	r3, r3
 800ffe0:	3301      	adds	r3, #1
 800ffe2:	b29b      	uxth	r3, r3
 800ffe4:	b21a      	sxth	r2, r3
 800ffe6:	4b06      	ldr	r3, [pc, #24]	; (8010000 <Load_Buf+0x1ac>)
 800ffe8:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
 800ffec:	2300      	movs	r3, #0
 800ffee:	4618      	mov	r0, r3
 800fff0:	3738      	adds	r7, #56	; 0x38
 800fff2:	46bd      	mov	sp, r7
 800fff4:	bd80      	pop	{r7, pc}
 800fff6:	bf00      	nop
 800fff8:	08000214 	.word	0x08000214
 800fffc:	200017d8 	.word	0x200017d8
 8010000:	20000298 	.word	0x20000298
 8010004:	20002870 	.word	0x20002870
 8010008:	200015d8 	.word	0x200015d8
 801000c:	200007a0 	.word	0x200007a0

08010010 <Save_Buf>:
 8010010:	b580      	push	{r7, lr}
 8010012:	b08e      	sub	sp, #56	; 0x38
 8010014:	af00      	add	r7, sp, #0
 8010016:	4603      	mov	r3, r0
 8010018:	80fb      	strh	r3, [r7, #6]
 801001a:	4a64      	ldr	r2, [pc, #400]	; (80101ac <Save_Buf+0x19c>)
 801001c:	f107 0318 	add.w	r3, r7, #24
 8010020:	ca07      	ldmia	r2, {r0, r1, r2}
 8010022:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010026:	2300      	movs	r3, #0
 8010028:	637b      	str	r3, [r7, #52]	; 0x34
 801002a:	2304      	movs	r3, #4
 801002c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801002e:	2300      	movs	r3, #0
 8010030:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010034:	2302      	movs	r3, #2
 8010036:	863b      	strh	r3, [r7, #48]	; 0x30
 8010038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801003c:	857b      	strh	r3, [r7, #42]	; 0x2a
 801003e:	4b5c      	ldr	r3, [pc, #368]	; (80101b0 <Save_Buf+0x1a0>)
 8010040:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010044:	2b03      	cmp	r3, #3
 8010046:	d101      	bne.n	801004c <Save_Buf+0x3c>
 8010048:	2304      	movs	r3, #4
 801004a:	863b      	strh	r3, [r7, #48]	; 0x30
 801004c:	f107 0218 	add.w	r2, r7, #24
 8010050:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010054:	4611      	mov	r1, r2
 8010056:	4618      	mov	r0, r3
 8010058:	f7ff fd8c 	bl	800fb74 <Make_Filename>
 801005c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010060:	2100      	movs	r1, #0
 8010062:	4854      	ldr	r0, [pc, #336]	; (80101b4 <Save_Buf+0x1a4>)
 8010064:	f012 fdea 	bl	8022c3c <memset>
 8010068:	f107 030c 	add.w	r3, r7, #12
 801006c:	f107 0210 	add.w	r2, r7, #16
 8010070:	f107 0118 	add.w	r1, r7, #24
 8010074:	484f      	ldr	r0, [pc, #316]	; (80101b4 <Save_Buf+0x1a4>)
 8010076:	f7ff fae3 	bl	800f640 <OpenFileWr>
 801007a:	4603      	mov	r3, r0
 801007c:	2b00      	cmp	r3, #0
 801007e:	d002      	beq.n	8010086 <Save_Buf+0x76>
 8010080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010082:	b2db      	uxtb	r3, r3
 8010084:	e08e      	b.n	80101a4 <Save_Buf+0x194>
 8010086:	2300      	movs	r3, #0
 8010088:	637b      	str	r3, [r7, #52]	; 0x34
 801008a:	e02f      	b.n	80100ec <Save_Buf+0xdc>
 801008c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010090:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010092:	fb02 f303 	mul.w	r3, r2, r3
 8010096:	0fda      	lsrs	r2, r3, #31
 8010098:	4413      	add	r3, r2
 801009a:	105b      	asrs	r3, r3, #1
 801009c:	3302      	adds	r3, #2
 801009e:	005b      	lsls	r3, r3, #1
 80100a0:	4a45      	ldr	r2, [pc, #276]	; (80101b8 <Save_Buf+0x1a8>)
 80100a2:	4413      	add	r3, r2
 80100a4:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80100a8:	4619      	mov	r1, r3
 80100aa:	4842      	ldr	r0, [pc, #264]	; (80101b4 <Save_Buf+0x1a4>)
 80100ac:	f012 fdb8 	bl	8022c20 <memcpy>
 80100b0:	f107 0310 	add.w	r3, r7, #16
 80100b4:	4619      	mov	r1, r3
 80100b6:	483f      	ldr	r0, [pc, #252]	; (80101b4 <Save_Buf+0x1a4>)
 80100b8:	f7ff f9ea 	bl	800f490 <ProgFileSec>
 80100bc:	4603      	mov	r3, r0
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d001      	beq.n	80100c6 <Save_Buf+0xb6>
 80100c2:	2303      	movs	r3, #3
 80100c4:	e06e      	b.n	80101a4 <Save_Buf+0x194>
 80100c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80100ca:	1c5a      	adds	r2, r3, #1
 80100cc:	f887 2033 	strb.w	r2, [r7, #51]	; 0x33
 80100d0:	085b      	lsrs	r3, r3, #1
 80100d2:	b2db      	uxtb	r3, r3
 80100d4:	f003 0303 	and.w	r3, r3, #3
 80100d8:	b2db      	uxtb	r3, r3
 80100da:	461a      	mov	r2, r3
 80100dc:	2102      	movs	r1, #2
 80100de:	f44f 7084 	mov.w	r0, #264	; 0x108
 80100e2:	f7ff fb8f 	bl	800f804 <PrintClk>
 80100e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100e8:	3301      	adds	r3, #1
 80100ea:	637b      	str	r3, [r7, #52]	; 0x34
 80100ec:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80100f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100f2:	429a      	cmp	r2, r3
 80100f4:	dbca      	blt.n	801008c <Save_Buf+0x7c>
 80100f6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80100fa:	461a      	mov	r2, r3
 80100fc:	2100      	movs	r1, #0
 80100fe:	482d      	ldr	r0, [pc, #180]	; (80101b4 <Save_Buf+0x1a4>)
 8010100:	f012 fd9c 	bl	8022c3c <memset>
 8010104:	4b2b      	ldr	r3, [pc, #172]	; (80101b4 <Save_Buf+0x1a4>)
 8010106:	627b      	str	r3, [r7, #36]	; 0x24
 8010108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801010a:	1c9a      	adds	r2, r3, #2
 801010c:	627a      	str	r2, [r7, #36]	; 0x24
 801010e:	4a2a      	ldr	r2, [pc, #168]	; (80101b8 <Save_Buf+0x1a8>)
 8010110:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010114:	801a      	strh	r2, [r3, #0]
 8010116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010118:	1c9a      	adds	r2, r3, #2
 801011a:	627a      	str	r2, [r7, #36]	; 0x24
 801011c:	4a26      	ldr	r2, [pc, #152]	; (80101b8 <Save_Buf+0x1a8>)
 801011e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8010122:	801a      	strh	r2, [r3, #0]
 8010124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010126:	1c9a      	adds	r2, r3, #2
 8010128:	627a      	str	r2, [r7, #36]	; 0x24
 801012a:	4a21      	ldr	r2, [pc, #132]	; (80101b0 <Save_Buf+0x1a0>)
 801012c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8010130:	801a      	strh	r2, [r3, #0]
 8010132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010134:	1c9a      	adds	r2, r3, #2
 8010136:	627a      	str	r2, [r7, #36]	; 0x24
 8010138:	4a1d      	ldr	r2, [pc, #116]	; (80101b0 <Save_Buf+0x1a0>)
 801013a:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 801013e:	801a      	strh	r2, [r3, #0]
 8010140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010142:	1c9a      	adds	r2, r3, #2
 8010144:	627a      	str	r2, [r7, #36]	; 0x24
 8010146:	4a1a      	ldr	r2, [pc, #104]	; (80101b0 <Save_Buf+0x1a0>)
 8010148:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 801014c:	801a      	strh	r2, [r3, #0]
 801014e:	f107 0310 	add.w	r3, r7, #16
 8010152:	4619      	mov	r1, r3
 8010154:	4817      	ldr	r0, [pc, #92]	; (80101b4 <Save_Buf+0x1a4>)
 8010156:	f7ff f99b 	bl	800f490 <ProgFileSec>
 801015a:	4603      	mov	r3, r0
 801015c:	2b00      	cmp	r3, #0
 801015e:	d001      	beq.n	8010164 <Save_Buf+0x154>
 8010160:	2303      	movs	r3, #3
 8010162:	e01f      	b.n	80101a4 <Save_Buf+0x194>
 8010164:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010168:	f503 5100 	add.w	r1, r3, #8192	; 0x2000
 801016c:	f107 030c 	add.w	r3, r7, #12
 8010170:	f107 0210 	add.w	r2, r7, #16
 8010174:	480f      	ldr	r0, [pc, #60]	; (80101b4 <Save_Buf+0x1a4>)
 8010176:	f7ff f9ff 	bl	800f578 <CloseFile>
 801017a:	4603      	mov	r3, r0
 801017c:	2b00      	cmp	r3, #0
 801017e:	d001      	beq.n	8010184 <Save_Buf+0x174>
 8010180:	2303      	movs	r3, #3
 8010182:	e00f      	b.n	80101a4 <Save_Buf+0x194>
 8010184:	4b0a      	ldr	r3, [pc, #40]	; (80101b0 <Save_Buf+0x1a0>)
 8010186:	f9b3 30fc 	ldrsh.w	r3, [r3, #252]	; 0xfc
 801018a:	2b62      	cmp	r3, #98	; 0x62
 801018c:	dc09      	bgt.n	80101a2 <Save_Buf+0x192>
 801018e:	4b08      	ldr	r3, [pc, #32]	; (80101b0 <Save_Buf+0x1a0>)
 8010190:	f9b3 30fc 	ldrsh.w	r3, [r3, #252]	; 0xfc
 8010194:	b29b      	uxth	r3, r3
 8010196:	3301      	adds	r3, #1
 8010198:	b29b      	uxth	r3, r3
 801019a:	b21a      	sxth	r2, r3
 801019c:	4b04      	ldr	r3, [pc, #16]	; (80101b0 <Save_Buf+0x1a0>)
 801019e:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
 80101a2:	2300      	movs	r3, #0
 80101a4:	4618      	mov	r0, r3
 80101a6:	3738      	adds	r7, #56	; 0x38
 80101a8:	46bd      	mov	sp, r7
 80101aa:	bd80      	pop	{r7, pc}
 80101ac:	08000214 	.word	0x08000214
 80101b0:	20000298 	.word	0x20000298
 80101b4:	200017d8 	.word	0x200017d8
 80101b8:	20002870 	.word	0x20002870

080101bc <Save_Dat>:
 80101bc:	b580      	push	{r7, lr}
 80101be:	b08a      	sub	sp, #40	; 0x28
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	4603      	mov	r3, r0
 80101c4:	80fb      	strh	r3, [r7, #6]
 80101c6:	4a42      	ldr	r2, [pc, #264]	; (80102d0 <Save_Dat+0x114>)
 80101c8:	f107 0318 	add.w	r3, r7, #24
 80101cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80101ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80101d2:	2304      	movs	r3, #4
 80101d4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80101d6:	f107 0218 	add.w	r2, r7, #24
 80101da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80101de:	4611      	mov	r1, r2
 80101e0:	4618      	mov	r0, r3
 80101e2:	f7ff fcc7 	bl	800fb74 <Make_Filename>
 80101e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80101ea:	2100      	movs	r1, #0
 80101ec:	4839      	ldr	r0, [pc, #228]	; (80102d4 <Save_Dat+0x118>)
 80101ee:	f012 fd25 	bl	8022c3c <memset>
 80101f2:	f107 030c 	add.w	r3, r7, #12
 80101f6:	f107 0210 	add.w	r2, r7, #16
 80101fa:	f107 0118 	add.w	r1, r7, #24
 80101fe:	4835      	ldr	r0, [pc, #212]	; (80102d4 <Save_Dat+0x118>)
 8010200:	f7ff fa1e 	bl	800f640 <OpenFileWr>
 8010204:	4603      	mov	r3, r0
 8010206:	2b00      	cmp	r3, #0
 8010208:	d002      	beq.n	8010210 <Save_Dat+0x54>
 801020a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801020c:	b2db      	uxtb	r3, r3
 801020e:	e05b      	b.n	80102c8 <Save_Dat+0x10c>
 8010210:	4b30      	ldr	r3, [pc, #192]	; (80102d4 <Save_Dat+0x118>)
 8010212:	2201      	movs	r2, #1
 8010214:	701a      	strb	r2, [r3, #0]
 8010216:	4b30      	ldr	r3, [pc, #192]	; (80102d8 <Save_Dat+0x11c>)
 8010218:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801021c:	b2da      	uxtb	r2, r3
 801021e:	4b2d      	ldr	r3, [pc, #180]	; (80102d4 <Save_Dat+0x118>)
 8010220:	705a      	strb	r2, [r3, #1]
 8010222:	4b2d      	ldr	r3, [pc, #180]	; (80102d8 <Save_Dat+0x11c>)
 8010224:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8010228:	b2da      	uxtb	r2, r3
 801022a:	4b2a      	ldr	r3, [pc, #168]	; (80102d4 <Save_Dat+0x118>)
 801022c:	709a      	strb	r2, [r3, #2]
 801022e:	4b2a      	ldr	r3, [pc, #168]	; (80102d8 <Save_Dat+0x11c>)
 8010230:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010234:	b2da      	uxtb	r2, r3
 8010236:	4b27      	ldr	r3, [pc, #156]	; (80102d4 <Save_Dat+0x118>)
 8010238:	70da      	strb	r2, [r3, #3]
 801023a:	4b27      	ldr	r3, [pc, #156]	; (80102d8 <Save_Dat+0x11c>)
 801023c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010240:	b2da      	uxtb	r2, r3
 8010242:	4b24      	ldr	r3, [pc, #144]	; (80102d4 <Save_Dat+0x118>)
 8010244:	711a      	strb	r2, [r3, #4]
 8010246:	4b24      	ldr	r3, [pc, #144]	; (80102d8 <Save_Dat+0x11c>)
 8010248:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801024c:	b2da      	uxtb	r2, r3
 801024e:	4b21      	ldr	r3, [pc, #132]	; (80102d4 <Save_Dat+0x118>)
 8010250:	715a      	strb	r2, [r3, #5]
 8010252:	4b21      	ldr	r3, [pc, #132]	; (80102d8 <Save_Dat+0x11c>)
 8010254:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8010258:	b2da      	uxtb	r2, r3
 801025a:	4b1e      	ldr	r3, [pc, #120]	; (80102d4 <Save_Dat+0x118>)
 801025c:	719a      	strb	r2, [r3, #6]
 801025e:	4b1e      	ldr	r3, [pc, #120]	; (80102d8 <Save_Dat+0x11c>)
 8010260:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8010264:	b2da      	uxtb	r2, r3
 8010266:	4b1b      	ldr	r3, [pc, #108]	; (80102d4 <Save_Dat+0x118>)
 8010268:	71da      	strb	r2, [r3, #7]
 801026a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801026e:	491b      	ldr	r1, [pc, #108]	; (80102dc <Save_Dat+0x120>)
 8010270:	481b      	ldr	r0, [pc, #108]	; (80102e0 <Save_Dat+0x124>)
 8010272:	f012 fcd5 	bl	8022c20 <memcpy>
 8010276:	f107 0310 	add.w	r3, r7, #16
 801027a:	4619      	mov	r1, r3
 801027c:	4815      	ldr	r0, [pc, #84]	; (80102d4 <Save_Dat+0x118>)
 801027e:	f7ff f907 	bl	800f490 <ProgFileSec>
 8010282:	4603      	mov	r3, r0
 8010284:	2b00      	cmp	r3, #0
 8010286:	d001      	beq.n	801028c <Save_Dat+0xd0>
 8010288:	2303      	movs	r3, #3
 801028a:	e01d      	b.n	80102c8 <Save_Dat+0x10c>
 801028c:	f107 030c 	add.w	r3, r7, #12
 8010290:	f107 0210 	add.w	r2, r7, #16
 8010294:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010298:	480e      	ldr	r0, [pc, #56]	; (80102d4 <Save_Dat+0x118>)
 801029a:	f7ff f96d 	bl	800f578 <CloseFile>
 801029e:	4603      	mov	r3, r0
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d001      	beq.n	80102a8 <Save_Dat+0xec>
 80102a4:	2303      	movs	r3, #3
 80102a6:	e00f      	b.n	80102c8 <Save_Dat+0x10c>
 80102a8:	4b0b      	ldr	r3, [pc, #44]	; (80102d8 <Save_Dat+0x11c>)
 80102aa:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 80102ae:	2b62      	cmp	r3, #98	; 0x62
 80102b0:	dc09      	bgt.n	80102c6 <Save_Dat+0x10a>
 80102b2:	4b09      	ldr	r3, [pc, #36]	; (80102d8 <Save_Dat+0x11c>)
 80102b4:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 80102b8:	b29b      	uxth	r3, r3
 80102ba:	3301      	adds	r3, #1
 80102bc:	b29b      	uxth	r3, r3
 80102be:	b21a      	sxth	r2, r3
 80102c0:	4b05      	ldr	r3, [pc, #20]	; (80102d8 <Save_Dat+0x11c>)
 80102c2:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
 80102c6:	2300      	movs	r3, #0
 80102c8:	4618      	mov	r0, r3
 80102ca:	3728      	adds	r7, #40	; 0x28
 80102cc:	46bd      	mov	sp, r7
 80102ce:	bd80      	pop	{r7, pc}
 80102d0:	08000208 	.word	0x08000208
 80102d4:	200017d8 	.word	0x200017d8
 80102d8:	20000298 	.word	0x20000298
 80102dc:	20000c08 	.word	0x20000c08
 80102e0:	200017e2 	.word	0x200017e2

080102e4 <Load_Dat>:
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b08a      	sub	sp, #40	; 0x28
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	4603      	mov	r3, r0
 80102ec:	80fb      	strh	r3, [r7, #6]
 80102ee:	4a4f      	ldr	r2, [pc, #316]	; (801042c <Load_Dat+0x148>)
 80102f0:	f107 0314 	add.w	r3, r7, #20
 80102f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80102f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80102fa:	2300      	movs	r3, #0
 80102fc:	847b      	strh	r3, [r7, #34]	; 0x22
 80102fe:	f107 0214 	add.w	r2, r7, #20
 8010302:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010306:	4611      	mov	r1, r2
 8010308:	4618      	mov	r0, r3
 801030a:	f7ff fc33 	bl	800fb74 <Make_Filename>
 801030e:	f107 0308 	add.w	r3, r7, #8
 8010312:	f107 020c 	add.w	r2, r7, #12
 8010316:	f107 0114 	add.w	r1, r7, #20
 801031a:	4845      	ldr	r0, [pc, #276]	; (8010430 <Load_Dat+0x14c>)
 801031c:	f7fe fec6 	bl	800f0ac <OpenFileRd>
 8010320:	4603      	mov	r3, r0
 8010322:	847b      	strh	r3, [r7, #34]	; 0x22
 8010324:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010328:	2b00      	cmp	r3, #0
 801032a:	d002      	beq.n	8010332 <Load_Dat+0x4e>
 801032c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801032e:	b2db      	uxtb	r3, r3
 8010330:	e077      	b.n	8010422 <Load_Dat+0x13e>
 8010332:	f107 030c 	add.w	r3, r7, #12
 8010336:	4619      	mov	r1, r3
 8010338:	483d      	ldr	r0, [pc, #244]	; (8010430 <Load_Dat+0x14c>)
 801033a:	f7ff f8ef 	bl	800f51c <ReadFileSec>
 801033e:	4603      	mov	r3, r0
 8010340:	2b00      	cmp	r3, #0
 8010342:	d001      	beq.n	8010348 <Load_Dat+0x64>
 8010344:	2303      	movs	r3, #3
 8010346:	e06c      	b.n	8010422 <Load_Dat+0x13e>
 8010348:	f44f 729b 	mov.w	r2, #310	; 0x136
 801034c:	4938      	ldr	r1, [pc, #224]	; (8010430 <Load_Dat+0x14c>)
 801034e:	4839      	ldr	r0, [pc, #228]	; (8010434 <Load_Dat+0x150>)
 8010350:	f012 fc66 	bl	8022c20 <memcpy>
 8010354:	4b36      	ldr	r3, [pc, #216]	; (8010430 <Load_Dat+0x14c>)
 8010356:	78db      	ldrb	r3, [r3, #3]
 8010358:	b21a      	sxth	r2, r3
 801035a:	4b37      	ldr	r3, [pc, #220]	; (8010438 <Load_Dat+0x154>)
 801035c:	879a      	strh	r2, [r3, #60]	; 0x3c
 801035e:	4b34      	ldr	r3, [pc, #208]	; (8010430 <Load_Dat+0x14c>)
 8010360:	791b      	ldrb	r3, [r3, #4]
 8010362:	b21a      	sxth	r2, r3
 8010364:	4b34      	ldr	r3, [pc, #208]	; (8010438 <Load_Dat+0x154>)
 8010366:	809a      	strh	r2, [r3, #4]
 8010368:	4b31      	ldr	r3, [pc, #196]	; (8010430 <Load_Dat+0x14c>)
 801036a:	795b      	ldrb	r3, [r3, #5]
 801036c:	b21a      	sxth	r2, r3
 801036e:	4b32      	ldr	r3, [pc, #200]	; (8010438 <Load_Dat+0x154>)
 8010370:	819a      	strh	r2, [r3, #12]
 8010372:	4b2f      	ldr	r3, [pc, #188]	; (8010430 <Load_Dat+0x14c>)
 8010374:	799b      	ldrb	r3, [r3, #6]
 8010376:	b21a      	sxth	r2, r3
 8010378:	4b2f      	ldr	r3, [pc, #188]	; (8010438 <Load_Dat+0x154>)
 801037a:	829a      	strh	r2, [r3, #20]
 801037c:	4b2c      	ldr	r3, [pc, #176]	; (8010430 <Load_Dat+0x14c>)
 801037e:	79db      	ldrb	r3, [r3, #7]
 8010380:	b21a      	sxth	r2, r3
 8010382:	4b2d      	ldr	r3, [pc, #180]	; (8010438 <Load_Dat+0x154>)
 8010384:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8010388:	2300      	movs	r3, #0
 801038a:	627b      	str	r3, [r7, #36]	; 0x24
 801038c:	e010      	b.n	80103b0 <Load_Dat+0xcc>
 801038e:	4a2a      	ldr	r2, [pc, #168]	; (8010438 <Load_Dat+0x154>)
 8010390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010392:	00db      	lsls	r3, r3, #3
 8010394:	4413      	add	r3, r2
 8010396:	799b      	ldrb	r3, [r3, #6]
 8010398:	f043 0320 	orr.w	r3, r3, #32
 801039c:	b2d9      	uxtb	r1, r3
 801039e:	4a26      	ldr	r2, [pc, #152]	; (8010438 <Load_Dat+0x154>)
 80103a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103a2:	00db      	lsls	r3, r3, #3
 80103a4:	4413      	add	r3, r2
 80103a6:	460a      	mov	r2, r1
 80103a8:	719a      	strb	r2, [r3, #6]
 80103aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ac:	3301      	adds	r3, #1
 80103ae:	627b      	str	r3, [r7, #36]	; 0x24
 80103b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103b2:	2b03      	cmp	r3, #3
 80103b4:	ddeb      	ble.n	801038e <Load_Dat+0xaa>
 80103b6:	4b20      	ldr	r3, [pc, #128]	; (8010438 <Load_Dat+0x154>)
 80103b8:	f893 30d6 	ldrb.w	r3, [r3, #214]	; 0xd6
 80103bc:	f043 0320 	orr.w	r3, r3, #32
 80103c0:	b2da      	uxtb	r2, r3
 80103c2:	4b1d      	ldr	r3, [pc, #116]	; (8010438 <Load_Dat+0x154>)
 80103c4:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
 80103c8:	4b1b      	ldr	r3, [pc, #108]	; (8010438 <Load_Dat+0x154>)
 80103ca:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 80103ce:	f043 0320 	orr.w	r3, r3, #32
 80103d2:	b2da      	uxtb	r2, r3
 80103d4:	4b18      	ldr	r3, [pc, #96]	; (8010438 <Load_Dat+0x154>)
 80103d6:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
 80103da:	4b17      	ldr	r3, [pc, #92]	; (8010438 <Load_Dat+0x154>)
 80103dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80103e0:	f043 0320 	orr.w	r3, r3, #32
 80103e4:	b2da      	uxtb	r2, r3
 80103e6:	4b14      	ldr	r3, [pc, #80]	; (8010438 <Load_Dat+0x154>)
 80103e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80103ec:	4b12      	ldr	r3, [pc, #72]	; (8010438 <Load_Dat+0x154>)
 80103ee:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80103f2:	f043 0320 	orr.w	r3, r3, #32
 80103f6:	b2da      	uxtb	r2, r3
 80103f8:	4b0f      	ldr	r3, [pc, #60]	; (8010438 <Load_Dat+0x154>)
 80103fa:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 80103fe:	f002 ffab 	bl	8013358 <Update_Detail>
 8010402:	4b0d      	ldr	r3, [pc, #52]	; (8010438 <Load_Dat+0x154>)
 8010404:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	; 0x114
 8010408:	2b62      	cmp	r3, #98	; 0x62
 801040a:	dc09      	bgt.n	8010420 <Load_Dat+0x13c>
 801040c:	4b0a      	ldr	r3, [pc, #40]	; (8010438 <Load_Dat+0x154>)
 801040e:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	; 0x114
 8010412:	b29b      	uxth	r3, r3
 8010414:	3301      	adds	r3, #1
 8010416:	b29b      	uxth	r3, r3
 8010418:	b21a      	sxth	r2, r3
 801041a:	4b07      	ldr	r3, [pc, #28]	; (8010438 <Load_Dat+0x154>)
 801041c:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
 8010420:	2300      	movs	r3, #0
 8010422:	4618      	mov	r0, r3
 8010424:	3728      	adds	r7, #40	; 0x28
 8010426:	46bd      	mov	sp, r7
 8010428:	bd80      	pop	{r7, pc}
 801042a:	bf00      	nop
 801042c:	08000208 	.word	0x08000208
 8010430:	200017d8 	.word	0x200017d8
 8010434:	20000008 	.word	0x20000008
 8010438:	20000298 	.word	0x20000298

0801043c <Save_Bmp>:
 801043c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801043e:	b08f      	sub	sp, #60	; 0x3c
 8010440:	af00      	add	r7, sp, #0
 8010442:	4603      	mov	r3, r0
 8010444:	80fb      	strh	r3, [r7, #6]
 8010446:	4aaa      	ldr	r2, [pc, #680]	; (80106f0 <Save_Bmp+0x2b4>)
 8010448:	f107 0314 	add.w	r3, r7, #20
 801044c:	ca07      	ldmia	r2, {r0, r1, r2}
 801044e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010452:	2304      	movs	r3, #4
 8010454:	62bb      	str	r3, [r7, #40]	; 0x28
 8010456:	2336      	movs	r3, #54	; 0x36
 8010458:	867b      	strh	r3, [r7, #50]	; 0x32
 801045a:	2300      	movs	r3, #0
 801045c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801045e:	2300      	movs	r3, #0
 8010460:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8010462:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010466:	627b      	str	r3, [r7, #36]	; 0x24
 8010468:	4ba2      	ldr	r3, [pc, #648]	; (80106f4 <Save_Bmp+0x2b8>)
 801046a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801046e:	2b05      	cmp	r3, #5
 8010470:	d105      	bne.n	801047e <Save_Bmp+0x42>
 8010472:	f7fe f9c5 	bl	800e800 <Close_Pop>
 8010476:	49a0      	ldr	r1, [pc, #640]	; (80106f8 <Save_Bmp+0x2bc>)
 8010478:	48a0      	ldr	r0, [pc, #640]	; (80106fc <Save_Bmp+0x2c0>)
 801047a:	f7fd f9c1 	bl	800d800 <DrawWindow>
 801047e:	f107 0214 	add.w	r2, r7, #20
 8010482:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010486:	4611      	mov	r1, r2
 8010488:	4618      	mov	r0, r3
 801048a:	f7ff fb73 	bl	800fb74 <Make_Filename>
 801048e:	f107 0308 	add.w	r3, r7, #8
 8010492:	f107 020c 	add.w	r2, r7, #12
 8010496:	f107 0114 	add.w	r1, r7, #20
 801049a:	4899      	ldr	r0, [pc, #612]	; (8010700 <Save_Bmp+0x2c4>)
 801049c:	f7ff f8d0 	bl	800f640 <OpenFileWr>
 80104a0:	4603      	mov	r3, r0
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d002      	beq.n	80104ac <Save_Bmp+0x70>
 80104a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104a8:	b2db      	uxtb	r3, r3
 80104aa:	e11c      	b.n	80106e6 <Save_Bmp+0x2aa>
 80104ac:	4b94      	ldr	r3, [pc, #592]	; (8010700 <Save_Bmp+0x2c4>)
 80104ae:	4a95      	ldr	r2, [pc, #596]	; (8010704 <Save_Bmp+0x2c8>)
 80104b0:	4614      	mov	r4, r2
 80104b2:	469c      	mov	ip, r3
 80104b4:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80104b8:	4665      	mov	r5, ip
 80104ba:	4626      	mov	r6, r4
 80104bc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80104be:	6028      	str	r0, [r5, #0]
 80104c0:	6069      	str	r1, [r5, #4]
 80104c2:	60aa      	str	r2, [r5, #8]
 80104c4:	60eb      	str	r3, [r5, #12]
 80104c6:	3410      	adds	r4, #16
 80104c8:	f10c 0c10 	add.w	ip, ip, #16
 80104cc:	4574      	cmp	r4, lr
 80104ce:	d1f3      	bne.n	80104b8 <Save_Bmp+0x7c>
 80104d0:	4663      	mov	r3, ip
 80104d2:	4622      	mov	r2, r4
 80104d4:	6810      	ldr	r0, [r2, #0]
 80104d6:	6018      	str	r0, [r3, #0]
 80104d8:	8892      	ldrh	r2, [r2, #4]
 80104da:	809a      	strh	r2, [r3, #4]
 80104dc:	2336      	movs	r3, #54	; 0x36
 80104de:	867b      	strh	r3, [r7, #50]	; 0x32
 80104e0:	2300      	movs	r3, #0
 80104e2:	863b      	strh	r3, [r7, #48]	; 0x30
 80104e4:	e042      	b.n	801056c <Save_Bmp+0x130>
 80104e6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80104ea:	4a87      	ldr	r2, [pc, #540]	; (8010708 <Save_Bmp+0x2cc>)
 80104ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80104f0:	121b      	asrs	r3, r3, #8
 80104f2:	b2da      	uxtb	r2, r3
 80104f4:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80104f8:	0099      	lsls	r1, r3, #2
 80104fa:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80104fe:	440b      	add	r3, r1
 8010500:	f022 0207 	bic.w	r2, r2, #7
 8010504:	b2d1      	uxtb	r1, r2
 8010506:	4a7e      	ldr	r2, [pc, #504]	; (8010700 <Save_Bmp+0x2c4>)
 8010508:	54d1      	strb	r1, [r2, r3]
 801050a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801050e:	4a7e      	ldr	r2, [pc, #504]	; (8010708 <Save_Bmp+0x2cc>)
 8010510:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010514:	10db      	asrs	r3, r3, #3
 8010516:	b2da      	uxtb	r2, r3
 8010518:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801051c:	0099      	lsls	r1, r3, #2
 801051e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8010522:	440b      	add	r3, r1
 8010524:	3301      	adds	r3, #1
 8010526:	f022 0203 	bic.w	r2, r2, #3
 801052a:	b2d1      	uxtb	r1, r2
 801052c:	4a74      	ldr	r2, [pc, #464]	; (8010700 <Save_Bmp+0x2c4>)
 801052e:	54d1      	strb	r1, [r2, r3]
 8010530:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010534:	4a74      	ldr	r2, [pc, #464]	; (8010708 <Save_Bmp+0x2cc>)
 8010536:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801053a:	00d9      	lsls	r1, r3, #3
 801053c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010540:	009a      	lsls	r2, r3, #2
 8010542:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8010546:	4413      	add	r3, r2
 8010548:	3302      	adds	r3, #2
 801054a:	b2c9      	uxtb	r1, r1
 801054c:	4a6c      	ldr	r2, [pc, #432]	; (8010700 <Save_Bmp+0x2c4>)
 801054e:	54d1      	strb	r1, [r2, r3]
 8010550:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010554:	009a      	lsls	r2, r3, #2
 8010556:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801055a:	4413      	add	r3, r2
 801055c:	3303      	adds	r3, #3
 801055e:	4a68      	ldr	r2, [pc, #416]	; (8010700 <Save_Bmp+0x2c4>)
 8010560:	2100      	movs	r1, #0
 8010562:	54d1      	strb	r1, [r2, r3]
 8010564:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010566:	3301      	adds	r3, #1
 8010568:	b29b      	uxth	r3, r3
 801056a:	863b      	strh	r3, [r7, #48]	; 0x30
 801056c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010570:	2b0f      	cmp	r3, #15
 8010572:	ddb8      	ble.n	80104e6 <Save_Bmp+0xaa>
 8010574:	2376      	movs	r3, #118	; 0x76
 8010576:	867b      	strh	r3, [r7, #50]	; 0x32
 8010578:	2300      	movs	r3, #0
 801057a:	86bb      	strh	r3, [r7, #52]	; 0x34
 801057c:	e079      	b.n	8010672 <Save_Bmp+0x236>
 801057e:	2300      	movs	r3, #0
 8010580:	86fb      	strh	r3, [r7, #54]	; 0x36
 8010582:	e06b      	b.n	801065c <Save_Bmp+0x220>
 8010584:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8010588:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801058c:	4611      	mov	r1, r2
 801058e:	4618      	mov	r0, r3
 8010590:	f001 fe62 	bl	8012258 <LCD_Set_Posi>
 8010594:	f001 fed6 	bl	8012344 <LCD_Get_Pixel>
 8010598:	4603      	mov	r3, r0
 801059a:	847b      	strh	r3, [r7, #34]	; 0x22
 801059c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801059e:	3301      	adds	r3, #1
 80105a0:	b29b      	uxth	r3, r3
 80105a2:	b21b      	sxth	r3, r3
 80105a4:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 80105a8:	4611      	mov	r1, r2
 80105aa:	4618      	mov	r0, r3
 80105ac:	f001 fe54 	bl	8012258 <LCD_Set_Posi>
 80105b0:	f001 fec8 	bl	8012344 <LCD_Get_Pixel>
 80105b4:	4603      	mov	r3, r0
 80105b6:	843b      	strh	r3, [r7, #32]
 80105b8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80105bc:	4618      	mov	r0, r3
 80105be:	f7ff f8a1 	bl	800f704 <Color_Num>
 80105c2:	4603      	mov	r3, r0
 80105c4:	011b      	lsls	r3, r3, #4
 80105c6:	b2dc      	uxtb	r4, r3
 80105c8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80105cc:	4618      	mov	r0, r3
 80105ce:	f7ff f899 	bl	800f704 <Color_Num>
 80105d2:	4603      	mov	r3, r0
 80105d4:	461a      	mov	r2, r3
 80105d6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80105da:	4422      	add	r2, r4
 80105dc:	b2d1      	uxtb	r1, r2
 80105de:	4a48      	ldr	r2, [pc, #288]	; (8010700 <Save_Bmp+0x2c4>)
 80105e0:	54d1      	strb	r1, [r2, r3]
 80105e2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80105e6:	b29b      	uxth	r3, r3
 80105e8:	3301      	adds	r3, #1
 80105ea:	b29b      	uxth	r3, r3
 80105ec:	867b      	strh	r3, [r7, #50]	; 0x32
 80105ee:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80105f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105f4:	429a      	cmp	r2, r3
 80105f6:	dc2d      	bgt.n	8010654 <Save_Bmp+0x218>
 80105f8:	2300      	movs	r3, #0
 80105fa:	867b      	strh	r3, [r7, #50]	; 0x32
 80105fc:	f107 030c 	add.w	r3, r7, #12
 8010600:	4619      	mov	r1, r3
 8010602:	483f      	ldr	r0, [pc, #252]	; (8010700 <Save_Bmp+0x2c4>)
 8010604:	f7fe ff44 	bl	800f490 <ProgFileSec>
 8010608:	4603      	mov	r3, r0
 801060a:	2b00      	cmp	r3, #0
 801060c:	d001      	beq.n	8010612 <Save_Bmp+0x1d6>
 801060e:	2303      	movs	r3, #3
 8010610:	e069      	b.n	80106e6 <Save_Bmp+0x2aa>
 8010612:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8010616:	2b00      	cmp	r3, #0
 8010618:	d110      	bne.n	801063c <Save_Bmp+0x200>
 801061a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801061e:	b29a      	uxth	r2, r3
 8010620:	3201      	adds	r2, #1
 8010622:	b292      	uxth	r2, r2
 8010624:	85fa      	strh	r2, [r7, #46]	; 0x2e
 8010626:	105b      	asrs	r3, r3, #1
 8010628:	b21b      	sxth	r3, r3
 801062a:	b2db      	uxtb	r3, r3
 801062c:	f003 0303 	and.w	r3, r3, #3
 8010630:	b2db      	uxtb	r3, r3
 8010632:	461a      	mov	r2, r3
 8010634:	2102      	movs	r1, #2
 8010636:	20a8      	movs	r0, #168	; 0xa8
 8010638:	f7ff f8e4 	bl	800f804 <PrintClk>
 801063c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8010640:	b29b      	uxth	r3, r3
 8010642:	3301      	adds	r3, #1
 8010644:	b29b      	uxth	r3, r3
 8010646:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8010648:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 801064c:	2b01      	cmp	r3, #1
 801064e:	dd01      	ble.n	8010654 <Save_Bmp+0x218>
 8010650:	2300      	movs	r3, #0
 8010652:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8010654:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010656:	3302      	adds	r3, #2
 8010658:	b29b      	uxth	r3, r3
 801065a:	86fb      	strh	r3, [r7, #54]	; 0x36
 801065c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8010660:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8010664:	db8e      	blt.n	8010584 <Save_Bmp+0x148>
 8010666:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801066a:	b29b      	uxth	r3, r3
 801066c:	3301      	adds	r3, #1
 801066e:	b29b      	uxth	r3, r3
 8010670:	86bb      	strh	r3, [r7, #52]	; 0x34
 8010672:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8010676:	2bef      	cmp	r3, #239	; 0xef
 8010678:	dd81      	ble.n	801057e <Save_Bmp+0x142>
 801067a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801067e:	2b00      	cmp	r3, #0
 8010680:	d00c      	beq.n	801069c <Save_Bmp+0x260>
 8010682:	f107 030c 	add.w	r3, r7, #12
 8010686:	4619      	mov	r1, r3
 8010688:	481d      	ldr	r0, [pc, #116]	; (8010700 <Save_Bmp+0x2c4>)
 801068a:	f7fe ff01 	bl	800f490 <ProgFileSec>
 801068e:	4603      	mov	r3, r0
 8010690:	2b00      	cmp	r3, #0
 8010692:	d003      	beq.n	801069c <Save_Bmp+0x260>
 8010694:	f7fe f8ca 	bl	800e82c <List_Pop>
 8010698:	2303      	movs	r3, #3
 801069a:	e024      	b.n	80106e6 <Save_Bmp+0x2aa>
 801069c:	f107 0308 	add.w	r3, r7, #8
 80106a0:	f107 020c 	add.w	r2, r7, #12
 80106a4:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 80106a8:	4815      	ldr	r0, [pc, #84]	; (8010700 <Save_Bmp+0x2c4>)
 80106aa:	f7fe ff65 	bl	800f578 <CloseFile>
 80106ae:	4603      	mov	r3, r0
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d001      	beq.n	80106b8 <Save_Bmp+0x27c>
 80106b4:	2303      	movs	r3, #3
 80106b6:	e016      	b.n	80106e6 <Save_Bmp+0x2aa>
 80106b8:	4b0e      	ldr	r3, [pc, #56]	; (80106f4 <Save_Bmp+0x2b8>)
 80106ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80106be:	2b05      	cmp	r3, #5
 80106c0:	d101      	bne.n	80106c6 <Save_Bmp+0x28a>
 80106c2:	f7fe f8b3 	bl	800e82c <List_Pop>
 80106c6:	4b11      	ldr	r3, [pc, #68]	; (801070c <Save_Bmp+0x2d0>)
 80106c8:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 80106cc:	2b62      	cmp	r3, #98	; 0x62
 80106ce:	dc09      	bgt.n	80106e4 <Save_Bmp+0x2a8>
 80106d0:	4b0e      	ldr	r3, [pc, #56]	; (801070c <Save_Bmp+0x2d0>)
 80106d2:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 80106d6:	b29b      	uxth	r3, r3
 80106d8:	3301      	adds	r3, #1
 80106da:	b29b      	uxth	r3, r3
 80106dc:	b21a      	sxth	r2, r3
 80106de:	4b0b      	ldr	r3, [pc, #44]	; (801070c <Save_Bmp+0x2d0>)
 80106e0:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 80106e4:	2300      	movs	r3, #0
 80106e6:	4618      	mov	r0, r3
 80106e8:	373c      	adds	r7, #60	; 0x3c
 80106ea:	46bd      	mov	sp, r7
 80106ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106ee:	bf00      	nop
 80106f0:	080001fc 	.word	0x080001fc
 80106f4:	2000079e 	.word	0x2000079e
 80106f8:	20000140 	.word	0x20000140
 80106fc:	20000c08 	.word	0x20000c08
 8010700:	200017d8 	.word	0x200017d8
 8010704:	08001b84 	.word	0x08001b84
 8010708:	08001b64 	.word	0x08001b64
 801070c:	20000298 	.word	0x20000298

08010710 <Save_Csv>:
 8010710:	b580      	push	{r7, lr}
 8010712:	b094      	sub	sp, #80	; 0x50
 8010714:	af00      	add	r7, sp, #0
 8010716:	4603      	mov	r3, r0
 8010718:	80fb      	strh	r3, [r7, #6]
 801071a:	4baf      	ldr	r3, [pc, #700]	; (80109d8 <Save_Csv+0x2c8>)
 801071c:	681a      	ldr	r2, [r3, #0]
 801071e:	4baf      	ldr	r3, [pc, #700]	; (80109dc <Save_Csv+0x2cc>)
 8010720:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010724:	4619      	mov	r1, r3
 8010726:	4bae      	ldr	r3, [pc, #696]	; (80109e0 <Save_Csv+0x2d0>)
 8010728:	f9b3 3000 	ldrsh.w	r3, [r3]
 801072c:	2b00      	cmp	r3, #0
 801072e:	bf14      	ite	ne
 8010730:	2301      	movne	r3, #1
 8010732:	2300      	moveq	r3, #0
 8010734:	b2db      	uxtb	r3, r3
 8010736:	440b      	add	r3, r1
 8010738:	005b      	lsls	r3, r3, #1
 801073a:	4413      	add	r3, r2
 801073c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010740:	009b      	lsls	r3, r3, #2
 8010742:	4aa8      	ldr	r2, [pc, #672]	; (80109e4 <Save_Csv+0x2d4>)
 8010744:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010748:	4611      	mov	r1, r2
 801074a:	4aa7      	ldr	r2, [pc, #668]	; (80109e8 <Save_Csv+0x2d8>)
 801074c:	5c52      	ldrb	r2, [r2, r1]
 801074e:	fb93 f3f2 	sdiv	r3, r3, r2
 8010752:	63bb      	str	r3, [r7, #56]	; 0x38
 8010754:	4aa5      	ldr	r2, [pc, #660]	; (80109ec <Save_Csv+0x2dc>)
 8010756:	f107 031c 	add.w	r3, r7, #28
 801075a:	ca07      	ldmia	r2, {r0, r1, r2}
 801075c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010760:	2300      	movs	r3, #0
 8010762:	64bb      	str	r3, [r7, #72]	; 0x48
 8010764:	2300      	movs	r3, #0
 8010766:	647b      	str	r3, [r7, #68]	; 0x44
 8010768:	2304      	movs	r3, #4
 801076a:	637b      	str	r3, [r7, #52]	; 0x34
 801076c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010770:	633b      	str	r3, [r7, #48]	; 0x30
 8010772:	f107 021c 	add.w	r2, r7, #28
 8010776:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801077a:	4611      	mov	r1, r2
 801077c:	4618      	mov	r0, r3
 801077e:	f7ff f9f9 	bl	800fb74 <Make_Filename>
 8010782:	f107 0310 	add.w	r3, r7, #16
 8010786:	f107 0214 	add.w	r2, r7, #20
 801078a:	f107 011c 	add.w	r1, r7, #28
 801078e:	4898      	ldr	r0, [pc, #608]	; (80109f0 <Save_Csv+0x2e0>)
 8010790:	f7fe ff56 	bl	800f640 <OpenFileWr>
 8010794:	4603      	mov	r3, r0
 8010796:	2b00      	cmp	r3, #0
 8010798:	d002      	beq.n	80107a0 <Save_Csv+0x90>
 801079a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801079c:	b2db      	uxtb	r3, r3
 801079e:	e1d3      	b.n	8010b48 <Save_Csv+0x438>
 80107a0:	4b94      	ldr	r3, [pc, #592]	; (80109f4 <Save_Csv+0x2e4>)
 80107a2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80107a6:	00db      	lsls	r3, r3, #3
 80107a8:	4a93      	ldr	r2, [pc, #588]	; (80109f8 <Save_Csv+0x2e8>)
 80107aa:	4413      	add	r3, r2
 80107ac:	2205      	movs	r2, #5
 80107ae:	4619      	mov	r1, r3
 80107b0:	488f      	ldr	r0, [pc, #572]	; (80109f0 <Save_Csv+0x2e0>)
 80107b2:	f012 fa35 	bl	8022c20 <memcpy>
 80107b6:	2203      	movs	r2, #3
 80107b8:	4990      	ldr	r1, [pc, #576]	; (80109fc <Save_Csv+0x2ec>)
 80107ba:	4891      	ldr	r0, [pc, #580]	; (8010a00 <Save_Csv+0x2f0>)
 80107bc:	f012 fa30 	bl	8022c20 <memcpy>
 80107c0:	4b90      	ldr	r3, [pc, #576]	; (8010a04 <Save_Csv+0x2f4>)
 80107c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80107c4:	2300      	movs	r3, #0
 80107c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80107c8:	4b8a      	ldr	r3, [pc, #552]	; (80109f4 <Save_Csv+0x2e4>)
 80107ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80107ce:	461a      	mov	r2, r3
 80107d0:	4613      	mov	r3, r2
 80107d2:	005b      	lsls	r3, r3, #1
 80107d4:	4413      	add	r3, r2
 80107d6:	005b      	lsls	r3, r3, #1
 80107d8:	4a8b      	ldr	r2, [pc, #556]	; (8010a08 <Save_Csv+0x2f8>)
 80107da:	4413      	add	r3, r2
 80107dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80107de:	e00a      	b.n	80107f6 <Save_Csv+0xe6>
 80107e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107e2:	1c5a      	adds	r2, r3, #1
 80107e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80107e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80107e8:	1c51      	adds	r1, r2, #1
 80107ea:	64f9      	str	r1, [r7, #76]	; 0x4c
 80107ec:	4611      	mov	r1, r2
 80107ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107f0:	440a      	add	r2, r1
 80107f2:	781b      	ldrb	r3, [r3, #0]
 80107f4:	7013      	strb	r3, [r2, #0]
 80107f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107f8:	781b      	ldrb	r3, [r3, #0]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d1f0      	bne.n	80107e0 <Save_Csv+0xd0>
 80107fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010800:	1c5a      	adds	r2, r3, #1
 8010802:	64fa      	str	r2, [r7, #76]	; 0x4c
 8010804:	461a      	mov	r2, r3
 8010806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010808:	4413      	add	r3, r2
 801080a:	222a      	movs	r2, #42	; 0x2a
 801080c:	701a      	strb	r2, [r3, #0]
 801080e:	4b79      	ldr	r3, [pc, #484]	; (80109f4 <Save_Csv+0x2e4>)
 8010810:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8010814:	461a      	mov	r2, r3
 8010816:	4613      	mov	r3, r2
 8010818:	005b      	lsls	r3, r3, #1
 801081a:	4413      	add	r3, r2
 801081c:	005b      	lsls	r3, r3, #1
 801081e:	4a7b      	ldr	r2, [pc, #492]	; (8010a0c <Save_Csv+0x2fc>)
 8010820:	4413      	add	r3, r2
 8010822:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010824:	e00a      	b.n	801083c <Save_Csv+0x12c>
 8010826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010828:	1c5a      	adds	r2, r3, #1
 801082a:	63fa      	str	r2, [r7, #60]	; 0x3c
 801082c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801082e:	1c51      	adds	r1, r2, #1
 8010830:	64f9      	str	r1, [r7, #76]	; 0x4c
 8010832:	4611      	mov	r1, r2
 8010834:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010836:	440a      	add	r2, r1
 8010838:	781b      	ldrb	r3, [r3, #0]
 801083a:	7013      	strb	r3, [r2, #0]
 801083c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801083e:	781b      	ldrb	r3, [r3, #0]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d1f0      	bne.n	8010826 <Save_Csv+0x116>
 8010844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010846:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010848:	4413      	add	r3, r2
 801084a:	222c      	movs	r2, #44	; 0x2c
 801084c:	701a      	strb	r2, [r3, #0]
 801084e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010850:	3301      	adds	r3, #1
 8010852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010854:	4413      	add	r3, r2
 8010856:	2200      	movs	r2, #0
 8010858:	701a      	strb	r2, [r3, #0]
 801085a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801085c:	b29b      	uxth	r3, r3
 801085e:	3301      	adds	r3, #1
 8010860:	b29b      	uxth	r3, r3
 8010862:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010866:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 801086a:	3308      	adds	r3, #8
 801086c:	64bb      	str	r3, [r7, #72]	; 0x48
 801086e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010870:	4a5f      	ldr	r2, [pc, #380]	; (80109f0 <Save_Csv+0x2e0>)
 8010872:	4413      	add	r3, r2
 8010874:	2202      	movs	r2, #2
 8010876:	4966      	ldr	r1, [pc, #408]	; (8010a10 <Save_Csv+0x300>)
 8010878:	4618      	mov	r0, r3
 801087a:	f012 f9d1 	bl	8022c20 <memcpy>
 801087e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010880:	3302      	adds	r3, #2
 8010882:	64bb      	str	r3, [r7, #72]	; 0x48
 8010884:	2300      	movs	r3, #0
 8010886:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010888:	e0fe      	b.n	8010a88 <Save_Csv+0x378>
 801088a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801088c:	3302      	adds	r3, #2
 801088e:	4a61      	ldr	r2, [pc, #388]	; (8010a14 <Save_Csv+0x304>)
 8010890:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8010894:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8010898:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801089a:	fb02 f303 	mul.w	r3, r2, r3
 801089e:	131b      	asrs	r3, r3, #12
 80108a0:	b29b      	uxth	r3, r3
 80108a2:	3364      	adds	r3, #100	; 0x64
 80108a4:	b29b      	uxth	r3, r3
 80108a6:	857b      	strh	r3, [r7, #42]	; 0x2a
 80108a8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	dd0a      	ble.n	80108c6 <Save_Csv+0x1b6>
 80108b0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80108b4:	2bc8      	cmp	r3, #200	; 0xc8
 80108b6:	dd02      	ble.n	80108be <Save_Csv+0x1ae>
 80108b8:	23c7      	movs	r3, #199	; 0xc7
 80108ba:	723b      	strb	r3, [r7, #8]
 80108bc:	e005      	b.n	80108ca <Save_Csv+0x1ba>
 80108be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80108c0:	b2db      	uxtb	r3, r3
 80108c2:	723b      	strb	r3, [r7, #8]
 80108c4:	e001      	b.n	80108ca <Save_Csv+0x1ba>
 80108c6:	2300      	movs	r3, #0
 80108c8:	723b      	strb	r3, [r7, #8]
 80108ca:	7a3a      	ldrb	r2, [r7, #8]
 80108cc:	f107 030c 	add.w	r3, r7, #12
 80108d0:	4611      	mov	r1, r2
 80108d2:	4618      	mov	r0, r3
 80108d4:	f001 f898 	bl	8011a08 <u8ToDec3>
 80108d8:	2300      	movs	r3, #0
 80108da:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80108de:	e03a      	b.n	8010956 <Save_Csv+0x246>
 80108e0:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80108e4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80108e8:	4413      	add	r3, r2
 80108ea:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d036      	beq.n	8010960 <Save_Csv+0x250>
 80108f2:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 80108f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80108f8:	1c59      	adds	r1, r3, #1
 80108fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80108fc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8010900:	440a      	add	r2, r1
 8010902:	f812 1c44 	ldrb.w	r1, [r2, #-68]
 8010906:	4a3a      	ldr	r2, [pc, #232]	; (80109f0 <Save_Csv+0x2e0>)
 8010908:	54d1      	strb	r1, [r2, r3]
 801090a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801090c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801090e:	429a      	cmp	r2, r3
 8010910:	db1a      	blt.n	8010948 <Save_Csv+0x238>
 8010912:	f107 0314 	add.w	r3, r7, #20
 8010916:	4619      	mov	r1, r3
 8010918:	4835      	ldr	r0, [pc, #212]	; (80109f0 <Save_Csv+0x2e0>)
 801091a:	f7fe fdb9 	bl	800f490 <ProgFileSec>
 801091e:	4603      	mov	r3, r0
 8010920:	2b00      	cmp	r3, #0
 8010922:	d001      	beq.n	8010928 <Save_Csv+0x218>
 8010924:	2303      	movs	r3, #3
 8010926:	e10f      	b.n	8010b48 <Save_Csv+0x438>
 8010928:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801092a:	1c5a      	adds	r2, r3, #1
 801092c:	647a      	str	r2, [r7, #68]	; 0x44
 801092e:	105b      	asrs	r3, r3, #1
 8010930:	b2db      	uxtb	r3, r3
 8010932:	f003 0303 	and.w	r3, r3, #3
 8010936:	b2db      	uxtb	r3, r3
 8010938:	461a      	mov	r2, r3
 801093a:	2102      	movs	r1, #2
 801093c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8010940:	f7fe ff60 	bl	800f804 <PrintClk>
 8010944:	2300      	movs	r3, #0
 8010946:	64bb      	str	r3, [r7, #72]	; 0x48
 8010948:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 801094c:	b29b      	uxth	r3, r3
 801094e:	3301      	adds	r3, #1
 8010950:	b29b      	uxth	r3, r3
 8010952:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010956:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 801095a:	2b02      	cmp	r3, #2
 801095c:	ddc0      	ble.n	80108e0 <Save_Csv+0x1d0>
 801095e:	e000      	b.n	8010962 <Save_Csv+0x252>
 8010960:	bf00      	nop
 8010962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010964:	1c5a      	adds	r2, r3, #1
 8010966:	64ba      	str	r2, [r7, #72]	; 0x48
 8010968:	4a21      	ldr	r2, [pc, #132]	; (80109f0 <Save_Csv+0x2e0>)
 801096a:	212c      	movs	r1, #44	; 0x2c
 801096c:	54d1      	strb	r1, [r2, r3]
 801096e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010972:	429a      	cmp	r2, r3
 8010974:	db1a      	blt.n	80109ac <Save_Csv+0x29c>
 8010976:	f107 0314 	add.w	r3, r7, #20
 801097a:	4619      	mov	r1, r3
 801097c:	481c      	ldr	r0, [pc, #112]	; (80109f0 <Save_Csv+0x2e0>)
 801097e:	f7fe fd87 	bl	800f490 <ProgFileSec>
 8010982:	4603      	mov	r3, r0
 8010984:	2b00      	cmp	r3, #0
 8010986:	d001      	beq.n	801098c <Save_Csv+0x27c>
 8010988:	2303      	movs	r3, #3
 801098a:	e0dd      	b.n	8010b48 <Save_Csv+0x438>
 801098c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801098e:	1c5a      	adds	r2, r3, #1
 8010990:	647a      	str	r2, [r7, #68]	; 0x44
 8010992:	105b      	asrs	r3, r3, #1
 8010994:	b2db      	uxtb	r3, r3
 8010996:	f003 0303 	and.w	r3, r3, #3
 801099a:	b2db      	uxtb	r3, r3
 801099c:	461a      	mov	r2, r3
 801099e:	2102      	movs	r1, #2
 80109a0:	f44f 7084 	mov.w	r0, #264	; 0x108
 80109a4:	f7fe ff2e 	bl	800f804 <PrintClk>
 80109a8:	2300      	movs	r3, #0
 80109aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80109ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80109ae:	1c5a      	adds	r2, r3, #1
 80109b0:	64ba      	str	r2, [r7, #72]	; 0x48
 80109b2:	4a0f      	ldr	r2, [pc, #60]	; (80109f0 <Save_Csv+0x2e0>)
 80109b4:	210d      	movs	r1, #13
 80109b6:	54d1      	strb	r1, [r2, r3]
 80109b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80109ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109bc:	429a      	cmp	r2, r3
 80109be:	db3b      	blt.n	8010a38 <Save_Csv+0x328>
 80109c0:	f107 0314 	add.w	r3, r7, #20
 80109c4:	4619      	mov	r1, r3
 80109c6:	480a      	ldr	r0, [pc, #40]	; (80109f0 <Save_Csv+0x2e0>)
 80109c8:	f7fe fd62 	bl	800f490 <ProgFileSec>
 80109cc:	4603      	mov	r3, r0
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d022      	beq.n	8010a18 <Save_Csv+0x308>
 80109d2:	2303      	movs	r3, #3
 80109d4:	e0b8      	b.n	8010b48 <Save_Csv+0x438>
 80109d6:	bf00      	nop
 80109d8:	2000057c 	.word	0x2000057c
 80109dc:	20006886 	.word	0x20006886
 80109e0:	20002862 	.word	0x20002862
 80109e4:	2000284a 	.word	0x2000284a
 80109e8:	20000560 	.word	0x20000560
 80109ec:	08000220 	.word	0x08000220
 80109f0:	200017d8 	.word	0x200017d8
 80109f4:	20000298 	.word	0x20000298
 80109f8:	200001d0 	.word	0x200001d0
 80109fc:	08000244 	.word	0x08000244
 8010a00:	200017dd 	.word	0x200017dd
 8010a04:	200017e0 	.word	0x200017e0
 8010a08:	08001da8 	.word	0x08001da8
 8010a0c:	08001cd4 	.word	0x08001cd4
 8010a10:	08000248 	.word	0x08000248
 8010a14:	20002870 	.word	0x20002870
 8010a18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a1a:	1c5a      	adds	r2, r3, #1
 8010a1c:	647a      	str	r2, [r7, #68]	; 0x44
 8010a1e:	105b      	asrs	r3, r3, #1
 8010a20:	b2db      	uxtb	r3, r3
 8010a22:	f003 0303 	and.w	r3, r3, #3
 8010a26:	b2db      	uxtb	r3, r3
 8010a28:	461a      	mov	r2, r3
 8010a2a:	2102      	movs	r1, #2
 8010a2c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8010a30:	f7fe fee8 	bl	800f804 <PrintClk>
 8010a34:	2300      	movs	r3, #0
 8010a36:	64bb      	str	r3, [r7, #72]	; 0x48
 8010a38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a3a:	1c5a      	adds	r2, r3, #1
 8010a3c:	64ba      	str	r2, [r7, #72]	; 0x48
 8010a3e:	4a44      	ldr	r2, [pc, #272]	; (8010b50 <Save_Csv+0x440>)
 8010a40:	210a      	movs	r1, #10
 8010a42:	54d1      	strb	r1, [r2, r3]
 8010a44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a48:	429a      	cmp	r2, r3
 8010a4a:	db1a      	blt.n	8010a82 <Save_Csv+0x372>
 8010a4c:	f107 0314 	add.w	r3, r7, #20
 8010a50:	4619      	mov	r1, r3
 8010a52:	483f      	ldr	r0, [pc, #252]	; (8010b50 <Save_Csv+0x440>)
 8010a54:	f7fe fd1c 	bl	800f490 <ProgFileSec>
 8010a58:	4603      	mov	r3, r0
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d001      	beq.n	8010a62 <Save_Csv+0x352>
 8010a5e:	2303      	movs	r3, #3
 8010a60:	e072      	b.n	8010b48 <Save_Csv+0x438>
 8010a62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a64:	1c5a      	adds	r2, r3, #1
 8010a66:	647a      	str	r2, [r7, #68]	; 0x44
 8010a68:	105b      	asrs	r3, r3, #1
 8010a6a:	b2db      	uxtb	r3, r3
 8010a6c:	f003 0303 	and.w	r3, r3, #3
 8010a70:	b2db      	uxtb	r3, r3
 8010a72:	461a      	mov	r2, r3
 8010a74:	2102      	movs	r1, #2
 8010a76:	f44f 7084 	mov.w	r0, #264	; 0x108
 8010a7a:	f7fe fec3 	bl	800f804 <PrintClk>
 8010a7e:	2300      	movs	r3, #0
 8010a80:	64bb      	str	r3, [r7, #72]	; 0x48
 8010a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a84:	3301      	adds	r3, #1
 8010a86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010a88:	4b32      	ldr	r3, [pc, #200]	; (8010b54 <Save_Csv+0x444>)
 8010a8a:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010a8e:	461a      	mov	r2, r3
 8010a90:	4b31      	ldr	r3, [pc, #196]	; (8010b58 <Save_Csv+0x448>)
 8010a92:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010a96:	461a      	mov	r2, r3
 8010a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a9a:	4293      	cmp	r3, r2
 8010a9c:	f6ff aef5 	blt.w	801088a <Save_Csv+0x17a>
 8010aa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d030      	beq.n	8010b08 <Save_Csv+0x3f8>
 8010aa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010aa8:	1c5a      	adds	r2, r3, #1
 8010aaa:	64ba      	str	r2, [r7, #72]	; 0x48
 8010aac:	4a28      	ldr	r2, [pc, #160]	; (8010b50 <Save_Csv+0x440>)
 8010aae:	210d      	movs	r1, #13
 8010ab0:	54d1      	strb	r1, [r2, r3]
 8010ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ab4:	1c5a      	adds	r2, r3, #1
 8010ab6:	64ba      	str	r2, [r7, #72]	; 0x48
 8010ab8:	4a25      	ldr	r2, [pc, #148]	; (8010b50 <Save_Csv+0x440>)
 8010aba:	210a      	movs	r1, #10
 8010abc:	54d1      	strb	r1, [r2, r3]
 8010abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ac0:	4a23      	ldr	r2, [pc, #140]	; (8010b50 <Save_Csv+0x440>)
 8010ac2:	1898      	adds	r0, r3, r2
 8010ac4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ac6:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8010aca:	461a      	mov	r2, r3
 8010acc:	2120      	movs	r1, #32
 8010ace:	f012 f8b5 	bl	8022c3c <memset>
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	64bb      	str	r3, [r7, #72]	; 0x48
 8010ad6:	f107 0314 	add.w	r3, r7, #20
 8010ada:	4619      	mov	r1, r3
 8010adc:	481c      	ldr	r0, [pc, #112]	; (8010b50 <Save_Csv+0x440>)
 8010ade:	f7fe fcd7 	bl	800f490 <ProgFileSec>
 8010ae2:	4603      	mov	r3, r0
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d001      	beq.n	8010aec <Save_Csv+0x3dc>
 8010ae8:	2303      	movs	r3, #3
 8010aea:	e02d      	b.n	8010b48 <Save_Csv+0x438>
 8010aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010aee:	1c5a      	adds	r2, r3, #1
 8010af0:	647a      	str	r2, [r7, #68]	; 0x44
 8010af2:	105b      	asrs	r3, r3, #1
 8010af4:	b2db      	uxtb	r3, r3
 8010af6:	f003 0303 	and.w	r3, r3, #3
 8010afa:	b2db      	uxtb	r3, r3
 8010afc:	461a      	mov	r2, r3
 8010afe:	2102      	movs	r1, #2
 8010b00:	f44f 7084 	mov.w	r0, #264	; 0x108
 8010b04:	f7fe fe7e 	bl	800f804 <PrintClk>
 8010b08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b0c:	fb02 f103 	mul.w	r1, r2, r3
 8010b10:	f107 0310 	add.w	r3, r7, #16
 8010b14:	f107 0214 	add.w	r2, r7, #20
 8010b18:	480d      	ldr	r0, [pc, #52]	; (8010b50 <Save_Csv+0x440>)
 8010b1a:	f7fe fd2d 	bl	800f578 <CloseFile>
 8010b1e:	4603      	mov	r3, r0
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d001      	beq.n	8010b28 <Save_Csv+0x418>
 8010b24:	2304      	movs	r3, #4
 8010b26:	e00f      	b.n	8010b48 <Save_Csv+0x438>
 8010b28:	4b0a      	ldr	r3, [pc, #40]	; (8010b54 <Save_Csv+0x444>)
 8010b2a:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
 8010b2e:	2b62      	cmp	r3, #98	; 0x62
 8010b30:	dc09      	bgt.n	8010b46 <Save_Csv+0x436>
 8010b32:	4b08      	ldr	r3, [pc, #32]	; (8010b54 <Save_Csv+0x444>)
 8010b34:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
 8010b38:	b29b      	uxth	r3, r3
 8010b3a:	3301      	adds	r3, #1
 8010b3c:	b29b      	uxth	r3, r3
 8010b3e:	b21a      	sxth	r2, r3
 8010b40:	4b04      	ldr	r3, [pc, #16]	; (8010b54 <Save_Csv+0x444>)
 8010b42:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 8010b46:	2300      	movs	r3, #0
 8010b48:	4618      	mov	r0, r3
 8010b4a:	3750      	adds	r7, #80	; 0x50
 8010b4c:	46bd      	mov	sp, r7
 8010b4e:	bd80      	pop	{r7, pc}
 8010b50:	200017d8 	.word	0x200017d8
 8010b54:	20000298 	.word	0x20000298
 8010b58:	08002270 	.word	0x08002270

08010b5c <Save_Svg>:
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b092      	sub	sp, #72	; 0x48
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	4603      	mov	r3, r0
 8010b64:	80fb      	strh	r3, [r7, #6]
 8010b66:	4abb      	ldr	r2, [pc, #748]	; (8010e54 <Save_Svg+0x2f8>)
 8010b68:	f107 031c 	add.w	r3, r7, #28
 8010b6c:	ca07      	ldmia	r2, {r0, r1, r2}
 8010b6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010b72:	2304      	movs	r3, #4
 8010b74:	63bb      	str	r3, [r7, #56]	; 0x38
 8010b76:	2300      	movs	r3, #0
 8010b78:	637b      	str	r3, [r7, #52]	; 0x34
 8010b7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010b7e:	867b      	strh	r3, [r7, #50]	; 0x32
 8010b80:	2300      	movs	r3, #0
 8010b82:	863b      	strh	r3, [r7, #48]	; 0x30
 8010b84:	4bb4      	ldr	r3, [pc, #720]	; (8010e58 <Save_Svg+0x2fc>)
 8010b86:	681a      	ldr	r2, [r3, #0]
 8010b88:	4bb4      	ldr	r3, [pc, #720]	; (8010e5c <Save_Svg+0x300>)
 8010b8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010b8e:	4619      	mov	r1, r3
 8010b90:	4bb3      	ldr	r3, [pc, #716]	; (8010e60 <Save_Svg+0x304>)
 8010b92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	bf14      	ite	ne
 8010b9a:	2301      	movne	r3, #1
 8010b9c:	2300      	moveq	r3, #0
 8010b9e:	b2db      	uxtb	r3, r3
 8010ba0:	440b      	add	r3, r1
 8010ba2:	005b      	lsls	r3, r3, #1
 8010ba4:	4413      	add	r3, r2
 8010ba6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010baa:	009b      	lsls	r3, r3, #2
 8010bac:	4aad      	ldr	r2, [pc, #692]	; (8010e64 <Save_Svg+0x308>)
 8010bae:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010bb2:	4611      	mov	r1, r2
 8010bb4:	4aac      	ldr	r2, [pc, #688]	; (8010e68 <Save_Svg+0x30c>)
 8010bb6:	5c52      	ldrb	r2, [r2, r1]
 8010bb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8010bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010bbe:	4bab      	ldr	r3, [pc, #684]	; (8010e6c <Save_Svg+0x310>)
 8010bc0:	2200      	movs	r2, #0
 8010bc2:	601a      	str	r2, [r3, #0]
 8010bc4:	4baa      	ldr	r3, [pc, #680]	; (8010e70 <Save_Svg+0x314>)
 8010bc6:	2200      	movs	r2, #0
 8010bc8:	801a      	strh	r2, [r3, #0]
 8010bca:	4baa      	ldr	r3, [pc, #680]	; (8010e74 <Save_Svg+0x318>)
 8010bcc:	2200      	movs	r2, #0
 8010bce:	801a      	strh	r2, [r3, #0]
 8010bd0:	4ba9      	ldr	r3, [pc, #676]	; (8010e78 <Save_Svg+0x31c>)
 8010bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010bd4:	f44f 729b 	mov.w	r2, #310	; 0x136
 8010bd8:	2100      	movs	r1, #0
 8010bda:	48a7      	ldr	r0, [pc, #668]	; (8010e78 <Save_Svg+0x31c>)
 8010bdc:	f012 f82e 	bl	8022c3c <memset>
 8010be0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8010be4:	461a      	mov	r2, r3
 8010be6:	2100      	movs	r1, #0
 8010be8:	48a4      	ldr	r0, [pc, #656]	; (8010e7c <Save_Svg+0x320>)
 8010bea:	f012 f827 	bl	8022c3c <memset>
 8010bee:	f107 021c 	add.w	r2, r7, #28
 8010bf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010bf6:	4611      	mov	r1, r2
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	f7fe ffbb 	bl	800fb74 <Make_Filename>
 8010bfe:	f107 0310 	add.w	r3, r7, #16
 8010c02:	f107 0214 	add.w	r2, r7, #20
 8010c06:	f107 011c 	add.w	r1, r7, #28
 8010c0a:	489c      	ldr	r0, [pc, #624]	; (8010e7c <Save_Svg+0x320>)
 8010c0c:	f7fe fd18 	bl	800f640 <OpenFileWr>
 8010c10:	4603      	mov	r3, r0
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d002      	beq.n	8010c1c <Save_Svg+0xc0>
 8010c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c18:	b2db      	uxtb	r3, r3
 8010c1a:	e3d5      	b.n	80113c8 <Save_Svg+0x86c>
 8010c1c:	4b98      	ldr	r3, [pc, #608]	; (8010e80 <Save_Svg+0x324>)
 8010c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c20:	f107 0314 	add.w	r3, r7, #20
 8010c24:	4619      	mov	r1, r3
 8010c26:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010c28:	f7fe ff0a 	bl	800fa40 <WriteStr>
 8010c2c:	4b95      	ldr	r3, [pc, #596]	; (8010e84 <Save_Svg+0x328>)
 8010c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c30:	f107 0314 	add.w	r3, r7, #20
 8010c34:	4619      	mov	r1, r3
 8010c36:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010c38:	f7fe ff02 	bl	800fa40 <WriteStr>
 8010c3c:	4b92      	ldr	r3, [pc, #584]	; (8010e88 <Save_Svg+0x32c>)
 8010c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c40:	f107 0314 	add.w	r3, r7, #20
 8010c44:	4619      	mov	r1, r3
 8010c46:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010c48:	f7fe fefa 	bl	800fa40 <WriteStr>
 8010c4c:	4b8f      	ldr	r3, [pc, #572]	; (8010e8c <Save_Svg+0x330>)
 8010c4e:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010c52:	461a      	mov	r2, r3
 8010c54:	4b8e      	ldr	r3, [pc, #568]	; (8010e90 <Save_Svg+0x334>)
 8010c56:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010c5a:	f107 0214 	add.w	r2, r7, #20
 8010c5e:	4611      	mov	r1, r2
 8010c60:	4618      	mov	r0, r3
 8010c62:	f7fe fe45 	bl	800f8f0 <WriteVar>
 8010c66:	4b8b      	ldr	r3, [pc, #556]	; (8010e94 <Save_Svg+0x338>)
 8010c68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c6a:	f107 0314 	add.w	r3, r7, #20
 8010c6e:	4619      	mov	r1, r3
 8010c70:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010c72:	f7fe fee5 	bl	800fa40 <WriteStr>
 8010c76:	4b88      	ldr	r3, [pc, #544]	; (8010e98 <Save_Svg+0x33c>)
 8010c78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c7a:	f107 0314 	add.w	r3, r7, #20
 8010c7e:	4619      	mov	r1, r3
 8010c80:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010c82:	f7fe fedd 	bl	800fa40 <WriteStr>
 8010c86:	4b81      	ldr	r3, [pc, #516]	; (8010e8c <Save_Svg+0x330>)
 8010c88:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010c8c:	461a      	mov	r2, r3
 8010c8e:	4b80      	ldr	r3, [pc, #512]	; (8010e90 <Save_Svg+0x334>)
 8010c90:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010c94:	f107 0214 	add.w	r2, r7, #20
 8010c98:	4611      	mov	r1, r2
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	f7fe fe28 	bl	800f8f0 <WriteVar>
 8010ca0:	4b7e      	ldr	r3, [pc, #504]	; (8010e9c <Save_Svg+0x340>)
 8010ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ca4:	f107 0314 	add.w	r3, r7, #20
 8010ca8:	4619      	mov	r1, r3
 8010caa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010cac:	f7fe fec8 	bl	800fa40 <WriteStr>
 8010cb0:	4b7b      	ldr	r3, [pc, #492]	; (8010ea0 <Save_Svg+0x344>)
 8010cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010cb4:	f107 0314 	add.w	r3, r7, #20
 8010cb8:	4619      	mov	r1, r3
 8010cba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010cbc:	f7fe fec0 	bl	800fa40 <WriteStr>
 8010cc0:	4b72      	ldr	r3, [pc, #456]	; (8010e8c <Save_Svg+0x330>)
 8010cc2:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8010cc6:	f107 0214 	add.w	r2, r7, #20
 8010cca:	4611      	mov	r1, r2
 8010ccc:	4618      	mov	r0, r3
 8010cce:	f7fe fe0f 	bl	800f8f0 <WriteVar>
 8010cd2:	4b74      	ldr	r3, [pc, #464]	; (8010ea4 <Save_Svg+0x348>)
 8010cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010cd6:	f107 0314 	add.w	r3, r7, #20
 8010cda:	4619      	mov	r1, r3
 8010cdc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010cde:	f7fe feaf 	bl	800fa40 <WriteStr>
 8010ce2:	4b6a      	ldr	r3, [pc, #424]	; (8010e8c <Save_Svg+0x330>)
 8010ce4:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8010ce8:	f107 0214 	add.w	r2, r7, #20
 8010cec:	4611      	mov	r1, r2
 8010cee:	4618      	mov	r0, r3
 8010cf0:	f7fe fdfe 	bl	800f8f0 <WriteVar>
 8010cf4:	4b6c      	ldr	r3, [pc, #432]	; (8010ea8 <Save_Svg+0x34c>)
 8010cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010cf8:	f107 0314 	add.w	r3, r7, #20
 8010cfc:	4619      	mov	r1, r3
 8010cfe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010d00:	f7fe fe9e 	bl	800fa40 <WriteStr>
 8010d04:	4b61      	ldr	r3, [pc, #388]	; (8010e8c <Save_Svg+0x330>)
 8010d06:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8010d0a:	b29b      	uxth	r3, r3
 8010d0c:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8010d10:	b29b      	uxth	r3, r3
 8010d12:	b21b      	sxth	r3, r3
 8010d14:	f107 0214 	add.w	r2, r7, #20
 8010d18:	4611      	mov	r1, r2
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	f7fe fde8 	bl	800f8f0 <WriteVar>
 8010d20:	4b62      	ldr	r3, [pc, #392]	; (8010eac <Save_Svg+0x350>)
 8010d22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010d24:	f107 0314 	add.w	r3, r7, #20
 8010d28:	4619      	mov	r1, r3
 8010d2a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010d2c:	f7fe fe88 	bl	800fa40 <WriteStr>
 8010d30:	2300      	movs	r3, #0
 8010d32:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010d36:	e032      	b.n	8010d9e <Save_Svg+0x242>
 8010d38:	4b5d      	ldr	r3, [pc, #372]	; (8010eb0 <Save_Svg+0x354>)
 8010d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010d3c:	f107 0314 	add.w	r3, r7, #20
 8010d40:	4619      	mov	r1, r3
 8010d42:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010d44:	f7fe fe7c 	bl	800fa40 <WriteStr>
 8010d48:	f107 0214 	add.w	r2, r7, #20
 8010d4c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8010d50:	4611      	mov	r1, r2
 8010d52:	4618      	mov	r0, r3
 8010d54:	f7fe fdcc 	bl	800f8f0 <WriteVar>
 8010d58:	4b56      	ldr	r3, [pc, #344]	; (8010eb4 <Save_Svg+0x358>)
 8010d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010d5c:	f107 0314 	add.w	r3, r7, #20
 8010d60:	4619      	mov	r1, r3
 8010d62:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010d64:	f7fe fe6c 	bl	800fa40 <WriteStr>
 8010d68:	4b48      	ldr	r3, [pc, #288]	; (8010e8c <Save_Svg+0x330>)
 8010d6a:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010d6e:	461a      	mov	r2, r3
 8010d70:	4b47      	ldr	r3, [pc, #284]	; (8010e90 <Save_Svg+0x334>)
 8010d72:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010d76:	f107 0214 	add.w	r2, r7, #20
 8010d7a:	4611      	mov	r1, r2
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	f7fe fdb7 	bl	800f8f0 <WriteVar>
 8010d82:	4b4d      	ldr	r3, [pc, #308]	; (8010eb8 <Save_Svg+0x35c>)
 8010d84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010d86:	f107 0314 	add.w	r3, r7, #20
 8010d8a:	4619      	mov	r1, r3
 8010d8c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010d8e:	f7fe fe57 	bl	800fa40 <WriteStr>
 8010d92:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010d96:	3319      	adds	r3, #25
 8010d98:	b29b      	uxth	r3, r3
 8010d9a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010d9e:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8010da2:	2bc8      	cmp	r3, #200	; 0xc8
 8010da4:	ddc8      	ble.n	8010d38 <Save_Svg+0x1dc>
 8010da6:	2300      	movs	r3, #0
 8010da8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8010dac:	e01d      	b.n	8010dea <Save_Svg+0x28e>
 8010dae:	4b43      	ldr	r3, [pc, #268]	; (8010ebc <Save_Svg+0x360>)
 8010db0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010db2:	f107 0314 	add.w	r3, r7, #20
 8010db6:	4619      	mov	r1, r3
 8010db8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010dba:	f7fe fe41 	bl	800fa40 <WriteStr>
 8010dbe:	f107 0214 	add.w	r2, r7, #20
 8010dc2:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8010dc6:	4611      	mov	r1, r2
 8010dc8:	4618      	mov	r0, r3
 8010dca:	f7fe fd91 	bl	800f8f0 <WriteVar>
 8010dce:	4b3c      	ldr	r3, [pc, #240]	; (8010ec0 <Save_Svg+0x364>)
 8010dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010dd2:	f107 0314 	add.w	r3, r7, #20
 8010dd6:	4619      	mov	r1, r3
 8010dd8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010dda:	f7fe fe31 	bl	800fa40 <WriteStr>
 8010dde:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010de2:	3319      	adds	r3, #25
 8010de4:	b29b      	uxth	r3, r3
 8010de6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8010dea:	4b28      	ldr	r3, [pc, #160]	; (8010e8c <Save_Svg+0x330>)
 8010dec:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010df0:	461a      	mov	r2, r3
 8010df2:	4b27      	ldr	r3, [pc, #156]	; (8010e90 <Save_Svg+0x334>)
 8010df4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010df8:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8010dfc:	429a      	cmp	r2, r3
 8010dfe:	ddd6      	ble.n	8010dae <Save_Svg+0x252>
 8010e00:	4b30      	ldr	r3, [pc, #192]	; (8010ec4 <Save_Svg+0x368>)
 8010e02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e04:	f107 0314 	add.w	r3, r7, #20
 8010e08:	4619      	mov	r1, r3
 8010e0a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010e0c:	f7fe fe18 	bl	800fa40 <WriteStr>
 8010e10:	2300      	movs	r3, #0
 8010e12:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8010e16:	e091      	b.n	8010f3c <Save_Svg+0x3e0>
 8010e18:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8010e1c:	3302      	adds	r3, #2
 8010e1e:	4a2a      	ldr	r2, [pc, #168]	; (8010ec8 <Save_Svg+0x36c>)
 8010e20:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8010e24:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8010e28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010e2a:	fb02 f303 	mul.w	r3, r2, r3
 8010e2e:	131b      	asrs	r3, r3, #12
 8010e30:	b29b      	uxth	r3, r3
 8010e32:	3364      	adds	r3, #100	; 0x64
 8010e34:	b29b      	uxth	r3, r3
 8010e36:	857b      	strh	r3, [r7, #42]	; 0x2a
 8010e38:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	dd45      	ble.n	8010ecc <Save_Svg+0x370>
 8010e40:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010e44:	2bc8      	cmp	r3, #200	; 0xc8
 8010e46:	dd02      	ble.n	8010e4e <Save_Svg+0x2f2>
 8010e48:	23c7      	movs	r3, #199	; 0xc7
 8010e4a:	813b      	strh	r3, [r7, #8]
 8010e4c:	e040      	b.n	8010ed0 <Save_Svg+0x374>
 8010e4e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010e50:	813b      	strh	r3, [r7, #8]
 8010e52:	e03d      	b.n	8010ed0 <Save_Svg+0x374>
 8010e54:	0800022c 	.word	0x0800022c
 8010e58:	2000057c 	.word	0x2000057c
 8010e5c:	20006886 	.word	0x20006886
 8010e60:	20002862 	.word	0x20002862
 8010e64:	2000284a 	.word	0x2000284a
 8010e68:	20000560 	.word	0x20000560
 8010e6c:	20000794 	.word	0x20000794
 8010e70:	20000790 	.word	0x20000790
 8010e74:	20000792 	.word	0x20000792
 8010e78:	20000008 	.word	0x20000008
 8010e7c:	200017d8 	.word	0x200017d8
 8010e80:	0800024c 	.word	0x0800024c
 8010e84:	0800027c 	.word	0x0800027c
 8010e88:	080002e8 	.word	0x080002e8
 8010e8c:	20000298 	.word	0x20000298
 8010e90:	08002270 	.word	0x08002270
 8010e94:	080002f8 	.word	0x080002f8
 8010e98:	08000384 	.word	0x08000384
 8010e9c:	080003b0 	.word	0x080003b0
 8010ea0:	080003c0 	.word	0x080003c0
 8010ea4:	080003e8 	.word	0x080003e8
 8010ea8:	080003f0 	.word	0x080003f0
 8010eac:	080003f8 	.word	0x080003f8
 8010eb0:	08000404 	.word	0x08000404
 8010eb4:	08000424 	.word	0x08000424
 8010eb8:	08000428 	.word	0x08000428
 8010ebc:	08000430 	.word	0x08000430
 8010ec0:	0800044c 	.word	0x0800044c
 8010ec4:	08000458 	.word	0x08000458
 8010ec8:	20002870 	.word	0x20002870
 8010ecc:	2300      	movs	r3, #0
 8010ece:	813b      	strh	r3, [r7, #8]
 8010ed0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8010ed4:	b29b      	uxth	r3, r3
 8010ed6:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8010eda:	b29b      	uxth	r3, r3
 8010edc:	b21b      	sxth	r3, r3
 8010ede:	813b      	strh	r3, [r7, #8]
 8010ee0:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d102      	bne.n	8010eee <Save_Svg+0x392>
 8010ee8:	4b3b      	ldr	r3, [pc, #236]	; (8010fd8 <Save_Svg+0x47c>)
 8010eea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010eec:	e001      	b.n	8010ef2 <Save_Svg+0x396>
 8010eee:	4b3b      	ldr	r3, [pc, #236]	; (8010fdc <Save_Svg+0x480>)
 8010ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ef2:	f107 0314 	add.w	r3, r7, #20
 8010ef6:	4619      	mov	r1, r3
 8010ef8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010efa:	f7fe fda1 	bl	800fa40 <WriteStr>
 8010efe:	f107 0214 	add.w	r2, r7, #20
 8010f02:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8010f06:	4611      	mov	r1, r2
 8010f08:	4618      	mov	r0, r3
 8010f0a:	f7fe fcf1 	bl	800f8f0 <WriteVar>
 8010f0e:	4b34      	ldr	r3, [pc, #208]	; (8010fe0 <Save_Svg+0x484>)
 8010f10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f12:	f107 0314 	add.w	r3, r7, #20
 8010f16:	4619      	mov	r1, r3
 8010f18:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f1a:	f7fe fd91 	bl	800fa40 <WriteStr>
 8010f1e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8010f22:	f107 0214 	add.w	r2, r7, #20
 8010f26:	4611      	mov	r1, r2
 8010f28:	4618      	mov	r0, r3
 8010f2a:	f7fe fce1 	bl	800f8f0 <WriteVar>
 8010f2e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8010f32:	b29b      	uxth	r3, r3
 8010f34:	3301      	adds	r3, #1
 8010f36:	b29b      	uxth	r3, r3
 8010f38:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8010f3c:	4b29      	ldr	r3, [pc, #164]	; (8010fe4 <Save_Svg+0x488>)
 8010f3e:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010f42:	461a      	mov	r2, r3
 8010f44:	4b28      	ldr	r3, [pc, #160]	; (8010fe8 <Save_Svg+0x48c>)
 8010f46:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010f4a:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8010f4e:	429a      	cmp	r2, r3
 8010f50:	f77f af62 	ble.w	8010e18 <Save_Svg+0x2bc>
 8010f54:	4b25      	ldr	r3, [pc, #148]	; (8010fec <Save_Svg+0x490>)
 8010f56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f58:	f107 0314 	add.w	r3, r7, #20
 8010f5c:	4619      	mov	r1, r3
 8010f5e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f60:	f7fe fd6e 	bl	800fa40 <WriteStr>
 8010f64:	4b22      	ldr	r3, [pc, #136]	; (8010ff0 <Save_Svg+0x494>)
 8010f66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f68:	f107 0314 	add.w	r3, r7, #20
 8010f6c:	4619      	mov	r1, r3
 8010f6e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f70:	f7fe fd66 	bl	800fa40 <WriteStr>
 8010f74:	4b1b      	ldr	r3, [pc, #108]	; (8010fe4 <Save_Svg+0x488>)
 8010f76:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d007      	beq.n	8010f8e <Save_Svg+0x432>
 8010f7e:	4b19      	ldr	r3, [pc, #100]	; (8010fe4 <Save_Svg+0x488>)
 8010f80:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010f84:	00db      	lsls	r3, r3, #3
 8010f86:	4a1b      	ldr	r2, [pc, #108]	; (8010ff4 <Save_Svg+0x498>)
 8010f88:	4413      	add	r3, r2
 8010f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f8c:	e006      	b.n	8010f9c <Save_Svg+0x440>
 8010f8e:	4b15      	ldr	r3, [pc, #84]	; (8010fe4 <Save_Svg+0x488>)
 8010f90:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010f94:	00db      	lsls	r3, r3, #3
 8010f96:	4a18      	ldr	r2, [pc, #96]	; (8010ff8 <Save_Svg+0x49c>)
 8010f98:	4413      	add	r3, r2
 8010f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f9c:	f107 0314 	add.w	r3, r7, #20
 8010fa0:	4619      	mov	r1, r3
 8010fa2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010fa4:	f7fe fd4c 	bl	800fa40 <WriteStr>
 8010fa8:	4b14      	ldr	r3, [pc, #80]	; (8010ffc <Save_Svg+0x4a0>)
 8010faa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010fac:	f107 0314 	add.w	r3, r7, #20
 8010fb0:	4619      	mov	r1, r3
 8010fb2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010fb4:	f7fe fd44 	bl	800fa40 <WriteStr>
 8010fb8:	4b11      	ldr	r3, [pc, #68]	; (8011000 <Save_Svg+0x4a4>)
 8010fba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010fbc:	f107 0314 	add.w	r3, r7, #20
 8010fc0:	4619      	mov	r1, r3
 8010fc2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010fc4:	f7fe fd3c 	bl	800fa40 <WriteStr>
 8010fc8:	4b06      	ldr	r3, [pc, #24]	; (8010fe4 <Save_Svg+0x488>)
 8010fca:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d01a      	beq.n	8011008 <Save_Svg+0x4ac>
 8010fd2:	4b0c      	ldr	r3, [pc, #48]	; (8011004 <Save_Svg+0x4a8>)
 8010fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010fd6:	e019      	b.n	801100c <Save_Svg+0x4b0>
 8010fd8:	08000490 	.word	0x08000490
 8010fdc:	08000494 	.word	0x08000494
 8010fe0:	08000498 	.word	0x08000498
 8010fe4:	20000298 	.word	0x20000298
 8010fe8:	08002270 	.word	0x08002270
 8010fec:	08000428 	.word	0x08000428
 8010ff0:	0800049c 	.word	0x0800049c
 8010ff4:	080019fc 	.word	0x080019fc
 8010ff8:	080019ac 	.word	0x080019ac
 8010ffc:	08000504 	.word	0x08000504
 8011000:	0800050c 	.word	0x0800050c
 8011004:	08000510 	.word	0x08000510
 8011008:	4bb1      	ldr	r3, [pc, #708]	; (80112d0 <Save_Svg+0x774>)
 801100a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801100c:	f107 0314 	add.w	r3, r7, #20
 8011010:	4619      	mov	r1, r3
 8011012:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011014:	f7fe fd14 	bl	800fa40 <WriteStr>
 8011018:	4bae      	ldr	r3, [pc, #696]	; (80112d4 <Save_Svg+0x778>)
 801101a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801101c:	f107 0314 	add.w	r3, r7, #20
 8011020:	4619      	mov	r1, r3
 8011022:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011024:	f7fe fd0c 	bl	800fa40 <WriteStr>
 8011028:	4bab      	ldr	r3, [pc, #684]	; (80112d8 <Save_Svg+0x77c>)
 801102a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801102e:	00db      	lsls	r3, r3, #3
 8011030:	4aaa      	ldr	r2, [pc, #680]	; (80112dc <Save_Svg+0x780>)
 8011032:	4413      	add	r3, r2
 8011034:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011036:	f107 0314 	add.w	r3, r7, #20
 801103a:	4619      	mov	r1, r3
 801103c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801103e:	f7fe fcff 	bl	800fa40 <WriteStr>
 8011042:	4ba7      	ldr	r3, [pc, #668]	; (80112e0 <Save_Svg+0x784>)
 8011044:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011046:	f107 0314 	add.w	r3, r7, #20
 801104a:	4619      	mov	r1, r3
 801104c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801104e:	f7fe fcf7 	bl	800fa40 <WriteStr>
 8011052:	4ba4      	ldr	r3, [pc, #656]	; (80112e4 <Save_Svg+0x788>)
 8011054:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011056:	f107 0314 	add.w	r3, r7, #20
 801105a:	4619      	mov	r1, r3
 801105c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801105e:	f7fe fcef 	bl	800fa40 <WriteStr>
 8011062:	4b9d      	ldr	r3, [pc, #628]	; (80112d8 <Save_Svg+0x77c>)
 8011064:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8011068:	b29b      	uxth	r3, r3
 801106a:	f1c3 03c7 	rsb	r3, r3, #199	; 0xc7
 801106e:	b29b      	uxth	r3, r3
 8011070:	863b      	strh	r3, [r7, #48]	; 0x30
 8011072:	4b9d      	ldr	r3, [pc, #628]	; (80112e8 <Save_Svg+0x78c>)
 8011074:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011076:	f107 0314 	add.w	r3, r7, #20
 801107a:	4619      	mov	r1, r3
 801107c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801107e:	f7fe fcdf 	bl	800fa40 <WriteStr>
 8011082:	4b9a      	ldr	r3, [pc, #616]	; (80112ec <Save_Svg+0x790>)
 8011084:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011086:	f107 0314 	add.w	r3, r7, #20
 801108a:	4619      	mov	r1, r3
 801108c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801108e:	f7fe fcd7 	bl	800fa40 <WriteStr>
 8011092:	4b97      	ldr	r3, [pc, #604]	; (80112f0 <Save_Svg+0x794>)
 8011094:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011096:	f107 0314 	add.w	r3, r7, #20
 801109a:	4619      	mov	r1, r3
 801109c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801109e:	f7fe fccf 	bl	800fa40 <WriteStr>
 80110a2:	4b94      	ldr	r3, [pc, #592]	; (80112f4 <Save_Svg+0x798>)
 80110a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110a6:	f107 0314 	add.w	r3, r7, #20
 80110aa:	4619      	mov	r1, r3
 80110ac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80110ae:	f7fe fcc7 	bl	800fa40 <WriteStr>
 80110b2:	4b91      	ldr	r3, [pc, #580]	; (80112f8 <Save_Svg+0x79c>)
 80110b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110b6:	f107 0314 	add.w	r3, r7, #20
 80110ba:	4619      	mov	r1, r3
 80110bc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80110be:	f7fe fcbf 	bl	800fa40 <WriteStr>
 80110c2:	4b8e      	ldr	r3, [pc, #568]	; (80112fc <Save_Svg+0x7a0>)
 80110c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110c6:	f107 0314 	add.w	r3, r7, #20
 80110ca:	4619      	mov	r1, r3
 80110cc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80110ce:	f7fe fcb7 	bl	800fa40 <WriteStr>
 80110d2:	4b8b      	ldr	r3, [pc, #556]	; (8011300 <Save_Svg+0x7a4>)
 80110d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110d6:	f107 0314 	add.w	r3, r7, #20
 80110da:	4619      	mov	r1, r3
 80110dc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80110de:	f7fe fcaf 	bl	800fa40 <WriteStr>
 80110e2:	4b88      	ldr	r3, [pc, #544]	; (8011304 <Save_Svg+0x7a8>)
 80110e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110e6:	f107 0314 	add.w	r3, r7, #20
 80110ea:	4619      	mov	r1, r3
 80110ec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80110ee:	f7fe fca7 	bl	800fa40 <WriteStr>
 80110f2:	4b85      	ldr	r3, [pc, #532]	; (8011308 <Save_Svg+0x7ac>)
 80110f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110f6:	f107 0314 	add.w	r3, r7, #20
 80110fa:	4619      	mov	r1, r3
 80110fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80110fe:	f7fe fc9f 	bl	800fa40 <WriteStr>
 8011102:	4b82      	ldr	r3, [pc, #520]	; (801130c <Save_Svg+0x7b0>)
 8011104:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011106:	f107 0314 	add.w	r3, r7, #20
 801110a:	4619      	mov	r1, r3
 801110c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801110e:	f7fe fc97 	bl	800fa40 <WriteStr>
 8011112:	4b7f      	ldr	r3, [pc, #508]	; (8011310 <Save_Svg+0x7b4>)
 8011114:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011116:	f107 0314 	add.w	r3, r7, #20
 801111a:	4619      	mov	r1, r3
 801111c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801111e:	f7fe fc8f 	bl	800fa40 <WriteStr>
 8011122:	4b7c      	ldr	r3, [pc, #496]	; (8011314 <Save_Svg+0x7b8>)
 8011124:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011126:	f107 0314 	add.w	r3, r7, #20
 801112a:	4619      	mov	r1, r3
 801112c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801112e:	f7fe fc87 	bl	800fa40 <WriteStr>
 8011132:	4b79      	ldr	r3, [pc, #484]	; (8011318 <Save_Svg+0x7bc>)
 8011134:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011136:	f107 0314 	add.w	r3, r7, #20
 801113a:	4619      	mov	r1, r3
 801113c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801113e:	f7fe fc7f 	bl	800fa40 <WriteStr>
 8011142:	4b65      	ldr	r3, [pc, #404]	; (80112d8 <Save_Svg+0x77c>)
 8011144:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8011148:	461a      	mov	r2, r3
 801114a:	4b74      	ldr	r3, [pc, #464]	; (801131c <Save_Svg+0x7c0>)
 801114c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8011150:	f107 0214 	add.w	r2, r7, #20
 8011154:	4611      	mov	r1, r2
 8011156:	4618      	mov	r0, r3
 8011158:	f7fe fbca 	bl	800f8f0 <WriteVar>
 801115c:	4b70      	ldr	r3, [pc, #448]	; (8011320 <Save_Svg+0x7c4>)
 801115e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011160:	f107 0314 	add.w	r3, r7, #20
 8011164:	4619      	mov	r1, r3
 8011166:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011168:	f7fe fc6a 	bl	800fa40 <WriteStr>
 801116c:	4b6d      	ldr	r3, [pc, #436]	; (8011324 <Save_Svg+0x7c8>)
 801116e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011170:	f107 0314 	add.w	r3, r7, #20
 8011174:	4619      	mov	r1, r3
 8011176:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011178:	f7fe fc62 	bl	800fa40 <WriteStr>
 801117c:	4b6a      	ldr	r3, [pc, #424]	; (8011328 <Save_Svg+0x7cc>)
 801117e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011180:	f107 0314 	add.w	r3, r7, #20
 8011184:	4619      	mov	r1, r3
 8011186:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011188:	f7fe fc5a 	bl	800fa40 <WriteStr>
 801118c:	4b67      	ldr	r3, [pc, #412]	; (801132c <Save_Svg+0x7d0>)
 801118e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011190:	f107 0314 	add.w	r3, r7, #20
 8011194:	4619      	mov	r1, r3
 8011196:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011198:	f7fe fc52 	bl	800fa40 <WriteStr>
 801119c:	4b64      	ldr	r3, [pc, #400]	; (8011330 <Save_Svg+0x7d4>)
 801119e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111a0:	f107 0314 	add.w	r3, r7, #20
 80111a4:	4619      	mov	r1, r3
 80111a6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80111a8:	f7fe fc4a 	bl	800fa40 <WriteStr>
 80111ac:	4b61      	ldr	r3, [pc, #388]	; (8011334 <Save_Svg+0x7d8>)
 80111ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111b0:	f107 0314 	add.w	r3, r7, #20
 80111b4:	4619      	mov	r1, r3
 80111b6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80111b8:	f7fe fc42 	bl	800fa40 <WriteStr>
 80111bc:	4b5e      	ldr	r3, [pc, #376]	; (8011338 <Save_Svg+0x7dc>)
 80111be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111c0:	f107 0314 	add.w	r3, r7, #20
 80111c4:	4619      	mov	r1, r3
 80111c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80111c8:	f7fe fc3a 	bl	800fa40 <WriteStr>
 80111cc:	4b58      	ldr	r3, [pc, #352]	; (8011330 <Save_Svg+0x7d4>)
 80111ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111d0:	f107 0314 	add.w	r3, r7, #20
 80111d4:	4619      	mov	r1, r3
 80111d6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80111d8:	f7fe fc32 	bl	800fa40 <WriteStr>
 80111dc:	4b57      	ldr	r3, [pc, #348]	; (801133c <Save_Svg+0x7e0>)
 80111de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111e0:	f107 0314 	add.w	r3, r7, #20
 80111e4:	4619      	mov	r1, r3
 80111e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80111e8:	f7fe fc2a 	bl	800fa40 <WriteStr>
 80111ec:	4b3a      	ldr	r3, [pc, #232]	; (80112d8 <Save_Svg+0x77c>)
 80111ee:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d00b      	beq.n	801120e <Save_Svg+0x6b2>
 80111f6:	4b38      	ldr	r3, [pc, #224]	; (80112d8 <Save_Svg+0x77c>)
 80111f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80111fc:	461a      	mov	r2, r3
 80111fe:	4613      	mov	r3, r2
 8011200:	005b      	lsls	r3, r3, #1
 8011202:	4413      	add	r3, r2
 8011204:	005b      	lsls	r3, r3, #1
 8011206:	4a4e      	ldr	r2, [pc, #312]	; (8011340 <Save_Svg+0x7e4>)
 8011208:	4413      	add	r3, r2
 801120a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801120c:	e00a      	b.n	8011224 <Save_Svg+0x6c8>
 801120e:	4b32      	ldr	r3, [pc, #200]	; (80112d8 <Save_Svg+0x77c>)
 8011210:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011214:	461a      	mov	r2, r3
 8011216:	4613      	mov	r3, r2
 8011218:	005b      	lsls	r3, r3, #1
 801121a:	4413      	add	r3, r2
 801121c:	005b      	lsls	r3, r3, #1
 801121e:	4a49      	ldr	r2, [pc, #292]	; (8011344 <Save_Svg+0x7e8>)
 8011220:	4413      	add	r3, r2
 8011222:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011224:	f107 0314 	add.w	r3, r7, #20
 8011228:	4619      	mov	r1, r3
 801122a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801122c:	f7fe fc08 	bl	800fa40 <WriteStr>
 8011230:	4b45      	ldr	r3, [pc, #276]	; (8011348 <Save_Svg+0x7ec>)
 8011232:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011234:	f107 0314 	add.w	r3, r7, #20
 8011238:	4619      	mov	r1, r3
 801123a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801123c:	f7fe fc00 	bl	800fa40 <WriteStr>
 8011240:	f107 0214 	add.w	r2, r7, #20
 8011244:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8011248:	4611      	mov	r1, r2
 801124a:	4618      	mov	r0, r3
 801124c:	f7fe fb50 	bl	800f8f0 <WriteVar>
 8011250:	4b3e      	ldr	r3, [pc, #248]	; (801134c <Save_Svg+0x7f0>)
 8011252:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011254:	f107 0314 	add.w	r3, r7, #20
 8011258:	4619      	mov	r1, r3
 801125a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801125c:	f7fe fbf0 	bl	800fa40 <WriteStr>
 8011260:	4b1d      	ldr	r3, [pc, #116]	; (80112d8 <Save_Svg+0x77c>)
 8011262:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011266:	00db      	lsls	r3, r3, #3
 8011268:	4a39      	ldr	r2, [pc, #228]	; (8011350 <Save_Svg+0x7f4>)
 801126a:	4413      	add	r3, r2
 801126c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801126e:	f107 0314 	add.w	r3, r7, #20
 8011272:	4619      	mov	r1, r3
 8011274:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011276:	f7fe fbe3 	bl	800fa40 <WriteStr>
 801127a:	4b36      	ldr	r3, [pc, #216]	; (8011354 <Save_Svg+0x7f8>)
 801127c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801127e:	f107 0314 	add.w	r3, r7, #20
 8011282:	4619      	mov	r1, r3
 8011284:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011286:	f7fe fbdb 	bl	800fa40 <WriteStr>
 801128a:	4b1d      	ldr	r3, [pc, #116]	; (8011300 <Save_Svg+0x7a4>)
 801128c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801128e:	f107 0314 	add.w	r3, r7, #20
 8011292:	4619      	mov	r1, r3
 8011294:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011296:	f7fe fbd3 	bl	800fa40 <WriteStr>
 801129a:	4b2f      	ldr	r3, [pc, #188]	; (8011358 <Save_Svg+0x7fc>)
 801129c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801129e:	f107 0314 	add.w	r3, r7, #20
 80112a2:	4619      	mov	r1, r3
 80112a4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80112a6:	f7fe fbcb 	bl	800fa40 <WriteStr>
 80112aa:	4b2c      	ldr	r3, [pc, #176]	; (801135c <Save_Svg+0x800>)
 80112ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80112ae:	f107 0314 	add.w	r3, r7, #20
 80112b2:	4619      	mov	r1, r3
 80112b4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80112b6:	f7fe fbc3 	bl	800fa40 <WriteStr>
 80112ba:	f107 0314 	add.w	r3, r7, #20
 80112be:	4619      	mov	r1, r3
 80112c0:	4827      	ldr	r0, [pc, #156]	; (8011360 <Save_Svg+0x804>)
 80112c2:	f7fe f8e5 	bl	800f490 <ProgFileSec>
 80112c6:	4603      	mov	r3, r0
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d04b      	beq.n	8011364 <Save_Svg+0x808>
 80112cc:	2303      	movs	r3, #3
 80112ce:	e07b      	b.n	80113c8 <Save_Svg+0x86c>
 80112d0:	08000514 	.word	0x08000514
 80112d4:	08000518 	.word	0x08000518
 80112d8:	20000298 	.word	0x20000298
 80112dc:	200001d0 	.word	0x200001d0
 80112e0:	0800051c 	.word	0x0800051c
 80112e4:	0800052c 	.word	0x0800052c
 80112e8:	08000598 	.word	0x08000598
 80112ec:	080005c4 	.word	0x080005c4
 80112f0:	08000628 	.word	0x08000628
 80112f4:	08000644 	.word	0x08000644
 80112f8:	08000684 	.word	0x08000684
 80112fc:	080006c0 	.word	0x080006c0
 8011300:	080006f4 	.word	0x080006f4
 8011304:	080006f8 	.word	0x080006f8
 8011308:	0800074c 	.word	0x0800074c
 801130c:	08000764 	.word	0x08000764
 8011310:	08000768 	.word	0x08000768
 8011314:	0800077c 	.word	0x0800077c
 8011318:	08000794 	.word	0x08000794
 801131c:	08002270 	.word	0x08002270
 8011320:	080007b0 	.word	0x080007b0
 8011324:	080007c0 	.word	0x080007c0
 8011328:	080007cc 	.word	0x080007cc
 801132c:	08000818 	.word	0x08000818
 8011330:	08000838 	.word	0x08000838
 8011334:	0800083c 	.word	0x0800083c
 8011338:	08000880 	.word	0x08000880
 801133c:	080008cc 	.word	0x080008cc
 8011340:	08001a88 	.word	0x08001a88
 8011344:	08001a4c 	.word	0x08001a4c
 8011348:	08000914 	.word	0x08000914
 801134c:	08000918 	.word	0x08000918
 8011350:	08001ac4 	.word	0x08001ac4
 8011354:	0800092c 	.word	0x0800092c
 8011358:	08000930 	.word	0x08000930
 801135c:	08000940 	.word	0x08000940
 8011360:	200017d8 	.word	0x200017d8
 8011364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011366:	1c5a      	adds	r2, r3, #1
 8011368:	637a      	str	r2, [r7, #52]	; 0x34
 801136a:	105b      	asrs	r3, r3, #1
 801136c:	b2db      	uxtb	r3, r3
 801136e:	f003 0303 	and.w	r3, r3, #3
 8011372:	b2db      	uxtb	r3, r3
 8011374:	461a      	mov	r2, r3
 8011376:	2102      	movs	r1, #2
 8011378:	f44f 7084 	mov.w	r0, #264	; 0x108
 801137c:	f7fe fa42 	bl	800f804 <PrintClk>
 8011380:	4b13      	ldr	r3, [pc, #76]	; (80113d0 <Save_Svg+0x874>)
 8011382:	6819      	ldr	r1, [r3, #0]
 8011384:	f107 0310 	add.w	r3, r7, #16
 8011388:	f107 0214 	add.w	r2, r7, #20
 801138c:	4811      	ldr	r0, [pc, #68]	; (80113d4 <Save_Svg+0x878>)
 801138e:	f7fe f8f3 	bl	800f578 <CloseFile>
 8011392:	4603      	mov	r3, r0
 8011394:	2b00      	cmp	r3, #0
 8011396:	d001      	beq.n	801139c <Save_Svg+0x840>
 8011398:	2304      	movs	r3, #4
 801139a:	e015      	b.n	80113c8 <Save_Svg+0x86c>
 801139c:	4b0e      	ldr	r3, [pc, #56]	; (80113d8 <Save_Svg+0x87c>)
 801139e:	f9b3 310c 	ldrsh.w	r3, [r3, #268]	; 0x10c
 80113a2:	2b62      	cmp	r3, #98	; 0x62
 80113a4:	dc09      	bgt.n	80113ba <Save_Svg+0x85e>
 80113a6:	4b0c      	ldr	r3, [pc, #48]	; (80113d8 <Save_Svg+0x87c>)
 80113a8:	f9b3 310c 	ldrsh.w	r3, [r3, #268]	; 0x10c
 80113ac:	b29b      	uxth	r3, r3
 80113ae:	3301      	adds	r3, #1
 80113b0:	b29b      	uxth	r3, r3
 80113b2:	b21a      	sxth	r2, r3
 80113b4:	4b08      	ldr	r3, [pc, #32]	; (80113d8 <Save_Svg+0x87c>)
 80113b6:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
 80113ba:	f44f 729b 	mov.w	r2, #310	; 0x136
 80113be:	2100      	movs	r1, #0
 80113c0:	4806      	ldr	r0, [pc, #24]	; (80113dc <Save_Svg+0x880>)
 80113c2:	f011 fc3b 	bl	8022c3c <memset>
 80113c6:	2300      	movs	r3, #0
 80113c8:	4618      	mov	r0, r3
 80113ca:	3748      	adds	r7, #72	; 0x48
 80113cc:	46bd      	mov	sp, r7
 80113ce:	bd80      	pop	{r7, pc}
 80113d0:	20000794 	.word	0x20000794
 80113d4:	200017d8 	.word	0x200017d8
 80113d8:	20000298 	.word	0x20000298
 80113dc:	20000008 	.word	0x20000008

080113e0 <Read_CalFlag>:
unsigned long err;

FLASH_EraseInitTypeDef Flash_Erase ={0, 1, 1, 1, 2};

 void Read_CalFlag(void)
 {
 80113e0:	b480      	push	{r7}
 80113e2:	b083      	sub	sp, #12
 80113e4:	af00      	add	r7, sp, #0
	  unsigned short* ptr;
	  ptr=(unsigned short*)Kpg_Address;
 80113e6:	4b10      	ldr	r3, [pc, #64]	; (8011428 <Read_CalFlag+0x48>)
 80113e8:	607b      	str	r3, [r7, #4]
	  if(*ptr++!=0xaa55)
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	1c9a      	adds	r2, r3, #2
 80113ee:	607a      	str	r2, [r7, #4]
 80113f0:	881b      	ldrh	r3, [r3, #0]
 80113f2:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80113f6:	4293      	cmp	r3, r2
 80113f8:	d10e      	bne.n	8011418 <Read_CalFlag+0x38>
		  return;
	  if(*ptr++!=0x0400)
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	1c9a      	adds	r2, r3, #2
 80113fe:	607a      	str	r2, [r7, #4]
 8011400:	881b      	ldrh	r3, [r3, #0]
 8011402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011406:	d109      	bne.n	801141c <Read_CalFlag+0x3c>
		  return;
	  Cal_Flag = *ptr++;
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	1c9a      	adds	r2, r3, #2
 801140c:	607a      	str	r2, [r7, #4]
 801140e:	881b      	ldrh	r3, [r3, #0]
 8011410:	b2da      	uxtb	r2, r3
 8011412:	4b06      	ldr	r3, [pc, #24]	; (801142c <Read_CalFlag+0x4c>)
 8011414:	701a      	strb	r2, [r3, #0]
	  return;
 8011416:	e002      	b.n	801141e <Read_CalFlag+0x3e>
		  return;
 8011418:	bf00      	nop
 801141a:	e000      	b.n	801141e <Read_CalFlag+0x3e>
		  return;
 801141c:	bf00      	nop
 }
 801141e:	370c      	adds	r7, #12
 8011420:	46bd      	mov	sp, r7
 8011422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011426:	4770      	bx	lr
 8011428:	08004000 	.word	0x08004000
 801142c:	200001b4 	.word	0x200001b4

08011430 <Save_Parameter>:

 /*******************************************************************************
  Save_Parameter:                          Return: 0= Success
 *******************************************************************************/
 char Save_Parameter(void)
 {
 8011430:	b580      	push	{r7, lr}
 8011432:	b082      	sub	sp, #8
 8011434:	af00      	add	r7, sp, #0
   short i, j;
   unsigned short* ptr;

   Flash_Erase.Sector = 2;
 8011436:	4b45      	ldr	r3, [pc, #276]	; (801154c <Save_Parameter+0x11c>)
 8011438:	2202      	movs	r2, #2
 801143a:	609a      	str	r2, [r3, #8]

   HAL_FLASH_Unlock();
 801143c:	f007 ff68 	bl	8019310 <HAL_FLASH_Unlock>
   j=HAL_FLASHEx_Erase( &Flash_Erase, &err);
 8011440:	4943      	ldr	r1, [pc, #268]	; (8011550 <Save_Parameter+0x120>)
 8011442:	4842      	ldr	r0, [pc, #264]	; (801154c <Save_Parameter+0x11c>)
 8011444:	f008 f8d6 	bl	80195f4 <HAL_FLASHEx_Erase>
 8011448:	4603      	mov	r3, r0
 801144a:	80bb      	strh	r3, [r7, #4]
   if(j== HAL_OK)
 801144c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011450:	2b00      	cmp	r3, #0
 8011452:	d173      	bne.n	801153c <Save_Parameter+0x10c>
   {
     ptr=F_Buff;
 8011454:	4b3f      	ldr	r3, [pc, #252]	; (8011554 <Save_Parameter+0x124>)
 8011456:	603b      	str	r3, [r7, #0]
     *ptr++=0x0400;                              //Ver:4.00
 8011458:	683b      	ldr	r3, [r7, #0]
 801145a:	1c9a      	adds	r2, r3, #2
 801145c:	603a      	str	r2, [r7, #0]
 801145e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011462:	801a      	strh	r2, [r3, #0]
     *ptr++=Current;
 8011464:	4b3c      	ldr	r3, [pc, #240]	; (8011558 <Save_Parameter+0x128>)
 8011466:	f9b3 1000 	ldrsh.w	r1, [r3]
 801146a:	683b      	ldr	r3, [r7, #0]
 801146c:	1c9a      	adds	r2, r3, #2
 801146e:	603a      	str	r2, [r7, #0]
 8011470:	b28a      	uxth	r2, r1
 8011472:	801a      	strh	r2, [r3, #0]
     *ptr++=Status;
 8011474:	4b39      	ldr	r3, [pc, #228]	; (801155c <Save_Parameter+0x12c>)
 8011476:	f9b3 1000 	ldrsh.w	r1, [r3]
 801147a:	683b      	ldr	r3, [r7, #0]
 801147c:	1c9a      	adds	r2, r3, #2
 801147e:	603a      	str	r2, [r7, #0]
 8011480:	b28a      	uxth	r2, r1
 8011482:	801a      	strh	r2, [r3, #0]
     for(i=0;i<42;i++)
 8011484:	2300      	movs	r3, #0
 8011486:	80fb      	strh	r3, [r7, #6]
 8011488:	e011      	b.n	80114ae <Save_Parameter+0x7e>
    	 *ptr++=List[i].Val;
 801148a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801148e:	4a34      	ldr	r2, [pc, #208]	; (8011560 <Save_Parameter+0x130>)
 8011490:	00db      	lsls	r3, r3, #3
 8011492:	4413      	add	r3, r2
 8011494:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8011498:	683b      	ldr	r3, [r7, #0]
 801149a:	1c9a      	adds	r2, r3, #2
 801149c:	603a      	str	r2, [r7, #0]
 801149e:	b28a      	uxth	r2, r1
 80114a0:	801a      	strh	r2, [r3, #0]
     for(i=0;i<42;i++)
 80114a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80114a6:	b29b      	uxth	r3, r3
 80114a8:	3301      	adds	r3, #1
 80114aa:	b29b      	uxth	r3, r3
 80114ac:	80fb      	strh	r3, [r7, #6]
 80114ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80114b2:	2b29      	cmp	r3, #41	; 0x29
 80114b4:	dde9      	ble.n	801148a <Save_Parameter+0x5a>
     for(i=0;i<8;i++)
 80114b6:	2300      	movs	r3, #0
 80114b8:	80fb      	strh	r3, [r7, #6]
 80114ba:	e00f      	b.n	80114dc <Save_Parameter+0xac>
    	 *ptr++=MenuNow[i];
 80114bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80114c0:	4a28      	ldr	r2, [pc, #160]	; (8011564 <Save_Parameter+0x134>)
 80114c2:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 80114c6:	683b      	ldr	r3, [r7, #0]
 80114c8:	1c9a      	adds	r2, r3, #2
 80114ca:	603a      	str	r2, [r7, #0]
 80114cc:	b28a      	uxth	r2, r1
 80114ce:	801a      	strh	r2, [r3, #0]
     for(i=0;i<8;i++)
 80114d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80114d4:	b29b      	uxth	r3, r3
 80114d6:	3301      	adds	r3, #1
 80114d8:	b29b      	uxth	r3, r3
 80114da:	80fb      	strh	r3, [r7, #6]
 80114dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80114e0:	2b07      	cmp	r3, #7
 80114e2:	ddeb      	ble.n	80114bc <Save_Parameter+0x8c>
     *ptr++=0xaa55;
 80114e4:	683b      	ldr	r3, [r7, #0]
 80114e6:	1c9a      	adds	r2, r3, #2
 80114e8:	603a      	str	r2, [r7, #0]
 80114ea:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80114ee:	801a      	strh	r2, [r3, #0]
     ptr=F_Buff;
 80114f0:	4b18      	ldr	r3, [pc, #96]	; (8011554 <Save_Parameter+0x124>)
 80114f2:	603b      	str	r3, [r7, #0]
     for(i=0; i<256; i+=2)
 80114f4:	2300      	movs	r3, #0
 80114f6:	80fb      	strh	r3, [r7, #6]
 80114f8:	e01a      	b.n	8011530 <Save_Parameter+0x100>
     {                      //128 SHORT
       j= HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Page_Address+i, *ptr++);
 80114fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80114fe:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8011502:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011506:	4619      	mov	r1, r3
 8011508:	683b      	ldr	r3, [r7, #0]
 801150a:	1c9a      	adds	r2, r3, #2
 801150c:	603a      	str	r2, [r7, #0]
 801150e:	881b      	ldrh	r3, [r3, #0]
 8011510:	b29a      	uxth	r2, r3
 8011512:	f04f 0300 	mov.w	r3, #0
 8011516:	2001      	movs	r0, #1
 8011518:	f007 fea6 	bl	8019268 <HAL_FLASH_Program>
 801151c:	4603      	mov	r3, r0
 801151e:	80bb      	strh	r3, [r7, #4]
       if(j!= HAL_OK)
 8011520:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011524:	2b00      	cmp	r3, #0
 8011526:	d108      	bne.n	801153a <Save_Parameter+0x10a>
     for(i=0; i<256; i+=2)
 8011528:	88fb      	ldrh	r3, [r7, #6]
 801152a:	3302      	adds	r3, #2
 801152c:	b29b      	uxth	r3, r3
 801152e:	80fb      	strh	r3, [r7, #6]
 8011530:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011534:	2bff      	cmp	r3, #255	; 0xff
 8011536:	dde0      	ble.n	80114fa <Save_Parameter+0xca>
 8011538:	e000      	b.n	801153c <Save_Parameter+0x10c>
    	   break;
 801153a:	bf00      	nop
     }
   }
   HAL_FLASH_Lock();
 801153c:	f007 ff0a 	bl	8019354 <HAL_FLASH_Lock>

   return j;
 8011540:	88bb      	ldrh	r3, [r7, #4]
 8011542:	b2db      	uxtb	r3, r3
 }
 8011544:	4618      	mov	r0, r3
 8011546:	3708      	adds	r7, #8
 8011548:	46bd      	mov	sp, r7
 801154a:	bd80      	pop	{r7, pc}
 801154c:	200001b8 	.word	0x200001b8
 8011550:	20002818 	.word	0x20002818
 8011554:	200017d8 	.word	0x200017d8
 8011558:	2000079e 	.word	0x2000079e
 801155c:	200007a0 	.word	0x200007a0
 8011560:	20000298 	.word	0x20000298
 8011564:	20000538 	.word	0x20000538

08011568 <Read_Parameter>:
 /*******************************************************************************
 Read_Parameter:
 *******************************************************************************/
 void Read_Parameter(void)
 {
 8011568:	b480      	push	{r7}
 801156a:	b083      	sub	sp, #12
 801156c:	af00      	add	r7, sp, #0
   short i;
   unsigned short* ptr;
   ptr=(unsigned short*)(Page_Address+55*2); //94*2-40
 801156e:	4b3f      	ldr	r3, [pc, #252]	; (801166c <Read_Parameter+0x104>)
 8011570:	603b      	str	r3, [r7, #0]
   TIM_BASE_Val=List[TIM_BASE].Val;
 8011572:	4b3f      	ldr	r3, [pc, #252]	; (8011670 <Read_Parameter+0x108>)
 8011574:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8011578:	4b3e      	ldr	r3, [pc, #248]	; (8011674 <Read_Parameter+0x10c>)
 801157a:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 801157c:	4b3c      	ldr	r3, [pc, #240]	; (8011670 <Read_Parameter+0x108>)
 801157e:	2200      	movs	r2, #0
 8011580:	879a      	strh	r2, [r3, #60]	; 0x3c
   if(*ptr!=0xaa55)
 8011582:	683b      	ldr	r3, [r7, #0]
 8011584:	881b      	ldrh	r3, [r3, #0]
 8011586:	f64a 2255 	movw	r2, #43605	; 0xaa55
 801158a:	4293      	cmp	r3, r2
 801158c:	d166      	bne.n	801165c <Read_Parameter+0xf4>
	   return ;
   ptr=(unsigned short*)Page_Address;
 801158e:	4b3a      	ldr	r3, [pc, #232]	; (8011678 <Read_Parameter+0x110>)
 8011590:	603b      	str	r3, [r7, #0]
   if(*ptr++!=0x0400)
 8011592:	683b      	ldr	r3, [r7, #0]
 8011594:	1c9a      	adds	r2, r3, #2
 8011596:	603a      	str	r2, [r7, #0]
 8011598:	881b      	ldrh	r3, [r3, #0]
 801159a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801159e:	d15f      	bne.n	8011660 <Read_Parameter+0xf8>
	   return ;
   Current=*ptr++;
 80115a0:	683b      	ldr	r3, [r7, #0]
 80115a2:	1c9a      	adds	r2, r3, #2
 80115a4:	603a      	str	r2, [r7, #0]
 80115a6:	881b      	ldrh	r3, [r3, #0]
 80115a8:	b21a      	sxth	r2, r3
 80115aa:	4b34      	ldr	r3, [pc, #208]	; (801167c <Read_Parameter+0x114>)
 80115ac:	801a      	strh	r2, [r3, #0]
   List[MenuNow[Current]].Flg |= UPD;
 80115ae:	4b33      	ldr	r3, [pc, #204]	; (801167c <Read_Parameter+0x114>)
 80115b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80115b4:	461a      	mov	r2, r3
 80115b6:	4b32      	ldr	r3, [pc, #200]	; (8011680 <Read_Parameter+0x118>)
 80115b8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80115bc:	4a2c      	ldr	r2, [pc, #176]	; (8011670 <Read_Parameter+0x108>)
 80115be:	00db      	lsls	r3, r3, #3
 80115c0:	4413      	add	r3, r2
 80115c2:	799b      	ldrb	r3, [r3, #6]
 80115c4:	4a2d      	ldr	r2, [pc, #180]	; (801167c <Read_Parameter+0x114>)
 80115c6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80115ca:	4611      	mov	r1, r2
 80115cc:	4a2c      	ldr	r2, [pc, #176]	; (8011680 <Read_Parameter+0x118>)
 80115ce:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80115d2:	4610      	mov	r0, r2
 80115d4:	f043 0320 	orr.w	r3, r3, #32
 80115d8:	b2d9      	uxtb	r1, r3
 80115da:	4a25      	ldr	r2, [pc, #148]	; (8011670 <Read_Parameter+0x108>)
 80115dc:	00c3      	lsls	r3, r0, #3
 80115de:	4413      	add	r3, r2
 80115e0:	460a      	mov	r2, r1
 80115e2:	719a      	strb	r2, [r3, #6]
   ptr++;
 80115e4:	683b      	ldr	r3, [r7, #0]
 80115e6:	3302      	adds	r3, #2
 80115e8:	603b      	str	r3, [r7, #0]
   for(i=0;i<42;i++)
 80115ea:	2300      	movs	r3, #0
 80115ec:	80fb      	strh	r3, [r7, #6]
 80115ee:	e011      	b.n	8011614 <Read_Parameter+0xac>
	   List[i].Val=*ptr++;
 80115f0:	683b      	ldr	r3, [r7, #0]
 80115f2:	1c9a      	adds	r2, r3, #2
 80115f4:	603a      	str	r2, [r7, #0]
 80115f6:	881a      	ldrh	r2, [r3, #0]
 80115f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80115fc:	b211      	sxth	r1, r2
 80115fe:	4a1c      	ldr	r2, [pc, #112]	; (8011670 <Read_Parameter+0x108>)
 8011600:	00db      	lsls	r3, r3, #3
 8011602:	4413      	add	r3, r2
 8011604:	460a      	mov	r2, r1
 8011606:	809a      	strh	r2, [r3, #4]
   for(i=0;i<42;i++)
 8011608:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801160c:	b29b      	uxth	r3, r3
 801160e:	3301      	adds	r3, #1
 8011610:	b29b      	uxth	r3, r3
 8011612:	80fb      	strh	r3, [r7, #6]
 8011614:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011618:	2b29      	cmp	r3, #41	; 0x29
 801161a:	dde9      	ble.n	80115f0 <Read_Parameter+0x88>
   for(i=0;i<8;i++)
 801161c:	2300      	movs	r3, #0
 801161e:	80fb      	strh	r3, [r7, #6]
 8011620:	e00f      	b.n	8011642 <Read_Parameter+0xda>
	   MenuNow[i]=*ptr++;
 8011622:	683b      	ldr	r3, [r7, #0]
 8011624:	1c9a      	adds	r2, r3, #2
 8011626:	603a      	str	r2, [r7, #0]
 8011628:	881a      	ldrh	r2, [r3, #0]
 801162a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801162e:	b211      	sxth	r1, r2
 8011630:	4a13      	ldr	r2, [pc, #76]	; (8011680 <Read_Parameter+0x118>)
 8011632:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(i=0;i<8;i++)
 8011636:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801163a:	b29b      	uxth	r3, r3
 801163c:	3301      	adds	r3, #1
 801163e:	b29b      	uxth	r3, r3
 8011640:	80fb      	strh	r3, [r7, #6]
 8011642:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011646:	2b07      	cmp	r3, #7
 8011648:	ddeb      	ble.n	8011622 <Read_Parameter+0xba>
   TIM_BASE_Val=List[TIM_BASE].Val;
 801164a:	4b09      	ldr	r3, [pc, #36]	; (8011670 <Read_Parameter+0x108>)
 801164c:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8011650:	4b08      	ldr	r3, [pc, #32]	; (8011674 <Read_Parameter+0x10c>)
 8011652:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 8011654:	4b06      	ldr	r3, [pc, #24]	; (8011670 <Read_Parameter+0x108>)
 8011656:	2200      	movs	r2, #0
 8011658:	879a      	strh	r2, [r3, #60]	; 0x3c

   return ;
 801165a:	e002      	b.n	8011662 <Read_Parameter+0xfa>
	   return ;
 801165c:	bf00      	nop
 801165e:	e000      	b.n	8011662 <Read_Parameter+0xfa>
	   return ;
 8011660:	bf00      	nop
 }
 8011662:	370c      	adds	r7, #12
 8011664:	46bd      	mov	sp, r7
 8011666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801166a:	4770      	bx	lr
 801166c:	0800806e 	.word	0x0800806e
 8011670:	20000298 	.word	0x20000298
 8011674:	20002814 	.word	0x20002814
 8011678:	08008000 	.word	0x08008000
 801167c:	2000079e 	.word	0x2000079e
 8011680:	20000538 	.word	0x20000538

08011684 <Save_Kpg>:
 /*******************************************************************************
  Save_Kpg:                       Return: 0= Success
 *******************************************************************************/
 char Save_Kpg(void)
 {
 8011684:	b580      	push	{r7, lr}
 8011686:	b082      	sub	sp, #8
 8011688:	af00      	add	r7, sp, #0
   short i, j;
   unsigned short* ptr;

   Flash_Erase.Sector = 1;
 801168a:	4b34      	ldr	r3, [pc, #208]	; (801175c <Save_Kpg+0xd8>)
 801168c:	2201      	movs	r2, #1
 801168e:	609a      	str	r2, [r3, #8]

   HAL_FLASH_Unlock();
 8011690:	f007 fe3e 	bl	8019310 <HAL_FLASH_Unlock>
   j=HAL_FLASHEx_Erase( &Flash_Erase, &err);
 8011694:	4932      	ldr	r1, [pc, #200]	; (8011760 <Save_Kpg+0xdc>)
 8011696:	4831      	ldr	r0, [pc, #196]	; (801175c <Save_Kpg+0xd8>)
 8011698:	f007 ffac 	bl	80195f4 <HAL_FLASHEx_Erase>
 801169c:	4603      	mov	r3, r0
 801169e:	80bb      	strh	r3, [r7, #4]
   if(j== HAL_OK)
 80116a0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d151      	bne.n	801174c <Save_Kpg+0xc8>
   {
     ptr=F_Buff;
 80116a8:	4b2e      	ldr	r3, [pc, #184]	; (8011764 <Save_Kpg+0xe0>)
 80116aa:	603b      	str	r3, [r7, #0]
     *ptr++=0xaa55;
 80116ac:	683b      	ldr	r3, [r7, #0]
 80116ae:	1c9a      	adds	r2, r3, #2
 80116b0:	603a      	str	r2, [r7, #0]
 80116b2:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80116b6:	801a      	strh	r2, [r3, #0]
     *ptr++=0x0400;                              //Ver:3.00
 80116b8:	683b      	ldr	r3, [r7, #0]
 80116ba:	1c9a      	adds	r2, r3, #2
 80116bc:	603a      	str	r2, [r7, #0]
 80116be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80116c2:	801a      	strh	r2, [r3, #0]
     *ptr++=Cal_Flag;
 80116c4:	4b28      	ldr	r3, [pc, #160]	; (8011768 <Save_Kpg+0xe4>)
 80116c6:	7819      	ldrb	r1, [r3, #0]
 80116c8:	683b      	ldr	r3, [r7, #0]
 80116ca:	1c9a      	adds	r2, r3, #2
 80116cc:	603a      	str	r2, [r7, #0]
 80116ce:	b28a      	uxth	r2, r1
 80116d0:	801a      	strh	r2, [r3, #0]
     for(i=0;i<3;i++)
 80116d2:	2300      	movs	r3, #0
 80116d4:	80fb      	strh	r3, [r7, #6]
 80116d6:	e00f      	b.n	80116f8 <Save_Kpg+0x74>
    	 *ptr++=Kpg[i];
 80116d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80116dc:	4a23      	ldr	r2, [pc, #140]	; (801176c <Save_Kpg+0xe8>)
 80116de:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 80116e2:	683b      	ldr	r3, [r7, #0]
 80116e4:	1c9a      	adds	r2, r3, #2
 80116e6:	603a      	str	r2, [r7, #0]
 80116e8:	b28a      	uxth	r2, r1
 80116ea:	801a      	strh	r2, [r3, #0]
     for(i=0;i<3;i++)
 80116ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80116f0:	b29b      	uxth	r3, r3
 80116f2:	3301      	adds	r3, #1
 80116f4:	b29b      	uxth	r3, r3
 80116f6:	80fb      	strh	r3, [r7, #6]
 80116f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80116fc:	2b02      	cmp	r3, #2
 80116fe:	ddeb      	ble.n	80116d8 <Save_Kpg+0x54>
     ptr=F_Buff;
 8011700:	4b18      	ldr	r3, [pc, #96]	; (8011764 <Save_Kpg+0xe0>)
 8011702:	603b      	str	r3, [r7, #0]
     for(i=0; i<256; i+=2)
 8011704:	2300      	movs	r3, #0
 8011706:	80fb      	strh	r3, [r7, #6]
 8011708:	e01a      	b.n	8011740 <Save_Kpg+0xbc>
     {                      //128 SHORT
       j= HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Kpg_Address+i, *ptr++);
 801170a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801170e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8011712:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011716:	4619      	mov	r1, r3
 8011718:	683b      	ldr	r3, [r7, #0]
 801171a:	1c9a      	adds	r2, r3, #2
 801171c:	603a      	str	r2, [r7, #0]
 801171e:	881b      	ldrh	r3, [r3, #0]
 8011720:	b29a      	uxth	r2, r3
 8011722:	f04f 0300 	mov.w	r3, #0
 8011726:	2001      	movs	r0, #1
 8011728:	f007 fd9e 	bl	8019268 <HAL_FLASH_Program>
 801172c:	4603      	mov	r3, r0
 801172e:	80bb      	strh	r3, [r7, #4]
       if(j!= HAL_OK)
 8011730:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d108      	bne.n	801174a <Save_Kpg+0xc6>
     for(i=0; i<256; i+=2)
 8011738:	88fb      	ldrh	r3, [r7, #6]
 801173a:	3302      	adds	r3, #2
 801173c:	b29b      	uxth	r3, r3
 801173e:	80fb      	strh	r3, [r7, #6]
 8011740:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011744:	2bff      	cmp	r3, #255	; 0xff
 8011746:	dde0      	ble.n	801170a <Save_Kpg+0x86>
 8011748:	e000      	b.n	801174c <Save_Kpg+0xc8>
    	   break;
 801174a:	bf00      	nop
     }
   }
   HAL_FLASH_Lock();
 801174c:	f007 fe02 	bl	8019354 <HAL_FLASH_Lock>
   return j;
 8011750:	88bb      	ldrh	r3, [r7, #4]
 8011752:	b2db      	uxtb	r3, r3
 }
 8011754:	4618      	mov	r0, r3
 8011756:	3708      	adds	r7, #8
 8011758:	46bd      	mov	sp, r7
 801175a:	bd80      	pop	{r7, pc}
 801175c:	200001b8 	.word	0x200001b8
 8011760:	20002818 	.word	0x20002818
 8011764:	200017d8 	.word	0x200017d8
 8011768:	200001b4 	.word	0x200001b4
 801176c:	2000056c 	.word	0x2000056c

08011770 <Read_Kpg>:
 /*******************************************************************************
 Read_Kpg:
 *******************************************************************************/
 void Read_Kpg(void)
 {
 8011770:	b480      	push	{r7}
 8011772:	b083      	sub	sp, #12
 8011774:	af00      	add	r7, sp, #0
   short i;
   unsigned short* ptr;
   ptr=(unsigned short*)Kpg_Address;
 8011776:	4b1c      	ldr	r3, [pc, #112]	; (80117e8 <Read_Kpg+0x78>)
 8011778:	603b      	str	r3, [r7, #0]
   if(*ptr++!=0xaa55)
 801177a:	683b      	ldr	r3, [r7, #0]
 801177c:	1c9a      	adds	r2, r3, #2
 801177e:	603a      	str	r2, [r7, #0]
 8011780:	881b      	ldrh	r3, [r3, #0]
 8011782:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8011786:	4293      	cmp	r3, r2
 8011788:	d125      	bne.n	80117d6 <Read_Kpg+0x66>
	   return ;
   if(*ptr++!=0x0400)
 801178a:	683b      	ldr	r3, [r7, #0]
 801178c:	1c9a      	adds	r2, r3, #2
 801178e:	603a      	str	r2, [r7, #0]
 8011790:	881b      	ldrh	r3, [r3, #0]
 8011792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011796:	d120      	bne.n	80117da <Read_Kpg+0x6a>
	   return ;
   Cal_Flag = *ptr++;
 8011798:	683b      	ldr	r3, [r7, #0]
 801179a:	1c9a      	adds	r2, r3, #2
 801179c:	603a      	str	r2, [r7, #0]
 801179e:	881b      	ldrh	r3, [r3, #0]
 80117a0:	b2da      	uxtb	r2, r3
 80117a2:	4b12      	ldr	r3, [pc, #72]	; (80117ec <Read_Kpg+0x7c>)
 80117a4:	701a      	strb	r2, [r3, #0]
   for(i=0;i< 3;i++)
 80117a6:	2300      	movs	r3, #0
 80117a8:	80fb      	strh	r3, [r7, #6]
 80117aa:	e00f      	b.n	80117cc <Read_Kpg+0x5c>
       Kpg[i] = *ptr++;  //CH_A,CH_B
 80117ac:	683b      	ldr	r3, [r7, #0]
 80117ae:	1c9a      	adds	r2, r3, #2
 80117b0:	603a      	str	r2, [r7, #0]
 80117b2:	881a      	ldrh	r2, [r3, #0]
 80117b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80117b8:	b211      	sxth	r1, r2
 80117ba:	4a0d      	ldr	r2, [pc, #52]	; (80117f0 <Read_Kpg+0x80>)
 80117bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(i=0;i< 3;i++)
 80117c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80117c4:	b29b      	uxth	r3, r3
 80117c6:	3301      	adds	r3, #1
 80117c8:	b29b      	uxth	r3, r3
 80117ca:	80fb      	strh	r3, [r7, #6]
 80117cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80117d0:	2b02      	cmp	r3, #2
 80117d2:	ddeb      	ble.n	80117ac <Read_Kpg+0x3c>
   return ;
 80117d4:	e002      	b.n	80117dc <Read_Kpg+0x6c>
	   return ;
 80117d6:	bf00      	nop
 80117d8:	e000      	b.n	80117dc <Read_Kpg+0x6c>
	   return ;
 80117da:	bf00      	nop
 }
 80117dc:	370c      	adds	r7, #12
 80117de:	46bd      	mov	sp, r7
 80117e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e4:	4770      	bx	lr
 80117e6:	bf00      	nop
 80117e8:	08004000 	.word	0x08004000
 80117ec:	200001b4 	.word	0x200001b4
 80117f0:	2000056c 	.word	0x2000056c

080117f4 <Restore>:

 void Restore(void)
 {
 80117f4:	b580      	push	{r7, lr}
 80117f6:	b082      	sub	sp, #8
 80117f8:	af00      	add	r7, sp, #0
   short i;
   TIM_BASE_Val=List[TIM_BASE].Val;
 80117fa:	4b2d      	ldr	r3, [pc, #180]	; (80118b0 <Restore+0xbc>)
 80117fc:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8011800:	4b2c      	ldr	r3, [pc, #176]	; (80118b4 <Restore+0xc0>)
 8011802:	801a      	strh	r2, [r3, #0]
   Current=0;
 8011804:	4b2c      	ldr	r3, [pc, #176]	; (80118b8 <Restore+0xc4>)
 8011806:	2200      	movs	r2, #0
 8011808:	801a      	strh	r2, [r3, #0]
   List[MenuNow[Current]].Flg |= UPD;
 801180a:	4b2b      	ldr	r3, [pc, #172]	; (80118b8 <Restore+0xc4>)
 801180c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011810:	461a      	mov	r2, r3
 8011812:	4b2a      	ldr	r3, [pc, #168]	; (80118bc <Restore+0xc8>)
 8011814:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8011818:	4a25      	ldr	r2, [pc, #148]	; (80118b0 <Restore+0xbc>)
 801181a:	00db      	lsls	r3, r3, #3
 801181c:	4413      	add	r3, r2
 801181e:	799b      	ldrb	r3, [r3, #6]
 8011820:	4a25      	ldr	r2, [pc, #148]	; (80118b8 <Restore+0xc4>)
 8011822:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011826:	4611      	mov	r1, r2
 8011828:	4a24      	ldr	r2, [pc, #144]	; (80118bc <Restore+0xc8>)
 801182a:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 801182e:	4610      	mov	r0, r2
 8011830:	f043 0320 	orr.w	r3, r3, #32
 8011834:	b2d9      	uxtb	r1, r3
 8011836:	4a1e      	ldr	r2, [pc, #120]	; (80118b0 <Restore+0xbc>)
 8011838:	00c3      	lsls	r3, r0, #3
 801183a:	4413      	add	r3, r2
 801183c:	460a      	mov	r2, r1
 801183e:	719a      	strb	r2, [r3, #6]
   for(i=0;i<42;i++)
 8011840:	2300      	movs	r3, #0
 8011842:	80fb      	strh	r3, [r7, #6]
 8011844:	e013      	b.n	801186e <Restore+0x7a>
	   List[i].Val= List_c[i].Val;
 8011846:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801184a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801184e:	491c      	ldr	r1, [pc, #112]	; (80118c0 <Restore+0xcc>)
 8011850:	00db      	lsls	r3, r3, #3
 8011852:	440b      	add	r3, r1
 8011854:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 8011858:	4915      	ldr	r1, [pc, #84]	; (80118b0 <Restore+0xbc>)
 801185a:	00d3      	lsls	r3, r2, #3
 801185c:	440b      	add	r3, r1
 801185e:	4602      	mov	r2, r0
 8011860:	809a      	strh	r2, [r3, #4]
   for(i=0;i<42;i++)
 8011862:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011866:	b29b      	uxth	r3, r3
 8011868:	3301      	adds	r3, #1
 801186a:	b29b      	uxth	r3, r3
 801186c:	80fb      	strh	r3, [r7, #6]
 801186e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011872:	2b29      	cmp	r3, #41	; 0x29
 8011874:	dde7      	ble.n	8011846 <Restore+0x52>
   for(i=0;i<8;i++)
 8011876:	2300      	movs	r3, #0
 8011878:	80fb      	strh	r3, [r7, #6]
 801187a:	e00f      	b.n	801189c <Restore+0xa8>
	   MenuNow[i]= MenuNow_C[i];
 801187c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011880:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011884:	490f      	ldr	r1, [pc, #60]	; (80118c4 <Restore+0xd0>)
 8011886:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 801188a:	4a0c      	ldr	r2, [pc, #48]	; (80118bc <Restore+0xc8>)
 801188c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(i=0;i<8;i++)
 8011890:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011894:	b29b      	uxth	r3, r3
 8011896:	3301      	adds	r3, #1
 8011898:	b29b      	uxth	r3, r3
 801189a:	80fb      	strh	r3, [r7, #6]
 801189c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80118a0:	2b07      	cmp	r3, #7
 80118a2:	ddeb      	ble.n	801187c <Restore+0x88>
   Update_Title();
 80118a4:	f000 fdec 	bl	8012480 <Update_Title>
}
 80118a8:	bf00      	nop
 80118aa:	3708      	adds	r7, #8
 80118ac:	46bd      	mov	sp, r7
 80118ae:	bd80      	pop	{r7, pc}
 80118b0:	20000298 	.word	0x20000298
 80118b4:	20002814 	.word	0x20002814
 80118b8:	2000079e 	.word	0x2000079e
 80118bc:	20000538 	.word	0x20000538
 80118c0:	200003e8 	.word	0x200003e8
 80118c4:	08001ef8 	.word	0x08001ef8

080118c8 <Restore_CalPar>:

 void Restore_CalPar(void)
 {
 80118c8:	b580      	push	{r7, lr}
 80118ca:	b082      	sub	sp, #8
 80118cc:	af00      	add	r7, sp, #0
   short i = 0;
 80118ce:	2300      	movs	r3, #0
 80118d0:	80fb      	strh	r3, [r7, #6]
   List[SMPL_DPTH].Flg |= UPD;
 80118d2:	4b47      	ldr	r3, [pc, #284]	; (80119f0 <Restore_CalPar+0x128>)
 80118d4:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80118d8:	f043 0320 	orr.w	r3, r3, #32
 80118dc:	b2da      	uxtb	r2, r3
 80118de:	4b44      	ldr	r3, [pc, #272]	; (80119f0 <Restore_CalPar+0x128>)
 80118e0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
   TIM_BASE_Val=List[TIM_BASE].Val;
 80118e4:	4b42      	ldr	r3, [pc, #264]	; (80119f0 <Restore_CalPar+0x128>)
 80118e6:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 80118ea:	4b42      	ldr	r3, [pc, #264]	; (80119f4 <Restore_CalPar+0x12c>)
 80118ec:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 80118ee:	4b40      	ldr	r3, [pc, #256]	; (80119f0 <Restore_CalPar+0x128>)
 80118f0:	2200      	movs	r2, #0
 80118f2:	879a      	strh	r2, [r3, #60]	; 0x3c
   Current=0;
 80118f4:	4b40      	ldr	r3, [pc, #256]	; (80119f8 <Restore_CalPar+0x130>)
 80118f6:	2200      	movs	r2, #0
 80118f8:	801a      	strh	r2, [r3, #0]
   List[MenuNow[Current]].Flg |= UPD;
 80118fa:	4b3f      	ldr	r3, [pc, #252]	; (80119f8 <Restore_CalPar+0x130>)
 80118fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011900:	461a      	mov	r2, r3
 8011902:	4b3e      	ldr	r3, [pc, #248]	; (80119fc <Restore_CalPar+0x134>)
 8011904:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8011908:	4a39      	ldr	r2, [pc, #228]	; (80119f0 <Restore_CalPar+0x128>)
 801190a:	00db      	lsls	r3, r3, #3
 801190c:	4413      	add	r3, r2
 801190e:	799b      	ldrb	r3, [r3, #6]
 8011910:	4a39      	ldr	r2, [pc, #228]	; (80119f8 <Restore_CalPar+0x130>)
 8011912:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011916:	4611      	mov	r1, r2
 8011918:	4a38      	ldr	r2, [pc, #224]	; (80119fc <Restore_CalPar+0x134>)
 801191a:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 801191e:	4610      	mov	r0, r2
 8011920:	f043 0320 	orr.w	r3, r3, #32
 8011924:	b2d9      	uxtb	r1, r3
 8011926:	4a32      	ldr	r2, [pc, #200]	; (80119f0 <Restore_CalPar+0x128>)
 8011928:	00c3      	lsls	r3, r0, #3
 801192a:	4413      	add	r3, r2
 801192c:	460a      	mov	r2, r1
 801192e:	719a      	strb	r2, [r3, #6]
   for(i=0;i<42;i++) List[i].Val= List_c[i].Val;
 8011930:	2300      	movs	r3, #0
 8011932:	80fb      	strh	r3, [r7, #6]
 8011934:	e013      	b.n	801195e <Restore_CalPar+0x96>
 8011936:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801193a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801193e:	4930      	ldr	r1, [pc, #192]	; (8011a00 <Restore_CalPar+0x138>)
 8011940:	00db      	lsls	r3, r3, #3
 8011942:	440b      	add	r3, r1
 8011944:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 8011948:	4929      	ldr	r1, [pc, #164]	; (80119f0 <Restore_CalPar+0x128>)
 801194a:	00d3      	lsls	r3, r2, #3
 801194c:	440b      	add	r3, r1
 801194e:	4602      	mov	r2, r0
 8011950:	809a      	strh	r2, [r3, #4]
 8011952:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011956:	b29b      	uxth	r3, r3
 8011958:	3301      	adds	r3, #1
 801195a:	b29b      	uxth	r3, r3
 801195c:	80fb      	strh	r3, [r7, #6]
 801195e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011962:	2b29      	cmp	r3, #41	; 0x29
 8011964:	dde7      	ble.n	8011936 <Restore_CalPar+0x6e>
   for(i=0;i<8;i++)  MenuNow[i]= MenuNow_C[i];
 8011966:	2300      	movs	r3, #0
 8011968:	80fb      	strh	r3, [r7, #6]
 801196a:	e00f      	b.n	801198c <Restore_CalPar+0xc4>
 801196c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011970:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011974:	4923      	ldr	r1, [pc, #140]	; (8011a04 <Restore_CalPar+0x13c>)
 8011976:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 801197a:	4a20      	ldr	r2, [pc, #128]	; (80119fc <Restore_CalPar+0x134>)
 801197c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8011980:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011984:	b29b      	uxth	r3, r3
 8011986:	3301      	adds	r3, #1
 8011988:	b29b      	uxth	r3, r3
 801198a:	80fb      	strh	r3, [r7, #6]
 801198c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011990:	2b07      	cmp	r3, #7
 8011992:	ddeb      	ble.n	801196c <Restore_CalPar+0xa4>
   TIM_BASE_Val=List[TIM_BASE].Val;
 8011994:	4b16      	ldr	r3, [pc, #88]	; (80119f0 <Restore_CalPar+0x128>)
 8011996:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 801199a:	4b16      	ldr	r3, [pc, #88]	; (80119f4 <Restore_CalPar+0x12c>)
 801199c:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 801199e:	4b14      	ldr	r3, [pc, #80]	; (80119f0 <Restore_CalPar+0x128>)
 80119a0:	2200      	movs	r2, #0
 80119a2:	879a      	strh	r2, [r3, #60]	; 0x3c
   for(i=Y_RANGES; i<=STANDBY; i++){
 80119a4:	2300      	movs	r3, #0
 80119a6:	80fb      	strh	r3, [r7, #6]
 80119a8:	e015      	b.n	80119d6 <Restore_CalPar+0x10e>
   List[i].Flg |= UPD;
 80119aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80119ae:	4a10      	ldr	r2, [pc, #64]	; (80119f0 <Restore_CalPar+0x128>)
 80119b0:	00db      	lsls	r3, r3, #3
 80119b2:	4413      	add	r3, r2
 80119b4:	799a      	ldrb	r2, [r3, #6]
 80119b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80119ba:	f042 0220 	orr.w	r2, r2, #32
 80119be:	b2d1      	uxtb	r1, r2
 80119c0:	4a0b      	ldr	r2, [pc, #44]	; (80119f0 <Restore_CalPar+0x128>)
 80119c2:	00db      	lsls	r3, r3, #3
 80119c4:	4413      	add	r3, r2
 80119c6:	460a      	mov	r2, r1
 80119c8:	719a      	strb	r2, [r3, #6]
   for(i=Y_RANGES; i<=STANDBY; i++){
 80119ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80119ce:	b29b      	uxth	r3, r3
 80119d0:	3301      	adds	r3, #1
 80119d2:	b29b      	uxth	r3, r3
 80119d4:	80fb      	strh	r3, [r7, #6]
 80119d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80119da:	2b29      	cmp	r3, #41	; 0x29
 80119dc:	dde5      	ble.n	80119aa <Restore_CalPar+0xe2>
   }
   Update_Title();
 80119de:	f000 fd4f 	bl	8012480 <Update_Title>
   Close_Pop();
 80119e2:	f7fc ff0d 	bl	800e800 <Close_Pop>
 }
 80119e6:	bf00      	nop
 80119e8:	3708      	adds	r7, #8
 80119ea:	46bd      	mov	sp, r7
 80119ec:	bd80      	pop	{r7, pc}
 80119ee:	bf00      	nop
 80119f0:	20000298 	.word	0x20000298
 80119f4:	20002814 	.word	0x20002814
 80119f8:	2000079e 	.word	0x2000079e
 80119fc:	20000538 	.word	0x20000538
 8011a00:	200003e8 	.word	0x200003e8
 8011a04:	08001ef8 	.word	0x08001ef8

08011a08 <u8ToDec3>:
 8011a08:	b480      	push	{r7}
 8011a0a:	b083      	sub	sp, #12
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	6078      	str	r0, [r7, #4]
 8011a10:	460b      	mov	r3, r1
 8011a12:	70fb      	strb	r3, [r7, #3]
 8011a14:	78fb      	ldrb	r3, [r7, #3]
 8011a16:	4a1e      	ldr	r2, [pc, #120]	; (8011a90 <u8ToDec3+0x88>)
 8011a18:	fba2 2303 	umull	r2, r3, r2, r3
 8011a1c:	095b      	lsrs	r3, r3, #5
 8011a1e:	b2da      	uxtb	r2, r3
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	1c59      	adds	r1, r3, #1
 8011a24:	6079      	str	r1, [r7, #4]
 8011a26:	3230      	adds	r2, #48	; 0x30
 8011a28:	b2d2      	uxtb	r2, r2
 8011a2a:	701a      	strb	r2, [r3, #0]
 8011a2c:	78fb      	ldrb	r3, [r7, #3]
 8011a2e:	4a18      	ldr	r2, [pc, #96]	; (8011a90 <u8ToDec3+0x88>)
 8011a30:	fba2 1203 	umull	r1, r2, r2, r3
 8011a34:	0952      	lsrs	r2, r2, #5
 8011a36:	2164      	movs	r1, #100	; 0x64
 8011a38:	fb01 f202 	mul.w	r2, r1, r2
 8011a3c:	1a9b      	subs	r3, r3, r2
 8011a3e:	70fb      	strb	r3, [r7, #3]
 8011a40:	78fb      	ldrb	r3, [r7, #3]
 8011a42:	4a14      	ldr	r2, [pc, #80]	; (8011a94 <u8ToDec3+0x8c>)
 8011a44:	fba2 2303 	umull	r2, r3, r2, r3
 8011a48:	08db      	lsrs	r3, r3, #3
 8011a4a:	b2da      	uxtb	r2, r3
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	1c59      	adds	r1, r3, #1
 8011a50:	6079      	str	r1, [r7, #4]
 8011a52:	3230      	adds	r2, #48	; 0x30
 8011a54:	b2d2      	uxtb	r2, r2
 8011a56:	701a      	strb	r2, [r3, #0]
 8011a58:	78fa      	ldrb	r2, [r7, #3]
 8011a5a:	4b0e      	ldr	r3, [pc, #56]	; (8011a94 <u8ToDec3+0x8c>)
 8011a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8011a60:	08d9      	lsrs	r1, r3, #3
 8011a62:	460b      	mov	r3, r1
 8011a64:	009b      	lsls	r3, r3, #2
 8011a66:	440b      	add	r3, r1
 8011a68:	005b      	lsls	r3, r3, #1
 8011a6a:	1ad3      	subs	r3, r2, r3
 8011a6c:	70fb      	strb	r3, [r7, #3]
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	1c5a      	adds	r2, r3, #1
 8011a72:	607a      	str	r2, [r7, #4]
 8011a74:	78fa      	ldrb	r2, [r7, #3]
 8011a76:	3230      	adds	r2, #48	; 0x30
 8011a78:	b2d2      	uxtb	r2, r2
 8011a7a:	701a      	strb	r2, [r3, #0]
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	2200      	movs	r2, #0
 8011a80:	701a      	strb	r2, [r3, #0]
 8011a82:	bf00      	nop
 8011a84:	370c      	adds	r7, #12
 8011a86:	46bd      	mov	sp, r7
 8011a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a8c:	4770      	bx	lr
 8011a8e:	bf00      	nop
 8011a90:	51eb851f 	.word	0x51eb851f
 8011a94:	cccccccd 	.word	0xcccccccd

08011a98 <memset16>:
 8011a98:	b480      	push	{r7}
 8011a9a:	b083      	sub	sp, #12
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	6078      	str	r0, [r7, #4]
 8011aa0:	460b      	mov	r3, r1
 8011aa2:	807b      	strh	r3, [r7, #2]
 8011aa4:	4613      	mov	r3, r2
 8011aa6:	803b      	strh	r3, [r7, #0]
 8011aa8:	e00a      	b.n	8011ac0 <memset16+0x28>
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	1c9a      	adds	r2, r3, #2
 8011aae:	607a      	str	r2, [r7, #4]
 8011ab0:	887a      	ldrh	r2, [r7, #2]
 8011ab2:	801a      	strh	r2, [r3, #0]
 8011ab4:	f9b7 3000 	ldrsh.w	r3, [r7]
 8011ab8:	b29b      	uxth	r3, r3
 8011aba:	3b01      	subs	r3, #1
 8011abc:	b29b      	uxth	r3, r3
 8011abe:	803b      	strh	r3, [r7, #0]
 8011ac0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d1f0      	bne.n	8011aaa <memset16+0x12>
 8011ac8:	bf00      	nop
 8011aca:	bf00      	nop
 8011acc:	370c      	adds	r7, #12
 8011ace:	46bd      	mov	sp, r7
 8011ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad4:	4770      	bx	lr
	...

08011ad8 <Value2Str>:
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b088      	sub	sp, #32
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	60f8      	str	r0, [r7, #12]
 8011ae0:	60b9      	str	r1, [r7, #8]
 8011ae2:	607a      	str	r2, [r7, #4]
 8011ae4:	70fb      	strb	r3, [r7, #3]
 8011ae6:	2300      	movs	r3, #0
 8011ae8:	83fb      	strh	r3, [r7, #30]
 8011aea:	68bb      	ldr	r3, [r7, #8]
 8011aec:	61bb      	str	r3, [r7, #24]
 8011aee:	2305      	movs	r3, #5
 8011af0:	617b      	str	r3, [r7, #20]
 8011af2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d129      	bne.n	8011b4e <Value2Str+0x76>
 8011afa:	68bb      	ldr	r3, [r7, #8]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d104      	bne.n	8011b0a <Value2Str+0x32>
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	1c5a      	adds	r2, r3, #1
 8011b04:	60fa      	str	r2, [r7, #12]
 8011b06:	2220      	movs	r2, #32
 8011b08:	701a      	strb	r2, [r3, #0]
 8011b0a:	68bb      	ldr	r3, [r7, #8]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	dd04      	ble.n	8011b1a <Value2Str+0x42>
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	1c5a      	adds	r2, r3, #1
 8011b14:	60fa      	str	r2, [r7, #12]
 8011b16:	222b      	movs	r2, #43	; 0x2b
 8011b18:	701a      	strb	r2, [r3, #0]
 8011b1a:	68bb      	ldr	r3, [r7, #8]
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	da16      	bge.n	8011b4e <Value2Str+0x76>
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	1c5a      	adds	r2, r3, #1
 8011b24:	60fa      	str	r2, [r7, #12]
 8011b26:	222d      	movs	r2, #45	; 0x2d
 8011b28:	701a      	strb	r2, [r3, #0]
 8011b2a:	68bb      	ldr	r3, [r7, #8]
 8011b2c:	425b      	negs	r3, r3
 8011b2e:	60bb      	str	r3, [r7, #8]
 8011b30:	e00d      	b.n	8011b4e <Value2Str+0x76>
 8011b32:	69bb      	ldr	r3, [r7, #24]
 8011b34:	4a64      	ldr	r2, [pc, #400]	; (8011cc8 <Value2Str+0x1f0>)
 8011b36:	fb82 1203 	smull	r1, r2, r2, r3
 8011b3a:	1092      	asrs	r2, r2, #2
 8011b3c:	17db      	asrs	r3, r3, #31
 8011b3e:	1ad3      	subs	r3, r2, r3
 8011b40:	61bb      	str	r3, [r7, #24]
 8011b42:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011b46:	b29b      	uxth	r3, r3
 8011b48:	3301      	adds	r3, #1
 8011b4a:	b29b      	uxth	r3, r3
 8011b4c:	83fb      	strh	r3, [r7, #30]
 8011b4e:	69bb      	ldr	r3, [r7, #24]
 8011b50:	2b09      	cmp	r3, #9
 8011b52:	dcee      	bgt.n	8011b32 <Value2Str+0x5a>
 8011b54:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011b58:	4b5c      	ldr	r3, [pc, #368]	; (8011ccc <Value2Str+0x1f4>)
 8011b5a:	fb83 3102 	smull	r3, r1, r3, r2
 8011b5e:	17d3      	asrs	r3, r2, #31
 8011b60:	1ac9      	subs	r1, r1, r3
 8011b62:	460b      	mov	r3, r1
 8011b64:	005b      	lsls	r3, r3, #1
 8011b66:	440b      	add	r3, r1
 8011b68:	1ad3      	subs	r3, r2, r3
 8011b6a:	b21b      	sxth	r3, r3
 8011b6c:	2b02      	cmp	r3, #2
 8011b6e:	d105      	bne.n	8011b7c <Value2Str+0xa4>
 8011b70:	78fb      	ldrb	r3, [r7, #3]
 8011b72:	2b02      	cmp	r3, #2
 8011b74:	d102      	bne.n	8011b7c <Value2Str+0xa4>
 8011b76:	78fb      	ldrb	r3, [r7, #3]
 8011b78:	3301      	adds	r3, #1
 8011b7a:	70fb      	strb	r3, [r7, #3]
 8011b7c:	68bb      	ldr	r3, [r7, #8]
 8011b7e:	61bb      	str	r3, [r7, #24]
 8011b80:	2300      	movs	r3, #0
 8011b82:	83fb      	strh	r3, [r7, #30]
 8011b84:	e016      	b.n	8011bb4 <Value2Str+0xdc>
 8011b86:	69bb      	ldr	r3, [r7, #24]
 8011b88:	4a4f      	ldr	r2, [pc, #316]	; (8011cc8 <Value2Str+0x1f0>)
 8011b8a:	fb82 1203 	smull	r1, r2, r2, r3
 8011b8e:	1092      	asrs	r2, r2, #2
 8011b90:	17db      	asrs	r3, r3, #31
 8011b92:	1ad3      	subs	r3, r2, r3
 8011b94:	61bb      	str	r3, [r7, #24]
 8011b96:	8bfb      	ldrh	r3, [r7, #30]
 8011b98:	3301      	adds	r3, #1
 8011b9a:	b29b      	uxth	r3, r3
 8011b9c:	83fb      	strh	r3, [r7, #30]
 8011b9e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011ba2:	78fb      	ldrb	r3, [r7, #3]
 8011ba4:	429a      	cmp	r2, r3
 8011ba6:	dd05      	ble.n	8011bb4 <Value2Str+0xdc>
 8011ba8:	697a      	ldr	r2, [r7, #20]
 8011baa:	4613      	mov	r3, r2
 8011bac:	009b      	lsls	r3, r3, #2
 8011bae:	4413      	add	r3, r2
 8011bb0:	005b      	lsls	r3, r3, #1
 8011bb2:	617b      	str	r3, [r7, #20]
 8011bb4:	69bb      	ldr	r3, [r7, #24]
 8011bb6:	2b09      	cmp	r3, #9
 8011bb8:	dce5      	bgt.n	8011b86 <Value2Str+0xae>
 8011bba:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011bbe:	78fb      	ldrb	r3, [r7, #3]
 8011bc0:	429a      	cmp	r2, r3
 8011bc2:	db03      	blt.n	8011bcc <Value2Str+0xf4>
 8011bc4:	68ba      	ldr	r2, [r7, #8]
 8011bc6:	697b      	ldr	r3, [r7, #20]
 8011bc8:	4413      	add	r3, r2
 8011bca:	60bb      	str	r3, [r7, #8]
 8011bcc:	68bb      	ldr	r3, [r7, #8]
 8011bce:	61bb      	str	r3, [r7, #24]
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	83fb      	strh	r3, [r7, #30]
 8011bd4:	e00d      	b.n	8011bf2 <Value2Str+0x11a>
 8011bd6:	69bb      	ldr	r3, [r7, #24]
 8011bd8:	4a3b      	ldr	r2, [pc, #236]	; (8011cc8 <Value2Str+0x1f0>)
 8011bda:	fb82 1203 	smull	r1, r2, r2, r3
 8011bde:	1092      	asrs	r2, r2, #2
 8011be0:	17db      	asrs	r3, r3, #31
 8011be2:	1ad3      	subs	r3, r2, r3
 8011be4:	61bb      	str	r3, [r7, #24]
 8011be6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011bea:	b29b      	uxth	r3, r3
 8011bec:	3301      	adds	r3, #1
 8011bee:	b29b      	uxth	r3, r3
 8011bf0:	83fb      	strh	r3, [r7, #30]
 8011bf2:	69bb      	ldr	r3, [r7, #24]
 8011bf4:	2b09      	cmp	r3, #9
 8011bf6:	dcee      	bgt.n	8011bd6 <Value2Str+0xfe>
 8011bf8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011bfc:	4a33      	ldr	r2, [pc, #204]	; (8011ccc <Value2Str+0x1f4>)
 8011bfe:	fb82 1203 	smull	r1, r2, r2, r3
 8011c02:	17db      	asrs	r3, r3, #31
 8011c04:	1ad3      	subs	r3, r2, r3
 8011c06:	b21b      	sxth	r3, r3
 8011c08:	61bb      	str	r3, [r7, #24]
 8011c0a:	e03e      	b.n	8011c8a <Value2Str+0x1b2>
 8011c0c:	8bfb      	ldrh	r3, [r7, #30]
 8011c0e:	b2db      	uxtb	r3, r3
 8011c10:	4618      	mov	r0, r3
 8011c12:	f000 f85d 	bl	8011cd0 <Exp>
 8011c16:	4602      	mov	r2, r0
 8011c18:	68bb      	ldr	r3, [r7, #8]
 8011c1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8011c1e:	b2da      	uxtb	r2, r3
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	1c59      	adds	r1, r3, #1
 8011c24:	60f9      	str	r1, [r7, #12]
 8011c26:	3230      	adds	r2, #48	; 0x30
 8011c28:	b2d2      	uxtb	r2, r2
 8011c2a:	701a      	strb	r2, [r3, #0]
 8011c2c:	78fb      	ldrb	r3, [r7, #3]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d012      	beq.n	8011c58 <Value2Str+0x180>
 8011c32:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011c36:	4b25      	ldr	r3, [pc, #148]	; (8011ccc <Value2Str+0x1f4>)
 8011c38:	fb83 3102 	smull	r3, r1, r3, r2
 8011c3c:	17d3      	asrs	r3, r2, #31
 8011c3e:	1ac9      	subs	r1, r1, r3
 8011c40:	460b      	mov	r3, r1
 8011c42:	005b      	lsls	r3, r3, #1
 8011c44:	440b      	add	r3, r1
 8011c46:	1ad3      	subs	r3, r2, r3
 8011c48:	b21b      	sxth	r3, r3
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d104      	bne.n	8011c58 <Value2Str+0x180>
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	1c5a      	adds	r2, r3, #1
 8011c52:	60fa      	str	r2, [r7, #12]
 8011c54:	222e      	movs	r2, #46	; 0x2e
 8011c56:	701a      	strb	r2, [r3, #0]
 8011c58:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	db0c      	blt.n	8011c7a <Value2Str+0x1a2>
 8011c60:	8bfb      	ldrh	r3, [r7, #30]
 8011c62:	b2db      	uxtb	r3, r3
 8011c64:	4618      	mov	r0, r3
 8011c66:	f000 f833 	bl	8011cd0 <Exp>
 8011c6a:	4602      	mov	r2, r0
 8011c6c:	68bb      	ldr	r3, [r7, #8]
 8011c6e:	fb93 f1f2 	sdiv	r1, r3, r2
 8011c72:	fb02 f201 	mul.w	r2, r2, r1
 8011c76:	1a9b      	subs	r3, r3, r2
 8011c78:	e000      	b.n	8011c7c <Value2Str+0x1a4>
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	60bb      	str	r3, [r7, #8]
 8011c7e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011c82:	b29b      	uxth	r3, r3
 8011c84:	3b01      	subs	r3, #1
 8011c86:	b29b      	uxth	r3, r3
 8011c88:	83fb      	strh	r3, [r7, #30]
 8011c8a:	78fb      	ldrb	r3, [r7, #3]
 8011c8c:	1e5a      	subs	r2, r3, #1
 8011c8e:	70fa      	strb	r2, [r7, #3]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d1bb      	bne.n	8011c0c <Value2Str+0x134>
 8011c94:	69ba      	ldr	r2, [r7, #24]
 8011c96:	4613      	mov	r3, r2
 8011c98:	005b      	lsls	r3, r3, #1
 8011c9a:	4413      	add	r3, r2
 8011c9c:	005b      	lsls	r3, r3, #1
 8011c9e:	461a      	mov	r2, r3
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	4413      	add	r3, r2
 8011ca4:	607b      	str	r3, [r7, #4]
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	1c5a      	adds	r2, r3, #1
 8011caa:	60fa      	str	r2, [r7, #12]
 8011cac:	687a      	ldr	r2, [r7, #4]
 8011cae:	7812      	ldrb	r2, [r2, #0]
 8011cb0:	701a      	strb	r2, [r3, #0]
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	1c5a      	adds	r2, r3, #1
 8011cb6:	607a      	str	r2, [r7, #4]
 8011cb8:	781b      	ldrb	r3, [r3, #0]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d1f3      	bne.n	8011ca6 <Value2Str+0x1ce>
 8011cbe:	bf00      	nop
 8011cc0:	bf00      	nop
 8011cc2:	3720      	adds	r7, #32
 8011cc4:	46bd      	mov	sp, r7
 8011cc6:	bd80      	pop	{r7, pc}
 8011cc8:	66666667 	.word	0x66666667
 8011ccc:	55555556 	.word	0x55555556

08011cd0 <Exp>:
 8011cd0:	b480      	push	{r7}
 8011cd2:	b085      	sub	sp, #20
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	4603      	mov	r3, r0
 8011cd8:	71fb      	strb	r3, [r7, #7]
 8011cda:	2301      	movs	r3, #1
 8011cdc:	60fb      	str	r3, [r7, #12]
 8011cde:	e005      	b.n	8011cec <Exp+0x1c>
 8011ce0:	68fa      	ldr	r2, [r7, #12]
 8011ce2:	4613      	mov	r3, r2
 8011ce4:	009b      	lsls	r3, r3, #2
 8011ce6:	4413      	add	r3, r2
 8011ce8:	005b      	lsls	r3, r3, #1
 8011cea:	60fb      	str	r3, [r7, #12]
 8011cec:	79fb      	ldrb	r3, [r7, #7]
 8011cee:	1e5a      	subs	r2, r3, #1
 8011cf0:	71fa      	strb	r2, [r7, #7]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d1f4      	bne.n	8011ce0 <Exp+0x10>
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	3714      	adds	r7, #20
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d02:	4770      	bx	lr

08011d04 <Sqrt32>:
 8011d04:	b580      	push	{r7, lr}
 8011d06:	b084      	sub	sp, #16
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	6078      	str	r0, [r7, #4]
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d101      	bne.n	8011d16 <Sqrt32+0x12>
 8011d12:	2300      	movs	r3, #0
 8011d14:	e019      	b.n	8011d4a <Sqrt32+0x46>
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	da00      	bge.n	8011d1e <Sqrt32+0x1a>
 8011d1c:	3303      	adds	r3, #3
 8011d1e:	109b      	asrs	r3, r3, #2
 8011d20:	4618      	mov	r0, r3
 8011d22:	f7ff ffef 	bl	8011d04 <Sqrt32>
 8011d26:	4603      	mov	r3, r0
 8011d28:	005b      	lsls	r3, r3, #1
 8011d2a:	3301      	adds	r3, #1
 8011d2c:	60fb      	str	r3, [r7, #12]
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	fb03 f303 	mul.w	r3, r3, r3
 8011d34:	687a      	ldr	r2, [r7, #4]
 8011d36:	429a      	cmp	r2, r3
 8011d38:	da05      	bge.n	8011d46 <Sqrt32+0x42>
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	b29b      	uxth	r3, r3
 8011d3e:	3b01      	subs	r3, #1
 8011d40:	b29b      	uxth	r3, r3
 8011d42:	b21b      	sxth	r3, r3
 8011d44:	e001      	b.n	8011d4a <Sqrt32+0x46>
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	b21b      	sxth	r3, r3
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	3710      	adds	r7, #16
 8011d4e:	46bd      	mov	sp, r7
 8011d50:	bd80      	pop	{r7, pc}
	...

08011d54 <u16ToDec4Str>:
 8011d54:	b480      	push	{r7}
 8011d56:	b083      	sub	sp, #12
 8011d58:	af00      	add	r7, sp, #0
 8011d5a:	6078      	str	r0, [r7, #4]
 8011d5c:	460b      	mov	r3, r1
 8011d5e:	807b      	strh	r3, [r7, #2]
 8011d60:	887b      	ldrh	r3, [r7, #2]
 8011d62:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8011d66:	330f      	adds	r3, #15
 8011d68:	b29b      	uxth	r3, r3
 8011d6a:	f644 621e 	movw	r2, #19998	; 0x4e1e
 8011d6e:	4293      	cmp	r3, r2
 8011d70:	d917      	bls.n	8011da2 <u16ToDec4Str+0x4e>
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	1c5a      	adds	r2, r3, #1
 8011d76:	607a      	str	r2, [r7, #4]
 8011d78:	224f      	movs	r2, #79	; 0x4f
 8011d7a:	701a      	strb	r2, [r3, #0]
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	1c5a      	adds	r2, r3, #1
 8011d80:	607a      	str	r2, [r7, #4]
 8011d82:	2276      	movs	r2, #118	; 0x76
 8011d84:	701a      	strb	r2, [r3, #0]
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	1c5a      	adds	r2, r3, #1
 8011d8a:	607a      	str	r2, [r7, #4]
 8011d8c:	2265      	movs	r2, #101	; 0x65
 8011d8e:	701a      	strb	r2, [r3, #0]
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	1c5a      	adds	r2, r3, #1
 8011d94:	607a      	str	r2, [r7, #4]
 8011d96:	2272      	movs	r2, #114	; 0x72
 8011d98:	701a      	strb	r2, [r3, #0]
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	2200      	movs	r2, #0
 8011d9e:	701a      	strb	r2, [r3, #0]
 8011da0:	e07e      	b.n	8011ea0 <u16ToDec4Str+0x14c>
 8011da2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011da6:	4a41      	ldr	r2, [pc, #260]	; (8011eac <u16ToDec4Str+0x158>)
 8011da8:	fb82 1203 	smull	r1, r2, r2, r3
 8011dac:	1192      	asrs	r2, r2, #6
 8011dae:	17db      	asrs	r3, r3, #31
 8011db0:	1ad3      	subs	r3, r2, r3
 8011db2:	b21b      	sxth	r3, r3
 8011db4:	b2da      	uxtb	r2, r3
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	1c59      	adds	r1, r3, #1
 8011dba:	6079      	str	r1, [r7, #4]
 8011dbc:	3230      	adds	r2, #48	; 0x30
 8011dbe:	b2d2      	uxtb	r2, r2
 8011dc0:	701a      	strb	r2, [r3, #0]
 8011dc2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011dc6:	4a39      	ldr	r2, [pc, #228]	; (8011eac <u16ToDec4Str+0x158>)
 8011dc8:	fb82 1203 	smull	r1, r2, r2, r3
 8011dcc:	1191      	asrs	r1, r2, #6
 8011dce:	17da      	asrs	r2, r3, #31
 8011dd0:	1a8a      	subs	r2, r1, r2
 8011dd2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011dd6:	fb01 f202 	mul.w	r2, r1, r2
 8011dda:	1a9b      	subs	r3, r3, r2
 8011ddc:	807b      	strh	r3, [r7, #2]
 8011dde:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011de2:	4a33      	ldr	r2, [pc, #204]	; (8011eb0 <u16ToDec4Str+0x15c>)
 8011de4:	fb82 1203 	smull	r1, r2, r2, r3
 8011de8:	1152      	asrs	r2, r2, #5
 8011dea:	17db      	asrs	r3, r3, #31
 8011dec:	1ad3      	subs	r3, r2, r3
 8011dee:	b21b      	sxth	r3, r3
 8011df0:	b2da      	uxtb	r2, r3
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	1c59      	adds	r1, r3, #1
 8011df6:	6079      	str	r1, [r7, #4]
 8011df8:	3230      	adds	r2, #48	; 0x30
 8011dfa:	b2d2      	uxtb	r2, r2
 8011dfc:	701a      	strb	r2, [r3, #0]
 8011dfe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011e02:	4a2b      	ldr	r2, [pc, #172]	; (8011eb0 <u16ToDec4Str+0x15c>)
 8011e04:	fb82 1203 	smull	r1, r2, r2, r3
 8011e08:	1151      	asrs	r1, r2, #5
 8011e0a:	17da      	asrs	r2, r3, #31
 8011e0c:	1a8a      	subs	r2, r1, r2
 8011e0e:	2164      	movs	r1, #100	; 0x64
 8011e10:	fb01 f202 	mul.w	r2, r1, r2
 8011e14:	1a9b      	subs	r3, r3, r2
 8011e16:	807b      	strh	r3, [r7, #2]
 8011e18:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011e1c:	4a25      	ldr	r2, [pc, #148]	; (8011eb4 <u16ToDec4Str+0x160>)
 8011e1e:	fb82 1203 	smull	r1, r2, r2, r3
 8011e22:	1092      	asrs	r2, r2, #2
 8011e24:	17db      	asrs	r3, r3, #31
 8011e26:	1ad3      	subs	r3, r2, r3
 8011e28:	b21b      	sxth	r3, r3
 8011e2a:	b2da      	uxtb	r2, r3
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	1c59      	adds	r1, r3, #1
 8011e30:	6079      	str	r1, [r7, #4]
 8011e32:	3230      	adds	r2, #48	; 0x30
 8011e34:	b2d2      	uxtb	r2, r2
 8011e36:	701a      	strb	r2, [r3, #0]
 8011e38:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8011e3c:	4b1d      	ldr	r3, [pc, #116]	; (8011eb4 <u16ToDec4Str+0x160>)
 8011e3e:	fb83 1302 	smull	r1, r3, r3, r2
 8011e42:	1099      	asrs	r1, r3, #2
 8011e44:	17d3      	asrs	r3, r2, #31
 8011e46:	1ac9      	subs	r1, r1, r3
 8011e48:	460b      	mov	r3, r1
 8011e4a:	009b      	lsls	r3, r3, #2
 8011e4c:	440b      	add	r3, r1
 8011e4e:	005b      	lsls	r3, r3, #1
 8011e50:	1ad3      	subs	r3, r2, r3
 8011e52:	807b      	strh	r3, [r7, #2]
 8011e54:	887b      	ldrh	r3, [r7, #2]
 8011e56:	b2da      	uxtb	r2, r3
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	1c59      	adds	r1, r3, #1
 8011e5c:	6079      	str	r1, [r7, #4]
 8011e5e:	3230      	adds	r2, #48	; 0x30
 8011e60:	b2d2      	uxtb	r2, r2
 8011e62:	701a      	strb	r2, [r3, #0]
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	2200      	movs	r2, #0
 8011e68:	701a      	strb	r2, [r3, #0]
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	3b04      	subs	r3, #4
 8011e6e:	781b      	ldrb	r3, [r3, #0]
 8011e70:	2b30      	cmp	r3, #48	; 0x30
 8011e72:	d115      	bne.n	8011ea0 <u16ToDec4Str+0x14c>
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	3b04      	subs	r3, #4
 8011e78:	2220      	movs	r2, #32
 8011e7a:	701a      	strb	r2, [r3, #0]
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	3b03      	subs	r3, #3
 8011e80:	781b      	ldrb	r3, [r3, #0]
 8011e82:	2b30      	cmp	r3, #48	; 0x30
 8011e84:	d10c      	bne.n	8011ea0 <u16ToDec4Str+0x14c>
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	3b03      	subs	r3, #3
 8011e8a:	2220      	movs	r2, #32
 8011e8c:	701a      	strb	r2, [r3, #0]
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	3b02      	subs	r3, #2
 8011e92:	781b      	ldrb	r3, [r3, #0]
 8011e94:	2b30      	cmp	r3, #48	; 0x30
 8011e96:	d103      	bne.n	8011ea0 <u16ToDec4Str+0x14c>
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	3b02      	subs	r3, #2
 8011e9c:	2220      	movs	r2, #32
 8011e9e:	701a      	strb	r2, [r3, #0]
 8011ea0:	370c      	adds	r7, #12
 8011ea2:	46bd      	mov	sp, r7
 8011ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea8:	4770      	bx	lr
 8011eaa:	bf00      	nop
 8011eac:	10624dd3 	.word	0x10624dd3
 8011eb0:	51eb851f 	.word	0x51eb851f
 8011eb4:	66666667 	.word	0x66666667

08011eb8 <lcd_write_cmd_data>:
#include "Func.h"

unsigned short data[15];

void lcd_write_cmd_data( unsigned short Cmd, short Len, unsigned short *Data )
{
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	b082      	sub	sp, #8
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	4603      	mov	r3, r0
 8011ec0:	603a      	str	r2, [r7, #0]
 8011ec2:	80fb      	strh	r3, [r7, #6]
 8011ec4:	460b      	mov	r3, r1
 8011ec6:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( LcdRs_GPIO_Port, LcdRs_Pin, GPIO_PIN_RESET); // low for command
 8011ec8:	2200      	movs	r2, #0
 8011eca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011ece:	480e      	ldr	r0, [pc, #56]	; (8011f08 <lcd_write_cmd_data+0x50>)
 8011ed0:	f007 fe5e 	bl	8019b90 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (unsigned char*)&Cmd, 1, 1);// timeout 1 ms
 8011ed4:	1db9      	adds	r1, r7, #6
 8011ed6:	2301      	movs	r3, #1
 8011ed8:	2201      	movs	r2, #1
 8011eda:	480c      	ldr	r0, [pc, #48]	; (8011f0c <lcd_write_cmd_data+0x54>)
 8011edc:	f00a f95d 	bl	801c19a <HAL_SPI_Transmit>

	if(Len !=0)
 8011ee0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d00b      	beq.n	8011f00 <lcd_write_cmd_data+0x48>
	{
		HAL_GPIO_WritePin( LcdRs_GPIO_Port, LcdRs_Pin, GPIO_PIN_SET);  //high for data
 8011ee8:	2201      	movs	r2, #1
 8011eea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011eee:	4806      	ldr	r0, [pc, #24]	; (8011f08 <lcd_write_cmd_data+0x50>)
 8011ef0:	f007 fe4e 	bl	8019b90 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, (unsigned char*)Data, Len, 1);// timeout 1 ms
 8011ef4:	88ba      	ldrh	r2, [r7, #4]
 8011ef6:	2301      	movs	r3, #1
 8011ef8:	6839      	ldr	r1, [r7, #0]
 8011efa:	4804      	ldr	r0, [pc, #16]	; (8011f0c <lcd_write_cmd_data+0x54>)
 8011efc:	f00a f94d 	bl	801c19a <HAL_SPI_Transmit>
	}
}
 8011f00:	bf00      	nop
 8011f02:	3708      	adds	r7, #8
 8011f04:	46bd      	mov	sp, r7
 8011f06:	bd80      	pop	{r7, pc}
 8011f08:	40020800 	.word	0x40020800
 8011f0c:	200069c0 	.word	0x200069c0

08011f10 <Init_LCD>:

// initialize the LCD
void Init_LCD(void)
{
 8011f10:	b580      	push	{r7, lr}
 8011f12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 8011f14:	2200      	movs	r2, #0
 8011f16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011f1a:	4885      	ldr	r0, [pc, #532]	; (8012130 <Init_LCD+0x220>)
 8011f1c:	f007 fe38 	bl	8019b90 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin( Dres_GPIO_Port, Dres_Pin, GPIO_PIN_SET);  //display reset
 8011f20:	2201      	movs	r2, #1
 8011f22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011f26:	4883      	ldr	r0, [pc, #524]	; (8012134 <Init_LCD+0x224>)
 8011f28:	f007 fe32 	bl	8019b90 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8011f2c:	2001      	movs	r0, #1
 8011f2e:	f006 fa51 	bl	80183d4 <HAL_Delay>
	HAL_GPIO_WritePin( Dres_GPIO_Port, Dres_Pin, GPIO_PIN_RESET);
 8011f32:	2200      	movs	r2, #0
 8011f34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011f38:	487e      	ldr	r0, [pc, #504]	; (8012134 <Init_LCD+0x224>)
 8011f3a:	f007 fe29 	bl	8019b90 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8011f3e:	200a      	movs	r0, #10
 8011f40:	f006 fa48 	bl	80183d4 <HAL_Delay>
	HAL_GPIO_WritePin( Dres_GPIO_Port, Dres_Pin, GPIO_PIN_SET);
 8011f44:	2201      	movs	r2, #1
 8011f46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011f4a:	487a      	ldr	r0, [pc, #488]	; (8012134 <Init_LCD+0x224>)
 8011f4c:	f007 fe20 	bl	8019b90 <HAL_GPIO_WritePin>
	HAL_Delay(120);
 8011f50:	2078      	movs	r0, #120	; 0x78
 8011f52:	f006 fa3f 	bl	80183d4 <HAL_Delay>

	data[0]=0;
 8011f56:	4b78      	ldr	r3, [pc, #480]	; (8012138 <Init_LCD+0x228>)
 8011f58:	2200      	movs	r2, #0
 8011f5a:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0xb0, 1, data);  //set interface
 8011f5c:	4a76      	ldr	r2, [pc, #472]	; (8012138 <Init_LCD+0x228>)
 8011f5e:	2101      	movs	r1, #1
 8011f60:	20b0      	movs	r0, #176	; 0xb0
 8011f62:	f7ff ffa9 	bl	8011eb8 <lcd_write_cmd_data>
	lcd_write_cmd_data(0x11, 0, data);  //sleep
 8011f66:	4a74      	ldr	r2, [pc, #464]	; (8012138 <Init_LCD+0x228>)
 8011f68:	2100      	movs	r1, #0
 8011f6a:	2011      	movs	r0, #17
 8011f6c:	f7ff ffa4 	bl	8011eb8 <lcd_write_cmd_data>
	HAL_Delay(120);
 8011f70:	2078      	movs	r0, #120	; 0x78
 8011f72:	f006 fa2f 	bl	80183d4 <HAL_Delay>
	data[0]=0x55;
 8011f76:	4b70      	ldr	r3, [pc, #448]	; (8012138 <Init_LCD+0x228>)
 8011f78:	2255      	movs	r2, #85	; 0x55
 8011f7a:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0x3A, 1, data);  //set pixels to 16 bit
 8011f7c:	4a6e      	ldr	r2, [pc, #440]	; (8012138 <Init_LCD+0x228>)
 8011f7e:	2101      	movs	r1, #1
 8011f80:	203a      	movs	r0, #58	; 0x3a
 8011f82:	f7ff ff99 	bl	8011eb8 <lcd_write_cmd_data>
	data[0]=data[1]=9;
 8011f86:	4b6c      	ldr	r3, [pc, #432]	; (8012138 <Init_LCD+0x228>)
 8011f88:	2209      	movs	r2, #9
 8011f8a:	805a      	strh	r2, [r3, #2]
 8011f8c:	4b6a      	ldr	r3, [pc, #424]	; (8012138 <Init_LCD+0x228>)
 8011f8e:	885a      	ldrh	r2, [r3, #2]
 8011f90:	4b69      	ldr	r3, [pc, #420]	; (8012138 <Init_LCD+0x228>)
 8011f92:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0xc0, 2, data);  //set power
 8011f94:	4a68      	ldr	r2, [pc, #416]	; (8012138 <Init_LCD+0x228>)
 8011f96:	2102      	movs	r1, #2
 8011f98:	20c0      	movs	r0, #192	; 0xc0
 8011f9a:	f7ff ff8d 	bl	8011eb8 <lcd_write_cmd_data>
	data[0]= 0x41;
 8011f9e:	4b66      	ldr	r3, [pc, #408]	; (8012138 <Init_LCD+0x228>)
 8011fa0:	2241      	movs	r2, #65	; 0x41
 8011fa2:	801a      	strh	r2, [r3, #0]
	data[1]=0;
 8011fa4:	4b64      	ldr	r3, [pc, #400]	; (8012138 <Init_LCD+0x228>)
 8011fa6:	2200      	movs	r2, #0
 8011fa8:	805a      	strh	r2, [r3, #2]
	lcd_write_cmd_data(0xc1, 2, data);  //set power
 8011faa:	4a63      	ldr	r2, [pc, #396]	; (8012138 <Init_LCD+0x228>)
 8011fac:	2102      	movs	r1, #2
 8011fae:	20c1      	movs	r0, #193	; 0xc1
 8011fb0:	f7ff ff82 	bl	8011eb8 <lcd_write_cmd_data>
	data[0]= 0x33;
 8011fb4:	4b60      	ldr	r3, [pc, #384]	; (8012138 <Init_LCD+0x228>)
 8011fb6:	2233      	movs	r2, #51	; 0x33
 8011fb8:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0xc2, 1, data);  //set power
 8011fba:	4a5f      	ldr	r2, [pc, #380]	; (8012138 <Init_LCD+0x228>)
 8011fbc:	2101      	movs	r1, #1
 8011fbe:	20c2      	movs	r0, #194	; 0xc2
 8011fc0:	f7ff ff7a 	bl	8011eb8 <lcd_write_cmd_data>
	data[0]=data[1]=0;
 8011fc4:	4b5c      	ldr	r3, [pc, #368]	; (8012138 <Init_LCD+0x228>)
 8011fc6:	2200      	movs	r2, #0
 8011fc8:	805a      	strh	r2, [r3, #2]
 8011fca:	4b5b      	ldr	r3, [pc, #364]	; (8012138 <Init_LCD+0x228>)
 8011fcc:	885a      	ldrh	r2, [r3, #2]
 8011fce:	4b5a      	ldr	r3, [pc, #360]	; (8012138 <Init_LCD+0x228>)
 8011fd0:	801a      	strh	r2, [r3, #0]
	data[2]=data[3]=0;  //#3 may be 0x36
 8011fd2:	4b59      	ldr	r3, [pc, #356]	; (8012138 <Init_LCD+0x228>)
 8011fd4:	2200      	movs	r2, #0
 8011fd6:	80da      	strh	r2, [r3, #6]
 8011fd8:	4b57      	ldr	r3, [pc, #348]	; (8012138 <Init_LCD+0x228>)
 8011fda:	88da      	ldrh	r2, [r3, #6]
 8011fdc:	4b56      	ldr	r3, [pc, #344]	; (8012138 <Init_LCD+0x228>)
 8011fde:	809a      	strh	r2, [r3, #4]
	lcd_write_cmd_data(0xc5, 4, data);  //Vcom control
 8011fe0:	4a55      	ldr	r2, [pc, #340]	; (8012138 <Init_LCD+0x228>)
 8011fe2:	2104      	movs	r1, #4
 8011fe4:	20c5      	movs	r0, #197	; 0xc5
 8011fe6:	f7ff ff67 	bl	8011eb8 <lcd_write_cmd_data>

	data[0]=  0;
 8011fea:	4b53      	ldr	r3, [pc, #332]	; (8012138 <Init_LCD+0x228>)
 8011fec:	2200      	movs	r2, #0
 8011fee:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0x36, 1, data);  //madctl
 8011ff0:	4a51      	ldr	r2, [pc, #324]	; (8012138 <Init_LCD+0x228>)
 8011ff2:	2101      	movs	r1, #1
 8011ff4:	2036      	movs	r0, #54	; 0x36
 8011ff6:	f7ff ff5f 	bl	8011eb8 <lcd_write_cmd_data>
	 Digital Gamma Control 1
	-1, 0xE2, 0x0F, 0x32, 0x2E, 0x0B, 0x0D, 0x05, 0x47, 0x75,
	          0x37, 0x06, 0x10, 0x03, 0x24, 0x20, 0x00,
    SPI_TRANSFER(0xE0 Positive Gamma Control, 0x00, 0x2C, 0x2C, 0x0B, 0x0C, 0x04, 0x4C, 0x64, 0x36, 0x03, 0x0E, 0x01, 0x10, 0x01, 0x00);
    SPI_TRANSFER(0xE1 Negative Gamma Control, 0x0F, 0x37, 0x37, 0x0C, 0x0F, 0x05, 0x50, 0x32, 0x36, 0x04, 0x0B, 0x00, 0x19, 0x14, 0x0F); */
	data[0]=data[14]=  0;
 8011ffa:	4b4f      	ldr	r3, [pc, #316]	; (8012138 <Init_LCD+0x228>)
 8011ffc:	2200      	movs	r2, #0
 8011ffe:	839a      	strh	r2, [r3, #28]
 8012000:	4b4d      	ldr	r3, [pc, #308]	; (8012138 <Init_LCD+0x228>)
 8012002:	8b9a      	ldrh	r2, [r3, #28]
 8012004:	4b4c      	ldr	r3, [pc, #304]	; (8012138 <Init_LCD+0x228>)
 8012006:	801a      	strh	r2, [r3, #0]
	data[1]=data[2]=   0x2C;
 8012008:	4b4b      	ldr	r3, [pc, #300]	; (8012138 <Init_LCD+0x228>)
 801200a:	222c      	movs	r2, #44	; 0x2c
 801200c:	809a      	strh	r2, [r3, #4]
 801200e:	4b4a      	ldr	r3, [pc, #296]	; (8012138 <Init_LCD+0x228>)
 8012010:	889a      	ldrh	r2, [r3, #4]
 8012012:	4b49      	ldr	r3, [pc, #292]	; (8012138 <Init_LCD+0x228>)
 8012014:	805a      	strh	r2, [r3, #2]
	data[3]=  0x0B;
 8012016:	4b48      	ldr	r3, [pc, #288]	; (8012138 <Init_LCD+0x228>)
 8012018:	220b      	movs	r2, #11
 801201a:	80da      	strh	r2, [r3, #6]
	data[4]=  0x0C;
 801201c:	4b46      	ldr	r3, [pc, #280]	; (8012138 <Init_LCD+0x228>)
 801201e:	220c      	movs	r2, #12
 8012020:	811a      	strh	r2, [r3, #8]
	data[5]=  0x04;
 8012022:	4b45      	ldr	r3, [pc, #276]	; (8012138 <Init_LCD+0x228>)
 8012024:	2204      	movs	r2, #4
 8012026:	815a      	strh	r2, [r3, #10]
	data[6]=  0x4C;
 8012028:	4b43      	ldr	r3, [pc, #268]	; (8012138 <Init_LCD+0x228>)
 801202a:	224c      	movs	r2, #76	; 0x4c
 801202c:	819a      	strh	r2, [r3, #12]
	data[7]=  0x64;
 801202e:	4b42      	ldr	r3, [pc, #264]	; (8012138 <Init_LCD+0x228>)
 8012030:	2264      	movs	r2, #100	; 0x64
 8012032:	81da      	strh	r2, [r3, #14]
	data[8]=  0x36;
 8012034:	4b40      	ldr	r3, [pc, #256]	; (8012138 <Init_LCD+0x228>)
 8012036:	2236      	movs	r2, #54	; 0x36
 8012038:	821a      	strh	r2, [r3, #16]
	data[9]=  0x03;
 801203a:	4b3f      	ldr	r3, [pc, #252]	; (8012138 <Init_LCD+0x228>)
 801203c:	2203      	movs	r2, #3
 801203e:	825a      	strh	r2, [r3, #18]
	data[10]= 0x0E;
 8012040:	4b3d      	ldr	r3, [pc, #244]	; (8012138 <Init_LCD+0x228>)
 8012042:	220e      	movs	r2, #14
 8012044:	829a      	strh	r2, [r3, #20]
	data[11]=data[13]= 0x2C;
 8012046:	4b3c      	ldr	r3, [pc, #240]	; (8012138 <Init_LCD+0x228>)
 8012048:	222c      	movs	r2, #44	; 0x2c
 801204a:	835a      	strh	r2, [r3, #26]
 801204c:	4b3a      	ldr	r3, [pc, #232]	; (8012138 <Init_LCD+0x228>)
 801204e:	8b5a      	ldrh	r2, [r3, #26]
 8012050:	4b39      	ldr	r3, [pc, #228]	; (8012138 <Init_LCD+0x228>)
 8012052:	82da      	strh	r2, [r3, #22]
	data[12]= 0x10;
 8012054:	4b38      	ldr	r3, [pc, #224]	; (8012138 <Init_LCD+0x228>)
 8012056:	2210      	movs	r2, #16
 8012058:	831a      	strh	r2, [r3, #24]
	lcd_write_cmd_data(0xe0, 15, data);  //positive gamma control
 801205a:	4a37      	ldr	r2, [pc, #220]	; (8012138 <Init_LCD+0x228>)
 801205c:	210f      	movs	r1, #15
 801205e:	20e0      	movs	r0, #224	; 0xe0
 8012060:	f7ff ff2a 	bl	8011eb8 <lcd_write_cmd_data>

	data[0]=data[4]= data[14]= 0x0F;
 8012064:	4b34      	ldr	r3, [pc, #208]	; (8012138 <Init_LCD+0x228>)
 8012066:	220f      	movs	r2, #15
 8012068:	839a      	strh	r2, [r3, #28]
 801206a:	4b33      	ldr	r3, [pc, #204]	; (8012138 <Init_LCD+0x228>)
 801206c:	8b9a      	ldrh	r2, [r3, #28]
 801206e:	4b32      	ldr	r3, [pc, #200]	; (8012138 <Init_LCD+0x228>)
 8012070:	811a      	strh	r2, [r3, #8]
 8012072:	4b31      	ldr	r3, [pc, #196]	; (8012138 <Init_LCD+0x228>)
 8012074:	891a      	ldrh	r2, [r3, #8]
 8012076:	4b30      	ldr	r3, [pc, #192]	; (8012138 <Init_LCD+0x228>)
 8012078:	801a      	strh	r2, [r3, #0]
	data[1]=data[2]= 0x37;
 801207a:	4b2f      	ldr	r3, [pc, #188]	; (8012138 <Init_LCD+0x228>)
 801207c:	2237      	movs	r2, #55	; 0x37
 801207e:	809a      	strh	r2, [r3, #4]
 8012080:	4b2d      	ldr	r3, [pc, #180]	; (8012138 <Init_LCD+0x228>)
 8012082:	889a      	ldrh	r2, [r3, #4]
 8012084:	4b2c      	ldr	r3, [pc, #176]	; (8012138 <Init_LCD+0x228>)
 8012086:	805a      	strh	r2, [r3, #2]
	data[3]=  0x0C;
 8012088:	4b2b      	ldr	r3, [pc, #172]	; (8012138 <Init_LCD+0x228>)
 801208a:	220c      	movs	r2, #12
 801208c:	80da      	strh	r2, [r3, #6]
	data[5]=  0x05;
 801208e:	4b2a      	ldr	r3, [pc, #168]	; (8012138 <Init_LCD+0x228>)
 8012090:	2205      	movs	r2, #5
 8012092:	815a      	strh	r2, [r3, #10]
	data[6]=  0x50;
 8012094:	4b28      	ldr	r3, [pc, #160]	; (8012138 <Init_LCD+0x228>)
 8012096:	2250      	movs	r2, #80	; 0x50
 8012098:	819a      	strh	r2, [r3, #12]
	data[7]=  0x32;
 801209a:	4b27      	ldr	r3, [pc, #156]	; (8012138 <Init_LCD+0x228>)
 801209c:	2232      	movs	r2, #50	; 0x32
 801209e:	81da      	strh	r2, [r3, #14]
	data[8]=  0x36;
 80120a0:	4b25      	ldr	r3, [pc, #148]	; (8012138 <Init_LCD+0x228>)
 80120a2:	2236      	movs	r2, #54	; 0x36
 80120a4:	821a      	strh	r2, [r3, #16]
	data[9]=  0x04;
 80120a6:	4b24      	ldr	r3, [pc, #144]	; (8012138 <Init_LCD+0x228>)
 80120a8:	2204      	movs	r2, #4
 80120aa:	825a      	strh	r2, [r3, #18]
	data[10]= 0x0B;
 80120ac:	4b22      	ldr	r3, [pc, #136]	; (8012138 <Init_LCD+0x228>)
 80120ae:	220b      	movs	r2, #11
 80120b0:	829a      	strh	r2, [r3, #20]
	data[11]= 0;
 80120b2:	4b21      	ldr	r3, [pc, #132]	; (8012138 <Init_LCD+0x228>)
 80120b4:	2200      	movs	r2, #0
 80120b6:	82da      	strh	r2, [r3, #22]
	data[12]= 0x19;
 80120b8:	4b1f      	ldr	r3, [pc, #124]	; (8012138 <Init_LCD+0x228>)
 80120ba:	2219      	movs	r2, #25
 80120bc:	831a      	strh	r2, [r3, #24]
	data[13]= 0x14;
 80120be:	4b1e      	ldr	r3, [pc, #120]	; (8012138 <Init_LCD+0x228>)
 80120c0:	2214      	movs	r2, #20
 80120c2:	835a      	strh	r2, [r3, #26]
	lcd_write_cmd_data(0xe1, 15, data);  //Negitive gamma control
 80120c4:	4a1c      	ldr	r2, [pc, #112]	; (8012138 <Init_LCD+0x228>)
 80120c6:	210f      	movs	r1, #15
 80120c8:	20e1      	movs	r0, #225	; 0xe1
 80120ca:	f7ff fef5 	bl	8011eb8 <lcd_write_cmd_data>

//	SPI_TRANSFER(0xB6/*Display Function Control*/, 0, /*ISC=2*/2, /*Display Height h=*/59); // Actual display height = (h+1)*8 so (59+1)*8=480
	data[0]=0;
 80120ce:	4b1a      	ldr	r3, [pc, #104]	; (8012138 <Init_LCD+0x228>)
 80120d0:	2200      	movs	r2, #0
 80120d2:	801a      	strh	r2, [r3, #0]
	data[1]=2;
 80120d4:	4b18      	ldr	r3, [pc, #96]	; (8012138 <Init_LCD+0x228>)
 80120d6:	2202      	movs	r2, #2
 80120d8:	805a      	strh	r2, [r3, #2]
	data[2]=59;
 80120da:	4b17      	ldr	r3, [pc, #92]	; (8012138 <Init_LCD+0x228>)
 80120dc:	223b      	movs	r2, #59	; 0x3b
 80120de:	809a      	strh	r2, [r3, #4]
	lcd_write_cmd_data(0xb6, 3, data);  //display function control
 80120e0:	4a15      	ldr	r2, [pc, #84]	; (8012138 <Init_LCD+0x228>)
 80120e2:	2103      	movs	r1, #3
 80120e4:	20b6      	movs	r0, #182	; 0xb6
 80120e6:	f7ff fee7 	bl	8011eb8 <lcd_write_cmd_data>

	lcd_write_cmd_data(0x11, 0, data);  //sleep
 80120ea:	4a13      	ldr	r2, [pc, #76]	; (8012138 <Init_LCD+0x228>)
 80120ec:	2100      	movs	r1, #0
 80120ee:	2011      	movs	r0, #17
 80120f0:	f7ff fee2 	bl	8011eb8 <lcd_write_cmd_data>
	HAL_Delay(120);
 80120f4:	2078      	movs	r0, #120	; 0x78
 80120f6:	f006 f96d 	bl	80183d4 <HAL_Delay>
	lcd_write_cmd_data(0x29, 0, data);  //display on
 80120fa:	4a0f      	ldr	r2, [pc, #60]	; (8012138 <Init_LCD+0x228>)
 80120fc:	2100      	movs	r1, #0
 80120fe:	2029      	movs	r0, #41	; 0x29
 8012100:	f7ff feda 	bl	8011eb8 <lcd_write_cmd_data>
	lcd_write_cmd_data(0x38, 0, data);  //idle off
 8012104:	4a0c      	ldr	r2, [pc, #48]	; (8012138 <Init_LCD+0x228>)
 8012106:	2100      	movs	r1, #0
 8012108:	2038      	movs	r0, #56	; 0x38
 801210a:	f7ff fed5 	bl	8011eb8 <lcd_write_cmd_data>
	lcd_write_cmd_data(0x13, 0, data);  //Normal Display Mode ON
 801210e:	4a0a      	ldr	r2, [pc, #40]	; (8012138 <Init_LCD+0x228>)
 8012110:	2100      	movs	r1, #0
 8012112:	2013      	movs	r0, #19
 8012114:	f7ff fed0 	bl	8011eb8 <lcd_write_cmd_data>

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);  //disable lcd controller
 8012118:	2201      	movs	r2, #1
 801211a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801211e:	4804      	ldr	r0, [pc, #16]	; (8012130 <Init_LCD+0x220>)
 8012120:	f007 fd36 	bl	8019b90 <HAL_GPIO_WritePin>

	LCD_ClrScrn(0);  //clear screen to black
 8012124:	2000      	movs	r0, #0
 8012126:	f000 f809 	bl	801213c <LCD_ClrScrn>
}
 801212a:	bf00      	nop
 801212c:	bd80      	pop	{r7, pc}
 801212e:	bf00      	nop
 8012130:	40020800 	.word	0x40020800
 8012134:	40020400 	.word	0x40020400
 8012138:	2000281c 	.word	0x2000281c

0801213c <LCD_ClrScrn>:

void LCD_ClrScrn(unsigned short Color)
{
 801213c:	b580      	push	{r7, lr}
 801213e:	b084      	sub	sp, #16
 8012140:	af00      	add	r7, sp, #0
 8012142:	4603      	mov	r3, r0
 8012144:	80fb      	strh	r3, [r7, #6]
short y;
unsigned short *ptr;

ptr = malloc(320*2);
 8012146:	f44f 7020 	mov.w	r0, #640	; 0x280
 801214a:	f010 fd59 	bl	8022c00 <malloc>
 801214e:	4603      	mov	r3, r0
 8012150:	60bb      	str	r3, [r7, #8]
HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 8012152:	2200      	movs	r2, #0
 8012154:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012158:	483d      	ldr	r0, [pc, #244]	; (8012250 <LCD_ClrScrn+0x114>)
 801215a:	f007 fd19 	bl	8019b90 <HAL_GPIO_WritePin>

for(y=0; y<480; ++y )
 801215e:	2300      	movs	r3, #0
 8012160:	81fb      	strh	r3, [r7, #14]
 8012162:	e03c      	b.n	80121de <LCD_ClrScrn+0xa2>
{
	data[0]=data[1]= 0;
 8012164:	4b3b      	ldr	r3, [pc, #236]	; (8012254 <LCD_ClrScrn+0x118>)
 8012166:	2200      	movs	r2, #0
 8012168:	805a      	strh	r2, [r3, #2]
 801216a:	4b3a      	ldr	r3, [pc, #232]	; (8012254 <LCD_ClrScrn+0x118>)
 801216c:	885a      	ldrh	r2, [r3, #2]
 801216e:	4b39      	ldr	r3, [pc, #228]	; (8012254 <LCD_ClrScrn+0x118>)
 8012170:	801a      	strh	r2, [r3, #0]
	data[2]= 319>>8;
 8012172:	4b38      	ldr	r3, [pc, #224]	; (8012254 <LCD_ClrScrn+0x118>)
 8012174:	2201      	movs	r2, #1
 8012176:	809a      	strh	r2, [r3, #4]
	data[3]= 319 & 0xFF;
 8012178:	4b36      	ldr	r3, [pc, #216]	; (8012254 <LCD_ClrScrn+0x118>)
 801217a:	223f      	movs	r2, #63	; 0x3f
 801217c:	80da      	strh	r2, [r3, #6]
	lcd_write_cmd_data(0x2A, 4, data);  //set x
 801217e:	4a35      	ldr	r2, [pc, #212]	; (8012254 <LCD_ClrScrn+0x118>)
 8012180:	2104      	movs	r1, #4
 8012182:	202a      	movs	r0, #42	; 0x2a
 8012184:	f7ff fe98 	bl	8011eb8 <lcd_write_cmd_data>
	data[0]= y>>8;
 8012188:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801218c:	121b      	asrs	r3, r3, #8
 801218e:	b21b      	sxth	r3, r3
 8012190:	b29a      	uxth	r2, r3
 8012192:	4b30      	ldr	r3, [pc, #192]	; (8012254 <LCD_ClrScrn+0x118>)
 8012194:	801a      	strh	r2, [r3, #0]
	data[1]= y & 0xFF;
 8012196:	89fb      	ldrh	r3, [r7, #14]
 8012198:	b2db      	uxtb	r3, r3
 801219a:	b29a      	uxth	r2, r3
 801219c:	4b2d      	ldr	r3, [pc, #180]	; (8012254 <LCD_ClrScrn+0x118>)
 801219e:	805a      	strh	r2, [r3, #2]
	data[2]= 479>>8;
 80121a0:	4b2c      	ldr	r3, [pc, #176]	; (8012254 <LCD_ClrScrn+0x118>)
 80121a2:	2201      	movs	r2, #1
 80121a4:	809a      	strh	r2, [r3, #4]
	data[3]= 479 & 0xFF;
 80121a6:	4b2b      	ldr	r3, [pc, #172]	; (8012254 <LCD_ClrScrn+0x118>)
 80121a8:	22df      	movs	r2, #223	; 0xdf
 80121aa:	80da      	strh	r2, [r3, #6]
	lcd_write_cmd_data(0x2B, 4, data);  //set y
 80121ac:	4a29      	ldr	r2, [pc, #164]	; (8012254 <LCD_ClrScrn+0x118>)
 80121ae:	2104      	movs	r1, #4
 80121b0:	202b      	movs	r0, #43	; 0x2b
 80121b2:	f7ff fe81 	bl	8011eb8 <lcd_write_cmd_data>

	if(ptr != NULL)
 80121b6:	68bb      	ldr	r3, [r7, #8]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d016      	beq.n	80121ea <LCD_ClrScrn+0xae>
	{
		memset16(ptr, Color, 320);
 80121bc:	88fb      	ldrh	r3, [r7, #6]
 80121be:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80121c2:	4619      	mov	r1, r3
 80121c4:	68b8      	ldr	r0, [r7, #8]
 80121c6:	f7ff fc67 	bl	8011a98 <memset16>
		lcd_write_cmd_data(0x2C, 320, ptr);  //write out pixels
 80121ca:	68ba      	ldr	r2, [r7, #8]
 80121cc:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80121d0:	202c      	movs	r0, #44	; 0x2c
 80121d2:	f7ff fe71 	bl	8011eb8 <lcd_write_cmd_data>
for(y=0; y<480; ++y )
 80121d6:	89fb      	ldrh	r3, [r7, #14]
 80121d8:	3301      	adds	r3, #1
 80121da:	b29b      	uxth	r3, r3
 80121dc:	81fb      	strh	r3, [r7, #14]
 80121de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80121e2:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80121e6:	dbbd      	blt.n	8012164 <LCD_ClrScrn+0x28>
 80121e8:	e000      	b.n	80121ec <LCD_ClrScrn+0xb0>
	}
	else
		break; //bail out
 80121ea:	bf00      	nop
}

free(ptr);
 80121ec:	68b8      	ldr	r0, [r7, #8]
 80121ee:	f010 fd0f 	bl	8022c10 <free>

data[0]=data[1]= 0;
 80121f2:	4b18      	ldr	r3, [pc, #96]	; (8012254 <LCD_ClrScrn+0x118>)
 80121f4:	2200      	movs	r2, #0
 80121f6:	805a      	strh	r2, [r3, #2]
 80121f8:	4b16      	ldr	r3, [pc, #88]	; (8012254 <LCD_ClrScrn+0x118>)
 80121fa:	885a      	ldrh	r2, [r3, #2]
 80121fc:	4b15      	ldr	r3, [pc, #84]	; (8012254 <LCD_ClrScrn+0x118>)
 80121fe:	801a      	strh	r2, [r3, #0]
data[2]= 319>>8;
 8012200:	4b14      	ldr	r3, [pc, #80]	; (8012254 <LCD_ClrScrn+0x118>)
 8012202:	2201      	movs	r2, #1
 8012204:	809a      	strh	r2, [r3, #4]
data[3]= 319 & 0xFF;
 8012206:	4b13      	ldr	r3, [pc, #76]	; (8012254 <LCD_ClrScrn+0x118>)
 8012208:	223f      	movs	r2, #63	; 0x3f
 801220a:	80da      	strh	r2, [r3, #6]
lcd_write_cmd_data(0x2A, 4, data);  //set x
 801220c:	4a11      	ldr	r2, [pc, #68]	; (8012254 <LCD_ClrScrn+0x118>)
 801220e:	2104      	movs	r1, #4
 8012210:	202a      	movs	r0, #42	; 0x2a
 8012212:	f7ff fe51 	bl	8011eb8 <lcd_write_cmd_data>
data[0]=data[1]= 0;
 8012216:	4b0f      	ldr	r3, [pc, #60]	; (8012254 <LCD_ClrScrn+0x118>)
 8012218:	2200      	movs	r2, #0
 801221a:	805a      	strh	r2, [r3, #2]
 801221c:	4b0d      	ldr	r3, [pc, #52]	; (8012254 <LCD_ClrScrn+0x118>)
 801221e:	885a      	ldrh	r2, [r3, #2]
 8012220:	4b0c      	ldr	r3, [pc, #48]	; (8012254 <LCD_ClrScrn+0x118>)
 8012222:	801a      	strh	r2, [r3, #0]
data[2]= 479>>8;
 8012224:	4b0b      	ldr	r3, [pc, #44]	; (8012254 <LCD_ClrScrn+0x118>)
 8012226:	2201      	movs	r2, #1
 8012228:	809a      	strh	r2, [r3, #4]
data[3]= 479 & 0xFF;
 801222a:	4b0a      	ldr	r3, [pc, #40]	; (8012254 <LCD_ClrScrn+0x118>)
 801222c:	22df      	movs	r2, #223	; 0xdf
 801222e:	80da      	strh	r2, [r3, #6]
lcd_write_cmd_data(0x2B, 4, data);  //set y
 8012230:	4a08      	ldr	r2, [pc, #32]	; (8012254 <LCD_ClrScrn+0x118>)
 8012232:	2104      	movs	r1, #4
 8012234:	202b      	movs	r0, #43	; 0x2b
 8012236:	f7ff fe3f 	bl	8011eb8 <lcd_write_cmd_data>

HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);  //disable lcd controller
 801223a:	2201      	movs	r2, #1
 801223c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012240:	4803      	ldr	r0, [pc, #12]	; (8012250 <LCD_ClrScrn+0x114>)
 8012242:	f007 fca5 	bl	8019b90 <HAL_GPIO_WritePin>

}
 8012246:	bf00      	nop
 8012248:	3710      	adds	r7, #16
 801224a:	46bd      	mov	sp, r7
 801224c:	bd80      	pop	{r7, pc}
 801224e:	bf00      	nop
 8012250:	40020800 	.word	0x40020800
 8012254:	2000281c 	.word	0x2000281c

08012258 <LCD_Set_Posi>:

void LCD_Set_Posi(short Sx, short Sy)
{
 8012258:	b580      	push	{r7, lr}
 801225a:	b082      	sub	sp, #8
 801225c:	af00      	add	r7, sp, #0
 801225e:	4603      	mov	r3, r0
 8012260:	460a      	mov	r2, r1
 8012262:	80fb      	strh	r3, [r7, #6]
 8012264:	4613      	mov	r3, r2
 8012266:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 8012268:	2200      	movs	r2, #0
 801226a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801226e:	481f      	ldr	r0, [pc, #124]	; (80122ec <LCD_Set_Posi+0x94>)
 8012270:	f007 fc8e 	bl	8019b90 <HAL_GPIO_WritePin>

	data[0]= data[2]= Sx>>8;
 8012274:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012278:	121b      	asrs	r3, r3, #8
 801227a:	b21b      	sxth	r3, r3
 801227c:	b29a      	uxth	r2, r3
 801227e:	4b1c      	ldr	r3, [pc, #112]	; (80122f0 <LCD_Set_Posi+0x98>)
 8012280:	809a      	strh	r2, [r3, #4]
 8012282:	4b1b      	ldr	r3, [pc, #108]	; (80122f0 <LCD_Set_Posi+0x98>)
 8012284:	889a      	ldrh	r2, [r3, #4]
 8012286:	4b1a      	ldr	r3, [pc, #104]	; (80122f0 <LCD_Set_Posi+0x98>)
 8012288:	801a      	strh	r2, [r3, #0]
	data[1]= data[3]= Sx & 0xFF;
 801228a:	88fb      	ldrh	r3, [r7, #6]
 801228c:	b2db      	uxtb	r3, r3
 801228e:	b29a      	uxth	r2, r3
 8012290:	4b17      	ldr	r3, [pc, #92]	; (80122f0 <LCD_Set_Posi+0x98>)
 8012292:	80da      	strh	r2, [r3, #6]
 8012294:	4b16      	ldr	r3, [pc, #88]	; (80122f0 <LCD_Set_Posi+0x98>)
 8012296:	88da      	ldrh	r2, [r3, #6]
 8012298:	4b15      	ldr	r3, [pc, #84]	; (80122f0 <LCD_Set_Posi+0x98>)
 801229a:	805a      	strh	r2, [r3, #2]
	lcd_write_cmd_data(0x2A, 4, data);  //set x
 801229c:	4a14      	ldr	r2, [pc, #80]	; (80122f0 <LCD_Set_Posi+0x98>)
 801229e:	2104      	movs	r1, #4
 80122a0:	202a      	movs	r0, #42	; 0x2a
 80122a2:	f7ff fe09 	bl	8011eb8 <lcd_write_cmd_data>
	data[0]= data[1]= Sy>>8;
 80122a6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80122aa:	121b      	asrs	r3, r3, #8
 80122ac:	b21b      	sxth	r3, r3
 80122ae:	b29a      	uxth	r2, r3
 80122b0:	4b0f      	ldr	r3, [pc, #60]	; (80122f0 <LCD_Set_Posi+0x98>)
 80122b2:	805a      	strh	r2, [r3, #2]
 80122b4:	4b0e      	ldr	r3, [pc, #56]	; (80122f0 <LCD_Set_Posi+0x98>)
 80122b6:	885a      	ldrh	r2, [r3, #2]
 80122b8:	4b0d      	ldr	r3, [pc, #52]	; (80122f0 <LCD_Set_Posi+0x98>)
 80122ba:	801a      	strh	r2, [r3, #0]
	data[2]= data[3]= Sy & 0xFF;
 80122bc:	88bb      	ldrh	r3, [r7, #4]
 80122be:	b2db      	uxtb	r3, r3
 80122c0:	b29a      	uxth	r2, r3
 80122c2:	4b0b      	ldr	r3, [pc, #44]	; (80122f0 <LCD_Set_Posi+0x98>)
 80122c4:	80da      	strh	r2, [r3, #6]
 80122c6:	4b0a      	ldr	r3, [pc, #40]	; (80122f0 <LCD_Set_Posi+0x98>)
 80122c8:	88da      	ldrh	r2, [r3, #6]
 80122ca:	4b09      	ldr	r3, [pc, #36]	; (80122f0 <LCD_Set_Posi+0x98>)
 80122cc:	809a      	strh	r2, [r3, #4]
	lcd_write_cmd_data(0x2B, 4, data);  //set y
 80122ce:	4a08      	ldr	r2, [pc, #32]	; (80122f0 <LCD_Set_Posi+0x98>)
 80122d0:	2104      	movs	r1, #4
 80122d2:	202b      	movs	r0, #43	; 0x2b
 80122d4:	f7ff fdf0 	bl	8011eb8 <lcd_write_cmd_data>

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);    //disable lcd controller
 80122d8:	2201      	movs	r2, #1
 80122da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80122de:	4803      	ldr	r0, [pc, #12]	; (80122ec <LCD_Set_Posi+0x94>)
 80122e0:	f007 fc56 	bl	8019b90 <HAL_GPIO_WritePin>
}
 80122e4:	bf00      	nop
 80122e6:	3708      	adds	r7, #8
 80122e8:	46bd      	mov	sp, r7
 80122ea:	bd80      	pop	{r7, pc}
 80122ec:	40020800 	.word	0x40020800
 80122f0:	2000281c 	.word	0x2000281c

080122f4 <LCD_Set_Pixel>:

void LCD_Set_Pixel(unsigned short Color)
{
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b082      	sub	sp, #8
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	4603      	mov	r3, r0
 80122fc:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 80122fe:	2200      	movs	r2, #0
 8012300:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012304:	480d      	ldr	r0, [pc, #52]	; (801233c <LCD_Set_Pixel+0x48>)
 8012306:	f007 fc43 	bl	8019b90 <HAL_GPIO_WritePin>

	data[0]= Color>>8;
 801230a:	88fb      	ldrh	r3, [r7, #6]
 801230c:	0a1b      	lsrs	r3, r3, #8
 801230e:	b29a      	uxth	r2, r3
 8012310:	4b0b      	ldr	r3, [pc, #44]	; (8012340 <LCD_Set_Pixel+0x4c>)
 8012312:	801a      	strh	r2, [r3, #0]
	data[1]= Color & 0xFF;
 8012314:	88fb      	ldrh	r3, [r7, #6]
 8012316:	b2db      	uxtb	r3, r3
 8012318:	b29a      	uxth	r2, r3
 801231a:	4b09      	ldr	r3, [pc, #36]	; (8012340 <LCD_Set_Pixel+0x4c>)
 801231c:	805a      	strh	r2, [r3, #2]
	lcd_write_cmd_data(0x2C, 2, data);  //set pixel
 801231e:	4a08      	ldr	r2, [pc, #32]	; (8012340 <LCD_Set_Pixel+0x4c>)
 8012320:	2102      	movs	r1, #2
 8012322:	202c      	movs	r0, #44	; 0x2c
 8012324:	f7ff fdc8 	bl	8011eb8 <lcd_write_cmd_data>
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);    //disable lcd controller
 8012328:	2201      	movs	r2, #1
 801232a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801232e:	4803      	ldr	r0, [pc, #12]	; (801233c <LCD_Set_Pixel+0x48>)
 8012330:	f007 fc2e 	bl	8019b90 <HAL_GPIO_WritePin>
}
 8012334:	bf00      	nop
 8012336:	3708      	adds	r7, #8
 8012338:	46bd      	mov	sp, r7
 801233a:	bd80      	pop	{r7, pc}
 801233c:	40020800 	.word	0x40020800
 8012340:	2000281c 	.word	0x2000281c

08012344 <LCD_Get_Pixel>:

unsigned short LCD_Get_Pixel(void)
{
 8012344:	b580      	push	{r7, lr}
 8012346:	b082      	sub	sp, #8
 8012348:	af00      	add	r7, sp, #0
	short ret;
	unsigned short fred;

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 801234a:	2200      	movs	r2, #0
 801234c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012350:	4814      	ldr	r0, [pc, #80]	; (80123a4 <LCD_Get_Pixel+0x60>)
 8012352:	f007 fc1d 	bl	8019b90 <HAL_GPIO_WritePin>
	lcd_write_cmd_data(0x2E, 0, data);  //read data
 8012356:	4a14      	ldr	r2, [pc, #80]	; (80123a8 <LCD_Get_Pixel+0x64>)
 8012358:	2100      	movs	r1, #0
 801235a:	202e      	movs	r0, #46	; 0x2e
 801235c:	f7ff fdac 	bl	8011eb8 <lcd_write_cmd_data>

	ret = HAL_SPI_Receive(&hspi3, (unsigned char *)data, 2, 1);
 8012360:	2301      	movs	r3, #1
 8012362:	2202      	movs	r2, #2
 8012364:	4910      	ldr	r1, [pc, #64]	; (80123a8 <LCD_Get_Pixel+0x64>)
 8012366:	4811      	ldr	r0, [pc, #68]	; (80123ac <LCD_Get_Pixel+0x68>)
 8012368:	f00a f853 	bl	801c412 <HAL_SPI_Receive>
 801236c:	4603      	mov	r3, r0
 801236e:	80fb      	strh	r3, [r7, #6]

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);    //disable lcd controller
 8012370:	2201      	movs	r2, #1
 8012372:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012376:	480b      	ldr	r0, [pc, #44]	; (80123a4 <LCD_Get_Pixel+0x60>)
 8012378:	f007 fc0a 	bl	8019b90 <HAL_GPIO_WritePin>

	if( ret == HAL_OK )
 801237c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012380:	2b00      	cmp	r3, #0
 8012382:	d10a      	bne.n	801239a <LCD_Get_Pixel+0x56>
		{
		fred =data[0]<<8;
 8012384:	4b08      	ldr	r3, [pc, #32]	; (80123a8 <LCD_Get_Pixel+0x64>)
 8012386:	881b      	ldrh	r3, [r3, #0]
 8012388:	021b      	lsls	r3, r3, #8
 801238a:	80bb      	strh	r3, [r7, #4]
		fred |= data[1];
 801238c:	4b06      	ldr	r3, [pc, #24]	; (80123a8 <LCD_Get_Pixel+0x64>)
 801238e:	885a      	ldrh	r2, [r3, #2]
 8012390:	88bb      	ldrh	r3, [r7, #4]
 8012392:	4313      	orrs	r3, r2
 8012394:	80bb      	strh	r3, [r7, #4]
		return (fred);
 8012396:	88bb      	ldrh	r3, [r7, #4]
 8012398:	e000      	b.n	801239c <LCD_Get_Pixel+0x58>
		}
	else
		return 0;
 801239a:	2300      	movs	r3, #0

}
 801239c:	4618      	mov	r0, r3
 801239e:	3708      	adds	r7, #8
 80123a0:	46bd      	mov	sp, r7
 80123a2:	bd80      	pop	{r7, pc}
 80123a4:	40020800 	.word	0x40020800
 80123a8:	2000281c 	.word	0x2000281c
 80123ac:	200069c0 	.word	0x200069c0

080123b0 <Draw_4Point>:

/*******************************************************************************
Draw_4Point:
*******************************************************************************/
void Draw_4Point(short x, short y, char Str_Cnt, char High)
{
 80123b0:	b590      	push	{r4, r7, lr}
 80123b2:	b083      	sub	sp, #12
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	4604      	mov	r4, r0
 80123b8:	4608      	mov	r0, r1
 80123ba:	4611      	mov	r1, r2
 80123bc:	461a      	mov	r2, r3
 80123be:	4623      	mov	r3, r4
 80123c0:	80fb      	strh	r3, [r7, #6]
 80123c2:	4603      	mov	r3, r0
 80123c4:	80bb      	strh	r3, [r7, #4]
 80123c6:	460b      	mov	r3, r1
 80123c8:	70fb      	strb	r3, [r7, #3]
 80123ca:	4613      	mov	r3, r2
 80123cc:	70bb      	strb	r3, [r7, #2]
  LCD_Set_Posi(x,y);
 80123ce:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80123d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80123d6:	4611      	mov	r1, r2
 80123d8:	4618      	mov	r0, r3
 80123da:	f7ff ff3d 	bl	8012258 <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 80123de:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80123e2:	f7ff ff87 	bl	80122f4 <LCD_Set_Pixel>
  LCD_Set_Posi(x,y+High-1);
 80123e6:	78bb      	ldrb	r3, [r7, #2]
 80123e8:	b29a      	uxth	r2, r3
 80123ea:	88bb      	ldrh	r3, [r7, #4]
 80123ec:	4413      	add	r3, r2
 80123ee:	b29b      	uxth	r3, r3
 80123f0:	3b01      	subs	r3, #1
 80123f2:	b29b      	uxth	r3, r3
 80123f4:	b21a      	sxth	r2, r3
 80123f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80123fa:	4611      	mov	r1, r2
 80123fc:	4618      	mov	r0, r3
 80123fe:	f7ff ff2b 	bl	8012258 <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 8012402:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012406:	f7ff ff75 	bl	80122f4 <LCD_Set_Pixel>
  LCD_Set_Posi(x+Str_Cnt*((High>10)? 8:6),y);
 801240a:	78fb      	ldrb	r3, [r7, #3]
 801240c:	b29b      	uxth	r3, r3
 801240e:	78ba      	ldrb	r2, [r7, #2]
 8012410:	2a0a      	cmp	r2, #10
 8012412:	d901      	bls.n	8012418 <Draw_4Point+0x68>
 8012414:	2208      	movs	r2, #8
 8012416:	e000      	b.n	801241a <Draw_4Point+0x6a>
 8012418:	2206      	movs	r2, #6
 801241a:	fb12 f303 	smulbb	r3, r2, r3
 801241e:	b29a      	uxth	r2, r3
 8012420:	88fb      	ldrh	r3, [r7, #6]
 8012422:	4413      	add	r3, r2
 8012424:	b29b      	uxth	r3, r3
 8012426:	b21b      	sxth	r3, r3
 8012428:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801242c:	4611      	mov	r1, r2
 801242e:	4618      	mov	r0, r3
 8012430:	f7ff ff12 	bl	8012258 <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 8012434:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012438:	f7ff ff5c 	bl	80122f4 <LCD_Set_Pixel>
  LCD_Set_Posi(x+Str_Cnt*((High>10)? 8:6),y+High-1);
 801243c:	78fb      	ldrb	r3, [r7, #3]
 801243e:	b29b      	uxth	r3, r3
 8012440:	78ba      	ldrb	r2, [r7, #2]
 8012442:	2a0a      	cmp	r2, #10
 8012444:	d901      	bls.n	801244a <Draw_4Point+0x9a>
 8012446:	2208      	movs	r2, #8
 8012448:	e000      	b.n	801244c <Draw_4Point+0x9c>
 801244a:	2206      	movs	r2, #6
 801244c:	fb12 f303 	smulbb	r3, r2, r3
 8012450:	b29a      	uxth	r2, r3
 8012452:	88fb      	ldrh	r3, [r7, #6]
 8012454:	4413      	add	r3, r2
 8012456:	b29b      	uxth	r3, r3
 8012458:	b218      	sxth	r0, r3
 801245a:	78bb      	ldrb	r3, [r7, #2]
 801245c:	b29a      	uxth	r2, r3
 801245e:	88bb      	ldrh	r3, [r7, #4]
 8012460:	4413      	add	r3, r2
 8012462:	b29b      	uxth	r3, r3
 8012464:	3b01      	subs	r3, #1
 8012466:	b29b      	uxth	r3, r3
 8012468:	b21b      	sxth	r3, r3
 801246a:	4619      	mov	r1, r3
 801246c:	f7ff fef4 	bl	8012258 <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 8012470:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012474:	f7ff ff3e 	bl	80122f4 <LCD_Set_Pixel>
}
 8012478:	bf00      	nop
 801247a:	370c      	adds	r7, #12
 801247c:	46bd      	mov	sp, r7
 801247e:	bd90      	pop	{r4, r7, pc}

08012480 <Update_Title>:

/*******************************************************************************
 Update_Item:
*******************************************************************************/
void Update_Title(void)
{
 8012480:	b580      	push	{r7, lr}
 8012482:	b082      	sub	sp, #8
 8012484:	af00      	add	r7, sp, #0
  short i;

  for(i=0; i<8; i++)
 8012486:	2300      	movs	r3, #0
 8012488:	80fb      	strh	r3, [r7, #6]
 801248a:	e03b      	b.n	8012504 <Update_Title+0x84>
  {
    SetColor(GRY, TCOLOR[i]);
 801248c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012490:	4a21      	ldr	r2, [pc, #132]	; (8012518 <Update_Title+0x98>)
 8012492:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012496:	4619      	mov	r1, r3
 8012498:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801249c:	f7fb fc2c 	bl	800dcf8 <SetColor>
    DispStr8x14(T_X-2, TITLE_Y[i], (Current == i)? INV : PRN, (char*)TSTR[i]);
 80124a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80124a4:	4a1d      	ldr	r2, [pc, #116]	; (801251c <Update_Title+0x9c>)
 80124a6:	5cd3      	ldrb	r3, [r2, r3]
 80124a8:	b219      	sxth	r1, r3
 80124aa:	4b1d      	ldr	r3, [pc, #116]	; (8012520 <Update_Title+0xa0>)
 80124ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80124b0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80124b4:	429a      	cmp	r2, r3
 80124b6:	bf0c      	ite	eq
 80124b8:	2301      	moveq	r3, #1
 80124ba:	2300      	movne	r3, #0
 80124bc:	b2db      	uxtb	r3, r3
 80124be:	4618      	mov	r0, r3
 80124c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80124c4:	009b      	lsls	r3, r3, #2
 80124c6:	4a17      	ldr	r2, [pc, #92]	; (8012524 <Update_Title+0xa4>)
 80124c8:	4413      	add	r3, r2
 80124ca:	4602      	mov	r2, r0
 80124cc:	f240 102f 	movw	r0, #303	; 0x12f
 80124d0:	f7fb fbba 	bl	800dc48 <DispStr8x14>
    if(Current == i)
 80124d4:	4b12      	ldr	r3, [pc, #72]	; (8012520 <Update_Title+0xa0>)
 80124d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80124da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80124de:	429a      	cmp	r2, r3
 80124e0:	d10a      	bne.n	80124f8 <Update_Title+0x78>
    {
        Draw_4Point(T_X-2, TITLE_Y[i], 2, Font8x14_H);
 80124e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80124e6:	4a0d      	ldr	r2, [pc, #52]	; (801251c <Update_Title+0x9c>)
 80124e8:	5cd3      	ldrb	r3, [r2, r3]
 80124ea:	b219      	sxth	r1, r3
 80124ec:	230e      	movs	r3, #14
 80124ee:	2202      	movs	r2, #2
 80124f0:	f240 102f 	movw	r0, #303	; 0x12f
 80124f4:	f7ff ff5c 	bl	80123b0 <Draw_4Point>
  for(i=0; i<8; i++)
 80124f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80124fc:	b29b      	uxth	r3, r3
 80124fe:	3301      	adds	r3, #1
 8012500:	b29b      	uxth	r3, r3
 8012502:	80fb      	strh	r3, [r7, #6]
 8012504:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012508:	2b07      	cmp	r3, #7
 801250a:	ddbf      	ble.n	801248c <Update_Title+0xc>
    }
  }
}
 801250c:	bf00      	nop
 801250e:	bf00      	nop
 8012510:	3708      	adds	r7, #8
 8012512:	46bd      	mov	sp, r7
 8012514:	bd80      	pop	{r7, pc}
 8012516:	bf00      	nop
 8012518:	08001f08 	.word	0x08001f08
 801251c:	08001f38 	.word	0x08001f38
 8012520:	2000079e 	.word	0x2000079e
 8012524:	08001f18 	.word	0x08001f18

08012528 <Update_Blink>:

/*******************************************************************************
 Update_Blink:
*******************************************************************************/
void Update_Blink(void)
{
 8012528:	b590      	push	{r4, r7, lr}
 801252a:	b087      	sub	sp, #28
 801252c:	af02      	add	r7, sp, #8
  char* ptr;
  long Tmp;
  unsigned short i, Range = List[Y_RANGES].Val + 10*List[PROBEATT].Val;
 801252e:	4bbd      	ldr	r3, [pc, #756]	; (8012824 <Update_Blink+0x2fc>)
 8012530:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012534:	b29a      	uxth	r2, r3
 8012536:	4bbb      	ldr	r3, [pc, #748]	; (8012824 <Update_Blink+0x2fc>)
 8012538:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801253c:	b29b      	uxth	r3, r3
 801253e:	4619      	mov	r1, r3
 8012540:	0089      	lsls	r1, r1, #2
 8012542:	440b      	add	r3, r1
 8012544:	005b      	lsls	r3, r3, #1
 8012546:	b29b      	uxth	r3, r3
 8012548:	4413      	add	r3, r2
 801254a:	81fb      	strh	r3, [r7, #14]

  i = MenuNow[Current];
 801254c:	4bb6      	ldr	r3, [pc, #728]	; (8012828 <Update_Blink+0x300>)
 801254e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012552:	461a      	mov	r2, r3
 8012554:	4bb5      	ldr	r3, [pc, #724]	; (801282c <Update_Blink+0x304>)
 8012556:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801255a:	81bb      	strh	r3, [r7, #12]
  ptr = (char*)(List[i].PTR +(List[i].Val)*6);
 801255c:	89bb      	ldrh	r3, [r7, #12]
 801255e:	4ab1      	ldr	r2, [pc, #708]	; (8012824 <Update_Blink+0x2fc>)
 8012560:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8012564:	89bb      	ldrh	r3, [r7, #12]
 8012566:	49af      	ldr	r1, [pc, #700]	; (8012824 <Update_Blink+0x2fc>)
 8012568:	00db      	lsls	r3, r3, #3
 801256a:	440b      	add	r3, r1
 801256c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012570:	4619      	mov	r1, r3
 8012572:	460b      	mov	r3, r1
 8012574:	005b      	lsls	r3, r3, #1
 8012576:	440b      	add	r3, r1
 8012578:	005b      	lsls	r3, r3, #1
 801257a:	4413      	add	r3, r2
 801257c:	60bb      	str	r3, [r7, #8]
  if(Blink == BLINK)
 801257e:	4bac      	ldr	r3, [pc, #688]	; (8012830 <Update_Blink+0x308>)
 8012580:	781b      	ldrb	r3, [r3, #0]
 8012582:	b2db      	uxtb	r3, r3
 8012584:	2b01      	cmp	r3, #1
 8012586:	f040 86ca 	bne.w	801331e <Update_Blink+0xdf6>
  {
    Blink = 0;
 801258a:	4ba9      	ldr	r3, [pc, #676]	; (8012830 <Update_Blink+0x308>)
 801258c:	2200      	movs	r2, #0
 801258e:	701a      	strb	r2, [r3, #0]
    List[MenuNow[ME]].Flg |= UPD; //
 8012590:	4ba6      	ldr	r3, [pc, #664]	; (801282c <Update_Blink+0x304>)
 8012592:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8012596:	4aa3      	ldr	r2, [pc, #652]	; (8012824 <Update_Blink+0x2fc>)
 8012598:	00db      	lsls	r3, r3, #3
 801259a:	4413      	add	r3, r2
 801259c:	799b      	ldrb	r3, [r3, #6]
 801259e:	4aa3      	ldr	r2, [pc, #652]	; (801282c <Update_Blink+0x304>)
 80125a0:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80125a4:	4610      	mov	r0, r2
 80125a6:	f043 0320 	orr.w	r3, r3, #32
 80125aa:	b2d9      	uxtb	r1, r3
 80125ac:	4a9d      	ldr	r2, [pc, #628]	; (8012824 <Update_Blink+0x2fc>)
 80125ae:	00c3      	lsls	r3, r0, #3
 80125b0:	4413      	add	r3, r2
 80125b2:	460a      	mov	r2, r1
 80125b4:	719a      	strb	r2, [r3, #6]
    switch(i)
 80125b6:	89bb      	ldrh	r3, [r7, #12]
 80125b8:	2b29      	cmp	r3, #41	; 0x29
 80125ba:	f200 86aa 	bhi.w	8013312 <Update_Blink+0xdea>
 80125be:	a201      	add	r2, pc, #4	; (adr r2, 80125c4 <Update_Blink+0x9c>)
 80125c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125c4:	0801272f 	.word	0x0801272f
 80125c8:	0801272f 	.word	0x0801272f
 80125cc:	0801272f 	.word	0x0801272f
 80125d0:	080127c3 	.word	0x080127c3
 80125d4:	080127f5 	.word	0x080127f5
 80125d8:	080127f5 	.word	0x080127f5
 80125dc:	0801292b 	.word	0x0801292b
 80125e0:	08012989 	.word	0x08012989
 80125e4:	080129e1 	.word	0x080129e1
 80125e8:	08012a13 	.word	0x08012a13
 80125ec:	08012a7f 	.word	0x08012a7f
 80125f0:	08012a7f 	.word	0x08012a7f
 80125f4:	08012be1 	.word	0x08012be1
 80125f8:	08012c3b 	.word	0x08012c3b
 80125fc:	08012c99 	.word	0x08012c99
 8012600:	08012d69 	.word	0x08012d69
 8012604:	08012d93 	.word	0x08012d93
 8012608:	08012c99 	.word	0x08012c99
 801260c:	08012dc1 	.word	0x08012dc1
 8012610:	08013313 	.word	0x08013313
 8012614:	08013313 	.word	0x08013313
 8012618:	08013313 	.word	0x08013313
 801261c:	08013313 	.word	0x08013313
 8012620:	08013313 	.word	0x08013313
 8012624:	08013313 	.word	0x08013313
 8012628:	08013313 	.word	0x08013313
 801262c:	08012e39 	.word	0x08012e39
 8012630:	08012eb5 	.word	0x08012eb5
 8012634:	08012ee3 	.word	0x08012ee3
 8012638:	0801266d 	.word	0x0801266d
 801263c:	0801266d 	.word	0x0801266d
 8012640:	0801266d 	.word	0x0801266d
 8012644:	0801266d 	.word	0x0801266d
 8012648:	0801266d 	.word	0x0801266d
 801264c:	0801266d 	.word	0x0801266d
 8012650:	0801266d 	.word	0x0801266d
 8012654:	08012f5f 	.word	0x08012f5f
 8012658:	08012ff9 	.word	0x08012ff9
 801265c:	080130bd 	.word	0x080130bd
 8012660:	0801316b 	.word	0x0801316b
 8012664:	08013205 	.word	0x08013205
 8012668:	08013273 	.word	0x08013273
    case SAVE_BUF:
    case SAVE_CSV:
    case SAVE_SVG:
    case LOAD_DAT:
    case LOAD_BUF:
      SetColor(GRY, TCOLOR[FN]);
 801266c:	f64f 4310 	movw	r3, #64528	; 0xfc10
 8012670:	4619      	mov	r1, r3
 8012672:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012676:	f7fb fb3f 	bl	800dcf8 <SetColor>
      u8ToDec3(NumStr, List[i].Val);
 801267a:	89bb      	ldrh	r3, [r7, #12]
 801267c:	4a69      	ldr	r2, [pc, #420]	; (8012824 <Update_Blink+0x2fc>)
 801267e:	00db      	lsls	r3, r3, #3
 8012680:	4413      	add	r3, r2
 8012682:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012686:	b2db      	uxtb	r3, r3
 8012688:	4619      	mov	r1, r3
 801268a:	486a      	ldr	r0, [pc, #424]	; (8012834 <Update_Blink+0x30c>)
 801268c:	f7ff f9bc 	bl	8011a08 <u8ToDec3>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*11);
 8012690:	4b69      	ldr	r3, [pc, #420]	; (8012838 <Update_Blink+0x310>)
 8012692:	781b      	ldrb	r3, [r3, #0]
 8012694:	b2d8      	uxtb	r0, r3
 8012696:	89bb      	ldrh	r3, [r7, #12]
 8012698:	4a68      	ldr	r2, [pc, #416]	; (801283c <Update_Blink+0x314>)
 801269a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801269e:	b29b      	uxth	r3, r3
 80126a0:	3b03      	subs	r3, #3
 80126a2:	b29b      	uxth	r3, r3
 80126a4:	b219      	sxth	r1, r3
 80126a6:	2342      	movs	r3, #66	; 0x42
 80126a8:	9301      	str	r3, [sp, #4]
 80126aa:	2300      	movs	r3, #0
 80126ac:	9300      	str	r3, [sp, #0]
 80126ae:	230b      	movs	r3, #11
 80126b0:	2203      	movs	r2, #3
 80126b2:	f7fb fc0f 	bl	800ded4 <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, ((i > SAVE_SVG)? "Load" : "Save"));//0513
 80126b6:	89bb      	ldrh	r3, [r7, #12]
 80126b8:	4a60      	ldr	r2, [pc, #384]	; (801283c <Update_Blink+0x314>)
 80126ba:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 80126be:	4b5e      	ldr	r3, [pc, #376]	; (8012838 <Update_Blink+0x310>)
 80126c0:	781b      	ldrb	r3, [r3, #0]
 80126c2:	b2da      	uxtb	r2, r3
 80126c4:	89bb      	ldrh	r3, [r7, #12]
 80126c6:	2b21      	cmp	r3, #33	; 0x21
 80126c8:	d901      	bls.n	80126ce <Update_Blink+0x1a6>
 80126ca:	4b5d      	ldr	r3, [pc, #372]	; (8012840 <Update_Blink+0x318>)
 80126cc:	e000      	b.n	80126d0 <Update_Blink+0x1a8>
 80126ce:	4b5d      	ldr	r3, [pc, #372]	; (8012844 <Update_Blink+0x31c>)
 80126d0:	2103      	movs	r1, #3
 80126d2:	f7fb fb29 	bl	800dd28 <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, (char *)NumStr);
 80126d6:	89bb      	ldrh	r3, [r7, #12]
 80126d8:	4a58      	ldr	r2, [pc, #352]	; (801283c <Update_Blink+0x314>)
 80126da:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80126de:	b29b      	uxth	r3, r3
 80126e0:	3318      	adds	r3, #24
 80126e2:	b29b      	uxth	r3, r3
 80126e4:	b218      	sxth	r0, r3
 80126e6:	4b54      	ldr	r3, [pc, #336]	; (8012838 <Update_Blink+0x310>)
 80126e8:	781b      	ldrb	r3, [r3, #0]
 80126ea:	b2da      	uxtb	r2, r3
 80126ec:	4b51      	ldr	r3, [pc, #324]	; (8012834 <Update_Blink+0x30c>)
 80126ee:	2103      	movs	r1, #3
 80126f0:	f7fb fb1a 	bl	800dd28 <DispStr>
      DispStr(S_X[i]+42, LABLE_Y, Twink, (List[i].PTR +(i - SAVE_BMP)*6));
 80126f4:	89bb      	ldrh	r3, [r7, #12]
 80126f6:	4a51      	ldr	r2, [pc, #324]	; (801283c <Update_Blink+0x314>)
 80126f8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80126fc:	b29b      	uxth	r3, r3
 80126fe:	332a      	adds	r3, #42	; 0x2a
 8012700:	b29b      	uxth	r3, r3
 8012702:	b218      	sxth	r0, r3
 8012704:	4b4c      	ldr	r3, [pc, #304]	; (8012838 <Update_Blink+0x310>)
 8012706:	781b      	ldrb	r3, [r3, #0]
 8012708:	b2dc      	uxtb	r4, r3
 801270a:	89bb      	ldrh	r3, [r7, #12]
 801270c:	4a45      	ldr	r2, [pc, #276]	; (8012824 <Update_Blink+0x2fc>)
 801270e:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8012712:	89bb      	ldrh	r3, [r7, #12]
 8012714:	f1a3 021d 	sub.w	r2, r3, #29
 8012718:	4613      	mov	r3, r2
 801271a:	005b      	lsls	r3, r3, #1
 801271c:	4413      	add	r3, r2
 801271e:	005b      	lsls	r3, r3, #1
 8012720:	440b      	add	r3, r1
 8012722:	4622      	mov	r2, r4
 8012724:	2103      	movs	r1, #3
 8012726:	f7fb faff 	bl	800dd28 <DispStr>
      break;
 801272a:	f000 bdf2 	b.w	8013312 <Update_Blink+0xdea>

    case Y_RANGES:
    case COUPLING:
    case PROBEATT:
      SetColor(GRY, TCOLOR[YN]);
 801272e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8012732:	4619      	mov	r1, r3
 8012734:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012738:	f7fb fade 	bl	800dcf8 <SetColor>
      Draw_Circle_D(Twink, S_X[Y_RANGES]-3, TITLE_Y_POS, 11, 0, 6*7);
 801273c:	4b3e      	ldr	r3, [pc, #248]	; (8012838 <Update_Blink+0x310>)
 801273e:	781b      	ldrb	r3, [r3, #0]
 8012740:	b2d8      	uxtb	r0, r3
 8012742:	232f      	movs	r3, #47	; 0x2f
 8012744:	b29b      	uxth	r3, r3
 8012746:	3b03      	subs	r3, #3
 8012748:	b29b      	uxth	r3, r3
 801274a:	b219      	sxth	r1, r3
 801274c:	232a      	movs	r3, #42	; 0x2a
 801274e:	9301      	str	r3, [sp, #4]
 8012750:	2300      	movs	r3, #0
 8012752:	9300      	str	r3, [sp, #0]
 8012754:	230b      	movs	r3, #11
 8012756:	22e1      	movs	r2, #225	; 0xe1
 8012758:	f7fb fbbc 	bl	800ded4 <Draw_Circle_D>
      DispStr(S_X[Y_RANGES], TITLE_Y_POS, Twink, (List[Y_RANGES].PTR +(Range)*6));
 801275c:	242f      	movs	r4, #47	; 0x2f
 801275e:	4b36      	ldr	r3, [pc, #216]	; (8012838 <Update_Blink+0x310>)
 8012760:	781b      	ldrb	r3, [r3, #0]
 8012762:	b2d8      	uxtb	r0, r3
 8012764:	4b2f      	ldr	r3, [pc, #188]	; (8012824 <Update_Blink+0x2fc>)
 8012766:	6819      	ldr	r1, [r3, #0]
 8012768:	89fa      	ldrh	r2, [r7, #14]
 801276a:	4613      	mov	r3, r2
 801276c:	005b      	lsls	r3, r3, #1
 801276e:	4413      	add	r3, r2
 8012770:	005b      	lsls	r3, r3, #1
 8012772:	440b      	add	r3, r1
 8012774:	4602      	mov	r2, r0
 8012776:	21e1      	movs	r1, #225	; 0xe1
 8012778:	4620      	mov	r0, r4
 801277a:	f7fb fad5 	bl	800dd28 <DispStr>
      DispStr(S_X[COUPLING], TITLE_Y_POS, Twink, (List[COUPLING].PTR +(List[COUPLING].Val)*6));
 801277e:	2047      	movs	r0, #71	; 0x47
 8012780:	4b2d      	ldr	r3, [pc, #180]	; (8012838 <Update_Blink+0x310>)
 8012782:	781b      	ldrb	r3, [r3, #0]
 8012784:	b2d9      	uxtb	r1, r3
 8012786:	4b27      	ldr	r3, [pc, #156]	; (8012824 <Update_Blink+0x2fc>)
 8012788:	689a      	ldr	r2, [r3, #8]
 801278a:	4b26      	ldr	r3, [pc, #152]	; (8012824 <Update_Blink+0x2fc>)
 801278c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012790:	461c      	mov	r4, r3
 8012792:	4623      	mov	r3, r4
 8012794:	005b      	lsls	r3, r3, #1
 8012796:	4423      	add	r3, r4
 8012798:	005b      	lsls	r3, r3, #1
 801279a:	4413      	add	r3, r2
 801279c:	460a      	mov	r2, r1
 801279e:	21e1      	movs	r1, #225	; 0xe1
 80127a0:	f7fb fac2 	bl	800dd28 <DispStr>
      DispStr10x14(S_X[PROBEATT], TITLE_Y_POS, PRN+SYMB,(List[PROBEATT].Val?("A"):("B")));
 80127a4:	2020      	movs	r0, #32
 80127a6:	4b1f      	ldr	r3, [pc, #124]	; (8012824 <Update_Blink+0x2fc>)
 80127a8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d001      	beq.n	80127b4 <Update_Blink+0x28c>
 80127b0:	4b25      	ldr	r3, [pc, #148]	; (8012848 <Update_Blink+0x320>)
 80127b2:	e000      	b.n	80127b6 <Update_Blink+0x28e>
 80127b4:	4b25      	ldr	r3, [pc, #148]	; (801284c <Update_Blink+0x324>)
 80127b6:	2210      	movs	r2, #16
 80127b8:	21e1      	movs	r1, #225	; 0xe1
 80127ba:	f7fb fd1d 	bl	800e1f8 <DispStr10x14>
      break;
 80127be:	f000 bda8 	b.w	8013312 <Update_Blink+0xdea>

    case V0_POSI:
      if(Twink) ParamTab[P1F] |=  D_HID;
 80127c2:	4b1d      	ldr	r3, [pc, #116]	; (8012838 <Update_Blink+0x310>)
 80127c4:	781b      	ldrb	r3, [r3, #0]
 80127c6:	b2db      	uxtb	r3, r3
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d009      	beq.n	80127e0 <Update_Blink+0x2b8>
 80127cc:	4b20      	ldr	r3, [pc, #128]	; (8012850 <Update_Blink+0x328>)
 80127ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80127d2:	f043 0301 	orr.w	r3, r3, #1
 80127d6:	b21a      	sxth	r2, r3
 80127d8:	4b1d      	ldr	r3, [pc, #116]	; (8012850 <Update_Blink+0x328>)
 80127da:	801a      	strh	r2, [r3, #0]
      else      ParamTab[P1F] &= ~D_HID;
      break;
 80127dc:	f000 bd99 	b.w	8013312 <Update_Blink+0xdea>
      else      ParamTab[P1F] &= ~D_HID;
 80127e0:	4b1b      	ldr	r3, [pc, #108]	; (8012850 <Update_Blink+0x328>)
 80127e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80127e6:	f023 0301 	bic.w	r3, r3, #1
 80127ea:	b21a      	sxth	r2, r3
 80127ec:	4b18      	ldr	r3, [pc, #96]	; (8012850 <Update_Blink+0x328>)
 80127ee:	801a      	strh	r2, [r3, #0]
      break;
 80127f0:	f000 bd8f 	b.w	8013312 <Update_Blink+0xdea>

    case V1_POSI:
    case V2_POSI:
      Tmp = (i == V1_POSI)? V1F : V2F;
 80127f4:	89bb      	ldrh	r3, [r7, #12]
 80127f6:	2b04      	cmp	r3, #4
 80127f8:	d101      	bne.n	80127fe <Update_Blink+0x2d6>
 80127fa:	2305      	movs	r3, #5
 80127fc:	e000      	b.n	8012800 <Update_Blink+0x2d8>
 80127fe:	2306      	movs	r3, #6
 8012800:	607b      	str	r3, [r7, #4]
      if(Twink) ParamTab[Tmp] |=  D_HID;
 8012802:	4b0d      	ldr	r3, [pc, #52]	; (8012838 <Update_Blink+0x310>)
 8012804:	781b      	ldrb	r3, [r3, #0]
 8012806:	b2db      	uxtb	r3, r3
 8012808:	2b00      	cmp	r3, #0
 801280a:	d023      	beq.n	8012854 <Update_Blink+0x32c>
 801280c:	4a10      	ldr	r2, [pc, #64]	; (8012850 <Update_Blink+0x328>)
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012814:	f043 0301 	orr.w	r3, r3, #1
 8012818:	b219      	sxth	r1, r3
 801281a:	4a0d      	ldr	r2, [pc, #52]	; (8012850 <Update_Blink+0x328>)
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8012822:	e022      	b.n	801286a <Update_Blink+0x342>
 8012824:	20000298 	.word	0x20000298
 8012828:	2000079e 	.word	0x2000079e
 801282c:	20000538 	.word	0x20000538
 8012830:	20000a31 	.word	0x20000a31
 8012834:	2000283c 	.word	0x2000283c
 8012838:	2000077c 	.word	0x2000077c
 801283c:	0800215c 	.word	0x0800215c
 8012840:	08000948 	.word	0x08000948
 8012844:	08000950 	.word	0x08000950
 8012848:	08000958 	.word	0x08000958
 801284c:	0800095c 	.word	0x0800095c
 8012850:	20000140 	.word	0x20000140
      else      ParamTab[Tmp] &= ~D_HID;
 8012854:	4ab1      	ldr	r2, [pc, #708]	; (8012b1c <Update_Blink+0x5f4>)
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801285c:	f023 0301 	bic.w	r3, r3, #1
 8012860:	b219      	sxth	r1, r3
 8012862:	4aae      	ldr	r2, [pc, #696]	; (8012b1c <Update_Blink+0x5f4>)
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      Tmp  =(ParamTab[V1x2]- ParamTab[V2x2])/2;         // V2 - V1 ��ֵ
 801286a:	4bac      	ldr	r3, [pc, #688]	; (8012b1c <Update_Blink+0x5f4>)
 801286c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8012870:	461a      	mov	r2, r3
 8012872:	4baa      	ldr	r3, [pc, #680]	; (8012b1c <Update_Blink+0x5f4>)
 8012874:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8012878:	1ad3      	subs	r3, r2, r3
 801287a:	0fda      	lsrs	r2, r3, #31
 801287c:	4413      	add	r3, r2
 801287e:	105b      	asrs	r3, r3, #1
 8012880:	607b      	str	r3, [r7, #4]
      Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8012882:	89fb      	ldrh	r3, [r7, #14]
 8012884:	4aa6      	ldr	r2, [pc, #664]	; (8012b20 <Update_Blink+0x5f8>)
 8012886:	5cd3      	ldrb	r3, [r2, r3]
 8012888:	461c      	mov	r4, r3
 801288a:	89fb      	ldrh	r3, [r7, #14]
 801288c:	4aa5      	ldr	r2, [pc, #660]	; (8012b24 <Update_Blink+0x5fc>)
 801288e:	5cd3      	ldrb	r3, [r2, r3]
 8012890:	4618      	mov	r0, r3
 8012892:	f7ff fa1d 	bl	8011cd0 <Exp>
 8012896:	4603      	mov	r3, r0
 8012898:	fb03 f204 	mul.w	r2, r3, r4
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	fb02 f303 	mul.w	r3, r2, r3
 80128a2:	607b      	str	r3, [r7, #4]
      Value2Str(NumStr, Tmp, V[0], 3, UNSIGN);
 80128a4:	2301      	movs	r3, #1
 80128a6:	9300      	str	r3, [sp, #0]
 80128a8:	2303      	movs	r3, #3
 80128aa:	4a9f      	ldr	r2, [pc, #636]	; (8012b28 <Update_Blink+0x600>)
 80128ac:	6879      	ldr	r1, [r7, #4]
 80128ae:	489f      	ldr	r0, [pc, #636]	; (8012b2c <Update_Blink+0x604>)
 80128b0:	f7ff f912 	bl	8011ad8 <Value2Str>
      SetColor(GRY, TCOLOR[YN]);
 80128b4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80128b8:	4619      	mov	r1, r3
 80128ba:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80128be:	f7fb fa1b 	bl	800dcf8 <SetColor>
      Draw_Circle_D(Twink, S_X[V1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 80128c2:	4b9b      	ldr	r3, [pc, #620]	; (8012b30 <Update_Blink+0x608>)
 80128c4:	781b      	ldrb	r3, [r3, #0]
 80128c6:	b2d8      	uxtb	r0, r3
 80128c8:	2307      	movs	r3, #7
 80128ca:	b29b      	uxth	r3, r3
 80128cc:	3b03      	subs	r3, #3
 80128ce:	b29b      	uxth	r3, r3
 80128d0:	b219      	sxth	r1, r3
 80128d2:	2336      	movs	r3, #54	; 0x36
 80128d4:	9301      	str	r3, [sp, #4]
 80128d6:	2300      	movs	r3, #0
 80128d8:	9300      	str	r3, [sp, #0]
 80128da:	230b      	movs	r3, #11
 80128dc:	2203      	movs	r2, #3
 80128de:	f7fb faf9 	bl	800ded4 <Draw_Circle_D>
      DispStr(S_X[V1_POSI]+0*6, LABLE_Y, Twink+SYMB, "]");
 80128e2:	2007      	movs	r0, #7
 80128e4:	4b92      	ldr	r3, [pc, #584]	; (8012b30 <Update_Blink+0x608>)
 80128e6:	781b      	ldrb	r3, [r3, #0]
 80128e8:	b2db      	uxtb	r3, r3
 80128ea:	3310      	adds	r3, #16
 80128ec:	b2da      	uxtb	r2, r3
 80128ee:	4b91      	ldr	r3, [pc, #580]	; (8012b34 <Update_Blink+0x60c>)
 80128f0:	2103      	movs	r1, #3
 80128f2:	f7fb fa19 	bl	800dd28 <DispStr>
      DispStr(S_X[V1_POSI]+1*6, LABLE_Y, Twink,      "V:      ");
 80128f6:	2307      	movs	r3, #7
 80128f8:	b29b      	uxth	r3, r3
 80128fa:	3306      	adds	r3, #6
 80128fc:	b29b      	uxth	r3, r3
 80128fe:	b218      	sxth	r0, r3
 8012900:	4b8b      	ldr	r3, [pc, #556]	; (8012b30 <Update_Blink+0x608>)
 8012902:	781b      	ldrb	r3, [r3, #0]
 8012904:	b2da      	uxtb	r2, r3
 8012906:	4b8c      	ldr	r3, [pc, #560]	; (8012b38 <Update_Blink+0x610>)
 8012908:	2103      	movs	r1, #3
 801290a:	f7fb fa0d 	bl	800dd28 <DispStr>
      DispStr(S_X[V1_POSI]+3*6, LABLE_Y, Twink, (char *)NumStr);
 801290e:	2307      	movs	r3, #7
 8012910:	b29b      	uxth	r3, r3
 8012912:	3312      	adds	r3, #18
 8012914:	b29b      	uxth	r3, r3
 8012916:	b218      	sxth	r0, r3
 8012918:	4b85      	ldr	r3, [pc, #532]	; (8012b30 <Update_Blink+0x608>)
 801291a:	781b      	ldrb	r3, [r3, #0]
 801291c:	b2da      	uxtb	r2, r3
 801291e:	4b83      	ldr	r3, [pc, #524]	; (8012b2c <Update_Blink+0x604>)
 8012920:	2103      	movs	r1, #3
 8012922:	f7fb fa01 	bl	800dd28 <DispStr>
      break;
 8012926:	f000 bcf4 	b.w	8013312 <Update_Blink+0xdea>

    case YN_TYPE:
      if(Twink) ParamTab[V1F] |=  D_HID;
 801292a:	4b81      	ldr	r3, [pc, #516]	; (8012b30 <Update_Blink+0x608>)
 801292c:	781b      	ldrb	r3, [r3, #0]
 801292e:	b2db      	uxtb	r3, r3
 8012930:	2b00      	cmp	r3, #0
 8012932:	d008      	beq.n	8012946 <Update_Blink+0x41e>
 8012934:	4b79      	ldr	r3, [pc, #484]	; (8012b1c <Update_Blink+0x5f4>)
 8012936:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801293a:	f043 0301 	orr.w	r3, r3, #1
 801293e:	b21a      	sxth	r2, r3
 8012940:	4b76      	ldr	r3, [pc, #472]	; (8012b1c <Update_Blink+0x5f4>)
 8012942:	815a      	strh	r2, [r3, #10]
 8012944:	e007      	b.n	8012956 <Update_Blink+0x42e>
      else      ParamTab[V1F] &= ~D_HID;
 8012946:	4b75      	ldr	r3, [pc, #468]	; (8012b1c <Update_Blink+0x5f4>)
 8012948:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801294c:	f023 0301 	bic.w	r3, r3, #1
 8012950:	b21a      	sxth	r2, r3
 8012952:	4b72      	ldr	r3, [pc, #456]	; (8012b1c <Update_Blink+0x5f4>)
 8012954:	815a      	strh	r2, [r3, #10]
      if(Twink) ParamTab[V2F] |=  D_HID;
 8012956:	4b76      	ldr	r3, [pc, #472]	; (8012b30 <Update_Blink+0x608>)
 8012958:	781b      	ldrb	r3, [r3, #0]
 801295a:	b2db      	uxtb	r3, r3
 801295c:	2b00      	cmp	r3, #0
 801295e:	d009      	beq.n	8012974 <Update_Blink+0x44c>
 8012960:	4b6e      	ldr	r3, [pc, #440]	; (8012b1c <Update_Blink+0x5f4>)
 8012962:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012966:	f043 0301 	orr.w	r3, r3, #1
 801296a:	b21a      	sxth	r2, r3
 801296c:	4b6b      	ldr	r3, [pc, #428]	; (8012b1c <Update_Blink+0x5f4>)
 801296e:	819a      	strh	r2, [r3, #12]
      else      ParamTab[V2F] &= ~D_HID;
      break;
 8012970:	f000 bccf 	b.w	8013312 <Update_Blink+0xdea>
      else      ParamTab[V2F] &= ~D_HID;
 8012974:	4b69      	ldr	r3, [pc, #420]	; (8012b1c <Update_Blink+0x5f4>)
 8012976:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801297a:	f023 0301 	bic.w	r3, r3, #1
 801297e:	b21a      	sxth	r2, r3
 8012980:	4b66      	ldr	r3, [pc, #408]	; (8012b1c <Update_Blink+0x5f4>)
 8012982:	819a      	strh	r2, [r3, #12]
      break;
 8012984:	f000 bcc5 	b.w	8013312 <Update_Blink+0xdea>

    case TIM_BASE:
      SetColor(GRY, TCOLOR[XN]);
 8012988:	f240 73ff 	movw	r3, #2047	; 0x7ff
 801298c:	4619      	mov	r1, r3
 801298e:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012992:	f7fb f9b1 	bl	800dcf8 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 2, 6*5);
 8012996:	4b66      	ldr	r3, [pc, #408]	; (8012b30 <Update_Blink+0x608>)
 8012998:	781b      	ldrb	r3, [r3, #0]
 801299a:	b2d8      	uxtb	r0, r3
 801299c:	89bb      	ldrh	r3, [r7, #12]
 801299e:	4a67      	ldr	r2, [pc, #412]	; (8012b3c <Update_Blink+0x614>)
 80129a0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80129a4:	b29b      	uxth	r3, r3
 80129a6:	3b03      	subs	r3, #3
 80129a8:	b29b      	uxth	r3, r3
 80129aa:	b219      	sxth	r1, r3
 80129ac:	231e      	movs	r3, #30
 80129ae:	9301      	str	r3, [sp, #4]
 80129b0:	2302      	movs	r3, #2
 80129b2:	9300      	str	r3, [sp, #0]
 80129b4:	230b      	movs	r3, #11
 80129b6:	22e1      	movs	r2, #225	; 0xe1
 80129b8:	f7fb fa8c 	bl	800ded4 <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, TimeBase_Str[List[TIM_BASE].Val]);
 80129bc:	89bb      	ldrh	r3, [r7, #12]
 80129be:	4a5f      	ldr	r2, [pc, #380]	; (8012b3c <Update_Blink+0x614>)
 80129c0:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 80129c4:	4b5a      	ldr	r3, [pc, #360]	; (8012b30 <Update_Blink+0x608>)
 80129c6:	781b      	ldrb	r3, [r3, #0]
 80129c8:	b2da      	uxtb	r2, r3
 80129ca:	4b5d      	ldr	r3, [pc, #372]	; (8012b40 <Update_Blink+0x618>)
 80129cc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80129d0:	00db      	lsls	r3, r3, #3
 80129d2:	495c      	ldr	r1, [pc, #368]	; (8012b44 <Update_Blink+0x61c>)
 80129d4:	440b      	add	r3, r1
 80129d6:	21e1      	movs	r1, #225	; 0xe1
 80129d8:	f7fb f9a6 	bl	800dd28 <DispStr>
      break;
 80129dc:	f000 bc99 	b.w	8013312 <Update_Blink+0xdea>

    case VIEWPOSI:
      if(Twink) ParamTab[T0F] |=  D_HID;
 80129e0:	4b53      	ldr	r3, [pc, #332]	; (8012b30 <Update_Blink+0x608>)
 80129e2:	781b      	ldrb	r3, [r3, #0]
 80129e4:	b2db      	uxtb	r3, r3
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d009      	beq.n	80129fe <Update_Blink+0x4d6>
 80129ea:	4b4c      	ldr	r3, [pc, #304]	; (8012b1c <Update_Blink+0x5f4>)
 80129ec:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80129f0:	f043 0301 	orr.w	r3, r3, #1
 80129f4:	b21a      	sxth	r2, r3
 80129f6:	4b49      	ldr	r3, [pc, #292]	; (8012b1c <Update_Blink+0x5f4>)
 80129f8:	81da      	strh	r2, [r3, #14]
      else      ParamTab[T0F] &= ~D_HID;
      break;
 80129fa:	f000 bc8a 	b.w	8013312 <Update_Blink+0xdea>
      else      ParamTab[T0F] &= ~D_HID;
 80129fe:	4b47      	ldr	r3, [pc, #284]	; (8012b1c <Update_Blink+0x5f4>)
 8012a00:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012a04:	f023 0301 	bic.w	r3, r3, #1
 8012a08:	b21a      	sxth	r2, r3
 8012a0a:	4b44      	ldr	r3, [pc, #272]	; (8012b1c <Update_Blink+0x5f4>)
 8012a0c:	81da      	strh	r2, [r3, #14]
      break;
 8012a0e:	f000 bc80 	b.w	8013312 <Update_Blink+0xdea>

    case SMPL_DPTH:
      SetColor(GRY, TCOLOR[XN]);
 8012a12:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8012a16:	4619      	mov	r1, r3
 8012a18:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012a1c:	f7fb f96c 	bl	800dcf8 <SetColor>
      Draw_Circle_D(Twink, S_X[SMPL_DPTH]-3, LABLE_Y, 11, 0, 6*11);
 8012a20:	4b43      	ldr	r3, [pc, #268]	; (8012b30 <Update_Blink+0x608>)
 8012a22:	781b      	ldrb	r3, [r3, #0]
 8012a24:	b2d8      	uxtb	r0, r3
 8012a26:	23f8      	movs	r3, #248	; 0xf8
 8012a28:	b29b      	uxth	r3, r3
 8012a2a:	3b03      	subs	r3, #3
 8012a2c:	b29b      	uxth	r3, r3
 8012a2e:	b219      	sxth	r1, r3
 8012a30:	2342      	movs	r3, #66	; 0x42
 8012a32:	9301      	str	r3, [sp, #4]
 8012a34:	2300      	movs	r3, #0
 8012a36:	9300      	str	r3, [sp, #0]
 8012a38:	230b      	movs	r3, #11
 8012a3a:	2203      	movs	r2, #3
 8012a3c:	f7fb fa4a 	bl	800ded4 <Draw_Circle_D>
      DispStr(S_X[SMPL_DPTH],    LABLE_Y,  Twink, "SmplDpth:  ");
 8012a40:	20f8      	movs	r0, #248	; 0xf8
 8012a42:	4b3b      	ldr	r3, [pc, #236]	; (8012b30 <Update_Blink+0x608>)
 8012a44:	781b      	ldrb	r3, [r3, #0]
 8012a46:	b2da      	uxtb	r2, r3
 8012a48:	4b3f      	ldr	r3, [pc, #252]	; (8012b48 <Update_Blink+0x620>)
 8012a4a:	2103      	movs	r1, #3
 8012a4c:	f7fb f96c 	bl	800dd28 <DispStr>
      DispStr(S_X[SMPL_DPTH]+6*9, LABLE_Y,  Twink, (char *)&D[List[SMPL_DPTH].Val]);
 8012a50:	23f8      	movs	r3, #248	; 0xf8
 8012a52:	b29b      	uxth	r3, r3
 8012a54:	3336      	adds	r3, #54	; 0x36
 8012a56:	b29b      	uxth	r3, r3
 8012a58:	b218      	sxth	r0, r3
 8012a5a:	4b35      	ldr	r3, [pc, #212]	; (8012b30 <Update_Blink+0x608>)
 8012a5c:	781b      	ldrb	r3, [r3, #0]
 8012a5e:	b2da      	uxtb	r2, r3
 8012a60:	4b37      	ldr	r3, [pc, #220]	; (8012b40 <Update_Blink+0x618>)
 8012a62:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8012a66:	4619      	mov	r1, r3
 8012a68:	460b      	mov	r3, r1
 8012a6a:	005b      	lsls	r3, r3, #1
 8012a6c:	440b      	add	r3, r1
 8012a6e:	005b      	lsls	r3, r3, #1
 8012a70:	4936      	ldr	r1, [pc, #216]	; (8012b4c <Update_Blink+0x624>)
 8012a72:	440b      	add	r3, r1
 8012a74:	2103      	movs	r1, #3
 8012a76:	f7fb f957 	bl	800dd28 <DispStr>
      break;
 8012a7a:	f000 bc4a 	b.w	8013312 <Update_Blink+0xdea>

    case T1_POSI:
    case T2_POSI:
      Tmp = (i == T1_POSI)? T1F : T2F;
 8012a7e:	89bb      	ldrh	r3, [r7, #12]
 8012a80:	2b0a      	cmp	r3, #10
 8012a82:	d101      	bne.n	8012a88 <Update_Blink+0x560>
 8012a84:	2308      	movs	r3, #8
 8012a86:	e000      	b.n	8012a8a <Update_Blink+0x562>
 8012a88:	2309      	movs	r3, #9
 8012a8a:	607b      	str	r3, [r7, #4]
      if(Twink) ParamTab[Tmp] |=  D_HID;
 8012a8c:	4b28      	ldr	r3, [pc, #160]	; (8012b30 <Update_Blink+0x608>)
 8012a8e:	781b      	ldrb	r3, [r3, #0]
 8012a90:	b2db      	uxtb	r3, r3
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d00b      	beq.n	8012aae <Update_Blink+0x586>
 8012a96:	4a21      	ldr	r2, [pc, #132]	; (8012b1c <Update_Blink+0x5f4>)
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012a9e:	f043 0301 	orr.w	r3, r3, #1
 8012aa2:	b219      	sxth	r1, r3
 8012aa4:	4a1d      	ldr	r2, [pc, #116]	; (8012b1c <Update_Blink+0x5f4>)
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8012aac:	e00a      	b.n	8012ac4 <Update_Blink+0x59c>
      else      ParamTab[Tmp] &= ~D_HID;
 8012aae:	4a1b      	ldr	r2, [pc, #108]	; (8012b1c <Update_Blink+0x5f4>)
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012ab6:	f023 0301 	bic.w	r3, r3, #1
 8012aba:	b219      	sxth	r1, r3
 8012abc:	4a17      	ldr	r2, [pc, #92]	; (8012b1c <Update_Blink+0x5f4>)
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      Tmp  = ParamTab[T2x1] - ParamTab[T1x1];          // T2 - T1 ��ֵ
 8012ac4:	4b15      	ldr	r3, [pc, #84]	; (8012b1c <Update_Blink+0x5f4>)
 8012ac6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8012aca:	461a      	mov	r2, r3
 8012acc:	4b13      	ldr	r3, [pc, #76]	; (8012b1c <Update_Blink+0x5f4>)
 8012ace:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8012ad2:	1ad3      	subs	r3, r2, r3
 8012ad4:	607b      	str	r3, [r7, #4]
      Tmp *= B_SCALE[List[TIM_BASE].Val]* Exp(T_SCALE[List[TIM_BASE].Val]);
 8012ad6:	4b1a      	ldr	r3, [pc, #104]	; (8012b40 <Update_Blink+0x618>)
 8012ad8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012adc:	461a      	mov	r2, r3
 8012ade:	4b1c      	ldr	r3, [pc, #112]	; (8012b50 <Update_Blink+0x628>)
 8012ae0:	5c9b      	ldrb	r3, [r3, r2]
 8012ae2:	461c      	mov	r4, r3
 8012ae4:	4b16      	ldr	r3, [pc, #88]	; (8012b40 <Update_Blink+0x618>)
 8012ae6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012aea:	461a      	mov	r2, r3
 8012aec:	4b19      	ldr	r3, [pc, #100]	; (8012b54 <Update_Blink+0x62c>)
 8012aee:	5c9b      	ldrb	r3, [r3, r2]
 8012af0:	4618      	mov	r0, r3
 8012af2:	f7ff f8ed 	bl	8011cd0 <Exp>
 8012af6:	4603      	mov	r3, r0
 8012af8:	fb03 f204 	mul.w	r2, r3, r4
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	fb02 f303 	mul.w	r3, r2, r3
 8012b02:	607b      	str	r3, [r7, #4]
      if(Tmp>=0)
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	db28      	blt.n	8012b5c <Update_Blink+0x634>
        Value2Str(NumStr, Tmp, T[0], 3, UNSIGN);
 8012b0a:	2301      	movs	r3, #1
 8012b0c:	9300      	str	r3, [sp, #0]
 8012b0e:	2303      	movs	r3, #3
 8012b10:	4a11      	ldr	r2, [pc, #68]	; (8012b58 <Update_Blink+0x630>)
 8012b12:	6879      	ldr	r1, [r7, #4]
 8012b14:	4805      	ldr	r0, [pc, #20]	; (8012b2c <Update_Blink+0x604>)
 8012b16:	f7fe ffdf 	bl	8011ad8 <Value2Str>
 8012b1a:	e027      	b.n	8012b6c <Update_Blink+0x644>
 8012b1c:	20000140 	.word	0x20000140
 8012b20:	08002130 	.word	0x08002130
 8012b24:	08002108 	.word	0x08002108
 8012b28:	08001d00 	.word	0x08001d00
 8012b2c:	2000283c 	.word	0x2000283c
 8012b30:	2000077c 	.word	0x2000077c
 8012b34:	08000960 	.word	0x08000960
 8012b38:	08000964 	.word	0x08000964
 8012b3c:	0800215c 	.word	0x0800215c
 8012b40:	20000298 	.word	0x20000298
 8012b44:	200001d0 	.word	0x200001d0
 8012b48:	08000970 	.word	0x08000970
 8012b4c:	08001c4c 	.word	0x08001c4c
 8012b50:	0800211c 	.word	0x0800211c
 8012b54:	080020f4 	.word	0x080020f4
 8012b58:	08001ce8 	.word	0x08001ce8
      else
        Value2Str(NumStr, Tmp, T[0], 3, SIGN);
 8012b5c:	2300      	movs	r3, #0
 8012b5e:	9300      	str	r3, [sp, #0]
 8012b60:	2303      	movs	r3, #3
 8012b62:	4aa3      	ldr	r2, [pc, #652]	; (8012df0 <Update_Blink+0x8c8>)
 8012b64:	6879      	ldr	r1, [r7, #4]
 8012b66:	48a3      	ldr	r0, [pc, #652]	; (8012df4 <Update_Blink+0x8cc>)
 8012b68:	f7fe ffb6 	bl	8011ad8 <Value2Str>
      SetColor(GRY, TCOLOR[XN]);
 8012b6c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8012b70:	4619      	mov	r1, r3
 8012b72:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012b76:	f7fb f8bf 	bl	800dcf8 <SetColor>
      Draw_Circle_D(Twink, S_X[T1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 8012b7a:	4b9f      	ldr	r3, [pc, #636]	; (8012df8 <Update_Blink+0x8d0>)
 8012b7c:	781b      	ldrb	r3, [r3, #0]
 8012b7e:	b2d8      	uxtb	r0, r3
 8012b80:	2307      	movs	r3, #7
 8012b82:	b29b      	uxth	r3, r3
 8012b84:	3b03      	subs	r3, #3
 8012b86:	b29b      	uxth	r3, r3
 8012b88:	b219      	sxth	r1, r3
 8012b8a:	2336      	movs	r3, #54	; 0x36
 8012b8c:	9301      	str	r3, [sp, #4]
 8012b8e:	2300      	movs	r3, #0
 8012b90:	9300      	str	r3, [sp, #0]
 8012b92:	230b      	movs	r3, #11
 8012b94:	2203      	movs	r2, #3
 8012b96:	f7fb f99d 	bl	800ded4 <Draw_Circle_D>
      DispStr(S_X[T1_POSI]+0*6, LABLE_Y, Twink+SYMB, "]");
 8012b9a:	2007      	movs	r0, #7
 8012b9c:	4b96      	ldr	r3, [pc, #600]	; (8012df8 <Update_Blink+0x8d0>)
 8012b9e:	781b      	ldrb	r3, [r3, #0]
 8012ba0:	b2db      	uxtb	r3, r3
 8012ba2:	3310      	adds	r3, #16
 8012ba4:	b2da      	uxtb	r2, r3
 8012ba6:	4b95      	ldr	r3, [pc, #596]	; (8012dfc <Update_Blink+0x8d4>)
 8012ba8:	2103      	movs	r1, #3
 8012baa:	f7fb f8bd 	bl	800dd28 <DispStr>
      DispStr(S_X[T1_POSI]+1*6, LABLE_Y, Twink,      "T:      ");
 8012bae:	2307      	movs	r3, #7
 8012bb0:	b29b      	uxth	r3, r3
 8012bb2:	3306      	adds	r3, #6
 8012bb4:	b29b      	uxth	r3, r3
 8012bb6:	b218      	sxth	r0, r3
 8012bb8:	4b8f      	ldr	r3, [pc, #572]	; (8012df8 <Update_Blink+0x8d0>)
 8012bba:	781b      	ldrb	r3, [r3, #0]
 8012bbc:	b2da      	uxtb	r2, r3
 8012bbe:	4b90      	ldr	r3, [pc, #576]	; (8012e00 <Update_Blink+0x8d8>)
 8012bc0:	2103      	movs	r1, #3
 8012bc2:	f7fb f8b1 	bl	800dd28 <DispStr>
      DispStr(S_X[T1_POSI]+3*6, LABLE_Y, Twink,      (char *)NumStr);
 8012bc6:	2307      	movs	r3, #7
 8012bc8:	b29b      	uxth	r3, r3
 8012bca:	3312      	adds	r3, #18
 8012bcc:	b29b      	uxth	r3, r3
 8012bce:	b218      	sxth	r0, r3
 8012bd0:	4b89      	ldr	r3, [pc, #548]	; (8012df8 <Update_Blink+0x8d0>)
 8012bd2:	781b      	ldrb	r3, [r3, #0]
 8012bd4:	b2da      	uxtb	r2, r3
 8012bd6:	4b87      	ldr	r3, [pc, #540]	; (8012df4 <Update_Blink+0x8cc>)
 8012bd8:	2103      	movs	r1, #3
 8012bda:	f7fb f8a5 	bl	800dd28 <DispStr>
      break;
 8012bde:	e398      	b.n	8013312 <Update_Blink+0xdea>

    case XN_TYPE:
      if(Twink) ParamTab[T1F] |=  D_HID;
 8012be0:	4b85      	ldr	r3, [pc, #532]	; (8012df8 <Update_Blink+0x8d0>)
 8012be2:	781b      	ldrb	r3, [r3, #0]
 8012be4:	b2db      	uxtb	r3, r3
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d008      	beq.n	8012bfc <Update_Blink+0x6d4>
 8012bea:	4b86      	ldr	r3, [pc, #536]	; (8012e04 <Update_Blink+0x8dc>)
 8012bec:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8012bf0:	f043 0301 	orr.w	r3, r3, #1
 8012bf4:	b21a      	sxth	r2, r3
 8012bf6:	4b83      	ldr	r3, [pc, #524]	; (8012e04 <Update_Blink+0x8dc>)
 8012bf8:	821a      	strh	r2, [r3, #16]
 8012bfa:	e007      	b.n	8012c0c <Update_Blink+0x6e4>
      else      ParamTab[T1F] &= ~D_HID;
 8012bfc:	4b81      	ldr	r3, [pc, #516]	; (8012e04 <Update_Blink+0x8dc>)
 8012bfe:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8012c02:	f023 0301 	bic.w	r3, r3, #1
 8012c06:	b21a      	sxth	r2, r3
 8012c08:	4b7e      	ldr	r3, [pc, #504]	; (8012e04 <Update_Blink+0x8dc>)
 8012c0a:	821a      	strh	r2, [r3, #16]
      if(Twink) ParamTab[T2F] |=  D_HID;
 8012c0c:	4b7a      	ldr	r3, [pc, #488]	; (8012df8 <Update_Blink+0x8d0>)
 8012c0e:	781b      	ldrb	r3, [r3, #0]
 8012c10:	b2db      	uxtb	r3, r3
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d008      	beq.n	8012c28 <Update_Blink+0x700>
 8012c16:	4b7b      	ldr	r3, [pc, #492]	; (8012e04 <Update_Blink+0x8dc>)
 8012c18:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8012c1c:	f043 0301 	orr.w	r3, r3, #1
 8012c20:	b21a      	sxth	r2, r3
 8012c22:	4b78      	ldr	r3, [pc, #480]	; (8012e04 <Update_Blink+0x8dc>)
 8012c24:	825a      	strh	r2, [r3, #18]
      else      ParamTab[T2F] &= ~D_HID;
      break;
 8012c26:	e374      	b.n	8013312 <Update_Blink+0xdea>
      else      ParamTab[T2F] &= ~D_HID;
 8012c28:	4b76      	ldr	r3, [pc, #472]	; (8012e04 <Update_Blink+0x8dc>)
 8012c2a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8012c2e:	f023 0301 	bic.w	r3, r3, #1
 8012c32:	b21a      	sxth	r2, r3
 8012c34:	4b73      	ldr	r3, [pc, #460]	; (8012e04 <Update_Blink+0x8dc>)
 8012c36:	825a      	strh	r2, [r3, #18]
      break;
 8012c38:	e36b      	b.n	8013312 <Update_Blink+0xdea>

    case SYNCMODE:
      if(!(Status &  STOP))
 8012c3a:	4b73      	ldr	r3, [pc, #460]	; (8012e08 <Update_Blink+0x8e0>)
 8012c3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012c40:	b29b      	uxth	r3, r3
 8012c42:	f003 0301 	and.w	r3, r3, #1
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	f040 8362 	bne.w	8013310 <Update_Blink+0xde8>
      {
      SetColor(GRY, TCOLOR[TRG]);
 8012c4c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8012c50:	4619      	mov	r1, r3
 8012c52:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012c56:	f7fb f84f 	bl	800dcf8 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 1, 6*4);
 8012c5a:	4b67      	ldr	r3, [pc, #412]	; (8012df8 <Update_Blink+0x8d0>)
 8012c5c:	781b      	ldrb	r3, [r3, #0]
 8012c5e:	b2d8      	uxtb	r0, r3
 8012c60:	89bb      	ldrh	r3, [r7, #12]
 8012c62:	4a6a      	ldr	r2, [pc, #424]	; (8012e0c <Update_Blink+0x8e4>)
 8012c64:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012c68:	b29b      	uxth	r3, r3
 8012c6a:	3b03      	subs	r3, #3
 8012c6c:	b29b      	uxth	r3, r3
 8012c6e:	b219      	sxth	r1, r3
 8012c70:	2318      	movs	r3, #24
 8012c72:	9301      	str	r3, [sp, #4]
 8012c74:	2301      	movs	r3, #1
 8012c76:	9300      	str	r3, [sp, #0]
 8012c78:	230b      	movs	r3, #11
 8012c7a:	22e1      	movs	r2, #225	; 0xe1
 8012c7c:	f7fb f92a 	bl	800ded4 <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, (char *)ptr);
 8012c80:	89bb      	ldrh	r3, [r7, #12]
 8012c82:	4a62      	ldr	r2, [pc, #392]	; (8012e0c <Update_Blink+0x8e4>)
 8012c84:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012c88:	4b5b      	ldr	r3, [pc, #364]	; (8012df8 <Update_Blink+0x8d0>)
 8012c8a:	781b      	ldrb	r3, [r3, #0]
 8012c8c:	b2da      	uxtb	r2, r3
 8012c8e:	68bb      	ldr	r3, [r7, #8]
 8012c90:	21e1      	movs	r1, #225	; 0xe1
 8012c92:	f7fb f849 	bl	800dd28 <DispStr>
      }
      break;
 8012c96:	e33b      	b.n	8013310 <Update_Blink+0xde8>

    case TR_MODE:
    case SENSITIVE:
      SetColor(GRY, TCOLOR[TRG]);
 8012c98:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8012c9c:	4619      	mov	r1, r3
 8012c9e:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012ca2:	f7fb f829 	bl	800dcf8 <SetColor>
      Draw_Circle_D(Twink, S_X[TR_MODE]-3, TITLE_Y_POS, 11, 0, 6*8);
 8012ca6:	4b54      	ldr	r3, [pc, #336]	; (8012df8 <Update_Blink+0x8d0>)
 8012ca8:	781b      	ldrb	r3, [r3, #0]
 8012caa:	b2d8      	uxtb	r0, r3
 8012cac:	23dd      	movs	r3, #221	; 0xdd
 8012cae:	b29b      	uxth	r3, r3
 8012cb0:	3b03      	subs	r3, #3
 8012cb2:	b29b      	uxth	r3, r3
 8012cb4:	b219      	sxth	r1, r3
 8012cb6:	2330      	movs	r3, #48	; 0x30
 8012cb8:	9301      	str	r3, [sp, #4]
 8012cba:	2300      	movs	r3, #0
 8012cbc:	9300      	str	r3, [sp, #0]
 8012cbe:	230b      	movs	r3, #11
 8012cc0:	22e1      	movs	r2, #225	; 0xe1
 8012cc2:	f7fb f907 	bl	800ded4 <Draw_Circle_D>
      DispStr10x14(S_X[TR_MODE], TITLE_Y_POS, Twink+SYMB,(List[TR_MODE].Val?("D"):("C")));
 8012cc6:	20dd      	movs	r0, #221	; 0xdd
 8012cc8:	4b4b      	ldr	r3, [pc, #300]	; (8012df8 <Update_Blink+0x8d0>)
 8012cca:	781b      	ldrb	r3, [r3, #0]
 8012ccc:	b2db      	uxtb	r3, r3
 8012cce:	3310      	adds	r3, #16
 8012cd0:	b2da      	uxtb	r2, r3
 8012cd2:	4b4f      	ldr	r3, [pc, #316]	; (8012e10 <Update_Blink+0x8e8>)
 8012cd4:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d001      	beq.n	8012ce0 <Update_Blink+0x7b8>
 8012cdc:	4b4d      	ldr	r3, [pc, #308]	; (8012e14 <Update_Blink+0x8ec>)
 8012cde:	e000      	b.n	8012ce2 <Update_Blink+0x7ba>
 8012ce0:	4b4d      	ldr	r3, [pc, #308]	; (8012e18 <Update_Blink+0x8f0>)
 8012ce2:	21e1      	movs	r1, #225	; 0xe1
 8012ce4:	f7fb fa88 	bl	800e1f8 <DispStr10x14>

      Tmp  = List[SENSITIVE].Val;                        // �����ز�ֵ
 8012ce8:	4b49      	ldr	r3, [pc, #292]	; (8012e10 <Update_Blink+0x8e8>)
 8012cea:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8012cee:	607b      	str	r3, [r7, #4]
      Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8012cf0:	89fb      	ldrh	r3, [r7, #14]
 8012cf2:	4a4a      	ldr	r2, [pc, #296]	; (8012e1c <Update_Blink+0x8f4>)
 8012cf4:	5cd3      	ldrb	r3, [r2, r3]
 8012cf6:	461c      	mov	r4, r3
 8012cf8:	89fb      	ldrh	r3, [r7, #14]
 8012cfa:	4a49      	ldr	r2, [pc, #292]	; (8012e20 <Update_Blink+0x8f8>)
 8012cfc:	5cd3      	ldrb	r3, [r2, r3]
 8012cfe:	4618      	mov	r0, r3
 8012d00:	f7fe ffe6 	bl	8011cd0 <Exp>
 8012d04:	4603      	mov	r3, r0
 8012d06:	fb03 f204 	mul.w	r2, r3, r4
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	fb02 f303 	mul.w	r3, r2, r3
 8012d10:	607b      	str	r3, [r7, #4]
      Value2Str(NumStr, Tmp, V[0], 2, UNSIGN);
 8012d12:	2301      	movs	r3, #1
 8012d14:	9300      	str	r3, [sp, #0]
 8012d16:	2302      	movs	r3, #2
 8012d18:	4a42      	ldr	r2, [pc, #264]	; (8012e24 <Update_Blink+0x8fc>)
 8012d1a:	6879      	ldr	r1, [r7, #4]
 8012d1c:	4835      	ldr	r0, [pc, #212]	; (8012df4 <Update_Blink+0x8cc>)
 8012d1e:	f7fe fedb 	bl	8011ad8 <Value2Str>
      DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, Twink,  "     ");
 8012d22:	23e7      	movs	r3, #231	; 0xe7
 8012d24:	b29b      	uxth	r3, r3
 8012d26:	3309      	adds	r3, #9
 8012d28:	b29b      	uxth	r3, r3
 8012d2a:	b218      	sxth	r0, r3
 8012d2c:	4b32      	ldr	r3, [pc, #200]	; (8012df8 <Update_Blink+0x8d0>)
 8012d2e:	781b      	ldrb	r3, [r3, #0]
 8012d30:	b2da      	uxtb	r2, r3
 8012d32:	4b3d      	ldr	r3, [pc, #244]	; (8012e28 <Update_Blink+0x900>)
 8012d34:	21e1      	movs	r1, #225	; 0xe1
 8012d36:	f7fa fff7 	bl	800dd28 <DispStr>
      DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, Twink+SYMB,"E");
 8012d3a:	20e7      	movs	r0, #231	; 0xe7
 8012d3c:	4b2e      	ldr	r3, [pc, #184]	; (8012df8 <Update_Blink+0x8d0>)
 8012d3e:	781b      	ldrb	r3, [r3, #0]
 8012d40:	b2db      	uxtb	r3, r3
 8012d42:	3310      	adds	r3, #16
 8012d44:	b2da      	uxtb	r2, r3
 8012d46:	4b39      	ldr	r3, [pc, #228]	; (8012e2c <Update_Blink+0x904>)
 8012d48:	21e1      	movs	r1, #225	; 0xe1
 8012d4a:	f7fb fa55 	bl	800e1f8 <DispStr10x14>
      DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, Twink     ,  (char *)NumStr);
 8012d4e:	23e7      	movs	r3, #231	; 0xe7
 8012d50:	b29b      	uxth	r3, r3
 8012d52:	3309      	adds	r3, #9
 8012d54:	b29b      	uxth	r3, r3
 8012d56:	b218      	sxth	r0, r3
 8012d58:	4b27      	ldr	r3, [pc, #156]	; (8012df8 <Update_Blink+0x8d0>)
 8012d5a:	781b      	ldrb	r3, [r3, #0]
 8012d5c:	b2da      	uxtb	r2, r3
 8012d5e:	4b25      	ldr	r3, [pc, #148]	; (8012df4 <Update_Blink+0x8cc>)
 8012d60:	21e1      	movs	r1, #225	; 0xe1
 8012d62:	f7fa ffe1 	bl	800dd28 <DispStr>
      break;
 8012d66:	e2d4      	b.n	8013312 <Update_Blink+0xdea>

    case FITTRIGG:
      SetColor(GRY, TCOLOR[TRG]);
 8012d68:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8012d6c:	4619      	mov	r1, r3
 8012d6e:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012d72:	f7fa ffc1 	bl	800dcf8 <SetColor>
      DispStr10x14(S_X[FITTRIGG], TITLE_Y_POS, PRN+SYMB,(List[FITTRIGG].Val?("F"):("B")));
 8012d76:	20cf      	movs	r0, #207	; 0xcf
 8012d78:	4b25      	ldr	r3, [pc, #148]	; (8012e10 <Update_Blink+0x8e8>)
 8012d7a:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d001      	beq.n	8012d86 <Update_Blink+0x85e>
 8012d82:	4b2b      	ldr	r3, [pc, #172]	; (8012e30 <Update_Blink+0x908>)
 8012d84:	e000      	b.n	8012d88 <Update_Blink+0x860>
 8012d86:	4b2b      	ldr	r3, [pc, #172]	; (8012e34 <Update_Blink+0x90c>)
 8012d88:	2210      	movs	r2, #16
 8012d8a:	21e1      	movs	r1, #225	; 0xe1
 8012d8c:	f7fb fa34 	bl	800e1f8 <DispStr10x14>
      break;
 8012d90:	e2bf      	b.n	8013312 <Update_Blink+0xdea>

    case THRESHOLD:
      if(Twink) ParamTab[VTF] |=  D_HID;
 8012d92:	4b19      	ldr	r3, [pc, #100]	; (8012df8 <Update_Blink+0x8d0>)
 8012d94:	781b      	ldrb	r3, [r3, #0]
 8012d96:	b2db      	uxtb	r3, r3
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d008      	beq.n	8012dae <Update_Blink+0x886>
 8012d9c:	4b19      	ldr	r3, [pc, #100]	; (8012e04 <Update_Blink+0x8dc>)
 8012d9e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012da2:	f043 0301 	orr.w	r3, r3, #1
 8012da6:	b21a      	sxth	r2, r3
 8012da8:	4b16      	ldr	r3, [pc, #88]	; (8012e04 <Update_Blink+0x8dc>)
 8012daa:	811a      	strh	r2, [r3, #8]
      else      ParamTab[VTF] &= ~D_HID;
      break;
 8012dac:	e2b1      	b.n	8013312 <Update_Blink+0xdea>
      else      ParamTab[VTF] &= ~D_HID;
 8012dae:	4b15      	ldr	r3, [pc, #84]	; (8012e04 <Update_Blink+0x8dc>)
 8012db0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012db4:	f023 0301 	bic.w	r3, r3, #1
 8012db8:	b21a      	sxth	r2, r3
 8012dba:	4b12      	ldr	r3, [pc, #72]	; (8012e04 <Update_Blink+0x8dc>)
 8012dbc:	811a      	strh	r2, [r3, #8]
      break;
 8012dbe:	e2a8      	b.n	8013312 <Update_Blink+0xdea>

    case TR_TYPE:
      if(Twink) ParamTab[VTF] |=  D_HID;
 8012dc0:	4b0d      	ldr	r3, [pc, #52]	; (8012df8 <Update_Blink+0x8d0>)
 8012dc2:	781b      	ldrb	r3, [r3, #0]
 8012dc4:	b2db      	uxtb	r3, r3
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d008      	beq.n	8012ddc <Update_Blink+0x8b4>
 8012dca:	4b0e      	ldr	r3, [pc, #56]	; (8012e04 <Update_Blink+0x8dc>)
 8012dcc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012dd0:	f043 0301 	orr.w	r3, r3, #1
 8012dd4:	b21a      	sxth	r2, r3
 8012dd6:	4b0b      	ldr	r3, [pc, #44]	; (8012e04 <Update_Blink+0x8dc>)
 8012dd8:	811a      	strh	r2, [r3, #8]
      else      ParamTab[VTF] &= ~D_HID;
      break;
 8012dda:	e29a      	b.n	8013312 <Update_Blink+0xdea>
      else      ParamTab[VTF] &= ~D_HID;
 8012ddc:	4b09      	ldr	r3, [pc, #36]	; (8012e04 <Update_Blink+0x8dc>)
 8012dde:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012de2:	f023 0301 	bic.w	r3, r3, #1
 8012de6:	b21a      	sxth	r2, r3
 8012de8:	4b06      	ldr	r3, [pc, #24]	; (8012e04 <Update_Blink+0x8dc>)
 8012dea:	811a      	strh	r2, [r3, #8]
      break;
 8012dec:	e291      	b.n	8013312 <Update_Blink+0xdea>
 8012dee:	bf00      	nop
 8012df0:	08001ce8 	.word	0x08001ce8
 8012df4:	2000283c 	.word	0x2000283c
 8012df8:	2000077c 	.word	0x2000077c
 8012dfc:	08000960 	.word	0x08000960
 8012e00:	0800097c 	.word	0x0800097c
 8012e04:	20000140 	.word	0x20000140
 8012e08:	200007a0 	.word	0x200007a0
 8012e0c:	0800215c 	.word	0x0800215c
 8012e10:	20000298 	.word	0x20000298
 8012e14:	08000988 	.word	0x08000988
 8012e18:	0800098c 	.word	0x0800098c
 8012e1c:	08002130 	.word	0x08002130
 8012e20:	08002108 	.word	0x08002108
 8012e24:	08001d00 	.word	0x08001d00
 8012e28:	08000990 	.word	0x08000990
 8012e2c:	08000998 	.word	0x08000998
 8012e30:	0800099c 	.word	0x0800099c
 8012e34:	0800095c 	.word	0x0800095c

    case EXT_REFN:
      SetColor(GRY, TCOLOR[EX]);
 8012e38:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8012e3c:	4619      	mov	r1, r3
 8012e3e:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012e42:	f7fa ff59 	bl	800dcf8 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 1, 6*5);
 8012e46:	4b93      	ldr	r3, [pc, #588]	; (8013094 <Update_Blink+0xb6c>)
 8012e48:	781b      	ldrb	r3, [r3, #0]
 8012e4a:	b2d8      	uxtb	r0, r3
 8012e4c:	89bb      	ldrh	r3, [r7, #12]
 8012e4e:	4a92      	ldr	r2, [pc, #584]	; (8013098 <Update_Blink+0xb70>)
 8012e50:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012e54:	b29b      	uxth	r3, r3
 8012e56:	3b03      	subs	r3, #3
 8012e58:	b29b      	uxth	r3, r3
 8012e5a:	b219      	sxth	r1, r3
 8012e5c:	231e      	movs	r3, #30
 8012e5e:	9301      	str	r3, [sp, #4]
 8012e60:	2301      	movs	r3, #1
 8012e62:	9300      	str	r3, [sp, #0]
 8012e64:	230b      	movs	r3, #11
 8012e66:	22e1      	movs	r2, #225	; 0xe1
 8012e68:	f7fb f834 	bl	800ded4 <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 8012e6c:	89bb      	ldrh	r3, [r7, #12]
 8012e6e:	4a8a      	ldr	r2, [pc, #552]	; (8013098 <Update_Blink+0xb70>)
 8012e70:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012e74:	4b87      	ldr	r3, [pc, #540]	; (8013094 <Update_Blink+0xb6c>)
 8012e76:	781b      	ldrb	r3, [r3, #0]
 8012e78:	b2da      	uxtb	r2, r3
 8012e7a:	4b88      	ldr	r3, [pc, #544]	; (801309c <Update_Blink+0xb74>)
 8012e7c:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d00a      	beq.n	8012e9a <Update_Blink+0x972>
 8012e84:	4b85      	ldr	r3, [pc, #532]	; (801309c <Update_Blink+0xb74>)
 8012e86:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8012e8a:	4619      	mov	r1, r3
 8012e8c:	460b      	mov	r3, r1
 8012e8e:	005b      	lsls	r3, r3, #1
 8012e90:	440b      	add	r3, r1
 8012e92:	005b      	lsls	r3, r3, #1
 8012e94:	4982      	ldr	r1, [pc, #520]	; (80130a0 <Update_Blink+0xb78>)
 8012e96:	440b      	add	r3, r1
 8012e98:	e000      	b.n	8012e9c <Update_Blink+0x974>
 8012e9a:	4b82      	ldr	r3, [pc, #520]	; (80130a4 <Update_Blink+0xb7c>)
 8012e9c:	21e1      	movs	r1, #225	; 0xe1
 8012e9e:	f7fa ff43 	bl	800dd28 <DispStr>
      ParamTab[P2F] &= ~D_HID;
 8012ea2:	4b81      	ldr	r3, [pc, #516]	; (80130a8 <Update_Blink+0xb80>)
 8012ea4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012ea8:	f023 0301 	bic.w	r3, r3, #1
 8012eac:	b21a      	sxth	r2, r3
 8012eae:	4b7e      	ldr	r3, [pc, #504]	; (80130a8 <Update_Blink+0xb80>)
 8012eb0:	805a      	strh	r2, [r3, #2]
      break;
 8012eb2:	e22e      	b.n	8013312 <Update_Blink+0xdea>

    case EXT_POSI:
      if(Twink) ParamTab[P2F] |=  D_HID;
 8012eb4:	4b77      	ldr	r3, [pc, #476]	; (8013094 <Update_Blink+0xb6c>)
 8012eb6:	781b      	ldrb	r3, [r3, #0]
 8012eb8:	b2db      	uxtb	r3, r3
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d008      	beq.n	8012ed0 <Update_Blink+0x9a8>
 8012ebe:	4b7a      	ldr	r3, [pc, #488]	; (80130a8 <Update_Blink+0xb80>)
 8012ec0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012ec4:	f043 0301 	orr.w	r3, r3, #1
 8012ec8:	b21a      	sxth	r2, r3
 8012eca:	4b77      	ldr	r3, [pc, #476]	; (80130a8 <Update_Blink+0xb80>)
 8012ecc:	805a      	strh	r2, [r3, #2]
      else      ParamTab[P2F] &= ~D_HID;
      break;
 8012ece:	e220      	b.n	8013312 <Update_Blink+0xdea>
      else      ParamTab[P2F] &= ~D_HID;
 8012ed0:	4b75      	ldr	r3, [pc, #468]	; (80130a8 <Update_Blink+0xb80>)
 8012ed2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012ed6:	f023 0301 	bic.w	r3, r3, #1
 8012eda:	b21a      	sxth	r2, r3
 8012edc:	4b72      	ldr	r3, [pc, #456]	; (80130a8 <Update_Blink+0xb80>)
 8012ede:	805a      	strh	r2, [r3, #2]
      break;
 8012ee0:	e217      	b.n	8013312 <Update_Blink+0xdea>

    case EXT_HIDE:
      SetColor(GRY, TCOLOR[EX]);
 8012ee2:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8012ee6:	4619      	mov	r1, r3
 8012ee8:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012eec:	f7fa ff04 	bl	800dcf8 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 1, 6*5);
 8012ef0:	4b68      	ldr	r3, [pc, #416]	; (8013094 <Update_Blink+0xb6c>)
 8012ef2:	781b      	ldrb	r3, [r3, #0]
 8012ef4:	b2d8      	uxtb	r0, r3
 8012ef6:	89bb      	ldrh	r3, [r7, #12]
 8012ef8:	4a67      	ldr	r2, [pc, #412]	; (8013098 <Update_Blink+0xb70>)
 8012efa:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012efe:	b29b      	uxth	r3, r3
 8012f00:	3b03      	subs	r3, #3
 8012f02:	b29b      	uxth	r3, r3
 8012f04:	b219      	sxth	r1, r3
 8012f06:	231e      	movs	r3, #30
 8012f08:	9301      	str	r3, [sp, #4]
 8012f0a:	2301      	movs	r3, #1
 8012f0c:	9300      	str	r3, [sp, #0]
 8012f0e:	230b      	movs	r3, #11
 8012f10:	22e1      	movs	r2, #225	; 0xe1
 8012f12:	f7fa ffdf 	bl	800ded4 <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 8012f16:	89bb      	ldrh	r3, [r7, #12]
 8012f18:	4a5f      	ldr	r2, [pc, #380]	; (8013098 <Update_Blink+0xb70>)
 8012f1a:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012f1e:	4b5d      	ldr	r3, [pc, #372]	; (8013094 <Update_Blink+0xb6c>)
 8012f20:	781b      	ldrb	r3, [r3, #0]
 8012f22:	b2da      	uxtb	r2, r3
 8012f24:	4b5d      	ldr	r3, [pc, #372]	; (801309c <Update_Blink+0xb74>)
 8012f26:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d00a      	beq.n	8012f44 <Update_Blink+0xa1c>
 8012f2e:	4b5b      	ldr	r3, [pc, #364]	; (801309c <Update_Blink+0xb74>)
 8012f30:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8012f34:	4619      	mov	r1, r3
 8012f36:	460b      	mov	r3, r1
 8012f38:	005b      	lsls	r3, r3, #1
 8012f3a:	440b      	add	r3, r1
 8012f3c:	005b      	lsls	r3, r3, #1
 8012f3e:	4958      	ldr	r1, [pc, #352]	; (80130a0 <Update_Blink+0xb78>)
 8012f40:	440b      	add	r3, r1
 8012f42:	e000      	b.n	8012f46 <Update_Blink+0xa1e>
 8012f44:	4b57      	ldr	r3, [pc, #348]	; (80130a4 <Update_Blink+0xb7c>)
 8012f46:	21e1      	movs	r1, #225	; 0xe1
 8012f48:	f7fa feee 	bl	800dd28 <DispStr>
      ParamTab[P2F] &= ~D_HID;
 8012f4c:	4b56      	ldr	r3, [pc, #344]	; (80130a8 <Update_Blink+0xb80>)
 8012f4e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012f52:	f023 0301 	bic.w	r3, r3, #1
 8012f56:	b21a      	sxth	r2, r3
 8012f58:	4b53      	ldr	r3, [pc, #332]	; (80130a8 <Update_Blink+0xb80>)
 8012f5a:	805a      	strh	r2, [r3, #2]
      break;
 8012f5c:	e1d9      	b.n	8013312 <Update_Blink+0xdea>

    case TPYE_OUT:
      SetColor(GRY, TCOLOR[SN]);
 8012f5e:	f240 531f 	movw	r3, #1311	; 0x51f
 8012f62:	4619      	mov	r1, r3
 8012f64:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012f68:	f7fa fec6 	bl	800dcf8 <SetColor>
      Draw_Circle_D(Twink, S_X[TPYE_OUT]-3, LABLE_Y, 11, 0, 6*9);
 8012f6c:	4b49      	ldr	r3, [pc, #292]	; (8013094 <Update_Blink+0xb6c>)
 8012f6e:	781b      	ldrb	r3, [r3, #0]
 8012f70:	b2d8      	uxtb	r0, r3
 8012f72:	2307      	movs	r3, #7
 8012f74:	b29b      	uxth	r3, r3
 8012f76:	3b03      	subs	r3, #3
 8012f78:	b29b      	uxth	r3, r3
 8012f7a:	b219      	sxth	r1, r3
 8012f7c:	2336      	movs	r3, #54	; 0x36
 8012f7e:	9301      	str	r3, [sp, #4]
 8012f80:	2300      	movs	r3, #0
 8012f82:	9300      	str	r3, [sp, #0]
 8012f84:	230b      	movs	r3, #11
 8012f86:	2203      	movs	r2, #3
 8012f88:	f7fa ffa4 	bl	800ded4 <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, "FO: ");
 8012f8c:	89bb      	ldrh	r3, [r7, #12]
 8012f8e:	4a42      	ldr	r2, [pc, #264]	; (8013098 <Update_Blink+0xb70>)
 8012f90:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012f94:	4b3f      	ldr	r3, [pc, #252]	; (8013094 <Update_Blink+0xb6c>)
 8012f96:	781b      	ldrb	r3, [r3, #0]
 8012f98:	b2da      	uxtb	r2, r3
 8012f9a:	4b44      	ldr	r3, [pc, #272]	; (80130ac <Update_Blink+0xb84>)
 8012f9c:	2103      	movs	r1, #3
 8012f9e:	f7fa fec3 	bl	800dd28 <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, "     ");
 8012fa2:	89bb      	ldrh	r3, [r7, #12]
 8012fa4:	4a3c      	ldr	r2, [pc, #240]	; (8013098 <Update_Blink+0xb70>)
 8012fa6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012faa:	b29b      	uxth	r3, r3
 8012fac:	3318      	adds	r3, #24
 8012fae:	b29b      	uxth	r3, r3
 8012fb0:	b218      	sxth	r0, r3
 8012fb2:	4b38      	ldr	r3, [pc, #224]	; (8013094 <Update_Blink+0xb6c>)
 8012fb4:	781b      	ldrb	r3, [r3, #0]
 8012fb6:	b2da      	uxtb	r2, r3
 8012fb8:	4b3d      	ldr	r3, [pc, #244]	; (80130b0 <Update_Blink+0xb88>)
 8012fba:	2103      	movs	r1, #3
 8012fbc:	f7fa feb4 	bl	800dd28 <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, (char*)OT[List[i].Val]);
 8012fc0:	89bb      	ldrh	r3, [r7, #12]
 8012fc2:	4a35      	ldr	r2, [pc, #212]	; (8013098 <Update_Blink+0xb70>)
 8012fc4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012fc8:	b29b      	uxth	r3, r3
 8012fca:	3318      	adds	r3, #24
 8012fcc:	b29b      	uxth	r3, r3
 8012fce:	b218      	sxth	r0, r3
 8012fd0:	4b30      	ldr	r3, [pc, #192]	; (8013094 <Update_Blink+0xb6c>)
 8012fd2:	781b      	ldrb	r3, [r3, #0]
 8012fd4:	b2da      	uxtb	r2, r3
 8012fd6:	89bb      	ldrh	r3, [r7, #12]
 8012fd8:	4930      	ldr	r1, [pc, #192]	; (801309c <Update_Blink+0xb74>)
 8012fda:	00db      	lsls	r3, r3, #3
 8012fdc:	440b      	add	r3, r1
 8012fde:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012fe2:	4619      	mov	r1, r3
 8012fe4:	460b      	mov	r3, r1
 8012fe6:	005b      	lsls	r3, r3, #1
 8012fe8:	440b      	add	r3, r1
 8012fea:	005b      	lsls	r3, r3, #1
 8012fec:	4931      	ldr	r1, [pc, #196]	; (80130b4 <Update_Blink+0xb8c>)
 8012fee:	440b      	add	r3, r1
 8012ff0:	2103      	movs	r1, #3
 8012ff2:	f7fa fe99 	bl	800dd28 <DispStr>
      break;
 8012ff6:	e18c      	b.n	8013312 <Update_Blink+0xdea>

    case FREQ_OUT:
      SetColor(GRY, TCOLOR[SN]);
 8012ff8:	f240 531f 	movw	r3, #1311	; 0x51f
 8012ffc:	4619      	mov	r1, r3
 8012ffe:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013002:	f7fa fe79 	bl	800dcf8 <SetColor>
      Draw_Circle_D(Twink, S_X[FREQ_OUT]-3, LABLE_Y, 11, 0, 6*9);
 8013006:	4b23      	ldr	r3, [pc, #140]	; (8013094 <Update_Blink+0xb6c>)
 8013008:	781b      	ldrb	r3, [r3, #0]
 801300a:	b2d8      	uxtb	r0, r3
 801300c:	2307      	movs	r3, #7
 801300e:	b29b      	uxth	r3, r3
 8013010:	3b03      	subs	r3, #3
 8013012:	b29b      	uxth	r3, r3
 8013014:	b219      	sxth	r1, r3
 8013016:	2336      	movs	r3, #54	; 0x36
 8013018:	9301      	str	r3, [sp, #4]
 801301a:	2300      	movs	r3, #0
 801301c:	9300      	str	r3, [sp, #0]
 801301e:	230b      	movs	r3, #11
 8013020:	2203      	movs	r2, #3
 8013022:	f7fa ff57 	bl	800ded4 <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, "FO: ");
 8013026:	89bb      	ldrh	r3, [r7, #12]
 8013028:	4a1b      	ldr	r2, [pc, #108]	; (8013098 <Update_Blink+0xb70>)
 801302a:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 801302e:	4b19      	ldr	r3, [pc, #100]	; (8013094 <Update_Blink+0xb6c>)
 8013030:	781b      	ldrb	r3, [r3, #0]
 8013032:	b2da      	uxtb	r2, r3
 8013034:	4b1d      	ldr	r3, [pc, #116]	; (80130ac <Update_Blink+0xb84>)
 8013036:	2103      	movs	r1, #3
 8013038:	f7fa fe76 	bl	800dd28 <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, "     ");
 801303c:	89bb      	ldrh	r3, [r7, #12]
 801303e:	4a16      	ldr	r2, [pc, #88]	; (8013098 <Update_Blink+0xb70>)
 8013040:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013044:	b29b      	uxth	r3, r3
 8013046:	3318      	adds	r3, #24
 8013048:	b29b      	uxth	r3, r3
 801304a:	b218      	sxth	r0, r3
 801304c:	4b11      	ldr	r3, [pc, #68]	; (8013094 <Update_Blink+0xb6c>)
 801304e:	781b      	ldrb	r3, [r3, #0]
 8013050:	b2da      	uxtb	r2, r3
 8013052:	4b17      	ldr	r3, [pc, #92]	; (80130b0 <Update_Blink+0xb88>)
 8013054:	2103      	movs	r1, #3
 8013056:	f7fa fe67 	bl	800dd28 <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, (char*)Q[List[i].Val]);
 801305a:	89bb      	ldrh	r3, [r7, #12]
 801305c:	4a0e      	ldr	r2, [pc, #56]	; (8013098 <Update_Blink+0xb70>)
 801305e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013062:	b29b      	uxth	r3, r3
 8013064:	3318      	adds	r3, #24
 8013066:	b29b      	uxth	r3, r3
 8013068:	b218      	sxth	r0, r3
 801306a:	4b0a      	ldr	r3, [pc, #40]	; (8013094 <Update_Blink+0xb6c>)
 801306c:	781b      	ldrb	r3, [r3, #0]
 801306e:	b2da      	uxtb	r2, r3
 8013070:	89bb      	ldrh	r3, [r7, #12]
 8013072:	490a      	ldr	r1, [pc, #40]	; (801309c <Update_Blink+0xb74>)
 8013074:	00db      	lsls	r3, r3, #3
 8013076:	440b      	add	r3, r1
 8013078:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801307c:	4619      	mov	r1, r3
 801307e:	460b      	mov	r3, r1
 8013080:	005b      	lsls	r3, r3, #1
 8013082:	440b      	add	r3, r1
 8013084:	005b      	lsls	r3, r3, #1
 8013086:	490c      	ldr	r1, [pc, #48]	; (80130b8 <Update_Blink+0xb90>)
 8013088:	440b      	add	r3, r1
 801308a:	2103      	movs	r1, #3
 801308c:	f7fa fe4c 	bl	800dd28 <DispStr>
      break;
 8013090:	e13f      	b.n	8013312 <Update_Blink+0xdea>
 8013092:	bf00      	nop
 8013094:	2000077c 	.word	0x2000077c
 8013098:	0800215c 	.word	0x0800215c
 801309c:	20000298 	.word	0x20000298
 80130a0:	08001c88 	.word	0x08001c88
 80130a4:	08001cac 	.word	0x08001cac
 80130a8:	20000140 	.word	0x20000140
 80130ac:	080009a0 	.word	0x080009a0
 80130b0:	08000990 	.word	0x08000990
 80130b4:	08001d50 	.word	0x08001d50
 80130b8:	08001e98 	.word	0x08001e98

    case FREQ_DUT:
      SetColor(GRY, TCOLOR[SN]);
 80130bc:	f240 531f 	movw	r3, #1311	; 0x51f
 80130c0:	4619      	mov	r1, r3
 80130c2:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80130c6:	f7fa fe17 	bl	800dcf8 <SetColor>
      Value2Str(NumStr, List[i].Val*10, List[i].PTR, 2, UNSIGN);
 80130ca:	89bb      	ldrh	r3, [r7, #12]
 80130cc:	4a96      	ldr	r2, [pc, #600]	; (8013328 <Update_Blink+0xe00>)
 80130ce:	00db      	lsls	r3, r3, #3
 80130d0:	4413      	add	r3, r2
 80130d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80130d6:	461a      	mov	r2, r3
 80130d8:	4613      	mov	r3, r2
 80130da:	009b      	lsls	r3, r3, #2
 80130dc:	4413      	add	r3, r2
 80130de:	005b      	lsls	r3, r3, #1
 80130e0:	4619      	mov	r1, r3
 80130e2:	89bb      	ldrh	r3, [r7, #12]
 80130e4:	4a90      	ldr	r2, [pc, #576]	; (8013328 <Update_Blink+0xe00>)
 80130e6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80130ea:	2301      	movs	r3, #1
 80130ec:	9300      	str	r3, [sp, #0]
 80130ee:	2302      	movs	r3, #2
 80130f0:	488e      	ldr	r0, [pc, #568]	; (801332c <Update_Blink+0xe04>)
 80130f2:	f7fe fcf1 	bl	8011ad8 <Value2Str>
      Draw_Circle_D(Twink, S_X[FREQ_DUT]-3, LABLE_Y, 11, 0, 6*9);
 80130f6:	4b8e      	ldr	r3, [pc, #568]	; (8013330 <Update_Blink+0xe08>)
 80130f8:	781b      	ldrb	r3, [r3, #0]
 80130fa:	b2d8      	uxtb	r0, r3
 80130fc:	2307      	movs	r3, #7
 80130fe:	b29b      	uxth	r3, r3
 8013100:	3b03      	subs	r3, #3
 8013102:	b29b      	uxth	r3, r3
 8013104:	b219      	sxth	r1, r3
 8013106:	2336      	movs	r3, #54	; 0x36
 8013108:	9301      	str	r3, [sp, #4]
 801310a:	2300      	movs	r3, #0
 801310c:	9300      	str	r3, [sp, #0]
 801310e:	230b      	movs	r3, #11
 8013110:	2203      	movs	r2, #3
 8013112:	f7fa fedf 	bl	800ded4 <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, "Duty: ");
 8013116:	89bb      	ldrh	r3, [r7, #12]
 8013118:	4a86      	ldr	r2, [pc, #536]	; (8013334 <Update_Blink+0xe0c>)
 801311a:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 801311e:	4b84      	ldr	r3, [pc, #528]	; (8013330 <Update_Blink+0xe08>)
 8013120:	781b      	ldrb	r3, [r3, #0]
 8013122:	b2da      	uxtb	r2, r3
 8013124:	4b84      	ldr	r3, [pc, #528]	; (8013338 <Update_Blink+0xe10>)
 8013126:	2103      	movs	r1, #3
 8013128:	f7fa fdfe 	bl	800dd28 <DispStr>
      DispStr(S_X[i]+36, LABLE_Y, Twink, "   ");
 801312c:	89bb      	ldrh	r3, [r7, #12]
 801312e:	4a81      	ldr	r2, [pc, #516]	; (8013334 <Update_Blink+0xe0c>)
 8013130:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013134:	b29b      	uxth	r3, r3
 8013136:	3324      	adds	r3, #36	; 0x24
 8013138:	b29b      	uxth	r3, r3
 801313a:	b218      	sxth	r0, r3
 801313c:	4b7c      	ldr	r3, [pc, #496]	; (8013330 <Update_Blink+0xe08>)
 801313e:	781b      	ldrb	r3, [r3, #0]
 8013140:	b2da      	uxtb	r2, r3
 8013142:	4b7e      	ldr	r3, [pc, #504]	; (801333c <Update_Blink+0xe14>)
 8013144:	2103      	movs	r1, #3
 8013146:	f7fa fdef 	bl	800dd28 <DispStr>
      DispStr(S_X[i]+36, LABLE_Y, Twink, (char *)NumStr);
 801314a:	89bb      	ldrh	r3, [r7, #12]
 801314c:	4a79      	ldr	r2, [pc, #484]	; (8013334 <Update_Blink+0xe0c>)
 801314e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013152:	b29b      	uxth	r3, r3
 8013154:	3324      	adds	r3, #36	; 0x24
 8013156:	b29b      	uxth	r3, r3
 8013158:	b218      	sxth	r0, r3
 801315a:	4b75      	ldr	r3, [pc, #468]	; (8013330 <Update_Blink+0xe08>)
 801315c:	781b      	ldrb	r3, [r3, #0]
 801315e:	b2da      	uxtb	r2, r3
 8013160:	4b72      	ldr	r3, [pc, #456]	; (801332c <Update_Blink+0xe04>)
 8013162:	2103      	movs	r1, #3
 8013164:	f7fa fde0 	bl	800dd28 <DispStr>
      break;
 8013168:	e0d3      	b.n	8013312 <Update_Blink+0xdea>

    case AUTO_CAL:
      if(Twink) ParamTab[P1F] |=  W_HID;
 801316a:	4b71      	ldr	r3, [pc, #452]	; (8013330 <Update_Blink+0xe08>)
 801316c:	781b      	ldrb	r3, [r3, #0]
 801316e:	b2db      	uxtb	r3, r3
 8013170:	2b00      	cmp	r3, #0
 8013172:	d008      	beq.n	8013186 <Update_Blink+0xc5e>
 8013174:	4b72      	ldr	r3, [pc, #456]	; (8013340 <Update_Blink+0xe18>)
 8013176:	f9b3 3000 	ldrsh.w	r3, [r3]
 801317a:	f043 0304 	orr.w	r3, r3, #4
 801317e:	b21a      	sxth	r2, r3
 8013180:	4b6f      	ldr	r3, [pc, #444]	; (8013340 <Update_Blink+0xe18>)
 8013182:	801a      	strh	r2, [r3, #0]
 8013184:	e007      	b.n	8013196 <Update_Blink+0xc6e>
      else      ParamTab[P1F] &= ~W_HID;
 8013186:	4b6e      	ldr	r3, [pc, #440]	; (8013340 <Update_Blink+0xe18>)
 8013188:	f9b3 3000 	ldrsh.w	r3, [r3]
 801318c:	f023 0304 	bic.w	r3, r3, #4
 8013190:	b21a      	sxth	r2, r3
 8013192:	4b6b      	ldr	r3, [pc, #428]	; (8013340 <Update_Blink+0xe18>)
 8013194:	801a      	strh	r2, [r3, #0]

      SetColor(GRY, TCOLOR[ST]);
 8013196:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 801319a:	4619      	mov	r1, r3
 801319c:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80131a0:	f7fa fdaa 	bl	800dcf8 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 80131a4:	4b62      	ldr	r3, [pc, #392]	; (8013330 <Update_Blink+0xe08>)
 80131a6:	781b      	ldrb	r3, [r3, #0]
 80131a8:	b2d8      	uxtb	r0, r3
 80131aa:	89bb      	ldrh	r3, [r7, #12]
 80131ac:	4a61      	ldr	r2, [pc, #388]	; (8013334 <Update_Blink+0xe0c>)
 80131ae:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80131b2:	b29b      	uxth	r3, r3
 80131b4:	3b03      	subs	r3, #3
 80131b6:	b29b      	uxth	r3, r3
 80131b8:	b219      	sxth	r1, r3
 80131ba:	2336      	movs	r3, #54	; 0x36
 80131bc:	9301      	str	r3, [sp, #4]
 80131be:	2300      	movs	r3, #0
 80131c0:	9300      	str	r3, [sp, #0]
 80131c2:	230b      	movs	r3, #11
 80131c4:	2203      	movs	r2, #3
 80131c6:	f7fa fe85 	bl	800ded4 <Draw_Circle_D>
      DispStr( S_X[i]+0, LABLE_Y, Twink+PRN,  "Press:   ");
 80131ca:	89bb      	ldrh	r3, [r7, #12]
 80131cc:	4a59      	ldr	r2, [pc, #356]	; (8013334 <Update_Blink+0xe0c>)
 80131ce:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 80131d2:	4b57      	ldr	r3, [pc, #348]	; (8013330 <Update_Blink+0xe08>)
 80131d4:	781b      	ldrb	r3, [r3, #0]
 80131d6:	b2da      	uxtb	r2, r3
 80131d8:	4b5a      	ldr	r3, [pc, #360]	; (8013344 <Update_Blink+0xe1c>)
 80131da:	2103      	movs	r1, #3
 80131dc:	f7fa fda4 	bl	800dd28 <DispStr>
      DispStr(S_X[i]+40, LABLE_Y, Twink+SYMB, "{|");//������ͣͼ��
 80131e0:	89bb      	ldrh	r3, [r7, #12]
 80131e2:	4a54      	ldr	r2, [pc, #336]	; (8013334 <Update_Blink+0xe0c>)
 80131e4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80131e8:	b29b      	uxth	r3, r3
 80131ea:	3328      	adds	r3, #40	; 0x28
 80131ec:	b29b      	uxth	r3, r3
 80131ee:	b218      	sxth	r0, r3
 80131f0:	4b4f      	ldr	r3, [pc, #316]	; (8013330 <Update_Blink+0xe08>)
 80131f2:	781b      	ldrb	r3, [r3, #0]
 80131f4:	b2db      	uxtb	r3, r3
 80131f6:	3310      	adds	r3, #16
 80131f8:	b2da      	uxtb	r2, r3
 80131fa:	4b53      	ldr	r3, [pc, #332]	; (8013348 <Update_Blink+0xe20>)
 80131fc:	2103      	movs	r1, #3
 80131fe:	f7fa fd93 	bl	800dd28 <DispStr>
      break;
 8013202:	e086      	b.n	8013312 <Update_Blink+0xdea>

    case RESTORE:
      SetColor(GRY, TCOLOR[ST]);
 8013204:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8013208:	4619      	mov	r1, r3
 801320a:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801320e:	f7fa fd73 	bl	800dcf8 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 8013212:	4b47      	ldr	r3, [pc, #284]	; (8013330 <Update_Blink+0xe08>)
 8013214:	781b      	ldrb	r3, [r3, #0]
 8013216:	b2d8      	uxtb	r0, r3
 8013218:	89bb      	ldrh	r3, [r7, #12]
 801321a:	4a46      	ldr	r2, [pc, #280]	; (8013334 <Update_Blink+0xe0c>)
 801321c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013220:	b29b      	uxth	r3, r3
 8013222:	3b03      	subs	r3, #3
 8013224:	b29b      	uxth	r3, r3
 8013226:	b219      	sxth	r1, r3
 8013228:	2336      	movs	r3, #54	; 0x36
 801322a:	9301      	str	r3, [sp, #4]
 801322c:	2300      	movs	r3, #0
 801322e:	9300      	str	r3, [sp, #0]
 8013230:	230b      	movs	r3, #11
 8013232:	2203      	movs	r2, #3
 8013234:	f7fa fe4e 	bl	800ded4 <Draw_Circle_D>
      DispStr( S_X[i]+0, LABLE_Y, Twink+PRN,  "Press:   ");
 8013238:	89bb      	ldrh	r3, [r7, #12]
 801323a:	4a3e      	ldr	r2, [pc, #248]	; (8013334 <Update_Blink+0xe0c>)
 801323c:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8013240:	4b3b      	ldr	r3, [pc, #236]	; (8013330 <Update_Blink+0xe08>)
 8013242:	781b      	ldrb	r3, [r3, #0]
 8013244:	b2da      	uxtb	r2, r3
 8013246:	4b3f      	ldr	r3, [pc, #252]	; (8013344 <Update_Blink+0xe1c>)
 8013248:	2103      	movs	r1, #3
 801324a:	f7fa fd6d 	bl	800dd28 <DispStr>
      DispStr( S_X[i]+40, LABLE_Y, Twink+SYMB, "{|");//������ͣͼ��
 801324e:	89bb      	ldrh	r3, [r7, #12]
 8013250:	4a38      	ldr	r2, [pc, #224]	; (8013334 <Update_Blink+0xe0c>)
 8013252:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013256:	b29b      	uxth	r3, r3
 8013258:	3328      	adds	r3, #40	; 0x28
 801325a:	b29b      	uxth	r3, r3
 801325c:	b218      	sxth	r0, r3
 801325e:	4b34      	ldr	r3, [pc, #208]	; (8013330 <Update_Blink+0xe08>)
 8013260:	781b      	ldrb	r3, [r3, #0]
 8013262:	b2db      	uxtb	r3, r3
 8013264:	3310      	adds	r3, #16
 8013266:	b2da      	uxtb	r2, r3
 8013268:	4b37      	ldr	r3, [pc, #220]	; (8013348 <Update_Blink+0xe20>)
 801326a:	2103      	movs	r1, #3
 801326c:	f7fa fd5c 	bl	800dd28 <DispStr>
      break;
 8013270:	e04f      	b.n	8013312 <Update_Blink+0xdea>

    case STANDBY:
      SetColor(GRY, TCOLOR[ST]);
 8013272:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8013276:	4619      	mov	r1, r3
 8013278:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801327c:	f7fa fd3c 	bl	800dcf8 <SetColor>
      Value2Str(NumStr, List[STANDBY].Val, NSTR[0], 2, UNSIGN);
 8013280:	4b29      	ldr	r3, [pc, #164]	; (8013328 <Update_Blink+0xe00>)
 8013282:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 8013286:	4619      	mov	r1, r3
 8013288:	2301      	movs	r3, #1
 801328a:	9300      	str	r3, [sp, #0]
 801328c:	2302      	movs	r3, #2
 801328e:	4a2f      	ldr	r2, [pc, #188]	; (801334c <Update_Blink+0xe24>)
 8013290:	4826      	ldr	r0, [pc, #152]	; (801332c <Update_Blink+0xe04>)
 8013292:	f7fe fc21 	bl	8011ad8 <Value2Str>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 8013296:	4b26      	ldr	r3, [pc, #152]	; (8013330 <Update_Blink+0xe08>)
 8013298:	781b      	ldrb	r3, [r3, #0]
 801329a:	b2d8      	uxtb	r0, r3
 801329c:	89bb      	ldrh	r3, [r7, #12]
 801329e:	4a25      	ldr	r2, [pc, #148]	; (8013334 <Update_Blink+0xe0c>)
 80132a0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80132a4:	b29b      	uxth	r3, r3
 80132a6:	3b03      	subs	r3, #3
 80132a8:	b29b      	uxth	r3, r3
 80132aa:	b219      	sxth	r1, r3
 80132ac:	2336      	movs	r3, #54	; 0x36
 80132ae:	9301      	str	r3, [sp, #4]
 80132b0:	2300      	movs	r3, #0
 80132b2:	9300      	str	r3, [sp, #0]
 80132b4:	230b      	movs	r3, #11
 80132b6:	2203      	movs	r2, #3
 80132b8:	f7fa fe0c 	bl	800ded4 <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink+PRN,  " ");
 80132bc:	89bb      	ldrh	r3, [r7, #12]
 80132be:	4a1d      	ldr	r2, [pc, #116]	; (8013334 <Update_Blink+0xe0c>)
 80132c0:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 80132c4:	4b1a      	ldr	r3, [pc, #104]	; (8013330 <Update_Blink+0xe08>)
 80132c6:	781b      	ldrb	r3, [r3, #0]
 80132c8:	b2da      	uxtb	r2, r3
 80132ca:	4b21      	ldr	r3, [pc, #132]	; (8013350 <Update_Blink+0xe28>)
 80132cc:	2103      	movs	r1, #3
 80132ce:	f7fa fd2b 	bl	800dd28 <DispStr>
      DispStr(S_X[i]+6, LABLE_Y, Twink+PRN,  (char *)NumStr);
 80132d2:	89bb      	ldrh	r3, [r7, #12]
 80132d4:	4a17      	ldr	r2, [pc, #92]	; (8013334 <Update_Blink+0xe0c>)
 80132d6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80132da:	b29b      	uxth	r3, r3
 80132dc:	3306      	adds	r3, #6
 80132de:	b29b      	uxth	r3, r3
 80132e0:	b218      	sxth	r0, r3
 80132e2:	4b13      	ldr	r3, [pc, #76]	; (8013330 <Update_Blink+0xe08>)
 80132e4:	781b      	ldrb	r3, [r3, #0]
 80132e6:	b2da      	uxtb	r2, r3
 80132e8:	4b10      	ldr	r3, [pc, #64]	; (801332c <Update_Blink+0xe04>)
 80132ea:	2103      	movs	r1, #3
 80132ec:	f7fa fd1c 	bl	800dd28 <DispStr>
      DispStr(S_X[i]+30, LABLE_Y, Twink+PRN,  "min ");
 80132f0:	89bb      	ldrh	r3, [r7, #12]
 80132f2:	4a10      	ldr	r2, [pc, #64]	; (8013334 <Update_Blink+0xe0c>)
 80132f4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80132f8:	b29b      	uxth	r3, r3
 80132fa:	331e      	adds	r3, #30
 80132fc:	b29b      	uxth	r3, r3
 80132fe:	b218      	sxth	r0, r3
 8013300:	4b0b      	ldr	r3, [pc, #44]	; (8013330 <Update_Blink+0xe08>)
 8013302:	781b      	ldrb	r3, [r3, #0]
 8013304:	b2da      	uxtb	r2, r3
 8013306:	4b13      	ldr	r3, [pc, #76]	; (8013354 <Update_Blink+0xe2c>)
 8013308:	2103      	movs	r1, #3
 801330a:	f7fa fd0d 	bl	800dd28 <DispStr>
      break;
 801330e:	e000      	b.n	8013312 <Update_Blink+0xdea>
      break;
 8013310:	bf00      	nop

    }
    if(i != V0_POSI)  ParamTab[P1F]   = L_HID ;//0513
 8013312:	89bb      	ldrh	r3, [r7, #12]
 8013314:	2b03      	cmp	r3, #3
 8013316:	d002      	beq.n	801331e <Update_Blink+0xdf6>
 8013318:	4b09      	ldr	r3, [pc, #36]	; (8013340 <Update_Blink+0xe18>)
 801331a:	2202      	movs	r2, #2
 801331c:	801a      	strh	r2, [r3, #0]
  }
}
 801331e:	bf00      	nop
 8013320:	3714      	adds	r7, #20
 8013322:	46bd      	mov	sp, r7
 8013324:	bd90      	pop	{r4, r7, pc}
 8013326:	bf00      	nop
 8013328:	20000298 	.word	0x20000298
 801332c:	2000283c 	.word	0x2000283c
 8013330:	2000077c 	.word	0x2000077c
 8013334:	0800215c 	.word	0x0800215c
 8013338:	080009a8 	.word	0x080009a8
 801333c:	080009b0 	.word	0x080009b0
 8013340:	20000140 	.word	0x20000140
 8013344:	080009b4 	.word	0x080009b4
 8013348:	080009c0 	.word	0x080009c0
 801334c:	20000548 	.word	0x20000548
 8013350:	080009c4 	.word	0x080009c4
 8013354:	080009c8 	.word	0x080009c8

08013358 <Update_Detail>:
/*******************************************************************************
 Update_Detail:
*******************************************************************************/
void Update_Detail(void)
{
 8013358:	b590      	push	{r4, r7, lr}
 801335a:	b089      	sub	sp, #36	; 0x24
 801335c:	af02      	add	r7, sp, #8
  long scale = 0;
 801335e:	2300      	movs	r3, #0
 8013360:	60bb      	str	r3, [r7, #8]
  int  Ak = (KgA[KindA+(StateA?1:0)]*4)/GK[GainA];
 8013362:	4ba9      	ldr	r3, [pc, #676]	; (8013608 <Update_Detail+0x2b0>)
 8013364:	681a      	ldr	r2, [r3, #0]
 8013366:	4ba9      	ldr	r3, [pc, #676]	; (801360c <Update_Detail+0x2b4>)
 8013368:	f9b3 3000 	ldrsh.w	r3, [r3]
 801336c:	4619      	mov	r1, r3
 801336e:	4ba8      	ldr	r3, [pc, #672]	; (8013610 <Update_Detail+0x2b8>)
 8013370:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013374:	2b00      	cmp	r3, #0
 8013376:	bf14      	ite	ne
 8013378:	2301      	movne	r3, #1
 801337a:	2300      	moveq	r3, #0
 801337c:	b2db      	uxtb	r3, r3
 801337e:	440b      	add	r3, r1
 8013380:	005b      	lsls	r3, r3, #1
 8013382:	4413      	add	r3, r2
 8013384:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013388:	009b      	lsls	r3, r3, #2
 801338a:	4aa2      	ldr	r2, [pc, #648]	; (8013614 <Update_Detail+0x2bc>)
 801338c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8013390:	4611      	mov	r1, r2
 8013392:	4aa1      	ldr	r2, [pc, #644]	; (8013618 <Update_Detail+0x2c0>)
 8013394:	5c52      	ldrb	r2, [r2, r1]
 8013396:	fb93 f3f2 	sdiv	r3, r3, r2
 801339a:	607b      	str	r3, [r7, #4]
  unsigned short i, k = HighT+LowT;
 801339c:	4b9f      	ldr	r3, [pc, #636]	; (801361c <Update_Detail+0x2c4>)
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	b29a      	uxth	r2, r3
 80133a2:	4b9f      	ldr	r3, [pc, #636]	; (8013620 <Update_Detail+0x2c8>)
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	b29b      	uxth	r3, r3
 80133a8:	4413      	add	r3, r2
 80133aa:	807b      	strh	r3, [r7, #2]
  long Tmp = 0;
 80133ac:	2300      	movs	r3, #0
 80133ae:	613b      	str	r3, [r7, #16]
  short Range = List[Y_RANGES].Val + 10*List[PROBEATT].Val;
 80133b0:	4b9c      	ldr	r3, [pc, #624]	; (8013624 <Update_Detail+0x2cc>)
 80133b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80133b6:	b29a      	uxth	r2, r3
 80133b8:	4b9a      	ldr	r3, [pc, #616]	; (8013624 <Update_Detail+0x2cc>)
 80133ba:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80133be:	b29b      	uxth	r3, r3
 80133c0:	4619      	mov	r1, r3
 80133c2:	0089      	lsls	r1, r1, #2
 80133c4:	440b      	add	r3, r1
 80133c6:	005b      	lsls	r3, r3, #1
 80133c8:	b29b      	uxth	r3, r3
 80133ca:	4413      	add	r3, r2
 80133cc:	b29b      	uxth	r3, r3
 80133ce:	803b      	strh	r3, [r7, #0]
  unsigned long FTmp;

  for(i=Y_RANGES; i<=STANDBY; i++){
 80133d0:	2300      	movs	r3, #0
 80133d2:	82fb      	strh	r3, [r7, #22]
 80133d4:	f000 bfb3 	b.w	801433e <Update_Detail+0xfe6>
    if(i==FREQUENC)
 80133d8:	8afb      	ldrh	r3, [r7, #22]
 80133da:	2b13      	cmp	r3, #19
 80133dc:	d118      	bne.n	8013410 <Update_Detail+0xb8>
    {
      if(Freq_Cnt > 10){
 80133de:	4b92      	ldr	r3, [pc, #584]	; (8013628 <Update_Detail+0x2d0>)
 80133e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80133e4:	2b0a      	cmp	r3, #10
 80133e6:	dd0a      	ble.n	80133fe <Update_Detail+0xa6>
        Freq_Cnt = 0;
 80133e8:	4b8f      	ldr	r3, [pc, #572]	; (8013628 <Update_Detail+0x2d0>)
 80133ea:	2200      	movs	r2, #0
 80133ec:	801a      	strh	r2, [r3, #0]
        Freq_Flag |= UPD;
 80133ee:	4b8f      	ldr	r3, [pc, #572]	; (801362c <Update_Detail+0x2d4>)
 80133f0:	781b      	ldrb	r3, [r3, #0]
 80133f2:	f043 0320 	orr.w	r3, r3, #32
 80133f6:	b2da      	uxtb	r2, r3
 80133f8:	4b8c      	ldr	r3, [pc, #560]	; (801362c <Update_Detail+0x2d4>)
 80133fa:	701a      	strb	r2, [r3, #0]
 80133fc:	e008      	b.n	8013410 <Update_Detail+0xb8>
      }
      else Freq_Cnt++;
 80133fe:	4b8a      	ldr	r3, [pc, #552]	; (8013628 <Update_Detail+0x2d0>)
 8013400:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013404:	b29b      	uxth	r3, r3
 8013406:	3301      	adds	r3, #1
 8013408:	b29b      	uxth	r3, r3
 801340a:	b21a      	sxth	r2, r3
 801340c:	4b86      	ldr	r3, [pc, #536]	; (8013628 <Update_Detail+0x2d0>)
 801340e:	801a      	strh	r2, [r3, #0]
    }

    if(List[i].Flg & UPD){
 8013410:	8afb      	ldrh	r3, [r7, #22]
 8013412:	4a84      	ldr	r2, [pc, #528]	; (8013624 <Update_Detail+0x2cc>)
 8013414:	00db      	lsls	r3, r3, #3
 8013416:	4413      	add	r3, r2
 8013418:	799b      	ldrb	r3, [r3, #6]
 801341a:	f003 0320 	and.w	r3, r3, #32
 801341e:	2b00      	cmp	r3, #0
 8013420:	f000 878a 	beq.w	8014338 <Update_Detail+0xfe0>
      List[i].Flg &= ~UPD;
 8013424:	8afb      	ldrh	r3, [r7, #22]
 8013426:	4a7f      	ldr	r2, [pc, #508]	; (8013624 <Update_Detail+0x2cc>)
 8013428:	00db      	lsls	r3, r3, #3
 801342a:	4413      	add	r3, r2
 801342c:	799a      	ldrb	r2, [r3, #6]
 801342e:	8afb      	ldrh	r3, [r7, #22]
 8013430:	f022 0220 	bic.w	r2, r2, #32
 8013434:	b2d1      	uxtb	r1, r2
 8013436:	4a7b      	ldr	r2, [pc, #492]	; (8013624 <Update_Detail+0x2cc>)
 8013438:	00db      	lsls	r3, r3, #3
 801343a:	4413      	add	r3, r2
 801343c:	460a      	mov	r2, r1
 801343e:	719a      	strb	r2, [r3, #6]
      switch (i){
 8013440:	8afb      	ldrh	r3, [r7, #22]
 8013442:	2b29      	cmp	r3, #41	; 0x29
 8013444:	f200 8739 	bhi.w	80142ba <Update_Detail+0xf62>
 8013448:	a201      	add	r2, pc, #4	; (adr r2, 8013450 <Update_Detail+0xf8>)
 801344a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801344e:	bf00      	nop
 8013450:	080134f9 	.word	0x080134f9
 8013454:	080134f9 	.word	0x080134f9
 8013458:	080134f9 	.word	0x080134f9
 801345c:	080134f9 	.word	0x080134f9
 8013460:	080134f9 	.word	0x080134f9
 8013464:	080134f9 	.word	0x080134f9
 8013468:	080134f9 	.word	0x080134f9
 801346c:	08013d01 	.word	0x08013d01
 8013470:	08013d01 	.word	0x08013d01
 8013474:	08013d01 	.word	0x08013d01
 8013478:	08013d01 	.word	0x08013d01
 801347c:	08013d01 	.word	0x08013d01
 8013480:	08013d01 	.word	0x08013d01
 8013484:	08013b97 	.word	0x08013b97
 8013488:	08013b97 	.word	0x08013b97
 801348c:	08013b97 	.word	0x08013b97
 8013490:	08013b97 	.word	0x08013b97
 8013494:	08013b97 	.word	0x08013b97
 8013498:	08013b97 	.word	0x08013b97
 801349c:	08013f59 	.word	0x08013f59
 80134a0:	08013fcd 	.word	0x08013fcd
 80134a4:	08013fed 	.word	0x08013fed
 80134a8:	080140f3 	.word	0x080140f3
 80134ac:	08014063 	.word	0x08014063
 80134b0:	08014179 	.word	0x08014179
 80134b4:	080141ff 	.word	0x080141ff
 80134b8:	08013a7b 	.word	0x08013a7b
 80134bc:	08013a7b 	.word	0x08013a7b
 80134c0:	08013b13 	.word	0x08013b13
 80134c4:	080137f9 	.word	0x080137f9
 80134c8:	080137f9 	.word	0x080137f9
 80134cc:	080137f9 	.word	0x080137f9
 80134d0:	080137f9 	.word	0x080137f9
 80134d4:	080137f9 	.word	0x080137f9
 80134d8:	080137f9 	.word	0x080137f9
 80134dc:	080137f9 	.word	0x080137f9
 80134e0:	080138a9 	.word	0x080138a9
 80134e4:	08013995 	.word	0x08013995
 80134e8:	08013a37 	.word	0x08013a37
 80134ec:	080142bb 	.word	0x080142bb
 80134f0:	080142bb 	.word	0x080142bb
 80134f4:	080142bb 	.word	0x080142bb
      case COUPLING:   // ˢ����ʾ���ģʽ״̬
      case V0_POSI:    // ˢ����ʾ��ֱƫ��λ��
      case V1_POSI:    // ˢ����ʾ��λ�α�λ��
      case V2_POSI:    // ˢ����ʾ��λ�α�λ��
      case YN_TYPE:    // ˢ����ʾ�α���ʽ
        SetColor(GRY, TCOLOR[YN]);
 80134f8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80134fc:	4619      	mov	r1, r3
 80134fe:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013502:	f7fa fbf9 	bl	800dcf8 <SetColor>
        if(i == Y_RANGES || i == COUPLING||i == PROBEATT)
 8013506:	8afb      	ldrh	r3, [r7, #22]
 8013508:	2b00      	cmp	r3, #0
 801350a:	d005      	beq.n	8013518 <Update_Detail+0x1c0>
 801350c:	8afb      	ldrh	r3, [r7, #22]
 801350e:	2b01      	cmp	r3, #1
 8013510:	d002      	beq.n	8013518 <Update_Detail+0x1c0>
 8013512:	8afb      	ldrh	r3, [r7, #22]
 8013514:	2b02      	cmp	r3, #2
 8013516:	d138      	bne.n	801358a <Update_Detail+0x232>
        {
      Draw_Circle_D(INV, S_X[Y_RANGES]-3, TITLE_Y_POS, 11, 0, 6*7);
 8013518:	232f      	movs	r3, #47	; 0x2f
 801351a:	b29b      	uxth	r3, r3
 801351c:	3b03      	subs	r3, #3
 801351e:	b29b      	uxth	r3, r3
 8013520:	b219      	sxth	r1, r3
 8013522:	232a      	movs	r3, #42	; 0x2a
 8013524:	9301      	str	r3, [sp, #4]
 8013526:	2300      	movs	r3, #0
 8013528:	9300      	str	r3, [sp, #0]
 801352a:	230b      	movs	r3, #11
 801352c:	22e1      	movs	r2, #225	; 0xe1
 801352e:	2001      	movs	r0, #1
 8013530:	f7fa fcd0 	bl	800ded4 <Draw_Circle_D>
      DispStr(S_X[Y_RANGES], TITLE_Y_POS, INV,      (List[Y_RANGES].PTR +(Range)*6));
 8013534:	202f      	movs	r0, #47	; 0x2f
 8013536:	4b3b      	ldr	r3, [pc, #236]	; (8013624 <Update_Detail+0x2cc>)
 8013538:	6819      	ldr	r1, [r3, #0]
 801353a:	f9b7 2000 	ldrsh.w	r2, [r7]
 801353e:	4613      	mov	r3, r2
 8013540:	005b      	lsls	r3, r3, #1
 8013542:	4413      	add	r3, r2
 8013544:	005b      	lsls	r3, r3, #1
 8013546:	440b      	add	r3, r1
 8013548:	2201      	movs	r2, #1
 801354a:	21e1      	movs	r1, #225	; 0xe1
 801354c:	f7fa fbec 	bl	800dd28 <DispStr>
      DispStr(S_X[COUPLING], TITLE_Y_POS, INV,      (List[COUPLING].PTR +(List[COUPLING].Val)*6));
 8013550:	2047      	movs	r0, #71	; 0x47
 8013552:	4b34      	ldr	r3, [pc, #208]	; (8013624 <Update_Detail+0x2cc>)
 8013554:	689a      	ldr	r2, [r3, #8]
 8013556:	4b33      	ldr	r3, [pc, #204]	; (8013624 <Update_Detail+0x2cc>)
 8013558:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801355c:	4619      	mov	r1, r3
 801355e:	460b      	mov	r3, r1
 8013560:	005b      	lsls	r3, r3, #1
 8013562:	440b      	add	r3, r1
 8013564:	005b      	lsls	r3, r3, #1
 8013566:	4413      	add	r3, r2
 8013568:	2201      	movs	r2, #1
 801356a:	21e1      	movs	r1, #225	; 0xe1
 801356c:	f7fa fbdc 	bl	800dd28 <DispStr>
      DispStr10x14(S_X[PROBEATT], TITLE_Y_POS, PRN+SYMB,(List[PROBEATT].Val?("A"):("B")));
 8013570:	2020      	movs	r0, #32
 8013572:	4b2c      	ldr	r3, [pc, #176]	; (8013624 <Update_Detail+0x2cc>)
 8013574:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8013578:	2b00      	cmp	r3, #0
 801357a:	d001      	beq.n	8013580 <Update_Detail+0x228>
 801357c:	4b2c      	ldr	r3, [pc, #176]	; (8013630 <Update_Detail+0x2d8>)
 801357e:	e000      	b.n	8013582 <Update_Detail+0x22a>
 8013580:	4b2c      	ldr	r3, [pc, #176]	; (8013634 <Update_Detail+0x2dc>)
 8013582:	2210      	movs	r2, #16
 8013584:	21e1      	movs	r1, #225	; 0xe1
 8013586:	f7fa fe37 	bl	800e1f8 <DispStr10x14>
        }
        ParamTab[P1x2] = 2*((List[V0_POSI].Val+1));
 801358a:	4b26      	ldr	r3, [pc, #152]	; (8013624 <Update_Detail+0x2cc>)
 801358c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8013590:	3301      	adds	r3, #1
 8013592:	b29b      	uxth	r3, r3
 8013594:	005b      	lsls	r3, r3, #1
 8013596:	b29b      	uxth	r3, r3
 8013598:	b21a      	sxth	r2, r3
 801359a:	4b27      	ldr	r3, [pc, #156]	; (8013638 <Update_Detail+0x2e0>)
 801359c:	829a      	strh	r2, [r3, #20]
        ParamTab[VTx2] = ParamTab[P1x2]+ 2*(List[THRESHOLD].Val+1);
 801359e:	4b26      	ldr	r3, [pc, #152]	; (8013638 <Update_Detail+0x2e0>)
 80135a0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80135a4:	b29a      	uxth	r2, r3
 80135a6:	4b1f      	ldr	r3, [pc, #124]	; (8013624 <Update_Detail+0x2cc>)
 80135a8:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 80135ac:	3301      	adds	r3, #1
 80135ae:	b29b      	uxth	r3, r3
 80135b0:	005b      	lsls	r3, r3, #1
 80135b2:	b29b      	uxth	r3, r3
 80135b4:	4413      	add	r3, r2
 80135b6:	b29b      	uxth	r3, r3
 80135b8:	b21a      	sxth	r2, r3
 80135ba:	4b1f      	ldr	r3, [pc, #124]	; (8013638 <Update_Detail+0x2e0>)
 80135bc:	839a      	strh	r2, [r3, #28]
        ParamTab[V1x2] = 2*(List[V1_POSI].Val+1);
 80135be:	4b19      	ldr	r3, [pc, #100]	; (8013624 <Update_Detail+0x2cc>)
 80135c0:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80135c4:	3301      	adds	r3, #1
 80135c6:	b29b      	uxth	r3, r3
 80135c8:	005b      	lsls	r3, r3, #1
 80135ca:	b29b      	uxth	r3, r3
 80135cc:	b21a      	sxth	r2, r3
 80135ce:	4b1a      	ldr	r3, [pc, #104]	; (8013638 <Update_Detail+0x2e0>)
 80135d0:	83da      	strh	r2, [r3, #30]
        ParamTab[V2x2] = 2*(List[V2_POSI].Val+1);
 80135d2:	4b14      	ldr	r3, [pc, #80]	; (8013624 <Update_Detail+0x2cc>)
 80135d4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80135d8:	3301      	adds	r3, #1
 80135da:	b29b      	uxth	r3, r3
 80135dc:	005b      	lsls	r3, r3, #1
 80135de:	b29b      	uxth	r3, r3
 80135e0:	b21a      	sxth	r2, r3
 80135e2:	4b15      	ldr	r3, [pc, #84]	; (8013638 <Update_Detail+0x2e0>)
 80135e4:	841a      	strh	r2, [r3, #32]
        ParamTab[V1F]  = (List[YN_TYPE].Val)? L_HID : SHOW;
 80135e6:	4b0f      	ldr	r3, [pc, #60]	; (8013624 <Update_Detail+0x2cc>)
 80135e8:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d001      	beq.n	80135f4 <Update_Detail+0x29c>
 80135f0:	2202      	movs	r2, #2
 80135f2:	e000      	b.n	80135f6 <Update_Detail+0x29e>
 80135f4:	2200      	movs	r2, #0
 80135f6:	4b10      	ldr	r3, [pc, #64]	; (8013638 <Update_Detail+0x2e0>)
 80135f8:	815a      	strh	r2, [r3, #10]
        ParamTab[V2F]  = (List[YN_TYPE].Val)? L_HID : SHOW;
 80135fa:	4b0a      	ldr	r3, [pc, #40]	; (8013624 <Update_Detail+0x2cc>)
 80135fc:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8013600:	2b00      	cmp	r3, #0
 8013602:	d01b      	beq.n	801363c <Update_Detail+0x2e4>
 8013604:	2202      	movs	r2, #2
 8013606:	e01a      	b.n	801363e <Update_Detail+0x2e6>
 8013608:	2000057c 	.word	0x2000057c
 801360c:	20006886 	.word	0x20006886
 8013610:	20002862 	.word	0x20002862
 8013614:	2000284a 	.word	0x2000284a
 8013618:	20000560 	.word	0x20000560
 801361c:	20006878 	.word	0x20006878
 8013620:	2000688c 	.word	0x2000688c
 8013624:	20000298 	.word	0x20000298
 8013628:	200007a4 	.word	0x200007a4
 801362c:	200001cc 	.word	0x200001cc
 8013630:	08000958 	.word	0x08000958
 8013634:	0800095c 	.word	0x0800095c
 8013638:	20000140 	.word	0x20000140
 801363c:	2200      	movs	r2, #0
 801363e:	4ba6      	ldr	r3, [pc, #664]	; (80138d8 <Update_Detail+0x580>)
 8013640:	819a      	strh	r2, [r3, #12]

        Tmp  =(ParamTab[V1x2]- ParamTab[V2x2])/2;         // ˢ����ʾV2-V1��ֵ
 8013642:	4ba5      	ldr	r3, [pc, #660]	; (80138d8 <Update_Detail+0x580>)
 8013644:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8013648:	461a      	mov	r2, r3
 801364a:	4ba3      	ldr	r3, [pc, #652]	; (80138d8 <Update_Detail+0x580>)
 801364c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8013650:	1ad3      	subs	r3, r2, r3
 8013652:	0fda      	lsrs	r2, r3, #31
 8013654:	4413      	add	r3, r2
 8013656:	105b      	asrs	r3, r3, #1
 8013658:	613b      	str	r3, [r7, #16]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 801365a:	f9b7 3000 	ldrsh.w	r3, [r7]
 801365e:	4a9f      	ldr	r2, [pc, #636]	; (80138dc <Update_Detail+0x584>)
 8013660:	5cd3      	ldrb	r3, [r2, r3]
 8013662:	461c      	mov	r4, r3
 8013664:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013668:	4a9d      	ldr	r2, [pc, #628]	; (80138e0 <Update_Detail+0x588>)
 801366a:	5cd3      	ldrb	r3, [r2, r3]
 801366c:	4618      	mov	r0, r3
 801366e:	f7fe fb2f 	bl	8011cd0 <Exp>
 8013672:	4603      	mov	r3, r0
 8013674:	fb03 f204 	mul.w	r2, r3, r4
 8013678:	693b      	ldr	r3, [r7, #16]
 801367a:	fb02 f303 	mul.w	r3, r2, r3
 801367e:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp, V[0], 3, UNSIGN);
 8013680:	2301      	movs	r3, #1
 8013682:	9300      	str	r3, [sp, #0]
 8013684:	2303      	movs	r3, #3
 8013686:	4a97      	ldr	r2, [pc, #604]	; (80138e4 <Update_Detail+0x58c>)
 8013688:	6939      	ldr	r1, [r7, #16]
 801368a:	4897      	ldr	r0, [pc, #604]	; (80138e8 <Update_Detail+0x590>)
 801368c:	f7fe fa24 	bl	8011ad8 <Value2Str>
        Draw_Circle_D(INV, S_X[V1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 8013690:	2307      	movs	r3, #7
 8013692:	b29b      	uxth	r3, r3
 8013694:	3b03      	subs	r3, #3
 8013696:	b29b      	uxth	r3, r3
 8013698:	b219      	sxth	r1, r3
 801369a:	2336      	movs	r3, #54	; 0x36
 801369c:	9301      	str	r3, [sp, #4]
 801369e:	2300      	movs	r3, #0
 80136a0:	9300      	str	r3, [sp, #0]
 80136a2:	230b      	movs	r3, #11
 80136a4:	2203      	movs	r2, #3
 80136a6:	2001      	movs	r0, #1
 80136a8:	f7fa fc14 	bl	800ded4 <Draw_Circle_D>
        DispStr(S_X[V1_POSI]+0*6, LABLE_Y, INV+SYMB, "]");
 80136ac:	2007      	movs	r0, #7
 80136ae:	4b8f      	ldr	r3, [pc, #572]	; (80138ec <Update_Detail+0x594>)
 80136b0:	2211      	movs	r2, #17
 80136b2:	2103      	movs	r1, #3
 80136b4:	f7fa fb38 	bl	800dd28 <DispStr>
        DispStr(S_X[V1_POSI]+1*6, LABLE_Y, INV,      "V:      ");
 80136b8:	2307      	movs	r3, #7
 80136ba:	b29b      	uxth	r3, r3
 80136bc:	3306      	adds	r3, #6
 80136be:	b29b      	uxth	r3, r3
 80136c0:	b218      	sxth	r0, r3
 80136c2:	4b8b      	ldr	r3, [pc, #556]	; (80138f0 <Update_Detail+0x598>)
 80136c4:	2201      	movs	r2, #1
 80136c6:	2103      	movs	r1, #3
 80136c8:	f7fa fb2e 	bl	800dd28 <DispStr>
        DispStr(S_X[V1_POSI]+7*6, LABLE_Y, INV,  "  ");
 80136cc:	2307      	movs	r3, #7
 80136ce:	b29b      	uxth	r3, r3
 80136d0:	332a      	adds	r3, #42	; 0x2a
 80136d2:	b29b      	uxth	r3, r3
 80136d4:	b218      	sxth	r0, r3
 80136d6:	4b87      	ldr	r3, [pc, #540]	; (80138f4 <Update_Detail+0x59c>)
 80136d8:	2201      	movs	r2, #1
 80136da:	2103      	movs	r1, #3
 80136dc:	f7fa fb24 	bl	800dd28 <DispStr>
        DispStr(S_X[V1_POSI]+3*6, LABLE_Y, INV,  (char *)NumStr);
 80136e0:	2307      	movs	r3, #7
 80136e2:	b29b      	uxth	r3, r3
 80136e4:	3312      	adds	r3, #18
 80136e6:	b29b      	uxth	r3, r3
 80136e8:	b218      	sxth	r0, r3
 80136ea:	4b7f      	ldr	r3, [pc, #508]	; (80138e8 <Update_Detail+0x590>)
 80136ec:	2201      	movs	r2, #1
 80136ee:	2103      	movs	r1, #3
 80136f0:	f7fa fb1a 	bl	800dd28 <DispStr>

        SetColor(GRY, TCOLOR[TRG]);
 80136f4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80136f8:	4619      	mov	r1, r3
 80136fa:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80136fe:	f7fa fafb 	bl	800dcf8 <SetColor>
        Tmp  = List[SENSITIVE].Val;                       // ˢ����ʾ�����ز�ֵ
 8013702:	4b7d      	ldr	r3, [pc, #500]	; (80138f8 <Update_Detail+0x5a0>)
 8013704:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8013708:	613b      	str	r3, [r7, #16]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 801370a:	f9b7 3000 	ldrsh.w	r3, [r7]
 801370e:	4a73      	ldr	r2, [pc, #460]	; (80138dc <Update_Detail+0x584>)
 8013710:	5cd3      	ldrb	r3, [r2, r3]
 8013712:	461c      	mov	r4, r3
 8013714:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013718:	4a71      	ldr	r2, [pc, #452]	; (80138e0 <Update_Detail+0x588>)
 801371a:	5cd3      	ldrb	r3, [r2, r3]
 801371c:	4618      	mov	r0, r3
 801371e:	f7fe fad7 	bl	8011cd0 <Exp>
 8013722:	4603      	mov	r3, r0
 8013724:	fb03 f204 	mul.w	r2, r3, r4
 8013728:	693b      	ldr	r3, [r7, #16]
 801372a:	fb02 f303 	mul.w	r3, r2, r3
 801372e:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp,V[0], 2, UNSIGN);
 8013730:	2301      	movs	r3, #1
 8013732:	9300      	str	r3, [sp, #0]
 8013734:	2302      	movs	r3, #2
 8013736:	4a6b      	ldr	r2, [pc, #428]	; (80138e4 <Update_Detail+0x58c>)
 8013738:	6939      	ldr	r1, [r7, #16]
 801373a:	486b      	ldr	r0, [pc, #428]	; (80138e8 <Update_Detail+0x590>)
 801373c:	f7fe f9cc 	bl	8011ad8 <Value2Str>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  "     ");
 8013740:	23e7      	movs	r3, #231	; 0xe7
 8013742:	b29b      	uxth	r3, r3
 8013744:	3309      	adds	r3, #9
 8013746:	b29b      	uxth	r3, r3
 8013748:	b218      	sxth	r0, r3
 801374a:	4b6c      	ldr	r3, [pc, #432]	; (80138fc <Update_Detail+0x5a4>)
 801374c:	2201      	movs	r2, #1
 801374e:	21e1      	movs	r1, #225	; 0xe1
 8013750:	f7fa faea 	bl	800dd28 <DispStr>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  (char *)NumStr);
 8013754:	23e7      	movs	r3, #231	; 0xe7
 8013756:	b29b      	uxth	r3, r3
 8013758:	3309      	adds	r3, #9
 801375a:	b29b      	uxth	r3, r3
 801375c:	b218      	sxth	r0, r3
 801375e:	4b62      	ldr	r3, [pc, #392]	; (80138e8 <Update_Detail+0x590>)
 8013760:	2201      	movs	r2, #1
 8013762:	21e1      	movs	r1, #225	; 0xe1
 8013764:	f7fa fae0 	bl	800dd28 <DispStr>
        DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, INV+SYMB,"E");
 8013768:	20e7      	movs	r0, #231	; 0xe7
 801376a:	4b65      	ldr	r3, [pc, #404]	; (8013900 <Update_Detail+0x5a8>)
 801376c:	2211      	movs	r2, #17
 801376e:	21e1      	movs	r1, #225	; 0xe1
 8013770:	f7fa fd42 	bl	800e1f8 <DispStr10x14>
        GainA  = (char)List[Y_RANGES].Val;
 8013774:	4b60      	ldr	r3, [pc, #384]	; (80138f8 <Update_Detail+0x5a0>)
 8013776:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801377a:	b2db      	uxtb	r3, r3
 801377c:	b21a      	sxth	r2, r3
 801377e:	4b61      	ldr	r3, [pc, #388]	; (8013904 <Update_Detail+0x5ac>)
 8013780:	801a      	strh	r2, [r3, #0]

        if((char)List[Y_RANGES].Val>1)
 8013782:	4b5d      	ldr	r3, [pc, #372]	; (80138f8 <Update_Detail+0x5a0>)
 8013784:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013788:	b2db      	uxtb	r3, r3
 801378a:	2b01      	cmp	r3, #1
 801378c:	d903      	bls.n	8013796 <Update_Detail+0x43e>
          KindA  = HV;
 801378e:	4b5e      	ldr	r3, [pc, #376]	; (8013908 <Update_Detail+0x5b0>)
 8013790:	2201      	movs	r2, #1
 8013792:	801a      	strh	r2, [r3, #0]
 8013794:	e002      	b.n	801379c <Update_Detail+0x444>
        else
          KindA  = LV;                //Ch1ѡ���ѹ���ѹ����
 8013796:	4b5c      	ldr	r3, [pc, #368]	; (8013908 <Update_Detail+0x5b0>)
 8013798:	2200      	movs	r2, #0
 801379a:	801a      	strh	r2, [r3, #0]
        StateA =  ((char)List[Y_RANGES].Val>5)?ACT: GND;
 801379c:	4b56      	ldr	r3, [pc, #344]	; (80138f8 <Update_Detail+0x5a0>)
 801379e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80137a2:	b2db      	uxtb	r3, r3
 80137a4:	2b05      	cmp	r3, #5
 80137a6:	d901      	bls.n	80137ac <Update_Detail+0x454>
 80137a8:	2204      	movs	r2, #4
 80137aa:	e000      	b.n	80137ae <Update_Detail+0x456>
 80137ac:	2200      	movs	r2, #0
 80137ae:	4b57      	ldr	r3, [pc, #348]	; (801390c <Update_Detail+0x5b4>)
 80137b0:	801a      	strh	r2, [r3, #0]

        CouplA = (List[COUPLING].Val)? AC : DC;                      // AC);  //AC/DC��Ϸ�ʽ
 80137b2:	4b51      	ldr	r3, [pc, #324]	; (80138f8 <Update_Detail+0x5a0>)
 80137b4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d001      	beq.n	80137c0 <Update_Detail+0x468>
 80137bc:	2200      	movs	r2, #0
 80137be:	e000      	b.n	80137c2 <Update_Detail+0x46a>
 80137c0:	2202      	movs	r2, #2
 80137c2:	4b53      	ldr	r3, [pc, #332]	; (8013910 <Update_Detail+0x5b8>)
 80137c4:	801a      	strh	r2, [r3, #0]
        BIOS_Ctrl(AiRANGE, KindA+CouplA+StateA);             //Ch1״̬ˢ��
 80137c6:	4b50      	ldr	r3, [pc, #320]	; (8013908 <Update_Detail+0x5b0>)
 80137c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80137cc:	461a      	mov	r2, r3
 80137ce:	4b50      	ldr	r3, [pc, #320]	; (8013910 <Update_Detail+0x5b8>)
 80137d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80137d4:	4413      	add	r3, r2
 80137d6:	4a4d      	ldr	r2, [pc, #308]	; (801390c <Update_Detail+0x5b4>)
 80137d8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80137dc:	4413      	add	r3, r2
 80137de:	4619      	mov	r1, r3
 80137e0:	2007      	movs	r0, #7
 80137e2:	f7f8 fdc7 	bl	800c374 <BIOS_Ctrl>
        AiPosi(List[V0_POSI].Val);                        //Ch1Ӳ����Ӧλ��
 80137e6:	4b44      	ldr	r3, [pc, #272]	; (80138f8 <Update_Detail+0x5a0>)
 80137e8:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80137ec:	b2db      	uxtb	r3, r3
 80137ee:	4618      	mov	r0, r3
 80137f0:	f001 fc5c 	bl	80150ac <AiPosi>
        break;
 80137f4:	f000 bd61 	b.w	80142ba <Update_Detail+0xf62>
      case SAVE_BUF:
      case SAVE_CSV:
      case SAVE_SVG:
      case LOAD_DAT: //��ʾ��ѡ��Ҫ��ȡ���ļ����
      case LOAD_BUF:
        SetColor(GRY, TCOLOR[FN]);
 80137f8:	f64f 4310 	movw	r3, #64528	; 0xfc10
 80137fc:	4619      	mov	r1, r3
 80137fe:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013802:	f7fa fa79 	bl	800dcf8 <SetColor>
        u8ToDec3(NumStr, List[i].Val);
 8013806:	8afb      	ldrh	r3, [r7, #22]
 8013808:	4a3b      	ldr	r2, [pc, #236]	; (80138f8 <Update_Detail+0x5a0>)
 801380a:	00db      	lsls	r3, r3, #3
 801380c:	4413      	add	r3, r2
 801380e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013812:	b2db      	uxtb	r3, r3
 8013814:	4619      	mov	r1, r3
 8013816:	4834      	ldr	r0, [pc, #208]	; (80138e8 <Update_Detail+0x590>)
 8013818:	f7fe f8f6 	bl	8011a08 <u8ToDec3>
        Draw_Circle_D(INV, S_X[i]-3, LABLE_Y, 11, 0, 6*11);
 801381c:	8afb      	ldrh	r3, [r7, #22]
 801381e:	4a3d      	ldr	r2, [pc, #244]	; (8013914 <Update_Detail+0x5bc>)
 8013820:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013824:	b29b      	uxth	r3, r3
 8013826:	3b03      	subs	r3, #3
 8013828:	b29b      	uxth	r3, r3
 801382a:	b219      	sxth	r1, r3
 801382c:	2342      	movs	r3, #66	; 0x42
 801382e:	9301      	str	r3, [sp, #4]
 8013830:	2300      	movs	r3, #0
 8013832:	9300      	str	r3, [sp, #0]
 8013834:	230b      	movs	r3, #11
 8013836:	2203      	movs	r2, #3
 8013838:	2001      	movs	r0, #1
 801383a:	f7fa fb4b 	bl	800ded4 <Draw_Circle_D>
        DispStr(S_X[i],    LABLE_Y, INV, ((i > SAVE_SVG)? "Load" : "Save"));//0513
 801383e:	8afb      	ldrh	r3, [r7, #22]
 8013840:	4a34      	ldr	r2, [pc, #208]	; (8013914 <Update_Detail+0x5bc>)
 8013842:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8013846:	8afb      	ldrh	r3, [r7, #22]
 8013848:	2b21      	cmp	r3, #33	; 0x21
 801384a:	d901      	bls.n	8013850 <Update_Detail+0x4f8>
 801384c:	4b32      	ldr	r3, [pc, #200]	; (8013918 <Update_Detail+0x5c0>)
 801384e:	e000      	b.n	8013852 <Update_Detail+0x4fa>
 8013850:	4b32      	ldr	r3, [pc, #200]	; (801391c <Update_Detail+0x5c4>)
 8013852:	2201      	movs	r2, #1
 8013854:	2103      	movs	r1, #3
 8013856:	f7fa fa67 	bl	800dd28 <DispStr>
        DispStr(S_X[i]+24, LABLE_Y, INV, (char *)NumStr);
 801385a:	8afb      	ldrh	r3, [r7, #22]
 801385c:	4a2d      	ldr	r2, [pc, #180]	; (8013914 <Update_Detail+0x5bc>)
 801385e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013862:	b29b      	uxth	r3, r3
 8013864:	3318      	adds	r3, #24
 8013866:	b29b      	uxth	r3, r3
 8013868:	b218      	sxth	r0, r3
 801386a:	4b1f      	ldr	r3, [pc, #124]	; (80138e8 <Update_Detail+0x590>)
 801386c:	2201      	movs	r2, #1
 801386e:	2103      	movs	r1, #3
 8013870:	f7fa fa5a 	bl	800dd28 <DispStr>
        DispStr(S_X[i]+42, LABLE_Y, INV, (List[i].PTR +(i - SAVE_BMP)*6));
 8013874:	8afb      	ldrh	r3, [r7, #22]
 8013876:	4a27      	ldr	r2, [pc, #156]	; (8013914 <Update_Detail+0x5bc>)
 8013878:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801387c:	b29b      	uxth	r3, r3
 801387e:	332a      	adds	r3, #42	; 0x2a
 8013880:	b29b      	uxth	r3, r3
 8013882:	b218      	sxth	r0, r3
 8013884:	8afb      	ldrh	r3, [r7, #22]
 8013886:	4a1c      	ldr	r2, [pc, #112]	; (80138f8 <Update_Detail+0x5a0>)
 8013888:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801388c:	8afb      	ldrh	r3, [r7, #22]
 801388e:	f1a3 021d 	sub.w	r2, r3, #29
 8013892:	4613      	mov	r3, r2
 8013894:	005b      	lsls	r3, r3, #1
 8013896:	4413      	add	r3, r2
 8013898:	005b      	lsls	r3, r3, #1
 801389a:	440b      	add	r3, r1
 801389c:	2201      	movs	r2, #1
 801389e:	2103      	movs	r1, #3
 80138a0:	f7fa fa42 	bl	800dd28 <DispStr>
        break;
 80138a4:	f000 bd09 	b.w	80142ba <Update_Detail+0xf62>

      case TPYE_OUT:
        if(List[TPYE_OUT].Val ==0) //suqar
 80138a8:	4b13      	ldr	r3, [pc, #76]	; (80138f8 <Update_Detail+0x5a0>)
 80138aa:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d136      	bne.n	8013920 <Update_Detail+0x5c8>
        {
          BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 80138b2:	2100      	movs	r1, #0
 80138b4:	2000      	movs	r0, #0
 80138b6:	f7f8 fd5d 	bl	800c374 <BIOS_Ctrl>
          Set_Fout(List[FREQ_OUT].Val);
 80138ba:	4b0f      	ldr	r3, [pc, #60]	; (80138f8 <Update_Detail+0x5a0>)
 80138bc:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 80138c0:	4618      	mov	r0, r3
 80138c2:	f7f8 ff35 	bl	800c730 <Set_Fout>
          Set_Duty();
 80138c6:	f7f8 ff07 	bl	800c6d8 <Set_Duty>
          BIOS_Ctrl(OUT_MOD, PULSED);             // �趨�������ģʽ
 80138ca:	2104      	movs	r1, #4
 80138cc:	2000      	movs	r0, #0
 80138ce:	f7f8 fd51 	bl	800c374 <BIOS_Ctrl>
           BIOS_Ctrl(OUT_CNT, 180);
           BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
           BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
        }

      break;
 80138d2:	f000 bcf2 	b.w	80142ba <Update_Detail+0xf62>
 80138d6:	bf00      	nop
 80138d8:	20000140 	.word	0x20000140
 80138dc:	08002130 	.word	0x08002130
 80138e0:	08002108 	.word	0x08002108
 80138e4:	08001d00 	.word	0x08001d00
 80138e8:	2000283c 	.word	0x2000283c
 80138ec:	08000960 	.word	0x08000960
 80138f0:	08000964 	.word	0x08000964
 80138f4:	080009d0 	.word	0x080009d0
 80138f8:	20000298 	.word	0x20000298
 80138fc:	08000990 	.word	0x08000990
 8013900:	08000998 	.word	0x08000998
 8013904:	2000284a 	.word	0x2000284a
 8013908:	20006886 	.word	0x20006886
 801390c:	20002862 	.word	0x20002862
 8013910:	20006888 	.word	0x20006888
 8013914:	0800215c 	.word	0x0800215c
 8013918:	08000948 	.word	0x08000948
 801391c:	08000950 	.word	0x08000950
          if(List[FREQ_OUT].Val > MAX_FREQ)
 8013920:	4bbf      	ldr	r3, [pc, #764]	; (8013c20 <Update_Detail+0x8c8>)
 8013922:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013926:	2b09      	cmp	r3, #9
 8013928:	dd03      	ble.n	8013932 <Update_Detail+0x5da>
             List[FREQ_OUT].Val = MAX_FREQ ;   //10KHz
 801392a:	4bbd      	ldr	r3, [pc, #756]	; (8013c20 <Update_Detail+0x8c8>)
 801392c:	2209      	movs	r2, #9
 801392e:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
           BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 8013932:	2100      	movs	r1, #0
 8013934:	2000      	movs	r0, #0
 8013936:	f7f8 fd1d 	bl	800c374 <BIOS_Ctrl>
           htim7.Init.Prescaler = Dac_Psc[List[FREQ_OUT].Val] - 1;
 801393a:	4bb9      	ldr	r3, [pc, #740]	; (8013c20 <Update_Detail+0x8c8>)
 801393c:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013940:	461a      	mov	r2, r3
 8013942:	4bb8      	ldr	r3, [pc, #736]	; (8013c24 <Update_Detail+0x8cc>)
 8013944:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8013948:	3b01      	subs	r3, #1
 801394a:	461a      	mov	r2, r3
 801394c:	4bb6      	ldr	r3, [pc, #728]	; (8013c28 <Update_Detail+0x8d0>)
 801394e:	605a      	str	r2, [r3, #4]
           BIOS_Ctrl(DAC_TIM, Dac_Tim[List[FREQ_OUT].Val]-1); // 72MHz/2/180/100 = 2KHz ģ���������(ÿ����36��)
 8013950:	4bb3      	ldr	r3, [pc, #716]	; (8013c20 <Update_Detail+0x8c8>)
 8013952:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013956:	461a      	mov	r2, r3
 8013958:	4bb4      	ldr	r3, [pc, #720]	; (8013c2c <Update_Detail+0x8d4>)
 801395a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801395e:	3b01      	subs	r3, #1
 8013960:	4619      	mov	r1, r3
 8013962:	2001      	movs	r0, #1
 8013964:	f7f8 fd06 	bl	800c374 <BIOS_Ctrl>
           BIOS_Ctrl(OUT_CNT, 180);
 8013968:	21b4      	movs	r1, #180	; 0xb4
 801396a:	2002      	movs	r0, #2
 801396c:	f7f8 fd02 	bl	800c374 <BIOS_Ctrl>
           BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
 8013970:	4bab      	ldr	r3, [pc, #684]	; (8013c20 <Update_Detail+0x8c8>)
 8013972:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8013976:	b2db      	uxtb	r3, r3
 8013978:	4618      	mov	r0, r3
 801397a:	f7f8 fce5 	bl	800c348 <BIOS_Info>
 801397e:	4603      	mov	r3, r0
 8013980:	4619      	mov	r1, r3
 8013982:	2003      	movs	r0, #3
 8013984:	f7f8 fcf6 	bl	800c374 <BIOS_Ctrl>
           BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
 8013988:	2102      	movs	r1, #2
 801398a:	2000      	movs	r0, #0
 801398c:	f7f8 fcf2 	bl	800c374 <BIOS_Ctrl>
      break;
 8013990:	f000 bc93 	b.w	80142ba <Update_Detail+0xf62>

      case FREQ_OUT: // ��ʾ�������Ƶ��
        if(List[TPYE_OUT].Val ==0) //suqar
 8013994:	4ba2      	ldr	r3, [pc, #648]	; (8013c20 <Update_Detail+0x8c8>)
 8013996:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 801399a:	2b00      	cmp	r3, #0
 801399c:	d111      	bne.n	80139c2 <Update_Detail+0x66a>
        {
          BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 801399e:	2100      	movs	r1, #0
 80139a0:	2000      	movs	r0, #0
 80139a2:	f7f8 fce7 	bl	800c374 <BIOS_Ctrl>
          Set_Fout(List[FREQ_OUT].Val);
 80139a6:	4b9e      	ldr	r3, [pc, #632]	; (8013c20 <Update_Detail+0x8c8>)
 80139a8:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 80139ac:	4618      	mov	r0, r3
 80139ae:	f7f8 febf 	bl	800c730 <Set_Fout>
          Set_Duty();
 80139b2:	f7f8 fe91 	bl	800c6d8 <Set_Duty>
          BIOS_Ctrl(OUT_MOD, PULSED);             // �趨�������ģʽ
 80139b6:	2104      	movs	r1, #4
 80139b8:	2000      	movs	r0, #0
 80139ba:	f7f8 fcdb 	bl	800c374 <BIOS_Ctrl>
          BIOS_Ctrl(DAC_TIM, Dac_Tim[List[FREQ_OUT].Val]-1); // 72MHz/2/180/100 = 2KHz ģ���������(ÿ����36��)
          BIOS_Ctrl(OUT_CNT, 180);
          BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
          BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
        }
        break;
 80139be:	f000 bc7c 	b.w	80142ba <Update_Detail+0xf62>
          if(List[FREQ_OUT].Val > MAX_FREQ)
 80139c2:	4b97      	ldr	r3, [pc, #604]	; (8013c20 <Update_Detail+0x8c8>)
 80139c4:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 80139c8:	2b09      	cmp	r3, #9
 80139ca:	dd03      	ble.n	80139d4 <Update_Detail+0x67c>
            List[FREQ_OUT].Val = MAX_FREQ ;   //10KHz
 80139cc:	4b94      	ldr	r3, [pc, #592]	; (8013c20 <Update_Detail+0x8c8>)
 80139ce:	2209      	movs	r2, #9
 80139d0:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
          BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 80139d4:	2100      	movs	r1, #0
 80139d6:	2000      	movs	r0, #0
 80139d8:	f7f8 fccc 	bl	800c374 <BIOS_Ctrl>
          htim7.Init.Prescaler = Dac_Psc[List[FREQ_OUT].Val] - 1;
 80139dc:	4b90      	ldr	r3, [pc, #576]	; (8013c20 <Update_Detail+0x8c8>)
 80139de:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 80139e2:	461a      	mov	r2, r3
 80139e4:	4b8f      	ldr	r3, [pc, #572]	; (8013c24 <Update_Detail+0x8cc>)
 80139e6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80139ea:	3b01      	subs	r3, #1
 80139ec:	461a      	mov	r2, r3
 80139ee:	4b8e      	ldr	r3, [pc, #568]	; (8013c28 <Update_Detail+0x8d0>)
 80139f0:	605a      	str	r2, [r3, #4]
          BIOS_Ctrl(DAC_TIM, Dac_Tim[List[FREQ_OUT].Val]-1); // 72MHz/2/180/100 = 2KHz ģ���������(ÿ����36��)
 80139f2:	4b8b      	ldr	r3, [pc, #556]	; (8013c20 <Update_Detail+0x8c8>)
 80139f4:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 80139f8:	461a      	mov	r2, r3
 80139fa:	4b8c      	ldr	r3, [pc, #560]	; (8013c2c <Update_Detail+0x8d4>)
 80139fc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8013a00:	3b01      	subs	r3, #1
 8013a02:	4619      	mov	r1, r3
 8013a04:	2001      	movs	r0, #1
 8013a06:	f7f8 fcb5 	bl	800c374 <BIOS_Ctrl>
          BIOS_Ctrl(OUT_CNT, 180);
 8013a0a:	21b4      	movs	r1, #180	; 0xb4
 8013a0c:	2002      	movs	r0, #2
 8013a0e:	f7f8 fcb1 	bl	800c374 <BIOS_Ctrl>
          BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
 8013a12:	4b83      	ldr	r3, [pc, #524]	; (8013c20 <Update_Detail+0x8c8>)
 8013a14:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8013a18:	b2db      	uxtb	r3, r3
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	f7f8 fc94 	bl	800c348 <BIOS_Info>
 8013a20:	4603      	mov	r3, r0
 8013a22:	4619      	mov	r1, r3
 8013a24:	2003      	movs	r0, #3
 8013a26:	f7f8 fca5 	bl	800c374 <BIOS_Ctrl>
          BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
 8013a2a:	2102      	movs	r1, #2
 8013a2c:	2000      	movs	r0, #0
 8013a2e:	f7f8 fca1 	bl	800c374 <BIOS_Ctrl>
        break;
 8013a32:	f000 bc42 	b.w	80142ba <Update_Detail+0xf62>

      case FREQ_DUT: // ��ʾ�������ռ�ձ�
        SetColor(GRY, TCOLOR[SN]);
 8013a36:	f240 531f 	movw	r3, #1311	; 0x51f
 8013a3a:	4619      	mov	r1, r3
 8013a3c:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013a40:	f7fa f95a 	bl	800dcf8 <SetColor>
        Draw_Circle_D(INV, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 8013a44:	8afb      	ldrh	r3, [r7, #22]
 8013a46:	4a7a      	ldr	r2, [pc, #488]	; (8013c30 <Update_Detail+0x8d8>)
 8013a48:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013a4c:	b29b      	uxth	r3, r3
 8013a4e:	3b03      	subs	r3, #3
 8013a50:	b29b      	uxth	r3, r3
 8013a52:	b219      	sxth	r1, r3
 8013a54:	2336      	movs	r3, #54	; 0x36
 8013a56:	9301      	str	r3, [sp, #4]
 8013a58:	2300      	movs	r3, #0
 8013a5a:	9300      	str	r3, [sp, #0]
 8013a5c:	230b      	movs	r3, #11
 8013a5e:	2203      	movs	r2, #3
 8013a60:	2001      	movs	r0, #1
 8013a62:	f7fa fa37 	bl	800ded4 <Draw_Circle_D>
        if(List[TPYE_OUT].Val == 0) //suqar
 8013a66:	4b6e      	ldr	r3, [pc, #440]	; (8013c20 <Update_Detail+0x8c8>)
 8013a68:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	f040 8423 	bne.w	80142b8 <Update_Detail+0xf60>
        {
          Set_Duty();
 8013a72:	f7f8 fe31 	bl	800c6d8 <Set_Duty>
        }
        break;
 8013a76:	f000 bc1f 	b.w	80142b8 <Update_Detail+0xf60>

      case EXT_REFN: // ��ʾ�ο���������
      case EXT_POSI: // ��ʾ�ο�����ƫ��
        SetColor(GRY, TCOLOR[EX]);
 8013a7a:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8013a7e:	4619      	mov	r1, r3
 8013a80:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013a84:	f7fa f938 	bl	800dcf8 <SetColor>
        if((i == EXT_REFN) || (i == EXT_POSI))
 8013a88:	8afb      	ldrh	r3, [r7, #22]
 8013a8a:	2b1a      	cmp	r3, #26
 8013a8c:	d002      	beq.n	8013a94 <Update_Detail+0x73c>
 8013a8e:	8afb      	ldrh	r3, [r7, #22]
 8013a90:	2b1b      	cmp	r3, #27
 8013a92:	d123      	bne.n	8013adc <Update_Detail+0x784>
        {
          Draw_Circle_D(INV, S_X[EXT_REFN]-3, TITLE_Y_POS, 11, 1, 6*5);
 8013a94:	23a8      	movs	r3, #168	; 0xa8
 8013a96:	b29b      	uxth	r3, r3
 8013a98:	3b03      	subs	r3, #3
 8013a9a:	b29b      	uxth	r3, r3
 8013a9c:	b219      	sxth	r1, r3
 8013a9e:	231e      	movs	r3, #30
 8013aa0:	9301      	str	r3, [sp, #4]
 8013aa2:	2301      	movs	r3, #1
 8013aa4:	9300      	str	r3, [sp, #0]
 8013aa6:	230b      	movs	r3, #11
 8013aa8:	22e1      	movs	r2, #225	; 0xe1
 8013aaa:	2001      	movs	r0, #1
 8013aac:	f7fa fa12 	bl	800ded4 <Draw_Circle_D>
          DispStr(S_X[EXT_REFN], TITLE_Y_POS, INV, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 8013ab0:	20a8      	movs	r0, #168	; 0xa8
 8013ab2:	4b5b      	ldr	r3, [pc, #364]	; (8013c20 <Update_Detail+0x8c8>)
 8013ab4:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d00a      	beq.n	8013ad2 <Update_Detail+0x77a>
 8013abc:	4b58      	ldr	r3, [pc, #352]	; (8013c20 <Update_Detail+0x8c8>)
 8013abe:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8013ac2:	461a      	mov	r2, r3
 8013ac4:	4613      	mov	r3, r2
 8013ac6:	005b      	lsls	r3, r3, #1
 8013ac8:	4413      	add	r3, r2
 8013aca:	005b      	lsls	r3, r3, #1
 8013acc:	4a59      	ldr	r2, [pc, #356]	; (8013c34 <Update_Detail+0x8dc>)
 8013ace:	4413      	add	r3, r2
 8013ad0:	e000      	b.n	8013ad4 <Update_Detail+0x77c>
 8013ad2:	4b59      	ldr	r3, [pc, #356]	; (8013c38 <Update_Detail+0x8e0>)
 8013ad4:	2201      	movs	r2, #1
 8013ad6:	21e1      	movs	r1, #225	; 0xe1
 8013ad8:	f7fa f926 	bl	800dd28 <DispStr>
        }
        if(List[EXT_REFN].Val < 6) ParamTab[P2x2]=(List[EXT_POSI].Val + 1)*2;
 8013adc:	4b50      	ldr	r3, [pc, #320]	; (8013c20 <Update_Detail+0x8c8>)
 8013ade:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8013ae2:	2b05      	cmp	r3, #5
 8013ae4:	dc0a      	bgt.n	8013afc <Update_Detail+0x7a4>
 8013ae6:	4b4e      	ldr	r3, [pc, #312]	; (8013c20 <Update_Detail+0x8c8>)
 8013ae8:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8013aec:	3301      	adds	r3, #1
 8013aee:	b29b      	uxth	r3, r3
 8013af0:	005b      	lsls	r3, r3, #1
 8013af2:	b29b      	uxth	r3, r3
 8013af4:	b21a      	sxth	r2, r3
 8013af6:	4b51      	ldr	r3, [pc, #324]	; (8013c3c <Update_Detail+0x8e4>)
 8013af8:	82da      	strh	r2, [r3, #22]
        else                       ParamTab[P2x2]=(List[ V0_POSI].Val + 1)*2;
        break;
 8013afa:	e3de      	b.n	80142ba <Update_Detail+0xf62>
        else                       ParamTab[P2x2]=(List[ V0_POSI].Val + 1)*2;
 8013afc:	4b48      	ldr	r3, [pc, #288]	; (8013c20 <Update_Detail+0x8c8>)
 8013afe:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8013b02:	3301      	adds	r3, #1
 8013b04:	b29b      	uxth	r3, r3
 8013b06:	005b      	lsls	r3, r3, #1
 8013b08:	b29b      	uxth	r3, r3
 8013b0a:	b21a      	sxth	r2, r3
 8013b0c:	4b4b      	ldr	r3, [pc, #300]	; (8013c3c <Update_Detail+0x8e4>)
 8013b0e:	82da      	strh	r2, [r3, #22]
        break;
 8013b10:	e3d3      	b.n	80142ba <Update_Detail+0xf62>

      case EXT_HIDE:
        if(List[EXT_HIDE].Val == 0) ParamTab[P2F] |=  W_HID;  // W_HID�����ο�����
 8013b12:	4b43      	ldr	r3, [pc, #268]	; (8013c20 <Update_Detail+0x8c8>)
 8013b14:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d108      	bne.n	8013b2e <Update_Detail+0x7d6>
 8013b1c:	4b47      	ldr	r3, [pc, #284]	; (8013c3c <Update_Detail+0x8e4>)
 8013b1e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013b22:	f043 0304 	orr.w	r3, r3, #4
 8013b26:	b21a      	sxth	r2, r3
 8013b28:	4b44      	ldr	r3, [pc, #272]	; (8013c3c <Update_Detail+0x8e4>)
 8013b2a:	805a      	strh	r2, [r3, #2]
 8013b2c:	e007      	b.n	8013b3e <Update_Detail+0x7e6>
        else                        ParamTab[P2F] &= ~W_HID;  // W_HID��ʾ�ο�����
 8013b2e:	4b43      	ldr	r3, [pc, #268]	; (8013c3c <Update_Detail+0x8e4>)
 8013b30:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013b34:	f023 0304 	bic.w	r3, r3, #4
 8013b38:	b21a      	sxth	r2, r3
 8013b3a:	4b40      	ldr	r3, [pc, #256]	; (8013c3c <Update_Detail+0x8e4>)
 8013b3c:	805a      	strh	r2, [r3, #2]
        SetColor(GRY, TCOLOR[EX]);
 8013b3e:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8013b42:	4619      	mov	r1, r3
 8013b44:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013b48:	f7fa f8d6 	bl	800dcf8 <SetColor>
        Draw_Circle_D(INV, S_X[EXT_REFN]-3, TITLE_Y_POS, 11, 1, 6*5);
 8013b4c:	23a8      	movs	r3, #168	; 0xa8
 8013b4e:	b29b      	uxth	r3, r3
 8013b50:	3b03      	subs	r3, #3
 8013b52:	b29b      	uxth	r3, r3
 8013b54:	b219      	sxth	r1, r3
 8013b56:	231e      	movs	r3, #30
 8013b58:	9301      	str	r3, [sp, #4]
 8013b5a:	2301      	movs	r3, #1
 8013b5c:	9300      	str	r3, [sp, #0]
 8013b5e:	230b      	movs	r3, #11
 8013b60:	22e1      	movs	r2, #225	; 0xe1
 8013b62:	2001      	movs	r0, #1
 8013b64:	f7fa f9b6 	bl	800ded4 <Draw_Circle_D>
        DispStr(S_X[EXT_REFN], TITLE_Y_POS, INV, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 8013b68:	20a8      	movs	r0, #168	; 0xa8
 8013b6a:	4b2d      	ldr	r3, [pc, #180]	; (8013c20 <Update_Detail+0x8c8>)
 8013b6c:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d00a      	beq.n	8013b8a <Update_Detail+0x832>
 8013b74:	4b2a      	ldr	r3, [pc, #168]	; (8013c20 <Update_Detail+0x8c8>)
 8013b76:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8013b7a:	461a      	mov	r2, r3
 8013b7c:	4613      	mov	r3, r2
 8013b7e:	005b      	lsls	r3, r3, #1
 8013b80:	4413      	add	r3, r2
 8013b82:	005b      	lsls	r3, r3, #1
 8013b84:	4a2b      	ldr	r2, [pc, #172]	; (8013c34 <Update_Detail+0x8dc>)
 8013b86:	4413      	add	r3, r2
 8013b88:	e000      	b.n	8013b8c <Update_Detail+0x834>
 8013b8a:	4b2b      	ldr	r3, [pc, #172]	; (8013c38 <Update_Detail+0x8e0>)
 8013b8c:	2201      	movs	r2, #1
 8013b8e:	21e1      	movs	r1, #225	; 0xe1
 8013b90:	f7fa f8ca 	bl	800dd28 <DispStr>
      break;
 8013b94:	e391      	b.n	80142ba <Update_Detail+0xf62>
      case TR_MODE:   // ˢ����ʾ������ʽ
      case FITTRIGG:  // ˢ����ʾ�Զ�������ֵ
      case THRESHOLD: // ˢ����ʾ������ֵ
      case SENSITIVE: // ˢ����ʾ����������
      case TR_TYPE:   // ˢ����ʾ�α���ʽ
        DispStatus();
 8013b96:	f000 fc6b 	bl	8014470 <DispStatus>
        SetColor(GRY, TCOLOR[TRG]);
 8013b9a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8013b9e:	4619      	mov	r1, r3
 8013ba0:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013ba4:	f7fa f8a8 	bl	800dcf8 <SetColor>
        if(i == TR_MODE || i==SENSITIVE)
 8013ba8:	8afb      	ldrh	r3, [r7, #22]
 8013baa:	2b0e      	cmp	r3, #14
 8013bac:	d002      	beq.n	8013bb4 <Update_Detail+0x85c>
 8013bae:	8afb      	ldrh	r3, [r7, #22]
 8013bb0:	2b11      	cmp	r3, #17
 8013bb2:	d11a      	bne.n	8013bea <Update_Detail+0x892>
        {
          Draw_Circle_D(INV, S_X[TR_MODE]-3, TITLE_Y_POS, 11, 0, 6*8);
 8013bb4:	23dd      	movs	r3, #221	; 0xdd
 8013bb6:	b29b      	uxth	r3, r3
 8013bb8:	3b03      	subs	r3, #3
 8013bba:	b29b      	uxth	r3, r3
 8013bbc:	b219      	sxth	r1, r3
 8013bbe:	2330      	movs	r3, #48	; 0x30
 8013bc0:	9301      	str	r3, [sp, #4]
 8013bc2:	2300      	movs	r3, #0
 8013bc4:	9300      	str	r3, [sp, #0]
 8013bc6:	230b      	movs	r3, #11
 8013bc8:	22e1      	movs	r2, #225	; 0xe1
 8013bca:	2001      	movs	r0, #1
 8013bcc:	f7fa f982 	bl	800ded4 <Draw_Circle_D>
          DispStr10x14(S_X[TR_MODE], TITLE_Y_POS, INV+SYMB,(List[TR_MODE].Val?("D"):("C")));
 8013bd0:	20dd      	movs	r0, #221	; 0xdd
 8013bd2:	4b13      	ldr	r3, [pc, #76]	; (8013c20 <Update_Detail+0x8c8>)
 8013bd4:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d001      	beq.n	8013be0 <Update_Detail+0x888>
 8013bdc:	4b18      	ldr	r3, [pc, #96]	; (8013c40 <Update_Detail+0x8e8>)
 8013bde:	e000      	b.n	8013be2 <Update_Detail+0x88a>
 8013be0:	4b18      	ldr	r3, [pc, #96]	; (8013c44 <Update_Detail+0x8ec>)
 8013be2:	2211      	movs	r2, #17
 8013be4:	21e1      	movs	r1, #225	; 0xe1
 8013be6:	f7fa fb07 	bl	800e1f8 <DispStr10x14>
        }
        if(i == FITTRIGG)
 8013bea:	8afb      	ldrh	r3, [r7, #22]
 8013bec:	2b0f      	cmp	r3, #15
 8013bee:	d134      	bne.n	8013c5a <Update_Detail+0x902>
        {
          DispStr10x14(S_X[FITTRIGG], TITLE_Y_POS, PRN+SYMB,(List[FITTRIGG].Val?("F"):("B")));
 8013bf0:	20cf      	movs	r0, #207	; 0xcf
 8013bf2:	4b0b      	ldr	r3, [pc, #44]	; (8013c20 <Update_Detail+0x8c8>)
 8013bf4:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d001      	beq.n	8013c00 <Update_Detail+0x8a8>
 8013bfc:	4b12      	ldr	r3, [pc, #72]	; (8013c48 <Update_Detail+0x8f0>)
 8013bfe:	e000      	b.n	8013c02 <Update_Detail+0x8aa>
 8013c00:	4b12      	ldr	r3, [pc, #72]	; (8013c4c <Update_Detail+0x8f4>)
 8013c02:	2210      	movs	r2, #16
 8013c04:	21e1      	movs	r1, #225	; 0xe1
 8013c06:	f7fa faf7 	bl	800e1f8 <DispStr10x14>
          if(List[FITTRIGG].Val)KEYTIME = 300;
 8013c0a:	4b05      	ldr	r3, [pc, #20]	; (8013c20 <Update_Detail+0x8c8>)
 8013c0c:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d01f      	beq.n	8013c54 <Update_Detail+0x8fc>
 8013c14:	4b0e      	ldr	r3, [pc, #56]	; (8013c50 <Update_Detail+0x8f8>)
 8013c16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8013c1a:	801a      	strh	r2, [r3, #0]
 8013c1c:	e01d      	b.n	8013c5a <Update_Detail+0x902>
 8013c1e:	bf00      	nop
 8013c20:	20000298 	.word	0x20000298
 8013c24:	08002338 	.word	0x08002338
 8013c28:	20006bd0 	.word	0x20006bd0
 8013c2c:	08001d90 	.word	0x08001d90
 8013c30:	0800215c 	.word	0x0800215c
 8013c34:	08001c88 	.word	0x08001c88
 8013c38:	08001cac 	.word	0x08001cac
 8013c3c:	20000140 	.word	0x20000140
 8013c40:	08000988 	.word	0x08000988
 8013c44:	0800098c 	.word	0x0800098c
 8013c48:	0800099c 	.word	0x0800099c
 8013c4c:	0800095c 	.word	0x0800095c
 8013c50:	2000077e 	.word	0x2000077e
          else KEYTIME = 0;
 8013c54:	4bac      	ldr	r3, [pc, #688]	; (8013f08 <Update_Detail+0xbb0>)
 8013c56:	2200      	movs	r2, #0
 8013c58:	801a      	strh	r2, [r3, #0]
        }
        ParamTab[VTx2]= ParamTab[P1x2]+2*List[THRESHOLD].Val;
 8013c5a:	4bac      	ldr	r3, [pc, #688]	; (8013f0c <Update_Detail+0xbb4>)
 8013c5c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8013c60:	b29a      	uxth	r2, r3
 8013c62:	4bab      	ldr	r3, [pc, #684]	; (8013f10 <Update_Detail+0xbb8>)
 8013c64:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8013c68:	b29b      	uxth	r3, r3
 8013c6a:	005b      	lsls	r3, r3, #1
 8013c6c:	b29b      	uxth	r3, r3
 8013c6e:	4413      	add	r3, r2
 8013c70:	b29b      	uxth	r3, r3
 8013c72:	b21a      	sxth	r2, r3
 8013c74:	4ba5      	ldr	r3, [pc, #660]	; (8013f0c <Update_Detail+0xbb4>)
 8013c76:	839a      	strh	r2, [r3, #28]
        Tmp  = List[SENSITIVE].Val;
 8013c78:	4ba5      	ldr	r3, [pc, #660]	; (8013f10 <Update_Detail+0xbb8>)
 8013c7a:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8013c7e:	613b      	str	r3, [r7, #16]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8013c80:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013c84:	4aa3      	ldr	r2, [pc, #652]	; (8013f14 <Update_Detail+0xbbc>)
 8013c86:	5cd3      	ldrb	r3, [r2, r3]
 8013c88:	461c      	mov	r4, r3
 8013c8a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013c8e:	4aa2      	ldr	r2, [pc, #648]	; (8013f18 <Update_Detail+0xbc0>)
 8013c90:	5cd3      	ldrb	r3, [r2, r3]
 8013c92:	4618      	mov	r0, r3
 8013c94:	f7fe f81c 	bl	8011cd0 <Exp>
 8013c98:	4603      	mov	r3, r0
 8013c9a:	fb03 f204 	mul.w	r2, r3, r4
 8013c9e:	693b      	ldr	r3, [r7, #16]
 8013ca0:	fb02 f303 	mul.w	r3, r2, r3
 8013ca4:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp, V[0], 2, UNSIGN);
 8013ca6:	2301      	movs	r3, #1
 8013ca8:	9300      	str	r3, [sp, #0]
 8013caa:	2302      	movs	r3, #2
 8013cac:	4a9b      	ldr	r2, [pc, #620]	; (8013f1c <Update_Detail+0xbc4>)
 8013cae:	6939      	ldr	r1, [r7, #16]
 8013cb0:	489b      	ldr	r0, [pc, #620]	; (8013f20 <Update_Detail+0xbc8>)
 8013cb2:	f7fd ff11 	bl	8011ad8 <Value2Str>
        DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, INV+SYMB,"E");
 8013cb6:	20e7      	movs	r0, #231	; 0xe7
 8013cb8:	4b9a      	ldr	r3, [pc, #616]	; (8013f24 <Update_Detail+0xbcc>)
 8013cba:	2211      	movs	r2, #17
 8013cbc:	21e1      	movs	r1, #225	; 0xe1
 8013cbe:	f7fa fa9b 	bl	800e1f8 <DispStr10x14>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  "     ");
 8013cc2:	23e7      	movs	r3, #231	; 0xe7
 8013cc4:	b29b      	uxth	r3, r3
 8013cc6:	3309      	adds	r3, #9
 8013cc8:	b29b      	uxth	r3, r3
 8013cca:	b218      	sxth	r0, r3
 8013ccc:	4b96      	ldr	r3, [pc, #600]	; (8013f28 <Update_Detail+0xbd0>)
 8013cce:	2201      	movs	r2, #1
 8013cd0:	21e1      	movs	r1, #225	; 0xe1
 8013cd2:	f7fa f829 	bl	800dd28 <DispStr>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  (char *)NumStr);
 8013cd6:	23e7      	movs	r3, #231	; 0xe7
 8013cd8:	b29b      	uxth	r3, r3
 8013cda:	3309      	adds	r3, #9
 8013cdc:	b29b      	uxth	r3, r3
 8013cde:	b218      	sxth	r0, r3
 8013ce0:	4b8f      	ldr	r3, [pc, #572]	; (8013f20 <Update_Detail+0xbc8>)
 8013ce2:	2201      	movs	r2, #1
 8013ce4:	21e1      	movs	r1, #225	; 0xe1
 8013ce6:	f7fa f81f 	bl	800dd28 <DispStr>
        ParamTab[VTF]=(List[TR_TYPE].Val)? L_HID : SHOW;
 8013cea:	4b89      	ldr	r3, [pc, #548]	; (8013f10 <Update_Detail+0xbb8>)
 8013cec:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d001      	beq.n	8013cf8 <Update_Detail+0x9a0>
 8013cf4:	2202      	movs	r2, #2
 8013cf6:	e000      	b.n	8013cfa <Update_Detail+0x9a2>
 8013cf8:	2200      	movs	r2, #0
 8013cfa:	4b84      	ldr	r3, [pc, #528]	; (8013f0c <Update_Detail+0xbb4>)
 8013cfc:	811a      	strh	r2, [r3, #8]
        break;
 8013cfe:	e2dc      	b.n	80142ba <Update_Detail+0xf62>
      case VIEWPOSI:  // ˢ����ʾˮƽ�Ӵ�λ��
      case SMPL_DPTH: // ˢ����ʾ�������
      case T1_POSI:   // ˢ����ʾ����α�λ��
      case T2_POSI:   // ˢ����ʾ�Ҷ��α�λ��
      case XN_TYPE:   // ˢ����ʾ�α���ʽ
        SetColor(GRY, TCOLOR[XN]);
 8013d00:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8013d04:	4619      	mov	r1, r3
 8013d06:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013d0a:	f7f9 fff5 	bl	800dcf8 <SetColor>
        if(i == TIM_BASE)
 8013d0e:	8afb      	ldrh	r3, [r7, #22]
 8013d10:	2b07      	cmp	r3, #7
 8013d12:	d11e      	bne.n	8013d52 <Update_Detail+0x9fa>
        {
          Draw_Circle_D(INV, S_X[i]-3, TITLE_Y_POS, 11, 2, 6*5);
 8013d14:	8afb      	ldrh	r3, [r7, #22]
 8013d16:	4a85      	ldr	r2, [pc, #532]	; (8013f2c <Update_Detail+0xbd4>)
 8013d18:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013d1c:	b29b      	uxth	r3, r3
 8013d1e:	3b03      	subs	r3, #3
 8013d20:	b29b      	uxth	r3, r3
 8013d22:	b219      	sxth	r1, r3
 8013d24:	231e      	movs	r3, #30
 8013d26:	9301      	str	r3, [sp, #4]
 8013d28:	2302      	movs	r3, #2
 8013d2a:	9300      	str	r3, [sp, #0]
 8013d2c:	230b      	movs	r3, #11
 8013d2e:	22e1      	movs	r2, #225	; 0xe1
 8013d30:	2001      	movs	r0, #1
 8013d32:	f7fa f8cf 	bl	800ded4 <Draw_Circle_D>
          DispStr(S_X[i], TITLE_Y_POS, INV, TimeBase_Str[List[TIM_BASE].Val]);
 8013d36:	8afb      	ldrh	r3, [r7, #22]
 8013d38:	4a7c      	ldr	r2, [pc, #496]	; (8013f2c <Update_Detail+0xbd4>)
 8013d3a:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8013d3e:	4b74      	ldr	r3, [pc, #464]	; (8013f10 <Update_Detail+0xbb8>)
 8013d40:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013d44:	00db      	lsls	r3, r3, #3
 8013d46:	4a7a      	ldr	r2, [pc, #488]	; (8013f30 <Update_Detail+0xbd8>)
 8013d48:	4413      	add	r3, r2
 8013d4a:	2201      	movs	r2, #1
 8013d4c:	21e1      	movs	r1, #225	; 0xe1
 8013d4e:	f7f9 ffeb 	bl	800dd28 <DispStr>
        }
        if(i == SMPL_DPTH){
 8013d52:	8afb      	ldrh	r3, [r7, #22]
 8013d54:	2b09      	cmp	r3, #9
 8013d56:	d126      	bne.n	8013da6 <Update_Detail+0xa4e>
          Draw_Circle_D(INV, S_X[SMPL_DPTH]-3, LABLE_Y, 11, 0, 6*11);
 8013d58:	23f8      	movs	r3, #248	; 0xf8
 8013d5a:	b29b      	uxth	r3, r3
 8013d5c:	3b03      	subs	r3, #3
 8013d5e:	b29b      	uxth	r3, r3
 8013d60:	b219      	sxth	r1, r3
 8013d62:	2342      	movs	r3, #66	; 0x42
 8013d64:	9301      	str	r3, [sp, #4]
 8013d66:	2300      	movs	r3, #0
 8013d68:	9300      	str	r3, [sp, #0]
 8013d6a:	230b      	movs	r3, #11
 8013d6c:	2203      	movs	r2, #3
 8013d6e:	2001      	movs	r0, #1
 8013d70:	f7fa f8b0 	bl	800ded4 <Draw_Circle_D>
          DispStr(S_X[SMPL_DPTH],    LABLE_Y,  INV, "SmplDpth:  ");
 8013d74:	20f8      	movs	r0, #248	; 0xf8
 8013d76:	4b6f      	ldr	r3, [pc, #444]	; (8013f34 <Update_Detail+0xbdc>)
 8013d78:	2201      	movs	r2, #1
 8013d7a:	2103      	movs	r1, #3
 8013d7c:	f7f9 ffd4 	bl	800dd28 <DispStr>
          DispStr(S_X[SMPL_DPTH]+6*9, LABLE_Y,  INV, (char *)&D[List[SMPL_DPTH].Val]);
 8013d80:	23f8      	movs	r3, #248	; 0xf8
 8013d82:	b29b      	uxth	r3, r3
 8013d84:	3336      	adds	r3, #54	; 0x36
 8013d86:	b29b      	uxth	r3, r3
 8013d88:	b218      	sxth	r0, r3
 8013d8a:	4b61      	ldr	r3, [pc, #388]	; (8013f10 <Update_Detail+0xbb8>)
 8013d8c:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8013d90:	461a      	mov	r2, r3
 8013d92:	4613      	mov	r3, r2
 8013d94:	005b      	lsls	r3, r3, #1
 8013d96:	4413      	add	r3, r2
 8013d98:	005b      	lsls	r3, r3, #1
 8013d9a:	4a67      	ldr	r2, [pc, #412]	; (8013f38 <Update_Detail+0xbe0>)
 8013d9c:	4413      	add	r3, r2
 8013d9e:	2201      	movs	r2, #1
 8013da0:	2103      	movs	r1, #3
 8013da2:	f7f9 ffc1 	bl	800dd28 <DispStr>
        }
        Update_Windows();
 8013da6:	f000 fbad 	bl	8014504 <Update_Windows>

        ParamTab[T0x1] = 2 + Presampling - List[VIEWPOSI].Val;
 8013daa:	4b64      	ldr	r3, [pc, #400]	; (8013f3c <Update_Detail+0xbe4>)
 8013dac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013db0:	b29a      	uxth	r2, r3
 8013db2:	4b57      	ldr	r3, [pc, #348]	; (8013f10 <Update_Detail+0xbb8>)
 8013db4:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8013db8:	b29b      	uxth	r3, r3
 8013dba:	1ad3      	subs	r3, r2, r3
 8013dbc:	b29b      	uxth	r3, r3
 8013dbe:	3302      	adds	r3, #2
 8013dc0:	b29b      	uxth	r3, r3
 8013dc2:	b21a      	sxth	r2, r3
 8013dc4:	4b51      	ldr	r3, [pc, #324]	; (8013f0c <Update_Detail+0xbb4>)
 8013dc6:	845a      	strh	r2, [r3, #34]	; 0x22
        ParamTab[T0F] &= ~D_HID;
 8013dc8:	4b50      	ldr	r3, [pc, #320]	; (8013f0c <Update_Detail+0xbb4>)
 8013dca:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8013dce:	f023 0301 	bic.w	r3, r3, #1
 8013dd2:	b21a      	sxth	r2, r3
 8013dd4:	4b4d      	ldr	r3, [pc, #308]	; (8013f0c <Update_Detail+0xbb4>)
 8013dd6:	81da      	strh	r2, [r3, #14]
        ParamTab[T1F] &= ~D_HID;
 8013dd8:	4b4c      	ldr	r3, [pc, #304]	; (8013f0c <Update_Detail+0xbb4>)
 8013dda:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8013dde:	f023 0301 	bic.w	r3, r3, #1
 8013de2:	b21a      	sxth	r2, r3
 8013de4:	4b49      	ldr	r3, [pc, #292]	; (8013f0c <Update_Detail+0xbb4>)
 8013de6:	821a      	strh	r2, [r3, #16]
        ParamTab[T1F] &= ~D_HID;
 8013de8:	4b48      	ldr	r3, [pc, #288]	; (8013f0c <Update_Detail+0xbb4>)
 8013dea:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8013dee:	f023 0301 	bic.w	r3, r3, #1
 8013df2:	b21a      	sxth	r2, r3
 8013df4:	4b45      	ldr	r3, [pc, #276]	; (8013f0c <Update_Detail+0xbb4>)
 8013df6:	821a      	strh	r2, [r3, #16]
        ParamTab[T1x1] = List[T1_POSI].Val+1;
 8013df8:	4b45      	ldr	r3, [pc, #276]	; (8013f10 <Update_Detail+0xbb8>)
 8013dfa:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8013dfe:	b29b      	uxth	r3, r3
 8013e00:	3301      	adds	r3, #1
 8013e02:	b29b      	uxth	r3, r3
 8013e04:	b21a      	sxth	r2, r3
 8013e06:	4b41      	ldr	r3, [pc, #260]	; (8013f0c <Update_Detail+0xbb4>)
 8013e08:	849a      	strh	r2, [r3, #36]	; 0x24
        ParamTab[T2x1] = List[T2_POSI].Val+1;
 8013e0a:	4b41      	ldr	r3, [pc, #260]	; (8013f10 <Update_Detail+0xbb8>)
 8013e0c:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 8013e10:	b29b      	uxth	r3, r3
 8013e12:	3301      	adds	r3, #1
 8013e14:	b29b      	uxth	r3, r3
 8013e16:	b21a      	sxth	r2, r3
 8013e18:	4b3c      	ldr	r3, [pc, #240]	; (8013f0c <Update_Detail+0xbb4>)
 8013e1a:	84da      	strh	r2, [r3, #38]	; 0x26
        ParamTab[T1F]  = (List[XN_TYPE].Val)? L_HID : SHOW;
 8013e1c:	4b3c      	ldr	r3, [pc, #240]	; (8013f10 <Update_Detail+0xbb8>)
 8013e1e:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d001      	beq.n	8013e2a <Update_Detail+0xad2>
 8013e26:	2202      	movs	r2, #2
 8013e28:	e000      	b.n	8013e2c <Update_Detail+0xad4>
 8013e2a:	2200      	movs	r2, #0
 8013e2c:	4b37      	ldr	r3, [pc, #220]	; (8013f0c <Update_Detail+0xbb4>)
 8013e2e:	821a      	strh	r2, [r3, #16]
        ParamTab[T2F]  = (List[XN_TYPE].Val)? L_HID : SHOW;
 8013e30:	4b37      	ldr	r3, [pc, #220]	; (8013f10 <Update_Detail+0xbb8>)
 8013e32:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d001      	beq.n	8013e3e <Update_Detail+0xae6>
 8013e3a:	2202      	movs	r2, #2
 8013e3c:	e000      	b.n	8013e40 <Update_Detail+0xae8>
 8013e3e:	2200      	movs	r2, #0
 8013e40:	4b32      	ldr	r3, [pc, #200]	; (8013f0c <Update_Detail+0xbb4>)
 8013e42:	825a      	strh	r2, [r3, #18]
        Tmp  = ParamTab[T2x1] - ParamTab[T1x1];
 8013e44:	4b31      	ldr	r3, [pc, #196]	; (8013f0c <Update_Detail+0xbb4>)
 8013e46:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8013e4a:	461a      	mov	r2, r3
 8013e4c:	4b2f      	ldr	r3, [pc, #188]	; (8013f0c <Update_Detail+0xbb4>)
 8013e4e:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8013e52:	1ad3      	subs	r3, r2, r3
 8013e54:	613b      	str	r3, [r7, #16]
        Tmp *= B_SCALE[List[TIM_BASE].Val]* Exp(T_SCALE[List[TIM_BASE].Val]);
 8013e56:	4b2e      	ldr	r3, [pc, #184]	; (8013f10 <Update_Detail+0xbb8>)
 8013e58:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013e5c:	461a      	mov	r2, r3
 8013e5e:	4b38      	ldr	r3, [pc, #224]	; (8013f40 <Update_Detail+0xbe8>)
 8013e60:	5c9b      	ldrb	r3, [r3, r2]
 8013e62:	461c      	mov	r4, r3
 8013e64:	4b2a      	ldr	r3, [pc, #168]	; (8013f10 <Update_Detail+0xbb8>)
 8013e66:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013e6a:	461a      	mov	r2, r3
 8013e6c:	4b35      	ldr	r3, [pc, #212]	; (8013f44 <Update_Detail+0xbec>)
 8013e6e:	5c9b      	ldrb	r3, [r3, r2]
 8013e70:	4618      	mov	r0, r3
 8013e72:	f7fd ff2d 	bl	8011cd0 <Exp>
 8013e76:	4603      	mov	r3, r0
 8013e78:	fb03 f204 	mul.w	r2, r3, r4
 8013e7c:	693b      	ldr	r3, [r7, #16]
 8013e7e:	fb02 f303 	mul.w	r3, r2, r3
 8013e82:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp, T[0], 3, UNSIGN);
 8013e84:	2301      	movs	r3, #1
 8013e86:	9300      	str	r3, [sp, #0]
 8013e88:	2303      	movs	r3, #3
 8013e8a:	4a2f      	ldr	r2, [pc, #188]	; (8013f48 <Update_Detail+0xbf0>)
 8013e8c:	6939      	ldr	r1, [r7, #16]
 8013e8e:	4824      	ldr	r0, [pc, #144]	; (8013f20 <Update_Detail+0xbc8>)
 8013e90:	f7fd fe22 	bl	8011ad8 <Value2Str>
        Draw_Circle_D(INV, S_X[V1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 8013e94:	2307      	movs	r3, #7
 8013e96:	b29b      	uxth	r3, r3
 8013e98:	3b03      	subs	r3, #3
 8013e9a:	b29b      	uxth	r3, r3
 8013e9c:	b219      	sxth	r1, r3
 8013e9e:	2336      	movs	r3, #54	; 0x36
 8013ea0:	9301      	str	r3, [sp, #4]
 8013ea2:	2300      	movs	r3, #0
 8013ea4:	9300      	str	r3, [sp, #0]
 8013ea6:	230b      	movs	r3, #11
 8013ea8:	2203      	movs	r2, #3
 8013eaa:	2001      	movs	r0, #1
 8013eac:	f7fa f812 	bl	800ded4 <Draw_Circle_D>
        DispStr(S_X[T1_POSI]+0*6, LABLE_Y, INV+SYMB, "]");
 8013eb0:	2007      	movs	r0, #7
 8013eb2:	4b26      	ldr	r3, [pc, #152]	; (8013f4c <Update_Detail+0xbf4>)
 8013eb4:	2211      	movs	r2, #17
 8013eb6:	2103      	movs	r1, #3
 8013eb8:	f7f9 ff36 	bl	800dd28 <DispStr>
        DispStr(S_X[T1_POSI]+1*6, LABLE_Y, INV,      "T:      ");
 8013ebc:	2307      	movs	r3, #7
 8013ebe:	b29b      	uxth	r3, r3
 8013ec0:	3306      	adds	r3, #6
 8013ec2:	b29b      	uxth	r3, r3
 8013ec4:	b218      	sxth	r0, r3
 8013ec6:	4b22      	ldr	r3, [pc, #136]	; (8013f50 <Update_Detail+0xbf8>)
 8013ec8:	2201      	movs	r2, #1
 8013eca:	2103      	movs	r1, #3
 8013ecc:	f7f9 ff2c 	bl	800dd28 <DispStr>
        DispStr(S_X[T1_POSI]+7*6, LABLE_Y, INV,  "  ");
 8013ed0:	2307      	movs	r3, #7
 8013ed2:	b29b      	uxth	r3, r3
 8013ed4:	332a      	adds	r3, #42	; 0x2a
 8013ed6:	b29b      	uxth	r3, r3
 8013ed8:	b218      	sxth	r0, r3
 8013eda:	4b1e      	ldr	r3, [pc, #120]	; (8013f54 <Update_Detail+0xbfc>)
 8013edc:	2201      	movs	r2, #1
 8013ede:	2103      	movs	r1, #3
 8013ee0:	f7f9 ff22 	bl	800dd28 <DispStr>
        DispStr(S_X[T1_POSI]+3*6, LABLE_Y, INV,  (char *)NumStr);
 8013ee4:	2307      	movs	r3, #7
 8013ee6:	b29b      	uxth	r3, r3
 8013ee8:	3312      	adds	r3, #18
 8013eea:	b29b      	uxth	r3, r3
 8013eec:	b218      	sxth	r0, r3
 8013eee:	4b0c      	ldr	r3, [pc, #48]	; (8013f20 <Update_Detail+0xbc8>)
 8013ef0:	2201      	movs	r2, #1
 8013ef2:	2103      	movs	r1, #3
 8013ef4:	f7f9 ff18 	bl	800dd28 <DispStr>
        Set_Base(List[TIM_BASE].Val);          // Ӳ������ɨ��ʱ����λ
 8013ef8:	4b05      	ldr	r3, [pc, #20]	; (8013f10 <Update_Detail+0xbb8>)
 8013efa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013efe:	4618      	mov	r0, r3
 8013f00:	f7f8 fbb4 	bl	800c66c <Set_Base>
      break;
 8013f04:	e1d9      	b.n	80142ba <Update_Detail+0xf62>
 8013f06:	bf00      	nop
 8013f08:	2000077e 	.word	0x2000077e
 8013f0c:	20000140 	.word	0x20000140
 8013f10:	20000298 	.word	0x20000298
 8013f14:	08002130 	.word	0x08002130
 8013f18:	08002108 	.word	0x08002108
 8013f1c:	08001d00 	.word	0x08001d00
 8013f20:	2000283c 	.word	0x2000283c
 8013f24:	08000998 	.word	0x08000998
 8013f28:	08000990 	.word	0x08000990
 8013f2c:	0800215c 	.word	0x0800215c
 8013f30:	200001d0 	.word	0x200001d0
 8013f34:	08000970 	.word	0x08000970
 8013f38:	08001c4c 	.word	0x08001c4c
 8013f3c:	2000055a 	.word	0x2000055a
 8013f40:	0800211c 	.word	0x0800211c
 8013f44:	080020f4 	.word	0x080020f4
 8013f48:	08001ce8 	.word	0x08001ce8
 8013f4c:	08000960 	.word	0x08000960
 8013f50:	0800097c 	.word	0x0800097c
 8013f54:	080009d0 	.word	0x080009d0

      case FREQUENC://��ʾƵ��
        FTmp=Edge*25*1000/2;
 8013f58:	4bb7      	ldr	r3, [pc, #732]	; (8014238 <Update_Detail+0xee0>)
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	f243 02d4 	movw	r2, #12500	; 0x30d4
 8013f60:	fb02 f303 	mul.w	r3, r2, r3
 8013f64:	60fb      	str	r3, [r7, #12]
        if(List[TIM_BASE].Val<9)FTmp= FTmp*1000000;
 8013f66:	4bb5      	ldr	r3, [pc, #724]	; (801423c <Update_Detail+0xee4>)
 8013f68:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013f6c:	2b08      	cmp	r3, #8
 8013f6e:	dc05      	bgt.n	8013f7c <Update_Detail+0xc24>
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	4ab3      	ldr	r2, [pc, #716]	; (8014240 <Update_Detail+0xee8>)
 8013f74:	fb02 f303 	mul.w	r3, r2, r3
 8013f78:	60fb      	str	r3, [r7, #12]
 8013f7a:	e00a      	b.n	8013f92 <Update_Detail+0xc3a>
        else if(List[TIM_BASE].Val<18)FTmp= FTmp*1000;
 8013f7c:	4baf      	ldr	r3, [pc, #700]	; (801423c <Update_Detail+0xee4>)
 8013f7e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013f82:	2b11      	cmp	r3, #17
 8013f84:	dc05      	bgt.n	8013f92 <Update_Detail+0xc3a>
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013f8c:	fb02 f303 	mul.w	r3, r2, r3
 8013f90:	60fb      	str	r3, [r7, #12]
        FTmp=FTmp/Ts[List[TIM_BASE].Val]/DEPTH[List[SMPL_DPTH].Val];
 8013f92:	4baa      	ldr	r3, [pc, #680]	; (801423c <Update_Detail+0xee4>)
 8013f94:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013f98:	461a      	mov	r2, r3
 8013f9a:	4baa      	ldr	r3, [pc, #680]	; (8014244 <Update_Detail+0xeec>)
 8013f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013fa0:	461a      	mov	r2, r3
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	fbb3 f3f2 	udiv	r3, r3, r2
 8013fa8:	4aa4      	ldr	r2, [pc, #656]	; (801423c <Update_Detail+0xee4>)
 8013faa:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 8013fae:	4611      	mov	r1, r2
 8013fb0:	4aa5      	ldr	r2, [pc, #660]	; (8014248 <Update_Detail+0xef0>)
 8013fb2:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8013fb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8013fba:	60fb      	str	r3, [r7, #12]
          DispMeter(i, 1, UNSIGN,FTmp);
 8013fbc:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	2201      	movs	r2, #1
 8013fc4:	2101      	movs	r1, #1
 8013fc6:	f000 f9d3 	bl	8014370 <DispMeter>
      break;
 8013fca:	e176      	b.n	80142ba <Update_Detail+0xf62>

      case DUTY:    //��ʾռ�ձ�
         DispMeter(i, k, UNSIGN,(HighT*100)/k);
 8013fcc:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8013fd0:	887b      	ldrh	r3, [r7, #2]
 8013fd2:	b2d9      	uxtb	r1, r3
 8013fd4:	4b9d      	ldr	r3, [pc, #628]	; (801424c <Update_Detail+0xef4>)
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	2264      	movs	r2, #100	; 0x64
 8013fda:	fb02 f203 	mul.w	r2, r2, r3
 8013fde:	887b      	ldrh	r3, [r7, #2]
 8013fe0:	fb92 f3f3 	sdiv	r3, r2, r3
 8013fe4:	2201      	movs	r2, #1
 8013fe6:	f000 f9c3 	bl	8014370 <DispMeter>
        break;
 8013fea:	e166      	b.n	80142ba <Update_Detail+0xf62>

      case VRMS://��ʾ��ѹ��Чֵ
        if(abs(Vrms)<4)
 8013fec:	4b98      	ldr	r3, [pc, #608]	; (8014250 <Update_Detail+0xef8>)
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	f113 0f03 	cmn.w	r3, #3
 8013ff4:	db06      	blt.n	8014004 <Update_Detail+0xcac>
 8013ff6:	4b96      	ldr	r3, [pc, #600]	; (8014250 <Update_Detail+0xef8>)
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	2b03      	cmp	r3, #3
 8013ffc:	dc02      	bgt.n	8014004 <Update_Detail+0xcac>
        {
          Tmp = 0.00;
 8013ffe:	2300      	movs	r3, #0
 8014000:	613b      	str	r3, [r7, #16]
 8014002:	e026      	b.n	8014052 <Update_Detail+0xcfa>
        }else{
		  scale = (List[PROBEATT].Val?
 8014004:	4b8d      	ldr	r3, [pc, #564]	; (801423c <Update_Detail+0xee4>)
 8014006:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 801400a:	2b00      	cmp	r3, #0
 801400c:	d00b      	beq.n	8014026 <Update_Detail+0xcce>
 801400e:	4b8b      	ldr	r3, [pc, #556]	; (801423c <Update_Detail+0xee4>)
 8014010:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014014:	461a      	mov	r2, r3
 8014016:	4b8f      	ldr	r3, [pc, #572]	; (8014254 <Update_Detail+0xefc>)
 8014018:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801401c:	4613      	mov	r3, r2
 801401e:	009b      	lsls	r3, r3, #2
 8014020:	4413      	add	r3, r2
 8014022:	00db      	lsls	r3, r3, #3
 8014024:	e00a      	b.n	801403c <Update_Detail+0xce4>
 8014026:	4b85      	ldr	r3, [pc, #532]	; (801423c <Update_Detail+0xee4>)
 8014028:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801402c:	461a      	mov	r2, r3
 801402e:	4b8a      	ldr	r3, [pc, #552]	; (8014258 <Update_Detail+0xf00>)
 8014030:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014034:	4613      	mov	r3, r2
 8014036:	009b      	lsls	r3, r3, #2
 8014038:	4413      	add	r3, r2
 801403a:	00db      	lsls	r3, r3, #3
		  scale = (List[PROBEATT].Val?
 801403c:	60bb      	str	r3, [r7, #8]
	          Tmp  = ((((Vrms)*Ak)>>12))*scale;
 801403e:	4b84      	ldr	r3, [pc, #528]	; (8014250 <Update_Detail+0xef8>)
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	687a      	ldr	r2, [r7, #4]
 8014044:	fb02 f303 	mul.w	r3, r2, r3
 8014048:	131a      	asrs	r2, r3, #12
 801404a:	68bb      	ldr	r3, [r7, #8]
 801404c:	fb02 f303 	mul.w	r3, r2, r3
 8014050:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 8014052:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8014056:	693b      	ldr	r3, [r7, #16]
 8014058:	2201      	movs	r2, #1
 801405a:	2101      	movs	r1, #1
 801405c:	f000 f988 	bl	8014370 <DispMeter>
        break;
 8014060:	e12b      	b.n	80142ba <Update_Detail+0xf62>

      case VP_P://��ʾ��ѹ���ֵ
        if(abs(Vpp)<7){
 8014062:	4b7e      	ldr	r3, [pc, #504]	; (801425c <Update_Detail+0xf04>)
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	f113 0f06 	cmn.w	r3, #6
 801406a:	db06      	blt.n	801407a <Update_Detail+0xd22>
 801406c:	4b7b      	ldr	r3, [pc, #492]	; (801425c <Update_Detail+0xf04>)
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	2b06      	cmp	r3, #6
 8014072:	dc02      	bgt.n	801407a <Update_Detail+0xd22>
          Tmp = 0.00;
 8014074:	2300      	movs	r3, #0
 8014076:	613b      	str	r3, [r7, #16]
 8014078:	e033      	b.n	80140e2 <Update_Detail+0xd8a>
        }
        else
        {
           scale = (List[PROBEATT].Val?
 801407a:	4b70      	ldr	r3, [pc, #448]	; (801423c <Update_Detail+0xee4>)
 801407c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 8014080:	2b00      	cmp	r3, #0
 8014082:	d00b      	beq.n	801409c <Update_Detail+0xd44>
 8014084:	4b6d      	ldr	r3, [pc, #436]	; (801423c <Update_Detail+0xee4>)
 8014086:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801408a:	461a      	mov	r2, r3
 801408c:	4b71      	ldr	r3, [pc, #452]	; (8014254 <Update_Detail+0xefc>)
 801408e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014092:	4613      	mov	r3, r2
 8014094:	009b      	lsls	r3, r3, #2
 8014096:	4413      	add	r3, r2
 8014098:	00db      	lsls	r3, r3, #3
 801409a:	e00a      	b.n	80140b2 <Update_Detail+0xd5a>
 801409c:	4b67      	ldr	r3, [pc, #412]	; (801423c <Update_Detail+0xee4>)
 801409e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80140a2:	461a      	mov	r2, r3
 80140a4:	4b6c      	ldr	r3, [pc, #432]	; (8014258 <Update_Detail+0xf00>)
 80140a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80140aa:	4613      	mov	r3, r2
 80140ac:	009b      	lsls	r3, r3, #2
 80140ae:	4413      	add	r3, r2
 80140b0:	00db      	lsls	r3, r3, #3
           scale = (List[PROBEATT].Val?
 80140b2:	60bb      	str	r3, [r7, #8]
          Tmp  = ((((Vmax-2048)*(Ak))>>12)-(((Vmin-2048)*(Ak))>>12))*scale;
 80140b4:	4b6a      	ldr	r3, [pc, #424]	; (8014260 <Update_Detail+0xf08>)
 80140b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80140ba:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80140be:	687a      	ldr	r2, [r7, #4]
 80140c0:	fb02 f303 	mul.w	r3, r2, r3
 80140c4:	131a      	asrs	r2, r3, #12
 80140c6:	4b67      	ldr	r3, [pc, #412]	; (8014264 <Update_Detail+0xf0c>)
 80140c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80140cc:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80140d0:	6879      	ldr	r1, [r7, #4]
 80140d2:	fb01 f303 	mul.w	r3, r1, r3
 80140d6:	131b      	asrs	r3, r3, #12
 80140d8:	1ad2      	subs	r2, r2, r3
 80140da:	68bb      	ldr	r3, [r7, #8]
 80140dc:	fb02 f303 	mul.w	r3, r2, r3
 80140e0:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 80140e2:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 80140e6:	693b      	ldr	r3, [r7, #16]
 80140e8:	2201      	movs	r2, #1
 80140ea:	2101      	movs	r1, #1
 80140ec:	f000 f940 	bl	8014370 <DispMeter>
        break;
 80140f0:	e0e3      	b.n	80142ba <Update_Detail+0xf62>

      case VAVG://��ʾ��ѹƽ��ֵ
        if(abs(Vavg)<4)
 80140f2:	4b5d      	ldr	r3, [pc, #372]	; (8014268 <Update_Detail+0xf10>)
 80140f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	bfb8      	it	lt
 80140fc:	425b      	neglt	r3, r3
 80140fe:	b29b      	uxth	r3, r3
 8014100:	2b03      	cmp	r3, #3
 8014102:	d802      	bhi.n	801410a <Update_Detail+0xdb2>
        {
          Tmp = 0.00;
 8014104:	2300      	movs	r3, #0
 8014106:	613b      	str	r3, [r7, #16]
 8014108:	e02e      	b.n	8014168 <Update_Detail+0xe10>
        }else{
          scale = (List[PROBEATT].Val?
 801410a:	4b4c      	ldr	r3, [pc, #304]	; (801423c <Update_Detail+0xee4>)
 801410c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 8014110:	2b00      	cmp	r3, #0
 8014112:	d00b      	beq.n	801412c <Update_Detail+0xdd4>
 8014114:	4b49      	ldr	r3, [pc, #292]	; (801423c <Update_Detail+0xee4>)
 8014116:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801411a:	461a      	mov	r2, r3
 801411c:	4b4d      	ldr	r3, [pc, #308]	; (8014254 <Update_Detail+0xefc>)
 801411e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014122:	4613      	mov	r3, r2
 8014124:	009b      	lsls	r3, r3, #2
 8014126:	4413      	add	r3, r2
 8014128:	00db      	lsls	r3, r3, #3
 801412a:	e00a      	b.n	8014142 <Update_Detail+0xdea>
 801412c:	4b43      	ldr	r3, [pc, #268]	; (801423c <Update_Detail+0xee4>)
 801412e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014132:	461a      	mov	r2, r3
 8014134:	4b48      	ldr	r3, [pc, #288]	; (8014258 <Update_Detail+0xf00>)
 8014136:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801413a:	4613      	mov	r3, r2
 801413c:	009b      	lsls	r3, r3, #2
 801413e:	4413      	add	r3, r2
 8014140:	00db      	lsls	r3, r3, #3
          scale = (List[PROBEATT].Val?
 8014142:	60bb      	str	r3, [r7, #8]
          Tmp = ((((Vavg-2048)*(Ak))>>12)+100-List[V0_POSI].Val)*scale;
 8014144:	4b48      	ldr	r3, [pc, #288]	; (8014268 <Update_Detail+0xf10>)
 8014146:	f9b3 3000 	ldrsh.w	r3, [r3]
 801414a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801414e:	687a      	ldr	r2, [r7, #4]
 8014150:	fb02 f303 	mul.w	r3, r2, r3
 8014154:	131b      	asrs	r3, r3, #12
 8014156:	3364      	adds	r3, #100	; 0x64
 8014158:	4a38      	ldr	r2, [pc, #224]	; (801423c <Update_Detail+0xee4>)
 801415a:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 801415e:	1a9a      	subs	r2, r3, r2
 8014160:	68bb      	ldr	r3, [r7, #8]
 8014162:	fb02 f303 	mul.w	r3, r2, r3
 8014166:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 8014168:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 801416c:	693b      	ldr	r3, [r7, #16]
 801416e:	2201      	movs	r2, #1
 8014170:	2101      	movs	r1, #1
 8014172:	f000 f8fd 	bl	8014370 <DispMeter>
        break;
 8014176:	e0a0      	b.n	80142ba <Update_Detail+0xf62>

      case VMAX://��ʾ��ѹ���ֵ
        if(abs(Vmax)<4){
 8014178:	4b39      	ldr	r3, [pc, #228]	; (8014260 <Update_Detail+0xf08>)
 801417a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801417e:	2b00      	cmp	r3, #0
 8014180:	bfb8      	it	lt
 8014182:	425b      	neglt	r3, r3
 8014184:	b29b      	uxth	r3, r3
 8014186:	2b03      	cmp	r3, #3
 8014188:	d802      	bhi.n	8014190 <Update_Detail+0xe38>
          Tmp = 0.00;
 801418a:	2300      	movs	r3, #0
 801418c:	613b      	str	r3, [r7, #16]
 801418e:	e02e      	b.n	80141ee <Update_Detail+0xe96>
        }else{
		  scale = (List[PROBEATT].Val?
 8014190:	4b2a      	ldr	r3, [pc, #168]	; (801423c <Update_Detail+0xee4>)
 8014192:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 8014196:	2b00      	cmp	r3, #0
 8014198:	d00b      	beq.n	80141b2 <Update_Detail+0xe5a>
 801419a:	4b28      	ldr	r3, [pc, #160]	; (801423c <Update_Detail+0xee4>)
 801419c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80141a0:	461a      	mov	r2, r3
 80141a2:	4b2c      	ldr	r3, [pc, #176]	; (8014254 <Update_Detail+0xefc>)
 80141a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80141a8:	4613      	mov	r3, r2
 80141aa:	009b      	lsls	r3, r3, #2
 80141ac:	4413      	add	r3, r2
 80141ae:	00db      	lsls	r3, r3, #3
 80141b0:	e00a      	b.n	80141c8 <Update_Detail+0xe70>
 80141b2:	4b22      	ldr	r3, [pc, #136]	; (801423c <Update_Detail+0xee4>)
 80141b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80141b8:	461a      	mov	r2, r3
 80141ba:	4b27      	ldr	r3, [pc, #156]	; (8014258 <Update_Detail+0xf00>)
 80141bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80141c0:	4613      	mov	r3, r2
 80141c2:	009b      	lsls	r3, r3, #2
 80141c4:	4413      	add	r3, r2
 80141c6:	00db      	lsls	r3, r3, #3
		  scale = (List[PROBEATT].Val?
 80141c8:	60bb      	str	r3, [r7, #8]
          Tmp  = ((((Vmax-2048)*(Ak))>>12)+100-List[V0_POSI].Val)*scale;
 80141ca:	4b25      	ldr	r3, [pc, #148]	; (8014260 <Update_Detail+0xf08>)
 80141cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80141d0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80141d4:	687a      	ldr	r2, [r7, #4]
 80141d6:	fb02 f303 	mul.w	r3, r2, r3
 80141da:	131b      	asrs	r3, r3, #12
 80141dc:	3364      	adds	r3, #100	; 0x64
 80141de:	4a17      	ldr	r2, [pc, #92]	; (801423c <Update_Detail+0xee4>)
 80141e0:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 80141e4:	1a9a      	subs	r2, r3, r2
 80141e6:	68bb      	ldr	r3, [r7, #8]
 80141e8:	fb02 f303 	mul.w	r3, r2, r3
 80141ec:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 80141ee:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 80141f2:	693b      	ldr	r3, [r7, #16]
 80141f4:	2201      	movs	r2, #1
 80141f6:	2101      	movs	r1, #1
 80141f8:	f000 f8ba 	bl	8014370 <DispMeter>
        break;
 80141fc:	e05d      	b.n	80142ba <Update_Detail+0xf62>

      case VMIN://��ʾ��ѹ��Сֵ
        if(abs(Vmin)<4){
 80141fe:	4b19      	ldr	r3, [pc, #100]	; (8014264 <Update_Detail+0xf0c>)
 8014200:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014204:	2b00      	cmp	r3, #0
 8014206:	bfb8      	it	lt
 8014208:	425b      	neglt	r3, r3
 801420a:	b29b      	uxth	r3, r3
 801420c:	2b03      	cmp	r3, #3
 801420e:	d802      	bhi.n	8014216 <Update_Detail+0xebe>
          Tmp = 0.00;
 8014210:	2300      	movs	r3, #0
 8014212:	613b      	str	r3, [r7, #16]
 8014214:	e048      	b.n	80142a8 <Update_Detail+0xf50>
        }else{
		  scale = (List[PROBEATT].Val?
 8014216:	4b09      	ldr	r3, [pc, #36]	; (801423c <Update_Detail+0xee4>)
 8014218:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                           VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 801421c:	2b00      	cmp	r3, #0
 801421e:	d025      	beq.n	801426c <Update_Detail+0xf14>
 8014220:	4b06      	ldr	r3, [pc, #24]	; (801423c <Update_Detail+0xee4>)
 8014222:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014226:	461a      	mov	r2, r3
 8014228:	4b0a      	ldr	r3, [pc, #40]	; (8014254 <Update_Detail+0xefc>)
 801422a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801422e:	4613      	mov	r3, r2
 8014230:	009b      	lsls	r3, r3, #2
 8014232:	4413      	add	r3, r2
 8014234:	00db      	lsls	r3, r3, #3
 8014236:	e024      	b.n	8014282 <Update_Detail+0xf2a>
 8014238:	20002850 	.word	0x20002850
 801423c:	20000298 	.word	0x20000298
 8014240:	000f4240 	.word	0x000f4240
 8014244:	080022a0 	.word	0x080022a0
 8014248:	08002270 	.word	0x08002270
 801424c:	20006878 	.word	0x20006878
 8014250:	20002864 	.word	0x20002864
 8014254:	20000270 	.word	0x20000270
 8014258:	08001d68 	.word	0x08001d68
 801425c:	20006880 	.word	0x20006880
 8014260:	20002856 	.word	0x20002856
 8014264:	20002868 	.word	0x20002868
 8014268:	20002858 	.word	0x20002858
 801426c:	4b38      	ldr	r3, [pc, #224]	; (8014350 <Update_Detail+0xff8>)
 801426e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014272:	461a      	mov	r2, r3
 8014274:	4b37      	ldr	r3, [pc, #220]	; (8014354 <Update_Detail+0xffc>)
 8014276:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801427a:	4613      	mov	r3, r2
 801427c:	009b      	lsls	r3, r3, #2
 801427e:	4413      	add	r3, r2
 8014280:	00db      	lsls	r3, r3, #3
		  scale = (List[PROBEATT].Val?
 8014282:	60bb      	str	r3, [r7, #8]
                  Tmp  = ((((Vmin-2048)*(Ak))>>12)+100-List[V0_POSI].Val)*scale;
 8014284:	4b34      	ldr	r3, [pc, #208]	; (8014358 <Update_Detail+0x1000>)
 8014286:	f9b3 3000 	ldrsh.w	r3, [r3]
 801428a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801428e:	687a      	ldr	r2, [r7, #4]
 8014290:	fb02 f303 	mul.w	r3, r2, r3
 8014294:	131b      	asrs	r3, r3, #12
 8014296:	3364      	adds	r3, #100	; 0x64
 8014298:	4a2d      	ldr	r2, [pc, #180]	; (8014350 <Update_Detail+0xff8>)
 801429a:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 801429e:	1a9a      	subs	r2, r3, r2
 80142a0:	68bb      	ldr	r3, [r7, #8]
 80142a2:	fb02 f303 	mul.w	r3, r2, r3
 80142a6:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, SIGN, Tmp);
 80142a8:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 80142ac:	693b      	ldr	r3, [r7, #16]
 80142ae:	2200      	movs	r2, #0
 80142b0:	2101      	movs	r1, #1
 80142b2:	f000 f85d 	bl	8014370 <DispMeter>
        break;
 80142b6:	e000      	b.n	80142ba <Update_Detail+0xf62>
        break;
 80142b8:	bf00      	nop

        break;

      }
      /**/
      if(Freq_Flag){
 80142ba:	4b28      	ldr	r3, [pc, #160]	; (801435c <Update_Detail+0x1004>)
 80142bc:	781b      	ldrb	r3, [r3, #0]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d03a      	beq.n	8014338 <Update_Detail+0xfe0>
        Freq_Flag = 0;
 80142c2:	4b26      	ldr	r3, [pc, #152]	; (801435c <Update_Detail+0x1004>)
 80142c4:	2200      	movs	r2, #0
 80142c6:	701a      	strb	r2, [r3, #0]
        FTmp=Edge*25*1000/2;
 80142c8:	4b25      	ldr	r3, [pc, #148]	; (8014360 <Update_Detail+0x1008>)
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	f243 02d4 	movw	r2, #12500	; 0x30d4
 80142d0:	fb02 f303 	mul.w	r3, r2, r3
 80142d4:	60fb      	str	r3, [r7, #12]
        if(List[TIM_BASE].Val<9)FTmp= FTmp*1000000;
 80142d6:	4b1e      	ldr	r3, [pc, #120]	; (8014350 <Update_Detail+0xff8>)
 80142d8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80142dc:	2b08      	cmp	r3, #8
 80142de:	dc05      	bgt.n	80142ec <Update_Detail+0xf94>
 80142e0:	68fb      	ldr	r3, [r7, #12]
 80142e2:	4a20      	ldr	r2, [pc, #128]	; (8014364 <Update_Detail+0x100c>)
 80142e4:	fb02 f303 	mul.w	r3, r2, r3
 80142e8:	60fb      	str	r3, [r7, #12]
 80142ea:	e00a      	b.n	8014302 <Update_Detail+0xfaa>
        else if(List[TIM_BASE].Val<18)FTmp= FTmp*1000;
 80142ec:	4b18      	ldr	r3, [pc, #96]	; (8014350 <Update_Detail+0xff8>)
 80142ee:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80142f2:	2b11      	cmp	r3, #17
 80142f4:	dc05      	bgt.n	8014302 <Update_Detail+0xfaa>
 80142f6:	68fb      	ldr	r3, [r7, #12]
 80142f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80142fc:	fb02 f303 	mul.w	r3, r2, r3
 8014300:	60fb      	str	r3, [r7, #12]
        FTmp=FTmp/Ts[List[TIM_BASE].Val]/DEPTH[List[SMPL_DPTH].Val];
 8014302:	4b13      	ldr	r3, [pc, #76]	; (8014350 <Update_Detail+0xff8>)
 8014304:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014308:	461a      	mov	r2, r3
 801430a:	4b17      	ldr	r3, [pc, #92]	; (8014368 <Update_Detail+0x1010>)
 801430c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014310:	461a      	mov	r2, r3
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	fbb3 f3f2 	udiv	r3, r3, r2
 8014318:	4a0d      	ldr	r2, [pc, #52]	; (8014350 <Update_Detail+0xff8>)
 801431a:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 801431e:	4611      	mov	r1, r2
 8014320:	4a12      	ldr	r2, [pc, #72]	; (801436c <Update_Detail+0x1014>)
 8014322:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8014326:	fbb3 f3f2 	udiv	r3, r3, r2
 801432a:	60fb      	str	r3, [r7, #12]
        DispFreq(    1, UNSIGN,FTmp);
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	461a      	mov	r2, r3
 8014330:	2101      	movs	r1, #1
 8014332:	2001      	movs	r0, #1
 8014334:	f000 fa08 	bl	8014748 <DispFreq>
  for(i=Y_RANGES; i<=STANDBY; i++){
 8014338:	8afb      	ldrh	r3, [r7, #22]
 801433a:	3301      	adds	r3, #1
 801433c:	82fb      	strh	r3, [r7, #22]
 801433e:	8afb      	ldrh	r3, [r7, #22]
 8014340:	2b29      	cmp	r3, #41	; 0x29
 8014342:	f67f a849 	bls.w	80133d8 <Update_Detail+0x80>
      }
    }
  }

}
 8014346:	bf00      	nop
 8014348:	bf00      	nop
 801434a:	371c      	adds	r7, #28
 801434c:	46bd      	mov	sp, r7
 801434e:	bd90      	pop	{r4, r7, pc}
 8014350:	20000298 	.word	0x20000298
 8014354:	08001d68 	.word	0x08001d68
 8014358:	20002868 	.word	0x20002868
 801435c:	200001cc 	.word	0x200001cc
 8014360:	20002850 	.word	0x20002850
 8014364:	000f4240 	.word	0x000f4240
 8014368:	080022a0 	.word	0x080022a0
 801436c:	08002270 	.word	0x08002270

08014370 <DispMeter>:
/*******************************************************************************

*******************************************************************************/
void DispMeter(short Item, char St, char Mode, int Val)
{
 8014370:	b580      	push	{r7, lr}
 8014372:	b084      	sub	sp, #16
 8014374:	af02      	add	r7, sp, #8
 8014376:	603b      	str	r3, [r7, #0]
 8014378:	4603      	mov	r3, r0
 801437a:	80fb      	strh	r3, [r7, #6]
 801437c:	460b      	mov	r3, r1
 801437e:	717b      	strb	r3, [r7, #5]
 8014380:	4613      	mov	r3, r2
 8014382:	713b      	strb	r3, [r7, #4]
  SetColor(GRY, TCOLOR[ME]);
 8014384:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014388:	4619      	mov	r1, r3
 801438a:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801438e:	f7f9 fcb3 	bl	800dcf8 <SetColor>

  Draw_Circle_D(INV, S_X[Item]-3, LABLE_Y, 11, 0, 6*12);
 8014392:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014396:	4a30      	ldr	r2, [pc, #192]	; (8014458 <DispMeter+0xe8>)
 8014398:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801439c:	b29b      	uxth	r3, r3
 801439e:	3b03      	subs	r3, #3
 80143a0:	b29b      	uxth	r3, r3
 80143a2:	b219      	sxth	r1, r3
 80143a4:	2348      	movs	r3, #72	; 0x48
 80143a6:	9301      	str	r3, [sp, #4]
 80143a8:	2300      	movs	r3, #0
 80143aa:	9300      	str	r3, [sp, #0]
 80143ac:	230b      	movs	r3, #11
 80143ae:	2203      	movs	r2, #3
 80143b0:	2001      	movs	r0, #1
 80143b2:	f7f9 fd8f 	bl	800ded4 <Draw_Circle_D>
  DispStr(S_X[Item], LABLE_Y, INV, (char *)&Z[Item-FREQUENC]);// ��ʾ������Ŀ����
 80143b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80143ba:	4a27      	ldr	r2, [pc, #156]	; (8014458 <DispMeter+0xe8>)
 80143bc:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 80143c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80143c4:	f1a3 0213 	sub.w	r2, r3, #19
 80143c8:	4613      	mov	r3, r2
 80143ca:	005b      	lsls	r3, r3, #1
 80143cc:	4413      	add	r3, r2
 80143ce:	005b      	lsls	r3, r3, #1
 80143d0:	4a22      	ldr	r2, [pc, #136]	; (801445c <DispMeter+0xec>)
 80143d2:	4413      	add	r3, r2
 80143d4:	2201      	movs	r2, #1
 80143d6:	2103      	movs	r1, #3
 80143d8:	f7f9 fca6 	bl	800dd28 <DispStr>
  Value2Str(NumStr, Val, List[Item].PTR, 3, Mode);
 80143dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80143e0:	4a1f      	ldr	r2, [pc, #124]	; (8014460 <DispMeter+0xf0>)
 80143e2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80143e6:	793b      	ldrb	r3, [r7, #4]
 80143e8:	9300      	str	r3, [sp, #0]
 80143ea:	2303      	movs	r3, #3
 80143ec:	6839      	ldr	r1, [r7, #0]
 80143ee:	481d      	ldr	r0, [pc, #116]	; (8014464 <DispMeter+0xf4>)
 80143f0:	f7fd fb72 	bl	8011ad8 <Value2Str>

  if(St)
 80143f4:	797b      	ldrb	r3, [r7, #5]
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d01c      	beq.n	8014434 <DispMeter+0xc4>
  {
    DispStr(S_X[Item]+24, LABLE_Y, INV, ":       ");
 80143fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80143fe:	4a16      	ldr	r2, [pc, #88]	; (8014458 <DispMeter+0xe8>)
 8014400:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8014404:	b29b      	uxth	r3, r3
 8014406:	3318      	adds	r3, #24
 8014408:	b29b      	uxth	r3, r3
 801440a:	b218      	sxth	r0, r3
 801440c:	4b16      	ldr	r3, [pc, #88]	; (8014468 <DispMeter+0xf8>)
 801440e:	2201      	movs	r2, #1
 8014410:	2103      	movs	r1, #3
 8014412:	f7f9 fc89 	bl	800dd28 <DispStr>
    DispStr(S_X[Item]+30, LABLE_Y, INV, (char *)NumStr);   // ��ʾ������ֵ+����
 8014416:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801441a:	4a0f      	ldr	r2, [pc, #60]	; (8014458 <DispMeter+0xe8>)
 801441c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8014420:	b29b      	uxth	r3, r3
 8014422:	331e      	adds	r3, #30
 8014424:	b29b      	uxth	r3, r3
 8014426:	b218      	sxth	r0, r3
 8014428:	4b0e      	ldr	r3, [pc, #56]	; (8014464 <DispMeter+0xf4>)
 801442a:	2201      	movs	r2, #1
 801442c:	2103      	movs	r1, #3
 801442e:	f7f9 fc7b 	bl	800dd28 <DispStr>
  }
  else
	  DispStr(S_X[Item]+24, LABLE_Y, INV, ": ----- ");
}
 8014432:	e00d      	b.n	8014450 <DispMeter+0xe0>
	  DispStr(S_X[Item]+24, LABLE_Y, INV, ": ----- ");
 8014434:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014438:	4a07      	ldr	r2, [pc, #28]	; (8014458 <DispMeter+0xe8>)
 801443a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801443e:	b29b      	uxth	r3, r3
 8014440:	3318      	adds	r3, #24
 8014442:	b29b      	uxth	r3, r3
 8014444:	b218      	sxth	r0, r3
 8014446:	4b09      	ldr	r3, [pc, #36]	; (801446c <DispMeter+0xfc>)
 8014448:	2201      	movs	r2, #1
 801444a:	2103      	movs	r1, #3
 801444c:	f7f9 fc6c 	bl	800dd28 <DispStr>
}
 8014450:	bf00      	nop
 8014452:	3708      	adds	r7, #8
 8014454:	46bd      	mov	sp, r7
 8014456:	bd80      	pop	{r7, pc}
 8014458:	0800215c 	.word	0x0800215c
 801445c:	08001d18 	.word	0x08001d18
 8014460:	20000298 	.word	0x20000298
 8014464:	2000283c 	.word	0x2000283c
 8014468:	080009d4 	.word	0x080009d4
 801446c:	080009e0 	.word	0x080009e0

08014470 <DispStatus>:

/*******************************************************************************

*******************************************************************************/
void DispStatus(void)
{
 8014470:	b580      	push	{r7, lr}
 8014472:	b084      	sub	sp, #16
 8014474:	af02      	add	r7, sp, #8
  char* p;
  SetColor(GRY, (Status & STOP) ? RED : TCOLOR[TRG]);
 8014476:	4b20      	ldr	r3, [pc, #128]	; (80144f8 <DispStatus+0x88>)
 8014478:	f9b3 3000 	ldrsh.w	r3, [r3]
 801447c:	b29b      	uxth	r3, r3
 801447e:	f003 0301 	and.w	r3, r3, #1
 8014482:	2b00      	cmp	r3, #0
 8014484:	d102      	bne.n	801448c <DispStatus+0x1c>
 8014486:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 801448a:	e000      	b.n	801448e <DispStatus+0x1e>
 801448c:	231f      	movs	r3, #31
 801448e:	4619      	mov	r1, r3
 8014490:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014494:	f7f9 fc30 	bl	800dcf8 <SetColor>
  p =(Status & STOP)?(char*)M :(List[SYNCMODE].PTR +(List[SYNCMODE].Val)*6);
 8014498:	4b17      	ldr	r3, [pc, #92]	; (80144f8 <DispStatus+0x88>)
 801449a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801449e:	b29b      	uxth	r3, r3
 80144a0:	f003 0301 	and.w	r3, r3, #1
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d10b      	bne.n	80144c0 <DispStatus+0x50>
 80144a8:	4b14      	ldr	r3, [pc, #80]	; (80144fc <DispStatus+0x8c>)
 80144aa:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80144ac:	4b13      	ldr	r3, [pc, #76]	; (80144fc <DispStatus+0x8c>)
 80144ae:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 80144b2:	4619      	mov	r1, r3
 80144b4:	460b      	mov	r3, r1
 80144b6:	005b      	lsls	r3, r3, #1
 80144b8:	440b      	add	r3, r1
 80144ba:	005b      	lsls	r3, r3, #1
 80144bc:	4413      	add	r3, r2
 80144be:	e000      	b.n	80144c2 <DispStatus+0x52>
 80144c0:	4b0f      	ldr	r3, [pc, #60]	; (8014500 <DispStatus+0x90>)
 80144c2:	607b      	str	r3, [r7, #4]
  Draw_Circle_D(INV, S_X[SYNCMODE]-3, TITLE_Y_POS, 11, 1, 6*4);
 80144c4:	f240 1321 	movw	r3, #289	; 0x121
 80144c8:	b29b      	uxth	r3, r3
 80144ca:	3b03      	subs	r3, #3
 80144cc:	b29b      	uxth	r3, r3
 80144ce:	b219      	sxth	r1, r3
 80144d0:	2318      	movs	r3, #24
 80144d2:	9301      	str	r3, [sp, #4]
 80144d4:	2301      	movs	r3, #1
 80144d6:	9300      	str	r3, [sp, #0]
 80144d8:	230b      	movs	r3, #11
 80144da:	22e1      	movs	r2, #225	; 0xe1
 80144dc:	2001      	movs	r0, #1
 80144de:	f7f9 fcf9 	bl	800ded4 <Draw_Circle_D>
  DispStr(S_X[SYNCMODE], TITLE_Y_POS, INV, (char *)p);
 80144e2:	f240 1021 	movw	r0, #289	; 0x121
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	2201      	movs	r2, #1
 80144ea:	21e1      	movs	r1, #225	; 0xe1
 80144ec:	f7f9 fc1c 	bl	800dd28 <DispStr>
}
 80144f0:	bf00      	nop
 80144f2:	3708      	adds	r7, #8
 80144f4:	46bd      	mov	sp, r7
 80144f6:	bd80      	pop	{r7, pc}
 80144f8:	200007a0 	.word	0x200007a0
 80144fc:	20000298 	.word	0x20000298
 8014500:	08001cb4 	.word	0x08001cb4

08014504 <Update_Windows>:

/*******************************************************************************
���»���������λ��
*******************************************************************************/
void Update_Windows(void)
{
 8014504:	b580      	push	{r7, lr}
 8014506:	b084      	sub	sp, #16
 8014508:	af00      	add	r7, sp, #0
  short  x0,x,y,i,j,Width;
  short  Depth =  DEPTH[List[SMPL_DPTH].Val];
 801450a:	4b6a      	ldr	r3, [pc, #424]	; (80146b4 <Update_Windows+0x1b0>)
 801450c:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8014510:	461a      	mov	r2, r3
 8014512:	4b69      	ldr	r3, [pc, #420]	; (80146b8 <Update_Windows+0x1b4>)
 8014514:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8014518:	80fb      	strh	r3, [r7, #6]
  Width =(300*300)/Depth;
 801451a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801451e:	4a67      	ldr	r2, [pc, #412]	; (80146bc <Update_Windows+0x1b8>)
 8014520:	fb92 f3f3 	sdiv	r3, r2, r3
 8014524:	80bb      	strh	r3, [r7, #4]
  if(Current == XN &&(PopType & LIST_POP) )
 8014526:	4b66      	ldr	r3, [pc, #408]	; (80146c0 <Update_Windows+0x1bc>)
 8014528:	f9b3 3000 	ldrsh.w	r3, [r3]
 801452c:	2b01      	cmp	r3, #1
 801452e:	f040 80a9 	bne.w	8014684 <Update_Windows+0x180>
 8014532:	4b64      	ldr	r3, [pc, #400]	; (80146c4 <Update_Windows+0x1c0>)
 8014534:	781b      	ldrb	r3, [r3, #0]
 8014536:	f003 0302 	and.w	r3, r3, #2
 801453a:	2b00      	cmp	r3, #0
 801453c:	f000 80a2 	beq.w	8014684 <Update_Windows+0x180>
  {
      Windows_Pop = 1;
 8014540:	4b61      	ldr	r3, [pc, #388]	; (80146c8 <Update_Windows+0x1c4>)
 8014542:	2201      	movs	r2, #1
 8014544:	701a      	strb	r2, [r3, #0]
      x0=2+(List[VIEWPOSI].Val)*300/Depth;
 8014546:	4b5b      	ldr	r3, [pc, #364]	; (80146b4 <Update_Windows+0x1b0>)
 8014548:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 801454c:	461a      	mov	r2, r3
 801454e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8014552:	fb03 f202 	mul.w	r2, r3, r2
 8014556:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801455a:	fb92 f3f3 	sdiv	r3, r2, r3
 801455e:	b29b      	uxth	r3, r3
 8014560:	3302      	adds	r3, #2
 8014562:	b29b      	uxth	r3, r3
 8014564:	81fb      	strh	r3, [r7, #14]
      x=2;
 8014566:	2302      	movs	r3, #2
 8014568:	81bb      	strh	r3, [r7, #12]
      y=15;
 801456a:	230f      	movs	r3, #15
 801456c:	807b      	strh	r3, [r7, #2]
      for(i=0;i<300;i++){    //��������
 801456e:	2300      	movs	r3, #0
 8014570:	817b      	strh	r3, [r7, #10]
 8014572:	e029      	b.n	80145c8 <Update_Windows+0xc4>
        LCD_Set_Posi(x++, y);
 8014574:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8014578:	b293      	uxth	r3, r2
 801457a:	3301      	adds	r3, #1
 801457c:	b29b      	uxth	r3, r3
 801457e:	81bb      	strh	r3, [r7, #12]
 8014580:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014584:	4619      	mov	r1, r3
 8014586:	4610      	mov	r0, r2
 8014588:	f7fd fe66 	bl	8012258 <LCD_Set_Posi>
        LCD_Set_Pixel(DAR);
 801458c:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014590:	f7fd feb0 	bl	80122f4 <LCD_Set_Pixel>
        for(j=0; j<2; j++)LCD_Set_Pixel(RED);
 8014594:	2300      	movs	r3, #0
 8014596:	813b      	strh	r3, [r7, #8]
 8014598:	e008      	b.n	80145ac <Update_Windows+0xa8>
 801459a:	201f      	movs	r0, #31
 801459c:	f7fd feaa 	bl	80122f4 <LCD_Set_Pixel>
 80145a0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80145a4:	b29b      	uxth	r3, r3
 80145a6:	3301      	adds	r3, #1
 80145a8:	b29b      	uxth	r3, r3
 80145aa:	813b      	strh	r3, [r7, #8]
 80145ac:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80145b0:	2b01      	cmp	r3, #1
 80145b2:	ddf2      	ble.n	801459a <Update_Windows+0x96>
        LCD_Set_Pixel(DAR);
 80145b4:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80145b8:	f7fd fe9c 	bl	80122f4 <LCD_Set_Pixel>
      for(i=0;i<300;i++){    //��������
 80145bc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80145c0:	b29b      	uxth	r3, r3
 80145c2:	3301      	adds	r3, #1
 80145c4:	b29b      	uxth	r3, r3
 80145c6:	817b      	strh	r3, [r7, #10]
 80145c8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80145cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80145d0:	dbd0      	blt.n	8014574 <Update_Windows+0x70>
      }
      if(Current == XN && (MenuNow[XN]==SMPL_DPTH ))
 80145d2:	4b3b      	ldr	r3, [pc, #236]	; (80146c0 <Update_Windows+0x1bc>)
 80145d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80145d8:	2b01      	cmp	r3, #1
 80145da:	d122      	bne.n	8014622 <Update_Windows+0x11e>
 80145dc:	4b3b      	ldr	r3, [pc, #236]	; (80146cc <Update_Windows+0x1c8>)
 80145de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80145e2:	2b09      	cmp	r3, #9
 80145e4:	d11d      	bne.n	8014622 <Update_Windows+0x11e>
      {  //Depthѡ��
        if(Key_Buffer == KEYCODE_RIGHT || Key_Buffer == KEYCODE_LEFT)
 80145e6:	4b3a      	ldr	r3, [pc, #232]	; (80146d0 <Update_Windows+0x1cc>)
 80145e8:	781b      	ldrb	r3, [r3, #0]
 80145ea:	b2db      	uxtb	r3, r3
 80145ec:	2b06      	cmp	r3, #6
 80145ee:	d004      	beq.n	80145fa <Update_Windows+0xf6>
 80145f0:	4b37      	ldr	r3, [pc, #220]	; (80146d0 <Update_Windows+0x1cc>)
 80145f2:	781b      	ldrb	r3, [r3, #0]
 80145f4:	b2db      	uxtb	r3, r3
 80145f6:	2b05      	cmp	r3, #5
 80145f8:	d113      	bne.n	8014622 <Update_Windows+0x11e>
        {  //ѡ���б䶯ʱ�ı�Ԥ����λ��
          List[VIEWPOSI].Val= 0;
 80145fa:	4b2e      	ldr	r3, [pc, #184]	; (80146b4 <Update_Windows+0x1b0>)
 80145fc:	2200      	movs	r2, #0
 80145fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
          x0=2+(List[VIEWPOSI].Val)*300/Depth;
 8014602:	4b2c      	ldr	r3, [pc, #176]	; (80146b4 <Update_Windows+0x1b0>)
 8014604:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8014608:	461a      	mov	r2, r3
 801460a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 801460e:	fb03 f202 	mul.w	r2, r3, r2
 8014612:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014616:	fb92 f3f3 	sdiv	r3, r2, r3
 801461a:	b29b      	uxth	r3, r3
 801461c:	3302      	adds	r3, #2
 801461e:	b29b      	uxth	r3, r3
 8014620:	81fb      	strh	r3, [r7, #14]
        }
      }
      x = x0;               //��ǰ�����ڻ�����λ��
 8014622:	89fb      	ldrh	r3, [r7, #14]
 8014624:	81bb      	strh	r3, [r7, #12]
      y=15;
 8014626:	230f      	movs	r3, #15
 8014628:	807b      	strh	r3, [r7, #2]
      for(i=0;i<Width;i++){
 801462a:	2300      	movs	r3, #0
 801462c:	817b      	strh	r3, [r7, #10]
 801462e:	e022      	b.n	8014676 <Update_Windows+0x172>
        LCD_Set_Posi(x++, y);
 8014630:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8014634:	b293      	uxth	r3, r2
 8014636:	3301      	adds	r3, #1
 8014638:	b29b      	uxth	r3, r3
 801463a:	81bb      	strh	r3, [r7, #12]
 801463c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014640:	4619      	mov	r1, r3
 8014642:	4610      	mov	r0, r2
 8014644:	f7fd fe08 	bl	8012258 <LCD_Set_Posi>
        for(j=0; j<4; j++)LCD_Set_Pixel(GRN);
 8014648:	2300      	movs	r3, #0
 801464a:	813b      	strh	r3, [r7, #8]
 801464c:	e009      	b.n	8014662 <Update_Windows+0x15e>
 801464e:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8014652:	f7fd fe4f 	bl	80122f4 <LCD_Set_Pixel>
 8014656:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801465a:	b29b      	uxth	r3, r3
 801465c:	3301      	adds	r3, #1
 801465e:	b29b      	uxth	r3, r3
 8014660:	813b      	strh	r3, [r7, #8]
 8014662:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014666:	2b03      	cmp	r3, #3
 8014668:	ddf1      	ble.n	801464e <Update_Windows+0x14a>
      for(i=0;i<Width;i++){
 801466a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801466e:	b29b      	uxth	r3, r3
 8014670:	3301      	adds	r3, #1
 8014672:	b29b      	uxth	r3, r3
 8014674:	817b      	strh	r3, [r7, #10]
 8014676:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801467a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801467e:	429a      	cmp	r2, r3
 8014680:	dbd6      	blt.n	8014630 <Update_Windows+0x12c>
  if(Current == XN &&(PopType & LIST_POP) )
 8014682:	e012      	b.n	80146aa <Update_Windows+0x1a6>
      }
  }
  else if(Current == XN &&!(PopType & LIST_POP))
 8014684:	4b0e      	ldr	r3, [pc, #56]	; (80146c0 <Update_Windows+0x1bc>)
 8014686:	f9b3 3000 	ldrsh.w	r3, [r3]
 801468a:	2b01      	cmp	r3, #1
 801468c:	d10d      	bne.n	80146aa <Update_Windows+0x1a6>
 801468e:	4b0d      	ldr	r3, [pc, #52]	; (80146c4 <Update_Windows+0x1c0>)
 8014690:	781b      	ldrb	r3, [r3, #0]
 8014692:	f003 0302 	and.w	r3, r3, #2
 8014696:	2b00      	cmp	r3, #0
 8014698:	d107      	bne.n	80146aa <Update_Windows+0x1a6>
  {
    Windows_Pop = 0;
 801469a:	4b0b      	ldr	r3, [pc, #44]	; (80146c8 <Update_Windows+0x1c4>)
 801469c:	2200      	movs	r2, #0
 801469e:	701a      	strb	r2, [r3, #0]
    Clr_WavePosi(DAR);
 80146a0:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80146a4:	f000 f816 	bl	80146d4 <Clr_WavePosi>
  }
}
 80146a8:	e7ff      	b.n	80146aa <Update_Windows+0x1a6>
 80146aa:	bf00      	nop
 80146ac:	3710      	adds	r7, #16
 80146ae:	46bd      	mov	sp, r7
 80146b0:	bd80      	pop	{r7, pc}
 80146b2:	bf00      	nop
 80146b4:	20000298 	.word	0x20000298
 80146b8:	08002270 	.word	0x08002270
 80146bc:	00015f90 	.word	0x00015f90
 80146c0:	2000079e 	.word	0x2000079e
 80146c4:	2000078e 	.word	0x2000078e
 80146c8:	200007a6 	.word	0x200007a6
 80146cc:	20000538 	.word	0x20000538
 80146d0:	2000077d 	.word	0x2000077d

080146d4 <Clr_WavePosi>:

/*******************************************************************************
 void Clr_WavePosi(u16 Col)  �������λ����ʾ
*******************************************************************************/
void Clr_WavePosi(short Col)
{
 80146d4:	b580      	push	{r7, lr}
 80146d6:	b084      	sub	sp, #16
 80146d8:	af00      	add	r7, sp, #0
 80146da:	4603      	mov	r3, r0
 80146dc:	80fb      	strh	r3, [r7, #6]
  short x,y,i,j;
  x=2;
 80146de:	2302      	movs	r3, #2
 80146e0:	81fb      	strh	r3, [r7, #14]
  y=14;
 80146e2:	230e      	movs	r3, #14
 80146e4:	813b      	strh	r3, [r7, #8]
  for(i=0;i<300;i++)
 80146e6:	2300      	movs	r3, #0
 80146e8:	81bb      	strh	r3, [r7, #12]
 80146ea:	e022      	b.n	8014732 <Clr_WavePosi+0x5e>
  {
    LCD_Set_Posi(x++, y);
 80146ec:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80146f0:	b293      	uxth	r3, r2
 80146f2:	3301      	adds	r3, #1
 80146f4:	b29b      	uxth	r3, r3
 80146f6:	81fb      	strh	r3, [r7, #14]
 80146f8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80146fc:	4619      	mov	r1, r3
 80146fe:	4610      	mov	r0, r2
 8014700:	f7fd fdaa 	bl	8012258 <LCD_Set_Posi>
    for(j=0; j<6; j++)
 8014704:	2300      	movs	r3, #0
 8014706:	817b      	strh	r3, [r7, #10]
 8014708:	e009      	b.n	801471e <Clr_WavePosi+0x4a>
    	LCD_Set_Pixel(Col);
 801470a:	88fb      	ldrh	r3, [r7, #6]
 801470c:	4618      	mov	r0, r3
 801470e:	f7fd fdf1 	bl	80122f4 <LCD_Set_Pixel>
    for(j=0; j<6; j++)
 8014712:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014716:	b29b      	uxth	r3, r3
 8014718:	3301      	adds	r3, #1
 801471a:	b29b      	uxth	r3, r3
 801471c:	817b      	strh	r3, [r7, #10]
 801471e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014722:	2b05      	cmp	r3, #5
 8014724:	ddf1      	ble.n	801470a <Clr_WavePosi+0x36>
  for(i=0;i<300;i++)
 8014726:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801472a:	b29b      	uxth	r3, r3
 801472c:	3301      	adds	r3, #1
 801472e:	b29b      	uxth	r3, r3
 8014730:	81bb      	strh	r3, [r7, #12]
 8014732:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8014736:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801473a:	dbd7      	blt.n	80146ec <Clr_WavePosi+0x18>
  }
}
 801473c:	bf00      	nop
 801473e:	bf00      	nop
 8014740:	3710      	adds	r7, #16
 8014742:	46bd      	mov	sp, r7
 8014744:	bd80      	pop	{r7, pc}
	...

08014748 <DispFreq>:

/*******************************************************************************

*******************************************************************************/
void DispFreq(char St, char Mode, int Val)
{
 8014748:	b580      	push	{r7, lr}
 801474a:	b084      	sub	sp, #16
 801474c:	af02      	add	r7, sp, #8
 801474e:	4603      	mov	r3, r0
 8014750:	603a      	str	r2, [r7, #0]
 8014752:	71fb      	strb	r3, [r7, #7]
 8014754:	460b      	mov	r3, r1
 8014756:	71bb      	strb	r3, [r7, #6]
  SetColor(GRY, TCOLOR[ME]);
 8014758:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801475c:	4619      	mov	r1, r3
 801475e:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014762:	f7f9 fac9 	bl	800dcf8 <SetColor>

  Draw_Circle_D(INV, S_X[FREQUENC]-6*15-3+4, LABLE_Y, 11, 0, 6*12);
 8014766:	23a2      	movs	r3, #162	; 0xa2
 8014768:	b29b      	uxth	r3, r3
 801476a:	3b59      	subs	r3, #89	; 0x59
 801476c:	b29b      	uxth	r3, r3
 801476e:	b219      	sxth	r1, r3
 8014770:	2348      	movs	r3, #72	; 0x48
 8014772:	9301      	str	r3, [sp, #4]
 8014774:	2300      	movs	r3, #0
 8014776:	9300      	str	r3, [sp, #0]
 8014778:	230b      	movs	r3, #11
 801477a:	2203      	movs	r2, #3
 801477c:	2001      	movs	r0, #1
 801477e:	f7f9 fba9 	bl	800ded4 <Draw_Circle_D>
  DispStr(S_X[FREQUENC]-6*15+4, LABLE_Y, INV, (char*)&Z[0]);// ��ʾ������Ŀ����
 8014782:	23a2      	movs	r3, #162	; 0xa2
 8014784:	b29b      	uxth	r3, r3
 8014786:	3b56      	subs	r3, #86	; 0x56
 8014788:	b29b      	uxth	r3, r3
 801478a:	b218      	sxth	r0, r3
 801478c:	4b1a      	ldr	r3, [pc, #104]	; (80147f8 <DispFreq+0xb0>)
 801478e:	2201      	movs	r2, #1
 8014790:	2103      	movs	r1, #3
 8014792:	f7f9 fac9 	bl	800dd28 <DispStr>
  Value2Str(NumStr, Val, List[FREQUENC].PTR, 3, Mode);
 8014796:	4b19      	ldr	r3, [pc, #100]	; (80147fc <DispFreq+0xb4>)
 8014798:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 801479c:	79bb      	ldrb	r3, [r7, #6]
 801479e:	9300      	str	r3, [sp, #0]
 80147a0:	2303      	movs	r3, #3
 80147a2:	6839      	ldr	r1, [r7, #0]
 80147a4:	4816      	ldr	r0, [pc, #88]	; (8014800 <DispFreq+0xb8>)
 80147a6:	f7fd f997 	bl	8011ad8 <Value2Str>

  if(St) {
 80147aa:	79fb      	ldrb	r3, [r7, #7]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d014      	beq.n	80147da <DispFreq+0x92>
    DispStr(24+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, ":       ");
 80147b0:	23a2      	movs	r3, #162	; 0xa2
 80147b2:	b29b      	uxth	r3, r3
 80147b4:	3b3e      	subs	r3, #62	; 0x3e
 80147b6:	b29b      	uxth	r3, r3
 80147b8:	b218      	sxth	r0, r3
 80147ba:	4b12      	ldr	r3, [pc, #72]	; (8014804 <DispFreq+0xbc>)
 80147bc:	2201      	movs	r2, #1
 80147be:	2103      	movs	r1, #3
 80147c0:	f7f9 fab2 	bl	800dd28 <DispStr>
    DispStr(30+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, (char *)NumStr);   // ��ʾ������ֵ+����
 80147c4:	23a2      	movs	r3, #162	; 0xa2
 80147c6:	b29b      	uxth	r3, r3
 80147c8:	3b38      	subs	r3, #56	; 0x38
 80147ca:	b29b      	uxth	r3, r3
 80147cc:	b218      	sxth	r0, r3
 80147ce:	4b0c      	ldr	r3, [pc, #48]	; (8014800 <DispFreq+0xb8>)
 80147d0:	2201      	movs	r2, #1
 80147d2:	2103      	movs	r1, #3
 80147d4:	f7f9 faa8 	bl	800dd28 <DispStr>
  }
  else   DispStr(24+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, ": ---- ");
}
 80147d8:	e009      	b.n	80147ee <DispFreq+0xa6>
  else   DispStr(24+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, ": ---- ");
 80147da:	23a2      	movs	r3, #162	; 0xa2
 80147dc:	b29b      	uxth	r3, r3
 80147de:	3b3e      	subs	r3, #62	; 0x3e
 80147e0:	b29b      	uxth	r3, r3
 80147e2:	b218      	sxth	r0, r3
 80147e4:	4b08      	ldr	r3, [pc, #32]	; (8014808 <DispFreq+0xc0>)
 80147e6:	2201      	movs	r2, #1
 80147e8:	2103      	movs	r1, #3
 80147ea:	f7f9 fa9d 	bl	800dd28 <DispStr>
}
 80147ee:	bf00      	nop
 80147f0:	3708      	adds	r7, #8
 80147f2:	46bd      	mov	sp, r7
 80147f4:	bd80      	pop	{r7, pc}
 80147f6:	bf00      	nop
 80147f8:	08001d18 	.word	0x08001d18
 80147fc:	20000298 	.word	0x20000298
 8014800:	2000283c 	.word	0x2000283c
 8014804:	080009d4 	.word	0x080009d4
 8014808:	080009ec 	.word	0x080009ec

0801480c <Show_List>:

/*******************************************************************************
 Show_List: ���ò˵���λ�á��ߴ硢��ɫ����ʾ����
*******************************************************************************/
void Show_List(void)
{
 801480c:	b580      	push	{r7, lr}
 801480e:	b088      	sub	sp, #32
 8014810:	af02      	add	r7, sp, #8
  short i, Ny0, Nx0, CurrentMax = MU_BEGN[Current]+ M_ITEMS[Current];
 8014812:	4b59      	ldr	r3, [pc, #356]	; (8014978 <Show_List+0x16c>)
 8014814:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014818:	461a      	mov	r2, r3
 801481a:	4b58      	ldr	r3, [pc, #352]	; (801497c <Show_List+0x170>)
 801481c:	5c9b      	ldrb	r3, [r3, r2]
 801481e:	b29a      	uxth	r2, r3
 8014820:	4b55      	ldr	r3, [pc, #340]	; (8014978 <Show_List+0x16c>)
 8014822:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014826:	4619      	mov	r1, r3
 8014828:	4b55      	ldr	r3, [pc, #340]	; (8014980 <Show_List+0x174>)
 801482a:	5c5b      	ldrb	r3, [r3, r1]
 801482c:	b29b      	uxth	r3, r3
 801482e:	4413      	add	r3, r2
 8014830:	b29b      	uxth	r3, r3
 8014832:	827b      	strh	r3, [r7, #18]
  char  Flag = 0;
 8014834:	2300      	movs	r3, #0
 8014836:	757b      	strb	r3, [r7, #21]
  char  str[12];
  ParamTab[BXx1]= BLOCK_X[Current];
 8014838:	4b4f      	ldr	r3, [pc, #316]	; (8014978 <Show_List+0x16c>)
 801483a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801483e:	461a      	mov	r2, r3
 8014840:	4b50      	ldr	r3, [pc, #320]	; (8014984 <Show_List+0x178>)
 8014842:	5c9b      	ldrb	r3, [r3, r2]
 8014844:	b21a      	sxth	r2, r3
 8014846:	4b50      	ldr	r3, [pc, #320]	; (8014988 <Show_List+0x17c>)
 8014848:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  ParamTab[BYx2]= BLOCK_Y[Current]*2;
 801484c:	4b4a      	ldr	r3, [pc, #296]	; (8014978 <Show_List+0x16c>)
 801484e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014852:	461a      	mov	r2, r3
 8014854:	4b4d      	ldr	r3, [pc, #308]	; (801498c <Show_List+0x180>)
 8014856:	5c9b      	ldrb	r3, [r3, r2]
 8014858:	b29b      	uxth	r3, r3
 801485a:	005b      	lsls	r3, r3, #1
 801485c:	b29b      	uxth	r3, r3
 801485e:	b21a      	sxth	r2, r3
 8014860:	4b49      	ldr	r3, [pc, #292]	; (8014988 <Show_List+0x17c>)
 8014862:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  ParamTab[WXx1]= BLOCK_W[Current];
 8014866:	4b44      	ldr	r3, [pc, #272]	; (8014978 <Show_List+0x16c>)
 8014868:	f9b3 3000 	ldrsh.w	r3, [r3]
 801486c:	461a      	mov	r2, r3
 801486e:	4b48      	ldr	r3, [pc, #288]	; (8014990 <Show_List+0x184>)
 8014870:	5c9b      	ldrb	r3, [r3, r2]
 8014872:	b21a      	sxth	r2, r3
 8014874:	4b44      	ldr	r3, [pc, #272]	; (8014988 <Show_List+0x17c>)
 8014876:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  ParamTab[HYx2]=(M_ITEMS[Current]+1)*32;
 801487a:	4b3f      	ldr	r3, [pc, #252]	; (8014978 <Show_List+0x16c>)
 801487c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014880:	461a      	mov	r2, r3
 8014882:	4b3f      	ldr	r3, [pc, #252]	; (8014980 <Show_List+0x174>)
 8014884:	5c9b      	ldrb	r3, [r3, r2]
 8014886:	3301      	adds	r3, #1
 8014888:	b29b      	uxth	r3, r3
 801488a:	015b      	lsls	r3, r3, #5
 801488c:	b29b      	uxth	r3, r3
 801488e:	b21a      	sxth	r2, r3
 8014890:	4b3d      	ldr	r3, [pc, #244]	; (8014988 <Show_List+0x17c>)
 8014892:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  PopColor(WHT, DAR);
 8014896:	f643 11e7 	movw	r1, #14823	; 0x39e7
 801489a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801489e:	f7f9 ff95 	bl	800e7cc <PopColor>
  Buil_Pop();
 80148a2:	f7f9 fe85 	bl	800e5b0 <Buil_Pop>
  for(i=MU_BEGN[Current]; i<CurrentMax; i++){
 80148a6:	4b34      	ldr	r3, [pc, #208]	; (8014978 <Show_List+0x16c>)
 80148a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80148ac:	461a      	mov	r2, r3
 80148ae:	4b33      	ldr	r3, [pc, #204]	; (801497c <Show_List+0x170>)
 80148b0:	5c9b      	ldrb	r3, [r3, r2]
 80148b2:	82fb      	strh	r3, [r7, #22]
 80148b4:	e054      	b.n	8014960 <Show_List+0x154>
    if(i == MenuNow[Current]) {
 80148b6:	4b30      	ldr	r3, [pc, #192]	; (8014978 <Show_List+0x16c>)
 80148b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80148bc:	461a      	mov	r2, r3
 80148be:	4b35      	ldr	r3, [pc, #212]	; (8014994 <Show_List+0x188>)
 80148c0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80148c4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80148c8:	429a      	cmp	r2, r3
 80148ca:	d102      	bne.n	80148d2 <Show_List+0xc6>
      Flag = INV;
 80148cc:	2301      	movs	r3, #1
 80148ce:	757b      	strb	r3, [r7, #21]
 80148d0:	e007      	b.n	80148e2 <Show_List+0xd6>
    }
    else                      {
      PopColor(WHT, DAR);
 80148d2:	f643 11e7 	movw	r1, #14823	; 0x39e7
 80148d6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80148da:	f7f9 ff77 	bl	800e7cc <PopColor>
      Flag = PRN;
 80148de:	2300      	movs	r3, #0
 80148e0:	757b      	strb	r3, [r7, #21]
    }
    Ny0 = ((CurrentMax - i)*17 - 10);
 80148e2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80148e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80148ea:	1ad3      	subs	r3, r2, r3
 80148ec:	b29b      	uxth	r3, r3
 80148ee:	461a      	mov	r2, r3
 80148f0:	0112      	lsls	r2, r2, #4
 80148f2:	4413      	add	r3, r2
 80148f4:	b29b      	uxth	r3, r3
 80148f6:	3b0a      	subs	r3, #10
 80148f8:	b29b      	uxth	r3, r3
 80148fa:	823b      	strh	r3, [r7, #16]
    Nx0 = N_X ;
 80148fc:	2304      	movs	r3, #4
 80148fe:	81fb      	strh	r3, [r7, #14]
    memset(str,0,12);
 8014900:	463b      	mov	r3, r7
 8014902:	220c      	movs	r2, #12
 8014904:	2100      	movs	r1, #0
 8014906:	4618      	mov	r0, r3
 8014908:	f00e f998 	bl	8022c3c <memset>
    memcpy(str,&ESTR[i],10);
 801490c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014910:	4613      	mov	r3, r2
 8014912:	009b      	lsls	r3, r3, #2
 8014914:	4413      	add	r3, r2
 8014916:	005b      	lsls	r3, r3, #1
 8014918:	4a1f      	ldr	r2, [pc, #124]	; (8014998 <Show_List+0x18c>)
 801491a:	1899      	adds	r1, r3, r2
 801491c:	463b      	mov	r3, r7
 801491e:	220a      	movs	r2, #10
 8014920:	4618      	mov	r0, r3
 8014922:	f00e f97d 	bl	8022c20 <memcpy>
    NoteSTR(Nx0, Ny0, Flag, (char *)str);
 8014926:	463b      	mov	r3, r7
 8014928:	7d7a      	ldrb	r2, [r7, #21]
 801492a:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 801492e:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8014932:	f7fa f89b 	bl	800ea6c <NoteSTR>
    Note_4Point(PRN, Nx0, Ny0, strlen((char*)str), Font6x8_H);
 8014936:	463b      	mov	r3, r7
 8014938:	4618      	mov	r0, r3
 801493a:	f7f7 fb81 	bl	800c040 <strlen>
 801493e:	4603      	mov	r3, r0
 8014940:	b2db      	uxtb	r3, r3
 8014942:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8014946:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 801494a:	200a      	movs	r0, #10
 801494c:	9000      	str	r0, [sp, #0]
 801494e:	2000      	movs	r0, #0
 8014950:	f7fa f932 	bl	800ebb8 <Note_4Point>
  for(i=MU_BEGN[Current]; i<CurrentMax; i++){
 8014954:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014958:	b29b      	uxth	r3, r3
 801495a:	3301      	adds	r3, #1
 801495c:	b29b      	uxth	r3, r3
 801495e:	82fb      	strh	r3, [r7, #22]
 8014960:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014964:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014968:	429a      	cmp	r2, r3
 801496a:	dba4      	blt.n	80148b6 <Show_List+0xaa>
  }
  List_Pop();
 801496c:	f7f9 ff5e 	bl	800e82c <List_Pop>
}
 8014970:	bf00      	nop
 8014972:	3718      	adds	r7, #24
 8014974:	46bd      	mov	sp, r7
 8014976:	bd80      	pop	{r7, pc}
 8014978:	2000079e 	.word	0x2000079e
 801497c:	08001f40 	.word	0x08001f40
 8014980:	08001f48 	.word	0x08001f48
 8014984:	08002144 	.word	0x08002144
 8014988:	20000140 	.word	0x20000140
 801498c:	0800214c 	.word	0x0800214c
 8014990:	08002154 	.word	0x08002154
 8014994:	20000538 	.word	0x20000538
 8014998:	08001f50 	.word	0x08001f50

0801499c <DispFileInfo>:

/*******************************************************************************

*******************************************************************************/
void DispFileInfo(char Info)
{
 801499c:	b580      	push	{r7, lr}
 801499e:	b084      	sub	sp, #16
 80149a0:	af02      	add	r7, sp, #8
 80149a2:	4603      	mov	r3, r0
 80149a4:	71fb      	strb	r3, [r7, #7]
  SetColor(DAR, BLU);
 80149a6:	f64f 4110 	movw	r1, #64528	; 0xfc10
 80149aa:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80149ae:	f7f9 f9a3 	bl	800dcf8 <SetColor>
  Draw_Circle_D(INV, S_X[SAVE_BMP]-3, LABLE_Y, 11, 0, 6*11);
 80149b2:	23f8      	movs	r3, #248	; 0xf8
 80149b4:	b29b      	uxth	r3, r3
 80149b6:	3b03      	subs	r3, #3
 80149b8:	b29b      	uxth	r3, r3
 80149ba:	b219      	sxth	r1, r3
 80149bc:	2342      	movs	r3, #66	; 0x42
 80149be:	9301      	str	r3, [sp, #4]
 80149c0:	2300      	movs	r3, #0
 80149c2:	9300      	str	r3, [sp, #0]
 80149c4:	230b      	movs	r3, #11
 80149c6:	2203      	movs	r2, #3
 80149c8:	2001      	movs	r0, #1
 80149ca:	f7f9 fa83 	bl	800ded4 <Draw_Circle_D>
  DispStr(S_X[SAVE_BMP], LABLE_Y, INV, (char *)(&FnNote+14*Info));
 80149ce:	20f8      	movs	r0, #248	; 0xf8
 80149d0:	79fb      	ldrb	r3, [r7, #7]
 80149d2:	f44f 7275 	mov.w	r2, #980	; 0x3d4
 80149d6:	fb02 f303 	mul.w	r3, r2, r3
 80149da:	4a07      	ldr	r2, [pc, #28]	; (80149f8 <DispFileInfo+0x5c>)
 80149dc:	4413      	add	r3, r2
 80149de:	2201      	movs	r2, #1
 80149e0:	2103      	movs	r1, #3
 80149e2:	f7f9 f9a1 	bl	800dd28 <DispStr>
  HAL_Delay(2000);
 80149e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80149ea:	f003 fcf3 	bl	80183d4 <HAL_Delay>

}
 80149ee:	bf00      	nop
 80149f0:	3708      	adds	r7, #8
 80149f2:	46bd      	mov	sp, r7
 80149f4:	bd80      	pop	{r7, pc}
 80149f6:	bf00      	nop
 80149f8:	080022f0 	.word	0x080022f0

080149fc <DispBMPInfo>:

/*******************************************************************************

*******************************************************************************/
void DispBMPInfo(void)
{
 80149fc:	b580      	push	{r7, lr}
 80149fe:	b082      	sub	sp, #8
 8014a00:	af02      	add	r7, sp, #8
  SetColor(GRY, TCOLOR[FN]);
 8014a02:	f64f 4310 	movw	r3, #64528	; 0xfc10
 8014a06:	4619      	mov	r1, r3
 8014a08:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014a0c:	f7f9 f974 	bl	800dcf8 <SetColor>
  u8ToDec3(NumStr, List[SAVE_BMP].Val);
 8014a10:	4b1a      	ldr	r3, [pc, #104]	; (8014a7c <DispBMPInfo+0x80>)
 8014a12:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 8014a16:	b2db      	uxtb	r3, r3
 8014a18:	4619      	mov	r1, r3
 8014a1a:	4819      	ldr	r0, [pc, #100]	; (8014a80 <DispBMPInfo+0x84>)
 8014a1c:	f7fc fff4 	bl	8011a08 <u8ToDec3>
  Draw_Circle_D(INV, S_X[SAVE_BMP]-3, LABLE_Y, 11, 0, 6*11);
 8014a20:	23f8      	movs	r3, #248	; 0xf8
 8014a22:	b29b      	uxth	r3, r3
 8014a24:	3b03      	subs	r3, #3
 8014a26:	b29b      	uxth	r3, r3
 8014a28:	b219      	sxth	r1, r3
 8014a2a:	2342      	movs	r3, #66	; 0x42
 8014a2c:	9301      	str	r3, [sp, #4]
 8014a2e:	2300      	movs	r3, #0
 8014a30:	9300      	str	r3, [sp, #0]
 8014a32:	230b      	movs	r3, #11
 8014a34:	2203      	movs	r2, #3
 8014a36:	2001      	movs	r0, #1
 8014a38:	f7f9 fa4c 	bl	800ded4 <Draw_Circle_D>
  DispStr(S_X[SAVE_BMP],    LABLE_Y, INV, ("Save"));//0513
 8014a3c:	20f8      	movs	r0, #248	; 0xf8
 8014a3e:	4b11      	ldr	r3, [pc, #68]	; (8014a84 <DispBMPInfo+0x88>)
 8014a40:	2201      	movs	r2, #1
 8014a42:	2103      	movs	r1, #3
 8014a44:	f7f9 f970 	bl	800dd28 <DispStr>
  DispStr(S_X[SAVE_BMP]+24, LABLE_Y, INV, (char *)NumStr);
 8014a48:	23f8      	movs	r3, #248	; 0xf8
 8014a4a:	b29b      	uxth	r3, r3
 8014a4c:	3318      	adds	r3, #24
 8014a4e:	b29b      	uxth	r3, r3
 8014a50:	b218      	sxth	r0, r3
 8014a52:	4b0b      	ldr	r3, [pc, #44]	; (8014a80 <DispBMPInfo+0x84>)
 8014a54:	2201      	movs	r2, #1
 8014a56:	2103      	movs	r1, #3
 8014a58:	f7f9 f966 	bl	800dd28 <DispStr>
  DispStr(S_X[SAVE_BMP]+42, LABLE_Y, INV, (List[SAVE_BMP].PTR ));
 8014a5c:	23f8      	movs	r3, #248	; 0xf8
 8014a5e:	b29b      	uxth	r3, r3
 8014a60:	332a      	adds	r3, #42	; 0x2a
 8014a62:	b29b      	uxth	r3, r3
 8014a64:	b218      	sxth	r0, r3
 8014a66:	4b05      	ldr	r3, [pc, #20]	; (8014a7c <DispBMPInfo+0x80>)
 8014a68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014a6c:	2201      	movs	r2, #1
 8014a6e:	2103      	movs	r1, #3
 8014a70:	f7f9 f95a 	bl	800dd28 <DispStr>
}
 8014a74:	bf00      	nop
 8014a76:	46bd      	mov	sp, r7
 8014a78:	bd80      	pop	{r7, pc}
 8014a7a:	bf00      	nop
 8014a7c:	20000298 	.word	0x20000298
 8014a80:	2000283c 	.word	0x2000283c
 8014a84:	08000950 	.word	0x08000950

08014a88 <Update_Proc_All>:

/*******************************************************************************
Update_Proc_All  ȫ��ˢ��
*******************************************************************************/
void Update_Proc_All(void)
{
 8014a88:	b590      	push	{r4, r7, lr}
 8014a8a:	b087      	sub	sp, #28
 8014a8c:	af02      	add	r7, sp, #8
  short i;
  long Tmp = 0;
 8014a8e:	2300      	movs	r3, #0
 8014a90:	60bb      	str	r3, [r7, #8]
  short Range = List[Y_RANGES].Val + 10*List[PROBEATT].Val;
 8014a92:	4ba3      	ldr	r3, [pc, #652]	; (8014d20 <Update_Proc_All+0x298>)
 8014a94:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014a98:	b29a      	uxth	r2, r3
 8014a9a:	4ba1      	ldr	r3, [pc, #644]	; (8014d20 <Update_Proc_All+0x298>)
 8014a9c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8014aa0:	b29b      	uxth	r3, r3
 8014aa2:	4619      	mov	r1, r3
 8014aa4:	0089      	lsls	r1, r1, #2
 8014aa6:	440b      	add	r3, r1
 8014aa8:	005b      	lsls	r3, r3, #1
 8014aaa:	b29b      	uxth	r3, r3
 8014aac:	4413      	add	r3, r2
 8014aae:	b29b      	uxth	r3, r3
 8014ab0:	80fb      	strh	r3, [r7, #6]

  for(i=Y_RANGES; i<=STANDBY; i++){
 8014ab2:	2300      	movs	r3, #0
 8014ab4:	81fb      	strh	r3, [r7, #14]
 8014ab6:	e015      	b.n	8014ae4 <Update_Proc_All+0x5c>
    List[i].Flg |= UPD;
 8014ab8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014abc:	4a98      	ldr	r2, [pc, #608]	; (8014d20 <Update_Proc_All+0x298>)
 8014abe:	00db      	lsls	r3, r3, #3
 8014ac0:	4413      	add	r3, r2
 8014ac2:	799a      	ldrb	r2, [r3, #6]
 8014ac4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014ac8:	f042 0220 	orr.w	r2, r2, #32
 8014acc:	b2d1      	uxtb	r1, r2
 8014ace:	4a94      	ldr	r2, [pc, #592]	; (8014d20 <Update_Proc_All+0x298>)
 8014ad0:	00db      	lsls	r3, r3, #3
 8014ad2:	4413      	add	r3, r2
 8014ad4:	460a      	mov	r2, r1
 8014ad6:	719a      	strb	r2, [r3, #6]
  for(i=Y_RANGES; i<=STANDBY; i++){
 8014ad8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014adc:	b29b      	uxth	r3, r3
 8014ade:	3301      	adds	r3, #1
 8014ae0:	b29b      	uxth	r3, r3
 8014ae2:	81fb      	strh	r3, [r7, #14]
 8014ae4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014ae8:	2b29      	cmp	r3, #41	; 0x29
 8014aea:	dde5      	ble.n	8014ab8 <Update_Proc_All+0x30>
  }

  for(i=Y_RANGES; i<=STANDBY; i++){
 8014aec:	2300      	movs	r3, #0
 8014aee:	81fb      	strh	r3, [r7, #14]
 8014af0:	e1be      	b.n	8014e70 <Update_Proc_All+0x3e8>
    if(List[i].Flg & UPD){
 8014af2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014af6:	4a8a      	ldr	r2, [pc, #552]	; (8014d20 <Update_Proc_All+0x298>)
 8014af8:	00db      	lsls	r3, r3, #3
 8014afa:	4413      	add	r3, r2
 8014afc:	799b      	ldrb	r3, [r3, #6]
 8014afe:	f003 0320 	and.w	r3, r3, #32
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	f000 81ad 	beq.w	8014e62 <Update_Proc_All+0x3da>
      List[i].Flg &= ~UPD;
 8014b08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014b0c:	4a84      	ldr	r2, [pc, #528]	; (8014d20 <Update_Proc_All+0x298>)
 8014b0e:	00db      	lsls	r3, r3, #3
 8014b10:	4413      	add	r3, r2
 8014b12:	799a      	ldrb	r2, [r3, #6]
 8014b14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014b18:	f022 0220 	bic.w	r2, r2, #32
 8014b1c:	b2d1      	uxtb	r1, r2
 8014b1e:	4a80      	ldr	r2, [pc, #512]	; (8014d20 <Update_Proc_All+0x298>)
 8014b20:	00db      	lsls	r3, r3, #3
 8014b22:	4413      	add	r3, r2
 8014b24:	460a      	mov	r2, r1
 8014b26:	719a      	strb	r2, [r3, #6]
      switch (i){
 8014b28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014b2c:	2b12      	cmp	r3, #18
 8014b2e:	f300 8199 	bgt.w	8014e64 <Update_Proc_All+0x3dc>
 8014b32:	2b0d      	cmp	r3, #13
 8014b34:	f280 80ac 	bge.w	8014c90 <Update_Proc_All+0x208>
 8014b38:	2b03      	cmp	r3, #3
 8014b3a:	dc02      	bgt.n	8014b42 <Update_Proc_All+0xba>
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	da04      	bge.n	8014b4a <Update_Proc_All+0xc2>
 8014b40:	e190      	b.n	8014e64 <Update_Proc_All+0x3dc>
 8014b42:	2b07      	cmp	r3, #7
 8014b44:	f000 815a 	beq.w	8014dfc <Update_Proc_All+0x374>
 8014b48:	e18c      	b.n	8014e64 <Update_Proc_All+0x3dc>
      case Y_RANGES:   // ˢ����ʾ Y ���̵�λ
      case PROBEATT:   // ˢ����ʾ̽ͷ˥������
      case COUPLING:   // ˢ����ʾ���ģʽ״̬
      case V0_POSI:    // ˢ����ʾ��ֱƫ��λ��
        SetColor(GRY, TCOLOR[YN]);
 8014b4a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8014b4e:	4619      	mov	r1, r3
 8014b50:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014b54:	f7f9 f8d0 	bl	800dcf8 <SetColor>
        if(i == Y_RANGES || i == COUPLING||i == PROBEATT){
 8014b58:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d007      	beq.n	8014b70 <Update_Proc_All+0xe8>
 8014b60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014b64:	2b01      	cmp	r3, #1
 8014b66:	d003      	beq.n	8014b70 <Update_Proc_All+0xe8>
 8014b68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014b6c:	2b02      	cmp	r3, #2
 8014b6e:	d138      	bne.n	8014be2 <Update_Proc_All+0x15a>
          Draw_Circle_D(INV, S_X[Y_RANGES]-3, TITLE_Y_POS, 11, 0, 6*7);
 8014b70:	232f      	movs	r3, #47	; 0x2f
 8014b72:	b29b      	uxth	r3, r3
 8014b74:	3b03      	subs	r3, #3
 8014b76:	b29b      	uxth	r3, r3
 8014b78:	b219      	sxth	r1, r3
 8014b7a:	232a      	movs	r3, #42	; 0x2a
 8014b7c:	9301      	str	r3, [sp, #4]
 8014b7e:	2300      	movs	r3, #0
 8014b80:	9300      	str	r3, [sp, #0]
 8014b82:	230b      	movs	r3, #11
 8014b84:	22e1      	movs	r2, #225	; 0xe1
 8014b86:	2001      	movs	r0, #1
 8014b88:	f7f9 f9a4 	bl	800ded4 <Draw_Circle_D>
          DispStr(S_X[Y_RANGES], TITLE_Y_POS, INV,      (List[Y_RANGES].PTR +(Range)*6));
 8014b8c:	202f      	movs	r0, #47	; 0x2f
 8014b8e:	4b64      	ldr	r3, [pc, #400]	; (8014d20 <Update_Proc_All+0x298>)
 8014b90:	6819      	ldr	r1, [r3, #0]
 8014b92:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014b96:	4613      	mov	r3, r2
 8014b98:	005b      	lsls	r3, r3, #1
 8014b9a:	4413      	add	r3, r2
 8014b9c:	005b      	lsls	r3, r3, #1
 8014b9e:	440b      	add	r3, r1
 8014ba0:	2201      	movs	r2, #1
 8014ba2:	21e1      	movs	r1, #225	; 0xe1
 8014ba4:	f7f9 f8c0 	bl	800dd28 <DispStr>
          DispStr(S_X[COUPLING], TITLE_Y_POS, INV,      (List[COUPLING].PTR +(List[COUPLING].Val)*6));
 8014ba8:	2047      	movs	r0, #71	; 0x47
 8014baa:	4b5d      	ldr	r3, [pc, #372]	; (8014d20 <Update_Proc_All+0x298>)
 8014bac:	689a      	ldr	r2, [r3, #8]
 8014bae:	4b5c      	ldr	r3, [pc, #368]	; (8014d20 <Update_Proc_All+0x298>)
 8014bb0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8014bb4:	4619      	mov	r1, r3
 8014bb6:	460b      	mov	r3, r1
 8014bb8:	005b      	lsls	r3, r3, #1
 8014bba:	440b      	add	r3, r1
 8014bbc:	005b      	lsls	r3, r3, #1
 8014bbe:	4413      	add	r3, r2
 8014bc0:	2201      	movs	r2, #1
 8014bc2:	21e1      	movs	r1, #225	; 0xe1
 8014bc4:	f7f9 f8b0 	bl	800dd28 <DispStr>
          DispStr10x14(S_X[PROBEATT], TITLE_Y_POS, PRN+SYMB,(List[PROBEATT].Val?("A"):("B")));
 8014bc8:	2020      	movs	r0, #32
 8014bca:	4b55      	ldr	r3, [pc, #340]	; (8014d20 <Update_Proc_All+0x298>)
 8014bcc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d001      	beq.n	8014bd8 <Update_Proc_All+0x150>
 8014bd4:	4b53      	ldr	r3, [pc, #332]	; (8014d24 <Update_Proc_All+0x29c>)
 8014bd6:	e000      	b.n	8014bda <Update_Proc_All+0x152>
 8014bd8:	4b53      	ldr	r3, [pc, #332]	; (8014d28 <Update_Proc_All+0x2a0>)
 8014bda:	2210      	movs	r2, #16
 8014bdc:	21e1      	movs	r1, #225	; 0xe1
 8014bde:	f7f9 fb0b 	bl	800e1f8 <DispStr10x14>
        }
        ParamTab[P1x2] = 2*((List[V0_POSI].Val+1));
 8014be2:	4b4f      	ldr	r3, [pc, #316]	; (8014d20 <Update_Proc_All+0x298>)
 8014be4:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8014be8:	3301      	adds	r3, #1
 8014bea:	b29b      	uxth	r3, r3
 8014bec:	005b      	lsls	r3, r3, #1
 8014bee:	b29b      	uxth	r3, r3
 8014bf0:	b21a      	sxth	r2, r3
 8014bf2:	4b4e      	ldr	r3, [pc, #312]	; (8014d2c <Update_Proc_All+0x2a4>)
 8014bf4:	829a      	strh	r2, [r3, #20]
        ParamTab[VTx2] = ParamTab[P1x2]+ 2*(List[THRESHOLD].Val+1);
 8014bf6:	4b4d      	ldr	r3, [pc, #308]	; (8014d2c <Update_Proc_All+0x2a4>)
 8014bf8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8014bfc:	b29a      	uxth	r2, r3
 8014bfe:	4b48      	ldr	r3, [pc, #288]	; (8014d20 <Update_Proc_All+0x298>)
 8014c00:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8014c04:	3301      	adds	r3, #1
 8014c06:	b29b      	uxth	r3, r3
 8014c08:	005b      	lsls	r3, r3, #1
 8014c0a:	b29b      	uxth	r3, r3
 8014c0c:	4413      	add	r3, r2
 8014c0e:	b29b      	uxth	r3, r3
 8014c10:	b21a      	sxth	r2, r3
 8014c12:	4b46      	ldr	r3, [pc, #280]	; (8014d2c <Update_Proc_All+0x2a4>)
 8014c14:	839a      	strh	r2, [r3, #28]

        StateA =  (List[Y_RANGES].Val>5)?ACT: GND;                                    //ACT GND �ӵػ򼤻�״̬
 8014c16:	4b42      	ldr	r3, [pc, #264]	; (8014d20 <Update_Proc_All+0x298>)
 8014c18:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014c1c:	2b05      	cmp	r3, #5
 8014c1e:	dd01      	ble.n	8014c24 <Update_Proc_All+0x19c>
 8014c20:	2204      	movs	r2, #4
 8014c22:	e000      	b.n	8014c26 <Update_Proc_All+0x19e>
 8014c24:	2200      	movs	r2, #0
 8014c26:	4b42      	ldr	r3, [pc, #264]	; (8014d30 <Update_Proc_All+0x2a8>)
 8014c28:	801a      	strh	r2, [r3, #0]
        GainA  = List[Y_RANGES].Val;
 8014c2a:	4b3d      	ldr	r3, [pc, #244]	; (8014d20 <Update_Proc_All+0x298>)
 8014c2c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8014c30:	4b40      	ldr	r3, [pc, #256]	; (8014d34 <Update_Proc_All+0x2ac>)
 8014c32:	801a      	strh	r2, [r3, #0]
        if(List[Y_RANGES].Val>1)
 8014c34:	4b3a      	ldr	r3, [pc, #232]	; (8014d20 <Update_Proc_All+0x298>)
 8014c36:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014c3a:	2b01      	cmp	r3, #1
 8014c3c:	dd03      	ble.n	8014c46 <Update_Proc_All+0x1be>
          KindA  = HV;
 8014c3e:	4b3e      	ldr	r3, [pc, #248]	; (8014d38 <Update_Proc_All+0x2b0>)
 8014c40:	2201      	movs	r2, #1
 8014c42:	801a      	strh	r2, [r3, #0]
 8014c44:	e002      	b.n	8014c4c <Update_Proc_All+0x1c4>
        else
          KindA  = LV;                //Ch1ѡ���ѹ���ѹ����
 8014c46:	4b3c      	ldr	r3, [pc, #240]	; (8014d38 <Update_Proc_All+0x2b0>)
 8014c48:	2200      	movs	r2, #0
 8014c4a:	801a      	strh	r2, [r3, #0]

        CouplA = (List[COUPLING].Val)? AC : DC;                      // AC);  //AC/DC��Ϸ�ʽ
 8014c4c:	4b34      	ldr	r3, [pc, #208]	; (8014d20 <Update_Proc_All+0x298>)
 8014c4e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d001      	beq.n	8014c5a <Update_Proc_All+0x1d2>
 8014c56:	2200      	movs	r2, #0
 8014c58:	e000      	b.n	8014c5c <Update_Proc_All+0x1d4>
 8014c5a:	2202      	movs	r2, #2
 8014c5c:	4b37      	ldr	r3, [pc, #220]	; (8014d3c <Update_Proc_All+0x2b4>)
 8014c5e:	801a      	strh	r2, [r3, #0]
        BIOS_Ctrl(AiRANGE, KindA+CouplA+StateA);             //Ch1״̬ˢ��
 8014c60:	4b35      	ldr	r3, [pc, #212]	; (8014d38 <Update_Proc_All+0x2b0>)
 8014c62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014c66:	461a      	mov	r2, r3
 8014c68:	4b34      	ldr	r3, [pc, #208]	; (8014d3c <Update_Proc_All+0x2b4>)
 8014c6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014c6e:	4413      	add	r3, r2
 8014c70:	4a2f      	ldr	r2, [pc, #188]	; (8014d30 <Update_Proc_All+0x2a8>)
 8014c72:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014c76:	4413      	add	r3, r2
 8014c78:	4619      	mov	r1, r3
 8014c7a:	2007      	movs	r0, #7
 8014c7c:	f7f7 fb7a 	bl	800c374 <BIOS_Ctrl>
        AiPosi(List[V0_POSI].Val);                        //Ch1Ӳ����Ӧλ��
 8014c80:	4b27      	ldr	r3, [pc, #156]	; (8014d20 <Update_Proc_All+0x298>)
 8014c82:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8014c86:	b2db      	uxtb	r3, r3
 8014c88:	4618      	mov	r0, r3
 8014c8a:	f000 fa0f 	bl	80150ac <AiPosi>

        break;
 8014c8e:	e0e9      	b.n	8014e64 <Update_Proc_All+0x3dc>
      case TR_MODE:   // ˢ����ʾ������ʽ
      case FITTRIGG:  // ˢ����ʾ�Զ�������ֵ
      case THRESHOLD: // ˢ����ʾ������ֵ
      case SENSITIVE: // ˢ����ʾ����������
      case TR_TYPE:   // ˢ����ʾ�α���ʽ
        DispStatus();
 8014c90:	f7ff fbee 	bl	8014470 <DispStatus>
        SetColor(GRY, TCOLOR[TRG]);
 8014c94:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8014c98:	4619      	mov	r1, r3
 8014c9a:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014c9e:	f7f9 f82b 	bl	800dcf8 <SetColor>
        if(i == TR_MODE || i==SENSITIVE)
 8014ca2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014ca6:	2b0e      	cmp	r3, #14
 8014ca8:	d003      	beq.n	8014cb2 <Update_Proc_All+0x22a>
 8014caa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014cae:	2b11      	cmp	r3, #17
 8014cb0:	d11a      	bne.n	8014ce8 <Update_Proc_All+0x260>
        {
          Draw_Circle_D(INV, S_X[TR_MODE]-3, TITLE_Y_POS, 11, 0, 6*8);
 8014cb2:	23dd      	movs	r3, #221	; 0xdd
 8014cb4:	b29b      	uxth	r3, r3
 8014cb6:	3b03      	subs	r3, #3
 8014cb8:	b29b      	uxth	r3, r3
 8014cba:	b219      	sxth	r1, r3
 8014cbc:	2330      	movs	r3, #48	; 0x30
 8014cbe:	9301      	str	r3, [sp, #4]
 8014cc0:	2300      	movs	r3, #0
 8014cc2:	9300      	str	r3, [sp, #0]
 8014cc4:	230b      	movs	r3, #11
 8014cc6:	22e1      	movs	r2, #225	; 0xe1
 8014cc8:	2001      	movs	r0, #1
 8014cca:	f7f9 f903 	bl	800ded4 <Draw_Circle_D>
          DispStr10x14(S_X[TR_MODE], TITLE_Y_POS, INV+SYMB,(List[TR_MODE].Val?("D"):("C")));
 8014cce:	20dd      	movs	r0, #221	; 0xdd
 8014cd0:	4b13      	ldr	r3, [pc, #76]	; (8014d20 <Update_Proc_All+0x298>)
 8014cd2:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d001      	beq.n	8014cde <Update_Proc_All+0x256>
 8014cda:	4b19      	ldr	r3, [pc, #100]	; (8014d40 <Update_Proc_All+0x2b8>)
 8014cdc:	e000      	b.n	8014ce0 <Update_Proc_All+0x258>
 8014cde:	4b19      	ldr	r3, [pc, #100]	; (8014d44 <Update_Proc_All+0x2bc>)
 8014ce0:	2211      	movs	r2, #17
 8014ce2:	21e1      	movs	r1, #225	; 0xe1
 8014ce4:	f7f9 fa88 	bl	800e1f8 <DispStr10x14>
        }
        if(i == FITTRIGG)
 8014ce8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014cec:	2b0f      	cmp	r3, #15
 8014cee:	d132      	bne.n	8014d56 <Update_Proc_All+0x2ce>
        {
          DispStr10x14(S_X[FITTRIGG], TITLE_Y_POS, PRN+SYMB,(List[FITTRIGG].Val?("F"):("B")));
 8014cf0:	20cf      	movs	r0, #207	; 0xcf
 8014cf2:	4b0b      	ldr	r3, [pc, #44]	; (8014d20 <Update_Proc_All+0x298>)
 8014cf4:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d001      	beq.n	8014d00 <Update_Proc_All+0x278>
 8014cfc:	4b12      	ldr	r3, [pc, #72]	; (8014d48 <Update_Proc_All+0x2c0>)
 8014cfe:	e000      	b.n	8014d02 <Update_Proc_All+0x27a>
 8014d00:	4b09      	ldr	r3, [pc, #36]	; (8014d28 <Update_Proc_All+0x2a0>)
 8014d02:	2210      	movs	r2, #16
 8014d04:	21e1      	movs	r1, #225	; 0xe1
 8014d06:	f7f9 fa77 	bl	800e1f8 <DispStr10x14>
          if(List[FITTRIGG].Val)KEYTIME = 300;
 8014d0a:	4b05      	ldr	r3, [pc, #20]	; (8014d20 <Update_Proc_All+0x298>)
 8014d0c:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d01d      	beq.n	8014d50 <Update_Proc_All+0x2c8>
 8014d14:	4b0d      	ldr	r3, [pc, #52]	; (8014d4c <Update_Proc_All+0x2c4>)
 8014d16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8014d1a:	801a      	strh	r2, [r3, #0]
 8014d1c:	e01b      	b.n	8014d56 <Update_Proc_All+0x2ce>
 8014d1e:	bf00      	nop
 8014d20:	20000298 	.word	0x20000298
 8014d24:	08000958 	.word	0x08000958
 8014d28:	0800095c 	.word	0x0800095c
 8014d2c:	20000140 	.word	0x20000140
 8014d30:	20002862 	.word	0x20002862
 8014d34:	2000284a 	.word	0x2000284a
 8014d38:	20006886 	.word	0x20006886
 8014d3c:	20006888 	.word	0x20006888
 8014d40:	08000988 	.word	0x08000988
 8014d44:	0800098c 	.word	0x0800098c
 8014d48:	0800099c 	.word	0x0800099c
 8014d4c:	2000077e 	.word	0x2000077e
          else KEYTIME = 0;
 8014d50:	4b4c      	ldr	r3, [pc, #304]	; (8014e84 <Update_Proc_All+0x3fc>)
 8014d52:	2200      	movs	r2, #0
 8014d54:	801a      	strh	r2, [r3, #0]
        };
        ParamTab[VTx2]= ParamTab[P1x2]+2*List[THRESHOLD].Val;
 8014d56:	4b4c      	ldr	r3, [pc, #304]	; (8014e88 <Update_Proc_All+0x400>)
 8014d58:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8014d5c:	b29a      	uxth	r2, r3
 8014d5e:	4b4b      	ldr	r3, [pc, #300]	; (8014e8c <Update_Proc_All+0x404>)
 8014d60:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8014d64:	b29b      	uxth	r3, r3
 8014d66:	005b      	lsls	r3, r3, #1
 8014d68:	b29b      	uxth	r3, r3
 8014d6a:	4413      	add	r3, r2
 8014d6c:	b29b      	uxth	r3, r3
 8014d6e:	b21a      	sxth	r2, r3
 8014d70:	4b45      	ldr	r3, [pc, #276]	; (8014e88 <Update_Proc_All+0x400>)
 8014d72:	839a      	strh	r2, [r3, #28]
        Tmp  = List[SENSITIVE].Val;
 8014d74:	4b45      	ldr	r3, [pc, #276]	; (8014e8c <Update_Proc_All+0x404>)
 8014d76:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8014d7a:	60bb      	str	r3, [r7, #8]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8014d7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014d80:	4a43      	ldr	r2, [pc, #268]	; (8014e90 <Update_Proc_All+0x408>)
 8014d82:	5cd3      	ldrb	r3, [r2, r3]
 8014d84:	461c      	mov	r4, r3
 8014d86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014d8a:	4a42      	ldr	r2, [pc, #264]	; (8014e94 <Update_Proc_All+0x40c>)
 8014d8c:	5cd3      	ldrb	r3, [r2, r3]
 8014d8e:	4618      	mov	r0, r3
 8014d90:	f7fc ff9e 	bl	8011cd0 <Exp>
 8014d94:	4603      	mov	r3, r0
 8014d96:	fb03 f204 	mul.w	r2, r3, r4
 8014d9a:	68bb      	ldr	r3, [r7, #8]
 8014d9c:	fb02 f303 	mul.w	r3, r2, r3
 8014da0:	60bb      	str	r3, [r7, #8]
        Value2Str(NumStr, Tmp, V[2], 2, UNSIGN);
 8014da2:	2301      	movs	r3, #1
 8014da4:	9300      	str	r3, [sp, #0]
 8014da6:	2302      	movs	r3, #2
 8014da8:	4a3b      	ldr	r2, [pc, #236]	; (8014e98 <Update_Proc_All+0x410>)
 8014daa:	68b9      	ldr	r1, [r7, #8]
 8014dac:	483b      	ldr	r0, [pc, #236]	; (8014e9c <Update_Proc_All+0x414>)
 8014dae:	f7fc fe93 	bl	8011ad8 <Value2Str>
        DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, INV+SYMB,"E");
 8014db2:	20e7      	movs	r0, #231	; 0xe7
 8014db4:	4b3a      	ldr	r3, [pc, #232]	; (8014ea0 <Update_Proc_All+0x418>)
 8014db6:	2211      	movs	r2, #17
 8014db8:	21e1      	movs	r1, #225	; 0xe1
 8014dba:	f7f9 fa1d 	bl	800e1f8 <DispStr10x14>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  "     ");
 8014dbe:	23e7      	movs	r3, #231	; 0xe7
 8014dc0:	b29b      	uxth	r3, r3
 8014dc2:	3309      	adds	r3, #9
 8014dc4:	b29b      	uxth	r3, r3
 8014dc6:	b218      	sxth	r0, r3
 8014dc8:	4b36      	ldr	r3, [pc, #216]	; (8014ea4 <Update_Proc_All+0x41c>)
 8014dca:	2201      	movs	r2, #1
 8014dcc:	21e1      	movs	r1, #225	; 0xe1
 8014dce:	f7f8 ffab 	bl	800dd28 <DispStr>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  (char *)NumStr);
 8014dd2:	23e7      	movs	r3, #231	; 0xe7
 8014dd4:	b29b      	uxth	r3, r3
 8014dd6:	3309      	adds	r3, #9
 8014dd8:	b29b      	uxth	r3, r3
 8014dda:	b218      	sxth	r0, r3
 8014ddc:	4b2f      	ldr	r3, [pc, #188]	; (8014e9c <Update_Proc_All+0x414>)
 8014dde:	2201      	movs	r2, #1
 8014de0:	21e1      	movs	r1, #225	; 0xe1
 8014de2:	f7f8 ffa1 	bl	800dd28 <DispStr>
        ParamTab[VTF]=(List[TR_TYPE].Val)? L_HID : SHOW;
 8014de6:	4b29      	ldr	r3, [pc, #164]	; (8014e8c <Update_Proc_All+0x404>)
 8014de8:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d001      	beq.n	8014df4 <Update_Proc_All+0x36c>
 8014df0:	2202      	movs	r2, #2
 8014df2:	e000      	b.n	8014df6 <Update_Proc_All+0x36e>
 8014df4:	2200      	movs	r2, #0
 8014df6:	4b24      	ldr	r3, [pc, #144]	; (8014e88 <Update_Proc_All+0x400>)
 8014df8:	811a      	strh	r2, [r3, #8]
        break;
 8014dfa:	e033      	b.n	8014e64 <Update_Proc_All+0x3dc>

      case TIM_BASE:  // ˢ����ʾʱ����λ
        SetColor(GRY, TCOLOR[XN]);
 8014dfc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8014e00:	4619      	mov	r1, r3
 8014e02:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014e06:	f7f8 ff77 	bl	800dcf8 <SetColor>
        if(i == TIM_BASE)
 8014e0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014e0e:	2b07      	cmp	r3, #7
 8014e10:	d120      	bne.n	8014e54 <Update_Proc_All+0x3cc>
        {
          Draw_Circle_D(INV, S_X[i]-3, TITLE_Y_POS, 11, 2, 6*5);
 8014e12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014e16:	4a24      	ldr	r2, [pc, #144]	; (8014ea8 <Update_Proc_All+0x420>)
 8014e18:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8014e1c:	b29b      	uxth	r3, r3
 8014e1e:	3b03      	subs	r3, #3
 8014e20:	b29b      	uxth	r3, r3
 8014e22:	b219      	sxth	r1, r3
 8014e24:	231e      	movs	r3, #30
 8014e26:	9301      	str	r3, [sp, #4]
 8014e28:	2302      	movs	r3, #2
 8014e2a:	9300      	str	r3, [sp, #0]
 8014e2c:	230b      	movs	r3, #11
 8014e2e:	22e1      	movs	r2, #225	; 0xe1
 8014e30:	2001      	movs	r0, #1
 8014e32:	f7f9 f84f 	bl	800ded4 <Draw_Circle_D>
          DispStr(S_X[i], TITLE_Y_POS, INV, (char *)TimeBase_Str[List[TIM_BASE].Val]);
 8014e36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014e3a:	4a1b      	ldr	r2, [pc, #108]	; (8014ea8 <Update_Proc_All+0x420>)
 8014e3c:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8014e40:	4b12      	ldr	r3, [pc, #72]	; (8014e8c <Update_Proc_All+0x404>)
 8014e42:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014e46:	00db      	lsls	r3, r3, #3
 8014e48:	4a18      	ldr	r2, [pc, #96]	; (8014eac <Update_Proc_All+0x424>)
 8014e4a:	4413      	add	r3, r2
 8014e4c:	2201      	movs	r2, #1
 8014e4e:	21e1      	movs	r1, #225	; 0xe1
 8014e50:	f7f8 ff6a 	bl	800dd28 <DispStr>
        }
        Set_Base(List[TIM_BASE].Val);          // Ӳ������ɨ��ʱ����λ
 8014e54:	4b0d      	ldr	r3, [pc, #52]	; (8014e8c <Update_Proc_All+0x404>)
 8014e56:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	f7f7 fc06 	bl	800c66c <Set_Base>
      break;
 8014e60:	e000      	b.n	8014e64 <Update_Proc_All+0x3dc>

      }
    }
 8014e62:	bf00      	nop
  for(i=Y_RANGES; i<=STANDBY; i++){
 8014e64:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014e68:	b29b      	uxth	r3, r3
 8014e6a:	3301      	adds	r3, #1
 8014e6c:	b29b      	uxth	r3, r3
 8014e6e:	81fb      	strh	r3, [r7, #14]
 8014e70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014e74:	2b29      	cmp	r3, #41	; 0x29
 8014e76:	f77f ae3c 	ble.w	8014af2 <Update_Proc_All+0x6a>
  }
}
 8014e7a:	bf00      	nop
 8014e7c:	bf00      	nop
 8014e7e:	3714      	adds	r7, #20
 8014e80:	46bd      	mov	sp, r7
 8014e82:	bd90      	pop	{r4, r7, pc}
 8014e84:	2000077e 	.word	0x2000077e
 8014e88:	20000140 	.word	0x20000140
 8014e8c:	20000298 	.word	0x20000298
 8014e90:	08002130 	.word	0x08002130
 8014e94:	08002108 	.word	0x08002108
 8014e98:	08001d0c 	.word	0x08001d0c
 8014e9c:	2000283c 	.word	0x2000283c
 8014ea0:	08000998 	.word	0x08000998
 8014ea4:	08000990 	.word	0x08000990
 8014ea8:	0800215c 	.word	0x0800215c
 8014eac:	200001d0 	.word	0x200001d0

08014eb0 <Align_Set>:

/*******************************************************************************
 Align_Set:
*******************************************************************************/
void Align_Set(void)
{
 8014eb0:	b580      	push	{r7, lr}
 8014eb2:	b082      	sub	sp, #8
 8014eb4:	af00      	add	r7, sp, #0
  unsigned short i, TmpA = 0, StA = 0;
 8014eb6:	2300      	movs	r3, #0
 8014eb8:	807b      	strh	r3, [r7, #2]
 8014eba:	2300      	movs	r3, #0
 8014ebc:	80bb      	strh	r3, [r7, #4]

  Analys();
 8014ebe:	f000 f8b1 	bl	8015024 <Analys>
  for(i=0; i<100; i++)
 8014ec2:	2300      	movs	r3, #0
 8014ec4:	80fb      	strh	r3, [r7, #6]
 8014ec6:	e051      	b.n	8014f6c <Align_Set+0xbc>
  {
    AiPosi(100);
 8014ec8:	2064      	movs	r0, #100	; 0x64
 8014eca:	f000 f8ef 	bl	80150ac <AiPosi>
    HAL_Delay(10);                             // Wait 10mS
 8014ece:	200a      	movs	r0, #10
 8014ed0:	f003 fa80 	bl	80183d4 <HAL_Delay>
    Analys();
 8014ed4:	f000 f8a6 	bl	8015024 <Analys>
    TmpA = 2048-Vavg;
 8014ed8:	4b28      	ldr	r3, [pc, #160]	; (8014f7c <Align_Set+0xcc>)
 8014eda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014ede:	b29b      	uxth	r3, r3
 8014ee0:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8014ee4:	807b      	strh	r3, [r7, #2]

    if(TmpA != 0)
 8014ee6:	887b      	ldrh	r3, [r7, #2]
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d036      	beq.n	8014f5a <Align_Set+0xaa>
    {
      KpA[KindA+(StateA?1:0)] += 700*TmpA/2048;
 8014eec:	4b24      	ldr	r3, [pc, #144]	; (8014f80 <Align_Set+0xd0>)
 8014eee:	681a      	ldr	r2, [r3, #0]
 8014ef0:	4b24      	ldr	r3, [pc, #144]	; (8014f84 <Align_Set+0xd4>)
 8014ef2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014ef6:	4619      	mov	r1, r3
 8014ef8:	4b23      	ldr	r3, [pc, #140]	; (8014f88 <Align_Set+0xd8>)
 8014efa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	bf14      	ite	ne
 8014f02:	2301      	movne	r3, #1
 8014f04:	2300      	moveq	r3, #0
 8014f06:	b2db      	uxtb	r3, r3
 8014f08:	440b      	add	r3, r1
 8014f0a:	005b      	lsls	r3, r3, #1
 8014f0c:	4413      	add	r3, r2
 8014f0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014f12:	b29a      	uxth	r2, r3
 8014f14:	887b      	ldrh	r3, [r7, #2]
 8014f16:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8014f1a:	fb01 f303 	mul.w	r3, r1, r3
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	da01      	bge.n	8014f26 <Align_Set+0x76>
 8014f22:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8014f26:	12db      	asrs	r3, r3, #11
 8014f28:	b29b      	uxth	r3, r3
 8014f2a:	4413      	add	r3, r2
 8014f2c:	b299      	uxth	r1, r3
 8014f2e:	4b14      	ldr	r3, [pc, #80]	; (8014f80 <Align_Set+0xd0>)
 8014f30:	681a      	ldr	r2, [r3, #0]
 8014f32:	4b14      	ldr	r3, [pc, #80]	; (8014f84 <Align_Set+0xd4>)
 8014f34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014f38:	4618      	mov	r0, r3
 8014f3a:	4b13      	ldr	r3, [pc, #76]	; (8014f88 <Align_Set+0xd8>)
 8014f3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	bf14      	ite	ne
 8014f44:	2301      	movne	r3, #1
 8014f46:	2300      	moveq	r3, #0
 8014f48:	b2db      	uxtb	r3, r3
 8014f4a:	4403      	add	r3, r0
 8014f4c:	005b      	lsls	r3, r3, #1
 8014f4e:	4413      	add	r3, r2
 8014f50:	b20a      	sxth	r2, r1
 8014f52:	801a      	strh	r2, [r3, #0]
      StA = 0;
 8014f54:	2300      	movs	r3, #0
 8014f56:	80bb      	strh	r3, [r7, #4]
 8014f58:	e002      	b.n	8014f60 <Align_Set+0xb0>
    }
    else
      StA++;
 8014f5a:	88bb      	ldrh	r3, [r7, #4]
 8014f5c:	3301      	adds	r3, #1
 8014f5e:	80bb      	strh	r3, [r7, #4]

    if(StA > 4)
 8014f60:	88bb      	ldrh	r3, [r7, #4]
 8014f62:	2b04      	cmp	r3, #4
 8014f64:	d806      	bhi.n	8014f74 <Align_Set+0xc4>
  for(i=0; i<100; i++)
 8014f66:	88fb      	ldrh	r3, [r7, #6]
 8014f68:	3301      	adds	r3, #1
 8014f6a:	80fb      	strh	r3, [r7, #6]
 8014f6c:	88fb      	ldrh	r3, [r7, #6]
 8014f6e:	2b63      	cmp	r3, #99	; 0x63
 8014f70:	d9aa      	bls.n	8014ec8 <Align_Set+0x18>
 8014f72:	e000      	b.n	8014f76 <Align_Set+0xc6>
    	return;
 8014f74:	bf00      	nop
  }

}
 8014f76:	3708      	adds	r7, #8
 8014f78:	46bd      	mov	sp, r7
 8014f7a:	bd80      	pop	{r7, pc}
 8014f7c:	20002858 	.word	0x20002858
 8014f80:	20000578 	.word	0x20000578
 8014f84:	20006886 	.word	0x20006886
 8014f88:	20002862 	.word	0x20002862

08014f8c <Zero_Align>:

/*******************************************************************************
 Channel's zero alignment:
*******************************************************************************/
void Zero_Align(void)
{
 8014f8c:	b580      	push	{r7, lr}
 8014f8e:	af00      	add	r7, sp, #0
  GainA  = 0;//0x20;
 8014f90:	4b21      	ldr	r3, [pc, #132]	; (8015018 <Zero_Align+0x8c>)
 8014f92:	2200      	movs	r2, #0
 8014f94:	801a      	strh	r2, [r3, #0]
  KindA  = HV;
 8014f96:	4b21      	ldr	r3, [pc, #132]	; (801501c <Zero_Align+0x90>)
 8014f98:	2201      	movs	r2, #1
 8014f9a:	801a      	strh	r2, [r3, #0]
  StateA = ACT;
 8014f9c:	4b20      	ldr	r3, [pc, #128]	; (8015020 <Zero_Align+0x94>)
 8014f9e:	2204      	movs	r2, #4
 8014fa0:	801a      	strh	r2, [r3, #0]
  BIOS_Ctrl(AiRANGE, HV+AC+ACT);
 8014fa2:	2105      	movs	r1, #5
 8014fa4:	2007      	movs	r0, #7
 8014fa6:	f7f7 f9e5 	bl	800c374 <BIOS_Ctrl>
  AiPosi(100);
 8014faa:	2064      	movs	r0, #100	; 0x64
 8014fac:	f000 f87e 	bl	80150ac <AiPosi>
  HAL_Delay(1000);
 8014fb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014fb4:	f003 fa0e 	bl	80183d4 <HAL_Delay>
  Align_Set();
 8014fb8:	f7ff ff7a 	bl	8014eb0 <Align_Set>

  GainA  = 0;//0x20;
 8014fbc:	4b16      	ldr	r3, [pc, #88]	; (8015018 <Zero_Align+0x8c>)
 8014fbe:	2200      	movs	r2, #0
 8014fc0:	801a      	strh	r2, [r3, #0]
  KindA  = HV;
 8014fc2:	4b16      	ldr	r3, [pc, #88]	; (801501c <Zero_Align+0x90>)
 8014fc4:	2201      	movs	r2, #1
 8014fc6:	801a      	strh	r2, [r3, #0]
  StateA = GND;
 8014fc8:	4b15      	ldr	r3, [pc, #84]	; (8015020 <Zero_Align+0x94>)
 8014fca:	2200      	movs	r2, #0
 8014fcc:	801a      	strh	r2, [r3, #0]
  BIOS_Ctrl(AiRANGE, HV+AC+GND);
 8014fce:	2101      	movs	r1, #1
 8014fd0:	2007      	movs	r0, #7
 8014fd2:	f7f7 f9cf 	bl	800c374 <BIOS_Ctrl>
  AiPosi(100);
 8014fd6:	2064      	movs	r0, #100	; 0x64
 8014fd8:	f000 f868 	bl	80150ac <AiPosi>
  HAL_Delay(1000);
 8014fdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014fe0:	f003 f9f8 	bl	80183d4 <HAL_Delay>
  Align_Set();
 8014fe4:	f7ff ff64 	bl	8014eb0 <Align_Set>

  GainA  = 0;//0x20;
 8014fe8:	4b0b      	ldr	r3, [pc, #44]	; (8015018 <Zero_Align+0x8c>)
 8014fea:	2200      	movs	r2, #0
 8014fec:	801a      	strh	r2, [r3, #0]
  KindA  = LV;
 8014fee:	4b0b      	ldr	r3, [pc, #44]	; (801501c <Zero_Align+0x90>)
 8014ff0:	2200      	movs	r2, #0
 8014ff2:	801a      	strh	r2, [r3, #0]
  StateA = GND;
 8014ff4:	4b0a      	ldr	r3, [pc, #40]	; (8015020 <Zero_Align+0x94>)
 8014ff6:	2200      	movs	r2, #0
 8014ff8:	801a      	strh	r2, [r3, #0]
  BIOS_Ctrl(AiRANGE, LV+AC+GND);
 8014ffa:	2100      	movs	r1, #0
 8014ffc:	2007      	movs	r0, #7
 8014ffe:	f7f7 f9b9 	bl	800c374 <BIOS_Ctrl>
  AiPosi(100);
 8015002:	2064      	movs	r0, #100	; 0x64
 8015004:	f000 f852 	bl	80150ac <AiPosi>
  HAL_Delay(1000);
 8015008:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801500c:	f003 f9e2 	bl	80183d4 <HAL_Delay>
  Align_Set();
 8015010:	f7ff ff4e 	bl	8014eb0 <Align_Set>

}
 8015014:	bf00      	nop
 8015016:	bd80      	pop	{r7, pc}
 8015018:	2000284a 	.word	0x2000284a
 801501c:	20006886 	.word	0x20006886
 8015020:	20002862 	.word	0x20002862

08015024 <Analys>:

/*******************************************************************************
 Channel's error analys
*******************************************************************************/
void Analys(void)
{
 8015024:	b580      	push	{r7, lr}
 8015026:	b082      	sub	sp, #8
 8015028:	af00      	add	r7, sp, #0
  unsigned i, SumA = 0;
 801502a:	2300      	movs	r3, #0
 801502c:	603b      	str	r3, [r7, #0]

  BIOS_Ctrl(SMPL_ST, DISABLE);
 801502e:	2100      	movs	r1, #0
 8015030:	2004      	movs	r0, #4
 8015032:	f7f7 f99f 	bl	800c374 <BIOS_Ctrl>
  BIOS_Ctrl(SMPLTIM, 720-1);      // 72MHz/360 = 400kHz = 2.5uS
 8015036:	f240 21cf 	movw	r1, #719	; 0x2cf
 801503a:	2005      	movs	r0, #5
 801503c:	f7f7 f99a 	bl	800c374 <BIOS_Ctrl>
  BIOS_Ctrl(SMPLNUM, 4096);       // 8192
 8015040:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8015044:	2006      	movs	r0, #6
 8015046:	f7f7 f995 	bl	800c374 <BIOS_Ctrl>
  BIOS_Ctrl(SMPL_ST, ENABLE);
 801504a:	2101      	movs	r1, #1
 801504c:	2004      	movs	r0, #4
 801504e:	f7f7 f991 	bl	800c374 <BIOS_Ctrl>
  while((BIOS_Info(CHA_CNT) != 0)) {};
 8015052:	bf00      	nop
 8015054:	2000      	movs	r0, #0
 8015056:	f7f7 f977 	bl	800c348 <BIOS_Info>
 801505a:	4603      	mov	r3, r0
 801505c:	2b00      	cmp	r3, #0
 801505e:	d1f9      	bne.n	8015054 <Analys+0x30>
  for(i=2; i<4000+2; i++){
 8015060:	2302      	movs	r3, #2
 8015062:	607b      	str	r3, [r7, #4]
 8015064:	e00a      	b.n	801507c <Analys+0x58>
    SumA += Sampl[i];
 8015066:	4a0e      	ldr	r2, [pc, #56]	; (80150a0 <Analys+0x7c>)
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801506e:	461a      	mov	r2, r3
 8015070:	683b      	ldr	r3, [r7, #0]
 8015072:	4413      	add	r3, r2
 8015074:	603b      	str	r3, [r7, #0]
  for(i=2; i<4000+2; i++){
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	3301      	adds	r3, #1
 801507a:	607b      	str	r3, [r7, #4]
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	f640 72a1 	movw	r2, #4001	; 0xfa1
 8015082:	4293      	cmp	r3, r2
 8015084:	d9ef      	bls.n	8015066 <Analys+0x42>
  }
  Vavg = SumA/4000; // 4000
 8015086:	683b      	ldr	r3, [r7, #0]
 8015088:	4a06      	ldr	r2, [pc, #24]	; (80150a4 <Analys+0x80>)
 801508a:	fba2 2303 	umull	r2, r3, r2, r3
 801508e:	0a1b      	lsrs	r3, r3, #8
 8015090:	b21a      	sxth	r2, r3
 8015092:	4b05      	ldr	r3, [pc, #20]	; (80150a8 <Analys+0x84>)
 8015094:	801a      	strh	r2, [r3, #0]
}
 8015096:	bf00      	nop
 8015098:	3708      	adds	r7, #8
 801509a:	46bd      	mov	sp, r7
 801509c:	bd80      	pop	{r7, pc}
 801509e:	bf00      	nop
 80150a0:	20002870 	.word	0x20002870
 80150a4:	10624dd3 	.word	0x10624dd3
 80150a8:	20002858 	.word	0x20002858

080150ac <AiPosi>:

/*******************************************************************************
 DevCtrl:  offset
*******************************************************************************/
void AiPosi(char Val)
{
 80150ac:	b580      	push	{r7, lr}
 80150ae:	b082      	sub	sp, #8
 80150b0:	af00      	add	r7, sp, #0
 80150b2:	4603      	mov	r3, r0
 80150b4:	71fb      	strb	r3, [r7, #7]
   BIOS_Ctrl(AOFFSET,((char)Val-100)*(KpA[KindA+(StateA?1:0)]/2)*GK[GainA]/KgA[KindA+(StateA?1:0)]+KpA[KindA+(StateA?1:0)]);
 80150b6:	79fb      	ldrb	r3, [r7, #7]
 80150b8:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80150bc:	4b28      	ldr	r3, [pc, #160]	; (8015160 <AiPosi+0xb4>)
 80150be:	6819      	ldr	r1, [r3, #0]
 80150c0:	4b28      	ldr	r3, [pc, #160]	; (8015164 <AiPosi+0xb8>)
 80150c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80150c6:	4618      	mov	r0, r3
 80150c8:	4b27      	ldr	r3, [pc, #156]	; (8015168 <AiPosi+0xbc>)
 80150ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	bf14      	ite	ne
 80150d2:	2301      	movne	r3, #1
 80150d4:	2300      	moveq	r3, #0
 80150d6:	b2db      	uxtb	r3, r3
 80150d8:	4403      	add	r3, r0
 80150da:	005b      	lsls	r3, r3, #1
 80150dc:	440b      	add	r3, r1
 80150de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80150e2:	0fd9      	lsrs	r1, r3, #31
 80150e4:	440b      	add	r3, r1
 80150e6:	105b      	asrs	r3, r3, #1
 80150e8:	b21b      	sxth	r3, r3
 80150ea:	fb03 f302 	mul.w	r3, r3, r2
 80150ee:	4a1f      	ldr	r2, [pc, #124]	; (801516c <AiPosi+0xc0>)
 80150f0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80150f4:	4611      	mov	r1, r2
 80150f6:	4a1e      	ldr	r2, [pc, #120]	; (8015170 <AiPosi+0xc4>)
 80150f8:	5c52      	ldrb	r2, [r2, r1]
 80150fa:	fb02 f303 	mul.w	r3, r2, r3
 80150fe:	4a1d      	ldr	r2, [pc, #116]	; (8015174 <AiPosi+0xc8>)
 8015100:	6811      	ldr	r1, [r2, #0]
 8015102:	4a18      	ldr	r2, [pc, #96]	; (8015164 <AiPosi+0xb8>)
 8015104:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015108:	4610      	mov	r0, r2
 801510a:	4a17      	ldr	r2, [pc, #92]	; (8015168 <AiPosi+0xbc>)
 801510c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015110:	2a00      	cmp	r2, #0
 8015112:	bf14      	ite	ne
 8015114:	2201      	movne	r2, #1
 8015116:	2200      	moveq	r2, #0
 8015118:	b2d2      	uxtb	r2, r2
 801511a:	4402      	add	r2, r0
 801511c:	0052      	lsls	r2, r2, #1
 801511e:	440a      	add	r2, r1
 8015120:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015124:	fb93 f3f2 	sdiv	r3, r3, r2
 8015128:	4a0d      	ldr	r2, [pc, #52]	; (8015160 <AiPosi+0xb4>)
 801512a:	6811      	ldr	r1, [r2, #0]
 801512c:	4a0d      	ldr	r2, [pc, #52]	; (8015164 <AiPosi+0xb8>)
 801512e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015132:	4610      	mov	r0, r2
 8015134:	4a0c      	ldr	r2, [pc, #48]	; (8015168 <AiPosi+0xbc>)
 8015136:	f9b2 2000 	ldrsh.w	r2, [r2]
 801513a:	2a00      	cmp	r2, #0
 801513c:	bf14      	ite	ne
 801513e:	2201      	movne	r2, #1
 8015140:	2200      	moveq	r2, #0
 8015142:	b2d2      	uxtb	r2, r2
 8015144:	4402      	add	r2, r0
 8015146:	0052      	lsls	r2, r2, #1
 8015148:	440a      	add	r2, r1
 801514a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801514e:	4413      	add	r3, r2
 8015150:	4619      	mov	r1, r3
 8015152:	2008      	movs	r0, #8
 8015154:	f7f7 f90e 	bl	800c374 <BIOS_Ctrl>
}
 8015158:	bf00      	nop
 801515a:	3708      	adds	r7, #8
 801515c:	46bd      	mov	sp, r7
 801515e:	bd80      	pop	{r7, pc}
 8015160:	20000578 	.word	0x20000578
 8015164:	20006886 	.word	0x20006886
 8015168:	20002862 	.word	0x20002862
 801516c:	2000284a 	.word	0x2000284a
 8015170:	20000560 	.word	0x20000560
 8015174:	2000057c 	.word	0x2000057c

08015178 <WaveProcess>:
/*******************************************************************************
 WaveProcess: ���㴦���������������
*******************************************************************************/

void WaveProcess(void)
{
 8015178:	b580      	push	{r7, lr}
 801517a:	b094      	sub	sp, #80	; 0x50
 801517c:	af00      	add	r7, sp, #0
  //------------------ ����Ԥ����,���ɽ���ָ��������ݵ���Ч�� -----------------//

  short* Ain  = (short*)&Sampl[2];
 801517e:	4bb0      	ldr	r3, [pc, #704]	; (8015440 <WaveProcess+0x2c8>)
 8015180:	617b      	str	r3, [r7, #20]

  int  Ak = (KgA[KindA+(StateA?1:0)]*4)/GK[GainA];
 8015182:	4bb0      	ldr	r3, [pc, #704]	; (8015444 <WaveProcess+0x2cc>)
 8015184:	681a      	ldr	r2, [r3, #0]
 8015186:	4bb0      	ldr	r3, [pc, #704]	; (8015448 <WaveProcess+0x2d0>)
 8015188:	f9b3 3000 	ldrsh.w	r3, [r3]
 801518c:	4619      	mov	r1, r3
 801518e:	4baf      	ldr	r3, [pc, #700]	; (801544c <WaveProcess+0x2d4>)
 8015190:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015194:	2b00      	cmp	r3, #0
 8015196:	bf14      	ite	ne
 8015198:	2301      	movne	r3, #1
 801519a:	2300      	moveq	r3, #0
 801519c:	b2db      	uxtb	r3, r3
 801519e:	440b      	add	r3, r1
 80151a0:	005b      	lsls	r3, r3, #1
 80151a2:	4413      	add	r3, r2
 80151a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80151a8:	009b      	lsls	r3, r3, #2
 80151aa:	4aa9      	ldr	r2, [pc, #676]	; (8015450 <WaveProcess+0x2d8>)
 80151ac:	f9b2 2000 	ldrsh.w	r2, [r2]
 80151b0:	4611      	mov	r1, r2
 80151b2:	4aa8      	ldr	r2, [pc, #672]	; (8015454 <WaveProcess+0x2dc>)
 80151b4:	5c52      	ldrb	r2, [r2, r1]
 80151b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80151ba:	613b      	str	r3, [r7, #16]
  short  i, n, k, p = 0;
 80151bc:	2300      	movs	r3, #0
 80151be:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

  short  VtlA, ViA, VthA, VeA, VpA, VoA;            // VtA,

  short  DtA   = 0, TslA  =  0, TshA = 0, StA  = 2;
 80151c2:	2300      	movs	r3, #0
 80151c4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80151c6:	2300      	movs	r3, #0
 80151c8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80151ca:	2300      	movs	r3, #0
 80151cc:	873b      	strh	r3, [r7, #56]	; 0x38
 80151ce:	2302      	movs	r3, #2
 80151d0:	86fb      	strh	r3, [r7, #54]	; 0x36
  short  FallA = 0, RiseA =  0, UpA  = 0, DnA  = 0;
 80151d2:	2300      	movs	r3, #0
 80151d4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80151d6:	2300      	movs	r3, #0
 80151d8:	867b      	strh	r3, [r7, #50]	; 0x32
 80151da:	2300      	movs	r3, #0
 80151dc:	863b      	strh	r3, [r7, #48]	; 0x30
 80151de:	2300      	movs	r3, #0
 80151e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
  int  MaxA  = 0, MinA  = ~0, SumA = 0, SsqA = 0; // ���/��Сֵ,�ۼ�/ƽ���� = 0
 80151e2:	2300      	movs	r3, #0
 80151e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80151e6:	f04f 33ff 	mov.w	r3, #4294967295
 80151ea:	627b      	str	r3, [r7, #36]	; 0x24
 80151ec:	2300      	movs	r3, #0
 80151ee:	623b      	str	r3, [r7, #32]
 80151f0:	2300      	movs	r3, #0
 80151f2:	61fb      	str	r3, [r7, #28]

  short  Dpth  = DEPTH[List[SMPL_DPTH].Val] - 1;
 80151f4:	4b98      	ldr	r3, [pc, #608]	; (8015458 <WaveProcess+0x2e0>)
 80151f6:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 80151fa:	461a      	mov	r2, r3
 80151fc:	4b97      	ldr	r3, [pc, #604]	; (801545c <WaveProcess+0x2e4>)
 80151fe:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8015202:	b29b      	uxth	r3, r3
 8015204:	3b01      	subs	r3, #1
 8015206:	b29b      	uxth	r3, r3
 8015208:	837b      	strh	r3, [r7, #26]
  short  Tp    = PRE_SMPL+1, Tm = List[TR_MODE].Val & 1;
 801520a:	2397      	movs	r3, #151	; 0x97
 801520c:	81fb      	strh	r3, [r7, #14]
 801520e:	4b92      	ldr	r3, [pc, #584]	; (8015458 <WaveProcess+0x2e0>)
 8015210:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8015214:	f003 0301 	and.w	r3, r3, #1
 8015218:	81bb      	strh	r3, [r7, #12]
  short  Ks    = KS[List[TIM_BASE].Val],  Sm = List[SYNCMODE].Val;
 801521a:	4b8f      	ldr	r3, [pc, #572]	; (8015458 <WaveProcess+0x2e0>)
 801521c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015220:	461a      	mov	r2, r3
 8015222:	4b8f      	ldr	r3, [pc, #572]	; (8015460 <WaveProcess+0x2e8>)
 8015224:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8015228:	817b      	strh	r3, [r7, #10]
 801522a:	4b8b      	ldr	r3, [pc, #556]	; (8015458 <WaveProcess+0x2e0>)
 801522c:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8015230:	813b      	strh	r3, [r7, #8]
  char   Ext = List[EXT_REFN].Val;
 8015232:	4b89      	ldr	r3, [pc, #548]	; (8015458 <WaveProcess+0x2e0>)
 8015234:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8015238:	71fb      	strb	r3, [r7, #7]

//---------------------- ��������Ԥ����,����ʵ�ʴ�����ֵ ---------------------//
  if(Status == STOP)
 801523a:	4b8a      	ldr	r3, [pc, #552]	; (8015464 <WaveProcess+0x2ec>)
 801523c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015240:	2b01      	cmp	r3, #1
 8015242:	d13c      	bne.n	80152be <WaveProcess+0x146>
  {
    VtlA  = (((Tri_Posi + Ch1_Posi - List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 8015244:	4b88      	ldr	r3, [pc, #544]	; (8015468 <WaveProcess+0x2f0>)
 8015246:	f9b3 3000 	ldrsh.w	r3, [r3]
 801524a:	461a      	mov	r2, r3
 801524c:	4b87      	ldr	r3, [pc, #540]	; (801546c <WaveProcess+0x2f4>)
 801524e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015252:	4413      	add	r3, r2
 8015254:	4a80      	ldr	r2, [pc, #512]	; (8015458 <WaveProcess+0x2e0>)
 8015256:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 801525a:	1a9b      	subs	r3, r3, r2
 801525c:	3b64      	subs	r3, #100	; 0x64
 801525e:	031a      	lsls	r2, r3, #12
 8015260:	693b      	ldr	r3, [r7, #16]
 8015262:	fb92 f3f3 	sdiv	r3, r2, r3
 8015266:	b29b      	uxth	r3, r3
 8015268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801526c:	b29b      	uxth	r3, r3
 801526e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    VthA  = (((Tri_Posi + Ch1_Posi + List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 8015272:	4b7d      	ldr	r3, [pc, #500]	; (8015468 <WaveProcess+0x2f0>)
 8015274:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015278:	461a      	mov	r2, r3
 801527a:	4b7c      	ldr	r3, [pc, #496]	; (801546c <WaveProcess+0x2f4>)
 801527c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015280:	4413      	add	r3, r2
 8015282:	4a75      	ldr	r2, [pc, #468]	; (8015458 <WaveProcess+0x2e0>)
 8015284:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 8015288:	4413      	add	r3, r2
 801528a:	3b64      	subs	r3, #100	; 0x64
 801528c:	031a      	lsls	r2, r3, #12
 801528e:	693b      	ldr	r3, [r7, #16]
 8015290:	fb92 f3f3 	sdiv	r3, r2, r3
 8015294:	b29b      	uxth	r3, r3
 8015296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801529a:	b29b      	uxth	r3, r3
 801529c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    VpA   = ((((List[V0_POSI].Val)       -100)<<12)/Ak)+2048; //??
 80152a0:	4b6d      	ldr	r3, [pc, #436]	; (8015458 <WaveProcess+0x2e0>)
 80152a2:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80152a6:	3b64      	subs	r3, #100	; 0x64
 80152a8:	031a      	lsls	r2, r3, #12
 80152aa:	693b      	ldr	r3, [r7, #16]
 80152ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80152b0:	b29b      	uxth	r3, r3
 80152b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80152b6:	b29b      	uxth	r3, r3
 80152b8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80152bc:	e03b      	b.n	8015336 <WaveProcess+0x1be>
  }
  else
  {
    VtlA  = (((List[THRESHOLD].Val + List[V0_POSI].Val - List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 80152be:	4b66      	ldr	r3, [pc, #408]	; (8015458 <WaveProcess+0x2e0>)
 80152c0:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 80152c4:	461a      	mov	r2, r3
 80152c6:	4b64      	ldr	r3, [pc, #400]	; (8015458 <WaveProcess+0x2e0>)
 80152c8:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80152cc:	4413      	add	r3, r2
 80152ce:	4a62      	ldr	r2, [pc, #392]	; (8015458 <WaveProcess+0x2e0>)
 80152d0:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 80152d4:	1a9b      	subs	r3, r3, r2
 80152d6:	3b64      	subs	r3, #100	; 0x64
 80152d8:	031a      	lsls	r2, r3, #12
 80152da:	693b      	ldr	r3, [r7, #16]
 80152dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80152e0:	b29b      	uxth	r3, r3
 80152e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80152e6:	b29b      	uxth	r3, r3
 80152e8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    VthA  = (((List[THRESHOLD].Val + List[V0_POSI].Val + List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 80152ec:	4b5a      	ldr	r3, [pc, #360]	; (8015458 <WaveProcess+0x2e0>)
 80152ee:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 80152f2:	461a      	mov	r2, r3
 80152f4:	4b58      	ldr	r3, [pc, #352]	; (8015458 <WaveProcess+0x2e0>)
 80152f6:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80152fa:	4413      	add	r3, r2
 80152fc:	4a56      	ldr	r2, [pc, #344]	; (8015458 <WaveProcess+0x2e0>)
 80152fe:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 8015302:	4413      	add	r3, r2
 8015304:	3b64      	subs	r3, #100	; 0x64
 8015306:	031a      	lsls	r2, r3, #12
 8015308:	693b      	ldr	r3, [r7, #16]
 801530a:	fb92 f3f3 	sdiv	r3, r2, r3
 801530e:	b29b      	uxth	r3, r3
 8015310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015314:	b29b      	uxth	r3, r3
 8015316:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    VpA   = ((((List[V0_POSI].Val)       -100)<<12)/Ak)+2048;
 801531a:	4b4f      	ldr	r3, [pc, #316]	; (8015458 <WaveProcess+0x2e0>)
 801531c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015320:	3b64      	subs	r3, #100	; 0x64
 8015322:	031a      	lsls	r2, r3, #12
 8015324:	693b      	ldr	r3, [r7, #16]
 8015326:	fb92 f3f3 	sdiv	r3, r2, r3
 801532a:	b29b      	uxth	r3, r3
 801532c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015330:	b29b      	uxth	r3, r3
 8015332:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  }
//-------------------------- ��������ͳ������� ------------------------------//


  if(((List[SYNCMODE].Val == NONE)||(List[SYNCMODE].Val == SCAN))
 8015336:	4b48      	ldr	r3, [pc, #288]	; (8015458 <WaveProcess+0x2e0>)
 8015338:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 801533c:	2b05      	cmp	r3, #5
 801533e:	d004      	beq.n	801534a <WaveProcess+0x1d2>
 8015340:	4b45      	ldr	r3, [pc, #276]	; (8015458 <WaveProcess+0x2e0>)
 8015342:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8015346:	2b01      	cmp	r3, #1
 8015348:	d10b      	bne.n	8015362 <WaveProcess+0x1ea>
     &&(List[TIM_BASE].Val>11))
 801534a:	4b43      	ldr	r3, [pc, #268]	; (8015458 <WaveProcess+0x2e0>)
 801534c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015350:	2b0b      	cmp	r3, #11
 8015352:	dd06      	ble.n	8015362 <WaveProcess+0x1ea>
  {
    Dpth = 302;
 8015354:	f44f 7397 	mov.w	r3, #302	; 0x12e
 8015358:	837b      	strh	r3, [r7, #26]
    List[VIEWPOSI].Val = 0;
 801535a:	4b3f      	ldr	r3, [pc, #252]	; (8015458 <WaveProcess+0x2e0>)
 801535c:	2200      	movs	r2, #0
 801535e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  for(i=0; i<Dpth; i++)
 8015362:	2300      	movs	r3, #0
 8015364:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8015368:	e0ad      	b.n	80154c6 <WaveProcess+0x34e>
  {
	n = __HAL_DMA_GET_COUNTER(&hdma_adc1);//    DMA1_Channel1->CNDTR;              //DMA_CH_A->CNDTR; //DMA1_CNDTR1
 801536a:	4b41      	ldr	r3, [pc, #260]	; (8015470 <WaveProcess+0x2f8>)
 801536c:	681b      	ldr	r3, [r3, #0]
 801536e:	685b      	ldr	r3, [r3, #4]
 8015370:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    if(i >= (Dpth-n)) break;      // ����һ���ڵȴ�A/Dת�����
 8015374:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8015378:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 801537c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015380:	1acb      	subs	r3, r1, r3
 8015382:	429a      	cmp	r2, r3
 8015384:	f280 80a7 	bge.w	80154d6 <WaveProcess+0x35e>
    ViA = Ain[i];
 8015388:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801538c:	005b      	lsls	r3, r3, #1
 801538e:	697a      	ldr	r2, [r7, #20]
 8015390:	4413      	add	r3, r2
 8015392:	881b      	ldrh	r3, [r3, #0]
 8015394:	80bb      	strh	r3, [r7, #4]

    if(MaxA < ViA) MaxA = ViA;    // ͳ�����ֵ
 8015396:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801539a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801539c:	429a      	cmp	r2, r3
 801539e:	da02      	bge.n	80153a6 <WaveProcess+0x22e>
 80153a0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80153a4:	62bb      	str	r3, [r7, #40]	; 0x28
    if(MinA > ViA) MinA = ViA;    // ͳ����Сֵ
 80153a6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80153aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80153ac:	429a      	cmp	r2, r3
 80153ae:	dd02      	ble.n	80153b6 <WaveProcess+0x23e>
 80153b0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80153b4:	627b      	str	r3, [r7, #36]	; 0x24
    SumA += ViA;                  // ͳ���ۼӺ�
 80153b6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80153ba:	6a3a      	ldr	r2, [r7, #32]
 80153bc:	4413      	add	r3, r2
 80153be:	623b      	str	r3, [r7, #32]
    SsqA +=(ViA-VpA)*(ViA-VpA);   // ͳ��ƽ����
 80153c0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80153c4:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80153c8:	1ad3      	subs	r3, r2, r3
 80153ca:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80153ce:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 80153d2:	1a8a      	subs	r2, r1, r2
 80153d4:	fb02 f303 	mul.w	r3, r2, r3
 80153d8:	69fa      	ldr	r2, [r7, #28]
 80153da:	4413      	add	r3, r2
 80153dc:	61fb      	str	r3, [r7, #28]


    if(StA == 2) DtA = 0;                  // ����CH_A�׸�������ǰ��ʱ���ۼ�
 80153de:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80153e2:	2b02      	cmp	r3, #2
 80153e4:	d102      	bne.n	80153ec <WaveProcess+0x274>
 80153e6:	2300      	movs	r3, #0
 80153e8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80153ea:	e005      	b.n	80153f8 <WaveProcess+0x280>
    else         DtA++;
 80153ec:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 80153f0:	b29b      	uxth	r3, r3
 80153f2:	3301      	adds	r3, #1
 80153f4:	b29b      	uxth	r3, r3
 80153f6:	87bb      	strh	r3, [r7, #60]	; 0x3c

    if(ViA > VthA){                        // ViA ������ֵ����
 80153f8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80153fc:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8015400:	429a      	cmp	r2, r3
 8015402:	dd37      	ble.n	8015474 <WaveProcess+0x2fc>
      if(StA == 0){
 8015404:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8015408:	2b00      	cmp	r3, #0
 801540a:	d115      	bne.n	8015438 <WaveProcess+0x2c0>
        TslA += DtA; DtA = 0; RiseA++;     // CH_A��λʱ���ۼƣ��������ۼ�
 801540c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801540e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015410:	4413      	add	r3, r2
 8015412:	b29b      	uxth	r3, r3
 8015414:	877b      	strh	r3, [r7, #58]	; 0x3a
 8015416:	2300      	movs	r3, #0
 8015418:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801541a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801541e:	b29b      	uxth	r3, r3
 8015420:	3301      	adds	r3, #1
 8015422:	b29b      	uxth	r3, r3
 8015424:	867b      	strh	r3, [r7, #50]	; 0x32
        if(UpA < Tp) UpA = i;              // ��¼Ԥ������CH_A��һ��������λ��
 8015426:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 801542a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801542e:	429a      	cmp	r2, r3
 8015430:	da02      	bge.n	8015438 <WaveProcess+0x2c0>
 8015432:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015436:	863b      	strh	r3, [r7, #48]	; 0x30
      }
      StA = 1;                             // ��ǰCH_A״̬��Ϊ��λ
 8015438:	2301      	movs	r3, #1
 801543a:	86fb      	strh	r3, [r7, #54]	; 0x36
 801543c:	e03c      	b.n	80154b8 <WaveProcess+0x340>
 801543e:	bf00      	nop
 8015440:	20002874 	.word	0x20002874
 8015444:	2000057c 	.word	0x2000057c
 8015448:	20006886 	.word	0x20006886
 801544c:	20002862 	.word	0x20002862
 8015450:	2000284a 	.word	0x2000284a
 8015454:	20000560 	.word	0x20000560
 8015458:	20000298 	.word	0x20000298
 801545c:	08002270 	.word	0x08002270
 8015460:	08002278 	.word	0x08002278
 8015464:	200007a0 	.word	0x200007a0
 8015468:	20002860 	.word	0x20002860
 801546c:	20006884 	.word	0x20006884
 8015470:	20006b0c 	.word	0x20006b0c
    } else if(ViA < VtlA){                 // ViA ������ֵ����
 8015474:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8015478:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 801547c:	429a      	cmp	r2, r3
 801547e:	da1b      	bge.n	80154b8 <WaveProcess+0x340>
      if(StA == 1){
 8015480:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8015484:	2b01      	cmp	r3, #1
 8015486:	d115      	bne.n	80154b4 <WaveProcess+0x33c>
        TshA += DtA; DtA = 0; FallA++;     // CH_A��λʱ���ۼƣ��½����ۼ�
 8015488:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801548a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801548c:	4413      	add	r3, r2
 801548e:	b29b      	uxth	r3, r3
 8015490:	873b      	strh	r3, [r7, #56]	; 0x38
 8015492:	2300      	movs	r3, #0
 8015494:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8015496:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801549a:	b29b      	uxth	r3, r3
 801549c:	3301      	adds	r3, #1
 801549e:	b29b      	uxth	r3, r3
 80154a0:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(DnA < Tp) DnA = i;              // ��¼Ԥ������CH_A��һ���½���λ��
 80154a2:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80154a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80154aa:	429a      	cmp	r2, r3
 80154ac:	da02      	bge.n	80154b4 <WaveProcess+0x33c>
 80154ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80154b2:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      StA = 0;                             // ��ǰCH_A״̬��Ϊ��λ
 80154b4:	2300      	movs	r3, #0
 80154b6:	86fb      	strh	r3, [r7, #54]	; 0x36
  for(i=0; i<Dpth; i++)
 80154b8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80154bc:	b29b      	uxth	r3, r3
 80154be:	3301      	adds	r3, #1
 80154c0:	b29b      	uxth	r3, r3
 80154c2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80154c6:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 80154ca:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80154ce:	429a      	cmp	r2, r3
 80154d0:	f6ff af4b 	blt.w	801536a <WaveProcess+0x1f2>
 80154d4:	e000      	b.n	80154d8 <WaveProcess+0x360>
    if(i >= (Dpth-n)) break;      // ����һ���ڵȴ�A/Dת�����
 80154d6:	bf00      	nop
    }
  }
  if(n == 0)
 80154d8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d14f      	bne.n	8015580 <WaveProcess+0x408>
  {                              // ����ȫ����ɺ��������ֵ i == Dpth
    Vmax = MaxA; Vmin = MinA; Vavg = SumA/i; Vssq = SsqA/(i+1);
 80154e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154e2:	b21a      	sxth	r2, r3
 80154e4:	4b9a      	ldr	r3, [pc, #616]	; (8015750 <WaveProcess+0x5d8>)
 80154e6:	801a      	strh	r2, [r3, #0]
 80154e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154ea:	b21a      	sxth	r2, r3
 80154ec:	4b99      	ldr	r3, [pc, #612]	; (8015754 <WaveProcess+0x5dc>)
 80154ee:	801a      	strh	r2, [r3, #0]
 80154f0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80154f4:	6a3a      	ldr	r2, [r7, #32]
 80154f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80154fa:	b21a      	sxth	r2, r3
 80154fc:	4b96      	ldr	r3, [pc, #600]	; (8015758 <WaveProcess+0x5e0>)
 80154fe:	801a      	strh	r2, [r3, #0]
 8015500:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015504:	3301      	adds	r3, #1
 8015506:	69fa      	ldr	r2, [r7, #28]
 8015508:	fb92 f3f3 	sdiv	r3, r2, r3
 801550c:	4a93      	ldr	r2, [pc, #588]	; (801575c <WaveProcess+0x5e4>)
 801550e:	6013      	str	r3, [r2, #0]
    Vrms = (Sqrt32(Vssq)); Vmid = (Vmax + Vmin)/2; Vpp = Vmax - Vmin;
 8015510:	4b92      	ldr	r3, [pc, #584]	; (801575c <WaveProcess+0x5e4>)
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	4618      	mov	r0, r3
 8015516:	f7fc fbf5 	bl	8011d04 <Sqrt32>
 801551a:	4603      	mov	r3, r0
 801551c:	461a      	mov	r2, r3
 801551e:	4b90      	ldr	r3, [pc, #576]	; (8015760 <WaveProcess+0x5e8>)
 8015520:	601a      	str	r2, [r3, #0]
 8015522:	4b8b      	ldr	r3, [pc, #556]	; (8015750 <WaveProcess+0x5d8>)
 8015524:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015528:	461a      	mov	r2, r3
 801552a:	4b8a      	ldr	r3, [pc, #552]	; (8015754 <WaveProcess+0x5dc>)
 801552c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015530:	4413      	add	r3, r2
 8015532:	0fda      	lsrs	r2, r3, #31
 8015534:	4413      	add	r3, r2
 8015536:	105b      	asrs	r3, r3, #1
 8015538:	b21a      	sxth	r2, r3
 801553a:	4b8a      	ldr	r3, [pc, #552]	; (8015764 <WaveProcess+0x5ec>)
 801553c:	801a      	strh	r2, [r3, #0]
 801553e:	4b84      	ldr	r3, [pc, #528]	; (8015750 <WaveProcess+0x5d8>)
 8015540:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015544:	461a      	mov	r2, r3
 8015546:	4b83      	ldr	r3, [pc, #524]	; (8015754 <WaveProcess+0x5dc>)
 8015548:	f9b3 3000 	ldrsh.w	r3, [r3]
 801554c:	1ad3      	subs	r3, r2, r3
 801554e:	4a86      	ldr	r2, [pc, #536]	; (8015768 <WaveProcess+0x5f0>)
 8015550:	6013      	str	r3, [r2, #0]
    HighT = TshA/FallA; LowT = TslA/RiseA; Edge = FallA+ RiseA;
 8015552:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 8015556:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801555a:	fb92 f3f3 	sdiv	r3, r2, r3
 801555e:	4a83      	ldr	r2, [pc, #524]	; (801576c <WaveProcess+0x5f4>)
 8015560:	6013      	str	r3, [r2, #0]
 8015562:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 8015566:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801556a:	fb92 f3f3 	sdiv	r3, r2, r3
 801556e:	4a80      	ldr	r2, [pc, #512]	; (8015770 <WaveProcess+0x5f8>)
 8015570:	6013      	str	r3, [r2, #0]
 8015572:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8015576:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801557a:	4413      	add	r3, r2
 801557c:	4a7d      	ldr	r2, [pc, #500]	; (8015774 <WaveProcess+0x5fc>)
 801557e:	6013      	str	r3, [r2, #0]

  }
//--------------------------- ���ɲ�����ʾ���� -------------------------------//

  if(((Sm == NONE)||(Sm == SCAN))){
 8015580:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8015584:	2b05      	cmp	r3, #5
 8015586:	d003      	beq.n	8015590 <WaveProcess+0x418>
 8015588:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801558c:	2b01      	cmp	r3, #1
 801558e:	d12f      	bne.n	80155f0 <WaveProcess+0x478>
    if(List[TIM_BASE].Val > 11)
 8015590:	4b79      	ldr	r3, [pc, #484]	; (8015778 <WaveProcess+0x600>)
 8015592:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015596:	2b0b      	cmp	r3, #11
 8015598:	dd03      	ble.n	80155a2 <WaveProcess+0x42a>
      k = 1;                         // NONE SCAN ģʽ��ǿ�ƴ���
 801559a:	2301      	movs	r3, #1
 801559c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if(List[TIM_BASE].Val > 11)
 80155a0:	e033      	b.n	801560a <WaveProcess+0x492>
    else
    {
      k =((Tm == RISE)? UpA : DnA)-Tp; // k:Ԥ�����󴥷���λ��
 80155a2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d101      	bne.n	80155ae <WaveProcess+0x436>
 80155aa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80155ac:	e000      	b.n	80155b0 <WaveProcess+0x438>
 80155ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80155b0:	89fa      	ldrh	r2, [r7, #14]
 80155b2:	1a9b      	subs	r3, r3, r2
 80155b4:	b29b      	uxth	r3, r3
 80155b6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if((Sm == SCAN)&&(k < 0)){ // AUTO ģʽ���޴���ʱ
 80155ba:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80155be:	2b01      	cmp	r3, #1
 80155c0:	d123      	bne.n	801560a <WaveProcess+0x492>
 80155c2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	da1f      	bge.n	801560a <WaveProcess+0x492>
        if(i > Dpth/4) k = 1;    // ������1/4����ǿ�ƴ���
 80155ca:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	da00      	bge.n	80155d4 <WaveProcess+0x45c>
 80155d2:	3303      	adds	r3, #3
 80155d4:	109b      	asrs	r3, r3, #2
 80155d6:	b21b      	sxth	r3, r3
 80155d8:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 80155dc:	429a      	cmp	r2, r3
 80155de:	dd03      	ble.n	80155e8 <WaveProcess+0x470>
 80155e0:	2301      	movs	r3, #1
 80155e2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if(List[TIM_BASE].Val > 11)
 80155e6:	e010      	b.n	801560a <WaveProcess+0x492>
        else           k = 0;    // ������1/4��ǰ����ʾ
 80155e8:	2300      	movs	r3, #0
 80155ea:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if(List[TIM_BASE].Val > 11)
 80155ee:	e00c      	b.n	801560a <WaveProcess+0x492>
      }

    }
  } else
    k =((Tm == RISE)? UpA : DnA)-Tp; // k:Ԥ�����󴥷���λ��
 80155f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d101      	bne.n	80155fc <WaveProcess+0x484>
 80155f8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80155fa:	e000      	b.n	80155fe <WaveProcess+0x486>
 80155fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80155fe:	89fa      	ldrh	r2, [r7, #14]
 8015600:	1a9b      	subs	r3, r3, r2
 8015602:	b29b      	uxth	r3, r3
 8015604:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8015608:	e000      	b.n	801560c <WaveProcess+0x494>
    if(List[TIM_BASE].Val > 11)
 801560a:	bf00      	nop

  if((!n)&&(Sm == SINGL)&&(k > 0)){ // SNGL ģʽ���д���ʱ�����������Զ�ֹͣ
 801560c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015610:	2b00      	cmp	r3, #0
 8015612:	d10c      	bne.n	801562e <WaveProcess+0x4b6>
 8015614:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8015618:	2b04      	cmp	r3, #4
 801561a:	d108      	bne.n	801562e <WaveProcess+0x4b6>
 801561c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8015620:	2b00      	cmp	r3, #0
 8015622:	dd04      	ble.n	801562e <WaveProcess+0x4b6>
    Status = STOP;
 8015624:	4b55      	ldr	r3, [pc, #340]	; (801577c <WaveProcess+0x604>)
 8015626:	2201      	movs	r2, #1
 8015628:	801a      	strh	r2, [r3, #0]
    DispStatus();
 801562a:	f7fe ff21 	bl	8014470 <DispStatus>
  }

  if((Sm == AUTO)&&(k < 0)){ // AUTO ģʽ���޴���ʱ
 801562e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8015632:	2b02      	cmp	r3, #2
 8015634:	d115      	bne.n	8015662 <WaveProcess+0x4ea>
 8015636:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 801563a:	2b00      	cmp	r3, #0
 801563c:	da11      	bge.n	8015662 <WaveProcess+0x4ea>
    if(i > Dpth/4) k = 1;    // ������1/4����ǿ�ƴ���
 801563e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8015642:	2b00      	cmp	r3, #0
 8015644:	da00      	bge.n	8015648 <WaveProcess+0x4d0>
 8015646:	3303      	adds	r3, #3
 8015648:	109b      	asrs	r3, r3, #2
 801564a:	b21b      	sxth	r3, r3
 801564c:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8015650:	429a      	cmp	r2, r3
 8015652:	dd03      	ble.n	801565c <WaveProcess+0x4e4>
 8015654:	2301      	movs	r3, #1
 8015656:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 801565a:	e002      	b.n	8015662 <WaveProcess+0x4ea>
    else           k = 0;    // ������1/4��ǰ����ʾ
 801565c:	2300      	movs	r3, #0
 801565e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  }

  Trigger_k = k;
 8015662:	4a47      	ldr	r2, [pc, #284]	; (8015780 <WaveProcess+0x608>)
 8015664:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8015668:	8013      	strh	r3, [r2, #0]

  if(Trigger_k>0)NORM_Kflag = 1;
 801566a:	4b45      	ldr	r3, [pc, #276]	; (8015780 <WaveProcess+0x608>)
 801566c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015670:	2b00      	cmp	r3, #0
 8015672:	dd02      	ble.n	801567a <WaveProcess+0x502>
 8015674:	4b43      	ldr	r3, [pc, #268]	; (8015784 <WaveProcess+0x60c>)
 8015676:	2201      	movs	r2, #1
 8015678:	701a      	strb	r2, [r3, #0]

  if((SNGL_Kflag)&&(Status == STOP))
 801567a:	4b43      	ldr	r3, [pc, #268]	; (8015788 <WaveProcess+0x610>)
 801567c:	781b      	ldrb	r3, [r3, #0]
 801567e:	2b00      	cmp	r3, #0
 8015680:	d016      	beq.n	80156b0 <WaveProcess+0x538>
 8015682:	4b3e      	ldr	r3, [pc, #248]	; (801577c <WaveProcess+0x604>)
 8015684:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015688:	2b01      	cmp	r3, #1
 801568a:	d111      	bne.n	80156b0 <WaveProcess+0x538>
  {
    Ch1_Posi = List[V0_POSI].Val;
 801568c:	4b3a      	ldr	r3, [pc, #232]	; (8015778 <WaveProcess+0x600>)
 801568e:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 8015692:	4b3e      	ldr	r3, [pc, #248]	; (801578c <WaveProcess+0x614>)
 8015694:	801a      	strh	r2, [r3, #0]
    Ch2_Posi = List[EXT_POSI].Val;
 8015696:	4b38      	ldr	r3, [pc, #224]	; (8015778 <WaveProcess+0x600>)
 8015698:	f9b3 20dc 	ldrsh.w	r2, [r3, #220]	; 0xdc
 801569c:	4b3c      	ldr	r3, [pc, #240]	; (8015790 <WaveProcess+0x618>)
 801569e:	801a      	strh	r2, [r3, #0]
    Tri_Posi = List[THRESHOLD].Val;
 80156a0:	4b35      	ldr	r3, [pc, #212]	; (8015778 <WaveProcess+0x600>)
 80156a2:	f9b3 2084 	ldrsh.w	r2, [r3, #132]	; 0x84
 80156a6:	4b3b      	ldr	r3, [pc, #236]	; (8015794 <WaveProcess+0x61c>)
 80156a8:	801a      	strh	r2, [r3, #0]
    SNGL_Kflag = 0;
 80156aa:	4b37      	ldr	r3, [pc, #220]	; (8015788 <WaveProcess+0x610>)
 80156ac:	2200      	movs	r2, #0
 80156ae:	701a      	strb	r2, [r3, #0]
  }

  if(k > 0)
 80156b0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	f340 8104 	ble.w	80158c2 <WaveProcess+0x74a>
  {                                               // �д���ʱ����ʾ����
    k += List[VIEWPOSI].Val+((1024-Ks)*Tp+512)/1024; // ���β�ֵ���
 80156ba:	4b2f      	ldr	r3, [pc, #188]	; (8015778 <WaveProcess+0x600>)
 80156bc:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80156c0:	b29a      	uxth	r2, r3
 80156c2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80156c6:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80156ca:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80156ce:	fb01 f303 	mul.w	r3, r1, r3
 80156d2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	da01      	bge.n	80156de <WaveProcess+0x566>
 80156da:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80156de:	129b      	asrs	r3, r3, #10
 80156e0:	b29b      	uxth	r3, r3
 80156e2:	4413      	add	r3, r2
 80156e4:	b29a      	uxth	r2, r3
 80156e6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80156ea:	4413      	add	r3, r2
 80156ec:	b29b      	uxth	r3, r3
 80156ee:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    VeA =(((Ain[k]-2048)*Ak)>>12)+100;
 80156f2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80156f6:	005b      	lsls	r3, r3, #1
 80156f8:	697a      	ldr	r2, [r7, #20]
 80156fa:	4413      	add	r3, r2
 80156fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015700:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015704:	693a      	ldr	r2, [r7, #16]
 8015706:	fb02 f303 	mul.w	r3, r2, r3
 801570a:	131b      	asrs	r3, r3, #12
 801570c:	b29b      	uxth	r3, r3
 801570e:	3364      	adds	r3, #100	; 0x64
 8015710:	b29b      	uxth	r3, r3
 8015712:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    for(n=0; n<300;)
 8015716:	2300      	movs	r3, #0
 8015718:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 801571c:	e0c7      	b.n	80158ae <WaveProcess+0x736>
    {
      ViA =(((Ain[k]-2048)*Ak)>>12)+100;
 801571e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8015722:	005b      	lsls	r3, r3, #1
 8015724:	697a      	ldr	r2, [r7, #20]
 8015726:	4413      	add	r3, r2
 8015728:	f9b3 3000 	ldrsh.w	r3, [r3]
 801572c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015730:	693a      	ldr	r2, [r7, #16]
 8015732:	fb02 f303 	mul.w	r3, r2, r3
 8015736:	131b      	asrs	r3, r3, #12
 8015738:	b29b      	uxth	r3, r3
 801573a:	3364      	adds	r3, #100	; 0x64
 801573c:	b29b      	uxth	r3, r3
 801573e:	80bb      	strh	r3, [r7, #4]
      k++;
 8015740:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8015744:	b29b      	uxth	r3, r3
 8015746:	3301      	adds	r3, #1
 8015748:	b29b      	uxth	r3, r3
 801574a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
      while(p > 0){
 801574e:	e09e      	b.n	801588e <WaveProcess+0x716>
 8015750:	20002856 	.word	0x20002856
 8015754:	20002868 	.word	0x20002868
 8015758:	20002858 	.word	0x20002858
 801575c:	2000285c 	.word	0x2000285c
 8015760:	20002864 	.word	0x20002864
 8015764:	2000286a 	.word	0x2000286a
 8015768:	20006880 	.word	0x20006880
 801576c:	20006878 	.word	0x20006878
 8015770:	2000688c 	.word	0x2000688c
 8015774:	20002850 	.word	0x20002850
 8015778:	20000298 	.word	0x20000298
 801577c:	200007a0 	.word	0x200007a0
 8015780:	20002854 	.word	0x20002854
 8015784:	2000286c 	.word	0x2000286c
 8015788:	2000055c 	.word	0x2000055c
 801578c:	20006884 	.word	0x20006884
 8015790:	2000687c 	.word	0x2000687c
 8015794:	20002860 	.word	0x20002860
        VoA = VeA +((ViA-VeA)*(1024-p))/1024; // ���� A ͨ����ǰ���ε�Ĳ�ֵ
 8015798:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801579c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80157a0:	1ad3      	subs	r3, r2, r3
 80157a2:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80157a6:	f5c2 6280 	rsb	r2, r2, #1024	; 0x400
 80157aa:	fb02 f303 	mul.w	r3, r2, r3
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	da01      	bge.n	80157b6 <WaveProcess+0x63e>
 80157b2:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80157b6:	129b      	asrs	r3, r3, #10
 80157b8:	b29a      	uxth	r2, r3
 80157ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80157be:	4413      	add	r3, r2
 80157c0:	b29b      	uxth	r3, r3
 80157c2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        if(Status == STOP){
 80157c4:	4b63      	ldr	r3, [pc, #396]	; (8015954 <WaveProcess+0x7dc>)
 80157c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80157ca:	2b01      	cmp	r3, #1
 80157cc:	d132      	bne.n	8015834 <WaveProcess+0x6bc>

          Vo_Temp = VoA+(List[V0_POSI].Val-Ch1_Posi);
 80157ce:	4b62      	ldr	r3, [pc, #392]	; (8015958 <WaveProcess+0x7e0>)
 80157d0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80157d4:	b29a      	uxth	r2, r3
 80157d6:	4b61      	ldr	r3, [pc, #388]	; (801595c <WaveProcess+0x7e4>)
 80157d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80157dc:	b29b      	uxth	r3, r3
 80157de:	1ad3      	subs	r3, r2, r3
 80157e0:	b29a      	uxth	r2, r3
 80157e2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80157e4:	4413      	add	r3, r2
 80157e6:	b29b      	uxth	r3, r3
 80157e8:	b21a      	sxth	r2, r3
 80157ea:	4b5d      	ldr	r3, [pc, #372]	; (8015960 <WaveProcess+0x7e8>)
 80157ec:	801a      	strh	r2, [r3, #0]

          if(Vo_Temp > 199) Vo_Temp = 202;
 80157ee:	4b5c      	ldr	r3, [pc, #368]	; (8015960 <WaveProcess+0x7e8>)
 80157f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80157f4:	2bc7      	cmp	r3, #199	; 0xc7
 80157f6:	dd02      	ble.n	80157fe <WaveProcess+0x686>
 80157f8:	4b59      	ldr	r3, [pc, #356]	; (8015960 <WaveProcess+0x7e8>)
 80157fa:	22ca      	movs	r2, #202	; 0xca
 80157fc:	801a      	strh	r2, [r3, #0]
          if(Vo_Temp <   3) Vo_Temp = 1;                     // �����޷�
 80157fe:	4b58      	ldr	r3, [pc, #352]	; (8015960 <WaveProcess+0x7e8>)
 8015800:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015804:	2b02      	cmp	r3, #2
 8015806:	dc02      	bgt.n	801580e <WaveProcess+0x696>
 8015808:	4b55      	ldr	r3, [pc, #340]	; (8015960 <WaveProcess+0x7e8>)
 801580a:	2201      	movs	r2, #1
 801580c:	801a      	strh	r2, [r3, #0]

          WaveBuf[n]= Vo_Temp;
 801580e:	4b54      	ldr	r3, [pc, #336]	; (8015960 <WaveProcess+0x7e8>)
 8015810:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015814:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015818:	b2d1      	uxtb	r1, r2
 801581a:	4a52      	ldr	r2, [pc, #328]	; (8015964 <WaveProcess+0x7ec>)
 801581c:	54d1      	strb	r1, [r2, r3]

          Build_Ext(n, Ext, List[V0_POSI].Val);
 801581e:	4b4e      	ldr	r3, [pc, #312]	; (8015958 <WaveProcess+0x7e0>)
 8015820:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015824:	b2da      	uxtb	r2, r3
 8015826:	79f9      	ldrb	r1, [r7, #7]
 8015828:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801582c:	4618      	mov	r0, r3
 801582e:	f000 f89d 	bl	801596c <Build_Ext>
 8015832:	e01b      	b.n	801586c <WaveProcess+0x6f4>
        }
        else{
          if(VoA > 199) VoA = 202;                   // �����޷�  ��������
 8015834:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8015838:	2bc7      	cmp	r3, #199	; 0xc7
 801583a:	dd01      	ble.n	8015840 <WaveProcess+0x6c8>
 801583c:	23ca      	movs	r3, #202	; 0xca
 801583e:	87fb      	strh	r3, [r7, #62]	; 0x3e
          if(VoA <   3) VoA = 2;                     // �����޷�
 8015840:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8015844:	2b02      	cmp	r3, #2
 8015846:	dc01      	bgt.n	801584c <WaveProcess+0x6d4>
 8015848:	2302      	movs	r3, #2
 801584a:	87fb      	strh	r3, [r7, #62]	; 0x3e
          WaveBuf[n]= VoA;
 801584c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015850:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015852:	b2d1      	uxtb	r1, r2
 8015854:	4a43      	ldr	r2, [pc, #268]	; (8015964 <WaveProcess+0x7ec>)
 8015856:	54d1      	strb	r1, [r2, r3]

          Build_Ext(n, Ext, List[V0_POSI].Val);
 8015858:	4b3f      	ldr	r3, [pc, #252]	; (8015958 <WaveProcess+0x7e0>)
 801585a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801585e:	b2da      	uxtb	r2, r3
 8015860:	79f9      	ldrb	r1, [r7, #7]
 8015862:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015866:	4618      	mov	r0, r3
 8015868:	f000 f880 	bl	801596c <Build_Ext>
        }

        if(n++ >= 300) break;
 801586c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015870:	b29a      	uxth	r2, r3
 8015872:	3201      	adds	r2, #1
 8015874:	b292      	uxth	r2, r2
 8015876:	f8a7 204c 	strh.w	r2, [r7, #76]	; 0x4c
 801587a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801587e:	da0b      	bge.n	8015898 <WaveProcess+0x720>
        p -= Ks;
 8015880:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8015884:	897b      	ldrh	r3, [r7, #10]
 8015886:	1ad3      	subs	r3, r2, r3
 8015888:	b29b      	uxth	r3, r3
 801588a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      while(p > 0){
 801588e:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8015892:	2b00      	cmp	r3, #0
 8015894:	dc80      	bgt.n	8015798 <WaveProcess+0x620>
 8015896:	e000      	b.n	801589a <WaveProcess+0x722>
        if(n++ >= 300) break;
 8015898:	bf00      	nop
      }
      p += 1024;
 801589a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801589e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80158a2:	b29b      	uxth	r3, r3
 80158a4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      VeA = ViA;                              // �ݴ浱ǰ���ε��ֵ
 80158a8:	88bb      	ldrh	r3, [r7, #4]
 80158aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    for(n=0; n<300;)
 80158ae:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80158b2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80158b6:	f6ff af32 	blt.w	801571e <WaveProcess+0x5a6>
    }
    Norm_Clr = 0;                                          //NORM����
 80158ba:	4b2b      	ldr	r3, [pc, #172]	; (8015968 <WaveProcess+0x7f0>)
 80158bc:	2200      	movs	r2, #0
 80158be:	701a      	strb	r2, [r3, #0]
 80158c0:	e037      	b.n	8015932 <WaveProcess+0x7ba>
  }
  else if((k < 0) && ((Sm != NORM)||(Norm_Clr))){          //NORM��������Ļ
 80158c2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	da33      	bge.n	8015932 <WaveProcess+0x7ba>
 80158ca:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80158ce:	2b03      	cmp	r3, #3
 80158d0:	d103      	bne.n	80158da <WaveProcess+0x762>
 80158d2:	4b25      	ldr	r3, [pc, #148]	; (8015968 <WaveProcess+0x7f0>)
 80158d4:	781b      	ldrb	r3, [r3, #0]
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d02b      	beq.n	8015932 <WaveProcess+0x7ba>
    for(n=0; n<300;){
 80158da:	2300      	movs	r3, #0
 80158dc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80158e0:	e022      	b.n	8015928 <WaveProcess+0x7b0>
      while(p > 0){
        WaveBuf[n]= 255;
 80158e2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80158e6:	4a1f      	ldr	r2, [pc, #124]	; (8015964 <WaveProcess+0x7ec>)
 80158e8:	21ff      	movs	r1, #255	; 0xff
 80158ea:	54d1      	strb	r1, [r2, r3]

        if(n++ >= 300) break;
 80158ec:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80158f0:	b29a      	uxth	r2, r3
 80158f2:	3201      	adds	r2, #1
 80158f4:	b292      	uxth	r2, r2
 80158f6:	f8a7 204c 	strh.w	r2, [r7, #76]	; 0x4c
 80158fa:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80158fe:	da0b      	bge.n	8015918 <WaveProcess+0x7a0>
        p -= Ks;
 8015900:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8015904:	897b      	ldrh	r3, [r7, #10]
 8015906:	1ad3      	subs	r3, r2, r3
 8015908:	b29b      	uxth	r3, r3
 801590a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      while(p > 0){
 801590e:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8015912:	2b00      	cmp	r3, #0
 8015914:	dce5      	bgt.n	80158e2 <WaveProcess+0x76a>
 8015916:	e000      	b.n	801591a <WaveProcess+0x7a2>
        if(n++ >= 300) break;
 8015918:	bf00      	nop
      }
      p += 1024;
 801591a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801591e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015922:	b29b      	uxth	r3, r3
 8015924:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    for(n=0; n<300;){
 8015928:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801592c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015930:	dbed      	blt.n	801590e <WaveProcess+0x796>
    }
  }
  if((i == Dpth)&&(Status != STOP))
 8015932:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8015936:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801593a:	429a      	cmp	r2, r3
 801593c:	d106      	bne.n	801594c <WaveProcess+0x7d4>
 801593e:	4b05      	ldr	r3, [pc, #20]	; (8015954 <WaveProcess+0x7dc>)
 8015940:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015944:	2b01      	cmp	r3, #1
 8015946:	d001      	beq.n	801594c <WaveProcess+0x7d4>
  {
	  ADC_Start();       // ���¿�ʼ ADC ɨ�����
 8015948:	f7f6 ff28 	bl	800c79c <ADC_Start>
  }
}
 801594c:	bf00      	nop
 801594e:	3750      	adds	r7, #80	; 0x50
 8015950:	46bd      	mov	sp, r7
 8015952:	bd80      	pop	{r7, pc}
 8015954:	200007a0 	.word	0x200007a0
 8015958:	20000298 	.word	0x20000298
 801595c:	20006884 	.word	0x20006884
 8015960:	20002848 	.word	0x20002848
 8015964:	20000c08 	.word	0x20000c08
 8015968:	200007a7 	.word	0x200007a7

0801596c <Build_Ext>:

/*******************************************************************************
 Build_Ext: ��չͨ��������ʾ
*******************************************************************************/
void  Build_Ext(short x, char Ext, char Yp)
{
 801596c:	b480      	push	{r7}
 801596e:	b085      	sub	sp, #20
 8015970:	af00      	add	r7, sp, #0
 8015972:	4603      	mov	r3, r0
 8015974:	80fb      	strh	r3, [r7, #6]
 8015976:	460b      	mov	r3, r1
 8015978:	717b      	strb	r3, [r7, #5]
 801597a:	4613      	mov	r3, r2
 801597c:	713b      	strb	r3, [r7, #4]
  char* Buf = WaveBuf + TRACK1_SIZE;
 801597e:	4b69      	ldr	r3, [pc, #420]	; (8015b24 <Build_Ext+0x1b8>)
 8015980:	60bb      	str	r3, [r7, #8]
  short  Vo;

  Posi_2F1 = List[EXT_POSI].Val -  Data[1] - List[V0_POSI].Val;
 8015982:	4b69      	ldr	r3, [pc, #420]	; (8015b28 <Build_Ext+0x1bc>)
 8015984:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015988:	b29a      	uxth	r2, r3
 801598a:	4b68      	ldr	r3, [pc, #416]	; (8015b2c <Build_Ext+0x1c0>)
 801598c:	785b      	ldrb	r3, [r3, #1]
 801598e:	b29b      	uxth	r3, r3
 8015990:	1ad3      	subs	r3, r2, r3
 8015992:	b29a      	uxth	r2, r3
 8015994:	4b64      	ldr	r3, [pc, #400]	; (8015b28 <Build_Ext+0x1bc>)
 8015996:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801599a:	b29b      	uxth	r3, r3
 801599c:	1ad3      	subs	r3, r2, r3
 801599e:	b29b      	uxth	r3, r3
 80159a0:	b21a      	sxth	r2, r3
 80159a2:	4b63      	ldr	r3, [pc, #396]	; (8015b30 <Build_Ext+0x1c4>)
 80159a4:	801a      	strh	r2, [r3, #0]
  Posi_2F2 = List[EXT_POSI].Val;// - Data[2];
 80159a6:	4b60      	ldr	r3, [pc, #384]	; (8015b28 <Build_Ext+0x1bc>)
 80159a8:	f9b3 20dc 	ldrsh.w	r2, [r3, #220]	; 0xdc
 80159ac:	4b61      	ldr	r3, [pc, #388]	; (8015b34 <Build_Ext+0x1c8>)
 80159ae:	801a      	strh	r2, [r3, #0]

  switch(Ext)
 80159b0:	797b      	ldrb	r3, [r7, #5]
 80159b2:	2b05      	cmp	r3, #5
 80159b4:	f200 809c 	bhi.w	8015af0 <Build_Ext+0x184>
 80159b8:	a201      	add	r2, pc, #4	; (adr r2, 80159c0 <Build_Ext+0x54>)
 80159ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80159be:	bf00      	nop
 80159c0:	080159d9 	.word	0x080159d9
 80159c4:	080159ff 	.word	0x080159ff
 80159c8:	08015a25 	.word	0x08015a25
 80159cc:	08015a4f 	.word	0x08015a4f
 80159d0:	08015a8f 	.word	0x08015a8f
 80159d4:	08015acf 	.word	0x08015acf
  {
  case 0: // D
    Vo = Data[x+10]-Data[1]+List[EXT_POSI].Val; break;
 80159d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80159dc:	330a      	adds	r3, #10
 80159de:	4a53      	ldr	r2, [pc, #332]	; (8015b2c <Build_Ext+0x1c0>)
 80159e0:	5cd3      	ldrb	r3, [r2, r3]
 80159e2:	b29a      	uxth	r2, r3
 80159e4:	4b51      	ldr	r3, [pc, #324]	; (8015b2c <Build_Ext+0x1c0>)
 80159e6:	785b      	ldrb	r3, [r3, #1]
 80159e8:	b29b      	uxth	r3, r3
 80159ea:	1ad3      	subs	r3, r2, r3
 80159ec:	b29a      	uxth	r2, r3
 80159ee:	4b4e      	ldr	r3, [pc, #312]	; (8015b28 <Build_Ext+0x1bc>)
 80159f0:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 80159f4:	b29b      	uxth	r3, r3
 80159f6:	4413      	add	r3, r2
 80159f8:	b29b      	uxth	r3, r3
 80159fa:	81fb      	strh	r3, [r7, #14]
 80159fc:	e078      	b.n	8015af0 <Build_Ext+0x184>
  case 1: // -D
    Vo = List[EXT_POSI].Val+Data[1]-Data[x+10]; break;
 80159fe:	4b4a      	ldr	r3, [pc, #296]	; (8015b28 <Build_Ext+0x1bc>)
 8015a00:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015a04:	b29a      	uxth	r2, r3
 8015a06:	4b49      	ldr	r3, [pc, #292]	; (8015b2c <Build_Ext+0x1c0>)
 8015a08:	785b      	ldrb	r3, [r3, #1]
 8015a0a:	b29b      	uxth	r3, r3
 8015a0c:	4413      	add	r3, r2
 8015a0e:	b29a      	uxth	r2, r3
 8015a10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015a14:	330a      	adds	r3, #10
 8015a16:	4945      	ldr	r1, [pc, #276]	; (8015b2c <Build_Ext+0x1c0>)
 8015a18:	5ccb      	ldrb	r3, [r1, r3]
 8015a1a:	b29b      	uxth	r3, r3
 8015a1c:	1ad3      	subs	r3, r2, r3
 8015a1e:	b29b      	uxth	r3, r3
 8015a20:	81fb      	strh	r3, [r7, #14]
 8015a22:	e065      	b.n	8015af0 <Build_Ext+0x184>
  case 2: // Inp+D
    Vo = Data[x+10]+ WaveBuf[x]+Posi_2F1; break;
 8015a24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015a28:	330a      	adds	r3, #10
 8015a2a:	4a40      	ldr	r2, [pc, #256]	; (8015b2c <Build_Ext+0x1c0>)
 8015a2c:	5cd3      	ldrb	r3, [r2, r3]
 8015a2e:	b29a      	uxth	r2, r3
 8015a30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015a34:	4940      	ldr	r1, [pc, #256]	; (8015b38 <Build_Ext+0x1cc>)
 8015a36:	5ccb      	ldrb	r3, [r1, r3]
 8015a38:	b29b      	uxth	r3, r3
 8015a3a:	4413      	add	r3, r2
 8015a3c:	b29a      	uxth	r2, r3
 8015a3e:	4b3c      	ldr	r3, [pc, #240]	; (8015b30 <Build_Ext+0x1c4>)
 8015a40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015a44:	b29b      	uxth	r3, r3
 8015a46:	4413      	add	r3, r2
 8015a48:	b29b      	uxth	r3, r3
 8015a4a:	81fb      	strh	r3, [r7, #14]
 8015a4c:	e050      	b.n	8015af0 <Build_Ext+0x184>
  case 3: // D-Inp
    Vo = (Data[x+10]-Data[1])- (WaveBuf[x]-List[V0_POSI].Val)+ List[EXT_POSI].Val; break;
 8015a4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015a52:	330a      	adds	r3, #10
 8015a54:	4a35      	ldr	r2, [pc, #212]	; (8015b2c <Build_Ext+0x1c0>)
 8015a56:	5cd3      	ldrb	r3, [r2, r3]
 8015a58:	b29a      	uxth	r2, r3
 8015a5a:	4b34      	ldr	r3, [pc, #208]	; (8015b2c <Build_Ext+0x1c0>)
 8015a5c:	785b      	ldrb	r3, [r3, #1]
 8015a5e:	b29b      	uxth	r3, r3
 8015a60:	1ad3      	subs	r3, r2, r3
 8015a62:	b29a      	uxth	r2, r3
 8015a64:	4b30      	ldr	r3, [pc, #192]	; (8015b28 <Build_Ext+0x1bc>)
 8015a66:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015a6a:	b299      	uxth	r1, r3
 8015a6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015a70:	4831      	ldr	r0, [pc, #196]	; (8015b38 <Build_Ext+0x1cc>)
 8015a72:	5cc3      	ldrb	r3, [r0, r3]
 8015a74:	b29b      	uxth	r3, r3
 8015a76:	1acb      	subs	r3, r1, r3
 8015a78:	b29b      	uxth	r3, r3
 8015a7a:	4413      	add	r3, r2
 8015a7c:	b29a      	uxth	r2, r3
 8015a7e:	4b2a      	ldr	r3, [pc, #168]	; (8015b28 <Build_Ext+0x1bc>)
 8015a80:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015a84:	b29b      	uxth	r3, r3
 8015a86:	4413      	add	r3, r2
 8015a88:	b29b      	uxth	r3, r3
 8015a8a:	81fb      	strh	r3, [r7, #14]
 8015a8c:	e030      	b.n	8015af0 <Build_Ext+0x184>
  case 4: // Inp-D
    Vo = (WaveBuf[x]-List[V0_POSI].Val)-(Data[x+10]-Data[1]) + List[EXT_POSI].Val; break;
 8015a8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015a92:	4a29      	ldr	r2, [pc, #164]	; (8015b38 <Build_Ext+0x1cc>)
 8015a94:	5cd3      	ldrb	r3, [r2, r3]
 8015a96:	b29a      	uxth	r2, r3
 8015a98:	4b23      	ldr	r3, [pc, #140]	; (8015b28 <Build_Ext+0x1bc>)
 8015a9a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015a9e:	b29b      	uxth	r3, r3
 8015aa0:	1ad3      	subs	r3, r2, r3
 8015aa2:	b29a      	uxth	r2, r3
 8015aa4:	4b21      	ldr	r3, [pc, #132]	; (8015b2c <Build_Ext+0x1c0>)
 8015aa6:	785b      	ldrb	r3, [r3, #1]
 8015aa8:	b299      	uxth	r1, r3
 8015aaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015aae:	330a      	adds	r3, #10
 8015ab0:	481e      	ldr	r0, [pc, #120]	; (8015b2c <Build_Ext+0x1c0>)
 8015ab2:	5cc3      	ldrb	r3, [r0, r3]
 8015ab4:	b29b      	uxth	r3, r3
 8015ab6:	1acb      	subs	r3, r1, r3
 8015ab8:	b29b      	uxth	r3, r3
 8015aba:	4413      	add	r3, r2
 8015abc:	b29a      	uxth	r2, r3
 8015abe:	4b1a      	ldr	r3, [pc, #104]	; (8015b28 <Build_Ext+0x1bc>)
 8015ac0:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015ac4:	b29b      	uxth	r3, r3
 8015ac6:	4413      	add	r3, r2
 8015ac8:	b29b      	uxth	r3, r3
 8015aca:	81fb      	strh	r3, [r7, #14]
 8015acc:	e010      	b.n	8015af0 <Build_Ext+0x184>
  case 5: // -Inp
    Vo = Yp+List[EXT_POSI].Val - WaveBuf[x]; break;
 8015ace:	793b      	ldrb	r3, [r7, #4]
 8015ad0:	b29a      	uxth	r2, r3
 8015ad2:	4b15      	ldr	r3, [pc, #84]	; (8015b28 <Build_Ext+0x1bc>)
 8015ad4:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015ad8:	b29b      	uxth	r3, r3
 8015ada:	4413      	add	r3, r2
 8015adc:	b29a      	uxth	r2, r3
 8015ade:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015ae2:	4915      	ldr	r1, [pc, #84]	; (8015b38 <Build_Ext+0x1cc>)
 8015ae4:	5ccb      	ldrb	r3, [r1, r3]
 8015ae6:	b29b      	uxth	r3, r3
 8015ae8:	1ad3      	subs	r3, r2, r3
 8015aea:	b29b      	uxth	r3, r3
 8015aec:	81fb      	strh	r3, [r7, #14]
 8015aee:	bf00      	nop
  }
  if(Vo > 199) Vo = 202;
 8015af0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015af4:	2bc7      	cmp	r3, #199	; 0xc7
 8015af6:	dd01      	ble.n	8015afc <Build_Ext+0x190>
 8015af8:	23ca      	movs	r3, #202	; 0xca
 8015afa:	81fb      	strh	r3, [r7, #14]
  if(Vo <   3) Vo = 1;                     // �����޷�
 8015afc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015b00:	2b02      	cmp	r3, #2
 8015b02:	dc01      	bgt.n	8015b08 <Build_Ext+0x19c>
 8015b04:	2301      	movs	r3, #1
 8015b06:	81fb      	strh	r3, [r7, #14]
  Buf[x]= Vo;
 8015b08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015b0c:	68ba      	ldr	r2, [r7, #8]
 8015b0e:	4413      	add	r3, r2
 8015b10:	89fa      	ldrh	r2, [r7, #14]
 8015b12:	b2d2      	uxtb	r2, r2
 8015b14:	701a      	strb	r2, [r3, #0]
}
 8015b16:	bf00      	nop
 8015b18:	3714      	adds	r7, #20
 8015b1a:	46bd      	mov	sp, r7
 8015b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b20:	4770      	bx	lr
 8015b22:	bf00      	nop
 8015b24:	20000d34 	.word	0x20000d34
 8015b28:	20000298 	.word	0x20000298
 8015b2c:	20000008 	.word	0x20000008
 8015b30:	2000284c 	.word	0x2000284c
 8015b34:	20006874 	.word	0x20006874
 8015b38:	20000c08 	.word	0x20000c08

08015b3c <Auto_Fit>:

void Auto_Fit(void)
{
 8015b3c:	b590      	push	{r4, r7, lr}
 8015b3e:	b083      	sub	sp, #12
 8015b40:	af00      	add	r7, sp, #0
  char i,j,k=0;
 8015b42:	2300      	movs	r3, #0
 8015b44:	717b      	strb	r3, [r7, #5]
  short Tmp,Tmp1;

  if(Status != STOP){
 8015b46:	4b38      	ldr	r3, [pc, #224]	; (8015c28 <Auto_Fit+0xec>)
 8015b48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015b4c:	2b01      	cmp	r3, #1
 8015b4e:	f000 83de 	beq.w	801630e <Auto_Fit+0x7d2>
    //======��ѹ���Զ�ѡ��==============
    for(i=0;i<9;i++){
 8015b52:	2300      	movs	r3, #0
 8015b54:	71fb      	strb	r3, [r7, #7]
 8015b56:	e098      	b.n	8015c8a <Auto_Fit+0x14e>
      //******Aͨ��***********
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015b58:	4b34      	ldr	r3, [pc, #208]	; (8015c2c <Auto_Fit+0xf0>)
 8015b5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015b5e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015b62:	4a33      	ldr	r2, [pc, #204]	; (8015c30 <Auto_Fit+0xf4>)
 8015b64:	6811      	ldr	r1, [r2, #0]
 8015b66:	4a33      	ldr	r2, [pc, #204]	; (8015c34 <Auto_Fit+0xf8>)
 8015b68:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015b6c:	4610      	mov	r0, r2
 8015b6e:	4a32      	ldr	r2, [pc, #200]	; (8015c38 <Auto_Fit+0xfc>)
 8015b70:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015b74:	2a00      	cmp	r2, #0
 8015b76:	bf14      	ite	ne
 8015b78:	2201      	movne	r2, #1
 8015b7a:	2200      	moveq	r2, #0
 8015b7c:	b2d2      	uxtb	r2, r2
 8015b7e:	4402      	add	r2, r0
 8015b80:	0052      	lsls	r2, r2, #1
 8015b82:	440a      	add	r2, r1
 8015b84:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015b88:	0092      	lsls	r2, r2, #2
 8015b8a:	492c      	ldr	r1, [pc, #176]	; (8015c3c <Auto_Fit+0x100>)
 8015b8c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015b90:	4608      	mov	r0, r1
 8015b92:	492b      	ldr	r1, [pc, #172]	; (8015c40 <Auto_Fit+0x104>)
 8015b94:	5c09      	ldrb	r1, [r1, r0]
 8015b96:	fb92 f2f1 	sdiv	r2, r2, r1
 8015b9a:	fb02 f303 	mul.w	r3, r2, r3
 8015b9e:	131b      	asrs	r3, r3, #12
           - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val);
 8015ba0:	b29a      	uxth	r2, r3
 8015ba2:	4b28      	ldr	r3, [pc, #160]	; (8015c44 <Auto_Fit+0x108>)
 8015ba4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015ba8:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015bac:	4920      	ldr	r1, [pc, #128]	; (8015c30 <Auto_Fit+0xf4>)
 8015bae:	6808      	ldr	r0, [r1, #0]
 8015bb0:	4920      	ldr	r1, [pc, #128]	; (8015c34 <Auto_Fit+0xf8>)
 8015bb2:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015bb6:	460c      	mov	r4, r1
 8015bb8:	491f      	ldr	r1, [pc, #124]	; (8015c38 <Auto_Fit+0xfc>)
 8015bba:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015bbe:	2900      	cmp	r1, #0
 8015bc0:	bf14      	ite	ne
 8015bc2:	2101      	movne	r1, #1
 8015bc4:	2100      	moveq	r1, #0
 8015bc6:	b2c9      	uxtb	r1, r1
 8015bc8:	4421      	add	r1, r4
 8015bca:	0049      	lsls	r1, r1, #1
 8015bcc:	4401      	add	r1, r0
 8015bce:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015bd2:	0089      	lsls	r1, r1, #2
 8015bd4:	4819      	ldr	r0, [pc, #100]	; (8015c3c <Auto_Fit+0x100>)
 8015bd6:	f9b0 0000 	ldrsh.w	r0, [r0]
 8015bda:	4604      	mov	r4, r0
 8015bdc:	4818      	ldr	r0, [pc, #96]	; (8015c40 <Auto_Fit+0x104>)
 8015bde:	5d00      	ldrb	r0, [r0, r4]
 8015be0:	fb91 f1f0 	sdiv	r1, r1, r0
 8015be4:	fb01 f303 	mul.w	r3, r1, r3
 8015be8:	131b      	asrs	r3, r3, #12
 8015bea:	b29b      	uxth	r3, r3
 8015bec:	1ad3      	subs	r3, r2, r3
 8015bee:	b29b      	uxth	r3, r3
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015bf0:	803b      	strh	r3, [r7, #0]
      if((Tmp1 < 40)&&(List[Y_RANGES].Val > 2)){       //40
 8015bf2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015bf6:	2b27      	cmp	r3, #39	; 0x27
 8015bf8:	dc28      	bgt.n	8015c4c <Auto_Fit+0x110>
 8015bfa:	4b13      	ldr	r3, [pc, #76]	; (8015c48 <Auto_Fit+0x10c>)
 8015bfc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015c00:	2b02      	cmp	r3, #2
 8015c02:	dd23      	ble.n	8015c4c <Auto_Fit+0x110>
        List[Y_RANGES].Val--;
 8015c04:	4b10      	ldr	r3, [pc, #64]	; (8015c48 <Auto_Fit+0x10c>)
 8015c06:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015c0a:	b29b      	uxth	r3, r3
 8015c0c:	3b01      	subs	r3, #1
 8015c0e:	b29b      	uxth	r3, r3
 8015c10:	b21a      	sxth	r2, r3
 8015c12:	4b0d      	ldr	r3, [pc, #52]	; (8015c48 <Auto_Fit+0x10c>)
 8015c14:	809a      	strh	r2, [r3, #4]
        List[V0_POSI].Val=100;
 8015c16:	4b0c      	ldr	r3, [pc, #48]	; (8015c48 <Auto_Fit+0x10c>)
 8015c18:	2264      	movs	r2, #100	; 0x64
 8015c1a:	839a      	strh	r2, [r3, #28]
        WaveProcess();
 8015c1c:	f7ff faac 	bl	8015178 <WaveProcess>
        Update_Proc_All();
 8015c20:	f7fe ff32 	bl	8014a88 <Update_Proc_All>
 8015c24:	e02b      	b.n	8015c7e <Auto_Fit+0x142>
 8015c26:	bf00      	nop
 8015c28:	200007a0 	.word	0x200007a0
 8015c2c:	20002856 	.word	0x20002856
 8015c30:	2000057c 	.word	0x2000057c
 8015c34:	20006886 	.word	0x20006886
 8015c38:	20002862 	.word	0x20002862
 8015c3c:	2000284a 	.word	0x2000284a
 8015c40:	20000560 	.word	0x20000560
 8015c44:	20002868 	.word	0x20002868
 8015c48:	20000298 	.word	0x20000298
      }
      else if((Tmp1 > 110)&&(List[Y_RANGES].Val < 9)){ //110
 8015c4c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015c50:	2b6e      	cmp	r3, #110	; 0x6e
 8015c52:	dd14      	ble.n	8015c7e <Auto_Fit+0x142>
 8015c54:	4bbe      	ldr	r3, [pc, #760]	; (8015f50 <Auto_Fit+0x414>)
 8015c56:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015c5a:	2b08      	cmp	r3, #8
 8015c5c:	dc0f      	bgt.n	8015c7e <Auto_Fit+0x142>
        List[Y_RANGES].Val++;
 8015c5e:	4bbc      	ldr	r3, [pc, #752]	; (8015f50 <Auto_Fit+0x414>)
 8015c60:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015c64:	b29b      	uxth	r3, r3
 8015c66:	3301      	adds	r3, #1
 8015c68:	b29b      	uxth	r3, r3
 8015c6a:	b21a      	sxth	r2, r3
 8015c6c:	4bb8      	ldr	r3, [pc, #736]	; (8015f50 <Auto_Fit+0x414>)
 8015c6e:	809a      	strh	r2, [r3, #4]
        List[V0_POSI].Val=100;
 8015c70:	4bb7      	ldr	r3, [pc, #732]	; (8015f50 <Auto_Fit+0x414>)
 8015c72:	2264      	movs	r2, #100	; 0x64
 8015c74:	839a      	strh	r2, [r3, #28]
        WaveProcess();
 8015c76:	f7ff fa7f 	bl	8015178 <WaveProcess>
        Update_Proc_All();
 8015c7a:	f7fe ff05 	bl	8014a88 <Update_Proc_All>
      }
      HAL_Delay(50);
 8015c7e:	2032      	movs	r0, #50	; 0x32
 8015c80:	f002 fba8 	bl	80183d4 <HAL_Delay>
    for(i=0;i<9;i++){
 8015c84:	79fb      	ldrb	r3, [r7, #7]
 8015c86:	3301      	adds	r3, #1
 8015c88:	71fb      	strb	r3, [r7, #7]
 8015c8a:	79fb      	ldrb	r3, [r7, #7]
 8015c8c:	2b08      	cmp	r3, #8
 8015c8e:	f67f af63 	bls.w	8015b58 <Auto_Fit+0x1c>
    //============ʶ�𴥷�Դ======================


    //======�������Զ�ѡ��==============
    //if(!List[TRI_Ch]){//******Aͨ��***********
      Tmp = (((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015c92:	4bb0      	ldr	r3, [pc, #704]	; (8015f54 <Auto_Fit+0x418>)
 8015c94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015c98:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015c9c:	4aae      	ldr	r2, [pc, #696]	; (8015f58 <Auto_Fit+0x41c>)
 8015c9e:	6811      	ldr	r1, [r2, #0]
 8015ca0:	4aae      	ldr	r2, [pc, #696]	; (8015f5c <Auto_Fit+0x420>)
 8015ca2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015ca6:	4610      	mov	r0, r2
 8015ca8:	4aad      	ldr	r2, [pc, #692]	; (8015f60 <Auto_Fit+0x424>)
 8015caa:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015cae:	2a00      	cmp	r2, #0
 8015cb0:	bf14      	ite	ne
 8015cb2:	2201      	movne	r2, #1
 8015cb4:	2200      	moveq	r2, #0
 8015cb6:	b2d2      	uxtb	r2, r2
 8015cb8:	4402      	add	r2, r0
 8015cba:	0052      	lsls	r2, r2, #1
 8015cbc:	440a      	add	r2, r1
 8015cbe:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015cc2:	0092      	lsls	r2, r2, #2
 8015cc4:	49a7      	ldr	r1, [pc, #668]	; (8015f64 <Auto_Fit+0x428>)
 8015cc6:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015cca:	4608      	mov	r0, r1
 8015ccc:	49a6      	ldr	r1, [pc, #664]	; (8015f68 <Auto_Fit+0x42c>)
 8015cce:	5c09      	ldrb	r1, [r1, r0]
 8015cd0:	fb92 f2f1 	sdiv	r2, r2, r1
 8015cd4:	fb02 f303 	mul.w	r3, r2, r3
 8015cd8:	131a      	asrs	r2, r3, #12
           - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val))/4;
 8015cda:	4ba4      	ldr	r3, [pc, #656]	; (8015f6c <Auto_Fit+0x430>)
 8015cdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015ce0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015ce4:	499c      	ldr	r1, [pc, #624]	; (8015f58 <Auto_Fit+0x41c>)
 8015ce6:	6808      	ldr	r0, [r1, #0]
 8015ce8:	499c      	ldr	r1, [pc, #624]	; (8015f5c <Auto_Fit+0x420>)
 8015cea:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015cee:	460c      	mov	r4, r1
 8015cf0:	499b      	ldr	r1, [pc, #620]	; (8015f60 <Auto_Fit+0x424>)
 8015cf2:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015cf6:	2900      	cmp	r1, #0
 8015cf8:	bf14      	ite	ne
 8015cfa:	2101      	movne	r1, #1
 8015cfc:	2100      	moveq	r1, #0
 8015cfe:	b2c9      	uxtb	r1, r1
 8015d00:	4421      	add	r1, r4
 8015d02:	0049      	lsls	r1, r1, #1
 8015d04:	4401      	add	r1, r0
 8015d06:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015d0a:	0089      	lsls	r1, r1, #2
 8015d0c:	4895      	ldr	r0, [pc, #596]	; (8015f64 <Auto_Fit+0x428>)
 8015d0e:	f9b0 0000 	ldrsh.w	r0, [r0]
 8015d12:	4604      	mov	r4, r0
 8015d14:	4894      	ldr	r0, [pc, #592]	; (8015f68 <Auto_Fit+0x42c>)
 8015d16:	5d00      	ldrb	r0, [r0, r4]
 8015d18:	fb91 f1f0 	sdiv	r1, r1, r0
 8015d1c:	fb01 f303 	mul.w	r3, r1, r3
 8015d20:	131b      	asrs	r3, r3, #12
 8015d22:	1ad3      	subs	r3, r2, r3
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	da00      	bge.n	8015d2a <Auto_Fit+0x1ee>
 8015d28:	3303      	adds	r3, #3
 8015d2a:	109b      	asrs	r3, r3, #2
      Tmp = (((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015d2c:	807b      	strh	r3, [r7, #2]
      if((List[THRESHOLD].Val > (((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)  + Tmp))||
 8015d2e:	4b88      	ldr	r3, [pc, #544]	; (8015f50 <Auto_Fit+0x414>)
 8015d30:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8015d34:	4618      	mov	r0, r3
 8015d36:	4b8e      	ldr	r3, [pc, #568]	; (8015f70 <Auto_Fit+0x434>)
 8015d38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015d3c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015d40:	4a85      	ldr	r2, [pc, #532]	; (8015f58 <Auto_Fit+0x41c>)
 8015d42:	6811      	ldr	r1, [r2, #0]
 8015d44:	4a85      	ldr	r2, [pc, #532]	; (8015f5c <Auto_Fit+0x420>)
 8015d46:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015d4a:	4614      	mov	r4, r2
 8015d4c:	4a84      	ldr	r2, [pc, #528]	; (8015f60 <Auto_Fit+0x424>)
 8015d4e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015d52:	2a00      	cmp	r2, #0
 8015d54:	bf14      	ite	ne
 8015d56:	2201      	movne	r2, #1
 8015d58:	2200      	moveq	r2, #0
 8015d5a:	b2d2      	uxtb	r2, r2
 8015d5c:	4422      	add	r2, r4
 8015d5e:	0052      	lsls	r2, r2, #1
 8015d60:	440a      	add	r2, r1
 8015d62:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015d66:	0092      	lsls	r2, r2, #2
 8015d68:	497e      	ldr	r1, [pc, #504]	; (8015f64 <Auto_Fit+0x428>)
 8015d6a:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015d6e:	460c      	mov	r4, r1
 8015d70:	497d      	ldr	r1, [pc, #500]	; (8015f68 <Auto_Fit+0x42c>)
 8015d72:	5d09      	ldrb	r1, [r1, r4]
 8015d74:	fb92 f2f1 	sdiv	r2, r2, r1
 8015d78:	fb02 f303 	mul.w	r3, r2, r3
 8015d7c:	131b      	asrs	r3, r3, #12
 8015d7e:	3364      	adds	r3, #100	; 0x64
 8015d80:	4a73      	ldr	r2, [pc, #460]	; (8015f50 <Auto_Fit+0x414>)
 8015d82:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015d86:	1a9a      	subs	r2, r3, r2
 8015d88:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015d8c:	4413      	add	r3, r2
 8015d8e:	4298      	cmp	r0, r3
 8015d90:	dc32      	bgt.n	8015df8 <Auto_Fit+0x2bc>
         (List[THRESHOLD].Val < (((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)  - Tmp))){
 8015d92:	4b6f      	ldr	r3, [pc, #444]	; (8015f50 <Auto_Fit+0x414>)
 8015d94:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8015d98:	4618      	mov	r0, r3
 8015d9a:	4b75      	ldr	r3, [pc, #468]	; (8015f70 <Auto_Fit+0x434>)
 8015d9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015da0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015da4:	4a6c      	ldr	r2, [pc, #432]	; (8015f58 <Auto_Fit+0x41c>)
 8015da6:	6811      	ldr	r1, [r2, #0]
 8015da8:	4a6c      	ldr	r2, [pc, #432]	; (8015f5c <Auto_Fit+0x420>)
 8015daa:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015dae:	4614      	mov	r4, r2
 8015db0:	4a6b      	ldr	r2, [pc, #428]	; (8015f60 <Auto_Fit+0x424>)
 8015db2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015db6:	2a00      	cmp	r2, #0
 8015db8:	bf14      	ite	ne
 8015dba:	2201      	movne	r2, #1
 8015dbc:	2200      	moveq	r2, #0
 8015dbe:	b2d2      	uxtb	r2, r2
 8015dc0:	4422      	add	r2, r4
 8015dc2:	0052      	lsls	r2, r2, #1
 8015dc4:	440a      	add	r2, r1
 8015dc6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015dca:	0092      	lsls	r2, r2, #2
 8015dcc:	4965      	ldr	r1, [pc, #404]	; (8015f64 <Auto_Fit+0x428>)
 8015dce:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015dd2:	460c      	mov	r4, r1
 8015dd4:	4964      	ldr	r1, [pc, #400]	; (8015f68 <Auto_Fit+0x42c>)
 8015dd6:	5d09      	ldrb	r1, [r1, r4]
 8015dd8:	fb92 f2f1 	sdiv	r2, r2, r1
 8015ddc:	fb02 f303 	mul.w	r3, r2, r3
 8015de0:	131b      	asrs	r3, r3, #12
 8015de2:	3364      	adds	r3, #100	; 0x64
 8015de4:	4a5a      	ldr	r2, [pc, #360]	; (8015f50 <Auto_Fit+0x414>)
 8015de6:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015dea:	1a9a      	subs	r2, r3, r2
 8015dec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015df0:	1ad3      	subs	r3, r2, r3
      if((List[THRESHOLD].Val > (((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)  + Tmp))||
 8015df2:	4298      	cmp	r0, r3
 8015df4:	f280 808e 	bge.w	8015f14 <Auto_Fit+0x3d8>
           if(abs(((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)+15)<195)
 8015df8:	4b5d      	ldr	r3, [pc, #372]	; (8015f70 <Auto_Fit+0x434>)
 8015dfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015dfe:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015e02:	4a55      	ldr	r2, [pc, #340]	; (8015f58 <Auto_Fit+0x41c>)
 8015e04:	6811      	ldr	r1, [r2, #0]
 8015e06:	4a55      	ldr	r2, [pc, #340]	; (8015f5c <Auto_Fit+0x420>)
 8015e08:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015e0c:	4610      	mov	r0, r2
 8015e0e:	4a54      	ldr	r2, [pc, #336]	; (8015f60 <Auto_Fit+0x424>)
 8015e10:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015e14:	2a00      	cmp	r2, #0
 8015e16:	bf14      	ite	ne
 8015e18:	2201      	movne	r2, #1
 8015e1a:	2200      	moveq	r2, #0
 8015e1c:	b2d2      	uxtb	r2, r2
 8015e1e:	4402      	add	r2, r0
 8015e20:	0052      	lsls	r2, r2, #1
 8015e22:	440a      	add	r2, r1
 8015e24:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015e28:	0092      	lsls	r2, r2, #2
 8015e2a:	494e      	ldr	r1, [pc, #312]	; (8015f64 <Auto_Fit+0x428>)
 8015e2c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015e30:	4608      	mov	r0, r1
 8015e32:	494d      	ldr	r1, [pc, #308]	; (8015f68 <Auto_Fit+0x42c>)
 8015e34:	5c09      	ldrb	r1, [r1, r0]
 8015e36:	fb92 f2f1 	sdiv	r2, r2, r1
 8015e3a:	fb02 f303 	mul.w	r3, r2, r3
 8015e3e:	131b      	asrs	r3, r3, #12
 8015e40:	3364      	adds	r3, #100	; 0x64
 8015e42:	4a43      	ldr	r2, [pc, #268]	; (8015f50 <Auto_Fit+0x414>)
 8015e44:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015e48:	1a9b      	subs	r3, r3, r2
 8015e4a:	330f      	adds	r3, #15
 8015e4c:	f113 0fc2 	cmn.w	r3, #194	; 0xc2
 8015e50:	db5c      	blt.n	8015f0c <Auto_Fit+0x3d0>
 8015e52:	4b47      	ldr	r3, [pc, #284]	; (8015f70 <Auto_Fit+0x434>)
 8015e54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015e58:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015e5c:	4a3e      	ldr	r2, [pc, #248]	; (8015f58 <Auto_Fit+0x41c>)
 8015e5e:	6811      	ldr	r1, [r2, #0]
 8015e60:	4a3e      	ldr	r2, [pc, #248]	; (8015f5c <Auto_Fit+0x420>)
 8015e62:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015e66:	4610      	mov	r0, r2
 8015e68:	4a3d      	ldr	r2, [pc, #244]	; (8015f60 <Auto_Fit+0x424>)
 8015e6a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015e6e:	2a00      	cmp	r2, #0
 8015e70:	bf14      	ite	ne
 8015e72:	2201      	movne	r2, #1
 8015e74:	2200      	moveq	r2, #0
 8015e76:	b2d2      	uxtb	r2, r2
 8015e78:	4402      	add	r2, r0
 8015e7a:	0052      	lsls	r2, r2, #1
 8015e7c:	440a      	add	r2, r1
 8015e7e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015e82:	0092      	lsls	r2, r2, #2
 8015e84:	4937      	ldr	r1, [pc, #220]	; (8015f64 <Auto_Fit+0x428>)
 8015e86:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015e8a:	4608      	mov	r0, r1
 8015e8c:	4936      	ldr	r1, [pc, #216]	; (8015f68 <Auto_Fit+0x42c>)
 8015e8e:	5c09      	ldrb	r1, [r1, r0]
 8015e90:	fb92 f2f1 	sdiv	r2, r2, r1
 8015e94:	fb02 f303 	mul.w	r3, r2, r3
 8015e98:	131b      	asrs	r3, r3, #12
 8015e9a:	3364      	adds	r3, #100	; 0x64
 8015e9c:	4a2c      	ldr	r2, [pc, #176]	; (8015f50 <Auto_Fit+0x414>)
 8015e9e:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015ea2:	1a9b      	subs	r3, r3, r2
 8015ea4:	330f      	adds	r3, #15
 8015ea6:	2bc2      	cmp	r3, #194	; 0xc2
 8015ea8:	dc30      	bgt.n	8015f0c <Auto_Fit+0x3d0>
             List[THRESHOLD].Val = ((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)+15 ;
 8015eaa:	4b31      	ldr	r3, [pc, #196]	; (8015f70 <Auto_Fit+0x434>)
 8015eac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015eb0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015eb4:	4a28      	ldr	r2, [pc, #160]	; (8015f58 <Auto_Fit+0x41c>)
 8015eb6:	6811      	ldr	r1, [r2, #0]
 8015eb8:	4a28      	ldr	r2, [pc, #160]	; (8015f5c <Auto_Fit+0x420>)
 8015eba:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015ebe:	4610      	mov	r0, r2
 8015ec0:	4a27      	ldr	r2, [pc, #156]	; (8015f60 <Auto_Fit+0x424>)
 8015ec2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015ec6:	2a00      	cmp	r2, #0
 8015ec8:	bf14      	ite	ne
 8015eca:	2201      	movne	r2, #1
 8015ecc:	2200      	moveq	r2, #0
 8015ece:	b2d2      	uxtb	r2, r2
 8015ed0:	4402      	add	r2, r0
 8015ed2:	0052      	lsls	r2, r2, #1
 8015ed4:	440a      	add	r2, r1
 8015ed6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015eda:	0092      	lsls	r2, r2, #2
 8015edc:	4921      	ldr	r1, [pc, #132]	; (8015f64 <Auto_Fit+0x428>)
 8015ede:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015ee2:	4608      	mov	r0, r1
 8015ee4:	4920      	ldr	r1, [pc, #128]	; (8015f68 <Auto_Fit+0x42c>)
 8015ee6:	5c09      	ldrb	r1, [r1, r0]
 8015ee8:	fb92 f2f1 	sdiv	r2, r2, r1
 8015eec:	fb02 f303 	mul.w	r3, r2, r3
 8015ef0:	131b      	asrs	r3, r3, #12
 8015ef2:	b29a      	uxth	r2, r3
 8015ef4:	4b16      	ldr	r3, [pc, #88]	; (8015f50 <Auto_Fit+0x414>)
 8015ef6:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015efa:	b29b      	uxth	r3, r3
 8015efc:	1ad3      	subs	r3, r2, r3
 8015efe:	b29b      	uxth	r3, r3
 8015f00:	3373      	adds	r3, #115	; 0x73
 8015f02:	b29b      	uxth	r3, r3
 8015f04:	b21a      	sxth	r2, r3
 8015f06:	4b12      	ldr	r3, [pc, #72]	; (8015f50 <Auto_Fit+0x414>)
 8015f08:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
           WaveProcess();
 8015f0c:	f7ff f934 	bl	8015178 <WaveProcess>
           Update_Proc_All();
 8015f10:	f7fe fdba 	bl	8014a88 <Update_Proc_All>
         }

      ParamTab[VTx2]= ParamTab[P1x2] + 2*List[THRESHOLD].Val;
 8015f14:	4b17      	ldr	r3, [pc, #92]	; (8015f74 <Auto_Fit+0x438>)
 8015f16:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8015f1a:	b29a      	uxth	r2, r3
 8015f1c:	4b0c      	ldr	r3, [pc, #48]	; (8015f50 <Auto_Fit+0x414>)
 8015f1e:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8015f22:	b29b      	uxth	r3, r3
 8015f24:	005b      	lsls	r3, r3, #1
 8015f26:	b29b      	uxth	r3, r3
 8015f28:	4413      	add	r3, r2
 8015f2a:	b29b      	uxth	r3, r3
 8015f2c:	b21a      	sxth	r2, r3
 8015f2e:	4b11      	ldr	r3, [pc, #68]	; (8015f74 <Auto_Fit+0x438>)
 8015f30:	839a      	strh	r2, [r3, #28]
      List[THRESHOLD].Flg |= UPD;
 8015f32:	4b07      	ldr	r3, [pc, #28]	; (8015f50 <Auto_Fit+0x414>)
 8015f34:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8015f38:	f043 0320 	orr.w	r3, r3, #32
 8015f3c:	b2da      	uxtb	r2, r3
 8015f3e:	4b04      	ldr	r3, [pc, #16]	; (8015f50 <Auto_Fit+0x414>)
 8015f40:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      Update_Title();
 8015f44:	f7fc fa9c 	bl	8012480 <Update_Title>

    //===========��ƽʱ��������==================
    HAL_Delay(100);
 8015f48:	2064      	movs	r0, #100	; 0x64
 8015f4a:	f002 fa43 	bl	80183d4 <HAL_Delay>
 8015f4e:	e013      	b.n	8015f78 <Auto_Fit+0x43c>
 8015f50:	20000298 	.word	0x20000298
 8015f54:	20002856 	.word	0x20002856
 8015f58:	2000057c 	.word	0x2000057c
 8015f5c:	20006886 	.word	0x20006886
 8015f60:	20002862 	.word	0x20002862
 8015f64:	2000284a 	.word	0x2000284a
 8015f68:	20000560 	.word	0x20000560
 8015f6c:	20002868 	.word	0x20002868
 8015f70:	2000286a 	.word	0x2000286a
 8015f74:	20000140 	.word	0x20000140

        if(((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)>10){
 8015f78:	4ba3      	ldr	r3, [pc, #652]	; (8016208 <Auto_Fit+0x6cc>)
 8015f7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015f7e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015f82:	4aa2      	ldr	r2, [pc, #648]	; (801620c <Auto_Fit+0x6d0>)
 8015f84:	6811      	ldr	r1, [r2, #0]
 8015f86:	4aa2      	ldr	r2, [pc, #648]	; (8016210 <Auto_Fit+0x6d4>)
 8015f88:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015f8c:	4610      	mov	r0, r2
 8015f8e:	4aa1      	ldr	r2, [pc, #644]	; (8016214 <Auto_Fit+0x6d8>)
 8015f90:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015f94:	2a00      	cmp	r2, #0
 8015f96:	bf14      	ite	ne
 8015f98:	2201      	movne	r2, #1
 8015f9a:	2200      	moveq	r2, #0
 8015f9c:	b2d2      	uxtb	r2, r2
 8015f9e:	4402      	add	r2, r0
 8015fa0:	0052      	lsls	r2, r2, #1
 8015fa2:	440a      	add	r2, r1
 8015fa4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015fa8:	0092      	lsls	r2, r2, #2
 8015faa:	499b      	ldr	r1, [pc, #620]	; (8016218 <Auto_Fit+0x6dc>)
 8015fac:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015fb0:	4608      	mov	r0, r1
 8015fb2:	499a      	ldr	r1, [pc, #616]	; (801621c <Auto_Fit+0x6e0>)
 8015fb4:	5c09      	ldrb	r1, [r1, r0]
 8015fb6:	fb92 f2f1 	sdiv	r2, r2, r1
 8015fba:	fb02 f303 	mul.w	r3, r2, r3
 8015fbe:	131b      	asrs	r3, r3, #12
 8015fc0:	3364      	adds	r3, #100	; 0x64
 8015fc2:	4a97      	ldr	r2, [pc, #604]	; (8016220 <Auto_Fit+0x6e4>)
 8015fc4:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015fc8:	1a9b      	subs	r3, r3, r2
 8015fca:	2b0a      	cmp	r3, #10
 8015fcc:	dd76      	ble.n	80160bc <Auto_Fit+0x580>
      WaveProcess();
 8015fce:	f7ff f8d3 	bl	8015178 <WaveProcess>
      Update_Proc_All();
 8015fd2:	f7fe fd59 	bl	8014a88 <Update_Proc_All>
      HAL_Delay(100);
 8015fd6:	2064      	movs	r0, #100	; 0x64
 8015fd8:	f002 f9fc 	bl	80183d4 <HAL_Delay>
      for(i=0;i<9;i++){
 8015fdc:	2300      	movs	r3, #0
 8015fde:	71fb      	strb	r3, [r7, #7]
 8015fe0:	e068      	b.n	80160b4 <Auto_Fit+0x578>
        WaveProcess();
 8015fe2:	f7ff f8c9 	bl	8015178 <WaveProcess>
        Tmp1 = (((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val;
 8015fe6:	4b8f      	ldr	r3, [pc, #572]	; (8016224 <Auto_Fit+0x6e8>)
 8015fe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015fec:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015ff0:	4a86      	ldr	r2, [pc, #536]	; (801620c <Auto_Fit+0x6d0>)
 8015ff2:	6811      	ldr	r1, [r2, #0]
 8015ff4:	4a86      	ldr	r2, [pc, #536]	; (8016210 <Auto_Fit+0x6d4>)
 8015ff6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015ffa:	4610      	mov	r0, r2
 8015ffc:	4a85      	ldr	r2, [pc, #532]	; (8016214 <Auto_Fit+0x6d8>)
 8015ffe:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016002:	2a00      	cmp	r2, #0
 8016004:	bf14      	ite	ne
 8016006:	2201      	movne	r2, #1
 8016008:	2200      	moveq	r2, #0
 801600a:	b2d2      	uxtb	r2, r2
 801600c:	4402      	add	r2, r0
 801600e:	0052      	lsls	r2, r2, #1
 8016010:	440a      	add	r2, r1
 8016012:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016016:	0092      	lsls	r2, r2, #2
 8016018:	497f      	ldr	r1, [pc, #508]	; (8016218 <Auto_Fit+0x6dc>)
 801601a:	f9b1 1000 	ldrsh.w	r1, [r1]
 801601e:	4608      	mov	r0, r1
 8016020:	497e      	ldr	r1, [pc, #504]	; (801621c <Auto_Fit+0x6e0>)
 8016022:	5c09      	ldrb	r1, [r1, r0]
 8016024:	fb92 f2f1 	sdiv	r2, r2, r1
 8016028:	fb02 f303 	mul.w	r3, r2, r3
 801602c:	131b      	asrs	r3, r3, #12
 801602e:	b29a      	uxth	r2, r3
 8016030:	4b7b      	ldr	r3, [pc, #492]	; (8016220 <Auto_Fit+0x6e4>)
 8016032:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8016036:	b29b      	uxth	r3, r3
 8016038:	1ad3      	subs	r3, r2, r3
 801603a:	b29b      	uxth	r3, r3
 801603c:	3364      	adds	r3, #100	; 0x64
 801603e:	b29b      	uxth	r3, r3
 8016040:	803b      	strh	r3, [r7, #0]
        if((Tmp1 < 40)&&(List[Y_RANGES].Val > 2)){       //40
 8016042:	f9b7 3000 	ldrsh.w	r3, [r7]
 8016046:	2b27      	cmp	r3, #39	; 0x27
 8016048:	dc15      	bgt.n	8016076 <Auto_Fit+0x53a>
 801604a:	4b75      	ldr	r3, [pc, #468]	; (8016220 <Auto_Fit+0x6e4>)
 801604c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016050:	2b02      	cmp	r3, #2
 8016052:	dd10      	ble.n	8016076 <Auto_Fit+0x53a>
          List[Y_RANGES].Val--;
 8016054:	4b72      	ldr	r3, [pc, #456]	; (8016220 <Auto_Fit+0x6e4>)
 8016056:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801605a:	b29b      	uxth	r3, r3
 801605c:	3b01      	subs	r3, #1
 801605e:	b29b      	uxth	r3, r3
 8016060:	b21a      	sxth	r2, r3
 8016062:	4b6f      	ldr	r3, [pc, #444]	; (8016220 <Auto_Fit+0x6e4>)
 8016064:	809a      	strh	r2, [r3, #4]
          List[V0_POSI].Val=100;
 8016066:	4b6e      	ldr	r3, [pc, #440]	; (8016220 <Auto_Fit+0x6e4>)
 8016068:	2264      	movs	r2, #100	; 0x64
 801606a:	839a      	strh	r2, [r3, #28]
          WaveProcess();
 801606c:	f7ff f884 	bl	8015178 <WaveProcess>
          Update_Proc_All();
 8016070:	f7fe fd0a 	bl	8014a88 <Update_Proc_All>
 8016074:	e018      	b.n	80160a8 <Auto_Fit+0x56c>
        }
        else if((Tmp1 > 100)&&(List[Y_RANGES].Val < 9)){ //110
 8016076:	f9b7 3000 	ldrsh.w	r3, [r7]
 801607a:	2b64      	cmp	r3, #100	; 0x64
 801607c:	dd14      	ble.n	80160a8 <Auto_Fit+0x56c>
 801607e:	4b68      	ldr	r3, [pc, #416]	; (8016220 <Auto_Fit+0x6e4>)
 8016080:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016084:	2b08      	cmp	r3, #8
 8016086:	dc0f      	bgt.n	80160a8 <Auto_Fit+0x56c>
          List[Y_RANGES].Val++;
 8016088:	4b65      	ldr	r3, [pc, #404]	; (8016220 <Auto_Fit+0x6e4>)
 801608a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801608e:	b29b      	uxth	r3, r3
 8016090:	3301      	adds	r3, #1
 8016092:	b29b      	uxth	r3, r3
 8016094:	b21a      	sxth	r2, r3
 8016096:	4b62      	ldr	r3, [pc, #392]	; (8016220 <Auto_Fit+0x6e4>)
 8016098:	809a      	strh	r2, [r3, #4]
          List[V0_POSI].Val=100;
 801609a:	4b61      	ldr	r3, [pc, #388]	; (8016220 <Auto_Fit+0x6e4>)
 801609c:	2264      	movs	r2, #100	; 0x64
 801609e:	839a      	strh	r2, [r3, #28]
          WaveProcess();
 80160a0:	f7ff f86a 	bl	8015178 <WaveProcess>
          Update_Proc_All();
 80160a4:	f7fe fcf0 	bl	8014a88 <Update_Proc_All>
        }
        HAL_Delay(50);
 80160a8:	2032      	movs	r0, #50	; 0x32
 80160aa:	f002 f993 	bl	80183d4 <HAL_Delay>
      for(i=0;i<9;i++){
 80160ae:	79fb      	ldrb	r3, [r7, #7]
 80160b0:	3301      	adds	r3, #1
 80160b2:	71fb      	strb	r3, [r7, #7]
 80160b4:	79fb      	ldrb	r3, [r7, #7]
 80160b6:	2b08      	cmp	r3, #8
 80160b8:	d993      	bls.n	8015fe2 <Auto_Fit+0x4a6>
 80160ba:	e054      	b.n	8016166 <Auto_Fit+0x62a>
      }
    }
    else if((((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 80160bc:	4b59      	ldr	r3, [pc, #356]	; (8016224 <Auto_Fit+0x6e8>)
 80160be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80160c2:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80160c6:	4a51      	ldr	r2, [pc, #324]	; (801620c <Auto_Fit+0x6d0>)
 80160c8:	6811      	ldr	r1, [r2, #0]
 80160ca:	4a51      	ldr	r2, [pc, #324]	; (8016210 <Auto_Fit+0x6d4>)
 80160cc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80160d0:	4610      	mov	r0, r2
 80160d2:	4a50      	ldr	r2, [pc, #320]	; (8016214 <Auto_Fit+0x6d8>)
 80160d4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80160d8:	2a00      	cmp	r2, #0
 80160da:	bf14      	ite	ne
 80160dc:	2201      	movne	r2, #1
 80160de:	2200      	moveq	r2, #0
 80160e0:	b2d2      	uxtb	r2, r2
 80160e2:	4402      	add	r2, r0
 80160e4:	0052      	lsls	r2, r2, #1
 80160e6:	440a      	add	r2, r1
 80160e8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80160ec:	0092      	lsls	r2, r2, #2
 80160ee:	494a      	ldr	r1, [pc, #296]	; (8016218 <Auto_Fit+0x6dc>)
 80160f0:	f9b1 1000 	ldrsh.w	r1, [r1]
 80160f4:	4608      	mov	r0, r1
 80160f6:	4949      	ldr	r1, [pc, #292]	; (801621c <Auto_Fit+0x6e0>)
 80160f8:	5c09      	ldrb	r1, [r1, r0]
 80160fa:	fb92 f2f1 	sdiv	r2, r2, r1
 80160fe:	fb02 f303 	mul.w	r3, r2, r3
 8016102:	131a      	asrs	r2, r3, #12
         - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)) <10){
 8016104:	4b48      	ldr	r3, [pc, #288]	; (8016228 <Auto_Fit+0x6ec>)
 8016106:	f9b3 3000 	ldrsh.w	r3, [r3]
 801610a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801610e:	493f      	ldr	r1, [pc, #252]	; (801620c <Auto_Fit+0x6d0>)
 8016110:	6808      	ldr	r0, [r1, #0]
 8016112:	493f      	ldr	r1, [pc, #252]	; (8016210 <Auto_Fit+0x6d4>)
 8016114:	f9b1 1000 	ldrsh.w	r1, [r1]
 8016118:	460c      	mov	r4, r1
 801611a:	493e      	ldr	r1, [pc, #248]	; (8016214 <Auto_Fit+0x6d8>)
 801611c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8016120:	2900      	cmp	r1, #0
 8016122:	bf14      	ite	ne
 8016124:	2101      	movne	r1, #1
 8016126:	2100      	moveq	r1, #0
 8016128:	b2c9      	uxtb	r1, r1
 801612a:	4421      	add	r1, r4
 801612c:	0049      	lsls	r1, r1, #1
 801612e:	4401      	add	r1, r0
 8016130:	f9b1 1000 	ldrsh.w	r1, [r1]
 8016134:	0089      	lsls	r1, r1, #2
 8016136:	4838      	ldr	r0, [pc, #224]	; (8016218 <Auto_Fit+0x6dc>)
 8016138:	f9b0 0000 	ldrsh.w	r0, [r0]
 801613c:	4604      	mov	r4, r0
 801613e:	4837      	ldr	r0, [pc, #220]	; (801621c <Auto_Fit+0x6e0>)
 8016140:	5d00      	ldrb	r0, [r0, r4]
 8016142:	fb91 f1f0 	sdiv	r1, r1, r0
 8016146:	fb01 f303 	mul.w	r3, r1, r3
 801614a:	131b      	asrs	r3, r3, #12
 801614c:	1ad3      	subs	r3, r2, r3
    else if((((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 801614e:	2b09      	cmp	r3, #9
 8016150:	dc09      	bgt.n	8016166 <Auto_Fit+0x62a>
      //===========���ź�ʱ��ѹ��2V==================
        List[Y_RANGES].Val=7; //2v
 8016152:	4b33      	ldr	r3, [pc, #204]	; (8016220 <Auto_Fit+0x6e4>)
 8016154:	2207      	movs	r2, #7
 8016156:	809a      	strh	r2, [r3, #4]
        WaveProcess();
 8016158:	f7ff f80e 	bl	8015178 <WaveProcess>
        Update_Proc_All();
 801615c:	f7fe fc94 	bl	8014a88 <Update_Proc_All>
        HAL_Delay(50);
 8016160:	2032      	movs	r0, #50	; 0x32
 8016162:	f002 f937 	bl	80183d4 <HAL_Delay>


    //======ʱ���Զ�ѡ��==============

    //if(!List[TRI_Ch].Val){//******Aͨ��***********
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8016166:	4b2f      	ldr	r3, [pc, #188]	; (8016224 <Auto_Fit+0x6e8>)
 8016168:	f9b3 3000 	ldrsh.w	r3, [r3]
 801616c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8016170:	4a26      	ldr	r2, [pc, #152]	; (801620c <Auto_Fit+0x6d0>)
 8016172:	6811      	ldr	r1, [r2, #0]
 8016174:	4a26      	ldr	r2, [pc, #152]	; (8016210 <Auto_Fit+0x6d4>)
 8016176:	f9b2 2000 	ldrsh.w	r2, [r2]
 801617a:	4610      	mov	r0, r2
 801617c:	4a25      	ldr	r2, [pc, #148]	; (8016214 <Auto_Fit+0x6d8>)
 801617e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016182:	2a00      	cmp	r2, #0
 8016184:	bf14      	ite	ne
 8016186:	2201      	movne	r2, #1
 8016188:	2200      	moveq	r2, #0
 801618a:	b2d2      	uxtb	r2, r2
 801618c:	4402      	add	r2, r0
 801618e:	0052      	lsls	r2, r2, #1
 8016190:	440a      	add	r2, r1
 8016192:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016196:	0092      	lsls	r2, r2, #2
 8016198:	491f      	ldr	r1, [pc, #124]	; (8016218 <Auto_Fit+0x6dc>)
 801619a:	f9b1 1000 	ldrsh.w	r1, [r1]
 801619e:	4608      	mov	r0, r1
 80161a0:	491e      	ldr	r1, [pc, #120]	; (801621c <Auto_Fit+0x6e0>)
 80161a2:	5c09      	ldrb	r1, [r1, r0]
 80161a4:	fb92 f2f1 	sdiv	r2, r2, r1
 80161a8:	fb02 f303 	mul.w	r3, r2, r3
 80161ac:	131b      	asrs	r3, r3, #12
           - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val);
 80161ae:	b29a      	uxth	r2, r3
 80161b0:	4b1d      	ldr	r3, [pc, #116]	; (8016228 <Auto_Fit+0x6ec>)
 80161b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80161b6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80161ba:	4914      	ldr	r1, [pc, #80]	; (801620c <Auto_Fit+0x6d0>)
 80161bc:	6808      	ldr	r0, [r1, #0]
 80161be:	4914      	ldr	r1, [pc, #80]	; (8016210 <Auto_Fit+0x6d4>)
 80161c0:	f9b1 1000 	ldrsh.w	r1, [r1]
 80161c4:	460c      	mov	r4, r1
 80161c6:	4913      	ldr	r1, [pc, #76]	; (8016214 <Auto_Fit+0x6d8>)
 80161c8:	f9b1 1000 	ldrsh.w	r1, [r1]
 80161cc:	2900      	cmp	r1, #0
 80161ce:	bf14      	ite	ne
 80161d0:	2101      	movne	r1, #1
 80161d2:	2100      	moveq	r1, #0
 80161d4:	b2c9      	uxtb	r1, r1
 80161d6:	4421      	add	r1, r4
 80161d8:	0049      	lsls	r1, r1, #1
 80161da:	4401      	add	r1, r0
 80161dc:	f9b1 1000 	ldrsh.w	r1, [r1]
 80161e0:	0089      	lsls	r1, r1, #2
 80161e2:	480d      	ldr	r0, [pc, #52]	; (8016218 <Auto_Fit+0x6dc>)
 80161e4:	f9b0 0000 	ldrsh.w	r0, [r0]
 80161e8:	4604      	mov	r4, r0
 80161ea:	480c      	ldr	r0, [pc, #48]	; (801621c <Auto_Fit+0x6e0>)
 80161ec:	5d00      	ldrb	r0, [r0, r4]
 80161ee:	fb91 f1f0 	sdiv	r1, r1, r0
 80161f2:	fb01 f303 	mul.w	r3, r1, r3
 80161f6:	131b      	asrs	r3, r3, #12
 80161f8:	b29b      	uxth	r3, r3
 80161fa:	1ad3      	subs	r3, r2, r3
 80161fc:	b29b      	uxth	r3, r3
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 80161fe:	803b      	strh	r3, [r7, #0]
      for(j=0;j<11;j++){
 8016200:	2300      	movs	r3, #0
 8016202:	71bb      	strb	r3, [r7, #6]
 8016204:	e06e      	b.n	80162e4 <Auto_Fit+0x7a8>
 8016206:	bf00      	nop
 8016208:	2000286a 	.word	0x2000286a
 801620c:	2000057c 	.word	0x2000057c
 8016210:	20006886 	.word	0x20006886
 8016214:	20002862 	.word	0x20002862
 8016218:	2000284a 	.word	0x2000284a
 801621c:	20000560 	.word	0x20000560
 8016220:	20000298 	.word	0x20000298
 8016224:	20002856 	.word	0x20002856
 8016228:	20002868 	.word	0x20002868
        WaveProcess();
 801622c:	f7fe ffa4 	bl	8015178 <WaveProcess>
        if((k==0)&&(Edge < 60)&&(List[TIM_BASE].Val >5)){
 8016230:	797b      	ldrb	r3, [r7, #5]
 8016232:	2b00      	cmp	r3, #0
 8016234:	d114      	bne.n	8016260 <Auto_Fit+0x724>
 8016236:	4b38      	ldr	r3, [pc, #224]	; (8016318 <Auto_Fit+0x7dc>)
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	2b3b      	cmp	r3, #59	; 0x3b
 801623c:	dc10      	bgt.n	8016260 <Auto_Fit+0x724>
 801623e:	4b37      	ldr	r3, [pc, #220]	; (801631c <Auto_Fit+0x7e0>)
 8016240:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016244:	2b05      	cmp	r3, #5
 8016246:	dd0b      	ble.n	8016260 <Auto_Fit+0x724>
          Set_Base(5);                           // Ӳ������ɨ��ʱ����λ
 8016248:	2005      	movs	r0, #5
 801624a:	f7f6 fa0f 	bl	800c66c <Set_Base>
          List[TIM_BASE].Val = 5;
 801624e:	4b33      	ldr	r3, [pc, #204]	; (801631c <Auto_Fit+0x7e0>)
 8016250:	2205      	movs	r2, #5
 8016252:	879a      	strh	r2, [r3, #60]	; 0x3c
          WaveProcess();
 8016254:	f7fe ff90 	bl	8015178 <WaveProcess>
          Update_Proc_All();
 8016258:	f7fe fc16 	bl	8014a88 <Update_Proc_All>
          k=1;
 801625c:	2301      	movs	r3, #1
 801625e:	717b      	strb	r3, [r7, #5]
        }
        if((Edge > 180)&&(List[TIM_BASE].Val > 2)){
 8016260:	4b2d      	ldr	r3, [pc, #180]	; (8016318 <Auto_Fit+0x7dc>)
 8016262:	681b      	ldr	r3, [r3, #0]
 8016264:	2bb4      	cmp	r3, #180	; 0xb4
 8016266:	dd1b      	ble.n	80162a0 <Auto_Fit+0x764>
 8016268:	4b2c      	ldr	r3, [pc, #176]	; (801631c <Auto_Fit+0x7e0>)
 801626a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801626e:	2b02      	cmp	r3, #2
 8016270:	dd16      	ble.n	80162a0 <Auto_Fit+0x764>
          List[TIM_BASE].Val--;
 8016272:	4b2a      	ldr	r3, [pc, #168]	; (801631c <Auto_Fit+0x7e0>)
 8016274:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016278:	b29b      	uxth	r3, r3
 801627a:	3b01      	subs	r3, #1
 801627c:	b29b      	uxth	r3, r3
 801627e:	b21a      	sxth	r2, r3
 8016280:	4b26      	ldr	r3, [pc, #152]	; (801631c <Auto_Fit+0x7e0>)
 8016282:	879a      	strh	r2, [r3, #60]	; 0x3c
          Set_Base(List[TIM_BASE].Val);   // Ӳ������ɨ��ʱ����λ
 8016284:	4b25      	ldr	r3, [pc, #148]	; (801631c <Auto_Fit+0x7e0>)
 8016286:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801628a:	4618      	mov	r0, r3
 801628c:	f7f6 f9ee 	bl	800c66c <Set_Base>
          WaveProcess();
 8016290:	f7fe ff72 	bl	8015178 <WaveProcess>
                 Update_Proc_All();
 8016294:	f7fe fbf8 	bl	8014a88 <Update_Proc_All>
          HAL_Delay(50);
 8016298:	2032      	movs	r0, #50	; 0x32
 801629a:	f002 f89b 	bl	80183d4 <HAL_Delay>
 801629e:	e01e      	b.n	80162de <Auto_Fit+0x7a2>
        }
        else if((Edge < 80)&&(List[TIM_BASE].Val< 11)){
 80162a0:	4b1d      	ldr	r3, [pc, #116]	; (8016318 <Auto_Fit+0x7dc>)
 80162a2:	681b      	ldr	r3, [r3, #0]
 80162a4:	2b4f      	cmp	r3, #79	; 0x4f
 80162a6:	dc1a      	bgt.n	80162de <Auto_Fit+0x7a2>
 80162a8:	4b1c      	ldr	r3, [pc, #112]	; (801631c <Auto_Fit+0x7e0>)
 80162aa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80162ae:	2b0a      	cmp	r3, #10
 80162b0:	dc15      	bgt.n	80162de <Auto_Fit+0x7a2>
          List[TIM_BASE].Val++;
 80162b2:	4b1a      	ldr	r3, [pc, #104]	; (801631c <Auto_Fit+0x7e0>)
 80162b4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80162b8:	b29b      	uxth	r3, r3
 80162ba:	3301      	adds	r3, #1
 80162bc:	b29b      	uxth	r3, r3
 80162be:	b21a      	sxth	r2, r3
 80162c0:	4b16      	ldr	r3, [pc, #88]	; (801631c <Auto_Fit+0x7e0>)
 80162c2:	879a      	strh	r2, [r3, #60]	; 0x3c
          Set_Base(List[TIM_BASE].Val);   // Ӳ������ɨ��ʱ����λ
 80162c4:	4b15      	ldr	r3, [pc, #84]	; (801631c <Auto_Fit+0x7e0>)
 80162c6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80162ca:	4618      	mov	r0, r3
 80162cc:	f7f6 f9ce 	bl	800c66c <Set_Base>
          WaveProcess();
 80162d0:	f7fe ff52 	bl	8015178 <WaveProcess>
                 Update_Proc_All();
 80162d4:	f7fe fbd8 	bl	8014a88 <Update_Proc_All>
          HAL_Delay(50);
 80162d8:	2032      	movs	r0, #50	; 0x32
 80162da:	f002 f87b 	bl	80183d4 <HAL_Delay>
      for(j=0;j<11;j++){
 80162de:	79bb      	ldrb	r3, [r7, #6]
 80162e0:	3301      	adds	r3, #1
 80162e2:	71bb      	strb	r3, [r7, #6]
 80162e4:	79bb      	ldrb	r3, [r7, #6]
 80162e6:	2b0a      	cmp	r3, #10
 80162e8:	d9a0      	bls.n	801622c <Auto_Fit+0x6f0>
        }
      }

      if(Tmp1 < 20){
 80162ea:	f9b7 3000 	ldrsh.w	r3, [r7]
 80162ee:	2b13      	cmp	r3, #19
 80162f0:	dc0b      	bgt.n	801630a <Auto_Fit+0x7ce>
        List[TIM_BASE].Val=5; //50us
 80162f2:	4b0a      	ldr	r3, [pc, #40]	; (801631c <Auto_Fit+0x7e0>)
 80162f4:	2205      	movs	r2, #5
 80162f6:	879a      	strh	r2, [r3, #60]	; 0x3c
        Set_Base(List[TIM_BASE].Val);   // Ӳ������ɨ��ʱ����λ
 80162f8:	4b08      	ldr	r3, [pc, #32]	; (801631c <Auto_Fit+0x7e0>)
 80162fa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80162fe:	4618      	mov	r0, r3
 8016300:	f7f6 f9b4 	bl	800c66c <Set_Base>
        HAL_Delay(50);
 8016304:	2032      	movs	r0, #50	; 0x32
 8016306:	f002 f865 	bl	80183d4 <HAL_Delay>
      }
       Update_Proc_All();
 801630a:	f7fe fbbd 	bl	8014a88 <Update_Proc_All>
  }
}
 801630e:	bf00      	nop
 8016310:	370c      	adds	r7, #12
 8016312:	46bd      	mov	sp, r7
 8016314:	bd90      	pop	{r4, r7, pc}
 8016316:	bf00      	nop
 8016318:	20002850 	.word	0x20002850
 801631c:	20000298 	.word	0x20000298

08016320 <Init_Touch>:

unsigned char val[2]; //input buffer

// initialize touch screen
void Init_Touch(void)
{
 8016320:	b580      	push	{r7, lr}
 8016322:	af00      	add	r7, sp, #0
	Touch_SPI();
 8016324:	f000 f810 	bl	8016348 <Touch_SPI>
	HAL_GPIO_WritePin( TpCs_GPIO_Port, TpCs_Pin, GPIO_PIN_RESET);
 8016328:	2200      	movs	r2, #0
 801632a:	2140      	movs	r1, #64	; 0x40
 801632c:	4805      	ldr	r0, [pc, #20]	; (8016344 <Init_Touch+0x24>)
 801632e:	f003 fc2f 	bl	8019b90 <HAL_GPIO_WritePin>
// not needed yet
	HAL_GPIO_WritePin( TpCs_GPIO_Port, TpCs_Pin, GPIO_PIN_SET);
 8016332:	2201      	movs	r2, #1
 8016334:	2140      	movs	r1, #64	; 0x40
 8016336:	4803      	ldr	r0, [pc, #12]	; (8016344 <Init_Touch+0x24>)
 8016338:	f003 fc2a 	bl	8019b90 <HAL_GPIO_WritePin>
	LCD_SPI();
 801633c:	f000 f814 	bl	8016368 <LCD_SPI>
}
 8016340:	bf00      	nop
 8016342:	bd80      	pop	{r7, pc}
 8016344:	40020400 	.word	0x40020400

08016348 <Touch_SPI>:

// set SPI for touch controller
void Touch_SPI(void)
{
 8016348:	b580      	push	{r7, lr}
 801634a:	af00      	add	r7, sp, #0
//	HAL_SPI_DeInit(&hspi3);  switch on the fly
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 801634c:	4b05      	ldr	r3, [pc, #20]	; (8016364 <Touch_SPI+0x1c>)
 801634e:	2200      	movs	r2, #0
 8016350:	60da      	str	r2, [r3, #12]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16; //slow clock for touch controller
 8016352:	4b04      	ldr	r3, [pc, #16]	; (8016364 <Touch_SPI+0x1c>)
 8016354:	2218      	movs	r2, #24
 8016356:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi3);
 8016358:	4802      	ldr	r0, [pc, #8]	; (8016364 <Touch_SPI+0x1c>)
 801635a:	f005 fe95 	bl	801c088 <HAL_SPI_Init>
}
 801635e:	bf00      	nop
 8016360:	bd80      	pop	{r7, pc}
 8016362:	bf00      	nop
 8016364:	200069c0 	.word	0x200069c0

08016368 <LCD_SPI>:

// set SPI for LCD display
void LCD_SPI(void)
{
 8016368:	b580      	push	{r7, lr}
 801636a:	af00      	add	r7, sp, #0
//	HAL_SPI_DeInit(&hspi3); switch on fly
	hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 801636c:	4b05      	ldr	r3, [pc, #20]	; (8016384 <LCD_SPI+0x1c>)
 801636e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016372:	60da      	str	r2, [r3, #12]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8016374:	4b03      	ldr	r3, [pc, #12]	; (8016384 <LCD_SPI+0x1c>)
 8016376:	2210      	movs	r2, #16
 8016378:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi3);
 801637a:	4802      	ldr	r0, [pc, #8]	; (8016384 <LCD_SPI+0x1c>)
 801637c:	f005 fe84 	bl	801c088 <HAL_SPI_Init>
}
 8016380:	bf00      	nop
 8016382:	bd80      	pop	{r7, pc}
 8016384:	200069c0 	.word	0x200069c0

08016388 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8016388:	b580      	push	{r7, lr}
 801638a:	b082      	sub	sp, #8
 801638c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  short i;
  char SAVE_FLAG = 0;
 801638e:	2300      	movs	r3, #0
 8016390:	717b      	strb	r3, [r7, #5]
  char Pop_Num = 0;
 8016392:	2300      	movs	r3, #0
 8016394:	713b      	strb	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8016396:	f001 ffab 	bl	80182f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 801639a:	f001 f81d 	bl	80173d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 801639e:	f001 fbbf 	bl	8017b20 <MX_GPIO_Init>
  MX_DMA_Init();
 80163a2:	f001 fb87 	bl	8017ab4 <MX_DMA_Init>
  MX_ADC1_Init();
 80163a6:	f001 f88b 	bl	80174c0 <MX_ADC1_Init>
  MX_ADC2_Init();
 80163aa:	f001 f8db 	bl	8017564 <MX_ADC2_Init>
  MX_DAC_Init();
 80163ae:	f001 f92b 	bl	8017608 <MX_DAC_Init>
  MX_SPI2_Init();
 80163b2:	f001 f967 	bl	8017684 <MX_SPI2_Init>
  MX_SPI3_Init();
 80163b6:	f001 f99b 	bl	80176f0 <MX_SPI3_Init>
  MX_TIM1_Init();
 80163ba:	f001 f9d1 	bl	8017760 <MX_TIM1_Init>
  MX_TIM3_Init();
 80163be:	f001 fa45 	bl	801784c <MX_TIM3_Init>
  MX_TIM5_Init();
 80163c2:	f001 faa3 	bl	801790c <MX_TIM5_Init>
  MX_USB_DEVICE_Init();
 80163c6:	f00b fe8d 	bl	80220e4 <MX_USB_DEVICE_Init>
  MX_TIM7_Init();
 80163ca:	f001 fb2d 	bl	8017a28 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  Init_LCD();
 80163ce:	f7fb fd9f 	bl	8011f10 <Init_LCD>
  Init_Touch();
 80163d2:	f7ff ffa5 	bl	8016320 <Init_Touch>

  SetColor(BLK, WHT);
 80163d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80163da:	2000      	movs	r0, #0
 80163dc:	f7f7 fc8c 	bl	800dcf8 <SetColor>

  DispStr8x14(8, 90, PRN, "         Oscilloscope              ");
 80163e0:	4bb3      	ldr	r3, [pc, #716]	; (80166b0 <main+0x328>)
 80163e2:	2200      	movs	r2, #0
 80163e4:	215a      	movs	r1, #90	; 0x5a
 80163e6:	2008      	movs	r0, #8
 80163e8:	f7f7 fc2e 	bl	800dc48 <DispStr8x14>
  DispStr8x14(8+22*8, 90, PRN, APP_VERSION);
 80163ec:	4bb1      	ldr	r3, [pc, #708]	; (80166b4 <main+0x32c>)
 80163ee:	2200      	movs	r2, #0
 80163f0:	215a      	movs	r1, #90	; 0x5a
 80163f2:	20b8      	movs	r0, #184	; 0xb8
 80163f4:	f7f7 fc28 	bl	800dc48 <DispStr8x14>
  DispStr8x14(8, 70, PRN, "        System Initializing...       ");
 80163f8:	4baf      	ldr	r3, [pc, #700]	; (80166b8 <main+0x330>)
 80163fa:	2200      	movs	r2, #0
 80163fc:	2146      	movs	r1, #70	; 0x46
 80163fe:	2008      	movs	r0, #8
 8016400:	f7f7 fc22 	bl	800dc48 <DispStr8x14>

  HAL_Delay(1000);
 8016404:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016408:	f001 ffe4 	bl	80183d4 <HAL_Delay>

//=============================check callibration׼===========================
  Read_CalFlag();
 801640c:	f7fa ffe8 	bl	80113e0 <Read_CalFlag>

  if(Cal_Flag == 1)
 8016410:	4baa      	ldr	r3, [pc, #680]	; (80166bc <main+0x334>)
 8016412:	781b      	ldrb	r3, [r3, #0]
 8016414:	2b01      	cmp	r3, #1
 8016416:	d10f      	bne.n	8016438 <main+0xb0>
  {
	  Cal_Flag = 0;
 8016418:	4ba8      	ldr	r3, [pc, #672]	; (80166bc <main+0x334>)
 801641a:	2200      	movs	r2, #0
 801641c:	701a      	strb	r2, [r3, #0]
	  SetColor(BLK, WHT);
 801641e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016422:	2000      	movs	r0, #0
 8016424:	f7f7 fc68 	bl	800dcf8 <SetColor>
	  Zero_Align();                              //set zero
 8016428:	f7fe fdb0 	bl	8014f8c <Zero_Align>
	  Restore();                                 //restore list
 801642c:	f7fb f9e2 	bl	80117f4 <Restore>
	  Save_Parameter();                          //save list
 8016430:	f7fa fffe 	bl	8011430 <Save_Parameter>
	  Save_Kpg();
 8016434:	f7fb f926 	bl	8011684 <Save_Kpg>
  }
  Read_Kpg();
 8016438:	f7fb f99a 	bl	8011770 <Read_Kpg>
  Read_Parameter();
 801643c:	f7fb f894 	bl	8011568 <Read_Parameter>
  File_Num();
 8016440:	f7f9 fcda 	bl	800fdf8 <File_Num>
  memcpy(Data, DEMO, 310);
 8016444:	f44f 729b 	mov.w	r2, #310	; 0x136
 8016448:	499d      	ldr	r1, [pc, #628]	; (80166c0 <main+0x338>)
 801644a:	489e      	ldr	r0, [pc, #632]	; (80166c4 <main+0x33c>)
 801644c:	f00c fbe8 	bl	8022c20 <memcpy>

  LCD_ClrScrn(GRY);
 8016450:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8016454:	f7fb fe72 	bl	801213c <LCD_ClrScrn>
  Update_Title();
 8016458:	f7fc f812 	bl	8012480 <Update_Title>

  List[SMPL_DPTH].Flg |= UPD;
 801645c:	4b9a      	ldr	r3, [pc, #616]	; (80166c8 <main+0x340>)
 801645e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8016462:	f043 0320 	orr.w	r3, r3, #32
 8016466:	b2da      	uxtb	r2, r3
 8016468:	4b97      	ldr	r3, [pc, #604]	; (80166c8 <main+0x340>)
 801646a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

  StdBy_Time = List[STANDBY].Val * MIN_UNIT;
 801646e:	4b96      	ldr	r3, [pc, #600]	; (80166c8 <main+0x340>)
 8016470:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 8016474:	b29b      	uxth	r3, r3
 8016476:	461a      	mov	r2, r3
 8016478:	0112      	lsls	r2, r2, #4
 801647a:	1ad3      	subs	r3, r2, r3
 801647c:	009b      	lsls	r3, r3, #2
 801647e:	b29b      	uxth	r3, r3
 8016480:	b21a      	sxth	r2, r3
 8016482:	4b92      	ldr	r3, [pc, #584]	; (80166cc <main+0x344>)
 8016484:	801a      	strh	r2, [r3, #0]

  // Start timer
  HAL_TIM_Base_Start_IT(&htim3);
 8016486:	4892      	ldr	r0, [pc, #584]	; (80166d0 <main+0x348>)
 8016488:	f006 fd22 	bl	801ced0 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    if((List[STANDBY].Val != 0)&&(StdBy_Time == 0))
 801648c:	4b8e      	ldr	r3, [pc, #568]	; (80166c8 <main+0x340>)
 801648e:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 8016492:	2b00      	cmp	r3, #0
 8016494:	d007      	beq.n	80164a6 <main+0x11e>
 8016496:	4b8d      	ldr	r3, [pc, #564]	; (80166cc <main+0x344>)
 8016498:	f9b3 3000 	ldrsh.w	r3, [r3]
 801649c:	2b00      	cmp	r3, #0
 801649e:	d102      	bne.n	80164a6 <main+0x11e>
	    {
	      StdBy_Flag = 1;
 80164a0:	4b8c      	ldr	r3, [pc, #560]	; (80166d4 <main+0x34c>)
 80164a2:	2201      	movs	r2, #1
 80164a4:	701a      	strb	r2, [r3, #0]
	    }

	    Update_Detail();
 80164a6:	f7fc ff57 	bl	8013358 <Update_Detail>
	    Update_Blink();
 80164aa:	f7fc f83d 	bl	8012528 <Update_Blink>
	    WaveProcess();
 80164ae:	f7fe fe63 	bl	8015178 <WaveProcess>
	    DrawWindow(WaveBuf, ParamTab);
 80164b2:	4989      	ldr	r1, [pc, #548]	; (80166d8 <main+0x350>)
 80164b4:	4889      	ldr	r0, [pc, #548]	; (80166dc <main+0x354>)
 80164b6:	f7f7 f9a3 	bl	800d800 <DrawWindow>

	   if(TIM_BASE_Val!=0)
 80164ba:	4b89      	ldr	r3, [pc, #548]	; (80166e0 <main+0x358>)
 80164bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d01c      	beq.n	80164fe <main+0x176>
	    {
	      List[TIM_BASE].Val=TIM_BASE_Val;
 80164c4:	4b86      	ldr	r3, [pc, #536]	; (80166e0 <main+0x358>)
 80164c6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80164ca:	4b7f      	ldr	r3, [pc, #508]	; (80166c8 <main+0x340>)
 80164cc:	879a      	strh	r2, [r3, #60]	; 0x3c
	      List[TIM_BASE].Flg |= UPD;
 80164ce:	4b7e      	ldr	r3, [pc, #504]	; (80166c8 <main+0x340>)
 80164d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80164d4:	f043 0320 	orr.w	r3, r3, #32
 80164d8:	b2da      	uxtb	r2, r3
 80164da:	4b7b      	ldr	r3, [pc, #492]	; (80166c8 <main+0x340>)
 80164dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	      TIM_BASE_Val=Current;
 80164e0:	4b80      	ldr	r3, [pc, #512]	; (80166e4 <main+0x35c>)
 80164e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80164e6:	4b7e      	ldr	r3, [pc, #504]	; (80166e0 <main+0x358>)
 80164e8:	801a      	strh	r2, [r3, #0]
	      Update_Title();
 80164ea:	f7fb ffc9 	bl	8012480 <Update_Title>
	      Current=TIM_BASE_Val;
 80164ee:	4b7c      	ldr	r3, [pc, #496]	; (80166e0 <main+0x358>)
 80164f0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80164f4:	4b7b      	ldr	r3, [pc, #492]	; (80166e4 <main+0x35c>)
 80164f6:	801a      	strh	r2, [r3, #0]
	      TIM_BASE_Val=0;
 80164f8:	4b79      	ldr	r3, [pc, #484]	; (80166e0 <main+0x358>)
 80164fa:	2200      	movs	r2, #0
 80164fc:	801a      	strh	r2, [r3, #0]
	    }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    if(Key_Buffer != 0)
 80164fe:	4b7a      	ldr	r3, [pc, #488]	; (80166e8 <main+0x360>)
 8016500:	781b      	ldrb	r3, [r3, #0]
 8016502:	b2db      	uxtb	r3, r3
 8016504:	2b00      	cmp	r3, #0
 8016506:	d0c1      	beq.n	801648c <main+0x104>
	    {
	      StdBy_Flag = 0;
 8016508:	4b72      	ldr	r3, [pc, #456]	; (80166d4 <main+0x34c>)
 801650a:	2200      	movs	r2, #0
 801650c:	701a      	strb	r2, [r3, #0]
	      PopupCnt = 10;                  // �ް���ʱ�˵���ά����ʾ 10��
 801650e:	4b77      	ldr	r3, [pc, #476]	; (80166ec <main+0x364>)
 8016510:	220a      	movs	r2, #10
 8016512:	801a      	strh	r2, [r3, #0]
	      List[MenuNow[Current]].Flg |= UPD;
 8016514:	4b73      	ldr	r3, [pc, #460]	; (80166e4 <main+0x35c>)
 8016516:	f9b3 3000 	ldrsh.w	r3, [r3]
 801651a:	461a      	mov	r2, r3
 801651c:	4b74      	ldr	r3, [pc, #464]	; (80166f0 <main+0x368>)
 801651e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016522:	4a69      	ldr	r2, [pc, #420]	; (80166c8 <main+0x340>)
 8016524:	00db      	lsls	r3, r3, #3
 8016526:	4413      	add	r3, r2
 8016528:	799b      	ldrb	r3, [r3, #6]
 801652a:	4a6e      	ldr	r2, [pc, #440]	; (80166e4 <main+0x35c>)
 801652c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016530:	4611      	mov	r1, r2
 8016532:	4a6f      	ldr	r2, [pc, #444]	; (80166f0 <main+0x368>)
 8016534:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8016538:	4610      	mov	r0, r2
 801653a:	f043 0320 	orr.w	r3, r3, #32
 801653e:	b2d9      	uxtb	r1, r3
 8016540:	4a61      	ldr	r2, [pc, #388]	; (80166c8 <main+0x340>)
 8016542:	00c3      	lsls	r3, r0, #3
 8016544:	4413      	add	r3, r2
 8016546:	460a      	mov	r2, r1
 8016548:	719a      	strb	r2, [r3, #6]

	      switch (Key_Buffer)
 801654a:	4b67      	ldr	r3, [pc, #412]	; (80166e8 <main+0x360>)
 801654c:	781b      	ldrb	r3, [r3, #0]
 801654e:	b2db      	uxtb	r3, r3
 8016550:	3b01      	subs	r3, #1
 8016552:	2b09      	cmp	r3, #9
 8016554:	f200 86fc 	bhi.w	8017350 <main+0xfc8>
 8016558:	a201      	add	r2, pc, #4	; (adr r2, 8016560 <main+0x1d8>)
 801655a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801655e:	bf00      	nop
 8016560:	080165d1 	.word	0x080165d1
 8016564:	080168db 	.word	0x080168db
 8016568:	08016a25 	.word	0x08016a25
 801656c:	08016ad3 	.word	0x08016ad3
 8016570:	08016b6f 	.word	0x08016b6f
 8016574:	08016f2d 	.word	0x08016f2d
 8016578:	08017351 	.word	0x08017351
 801657c:	080165ab 	.word	0x080165ab
 8016580:	08016589 	.word	0x08016589
 8016584:	080168c7 	.word	0x080168c7
	      {
	     case KEYCODE_MEM:
	         i = Save_Bmp(List[SAVE_BMP].Val);
 8016588:	4b4f      	ldr	r3, [pc, #316]	; (80166c8 <main+0x340>)
 801658a:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 801658e:	4618      	mov	r0, r3
 8016590:	f7f9 ff54 	bl	801043c <Save_Bmp>
 8016594:	4603      	mov	r3, r0
 8016596:	80fb      	strh	r3, [r7, #6]
	         DispFileInfo(i);
 8016598:	88fb      	ldrh	r3, [r7, #6]
 801659a:	b2db      	uxtb	r3, r3
 801659c:	4618      	mov	r0, r3
 801659e:	f7fe f9fd 	bl	801499c <DispFileInfo>
	         DispBMPInfo();
 80165a2:	f7fe fa2b 	bl	80149fc <DispBMPInfo>
	        break;
 80165a6:	f000 bed3 	b.w	8017350 <main+0xfc8>

	     case KEYCODE_ACT:
	       SAVE_FLAG=0;
 80165aa:	2300      	movs	r3, #0
 80165ac:	717b      	strb	r3, [r7, #5]
	       if(PopType & DAILOG_POP) Close_Pop();
 80165ae:	4b51      	ldr	r3, [pc, #324]	; (80166f4 <main+0x36c>)
 80165b0:	781b      	ldrb	r3, [r3, #0]
 80165b2:	f003 0304 	and.w	r3, r3, #4
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	d003      	beq.n	80165c2 <main+0x23a>
 80165ba:	f7f8 f921 	bl	800e800 <Close_Pop>
	       else {
	         Dialog_Pop("Save All ParamTab?");
	         Pop_Num = 1;
	       }
	       break;
 80165be:	f000 bec7 	b.w	8017350 <main+0xfc8>
	         Dialog_Pop("Save All ParamTab?");
 80165c2:	484d      	ldr	r0, [pc, #308]	; (80166f8 <main+0x370>)
 80165c4:	f7f8 f948 	bl	800e858 <Dialog_Pop>
	         Pop_Num = 1;
 80165c8:	2301      	movs	r3, #1
 80165ca:	713b      	strb	r3, [r7, #4]
	       break;
 80165cc:	f000 bec0 	b.w	8017350 <main+0xfc8>

	     case KEYCODE_PLAY:
	       if((Current == ST)&&(Cal_Flag==0))
 80165d0:	4b44      	ldr	r3, [pc, #272]	; (80166e4 <main+0x35c>)
 80165d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80165d6:	2b07      	cmp	r3, #7
 80165d8:	d151      	bne.n	801667e <main+0x2f6>
 80165da:	4b38      	ldr	r3, [pc, #224]	; (80166bc <main+0x334>)
 80165dc:	781b      	ldrb	r3, [r3, #0]
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d14d      	bne.n	801667e <main+0x2f6>
	       {
	         if(PopType & DAILOG_POP){
 80165e2:	4b44      	ldr	r3, [pc, #272]	; (80166f4 <main+0x36c>)
 80165e4:	781b      	ldrb	r3, [r3, #0]
 80165e6:	f003 0304 	and.w	r3, r3, #4
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d00e      	beq.n	801660c <main+0x284>
	           if(Pop_Num == 1){
 80165ee:	793b      	ldrb	r3, [r7, #4]
 80165f0:	2b01      	cmp	r3, #1
 80165f2:	d105      	bne.n	8016600 <main+0x278>
	             Save_Parameter();
 80165f4:	f7fa ff1c 	bl	8011430 <Save_Parameter>
	             Close_Pop();
 80165f8:	f7f8 f902 	bl	800e800 <Close_Pop>
	           Zero_Align();
	           Update_Proc_All();
	           Close_Pop();
	           CalSave_Pop("Save Cal ParamTab?");
	         }
	         break;
 80165fc:	f000 be99 	b.w	8017332 <main+0xfaa>
	             Close_Pop();
 8016600:	f7f8 f8fe 	bl	800e800 <Close_Pop>
	             List_Pop();
 8016604:	f7f8 f912 	bl	800e82c <List_Pop>
	         break;
 8016608:	f000 be93 	b.w	8017332 <main+0xfaa>
	         else if((PopType & LIST_POP) && (MenuNow[ST]==RESTORE )) {
 801660c:	4b39      	ldr	r3, [pc, #228]	; (80166f4 <main+0x36c>)
 801660e:	781b      	ldrb	r3, [r3, #0]
 8016610:	f003 0302 	and.w	r3, r3, #2
 8016614:	2b00      	cmp	r3, #0
 8016616:	d00e      	beq.n	8016636 <main+0x2ae>
 8016618:	4b35      	ldr	r3, [pc, #212]	; (80166f0 <main+0x368>)
 801661a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801661e:	2b28      	cmp	r3, #40	; 0x28
 8016620:	d109      	bne.n	8016636 <main+0x2ae>
	           Restore_CalPar();
 8016622:	f7fb f951 	bl	80118c8 <Restore_CalPar>
	           Dialog_Pop("Save All ParamTab?");
 8016626:	4834      	ldr	r0, [pc, #208]	; (80166f8 <main+0x370>)
 8016628:	f7f8 f916 	bl	800e858 <Dialog_Pop>
	           Cal_Flag = 1;
 801662c:	4b23      	ldr	r3, [pc, #140]	; (80166bc <main+0x334>)
 801662e:	2201      	movs	r2, #1
 8016630:	701a      	strb	r2, [r3, #0]
	         break;
 8016632:	f000 be7e 	b.w	8017332 <main+0xfaa>
	         else if((PopType & LIST_POP) && (MenuNow[ST]==AUTO_CAL )) {
 8016636:	4b2f      	ldr	r3, [pc, #188]	; (80166f4 <main+0x36c>)
 8016638:	781b      	ldrb	r3, [r3, #0]
 801663a:	f003 0302 	and.w	r3, r3, #2
 801663e:	2b00      	cmp	r3, #0
 8016640:	f000 8677 	beq.w	8017332 <main+0xfaa>
 8016644:	4b2a      	ldr	r3, [pc, #168]	; (80166f0 <main+0x368>)
 8016646:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801664a:	2b27      	cmp	r3, #39	; 0x27
 801664c:	f040 8671 	bne.w	8017332 <main+0xfaa>
	           Close_Pop();
 8016650:	f7f8 f8d6 	bl	800e800 <Close_Pop>
	           Calibrate_Pop("Waiting for Calibration...");
 8016654:	4829      	ldr	r0, [pc, #164]	; (80166fc <main+0x374>)
 8016656:	f7f8 f965 	bl	800e924 <Calibrate_Pop>
	           Cal_Flag = 1;
 801665a:	4b18      	ldr	r3, [pc, #96]	; (80166bc <main+0x334>)
 801665c:	2201      	movs	r2, #1
 801665e:	701a      	strb	r2, [r3, #0]
	           DrawWindow(WaveBuf, ParamTab);
 8016660:	491d      	ldr	r1, [pc, #116]	; (80166d8 <main+0x350>)
 8016662:	481e      	ldr	r0, [pc, #120]	; (80166dc <main+0x354>)
 8016664:	f7f7 f8cc 	bl	800d800 <DrawWindow>
	           Zero_Align();
 8016668:	f7fe fc90 	bl	8014f8c <Zero_Align>
	           Update_Proc_All();
 801666c:	f7fe fa0c 	bl	8014a88 <Update_Proc_All>
	           Close_Pop();
 8016670:	f7f8 f8c6 	bl	800e800 <Close_Pop>
	           CalSave_Pop("Save Cal ParamTab?");
 8016674:	4822      	ldr	r0, [pc, #136]	; (8016700 <main+0x378>)
 8016676:	f7f8 f98b 	bl	800e990 <CalSave_Pop>
	         break;
 801667a:	f000 be5a 	b.w	8017332 <main+0xfaa>
	       }
	       else if((Current == ST)&&(Cal_Flag==1)){
 801667e:	4b19      	ldr	r3, [pc, #100]	; (80166e4 <main+0x35c>)
 8016680:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016684:	2b07      	cmp	r3, #7
 8016686:	d13d      	bne.n	8016704 <main+0x37c>
 8016688:	4b0c      	ldr	r3, [pc, #48]	; (80166bc <main+0x334>)
 801668a:	781b      	ldrb	r3, [r3, #0]
 801668c:	2b01      	cmp	r3, #1
 801668e:	d139      	bne.n	8016704 <main+0x37c>
	         if(PopType & DAILOG_POP){
 8016690:	4b18      	ldr	r3, [pc, #96]	; (80166f4 <main+0x36c>)
 8016692:	781b      	ldrb	r3, [r3, #0]
 8016694:	f003 0304 	and.w	r3, r3, #4
 8016698:	2b00      	cmp	r3, #0
 801669a:	f000 864c 	beq.w	8017336 <main+0xfae>
	           Save_Kpg();
 801669e:	f7fa fff1 	bl	8011684 <Save_Kpg>
	           Close_Pop();
 80166a2:	f7f8 f8ad 	bl	800e800 <Close_Pop>
	           Cal_Flag = 0;
 80166a6:	4b05      	ldr	r3, [pc, #20]	; (80166bc <main+0x334>)
 80166a8:	2200      	movs	r2, #0
 80166aa:	701a      	strb	r2, [r3, #0]
	         }
	         break;
 80166ac:	f000 be43 	b.w	8017336 <main+0xfae>
 80166b0:	080009f4 	.word	0x080009f4
 80166b4:	20000580 	.word	0x20000580
 80166b8:	08000a18 	.word	0x08000a18
 80166bc:	200001b4 	.word	0x200001b4
 80166c0:	08000b58 	.word	0x08000b58
 80166c4:	20000008 	.word	0x20000008
 80166c8:	20000298 	.word	0x20000298
 80166cc:	2000079c 	.word	0x2000079c
 80166d0:	20006978 	.word	0x20006978
 80166d4:	200007a2 	.word	0x200007a2
 80166d8:	20000140 	.word	0x20000140
 80166dc:	20000c08 	.word	0x20000c08
 80166e0:	20002814 	.word	0x20002814
 80166e4:	2000079e 	.word	0x2000079e
 80166e8:	2000077d 	.word	0x2000077d
 80166ec:	20000000 	.word	0x20000000
 80166f0:	20000538 	.word	0x20000538
 80166f4:	2000078e 	.word	0x2000078e
 80166f8:	08000a40 	.word	0x08000a40
 80166fc:	08000a54 	.word	0x08000a54
 8016700:	08000a70 	.word	0x08000a70
	       }

	       if ((Current == FN)&&(PopType & LIST_POP)){
 8016704:	4bbc      	ldr	r3, [pc, #752]	; (80169f8 <main+0x670>)
 8016706:	f9b3 3000 	ldrsh.w	r3, [r3]
 801670a:	2b05      	cmp	r3, #5
 801670c:	d177      	bne.n	80167fe <main+0x476>
 801670e:	4bbb      	ldr	r3, [pc, #748]	; (80169fc <main+0x674>)
 8016710:	781b      	ldrb	r3, [r3, #0]
 8016712:	f003 0302 	and.w	r3, r3, #2
 8016716:	2b00      	cmp	r3, #0
 8016718:	d071      	beq.n	80167fe <main+0x476>
	         i = 0;
 801671a:	2300      	movs	r3, #0
 801671c:	80fb      	strh	r3, [r7, #6]
	         {
	           if(SAVE_FLAG==KEYCODE_MEM)Close_Pop();
 801671e:	797b      	ldrb	r3, [r7, #5]
 8016720:	2b09      	cmp	r3, #9
 8016722:	d101      	bne.n	8016728 <main+0x3a0>
 8016724:	f7f8 f86c 	bl	800e800 <Close_Pop>
	           if(MenuNow[FN] == SAVE_BMP) i = Save_Bmp(List[SAVE_BMP].Val);
 8016728:	4bb5      	ldr	r3, [pc, #724]	; (8016a00 <main+0x678>)
 801672a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801672e:	2b1d      	cmp	r3, #29
 8016730:	d107      	bne.n	8016742 <main+0x3ba>
 8016732:	4bb4      	ldr	r3, [pc, #720]	; (8016a04 <main+0x67c>)
 8016734:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 8016738:	4618      	mov	r0, r3
 801673a:	f7f9 fe7f 	bl	801043c <Save_Bmp>
 801673e:	4603      	mov	r3, r0
 8016740:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_DAT) i = Save_Dat(List[SAVE_DAT].Val);
 8016742:	4baf      	ldr	r3, [pc, #700]	; (8016a00 <main+0x678>)
 8016744:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016748:	2b1e      	cmp	r3, #30
 801674a:	d107      	bne.n	801675c <main+0x3d4>
 801674c:	4bad      	ldr	r3, [pc, #692]	; (8016a04 <main+0x67c>)
 801674e:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 8016752:	4618      	mov	r0, r3
 8016754:	f7f9 fd32 	bl	80101bc <Save_Dat>
 8016758:	4603      	mov	r3, r0
 801675a:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_BUF) i = Save_Buf(List[SAVE_BUF].Val);
 801675c:	4ba8      	ldr	r3, [pc, #672]	; (8016a00 <main+0x678>)
 801675e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016762:	2b1f      	cmp	r3, #31
 8016764:	d107      	bne.n	8016776 <main+0x3ee>
 8016766:	4ba7      	ldr	r3, [pc, #668]	; (8016a04 <main+0x67c>)
 8016768:	f9b3 30fc 	ldrsh.w	r3, [r3, #252]	; 0xfc
 801676c:	4618      	mov	r0, r3
 801676e:	f7f9 fc4f 	bl	8010010 <Save_Buf>
 8016772:	4603      	mov	r3, r0
 8016774:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_CSV) i = Save_Csv(List[SAVE_CSV].Val);
 8016776:	4ba2      	ldr	r3, [pc, #648]	; (8016a00 <main+0x678>)
 8016778:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801677c:	2b20      	cmp	r3, #32
 801677e:	d107      	bne.n	8016790 <main+0x408>
 8016780:	4ba0      	ldr	r3, [pc, #640]	; (8016a04 <main+0x67c>)
 8016782:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
 8016786:	4618      	mov	r0, r3
 8016788:	f7f9 ffc2 	bl	8010710 <Save_Csv>
 801678c:	4603      	mov	r3, r0
 801678e:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_SVG) i = Save_Svg(List[SAVE_SVG].Val);
 8016790:	4b9b      	ldr	r3, [pc, #620]	; (8016a00 <main+0x678>)
 8016792:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016796:	2b21      	cmp	r3, #33	; 0x21
 8016798:	d107      	bne.n	80167aa <main+0x422>
 801679a:	4b9a      	ldr	r3, [pc, #616]	; (8016a04 <main+0x67c>)
 801679c:	f9b3 310c 	ldrsh.w	r3, [r3, #268]	; 0x10c
 80167a0:	4618      	mov	r0, r3
 80167a2:	f7fa f9db 	bl	8010b5c <Save_Svg>
 80167a6:	4603      	mov	r3, r0
 80167a8:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == LOAD_DAT) i = Load_Dat(List[LOAD_DAT].Val);
 80167aa:	4b95      	ldr	r3, [pc, #596]	; (8016a00 <main+0x678>)
 80167ac:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80167b0:	2b22      	cmp	r3, #34	; 0x22
 80167b2:	d107      	bne.n	80167c4 <main+0x43c>
 80167b4:	4b93      	ldr	r3, [pc, #588]	; (8016a04 <main+0x67c>)
 80167b6:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	; 0x114
 80167ba:	4618      	mov	r0, r3
 80167bc:	f7f9 fd92 	bl	80102e4 <Load_Dat>
 80167c0:	4603      	mov	r3, r0
 80167c2:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == LOAD_BUF) i = Load_Buf(List[LOAD_BUF].Val);
 80167c4:	4b8e      	ldr	r3, [pc, #568]	; (8016a00 <main+0x678>)
 80167c6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80167ca:	2b23      	cmp	r3, #35	; 0x23
 80167cc:	d107      	bne.n	80167de <main+0x456>
 80167ce:	4b8d      	ldr	r3, [pc, #564]	; (8016a04 <main+0x67c>)
 80167d0:	f9b3 311c 	ldrsh.w	r3, [r3, #284]	; 0x11c
 80167d4:	4618      	mov	r0, r3
 80167d6:	f7f9 fb3d 	bl	800fe54 <Load_Buf>
 80167da:	4603      	mov	r3, r0
 80167dc:	80fb      	strh	r3, [r7, #6]
	           SAVE_FLAG = 0;
 80167de:	2300      	movs	r3, #0
 80167e0:	717b      	strb	r3, [r7, #5]
	         }
	         DispFileInfo(i);
 80167e2:	88fb      	ldrh	r3, [r7, #6]
 80167e4:	b2db      	uxtb	r3, r3
 80167e6:	4618      	mov	r0, r3
 80167e8:	f7fe f8d8 	bl	801499c <DispFileInfo>

	         if(PopType & DAILOG_POP)  Close_Pop();
 80167ec:	4b83      	ldr	r3, [pc, #524]	; (80169fc <main+0x674>)
 80167ee:	781b      	ldrb	r3, [r3, #0]
 80167f0:	f003 0304 	and.w	r3, r3, #4
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d062      	beq.n	80168be <main+0x536>
 80167f8:	f7f8 f802 	bl	800e800 <Close_Pop>
 80167fc:	e05f      	b.n	80168be <main+0x536>

	       }
	       else if((PopType & DAILOG_POP ) &&(SAVE_FLAG!=KEYCODE_MEM)){
 80167fe:	4b7f      	ldr	r3, [pc, #508]	; (80169fc <main+0x674>)
 8016800:	781b      	ldrb	r3, [r3, #0]
 8016802:	f003 0304 	and.w	r3, r3, #4
 8016806:	2b00      	cmp	r3, #0
 8016808:	d00b      	beq.n	8016822 <main+0x49a>
 801680a:	797b      	ldrb	r3, [r7, #5]
 801680c:	2b09      	cmp	r3, #9
 801680e:	d008      	beq.n	8016822 <main+0x49a>
	         Save_Parameter();
 8016810:	f7fa fe0e 	bl	8011430 <Save_Parameter>
	         Cal_Flag = 0;
 8016814:	4b7c      	ldr	r3, [pc, #496]	; (8016a08 <main+0x680>)
 8016816:	2200      	movs	r2, #0
 8016818:	701a      	strb	r2, [r3, #0]
	         Close_Pop();
 801681a:	f7f7 fff1 	bl	800e800 <Close_Pop>
	         break;
 801681e:	f000 bd97 	b.w	8017350 <main+0xfc8>
	       }
	       else {
	          if(Status & STOP){
 8016822:	4b7a      	ldr	r3, [pc, #488]	; (8016a0c <main+0x684>)
 8016824:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016828:	b29b      	uxth	r3, r3
 801682a:	f003 0301 	and.w	r3, r3, #1
 801682e:	2b00      	cmp	r3, #0
 8016830:	d02e      	beq.n	8016890 <main+0x508>
	            if(Status & LOADM )Status &= ~LOADM;
 8016832:	4b76      	ldr	r3, [pc, #472]	; (8016a0c <main+0x684>)
 8016834:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016838:	b29b      	uxth	r3, r3
 801683a:	f003 0310 	and.w	r3, r3, #16
 801683e:	2b00      	cmp	r3, #0
 8016840:	d007      	beq.n	8016852 <main+0x4ca>
 8016842:	4b72      	ldr	r3, [pc, #456]	; (8016a0c <main+0x684>)
 8016844:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016848:	f023 0310 	bic.w	r3, r3, #16
 801684c:	b21a      	sxth	r2, r3
 801684e:	4b6f      	ldr	r3, [pc, #444]	; (8016a0c <main+0x684>)
 8016850:	801a      	strh	r2, [r3, #0]
	            Status &= ~STOP;     // ��������״̬
 8016852:	4b6e      	ldr	r3, [pc, #440]	; (8016a0c <main+0x684>)
 8016854:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016858:	f023 0301 	bic.w	r3, r3, #1
 801685c:	b21a      	sxth	r2, r3
 801685e:	4b6b      	ldr	r3, [pc, #428]	; (8016a0c <main+0x684>)
 8016860:	801a      	strh	r2, [r3, #0]
	            if(List[SYNCMODE].Val==SINGL) ADC_Start();
 8016862:	4b68      	ldr	r3, [pc, #416]	; (8016a04 <main+0x67c>)
 8016864:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8016868:	2b04      	cmp	r3, #4
 801686a:	d101      	bne.n	8016870 <main+0x4e8>
 801686c:	f7f5 ff96 	bl	800c79c <ADC_Start>
	            if(List[SYNCMODE].Val==NORM)  ADC_Start();
 8016870:	4b64      	ldr	r3, [pc, #400]	; (8016a04 <main+0x67c>)
 8016872:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8016876:	2b03      	cmp	r3, #3
 8016878:	d101      	bne.n	801687e <main+0x4f6>
 801687a:	f7f5 ff8f 	bl	800c79c <ADC_Start>
	            Norm_Clr = 1;
 801687e:	4b64      	ldr	r3, [pc, #400]	; (8016a10 <main+0x688>)
 8016880:	2201      	movs	r2, #1
 8016882:	701a      	strb	r2, [r3, #0]
	            SNGL_Kflag = 1;
 8016884:	4b63      	ldr	r3, [pc, #396]	; (8016a14 <main+0x68c>)
 8016886:	2201      	movs	r2, #1
 8016888:	701a      	strb	r2, [r3, #0]
	            Update_Proc_All();
 801688a:	f7fe f8fd 	bl	8014a88 <Update_Proc_All>
 801688e:	e016      	b.n	80168be <main+0x536>

	            if(*(short*)F_Sector==0xaa55)Restore_Scene();

	          }
	          else {
	            Status |=  STOP;     // ������ͣ״̬
 8016890:	4b5e      	ldr	r3, [pc, #376]	; (8016a0c <main+0x684>)
 8016892:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016896:	f043 0301 	orr.w	r3, r3, #1
 801689a:	b21a      	sxth	r2, r3
 801689c:	4b5b      	ldr	r3, [pc, #364]	; (8016a0c <main+0x684>)
 801689e:	801a      	strh	r2, [r3, #0]
	            Ch1_Posi = List[V0_POSI].Val;
 80168a0:	4b58      	ldr	r3, [pc, #352]	; (8016a04 <main+0x67c>)
 80168a2:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 80168a6:	4b5c      	ldr	r3, [pc, #368]	; (8016a18 <main+0x690>)
 80168a8:	801a      	strh	r2, [r3, #0]
	            Ch2_Posi = List[EXT_POSI].Val;
 80168aa:	4b56      	ldr	r3, [pc, #344]	; (8016a04 <main+0x67c>)
 80168ac:	f9b3 20dc 	ldrsh.w	r2, [r3, #220]	; 0xdc
 80168b0:	4b5a      	ldr	r3, [pc, #360]	; (8016a1c <main+0x694>)
 80168b2:	801a      	strh	r2, [r3, #0]
	            Tri_Posi = List[THRESHOLD].Val;
 80168b4:	4b53      	ldr	r3, [pc, #332]	; (8016a04 <main+0x67c>)
 80168b6:	f9b3 2084 	ldrsh.w	r2, [r3, #132]	; 0x84
 80168ba:	4b59      	ldr	r3, [pc, #356]	; (8016a20 <main+0x698>)
 80168bc:	801a      	strh	r2, [r3, #0]
	            Save_Bmp(List[SAVE_BMP].Val);
	            List[SAVE_BMP].Val++;
	          #endif
	          }
	        }
	        DispStatus();            // ��ʾ����״̬
 80168be:	f7fd fdd7 	bl	8014470 <DispStatus>
 	       break;
 80168c2:	f000 bd45 	b.w	8017350 <main+0xfc8>

	      case KEYCODE_D_MANU:
	        if(List[FITTRIGG].Val)
 80168c6:	4b4f      	ldr	r3, [pc, #316]	; (8016a04 <main+0x67c>)
 80168c8:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	f000 8534 	beq.w	801733a <main+0xfb2>
	        {
	          Auto_Fit();
 80168d2:	f7ff f933 	bl	8015b3c <Auto_Fit>
	        }
	        break;
 80168d6:	f000 bd30 	b.w	801733a <main+0xfb2>

	      case KEYCODE_MANU:
	        if(!(PopType & LIST_POP)){
 80168da:	4b48      	ldr	r3, [pc, #288]	; (80169fc <main+0x674>)
 80168dc:	781b      	ldrb	r3, [r3, #0]
 80168de:	f003 0302 	and.w	r3, r3, #2
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d111      	bne.n	801690a <main+0x582>
	            if(Cal_Flag){
 80168e6:	4b48      	ldr	r3, [pc, #288]	; (8016a08 <main+0x680>)
 80168e8:	781b      	ldrb	r3, [r3, #0]
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d006      	beq.n	80168fc <main+0x574>
	              Cal_Flag = 0;
 80168ee:	4b46      	ldr	r3, [pc, #280]	; (8016a08 <main+0x680>)
 80168f0:	2200      	movs	r2, #0
 80168f2:	701a      	strb	r2, [r3, #0]
	              Close_Pop();
 80168f4:	f7f7 ff84 	bl	800e800 <Close_Pop>
	          // ------------ �ָ���ʾ��Ϣ��ʾ���Ҷ�ԭ����ʾ��Ϣ ------------
	          if(MenuNow[Current] == SMPL_DPTH) List[SMPL_DPTH].Flg  |= UPD; // ������ȸ�����ʾ
	          else if(Current == FN)           List[MenuNow[FN]].Flg |= UPD; // ָ�����ļ���д�������ʾ
	          else                             List[MenuNow[ME]].Flg |= UPD; // ָ���Ĳ��β����������ʾ
	        }
	        break;
 80168f8:	f000 bd2a 	b.w	8017350 <main+0xfc8>
	              Cal_Flag = 0;
 80168fc:	4b42      	ldr	r3, [pc, #264]	; (8016a08 <main+0x680>)
 80168fe:	2200      	movs	r2, #0
 8016900:	701a      	strb	r2, [r3, #0]
	              List_Pop(); // �˵����ر�ʱ, �򿪲˵���
 8016902:	f7f7 ff93 	bl	800e82c <List_Pop>
	        break;
 8016906:	f000 bd23 	b.w	8017350 <main+0xfc8>
	          Close_Pop();                // �˵����Ѵ�ʱ, �رղ˵���
 801690a:	f7f7 ff79 	bl	800e800 <Close_Pop>
	          if(Current == XN)      List[T1_POSI   ].Flg |= UPD;
 801690e:	4b3a      	ldr	r3, [pc, #232]	; (80169f8 <main+0x670>)
 8016910:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016914:	2b01      	cmp	r3, #1
 8016916:	d109      	bne.n	801692c <main+0x5a4>
 8016918:	4b3a      	ldr	r3, [pc, #232]	; (8016a04 <main+0x67c>)
 801691a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801691e:	f043 0320 	orr.w	r3, r3, #32
 8016922:	b2da      	uxtb	r2, r3
 8016924:	4b37      	ldr	r3, [pc, #220]	; (8016a04 <main+0x67c>)
 8016926:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 801692a:	e021      	b.n	8016970 <main+0x5e8>
	          else if(Current == YN) List[V1_POSI   ].Flg |= UPD;
 801692c:	4b32      	ldr	r3, [pc, #200]	; (80169f8 <main+0x670>)
 801692e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016932:	2b00      	cmp	r3, #0
 8016934:	d109      	bne.n	801694a <main+0x5c2>
 8016936:	4b33      	ldr	r3, [pc, #204]	; (8016a04 <main+0x67c>)
 8016938:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 801693c:	f043 0320 	orr.w	r3, r3, #32
 8016940:	b2da      	uxtb	r2, r3
 8016942:	4b30      	ldr	r3, [pc, #192]	; (8016a04 <main+0x67c>)
 8016944:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8016948:	e012      	b.n	8016970 <main+0x5e8>
	          else                   List[MenuNow[SN]].Flg |= UPD;
 801694a:	4b2d      	ldr	r3, [pc, #180]	; (8016a00 <main+0x678>)
 801694c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8016950:	4a2c      	ldr	r2, [pc, #176]	; (8016a04 <main+0x67c>)
 8016952:	00db      	lsls	r3, r3, #3
 8016954:	4413      	add	r3, r2
 8016956:	799b      	ldrb	r3, [r3, #6]
 8016958:	4a29      	ldr	r2, [pc, #164]	; (8016a00 <main+0x678>)
 801695a:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 801695e:	4610      	mov	r0, r2
 8016960:	f043 0320 	orr.w	r3, r3, #32
 8016964:	b2d9      	uxtb	r1, r3
 8016966:	4a27      	ldr	r2, [pc, #156]	; (8016a04 <main+0x67c>)
 8016968:	00c3      	lsls	r3, r0, #3
 801696a:	4413      	add	r3, r2
 801696c:	460a      	mov	r2, r1
 801696e:	719a      	strb	r2, [r3, #6]
	          if(MenuNow[Current] == SMPL_DPTH) List[SMPL_DPTH].Flg  |= UPD; // ������ȸ�����ʾ
 8016970:	4b21      	ldr	r3, [pc, #132]	; (80169f8 <main+0x670>)
 8016972:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016976:	461a      	mov	r2, r3
 8016978:	4b21      	ldr	r3, [pc, #132]	; (8016a00 <main+0x678>)
 801697a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801697e:	2b09      	cmp	r3, #9
 8016980:	d10a      	bne.n	8016998 <main+0x610>
 8016982:	4b20      	ldr	r3, [pc, #128]	; (8016a04 <main+0x67c>)
 8016984:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8016988:	f043 0320 	orr.w	r3, r3, #32
 801698c:	b2da      	uxtb	r2, r3
 801698e:	4b1d      	ldr	r3, [pc, #116]	; (8016a04 <main+0x67c>)
 8016990:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	        break;
 8016994:	f000 bcdc 	b.w	8017350 <main+0xfc8>
	          else if(Current == FN)           List[MenuNow[FN]].Flg |= UPD; // ָ�����ļ���д�������ʾ
 8016998:	4b17      	ldr	r3, [pc, #92]	; (80169f8 <main+0x670>)
 801699a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801699e:	2b05      	cmp	r3, #5
 80169a0:	d114      	bne.n	80169cc <main+0x644>
 80169a2:	4b17      	ldr	r3, [pc, #92]	; (8016a00 <main+0x678>)
 80169a4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80169a8:	4a16      	ldr	r2, [pc, #88]	; (8016a04 <main+0x67c>)
 80169aa:	00db      	lsls	r3, r3, #3
 80169ac:	4413      	add	r3, r2
 80169ae:	799b      	ldrb	r3, [r3, #6]
 80169b0:	4a13      	ldr	r2, [pc, #76]	; (8016a00 <main+0x678>)
 80169b2:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80169b6:	4610      	mov	r0, r2
 80169b8:	f043 0320 	orr.w	r3, r3, #32
 80169bc:	b2d9      	uxtb	r1, r3
 80169be:	4a11      	ldr	r2, [pc, #68]	; (8016a04 <main+0x67c>)
 80169c0:	00c3      	lsls	r3, r0, #3
 80169c2:	4413      	add	r3, r2
 80169c4:	460a      	mov	r2, r1
 80169c6:	719a      	strb	r2, [r3, #6]
	        break;
 80169c8:	f000 bcc2 	b.w	8017350 <main+0xfc8>
	          else                             List[MenuNow[ME]].Flg |= UPD; // ָ���Ĳ��β����������ʾ
 80169cc:	4b0c      	ldr	r3, [pc, #48]	; (8016a00 <main+0x678>)
 80169ce:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80169d2:	4a0c      	ldr	r2, [pc, #48]	; (8016a04 <main+0x67c>)
 80169d4:	00db      	lsls	r3, r3, #3
 80169d6:	4413      	add	r3, r2
 80169d8:	799b      	ldrb	r3, [r3, #6]
 80169da:	4a09      	ldr	r2, [pc, #36]	; (8016a00 <main+0x678>)
 80169dc:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80169e0:	4610      	mov	r0, r2
 80169e2:	f043 0320 	orr.w	r3, r3, #32
 80169e6:	b2d9      	uxtb	r1, r3
 80169e8:	4a06      	ldr	r2, [pc, #24]	; (8016a04 <main+0x67c>)
 80169ea:	00c3      	lsls	r3, r0, #3
 80169ec:	4413      	add	r3, r2
 80169ee:	460a      	mov	r2, r1
 80169f0:	719a      	strb	r2, [r3, #6]
	        break;
 80169f2:	f000 bcad 	b.w	8017350 <main+0xfc8>
 80169f6:	bf00      	nop
 80169f8:	2000079e 	.word	0x2000079e
 80169fc:	2000078e 	.word	0x2000078e
 8016a00:	20000538 	.word	0x20000538
 8016a04:	20000298 	.word	0x20000298
 8016a08:	200001b4 	.word	0x200001b4
 8016a0c:	200007a0 	.word	0x200007a0
 8016a10:	200007a7 	.word	0x200007a7
 8016a14:	2000055c 	.word	0x2000055c
 8016a18:	20006884 	.word	0x20006884
 8016a1c:	2000687c 	.word	0x2000687c
 8016a20:	20002860 	.word	0x20002860

	      case KEYCODE_UP:
	        if (PopType & LIST_POP){
 8016a24:	4bac      	ldr	r3, [pc, #688]	; (8016cd8 <main+0x950>)
 8016a26:	781b      	ldrb	r3, [r3, #0]
 8016a28:	f003 0302 	and.w	r3, r3, #2
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d03b      	beq.n	8016aa8 <main+0x720>
	          if(MenuNow[Current] > MU_BEGN[Current]) MenuNow[Current]--;
 8016a30:	4baa      	ldr	r3, [pc, #680]	; (8016cdc <main+0x954>)
 8016a32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a36:	461a      	mov	r2, r3
 8016a38:	4ba9      	ldr	r3, [pc, #676]	; (8016ce0 <main+0x958>)
 8016a3a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016a3e:	461a      	mov	r2, r3
 8016a40:	4ba6      	ldr	r3, [pc, #664]	; (8016cdc <main+0x954>)
 8016a42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a46:	4619      	mov	r1, r3
 8016a48:	4ba6      	ldr	r3, [pc, #664]	; (8016ce4 <main+0x95c>)
 8016a4a:	5c5b      	ldrb	r3, [r3, r1]
 8016a4c:	429a      	cmp	r2, r3
 8016a4e:	dd0e      	ble.n	8016a6e <main+0x6e6>
 8016a50:	4ba2      	ldr	r3, [pc, #648]	; (8016cdc <main+0x954>)
 8016a52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a56:	4aa2      	ldr	r2, [pc, #648]	; (8016ce0 <main+0x958>)
 8016a58:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8016a5c:	b292      	uxth	r2, r2
 8016a5e:	3a01      	subs	r2, #1
 8016a60:	b292      	uxth	r2, r2
 8016a62:	b211      	sxth	r1, r2
 8016a64:	4a9e      	ldr	r2, [pc, #632]	; (8016ce0 <main+0x958>)
 8016a66:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	          else                  MenuNow[Current] += M_ITEMS[Current]-1;
	        } else {
	          if (Current > 0) Current--;
	          else             Current = ST;
	        }
	        break;
 8016a6a:	f000 bc71 	b.w	8017350 <main+0xfc8>
	          else                  MenuNow[Current] += M_ITEMS[Current]-1;
 8016a6e:	4b9b      	ldr	r3, [pc, #620]	; (8016cdc <main+0x954>)
 8016a70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a74:	461a      	mov	r2, r3
 8016a76:	4b9a      	ldr	r3, [pc, #616]	; (8016ce0 <main+0x958>)
 8016a78:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016a7c:	b29a      	uxth	r2, r3
 8016a7e:	4b97      	ldr	r3, [pc, #604]	; (8016cdc <main+0x954>)
 8016a80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a84:	4619      	mov	r1, r3
 8016a86:	4b98      	ldr	r3, [pc, #608]	; (8016ce8 <main+0x960>)
 8016a88:	5c5b      	ldrb	r3, [r3, r1]
 8016a8a:	b29b      	uxth	r3, r3
 8016a8c:	4413      	add	r3, r2
 8016a8e:	b29b      	uxth	r3, r3
 8016a90:	3b01      	subs	r3, #1
 8016a92:	b299      	uxth	r1, r3
 8016a94:	4b91      	ldr	r3, [pc, #580]	; (8016cdc <main+0x954>)
 8016a96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a9a:	461a      	mov	r2, r3
 8016a9c:	b209      	sxth	r1, r1
 8016a9e:	4b90      	ldr	r3, [pc, #576]	; (8016ce0 <main+0x958>)
 8016aa0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	        break;
 8016aa4:	f000 bc54 	b.w	8017350 <main+0xfc8>
	          if (Current > 0) Current--;
 8016aa8:	4b8c      	ldr	r3, [pc, #560]	; (8016cdc <main+0x954>)
 8016aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	dd0a      	ble.n	8016ac8 <main+0x740>
 8016ab2:	4b8a      	ldr	r3, [pc, #552]	; (8016cdc <main+0x954>)
 8016ab4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ab8:	b29b      	uxth	r3, r3
 8016aba:	3b01      	subs	r3, #1
 8016abc:	b29b      	uxth	r3, r3
 8016abe:	b21a      	sxth	r2, r3
 8016ac0:	4b86      	ldr	r3, [pc, #536]	; (8016cdc <main+0x954>)
 8016ac2:	801a      	strh	r2, [r3, #0]
	        break;
 8016ac4:	f000 bc44 	b.w	8017350 <main+0xfc8>
	          else             Current = ST;
 8016ac8:	4b84      	ldr	r3, [pc, #528]	; (8016cdc <main+0x954>)
 8016aca:	2207      	movs	r2, #7
 8016acc:	801a      	strh	r2, [r3, #0]
	        break;
 8016ace:	f000 bc3f 	b.w	8017350 <main+0xfc8>

	     case KEYCODE_DOWN:
	        if(PopType & LIST_POP){
 8016ad2:	4b81      	ldr	r3, [pc, #516]	; (8016cd8 <main+0x950>)
 8016ad4:	781b      	ldrb	r3, [r3, #0]
 8016ad6:	f003 0302 	and.w	r3, r3, #2
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	d034      	beq.n	8016b48 <main+0x7c0>
	          MenuNow[Current]++;
 8016ade:	4b7f      	ldr	r3, [pc, #508]	; (8016cdc <main+0x954>)
 8016ae0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ae4:	4a7e      	ldr	r2, [pc, #504]	; (8016ce0 <main+0x958>)
 8016ae6:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8016aea:	b292      	uxth	r2, r2
 8016aec:	3201      	adds	r2, #1
 8016aee:	b292      	uxth	r2, r2
 8016af0:	b211      	sxth	r1, r2
 8016af2:	4a7b      	ldr	r2, [pc, #492]	; (8016ce0 <main+0x958>)
 8016af4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	          if(MenuNow[Current] >=(MU_BEGN[Current]+M_ITEMS[Current])){
 8016af8:	4b78      	ldr	r3, [pc, #480]	; (8016cdc <main+0x954>)
 8016afa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016afe:	461a      	mov	r2, r3
 8016b00:	4b77      	ldr	r3, [pc, #476]	; (8016ce0 <main+0x958>)
 8016b02:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016b06:	461a      	mov	r2, r3
 8016b08:	4b74      	ldr	r3, [pc, #464]	; (8016cdc <main+0x954>)
 8016b0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b0e:	4619      	mov	r1, r3
 8016b10:	4b74      	ldr	r3, [pc, #464]	; (8016ce4 <main+0x95c>)
 8016b12:	5c5b      	ldrb	r3, [r3, r1]
 8016b14:	4619      	mov	r1, r3
 8016b16:	4b71      	ldr	r3, [pc, #452]	; (8016cdc <main+0x954>)
 8016b18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b1c:	4618      	mov	r0, r3
 8016b1e:	4b72      	ldr	r3, [pc, #456]	; (8016ce8 <main+0x960>)
 8016b20:	5c1b      	ldrb	r3, [r3, r0]
 8016b22:	440b      	add	r3, r1
 8016b24:	429a      	cmp	r2, r3
 8016b26:	f2c0 840a 	blt.w	801733e <main+0xfb6>
	            MenuNow[Current] = MU_BEGN[Current];
 8016b2a:	4b6c      	ldr	r3, [pc, #432]	; (8016cdc <main+0x954>)
 8016b2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b30:	461a      	mov	r2, r3
 8016b32:	4b6c      	ldr	r3, [pc, #432]	; (8016ce4 <main+0x95c>)
 8016b34:	5c99      	ldrb	r1, [r3, r2]
 8016b36:	4b69      	ldr	r3, [pc, #420]	; (8016cdc <main+0x954>)
 8016b38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b3c:	461a      	mov	r2, r3
 8016b3e:	b209      	sxth	r1, r1
 8016b40:	4b67      	ldr	r3, [pc, #412]	; (8016ce0 <main+0x958>)
 8016b42:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	          }
	        } else {
	          if (Current < 7) Current++;
	          else             Current = YN;
	        }
	        break;
 8016b46:	e3fa      	b.n	801733e <main+0xfb6>
	          if (Current < 7) Current++;
 8016b48:	4b64      	ldr	r3, [pc, #400]	; (8016cdc <main+0x954>)
 8016b4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b4e:	2b06      	cmp	r3, #6
 8016b50:	dc09      	bgt.n	8016b66 <main+0x7de>
 8016b52:	4b62      	ldr	r3, [pc, #392]	; (8016cdc <main+0x954>)
 8016b54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b58:	b29b      	uxth	r3, r3
 8016b5a:	3301      	adds	r3, #1
 8016b5c:	b29b      	uxth	r3, r3
 8016b5e:	b21a      	sxth	r2, r3
 8016b60:	4b5e      	ldr	r3, [pc, #376]	; (8016cdc <main+0x954>)
 8016b62:	801a      	strh	r2, [r3, #0]
	        break;
 8016b64:	e3eb      	b.n	801733e <main+0xfb6>
	          else             Current = YN;
 8016b66:	4b5d      	ldr	r3, [pc, #372]	; (8016cdc <main+0x954>)
 8016b68:	2200      	movs	r2, #0
 8016b6a:	801a      	strh	r2, [r3, #0]
	        break;
 8016b6c:	e3e7      	b.n	801733e <main+0xfb6>

	      case KEYCODE_LEFT:
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 8016b6e:	4b5b      	ldr	r3, [pc, #364]	; (8016cdc <main+0x954>)
 8016b70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b74:	2b07      	cmp	r3, #7
 8016b76:	d106      	bne.n	8016b86 <main+0x7fe>
 8016b78:	4b57      	ldr	r3, [pc, #348]	; (8016cd8 <main+0x950>)
 8016b7a:	781b      	ldrb	r3, [r3, #0]
 8016b7c:	f003 0302 	and.w	r3, r3, #2
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	f000 83de 	beq.w	8017342 <main+0xfba>
	        List[MenuNow[Current]].Flg |= UPD;  // ˢ�±��ǰԭ��ʾ��Ŀ����
 8016b86:	4b55      	ldr	r3, [pc, #340]	; (8016cdc <main+0x954>)
 8016b88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b8c:	461a      	mov	r2, r3
 8016b8e:	4b54      	ldr	r3, [pc, #336]	; (8016ce0 <main+0x958>)
 8016b90:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016b94:	4a55      	ldr	r2, [pc, #340]	; (8016cec <main+0x964>)
 8016b96:	00db      	lsls	r3, r3, #3
 8016b98:	4413      	add	r3, r2
 8016b9a:	799b      	ldrb	r3, [r3, #6]
 8016b9c:	4a4f      	ldr	r2, [pc, #316]	; (8016cdc <main+0x954>)
 8016b9e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016ba2:	4611      	mov	r1, r2
 8016ba4:	4a4e      	ldr	r2, [pc, #312]	; (8016ce0 <main+0x958>)
 8016ba6:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8016baa:	4610      	mov	r0, r2
 8016bac:	f043 0320 	orr.w	r3, r3, #32
 8016bb0:	b2d9      	uxtb	r1, r3
 8016bb2:	4a4e      	ldr	r2, [pc, #312]	; (8016cec <main+0x964>)
 8016bb4:	00c3      	lsls	r3, r0, #3
 8016bb6:	4413      	add	r3, r2
 8016bb8:	460a      	mov	r2, r1
 8016bba:	719a      	strb	r2, [r3, #6]
	        if(List[MenuNow[Current]].Val <=MIN[MenuNow[Current]]){
 8016bbc:	4b47      	ldr	r3, [pc, #284]	; (8016cdc <main+0x954>)
 8016bbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016bc2:	461a      	mov	r2, r3
 8016bc4:	4b46      	ldr	r3, [pc, #280]	; (8016ce0 <main+0x958>)
 8016bc6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016bca:	4a48      	ldr	r2, [pc, #288]	; (8016cec <main+0x964>)
 8016bcc:	00db      	lsls	r3, r3, #3
 8016bce:	4413      	add	r3, r2
 8016bd0:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8016bd4:	4b41      	ldr	r3, [pc, #260]	; (8016cdc <main+0x954>)
 8016bd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016bda:	4619      	mov	r1, r3
 8016bdc:	4b40      	ldr	r3, [pc, #256]	; (8016ce0 <main+0x958>)
 8016bde:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016be2:	4619      	mov	r1, r3
 8016be4:	4b42      	ldr	r3, [pc, #264]	; (8016cf0 <main+0x968>)
 8016be6:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016bea:	429a      	cmp	r2, r3
 8016bec:	f300 8084 	bgt.w	8016cf8 <main+0x970>
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 8016bf0:	4b3a      	ldr	r3, [pc, #232]	; (8016cdc <main+0x954>)
 8016bf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016bf6:	461a      	mov	r2, r3
 8016bf8:	4b39      	ldr	r3, [pc, #228]	; (8016ce0 <main+0x958>)
 8016bfa:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016bfe:	2b01      	cmp	r3, #1
 8016c00:	d051      	beq.n	8016ca6 <main+0x91e>
 8016c02:	4b36      	ldr	r3, [pc, #216]	; (8016cdc <main+0x954>)
 8016c04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c08:	461a      	mov	r2, r3
 8016c0a:	4b35      	ldr	r3, [pc, #212]	; (8016ce0 <main+0x958>)
 8016c0c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016c10:	2b06      	cmp	r3, #6
 8016c12:	d048      	beq.n	8016ca6 <main+0x91e>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016c14:	4b31      	ldr	r3, [pc, #196]	; (8016cdc <main+0x954>)
 8016c16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c1a:	461a      	mov	r2, r3
 8016c1c:	4b30      	ldr	r3, [pc, #192]	; (8016ce0 <main+0x958>)
 8016c1e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 8016c22:	2b0c      	cmp	r3, #12
 8016c24:	d03f      	beq.n	8016ca6 <main+0x91e>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016c26:	4b2d      	ldr	r3, [pc, #180]	; (8016cdc <main+0x954>)
 8016c28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c2c:	461a      	mov	r2, r3
 8016c2e:	4b2c      	ldr	r3, [pc, #176]	; (8016ce0 <main+0x958>)
 8016c30:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016c34:	2b1c      	cmp	r3, #28
 8016c36:	d036      	beq.n	8016ca6 <main+0x91e>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8016c38:	4b28      	ldr	r3, [pc, #160]	; (8016cdc <main+0x954>)
 8016c3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c3e:	461a      	mov	r2, r3
 8016c40:	4b27      	ldr	r3, [pc, #156]	; (8016ce0 <main+0x958>)
 8016c42:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016c46:	2b0f      	cmp	r3, #15
 8016c48:	d02d      	beq.n	8016ca6 <main+0x91e>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8016c4a:	4b24      	ldr	r3, [pc, #144]	; (8016cdc <main+0x954>)
 8016c4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c50:	461a      	mov	r2, r3
 8016c52:	4b23      	ldr	r3, [pc, #140]	; (8016ce0 <main+0x958>)
 8016c54:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016c58:	2b0e      	cmp	r3, #14
 8016c5a:	d024      	beq.n	8016ca6 <main+0x91e>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8016c5c:	4b1f      	ldr	r3, [pc, #124]	; (8016cdc <main+0x954>)
 8016c5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c62:	461a      	mov	r2, r3
 8016c64:	4b1e      	ldr	r3, [pc, #120]	; (8016ce0 <main+0x958>)
 8016c66:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8016c6a:	2b0d      	cmp	r3, #13
 8016c6c:	d01b      	beq.n	8016ca6 <main+0x91e>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8016c6e:	4b1b      	ldr	r3, [pc, #108]	; (8016cdc <main+0x954>)
 8016c70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c74:	461a      	mov	r2, r3
 8016c76:	4b1a      	ldr	r3, [pc, #104]	; (8016ce0 <main+0x958>)
 8016c78:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016c7c:	2b1a      	cmp	r3, #26
 8016c7e:	d012      	beq.n	8016ca6 <main+0x91e>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 8016c80:	4b16      	ldr	r3, [pc, #88]	; (8016cdc <main+0x954>)
 8016c82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c86:	461a      	mov	r2, r3
 8016c88:	4b15      	ldr	r3, [pc, #84]	; (8016ce0 <main+0x958>)
 8016c8a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8016c8e:	2b02      	cmp	r3, #2
 8016c90:	d009      	beq.n	8016ca6 <main+0x91e>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 8016c92:	4b12      	ldr	r3, [pc, #72]	; (8016cdc <main+0x954>)
 8016c94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c98:	461a      	mov	r2, r3
 8016c9a:	4b11      	ldr	r3, [pc, #68]	; (8016ce0 <main+0x958>)
 8016c9c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016ca0:	2b24      	cmp	r3, #36	; 0x24
 8016ca2:	f040 812c 	bne.w	8016efe <main+0xb76>
	            List[MenuNow[Current]].Val =MAX[MenuNow[Current]] ;
 8016ca6:	4b0d      	ldr	r3, [pc, #52]	; (8016cdc <main+0x954>)
 8016ca8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016cac:	461a      	mov	r2, r3
 8016cae:	4b0c      	ldr	r3, [pc, #48]	; (8016ce0 <main+0x958>)
 8016cb0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016cb4:	461a      	mov	r2, r3
 8016cb6:	4b09      	ldr	r3, [pc, #36]	; (8016cdc <main+0x954>)
 8016cb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016cbc:	4619      	mov	r1, r3
 8016cbe:	4b08      	ldr	r3, [pc, #32]	; (8016ce0 <main+0x958>)
 8016cc0:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016cc4:	4618      	mov	r0, r3
 8016cc6:	4b0b      	ldr	r3, [pc, #44]	; (8016cf4 <main+0x96c>)
 8016cc8:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 8016ccc:	4a07      	ldr	r2, [pc, #28]	; (8016cec <main+0x964>)
 8016cce:	00c3      	lsls	r3, r0, #3
 8016cd0:	4413      	add	r3, r2
 8016cd2:	460a      	mov	r2, r1
 8016cd4:	809a      	strh	r2, [r3, #4]
 8016cd6:	e112      	b.n	8016efe <main+0xb76>
 8016cd8:	2000078e 	.word	0x2000078e
 8016cdc:	2000079e 	.word	0x2000079e
 8016ce0:	20000538 	.word	0x20000538
 8016ce4:	08001f40 	.word	0x08001f40
 8016ce8:	08001f48 	.word	0x08001f48
 8016cec:	20000298 	.word	0x20000298
 8016cf0:	08002214 	.word	0x08002214
 8016cf4:	080021b8 	.word	0x080021b8
	        } else {
	          if((MenuNow[Current] == VIEWPOSI)&&((List[MenuNow[Current]].Val) >=150 ))
 8016cf8:	4b88      	ldr	r3, [pc, #544]	; (8016f1c <main+0xb94>)
 8016cfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016cfe:	461a      	mov	r2, r3
 8016d00:	4b87      	ldr	r3, [pc, #540]	; (8016f20 <main+0xb98>)
 8016d02:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016d06:	2b08      	cmp	r3, #8
 8016d08:	d12a      	bne.n	8016d60 <main+0x9d8>
 8016d0a:	4b84      	ldr	r3, [pc, #528]	; (8016f1c <main+0xb94>)
 8016d0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d10:	461a      	mov	r2, r3
 8016d12:	4b83      	ldr	r3, [pc, #524]	; (8016f20 <main+0xb98>)
 8016d14:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016d18:	4a82      	ldr	r2, [pc, #520]	; (8016f24 <main+0xb9c>)
 8016d1a:	00db      	lsls	r3, r3, #3
 8016d1c:	4413      	add	r3, r2
 8016d1e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016d22:	2b95      	cmp	r3, #149	; 0x95
 8016d24:	dd1c      	ble.n	8016d60 <main+0x9d8>
	            List[MenuNow[Current]].Val-=25;
 8016d26:	4b7d      	ldr	r3, [pc, #500]	; (8016f1c <main+0xb94>)
 8016d28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d2c:	461a      	mov	r2, r3
 8016d2e:	4b7c      	ldr	r3, [pc, #496]	; (8016f20 <main+0xb98>)
 8016d30:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016d34:	4a7b      	ldr	r2, [pc, #492]	; (8016f24 <main+0xb9c>)
 8016d36:	00db      	lsls	r3, r3, #3
 8016d38:	4413      	add	r3, r2
 8016d3a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016d3e:	b29b      	uxth	r3, r3
 8016d40:	3b19      	subs	r3, #25
 8016d42:	b29a      	uxth	r2, r3
 8016d44:	4b75      	ldr	r3, [pc, #468]	; (8016f1c <main+0xb94>)
 8016d46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d4a:	4619      	mov	r1, r3
 8016d4c:	4b74      	ldr	r3, [pc, #464]	; (8016f20 <main+0xb98>)
 8016d4e:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016d52:	b211      	sxth	r1, r2
 8016d54:	4a73      	ldr	r2, [pc, #460]	; (8016f24 <main+0xb9c>)
 8016d56:	00db      	lsls	r3, r3, #3
 8016d58:	4413      	add	r3, r2
 8016d5a:	460a      	mov	r2, r1
 8016d5c:	809a      	strh	r2, [r3, #4]
 8016d5e:	e0a0      	b.n	8016ea2 <main+0xb1a>
	          else{
	          //============5.04�޸������߳�����������========
	            if(MenuNow[Current] == THRESHOLD){
 8016d60:	4b6e      	ldr	r3, [pc, #440]	; (8016f1c <main+0xb94>)
 8016d62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d66:	461a      	mov	r2, r3
 8016d68:	4b6d      	ldr	r3, [pc, #436]	; (8016f20 <main+0xb98>)
 8016d6a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016d6e:	2b10      	cmp	r3, #16
 8016d70:	d121      	bne.n	8016db6 <main+0xa2e>
	              if((List[V0_POSI].Val + List[THRESHOLD].Val) > 2)  //����������
 8016d72:	4b6c      	ldr	r3, [pc, #432]	; (8016f24 <main+0xb9c>)
 8016d74:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8016d78:	461a      	mov	r2, r3
 8016d7a:	4b6a      	ldr	r3, [pc, #424]	; (8016f24 <main+0xb9c>)
 8016d7c:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8016d80:	4413      	add	r3, r2
 8016d82:	2b02      	cmp	r3, #2
 8016d84:	f340 808d 	ble.w	8016ea2 <main+0xb1a>
	                List[MenuNow[Current]].Val--;
 8016d88:	4b64      	ldr	r3, [pc, #400]	; (8016f1c <main+0xb94>)
 8016d8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d8e:	461a      	mov	r2, r3
 8016d90:	4b63      	ldr	r3, [pc, #396]	; (8016f20 <main+0xb98>)
 8016d92:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016d96:	461a      	mov	r2, r3
 8016d98:	4962      	ldr	r1, [pc, #392]	; (8016f24 <main+0xb9c>)
 8016d9a:	00d3      	lsls	r3, r2, #3
 8016d9c:	440b      	add	r3, r1
 8016d9e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016da2:	b29b      	uxth	r3, r3
 8016da4:	3b01      	subs	r3, #1
 8016da6:	b29b      	uxth	r3, r3
 8016da8:	b218      	sxth	r0, r3
 8016daa:	495e      	ldr	r1, [pc, #376]	; (8016f24 <main+0xb9c>)
 8016dac:	00d3      	lsls	r3, r2, #3
 8016dae:	440b      	add	r3, r1
 8016db0:	4602      	mov	r2, r0
 8016db2:	809a      	strh	r2, [r3, #4]
 8016db4:	e075      	b.n	8016ea2 <main+0xb1a>
	            }
	            else if(MenuNow[Current] == V0_POSI){
 8016db6:	4b59      	ldr	r3, [pc, #356]	; (8016f1c <main+0xb94>)
 8016db8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016dbc:	461a      	mov	r2, r3
 8016dbe:	4b58      	ldr	r3, [pc, #352]	; (8016f20 <main+0xb98>)
 8016dc0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016dc4:	2b03      	cmp	r3, #3
 8016dc6:	d134      	bne.n	8016e32 <main+0xaaa>
	              if((List[V0_POSI].Val + List[THRESHOLD].Val) <2){
 8016dc8:	4b56      	ldr	r3, [pc, #344]	; (8016f24 <main+0xb9c>)
 8016dca:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8016dce:	461a      	mov	r2, r3
 8016dd0:	4b54      	ldr	r3, [pc, #336]	; (8016f24 <main+0xb9c>)
 8016dd2:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8016dd6:	4413      	add	r3, r2
 8016dd8:	2b01      	cmp	r3, #1
 8016dda:	dc13      	bgt.n	8016e04 <main+0xa7c>
	                List[V0_POSI].Val--;
 8016ddc:	4b51      	ldr	r3, [pc, #324]	; (8016f24 <main+0xb9c>)
 8016dde:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8016de2:	b29b      	uxth	r3, r3
 8016de4:	3b01      	subs	r3, #1
 8016de6:	b29b      	uxth	r3, r3
 8016de8:	b21a      	sxth	r2, r3
 8016dea:	4b4e      	ldr	r3, [pc, #312]	; (8016f24 <main+0xb9c>)
 8016dec:	839a      	strh	r2, [r3, #28]
	                List[THRESHOLD].Val++;
 8016dee:	4b4d      	ldr	r3, [pc, #308]	; (8016f24 <main+0xb9c>)
 8016df0:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8016df4:	b29b      	uxth	r3, r3
 8016df6:	3301      	adds	r3, #1
 8016df8:	b29b      	uxth	r3, r3
 8016dfa:	b21a      	sxth	r2, r3
 8016dfc:	4b49      	ldr	r3, [pc, #292]	; (8016f24 <main+0xb9c>)
 8016dfe:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8016e02:	e04e      	b.n	8016ea2 <main+0xb1a>
	              }else List[MenuNow[Current]].Val--;
 8016e04:	4b45      	ldr	r3, [pc, #276]	; (8016f1c <main+0xb94>)
 8016e06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e0a:	461a      	mov	r2, r3
 8016e0c:	4b44      	ldr	r3, [pc, #272]	; (8016f20 <main+0xb98>)
 8016e0e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016e12:	461a      	mov	r2, r3
 8016e14:	4943      	ldr	r1, [pc, #268]	; (8016f24 <main+0xb9c>)
 8016e16:	00d3      	lsls	r3, r2, #3
 8016e18:	440b      	add	r3, r1
 8016e1a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016e1e:	b29b      	uxth	r3, r3
 8016e20:	3b01      	subs	r3, #1
 8016e22:	b29b      	uxth	r3, r3
 8016e24:	b218      	sxth	r0, r3
 8016e26:	493f      	ldr	r1, [pc, #252]	; (8016f24 <main+0xb9c>)
 8016e28:	00d3      	lsls	r3, r2, #3
 8016e2a:	440b      	add	r3, r1
 8016e2c:	4602      	mov	r2, r0
 8016e2e:	809a      	strh	r2, [r3, #4]
 8016e30:	e037      	b.n	8016ea2 <main+0xb1a>
	            }
	            else if((MenuNow[Current] ==V1_POSI) && (List[V1_POSI].Val <= List[V2_POSI].Val))
 8016e32:	4b3a      	ldr	r3, [pc, #232]	; (8016f1c <main+0xb94>)
 8016e34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e38:	461a      	mov	r2, r3
 8016e3a:	4b39      	ldr	r3, [pc, #228]	; (8016f20 <main+0xb98>)
 8016e3c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016e40:	2b04      	cmp	r3, #4
 8016e42:	d118      	bne.n	8016e76 <main+0xaee>
 8016e44:	4b37      	ldr	r3, [pc, #220]	; (8016f24 <main+0xb9c>)
 8016e46:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8016e4a:	4b36      	ldr	r3, [pc, #216]	; (8016f24 <main+0xb9c>)
 8016e4c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8016e50:	429a      	cmp	r2, r3
 8016e52:	dc10      	bgt.n	8016e76 <main+0xaee>
	            List[MenuNow[Current]].Val=List[V2_POSI].Val;
 8016e54:	4b31      	ldr	r3, [pc, #196]	; (8016f1c <main+0xb94>)
 8016e56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e5a:	461a      	mov	r2, r3
 8016e5c:	4b30      	ldr	r3, [pc, #192]	; (8016f20 <main+0xb98>)
 8016e5e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016e62:	4618      	mov	r0, r3
 8016e64:	4b2f      	ldr	r3, [pc, #188]	; (8016f24 <main+0xb9c>)
 8016e66:	f9b3 102c 	ldrsh.w	r1, [r3, #44]	; 0x2c
 8016e6a:	4a2e      	ldr	r2, [pc, #184]	; (8016f24 <main+0xb9c>)
 8016e6c:	00c3      	lsls	r3, r0, #3
 8016e6e:	4413      	add	r3, r2
 8016e70:	460a      	mov	r2, r1
 8016e72:	809a      	strh	r2, [r3, #4]
 8016e74:	e015      	b.n	8016ea2 <main+0xb1a>
	            else List[MenuNow[Current]].Val--;
 8016e76:	4b29      	ldr	r3, [pc, #164]	; (8016f1c <main+0xb94>)
 8016e78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e7c:	461a      	mov	r2, r3
 8016e7e:	4b28      	ldr	r3, [pc, #160]	; (8016f20 <main+0xb98>)
 8016e80:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016e84:	461a      	mov	r2, r3
 8016e86:	4927      	ldr	r1, [pc, #156]	; (8016f24 <main+0xb9c>)
 8016e88:	00d3      	lsls	r3, r2, #3
 8016e8a:	440b      	add	r3, r1
 8016e8c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016e90:	b29b      	uxth	r3, r3
 8016e92:	3b01      	subs	r3, #1
 8016e94:	b29b      	uxth	r3, r3
 8016e96:	b218      	sxth	r0, r3
 8016e98:	4922      	ldr	r1, [pc, #136]	; (8016f24 <main+0xb9c>)
 8016e9a:	00d3      	lsls	r3, r2, #3
 8016e9c:	440b      	add	r3, r1
 8016e9e:	4602      	mov	r2, r0
 8016ea0:	809a      	strh	r2, [r3, #4]
	          }
	          //==============================================
	            if(MenuNow[Current] == SMPL_DPTH){
 8016ea2:	4b1e      	ldr	r3, [pc, #120]	; (8016f1c <main+0xb94>)
 8016ea4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ea8:	461a      	mov	r2, r3
 8016eaa:	4b1d      	ldr	r3, [pc, #116]	; (8016f20 <main+0xb98>)
 8016eac:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016eb0:	2b09      	cmp	r3, #9
 8016eb2:	d103      	bne.n	8016ebc <main+0xb34>
	              List[VIEWPOSI].Val=1 ;
 8016eb4:	4b1b      	ldr	r3, [pc, #108]	; (8016f24 <main+0xb9c>)
 8016eb6:	2201      	movs	r2, #1
 8016eb8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	           }
	            if((MenuNow[Current] ==T2_POSI) && (List[T2_POSI].Val <= List[T1_POSI].Val))
 8016ebc:	4b17      	ldr	r3, [pc, #92]	; (8016f1c <main+0xb94>)
 8016ebe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ec2:	461a      	mov	r2, r3
 8016ec4:	4b16      	ldr	r3, [pc, #88]	; (8016f20 <main+0xb98>)
 8016ec6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016eca:	2b0b      	cmp	r3, #11
 8016ecc:	d117      	bne.n	8016efe <main+0xb76>
 8016ece:	4b15      	ldr	r3, [pc, #84]	; (8016f24 <main+0xb9c>)
 8016ed0:	f9b3 205c 	ldrsh.w	r2, [r3, #92]	; 0x5c
 8016ed4:	4b13      	ldr	r3, [pc, #76]	; (8016f24 <main+0xb9c>)
 8016ed6:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8016eda:	429a      	cmp	r2, r3
 8016edc:	dc0f      	bgt.n	8016efe <main+0xb76>
	              List[MenuNow[Current]].Val=List[T1_POSI].Val;
 8016ede:	4b0f      	ldr	r3, [pc, #60]	; (8016f1c <main+0xb94>)
 8016ee0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ee4:	461a      	mov	r2, r3
 8016ee6:	4b0e      	ldr	r3, [pc, #56]	; (8016f20 <main+0xb98>)
 8016ee8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016eec:	4618      	mov	r0, r3
 8016eee:	4b0d      	ldr	r3, [pc, #52]	; (8016f24 <main+0xb9c>)
 8016ef0:	f9b3 1054 	ldrsh.w	r1, [r3, #84]	; 0x54
 8016ef4:	4a0b      	ldr	r2, [pc, #44]	; (8016f24 <main+0xb9c>)
 8016ef6:	00c3      	lsls	r3, r0, #3
 8016ef8:	4413      	add	r3, r2
 8016efa:	460a      	mov	r2, r1
 8016efc:	809a      	strh	r2, [r3, #4]
	        }
	        if(Current == TRG) Status &= ~STOP; // �ı�ͬ��ģʽ��ָ�����״̬
 8016efe:	4b07      	ldr	r3, [pc, #28]	; (8016f1c <main+0xb94>)
 8016f00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f04:	2b02      	cmp	r3, #2
 8016f06:	f040 821e 	bne.w	8017346 <main+0xfbe>
 8016f0a:	4b07      	ldr	r3, [pc, #28]	; (8016f28 <main+0xba0>)
 8016f0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f10:	f023 0301 	bic.w	r3, r3, #1
 8016f14:	b21a      	sxth	r2, r3
 8016f16:	4b04      	ldr	r3, [pc, #16]	; (8016f28 <main+0xba0>)
 8016f18:	801a      	strh	r2, [r3, #0]
	        break;
 8016f1a:	e214      	b.n	8017346 <main+0xfbe>
 8016f1c:	2000079e 	.word	0x2000079e
 8016f20:	20000538 	.word	0x20000538
 8016f24:	20000298 	.word	0x20000298
 8016f28:	200007a0 	.word	0x200007a0

	      case KEYCODE_RIGHT:
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 8016f2c:	4bb7      	ldr	r3, [pc, #732]	; (801720c <main+0xe84>)
 8016f2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f32:	2b07      	cmp	r3, #7
 8016f34:	d106      	bne.n	8016f44 <main+0xbbc>
 8016f36:	4bb6      	ldr	r3, [pc, #728]	; (8017210 <main+0xe88>)
 8016f38:	781b      	ldrb	r3, [r3, #0]
 8016f3a:	f003 0302 	and.w	r3, r3, #2
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	f000 8203 	beq.w	801734a <main+0xfc2>
	        List[MenuNow[Current]].Flg |= UPD;  // ˢ�±��ǰԭ��ʾ��Ŀ����
 8016f44:	4bb1      	ldr	r3, [pc, #708]	; (801720c <main+0xe84>)
 8016f46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f4a:	461a      	mov	r2, r3
 8016f4c:	4bb1      	ldr	r3, [pc, #708]	; (8017214 <main+0xe8c>)
 8016f4e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016f52:	4ab1      	ldr	r2, [pc, #708]	; (8017218 <main+0xe90>)
 8016f54:	00db      	lsls	r3, r3, #3
 8016f56:	4413      	add	r3, r2
 8016f58:	799b      	ldrb	r3, [r3, #6]
 8016f5a:	4aac      	ldr	r2, [pc, #688]	; (801720c <main+0xe84>)
 8016f5c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016f60:	4611      	mov	r1, r2
 8016f62:	4aac      	ldr	r2, [pc, #688]	; (8017214 <main+0xe8c>)
 8016f64:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8016f68:	4610      	mov	r0, r2
 8016f6a:	f043 0320 	orr.w	r3, r3, #32
 8016f6e:	b2d9      	uxtb	r1, r3
 8016f70:	4aa9      	ldr	r2, [pc, #676]	; (8017218 <main+0xe90>)
 8016f72:	00c3      	lsls	r3, r0, #3
 8016f74:	4413      	add	r3, r2
 8016f76:	460a      	mov	r2, r1
 8016f78:	719a      	strb	r2, [r3, #6]
	        if(List[MenuNow[Current]].Val >=MAX[MenuNow[Current]] ){
 8016f7a:	4ba4      	ldr	r3, [pc, #656]	; (801720c <main+0xe84>)
 8016f7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f80:	461a      	mov	r2, r3
 8016f82:	4ba4      	ldr	r3, [pc, #656]	; (8017214 <main+0xe8c>)
 8016f84:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016f88:	4aa3      	ldr	r2, [pc, #652]	; (8017218 <main+0xe90>)
 8016f8a:	00db      	lsls	r3, r3, #3
 8016f8c:	4413      	add	r3, r2
 8016f8e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8016f92:	4b9e      	ldr	r3, [pc, #632]	; (801720c <main+0xe84>)
 8016f94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f98:	4619      	mov	r1, r3
 8016f9a:	4b9e      	ldr	r3, [pc, #632]	; (8017214 <main+0xe8c>)
 8016f9c:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016fa0:	4619      	mov	r1, r3
 8016fa2:	4b9e      	ldr	r3, [pc, #632]	; (801721c <main+0xe94>)
 8016fa4:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016fa8:	429a      	cmp	r2, r3
 8016faa:	db73      	blt.n	8017094 <main+0xd0c>
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 8016fac:	4b97      	ldr	r3, [pc, #604]	; (801720c <main+0xe84>)
 8016fae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016fb2:	461a      	mov	r2, r3
 8016fb4:	4b97      	ldr	r3, [pc, #604]	; (8017214 <main+0xe8c>)
 8016fb6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016fba:	2b01      	cmp	r3, #1
 8016fbc:	d051      	beq.n	8017062 <main+0xcda>
 8016fbe:	4b93      	ldr	r3, [pc, #588]	; (801720c <main+0xe84>)
 8016fc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016fc4:	461a      	mov	r2, r3
 8016fc6:	4b93      	ldr	r3, [pc, #588]	; (8017214 <main+0xe8c>)
 8016fc8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016fcc:	2b06      	cmp	r3, #6
 8016fce:	d048      	beq.n	8017062 <main+0xcda>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016fd0:	4b8e      	ldr	r3, [pc, #568]	; (801720c <main+0xe84>)
 8016fd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016fd6:	461a      	mov	r2, r3
 8016fd8:	4b8e      	ldr	r3, [pc, #568]	; (8017214 <main+0xe8c>)
 8016fda:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 8016fde:	2b0c      	cmp	r3, #12
 8016fe0:	d03f      	beq.n	8017062 <main+0xcda>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016fe2:	4b8a      	ldr	r3, [pc, #552]	; (801720c <main+0xe84>)
 8016fe4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016fe8:	461a      	mov	r2, r3
 8016fea:	4b8a      	ldr	r3, [pc, #552]	; (8017214 <main+0xe8c>)
 8016fec:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016ff0:	2b1c      	cmp	r3, #28
 8016ff2:	d036      	beq.n	8017062 <main+0xcda>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8016ff4:	4b85      	ldr	r3, [pc, #532]	; (801720c <main+0xe84>)
 8016ff6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ffa:	461a      	mov	r2, r3
 8016ffc:	4b85      	ldr	r3, [pc, #532]	; (8017214 <main+0xe8c>)
 8016ffe:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8017002:	2b0f      	cmp	r3, #15
 8017004:	d02d      	beq.n	8017062 <main+0xcda>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8017006:	4b81      	ldr	r3, [pc, #516]	; (801720c <main+0xe84>)
 8017008:	f9b3 3000 	ldrsh.w	r3, [r3]
 801700c:	461a      	mov	r2, r3
 801700e:	4b81      	ldr	r3, [pc, #516]	; (8017214 <main+0xe8c>)
 8017010:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017014:	2b0e      	cmp	r3, #14
 8017016:	d024      	beq.n	8017062 <main+0xcda>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8017018:	4b7c      	ldr	r3, [pc, #496]	; (801720c <main+0xe84>)
 801701a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801701e:	461a      	mov	r2, r3
 8017020:	4b7c      	ldr	r3, [pc, #496]	; (8017214 <main+0xe8c>)
 8017022:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8017026:	2b0d      	cmp	r3, #13
 8017028:	d01b      	beq.n	8017062 <main+0xcda>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 801702a:	4b78      	ldr	r3, [pc, #480]	; (801720c <main+0xe84>)
 801702c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017030:	461a      	mov	r2, r3
 8017032:	4b78      	ldr	r3, [pc, #480]	; (8017214 <main+0xe8c>)
 8017034:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017038:	2b1a      	cmp	r3, #26
 801703a:	d012      	beq.n	8017062 <main+0xcda>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 801703c:	4b73      	ldr	r3, [pc, #460]	; (801720c <main+0xe84>)
 801703e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017042:	461a      	mov	r2, r3
 8017044:	4b73      	ldr	r3, [pc, #460]	; (8017214 <main+0xe8c>)
 8017046:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 801704a:	2b02      	cmp	r3, #2
 801704c:	d009      	beq.n	8017062 <main+0xcda>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 801704e:	4b6f      	ldr	r3, [pc, #444]	; (801720c <main+0xe84>)
 8017050:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017054:	461a      	mov	r2, r3
 8017056:	4b6f      	ldr	r3, [pc, #444]	; (8017214 <main+0xe8c>)
 8017058:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801705c:	2b24      	cmp	r3, #36	; 0x24
 801705e:	f040 8153 	bne.w	8017308 <main+0xf80>
	            List[MenuNow[Current]].Val =MIN[MenuNow[Current]] ;
 8017062:	4b6a      	ldr	r3, [pc, #424]	; (801720c <main+0xe84>)
 8017064:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017068:	461a      	mov	r2, r3
 801706a:	4b6a      	ldr	r3, [pc, #424]	; (8017214 <main+0xe8c>)
 801706c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017070:	461a      	mov	r2, r3
 8017072:	4b66      	ldr	r3, [pc, #408]	; (801720c <main+0xe84>)
 8017074:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017078:	4619      	mov	r1, r3
 801707a:	4b66      	ldr	r3, [pc, #408]	; (8017214 <main+0xe8c>)
 801707c:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8017080:	4618      	mov	r0, r3
 8017082:	4b67      	ldr	r3, [pc, #412]	; (8017220 <main+0xe98>)
 8017084:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 8017088:	4a63      	ldr	r2, [pc, #396]	; (8017218 <main+0xe90>)
 801708a:	00c3      	lsls	r3, r0, #3
 801708c:	4413      	add	r3, r2
 801708e:	460a      	mov	r2, r1
 8017090:	809a      	strh	r2, [r3, #4]
 8017092:	e139      	b.n	8017308 <main+0xf80>
	        } else {
	            if(MenuNow[Current] == VIEWPOSI)
 8017094:	4b5d      	ldr	r3, [pc, #372]	; (801720c <main+0xe84>)
 8017096:	f9b3 3000 	ldrsh.w	r3, [r3]
 801709a:	461a      	mov	r2, r3
 801709c:	4b5d      	ldr	r3, [pc, #372]	; (8017214 <main+0xe8c>)
 801709e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80170a2:	2b08      	cmp	r3, #8
 80170a4:	d15f      	bne.n	8017166 <main+0xdde>
	            {
	              if(List[MenuNow[Current]].Val <(DEPTH[List[SMPL_DPTH].Val]-(350-List[SMPL_DPTH].Val)))
 80170a6:	4b59      	ldr	r3, [pc, #356]	; (801720c <main+0xe84>)
 80170a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80170ac:	461a      	mov	r2, r3
 80170ae:	4b59      	ldr	r3, [pc, #356]	; (8017214 <main+0xe8c>)
 80170b0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80170b4:	4a58      	ldr	r2, [pc, #352]	; (8017218 <main+0xe90>)
 80170b6:	00db      	lsls	r3, r3, #3
 80170b8:	4413      	add	r3, r2
 80170ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80170be:	461a      	mov	r2, r3
 80170c0:	4b55      	ldr	r3, [pc, #340]	; (8017218 <main+0xe90>)
 80170c2:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 80170c6:	4619      	mov	r1, r3
 80170c8:	4b56      	ldr	r3, [pc, #344]	; (8017224 <main+0xe9c>)
 80170ca:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 80170ce:	4619      	mov	r1, r3
 80170d0:	4b51      	ldr	r3, [pc, #324]	; (8017218 <main+0xe90>)
 80170d2:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 80170d6:	f5c3 73af 	rsb	r3, r3, #350	; 0x15e
 80170da:	1acb      	subs	r3, r1, r3
 80170dc:	429a      	cmp	r2, r3
 80170de:	f280 80f2 	bge.w	80172c6 <main+0xf3e>
	              {
	                if(List[MenuNow[Current]].Val >150 )
 80170e2:	4b4a      	ldr	r3, [pc, #296]	; (801720c <main+0xe84>)
 80170e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80170e8:	461a      	mov	r2, r3
 80170ea:	4b4a      	ldr	r3, [pc, #296]	; (8017214 <main+0xe8c>)
 80170ec:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80170f0:	4a49      	ldr	r2, [pc, #292]	; (8017218 <main+0xe90>)
 80170f2:	00db      	lsls	r3, r3, #3
 80170f4:	4413      	add	r3, r2
 80170f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80170fa:	2b96      	cmp	r3, #150	; 0x96
 80170fc:	dd1c      	ble.n	8017138 <main+0xdb0>
	                  List[MenuNow[Current]].Val += 25;
 80170fe:	4b43      	ldr	r3, [pc, #268]	; (801720c <main+0xe84>)
 8017100:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017104:	461a      	mov	r2, r3
 8017106:	4b43      	ldr	r3, [pc, #268]	; (8017214 <main+0xe8c>)
 8017108:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801710c:	4a42      	ldr	r2, [pc, #264]	; (8017218 <main+0xe90>)
 801710e:	00db      	lsls	r3, r3, #3
 8017110:	4413      	add	r3, r2
 8017112:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017116:	b29b      	uxth	r3, r3
 8017118:	3319      	adds	r3, #25
 801711a:	b29a      	uxth	r2, r3
 801711c:	4b3b      	ldr	r3, [pc, #236]	; (801720c <main+0xe84>)
 801711e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017122:	4619      	mov	r1, r3
 8017124:	4b3b      	ldr	r3, [pc, #236]	; (8017214 <main+0xe8c>)
 8017126:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 801712a:	b211      	sxth	r1, r2
 801712c:	4a3a      	ldr	r2, [pc, #232]	; (8017218 <main+0xe90>)
 801712e:	00db      	lsls	r3, r3, #3
 8017130:	4413      	add	r3, r2
 8017132:	460a      	mov	r2, r1
 8017134:	809a      	strh	r2, [r3, #4]
 8017136:	e0c6      	b.n	80172c6 <main+0xf3e>
	                else
	                  List[MenuNow[Current]].Val++;
 8017138:	4b34      	ldr	r3, [pc, #208]	; (801720c <main+0xe84>)
 801713a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801713e:	461a      	mov	r2, r3
 8017140:	4b34      	ldr	r3, [pc, #208]	; (8017214 <main+0xe8c>)
 8017142:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017146:	461a      	mov	r2, r3
 8017148:	4933      	ldr	r1, [pc, #204]	; (8017218 <main+0xe90>)
 801714a:	00d3      	lsls	r3, r2, #3
 801714c:	440b      	add	r3, r1
 801714e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017152:	b29b      	uxth	r3, r3
 8017154:	3301      	adds	r3, #1
 8017156:	b29b      	uxth	r3, r3
 8017158:	b218      	sxth	r0, r3
 801715a:	492f      	ldr	r1, [pc, #188]	; (8017218 <main+0xe90>)
 801715c:	00d3      	lsls	r3, r2, #3
 801715e:	440b      	add	r3, r1
 8017160:	4602      	mov	r2, r0
 8017162:	809a      	strh	r2, [r3, #4]
 8017164:	e0af      	b.n	80172c6 <main+0xf3e>
	              }
	            }
	            else{
	              //============4.27�޸������߳�����������========
	              if(MenuNow[Current] == THRESHOLD){
 8017166:	4b29      	ldr	r3, [pc, #164]	; (801720c <main+0xe84>)
 8017168:	f9b3 3000 	ldrsh.w	r3, [r3]
 801716c:	461a      	mov	r2, r3
 801716e:	4b29      	ldr	r3, [pc, #164]	; (8017214 <main+0xe8c>)
 8017170:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017174:	2b10      	cmp	r3, #16
 8017176:	d121      	bne.n	80171bc <main+0xe34>
	                if((List[V0_POSI].Val + List[THRESHOLD].Val) < 198)
 8017178:	4b27      	ldr	r3, [pc, #156]	; (8017218 <main+0xe90>)
 801717a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801717e:	461a      	mov	r2, r3
 8017180:	4b25      	ldr	r3, [pc, #148]	; (8017218 <main+0xe90>)
 8017182:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8017186:	4413      	add	r3, r2
 8017188:	2bc5      	cmp	r3, #197	; 0xc5
 801718a:	f300 809c 	bgt.w	80172c6 <main+0xf3e>
	                 List[MenuNow[Current]].Val++;
 801718e:	4b1f      	ldr	r3, [pc, #124]	; (801720c <main+0xe84>)
 8017190:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017194:	461a      	mov	r2, r3
 8017196:	4b1f      	ldr	r3, [pc, #124]	; (8017214 <main+0xe8c>)
 8017198:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801719c:	461a      	mov	r2, r3
 801719e:	491e      	ldr	r1, [pc, #120]	; (8017218 <main+0xe90>)
 80171a0:	00d3      	lsls	r3, r2, #3
 80171a2:	440b      	add	r3, r1
 80171a4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80171a8:	b29b      	uxth	r3, r3
 80171aa:	3301      	adds	r3, #1
 80171ac:	b29b      	uxth	r3, r3
 80171ae:	b218      	sxth	r0, r3
 80171b0:	4919      	ldr	r1, [pc, #100]	; (8017218 <main+0xe90>)
 80171b2:	00d3      	lsls	r3, r2, #3
 80171b4:	440b      	add	r3, r1
 80171b6:	4602      	mov	r2, r0
 80171b8:	809a      	strh	r2, [r3, #4]
 80171ba:	e084      	b.n	80172c6 <main+0xf3e>
	              }
	              else if(MenuNow[Current] == V0_POSI){
 80171bc:	4b13      	ldr	r3, [pc, #76]	; (801720c <main+0xe84>)
 80171be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80171c2:	461a      	mov	r2, r3
 80171c4:	4b13      	ldr	r3, [pc, #76]	; (8017214 <main+0xe8c>)
 80171c6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80171ca:	2b03      	cmp	r3, #3
 80171cc:	d143      	bne.n	8017256 <main+0xece>
	                if((List[V0_POSI].Val + List[THRESHOLD].Val) > 198){
 80171ce:	4b12      	ldr	r3, [pc, #72]	; (8017218 <main+0xe90>)
 80171d0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80171d4:	461a      	mov	r2, r3
 80171d6:	4b10      	ldr	r3, [pc, #64]	; (8017218 <main+0xe90>)
 80171d8:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 80171dc:	4413      	add	r3, r2
 80171de:	2bc6      	cmp	r3, #198	; 0xc6
 80171e0:	dd22      	ble.n	8017228 <main+0xea0>
	                  List[V0_POSI].Val++;
 80171e2:	4b0d      	ldr	r3, [pc, #52]	; (8017218 <main+0xe90>)
 80171e4:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80171e8:	b29b      	uxth	r3, r3
 80171ea:	3301      	adds	r3, #1
 80171ec:	b29b      	uxth	r3, r3
 80171ee:	b21a      	sxth	r2, r3
 80171f0:	4b09      	ldr	r3, [pc, #36]	; (8017218 <main+0xe90>)
 80171f2:	839a      	strh	r2, [r3, #28]
	                  List[THRESHOLD].Val--;
 80171f4:	4b08      	ldr	r3, [pc, #32]	; (8017218 <main+0xe90>)
 80171f6:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 80171fa:	b29b      	uxth	r3, r3
 80171fc:	3b01      	subs	r3, #1
 80171fe:	b29b      	uxth	r3, r3
 8017200:	b21a      	sxth	r2, r3
 8017202:	4b05      	ldr	r3, [pc, #20]	; (8017218 <main+0xe90>)
 8017204:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8017208:	e05d      	b.n	80172c6 <main+0xf3e>
 801720a:	bf00      	nop
 801720c:	2000079e 	.word	0x2000079e
 8017210:	2000078e 	.word	0x2000078e
 8017214:	20000538 	.word	0x20000538
 8017218:	20000298 	.word	0x20000298
 801721c:	080021b8 	.word	0x080021b8
 8017220:	08002214 	.word	0x08002214
 8017224:	08002270 	.word	0x08002270
	                }else List[MenuNow[Current]].Val++;
 8017228:	4b64      	ldr	r3, [pc, #400]	; (80173bc <main+0x1034>)
 801722a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801722e:	461a      	mov	r2, r3
 8017230:	4b63      	ldr	r3, [pc, #396]	; (80173c0 <main+0x1038>)
 8017232:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017236:	461a      	mov	r2, r3
 8017238:	4962      	ldr	r1, [pc, #392]	; (80173c4 <main+0x103c>)
 801723a:	00d3      	lsls	r3, r2, #3
 801723c:	440b      	add	r3, r1
 801723e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017242:	b29b      	uxth	r3, r3
 8017244:	3301      	adds	r3, #1
 8017246:	b29b      	uxth	r3, r3
 8017248:	b218      	sxth	r0, r3
 801724a:	495e      	ldr	r1, [pc, #376]	; (80173c4 <main+0x103c>)
 801724c:	00d3      	lsls	r3, r2, #3
 801724e:	440b      	add	r3, r1
 8017250:	4602      	mov	r2, r0
 8017252:	809a      	strh	r2, [r3, #4]
 8017254:	e037      	b.n	80172c6 <main+0xf3e>
	              }
	              else if((MenuNow[Current] ==V2_POSI) && (List[V2_POSI].Val >= List[V1_POSI].Val))
 8017256:	4b59      	ldr	r3, [pc, #356]	; (80173bc <main+0x1034>)
 8017258:	f9b3 3000 	ldrsh.w	r3, [r3]
 801725c:	461a      	mov	r2, r3
 801725e:	4b58      	ldr	r3, [pc, #352]	; (80173c0 <main+0x1038>)
 8017260:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017264:	2b05      	cmp	r3, #5
 8017266:	d118      	bne.n	801729a <main+0xf12>
 8017268:	4b56      	ldr	r3, [pc, #344]	; (80173c4 <main+0x103c>)
 801726a:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 801726e:	4b55      	ldr	r3, [pc, #340]	; (80173c4 <main+0x103c>)
 8017270:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8017274:	429a      	cmp	r2, r3
 8017276:	db10      	blt.n	801729a <main+0xf12>
	                List[MenuNow[Current]].Val=List[V1_POSI].Val;
 8017278:	4b50      	ldr	r3, [pc, #320]	; (80173bc <main+0x1034>)
 801727a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801727e:	461a      	mov	r2, r3
 8017280:	4b4f      	ldr	r3, [pc, #316]	; (80173c0 <main+0x1038>)
 8017282:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017286:	4618      	mov	r0, r3
 8017288:	4b4e      	ldr	r3, [pc, #312]	; (80173c4 <main+0x103c>)
 801728a:	f9b3 1024 	ldrsh.w	r1, [r3, #36]	; 0x24
 801728e:	4a4d      	ldr	r2, [pc, #308]	; (80173c4 <main+0x103c>)
 8017290:	00c3      	lsls	r3, r0, #3
 8017292:	4413      	add	r3, r2
 8017294:	460a      	mov	r2, r1
 8017296:	809a      	strh	r2, [r3, #4]
 8017298:	e015      	b.n	80172c6 <main+0xf3e>
	              else List[MenuNow[Current]].Val++;
 801729a:	4b48      	ldr	r3, [pc, #288]	; (80173bc <main+0x1034>)
 801729c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80172a0:	461a      	mov	r2, r3
 80172a2:	4b47      	ldr	r3, [pc, #284]	; (80173c0 <main+0x1038>)
 80172a4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80172a8:	461a      	mov	r2, r3
 80172aa:	4946      	ldr	r1, [pc, #280]	; (80173c4 <main+0x103c>)
 80172ac:	00d3      	lsls	r3, r2, #3
 80172ae:	440b      	add	r3, r1
 80172b0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80172b4:	b29b      	uxth	r3, r3
 80172b6:	3301      	adds	r3, #1
 80172b8:	b29b      	uxth	r3, r3
 80172ba:	b218      	sxth	r0, r3
 80172bc:	4941      	ldr	r1, [pc, #260]	; (80173c4 <main+0x103c>)
 80172be:	00d3      	lsls	r3, r2, #3
 80172c0:	440b      	add	r3, r1
 80172c2:	4602      	mov	r2, r0
 80172c4:	809a      	strh	r2, [r3, #4]
	            }
	            //==============================================
	            if((MenuNow[Current] ==T1_POSI) && (List[T1_POSI].Val >= List[T2_POSI].Val))
 80172c6:	4b3d      	ldr	r3, [pc, #244]	; (80173bc <main+0x1034>)
 80172c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80172cc:	461a      	mov	r2, r3
 80172ce:	4b3c      	ldr	r3, [pc, #240]	; (80173c0 <main+0x1038>)
 80172d0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80172d4:	2b0a      	cmp	r3, #10
 80172d6:	d117      	bne.n	8017308 <main+0xf80>
 80172d8:	4b3a      	ldr	r3, [pc, #232]	; (80173c4 <main+0x103c>)
 80172da:	f9b3 2054 	ldrsh.w	r2, [r3, #84]	; 0x54
 80172de:	4b39      	ldr	r3, [pc, #228]	; (80173c4 <main+0x103c>)
 80172e0:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 80172e4:	429a      	cmp	r2, r3
 80172e6:	db0f      	blt.n	8017308 <main+0xf80>
	               List[MenuNow[Current]].Val=List[T2_POSI].Val;
 80172e8:	4b34      	ldr	r3, [pc, #208]	; (80173bc <main+0x1034>)
 80172ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80172ee:	461a      	mov	r2, r3
 80172f0:	4b33      	ldr	r3, [pc, #204]	; (80173c0 <main+0x1038>)
 80172f2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80172f6:	4618      	mov	r0, r3
 80172f8:	4b32      	ldr	r3, [pc, #200]	; (80173c4 <main+0x103c>)
 80172fa:	f9b3 105c 	ldrsh.w	r1, [r3, #92]	; 0x5c
 80172fe:	4a31      	ldr	r2, [pc, #196]	; (80173c4 <main+0x103c>)
 8017300:	00c3      	lsls	r3, r0, #3
 8017302:	4413      	add	r3, r2
 8017304:	460a      	mov	r2, r1
 8017306:	809a      	strh	r2, [r3, #4]
	        }
	        if(Current == TRG) {Status &= ~STOP; // �ı�ͬ��ģʽ��ָ�����״̬
 8017308:	4b2c      	ldr	r3, [pc, #176]	; (80173bc <main+0x1034>)
 801730a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801730e:	2b02      	cmp	r3, #2
 8017310:	d11d      	bne.n	801734e <main+0xfc6>
 8017312:	4b2d      	ldr	r3, [pc, #180]	; (80173c8 <main+0x1040>)
 8017314:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017318:	f023 0301 	bic.w	r3, r3, #1
 801731c:	b21a      	sxth	r2, r3
 801731e:	4b2a      	ldr	r3, [pc, #168]	; (80173c8 <main+0x1040>)
 8017320:	801a      	strh	r2, [r3, #0]
	        if(List[SYNCMODE].Val==SINGL)ADC_Start(); }
 8017322:	4b28      	ldr	r3, [pc, #160]	; (80173c4 <main+0x103c>)
 8017324:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8017328:	2b04      	cmp	r3, #4
 801732a:	d110      	bne.n	801734e <main+0xfc6>
 801732c:	f7f5 fa36 	bl	800c79c <ADC_Start>
	        break;
 8017330:	e00d      	b.n	801734e <main+0xfc6>
	         break;
 8017332:	bf00      	nop
 8017334:	e00c      	b.n	8017350 <main+0xfc8>
	         break;
 8017336:	bf00      	nop
 8017338:	e00a      	b.n	8017350 <main+0xfc8>
	        break;
 801733a:	bf00      	nop
 801733c:	e008      	b.n	8017350 <main+0xfc8>
	        break;
 801733e:	bf00      	nop
 8017340:	e006      	b.n	8017350 <main+0xfc8>
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 8017342:	bf00      	nop
 8017344:	e004      	b.n	8017350 <main+0xfc8>
	        break;
 8017346:	bf00      	nop
 8017348:	e002      	b.n	8017350 <main+0xfc8>
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 801734a:	bf00      	nop
 801734c:	e000      	b.n	8017350 <main+0xfc8>
	        break;
 801734e:	bf00      	nop

	     } //switch end
	     List[MenuNow[Current]].Flg |= UPD;
 8017350:	4b1a      	ldr	r3, [pc, #104]	; (80173bc <main+0x1034>)
 8017352:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017356:	461a      	mov	r2, r3
 8017358:	4b19      	ldr	r3, [pc, #100]	; (80173c0 <main+0x1038>)
 801735a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801735e:	4a19      	ldr	r2, [pc, #100]	; (80173c4 <main+0x103c>)
 8017360:	00db      	lsls	r3, r3, #3
 8017362:	4413      	add	r3, r2
 8017364:	799b      	ldrb	r3, [r3, #6]
 8017366:	4a15      	ldr	r2, [pc, #84]	; (80173bc <main+0x1034>)
 8017368:	f9b2 2000 	ldrsh.w	r2, [r2]
 801736c:	4611      	mov	r1, r2
 801736e:	4a14      	ldr	r2, [pc, #80]	; (80173c0 <main+0x1038>)
 8017370:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8017374:	4610      	mov	r0, r2
 8017376:	f043 0320 	orr.w	r3, r3, #32
 801737a:	b2d9      	uxtb	r1, r3
 801737c:	4a11      	ldr	r2, [pc, #68]	; (80173c4 <main+0x103c>)
 801737e:	00c3      	lsls	r3, r0, #3
 8017380:	4413      	add	r3, r2
 8017382:	460a      	mov	r2, r1
 8017384:	719a      	strb	r2, [r3, #6]
	     StdBy_Time  = List[STANDBY].Val * MIN_UNIT;  //����
 8017386:	4b0f      	ldr	r3, [pc, #60]	; (80173c4 <main+0x103c>)
 8017388:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 801738c:	b29b      	uxth	r3, r3
 801738e:	461a      	mov	r2, r3
 8017390:	0112      	lsls	r2, r2, #4
 8017392:	1ad3      	subs	r3, r2, r3
 8017394:	009b      	lsls	r3, r3, #2
 8017396:	b29b      	uxth	r3, r3
 8017398:	b21a      	sxth	r2, r3
 801739a:	4b0c      	ldr	r3, [pc, #48]	; (80173cc <main+0x1044>)
 801739c:	801a      	strh	r2, [r3, #0]

	      if(PopType & LIST_POP) Show_List();
 801739e:	4b0c      	ldr	r3, [pc, #48]	; (80173d0 <main+0x1048>)
 80173a0:	781b      	ldrb	r3, [r3, #0]
 80173a2:	f003 0302 	and.w	r3, r3, #2
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	d001      	beq.n	80173ae <main+0x1026>
 80173aa:	f7fd fa2f 	bl	801480c <Show_List>
	      Update_Title();
 80173ae:	f7fb f867 	bl	8012480 <Update_Title>
	      Key_Buffer = 0;
 80173b2:	4b08      	ldr	r3, [pc, #32]	; (80173d4 <main+0x104c>)
 80173b4:	2200      	movs	r2, #0
 80173b6:	701a      	strb	r2, [r3, #0]
	    if((List[STANDBY].Val != 0)&&(StdBy_Time == 0))
 80173b8:	f7ff b868 	b.w	801648c <main+0x104>
 80173bc:	2000079e 	.word	0x2000079e
 80173c0:	20000538 	.word	0x20000538
 80173c4:	20000298 	.word	0x20000298
 80173c8:	200007a0 	.word	0x200007a0
 80173cc:	2000079c 	.word	0x2000079c
 80173d0:	2000078e 	.word	0x2000078e
 80173d4:	2000077d 	.word	0x2000077d

080173d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80173d8:	b580      	push	{r7, lr}
 80173da:	b094      	sub	sp, #80	; 0x50
 80173dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80173de:	f107 031c 	add.w	r3, r7, #28
 80173e2:	2234      	movs	r2, #52	; 0x34
 80173e4:	2100      	movs	r1, #0
 80173e6:	4618      	mov	r0, r3
 80173e8:	f00b fc28 	bl	8022c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80173ec:	f107 0308 	add.w	r3, r7, #8
 80173f0:	2200      	movs	r2, #0
 80173f2:	601a      	str	r2, [r3, #0]
 80173f4:	605a      	str	r2, [r3, #4]
 80173f6:	609a      	str	r2, [r3, #8]
 80173f8:	60da      	str	r2, [r3, #12]
 80173fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80173fc:	2300      	movs	r3, #0
 80173fe:	607b      	str	r3, [r7, #4]
 8017400:	4b2d      	ldr	r3, [pc, #180]	; (80174b8 <SystemClock_Config+0xe0>)
 8017402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017404:	4a2c      	ldr	r2, [pc, #176]	; (80174b8 <SystemClock_Config+0xe0>)
 8017406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801740a:	6413      	str	r3, [r2, #64]	; 0x40
 801740c:	4b2a      	ldr	r3, [pc, #168]	; (80174b8 <SystemClock_Config+0xe0>)
 801740e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017414:	607b      	str	r3, [r7, #4]
 8017416:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8017418:	2300      	movs	r3, #0
 801741a:	603b      	str	r3, [r7, #0]
 801741c:	4b27      	ldr	r3, [pc, #156]	; (80174bc <SystemClock_Config+0xe4>)
 801741e:	681b      	ldr	r3, [r3, #0]
 8017420:	4a26      	ldr	r2, [pc, #152]	; (80174bc <SystemClock_Config+0xe4>)
 8017422:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8017426:	6013      	str	r3, [r2, #0]
 8017428:	4b24      	ldr	r3, [pc, #144]	; (80174bc <SystemClock_Config+0xe4>)
 801742a:	681b      	ldr	r3, [r3, #0]
 801742c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8017430:	603b      	str	r3, [r7, #0]
 8017432:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8017434:	2301      	movs	r3, #1
 8017436:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8017438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801743c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801743e:	2302      	movs	r3, #2
 8017440:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8017442:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8017446:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8017448:	2319      	movs	r3, #25
 801744a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 801744c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8017450:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8017452:	2302      	movs	r3, #2
 8017454:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8017456:	2305      	movs	r3, #5
 8017458:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 801745a:	2302      	movs	r3, #2
 801745c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801745e:	f107 031c 	add.w	r3, r7, #28
 8017462:	4618      	mov	r0, r3
 8017464:	f004 fb72 	bl	801bb4c <HAL_RCC_OscConfig>
 8017468:	4603      	mov	r3, r0
 801746a:	2b00      	cmp	r3, #0
 801746c:	d001      	beq.n	8017472 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 801746e:	f000 fc1d 	bl	8017cac <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8017472:	f003 fda3 	bl	801afbc <HAL_PWREx_EnableOverDrive>
 8017476:	4603      	mov	r3, r0
 8017478:	2b00      	cmp	r3, #0
 801747a:	d001      	beq.n	8017480 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 801747c:	f000 fc16 	bl	8017cac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8017480:	230f      	movs	r3, #15
 8017482:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8017484:	2302      	movs	r3, #2
 8017486:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8017488:	2300      	movs	r3, #0
 801748a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 801748c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8017490:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8017492:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017496:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8017498:	f107 0308 	add.w	r3, r7, #8
 801749c:	2105      	movs	r1, #5
 801749e:	4618      	mov	r0, r3
 80174a0:	f003 fddc 	bl	801b05c <HAL_RCC_ClockConfig>
 80174a4:	4603      	mov	r3, r0
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	d001      	beq.n	80174ae <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80174aa:	f000 fbff 	bl	8017cac <Error_Handler>
  }
}
 80174ae:	bf00      	nop
 80174b0:	3750      	adds	r7, #80	; 0x50
 80174b2:	46bd      	mov	sp, r7
 80174b4:	bd80      	pop	{r7, pc}
 80174b6:	bf00      	nop
 80174b8:	40023800 	.word	0x40023800
 80174bc:	40007000 	.word	0x40007000

080174c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80174c0:	b580      	push	{r7, lr}
 80174c2:	b084      	sub	sp, #16
 80174c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80174c6:	463b      	mov	r3, r7
 80174c8:	2200      	movs	r2, #0
 80174ca:	601a      	str	r2, [r3, #0]
 80174cc:	605a      	str	r2, [r3, #4]
 80174ce:	609a      	str	r2, [r3, #8]
 80174d0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80174d2:	4b22      	ldr	r3, [pc, #136]	; (801755c <MX_ADC1_Init+0x9c>)
 80174d4:	4a22      	ldr	r2, [pc, #136]	; (8017560 <MX_ADC1_Init+0xa0>)
 80174d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80174d8:	4b20      	ldr	r3, [pc, #128]	; (801755c <MX_ADC1_Init+0x9c>)
 80174da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80174de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80174e0:	4b1e      	ldr	r3, [pc, #120]	; (801755c <MX_ADC1_Init+0x9c>)
 80174e2:	2200      	movs	r2, #0
 80174e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80174e6:	4b1d      	ldr	r3, [pc, #116]	; (801755c <MX_ADC1_Init+0x9c>)
 80174e8:	2200      	movs	r2, #0
 80174ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80174ec:	4b1b      	ldr	r3, [pc, #108]	; (801755c <MX_ADC1_Init+0x9c>)
 80174ee:	2200      	movs	r2, #0
 80174f0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80174f2:	4b1a      	ldr	r3, [pc, #104]	; (801755c <MX_ADC1_Init+0x9c>)
 80174f4:	2200      	movs	r2, #0
 80174f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80174fa:	4b18      	ldr	r3, [pc, #96]	; (801755c <MX_ADC1_Init+0x9c>)
 80174fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017500:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 8017502:	4b16      	ldr	r3, [pc, #88]	; (801755c <MX_ADC1_Init+0x9c>)
 8017504:	2200      	movs	r2, #0
 8017506:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8017508:	4b14      	ldr	r3, [pc, #80]	; (801755c <MX_ADC1_Init+0x9c>)
 801750a:	2200      	movs	r2, #0
 801750c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 801750e:	4b13      	ldr	r3, [pc, #76]	; (801755c <MX_ADC1_Init+0x9c>)
 8017510:	2201      	movs	r2, #1
 8017512:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8017514:	4b11      	ldr	r3, [pc, #68]	; (801755c <MX_ADC1_Init+0x9c>)
 8017516:	2200      	movs	r2, #0
 8017518:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 801751c:	4b0f      	ldr	r3, [pc, #60]	; (801755c <MX_ADC1_Init+0x9c>)
 801751e:	2201      	movs	r2, #1
 8017520:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8017522:	480e      	ldr	r0, [pc, #56]	; (801755c <MX_ADC1_Init+0x9c>)
 8017524:	f000 ff7a 	bl	801841c <HAL_ADC_Init>
 8017528:	4603      	mov	r3, r0
 801752a:	2b00      	cmp	r3, #0
 801752c:	d001      	beq.n	8017532 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 801752e:	f000 fbbd 	bl	8017cac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8017532:	2306      	movs	r3, #6
 8017534:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8017536:	2301      	movs	r3, #1
 8017538:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 801753a:	2300      	movs	r3, #0
 801753c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801753e:	463b      	mov	r3, r7
 8017540:	4619      	mov	r1, r3
 8017542:	4806      	ldr	r0, [pc, #24]	; (801755c <MX_ADC1_Init+0x9c>)
 8017544:	f000 ffae 	bl	80184a4 <HAL_ADC_ConfigChannel>
 8017548:	4603      	mov	r3, r0
 801754a:	2b00      	cmp	r3, #0
 801754c:	d001      	beq.n	8017552 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 801754e:	f000 fbad 	bl	8017cac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8017552:	bf00      	nop
 8017554:	3710      	adds	r7, #16
 8017556:	46bd      	mov	sp, r7
 8017558:	bd80      	pop	{r7, pc}
 801755a:	bf00      	nop
 801755c:	20006a78 	.word	0x20006a78
 8017560:	40012000 	.word	0x40012000

08017564 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8017564:	b580      	push	{r7, lr}
 8017566:	b084      	sub	sp, #16
 8017568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 801756a:	463b      	mov	r3, r7
 801756c:	2200      	movs	r2, #0
 801756e:	601a      	str	r2, [r3, #0]
 8017570:	605a      	str	r2, [r3, #4]
 8017572:	609a      	str	r2, [r3, #8]
 8017574:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8017576:	4b22      	ldr	r3, [pc, #136]	; (8017600 <MX_ADC2_Init+0x9c>)
 8017578:	4a22      	ldr	r2, [pc, #136]	; (8017604 <MX_ADC2_Init+0xa0>)
 801757a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 801757c:	4b20      	ldr	r3, [pc, #128]	; (8017600 <MX_ADC2_Init+0x9c>)
 801757e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8017582:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8017584:	4b1e      	ldr	r3, [pc, #120]	; (8017600 <MX_ADC2_Init+0x9c>)
 8017586:	2200      	movs	r2, #0
 8017588:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 801758a:	4b1d      	ldr	r3, [pc, #116]	; (8017600 <MX_ADC2_Init+0x9c>)
 801758c:	2200      	movs	r2, #0
 801758e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8017590:	4b1b      	ldr	r3, [pc, #108]	; (8017600 <MX_ADC2_Init+0x9c>)
 8017592:	2200      	movs	r2, #0
 8017594:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8017596:	4b1a      	ldr	r3, [pc, #104]	; (8017600 <MX_ADC2_Init+0x9c>)
 8017598:	2200      	movs	r2, #0
 801759a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 801759e:	4b18      	ldr	r3, [pc, #96]	; (8017600 <MX_ADC2_Init+0x9c>)
 80175a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80175a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 80175a6:	4b16      	ldr	r3, [pc, #88]	; (8017600 <MX_ADC2_Init+0x9c>)
 80175a8:	2200      	movs	r2, #0
 80175aa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80175ac:	4b14      	ldr	r3, [pc, #80]	; (8017600 <MX_ADC2_Init+0x9c>)
 80175ae:	2200      	movs	r2, #0
 80175b0:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80175b2:	4b13      	ldr	r3, [pc, #76]	; (8017600 <MX_ADC2_Init+0x9c>)
 80175b4:	2201      	movs	r2, #1
 80175b6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80175b8:	4b11      	ldr	r3, [pc, #68]	; (8017600 <MX_ADC2_Init+0x9c>)
 80175ba:	2200      	movs	r2, #0
 80175bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80175c0:	4b0f      	ldr	r3, [pc, #60]	; (8017600 <MX_ADC2_Init+0x9c>)
 80175c2:	2201      	movs	r2, #1
 80175c4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80175c6:	480e      	ldr	r0, [pc, #56]	; (8017600 <MX_ADC2_Init+0x9c>)
 80175c8:	f000 ff28 	bl	801841c <HAL_ADC_Init>
 80175cc:	4603      	mov	r3, r0
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	d001      	beq.n	80175d6 <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 80175d2:	f000 fb6b 	bl	8017cac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80175d6:	2307      	movs	r3, #7
 80175d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80175da:	2301      	movs	r3, #1
 80175dc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80175de:	2300      	movs	r3, #0
 80175e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80175e2:	463b      	mov	r3, r7
 80175e4:	4619      	mov	r1, r3
 80175e6:	4806      	ldr	r0, [pc, #24]	; (8017600 <MX_ADC2_Init+0x9c>)
 80175e8:	f000 ff5c 	bl	80184a4 <HAL_ADC_ConfigChannel>
 80175ec:	4603      	mov	r3, r0
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	d001      	beq.n	80175f6 <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 80175f2:	f000 fb5b 	bl	8017cac <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80175f6:	bf00      	nop
 80175f8:	3710      	adds	r7, #16
 80175fa:	46bd      	mov	sp, r7
 80175fc:	bd80      	pop	{r7, pc}
 80175fe:	bf00      	nop
 8017600:	200068e8 	.word	0x200068e8
 8017604:	40012100 	.word	0x40012100

08017608 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8017608:	b580      	push	{r7, lr}
 801760a:	b082      	sub	sp, #8
 801760c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 801760e:	463b      	mov	r3, r7
 8017610:	2200      	movs	r2, #0
 8017612:	601a      	str	r2, [r3, #0]
 8017614:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8017616:	4b19      	ldr	r3, [pc, #100]	; (801767c <MX_DAC_Init+0x74>)
 8017618:	4a19      	ldr	r2, [pc, #100]	; (8017680 <MX_DAC_Init+0x78>)
 801761a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 801761c:	4817      	ldr	r0, [pc, #92]	; (801767c <MX_DAC_Init+0x74>)
 801761e:	f001 fa80 	bl	8018b22 <HAL_DAC_Init>
 8017622:	4603      	mov	r3, r0
 8017624:	2b00      	cmp	r3, #0
 8017626:	d001      	beq.n	801762c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8017628:	f000 fb40 	bl	8017cac <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 801762c:	2300      	movs	r3, #0
 801762e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8017630:	2300      	movs	r3, #0
 8017632:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8017634:	463b      	mov	r3, r7
 8017636:	2200      	movs	r2, #0
 8017638:	4619      	mov	r1, r3
 801763a:	4810      	ldr	r0, [pc, #64]	; (801767c <MX_DAC_Init+0x74>)
 801763c:	f001 fab8 	bl	8018bb0 <HAL_DAC_ConfigChannel>
 8017640:	4603      	mov	r3, r0
 8017642:	2b00      	cmp	r3, #0
 8017644:	d001      	beq.n	801764a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8017646:	f000 fb31 	bl	8017cac <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 801764a:	2302      	movs	r3, #2
 801764c:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 801764e:	463b      	mov	r3, r7
 8017650:	2210      	movs	r2, #16
 8017652:	4619      	mov	r1, r3
 8017654:	4809      	ldr	r0, [pc, #36]	; (801767c <MX_DAC_Init+0x74>)
 8017656:	f001 faab 	bl	8018bb0 <HAL_DAC_ConfigChannel>
 801765a:	4603      	mov	r3, r0
 801765c:	2b00      	cmp	r3, #0
 801765e:	d001      	beq.n	8017664 <MX_DAC_Init+0x5c>
  {
    Error_Handler();
 8017660:	f000 fb24 	bl	8017cac <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 620);  //(620*4095)/330;//50mv
 8017664:	f44f 731b 	mov.w	r3, #620	; 0x26c
 8017668:	2200      	movs	r2, #0
 801766a:	2110      	movs	r1, #16
 801766c:	4803      	ldr	r0, [pc, #12]	; (801767c <MX_DAC_Init+0x74>)
 801766e:	f001 fa7a 	bl	8018b66 <HAL_DAC_SetValue>
  /* USER CODE END DAC_Init 2 */

}
 8017672:	bf00      	nop
 8017674:	3708      	adds	r7, #8
 8017676:	46bd      	mov	sp, r7
 8017678:	bd80      	pop	{r7, pc}
 801767a:	bf00      	nop
 801767c:	20006af8 	.word	0x20006af8
 8017680:	40007400 	.word	0x40007400

08017684 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8017684:	b580      	push	{r7, lr}
 8017686:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8017688:	4b17      	ldr	r3, [pc, #92]	; (80176e8 <MX_SPI2_Init+0x64>)
 801768a:	4a18      	ldr	r2, [pc, #96]	; (80176ec <MX_SPI2_Init+0x68>)
 801768c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 801768e:	4b16      	ldr	r3, [pc, #88]	; (80176e8 <MX_SPI2_Init+0x64>)
 8017690:	f44f 7282 	mov.w	r2, #260	; 0x104
 8017694:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8017696:	4b14      	ldr	r3, [pc, #80]	; (80176e8 <MX_SPI2_Init+0x64>)
 8017698:	2200      	movs	r2, #0
 801769a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 801769c:	4b12      	ldr	r3, [pc, #72]	; (80176e8 <MX_SPI2_Init+0x64>)
 801769e:	2200      	movs	r2, #0
 80176a0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80176a2:	4b11      	ldr	r3, [pc, #68]	; (80176e8 <MX_SPI2_Init+0x64>)
 80176a4:	2202      	movs	r2, #2
 80176a6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80176a8:	4b0f      	ldr	r3, [pc, #60]	; (80176e8 <MX_SPI2_Init+0x64>)
 80176aa:	2201      	movs	r2, #1
 80176ac:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80176ae:	4b0e      	ldr	r3, [pc, #56]	; (80176e8 <MX_SPI2_Init+0x64>)
 80176b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80176b4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80176b6:	4b0c      	ldr	r3, [pc, #48]	; (80176e8 <MX_SPI2_Init+0x64>)
 80176b8:	2200      	movs	r2, #0
 80176ba:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80176bc:	4b0a      	ldr	r3, [pc, #40]	; (80176e8 <MX_SPI2_Init+0x64>)
 80176be:	2280      	movs	r2, #128	; 0x80
 80176c0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80176c2:	4b09      	ldr	r3, [pc, #36]	; (80176e8 <MX_SPI2_Init+0x64>)
 80176c4:	2200      	movs	r2, #0
 80176c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80176c8:	4b07      	ldr	r3, [pc, #28]	; (80176e8 <MX_SPI2_Init+0x64>)
 80176ca:	2200      	movs	r2, #0
 80176cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80176ce:	4b06      	ldr	r3, [pc, #24]	; (80176e8 <MX_SPI2_Init+0x64>)
 80176d0:	220a      	movs	r2, #10
 80176d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80176d4:	4804      	ldr	r0, [pc, #16]	; (80176e8 <MX_SPI2_Init+0x64>)
 80176d6:	f004 fcd7 	bl	801c088 <HAL_SPI_Init>
 80176da:	4603      	mov	r3, r0
 80176dc:	2b00      	cmp	r3, #0
 80176de:	d001      	beq.n	80176e4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80176e0:	f000 fae4 	bl	8017cac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80176e4:	bf00      	nop
 80176e6:	bd80      	pop	{r7, pc}
 80176e8:	20006890 	.word	0x20006890
 80176ec:	40003800 	.word	0x40003800

080176f0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80176f0:	b580      	push	{r7, lr}
 80176f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80176f4:	4b18      	ldr	r3, [pc, #96]	; (8017758 <MX_SPI3_Init+0x68>)
 80176f6:	4a19      	ldr	r2, [pc, #100]	; (801775c <MX_SPI3_Init+0x6c>)
 80176f8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80176fa:	4b17      	ldr	r3, [pc, #92]	; (8017758 <MX_SPI3_Init+0x68>)
 80176fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8017700:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8017702:	4b15      	ldr	r3, [pc, #84]	; (8017758 <MX_SPI3_Init+0x68>)
 8017704:	2200      	movs	r2, #0
 8017706:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8017708:	4b13      	ldr	r3, [pc, #76]	; (8017758 <MX_SPI3_Init+0x68>)
 801770a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801770e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8017710:	4b11      	ldr	r3, [pc, #68]	; (8017758 <MX_SPI3_Init+0x68>)
 8017712:	2200      	movs	r2, #0
 8017714:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8017716:	4b10      	ldr	r3, [pc, #64]	; (8017758 <MX_SPI3_Init+0x68>)
 8017718:	2200      	movs	r2, #0
 801771a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 801771c:	4b0e      	ldr	r3, [pc, #56]	; (8017758 <MX_SPI3_Init+0x68>)
 801771e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017722:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8017724:	4b0c      	ldr	r3, [pc, #48]	; (8017758 <MX_SPI3_Init+0x68>)
 8017726:	2210      	movs	r2, #16
 8017728:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_LSB;
 801772a:	4b0b      	ldr	r3, [pc, #44]	; (8017758 <MX_SPI3_Init+0x68>)
 801772c:	2280      	movs	r2, #128	; 0x80
 801772e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8017730:	4b09      	ldr	r3, [pc, #36]	; (8017758 <MX_SPI3_Init+0x68>)
 8017732:	2200      	movs	r2, #0
 8017734:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8017736:	4b08      	ldr	r3, [pc, #32]	; (8017758 <MX_SPI3_Init+0x68>)
 8017738:	2200      	movs	r2, #0
 801773a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 801773c:	4b06      	ldr	r3, [pc, #24]	; (8017758 <MX_SPI3_Init+0x68>)
 801773e:	220a      	movs	r2, #10
 8017740:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8017742:	4805      	ldr	r0, [pc, #20]	; (8017758 <MX_SPI3_Init+0x68>)
 8017744:	f004 fca0 	bl	801c088 <HAL_SPI_Init>
 8017748:	4603      	mov	r3, r0
 801774a:	2b00      	cmp	r3, #0
 801774c:	d001      	beq.n	8017752 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 801774e:	f000 faad 	bl	8017cac <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8017752:	bf00      	nop
 8017754:	bd80      	pop	{r7, pc}
 8017756:	bf00      	nop
 8017758:	200069c0 	.word	0x200069c0
 801775c:	40003c00 	.word	0x40003c00

08017760 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8017760:	b580      	push	{r7, lr}
 8017762:	b086      	sub	sp, #24
 8017764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8017766:	f107 0308 	add.w	r3, r7, #8
 801776a:	2200      	movs	r2, #0
 801776c:	601a      	str	r2, [r3, #0]
 801776e:	605a      	str	r2, [r3, #4]
 8017770:	609a      	str	r2, [r3, #8]
 8017772:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017774:	463b      	mov	r3, r7
 8017776:	2200      	movs	r2, #0
 8017778:	601a      	str	r2, [r3, #0]
 801777a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */
  octim1.Pulse = 500;
 801777c:	4b30      	ldr	r3, [pc, #192]	; (8017840 <MX_TIM1_Init+0xe0>)
 801777e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8017782:	605a      	str	r2, [r3, #4]
  octim1.OCMode = TIM_OCMODE_PWM2;
 8017784:	4b2e      	ldr	r3, [pc, #184]	; (8017840 <MX_TIM1_Init+0xe0>)
 8017786:	2270      	movs	r2, #112	; 0x70
 8017788:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 801778a:	4b2e      	ldr	r3, [pc, #184]	; (8017844 <MX_TIM1_Init+0xe4>)
 801778c:	4a2e      	ldr	r2, [pc, #184]	; (8017848 <MX_TIM1_Init+0xe8>)
 801778e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 89;
 8017790:	4b2c      	ldr	r3, [pc, #176]	; (8017844 <MX_TIM1_Init+0xe4>)
 8017792:	2259      	movs	r2, #89	; 0x59
 8017794:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8017796:	4b2b      	ldr	r3, [pc, #172]	; (8017844 <MX_TIM1_Init+0xe4>)
 8017798:	2210      	movs	r2, #16
 801779a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 801779c:	4b29      	ldr	r3, [pc, #164]	; (8017844 <MX_TIM1_Init+0xe4>)
 801779e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80177a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80177a4:	4b27      	ldr	r3, [pc, #156]	; (8017844 <MX_TIM1_Init+0xe4>)
 80177a6:	2200      	movs	r2, #0
 80177a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80177aa:	4b26      	ldr	r3, [pc, #152]	; (8017844 <MX_TIM1_Init+0xe4>)
 80177ac:	2200      	movs	r2, #0
 80177ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80177b0:	4b24      	ldr	r3, [pc, #144]	; (8017844 <MX_TIM1_Init+0xe4>)
 80177b2:	2280      	movs	r2, #128	; 0x80
 80177b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80177b6:	4823      	ldr	r0, [pc, #140]	; (8017844 <MX_TIM1_Init+0xe4>)
 80177b8:	f005 fb3a 	bl	801ce30 <HAL_TIM_Base_Init>
 80177bc:	4603      	mov	r3, r0
 80177be:	2b00      	cmp	r3, #0
 80177c0:	d001      	beq.n	80177c6 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 80177c2:	f000 fa73 	bl	8017cac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80177c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80177ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80177cc:	f107 0308 	add.w	r3, r7, #8
 80177d0:	4619      	mov	r1, r3
 80177d2:	481c      	ldr	r0, [pc, #112]	; (8017844 <MX_TIM1_Init+0xe4>)
 80177d4:	f005 fd50 	bl	801d278 <HAL_TIM_ConfigClockSource>
 80177d8:	4603      	mov	r3, r0
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d001      	beq.n	80177e2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80177de:	f000 fa65 	bl	8017cac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80177e2:	2300      	movs	r3, #0
 80177e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80177e6:	2300      	movs	r3, #0
 80177e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80177ea:	463b      	mov	r3, r7
 80177ec:	4619      	mov	r1, r3
 80177ee:	4815      	ldr	r0, [pc, #84]	; (8017844 <MX_TIM1_Init+0xe4>)
 80177f0:	f006 f91c 	bl	801da2c <HAL_TIMEx_MasterConfigSynchronization>
 80177f4:	4603      	mov	r3, r0
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	d001      	beq.n	80177fe <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80177fa:	f000 fa57 	bl	8017cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_OC_ConfigChannel(&htim1, &octim1, 1 );
 80177fe:	2201      	movs	r2, #1
 8017800:	490f      	ldr	r1, [pc, #60]	; (8017840 <MX_TIM1_Init+0xe0>)
 8017802:	4810      	ldr	r0, [pc, #64]	; (8017844 <MX_TIM1_Init+0xe4>)
 8017804:	f005 fcdc 	bl	801d1c0 <HAL_TIM_OC_ConfigChannel>
  __HAL_TIM_URS_ENABLE(&htim1);
 8017808:	4b0e      	ldr	r3, [pc, #56]	; (8017844 <MX_TIM1_Init+0xe4>)
 801780a:	681b      	ldr	r3, [r3, #0]
 801780c:	681a      	ldr	r2, [r3, #0]
 801780e:	4b0d      	ldr	r3, [pc, #52]	; (8017844 <MX_TIM1_Init+0xe4>)
 8017810:	681b      	ldr	r3, [r3, #0]
 8017812:	f042 0204 	orr.w	r2, r2, #4
 8017816:	601a      	str	r2, [r3, #0]
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_CC1 | TIM_DMA_TRIGGER);
 8017818:	4b0a      	ldr	r3, [pc, #40]	; (8017844 <MX_TIM1_Init+0xe4>)
 801781a:	681b      	ldr	r3, [r3, #0]
 801781c:	68da      	ldr	r2, [r3, #12]
 801781e:	4b09      	ldr	r3, [pc, #36]	; (8017844 <MX_TIM1_Init+0xe4>)
 8017820:	681b      	ldr	r3, [r3, #0]
 8017822:	f442 4284 	orr.w	r2, r2, #16896	; 0x4200
 8017826:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 8017828:	4b06      	ldr	r3, [pc, #24]	; (8017844 <MX_TIM1_Init+0xe4>)
 801782a:	681b      	ldr	r3, [r3, #0]
 801782c:	681a      	ldr	r2, [r3, #0]
 801782e:	4b05      	ldr	r3, [pc, #20]	; (8017844 <MX_TIM1_Init+0xe4>)
 8017830:	681b      	ldr	r3, [r3, #0]
 8017832:	f042 0201 	orr.w	r2, r2, #1
 8017836:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM1_Init 2 */

}
 8017838:	bf00      	nop
 801783a:	3718      	adds	r7, #24
 801783c:	46bd      	mov	sp, r7
 801783e:	bd80      	pop	{r7, pc}
 8017840:	20006b6c 	.word	0x20006b6c
 8017844:	20006b88 	.word	0x20006b88
 8017848:	40010000 	.word	0x40010000

0801784c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 801784c:	b580      	push	{r7, lr}
 801784e:	b086      	sub	sp, #24
 8017850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8017852:	f107 0308 	add.w	r3, r7, #8
 8017856:	2200      	movs	r2, #0
 8017858:	601a      	str	r2, [r3, #0]
 801785a:	605a      	str	r2, [r3, #4]
 801785c:	609a      	str	r2, [r3, #8]
 801785e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017860:	463b      	mov	r3, r7
 8017862:	2200      	movs	r2, #0
 8017864:	601a      	str	r2, [r3, #0]
 8017866:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */
  octim3.Pulse = 3750;
 8017868:	4b25      	ldr	r3, [pc, #148]	; (8017900 <MX_TIM3_Init+0xb4>)
 801786a:	f640 62a6 	movw	r2, #3750	; 0xea6
 801786e:	605a      	str	r2, [r3, #4]
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8017870:	4b24      	ldr	r3, [pc, #144]	; (8017904 <MX_TIM3_Init+0xb8>)
 8017872:	4a25      	ldr	r2, [pc, #148]	; (8017908 <MX_TIM3_Init+0xbc>)
 8017874:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 11;
 8017876:	4b23      	ldr	r3, [pc, #140]	; (8017904 <MX_TIM3_Init+0xb8>)
 8017878:	220b      	movs	r2, #11
 801787a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 801787c:	4b21      	ldr	r3, [pc, #132]	; (8017904 <MX_TIM3_Init+0xb8>)
 801787e:	2200      	movs	r2, #0
 8017880:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7499;
 8017882:	4b20      	ldr	r3, [pc, #128]	; (8017904 <MX_TIM3_Init+0xb8>)
 8017884:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8017888:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801788a:	4b1e      	ldr	r3, [pc, #120]	; (8017904 <MX_TIM3_Init+0xb8>)
 801788c:	2200      	movs	r2, #0
 801788e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8017890:	4b1c      	ldr	r3, [pc, #112]	; (8017904 <MX_TIM3_Init+0xb8>)
 8017892:	2280      	movs	r2, #128	; 0x80
 8017894:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8017896:	481b      	ldr	r0, [pc, #108]	; (8017904 <MX_TIM3_Init+0xb8>)
 8017898:	f005 faca 	bl	801ce30 <HAL_TIM_Base_Init>
 801789c:	4603      	mov	r3, r0
 801789e:	2b00      	cmp	r3, #0
 80178a0:	d001      	beq.n	80178a6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80178a2:	f000 fa03 	bl	8017cac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80178a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80178aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80178ac:	f107 0308 	add.w	r3, r7, #8
 80178b0:	4619      	mov	r1, r3
 80178b2:	4814      	ldr	r0, [pc, #80]	; (8017904 <MX_TIM3_Init+0xb8>)
 80178b4:	f005 fce0 	bl	801d278 <HAL_TIM_ConfigClockSource>
 80178b8:	4603      	mov	r3, r0
 80178ba:	2b00      	cmp	r3, #0
 80178bc:	d001      	beq.n	80178c2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80178be:	f000 f9f5 	bl	8017cac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80178c2:	2320      	movs	r3, #32
 80178c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80178c6:	2300      	movs	r3, #0
 80178c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80178ca:	463b      	mov	r3, r7
 80178cc:	4619      	mov	r1, r3
 80178ce:	480d      	ldr	r0, [pc, #52]	; (8017904 <MX_TIM3_Init+0xb8>)
 80178d0:	f006 f8ac 	bl	801da2c <HAL_TIMEx_MasterConfigSynchronization>
 80178d4:	4603      	mov	r3, r0
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d001      	beq.n	80178de <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80178da:	f000 f9e7 	bl	8017cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_OC_ConfigChannel(&htim3, &octim3, 1 );
 80178de:	2201      	movs	r2, #1
 80178e0:	4907      	ldr	r1, [pc, #28]	; (8017900 <MX_TIM3_Init+0xb4>)
 80178e2:	4808      	ldr	r0, [pc, #32]	; (8017904 <MX_TIM3_Init+0xb8>)
 80178e4:	f005 fc6c 	bl	801d1c0 <HAL_TIM_OC_ConfigChannel>
  __HAL_TIM_ENABLE(&htim3);
 80178e8:	4b06      	ldr	r3, [pc, #24]	; (8017904 <MX_TIM3_Init+0xb8>)
 80178ea:	681b      	ldr	r3, [r3, #0]
 80178ec:	681a      	ldr	r2, [r3, #0]
 80178ee:	4b05      	ldr	r3, [pc, #20]	; (8017904 <MX_TIM3_Init+0xb8>)
 80178f0:	681b      	ldr	r3, [r3, #0]
 80178f2:	f042 0201 	orr.w	r2, r2, #1
 80178f6:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM3_Init 2 */

}
 80178f8:	bf00      	nop
 80178fa:	3718      	adds	r7, #24
 80178fc:	46bd      	mov	sp, r7
 80178fe:	bd80      	pop	{r7, pc}
 8017900:	20006ac0 	.word	0x20006ac0
 8017904:	20006978 	.word	0x20006978
 8017908:	40000400 	.word	0x40000400

0801790c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 801790c:	b580      	push	{r7, lr}
 801790e:	b086      	sub	sp, #24
 8017910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8017912:	f107 0308 	add.w	r3, r7, #8
 8017916:	2200      	movs	r2, #0
 8017918:	601a      	str	r2, [r3, #0]
 801791a:	605a      	str	r2, [r3, #4]
 801791c:	609a      	str	r2, [r3, #8]
 801791e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017920:	463b      	mov	r3, r7
 8017922:	2200      	movs	r2, #0
 8017924:	601a      	str	r2, [r3, #0]
 8017926:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */
  octim5.Pulse = (FARR[List[FREQ_OUT].Val]+1)/2;
 8017928:	4b3a      	ldr	r3, [pc, #232]	; (8017a14 <MX_TIM5_Init+0x108>)
 801792a:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 801792e:	461a      	mov	r2, r3
 8017930:	4b39      	ldr	r3, [pc, #228]	; (8017a18 <MX_TIM5_Init+0x10c>)
 8017932:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017936:	3301      	adds	r3, #1
 8017938:	0fda      	lsrs	r2, r3, #31
 801793a:	4413      	add	r3, r2
 801793c:	105b      	asrs	r3, r3, #1
 801793e:	461a      	mov	r2, r3
 8017940:	4b36      	ldr	r3, [pc, #216]	; (8017a1c <MX_TIM5_Init+0x110>)
 8017942:	605a      	str	r2, [r3, #4]
  octim5.OCMode = TIM_OCMODE_PWM2;
 8017944:	4b35      	ldr	r3, [pc, #212]	; (8017a1c <MX_TIM5_Init+0x110>)
 8017946:	2270      	movs	r2, #112	; 0x70
 8017948:	601a      	str	r2, [r3, #0]
  octim5.OCFastMode = TIM_OCFAST_ENABLE;
 801794a:	4b34      	ldr	r3, [pc, #208]	; (8017a1c <MX_TIM5_Init+0x110>)
 801794c:	2204      	movs	r2, #4
 801794e:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8017950:	4b33      	ldr	r3, [pc, #204]	; (8017a20 <MX_TIM5_Init+0x114>)
 8017952:	4a34      	ldr	r2, [pc, #208]	; (8017a24 <MX_TIM5_Init+0x118>)
 8017954:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9;
 8017956:	4b32      	ldr	r3, [pc, #200]	; (8017a20 <MX_TIM5_Init+0x114>)
 8017958:	2209      	movs	r2, #9
 801795a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 801795c:	4b30      	ldr	r3, [pc, #192]	; (8017a20 <MX_TIM5_Init+0x114>)
 801795e:	2200      	movs	r2, #0
 8017960:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 18000;
 8017962:	4b2f      	ldr	r3, [pc, #188]	; (8017a20 <MX_TIM5_Init+0x114>)
 8017964:	f244 6250 	movw	r2, #18000	; 0x4650
 8017968:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801796a:	4b2d      	ldr	r3, [pc, #180]	; (8017a20 <MX_TIM5_Init+0x114>)
 801796c:	2200      	movs	r2, #0
 801796e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8017970:	4b2b      	ldr	r3, [pc, #172]	; (8017a20 <MX_TIM5_Init+0x114>)
 8017972:	2280      	movs	r2, #128	; 0x80
 8017974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8017976:	482a      	ldr	r0, [pc, #168]	; (8017a20 <MX_TIM5_Init+0x114>)
 8017978:	f005 fa5a 	bl	801ce30 <HAL_TIM_Base_Init>
 801797c:	4603      	mov	r3, r0
 801797e:	2b00      	cmp	r3, #0
 8017980:	d001      	beq.n	8017986 <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
 8017982:	f000 f993 	bl	8017cac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8017986:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801798a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 801798c:	f107 0308 	add.w	r3, r7, #8
 8017990:	4619      	mov	r1, r3
 8017992:	4823      	ldr	r0, [pc, #140]	; (8017a20 <MX_TIM5_Init+0x114>)
 8017994:	f005 fc70 	bl	801d278 <HAL_TIM_ConfigClockSource>
 8017998:	4603      	mov	r3, r0
 801799a:	2b00      	cmp	r3, #0
 801799c:	d001      	beq.n	80179a2 <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 801799e:	f000 f985 	bl	8017cac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80179a2:	2300      	movs	r3, #0
 80179a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80179a6:	2300      	movs	r3, #0
 80179a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80179aa:	463b      	mov	r3, r7
 80179ac:	4619      	mov	r1, r3
 80179ae:	481c      	ldr	r0, [pc, #112]	; (8017a20 <MX_TIM5_Init+0x114>)
 80179b0:	f006 f83c 	bl	801da2c <HAL_TIMEx_MasterConfigSynchronization>
 80179b4:	4603      	mov	r3, r0
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	d001      	beq.n	80179be <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80179ba:	f000 f977 	bl	8017cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  htim5.Init.Period = FARR[List[FREQ_OUT].Val];
 80179be:	4b15      	ldr	r3, [pc, #84]	; (8017a14 <MX_TIM5_Init+0x108>)
 80179c0:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 80179c4:	461a      	mov	r2, r3
 80179c6:	4b14      	ldr	r3, [pc, #80]	; (8017a18 <MX_TIM5_Init+0x10c>)
 80179c8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80179cc:	461a      	mov	r2, r3
 80179ce:	4b14      	ldr	r3, [pc, #80]	; (8017a20 <MX_TIM5_Init+0x114>)
 80179d0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80179d2:	4813      	ldr	r0, [pc, #76]	; (8017a20 <MX_TIM5_Init+0x114>)
 80179d4:	f005 fa2c 	bl	801ce30 <HAL_TIM_Base_Init>
 80179d8:	4603      	mov	r3, r0
 80179da:	2b00      	cmp	r3, #0
 80179dc:	d001      	beq.n	80179e2 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80179de:	f000 f965 	bl	8017cac <Error_Handler>
  }
  HAL_TIM_OC_ConfigChannel(&htim5, &octim5, 3 );
 80179e2:	2203      	movs	r2, #3
 80179e4:	490d      	ldr	r1, [pc, #52]	; (8017a1c <MX_TIM5_Init+0x110>)
 80179e6:	480e      	ldr	r0, [pc, #56]	; (8017a20 <MX_TIM5_Init+0x114>)
 80179e8:	f005 fbea 	bl	801d1c0 <HAL_TIM_OC_ConfigChannel>
  __HAL_TIM_URS_ENABLE(&htim5);
 80179ec:	4b0c      	ldr	r3, [pc, #48]	; (8017a20 <MX_TIM5_Init+0x114>)
 80179ee:	681b      	ldr	r3, [r3, #0]
 80179f0:	681a      	ldr	r2, [r3, #0]
 80179f2:	4b0b      	ldr	r3, [pc, #44]	; (8017a20 <MX_TIM5_Init+0x114>)
 80179f4:	681b      	ldr	r3, [r3, #0]
 80179f6:	f042 0204 	orr.w	r2, r2, #4
 80179fa:	601a      	str	r2, [r3, #0]
  __HAL_TIM_ENABLE(&htim5);
 80179fc:	4b08      	ldr	r3, [pc, #32]	; (8017a20 <MX_TIM5_Init+0x114>)
 80179fe:	681b      	ldr	r3, [r3, #0]
 8017a00:	681a      	ldr	r2, [r3, #0]
 8017a02:	4b07      	ldr	r3, [pc, #28]	; (8017a20 <MX_TIM5_Init+0x114>)
 8017a04:	681b      	ldr	r3, [r3, #0]
 8017a06:	f042 0201 	orr.w	r2, r2, #1
 8017a0a:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM5_Init 2 */

}
 8017a0c:	bf00      	nop
 8017a0e:	3718      	adds	r7, #24
 8017a10:	46bd      	mov	sp, r7
 8017a12:	bd80      	pop	{r7, pc}
 8017a14:	20000298 	.word	0x20000298
 8017a18:	08000ae8 	.word	0x08000ae8
 8017a1c:	20006adc 	.word	0x20006adc
 8017a20:	20006930 	.word	0x20006930
 8017a24:	40000c00 	.word	0x40000c00

08017a28 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8017a28:	b580      	push	{r7, lr}
 8017a2a:	b082      	sub	sp, #8
 8017a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */
  // aka tim_da
  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017a2e:	463b      	mov	r3, r7
 8017a30:	2200      	movs	r2, #0
 8017a32:	601a      	str	r2, [r3, #0]
 8017a34:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8017a36:	4b1d      	ldr	r3, [pc, #116]	; (8017aac <MX_TIM7_Init+0x84>)
 8017a38:	4a1d      	ldr	r2, [pc, #116]	; (8017ab0 <MX_TIM7_Init+0x88>)
 8017a3a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2;
 8017a3c:	4b1b      	ldr	r3, [pc, #108]	; (8017aac <MX_TIM7_Init+0x84>)
 8017a3e:	2202      	movs	r2, #2
 8017a40:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017a42:	4b1a      	ldr	r3, [pc, #104]	; (8017aac <MX_TIM7_Init+0x84>)
 8017a44:	2200      	movs	r2, #0
 8017a46:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8017a48:	4b18      	ldr	r3, [pc, #96]	; (8017aac <MX_TIM7_Init+0x84>)
 8017a4a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8017a4e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8017a50:	4b16      	ldr	r3, [pc, #88]	; (8017aac <MX_TIM7_Init+0x84>)
 8017a52:	2200      	movs	r2, #0
 8017a54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8017a56:	4815      	ldr	r0, [pc, #84]	; (8017aac <MX_TIM7_Init+0x84>)
 8017a58:	f005 f9ea 	bl	801ce30 <HAL_TIM_Base_Init>
 8017a5c:	4603      	mov	r3, r0
 8017a5e:	2b00      	cmp	r3, #0
 8017a60:	d001      	beq.n	8017a66 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8017a62:	f000 f923 	bl	8017cac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017a66:	2300      	movs	r3, #0
 8017a68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8017a6a:	2300      	movs	r3, #0
 8017a6c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8017a6e:	463b      	mov	r3, r7
 8017a70:	4619      	mov	r1, r3
 8017a72:	480e      	ldr	r0, [pc, #56]	; (8017aac <MX_TIM7_Init+0x84>)
 8017a74:	f005 ffda 	bl	801da2c <HAL_TIMEx_MasterConfigSynchronization>
 8017a78:	4603      	mov	r3, r0
 8017a7a:	2b00      	cmp	r3, #0
 8017a7c:	d001      	beq.n	8017a82 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8017a7e:	f000 f915 	bl	8017cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  __HAL_TIM_ENABLE_DMA(&htim7,TIM_DMA_UPDATE);
 8017a82:	4b0a      	ldr	r3, [pc, #40]	; (8017aac <MX_TIM7_Init+0x84>)
 8017a84:	681b      	ldr	r3, [r3, #0]
 8017a86:	68da      	ldr	r2, [r3, #12]
 8017a88:	4b08      	ldr	r3, [pc, #32]	; (8017aac <MX_TIM7_Init+0x84>)
 8017a8a:	681b      	ldr	r3, [r3, #0]
 8017a8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017a90:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim7);
 8017a92:	4b06      	ldr	r3, [pc, #24]	; (8017aac <MX_TIM7_Init+0x84>)
 8017a94:	681b      	ldr	r3, [r3, #0]
 8017a96:	681a      	ldr	r2, [r3, #0]
 8017a98:	4b04      	ldr	r3, [pc, #16]	; (8017aac <MX_TIM7_Init+0x84>)
 8017a9a:	681b      	ldr	r3, [r3, #0]
 8017a9c:	f042 0201 	orr.w	r2, r2, #1
 8017aa0:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM7_Init 2 */

}
 8017aa2:	bf00      	nop
 8017aa4:	3708      	adds	r7, #8
 8017aa6:	46bd      	mov	sp, r7
 8017aa8:	bd80      	pop	{r7, pc}
 8017aaa:	bf00      	nop
 8017aac:	20006bd0 	.word	0x20006bd0
 8017ab0:	40001400 	.word	0x40001400

08017ab4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8017ab4:	b580      	push	{r7, lr}
 8017ab6:	b082      	sub	sp, #8
 8017ab8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8017aba:	2300      	movs	r3, #0
 8017abc:	607b      	str	r3, [r7, #4]
 8017abe:	4b17      	ldr	r3, [pc, #92]	; (8017b1c <MX_DMA_Init+0x68>)
 8017ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ac2:	4a16      	ldr	r2, [pc, #88]	; (8017b1c <MX_DMA_Init+0x68>)
 8017ac4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8017ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8017aca:	4b14      	ldr	r3, [pc, #80]	; (8017b1c <MX_DMA_Init+0x68>)
 8017acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8017ad2:	607b      	str	r3, [r7, #4]
 8017ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8017ad6:	2300      	movs	r3, #0
 8017ad8:	603b      	str	r3, [r7, #0]
 8017ada:	4b10      	ldr	r3, [pc, #64]	; (8017b1c <MX_DMA_Init+0x68>)
 8017adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ade:	4a0f      	ldr	r2, [pc, #60]	; (8017b1c <MX_DMA_Init+0x68>)
 8017ae0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8017ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8017ae6:	4b0d      	ldr	r3, [pc, #52]	; (8017b1c <MX_DMA_Init+0x68>)
 8017ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017aea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8017aee:	603b      	str	r3, [r7, #0]
 8017af0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8017af2:	2200      	movs	r2, #0
 8017af4:	2100      	movs	r1, #0
 8017af6:	2010      	movs	r0, #16
 8017af8:	f000 ffdd 	bl	8018ab6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8017afc:	2010      	movs	r0, #16
 8017afe:	f000 fff6 	bl	8018aee <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8017b02:	2200      	movs	r2, #0
 8017b04:	2100      	movs	r1, #0
 8017b06:	2038      	movs	r0, #56	; 0x38
 8017b08:	f000 ffd5 	bl	8018ab6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8017b0c:	2038      	movs	r0, #56	; 0x38
 8017b0e:	f000 ffee 	bl	8018aee <HAL_NVIC_EnableIRQ>

}
 8017b12:	bf00      	nop
 8017b14:	3708      	adds	r7, #8
 8017b16:	46bd      	mov	sp, r7
 8017b18:	bd80      	pop	{r7, pc}
 8017b1a:	bf00      	nop
 8017b1c:	40023800 	.word	0x40023800

08017b20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8017b20:	b580      	push	{r7, lr}
 8017b22:	b08a      	sub	sp, #40	; 0x28
 8017b24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017b26:	f107 0314 	add.w	r3, r7, #20
 8017b2a:	2200      	movs	r2, #0
 8017b2c:	601a      	str	r2, [r3, #0]
 8017b2e:	605a      	str	r2, [r3, #4]
 8017b30:	609a      	str	r2, [r3, #8]
 8017b32:	60da      	str	r2, [r3, #12]
 8017b34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8017b36:	2300      	movs	r3, #0
 8017b38:	613b      	str	r3, [r7, #16]
 8017b3a:	4b4e      	ldr	r3, [pc, #312]	; (8017c74 <MX_GPIO_Init+0x154>)
 8017b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b3e:	4a4d      	ldr	r2, [pc, #308]	; (8017c74 <MX_GPIO_Init+0x154>)
 8017b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017b44:	6313      	str	r3, [r2, #48]	; 0x30
 8017b46:	4b4b      	ldr	r3, [pc, #300]	; (8017c74 <MX_GPIO_Init+0x154>)
 8017b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017b4e:	613b      	str	r3, [r7, #16]
 8017b50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8017b52:	2300      	movs	r3, #0
 8017b54:	60fb      	str	r3, [r7, #12]
 8017b56:	4b47      	ldr	r3, [pc, #284]	; (8017c74 <MX_GPIO_Init+0x154>)
 8017b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b5a:	4a46      	ldr	r2, [pc, #280]	; (8017c74 <MX_GPIO_Init+0x154>)
 8017b5c:	f043 0301 	orr.w	r3, r3, #1
 8017b60:	6313      	str	r3, [r2, #48]	; 0x30
 8017b62:	4b44      	ldr	r3, [pc, #272]	; (8017c74 <MX_GPIO_Init+0x154>)
 8017b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b66:	f003 0301 	and.w	r3, r3, #1
 8017b6a:	60fb      	str	r3, [r7, #12]
 8017b6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8017b6e:	2300      	movs	r3, #0
 8017b70:	60bb      	str	r3, [r7, #8]
 8017b72:	4b40      	ldr	r3, [pc, #256]	; (8017c74 <MX_GPIO_Init+0x154>)
 8017b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b76:	4a3f      	ldr	r2, [pc, #252]	; (8017c74 <MX_GPIO_Init+0x154>)
 8017b78:	f043 0304 	orr.w	r3, r3, #4
 8017b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8017b7e:	4b3d      	ldr	r3, [pc, #244]	; (8017c74 <MX_GPIO_Init+0x154>)
 8017b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b82:	f003 0304 	and.w	r3, r3, #4
 8017b86:	60bb      	str	r3, [r7, #8]
 8017b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8017b8a:	2300      	movs	r3, #0
 8017b8c:	607b      	str	r3, [r7, #4]
 8017b8e:	4b39      	ldr	r3, [pc, #228]	; (8017c74 <MX_GPIO_Init+0x154>)
 8017b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b92:	4a38      	ldr	r2, [pc, #224]	; (8017c74 <MX_GPIO_Init+0x154>)
 8017b94:	f043 0302 	orr.w	r3, r3, #2
 8017b98:	6313      	str	r3, [r2, #48]	; 0x30
 8017b9a:	4b36      	ldr	r3, [pc, #216]	; (8017c74 <MX_GPIO_Init+0x154>)
 8017b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b9e:	f003 0302 	and.w	r3, r3, #2
 8017ba2:	607b      	str	r3, [r7, #4]
 8017ba4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Fo2_GPIO_Port, Fo2_Pin, GPIO_PIN_RESET);
 8017ba6:	2200      	movs	r2, #0
 8017ba8:	2104      	movs	r1, #4
 8017baa:	4833      	ldr	r0, [pc, #204]	; (8017c78 <MX_GPIO_Init+0x158>)
 8017bac:	f001 fff0 	bl	8019b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Az_Pin|Ay_Pin|LcdRs_Pin, GPIO_PIN_RESET);
 8017bb0:	2200      	movs	r2, #0
 8017bb2:	f44f 6103 	mov.w	r1, #2096	; 0x830
 8017bb6:	4831      	ldr	r0, [pc, #196]	; (8017c7c <MX_GPIO_Init+0x15c>)
 8017bb8:	f001 ffea 	bl	8019b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Ax_Pin|Dres_Pin, GPIO_PIN_RESET);
 8017bbc:	2200      	movs	r2, #0
 8017bbe:	f240 2101 	movw	r1, #513	; 0x201
 8017bc2:	482f      	ldr	r0, [pc, #188]	; (8017c80 <MX_GPIO_Init+0x160>)
 8017bc4:	f001 ffe4 	bl	8019b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS_Pin|TpCs_Pin, GPIO_PIN_SET);
 8017bc8:	2201      	movs	r2, #1
 8017bca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8017bce:	482c      	ldr	r0, [pc, #176]	; (8017c80 <MX_GPIO_Init+0x160>)
 8017bd0:	f001 ffde 	bl	8019b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);
 8017bd4:	2201      	movs	r2, #1
 8017bd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017bda:	4828      	ldr	r0, [pc, #160]	; (8017c7c <MX_GPIO_Init+0x15c>)
 8017bdc:	f001 ffd8 	bl	8019b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Fo2_Pin */
  GPIO_InitStruct.Pin = Fo2_Pin;
 8017be0:	2304      	movs	r3, #4
 8017be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017be4:	2301      	movs	r3, #1
 8017be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017be8:	2300      	movs	r3, #0
 8017bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017bec:	2300      	movs	r3, #0
 8017bee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStruct);
 8017bf0:	f107 0314 	add.w	r3, r7, #20
 8017bf4:	4619      	mov	r1, r3
 8017bf6:	4820      	ldr	r0, [pc, #128]	; (8017c78 <MX_GPIO_Init+0x158>)
 8017bf8:	f001 fe1e 	bl	8019838 <HAL_GPIO_Init>

  /*Configure GPIO pins : Az_Pin Ay_Pin LcdRs_Pin LcdCs_Pin */
  GPIO_InitStruct.Pin = Az_Pin|Ay_Pin|LcdRs_Pin|LcdCs_Pin;
 8017bfc:	f641 0330 	movw	r3, #6192	; 0x1830
 8017c00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017c02:	2301      	movs	r3, #1
 8017c04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017c06:	2300      	movs	r3, #0
 8017c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017c0a:	2300      	movs	r3, #0
 8017c0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8017c0e:	f107 0314 	add.w	r3, r7, #20
 8017c12:	4619      	mov	r1, r3
 8017c14:	4819      	ldr	r0, [pc, #100]	; (8017c7c <MX_GPIO_Init+0x15c>)
 8017c16:	f001 fe0f 	bl	8019838 <HAL_GPIO_Init>

  /*Configure GPIO pins : Ax_Pin SS_Pin TpCs_Pin Dres_Pin */
  GPIO_InitStruct.Pin = Ax_Pin|SS_Pin|TpCs_Pin|Dres_Pin;
 8017c1a:	f241 2341 	movw	r3, #4673	; 0x1241
 8017c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017c20:	2301      	movs	r3, #1
 8017c22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017c24:	2300      	movs	r3, #0
 8017c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017c28:	2300      	movs	r3, #0
 8017c2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017c2c:	f107 0314 	add.w	r3, r7, #20
 8017c30:	4619      	mov	r1, r3
 8017c32:	4813      	ldr	r0, [pc, #76]	; (8017c80 <MX_GPIO_Init+0x160>)
 8017c34:	f001 fe00 	bl	8019838 <HAL_GPIO_Init>

  /*Configure GPIO pin : Boot1_Pin */
  GPIO_InitStruct.Pin = Boot1_Pin;
 8017c38:	2304      	movs	r3, #4
 8017c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8017c3c:	2300      	movs	r3, #0
 8017c3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017c40:	2300      	movs	r3, #0
 8017c42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Boot1_GPIO_Port, &GPIO_InitStruct);
 8017c44:	f107 0314 	add.w	r3, r7, #20
 8017c48:	4619      	mov	r1, r3
 8017c4a:	480d      	ldr	r0, [pc, #52]	; (8017c80 <MX_GPIO_Init+0x160>)
 8017c4c:	f001 fdf4 	bl	8019838 <HAL_GPIO_Init>

  /*Configure GPIO pin : TpI_Pin */
  GPIO_InitStruct.Pin = TpI_Pin;
 8017c50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8017c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8017c56:	2300      	movs	r3, #0
 8017c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8017c5a:	2301      	movs	r3, #1
 8017c5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TpI_GPIO_Port, &GPIO_InitStruct);
 8017c5e:	f107 0314 	add.w	r3, r7, #20
 8017c62:	4619      	mov	r1, r3
 8017c64:	4806      	ldr	r0, [pc, #24]	; (8017c80 <MX_GPIO_Init+0x160>)
 8017c66:	f001 fde7 	bl	8019838 <HAL_GPIO_Init>

}
 8017c6a:	bf00      	nop
 8017c6c:	3728      	adds	r7, #40	; 0x28
 8017c6e:	46bd      	mov	sp, r7
 8017c70:	bd80      	pop	{r7, pc}
 8017c72:	bf00      	nop
 8017c74:	40023800 	.word	0x40023800
 8017c78:	40020000 	.word	0x40020000
 8017c7c:	40020800 	.word	0x40020800
 8017c80:	40020400 	.word	0x40020400

08017c84 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8017c84:	b580      	push	{r7, lr}
 8017c86:	b082      	sub	sp, #8
 8017c88:	af00      	add	r7, sp, #0
 8017c8a:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback
  if (htim == &htim3 )
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	4a06      	ldr	r2, [pc, #24]	; (8017ca8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8017c90:	4293      	cmp	r3, r2
 8017c92:	d105      	bne.n	8017ca0 <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
	  htim->Instance->SR =0;
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	681b      	ldr	r3, [r3, #0]
 8017c98:	2200      	movs	r2, #0
 8017c9a:	611a      	str	r2, [r3, #16]
	  Tim3_ISP();
 8017c9c:	f7f4 fdd2 	bl	800c844 <Tim3_ISP>
  }
}
 8017ca0:	bf00      	nop
 8017ca2:	3708      	adds	r7, #8
 8017ca4:	46bd      	mov	sp, r7
 8017ca6:	bd80      	pop	{r7, pc}
 8017ca8:	20006978 	.word	0x20006978

08017cac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8017cac:	b480      	push	{r7}
 8017cae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8017cb0:	b672      	cpsid	i
}
 8017cb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8017cb4:	e7fe      	b.n	8017cb4 <Error_Handler+0x8>
	...

08017cb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8017cb8:	b480      	push	{r7}
 8017cba:	b083      	sub	sp, #12
 8017cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8017cbe:	2300      	movs	r3, #0
 8017cc0:	607b      	str	r3, [r7, #4]
 8017cc2:	4b10      	ldr	r3, [pc, #64]	; (8017d04 <HAL_MspInit+0x4c>)
 8017cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017cc6:	4a0f      	ldr	r2, [pc, #60]	; (8017d04 <HAL_MspInit+0x4c>)
 8017cc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8017cce:	4b0d      	ldr	r3, [pc, #52]	; (8017d04 <HAL_MspInit+0x4c>)
 8017cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017cd6:	607b      	str	r3, [r7, #4]
 8017cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8017cda:	2300      	movs	r3, #0
 8017cdc:	603b      	str	r3, [r7, #0]
 8017cde:	4b09      	ldr	r3, [pc, #36]	; (8017d04 <HAL_MspInit+0x4c>)
 8017ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ce2:	4a08      	ldr	r2, [pc, #32]	; (8017d04 <HAL_MspInit+0x4c>)
 8017ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8017cea:	4b06      	ldr	r3, [pc, #24]	; (8017d04 <HAL_MspInit+0x4c>)
 8017cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017cf2:	603b      	str	r3, [r7, #0]
 8017cf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8017cf6:	bf00      	nop
 8017cf8:	370c      	adds	r7, #12
 8017cfa:	46bd      	mov	sp, r7
 8017cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d00:	4770      	bx	lr
 8017d02:	bf00      	nop
 8017d04:	40023800 	.word	0x40023800

08017d08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8017d08:	b580      	push	{r7, lr}
 8017d0a:	b08c      	sub	sp, #48	; 0x30
 8017d0c:	af00      	add	r7, sp, #0
 8017d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017d10:	f107 031c 	add.w	r3, r7, #28
 8017d14:	2200      	movs	r2, #0
 8017d16:	601a      	str	r2, [r3, #0]
 8017d18:	605a      	str	r2, [r3, #4]
 8017d1a:	609a      	str	r2, [r3, #8]
 8017d1c:	60da      	str	r2, [r3, #12]
 8017d1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	681b      	ldr	r3, [r3, #0]
 8017d24:	4a45      	ldr	r2, [pc, #276]	; (8017e3c <HAL_ADC_MspInit+0x134>)
 8017d26:	4293      	cmp	r3, r2
 8017d28:	d157      	bne.n	8017dda <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8017d2a:	2300      	movs	r3, #0
 8017d2c:	61bb      	str	r3, [r7, #24]
 8017d2e:	4b44      	ldr	r3, [pc, #272]	; (8017e40 <HAL_ADC_MspInit+0x138>)
 8017d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017d32:	4a43      	ldr	r2, [pc, #268]	; (8017e40 <HAL_ADC_MspInit+0x138>)
 8017d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017d38:	6453      	str	r3, [r2, #68]	; 0x44
 8017d3a:	4b41      	ldr	r3, [pc, #260]	; (8017e40 <HAL_ADC_MspInit+0x138>)
 8017d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017d42:	61bb      	str	r3, [r7, #24]
 8017d44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017d46:	2300      	movs	r3, #0
 8017d48:	617b      	str	r3, [r7, #20]
 8017d4a:	4b3d      	ldr	r3, [pc, #244]	; (8017e40 <HAL_ADC_MspInit+0x138>)
 8017d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d4e:	4a3c      	ldr	r2, [pc, #240]	; (8017e40 <HAL_ADC_MspInit+0x138>)
 8017d50:	f043 0301 	orr.w	r3, r3, #1
 8017d54:	6313      	str	r3, [r2, #48]	; 0x30
 8017d56:	4b3a      	ldr	r3, [pc, #232]	; (8017e40 <HAL_ADC_MspInit+0x138>)
 8017d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d5a:	f003 0301 	and.w	r3, r3, #1
 8017d5e:	617b      	str	r3, [r7, #20]
 8017d60:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = Ao_Pin;
 8017d62:	2340      	movs	r3, #64	; 0x40
 8017d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8017d66:	2303      	movs	r3, #3
 8017d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017d6a:	2300      	movs	r3, #0
 8017d6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Ao_GPIO_Port, &GPIO_InitStruct);
 8017d6e:	f107 031c 	add.w	r3, r7, #28
 8017d72:	4619      	mov	r1, r3
 8017d74:	4833      	ldr	r0, [pc, #204]	; (8017e44 <HAL_ADC_MspInit+0x13c>)
 8017d76:	f001 fd5f 	bl	8019838 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8017d7a:	4b33      	ldr	r3, [pc, #204]	; (8017e48 <HAL_ADC_MspInit+0x140>)
 8017d7c:	4a33      	ldr	r2, [pc, #204]	; (8017e4c <HAL_ADC_MspInit+0x144>)
 8017d7e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8017d80:	4b31      	ldr	r3, [pc, #196]	; (8017e48 <HAL_ADC_MspInit+0x140>)
 8017d82:	2200      	movs	r2, #0
 8017d84:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8017d86:	4b30      	ldr	r3, [pc, #192]	; (8017e48 <HAL_ADC_MspInit+0x140>)
 8017d88:	2200      	movs	r2, #0
 8017d8a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8017d8c:	4b2e      	ldr	r3, [pc, #184]	; (8017e48 <HAL_ADC_MspInit+0x140>)
 8017d8e:	2200      	movs	r2, #0
 8017d90:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8017d92:	4b2d      	ldr	r3, [pc, #180]	; (8017e48 <HAL_ADC_MspInit+0x140>)
 8017d94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017d98:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8017d9a:	4b2b      	ldr	r3, [pc, #172]	; (8017e48 <HAL_ADC_MspInit+0x140>)
 8017d9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017da0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8017da2:	4b29      	ldr	r3, [pc, #164]	; (8017e48 <HAL_ADC_MspInit+0x140>)
 8017da4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8017da8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8017daa:	4b27      	ldr	r3, [pc, #156]	; (8017e48 <HAL_ADC_MspInit+0x140>)
 8017dac:	2200      	movs	r2, #0
 8017dae:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8017db0:	4b25      	ldr	r3, [pc, #148]	; (8017e48 <HAL_ADC_MspInit+0x140>)
 8017db2:	2200      	movs	r2, #0
 8017db4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8017db6:	4b24      	ldr	r3, [pc, #144]	; (8017e48 <HAL_ADC_MspInit+0x140>)
 8017db8:	2200      	movs	r2, #0
 8017dba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8017dbc:	4822      	ldr	r0, [pc, #136]	; (8017e48 <HAL_ADC_MspInit+0x140>)
 8017dbe:	f000 ff47 	bl	8018c50 <HAL_DMA_Init>
 8017dc2:	4603      	mov	r3, r0
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	d001      	beq.n	8017dcc <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8017dc8:	f7ff ff70 	bl	8017cac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8017dcc:	687b      	ldr	r3, [r7, #4]
 8017dce:	4a1e      	ldr	r2, [pc, #120]	; (8017e48 <HAL_ADC_MspInit+0x140>)
 8017dd0:	639a      	str	r2, [r3, #56]	; 0x38
 8017dd2:	4a1d      	ldr	r2, [pc, #116]	; (8017e48 <HAL_ADC_MspInit+0x140>)
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8017dd8:	e02c      	b.n	8017e34 <HAL_ADC_MspInit+0x12c>
  else if(hadc->Instance==ADC2)
 8017dda:	687b      	ldr	r3, [r7, #4]
 8017ddc:	681b      	ldr	r3, [r3, #0]
 8017dde:	4a1c      	ldr	r2, [pc, #112]	; (8017e50 <HAL_ADC_MspInit+0x148>)
 8017de0:	4293      	cmp	r3, r2
 8017de2:	d127      	bne.n	8017e34 <HAL_ADC_MspInit+0x12c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8017de4:	2300      	movs	r3, #0
 8017de6:	613b      	str	r3, [r7, #16]
 8017de8:	4b15      	ldr	r3, [pc, #84]	; (8017e40 <HAL_ADC_MspInit+0x138>)
 8017dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017dec:	4a14      	ldr	r2, [pc, #80]	; (8017e40 <HAL_ADC_MspInit+0x138>)
 8017dee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8017df2:	6453      	str	r3, [r2, #68]	; 0x44
 8017df4:	4b12      	ldr	r3, [pc, #72]	; (8017e40 <HAL_ADC_MspInit+0x138>)
 8017df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017df8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8017dfc:	613b      	str	r3, [r7, #16]
 8017dfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017e00:	2300      	movs	r3, #0
 8017e02:	60fb      	str	r3, [r7, #12]
 8017e04:	4b0e      	ldr	r3, [pc, #56]	; (8017e40 <HAL_ADC_MspInit+0x138>)
 8017e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e08:	4a0d      	ldr	r2, [pc, #52]	; (8017e40 <HAL_ADC_MspInit+0x138>)
 8017e0a:	f043 0301 	orr.w	r3, r3, #1
 8017e0e:	6313      	str	r3, [r2, #48]	; 0x30
 8017e10:	4b0b      	ldr	r3, [pc, #44]	; (8017e40 <HAL_ADC_MspInit+0x138>)
 8017e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e14:	f003 0301 	and.w	r3, r3, #1
 8017e18:	60fb      	str	r3, [r7, #12]
 8017e1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AoA7_Pin;
 8017e1c:	2380      	movs	r3, #128	; 0x80
 8017e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8017e20:	2303      	movs	r3, #3
 8017e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017e24:	2300      	movs	r3, #0
 8017e26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AoA7_GPIO_Port, &GPIO_InitStruct);
 8017e28:	f107 031c 	add.w	r3, r7, #28
 8017e2c:	4619      	mov	r1, r3
 8017e2e:	4805      	ldr	r0, [pc, #20]	; (8017e44 <HAL_ADC_MspInit+0x13c>)
 8017e30:	f001 fd02 	bl	8019838 <HAL_GPIO_Init>
}
 8017e34:	bf00      	nop
 8017e36:	3730      	adds	r7, #48	; 0x30
 8017e38:	46bd      	mov	sp, r7
 8017e3a:	bd80      	pop	{r7, pc}
 8017e3c:	40012000 	.word	0x40012000
 8017e40:	40023800 	.word	0x40023800
 8017e44:	40020000 	.word	0x40020000
 8017e48:	20006b0c 	.word	0x20006b0c
 8017e4c:	40026410 	.word	0x40026410
 8017e50:	40012100 	.word	0x40012100

08017e54 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8017e54:	b580      	push	{r7, lr}
 8017e56:	b08a      	sub	sp, #40	; 0x28
 8017e58:	af00      	add	r7, sp, #0
 8017e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017e5c:	f107 0314 	add.w	r3, r7, #20
 8017e60:	2200      	movs	r2, #0
 8017e62:	601a      	str	r2, [r3, #0]
 8017e64:	605a      	str	r2, [r3, #4]
 8017e66:	609a      	str	r2, [r3, #8]
 8017e68:	60da      	str	r2, [r3, #12]
 8017e6a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	681b      	ldr	r3, [r3, #0]
 8017e70:	4a33      	ldr	r2, [pc, #204]	; (8017f40 <HAL_DAC_MspInit+0xec>)
 8017e72:	4293      	cmp	r3, r2
 8017e74:	d15f      	bne.n	8017f36 <HAL_DAC_MspInit+0xe2>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8017e76:	2300      	movs	r3, #0
 8017e78:	613b      	str	r3, [r7, #16]
 8017e7a:	4b32      	ldr	r3, [pc, #200]	; (8017f44 <HAL_DAC_MspInit+0xf0>)
 8017e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e7e:	4a31      	ldr	r2, [pc, #196]	; (8017f44 <HAL_DAC_MspInit+0xf0>)
 8017e80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8017e84:	6413      	str	r3, [r2, #64]	; 0x40
 8017e86:	4b2f      	ldr	r3, [pc, #188]	; (8017f44 <HAL_DAC_MspInit+0xf0>)
 8017e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8017e8e:	613b      	str	r3, [r7, #16]
 8017e90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017e92:	2300      	movs	r3, #0
 8017e94:	60fb      	str	r3, [r7, #12]
 8017e96:	4b2b      	ldr	r3, [pc, #172]	; (8017f44 <HAL_DAC_MspInit+0xf0>)
 8017e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e9a:	4a2a      	ldr	r2, [pc, #168]	; (8017f44 <HAL_DAC_MspInit+0xf0>)
 8017e9c:	f043 0301 	orr.w	r3, r3, #1
 8017ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8017ea2:	4b28      	ldr	r3, [pc, #160]	; (8017f44 <HAL_DAC_MspInit+0xf0>)
 8017ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ea6:	f003 0301 	and.w	r3, r3, #1
 8017eaa:	60fb      	str	r3, [r7, #12]
 8017eac:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = Fo4_Pin|Ap_Pin;
 8017eae:	2330      	movs	r3, #48	; 0x30
 8017eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8017eb2:	2303      	movs	r3, #3
 8017eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017eb6:	2300      	movs	r3, #0
 8017eb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017eba:	f107 0314 	add.w	r3, r7, #20
 8017ebe:	4619      	mov	r1, r3
 8017ec0:	4821      	ldr	r0, [pc, #132]	; (8017f48 <HAL_DAC_MspInit+0xf4>)
 8017ec2:	f001 fcb9 	bl	8019838 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8017ec6:	4b21      	ldr	r3, [pc, #132]	; (8017f4c <HAL_DAC_MspInit+0xf8>)
 8017ec8:	4a21      	ldr	r2, [pc, #132]	; (8017f50 <HAL_DAC_MspInit+0xfc>)
 8017eca:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8017ecc:	4b1f      	ldr	r3, [pc, #124]	; (8017f4c <HAL_DAC_MspInit+0xf8>)
 8017ece:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8017ed2:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8017ed4:	4b1d      	ldr	r3, [pc, #116]	; (8017f4c <HAL_DAC_MspInit+0xf8>)
 8017ed6:	2240      	movs	r2, #64	; 0x40
 8017ed8:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8017eda:	4b1c      	ldr	r3, [pc, #112]	; (8017f4c <HAL_DAC_MspInit+0xf8>)
 8017edc:	2200      	movs	r2, #0
 8017ede:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8017ee0:	4b1a      	ldr	r3, [pc, #104]	; (8017f4c <HAL_DAC_MspInit+0xf8>)
 8017ee2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017ee6:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8017ee8:	4b18      	ldr	r3, [pc, #96]	; (8017f4c <HAL_DAC_MspInit+0xf8>)
 8017eea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017eee:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8017ef0:	4b16      	ldr	r3, [pc, #88]	; (8017f4c <HAL_DAC_MspInit+0xf8>)
 8017ef2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8017ef6:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 8017ef8:	4b14      	ldr	r3, [pc, #80]	; (8017f4c <HAL_DAC_MspInit+0xf8>)
 8017efa:	2200      	movs	r2, #0
 8017efc:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8017efe:	4b13      	ldr	r3, [pc, #76]	; (8017f4c <HAL_DAC_MspInit+0xf8>)
 8017f00:	2200      	movs	r2, #0
 8017f02:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8017f04:	4b11      	ldr	r3, [pc, #68]	; (8017f4c <HAL_DAC_MspInit+0xf8>)
 8017f06:	2200      	movs	r2, #0
 8017f08:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8017f0a:	4810      	ldr	r0, [pc, #64]	; (8017f4c <HAL_DAC_MspInit+0xf8>)
 8017f0c:	f000 fea0 	bl	8018c50 <HAL_DMA_Init>
 8017f10:	4603      	mov	r3, r0
 8017f12:	2b00      	cmp	r3, #0
 8017f14:	d001      	beq.n	8017f1a <HAL_DAC_MspInit+0xc6>
    {
      Error_Handler();
 8017f16:	f7ff fec9 	bl	8017cac <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8017f1a:	687b      	ldr	r3, [r7, #4]
 8017f1c:	4a0b      	ldr	r2, [pc, #44]	; (8017f4c <HAL_DAC_MspInit+0xf8>)
 8017f1e:	609a      	str	r2, [r3, #8]
 8017f20:	4a0a      	ldr	r2, [pc, #40]	; (8017f4c <HAL_DAC_MspInit+0xf8>)
 8017f22:	687b      	ldr	r3, [r7, #4]
 8017f24:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8017f26:	2200      	movs	r2, #0
 8017f28:	2100      	movs	r1, #0
 8017f2a:	2036      	movs	r0, #54	; 0x36
 8017f2c:	f000 fdc3 	bl	8018ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8017f30:	2036      	movs	r0, #54	; 0x36
 8017f32:	f000 fddc 	bl	8018aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8017f36:	bf00      	nop
 8017f38:	3728      	adds	r7, #40	; 0x28
 8017f3a:	46bd      	mov	sp, r7
 8017f3c:	bd80      	pop	{r7, pc}
 8017f3e:	bf00      	nop
 8017f40:	40007400 	.word	0x40007400
 8017f44:	40023800 	.word	0x40023800
 8017f48:	40020000 	.word	0x40020000
 8017f4c:	20006a18 	.word	0x20006a18
 8017f50:	40026088 	.word	0x40026088

08017f54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8017f54:	b580      	push	{r7, lr}
 8017f56:	b08c      	sub	sp, #48	; 0x30
 8017f58:	af00      	add	r7, sp, #0
 8017f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017f5c:	f107 031c 	add.w	r3, r7, #28
 8017f60:	2200      	movs	r2, #0
 8017f62:	601a      	str	r2, [r3, #0]
 8017f64:	605a      	str	r2, [r3, #4]
 8017f66:	609a      	str	r2, [r3, #8]
 8017f68:	60da      	str	r2, [r3, #12]
 8017f6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	681b      	ldr	r3, [r3, #0]
 8017f70:	4a3a      	ldr	r2, [pc, #232]	; (801805c <HAL_SPI_MspInit+0x108>)
 8017f72:	4293      	cmp	r3, r2
 8017f74:	d135      	bne.n	8017fe2 <HAL_SPI_MspInit+0x8e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8017f76:	2300      	movs	r3, #0
 8017f78:	61bb      	str	r3, [r7, #24]
 8017f7a:	4b39      	ldr	r3, [pc, #228]	; (8018060 <HAL_SPI_MspInit+0x10c>)
 8017f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f7e:	4a38      	ldr	r2, [pc, #224]	; (8018060 <HAL_SPI_MspInit+0x10c>)
 8017f80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017f84:	6413      	str	r3, [r2, #64]	; 0x40
 8017f86:	4b36      	ldr	r3, [pc, #216]	; (8018060 <HAL_SPI_MspInit+0x10c>)
 8017f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017f8e:	61bb      	str	r3, [r7, #24]
 8017f90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8017f92:	2300      	movs	r3, #0
 8017f94:	617b      	str	r3, [r7, #20]
 8017f96:	4b32      	ldr	r3, [pc, #200]	; (8018060 <HAL_SPI_MspInit+0x10c>)
 8017f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f9a:	4a31      	ldr	r2, [pc, #196]	; (8018060 <HAL_SPI_MspInit+0x10c>)
 8017f9c:	f043 0302 	orr.w	r3, r3, #2
 8017fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8017fa2:	4b2f      	ldr	r3, [pc, #188]	; (8018060 <HAL_SPI_MspInit+0x10c>)
 8017fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017fa6:	f003 0302 	and.w	r3, r3, #2
 8017faa:	617b      	str	r3, [r7, #20]
 8017fac:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|So_Pin|Si_Pin;
 8017fae:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8017fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017fb4:	2302      	movs	r3, #2
 8017fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017fb8:	2300      	movs	r3, #0
 8017fba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017fbc:	2303      	movs	r3, #3
 8017fbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8017fc0:	2305      	movs	r3, #5
 8017fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017fc4:	f107 031c 	add.w	r3, r7, #28
 8017fc8:	4619      	mov	r1, r3
 8017fca:	4826      	ldr	r0, [pc, #152]	; (8018064 <HAL_SPI_MspInit+0x110>)
 8017fcc:	f001 fc34 	bl	8019838 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 1, 0);
 8017fd0:	2200      	movs	r2, #0
 8017fd2:	2101      	movs	r1, #1
 8017fd4:	2024      	movs	r0, #36	; 0x24
 8017fd6:	f000 fd6e 	bl	8018ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8017fda:	2024      	movs	r0, #36	; 0x24
 8017fdc:	f000 fd87 	bl	8018aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8017fe0:	e038      	b.n	8018054 <HAL_SPI_MspInit+0x100>
  else if(hspi->Instance==SPI3)
 8017fe2:	687b      	ldr	r3, [r7, #4]
 8017fe4:	681b      	ldr	r3, [r3, #0]
 8017fe6:	4a20      	ldr	r2, [pc, #128]	; (8018068 <HAL_SPI_MspInit+0x114>)
 8017fe8:	4293      	cmp	r3, r2
 8017fea:	d133      	bne.n	8018054 <HAL_SPI_MspInit+0x100>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8017fec:	2300      	movs	r3, #0
 8017fee:	613b      	str	r3, [r7, #16]
 8017ff0:	4b1b      	ldr	r3, [pc, #108]	; (8018060 <HAL_SPI_MspInit+0x10c>)
 8017ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ff4:	4a1a      	ldr	r2, [pc, #104]	; (8018060 <HAL_SPI_MspInit+0x10c>)
 8017ff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8017ffa:	6413      	str	r3, [r2, #64]	; 0x40
 8017ffc:	4b18      	ldr	r3, [pc, #96]	; (8018060 <HAL_SPI_MspInit+0x10c>)
 8017ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018000:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8018004:	613b      	str	r3, [r7, #16]
 8018006:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8018008:	2300      	movs	r3, #0
 801800a:	60fb      	str	r3, [r7, #12]
 801800c:	4b14      	ldr	r3, [pc, #80]	; (8018060 <HAL_SPI_MspInit+0x10c>)
 801800e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018010:	4a13      	ldr	r2, [pc, #76]	; (8018060 <HAL_SPI_MspInit+0x10c>)
 8018012:	f043 0302 	orr.w	r3, r3, #2
 8018016:	6313      	str	r3, [r2, #48]	; 0x30
 8018018:	4b11      	ldr	r3, [pc, #68]	; (8018060 <HAL_SPI_MspInit+0x10c>)
 801801a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801801c:	f003 0302 	and.w	r3, r3, #2
 8018020:	60fb      	str	r3, [r7, #12]
 8018022:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TpCk_Pin|TpSo_Pin|TpSi_Pin;
 8018024:	2338      	movs	r3, #56	; 0x38
 8018026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018028:	2302      	movs	r3, #2
 801802a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801802c:	2300      	movs	r3, #0
 801802e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018030:	2303      	movs	r3, #3
 8018032:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8018034:	2306      	movs	r3, #6
 8018036:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8018038:	f107 031c 	add.w	r3, r7, #28
 801803c:	4619      	mov	r1, r3
 801803e:	4809      	ldr	r0, [pc, #36]	; (8018064 <HAL_SPI_MspInit+0x110>)
 8018040:	f001 fbfa 	bl	8019838 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 1, 0);
 8018044:	2200      	movs	r2, #0
 8018046:	2101      	movs	r1, #1
 8018048:	2033      	movs	r0, #51	; 0x33
 801804a:	f000 fd34 	bl	8018ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 801804e:	2033      	movs	r0, #51	; 0x33
 8018050:	f000 fd4d 	bl	8018aee <HAL_NVIC_EnableIRQ>
}
 8018054:	bf00      	nop
 8018056:	3730      	adds	r7, #48	; 0x30
 8018058:	46bd      	mov	sp, r7
 801805a:	bd80      	pop	{r7, pc}
 801805c:	40003800 	.word	0x40003800
 8018060:	40023800 	.word	0x40023800
 8018064:	40020400 	.word	0x40020400
 8018068:	40003c00 	.word	0x40003c00

0801806c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 801806c:	b580      	push	{r7, lr}
 801806e:	b086      	sub	sp, #24
 8018070:	af00      	add	r7, sp, #0
 8018072:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	681b      	ldr	r3, [r3, #0]
 8018078:	4a2c      	ldr	r2, [pc, #176]	; (801812c <HAL_TIM_Base_MspInit+0xc0>)
 801807a:	4293      	cmp	r3, r2
 801807c:	d10e      	bne.n	801809c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 801807e:	2300      	movs	r3, #0
 8018080:	617b      	str	r3, [r7, #20]
 8018082:	4b2b      	ldr	r3, [pc, #172]	; (8018130 <HAL_TIM_Base_MspInit+0xc4>)
 8018084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018086:	4a2a      	ldr	r2, [pc, #168]	; (8018130 <HAL_TIM_Base_MspInit+0xc4>)
 8018088:	f043 0301 	orr.w	r3, r3, #1
 801808c:	6453      	str	r3, [r2, #68]	; 0x44
 801808e:	4b28      	ldr	r3, [pc, #160]	; (8018130 <HAL_TIM_Base_MspInit+0xc4>)
 8018090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018092:	f003 0301 	and.w	r3, r3, #1
 8018096:	617b      	str	r3, [r7, #20]
 8018098:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 801809a:	e042      	b.n	8018122 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	681b      	ldr	r3, [r3, #0]
 80180a0:	4a24      	ldr	r2, [pc, #144]	; (8018134 <HAL_TIM_Base_MspInit+0xc8>)
 80180a2:	4293      	cmp	r3, r2
 80180a4:	d116      	bne.n	80180d4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80180a6:	2300      	movs	r3, #0
 80180a8:	613b      	str	r3, [r7, #16]
 80180aa:	4b21      	ldr	r3, [pc, #132]	; (8018130 <HAL_TIM_Base_MspInit+0xc4>)
 80180ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80180ae:	4a20      	ldr	r2, [pc, #128]	; (8018130 <HAL_TIM_Base_MspInit+0xc4>)
 80180b0:	f043 0302 	orr.w	r3, r3, #2
 80180b4:	6413      	str	r3, [r2, #64]	; 0x40
 80180b6:	4b1e      	ldr	r3, [pc, #120]	; (8018130 <HAL_TIM_Base_MspInit+0xc4>)
 80180b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80180ba:	f003 0302 	and.w	r3, r3, #2
 80180be:	613b      	str	r3, [r7, #16]
 80180c0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80180c2:	2200      	movs	r2, #0
 80180c4:	2100      	movs	r1, #0
 80180c6:	201d      	movs	r0, #29
 80180c8:	f000 fcf5 	bl	8018ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80180cc:	201d      	movs	r0, #29
 80180ce:	f000 fd0e 	bl	8018aee <HAL_NVIC_EnableIRQ>
}
 80180d2:	e026      	b.n	8018122 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM5)
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	681b      	ldr	r3, [r3, #0]
 80180d8:	4a17      	ldr	r2, [pc, #92]	; (8018138 <HAL_TIM_Base_MspInit+0xcc>)
 80180da:	4293      	cmp	r3, r2
 80180dc:	d10e      	bne.n	80180fc <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80180de:	2300      	movs	r3, #0
 80180e0:	60fb      	str	r3, [r7, #12]
 80180e2:	4b13      	ldr	r3, [pc, #76]	; (8018130 <HAL_TIM_Base_MspInit+0xc4>)
 80180e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80180e6:	4a12      	ldr	r2, [pc, #72]	; (8018130 <HAL_TIM_Base_MspInit+0xc4>)
 80180e8:	f043 0308 	orr.w	r3, r3, #8
 80180ec:	6413      	str	r3, [r2, #64]	; 0x40
 80180ee:	4b10      	ldr	r3, [pc, #64]	; (8018130 <HAL_TIM_Base_MspInit+0xc4>)
 80180f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80180f2:	f003 0308 	and.w	r3, r3, #8
 80180f6:	60fb      	str	r3, [r7, #12]
 80180f8:	68fb      	ldr	r3, [r7, #12]
}
 80180fa:	e012      	b.n	8018122 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM7)
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	681b      	ldr	r3, [r3, #0]
 8018100:	4a0e      	ldr	r2, [pc, #56]	; (801813c <HAL_TIM_Base_MspInit+0xd0>)
 8018102:	4293      	cmp	r3, r2
 8018104:	d10d      	bne.n	8018122 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8018106:	2300      	movs	r3, #0
 8018108:	60bb      	str	r3, [r7, #8]
 801810a:	4b09      	ldr	r3, [pc, #36]	; (8018130 <HAL_TIM_Base_MspInit+0xc4>)
 801810c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801810e:	4a08      	ldr	r2, [pc, #32]	; (8018130 <HAL_TIM_Base_MspInit+0xc4>)
 8018110:	f043 0320 	orr.w	r3, r3, #32
 8018114:	6413      	str	r3, [r2, #64]	; 0x40
 8018116:	4b06      	ldr	r3, [pc, #24]	; (8018130 <HAL_TIM_Base_MspInit+0xc4>)
 8018118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801811a:	f003 0320 	and.w	r3, r3, #32
 801811e:	60bb      	str	r3, [r7, #8]
 8018120:	68bb      	ldr	r3, [r7, #8]
}
 8018122:	bf00      	nop
 8018124:	3718      	adds	r7, #24
 8018126:	46bd      	mov	sp, r7
 8018128:	bd80      	pop	{r7, pc}
 801812a:	bf00      	nop
 801812c:	40010000 	.word	0x40010000
 8018130:	40023800 	.word	0x40023800
 8018134:	40000400 	.word	0x40000400
 8018138:	40000c00 	.word	0x40000c00
 801813c:	40001400 	.word	0x40001400

08018140 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8018140:	b480      	push	{r7}
 8018142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8018144:	e7fe      	b.n	8018144 <NMI_Handler+0x4>

08018146 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8018146:	b480      	push	{r7}
 8018148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801814a:	e7fe      	b.n	801814a <HardFault_Handler+0x4>

0801814c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801814c:	b480      	push	{r7}
 801814e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8018150:	e7fe      	b.n	8018150 <MemManage_Handler+0x4>

08018152 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8018152:	b480      	push	{r7}
 8018154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8018156:	e7fe      	b.n	8018156 <BusFault_Handler+0x4>

08018158 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8018158:	b480      	push	{r7}
 801815a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801815c:	e7fe      	b.n	801815c <UsageFault_Handler+0x4>

0801815e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 801815e:	b480      	push	{r7}
 8018160:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8018162:	bf00      	nop
 8018164:	46bd      	mov	sp, r7
 8018166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801816a:	4770      	bx	lr

0801816c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801816c:	b480      	push	{r7}
 801816e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8018170:	bf00      	nop
 8018172:	46bd      	mov	sp, r7
 8018174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018178:	4770      	bx	lr

0801817a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801817a:	b480      	push	{r7}
 801817c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 801817e:	bf00      	nop
 8018180:	46bd      	mov	sp, r7
 8018182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018186:	4770      	bx	lr

08018188 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8018188:	b580      	push	{r7, lr}
 801818a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801818c:	f000 f902 	bl	8018394 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8018190:	bf00      	nop
 8018192:	bd80      	pop	{r7, pc}

08018194 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8018194:	b580      	push	{r7, lr}
 8018196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8018198:	4802      	ldr	r0, [pc, #8]	; (80181a4 <DMA1_Stream5_IRQHandler+0x10>)
 801819a:	f000 fe29 	bl	8018df0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 801819e:	bf00      	nop
 80181a0:	bd80      	pop	{r7, pc}
 80181a2:	bf00      	nop
 80181a4:	20006a18 	.word	0x20006a18

080181a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80181a8:	b580      	push	{r7, lr}
 80181aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80181ac:	4802      	ldr	r0, [pc, #8]	; (80181b8 <TIM3_IRQHandler+0x10>)
 80181ae:	f004 feff 	bl	801cfb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80181b2:	bf00      	nop
 80181b4:	bd80      	pop	{r7, pc}
 80181b6:	bf00      	nop
 80181b8:	20006978 	.word	0x20006978

080181bc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80181bc:	b580      	push	{r7, lr}
 80181be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80181c0:	4802      	ldr	r0, [pc, #8]	; (80181cc <SPI2_IRQHandler+0x10>)
 80181c2:	f004 fbd9 	bl	801c978 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80181c6:	bf00      	nop
 80181c8:	bd80      	pop	{r7, pc}
 80181ca:	bf00      	nop
 80181cc:	20006890 	.word	0x20006890

080181d0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80181d0:	b580      	push	{r7, lr}
 80181d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80181d4:	4802      	ldr	r0, [pc, #8]	; (80181e0 <SPI3_IRQHandler+0x10>)
 80181d6:	f004 fbcf 	bl	801c978 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80181da:	bf00      	nop
 80181dc:	bd80      	pop	{r7, pc}
 80181de:	bf00      	nop
 80181e0:	200069c0 	.word	0x200069c0

080181e4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80181e4:	b580      	push	{r7, lr}
 80181e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80181e8:	4802      	ldr	r0, [pc, #8]	; (80181f4 <DMA2_Stream0_IRQHandler+0x10>)
 80181ea:	f000 fe01 	bl	8018df0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80181ee:	bf00      	nop
 80181f0:	bd80      	pop	{r7, pc}
 80181f2:	bf00      	nop
 80181f4:	20006b0c 	.word	0x20006b0c

080181f8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80181f8:	b580      	push	{r7, lr}
 80181fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80181fc:	4802      	ldr	r0, [pc, #8]	; (8018208 <OTG_FS_IRQHandler+0x10>)
 80181fe:	f001 fe37 	bl	8019e70 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8018202:	bf00      	nop
 8018204:	bd80      	pop	{r7, pc}
 8018206:	bf00      	nop
 8018208:	2000710c 	.word	0x2000710c

0801820c <_sbrk>:
 801820c:	b580      	push	{r7, lr}
 801820e:	b086      	sub	sp, #24
 8018210:	af00      	add	r7, sp, #0
 8018212:	6078      	str	r0, [r7, #4]
 8018214:	4a14      	ldr	r2, [pc, #80]	; (8018268 <_sbrk+0x5c>)
 8018216:	4b15      	ldr	r3, [pc, #84]	; (801826c <_sbrk+0x60>)
 8018218:	1ad3      	subs	r3, r2, r3
 801821a:	617b      	str	r3, [r7, #20]
 801821c:	697b      	ldr	r3, [r7, #20]
 801821e:	613b      	str	r3, [r7, #16]
 8018220:	4b13      	ldr	r3, [pc, #76]	; (8018270 <_sbrk+0x64>)
 8018222:	681b      	ldr	r3, [r3, #0]
 8018224:	2b00      	cmp	r3, #0
 8018226:	d102      	bne.n	801822e <_sbrk+0x22>
 8018228:	4b11      	ldr	r3, [pc, #68]	; (8018270 <_sbrk+0x64>)
 801822a:	4a12      	ldr	r2, [pc, #72]	; (8018274 <_sbrk+0x68>)
 801822c:	601a      	str	r2, [r3, #0]
 801822e:	4b10      	ldr	r3, [pc, #64]	; (8018270 <_sbrk+0x64>)
 8018230:	681a      	ldr	r2, [r3, #0]
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	4413      	add	r3, r2
 8018236:	693a      	ldr	r2, [r7, #16]
 8018238:	429a      	cmp	r2, r3
 801823a:	d207      	bcs.n	801824c <_sbrk+0x40>
 801823c:	f00a fcb6 	bl	8022bac <__errno>
 8018240:	4603      	mov	r3, r0
 8018242:	220c      	movs	r2, #12
 8018244:	601a      	str	r2, [r3, #0]
 8018246:	f04f 33ff 	mov.w	r3, #4294967295
 801824a:	e009      	b.n	8018260 <_sbrk+0x54>
 801824c:	4b08      	ldr	r3, [pc, #32]	; (8018270 <_sbrk+0x64>)
 801824e:	681b      	ldr	r3, [r3, #0]
 8018250:	60fb      	str	r3, [r7, #12]
 8018252:	4b07      	ldr	r3, [pc, #28]	; (8018270 <_sbrk+0x64>)
 8018254:	681a      	ldr	r2, [r3, #0]
 8018256:	687b      	ldr	r3, [r7, #4]
 8018258:	4413      	add	r3, r2
 801825a:	4a05      	ldr	r2, [pc, #20]	; (8018270 <_sbrk+0x64>)
 801825c:	6013      	str	r3, [r2, #0]
 801825e:	68fb      	ldr	r3, [r7, #12]
 8018260:	4618      	mov	r0, r3
 8018262:	3718      	adds	r7, #24
 8018264:	46bd      	mov	sp, r7
 8018266:	bd80      	pop	{r7, pc}
 8018268:	20020000 	.word	0x20020000
 801826c:	00000600 	.word	0x00000600
 8018270:	200007a8 	.word	0x200007a8
 8018274:	20007528 	.word	0x20007528

08018278 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8018278:	b480      	push	{r7}
 801827a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801827c:	4b06      	ldr	r3, [pc, #24]	; (8018298 <SystemInit+0x20>)
 801827e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018282:	4a05      	ldr	r2, [pc, #20]	; (8018298 <SystemInit+0x20>)
 8018284:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018288:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 801828c:	bf00      	nop
 801828e:	46bd      	mov	sp, r7
 8018290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018294:	4770      	bx	lr
 8018296:	bf00      	nop
 8018298:	e000ed00 	.word	0xe000ed00

0801829c <Reset_Handler>:
 801829c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80182d4 <LoopFillZerobss+0x12>
 80182a0:	480d      	ldr	r0, [pc, #52]	; (80182d8 <LoopFillZerobss+0x16>)
 80182a2:	490e      	ldr	r1, [pc, #56]	; (80182dc <LoopFillZerobss+0x1a>)
 80182a4:	4a0e      	ldr	r2, [pc, #56]	; (80182e0 <LoopFillZerobss+0x1e>)
 80182a6:	2300      	movs	r3, #0
 80182a8:	e002      	b.n	80182b0 <LoopCopyDataInit>

080182aa <CopyDataInit>:
 80182aa:	58d4      	ldr	r4, [r2, r3]
 80182ac:	50c4      	str	r4, [r0, r3]
 80182ae:	3304      	adds	r3, #4

080182b0 <LoopCopyDataInit>:
 80182b0:	18c4      	adds	r4, r0, r3
 80182b2:	428c      	cmp	r4, r1
 80182b4:	d3f9      	bcc.n	80182aa <CopyDataInit>
 80182b6:	4a0b      	ldr	r2, [pc, #44]	; (80182e4 <LoopFillZerobss+0x22>)
 80182b8:	4c0b      	ldr	r4, [pc, #44]	; (80182e8 <LoopFillZerobss+0x26>)
 80182ba:	2300      	movs	r3, #0
 80182bc:	e001      	b.n	80182c2 <LoopFillZerobss>

080182be <FillZerobss>:
 80182be:	6013      	str	r3, [r2, #0]
 80182c0:	3204      	adds	r2, #4

080182c2 <LoopFillZerobss>:
 80182c2:	42a2      	cmp	r2, r4
 80182c4:	d3fb      	bcc.n	80182be <FillZerobss>
 80182c6:	f7ff ffd7 	bl	8018278 <SystemInit>
 80182ca:	f00a fc75 	bl	8022bb8 <__libc_init_array>
 80182ce:	f7fe f85b 	bl	8016388 <main>
 80182d2:	4770      	bx	lr
 80182d4:	20020000 	.word	0x20020000
 80182d8:	20000000 	.word	0x20000000
 80182dc:	20000760 	.word	0x20000760
 80182e0:	08022e04 	.word	0x08022e04
 80182e4:	20000760 	.word	0x20000760
 80182e8:	20007524 	.word	0x20007524

080182ec <ADC_IRQHandler>:
 80182ec:	e7fe      	b.n	80182ec <ADC_IRQHandler>
	...

080182f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80182f0:	b580      	push	{r7, lr}
 80182f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80182f4:	4b0e      	ldr	r3, [pc, #56]	; (8018330 <HAL_Init+0x40>)
 80182f6:	681b      	ldr	r3, [r3, #0]
 80182f8:	4a0d      	ldr	r2, [pc, #52]	; (8018330 <HAL_Init+0x40>)
 80182fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80182fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8018300:	4b0b      	ldr	r3, [pc, #44]	; (8018330 <HAL_Init+0x40>)
 8018302:	681b      	ldr	r3, [r3, #0]
 8018304:	4a0a      	ldr	r2, [pc, #40]	; (8018330 <HAL_Init+0x40>)
 8018306:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801830a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801830c:	4b08      	ldr	r3, [pc, #32]	; (8018330 <HAL_Init+0x40>)
 801830e:	681b      	ldr	r3, [r3, #0]
 8018310:	4a07      	ldr	r2, [pc, #28]	; (8018330 <HAL_Init+0x40>)
 8018312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8018316:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8018318:	2003      	movs	r0, #3
 801831a:	f000 fbc1 	bl	8018aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801831e:	2000      	movs	r0, #0
 8018320:	f000 f808 	bl	8018334 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8018324:	f7ff fcc8 	bl	8017cb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8018328:	2300      	movs	r3, #0
}
 801832a:	4618      	mov	r0, r3
 801832c:	bd80      	pop	{r7, pc}
 801832e:	bf00      	nop
 8018330:	40023c00 	.word	0x40023c00

08018334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8018334:	b580      	push	{r7, lr}
 8018336:	b082      	sub	sp, #8
 8018338:	af00      	add	r7, sp, #0
 801833a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 801833c:	4b12      	ldr	r3, [pc, #72]	; (8018388 <HAL_InitTick+0x54>)
 801833e:	681a      	ldr	r2, [r3, #0]
 8018340:	4b12      	ldr	r3, [pc, #72]	; (801838c <HAL_InitTick+0x58>)
 8018342:	781b      	ldrb	r3, [r3, #0]
 8018344:	4619      	mov	r1, r3
 8018346:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801834a:	fbb3 f3f1 	udiv	r3, r3, r1
 801834e:	fbb2 f3f3 	udiv	r3, r2, r3
 8018352:	4618      	mov	r0, r3
 8018354:	f000 fbd9 	bl	8018b0a <HAL_SYSTICK_Config>
 8018358:	4603      	mov	r3, r0
 801835a:	2b00      	cmp	r3, #0
 801835c:	d001      	beq.n	8018362 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 801835e:	2301      	movs	r3, #1
 8018360:	e00e      	b.n	8018380 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	2b0f      	cmp	r3, #15
 8018366:	d80a      	bhi.n	801837e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8018368:	2200      	movs	r2, #0
 801836a:	6879      	ldr	r1, [r7, #4]
 801836c:	f04f 30ff 	mov.w	r0, #4294967295
 8018370:	f000 fba1 	bl	8018ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8018374:	4a06      	ldr	r2, [pc, #24]	; (8018390 <HAL_InitTick+0x5c>)
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801837a:	2300      	movs	r3, #0
 801837c:	e000      	b.n	8018380 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 801837e:	2301      	movs	r3, #1
}
 8018380:	4618      	mov	r0, r3
 8018382:	3708      	adds	r7, #8
 8018384:	46bd      	mov	sp, r7
 8018386:	bd80      	pop	{r7, pc}
 8018388:	20000588 	.word	0x20000588
 801838c:	20000590 	.word	0x20000590
 8018390:	2000058c 	.word	0x2000058c

08018394 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8018394:	b480      	push	{r7}
 8018396:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8018398:	4b06      	ldr	r3, [pc, #24]	; (80183b4 <HAL_IncTick+0x20>)
 801839a:	781b      	ldrb	r3, [r3, #0]
 801839c:	461a      	mov	r2, r3
 801839e:	4b06      	ldr	r3, [pc, #24]	; (80183b8 <HAL_IncTick+0x24>)
 80183a0:	681b      	ldr	r3, [r3, #0]
 80183a2:	4413      	add	r3, r2
 80183a4:	4a04      	ldr	r2, [pc, #16]	; (80183b8 <HAL_IncTick+0x24>)
 80183a6:	6013      	str	r3, [r2, #0]
}
 80183a8:	bf00      	nop
 80183aa:	46bd      	mov	sp, r7
 80183ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183b0:	4770      	bx	lr
 80183b2:	bf00      	nop
 80183b4:	20000590 	.word	0x20000590
 80183b8:	20006c18 	.word	0x20006c18

080183bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80183bc:	b480      	push	{r7}
 80183be:	af00      	add	r7, sp, #0
  return uwTick;
 80183c0:	4b03      	ldr	r3, [pc, #12]	; (80183d0 <HAL_GetTick+0x14>)
 80183c2:	681b      	ldr	r3, [r3, #0]
}
 80183c4:	4618      	mov	r0, r3
 80183c6:	46bd      	mov	sp, r7
 80183c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183cc:	4770      	bx	lr
 80183ce:	bf00      	nop
 80183d0:	20006c18 	.word	0x20006c18

080183d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80183d4:	b580      	push	{r7, lr}
 80183d6:	b084      	sub	sp, #16
 80183d8:	af00      	add	r7, sp, #0
 80183da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80183dc:	f7ff ffee 	bl	80183bc <HAL_GetTick>
 80183e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80183e6:	68fb      	ldr	r3, [r7, #12]
 80183e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80183ec:	d005      	beq.n	80183fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80183ee:	4b0a      	ldr	r3, [pc, #40]	; (8018418 <HAL_Delay+0x44>)
 80183f0:	781b      	ldrb	r3, [r3, #0]
 80183f2:	461a      	mov	r2, r3
 80183f4:	68fb      	ldr	r3, [r7, #12]
 80183f6:	4413      	add	r3, r2
 80183f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80183fa:	bf00      	nop
 80183fc:	f7ff ffde 	bl	80183bc <HAL_GetTick>
 8018400:	4602      	mov	r2, r0
 8018402:	68bb      	ldr	r3, [r7, #8]
 8018404:	1ad3      	subs	r3, r2, r3
 8018406:	68fa      	ldr	r2, [r7, #12]
 8018408:	429a      	cmp	r2, r3
 801840a:	d8f7      	bhi.n	80183fc <HAL_Delay+0x28>
  {
  }
}
 801840c:	bf00      	nop
 801840e:	bf00      	nop
 8018410:	3710      	adds	r7, #16
 8018412:	46bd      	mov	sp, r7
 8018414:	bd80      	pop	{r7, pc}
 8018416:	bf00      	nop
 8018418:	20000590 	.word	0x20000590

0801841c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 801841c:	b580      	push	{r7, lr}
 801841e:	b084      	sub	sp, #16
 8018420:	af00      	add	r7, sp, #0
 8018422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8018424:	2300      	movs	r3, #0
 8018426:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	2b00      	cmp	r3, #0
 801842c:	d101      	bne.n	8018432 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 801842e:	2301      	movs	r3, #1
 8018430:	e033      	b.n	801849a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018436:	2b00      	cmp	r3, #0
 8018438:	d109      	bne.n	801844e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 801843a:	6878      	ldr	r0, [r7, #4]
 801843c:	f7ff fc64 	bl	8017d08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	2200      	movs	r2, #0
 8018444:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	2200      	movs	r2, #0
 801844a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 801844e:	687b      	ldr	r3, [r7, #4]
 8018450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018452:	f003 0310 	and.w	r3, r3, #16
 8018456:	2b00      	cmp	r3, #0
 8018458:	d118      	bne.n	801848c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801845e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8018462:	f023 0302 	bic.w	r3, r3, #2
 8018466:	f043 0202 	orr.w	r2, r3, #2
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 801846e:	6878      	ldr	r0, [r7, #4]
 8018470:	f000 f94a 	bl	8018708 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8018474:	687b      	ldr	r3, [r7, #4]
 8018476:	2200      	movs	r2, #0
 8018478:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801847e:	f023 0303 	bic.w	r3, r3, #3
 8018482:	f043 0201 	orr.w	r2, r3, #1
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	641a      	str	r2, [r3, #64]	; 0x40
 801848a:	e001      	b.n	8018490 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 801848c:	2301      	movs	r3, #1
 801848e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	2200      	movs	r2, #0
 8018494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8018498:	7bfb      	ldrb	r3, [r7, #15]
}
 801849a:	4618      	mov	r0, r3
 801849c:	3710      	adds	r7, #16
 801849e:	46bd      	mov	sp, r7
 80184a0:	bd80      	pop	{r7, pc}
	...

080184a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80184a4:	b480      	push	{r7}
 80184a6:	b085      	sub	sp, #20
 80184a8:	af00      	add	r7, sp, #0
 80184aa:	6078      	str	r0, [r7, #4]
 80184ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80184ae:	2300      	movs	r3, #0
 80184b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80184b2:	687b      	ldr	r3, [r7, #4]
 80184b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80184b8:	2b01      	cmp	r3, #1
 80184ba:	d101      	bne.n	80184c0 <HAL_ADC_ConfigChannel+0x1c>
 80184bc:	2302      	movs	r3, #2
 80184be:	e113      	b.n	80186e8 <HAL_ADC_ConfigChannel+0x244>
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	2201      	movs	r2, #1
 80184c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80184c8:	683b      	ldr	r3, [r7, #0]
 80184ca:	681b      	ldr	r3, [r3, #0]
 80184cc:	2b09      	cmp	r3, #9
 80184ce:	d925      	bls.n	801851c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80184d0:	687b      	ldr	r3, [r7, #4]
 80184d2:	681b      	ldr	r3, [r3, #0]
 80184d4:	68d9      	ldr	r1, [r3, #12]
 80184d6:	683b      	ldr	r3, [r7, #0]
 80184d8:	681b      	ldr	r3, [r3, #0]
 80184da:	b29b      	uxth	r3, r3
 80184dc:	461a      	mov	r2, r3
 80184de:	4613      	mov	r3, r2
 80184e0:	005b      	lsls	r3, r3, #1
 80184e2:	4413      	add	r3, r2
 80184e4:	3b1e      	subs	r3, #30
 80184e6:	2207      	movs	r2, #7
 80184e8:	fa02 f303 	lsl.w	r3, r2, r3
 80184ec:	43da      	mvns	r2, r3
 80184ee:	687b      	ldr	r3, [r7, #4]
 80184f0:	681b      	ldr	r3, [r3, #0]
 80184f2:	400a      	ands	r2, r1
 80184f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80184f6:	687b      	ldr	r3, [r7, #4]
 80184f8:	681b      	ldr	r3, [r3, #0]
 80184fa:	68d9      	ldr	r1, [r3, #12]
 80184fc:	683b      	ldr	r3, [r7, #0]
 80184fe:	689a      	ldr	r2, [r3, #8]
 8018500:	683b      	ldr	r3, [r7, #0]
 8018502:	681b      	ldr	r3, [r3, #0]
 8018504:	b29b      	uxth	r3, r3
 8018506:	4618      	mov	r0, r3
 8018508:	4603      	mov	r3, r0
 801850a:	005b      	lsls	r3, r3, #1
 801850c:	4403      	add	r3, r0
 801850e:	3b1e      	subs	r3, #30
 8018510:	409a      	lsls	r2, r3
 8018512:	687b      	ldr	r3, [r7, #4]
 8018514:	681b      	ldr	r3, [r3, #0]
 8018516:	430a      	orrs	r2, r1
 8018518:	60da      	str	r2, [r3, #12]
 801851a:	e022      	b.n	8018562 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	681b      	ldr	r3, [r3, #0]
 8018520:	6919      	ldr	r1, [r3, #16]
 8018522:	683b      	ldr	r3, [r7, #0]
 8018524:	681b      	ldr	r3, [r3, #0]
 8018526:	b29b      	uxth	r3, r3
 8018528:	461a      	mov	r2, r3
 801852a:	4613      	mov	r3, r2
 801852c:	005b      	lsls	r3, r3, #1
 801852e:	4413      	add	r3, r2
 8018530:	2207      	movs	r2, #7
 8018532:	fa02 f303 	lsl.w	r3, r2, r3
 8018536:	43da      	mvns	r2, r3
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	681b      	ldr	r3, [r3, #0]
 801853c:	400a      	ands	r2, r1
 801853e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8018540:	687b      	ldr	r3, [r7, #4]
 8018542:	681b      	ldr	r3, [r3, #0]
 8018544:	6919      	ldr	r1, [r3, #16]
 8018546:	683b      	ldr	r3, [r7, #0]
 8018548:	689a      	ldr	r2, [r3, #8]
 801854a:	683b      	ldr	r3, [r7, #0]
 801854c:	681b      	ldr	r3, [r3, #0]
 801854e:	b29b      	uxth	r3, r3
 8018550:	4618      	mov	r0, r3
 8018552:	4603      	mov	r3, r0
 8018554:	005b      	lsls	r3, r3, #1
 8018556:	4403      	add	r3, r0
 8018558:	409a      	lsls	r2, r3
 801855a:	687b      	ldr	r3, [r7, #4]
 801855c:	681b      	ldr	r3, [r3, #0]
 801855e:	430a      	orrs	r2, r1
 8018560:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8018562:	683b      	ldr	r3, [r7, #0]
 8018564:	685b      	ldr	r3, [r3, #4]
 8018566:	2b06      	cmp	r3, #6
 8018568:	d824      	bhi.n	80185b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 801856a:	687b      	ldr	r3, [r7, #4]
 801856c:	681b      	ldr	r3, [r3, #0]
 801856e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8018570:	683b      	ldr	r3, [r7, #0]
 8018572:	685a      	ldr	r2, [r3, #4]
 8018574:	4613      	mov	r3, r2
 8018576:	009b      	lsls	r3, r3, #2
 8018578:	4413      	add	r3, r2
 801857a:	3b05      	subs	r3, #5
 801857c:	221f      	movs	r2, #31
 801857e:	fa02 f303 	lsl.w	r3, r2, r3
 8018582:	43da      	mvns	r2, r3
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	681b      	ldr	r3, [r3, #0]
 8018588:	400a      	ands	r2, r1
 801858a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	681b      	ldr	r3, [r3, #0]
 8018590:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8018592:	683b      	ldr	r3, [r7, #0]
 8018594:	681b      	ldr	r3, [r3, #0]
 8018596:	b29b      	uxth	r3, r3
 8018598:	4618      	mov	r0, r3
 801859a:	683b      	ldr	r3, [r7, #0]
 801859c:	685a      	ldr	r2, [r3, #4]
 801859e:	4613      	mov	r3, r2
 80185a0:	009b      	lsls	r3, r3, #2
 80185a2:	4413      	add	r3, r2
 80185a4:	3b05      	subs	r3, #5
 80185a6:	fa00 f203 	lsl.w	r2, r0, r3
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	681b      	ldr	r3, [r3, #0]
 80185ae:	430a      	orrs	r2, r1
 80185b0:	635a      	str	r2, [r3, #52]	; 0x34
 80185b2:	e04c      	b.n	801864e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80185b4:	683b      	ldr	r3, [r7, #0]
 80185b6:	685b      	ldr	r3, [r3, #4]
 80185b8:	2b0c      	cmp	r3, #12
 80185ba:	d824      	bhi.n	8018606 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	681b      	ldr	r3, [r3, #0]
 80185c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80185c2:	683b      	ldr	r3, [r7, #0]
 80185c4:	685a      	ldr	r2, [r3, #4]
 80185c6:	4613      	mov	r3, r2
 80185c8:	009b      	lsls	r3, r3, #2
 80185ca:	4413      	add	r3, r2
 80185cc:	3b23      	subs	r3, #35	; 0x23
 80185ce:	221f      	movs	r2, #31
 80185d0:	fa02 f303 	lsl.w	r3, r2, r3
 80185d4:	43da      	mvns	r2, r3
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	681b      	ldr	r3, [r3, #0]
 80185da:	400a      	ands	r2, r1
 80185dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	681b      	ldr	r3, [r3, #0]
 80185e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80185e4:	683b      	ldr	r3, [r7, #0]
 80185e6:	681b      	ldr	r3, [r3, #0]
 80185e8:	b29b      	uxth	r3, r3
 80185ea:	4618      	mov	r0, r3
 80185ec:	683b      	ldr	r3, [r7, #0]
 80185ee:	685a      	ldr	r2, [r3, #4]
 80185f0:	4613      	mov	r3, r2
 80185f2:	009b      	lsls	r3, r3, #2
 80185f4:	4413      	add	r3, r2
 80185f6:	3b23      	subs	r3, #35	; 0x23
 80185f8:	fa00 f203 	lsl.w	r2, r0, r3
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	681b      	ldr	r3, [r3, #0]
 8018600:	430a      	orrs	r2, r1
 8018602:	631a      	str	r2, [r3, #48]	; 0x30
 8018604:	e023      	b.n	801864e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	681b      	ldr	r3, [r3, #0]
 801860a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801860c:	683b      	ldr	r3, [r7, #0]
 801860e:	685a      	ldr	r2, [r3, #4]
 8018610:	4613      	mov	r3, r2
 8018612:	009b      	lsls	r3, r3, #2
 8018614:	4413      	add	r3, r2
 8018616:	3b41      	subs	r3, #65	; 0x41
 8018618:	221f      	movs	r2, #31
 801861a:	fa02 f303 	lsl.w	r3, r2, r3
 801861e:	43da      	mvns	r2, r3
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	681b      	ldr	r3, [r3, #0]
 8018624:	400a      	ands	r2, r1
 8018626:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	681b      	ldr	r3, [r3, #0]
 801862c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801862e:	683b      	ldr	r3, [r7, #0]
 8018630:	681b      	ldr	r3, [r3, #0]
 8018632:	b29b      	uxth	r3, r3
 8018634:	4618      	mov	r0, r3
 8018636:	683b      	ldr	r3, [r7, #0]
 8018638:	685a      	ldr	r2, [r3, #4]
 801863a:	4613      	mov	r3, r2
 801863c:	009b      	lsls	r3, r3, #2
 801863e:	4413      	add	r3, r2
 8018640:	3b41      	subs	r3, #65	; 0x41
 8018642:	fa00 f203 	lsl.w	r2, r0, r3
 8018646:	687b      	ldr	r3, [r7, #4]
 8018648:	681b      	ldr	r3, [r3, #0]
 801864a:	430a      	orrs	r2, r1
 801864c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801864e:	4b29      	ldr	r3, [pc, #164]	; (80186f4 <HAL_ADC_ConfigChannel+0x250>)
 8018650:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8018652:	687b      	ldr	r3, [r7, #4]
 8018654:	681b      	ldr	r3, [r3, #0]
 8018656:	4a28      	ldr	r2, [pc, #160]	; (80186f8 <HAL_ADC_ConfigChannel+0x254>)
 8018658:	4293      	cmp	r3, r2
 801865a:	d10f      	bne.n	801867c <HAL_ADC_ConfigChannel+0x1d8>
 801865c:	683b      	ldr	r3, [r7, #0]
 801865e:	681b      	ldr	r3, [r3, #0]
 8018660:	2b12      	cmp	r3, #18
 8018662:	d10b      	bne.n	801867c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8018664:	68fb      	ldr	r3, [r7, #12]
 8018666:	685b      	ldr	r3, [r3, #4]
 8018668:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 801866c:	68fb      	ldr	r3, [r7, #12]
 801866e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8018670:	68fb      	ldr	r3, [r7, #12]
 8018672:	685b      	ldr	r3, [r3, #4]
 8018674:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8018678:	68fb      	ldr	r3, [r7, #12]
 801867a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	681b      	ldr	r3, [r3, #0]
 8018680:	4a1d      	ldr	r2, [pc, #116]	; (80186f8 <HAL_ADC_ConfigChannel+0x254>)
 8018682:	4293      	cmp	r3, r2
 8018684:	d12b      	bne.n	80186de <HAL_ADC_ConfigChannel+0x23a>
 8018686:	683b      	ldr	r3, [r7, #0]
 8018688:	681b      	ldr	r3, [r3, #0]
 801868a:	4a1c      	ldr	r2, [pc, #112]	; (80186fc <HAL_ADC_ConfigChannel+0x258>)
 801868c:	4293      	cmp	r3, r2
 801868e:	d003      	beq.n	8018698 <HAL_ADC_ConfigChannel+0x1f4>
 8018690:	683b      	ldr	r3, [r7, #0]
 8018692:	681b      	ldr	r3, [r3, #0]
 8018694:	2b11      	cmp	r3, #17
 8018696:	d122      	bne.n	80186de <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8018698:	68fb      	ldr	r3, [r7, #12]
 801869a:	685b      	ldr	r3, [r3, #4]
 801869c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80186a0:	68fb      	ldr	r3, [r7, #12]
 80186a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80186a4:	68fb      	ldr	r3, [r7, #12]
 80186a6:	685b      	ldr	r3, [r3, #4]
 80186a8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80186ac:	68fb      	ldr	r3, [r7, #12]
 80186ae:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80186b0:	683b      	ldr	r3, [r7, #0]
 80186b2:	681b      	ldr	r3, [r3, #0]
 80186b4:	4a11      	ldr	r2, [pc, #68]	; (80186fc <HAL_ADC_ConfigChannel+0x258>)
 80186b6:	4293      	cmp	r3, r2
 80186b8:	d111      	bne.n	80186de <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80186ba:	4b11      	ldr	r3, [pc, #68]	; (8018700 <HAL_ADC_ConfigChannel+0x25c>)
 80186bc:	681b      	ldr	r3, [r3, #0]
 80186be:	4a11      	ldr	r2, [pc, #68]	; (8018704 <HAL_ADC_ConfigChannel+0x260>)
 80186c0:	fba2 2303 	umull	r2, r3, r2, r3
 80186c4:	0c9a      	lsrs	r2, r3, #18
 80186c6:	4613      	mov	r3, r2
 80186c8:	009b      	lsls	r3, r3, #2
 80186ca:	4413      	add	r3, r2
 80186cc:	005b      	lsls	r3, r3, #1
 80186ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80186d0:	e002      	b.n	80186d8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80186d2:	68bb      	ldr	r3, [r7, #8]
 80186d4:	3b01      	subs	r3, #1
 80186d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80186d8:	68bb      	ldr	r3, [r7, #8]
 80186da:	2b00      	cmp	r3, #0
 80186dc:	d1f9      	bne.n	80186d2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80186de:	687b      	ldr	r3, [r7, #4]
 80186e0:	2200      	movs	r2, #0
 80186e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80186e6:	2300      	movs	r3, #0
}
 80186e8:	4618      	mov	r0, r3
 80186ea:	3714      	adds	r7, #20
 80186ec:	46bd      	mov	sp, r7
 80186ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186f2:	4770      	bx	lr
 80186f4:	40012300 	.word	0x40012300
 80186f8:	40012000 	.word	0x40012000
 80186fc:	10000012 	.word	0x10000012
 8018700:	20000588 	.word	0x20000588
 8018704:	431bde83 	.word	0x431bde83

08018708 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8018708:	b480      	push	{r7}
 801870a:	b085      	sub	sp, #20
 801870c:	af00      	add	r7, sp, #0
 801870e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8018710:	4b79      	ldr	r3, [pc, #484]	; (80188f8 <ADC_Init+0x1f0>)
 8018712:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8018714:	68fb      	ldr	r3, [r7, #12]
 8018716:	685b      	ldr	r3, [r3, #4]
 8018718:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801871c:	68fb      	ldr	r3, [r7, #12]
 801871e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8018720:	68fb      	ldr	r3, [r7, #12]
 8018722:	685a      	ldr	r2, [r3, #4]
 8018724:	687b      	ldr	r3, [r7, #4]
 8018726:	685b      	ldr	r3, [r3, #4]
 8018728:	431a      	orrs	r2, r3
 801872a:	68fb      	ldr	r3, [r7, #12]
 801872c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 801872e:	687b      	ldr	r3, [r7, #4]
 8018730:	681b      	ldr	r3, [r3, #0]
 8018732:	685a      	ldr	r2, [r3, #4]
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	681b      	ldr	r3, [r3, #0]
 8018738:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801873c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 801873e:	687b      	ldr	r3, [r7, #4]
 8018740:	681b      	ldr	r3, [r3, #0]
 8018742:	6859      	ldr	r1, [r3, #4]
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	691b      	ldr	r3, [r3, #16]
 8018748:	021a      	lsls	r2, r3, #8
 801874a:	687b      	ldr	r3, [r7, #4]
 801874c:	681b      	ldr	r3, [r3, #0]
 801874e:	430a      	orrs	r2, r1
 8018750:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	681b      	ldr	r3, [r3, #0]
 8018756:	685a      	ldr	r2, [r3, #4]
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	681b      	ldr	r3, [r3, #0]
 801875c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8018760:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	681b      	ldr	r3, [r3, #0]
 8018766:	6859      	ldr	r1, [r3, #4]
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	689a      	ldr	r2, [r3, #8]
 801876c:	687b      	ldr	r3, [r7, #4]
 801876e:	681b      	ldr	r3, [r3, #0]
 8018770:	430a      	orrs	r2, r1
 8018772:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	681b      	ldr	r3, [r3, #0]
 8018778:	689a      	ldr	r2, [r3, #8]
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	681b      	ldr	r3, [r3, #0]
 801877e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8018782:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	681b      	ldr	r3, [r3, #0]
 8018788:	6899      	ldr	r1, [r3, #8]
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	68da      	ldr	r2, [r3, #12]
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	681b      	ldr	r3, [r3, #0]
 8018792:	430a      	orrs	r2, r1
 8018794:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8018796:	687b      	ldr	r3, [r7, #4]
 8018798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801879a:	4a58      	ldr	r2, [pc, #352]	; (80188fc <ADC_Init+0x1f4>)
 801879c:	4293      	cmp	r3, r2
 801879e:	d022      	beq.n	80187e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80187a0:	687b      	ldr	r3, [r7, #4]
 80187a2:	681b      	ldr	r3, [r3, #0]
 80187a4:	689a      	ldr	r2, [r3, #8]
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	681b      	ldr	r3, [r3, #0]
 80187aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80187ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80187b0:	687b      	ldr	r3, [r7, #4]
 80187b2:	681b      	ldr	r3, [r3, #0]
 80187b4:	6899      	ldr	r1, [r3, #8]
 80187b6:	687b      	ldr	r3, [r7, #4]
 80187b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80187ba:	687b      	ldr	r3, [r7, #4]
 80187bc:	681b      	ldr	r3, [r3, #0]
 80187be:	430a      	orrs	r2, r1
 80187c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	681b      	ldr	r3, [r3, #0]
 80187c6:	689a      	ldr	r2, [r3, #8]
 80187c8:	687b      	ldr	r3, [r7, #4]
 80187ca:	681b      	ldr	r3, [r3, #0]
 80187cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80187d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	681b      	ldr	r3, [r3, #0]
 80187d6:	6899      	ldr	r1, [r3, #8]
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	681b      	ldr	r3, [r3, #0]
 80187e0:	430a      	orrs	r2, r1
 80187e2:	609a      	str	r2, [r3, #8]
 80187e4:	e00f      	b.n	8018806 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	681b      	ldr	r3, [r3, #0]
 80187ea:	689a      	ldr	r2, [r3, #8]
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	681b      	ldr	r3, [r3, #0]
 80187f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80187f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80187f6:	687b      	ldr	r3, [r7, #4]
 80187f8:	681b      	ldr	r3, [r3, #0]
 80187fa:	689a      	ldr	r2, [r3, #8]
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	681b      	ldr	r3, [r3, #0]
 8018800:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8018804:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8018806:	687b      	ldr	r3, [r7, #4]
 8018808:	681b      	ldr	r3, [r3, #0]
 801880a:	689a      	ldr	r2, [r3, #8]
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	681b      	ldr	r3, [r3, #0]
 8018810:	f022 0202 	bic.w	r2, r2, #2
 8018814:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8018816:	687b      	ldr	r3, [r7, #4]
 8018818:	681b      	ldr	r3, [r3, #0]
 801881a:	6899      	ldr	r1, [r3, #8]
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	7e1b      	ldrb	r3, [r3, #24]
 8018820:	005a      	lsls	r2, r3, #1
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	681b      	ldr	r3, [r3, #0]
 8018826:	430a      	orrs	r2, r1
 8018828:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8018830:	2b00      	cmp	r3, #0
 8018832:	d01b      	beq.n	801886c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	681b      	ldr	r3, [r3, #0]
 8018838:	685a      	ldr	r2, [r3, #4]
 801883a:	687b      	ldr	r3, [r7, #4]
 801883c:	681b      	ldr	r3, [r3, #0]
 801883e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8018842:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	681b      	ldr	r3, [r3, #0]
 8018848:	685a      	ldr	r2, [r3, #4]
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	681b      	ldr	r3, [r3, #0]
 801884e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8018852:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	681b      	ldr	r3, [r3, #0]
 8018858:	6859      	ldr	r1, [r3, #4]
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801885e:	3b01      	subs	r3, #1
 8018860:	035a      	lsls	r2, r3, #13
 8018862:	687b      	ldr	r3, [r7, #4]
 8018864:	681b      	ldr	r3, [r3, #0]
 8018866:	430a      	orrs	r2, r1
 8018868:	605a      	str	r2, [r3, #4]
 801886a:	e007      	b.n	801887c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	681b      	ldr	r3, [r3, #0]
 8018870:	685a      	ldr	r2, [r3, #4]
 8018872:	687b      	ldr	r3, [r7, #4]
 8018874:	681b      	ldr	r3, [r3, #0]
 8018876:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801887a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	681b      	ldr	r3, [r3, #0]
 8018880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	681b      	ldr	r3, [r3, #0]
 8018886:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 801888a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	681b      	ldr	r3, [r3, #0]
 8018890:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	69db      	ldr	r3, [r3, #28]
 8018896:	3b01      	subs	r3, #1
 8018898:	051a      	lsls	r2, r3, #20
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	681b      	ldr	r3, [r3, #0]
 801889e:	430a      	orrs	r2, r1
 80188a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80188a2:	687b      	ldr	r3, [r7, #4]
 80188a4:	681b      	ldr	r3, [r3, #0]
 80188a6:	689a      	ldr	r2, [r3, #8]
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	681b      	ldr	r3, [r3, #0]
 80188ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80188b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	681b      	ldr	r3, [r3, #0]
 80188b6:	6899      	ldr	r1, [r3, #8]
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80188be:	025a      	lsls	r2, r3, #9
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	681b      	ldr	r3, [r3, #0]
 80188c4:	430a      	orrs	r2, r1
 80188c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	681b      	ldr	r3, [r3, #0]
 80188cc:	689a      	ldr	r2, [r3, #8]
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	681b      	ldr	r3, [r3, #0]
 80188d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80188d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	681b      	ldr	r3, [r3, #0]
 80188dc:	6899      	ldr	r1, [r3, #8]
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	695b      	ldr	r3, [r3, #20]
 80188e2:	029a      	lsls	r2, r3, #10
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	681b      	ldr	r3, [r3, #0]
 80188e8:	430a      	orrs	r2, r1
 80188ea:	609a      	str	r2, [r3, #8]
}
 80188ec:	bf00      	nop
 80188ee:	3714      	adds	r7, #20
 80188f0:	46bd      	mov	sp, r7
 80188f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188f6:	4770      	bx	lr
 80188f8:	40012300 	.word	0x40012300
 80188fc:	0f000001 	.word	0x0f000001

08018900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8018900:	b480      	push	{r7}
 8018902:	b085      	sub	sp, #20
 8018904:	af00      	add	r7, sp, #0
 8018906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	f003 0307 	and.w	r3, r3, #7
 801890e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8018910:	4b0c      	ldr	r3, [pc, #48]	; (8018944 <__NVIC_SetPriorityGrouping+0x44>)
 8018912:	68db      	ldr	r3, [r3, #12]
 8018914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8018916:	68ba      	ldr	r2, [r7, #8]
 8018918:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801891c:	4013      	ands	r3, r2
 801891e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8018920:	68fb      	ldr	r3, [r7, #12]
 8018922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8018924:	68bb      	ldr	r3, [r7, #8]
 8018926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8018928:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801892c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8018930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8018932:	4a04      	ldr	r2, [pc, #16]	; (8018944 <__NVIC_SetPriorityGrouping+0x44>)
 8018934:	68bb      	ldr	r3, [r7, #8]
 8018936:	60d3      	str	r3, [r2, #12]
}
 8018938:	bf00      	nop
 801893a:	3714      	adds	r7, #20
 801893c:	46bd      	mov	sp, r7
 801893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018942:	4770      	bx	lr
 8018944:	e000ed00 	.word	0xe000ed00

08018948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8018948:	b480      	push	{r7}
 801894a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801894c:	4b04      	ldr	r3, [pc, #16]	; (8018960 <__NVIC_GetPriorityGrouping+0x18>)
 801894e:	68db      	ldr	r3, [r3, #12]
 8018950:	0a1b      	lsrs	r3, r3, #8
 8018952:	f003 0307 	and.w	r3, r3, #7
}
 8018956:	4618      	mov	r0, r3
 8018958:	46bd      	mov	sp, r7
 801895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801895e:	4770      	bx	lr
 8018960:	e000ed00 	.word	0xe000ed00

08018964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8018964:	b480      	push	{r7}
 8018966:	b083      	sub	sp, #12
 8018968:	af00      	add	r7, sp, #0
 801896a:	4603      	mov	r3, r0
 801896c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801896e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018972:	2b00      	cmp	r3, #0
 8018974:	db0b      	blt.n	801898e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8018976:	79fb      	ldrb	r3, [r7, #7]
 8018978:	f003 021f 	and.w	r2, r3, #31
 801897c:	4907      	ldr	r1, [pc, #28]	; (801899c <__NVIC_EnableIRQ+0x38>)
 801897e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018982:	095b      	lsrs	r3, r3, #5
 8018984:	2001      	movs	r0, #1
 8018986:	fa00 f202 	lsl.w	r2, r0, r2
 801898a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 801898e:	bf00      	nop
 8018990:	370c      	adds	r7, #12
 8018992:	46bd      	mov	sp, r7
 8018994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018998:	4770      	bx	lr
 801899a:	bf00      	nop
 801899c:	e000e100 	.word	0xe000e100

080189a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80189a0:	b480      	push	{r7}
 80189a2:	b083      	sub	sp, #12
 80189a4:	af00      	add	r7, sp, #0
 80189a6:	4603      	mov	r3, r0
 80189a8:	6039      	str	r1, [r7, #0]
 80189aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80189ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80189b0:	2b00      	cmp	r3, #0
 80189b2:	db0a      	blt.n	80189ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80189b4:	683b      	ldr	r3, [r7, #0]
 80189b6:	b2da      	uxtb	r2, r3
 80189b8:	490c      	ldr	r1, [pc, #48]	; (80189ec <__NVIC_SetPriority+0x4c>)
 80189ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80189be:	0112      	lsls	r2, r2, #4
 80189c0:	b2d2      	uxtb	r2, r2
 80189c2:	440b      	add	r3, r1
 80189c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80189c8:	e00a      	b.n	80189e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80189ca:	683b      	ldr	r3, [r7, #0]
 80189cc:	b2da      	uxtb	r2, r3
 80189ce:	4908      	ldr	r1, [pc, #32]	; (80189f0 <__NVIC_SetPriority+0x50>)
 80189d0:	79fb      	ldrb	r3, [r7, #7]
 80189d2:	f003 030f 	and.w	r3, r3, #15
 80189d6:	3b04      	subs	r3, #4
 80189d8:	0112      	lsls	r2, r2, #4
 80189da:	b2d2      	uxtb	r2, r2
 80189dc:	440b      	add	r3, r1
 80189de:	761a      	strb	r2, [r3, #24]
}
 80189e0:	bf00      	nop
 80189e2:	370c      	adds	r7, #12
 80189e4:	46bd      	mov	sp, r7
 80189e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189ea:	4770      	bx	lr
 80189ec:	e000e100 	.word	0xe000e100
 80189f0:	e000ed00 	.word	0xe000ed00

080189f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80189f4:	b480      	push	{r7}
 80189f6:	b089      	sub	sp, #36	; 0x24
 80189f8:	af00      	add	r7, sp, #0
 80189fa:	60f8      	str	r0, [r7, #12]
 80189fc:	60b9      	str	r1, [r7, #8]
 80189fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8018a00:	68fb      	ldr	r3, [r7, #12]
 8018a02:	f003 0307 	and.w	r3, r3, #7
 8018a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8018a08:	69fb      	ldr	r3, [r7, #28]
 8018a0a:	f1c3 0307 	rsb	r3, r3, #7
 8018a0e:	2b04      	cmp	r3, #4
 8018a10:	bf28      	it	cs
 8018a12:	2304      	movcs	r3, #4
 8018a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8018a16:	69fb      	ldr	r3, [r7, #28]
 8018a18:	3304      	adds	r3, #4
 8018a1a:	2b06      	cmp	r3, #6
 8018a1c:	d902      	bls.n	8018a24 <NVIC_EncodePriority+0x30>
 8018a1e:	69fb      	ldr	r3, [r7, #28]
 8018a20:	3b03      	subs	r3, #3
 8018a22:	e000      	b.n	8018a26 <NVIC_EncodePriority+0x32>
 8018a24:	2300      	movs	r3, #0
 8018a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8018a28:	f04f 32ff 	mov.w	r2, #4294967295
 8018a2c:	69bb      	ldr	r3, [r7, #24]
 8018a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8018a32:	43da      	mvns	r2, r3
 8018a34:	68bb      	ldr	r3, [r7, #8]
 8018a36:	401a      	ands	r2, r3
 8018a38:	697b      	ldr	r3, [r7, #20]
 8018a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8018a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8018a40:	697b      	ldr	r3, [r7, #20]
 8018a42:	fa01 f303 	lsl.w	r3, r1, r3
 8018a46:	43d9      	mvns	r1, r3
 8018a48:	687b      	ldr	r3, [r7, #4]
 8018a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8018a4c:	4313      	orrs	r3, r2
         );
}
 8018a4e:	4618      	mov	r0, r3
 8018a50:	3724      	adds	r7, #36	; 0x24
 8018a52:	46bd      	mov	sp, r7
 8018a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a58:	4770      	bx	lr
	...

08018a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8018a5c:	b580      	push	{r7, lr}
 8018a5e:	b082      	sub	sp, #8
 8018a60:	af00      	add	r7, sp, #0
 8018a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	3b01      	subs	r3, #1
 8018a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8018a6c:	d301      	bcc.n	8018a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8018a6e:	2301      	movs	r3, #1
 8018a70:	e00f      	b.n	8018a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8018a72:	4a0a      	ldr	r2, [pc, #40]	; (8018a9c <SysTick_Config+0x40>)
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	3b01      	subs	r3, #1
 8018a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8018a7a:	210f      	movs	r1, #15
 8018a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8018a80:	f7ff ff8e 	bl	80189a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8018a84:	4b05      	ldr	r3, [pc, #20]	; (8018a9c <SysTick_Config+0x40>)
 8018a86:	2200      	movs	r2, #0
 8018a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8018a8a:	4b04      	ldr	r3, [pc, #16]	; (8018a9c <SysTick_Config+0x40>)
 8018a8c:	2207      	movs	r2, #7
 8018a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8018a90:	2300      	movs	r3, #0
}
 8018a92:	4618      	mov	r0, r3
 8018a94:	3708      	adds	r7, #8
 8018a96:	46bd      	mov	sp, r7
 8018a98:	bd80      	pop	{r7, pc}
 8018a9a:	bf00      	nop
 8018a9c:	e000e010 	.word	0xe000e010

08018aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8018aa0:	b580      	push	{r7, lr}
 8018aa2:	b082      	sub	sp, #8
 8018aa4:	af00      	add	r7, sp, #0
 8018aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8018aa8:	6878      	ldr	r0, [r7, #4]
 8018aaa:	f7ff ff29 	bl	8018900 <__NVIC_SetPriorityGrouping>
}
 8018aae:	bf00      	nop
 8018ab0:	3708      	adds	r7, #8
 8018ab2:	46bd      	mov	sp, r7
 8018ab4:	bd80      	pop	{r7, pc}

08018ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8018ab6:	b580      	push	{r7, lr}
 8018ab8:	b086      	sub	sp, #24
 8018aba:	af00      	add	r7, sp, #0
 8018abc:	4603      	mov	r3, r0
 8018abe:	60b9      	str	r1, [r7, #8]
 8018ac0:	607a      	str	r2, [r7, #4]
 8018ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8018ac4:	2300      	movs	r3, #0
 8018ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8018ac8:	f7ff ff3e 	bl	8018948 <__NVIC_GetPriorityGrouping>
 8018acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8018ace:	687a      	ldr	r2, [r7, #4]
 8018ad0:	68b9      	ldr	r1, [r7, #8]
 8018ad2:	6978      	ldr	r0, [r7, #20]
 8018ad4:	f7ff ff8e 	bl	80189f4 <NVIC_EncodePriority>
 8018ad8:	4602      	mov	r2, r0
 8018ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018ade:	4611      	mov	r1, r2
 8018ae0:	4618      	mov	r0, r3
 8018ae2:	f7ff ff5d 	bl	80189a0 <__NVIC_SetPriority>
}
 8018ae6:	bf00      	nop
 8018ae8:	3718      	adds	r7, #24
 8018aea:	46bd      	mov	sp, r7
 8018aec:	bd80      	pop	{r7, pc}

08018aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8018aee:	b580      	push	{r7, lr}
 8018af0:	b082      	sub	sp, #8
 8018af2:	af00      	add	r7, sp, #0
 8018af4:	4603      	mov	r3, r0
 8018af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8018af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018afc:	4618      	mov	r0, r3
 8018afe:	f7ff ff31 	bl	8018964 <__NVIC_EnableIRQ>
}
 8018b02:	bf00      	nop
 8018b04:	3708      	adds	r7, #8
 8018b06:	46bd      	mov	sp, r7
 8018b08:	bd80      	pop	{r7, pc}

08018b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8018b0a:	b580      	push	{r7, lr}
 8018b0c:	b082      	sub	sp, #8
 8018b0e:	af00      	add	r7, sp, #0
 8018b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8018b12:	6878      	ldr	r0, [r7, #4]
 8018b14:	f7ff ffa2 	bl	8018a5c <SysTick_Config>
 8018b18:	4603      	mov	r3, r0
}
 8018b1a:	4618      	mov	r0, r3
 8018b1c:	3708      	adds	r7, #8
 8018b1e:	46bd      	mov	sp, r7
 8018b20:	bd80      	pop	{r7, pc}

08018b22 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8018b22:	b580      	push	{r7, lr}
 8018b24:	b082      	sub	sp, #8
 8018b26:	af00      	add	r7, sp, #0
 8018b28:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8018b2a:	687b      	ldr	r3, [r7, #4]
 8018b2c:	2b00      	cmp	r3, #0
 8018b2e:	d101      	bne.n	8018b34 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8018b30:	2301      	movs	r3, #1
 8018b32:	e014      	b.n	8018b5e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8018b34:	687b      	ldr	r3, [r7, #4]
 8018b36:	791b      	ldrb	r3, [r3, #4]
 8018b38:	b2db      	uxtb	r3, r3
 8018b3a:	2b00      	cmp	r3, #0
 8018b3c:	d105      	bne.n	8018b4a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	2200      	movs	r2, #0
 8018b42:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8018b44:	6878      	ldr	r0, [r7, #4]
 8018b46:	f7ff f985 	bl	8017e54 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8018b4a:	687b      	ldr	r3, [r7, #4]
 8018b4c:	2202      	movs	r2, #2
 8018b4e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	2200      	movs	r2, #0
 8018b54:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8018b56:	687b      	ldr	r3, [r7, #4]
 8018b58:	2201      	movs	r2, #1
 8018b5a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8018b5c:	2300      	movs	r3, #0
}
 8018b5e:	4618      	mov	r0, r3
 8018b60:	3708      	adds	r7, #8
 8018b62:	46bd      	mov	sp, r7
 8018b64:	bd80      	pop	{r7, pc}

08018b66 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8018b66:	b480      	push	{r7}
 8018b68:	b087      	sub	sp, #28
 8018b6a:	af00      	add	r7, sp, #0
 8018b6c:	60f8      	str	r0, [r7, #12]
 8018b6e:	60b9      	str	r1, [r7, #8]
 8018b70:	607a      	str	r2, [r7, #4]
 8018b72:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8018b74:	2300      	movs	r3, #0
 8018b76:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8018b78:	68fb      	ldr	r3, [r7, #12]
 8018b7a:	681b      	ldr	r3, [r3, #0]
 8018b7c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8018b7e:	68bb      	ldr	r3, [r7, #8]
 8018b80:	2b00      	cmp	r3, #0
 8018b82:	d105      	bne.n	8018b90 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8018b84:	697a      	ldr	r2, [r7, #20]
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	4413      	add	r3, r2
 8018b8a:	3308      	adds	r3, #8
 8018b8c:	617b      	str	r3, [r7, #20]
 8018b8e:	e004      	b.n	8018b9a <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8018b90:	697a      	ldr	r2, [r7, #20]
 8018b92:	687b      	ldr	r3, [r7, #4]
 8018b94:	4413      	add	r3, r2
 8018b96:	3314      	adds	r3, #20
 8018b98:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8018b9a:	697b      	ldr	r3, [r7, #20]
 8018b9c:	461a      	mov	r2, r3
 8018b9e:	683b      	ldr	r3, [r7, #0]
 8018ba0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8018ba2:	2300      	movs	r3, #0
}
 8018ba4:	4618      	mov	r0, r3
 8018ba6:	371c      	adds	r7, #28
 8018ba8:	46bd      	mov	sp, r7
 8018baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bae:	4770      	bx	lr

08018bb0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8018bb0:	b480      	push	{r7}
 8018bb2:	b087      	sub	sp, #28
 8018bb4:	af00      	add	r7, sp, #0
 8018bb6:	60f8      	str	r0, [r7, #12]
 8018bb8:	60b9      	str	r1, [r7, #8]
 8018bba:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8018bbc:	68fb      	ldr	r3, [r7, #12]
 8018bbe:	795b      	ldrb	r3, [r3, #5]
 8018bc0:	2b01      	cmp	r3, #1
 8018bc2:	d101      	bne.n	8018bc8 <HAL_DAC_ConfigChannel+0x18>
 8018bc4:	2302      	movs	r3, #2
 8018bc6:	e03c      	b.n	8018c42 <HAL_DAC_ConfigChannel+0x92>
 8018bc8:	68fb      	ldr	r3, [r7, #12]
 8018bca:	2201      	movs	r2, #1
 8018bcc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8018bce:	68fb      	ldr	r3, [r7, #12]
 8018bd0:	2202      	movs	r2, #2
 8018bd2:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8018bd4:	68fb      	ldr	r3, [r7, #12]
 8018bd6:	681b      	ldr	r3, [r3, #0]
 8018bd8:	681b      	ldr	r3, [r3, #0]
 8018bda:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	f003 0310 	and.w	r3, r3, #16
 8018be2:	f640 72fe 	movw	r2, #4094	; 0xffe
 8018be6:	fa02 f303 	lsl.w	r3, r2, r3
 8018bea:	43db      	mvns	r3, r3
 8018bec:	697a      	ldr	r2, [r7, #20]
 8018bee:	4013      	ands	r3, r2
 8018bf0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8018bf2:	68bb      	ldr	r3, [r7, #8]
 8018bf4:	681a      	ldr	r2, [r3, #0]
 8018bf6:	68bb      	ldr	r3, [r7, #8]
 8018bf8:	685b      	ldr	r3, [r3, #4]
 8018bfa:	4313      	orrs	r3, r2
 8018bfc:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8018bfe:	687b      	ldr	r3, [r7, #4]
 8018c00:	f003 0310 	and.w	r3, r3, #16
 8018c04:	693a      	ldr	r2, [r7, #16]
 8018c06:	fa02 f303 	lsl.w	r3, r2, r3
 8018c0a:	697a      	ldr	r2, [r7, #20]
 8018c0c:	4313      	orrs	r3, r2
 8018c0e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8018c10:	68fb      	ldr	r3, [r7, #12]
 8018c12:	681b      	ldr	r3, [r3, #0]
 8018c14:	697a      	ldr	r2, [r7, #20]
 8018c16:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8018c18:	68fb      	ldr	r3, [r7, #12]
 8018c1a:	681b      	ldr	r3, [r3, #0]
 8018c1c:	6819      	ldr	r1, [r3, #0]
 8018c1e:	687b      	ldr	r3, [r7, #4]
 8018c20:	f003 0310 	and.w	r3, r3, #16
 8018c24:	22c0      	movs	r2, #192	; 0xc0
 8018c26:	fa02 f303 	lsl.w	r3, r2, r3
 8018c2a:	43da      	mvns	r2, r3
 8018c2c:	68fb      	ldr	r3, [r7, #12]
 8018c2e:	681b      	ldr	r3, [r3, #0]
 8018c30:	400a      	ands	r2, r1
 8018c32:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8018c34:	68fb      	ldr	r3, [r7, #12]
 8018c36:	2201      	movs	r2, #1
 8018c38:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8018c3a:	68fb      	ldr	r3, [r7, #12]
 8018c3c:	2200      	movs	r2, #0
 8018c3e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8018c40:	2300      	movs	r3, #0
}
 8018c42:	4618      	mov	r0, r3
 8018c44:	371c      	adds	r7, #28
 8018c46:	46bd      	mov	sp, r7
 8018c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c4c:	4770      	bx	lr
	...

08018c50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8018c50:	b580      	push	{r7, lr}
 8018c52:	b086      	sub	sp, #24
 8018c54:	af00      	add	r7, sp, #0
 8018c56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8018c58:	2300      	movs	r3, #0
 8018c5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8018c5c:	f7ff fbae 	bl	80183bc <HAL_GetTick>
 8018c60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8018c62:	687b      	ldr	r3, [r7, #4]
 8018c64:	2b00      	cmp	r3, #0
 8018c66:	d101      	bne.n	8018c6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8018c68:	2301      	movs	r3, #1
 8018c6a:	e099      	b.n	8018da0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	2202      	movs	r2, #2
 8018c70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8018c74:	687b      	ldr	r3, [r7, #4]
 8018c76:	2200      	movs	r2, #0
 8018c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	681b      	ldr	r3, [r3, #0]
 8018c80:	681a      	ldr	r2, [r3, #0]
 8018c82:	687b      	ldr	r3, [r7, #4]
 8018c84:	681b      	ldr	r3, [r3, #0]
 8018c86:	f022 0201 	bic.w	r2, r2, #1
 8018c8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8018c8c:	e00f      	b.n	8018cae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8018c8e:	f7ff fb95 	bl	80183bc <HAL_GetTick>
 8018c92:	4602      	mov	r2, r0
 8018c94:	693b      	ldr	r3, [r7, #16]
 8018c96:	1ad3      	subs	r3, r2, r3
 8018c98:	2b05      	cmp	r3, #5
 8018c9a:	d908      	bls.n	8018cae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	2220      	movs	r2, #32
 8018ca0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8018ca2:	687b      	ldr	r3, [r7, #4]
 8018ca4:	2203      	movs	r2, #3
 8018ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8018caa:	2303      	movs	r3, #3
 8018cac:	e078      	b.n	8018da0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8018cae:	687b      	ldr	r3, [r7, #4]
 8018cb0:	681b      	ldr	r3, [r3, #0]
 8018cb2:	681b      	ldr	r3, [r3, #0]
 8018cb4:	f003 0301 	and.w	r3, r3, #1
 8018cb8:	2b00      	cmp	r3, #0
 8018cba:	d1e8      	bne.n	8018c8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8018cbc:	687b      	ldr	r3, [r7, #4]
 8018cbe:	681b      	ldr	r3, [r3, #0]
 8018cc0:	681b      	ldr	r3, [r3, #0]
 8018cc2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8018cc4:	697a      	ldr	r2, [r7, #20]
 8018cc6:	4b38      	ldr	r3, [pc, #224]	; (8018da8 <HAL_DMA_Init+0x158>)
 8018cc8:	4013      	ands	r3, r2
 8018cca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	685a      	ldr	r2, [r3, #4]
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	689b      	ldr	r3, [r3, #8]
 8018cd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8018cda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	691b      	ldr	r3, [r3, #16]
 8018ce0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8018ce6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8018ce8:	687b      	ldr	r3, [r7, #4]
 8018cea:	699b      	ldr	r3, [r3, #24]
 8018cec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8018cf2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8018cf4:	687b      	ldr	r3, [r7, #4]
 8018cf6:	6a1b      	ldr	r3, [r3, #32]
 8018cf8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8018cfa:	697a      	ldr	r2, [r7, #20]
 8018cfc:	4313      	orrs	r3, r2
 8018cfe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8018d00:	687b      	ldr	r3, [r7, #4]
 8018d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d04:	2b04      	cmp	r3, #4
 8018d06:	d107      	bne.n	8018d18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8018d08:	687b      	ldr	r3, [r7, #4]
 8018d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018d10:	4313      	orrs	r3, r2
 8018d12:	697a      	ldr	r2, [r7, #20]
 8018d14:	4313      	orrs	r3, r2
 8018d16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	681b      	ldr	r3, [r3, #0]
 8018d1c:	697a      	ldr	r2, [r7, #20]
 8018d1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8018d20:	687b      	ldr	r3, [r7, #4]
 8018d22:	681b      	ldr	r3, [r3, #0]
 8018d24:	695b      	ldr	r3, [r3, #20]
 8018d26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8018d28:	697b      	ldr	r3, [r7, #20]
 8018d2a:	f023 0307 	bic.w	r3, r3, #7
 8018d2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d34:	697a      	ldr	r2, [r7, #20]
 8018d36:	4313      	orrs	r3, r2
 8018d38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8018d3a:	687b      	ldr	r3, [r7, #4]
 8018d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d3e:	2b04      	cmp	r3, #4
 8018d40:	d117      	bne.n	8018d72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8018d42:	687b      	ldr	r3, [r7, #4]
 8018d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018d46:	697a      	ldr	r2, [r7, #20]
 8018d48:	4313      	orrs	r3, r2
 8018d4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d50:	2b00      	cmp	r3, #0
 8018d52:	d00e      	beq.n	8018d72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8018d54:	6878      	ldr	r0, [r7, #4]
 8018d56:	f000 fa0b 	bl	8019170 <DMA_CheckFifoParam>
 8018d5a:	4603      	mov	r3, r0
 8018d5c:	2b00      	cmp	r3, #0
 8018d5e:	d008      	beq.n	8018d72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	2240      	movs	r2, #64	; 0x40
 8018d64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	2201      	movs	r2, #1
 8018d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8018d6e:	2301      	movs	r3, #1
 8018d70:	e016      	b.n	8018da0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8018d72:	687b      	ldr	r3, [r7, #4]
 8018d74:	681b      	ldr	r3, [r3, #0]
 8018d76:	697a      	ldr	r2, [r7, #20]
 8018d78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8018d7a:	6878      	ldr	r0, [r7, #4]
 8018d7c:	f000 f9c2 	bl	8019104 <DMA_CalcBaseAndBitshift>
 8018d80:	4603      	mov	r3, r0
 8018d82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018d88:	223f      	movs	r2, #63	; 0x3f
 8018d8a:	409a      	lsls	r2, r3
 8018d8c:	68fb      	ldr	r3, [r7, #12]
 8018d8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	2200      	movs	r2, #0
 8018d94:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8018d96:	687b      	ldr	r3, [r7, #4]
 8018d98:	2201      	movs	r2, #1
 8018d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8018d9e:	2300      	movs	r3, #0
}
 8018da0:	4618      	mov	r0, r3
 8018da2:	3718      	adds	r7, #24
 8018da4:	46bd      	mov	sp, r7
 8018da6:	bd80      	pop	{r7, pc}
 8018da8:	f010803f 	.word	0xf010803f

08018dac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8018dac:	b480      	push	{r7}
 8018dae:	b083      	sub	sp, #12
 8018db0:	af00      	add	r7, sp, #0
 8018db2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8018dba:	b2db      	uxtb	r3, r3
 8018dbc:	2b02      	cmp	r3, #2
 8018dbe:	d004      	beq.n	8018dca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8018dc0:	687b      	ldr	r3, [r7, #4]
 8018dc2:	2280      	movs	r2, #128	; 0x80
 8018dc4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8018dc6:	2301      	movs	r3, #1
 8018dc8:	e00c      	b.n	8018de4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8018dca:	687b      	ldr	r3, [r7, #4]
 8018dcc:	2205      	movs	r2, #5
 8018dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	681b      	ldr	r3, [r3, #0]
 8018dd6:	681a      	ldr	r2, [r3, #0]
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	681b      	ldr	r3, [r3, #0]
 8018ddc:	f022 0201 	bic.w	r2, r2, #1
 8018de0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8018de2:	2300      	movs	r3, #0
}
 8018de4:	4618      	mov	r0, r3
 8018de6:	370c      	adds	r7, #12
 8018de8:	46bd      	mov	sp, r7
 8018dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dee:	4770      	bx	lr

08018df0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8018df0:	b580      	push	{r7, lr}
 8018df2:	b086      	sub	sp, #24
 8018df4:	af00      	add	r7, sp, #0
 8018df6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8018df8:	2300      	movs	r3, #0
 8018dfa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8018dfc:	4b92      	ldr	r3, [pc, #584]	; (8019048 <HAL_DMA_IRQHandler+0x258>)
 8018dfe:	681b      	ldr	r3, [r3, #0]
 8018e00:	4a92      	ldr	r2, [pc, #584]	; (801904c <HAL_DMA_IRQHandler+0x25c>)
 8018e02:	fba2 2303 	umull	r2, r3, r2, r3
 8018e06:	0a9b      	lsrs	r3, r3, #10
 8018e08:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8018e0a:	687b      	ldr	r3, [r7, #4]
 8018e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018e0e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8018e10:	693b      	ldr	r3, [r7, #16]
 8018e12:	681b      	ldr	r3, [r3, #0]
 8018e14:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8018e16:	687b      	ldr	r3, [r7, #4]
 8018e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018e1a:	2208      	movs	r2, #8
 8018e1c:	409a      	lsls	r2, r3
 8018e1e:	68fb      	ldr	r3, [r7, #12]
 8018e20:	4013      	ands	r3, r2
 8018e22:	2b00      	cmp	r3, #0
 8018e24:	d01a      	beq.n	8018e5c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	681b      	ldr	r3, [r3, #0]
 8018e2a:	681b      	ldr	r3, [r3, #0]
 8018e2c:	f003 0304 	and.w	r3, r3, #4
 8018e30:	2b00      	cmp	r3, #0
 8018e32:	d013      	beq.n	8018e5c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	681b      	ldr	r3, [r3, #0]
 8018e38:	681a      	ldr	r2, [r3, #0]
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	681b      	ldr	r3, [r3, #0]
 8018e3e:	f022 0204 	bic.w	r2, r2, #4
 8018e42:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018e48:	2208      	movs	r2, #8
 8018e4a:	409a      	lsls	r2, r3
 8018e4c:	693b      	ldr	r3, [r7, #16]
 8018e4e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018e54:	f043 0201 	orr.w	r2, r3, #1
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018e60:	2201      	movs	r2, #1
 8018e62:	409a      	lsls	r2, r3
 8018e64:	68fb      	ldr	r3, [r7, #12]
 8018e66:	4013      	ands	r3, r2
 8018e68:	2b00      	cmp	r3, #0
 8018e6a:	d012      	beq.n	8018e92 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8018e6c:	687b      	ldr	r3, [r7, #4]
 8018e6e:	681b      	ldr	r3, [r3, #0]
 8018e70:	695b      	ldr	r3, [r3, #20]
 8018e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018e76:	2b00      	cmp	r3, #0
 8018e78:	d00b      	beq.n	8018e92 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018e7e:	2201      	movs	r2, #1
 8018e80:	409a      	lsls	r2, r3
 8018e82:	693b      	ldr	r3, [r7, #16]
 8018e84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018e8a:	f043 0202 	orr.w	r2, r3, #2
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018e96:	2204      	movs	r2, #4
 8018e98:	409a      	lsls	r2, r3
 8018e9a:	68fb      	ldr	r3, [r7, #12]
 8018e9c:	4013      	ands	r3, r2
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	d012      	beq.n	8018ec8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8018ea2:	687b      	ldr	r3, [r7, #4]
 8018ea4:	681b      	ldr	r3, [r3, #0]
 8018ea6:	681b      	ldr	r3, [r3, #0]
 8018ea8:	f003 0302 	and.w	r3, r3, #2
 8018eac:	2b00      	cmp	r3, #0
 8018eae:	d00b      	beq.n	8018ec8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018eb4:	2204      	movs	r2, #4
 8018eb6:	409a      	lsls	r2, r3
 8018eb8:	693b      	ldr	r3, [r7, #16]
 8018eba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018ec0:	f043 0204 	orr.w	r2, r3, #4
 8018ec4:	687b      	ldr	r3, [r7, #4]
 8018ec6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018ecc:	2210      	movs	r2, #16
 8018ece:	409a      	lsls	r2, r3
 8018ed0:	68fb      	ldr	r3, [r7, #12]
 8018ed2:	4013      	ands	r3, r2
 8018ed4:	2b00      	cmp	r3, #0
 8018ed6:	d043      	beq.n	8018f60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	681b      	ldr	r3, [r3, #0]
 8018edc:	681b      	ldr	r3, [r3, #0]
 8018ede:	f003 0308 	and.w	r3, r3, #8
 8018ee2:	2b00      	cmp	r3, #0
 8018ee4:	d03c      	beq.n	8018f60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8018ee6:	687b      	ldr	r3, [r7, #4]
 8018ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018eea:	2210      	movs	r2, #16
 8018eec:	409a      	lsls	r2, r3
 8018eee:	693b      	ldr	r3, [r7, #16]
 8018ef0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	681b      	ldr	r3, [r3, #0]
 8018ef6:	681b      	ldr	r3, [r3, #0]
 8018ef8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8018efc:	2b00      	cmp	r3, #0
 8018efe:	d018      	beq.n	8018f32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8018f00:	687b      	ldr	r3, [r7, #4]
 8018f02:	681b      	ldr	r3, [r3, #0]
 8018f04:	681b      	ldr	r3, [r3, #0]
 8018f06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8018f0a:	2b00      	cmp	r3, #0
 8018f0c:	d108      	bne.n	8018f20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f12:	2b00      	cmp	r3, #0
 8018f14:	d024      	beq.n	8018f60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8018f16:	687b      	ldr	r3, [r7, #4]
 8018f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f1a:	6878      	ldr	r0, [r7, #4]
 8018f1c:	4798      	blx	r3
 8018f1e:	e01f      	b.n	8018f60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	d01b      	beq.n	8018f60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018f2c:	6878      	ldr	r0, [r7, #4]
 8018f2e:	4798      	blx	r3
 8018f30:	e016      	b.n	8018f60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8018f32:	687b      	ldr	r3, [r7, #4]
 8018f34:	681b      	ldr	r3, [r3, #0]
 8018f36:	681b      	ldr	r3, [r3, #0]
 8018f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	d107      	bne.n	8018f50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8018f40:	687b      	ldr	r3, [r7, #4]
 8018f42:	681b      	ldr	r3, [r3, #0]
 8018f44:	681a      	ldr	r2, [r3, #0]
 8018f46:	687b      	ldr	r3, [r7, #4]
 8018f48:	681b      	ldr	r3, [r3, #0]
 8018f4a:	f022 0208 	bic.w	r2, r2, #8
 8018f4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f54:	2b00      	cmp	r3, #0
 8018f56:	d003      	beq.n	8018f60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f5c:	6878      	ldr	r0, [r7, #4]
 8018f5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8018f60:	687b      	ldr	r3, [r7, #4]
 8018f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018f64:	2220      	movs	r2, #32
 8018f66:	409a      	lsls	r2, r3
 8018f68:	68fb      	ldr	r3, [r7, #12]
 8018f6a:	4013      	ands	r3, r2
 8018f6c:	2b00      	cmp	r3, #0
 8018f6e:	f000 808e 	beq.w	801908e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8018f72:	687b      	ldr	r3, [r7, #4]
 8018f74:	681b      	ldr	r3, [r3, #0]
 8018f76:	681b      	ldr	r3, [r3, #0]
 8018f78:	f003 0310 	and.w	r3, r3, #16
 8018f7c:	2b00      	cmp	r3, #0
 8018f7e:	f000 8086 	beq.w	801908e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8018f82:	687b      	ldr	r3, [r7, #4]
 8018f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018f86:	2220      	movs	r2, #32
 8018f88:	409a      	lsls	r2, r3
 8018f8a:	693b      	ldr	r3, [r7, #16]
 8018f8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8018f8e:	687b      	ldr	r3, [r7, #4]
 8018f90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8018f94:	b2db      	uxtb	r3, r3
 8018f96:	2b05      	cmp	r3, #5
 8018f98:	d136      	bne.n	8019008 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	681b      	ldr	r3, [r3, #0]
 8018f9e:	681a      	ldr	r2, [r3, #0]
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	681b      	ldr	r3, [r3, #0]
 8018fa4:	f022 0216 	bic.w	r2, r2, #22
 8018fa8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8018faa:	687b      	ldr	r3, [r7, #4]
 8018fac:	681b      	ldr	r3, [r3, #0]
 8018fae:	695a      	ldr	r2, [r3, #20]
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	681b      	ldr	r3, [r3, #0]
 8018fb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8018fb8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8018fba:	687b      	ldr	r3, [r7, #4]
 8018fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018fbe:	2b00      	cmp	r3, #0
 8018fc0:	d103      	bne.n	8018fca <HAL_DMA_IRQHandler+0x1da>
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018fc6:	2b00      	cmp	r3, #0
 8018fc8:	d007      	beq.n	8018fda <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	681b      	ldr	r3, [r3, #0]
 8018fce:	681a      	ldr	r2, [r3, #0]
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	681b      	ldr	r3, [r3, #0]
 8018fd4:	f022 0208 	bic.w	r2, r2, #8
 8018fd8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8018fda:	687b      	ldr	r3, [r7, #4]
 8018fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018fde:	223f      	movs	r2, #63	; 0x3f
 8018fe0:	409a      	lsls	r2, r3
 8018fe2:	693b      	ldr	r3, [r7, #16]
 8018fe4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8018fe6:	687b      	ldr	r3, [r7, #4]
 8018fe8:	2201      	movs	r2, #1
 8018fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	2200      	movs	r2, #0
 8018ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8018ff6:	687b      	ldr	r3, [r7, #4]
 8018ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018ffa:	2b00      	cmp	r3, #0
 8018ffc:	d07d      	beq.n	80190fa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8018ffe:	687b      	ldr	r3, [r7, #4]
 8019000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019002:	6878      	ldr	r0, [r7, #4]
 8019004:	4798      	blx	r3
        }
        return;
 8019006:	e078      	b.n	80190fa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	681b      	ldr	r3, [r3, #0]
 801900c:	681b      	ldr	r3, [r3, #0]
 801900e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8019012:	2b00      	cmp	r3, #0
 8019014:	d01c      	beq.n	8019050 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8019016:	687b      	ldr	r3, [r7, #4]
 8019018:	681b      	ldr	r3, [r3, #0]
 801901a:	681b      	ldr	r3, [r3, #0]
 801901c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8019020:	2b00      	cmp	r3, #0
 8019022:	d108      	bne.n	8019036 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019028:	2b00      	cmp	r3, #0
 801902a:	d030      	beq.n	801908e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 801902c:	687b      	ldr	r3, [r7, #4]
 801902e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019030:	6878      	ldr	r0, [r7, #4]
 8019032:	4798      	blx	r3
 8019034:	e02b      	b.n	801908e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8019036:	687b      	ldr	r3, [r7, #4]
 8019038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801903a:	2b00      	cmp	r3, #0
 801903c:	d027      	beq.n	801908e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 801903e:	687b      	ldr	r3, [r7, #4]
 8019040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019042:	6878      	ldr	r0, [r7, #4]
 8019044:	4798      	blx	r3
 8019046:	e022      	b.n	801908e <HAL_DMA_IRQHandler+0x29e>
 8019048:	20000588 	.word	0x20000588
 801904c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	681b      	ldr	r3, [r3, #0]
 8019054:	681b      	ldr	r3, [r3, #0]
 8019056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801905a:	2b00      	cmp	r3, #0
 801905c:	d10f      	bne.n	801907e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 801905e:	687b      	ldr	r3, [r7, #4]
 8019060:	681b      	ldr	r3, [r3, #0]
 8019062:	681a      	ldr	r2, [r3, #0]
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	681b      	ldr	r3, [r3, #0]
 8019068:	f022 0210 	bic.w	r2, r2, #16
 801906c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	2201      	movs	r2, #1
 8019072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	2200      	movs	r2, #0
 801907a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 801907e:	687b      	ldr	r3, [r7, #4]
 8019080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019082:	2b00      	cmp	r3, #0
 8019084:	d003      	beq.n	801908e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8019086:	687b      	ldr	r3, [r7, #4]
 8019088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801908a:	6878      	ldr	r0, [r7, #4]
 801908c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801908e:	687b      	ldr	r3, [r7, #4]
 8019090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019092:	2b00      	cmp	r3, #0
 8019094:	d032      	beq.n	80190fc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801909a:	f003 0301 	and.w	r3, r3, #1
 801909e:	2b00      	cmp	r3, #0
 80190a0:	d022      	beq.n	80190e8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80190a2:	687b      	ldr	r3, [r7, #4]
 80190a4:	2205      	movs	r2, #5
 80190a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	681b      	ldr	r3, [r3, #0]
 80190ae:	681a      	ldr	r2, [r3, #0]
 80190b0:	687b      	ldr	r3, [r7, #4]
 80190b2:	681b      	ldr	r3, [r3, #0]
 80190b4:	f022 0201 	bic.w	r2, r2, #1
 80190b8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80190ba:	68bb      	ldr	r3, [r7, #8]
 80190bc:	3301      	adds	r3, #1
 80190be:	60bb      	str	r3, [r7, #8]
 80190c0:	697a      	ldr	r2, [r7, #20]
 80190c2:	429a      	cmp	r2, r3
 80190c4:	d307      	bcc.n	80190d6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80190c6:	687b      	ldr	r3, [r7, #4]
 80190c8:	681b      	ldr	r3, [r3, #0]
 80190ca:	681b      	ldr	r3, [r3, #0]
 80190cc:	f003 0301 	and.w	r3, r3, #1
 80190d0:	2b00      	cmp	r3, #0
 80190d2:	d1f2      	bne.n	80190ba <HAL_DMA_IRQHandler+0x2ca>
 80190d4:	e000      	b.n	80190d8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80190d6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80190d8:	687b      	ldr	r3, [r7, #4]
 80190da:	2201      	movs	r2, #1
 80190dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	2200      	movs	r2, #0
 80190e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80190e8:	687b      	ldr	r3, [r7, #4]
 80190ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80190ec:	2b00      	cmp	r3, #0
 80190ee:	d005      	beq.n	80190fc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80190f4:	6878      	ldr	r0, [r7, #4]
 80190f6:	4798      	blx	r3
 80190f8:	e000      	b.n	80190fc <HAL_DMA_IRQHandler+0x30c>
        return;
 80190fa:	bf00      	nop
    }
  }
}
 80190fc:	3718      	adds	r7, #24
 80190fe:	46bd      	mov	sp, r7
 8019100:	bd80      	pop	{r7, pc}
 8019102:	bf00      	nop

08019104 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8019104:	b480      	push	{r7}
 8019106:	b085      	sub	sp, #20
 8019108:	af00      	add	r7, sp, #0
 801910a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 801910c:	687b      	ldr	r3, [r7, #4]
 801910e:	681b      	ldr	r3, [r3, #0]
 8019110:	b2db      	uxtb	r3, r3
 8019112:	3b10      	subs	r3, #16
 8019114:	4a14      	ldr	r2, [pc, #80]	; (8019168 <DMA_CalcBaseAndBitshift+0x64>)
 8019116:	fba2 2303 	umull	r2, r3, r2, r3
 801911a:	091b      	lsrs	r3, r3, #4
 801911c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 801911e:	4a13      	ldr	r2, [pc, #76]	; (801916c <DMA_CalcBaseAndBitshift+0x68>)
 8019120:	68fb      	ldr	r3, [r7, #12]
 8019122:	4413      	add	r3, r2
 8019124:	781b      	ldrb	r3, [r3, #0]
 8019126:	461a      	mov	r2, r3
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 801912c:	68fb      	ldr	r3, [r7, #12]
 801912e:	2b03      	cmp	r3, #3
 8019130:	d909      	bls.n	8019146 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8019132:	687b      	ldr	r3, [r7, #4]
 8019134:	681b      	ldr	r3, [r3, #0]
 8019136:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801913a:	f023 0303 	bic.w	r3, r3, #3
 801913e:	1d1a      	adds	r2, r3, #4
 8019140:	687b      	ldr	r3, [r7, #4]
 8019142:	659a      	str	r2, [r3, #88]	; 0x58
 8019144:	e007      	b.n	8019156 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8019146:	687b      	ldr	r3, [r7, #4]
 8019148:	681b      	ldr	r3, [r3, #0]
 801914a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801914e:	f023 0303 	bic.w	r3, r3, #3
 8019152:	687a      	ldr	r2, [r7, #4]
 8019154:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8019156:	687b      	ldr	r3, [r7, #4]
 8019158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 801915a:	4618      	mov	r0, r3
 801915c:	3714      	adds	r7, #20
 801915e:	46bd      	mov	sp, r7
 8019160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019164:	4770      	bx	lr
 8019166:	bf00      	nop
 8019168:	aaaaaaab 	.word	0xaaaaaaab
 801916c:	08002360 	.word	0x08002360

08019170 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8019170:	b480      	push	{r7}
 8019172:	b085      	sub	sp, #20
 8019174:	af00      	add	r7, sp, #0
 8019176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8019178:	2300      	movs	r3, #0
 801917a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019180:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8019182:	687b      	ldr	r3, [r7, #4]
 8019184:	699b      	ldr	r3, [r3, #24]
 8019186:	2b00      	cmp	r3, #0
 8019188:	d11f      	bne.n	80191ca <DMA_CheckFifoParam+0x5a>
 801918a:	68bb      	ldr	r3, [r7, #8]
 801918c:	2b03      	cmp	r3, #3
 801918e:	d856      	bhi.n	801923e <DMA_CheckFifoParam+0xce>
 8019190:	a201      	add	r2, pc, #4	; (adr r2, 8019198 <DMA_CheckFifoParam+0x28>)
 8019192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019196:	bf00      	nop
 8019198:	080191a9 	.word	0x080191a9
 801919c:	080191bb 	.word	0x080191bb
 80191a0:	080191a9 	.word	0x080191a9
 80191a4:	0801923f 	.word	0x0801923f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80191b0:	2b00      	cmp	r3, #0
 80191b2:	d046      	beq.n	8019242 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80191b4:	2301      	movs	r3, #1
 80191b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80191b8:	e043      	b.n	8019242 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80191ba:	687b      	ldr	r3, [r7, #4]
 80191bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80191c2:	d140      	bne.n	8019246 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80191c4:	2301      	movs	r3, #1
 80191c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80191c8:	e03d      	b.n	8019246 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80191ca:	687b      	ldr	r3, [r7, #4]
 80191cc:	699b      	ldr	r3, [r3, #24]
 80191ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80191d2:	d121      	bne.n	8019218 <DMA_CheckFifoParam+0xa8>
 80191d4:	68bb      	ldr	r3, [r7, #8]
 80191d6:	2b03      	cmp	r3, #3
 80191d8:	d837      	bhi.n	801924a <DMA_CheckFifoParam+0xda>
 80191da:	a201      	add	r2, pc, #4	; (adr r2, 80191e0 <DMA_CheckFifoParam+0x70>)
 80191dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80191e0:	080191f1 	.word	0x080191f1
 80191e4:	080191f7 	.word	0x080191f7
 80191e8:	080191f1 	.word	0x080191f1
 80191ec:	08019209 	.word	0x08019209
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80191f0:	2301      	movs	r3, #1
 80191f2:	73fb      	strb	r3, [r7, #15]
      break;
 80191f4:	e030      	b.n	8019258 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80191f6:	687b      	ldr	r3, [r7, #4]
 80191f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80191fe:	2b00      	cmp	r3, #0
 8019200:	d025      	beq.n	801924e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8019202:	2301      	movs	r3, #1
 8019204:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8019206:	e022      	b.n	801924e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801920c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8019210:	d11f      	bne.n	8019252 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8019212:	2301      	movs	r3, #1
 8019214:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8019216:	e01c      	b.n	8019252 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8019218:	68bb      	ldr	r3, [r7, #8]
 801921a:	2b02      	cmp	r3, #2
 801921c:	d903      	bls.n	8019226 <DMA_CheckFifoParam+0xb6>
 801921e:	68bb      	ldr	r3, [r7, #8]
 8019220:	2b03      	cmp	r3, #3
 8019222:	d003      	beq.n	801922c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8019224:	e018      	b.n	8019258 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8019226:	2301      	movs	r3, #1
 8019228:	73fb      	strb	r3, [r7, #15]
      break;
 801922a:	e015      	b.n	8019258 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019230:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8019234:	2b00      	cmp	r3, #0
 8019236:	d00e      	beq.n	8019256 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8019238:	2301      	movs	r3, #1
 801923a:	73fb      	strb	r3, [r7, #15]
      break;
 801923c:	e00b      	b.n	8019256 <DMA_CheckFifoParam+0xe6>
      break;
 801923e:	bf00      	nop
 8019240:	e00a      	b.n	8019258 <DMA_CheckFifoParam+0xe8>
      break;
 8019242:	bf00      	nop
 8019244:	e008      	b.n	8019258 <DMA_CheckFifoParam+0xe8>
      break;
 8019246:	bf00      	nop
 8019248:	e006      	b.n	8019258 <DMA_CheckFifoParam+0xe8>
      break;
 801924a:	bf00      	nop
 801924c:	e004      	b.n	8019258 <DMA_CheckFifoParam+0xe8>
      break;
 801924e:	bf00      	nop
 8019250:	e002      	b.n	8019258 <DMA_CheckFifoParam+0xe8>
      break;   
 8019252:	bf00      	nop
 8019254:	e000      	b.n	8019258 <DMA_CheckFifoParam+0xe8>
      break;
 8019256:	bf00      	nop
    }
  } 
  
  return status; 
 8019258:	7bfb      	ldrb	r3, [r7, #15]
}
 801925a:	4618      	mov	r0, r3
 801925c:	3714      	adds	r7, #20
 801925e:	46bd      	mov	sp, r7
 8019260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019264:	4770      	bx	lr
 8019266:	bf00      	nop

08019268 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8019268:	b580      	push	{r7, lr}
 801926a:	b086      	sub	sp, #24
 801926c:	af00      	add	r7, sp, #0
 801926e:	60f8      	str	r0, [r7, #12]
 8019270:	60b9      	str	r1, [r7, #8]
 8019272:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8019276:	2301      	movs	r3, #1
 8019278:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801927a:	4b23      	ldr	r3, [pc, #140]	; (8019308 <HAL_FLASH_Program+0xa0>)
 801927c:	7e1b      	ldrb	r3, [r3, #24]
 801927e:	2b01      	cmp	r3, #1
 8019280:	d101      	bne.n	8019286 <HAL_FLASH_Program+0x1e>
 8019282:	2302      	movs	r3, #2
 8019284:	e03b      	b.n	80192fe <HAL_FLASH_Program+0x96>
 8019286:	4b20      	ldr	r3, [pc, #128]	; (8019308 <HAL_FLASH_Program+0xa0>)
 8019288:	2201      	movs	r2, #1
 801928a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801928c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8019290:	f000 f870 	bl	8019374 <FLASH_WaitForLastOperation>
 8019294:	4603      	mov	r3, r0
 8019296:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8019298:	7dfb      	ldrb	r3, [r7, #23]
 801929a:	2b00      	cmp	r3, #0
 801929c:	d12b      	bne.n	80192f6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 801929e:	68fb      	ldr	r3, [r7, #12]
 80192a0:	2b00      	cmp	r3, #0
 80192a2:	d105      	bne.n	80192b0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80192a4:	783b      	ldrb	r3, [r7, #0]
 80192a6:	4619      	mov	r1, r3
 80192a8:	68b8      	ldr	r0, [r7, #8]
 80192aa:	f000 f91b 	bl	80194e4 <FLASH_Program_Byte>
 80192ae:	e016      	b.n	80192de <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80192b0:	68fb      	ldr	r3, [r7, #12]
 80192b2:	2b01      	cmp	r3, #1
 80192b4:	d105      	bne.n	80192c2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80192b6:	883b      	ldrh	r3, [r7, #0]
 80192b8:	4619      	mov	r1, r3
 80192ba:	68b8      	ldr	r0, [r7, #8]
 80192bc:	f000 f8ee 	bl	801949c <FLASH_Program_HalfWord>
 80192c0:	e00d      	b.n	80192de <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80192c2:	68fb      	ldr	r3, [r7, #12]
 80192c4:	2b02      	cmp	r3, #2
 80192c6:	d105      	bne.n	80192d4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80192c8:	683b      	ldr	r3, [r7, #0]
 80192ca:	4619      	mov	r1, r3
 80192cc:	68b8      	ldr	r0, [r7, #8]
 80192ce:	f000 f8c3 	bl	8019458 <FLASH_Program_Word>
 80192d2:	e004      	b.n	80192de <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80192d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80192d8:	68b8      	ldr	r0, [r7, #8]
 80192da:	f000 f88b 	bl	80193f4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80192de:	f24c 3050 	movw	r0, #50000	; 0xc350
 80192e2:	f000 f847 	bl	8019374 <FLASH_WaitForLastOperation>
 80192e6:	4603      	mov	r3, r0
 80192e8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80192ea:	4b08      	ldr	r3, [pc, #32]	; (801930c <HAL_FLASH_Program+0xa4>)
 80192ec:	691b      	ldr	r3, [r3, #16]
 80192ee:	4a07      	ldr	r2, [pc, #28]	; (801930c <HAL_FLASH_Program+0xa4>)
 80192f0:	f023 0301 	bic.w	r3, r3, #1
 80192f4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80192f6:	4b04      	ldr	r3, [pc, #16]	; (8019308 <HAL_FLASH_Program+0xa0>)
 80192f8:	2200      	movs	r2, #0
 80192fa:	761a      	strb	r2, [r3, #24]
  
  return status;
 80192fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80192fe:	4618      	mov	r0, r3
 8019300:	3718      	adds	r7, #24
 8019302:	46bd      	mov	sp, r7
 8019304:	bd80      	pop	{r7, pc}
 8019306:	bf00      	nop
 8019308:	20006c1c 	.word	0x20006c1c
 801930c:	40023c00 	.word	0x40023c00

08019310 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8019310:	b480      	push	{r7}
 8019312:	b083      	sub	sp, #12
 8019314:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8019316:	2300      	movs	r3, #0
 8019318:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 801931a:	4b0b      	ldr	r3, [pc, #44]	; (8019348 <HAL_FLASH_Unlock+0x38>)
 801931c:	691b      	ldr	r3, [r3, #16]
 801931e:	2b00      	cmp	r3, #0
 8019320:	da0b      	bge.n	801933a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8019322:	4b09      	ldr	r3, [pc, #36]	; (8019348 <HAL_FLASH_Unlock+0x38>)
 8019324:	4a09      	ldr	r2, [pc, #36]	; (801934c <HAL_FLASH_Unlock+0x3c>)
 8019326:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8019328:	4b07      	ldr	r3, [pc, #28]	; (8019348 <HAL_FLASH_Unlock+0x38>)
 801932a:	4a09      	ldr	r2, [pc, #36]	; (8019350 <HAL_FLASH_Unlock+0x40>)
 801932c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 801932e:	4b06      	ldr	r3, [pc, #24]	; (8019348 <HAL_FLASH_Unlock+0x38>)
 8019330:	691b      	ldr	r3, [r3, #16]
 8019332:	2b00      	cmp	r3, #0
 8019334:	da01      	bge.n	801933a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8019336:	2301      	movs	r3, #1
 8019338:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 801933a:	79fb      	ldrb	r3, [r7, #7]
}
 801933c:	4618      	mov	r0, r3
 801933e:	370c      	adds	r7, #12
 8019340:	46bd      	mov	sp, r7
 8019342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019346:	4770      	bx	lr
 8019348:	40023c00 	.word	0x40023c00
 801934c:	45670123 	.word	0x45670123
 8019350:	cdef89ab 	.word	0xcdef89ab

08019354 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8019354:	b480      	push	{r7}
 8019356:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8019358:	4b05      	ldr	r3, [pc, #20]	; (8019370 <HAL_FLASH_Lock+0x1c>)
 801935a:	691b      	ldr	r3, [r3, #16]
 801935c:	4a04      	ldr	r2, [pc, #16]	; (8019370 <HAL_FLASH_Lock+0x1c>)
 801935e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8019362:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8019364:	2300      	movs	r3, #0
}
 8019366:	4618      	mov	r0, r3
 8019368:	46bd      	mov	sp, r7
 801936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801936e:	4770      	bx	lr
 8019370:	40023c00 	.word	0x40023c00

08019374 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8019374:	b580      	push	{r7, lr}
 8019376:	b084      	sub	sp, #16
 8019378:	af00      	add	r7, sp, #0
 801937a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801937c:	2300      	movs	r3, #0
 801937e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8019380:	4b1a      	ldr	r3, [pc, #104]	; (80193ec <FLASH_WaitForLastOperation+0x78>)
 8019382:	2200      	movs	r2, #0
 8019384:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8019386:	f7ff f819 	bl	80183bc <HAL_GetTick>
 801938a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 801938c:	e010      	b.n	80193b0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 801938e:	687b      	ldr	r3, [r7, #4]
 8019390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019394:	d00c      	beq.n	80193b0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8019396:	687b      	ldr	r3, [r7, #4]
 8019398:	2b00      	cmp	r3, #0
 801939a:	d007      	beq.n	80193ac <FLASH_WaitForLastOperation+0x38>
 801939c:	f7ff f80e 	bl	80183bc <HAL_GetTick>
 80193a0:	4602      	mov	r2, r0
 80193a2:	68fb      	ldr	r3, [r7, #12]
 80193a4:	1ad3      	subs	r3, r2, r3
 80193a6:	687a      	ldr	r2, [r7, #4]
 80193a8:	429a      	cmp	r2, r3
 80193aa:	d201      	bcs.n	80193b0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80193ac:	2303      	movs	r3, #3
 80193ae:	e019      	b.n	80193e4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80193b0:	4b0f      	ldr	r3, [pc, #60]	; (80193f0 <FLASH_WaitForLastOperation+0x7c>)
 80193b2:	68db      	ldr	r3, [r3, #12]
 80193b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80193b8:	2b00      	cmp	r3, #0
 80193ba:	d1e8      	bne.n	801938e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80193bc:	4b0c      	ldr	r3, [pc, #48]	; (80193f0 <FLASH_WaitForLastOperation+0x7c>)
 80193be:	68db      	ldr	r3, [r3, #12]
 80193c0:	f003 0301 	and.w	r3, r3, #1
 80193c4:	2b00      	cmp	r3, #0
 80193c6:	d002      	beq.n	80193ce <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80193c8:	4b09      	ldr	r3, [pc, #36]	; (80193f0 <FLASH_WaitForLastOperation+0x7c>)
 80193ca:	2201      	movs	r2, #1
 80193cc:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80193ce:	4b08      	ldr	r3, [pc, #32]	; (80193f0 <FLASH_WaitForLastOperation+0x7c>)
 80193d0:	68db      	ldr	r3, [r3, #12]
 80193d2:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80193d6:	2b00      	cmp	r3, #0
 80193d8:	d003      	beq.n	80193e2 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80193da:	f000 f8a5 	bl	8019528 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80193de:	2301      	movs	r3, #1
 80193e0:	e000      	b.n	80193e4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80193e2:	2300      	movs	r3, #0
  
}  
 80193e4:	4618      	mov	r0, r3
 80193e6:	3710      	adds	r7, #16
 80193e8:	46bd      	mov	sp, r7
 80193ea:	bd80      	pop	{r7, pc}
 80193ec:	20006c1c 	.word	0x20006c1c
 80193f0:	40023c00 	.word	0x40023c00

080193f4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80193f4:	b480      	push	{r7}
 80193f6:	b085      	sub	sp, #20
 80193f8:	af00      	add	r7, sp, #0
 80193fa:	60f8      	str	r0, [r7, #12]
 80193fc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8019400:	4b14      	ldr	r3, [pc, #80]	; (8019454 <FLASH_Program_DoubleWord+0x60>)
 8019402:	691b      	ldr	r3, [r3, #16]
 8019404:	4a13      	ldr	r2, [pc, #76]	; (8019454 <FLASH_Program_DoubleWord+0x60>)
 8019406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801940a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 801940c:	4b11      	ldr	r3, [pc, #68]	; (8019454 <FLASH_Program_DoubleWord+0x60>)
 801940e:	691b      	ldr	r3, [r3, #16]
 8019410:	4a10      	ldr	r2, [pc, #64]	; (8019454 <FLASH_Program_DoubleWord+0x60>)
 8019412:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8019416:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8019418:	4b0e      	ldr	r3, [pc, #56]	; (8019454 <FLASH_Program_DoubleWord+0x60>)
 801941a:	691b      	ldr	r3, [r3, #16]
 801941c:	4a0d      	ldr	r2, [pc, #52]	; (8019454 <FLASH_Program_DoubleWord+0x60>)
 801941e:	f043 0301 	orr.w	r3, r3, #1
 8019422:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8019424:	68fb      	ldr	r3, [r7, #12]
 8019426:	683a      	ldr	r2, [r7, #0]
 8019428:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 801942a:	f3bf 8f6f 	isb	sy
}
 801942e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8019430:	e9d7 0100 	ldrd	r0, r1, [r7]
 8019434:	f04f 0200 	mov.w	r2, #0
 8019438:	f04f 0300 	mov.w	r3, #0
 801943c:	000a      	movs	r2, r1
 801943e:	2300      	movs	r3, #0
 8019440:	68f9      	ldr	r1, [r7, #12]
 8019442:	3104      	adds	r1, #4
 8019444:	4613      	mov	r3, r2
 8019446:	600b      	str	r3, [r1, #0]
}
 8019448:	bf00      	nop
 801944a:	3714      	adds	r7, #20
 801944c:	46bd      	mov	sp, r7
 801944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019452:	4770      	bx	lr
 8019454:	40023c00 	.word	0x40023c00

08019458 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8019458:	b480      	push	{r7}
 801945a:	b083      	sub	sp, #12
 801945c:	af00      	add	r7, sp, #0
 801945e:	6078      	str	r0, [r7, #4]
 8019460:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8019462:	4b0d      	ldr	r3, [pc, #52]	; (8019498 <FLASH_Program_Word+0x40>)
 8019464:	691b      	ldr	r3, [r3, #16]
 8019466:	4a0c      	ldr	r2, [pc, #48]	; (8019498 <FLASH_Program_Word+0x40>)
 8019468:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801946c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 801946e:	4b0a      	ldr	r3, [pc, #40]	; (8019498 <FLASH_Program_Word+0x40>)
 8019470:	691b      	ldr	r3, [r3, #16]
 8019472:	4a09      	ldr	r2, [pc, #36]	; (8019498 <FLASH_Program_Word+0x40>)
 8019474:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8019478:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 801947a:	4b07      	ldr	r3, [pc, #28]	; (8019498 <FLASH_Program_Word+0x40>)
 801947c:	691b      	ldr	r3, [r3, #16]
 801947e:	4a06      	ldr	r2, [pc, #24]	; (8019498 <FLASH_Program_Word+0x40>)
 8019480:	f043 0301 	orr.w	r3, r3, #1
 8019484:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8019486:	687b      	ldr	r3, [r7, #4]
 8019488:	683a      	ldr	r2, [r7, #0]
 801948a:	601a      	str	r2, [r3, #0]
}
 801948c:	bf00      	nop
 801948e:	370c      	adds	r7, #12
 8019490:	46bd      	mov	sp, r7
 8019492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019496:	4770      	bx	lr
 8019498:	40023c00 	.word	0x40023c00

0801949c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 801949c:	b480      	push	{r7}
 801949e:	b083      	sub	sp, #12
 80194a0:	af00      	add	r7, sp, #0
 80194a2:	6078      	str	r0, [r7, #4]
 80194a4:	460b      	mov	r3, r1
 80194a6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80194a8:	4b0d      	ldr	r3, [pc, #52]	; (80194e0 <FLASH_Program_HalfWord+0x44>)
 80194aa:	691b      	ldr	r3, [r3, #16]
 80194ac:	4a0c      	ldr	r2, [pc, #48]	; (80194e0 <FLASH_Program_HalfWord+0x44>)
 80194ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80194b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80194b4:	4b0a      	ldr	r3, [pc, #40]	; (80194e0 <FLASH_Program_HalfWord+0x44>)
 80194b6:	691b      	ldr	r3, [r3, #16]
 80194b8:	4a09      	ldr	r2, [pc, #36]	; (80194e0 <FLASH_Program_HalfWord+0x44>)
 80194ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80194be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80194c0:	4b07      	ldr	r3, [pc, #28]	; (80194e0 <FLASH_Program_HalfWord+0x44>)
 80194c2:	691b      	ldr	r3, [r3, #16]
 80194c4:	4a06      	ldr	r2, [pc, #24]	; (80194e0 <FLASH_Program_HalfWord+0x44>)
 80194c6:	f043 0301 	orr.w	r3, r3, #1
 80194ca:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	887a      	ldrh	r2, [r7, #2]
 80194d0:	801a      	strh	r2, [r3, #0]
}
 80194d2:	bf00      	nop
 80194d4:	370c      	adds	r7, #12
 80194d6:	46bd      	mov	sp, r7
 80194d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194dc:	4770      	bx	lr
 80194de:	bf00      	nop
 80194e0:	40023c00 	.word	0x40023c00

080194e4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80194e4:	b480      	push	{r7}
 80194e6:	b083      	sub	sp, #12
 80194e8:	af00      	add	r7, sp, #0
 80194ea:	6078      	str	r0, [r7, #4]
 80194ec:	460b      	mov	r3, r1
 80194ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80194f0:	4b0c      	ldr	r3, [pc, #48]	; (8019524 <FLASH_Program_Byte+0x40>)
 80194f2:	691b      	ldr	r3, [r3, #16]
 80194f4:	4a0b      	ldr	r2, [pc, #44]	; (8019524 <FLASH_Program_Byte+0x40>)
 80194f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80194fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80194fc:	4b09      	ldr	r3, [pc, #36]	; (8019524 <FLASH_Program_Byte+0x40>)
 80194fe:	4a09      	ldr	r2, [pc, #36]	; (8019524 <FLASH_Program_Byte+0x40>)
 8019500:	691b      	ldr	r3, [r3, #16]
 8019502:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8019504:	4b07      	ldr	r3, [pc, #28]	; (8019524 <FLASH_Program_Byte+0x40>)
 8019506:	691b      	ldr	r3, [r3, #16]
 8019508:	4a06      	ldr	r2, [pc, #24]	; (8019524 <FLASH_Program_Byte+0x40>)
 801950a:	f043 0301 	orr.w	r3, r3, #1
 801950e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8019510:	687b      	ldr	r3, [r7, #4]
 8019512:	78fa      	ldrb	r2, [r7, #3]
 8019514:	701a      	strb	r2, [r3, #0]
}
 8019516:	bf00      	nop
 8019518:	370c      	adds	r7, #12
 801951a:	46bd      	mov	sp, r7
 801951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019520:	4770      	bx	lr
 8019522:	bf00      	nop
 8019524:	40023c00 	.word	0x40023c00

08019528 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8019528:	b480      	push	{r7}
 801952a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 801952c:	4b2f      	ldr	r3, [pc, #188]	; (80195ec <FLASH_SetErrorCode+0xc4>)
 801952e:	68db      	ldr	r3, [r3, #12]
 8019530:	f003 0310 	and.w	r3, r3, #16
 8019534:	2b00      	cmp	r3, #0
 8019536:	d008      	beq.n	801954a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8019538:	4b2d      	ldr	r3, [pc, #180]	; (80195f0 <FLASH_SetErrorCode+0xc8>)
 801953a:	69db      	ldr	r3, [r3, #28]
 801953c:	f043 0310 	orr.w	r3, r3, #16
 8019540:	4a2b      	ldr	r2, [pc, #172]	; (80195f0 <FLASH_SetErrorCode+0xc8>)
 8019542:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8019544:	4b29      	ldr	r3, [pc, #164]	; (80195ec <FLASH_SetErrorCode+0xc4>)
 8019546:	2210      	movs	r2, #16
 8019548:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 801954a:	4b28      	ldr	r3, [pc, #160]	; (80195ec <FLASH_SetErrorCode+0xc4>)
 801954c:	68db      	ldr	r3, [r3, #12]
 801954e:	f003 0320 	and.w	r3, r3, #32
 8019552:	2b00      	cmp	r3, #0
 8019554:	d008      	beq.n	8019568 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8019556:	4b26      	ldr	r3, [pc, #152]	; (80195f0 <FLASH_SetErrorCode+0xc8>)
 8019558:	69db      	ldr	r3, [r3, #28]
 801955a:	f043 0308 	orr.w	r3, r3, #8
 801955e:	4a24      	ldr	r2, [pc, #144]	; (80195f0 <FLASH_SetErrorCode+0xc8>)
 8019560:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8019562:	4b22      	ldr	r3, [pc, #136]	; (80195ec <FLASH_SetErrorCode+0xc4>)
 8019564:	2220      	movs	r2, #32
 8019566:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8019568:	4b20      	ldr	r3, [pc, #128]	; (80195ec <FLASH_SetErrorCode+0xc4>)
 801956a:	68db      	ldr	r3, [r3, #12]
 801956c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019570:	2b00      	cmp	r3, #0
 8019572:	d008      	beq.n	8019586 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8019574:	4b1e      	ldr	r3, [pc, #120]	; (80195f0 <FLASH_SetErrorCode+0xc8>)
 8019576:	69db      	ldr	r3, [r3, #28]
 8019578:	f043 0304 	orr.w	r3, r3, #4
 801957c:	4a1c      	ldr	r2, [pc, #112]	; (80195f0 <FLASH_SetErrorCode+0xc8>)
 801957e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8019580:	4b1a      	ldr	r3, [pc, #104]	; (80195ec <FLASH_SetErrorCode+0xc4>)
 8019582:	2240      	movs	r2, #64	; 0x40
 8019584:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8019586:	4b19      	ldr	r3, [pc, #100]	; (80195ec <FLASH_SetErrorCode+0xc4>)
 8019588:	68db      	ldr	r3, [r3, #12]
 801958a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801958e:	2b00      	cmp	r3, #0
 8019590:	d008      	beq.n	80195a4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8019592:	4b17      	ldr	r3, [pc, #92]	; (80195f0 <FLASH_SetErrorCode+0xc8>)
 8019594:	69db      	ldr	r3, [r3, #28]
 8019596:	f043 0302 	orr.w	r3, r3, #2
 801959a:	4a15      	ldr	r2, [pc, #84]	; (80195f0 <FLASH_SetErrorCode+0xc8>)
 801959c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 801959e:	4b13      	ldr	r3, [pc, #76]	; (80195ec <FLASH_SetErrorCode+0xc4>)
 80195a0:	2280      	movs	r2, #128	; 0x80
 80195a2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80195a4:	4b11      	ldr	r3, [pc, #68]	; (80195ec <FLASH_SetErrorCode+0xc4>)
 80195a6:	68db      	ldr	r3, [r3, #12]
 80195a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80195ac:	2b00      	cmp	r3, #0
 80195ae:	d009      	beq.n	80195c4 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80195b0:	4b0f      	ldr	r3, [pc, #60]	; (80195f0 <FLASH_SetErrorCode+0xc8>)
 80195b2:	69db      	ldr	r3, [r3, #28]
 80195b4:	f043 0301 	orr.w	r3, r3, #1
 80195b8:	4a0d      	ldr	r2, [pc, #52]	; (80195f0 <FLASH_SetErrorCode+0xc8>)
 80195ba:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80195bc:	4b0b      	ldr	r3, [pc, #44]	; (80195ec <FLASH_SetErrorCode+0xc4>)
 80195be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80195c2:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80195c4:	4b09      	ldr	r3, [pc, #36]	; (80195ec <FLASH_SetErrorCode+0xc4>)
 80195c6:	68db      	ldr	r3, [r3, #12]
 80195c8:	f003 0302 	and.w	r3, r3, #2
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	d008      	beq.n	80195e2 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80195d0:	4b07      	ldr	r3, [pc, #28]	; (80195f0 <FLASH_SetErrorCode+0xc8>)
 80195d2:	69db      	ldr	r3, [r3, #28]
 80195d4:	f043 0320 	orr.w	r3, r3, #32
 80195d8:	4a05      	ldr	r2, [pc, #20]	; (80195f0 <FLASH_SetErrorCode+0xc8>)
 80195da:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80195dc:	4b03      	ldr	r3, [pc, #12]	; (80195ec <FLASH_SetErrorCode+0xc4>)
 80195de:	2202      	movs	r2, #2
 80195e0:	60da      	str	r2, [r3, #12]
  }
}
 80195e2:	bf00      	nop
 80195e4:	46bd      	mov	sp, r7
 80195e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195ea:	4770      	bx	lr
 80195ec:	40023c00 	.word	0x40023c00
 80195f0:	20006c1c 	.word	0x20006c1c

080195f4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80195f4:	b580      	push	{r7, lr}
 80195f6:	b084      	sub	sp, #16
 80195f8:	af00      	add	r7, sp, #0
 80195fa:	6078      	str	r0, [r7, #4]
 80195fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80195fe:	2301      	movs	r3, #1
 8019600:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8019602:	2300      	movs	r3, #0
 8019604:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8019606:	4b31      	ldr	r3, [pc, #196]	; (80196cc <HAL_FLASHEx_Erase+0xd8>)
 8019608:	7e1b      	ldrb	r3, [r3, #24]
 801960a:	2b01      	cmp	r3, #1
 801960c:	d101      	bne.n	8019612 <HAL_FLASHEx_Erase+0x1e>
 801960e:	2302      	movs	r3, #2
 8019610:	e058      	b.n	80196c4 <HAL_FLASHEx_Erase+0xd0>
 8019612:	4b2e      	ldr	r3, [pc, #184]	; (80196cc <HAL_FLASHEx_Erase+0xd8>)
 8019614:	2201      	movs	r2, #1
 8019616:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8019618:	f24c 3050 	movw	r0, #50000	; 0xc350
 801961c:	f7ff feaa 	bl	8019374 <FLASH_WaitForLastOperation>
 8019620:	4603      	mov	r3, r0
 8019622:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8019624:	7bfb      	ldrb	r3, [r7, #15]
 8019626:	2b00      	cmp	r3, #0
 8019628:	d148      	bne.n	80196bc <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 801962a:	683b      	ldr	r3, [r7, #0]
 801962c:	f04f 32ff 	mov.w	r2, #4294967295
 8019630:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8019632:	687b      	ldr	r3, [r7, #4]
 8019634:	681b      	ldr	r3, [r3, #0]
 8019636:	2b01      	cmp	r3, #1
 8019638:	d115      	bne.n	8019666 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	691b      	ldr	r3, [r3, #16]
 801963e:	b2da      	uxtb	r2, r3
 8019640:	687b      	ldr	r3, [r7, #4]
 8019642:	685b      	ldr	r3, [r3, #4]
 8019644:	4619      	mov	r1, r3
 8019646:	4610      	mov	r0, r2
 8019648:	f000 f844 	bl	80196d4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801964c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8019650:	f7ff fe90 	bl	8019374 <FLASH_WaitForLastOperation>
 8019654:	4603      	mov	r3, r0
 8019656:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8019658:	4b1d      	ldr	r3, [pc, #116]	; (80196d0 <HAL_FLASHEx_Erase+0xdc>)
 801965a:	691b      	ldr	r3, [r3, #16]
 801965c:	4a1c      	ldr	r2, [pc, #112]	; (80196d0 <HAL_FLASHEx_Erase+0xdc>)
 801965e:	f023 0304 	bic.w	r3, r3, #4
 8019662:	6113      	str	r3, [r2, #16]
 8019664:	e028      	b.n	80196b8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8019666:	687b      	ldr	r3, [r7, #4]
 8019668:	689b      	ldr	r3, [r3, #8]
 801966a:	60bb      	str	r3, [r7, #8]
 801966c:	e01c      	b.n	80196a8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 801966e:	687b      	ldr	r3, [r7, #4]
 8019670:	691b      	ldr	r3, [r3, #16]
 8019672:	b2db      	uxtb	r3, r3
 8019674:	4619      	mov	r1, r3
 8019676:	68b8      	ldr	r0, [r7, #8]
 8019678:	f000 f850 	bl	801971c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801967c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8019680:	f7ff fe78 	bl	8019374 <FLASH_WaitForLastOperation>
 8019684:	4603      	mov	r3, r0
 8019686:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8019688:	4b11      	ldr	r3, [pc, #68]	; (80196d0 <HAL_FLASHEx_Erase+0xdc>)
 801968a:	691b      	ldr	r3, [r3, #16]
 801968c:	4a10      	ldr	r2, [pc, #64]	; (80196d0 <HAL_FLASHEx_Erase+0xdc>)
 801968e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8019692:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8019694:	7bfb      	ldrb	r3, [r7, #15]
 8019696:	2b00      	cmp	r3, #0
 8019698:	d003      	beq.n	80196a2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 801969a:	683b      	ldr	r3, [r7, #0]
 801969c:	68ba      	ldr	r2, [r7, #8]
 801969e:	601a      	str	r2, [r3, #0]
          break;
 80196a0:	e00a      	b.n	80196b8 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80196a2:	68bb      	ldr	r3, [r7, #8]
 80196a4:	3301      	adds	r3, #1
 80196a6:	60bb      	str	r3, [r7, #8]
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	68da      	ldr	r2, [r3, #12]
 80196ac:	687b      	ldr	r3, [r7, #4]
 80196ae:	689b      	ldr	r3, [r3, #8]
 80196b0:	4413      	add	r3, r2
 80196b2:	68ba      	ldr	r2, [r7, #8]
 80196b4:	429a      	cmp	r2, r3
 80196b6:	d3da      	bcc.n	801966e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80196b8:	f000 f878 	bl	80197ac <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80196bc:	4b03      	ldr	r3, [pc, #12]	; (80196cc <HAL_FLASHEx_Erase+0xd8>)
 80196be:	2200      	movs	r2, #0
 80196c0:	761a      	strb	r2, [r3, #24]

  return status;
 80196c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80196c4:	4618      	mov	r0, r3
 80196c6:	3710      	adds	r7, #16
 80196c8:	46bd      	mov	sp, r7
 80196ca:	bd80      	pop	{r7, pc}
 80196cc:	20006c1c 	.word	0x20006c1c
 80196d0:	40023c00 	.word	0x40023c00

080196d4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80196d4:	b480      	push	{r7}
 80196d6:	b083      	sub	sp, #12
 80196d8:	af00      	add	r7, sp, #0
 80196da:	4603      	mov	r3, r0
 80196dc:	6039      	str	r1, [r7, #0]
 80196de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80196e0:	4b0d      	ldr	r3, [pc, #52]	; (8019718 <FLASH_MassErase+0x44>)
 80196e2:	691b      	ldr	r3, [r3, #16]
 80196e4:	4a0c      	ldr	r2, [pc, #48]	; (8019718 <FLASH_MassErase+0x44>)
 80196e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80196ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80196ec:	4b0a      	ldr	r3, [pc, #40]	; (8019718 <FLASH_MassErase+0x44>)
 80196ee:	691b      	ldr	r3, [r3, #16]
 80196f0:	4a09      	ldr	r2, [pc, #36]	; (8019718 <FLASH_MassErase+0x44>)
 80196f2:	f043 0304 	orr.w	r3, r3, #4
 80196f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80196f8:	4b07      	ldr	r3, [pc, #28]	; (8019718 <FLASH_MassErase+0x44>)
 80196fa:	691a      	ldr	r2, [r3, #16]
 80196fc:	79fb      	ldrb	r3, [r7, #7]
 80196fe:	021b      	lsls	r3, r3, #8
 8019700:	4313      	orrs	r3, r2
 8019702:	4a05      	ldr	r2, [pc, #20]	; (8019718 <FLASH_MassErase+0x44>)
 8019704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019708:	6113      	str	r3, [r2, #16]
}
 801970a:	bf00      	nop
 801970c:	370c      	adds	r7, #12
 801970e:	46bd      	mov	sp, r7
 8019710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019714:	4770      	bx	lr
 8019716:	bf00      	nop
 8019718:	40023c00 	.word	0x40023c00

0801971c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 801971c:	b480      	push	{r7}
 801971e:	b085      	sub	sp, #20
 8019720:	af00      	add	r7, sp, #0
 8019722:	6078      	str	r0, [r7, #4]
 8019724:	460b      	mov	r3, r1
 8019726:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8019728:	2300      	movs	r3, #0
 801972a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 801972c:	78fb      	ldrb	r3, [r7, #3]
 801972e:	2b00      	cmp	r3, #0
 8019730:	d102      	bne.n	8019738 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8019732:	2300      	movs	r3, #0
 8019734:	60fb      	str	r3, [r7, #12]
 8019736:	e010      	b.n	801975a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8019738:	78fb      	ldrb	r3, [r7, #3]
 801973a:	2b01      	cmp	r3, #1
 801973c:	d103      	bne.n	8019746 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 801973e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019742:	60fb      	str	r3, [r7, #12]
 8019744:	e009      	b.n	801975a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8019746:	78fb      	ldrb	r3, [r7, #3]
 8019748:	2b02      	cmp	r3, #2
 801974a:	d103      	bne.n	8019754 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 801974c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8019750:	60fb      	str	r3, [r7, #12]
 8019752:	e002      	b.n	801975a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8019754:	f44f 7340 	mov.w	r3, #768	; 0x300
 8019758:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801975a:	4b13      	ldr	r3, [pc, #76]	; (80197a8 <FLASH_Erase_Sector+0x8c>)
 801975c:	691b      	ldr	r3, [r3, #16]
 801975e:	4a12      	ldr	r2, [pc, #72]	; (80197a8 <FLASH_Erase_Sector+0x8c>)
 8019760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019764:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8019766:	4b10      	ldr	r3, [pc, #64]	; (80197a8 <FLASH_Erase_Sector+0x8c>)
 8019768:	691a      	ldr	r2, [r3, #16]
 801976a:	490f      	ldr	r1, [pc, #60]	; (80197a8 <FLASH_Erase_Sector+0x8c>)
 801976c:	68fb      	ldr	r3, [r7, #12]
 801976e:	4313      	orrs	r3, r2
 8019770:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8019772:	4b0d      	ldr	r3, [pc, #52]	; (80197a8 <FLASH_Erase_Sector+0x8c>)
 8019774:	691b      	ldr	r3, [r3, #16]
 8019776:	4a0c      	ldr	r2, [pc, #48]	; (80197a8 <FLASH_Erase_Sector+0x8c>)
 8019778:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 801977c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 801977e:	4b0a      	ldr	r3, [pc, #40]	; (80197a8 <FLASH_Erase_Sector+0x8c>)
 8019780:	691a      	ldr	r2, [r3, #16]
 8019782:	687b      	ldr	r3, [r7, #4]
 8019784:	00db      	lsls	r3, r3, #3
 8019786:	4313      	orrs	r3, r2
 8019788:	4a07      	ldr	r2, [pc, #28]	; (80197a8 <FLASH_Erase_Sector+0x8c>)
 801978a:	f043 0302 	orr.w	r3, r3, #2
 801978e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8019790:	4b05      	ldr	r3, [pc, #20]	; (80197a8 <FLASH_Erase_Sector+0x8c>)
 8019792:	691b      	ldr	r3, [r3, #16]
 8019794:	4a04      	ldr	r2, [pc, #16]	; (80197a8 <FLASH_Erase_Sector+0x8c>)
 8019796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801979a:	6113      	str	r3, [r2, #16]
}
 801979c:	bf00      	nop
 801979e:	3714      	adds	r7, #20
 80197a0:	46bd      	mov	sp, r7
 80197a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197a6:	4770      	bx	lr
 80197a8:	40023c00 	.word	0x40023c00

080197ac <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80197ac:	b480      	push	{r7}
 80197ae:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80197b0:	4b20      	ldr	r3, [pc, #128]	; (8019834 <FLASH_FlushCaches+0x88>)
 80197b2:	681b      	ldr	r3, [r3, #0]
 80197b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80197b8:	2b00      	cmp	r3, #0
 80197ba:	d017      	beq.n	80197ec <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80197bc:	4b1d      	ldr	r3, [pc, #116]	; (8019834 <FLASH_FlushCaches+0x88>)
 80197be:	681b      	ldr	r3, [r3, #0]
 80197c0:	4a1c      	ldr	r2, [pc, #112]	; (8019834 <FLASH_FlushCaches+0x88>)
 80197c2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80197c6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80197c8:	4b1a      	ldr	r3, [pc, #104]	; (8019834 <FLASH_FlushCaches+0x88>)
 80197ca:	681b      	ldr	r3, [r3, #0]
 80197cc:	4a19      	ldr	r2, [pc, #100]	; (8019834 <FLASH_FlushCaches+0x88>)
 80197ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80197d2:	6013      	str	r3, [r2, #0]
 80197d4:	4b17      	ldr	r3, [pc, #92]	; (8019834 <FLASH_FlushCaches+0x88>)
 80197d6:	681b      	ldr	r3, [r3, #0]
 80197d8:	4a16      	ldr	r2, [pc, #88]	; (8019834 <FLASH_FlushCaches+0x88>)
 80197da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80197de:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80197e0:	4b14      	ldr	r3, [pc, #80]	; (8019834 <FLASH_FlushCaches+0x88>)
 80197e2:	681b      	ldr	r3, [r3, #0]
 80197e4:	4a13      	ldr	r2, [pc, #76]	; (8019834 <FLASH_FlushCaches+0x88>)
 80197e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80197ea:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80197ec:	4b11      	ldr	r3, [pc, #68]	; (8019834 <FLASH_FlushCaches+0x88>)
 80197ee:	681b      	ldr	r3, [r3, #0]
 80197f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80197f4:	2b00      	cmp	r3, #0
 80197f6:	d017      	beq.n	8019828 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80197f8:	4b0e      	ldr	r3, [pc, #56]	; (8019834 <FLASH_FlushCaches+0x88>)
 80197fa:	681b      	ldr	r3, [r3, #0]
 80197fc:	4a0d      	ldr	r2, [pc, #52]	; (8019834 <FLASH_FlushCaches+0x88>)
 80197fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8019802:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8019804:	4b0b      	ldr	r3, [pc, #44]	; (8019834 <FLASH_FlushCaches+0x88>)
 8019806:	681b      	ldr	r3, [r3, #0]
 8019808:	4a0a      	ldr	r2, [pc, #40]	; (8019834 <FLASH_FlushCaches+0x88>)
 801980a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801980e:	6013      	str	r3, [r2, #0]
 8019810:	4b08      	ldr	r3, [pc, #32]	; (8019834 <FLASH_FlushCaches+0x88>)
 8019812:	681b      	ldr	r3, [r3, #0]
 8019814:	4a07      	ldr	r2, [pc, #28]	; (8019834 <FLASH_FlushCaches+0x88>)
 8019816:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801981a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 801981c:	4b05      	ldr	r3, [pc, #20]	; (8019834 <FLASH_FlushCaches+0x88>)
 801981e:	681b      	ldr	r3, [r3, #0]
 8019820:	4a04      	ldr	r2, [pc, #16]	; (8019834 <FLASH_FlushCaches+0x88>)
 8019822:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8019826:	6013      	str	r3, [r2, #0]
  }
}
 8019828:	bf00      	nop
 801982a:	46bd      	mov	sp, r7
 801982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019830:	4770      	bx	lr
 8019832:	bf00      	nop
 8019834:	40023c00 	.word	0x40023c00

08019838 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8019838:	b480      	push	{r7}
 801983a:	b089      	sub	sp, #36	; 0x24
 801983c:	af00      	add	r7, sp, #0
 801983e:	6078      	str	r0, [r7, #4]
 8019840:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8019842:	2300      	movs	r3, #0
 8019844:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8019846:	2300      	movs	r3, #0
 8019848:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801984a:	2300      	movs	r3, #0
 801984c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801984e:	2300      	movs	r3, #0
 8019850:	61fb      	str	r3, [r7, #28]
 8019852:	e165      	b.n	8019b20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8019854:	2201      	movs	r2, #1
 8019856:	69fb      	ldr	r3, [r7, #28]
 8019858:	fa02 f303 	lsl.w	r3, r2, r3
 801985c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801985e:	683b      	ldr	r3, [r7, #0]
 8019860:	681b      	ldr	r3, [r3, #0]
 8019862:	697a      	ldr	r2, [r7, #20]
 8019864:	4013      	ands	r3, r2
 8019866:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8019868:	693a      	ldr	r2, [r7, #16]
 801986a:	697b      	ldr	r3, [r7, #20]
 801986c:	429a      	cmp	r2, r3
 801986e:	f040 8154 	bne.w	8019b1a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8019872:	683b      	ldr	r3, [r7, #0]
 8019874:	685b      	ldr	r3, [r3, #4]
 8019876:	f003 0303 	and.w	r3, r3, #3
 801987a:	2b01      	cmp	r3, #1
 801987c:	d005      	beq.n	801988a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801987e:	683b      	ldr	r3, [r7, #0]
 8019880:	685b      	ldr	r3, [r3, #4]
 8019882:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8019886:	2b02      	cmp	r3, #2
 8019888:	d130      	bne.n	80198ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801988a:	687b      	ldr	r3, [r7, #4]
 801988c:	689b      	ldr	r3, [r3, #8]
 801988e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8019890:	69fb      	ldr	r3, [r7, #28]
 8019892:	005b      	lsls	r3, r3, #1
 8019894:	2203      	movs	r2, #3
 8019896:	fa02 f303 	lsl.w	r3, r2, r3
 801989a:	43db      	mvns	r3, r3
 801989c:	69ba      	ldr	r2, [r7, #24]
 801989e:	4013      	ands	r3, r2
 80198a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80198a2:	683b      	ldr	r3, [r7, #0]
 80198a4:	68da      	ldr	r2, [r3, #12]
 80198a6:	69fb      	ldr	r3, [r7, #28]
 80198a8:	005b      	lsls	r3, r3, #1
 80198aa:	fa02 f303 	lsl.w	r3, r2, r3
 80198ae:	69ba      	ldr	r2, [r7, #24]
 80198b0:	4313      	orrs	r3, r2
 80198b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80198b4:	687b      	ldr	r3, [r7, #4]
 80198b6:	69ba      	ldr	r2, [r7, #24]
 80198b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	685b      	ldr	r3, [r3, #4]
 80198be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80198c0:	2201      	movs	r2, #1
 80198c2:	69fb      	ldr	r3, [r7, #28]
 80198c4:	fa02 f303 	lsl.w	r3, r2, r3
 80198c8:	43db      	mvns	r3, r3
 80198ca:	69ba      	ldr	r2, [r7, #24]
 80198cc:	4013      	ands	r3, r2
 80198ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80198d0:	683b      	ldr	r3, [r7, #0]
 80198d2:	685b      	ldr	r3, [r3, #4]
 80198d4:	091b      	lsrs	r3, r3, #4
 80198d6:	f003 0201 	and.w	r2, r3, #1
 80198da:	69fb      	ldr	r3, [r7, #28]
 80198dc:	fa02 f303 	lsl.w	r3, r2, r3
 80198e0:	69ba      	ldr	r2, [r7, #24]
 80198e2:	4313      	orrs	r3, r2
 80198e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	69ba      	ldr	r2, [r7, #24]
 80198ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80198ec:	683b      	ldr	r3, [r7, #0]
 80198ee:	685b      	ldr	r3, [r3, #4]
 80198f0:	f003 0303 	and.w	r3, r3, #3
 80198f4:	2b03      	cmp	r3, #3
 80198f6:	d017      	beq.n	8019928 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80198f8:	687b      	ldr	r3, [r7, #4]
 80198fa:	68db      	ldr	r3, [r3, #12]
 80198fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80198fe:	69fb      	ldr	r3, [r7, #28]
 8019900:	005b      	lsls	r3, r3, #1
 8019902:	2203      	movs	r2, #3
 8019904:	fa02 f303 	lsl.w	r3, r2, r3
 8019908:	43db      	mvns	r3, r3
 801990a:	69ba      	ldr	r2, [r7, #24]
 801990c:	4013      	ands	r3, r2
 801990e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8019910:	683b      	ldr	r3, [r7, #0]
 8019912:	689a      	ldr	r2, [r3, #8]
 8019914:	69fb      	ldr	r3, [r7, #28]
 8019916:	005b      	lsls	r3, r3, #1
 8019918:	fa02 f303 	lsl.w	r3, r2, r3
 801991c:	69ba      	ldr	r2, [r7, #24]
 801991e:	4313      	orrs	r3, r2
 8019920:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8019922:	687b      	ldr	r3, [r7, #4]
 8019924:	69ba      	ldr	r2, [r7, #24]
 8019926:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8019928:	683b      	ldr	r3, [r7, #0]
 801992a:	685b      	ldr	r3, [r3, #4]
 801992c:	f003 0303 	and.w	r3, r3, #3
 8019930:	2b02      	cmp	r3, #2
 8019932:	d123      	bne.n	801997c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8019934:	69fb      	ldr	r3, [r7, #28]
 8019936:	08da      	lsrs	r2, r3, #3
 8019938:	687b      	ldr	r3, [r7, #4]
 801993a:	3208      	adds	r2, #8
 801993c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019940:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8019942:	69fb      	ldr	r3, [r7, #28]
 8019944:	f003 0307 	and.w	r3, r3, #7
 8019948:	009b      	lsls	r3, r3, #2
 801994a:	220f      	movs	r2, #15
 801994c:	fa02 f303 	lsl.w	r3, r2, r3
 8019950:	43db      	mvns	r3, r3
 8019952:	69ba      	ldr	r2, [r7, #24]
 8019954:	4013      	ands	r3, r2
 8019956:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8019958:	683b      	ldr	r3, [r7, #0]
 801995a:	691a      	ldr	r2, [r3, #16]
 801995c:	69fb      	ldr	r3, [r7, #28]
 801995e:	f003 0307 	and.w	r3, r3, #7
 8019962:	009b      	lsls	r3, r3, #2
 8019964:	fa02 f303 	lsl.w	r3, r2, r3
 8019968:	69ba      	ldr	r2, [r7, #24]
 801996a:	4313      	orrs	r3, r2
 801996c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801996e:	69fb      	ldr	r3, [r7, #28]
 8019970:	08da      	lsrs	r2, r3, #3
 8019972:	687b      	ldr	r3, [r7, #4]
 8019974:	3208      	adds	r2, #8
 8019976:	69b9      	ldr	r1, [r7, #24]
 8019978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	681b      	ldr	r3, [r3, #0]
 8019980:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8019982:	69fb      	ldr	r3, [r7, #28]
 8019984:	005b      	lsls	r3, r3, #1
 8019986:	2203      	movs	r2, #3
 8019988:	fa02 f303 	lsl.w	r3, r2, r3
 801998c:	43db      	mvns	r3, r3
 801998e:	69ba      	ldr	r2, [r7, #24]
 8019990:	4013      	ands	r3, r2
 8019992:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8019994:	683b      	ldr	r3, [r7, #0]
 8019996:	685b      	ldr	r3, [r3, #4]
 8019998:	f003 0203 	and.w	r2, r3, #3
 801999c:	69fb      	ldr	r3, [r7, #28]
 801999e:	005b      	lsls	r3, r3, #1
 80199a0:	fa02 f303 	lsl.w	r3, r2, r3
 80199a4:	69ba      	ldr	r2, [r7, #24]
 80199a6:	4313      	orrs	r3, r2
 80199a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80199aa:	687b      	ldr	r3, [r7, #4]
 80199ac:	69ba      	ldr	r2, [r7, #24]
 80199ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80199b0:	683b      	ldr	r3, [r7, #0]
 80199b2:	685b      	ldr	r3, [r3, #4]
 80199b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80199b8:	2b00      	cmp	r3, #0
 80199ba:	f000 80ae 	beq.w	8019b1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80199be:	2300      	movs	r3, #0
 80199c0:	60fb      	str	r3, [r7, #12]
 80199c2:	4b5d      	ldr	r3, [pc, #372]	; (8019b38 <HAL_GPIO_Init+0x300>)
 80199c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80199c6:	4a5c      	ldr	r2, [pc, #368]	; (8019b38 <HAL_GPIO_Init+0x300>)
 80199c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80199cc:	6453      	str	r3, [r2, #68]	; 0x44
 80199ce:	4b5a      	ldr	r3, [pc, #360]	; (8019b38 <HAL_GPIO_Init+0x300>)
 80199d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80199d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80199d6:	60fb      	str	r3, [r7, #12]
 80199d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80199da:	4a58      	ldr	r2, [pc, #352]	; (8019b3c <HAL_GPIO_Init+0x304>)
 80199dc:	69fb      	ldr	r3, [r7, #28]
 80199de:	089b      	lsrs	r3, r3, #2
 80199e0:	3302      	adds	r3, #2
 80199e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80199e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80199e8:	69fb      	ldr	r3, [r7, #28]
 80199ea:	f003 0303 	and.w	r3, r3, #3
 80199ee:	009b      	lsls	r3, r3, #2
 80199f0:	220f      	movs	r2, #15
 80199f2:	fa02 f303 	lsl.w	r3, r2, r3
 80199f6:	43db      	mvns	r3, r3
 80199f8:	69ba      	ldr	r2, [r7, #24]
 80199fa:	4013      	ands	r3, r2
 80199fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80199fe:	687b      	ldr	r3, [r7, #4]
 8019a00:	4a4f      	ldr	r2, [pc, #316]	; (8019b40 <HAL_GPIO_Init+0x308>)
 8019a02:	4293      	cmp	r3, r2
 8019a04:	d025      	beq.n	8019a52 <HAL_GPIO_Init+0x21a>
 8019a06:	687b      	ldr	r3, [r7, #4]
 8019a08:	4a4e      	ldr	r2, [pc, #312]	; (8019b44 <HAL_GPIO_Init+0x30c>)
 8019a0a:	4293      	cmp	r3, r2
 8019a0c:	d01f      	beq.n	8019a4e <HAL_GPIO_Init+0x216>
 8019a0e:	687b      	ldr	r3, [r7, #4]
 8019a10:	4a4d      	ldr	r2, [pc, #308]	; (8019b48 <HAL_GPIO_Init+0x310>)
 8019a12:	4293      	cmp	r3, r2
 8019a14:	d019      	beq.n	8019a4a <HAL_GPIO_Init+0x212>
 8019a16:	687b      	ldr	r3, [r7, #4]
 8019a18:	4a4c      	ldr	r2, [pc, #304]	; (8019b4c <HAL_GPIO_Init+0x314>)
 8019a1a:	4293      	cmp	r3, r2
 8019a1c:	d013      	beq.n	8019a46 <HAL_GPIO_Init+0x20e>
 8019a1e:	687b      	ldr	r3, [r7, #4]
 8019a20:	4a4b      	ldr	r2, [pc, #300]	; (8019b50 <HAL_GPIO_Init+0x318>)
 8019a22:	4293      	cmp	r3, r2
 8019a24:	d00d      	beq.n	8019a42 <HAL_GPIO_Init+0x20a>
 8019a26:	687b      	ldr	r3, [r7, #4]
 8019a28:	4a4a      	ldr	r2, [pc, #296]	; (8019b54 <HAL_GPIO_Init+0x31c>)
 8019a2a:	4293      	cmp	r3, r2
 8019a2c:	d007      	beq.n	8019a3e <HAL_GPIO_Init+0x206>
 8019a2e:	687b      	ldr	r3, [r7, #4]
 8019a30:	4a49      	ldr	r2, [pc, #292]	; (8019b58 <HAL_GPIO_Init+0x320>)
 8019a32:	4293      	cmp	r3, r2
 8019a34:	d101      	bne.n	8019a3a <HAL_GPIO_Init+0x202>
 8019a36:	2306      	movs	r3, #6
 8019a38:	e00c      	b.n	8019a54 <HAL_GPIO_Init+0x21c>
 8019a3a:	2307      	movs	r3, #7
 8019a3c:	e00a      	b.n	8019a54 <HAL_GPIO_Init+0x21c>
 8019a3e:	2305      	movs	r3, #5
 8019a40:	e008      	b.n	8019a54 <HAL_GPIO_Init+0x21c>
 8019a42:	2304      	movs	r3, #4
 8019a44:	e006      	b.n	8019a54 <HAL_GPIO_Init+0x21c>
 8019a46:	2303      	movs	r3, #3
 8019a48:	e004      	b.n	8019a54 <HAL_GPIO_Init+0x21c>
 8019a4a:	2302      	movs	r3, #2
 8019a4c:	e002      	b.n	8019a54 <HAL_GPIO_Init+0x21c>
 8019a4e:	2301      	movs	r3, #1
 8019a50:	e000      	b.n	8019a54 <HAL_GPIO_Init+0x21c>
 8019a52:	2300      	movs	r3, #0
 8019a54:	69fa      	ldr	r2, [r7, #28]
 8019a56:	f002 0203 	and.w	r2, r2, #3
 8019a5a:	0092      	lsls	r2, r2, #2
 8019a5c:	4093      	lsls	r3, r2
 8019a5e:	69ba      	ldr	r2, [r7, #24]
 8019a60:	4313      	orrs	r3, r2
 8019a62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8019a64:	4935      	ldr	r1, [pc, #212]	; (8019b3c <HAL_GPIO_Init+0x304>)
 8019a66:	69fb      	ldr	r3, [r7, #28]
 8019a68:	089b      	lsrs	r3, r3, #2
 8019a6a:	3302      	adds	r3, #2
 8019a6c:	69ba      	ldr	r2, [r7, #24]
 8019a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8019a72:	4b3a      	ldr	r3, [pc, #232]	; (8019b5c <HAL_GPIO_Init+0x324>)
 8019a74:	681b      	ldr	r3, [r3, #0]
 8019a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019a78:	693b      	ldr	r3, [r7, #16]
 8019a7a:	43db      	mvns	r3, r3
 8019a7c:	69ba      	ldr	r2, [r7, #24]
 8019a7e:	4013      	ands	r3, r2
 8019a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8019a82:	683b      	ldr	r3, [r7, #0]
 8019a84:	685b      	ldr	r3, [r3, #4]
 8019a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019a8a:	2b00      	cmp	r3, #0
 8019a8c:	d003      	beq.n	8019a96 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8019a8e:	69ba      	ldr	r2, [r7, #24]
 8019a90:	693b      	ldr	r3, [r7, #16]
 8019a92:	4313      	orrs	r3, r2
 8019a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8019a96:	4a31      	ldr	r2, [pc, #196]	; (8019b5c <HAL_GPIO_Init+0x324>)
 8019a98:	69bb      	ldr	r3, [r7, #24]
 8019a9a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8019a9c:	4b2f      	ldr	r3, [pc, #188]	; (8019b5c <HAL_GPIO_Init+0x324>)
 8019a9e:	685b      	ldr	r3, [r3, #4]
 8019aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019aa2:	693b      	ldr	r3, [r7, #16]
 8019aa4:	43db      	mvns	r3, r3
 8019aa6:	69ba      	ldr	r2, [r7, #24]
 8019aa8:	4013      	ands	r3, r2
 8019aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8019aac:	683b      	ldr	r3, [r7, #0]
 8019aae:	685b      	ldr	r3, [r3, #4]
 8019ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019ab4:	2b00      	cmp	r3, #0
 8019ab6:	d003      	beq.n	8019ac0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8019ab8:	69ba      	ldr	r2, [r7, #24]
 8019aba:	693b      	ldr	r3, [r7, #16]
 8019abc:	4313      	orrs	r3, r2
 8019abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8019ac0:	4a26      	ldr	r2, [pc, #152]	; (8019b5c <HAL_GPIO_Init+0x324>)
 8019ac2:	69bb      	ldr	r3, [r7, #24]
 8019ac4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8019ac6:	4b25      	ldr	r3, [pc, #148]	; (8019b5c <HAL_GPIO_Init+0x324>)
 8019ac8:	689b      	ldr	r3, [r3, #8]
 8019aca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019acc:	693b      	ldr	r3, [r7, #16]
 8019ace:	43db      	mvns	r3, r3
 8019ad0:	69ba      	ldr	r2, [r7, #24]
 8019ad2:	4013      	ands	r3, r2
 8019ad4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8019ad6:	683b      	ldr	r3, [r7, #0]
 8019ad8:	685b      	ldr	r3, [r3, #4]
 8019ada:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	d003      	beq.n	8019aea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8019ae2:	69ba      	ldr	r2, [r7, #24]
 8019ae4:	693b      	ldr	r3, [r7, #16]
 8019ae6:	4313      	orrs	r3, r2
 8019ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8019aea:	4a1c      	ldr	r2, [pc, #112]	; (8019b5c <HAL_GPIO_Init+0x324>)
 8019aec:	69bb      	ldr	r3, [r7, #24]
 8019aee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8019af0:	4b1a      	ldr	r3, [pc, #104]	; (8019b5c <HAL_GPIO_Init+0x324>)
 8019af2:	68db      	ldr	r3, [r3, #12]
 8019af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019af6:	693b      	ldr	r3, [r7, #16]
 8019af8:	43db      	mvns	r3, r3
 8019afa:	69ba      	ldr	r2, [r7, #24]
 8019afc:	4013      	ands	r3, r2
 8019afe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8019b00:	683b      	ldr	r3, [r7, #0]
 8019b02:	685b      	ldr	r3, [r3, #4]
 8019b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8019b08:	2b00      	cmp	r3, #0
 8019b0a:	d003      	beq.n	8019b14 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8019b0c:	69ba      	ldr	r2, [r7, #24]
 8019b0e:	693b      	ldr	r3, [r7, #16]
 8019b10:	4313      	orrs	r3, r2
 8019b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8019b14:	4a11      	ldr	r2, [pc, #68]	; (8019b5c <HAL_GPIO_Init+0x324>)
 8019b16:	69bb      	ldr	r3, [r7, #24]
 8019b18:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8019b1a:	69fb      	ldr	r3, [r7, #28]
 8019b1c:	3301      	adds	r3, #1
 8019b1e:	61fb      	str	r3, [r7, #28]
 8019b20:	69fb      	ldr	r3, [r7, #28]
 8019b22:	2b0f      	cmp	r3, #15
 8019b24:	f67f ae96 	bls.w	8019854 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8019b28:	bf00      	nop
 8019b2a:	bf00      	nop
 8019b2c:	3724      	adds	r7, #36	; 0x24
 8019b2e:	46bd      	mov	sp, r7
 8019b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b34:	4770      	bx	lr
 8019b36:	bf00      	nop
 8019b38:	40023800 	.word	0x40023800
 8019b3c:	40013800 	.word	0x40013800
 8019b40:	40020000 	.word	0x40020000
 8019b44:	40020400 	.word	0x40020400
 8019b48:	40020800 	.word	0x40020800
 8019b4c:	40020c00 	.word	0x40020c00
 8019b50:	40021000 	.word	0x40021000
 8019b54:	40021400 	.word	0x40021400
 8019b58:	40021800 	.word	0x40021800
 8019b5c:	40013c00 	.word	0x40013c00

08019b60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8019b60:	b480      	push	{r7}
 8019b62:	b085      	sub	sp, #20
 8019b64:	af00      	add	r7, sp, #0
 8019b66:	6078      	str	r0, [r7, #4]
 8019b68:	460b      	mov	r3, r1
 8019b6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	691a      	ldr	r2, [r3, #16]
 8019b70:	887b      	ldrh	r3, [r7, #2]
 8019b72:	4013      	ands	r3, r2
 8019b74:	2b00      	cmp	r3, #0
 8019b76:	d002      	beq.n	8019b7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8019b78:	2301      	movs	r3, #1
 8019b7a:	73fb      	strb	r3, [r7, #15]
 8019b7c:	e001      	b.n	8019b82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8019b7e:	2300      	movs	r3, #0
 8019b80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8019b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8019b84:	4618      	mov	r0, r3
 8019b86:	3714      	adds	r7, #20
 8019b88:	46bd      	mov	sp, r7
 8019b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b8e:	4770      	bx	lr

08019b90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8019b90:	b480      	push	{r7}
 8019b92:	b083      	sub	sp, #12
 8019b94:	af00      	add	r7, sp, #0
 8019b96:	6078      	str	r0, [r7, #4]
 8019b98:	460b      	mov	r3, r1
 8019b9a:	807b      	strh	r3, [r7, #2]
 8019b9c:	4613      	mov	r3, r2
 8019b9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8019ba0:	787b      	ldrb	r3, [r7, #1]
 8019ba2:	2b00      	cmp	r3, #0
 8019ba4:	d003      	beq.n	8019bae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8019ba6:	887a      	ldrh	r2, [r7, #2]
 8019ba8:	687b      	ldr	r3, [r7, #4]
 8019baa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8019bac:	e003      	b.n	8019bb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8019bae:	887b      	ldrh	r3, [r7, #2]
 8019bb0:	041a      	lsls	r2, r3, #16
 8019bb2:	687b      	ldr	r3, [r7, #4]
 8019bb4:	619a      	str	r2, [r3, #24]
}
 8019bb6:	bf00      	nop
 8019bb8:	370c      	adds	r7, #12
 8019bba:	46bd      	mov	sp, r7
 8019bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bc0:	4770      	bx	lr

08019bc2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8019bc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019bc4:	b08f      	sub	sp, #60	; 0x3c
 8019bc6:	af0a      	add	r7, sp, #40	; 0x28
 8019bc8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	2b00      	cmp	r3, #0
 8019bce:	d101      	bne.n	8019bd4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8019bd0:	2301      	movs	r3, #1
 8019bd2:	e116      	b.n	8019e02 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8019bd4:	687b      	ldr	r3, [r7, #4]
 8019bd6:	681b      	ldr	r3, [r3, #0]
 8019bd8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8019bda:	687b      	ldr	r3, [r7, #4]
 8019bdc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8019be0:	b2db      	uxtb	r3, r3
 8019be2:	2b00      	cmp	r3, #0
 8019be4:	d106      	bne.n	8019bf4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8019be6:	687b      	ldr	r3, [r7, #4]
 8019be8:	2200      	movs	r2, #0
 8019bea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8019bee:	6878      	ldr	r0, [r7, #4]
 8019bf0:	f008 fc38 	bl	8022464 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8019bf4:	687b      	ldr	r3, [r7, #4]
 8019bf6:	2203      	movs	r2, #3
 8019bf8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8019bfc:	68bb      	ldr	r3, [r7, #8]
 8019bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019c04:	2b00      	cmp	r3, #0
 8019c06:	d102      	bne.n	8019c0e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8019c08:	687b      	ldr	r3, [r7, #4]
 8019c0a:	2200      	movs	r2, #0
 8019c0c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8019c0e:	687b      	ldr	r3, [r7, #4]
 8019c10:	681b      	ldr	r3, [r3, #0]
 8019c12:	4618      	mov	r0, r3
 8019c14:	f004 f8af 	bl	801dd76 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8019c18:	687b      	ldr	r3, [r7, #4]
 8019c1a:	681b      	ldr	r3, [r3, #0]
 8019c1c:	603b      	str	r3, [r7, #0]
 8019c1e:	687e      	ldr	r6, [r7, #4]
 8019c20:	466d      	mov	r5, sp
 8019c22:	f106 0410 	add.w	r4, r6, #16
 8019c26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019c28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019c2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019c2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019c2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8019c32:	e885 0003 	stmia.w	r5, {r0, r1}
 8019c36:	1d33      	adds	r3, r6, #4
 8019c38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019c3a:	6838      	ldr	r0, [r7, #0]
 8019c3c:	f003 ff86 	bl	801db4c <USB_CoreInit>
 8019c40:	4603      	mov	r3, r0
 8019c42:	2b00      	cmp	r3, #0
 8019c44:	d005      	beq.n	8019c52 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8019c46:	687b      	ldr	r3, [r7, #4]
 8019c48:	2202      	movs	r2, #2
 8019c4a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8019c4e:	2301      	movs	r3, #1
 8019c50:	e0d7      	b.n	8019e02 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8019c52:	687b      	ldr	r3, [r7, #4]
 8019c54:	681b      	ldr	r3, [r3, #0]
 8019c56:	2100      	movs	r1, #0
 8019c58:	4618      	mov	r0, r3
 8019c5a:	f004 f89d 	bl	801dd98 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019c5e:	2300      	movs	r3, #0
 8019c60:	73fb      	strb	r3, [r7, #15]
 8019c62:	e04a      	b.n	8019cfa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8019c64:	7bfa      	ldrb	r2, [r7, #15]
 8019c66:	6879      	ldr	r1, [r7, #4]
 8019c68:	4613      	mov	r3, r2
 8019c6a:	00db      	lsls	r3, r3, #3
 8019c6c:	1a9b      	subs	r3, r3, r2
 8019c6e:	009b      	lsls	r3, r3, #2
 8019c70:	440b      	add	r3, r1
 8019c72:	333d      	adds	r3, #61	; 0x3d
 8019c74:	2201      	movs	r2, #1
 8019c76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8019c78:	7bfa      	ldrb	r2, [r7, #15]
 8019c7a:	6879      	ldr	r1, [r7, #4]
 8019c7c:	4613      	mov	r3, r2
 8019c7e:	00db      	lsls	r3, r3, #3
 8019c80:	1a9b      	subs	r3, r3, r2
 8019c82:	009b      	lsls	r3, r3, #2
 8019c84:	440b      	add	r3, r1
 8019c86:	333c      	adds	r3, #60	; 0x3c
 8019c88:	7bfa      	ldrb	r2, [r7, #15]
 8019c8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8019c8c:	7bfa      	ldrb	r2, [r7, #15]
 8019c8e:	7bfb      	ldrb	r3, [r7, #15]
 8019c90:	b298      	uxth	r0, r3
 8019c92:	6879      	ldr	r1, [r7, #4]
 8019c94:	4613      	mov	r3, r2
 8019c96:	00db      	lsls	r3, r3, #3
 8019c98:	1a9b      	subs	r3, r3, r2
 8019c9a:	009b      	lsls	r3, r3, #2
 8019c9c:	440b      	add	r3, r1
 8019c9e:	3342      	adds	r3, #66	; 0x42
 8019ca0:	4602      	mov	r2, r0
 8019ca2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8019ca4:	7bfa      	ldrb	r2, [r7, #15]
 8019ca6:	6879      	ldr	r1, [r7, #4]
 8019ca8:	4613      	mov	r3, r2
 8019caa:	00db      	lsls	r3, r3, #3
 8019cac:	1a9b      	subs	r3, r3, r2
 8019cae:	009b      	lsls	r3, r3, #2
 8019cb0:	440b      	add	r3, r1
 8019cb2:	333f      	adds	r3, #63	; 0x3f
 8019cb4:	2200      	movs	r2, #0
 8019cb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8019cb8:	7bfa      	ldrb	r2, [r7, #15]
 8019cba:	6879      	ldr	r1, [r7, #4]
 8019cbc:	4613      	mov	r3, r2
 8019cbe:	00db      	lsls	r3, r3, #3
 8019cc0:	1a9b      	subs	r3, r3, r2
 8019cc2:	009b      	lsls	r3, r3, #2
 8019cc4:	440b      	add	r3, r1
 8019cc6:	3344      	adds	r3, #68	; 0x44
 8019cc8:	2200      	movs	r2, #0
 8019cca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8019ccc:	7bfa      	ldrb	r2, [r7, #15]
 8019cce:	6879      	ldr	r1, [r7, #4]
 8019cd0:	4613      	mov	r3, r2
 8019cd2:	00db      	lsls	r3, r3, #3
 8019cd4:	1a9b      	subs	r3, r3, r2
 8019cd6:	009b      	lsls	r3, r3, #2
 8019cd8:	440b      	add	r3, r1
 8019cda:	3348      	adds	r3, #72	; 0x48
 8019cdc:	2200      	movs	r2, #0
 8019cde:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8019ce0:	7bfa      	ldrb	r2, [r7, #15]
 8019ce2:	6879      	ldr	r1, [r7, #4]
 8019ce4:	4613      	mov	r3, r2
 8019ce6:	00db      	lsls	r3, r3, #3
 8019ce8:	1a9b      	subs	r3, r3, r2
 8019cea:	009b      	lsls	r3, r3, #2
 8019cec:	440b      	add	r3, r1
 8019cee:	3350      	adds	r3, #80	; 0x50
 8019cf0:	2200      	movs	r2, #0
 8019cf2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019cf4:	7bfb      	ldrb	r3, [r7, #15]
 8019cf6:	3301      	adds	r3, #1
 8019cf8:	73fb      	strb	r3, [r7, #15]
 8019cfa:	7bfa      	ldrb	r2, [r7, #15]
 8019cfc:	687b      	ldr	r3, [r7, #4]
 8019cfe:	685b      	ldr	r3, [r3, #4]
 8019d00:	429a      	cmp	r2, r3
 8019d02:	d3af      	bcc.n	8019c64 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019d04:	2300      	movs	r3, #0
 8019d06:	73fb      	strb	r3, [r7, #15]
 8019d08:	e044      	b.n	8019d94 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8019d0a:	7bfa      	ldrb	r2, [r7, #15]
 8019d0c:	6879      	ldr	r1, [r7, #4]
 8019d0e:	4613      	mov	r3, r2
 8019d10:	00db      	lsls	r3, r3, #3
 8019d12:	1a9b      	subs	r3, r3, r2
 8019d14:	009b      	lsls	r3, r3, #2
 8019d16:	440b      	add	r3, r1
 8019d18:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8019d1c:	2200      	movs	r2, #0
 8019d1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8019d20:	7bfa      	ldrb	r2, [r7, #15]
 8019d22:	6879      	ldr	r1, [r7, #4]
 8019d24:	4613      	mov	r3, r2
 8019d26:	00db      	lsls	r3, r3, #3
 8019d28:	1a9b      	subs	r3, r3, r2
 8019d2a:	009b      	lsls	r3, r3, #2
 8019d2c:	440b      	add	r3, r1
 8019d2e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8019d32:	7bfa      	ldrb	r2, [r7, #15]
 8019d34:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8019d36:	7bfa      	ldrb	r2, [r7, #15]
 8019d38:	6879      	ldr	r1, [r7, #4]
 8019d3a:	4613      	mov	r3, r2
 8019d3c:	00db      	lsls	r3, r3, #3
 8019d3e:	1a9b      	subs	r3, r3, r2
 8019d40:	009b      	lsls	r3, r3, #2
 8019d42:	440b      	add	r3, r1
 8019d44:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8019d48:	2200      	movs	r2, #0
 8019d4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8019d4c:	7bfa      	ldrb	r2, [r7, #15]
 8019d4e:	6879      	ldr	r1, [r7, #4]
 8019d50:	4613      	mov	r3, r2
 8019d52:	00db      	lsls	r3, r3, #3
 8019d54:	1a9b      	subs	r3, r3, r2
 8019d56:	009b      	lsls	r3, r3, #2
 8019d58:	440b      	add	r3, r1
 8019d5a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8019d5e:	2200      	movs	r2, #0
 8019d60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8019d62:	7bfa      	ldrb	r2, [r7, #15]
 8019d64:	6879      	ldr	r1, [r7, #4]
 8019d66:	4613      	mov	r3, r2
 8019d68:	00db      	lsls	r3, r3, #3
 8019d6a:	1a9b      	subs	r3, r3, r2
 8019d6c:	009b      	lsls	r3, r3, #2
 8019d6e:	440b      	add	r3, r1
 8019d70:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019d74:	2200      	movs	r2, #0
 8019d76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8019d78:	7bfa      	ldrb	r2, [r7, #15]
 8019d7a:	6879      	ldr	r1, [r7, #4]
 8019d7c:	4613      	mov	r3, r2
 8019d7e:	00db      	lsls	r3, r3, #3
 8019d80:	1a9b      	subs	r3, r3, r2
 8019d82:	009b      	lsls	r3, r3, #2
 8019d84:	440b      	add	r3, r1
 8019d86:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8019d8a:	2200      	movs	r2, #0
 8019d8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019d8e:	7bfb      	ldrb	r3, [r7, #15]
 8019d90:	3301      	adds	r3, #1
 8019d92:	73fb      	strb	r3, [r7, #15]
 8019d94:	7bfa      	ldrb	r2, [r7, #15]
 8019d96:	687b      	ldr	r3, [r7, #4]
 8019d98:	685b      	ldr	r3, [r3, #4]
 8019d9a:	429a      	cmp	r2, r3
 8019d9c:	d3b5      	bcc.n	8019d0a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8019d9e:	687b      	ldr	r3, [r7, #4]
 8019da0:	681b      	ldr	r3, [r3, #0]
 8019da2:	603b      	str	r3, [r7, #0]
 8019da4:	687e      	ldr	r6, [r7, #4]
 8019da6:	466d      	mov	r5, sp
 8019da8:	f106 0410 	add.w	r4, r6, #16
 8019dac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019dae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019db0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019db2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019db4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8019db8:	e885 0003 	stmia.w	r5, {r0, r1}
 8019dbc:	1d33      	adds	r3, r6, #4
 8019dbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019dc0:	6838      	ldr	r0, [r7, #0]
 8019dc2:	f004 f835 	bl	801de30 <USB_DevInit>
 8019dc6:	4603      	mov	r3, r0
 8019dc8:	2b00      	cmp	r3, #0
 8019dca:	d005      	beq.n	8019dd8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8019dcc:	687b      	ldr	r3, [r7, #4]
 8019dce:	2202      	movs	r2, #2
 8019dd0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8019dd4:	2301      	movs	r3, #1
 8019dd6:	e014      	b.n	8019e02 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	2200      	movs	r2, #0
 8019ddc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	2201      	movs	r2, #1
 8019de4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8019de8:	687b      	ldr	r3, [r7, #4]
 8019dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019dec:	2b01      	cmp	r3, #1
 8019dee:	d102      	bne.n	8019df6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8019df0:	6878      	ldr	r0, [r7, #4]
 8019df2:	f001 f8bf 	bl	801af74 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8019df6:	687b      	ldr	r3, [r7, #4]
 8019df8:	681b      	ldr	r3, [r3, #0]
 8019dfa:	4618      	mov	r0, r3
 8019dfc:	f005 f8a4 	bl	801ef48 <USB_DevDisconnect>

  return HAL_OK;
 8019e00:	2300      	movs	r3, #0
}
 8019e02:	4618      	mov	r0, r3
 8019e04:	3714      	adds	r7, #20
 8019e06:	46bd      	mov	sp, r7
 8019e08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019e0a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8019e0a:	b580      	push	{r7, lr}
 8019e0c:	b084      	sub	sp, #16
 8019e0e:	af00      	add	r7, sp, #0
 8019e10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8019e12:	687b      	ldr	r3, [r7, #4]
 8019e14:	681b      	ldr	r3, [r3, #0]
 8019e16:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8019e18:	687b      	ldr	r3, [r7, #4]
 8019e1a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8019e1e:	2b01      	cmp	r3, #1
 8019e20:	d101      	bne.n	8019e26 <HAL_PCD_Start+0x1c>
 8019e22:	2302      	movs	r3, #2
 8019e24:	e020      	b.n	8019e68 <HAL_PCD_Start+0x5e>
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	2201      	movs	r2, #1
 8019e2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8019e2e:	687b      	ldr	r3, [r7, #4]
 8019e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019e32:	2b01      	cmp	r3, #1
 8019e34:	d109      	bne.n	8019e4a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8019e36:	687b      	ldr	r3, [r7, #4]
 8019e38:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8019e3a:	2b01      	cmp	r3, #1
 8019e3c:	d005      	beq.n	8019e4a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8019e3e:	68fb      	ldr	r3, [r7, #12]
 8019e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019e42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8019e46:	68fb      	ldr	r3, [r7, #12]
 8019e48:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8019e4a:	687b      	ldr	r3, [r7, #4]
 8019e4c:	681b      	ldr	r3, [r3, #0]
 8019e4e:	4618      	mov	r0, r3
 8019e50:	f003 ff80 	bl	801dd54 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	681b      	ldr	r3, [r3, #0]
 8019e58:	4618      	mov	r0, r3
 8019e5a:	f005 f854 	bl	801ef06 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8019e5e:	687b      	ldr	r3, [r7, #4]
 8019e60:	2200      	movs	r2, #0
 8019e62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8019e66:	2300      	movs	r3, #0
}
 8019e68:	4618      	mov	r0, r3
 8019e6a:	3710      	adds	r7, #16
 8019e6c:	46bd      	mov	sp, r7
 8019e6e:	bd80      	pop	{r7, pc}

08019e70 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8019e70:	b590      	push	{r4, r7, lr}
 8019e72:	b08d      	sub	sp, #52	; 0x34
 8019e74:	af00      	add	r7, sp, #0
 8019e76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	681b      	ldr	r3, [r3, #0]
 8019e7c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019e7e:	6a3b      	ldr	r3, [r7, #32]
 8019e80:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8019e82:	687b      	ldr	r3, [r7, #4]
 8019e84:	681b      	ldr	r3, [r3, #0]
 8019e86:	4618      	mov	r0, r3
 8019e88:	f005 f912 	bl	801f0b0 <USB_GetMode>
 8019e8c:	4603      	mov	r3, r0
 8019e8e:	2b00      	cmp	r3, #0
 8019e90:	f040 83ca 	bne.w	801a628 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8019e94:	687b      	ldr	r3, [r7, #4]
 8019e96:	681b      	ldr	r3, [r3, #0]
 8019e98:	4618      	mov	r0, r3
 8019e9a:	f005 f876 	bl	801ef8a <USB_ReadInterrupts>
 8019e9e:	4603      	mov	r3, r0
 8019ea0:	2b00      	cmp	r3, #0
 8019ea2:	f000 83c0 	beq.w	801a626 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8019ea6:	687b      	ldr	r3, [r7, #4]
 8019ea8:	681b      	ldr	r3, [r3, #0]
 8019eaa:	4618      	mov	r0, r3
 8019eac:	f005 f86d 	bl	801ef8a <USB_ReadInterrupts>
 8019eb0:	4603      	mov	r3, r0
 8019eb2:	f003 0302 	and.w	r3, r3, #2
 8019eb6:	2b02      	cmp	r3, #2
 8019eb8:	d107      	bne.n	8019eca <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	681b      	ldr	r3, [r3, #0]
 8019ebe:	695a      	ldr	r2, [r3, #20]
 8019ec0:	687b      	ldr	r3, [r7, #4]
 8019ec2:	681b      	ldr	r3, [r3, #0]
 8019ec4:	f002 0202 	and.w	r2, r2, #2
 8019ec8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8019eca:	687b      	ldr	r3, [r7, #4]
 8019ecc:	681b      	ldr	r3, [r3, #0]
 8019ece:	4618      	mov	r0, r3
 8019ed0:	f005 f85b 	bl	801ef8a <USB_ReadInterrupts>
 8019ed4:	4603      	mov	r3, r0
 8019ed6:	f003 0310 	and.w	r3, r3, #16
 8019eda:	2b10      	cmp	r3, #16
 8019edc:	d161      	bne.n	8019fa2 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	681b      	ldr	r3, [r3, #0]
 8019ee2:	699a      	ldr	r2, [r3, #24]
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	681b      	ldr	r3, [r3, #0]
 8019ee8:	f022 0210 	bic.w	r2, r2, #16
 8019eec:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8019eee:	6a3b      	ldr	r3, [r7, #32]
 8019ef0:	6a1b      	ldr	r3, [r3, #32]
 8019ef2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8019ef4:	69bb      	ldr	r3, [r7, #24]
 8019ef6:	f003 020f 	and.w	r2, r3, #15
 8019efa:	4613      	mov	r3, r2
 8019efc:	00db      	lsls	r3, r3, #3
 8019efe:	1a9b      	subs	r3, r3, r2
 8019f00:	009b      	lsls	r3, r3, #2
 8019f02:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8019f06:	687a      	ldr	r2, [r7, #4]
 8019f08:	4413      	add	r3, r2
 8019f0a:	3304      	adds	r3, #4
 8019f0c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8019f0e:	69bb      	ldr	r3, [r7, #24]
 8019f10:	0c5b      	lsrs	r3, r3, #17
 8019f12:	f003 030f 	and.w	r3, r3, #15
 8019f16:	2b02      	cmp	r3, #2
 8019f18:	d124      	bne.n	8019f64 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8019f1a:	69ba      	ldr	r2, [r7, #24]
 8019f1c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8019f20:	4013      	ands	r3, r2
 8019f22:	2b00      	cmp	r3, #0
 8019f24:	d035      	beq.n	8019f92 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8019f26:	697b      	ldr	r3, [r7, #20]
 8019f28:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8019f2a:	69bb      	ldr	r3, [r7, #24]
 8019f2c:	091b      	lsrs	r3, r3, #4
 8019f2e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8019f30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019f34:	b29b      	uxth	r3, r3
 8019f36:	461a      	mov	r2, r3
 8019f38:	6a38      	ldr	r0, [r7, #32]
 8019f3a:	f004 fe92 	bl	801ec62 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8019f3e:	697b      	ldr	r3, [r7, #20]
 8019f40:	68da      	ldr	r2, [r3, #12]
 8019f42:	69bb      	ldr	r3, [r7, #24]
 8019f44:	091b      	lsrs	r3, r3, #4
 8019f46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019f4a:	441a      	add	r2, r3
 8019f4c:	697b      	ldr	r3, [r7, #20]
 8019f4e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8019f50:	697b      	ldr	r3, [r7, #20]
 8019f52:	699a      	ldr	r2, [r3, #24]
 8019f54:	69bb      	ldr	r3, [r7, #24]
 8019f56:	091b      	lsrs	r3, r3, #4
 8019f58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019f5c:	441a      	add	r2, r3
 8019f5e:	697b      	ldr	r3, [r7, #20]
 8019f60:	619a      	str	r2, [r3, #24]
 8019f62:	e016      	b.n	8019f92 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8019f64:	69bb      	ldr	r3, [r7, #24]
 8019f66:	0c5b      	lsrs	r3, r3, #17
 8019f68:	f003 030f 	and.w	r3, r3, #15
 8019f6c:	2b06      	cmp	r3, #6
 8019f6e:	d110      	bne.n	8019f92 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8019f70:	687b      	ldr	r3, [r7, #4]
 8019f72:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8019f76:	2208      	movs	r2, #8
 8019f78:	4619      	mov	r1, r3
 8019f7a:	6a38      	ldr	r0, [r7, #32]
 8019f7c:	f004 fe71 	bl	801ec62 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8019f80:	697b      	ldr	r3, [r7, #20]
 8019f82:	699a      	ldr	r2, [r3, #24]
 8019f84:	69bb      	ldr	r3, [r7, #24]
 8019f86:	091b      	lsrs	r3, r3, #4
 8019f88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019f8c:	441a      	add	r2, r3
 8019f8e:	697b      	ldr	r3, [r7, #20]
 8019f90:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	681b      	ldr	r3, [r3, #0]
 8019f96:	699a      	ldr	r2, [r3, #24]
 8019f98:	687b      	ldr	r3, [r7, #4]
 8019f9a:	681b      	ldr	r3, [r3, #0]
 8019f9c:	f042 0210 	orr.w	r2, r2, #16
 8019fa0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8019fa2:	687b      	ldr	r3, [r7, #4]
 8019fa4:	681b      	ldr	r3, [r3, #0]
 8019fa6:	4618      	mov	r0, r3
 8019fa8:	f004 ffef 	bl	801ef8a <USB_ReadInterrupts>
 8019fac:	4603      	mov	r3, r0
 8019fae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8019fb2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8019fb6:	d16e      	bne.n	801a096 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8019fb8:	2300      	movs	r3, #0
 8019fba:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8019fbc:	687b      	ldr	r3, [r7, #4]
 8019fbe:	681b      	ldr	r3, [r3, #0]
 8019fc0:	4618      	mov	r0, r3
 8019fc2:	f004 fff5 	bl	801efb0 <USB_ReadDevAllOutEpInterrupt>
 8019fc6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8019fc8:	e062      	b.n	801a090 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8019fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fcc:	f003 0301 	and.w	r3, r3, #1
 8019fd0:	2b00      	cmp	r3, #0
 8019fd2:	d057      	beq.n	801a084 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8019fd4:	687b      	ldr	r3, [r7, #4]
 8019fd6:	681b      	ldr	r3, [r3, #0]
 8019fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019fda:	b2d2      	uxtb	r2, r2
 8019fdc:	4611      	mov	r1, r2
 8019fde:	4618      	mov	r0, r3
 8019fe0:	f005 f81a 	bl	801f018 <USB_ReadDevOutEPInterrupt>
 8019fe4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8019fe6:	693b      	ldr	r3, [r7, #16]
 8019fe8:	f003 0301 	and.w	r3, r3, #1
 8019fec:	2b00      	cmp	r3, #0
 8019fee:	d00c      	beq.n	801a00a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8019ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ff2:	015a      	lsls	r2, r3, #5
 8019ff4:	69fb      	ldr	r3, [r7, #28]
 8019ff6:	4413      	add	r3, r2
 8019ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019ffc:	461a      	mov	r2, r3
 8019ffe:	2301      	movs	r3, #1
 801a000:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 801a002:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a004:	6878      	ldr	r0, [r7, #4]
 801a006:	f000 fe0b 	bl	801ac20 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 801a00a:	693b      	ldr	r3, [r7, #16]
 801a00c:	f003 0308 	and.w	r3, r3, #8
 801a010:	2b00      	cmp	r3, #0
 801a012:	d00c      	beq.n	801a02e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 801a014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a016:	015a      	lsls	r2, r3, #5
 801a018:	69fb      	ldr	r3, [r7, #28]
 801a01a:	4413      	add	r3, r2
 801a01c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a020:	461a      	mov	r2, r3
 801a022:	2308      	movs	r3, #8
 801a024:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 801a026:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a028:	6878      	ldr	r0, [r7, #4]
 801a02a:	f000 ff05 	bl	801ae38 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 801a02e:	693b      	ldr	r3, [r7, #16]
 801a030:	f003 0310 	and.w	r3, r3, #16
 801a034:	2b00      	cmp	r3, #0
 801a036:	d008      	beq.n	801a04a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 801a038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a03a:	015a      	lsls	r2, r3, #5
 801a03c:	69fb      	ldr	r3, [r7, #28]
 801a03e:	4413      	add	r3, r2
 801a040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a044:	461a      	mov	r2, r3
 801a046:	2310      	movs	r3, #16
 801a048:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 801a04a:	693b      	ldr	r3, [r7, #16]
 801a04c:	f003 0320 	and.w	r3, r3, #32
 801a050:	2b00      	cmp	r3, #0
 801a052:	d008      	beq.n	801a066 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801a054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a056:	015a      	lsls	r2, r3, #5
 801a058:	69fb      	ldr	r3, [r7, #28]
 801a05a:	4413      	add	r3, r2
 801a05c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a060:	461a      	mov	r2, r3
 801a062:	2320      	movs	r3, #32
 801a064:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 801a066:	693b      	ldr	r3, [r7, #16]
 801a068:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a06c:	2b00      	cmp	r3, #0
 801a06e:	d009      	beq.n	801a084 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 801a070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a072:	015a      	lsls	r2, r3, #5
 801a074:	69fb      	ldr	r3, [r7, #28]
 801a076:	4413      	add	r3, r2
 801a078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a07c:	461a      	mov	r2, r3
 801a07e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801a082:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 801a084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a086:	3301      	adds	r3, #1
 801a088:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 801a08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a08c:	085b      	lsrs	r3, r3, #1
 801a08e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 801a090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a092:	2b00      	cmp	r3, #0
 801a094:	d199      	bne.n	8019fca <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 801a096:	687b      	ldr	r3, [r7, #4]
 801a098:	681b      	ldr	r3, [r3, #0]
 801a09a:	4618      	mov	r0, r3
 801a09c:	f004 ff75 	bl	801ef8a <USB_ReadInterrupts>
 801a0a0:	4603      	mov	r3, r0
 801a0a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801a0a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801a0aa:	f040 80c0 	bne.w	801a22e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 801a0ae:	687b      	ldr	r3, [r7, #4]
 801a0b0:	681b      	ldr	r3, [r3, #0]
 801a0b2:	4618      	mov	r0, r3
 801a0b4:	f004 ff96 	bl	801efe4 <USB_ReadDevAllInEpInterrupt>
 801a0b8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 801a0ba:	2300      	movs	r3, #0
 801a0bc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 801a0be:	e0b2      	b.n	801a226 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 801a0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0c2:	f003 0301 	and.w	r3, r3, #1
 801a0c6:	2b00      	cmp	r3, #0
 801a0c8:	f000 80a7 	beq.w	801a21a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 801a0cc:	687b      	ldr	r3, [r7, #4]
 801a0ce:	681b      	ldr	r3, [r3, #0]
 801a0d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a0d2:	b2d2      	uxtb	r2, r2
 801a0d4:	4611      	mov	r1, r2
 801a0d6:	4618      	mov	r0, r3
 801a0d8:	f004 ffbc 	bl	801f054 <USB_ReadDevInEPInterrupt>
 801a0dc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 801a0de:	693b      	ldr	r3, [r7, #16]
 801a0e0:	f003 0301 	and.w	r3, r3, #1
 801a0e4:	2b00      	cmp	r3, #0
 801a0e6:	d057      	beq.n	801a198 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 801a0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0ea:	f003 030f 	and.w	r3, r3, #15
 801a0ee:	2201      	movs	r2, #1
 801a0f0:	fa02 f303 	lsl.w	r3, r2, r3
 801a0f4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 801a0f6:	69fb      	ldr	r3, [r7, #28]
 801a0f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a0fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801a0fe:	68fb      	ldr	r3, [r7, #12]
 801a100:	43db      	mvns	r3, r3
 801a102:	69f9      	ldr	r1, [r7, #28]
 801a104:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801a108:	4013      	ands	r3, r2
 801a10a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 801a10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a10e:	015a      	lsls	r2, r3, #5
 801a110:	69fb      	ldr	r3, [r7, #28]
 801a112:	4413      	add	r3, r2
 801a114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a118:	461a      	mov	r2, r3
 801a11a:	2301      	movs	r3, #1
 801a11c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	691b      	ldr	r3, [r3, #16]
 801a122:	2b01      	cmp	r3, #1
 801a124:	d132      	bne.n	801a18c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 801a126:	6879      	ldr	r1, [r7, #4]
 801a128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a12a:	4613      	mov	r3, r2
 801a12c:	00db      	lsls	r3, r3, #3
 801a12e:	1a9b      	subs	r3, r3, r2
 801a130:	009b      	lsls	r3, r3, #2
 801a132:	440b      	add	r3, r1
 801a134:	3348      	adds	r3, #72	; 0x48
 801a136:	6819      	ldr	r1, [r3, #0]
 801a138:	6878      	ldr	r0, [r7, #4]
 801a13a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a13c:	4613      	mov	r3, r2
 801a13e:	00db      	lsls	r3, r3, #3
 801a140:	1a9b      	subs	r3, r3, r2
 801a142:	009b      	lsls	r3, r3, #2
 801a144:	4403      	add	r3, r0
 801a146:	3344      	adds	r3, #68	; 0x44
 801a148:	681b      	ldr	r3, [r3, #0]
 801a14a:	4419      	add	r1, r3
 801a14c:	6878      	ldr	r0, [r7, #4]
 801a14e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a150:	4613      	mov	r3, r2
 801a152:	00db      	lsls	r3, r3, #3
 801a154:	1a9b      	subs	r3, r3, r2
 801a156:	009b      	lsls	r3, r3, #2
 801a158:	4403      	add	r3, r0
 801a15a:	3348      	adds	r3, #72	; 0x48
 801a15c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 801a15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a160:	2b00      	cmp	r3, #0
 801a162:	d113      	bne.n	801a18c <HAL_PCD_IRQHandler+0x31c>
 801a164:	6879      	ldr	r1, [r7, #4]
 801a166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a168:	4613      	mov	r3, r2
 801a16a:	00db      	lsls	r3, r3, #3
 801a16c:	1a9b      	subs	r3, r3, r2
 801a16e:	009b      	lsls	r3, r3, #2
 801a170:	440b      	add	r3, r1
 801a172:	3350      	adds	r3, #80	; 0x50
 801a174:	681b      	ldr	r3, [r3, #0]
 801a176:	2b00      	cmp	r3, #0
 801a178:	d108      	bne.n	801a18c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801a17a:	687b      	ldr	r3, [r7, #4]
 801a17c:	6818      	ldr	r0, [r3, #0]
 801a17e:	687b      	ldr	r3, [r7, #4]
 801a180:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801a184:	461a      	mov	r2, r3
 801a186:	2101      	movs	r1, #1
 801a188:	f004 ffc4 	bl	801f114 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 801a18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a18e:	b2db      	uxtb	r3, r3
 801a190:	4619      	mov	r1, r3
 801a192:	6878      	ldr	r0, [r7, #4]
 801a194:	f008 fa09 	bl	80225aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 801a198:	693b      	ldr	r3, [r7, #16]
 801a19a:	f003 0308 	and.w	r3, r3, #8
 801a19e:	2b00      	cmp	r3, #0
 801a1a0:	d008      	beq.n	801a1b4 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 801a1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1a4:	015a      	lsls	r2, r3, #5
 801a1a6:	69fb      	ldr	r3, [r7, #28]
 801a1a8:	4413      	add	r3, r2
 801a1aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a1ae:	461a      	mov	r2, r3
 801a1b0:	2308      	movs	r3, #8
 801a1b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 801a1b4:	693b      	ldr	r3, [r7, #16]
 801a1b6:	f003 0310 	and.w	r3, r3, #16
 801a1ba:	2b00      	cmp	r3, #0
 801a1bc:	d008      	beq.n	801a1d0 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 801a1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1c0:	015a      	lsls	r2, r3, #5
 801a1c2:	69fb      	ldr	r3, [r7, #28]
 801a1c4:	4413      	add	r3, r2
 801a1c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a1ca:	461a      	mov	r2, r3
 801a1cc:	2310      	movs	r3, #16
 801a1ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 801a1d0:	693b      	ldr	r3, [r7, #16]
 801a1d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a1d6:	2b00      	cmp	r3, #0
 801a1d8:	d008      	beq.n	801a1ec <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 801a1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1dc:	015a      	lsls	r2, r3, #5
 801a1de:	69fb      	ldr	r3, [r7, #28]
 801a1e0:	4413      	add	r3, r2
 801a1e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a1e6:	461a      	mov	r2, r3
 801a1e8:	2340      	movs	r3, #64	; 0x40
 801a1ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 801a1ec:	693b      	ldr	r3, [r7, #16]
 801a1ee:	f003 0302 	and.w	r3, r3, #2
 801a1f2:	2b00      	cmp	r3, #0
 801a1f4:	d008      	beq.n	801a208 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 801a1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1f8:	015a      	lsls	r2, r3, #5
 801a1fa:	69fb      	ldr	r3, [r7, #28]
 801a1fc:	4413      	add	r3, r2
 801a1fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a202:	461a      	mov	r2, r3
 801a204:	2302      	movs	r3, #2
 801a206:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 801a208:	693b      	ldr	r3, [r7, #16]
 801a20a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a20e:	2b00      	cmp	r3, #0
 801a210:	d003      	beq.n	801a21a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 801a212:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a214:	6878      	ldr	r0, [r7, #4]
 801a216:	f000 fc75 	bl	801ab04 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 801a21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a21c:	3301      	adds	r3, #1
 801a21e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 801a220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a222:	085b      	lsrs	r3, r3, #1
 801a224:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 801a226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a228:	2b00      	cmp	r3, #0
 801a22a:	f47f af49 	bne.w	801a0c0 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 801a22e:	687b      	ldr	r3, [r7, #4]
 801a230:	681b      	ldr	r3, [r3, #0]
 801a232:	4618      	mov	r0, r3
 801a234:	f004 fea9 	bl	801ef8a <USB_ReadInterrupts>
 801a238:	4603      	mov	r3, r0
 801a23a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801a23e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a242:	d122      	bne.n	801a28a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 801a244:	69fb      	ldr	r3, [r7, #28]
 801a246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a24a:	685b      	ldr	r3, [r3, #4]
 801a24c:	69fa      	ldr	r2, [r7, #28]
 801a24e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a252:	f023 0301 	bic.w	r3, r3, #1
 801a256:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 801a258:	687b      	ldr	r3, [r7, #4]
 801a25a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 801a25e:	2b01      	cmp	r3, #1
 801a260:	d108      	bne.n	801a274 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 801a262:	687b      	ldr	r3, [r7, #4]
 801a264:	2200      	movs	r2, #0
 801a266:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 801a26a:	2100      	movs	r1, #0
 801a26c:	6878      	ldr	r0, [r7, #4]
 801a26e:	f008 fc0b 	bl	8022a88 <HAL_PCDEx_LPM_Callback>
 801a272:	e002      	b.n	801a27a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 801a274:	6878      	ldr	r0, [r7, #4]
 801a276:	f008 fa0f 	bl	8022698 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 801a27a:	687b      	ldr	r3, [r7, #4]
 801a27c:	681b      	ldr	r3, [r3, #0]
 801a27e:	695a      	ldr	r2, [r3, #20]
 801a280:	687b      	ldr	r3, [r7, #4]
 801a282:	681b      	ldr	r3, [r3, #0]
 801a284:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 801a288:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	681b      	ldr	r3, [r3, #0]
 801a28e:	4618      	mov	r0, r3
 801a290:	f004 fe7b 	bl	801ef8a <USB_ReadInterrupts>
 801a294:	4603      	mov	r3, r0
 801a296:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801a29a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a29e:	d112      	bne.n	801a2c6 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 801a2a0:	69fb      	ldr	r3, [r7, #28]
 801a2a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a2a6:	689b      	ldr	r3, [r3, #8]
 801a2a8:	f003 0301 	and.w	r3, r3, #1
 801a2ac:	2b01      	cmp	r3, #1
 801a2ae:	d102      	bne.n	801a2b6 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 801a2b0:	6878      	ldr	r0, [r7, #4]
 801a2b2:	f008 f9cb 	bl	802264c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 801a2b6:	687b      	ldr	r3, [r7, #4]
 801a2b8:	681b      	ldr	r3, [r3, #0]
 801a2ba:	695a      	ldr	r2, [r3, #20]
 801a2bc:	687b      	ldr	r3, [r7, #4]
 801a2be:	681b      	ldr	r3, [r3, #0]
 801a2c0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 801a2c4:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 801a2c6:	687b      	ldr	r3, [r7, #4]
 801a2c8:	681b      	ldr	r3, [r3, #0]
 801a2ca:	4618      	mov	r0, r3
 801a2cc:	f004 fe5d 	bl	801ef8a <USB_ReadInterrupts>
 801a2d0:	4603      	mov	r3, r0
 801a2d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801a2d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801a2da:	d121      	bne.n	801a320 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 801a2dc:	687b      	ldr	r3, [r7, #4]
 801a2de:	681b      	ldr	r3, [r3, #0]
 801a2e0:	695a      	ldr	r2, [r3, #20]
 801a2e2:	687b      	ldr	r3, [r7, #4]
 801a2e4:	681b      	ldr	r3, [r3, #0]
 801a2e6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 801a2ea:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 801a2ec:	687b      	ldr	r3, [r7, #4]
 801a2ee:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 801a2f2:	2b00      	cmp	r3, #0
 801a2f4:	d111      	bne.n	801a31a <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 801a2f6:	687b      	ldr	r3, [r7, #4]
 801a2f8:	2201      	movs	r2, #1
 801a2fa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 801a2fe:	687b      	ldr	r3, [r7, #4]
 801a300:	681b      	ldr	r3, [r3, #0]
 801a302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a304:	089b      	lsrs	r3, r3, #2
 801a306:	f003 020f 	and.w	r2, r3, #15
 801a30a:	687b      	ldr	r3, [r7, #4]
 801a30c:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 801a310:	2101      	movs	r1, #1
 801a312:	6878      	ldr	r0, [r7, #4]
 801a314:	f008 fbb8 	bl	8022a88 <HAL_PCDEx_LPM_Callback>
 801a318:	e002      	b.n	801a320 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 801a31a:	6878      	ldr	r0, [r7, #4]
 801a31c:	f008 f996 	bl	802264c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 801a320:	687b      	ldr	r3, [r7, #4]
 801a322:	681b      	ldr	r3, [r3, #0]
 801a324:	4618      	mov	r0, r3
 801a326:	f004 fe30 	bl	801ef8a <USB_ReadInterrupts>
 801a32a:	4603      	mov	r3, r0
 801a32c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801a330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a334:	f040 80c7 	bne.w	801a4c6 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 801a338:	69fb      	ldr	r3, [r7, #28]
 801a33a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a33e:	685b      	ldr	r3, [r3, #4]
 801a340:	69fa      	ldr	r2, [r7, #28]
 801a342:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a346:	f023 0301 	bic.w	r3, r3, #1
 801a34a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 801a34c:	687b      	ldr	r3, [r7, #4]
 801a34e:	681b      	ldr	r3, [r3, #0]
 801a350:	2110      	movs	r1, #16
 801a352:	4618      	mov	r0, r3
 801a354:	f003 feca 	bl	801e0ec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801a358:	2300      	movs	r3, #0
 801a35a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a35c:	e056      	b.n	801a40c <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 801a35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a360:	015a      	lsls	r2, r3, #5
 801a362:	69fb      	ldr	r3, [r7, #28]
 801a364:	4413      	add	r3, r2
 801a366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a36a:	461a      	mov	r2, r3
 801a36c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801a370:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801a372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a374:	015a      	lsls	r2, r3, #5
 801a376:	69fb      	ldr	r3, [r7, #28]
 801a378:	4413      	add	r3, r2
 801a37a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a37e:	681b      	ldr	r3, [r3, #0]
 801a380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a382:	0151      	lsls	r1, r2, #5
 801a384:	69fa      	ldr	r2, [r7, #28]
 801a386:	440a      	add	r2, r1
 801a388:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a38c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801a390:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801a392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a394:	015a      	lsls	r2, r3, #5
 801a396:	69fb      	ldr	r3, [r7, #28]
 801a398:	4413      	add	r3, r2
 801a39a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a39e:	681b      	ldr	r3, [r3, #0]
 801a3a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a3a2:	0151      	lsls	r1, r2, #5
 801a3a4:	69fa      	ldr	r2, [r7, #28]
 801a3a6:	440a      	add	r2, r1
 801a3a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a3ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801a3b0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 801a3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3b4:	015a      	lsls	r2, r3, #5
 801a3b6:	69fb      	ldr	r3, [r7, #28]
 801a3b8:	4413      	add	r3, r2
 801a3ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a3be:	461a      	mov	r2, r3
 801a3c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801a3c4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801a3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3c8:	015a      	lsls	r2, r3, #5
 801a3ca:	69fb      	ldr	r3, [r7, #28]
 801a3cc:	4413      	add	r3, r2
 801a3ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a3d2:	681b      	ldr	r3, [r3, #0]
 801a3d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a3d6:	0151      	lsls	r1, r2, #5
 801a3d8:	69fa      	ldr	r2, [r7, #28]
 801a3da:	440a      	add	r2, r1
 801a3dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a3e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801a3e4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801a3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3e8:	015a      	lsls	r2, r3, #5
 801a3ea:	69fb      	ldr	r3, [r7, #28]
 801a3ec:	4413      	add	r3, r2
 801a3ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a3f2:	681b      	ldr	r3, [r3, #0]
 801a3f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a3f6:	0151      	lsls	r1, r2, #5
 801a3f8:	69fa      	ldr	r2, [r7, #28]
 801a3fa:	440a      	add	r2, r1
 801a3fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a400:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801a404:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801a406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a408:	3301      	adds	r3, #1
 801a40a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a40c:	687b      	ldr	r3, [r7, #4]
 801a40e:	685b      	ldr	r3, [r3, #4]
 801a410:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a412:	429a      	cmp	r2, r3
 801a414:	d3a3      	bcc.n	801a35e <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 801a416:	69fb      	ldr	r3, [r7, #28]
 801a418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a41c:	69db      	ldr	r3, [r3, #28]
 801a41e:	69fa      	ldr	r2, [r7, #28]
 801a420:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a424:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 801a428:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 801a42a:	687b      	ldr	r3, [r7, #4]
 801a42c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a42e:	2b00      	cmp	r3, #0
 801a430:	d016      	beq.n	801a460 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 801a432:	69fb      	ldr	r3, [r7, #28]
 801a434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a438:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a43c:	69fa      	ldr	r2, [r7, #28]
 801a43e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a442:	f043 030b 	orr.w	r3, r3, #11
 801a446:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 801a44a:	69fb      	ldr	r3, [r7, #28]
 801a44c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a452:	69fa      	ldr	r2, [r7, #28]
 801a454:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a458:	f043 030b 	orr.w	r3, r3, #11
 801a45c:	6453      	str	r3, [r2, #68]	; 0x44
 801a45e:	e015      	b.n	801a48c <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 801a460:	69fb      	ldr	r3, [r7, #28]
 801a462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a466:	695b      	ldr	r3, [r3, #20]
 801a468:	69fa      	ldr	r2, [r7, #28]
 801a46a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a46e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a472:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 801a476:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 801a478:	69fb      	ldr	r3, [r7, #28]
 801a47a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a47e:	691b      	ldr	r3, [r3, #16]
 801a480:	69fa      	ldr	r2, [r7, #28]
 801a482:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a486:	f043 030b 	orr.w	r3, r3, #11
 801a48a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 801a48c:	69fb      	ldr	r3, [r7, #28]
 801a48e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a492:	681b      	ldr	r3, [r3, #0]
 801a494:	69fa      	ldr	r2, [r7, #28]
 801a496:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a49a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801a49e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 801a4a0:	687b      	ldr	r3, [r7, #4]
 801a4a2:	6818      	ldr	r0, [r3, #0]
 801a4a4:	687b      	ldr	r3, [r7, #4]
 801a4a6:	691b      	ldr	r3, [r3, #16]
 801a4a8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 801a4aa:	687b      	ldr	r3, [r7, #4]
 801a4ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 801a4b0:	461a      	mov	r2, r3
 801a4b2:	f004 fe2f 	bl	801f114 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 801a4b6:	687b      	ldr	r3, [r7, #4]
 801a4b8:	681b      	ldr	r3, [r3, #0]
 801a4ba:	695a      	ldr	r2, [r3, #20]
 801a4bc:	687b      	ldr	r3, [r7, #4]
 801a4be:	681b      	ldr	r3, [r3, #0]
 801a4c0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 801a4c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 801a4c6:	687b      	ldr	r3, [r7, #4]
 801a4c8:	681b      	ldr	r3, [r3, #0]
 801a4ca:	4618      	mov	r0, r3
 801a4cc:	f004 fd5d 	bl	801ef8a <USB_ReadInterrupts>
 801a4d0:	4603      	mov	r3, r0
 801a4d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a4d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801a4da:	d124      	bne.n	801a526 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 801a4dc:	687b      	ldr	r3, [r7, #4]
 801a4de:	681b      	ldr	r3, [r3, #0]
 801a4e0:	4618      	mov	r0, r3
 801a4e2:	f004 fdf3 	bl	801f0cc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 801a4e6:	687b      	ldr	r3, [r7, #4]
 801a4e8:	681b      	ldr	r3, [r3, #0]
 801a4ea:	4618      	mov	r0, r3
 801a4ec:	f003 fe5b 	bl	801e1a6 <USB_GetDevSpeed>
 801a4f0:	4603      	mov	r3, r0
 801a4f2:	461a      	mov	r2, r3
 801a4f4:	687b      	ldr	r3, [r7, #4]
 801a4f6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 801a4f8:	687b      	ldr	r3, [r7, #4]
 801a4fa:	681c      	ldr	r4, [r3, #0]
 801a4fc:	f000 fe94 	bl	801b228 <HAL_RCC_GetHCLKFreq>
 801a500:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 801a502:	687b      	ldr	r3, [r7, #4]
 801a504:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 801a506:	b2db      	uxtb	r3, r3
 801a508:	461a      	mov	r2, r3
 801a50a:	4620      	mov	r0, r4
 801a50c:	f003 fb80 	bl	801dc10 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 801a510:	6878      	ldr	r0, [r7, #4]
 801a512:	f008 f872 	bl	80225fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	681b      	ldr	r3, [r3, #0]
 801a51a:	695a      	ldr	r2, [r3, #20]
 801a51c:	687b      	ldr	r3, [r7, #4]
 801a51e:	681b      	ldr	r3, [r3, #0]
 801a520:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 801a524:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 801a526:	687b      	ldr	r3, [r7, #4]
 801a528:	681b      	ldr	r3, [r3, #0]
 801a52a:	4618      	mov	r0, r3
 801a52c:	f004 fd2d 	bl	801ef8a <USB_ReadInterrupts>
 801a530:	4603      	mov	r3, r0
 801a532:	f003 0308 	and.w	r3, r3, #8
 801a536:	2b08      	cmp	r3, #8
 801a538:	d10a      	bne.n	801a550 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 801a53a:	6878      	ldr	r0, [r7, #4]
 801a53c:	f008 f84f 	bl	80225de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 801a540:	687b      	ldr	r3, [r7, #4]
 801a542:	681b      	ldr	r3, [r3, #0]
 801a544:	695a      	ldr	r2, [r3, #20]
 801a546:	687b      	ldr	r3, [r7, #4]
 801a548:	681b      	ldr	r3, [r3, #0]
 801a54a:	f002 0208 	and.w	r2, r2, #8
 801a54e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 801a550:	687b      	ldr	r3, [r7, #4]
 801a552:	681b      	ldr	r3, [r3, #0]
 801a554:	4618      	mov	r0, r3
 801a556:	f004 fd18 	bl	801ef8a <USB_ReadInterrupts>
 801a55a:	4603      	mov	r3, r0
 801a55c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801a560:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801a564:	d10f      	bne.n	801a586 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 801a566:	2300      	movs	r3, #0
 801a568:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 801a56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a56c:	b2db      	uxtb	r3, r3
 801a56e:	4619      	mov	r1, r3
 801a570:	6878      	ldr	r0, [r7, #4]
 801a572:	f008 f8b1 	bl	80226d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 801a576:	687b      	ldr	r3, [r7, #4]
 801a578:	681b      	ldr	r3, [r3, #0]
 801a57a:	695a      	ldr	r2, [r3, #20]
 801a57c:	687b      	ldr	r3, [r7, #4]
 801a57e:	681b      	ldr	r3, [r3, #0]
 801a580:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 801a584:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 801a586:	687b      	ldr	r3, [r7, #4]
 801a588:	681b      	ldr	r3, [r3, #0]
 801a58a:	4618      	mov	r0, r3
 801a58c:	f004 fcfd 	bl	801ef8a <USB_ReadInterrupts>
 801a590:	4603      	mov	r3, r0
 801a592:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801a596:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801a59a:	d10f      	bne.n	801a5bc <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 801a59c:	2300      	movs	r3, #0
 801a59e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 801a5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5a2:	b2db      	uxtb	r3, r3
 801a5a4:	4619      	mov	r1, r3
 801a5a6:	6878      	ldr	r0, [r7, #4]
 801a5a8:	f008 f884 	bl	80226b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 801a5ac:	687b      	ldr	r3, [r7, #4]
 801a5ae:	681b      	ldr	r3, [r3, #0]
 801a5b0:	695a      	ldr	r2, [r3, #20]
 801a5b2:	687b      	ldr	r3, [r7, #4]
 801a5b4:	681b      	ldr	r3, [r3, #0]
 801a5b6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 801a5ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 801a5bc:	687b      	ldr	r3, [r7, #4]
 801a5be:	681b      	ldr	r3, [r3, #0]
 801a5c0:	4618      	mov	r0, r3
 801a5c2:	f004 fce2 	bl	801ef8a <USB_ReadInterrupts>
 801a5c6:	4603      	mov	r3, r0
 801a5c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801a5cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a5d0:	d10a      	bne.n	801a5e8 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 801a5d2:	6878      	ldr	r0, [r7, #4]
 801a5d4:	f008 f892 	bl	80226fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 801a5d8:	687b      	ldr	r3, [r7, #4]
 801a5da:	681b      	ldr	r3, [r3, #0]
 801a5dc:	695a      	ldr	r2, [r3, #20]
 801a5de:	687b      	ldr	r3, [r7, #4]
 801a5e0:	681b      	ldr	r3, [r3, #0]
 801a5e2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 801a5e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 801a5e8:	687b      	ldr	r3, [r7, #4]
 801a5ea:	681b      	ldr	r3, [r3, #0]
 801a5ec:	4618      	mov	r0, r3
 801a5ee:	f004 fccc 	bl	801ef8a <USB_ReadInterrupts>
 801a5f2:	4603      	mov	r3, r0
 801a5f4:	f003 0304 	and.w	r3, r3, #4
 801a5f8:	2b04      	cmp	r3, #4
 801a5fa:	d115      	bne.n	801a628 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 801a5fc:	687b      	ldr	r3, [r7, #4]
 801a5fe:	681b      	ldr	r3, [r3, #0]
 801a600:	685b      	ldr	r3, [r3, #4]
 801a602:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 801a604:	69bb      	ldr	r3, [r7, #24]
 801a606:	f003 0304 	and.w	r3, r3, #4
 801a60a:	2b00      	cmp	r3, #0
 801a60c:	d002      	beq.n	801a614 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 801a60e:	6878      	ldr	r0, [r7, #4]
 801a610:	f008 f882 	bl	8022718 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 801a614:	687b      	ldr	r3, [r7, #4]
 801a616:	681b      	ldr	r3, [r3, #0]
 801a618:	6859      	ldr	r1, [r3, #4]
 801a61a:	687b      	ldr	r3, [r7, #4]
 801a61c:	681b      	ldr	r3, [r3, #0]
 801a61e:	69ba      	ldr	r2, [r7, #24]
 801a620:	430a      	orrs	r2, r1
 801a622:	605a      	str	r2, [r3, #4]
 801a624:	e000      	b.n	801a628 <HAL_PCD_IRQHandler+0x7b8>
      return;
 801a626:	bf00      	nop
    }
  }
}
 801a628:	3734      	adds	r7, #52	; 0x34
 801a62a:	46bd      	mov	sp, r7
 801a62c:	bd90      	pop	{r4, r7, pc}

0801a62e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 801a62e:	b580      	push	{r7, lr}
 801a630:	b082      	sub	sp, #8
 801a632:	af00      	add	r7, sp, #0
 801a634:	6078      	str	r0, [r7, #4]
 801a636:	460b      	mov	r3, r1
 801a638:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 801a63a:	687b      	ldr	r3, [r7, #4]
 801a63c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801a640:	2b01      	cmp	r3, #1
 801a642:	d101      	bne.n	801a648 <HAL_PCD_SetAddress+0x1a>
 801a644:	2302      	movs	r3, #2
 801a646:	e013      	b.n	801a670 <HAL_PCD_SetAddress+0x42>
 801a648:	687b      	ldr	r3, [r7, #4]
 801a64a:	2201      	movs	r2, #1
 801a64c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 801a650:	687b      	ldr	r3, [r7, #4]
 801a652:	78fa      	ldrb	r2, [r7, #3]
 801a654:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 801a658:	687b      	ldr	r3, [r7, #4]
 801a65a:	681b      	ldr	r3, [r3, #0]
 801a65c:	78fa      	ldrb	r2, [r7, #3]
 801a65e:	4611      	mov	r1, r2
 801a660:	4618      	mov	r0, r3
 801a662:	f004 fc2a 	bl	801eeba <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 801a666:	687b      	ldr	r3, [r7, #4]
 801a668:	2200      	movs	r2, #0
 801a66a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801a66e:	2300      	movs	r3, #0
}
 801a670:	4618      	mov	r0, r3
 801a672:	3708      	adds	r7, #8
 801a674:	46bd      	mov	sp, r7
 801a676:	bd80      	pop	{r7, pc}

0801a678 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 801a678:	b580      	push	{r7, lr}
 801a67a:	b084      	sub	sp, #16
 801a67c:	af00      	add	r7, sp, #0
 801a67e:	6078      	str	r0, [r7, #4]
 801a680:	4608      	mov	r0, r1
 801a682:	4611      	mov	r1, r2
 801a684:	461a      	mov	r2, r3
 801a686:	4603      	mov	r3, r0
 801a688:	70fb      	strb	r3, [r7, #3]
 801a68a:	460b      	mov	r3, r1
 801a68c:	803b      	strh	r3, [r7, #0]
 801a68e:	4613      	mov	r3, r2
 801a690:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 801a692:	2300      	movs	r3, #0
 801a694:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801a696:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a69a:	2b00      	cmp	r3, #0
 801a69c:	da0f      	bge.n	801a6be <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a69e:	78fb      	ldrb	r3, [r7, #3]
 801a6a0:	f003 020f 	and.w	r2, r3, #15
 801a6a4:	4613      	mov	r3, r2
 801a6a6:	00db      	lsls	r3, r3, #3
 801a6a8:	1a9b      	subs	r3, r3, r2
 801a6aa:	009b      	lsls	r3, r3, #2
 801a6ac:	3338      	adds	r3, #56	; 0x38
 801a6ae:	687a      	ldr	r2, [r7, #4]
 801a6b0:	4413      	add	r3, r2
 801a6b2:	3304      	adds	r3, #4
 801a6b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801a6b6:	68fb      	ldr	r3, [r7, #12]
 801a6b8:	2201      	movs	r2, #1
 801a6ba:	705a      	strb	r2, [r3, #1]
 801a6bc:	e00f      	b.n	801a6de <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801a6be:	78fb      	ldrb	r3, [r7, #3]
 801a6c0:	f003 020f 	and.w	r2, r3, #15
 801a6c4:	4613      	mov	r3, r2
 801a6c6:	00db      	lsls	r3, r3, #3
 801a6c8:	1a9b      	subs	r3, r3, r2
 801a6ca:	009b      	lsls	r3, r3, #2
 801a6cc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801a6d0:	687a      	ldr	r2, [r7, #4]
 801a6d2:	4413      	add	r3, r2
 801a6d4:	3304      	adds	r3, #4
 801a6d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801a6d8:	68fb      	ldr	r3, [r7, #12]
 801a6da:	2200      	movs	r2, #0
 801a6dc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 801a6de:	78fb      	ldrb	r3, [r7, #3]
 801a6e0:	f003 030f 	and.w	r3, r3, #15
 801a6e4:	b2da      	uxtb	r2, r3
 801a6e6:	68fb      	ldr	r3, [r7, #12]
 801a6e8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 801a6ea:	883a      	ldrh	r2, [r7, #0]
 801a6ec:	68fb      	ldr	r3, [r7, #12]
 801a6ee:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 801a6f0:	68fb      	ldr	r3, [r7, #12]
 801a6f2:	78ba      	ldrb	r2, [r7, #2]
 801a6f4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 801a6f6:	68fb      	ldr	r3, [r7, #12]
 801a6f8:	785b      	ldrb	r3, [r3, #1]
 801a6fa:	2b00      	cmp	r3, #0
 801a6fc:	d004      	beq.n	801a708 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 801a6fe:	68fb      	ldr	r3, [r7, #12]
 801a700:	781b      	ldrb	r3, [r3, #0]
 801a702:	b29a      	uxth	r2, r3
 801a704:	68fb      	ldr	r3, [r7, #12]
 801a706:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 801a708:	78bb      	ldrb	r3, [r7, #2]
 801a70a:	2b02      	cmp	r3, #2
 801a70c:	d102      	bne.n	801a714 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 801a70e:	68fb      	ldr	r3, [r7, #12]
 801a710:	2200      	movs	r2, #0
 801a712:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 801a714:	687b      	ldr	r3, [r7, #4]
 801a716:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801a71a:	2b01      	cmp	r3, #1
 801a71c:	d101      	bne.n	801a722 <HAL_PCD_EP_Open+0xaa>
 801a71e:	2302      	movs	r3, #2
 801a720:	e00e      	b.n	801a740 <HAL_PCD_EP_Open+0xc8>
 801a722:	687b      	ldr	r3, [r7, #4]
 801a724:	2201      	movs	r2, #1
 801a726:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 801a72a:	687b      	ldr	r3, [r7, #4]
 801a72c:	681b      	ldr	r3, [r3, #0]
 801a72e:	68f9      	ldr	r1, [r7, #12]
 801a730:	4618      	mov	r0, r3
 801a732:	f003 fd5d 	bl	801e1f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801a736:	687b      	ldr	r3, [r7, #4]
 801a738:	2200      	movs	r2, #0
 801a73a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 801a73e:	7afb      	ldrb	r3, [r7, #11]
}
 801a740:	4618      	mov	r0, r3
 801a742:	3710      	adds	r7, #16
 801a744:	46bd      	mov	sp, r7
 801a746:	bd80      	pop	{r7, pc}

0801a748 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801a748:	b580      	push	{r7, lr}
 801a74a:	b084      	sub	sp, #16
 801a74c:	af00      	add	r7, sp, #0
 801a74e:	6078      	str	r0, [r7, #4]
 801a750:	460b      	mov	r3, r1
 801a752:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801a754:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a758:	2b00      	cmp	r3, #0
 801a75a:	da0f      	bge.n	801a77c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a75c:	78fb      	ldrb	r3, [r7, #3]
 801a75e:	f003 020f 	and.w	r2, r3, #15
 801a762:	4613      	mov	r3, r2
 801a764:	00db      	lsls	r3, r3, #3
 801a766:	1a9b      	subs	r3, r3, r2
 801a768:	009b      	lsls	r3, r3, #2
 801a76a:	3338      	adds	r3, #56	; 0x38
 801a76c:	687a      	ldr	r2, [r7, #4]
 801a76e:	4413      	add	r3, r2
 801a770:	3304      	adds	r3, #4
 801a772:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801a774:	68fb      	ldr	r3, [r7, #12]
 801a776:	2201      	movs	r2, #1
 801a778:	705a      	strb	r2, [r3, #1]
 801a77a:	e00f      	b.n	801a79c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801a77c:	78fb      	ldrb	r3, [r7, #3]
 801a77e:	f003 020f 	and.w	r2, r3, #15
 801a782:	4613      	mov	r3, r2
 801a784:	00db      	lsls	r3, r3, #3
 801a786:	1a9b      	subs	r3, r3, r2
 801a788:	009b      	lsls	r3, r3, #2
 801a78a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801a78e:	687a      	ldr	r2, [r7, #4]
 801a790:	4413      	add	r3, r2
 801a792:	3304      	adds	r3, #4
 801a794:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801a796:	68fb      	ldr	r3, [r7, #12]
 801a798:	2200      	movs	r2, #0
 801a79a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 801a79c:	78fb      	ldrb	r3, [r7, #3]
 801a79e:	f003 030f 	and.w	r3, r3, #15
 801a7a2:	b2da      	uxtb	r2, r3
 801a7a4:	68fb      	ldr	r3, [r7, #12]
 801a7a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801a7a8:	687b      	ldr	r3, [r7, #4]
 801a7aa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801a7ae:	2b01      	cmp	r3, #1
 801a7b0:	d101      	bne.n	801a7b6 <HAL_PCD_EP_Close+0x6e>
 801a7b2:	2302      	movs	r3, #2
 801a7b4:	e00e      	b.n	801a7d4 <HAL_PCD_EP_Close+0x8c>
 801a7b6:	687b      	ldr	r3, [r7, #4]
 801a7b8:	2201      	movs	r2, #1
 801a7ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 801a7be:	687b      	ldr	r3, [r7, #4]
 801a7c0:	681b      	ldr	r3, [r3, #0]
 801a7c2:	68f9      	ldr	r1, [r7, #12]
 801a7c4:	4618      	mov	r0, r3
 801a7c6:	f003 fd9b 	bl	801e300 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801a7ca:	687b      	ldr	r3, [r7, #4]
 801a7cc:	2200      	movs	r2, #0
 801a7ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 801a7d2:	2300      	movs	r3, #0
}
 801a7d4:	4618      	mov	r0, r3
 801a7d6:	3710      	adds	r7, #16
 801a7d8:	46bd      	mov	sp, r7
 801a7da:	bd80      	pop	{r7, pc}

0801a7dc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801a7dc:	b580      	push	{r7, lr}
 801a7de:	b086      	sub	sp, #24
 801a7e0:	af00      	add	r7, sp, #0
 801a7e2:	60f8      	str	r0, [r7, #12]
 801a7e4:	607a      	str	r2, [r7, #4]
 801a7e6:	603b      	str	r3, [r7, #0]
 801a7e8:	460b      	mov	r3, r1
 801a7ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801a7ec:	7afb      	ldrb	r3, [r7, #11]
 801a7ee:	f003 020f 	and.w	r2, r3, #15
 801a7f2:	4613      	mov	r3, r2
 801a7f4:	00db      	lsls	r3, r3, #3
 801a7f6:	1a9b      	subs	r3, r3, r2
 801a7f8:	009b      	lsls	r3, r3, #2
 801a7fa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801a7fe:	68fa      	ldr	r2, [r7, #12]
 801a800:	4413      	add	r3, r2
 801a802:	3304      	adds	r3, #4
 801a804:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801a806:	697b      	ldr	r3, [r7, #20]
 801a808:	687a      	ldr	r2, [r7, #4]
 801a80a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 801a80c:	697b      	ldr	r3, [r7, #20]
 801a80e:	683a      	ldr	r2, [r7, #0]
 801a810:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 801a812:	697b      	ldr	r3, [r7, #20]
 801a814:	2200      	movs	r2, #0
 801a816:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 801a818:	697b      	ldr	r3, [r7, #20]
 801a81a:	2200      	movs	r2, #0
 801a81c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801a81e:	7afb      	ldrb	r3, [r7, #11]
 801a820:	f003 030f 	and.w	r3, r3, #15
 801a824:	b2da      	uxtb	r2, r3
 801a826:	697b      	ldr	r3, [r7, #20]
 801a828:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 801a82a:	68fb      	ldr	r3, [r7, #12]
 801a82c:	691b      	ldr	r3, [r3, #16]
 801a82e:	2b01      	cmp	r3, #1
 801a830:	d102      	bne.n	801a838 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 801a832:	687a      	ldr	r2, [r7, #4]
 801a834:	697b      	ldr	r3, [r7, #20]
 801a836:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801a838:	7afb      	ldrb	r3, [r7, #11]
 801a83a:	f003 030f 	and.w	r3, r3, #15
 801a83e:	2b00      	cmp	r3, #0
 801a840:	d109      	bne.n	801a856 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801a842:	68fb      	ldr	r3, [r7, #12]
 801a844:	6818      	ldr	r0, [r3, #0]
 801a846:	68fb      	ldr	r3, [r7, #12]
 801a848:	691b      	ldr	r3, [r3, #16]
 801a84a:	b2db      	uxtb	r3, r3
 801a84c:	461a      	mov	r2, r3
 801a84e:	6979      	ldr	r1, [r7, #20]
 801a850:	f004 f876 	bl	801e940 <USB_EP0StartXfer>
 801a854:	e008      	b.n	801a868 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801a856:	68fb      	ldr	r3, [r7, #12]
 801a858:	6818      	ldr	r0, [r3, #0]
 801a85a:	68fb      	ldr	r3, [r7, #12]
 801a85c:	691b      	ldr	r3, [r3, #16]
 801a85e:	b2db      	uxtb	r3, r3
 801a860:	461a      	mov	r2, r3
 801a862:	6979      	ldr	r1, [r7, #20]
 801a864:	f003 fe28 	bl	801e4b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 801a868:	2300      	movs	r3, #0
}
 801a86a:	4618      	mov	r0, r3
 801a86c:	3718      	adds	r7, #24
 801a86e:	46bd      	mov	sp, r7
 801a870:	bd80      	pop	{r7, pc}

0801a872 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801a872:	b480      	push	{r7}
 801a874:	b083      	sub	sp, #12
 801a876:	af00      	add	r7, sp, #0
 801a878:	6078      	str	r0, [r7, #4]
 801a87a:	460b      	mov	r3, r1
 801a87c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 801a87e:	78fb      	ldrb	r3, [r7, #3]
 801a880:	f003 020f 	and.w	r2, r3, #15
 801a884:	6879      	ldr	r1, [r7, #4]
 801a886:	4613      	mov	r3, r2
 801a888:	00db      	lsls	r3, r3, #3
 801a88a:	1a9b      	subs	r3, r3, r2
 801a88c:	009b      	lsls	r3, r3, #2
 801a88e:	440b      	add	r3, r1
 801a890:	f503 7305 	add.w	r3, r3, #532	; 0x214
 801a894:	681b      	ldr	r3, [r3, #0]
}
 801a896:	4618      	mov	r0, r3
 801a898:	370c      	adds	r7, #12
 801a89a:	46bd      	mov	sp, r7
 801a89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8a0:	4770      	bx	lr

0801a8a2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801a8a2:	b580      	push	{r7, lr}
 801a8a4:	b086      	sub	sp, #24
 801a8a6:	af00      	add	r7, sp, #0
 801a8a8:	60f8      	str	r0, [r7, #12]
 801a8aa:	607a      	str	r2, [r7, #4]
 801a8ac:	603b      	str	r3, [r7, #0]
 801a8ae:	460b      	mov	r3, r1
 801a8b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a8b2:	7afb      	ldrb	r3, [r7, #11]
 801a8b4:	f003 020f 	and.w	r2, r3, #15
 801a8b8:	4613      	mov	r3, r2
 801a8ba:	00db      	lsls	r3, r3, #3
 801a8bc:	1a9b      	subs	r3, r3, r2
 801a8be:	009b      	lsls	r3, r3, #2
 801a8c0:	3338      	adds	r3, #56	; 0x38
 801a8c2:	68fa      	ldr	r2, [r7, #12]
 801a8c4:	4413      	add	r3, r2
 801a8c6:	3304      	adds	r3, #4
 801a8c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801a8ca:	697b      	ldr	r3, [r7, #20]
 801a8cc:	687a      	ldr	r2, [r7, #4]
 801a8ce:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 801a8d0:	697b      	ldr	r3, [r7, #20]
 801a8d2:	683a      	ldr	r2, [r7, #0]
 801a8d4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 801a8d6:	697b      	ldr	r3, [r7, #20]
 801a8d8:	2200      	movs	r2, #0
 801a8da:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 801a8dc:	697b      	ldr	r3, [r7, #20]
 801a8de:	2201      	movs	r2, #1
 801a8e0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801a8e2:	7afb      	ldrb	r3, [r7, #11]
 801a8e4:	f003 030f 	and.w	r3, r3, #15
 801a8e8:	b2da      	uxtb	r2, r3
 801a8ea:	697b      	ldr	r3, [r7, #20]
 801a8ec:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 801a8ee:	68fb      	ldr	r3, [r7, #12]
 801a8f0:	691b      	ldr	r3, [r3, #16]
 801a8f2:	2b01      	cmp	r3, #1
 801a8f4:	d102      	bne.n	801a8fc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 801a8f6:	687a      	ldr	r2, [r7, #4]
 801a8f8:	697b      	ldr	r3, [r7, #20]
 801a8fa:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801a8fc:	7afb      	ldrb	r3, [r7, #11]
 801a8fe:	f003 030f 	and.w	r3, r3, #15
 801a902:	2b00      	cmp	r3, #0
 801a904:	d109      	bne.n	801a91a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801a906:	68fb      	ldr	r3, [r7, #12]
 801a908:	6818      	ldr	r0, [r3, #0]
 801a90a:	68fb      	ldr	r3, [r7, #12]
 801a90c:	691b      	ldr	r3, [r3, #16]
 801a90e:	b2db      	uxtb	r3, r3
 801a910:	461a      	mov	r2, r3
 801a912:	6979      	ldr	r1, [r7, #20]
 801a914:	f004 f814 	bl	801e940 <USB_EP0StartXfer>
 801a918:	e008      	b.n	801a92c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801a91a:	68fb      	ldr	r3, [r7, #12]
 801a91c:	6818      	ldr	r0, [r3, #0]
 801a91e:	68fb      	ldr	r3, [r7, #12]
 801a920:	691b      	ldr	r3, [r3, #16]
 801a922:	b2db      	uxtb	r3, r3
 801a924:	461a      	mov	r2, r3
 801a926:	6979      	ldr	r1, [r7, #20]
 801a928:	f003 fdc6 	bl	801e4b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 801a92c:	2300      	movs	r3, #0
}
 801a92e:	4618      	mov	r0, r3
 801a930:	3718      	adds	r7, #24
 801a932:	46bd      	mov	sp, r7
 801a934:	bd80      	pop	{r7, pc}

0801a936 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801a936:	b580      	push	{r7, lr}
 801a938:	b084      	sub	sp, #16
 801a93a:	af00      	add	r7, sp, #0
 801a93c:	6078      	str	r0, [r7, #4]
 801a93e:	460b      	mov	r3, r1
 801a940:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 801a942:	78fb      	ldrb	r3, [r7, #3]
 801a944:	f003 020f 	and.w	r2, r3, #15
 801a948:	687b      	ldr	r3, [r7, #4]
 801a94a:	685b      	ldr	r3, [r3, #4]
 801a94c:	429a      	cmp	r2, r3
 801a94e:	d901      	bls.n	801a954 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 801a950:	2301      	movs	r3, #1
 801a952:	e050      	b.n	801a9f6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801a954:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a958:	2b00      	cmp	r3, #0
 801a95a:	da0f      	bge.n	801a97c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a95c:	78fb      	ldrb	r3, [r7, #3]
 801a95e:	f003 020f 	and.w	r2, r3, #15
 801a962:	4613      	mov	r3, r2
 801a964:	00db      	lsls	r3, r3, #3
 801a966:	1a9b      	subs	r3, r3, r2
 801a968:	009b      	lsls	r3, r3, #2
 801a96a:	3338      	adds	r3, #56	; 0x38
 801a96c:	687a      	ldr	r2, [r7, #4]
 801a96e:	4413      	add	r3, r2
 801a970:	3304      	adds	r3, #4
 801a972:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801a974:	68fb      	ldr	r3, [r7, #12]
 801a976:	2201      	movs	r2, #1
 801a978:	705a      	strb	r2, [r3, #1]
 801a97a:	e00d      	b.n	801a998 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801a97c:	78fa      	ldrb	r2, [r7, #3]
 801a97e:	4613      	mov	r3, r2
 801a980:	00db      	lsls	r3, r3, #3
 801a982:	1a9b      	subs	r3, r3, r2
 801a984:	009b      	lsls	r3, r3, #2
 801a986:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801a98a:	687a      	ldr	r2, [r7, #4]
 801a98c:	4413      	add	r3, r2
 801a98e:	3304      	adds	r3, #4
 801a990:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801a992:	68fb      	ldr	r3, [r7, #12]
 801a994:	2200      	movs	r2, #0
 801a996:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 801a998:	68fb      	ldr	r3, [r7, #12]
 801a99a:	2201      	movs	r2, #1
 801a99c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801a99e:	78fb      	ldrb	r3, [r7, #3]
 801a9a0:	f003 030f 	and.w	r3, r3, #15
 801a9a4:	b2da      	uxtb	r2, r3
 801a9a6:	68fb      	ldr	r3, [r7, #12]
 801a9a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801a9aa:	687b      	ldr	r3, [r7, #4]
 801a9ac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801a9b0:	2b01      	cmp	r3, #1
 801a9b2:	d101      	bne.n	801a9b8 <HAL_PCD_EP_SetStall+0x82>
 801a9b4:	2302      	movs	r3, #2
 801a9b6:	e01e      	b.n	801a9f6 <HAL_PCD_EP_SetStall+0xc0>
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	2201      	movs	r2, #1
 801a9bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	681b      	ldr	r3, [r3, #0]
 801a9c4:	68f9      	ldr	r1, [r7, #12]
 801a9c6:	4618      	mov	r0, r3
 801a9c8:	f004 f9a3 	bl	801ed12 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801a9cc:	78fb      	ldrb	r3, [r7, #3]
 801a9ce:	f003 030f 	and.w	r3, r3, #15
 801a9d2:	2b00      	cmp	r3, #0
 801a9d4:	d10a      	bne.n	801a9ec <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 801a9d6:	687b      	ldr	r3, [r7, #4]
 801a9d8:	6818      	ldr	r0, [r3, #0]
 801a9da:	687b      	ldr	r3, [r7, #4]
 801a9dc:	691b      	ldr	r3, [r3, #16]
 801a9de:	b2d9      	uxtb	r1, r3
 801a9e0:	687b      	ldr	r3, [r7, #4]
 801a9e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801a9e6:	461a      	mov	r2, r3
 801a9e8:	f004 fb94 	bl	801f114 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	2200      	movs	r2, #0
 801a9f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801a9f4:	2300      	movs	r3, #0
}
 801a9f6:	4618      	mov	r0, r3
 801a9f8:	3710      	adds	r7, #16
 801a9fa:	46bd      	mov	sp, r7
 801a9fc:	bd80      	pop	{r7, pc}

0801a9fe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801a9fe:	b580      	push	{r7, lr}
 801aa00:	b084      	sub	sp, #16
 801aa02:	af00      	add	r7, sp, #0
 801aa04:	6078      	str	r0, [r7, #4]
 801aa06:	460b      	mov	r3, r1
 801aa08:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 801aa0a:	78fb      	ldrb	r3, [r7, #3]
 801aa0c:	f003 020f 	and.w	r2, r3, #15
 801aa10:	687b      	ldr	r3, [r7, #4]
 801aa12:	685b      	ldr	r3, [r3, #4]
 801aa14:	429a      	cmp	r2, r3
 801aa16:	d901      	bls.n	801aa1c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 801aa18:	2301      	movs	r3, #1
 801aa1a:	e042      	b.n	801aaa2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801aa1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801aa20:	2b00      	cmp	r3, #0
 801aa22:	da0f      	bge.n	801aa44 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801aa24:	78fb      	ldrb	r3, [r7, #3]
 801aa26:	f003 020f 	and.w	r2, r3, #15
 801aa2a:	4613      	mov	r3, r2
 801aa2c:	00db      	lsls	r3, r3, #3
 801aa2e:	1a9b      	subs	r3, r3, r2
 801aa30:	009b      	lsls	r3, r3, #2
 801aa32:	3338      	adds	r3, #56	; 0x38
 801aa34:	687a      	ldr	r2, [r7, #4]
 801aa36:	4413      	add	r3, r2
 801aa38:	3304      	adds	r3, #4
 801aa3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801aa3c:	68fb      	ldr	r3, [r7, #12]
 801aa3e:	2201      	movs	r2, #1
 801aa40:	705a      	strb	r2, [r3, #1]
 801aa42:	e00f      	b.n	801aa64 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801aa44:	78fb      	ldrb	r3, [r7, #3]
 801aa46:	f003 020f 	and.w	r2, r3, #15
 801aa4a:	4613      	mov	r3, r2
 801aa4c:	00db      	lsls	r3, r3, #3
 801aa4e:	1a9b      	subs	r3, r3, r2
 801aa50:	009b      	lsls	r3, r3, #2
 801aa52:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801aa56:	687a      	ldr	r2, [r7, #4]
 801aa58:	4413      	add	r3, r2
 801aa5a:	3304      	adds	r3, #4
 801aa5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801aa5e:	68fb      	ldr	r3, [r7, #12]
 801aa60:	2200      	movs	r2, #0
 801aa62:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 801aa64:	68fb      	ldr	r3, [r7, #12]
 801aa66:	2200      	movs	r2, #0
 801aa68:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801aa6a:	78fb      	ldrb	r3, [r7, #3]
 801aa6c:	f003 030f 	and.w	r3, r3, #15
 801aa70:	b2da      	uxtb	r2, r3
 801aa72:	68fb      	ldr	r3, [r7, #12]
 801aa74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801aa76:	687b      	ldr	r3, [r7, #4]
 801aa78:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801aa7c:	2b01      	cmp	r3, #1
 801aa7e:	d101      	bne.n	801aa84 <HAL_PCD_EP_ClrStall+0x86>
 801aa80:	2302      	movs	r3, #2
 801aa82:	e00e      	b.n	801aaa2 <HAL_PCD_EP_ClrStall+0xa4>
 801aa84:	687b      	ldr	r3, [r7, #4]
 801aa86:	2201      	movs	r2, #1
 801aa88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 801aa8c:	687b      	ldr	r3, [r7, #4]
 801aa8e:	681b      	ldr	r3, [r3, #0]
 801aa90:	68f9      	ldr	r1, [r7, #12]
 801aa92:	4618      	mov	r0, r3
 801aa94:	f004 f9ab 	bl	801edee <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	2200      	movs	r2, #0
 801aa9c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801aaa0:	2300      	movs	r3, #0
}
 801aaa2:	4618      	mov	r0, r3
 801aaa4:	3710      	adds	r7, #16
 801aaa6:	46bd      	mov	sp, r7
 801aaa8:	bd80      	pop	{r7, pc}

0801aaaa <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801aaaa:	b580      	push	{r7, lr}
 801aaac:	b082      	sub	sp, #8
 801aaae:	af00      	add	r7, sp, #0
 801aab0:	6078      	str	r0, [r7, #4]
 801aab2:	460b      	mov	r3, r1
 801aab4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 801aab6:	687b      	ldr	r3, [r7, #4]
 801aab8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801aabc:	2b01      	cmp	r3, #1
 801aabe:	d101      	bne.n	801aac4 <HAL_PCD_EP_Flush+0x1a>
 801aac0:	2302      	movs	r3, #2
 801aac2:	e01b      	b.n	801aafc <HAL_PCD_EP_Flush+0x52>
 801aac4:	687b      	ldr	r3, [r7, #4]
 801aac6:	2201      	movs	r2, #1
 801aac8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 801aacc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801aad0:	2b00      	cmp	r3, #0
 801aad2:	da09      	bge.n	801aae8 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 801aad4:	687b      	ldr	r3, [r7, #4]
 801aad6:	681a      	ldr	r2, [r3, #0]
 801aad8:	78fb      	ldrb	r3, [r7, #3]
 801aada:	f003 030f 	and.w	r3, r3, #15
 801aade:	4619      	mov	r1, r3
 801aae0:	4610      	mov	r0, r2
 801aae2:	f003 fb03 	bl	801e0ec <USB_FlushTxFifo>
 801aae6:	e004      	b.n	801aaf2 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 801aae8:	687b      	ldr	r3, [r7, #4]
 801aaea:	681b      	ldr	r3, [r3, #0]
 801aaec:	4618      	mov	r0, r3
 801aaee:	f003 fb21 	bl	801e134 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	2200      	movs	r2, #0
 801aaf6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801aafa:	2300      	movs	r3, #0
}
 801aafc:	4618      	mov	r0, r3
 801aafe:	3708      	adds	r7, #8
 801ab00:	46bd      	mov	sp, r7
 801ab02:	bd80      	pop	{r7, pc}

0801ab04 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801ab04:	b580      	push	{r7, lr}
 801ab06:	b08a      	sub	sp, #40	; 0x28
 801ab08:	af02      	add	r7, sp, #8
 801ab0a:	6078      	str	r0, [r7, #4]
 801ab0c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801ab0e:	687b      	ldr	r3, [r7, #4]
 801ab10:	681b      	ldr	r3, [r3, #0]
 801ab12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ab14:	697b      	ldr	r3, [r7, #20]
 801ab16:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 801ab18:	683a      	ldr	r2, [r7, #0]
 801ab1a:	4613      	mov	r3, r2
 801ab1c:	00db      	lsls	r3, r3, #3
 801ab1e:	1a9b      	subs	r3, r3, r2
 801ab20:	009b      	lsls	r3, r3, #2
 801ab22:	3338      	adds	r3, #56	; 0x38
 801ab24:	687a      	ldr	r2, [r7, #4]
 801ab26:	4413      	add	r3, r2
 801ab28:	3304      	adds	r3, #4
 801ab2a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 801ab2c:	68fb      	ldr	r3, [r7, #12]
 801ab2e:	699a      	ldr	r2, [r3, #24]
 801ab30:	68fb      	ldr	r3, [r7, #12]
 801ab32:	695b      	ldr	r3, [r3, #20]
 801ab34:	429a      	cmp	r2, r3
 801ab36:	d901      	bls.n	801ab3c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 801ab38:	2301      	movs	r3, #1
 801ab3a:	e06c      	b.n	801ac16 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 801ab3c:	68fb      	ldr	r3, [r7, #12]
 801ab3e:	695a      	ldr	r2, [r3, #20]
 801ab40:	68fb      	ldr	r3, [r7, #12]
 801ab42:	699b      	ldr	r3, [r3, #24]
 801ab44:	1ad3      	subs	r3, r2, r3
 801ab46:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 801ab48:	68fb      	ldr	r3, [r7, #12]
 801ab4a:	689b      	ldr	r3, [r3, #8]
 801ab4c:	69fa      	ldr	r2, [r7, #28]
 801ab4e:	429a      	cmp	r2, r3
 801ab50:	d902      	bls.n	801ab58 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 801ab52:	68fb      	ldr	r3, [r7, #12]
 801ab54:	689b      	ldr	r3, [r3, #8]
 801ab56:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 801ab58:	69fb      	ldr	r3, [r7, #28]
 801ab5a:	3303      	adds	r3, #3
 801ab5c:	089b      	lsrs	r3, r3, #2
 801ab5e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801ab60:	e02b      	b.n	801abba <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 801ab62:	68fb      	ldr	r3, [r7, #12]
 801ab64:	695a      	ldr	r2, [r3, #20]
 801ab66:	68fb      	ldr	r3, [r7, #12]
 801ab68:	699b      	ldr	r3, [r3, #24]
 801ab6a:	1ad3      	subs	r3, r2, r3
 801ab6c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 801ab6e:	68fb      	ldr	r3, [r7, #12]
 801ab70:	689b      	ldr	r3, [r3, #8]
 801ab72:	69fa      	ldr	r2, [r7, #28]
 801ab74:	429a      	cmp	r2, r3
 801ab76:	d902      	bls.n	801ab7e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 801ab78:	68fb      	ldr	r3, [r7, #12]
 801ab7a:	689b      	ldr	r3, [r3, #8]
 801ab7c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 801ab7e:	69fb      	ldr	r3, [r7, #28]
 801ab80:	3303      	adds	r3, #3
 801ab82:	089b      	lsrs	r3, r3, #2
 801ab84:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 801ab86:	68fb      	ldr	r3, [r7, #12]
 801ab88:	68d9      	ldr	r1, [r3, #12]
 801ab8a:	683b      	ldr	r3, [r7, #0]
 801ab8c:	b2da      	uxtb	r2, r3
 801ab8e:	69fb      	ldr	r3, [r7, #28]
 801ab90:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 801ab92:	687b      	ldr	r3, [r7, #4]
 801ab94:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 801ab96:	b2db      	uxtb	r3, r3
 801ab98:	9300      	str	r3, [sp, #0]
 801ab9a:	4603      	mov	r3, r0
 801ab9c:	6978      	ldr	r0, [r7, #20]
 801ab9e:	f004 f822 	bl	801ebe6 <USB_WritePacket>

    ep->xfer_buff  += len;
 801aba2:	68fb      	ldr	r3, [r7, #12]
 801aba4:	68da      	ldr	r2, [r3, #12]
 801aba6:	69fb      	ldr	r3, [r7, #28]
 801aba8:	441a      	add	r2, r3
 801abaa:	68fb      	ldr	r3, [r7, #12]
 801abac:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 801abae:	68fb      	ldr	r3, [r7, #12]
 801abb0:	699a      	ldr	r2, [r3, #24]
 801abb2:	69fb      	ldr	r3, [r7, #28]
 801abb4:	441a      	add	r2, r3
 801abb6:	68fb      	ldr	r3, [r7, #12]
 801abb8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801abba:	683b      	ldr	r3, [r7, #0]
 801abbc:	015a      	lsls	r2, r3, #5
 801abbe:	693b      	ldr	r3, [r7, #16]
 801abc0:	4413      	add	r3, r2
 801abc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801abc6:	699b      	ldr	r3, [r3, #24]
 801abc8:	b29b      	uxth	r3, r3
 801abca:	69ba      	ldr	r2, [r7, #24]
 801abcc:	429a      	cmp	r2, r3
 801abce:	d809      	bhi.n	801abe4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801abd0:	68fb      	ldr	r3, [r7, #12]
 801abd2:	699a      	ldr	r2, [r3, #24]
 801abd4:	68fb      	ldr	r3, [r7, #12]
 801abd6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801abd8:	429a      	cmp	r2, r3
 801abda:	d203      	bcs.n	801abe4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801abdc:	68fb      	ldr	r3, [r7, #12]
 801abde:	695b      	ldr	r3, [r3, #20]
 801abe0:	2b00      	cmp	r3, #0
 801abe2:	d1be      	bne.n	801ab62 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 801abe4:	68fb      	ldr	r3, [r7, #12]
 801abe6:	695a      	ldr	r2, [r3, #20]
 801abe8:	68fb      	ldr	r3, [r7, #12]
 801abea:	699b      	ldr	r3, [r3, #24]
 801abec:	429a      	cmp	r2, r3
 801abee:	d811      	bhi.n	801ac14 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 801abf0:	683b      	ldr	r3, [r7, #0]
 801abf2:	f003 030f 	and.w	r3, r3, #15
 801abf6:	2201      	movs	r2, #1
 801abf8:	fa02 f303 	lsl.w	r3, r2, r3
 801abfc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 801abfe:	693b      	ldr	r3, [r7, #16]
 801ac00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ac04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801ac06:	68bb      	ldr	r3, [r7, #8]
 801ac08:	43db      	mvns	r3, r3
 801ac0a:	6939      	ldr	r1, [r7, #16]
 801ac0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801ac10:	4013      	ands	r3, r2
 801ac12:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 801ac14:	2300      	movs	r3, #0
}
 801ac16:	4618      	mov	r0, r3
 801ac18:	3720      	adds	r7, #32
 801ac1a:	46bd      	mov	sp, r7
 801ac1c:	bd80      	pop	{r7, pc}
	...

0801ac20 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801ac20:	b580      	push	{r7, lr}
 801ac22:	b086      	sub	sp, #24
 801ac24:	af00      	add	r7, sp, #0
 801ac26:	6078      	str	r0, [r7, #4]
 801ac28:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801ac2a:	687b      	ldr	r3, [r7, #4]
 801ac2c:	681b      	ldr	r3, [r3, #0]
 801ac2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ac30:	697b      	ldr	r3, [r7, #20]
 801ac32:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801ac34:	697b      	ldr	r3, [r7, #20]
 801ac36:	333c      	adds	r3, #60	; 0x3c
 801ac38:	3304      	adds	r3, #4
 801ac3a:	681b      	ldr	r3, [r3, #0]
 801ac3c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801ac3e:	683b      	ldr	r3, [r7, #0]
 801ac40:	015a      	lsls	r2, r3, #5
 801ac42:	693b      	ldr	r3, [r7, #16]
 801ac44:	4413      	add	r3, r2
 801ac46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ac4a:	689b      	ldr	r3, [r3, #8]
 801ac4c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 801ac4e:	687b      	ldr	r3, [r7, #4]
 801ac50:	691b      	ldr	r3, [r3, #16]
 801ac52:	2b01      	cmp	r3, #1
 801ac54:	f040 80a0 	bne.w	801ad98 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 801ac58:	68bb      	ldr	r3, [r7, #8]
 801ac5a:	f003 0308 	and.w	r3, r3, #8
 801ac5e:	2b00      	cmp	r3, #0
 801ac60:	d015      	beq.n	801ac8e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801ac62:	68fb      	ldr	r3, [r7, #12]
 801ac64:	4a72      	ldr	r2, [pc, #456]	; (801ae30 <PCD_EP_OutXfrComplete_int+0x210>)
 801ac66:	4293      	cmp	r3, r2
 801ac68:	f240 80dd 	bls.w	801ae26 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801ac6c:	68bb      	ldr	r3, [r7, #8]
 801ac6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801ac72:	2b00      	cmp	r3, #0
 801ac74:	f000 80d7 	beq.w	801ae26 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801ac78:	683b      	ldr	r3, [r7, #0]
 801ac7a:	015a      	lsls	r2, r3, #5
 801ac7c:	693b      	ldr	r3, [r7, #16]
 801ac7e:	4413      	add	r3, r2
 801ac80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ac84:	461a      	mov	r2, r3
 801ac86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801ac8a:	6093      	str	r3, [r2, #8]
 801ac8c:	e0cb      	b.n	801ae26 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 801ac8e:	68bb      	ldr	r3, [r7, #8]
 801ac90:	f003 0320 	and.w	r3, r3, #32
 801ac94:	2b00      	cmp	r3, #0
 801ac96:	d009      	beq.n	801acac <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801ac98:	683b      	ldr	r3, [r7, #0]
 801ac9a:	015a      	lsls	r2, r3, #5
 801ac9c:	693b      	ldr	r3, [r7, #16]
 801ac9e:	4413      	add	r3, r2
 801aca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801aca4:	461a      	mov	r2, r3
 801aca6:	2320      	movs	r3, #32
 801aca8:	6093      	str	r3, [r2, #8]
 801acaa:	e0bc      	b.n	801ae26 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 801acac:	68bb      	ldr	r3, [r7, #8]
 801acae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801acb2:	2b00      	cmp	r3, #0
 801acb4:	f040 80b7 	bne.w	801ae26 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801acb8:	68fb      	ldr	r3, [r7, #12]
 801acba:	4a5d      	ldr	r2, [pc, #372]	; (801ae30 <PCD_EP_OutXfrComplete_int+0x210>)
 801acbc:	4293      	cmp	r3, r2
 801acbe:	d90f      	bls.n	801ace0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801acc0:	68bb      	ldr	r3, [r7, #8]
 801acc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801acc6:	2b00      	cmp	r3, #0
 801acc8:	d00a      	beq.n	801ace0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801acca:	683b      	ldr	r3, [r7, #0]
 801accc:	015a      	lsls	r2, r3, #5
 801acce:	693b      	ldr	r3, [r7, #16]
 801acd0:	4413      	add	r3, r2
 801acd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801acd6:	461a      	mov	r2, r3
 801acd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801acdc:	6093      	str	r3, [r2, #8]
 801acde:	e0a2      	b.n	801ae26 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 801ace0:	6879      	ldr	r1, [r7, #4]
 801ace2:	683a      	ldr	r2, [r7, #0]
 801ace4:	4613      	mov	r3, r2
 801ace6:	00db      	lsls	r3, r3, #3
 801ace8:	1a9b      	subs	r3, r3, r2
 801acea:	009b      	lsls	r3, r3, #2
 801acec:	440b      	add	r3, r1
 801acee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 801acf2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 801acf4:	683b      	ldr	r3, [r7, #0]
 801acf6:	0159      	lsls	r1, r3, #5
 801acf8:	693b      	ldr	r3, [r7, #16]
 801acfa:	440b      	add	r3, r1
 801acfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ad00:	691b      	ldr	r3, [r3, #16]
 801ad02:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 801ad06:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 801ad08:	6878      	ldr	r0, [r7, #4]
 801ad0a:	683a      	ldr	r2, [r7, #0]
 801ad0c:	4613      	mov	r3, r2
 801ad0e:	00db      	lsls	r3, r3, #3
 801ad10:	1a9b      	subs	r3, r3, r2
 801ad12:	009b      	lsls	r3, r3, #2
 801ad14:	4403      	add	r3, r0
 801ad16:	f503 7305 	add.w	r3, r3, #532	; 0x214
 801ad1a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 801ad1c:	6879      	ldr	r1, [r7, #4]
 801ad1e:	683a      	ldr	r2, [r7, #0]
 801ad20:	4613      	mov	r3, r2
 801ad22:	00db      	lsls	r3, r3, #3
 801ad24:	1a9b      	subs	r3, r3, r2
 801ad26:	009b      	lsls	r3, r3, #2
 801ad28:	440b      	add	r3, r1
 801ad2a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801ad2e:	6819      	ldr	r1, [r3, #0]
 801ad30:	6878      	ldr	r0, [r7, #4]
 801ad32:	683a      	ldr	r2, [r7, #0]
 801ad34:	4613      	mov	r3, r2
 801ad36:	00db      	lsls	r3, r3, #3
 801ad38:	1a9b      	subs	r3, r3, r2
 801ad3a:	009b      	lsls	r3, r3, #2
 801ad3c:	4403      	add	r3, r0
 801ad3e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 801ad42:	681b      	ldr	r3, [r3, #0]
 801ad44:	4419      	add	r1, r3
 801ad46:	6878      	ldr	r0, [r7, #4]
 801ad48:	683a      	ldr	r2, [r7, #0]
 801ad4a:	4613      	mov	r3, r2
 801ad4c:	00db      	lsls	r3, r3, #3
 801ad4e:	1a9b      	subs	r3, r3, r2
 801ad50:	009b      	lsls	r3, r3, #2
 801ad52:	4403      	add	r3, r0
 801ad54:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801ad58:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 801ad5a:	683b      	ldr	r3, [r7, #0]
 801ad5c:	2b00      	cmp	r3, #0
 801ad5e:	d114      	bne.n	801ad8a <PCD_EP_OutXfrComplete_int+0x16a>
 801ad60:	6879      	ldr	r1, [r7, #4]
 801ad62:	683a      	ldr	r2, [r7, #0]
 801ad64:	4613      	mov	r3, r2
 801ad66:	00db      	lsls	r3, r3, #3
 801ad68:	1a9b      	subs	r3, r3, r2
 801ad6a:	009b      	lsls	r3, r3, #2
 801ad6c:	440b      	add	r3, r1
 801ad6e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 801ad72:	681b      	ldr	r3, [r3, #0]
 801ad74:	2b00      	cmp	r3, #0
 801ad76:	d108      	bne.n	801ad8a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801ad78:	687b      	ldr	r3, [r7, #4]
 801ad7a:	6818      	ldr	r0, [r3, #0]
 801ad7c:	687b      	ldr	r3, [r7, #4]
 801ad7e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801ad82:	461a      	mov	r2, r3
 801ad84:	2101      	movs	r1, #1
 801ad86:	f004 f9c5 	bl	801f114 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801ad8a:	683b      	ldr	r3, [r7, #0]
 801ad8c:	b2db      	uxtb	r3, r3
 801ad8e:	4619      	mov	r1, r3
 801ad90:	6878      	ldr	r0, [r7, #4]
 801ad92:	f007 fbef 	bl	8022574 <HAL_PCD_DataOutStageCallback>
 801ad96:	e046      	b.n	801ae26 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 801ad98:	68fb      	ldr	r3, [r7, #12]
 801ad9a:	4a26      	ldr	r2, [pc, #152]	; (801ae34 <PCD_EP_OutXfrComplete_int+0x214>)
 801ad9c:	4293      	cmp	r3, r2
 801ad9e:	d124      	bne.n	801adea <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 801ada0:	68bb      	ldr	r3, [r7, #8]
 801ada2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801ada6:	2b00      	cmp	r3, #0
 801ada8:	d00a      	beq.n	801adc0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801adaa:	683b      	ldr	r3, [r7, #0]
 801adac:	015a      	lsls	r2, r3, #5
 801adae:	693b      	ldr	r3, [r7, #16]
 801adb0:	4413      	add	r3, r2
 801adb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801adb6:	461a      	mov	r2, r3
 801adb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801adbc:	6093      	str	r3, [r2, #8]
 801adbe:	e032      	b.n	801ae26 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 801adc0:	68bb      	ldr	r3, [r7, #8]
 801adc2:	f003 0320 	and.w	r3, r3, #32
 801adc6:	2b00      	cmp	r3, #0
 801adc8:	d008      	beq.n	801addc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801adca:	683b      	ldr	r3, [r7, #0]
 801adcc:	015a      	lsls	r2, r3, #5
 801adce:	693b      	ldr	r3, [r7, #16]
 801add0:	4413      	add	r3, r2
 801add2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801add6:	461a      	mov	r2, r3
 801add8:	2320      	movs	r3, #32
 801adda:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801addc:	683b      	ldr	r3, [r7, #0]
 801adde:	b2db      	uxtb	r3, r3
 801ade0:	4619      	mov	r1, r3
 801ade2:	6878      	ldr	r0, [r7, #4]
 801ade4:	f007 fbc6 	bl	8022574 <HAL_PCD_DataOutStageCallback>
 801ade8:	e01d      	b.n	801ae26 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 801adea:	683b      	ldr	r3, [r7, #0]
 801adec:	2b00      	cmp	r3, #0
 801adee:	d114      	bne.n	801ae1a <PCD_EP_OutXfrComplete_int+0x1fa>
 801adf0:	6879      	ldr	r1, [r7, #4]
 801adf2:	683a      	ldr	r2, [r7, #0]
 801adf4:	4613      	mov	r3, r2
 801adf6:	00db      	lsls	r3, r3, #3
 801adf8:	1a9b      	subs	r3, r3, r2
 801adfa:	009b      	lsls	r3, r3, #2
 801adfc:	440b      	add	r3, r1
 801adfe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 801ae02:	681b      	ldr	r3, [r3, #0]
 801ae04:	2b00      	cmp	r3, #0
 801ae06:	d108      	bne.n	801ae1a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 801ae08:	687b      	ldr	r3, [r7, #4]
 801ae0a:	6818      	ldr	r0, [r3, #0]
 801ae0c:	687b      	ldr	r3, [r7, #4]
 801ae0e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801ae12:	461a      	mov	r2, r3
 801ae14:	2100      	movs	r1, #0
 801ae16:	f004 f97d 	bl	801f114 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801ae1a:	683b      	ldr	r3, [r7, #0]
 801ae1c:	b2db      	uxtb	r3, r3
 801ae1e:	4619      	mov	r1, r3
 801ae20:	6878      	ldr	r0, [r7, #4]
 801ae22:	f007 fba7 	bl	8022574 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 801ae26:	2300      	movs	r3, #0
}
 801ae28:	4618      	mov	r0, r3
 801ae2a:	3718      	adds	r7, #24
 801ae2c:	46bd      	mov	sp, r7
 801ae2e:	bd80      	pop	{r7, pc}
 801ae30:	4f54300a 	.word	0x4f54300a
 801ae34:	4f54310a 	.word	0x4f54310a

0801ae38 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801ae38:	b580      	push	{r7, lr}
 801ae3a:	b086      	sub	sp, #24
 801ae3c:	af00      	add	r7, sp, #0
 801ae3e:	6078      	str	r0, [r7, #4]
 801ae40:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801ae42:	687b      	ldr	r3, [r7, #4]
 801ae44:	681b      	ldr	r3, [r3, #0]
 801ae46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ae48:	697b      	ldr	r3, [r7, #20]
 801ae4a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801ae4c:	697b      	ldr	r3, [r7, #20]
 801ae4e:	333c      	adds	r3, #60	; 0x3c
 801ae50:	3304      	adds	r3, #4
 801ae52:	681b      	ldr	r3, [r3, #0]
 801ae54:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801ae56:	683b      	ldr	r3, [r7, #0]
 801ae58:	015a      	lsls	r2, r3, #5
 801ae5a:	693b      	ldr	r3, [r7, #16]
 801ae5c:	4413      	add	r3, r2
 801ae5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ae62:	689b      	ldr	r3, [r3, #8]
 801ae64:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801ae66:	68fb      	ldr	r3, [r7, #12]
 801ae68:	4a15      	ldr	r2, [pc, #84]	; (801aec0 <PCD_EP_OutSetupPacket_int+0x88>)
 801ae6a:	4293      	cmp	r3, r2
 801ae6c:	d90e      	bls.n	801ae8c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801ae6e:	68bb      	ldr	r3, [r7, #8]
 801ae70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801ae74:	2b00      	cmp	r3, #0
 801ae76:	d009      	beq.n	801ae8c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801ae78:	683b      	ldr	r3, [r7, #0]
 801ae7a:	015a      	lsls	r2, r3, #5
 801ae7c:	693b      	ldr	r3, [r7, #16]
 801ae7e:	4413      	add	r3, r2
 801ae80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ae84:	461a      	mov	r2, r3
 801ae86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801ae8a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 801ae8c:	6878      	ldr	r0, [r7, #4]
 801ae8e:	f007 fb5f 	bl	8022550 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 801ae92:	68fb      	ldr	r3, [r7, #12]
 801ae94:	4a0a      	ldr	r2, [pc, #40]	; (801aec0 <PCD_EP_OutSetupPacket_int+0x88>)
 801ae96:	4293      	cmp	r3, r2
 801ae98:	d90c      	bls.n	801aeb4 <PCD_EP_OutSetupPacket_int+0x7c>
 801ae9a:	687b      	ldr	r3, [r7, #4]
 801ae9c:	691b      	ldr	r3, [r3, #16]
 801ae9e:	2b01      	cmp	r3, #1
 801aea0:	d108      	bne.n	801aeb4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801aea2:	687b      	ldr	r3, [r7, #4]
 801aea4:	6818      	ldr	r0, [r3, #0]
 801aea6:	687b      	ldr	r3, [r7, #4]
 801aea8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801aeac:	461a      	mov	r2, r3
 801aeae:	2101      	movs	r1, #1
 801aeb0:	f004 f930 	bl	801f114 <USB_EP0_OutStart>
  }

  return HAL_OK;
 801aeb4:	2300      	movs	r3, #0
}
 801aeb6:	4618      	mov	r0, r3
 801aeb8:	3718      	adds	r7, #24
 801aeba:	46bd      	mov	sp, r7
 801aebc:	bd80      	pop	{r7, pc}
 801aebe:	bf00      	nop
 801aec0:	4f54300a 	.word	0x4f54300a

0801aec4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 801aec4:	b480      	push	{r7}
 801aec6:	b085      	sub	sp, #20
 801aec8:	af00      	add	r7, sp, #0
 801aeca:	6078      	str	r0, [r7, #4]
 801aecc:	460b      	mov	r3, r1
 801aece:	70fb      	strb	r3, [r7, #3]
 801aed0:	4613      	mov	r3, r2
 801aed2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 801aed4:	687b      	ldr	r3, [r7, #4]
 801aed6:	681b      	ldr	r3, [r3, #0]
 801aed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aeda:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 801aedc:	78fb      	ldrb	r3, [r7, #3]
 801aede:	2b00      	cmp	r3, #0
 801aee0:	d107      	bne.n	801aef2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 801aee2:	883b      	ldrh	r3, [r7, #0]
 801aee4:	0419      	lsls	r1, r3, #16
 801aee6:	687b      	ldr	r3, [r7, #4]
 801aee8:	681b      	ldr	r3, [r3, #0]
 801aeea:	68ba      	ldr	r2, [r7, #8]
 801aeec:	430a      	orrs	r2, r1
 801aeee:	629a      	str	r2, [r3, #40]	; 0x28
 801aef0:	e028      	b.n	801af44 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 801aef2:	687b      	ldr	r3, [r7, #4]
 801aef4:	681b      	ldr	r3, [r3, #0]
 801aef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aef8:	0c1b      	lsrs	r3, r3, #16
 801aefa:	68ba      	ldr	r2, [r7, #8]
 801aefc:	4413      	add	r3, r2
 801aefe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 801af00:	2300      	movs	r3, #0
 801af02:	73fb      	strb	r3, [r7, #15]
 801af04:	e00d      	b.n	801af22 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 801af06:	687b      	ldr	r3, [r7, #4]
 801af08:	681a      	ldr	r2, [r3, #0]
 801af0a:	7bfb      	ldrb	r3, [r7, #15]
 801af0c:	3340      	adds	r3, #64	; 0x40
 801af0e:	009b      	lsls	r3, r3, #2
 801af10:	4413      	add	r3, r2
 801af12:	685b      	ldr	r3, [r3, #4]
 801af14:	0c1b      	lsrs	r3, r3, #16
 801af16:	68ba      	ldr	r2, [r7, #8]
 801af18:	4413      	add	r3, r2
 801af1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 801af1c:	7bfb      	ldrb	r3, [r7, #15]
 801af1e:	3301      	adds	r3, #1
 801af20:	73fb      	strb	r3, [r7, #15]
 801af22:	7bfa      	ldrb	r2, [r7, #15]
 801af24:	78fb      	ldrb	r3, [r7, #3]
 801af26:	3b01      	subs	r3, #1
 801af28:	429a      	cmp	r2, r3
 801af2a:	d3ec      	bcc.n	801af06 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 801af2c:	883b      	ldrh	r3, [r7, #0]
 801af2e:	0418      	lsls	r0, r3, #16
 801af30:	687b      	ldr	r3, [r7, #4]
 801af32:	6819      	ldr	r1, [r3, #0]
 801af34:	78fb      	ldrb	r3, [r7, #3]
 801af36:	3b01      	subs	r3, #1
 801af38:	68ba      	ldr	r2, [r7, #8]
 801af3a:	4302      	orrs	r2, r0
 801af3c:	3340      	adds	r3, #64	; 0x40
 801af3e:	009b      	lsls	r3, r3, #2
 801af40:	440b      	add	r3, r1
 801af42:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 801af44:	2300      	movs	r3, #0
}
 801af46:	4618      	mov	r0, r3
 801af48:	3714      	adds	r7, #20
 801af4a:	46bd      	mov	sp, r7
 801af4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af50:	4770      	bx	lr

0801af52 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 801af52:	b480      	push	{r7}
 801af54:	b083      	sub	sp, #12
 801af56:	af00      	add	r7, sp, #0
 801af58:	6078      	str	r0, [r7, #4]
 801af5a:	460b      	mov	r3, r1
 801af5c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 801af5e:	687b      	ldr	r3, [r7, #4]
 801af60:	681b      	ldr	r3, [r3, #0]
 801af62:	887a      	ldrh	r2, [r7, #2]
 801af64:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 801af66:	2300      	movs	r3, #0
}
 801af68:	4618      	mov	r0, r3
 801af6a:	370c      	adds	r7, #12
 801af6c:	46bd      	mov	sp, r7
 801af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af72:	4770      	bx	lr

0801af74 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801af74:	b480      	push	{r7}
 801af76:	b085      	sub	sp, #20
 801af78:	af00      	add	r7, sp, #0
 801af7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801af7c:	687b      	ldr	r3, [r7, #4]
 801af7e:	681b      	ldr	r3, [r3, #0]
 801af80:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 801af82:	687b      	ldr	r3, [r7, #4]
 801af84:	2201      	movs	r2, #1
 801af86:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 801af8a:	687b      	ldr	r3, [r7, #4]
 801af8c:	2200      	movs	r2, #0
 801af8e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 801af92:	68fb      	ldr	r3, [r7, #12]
 801af94:	699b      	ldr	r3, [r3, #24]
 801af96:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801af9a:	68fb      	ldr	r3, [r7, #12]
 801af9c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 801af9e:	68fb      	ldr	r3, [r7, #12]
 801afa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801afa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801afa6:	f043 0303 	orr.w	r3, r3, #3
 801afaa:	68fa      	ldr	r2, [r7, #12]
 801afac:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 801afae:	2300      	movs	r3, #0
}
 801afb0:	4618      	mov	r0, r3
 801afb2:	3714      	adds	r7, #20
 801afb4:	46bd      	mov	sp, r7
 801afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afba:	4770      	bx	lr

0801afbc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 801afbc:	b580      	push	{r7, lr}
 801afbe:	b082      	sub	sp, #8
 801afc0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 801afc2:	2300      	movs	r3, #0
 801afc4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 801afc6:	2300      	movs	r3, #0
 801afc8:	603b      	str	r3, [r7, #0]
 801afca:	4b20      	ldr	r3, [pc, #128]	; (801b04c <HAL_PWREx_EnableOverDrive+0x90>)
 801afcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801afce:	4a1f      	ldr	r2, [pc, #124]	; (801b04c <HAL_PWREx_EnableOverDrive+0x90>)
 801afd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801afd4:	6413      	str	r3, [r2, #64]	; 0x40
 801afd6:	4b1d      	ldr	r3, [pc, #116]	; (801b04c <HAL_PWREx_EnableOverDrive+0x90>)
 801afd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801afda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801afde:	603b      	str	r3, [r7, #0]
 801afe0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 801afe2:	4b1b      	ldr	r3, [pc, #108]	; (801b050 <HAL_PWREx_EnableOverDrive+0x94>)
 801afe4:	2201      	movs	r2, #1
 801afe6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801afe8:	f7fd f9e8 	bl	80183bc <HAL_GetTick>
 801afec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801afee:	e009      	b.n	801b004 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801aff0:	f7fd f9e4 	bl	80183bc <HAL_GetTick>
 801aff4:	4602      	mov	r2, r0
 801aff6:	687b      	ldr	r3, [r7, #4]
 801aff8:	1ad3      	subs	r3, r2, r3
 801affa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801affe:	d901      	bls.n	801b004 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 801b000:	2303      	movs	r3, #3
 801b002:	e01f      	b.n	801b044 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801b004:	4b13      	ldr	r3, [pc, #76]	; (801b054 <HAL_PWREx_EnableOverDrive+0x98>)
 801b006:	685b      	ldr	r3, [r3, #4]
 801b008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801b00c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b010:	d1ee      	bne.n	801aff0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 801b012:	4b11      	ldr	r3, [pc, #68]	; (801b058 <HAL_PWREx_EnableOverDrive+0x9c>)
 801b014:	2201      	movs	r2, #1
 801b016:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801b018:	f7fd f9d0 	bl	80183bc <HAL_GetTick>
 801b01c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801b01e:	e009      	b.n	801b034 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801b020:	f7fd f9cc 	bl	80183bc <HAL_GetTick>
 801b024:	4602      	mov	r2, r0
 801b026:	687b      	ldr	r3, [r7, #4]
 801b028:	1ad3      	subs	r3, r2, r3
 801b02a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801b02e:	d901      	bls.n	801b034 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 801b030:	2303      	movs	r3, #3
 801b032:	e007      	b.n	801b044 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801b034:	4b07      	ldr	r3, [pc, #28]	; (801b054 <HAL_PWREx_EnableOverDrive+0x98>)
 801b036:	685b      	ldr	r3, [r3, #4]
 801b038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b03c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801b040:	d1ee      	bne.n	801b020 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 801b042:	2300      	movs	r3, #0
}
 801b044:	4618      	mov	r0, r3
 801b046:	3708      	adds	r7, #8
 801b048:	46bd      	mov	sp, r7
 801b04a:	bd80      	pop	{r7, pc}
 801b04c:	40023800 	.word	0x40023800
 801b050:	420e0040 	.word	0x420e0040
 801b054:	40007000 	.word	0x40007000
 801b058:	420e0044 	.word	0x420e0044

0801b05c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801b05c:	b580      	push	{r7, lr}
 801b05e:	b084      	sub	sp, #16
 801b060:	af00      	add	r7, sp, #0
 801b062:	6078      	str	r0, [r7, #4]
 801b064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801b066:	687b      	ldr	r3, [r7, #4]
 801b068:	2b00      	cmp	r3, #0
 801b06a:	d101      	bne.n	801b070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801b06c:	2301      	movs	r3, #1
 801b06e:	e0cc      	b.n	801b20a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801b070:	4b68      	ldr	r3, [pc, #416]	; (801b214 <HAL_RCC_ClockConfig+0x1b8>)
 801b072:	681b      	ldr	r3, [r3, #0]
 801b074:	f003 030f 	and.w	r3, r3, #15
 801b078:	683a      	ldr	r2, [r7, #0]
 801b07a:	429a      	cmp	r2, r3
 801b07c:	d90c      	bls.n	801b098 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b07e:	4b65      	ldr	r3, [pc, #404]	; (801b214 <HAL_RCC_ClockConfig+0x1b8>)
 801b080:	683a      	ldr	r2, [r7, #0]
 801b082:	b2d2      	uxtb	r2, r2
 801b084:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801b086:	4b63      	ldr	r3, [pc, #396]	; (801b214 <HAL_RCC_ClockConfig+0x1b8>)
 801b088:	681b      	ldr	r3, [r3, #0]
 801b08a:	f003 030f 	and.w	r3, r3, #15
 801b08e:	683a      	ldr	r2, [r7, #0]
 801b090:	429a      	cmp	r2, r3
 801b092:	d001      	beq.n	801b098 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801b094:	2301      	movs	r3, #1
 801b096:	e0b8      	b.n	801b20a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801b098:	687b      	ldr	r3, [r7, #4]
 801b09a:	681b      	ldr	r3, [r3, #0]
 801b09c:	f003 0302 	and.w	r3, r3, #2
 801b0a0:	2b00      	cmp	r3, #0
 801b0a2:	d020      	beq.n	801b0e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b0a4:	687b      	ldr	r3, [r7, #4]
 801b0a6:	681b      	ldr	r3, [r3, #0]
 801b0a8:	f003 0304 	and.w	r3, r3, #4
 801b0ac:	2b00      	cmp	r3, #0
 801b0ae:	d005      	beq.n	801b0bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801b0b0:	4b59      	ldr	r3, [pc, #356]	; (801b218 <HAL_RCC_ClockConfig+0x1bc>)
 801b0b2:	689b      	ldr	r3, [r3, #8]
 801b0b4:	4a58      	ldr	r2, [pc, #352]	; (801b218 <HAL_RCC_ClockConfig+0x1bc>)
 801b0b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801b0ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b0bc:	687b      	ldr	r3, [r7, #4]
 801b0be:	681b      	ldr	r3, [r3, #0]
 801b0c0:	f003 0308 	and.w	r3, r3, #8
 801b0c4:	2b00      	cmp	r3, #0
 801b0c6:	d005      	beq.n	801b0d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801b0c8:	4b53      	ldr	r3, [pc, #332]	; (801b218 <HAL_RCC_ClockConfig+0x1bc>)
 801b0ca:	689b      	ldr	r3, [r3, #8]
 801b0cc:	4a52      	ldr	r2, [pc, #328]	; (801b218 <HAL_RCC_ClockConfig+0x1bc>)
 801b0ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801b0d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801b0d4:	4b50      	ldr	r3, [pc, #320]	; (801b218 <HAL_RCC_ClockConfig+0x1bc>)
 801b0d6:	689b      	ldr	r3, [r3, #8]
 801b0d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801b0dc:	687b      	ldr	r3, [r7, #4]
 801b0de:	689b      	ldr	r3, [r3, #8]
 801b0e0:	494d      	ldr	r1, [pc, #308]	; (801b218 <HAL_RCC_ClockConfig+0x1bc>)
 801b0e2:	4313      	orrs	r3, r2
 801b0e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801b0e6:	687b      	ldr	r3, [r7, #4]
 801b0e8:	681b      	ldr	r3, [r3, #0]
 801b0ea:	f003 0301 	and.w	r3, r3, #1
 801b0ee:	2b00      	cmp	r3, #0
 801b0f0:	d044      	beq.n	801b17c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801b0f2:	687b      	ldr	r3, [r7, #4]
 801b0f4:	685b      	ldr	r3, [r3, #4]
 801b0f6:	2b01      	cmp	r3, #1
 801b0f8:	d107      	bne.n	801b10a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801b0fa:	4b47      	ldr	r3, [pc, #284]	; (801b218 <HAL_RCC_ClockConfig+0x1bc>)
 801b0fc:	681b      	ldr	r3, [r3, #0]
 801b0fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b102:	2b00      	cmp	r3, #0
 801b104:	d119      	bne.n	801b13a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801b106:	2301      	movs	r3, #1
 801b108:	e07f      	b.n	801b20a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801b10a:	687b      	ldr	r3, [r7, #4]
 801b10c:	685b      	ldr	r3, [r3, #4]
 801b10e:	2b02      	cmp	r3, #2
 801b110:	d003      	beq.n	801b11a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801b112:	687b      	ldr	r3, [r7, #4]
 801b114:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801b116:	2b03      	cmp	r3, #3
 801b118:	d107      	bne.n	801b12a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801b11a:	4b3f      	ldr	r3, [pc, #252]	; (801b218 <HAL_RCC_ClockConfig+0x1bc>)
 801b11c:	681b      	ldr	r3, [r3, #0]
 801b11e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b122:	2b00      	cmp	r3, #0
 801b124:	d109      	bne.n	801b13a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801b126:	2301      	movs	r3, #1
 801b128:	e06f      	b.n	801b20a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801b12a:	4b3b      	ldr	r3, [pc, #236]	; (801b218 <HAL_RCC_ClockConfig+0x1bc>)
 801b12c:	681b      	ldr	r3, [r3, #0]
 801b12e:	f003 0302 	and.w	r3, r3, #2
 801b132:	2b00      	cmp	r3, #0
 801b134:	d101      	bne.n	801b13a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801b136:	2301      	movs	r3, #1
 801b138:	e067      	b.n	801b20a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801b13a:	4b37      	ldr	r3, [pc, #220]	; (801b218 <HAL_RCC_ClockConfig+0x1bc>)
 801b13c:	689b      	ldr	r3, [r3, #8]
 801b13e:	f023 0203 	bic.w	r2, r3, #3
 801b142:	687b      	ldr	r3, [r7, #4]
 801b144:	685b      	ldr	r3, [r3, #4]
 801b146:	4934      	ldr	r1, [pc, #208]	; (801b218 <HAL_RCC_ClockConfig+0x1bc>)
 801b148:	4313      	orrs	r3, r2
 801b14a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801b14c:	f7fd f936 	bl	80183bc <HAL_GetTick>
 801b150:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b152:	e00a      	b.n	801b16a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b154:	f7fd f932 	bl	80183bc <HAL_GetTick>
 801b158:	4602      	mov	r2, r0
 801b15a:	68fb      	ldr	r3, [r7, #12]
 801b15c:	1ad3      	subs	r3, r2, r3
 801b15e:	f241 3288 	movw	r2, #5000	; 0x1388
 801b162:	4293      	cmp	r3, r2
 801b164:	d901      	bls.n	801b16a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801b166:	2303      	movs	r3, #3
 801b168:	e04f      	b.n	801b20a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b16a:	4b2b      	ldr	r3, [pc, #172]	; (801b218 <HAL_RCC_ClockConfig+0x1bc>)
 801b16c:	689b      	ldr	r3, [r3, #8]
 801b16e:	f003 020c 	and.w	r2, r3, #12
 801b172:	687b      	ldr	r3, [r7, #4]
 801b174:	685b      	ldr	r3, [r3, #4]
 801b176:	009b      	lsls	r3, r3, #2
 801b178:	429a      	cmp	r2, r3
 801b17a:	d1eb      	bne.n	801b154 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801b17c:	4b25      	ldr	r3, [pc, #148]	; (801b214 <HAL_RCC_ClockConfig+0x1b8>)
 801b17e:	681b      	ldr	r3, [r3, #0]
 801b180:	f003 030f 	and.w	r3, r3, #15
 801b184:	683a      	ldr	r2, [r7, #0]
 801b186:	429a      	cmp	r2, r3
 801b188:	d20c      	bcs.n	801b1a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b18a:	4b22      	ldr	r3, [pc, #136]	; (801b214 <HAL_RCC_ClockConfig+0x1b8>)
 801b18c:	683a      	ldr	r2, [r7, #0]
 801b18e:	b2d2      	uxtb	r2, r2
 801b190:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801b192:	4b20      	ldr	r3, [pc, #128]	; (801b214 <HAL_RCC_ClockConfig+0x1b8>)
 801b194:	681b      	ldr	r3, [r3, #0]
 801b196:	f003 030f 	and.w	r3, r3, #15
 801b19a:	683a      	ldr	r2, [r7, #0]
 801b19c:	429a      	cmp	r2, r3
 801b19e:	d001      	beq.n	801b1a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801b1a0:	2301      	movs	r3, #1
 801b1a2:	e032      	b.n	801b20a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b1a4:	687b      	ldr	r3, [r7, #4]
 801b1a6:	681b      	ldr	r3, [r3, #0]
 801b1a8:	f003 0304 	and.w	r3, r3, #4
 801b1ac:	2b00      	cmp	r3, #0
 801b1ae:	d008      	beq.n	801b1c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801b1b0:	4b19      	ldr	r3, [pc, #100]	; (801b218 <HAL_RCC_ClockConfig+0x1bc>)
 801b1b2:	689b      	ldr	r3, [r3, #8]
 801b1b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801b1b8:	687b      	ldr	r3, [r7, #4]
 801b1ba:	68db      	ldr	r3, [r3, #12]
 801b1bc:	4916      	ldr	r1, [pc, #88]	; (801b218 <HAL_RCC_ClockConfig+0x1bc>)
 801b1be:	4313      	orrs	r3, r2
 801b1c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b1c2:	687b      	ldr	r3, [r7, #4]
 801b1c4:	681b      	ldr	r3, [r3, #0]
 801b1c6:	f003 0308 	and.w	r3, r3, #8
 801b1ca:	2b00      	cmp	r3, #0
 801b1cc:	d009      	beq.n	801b1e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801b1ce:	4b12      	ldr	r3, [pc, #72]	; (801b218 <HAL_RCC_ClockConfig+0x1bc>)
 801b1d0:	689b      	ldr	r3, [r3, #8]
 801b1d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801b1d6:	687b      	ldr	r3, [r7, #4]
 801b1d8:	691b      	ldr	r3, [r3, #16]
 801b1da:	00db      	lsls	r3, r3, #3
 801b1dc:	490e      	ldr	r1, [pc, #56]	; (801b218 <HAL_RCC_ClockConfig+0x1bc>)
 801b1de:	4313      	orrs	r3, r2
 801b1e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801b1e2:	f000 fb57 	bl	801b894 <HAL_RCC_GetSysClockFreq>
 801b1e6:	4602      	mov	r2, r0
 801b1e8:	4b0b      	ldr	r3, [pc, #44]	; (801b218 <HAL_RCC_ClockConfig+0x1bc>)
 801b1ea:	689b      	ldr	r3, [r3, #8]
 801b1ec:	091b      	lsrs	r3, r3, #4
 801b1ee:	f003 030f 	and.w	r3, r3, #15
 801b1f2:	490a      	ldr	r1, [pc, #40]	; (801b21c <HAL_RCC_ClockConfig+0x1c0>)
 801b1f4:	5ccb      	ldrb	r3, [r1, r3]
 801b1f6:	fa22 f303 	lsr.w	r3, r2, r3
 801b1fa:	4a09      	ldr	r2, [pc, #36]	; (801b220 <HAL_RCC_ClockConfig+0x1c4>)
 801b1fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801b1fe:	4b09      	ldr	r3, [pc, #36]	; (801b224 <HAL_RCC_ClockConfig+0x1c8>)
 801b200:	681b      	ldr	r3, [r3, #0]
 801b202:	4618      	mov	r0, r3
 801b204:	f7fd f896 	bl	8018334 <HAL_InitTick>

  return HAL_OK;
 801b208:	2300      	movs	r3, #0
}
 801b20a:	4618      	mov	r0, r3
 801b20c:	3710      	adds	r7, #16
 801b20e:	46bd      	mov	sp, r7
 801b210:	bd80      	pop	{r7, pc}
 801b212:	bf00      	nop
 801b214:	40023c00 	.word	0x40023c00
 801b218:	40023800 	.word	0x40023800
 801b21c:	08002350 	.word	0x08002350
 801b220:	20000588 	.word	0x20000588
 801b224:	2000058c 	.word	0x2000058c

0801b228 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801b228:	b480      	push	{r7}
 801b22a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801b22c:	4b03      	ldr	r3, [pc, #12]	; (801b23c <HAL_RCC_GetHCLKFreq+0x14>)
 801b22e:	681b      	ldr	r3, [r3, #0]
}
 801b230:	4618      	mov	r0, r3
 801b232:	46bd      	mov	sp, r7
 801b234:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b238:	4770      	bx	lr
 801b23a:	bf00      	nop
 801b23c:	20000588 	.word	0x20000588

0801b240 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801b240:	b580      	push	{r7, lr}
 801b242:	b08c      	sub	sp, #48	; 0x30
 801b244:	af00      	add	r7, sp, #0
 801b246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801b248:	2300      	movs	r3, #0
 801b24a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 801b24c:	2300      	movs	r3, #0
 801b24e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 801b250:	2300      	movs	r3, #0
 801b252:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 801b254:	2300      	movs	r3, #0
 801b256:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 801b258:	2300      	movs	r3, #0
 801b25a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 801b25c:	2300      	movs	r3, #0
 801b25e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 801b260:	2300      	movs	r3, #0
 801b262:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 801b264:	2300      	movs	r3, #0
 801b266:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 801b268:	2300      	movs	r3, #0
 801b26a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 801b26c:	687b      	ldr	r3, [r7, #4]
 801b26e:	681b      	ldr	r3, [r3, #0]
 801b270:	f003 0301 	and.w	r3, r3, #1
 801b274:	2b00      	cmp	r3, #0
 801b276:	d010      	beq.n	801b29a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 801b278:	4b6f      	ldr	r3, [pc, #444]	; (801b438 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b27a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b27e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 801b282:	687b      	ldr	r3, [r7, #4]
 801b284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b286:	496c      	ldr	r1, [pc, #432]	; (801b438 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b288:	4313      	orrs	r3, r2
 801b28a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 801b28e:	687b      	ldr	r3, [r7, #4]
 801b290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b292:	2b00      	cmp	r3, #0
 801b294:	d101      	bne.n	801b29a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 801b296:	2301      	movs	r3, #1
 801b298:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 801b29a:	687b      	ldr	r3, [r7, #4]
 801b29c:	681b      	ldr	r3, [r3, #0]
 801b29e:	f003 0302 	and.w	r3, r3, #2
 801b2a2:	2b00      	cmp	r3, #0
 801b2a4:	d010      	beq.n	801b2c8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 801b2a6:	4b64      	ldr	r3, [pc, #400]	; (801b438 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b2a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b2ac:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 801b2b0:	687b      	ldr	r3, [r7, #4]
 801b2b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b2b4:	4960      	ldr	r1, [pc, #384]	; (801b438 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b2b6:	4313      	orrs	r3, r2
 801b2b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 801b2bc:	687b      	ldr	r3, [r7, #4]
 801b2be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b2c0:	2b00      	cmp	r3, #0
 801b2c2:	d101      	bne.n	801b2c8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 801b2c4:	2301      	movs	r3, #1
 801b2c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 801b2c8:	687b      	ldr	r3, [r7, #4]
 801b2ca:	681b      	ldr	r3, [r3, #0]
 801b2cc:	f003 0304 	and.w	r3, r3, #4
 801b2d0:	2b00      	cmp	r3, #0
 801b2d2:	d017      	beq.n	801b304 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801b2d4:	4b58      	ldr	r3, [pc, #352]	; (801b438 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b2d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b2da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801b2de:	687b      	ldr	r3, [r7, #4]
 801b2e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b2e2:	4955      	ldr	r1, [pc, #340]	; (801b438 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b2e4:	4313      	orrs	r3, r2
 801b2e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 801b2ea:	687b      	ldr	r3, [r7, #4]
 801b2ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b2ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801b2f2:	d101      	bne.n	801b2f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 801b2f4:	2301      	movs	r3, #1
 801b2f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 801b2f8:	687b      	ldr	r3, [r7, #4]
 801b2fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b2fc:	2b00      	cmp	r3, #0
 801b2fe:	d101      	bne.n	801b304 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 801b300:	2301      	movs	r3, #1
 801b302:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 801b304:	687b      	ldr	r3, [r7, #4]
 801b306:	681b      	ldr	r3, [r3, #0]
 801b308:	f003 0308 	and.w	r3, r3, #8
 801b30c:	2b00      	cmp	r3, #0
 801b30e:	d017      	beq.n	801b340 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 801b310:	4b49      	ldr	r3, [pc, #292]	; (801b438 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b312:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b316:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801b31a:	687b      	ldr	r3, [r7, #4]
 801b31c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b31e:	4946      	ldr	r1, [pc, #280]	; (801b438 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b320:	4313      	orrs	r3, r2
 801b322:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 801b326:	687b      	ldr	r3, [r7, #4]
 801b328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b32a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801b32e:	d101      	bne.n	801b334 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 801b330:	2301      	movs	r3, #1
 801b332:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 801b334:	687b      	ldr	r3, [r7, #4]
 801b336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b338:	2b00      	cmp	r3, #0
 801b33a:	d101      	bne.n	801b340 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 801b33c:	2301      	movs	r3, #1
 801b33e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801b340:	687b      	ldr	r3, [r7, #4]
 801b342:	681b      	ldr	r3, [r3, #0]
 801b344:	f003 0320 	and.w	r3, r3, #32
 801b348:	2b00      	cmp	r3, #0
 801b34a:	f000 808a 	beq.w	801b462 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 801b34e:	2300      	movs	r3, #0
 801b350:	60bb      	str	r3, [r7, #8]
 801b352:	4b39      	ldr	r3, [pc, #228]	; (801b438 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b356:	4a38      	ldr	r2, [pc, #224]	; (801b438 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b35c:	6413      	str	r3, [r2, #64]	; 0x40
 801b35e:	4b36      	ldr	r3, [pc, #216]	; (801b438 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b366:	60bb      	str	r3, [r7, #8]
 801b368:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 801b36a:	4b34      	ldr	r3, [pc, #208]	; (801b43c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 801b36c:	681b      	ldr	r3, [r3, #0]
 801b36e:	4a33      	ldr	r2, [pc, #204]	; (801b43c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 801b370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b374:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 801b376:	f7fd f821 	bl	80183bc <HAL_GetTick>
 801b37a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 801b37c:	e008      	b.n	801b390 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 801b37e:	f7fd f81d 	bl	80183bc <HAL_GetTick>
 801b382:	4602      	mov	r2, r0
 801b384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b386:	1ad3      	subs	r3, r2, r3
 801b388:	2b02      	cmp	r3, #2
 801b38a:	d901      	bls.n	801b390 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 801b38c:	2303      	movs	r3, #3
 801b38e:	e278      	b.n	801b882 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 801b390:	4b2a      	ldr	r3, [pc, #168]	; (801b43c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 801b392:	681b      	ldr	r3, [r3, #0]
 801b394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b398:	2b00      	cmp	r3, #0
 801b39a:	d0f0      	beq.n	801b37e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 801b39c:	4b26      	ldr	r3, [pc, #152]	; (801b438 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b39e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b3a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b3a4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 801b3a6:	6a3b      	ldr	r3, [r7, #32]
 801b3a8:	2b00      	cmp	r3, #0
 801b3aa:	d02f      	beq.n	801b40c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 801b3ac:	687b      	ldr	r3, [r7, #4]
 801b3ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b3b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b3b4:	6a3a      	ldr	r2, [r7, #32]
 801b3b6:	429a      	cmp	r2, r3
 801b3b8:	d028      	beq.n	801b40c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801b3ba:	4b1f      	ldr	r3, [pc, #124]	; (801b438 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b3bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b3be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b3c2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801b3c4:	4b1e      	ldr	r3, [pc, #120]	; (801b440 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 801b3c6:	2201      	movs	r2, #1
 801b3c8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 801b3ca:	4b1d      	ldr	r3, [pc, #116]	; (801b440 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 801b3cc:	2200      	movs	r2, #0
 801b3ce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 801b3d0:	4a19      	ldr	r2, [pc, #100]	; (801b438 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b3d2:	6a3b      	ldr	r3, [r7, #32]
 801b3d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 801b3d6:	4b18      	ldr	r3, [pc, #96]	; (801b438 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b3d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b3da:	f003 0301 	and.w	r3, r3, #1
 801b3de:	2b01      	cmp	r3, #1
 801b3e0:	d114      	bne.n	801b40c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 801b3e2:	f7fc ffeb 	bl	80183bc <HAL_GetTick>
 801b3e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801b3e8:	e00a      	b.n	801b400 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801b3ea:	f7fc ffe7 	bl	80183bc <HAL_GetTick>
 801b3ee:	4602      	mov	r2, r0
 801b3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3f2:	1ad3      	subs	r3, r2, r3
 801b3f4:	f241 3288 	movw	r2, #5000	; 0x1388
 801b3f8:	4293      	cmp	r3, r2
 801b3fa:	d901      	bls.n	801b400 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 801b3fc:	2303      	movs	r3, #3
 801b3fe:	e240      	b.n	801b882 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801b400:	4b0d      	ldr	r3, [pc, #52]	; (801b438 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b404:	f003 0302 	and.w	r3, r3, #2
 801b408:	2b00      	cmp	r3, #0
 801b40a:	d0ee      	beq.n	801b3ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801b40c:	687b      	ldr	r3, [r7, #4]
 801b40e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b410:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b414:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801b418:	d114      	bne.n	801b444 <HAL_RCCEx_PeriphCLKConfig+0x204>
 801b41a:	4b07      	ldr	r3, [pc, #28]	; (801b438 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b41c:	689b      	ldr	r3, [r3, #8]
 801b41e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 801b422:	687b      	ldr	r3, [r7, #4]
 801b424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b426:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801b42a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b42e:	4902      	ldr	r1, [pc, #8]	; (801b438 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b430:	4313      	orrs	r3, r2
 801b432:	608b      	str	r3, [r1, #8]
 801b434:	e00c      	b.n	801b450 <HAL_RCCEx_PeriphCLKConfig+0x210>
 801b436:	bf00      	nop
 801b438:	40023800 	.word	0x40023800
 801b43c:	40007000 	.word	0x40007000
 801b440:	42470e40 	.word	0x42470e40
 801b444:	4b4a      	ldr	r3, [pc, #296]	; (801b570 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b446:	689b      	ldr	r3, [r3, #8]
 801b448:	4a49      	ldr	r2, [pc, #292]	; (801b570 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b44a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 801b44e:	6093      	str	r3, [r2, #8]
 801b450:	4b47      	ldr	r3, [pc, #284]	; (801b570 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b452:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801b454:	687b      	ldr	r3, [r7, #4]
 801b456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b458:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801b45c:	4944      	ldr	r1, [pc, #272]	; (801b570 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b45e:	4313      	orrs	r3, r2
 801b460:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 801b462:	687b      	ldr	r3, [r7, #4]
 801b464:	681b      	ldr	r3, [r3, #0]
 801b466:	f003 0310 	and.w	r3, r3, #16
 801b46a:	2b00      	cmp	r3, #0
 801b46c:	d004      	beq.n	801b478 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801b46e:	687b      	ldr	r3, [r7, #4]
 801b470:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 801b474:	4b3f      	ldr	r3, [pc, #252]	; (801b574 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 801b476:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 801b478:	687b      	ldr	r3, [r7, #4]
 801b47a:	681b      	ldr	r3, [r3, #0]
 801b47c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b480:	2b00      	cmp	r3, #0
 801b482:	d00a      	beq.n	801b49a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 801b484:	4b3a      	ldr	r3, [pc, #232]	; (801b570 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b486:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b48a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801b48e:	687b      	ldr	r3, [r7, #4]
 801b490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b492:	4937      	ldr	r1, [pc, #220]	; (801b570 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b494:	4313      	orrs	r3, r2
 801b496:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801b49a:	687b      	ldr	r3, [r7, #4]
 801b49c:	681b      	ldr	r3, [r3, #0]
 801b49e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b4a2:	2b00      	cmp	r3, #0
 801b4a4:	d00a      	beq.n	801b4bc <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801b4a6:	4b32      	ldr	r3, [pc, #200]	; (801b570 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b4a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b4ac:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 801b4b0:	687b      	ldr	r3, [r7, #4]
 801b4b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b4b4:	492e      	ldr	r1, [pc, #184]	; (801b570 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b4b6:	4313      	orrs	r3, r2
 801b4b8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 801b4bc:	687b      	ldr	r3, [r7, #4]
 801b4be:	681b      	ldr	r3, [r3, #0]
 801b4c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b4c4:	2b00      	cmp	r3, #0
 801b4c6:	d011      	beq.n	801b4ec <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 801b4c8:	4b29      	ldr	r3, [pc, #164]	; (801b570 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b4ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b4ce:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 801b4d2:	687b      	ldr	r3, [r7, #4]
 801b4d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b4d6:	4926      	ldr	r1, [pc, #152]	; (801b570 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b4d8:	4313      	orrs	r3, r2
 801b4da:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 801b4de:	687b      	ldr	r3, [r7, #4]
 801b4e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b4e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801b4e6:	d101      	bne.n	801b4ec <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 801b4e8:	2301      	movs	r3, #1
 801b4ea:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 801b4ec:	687b      	ldr	r3, [r7, #4]
 801b4ee:	681b      	ldr	r3, [r3, #0]
 801b4f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801b4f4:	2b00      	cmp	r3, #0
 801b4f6:	d00a      	beq.n	801b50e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 801b4f8:	4b1d      	ldr	r3, [pc, #116]	; (801b570 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b4fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b4fe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801b502:	687b      	ldr	r3, [r7, #4]
 801b504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b506:	491a      	ldr	r1, [pc, #104]	; (801b570 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b508:	4313      	orrs	r3, r2
 801b50a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801b50e:	687b      	ldr	r3, [r7, #4]
 801b510:	681b      	ldr	r3, [r3, #0]
 801b512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b516:	2b00      	cmp	r3, #0
 801b518:	d011      	beq.n	801b53e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 801b51a:	4b15      	ldr	r3, [pc, #84]	; (801b570 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b51c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b520:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801b524:	687b      	ldr	r3, [r7, #4]
 801b526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b528:	4911      	ldr	r1, [pc, #68]	; (801b570 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b52a:	4313      	orrs	r3, r2
 801b52c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 801b530:	687b      	ldr	r3, [r7, #4]
 801b532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b534:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b538:	d101      	bne.n	801b53e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 801b53a:	2301      	movs	r3, #1
 801b53c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 801b53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b540:	2b01      	cmp	r3, #1
 801b542:	d005      	beq.n	801b550 <HAL_RCCEx_PeriphCLKConfig+0x310>
 801b544:	687b      	ldr	r3, [r7, #4]
 801b546:	681b      	ldr	r3, [r3, #0]
 801b548:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801b54c:	f040 80ff 	bne.w	801b74e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 801b550:	4b09      	ldr	r3, [pc, #36]	; (801b578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b552:	2200      	movs	r2, #0
 801b554:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801b556:	f7fc ff31 	bl	80183bc <HAL_GetTick>
 801b55a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801b55c:	e00e      	b.n	801b57c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 801b55e:	f7fc ff2d 	bl	80183bc <HAL_GetTick>
 801b562:	4602      	mov	r2, r0
 801b564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b566:	1ad3      	subs	r3, r2, r3
 801b568:	2b02      	cmp	r3, #2
 801b56a:	d907      	bls.n	801b57c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801b56c:	2303      	movs	r3, #3
 801b56e:	e188      	b.n	801b882 <HAL_RCCEx_PeriphCLKConfig+0x642>
 801b570:	40023800 	.word	0x40023800
 801b574:	424711e0 	.word	0x424711e0
 801b578:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801b57c:	4b7e      	ldr	r3, [pc, #504]	; (801b778 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b57e:	681b      	ldr	r3, [r3, #0]
 801b580:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801b584:	2b00      	cmp	r3, #0
 801b586:	d1ea      	bne.n	801b55e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 801b588:	687b      	ldr	r3, [r7, #4]
 801b58a:	681b      	ldr	r3, [r3, #0]
 801b58c:	f003 0301 	and.w	r3, r3, #1
 801b590:	2b00      	cmp	r3, #0
 801b592:	d003      	beq.n	801b59c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 801b594:	687b      	ldr	r3, [r7, #4]
 801b596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b598:	2b00      	cmp	r3, #0
 801b59a:	d009      	beq.n	801b5b0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 801b59c:	687b      	ldr	r3, [r7, #4]
 801b59e:	681b      	ldr	r3, [r3, #0]
 801b5a0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 801b5a4:	2b00      	cmp	r3, #0
 801b5a6:	d028      	beq.n	801b5fa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 801b5a8:	687b      	ldr	r3, [r7, #4]
 801b5aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b5ac:	2b00      	cmp	r3, #0
 801b5ae:	d124      	bne.n	801b5fa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 801b5b0:	4b71      	ldr	r3, [pc, #452]	; (801b778 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b5b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b5b6:	0c1b      	lsrs	r3, r3, #16
 801b5b8:	f003 0303 	and.w	r3, r3, #3
 801b5bc:	3301      	adds	r3, #1
 801b5be:	005b      	lsls	r3, r3, #1
 801b5c0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 801b5c2:	4b6d      	ldr	r3, [pc, #436]	; (801b778 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b5c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b5c8:	0e1b      	lsrs	r3, r3, #24
 801b5ca:	f003 030f 	and.w	r3, r3, #15
 801b5ce:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 801b5d0:	687b      	ldr	r3, [r7, #4]
 801b5d2:	685a      	ldr	r2, [r3, #4]
 801b5d4:	687b      	ldr	r3, [r7, #4]
 801b5d6:	689b      	ldr	r3, [r3, #8]
 801b5d8:	019b      	lsls	r3, r3, #6
 801b5da:	431a      	orrs	r2, r3
 801b5dc:	69fb      	ldr	r3, [r7, #28]
 801b5de:	085b      	lsrs	r3, r3, #1
 801b5e0:	3b01      	subs	r3, #1
 801b5e2:	041b      	lsls	r3, r3, #16
 801b5e4:	431a      	orrs	r2, r3
 801b5e6:	69bb      	ldr	r3, [r7, #24]
 801b5e8:	061b      	lsls	r3, r3, #24
 801b5ea:	431a      	orrs	r2, r3
 801b5ec:	687b      	ldr	r3, [r7, #4]
 801b5ee:	695b      	ldr	r3, [r3, #20]
 801b5f0:	071b      	lsls	r3, r3, #28
 801b5f2:	4961      	ldr	r1, [pc, #388]	; (801b778 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b5f4:	4313      	orrs	r3, r2
 801b5f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801b5fa:	687b      	ldr	r3, [r7, #4]
 801b5fc:	681b      	ldr	r3, [r3, #0]
 801b5fe:	f003 0304 	and.w	r3, r3, #4
 801b602:	2b00      	cmp	r3, #0
 801b604:	d004      	beq.n	801b610 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 801b606:	687b      	ldr	r3, [r7, #4]
 801b608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b60a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801b60e:	d00a      	beq.n	801b626 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801b610:	687b      	ldr	r3, [r7, #4]
 801b612:	681b      	ldr	r3, [r3, #0]
 801b614:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801b618:	2b00      	cmp	r3, #0
 801b61a:	d035      	beq.n	801b688 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801b61c:	687b      	ldr	r3, [r7, #4]
 801b61e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b620:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801b624:	d130      	bne.n	801b688 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 801b626:	4b54      	ldr	r3, [pc, #336]	; (801b778 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b628:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b62c:	0c1b      	lsrs	r3, r3, #16
 801b62e:	f003 0303 	and.w	r3, r3, #3
 801b632:	3301      	adds	r3, #1
 801b634:	005b      	lsls	r3, r3, #1
 801b636:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801b638:	4b4f      	ldr	r3, [pc, #316]	; (801b778 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b63a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b63e:	0f1b      	lsrs	r3, r3, #28
 801b640:	f003 0307 	and.w	r3, r3, #7
 801b644:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 801b646:	687b      	ldr	r3, [r7, #4]
 801b648:	685a      	ldr	r2, [r3, #4]
 801b64a:	687b      	ldr	r3, [r7, #4]
 801b64c:	689b      	ldr	r3, [r3, #8]
 801b64e:	019b      	lsls	r3, r3, #6
 801b650:	431a      	orrs	r2, r3
 801b652:	69fb      	ldr	r3, [r7, #28]
 801b654:	085b      	lsrs	r3, r3, #1
 801b656:	3b01      	subs	r3, #1
 801b658:	041b      	lsls	r3, r3, #16
 801b65a:	431a      	orrs	r2, r3
 801b65c:	687b      	ldr	r3, [r7, #4]
 801b65e:	691b      	ldr	r3, [r3, #16]
 801b660:	061b      	lsls	r3, r3, #24
 801b662:	431a      	orrs	r2, r3
 801b664:	697b      	ldr	r3, [r7, #20]
 801b666:	071b      	lsls	r3, r3, #28
 801b668:	4943      	ldr	r1, [pc, #268]	; (801b778 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b66a:	4313      	orrs	r3, r2
 801b66c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 801b670:	4b41      	ldr	r3, [pc, #260]	; (801b778 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b672:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b676:	f023 021f 	bic.w	r2, r3, #31
 801b67a:	687b      	ldr	r3, [r7, #4]
 801b67c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b67e:	3b01      	subs	r3, #1
 801b680:	493d      	ldr	r1, [pc, #244]	; (801b778 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b682:	4313      	orrs	r3, r2
 801b684:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 801b688:	687b      	ldr	r3, [r7, #4]
 801b68a:	681b      	ldr	r3, [r3, #0]
 801b68c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b690:	2b00      	cmp	r3, #0
 801b692:	d029      	beq.n	801b6e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 801b694:	687b      	ldr	r3, [r7, #4]
 801b696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b698:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b69c:	d124      	bne.n	801b6e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 801b69e:	4b36      	ldr	r3, [pc, #216]	; (801b778 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b6a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b6a4:	0c1b      	lsrs	r3, r3, #16
 801b6a6:	f003 0303 	and.w	r3, r3, #3
 801b6aa:	3301      	adds	r3, #1
 801b6ac:	005b      	lsls	r3, r3, #1
 801b6ae:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801b6b0:	4b31      	ldr	r3, [pc, #196]	; (801b778 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b6b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b6b6:	0f1b      	lsrs	r3, r3, #28
 801b6b8:	f003 0307 	and.w	r3, r3, #7
 801b6bc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 801b6be:	687b      	ldr	r3, [r7, #4]
 801b6c0:	685a      	ldr	r2, [r3, #4]
 801b6c2:	687b      	ldr	r3, [r7, #4]
 801b6c4:	689b      	ldr	r3, [r3, #8]
 801b6c6:	019b      	lsls	r3, r3, #6
 801b6c8:	431a      	orrs	r2, r3
 801b6ca:	687b      	ldr	r3, [r7, #4]
 801b6cc:	68db      	ldr	r3, [r3, #12]
 801b6ce:	085b      	lsrs	r3, r3, #1
 801b6d0:	3b01      	subs	r3, #1
 801b6d2:	041b      	lsls	r3, r3, #16
 801b6d4:	431a      	orrs	r2, r3
 801b6d6:	69bb      	ldr	r3, [r7, #24]
 801b6d8:	061b      	lsls	r3, r3, #24
 801b6da:	431a      	orrs	r2, r3
 801b6dc:	697b      	ldr	r3, [r7, #20]
 801b6de:	071b      	lsls	r3, r3, #28
 801b6e0:	4925      	ldr	r1, [pc, #148]	; (801b778 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b6e2:	4313      	orrs	r3, r2
 801b6e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 801b6e8:	687b      	ldr	r3, [r7, #4]
 801b6ea:	681b      	ldr	r3, [r3, #0]
 801b6ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b6f0:	2b00      	cmp	r3, #0
 801b6f2:	d016      	beq.n	801b722 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 801b6f4:	687b      	ldr	r3, [r7, #4]
 801b6f6:	685a      	ldr	r2, [r3, #4]
 801b6f8:	687b      	ldr	r3, [r7, #4]
 801b6fa:	689b      	ldr	r3, [r3, #8]
 801b6fc:	019b      	lsls	r3, r3, #6
 801b6fe:	431a      	orrs	r2, r3
 801b700:	687b      	ldr	r3, [r7, #4]
 801b702:	68db      	ldr	r3, [r3, #12]
 801b704:	085b      	lsrs	r3, r3, #1
 801b706:	3b01      	subs	r3, #1
 801b708:	041b      	lsls	r3, r3, #16
 801b70a:	431a      	orrs	r2, r3
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	691b      	ldr	r3, [r3, #16]
 801b710:	061b      	lsls	r3, r3, #24
 801b712:	431a      	orrs	r2, r3
 801b714:	687b      	ldr	r3, [r7, #4]
 801b716:	695b      	ldr	r3, [r3, #20]
 801b718:	071b      	lsls	r3, r3, #28
 801b71a:	4917      	ldr	r1, [pc, #92]	; (801b778 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b71c:	4313      	orrs	r3, r2
 801b71e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 801b722:	4b16      	ldr	r3, [pc, #88]	; (801b77c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 801b724:	2201      	movs	r2, #1
 801b726:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801b728:	f7fc fe48 	bl	80183bc <HAL_GetTick>
 801b72c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801b72e:	e008      	b.n	801b742 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 801b730:	f7fc fe44 	bl	80183bc <HAL_GetTick>
 801b734:	4602      	mov	r2, r0
 801b736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b738:	1ad3      	subs	r3, r2, r3
 801b73a:	2b02      	cmp	r3, #2
 801b73c:	d901      	bls.n	801b742 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801b73e:	2303      	movs	r3, #3
 801b740:	e09f      	b.n	801b882 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801b742:	4b0d      	ldr	r3, [pc, #52]	; (801b778 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b744:	681b      	ldr	r3, [r3, #0]
 801b746:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801b74a:	2b00      	cmp	r3, #0
 801b74c:	d0f0      	beq.n	801b730 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 801b74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b750:	2b01      	cmp	r3, #1
 801b752:	f040 8095 	bne.w	801b880 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 801b756:	4b0a      	ldr	r3, [pc, #40]	; (801b780 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 801b758:	2200      	movs	r2, #0
 801b75a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801b75c:	f7fc fe2e 	bl	80183bc <HAL_GetTick>
 801b760:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801b762:	e00f      	b.n	801b784 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 801b764:	f7fc fe2a 	bl	80183bc <HAL_GetTick>
 801b768:	4602      	mov	r2, r0
 801b76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b76c:	1ad3      	subs	r3, r2, r3
 801b76e:	2b02      	cmp	r3, #2
 801b770:	d908      	bls.n	801b784 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801b772:	2303      	movs	r3, #3
 801b774:	e085      	b.n	801b882 <HAL_RCCEx_PeriphCLKConfig+0x642>
 801b776:	bf00      	nop
 801b778:	40023800 	.word	0x40023800
 801b77c:	42470068 	.word	0x42470068
 801b780:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801b784:	4b41      	ldr	r3, [pc, #260]	; (801b88c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b786:	681b      	ldr	r3, [r3, #0]
 801b788:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801b78c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b790:	d0e8      	beq.n	801b764 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 801b792:	687b      	ldr	r3, [r7, #4]
 801b794:	681b      	ldr	r3, [r3, #0]
 801b796:	f003 0304 	and.w	r3, r3, #4
 801b79a:	2b00      	cmp	r3, #0
 801b79c:	d003      	beq.n	801b7a6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 801b79e:	687b      	ldr	r3, [r7, #4]
 801b7a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b7a2:	2b00      	cmp	r3, #0
 801b7a4:	d009      	beq.n	801b7ba <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801b7a6:	687b      	ldr	r3, [r7, #4]
 801b7a8:	681b      	ldr	r3, [r3, #0]
 801b7aa:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 801b7ae:	2b00      	cmp	r3, #0
 801b7b0:	d02b      	beq.n	801b80a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801b7b2:	687b      	ldr	r3, [r7, #4]
 801b7b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b7b6:	2b00      	cmp	r3, #0
 801b7b8:	d127      	bne.n	801b80a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 801b7ba:	4b34      	ldr	r3, [pc, #208]	; (801b88c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b7bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b7c0:	0c1b      	lsrs	r3, r3, #16
 801b7c2:	f003 0303 	and.w	r3, r3, #3
 801b7c6:	3301      	adds	r3, #1
 801b7c8:	005b      	lsls	r3, r3, #1
 801b7ca:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 801b7cc:	687b      	ldr	r3, [r7, #4]
 801b7ce:	699a      	ldr	r2, [r3, #24]
 801b7d0:	687b      	ldr	r3, [r7, #4]
 801b7d2:	69db      	ldr	r3, [r3, #28]
 801b7d4:	019b      	lsls	r3, r3, #6
 801b7d6:	431a      	orrs	r2, r3
 801b7d8:	693b      	ldr	r3, [r7, #16]
 801b7da:	085b      	lsrs	r3, r3, #1
 801b7dc:	3b01      	subs	r3, #1
 801b7de:	041b      	lsls	r3, r3, #16
 801b7e0:	431a      	orrs	r2, r3
 801b7e2:	687b      	ldr	r3, [r7, #4]
 801b7e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b7e6:	061b      	lsls	r3, r3, #24
 801b7e8:	4928      	ldr	r1, [pc, #160]	; (801b88c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b7ea:	4313      	orrs	r3, r2
 801b7ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 801b7f0:	4b26      	ldr	r3, [pc, #152]	; (801b88c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b7f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b7f6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 801b7fa:	687b      	ldr	r3, [r7, #4]
 801b7fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b7fe:	3b01      	subs	r3, #1
 801b800:	021b      	lsls	r3, r3, #8
 801b802:	4922      	ldr	r1, [pc, #136]	; (801b88c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b804:	4313      	orrs	r3, r2
 801b806:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 801b80a:	687b      	ldr	r3, [r7, #4]
 801b80c:	681b      	ldr	r3, [r3, #0]
 801b80e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b812:	2b00      	cmp	r3, #0
 801b814:	d01d      	beq.n	801b852 <HAL_RCCEx_PeriphCLKConfig+0x612>
 801b816:	687b      	ldr	r3, [r7, #4]
 801b818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b81a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801b81e:	d118      	bne.n	801b852 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 801b820:	4b1a      	ldr	r3, [pc, #104]	; (801b88c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b826:	0e1b      	lsrs	r3, r3, #24
 801b828:	f003 030f 	and.w	r3, r3, #15
 801b82c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 801b82e:	687b      	ldr	r3, [r7, #4]
 801b830:	699a      	ldr	r2, [r3, #24]
 801b832:	687b      	ldr	r3, [r7, #4]
 801b834:	69db      	ldr	r3, [r3, #28]
 801b836:	019b      	lsls	r3, r3, #6
 801b838:	431a      	orrs	r2, r3
 801b83a:	687b      	ldr	r3, [r7, #4]
 801b83c:	6a1b      	ldr	r3, [r3, #32]
 801b83e:	085b      	lsrs	r3, r3, #1
 801b840:	3b01      	subs	r3, #1
 801b842:	041b      	lsls	r3, r3, #16
 801b844:	431a      	orrs	r2, r3
 801b846:	68fb      	ldr	r3, [r7, #12]
 801b848:	061b      	lsls	r3, r3, #24
 801b84a:	4910      	ldr	r1, [pc, #64]	; (801b88c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b84c:	4313      	orrs	r3, r2
 801b84e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 801b852:	4b0f      	ldr	r3, [pc, #60]	; (801b890 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 801b854:	2201      	movs	r2, #1
 801b856:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801b858:	f7fc fdb0 	bl	80183bc <HAL_GetTick>
 801b85c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801b85e:	e008      	b.n	801b872 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 801b860:	f7fc fdac 	bl	80183bc <HAL_GetTick>
 801b864:	4602      	mov	r2, r0
 801b866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b868:	1ad3      	subs	r3, r2, r3
 801b86a:	2b02      	cmp	r3, #2
 801b86c:	d901      	bls.n	801b872 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801b86e:	2303      	movs	r3, #3
 801b870:	e007      	b.n	801b882 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801b872:	4b06      	ldr	r3, [pc, #24]	; (801b88c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b874:	681b      	ldr	r3, [r3, #0]
 801b876:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801b87a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b87e:	d1ef      	bne.n	801b860 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 801b880:	2300      	movs	r3, #0
}
 801b882:	4618      	mov	r0, r3
 801b884:	3730      	adds	r7, #48	; 0x30
 801b886:	46bd      	mov	sp, r7
 801b888:	bd80      	pop	{r7, pc}
 801b88a:	bf00      	nop
 801b88c:	40023800 	.word	0x40023800
 801b890:	42470070 	.word	0x42470070

0801b894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801b894:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b898:	b087      	sub	sp, #28
 801b89a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 801b89c:	2600      	movs	r6, #0
 801b89e:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 801b8a0:	2600      	movs	r6, #0
 801b8a2:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 801b8a4:	2600      	movs	r6, #0
 801b8a6:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 801b8a8:	2600      	movs	r6, #0
 801b8aa:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 801b8ac:	2600      	movs	r6, #0
 801b8ae:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801b8b0:	4ea3      	ldr	r6, [pc, #652]	; (801bb40 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b8b2:	68b6      	ldr	r6, [r6, #8]
 801b8b4:	f006 060c 	and.w	r6, r6, #12
 801b8b8:	2e0c      	cmp	r6, #12
 801b8ba:	f200 8137 	bhi.w	801bb2c <HAL_RCC_GetSysClockFreq+0x298>
 801b8be:	f20f 0c08 	addw	ip, pc, #8
 801b8c2:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 801b8c6:	bf00      	nop
 801b8c8:	0801b8fd 	.word	0x0801b8fd
 801b8cc:	0801bb2d 	.word	0x0801bb2d
 801b8d0:	0801bb2d 	.word	0x0801bb2d
 801b8d4:	0801bb2d 	.word	0x0801bb2d
 801b8d8:	0801b903 	.word	0x0801b903
 801b8dc:	0801bb2d 	.word	0x0801bb2d
 801b8e0:	0801bb2d 	.word	0x0801bb2d
 801b8e4:	0801bb2d 	.word	0x0801bb2d
 801b8e8:	0801b909 	.word	0x0801b909
 801b8ec:	0801bb2d 	.word	0x0801bb2d
 801b8f0:	0801bb2d 	.word	0x0801bb2d
 801b8f4:	0801bb2d 	.word	0x0801bb2d
 801b8f8:	0801ba1f 	.word	0x0801ba1f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801b8fc:	4b91      	ldr	r3, [pc, #580]	; (801bb44 <HAL_RCC_GetSysClockFreq+0x2b0>)
 801b8fe:	613b      	str	r3, [r7, #16]
       break;
 801b900:	e117      	b.n	801bb32 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801b902:	4b91      	ldr	r3, [pc, #580]	; (801bb48 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801b904:	613b      	str	r3, [r7, #16]
      break;
 801b906:	e114      	b.n	801bb32 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801b908:	4b8d      	ldr	r3, [pc, #564]	; (801bb40 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b90a:	685b      	ldr	r3, [r3, #4]
 801b90c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b910:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801b912:	4b8b      	ldr	r3, [pc, #556]	; (801bb40 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b914:	685b      	ldr	r3, [r3, #4]
 801b916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801b91a:	2b00      	cmp	r3, #0
 801b91c:	d024      	beq.n	801b968 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801b91e:	4b88      	ldr	r3, [pc, #544]	; (801bb40 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b920:	685b      	ldr	r3, [r3, #4]
 801b922:	099b      	lsrs	r3, r3, #6
 801b924:	461a      	mov	r2, r3
 801b926:	f04f 0300 	mov.w	r3, #0
 801b92a:	f240 14ff 	movw	r4, #511	; 0x1ff
 801b92e:	f04f 0500 	mov.w	r5, #0
 801b932:	ea02 0004 	and.w	r0, r2, r4
 801b936:	ea03 0105 	and.w	r1, r3, r5
 801b93a:	4b83      	ldr	r3, [pc, #524]	; (801bb48 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801b93c:	fb03 f201 	mul.w	r2, r3, r1
 801b940:	2300      	movs	r3, #0
 801b942:	fb03 f300 	mul.w	r3, r3, r0
 801b946:	4413      	add	r3, r2
 801b948:	4a7f      	ldr	r2, [pc, #508]	; (801bb48 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801b94a:	fba0 0102 	umull	r0, r1, r0, r2
 801b94e:	440b      	add	r3, r1
 801b950:	4619      	mov	r1, r3
 801b952:	68fb      	ldr	r3, [r7, #12]
 801b954:	461a      	mov	r2, r3
 801b956:	f04f 0300 	mov.w	r3, #0
 801b95a:	f7f0 fb79 	bl	800c050 <__aeabi_uldivmod>
 801b95e:	4602      	mov	r2, r0
 801b960:	460b      	mov	r3, r1
 801b962:	4613      	mov	r3, r2
 801b964:	617b      	str	r3, [r7, #20]
 801b966:	e04c      	b.n	801ba02 <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801b968:	4b75      	ldr	r3, [pc, #468]	; (801bb40 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b96a:	685b      	ldr	r3, [r3, #4]
 801b96c:	099b      	lsrs	r3, r3, #6
 801b96e:	461a      	mov	r2, r3
 801b970:	f04f 0300 	mov.w	r3, #0
 801b974:	f240 10ff 	movw	r0, #511	; 0x1ff
 801b978:	f04f 0100 	mov.w	r1, #0
 801b97c:	ea02 0800 	and.w	r8, r2, r0
 801b980:	ea03 0901 	and.w	r9, r3, r1
 801b984:	4640      	mov	r0, r8
 801b986:	4649      	mov	r1, r9
 801b988:	f04f 0200 	mov.w	r2, #0
 801b98c:	f04f 0300 	mov.w	r3, #0
 801b990:	014b      	lsls	r3, r1, #5
 801b992:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 801b996:	0142      	lsls	r2, r0, #5
 801b998:	4610      	mov	r0, r2
 801b99a:	4619      	mov	r1, r3
 801b99c:	ebb0 0008 	subs.w	r0, r0, r8
 801b9a0:	eb61 0109 	sbc.w	r1, r1, r9
 801b9a4:	f04f 0200 	mov.w	r2, #0
 801b9a8:	f04f 0300 	mov.w	r3, #0
 801b9ac:	018b      	lsls	r3, r1, #6
 801b9ae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 801b9b2:	0182      	lsls	r2, r0, #6
 801b9b4:	1a12      	subs	r2, r2, r0
 801b9b6:	eb63 0301 	sbc.w	r3, r3, r1
 801b9ba:	f04f 0000 	mov.w	r0, #0
 801b9be:	f04f 0100 	mov.w	r1, #0
 801b9c2:	00d9      	lsls	r1, r3, #3
 801b9c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801b9c8:	00d0      	lsls	r0, r2, #3
 801b9ca:	4602      	mov	r2, r0
 801b9cc:	460b      	mov	r3, r1
 801b9ce:	eb12 0208 	adds.w	r2, r2, r8
 801b9d2:	eb43 0309 	adc.w	r3, r3, r9
 801b9d6:	f04f 0000 	mov.w	r0, #0
 801b9da:	f04f 0100 	mov.w	r1, #0
 801b9de:	0299      	lsls	r1, r3, #10
 801b9e0:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 801b9e4:	0290      	lsls	r0, r2, #10
 801b9e6:	4602      	mov	r2, r0
 801b9e8:	460b      	mov	r3, r1
 801b9ea:	4610      	mov	r0, r2
 801b9ec:	4619      	mov	r1, r3
 801b9ee:	68fb      	ldr	r3, [r7, #12]
 801b9f0:	461a      	mov	r2, r3
 801b9f2:	f04f 0300 	mov.w	r3, #0
 801b9f6:	f7f0 fb2b 	bl	800c050 <__aeabi_uldivmod>
 801b9fa:	4602      	mov	r2, r0
 801b9fc:	460b      	mov	r3, r1
 801b9fe:	4613      	mov	r3, r2
 801ba00:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801ba02:	4b4f      	ldr	r3, [pc, #316]	; (801bb40 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801ba04:	685b      	ldr	r3, [r3, #4]
 801ba06:	0c1b      	lsrs	r3, r3, #16
 801ba08:	f003 0303 	and.w	r3, r3, #3
 801ba0c:	3301      	adds	r3, #1
 801ba0e:	005b      	lsls	r3, r3, #1
 801ba10:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 801ba12:	697a      	ldr	r2, [r7, #20]
 801ba14:	68bb      	ldr	r3, [r7, #8]
 801ba16:	fbb2 f3f3 	udiv	r3, r2, r3
 801ba1a:	613b      	str	r3, [r7, #16]
      break;
 801ba1c:	e089      	b.n	801bb32 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801ba1e:	4948      	ldr	r1, [pc, #288]	; (801bb40 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801ba20:	6849      	ldr	r1, [r1, #4]
 801ba22:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 801ba26:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801ba28:	4945      	ldr	r1, [pc, #276]	; (801bb40 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801ba2a:	6849      	ldr	r1, [r1, #4]
 801ba2c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 801ba30:	2900      	cmp	r1, #0
 801ba32:	d024      	beq.n	801ba7e <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801ba34:	4942      	ldr	r1, [pc, #264]	; (801bb40 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801ba36:	6849      	ldr	r1, [r1, #4]
 801ba38:	0989      	lsrs	r1, r1, #6
 801ba3a:	4608      	mov	r0, r1
 801ba3c:	f04f 0100 	mov.w	r1, #0
 801ba40:	f240 14ff 	movw	r4, #511	; 0x1ff
 801ba44:	f04f 0500 	mov.w	r5, #0
 801ba48:	ea00 0204 	and.w	r2, r0, r4
 801ba4c:	ea01 0305 	and.w	r3, r1, r5
 801ba50:	493d      	ldr	r1, [pc, #244]	; (801bb48 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801ba52:	fb01 f003 	mul.w	r0, r1, r3
 801ba56:	2100      	movs	r1, #0
 801ba58:	fb01 f102 	mul.w	r1, r1, r2
 801ba5c:	1844      	adds	r4, r0, r1
 801ba5e:	493a      	ldr	r1, [pc, #232]	; (801bb48 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801ba60:	fba2 0101 	umull	r0, r1, r2, r1
 801ba64:	1863      	adds	r3, r4, r1
 801ba66:	4619      	mov	r1, r3
 801ba68:	68fb      	ldr	r3, [r7, #12]
 801ba6a:	461a      	mov	r2, r3
 801ba6c:	f04f 0300 	mov.w	r3, #0
 801ba70:	f7f0 faee 	bl	800c050 <__aeabi_uldivmod>
 801ba74:	4602      	mov	r2, r0
 801ba76:	460b      	mov	r3, r1
 801ba78:	4613      	mov	r3, r2
 801ba7a:	617b      	str	r3, [r7, #20]
 801ba7c:	e04a      	b.n	801bb14 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801ba7e:	4b30      	ldr	r3, [pc, #192]	; (801bb40 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801ba80:	685b      	ldr	r3, [r3, #4]
 801ba82:	099b      	lsrs	r3, r3, #6
 801ba84:	461a      	mov	r2, r3
 801ba86:	f04f 0300 	mov.w	r3, #0
 801ba8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 801ba8e:	f04f 0100 	mov.w	r1, #0
 801ba92:	ea02 0400 	and.w	r4, r2, r0
 801ba96:	ea03 0501 	and.w	r5, r3, r1
 801ba9a:	4620      	mov	r0, r4
 801ba9c:	4629      	mov	r1, r5
 801ba9e:	f04f 0200 	mov.w	r2, #0
 801baa2:	f04f 0300 	mov.w	r3, #0
 801baa6:	014b      	lsls	r3, r1, #5
 801baa8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 801baac:	0142      	lsls	r2, r0, #5
 801baae:	4610      	mov	r0, r2
 801bab0:	4619      	mov	r1, r3
 801bab2:	1b00      	subs	r0, r0, r4
 801bab4:	eb61 0105 	sbc.w	r1, r1, r5
 801bab8:	f04f 0200 	mov.w	r2, #0
 801babc:	f04f 0300 	mov.w	r3, #0
 801bac0:	018b      	lsls	r3, r1, #6
 801bac2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 801bac6:	0182      	lsls	r2, r0, #6
 801bac8:	1a12      	subs	r2, r2, r0
 801baca:	eb63 0301 	sbc.w	r3, r3, r1
 801bace:	f04f 0000 	mov.w	r0, #0
 801bad2:	f04f 0100 	mov.w	r1, #0
 801bad6:	00d9      	lsls	r1, r3, #3
 801bad8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801badc:	00d0      	lsls	r0, r2, #3
 801bade:	4602      	mov	r2, r0
 801bae0:	460b      	mov	r3, r1
 801bae2:	1912      	adds	r2, r2, r4
 801bae4:	eb45 0303 	adc.w	r3, r5, r3
 801bae8:	f04f 0000 	mov.w	r0, #0
 801baec:	f04f 0100 	mov.w	r1, #0
 801baf0:	0299      	lsls	r1, r3, #10
 801baf2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 801baf6:	0290      	lsls	r0, r2, #10
 801baf8:	4602      	mov	r2, r0
 801bafa:	460b      	mov	r3, r1
 801bafc:	4610      	mov	r0, r2
 801bafe:	4619      	mov	r1, r3
 801bb00:	68fb      	ldr	r3, [r7, #12]
 801bb02:	461a      	mov	r2, r3
 801bb04:	f04f 0300 	mov.w	r3, #0
 801bb08:	f7f0 faa2 	bl	800c050 <__aeabi_uldivmod>
 801bb0c:	4602      	mov	r2, r0
 801bb0e:	460b      	mov	r3, r1
 801bb10:	4613      	mov	r3, r2
 801bb12:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 801bb14:	4b0a      	ldr	r3, [pc, #40]	; (801bb40 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801bb16:	685b      	ldr	r3, [r3, #4]
 801bb18:	0f1b      	lsrs	r3, r3, #28
 801bb1a:	f003 0307 	and.w	r3, r3, #7
 801bb1e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 801bb20:	697a      	ldr	r2, [r7, #20]
 801bb22:	687b      	ldr	r3, [r7, #4]
 801bb24:	fbb2 f3f3 	udiv	r3, r2, r3
 801bb28:	613b      	str	r3, [r7, #16]
      break;
 801bb2a:	e002      	b.n	801bb32 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801bb2c:	4b05      	ldr	r3, [pc, #20]	; (801bb44 <HAL_RCC_GetSysClockFreq+0x2b0>)
 801bb2e:	613b      	str	r3, [r7, #16]
      break;
 801bb30:	bf00      	nop
    }
  }
  return sysclockfreq;
 801bb32:	693b      	ldr	r3, [r7, #16]
}
 801bb34:	4618      	mov	r0, r3
 801bb36:	371c      	adds	r7, #28
 801bb38:	46bd      	mov	sp, r7
 801bb3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bb3e:	bf00      	nop
 801bb40:	40023800 	.word	0x40023800
 801bb44:	00f42400 	.word	0x00f42400
 801bb48:	017d7840 	.word	0x017d7840

0801bb4c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801bb4c:	b580      	push	{r7, lr}
 801bb4e:	b086      	sub	sp, #24
 801bb50:	af00      	add	r7, sp, #0
 801bb52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801bb54:	687b      	ldr	r3, [r7, #4]
 801bb56:	2b00      	cmp	r3, #0
 801bb58:	d101      	bne.n	801bb5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801bb5a:	2301      	movs	r3, #1
 801bb5c:	e28d      	b.n	801c07a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801bb5e:	687b      	ldr	r3, [r7, #4]
 801bb60:	681b      	ldr	r3, [r3, #0]
 801bb62:	f003 0301 	and.w	r3, r3, #1
 801bb66:	2b00      	cmp	r3, #0
 801bb68:	f000 8083 	beq.w	801bc72 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 801bb6c:	4b94      	ldr	r3, [pc, #592]	; (801bdc0 <HAL_RCC_OscConfig+0x274>)
 801bb6e:	689b      	ldr	r3, [r3, #8]
 801bb70:	f003 030c 	and.w	r3, r3, #12
 801bb74:	2b04      	cmp	r3, #4
 801bb76:	d019      	beq.n	801bbac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 801bb78:	4b91      	ldr	r3, [pc, #580]	; (801bdc0 <HAL_RCC_OscConfig+0x274>)
 801bb7a:	689b      	ldr	r3, [r3, #8]
 801bb7c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 801bb80:	2b08      	cmp	r3, #8
 801bb82:	d106      	bne.n	801bb92 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 801bb84:	4b8e      	ldr	r3, [pc, #568]	; (801bdc0 <HAL_RCC_OscConfig+0x274>)
 801bb86:	685b      	ldr	r3, [r3, #4]
 801bb88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bb8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801bb90:	d00c      	beq.n	801bbac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801bb92:	4b8b      	ldr	r3, [pc, #556]	; (801bdc0 <HAL_RCC_OscConfig+0x274>)
 801bb94:	689b      	ldr	r3, [r3, #8]
 801bb96:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 801bb9a:	2b0c      	cmp	r3, #12
 801bb9c:	d112      	bne.n	801bbc4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801bb9e:	4b88      	ldr	r3, [pc, #544]	; (801bdc0 <HAL_RCC_OscConfig+0x274>)
 801bba0:	685b      	ldr	r3, [r3, #4]
 801bba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bba6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801bbaa:	d10b      	bne.n	801bbc4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801bbac:	4b84      	ldr	r3, [pc, #528]	; (801bdc0 <HAL_RCC_OscConfig+0x274>)
 801bbae:	681b      	ldr	r3, [r3, #0]
 801bbb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bbb4:	2b00      	cmp	r3, #0
 801bbb6:	d05b      	beq.n	801bc70 <HAL_RCC_OscConfig+0x124>
 801bbb8:	687b      	ldr	r3, [r7, #4]
 801bbba:	685b      	ldr	r3, [r3, #4]
 801bbbc:	2b00      	cmp	r3, #0
 801bbbe:	d157      	bne.n	801bc70 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 801bbc0:	2301      	movs	r3, #1
 801bbc2:	e25a      	b.n	801c07a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801bbc4:	687b      	ldr	r3, [r7, #4]
 801bbc6:	685b      	ldr	r3, [r3, #4]
 801bbc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801bbcc:	d106      	bne.n	801bbdc <HAL_RCC_OscConfig+0x90>
 801bbce:	4b7c      	ldr	r3, [pc, #496]	; (801bdc0 <HAL_RCC_OscConfig+0x274>)
 801bbd0:	681b      	ldr	r3, [r3, #0]
 801bbd2:	4a7b      	ldr	r2, [pc, #492]	; (801bdc0 <HAL_RCC_OscConfig+0x274>)
 801bbd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bbd8:	6013      	str	r3, [r2, #0]
 801bbda:	e01d      	b.n	801bc18 <HAL_RCC_OscConfig+0xcc>
 801bbdc:	687b      	ldr	r3, [r7, #4]
 801bbde:	685b      	ldr	r3, [r3, #4]
 801bbe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801bbe4:	d10c      	bne.n	801bc00 <HAL_RCC_OscConfig+0xb4>
 801bbe6:	4b76      	ldr	r3, [pc, #472]	; (801bdc0 <HAL_RCC_OscConfig+0x274>)
 801bbe8:	681b      	ldr	r3, [r3, #0]
 801bbea:	4a75      	ldr	r2, [pc, #468]	; (801bdc0 <HAL_RCC_OscConfig+0x274>)
 801bbec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801bbf0:	6013      	str	r3, [r2, #0]
 801bbf2:	4b73      	ldr	r3, [pc, #460]	; (801bdc0 <HAL_RCC_OscConfig+0x274>)
 801bbf4:	681b      	ldr	r3, [r3, #0]
 801bbf6:	4a72      	ldr	r2, [pc, #456]	; (801bdc0 <HAL_RCC_OscConfig+0x274>)
 801bbf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bbfc:	6013      	str	r3, [r2, #0]
 801bbfe:	e00b      	b.n	801bc18 <HAL_RCC_OscConfig+0xcc>
 801bc00:	4b6f      	ldr	r3, [pc, #444]	; (801bdc0 <HAL_RCC_OscConfig+0x274>)
 801bc02:	681b      	ldr	r3, [r3, #0]
 801bc04:	4a6e      	ldr	r2, [pc, #440]	; (801bdc0 <HAL_RCC_OscConfig+0x274>)
 801bc06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801bc0a:	6013      	str	r3, [r2, #0]
 801bc0c:	4b6c      	ldr	r3, [pc, #432]	; (801bdc0 <HAL_RCC_OscConfig+0x274>)
 801bc0e:	681b      	ldr	r3, [r3, #0]
 801bc10:	4a6b      	ldr	r2, [pc, #428]	; (801bdc0 <HAL_RCC_OscConfig+0x274>)
 801bc12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801bc16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801bc18:	687b      	ldr	r3, [r7, #4]
 801bc1a:	685b      	ldr	r3, [r3, #4]
 801bc1c:	2b00      	cmp	r3, #0
 801bc1e:	d013      	beq.n	801bc48 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bc20:	f7fc fbcc 	bl	80183bc <HAL_GetTick>
 801bc24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801bc26:	e008      	b.n	801bc3a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801bc28:	f7fc fbc8 	bl	80183bc <HAL_GetTick>
 801bc2c:	4602      	mov	r2, r0
 801bc2e:	693b      	ldr	r3, [r7, #16]
 801bc30:	1ad3      	subs	r3, r2, r3
 801bc32:	2b64      	cmp	r3, #100	; 0x64
 801bc34:	d901      	bls.n	801bc3a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 801bc36:	2303      	movs	r3, #3
 801bc38:	e21f      	b.n	801c07a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801bc3a:	4b61      	ldr	r3, [pc, #388]	; (801bdc0 <HAL_RCC_OscConfig+0x274>)
 801bc3c:	681b      	ldr	r3, [r3, #0]
 801bc3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bc42:	2b00      	cmp	r3, #0
 801bc44:	d0f0      	beq.n	801bc28 <HAL_RCC_OscConfig+0xdc>
 801bc46:	e014      	b.n	801bc72 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bc48:	f7fc fbb8 	bl	80183bc <HAL_GetTick>
 801bc4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801bc4e:	e008      	b.n	801bc62 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801bc50:	f7fc fbb4 	bl	80183bc <HAL_GetTick>
 801bc54:	4602      	mov	r2, r0
 801bc56:	693b      	ldr	r3, [r7, #16]
 801bc58:	1ad3      	subs	r3, r2, r3
 801bc5a:	2b64      	cmp	r3, #100	; 0x64
 801bc5c:	d901      	bls.n	801bc62 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 801bc5e:	2303      	movs	r3, #3
 801bc60:	e20b      	b.n	801c07a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801bc62:	4b57      	ldr	r3, [pc, #348]	; (801bdc0 <HAL_RCC_OscConfig+0x274>)
 801bc64:	681b      	ldr	r3, [r3, #0]
 801bc66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bc6a:	2b00      	cmp	r3, #0
 801bc6c:	d1f0      	bne.n	801bc50 <HAL_RCC_OscConfig+0x104>
 801bc6e:	e000      	b.n	801bc72 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801bc70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801bc72:	687b      	ldr	r3, [r7, #4]
 801bc74:	681b      	ldr	r3, [r3, #0]
 801bc76:	f003 0302 	and.w	r3, r3, #2
 801bc7a:	2b00      	cmp	r3, #0
 801bc7c:	d06f      	beq.n	801bd5e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 801bc7e:	4b50      	ldr	r3, [pc, #320]	; (801bdc0 <HAL_RCC_OscConfig+0x274>)
 801bc80:	689b      	ldr	r3, [r3, #8]
 801bc82:	f003 030c 	and.w	r3, r3, #12
 801bc86:	2b00      	cmp	r3, #0
 801bc88:	d017      	beq.n	801bcba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 801bc8a:	4b4d      	ldr	r3, [pc, #308]	; (801bdc0 <HAL_RCC_OscConfig+0x274>)
 801bc8c:	689b      	ldr	r3, [r3, #8]
 801bc8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 801bc92:	2b08      	cmp	r3, #8
 801bc94:	d105      	bne.n	801bca2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 801bc96:	4b4a      	ldr	r3, [pc, #296]	; (801bdc0 <HAL_RCC_OscConfig+0x274>)
 801bc98:	685b      	ldr	r3, [r3, #4]
 801bc9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bc9e:	2b00      	cmp	r3, #0
 801bca0:	d00b      	beq.n	801bcba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801bca2:	4b47      	ldr	r3, [pc, #284]	; (801bdc0 <HAL_RCC_OscConfig+0x274>)
 801bca4:	689b      	ldr	r3, [r3, #8]
 801bca6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 801bcaa:	2b0c      	cmp	r3, #12
 801bcac:	d11c      	bne.n	801bce8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801bcae:	4b44      	ldr	r3, [pc, #272]	; (801bdc0 <HAL_RCC_OscConfig+0x274>)
 801bcb0:	685b      	ldr	r3, [r3, #4]
 801bcb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bcb6:	2b00      	cmp	r3, #0
 801bcb8:	d116      	bne.n	801bce8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801bcba:	4b41      	ldr	r3, [pc, #260]	; (801bdc0 <HAL_RCC_OscConfig+0x274>)
 801bcbc:	681b      	ldr	r3, [r3, #0]
 801bcbe:	f003 0302 	and.w	r3, r3, #2
 801bcc2:	2b00      	cmp	r3, #0
 801bcc4:	d005      	beq.n	801bcd2 <HAL_RCC_OscConfig+0x186>
 801bcc6:	687b      	ldr	r3, [r7, #4]
 801bcc8:	68db      	ldr	r3, [r3, #12]
 801bcca:	2b01      	cmp	r3, #1
 801bccc:	d001      	beq.n	801bcd2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 801bcce:	2301      	movs	r3, #1
 801bcd0:	e1d3      	b.n	801c07a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801bcd2:	4b3b      	ldr	r3, [pc, #236]	; (801bdc0 <HAL_RCC_OscConfig+0x274>)
 801bcd4:	681b      	ldr	r3, [r3, #0]
 801bcd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801bcda:	687b      	ldr	r3, [r7, #4]
 801bcdc:	691b      	ldr	r3, [r3, #16]
 801bcde:	00db      	lsls	r3, r3, #3
 801bce0:	4937      	ldr	r1, [pc, #220]	; (801bdc0 <HAL_RCC_OscConfig+0x274>)
 801bce2:	4313      	orrs	r3, r2
 801bce4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801bce6:	e03a      	b.n	801bd5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801bce8:	687b      	ldr	r3, [r7, #4]
 801bcea:	68db      	ldr	r3, [r3, #12]
 801bcec:	2b00      	cmp	r3, #0
 801bcee:	d020      	beq.n	801bd32 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801bcf0:	4b34      	ldr	r3, [pc, #208]	; (801bdc4 <HAL_RCC_OscConfig+0x278>)
 801bcf2:	2201      	movs	r2, #1
 801bcf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bcf6:	f7fc fb61 	bl	80183bc <HAL_GetTick>
 801bcfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801bcfc:	e008      	b.n	801bd10 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801bcfe:	f7fc fb5d 	bl	80183bc <HAL_GetTick>
 801bd02:	4602      	mov	r2, r0
 801bd04:	693b      	ldr	r3, [r7, #16]
 801bd06:	1ad3      	subs	r3, r2, r3
 801bd08:	2b02      	cmp	r3, #2
 801bd0a:	d901      	bls.n	801bd10 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 801bd0c:	2303      	movs	r3, #3
 801bd0e:	e1b4      	b.n	801c07a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801bd10:	4b2b      	ldr	r3, [pc, #172]	; (801bdc0 <HAL_RCC_OscConfig+0x274>)
 801bd12:	681b      	ldr	r3, [r3, #0]
 801bd14:	f003 0302 	and.w	r3, r3, #2
 801bd18:	2b00      	cmp	r3, #0
 801bd1a:	d0f0      	beq.n	801bcfe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801bd1c:	4b28      	ldr	r3, [pc, #160]	; (801bdc0 <HAL_RCC_OscConfig+0x274>)
 801bd1e:	681b      	ldr	r3, [r3, #0]
 801bd20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801bd24:	687b      	ldr	r3, [r7, #4]
 801bd26:	691b      	ldr	r3, [r3, #16]
 801bd28:	00db      	lsls	r3, r3, #3
 801bd2a:	4925      	ldr	r1, [pc, #148]	; (801bdc0 <HAL_RCC_OscConfig+0x274>)
 801bd2c:	4313      	orrs	r3, r2
 801bd2e:	600b      	str	r3, [r1, #0]
 801bd30:	e015      	b.n	801bd5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801bd32:	4b24      	ldr	r3, [pc, #144]	; (801bdc4 <HAL_RCC_OscConfig+0x278>)
 801bd34:	2200      	movs	r2, #0
 801bd36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bd38:	f7fc fb40 	bl	80183bc <HAL_GetTick>
 801bd3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801bd3e:	e008      	b.n	801bd52 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801bd40:	f7fc fb3c 	bl	80183bc <HAL_GetTick>
 801bd44:	4602      	mov	r2, r0
 801bd46:	693b      	ldr	r3, [r7, #16]
 801bd48:	1ad3      	subs	r3, r2, r3
 801bd4a:	2b02      	cmp	r3, #2
 801bd4c:	d901      	bls.n	801bd52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 801bd4e:	2303      	movs	r3, #3
 801bd50:	e193      	b.n	801c07a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801bd52:	4b1b      	ldr	r3, [pc, #108]	; (801bdc0 <HAL_RCC_OscConfig+0x274>)
 801bd54:	681b      	ldr	r3, [r3, #0]
 801bd56:	f003 0302 	and.w	r3, r3, #2
 801bd5a:	2b00      	cmp	r3, #0
 801bd5c:	d1f0      	bne.n	801bd40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801bd5e:	687b      	ldr	r3, [r7, #4]
 801bd60:	681b      	ldr	r3, [r3, #0]
 801bd62:	f003 0308 	and.w	r3, r3, #8
 801bd66:	2b00      	cmp	r3, #0
 801bd68:	d036      	beq.n	801bdd8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801bd6a:	687b      	ldr	r3, [r7, #4]
 801bd6c:	695b      	ldr	r3, [r3, #20]
 801bd6e:	2b00      	cmp	r3, #0
 801bd70:	d016      	beq.n	801bda0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801bd72:	4b15      	ldr	r3, [pc, #84]	; (801bdc8 <HAL_RCC_OscConfig+0x27c>)
 801bd74:	2201      	movs	r2, #1
 801bd76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bd78:	f7fc fb20 	bl	80183bc <HAL_GetTick>
 801bd7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801bd7e:	e008      	b.n	801bd92 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801bd80:	f7fc fb1c 	bl	80183bc <HAL_GetTick>
 801bd84:	4602      	mov	r2, r0
 801bd86:	693b      	ldr	r3, [r7, #16]
 801bd88:	1ad3      	subs	r3, r2, r3
 801bd8a:	2b02      	cmp	r3, #2
 801bd8c:	d901      	bls.n	801bd92 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 801bd8e:	2303      	movs	r3, #3
 801bd90:	e173      	b.n	801c07a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801bd92:	4b0b      	ldr	r3, [pc, #44]	; (801bdc0 <HAL_RCC_OscConfig+0x274>)
 801bd94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bd96:	f003 0302 	and.w	r3, r3, #2
 801bd9a:	2b00      	cmp	r3, #0
 801bd9c:	d0f0      	beq.n	801bd80 <HAL_RCC_OscConfig+0x234>
 801bd9e:	e01b      	b.n	801bdd8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801bda0:	4b09      	ldr	r3, [pc, #36]	; (801bdc8 <HAL_RCC_OscConfig+0x27c>)
 801bda2:	2200      	movs	r2, #0
 801bda4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bda6:	f7fc fb09 	bl	80183bc <HAL_GetTick>
 801bdaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801bdac:	e00e      	b.n	801bdcc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801bdae:	f7fc fb05 	bl	80183bc <HAL_GetTick>
 801bdb2:	4602      	mov	r2, r0
 801bdb4:	693b      	ldr	r3, [r7, #16]
 801bdb6:	1ad3      	subs	r3, r2, r3
 801bdb8:	2b02      	cmp	r3, #2
 801bdba:	d907      	bls.n	801bdcc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 801bdbc:	2303      	movs	r3, #3
 801bdbe:	e15c      	b.n	801c07a <HAL_RCC_OscConfig+0x52e>
 801bdc0:	40023800 	.word	0x40023800
 801bdc4:	42470000 	.word	0x42470000
 801bdc8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801bdcc:	4b8a      	ldr	r3, [pc, #552]	; (801bff8 <HAL_RCC_OscConfig+0x4ac>)
 801bdce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bdd0:	f003 0302 	and.w	r3, r3, #2
 801bdd4:	2b00      	cmp	r3, #0
 801bdd6:	d1ea      	bne.n	801bdae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801bdd8:	687b      	ldr	r3, [r7, #4]
 801bdda:	681b      	ldr	r3, [r3, #0]
 801bddc:	f003 0304 	and.w	r3, r3, #4
 801bde0:	2b00      	cmp	r3, #0
 801bde2:	f000 8097 	beq.w	801bf14 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801bde6:	2300      	movs	r3, #0
 801bde8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801bdea:	4b83      	ldr	r3, [pc, #524]	; (801bff8 <HAL_RCC_OscConfig+0x4ac>)
 801bdec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bdee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801bdf2:	2b00      	cmp	r3, #0
 801bdf4:	d10f      	bne.n	801be16 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801bdf6:	2300      	movs	r3, #0
 801bdf8:	60bb      	str	r3, [r7, #8]
 801bdfa:	4b7f      	ldr	r3, [pc, #508]	; (801bff8 <HAL_RCC_OscConfig+0x4ac>)
 801bdfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bdfe:	4a7e      	ldr	r2, [pc, #504]	; (801bff8 <HAL_RCC_OscConfig+0x4ac>)
 801be00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801be04:	6413      	str	r3, [r2, #64]	; 0x40
 801be06:	4b7c      	ldr	r3, [pc, #496]	; (801bff8 <HAL_RCC_OscConfig+0x4ac>)
 801be08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801be0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801be0e:	60bb      	str	r3, [r7, #8]
 801be10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801be12:	2301      	movs	r3, #1
 801be14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801be16:	4b79      	ldr	r3, [pc, #484]	; (801bffc <HAL_RCC_OscConfig+0x4b0>)
 801be18:	681b      	ldr	r3, [r3, #0]
 801be1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801be1e:	2b00      	cmp	r3, #0
 801be20:	d118      	bne.n	801be54 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801be22:	4b76      	ldr	r3, [pc, #472]	; (801bffc <HAL_RCC_OscConfig+0x4b0>)
 801be24:	681b      	ldr	r3, [r3, #0]
 801be26:	4a75      	ldr	r2, [pc, #468]	; (801bffc <HAL_RCC_OscConfig+0x4b0>)
 801be28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801be2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801be2e:	f7fc fac5 	bl	80183bc <HAL_GetTick>
 801be32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801be34:	e008      	b.n	801be48 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801be36:	f7fc fac1 	bl	80183bc <HAL_GetTick>
 801be3a:	4602      	mov	r2, r0
 801be3c:	693b      	ldr	r3, [r7, #16]
 801be3e:	1ad3      	subs	r3, r2, r3
 801be40:	2b02      	cmp	r3, #2
 801be42:	d901      	bls.n	801be48 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 801be44:	2303      	movs	r3, #3
 801be46:	e118      	b.n	801c07a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801be48:	4b6c      	ldr	r3, [pc, #432]	; (801bffc <HAL_RCC_OscConfig+0x4b0>)
 801be4a:	681b      	ldr	r3, [r3, #0]
 801be4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801be50:	2b00      	cmp	r3, #0
 801be52:	d0f0      	beq.n	801be36 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801be54:	687b      	ldr	r3, [r7, #4]
 801be56:	689b      	ldr	r3, [r3, #8]
 801be58:	2b01      	cmp	r3, #1
 801be5a:	d106      	bne.n	801be6a <HAL_RCC_OscConfig+0x31e>
 801be5c:	4b66      	ldr	r3, [pc, #408]	; (801bff8 <HAL_RCC_OscConfig+0x4ac>)
 801be5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801be60:	4a65      	ldr	r2, [pc, #404]	; (801bff8 <HAL_RCC_OscConfig+0x4ac>)
 801be62:	f043 0301 	orr.w	r3, r3, #1
 801be66:	6713      	str	r3, [r2, #112]	; 0x70
 801be68:	e01c      	b.n	801bea4 <HAL_RCC_OscConfig+0x358>
 801be6a:	687b      	ldr	r3, [r7, #4]
 801be6c:	689b      	ldr	r3, [r3, #8]
 801be6e:	2b05      	cmp	r3, #5
 801be70:	d10c      	bne.n	801be8c <HAL_RCC_OscConfig+0x340>
 801be72:	4b61      	ldr	r3, [pc, #388]	; (801bff8 <HAL_RCC_OscConfig+0x4ac>)
 801be74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801be76:	4a60      	ldr	r2, [pc, #384]	; (801bff8 <HAL_RCC_OscConfig+0x4ac>)
 801be78:	f043 0304 	orr.w	r3, r3, #4
 801be7c:	6713      	str	r3, [r2, #112]	; 0x70
 801be7e:	4b5e      	ldr	r3, [pc, #376]	; (801bff8 <HAL_RCC_OscConfig+0x4ac>)
 801be80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801be82:	4a5d      	ldr	r2, [pc, #372]	; (801bff8 <HAL_RCC_OscConfig+0x4ac>)
 801be84:	f043 0301 	orr.w	r3, r3, #1
 801be88:	6713      	str	r3, [r2, #112]	; 0x70
 801be8a:	e00b      	b.n	801bea4 <HAL_RCC_OscConfig+0x358>
 801be8c:	4b5a      	ldr	r3, [pc, #360]	; (801bff8 <HAL_RCC_OscConfig+0x4ac>)
 801be8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801be90:	4a59      	ldr	r2, [pc, #356]	; (801bff8 <HAL_RCC_OscConfig+0x4ac>)
 801be92:	f023 0301 	bic.w	r3, r3, #1
 801be96:	6713      	str	r3, [r2, #112]	; 0x70
 801be98:	4b57      	ldr	r3, [pc, #348]	; (801bff8 <HAL_RCC_OscConfig+0x4ac>)
 801be9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801be9c:	4a56      	ldr	r2, [pc, #344]	; (801bff8 <HAL_RCC_OscConfig+0x4ac>)
 801be9e:	f023 0304 	bic.w	r3, r3, #4
 801bea2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801bea4:	687b      	ldr	r3, [r7, #4]
 801bea6:	689b      	ldr	r3, [r3, #8]
 801bea8:	2b00      	cmp	r3, #0
 801beaa:	d015      	beq.n	801bed8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801beac:	f7fc fa86 	bl	80183bc <HAL_GetTick>
 801beb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801beb2:	e00a      	b.n	801beca <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801beb4:	f7fc fa82 	bl	80183bc <HAL_GetTick>
 801beb8:	4602      	mov	r2, r0
 801beba:	693b      	ldr	r3, [r7, #16]
 801bebc:	1ad3      	subs	r3, r2, r3
 801bebe:	f241 3288 	movw	r2, #5000	; 0x1388
 801bec2:	4293      	cmp	r3, r2
 801bec4:	d901      	bls.n	801beca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 801bec6:	2303      	movs	r3, #3
 801bec8:	e0d7      	b.n	801c07a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801beca:	4b4b      	ldr	r3, [pc, #300]	; (801bff8 <HAL_RCC_OscConfig+0x4ac>)
 801becc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bece:	f003 0302 	and.w	r3, r3, #2
 801bed2:	2b00      	cmp	r3, #0
 801bed4:	d0ee      	beq.n	801beb4 <HAL_RCC_OscConfig+0x368>
 801bed6:	e014      	b.n	801bf02 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bed8:	f7fc fa70 	bl	80183bc <HAL_GetTick>
 801bedc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801bede:	e00a      	b.n	801bef6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801bee0:	f7fc fa6c 	bl	80183bc <HAL_GetTick>
 801bee4:	4602      	mov	r2, r0
 801bee6:	693b      	ldr	r3, [r7, #16]
 801bee8:	1ad3      	subs	r3, r2, r3
 801beea:	f241 3288 	movw	r2, #5000	; 0x1388
 801beee:	4293      	cmp	r3, r2
 801bef0:	d901      	bls.n	801bef6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 801bef2:	2303      	movs	r3, #3
 801bef4:	e0c1      	b.n	801c07a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801bef6:	4b40      	ldr	r3, [pc, #256]	; (801bff8 <HAL_RCC_OscConfig+0x4ac>)
 801bef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801befa:	f003 0302 	and.w	r3, r3, #2
 801befe:	2b00      	cmp	r3, #0
 801bf00:	d1ee      	bne.n	801bee0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801bf02:	7dfb      	ldrb	r3, [r7, #23]
 801bf04:	2b01      	cmp	r3, #1
 801bf06:	d105      	bne.n	801bf14 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801bf08:	4b3b      	ldr	r3, [pc, #236]	; (801bff8 <HAL_RCC_OscConfig+0x4ac>)
 801bf0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bf0c:	4a3a      	ldr	r2, [pc, #232]	; (801bff8 <HAL_RCC_OscConfig+0x4ac>)
 801bf0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801bf12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801bf14:	687b      	ldr	r3, [r7, #4]
 801bf16:	699b      	ldr	r3, [r3, #24]
 801bf18:	2b00      	cmp	r3, #0
 801bf1a:	f000 80ad 	beq.w	801c078 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801bf1e:	4b36      	ldr	r3, [pc, #216]	; (801bff8 <HAL_RCC_OscConfig+0x4ac>)
 801bf20:	689b      	ldr	r3, [r3, #8]
 801bf22:	f003 030c 	and.w	r3, r3, #12
 801bf26:	2b08      	cmp	r3, #8
 801bf28:	d060      	beq.n	801bfec <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801bf2a:	687b      	ldr	r3, [r7, #4]
 801bf2c:	699b      	ldr	r3, [r3, #24]
 801bf2e:	2b02      	cmp	r3, #2
 801bf30:	d145      	bne.n	801bfbe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801bf32:	4b33      	ldr	r3, [pc, #204]	; (801c000 <HAL_RCC_OscConfig+0x4b4>)
 801bf34:	2200      	movs	r2, #0
 801bf36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bf38:	f7fc fa40 	bl	80183bc <HAL_GetTick>
 801bf3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801bf3e:	e008      	b.n	801bf52 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801bf40:	f7fc fa3c 	bl	80183bc <HAL_GetTick>
 801bf44:	4602      	mov	r2, r0
 801bf46:	693b      	ldr	r3, [r7, #16]
 801bf48:	1ad3      	subs	r3, r2, r3
 801bf4a:	2b02      	cmp	r3, #2
 801bf4c:	d901      	bls.n	801bf52 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 801bf4e:	2303      	movs	r3, #3
 801bf50:	e093      	b.n	801c07a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801bf52:	4b29      	ldr	r3, [pc, #164]	; (801bff8 <HAL_RCC_OscConfig+0x4ac>)
 801bf54:	681b      	ldr	r3, [r3, #0]
 801bf56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801bf5a:	2b00      	cmp	r3, #0
 801bf5c:	d1f0      	bne.n	801bf40 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801bf5e:	687b      	ldr	r3, [r7, #4]
 801bf60:	69da      	ldr	r2, [r3, #28]
 801bf62:	687b      	ldr	r3, [r7, #4]
 801bf64:	6a1b      	ldr	r3, [r3, #32]
 801bf66:	431a      	orrs	r2, r3
 801bf68:	687b      	ldr	r3, [r7, #4]
 801bf6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bf6c:	019b      	lsls	r3, r3, #6
 801bf6e:	431a      	orrs	r2, r3
 801bf70:	687b      	ldr	r3, [r7, #4]
 801bf72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bf74:	085b      	lsrs	r3, r3, #1
 801bf76:	3b01      	subs	r3, #1
 801bf78:	041b      	lsls	r3, r3, #16
 801bf7a:	431a      	orrs	r2, r3
 801bf7c:	687b      	ldr	r3, [r7, #4]
 801bf7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bf80:	061b      	lsls	r3, r3, #24
 801bf82:	431a      	orrs	r2, r3
 801bf84:	687b      	ldr	r3, [r7, #4]
 801bf86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bf88:	071b      	lsls	r3, r3, #28
 801bf8a:	491b      	ldr	r1, [pc, #108]	; (801bff8 <HAL_RCC_OscConfig+0x4ac>)
 801bf8c:	4313      	orrs	r3, r2
 801bf8e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801bf90:	4b1b      	ldr	r3, [pc, #108]	; (801c000 <HAL_RCC_OscConfig+0x4b4>)
 801bf92:	2201      	movs	r2, #1
 801bf94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bf96:	f7fc fa11 	bl	80183bc <HAL_GetTick>
 801bf9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801bf9c:	e008      	b.n	801bfb0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801bf9e:	f7fc fa0d 	bl	80183bc <HAL_GetTick>
 801bfa2:	4602      	mov	r2, r0
 801bfa4:	693b      	ldr	r3, [r7, #16]
 801bfa6:	1ad3      	subs	r3, r2, r3
 801bfa8:	2b02      	cmp	r3, #2
 801bfaa:	d901      	bls.n	801bfb0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 801bfac:	2303      	movs	r3, #3
 801bfae:	e064      	b.n	801c07a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801bfb0:	4b11      	ldr	r3, [pc, #68]	; (801bff8 <HAL_RCC_OscConfig+0x4ac>)
 801bfb2:	681b      	ldr	r3, [r3, #0]
 801bfb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801bfb8:	2b00      	cmp	r3, #0
 801bfba:	d0f0      	beq.n	801bf9e <HAL_RCC_OscConfig+0x452>
 801bfbc:	e05c      	b.n	801c078 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801bfbe:	4b10      	ldr	r3, [pc, #64]	; (801c000 <HAL_RCC_OscConfig+0x4b4>)
 801bfc0:	2200      	movs	r2, #0
 801bfc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bfc4:	f7fc f9fa 	bl	80183bc <HAL_GetTick>
 801bfc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801bfca:	e008      	b.n	801bfde <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801bfcc:	f7fc f9f6 	bl	80183bc <HAL_GetTick>
 801bfd0:	4602      	mov	r2, r0
 801bfd2:	693b      	ldr	r3, [r7, #16]
 801bfd4:	1ad3      	subs	r3, r2, r3
 801bfd6:	2b02      	cmp	r3, #2
 801bfd8:	d901      	bls.n	801bfde <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 801bfda:	2303      	movs	r3, #3
 801bfdc:	e04d      	b.n	801c07a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801bfde:	4b06      	ldr	r3, [pc, #24]	; (801bff8 <HAL_RCC_OscConfig+0x4ac>)
 801bfe0:	681b      	ldr	r3, [r3, #0]
 801bfe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801bfe6:	2b00      	cmp	r3, #0
 801bfe8:	d1f0      	bne.n	801bfcc <HAL_RCC_OscConfig+0x480>
 801bfea:	e045      	b.n	801c078 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801bfec:	687b      	ldr	r3, [r7, #4]
 801bfee:	699b      	ldr	r3, [r3, #24]
 801bff0:	2b01      	cmp	r3, #1
 801bff2:	d107      	bne.n	801c004 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 801bff4:	2301      	movs	r3, #1
 801bff6:	e040      	b.n	801c07a <HAL_RCC_OscConfig+0x52e>
 801bff8:	40023800 	.word	0x40023800
 801bffc:	40007000 	.word	0x40007000
 801c000:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801c004:	4b1f      	ldr	r3, [pc, #124]	; (801c084 <HAL_RCC_OscConfig+0x538>)
 801c006:	685b      	ldr	r3, [r3, #4]
 801c008:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801c00a:	687b      	ldr	r3, [r7, #4]
 801c00c:	699b      	ldr	r3, [r3, #24]
 801c00e:	2b01      	cmp	r3, #1
 801c010:	d030      	beq.n	801c074 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c012:	68fb      	ldr	r3, [r7, #12]
 801c014:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801c018:	687b      	ldr	r3, [r7, #4]
 801c01a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801c01c:	429a      	cmp	r2, r3
 801c01e:	d129      	bne.n	801c074 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801c020:	68fb      	ldr	r3, [r7, #12]
 801c022:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801c026:	687b      	ldr	r3, [r7, #4]
 801c028:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c02a:	429a      	cmp	r2, r3
 801c02c:	d122      	bne.n	801c074 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801c02e:	68fa      	ldr	r2, [r7, #12]
 801c030:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801c034:	4013      	ands	r3, r2
 801c036:	687a      	ldr	r2, [r7, #4]
 801c038:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801c03a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801c03c:	4293      	cmp	r3, r2
 801c03e:	d119      	bne.n	801c074 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801c040:	68fb      	ldr	r3, [r7, #12]
 801c042:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801c046:	687b      	ldr	r3, [r7, #4]
 801c048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c04a:	085b      	lsrs	r3, r3, #1
 801c04c:	3b01      	subs	r3, #1
 801c04e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801c050:	429a      	cmp	r2, r3
 801c052:	d10f      	bne.n	801c074 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801c054:	68fb      	ldr	r3, [r7, #12]
 801c056:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801c05a:	687b      	ldr	r3, [r7, #4]
 801c05c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c05e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801c060:	429a      	cmp	r2, r3
 801c062:	d107      	bne.n	801c074 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 801c064:	68fb      	ldr	r3, [r7, #12]
 801c066:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 801c06a:	687b      	ldr	r3, [r7, #4]
 801c06c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c06e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801c070:	429a      	cmp	r2, r3
 801c072:	d001      	beq.n	801c078 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 801c074:	2301      	movs	r3, #1
 801c076:	e000      	b.n	801c07a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 801c078:	2300      	movs	r3, #0
}
 801c07a:	4618      	mov	r0, r3
 801c07c:	3718      	adds	r7, #24
 801c07e:	46bd      	mov	sp, r7
 801c080:	bd80      	pop	{r7, pc}
 801c082:	bf00      	nop
 801c084:	40023800 	.word	0x40023800

0801c088 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801c088:	b580      	push	{r7, lr}
 801c08a:	b082      	sub	sp, #8
 801c08c:	af00      	add	r7, sp, #0
 801c08e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801c090:	687b      	ldr	r3, [r7, #4]
 801c092:	2b00      	cmp	r3, #0
 801c094:	d101      	bne.n	801c09a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801c096:	2301      	movs	r3, #1
 801c098:	e07b      	b.n	801c192 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801c09a:	687b      	ldr	r3, [r7, #4]
 801c09c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c09e:	2b00      	cmp	r3, #0
 801c0a0:	d108      	bne.n	801c0b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801c0a2:	687b      	ldr	r3, [r7, #4]
 801c0a4:	685b      	ldr	r3, [r3, #4]
 801c0a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c0aa:	d009      	beq.n	801c0c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801c0ac:	687b      	ldr	r3, [r7, #4]
 801c0ae:	2200      	movs	r2, #0
 801c0b0:	61da      	str	r2, [r3, #28]
 801c0b2:	e005      	b.n	801c0c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801c0b4:	687b      	ldr	r3, [r7, #4]
 801c0b6:	2200      	movs	r2, #0
 801c0b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801c0ba:	687b      	ldr	r3, [r7, #4]
 801c0bc:	2200      	movs	r2, #0
 801c0be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801c0c0:	687b      	ldr	r3, [r7, #4]
 801c0c2:	2200      	movs	r2, #0
 801c0c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801c0c6:	687b      	ldr	r3, [r7, #4]
 801c0c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c0cc:	b2db      	uxtb	r3, r3
 801c0ce:	2b00      	cmp	r3, #0
 801c0d0:	d106      	bne.n	801c0e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801c0d2:	687b      	ldr	r3, [r7, #4]
 801c0d4:	2200      	movs	r2, #0
 801c0d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801c0da:	6878      	ldr	r0, [r7, #4]
 801c0dc:	f7fb ff3a 	bl	8017f54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801c0e0:	687b      	ldr	r3, [r7, #4]
 801c0e2:	2202      	movs	r2, #2
 801c0e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801c0e8:	687b      	ldr	r3, [r7, #4]
 801c0ea:	681b      	ldr	r3, [r3, #0]
 801c0ec:	681a      	ldr	r2, [r3, #0]
 801c0ee:	687b      	ldr	r3, [r7, #4]
 801c0f0:	681b      	ldr	r3, [r3, #0]
 801c0f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c0f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801c0f8:	687b      	ldr	r3, [r7, #4]
 801c0fa:	685b      	ldr	r3, [r3, #4]
 801c0fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801c100:	687b      	ldr	r3, [r7, #4]
 801c102:	689b      	ldr	r3, [r3, #8]
 801c104:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801c108:	431a      	orrs	r2, r3
 801c10a:	687b      	ldr	r3, [r7, #4]
 801c10c:	68db      	ldr	r3, [r3, #12]
 801c10e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c112:	431a      	orrs	r2, r3
 801c114:	687b      	ldr	r3, [r7, #4]
 801c116:	691b      	ldr	r3, [r3, #16]
 801c118:	f003 0302 	and.w	r3, r3, #2
 801c11c:	431a      	orrs	r2, r3
 801c11e:	687b      	ldr	r3, [r7, #4]
 801c120:	695b      	ldr	r3, [r3, #20]
 801c122:	f003 0301 	and.w	r3, r3, #1
 801c126:	431a      	orrs	r2, r3
 801c128:	687b      	ldr	r3, [r7, #4]
 801c12a:	699b      	ldr	r3, [r3, #24]
 801c12c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801c130:	431a      	orrs	r2, r3
 801c132:	687b      	ldr	r3, [r7, #4]
 801c134:	69db      	ldr	r3, [r3, #28]
 801c136:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801c13a:	431a      	orrs	r2, r3
 801c13c:	687b      	ldr	r3, [r7, #4]
 801c13e:	6a1b      	ldr	r3, [r3, #32]
 801c140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c144:	ea42 0103 	orr.w	r1, r2, r3
 801c148:	687b      	ldr	r3, [r7, #4]
 801c14a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c14c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801c150:	687b      	ldr	r3, [r7, #4]
 801c152:	681b      	ldr	r3, [r3, #0]
 801c154:	430a      	orrs	r2, r1
 801c156:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 801c158:	687b      	ldr	r3, [r7, #4]
 801c15a:	699b      	ldr	r3, [r3, #24]
 801c15c:	0c1b      	lsrs	r3, r3, #16
 801c15e:	f003 0104 	and.w	r1, r3, #4
 801c162:	687b      	ldr	r3, [r7, #4]
 801c164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c166:	f003 0210 	and.w	r2, r3, #16
 801c16a:	687b      	ldr	r3, [r7, #4]
 801c16c:	681b      	ldr	r3, [r3, #0]
 801c16e:	430a      	orrs	r2, r1
 801c170:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801c172:	687b      	ldr	r3, [r7, #4]
 801c174:	681b      	ldr	r3, [r3, #0]
 801c176:	69da      	ldr	r2, [r3, #28]
 801c178:	687b      	ldr	r3, [r7, #4]
 801c17a:	681b      	ldr	r3, [r3, #0]
 801c17c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801c180:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801c182:	687b      	ldr	r3, [r7, #4]
 801c184:	2200      	movs	r2, #0
 801c186:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 801c188:	687b      	ldr	r3, [r7, #4]
 801c18a:	2201      	movs	r2, #1
 801c18c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 801c190:	2300      	movs	r3, #0
}
 801c192:	4618      	mov	r0, r3
 801c194:	3708      	adds	r7, #8
 801c196:	46bd      	mov	sp, r7
 801c198:	bd80      	pop	{r7, pc}

0801c19a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c19a:	b580      	push	{r7, lr}
 801c19c:	b088      	sub	sp, #32
 801c19e:	af00      	add	r7, sp, #0
 801c1a0:	60f8      	str	r0, [r7, #12]
 801c1a2:	60b9      	str	r1, [r7, #8]
 801c1a4:	603b      	str	r3, [r7, #0]
 801c1a6:	4613      	mov	r3, r2
 801c1a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801c1aa:	2300      	movs	r3, #0
 801c1ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c1ae:	68fb      	ldr	r3, [r7, #12]
 801c1b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801c1b4:	2b01      	cmp	r3, #1
 801c1b6:	d101      	bne.n	801c1bc <HAL_SPI_Transmit+0x22>
 801c1b8:	2302      	movs	r3, #2
 801c1ba:	e126      	b.n	801c40a <HAL_SPI_Transmit+0x270>
 801c1bc:	68fb      	ldr	r3, [r7, #12]
 801c1be:	2201      	movs	r2, #1
 801c1c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c1c4:	f7fc f8fa 	bl	80183bc <HAL_GetTick>
 801c1c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801c1ca:	88fb      	ldrh	r3, [r7, #6]
 801c1cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801c1ce:	68fb      	ldr	r3, [r7, #12]
 801c1d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c1d4:	b2db      	uxtb	r3, r3
 801c1d6:	2b01      	cmp	r3, #1
 801c1d8:	d002      	beq.n	801c1e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801c1da:	2302      	movs	r3, #2
 801c1dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 801c1de:	e10b      	b.n	801c3f8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 801c1e0:	68bb      	ldr	r3, [r7, #8]
 801c1e2:	2b00      	cmp	r3, #0
 801c1e4:	d002      	beq.n	801c1ec <HAL_SPI_Transmit+0x52>
 801c1e6:	88fb      	ldrh	r3, [r7, #6]
 801c1e8:	2b00      	cmp	r3, #0
 801c1ea:	d102      	bne.n	801c1f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801c1ec:	2301      	movs	r3, #1
 801c1ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 801c1f0:	e102      	b.n	801c3f8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801c1f2:	68fb      	ldr	r3, [r7, #12]
 801c1f4:	2203      	movs	r2, #3
 801c1f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c1fa:	68fb      	ldr	r3, [r7, #12]
 801c1fc:	2200      	movs	r2, #0
 801c1fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801c200:	68fb      	ldr	r3, [r7, #12]
 801c202:	68ba      	ldr	r2, [r7, #8]
 801c204:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 801c206:	68fb      	ldr	r3, [r7, #12]
 801c208:	88fa      	ldrh	r2, [r7, #6]
 801c20a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 801c20c:	68fb      	ldr	r3, [r7, #12]
 801c20e:	88fa      	ldrh	r2, [r7, #6]
 801c210:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801c212:	68fb      	ldr	r3, [r7, #12]
 801c214:	2200      	movs	r2, #0
 801c216:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 801c218:	68fb      	ldr	r3, [r7, #12]
 801c21a:	2200      	movs	r2, #0
 801c21c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 801c21e:	68fb      	ldr	r3, [r7, #12]
 801c220:	2200      	movs	r2, #0
 801c222:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 801c224:	68fb      	ldr	r3, [r7, #12]
 801c226:	2200      	movs	r2, #0
 801c228:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 801c22a:	68fb      	ldr	r3, [r7, #12]
 801c22c:	2200      	movs	r2, #0
 801c22e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c230:	68fb      	ldr	r3, [r7, #12]
 801c232:	689b      	ldr	r3, [r3, #8]
 801c234:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c238:	d10f      	bne.n	801c25a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801c23a:	68fb      	ldr	r3, [r7, #12]
 801c23c:	681b      	ldr	r3, [r3, #0]
 801c23e:	681a      	ldr	r2, [r3, #0]
 801c240:	68fb      	ldr	r3, [r7, #12]
 801c242:	681b      	ldr	r3, [r3, #0]
 801c244:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c248:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801c24a:	68fb      	ldr	r3, [r7, #12]
 801c24c:	681b      	ldr	r3, [r3, #0]
 801c24e:	681a      	ldr	r2, [r3, #0]
 801c250:	68fb      	ldr	r3, [r7, #12]
 801c252:	681b      	ldr	r3, [r3, #0]
 801c254:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801c258:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c25a:	68fb      	ldr	r3, [r7, #12]
 801c25c:	681b      	ldr	r3, [r3, #0]
 801c25e:	681b      	ldr	r3, [r3, #0]
 801c260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c264:	2b40      	cmp	r3, #64	; 0x40
 801c266:	d007      	beq.n	801c278 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c268:	68fb      	ldr	r3, [r7, #12]
 801c26a:	681b      	ldr	r3, [r3, #0]
 801c26c:	681a      	ldr	r2, [r3, #0]
 801c26e:	68fb      	ldr	r3, [r7, #12]
 801c270:	681b      	ldr	r3, [r3, #0]
 801c272:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c276:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801c278:	68fb      	ldr	r3, [r7, #12]
 801c27a:	68db      	ldr	r3, [r3, #12]
 801c27c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c280:	d14b      	bne.n	801c31a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c282:	68fb      	ldr	r3, [r7, #12]
 801c284:	685b      	ldr	r3, [r3, #4]
 801c286:	2b00      	cmp	r3, #0
 801c288:	d002      	beq.n	801c290 <HAL_SPI_Transmit+0xf6>
 801c28a:	8afb      	ldrh	r3, [r7, #22]
 801c28c:	2b01      	cmp	r3, #1
 801c28e:	d13e      	bne.n	801c30e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c290:	68fb      	ldr	r3, [r7, #12]
 801c292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c294:	881a      	ldrh	r2, [r3, #0]
 801c296:	68fb      	ldr	r3, [r7, #12]
 801c298:	681b      	ldr	r3, [r3, #0]
 801c29a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801c29c:	68fb      	ldr	r3, [r7, #12]
 801c29e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c2a0:	1c9a      	adds	r2, r3, #2
 801c2a2:	68fb      	ldr	r3, [r7, #12]
 801c2a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801c2a6:	68fb      	ldr	r3, [r7, #12]
 801c2a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c2aa:	b29b      	uxth	r3, r3
 801c2ac:	3b01      	subs	r3, #1
 801c2ae:	b29a      	uxth	r2, r3
 801c2b0:	68fb      	ldr	r3, [r7, #12]
 801c2b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801c2b4:	e02b      	b.n	801c30e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801c2b6:	68fb      	ldr	r3, [r7, #12]
 801c2b8:	681b      	ldr	r3, [r3, #0]
 801c2ba:	689b      	ldr	r3, [r3, #8]
 801c2bc:	f003 0302 	and.w	r3, r3, #2
 801c2c0:	2b02      	cmp	r3, #2
 801c2c2:	d112      	bne.n	801c2ea <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c2c4:	68fb      	ldr	r3, [r7, #12]
 801c2c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c2c8:	881a      	ldrh	r2, [r3, #0]
 801c2ca:	68fb      	ldr	r3, [r7, #12]
 801c2cc:	681b      	ldr	r3, [r3, #0]
 801c2ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801c2d0:	68fb      	ldr	r3, [r7, #12]
 801c2d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c2d4:	1c9a      	adds	r2, r3, #2
 801c2d6:	68fb      	ldr	r3, [r7, #12]
 801c2d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801c2da:	68fb      	ldr	r3, [r7, #12]
 801c2dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c2de:	b29b      	uxth	r3, r3
 801c2e0:	3b01      	subs	r3, #1
 801c2e2:	b29a      	uxth	r2, r3
 801c2e4:	68fb      	ldr	r3, [r7, #12]
 801c2e6:	86da      	strh	r2, [r3, #54]	; 0x36
 801c2e8:	e011      	b.n	801c30e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c2ea:	f7fc f867 	bl	80183bc <HAL_GetTick>
 801c2ee:	4602      	mov	r2, r0
 801c2f0:	69bb      	ldr	r3, [r7, #24]
 801c2f2:	1ad3      	subs	r3, r2, r3
 801c2f4:	683a      	ldr	r2, [r7, #0]
 801c2f6:	429a      	cmp	r2, r3
 801c2f8:	d803      	bhi.n	801c302 <HAL_SPI_Transmit+0x168>
 801c2fa:	683b      	ldr	r3, [r7, #0]
 801c2fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c300:	d102      	bne.n	801c308 <HAL_SPI_Transmit+0x16e>
 801c302:	683b      	ldr	r3, [r7, #0]
 801c304:	2b00      	cmp	r3, #0
 801c306:	d102      	bne.n	801c30e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 801c308:	2303      	movs	r3, #3
 801c30a:	77fb      	strb	r3, [r7, #31]
          goto error;
 801c30c:	e074      	b.n	801c3f8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 801c30e:	68fb      	ldr	r3, [r7, #12]
 801c310:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c312:	b29b      	uxth	r3, r3
 801c314:	2b00      	cmp	r3, #0
 801c316:	d1ce      	bne.n	801c2b6 <HAL_SPI_Transmit+0x11c>
 801c318:	e04c      	b.n	801c3b4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c31a:	68fb      	ldr	r3, [r7, #12]
 801c31c:	685b      	ldr	r3, [r3, #4]
 801c31e:	2b00      	cmp	r3, #0
 801c320:	d002      	beq.n	801c328 <HAL_SPI_Transmit+0x18e>
 801c322:	8afb      	ldrh	r3, [r7, #22]
 801c324:	2b01      	cmp	r3, #1
 801c326:	d140      	bne.n	801c3aa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801c328:	68fb      	ldr	r3, [r7, #12]
 801c32a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c32c:	68fb      	ldr	r3, [r7, #12]
 801c32e:	681b      	ldr	r3, [r3, #0]
 801c330:	330c      	adds	r3, #12
 801c332:	7812      	ldrb	r2, [r2, #0]
 801c334:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801c336:	68fb      	ldr	r3, [r7, #12]
 801c338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c33a:	1c5a      	adds	r2, r3, #1
 801c33c:	68fb      	ldr	r3, [r7, #12]
 801c33e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801c340:	68fb      	ldr	r3, [r7, #12]
 801c342:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c344:	b29b      	uxth	r3, r3
 801c346:	3b01      	subs	r3, #1
 801c348:	b29a      	uxth	r2, r3
 801c34a:	68fb      	ldr	r3, [r7, #12]
 801c34c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 801c34e:	e02c      	b.n	801c3aa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801c350:	68fb      	ldr	r3, [r7, #12]
 801c352:	681b      	ldr	r3, [r3, #0]
 801c354:	689b      	ldr	r3, [r3, #8]
 801c356:	f003 0302 	and.w	r3, r3, #2
 801c35a:	2b02      	cmp	r3, #2
 801c35c:	d113      	bne.n	801c386 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801c35e:	68fb      	ldr	r3, [r7, #12]
 801c360:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c362:	68fb      	ldr	r3, [r7, #12]
 801c364:	681b      	ldr	r3, [r3, #0]
 801c366:	330c      	adds	r3, #12
 801c368:	7812      	ldrb	r2, [r2, #0]
 801c36a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801c36c:	68fb      	ldr	r3, [r7, #12]
 801c36e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c370:	1c5a      	adds	r2, r3, #1
 801c372:	68fb      	ldr	r3, [r7, #12]
 801c374:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801c376:	68fb      	ldr	r3, [r7, #12]
 801c378:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c37a:	b29b      	uxth	r3, r3
 801c37c:	3b01      	subs	r3, #1
 801c37e:	b29a      	uxth	r2, r3
 801c380:	68fb      	ldr	r3, [r7, #12]
 801c382:	86da      	strh	r2, [r3, #54]	; 0x36
 801c384:	e011      	b.n	801c3aa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c386:	f7fc f819 	bl	80183bc <HAL_GetTick>
 801c38a:	4602      	mov	r2, r0
 801c38c:	69bb      	ldr	r3, [r7, #24]
 801c38e:	1ad3      	subs	r3, r2, r3
 801c390:	683a      	ldr	r2, [r7, #0]
 801c392:	429a      	cmp	r2, r3
 801c394:	d803      	bhi.n	801c39e <HAL_SPI_Transmit+0x204>
 801c396:	683b      	ldr	r3, [r7, #0]
 801c398:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c39c:	d102      	bne.n	801c3a4 <HAL_SPI_Transmit+0x20a>
 801c39e:	683b      	ldr	r3, [r7, #0]
 801c3a0:	2b00      	cmp	r3, #0
 801c3a2:	d102      	bne.n	801c3aa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 801c3a4:	2303      	movs	r3, #3
 801c3a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 801c3a8:	e026      	b.n	801c3f8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 801c3aa:	68fb      	ldr	r3, [r7, #12]
 801c3ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c3ae:	b29b      	uxth	r3, r3
 801c3b0:	2b00      	cmp	r3, #0
 801c3b2:	d1cd      	bne.n	801c350 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c3b4:	69ba      	ldr	r2, [r7, #24]
 801c3b6:	6839      	ldr	r1, [r7, #0]
 801c3b8:	68f8      	ldr	r0, [r7, #12]
 801c3ba:	f000 fcf7 	bl	801cdac <SPI_EndRxTxTransaction>
 801c3be:	4603      	mov	r3, r0
 801c3c0:	2b00      	cmp	r3, #0
 801c3c2:	d002      	beq.n	801c3ca <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c3c4:	68fb      	ldr	r3, [r7, #12]
 801c3c6:	2220      	movs	r2, #32
 801c3c8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801c3ca:	68fb      	ldr	r3, [r7, #12]
 801c3cc:	689b      	ldr	r3, [r3, #8]
 801c3ce:	2b00      	cmp	r3, #0
 801c3d0:	d10a      	bne.n	801c3e8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801c3d2:	2300      	movs	r3, #0
 801c3d4:	613b      	str	r3, [r7, #16]
 801c3d6:	68fb      	ldr	r3, [r7, #12]
 801c3d8:	681b      	ldr	r3, [r3, #0]
 801c3da:	68db      	ldr	r3, [r3, #12]
 801c3dc:	613b      	str	r3, [r7, #16]
 801c3de:	68fb      	ldr	r3, [r7, #12]
 801c3e0:	681b      	ldr	r3, [r3, #0]
 801c3e2:	689b      	ldr	r3, [r3, #8]
 801c3e4:	613b      	str	r3, [r7, #16]
 801c3e6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801c3e8:	68fb      	ldr	r3, [r7, #12]
 801c3ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c3ec:	2b00      	cmp	r3, #0
 801c3ee:	d002      	beq.n	801c3f6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 801c3f0:	2301      	movs	r3, #1
 801c3f2:	77fb      	strb	r3, [r7, #31]
 801c3f4:	e000      	b.n	801c3f8 <HAL_SPI_Transmit+0x25e>
  }

error:
 801c3f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c3f8:	68fb      	ldr	r3, [r7, #12]
 801c3fa:	2201      	movs	r2, #1
 801c3fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801c400:	68fb      	ldr	r3, [r7, #12]
 801c402:	2200      	movs	r2, #0
 801c404:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801c408:	7ffb      	ldrb	r3, [r7, #31]
}
 801c40a:	4618      	mov	r0, r3
 801c40c:	3720      	adds	r7, #32
 801c40e:	46bd      	mov	sp, r7
 801c410:	bd80      	pop	{r7, pc}

0801c412 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c412:	b580      	push	{r7, lr}
 801c414:	b088      	sub	sp, #32
 801c416:	af02      	add	r7, sp, #8
 801c418:	60f8      	str	r0, [r7, #12]
 801c41a:	60b9      	str	r1, [r7, #8]
 801c41c:	603b      	str	r3, [r7, #0]
 801c41e:	4613      	mov	r3, r2
 801c420:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801c422:	2300      	movs	r3, #0
 801c424:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801c426:	68fb      	ldr	r3, [r7, #12]
 801c428:	685b      	ldr	r3, [r3, #4]
 801c42a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c42e:	d112      	bne.n	801c456 <HAL_SPI_Receive+0x44>
 801c430:	68fb      	ldr	r3, [r7, #12]
 801c432:	689b      	ldr	r3, [r3, #8]
 801c434:	2b00      	cmp	r3, #0
 801c436:	d10e      	bne.n	801c456 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801c438:	68fb      	ldr	r3, [r7, #12]
 801c43a:	2204      	movs	r2, #4
 801c43c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801c440:	88fa      	ldrh	r2, [r7, #6]
 801c442:	683b      	ldr	r3, [r7, #0]
 801c444:	9300      	str	r3, [sp, #0]
 801c446:	4613      	mov	r3, r2
 801c448:	68ba      	ldr	r2, [r7, #8]
 801c44a:	68b9      	ldr	r1, [r7, #8]
 801c44c:	68f8      	ldr	r0, [r7, #12]
 801c44e:	f000 f8f1 	bl	801c634 <HAL_SPI_TransmitReceive>
 801c452:	4603      	mov	r3, r0
 801c454:	e0ea      	b.n	801c62c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c456:	68fb      	ldr	r3, [r7, #12]
 801c458:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801c45c:	2b01      	cmp	r3, #1
 801c45e:	d101      	bne.n	801c464 <HAL_SPI_Receive+0x52>
 801c460:	2302      	movs	r3, #2
 801c462:	e0e3      	b.n	801c62c <HAL_SPI_Receive+0x21a>
 801c464:	68fb      	ldr	r3, [r7, #12]
 801c466:	2201      	movs	r2, #1
 801c468:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c46c:	f7fb ffa6 	bl	80183bc <HAL_GetTick>
 801c470:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801c472:	68fb      	ldr	r3, [r7, #12]
 801c474:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c478:	b2db      	uxtb	r3, r3
 801c47a:	2b01      	cmp	r3, #1
 801c47c:	d002      	beq.n	801c484 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801c47e:	2302      	movs	r3, #2
 801c480:	75fb      	strb	r3, [r7, #23]
    goto error;
 801c482:	e0ca      	b.n	801c61a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 801c484:	68bb      	ldr	r3, [r7, #8]
 801c486:	2b00      	cmp	r3, #0
 801c488:	d002      	beq.n	801c490 <HAL_SPI_Receive+0x7e>
 801c48a:	88fb      	ldrh	r3, [r7, #6]
 801c48c:	2b00      	cmp	r3, #0
 801c48e:	d102      	bne.n	801c496 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801c490:	2301      	movs	r3, #1
 801c492:	75fb      	strb	r3, [r7, #23]
    goto error;
 801c494:	e0c1      	b.n	801c61a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801c496:	68fb      	ldr	r3, [r7, #12]
 801c498:	2204      	movs	r2, #4
 801c49a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c49e:	68fb      	ldr	r3, [r7, #12]
 801c4a0:	2200      	movs	r2, #0
 801c4a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801c4a4:	68fb      	ldr	r3, [r7, #12]
 801c4a6:	68ba      	ldr	r2, [r7, #8]
 801c4a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 801c4aa:	68fb      	ldr	r3, [r7, #12]
 801c4ac:	88fa      	ldrh	r2, [r7, #6]
 801c4ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 801c4b0:	68fb      	ldr	r3, [r7, #12]
 801c4b2:	88fa      	ldrh	r2, [r7, #6]
 801c4b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801c4b6:	68fb      	ldr	r3, [r7, #12]
 801c4b8:	2200      	movs	r2, #0
 801c4ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 801c4bc:	68fb      	ldr	r3, [r7, #12]
 801c4be:	2200      	movs	r2, #0
 801c4c0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 801c4c2:	68fb      	ldr	r3, [r7, #12]
 801c4c4:	2200      	movs	r2, #0
 801c4c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 801c4c8:	68fb      	ldr	r3, [r7, #12]
 801c4ca:	2200      	movs	r2, #0
 801c4cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801c4ce:	68fb      	ldr	r3, [r7, #12]
 801c4d0:	2200      	movs	r2, #0
 801c4d2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c4d4:	68fb      	ldr	r3, [r7, #12]
 801c4d6:	689b      	ldr	r3, [r3, #8]
 801c4d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c4dc:	d10f      	bne.n	801c4fe <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801c4de:	68fb      	ldr	r3, [r7, #12]
 801c4e0:	681b      	ldr	r3, [r3, #0]
 801c4e2:	681a      	ldr	r2, [r3, #0]
 801c4e4:	68fb      	ldr	r3, [r7, #12]
 801c4e6:	681b      	ldr	r3, [r3, #0]
 801c4e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c4ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801c4ee:	68fb      	ldr	r3, [r7, #12]
 801c4f0:	681b      	ldr	r3, [r3, #0]
 801c4f2:	681a      	ldr	r2, [r3, #0]
 801c4f4:	68fb      	ldr	r3, [r7, #12]
 801c4f6:	681b      	ldr	r3, [r3, #0]
 801c4f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801c4fc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c4fe:	68fb      	ldr	r3, [r7, #12]
 801c500:	681b      	ldr	r3, [r3, #0]
 801c502:	681b      	ldr	r3, [r3, #0]
 801c504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c508:	2b40      	cmp	r3, #64	; 0x40
 801c50a:	d007      	beq.n	801c51c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c50c:	68fb      	ldr	r3, [r7, #12]
 801c50e:	681b      	ldr	r3, [r3, #0]
 801c510:	681a      	ldr	r2, [r3, #0]
 801c512:	68fb      	ldr	r3, [r7, #12]
 801c514:	681b      	ldr	r3, [r3, #0]
 801c516:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c51a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 801c51c:	68fb      	ldr	r3, [r7, #12]
 801c51e:	68db      	ldr	r3, [r3, #12]
 801c520:	2b00      	cmp	r3, #0
 801c522:	d162      	bne.n	801c5ea <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801c524:	e02e      	b.n	801c584 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801c526:	68fb      	ldr	r3, [r7, #12]
 801c528:	681b      	ldr	r3, [r3, #0]
 801c52a:	689b      	ldr	r3, [r3, #8]
 801c52c:	f003 0301 	and.w	r3, r3, #1
 801c530:	2b01      	cmp	r3, #1
 801c532:	d115      	bne.n	801c560 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801c534:	68fb      	ldr	r3, [r7, #12]
 801c536:	681b      	ldr	r3, [r3, #0]
 801c538:	f103 020c 	add.w	r2, r3, #12
 801c53c:	68fb      	ldr	r3, [r7, #12]
 801c53e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c540:	7812      	ldrb	r2, [r2, #0]
 801c542:	b2d2      	uxtb	r2, r2
 801c544:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801c546:	68fb      	ldr	r3, [r7, #12]
 801c548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c54a:	1c5a      	adds	r2, r3, #1
 801c54c:	68fb      	ldr	r3, [r7, #12]
 801c54e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801c550:	68fb      	ldr	r3, [r7, #12]
 801c552:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c554:	b29b      	uxth	r3, r3
 801c556:	3b01      	subs	r3, #1
 801c558:	b29a      	uxth	r2, r3
 801c55a:	68fb      	ldr	r3, [r7, #12]
 801c55c:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c55e:	e011      	b.n	801c584 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c560:	f7fb ff2c 	bl	80183bc <HAL_GetTick>
 801c564:	4602      	mov	r2, r0
 801c566:	693b      	ldr	r3, [r7, #16]
 801c568:	1ad3      	subs	r3, r2, r3
 801c56a:	683a      	ldr	r2, [r7, #0]
 801c56c:	429a      	cmp	r2, r3
 801c56e:	d803      	bhi.n	801c578 <HAL_SPI_Receive+0x166>
 801c570:	683b      	ldr	r3, [r7, #0]
 801c572:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c576:	d102      	bne.n	801c57e <HAL_SPI_Receive+0x16c>
 801c578:	683b      	ldr	r3, [r7, #0]
 801c57a:	2b00      	cmp	r3, #0
 801c57c:	d102      	bne.n	801c584 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 801c57e:	2303      	movs	r3, #3
 801c580:	75fb      	strb	r3, [r7, #23]
          goto error;
 801c582:	e04a      	b.n	801c61a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 801c584:	68fb      	ldr	r3, [r7, #12]
 801c586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c588:	b29b      	uxth	r3, r3
 801c58a:	2b00      	cmp	r3, #0
 801c58c:	d1cb      	bne.n	801c526 <HAL_SPI_Receive+0x114>
 801c58e:	e031      	b.n	801c5f4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801c590:	68fb      	ldr	r3, [r7, #12]
 801c592:	681b      	ldr	r3, [r3, #0]
 801c594:	689b      	ldr	r3, [r3, #8]
 801c596:	f003 0301 	and.w	r3, r3, #1
 801c59a:	2b01      	cmp	r3, #1
 801c59c:	d113      	bne.n	801c5c6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801c59e:	68fb      	ldr	r3, [r7, #12]
 801c5a0:	681b      	ldr	r3, [r3, #0]
 801c5a2:	68da      	ldr	r2, [r3, #12]
 801c5a4:	68fb      	ldr	r3, [r7, #12]
 801c5a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c5a8:	b292      	uxth	r2, r2
 801c5aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801c5ac:	68fb      	ldr	r3, [r7, #12]
 801c5ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c5b0:	1c9a      	adds	r2, r3, #2
 801c5b2:	68fb      	ldr	r3, [r7, #12]
 801c5b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801c5b6:	68fb      	ldr	r3, [r7, #12]
 801c5b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c5ba:	b29b      	uxth	r3, r3
 801c5bc:	3b01      	subs	r3, #1
 801c5be:	b29a      	uxth	r2, r3
 801c5c0:	68fb      	ldr	r3, [r7, #12]
 801c5c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c5c4:	e011      	b.n	801c5ea <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c5c6:	f7fb fef9 	bl	80183bc <HAL_GetTick>
 801c5ca:	4602      	mov	r2, r0
 801c5cc:	693b      	ldr	r3, [r7, #16]
 801c5ce:	1ad3      	subs	r3, r2, r3
 801c5d0:	683a      	ldr	r2, [r7, #0]
 801c5d2:	429a      	cmp	r2, r3
 801c5d4:	d803      	bhi.n	801c5de <HAL_SPI_Receive+0x1cc>
 801c5d6:	683b      	ldr	r3, [r7, #0]
 801c5d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c5dc:	d102      	bne.n	801c5e4 <HAL_SPI_Receive+0x1d2>
 801c5de:	683b      	ldr	r3, [r7, #0]
 801c5e0:	2b00      	cmp	r3, #0
 801c5e2:	d102      	bne.n	801c5ea <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 801c5e4:	2303      	movs	r3, #3
 801c5e6:	75fb      	strb	r3, [r7, #23]
          goto error;
 801c5e8:	e017      	b.n	801c61a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 801c5ea:	68fb      	ldr	r3, [r7, #12]
 801c5ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c5ee:	b29b      	uxth	r3, r3
 801c5f0:	2b00      	cmp	r3, #0
 801c5f2:	d1cd      	bne.n	801c590 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c5f4:	693a      	ldr	r2, [r7, #16]
 801c5f6:	6839      	ldr	r1, [r7, #0]
 801c5f8:	68f8      	ldr	r0, [r7, #12]
 801c5fa:	f000 fb71 	bl	801cce0 <SPI_EndRxTransaction>
 801c5fe:	4603      	mov	r3, r0
 801c600:	2b00      	cmp	r3, #0
 801c602:	d002      	beq.n	801c60a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c604:	68fb      	ldr	r3, [r7, #12]
 801c606:	2220      	movs	r2, #32
 801c608:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801c60a:	68fb      	ldr	r3, [r7, #12]
 801c60c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c60e:	2b00      	cmp	r3, #0
 801c610:	d002      	beq.n	801c618 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 801c612:	2301      	movs	r3, #1
 801c614:	75fb      	strb	r3, [r7, #23]
 801c616:	e000      	b.n	801c61a <HAL_SPI_Receive+0x208>
  }

error :
 801c618:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c61a:	68fb      	ldr	r3, [r7, #12]
 801c61c:	2201      	movs	r2, #1
 801c61e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801c622:	68fb      	ldr	r3, [r7, #12]
 801c624:	2200      	movs	r2, #0
 801c626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801c62a:	7dfb      	ldrb	r3, [r7, #23]
}
 801c62c:	4618      	mov	r0, r3
 801c62e:	3718      	adds	r7, #24
 801c630:	46bd      	mov	sp, r7
 801c632:	bd80      	pop	{r7, pc}

0801c634 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801c634:	b580      	push	{r7, lr}
 801c636:	b08c      	sub	sp, #48	; 0x30
 801c638:	af00      	add	r7, sp, #0
 801c63a:	60f8      	str	r0, [r7, #12]
 801c63c:	60b9      	str	r1, [r7, #8]
 801c63e:	607a      	str	r2, [r7, #4]
 801c640:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801c642:	2301      	movs	r3, #1
 801c644:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801c646:	2300      	movs	r3, #0
 801c648:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c64c:	68fb      	ldr	r3, [r7, #12]
 801c64e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801c652:	2b01      	cmp	r3, #1
 801c654:	d101      	bne.n	801c65a <HAL_SPI_TransmitReceive+0x26>
 801c656:	2302      	movs	r3, #2
 801c658:	e18a      	b.n	801c970 <HAL_SPI_TransmitReceive+0x33c>
 801c65a:	68fb      	ldr	r3, [r7, #12]
 801c65c:	2201      	movs	r2, #1
 801c65e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c662:	f7fb feab 	bl	80183bc <HAL_GetTick>
 801c666:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801c668:	68fb      	ldr	r3, [r7, #12]
 801c66a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c66e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 801c672:	68fb      	ldr	r3, [r7, #12]
 801c674:	685b      	ldr	r3, [r3, #4]
 801c676:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 801c678:	887b      	ldrh	r3, [r7, #2]
 801c67a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801c67c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801c680:	2b01      	cmp	r3, #1
 801c682:	d00f      	beq.n	801c6a4 <HAL_SPI_TransmitReceive+0x70>
 801c684:	69fb      	ldr	r3, [r7, #28]
 801c686:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c68a:	d107      	bne.n	801c69c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801c68c:	68fb      	ldr	r3, [r7, #12]
 801c68e:	689b      	ldr	r3, [r3, #8]
 801c690:	2b00      	cmp	r3, #0
 801c692:	d103      	bne.n	801c69c <HAL_SPI_TransmitReceive+0x68>
 801c694:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801c698:	2b04      	cmp	r3, #4
 801c69a:	d003      	beq.n	801c6a4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 801c69c:	2302      	movs	r3, #2
 801c69e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801c6a2:	e15b      	b.n	801c95c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801c6a4:	68bb      	ldr	r3, [r7, #8]
 801c6a6:	2b00      	cmp	r3, #0
 801c6a8:	d005      	beq.n	801c6b6 <HAL_SPI_TransmitReceive+0x82>
 801c6aa:	687b      	ldr	r3, [r7, #4]
 801c6ac:	2b00      	cmp	r3, #0
 801c6ae:	d002      	beq.n	801c6b6 <HAL_SPI_TransmitReceive+0x82>
 801c6b0:	887b      	ldrh	r3, [r7, #2]
 801c6b2:	2b00      	cmp	r3, #0
 801c6b4:	d103      	bne.n	801c6be <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 801c6b6:	2301      	movs	r3, #1
 801c6b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801c6bc:	e14e      	b.n	801c95c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801c6be:	68fb      	ldr	r3, [r7, #12]
 801c6c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c6c4:	b2db      	uxtb	r3, r3
 801c6c6:	2b04      	cmp	r3, #4
 801c6c8:	d003      	beq.n	801c6d2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801c6ca:	68fb      	ldr	r3, [r7, #12]
 801c6cc:	2205      	movs	r2, #5
 801c6ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c6d2:	68fb      	ldr	r3, [r7, #12]
 801c6d4:	2200      	movs	r2, #0
 801c6d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801c6d8:	68fb      	ldr	r3, [r7, #12]
 801c6da:	687a      	ldr	r2, [r7, #4]
 801c6dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 801c6de:	68fb      	ldr	r3, [r7, #12]
 801c6e0:	887a      	ldrh	r2, [r7, #2]
 801c6e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 801c6e4:	68fb      	ldr	r3, [r7, #12]
 801c6e6:	887a      	ldrh	r2, [r7, #2]
 801c6e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801c6ea:	68fb      	ldr	r3, [r7, #12]
 801c6ec:	68ba      	ldr	r2, [r7, #8]
 801c6ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 801c6f0:	68fb      	ldr	r3, [r7, #12]
 801c6f2:	887a      	ldrh	r2, [r7, #2]
 801c6f4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 801c6f6:	68fb      	ldr	r3, [r7, #12]
 801c6f8:	887a      	ldrh	r2, [r7, #2]
 801c6fa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801c6fc:	68fb      	ldr	r3, [r7, #12]
 801c6fe:	2200      	movs	r2, #0
 801c700:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801c702:	68fb      	ldr	r3, [r7, #12]
 801c704:	2200      	movs	r2, #0
 801c706:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c708:	68fb      	ldr	r3, [r7, #12]
 801c70a:	681b      	ldr	r3, [r3, #0]
 801c70c:	681b      	ldr	r3, [r3, #0]
 801c70e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c712:	2b40      	cmp	r3, #64	; 0x40
 801c714:	d007      	beq.n	801c726 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c716:	68fb      	ldr	r3, [r7, #12]
 801c718:	681b      	ldr	r3, [r3, #0]
 801c71a:	681a      	ldr	r2, [r3, #0]
 801c71c:	68fb      	ldr	r3, [r7, #12]
 801c71e:	681b      	ldr	r3, [r3, #0]
 801c720:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c724:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801c726:	68fb      	ldr	r3, [r7, #12]
 801c728:	68db      	ldr	r3, [r3, #12]
 801c72a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c72e:	d178      	bne.n	801c822 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c730:	68fb      	ldr	r3, [r7, #12]
 801c732:	685b      	ldr	r3, [r3, #4]
 801c734:	2b00      	cmp	r3, #0
 801c736:	d002      	beq.n	801c73e <HAL_SPI_TransmitReceive+0x10a>
 801c738:	8b7b      	ldrh	r3, [r7, #26]
 801c73a:	2b01      	cmp	r3, #1
 801c73c:	d166      	bne.n	801c80c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c73e:	68fb      	ldr	r3, [r7, #12]
 801c740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c742:	881a      	ldrh	r2, [r3, #0]
 801c744:	68fb      	ldr	r3, [r7, #12]
 801c746:	681b      	ldr	r3, [r3, #0]
 801c748:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801c74a:	68fb      	ldr	r3, [r7, #12]
 801c74c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c74e:	1c9a      	adds	r2, r3, #2
 801c750:	68fb      	ldr	r3, [r7, #12]
 801c752:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801c754:	68fb      	ldr	r3, [r7, #12]
 801c756:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c758:	b29b      	uxth	r3, r3
 801c75a:	3b01      	subs	r3, #1
 801c75c:	b29a      	uxth	r2, r3
 801c75e:	68fb      	ldr	r3, [r7, #12]
 801c760:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c762:	e053      	b.n	801c80c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801c764:	68fb      	ldr	r3, [r7, #12]
 801c766:	681b      	ldr	r3, [r3, #0]
 801c768:	689b      	ldr	r3, [r3, #8]
 801c76a:	f003 0302 	and.w	r3, r3, #2
 801c76e:	2b02      	cmp	r3, #2
 801c770:	d11b      	bne.n	801c7aa <HAL_SPI_TransmitReceive+0x176>
 801c772:	68fb      	ldr	r3, [r7, #12]
 801c774:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c776:	b29b      	uxth	r3, r3
 801c778:	2b00      	cmp	r3, #0
 801c77a:	d016      	beq.n	801c7aa <HAL_SPI_TransmitReceive+0x176>
 801c77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c77e:	2b01      	cmp	r3, #1
 801c780:	d113      	bne.n	801c7aa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c782:	68fb      	ldr	r3, [r7, #12]
 801c784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c786:	881a      	ldrh	r2, [r3, #0]
 801c788:	68fb      	ldr	r3, [r7, #12]
 801c78a:	681b      	ldr	r3, [r3, #0]
 801c78c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801c78e:	68fb      	ldr	r3, [r7, #12]
 801c790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c792:	1c9a      	adds	r2, r3, #2
 801c794:	68fb      	ldr	r3, [r7, #12]
 801c796:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801c798:	68fb      	ldr	r3, [r7, #12]
 801c79a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c79c:	b29b      	uxth	r3, r3
 801c79e:	3b01      	subs	r3, #1
 801c7a0:	b29a      	uxth	r2, r3
 801c7a2:	68fb      	ldr	r3, [r7, #12]
 801c7a4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801c7a6:	2300      	movs	r3, #0
 801c7a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801c7aa:	68fb      	ldr	r3, [r7, #12]
 801c7ac:	681b      	ldr	r3, [r3, #0]
 801c7ae:	689b      	ldr	r3, [r3, #8]
 801c7b0:	f003 0301 	and.w	r3, r3, #1
 801c7b4:	2b01      	cmp	r3, #1
 801c7b6:	d119      	bne.n	801c7ec <HAL_SPI_TransmitReceive+0x1b8>
 801c7b8:	68fb      	ldr	r3, [r7, #12]
 801c7ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c7bc:	b29b      	uxth	r3, r3
 801c7be:	2b00      	cmp	r3, #0
 801c7c0:	d014      	beq.n	801c7ec <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801c7c2:	68fb      	ldr	r3, [r7, #12]
 801c7c4:	681b      	ldr	r3, [r3, #0]
 801c7c6:	68da      	ldr	r2, [r3, #12]
 801c7c8:	68fb      	ldr	r3, [r7, #12]
 801c7ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c7cc:	b292      	uxth	r2, r2
 801c7ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801c7d0:	68fb      	ldr	r3, [r7, #12]
 801c7d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c7d4:	1c9a      	adds	r2, r3, #2
 801c7d6:	68fb      	ldr	r3, [r7, #12]
 801c7d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801c7da:	68fb      	ldr	r3, [r7, #12]
 801c7dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c7de:	b29b      	uxth	r3, r3
 801c7e0:	3b01      	subs	r3, #1
 801c7e2:	b29a      	uxth	r2, r3
 801c7e4:	68fb      	ldr	r3, [r7, #12]
 801c7e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801c7e8:	2301      	movs	r3, #1
 801c7ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801c7ec:	f7fb fde6 	bl	80183bc <HAL_GetTick>
 801c7f0:	4602      	mov	r2, r0
 801c7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7f4:	1ad3      	subs	r3, r2, r3
 801c7f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c7f8:	429a      	cmp	r2, r3
 801c7fa:	d807      	bhi.n	801c80c <HAL_SPI_TransmitReceive+0x1d8>
 801c7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c7fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c802:	d003      	beq.n	801c80c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 801c804:	2303      	movs	r3, #3
 801c806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 801c80a:	e0a7      	b.n	801c95c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c80c:	68fb      	ldr	r3, [r7, #12]
 801c80e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c810:	b29b      	uxth	r3, r3
 801c812:	2b00      	cmp	r3, #0
 801c814:	d1a6      	bne.n	801c764 <HAL_SPI_TransmitReceive+0x130>
 801c816:	68fb      	ldr	r3, [r7, #12]
 801c818:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c81a:	b29b      	uxth	r3, r3
 801c81c:	2b00      	cmp	r3, #0
 801c81e:	d1a1      	bne.n	801c764 <HAL_SPI_TransmitReceive+0x130>
 801c820:	e07c      	b.n	801c91c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c822:	68fb      	ldr	r3, [r7, #12]
 801c824:	685b      	ldr	r3, [r3, #4]
 801c826:	2b00      	cmp	r3, #0
 801c828:	d002      	beq.n	801c830 <HAL_SPI_TransmitReceive+0x1fc>
 801c82a:	8b7b      	ldrh	r3, [r7, #26]
 801c82c:	2b01      	cmp	r3, #1
 801c82e:	d16b      	bne.n	801c908 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801c830:	68fb      	ldr	r3, [r7, #12]
 801c832:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c834:	68fb      	ldr	r3, [r7, #12]
 801c836:	681b      	ldr	r3, [r3, #0]
 801c838:	330c      	adds	r3, #12
 801c83a:	7812      	ldrb	r2, [r2, #0]
 801c83c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801c83e:	68fb      	ldr	r3, [r7, #12]
 801c840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c842:	1c5a      	adds	r2, r3, #1
 801c844:	68fb      	ldr	r3, [r7, #12]
 801c846:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801c848:	68fb      	ldr	r3, [r7, #12]
 801c84a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c84c:	b29b      	uxth	r3, r3
 801c84e:	3b01      	subs	r3, #1
 801c850:	b29a      	uxth	r2, r3
 801c852:	68fb      	ldr	r3, [r7, #12]
 801c854:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c856:	e057      	b.n	801c908 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801c858:	68fb      	ldr	r3, [r7, #12]
 801c85a:	681b      	ldr	r3, [r3, #0]
 801c85c:	689b      	ldr	r3, [r3, #8]
 801c85e:	f003 0302 	and.w	r3, r3, #2
 801c862:	2b02      	cmp	r3, #2
 801c864:	d11c      	bne.n	801c8a0 <HAL_SPI_TransmitReceive+0x26c>
 801c866:	68fb      	ldr	r3, [r7, #12]
 801c868:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c86a:	b29b      	uxth	r3, r3
 801c86c:	2b00      	cmp	r3, #0
 801c86e:	d017      	beq.n	801c8a0 <HAL_SPI_TransmitReceive+0x26c>
 801c870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c872:	2b01      	cmp	r3, #1
 801c874:	d114      	bne.n	801c8a0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801c876:	68fb      	ldr	r3, [r7, #12]
 801c878:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c87a:	68fb      	ldr	r3, [r7, #12]
 801c87c:	681b      	ldr	r3, [r3, #0]
 801c87e:	330c      	adds	r3, #12
 801c880:	7812      	ldrb	r2, [r2, #0]
 801c882:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801c884:	68fb      	ldr	r3, [r7, #12]
 801c886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c888:	1c5a      	adds	r2, r3, #1
 801c88a:	68fb      	ldr	r3, [r7, #12]
 801c88c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801c88e:	68fb      	ldr	r3, [r7, #12]
 801c890:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c892:	b29b      	uxth	r3, r3
 801c894:	3b01      	subs	r3, #1
 801c896:	b29a      	uxth	r2, r3
 801c898:	68fb      	ldr	r3, [r7, #12]
 801c89a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801c89c:	2300      	movs	r3, #0
 801c89e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801c8a0:	68fb      	ldr	r3, [r7, #12]
 801c8a2:	681b      	ldr	r3, [r3, #0]
 801c8a4:	689b      	ldr	r3, [r3, #8]
 801c8a6:	f003 0301 	and.w	r3, r3, #1
 801c8aa:	2b01      	cmp	r3, #1
 801c8ac:	d119      	bne.n	801c8e2 <HAL_SPI_TransmitReceive+0x2ae>
 801c8ae:	68fb      	ldr	r3, [r7, #12]
 801c8b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c8b2:	b29b      	uxth	r3, r3
 801c8b4:	2b00      	cmp	r3, #0
 801c8b6:	d014      	beq.n	801c8e2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 801c8b8:	68fb      	ldr	r3, [r7, #12]
 801c8ba:	681b      	ldr	r3, [r3, #0]
 801c8bc:	68da      	ldr	r2, [r3, #12]
 801c8be:	68fb      	ldr	r3, [r7, #12]
 801c8c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c8c2:	b2d2      	uxtb	r2, r2
 801c8c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 801c8c6:	68fb      	ldr	r3, [r7, #12]
 801c8c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c8ca:	1c5a      	adds	r2, r3, #1
 801c8cc:	68fb      	ldr	r3, [r7, #12]
 801c8ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801c8d0:	68fb      	ldr	r3, [r7, #12]
 801c8d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c8d4:	b29b      	uxth	r3, r3
 801c8d6:	3b01      	subs	r3, #1
 801c8d8:	b29a      	uxth	r2, r3
 801c8da:	68fb      	ldr	r3, [r7, #12]
 801c8dc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801c8de:	2301      	movs	r3, #1
 801c8e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801c8e2:	f7fb fd6b 	bl	80183bc <HAL_GetTick>
 801c8e6:	4602      	mov	r2, r0
 801c8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c8ea:	1ad3      	subs	r3, r2, r3
 801c8ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c8ee:	429a      	cmp	r2, r3
 801c8f0:	d803      	bhi.n	801c8fa <HAL_SPI_TransmitReceive+0x2c6>
 801c8f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c8f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c8f8:	d102      	bne.n	801c900 <HAL_SPI_TransmitReceive+0x2cc>
 801c8fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c8fc:	2b00      	cmp	r3, #0
 801c8fe:	d103      	bne.n	801c908 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 801c900:	2303      	movs	r3, #3
 801c902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 801c906:	e029      	b.n	801c95c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c908:	68fb      	ldr	r3, [r7, #12]
 801c90a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c90c:	b29b      	uxth	r3, r3
 801c90e:	2b00      	cmp	r3, #0
 801c910:	d1a2      	bne.n	801c858 <HAL_SPI_TransmitReceive+0x224>
 801c912:	68fb      	ldr	r3, [r7, #12]
 801c914:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c916:	b29b      	uxth	r3, r3
 801c918:	2b00      	cmp	r3, #0
 801c91a:	d19d      	bne.n	801c858 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c91c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c91e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801c920:	68f8      	ldr	r0, [r7, #12]
 801c922:	f000 fa43 	bl	801cdac <SPI_EndRxTxTransaction>
 801c926:	4603      	mov	r3, r0
 801c928:	2b00      	cmp	r3, #0
 801c92a:	d006      	beq.n	801c93a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 801c92c:	2301      	movs	r3, #1
 801c92e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c932:	68fb      	ldr	r3, [r7, #12]
 801c934:	2220      	movs	r2, #32
 801c936:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 801c938:	e010      	b.n	801c95c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801c93a:	68fb      	ldr	r3, [r7, #12]
 801c93c:	689b      	ldr	r3, [r3, #8]
 801c93e:	2b00      	cmp	r3, #0
 801c940:	d10b      	bne.n	801c95a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801c942:	2300      	movs	r3, #0
 801c944:	617b      	str	r3, [r7, #20]
 801c946:	68fb      	ldr	r3, [r7, #12]
 801c948:	681b      	ldr	r3, [r3, #0]
 801c94a:	68db      	ldr	r3, [r3, #12]
 801c94c:	617b      	str	r3, [r7, #20]
 801c94e:	68fb      	ldr	r3, [r7, #12]
 801c950:	681b      	ldr	r3, [r3, #0]
 801c952:	689b      	ldr	r3, [r3, #8]
 801c954:	617b      	str	r3, [r7, #20]
 801c956:	697b      	ldr	r3, [r7, #20]
 801c958:	e000      	b.n	801c95c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 801c95a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c95c:	68fb      	ldr	r3, [r7, #12]
 801c95e:	2201      	movs	r2, #1
 801c960:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801c964:	68fb      	ldr	r3, [r7, #12]
 801c966:	2200      	movs	r2, #0
 801c968:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801c96c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 801c970:	4618      	mov	r0, r3
 801c972:	3730      	adds	r7, #48	; 0x30
 801c974:	46bd      	mov	sp, r7
 801c976:	bd80      	pop	{r7, pc}

0801c978 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801c978:	b580      	push	{r7, lr}
 801c97a:	b088      	sub	sp, #32
 801c97c:	af00      	add	r7, sp, #0
 801c97e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 801c980:	687b      	ldr	r3, [r7, #4]
 801c982:	681b      	ldr	r3, [r3, #0]
 801c984:	685b      	ldr	r3, [r3, #4]
 801c986:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 801c988:	687b      	ldr	r3, [r7, #4]
 801c98a:	681b      	ldr	r3, [r3, #0]
 801c98c:	689b      	ldr	r3, [r3, #8]
 801c98e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 801c990:	69bb      	ldr	r3, [r7, #24]
 801c992:	099b      	lsrs	r3, r3, #6
 801c994:	f003 0301 	and.w	r3, r3, #1
 801c998:	2b00      	cmp	r3, #0
 801c99a:	d10f      	bne.n	801c9bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801c99c:	69bb      	ldr	r3, [r7, #24]
 801c99e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 801c9a2:	2b00      	cmp	r3, #0
 801c9a4:	d00a      	beq.n	801c9bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801c9a6:	69fb      	ldr	r3, [r7, #28]
 801c9a8:	099b      	lsrs	r3, r3, #6
 801c9aa:	f003 0301 	and.w	r3, r3, #1
 801c9ae:	2b00      	cmp	r3, #0
 801c9b0:	d004      	beq.n	801c9bc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 801c9b2:	687b      	ldr	r3, [r7, #4]
 801c9b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c9b6:	6878      	ldr	r0, [r7, #4]
 801c9b8:	4798      	blx	r3
    return;
 801c9ba:	e0d7      	b.n	801cb6c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 801c9bc:	69bb      	ldr	r3, [r7, #24]
 801c9be:	085b      	lsrs	r3, r3, #1
 801c9c0:	f003 0301 	and.w	r3, r3, #1
 801c9c4:	2b00      	cmp	r3, #0
 801c9c6:	d00a      	beq.n	801c9de <HAL_SPI_IRQHandler+0x66>
 801c9c8:	69fb      	ldr	r3, [r7, #28]
 801c9ca:	09db      	lsrs	r3, r3, #7
 801c9cc:	f003 0301 	and.w	r3, r3, #1
 801c9d0:	2b00      	cmp	r3, #0
 801c9d2:	d004      	beq.n	801c9de <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 801c9d4:	687b      	ldr	r3, [r7, #4]
 801c9d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c9d8:	6878      	ldr	r0, [r7, #4]
 801c9da:	4798      	blx	r3
    return;
 801c9dc:	e0c6      	b.n	801cb6c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801c9de:	69bb      	ldr	r3, [r7, #24]
 801c9e0:	095b      	lsrs	r3, r3, #5
 801c9e2:	f003 0301 	and.w	r3, r3, #1
 801c9e6:	2b00      	cmp	r3, #0
 801c9e8:	d10c      	bne.n	801ca04 <HAL_SPI_IRQHandler+0x8c>
 801c9ea:	69bb      	ldr	r3, [r7, #24]
 801c9ec:	099b      	lsrs	r3, r3, #6
 801c9ee:	f003 0301 	and.w	r3, r3, #1
 801c9f2:	2b00      	cmp	r3, #0
 801c9f4:	d106      	bne.n	801ca04 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 801c9f6:	69bb      	ldr	r3, [r7, #24]
 801c9f8:	0a1b      	lsrs	r3, r3, #8
 801c9fa:	f003 0301 	and.w	r3, r3, #1
 801c9fe:	2b00      	cmp	r3, #0
 801ca00:	f000 80b4 	beq.w	801cb6c <HAL_SPI_IRQHandler+0x1f4>
 801ca04:	69fb      	ldr	r3, [r7, #28]
 801ca06:	095b      	lsrs	r3, r3, #5
 801ca08:	f003 0301 	and.w	r3, r3, #1
 801ca0c:	2b00      	cmp	r3, #0
 801ca0e:	f000 80ad 	beq.w	801cb6c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801ca12:	69bb      	ldr	r3, [r7, #24]
 801ca14:	099b      	lsrs	r3, r3, #6
 801ca16:	f003 0301 	and.w	r3, r3, #1
 801ca1a:	2b00      	cmp	r3, #0
 801ca1c:	d023      	beq.n	801ca66 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801ca1e:	687b      	ldr	r3, [r7, #4]
 801ca20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801ca24:	b2db      	uxtb	r3, r3
 801ca26:	2b03      	cmp	r3, #3
 801ca28:	d011      	beq.n	801ca4e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801ca2a:	687b      	ldr	r3, [r7, #4]
 801ca2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ca2e:	f043 0204 	orr.w	r2, r3, #4
 801ca32:	687b      	ldr	r3, [r7, #4]
 801ca34:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801ca36:	2300      	movs	r3, #0
 801ca38:	617b      	str	r3, [r7, #20]
 801ca3a:	687b      	ldr	r3, [r7, #4]
 801ca3c:	681b      	ldr	r3, [r3, #0]
 801ca3e:	68db      	ldr	r3, [r3, #12]
 801ca40:	617b      	str	r3, [r7, #20]
 801ca42:	687b      	ldr	r3, [r7, #4]
 801ca44:	681b      	ldr	r3, [r3, #0]
 801ca46:	689b      	ldr	r3, [r3, #8]
 801ca48:	617b      	str	r3, [r7, #20]
 801ca4a:	697b      	ldr	r3, [r7, #20]
 801ca4c:	e00b      	b.n	801ca66 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801ca4e:	2300      	movs	r3, #0
 801ca50:	613b      	str	r3, [r7, #16]
 801ca52:	687b      	ldr	r3, [r7, #4]
 801ca54:	681b      	ldr	r3, [r3, #0]
 801ca56:	68db      	ldr	r3, [r3, #12]
 801ca58:	613b      	str	r3, [r7, #16]
 801ca5a:	687b      	ldr	r3, [r7, #4]
 801ca5c:	681b      	ldr	r3, [r3, #0]
 801ca5e:	689b      	ldr	r3, [r3, #8]
 801ca60:	613b      	str	r3, [r7, #16]
 801ca62:	693b      	ldr	r3, [r7, #16]
        return;
 801ca64:	e082      	b.n	801cb6c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 801ca66:	69bb      	ldr	r3, [r7, #24]
 801ca68:	095b      	lsrs	r3, r3, #5
 801ca6a:	f003 0301 	and.w	r3, r3, #1
 801ca6e:	2b00      	cmp	r3, #0
 801ca70:	d014      	beq.n	801ca9c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801ca72:	687b      	ldr	r3, [r7, #4]
 801ca74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ca76:	f043 0201 	orr.w	r2, r3, #1
 801ca7a:	687b      	ldr	r3, [r7, #4]
 801ca7c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801ca7e:	2300      	movs	r3, #0
 801ca80:	60fb      	str	r3, [r7, #12]
 801ca82:	687b      	ldr	r3, [r7, #4]
 801ca84:	681b      	ldr	r3, [r3, #0]
 801ca86:	689b      	ldr	r3, [r3, #8]
 801ca88:	60fb      	str	r3, [r7, #12]
 801ca8a:	687b      	ldr	r3, [r7, #4]
 801ca8c:	681b      	ldr	r3, [r3, #0]
 801ca8e:	681a      	ldr	r2, [r3, #0]
 801ca90:	687b      	ldr	r3, [r7, #4]
 801ca92:	681b      	ldr	r3, [r3, #0]
 801ca94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801ca98:	601a      	str	r2, [r3, #0]
 801ca9a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 801ca9c:	69bb      	ldr	r3, [r7, #24]
 801ca9e:	0a1b      	lsrs	r3, r3, #8
 801caa0:	f003 0301 	and.w	r3, r3, #1
 801caa4:	2b00      	cmp	r3, #0
 801caa6:	d00c      	beq.n	801cac2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801caa8:	687b      	ldr	r3, [r7, #4]
 801caaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801caac:	f043 0208 	orr.w	r2, r3, #8
 801cab0:	687b      	ldr	r3, [r7, #4]
 801cab2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 801cab4:	2300      	movs	r3, #0
 801cab6:	60bb      	str	r3, [r7, #8]
 801cab8:	687b      	ldr	r3, [r7, #4]
 801caba:	681b      	ldr	r3, [r3, #0]
 801cabc:	689b      	ldr	r3, [r3, #8]
 801cabe:	60bb      	str	r3, [r7, #8]
 801cac0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801cac2:	687b      	ldr	r3, [r7, #4]
 801cac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cac6:	2b00      	cmp	r3, #0
 801cac8:	d04f      	beq.n	801cb6a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 801caca:	687b      	ldr	r3, [r7, #4]
 801cacc:	681b      	ldr	r3, [r3, #0]
 801cace:	685a      	ldr	r2, [r3, #4]
 801cad0:	687b      	ldr	r3, [r7, #4]
 801cad2:	681b      	ldr	r3, [r3, #0]
 801cad4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801cad8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 801cada:	687b      	ldr	r3, [r7, #4]
 801cadc:	2201      	movs	r2, #1
 801cade:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 801cae2:	69fb      	ldr	r3, [r7, #28]
 801cae4:	f003 0302 	and.w	r3, r3, #2
 801cae8:	2b00      	cmp	r3, #0
 801caea:	d104      	bne.n	801caf6 <HAL_SPI_IRQHandler+0x17e>
 801caec:	69fb      	ldr	r3, [r7, #28]
 801caee:	f003 0301 	and.w	r3, r3, #1
 801caf2:	2b00      	cmp	r3, #0
 801caf4:	d034      	beq.n	801cb60 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 801caf6:	687b      	ldr	r3, [r7, #4]
 801caf8:	681b      	ldr	r3, [r3, #0]
 801cafa:	685a      	ldr	r2, [r3, #4]
 801cafc:	687b      	ldr	r3, [r7, #4]
 801cafe:	681b      	ldr	r3, [r3, #0]
 801cb00:	f022 0203 	bic.w	r2, r2, #3
 801cb04:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801cb06:	687b      	ldr	r3, [r7, #4]
 801cb08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cb0a:	2b00      	cmp	r3, #0
 801cb0c:	d011      	beq.n	801cb32 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801cb0e:	687b      	ldr	r3, [r7, #4]
 801cb10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cb12:	4a18      	ldr	r2, [pc, #96]	; (801cb74 <HAL_SPI_IRQHandler+0x1fc>)
 801cb14:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801cb16:	687b      	ldr	r3, [r7, #4]
 801cb18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cb1a:	4618      	mov	r0, r3
 801cb1c:	f7fc f946 	bl	8018dac <HAL_DMA_Abort_IT>
 801cb20:	4603      	mov	r3, r0
 801cb22:	2b00      	cmp	r3, #0
 801cb24:	d005      	beq.n	801cb32 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801cb26:	687b      	ldr	r3, [r7, #4]
 801cb28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cb2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801cb2e:	687b      	ldr	r3, [r7, #4]
 801cb30:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801cb32:	687b      	ldr	r3, [r7, #4]
 801cb34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cb36:	2b00      	cmp	r3, #0
 801cb38:	d016      	beq.n	801cb68 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801cb3a:	687b      	ldr	r3, [r7, #4]
 801cb3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cb3e:	4a0d      	ldr	r2, [pc, #52]	; (801cb74 <HAL_SPI_IRQHandler+0x1fc>)
 801cb40:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801cb42:	687b      	ldr	r3, [r7, #4]
 801cb44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cb46:	4618      	mov	r0, r3
 801cb48:	f7fc f930 	bl	8018dac <HAL_DMA_Abort_IT>
 801cb4c:	4603      	mov	r3, r0
 801cb4e:	2b00      	cmp	r3, #0
 801cb50:	d00a      	beq.n	801cb68 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801cb52:	687b      	ldr	r3, [r7, #4]
 801cb54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cb56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801cb5a:	687b      	ldr	r3, [r7, #4]
 801cb5c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 801cb5e:	e003      	b.n	801cb68 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 801cb60:	6878      	ldr	r0, [r7, #4]
 801cb62:	f000 f809 	bl	801cb78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801cb66:	e000      	b.n	801cb6a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 801cb68:	bf00      	nop
    return;
 801cb6a:	bf00      	nop
  }
}
 801cb6c:	3720      	adds	r7, #32
 801cb6e:	46bd      	mov	sp, r7
 801cb70:	bd80      	pop	{r7, pc}
 801cb72:	bf00      	nop
 801cb74:	0801cba9 	.word	0x0801cba9

0801cb78 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 801cb78:	b480      	push	{r7}
 801cb7a:	b083      	sub	sp, #12
 801cb7c:	af00      	add	r7, sp, #0
 801cb7e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 801cb80:	bf00      	nop
 801cb82:	370c      	adds	r7, #12
 801cb84:	46bd      	mov	sp, r7
 801cb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb8a:	4770      	bx	lr

0801cb8c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 801cb8c:	b480      	push	{r7}
 801cb8e:	b083      	sub	sp, #12
 801cb90:	af00      	add	r7, sp, #0
 801cb92:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 801cb94:	687b      	ldr	r3, [r7, #4]
 801cb96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801cb9a:	b2db      	uxtb	r3, r3
}
 801cb9c:	4618      	mov	r0, r3
 801cb9e:	370c      	adds	r7, #12
 801cba0:	46bd      	mov	sp, r7
 801cba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cba6:	4770      	bx	lr

0801cba8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801cba8:	b580      	push	{r7, lr}
 801cbaa:	b084      	sub	sp, #16
 801cbac:	af00      	add	r7, sp, #0
 801cbae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801cbb0:	687b      	ldr	r3, [r7, #4]
 801cbb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cbb4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 801cbb6:	68fb      	ldr	r3, [r7, #12]
 801cbb8:	2200      	movs	r2, #0
 801cbba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 801cbbc:	68fb      	ldr	r3, [r7, #12]
 801cbbe:	2200      	movs	r2, #0
 801cbc0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801cbc2:	68f8      	ldr	r0, [r7, #12]
 801cbc4:	f7ff ffd8 	bl	801cb78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801cbc8:	bf00      	nop
 801cbca:	3710      	adds	r7, #16
 801cbcc:	46bd      	mov	sp, r7
 801cbce:	bd80      	pop	{r7, pc}

0801cbd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801cbd0:	b580      	push	{r7, lr}
 801cbd2:	b088      	sub	sp, #32
 801cbd4:	af00      	add	r7, sp, #0
 801cbd6:	60f8      	str	r0, [r7, #12]
 801cbd8:	60b9      	str	r1, [r7, #8]
 801cbda:	603b      	str	r3, [r7, #0]
 801cbdc:	4613      	mov	r3, r2
 801cbde:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801cbe0:	f7fb fbec 	bl	80183bc <HAL_GetTick>
 801cbe4:	4602      	mov	r2, r0
 801cbe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cbe8:	1a9b      	subs	r3, r3, r2
 801cbea:	683a      	ldr	r2, [r7, #0]
 801cbec:	4413      	add	r3, r2
 801cbee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801cbf0:	f7fb fbe4 	bl	80183bc <HAL_GetTick>
 801cbf4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801cbf6:	4b39      	ldr	r3, [pc, #228]	; (801ccdc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801cbf8:	681b      	ldr	r3, [r3, #0]
 801cbfa:	015b      	lsls	r3, r3, #5
 801cbfc:	0d1b      	lsrs	r3, r3, #20
 801cbfe:	69fa      	ldr	r2, [r7, #28]
 801cc00:	fb02 f303 	mul.w	r3, r2, r3
 801cc04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801cc06:	e054      	b.n	801ccb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801cc08:	683b      	ldr	r3, [r7, #0]
 801cc0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cc0e:	d050      	beq.n	801ccb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801cc10:	f7fb fbd4 	bl	80183bc <HAL_GetTick>
 801cc14:	4602      	mov	r2, r0
 801cc16:	69bb      	ldr	r3, [r7, #24]
 801cc18:	1ad3      	subs	r3, r2, r3
 801cc1a:	69fa      	ldr	r2, [r7, #28]
 801cc1c:	429a      	cmp	r2, r3
 801cc1e:	d902      	bls.n	801cc26 <SPI_WaitFlagStateUntilTimeout+0x56>
 801cc20:	69fb      	ldr	r3, [r7, #28]
 801cc22:	2b00      	cmp	r3, #0
 801cc24:	d13d      	bne.n	801cca2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801cc26:	68fb      	ldr	r3, [r7, #12]
 801cc28:	681b      	ldr	r3, [r3, #0]
 801cc2a:	685a      	ldr	r2, [r3, #4]
 801cc2c:	68fb      	ldr	r3, [r7, #12]
 801cc2e:	681b      	ldr	r3, [r3, #0]
 801cc30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801cc34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801cc36:	68fb      	ldr	r3, [r7, #12]
 801cc38:	685b      	ldr	r3, [r3, #4]
 801cc3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801cc3e:	d111      	bne.n	801cc64 <SPI_WaitFlagStateUntilTimeout+0x94>
 801cc40:	68fb      	ldr	r3, [r7, #12]
 801cc42:	689b      	ldr	r3, [r3, #8]
 801cc44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801cc48:	d004      	beq.n	801cc54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801cc4a:	68fb      	ldr	r3, [r7, #12]
 801cc4c:	689b      	ldr	r3, [r3, #8]
 801cc4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cc52:	d107      	bne.n	801cc64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801cc54:	68fb      	ldr	r3, [r7, #12]
 801cc56:	681b      	ldr	r3, [r3, #0]
 801cc58:	681a      	ldr	r2, [r3, #0]
 801cc5a:	68fb      	ldr	r3, [r7, #12]
 801cc5c:	681b      	ldr	r3, [r3, #0]
 801cc5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801cc62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801cc64:	68fb      	ldr	r3, [r7, #12]
 801cc66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cc68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801cc6c:	d10f      	bne.n	801cc8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801cc6e:	68fb      	ldr	r3, [r7, #12]
 801cc70:	681b      	ldr	r3, [r3, #0]
 801cc72:	681a      	ldr	r2, [r3, #0]
 801cc74:	68fb      	ldr	r3, [r7, #12]
 801cc76:	681b      	ldr	r3, [r3, #0]
 801cc78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801cc7c:	601a      	str	r2, [r3, #0]
 801cc7e:	68fb      	ldr	r3, [r7, #12]
 801cc80:	681b      	ldr	r3, [r3, #0]
 801cc82:	681a      	ldr	r2, [r3, #0]
 801cc84:	68fb      	ldr	r3, [r7, #12]
 801cc86:	681b      	ldr	r3, [r3, #0]
 801cc88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801cc8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801cc8e:	68fb      	ldr	r3, [r7, #12]
 801cc90:	2201      	movs	r2, #1
 801cc92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801cc96:	68fb      	ldr	r3, [r7, #12]
 801cc98:	2200      	movs	r2, #0
 801cc9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 801cc9e:	2303      	movs	r3, #3
 801cca0:	e017      	b.n	801ccd2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 801cca2:	697b      	ldr	r3, [r7, #20]
 801cca4:	2b00      	cmp	r3, #0
 801cca6:	d101      	bne.n	801ccac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801cca8:	2300      	movs	r3, #0
 801ccaa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801ccac:	697b      	ldr	r3, [r7, #20]
 801ccae:	3b01      	subs	r3, #1
 801ccb0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801ccb2:	68fb      	ldr	r3, [r7, #12]
 801ccb4:	681b      	ldr	r3, [r3, #0]
 801ccb6:	689a      	ldr	r2, [r3, #8]
 801ccb8:	68bb      	ldr	r3, [r7, #8]
 801ccba:	4013      	ands	r3, r2
 801ccbc:	68ba      	ldr	r2, [r7, #8]
 801ccbe:	429a      	cmp	r2, r3
 801ccc0:	bf0c      	ite	eq
 801ccc2:	2301      	moveq	r3, #1
 801ccc4:	2300      	movne	r3, #0
 801ccc6:	b2db      	uxtb	r3, r3
 801ccc8:	461a      	mov	r2, r3
 801ccca:	79fb      	ldrb	r3, [r7, #7]
 801cccc:	429a      	cmp	r2, r3
 801ccce:	d19b      	bne.n	801cc08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801ccd0:	2300      	movs	r3, #0
}
 801ccd2:	4618      	mov	r0, r3
 801ccd4:	3720      	adds	r7, #32
 801ccd6:	46bd      	mov	sp, r7
 801ccd8:	bd80      	pop	{r7, pc}
 801ccda:	bf00      	nop
 801ccdc:	20000588 	.word	0x20000588

0801cce0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801cce0:	b580      	push	{r7, lr}
 801cce2:	b086      	sub	sp, #24
 801cce4:	af02      	add	r7, sp, #8
 801cce6:	60f8      	str	r0, [r7, #12]
 801cce8:	60b9      	str	r1, [r7, #8]
 801ccea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801ccec:	68fb      	ldr	r3, [r7, #12]
 801ccee:	685b      	ldr	r3, [r3, #4]
 801ccf0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801ccf4:	d111      	bne.n	801cd1a <SPI_EndRxTransaction+0x3a>
 801ccf6:	68fb      	ldr	r3, [r7, #12]
 801ccf8:	689b      	ldr	r3, [r3, #8]
 801ccfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801ccfe:	d004      	beq.n	801cd0a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801cd00:	68fb      	ldr	r3, [r7, #12]
 801cd02:	689b      	ldr	r3, [r3, #8]
 801cd04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cd08:	d107      	bne.n	801cd1a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801cd0a:	68fb      	ldr	r3, [r7, #12]
 801cd0c:	681b      	ldr	r3, [r3, #0]
 801cd0e:	681a      	ldr	r2, [r3, #0]
 801cd10:	68fb      	ldr	r3, [r7, #12]
 801cd12:	681b      	ldr	r3, [r3, #0]
 801cd14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801cd18:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801cd1a:	68fb      	ldr	r3, [r7, #12]
 801cd1c:	685b      	ldr	r3, [r3, #4]
 801cd1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801cd22:	d12a      	bne.n	801cd7a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 801cd24:	68fb      	ldr	r3, [r7, #12]
 801cd26:	689b      	ldr	r3, [r3, #8]
 801cd28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cd2c:	d012      	beq.n	801cd54 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801cd2e:	687b      	ldr	r3, [r7, #4]
 801cd30:	9300      	str	r3, [sp, #0]
 801cd32:	68bb      	ldr	r3, [r7, #8]
 801cd34:	2200      	movs	r2, #0
 801cd36:	2180      	movs	r1, #128	; 0x80
 801cd38:	68f8      	ldr	r0, [r7, #12]
 801cd3a:	f7ff ff49 	bl	801cbd0 <SPI_WaitFlagStateUntilTimeout>
 801cd3e:	4603      	mov	r3, r0
 801cd40:	2b00      	cmp	r3, #0
 801cd42:	d02d      	beq.n	801cda0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801cd44:	68fb      	ldr	r3, [r7, #12]
 801cd46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cd48:	f043 0220 	orr.w	r2, r3, #32
 801cd4c:	68fb      	ldr	r3, [r7, #12]
 801cd4e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801cd50:	2303      	movs	r3, #3
 801cd52:	e026      	b.n	801cda2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801cd54:	687b      	ldr	r3, [r7, #4]
 801cd56:	9300      	str	r3, [sp, #0]
 801cd58:	68bb      	ldr	r3, [r7, #8]
 801cd5a:	2200      	movs	r2, #0
 801cd5c:	2101      	movs	r1, #1
 801cd5e:	68f8      	ldr	r0, [r7, #12]
 801cd60:	f7ff ff36 	bl	801cbd0 <SPI_WaitFlagStateUntilTimeout>
 801cd64:	4603      	mov	r3, r0
 801cd66:	2b00      	cmp	r3, #0
 801cd68:	d01a      	beq.n	801cda0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801cd6a:	68fb      	ldr	r3, [r7, #12]
 801cd6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cd6e:	f043 0220 	orr.w	r2, r3, #32
 801cd72:	68fb      	ldr	r3, [r7, #12]
 801cd74:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801cd76:	2303      	movs	r3, #3
 801cd78:	e013      	b.n	801cda2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801cd7a:	687b      	ldr	r3, [r7, #4]
 801cd7c:	9300      	str	r3, [sp, #0]
 801cd7e:	68bb      	ldr	r3, [r7, #8]
 801cd80:	2200      	movs	r2, #0
 801cd82:	2101      	movs	r1, #1
 801cd84:	68f8      	ldr	r0, [r7, #12]
 801cd86:	f7ff ff23 	bl	801cbd0 <SPI_WaitFlagStateUntilTimeout>
 801cd8a:	4603      	mov	r3, r0
 801cd8c:	2b00      	cmp	r3, #0
 801cd8e:	d007      	beq.n	801cda0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801cd90:	68fb      	ldr	r3, [r7, #12]
 801cd92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cd94:	f043 0220 	orr.w	r2, r3, #32
 801cd98:	68fb      	ldr	r3, [r7, #12]
 801cd9a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801cd9c:	2303      	movs	r3, #3
 801cd9e:	e000      	b.n	801cda2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 801cda0:	2300      	movs	r3, #0
}
 801cda2:	4618      	mov	r0, r3
 801cda4:	3710      	adds	r7, #16
 801cda6:	46bd      	mov	sp, r7
 801cda8:	bd80      	pop	{r7, pc}
	...

0801cdac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801cdac:	b580      	push	{r7, lr}
 801cdae:	b088      	sub	sp, #32
 801cdb0:	af02      	add	r7, sp, #8
 801cdb2:	60f8      	str	r0, [r7, #12]
 801cdb4:	60b9      	str	r1, [r7, #8]
 801cdb6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801cdb8:	4b1b      	ldr	r3, [pc, #108]	; (801ce28 <SPI_EndRxTxTransaction+0x7c>)
 801cdba:	681b      	ldr	r3, [r3, #0]
 801cdbc:	4a1b      	ldr	r2, [pc, #108]	; (801ce2c <SPI_EndRxTxTransaction+0x80>)
 801cdbe:	fba2 2303 	umull	r2, r3, r2, r3
 801cdc2:	0d5b      	lsrs	r3, r3, #21
 801cdc4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801cdc8:	fb02 f303 	mul.w	r3, r2, r3
 801cdcc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801cdce:	68fb      	ldr	r3, [r7, #12]
 801cdd0:	685b      	ldr	r3, [r3, #4]
 801cdd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801cdd6:	d112      	bne.n	801cdfe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801cdd8:	687b      	ldr	r3, [r7, #4]
 801cdda:	9300      	str	r3, [sp, #0]
 801cddc:	68bb      	ldr	r3, [r7, #8]
 801cdde:	2200      	movs	r2, #0
 801cde0:	2180      	movs	r1, #128	; 0x80
 801cde2:	68f8      	ldr	r0, [r7, #12]
 801cde4:	f7ff fef4 	bl	801cbd0 <SPI_WaitFlagStateUntilTimeout>
 801cde8:	4603      	mov	r3, r0
 801cdea:	2b00      	cmp	r3, #0
 801cdec:	d016      	beq.n	801ce1c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801cdee:	68fb      	ldr	r3, [r7, #12]
 801cdf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cdf2:	f043 0220 	orr.w	r2, r3, #32
 801cdf6:	68fb      	ldr	r3, [r7, #12]
 801cdf8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801cdfa:	2303      	movs	r3, #3
 801cdfc:	e00f      	b.n	801ce1e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801cdfe:	697b      	ldr	r3, [r7, #20]
 801ce00:	2b00      	cmp	r3, #0
 801ce02:	d00a      	beq.n	801ce1a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 801ce04:	697b      	ldr	r3, [r7, #20]
 801ce06:	3b01      	subs	r3, #1
 801ce08:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801ce0a:	68fb      	ldr	r3, [r7, #12]
 801ce0c:	681b      	ldr	r3, [r3, #0]
 801ce0e:	689b      	ldr	r3, [r3, #8]
 801ce10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ce14:	2b80      	cmp	r3, #128	; 0x80
 801ce16:	d0f2      	beq.n	801cdfe <SPI_EndRxTxTransaction+0x52>
 801ce18:	e000      	b.n	801ce1c <SPI_EndRxTxTransaction+0x70>
        break;
 801ce1a:	bf00      	nop
  }

  return HAL_OK;
 801ce1c:	2300      	movs	r3, #0
}
 801ce1e:	4618      	mov	r0, r3
 801ce20:	3718      	adds	r7, #24
 801ce22:	46bd      	mov	sp, r7
 801ce24:	bd80      	pop	{r7, pc}
 801ce26:	bf00      	nop
 801ce28:	20000588 	.word	0x20000588
 801ce2c:	165e9f81 	.word	0x165e9f81

0801ce30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801ce30:	b580      	push	{r7, lr}
 801ce32:	b082      	sub	sp, #8
 801ce34:	af00      	add	r7, sp, #0
 801ce36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801ce38:	687b      	ldr	r3, [r7, #4]
 801ce3a:	2b00      	cmp	r3, #0
 801ce3c:	d101      	bne.n	801ce42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801ce3e:	2301      	movs	r3, #1
 801ce40:	e041      	b.n	801cec6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801ce42:	687b      	ldr	r3, [r7, #4]
 801ce44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ce48:	b2db      	uxtb	r3, r3
 801ce4a:	2b00      	cmp	r3, #0
 801ce4c:	d106      	bne.n	801ce5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801ce4e:	687b      	ldr	r3, [r7, #4]
 801ce50:	2200      	movs	r2, #0
 801ce52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801ce56:	6878      	ldr	r0, [r7, #4]
 801ce58:	f7fb f908 	bl	801806c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ce5c:	687b      	ldr	r3, [r7, #4]
 801ce5e:	2202      	movs	r2, #2
 801ce60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801ce64:	687b      	ldr	r3, [r7, #4]
 801ce66:	681a      	ldr	r2, [r3, #0]
 801ce68:	687b      	ldr	r3, [r7, #4]
 801ce6a:	3304      	adds	r3, #4
 801ce6c:	4619      	mov	r1, r3
 801ce6e:	4610      	mov	r0, r2
 801ce70:	f000 faf2 	bl	801d458 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801ce74:	687b      	ldr	r3, [r7, #4]
 801ce76:	2201      	movs	r2, #1
 801ce78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ce7c:	687b      	ldr	r3, [r7, #4]
 801ce7e:	2201      	movs	r2, #1
 801ce80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801ce84:	687b      	ldr	r3, [r7, #4]
 801ce86:	2201      	movs	r2, #1
 801ce88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801ce8c:	687b      	ldr	r3, [r7, #4]
 801ce8e:	2201      	movs	r2, #1
 801ce90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801ce94:	687b      	ldr	r3, [r7, #4]
 801ce96:	2201      	movs	r2, #1
 801ce98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ce9c:	687b      	ldr	r3, [r7, #4]
 801ce9e:	2201      	movs	r2, #1
 801cea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801cea4:	687b      	ldr	r3, [r7, #4]
 801cea6:	2201      	movs	r2, #1
 801cea8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801ceac:	687b      	ldr	r3, [r7, #4]
 801ceae:	2201      	movs	r2, #1
 801ceb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ceb4:	687b      	ldr	r3, [r7, #4]
 801ceb6:	2201      	movs	r2, #1
 801ceb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801cebc:	687b      	ldr	r3, [r7, #4]
 801cebe:	2201      	movs	r2, #1
 801cec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801cec4:	2300      	movs	r3, #0
}
 801cec6:	4618      	mov	r0, r3
 801cec8:	3708      	adds	r7, #8
 801ceca:	46bd      	mov	sp, r7
 801cecc:	bd80      	pop	{r7, pc}
	...

0801ced0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801ced0:	b480      	push	{r7}
 801ced2:	b085      	sub	sp, #20
 801ced4:	af00      	add	r7, sp, #0
 801ced6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801ced8:	687b      	ldr	r3, [r7, #4]
 801ceda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801cede:	b2db      	uxtb	r3, r3
 801cee0:	2b01      	cmp	r3, #1
 801cee2:	d001      	beq.n	801cee8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801cee4:	2301      	movs	r3, #1
 801cee6:	e04e      	b.n	801cf86 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cee8:	687b      	ldr	r3, [r7, #4]
 801ceea:	2202      	movs	r2, #2
 801ceec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801cef0:	687b      	ldr	r3, [r7, #4]
 801cef2:	681b      	ldr	r3, [r3, #0]
 801cef4:	68da      	ldr	r2, [r3, #12]
 801cef6:	687b      	ldr	r3, [r7, #4]
 801cef8:	681b      	ldr	r3, [r3, #0]
 801cefa:	f042 0201 	orr.w	r2, r2, #1
 801cefe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801cf00:	687b      	ldr	r3, [r7, #4]
 801cf02:	681b      	ldr	r3, [r3, #0]
 801cf04:	4a23      	ldr	r2, [pc, #140]	; (801cf94 <HAL_TIM_Base_Start_IT+0xc4>)
 801cf06:	4293      	cmp	r3, r2
 801cf08:	d022      	beq.n	801cf50 <HAL_TIM_Base_Start_IT+0x80>
 801cf0a:	687b      	ldr	r3, [r7, #4]
 801cf0c:	681b      	ldr	r3, [r3, #0]
 801cf0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801cf12:	d01d      	beq.n	801cf50 <HAL_TIM_Base_Start_IT+0x80>
 801cf14:	687b      	ldr	r3, [r7, #4]
 801cf16:	681b      	ldr	r3, [r3, #0]
 801cf18:	4a1f      	ldr	r2, [pc, #124]	; (801cf98 <HAL_TIM_Base_Start_IT+0xc8>)
 801cf1a:	4293      	cmp	r3, r2
 801cf1c:	d018      	beq.n	801cf50 <HAL_TIM_Base_Start_IT+0x80>
 801cf1e:	687b      	ldr	r3, [r7, #4]
 801cf20:	681b      	ldr	r3, [r3, #0]
 801cf22:	4a1e      	ldr	r2, [pc, #120]	; (801cf9c <HAL_TIM_Base_Start_IT+0xcc>)
 801cf24:	4293      	cmp	r3, r2
 801cf26:	d013      	beq.n	801cf50 <HAL_TIM_Base_Start_IT+0x80>
 801cf28:	687b      	ldr	r3, [r7, #4]
 801cf2a:	681b      	ldr	r3, [r3, #0]
 801cf2c:	4a1c      	ldr	r2, [pc, #112]	; (801cfa0 <HAL_TIM_Base_Start_IT+0xd0>)
 801cf2e:	4293      	cmp	r3, r2
 801cf30:	d00e      	beq.n	801cf50 <HAL_TIM_Base_Start_IT+0x80>
 801cf32:	687b      	ldr	r3, [r7, #4]
 801cf34:	681b      	ldr	r3, [r3, #0]
 801cf36:	4a1b      	ldr	r2, [pc, #108]	; (801cfa4 <HAL_TIM_Base_Start_IT+0xd4>)
 801cf38:	4293      	cmp	r3, r2
 801cf3a:	d009      	beq.n	801cf50 <HAL_TIM_Base_Start_IT+0x80>
 801cf3c:	687b      	ldr	r3, [r7, #4]
 801cf3e:	681b      	ldr	r3, [r3, #0]
 801cf40:	4a19      	ldr	r2, [pc, #100]	; (801cfa8 <HAL_TIM_Base_Start_IT+0xd8>)
 801cf42:	4293      	cmp	r3, r2
 801cf44:	d004      	beq.n	801cf50 <HAL_TIM_Base_Start_IT+0x80>
 801cf46:	687b      	ldr	r3, [r7, #4]
 801cf48:	681b      	ldr	r3, [r3, #0]
 801cf4a:	4a18      	ldr	r2, [pc, #96]	; (801cfac <HAL_TIM_Base_Start_IT+0xdc>)
 801cf4c:	4293      	cmp	r3, r2
 801cf4e:	d111      	bne.n	801cf74 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801cf50:	687b      	ldr	r3, [r7, #4]
 801cf52:	681b      	ldr	r3, [r3, #0]
 801cf54:	689b      	ldr	r3, [r3, #8]
 801cf56:	f003 0307 	and.w	r3, r3, #7
 801cf5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cf5c:	68fb      	ldr	r3, [r7, #12]
 801cf5e:	2b06      	cmp	r3, #6
 801cf60:	d010      	beq.n	801cf84 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 801cf62:	687b      	ldr	r3, [r7, #4]
 801cf64:	681b      	ldr	r3, [r3, #0]
 801cf66:	681a      	ldr	r2, [r3, #0]
 801cf68:	687b      	ldr	r3, [r7, #4]
 801cf6a:	681b      	ldr	r3, [r3, #0]
 801cf6c:	f042 0201 	orr.w	r2, r2, #1
 801cf70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cf72:	e007      	b.n	801cf84 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801cf74:	687b      	ldr	r3, [r7, #4]
 801cf76:	681b      	ldr	r3, [r3, #0]
 801cf78:	681a      	ldr	r2, [r3, #0]
 801cf7a:	687b      	ldr	r3, [r7, #4]
 801cf7c:	681b      	ldr	r3, [r3, #0]
 801cf7e:	f042 0201 	orr.w	r2, r2, #1
 801cf82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801cf84:	2300      	movs	r3, #0
}
 801cf86:	4618      	mov	r0, r3
 801cf88:	3714      	adds	r7, #20
 801cf8a:	46bd      	mov	sp, r7
 801cf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf90:	4770      	bx	lr
 801cf92:	bf00      	nop
 801cf94:	40010000 	.word	0x40010000
 801cf98:	40000400 	.word	0x40000400
 801cf9c:	40000800 	.word	0x40000800
 801cfa0:	40000c00 	.word	0x40000c00
 801cfa4:	40010400 	.word	0x40010400
 801cfa8:	40014000 	.word	0x40014000
 801cfac:	40001800 	.word	0x40001800

0801cfb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801cfb0:	b580      	push	{r7, lr}
 801cfb2:	b082      	sub	sp, #8
 801cfb4:	af00      	add	r7, sp, #0
 801cfb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801cfb8:	687b      	ldr	r3, [r7, #4]
 801cfba:	681b      	ldr	r3, [r3, #0]
 801cfbc:	691b      	ldr	r3, [r3, #16]
 801cfbe:	f003 0302 	and.w	r3, r3, #2
 801cfc2:	2b02      	cmp	r3, #2
 801cfc4:	d122      	bne.n	801d00c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801cfc6:	687b      	ldr	r3, [r7, #4]
 801cfc8:	681b      	ldr	r3, [r3, #0]
 801cfca:	68db      	ldr	r3, [r3, #12]
 801cfcc:	f003 0302 	and.w	r3, r3, #2
 801cfd0:	2b02      	cmp	r3, #2
 801cfd2:	d11b      	bne.n	801d00c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801cfd4:	687b      	ldr	r3, [r7, #4]
 801cfd6:	681b      	ldr	r3, [r3, #0]
 801cfd8:	f06f 0202 	mvn.w	r2, #2
 801cfdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801cfde:	687b      	ldr	r3, [r7, #4]
 801cfe0:	2201      	movs	r2, #1
 801cfe2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801cfe4:	687b      	ldr	r3, [r7, #4]
 801cfe6:	681b      	ldr	r3, [r3, #0]
 801cfe8:	699b      	ldr	r3, [r3, #24]
 801cfea:	f003 0303 	and.w	r3, r3, #3
 801cfee:	2b00      	cmp	r3, #0
 801cff0:	d003      	beq.n	801cffa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801cff2:	6878      	ldr	r0, [r7, #4]
 801cff4:	f000 fa11 	bl	801d41a <HAL_TIM_IC_CaptureCallback>
 801cff8:	e005      	b.n	801d006 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801cffa:	6878      	ldr	r0, [r7, #4]
 801cffc:	f000 fa03 	bl	801d406 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d000:	6878      	ldr	r0, [r7, #4]
 801d002:	f000 fa14 	bl	801d42e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d006:	687b      	ldr	r3, [r7, #4]
 801d008:	2200      	movs	r2, #0
 801d00a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801d00c:	687b      	ldr	r3, [r7, #4]
 801d00e:	681b      	ldr	r3, [r3, #0]
 801d010:	691b      	ldr	r3, [r3, #16]
 801d012:	f003 0304 	and.w	r3, r3, #4
 801d016:	2b04      	cmp	r3, #4
 801d018:	d122      	bne.n	801d060 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801d01a:	687b      	ldr	r3, [r7, #4]
 801d01c:	681b      	ldr	r3, [r3, #0]
 801d01e:	68db      	ldr	r3, [r3, #12]
 801d020:	f003 0304 	and.w	r3, r3, #4
 801d024:	2b04      	cmp	r3, #4
 801d026:	d11b      	bne.n	801d060 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801d028:	687b      	ldr	r3, [r7, #4]
 801d02a:	681b      	ldr	r3, [r3, #0]
 801d02c:	f06f 0204 	mvn.w	r2, #4
 801d030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801d032:	687b      	ldr	r3, [r7, #4]
 801d034:	2202      	movs	r2, #2
 801d036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801d038:	687b      	ldr	r3, [r7, #4]
 801d03a:	681b      	ldr	r3, [r3, #0]
 801d03c:	699b      	ldr	r3, [r3, #24]
 801d03e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d042:	2b00      	cmp	r3, #0
 801d044:	d003      	beq.n	801d04e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d046:	6878      	ldr	r0, [r7, #4]
 801d048:	f000 f9e7 	bl	801d41a <HAL_TIM_IC_CaptureCallback>
 801d04c:	e005      	b.n	801d05a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d04e:	6878      	ldr	r0, [r7, #4]
 801d050:	f000 f9d9 	bl	801d406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d054:	6878      	ldr	r0, [r7, #4]
 801d056:	f000 f9ea 	bl	801d42e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d05a:	687b      	ldr	r3, [r7, #4]
 801d05c:	2200      	movs	r2, #0
 801d05e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801d060:	687b      	ldr	r3, [r7, #4]
 801d062:	681b      	ldr	r3, [r3, #0]
 801d064:	691b      	ldr	r3, [r3, #16]
 801d066:	f003 0308 	and.w	r3, r3, #8
 801d06a:	2b08      	cmp	r3, #8
 801d06c:	d122      	bne.n	801d0b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801d06e:	687b      	ldr	r3, [r7, #4]
 801d070:	681b      	ldr	r3, [r3, #0]
 801d072:	68db      	ldr	r3, [r3, #12]
 801d074:	f003 0308 	and.w	r3, r3, #8
 801d078:	2b08      	cmp	r3, #8
 801d07a:	d11b      	bne.n	801d0b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801d07c:	687b      	ldr	r3, [r7, #4]
 801d07e:	681b      	ldr	r3, [r3, #0]
 801d080:	f06f 0208 	mvn.w	r2, #8
 801d084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801d086:	687b      	ldr	r3, [r7, #4]
 801d088:	2204      	movs	r2, #4
 801d08a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801d08c:	687b      	ldr	r3, [r7, #4]
 801d08e:	681b      	ldr	r3, [r3, #0]
 801d090:	69db      	ldr	r3, [r3, #28]
 801d092:	f003 0303 	and.w	r3, r3, #3
 801d096:	2b00      	cmp	r3, #0
 801d098:	d003      	beq.n	801d0a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d09a:	6878      	ldr	r0, [r7, #4]
 801d09c:	f000 f9bd 	bl	801d41a <HAL_TIM_IC_CaptureCallback>
 801d0a0:	e005      	b.n	801d0ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d0a2:	6878      	ldr	r0, [r7, #4]
 801d0a4:	f000 f9af 	bl	801d406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d0a8:	6878      	ldr	r0, [r7, #4]
 801d0aa:	f000 f9c0 	bl	801d42e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d0ae:	687b      	ldr	r3, [r7, #4]
 801d0b0:	2200      	movs	r2, #0
 801d0b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801d0b4:	687b      	ldr	r3, [r7, #4]
 801d0b6:	681b      	ldr	r3, [r3, #0]
 801d0b8:	691b      	ldr	r3, [r3, #16]
 801d0ba:	f003 0310 	and.w	r3, r3, #16
 801d0be:	2b10      	cmp	r3, #16
 801d0c0:	d122      	bne.n	801d108 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801d0c2:	687b      	ldr	r3, [r7, #4]
 801d0c4:	681b      	ldr	r3, [r3, #0]
 801d0c6:	68db      	ldr	r3, [r3, #12]
 801d0c8:	f003 0310 	and.w	r3, r3, #16
 801d0cc:	2b10      	cmp	r3, #16
 801d0ce:	d11b      	bne.n	801d108 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801d0d0:	687b      	ldr	r3, [r7, #4]
 801d0d2:	681b      	ldr	r3, [r3, #0]
 801d0d4:	f06f 0210 	mvn.w	r2, #16
 801d0d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801d0da:	687b      	ldr	r3, [r7, #4]
 801d0dc:	2208      	movs	r2, #8
 801d0de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801d0e0:	687b      	ldr	r3, [r7, #4]
 801d0e2:	681b      	ldr	r3, [r3, #0]
 801d0e4:	69db      	ldr	r3, [r3, #28]
 801d0e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d0ea:	2b00      	cmp	r3, #0
 801d0ec:	d003      	beq.n	801d0f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d0ee:	6878      	ldr	r0, [r7, #4]
 801d0f0:	f000 f993 	bl	801d41a <HAL_TIM_IC_CaptureCallback>
 801d0f4:	e005      	b.n	801d102 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d0f6:	6878      	ldr	r0, [r7, #4]
 801d0f8:	f000 f985 	bl	801d406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d0fc:	6878      	ldr	r0, [r7, #4]
 801d0fe:	f000 f996 	bl	801d42e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d102:	687b      	ldr	r3, [r7, #4]
 801d104:	2200      	movs	r2, #0
 801d106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801d108:	687b      	ldr	r3, [r7, #4]
 801d10a:	681b      	ldr	r3, [r3, #0]
 801d10c:	691b      	ldr	r3, [r3, #16]
 801d10e:	f003 0301 	and.w	r3, r3, #1
 801d112:	2b01      	cmp	r3, #1
 801d114:	d10e      	bne.n	801d134 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801d116:	687b      	ldr	r3, [r7, #4]
 801d118:	681b      	ldr	r3, [r3, #0]
 801d11a:	68db      	ldr	r3, [r3, #12]
 801d11c:	f003 0301 	and.w	r3, r3, #1
 801d120:	2b01      	cmp	r3, #1
 801d122:	d107      	bne.n	801d134 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801d124:	687b      	ldr	r3, [r7, #4]
 801d126:	681b      	ldr	r3, [r3, #0]
 801d128:	f06f 0201 	mvn.w	r2, #1
 801d12c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801d12e:	6878      	ldr	r0, [r7, #4]
 801d130:	f7fa fda8 	bl	8017c84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801d134:	687b      	ldr	r3, [r7, #4]
 801d136:	681b      	ldr	r3, [r3, #0]
 801d138:	691b      	ldr	r3, [r3, #16]
 801d13a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d13e:	2b80      	cmp	r3, #128	; 0x80
 801d140:	d10e      	bne.n	801d160 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801d142:	687b      	ldr	r3, [r7, #4]
 801d144:	681b      	ldr	r3, [r3, #0]
 801d146:	68db      	ldr	r3, [r3, #12]
 801d148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d14c:	2b80      	cmp	r3, #128	; 0x80
 801d14e:	d107      	bne.n	801d160 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801d150:	687b      	ldr	r3, [r7, #4]
 801d152:	681b      	ldr	r3, [r3, #0]
 801d154:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801d158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801d15a:	6878      	ldr	r0, [r7, #4]
 801d15c:	f000 fcec 	bl	801db38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801d160:	687b      	ldr	r3, [r7, #4]
 801d162:	681b      	ldr	r3, [r3, #0]
 801d164:	691b      	ldr	r3, [r3, #16]
 801d166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d16a:	2b40      	cmp	r3, #64	; 0x40
 801d16c:	d10e      	bne.n	801d18c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801d16e:	687b      	ldr	r3, [r7, #4]
 801d170:	681b      	ldr	r3, [r3, #0]
 801d172:	68db      	ldr	r3, [r3, #12]
 801d174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d178:	2b40      	cmp	r3, #64	; 0x40
 801d17a:	d107      	bne.n	801d18c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801d17c:	687b      	ldr	r3, [r7, #4]
 801d17e:	681b      	ldr	r3, [r3, #0]
 801d180:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801d184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801d186:	6878      	ldr	r0, [r7, #4]
 801d188:	f000 f95b 	bl	801d442 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801d18c:	687b      	ldr	r3, [r7, #4]
 801d18e:	681b      	ldr	r3, [r3, #0]
 801d190:	691b      	ldr	r3, [r3, #16]
 801d192:	f003 0320 	and.w	r3, r3, #32
 801d196:	2b20      	cmp	r3, #32
 801d198:	d10e      	bne.n	801d1b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801d19a:	687b      	ldr	r3, [r7, #4]
 801d19c:	681b      	ldr	r3, [r3, #0]
 801d19e:	68db      	ldr	r3, [r3, #12]
 801d1a0:	f003 0320 	and.w	r3, r3, #32
 801d1a4:	2b20      	cmp	r3, #32
 801d1a6:	d107      	bne.n	801d1b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801d1a8:	687b      	ldr	r3, [r7, #4]
 801d1aa:	681b      	ldr	r3, [r3, #0]
 801d1ac:	f06f 0220 	mvn.w	r2, #32
 801d1b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801d1b2:	6878      	ldr	r0, [r7, #4]
 801d1b4:	f000 fcb6 	bl	801db24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801d1b8:	bf00      	nop
 801d1ba:	3708      	adds	r7, #8
 801d1bc:	46bd      	mov	sp, r7
 801d1be:	bd80      	pop	{r7, pc}

0801d1c0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 801d1c0:	b580      	push	{r7, lr}
 801d1c2:	b086      	sub	sp, #24
 801d1c4:	af00      	add	r7, sp, #0
 801d1c6:	60f8      	str	r0, [r7, #12]
 801d1c8:	60b9      	str	r1, [r7, #8]
 801d1ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801d1cc:	2300      	movs	r3, #0
 801d1ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 801d1d0:	68fb      	ldr	r3, [r7, #12]
 801d1d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d1d6:	2b01      	cmp	r3, #1
 801d1d8:	d101      	bne.n	801d1de <HAL_TIM_OC_ConfigChannel+0x1e>
 801d1da:	2302      	movs	r3, #2
 801d1dc:	e048      	b.n	801d270 <HAL_TIM_OC_ConfigChannel+0xb0>
 801d1de:	68fb      	ldr	r3, [r7, #12]
 801d1e0:	2201      	movs	r2, #1
 801d1e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 801d1e6:	687b      	ldr	r3, [r7, #4]
 801d1e8:	2b0c      	cmp	r3, #12
 801d1ea:	d839      	bhi.n	801d260 <HAL_TIM_OC_ConfigChannel+0xa0>
 801d1ec:	a201      	add	r2, pc, #4	; (adr r2, 801d1f4 <HAL_TIM_OC_ConfigChannel+0x34>)
 801d1ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d1f2:	bf00      	nop
 801d1f4:	0801d229 	.word	0x0801d229
 801d1f8:	0801d261 	.word	0x0801d261
 801d1fc:	0801d261 	.word	0x0801d261
 801d200:	0801d261 	.word	0x0801d261
 801d204:	0801d237 	.word	0x0801d237
 801d208:	0801d261 	.word	0x0801d261
 801d20c:	0801d261 	.word	0x0801d261
 801d210:	0801d261 	.word	0x0801d261
 801d214:	0801d245 	.word	0x0801d245
 801d218:	0801d261 	.word	0x0801d261
 801d21c:	0801d261 	.word	0x0801d261
 801d220:	0801d261 	.word	0x0801d261
 801d224:	0801d253 	.word	0x0801d253
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801d228:	68fb      	ldr	r3, [r7, #12]
 801d22a:	681b      	ldr	r3, [r3, #0]
 801d22c:	68b9      	ldr	r1, [r7, #8]
 801d22e:	4618      	mov	r0, r3
 801d230:	f000 f9b2 	bl	801d598 <TIM_OC1_SetConfig>
      break;
 801d234:	e017      	b.n	801d266 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801d236:	68fb      	ldr	r3, [r7, #12]
 801d238:	681b      	ldr	r3, [r3, #0]
 801d23a:	68b9      	ldr	r1, [r7, #8]
 801d23c:	4618      	mov	r0, r3
 801d23e:	f000 fa1b 	bl	801d678 <TIM_OC2_SetConfig>
      break;
 801d242:	e010      	b.n	801d266 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801d244:	68fb      	ldr	r3, [r7, #12]
 801d246:	681b      	ldr	r3, [r3, #0]
 801d248:	68b9      	ldr	r1, [r7, #8]
 801d24a:	4618      	mov	r0, r3
 801d24c:	f000 fa8a 	bl	801d764 <TIM_OC3_SetConfig>
      break;
 801d250:	e009      	b.n	801d266 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801d252:	68fb      	ldr	r3, [r7, #12]
 801d254:	681b      	ldr	r3, [r3, #0]
 801d256:	68b9      	ldr	r1, [r7, #8]
 801d258:	4618      	mov	r0, r3
 801d25a:	f000 faf7 	bl	801d84c <TIM_OC4_SetConfig>
      break;
 801d25e:	e002      	b.n	801d266 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 801d260:	2301      	movs	r3, #1
 801d262:	75fb      	strb	r3, [r7, #23]
      break;
 801d264:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801d266:	68fb      	ldr	r3, [r7, #12]
 801d268:	2200      	movs	r2, #0
 801d26a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801d26e:	7dfb      	ldrb	r3, [r7, #23]
}
 801d270:	4618      	mov	r0, r3
 801d272:	3718      	adds	r7, #24
 801d274:	46bd      	mov	sp, r7
 801d276:	bd80      	pop	{r7, pc}

0801d278 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801d278:	b580      	push	{r7, lr}
 801d27a:	b084      	sub	sp, #16
 801d27c:	af00      	add	r7, sp, #0
 801d27e:	6078      	str	r0, [r7, #4]
 801d280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801d282:	2300      	movs	r3, #0
 801d284:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801d286:	687b      	ldr	r3, [r7, #4]
 801d288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d28c:	2b01      	cmp	r3, #1
 801d28e:	d101      	bne.n	801d294 <HAL_TIM_ConfigClockSource+0x1c>
 801d290:	2302      	movs	r3, #2
 801d292:	e0b4      	b.n	801d3fe <HAL_TIM_ConfigClockSource+0x186>
 801d294:	687b      	ldr	r3, [r7, #4]
 801d296:	2201      	movs	r2, #1
 801d298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801d29c:	687b      	ldr	r3, [r7, #4]
 801d29e:	2202      	movs	r2, #2
 801d2a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801d2a4:	687b      	ldr	r3, [r7, #4]
 801d2a6:	681b      	ldr	r3, [r3, #0]
 801d2a8:	689b      	ldr	r3, [r3, #8]
 801d2aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801d2ac:	68bb      	ldr	r3, [r7, #8]
 801d2ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801d2b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801d2b4:	68bb      	ldr	r3, [r7, #8]
 801d2b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801d2ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801d2bc:	687b      	ldr	r3, [r7, #4]
 801d2be:	681b      	ldr	r3, [r3, #0]
 801d2c0:	68ba      	ldr	r2, [r7, #8]
 801d2c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801d2c4:	683b      	ldr	r3, [r7, #0]
 801d2c6:	681b      	ldr	r3, [r3, #0]
 801d2c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d2cc:	d03e      	beq.n	801d34c <HAL_TIM_ConfigClockSource+0xd4>
 801d2ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d2d2:	f200 8087 	bhi.w	801d3e4 <HAL_TIM_ConfigClockSource+0x16c>
 801d2d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d2da:	f000 8086 	beq.w	801d3ea <HAL_TIM_ConfigClockSource+0x172>
 801d2de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d2e2:	d87f      	bhi.n	801d3e4 <HAL_TIM_ConfigClockSource+0x16c>
 801d2e4:	2b70      	cmp	r3, #112	; 0x70
 801d2e6:	d01a      	beq.n	801d31e <HAL_TIM_ConfigClockSource+0xa6>
 801d2e8:	2b70      	cmp	r3, #112	; 0x70
 801d2ea:	d87b      	bhi.n	801d3e4 <HAL_TIM_ConfigClockSource+0x16c>
 801d2ec:	2b60      	cmp	r3, #96	; 0x60
 801d2ee:	d050      	beq.n	801d392 <HAL_TIM_ConfigClockSource+0x11a>
 801d2f0:	2b60      	cmp	r3, #96	; 0x60
 801d2f2:	d877      	bhi.n	801d3e4 <HAL_TIM_ConfigClockSource+0x16c>
 801d2f4:	2b50      	cmp	r3, #80	; 0x50
 801d2f6:	d03c      	beq.n	801d372 <HAL_TIM_ConfigClockSource+0xfa>
 801d2f8:	2b50      	cmp	r3, #80	; 0x50
 801d2fa:	d873      	bhi.n	801d3e4 <HAL_TIM_ConfigClockSource+0x16c>
 801d2fc:	2b40      	cmp	r3, #64	; 0x40
 801d2fe:	d058      	beq.n	801d3b2 <HAL_TIM_ConfigClockSource+0x13a>
 801d300:	2b40      	cmp	r3, #64	; 0x40
 801d302:	d86f      	bhi.n	801d3e4 <HAL_TIM_ConfigClockSource+0x16c>
 801d304:	2b30      	cmp	r3, #48	; 0x30
 801d306:	d064      	beq.n	801d3d2 <HAL_TIM_ConfigClockSource+0x15a>
 801d308:	2b30      	cmp	r3, #48	; 0x30
 801d30a:	d86b      	bhi.n	801d3e4 <HAL_TIM_ConfigClockSource+0x16c>
 801d30c:	2b20      	cmp	r3, #32
 801d30e:	d060      	beq.n	801d3d2 <HAL_TIM_ConfigClockSource+0x15a>
 801d310:	2b20      	cmp	r3, #32
 801d312:	d867      	bhi.n	801d3e4 <HAL_TIM_ConfigClockSource+0x16c>
 801d314:	2b00      	cmp	r3, #0
 801d316:	d05c      	beq.n	801d3d2 <HAL_TIM_ConfigClockSource+0x15a>
 801d318:	2b10      	cmp	r3, #16
 801d31a:	d05a      	beq.n	801d3d2 <HAL_TIM_ConfigClockSource+0x15a>
 801d31c:	e062      	b.n	801d3e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801d31e:	687b      	ldr	r3, [r7, #4]
 801d320:	6818      	ldr	r0, [r3, #0]
 801d322:	683b      	ldr	r3, [r7, #0]
 801d324:	6899      	ldr	r1, [r3, #8]
 801d326:	683b      	ldr	r3, [r7, #0]
 801d328:	685a      	ldr	r2, [r3, #4]
 801d32a:	683b      	ldr	r3, [r7, #0]
 801d32c:	68db      	ldr	r3, [r3, #12]
 801d32e:	f000 fb5d 	bl	801d9ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801d332:	687b      	ldr	r3, [r7, #4]
 801d334:	681b      	ldr	r3, [r3, #0]
 801d336:	689b      	ldr	r3, [r3, #8]
 801d338:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801d33a:	68bb      	ldr	r3, [r7, #8]
 801d33c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801d340:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801d342:	687b      	ldr	r3, [r7, #4]
 801d344:	681b      	ldr	r3, [r3, #0]
 801d346:	68ba      	ldr	r2, [r7, #8]
 801d348:	609a      	str	r2, [r3, #8]
      break;
 801d34a:	e04f      	b.n	801d3ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801d34c:	687b      	ldr	r3, [r7, #4]
 801d34e:	6818      	ldr	r0, [r3, #0]
 801d350:	683b      	ldr	r3, [r7, #0]
 801d352:	6899      	ldr	r1, [r3, #8]
 801d354:	683b      	ldr	r3, [r7, #0]
 801d356:	685a      	ldr	r2, [r3, #4]
 801d358:	683b      	ldr	r3, [r7, #0]
 801d35a:	68db      	ldr	r3, [r3, #12]
 801d35c:	f000 fb46 	bl	801d9ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801d360:	687b      	ldr	r3, [r7, #4]
 801d362:	681b      	ldr	r3, [r3, #0]
 801d364:	689a      	ldr	r2, [r3, #8]
 801d366:	687b      	ldr	r3, [r7, #4]
 801d368:	681b      	ldr	r3, [r3, #0]
 801d36a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801d36e:	609a      	str	r2, [r3, #8]
      break;
 801d370:	e03c      	b.n	801d3ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801d372:	687b      	ldr	r3, [r7, #4]
 801d374:	6818      	ldr	r0, [r3, #0]
 801d376:	683b      	ldr	r3, [r7, #0]
 801d378:	6859      	ldr	r1, [r3, #4]
 801d37a:	683b      	ldr	r3, [r7, #0]
 801d37c:	68db      	ldr	r3, [r3, #12]
 801d37e:	461a      	mov	r2, r3
 801d380:	f000 faba 	bl	801d8f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801d384:	687b      	ldr	r3, [r7, #4]
 801d386:	681b      	ldr	r3, [r3, #0]
 801d388:	2150      	movs	r1, #80	; 0x50
 801d38a:	4618      	mov	r0, r3
 801d38c:	f000 fb13 	bl	801d9b6 <TIM_ITRx_SetConfig>
      break;
 801d390:	e02c      	b.n	801d3ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801d392:	687b      	ldr	r3, [r7, #4]
 801d394:	6818      	ldr	r0, [r3, #0]
 801d396:	683b      	ldr	r3, [r7, #0]
 801d398:	6859      	ldr	r1, [r3, #4]
 801d39a:	683b      	ldr	r3, [r7, #0]
 801d39c:	68db      	ldr	r3, [r3, #12]
 801d39e:	461a      	mov	r2, r3
 801d3a0:	f000 fad9 	bl	801d956 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801d3a4:	687b      	ldr	r3, [r7, #4]
 801d3a6:	681b      	ldr	r3, [r3, #0]
 801d3a8:	2160      	movs	r1, #96	; 0x60
 801d3aa:	4618      	mov	r0, r3
 801d3ac:	f000 fb03 	bl	801d9b6 <TIM_ITRx_SetConfig>
      break;
 801d3b0:	e01c      	b.n	801d3ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801d3b2:	687b      	ldr	r3, [r7, #4]
 801d3b4:	6818      	ldr	r0, [r3, #0]
 801d3b6:	683b      	ldr	r3, [r7, #0]
 801d3b8:	6859      	ldr	r1, [r3, #4]
 801d3ba:	683b      	ldr	r3, [r7, #0]
 801d3bc:	68db      	ldr	r3, [r3, #12]
 801d3be:	461a      	mov	r2, r3
 801d3c0:	f000 fa9a 	bl	801d8f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801d3c4:	687b      	ldr	r3, [r7, #4]
 801d3c6:	681b      	ldr	r3, [r3, #0]
 801d3c8:	2140      	movs	r1, #64	; 0x40
 801d3ca:	4618      	mov	r0, r3
 801d3cc:	f000 faf3 	bl	801d9b6 <TIM_ITRx_SetConfig>
      break;
 801d3d0:	e00c      	b.n	801d3ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801d3d2:	687b      	ldr	r3, [r7, #4]
 801d3d4:	681a      	ldr	r2, [r3, #0]
 801d3d6:	683b      	ldr	r3, [r7, #0]
 801d3d8:	681b      	ldr	r3, [r3, #0]
 801d3da:	4619      	mov	r1, r3
 801d3dc:	4610      	mov	r0, r2
 801d3de:	f000 faea 	bl	801d9b6 <TIM_ITRx_SetConfig>
      break;
 801d3e2:	e003      	b.n	801d3ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 801d3e4:	2301      	movs	r3, #1
 801d3e6:	73fb      	strb	r3, [r7, #15]
      break;
 801d3e8:	e000      	b.n	801d3ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 801d3ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801d3ec:	687b      	ldr	r3, [r7, #4]
 801d3ee:	2201      	movs	r2, #1
 801d3f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801d3f4:	687b      	ldr	r3, [r7, #4]
 801d3f6:	2200      	movs	r2, #0
 801d3f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801d3fc:	7bfb      	ldrb	r3, [r7, #15]
}
 801d3fe:	4618      	mov	r0, r3
 801d400:	3710      	adds	r7, #16
 801d402:	46bd      	mov	sp, r7
 801d404:	bd80      	pop	{r7, pc}

0801d406 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801d406:	b480      	push	{r7}
 801d408:	b083      	sub	sp, #12
 801d40a:	af00      	add	r7, sp, #0
 801d40c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801d40e:	bf00      	nop
 801d410:	370c      	adds	r7, #12
 801d412:	46bd      	mov	sp, r7
 801d414:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d418:	4770      	bx	lr

0801d41a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801d41a:	b480      	push	{r7}
 801d41c:	b083      	sub	sp, #12
 801d41e:	af00      	add	r7, sp, #0
 801d420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801d422:	bf00      	nop
 801d424:	370c      	adds	r7, #12
 801d426:	46bd      	mov	sp, r7
 801d428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d42c:	4770      	bx	lr

0801d42e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801d42e:	b480      	push	{r7}
 801d430:	b083      	sub	sp, #12
 801d432:	af00      	add	r7, sp, #0
 801d434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801d436:	bf00      	nop
 801d438:	370c      	adds	r7, #12
 801d43a:	46bd      	mov	sp, r7
 801d43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d440:	4770      	bx	lr

0801d442 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801d442:	b480      	push	{r7}
 801d444:	b083      	sub	sp, #12
 801d446:	af00      	add	r7, sp, #0
 801d448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801d44a:	bf00      	nop
 801d44c:	370c      	adds	r7, #12
 801d44e:	46bd      	mov	sp, r7
 801d450:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d454:	4770      	bx	lr
	...

0801d458 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801d458:	b480      	push	{r7}
 801d45a:	b085      	sub	sp, #20
 801d45c:	af00      	add	r7, sp, #0
 801d45e:	6078      	str	r0, [r7, #4]
 801d460:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801d462:	687b      	ldr	r3, [r7, #4]
 801d464:	681b      	ldr	r3, [r3, #0]
 801d466:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801d468:	687b      	ldr	r3, [r7, #4]
 801d46a:	4a40      	ldr	r2, [pc, #256]	; (801d56c <TIM_Base_SetConfig+0x114>)
 801d46c:	4293      	cmp	r3, r2
 801d46e:	d013      	beq.n	801d498 <TIM_Base_SetConfig+0x40>
 801d470:	687b      	ldr	r3, [r7, #4]
 801d472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d476:	d00f      	beq.n	801d498 <TIM_Base_SetConfig+0x40>
 801d478:	687b      	ldr	r3, [r7, #4]
 801d47a:	4a3d      	ldr	r2, [pc, #244]	; (801d570 <TIM_Base_SetConfig+0x118>)
 801d47c:	4293      	cmp	r3, r2
 801d47e:	d00b      	beq.n	801d498 <TIM_Base_SetConfig+0x40>
 801d480:	687b      	ldr	r3, [r7, #4]
 801d482:	4a3c      	ldr	r2, [pc, #240]	; (801d574 <TIM_Base_SetConfig+0x11c>)
 801d484:	4293      	cmp	r3, r2
 801d486:	d007      	beq.n	801d498 <TIM_Base_SetConfig+0x40>
 801d488:	687b      	ldr	r3, [r7, #4]
 801d48a:	4a3b      	ldr	r2, [pc, #236]	; (801d578 <TIM_Base_SetConfig+0x120>)
 801d48c:	4293      	cmp	r3, r2
 801d48e:	d003      	beq.n	801d498 <TIM_Base_SetConfig+0x40>
 801d490:	687b      	ldr	r3, [r7, #4]
 801d492:	4a3a      	ldr	r2, [pc, #232]	; (801d57c <TIM_Base_SetConfig+0x124>)
 801d494:	4293      	cmp	r3, r2
 801d496:	d108      	bne.n	801d4aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801d498:	68fb      	ldr	r3, [r7, #12]
 801d49a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d49e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801d4a0:	683b      	ldr	r3, [r7, #0]
 801d4a2:	685b      	ldr	r3, [r3, #4]
 801d4a4:	68fa      	ldr	r2, [r7, #12]
 801d4a6:	4313      	orrs	r3, r2
 801d4a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801d4aa:	687b      	ldr	r3, [r7, #4]
 801d4ac:	4a2f      	ldr	r2, [pc, #188]	; (801d56c <TIM_Base_SetConfig+0x114>)
 801d4ae:	4293      	cmp	r3, r2
 801d4b0:	d02b      	beq.n	801d50a <TIM_Base_SetConfig+0xb2>
 801d4b2:	687b      	ldr	r3, [r7, #4]
 801d4b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d4b8:	d027      	beq.n	801d50a <TIM_Base_SetConfig+0xb2>
 801d4ba:	687b      	ldr	r3, [r7, #4]
 801d4bc:	4a2c      	ldr	r2, [pc, #176]	; (801d570 <TIM_Base_SetConfig+0x118>)
 801d4be:	4293      	cmp	r3, r2
 801d4c0:	d023      	beq.n	801d50a <TIM_Base_SetConfig+0xb2>
 801d4c2:	687b      	ldr	r3, [r7, #4]
 801d4c4:	4a2b      	ldr	r2, [pc, #172]	; (801d574 <TIM_Base_SetConfig+0x11c>)
 801d4c6:	4293      	cmp	r3, r2
 801d4c8:	d01f      	beq.n	801d50a <TIM_Base_SetConfig+0xb2>
 801d4ca:	687b      	ldr	r3, [r7, #4]
 801d4cc:	4a2a      	ldr	r2, [pc, #168]	; (801d578 <TIM_Base_SetConfig+0x120>)
 801d4ce:	4293      	cmp	r3, r2
 801d4d0:	d01b      	beq.n	801d50a <TIM_Base_SetConfig+0xb2>
 801d4d2:	687b      	ldr	r3, [r7, #4]
 801d4d4:	4a29      	ldr	r2, [pc, #164]	; (801d57c <TIM_Base_SetConfig+0x124>)
 801d4d6:	4293      	cmp	r3, r2
 801d4d8:	d017      	beq.n	801d50a <TIM_Base_SetConfig+0xb2>
 801d4da:	687b      	ldr	r3, [r7, #4]
 801d4dc:	4a28      	ldr	r2, [pc, #160]	; (801d580 <TIM_Base_SetConfig+0x128>)
 801d4de:	4293      	cmp	r3, r2
 801d4e0:	d013      	beq.n	801d50a <TIM_Base_SetConfig+0xb2>
 801d4e2:	687b      	ldr	r3, [r7, #4]
 801d4e4:	4a27      	ldr	r2, [pc, #156]	; (801d584 <TIM_Base_SetConfig+0x12c>)
 801d4e6:	4293      	cmp	r3, r2
 801d4e8:	d00f      	beq.n	801d50a <TIM_Base_SetConfig+0xb2>
 801d4ea:	687b      	ldr	r3, [r7, #4]
 801d4ec:	4a26      	ldr	r2, [pc, #152]	; (801d588 <TIM_Base_SetConfig+0x130>)
 801d4ee:	4293      	cmp	r3, r2
 801d4f0:	d00b      	beq.n	801d50a <TIM_Base_SetConfig+0xb2>
 801d4f2:	687b      	ldr	r3, [r7, #4]
 801d4f4:	4a25      	ldr	r2, [pc, #148]	; (801d58c <TIM_Base_SetConfig+0x134>)
 801d4f6:	4293      	cmp	r3, r2
 801d4f8:	d007      	beq.n	801d50a <TIM_Base_SetConfig+0xb2>
 801d4fa:	687b      	ldr	r3, [r7, #4]
 801d4fc:	4a24      	ldr	r2, [pc, #144]	; (801d590 <TIM_Base_SetConfig+0x138>)
 801d4fe:	4293      	cmp	r3, r2
 801d500:	d003      	beq.n	801d50a <TIM_Base_SetConfig+0xb2>
 801d502:	687b      	ldr	r3, [r7, #4]
 801d504:	4a23      	ldr	r2, [pc, #140]	; (801d594 <TIM_Base_SetConfig+0x13c>)
 801d506:	4293      	cmp	r3, r2
 801d508:	d108      	bne.n	801d51c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801d50a:	68fb      	ldr	r3, [r7, #12]
 801d50c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d510:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801d512:	683b      	ldr	r3, [r7, #0]
 801d514:	68db      	ldr	r3, [r3, #12]
 801d516:	68fa      	ldr	r2, [r7, #12]
 801d518:	4313      	orrs	r3, r2
 801d51a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801d51c:	68fb      	ldr	r3, [r7, #12]
 801d51e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801d522:	683b      	ldr	r3, [r7, #0]
 801d524:	695b      	ldr	r3, [r3, #20]
 801d526:	4313      	orrs	r3, r2
 801d528:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801d52a:	687b      	ldr	r3, [r7, #4]
 801d52c:	68fa      	ldr	r2, [r7, #12]
 801d52e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801d530:	683b      	ldr	r3, [r7, #0]
 801d532:	689a      	ldr	r2, [r3, #8]
 801d534:	687b      	ldr	r3, [r7, #4]
 801d536:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801d538:	683b      	ldr	r3, [r7, #0]
 801d53a:	681a      	ldr	r2, [r3, #0]
 801d53c:	687b      	ldr	r3, [r7, #4]
 801d53e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801d540:	687b      	ldr	r3, [r7, #4]
 801d542:	4a0a      	ldr	r2, [pc, #40]	; (801d56c <TIM_Base_SetConfig+0x114>)
 801d544:	4293      	cmp	r3, r2
 801d546:	d003      	beq.n	801d550 <TIM_Base_SetConfig+0xf8>
 801d548:	687b      	ldr	r3, [r7, #4]
 801d54a:	4a0c      	ldr	r2, [pc, #48]	; (801d57c <TIM_Base_SetConfig+0x124>)
 801d54c:	4293      	cmp	r3, r2
 801d54e:	d103      	bne.n	801d558 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801d550:	683b      	ldr	r3, [r7, #0]
 801d552:	691a      	ldr	r2, [r3, #16]
 801d554:	687b      	ldr	r3, [r7, #4]
 801d556:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801d558:	687b      	ldr	r3, [r7, #4]
 801d55a:	2201      	movs	r2, #1
 801d55c:	615a      	str	r2, [r3, #20]
}
 801d55e:	bf00      	nop
 801d560:	3714      	adds	r7, #20
 801d562:	46bd      	mov	sp, r7
 801d564:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d568:	4770      	bx	lr
 801d56a:	bf00      	nop
 801d56c:	40010000 	.word	0x40010000
 801d570:	40000400 	.word	0x40000400
 801d574:	40000800 	.word	0x40000800
 801d578:	40000c00 	.word	0x40000c00
 801d57c:	40010400 	.word	0x40010400
 801d580:	40014000 	.word	0x40014000
 801d584:	40014400 	.word	0x40014400
 801d588:	40014800 	.word	0x40014800
 801d58c:	40001800 	.word	0x40001800
 801d590:	40001c00 	.word	0x40001c00
 801d594:	40002000 	.word	0x40002000

0801d598 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d598:	b480      	push	{r7}
 801d59a:	b087      	sub	sp, #28
 801d59c:	af00      	add	r7, sp, #0
 801d59e:	6078      	str	r0, [r7, #4]
 801d5a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801d5a2:	687b      	ldr	r3, [r7, #4]
 801d5a4:	6a1b      	ldr	r3, [r3, #32]
 801d5a6:	f023 0201 	bic.w	r2, r3, #1
 801d5aa:	687b      	ldr	r3, [r7, #4]
 801d5ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d5ae:	687b      	ldr	r3, [r7, #4]
 801d5b0:	6a1b      	ldr	r3, [r3, #32]
 801d5b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d5b4:	687b      	ldr	r3, [r7, #4]
 801d5b6:	685b      	ldr	r3, [r3, #4]
 801d5b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d5ba:	687b      	ldr	r3, [r7, #4]
 801d5bc:	699b      	ldr	r3, [r3, #24]
 801d5be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801d5c0:	68fb      	ldr	r3, [r7, #12]
 801d5c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d5c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801d5c8:	68fb      	ldr	r3, [r7, #12]
 801d5ca:	f023 0303 	bic.w	r3, r3, #3
 801d5ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d5d0:	683b      	ldr	r3, [r7, #0]
 801d5d2:	681b      	ldr	r3, [r3, #0]
 801d5d4:	68fa      	ldr	r2, [r7, #12]
 801d5d6:	4313      	orrs	r3, r2
 801d5d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801d5da:	697b      	ldr	r3, [r7, #20]
 801d5dc:	f023 0302 	bic.w	r3, r3, #2
 801d5e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801d5e2:	683b      	ldr	r3, [r7, #0]
 801d5e4:	689b      	ldr	r3, [r3, #8]
 801d5e6:	697a      	ldr	r2, [r7, #20]
 801d5e8:	4313      	orrs	r3, r2
 801d5ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801d5ec:	687b      	ldr	r3, [r7, #4]
 801d5ee:	4a20      	ldr	r2, [pc, #128]	; (801d670 <TIM_OC1_SetConfig+0xd8>)
 801d5f0:	4293      	cmp	r3, r2
 801d5f2:	d003      	beq.n	801d5fc <TIM_OC1_SetConfig+0x64>
 801d5f4:	687b      	ldr	r3, [r7, #4]
 801d5f6:	4a1f      	ldr	r2, [pc, #124]	; (801d674 <TIM_OC1_SetConfig+0xdc>)
 801d5f8:	4293      	cmp	r3, r2
 801d5fa:	d10c      	bne.n	801d616 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801d5fc:	697b      	ldr	r3, [r7, #20]
 801d5fe:	f023 0308 	bic.w	r3, r3, #8
 801d602:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801d604:	683b      	ldr	r3, [r7, #0]
 801d606:	68db      	ldr	r3, [r3, #12]
 801d608:	697a      	ldr	r2, [r7, #20]
 801d60a:	4313      	orrs	r3, r2
 801d60c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801d60e:	697b      	ldr	r3, [r7, #20]
 801d610:	f023 0304 	bic.w	r3, r3, #4
 801d614:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d616:	687b      	ldr	r3, [r7, #4]
 801d618:	4a15      	ldr	r2, [pc, #84]	; (801d670 <TIM_OC1_SetConfig+0xd8>)
 801d61a:	4293      	cmp	r3, r2
 801d61c:	d003      	beq.n	801d626 <TIM_OC1_SetConfig+0x8e>
 801d61e:	687b      	ldr	r3, [r7, #4]
 801d620:	4a14      	ldr	r2, [pc, #80]	; (801d674 <TIM_OC1_SetConfig+0xdc>)
 801d622:	4293      	cmp	r3, r2
 801d624:	d111      	bne.n	801d64a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801d626:	693b      	ldr	r3, [r7, #16]
 801d628:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801d62c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801d62e:	693b      	ldr	r3, [r7, #16]
 801d630:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801d634:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801d636:	683b      	ldr	r3, [r7, #0]
 801d638:	695b      	ldr	r3, [r3, #20]
 801d63a:	693a      	ldr	r2, [r7, #16]
 801d63c:	4313      	orrs	r3, r2
 801d63e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801d640:	683b      	ldr	r3, [r7, #0]
 801d642:	699b      	ldr	r3, [r3, #24]
 801d644:	693a      	ldr	r2, [r7, #16]
 801d646:	4313      	orrs	r3, r2
 801d648:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d64a:	687b      	ldr	r3, [r7, #4]
 801d64c:	693a      	ldr	r2, [r7, #16]
 801d64e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d650:	687b      	ldr	r3, [r7, #4]
 801d652:	68fa      	ldr	r2, [r7, #12]
 801d654:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801d656:	683b      	ldr	r3, [r7, #0]
 801d658:	685a      	ldr	r2, [r3, #4]
 801d65a:	687b      	ldr	r3, [r7, #4]
 801d65c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d65e:	687b      	ldr	r3, [r7, #4]
 801d660:	697a      	ldr	r2, [r7, #20]
 801d662:	621a      	str	r2, [r3, #32]
}
 801d664:	bf00      	nop
 801d666:	371c      	adds	r7, #28
 801d668:	46bd      	mov	sp, r7
 801d66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d66e:	4770      	bx	lr
 801d670:	40010000 	.word	0x40010000
 801d674:	40010400 	.word	0x40010400

0801d678 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d678:	b480      	push	{r7}
 801d67a:	b087      	sub	sp, #28
 801d67c:	af00      	add	r7, sp, #0
 801d67e:	6078      	str	r0, [r7, #4]
 801d680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801d682:	687b      	ldr	r3, [r7, #4]
 801d684:	6a1b      	ldr	r3, [r3, #32]
 801d686:	f023 0210 	bic.w	r2, r3, #16
 801d68a:	687b      	ldr	r3, [r7, #4]
 801d68c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d68e:	687b      	ldr	r3, [r7, #4]
 801d690:	6a1b      	ldr	r3, [r3, #32]
 801d692:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d694:	687b      	ldr	r3, [r7, #4]
 801d696:	685b      	ldr	r3, [r3, #4]
 801d698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d69a:	687b      	ldr	r3, [r7, #4]
 801d69c:	699b      	ldr	r3, [r3, #24]
 801d69e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801d6a0:	68fb      	ldr	r3, [r7, #12]
 801d6a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801d6a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801d6a8:	68fb      	ldr	r3, [r7, #12]
 801d6aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d6ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d6b0:	683b      	ldr	r3, [r7, #0]
 801d6b2:	681b      	ldr	r3, [r3, #0]
 801d6b4:	021b      	lsls	r3, r3, #8
 801d6b6:	68fa      	ldr	r2, [r7, #12]
 801d6b8:	4313      	orrs	r3, r2
 801d6ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801d6bc:	697b      	ldr	r3, [r7, #20]
 801d6be:	f023 0320 	bic.w	r3, r3, #32
 801d6c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801d6c4:	683b      	ldr	r3, [r7, #0]
 801d6c6:	689b      	ldr	r3, [r3, #8]
 801d6c8:	011b      	lsls	r3, r3, #4
 801d6ca:	697a      	ldr	r2, [r7, #20]
 801d6cc:	4313      	orrs	r3, r2
 801d6ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801d6d0:	687b      	ldr	r3, [r7, #4]
 801d6d2:	4a22      	ldr	r2, [pc, #136]	; (801d75c <TIM_OC2_SetConfig+0xe4>)
 801d6d4:	4293      	cmp	r3, r2
 801d6d6:	d003      	beq.n	801d6e0 <TIM_OC2_SetConfig+0x68>
 801d6d8:	687b      	ldr	r3, [r7, #4]
 801d6da:	4a21      	ldr	r2, [pc, #132]	; (801d760 <TIM_OC2_SetConfig+0xe8>)
 801d6dc:	4293      	cmp	r3, r2
 801d6de:	d10d      	bne.n	801d6fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801d6e0:	697b      	ldr	r3, [r7, #20]
 801d6e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801d6e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801d6e8:	683b      	ldr	r3, [r7, #0]
 801d6ea:	68db      	ldr	r3, [r3, #12]
 801d6ec:	011b      	lsls	r3, r3, #4
 801d6ee:	697a      	ldr	r2, [r7, #20]
 801d6f0:	4313      	orrs	r3, r2
 801d6f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801d6f4:	697b      	ldr	r3, [r7, #20]
 801d6f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801d6fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d6fc:	687b      	ldr	r3, [r7, #4]
 801d6fe:	4a17      	ldr	r2, [pc, #92]	; (801d75c <TIM_OC2_SetConfig+0xe4>)
 801d700:	4293      	cmp	r3, r2
 801d702:	d003      	beq.n	801d70c <TIM_OC2_SetConfig+0x94>
 801d704:	687b      	ldr	r3, [r7, #4]
 801d706:	4a16      	ldr	r2, [pc, #88]	; (801d760 <TIM_OC2_SetConfig+0xe8>)
 801d708:	4293      	cmp	r3, r2
 801d70a:	d113      	bne.n	801d734 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801d70c:	693b      	ldr	r3, [r7, #16]
 801d70e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801d712:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801d714:	693b      	ldr	r3, [r7, #16]
 801d716:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801d71a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801d71c:	683b      	ldr	r3, [r7, #0]
 801d71e:	695b      	ldr	r3, [r3, #20]
 801d720:	009b      	lsls	r3, r3, #2
 801d722:	693a      	ldr	r2, [r7, #16]
 801d724:	4313      	orrs	r3, r2
 801d726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801d728:	683b      	ldr	r3, [r7, #0]
 801d72a:	699b      	ldr	r3, [r3, #24]
 801d72c:	009b      	lsls	r3, r3, #2
 801d72e:	693a      	ldr	r2, [r7, #16]
 801d730:	4313      	orrs	r3, r2
 801d732:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d734:	687b      	ldr	r3, [r7, #4]
 801d736:	693a      	ldr	r2, [r7, #16]
 801d738:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d73a:	687b      	ldr	r3, [r7, #4]
 801d73c:	68fa      	ldr	r2, [r7, #12]
 801d73e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801d740:	683b      	ldr	r3, [r7, #0]
 801d742:	685a      	ldr	r2, [r3, #4]
 801d744:	687b      	ldr	r3, [r7, #4]
 801d746:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d748:	687b      	ldr	r3, [r7, #4]
 801d74a:	697a      	ldr	r2, [r7, #20]
 801d74c:	621a      	str	r2, [r3, #32]
}
 801d74e:	bf00      	nop
 801d750:	371c      	adds	r7, #28
 801d752:	46bd      	mov	sp, r7
 801d754:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d758:	4770      	bx	lr
 801d75a:	bf00      	nop
 801d75c:	40010000 	.word	0x40010000
 801d760:	40010400 	.word	0x40010400

0801d764 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d764:	b480      	push	{r7}
 801d766:	b087      	sub	sp, #28
 801d768:	af00      	add	r7, sp, #0
 801d76a:	6078      	str	r0, [r7, #4]
 801d76c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801d76e:	687b      	ldr	r3, [r7, #4]
 801d770:	6a1b      	ldr	r3, [r3, #32]
 801d772:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801d776:	687b      	ldr	r3, [r7, #4]
 801d778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d77a:	687b      	ldr	r3, [r7, #4]
 801d77c:	6a1b      	ldr	r3, [r3, #32]
 801d77e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d780:	687b      	ldr	r3, [r7, #4]
 801d782:	685b      	ldr	r3, [r3, #4]
 801d784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801d786:	687b      	ldr	r3, [r7, #4]
 801d788:	69db      	ldr	r3, [r3, #28]
 801d78a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801d78c:	68fb      	ldr	r3, [r7, #12]
 801d78e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801d794:	68fb      	ldr	r3, [r7, #12]
 801d796:	f023 0303 	bic.w	r3, r3, #3
 801d79a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d79c:	683b      	ldr	r3, [r7, #0]
 801d79e:	681b      	ldr	r3, [r3, #0]
 801d7a0:	68fa      	ldr	r2, [r7, #12]
 801d7a2:	4313      	orrs	r3, r2
 801d7a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801d7a6:	697b      	ldr	r3, [r7, #20]
 801d7a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801d7ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801d7ae:	683b      	ldr	r3, [r7, #0]
 801d7b0:	689b      	ldr	r3, [r3, #8]
 801d7b2:	021b      	lsls	r3, r3, #8
 801d7b4:	697a      	ldr	r2, [r7, #20]
 801d7b6:	4313      	orrs	r3, r2
 801d7b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801d7ba:	687b      	ldr	r3, [r7, #4]
 801d7bc:	4a21      	ldr	r2, [pc, #132]	; (801d844 <TIM_OC3_SetConfig+0xe0>)
 801d7be:	4293      	cmp	r3, r2
 801d7c0:	d003      	beq.n	801d7ca <TIM_OC3_SetConfig+0x66>
 801d7c2:	687b      	ldr	r3, [r7, #4]
 801d7c4:	4a20      	ldr	r2, [pc, #128]	; (801d848 <TIM_OC3_SetConfig+0xe4>)
 801d7c6:	4293      	cmp	r3, r2
 801d7c8:	d10d      	bne.n	801d7e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801d7ca:	697b      	ldr	r3, [r7, #20]
 801d7cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801d7d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801d7d2:	683b      	ldr	r3, [r7, #0]
 801d7d4:	68db      	ldr	r3, [r3, #12]
 801d7d6:	021b      	lsls	r3, r3, #8
 801d7d8:	697a      	ldr	r2, [r7, #20]
 801d7da:	4313      	orrs	r3, r2
 801d7dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801d7de:	697b      	ldr	r3, [r7, #20]
 801d7e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801d7e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d7e6:	687b      	ldr	r3, [r7, #4]
 801d7e8:	4a16      	ldr	r2, [pc, #88]	; (801d844 <TIM_OC3_SetConfig+0xe0>)
 801d7ea:	4293      	cmp	r3, r2
 801d7ec:	d003      	beq.n	801d7f6 <TIM_OC3_SetConfig+0x92>
 801d7ee:	687b      	ldr	r3, [r7, #4]
 801d7f0:	4a15      	ldr	r2, [pc, #84]	; (801d848 <TIM_OC3_SetConfig+0xe4>)
 801d7f2:	4293      	cmp	r3, r2
 801d7f4:	d113      	bne.n	801d81e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801d7f6:	693b      	ldr	r3, [r7, #16]
 801d7f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d7fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801d7fe:	693b      	ldr	r3, [r7, #16]
 801d800:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801d804:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801d806:	683b      	ldr	r3, [r7, #0]
 801d808:	695b      	ldr	r3, [r3, #20]
 801d80a:	011b      	lsls	r3, r3, #4
 801d80c:	693a      	ldr	r2, [r7, #16]
 801d80e:	4313      	orrs	r3, r2
 801d810:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801d812:	683b      	ldr	r3, [r7, #0]
 801d814:	699b      	ldr	r3, [r3, #24]
 801d816:	011b      	lsls	r3, r3, #4
 801d818:	693a      	ldr	r2, [r7, #16]
 801d81a:	4313      	orrs	r3, r2
 801d81c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d81e:	687b      	ldr	r3, [r7, #4]
 801d820:	693a      	ldr	r2, [r7, #16]
 801d822:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801d824:	687b      	ldr	r3, [r7, #4]
 801d826:	68fa      	ldr	r2, [r7, #12]
 801d828:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801d82a:	683b      	ldr	r3, [r7, #0]
 801d82c:	685a      	ldr	r2, [r3, #4]
 801d82e:	687b      	ldr	r3, [r7, #4]
 801d830:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d832:	687b      	ldr	r3, [r7, #4]
 801d834:	697a      	ldr	r2, [r7, #20]
 801d836:	621a      	str	r2, [r3, #32]
}
 801d838:	bf00      	nop
 801d83a:	371c      	adds	r7, #28
 801d83c:	46bd      	mov	sp, r7
 801d83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d842:	4770      	bx	lr
 801d844:	40010000 	.word	0x40010000
 801d848:	40010400 	.word	0x40010400

0801d84c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d84c:	b480      	push	{r7}
 801d84e:	b087      	sub	sp, #28
 801d850:	af00      	add	r7, sp, #0
 801d852:	6078      	str	r0, [r7, #4]
 801d854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801d856:	687b      	ldr	r3, [r7, #4]
 801d858:	6a1b      	ldr	r3, [r3, #32]
 801d85a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801d85e:	687b      	ldr	r3, [r7, #4]
 801d860:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d862:	687b      	ldr	r3, [r7, #4]
 801d864:	6a1b      	ldr	r3, [r3, #32]
 801d866:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d868:	687b      	ldr	r3, [r7, #4]
 801d86a:	685b      	ldr	r3, [r3, #4]
 801d86c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801d86e:	687b      	ldr	r3, [r7, #4]
 801d870:	69db      	ldr	r3, [r3, #28]
 801d872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801d874:	68fb      	ldr	r3, [r7, #12]
 801d876:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801d87a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801d87c:	68fb      	ldr	r3, [r7, #12]
 801d87e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d882:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d884:	683b      	ldr	r3, [r7, #0]
 801d886:	681b      	ldr	r3, [r3, #0]
 801d888:	021b      	lsls	r3, r3, #8
 801d88a:	68fa      	ldr	r2, [r7, #12]
 801d88c:	4313      	orrs	r3, r2
 801d88e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801d890:	693b      	ldr	r3, [r7, #16]
 801d892:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801d896:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801d898:	683b      	ldr	r3, [r7, #0]
 801d89a:	689b      	ldr	r3, [r3, #8]
 801d89c:	031b      	lsls	r3, r3, #12
 801d89e:	693a      	ldr	r2, [r7, #16]
 801d8a0:	4313      	orrs	r3, r2
 801d8a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d8a4:	687b      	ldr	r3, [r7, #4]
 801d8a6:	4a12      	ldr	r2, [pc, #72]	; (801d8f0 <TIM_OC4_SetConfig+0xa4>)
 801d8a8:	4293      	cmp	r3, r2
 801d8aa:	d003      	beq.n	801d8b4 <TIM_OC4_SetConfig+0x68>
 801d8ac:	687b      	ldr	r3, [r7, #4]
 801d8ae:	4a11      	ldr	r2, [pc, #68]	; (801d8f4 <TIM_OC4_SetConfig+0xa8>)
 801d8b0:	4293      	cmp	r3, r2
 801d8b2:	d109      	bne.n	801d8c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801d8b4:	697b      	ldr	r3, [r7, #20]
 801d8b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801d8ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801d8bc:	683b      	ldr	r3, [r7, #0]
 801d8be:	695b      	ldr	r3, [r3, #20]
 801d8c0:	019b      	lsls	r3, r3, #6
 801d8c2:	697a      	ldr	r2, [r7, #20]
 801d8c4:	4313      	orrs	r3, r2
 801d8c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d8c8:	687b      	ldr	r3, [r7, #4]
 801d8ca:	697a      	ldr	r2, [r7, #20]
 801d8cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801d8ce:	687b      	ldr	r3, [r7, #4]
 801d8d0:	68fa      	ldr	r2, [r7, #12]
 801d8d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801d8d4:	683b      	ldr	r3, [r7, #0]
 801d8d6:	685a      	ldr	r2, [r3, #4]
 801d8d8:	687b      	ldr	r3, [r7, #4]
 801d8da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d8dc:	687b      	ldr	r3, [r7, #4]
 801d8de:	693a      	ldr	r2, [r7, #16]
 801d8e0:	621a      	str	r2, [r3, #32]
}
 801d8e2:	bf00      	nop
 801d8e4:	371c      	adds	r7, #28
 801d8e6:	46bd      	mov	sp, r7
 801d8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8ec:	4770      	bx	lr
 801d8ee:	bf00      	nop
 801d8f0:	40010000 	.word	0x40010000
 801d8f4:	40010400 	.word	0x40010400

0801d8f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801d8f8:	b480      	push	{r7}
 801d8fa:	b087      	sub	sp, #28
 801d8fc:	af00      	add	r7, sp, #0
 801d8fe:	60f8      	str	r0, [r7, #12]
 801d900:	60b9      	str	r1, [r7, #8]
 801d902:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801d904:	68fb      	ldr	r3, [r7, #12]
 801d906:	6a1b      	ldr	r3, [r3, #32]
 801d908:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801d90a:	68fb      	ldr	r3, [r7, #12]
 801d90c:	6a1b      	ldr	r3, [r3, #32]
 801d90e:	f023 0201 	bic.w	r2, r3, #1
 801d912:	68fb      	ldr	r3, [r7, #12]
 801d914:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801d916:	68fb      	ldr	r3, [r7, #12]
 801d918:	699b      	ldr	r3, [r3, #24]
 801d91a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801d91c:	693b      	ldr	r3, [r7, #16]
 801d91e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801d922:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801d924:	687b      	ldr	r3, [r7, #4]
 801d926:	011b      	lsls	r3, r3, #4
 801d928:	693a      	ldr	r2, [r7, #16]
 801d92a:	4313      	orrs	r3, r2
 801d92c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801d92e:	697b      	ldr	r3, [r7, #20]
 801d930:	f023 030a 	bic.w	r3, r3, #10
 801d934:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801d936:	697a      	ldr	r2, [r7, #20]
 801d938:	68bb      	ldr	r3, [r7, #8]
 801d93a:	4313      	orrs	r3, r2
 801d93c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801d93e:	68fb      	ldr	r3, [r7, #12]
 801d940:	693a      	ldr	r2, [r7, #16]
 801d942:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801d944:	68fb      	ldr	r3, [r7, #12]
 801d946:	697a      	ldr	r2, [r7, #20]
 801d948:	621a      	str	r2, [r3, #32]
}
 801d94a:	bf00      	nop
 801d94c:	371c      	adds	r7, #28
 801d94e:	46bd      	mov	sp, r7
 801d950:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d954:	4770      	bx	lr

0801d956 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801d956:	b480      	push	{r7}
 801d958:	b087      	sub	sp, #28
 801d95a:	af00      	add	r7, sp, #0
 801d95c:	60f8      	str	r0, [r7, #12]
 801d95e:	60b9      	str	r1, [r7, #8]
 801d960:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801d962:	68fb      	ldr	r3, [r7, #12]
 801d964:	6a1b      	ldr	r3, [r3, #32]
 801d966:	f023 0210 	bic.w	r2, r3, #16
 801d96a:	68fb      	ldr	r3, [r7, #12]
 801d96c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801d96e:	68fb      	ldr	r3, [r7, #12]
 801d970:	699b      	ldr	r3, [r3, #24]
 801d972:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801d974:	68fb      	ldr	r3, [r7, #12]
 801d976:	6a1b      	ldr	r3, [r3, #32]
 801d978:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801d97a:	697b      	ldr	r3, [r7, #20]
 801d97c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801d980:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801d982:	687b      	ldr	r3, [r7, #4]
 801d984:	031b      	lsls	r3, r3, #12
 801d986:	697a      	ldr	r2, [r7, #20]
 801d988:	4313      	orrs	r3, r2
 801d98a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801d98c:	693b      	ldr	r3, [r7, #16]
 801d98e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801d992:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801d994:	68bb      	ldr	r3, [r7, #8]
 801d996:	011b      	lsls	r3, r3, #4
 801d998:	693a      	ldr	r2, [r7, #16]
 801d99a:	4313      	orrs	r3, r2
 801d99c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801d99e:	68fb      	ldr	r3, [r7, #12]
 801d9a0:	697a      	ldr	r2, [r7, #20]
 801d9a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801d9a4:	68fb      	ldr	r3, [r7, #12]
 801d9a6:	693a      	ldr	r2, [r7, #16]
 801d9a8:	621a      	str	r2, [r3, #32]
}
 801d9aa:	bf00      	nop
 801d9ac:	371c      	adds	r7, #28
 801d9ae:	46bd      	mov	sp, r7
 801d9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9b4:	4770      	bx	lr

0801d9b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801d9b6:	b480      	push	{r7}
 801d9b8:	b085      	sub	sp, #20
 801d9ba:	af00      	add	r7, sp, #0
 801d9bc:	6078      	str	r0, [r7, #4]
 801d9be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801d9c0:	687b      	ldr	r3, [r7, #4]
 801d9c2:	689b      	ldr	r3, [r3, #8]
 801d9c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801d9c6:	68fb      	ldr	r3, [r7, #12]
 801d9c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d9cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801d9ce:	683a      	ldr	r2, [r7, #0]
 801d9d0:	68fb      	ldr	r3, [r7, #12]
 801d9d2:	4313      	orrs	r3, r2
 801d9d4:	f043 0307 	orr.w	r3, r3, #7
 801d9d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801d9da:	687b      	ldr	r3, [r7, #4]
 801d9dc:	68fa      	ldr	r2, [r7, #12]
 801d9de:	609a      	str	r2, [r3, #8]
}
 801d9e0:	bf00      	nop
 801d9e2:	3714      	adds	r7, #20
 801d9e4:	46bd      	mov	sp, r7
 801d9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9ea:	4770      	bx	lr

0801d9ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801d9ec:	b480      	push	{r7}
 801d9ee:	b087      	sub	sp, #28
 801d9f0:	af00      	add	r7, sp, #0
 801d9f2:	60f8      	str	r0, [r7, #12]
 801d9f4:	60b9      	str	r1, [r7, #8]
 801d9f6:	607a      	str	r2, [r7, #4]
 801d9f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801d9fa:	68fb      	ldr	r3, [r7, #12]
 801d9fc:	689b      	ldr	r3, [r3, #8]
 801d9fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801da00:	697b      	ldr	r3, [r7, #20]
 801da02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801da06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801da08:	683b      	ldr	r3, [r7, #0]
 801da0a:	021a      	lsls	r2, r3, #8
 801da0c:	687b      	ldr	r3, [r7, #4]
 801da0e:	431a      	orrs	r2, r3
 801da10:	68bb      	ldr	r3, [r7, #8]
 801da12:	4313      	orrs	r3, r2
 801da14:	697a      	ldr	r2, [r7, #20]
 801da16:	4313      	orrs	r3, r2
 801da18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801da1a:	68fb      	ldr	r3, [r7, #12]
 801da1c:	697a      	ldr	r2, [r7, #20]
 801da1e:	609a      	str	r2, [r3, #8]
}
 801da20:	bf00      	nop
 801da22:	371c      	adds	r7, #28
 801da24:	46bd      	mov	sp, r7
 801da26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da2a:	4770      	bx	lr

0801da2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801da2c:	b480      	push	{r7}
 801da2e:	b085      	sub	sp, #20
 801da30:	af00      	add	r7, sp, #0
 801da32:	6078      	str	r0, [r7, #4]
 801da34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801da36:	687b      	ldr	r3, [r7, #4]
 801da38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801da3c:	2b01      	cmp	r3, #1
 801da3e:	d101      	bne.n	801da44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801da40:	2302      	movs	r3, #2
 801da42:	e05a      	b.n	801dafa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 801da44:	687b      	ldr	r3, [r7, #4]
 801da46:	2201      	movs	r2, #1
 801da48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801da4c:	687b      	ldr	r3, [r7, #4]
 801da4e:	2202      	movs	r2, #2
 801da50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801da54:	687b      	ldr	r3, [r7, #4]
 801da56:	681b      	ldr	r3, [r3, #0]
 801da58:	685b      	ldr	r3, [r3, #4]
 801da5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801da5c:	687b      	ldr	r3, [r7, #4]
 801da5e:	681b      	ldr	r3, [r3, #0]
 801da60:	689b      	ldr	r3, [r3, #8]
 801da62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801da64:	68fb      	ldr	r3, [r7, #12]
 801da66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801da6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801da6c:	683b      	ldr	r3, [r7, #0]
 801da6e:	681b      	ldr	r3, [r3, #0]
 801da70:	68fa      	ldr	r2, [r7, #12]
 801da72:	4313      	orrs	r3, r2
 801da74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801da76:	687b      	ldr	r3, [r7, #4]
 801da78:	681b      	ldr	r3, [r3, #0]
 801da7a:	68fa      	ldr	r2, [r7, #12]
 801da7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801da7e:	687b      	ldr	r3, [r7, #4]
 801da80:	681b      	ldr	r3, [r3, #0]
 801da82:	4a21      	ldr	r2, [pc, #132]	; (801db08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 801da84:	4293      	cmp	r3, r2
 801da86:	d022      	beq.n	801dace <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801da88:	687b      	ldr	r3, [r7, #4]
 801da8a:	681b      	ldr	r3, [r3, #0]
 801da8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801da90:	d01d      	beq.n	801dace <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801da92:	687b      	ldr	r3, [r7, #4]
 801da94:	681b      	ldr	r3, [r3, #0]
 801da96:	4a1d      	ldr	r2, [pc, #116]	; (801db0c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 801da98:	4293      	cmp	r3, r2
 801da9a:	d018      	beq.n	801dace <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801da9c:	687b      	ldr	r3, [r7, #4]
 801da9e:	681b      	ldr	r3, [r3, #0]
 801daa0:	4a1b      	ldr	r2, [pc, #108]	; (801db10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801daa2:	4293      	cmp	r3, r2
 801daa4:	d013      	beq.n	801dace <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801daa6:	687b      	ldr	r3, [r7, #4]
 801daa8:	681b      	ldr	r3, [r3, #0]
 801daaa:	4a1a      	ldr	r2, [pc, #104]	; (801db14 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 801daac:	4293      	cmp	r3, r2
 801daae:	d00e      	beq.n	801dace <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801dab0:	687b      	ldr	r3, [r7, #4]
 801dab2:	681b      	ldr	r3, [r3, #0]
 801dab4:	4a18      	ldr	r2, [pc, #96]	; (801db18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801dab6:	4293      	cmp	r3, r2
 801dab8:	d009      	beq.n	801dace <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801daba:	687b      	ldr	r3, [r7, #4]
 801dabc:	681b      	ldr	r3, [r3, #0]
 801dabe:	4a17      	ldr	r2, [pc, #92]	; (801db1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 801dac0:	4293      	cmp	r3, r2
 801dac2:	d004      	beq.n	801dace <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801dac4:	687b      	ldr	r3, [r7, #4]
 801dac6:	681b      	ldr	r3, [r3, #0]
 801dac8:	4a15      	ldr	r2, [pc, #84]	; (801db20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 801daca:	4293      	cmp	r3, r2
 801dacc:	d10c      	bne.n	801dae8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801dace:	68bb      	ldr	r3, [r7, #8]
 801dad0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801dad4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801dad6:	683b      	ldr	r3, [r7, #0]
 801dad8:	685b      	ldr	r3, [r3, #4]
 801dada:	68ba      	ldr	r2, [r7, #8]
 801dadc:	4313      	orrs	r3, r2
 801dade:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801dae0:	687b      	ldr	r3, [r7, #4]
 801dae2:	681b      	ldr	r3, [r3, #0]
 801dae4:	68ba      	ldr	r2, [r7, #8]
 801dae6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801dae8:	687b      	ldr	r3, [r7, #4]
 801daea:	2201      	movs	r2, #1
 801daec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801daf0:	687b      	ldr	r3, [r7, #4]
 801daf2:	2200      	movs	r2, #0
 801daf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801daf8:	2300      	movs	r3, #0
}
 801dafa:	4618      	mov	r0, r3
 801dafc:	3714      	adds	r7, #20
 801dafe:	46bd      	mov	sp, r7
 801db00:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db04:	4770      	bx	lr
 801db06:	bf00      	nop
 801db08:	40010000 	.word	0x40010000
 801db0c:	40000400 	.word	0x40000400
 801db10:	40000800 	.word	0x40000800
 801db14:	40000c00 	.word	0x40000c00
 801db18:	40010400 	.word	0x40010400
 801db1c:	40014000 	.word	0x40014000
 801db20:	40001800 	.word	0x40001800

0801db24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801db24:	b480      	push	{r7}
 801db26:	b083      	sub	sp, #12
 801db28:	af00      	add	r7, sp, #0
 801db2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801db2c:	bf00      	nop
 801db2e:	370c      	adds	r7, #12
 801db30:	46bd      	mov	sp, r7
 801db32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db36:	4770      	bx	lr

0801db38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801db38:	b480      	push	{r7}
 801db3a:	b083      	sub	sp, #12
 801db3c:	af00      	add	r7, sp, #0
 801db3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801db40:	bf00      	nop
 801db42:	370c      	adds	r7, #12
 801db44:	46bd      	mov	sp, r7
 801db46:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db4a:	4770      	bx	lr

0801db4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801db4c:	b084      	sub	sp, #16
 801db4e:	b580      	push	{r7, lr}
 801db50:	b084      	sub	sp, #16
 801db52:	af00      	add	r7, sp, #0
 801db54:	6078      	str	r0, [r7, #4]
 801db56:	f107 001c 	add.w	r0, r7, #28
 801db5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801db5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801db60:	2b01      	cmp	r3, #1
 801db62:	d122      	bne.n	801dbaa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801db64:	687b      	ldr	r3, [r7, #4]
 801db66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801db68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801db6c:	687b      	ldr	r3, [r7, #4]
 801db6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801db70:	687b      	ldr	r3, [r7, #4]
 801db72:	68db      	ldr	r3, [r3, #12]
 801db74:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 801db78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801db7c:	687a      	ldr	r2, [r7, #4]
 801db7e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801db80:	687b      	ldr	r3, [r7, #4]
 801db82:	68db      	ldr	r3, [r3, #12]
 801db84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801db88:	687b      	ldr	r3, [r7, #4]
 801db8a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801db8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801db8e:	2b01      	cmp	r3, #1
 801db90:	d105      	bne.n	801db9e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801db92:	687b      	ldr	r3, [r7, #4]
 801db94:	68db      	ldr	r3, [r3, #12]
 801db96:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801db9a:	687b      	ldr	r3, [r7, #4]
 801db9c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801db9e:	6878      	ldr	r0, [r7, #4]
 801dba0:	f001 fb16 	bl	801f1d0 <USB_CoreReset>
 801dba4:	4603      	mov	r3, r0
 801dba6:	73fb      	strb	r3, [r7, #15]
 801dba8:	e01a      	b.n	801dbe0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801dbaa:	687b      	ldr	r3, [r7, #4]
 801dbac:	68db      	ldr	r3, [r3, #12]
 801dbae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801dbb2:	687b      	ldr	r3, [r7, #4]
 801dbb4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801dbb6:	6878      	ldr	r0, [r7, #4]
 801dbb8:	f001 fb0a 	bl	801f1d0 <USB_CoreReset>
 801dbbc:	4603      	mov	r3, r0
 801dbbe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801dbc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801dbc2:	2b00      	cmp	r3, #0
 801dbc4:	d106      	bne.n	801dbd4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801dbc6:	687b      	ldr	r3, [r7, #4]
 801dbc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dbca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801dbce:	687b      	ldr	r3, [r7, #4]
 801dbd0:	639a      	str	r2, [r3, #56]	; 0x38
 801dbd2:	e005      	b.n	801dbe0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801dbd4:	687b      	ldr	r3, [r7, #4]
 801dbd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dbd8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801dbdc:	687b      	ldr	r3, [r7, #4]
 801dbde:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801dbe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dbe2:	2b01      	cmp	r3, #1
 801dbe4:	d10b      	bne.n	801dbfe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801dbe6:	687b      	ldr	r3, [r7, #4]
 801dbe8:	689b      	ldr	r3, [r3, #8]
 801dbea:	f043 0206 	orr.w	r2, r3, #6
 801dbee:	687b      	ldr	r3, [r7, #4]
 801dbf0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801dbf2:	687b      	ldr	r3, [r7, #4]
 801dbf4:	689b      	ldr	r3, [r3, #8]
 801dbf6:	f043 0220 	orr.w	r2, r3, #32
 801dbfa:	687b      	ldr	r3, [r7, #4]
 801dbfc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801dbfe:	7bfb      	ldrb	r3, [r7, #15]
}
 801dc00:	4618      	mov	r0, r3
 801dc02:	3710      	adds	r7, #16
 801dc04:	46bd      	mov	sp, r7
 801dc06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801dc0a:	b004      	add	sp, #16
 801dc0c:	4770      	bx	lr
	...

0801dc10 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801dc10:	b480      	push	{r7}
 801dc12:	b087      	sub	sp, #28
 801dc14:	af00      	add	r7, sp, #0
 801dc16:	60f8      	str	r0, [r7, #12]
 801dc18:	60b9      	str	r1, [r7, #8]
 801dc1a:	4613      	mov	r3, r2
 801dc1c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801dc1e:	79fb      	ldrb	r3, [r7, #7]
 801dc20:	2b02      	cmp	r3, #2
 801dc22:	d165      	bne.n	801dcf0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801dc24:	68bb      	ldr	r3, [r7, #8]
 801dc26:	4a41      	ldr	r2, [pc, #260]	; (801dd2c <USB_SetTurnaroundTime+0x11c>)
 801dc28:	4293      	cmp	r3, r2
 801dc2a:	d906      	bls.n	801dc3a <USB_SetTurnaroundTime+0x2a>
 801dc2c:	68bb      	ldr	r3, [r7, #8]
 801dc2e:	4a40      	ldr	r2, [pc, #256]	; (801dd30 <USB_SetTurnaroundTime+0x120>)
 801dc30:	4293      	cmp	r3, r2
 801dc32:	d202      	bcs.n	801dc3a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801dc34:	230f      	movs	r3, #15
 801dc36:	617b      	str	r3, [r7, #20]
 801dc38:	e062      	b.n	801dd00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801dc3a:	68bb      	ldr	r3, [r7, #8]
 801dc3c:	4a3c      	ldr	r2, [pc, #240]	; (801dd30 <USB_SetTurnaroundTime+0x120>)
 801dc3e:	4293      	cmp	r3, r2
 801dc40:	d306      	bcc.n	801dc50 <USB_SetTurnaroundTime+0x40>
 801dc42:	68bb      	ldr	r3, [r7, #8]
 801dc44:	4a3b      	ldr	r2, [pc, #236]	; (801dd34 <USB_SetTurnaroundTime+0x124>)
 801dc46:	4293      	cmp	r3, r2
 801dc48:	d202      	bcs.n	801dc50 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801dc4a:	230e      	movs	r3, #14
 801dc4c:	617b      	str	r3, [r7, #20]
 801dc4e:	e057      	b.n	801dd00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801dc50:	68bb      	ldr	r3, [r7, #8]
 801dc52:	4a38      	ldr	r2, [pc, #224]	; (801dd34 <USB_SetTurnaroundTime+0x124>)
 801dc54:	4293      	cmp	r3, r2
 801dc56:	d306      	bcc.n	801dc66 <USB_SetTurnaroundTime+0x56>
 801dc58:	68bb      	ldr	r3, [r7, #8]
 801dc5a:	4a37      	ldr	r2, [pc, #220]	; (801dd38 <USB_SetTurnaroundTime+0x128>)
 801dc5c:	4293      	cmp	r3, r2
 801dc5e:	d202      	bcs.n	801dc66 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801dc60:	230d      	movs	r3, #13
 801dc62:	617b      	str	r3, [r7, #20]
 801dc64:	e04c      	b.n	801dd00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801dc66:	68bb      	ldr	r3, [r7, #8]
 801dc68:	4a33      	ldr	r2, [pc, #204]	; (801dd38 <USB_SetTurnaroundTime+0x128>)
 801dc6a:	4293      	cmp	r3, r2
 801dc6c:	d306      	bcc.n	801dc7c <USB_SetTurnaroundTime+0x6c>
 801dc6e:	68bb      	ldr	r3, [r7, #8]
 801dc70:	4a32      	ldr	r2, [pc, #200]	; (801dd3c <USB_SetTurnaroundTime+0x12c>)
 801dc72:	4293      	cmp	r3, r2
 801dc74:	d802      	bhi.n	801dc7c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801dc76:	230c      	movs	r3, #12
 801dc78:	617b      	str	r3, [r7, #20]
 801dc7a:	e041      	b.n	801dd00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 801dc7c:	68bb      	ldr	r3, [r7, #8]
 801dc7e:	4a2f      	ldr	r2, [pc, #188]	; (801dd3c <USB_SetTurnaroundTime+0x12c>)
 801dc80:	4293      	cmp	r3, r2
 801dc82:	d906      	bls.n	801dc92 <USB_SetTurnaroundTime+0x82>
 801dc84:	68bb      	ldr	r3, [r7, #8]
 801dc86:	4a2e      	ldr	r2, [pc, #184]	; (801dd40 <USB_SetTurnaroundTime+0x130>)
 801dc88:	4293      	cmp	r3, r2
 801dc8a:	d802      	bhi.n	801dc92 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 801dc8c:	230b      	movs	r3, #11
 801dc8e:	617b      	str	r3, [r7, #20]
 801dc90:	e036      	b.n	801dd00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801dc92:	68bb      	ldr	r3, [r7, #8]
 801dc94:	4a2a      	ldr	r2, [pc, #168]	; (801dd40 <USB_SetTurnaroundTime+0x130>)
 801dc96:	4293      	cmp	r3, r2
 801dc98:	d906      	bls.n	801dca8 <USB_SetTurnaroundTime+0x98>
 801dc9a:	68bb      	ldr	r3, [r7, #8]
 801dc9c:	4a29      	ldr	r2, [pc, #164]	; (801dd44 <USB_SetTurnaroundTime+0x134>)
 801dc9e:	4293      	cmp	r3, r2
 801dca0:	d802      	bhi.n	801dca8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801dca2:	230a      	movs	r3, #10
 801dca4:	617b      	str	r3, [r7, #20]
 801dca6:	e02b      	b.n	801dd00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801dca8:	68bb      	ldr	r3, [r7, #8]
 801dcaa:	4a26      	ldr	r2, [pc, #152]	; (801dd44 <USB_SetTurnaroundTime+0x134>)
 801dcac:	4293      	cmp	r3, r2
 801dcae:	d906      	bls.n	801dcbe <USB_SetTurnaroundTime+0xae>
 801dcb0:	68bb      	ldr	r3, [r7, #8]
 801dcb2:	4a25      	ldr	r2, [pc, #148]	; (801dd48 <USB_SetTurnaroundTime+0x138>)
 801dcb4:	4293      	cmp	r3, r2
 801dcb6:	d202      	bcs.n	801dcbe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801dcb8:	2309      	movs	r3, #9
 801dcba:	617b      	str	r3, [r7, #20]
 801dcbc:	e020      	b.n	801dd00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801dcbe:	68bb      	ldr	r3, [r7, #8]
 801dcc0:	4a21      	ldr	r2, [pc, #132]	; (801dd48 <USB_SetTurnaroundTime+0x138>)
 801dcc2:	4293      	cmp	r3, r2
 801dcc4:	d306      	bcc.n	801dcd4 <USB_SetTurnaroundTime+0xc4>
 801dcc6:	68bb      	ldr	r3, [r7, #8]
 801dcc8:	4a20      	ldr	r2, [pc, #128]	; (801dd4c <USB_SetTurnaroundTime+0x13c>)
 801dcca:	4293      	cmp	r3, r2
 801dccc:	d802      	bhi.n	801dcd4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801dcce:	2308      	movs	r3, #8
 801dcd0:	617b      	str	r3, [r7, #20]
 801dcd2:	e015      	b.n	801dd00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801dcd4:	68bb      	ldr	r3, [r7, #8]
 801dcd6:	4a1d      	ldr	r2, [pc, #116]	; (801dd4c <USB_SetTurnaroundTime+0x13c>)
 801dcd8:	4293      	cmp	r3, r2
 801dcda:	d906      	bls.n	801dcea <USB_SetTurnaroundTime+0xda>
 801dcdc:	68bb      	ldr	r3, [r7, #8]
 801dcde:	4a1c      	ldr	r2, [pc, #112]	; (801dd50 <USB_SetTurnaroundTime+0x140>)
 801dce0:	4293      	cmp	r3, r2
 801dce2:	d202      	bcs.n	801dcea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 801dce4:	2307      	movs	r3, #7
 801dce6:	617b      	str	r3, [r7, #20]
 801dce8:	e00a      	b.n	801dd00 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801dcea:	2306      	movs	r3, #6
 801dcec:	617b      	str	r3, [r7, #20]
 801dcee:	e007      	b.n	801dd00 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 801dcf0:	79fb      	ldrb	r3, [r7, #7]
 801dcf2:	2b00      	cmp	r3, #0
 801dcf4:	d102      	bne.n	801dcfc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801dcf6:	2309      	movs	r3, #9
 801dcf8:	617b      	str	r3, [r7, #20]
 801dcfa:	e001      	b.n	801dd00 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 801dcfc:	2309      	movs	r3, #9
 801dcfe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801dd00:	68fb      	ldr	r3, [r7, #12]
 801dd02:	68db      	ldr	r3, [r3, #12]
 801dd04:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 801dd08:	68fb      	ldr	r3, [r7, #12]
 801dd0a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 801dd0c:	68fb      	ldr	r3, [r7, #12]
 801dd0e:	68da      	ldr	r2, [r3, #12]
 801dd10:	697b      	ldr	r3, [r7, #20]
 801dd12:	029b      	lsls	r3, r3, #10
 801dd14:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 801dd18:	431a      	orrs	r2, r3
 801dd1a:	68fb      	ldr	r3, [r7, #12]
 801dd1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801dd1e:	2300      	movs	r3, #0
}
 801dd20:	4618      	mov	r0, r3
 801dd22:	371c      	adds	r7, #28
 801dd24:	46bd      	mov	sp, r7
 801dd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd2a:	4770      	bx	lr
 801dd2c:	00d8acbf 	.word	0x00d8acbf
 801dd30:	00e4e1c0 	.word	0x00e4e1c0
 801dd34:	00f42400 	.word	0x00f42400
 801dd38:	01067380 	.word	0x01067380
 801dd3c:	011a499f 	.word	0x011a499f
 801dd40:	01312cff 	.word	0x01312cff
 801dd44:	014ca43f 	.word	0x014ca43f
 801dd48:	016e3600 	.word	0x016e3600
 801dd4c:	01a6ab1f 	.word	0x01a6ab1f
 801dd50:	01e84800 	.word	0x01e84800

0801dd54 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801dd54:	b480      	push	{r7}
 801dd56:	b083      	sub	sp, #12
 801dd58:	af00      	add	r7, sp, #0
 801dd5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801dd5c:	687b      	ldr	r3, [r7, #4]
 801dd5e:	689b      	ldr	r3, [r3, #8]
 801dd60:	f043 0201 	orr.w	r2, r3, #1
 801dd64:	687b      	ldr	r3, [r7, #4]
 801dd66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801dd68:	2300      	movs	r3, #0
}
 801dd6a:	4618      	mov	r0, r3
 801dd6c:	370c      	adds	r7, #12
 801dd6e:	46bd      	mov	sp, r7
 801dd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd74:	4770      	bx	lr

0801dd76 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801dd76:	b480      	push	{r7}
 801dd78:	b083      	sub	sp, #12
 801dd7a:	af00      	add	r7, sp, #0
 801dd7c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801dd7e:	687b      	ldr	r3, [r7, #4]
 801dd80:	689b      	ldr	r3, [r3, #8]
 801dd82:	f023 0201 	bic.w	r2, r3, #1
 801dd86:	687b      	ldr	r3, [r7, #4]
 801dd88:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801dd8a:	2300      	movs	r3, #0
}
 801dd8c:	4618      	mov	r0, r3
 801dd8e:	370c      	adds	r7, #12
 801dd90:	46bd      	mov	sp, r7
 801dd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd96:	4770      	bx	lr

0801dd98 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801dd98:	b580      	push	{r7, lr}
 801dd9a:	b084      	sub	sp, #16
 801dd9c:	af00      	add	r7, sp, #0
 801dd9e:	6078      	str	r0, [r7, #4]
 801dda0:	460b      	mov	r3, r1
 801dda2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801dda4:	2300      	movs	r3, #0
 801dda6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801dda8:	687b      	ldr	r3, [r7, #4]
 801ddaa:	68db      	ldr	r3, [r3, #12]
 801ddac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 801ddb0:	687b      	ldr	r3, [r7, #4]
 801ddb2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801ddb4:	78fb      	ldrb	r3, [r7, #3]
 801ddb6:	2b01      	cmp	r3, #1
 801ddb8:	d115      	bne.n	801dde6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801ddba:	687b      	ldr	r3, [r7, #4]
 801ddbc:	68db      	ldr	r3, [r3, #12]
 801ddbe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801ddc2:	687b      	ldr	r3, [r7, #4]
 801ddc4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801ddc6:	2001      	movs	r0, #1
 801ddc8:	f7fa fb04 	bl	80183d4 <HAL_Delay>
      ms++;
 801ddcc:	68fb      	ldr	r3, [r7, #12]
 801ddce:	3301      	adds	r3, #1
 801ddd0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801ddd2:	6878      	ldr	r0, [r7, #4]
 801ddd4:	f001 f96c 	bl	801f0b0 <USB_GetMode>
 801ddd8:	4603      	mov	r3, r0
 801ddda:	2b01      	cmp	r3, #1
 801dddc:	d01e      	beq.n	801de1c <USB_SetCurrentMode+0x84>
 801ddde:	68fb      	ldr	r3, [r7, #12]
 801dde0:	2b31      	cmp	r3, #49	; 0x31
 801dde2:	d9f0      	bls.n	801ddc6 <USB_SetCurrentMode+0x2e>
 801dde4:	e01a      	b.n	801de1c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801dde6:	78fb      	ldrb	r3, [r7, #3]
 801dde8:	2b00      	cmp	r3, #0
 801ddea:	d115      	bne.n	801de18 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801ddec:	687b      	ldr	r3, [r7, #4]
 801ddee:	68db      	ldr	r3, [r3, #12]
 801ddf0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801ddf4:	687b      	ldr	r3, [r7, #4]
 801ddf6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801ddf8:	2001      	movs	r0, #1
 801ddfa:	f7fa faeb 	bl	80183d4 <HAL_Delay>
      ms++;
 801ddfe:	68fb      	ldr	r3, [r7, #12]
 801de00:	3301      	adds	r3, #1
 801de02:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 801de04:	6878      	ldr	r0, [r7, #4]
 801de06:	f001 f953 	bl	801f0b0 <USB_GetMode>
 801de0a:	4603      	mov	r3, r0
 801de0c:	2b00      	cmp	r3, #0
 801de0e:	d005      	beq.n	801de1c <USB_SetCurrentMode+0x84>
 801de10:	68fb      	ldr	r3, [r7, #12]
 801de12:	2b31      	cmp	r3, #49	; 0x31
 801de14:	d9f0      	bls.n	801ddf8 <USB_SetCurrentMode+0x60>
 801de16:	e001      	b.n	801de1c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801de18:	2301      	movs	r3, #1
 801de1a:	e005      	b.n	801de28 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 801de1c:	68fb      	ldr	r3, [r7, #12]
 801de1e:	2b32      	cmp	r3, #50	; 0x32
 801de20:	d101      	bne.n	801de26 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801de22:	2301      	movs	r3, #1
 801de24:	e000      	b.n	801de28 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801de26:	2300      	movs	r3, #0
}
 801de28:	4618      	mov	r0, r3
 801de2a:	3710      	adds	r7, #16
 801de2c:	46bd      	mov	sp, r7
 801de2e:	bd80      	pop	{r7, pc}

0801de30 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801de30:	b084      	sub	sp, #16
 801de32:	b580      	push	{r7, lr}
 801de34:	b086      	sub	sp, #24
 801de36:	af00      	add	r7, sp, #0
 801de38:	6078      	str	r0, [r7, #4]
 801de3a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801de3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801de42:	2300      	movs	r3, #0
 801de44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801de46:	687b      	ldr	r3, [r7, #4]
 801de48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801de4a:	2300      	movs	r3, #0
 801de4c:	613b      	str	r3, [r7, #16]
 801de4e:	e009      	b.n	801de64 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801de50:	687a      	ldr	r2, [r7, #4]
 801de52:	693b      	ldr	r3, [r7, #16]
 801de54:	3340      	adds	r3, #64	; 0x40
 801de56:	009b      	lsls	r3, r3, #2
 801de58:	4413      	add	r3, r2
 801de5a:	2200      	movs	r2, #0
 801de5c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801de5e:	693b      	ldr	r3, [r7, #16]
 801de60:	3301      	adds	r3, #1
 801de62:	613b      	str	r3, [r7, #16]
 801de64:	693b      	ldr	r3, [r7, #16]
 801de66:	2b0e      	cmp	r3, #14
 801de68:	d9f2      	bls.n	801de50 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801de6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801de6c:	2b00      	cmp	r3, #0
 801de6e:	d11c      	bne.n	801deaa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801de70:	68fb      	ldr	r3, [r7, #12]
 801de72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801de76:	685b      	ldr	r3, [r3, #4]
 801de78:	68fa      	ldr	r2, [r7, #12]
 801de7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801de7e:	f043 0302 	orr.w	r3, r3, #2
 801de82:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801de84:	687b      	ldr	r3, [r7, #4]
 801de86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801de88:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801de8c:	687b      	ldr	r3, [r7, #4]
 801de8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801de90:	687b      	ldr	r3, [r7, #4]
 801de92:	681b      	ldr	r3, [r3, #0]
 801de94:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801de98:	687b      	ldr	r3, [r7, #4]
 801de9a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801de9c:	687b      	ldr	r3, [r7, #4]
 801de9e:	681b      	ldr	r3, [r3, #0]
 801dea0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801dea4:	687b      	ldr	r3, [r7, #4]
 801dea6:	601a      	str	r2, [r3, #0]
 801dea8:	e005      	b.n	801deb6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801deaa:	687b      	ldr	r3, [r7, #4]
 801deac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801deae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801deb2:	687b      	ldr	r3, [r7, #4]
 801deb4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801deb6:	68fb      	ldr	r3, [r7, #12]
 801deb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801debc:	461a      	mov	r2, r3
 801debe:	2300      	movs	r3, #0
 801dec0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801dec2:	68fb      	ldr	r3, [r7, #12]
 801dec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801dec8:	4619      	mov	r1, r3
 801deca:	68fb      	ldr	r3, [r7, #12]
 801decc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ded0:	461a      	mov	r2, r3
 801ded2:	680b      	ldr	r3, [r1, #0]
 801ded4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801ded6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ded8:	2b01      	cmp	r3, #1
 801deda:	d10c      	bne.n	801def6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 801dedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dede:	2b00      	cmp	r3, #0
 801dee0:	d104      	bne.n	801deec <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801dee2:	2100      	movs	r1, #0
 801dee4:	6878      	ldr	r0, [r7, #4]
 801dee6:	f000 f945 	bl	801e174 <USB_SetDevSpeed>
 801deea:	e008      	b.n	801defe <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801deec:	2101      	movs	r1, #1
 801deee:	6878      	ldr	r0, [r7, #4]
 801def0:	f000 f940 	bl	801e174 <USB_SetDevSpeed>
 801def4:	e003      	b.n	801defe <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801def6:	2103      	movs	r1, #3
 801def8:	6878      	ldr	r0, [r7, #4]
 801defa:	f000 f93b 	bl	801e174 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801defe:	2110      	movs	r1, #16
 801df00:	6878      	ldr	r0, [r7, #4]
 801df02:	f000 f8f3 	bl	801e0ec <USB_FlushTxFifo>
 801df06:	4603      	mov	r3, r0
 801df08:	2b00      	cmp	r3, #0
 801df0a:	d001      	beq.n	801df10 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 801df0c:	2301      	movs	r3, #1
 801df0e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801df10:	6878      	ldr	r0, [r7, #4]
 801df12:	f000 f90f 	bl	801e134 <USB_FlushRxFifo>
 801df16:	4603      	mov	r3, r0
 801df18:	2b00      	cmp	r3, #0
 801df1a:	d001      	beq.n	801df20 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 801df1c:	2301      	movs	r3, #1
 801df1e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801df20:	68fb      	ldr	r3, [r7, #12]
 801df22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801df26:	461a      	mov	r2, r3
 801df28:	2300      	movs	r3, #0
 801df2a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801df2c:	68fb      	ldr	r3, [r7, #12]
 801df2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801df32:	461a      	mov	r2, r3
 801df34:	2300      	movs	r3, #0
 801df36:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801df38:	68fb      	ldr	r3, [r7, #12]
 801df3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801df3e:	461a      	mov	r2, r3
 801df40:	2300      	movs	r3, #0
 801df42:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801df44:	2300      	movs	r3, #0
 801df46:	613b      	str	r3, [r7, #16]
 801df48:	e043      	b.n	801dfd2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801df4a:	693b      	ldr	r3, [r7, #16]
 801df4c:	015a      	lsls	r2, r3, #5
 801df4e:	68fb      	ldr	r3, [r7, #12]
 801df50:	4413      	add	r3, r2
 801df52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801df56:	681b      	ldr	r3, [r3, #0]
 801df58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801df5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801df60:	d118      	bne.n	801df94 <USB_DevInit+0x164>
    {
      if (i == 0U)
 801df62:	693b      	ldr	r3, [r7, #16]
 801df64:	2b00      	cmp	r3, #0
 801df66:	d10a      	bne.n	801df7e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801df68:	693b      	ldr	r3, [r7, #16]
 801df6a:	015a      	lsls	r2, r3, #5
 801df6c:	68fb      	ldr	r3, [r7, #12]
 801df6e:	4413      	add	r3, r2
 801df70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801df74:	461a      	mov	r2, r3
 801df76:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801df7a:	6013      	str	r3, [r2, #0]
 801df7c:	e013      	b.n	801dfa6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801df7e:	693b      	ldr	r3, [r7, #16]
 801df80:	015a      	lsls	r2, r3, #5
 801df82:	68fb      	ldr	r3, [r7, #12]
 801df84:	4413      	add	r3, r2
 801df86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801df8a:	461a      	mov	r2, r3
 801df8c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801df90:	6013      	str	r3, [r2, #0]
 801df92:	e008      	b.n	801dfa6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801df94:	693b      	ldr	r3, [r7, #16]
 801df96:	015a      	lsls	r2, r3, #5
 801df98:	68fb      	ldr	r3, [r7, #12]
 801df9a:	4413      	add	r3, r2
 801df9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801dfa0:	461a      	mov	r2, r3
 801dfa2:	2300      	movs	r3, #0
 801dfa4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801dfa6:	693b      	ldr	r3, [r7, #16]
 801dfa8:	015a      	lsls	r2, r3, #5
 801dfaa:	68fb      	ldr	r3, [r7, #12]
 801dfac:	4413      	add	r3, r2
 801dfae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801dfb2:	461a      	mov	r2, r3
 801dfb4:	2300      	movs	r3, #0
 801dfb6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801dfb8:	693b      	ldr	r3, [r7, #16]
 801dfba:	015a      	lsls	r2, r3, #5
 801dfbc:	68fb      	ldr	r3, [r7, #12]
 801dfbe:	4413      	add	r3, r2
 801dfc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801dfc4:	461a      	mov	r2, r3
 801dfc6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801dfca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801dfcc:	693b      	ldr	r3, [r7, #16]
 801dfce:	3301      	adds	r3, #1
 801dfd0:	613b      	str	r3, [r7, #16]
 801dfd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dfd4:	693a      	ldr	r2, [r7, #16]
 801dfd6:	429a      	cmp	r2, r3
 801dfd8:	d3b7      	bcc.n	801df4a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801dfda:	2300      	movs	r3, #0
 801dfdc:	613b      	str	r3, [r7, #16]
 801dfde:	e043      	b.n	801e068 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801dfe0:	693b      	ldr	r3, [r7, #16]
 801dfe2:	015a      	lsls	r2, r3, #5
 801dfe4:	68fb      	ldr	r3, [r7, #12]
 801dfe6:	4413      	add	r3, r2
 801dfe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801dfec:	681b      	ldr	r3, [r3, #0]
 801dfee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801dff2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801dff6:	d118      	bne.n	801e02a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 801dff8:	693b      	ldr	r3, [r7, #16]
 801dffa:	2b00      	cmp	r3, #0
 801dffc:	d10a      	bne.n	801e014 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801dffe:	693b      	ldr	r3, [r7, #16]
 801e000:	015a      	lsls	r2, r3, #5
 801e002:	68fb      	ldr	r3, [r7, #12]
 801e004:	4413      	add	r3, r2
 801e006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e00a:	461a      	mov	r2, r3
 801e00c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801e010:	6013      	str	r3, [r2, #0]
 801e012:	e013      	b.n	801e03c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801e014:	693b      	ldr	r3, [r7, #16]
 801e016:	015a      	lsls	r2, r3, #5
 801e018:	68fb      	ldr	r3, [r7, #12]
 801e01a:	4413      	add	r3, r2
 801e01c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e020:	461a      	mov	r2, r3
 801e022:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801e026:	6013      	str	r3, [r2, #0]
 801e028:	e008      	b.n	801e03c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801e02a:	693b      	ldr	r3, [r7, #16]
 801e02c:	015a      	lsls	r2, r3, #5
 801e02e:	68fb      	ldr	r3, [r7, #12]
 801e030:	4413      	add	r3, r2
 801e032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e036:	461a      	mov	r2, r3
 801e038:	2300      	movs	r3, #0
 801e03a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801e03c:	693b      	ldr	r3, [r7, #16]
 801e03e:	015a      	lsls	r2, r3, #5
 801e040:	68fb      	ldr	r3, [r7, #12]
 801e042:	4413      	add	r3, r2
 801e044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e048:	461a      	mov	r2, r3
 801e04a:	2300      	movs	r3, #0
 801e04c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801e04e:	693b      	ldr	r3, [r7, #16]
 801e050:	015a      	lsls	r2, r3, #5
 801e052:	68fb      	ldr	r3, [r7, #12]
 801e054:	4413      	add	r3, r2
 801e056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e05a:	461a      	mov	r2, r3
 801e05c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801e060:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801e062:	693b      	ldr	r3, [r7, #16]
 801e064:	3301      	adds	r3, #1
 801e066:	613b      	str	r3, [r7, #16]
 801e068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e06a:	693a      	ldr	r2, [r7, #16]
 801e06c:	429a      	cmp	r2, r3
 801e06e:	d3b7      	bcc.n	801dfe0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801e070:	68fb      	ldr	r3, [r7, #12]
 801e072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e076:	691b      	ldr	r3, [r3, #16]
 801e078:	68fa      	ldr	r2, [r7, #12]
 801e07a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801e07e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801e082:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801e084:	687b      	ldr	r3, [r7, #4]
 801e086:	2200      	movs	r2, #0
 801e088:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801e08a:	687b      	ldr	r3, [r7, #4]
 801e08c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801e090:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801e092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e094:	2b00      	cmp	r3, #0
 801e096:	d105      	bne.n	801e0a4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801e098:	687b      	ldr	r3, [r7, #4]
 801e09a:	699b      	ldr	r3, [r3, #24]
 801e09c:	f043 0210 	orr.w	r2, r3, #16
 801e0a0:	687b      	ldr	r3, [r7, #4]
 801e0a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801e0a4:	687b      	ldr	r3, [r7, #4]
 801e0a6:	699a      	ldr	r2, [r3, #24]
 801e0a8:	4b0f      	ldr	r3, [pc, #60]	; (801e0e8 <USB_DevInit+0x2b8>)
 801e0aa:	4313      	orrs	r3, r2
 801e0ac:	687a      	ldr	r2, [r7, #4]
 801e0ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801e0b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e0b2:	2b00      	cmp	r3, #0
 801e0b4:	d005      	beq.n	801e0c2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801e0b6:	687b      	ldr	r3, [r7, #4]
 801e0b8:	699b      	ldr	r3, [r3, #24]
 801e0ba:	f043 0208 	orr.w	r2, r3, #8
 801e0be:	687b      	ldr	r3, [r7, #4]
 801e0c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801e0c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e0c4:	2b01      	cmp	r3, #1
 801e0c6:	d107      	bne.n	801e0d8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801e0c8:	687b      	ldr	r3, [r7, #4]
 801e0ca:	699b      	ldr	r3, [r3, #24]
 801e0cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801e0d0:	f043 0304 	orr.w	r3, r3, #4
 801e0d4:	687a      	ldr	r2, [r7, #4]
 801e0d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801e0d8:	7dfb      	ldrb	r3, [r7, #23]
}
 801e0da:	4618      	mov	r0, r3
 801e0dc:	3718      	adds	r7, #24
 801e0de:	46bd      	mov	sp, r7
 801e0e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801e0e4:	b004      	add	sp, #16
 801e0e6:	4770      	bx	lr
 801e0e8:	803c3800 	.word	0x803c3800

0801e0ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801e0ec:	b480      	push	{r7}
 801e0ee:	b085      	sub	sp, #20
 801e0f0:	af00      	add	r7, sp, #0
 801e0f2:	6078      	str	r0, [r7, #4]
 801e0f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801e0f6:	2300      	movs	r3, #0
 801e0f8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801e0fa:	683b      	ldr	r3, [r7, #0]
 801e0fc:	019b      	lsls	r3, r3, #6
 801e0fe:	f043 0220 	orr.w	r2, r3, #32
 801e102:	687b      	ldr	r3, [r7, #4]
 801e104:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801e106:	68fb      	ldr	r3, [r7, #12]
 801e108:	3301      	adds	r3, #1
 801e10a:	60fb      	str	r3, [r7, #12]
 801e10c:	4a08      	ldr	r2, [pc, #32]	; (801e130 <USB_FlushTxFifo+0x44>)
 801e10e:	4293      	cmp	r3, r2
 801e110:	d901      	bls.n	801e116 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 801e112:	2303      	movs	r3, #3
 801e114:	e006      	b.n	801e124 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801e116:	687b      	ldr	r3, [r7, #4]
 801e118:	691b      	ldr	r3, [r3, #16]
 801e11a:	f003 0320 	and.w	r3, r3, #32
 801e11e:	2b20      	cmp	r3, #32
 801e120:	d0f1      	beq.n	801e106 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 801e122:	2300      	movs	r3, #0
}
 801e124:	4618      	mov	r0, r3
 801e126:	3714      	adds	r7, #20
 801e128:	46bd      	mov	sp, r7
 801e12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e12e:	4770      	bx	lr
 801e130:	00030d40 	.word	0x00030d40

0801e134 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801e134:	b480      	push	{r7}
 801e136:	b085      	sub	sp, #20
 801e138:	af00      	add	r7, sp, #0
 801e13a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801e13c:	2300      	movs	r3, #0
 801e13e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801e140:	687b      	ldr	r3, [r7, #4]
 801e142:	2210      	movs	r2, #16
 801e144:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801e146:	68fb      	ldr	r3, [r7, #12]
 801e148:	3301      	adds	r3, #1
 801e14a:	60fb      	str	r3, [r7, #12]
 801e14c:	4a08      	ldr	r2, [pc, #32]	; (801e170 <USB_FlushRxFifo+0x3c>)
 801e14e:	4293      	cmp	r3, r2
 801e150:	d901      	bls.n	801e156 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 801e152:	2303      	movs	r3, #3
 801e154:	e006      	b.n	801e164 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801e156:	687b      	ldr	r3, [r7, #4]
 801e158:	691b      	ldr	r3, [r3, #16]
 801e15a:	f003 0310 	and.w	r3, r3, #16
 801e15e:	2b10      	cmp	r3, #16
 801e160:	d0f1      	beq.n	801e146 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 801e162:	2300      	movs	r3, #0
}
 801e164:	4618      	mov	r0, r3
 801e166:	3714      	adds	r7, #20
 801e168:	46bd      	mov	sp, r7
 801e16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e16e:	4770      	bx	lr
 801e170:	00030d40 	.word	0x00030d40

0801e174 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801e174:	b480      	push	{r7}
 801e176:	b085      	sub	sp, #20
 801e178:	af00      	add	r7, sp, #0
 801e17a:	6078      	str	r0, [r7, #4]
 801e17c:	460b      	mov	r3, r1
 801e17e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e180:	687b      	ldr	r3, [r7, #4]
 801e182:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801e184:	68fb      	ldr	r3, [r7, #12]
 801e186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e18a:	681a      	ldr	r2, [r3, #0]
 801e18c:	78fb      	ldrb	r3, [r7, #3]
 801e18e:	68f9      	ldr	r1, [r7, #12]
 801e190:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e194:	4313      	orrs	r3, r2
 801e196:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801e198:	2300      	movs	r3, #0
}
 801e19a:	4618      	mov	r0, r3
 801e19c:	3714      	adds	r7, #20
 801e19e:	46bd      	mov	sp, r7
 801e1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e1a4:	4770      	bx	lr

0801e1a6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801e1a6:	b480      	push	{r7}
 801e1a8:	b087      	sub	sp, #28
 801e1aa:	af00      	add	r7, sp, #0
 801e1ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e1ae:	687b      	ldr	r3, [r7, #4]
 801e1b0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801e1b2:	693b      	ldr	r3, [r7, #16]
 801e1b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e1b8:	689b      	ldr	r3, [r3, #8]
 801e1ba:	f003 0306 	and.w	r3, r3, #6
 801e1be:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801e1c0:	68fb      	ldr	r3, [r7, #12]
 801e1c2:	2b00      	cmp	r3, #0
 801e1c4:	d102      	bne.n	801e1cc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801e1c6:	2300      	movs	r3, #0
 801e1c8:	75fb      	strb	r3, [r7, #23]
 801e1ca:	e00a      	b.n	801e1e2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801e1cc:	68fb      	ldr	r3, [r7, #12]
 801e1ce:	2b02      	cmp	r3, #2
 801e1d0:	d002      	beq.n	801e1d8 <USB_GetDevSpeed+0x32>
 801e1d2:	68fb      	ldr	r3, [r7, #12]
 801e1d4:	2b06      	cmp	r3, #6
 801e1d6:	d102      	bne.n	801e1de <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801e1d8:	2302      	movs	r3, #2
 801e1da:	75fb      	strb	r3, [r7, #23]
 801e1dc:	e001      	b.n	801e1e2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801e1de:	230f      	movs	r3, #15
 801e1e0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801e1e2:	7dfb      	ldrb	r3, [r7, #23]
}
 801e1e4:	4618      	mov	r0, r3
 801e1e6:	371c      	adds	r7, #28
 801e1e8:	46bd      	mov	sp, r7
 801e1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e1ee:	4770      	bx	lr

0801e1f0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801e1f0:	b480      	push	{r7}
 801e1f2:	b085      	sub	sp, #20
 801e1f4:	af00      	add	r7, sp, #0
 801e1f6:	6078      	str	r0, [r7, #4]
 801e1f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e1fa:	687b      	ldr	r3, [r7, #4]
 801e1fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801e1fe:	683b      	ldr	r3, [r7, #0]
 801e200:	781b      	ldrb	r3, [r3, #0]
 801e202:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801e204:	683b      	ldr	r3, [r7, #0]
 801e206:	785b      	ldrb	r3, [r3, #1]
 801e208:	2b01      	cmp	r3, #1
 801e20a:	d13a      	bne.n	801e282 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801e20c:	68fb      	ldr	r3, [r7, #12]
 801e20e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e212:	69da      	ldr	r2, [r3, #28]
 801e214:	683b      	ldr	r3, [r7, #0]
 801e216:	781b      	ldrb	r3, [r3, #0]
 801e218:	f003 030f 	and.w	r3, r3, #15
 801e21c:	2101      	movs	r1, #1
 801e21e:	fa01 f303 	lsl.w	r3, r1, r3
 801e222:	b29b      	uxth	r3, r3
 801e224:	68f9      	ldr	r1, [r7, #12]
 801e226:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e22a:	4313      	orrs	r3, r2
 801e22c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801e22e:	68bb      	ldr	r3, [r7, #8]
 801e230:	015a      	lsls	r2, r3, #5
 801e232:	68fb      	ldr	r3, [r7, #12]
 801e234:	4413      	add	r3, r2
 801e236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e23a:	681b      	ldr	r3, [r3, #0]
 801e23c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801e240:	2b00      	cmp	r3, #0
 801e242:	d155      	bne.n	801e2f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801e244:	68bb      	ldr	r3, [r7, #8]
 801e246:	015a      	lsls	r2, r3, #5
 801e248:	68fb      	ldr	r3, [r7, #12]
 801e24a:	4413      	add	r3, r2
 801e24c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e250:	681a      	ldr	r2, [r3, #0]
 801e252:	683b      	ldr	r3, [r7, #0]
 801e254:	689b      	ldr	r3, [r3, #8]
 801e256:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801e25a:	683b      	ldr	r3, [r7, #0]
 801e25c:	78db      	ldrb	r3, [r3, #3]
 801e25e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801e260:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801e262:	68bb      	ldr	r3, [r7, #8]
 801e264:	059b      	lsls	r3, r3, #22
 801e266:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801e268:	4313      	orrs	r3, r2
 801e26a:	68ba      	ldr	r2, [r7, #8]
 801e26c:	0151      	lsls	r1, r2, #5
 801e26e:	68fa      	ldr	r2, [r7, #12]
 801e270:	440a      	add	r2, r1
 801e272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e27a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801e27e:	6013      	str	r3, [r2, #0]
 801e280:	e036      	b.n	801e2f0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801e282:	68fb      	ldr	r3, [r7, #12]
 801e284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e288:	69da      	ldr	r2, [r3, #28]
 801e28a:	683b      	ldr	r3, [r7, #0]
 801e28c:	781b      	ldrb	r3, [r3, #0]
 801e28e:	f003 030f 	and.w	r3, r3, #15
 801e292:	2101      	movs	r1, #1
 801e294:	fa01 f303 	lsl.w	r3, r1, r3
 801e298:	041b      	lsls	r3, r3, #16
 801e29a:	68f9      	ldr	r1, [r7, #12]
 801e29c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e2a0:	4313      	orrs	r3, r2
 801e2a2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801e2a4:	68bb      	ldr	r3, [r7, #8]
 801e2a6:	015a      	lsls	r2, r3, #5
 801e2a8:	68fb      	ldr	r3, [r7, #12]
 801e2aa:	4413      	add	r3, r2
 801e2ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e2b0:	681b      	ldr	r3, [r3, #0]
 801e2b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801e2b6:	2b00      	cmp	r3, #0
 801e2b8:	d11a      	bne.n	801e2f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801e2ba:	68bb      	ldr	r3, [r7, #8]
 801e2bc:	015a      	lsls	r2, r3, #5
 801e2be:	68fb      	ldr	r3, [r7, #12]
 801e2c0:	4413      	add	r3, r2
 801e2c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e2c6:	681a      	ldr	r2, [r3, #0]
 801e2c8:	683b      	ldr	r3, [r7, #0]
 801e2ca:	689b      	ldr	r3, [r3, #8]
 801e2cc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801e2d0:	683b      	ldr	r3, [r7, #0]
 801e2d2:	78db      	ldrb	r3, [r3, #3]
 801e2d4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801e2d6:	430b      	orrs	r3, r1
 801e2d8:	4313      	orrs	r3, r2
 801e2da:	68ba      	ldr	r2, [r7, #8]
 801e2dc:	0151      	lsls	r1, r2, #5
 801e2de:	68fa      	ldr	r2, [r7, #12]
 801e2e0:	440a      	add	r2, r1
 801e2e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e2e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e2ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801e2ee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801e2f0:	2300      	movs	r3, #0
}
 801e2f2:	4618      	mov	r0, r3
 801e2f4:	3714      	adds	r7, #20
 801e2f6:	46bd      	mov	sp, r7
 801e2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2fc:	4770      	bx	lr
	...

0801e300 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801e300:	b480      	push	{r7}
 801e302:	b085      	sub	sp, #20
 801e304:	af00      	add	r7, sp, #0
 801e306:	6078      	str	r0, [r7, #4]
 801e308:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e30a:	687b      	ldr	r3, [r7, #4]
 801e30c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801e30e:	683b      	ldr	r3, [r7, #0]
 801e310:	781b      	ldrb	r3, [r3, #0]
 801e312:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801e314:	683b      	ldr	r3, [r7, #0]
 801e316:	785b      	ldrb	r3, [r3, #1]
 801e318:	2b01      	cmp	r3, #1
 801e31a:	d161      	bne.n	801e3e0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801e31c:	68bb      	ldr	r3, [r7, #8]
 801e31e:	015a      	lsls	r2, r3, #5
 801e320:	68fb      	ldr	r3, [r7, #12]
 801e322:	4413      	add	r3, r2
 801e324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e328:	681b      	ldr	r3, [r3, #0]
 801e32a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801e32e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801e332:	d11f      	bne.n	801e374 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801e334:	68bb      	ldr	r3, [r7, #8]
 801e336:	015a      	lsls	r2, r3, #5
 801e338:	68fb      	ldr	r3, [r7, #12]
 801e33a:	4413      	add	r3, r2
 801e33c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e340:	681b      	ldr	r3, [r3, #0]
 801e342:	68ba      	ldr	r2, [r7, #8]
 801e344:	0151      	lsls	r1, r2, #5
 801e346:	68fa      	ldr	r2, [r7, #12]
 801e348:	440a      	add	r2, r1
 801e34a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e34e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801e352:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801e354:	68bb      	ldr	r3, [r7, #8]
 801e356:	015a      	lsls	r2, r3, #5
 801e358:	68fb      	ldr	r3, [r7, #12]
 801e35a:	4413      	add	r3, r2
 801e35c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e360:	681b      	ldr	r3, [r3, #0]
 801e362:	68ba      	ldr	r2, [r7, #8]
 801e364:	0151      	lsls	r1, r2, #5
 801e366:	68fa      	ldr	r2, [r7, #12]
 801e368:	440a      	add	r2, r1
 801e36a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e36e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801e372:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801e374:	68fb      	ldr	r3, [r7, #12]
 801e376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e37a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e37c:	683b      	ldr	r3, [r7, #0]
 801e37e:	781b      	ldrb	r3, [r3, #0]
 801e380:	f003 030f 	and.w	r3, r3, #15
 801e384:	2101      	movs	r1, #1
 801e386:	fa01 f303 	lsl.w	r3, r1, r3
 801e38a:	b29b      	uxth	r3, r3
 801e38c:	43db      	mvns	r3, r3
 801e38e:	68f9      	ldr	r1, [r7, #12]
 801e390:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e394:	4013      	ands	r3, r2
 801e396:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801e398:	68fb      	ldr	r3, [r7, #12]
 801e39a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e39e:	69da      	ldr	r2, [r3, #28]
 801e3a0:	683b      	ldr	r3, [r7, #0]
 801e3a2:	781b      	ldrb	r3, [r3, #0]
 801e3a4:	f003 030f 	and.w	r3, r3, #15
 801e3a8:	2101      	movs	r1, #1
 801e3aa:	fa01 f303 	lsl.w	r3, r1, r3
 801e3ae:	b29b      	uxth	r3, r3
 801e3b0:	43db      	mvns	r3, r3
 801e3b2:	68f9      	ldr	r1, [r7, #12]
 801e3b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e3b8:	4013      	ands	r3, r2
 801e3ba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801e3bc:	68bb      	ldr	r3, [r7, #8]
 801e3be:	015a      	lsls	r2, r3, #5
 801e3c0:	68fb      	ldr	r3, [r7, #12]
 801e3c2:	4413      	add	r3, r2
 801e3c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e3c8:	681a      	ldr	r2, [r3, #0]
 801e3ca:	68bb      	ldr	r3, [r7, #8]
 801e3cc:	0159      	lsls	r1, r3, #5
 801e3ce:	68fb      	ldr	r3, [r7, #12]
 801e3d0:	440b      	add	r3, r1
 801e3d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e3d6:	4619      	mov	r1, r3
 801e3d8:	4b35      	ldr	r3, [pc, #212]	; (801e4b0 <USB_DeactivateEndpoint+0x1b0>)
 801e3da:	4013      	ands	r3, r2
 801e3dc:	600b      	str	r3, [r1, #0]
 801e3de:	e060      	b.n	801e4a2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801e3e0:	68bb      	ldr	r3, [r7, #8]
 801e3e2:	015a      	lsls	r2, r3, #5
 801e3e4:	68fb      	ldr	r3, [r7, #12]
 801e3e6:	4413      	add	r3, r2
 801e3e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e3ec:	681b      	ldr	r3, [r3, #0]
 801e3ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801e3f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801e3f6:	d11f      	bne.n	801e438 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801e3f8:	68bb      	ldr	r3, [r7, #8]
 801e3fa:	015a      	lsls	r2, r3, #5
 801e3fc:	68fb      	ldr	r3, [r7, #12]
 801e3fe:	4413      	add	r3, r2
 801e400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e404:	681b      	ldr	r3, [r3, #0]
 801e406:	68ba      	ldr	r2, [r7, #8]
 801e408:	0151      	lsls	r1, r2, #5
 801e40a:	68fa      	ldr	r2, [r7, #12]
 801e40c:	440a      	add	r2, r1
 801e40e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e412:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801e416:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801e418:	68bb      	ldr	r3, [r7, #8]
 801e41a:	015a      	lsls	r2, r3, #5
 801e41c:	68fb      	ldr	r3, [r7, #12]
 801e41e:	4413      	add	r3, r2
 801e420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e424:	681b      	ldr	r3, [r3, #0]
 801e426:	68ba      	ldr	r2, [r7, #8]
 801e428:	0151      	lsls	r1, r2, #5
 801e42a:	68fa      	ldr	r2, [r7, #12]
 801e42c:	440a      	add	r2, r1
 801e42e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e432:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801e436:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801e438:	68fb      	ldr	r3, [r7, #12]
 801e43a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e43e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e440:	683b      	ldr	r3, [r7, #0]
 801e442:	781b      	ldrb	r3, [r3, #0]
 801e444:	f003 030f 	and.w	r3, r3, #15
 801e448:	2101      	movs	r1, #1
 801e44a:	fa01 f303 	lsl.w	r3, r1, r3
 801e44e:	041b      	lsls	r3, r3, #16
 801e450:	43db      	mvns	r3, r3
 801e452:	68f9      	ldr	r1, [r7, #12]
 801e454:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e458:	4013      	ands	r3, r2
 801e45a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801e45c:	68fb      	ldr	r3, [r7, #12]
 801e45e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e462:	69da      	ldr	r2, [r3, #28]
 801e464:	683b      	ldr	r3, [r7, #0]
 801e466:	781b      	ldrb	r3, [r3, #0]
 801e468:	f003 030f 	and.w	r3, r3, #15
 801e46c:	2101      	movs	r1, #1
 801e46e:	fa01 f303 	lsl.w	r3, r1, r3
 801e472:	041b      	lsls	r3, r3, #16
 801e474:	43db      	mvns	r3, r3
 801e476:	68f9      	ldr	r1, [r7, #12]
 801e478:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e47c:	4013      	ands	r3, r2
 801e47e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801e480:	68bb      	ldr	r3, [r7, #8]
 801e482:	015a      	lsls	r2, r3, #5
 801e484:	68fb      	ldr	r3, [r7, #12]
 801e486:	4413      	add	r3, r2
 801e488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e48c:	681a      	ldr	r2, [r3, #0]
 801e48e:	68bb      	ldr	r3, [r7, #8]
 801e490:	0159      	lsls	r1, r3, #5
 801e492:	68fb      	ldr	r3, [r7, #12]
 801e494:	440b      	add	r3, r1
 801e496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e49a:	4619      	mov	r1, r3
 801e49c:	4b05      	ldr	r3, [pc, #20]	; (801e4b4 <USB_DeactivateEndpoint+0x1b4>)
 801e49e:	4013      	ands	r3, r2
 801e4a0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801e4a2:	2300      	movs	r3, #0
}
 801e4a4:	4618      	mov	r0, r3
 801e4a6:	3714      	adds	r7, #20
 801e4a8:	46bd      	mov	sp, r7
 801e4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e4ae:	4770      	bx	lr
 801e4b0:	ec337800 	.word	0xec337800
 801e4b4:	eff37800 	.word	0xeff37800

0801e4b8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801e4b8:	b580      	push	{r7, lr}
 801e4ba:	b08a      	sub	sp, #40	; 0x28
 801e4bc:	af02      	add	r7, sp, #8
 801e4be:	60f8      	str	r0, [r7, #12]
 801e4c0:	60b9      	str	r1, [r7, #8]
 801e4c2:	4613      	mov	r3, r2
 801e4c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e4c6:	68fb      	ldr	r3, [r7, #12]
 801e4c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801e4ca:	68bb      	ldr	r3, [r7, #8]
 801e4cc:	781b      	ldrb	r3, [r3, #0]
 801e4ce:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801e4d0:	68bb      	ldr	r3, [r7, #8]
 801e4d2:	785b      	ldrb	r3, [r3, #1]
 801e4d4:	2b01      	cmp	r3, #1
 801e4d6:	f040 815c 	bne.w	801e792 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801e4da:	68bb      	ldr	r3, [r7, #8]
 801e4dc:	695b      	ldr	r3, [r3, #20]
 801e4de:	2b00      	cmp	r3, #0
 801e4e0:	d132      	bne.n	801e548 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801e4e2:	69bb      	ldr	r3, [r7, #24]
 801e4e4:	015a      	lsls	r2, r3, #5
 801e4e6:	69fb      	ldr	r3, [r7, #28]
 801e4e8:	4413      	add	r3, r2
 801e4ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e4ee:	691b      	ldr	r3, [r3, #16]
 801e4f0:	69ba      	ldr	r2, [r7, #24]
 801e4f2:	0151      	lsls	r1, r2, #5
 801e4f4:	69fa      	ldr	r2, [r7, #28]
 801e4f6:	440a      	add	r2, r1
 801e4f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e4fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e500:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e504:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801e506:	69bb      	ldr	r3, [r7, #24]
 801e508:	015a      	lsls	r2, r3, #5
 801e50a:	69fb      	ldr	r3, [r7, #28]
 801e50c:	4413      	add	r3, r2
 801e50e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e512:	691b      	ldr	r3, [r3, #16]
 801e514:	69ba      	ldr	r2, [r7, #24]
 801e516:	0151      	lsls	r1, r2, #5
 801e518:	69fa      	ldr	r2, [r7, #28]
 801e51a:	440a      	add	r2, r1
 801e51c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e520:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801e524:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801e526:	69bb      	ldr	r3, [r7, #24]
 801e528:	015a      	lsls	r2, r3, #5
 801e52a:	69fb      	ldr	r3, [r7, #28]
 801e52c:	4413      	add	r3, r2
 801e52e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e532:	691b      	ldr	r3, [r3, #16]
 801e534:	69ba      	ldr	r2, [r7, #24]
 801e536:	0151      	lsls	r1, r2, #5
 801e538:	69fa      	ldr	r2, [r7, #28]
 801e53a:	440a      	add	r2, r1
 801e53c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e540:	0cdb      	lsrs	r3, r3, #19
 801e542:	04db      	lsls	r3, r3, #19
 801e544:	6113      	str	r3, [r2, #16]
 801e546:	e074      	b.n	801e632 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801e548:	69bb      	ldr	r3, [r7, #24]
 801e54a:	015a      	lsls	r2, r3, #5
 801e54c:	69fb      	ldr	r3, [r7, #28]
 801e54e:	4413      	add	r3, r2
 801e550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e554:	691b      	ldr	r3, [r3, #16]
 801e556:	69ba      	ldr	r2, [r7, #24]
 801e558:	0151      	lsls	r1, r2, #5
 801e55a:	69fa      	ldr	r2, [r7, #28]
 801e55c:	440a      	add	r2, r1
 801e55e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e562:	0cdb      	lsrs	r3, r3, #19
 801e564:	04db      	lsls	r3, r3, #19
 801e566:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801e568:	69bb      	ldr	r3, [r7, #24]
 801e56a:	015a      	lsls	r2, r3, #5
 801e56c:	69fb      	ldr	r3, [r7, #28]
 801e56e:	4413      	add	r3, r2
 801e570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e574:	691b      	ldr	r3, [r3, #16]
 801e576:	69ba      	ldr	r2, [r7, #24]
 801e578:	0151      	lsls	r1, r2, #5
 801e57a:	69fa      	ldr	r2, [r7, #28]
 801e57c:	440a      	add	r2, r1
 801e57e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e582:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e586:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e58a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801e58c:	69bb      	ldr	r3, [r7, #24]
 801e58e:	015a      	lsls	r2, r3, #5
 801e590:	69fb      	ldr	r3, [r7, #28]
 801e592:	4413      	add	r3, r2
 801e594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e598:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801e59a:	68bb      	ldr	r3, [r7, #8]
 801e59c:	6959      	ldr	r1, [r3, #20]
 801e59e:	68bb      	ldr	r3, [r7, #8]
 801e5a0:	689b      	ldr	r3, [r3, #8]
 801e5a2:	440b      	add	r3, r1
 801e5a4:	1e59      	subs	r1, r3, #1
 801e5a6:	68bb      	ldr	r3, [r7, #8]
 801e5a8:	689b      	ldr	r3, [r3, #8]
 801e5aa:	fbb1 f3f3 	udiv	r3, r1, r3
 801e5ae:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801e5b0:	4b9d      	ldr	r3, [pc, #628]	; (801e828 <USB_EPStartXfer+0x370>)
 801e5b2:	400b      	ands	r3, r1
 801e5b4:	69b9      	ldr	r1, [r7, #24]
 801e5b6:	0148      	lsls	r0, r1, #5
 801e5b8:	69f9      	ldr	r1, [r7, #28]
 801e5ba:	4401      	add	r1, r0
 801e5bc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801e5c0:	4313      	orrs	r3, r2
 801e5c2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801e5c4:	69bb      	ldr	r3, [r7, #24]
 801e5c6:	015a      	lsls	r2, r3, #5
 801e5c8:	69fb      	ldr	r3, [r7, #28]
 801e5ca:	4413      	add	r3, r2
 801e5cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e5d0:	691a      	ldr	r2, [r3, #16]
 801e5d2:	68bb      	ldr	r3, [r7, #8]
 801e5d4:	695b      	ldr	r3, [r3, #20]
 801e5d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801e5da:	69b9      	ldr	r1, [r7, #24]
 801e5dc:	0148      	lsls	r0, r1, #5
 801e5de:	69f9      	ldr	r1, [r7, #28]
 801e5e0:	4401      	add	r1, r0
 801e5e2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801e5e6:	4313      	orrs	r3, r2
 801e5e8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801e5ea:	68bb      	ldr	r3, [r7, #8]
 801e5ec:	78db      	ldrb	r3, [r3, #3]
 801e5ee:	2b01      	cmp	r3, #1
 801e5f0:	d11f      	bne.n	801e632 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801e5f2:	69bb      	ldr	r3, [r7, #24]
 801e5f4:	015a      	lsls	r2, r3, #5
 801e5f6:	69fb      	ldr	r3, [r7, #28]
 801e5f8:	4413      	add	r3, r2
 801e5fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e5fe:	691b      	ldr	r3, [r3, #16]
 801e600:	69ba      	ldr	r2, [r7, #24]
 801e602:	0151      	lsls	r1, r2, #5
 801e604:	69fa      	ldr	r2, [r7, #28]
 801e606:	440a      	add	r2, r1
 801e608:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e60c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801e610:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801e612:	69bb      	ldr	r3, [r7, #24]
 801e614:	015a      	lsls	r2, r3, #5
 801e616:	69fb      	ldr	r3, [r7, #28]
 801e618:	4413      	add	r3, r2
 801e61a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e61e:	691b      	ldr	r3, [r3, #16]
 801e620:	69ba      	ldr	r2, [r7, #24]
 801e622:	0151      	lsls	r1, r2, #5
 801e624:	69fa      	ldr	r2, [r7, #28]
 801e626:	440a      	add	r2, r1
 801e628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e62c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801e630:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801e632:	79fb      	ldrb	r3, [r7, #7]
 801e634:	2b01      	cmp	r3, #1
 801e636:	d14b      	bne.n	801e6d0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801e638:	68bb      	ldr	r3, [r7, #8]
 801e63a:	691b      	ldr	r3, [r3, #16]
 801e63c:	2b00      	cmp	r3, #0
 801e63e:	d009      	beq.n	801e654 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801e640:	69bb      	ldr	r3, [r7, #24]
 801e642:	015a      	lsls	r2, r3, #5
 801e644:	69fb      	ldr	r3, [r7, #28]
 801e646:	4413      	add	r3, r2
 801e648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e64c:	461a      	mov	r2, r3
 801e64e:	68bb      	ldr	r3, [r7, #8]
 801e650:	691b      	ldr	r3, [r3, #16]
 801e652:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801e654:	68bb      	ldr	r3, [r7, #8]
 801e656:	78db      	ldrb	r3, [r3, #3]
 801e658:	2b01      	cmp	r3, #1
 801e65a:	d128      	bne.n	801e6ae <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801e65c:	69fb      	ldr	r3, [r7, #28]
 801e65e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e662:	689b      	ldr	r3, [r3, #8]
 801e664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e668:	2b00      	cmp	r3, #0
 801e66a:	d110      	bne.n	801e68e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801e66c:	69bb      	ldr	r3, [r7, #24]
 801e66e:	015a      	lsls	r2, r3, #5
 801e670:	69fb      	ldr	r3, [r7, #28]
 801e672:	4413      	add	r3, r2
 801e674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e678:	681b      	ldr	r3, [r3, #0]
 801e67a:	69ba      	ldr	r2, [r7, #24]
 801e67c:	0151      	lsls	r1, r2, #5
 801e67e:	69fa      	ldr	r2, [r7, #28]
 801e680:	440a      	add	r2, r1
 801e682:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e686:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801e68a:	6013      	str	r3, [r2, #0]
 801e68c:	e00f      	b.n	801e6ae <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801e68e:	69bb      	ldr	r3, [r7, #24]
 801e690:	015a      	lsls	r2, r3, #5
 801e692:	69fb      	ldr	r3, [r7, #28]
 801e694:	4413      	add	r3, r2
 801e696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e69a:	681b      	ldr	r3, [r3, #0]
 801e69c:	69ba      	ldr	r2, [r7, #24]
 801e69e:	0151      	lsls	r1, r2, #5
 801e6a0:	69fa      	ldr	r2, [r7, #28]
 801e6a2:	440a      	add	r2, r1
 801e6a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e6a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e6ac:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801e6ae:	69bb      	ldr	r3, [r7, #24]
 801e6b0:	015a      	lsls	r2, r3, #5
 801e6b2:	69fb      	ldr	r3, [r7, #28]
 801e6b4:	4413      	add	r3, r2
 801e6b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e6ba:	681b      	ldr	r3, [r3, #0]
 801e6bc:	69ba      	ldr	r2, [r7, #24]
 801e6be:	0151      	lsls	r1, r2, #5
 801e6c0:	69fa      	ldr	r2, [r7, #28]
 801e6c2:	440a      	add	r2, r1
 801e6c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e6c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801e6cc:	6013      	str	r3, [r2, #0]
 801e6ce:	e12f      	b.n	801e930 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801e6d0:	69bb      	ldr	r3, [r7, #24]
 801e6d2:	015a      	lsls	r2, r3, #5
 801e6d4:	69fb      	ldr	r3, [r7, #28]
 801e6d6:	4413      	add	r3, r2
 801e6d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e6dc:	681b      	ldr	r3, [r3, #0]
 801e6de:	69ba      	ldr	r2, [r7, #24]
 801e6e0:	0151      	lsls	r1, r2, #5
 801e6e2:	69fa      	ldr	r2, [r7, #28]
 801e6e4:	440a      	add	r2, r1
 801e6e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e6ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801e6ee:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801e6f0:	68bb      	ldr	r3, [r7, #8]
 801e6f2:	78db      	ldrb	r3, [r3, #3]
 801e6f4:	2b01      	cmp	r3, #1
 801e6f6:	d015      	beq.n	801e724 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801e6f8:	68bb      	ldr	r3, [r7, #8]
 801e6fa:	695b      	ldr	r3, [r3, #20]
 801e6fc:	2b00      	cmp	r3, #0
 801e6fe:	f000 8117 	beq.w	801e930 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801e702:	69fb      	ldr	r3, [r7, #28]
 801e704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e708:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801e70a:	68bb      	ldr	r3, [r7, #8]
 801e70c:	781b      	ldrb	r3, [r3, #0]
 801e70e:	f003 030f 	and.w	r3, r3, #15
 801e712:	2101      	movs	r1, #1
 801e714:	fa01 f303 	lsl.w	r3, r1, r3
 801e718:	69f9      	ldr	r1, [r7, #28]
 801e71a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e71e:	4313      	orrs	r3, r2
 801e720:	634b      	str	r3, [r1, #52]	; 0x34
 801e722:	e105      	b.n	801e930 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801e724:	69fb      	ldr	r3, [r7, #28]
 801e726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e72a:	689b      	ldr	r3, [r3, #8]
 801e72c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e730:	2b00      	cmp	r3, #0
 801e732:	d110      	bne.n	801e756 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801e734:	69bb      	ldr	r3, [r7, #24]
 801e736:	015a      	lsls	r2, r3, #5
 801e738:	69fb      	ldr	r3, [r7, #28]
 801e73a:	4413      	add	r3, r2
 801e73c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e740:	681b      	ldr	r3, [r3, #0]
 801e742:	69ba      	ldr	r2, [r7, #24]
 801e744:	0151      	lsls	r1, r2, #5
 801e746:	69fa      	ldr	r2, [r7, #28]
 801e748:	440a      	add	r2, r1
 801e74a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e74e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801e752:	6013      	str	r3, [r2, #0]
 801e754:	e00f      	b.n	801e776 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801e756:	69bb      	ldr	r3, [r7, #24]
 801e758:	015a      	lsls	r2, r3, #5
 801e75a:	69fb      	ldr	r3, [r7, #28]
 801e75c:	4413      	add	r3, r2
 801e75e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e762:	681b      	ldr	r3, [r3, #0]
 801e764:	69ba      	ldr	r2, [r7, #24]
 801e766:	0151      	lsls	r1, r2, #5
 801e768:	69fa      	ldr	r2, [r7, #28]
 801e76a:	440a      	add	r2, r1
 801e76c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e774:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801e776:	68bb      	ldr	r3, [r7, #8]
 801e778:	68d9      	ldr	r1, [r3, #12]
 801e77a:	68bb      	ldr	r3, [r7, #8]
 801e77c:	781a      	ldrb	r2, [r3, #0]
 801e77e:	68bb      	ldr	r3, [r7, #8]
 801e780:	695b      	ldr	r3, [r3, #20]
 801e782:	b298      	uxth	r0, r3
 801e784:	79fb      	ldrb	r3, [r7, #7]
 801e786:	9300      	str	r3, [sp, #0]
 801e788:	4603      	mov	r3, r0
 801e78a:	68f8      	ldr	r0, [r7, #12]
 801e78c:	f000 fa2b 	bl	801ebe6 <USB_WritePacket>
 801e790:	e0ce      	b.n	801e930 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801e792:	69bb      	ldr	r3, [r7, #24]
 801e794:	015a      	lsls	r2, r3, #5
 801e796:	69fb      	ldr	r3, [r7, #28]
 801e798:	4413      	add	r3, r2
 801e79a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e79e:	691b      	ldr	r3, [r3, #16]
 801e7a0:	69ba      	ldr	r2, [r7, #24]
 801e7a2:	0151      	lsls	r1, r2, #5
 801e7a4:	69fa      	ldr	r2, [r7, #28]
 801e7a6:	440a      	add	r2, r1
 801e7a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e7ac:	0cdb      	lsrs	r3, r3, #19
 801e7ae:	04db      	lsls	r3, r3, #19
 801e7b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801e7b2:	69bb      	ldr	r3, [r7, #24]
 801e7b4:	015a      	lsls	r2, r3, #5
 801e7b6:	69fb      	ldr	r3, [r7, #28]
 801e7b8:	4413      	add	r3, r2
 801e7ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e7be:	691b      	ldr	r3, [r3, #16]
 801e7c0:	69ba      	ldr	r2, [r7, #24]
 801e7c2:	0151      	lsls	r1, r2, #5
 801e7c4:	69fa      	ldr	r2, [r7, #28]
 801e7c6:	440a      	add	r2, r1
 801e7c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e7cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e7d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e7d4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 801e7d6:	68bb      	ldr	r3, [r7, #8]
 801e7d8:	695b      	ldr	r3, [r3, #20]
 801e7da:	2b00      	cmp	r3, #0
 801e7dc:	d126      	bne.n	801e82c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801e7de:	69bb      	ldr	r3, [r7, #24]
 801e7e0:	015a      	lsls	r2, r3, #5
 801e7e2:	69fb      	ldr	r3, [r7, #28]
 801e7e4:	4413      	add	r3, r2
 801e7e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e7ea:	691a      	ldr	r2, [r3, #16]
 801e7ec:	68bb      	ldr	r3, [r7, #8]
 801e7ee:	689b      	ldr	r3, [r3, #8]
 801e7f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801e7f4:	69b9      	ldr	r1, [r7, #24]
 801e7f6:	0148      	lsls	r0, r1, #5
 801e7f8:	69f9      	ldr	r1, [r7, #28]
 801e7fa:	4401      	add	r1, r0
 801e7fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801e800:	4313      	orrs	r3, r2
 801e802:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801e804:	69bb      	ldr	r3, [r7, #24]
 801e806:	015a      	lsls	r2, r3, #5
 801e808:	69fb      	ldr	r3, [r7, #28]
 801e80a:	4413      	add	r3, r2
 801e80c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e810:	691b      	ldr	r3, [r3, #16]
 801e812:	69ba      	ldr	r2, [r7, #24]
 801e814:	0151      	lsls	r1, r2, #5
 801e816:	69fa      	ldr	r2, [r7, #28]
 801e818:	440a      	add	r2, r1
 801e81a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e81e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801e822:	6113      	str	r3, [r2, #16]
 801e824:	e036      	b.n	801e894 <USB_EPStartXfer+0x3dc>
 801e826:	bf00      	nop
 801e828:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801e82c:	68bb      	ldr	r3, [r7, #8]
 801e82e:	695a      	ldr	r2, [r3, #20]
 801e830:	68bb      	ldr	r3, [r7, #8]
 801e832:	689b      	ldr	r3, [r3, #8]
 801e834:	4413      	add	r3, r2
 801e836:	1e5a      	subs	r2, r3, #1
 801e838:	68bb      	ldr	r3, [r7, #8]
 801e83a:	689b      	ldr	r3, [r3, #8]
 801e83c:	fbb2 f3f3 	udiv	r3, r2, r3
 801e840:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801e842:	69bb      	ldr	r3, [r7, #24]
 801e844:	015a      	lsls	r2, r3, #5
 801e846:	69fb      	ldr	r3, [r7, #28]
 801e848:	4413      	add	r3, r2
 801e84a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e84e:	691a      	ldr	r2, [r3, #16]
 801e850:	8afb      	ldrh	r3, [r7, #22]
 801e852:	04d9      	lsls	r1, r3, #19
 801e854:	4b39      	ldr	r3, [pc, #228]	; (801e93c <USB_EPStartXfer+0x484>)
 801e856:	400b      	ands	r3, r1
 801e858:	69b9      	ldr	r1, [r7, #24]
 801e85a:	0148      	lsls	r0, r1, #5
 801e85c:	69f9      	ldr	r1, [r7, #28]
 801e85e:	4401      	add	r1, r0
 801e860:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801e864:	4313      	orrs	r3, r2
 801e866:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 801e868:	69bb      	ldr	r3, [r7, #24]
 801e86a:	015a      	lsls	r2, r3, #5
 801e86c:	69fb      	ldr	r3, [r7, #28]
 801e86e:	4413      	add	r3, r2
 801e870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e874:	691a      	ldr	r2, [r3, #16]
 801e876:	68bb      	ldr	r3, [r7, #8]
 801e878:	689b      	ldr	r3, [r3, #8]
 801e87a:	8af9      	ldrh	r1, [r7, #22]
 801e87c:	fb01 f303 	mul.w	r3, r1, r3
 801e880:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801e884:	69b9      	ldr	r1, [r7, #24]
 801e886:	0148      	lsls	r0, r1, #5
 801e888:	69f9      	ldr	r1, [r7, #28]
 801e88a:	4401      	add	r1, r0
 801e88c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801e890:	4313      	orrs	r3, r2
 801e892:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801e894:	79fb      	ldrb	r3, [r7, #7]
 801e896:	2b01      	cmp	r3, #1
 801e898:	d10d      	bne.n	801e8b6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801e89a:	68bb      	ldr	r3, [r7, #8]
 801e89c:	68db      	ldr	r3, [r3, #12]
 801e89e:	2b00      	cmp	r3, #0
 801e8a0:	d009      	beq.n	801e8b6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801e8a2:	68bb      	ldr	r3, [r7, #8]
 801e8a4:	68d9      	ldr	r1, [r3, #12]
 801e8a6:	69bb      	ldr	r3, [r7, #24]
 801e8a8:	015a      	lsls	r2, r3, #5
 801e8aa:	69fb      	ldr	r3, [r7, #28]
 801e8ac:	4413      	add	r3, r2
 801e8ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e8b2:	460a      	mov	r2, r1
 801e8b4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801e8b6:	68bb      	ldr	r3, [r7, #8]
 801e8b8:	78db      	ldrb	r3, [r3, #3]
 801e8ba:	2b01      	cmp	r3, #1
 801e8bc:	d128      	bne.n	801e910 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801e8be:	69fb      	ldr	r3, [r7, #28]
 801e8c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e8c4:	689b      	ldr	r3, [r3, #8]
 801e8c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e8ca:	2b00      	cmp	r3, #0
 801e8cc:	d110      	bne.n	801e8f0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801e8ce:	69bb      	ldr	r3, [r7, #24]
 801e8d0:	015a      	lsls	r2, r3, #5
 801e8d2:	69fb      	ldr	r3, [r7, #28]
 801e8d4:	4413      	add	r3, r2
 801e8d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e8da:	681b      	ldr	r3, [r3, #0]
 801e8dc:	69ba      	ldr	r2, [r7, #24]
 801e8de:	0151      	lsls	r1, r2, #5
 801e8e0:	69fa      	ldr	r2, [r7, #28]
 801e8e2:	440a      	add	r2, r1
 801e8e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e8e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801e8ec:	6013      	str	r3, [r2, #0]
 801e8ee:	e00f      	b.n	801e910 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801e8f0:	69bb      	ldr	r3, [r7, #24]
 801e8f2:	015a      	lsls	r2, r3, #5
 801e8f4:	69fb      	ldr	r3, [r7, #28]
 801e8f6:	4413      	add	r3, r2
 801e8f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e8fc:	681b      	ldr	r3, [r3, #0]
 801e8fe:	69ba      	ldr	r2, [r7, #24]
 801e900:	0151      	lsls	r1, r2, #5
 801e902:	69fa      	ldr	r2, [r7, #28]
 801e904:	440a      	add	r2, r1
 801e906:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e90a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e90e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801e910:	69bb      	ldr	r3, [r7, #24]
 801e912:	015a      	lsls	r2, r3, #5
 801e914:	69fb      	ldr	r3, [r7, #28]
 801e916:	4413      	add	r3, r2
 801e918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e91c:	681b      	ldr	r3, [r3, #0]
 801e91e:	69ba      	ldr	r2, [r7, #24]
 801e920:	0151      	lsls	r1, r2, #5
 801e922:	69fa      	ldr	r2, [r7, #28]
 801e924:	440a      	add	r2, r1
 801e926:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e92a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801e92e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801e930:	2300      	movs	r3, #0
}
 801e932:	4618      	mov	r0, r3
 801e934:	3720      	adds	r7, #32
 801e936:	46bd      	mov	sp, r7
 801e938:	bd80      	pop	{r7, pc}
 801e93a:	bf00      	nop
 801e93c:	1ff80000 	.word	0x1ff80000

0801e940 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801e940:	b480      	push	{r7}
 801e942:	b087      	sub	sp, #28
 801e944:	af00      	add	r7, sp, #0
 801e946:	60f8      	str	r0, [r7, #12]
 801e948:	60b9      	str	r1, [r7, #8]
 801e94a:	4613      	mov	r3, r2
 801e94c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e94e:	68fb      	ldr	r3, [r7, #12]
 801e950:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801e952:	68bb      	ldr	r3, [r7, #8]
 801e954:	781b      	ldrb	r3, [r3, #0]
 801e956:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801e958:	68bb      	ldr	r3, [r7, #8]
 801e95a:	785b      	ldrb	r3, [r3, #1]
 801e95c:	2b01      	cmp	r3, #1
 801e95e:	f040 80cd 	bne.w	801eafc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801e962:	68bb      	ldr	r3, [r7, #8]
 801e964:	695b      	ldr	r3, [r3, #20]
 801e966:	2b00      	cmp	r3, #0
 801e968:	d132      	bne.n	801e9d0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801e96a:	693b      	ldr	r3, [r7, #16]
 801e96c:	015a      	lsls	r2, r3, #5
 801e96e:	697b      	ldr	r3, [r7, #20]
 801e970:	4413      	add	r3, r2
 801e972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e976:	691b      	ldr	r3, [r3, #16]
 801e978:	693a      	ldr	r2, [r7, #16]
 801e97a:	0151      	lsls	r1, r2, #5
 801e97c:	697a      	ldr	r2, [r7, #20]
 801e97e:	440a      	add	r2, r1
 801e980:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e984:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e988:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e98c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801e98e:	693b      	ldr	r3, [r7, #16]
 801e990:	015a      	lsls	r2, r3, #5
 801e992:	697b      	ldr	r3, [r7, #20]
 801e994:	4413      	add	r3, r2
 801e996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e99a:	691b      	ldr	r3, [r3, #16]
 801e99c:	693a      	ldr	r2, [r7, #16]
 801e99e:	0151      	lsls	r1, r2, #5
 801e9a0:	697a      	ldr	r2, [r7, #20]
 801e9a2:	440a      	add	r2, r1
 801e9a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e9a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801e9ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801e9ae:	693b      	ldr	r3, [r7, #16]
 801e9b0:	015a      	lsls	r2, r3, #5
 801e9b2:	697b      	ldr	r3, [r7, #20]
 801e9b4:	4413      	add	r3, r2
 801e9b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e9ba:	691b      	ldr	r3, [r3, #16]
 801e9bc:	693a      	ldr	r2, [r7, #16]
 801e9be:	0151      	lsls	r1, r2, #5
 801e9c0:	697a      	ldr	r2, [r7, #20]
 801e9c2:	440a      	add	r2, r1
 801e9c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e9c8:	0cdb      	lsrs	r3, r3, #19
 801e9ca:	04db      	lsls	r3, r3, #19
 801e9cc:	6113      	str	r3, [r2, #16]
 801e9ce:	e04e      	b.n	801ea6e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801e9d0:	693b      	ldr	r3, [r7, #16]
 801e9d2:	015a      	lsls	r2, r3, #5
 801e9d4:	697b      	ldr	r3, [r7, #20]
 801e9d6:	4413      	add	r3, r2
 801e9d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e9dc:	691b      	ldr	r3, [r3, #16]
 801e9de:	693a      	ldr	r2, [r7, #16]
 801e9e0:	0151      	lsls	r1, r2, #5
 801e9e2:	697a      	ldr	r2, [r7, #20]
 801e9e4:	440a      	add	r2, r1
 801e9e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e9ea:	0cdb      	lsrs	r3, r3, #19
 801e9ec:	04db      	lsls	r3, r3, #19
 801e9ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801e9f0:	693b      	ldr	r3, [r7, #16]
 801e9f2:	015a      	lsls	r2, r3, #5
 801e9f4:	697b      	ldr	r3, [r7, #20]
 801e9f6:	4413      	add	r3, r2
 801e9f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e9fc:	691b      	ldr	r3, [r3, #16]
 801e9fe:	693a      	ldr	r2, [r7, #16]
 801ea00:	0151      	lsls	r1, r2, #5
 801ea02:	697a      	ldr	r2, [r7, #20]
 801ea04:	440a      	add	r2, r1
 801ea06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ea0a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801ea0e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801ea12:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 801ea14:	68bb      	ldr	r3, [r7, #8]
 801ea16:	695a      	ldr	r2, [r3, #20]
 801ea18:	68bb      	ldr	r3, [r7, #8]
 801ea1a:	689b      	ldr	r3, [r3, #8]
 801ea1c:	429a      	cmp	r2, r3
 801ea1e:	d903      	bls.n	801ea28 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 801ea20:	68bb      	ldr	r3, [r7, #8]
 801ea22:	689a      	ldr	r2, [r3, #8]
 801ea24:	68bb      	ldr	r3, [r7, #8]
 801ea26:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801ea28:	693b      	ldr	r3, [r7, #16]
 801ea2a:	015a      	lsls	r2, r3, #5
 801ea2c:	697b      	ldr	r3, [r7, #20]
 801ea2e:	4413      	add	r3, r2
 801ea30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ea34:	691b      	ldr	r3, [r3, #16]
 801ea36:	693a      	ldr	r2, [r7, #16]
 801ea38:	0151      	lsls	r1, r2, #5
 801ea3a:	697a      	ldr	r2, [r7, #20]
 801ea3c:	440a      	add	r2, r1
 801ea3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ea42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801ea46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801ea48:	693b      	ldr	r3, [r7, #16]
 801ea4a:	015a      	lsls	r2, r3, #5
 801ea4c:	697b      	ldr	r3, [r7, #20]
 801ea4e:	4413      	add	r3, r2
 801ea50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ea54:	691a      	ldr	r2, [r3, #16]
 801ea56:	68bb      	ldr	r3, [r7, #8]
 801ea58:	695b      	ldr	r3, [r3, #20]
 801ea5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801ea5e:	6939      	ldr	r1, [r7, #16]
 801ea60:	0148      	lsls	r0, r1, #5
 801ea62:	6979      	ldr	r1, [r7, #20]
 801ea64:	4401      	add	r1, r0
 801ea66:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801ea6a:	4313      	orrs	r3, r2
 801ea6c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801ea6e:	79fb      	ldrb	r3, [r7, #7]
 801ea70:	2b01      	cmp	r3, #1
 801ea72:	d11e      	bne.n	801eab2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801ea74:	68bb      	ldr	r3, [r7, #8]
 801ea76:	691b      	ldr	r3, [r3, #16]
 801ea78:	2b00      	cmp	r3, #0
 801ea7a:	d009      	beq.n	801ea90 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801ea7c:	693b      	ldr	r3, [r7, #16]
 801ea7e:	015a      	lsls	r2, r3, #5
 801ea80:	697b      	ldr	r3, [r7, #20]
 801ea82:	4413      	add	r3, r2
 801ea84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ea88:	461a      	mov	r2, r3
 801ea8a:	68bb      	ldr	r3, [r7, #8]
 801ea8c:	691b      	ldr	r3, [r3, #16]
 801ea8e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801ea90:	693b      	ldr	r3, [r7, #16]
 801ea92:	015a      	lsls	r2, r3, #5
 801ea94:	697b      	ldr	r3, [r7, #20]
 801ea96:	4413      	add	r3, r2
 801ea98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ea9c:	681b      	ldr	r3, [r3, #0]
 801ea9e:	693a      	ldr	r2, [r7, #16]
 801eaa0:	0151      	lsls	r1, r2, #5
 801eaa2:	697a      	ldr	r2, [r7, #20]
 801eaa4:	440a      	add	r2, r1
 801eaa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801eaaa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801eaae:	6013      	str	r3, [r2, #0]
 801eab0:	e092      	b.n	801ebd8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801eab2:	693b      	ldr	r3, [r7, #16]
 801eab4:	015a      	lsls	r2, r3, #5
 801eab6:	697b      	ldr	r3, [r7, #20]
 801eab8:	4413      	add	r3, r2
 801eaba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801eabe:	681b      	ldr	r3, [r3, #0]
 801eac0:	693a      	ldr	r2, [r7, #16]
 801eac2:	0151      	lsls	r1, r2, #5
 801eac4:	697a      	ldr	r2, [r7, #20]
 801eac6:	440a      	add	r2, r1
 801eac8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801eacc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801ead0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801ead2:	68bb      	ldr	r3, [r7, #8]
 801ead4:	695b      	ldr	r3, [r3, #20]
 801ead6:	2b00      	cmp	r3, #0
 801ead8:	d07e      	beq.n	801ebd8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801eada:	697b      	ldr	r3, [r7, #20]
 801eadc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801eae0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801eae2:	68bb      	ldr	r3, [r7, #8]
 801eae4:	781b      	ldrb	r3, [r3, #0]
 801eae6:	f003 030f 	and.w	r3, r3, #15
 801eaea:	2101      	movs	r1, #1
 801eaec:	fa01 f303 	lsl.w	r3, r1, r3
 801eaf0:	6979      	ldr	r1, [r7, #20]
 801eaf2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801eaf6:	4313      	orrs	r3, r2
 801eaf8:	634b      	str	r3, [r1, #52]	; 0x34
 801eafa:	e06d      	b.n	801ebd8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801eafc:	693b      	ldr	r3, [r7, #16]
 801eafe:	015a      	lsls	r2, r3, #5
 801eb00:	697b      	ldr	r3, [r7, #20]
 801eb02:	4413      	add	r3, r2
 801eb04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eb08:	691b      	ldr	r3, [r3, #16]
 801eb0a:	693a      	ldr	r2, [r7, #16]
 801eb0c:	0151      	lsls	r1, r2, #5
 801eb0e:	697a      	ldr	r2, [r7, #20]
 801eb10:	440a      	add	r2, r1
 801eb12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801eb16:	0cdb      	lsrs	r3, r3, #19
 801eb18:	04db      	lsls	r3, r3, #19
 801eb1a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801eb1c:	693b      	ldr	r3, [r7, #16]
 801eb1e:	015a      	lsls	r2, r3, #5
 801eb20:	697b      	ldr	r3, [r7, #20]
 801eb22:	4413      	add	r3, r2
 801eb24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eb28:	691b      	ldr	r3, [r3, #16]
 801eb2a:	693a      	ldr	r2, [r7, #16]
 801eb2c:	0151      	lsls	r1, r2, #5
 801eb2e:	697a      	ldr	r2, [r7, #20]
 801eb30:	440a      	add	r2, r1
 801eb32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801eb36:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801eb3a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801eb3e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 801eb40:	68bb      	ldr	r3, [r7, #8]
 801eb42:	695b      	ldr	r3, [r3, #20]
 801eb44:	2b00      	cmp	r3, #0
 801eb46:	d003      	beq.n	801eb50 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 801eb48:	68bb      	ldr	r3, [r7, #8]
 801eb4a:	689a      	ldr	r2, [r3, #8]
 801eb4c:	68bb      	ldr	r3, [r7, #8]
 801eb4e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801eb50:	693b      	ldr	r3, [r7, #16]
 801eb52:	015a      	lsls	r2, r3, #5
 801eb54:	697b      	ldr	r3, [r7, #20]
 801eb56:	4413      	add	r3, r2
 801eb58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eb5c:	691b      	ldr	r3, [r3, #16]
 801eb5e:	693a      	ldr	r2, [r7, #16]
 801eb60:	0151      	lsls	r1, r2, #5
 801eb62:	697a      	ldr	r2, [r7, #20]
 801eb64:	440a      	add	r2, r1
 801eb66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801eb6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801eb6e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 801eb70:	693b      	ldr	r3, [r7, #16]
 801eb72:	015a      	lsls	r2, r3, #5
 801eb74:	697b      	ldr	r3, [r7, #20]
 801eb76:	4413      	add	r3, r2
 801eb78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eb7c:	691a      	ldr	r2, [r3, #16]
 801eb7e:	68bb      	ldr	r3, [r7, #8]
 801eb80:	689b      	ldr	r3, [r3, #8]
 801eb82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801eb86:	6939      	ldr	r1, [r7, #16]
 801eb88:	0148      	lsls	r0, r1, #5
 801eb8a:	6979      	ldr	r1, [r7, #20]
 801eb8c:	4401      	add	r1, r0
 801eb8e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801eb92:	4313      	orrs	r3, r2
 801eb94:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 801eb96:	79fb      	ldrb	r3, [r7, #7]
 801eb98:	2b01      	cmp	r3, #1
 801eb9a:	d10d      	bne.n	801ebb8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801eb9c:	68bb      	ldr	r3, [r7, #8]
 801eb9e:	68db      	ldr	r3, [r3, #12]
 801eba0:	2b00      	cmp	r3, #0
 801eba2:	d009      	beq.n	801ebb8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801eba4:	68bb      	ldr	r3, [r7, #8]
 801eba6:	68d9      	ldr	r1, [r3, #12]
 801eba8:	693b      	ldr	r3, [r7, #16]
 801ebaa:	015a      	lsls	r2, r3, #5
 801ebac:	697b      	ldr	r3, [r7, #20]
 801ebae:	4413      	add	r3, r2
 801ebb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ebb4:	460a      	mov	r2, r1
 801ebb6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801ebb8:	693b      	ldr	r3, [r7, #16]
 801ebba:	015a      	lsls	r2, r3, #5
 801ebbc:	697b      	ldr	r3, [r7, #20]
 801ebbe:	4413      	add	r3, r2
 801ebc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ebc4:	681b      	ldr	r3, [r3, #0]
 801ebc6:	693a      	ldr	r2, [r7, #16]
 801ebc8:	0151      	lsls	r1, r2, #5
 801ebca:	697a      	ldr	r2, [r7, #20]
 801ebcc:	440a      	add	r2, r1
 801ebce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ebd2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801ebd6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801ebd8:	2300      	movs	r3, #0
}
 801ebda:	4618      	mov	r0, r3
 801ebdc:	371c      	adds	r7, #28
 801ebde:	46bd      	mov	sp, r7
 801ebe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ebe4:	4770      	bx	lr

0801ebe6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801ebe6:	b480      	push	{r7}
 801ebe8:	b089      	sub	sp, #36	; 0x24
 801ebea:	af00      	add	r7, sp, #0
 801ebec:	60f8      	str	r0, [r7, #12]
 801ebee:	60b9      	str	r1, [r7, #8]
 801ebf0:	4611      	mov	r1, r2
 801ebf2:	461a      	mov	r2, r3
 801ebf4:	460b      	mov	r3, r1
 801ebf6:	71fb      	strb	r3, [r7, #7]
 801ebf8:	4613      	mov	r3, r2
 801ebfa:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ebfc:	68fb      	ldr	r3, [r7, #12]
 801ebfe:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801ec00:	68bb      	ldr	r3, [r7, #8]
 801ec02:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801ec04:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801ec08:	2b00      	cmp	r3, #0
 801ec0a:	d123      	bne.n	801ec54 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801ec0c:	88bb      	ldrh	r3, [r7, #4]
 801ec0e:	3303      	adds	r3, #3
 801ec10:	089b      	lsrs	r3, r3, #2
 801ec12:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801ec14:	2300      	movs	r3, #0
 801ec16:	61bb      	str	r3, [r7, #24]
 801ec18:	e018      	b.n	801ec4c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801ec1a:	79fb      	ldrb	r3, [r7, #7]
 801ec1c:	031a      	lsls	r2, r3, #12
 801ec1e:	697b      	ldr	r3, [r7, #20]
 801ec20:	4413      	add	r3, r2
 801ec22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ec26:	461a      	mov	r2, r3
 801ec28:	69fb      	ldr	r3, [r7, #28]
 801ec2a:	681b      	ldr	r3, [r3, #0]
 801ec2c:	6013      	str	r3, [r2, #0]
      pSrc++;
 801ec2e:	69fb      	ldr	r3, [r7, #28]
 801ec30:	3301      	adds	r3, #1
 801ec32:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801ec34:	69fb      	ldr	r3, [r7, #28]
 801ec36:	3301      	adds	r3, #1
 801ec38:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801ec3a:	69fb      	ldr	r3, [r7, #28]
 801ec3c:	3301      	adds	r3, #1
 801ec3e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801ec40:	69fb      	ldr	r3, [r7, #28]
 801ec42:	3301      	adds	r3, #1
 801ec44:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801ec46:	69bb      	ldr	r3, [r7, #24]
 801ec48:	3301      	adds	r3, #1
 801ec4a:	61bb      	str	r3, [r7, #24]
 801ec4c:	69ba      	ldr	r2, [r7, #24]
 801ec4e:	693b      	ldr	r3, [r7, #16]
 801ec50:	429a      	cmp	r2, r3
 801ec52:	d3e2      	bcc.n	801ec1a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801ec54:	2300      	movs	r3, #0
}
 801ec56:	4618      	mov	r0, r3
 801ec58:	3724      	adds	r7, #36	; 0x24
 801ec5a:	46bd      	mov	sp, r7
 801ec5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec60:	4770      	bx	lr

0801ec62 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801ec62:	b480      	push	{r7}
 801ec64:	b08b      	sub	sp, #44	; 0x2c
 801ec66:	af00      	add	r7, sp, #0
 801ec68:	60f8      	str	r0, [r7, #12]
 801ec6a:	60b9      	str	r1, [r7, #8]
 801ec6c:	4613      	mov	r3, r2
 801ec6e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ec70:	68fb      	ldr	r3, [r7, #12]
 801ec72:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801ec74:	68bb      	ldr	r3, [r7, #8]
 801ec76:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801ec78:	88fb      	ldrh	r3, [r7, #6]
 801ec7a:	089b      	lsrs	r3, r3, #2
 801ec7c:	b29b      	uxth	r3, r3
 801ec7e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801ec80:	88fb      	ldrh	r3, [r7, #6]
 801ec82:	f003 0303 	and.w	r3, r3, #3
 801ec86:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801ec88:	2300      	movs	r3, #0
 801ec8a:	623b      	str	r3, [r7, #32]
 801ec8c:	e014      	b.n	801ecb8 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801ec8e:	69bb      	ldr	r3, [r7, #24]
 801ec90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ec94:	681a      	ldr	r2, [r3, #0]
 801ec96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec98:	601a      	str	r2, [r3, #0]
    pDest++;
 801ec9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec9c:	3301      	adds	r3, #1
 801ec9e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801eca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eca2:	3301      	adds	r3, #1
 801eca4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801eca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eca8:	3301      	adds	r3, #1
 801ecaa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801ecac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ecae:	3301      	adds	r3, #1
 801ecb0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 801ecb2:	6a3b      	ldr	r3, [r7, #32]
 801ecb4:	3301      	adds	r3, #1
 801ecb6:	623b      	str	r3, [r7, #32]
 801ecb8:	6a3a      	ldr	r2, [r7, #32]
 801ecba:	697b      	ldr	r3, [r7, #20]
 801ecbc:	429a      	cmp	r2, r3
 801ecbe:	d3e6      	bcc.n	801ec8e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801ecc0:	8bfb      	ldrh	r3, [r7, #30]
 801ecc2:	2b00      	cmp	r3, #0
 801ecc4:	d01e      	beq.n	801ed04 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801ecc6:	2300      	movs	r3, #0
 801ecc8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801ecca:	69bb      	ldr	r3, [r7, #24]
 801eccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ecd0:	461a      	mov	r2, r3
 801ecd2:	f107 0310 	add.w	r3, r7, #16
 801ecd6:	6812      	ldr	r2, [r2, #0]
 801ecd8:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801ecda:	693a      	ldr	r2, [r7, #16]
 801ecdc:	6a3b      	ldr	r3, [r7, #32]
 801ecde:	b2db      	uxtb	r3, r3
 801ece0:	00db      	lsls	r3, r3, #3
 801ece2:	fa22 f303 	lsr.w	r3, r2, r3
 801ece6:	b2da      	uxtb	r2, r3
 801ece8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ecea:	701a      	strb	r2, [r3, #0]
      i++;
 801ecec:	6a3b      	ldr	r3, [r7, #32]
 801ecee:	3301      	adds	r3, #1
 801ecf0:	623b      	str	r3, [r7, #32]
      pDest++;
 801ecf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ecf4:	3301      	adds	r3, #1
 801ecf6:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801ecf8:	8bfb      	ldrh	r3, [r7, #30]
 801ecfa:	3b01      	subs	r3, #1
 801ecfc:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801ecfe:	8bfb      	ldrh	r3, [r7, #30]
 801ed00:	2b00      	cmp	r3, #0
 801ed02:	d1ea      	bne.n	801ecda <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801ed04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801ed06:	4618      	mov	r0, r3
 801ed08:	372c      	adds	r7, #44	; 0x2c
 801ed0a:	46bd      	mov	sp, r7
 801ed0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed10:	4770      	bx	lr

0801ed12 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801ed12:	b480      	push	{r7}
 801ed14:	b085      	sub	sp, #20
 801ed16:	af00      	add	r7, sp, #0
 801ed18:	6078      	str	r0, [r7, #4]
 801ed1a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ed1c:	687b      	ldr	r3, [r7, #4]
 801ed1e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801ed20:	683b      	ldr	r3, [r7, #0]
 801ed22:	781b      	ldrb	r3, [r3, #0]
 801ed24:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801ed26:	683b      	ldr	r3, [r7, #0]
 801ed28:	785b      	ldrb	r3, [r3, #1]
 801ed2a:	2b01      	cmp	r3, #1
 801ed2c:	d12c      	bne.n	801ed88 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801ed2e:	68bb      	ldr	r3, [r7, #8]
 801ed30:	015a      	lsls	r2, r3, #5
 801ed32:	68fb      	ldr	r3, [r7, #12]
 801ed34:	4413      	add	r3, r2
 801ed36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ed3a:	681b      	ldr	r3, [r3, #0]
 801ed3c:	2b00      	cmp	r3, #0
 801ed3e:	db12      	blt.n	801ed66 <USB_EPSetStall+0x54>
 801ed40:	68bb      	ldr	r3, [r7, #8]
 801ed42:	2b00      	cmp	r3, #0
 801ed44:	d00f      	beq.n	801ed66 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801ed46:	68bb      	ldr	r3, [r7, #8]
 801ed48:	015a      	lsls	r2, r3, #5
 801ed4a:	68fb      	ldr	r3, [r7, #12]
 801ed4c:	4413      	add	r3, r2
 801ed4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ed52:	681b      	ldr	r3, [r3, #0]
 801ed54:	68ba      	ldr	r2, [r7, #8]
 801ed56:	0151      	lsls	r1, r2, #5
 801ed58:	68fa      	ldr	r2, [r7, #12]
 801ed5a:	440a      	add	r2, r1
 801ed5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ed60:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801ed64:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801ed66:	68bb      	ldr	r3, [r7, #8]
 801ed68:	015a      	lsls	r2, r3, #5
 801ed6a:	68fb      	ldr	r3, [r7, #12]
 801ed6c:	4413      	add	r3, r2
 801ed6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ed72:	681b      	ldr	r3, [r3, #0]
 801ed74:	68ba      	ldr	r2, [r7, #8]
 801ed76:	0151      	lsls	r1, r2, #5
 801ed78:	68fa      	ldr	r2, [r7, #12]
 801ed7a:	440a      	add	r2, r1
 801ed7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ed80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801ed84:	6013      	str	r3, [r2, #0]
 801ed86:	e02b      	b.n	801ede0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801ed88:	68bb      	ldr	r3, [r7, #8]
 801ed8a:	015a      	lsls	r2, r3, #5
 801ed8c:	68fb      	ldr	r3, [r7, #12]
 801ed8e:	4413      	add	r3, r2
 801ed90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ed94:	681b      	ldr	r3, [r3, #0]
 801ed96:	2b00      	cmp	r3, #0
 801ed98:	db12      	blt.n	801edc0 <USB_EPSetStall+0xae>
 801ed9a:	68bb      	ldr	r3, [r7, #8]
 801ed9c:	2b00      	cmp	r3, #0
 801ed9e:	d00f      	beq.n	801edc0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801eda0:	68bb      	ldr	r3, [r7, #8]
 801eda2:	015a      	lsls	r2, r3, #5
 801eda4:	68fb      	ldr	r3, [r7, #12]
 801eda6:	4413      	add	r3, r2
 801eda8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801edac:	681b      	ldr	r3, [r3, #0]
 801edae:	68ba      	ldr	r2, [r7, #8]
 801edb0:	0151      	lsls	r1, r2, #5
 801edb2:	68fa      	ldr	r2, [r7, #12]
 801edb4:	440a      	add	r2, r1
 801edb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801edba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801edbe:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801edc0:	68bb      	ldr	r3, [r7, #8]
 801edc2:	015a      	lsls	r2, r3, #5
 801edc4:	68fb      	ldr	r3, [r7, #12]
 801edc6:	4413      	add	r3, r2
 801edc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801edcc:	681b      	ldr	r3, [r3, #0]
 801edce:	68ba      	ldr	r2, [r7, #8]
 801edd0:	0151      	lsls	r1, r2, #5
 801edd2:	68fa      	ldr	r2, [r7, #12]
 801edd4:	440a      	add	r2, r1
 801edd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801edda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801edde:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801ede0:	2300      	movs	r3, #0
}
 801ede2:	4618      	mov	r0, r3
 801ede4:	3714      	adds	r7, #20
 801ede6:	46bd      	mov	sp, r7
 801ede8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801edec:	4770      	bx	lr

0801edee <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801edee:	b480      	push	{r7}
 801edf0:	b085      	sub	sp, #20
 801edf2:	af00      	add	r7, sp, #0
 801edf4:	6078      	str	r0, [r7, #4]
 801edf6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801edf8:	687b      	ldr	r3, [r7, #4]
 801edfa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801edfc:	683b      	ldr	r3, [r7, #0]
 801edfe:	781b      	ldrb	r3, [r3, #0]
 801ee00:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801ee02:	683b      	ldr	r3, [r7, #0]
 801ee04:	785b      	ldrb	r3, [r3, #1]
 801ee06:	2b01      	cmp	r3, #1
 801ee08:	d128      	bne.n	801ee5c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801ee0a:	68bb      	ldr	r3, [r7, #8]
 801ee0c:	015a      	lsls	r2, r3, #5
 801ee0e:	68fb      	ldr	r3, [r7, #12]
 801ee10:	4413      	add	r3, r2
 801ee12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ee16:	681b      	ldr	r3, [r3, #0]
 801ee18:	68ba      	ldr	r2, [r7, #8]
 801ee1a:	0151      	lsls	r1, r2, #5
 801ee1c:	68fa      	ldr	r2, [r7, #12]
 801ee1e:	440a      	add	r2, r1
 801ee20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ee24:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801ee28:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801ee2a:	683b      	ldr	r3, [r7, #0]
 801ee2c:	78db      	ldrb	r3, [r3, #3]
 801ee2e:	2b03      	cmp	r3, #3
 801ee30:	d003      	beq.n	801ee3a <USB_EPClearStall+0x4c>
 801ee32:	683b      	ldr	r3, [r7, #0]
 801ee34:	78db      	ldrb	r3, [r3, #3]
 801ee36:	2b02      	cmp	r3, #2
 801ee38:	d138      	bne.n	801eeac <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801ee3a:	68bb      	ldr	r3, [r7, #8]
 801ee3c:	015a      	lsls	r2, r3, #5
 801ee3e:	68fb      	ldr	r3, [r7, #12]
 801ee40:	4413      	add	r3, r2
 801ee42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ee46:	681b      	ldr	r3, [r3, #0]
 801ee48:	68ba      	ldr	r2, [r7, #8]
 801ee4a:	0151      	lsls	r1, r2, #5
 801ee4c:	68fa      	ldr	r2, [r7, #12]
 801ee4e:	440a      	add	r2, r1
 801ee50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ee54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801ee58:	6013      	str	r3, [r2, #0]
 801ee5a:	e027      	b.n	801eeac <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801ee5c:	68bb      	ldr	r3, [r7, #8]
 801ee5e:	015a      	lsls	r2, r3, #5
 801ee60:	68fb      	ldr	r3, [r7, #12]
 801ee62:	4413      	add	r3, r2
 801ee64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ee68:	681b      	ldr	r3, [r3, #0]
 801ee6a:	68ba      	ldr	r2, [r7, #8]
 801ee6c:	0151      	lsls	r1, r2, #5
 801ee6e:	68fa      	ldr	r2, [r7, #12]
 801ee70:	440a      	add	r2, r1
 801ee72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ee76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801ee7a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801ee7c:	683b      	ldr	r3, [r7, #0]
 801ee7e:	78db      	ldrb	r3, [r3, #3]
 801ee80:	2b03      	cmp	r3, #3
 801ee82:	d003      	beq.n	801ee8c <USB_EPClearStall+0x9e>
 801ee84:	683b      	ldr	r3, [r7, #0]
 801ee86:	78db      	ldrb	r3, [r3, #3]
 801ee88:	2b02      	cmp	r3, #2
 801ee8a:	d10f      	bne.n	801eeac <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801ee8c:	68bb      	ldr	r3, [r7, #8]
 801ee8e:	015a      	lsls	r2, r3, #5
 801ee90:	68fb      	ldr	r3, [r7, #12]
 801ee92:	4413      	add	r3, r2
 801ee94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ee98:	681b      	ldr	r3, [r3, #0]
 801ee9a:	68ba      	ldr	r2, [r7, #8]
 801ee9c:	0151      	lsls	r1, r2, #5
 801ee9e:	68fa      	ldr	r2, [r7, #12]
 801eea0:	440a      	add	r2, r1
 801eea2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801eea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801eeaa:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801eeac:	2300      	movs	r3, #0
}
 801eeae:	4618      	mov	r0, r3
 801eeb0:	3714      	adds	r7, #20
 801eeb2:	46bd      	mov	sp, r7
 801eeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eeb8:	4770      	bx	lr

0801eeba <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801eeba:	b480      	push	{r7}
 801eebc:	b085      	sub	sp, #20
 801eebe:	af00      	add	r7, sp, #0
 801eec0:	6078      	str	r0, [r7, #4]
 801eec2:	460b      	mov	r3, r1
 801eec4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801eec6:	687b      	ldr	r3, [r7, #4]
 801eec8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801eeca:	68fb      	ldr	r3, [r7, #12]
 801eecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801eed0:	681b      	ldr	r3, [r3, #0]
 801eed2:	68fa      	ldr	r2, [r7, #12]
 801eed4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801eed8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801eedc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801eede:	68fb      	ldr	r3, [r7, #12]
 801eee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801eee4:	681a      	ldr	r2, [r3, #0]
 801eee6:	78fb      	ldrb	r3, [r7, #3]
 801eee8:	011b      	lsls	r3, r3, #4
 801eeea:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801eeee:	68f9      	ldr	r1, [r7, #12]
 801eef0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801eef4:	4313      	orrs	r3, r2
 801eef6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801eef8:	2300      	movs	r3, #0
}
 801eefa:	4618      	mov	r0, r3
 801eefc:	3714      	adds	r7, #20
 801eefe:	46bd      	mov	sp, r7
 801ef00:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef04:	4770      	bx	lr

0801ef06 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801ef06:	b480      	push	{r7}
 801ef08:	b085      	sub	sp, #20
 801ef0a:	af00      	add	r7, sp, #0
 801ef0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ef0e:	687b      	ldr	r3, [r7, #4]
 801ef10:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801ef12:	68fb      	ldr	r3, [r7, #12]
 801ef14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801ef18:	681b      	ldr	r3, [r3, #0]
 801ef1a:	68fa      	ldr	r2, [r7, #12]
 801ef1c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801ef20:	f023 0303 	bic.w	r3, r3, #3
 801ef24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801ef26:	68fb      	ldr	r3, [r7, #12]
 801ef28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ef2c:	685b      	ldr	r3, [r3, #4]
 801ef2e:	68fa      	ldr	r2, [r7, #12]
 801ef30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801ef34:	f023 0302 	bic.w	r3, r3, #2
 801ef38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801ef3a:	2300      	movs	r3, #0
}
 801ef3c:	4618      	mov	r0, r3
 801ef3e:	3714      	adds	r7, #20
 801ef40:	46bd      	mov	sp, r7
 801ef42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef46:	4770      	bx	lr

0801ef48 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801ef48:	b480      	push	{r7}
 801ef4a:	b085      	sub	sp, #20
 801ef4c:	af00      	add	r7, sp, #0
 801ef4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ef50:	687b      	ldr	r3, [r7, #4]
 801ef52:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801ef54:	68fb      	ldr	r3, [r7, #12]
 801ef56:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801ef5a:	681b      	ldr	r3, [r3, #0]
 801ef5c:	68fa      	ldr	r2, [r7, #12]
 801ef5e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801ef62:	f023 0303 	bic.w	r3, r3, #3
 801ef66:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801ef68:	68fb      	ldr	r3, [r7, #12]
 801ef6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ef6e:	685b      	ldr	r3, [r3, #4]
 801ef70:	68fa      	ldr	r2, [r7, #12]
 801ef72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801ef76:	f043 0302 	orr.w	r3, r3, #2
 801ef7a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801ef7c:	2300      	movs	r3, #0
}
 801ef7e:	4618      	mov	r0, r3
 801ef80:	3714      	adds	r7, #20
 801ef82:	46bd      	mov	sp, r7
 801ef84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef88:	4770      	bx	lr

0801ef8a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801ef8a:	b480      	push	{r7}
 801ef8c:	b085      	sub	sp, #20
 801ef8e:	af00      	add	r7, sp, #0
 801ef90:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801ef92:	687b      	ldr	r3, [r7, #4]
 801ef94:	695b      	ldr	r3, [r3, #20]
 801ef96:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801ef98:	687b      	ldr	r3, [r7, #4]
 801ef9a:	699b      	ldr	r3, [r3, #24]
 801ef9c:	68fa      	ldr	r2, [r7, #12]
 801ef9e:	4013      	ands	r3, r2
 801efa0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801efa2:	68fb      	ldr	r3, [r7, #12]
}
 801efa4:	4618      	mov	r0, r3
 801efa6:	3714      	adds	r7, #20
 801efa8:	46bd      	mov	sp, r7
 801efaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801efae:	4770      	bx	lr

0801efb0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801efb0:	b480      	push	{r7}
 801efb2:	b085      	sub	sp, #20
 801efb4:	af00      	add	r7, sp, #0
 801efb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801efb8:	687b      	ldr	r3, [r7, #4]
 801efba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801efbc:	68fb      	ldr	r3, [r7, #12]
 801efbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801efc2:	699b      	ldr	r3, [r3, #24]
 801efc4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801efc6:	68fb      	ldr	r3, [r7, #12]
 801efc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801efcc:	69db      	ldr	r3, [r3, #28]
 801efce:	68ba      	ldr	r2, [r7, #8]
 801efd0:	4013      	ands	r3, r2
 801efd2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801efd4:	68bb      	ldr	r3, [r7, #8]
 801efd6:	0c1b      	lsrs	r3, r3, #16
}
 801efd8:	4618      	mov	r0, r3
 801efda:	3714      	adds	r7, #20
 801efdc:	46bd      	mov	sp, r7
 801efde:	f85d 7b04 	ldr.w	r7, [sp], #4
 801efe2:	4770      	bx	lr

0801efe4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801efe4:	b480      	push	{r7}
 801efe6:	b085      	sub	sp, #20
 801efe8:	af00      	add	r7, sp, #0
 801efea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801efec:	687b      	ldr	r3, [r7, #4]
 801efee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801eff0:	68fb      	ldr	r3, [r7, #12]
 801eff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801eff6:	699b      	ldr	r3, [r3, #24]
 801eff8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801effa:	68fb      	ldr	r3, [r7, #12]
 801effc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f000:	69db      	ldr	r3, [r3, #28]
 801f002:	68ba      	ldr	r2, [r7, #8]
 801f004:	4013      	ands	r3, r2
 801f006:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801f008:	68bb      	ldr	r3, [r7, #8]
 801f00a:	b29b      	uxth	r3, r3
}
 801f00c:	4618      	mov	r0, r3
 801f00e:	3714      	adds	r7, #20
 801f010:	46bd      	mov	sp, r7
 801f012:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f016:	4770      	bx	lr

0801f018 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801f018:	b480      	push	{r7}
 801f01a:	b085      	sub	sp, #20
 801f01c:	af00      	add	r7, sp, #0
 801f01e:	6078      	str	r0, [r7, #4]
 801f020:	460b      	mov	r3, r1
 801f022:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f024:	687b      	ldr	r3, [r7, #4]
 801f026:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801f028:	78fb      	ldrb	r3, [r7, #3]
 801f02a:	015a      	lsls	r2, r3, #5
 801f02c:	68fb      	ldr	r3, [r7, #12]
 801f02e:	4413      	add	r3, r2
 801f030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f034:	689b      	ldr	r3, [r3, #8]
 801f036:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801f038:	68fb      	ldr	r3, [r7, #12]
 801f03a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f03e:	695b      	ldr	r3, [r3, #20]
 801f040:	68ba      	ldr	r2, [r7, #8]
 801f042:	4013      	ands	r3, r2
 801f044:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801f046:	68bb      	ldr	r3, [r7, #8]
}
 801f048:	4618      	mov	r0, r3
 801f04a:	3714      	adds	r7, #20
 801f04c:	46bd      	mov	sp, r7
 801f04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f052:	4770      	bx	lr

0801f054 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801f054:	b480      	push	{r7}
 801f056:	b087      	sub	sp, #28
 801f058:	af00      	add	r7, sp, #0
 801f05a:	6078      	str	r0, [r7, #4]
 801f05c:	460b      	mov	r3, r1
 801f05e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f060:	687b      	ldr	r3, [r7, #4]
 801f062:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801f064:	697b      	ldr	r3, [r7, #20]
 801f066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f06a:	691b      	ldr	r3, [r3, #16]
 801f06c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801f06e:	697b      	ldr	r3, [r7, #20]
 801f070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f076:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801f078:	78fb      	ldrb	r3, [r7, #3]
 801f07a:	f003 030f 	and.w	r3, r3, #15
 801f07e:	68fa      	ldr	r2, [r7, #12]
 801f080:	fa22 f303 	lsr.w	r3, r2, r3
 801f084:	01db      	lsls	r3, r3, #7
 801f086:	b2db      	uxtb	r3, r3
 801f088:	693a      	ldr	r2, [r7, #16]
 801f08a:	4313      	orrs	r3, r2
 801f08c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801f08e:	78fb      	ldrb	r3, [r7, #3]
 801f090:	015a      	lsls	r2, r3, #5
 801f092:	697b      	ldr	r3, [r7, #20]
 801f094:	4413      	add	r3, r2
 801f096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801f09a:	689b      	ldr	r3, [r3, #8]
 801f09c:	693a      	ldr	r2, [r7, #16]
 801f09e:	4013      	ands	r3, r2
 801f0a0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801f0a2:	68bb      	ldr	r3, [r7, #8]
}
 801f0a4:	4618      	mov	r0, r3
 801f0a6:	371c      	adds	r7, #28
 801f0a8:	46bd      	mov	sp, r7
 801f0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f0ae:	4770      	bx	lr

0801f0b0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801f0b0:	b480      	push	{r7}
 801f0b2:	b083      	sub	sp, #12
 801f0b4:	af00      	add	r7, sp, #0
 801f0b6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801f0b8:	687b      	ldr	r3, [r7, #4]
 801f0ba:	695b      	ldr	r3, [r3, #20]
 801f0bc:	f003 0301 	and.w	r3, r3, #1
}
 801f0c0:	4618      	mov	r0, r3
 801f0c2:	370c      	adds	r7, #12
 801f0c4:	46bd      	mov	sp, r7
 801f0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f0ca:	4770      	bx	lr

0801f0cc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801f0cc:	b480      	push	{r7}
 801f0ce:	b085      	sub	sp, #20
 801f0d0:	af00      	add	r7, sp, #0
 801f0d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f0d4:	687b      	ldr	r3, [r7, #4]
 801f0d6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801f0d8:	68fb      	ldr	r3, [r7, #12]
 801f0da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801f0de:	681b      	ldr	r3, [r3, #0]
 801f0e0:	68fa      	ldr	r2, [r7, #12]
 801f0e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801f0e6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801f0ea:	f023 0307 	bic.w	r3, r3, #7
 801f0ee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801f0f0:	68fb      	ldr	r3, [r7, #12]
 801f0f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f0f6:	685b      	ldr	r3, [r3, #4]
 801f0f8:	68fa      	ldr	r2, [r7, #12]
 801f0fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801f0fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801f102:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801f104:	2300      	movs	r3, #0
}
 801f106:	4618      	mov	r0, r3
 801f108:	3714      	adds	r7, #20
 801f10a:	46bd      	mov	sp, r7
 801f10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f110:	4770      	bx	lr
	...

0801f114 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 801f114:	b480      	push	{r7}
 801f116:	b087      	sub	sp, #28
 801f118:	af00      	add	r7, sp, #0
 801f11a:	60f8      	str	r0, [r7, #12]
 801f11c:	460b      	mov	r3, r1
 801f11e:	607a      	str	r2, [r7, #4]
 801f120:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f122:	68fb      	ldr	r3, [r7, #12]
 801f124:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801f126:	68fb      	ldr	r3, [r7, #12]
 801f128:	333c      	adds	r3, #60	; 0x3c
 801f12a:	3304      	adds	r3, #4
 801f12c:	681b      	ldr	r3, [r3, #0]
 801f12e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801f130:	693b      	ldr	r3, [r7, #16]
 801f132:	4a26      	ldr	r2, [pc, #152]	; (801f1cc <USB_EP0_OutStart+0xb8>)
 801f134:	4293      	cmp	r3, r2
 801f136:	d90a      	bls.n	801f14e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801f138:	697b      	ldr	r3, [r7, #20]
 801f13a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f13e:	681b      	ldr	r3, [r3, #0]
 801f140:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801f144:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801f148:	d101      	bne.n	801f14e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801f14a:	2300      	movs	r3, #0
 801f14c:	e037      	b.n	801f1be <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801f14e:	697b      	ldr	r3, [r7, #20]
 801f150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f154:	461a      	mov	r2, r3
 801f156:	2300      	movs	r3, #0
 801f158:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801f15a:	697b      	ldr	r3, [r7, #20]
 801f15c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f160:	691b      	ldr	r3, [r3, #16]
 801f162:	697a      	ldr	r2, [r7, #20]
 801f164:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f168:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801f16c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801f16e:	697b      	ldr	r3, [r7, #20]
 801f170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f174:	691b      	ldr	r3, [r3, #16]
 801f176:	697a      	ldr	r2, [r7, #20]
 801f178:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f17c:	f043 0318 	orr.w	r3, r3, #24
 801f180:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801f182:	697b      	ldr	r3, [r7, #20]
 801f184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f188:	691b      	ldr	r3, [r3, #16]
 801f18a:	697a      	ldr	r2, [r7, #20]
 801f18c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f190:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801f194:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801f196:	7afb      	ldrb	r3, [r7, #11]
 801f198:	2b01      	cmp	r3, #1
 801f19a:	d10f      	bne.n	801f1bc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801f19c:	697b      	ldr	r3, [r7, #20]
 801f19e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f1a2:	461a      	mov	r2, r3
 801f1a4:	687b      	ldr	r3, [r7, #4]
 801f1a6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801f1a8:	697b      	ldr	r3, [r7, #20]
 801f1aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f1ae:	681b      	ldr	r3, [r3, #0]
 801f1b0:	697a      	ldr	r2, [r7, #20]
 801f1b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f1b6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801f1ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801f1bc:	2300      	movs	r3, #0
}
 801f1be:	4618      	mov	r0, r3
 801f1c0:	371c      	adds	r7, #28
 801f1c2:	46bd      	mov	sp, r7
 801f1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f1c8:	4770      	bx	lr
 801f1ca:	bf00      	nop
 801f1cc:	4f54300a 	.word	0x4f54300a

0801f1d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801f1d0:	b480      	push	{r7}
 801f1d2:	b085      	sub	sp, #20
 801f1d4:	af00      	add	r7, sp, #0
 801f1d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801f1d8:	2300      	movs	r3, #0
 801f1da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 801f1dc:	68fb      	ldr	r3, [r7, #12]
 801f1de:	3301      	adds	r3, #1
 801f1e0:	60fb      	str	r3, [r7, #12]
 801f1e2:	4a13      	ldr	r2, [pc, #76]	; (801f230 <USB_CoreReset+0x60>)
 801f1e4:	4293      	cmp	r3, r2
 801f1e6:	d901      	bls.n	801f1ec <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 801f1e8:	2303      	movs	r3, #3
 801f1ea:	e01a      	b.n	801f222 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801f1ec:	687b      	ldr	r3, [r7, #4]
 801f1ee:	691b      	ldr	r3, [r3, #16]
 801f1f0:	2b00      	cmp	r3, #0
 801f1f2:	daf3      	bge.n	801f1dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801f1f4:	2300      	movs	r3, #0
 801f1f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801f1f8:	687b      	ldr	r3, [r7, #4]
 801f1fa:	691b      	ldr	r3, [r3, #16]
 801f1fc:	f043 0201 	orr.w	r2, r3, #1
 801f200:	687b      	ldr	r3, [r7, #4]
 801f202:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801f204:	68fb      	ldr	r3, [r7, #12]
 801f206:	3301      	adds	r3, #1
 801f208:	60fb      	str	r3, [r7, #12]
 801f20a:	4a09      	ldr	r2, [pc, #36]	; (801f230 <USB_CoreReset+0x60>)
 801f20c:	4293      	cmp	r3, r2
 801f20e:	d901      	bls.n	801f214 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 801f210:	2303      	movs	r3, #3
 801f212:	e006      	b.n	801f222 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801f214:	687b      	ldr	r3, [r7, #4]
 801f216:	691b      	ldr	r3, [r3, #16]
 801f218:	f003 0301 	and.w	r3, r3, #1
 801f21c:	2b01      	cmp	r3, #1
 801f21e:	d0f1      	beq.n	801f204 <USB_CoreReset+0x34>

  return HAL_OK;
 801f220:	2300      	movs	r3, #0
}
 801f222:	4618      	mov	r0, r3
 801f224:	3714      	adds	r7, #20
 801f226:	46bd      	mov	sp, r7
 801f228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f22c:	4770      	bx	lr
 801f22e:	bf00      	nop
 801f230:	00030d40 	.word	0x00030d40

0801f234 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801f234:	b580      	push	{r7, lr}
 801f236:	b084      	sub	sp, #16
 801f238:	af00      	add	r7, sp, #0
 801f23a:	6078      	str	r0, [r7, #4]
 801f23c:	460b      	mov	r3, r1
 801f23e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 801f240:	f44f 701d 	mov.w	r0, #628	; 0x274
 801f244:	f003 fc6e 	bl	8022b24 <USBD_static_malloc>
 801f248:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 801f24a:	68fb      	ldr	r3, [r7, #12]
 801f24c:	2b00      	cmp	r3, #0
 801f24e:	d105      	bne.n	801f25c <USBD_MSC_Init+0x28>
  {
    pdev->pClassData = NULL;
 801f250:	687b      	ldr	r3, [r7, #4]
 801f252:	2200      	movs	r2, #0
 801f254:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 801f258:	2302      	movs	r3, #2
 801f25a:	e034      	b.n	801f2c6 <USBD_MSC_Init+0x92>
  }

  pdev->pClassData = (void *)hmsc;
 801f25c:	687b      	ldr	r3, [r7, #4]
 801f25e:	68fa      	ldr	r2, [r7, #12]
 801f260:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801f264:	687b      	ldr	r3, [r7, #4]
 801f266:	7c1b      	ldrb	r3, [r3, #16]
 801f268:	2b00      	cmp	r3, #0
 801f26a:	d115      	bne.n	801f298 <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801f26c:	f44f 7300 	mov.w	r3, #512	; 0x200
 801f270:	2202      	movs	r2, #2
 801f272:	2101      	movs	r1, #1
 801f274:	6878      	ldr	r0, [r7, #4]
 801f276:	f003 fac4 	bl	8022802 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 801f27a:	687b      	ldr	r3, [r7, #4]
 801f27c:	2201      	movs	r2, #1
 801f27e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801f282:	f44f 7300 	mov.w	r3, #512	; 0x200
 801f286:	2202      	movs	r2, #2
 801f288:	2181      	movs	r1, #129	; 0x81
 801f28a:	6878      	ldr	r0, [r7, #4]
 801f28c:	f003 fab9 	bl	8022802 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 801f290:	687b      	ldr	r3, [r7, #4]
 801f292:	2201      	movs	r2, #1
 801f294:	871a      	strh	r2, [r3, #56]	; 0x38
 801f296:	e012      	b.n	801f2be <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801f298:	2340      	movs	r3, #64	; 0x40
 801f29a:	2202      	movs	r2, #2
 801f29c:	2101      	movs	r1, #1
 801f29e:	6878      	ldr	r0, [r7, #4]
 801f2a0:	f003 faaf 	bl	8022802 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 801f2a4:	687b      	ldr	r3, [r7, #4]
 801f2a6:	2201      	movs	r2, #1
 801f2a8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801f2ac:	2340      	movs	r3, #64	; 0x40
 801f2ae:	2202      	movs	r2, #2
 801f2b0:	2181      	movs	r1, #129	; 0x81
 801f2b2:	6878      	ldr	r0, [r7, #4]
 801f2b4:	f003 faa5 	bl	8022802 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 801f2b8:	687b      	ldr	r3, [r7, #4]
 801f2ba:	2201      	movs	r2, #1
 801f2bc:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 801f2be:	6878      	ldr	r0, [r7, #4]
 801f2c0:	f000 f999 	bl	801f5f6 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 801f2c4:	2300      	movs	r3, #0
}
 801f2c6:	4618      	mov	r0, r3
 801f2c8:	3710      	adds	r7, #16
 801f2ca:	46bd      	mov	sp, r7
 801f2cc:	bd80      	pop	{r7, pc}

0801f2ce <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801f2ce:	b580      	push	{r7, lr}
 801f2d0:	b082      	sub	sp, #8
 801f2d2:	af00      	add	r7, sp, #0
 801f2d4:	6078      	str	r0, [r7, #4]
 801f2d6:	460b      	mov	r3, r1
 801f2d8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 801f2da:	2101      	movs	r1, #1
 801f2dc:	6878      	ldr	r0, [r7, #4]
 801f2de:	f003 fab6 	bl	802284e <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 801f2e2:	687b      	ldr	r3, [r7, #4]
 801f2e4:	2200      	movs	r2, #0
 801f2e6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 801f2ea:	2181      	movs	r1, #129	; 0x81
 801f2ec:	6878      	ldr	r0, [r7, #4]
 801f2ee:	f003 faae 	bl	802284e <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 801f2f2:	687b      	ldr	r3, [r7, #4]
 801f2f4:	2200      	movs	r2, #0
 801f2f6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 801f2f8:	687b      	ldr	r3, [r7, #4]
 801f2fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f2fe:	2b00      	cmp	r3, #0
 801f300:	d00c      	beq.n	801f31c <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 801f302:	6878      	ldr	r0, [r7, #4]
 801f304:	f000 f9d5 	bl	801f6b2 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassData);
 801f308:	687b      	ldr	r3, [r7, #4]
 801f30a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f30e:	4618      	mov	r0, r3
 801f310:	f003 fc16 	bl	8022b40 <USBD_static_free>
    pdev->pClassData = NULL;
 801f314:	687b      	ldr	r3, [r7, #4]
 801f316:	2200      	movs	r2, #0
 801f318:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801f31c:	2300      	movs	r3, #0
}
 801f31e:	4618      	mov	r0, r3
 801f320:	3708      	adds	r7, #8
 801f322:	46bd      	mov	sp, r7
 801f324:	bd80      	pop	{r7, pc}
	...

0801f328 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801f328:	b580      	push	{r7, lr}
 801f32a:	b086      	sub	sp, #24
 801f32c:	af00      	add	r7, sp, #0
 801f32e:	6078      	str	r0, [r7, #4]
 801f330:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f332:	687b      	ldr	r3, [r7, #4]
 801f334:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f338:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 801f33a:	2300      	movs	r3, #0
 801f33c:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 801f33e:	2300      	movs	r3, #0
 801f340:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 801f342:	693b      	ldr	r3, [r7, #16]
 801f344:	2b00      	cmp	r3, #0
 801f346:	d101      	bne.n	801f34c <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801f348:	2303      	movs	r3, #3
 801f34a:	e0db      	b.n	801f504 <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801f34c:	683b      	ldr	r3, [r7, #0]
 801f34e:	781b      	ldrb	r3, [r3, #0]
 801f350:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801f354:	2b00      	cmp	r3, #0
 801f356:	d04e      	beq.n	801f3f6 <USBD_MSC_Setup+0xce>
 801f358:	2b20      	cmp	r3, #32
 801f35a:	f040 80cb 	bne.w	801f4f4 <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 801f35e:	683b      	ldr	r3, [r7, #0]
 801f360:	785b      	ldrb	r3, [r3, #1]
 801f362:	2bfe      	cmp	r3, #254	; 0xfe
 801f364:	d002      	beq.n	801f36c <USBD_MSC_Setup+0x44>
 801f366:	2bff      	cmp	r3, #255	; 0xff
 801f368:	d025      	beq.n	801f3b6 <USBD_MSC_Setup+0x8e>
 801f36a:	e03c      	b.n	801f3e6 <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801f36c:	683b      	ldr	r3, [r7, #0]
 801f36e:	885b      	ldrh	r3, [r3, #2]
 801f370:	2b00      	cmp	r3, #0
 801f372:	d119      	bne.n	801f3a8 <USBD_MSC_Setup+0x80>
 801f374:	683b      	ldr	r3, [r7, #0]
 801f376:	88db      	ldrh	r3, [r3, #6]
 801f378:	2b01      	cmp	r3, #1
 801f37a:	d115      	bne.n	801f3a8 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 801f37c:	683b      	ldr	r3, [r7, #0]
 801f37e:	781b      	ldrb	r3, [r3, #0]
 801f380:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801f382:	2b00      	cmp	r3, #0
 801f384:	da10      	bge.n	801f3a8 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 801f386:	687b      	ldr	r3, [r7, #4]
 801f388:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801f38c:	699b      	ldr	r3, [r3, #24]
 801f38e:	4798      	blx	r3
 801f390:	4603      	mov	r3, r0
 801f392:	461a      	mov	r2, r3
 801f394:	693b      	ldr	r3, [r7, #16]
 801f396:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 801f398:	693b      	ldr	r3, [r7, #16]
 801f39a:	2201      	movs	r2, #1
 801f39c:	4619      	mov	r1, r3
 801f39e:	6878      	ldr	r0, [r7, #4]
 801f3a0:	f002 fe3d 	bl	802201e <USBD_CtlSendData>
 801f3a4:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f3a6:	e025      	b.n	801f3f4 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 801f3a8:	6839      	ldr	r1, [r7, #0]
 801f3aa:	6878      	ldr	r0, [r7, #4]
 801f3ac:	f002 fdc6 	bl	8021f3c <USBD_CtlError>
            ret = USBD_FAIL;
 801f3b0:	2303      	movs	r3, #3
 801f3b2:	75fb      	strb	r3, [r7, #23]
          break;
 801f3b4:	e01e      	b.n	801f3f4 <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801f3b6:	683b      	ldr	r3, [r7, #0]
 801f3b8:	885b      	ldrh	r3, [r3, #2]
 801f3ba:	2b00      	cmp	r3, #0
 801f3bc:	d10c      	bne.n	801f3d8 <USBD_MSC_Setup+0xb0>
 801f3be:	683b      	ldr	r3, [r7, #0]
 801f3c0:	88db      	ldrh	r3, [r3, #6]
 801f3c2:	2b00      	cmp	r3, #0
 801f3c4:	d108      	bne.n	801f3d8 <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 801f3c6:	683b      	ldr	r3, [r7, #0]
 801f3c8:	781b      	ldrb	r3, [r3, #0]
 801f3ca:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801f3cc:	2b00      	cmp	r3, #0
 801f3ce:	db03      	blt.n	801f3d8 <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 801f3d0:	6878      	ldr	r0, [r7, #4]
 801f3d2:	f000 f948 	bl	801f666 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f3d6:	e00d      	b.n	801f3f4 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 801f3d8:	6839      	ldr	r1, [r7, #0]
 801f3da:	6878      	ldr	r0, [r7, #4]
 801f3dc:	f002 fdae 	bl	8021f3c <USBD_CtlError>
            ret = USBD_FAIL;
 801f3e0:	2303      	movs	r3, #3
 801f3e2:	75fb      	strb	r3, [r7, #23]
          break;
 801f3e4:	e006      	b.n	801f3f4 <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801f3e6:	6839      	ldr	r1, [r7, #0]
 801f3e8:	6878      	ldr	r0, [r7, #4]
 801f3ea:	f002 fda7 	bl	8021f3c <USBD_CtlError>
          ret = USBD_FAIL;
 801f3ee:	2303      	movs	r3, #3
 801f3f0:	75fb      	strb	r3, [r7, #23]
          break;
 801f3f2:	bf00      	nop
      }
      break;
 801f3f4:	e085      	b.n	801f502 <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801f3f6:	683b      	ldr	r3, [r7, #0]
 801f3f8:	785b      	ldrb	r3, [r3, #1]
 801f3fa:	2b0b      	cmp	r3, #11
 801f3fc:	d871      	bhi.n	801f4e2 <USBD_MSC_Setup+0x1ba>
 801f3fe:	a201      	add	r2, pc, #4	; (adr r2, 801f404 <USBD_MSC_Setup+0xdc>)
 801f400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f404:	0801f435 	.word	0x0801f435
 801f408:	0801f4b1 	.word	0x0801f4b1
 801f40c:	0801f4e3 	.word	0x0801f4e3
 801f410:	0801f4e3 	.word	0x0801f4e3
 801f414:	0801f4e3 	.word	0x0801f4e3
 801f418:	0801f4e3 	.word	0x0801f4e3
 801f41c:	0801f4e3 	.word	0x0801f4e3
 801f420:	0801f4e3 	.word	0x0801f4e3
 801f424:	0801f4e3 	.word	0x0801f4e3
 801f428:	0801f4e3 	.word	0x0801f4e3
 801f42c:	0801f45f 	.word	0x0801f45f
 801f430:	0801f489 	.word	0x0801f489
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f434:	687b      	ldr	r3, [r7, #4]
 801f436:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f43a:	b2db      	uxtb	r3, r3
 801f43c:	2b03      	cmp	r3, #3
 801f43e:	d107      	bne.n	801f450 <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801f440:	f107 030e 	add.w	r3, r7, #14
 801f444:	2202      	movs	r2, #2
 801f446:	4619      	mov	r1, r3
 801f448:	6878      	ldr	r0, [r7, #4]
 801f44a:	f002 fde8 	bl	802201e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f44e:	e050      	b.n	801f4f2 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801f450:	6839      	ldr	r1, [r7, #0]
 801f452:	6878      	ldr	r0, [r7, #4]
 801f454:	f002 fd72 	bl	8021f3c <USBD_CtlError>
            ret = USBD_FAIL;
 801f458:	2303      	movs	r3, #3
 801f45a:	75fb      	strb	r3, [r7, #23]
          break;
 801f45c:	e049      	b.n	801f4f2 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f45e:	687b      	ldr	r3, [r7, #4]
 801f460:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f464:	b2db      	uxtb	r3, r3
 801f466:	2b03      	cmp	r3, #3
 801f468:	d107      	bne.n	801f47a <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 801f46a:	693b      	ldr	r3, [r7, #16]
 801f46c:	3304      	adds	r3, #4
 801f46e:	2201      	movs	r2, #1
 801f470:	4619      	mov	r1, r3
 801f472:	6878      	ldr	r0, [r7, #4]
 801f474:	f002 fdd3 	bl	802201e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f478:	e03b      	b.n	801f4f2 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801f47a:	6839      	ldr	r1, [r7, #0]
 801f47c:	6878      	ldr	r0, [r7, #4]
 801f47e:	f002 fd5d 	bl	8021f3c <USBD_CtlError>
            ret = USBD_FAIL;
 801f482:	2303      	movs	r3, #3
 801f484:	75fb      	strb	r3, [r7, #23]
          break;
 801f486:	e034      	b.n	801f4f2 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f488:	687b      	ldr	r3, [r7, #4]
 801f48a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f48e:	b2db      	uxtb	r3, r3
 801f490:	2b03      	cmp	r3, #3
 801f492:	d106      	bne.n	801f4a2 <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 801f494:	683b      	ldr	r3, [r7, #0]
 801f496:	885b      	ldrh	r3, [r3, #2]
 801f498:	b2db      	uxtb	r3, r3
 801f49a:	461a      	mov	r2, r3
 801f49c:	693b      	ldr	r3, [r7, #16]
 801f49e:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f4a0:	e027      	b.n	801f4f2 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801f4a2:	6839      	ldr	r1, [r7, #0]
 801f4a4:	6878      	ldr	r0, [r7, #4]
 801f4a6:	f002 fd49 	bl	8021f3c <USBD_CtlError>
            ret = USBD_FAIL;
 801f4aa:	2303      	movs	r3, #3
 801f4ac:	75fb      	strb	r3, [r7, #23]
          break;
 801f4ae:	e020      	b.n	801f4f2 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f4b0:	687b      	ldr	r3, [r7, #4]
 801f4b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f4b6:	b2db      	uxtb	r3, r3
 801f4b8:	2b03      	cmp	r3, #3
 801f4ba:	d119      	bne.n	801f4f0 <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 801f4bc:	683b      	ldr	r3, [r7, #0]
 801f4be:	885b      	ldrh	r3, [r3, #2]
 801f4c0:	2b00      	cmp	r3, #0
 801f4c2:	d115      	bne.n	801f4f0 <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 801f4c4:	683b      	ldr	r3, [r7, #0]
 801f4c6:	889b      	ldrh	r3, [r3, #4]
 801f4c8:	b2db      	uxtb	r3, r3
 801f4ca:	4619      	mov	r1, r3
 801f4cc:	6878      	ldr	r0, [r7, #4]
 801f4ce:	f003 f9dd 	bl	802288c <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 801f4d2:	683b      	ldr	r3, [r7, #0]
 801f4d4:	889b      	ldrh	r3, [r3, #4]
 801f4d6:	b2db      	uxtb	r3, r3
 801f4d8:	4619      	mov	r1, r3
 801f4da:	6878      	ldr	r0, [r7, #4]
 801f4dc:	f000 fa82 	bl	801f9e4 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 801f4e0:	e006      	b.n	801f4f0 <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 801f4e2:	6839      	ldr	r1, [r7, #0]
 801f4e4:	6878      	ldr	r0, [r7, #4]
 801f4e6:	f002 fd29 	bl	8021f3c <USBD_CtlError>
          ret = USBD_FAIL;
 801f4ea:	2303      	movs	r3, #3
 801f4ec:	75fb      	strb	r3, [r7, #23]
          break;
 801f4ee:	e000      	b.n	801f4f2 <USBD_MSC_Setup+0x1ca>
          break;
 801f4f0:	bf00      	nop
      }
      break;
 801f4f2:	e006      	b.n	801f502 <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 801f4f4:	6839      	ldr	r1, [r7, #0]
 801f4f6:	6878      	ldr	r0, [r7, #4]
 801f4f8:	f002 fd20 	bl	8021f3c <USBD_CtlError>
      ret = USBD_FAIL;
 801f4fc:	2303      	movs	r3, #3
 801f4fe:	75fb      	strb	r3, [r7, #23]
      break;
 801f500:	bf00      	nop
  }

  return (uint8_t)ret;
 801f502:	7dfb      	ldrb	r3, [r7, #23]
}
 801f504:	4618      	mov	r0, r3
 801f506:	3718      	adds	r7, #24
 801f508:	46bd      	mov	sp, r7
 801f50a:	bd80      	pop	{r7, pc}

0801f50c <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f50c:	b580      	push	{r7, lr}
 801f50e:	b082      	sub	sp, #8
 801f510:	af00      	add	r7, sp, #0
 801f512:	6078      	str	r0, [r7, #4]
 801f514:	460b      	mov	r3, r1
 801f516:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 801f518:	78fb      	ldrb	r3, [r7, #3]
 801f51a:	4619      	mov	r1, r3
 801f51c:	6878      	ldr	r0, [r7, #4]
 801f51e:	f000 f8dc 	bl	801f6da <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 801f522:	2300      	movs	r3, #0
}
 801f524:	4618      	mov	r0, r3
 801f526:	3708      	adds	r7, #8
 801f528:	46bd      	mov	sp, r7
 801f52a:	bd80      	pop	{r7, pc}

0801f52c <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f52c:	b580      	push	{r7, lr}
 801f52e:	b082      	sub	sp, #8
 801f530:	af00      	add	r7, sp, #0
 801f532:	6078      	str	r0, [r7, #4]
 801f534:	460b      	mov	r3, r1
 801f536:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 801f538:	78fb      	ldrb	r3, [r7, #3]
 801f53a:	4619      	mov	r1, r3
 801f53c:	6878      	ldr	r0, [r7, #4]
 801f53e:	f000 f902 	bl	801f746 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 801f542:	2300      	movs	r3, #0
}
 801f544:	4618      	mov	r0, r3
 801f546:	3708      	adds	r7, #8
 801f548:	46bd      	mov	sp, r7
 801f54a:	bd80      	pop	{r7, pc}

0801f54c <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 801f54c:	b480      	push	{r7}
 801f54e:	b083      	sub	sp, #12
 801f550:	af00      	add	r7, sp, #0
 801f552:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 801f554:	687b      	ldr	r3, [r7, #4]
 801f556:	2220      	movs	r2, #32
 801f558:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 801f55a:	4b03      	ldr	r3, [pc, #12]	; (801f568 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 801f55c:	4618      	mov	r0, r3
 801f55e:	370c      	adds	r7, #12
 801f560:	46bd      	mov	sp, r7
 801f562:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f566:	4770      	bx	lr
 801f568:	200005cc 	.word	0x200005cc

0801f56c <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 801f56c:	b480      	push	{r7}
 801f56e:	b083      	sub	sp, #12
 801f570:	af00      	add	r7, sp, #0
 801f572:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 801f574:	687b      	ldr	r3, [r7, #4]
 801f576:	2220      	movs	r2, #32
 801f578:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 801f57a:	4b03      	ldr	r3, [pc, #12]	; (801f588 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 801f57c:	4618      	mov	r0, r3
 801f57e:	370c      	adds	r7, #12
 801f580:	46bd      	mov	sp, r7
 801f582:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f586:	4770      	bx	lr
 801f588:	200005ec 	.word	0x200005ec

0801f58c <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801f58c:	b480      	push	{r7}
 801f58e:	b083      	sub	sp, #12
 801f590:	af00      	add	r7, sp, #0
 801f592:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 801f594:	687b      	ldr	r3, [r7, #4]
 801f596:	2220      	movs	r2, #32
 801f598:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 801f59a:	4b03      	ldr	r3, [pc, #12]	; (801f5a8 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 801f59c:	4618      	mov	r0, r3
 801f59e:	370c      	adds	r7, #12
 801f5a0:	46bd      	mov	sp, r7
 801f5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5a6:	4770      	bx	lr
 801f5a8:	2000060c 	.word	0x2000060c

0801f5ac <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801f5ac:	b480      	push	{r7}
 801f5ae:	b083      	sub	sp, #12
 801f5b0:	af00      	add	r7, sp, #0
 801f5b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 801f5b4:	687b      	ldr	r3, [r7, #4]
 801f5b6:	220a      	movs	r2, #10
 801f5b8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 801f5ba:	4b03      	ldr	r3, [pc, #12]	; (801f5c8 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 801f5bc:	4618      	mov	r0, r3
 801f5be:	370c      	adds	r7, #12
 801f5c0:	46bd      	mov	sp, r7
 801f5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5c6:	4770      	bx	lr
 801f5c8:	2000062c 	.word	0x2000062c

0801f5cc <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 801f5cc:	b480      	push	{r7}
 801f5ce:	b083      	sub	sp, #12
 801f5d0:	af00      	add	r7, sp, #0
 801f5d2:	6078      	str	r0, [r7, #4]
 801f5d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801f5d6:	683b      	ldr	r3, [r7, #0]
 801f5d8:	2b00      	cmp	r3, #0
 801f5da:	d101      	bne.n	801f5e0 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801f5dc:	2303      	movs	r3, #3
 801f5de:	e004      	b.n	801f5ea <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 801f5e0:	687b      	ldr	r3, [r7, #4]
 801f5e2:	683a      	ldr	r2, [r7, #0]
 801f5e4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 801f5e8:	2300      	movs	r3, #0
}
 801f5ea:	4618      	mov	r0, r3
 801f5ec:	370c      	adds	r7, #12
 801f5ee:	46bd      	mov	sp, r7
 801f5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5f4:	4770      	bx	lr

0801f5f6 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 801f5f6:	b580      	push	{r7, lr}
 801f5f8:	b084      	sub	sp, #16
 801f5fa:	af00      	add	r7, sp, #0
 801f5fc:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f5fe:	687b      	ldr	r3, [r7, #4]
 801f600:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f604:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f606:	68fb      	ldr	r3, [r7, #12]
 801f608:	2b00      	cmp	r3, #0
 801f60a:	d028      	beq.n	801f65e <MSC_BOT_Init+0x68>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 801f60c:	68fb      	ldr	r3, [r7, #12]
 801f60e:	2200      	movs	r2, #0
 801f610:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 801f612:	68fb      	ldr	r3, [r7, #12]
 801f614:	2200      	movs	r2, #0
 801f616:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 801f618:	68fb      	ldr	r3, [r7, #12]
 801f61a:	2200      	movs	r2, #0
 801f61c:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 801f620:	68fb      	ldr	r3, [r7, #12]
 801f622:	2200      	movs	r2, #0
 801f624:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801f628:	68fb      	ldr	r3, [r7, #12]
 801f62a:	2200      	movs	r2, #0
 801f62c:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 801f630:	687b      	ldr	r3, [r7, #4]
 801f632:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801f636:	681b      	ldr	r3, [r3, #0]
 801f638:	2000      	movs	r0, #0
 801f63a:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 801f63c:	2101      	movs	r1, #1
 801f63e:	6878      	ldr	r0, [r7, #4]
 801f640:	f003 f924 	bl	802288c <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 801f644:	2181      	movs	r1, #129	; 0x81
 801f646:	6878      	ldr	r0, [r7, #4]
 801f648:	f003 f920 	bl	802288c <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 801f64c:	68fb      	ldr	r3, [r7, #12]
 801f64e:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801f652:	231f      	movs	r3, #31
 801f654:	2101      	movs	r1, #1
 801f656:	6878      	ldr	r0, [r7, #4]
 801f658:	f003 f9e1 	bl	8022a1e <USBD_LL_PrepareReceive>
 801f65c:	e000      	b.n	801f660 <MSC_BOT_Init+0x6a>
    return;
 801f65e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801f660:	3710      	adds	r7, #16
 801f662:	46bd      	mov	sp, r7
 801f664:	bd80      	pop	{r7, pc}

0801f666 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 801f666:	b580      	push	{r7, lr}
 801f668:	b084      	sub	sp, #16
 801f66a:	af00      	add	r7, sp, #0
 801f66c:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f66e:	687b      	ldr	r3, [r7, #4]
 801f670:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f674:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f676:	68fb      	ldr	r3, [r7, #12]
 801f678:	2b00      	cmp	r3, #0
 801f67a:	d016      	beq.n	801f6aa <MSC_BOT_Reset+0x44>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 801f67c:	68fb      	ldr	r3, [r7, #12]
 801f67e:	2200      	movs	r2, #0
 801f680:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 801f682:	68fb      	ldr	r3, [r7, #12]
 801f684:	2201      	movs	r2, #1
 801f686:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 801f688:	2181      	movs	r1, #129	; 0x81
 801f68a:	6878      	ldr	r0, [r7, #4]
 801f68c:	f003 f93c 	bl	8022908 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 801f690:	2101      	movs	r1, #1
 801f692:	6878      	ldr	r0, [r7, #4]
 801f694:	f003 f938 	bl	8022908 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 801f698:	68fb      	ldr	r3, [r7, #12]
 801f69a:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801f69e:	231f      	movs	r3, #31
 801f6a0:	2101      	movs	r1, #1
 801f6a2:	6878      	ldr	r0, [r7, #4]
 801f6a4:	f003 f9bb 	bl	8022a1e <USBD_LL_PrepareReceive>
 801f6a8:	e000      	b.n	801f6ac <MSC_BOT_Reset+0x46>
    return;
 801f6aa:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801f6ac:	3710      	adds	r7, #16
 801f6ae:	46bd      	mov	sp, r7
 801f6b0:	bd80      	pop	{r7, pc}

0801f6b2 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 801f6b2:	b480      	push	{r7}
 801f6b4:	b085      	sub	sp, #20
 801f6b6:	af00      	add	r7, sp, #0
 801f6b8:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f6ba:	687b      	ldr	r3, [r7, #4]
 801f6bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f6c0:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 801f6c2:	68fb      	ldr	r3, [r7, #12]
 801f6c4:	2b00      	cmp	r3, #0
 801f6c6:	d002      	beq.n	801f6ce <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 801f6c8:	68fb      	ldr	r3, [r7, #12]
 801f6ca:	2200      	movs	r2, #0
 801f6cc:	721a      	strb	r2, [r3, #8]
  }
}
 801f6ce:	bf00      	nop
 801f6d0:	3714      	adds	r7, #20
 801f6d2:	46bd      	mov	sp, r7
 801f6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f6d8:	4770      	bx	lr

0801f6da <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f6da:	b580      	push	{r7, lr}
 801f6dc:	b084      	sub	sp, #16
 801f6de:	af00      	add	r7, sp, #0
 801f6e0:	6078      	str	r0, [r7, #4]
 801f6e2:	460b      	mov	r3, r1
 801f6e4:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f6e6:	687b      	ldr	r3, [r7, #4]
 801f6e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f6ec:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f6ee:	68fb      	ldr	r3, [r7, #12]
 801f6f0:	2b00      	cmp	r3, #0
 801f6f2:	d020      	beq.n	801f736 <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 801f6f4:	68fb      	ldr	r3, [r7, #12]
 801f6f6:	7a1b      	ldrb	r3, [r3, #8]
 801f6f8:	2b02      	cmp	r3, #2
 801f6fa:	d005      	beq.n	801f708 <MSC_BOT_DataIn+0x2e>
 801f6fc:	2b02      	cmp	r3, #2
 801f6fe:	db1c      	blt.n	801f73a <MSC_BOT_DataIn+0x60>
 801f700:	3b03      	subs	r3, #3
 801f702:	2b01      	cmp	r3, #1
 801f704:	d819      	bhi.n	801f73a <MSC_BOT_DataIn+0x60>
 801f706:	e011      	b.n	801f72c <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801f708:	68fb      	ldr	r3, [r7, #12]
 801f70a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801f70e:	68fb      	ldr	r3, [r7, #12]
 801f710:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801f714:	461a      	mov	r2, r3
 801f716:	6878      	ldr	r0, [r7, #4]
 801f718:	f000 f992 	bl	801fa40 <SCSI_ProcessCmd>
 801f71c:	4603      	mov	r3, r0
 801f71e:	2b00      	cmp	r3, #0
 801f720:	da0d      	bge.n	801f73e <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801f722:	2101      	movs	r1, #1
 801f724:	6878      	ldr	r0, [r7, #4]
 801f726:	f000 f8fb 	bl	801f920 <MSC_BOT_SendCSW>
      }
      break;
 801f72a:	e008      	b.n	801f73e <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801f72c:	2100      	movs	r1, #0
 801f72e:	6878      	ldr	r0, [r7, #4]
 801f730:	f000 f8f6 	bl	801f920 <MSC_BOT_SendCSW>
      break;
 801f734:	e004      	b.n	801f740 <MSC_BOT_DataIn+0x66>
    return;
 801f736:	bf00      	nop
 801f738:	e002      	b.n	801f740 <MSC_BOT_DataIn+0x66>

    default:
      break;
 801f73a:	bf00      	nop
 801f73c:	e000      	b.n	801f740 <MSC_BOT_DataIn+0x66>
      break;
 801f73e:	bf00      	nop
  }
}
 801f740:	3710      	adds	r7, #16
 801f742:	46bd      	mov	sp, r7
 801f744:	bd80      	pop	{r7, pc}

0801f746 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f746:	b580      	push	{r7, lr}
 801f748:	b084      	sub	sp, #16
 801f74a:	af00      	add	r7, sp, #0
 801f74c:	6078      	str	r0, [r7, #4]
 801f74e:	460b      	mov	r3, r1
 801f750:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f752:	687b      	ldr	r3, [r7, #4]
 801f754:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f758:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f75a:	68fb      	ldr	r3, [r7, #12]
 801f75c:	2b00      	cmp	r3, #0
 801f75e:	d01c      	beq.n	801f79a <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 801f760:	68fb      	ldr	r3, [r7, #12]
 801f762:	7a1b      	ldrb	r3, [r3, #8]
 801f764:	2b00      	cmp	r3, #0
 801f766:	d002      	beq.n	801f76e <MSC_BOT_DataOut+0x28>
 801f768:	2b01      	cmp	r3, #1
 801f76a:	d004      	beq.n	801f776 <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 801f76c:	e018      	b.n	801f7a0 <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 801f76e:	6878      	ldr	r0, [r7, #4]
 801f770:	f000 f81a 	bl	801f7a8 <MSC_BOT_CBW_Decode>
      break;
 801f774:	e014      	b.n	801f7a0 <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801f776:	68fb      	ldr	r3, [r7, #12]
 801f778:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801f77c:	68fb      	ldr	r3, [r7, #12]
 801f77e:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801f782:	461a      	mov	r2, r3
 801f784:	6878      	ldr	r0, [r7, #4]
 801f786:	f000 f95b 	bl	801fa40 <SCSI_ProcessCmd>
 801f78a:	4603      	mov	r3, r0
 801f78c:	2b00      	cmp	r3, #0
 801f78e:	da06      	bge.n	801f79e <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801f790:	2101      	movs	r1, #1
 801f792:	6878      	ldr	r0, [r7, #4]
 801f794:	f000 f8c4 	bl	801f920 <MSC_BOT_SendCSW>
      break;
 801f798:	e001      	b.n	801f79e <MSC_BOT_DataOut+0x58>
    return;
 801f79a:	bf00      	nop
 801f79c:	e000      	b.n	801f7a0 <MSC_BOT_DataOut+0x5a>
      break;
 801f79e:	bf00      	nop
  }
}
 801f7a0:	3710      	adds	r7, #16
 801f7a2:	46bd      	mov	sp, r7
 801f7a4:	bd80      	pop	{r7, pc}
	...

0801f7a8 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 801f7a8:	b580      	push	{r7, lr}
 801f7aa:	b084      	sub	sp, #16
 801f7ac:	af00      	add	r7, sp, #0
 801f7ae:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f7b0:	687b      	ldr	r3, [r7, #4]
 801f7b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f7b6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f7b8:	68fb      	ldr	r3, [r7, #12]
 801f7ba:	2b00      	cmp	r3, #0
 801f7bc:	d077      	beq.n	801f8ae <MSC_BOT_CBW_Decode+0x106>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 801f7be:	68fb      	ldr	r3, [r7, #12]
 801f7c0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 801f7c4:	68fb      	ldr	r3, [r7, #12]
 801f7c6:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 801f7ca:	68fb      	ldr	r3, [r7, #12]
 801f7cc:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801f7d0:	68fb      	ldr	r3, [r7, #12]
 801f7d2:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 801f7d6:	2101      	movs	r1, #1
 801f7d8:	6878      	ldr	r0, [r7, #4]
 801f7da:	f003 f941 	bl	8022a60 <USBD_LL_GetRxDataSize>
 801f7de:	4603      	mov	r3, r0
 801f7e0:	2b1f      	cmp	r3, #31
 801f7e2:	d114      	bne.n	801f80e <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801f7e4:	68fb      	ldr	r3, [r7, #12]
 801f7e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 801f7ea:	4a34      	ldr	r2, [pc, #208]	; (801f8bc <MSC_BOT_CBW_Decode+0x114>)
 801f7ec:	4293      	cmp	r3, r2
 801f7ee:	d10e      	bne.n	801f80e <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801f7f0:	68fb      	ldr	r3, [r7, #12]
 801f7f2:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801f7f6:	2b01      	cmp	r3, #1
 801f7f8:	d809      	bhi.n	801f80e <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801f7fa:	68fb      	ldr	r3, [r7, #12]
 801f7fc:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 801f800:	2b00      	cmp	r3, #0
 801f802:	d004      	beq.n	801f80e <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bCBLength > 16U))
 801f804:	68fb      	ldr	r3, [r7, #12]
 801f806:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801f80a:	2b10      	cmp	r3, #16
 801f80c:	d90e      	bls.n	801f82c <MSC_BOT_CBW_Decode+0x84>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801f80e:	68fb      	ldr	r3, [r7, #12]
 801f810:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801f814:	2320      	movs	r3, #32
 801f816:	2205      	movs	r2, #5
 801f818:	6878      	ldr	r0, [r7, #4]
 801f81a:	f000 fdbc 	bl	8020396 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801f81e:	68fb      	ldr	r3, [r7, #12]
 801f820:	2202      	movs	r2, #2
 801f822:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 801f824:	6878      	ldr	r0, [r7, #4]
 801f826:	f000 f8ab 	bl	801f980 <MSC_BOT_Abort>
 801f82a:	e043      	b.n	801f8b4 <MSC_BOT_CBW_Decode+0x10c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801f82c:	68fb      	ldr	r3, [r7, #12]
 801f82e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801f832:	68fb      	ldr	r3, [r7, #12]
 801f834:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801f838:	461a      	mov	r2, r3
 801f83a:	6878      	ldr	r0, [r7, #4]
 801f83c:	f000 f900 	bl	801fa40 <SCSI_ProcessCmd>
 801f840:	4603      	mov	r3, r0
 801f842:	2b00      	cmp	r3, #0
 801f844:	da0c      	bge.n	801f860 <MSC_BOT_CBW_Decode+0xb8>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 801f846:	68fb      	ldr	r3, [r7, #12]
 801f848:	7a1b      	ldrb	r3, [r3, #8]
 801f84a:	2b05      	cmp	r3, #5
 801f84c:	d104      	bne.n	801f858 <MSC_BOT_CBW_Decode+0xb0>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801f84e:	2101      	movs	r1, #1
 801f850:	6878      	ldr	r0, [r7, #4]
 801f852:	f000 f865 	bl	801f920 <MSC_BOT_SendCSW>
 801f856:	e02d      	b.n	801f8b4 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801f858:	6878      	ldr	r0, [r7, #4]
 801f85a:	f000 f891 	bl	801f980 <MSC_BOT_Abort>
 801f85e:	e029      	b.n	801f8b4 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801f860:	68fb      	ldr	r3, [r7, #12]
 801f862:	7a1b      	ldrb	r3, [r3, #8]
 801f864:	2b02      	cmp	r3, #2
 801f866:	d024      	beq.n	801f8b2 <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801f868:	68fb      	ldr	r3, [r7, #12]
 801f86a:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801f86c:	2b01      	cmp	r3, #1
 801f86e:	d020      	beq.n	801f8b2 <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 801f870:	68fb      	ldr	r3, [r7, #12]
 801f872:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801f874:	2b03      	cmp	r3, #3
 801f876:	d01c      	beq.n	801f8b2 <MSC_BOT_CBW_Decode+0x10a>
    {
      if (hmsc->bot_data_length > 0U)
 801f878:	68fb      	ldr	r3, [r7, #12]
 801f87a:	68db      	ldr	r3, [r3, #12]
 801f87c:	2b00      	cmp	r3, #0
 801f87e:	d009      	beq.n	801f894 <MSC_BOT_CBW_Decode+0xec>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 801f880:	68fb      	ldr	r3, [r7, #12]
 801f882:	f103 0110 	add.w	r1, r3, #16
 801f886:	68fb      	ldr	r3, [r7, #12]
 801f888:	68db      	ldr	r3, [r3, #12]
 801f88a:	461a      	mov	r2, r3
 801f88c:	6878      	ldr	r0, [r7, #4]
 801f88e:	f000 f817 	bl	801f8c0 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 801f892:	e00f      	b.n	801f8b4 <MSC_BOT_CBW_Decode+0x10c>
      }
      else if (hmsc->bot_data_length == 0U)
 801f894:	68fb      	ldr	r3, [r7, #12]
 801f896:	68db      	ldr	r3, [r3, #12]
 801f898:	2b00      	cmp	r3, #0
 801f89a:	d104      	bne.n	801f8a6 <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801f89c:	2100      	movs	r1, #0
 801f89e:	6878      	ldr	r0, [r7, #4]
 801f8a0:	f000 f83e 	bl	801f920 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 801f8a4:	e006      	b.n	801f8b4 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801f8a6:	6878      	ldr	r0, [r7, #4]
 801f8a8:	f000 f86a 	bl	801f980 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 801f8ac:	e002      	b.n	801f8b4 <MSC_BOT_CBW_Decode+0x10c>
    return;
 801f8ae:	bf00      	nop
 801f8b0:	e000      	b.n	801f8b4 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    else
    {
      return;
 801f8b2:	bf00      	nop
    }
  }
}
 801f8b4:	3710      	adds	r7, #16
 801f8b6:	46bd      	mov	sp, r7
 801f8b8:	bd80      	pop	{r7, pc}
 801f8ba:	bf00      	nop
 801f8bc:	43425355 	.word	0x43425355

0801f8c0 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 801f8c0:	b580      	push	{r7, lr}
 801f8c2:	b086      	sub	sp, #24
 801f8c4:	af00      	add	r7, sp, #0
 801f8c6:	60f8      	str	r0, [r7, #12]
 801f8c8:	60b9      	str	r1, [r7, #8]
 801f8ca:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f8cc:	68fb      	ldr	r3, [r7, #12]
 801f8ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f8d2:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 801f8d4:	697b      	ldr	r3, [r7, #20]
 801f8d6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801f8da:	687a      	ldr	r2, [r7, #4]
 801f8dc:	4293      	cmp	r3, r2
 801f8de:	bf28      	it	cs
 801f8e0:	4613      	movcs	r3, r2
 801f8e2:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801f8e4:	697b      	ldr	r3, [r7, #20]
 801f8e6:	2b00      	cmp	r3, #0
 801f8e8:	d015      	beq.n	801f916 <MSC_BOT_SendData+0x56>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 801f8ea:	697b      	ldr	r3, [r7, #20]
 801f8ec:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 801f8f0:	687b      	ldr	r3, [r7, #4]
 801f8f2:	1ad2      	subs	r2, r2, r3
 801f8f4:	697b      	ldr	r3, [r7, #20]
 801f8f6:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 801f8fa:	697b      	ldr	r3, [r7, #20]
 801f8fc:	2200      	movs	r2, #0
 801f8fe:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 801f902:	697b      	ldr	r3, [r7, #20]
 801f904:	2204      	movs	r2, #4
 801f906:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 801f908:	693b      	ldr	r3, [r7, #16]
 801f90a:	68ba      	ldr	r2, [r7, #8]
 801f90c:	2181      	movs	r1, #129	; 0x81
 801f90e:	68f8      	ldr	r0, [r7, #12]
 801f910:	f003 f864 	bl	80229dc <USBD_LL_Transmit>
 801f914:	e000      	b.n	801f918 <MSC_BOT_SendData+0x58>
    return;
 801f916:	bf00      	nop
}
 801f918:	3718      	adds	r7, #24
 801f91a:	46bd      	mov	sp, r7
 801f91c:	bd80      	pop	{r7, pc}
	...

0801f920 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 801f920:	b580      	push	{r7, lr}
 801f922:	b084      	sub	sp, #16
 801f924:	af00      	add	r7, sp, #0
 801f926:	6078      	str	r0, [r7, #4]
 801f928:	460b      	mov	r3, r1
 801f92a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f92c:	687b      	ldr	r3, [r7, #4]
 801f92e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f932:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f934:	68fb      	ldr	r3, [r7, #12]
 801f936:	2b00      	cmp	r3, #0
 801f938:	d01b      	beq.n	801f972 <MSC_BOT_SendCSW+0x52>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 801f93a:	68fb      	ldr	r3, [r7, #12]
 801f93c:	4a0f      	ldr	r2, [pc, #60]	; (801f97c <MSC_BOT_SendCSW+0x5c>)
 801f93e:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 801f942:	68fb      	ldr	r3, [r7, #12]
 801f944:	78fa      	ldrb	r2, [r7, #3]
 801f946:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 801f94a:	68fb      	ldr	r3, [r7, #12]
 801f94c:	2200      	movs	r2, #0
 801f94e:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 801f950:	68fb      	ldr	r3, [r7, #12]
 801f952:	f503 720c 	add.w	r2, r3, #560	; 0x230
 801f956:	230d      	movs	r3, #13
 801f958:	2181      	movs	r1, #129	; 0x81
 801f95a:	6878      	ldr	r0, [r7, #4]
 801f95c:	f003 f83e 	bl	80229dc <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 801f960:	68fb      	ldr	r3, [r7, #12]
 801f962:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801f966:	231f      	movs	r3, #31
 801f968:	2101      	movs	r1, #1
 801f96a:	6878      	ldr	r0, [r7, #4]
 801f96c:	f003 f857 	bl	8022a1e <USBD_LL_PrepareReceive>
 801f970:	e000      	b.n	801f974 <MSC_BOT_SendCSW+0x54>
    return;
 801f972:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801f974:	3710      	adds	r7, #16
 801f976:	46bd      	mov	sp, r7
 801f978:	bd80      	pop	{r7, pc}
 801f97a:	bf00      	nop
 801f97c:	53425355 	.word	0x53425355

0801f980 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 801f980:	b580      	push	{r7, lr}
 801f982:	b084      	sub	sp, #16
 801f984:	af00      	add	r7, sp, #0
 801f986:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f988:	687b      	ldr	r3, [r7, #4]
 801f98a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f98e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f990:	68fb      	ldr	r3, [r7, #12]
 801f992:	2b00      	cmp	r3, #0
 801f994:	d022      	beq.n	801f9dc <MSC_BOT_Abort+0x5c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 801f996:	68fb      	ldr	r3, [r7, #12]
 801f998:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801f99c:	2b00      	cmp	r3, #0
 801f99e:	d10c      	bne.n	801f9ba <MSC_BOT_Abort+0x3a>
      (hmsc->cbw.dDataLength != 0U) &&
 801f9a0:	68fb      	ldr	r3, [r7, #12]
 801f9a2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 801f9a6:	2b00      	cmp	r3, #0
 801f9a8:	d007      	beq.n	801f9ba <MSC_BOT_Abort+0x3a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 801f9aa:	68fb      	ldr	r3, [r7, #12]
 801f9ac:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 801f9ae:	2b00      	cmp	r3, #0
 801f9b0:	d103      	bne.n	801f9ba <MSC_BOT_Abort+0x3a>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 801f9b2:	2101      	movs	r1, #1
 801f9b4:	6878      	ldr	r0, [r7, #4]
 801f9b6:	f002 ff88 	bl	80228ca <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 801f9ba:	2181      	movs	r1, #129	; 0x81
 801f9bc:	6878      	ldr	r0, [r7, #4]
 801f9be:	f002 ff84 	bl	80228ca <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 801f9c2:	68fb      	ldr	r3, [r7, #12]
 801f9c4:	7a5b      	ldrb	r3, [r3, #9]
 801f9c6:	2b02      	cmp	r3, #2
 801f9c8:	d109      	bne.n	801f9de <MSC_BOT_Abort+0x5e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 801f9ca:	2181      	movs	r1, #129	; 0x81
 801f9cc:	6878      	ldr	r0, [r7, #4]
 801f9ce:	f002 ff7c 	bl	80228ca <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 801f9d2:	2101      	movs	r1, #1
 801f9d4:	6878      	ldr	r0, [r7, #4]
 801f9d6:	f002 ff78 	bl	80228ca <USBD_LL_StallEP>
 801f9da:	e000      	b.n	801f9de <MSC_BOT_Abort+0x5e>
    return;
 801f9dc:	bf00      	nop
  }
}
 801f9de:	3710      	adds	r7, #16
 801f9e0:	46bd      	mov	sp, r7
 801f9e2:	bd80      	pop	{r7, pc}

0801f9e4 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f9e4:	b580      	push	{r7, lr}
 801f9e6:	b084      	sub	sp, #16
 801f9e8:	af00      	add	r7, sp, #0
 801f9ea:	6078      	str	r0, [r7, #4]
 801f9ec:	460b      	mov	r3, r1
 801f9ee:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f9f0:	687b      	ldr	r3, [r7, #4]
 801f9f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f9f6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f9f8:	68fb      	ldr	r3, [r7, #12]
 801f9fa:	2b00      	cmp	r3, #0
 801f9fc:	d019      	beq.n	801fa32 <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 801f9fe:	68fb      	ldr	r3, [r7, #12]
 801fa00:	7a5b      	ldrb	r3, [r3, #9]
 801fa02:	2b02      	cmp	r3, #2
 801fa04:	d108      	bne.n	801fa18 <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 801fa06:	2181      	movs	r1, #129	; 0x81
 801fa08:	6878      	ldr	r0, [r7, #4]
 801fa0a:	f002 ff5e 	bl	80228ca <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 801fa0e:	2101      	movs	r1, #1
 801fa10:	6878      	ldr	r0, [r7, #4]
 801fa12:	f002 ff5a 	bl	80228ca <USBD_LL_StallEP>
 801fa16:	e00f      	b.n	801fa38 <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 801fa18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801fa1c:	2b00      	cmp	r3, #0
 801fa1e:	da0a      	bge.n	801fa36 <MSC_BOT_CplClrFeature+0x52>
 801fa20:	68fb      	ldr	r3, [r7, #12]
 801fa22:	7a5b      	ldrb	r3, [r3, #9]
 801fa24:	2b01      	cmp	r3, #1
 801fa26:	d006      	beq.n	801fa36 <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801fa28:	2101      	movs	r1, #1
 801fa2a:	6878      	ldr	r0, [r7, #4]
 801fa2c:	f7ff ff78 	bl	801f920 <MSC_BOT_SendCSW>
 801fa30:	e002      	b.n	801fa38 <MSC_BOT_CplClrFeature+0x54>
    return;
 801fa32:	bf00      	nop
 801fa34:	e000      	b.n	801fa38 <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 801fa36:	bf00      	nop
  }
}
 801fa38:	3710      	adds	r7, #16
 801fa3a:	46bd      	mov	sp, r7
 801fa3c:	bd80      	pop	{r7, pc}
	...

0801fa40 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 801fa40:	b580      	push	{r7, lr}
 801fa42:	b086      	sub	sp, #24
 801fa44:	af00      	add	r7, sp, #0
 801fa46:	60f8      	str	r0, [r7, #12]
 801fa48:	460b      	mov	r3, r1
 801fa4a:	607a      	str	r2, [r7, #4]
 801fa4c:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fa4e:	68fb      	ldr	r3, [r7, #12]
 801fa50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fa54:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801fa56:	693b      	ldr	r3, [r7, #16]
 801fa58:	2b00      	cmp	r3, #0
 801fa5a:	d102      	bne.n	801fa62 <SCSI_ProcessCmd+0x22>
  {
    return -1;
 801fa5c:	f04f 33ff 	mov.w	r3, #4294967295
 801fa60:	e168      	b.n	801fd34 <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 801fa62:	687b      	ldr	r3, [r7, #4]
 801fa64:	781b      	ldrb	r3, [r3, #0]
 801fa66:	2baa      	cmp	r3, #170	; 0xaa
 801fa68:	f000 8144 	beq.w	801fcf4 <SCSI_ProcessCmd+0x2b4>
 801fa6c:	2baa      	cmp	r3, #170	; 0xaa
 801fa6e:	f300 8153 	bgt.w	801fd18 <SCSI_ProcessCmd+0x2d8>
 801fa72:	2ba8      	cmp	r3, #168	; 0xa8
 801fa74:	f000 812c 	beq.w	801fcd0 <SCSI_ProcessCmd+0x290>
 801fa78:	2ba8      	cmp	r3, #168	; 0xa8
 801fa7a:	f300 814d 	bgt.w	801fd18 <SCSI_ProcessCmd+0x2d8>
 801fa7e:	2b5a      	cmp	r3, #90	; 0x5a
 801fa80:	f300 80c0 	bgt.w	801fc04 <SCSI_ProcessCmd+0x1c4>
 801fa84:	2b00      	cmp	r3, #0
 801fa86:	f2c0 8147 	blt.w	801fd18 <SCSI_ProcessCmd+0x2d8>
 801fa8a:	2b5a      	cmp	r3, #90	; 0x5a
 801fa8c:	f200 8144 	bhi.w	801fd18 <SCSI_ProcessCmd+0x2d8>
 801fa90:	a201      	add	r2, pc, #4	; (adr r2, 801fa98 <SCSI_ProcessCmd+0x58>)
 801fa92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fa96:	bf00      	nop
 801fa98:	0801fc0b 	.word	0x0801fc0b
 801fa9c:	0801fd19 	.word	0x0801fd19
 801faa0:	0801fd19 	.word	0x0801fd19
 801faa4:	0801fc1d 	.word	0x0801fc1d
 801faa8:	0801fd19 	.word	0x0801fd19
 801faac:	0801fd19 	.word	0x0801fd19
 801fab0:	0801fd19 	.word	0x0801fd19
 801fab4:	0801fd19 	.word	0x0801fd19
 801fab8:	0801fd19 	.word	0x0801fd19
 801fabc:	0801fd19 	.word	0x0801fd19
 801fac0:	0801fd19 	.word	0x0801fd19
 801fac4:	0801fd19 	.word	0x0801fd19
 801fac8:	0801fd19 	.word	0x0801fd19
 801facc:	0801fd19 	.word	0x0801fd19
 801fad0:	0801fd19 	.word	0x0801fd19
 801fad4:	0801fd19 	.word	0x0801fd19
 801fad8:	0801fd19 	.word	0x0801fd19
 801fadc:	0801fd19 	.word	0x0801fd19
 801fae0:	0801fc2f 	.word	0x0801fc2f
 801fae4:	0801fd19 	.word	0x0801fd19
 801fae8:	0801fd19 	.word	0x0801fd19
 801faec:	0801fd19 	.word	0x0801fd19
 801faf0:	0801fd19 	.word	0x0801fd19
 801faf4:	0801fd19 	.word	0x0801fd19
 801faf8:	0801fd19 	.word	0x0801fd19
 801fafc:	0801fd19 	.word	0x0801fd19
 801fb00:	0801fc65 	.word	0x0801fc65
 801fb04:	0801fc41 	.word	0x0801fc41
 801fb08:	0801fd19 	.word	0x0801fd19
 801fb0c:	0801fd19 	.word	0x0801fd19
 801fb10:	0801fc53 	.word	0x0801fc53
 801fb14:	0801fd19 	.word	0x0801fd19
 801fb18:	0801fd19 	.word	0x0801fd19
 801fb1c:	0801fd19 	.word	0x0801fd19
 801fb20:	0801fd19 	.word	0x0801fd19
 801fb24:	0801fc89 	.word	0x0801fc89
 801fb28:	0801fd19 	.word	0x0801fd19
 801fb2c:	0801fc9b 	.word	0x0801fc9b
 801fb30:	0801fd19 	.word	0x0801fd19
 801fb34:	0801fd19 	.word	0x0801fd19
 801fb38:	0801fcbf 	.word	0x0801fcbf
 801fb3c:	0801fd19 	.word	0x0801fd19
 801fb40:	0801fce3 	.word	0x0801fce3
 801fb44:	0801fd19 	.word	0x0801fd19
 801fb48:	0801fd19 	.word	0x0801fd19
 801fb4c:	0801fd19 	.word	0x0801fd19
 801fb50:	0801fd19 	.word	0x0801fd19
 801fb54:	0801fd07 	.word	0x0801fd07
 801fb58:	0801fd19 	.word	0x0801fd19
 801fb5c:	0801fd19 	.word	0x0801fd19
 801fb60:	0801fd19 	.word	0x0801fd19
 801fb64:	0801fd19 	.word	0x0801fd19
 801fb68:	0801fd19 	.word	0x0801fd19
 801fb6c:	0801fd19 	.word	0x0801fd19
 801fb70:	0801fd19 	.word	0x0801fd19
 801fb74:	0801fd19 	.word	0x0801fd19
 801fb78:	0801fd19 	.word	0x0801fd19
 801fb7c:	0801fd19 	.word	0x0801fd19
 801fb80:	0801fd19 	.word	0x0801fd19
 801fb84:	0801fd19 	.word	0x0801fd19
 801fb88:	0801fd19 	.word	0x0801fd19
 801fb8c:	0801fd19 	.word	0x0801fd19
 801fb90:	0801fd19 	.word	0x0801fd19
 801fb94:	0801fd19 	.word	0x0801fd19
 801fb98:	0801fd19 	.word	0x0801fd19
 801fb9c:	0801fd19 	.word	0x0801fd19
 801fba0:	0801fd19 	.word	0x0801fd19
 801fba4:	0801fd19 	.word	0x0801fd19
 801fba8:	0801fd19 	.word	0x0801fd19
 801fbac:	0801fd19 	.word	0x0801fd19
 801fbb0:	0801fd19 	.word	0x0801fd19
 801fbb4:	0801fd19 	.word	0x0801fd19
 801fbb8:	0801fd19 	.word	0x0801fd19
 801fbbc:	0801fd19 	.word	0x0801fd19
 801fbc0:	0801fd19 	.word	0x0801fd19
 801fbc4:	0801fd19 	.word	0x0801fd19
 801fbc8:	0801fd19 	.word	0x0801fd19
 801fbcc:	0801fd19 	.word	0x0801fd19
 801fbd0:	0801fd19 	.word	0x0801fd19
 801fbd4:	0801fd19 	.word	0x0801fd19
 801fbd8:	0801fd19 	.word	0x0801fd19
 801fbdc:	0801fd19 	.word	0x0801fd19
 801fbe0:	0801fd19 	.word	0x0801fd19
 801fbe4:	0801fd19 	.word	0x0801fd19
 801fbe8:	0801fd19 	.word	0x0801fd19
 801fbec:	0801fd19 	.word	0x0801fd19
 801fbf0:	0801fd19 	.word	0x0801fd19
 801fbf4:	0801fd19 	.word	0x0801fd19
 801fbf8:	0801fd19 	.word	0x0801fd19
 801fbfc:	0801fd19 	.word	0x0801fd19
 801fc00:	0801fc77 	.word	0x0801fc77
 801fc04:	2b9e      	cmp	r3, #158	; 0x9e
 801fc06:	d051      	beq.n	801fcac <SCSI_ProcessCmd+0x26c>
 801fc08:	e086      	b.n	801fd18 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 801fc0a:	7afb      	ldrb	r3, [r7, #11]
 801fc0c:	687a      	ldr	r2, [r7, #4]
 801fc0e:	4619      	mov	r1, r3
 801fc10:	68f8      	ldr	r0, [r7, #12]
 801fc12:	f000 f893 	bl	801fd3c <SCSI_TestUnitReady>
 801fc16:	4603      	mov	r3, r0
 801fc18:	75fb      	strb	r3, [r7, #23]
      break;
 801fc1a:	e089      	b.n	801fd30 <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 801fc1c:	7afb      	ldrb	r3, [r7, #11]
 801fc1e:	687a      	ldr	r2, [r7, #4]
 801fc20:	4619      	mov	r1, r3
 801fc22:	68f8      	ldr	r0, [r7, #12]
 801fc24:	f000 fb38 	bl	8020298 <SCSI_RequestSense>
 801fc28:	4603      	mov	r3, r0
 801fc2a:	75fb      	strb	r3, [r7, #23]
      break;
 801fc2c:	e080      	b.n	801fd30 <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 801fc2e:	7afb      	ldrb	r3, [r7, #11]
 801fc30:	687a      	ldr	r2, [r7, #4]
 801fc32:	4619      	mov	r1, r3
 801fc34:	68f8      	ldr	r0, [r7, #12]
 801fc36:	f000 f8d1 	bl	801fddc <SCSI_Inquiry>
 801fc3a:	4603      	mov	r3, r0
 801fc3c:	75fb      	strb	r3, [r7, #23]
      break;
 801fc3e:	e077      	b.n	801fd30 <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 801fc40:	7afb      	ldrb	r3, [r7, #11]
 801fc42:	687a      	ldr	r2, [r7, #4]
 801fc44:	4619      	mov	r1, r3
 801fc46:	68f8      	ldr	r0, [r7, #12]
 801fc48:	f000 fbec 	bl	8020424 <SCSI_StartStopUnit>
 801fc4c:	4603      	mov	r3, r0
 801fc4e:	75fb      	strb	r3, [r7, #23]
      break;
 801fc50:	e06e      	b.n	801fd30 <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 801fc52:	7afb      	ldrb	r3, [r7, #11]
 801fc54:	687a      	ldr	r2, [r7, #4]
 801fc56:	4619      	mov	r1, r3
 801fc58:	68f8      	ldr	r0, [r7, #12]
 801fc5a:	f000 fc34 	bl	80204c6 <SCSI_AllowPreventRemovable>
 801fc5e:	4603      	mov	r3, r0
 801fc60:	75fb      	strb	r3, [r7, #23]
      break;
 801fc62:	e065      	b.n	801fd30 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 801fc64:	7afb      	ldrb	r3, [r7, #11]
 801fc66:	687a      	ldr	r2, [r7, #4]
 801fc68:	4619      	mov	r1, r3
 801fc6a:	68f8      	ldr	r0, [r7, #12]
 801fc6c:	f000 fabc 	bl	80201e8 <SCSI_ModeSense6>
 801fc70:	4603      	mov	r3, r0
 801fc72:	75fb      	strb	r3, [r7, #23]
      break;
 801fc74:	e05c      	b.n	801fd30 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 801fc76:	7afb      	ldrb	r3, [r7, #11]
 801fc78:	687a      	ldr	r2, [r7, #4]
 801fc7a:	4619      	mov	r1, r3
 801fc7c:	68f8      	ldr	r0, [r7, #12]
 801fc7e:	f000 fadf 	bl	8020240 <SCSI_ModeSense10>
 801fc82:	4603      	mov	r3, r0
 801fc84:	75fb      	strb	r3, [r7, #23]
      break;
 801fc86:	e053      	b.n	801fd30 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 801fc88:	7afb      	ldrb	r3, [r7, #11]
 801fc8a:	687a      	ldr	r2, [r7, #4]
 801fc8c:	4619      	mov	r1, r3
 801fc8e:	68f8      	ldr	r0, [r7, #12]
 801fc90:	f000 fa37 	bl	8020102 <SCSI_ReadFormatCapacity>
 801fc94:	4603      	mov	r3, r0
 801fc96:	75fb      	strb	r3, [r7, #23]
      break;
 801fc98:	e04a      	b.n	801fd30 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 801fc9a:	7afb      	ldrb	r3, [r7, #11]
 801fc9c:	687a      	ldr	r2, [r7, #4]
 801fc9e:	4619      	mov	r1, r3
 801fca0:	68f8      	ldr	r0, [r7, #12]
 801fca2:	f000 f90f 	bl	801fec4 <SCSI_ReadCapacity10>
 801fca6:	4603      	mov	r3, r0
 801fca8:	75fb      	strb	r3, [r7, #23]
      break;
 801fcaa:	e041      	b.n	801fd30 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 801fcac:	7afb      	ldrb	r3, [r7, #11]
 801fcae:	687a      	ldr	r2, [r7, #4]
 801fcb0:	4619      	mov	r1, r3
 801fcb2:	68f8      	ldr	r0, [r7, #12]
 801fcb4:	f000 f97b 	bl	801ffae <SCSI_ReadCapacity16>
 801fcb8:	4603      	mov	r3, r0
 801fcba:	75fb      	strb	r3, [r7, #23]
      break;
 801fcbc:	e038      	b.n	801fd30 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 801fcbe:	7afb      	ldrb	r3, [r7, #11]
 801fcc0:	687a      	ldr	r2, [r7, #4]
 801fcc2:	4619      	mov	r1, r3
 801fcc4:	68f8      	ldr	r0, [r7, #12]
 801fcc6:	f000 fc27 	bl	8020518 <SCSI_Read10>
 801fcca:	4603      	mov	r3, r0
 801fccc:	75fb      	strb	r3, [r7, #23]
      break;
 801fcce:	e02f      	b.n	801fd30 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 801fcd0:	7afb      	ldrb	r3, [r7, #11]
 801fcd2:	687a      	ldr	r2, [r7, #4]
 801fcd4:	4619      	mov	r1, r3
 801fcd6:	68f8      	ldr	r0, [r7, #12]
 801fcd8:	f000 fcbe 	bl	8020658 <SCSI_Read12>
 801fcdc:	4603      	mov	r3, r0
 801fcde:	75fb      	strb	r3, [r7, #23]
      break;
 801fce0:	e026      	b.n	801fd30 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 801fce2:	7afb      	ldrb	r3, [r7, #11]
 801fce4:	687a      	ldr	r2, [r7, #4]
 801fce6:	4619      	mov	r1, r3
 801fce8:	68f8      	ldr	r0, [r7, #12]
 801fcea:	f000 fd60 	bl	80207ae <SCSI_Write10>
 801fcee:	4603      	mov	r3, r0
 801fcf0:	75fb      	strb	r3, [r7, #23]
      break;
 801fcf2:	e01d      	b.n	801fd30 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 801fcf4:	7afb      	ldrb	r3, [r7, #11]
 801fcf6:	687a      	ldr	r2, [r7, #4]
 801fcf8:	4619      	mov	r1, r3
 801fcfa:	68f8      	ldr	r0, [r7, #12]
 801fcfc:	f000 fe1c 	bl	8020938 <SCSI_Write12>
 801fd00:	4603      	mov	r3, r0
 801fd02:	75fb      	strb	r3, [r7, #23]
      break;
 801fd04:	e014      	b.n	801fd30 <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 801fd06:	7afb      	ldrb	r3, [r7, #11]
 801fd08:	687a      	ldr	r2, [r7, #4]
 801fd0a:	4619      	mov	r1, r3
 801fd0c:	68f8      	ldr	r0, [r7, #12]
 801fd0e:	f000 fee8 	bl	8020ae2 <SCSI_Verify10>
 801fd12:	4603      	mov	r3, r0
 801fd14:	75fb      	strb	r3, [r7, #23]
      break;
 801fd16:	e00b      	b.n	801fd30 <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 801fd18:	7af9      	ldrb	r1, [r7, #11]
 801fd1a:	2320      	movs	r3, #32
 801fd1c:	2205      	movs	r2, #5
 801fd1e:	68f8      	ldr	r0, [r7, #12]
 801fd20:	f000 fb39 	bl	8020396 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801fd24:	693b      	ldr	r3, [r7, #16]
 801fd26:	2202      	movs	r2, #2
 801fd28:	725a      	strb	r2, [r3, #9]
      ret = -1;
 801fd2a:	23ff      	movs	r3, #255	; 0xff
 801fd2c:	75fb      	strb	r3, [r7, #23]
      break;
 801fd2e:	bf00      	nop
  }

  return ret;
 801fd30:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801fd34:	4618      	mov	r0, r3
 801fd36:	3718      	adds	r7, #24
 801fd38:	46bd      	mov	sp, r7
 801fd3a:	bd80      	pop	{r7, pc}

0801fd3c <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801fd3c:	b580      	push	{r7, lr}
 801fd3e:	b086      	sub	sp, #24
 801fd40:	af00      	add	r7, sp, #0
 801fd42:	60f8      	str	r0, [r7, #12]
 801fd44:	460b      	mov	r3, r1
 801fd46:	607a      	str	r2, [r7, #4]
 801fd48:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fd4a:	68fb      	ldr	r3, [r7, #12]
 801fd4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fd50:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801fd52:	697b      	ldr	r3, [r7, #20]
 801fd54:	2b00      	cmp	r3, #0
 801fd56:	d102      	bne.n	801fd5e <SCSI_TestUnitReady+0x22>
  {
    return -1;
 801fd58:	f04f 33ff 	mov.w	r3, #4294967295
 801fd5c:	e03a      	b.n	801fdd4 <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 801fd5e:	697b      	ldr	r3, [r7, #20]
 801fd60:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801fd64:	2b00      	cmp	r3, #0
 801fd66:	d00a      	beq.n	801fd7e <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801fd68:	697b      	ldr	r3, [r7, #20]
 801fd6a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801fd6e:	2320      	movs	r3, #32
 801fd70:	2205      	movs	r2, #5
 801fd72:	68f8      	ldr	r0, [r7, #12]
 801fd74:	f000 fb0f 	bl	8020396 <SCSI_SenseCode>

    return -1;
 801fd78:	f04f 33ff 	mov.w	r3, #4294967295
 801fd7c:	e02a      	b.n	801fdd4 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801fd7e:	697b      	ldr	r3, [r7, #20]
 801fd80:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801fd84:	2b02      	cmp	r3, #2
 801fd86:	d10b      	bne.n	801fda0 <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801fd88:	7af9      	ldrb	r1, [r7, #11]
 801fd8a:	233a      	movs	r3, #58	; 0x3a
 801fd8c:	2202      	movs	r2, #2
 801fd8e:	68f8      	ldr	r0, [r7, #12]
 801fd90:	f000 fb01 	bl	8020396 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801fd94:	697b      	ldr	r3, [r7, #20]
 801fd96:	2205      	movs	r2, #5
 801fd98:	721a      	strb	r2, [r3, #8]
    return -1;
 801fd9a:	f04f 33ff 	mov.w	r3, #4294967295
 801fd9e:	e019      	b.n	801fdd4 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 801fda0:	68fb      	ldr	r3, [r7, #12]
 801fda2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801fda6:	689b      	ldr	r3, [r3, #8]
 801fda8:	7afa      	ldrb	r2, [r7, #11]
 801fdaa:	4610      	mov	r0, r2
 801fdac:	4798      	blx	r3
 801fdae:	4603      	mov	r3, r0
 801fdb0:	2b00      	cmp	r3, #0
 801fdb2:	d00b      	beq.n	801fdcc <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801fdb4:	7af9      	ldrb	r1, [r7, #11]
 801fdb6:	233a      	movs	r3, #58	; 0x3a
 801fdb8:	2202      	movs	r2, #2
 801fdba:	68f8      	ldr	r0, [r7, #12]
 801fdbc:	f000 faeb 	bl	8020396 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801fdc0:	697b      	ldr	r3, [r7, #20]
 801fdc2:	2205      	movs	r2, #5
 801fdc4:	721a      	strb	r2, [r3, #8]

    return -1;
 801fdc6:	f04f 33ff 	mov.w	r3, #4294967295
 801fdca:	e003      	b.n	801fdd4 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 801fdcc:	697b      	ldr	r3, [r7, #20]
 801fdce:	2200      	movs	r2, #0
 801fdd0:	60da      	str	r2, [r3, #12]

  return 0;
 801fdd2:	2300      	movs	r3, #0
}
 801fdd4:	4618      	mov	r0, r3
 801fdd6:	3718      	adds	r7, #24
 801fdd8:	46bd      	mov	sp, r7
 801fdda:	bd80      	pop	{r7, pc}

0801fddc <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801fddc:	b580      	push	{r7, lr}
 801fdde:	b088      	sub	sp, #32
 801fde0:	af00      	add	r7, sp, #0
 801fde2:	60f8      	str	r0, [r7, #12]
 801fde4:	460b      	mov	r3, r1
 801fde6:	607a      	str	r2, [r7, #4]
 801fde8:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fdea:	68fb      	ldr	r3, [r7, #12]
 801fdec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fdf0:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801fdf2:	69bb      	ldr	r3, [r7, #24]
 801fdf4:	2b00      	cmp	r3, #0
 801fdf6:	d102      	bne.n	801fdfe <SCSI_Inquiry+0x22>
  {
    return -1;
 801fdf8:	f04f 33ff 	mov.w	r3, #4294967295
 801fdfc:	e05a      	b.n	801feb4 <SCSI_Inquiry+0xd8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 801fdfe:	69bb      	ldr	r3, [r7, #24]
 801fe00:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801fe04:	2b00      	cmp	r3, #0
 801fe06:	d10a      	bne.n	801fe1e <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801fe08:	69bb      	ldr	r3, [r7, #24]
 801fe0a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801fe0e:	2320      	movs	r3, #32
 801fe10:	2205      	movs	r2, #5
 801fe12:	68f8      	ldr	r0, [r7, #12]
 801fe14:	f000 fabf 	bl	8020396 <SCSI_SenseCode>
    return -1;
 801fe18:	f04f 33ff 	mov.w	r3, #4294967295
 801fe1c:	e04a      	b.n	801feb4 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 801fe1e:	687b      	ldr	r3, [r7, #4]
 801fe20:	3301      	adds	r3, #1
 801fe22:	781b      	ldrb	r3, [r3, #0]
 801fe24:	f003 0301 	and.w	r3, r3, #1
 801fe28:	2b00      	cmp	r3, #0
 801fe2a:	d020      	beq.n	801fe6e <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 801fe2c:	687b      	ldr	r3, [r7, #4]
 801fe2e:	3302      	adds	r3, #2
 801fe30:	781b      	ldrb	r3, [r3, #0]
 801fe32:	2b00      	cmp	r3, #0
 801fe34:	d105      	bne.n	801fe42 <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 801fe36:	2206      	movs	r2, #6
 801fe38:	4920      	ldr	r1, [pc, #128]	; (801febc <SCSI_Inquiry+0xe0>)
 801fe3a:	69b8      	ldr	r0, [r7, #24]
 801fe3c:	f000 ffb4 	bl	8020da8 <SCSI_UpdateBotData>
 801fe40:	e037      	b.n	801feb2 <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 801fe42:	687b      	ldr	r3, [r7, #4]
 801fe44:	3302      	adds	r3, #2
 801fe46:	781b      	ldrb	r3, [r3, #0]
 801fe48:	2b80      	cmp	r3, #128	; 0x80
 801fe4a:	d105      	bne.n	801fe58 <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 801fe4c:	2208      	movs	r2, #8
 801fe4e:	491c      	ldr	r1, [pc, #112]	; (801fec0 <SCSI_Inquiry+0xe4>)
 801fe50:	69b8      	ldr	r0, [r7, #24]
 801fe52:	f000 ffa9 	bl	8020da8 <SCSI_UpdateBotData>
 801fe56:	e02c      	b.n	801feb2 <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 801fe58:	69bb      	ldr	r3, [r7, #24]
 801fe5a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801fe5e:	2324      	movs	r3, #36	; 0x24
 801fe60:	2205      	movs	r2, #5
 801fe62:	68f8      	ldr	r0, [r7, #12]
 801fe64:	f000 fa97 	bl	8020396 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 801fe68:	f04f 33ff 	mov.w	r3, #4294967295
 801fe6c:	e022      	b.n	801feb4 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 801fe6e:	68fb      	ldr	r3, [r7, #12]
 801fe70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801fe74:	69d9      	ldr	r1, [r3, #28]
 801fe76:	7afa      	ldrb	r2, [r7, #11]
 801fe78:	4613      	mov	r3, r2
 801fe7a:	00db      	lsls	r3, r3, #3
 801fe7c:	4413      	add	r3, r2
 801fe7e:	009b      	lsls	r3, r3, #2
 801fe80:	440b      	add	r3, r1
 801fe82:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 801fe84:	697b      	ldr	r3, [r7, #20]
 801fe86:	3304      	adds	r3, #4
 801fe88:	781b      	ldrb	r3, [r3, #0]
 801fe8a:	b29b      	uxth	r3, r3
 801fe8c:	3305      	adds	r3, #5
 801fe8e:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 801fe90:	687b      	ldr	r3, [r7, #4]
 801fe92:	3304      	adds	r3, #4
 801fe94:	781b      	ldrb	r3, [r3, #0]
 801fe96:	b29b      	uxth	r3, r3
 801fe98:	8bfa      	ldrh	r2, [r7, #30]
 801fe9a:	429a      	cmp	r2, r3
 801fe9c:	d303      	bcc.n	801fea6 <SCSI_Inquiry+0xca>
    {
      len = params[4];
 801fe9e:	687b      	ldr	r3, [r7, #4]
 801fea0:	3304      	adds	r3, #4
 801fea2:	781b      	ldrb	r3, [r3, #0]
 801fea4:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 801fea6:	8bfb      	ldrh	r3, [r7, #30]
 801fea8:	461a      	mov	r2, r3
 801feaa:	6979      	ldr	r1, [r7, #20]
 801feac:	69b8      	ldr	r0, [r7, #24]
 801feae:	f000 ff7b 	bl	8020da8 <SCSI_UpdateBotData>
  }

  return 0;
 801feb2:	2300      	movs	r3, #0
}
 801feb4:	4618      	mov	r0, r3
 801feb6:	3720      	adds	r7, #32
 801feb8:	46bd      	mov	sp, r7
 801feba:	bd80      	pop	{r7, pc}
 801febc:	20000638 	.word	0x20000638
 801fec0:	20000640 	.word	0x20000640

0801fec4 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801fec4:	b580      	push	{r7, lr}
 801fec6:	b086      	sub	sp, #24
 801fec8:	af00      	add	r7, sp, #0
 801feca:	60f8      	str	r0, [r7, #12]
 801fecc:	460b      	mov	r3, r1
 801fece:	607a      	str	r2, [r7, #4]
 801fed0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fed2:	68fb      	ldr	r3, [r7, #12]
 801fed4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fed8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801feda:	697b      	ldr	r3, [r7, #20]
 801fedc:	2b00      	cmp	r3, #0
 801fede:	d102      	bne.n	801fee6 <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 801fee0:	f04f 33ff 	mov.w	r3, #4294967295
 801fee4:	e05f      	b.n	801ffa6 <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 801fee6:	68fb      	ldr	r3, [r7, #12]
 801fee8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801feec:	685b      	ldr	r3, [r3, #4]
 801feee:	697a      	ldr	r2, [r7, #20]
 801fef0:	f502 711a 	add.w	r1, r2, #616	; 0x268
 801fef4:	697a      	ldr	r2, [r7, #20]
 801fef6:	f502 7219 	add.w	r2, r2, #612	; 0x264
 801fefa:	7af8      	ldrb	r0, [r7, #11]
 801fefc:	4798      	blx	r3
 801fefe:	4603      	mov	r3, r0
 801ff00:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801ff02:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801ff06:	2b00      	cmp	r3, #0
 801ff08:	d104      	bne.n	801ff14 <SCSI_ReadCapacity10+0x50>
 801ff0a:	697b      	ldr	r3, [r7, #20]
 801ff0c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801ff10:	2b02      	cmp	r3, #2
 801ff12:	d108      	bne.n	801ff26 <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801ff14:	7af9      	ldrb	r1, [r7, #11]
 801ff16:	233a      	movs	r3, #58	; 0x3a
 801ff18:	2202      	movs	r2, #2
 801ff1a:	68f8      	ldr	r0, [r7, #12]
 801ff1c:	f000 fa3b 	bl	8020396 <SCSI_SenseCode>
    return -1;
 801ff20:	f04f 33ff 	mov.w	r3, #4294967295
 801ff24:	e03f      	b.n	801ffa6 <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 801ff26:	697b      	ldr	r3, [r7, #20]
 801ff28:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801ff2c:	3b01      	subs	r3, #1
 801ff2e:	0e1b      	lsrs	r3, r3, #24
 801ff30:	b2da      	uxtb	r2, r3
 801ff32:	697b      	ldr	r3, [r7, #20]
 801ff34:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 801ff36:	697b      	ldr	r3, [r7, #20]
 801ff38:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801ff3c:	3b01      	subs	r3, #1
 801ff3e:	0c1b      	lsrs	r3, r3, #16
 801ff40:	b2da      	uxtb	r2, r3
 801ff42:	697b      	ldr	r3, [r7, #20]
 801ff44:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 801ff46:	697b      	ldr	r3, [r7, #20]
 801ff48:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801ff4c:	3b01      	subs	r3, #1
 801ff4e:	0a1b      	lsrs	r3, r3, #8
 801ff50:	b2da      	uxtb	r2, r3
 801ff52:	697b      	ldr	r3, [r7, #20]
 801ff54:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 801ff56:	697b      	ldr	r3, [r7, #20]
 801ff58:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801ff5c:	b2db      	uxtb	r3, r3
 801ff5e:	3b01      	subs	r3, #1
 801ff60:	b2da      	uxtb	r2, r3
 801ff62:	697b      	ldr	r3, [r7, #20]
 801ff64:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 801ff66:	697b      	ldr	r3, [r7, #20]
 801ff68:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801ff6c:	161b      	asrs	r3, r3, #24
 801ff6e:	b2da      	uxtb	r2, r3
 801ff70:	697b      	ldr	r3, [r7, #20]
 801ff72:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801ff74:	697b      	ldr	r3, [r7, #20]
 801ff76:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801ff7a:	141b      	asrs	r3, r3, #16
 801ff7c:	b2da      	uxtb	r2, r3
 801ff7e:	697b      	ldr	r3, [r7, #20]
 801ff80:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 801ff82:	697b      	ldr	r3, [r7, #20]
 801ff84:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801ff88:	0a1b      	lsrs	r3, r3, #8
 801ff8a:	b29b      	uxth	r3, r3
 801ff8c:	b2da      	uxtb	r2, r3
 801ff8e:	697b      	ldr	r3, [r7, #20]
 801ff90:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 801ff92:	697b      	ldr	r3, [r7, #20]
 801ff94:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801ff98:	b2da      	uxtb	r2, r3
 801ff9a:	697b      	ldr	r3, [r7, #20]
 801ff9c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 801ff9e:	697b      	ldr	r3, [r7, #20]
 801ffa0:	2208      	movs	r2, #8
 801ffa2:	60da      	str	r2, [r3, #12]

  return 0;
 801ffa4:	2300      	movs	r3, #0

}
 801ffa6:	4618      	mov	r0, r3
 801ffa8:	3718      	adds	r7, #24
 801ffaa:	46bd      	mov	sp, r7
 801ffac:	bd80      	pop	{r7, pc}

0801ffae <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801ffae:	b580      	push	{r7, lr}
 801ffb0:	b088      	sub	sp, #32
 801ffb2:	af00      	add	r7, sp, #0
 801ffb4:	60f8      	str	r0, [r7, #12]
 801ffb6:	460b      	mov	r3, r1
 801ffb8:	607a      	str	r2, [r7, #4]
 801ffba:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801ffbc:	68fb      	ldr	r3, [r7, #12]
 801ffbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801ffc2:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801ffc4:	69bb      	ldr	r3, [r7, #24]
 801ffc6:	2b00      	cmp	r3, #0
 801ffc8:	d102      	bne.n	801ffd0 <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 801ffca:	f04f 33ff 	mov.w	r3, #4294967295
 801ffce:	e094      	b.n	80200fa <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 801ffd0:	68fb      	ldr	r3, [r7, #12]
 801ffd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801ffd6:	685b      	ldr	r3, [r3, #4]
 801ffd8:	69ba      	ldr	r2, [r7, #24]
 801ffda:	f502 711a 	add.w	r1, r2, #616	; 0x268
 801ffde:	69ba      	ldr	r2, [r7, #24]
 801ffe0:	f502 7219 	add.w	r2, r2, #612	; 0x264
 801ffe4:	7af8      	ldrb	r0, [r7, #11]
 801ffe6:	4798      	blx	r3
 801ffe8:	4603      	mov	r3, r0
 801ffea:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801ffec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801fff0:	2b00      	cmp	r3, #0
 801fff2:	d104      	bne.n	801fffe <SCSI_ReadCapacity16+0x50>
 801fff4:	69bb      	ldr	r3, [r7, #24]
 801fff6:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801fffa:	2b02      	cmp	r3, #2
 801fffc:	d108      	bne.n	8020010 <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801fffe:	7af9      	ldrb	r1, [r7, #11]
 8020000:	233a      	movs	r3, #58	; 0x3a
 8020002:	2202      	movs	r2, #2
 8020004:	68f8      	ldr	r0, [r7, #12]
 8020006:	f000 f9c6 	bl	8020396 <SCSI_SenseCode>
    return -1;
 802000a:	f04f 33ff 	mov.w	r3, #4294967295
 802000e:	e074      	b.n	80200fa <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8020010:	687b      	ldr	r3, [r7, #4]
 8020012:	330a      	adds	r3, #10
 8020014:	781b      	ldrb	r3, [r3, #0]
 8020016:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8020018:	687b      	ldr	r3, [r7, #4]
 802001a:	330b      	adds	r3, #11
 802001c:	781b      	ldrb	r3, [r3, #0]
 802001e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8020020:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8020022:	687b      	ldr	r3, [r7, #4]
 8020024:	330c      	adds	r3, #12
 8020026:	781b      	ldrb	r3, [r3, #0]
 8020028:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 802002a:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 802002c:	687a      	ldr	r2, [r7, #4]
 802002e:	320d      	adds	r2, #13
 8020030:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8020032:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8020034:	69bb      	ldr	r3, [r7, #24]
 8020036:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8020038:	2300      	movs	r3, #0
 802003a:	77fb      	strb	r3, [r7, #31]
 802003c:	e007      	b.n	802004e <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 802003e:	7ffb      	ldrb	r3, [r7, #31]
 8020040:	69ba      	ldr	r2, [r7, #24]
 8020042:	4413      	add	r3, r2
 8020044:	2200      	movs	r2, #0
 8020046:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8020048:	7ffb      	ldrb	r3, [r7, #31]
 802004a:	3301      	adds	r3, #1
 802004c:	77fb      	strb	r3, [r7, #31]
 802004e:	7ffa      	ldrb	r2, [r7, #31]
 8020050:	69bb      	ldr	r3, [r7, #24]
 8020052:	68db      	ldr	r3, [r3, #12]
 8020054:	429a      	cmp	r2, r3
 8020056:	d3f2      	bcc.n	802003e <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8020058:	69bb      	ldr	r3, [r7, #24]
 802005a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 802005e:	3b01      	subs	r3, #1
 8020060:	0e1b      	lsrs	r3, r3, #24
 8020062:	b2da      	uxtb	r2, r3
 8020064:	69bb      	ldr	r3, [r7, #24]
 8020066:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8020068:	69bb      	ldr	r3, [r7, #24]
 802006a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 802006e:	3b01      	subs	r3, #1
 8020070:	0c1b      	lsrs	r3, r3, #16
 8020072:	b2da      	uxtb	r2, r3
 8020074:	69bb      	ldr	r3, [r7, #24]
 8020076:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8020078:	69bb      	ldr	r3, [r7, #24]
 802007a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 802007e:	3b01      	subs	r3, #1
 8020080:	0a1b      	lsrs	r3, r3, #8
 8020082:	b2da      	uxtb	r2, r3
 8020084:	69bb      	ldr	r3, [r7, #24]
 8020086:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8020088:	69bb      	ldr	r3, [r7, #24]
 802008a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 802008e:	b2db      	uxtb	r3, r3
 8020090:	3b01      	subs	r3, #1
 8020092:	b2da      	uxtb	r2, r3
 8020094:	69bb      	ldr	r3, [r7, #24]
 8020096:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8020098:	69bb      	ldr	r3, [r7, #24]
 802009a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 802009e:	161b      	asrs	r3, r3, #24
 80200a0:	b2da      	uxtb	r2, r3
 80200a2:	69bb      	ldr	r3, [r7, #24]
 80200a4:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80200a6:	69bb      	ldr	r3, [r7, #24]
 80200a8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80200ac:	141b      	asrs	r3, r3, #16
 80200ae:	b2da      	uxtb	r2, r3
 80200b0:	69bb      	ldr	r3, [r7, #24]
 80200b2:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80200b4:	69bb      	ldr	r3, [r7, #24]
 80200b6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80200ba:	0a1b      	lsrs	r3, r3, #8
 80200bc:	b29b      	uxth	r3, r3
 80200be:	b2da      	uxtb	r2, r3
 80200c0:	69bb      	ldr	r3, [r7, #24]
 80200c2:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 80200c4:	69bb      	ldr	r3, [r7, #24]
 80200c6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80200ca:	b2da      	uxtb	r2, r3
 80200cc:	69bb      	ldr	r3, [r7, #24]
 80200ce:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80200d0:	687b      	ldr	r3, [r7, #4]
 80200d2:	330a      	adds	r3, #10
 80200d4:	781b      	ldrb	r3, [r3, #0]
 80200d6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80200d8:	687b      	ldr	r3, [r7, #4]
 80200da:	330b      	adds	r3, #11
 80200dc:	781b      	ldrb	r3, [r3, #0]
 80200de:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80200e0:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80200e2:	687b      	ldr	r3, [r7, #4]
 80200e4:	330c      	adds	r3, #12
 80200e6:	781b      	ldrb	r3, [r3, #0]
 80200e8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80200ea:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80200ec:	687a      	ldr	r2, [r7, #4]
 80200ee:	320d      	adds	r2, #13
 80200f0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80200f2:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80200f4:	69bb      	ldr	r3, [r7, #24]
 80200f6:	60da      	str	r2, [r3, #12]

  return 0;
 80200f8:	2300      	movs	r3, #0
}
 80200fa:	4618      	mov	r0, r3
 80200fc:	3720      	adds	r7, #32
 80200fe:	46bd      	mov	sp, r7
 8020100:	bd80      	pop	{r7, pc}

08020102 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020102:	b580      	push	{r7, lr}
 8020104:	b088      	sub	sp, #32
 8020106:	af00      	add	r7, sp, #0
 8020108:	60f8      	str	r0, [r7, #12]
 802010a:	460b      	mov	r3, r1
 802010c:	607a      	str	r2, [r7, #4]
 802010e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020110:	68fb      	ldr	r3, [r7, #12]
 8020112:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020116:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8020118:	69bb      	ldr	r3, [r7, #24]
 802011a:	2b00      	cmp	r3, #0
 802011c:	d102      	bne.n	8020124 <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 802011e:	f04f 33ff 	mov.w	r3, #4294967295
 8020122:	e05c      	b.n	80201de <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 8020124:	68fb      	ldr	r3, [r7, #12]
 8020126:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802012a:	685b      	ldr	r3, [r3, #4]
 802012c:	f107 0214 	add.w	r2, r7, #20
 8020130:	f107 0110 	add.w	r1, r7, #16
 8020134:	7af8      	ldrb	r0, [r7, #11]
 8020136:	4798      	blx	r3
 8020138:	4603      	mov	r3, r0
 802013a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 802013c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8020140:	2b00      	cmp	r3, #0
 8020142:	d104      	bne.n	802014e <SCSI_ReadFormatCapacity+0x4c>
 8020144:	69bb      	ldr	r3, [r7, #24]
 8020146:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 802014a:	2b02      	cmp	r3, #2
 802014c:	d108      	bne.n	8020160 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 802014e:	7af9      	ldrb	r1, [r7, #11]
 8020150:	233a      	movs	r3, #58	; 0x3a
 8020152:	2202      	movs	r2, #2
 8020154:	68f8      	ldr	r0, [r7, #12]
 8020156:	f000 f91e 	bl	8020396 <SCSI_SenseCode>
    return -1;
 802015a:	f04f 33ff 	mov.w	r3, #4294967295
 802015e:	e03e      	b.n	80201de <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 8020160:	2300      	movs	r3, #0
 8020162:	83fb      	strh	r3, [r7, #30]
 8020164:	e007      	b.n	8020176 <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 8020166:	8bfb      	ldrh	r3, [r7, #30]
 8020168:	69ba      	ldr	r2, [r7, #24]
 802016a:	4413      	add	r3, r2
 802016c:	2200      	movs	r2, #0
 802016e:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8020170:	8bfb      	ldrh	r3, [r7, #30]
 8020172:	3301      	adds	r3, #1
 8020174:	83fb      	strh	r3, [r7, #30]
 8020176:	8bfb      	ldrh	r3, [r7, #30]
 8020178:	2b0b      	cmp	r3, #11
 802017a:	d9f4      	bls.n	8020166 <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 802017c:	69bb      	ldr	r3, [r7, #24]
 802017e:	2208      	movs	r2, #8
 8020180:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8020182:	693b      	ldr	r3, [r7, #16]
 8020184:	3b01      	subs	r3, #1
 8020186:	0e1b      	lsrs	r3, r3, #24
 8020188:	b2da      	uxtb	r2, r3
 802018a:	69bb      	ldr	r3, [r7, #24]
 802018c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 802018e:	693b      	ldr	r3, [r7, #16]
 8020190:	3b01      	subs	r3, #1
 8020192:	0c1b      	lsrs	r3, r3, #16
 8020194:	b2da      	uxtb	r2, r3
 8020196:	69bb      	ldr	r3, [r7, #24]
 8020198:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 802019a:	693b      	ldr	r3, [r7, #16]
 802019c:	3b01      	subs	r3, #1
 802019e:	0a1b      	lsrs	r3, r3, #8
 80201a0:	b2da      	uxtb	r2, r3
 80201a2:	69bb      	ldr	r3, [r7, #24]
 80201a4:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80201a6:	693b      	ldr	r3, [r7, #16]
 80201a8:	b2db      	uxtb	r3, r3
 80201aa:	3b01      	subs	r3, #1
 80201ac:	b2da      	uxtb	r2, r3
 80201ae:	69bb      	ldr	r3, [r7, #24]
 80201b0:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 80201b2:	69bb      	ldr	r3, [r7, #24]
 80201b4:	2202      	movs	r2, #2
 80201b6:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80201b8:	8abb      	ldrh	r3, [r7, #20]
 80201ba:	141b      	asrs	r3, r3, #16
 80201bc:	b2da      	uxtb	r2, r3
 80201be:	69bb      	ldr	r3, [r7, #24]
 80201c0:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80201c2:	8abb      	ldrh	r3, [r7, #20]
 80201c4:	0a1b      	lsrs	r3, r3, #8
 80201c6:	b29b      	uxth	r3, r3
 80201c8:	b2da      	uxtb	r2, r3
 80201ca:	69bb      	ldr	r3, [r7, #24]
 80201cc:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 80201ce:	8abb      	ldrh	r3, [r7, #20]
 80201d0:	b2da      	uxtb	r2, r3
 80201d2:	69bb      	ldr	r3, [r7, #24]
 80201d4:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 80201d6:	69bb      	ldr	r3, [r7, #24]
 80201d8:	220c      	movs	r2, #12
 80201da:	60da      	str	r2, [r3, #12]

  return 0;
 80201dc:	2300      	movs	r3, #0
}
 80201de:	4618      	mov	r0, r3
 80201e0:	3720      	adds	r7, #32
 80201e2:	46bd      	mov	sp, r7
 80201e4:	bd80      	pop	{r7, pc}
	...

080201e8 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80201e8:	b580      	push	{r7, lr}
 80201ea:	b086      	sub	sp, #24
 80201ec:	af00      	add	r7, sp, #0
 80201ee:	60f8      	str	r0, [r7, #12]
 80201f0:	460b      	mov	r3, r1
 80201f2:	607a      	str	r2, [r7, #4]
 80201f4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80201f6:	68fb      	ldr	r3, [r7, #12]
 80201f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80201fc:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 80201fe:	2317      	movs	r3, #23
 8020200:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8020202:	693b      	ldr	r3, [r7, #16]
 8020204:	2b00      	cmp	r3, #0
 8020206:	d102      	bne.n	802020e <SCSI_ModeSense6+0x26>
  {
    return -1;
 8020208:	f04f 33ff 	mov.w	r3, #4294967295
 802020c:	e011      	b.n	8020232 <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 802020e:	687b      	ldr	r3, [r7, #4]
 8020210:	3304      	adds	r3, #4
 8020212:	781b      	ldrb	r3, [r3, #0]
 8020214:	b29b      	uxth	r3, r3
 8020216:	8afa      	ldrh	r2, [r7, #22]
 8020218:	429a      	cmp	r2, r3
 802021a:	d303      	bcc.n	8020224 <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 802021c:	687b      	ldr	r3, [r7, #4]
 802021e:	3304      	adds	r3, #4
 8020220:	781b      	ldrb	r3, [r3, #0]
 8020222:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8020224:	8afb      	ldrh	r3, [r7, #22]
 8020226:	461a      	mov	r2, r3
 8020228:	4904      	ldr	r1, [pc, #16]	; (802023c <SCSI_ModeSense6+0x54>)
 802022a:	6938      	ldr	r0, [r7, #16]
 802022c:	f000 fdbc 	bl	8020da8 <SCSI_UpdateBotData>

  return 0;
 8020230:	2300      	movs	r3, #0
}
 8020232:	4618      	mov	r0, r3
 8020234:	3718      	adds	r7, #24
 8020236:	46bd      	mov	sp, r7
 8020238:	bd80      	pop	{r7, pc}
 802023a:	bf00      	nop
 802023c:	20000648 	.word	0x20000648

08020240 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020240:	b580      	push	{r7, lr}
 8020242:	b086      	sub	sp, #24
 8020244:	af00      	add	r7, sp, #0
 8020246:	60f8      	str	r0, [r7, #12]
 8020248:	460b      	mov	r3, r1
 802024a:	607a      	str	r2, [r7, #4]
 802024c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 802024e:	68fb      	ldr	r3, [r7, #12]
 8020250:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020254:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8020256:	231b      	movs	r3, #27
 8020258:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 802025a:	693b      	ldr	r3, [r7, #16]
 802025c:	2b00      	cmp	r3, #0
 802025e:	d102      	bne.n	8020266 <SCSI_ModeSense10+0x26>
  {
    return -1;
 8020260:	f04f 33ff 	mov.w	r3, #4294967295
 8020264:	e011      	b.n	802028a <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 8020266:	687b      	ldr	r3, [r7, #4]
 8020268:	3308      	adds	r3, #8
 802026a:	781b      	ldrb	r3, [r3, #0]
 802026c:	b29b      	uxth	r3, r3
 802026e:	8afa      	ldrh	r2, [r7, #22]
 8020270:	429a      	cmp	r2, r3
 8020272:	d303      	bcc.n	802027c <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 8020274:	687b      	ldr	r3, [r7, #4]
 8020276:	3308      	adds	r3, #8
 8020278:	781b      	ldrb	r3, [r3, #0]
 802027a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 802027c:	8afb      	ldrh	r3, [r7, #22]
 802027e:	461a      	mov	r2, r3
 8020280:	4904      	ldr	r1, [pc, #16]	; (8020294 <SCSI_ModeSense10+0x54>)
 8020282:	6938      	ldr	r0, [r7, #16]
 8020284:	f000 fd90 	bl	8020da8 <SCSI_UpdateBotData>

  return 0;
 8020288:	2300      	movs	r3, #0
}
 802028a:	4618      	mov	r0, r3
 802028c:	3718      	adds	r7, #24
 802028e:	46bd      	mov	sp, r7
 8020290:	bd80      	pop	{r7, pc}
 8020292:	bf00      	nop
 8020294:	20000660 	.word	0x20000660

08020298 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020298:	b580      	push	{r7, lr}
 802029a:	b086      	sub	sp, #24
 802029c:	af00      	add	r7, sp, #0
 802029e:	60f8      	str	r0, [r7, #12]
 80202a0:	460b      	mov	r3, r1
 80202a2:	607a      	str	r2, [r7, #4]
 80202a4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80202a6:	68fb      	ldr	r3, [r7, #12]
 80202a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80202ac:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80202ae:	693b      	ldr	r3, [r7, #16]
 80202b0:	2b00      	cmp	r3, #0
 80202b2:	d102      	bne.n	80202ba <SCSI_RequestSense+0x22>
  {
    return -1;
 80202b4:	f04f 33ff 	mov.w	r3, #4294967295
 80202b8:	e069      	b.n	802038e <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80202ba:	693b      	ldr	r3, [r7, #16]
 80202bc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80202c0:	2b00      	cmp	r3, #0
 80202c2:	d10a      	bne.n	80202da <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80202c4:	693b      	ldr	r3, [r7, #16]
 80202c6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80202ca:	2320      	movs	r3, #32
 80202cc:	2205      	movs	r2, #5
 80202ce:	68f8      	ldr	r0, [r7, #12]
 80202d0:	f000 f861 	bl	8020396 <SCSI_SenseCode>
    return -1;
 80202d4:	f04f 33ff 	mov.w	r3, #4294967295
 80202d8:	e059      	b.n	802038e <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80202da:	2300      	movs	r3, #0
 80202dc:	75fb      	strb	r3, [r7, #23]
 80202de:	e007      	b.n	80202f0 <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 80202e0:	7dfb      	ldrb	r3, [r7, #23]
 80202e2:	693a      	ldr	r2, [r7, #16]
 80202e4:	4413      	add	r3, r2
 80202e6:	2200      	movs	r2, #0
 80202e8:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80202ea:	7dfb      	ldrb	r3, [r7, #23]
 80202ec:	3301      	adds	r3, #1
 80202ee:	75fb      	strb	r3, [r7, #23]
 80202f0:	7dfb      	ldrb	r3, [r7, #23]
 80202f2:	2b11      	cmp	r3, #17
 80202f4:	d9f4      	bls.n	80202e0 <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 80202f6:	693b      	ldr	r3, [r7, #16]
 80202f8:	2270      	movs	r2, #112	; 0x70
 80202fa:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 80202fc:	693b      	ldr	r3, [r7, #16]
 80202fe:	220c      	movs	r2, #12
 8020300:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8020302:	693b      	ldr	r3, [r7, #16]
 8020304:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8020308:	693b      	ldr	r3, [r7, #16]
 802030a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 802030e:	429a      	cmp	r2, r3
 8020310:	d02e      	beq.n	8020370 <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8020312:	693b      	ldr	r3, [r7, #16]
 8020314:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8020318:	461a      	mov	r2, r3
 802031a:	693b      	ldr	r3, [r7, #16]
 802031c:	3248      	adds	r2, #72	; 0x48
 802031e:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8020322:	693b      	ldr	r3, [r7, #16]
 8020324:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8020326:	693b      	ldr	r3, [r7, #16]
 8020328:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 802032c:	693a      	ldr	r2, [r7, #16]
 802032e:	3348      	adds	r3, #72	; 0x48
 8020330:	00db      	lsls	r3, r3, #3
 8020332:	4413      	add	r3, r2
 8020334:	791a      	ldrb	r2, [r3, #4]
 8020336:	693b      	ldr	r3, [r7, #16]
 8020338:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 802033a:	693b      	ldr	r3, [r7, #16]
 802033c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8020340:	693a      	ldr	r2, [r7, #16]
 8020342:	3348      	adds	r3, #72	; 0x48
 8020344:	00db      	lsls	r3, r3, #3
 8020346:	4413      	add	r3, r2
 8020348:	795a      	ldrb	r2, [r3, #5]
 802034a:	693b      	ldr	r3, [r7, #16]
 802034c:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 802034e:	693b      	ldr	r3, [r7, #16]
 8020350:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8020354:	3301      	adds	r3, #1
 8020356:	b2da      	uxtb	r2, r3
 8020358:	693b      	ldr	r3, [r7, #16]
 802035a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 802035e:	693b      	ldr	r3, [r7, #16]
 8020360:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8020364:	2b04      	cmp	r3, #4
 8020366:	d103      	bne.n	8020370 <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 8020368:	693b      	ldr	r3, [r7, #16]
 802036a:	2200      	movs	r2, #0
 802036c:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8020370:	693b      	ldr	r3, [r7, #16]
 8020372:	2212      	movs	r2, #18
 8020374:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8020376:	687b      	ldr	r3, [r7, #4]
 8020378:	3304      	adds	r3, #4
 802037a:	781b      	ldrb	r3, [r3, #0]
 802037c:	2b12      	cmp	r3, #18
 802037e:	d805      	bhi.n	802038c <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 8020380:	687b      	ldr	r3, [r7, #4]
 8020382:	3304      	adds	r3, #4
 8020384:	781b      	ldrb	r3, [r3, #0]
 8020386:	461a      	mov	r2, r3
 8020388:	693b      	ldr	r3, [r7, #16]
 802038a:	60da      	str	r2, [r3, #12]
  }

  return 0;
 802038c:	2300      	movs	r3, #0
}
 802038e:	4618      	mov	r0, r3
 8020390:	3718      	adds	r7, #24
 8020392:	46bd      	mov	sp, r7
 8020394:	bd80      	pop	{r7, pc}

08020396 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8020396:	b480      	push	{r7}
 8020398:	b085      	sub	sp, #20
 802039a:	af00      	add	r7, sp, #0
 802039c:	6078      	str	r0, [r7, #4]
 802039e:	4608      	mov	r0, r1
 80203a0:	4611      	mov	r1, r2
 80203a2:	461a      	mov	r2, r3
 80203a4:	4603      	mov	r3, r0
 80203a6:	70fb      	strb	r3, [r7, #3]
 80203a8:	460b      	mov	r3, r1
 80203aa:	70bb      	strb	r3, [r7, #2]
 80203ac:	4613      	mov	r3, r2
 80203ae:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80203b0:	687b      	ldr	r3, [r7, #4]
 80203b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80203b6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80203b8:	68fb      	ldr	r3, [r7, #12]
 80203ba:	2b00      	cmp	r3, #0
 80203bc:	d02c      	beq.n	8020418 <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 80203be:	68fb      	ldr	r3, [r7, #12]
 80203c0:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80203c4:	461a      	mov	r2, r3
 80203c6:	68fb      	ldr	r3, [r7, #12]
 80203c8:	3248      	adds	r2, #72	; 0x48
 80203ca:	78b9      	ldrb	r1, [r7, #2]
 80203cc:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 80203d0:	68fb      	ldr	r3, [r7, #12]
 80203d2:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80203d6:	68fa      	ldr	r2, [r7, #12]
 80203d8:	3348      	adds	r3, #72	; 0x48
 80203da:	00db      	lsls	r3, r3, #3
 80203dc:	4413      	add	r3, r2
 80203de:	787a      	ldrb	r2, [r7, #1]
 80203e0:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 80203e2:	68fb      	ldr	r3, [r7, #12]
 80203e4:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80203e8:	68fa      	ldr	r2, [r7, #12]
 80203ea:	3348      	adds	r3, #72	; 0x48
 80203ec:	00db      	lsls	r3, r3, #3
 80203ee:	4413      	add	r3, r2
 80203f0:	2200      	movs	r2, #0
 80203f2:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 80203f4:	68fb      	ldr	r3, [r7, #12]
 80203f6:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80203fa:	3301      	adds	r3, #1
 80203fc:	b2da      	uxtb	r2, r3
 80203fe:	68fb      	ldr	r3, [r7, #12]
 8020400:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8020404:	68fb      	ldr	r3, [r7, #12]
 8020406:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 802040a:	2b04      	cmp	r3, #4
 802040c:	d105      	bne.n	802041a <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 802040e:	68fb      	ldr	r3, [r7, #12]
 8020410:	2200      	movs	r2, #0
 8020412:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 8020416:	e000      	b.n	802041a <SCSI_SenseCode+0x84>
    return;
 8020418:	bf00      	nop
  }
}
 802041a:	3714      	adds	r7, #20
 802041c:	46bd      	mov	sp, r7
 802041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020422:	4770      	bx	lr

08020424 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020424:	b580      	push	{r7, lr}
 8020426:	b086      	sub	sp, #24
 8020428:	af00      	add	r7, sp, #0
 802042a:	60f8      	str	r0, [r7, #12]
 802042c:	460b      	mov	r3, r1
 802042e:	607a      	str	r2, [r7, #4]
 8020430:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020432:	68fb      	ldr	r3, [r7, #12]
 8020434:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020438:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 802043a:	697b      	ldr	r3, [r7, #20]
 802043c:	2b00      	cmp	r3, #0
 802043e:	d102      	bne.n	8020446 <SCSI_StartStopUnit+0x22>
  {
    return -1;
 8020440:	f04f 33ff 	mov.w	r3, #4294967295
 8020444:	e03b      	b.n	80204be <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8020446:	697b      	ldr	r3, [r7, #20]
 8020448:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 802044c:	2b01      	cmp	r3, #1
 802044e:	d10f      	bne.n	8020470 <SCSI_StartStopUnit+0x4c>
 8020450:	687b      	ldr	r3, [r7, #4]
 8020452:	3304      	adds	r3, #4
 8020454:	781b      	ldrb	r3, [r3, #0]
 8020456:	f003 0303 	and.w	r3, r3, #3
 802045a:	2b02      	cmp	r3, #2
 802045c:	d108      	bne.n	8020470 <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 802045e:	7af9      	ldrb	r1, [r7, #11]
 8020460:	2324      	movs	r3, #36	; 0x24
 8020462:	2205      	movs	r2, #5
 8020464:	68f8      	ldr	r0, [r7, #12]
 8020466:	f7ff ff96 	bl	8020396 <SCSI_SenseCode>

    return -1;
 802046a:	f04f 33ff 	mov.w	r3, #4294967295
 802046e:	e026      	b.n	80204be <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8020470:	687b      	ldr	r3, [r7, #4]
 8020472:	3304      	adds	r3, #4
 8020474:	781b      	ldrb	r3, [r3, #0]
 8020476:	f003 0303 	and.w	r3, r3, #3
 802047a:	2b01      	cmp	r3, #1
 802047c:	d104      	bne.n	8020488 <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 802047e:	697b      	ldr	r3, [r7, #20]
 8020480:	2200      	movs	r2, #0
 8020482:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8020486:	e016      	b.n	80204b6 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8020488:	687b      	ldr	r3, [r7, #4]
 802048a:	3304      	adds	r3, #4
 802048c:	781b      	ldrb	r3, [r3, #0]
 802048e:	f003 0303 	and.w	r3, r3, #3
 8020492:	2b02      	cmp	r3, #2
 8020494:	d104      	bne.n	80204a0 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8020496:	697b      	ldr	r3, [r7, #20]
 8020498:	2202      	movs	r2, #2
 802049a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 802049e:	e00a      	b.n	80204b6 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 80204a0:	687b      	ldr	r3, [r7, #4]
 80204a2:	3304      	adds	r3, #4
 80204a4:	781b      	ldrb	r3, [r3, #0]
 80204a6:	f003 0303 	and.w	r3, r3, #3
 80204aa:	2b03      	cmp	r3, #3
 80204ac:	d103      	bne.n	80204b6 <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80204ae:	697b      	ldr	r3, [r7, #20]
 80204b0:	2200      	movs	r2, #0
 80204b2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 80204b6:	697b      	ldr	r3, [r7, #20]
 80204b8:	2200      	movs	r2, #0
 80204ba:	60da      	str	r2, [r3, #12]

  return 0;
 80204bc:	2300      	movs	r3, #0
}
 80204be:	4618      	mov	r0, r3
 80204c0:	3718      	adds	r7, #24
 80204c2:	46bd      	mov	sp, r7
 80204c4:	bd80      	pop	{r7, pc}

080204c6 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80204c6:	b480      	push	{r7}
 80204c8:	b087      	sub	sp, #28
 80204ca:	af00      	add	r7, sp, #0
 80204cc:	60f8      	str	r0, [r7, #12]
 80204ce:	460b      	mov	r3, r1
 80204d0:	607a      	str	r2, [r7, #4]
 80204d2:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80204d4:	68fb      	ldr	r3, [r7, #12]
 80204d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80204da:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80204dc:	697b      	ldr	r3, [r7, #20]
 80204de:	2b00      	cmp	r3, #0
 80204e0:	d102      	bne.n	80204e8 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 80204e2:	f04f 33ff 	mov.w	r3, #4294967295
 80204e6:	e011      	b.n	802050c <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 80204e8:	687b      	ldr	r3, [r7, #4]
 80204ea:	3304      	adds	r3, #4
 80204ec:	781b      	ldrb	r3, [r3, #0]
 80204ee:	2b00      	cmp	r3, #0
 80204f0:	d104      	bne.n	80204fc <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80204f2:	697b      	ldr	r3, [r7, #20]
 80204f4:	2200      	movs	r2, #0
 80204f6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80204fa:	e003      	b.n	8020504 <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 80204fc:	697b      	ldr	r3, [r7, #20]
 80204fe:	2201      	movs	r2, #1
 8020500:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 8020504:	697b      	ldr	r3, [r7, #20]
 8020506:	2200      	movs	r2, #0
 8020508:	60da      	str	r2, [r3, #12]

  return 0;
 802050a:	2300      	movs	r3, #0
}
 802050c:	4618      	mov	r0, r3
 802050e:	371c      	adds	r7, #28
 8020510:	46bd      	mov	sp, r7
 8020512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020516:	4770      	bx	lr

08020518 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020518:	b580      	push	{r7, lr}
 802051a:	b086      	sub	sp, #24
 802051c:	af00      	add	r7, sp, #0
 802051e:	60f8      	str	r0, [r7, #12]
 8020520:	460b      	mov	r3, r1
 8020522:	607a      	str	r2, [r7, #4]
 8020524:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020526:	68fb      	ldr	r3, [r7, #12]
 8020528:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802052c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 802052e:	697b      	ldr	r3, [r7, #20]
 8020530:	2b00      	cmp	r3, #0
 8020532:	d102      	bne.n	802053a <SCSI_Read10+0x22>
  {
    return -1;
 8020534:	f04f 33ff 	mov.w	r3, #4294967295
 8020538:	e08a      	b.n	8020650 <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 802053a:	697b      	ldr	r3, [r7, #20]
 802053c:	7a1b      	ldrb	r3, [r3, #8]
 802053e:	2b00      	cmp	r3, #0
 8020540:	d17c      	bne.n	802063c <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8020542:	697b      	ldr	r3, [r7, #20]
 8020544:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8020548:	b25b      	sxtb	r3, r3
 802054a:	2b00      	cmp	r3, #0
 802054c:	db0a      	blt.n	8020564 <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 802054e:	697b      	ldr	r3, [r7, #20]
 8020550:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020554:	2320      	movs	r3, #32
 8020556:	2205      	movs	r2, #5
 8020558:	68f8      	ldr	r0, [r7, #12]
 802055a:	f7ff ff1c 	bl	8020396 <SCSI_SenseCode>
      return -1;
 802055e:	f04f 33ff 	mov.w	r3, #4294967295
 8020562:	e075      	b.n	8020650 <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8020564:	697b      	ldr	r3, [r7, #20]
 8020566:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 802056a:	2b02      	cmp	r3, #2
 802056c:	d108      	bne.n	8020580 <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 802056e:	7af9      	ldrb	r1, [r7, #11]
 8020570:	233a      	movs	r3, #58	; 0x3a
 8020572:	2202      	movs	r2, #2
 8020574:	68f8      	ldr	r0, [r7, #12]
 8020576:	f7ff ff0e 	bl	8020396 <SCSI_SenseCode>

      return -1;
 802057a:	f04f 33ff 	mov.w	r3, #4294967295
 802057e:	e067      	b.n	8020650 <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8020580:	68fb      	ldr	r3, [r7, #12]
 8020582:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020586:	689b      	ldr	r3, [r3, #8]
 8020588:	7afa      	ldrb	r2, [r7, #11]
 802058a:	4610      	mov	r0, r2
 802058c:	4798      	blx	r3
 802058e:	4603      	mov	r3, r0
 8020590:	2b00      	cmp	r3, #0
 8020592:	d008      	beq.n	80205a6 <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020594:	7af9      	ldrb	r1, [r7, #11]
 8020596:	233a      	movs	r3, #58	; 0x3a
 8020598:	2202      	movs	r2, #2
 802059a:	68f8      	ldr	r0, [r7, #12]
 802059c:	f7ff fefb 	bl	8020396 <SCSI_SenseCode>
      return -1;
 80205a0:	f04f 33ff 	mov.w	r3, #4294967295
 80205a4:	e054      	b.n	8020650 <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80205a6:	687b      	ldr	r3, [r7, #4]
 80205a8:	3302      	adds	r3, #2
 80205aa:	781b      	ldrb	r3, [r3, #0]
 80205ac:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80205ae:	687b      	ldr	r3, [r7, #4]
 80205b0:	3303      	adds	r3, #3
 80205b2:	781b      	ldrb	r3, [r3, #0]
 80205b4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80205b6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80205b8:	687b      	ldr	r3, [r7, #4]
 80205ba:	3304      	adds	r3, #4
 80205bc:	781b      	ldrb	r3, [r3, #0]
 80205be:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80205c0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80205c2:	687a      	ldr	r2, [r7, #4]
 80205c4:	3205      	adds	r2, #5
 80205c6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80205c8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80205ca:	697b      	ldr	r3, [r7, #20]
 80205cc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 80205d0:	687b      	ldr	r3, [r7, #4]
 80205d2:	3307      	adds	r3, #7
 80205d4:	781b      	ldrb	r3, [r3, #0]
 80205d6:	021b      	lsls	r3, r3, #8
 80205d8:	687a      	ldr	r2, [r7, #4]
 80205da:	3208      	adds	r2, #8
 80205dc:	7812      	ldrb	r2, [r2, #0]
 80205de:	431a      	orrs	r2, r3
 80205e0:	697b      	ldr	r3, [r7, #20]
 80205e2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80205e6:	697b      	ldr	r3, [r7, #20]
 80205e8:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80205ec:	697b      	ldr	r3, [r7, #20]
 80205ee:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80205f2:	7af9      	ldrb	r1, [r7, #11]
 80205f4:	68f8      	ldr	r0, [r7, #12]
 80205f6:	f000 faad 	bl	8020b54 <SCSI_CheckAddressRange>
 80205fa:	4603      	mov	r3, r0
 80205fc:	2b00      	cmp	r3, #0
 80205fe:	da02      	bge.n	8020606 <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8020600:	f04f 33ff 	mov.w	r3, #4294967295
 8020604:	e024      	b.n	8020650 <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8020606:	697b      	ldr	r3, [r7, #20]
 8020608:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 802060c:	697b      	ldr	r3, [r7, #20]
 802060e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020612:	6979      	ldr	r1, [r7, #20]
 8020614:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8020618:	fb01 f303 	mul.w	r3, r1, r3
 802061c:	429a      	cmp	r2, r3
 802061e:	d00a      	beq.n	8020636 <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020620:	697b      	ldr	r3, [r7, #20]
 8020622:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020626:	2320      	movs	r3, #32
 8020628:	2205      	movs	r2, #5
 802062a:	68f8      	ldr	r0, [r7, #12]
 802062c:	f7ff feb3 	bl	8020396 <SCSI_SenseCode>
      return -1;
 8020630:	f04f 33ff 	mov.w	r3, #4294967295
 8020634:	e00c      	b.n	8020650 <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8020636:	697b      	ldr	r3, [r7, #20]
 8020638:	2202      	movs	r2, #2
 802063a:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 802063c:	697b      	ldr	r3, [r7, #20]
 802063e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020642:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8020644:	7afb      	ldrb	r3, [r7, #11]
 8020646:	4619      	mov	r1, r3
 8020648:	68f8      	ldr	r0, [r7, #12]
 802064a:	f000 faab 	bl	8020ba4 <SCSI_ProcessRead>
 802064e:	4603      	mov	r3, r0
}
 8020650:	4618      	mov	r0, r3
 8020652:	3718      	adds	r7, #24
 8020654:	46bd      	mov	sp, r7
 8020656:	bd80      	pop	{r7, pc}

08020658 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020658:	b580      	push	{r7, lr}
 802065a:	b086      	sub	sp, #24
 802065c:	af00      	add	r7, sp, #0
 802065e:	60f8      	str	r0, [r7, #12]
 8020660:	460b      	mov	r3, r1
 8020662:	607a      	str	r2, [r7, #4]
 8020664:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020666:	68fb      	ldr	r3, [r7, #12]
 8020668:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802066c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 802066e:	697b      	ldr	r3, [r7, #20]
 8020670:	2b00      	cmp	r3, #0
 8020672:	d102      	bne.n	802067a <SCSI_Read12+0x22>
  {
    return -1;
 8020674:	f04f 33ff 	mov.w	r3, #4294967295
 8020678:	e095      	b.n	80207a6 <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 802067a:	697b      	ldr	r3, [r7, #20]
 802067c:	7a1b      	ldrb	r3, [r3, #8]
 802067e:	2b00      	cmp	r3, #0
 8020680:	f040 8087 	bne.w	8020792 <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8020684:	697b      	ldr	r3, [r7, #20]
 8020686:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 802068a:	b25b      	sxtb	r3, r3
 802068c:	2b00      	cmp	r3, #0
 802068e:	db0a      	blt.n	80206a6 <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020690:	697b      	ldr	r3, [r7, #20]
 8020692:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020696:	2320      	movs	r3, #32
 8020698:	2205      	movs	r2, #5
 802069a:	68f8      	ldr	r0, [r7, #12]
 802069c:	f7ff fe7b 	bl	8020396 <SCSI_SenseCode>
      return -1;
 80206a0:	f04f 33ff 	mov.w	r3, #4294967295
 80206a4:	e07f      	b.n	80207a6 <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80206a6:	697b      	ldr	r3, [r7, #20]
 80206a8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80206ac:	2b02      	cmp	r3, #2
 80206ae:	d108      	bne.n	80206c2 <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80206b0:	7af9      	ldrb	r1, [r7, #11]
 80206b2:	233a      	movs	r3, #58	; 0x3a
 80206b4:	2202      	movs	r2, #2
 80206b6:	68f8      	ldr	r0, [r7, #12]
 80206b8:	f7ff fe6d 	bl	8020396 <SCSI_SenseCode>
      return -1;
 80206bc:	f04f 33ff 	mov.w	r3, #4294967295
 80206c0:	e071      	b.n	80207a6 <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80206c2:	68fb      	ldr	r3, [r7, #12]
 80206c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80206c8:	689b      	ldr	r3, [r3, #8]
 80206ca:	7afa      	ldrb	r2, [r7, #11]
 80206cc:	4610      	mov	r0, r2
 80206ce:	4798      	blx	r3
 80206d0:	4603      	mov	r3, r0
 80206d2:	2b00      	cmp	r3, #0
 80206d4:	d008      	beq.n	80206e8 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80206d6:	7af9      	ldrb	r1, [r7, #11]
 80206d8:	233a      	movs	r3, #58	; 0x3a
 80206da:	2202      	movs	r2, #2
 80206dc:	68f8      	ldr	r0, [r7, #12]
 80206de:	f7ff fe5a 	bl	8020396 <SCSI_SenseCode>
      return -1;
 80206e2:	f04f 33ff 	mov.w	r3, #4294967295
 80206e6:	e05e      	b.n	80207a6 <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80206e8:	687b      	ldr	r3, [r7, #4]
 80206ea:	3302      	adds	r3, #2
 80206ec:	781b      	ldrb	r3, [r3, #0]
 80206ee:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80206f0:	687b      	ldr	r3, [r7, #4]
 80206f2:	3303      	adds	r3, #3
 80206f4:	781b      	ldrb	r3, [r3, #0]
 80206f6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80206f8:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80206fa:	687b      	ldr	r3, [r7, #4]
 80206fc:	3304      	adds	r3, #4
 80206fe:	781b      	ldrb	r3, [r3, #0]
 8020700:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8020702:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8020704:	687a      	ldr	r2, [r7, #4]
 8020706:	3205      	adds	r2, #5
 8020708:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 802070a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 802070c:	697b      	ldr	r3, [r7, #20]
 802070e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020712:	687b      	ldr	r3, [r7, #4]
 8020714:	3306      	adds	r3, #6
 8020716:	781b      	ldrb	r3, [r3, #0]
 8020718:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 802071a:	687b      	ldr	r3, [r7, #4]
 802071c:	3307      	adds	r3, #7
 802071e:	781b      	ldrb	r3, [r3, #0]
 8020720:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020722:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8020724:	687b      	ldr	r3, [r7, #4]
 8020726:	3308      	adds	r3, #8
 8020728:	781b      	ldrb	r3, [r3, #0]
 802072a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 802072c:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 802072e:	687a      	ldr	r2, [r7, #4]
 8020730:	3209      	adds	r2, #9
 8020732:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8020734:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020736:	697b      	ldr	r3, [r7, #20]
 8020738:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 802073c:	697b      	ldr	r3, [r7, #20]
 802073e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020742:	697b      	ldr	r3, [r7, #20]
 8020744:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020748:	7af9      	ldrb	r1, [r7, #11]
 802074a:	68f8      	ldr	r0, [r7, #12]
 802074c:	f000 fa02 	bl	8020b54 <SCSI_CheckAddressRange>
 8020750:	4603      	mov	r3, r0
 8020752:	2b00      	cmp	r3, #0
 8020754:	da02      	bge.n	802075c <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8020756:	f04f 33ff 	mov.w	r3, #4294967295
 802075a:	e024      	b.n	80207a6 <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 802075c:	697b      	ldr	r3, [r7, #20]
 802075e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8020762:	697b      	ldr	r3, [r7, #20]
 8020764:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020768:	6979      	ldr	r1, [r7, #20]
 802076a:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 802076e:	fb01 f303 	mul.w	r3, r1, r3
 8020772:	429a      	cmp	r2, r3
 8020774:	d00a      	beq.n	802078c <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020776:	697b      	ldr	r3, [r7, #20]
 8020778:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 802077c:	2320      	movs	r3, #32
 802077e:	2205      	movs	r2, #5
 8020780:	68f8      	ldr	r0, [r7, #12]
 8020782:	f7ff fe08 	bl	8020396 <SCSI_SenseCode>
      return -1;
 8020786:	f04f 33ff 	mov.w	r3, #4294967295
 802078a:	e00c      	b.n	80207a6 <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 802078c:	697b      	ldr	r3, [r7, #20]
 802078e:	2202      	movs	r2, #2
 8020790:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8020792:	697b      	ldr	r3, [r7, #20]
 8020794:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020798:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 802079a:	7afb      	ldrb	r3, [r7, #11]
 802079c:	4619      	mov	r1, r3
 802079e:	68f8      	ldr	r0, [r7, #12]
 80207a0:	f000 fa00 	bl	8020ba4 <SCSI_ProcessRead>
 80207a4:	4603      	mov	r3, r0
}
 80207a6:	4618      	mov	r0, r3
 80207a8:	3718      	adds	r7, #24
 80207aa:	46bd      	mov	sp, r7
 80207ac:	bd80      	pop	{r7, pc}

080207ae <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80207ae:	b580      	push	{r7, lr}
 80207b0:	b086      	sub	sp, #24
 80207b2:	af00      	add	r7, sp, #0
 80207b4:	60f8      	str	r0, [r7, #12]
 80207b6:	460b      	mov	r3, r1
 80207b8:	607a      	str	r2, [r7, #4]
 80207ba:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80207bc:	68fb      	ldr	r3, [r7, #12]
 80207be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80207c2:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80207c4:	697b      	ldr	r3, [r7, #20]
 80207c6:	2b00      	cmp	r3, #0
 80207c8:	d102      	bne.n	80207d0 <SCSI_Write10+0x22>
  {
    return -1;
 80207ca:	f04f 33ff 	mov.w	r3, #4294967295
 80207ce:	e0af      	b.n	8020930 <SCSI_Write10+0x182>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80207d0:	697b      	ldr	r3, [r7, #20]
 80207d2:	7a1b      	ldrb	r3, [r3, #8]
 80207d4:	2b00      	cmp	r3, #0
 80207d6:	f040 80a5 	bne.w	8020924 <SCSI_Write10+0x176>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80207da:	697b      	ldr	r3, [r7, #20]
 80207dc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80207e0:	2b00      	cmp	r3, #0
 80207e2:	d10a      	bne.n	80207fa <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80207e4:	697b      	ldr	r3, [r7, #20]
 80207e6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80207ea:	2320      	movs	r3, #32
 80207ec:	2205      	movs	r2, #5
 80207ee:	68f8      	ldr	r0, [r7, #12]
 80207f0:	f7ff fdd1 	bl	8020396 <SCSI_SenseCode>
      return -1;
 80207f4:	f04f 33ff 	mov.w	r3, #4294967295
 80207f8:	e09a      	b.n	8020930 <SCSI_Write10+0x182>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80207fa:	697b      	ldr	r3, [r7, #20]
 80207fc:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8020800:	b25b      	sxtb	r3, r3
 8020802:	2b00      	cmp	r3, #0
 8020804:	da0a      	bge.n	802081c <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020806:	697b      	ldr	r3, [r7, #20]
 8020808:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 802080c:	2320      	movs	r3, #32
 802080e:	2205      	movs	r2, #5
 8020810:	68f8      	ldr	r0, [r7, #12]
 8020812:	f7ff fdc0 	bl	8020396 <SCSI_SenseCode>
      return -1;
 8020816:	f04f 33ff 	mov.w	r3, #4294967295
 802081a:	e089      	b.n	8020930 <SCSI_Write10+0x182>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 802081c:	68fb      	ldr	r3, [r7, #12]
 802081e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020822:	689b      	ldr	r3, [r3, #8]
 8020824:	7afa      	ldrb	r2, [r7, #11]
 8020826:	4610      	mov	r0, r2
 8020828:	4798      	blx	r3
 802082a:	4603      	mov	r3, r0
 802082c:	2b00      	cmp	r3, #0
 802082e:	d008      	beq.n	8020842 <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020830:	7af9      	ldrb	r1, [r7, #11]
 8020832:	233a      	movs	r3, #58	; 0x3a
 8020834:	2202      	movs	r2, #2
 8020836:	68f8      	ldr	r0, [r7, #12]
 8020838:	f7ff fdad 	bl	8020396 <SCSI_SenseCode>
      return -1;
 802083c:	f04f 33ff 	mov.w	r3, #4294967295
 8020840:	e076      	b.n	8020930 <SCSI_Write10+0x182>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8020842:	68fb      	ldr	r3, [r7, #12]
 8020844:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020848:	68db      	ldr	r3, [r3, #12]
 802084a:	7afa      	ldrb	r2, [r7, #11]
 802084c:	4610      	mov	r0, r2
 802084e:	4798      	blx	r3
 8020850:	4603      	mov	r3, r0
 8020852:	2b00      	cmp	r3, #0
 8020854:	d008      	beq.n	8020868 <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8020856:	7af9      	ldrb	r1, [r7, #11]
 8020858:	2327      	movs	r3, #39	; 0x27
 802085a:	2202      	movs	r2, #2
 802085c:	68f8      	ldr	r0, [r7, #12]
 802085e:	f7ff fd9a 	bl	8020396 <SCSI_SenseCode>
      return -1;
 8020862:	f04f 33ff 	mov.w	r3, #4294967295
 8020866:	e063      	b.n	8020930 <SCSI_Write10+0x182>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020868:	687b      	ldr	r3, [r7, #4]
 802086a:	3302      	adds	r3, #2
 802086c:	781b      	ldrb	r3, [r3, #0]
 802086e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8020870:	687b      	ldr	r3, [r7, #4]
 8020872:	3303      	adds	r3, #3
 8020874:	781b      	ldrb	r3, [r3, #0]
 8020876:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020878:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 802087a:	687b      	ldr	r3, [r7, #4]
 802087c:	3304      	adds	r3, #4
 802087e:	781b      	ldrb	r3, [r3, #0]
 8020880:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8020882:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8020884:	687a      	ldr	r2, [r7, #4]
 8020886:	3205      	adds	r2, #5
 8020888:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 802088a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 802088c:	697b      	ldr	r3, [r7, #20]
 802088e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8020892:	687b      	ldr	r3, [r7, #4]
 8020894:	3307      	adds	r3, #7
 8020896:	781b      	ldrb	r3, [r3, #0]
 8020898:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 802089a:	687a      	ldr	r2, [r7, #4]
 802089c:	3208      	adds	r2, #8
 802089e:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80208a0:	431a      	orrs	r2, r3
 80208a2:	697b      	ldr	r3, [r7, #20]
 80208a4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80208a8:	697b      	ldr	r3, [r7, #20]
 80208aa:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80208ae:	697b      	ldr	r3, [r7, #20]
 80208b0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80208b4:	7af9      	ldrb	r1, [r7, #11]
 80208b6:	68f8      	ldr	r0, [r7, #12]
 80208b8:	f000 f94c 	bl	8020b54 <SCSI_CheckAddressRange>
 80208bc:	4603      	mov	r3, r0
 80208be:	2b00      	cmp	r3, #0
 80208c0:	da02      	bge.n	80208c8 <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80208c2:	f04f 33ff 	mov.w	r3, #4294967295
 80208c6:	e033      	b.n	8020930 <SCSI_Write10+0x182>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80208c8:	697b      	ldr	r3, [r7, #20]
 80208ca:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80208ce:	697a      	ldr	r2, [r7, #20]
 80208d0:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80208d4:	fb02 f303 	mul.w	r3, r2, r3
 80208d8:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80208da:	697b      	ldr	r3, [r7, #20]
 80208dc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80208e0:	693a      	ldr	r2, [r7, #16]
 80208e2:	429a      	cmp	r2, r3
 80208e4:	d00a      	beq.n	80208fc <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80208e6:	697b      	ldr	r3, [r7, #20]
 80208e8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80208ec:	2320      	movs	r3, #32
 80208ee:	2205      	movs	r2, #5
 80208f0:	68f8      	ldr	r0, [r7, #12]
 80208f2:	f7ff fd50 	bl	8020396 <SCSI_SenseCode>
      return -1;
 80208f6:	f04f 33ff 	mov.w	r3, #4294967295
 80208fa:	e019      	b.n	8020930 <SCSI_Write10+0x182>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80208fc:	693b      	ldr	r3, [r7, #16]
 80208fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020902:	bf28      	it	cs
 8020904:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8020908:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 802090a:	697b      	ldr	r3, [r7, #20]
 802090c:	2201      	movs	r2, #1
 802090e:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8020910:	697b      	ldr	r3, [r7, #20]
 8020912:	f103 0210 	add.w	r2, r3, #16
 8020916:	693b      	ldr	r3, [r7, #16]
 8020918:	2101      	movs	r1, #1
 802091a:	68f8      	ldr	r0, [r7, #12]
 802091c:	f002 f87f 	bl	8022a1e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8020920:	2300      	movs	r3, #0
 8020922:	e005      	b.n	8020930 <SCSI_Write10+0x182>
    return SCSI_ProcessWrite(pdev, lun);
 8020924:	7afb      	ldrb	r3, [r7, #11]
 8020926:	4619      	mov	r1, r3
 8020928:	68f8      	ldr	r0, [r7, #12]
 802092a:	f000 f9b4 	bl	8020c96 <SCSI_ProcessWrite>
 802092e:	4603      	mov	r3, r0
}
 8020930:	4618      	mov	r0, r3
 8020932:	3718      	adds	r7, #24
 8020934:	46bd      	mov	sp, r7
 8020936:	bd80      	pop	{r7, pc}

08020938 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020938:	b580      	push	{r7, lr}
 802093a:	b086      	sub	sp, #24
 802093c:	af00      	add	r7, sp, #0
 802093e:	60f8      	str	r0, [r7, #12]
 8020940:	460b      	mov	r3, r1
 8020942:	607a      	str	r2, [r7, #4]
 8020944:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020946:	68fb      	ldr	r3, [r7, #12]
 8020948:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802094c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 802094e:	697b      	ldr	r3, [r7, #20]
 8020950:	2b00      	cmp	r3, #0
 8020952:	d102      	bne.n	802095a <SCSI_Write12+0x22>
  {
    return -1;
 8020954:	f04f 33ff 	mov.w	r3, #4294967295
 8020958:	e0bf      	b.n	8020ada <SCSI_Write12+0x1a2>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 802095a:	697b      	ldr	r3, [r7, #20]
 802095c:	7a1b      	ldrb	r3, [r3, #8]
 802095e:	2b00      	cmp	r3, #0
 8020960:	f040 80b5 	bne.w	8020ace <SCSI_Write12+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8020964:	697b      	ldr	r3, [r7, #20]
 8020966:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 802096a:	2b00      	cmp	r3, #0
 802096c:	d10a      	bne.n	8020984 <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 802096e:	697b      	ldr	r3, [r7, #20]
 8020970:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020974:	2320      	movs	r3, #32
 8020976:	2205      	movs	r2, #5
 8020978:	68f8      	ldr	r0, [r7, #12]
 802097a:	f7ff fd0c 	bl	8020396 <SCSI_SenseCode>
      return -1;
 802097e:	f04f 33ff 	mov.w	r3, #4294967295
 8020982:	e0aa      	b.n	8020ada <SCSI_Write12+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8020984:	697b      	ldr	r3, [r7, #20]
 8020986:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 802098a:	b25b      	sxtb	r3, r3
 802098c:	2b00      	cmp	r3, #0
 802098e:	da0a      	bge.n	80209a6 <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020990:	697b      	ldr	r3, [r7, #20]
 8020992:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020996:	2320      	movs	r3, #32
 8020998:	2205      	movs	r2, #5
 802099a:	68f8      	ldr	r0, [r7, #12]
 802099c:	f7ff fcfb 	bl	8020396 <SCSI_SenseCode>
      return -1;
 80209a0:	f04f 33ff 	mov.w	r3, #4294967295
 80209a4:	e099      	b.n	8020ada <SCSI_Write12+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80209a6:	68fb      	ldr	r3, [r7, #12]
 80209a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80209ac:	689b      	ldr	r3, [r3, #8]
 80209ae:	7afa      	ldrb	r2, [r7, #11]
 80209b0:	4610      	mov	r0, r2
 80209b2:	4798      	blx	r3
 80209b4:	4603      	mov	r3, r0
 80209b6:	2b00      	cmp	r3, #0
 80209b8:	d00b      	beq.n	80209d2 <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80209ba:	7af9      	ldrb	r1, [r7, #11]
 80209bc:	233a      	movs	r3, #58	; 0x3a
 80209be:	2202      	movs	r2, #2
 80209c0:	68f8      	ldr	r0, [r7, #12]
 80209c2:	f7ff fce8 	bl	8020396 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80209c6:	697b      	ldr	r3, [r7, #20]
 80209c8:	2205      	movs	r2, #5
 80209ca:	721a      	strb	r2, [r3, #8]
      return -1;
 80209cc:	f04f 33ff 	mov.w	r3, #4294967295
 80209d0:	e083      	b.n	8020ada <SCSI_Write12+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 80209d2:	68fb      	ldr	r3, [r7, #12]
 80209d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80209d8:	68db      	ldr	r3, [r3, #12]
 80209da:	7afa      	ldrb	r2, [r7, #11]
 80209dc:	4610      	mov	r0, r2
 80209de:	4798      	blx	r3
 80209e0:	4603      	mov	r3, r0
 80209e2:	2b00      	cmp	r3, #0
 80209e4:	d00b      	beq.n	80209fe <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80209e6:	7af9      	ldrb	r1, [r7, #11]
 80209e8:	2327      	movs	r3, #39	; 0x27
 80209ea:	2202      	movs	r2, #2
 80209ec:	68f8      	ldr	r0, [r7, #12]
 80209ee:	f7ff fcd2 	bl	8020396 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80209f2:	697b      	ldr	r3, [r7, #20]
 80209f4:	2205      	movs	r2, #5
 80209f6:	721a      	strb	r2, [r3, #8]
      return -1;
 80209f8:	f04f 33ff 	mov.w	r3, #4294967295
 80209fc:	e06d      	b.n	8020ada <SCSI_Write12+0x1a2>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80209fe:	687b      	ldr	r3, [r7, #4]
 8020a00:	3302      	adds	r3, #2
 8020a02:	781b      	ldrb	r3, [r3, #0]
 8020a04:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8020a06:	687b      	ldr	r3, [r7, #4]
 8020a08:	3303      	adds	r3, #3
 8020a0a:	781b      	ldrb	r3, [r3, #0]
 8020a0c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020a0e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8020a10:	687b      	ldr	r3, [r7, #4]
 8020a12:	3304      	adds	r3, #4
 8020a14:	781b      	ldrb	r3, [r3, #0]
 8020a16:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8020a18:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8020a1a:	687a      	ldr	r2, [r7, #4]
 8020a1c:	3205      	adds	r2, #5
 8020a1e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8020a20:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020a22:	697b      	ldr	r3, [r7, #20]
 8020a24:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020a28:	687b      	ldr	r3, [r7, #4]
 8020a2a:	3306      	adds	r3, #6
 8020a2c:	781b      	ldrb	r3, [r3, #0]
 8020a2e:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8020a30:	687b      	ldr	r3, [r7, #4]
 8020a32:	3307      	adds	r3, #7
 8020a34:	781b      	ldrb	r3, [r3, #0]
 8020a36:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020a38:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8020a3a:	687b      	ldr	r3, [r7, #4]
 8020a3c:	3308      	adds	r3, #8
 8020a3e:	781b      	ldrb	r3, [r3, #0]
 8020a40:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8020a42:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8020a44:	687a      	ldr	r2, [r7, #4]
 8020a46:	3209      	adds	r2, #9
 8020a48:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8020a4a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020a4c:	697b      	ldr	r3, [r7, #20]
 8020a4e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8020a52:	697b      	ldr	r3, [r7, #20]
 8020a54:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020a58:	697b      	ldr	r3, [r7, #20]
 8020a5a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020a5e:	7af9      	ldrb	r1, [r7, #11]
 8020a60:	68f8      	ldr	r0, [r7, #12]
 8020a62:	f000 f877 	bl	8020b54 <SCSI_CheckAddressRange>
 8020a66:	4603      	mov	r3, r0
 8020a68:	2b00      	cmp	r3, #0
 8020a6a:	da02      	bge.n	8020a72 <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8020a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8020a70:	e033      	b.n	8020ada <SCSI_Write12+0x1a2>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8020a72:	697b      	ldr	r3, [r7, #20]
 8020a74:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020a78:	697a      	ldr	r2, [r7, #20]
 8020a7a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8020a7e:	fb02 f303 	mul.w	r3, r2, r3
 8020a82:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8020a84:	697b      	ldr	r3, [r7, #20]
 8020a86:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8020a8a:	693a      	ldr	r2, [r7, #16]
 8020a8c:	429a      	cmp	r2, r3
 8020a8e:	d00a      	beq.n	8020aa6 <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020a90:	697b      	ldr	r3, [r7, #20]
 8020a92:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020a96:	2320      	movs	r3, #32
 8020a98:	2205      	movs	r2, #5
 8020a9a:	68f8      	ldr	r0, [r7, #12]
 8020a9c:	f7ff fc7b 	bl	8020396 <SCSI_SenseCode>
      return -1;
 8020aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8020aa4:	e019      	b.n	8020ada <SCSI_Write12+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8020aa6:	693b      	ldr	r3, [r7, #16]
 8020aa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020aac:	bf28      	it	cs
 8020aae:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8020ab2:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8020ab4:	697b      	ldr	r3, [r7, #20]
 8020ab6:	2201      	movs	r2, #1
 8020ab8:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8020aba:	697b      	ldr	r3, [r7, #20]
 8020abc:	f103 0210 	add.w	r2, r3, #16
 8020ac0:	693b      	ldr	r3, [r7, #16]
 8020ac2:	2101      	movs	r1, #1
 8020ac4:	68f8      	ldr	r0, [r7, #12]
 8020ac6:	f001 ffaa 	bl	8022a1e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8020aca:	2300      	movs	r3, #0
 8020acc:	e005      	b.n	8020ada <SCSI_Write12+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 8020ace:	7afb      	ldrb	r3, [r7, #11]
 8020ad0:	4619      	mov	r1, r3
 8020ad2:	68f8      	ldr	r0, [r7, #12]
 8020ad4:	f000 f8df 	bl	8020c96 <SCSI_ProcessWrite>
 8020ad8:	4603      	mov	r3, r0
}
 8020ada:	4618      	mov	r0, r3
 8020adc:	3718      	adds	r7, #24
 8020ade:	46bd      	mov	sp, r7
 8020ae0:	bd80      	pop	{r7, pc}

08020ae2 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020ae2:	b580      	push	{r7, lr}
 8020ae4:	b086      	sub	sp, #24
 8020ae6:	af00      	add	r7, sp, #0
 8020ae8:	60f8      	str	r0, [r7, #12]
 8020aea:	460b      	mov	r3, r1
 8020aec:	607a      	str	r2, [r7, #4]
 8020aee:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020af0:	68fb      	ldr	r3, [r7, #12]
 8020af2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020af6:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020af8:	697b      	ldr	r3, [r7, #20]
 8020afa:	2b00      	cmp	r3, #0
 8020afc:	d102      	bne.n	8020b04 <SCSI_Verify10+0x22>
  {
    return -1;
 8020afe:	f04f 33ff 	mov.w	r3, #4294967295
 8020b02:	e023      	b.n	8020b4c <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8020b04:	687b      	ldr	r3, [r7, #4]
 8020b06:	3301      	adds	r3, #1
 8020b08:	781b      	ldrb	r3, [r3, #0]
 8020b0a:	f003 0302 	and.w	r3, r3, #2
 8020b0e:	2b00      	cmp	r3, #0
 8020b10:	d008      	beq.n	8020b24 <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8020b12:	7af9      	ldrb	r1, [r7, #11]
 8020b14:	2324      	movs	r3, #36	; 0x24
 8020b16:	2205      	movs	r2, #5
 8020b18:	68f8      	ldr	r0, [r7, #12]
 8020b1a:	f7ff fc3c 	bl	8020396 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8020b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8020b22:	e013      	b.n	8020b4c <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8020b24:	697b      	ldr	r3, [r7, #20]
 8020b26:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020b2a:	697b      	ldr	r3, [r7, #20]
 8020b2c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020b30:	7af9      	ldrb	r1, [r7, #11]
 8020b32:	68f8      	ldr	r0, [r7, #12]
 8020b34:	f000 f80e 	bl	8020b54 <SCSI_CheckAddressRange>
 8020b38:	4603      	mov	r3, r0
 8020b3a:	2b00      	cmp	r3, #0
 8020b3c:	da02      	bge.n	8020b44 <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 8020b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8020b42:	e003      	b.n	8020b4c <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 8020b44:	697b      	ldr	r3, [r7, #20]
 8020b46:	2200      	movs	r2, #0
 8020b48:	60da      	str	r2, [r3, #12]

  return 0;
 8020b4a:	2300      	movs	r3, #0
}
 8020b4c:	4618      	mov	r0, r3
 8020b4e:	3718      	adds	r7, #24
 8020b50:	46bd      	mov	sp, r7
 8020b52:	bd80      	pop	{r7, pc}

08020b54 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8020b54:	b580      	push	{r7, lr}
 8020b56:	b086      	sub	sp, #24
 8020b58:	af00      	add	r7, sp, #0
 8020b5a:	60f8      	str	r0, [r7, #12]
 8020b5c:	607a      	str	r2, [r7, #4]
 8020b5e:	603b      	str	r3, [r7, #0]
 8020b60:	460b      	mov	r3, r1
 8020b62:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020b64:	68fb      	ldr	r3, [r7, #12]
 8020b66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020b6a:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020b6c:	697b      	ldr	r3, [r7, #20]
 8020b6e:	2b00      	cmp	r3, #0
 8020b70:	d102      	bne.n	8020b78 <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 8020b72:	f04f 33ff 	mov.w	r3, #4294967295
 8020b76:	e011      	b.n	8020b9c <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8020b78:	687a      	ldr	r2, [r7, #4]
 8020b7a:	683b      	ldr	r3, [r7, #0]
 8020b7c:	441a      	add	r2, r3
 8020b7e:	697b      	ldr	r3, [r7, #20]
 8020b80:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8020b84:	429a      	cmp	r2, r3
 8020b86:	d908      	bls.n	8020b9a <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8020b88:	7af9      	ldrb	r1, [r7, #11]
 8020b8a:	2321      	movs	r3, #33	; 0x21
 8020b8c:	2205      	movs	r2, #5
 8020b8e:	68f8      	ldr	r0, [r7, #12]
 8020b90:	f7ff fc01 	bl	8020396 <SCSI_SenseCode>
    return -1;
 8020b94:	f04f 33ff 	mov.w	r3, #4294967295
 8020b98:	e000      	b.n	8020b9c <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 8020b9a:	2300      	movs	r3, #0
}
 8020b9c:	4618      	mov	r0, r3
 8020b9e:	3718      	adds	r7, #24
 8020ba0:	46bd      	mov	sp, r7
 8020ba2:	bd80      	pop	{r7, pc}

08020ba4 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8020ba4:	b590      	push	{r4, r7, lr}
 8020ba6:	b085      	sub	sp, #20
 8020ba8:	af00      	add	r7, sp, #0
 8020baa:	6078      	str	r0, [r7, #4]
 8020bac:	460b      	mov	r3, r1
 8020bae:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020bb0:	687b      	ldr	r3, [r7, #4]
 8020bb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020bb6:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8020bb8:	68fb      	ldr	r3, [r7, #12]
 8020bba:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020bbe:	68fa      	ldr	r2, [r7, #12]
 8020bc0:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8020bc4:	fb02 f303 	mul.w	r3, r2, r3
 8020bc8:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8020bca:	68fb      	ldr	r3, [r7, #12]
 8020bcc:	2b00      	cmp	r3, #0
 8020bce:	d102      	bne.n	8020bd6 <SCSI_ProcessRead+0x32>
  {
    return -1;
 8020bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8020bd4:	e05b      	b.n	8020c8e <SCSI_ProcessRead+0xea>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8020bd6:	68bb      	ldr	r3, [r7, #8]
 8020bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020bdc:	bf28      	it	cs
 8020bde:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8020be2:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8020be4:	687b      	ldr	r3, [r7, #4]
 8020be6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020bea:	691c      	ldr	r4, [r3, #16]
 8020bec:	68fb      	ldr	r3, [r7, #12]
 8020bee:	f103 0110 	add.w	r1, r3, #16
 8020bf2:	68fb      	ldr	r3, [r7, #12]
 8020bf4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8020bf8:	68fb      	ldr	r3, [r7, #12]
 8020bfa:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020bfe:	4618      	mov	r0, r3
 8020c00:	68bb      	ldr	r3, [r7, #8]
 8020c02:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8020c06:	b29b      	uxth	r3, r3
 8020c08:	78f8      	ldrb	r0, [r7, #3]
 8020c0a:	47a0      	blx	r4
 8020c0c:	4603      	mov	r3, r0
 8020c0e:	2b00      	cmp	r3, #0
 8020c10:	da08      	bge.n	8020c24 <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8020c12:	78f9      	ldrb	r1, [r7, #3]
 8020c14:	2311      	movs	r3, #17
 8020c16:	2204      	movs	r2, #4
 8020c18:	6878      	ldr	r0, [r7, #4]
 8020c1a:	f7ff fbbc 	bl	8020396 <SCSI_SenseCode>
    return -1;
 8020c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8020c22:	e034      	b.n	8020c8e <SCSI_ProcessRead+0xea>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8020c24:	68fb      	ldr	r3, [r7, #12]
 8020c26:	f103 0210 	add.w	r2, r3, #16
 8020c2a:	68bb      	ldr	r3, [r7, #8]
 8020c2c:	2181      	movs	r1, #129	; 0x81
 8020c2e:	6878      	ldr	r0, [r7, #4]
 8020c30:	f001 fed4 	bl	80229dc <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8020c34:	68fb      	ldr	r3, [r7, #12]
 8020c36:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020c3a:	68fb      	ldr	r3, [r7, #12]
 8020c3c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020c40:	4619      	mov	r1, r3
 8020c42:	68bb      	ldr	r3, [r7, #8]
 8020c44:	fbb3 f3f1 	udiv	r3, r3, r1
 8020c48:	441a      	add	r2, r3
 8020c4a:	68fb      	ldr	r3, [r7, #12]
 8020c4c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8020c50:	68fb      	ldr	r3, [r7, #12]
 8020c52:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8020c56:	68fb      	ldr	r3, [r7, #12]
 8020c58:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020c5c:	4619      	mov	r1, r3
 8020c5e:	68bb      	ldr	r3, [r7, #8]
 8020c60:	fbb3 f3f1 	udiv	r3, r3, r1
 8020c64:	1ad2      	subs	r2, r2, r3
 8020c66:	68fb      	ldr	r3, [r7, #12]
 8020c68:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8020c6c:	68fb      	ldr	r3, [r7, #12]
 8020c6e:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8020c72:	68bb      	ldr	r3, [r7, #8]
 8020c74:	1ad2      	subs	r2, r2, r3
 8020c76:	68fb      	ldr	r3, [r7, #12]
 8020c78:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8020c7c:	68fb      	ldr	r3, [r7, #12]
 8020c7e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020c82:	2b00      	cmp	r3, #0
 8020c84:	d102      	bne.n	8020c8c <SCSI_ProcessRead+0xe8>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8020c86:	68fb      	ldr	r3, [r7, #12]
 8020c88:	2203      	movs	r2, #3
 8020c8a:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8020c8c:	2300      	movs	r3, #0
}
 8020c8e:	4618      	mov	r0, r3
 8020c90:	3714      	adds	r7, #20
 8020c92:	46bd      	mov	sp, r7
 8020c94:	bd90      	pop	{r4, r7, pc}

08020c96 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8020c96:	b590      	push	{r4, r7, lr}
 8020c98:	b085      	sub	sp, #20
 8020c9a:	af00      	add	r7, sp, #0
 8020c9c:	6078      	str	r0, [r7, #4]
 8020c9e:	460b      	mov	r3, r1
 8020ca0:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020ca2:	687b      	ldr	r3, [r7, #4]
 8020ca4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020ca8:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8020caa:	68fb      	ldr	r3, [r7, #12]
 8020cac:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020cb0:	68fa      	ldr	r2, [r7, #12]
 8020cb2:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8020cb6:	fb02 f303 	mul.w	r3, r2, r3
 8020cba:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8020cbc:	68fb      	ldr	r3, [r7, #12]
 8020cbe:	2b00      	cmp	r3, #0
 8020cc0:	d102      	bne.n	8020cc8 <SCSI_ProcessWrite+0x32>
  {
    return -1;
 8020cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8020cc6:	e06b      	b.n	8020da0 <SCSI_ProcessWrite+0x10a>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8020cc8:	68bb      	ldr	r3, [r7, #8]
 8020cca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020cce:	bf28      	it	cs
 8020cd0:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8020cd4:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8020cd6:	687b      	ldr	r3, [r7, #4]
 8020cd8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020cdc:	695c      	ldr	r4, [r3, #20]
 8020cde:	68fb      	ldr	r3, [r7, #12]
 8020ce0:	f103 0110 	add.w	r1, r3, #16
 8020ce4:	68fb      	ldr	r3, [r7, #12]
 8020ce6:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8020cea:	68fb      	ldr	r3, [r7, #12]
 8020cec:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020cf0:	4618      	mov	r0, r3
 8020cf2:	68bb      	ldr	r3, [r7, #8]
 8020cf4:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8020cf8:	b29b      	uxth	r3, r3
 8020cfa:	78f8      	ldrb	r0, [r7, #3]
 8020cfc:	47a0      	blx	r4
 8020cfe:	4603      	mov	r3, r0
 8020d00:	2b00      	cmp	r3, #0
 8020d02:	da08      	bge.n	8020d16 <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8020d04:	78f9      	ldrb	r1, [r7, #3]
 8020d06:	2303      	movs	r3, #3
 8020d08:	2204      	movs	r2, #4
 8020d0a:	6878      	ldr	r0, [r7, #4]
 8020d0c:	f7ff fb43 	bl	8020396 <SCSI_SenseCode>
    return -1;
 8020d10:	f04f 33ff 	mov.w	r3, #4294967295
 8020d14:	e044      	b.n	8020da0 <SCSI_ProcessWrite+0x10a>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8020d16:	68fb      	ldr	r3, [r7, #12]
 8020d18:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020d1c:	68fb      	ldr	r3, [r7, #12]
 8020d1e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020d22:	4619      	mov	r1, r3
 8020d24:	68bb      	ldr	r3, [r7, #8]
 8020d26:	fbb3 f3f1 	udiv	r3, r3, r1
 8020d2a:	441a      	add	r2, r3
 8020d2c:	68fb      	ldr	r3, [r7, #12]
 8020d2e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8020d32:	68fb      	ldr	r3, [r7, #12]
 8020d34:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8020d38:	68fb      	ldr	r3, [r7, #12]
 8020d3a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020d3e:	4619      	mov	r1, r3
 8020d40:	68bb      	ldr	r3, [r7, #8]
 8020d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8020d46:	1ad2      	subs	r2, r2, r3
 8020d48:	68fb      	ldr	r3, [r7, #12]
 8020d4a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8020d4e:	68fb      	ldr	r3, [r7, #12]
 8020d50:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8020d54:	68bb      	ldr	r3, [r7, #8]
 8020d56:	1ad2      	subs	r2, r2, r3
 8020d58:	68fb      	ldr	r3, [r7, #12]
 8020d5a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8020d5e:	68fb      	ldr	r3, [r7, #12]
 8020d60:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020d64:	2b00      	cmp	r3, #0
 8020d66:	d104      	bne.n	8020d72 <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8020d68:	2100      	movs	r1, #0
 8020d6a:	6878      	ldr	r0, [r7, #4]
 8020d6c:	f7fe fdd8 	bl	801f920 <MSC_BOT_SendCSW>
 8020d70:	e015      	b.n	8020d9e <SCSI_ProcessWrite+0x108>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8020d72:	68fb      	ldr	r3, [r7, #12]
 8020d74:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020d78:	68fa      	ldr	r2, [r7, #12]
 8020d7a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8020d7e:	fb02 f303 	mul.w	r3, r2, r3
 8020d82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020d86:	bf28      	it	cs
 8020d88:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8020d8c:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8020d8e:	68fb      	ldr	r3, [r7, #12]
 8020d90:	f103 0210 	add.w	r2, r3, #16
 8020d94:	68bb      	ldr	r3, [r7, #8]
 8020d96:	2101      	movs	r1, #1
 8020d98:	6878      	ldr	r0, [r7, #4]
 8020d9a:	f001 fe40 	bl	8022a1e <USBD_LL_PrepareReceive>
  }

  return 0;
 8020d9e:	2300      	movs	r3, #0
}
 8020da0:	4618      	mov	r0, r3
 8020da2:	3714      	adds	r7, #20
 8020da4:	46bd      	mov	sp, r7
 8020da6:	bd90      	pop	{r4, r7, pc}

08020da8 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8020da8:	b480      	push	{r7}
 8020daa:	b087      	sub	sp, #28
 8020dac:	af00      	add	r7, sp, #0
 8020dae:	60f8      	str	r0, [r7, #12]
 8020db0:	60b9      	str	r1, [r7, #8]
 8020db2:	4613      	mov	r3, r2
 8020db4:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8020db6:	88fb      	ldrh	r3, [r7, #6]
 8020db8:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8020dba:	68fb      	ldr	r3, [r7, #12]
 8020dbc:	2b00      	cmp	r3, #0
 8020dbe:	d102      	bne.n	8020dc6 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8020dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8020dc4:	e013      	b.n	8020dee <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8020dc6:	8afa      	ldrh	r2, [r7, #22]
 8020dc8:	68fb      	ldr	r3, [r7, #12]
 8020dca:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8020dcc:	e00b      	b.n	8020de6 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8020dce:	8afb      	ldrh	r3, [r7, #22]
 8020dd0:	3b01      	subs	r3, #1
 8020dd2:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8020dd4:	8afb      	ldrh	r3, [r7, #22]
 8020dd6:	68ba      	ldr	r2, [r7, #8]
 8020dd8:	441a      	add	r2, r3
 8020dda:	8afb      	ldrh	r3, [r7, #22]
 8020ddc:	7811      	ldrb	r1, [r2, #0]
 8020dde:	68fa      	ldr	r2, [r7, #12]
 8020de0:	4413      	add	r3, r2
 8020de2:	460a      	mov	r2, r1
 8020de4:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8020de6:	8afb      	ldrh	r3, [r7, #22]
 8020de8:	2b00      	cmp	r3, #0
 8020dea:	d1f0      	bne.n	8020dce <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8020dec:	2300      	movs	r3, #0
}
 8020dee:	4618      	mov	r0, r3
 8020df0:	371c      	adds	r7, #28
 8020df2:	46bd      	mov	sp, r7
 8020df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020df8:	4770      	bx	lr

08020dfa <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8020dfa:	b580      	push	{r7, lr}
 8020dfc:	b086      	sub	sp, #24
 8020dfe:	af00      	add	r7, sp, #0
 8020e00:	60f8      	str	r0, [r7, #12]
 8020e02:	60b9      	str	r1, [r7, #8]
 8020e04:	4613      	mov	r3, r2
 8020e06:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8020e08:	68fb      	ldr	r3, [r7, #12]
 8020e0a:	2b00      	cmp	r3, #0
 8020e0c:	d101      	bne.n	8020e12 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8020e0e:	2303      	movs	r3, #3
 8020e10:	e01f      	b.n	8020e52 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8020e12:	68fb      	ldr	r3, [r7, #12]
 8020e14:	2200      	movs	r2, #0
 8020e16:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8020e1a:	68fb      	ldr	r3, [r7, #12]
 8020e1c:	2200      	movs	r2, #0
 8020e1e:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8020e22:	68fb      	ldr	r3, [r7, #12]
 8020e24:	2200      	movs	r2, #0
 8020e26:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8020e2a:	68bb      	ldr	r3, [r7, #8]
 8020e2c:	2b00      	cmp	r3, #0
 8020e2e:	d003      	beq.n	8020e38 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8020e30:	68fb      	ldr	r3, [r7, #12]
 8020e32:	68ba      	ldr	r2, [r7, #8]
 8020e34:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8020e38:	68fb      	ldr	r3, [r7, #12]
 8020e3a:	2201      	movs	r2, #1
 8020e3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8020e40:	68fb      	ldr	r3, [r7, #12]
 8020e42:	79fa      	ldrb	r2, [r7, #7]
 8020e44:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8020e46:	68f8      	ldr	r0, [r7, #12]
 8020e48:	f001 fc74 	bl	8022734 <USBD_LL_Init>
 8020e4c:	4603      	mov	r3, r0
 8020e4e:	75fb      	strb	r3, [r7, #23]

  return ret;
 8020e50:	7dfb      	ldrb	r3, [r7, #23]
}
 8020e52:	4618      	mov	r0, r3
 8020e54:	3718      	adds	r7, #24
 8020e56:	46bd      	mov	sp, r7
 8020e58:	bd80      	pop	{r7, pc}

08020e5a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8020e5a:	b580      	push	{r7, lr}
 8020e5c:	b084      	sub	sp, #16
 8020e5e:	af00      	add	r7, sp, #0
 8020e60:	6078      	str	r0, [r7, #4]
 8020e62:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8020e64:	2300      	movs	r3, #0
 8020e66:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8020e68:	683b      	ldr	r3, [r7, #0]
 8020e6a:	2b00      	cmp	r3, #0
 8020e6c:	d101      	bne.n	8020e72 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8020e6e:	2303      	movs	r3, #3
 8020e70:	e016      	b.n	8020ea0 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8020e72:	687b      	ldr	r3, [r7, #4]
 8020e74:	683a      	ldr	r2, [r7, #0]
 8020e76:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8020e7a:	687b      	ldr	r3, [r7, #4]
 8020e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020e82:	2b00      	cmp	r3, #0
 8020e84:	d00b      	beq.n	8020e9e <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8020e86:	687b      	ldr	r3, [r7, #4]
 8020e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020e8e:	f107 020e 	add.w	r2, r7, #14
 8020e92:	4610      	mov	r0, r2
 8020e94:	4798      	blx	r3
 8020e96:	4602      	mov	r2, r0
 8020e98:	687b      	ldr	r3, [r7, #4]
 8020e9a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8020e9e:	2300      	movs	r3, #0
}
 8020ea0:	4618      	mov	r0, r3
 8020ea2:	3710      	adds	r7, #16
 8020ea4:	46bd      	mov	sp, r7
 8020ea6:	bd80      	pop	{r7, pc}

08020ea8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8020ea8:	b580      	push	{r7, lr}
 8020eaa:	b082      	sub	sp, #8
 8020eac:	af00      	add	r7, sp, #0
 8020eae:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8020eb0:	6878      	ldr	r0, [r7, #4]
 8020eb2:	f001 fc8b 	bl	80227cc <USBD_LL_Start>
 8020eb6:	4603      	mov	r3, r0
}
 8020eb8:	4618      	mov	r0, r3
 8020eba:	3708      	adds	r7, #8
 8020ebc:	46bd      	mov	sp, r7
 8020ebe:	bd80      	pop	{r7, pc}

08020ec0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8020ec0:	b480      	push	{r7}
 8020ec2:	b083      	sub	sp, #12
 8020ec4:	af00      	add	r7, sp, #0
 8020ec6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8020ec8:	2300      	movs	r3, #0
}
 8020eca:	4618      	mov	r0, r3
 8020ecc:	370c      	adds	r7, #12
 8020ece:	46bd      	mov	sp, r7
 8020ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ed4:	4770      	bx	lr

08020ed6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8020ed6:	b580      	push	{r7, lr}
 8020ed8:	b084      	sub	sp, #16
 8020eda:	af00      	add	r7, sp, #0
 8020edc:	6078      	str	r0, [r7, #4]
 8020ede:	460b      	mov	r3, r1
 8020ee0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8020ee2:	2303      	movs	r3, #3
 8020ee4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8020ee6:	687b      	ldr	r3, [r7, #4]
 8020ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020eec:	2b00      	cmp	r3, #0
 8020eee:	d009      	beq.n	8020f04 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8020ef0:	687b      	ldr	r3, [r7, #4]
 8020ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020ef6:	681b      	ldr	r3, [r3, #0]
 8020ef8:	78fa      	ldrb	r2, [r7, #3]
 8020efa:	4611      	mov	r1, r2
 8020efc:	6878      	ldr	r0, [r7, #4]
 8020efe:	4798      	blx	r3
 8020f00:	4603      	mov	r3, r0
 8020f02:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8020f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8020f06:	4618      	mov	r0, r3
 8020f08:	3710      	adds	r7, #16
 8020f0a:	46bd      	mov	sp, r7
 8020f0c:	bd80      	pop	{r7, pc}

08020f0e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8020f0e:	b580      	push	{r7, lr}
 8020f10:	b082      	sub	sp, #8
 8020f12:	af00      	add	r7, sp, #0
 8020f14:	6078      	str	r0, [r7, #4]
 8020f16:	460b      	mov	r3, r1
 8020f18:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8020f1a:	687b      	ldr	r3, [r7, #4]
 8020f1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020f20:	2b00      	cmp	r3, #0
 8020f22:	d007      	beq.n	8020f34 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8020f24:	687b      	ldr	r3, [r7, #4]
 8020f26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020f2a:	685b      	ldr	r3, [r3, #4]
 8020f2c:	78fa      	ldrb	r2, [r7, #3]
 8020f2e:	4611      	mov	r1, r2
 8020f30:	6878      	ldr	r0, [r7, #4]
 8020f32:	4798      	blx	r3
  }

  return USBD_OK;
 8020f34:	2300      	movs	r3, #0
}
 8020f36:	4618      	mov	r0, r3
 8020f38:	3708      	adds	r7, #8
 8020f3a:	46bd      	mov	sp, r7
 8020f3c:	bd80      	pop	{r7, pc}

08020f3e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8020f3e:	b580      	push	{r7, lr}
 8020f40:	b084      	sub	sp, #16
 8020f42:	af00      	add	r7, sp, #0
 8020f44:	6078      	str	r0, [r7, #4]
 8020f46:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8020f48:	687b      	ldr	r3, [r7, #4]
 8020f4a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8020f4e:	6839      	ldr	r1, [r7, #0]
 8020f50:	4618      	mov	r0, r3
 8020f52:	f000 ffb9 	bl	8021ec8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8020f56:	687b      	ldr	r3, [r7, #4]
 8020f58:	2201      	movs	r2, #1
 8020f5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8020f5e:	687b      	ldr	r3, [r7, #4]
 8020f60:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8020f64:	461a      	mov	r2, r3
 8020f66:	687b      	ldr	r3, [r7, #4]
 8020f68:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8020f6c:	687b      	ldr	r3, [r7, #4]
 8020f6e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8020f72:	f003 031f 	and.w	r3, r3, #31
 8020f76:	2b02      	cmp	r3, #2
 8020f78:	d01a      	beq.n	8020fb0 <USBD_LL_SetupStage+0x72>
 8020f7a:	2b02      	cmp	r3, #2
 8020f7c:	d822      	bhi.n	8020fc4 <USBD_LL_SetupStage+0x86>
 8020f7e:	2b00      	cmp	r3, #0
 8020f80:	d002      	beq.n	8020f88 <USBD_LL_SetupStage+0x4a>
 8020f82:	2b01      	cmp	r3, #1
 8020f84:	d00a      	beq.n	8020f9c <USBD_LL_SetupStage+0x5e>
 8020f86:	e01d      	b.n	8020fc4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8020f88:	687b      	ldr	r3, [r7, #4]
 8020f8a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8020f8e:	4619      	mov	r1, r3
 8020f90:	6878      	ldr	r0, [r7, #4]
 8020f92:	f000 fa61 	bl	8021458 <USBD_StdDevReq>
 8020f96:	4603      	mov	r3, r0
 8020f98:	73fb      	strb	r3, [r7, #15]
      break;
 8020f9a:	e020      	b.n	8020fde <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8020f9c:	687b      	ldr	r3, [r7, #4]
 8020f9e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8020fa2:	4619      	mov	r1, r3
 8020fa4:	6878      	ldr	r0, [r7, #4]
 8020fa6:	f000 fac5 	bl	8021534 <USBD_StdItfReq>
 8020faa:	4603      	mov	r3, r0
 8020fac:	73fb      	strb	r3, [r7, #15]
      break;
 8020fae:	e016      	b.n	8020fde <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8020fb0:	687b      	ldr	r3, [r7, #4]
 8020fb2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8020fb6:	4619      	mov	r1, r3
 8020fb8:	6878      	ldr	r0, [r7, #4]
 8020fba:	f000 fb04 	bl	80215c6 <USBD_StdEPReq>
 8020fbe:	4603      	mov	r3, r0
 8020fc0:	73fb      	strb	r3, [r7, #15]
      break;
 8020fc2:	e00c      	b.n	8020fde <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8020fc4:	687b      	ldr	r3, [r7, #4]
 8020fc6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8020fca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8020fce:	b2db      	uxtb	r3, r3
 8020fd0:	4619      	mov	r1, r3
 8020fd2:	6878      	ldr	r0, [r7, #4]
 8020fd4:	f001 fc79 	bl	80228ca <USBD_LL_StallEP>
 8020fd8:	4603      	mov	r3, r0
 8020fda:	73fb      	strb	r3, [r7, #15]
      break;
 8020fdc:	bf00      	nop
  }

  return ret;
 8020fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8020fe0:	4618      	mov	r0, r3
 8020fe2:	3710      	adds	r7, #16
 8020fe4:	46bd      	mov	sp, r7
 8020fe6:	bd80      	pop	{r7, pc}

08020fe8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8020fe8:	b580      	push	{r7, lr}
 8020fea:	b086      	sub	sp, #24
 8020fec:	af00      	add	r7, sp, #0
 8020fee:	60f8      	str	r0, [r7, #12]
 8020ff0:	460b      	mov	r3, r1
 8020ff2:	607a      	str	r2, [r7, #4]
 8020ff4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8020ff6:	7afb      	ldrb	r3, [r7, #11]
 8020ff8:	2b00      	cmp	r3, #0
 8020ffa:	d138      	bne.n	802106e <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8020ffc:	68fb      	ldr	r3, [r7, #12]
 8020ffe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8021002:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8021004:	68fb      	ldr	r3, [r7, #12]
 8021006:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 802100a:	2b03      	cmp	r3, #3
 802100c:	d14a      	bne.n	80210a4 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 802100e:	693b      	ldr	r3, [r7, #16]
 8021010:	689a      	ldr	r2, [r3, #8]
 8021012:	693b      	ldr	r3, [r7, #16]
 8021014:	68db      	ldr	r3, [r3, #12]
 8021016:	429a      	cmp	r2, r3
 8021018:	d913      	bls.n	8021042 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 802101a:	693b      	ldr	r3, [r7, #16]
 802101c:	689a      	ldr	r2, [r3, #8]
 802101e:	693b      	ldr	r3, [r7, #16]
 8021020:	68db      	ldr	r3, [r3, #12]
 8021022:	1ad2      	subs	r2, r2, r3
 8021024:	693b      	ldr	r3, [r7, #16]
 8021026:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8021028:	693b      	ldr	r3, [r7, #16]
 802102a:	68da      	ldr	r2, [r3, #12]
 802102c:	693b      	ldr	r3, [r7, #16]
 802102e:	689b      	ldr	r3, [r3, #8]
 8021030:	4293      	cmp	r3, r2
 8021032:	bf28      	it	cs
 8021034:	4613      	movcs	r3, r2
 8021036:	461a      	mov	r2, r3
 8021038:	6879      	ldr	r1, [r7, #4]
 802103a:	68f8      	ldr	r0, [r7, #12]
 802103c:	f001 f81b 	bl	8022076 <USBD_CtlContinueRx>
 8021040:	e030      	b.n	80210a4 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021042:	68fb      	ldr	r3, [r7, #12]
 8021044:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021048:	b2db      	uxtb	r3, r3
 802104a:	2b03      	cmp	r3, #3
 802104c:	d10b      	bne.n	8021066 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 802104e:	68fb      	ldr	r3, [r7, #12]
 8021050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021054:	691b      	ldr	r3, [r3, #16]
 8021056:	2b00      	cmp	r3, #0
 8021058:	d005      	beq.n	8021066 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 802105a:	68fb      	ldr	r3, [r7, #12]
 802105c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021060:	691b      	ldr	r3, [r3, #16]
 8021062:	68f8      	ldr	r0, [r7, #12]
 8021064:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8021066:	68f8      	ldr	r0, [r7, #12]
 8021068:	f001 f816 	bl	8022098 <USBD_CtlSendStatus>
 802106c:	e01a      	b.n	80210a4 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802106e:	68fb      	ldr	r3, [r7, #12]
 8021070:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021074:	b2db      	uxtb	r3, r3
 8021076:	2b03      	cmp	r3, #3
 8021078:	d114      	bne.n	80210a4 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 802107a:	68fb      	ldr	r3, [r7, #12]
 802107c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021080:	699b      	ldr	r3, [r3, #24]
 8021082:	2b00      	cmp	r3, #0
 8021084:	d00e      	beq.n	80210a4 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8021086:	68fb      	ldr	r3, [r7, #12]
 8021088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802108c:	699b      	ldr	r3, [r3, #24]
 802108e:	7afa      	ldrb	r2, [r7, #11]
 8021090:	4611      	mov	r1, r2
 8021092:	68f8      	ldr	r0, [r7, #12]
 8021094:	4798      	blx	r3
 8021096:	4603      	mov	r3, r0
 8021098:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 802109a:	7dfb      	ldrb	r3, [r7, #23]
 802109c:	2b00      	cmp	r3, #0
 802109e:	d001      	beq.n	80210a4 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80210a0:	7dfb      	ldrb	r3, [r7, #23]
 80210a2:	e000      	b.n	80210a6 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80210a4:	2300      	movs	r3, #0
}
 80210a6:	4618      	mov	r0, r3
 80210a8:	3718      	adds	r7, #24
 80210aa:	46bd      	mov	sp, r7
 80210ac:	bd80      	pop	{r7, pc}

080210ae <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80210ae:	b580      	push	{r7, lr}
 80210b0:	b086      	sub	sp, #24
 80210b2:	af00      	add	r7, sp, #0
 80210b4:	60f8      	str	r0, [r7, #12]
 80210b6:	460b      	mov	r3, r1
 80210b8:	607a      	str	r2, [r7, #4]
 80210ba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80210bc:	7afb      	ldrb	r3, [r7, #11]
 80210be:	2b00      	cmp	r3, #0
 80210c0:	d16b      	bne.n	802119a <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80210c2:	68fb      	ldr	r3, [r7, #12]
 80210c4:	3314      	adds	r3, #20
 80210c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80210c8:	68fb      	ldr	r3, [r7, #12]
 80210ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80210ce:	2b02      	cmp	r3, #2
 80210d0:	d156      	bne.n	8021180 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80210d2:	693b      	ldr	r3, [r7, #16]
 80210d4:	689a      	ldr	r2, [r3, #8]
 80210d6:	693b      	ldr	r3, [r7, #16]
 80210d8:	68db      	ldr	r3, [r3, #12]
 80210da:	429a      	cmp	r2, r3
 80210dc:	d914      	bls.n	8021108 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80210de:	693b      	ldr	r3, [r7, #16]
 80210e0:	689a      	ldr	r2, [r3, #8]
 80210e2:	693b      	ldr	r3, [r7, #16]
 80210e4:	68db      	ldr	r3, [r3, #12]
 80210e6:	1ad2      	subs	r2, r2, r3
 80210e8:	693b      	ldr	r3, [r7, #16]
 80210ea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80210ec:	693b      	ldr	r3, [r7, #16]
 80210ee:	689b      	ldr	r3, [r3, #8]
 80210f0:	461a      	mov	r2, r3
 80210f2:	6879      	ldr	r1, [r7, #4]
 80210f4:	68f8      	ldr	r0, [r7, #12]
 80210f6:	f000 ffad 	bl	8022054 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80210fa:	2300      	movs	r3, #0
 80210fc:	2200      	movs	r2, #0
 80210fe:	2100      	movs	r1, #0
 8021100:	68f8      	ldr	r0, [r7, #12]
 8021102:	f001 fc8c 	bl	8022a1e <USBD_LL_PrepareReceive>
 8021106:	e03b      	b.n	8021180 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8021108:	693b      	ldr	r3, [r7, #16]
 802110a:	68da      	ldr	r2, [r3, #12]
 802110c:	693b      	ldr	r3, [r7, #16]
 802110e:	689b      	ldr	r3, [r3, #8]
 8021110:	429a      	cmp	r2, r3
 8021112:	d11c      	bne.n	802114e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8021114:	693b      	ldr	r3, [r7, #16]
 8021116:	685a      	ldr	r2, [r3, #4]
 8021118:	693b      	ldr	r3, [r7, #16]
 802111a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 802111c:	429a      	cmp	r2, r3
 802111e:	d316      	bcc.n	802114e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8021120:	693b      	ldr	r3, [r7, #16]
 8021122:	685a      	ldr	r2, [r3, #4]
 8021124:	68fb      	ldr	r3, [r7, #12]
 8021126:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 802112a:	429a      	cmp	r2, r3
 802112c:	d20f      	bcs.n	802114e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 802112e:	2200      	movs	r2, #0
 8021130:	2100      	movs	r1, #0
 8021132:	68f8      	ldr	r0, [r7, #12]
 8021134:	f000 ff8e 	bl	8022054 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8021138:	68fb      	ldr	r3, [r7, #12]
 802113a:	2200      	movs	r2, #0
 802113c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8021140:	2300      	movs	r3, #0
 8021142:	2200      	movs	r2, #0
 8021144:	2100      	movs	r1, #0
 8021146:	68f8      	ldr	r0, [r7, #12]
 8021148:	f001 fc69 	bl	8022a1e <USBD_LL_PrepareReceive>
 802114c:	e018      	b.n	8021180 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802114e:	68fb      	ldr	r3, [r7, #12]
 8021150:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021154:	b2db      	uxtb	r3, r3
 8021156:	2b03      	cmp	r3, #3
 8021158:	d10b      	bne.n	8021172 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 802115a:	68fb      	ldr	r3, [r7, #12]
 802115c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021160:	68db      	ldr	r3, [r3, #12]
 8021162:	2b00      	cmp	r3, #0
 8021164:	d005      	beq.n	8021172 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8021166:	68fb      	ldr	r3, [r7, #12]
 8021168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802116c:	68db      	ldr	r3, [r3, #12]
 802116e:	68f8      	ldr	r0, [r7, #12]
 8021170:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8021172:	2180      	movs	r1, #128	; 0x80
 8021174:	68f8      	ldr	r0, [r7, #12]
 8021176:	f001 fba8 	bl	80228ca <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 802117a:	68f8      	ldr	r0, [r7, #12]
 802117c:	f000 ff9f 	bl	80220be <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8021180:	68fb      	ldr	r3, [r7, #12]
 8021182:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8021186:	2b01      	cmp	r3, #1
 8021188:	d122      	bne.n	80211d0 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 802118a:	68f8      	ldr	r0, [r7, #12]
 802118c:	f7ff fe98 	bl	8020ec0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8021190:	68fb      	ldr	r3, [r7, #12]
 8021192:	2200      	movs	r2, #0
 8021194:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8021198:	e01a      	b.n	80211d0 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802119a:	68fb      	ldr	r3, [r7, #12]
 802119c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80211a0:	b2db      	uxtb	r3, r3
 80211a2:	2b03      	cmp	r3, #3
 80211a4:	d114      	bne.n	80211d0 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80211a6:	68fb      	ldr	r3, [r7, #12]
 80211a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80211ac:	695b      	ldr	r3, [r3, #20]
 80211ae:	2b00      	cmp	r3, #0
 80211b0:	d00e      	beq.n	80211d0 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80211b2:	68fb      	ldr	r3, [r7, #12]
 80211b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80211b8:	695b      	ldr	r3, [r3, #20]
 80211ba:	7afa      	ldrb	r2, [r7, #11]
 80211bc:	4611      	mov	r1, r2
 80211be:	68f8      	ldr	r0, [r7, #12]
 80211c0:	4798      	blx	r3
 80211c2:	4603      	mov	r3, r0
 80211c4:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80211c6:	7dfb      	ldrb	r3, [r7, #23]
 80211c8:	2b00      	cmp	r3, #0
 80211ca:	d001      	beq.n	80211d0 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80211cc:	7dfb      	ldrb	r3, [r7, #23]
 80211ce:	e000      	b.n	80211d2 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80211d0:	2300      	movs	r3, #0
}
 80211d2:	4618      	mov	r0, r3
 80211d4:	3718      	adds	r7, #24
 80211d6:	46bd      	mov	sp, r7
 80211d8:	bd80      	pop	{r7, pc}

080211da <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80211da:	b580      	push	{r7, lr}
 80211dc:	b082      	sub	sp, #8
 80211de:	af00      	add	r7, sp, #0
 80211e0:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80211e2:	687b      	ldr	r3, [r7, #4]
 80211e4:	2201      	movs	r2, #1
 80211e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80211ea:	687b      	ldr	r3, [r7, #4]
 80211ec:	2200      	movs	r2, #0
 80211ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80211f2:	687b      	ldr	r3, [r7, #4]
 80211f4:	2200      	movs	r2, #0
 80211f6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80211f8:	687b      	ldr	r3, [r7, #4]
 80211fa:	2200      	movs	r2, #0
 80211fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8021200:	687b      	ldr	r3, [r7, #4]
 8021202:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021206:	2b00      	cmp	r3, #0
 8021208:	d101      	bne.n	802120e <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 802120a:	2303      	movs	r3, #3
 802120c:	e02f      	b.n	802126e <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 802120e:	687b      	ldr	r3, [r7, #4]
 8021210:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8021214:	2b00      	cmp	r3, #0
 8021216:	d00f      	beq.n	8021238 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8021218:	687b      	ldr	r3, [r7, #4]
 802121a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802121e:	685b      	ldr	r3, [r3, #4]
 8021220:	2b00      	cmp	r3, #0
 8021222:	d009      	beq.n	8021238 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8021224:	687b      	ldr	r3, [r7, #4]
 8021226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802122a:	685b      	ldr	r3, [r3, #4]
 802122c:	687a      	ldr	r2, [r7, #4]
 802122e:	6852      	ldr	r2, [r2, #4]
 8021230:	b2d2      	uxtb	r2, r2
 8021232:	4611      	mov	r1, r2
 8021234:	6878      	ldr	r0, [r7, #4]
 8021236:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8021238:	2340      	movs	r3, #64	; 0x40
 802123a:	2200      	movs	r2, #0
 802123c:	2100      	movs	r1, #0
 802123e:	6878      	ldr	r0, [r7, #4]
 8021240:	f001 fadf 	bl	8022802 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8021244:	687b      	ldr	r3, [r7, #4]
 8021246:	2201      	movs	r2, #1
 8021248:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 802124c:	687b      	ldr	r3, [r7, #4]
 802124e:	2240      	movs	r2, #64	; 0x40
 8021250:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8021254:	2340      	movs	r3, #64	; 0x40
 8021256:	2200      	movs	r2, #0
 8021258:	2180      	movs	r1, #128	; 0x80
 802125a:	6878      	ldr	r0, [r7, #4]
 802125c:	f001 fad1 	bl	8022802 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8021260:	687b      	ldr	r3, [r7, #4]
 8021262:	2201      	movs	r2, #1
 8021264:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8021266:	687b      	ldr	r3, [r7, #4]
 8021268:	2240      	movs	r2, #64	; 0x40
 802126a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 802126c:	2300      	movs	r3, #0
}
 802126e:	4618      	mov	r0, r3
 8021270:	3708      	adds	r7, #8
 8021272:	46bd      	mov	sp, r7
 8021274:	bd80      	pop	{r7, pc}

08021276 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8021276:	b480      	push	{r7}
 8021278:	b083      	sub	sp, #12
 802127a:	af00      	add	r7, sp, #0
 802127c:	6078      	str	r0, [r7, #4]
 802127e:	460b      	mov	r3, r1
 8021280:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8021282:	687b      	ldr	r3, [r7, #4]
 8021284:	78fa      	ldrb	r2, [r7, #3]
 8021286:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8021288:	2300      	movs	r3, #0
}
 802128a:	4618      	mov	r0, r3
 802128c:	370c      	adds	r7, #12
 802128e:	46bd      	mov	sp, r7
 8021290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021294:	4770      	bx	lr

08021296 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8021296:	b480      	push	{r7}
 8021298:	b083      	sub	sp, #12
 802129a:	af00      	add	r7, sp, #0
 802129c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 802129e:	687b      	ldr	r3, [r7, #4]
 80212a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80212a4:	b2da      	uxtb	r2, r3
 80212a6:	687b      	ldr	r3, [r7, #4]
 80212a8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80212ac:	687b      	ldr	r3, [r7, #4]
 80212ae:	2204      	movs	r2, #4
 80212b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80212b4:	2300      	movs	r3, #0
}
 80212b6:	4618      	mov	r0, r3
 80212b8:	370c      	adds	r7, #12
 80212ba:	46bd      	mov	sp, r7
 80212bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212c0:	4770      	bx	lr

080212c2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80212c2:	b480      	push	{r7}
 80212c4:	b083      	sub	sp, #12
 80212c6:	af00      	add	r7, sp, #0
 80212c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80212ca:	687b      	ldr	r3, [r7, #4]
 80212cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80212d0:	b2db      	uxtb	r3, r3
 80212d2:	2b04      	cmp	r3, #4
 80212d4:	d106      	bne.n	80212e4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80212d6:	687b      	ldr	r3, [r7, #4]
 80212d8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80212dc:	b2da      	uxtb	r2, r3
 80212de:	687b      	ldr	r3, [r7, #4]
 80212e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80212e4:	2300      	movs	r3, #0
}
 80212e6:	4618      	mov	r0, r3
 80212e8:	370c      	adds	r7, #12
 80212ea:	46bd      	mov	sp, r7
 80212ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212f0:	4770      	bx	lr

080212f2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80212f2:	b580      	push	{r7, lr}
 80212f4:	b082      	sub	sp, #8
 80212f6:	af00      	add	r7, sp, #0
 80212f8:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80212fa:	687b      	ldr	r3, [r7, #4]
 80212fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021300:	2b00      	cmp	r3, #0
 8021302:	d101      	bne.n	8021308 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8021304:	2303      	movs	r3, #3
 8021306:	e012      	b.n	802132e <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021308:	687b      	ldr	r3, [r7, #4]
 802130a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802130e:	b2db      	uxtb	r3, r3
 8021310:	2b03      	cmp	r3, #3
 8021312:	d10b      	bne.n	802132c <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8021314:	687b      	ldr	r3, [r7, #4]
 8021316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802131a:	69db      	ldr	r3, [r3, #28]
 802131c:	2b00      	cmp	r3, #0
 802131e:	d005      	beq.n	802132c <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8021320:	687b      	ldr	r3, [r7, #4]
 8021322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021326:	69db      	ldr	r3, [r3, #28]
 8021328:	6878      	ldr	r0, [r7, #4]
 802132a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 802132c:	2300      	movs	r3, #0
}
 802132e:	4618      	mov	r0, r3
 8021330:	3708      	adds	r7, #8
 8021332:	46bd      	mov	sp, r7
 8021334:	bd80      	pop	{r7, pc}

08021336 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8021336:	b580      	push	{r7, lr}
 8021338:	b082      	sub	sp, #8
 802133a:	af00      	add	r7, sp, #0
 802133c:	6078      	str	r0, [r7, #4]
 802133e:	460b      	mov	r3, r1
 8021340:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8021342:	687b      	ldr	r3, [r7, #4]
 8021344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021348:	2b00      	cmp	r3, #0
 802134a:	d101      	bne.n	8021350 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 802134c:	2303      	movs	r3, #3
 802134e:	e014      	b.n	802137a <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021350:	687b      	ldr	r3, [r7, #4]
 8021352:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021356:	b2db      	uxtb	r3, r3
 8021358:	2b03      	cmp	r3, #3
 802135a:	d10d      	bne.n	8021378 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 802135c:	687b      	ldr	r3, [r7, #4]
 802135e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021362:	6a1b      	ldr	r3, [r3, #32]
 8021364:	2b00      	cmp	r3, #0
 8021366:	d007      	beq.n	8021378 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8021368:	687b      	ldr	r3, [r7, #4]
 802136a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802136e:	6a1b      	ldr	r3, [r3, #32]
 8021370:	78fa      	ldrb	r2, [r7, #3]
 8021372:	4611      	mov	r1, r2
 8021374:	6878      	ldr	r0, [r7, #4]
 8021376:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8021378:	2300      	movs	r3, #0
}
 802137a:	4618      	mov	r0, r3
 802137c:	3708      	adds	r7, #8
 802137e:	46bd      	mov	sp, r7
 8021380:	bd80      	pop	{r7, pc}

08021382 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8021382:	b580      	push	{r7, lr}
 8021384:	b082      	sub	sp, #8
 8021386:	af00      	add	r7, sp, #0
 8021388:	6078      	str	r0, [r7, #4]
 802138a:	460b      	mov	r3, r1
 802138c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 802138e:	687b      	ldr	r3, [r7, #4]
 8021390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021394:	2b00      	cmp	r3, #0
 8021396:	d101      	bne.n	802139c <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8021398:	2303      	movs	r3, #3
 802139a:	e014      	b.n	80213c6 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802139c:	687b      	ldr	r3, [r7, #4]
 802139e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80213a2:	b2db      	uxtb	r3, r3
 80213a4:	2b03      	cmp	r3, #3
 80213a6:	d10d      	bne.n	80213c4 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80213a8:	687b      	ldr	r3, [r7, #4]
 80213aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80213ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80213b0:	2b00      	cmp	r3, #0
 80213b2:	d007      	beq.n	80213c4 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80213b4:	687b      	ldr	r3, [r7, #4]
 80213b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80213ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80213bc:	78fa      	ldrb	r2, [r7, #3]
 80213be:	4611      	mov	r1, r2
 80213c0:	6878      	ldr	r0, [r7, #4]
 80213c2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80213c4:	2300      	movs	r3, #0
}
 80213c6:	4618      	mov	r0, r3
 80213c8:	3708      	adds	r7, #8
 80213ca:	46bd      	mov	sp, r7
 80213cc:	bd80      	pop	{r7, pc}

080213ce <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80213ce:	b480      	push	{r7}
 80213d0:	b083      	sub	sp, #12
 80213d2:	af00      	add	r7, sp, #0
 80213d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80213d6:	2300      	movs	r3, #0
}
 80213d8:	4618      	mov	r0, r3
 80213da:	370c      	adds	r7, #12
 80213dc:	46bd      	mov	sp, r7
 80213de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213e2:	4770      	bx	lr

080213e4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80213e4:	b580      	push	{r7, lr}
 80213e6:	b082      	sub	sp, #8
 80213e8:	af00      	add	r7, sp, #0
 80213ea:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80213ec:	687b      	ldr	r3, [r7, #4]
 80213ee:	2201      	movs	r2, #1
 80213f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80213f4:	687b      	ldr	r3, [r7, #4]
 80213f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80213fa:	2b00      	cmp	r3, #0
 80213fc:	d009      	beq.n	8021412 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80213fe:	687b      	ldr	r3, [r7, #4]
 8021400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021404:	685b      	ldr	r3, [r3, #4]
 8021406:	687a      	ldr	r2, [r7, #4]
 8021408:	6852      	ldr	r2, [r2, #4]
 802140a:	b2d2      	uxtb	r2, r2
 802140c:	4611      	mov	r1, r2
 802140e:	6878      	ldr	r0, [r7, #4]
 8021410:	4798      	blx	r3
  }

  return USBD_OK;
 8021412:	2300      	movs	r3, #0
}
 8021414:	4618      	mov	r0, r3
 8021416:	3708      	adds	r7, #8
 8021418:	46bd      	mov	sp, r7
 802141a:	bd80      	pop	{r7, pc}

0802141c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 802141c:	b480      	push	{r7}
 802141e:	b087      	sub	sp, #28
 8021420:	af00      	add	r7, sp, #0
 8021422:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8021424:	687b      	ldr	r3, [r7, #4]
 8021426:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8021428:	697b      	ldr	r3, [r7, #20]
 802142a:	781b      	ldrb	r3, [r3, #0]
 802142c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 802142e:	697b      	ldr	r3, [r7, #20]
 8021430:	3301      	adds	r3, #1
 8021432:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8021434:	697b      	ldr	r3, [r7, #20]
 8021436:	781b      	ldrb	r3, [r3, #0]
 8021438:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 802143a:	8a3b      	ldrh	r3, [r7, #16]
 802143c:	021b      	lsls	r3, r3, #8
 802143e:	b21a      	sxth	r2, r3
 8021440:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8021444:	4313      	orrs	r3, r2
 8021446:	b21b      	sxth	r3, r3
 8021448:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 802144a:	89fb      	ldrh	r3, [r7, #14]
}
 802144c:	4618      	mov	r0, r3
 802144e:	371c      	adds	r7, #28
 8021450:	46bd      	mov	sp, r7
 8021452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021456:	4770      	bx	lr

08021458 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021458:	b580      	push	{r7, lr}
 802145a:	b084      	sub	sp, #16
 802145c:	af00      	add	r7, sp, #0
 802145e:	6078      	str	r0, [r7, #4]
 8021460:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8021462:	2300      	movs	r3, #0
 8021464:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8021466:	683b      	ldr	r3, [r7, #0]
 8021468:	781b      	ldrb	r3, [r3, #0]
 802146a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 802146e:	2b40      	cmp	r3, #64	; 0x40
 8021470:	d005      	beq.n	802147e <USBD_StdDevReq+0x26>
 8021472:	2b40      	cmp	r3, #64	; 0x40
 8021474:	d853      	bhi.n	802151e <USBD_StdDevReq+0xc6>
 8021476:	2b00      	cmp	r3, #0
 8021478:	d00b      	beq.n	8021492 <USBD_StdDevReq+0x3a>
 802147a:	2b20      	cmp	r3, #32
 802147c:	d14f      	bne.n	802151e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 802147e:	687b      	ldr	r3, [r7, #4]
 8021480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021484:	689b      	ldr	r3, [r3, #8]
 8021486:	6839      	ldr	r1, [r7, #0]
 8021488:	6878      	ldr	r0, [r7, #4]
 802148a:	4798      	blx	r3
 802148c:	4603      	mov	r3, r0
 802148e:	73fb      	strb	r3, [r7, #15]
      break;
 8021490:	e04a      	b.n	8021528 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8021492:	683b      	ldr	r3, [r7, #0]
 8021494:	785b      	ldrb	r3, [r3, #1]
 8021496:	2b09      	cmp	r3, #9
 8021498:	d83b      	bhi.n	8021512 <USBD_StdDevReq+0xba>
 802149a:	a201      	add	r2, pc, #4	; (adr r2, 80214a0 <USBD_StdDevReq+0x48>)
 802149c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80214a0:	080214f5 	.word	0x080214f5
 80214a4:	08021509 	.word	0x08021509
 80214a8:	08021513 	.word	0x08021513
 80214ac:	080214ff 	.word	0x080214ff
 80214b0:	08021513 	.word	0x08021513
 80214b4:	080214d3 	.word	0x080214d3
 80214b8:	080214c9 	.word	0x080214c9
 80214bc:	08021513 	.word	0x08021513
 80214c0:	080214eb 	.word	0x080214eb
 80214c4:	080214dd 	.word	0x080214dd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80214c8:	6839      	ldr	r1, [r7, #0]
 80214ca:	6878      	ldr	r0, [r7, #4]
 80214cc:	f000 f9de 	bl	802188c <USBD_GetDescriptor>
          break;
 80214d0:	e024      	b.n	802151c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80214d2:	6839      	ldr	r1, [r7, #0]
 80214d4:	6878      	ldr	r0, [r7, #4]
 80214d6:	f000 fb6d 	bl	8021bb4 <USBD_SetAddress>
          break;
 80214da:	e01f      	b.n	802151c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80214dc:	6839      	ldr	r1, [r7, #0]
 80214de:	6878      	ldr	r0, [r7, #4]
 80214e0:	f000 fbac 	bl	8021c3c <USBD_SetConfig>
 80214e4:	4603      	mov	r3, r0
 80214e6:	73fb      	strb	r3, [r7, #15]
          break;
 80214e8:	e018      	b.n	802151c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80214ea:	6839      	ldr	r1, [r7, #0]
 80214ec:	6878      	ldr	r0, [r7, #4]
 80214ee:	f000 fc4b 	bl	8021d88 <USBD_GetConfig>
          break;
 80214f2:	e013      	b.n	802151c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80214f4:	6839      	ldr	r1, [r7, #0]
 80214f6:	6878      	ldr	r0, [r7, #4]
 80214f8:	f000 fc7c 	bl	8021df4 <USBD_GetStatus>
          break;
 80214fc:	e00e      	b.n	802151c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80214fe:	6839      	ldr	r1, [r7, #0]
 8021500:	6878      	ldr	r0, [r7, #4]
 8021502:	f000 fcab 	bl	8021e5c <USBD_SetFeature>
          break;
 8021506:	e009      	b.n	802151c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8021508:	6839      	ldr	r1, [r7, #0]
 802150a:	6878      	ldr	r0, [r7, #4]
 802150c:	f000 fcba 	bl	8021e84 <USBD_ClrFeature>
          break;
 8021510:	e004      	b.n	802151c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8021512:	6839      	ldr	r1, [r7, #0]
 8021514:	6878      	ldr	r0, [r7, #4]
 8021516:	f000 fd11 	bl	8021f3c <USBD_CtlError>
          break;
 802151a:	bf00      	nop
      }
      break;
 802151c:	e004      	b.n	8021528 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 802151e:	6839      	ldr	r1, [r7, #0]
 8021520:	6878      	ldr	r0, [r7, #4]
 8021522:	f000 fd0b 	bl	8021f3c <USBD_CtlError>
      break;
 8021526:	bf00      	nop
  }

  return ret;
 8021528:	7bfb      	ldrb	r3, [r7, #15]
}
 802152a:	4618      	mov	r0, r3
 802152c:	3710      	adds	r7, #16
 802152e:	46bd      	mov	sp, r7
 8021530:	bd80      	pop	{r7, pc}
 8021532:	bf00      	nop

08021534 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021534:	b580      	push	{r7, lr}
 8021536:	b084      	sub	sp, #16
 8021538:	af00      	add	r7, sp, #0
 802153a:	6078      	str	r0, [r7, #4]
 802153c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 802153e:	2300      	movs	r3, #0
 8021540:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8021542:	683b      	ldr	r3, [r7, #0]
 8021544:	781b      	ldrb	r3, [r3, #0]
 8021546:	f003 0360 	and.w	r3, r3, #96	; 0x60
 802154a:	2b40      	cmp	r3, #64	; 0x40
 802154c:	d005      	beq.n	802155a <USBD_StdItfReq+0x26>
 802154e:	2b40      	cmp	r3, #64	; 0x40
 8021550:	d82f      	bhi.n	80215b2 <USBD_StdItfReq+0x7e>
 8021552:	2b00      	cmp	r3, #0
 8021554:	d001      	beq.n	802155a <USBD_StdItfReq+0x26>
 8021556:	2b20      	cmp	r3, #32
 8021558:	d12b      	bne.n	80215b2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 802155a:	687b      	ldr	r3, [r7, #4]
 802155c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021560:	b2db      	uxtb	r3, r3
 8021562:	3b01      	subs	r3, #1
 8021564:	2b02      	cmp	r3, #2
 8021566:	d81d      	bhi.n	80215a4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8021568:	683b      	ldr	r3, [r7, #0]
 802156a:	889b      	ldrh	r3, [r3, #4]
 802156c:	b2db      	uxtb	r3, r3
 802156e:	2b01      	cmp	r3, #1
 8021570:	d813      	bhi.n	802159a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8021572:	687b      	ldr	r3, [r7, #4]
 8021574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021578:	689b      	ldr	r3, [r3, #8]
 802157a:	6839      	ldr	r1, [r7, #0]
 802157c:	6878      	ldr	r0, [r7, #4]
 802157e:	4798      	blx	r3
 8021580:	4603      	mov	r3, r0
 8021582:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8021584:	683b      	ldr	r3, [r7, #0]
 8021586:	88db      	ldrh	r3, [r3, #6]
 8021588:	2b00      	cmp	r3, #0
 802158a:	d110      	bne.n	80215ae <USBD_StdItfReq+0x7a>
 802158c:	7bfb      	ldrb	r3, [r7, #15]
 802158e:	2b00      	cmp	r3, #0
 8021590:	d10d      	bne.n	80215ae <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8021592:	6878      	ldr	r0, [r7, #4]
 8021594:	f000 fd80 	bl	8022098 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8021598:	e009      	b.n	80215ae <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 802159a:	6839      	ldr	r1, [r7, #0]
 802159c:	6878      	ldr	r0, [r7, #4]
 802159e:	f000 fccd 	bl	8021f3c <USBD_CtlError>
          break;
 80215a2:	e004      	b.n	80215ae <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80215a4:	6839      	ldr	r1, [r7, #0]
 80215a6:	6878      	ldr	r0, [r7, #4]
 80215a8:	f000 fcc8 	bl	8021f3c <USBD_CtlError>
          break;
 80215ac:	e000      	b.n	80215b0 <USBD_StdItfReq+0x7c>
          break;
 80215ae:	bf00      	nop
      }
      break;
 80215b0:	e004      	b.n	80215bc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80215b2:	6839      	ldr	r1, [r7, #0]
 80215b4:	6878      	ldr	r0, [r7, #4]
 80215b6:	f000 fcc1 	bl	8021f3c <USBD_CtlError>
      break;
 80215ba:	bf00      	nop
  }

  return ret;
 80215bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80215be:	4618      	mov	r0, r3
 80215c0:	3710      	adds	r7, #16
 80215c2:	46bd      	mov	sp, r7
 80215c4:	bd80      	pop	{r7, pc}

080215c6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80215c6:	b580      	push	{r7, lr}
 80215c8:	b084      	sub	sp, #16
 80215ca:	af00      	add	r7, sp, #0
 80215cc:	6078      	str	r0, [r7, #4]
 80215ce:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80215d0:	2300      	movs	r3, #0
 80215d2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80215d4:	683b      	ldr	r3, [r7, #0]
 80215d6:	889b      	ldrh	r3, [r3, #4]
 80215d8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80215da:	683b      	ldr	r3, [r7, #0]
 80215dc:	781b      	ldrb	r3, [r3, #0]
 80215de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80215e2:	2b40      	cmp	r3, #64	; 0x40
 80215e4:	d007      	beq.n	80215f6 <USBD_StdEPReq+0x30>
 80215e6:	2b40      	cmp	r3, #64	; 0x40
 80215e8:	f200 8145 	bhi.w	8021876 <USBD_StdEPReq+0x2b0>
 80215ec:	2b00      	cmp	r3, #0
 80215ee:	d00c      	beq.n	802160a <USBD_StdEPReq+0x44>
 80215f0:	2b20      	cmp	r3, #32
 80215f2:	f040 8140 	bne.w	8021876 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80215f6:	687b      	ldr	r3, [r7, #4]
 80215f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80215fc:	689b      	ldr	r3, [r3, #8]
 80215fe:	6839      	ldr	r1, [r7, #0]
 8021600:	6878      	ldr	r0, [r7, #4]
 8021602:	4798      	blx	r3
 8021604:	4603      	mov	r3, r0
 8021606:	73fb      	strb	r3, [r7, #15]
      break;
 8021608:	e13a      	b.n	8021880 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 802160a:	683b      	ldr	r3, [r7, #0]
 802160c:	785b      	ldrb	r3, [r3, #1]
 802160e:	2b03      	cmp	r3, #3
 8021610:	d007      	beq.n	8021622 <USBD_StdEPReq+0x5c>
 8021612:	2b03      	cmp	r3, #3
 8021614:	f300 8129 	bgt.w	802186a <USBD_StdEPReq+0x2a4>
 8021618:	2b00      	cmp	r3, #0
 802161a:	d07f      	beq.n	802171c <USBD_StdEPReq+0x156>
 802161c:	2b01      	cmp	r3, #1
 802161e:	d03c      	beq.n	802169a <USBD_StdEPReq+0xd4>
 8021620:	e123      	b.n	802186a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8021622:	687b      	ldr	r3, [r7, #4]
 8021624:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021628:	b2db      	uxtb	r3, r3
 802162a:	2b02      	cmp	r3, #2
 802162c:	d002      	beq.n	8021634 <USBD_StdEPReq+0x6e>
 802162e:	2b03      	cmp	r3, #3
 8021630:	d016      	beq.n	8021660 <USBD_StdEPReq+0x9a>
 8021632:	e02c      	b.n	802168e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8021634:	7bbb      	ldrb	r3, [r7, #14]
 8021636:	2b00      	cmp	r3, #0
 8021638:	d00d      	beq.n	8021656 <USBD_StdEPReq+0x90>
 802163a:	7bbb      	ldrb	r3, [r7, #14]
 802163c:	2b80      	cmp	r3, #128	; 0x80
 802163e:	d00a      	beq.n	8021656 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8021640:	7bbb      	ldrb	r3, [r7, #14]
 8021642:	4619      	mov	r1, r3
 8021644:	6878      	ldr	r0, [r7, #4]
 8021646:	f001 f940 	bl	80228ca <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 802164a:	2180      	movs	r1, #128	; 0x80
 802164c:	6878      	ldr	r0, [r7, #4]
 802164e:	f001 f93c 	bl	80228ca <USBD_LL_StallEP>
 8021652:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8021654:	e020      	b.n	8021698 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8021656:	6839      	ldr	r1, [r7, #0]
 8021658:	6878      	ldr	r0, [r7, #4]
 802165a:	f000 fc6f 	bl	8021f3c <USBD_CtlError>
              break;
 802165e:	e01b      	b.n	8021698 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8021660:	683b      	ldr	r3, [r7, #0]
 8021662:	885b      	ldrh	r3, [r3, #2]
 8021664:	2b00      	cmp	r3, #0
 8021666:	d10e      	bne.n	8021686 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8021668:	7bbb      	ldrb	r3, [r7, #14]
 802166a:	2b00      	cmp	r3, #0
 802166c:	d00b      	beq.n	8021686 <USBD_StdEPReq+0xc0>
 802166e:	7bbb      	ldrb	r3, [r7, #14]
 8021670:	2b80      	cmp	r3, #128	; 0x80
 8021672:	d008      	beq.n	8021686 <USBD_StdEPReq+0xc0>
 8021674:	683b      	ldr	r3, [r7, #0]
 8021676:	88db      	ldrh	r3, [r3, #6]
 8021678:	2b00      	cmp	r3, #0
 802167a:	d104      	bne.n	8021686 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 802167c:	7bbb      	ldrb	r3, [r7, #14]
 802167e:	4619      	mov	r1, r3
 8021680:	6878      	ldr	r0, [r7, #4]
 8021682:	f001 f922 	bl	80228ca <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8021686:	6878      	ldr	r0, [r7, #4]
 8021688:	f000 fd06 	bl	8022098 <USBD_CtlSendStatus>

              break;
 802168c:	e004      	b.n	8021698 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 802168e:	6839      	ldr	r1, [r7, #0]
 8021690:	6878      	ldr	r0, [r7, #4]
 8021692:	f000 fc53 	bl	8021f3c <USBD_CtlError>
              break;
 8021696:	bf00      	nop
          }
          break;
 8021698:	e0ec      	b.n	8021874 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 802169a:	687b      	ldr	r3, [r7, #4]
 802169c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80216a0:	b2db      	uxtb	r3, r3
 80216a2:	2b02      	cmp	r3, #2
 80216a4:	d002      	beq.n	80216ac <USBD_StdEPReq+0xe6>
 80216a6:	2b03      	cmp	r3, #3
 80216a8:	d016      	beq.n	80216d8 <USBD_StdEPReq+0x112>
 80216aa:	e030      	b.n	802170e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80216ac:	7bbb      	ldrb	r3, [r7, #14]
 80216ae:	2b00      	cmp	r3, #0
 80216b0:	d00d      	beq.n	80216ce <USBD_StdEPReq+0x108>
 80216b2:	7bbb      	ldrb	r3, [r7, #14]
 80216b4:	2b80      	cmp	r3, #128	; 0x80
 80216b6:	d00a      	beq.n	80216ce <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80216b8:	7bbb      	ldrb	r3, [r7, #14]
 80216ba:	4619      	mov	r1, r3
 80216bc:	6878      	ldr	r0, [r7, #4]
 80216be:	f001 f904 	bl	80228ca <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80216c2:	2180      	movs	r1, #128	; 0x80
 80216c4:	6878      	ldr	r0, [r7, #4]
 80216c6:	f001 f900 	bl	80228ca <USBD_LL_StallEP>
 80216ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80216cc:	e025      	b.n	802171a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80216ce:	6839      	ldr	r1, [r7, #0]
 80216d0:	6878      	ldr	r0, [r7, #4]
 80216d2:	f000 fc33 	bl	8021f3c <USBD_CtlError>
              break;
 80216d6:	e020      	b.n	802171a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80216d8:	683b      	ldr	r3, [r7, #0]
 80216da:	885b      	ldrh	r3, [r3, #2]
 80216dc:	2b00      	cmp	r3, #0
 80216de:	d11b      	bne.n	8021718 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80216e0:	7bbb      	ldrb	r3, [r7, #14]
 80216e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80216e6:	2b00      	cmp	r3, #0
 80216e8:	d004      	beq.n	80216f4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80216ea:	7bbb      	ldrb	r3, [r7, #14]
 80216ec:	4619      	mov	r1, r3
 80216ee:	6878      	ldr	r0, [r7, #4]
 80216f0:	f001 f90a 	bl	8022908 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80216f4:	6878      	ldr	r0, [r7, #4]
 80216f6:	f000 fccf 	bl	8022098 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80216fa:	687b      	ldr	r3, [r7, #4]
 80216fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021700:	689b      	ldr	r3, [r3, #8]
 8021702:	6839      	ldr	r1, [r7, #0]
 8021704:	6878      	ldr	r0, [r7, #4]
 8021706:	4798      	blx	r3
 8021708:	4603      	mov	r3, r0
 802170a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 802170c:	e004      	b.n	8021718 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 802170e:	6839      	ldr	r1, [r7, #0]
 8021710:	6878      	ldr	r0, [r7, #4]
 8021712:	f000 fc13 	bl	8021f3c <USBD_CtlError>
              break;
 8021716:	e000      	b.n	802171a <USBD_StdEPReq+0x154>
              break;
 8021718:	bf00      	nop
          }
          break;
 802171a:	e0ab      	b.n	8021874 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 802171c:	687b      	ldr	r3, [r7, #4]
 802171e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021722:	b2db      	uxtb	r3, r3
 8021724:	2b02      	cmp	r3, #2
 8021726:	d002      	beq.n	802172e <USBD_StdEPReq+0x168>
 8021728:	2b03      	cmp	r3, #3
 802172a:	d032      	beq.n	8021792 <USBD_StdEPReq+0x1cc>
 802172c:	e097      	b.n	802185e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 802172e:	7bbb      	ldrb	r3, [r7, #14]
 8021730:	2b00      	cmp	r3, #0
 8021732:	d007      	beq.n	8021744 <USBD_StdEPReq+0x17e>
 8021734:	7bbb      	ldrb	r3, [r7, #14]
 8021736:	2b80      	cmp	r3, #128	; 0x80
 8021738:	d004      	beq.n	8021744 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 802173a:	6839      	ldr	r1, [r7, #0]
 802173c:	6878      	ldr	r0, [r7, #4]
 802173e:	f000 fbfd 	bl	8021f3c <USBD_CtlError>
                break;
 8021742:	e091      	b.n	8021868 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8021744:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8021748:	2b00      	cmp	r3, #0
 802174a:	da0b      	bge.n	8021764 <USBD_StdEPReq+0x19e>
 802174c:	7bbb      	ldrb	r3, [r7, #14]
 802174e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8021752:	4613      	mov	r3, r2
 8021754:	009b      	lsls	r3, r3, #2
 8021756:	4413      	add	r3, r2
 8021758:	009b      	lsls	r3, r3, #2
 802175a:	3310      	adds	r3, #16
 802175c:	687a      	ldr	r2, [r7, #4]
 802175e:	4413      	add	r3, r2
 8021760:	3304      	adds	r3, #4
 8021762:	e00b      	b.n	802177c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8021764:	7bbb      	ldrb	r3, [r7, #14]
 8021766:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802176a:	4613      	mov	r3, r2
 802176c:	009b      	lsls	r3, r3, #2
 802176e:	4413      	add	r3, r2
 8021770:	009b      	lsls	r3, r3, #2
 8021772:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8021776:	687a      	ldr	r2, [r7, #4]
 8021778:	4413      	add	r3, r2
 802177a:	3304      	adds	r3, #4
 802177c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 802177e:	68bb      	ldr	r3, [r7, #8]
 8021780:	2200      	movs	r2, #0
 8021782:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8021784:	68bb      	ldr	r3, [r7, #8]
 8021786:	2202      	movs	r2, #2
 8021788:	4619      	mov	r1, r3
 802178a:	6878      	ldr	r0, [r7, #4]
 802178c:	f000 fc47 	bl	802201e <USBD_CtlSendData>
              break;
 8021790:	e06a      	b.n	8021868 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8021792:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8021796:	2b00      	cmp	r3, #0
 8021798:	da11      	bge.n	80217be <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 802179a:	7bbb      	ldrb	r3, [r7, #14]
 802179c:	f003 020f 	and.w	r2, r3, #15
 80217a0:	6879      	ldr	r1, [r7, #4]
 80217a2:	4613      	mov	r3, r2
 80217a4:	009b      	lsls	r3, r3, #2
 80217a6:	4413      	add	r3, r2
 80217a8:	009b      	lsls	r3, r3, #2
 80217aa:	440b      	add	r3, r1
 80217ac:	3324      	adds	r3, #36	; 0x24
 80217ae:	881b      	ldrh	r3, [r3, #0]
 80217b0:	2b00      	cmp	r3, #0
 80217b2:	d117      	bne.n	80217e4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80217b4:	6839      	ldr	r1, [r7, #0]
 80217b6:	6878      	ldr	r0, [r7, #4]
 80217b8:	f000 fbc0 	bl	8021f3c <USBD_CtlError>
                  break;
 80217bc:	e054      	b.n	8021868 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80217be:	7bbb      	ldrb	r3, [r7, #14]
 80217c0:	f003 020f 	and.w	r2, r3, #15
 80217c4:	6879      	ldr	r1, [r7, #4]
 80217c6:	4613      	mov	r3, r2
 80217c8:	009b      	lsls	r3, r3, #2
 80217ca:	4413      	add	r3, r2
 80217cc:	009b      	lsls	r3, r3, #2
 80217ce:	440b      	add	r3, r1
 80217d0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80217d4:	881b      	ldrh	r3, [r3, #0]
 80217d6:	2b00      	cmp	r3, #0
 80217d8:	d104      	bne.n	80217e4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80217da:	6839      	ldr	r1, [r7, #0]
 80217dc:	6878      	ldr	r0, [r7, #4]
 80217de:	f000 fbad 	bl	8021f3c <USBD_CtlError>
                  break;
 80217e2:	e041      	b.n	8021868 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80217e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80217e8:	2b00      	cmp	r3, #0
 80217ea:	da0b      	bge.n	8021804 <USBD_StdEPReq+0x23e>
 80217ec:	7bbb      	ldrb	r3, [r7, #14]
 80217ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80217f2:	4613      	mov	r3, r2
 80217f4:	009b      	lsls	r3, r3, #2
 80217f6:	4413      	add	r3, r2
 80217f8:	009b      	lsls	r3, r3, #2
 80217fa:	3310      	adds	r3, #16
 80217fc:	687a      	ldr	r2, [r7, #4]
 80217fe:	4413      	add	r3, r2
 8021800:	3304      	adds	r3, #4
 8021802:	e00b      	b.n	802181c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8021804:	7bbb      	ldrb	r3, [r7, #14]
 8021806:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802180a:	4613      	mov	r3, r2
 802180c:	009b      	lsls	r3, r3, #2
 802180e:	4413      	add	r3, r2
 8021810:	009b      	lsls	r3, r3, #2
 8021812:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8021816:	687a      	ldr	r2, [r7, #4]
 8021818:	4413      	add	r3, r2
 802181a:	3304      	adds	r3, #4
 802181c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 802181e:	7bbb      	ldrb	r3, [r7, #14]
 8021820:	2b00      	cmp	r3, #0
 8021822:	d002      	beq.n	802182a <USBD_StdEPReq+0x264>
 8021824:	7bbb      	ldrb	r3, [r7, #14]
 8021826:	2b80      	cmp	r3, #128	; 0x80
 8021828:	d103      	bne.n	8021832 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 802182a:	68bb      	ldr	r3, [r7, #8]
 802182c:	2200      	movs	r2, #0
 802182e:	601a      	str	r2, [r3, #0]
 8021830:	e00e      	b.n	8021850 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8021832:	7bbb      	ldrb	r3, [r7, #14]
 8021834:	4619      	mov	r1, r3
 8021836:	6878      	ldr	r0, [r7, #4]
 8021838:	f001 f885 	bl	8022946 <USBD_LL_IsStallEP>
 802183c:	4603      	mov	r3, r0
 802183e:	2b00      	cmp	r3, #0
 8021840:	d003      	beq.n	802184a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8021842:	68bb      	ldr	r3, [r7, #8]
 8021844:	2201      	movs	r2, #1
 8021846:	601a      	str	r2, [r3, #0]
 8021848:	e002      	b.n	8021850 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 802184a:	68bb      	ldr	r3, [r7, #8]
 802184c:	2200      	movs	r2, #0
 802184e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8021850:	68bb      	ldr	r3, [r7, #8]
 8021852:	2202      	movs	r2, #2
 8021854:	4619      	mov	r1, r3
 8021856:	6878      	ldr	r0, [r7, #4]
 8021858:	f000 fbe1 	bl	802201e <USBD_CtlSendData>
              break;
 802185c:	e004      	b.n	8021868 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 802185e:	6839      	ldr	r1, [r7, #0]
 8021860:	6878      	ldr	r0, [r7, #4]
 8021862:	f000 fb6b 	bl	8021f3c <USBD_CtlError>
              break;
 8021866:	bf00      	nop
          }
          break;
 8021868:	e004      	b.n	8021874 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 802186a:	6839      	ldr	r1, [r7, #0]
 802186c:	6878      	ldr	r0, [r7, #4]
 802186e:	f000 fb65 	bl	8021f3c <USBD_CtlError>
          break;
 8021872:	bf00      	nop
      }
      break;
 8021874:	e004      	b.n	8021880 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8021876:	6839      	ldr	r1, [r7, #0]
 8021878:	6878      	ldr	r0, [r7, #4]
 802187a:	f000 fb5f 	bl	8021f3c <USBD_CtlError>
      break;
 802187e:	bf00      	nop
  }

  return ret;
 8021880:	7bfb      	ldrb	r3, [r7, #15]
}
 8021882:	4618      	mov	r0, r3
 8021884:	3710      	adds	r7, #16
 8021886:	46bd      	mov	sp, r7
 8021888:	bd80      	pop	{r7, pc}
	...

0802188c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802188c:	b580      	push	{r7, lr}
 802188e:	b084      	sub	sp, #16
 8021890:	af00      	add	r7, sp, #0
 8021892:	6078      	str	r0, [r7, #4]
 8021894:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8021896:	2300      	movs	r3, #0
 8021898:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 802189a:	2300      	movs	r3, #0
 802189c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 802189e:	2300      	movs	r3, #0
 80218a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80218a2:	683b      	ldr	r3, [r7, #0]
 80218a4:	885b      	ldrh	r3, [r3, #2]
 80218a6:	0a1b      	lsrs	r3, r3, #8
 80218a8:	b29b      	uxth	r3, r3
 80218aa:	3b01      	subs	r3, #1
 80218ac:	2b0e      	cmp	r3, #14
 80218ae:	f200 8152 	bhi.w	8021b56 <USBD_GetDescriptor+0x2ca>
 80218b2:	a201      	add	r2, pc, #4	; (adr r2, 80218b8 <USBD_GetDescriptor+0x2c>)
 80218b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80218b8:	08021929 	.word	0x08021929
 80218bc:	08021941 	.word	0x08021941
 80218c0:	08021981 	.word	0x08021981
 80218c4:	08021b57 	.word	0x08021b57
 80218c8:	08021b57 	.word	0x08021b57
 80218cc:	08021af7 	.word	0x08021af7
 80218d0:	08021b23 	.word	0x08021b23
 80218d4:	08021b57 	.word	0x08021b57
 80218d8:	08021b57 	.word	0x08021b57
 80218dc:	08021b57 	.word	0x08021b57
 80218e0:	08021b57 	.word	0x08021b57
 80218e4:	08021b57 	.word	0x08021b57
 80218e8:	08021b57 	.word	0x08021b57
 80218ec:	08021b57 	.word	0x08021b57
 80218f0:	080218f5 	.word	0x080218f5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80218f4:	687b      	ldr	r3, [r7, #4]
 80218f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80218fa:	69db      	ldr	r3, [r3, #28]
 80218fc:	2b00      	cmp	r3, #0
 80218fe:	d00b      	beq.n	8021918 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8021900:	687b      	ldr	r3, [r7, #4]
 8021902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021906:	69db      	ldr	r3, [r3, #28]
 8021908:	687a      	ldr	r2, [r7, #4]
 802190a:	7c12      	ldrb	r2, [r2, #16]
 802190c:	f107 0108 	add.w	r1, r7, #8
 8021910:	4610      	mov	r0, r2
 8021912:	4798      	blx	r3
 8021914:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8021916:	e126      	b.n	8021b66 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8021918:	6839      	ldr	r1, [r7, #0]
 802191a:	6878      	ldr	r0, [r7, #4]
 802191c:	f000 fb0e 	bl	8021f3c <USBD_CtlError>
        err++;
 8021920:	7afb      	ldrb	r3, [r7, #11]
 8021922:	3301      	adds	r3, #1
 8021924:	72fb      	strb	r3, [r7, #11]
      break;
 8021926:	e11e      	b.n	8021b66 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8021928:	687b      	ldr	r3, [r7, #4]
 802192a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802192e:	681b      	ldr	r3, [r3, #0]
 8021930:	687a      	ldr	r2, [r7, #4]
 8021932:	7c12      	ldrb	r2, [r2, #16]
 8021934:	f107 0108 	add.w	r1, r7, #8
 8021938:	4610      	mov	r0, r2
 802193a:	4798      	blx	r3
 802193c:	60f8      	str	r0, [r7, #12]
      break;
 802193e:	e112      	b.n	8021b66 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021940:	687b      	ldr	r3, [r7, #4]
 8021942:	7c1b      	ldrb	r3, [r3, #16]
 8021944:	2b00      	cmp	r3, #0
 8021946:	d10d      	bne.n	8021964 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8021948:	687b      	ldr	r3, [r7, #4]
 802194a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802194e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021950:	f107 0208 	add.w	r2, r7, #8
 8021954:	4610      	mov	r0, r2
 8021956:	4798      	blx	r3
 8021958:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 802195a:	68fb      	ldr	r3, [r7, #12]
 802195c:	3301      	adds	r3, #1
 802195e:	2202      	movs	r2, #2
 8021960:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8021962:	e100      	b.n	8021b66 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8021964:	687b      	ldr	r3, [r7, #4]
 8021966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802196a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802196c:	f107 0208 	add.w	r2, r7, #8
 8021970:	4610      	mov	r0, r2
 8021972:	4798      	blx	r3
 8021974:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8021976:	68fb      	ldr	r3, [r7, #12]
 8021978:	3301      	adds	r3, #1
 802197a:	2202      	movs	r2, #2
 802197c:	701a      	strb	r2, [r3, #0]
      break;
 802197e:	e0f2      	b.n	8021b66 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8021980:	683b      	ldr	r3, [r7, #0]
 8021982:	885b      	ldrh	r3, [r3, #2]
 8021984:	b2db      	uxtb	r3, r3
 8021986:	2b05      	cmp	r3, #5
 8021988:	f200 80ac 	bhi.w	8021ae4 <USBD_GetDescriptor+0x258>
 802198c:	a201      	add	r2, pc, #4	; (adr r2, 8021994 <USBD_GetDescriptor+0x108>)
 802198e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021992:	bf00      	nop
 8021994:	080219ad 	.word	0x080219ad
 8021998:	080219e1 	.word	0x080219e1
 802199c:	08021a15 	.word	0x08021a15
 80219a0:	08021a49 	.word	0x08021a49
 80219a4:	08021a7d 	.word	0x08021a7d
 80219a8:	08021ab1 	.word	0x08021ab1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80219ac:	687b      	ldr	r3, [r7, #4]
 80219ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80219b2:	685b      	ldr	r3, [r3, #4]
 80219b4:	2b00      	cmp	r3, #0
 80219b6:	d00b      	beq.n	80219d0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80219b8:	687b      	ldr	r3, [r7, #4]
 80219ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80219be:	685b      	ldr	r3, [r3, #4]
 80219c0:	687a      	ldr	r2, [r7, #4]
 80219c2:	7c12      	ldrb	r2, [r2, #16]
 80219c4:	f107 0108 	add.w	r1, r7, #8
 80219c8:	4610      	mov	r0, r2
 80219ca:	4798      	blx	r3
 80219cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80219ce:	e091      	b.n	8021af4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80219d0:	6839      	ldr	r1, [r7, #0]
 80219d2:	6878      	ldr	r0, [r7, #4]
 80219d4:	f000 fab2 	bl	8021f3c <USBD_CtlError>
            err++;
 80219d8:	7afb      	ldrb	r3, [r7, #11]
 80219da:	3301      	adds	r3, #1
 80219dc:	72fb      	strb	r3, [r7, #11]
          break;
 80219de:	e089      	b.n	8021af4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80219e0:	687b      	ldr	r3, [r7, #4]
 80219e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80219e6:	689b      	ldr	r3, [r3, #8]
 80219e8:	2b00      	cmp	r3, #0
 80219ea:	d00b      	beq.n	8021a04 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80219ec:	687b      	ldr	r3, [r7, #4]
 80219ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80219f2:	689b      	ldr	r3, [r3, #8]
 80219f4:	687a      	ldr	r2, [r7, #4]
 80219f6:	7c12      	ldrb	r2, [r2, #16]
 80219f8:	f107 0108 	add.w	r1, r7, #8
 80219fc:	4610      	mov	r0, r2
 80219fe:	4798      	blx	r3
 8021a00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021a02:	e077      	b.n	8021af4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021a04:	6839      	ldr	r1, [r7, #0]
 8021a06:	6878      	ldr	r0, [r7, #4]
 8021a08:	f000 fa98 	bl	8021f3c <USBD_CtlError>
            err++;
 8021a0c:	7afb      	ldrb	r3, [r7, #11]
 8021a0e:	3301      	adds	r3, #1
 8021a10:	72fb      	strb	r3, [r7, #11]
          break;
 8021a12:	e06f      	b.n	8021af4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8021a14:	687b      	ldr	r3, [r7, #4]
 8021a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021a1a:	68db      	ldr	r3, [r3, #12]
 8021a1c:	2b00      	cmp	r3, #0
 8021a1e:	d00b      	beq.n	8021a38 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8021a20:	687b      	ldr	r3, [r7, #4]
 8021a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021a26:	68db      	ldr	r3, [r3, #12]
 8021a28:	687a      	ldr	r2, [r7, #4]
 8021a2a:	7c12      	ldrb	r2, [r2, #16]
 8021a2c:	f107 0108 	add.w	r1, r7, #8
 8021a30:	4610      	mov	r0, r2
 8021a32:	4798      	blx	r3
 8021a34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021a36:	e05d      	b.n	8021af4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021a38:	6839      	ldr	r1, [r7, #0]
 8021a3a:	6878      	ldr	r0, [r7, #4]
 8021a3c:	f000 fa7e 	bl	8021f3c <USBD_CtlError>
            err++;
 8021a40:	7afb      	ldrb	r3, [r7, #11]
 8021a42:	3301      	adds	r3, #1
 8021a44:	72fb      	strb	r3, [r7, #11]
          break;
 8021a46:	e055      	b.n	8021af4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8021a48:	687b      	ldr	r3, [r7, #4]
 8021a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021a4e:	691b      	ldr	r3, [r3, #16]
 8021a50:	2b00      	cmp	r3, #0
 8021a52:	d00b      	beq.n	8021a6c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8021a54:	687b      	ldr	r3, [r7, #4]
 8021a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021a5a:	691b      	ldr	r3, [r3, #16]
 8021a5c:	687a      	ldr	r2, [r7, #4]
 8021a5e:	7c12      	ldrb	r2, [r2, #16]
 8021a60:	f107 0108 	add.w	r1, r7, #8
 8021a64:	4610      	mov	r0, r2
 8021a66:	4798      	blx	r3
 8021a68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021a6a:	e043      	b.n	8021af4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021a6c:	6839      	ldr	r1, [r7, #0]
 8021a6e:	6878      	ldr	r0, [r7, #4]
 8021a70:	f000 fa64 	bl	8021f3c <USBD_CtlError>
            err++;
 8021a74:	7afb      	ldrb	r3, [r7, #11]
 8021a76:	3301      	adds	r3, #1
 8021a78:	72fb      	strb	r3, [r7, #11]
          break;
 8021a7a:	e03b      	b.n	8021af4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8021a7c:	687b      	ldr	r3, [r7, #4]
 8021a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021a82:	695b      	ldr	r3, [r3, #20]
 8021a84:	2b00      	cmp	r3, #0
 8021a86:	d00b      	beq.n	8021aa0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8021a88:	687b      	ldr	r3, [r7, #4]
 8021a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021a8e:	695b      	ldr	r3, [r3, #20]
 8021a90:	687a      	ldr	r2, [r7, #4]
 8021a92:	7c12      	ldrb	r2, [r2, #16]
 8021a94:	f107 0108 	add.w	r1, r7, #8
 8021a98:	4610      	mov	r0, r2
 8021a9a:	4798      	blx	r3
 8021a9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021a9e:	e029      	b.n	8021af4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021aa0:	6839      	ldr	r1, [r7, #0]
 8021aa2:	6878      	ldr	r0, [r7, #4]
 8021aa4:	f000 fa4a 	bl	8021f3c <USBD_CtlError>
            err++;
 8021aa8:	7afb      	ldrb	r3, [r7, #11]
 8021aaa:	3301      	adds	r3, #1
 8021aac:	72fb      	strb	r3, [r7, #11]
          break;
 8021aae:	e021      	b.n	8021af4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8021ab0:	687b      	ldr	r3, [r7, #4]
 8021ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021ab6:	699b      	ldr	r3, [r3, #24]
 8021ab8:	2b00      	cmp	r3, #0
 8021aba:	d00b      	beq.n	8021ad4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8021abc:	687b      	ldr	r3, [r7, #4]
 8021abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021ac2:	699b      	ldr	r3, [r3, #24]
 8021ac4:	687a      	ldr	r2, [r7, #4]
 8021ac6:	7c12      	ldrb	r2, [r2, #16]
 8021ac8:	f107 0108 	add.w	r1, r7, #8
 8021acc:	4610      	mov	r0, r2
 8021ace:	4798      	blx	r3
 8021ad0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021ad2:	e00f      	b.n	8021af4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021ad4:	6839      	ldr	r1, [r7, #0]
 8021ad6:	6878      	ldr	r0, [r7, #4]
 8021ad8:	f000 fa30 	bl	8021f3c <USBD_CtlError>
            err++;
 8021adc:	7afb      	ldrb	r3, [r7, #11]
 8021ade:	3301      	adds	r3, #1
 8021ae0:	72fb      	strb	r3, [r7, #11]
          break;
 8021ae2:	e007      	b.n	8021af4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8021ae4:	6839      	ldr	r1, [r7, #0]
 8021ae6:	6878      	ldr	r0, [r7, #4]
 8021ae8:	f000 fa28 	bl	8021f3c <USBD_CtlError>
          err++;
 8021aec:	7afb      	ldrb	r3, [r7, #11]
 8021aee:	3301      	adds	r3, #1
 8021af0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8021af2:	bf00      	nop
      }
      break;
 8021af4:	e037      	b.n	8021b66 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021af6:	687b      	ldr	r3, [r7, #4]
 8021af8:	7c1b      	ldrb	r3, [r3, #16]
 8021afa:	2b00      	cmp	r3, #0
 8021afc:	d109      	bne.n	8021b12 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8021afe:	687b      	ldr	r3, [r7, #4]
 8021b00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021b06:	f107 0208 	add.w	r2, r7, #8
 8021b0a:	4610      	mov	r0, r2
 8021b0c:	4798      	blx	r3
 8021b0e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8021b10:	e029      	b.n	8021b66 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8021b12:	6839      	ldr	r1, [r7, #0]
 8021b14:	6878      	ldr	r0, [r7, #4]
 8021b16:	f000 fa11 	bl	8021f3c <USBD_CtlError>
        err++;
 8021b1a:	7afb      	ldrb	r3, [r7, #11]
 8021b1c:	3301      	adds	r3, #1
 8021b1e:	72fb      	strb	r3, [r7, #11]
      break;
 8021b20:	e021      	b.n	8021b66 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021b22:	687b      	ldr	r3, [r7, #4]
 8021b24:	7c1b      	ldrb	r3, [r3, #16]
 8021b26:	2b00      	cmp	r3, #0
 8021b28:	d10d      	bne.n	8021b46 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8021b2a:	687b      	ldr	r3, [r7, #4]
 8021b2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021b32:	f107 0208 	add.w	r2, r7, #8
 8021b36:	4610      	mov	r0, r2
 8021b38:	4798      	blx	r3
 8021b3a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8021b3c:	68fb      	ldr	r3, [r7, #12]
 8021b3e:	3301      	adds	r3, #1
 8021b40:	2207      	movs	r2, #7
 8021b42:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8021b44:	e00f      	b.n	8021b66 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8021b46:	6839      	ldr	r1, [r7, #0]
 8021b48:	6878      	ldr	r0, [r7, #4]
 8021b4a:	f000 f9f7 	bl	8021f3c <USBD_CtlError>
        err++;
 8021b4e:	7afb      	ldrb	r3, [r7, #11]
 8021b50:	3301      	adds	r3, #1
 8021b52:	72fb      	strb	r3, [r7, #11]
      break;
 8021b54:	e007      	b.n	8021b66 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8021b56:	6839      	ldr	r1, [r7, #0]
 8021b58:	6878      	ldr	r0, [r7, #4]
 8021b5a:	f000 f9ef 	bl	8021f3c <USBD_CtlError>
      err++;
 8021b5e:	7afb      	ldrb	r3, [r7, #11]
 8021b60:	3301      	adds	r3, #1
 8021b62:	72fb      	strb	r3, [r7, #11]
      break;
 8021b64:	bf00      	nop
  }

  if (err != 0U)
 8021b66:	7afb      	ldrb	r3, [r7, #11]
 8021b68:	2b00      	cmp	r3, #0
 8021b6a:	d11e      	bne.n	8021baa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8021b6c:	683b      	ldr	r3, [r7, #0]
 8021b6e:	88db      	ldrh	r3, [r3, #6]
 8021b70:	2b00      	cmp	r3, #0
 8021b72:	d016      	beq.n	8021ba2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8021b74:	893b      	ldrh	r3, [r7, #8]
 8021b76:	2b00      	cmp	r3, #0
 8021b78:	d00e      	beq.n	8021b98 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8021b7a:	683b      	ldr	r3, [r7, #0]
 8021b7c:	88da      	ldrh	r2, [r3, #6]
 8021b7e:	893b      	ldrh	r3, [r7, #8]
 8021b80:	4293      	cmp	r3, r2
 8021b82:	bf28      	it	cs
 8021b84:	4613      	movcs	r3, r2
 8021b86:	b29b      	uxth	r3, r3
 8021b88:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8021b8a:	893b      	ldrh	r3, [r7, #8]
 8021b8c:	461a      	mov	r2, r3
 8021b8e:	68f9      	ldr	r1, [r7, #12]
 8021b90:	6878      	ldr	r0, [r7, #4]
 8021b92:	f000 fa44 	bl	802201e <USBD_CtlSendData>
 8021b96:	e009      	b.n	8021bac <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8021b98:	6839      	ldr	r1, [r7, #0]
 8021b9a:	6878      	ldr	r0, [r7, #4]
 8021b9c:	f000 f9ce 	bl	8021f3c <USBD_CtlError>
 8021ba0:	e004      	b.n	8021bac <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8021ba2:	6878      	ldr	r0, [r7, #4]
 8021ba4:	f000 fa78 	bl	8022098 <USBD_CtlSendStatus>
 8021ba8:	e000      	b.n	8021bac <USBD_GetDescriptor+0x320>
    return;
 8021baa:	bf00      	nop
  }
}
 8021bac:	3710      	adds	r7, #16
 8021bae:	46bd      	mov	sp, r7
 8021bb0:	bd80      	pop	{r7, pc}
 8021bb2:	bf00      	nop

08021bb4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021bb4:	b580      	push	{r7, lr}
 8021bb6:	b084      	sub	sp, #16
 8021bb8:	af00      	add	r7, sp, #0
 8021bba:	6078      	str	r0, [r7, #4]
 8021bbc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8021bbe:	683b      	ldr	r3, [r7, #0]
 8021bc0:	889b      	ldrh	r3, [r3, #4]
 8021bc2:	2b00      	cmp	r3, #0
 8021bc4:	d131      	bne.n	8021c2a <USBD_SetAddress+0x76>
 8021bc6:	683b      	ldr	r3, [r7, #0]
 8021bc8:	88db      	ldrh	r3, [r3, #6]
 8021bca:	2b00      	cmp	r3, #0
 8021bcc:	d12d      	bne.n	8021c2a <USBD_SetAddress+0x76>
 8021bce:	683b      	ldr	r3, [r7, #0]
 8021bd0:	885b      	ldrh	r3, [r3, #2]
 8021bd2:	2b7f      	cmp	r3, #127	; 0x7f
 8021bd4:	d829      	bhi.n	8021c2a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8021bd6:	683b      	ldr	r3, [r7, #0]
 8021bd8:	885b      	ldrh	r3, [r3, #2]
 8021bda:	b2db      	uxtb	r3, r3
 8021bdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8021be0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021be2:	687b      	ldr	r3, [r7, #4]
 8021be4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021be8:	b2db      	uxtb	r3, r3
 8021bea:	2b03      	cmp	r3, #3
 8021bec:	d104      	bne.n	8021bf8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8021bee:	6839      	ldr	r1, [r7, #0]
 8021bf0:	6878      	ldr	r0, [r7, #4]
 8021bf2:	f000 f9a3 	bl	8021f3c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021bf6:	e01d      	b.n	8021c34 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8021bf8:	687b      	ldr	r3, [r7, #4]
 8021bfa:	7bfa      	ldrb	r2, [r7, #15]
 8021bfc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8021c00:	7bfb      	ldrb	r3, [r7, #15]
 8021c02:	4619      	mov	r1, r3
 8021c04:	6878      	ldr	r0, [r7, #4]
 8021c06:	f000 feca 	bl	802299e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8021c0a:	6878      	ldr	r0, [r7, #4]
 8021c0c:	f000 fa44 	bl	8022098 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8021c10:	7bfb      	ldrb	r3, [r7, #15]
 8021c12:	2b00      	cmp	r3, #0
 8021c14:	d004      	beq.n	8021c20 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8021c16:	687b      	ldr	r3, [r7, #4]
 8021c18:	2202      	movs	r2, #2
 8021c1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021c1e:	e009      	b.n	8021c34 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8021c20:	687b      	ldr	r3, [r7, #4]
 8021c22:	2201      	movs	r2, #1
 8021c24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021c28:	e004      	b.n	8021c34 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8021c2a:	6839      	ldr	r1, [r7, #0]
 8021c2c:	6878      	ldr	r0, [r7, #4]
 8021c2e:	f000 f985 	bl	8021f3c <USBD_CtlError>
  }
}
 8021c32:	bf00      	nop
 8021c34:	bf00      	nop
 8021c36:	3710      	adds	r7, #16
 8021c38:	46bd      	mov	sp, r7
 8021c3a:	bd80      	pop	{r7, pc}

08021c3c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021c3c:	b580      	push	{r7, lr}
 8021c3e:	b084      	sub	sp, #16
 8021c40:	af00      	add	r7, sp, #0
 8021c42:	6078      	str	r0, [r7, #4]
 8021c44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8021c46:	2300      	movs	r3, #0
 8021c48:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8021c4a:	683b      	ldr	r3, [r7, #0]
 8021c4c:	885b      	ldrh	r3, [r3, #2]
 8021c4e:	b2da      	uxtb	r2, r3
 8021c50:	4b4c      	ldr	r3, [pc, #304]	; (8021d84 <USBD_SetConfig+0x148>)
 8021c52:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8021c54:	4b4b      	ldr	r3, [pc, #300]	; (8021d84 <USBD_SetConfig+0x148>)
 8021c56:	781b      	ldrb	r3, [r3, #0]
 8021c58:	2b01      	cmp	r3, #1
 8021c5a:	d905      	bls.n	8021c68 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8021c5c:	6839      	ldr	r1, [r7, #0]
 8021c5e:	6878      	ldr	r0, [r7, #4]
 8021c60:	f000 f96c 	bl	8021f3c <USBD_CtlError>
    return USBD_FAIL;
 8021c64:	2303      	movs	r3, #3
 8021c66:	e088      	b.n	8021d7a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8021c68:	687b      	ldr	r3, [r7, #4]
 8021c6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021c6e:	b2db      	uxtb	r3, r3
 8021c70:	2b02      	cmp	r3, #2
 8021c72:	d002      	beq.n	8021c7a <USBD_SetConfig+0x3e>
 8021c74:	2b03      	cmp	r3, #3
 8021c76:	d025      	beq.n	8021cc4 <USBD_SetConfig+0x88>
 8021c78:	e071      	b.n	8021d5e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8021c7a:	4b42      	ldr	r3, [pc, #264]	; (8021d84 <USBD_SetConfig+0x148>)
 8021c7c:	781b      	ldrb	r3, [r3, #0]
 8021c7e:	2b00      	cmp	r3, #0
 8021c80:	d01c      	beq.n	8021cbc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8021c82:	4b40      	ldr	r3, [pc, #256]	; (8021d84 <USBD_SetConfig+0x148>)
 8021c84:	781b      	ldrb	r3, [r3, #0]
 8021c86:	461a      	mov	r2, r3
 8021c88:	687b      	ldr	r3, [r7, #4]
 8021c8a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8021c8c:	4b3d      	ldr	r3, [pc, #244]	; (8021d84 <USBD_SetConfig+0x148>)
 8021c8e:	781b      	ldrb	r3, [r3, #0]
 8021c90:	4619      	mov	r1, r3
 8021c92:	6878      	ldr	r0, [r7, #4]
 8021c94:	f7ff f91f 	bl	8020ed6 <USBD_SetClassConfig>
 8021c98:	4603      	mov	r3, r0
 8021c9a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8021c9c:	7bfb      	ldrb	r3, [r7, #15]
 8021c9e:	2b00      	cmp	r3, #0
 8021ca0:	d004      	beq.n	8021cac <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8021ca2:	6839      	ldr	r1, [r7, #0]
 8021ca4:	6878      	ldr	r0, [r7, #4]
 8021ca6:	f000 f949 	bl	8021f3c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8021caa:	e065      	b.n	8021d78 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8021cac:	6878      	ldr	r0, [r7, #4]
 8021cae:	f000 f9f3 	bl	8022098 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8021cb2:	687b      	ldr	r3, [r7, #4]
 8021cb4:	2203      	movs	r2, #3
 8021cb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8021cba:	e05d      	b.n	8021d78 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8021cbc:	6878      	ldr	r0, [r7, #4]
 8021cbe:	f000 f9eb 	bl	8022098 <USBD_CtlSendStatus>
      break;
 8021cc2:	e059      	b.n	8021d78 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8021cc4:	4b2f      	ldr	r3, [pc, #188]	; (8021d84 <USBD_SetConfig+0x148>)
 8021cc6:	781b      	ldrb	r3, [r3, #0]
 8021cc8:	2b00      	cmp	r3, #0
 8021cca:	d112      	bne.n	8021cf2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8021ccc:	687b      	ldr	r3, [r7, #4]
 8021cce:	2202      	movs	r2, #2
 8021cd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8021cd4:	4b2b      	ldr	r3, [pc, #172]	; (8021d84 <USBD_SetConfig+0x148>)
 8021cd6:	781b      	ldrb	r3, [r3, #0]
 8021cd8:	461a      	mov	r2, r3
 8021cda:	687b      	ldr	r3, [r7, #4]
 8021cdc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8021cde:	4b29      	ldr	r3, [pc, #164]	; (8021d84 <USBD_SetConfig+0x148>)
 8021ce0:	781b      	ldrb	r3, [r3, #0]
 8021ce2:	4619      	mov	r1, r3
 8021ce4:	6878      	ldr	r0, [r7, #4]
 8021ce6:	f7ff f912 	bl	8020f0e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8021cea:	6878      	ldr	r0, [r7, #4]
 8021cec:	f000 f9d4 	bl	8022098 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8021cf0:	e042      	b.n	8021d78 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8021cf2:	4b24      	ldr	r3, [pc, #144]	; (8021d84 <USBD_SetConfig+0x148>)
 8021cf4:	781b      	ldrb	r3, [r3, #0]
 8021cf6:	461a      	mov	r2, r3
 8021cf8:	687b      	ldr	r3, [r7, #4]
 8021cfa:	685b      	ldr	r3, [r3, #4]
 8021cfc:	429a      	cmp	r2, r3
 8021cfe:	d02a      	beq.n	8021d56 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8021d00:	687b      	ldr	r3, [r7, #4]
 8021d02:	685b      	ldr	r3, [r3, #4]
 8021d04:	b2db      	uxtb	r3, r3
 8021d06:	4619      	mov	r1, r3
 8021d08:	6878      	ldr	r0, [r7, #4]
 8021d0a:	f7ff f900 	bl	8020f0e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8021d0e:	4b1d      	ldr	r3, [pc, #116]	; (8021d84 <USBD_SetConfig+0x148>)
 8021d10:	781b      	ldrb	r3, [r3, #0]
 8021d12:	461a      	mov	r2, r3
 8021d14:	687b      	ldr	r3, [r7, #4]
 8021d16:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8021d18:	4b1a      	ldr	r3, [pc, #104]	; (8021d84 <USBD_SetConfig+0x148>)
 8021d1a:	781b      	ldrb	r3, [r3, #0]
 8021d1c:	4619      	mov	r1, r3
 8021d1e:	6878      	ldr	r0, [r7, #4]
 8021d20:	f7ff f8d9 	bl	8020ed6 <USBD_SetClassConfig>
 8021d24:	4603      	mov	r3, r0
 8021d26:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8021d28:	7bfb      	ldrb	r3, [r7, #15]
 8021d2a:	2b00      	cmp	r3, #0
 8021d2c:	d00f      	beq.n	8021d4e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8021d2e:	6839      	ldr	r1, [r7, #0]
 8021d30:	6878      	ldr	r0, [r7, #4]
 8021d32:	f000 f903 	bl	8021f3c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8021d36:	687b      	ldr	r3, [r7, #4]
 8021d38:	685b      	ldr	r3, [r3, #4]
 8021d3a:	b2db      	uxtb	r3, r3
 8021d3c:	4619      	mov	r1, r3
 8021d3e:	6878      	ldr	r0, [r7, #4]
 8021d40:	f7ff f8e5 	bl	8020f0e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8021d44:	687b      	ldr	r3, [r7, #4]
 8021d46:	2202      	movs	r2, #2
 8021d48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8021d4c:	e014      	b.n	8021d78 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8021d4e:	6878      	ldr	r0, [r7, #4]
 8021d50:	f000 f9a2 	bl	8022098 <USBD_CtlSendStatus>
      break;
 8021d54:	e010      	b.n	8021d78 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8021d56:	6878      	ldr	r0, [r7, #4]
 8021d58:	f000 f99e 	bl	8022098 <USBD_CtlSendStatus>
      break;
 8021d5c:	e00c      	b.n	8021d78 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8021d5e:	6839      	ldr	r1, [r7, #0]
 8021d60:	6878      	ldr	r0, [r7, #4]
 8021d62:	f000 f8eb 	bl	8021f3c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8021d66:	4b07      	ldr	r3, [pc, #28]	; (8021d84 <USBD_SetConfig+0x148>)
 8021d68:	781b      	ldrb	r3, [r3, #0]
 8021d6a:	4619      	mov	r1, r3
 8021d6c:	6878      	ldr	r0, [r7, #4]
 8021d6e:	f7ff f8ce 	bl	8020f0e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8021d72:	2303      	movs	r3, #3
 8021d74:	73fb      	strb	r3, [r7, #15]
      break;
 8021d76:	bf00      	nop
  }

  return ret;
 8021d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8021d7a:	4618      	mov	r0, r3
 8021d7c:	3710      	adds	r7, #16
 8021d7e:	46bd      	mov	sp, r7
 8021d80:	bd80      	pop	{r7, pc}
 8021d82:	bf00      	nop
 8021d84:	200007ac 	.word	0x200007ac

08021d88 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021d88:	b580      	push	{r7, lr}
 8021d8a:	b082      	sub	sp, #8
 8021d8c:	af00      	add	r7, sp, #0
 8021d8e:	6078      	str	r0, [r7, #4]
 8021d90:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8021d92:	683b      	ldr	r3, [r7, #0]
 8021d94:	88db      	ldrh	r3, [r3, #6]
 8021d96:	2b01      	cmp	r3, #1
 8021d98:	d004      	beq.n	8021da4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8021d9a:	6839      	ldr	r1, [r7, #0]
 8021d9c:	6878      	ldr	r0, [r7, #4]
 8021d9e:	f000 f8cd 	bl	8021f3c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8021da2:	e023      	b.n	8021dec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8021da4:	687b      	ldr	r3, [r7, #4]
 8021da6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021daa:	b2db      	uxtb	r3, r3
 8021dac:	2b02      	cmp	r3, #2
 8021dae:	dc02      	bgt.n	8021db6 <USBD_GetConfig+0x2e>
 8021db0:	2b00      	cmp	r3, #0
 8021db2:	dc03      	bgt.n	8021dbc <USBD_GetConfig+0x34>
 8021db4:	e015      	b.n	8021de2 <USBD_GetConfig+0x5a>
 8021db6:	2b03      	cmp	r3, #3
 8021db8:	d00b      	beq.n	8021dd2 <USBD_GetConfig+0x4a>
 8021dba:	e012      	b.n	8021de2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8021dbc:	687b      	ldr	r3, [r7, #4]
 8021dbe:	2200      	movs	r2, #0
 8021dc0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8021dc2:	687b      	ldr	r3, [r7, #4]
 8021dc4:	3308      	adds	r3, #8
 8021dc6:	2201      	movs	r2, #1
 8021dc8:	4619      	mov	r1, r3
 8021dca:	6878      	ldr	r0, [r7, #4]
 8021dcc:	f000 f927 	bl	802201e <USBD_CtlSendData>
        break;
 8021dd0:	e00c      	b.n	8021dec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8021dd2:	687b      	ldr	r3, [r7, #4]
 8021dd4:	3304      	adds	r3, #4
 8021dd6:	2201      	movs	r2, #1
 8021dd8:	4619      	mov	r1, r3
 8021dda:	6878      	ldr	r0, [r7, #4]
 8021ddc:	f000 f91f 	bl	802201e <USBD_CtlSendData>
        break;
 8021de0:	e004      	b.n	8021dec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8021de2:	6839      	ldr	r1, [r7, #0]
 8021de4:	6878      	ldr	r0, [r7, #4]
 8021de6:	f000 f8a9 	bl	8021f3c <USBD_CtlError>
        break;
 8021dea:	bf00      	nop
}
 8021dec:	bf00      	nop
 8021dee:	3708      	adds	r7, #8
 8021df0:	46bd      	mov	sp, r7
 8021df2:	bd80      	pop	{r7, pc}

08021df4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021df4:	b580      	push	{r7, lr}
 8021df6:	b082      	sub	sp, #8
 8021df8:	af00      	add	r7, sp, #0
 8021dfa:	6078      	str	r0, [r7, #4]
 8021dfc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8021dfe:	687b      	ldr	r3, [r7, #4]
 8021e00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021e04:	b2db      	uxtb	r3, r3
 8021e06:	3b01      	subs	r3, #1
 8021e08:	2b02      	cmp	r3, #2
 8021e0a:	d81e      	bhi.n	8021e4a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8021e0c:	683b      	ldr	r3, [r7, #0]
 8021e0e:	88db      	ldrh	r3, [r3, #6]
 8021e10:	2b02      	cmp	r3, #2
 8021e12:	d004      	beq.n	8021e1e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8021e14:	6839      	ldr	r1, [r7, #0]
 8021e16:	6878      	ldr	r0, [r7, #4]
 8021e18:	f000 f890 	bl	8021f3c <USBD_CtlError>
        break;
 8021e1c:	e01a      	b.n	8021e54 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8021e1e:	687b      	ldr	r3, [r7, #4]
 8021e20:	2201      	movs	r2, #1
 8021e22:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8021e24:	687b      	ldr	r3, [r7, #4]
 8021e26:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8021e2a:	2b00      	cmp	r3, #0
 8021e2c:	d005      	beq.n	8021e3a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8021e2e:	687b      	ldr	r3, [r7, #4]
 8021e30:	68db      	ldr	r3, [r3, #12]
 8021e32:	f043 0202 	orr.w	r2, r3, #2
 8021e36:	687b      	ldr	r3, [r7, #4]
 8021e38:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8021e3a:	687b      	ldr	r3, [r7, #4]
 8021e3c:	330c      	adds	r3, #12
 8021e3e:	2202      	movs	r2, #2
 8021e40:	4619      	mov	r1, r3
 8021e42:	6878      	ldr	r0, [r7, #4]
 8021e44:	f000 f8eb 	bl	802201e <USBD_CtlSendData>
      break;
 8021e48:	e004      	b.n	8021e54 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8021e4a:	6839      	ldr	r1, [r7, #0]
 8021e4c:	6878      	ldr	r0, [r7, #4]
 8021e4e:	f000 f875 	bl	8021f3c <USBD_CtlError>
      break;
 8021e52:	bf00      	nop
  }
}
 8021e54:	bf00      	nop
 8021e56:	3708      	adds	r7, #8
 8021e58:	46bd      	mov	sp, r7
 8021e5a:	bd80      	pop	{r7, pc}

08021e5c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021e5c:	b580      	push	{r7, lr}
 8021e5e:	b082      	sub	sp, #8
 8021e60:	af00      	add	r7, sp, #0
 8021e62:	6078      	str	r0, [r7, #4]
 8021e64:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8021e66:	683b      	ldr	r3, [r7, #0]
 8021e68:	885b      	ldrh	r3, [r3, #2]
 8021e6a:	2b01      	cmp	r3, #1
 8021e6c:	d106      	bne.n	8021e7c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8021e6e:	687b      	ldr	r3, [r7, #4]
 8021e70:	2201      	movs	r2, #1
 8021e72:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8021e76:	6878      	ldr	r0, [r7, #4]
 8021e78:	f000 f90e 	bl	8022098 <USBD_CtlSendStatus>
  }
}
 8021e7c:	bf00      	nop
 8021e7e:	3708      	adds	r7, #8
 8021e80:	46bd      	mov	sp, r7
 8021e82:	bd80      	pop	{r7, pc}

08021e84 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021e84:	b580      	push	{r7, lr}
 8021e86:	b082      	sub	sp, #8
 8021e88:	af00      	add	r7, sp, #0
 8021e8a:	6078      	str	r0, [r7, #4]
 8021e8c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8021e8e:	687b      	ldr	r3, [r7, #4]
 8021e90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021e94:	b2db      	uxtb	r3, r3
 8021e96:	3b01      	subs	r3, #1
 8021e98:	2b02      	cmp	r3, #2
 8021e9a:	d80b      	bhi.n	8021eb4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8021e9c:	683b      	ldr	r3, [r7, #0]
 8021e9e:	885b      	ldrh	r3, [r3, #2]
 8021ea0:	2b01      	cmp	r3, #1
 8021ea2:	d10c      	bne.n	8021ebe <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8021ea4:	687b      	ldr	r3, [r7, #4]
 8021ea6:	2200      	movs	r2, #0
 8021ea8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8021eac:	6878      	ldr	r0, [r7, #4]
 8021eae:	f000 f8f3 	bl	8022098 <USBD_CtlSendStatus>
      }
      break;
 8021eb2:	e004      	b.n	8021ebe <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8021eb4:	6839      	ldr	r1, [r7, #0]
 8021eb6:	6878      	ldr	r0, [r7, #4]
 8021eb8:	f000 f840 	bl	8021f3c <USBD_CtlError>
      break;
 8021ebc:	e000      	b.n	8021ec0 <USBD_ClrFeature+0x3c>
      break;
 8021ebe:	bf00      	nop
  }
}
 8021ec0:	bf00      	nop
 8021ec2:	3708      	adds	r7, #8
 8021ec4:	46bd      	mov	sp, r7
 8021ec6:	bd80      	pop	{r7, pc}

08021ec8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8021ec8:	b580      	push	{r7, lr}
 8021eca:	b084      	sub	sp, #16
 8021ecc:	af00      	add	r7, sp, #0
 8021ece:	6078      	str	r0, [r7, #4]
 8021ed0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8021ed2:	683b      	ldr	r3, [r7, #0]
 8021ed4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8021ed6:	68fb      	ldr	r3, [r7, #12]
 8021ed8:	781a      	ldrb	r2, [r3, #0]
 8021eda:	687b      	ldr	r3, [r7, #4]
 8021edc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8021ede:	68fb      	ldr	r3, [r7, #12]
 8021ee0:	3301      	adds	r3, #1
 8021ee2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8021ee4:	68fb      	ldr	r3, [r7, #12]
 8021ee6:	781a      	ldrb	r2, [r3, #0]
 8021ee8:	687b      	ldr	r3, [r7, #4]
 8021eea:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8021eec:	68fb      	ldr	r3, [r7, #12]
 8021eee:	3301      	adds	r3, #1
 8021ef0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8021ef2:	68f8      	ldr	r0, [r7, #12]
 8021ef4:	f7ff fa92 	bl	802141c <SWAPBYTE>
 8021ef8:	4603      	mov	r3, r0
 8021efa:	461a      	mov	r2, r3
 8021efc:	687b      	ldr	r3, [r7, #4]
 8021efe:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8021f00:	68fb      	ldr	r3, [r7, #12]
 8021f02:	3301      	adds	r3, #1
 8021f04:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8021f06:	68fb      	ldr	r3, [r7, #12]
 8021f08:	3301      	adds	r3, #1
 8021f0a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8021f0c:	68f8      	ldr	r0, [r7, #12]
 8021f0e:	f7ff fa85 	bl	802141c <SWAPBYTE>
 8021f12:	4603      	mov	r3, r0
 8021f14:	461a      	mov	r2, r3
 8021f16:	687b      	ldr	r3, [r7, #4]
 8021f18:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8021f1a:	68fb      	ldr	r3, [r7, #12]
 8021f1c:	3301      	adds	r3, #1
 8021f1e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8021f20:	68fb      	ldr	r3, [r7, #12]
 8021f22:	3301      	adds	r3, #1
 8021f24:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8021f26:	68f8      	ldr	r0, [r7, #12]
 8021f28:	f7ff fa78 	bl	802141c <SWAPBYTE>
 8021f2c:	4603      	mov	r3, r0
 8021f2e:	461a      	mov	r2, r3
 8021f30:	687b      	ldr	r3, [r7, #4]
 8021f32:	80da      	strh	r2, [r3, #6]
}
 8021f34:	bf00      	nop
 8021f36:	3710      	adds	r7, #16
 8021f38:	46bd      	mov	sp, r7
 8021f3a:	bd80      	pop	{r7, pc}

08021f3c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021f3c:	b580      	push	{r7, lr}
 8021f3e:	b082      	sub	sp, #8
 8021f40:	af00      	add	r7, sp, #0
 8021f42:	6078      	str	r0, [r7, #4]
 8021f44:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8021f46:	2180      	movs	r1, #128	; 0x80
 8021f48:	6878      	ldr	r0, [r7, #4]
 8021f4a:	f000 fcbe 	bl	80228ca <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8021f4e:	2100      	movs	r1, #0
 8021f50:	6878      	ldr	r0, [r7, #4]
 8021f52:	f000 fcba 	bl	80228ca <USBD_LL_StallEP>
}
 8021f56:	bf00      	nop
 8021f58:	3708      	adds	r7, #8
 8021f5a:	46bd      	mov	sp, r7
 8021f5c:	bd80      	pop	{r7, pc}

08021f5e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8021f5e:	b580      	push	{r7, lr}
 8021f60:	b086      	sub	sp, #24
 8021f62:	af00      	add	r7, sp, #0
 8021f64:	60f8      	str	r0, [r7, #12]
 8021f66:	60b9      	str	r1, [r7, #8]
 8021f68:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8021f6a:	2300      	movs	r3, #0
 8021f6c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8021f6e:	68fb      	ldr	r3, [r7, #12]
 8021f70:	2b00      	cmp	r3, #0
 8021f72:	d036      	beq.n	8021fe2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8021f74:	68fb      	ldr	r3, [r7, #12]
 8021f76:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8021f78:	6938      	ldr	r0, [r7, #16]
 8021f7a:	f000 f836 	bl	8021fea <USBD_GetLen>
 8021f7e:	4603      	mov	r3, r0
 8021f80:	3301      	adds	r3, #1
 8021f82:	b29b      	uxth	r3, r3
 8021f84:	005b      	lsls	r3, r3, #1
 8021f86:	b29a      	uxth	r2, r3
 8021f88:	687b      	ldr	r3, [r7, #4]
 8021f8a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8021f8c:	7dfb      	ldrb	r3, [r7, #23]
 8021f8e:	68ba      	ldr	r2, [r7, #8]
 8021f90:	4413      	add	r3, r2
 8021f92:	687a      	ldr	r2, [r7, #4]
 8021f94:	7812      	ldrb	r2, [r2, #0]
 8021f96:	701a      	strb	r2, [r3, #0]
  idx++;
 8021f98:	7dfb      	ldrb	r3, [r7, #23]
 8021f9a:	3301      	adds	r3, #1
 8021f9c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8021f9e:	7dfb      	ldrb	r3, [r7, #23]
 8021fa0:	68ba      	ldr	r2, [r7, #8]
 8021fa2:	4413      	add	r3, r2
 8021fa4:	2203      	movs	r2, #3
 8021fa6:	701a      	strb	r2, [r3, #0]
  idx++;
 8021fa8:	7dfb      	ldrb	r3, [r7, #23]
 8021faa:	3301      	adds	r3, #1
 8021fac:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8021fae:	e013      	b.n	8021fd8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8021fb0:	7dfb      	ldrb	r3, [r7, #23]
 8021fb2:	68ba      	ldr	r2, [r7, #8]
 8021fb4:	4413      	add	r3, r2
 8021fb6:	693a      	ldr	r2, [r7, #16]
 8021fb8:	7812      	ldrb	r2, [r2, #0]
 8021fba:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8021fbc:	693b      	ldr	r3, [r7, #16]
 8021fbe:	3301      	adds	r3, #1
 8021fc0:	613b      	str	r3, [r7, #16]
    idx++;
 8021fc2:	7dfb      	ldrb	r3, [r7, #23]
 8021fc4:	3301      	adds	r3, #1
 8021fc6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8021fc8:	7dfb      	ldrb	r3, [r7, #23]
 8021fca:	68ba      	ldr	r2, [r7, #8]
 8021fcc:	4413      	add	r3, r2
 8021fce:	2200      	movs	r2, #0
 8021fd0:	701a      	strb	r2, [r3, #0]
    idx++;
 8021fd2:	7dfb      	ldrb	r3, [r7, #23]
 8021fd4:	3301      	adds	r3, #1
 8021fd6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8021fd8:	693b      	ldr	r3, [r7, #16]
 8021fda:	781b      	ldrb	r3, [r3, #0]
 8021fdc:	2b00      	cmp	r3, #0
 8021fde:	d1e7      	bne.n	8021fb0 <USBD_GetString+0x52>
 8021fe0:	e000      	b.n	8021fe4 <USBD_GetString+0x86>
    return;
 8021fe2:	bf00      	nop
  }
}
 8021fe4:	3718      	adds	r7, #24
 8021fe6:	46bd      	mov	sp, r7
 8021fe8:	bd80      	pop	{r7, pc}

08021fea <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8021fea:	b480      	push	{r7}
 8021fec:	b085      	sub	sp, #20
 8021fee:	af00      	add	r7, sp, #0
 8021ff0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8021ff2:	2300      	movs	r3, #0
 8021ff4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8021ff6:	687b      	ldr	r3, [r7, #4]
 8021ff8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8021ffa:	e005      	b.n	8022008 <USBD_GetLen+0x1e>
  {
    len++;
 8021ffc:	7bfb      	ldrb	r3, [r7, #15]
 8021ffe:	3301      	adds	r3, #1
 8022000:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8022002:	68bb      	ldr	r3, [r7, #8]
 8022004:	3301      	adds	r3, #1
 8022006:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8022008:	68bb      	ldr	r3, [r7, #8]
 802200a:	781b      	ldrb	r3, [r3, #0]
 802200c:	2b00      	cmp	r3, #0
 802200e:	d1f5      	bne.n	8021ffc <USBD_GetLen+0x12>
  }

  return len;
 8022010:	7bfb      	ldrb	r3, [r7, #15]
}
 8022012:	4618      	mov	r0, r3
 8022014:	3714      	adds	r7, #20
 8022016:	46bd      	mov	sp, r7
 8022018:	f85d 7b04 	ldr.w	r7, [sp], #4
 802201c:	4770      	bx	lr

0802201e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 802201e:	b580      	push	{r7, lr}
 8022020:	b084      	sub	sp, #16
 8022022:	af00      	add	r7, sp, #0
 8022024:	60f8      	str	r0, [r7, #12]
 8022026:	60b9      	str	r1, [r7, #8]
 8022028:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 802202a:	68fb      	ldr	r3, [r7, #12]
 802202c:	2202      	movs	r2, #2
 802202e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8022032:	68fb      	ldr	r3, [r7, #12]
 8022034:	687a      	ldr	r2, [r7, #4]
 8022036:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8022038:	68fb      	ldr	r3, [r7, #12]
 802203a:	687a      	ldr	r2, [r7, #4]
 802203c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 802203e:	687b      	ldr	r3, [r7, #4]
 8022040:	68ba      	ldr	r2, [r7, #8]
 8022042:	2100      	movs	r1, #0
 8022044:	68f8      	ldr	r0, [r7, #12]
 8022046:	f000 fcc9 	bl	80229dc <USBD_LL_Transmit>

  return USBD_OK;
 802204a:	2300      	movs	r3, #0
}
 802204c:	4618      	mov	r0, r3
 802204e:	3710      	adds	r7, #16
 8022050:	46bd      	mov	sp, r7
 8022052:	bd80      	pop	{r7, pc}

08022054 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8022054:	b580      	push	{r7, lr}
 8022056:	b084      	sub	sp, #16
 8022058:	af00      	add	r7, sp, #0
 802205a:	60f8      	str	r0, [r7, #12]
 802205c:	60b9      	str	r1, [r7, #8]
 802205e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8022060:	687b      	ldr	r3, [r7, #4]
 8022062:	68ba      	ldr	r2, [r7, #8]
 8022064:	2100      	movs	r1, #0
 8022066:	68f8      	ldr	r0, [r7, #12]
 8022068:	f000 fcb8 	bl	80229dc <USBD_LL_Transmit>

  return USBD_OK;
 802206c:	2300      	movs	r3, #0
}
 802206e:	4618      	mov	r0, r3
 8022070:	3710      	adds	r7, #16
 8022072:	46bd      	mov	sp, r7
 8022074:	bd80      	pop	{r7, pc}

08022076 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8022076:	b580      	push	{r7, lr}
 8022078:	b084      	sub	sp, #16
 802207a:	af00      	add	r7, sp, #0
 802207c:	60f8      	str	r0, [r7, #12]
 802207e:	60b9      	str	r1, [r7, #8]
 8022080:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8022082:	687b      	ldr	r3, [r7, #4]
 8022084:	68ba      	ldr	r2, [r7, #8]
 8022086:	2100      	movs	r1, #0
 8022088:	68f8      	ldr	r0, [r7, #12]
 802208a:	f000 fcc8 	bl	8022a1e <USBD_LL_PrepareReceive>

  return USBD_OK;
 802208e:	2300      	movs	r3, #0
}
 8022090:	4618      	mov	r0, r3
 8022092:	3710      	adds	r7, #16
 8022094:	46bd      	mov	sp, r7
 8022096:	bd80      	pop	{r7, pc}

08022098 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8022098:	b580      	push	{r7, lr}
 802209a:	b082      	sub	sp, #8
 802209c:	af00      	add	r7, sp, #0
 802209e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80220a0:	687b      	ldr	r3, [r7, #4]
 80220a2:	2204      	movs	r2, #4
 80220a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80220a8:	2300      	movs	r3, #0
 80220aa:	2200      	movs	r2, #0
 80220ac:	2100      	movs	r1, #0
 80220ae:	6878      	ldr	r0, [r7, #4]
 80220b0:	f000 fc94 	bl	80229dc <USBD_LL_Transmit>

  return USBD_OK;
 80220b4:	2300      	movs	r3, #0
}
 80220b6:	4618      	mov	r0, r3
 80220b8:	3708      	adds	r7, #8
 80220ba:	46bd      	mov	sp, r7
 80220bc:	bd80      	pop	{r7, pc}

080220be <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80220be:	b580      	push	{r7, lr}
 80220c0:	b082      	sub	sp, #8
 80220c2:	af00      	add	r7, sp, #0
 80220c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80220c6:	687b      	ldr	r3, [r7, #4]
 80220c8:	2205      	movs	r2, #5
 80220ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80220ce:	2300      	movs	r3, #0
 80220d0:	2200      	movs	r2, #0
 80220d2:	2100      	movs	r1, #0
 80220d4:	6878      	ldr	r0, [r7, #4]
 80220d6:	f000 fca2 	bl	8022a1e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80220da:	2300      	movs	r3, #0
}
 80220dc:	4618      	mov	r0, r3
 80220de:	3708      	adds	r7, #8
 80220e0:	46bd      	mov	sp, r7
 80220e2:	bd80      	pop	{r7, pc}

080220e4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80220e4:	b580      	push	{r7, lr}
 80220e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80220e8:	2200      	movs	r2, #0
 80220ea:	4912      	ldr	r1, [pc, #72]	; (8022134 <MX_USB_DEVICE_Init+0x50>)
 80220ec:	4812      	ldr	r0, [pc, #72]	; (8022138 <MX_USB_DEVICE_Init+0x54>)
 80220ee:	f7fe fe84 	bl	8020dfa <USBD_Init>
 80220f2:	4603      	mov	r3, r0
 80220f4:	2b00      	cmp	r3, #0
 80220f6:	d001      	beq.n	80220fc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80220f8:	f7f5 fdd8 	bl	8017cac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 80220fc:	490f      	ldr	r1, [pc, #60]	; (802213c <MX_USB_DEVICE_Init+0x58>)
 80220fe:	480e      	ldr	r0, [pc, #56]	; (8022138 <MX_USB_DEVICE_Init+0x54>)
 8022100:	f7fe feab 	bl	8020e5a <USBD_RegisterClass>
 8022104:	4603      	mov	r3, r0
 8022106:	2b00      	cmp	r3, #0
 8022108:	d001      	beq.n	802210e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 802210a:	f7f5 fdcf 	bl	8017cac <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 802210e:	490c      	ldr	r1, [pc, #48]	; (8022140 <MX_USB_DEVICE_Init+0x5c>)
 8022110:	4809      	ldr	r0, [pc, #36]	; (8022138 <MX_USB_DEVICE_Init+0x54>)
 8022112:	f7fd fa5b 	bl	801f5cc <USBD_MSC_RegisterStorage>
 8022116:	4603      	mov	r3, r0
 8022118:	2b00      	cmp	r3, #0
 802211a:	d001      	beq.n	8022120 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 802211c:	f7f5 fdc6 	bl	8017cac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8022120:	4805      	ldr	r0, [pc, #20]	; (8022138 <MX_USB_DEVICE_Init+0x54>)
 8022122:	f7fe fec1 	bl	8020ea8 <USBD_Start>
 8022126:	4603      	mov	r3, r0
 8022128:	2b00      	cmp	r3, #0
 802212a:	d001      	beq.n	8022130 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 802212c:	f7f5 fdbe 	bl	8017cac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8022130:	bf00      	nop
 8022132:	bd80      	pop	{r7, pc}
 8022134:	2000067c 	.word	0x2000067c
 8022138:	20006c3c 	.word	0x20006c3c
 802213c:	20000594 	.word	0x20000594
 8022140:	200006dc 	.word	0x200006dc

08022144 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022144:	b480      	push	{r7}
 8022146:	b083      	sub	sp, #12
 8022148:	af00      	add	r7, sp, #0
 802214a:	4603      	mov	r3, r0
 802214c:	6039      	str	r1, [r7, #0]
 802214e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8022150:	683b      	ldr	r3, [r7, #0]
 8022152:	2212      	movs	r2, #18
 8022154:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8022156:	4b03      	ldr	r3, [pc, #12]	; (8022164 <USBD_FS_DeviceDescriptor+0x20>)
}
 8022158:	4618      	mov	r0, r3
 802215a:	370c      	adds	r7, #12
 802215c:	46bd      	mov	sp, r7
 802215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022162:	4770      	bx	lr
 8022164:	2000069c 	.word	0x2000069c

08022168 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022168:	b480      	push	{r7}
 802216a:	b083      	sub	sp, #12
 802216c:	af00      	add	r7, sp, #0
 802216e:	4603      	mov	r3, r0
 8022170:	6039      	str	r1, [r7, #0]
 8022172:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8022174:	683b      	ldr	r3, [r7, #0]
 8022176:	2204      	movs	r2, #4
 8022178:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 802217a:	4b03      	ldr	r3, [pc, #12]	; (8022188 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 802217c:	4618      	mov	r0, r3
 802217e:	370c      	adds	r7, #12
 8022180:	46bd      	mov	sp, r7
 8022182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022186:	4770      	bx	lr
 8022188:	200006bc 	.word	0x200006bc

0802218c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802218c:	b580      	push	{r7, lr}
 802218e:	b082      	sub	sp, #8
 8022190:	af00      	add	r7, sp, #0
 8022192:	4603      	mov	r3, r0
 8022194:	6039      	str	r1, [r7, #0]
 8022196:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8022198:	79fb      	ldrb	r3, [r7, #7]
 802219a:	2b00      	cmp	r3, #0
 802219c:	d105      	bne.n	80221aa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 802219e:	683a      	ldr	r2, [r7, #0]
 80221a0:	4907      	ldr	r1, [pc, #28]	; (80221c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80221a2:	4808      	ldr	r0, [pc, #32]	; (80221c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80221a4:	f7ff fedb 	bl	8021f5e <USBD_GetString>
 80221a8:	e004      	b.n	80221b4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80221aa:	683a      	ldr	r2, [r7, #0]
 80221ac:	4904      	ldr	r1, [pc, #16]	; (80221c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80221ae:	4805      	ldr	r0, [pc, #20]	; (80221c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80221b0:	f7ff fed5 	bl	8021f5e <USBD_GetString>
  }
  return USBD_StrDesc;
 80221b4:	4b02      	ldr	r3, [pc, #8]	; (80221c0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80221b6:	4618      	mov	r0, r3
 80221b8:	3708      	adds	r7, #8
 80221ba:	46bd      	mov	sp, r7
 80221bc:	bd80      	pop	{r7, pc}
 80221be:	bf00      	nop
 80221c0:	20006f0c 	.word	0x20006f0c
 80221c4:	08000a84 	.word	0x08000a84

080221c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80221c8:	b580      	push	{r7, lr}
 80221ca:	b082      	sub	sp, #8
 80221cc:	af00      	add	r7, sp, #0
 80221ce:	4603      	mov	r3, r0
 80221d0:	6039      	str	r1, [r7, #0]
 80221d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80221d4:	683a      	ldr	r2, [r7, #0]
 80221d6:	4904      	ldr	r1, [pc, #16]	; (80221e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80221d8:	4804      	ldr	r0, [pc, #16]	; (80221ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80221da:	f7ff fec0 	bl	8021f5e <USBD_GetString>
  return USBD_StrDesc;
 80221de:	4b02      	ldr	r3, [pc, #8]	; (80221e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80221e0:	4618      	mov	r0, r3
 80221e2:	3708      	adds	r7, #8
 80221e4:	46bd      	mov	sp, r7
 80221e6:	bd80      	pop	{r7, pc}
 80221e8:	20006f0c 	.word	0x20006f0c
 80221ec:	08000a98 	.word	0x08000a98

080221f0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80221f0:	b580      	push	{r7, lr}
 80221f2:	b082      	sub	sp, #8
 80221f4:	af00      	add	r7, sp, #0
 80221f6:	4603      	mov	r3, r0
 80221f8:	6039      	str	r1, [r7, #0]
 80221fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80221fc:	683b      	ldr	r3, [r7, #0]
 80221fe:	221a      	movs	r2, #26
 8022200:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8022202:	f000 f855 	bl	80222b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8022206:	4b02      	ldr	r3, [pc, #8]	; (8022210 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8022208:	4618      	mov	r0, r3
 802220a:	3708      	adds	r7, #8
 802220c:	46bd      	mov	sp, r7
 802220e:	bd80      	pop	{r7, pc}
 8022210:	200006c0 	.word	0x200006c0

08022214 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022214:	b580      	push	{r7, lr}
 8022216:	b082      	sub	sp, #8
 8022218:	af00      	add	r7, sp, #0
 802221a:	4603      	mov	r3, r0
 802221c:	6039      	str	r1, [r7, #0]
 802221e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8022220:	79fb      	ldrb	r3, [r7, #7]
 8022222:	2b00      	cmp	r3, #0
 8022224:	d105      	bne.n	8022232 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8022226:	683a      	ldr	r2, [r7, #0]
 8022228:	4907      	ldr	r1, [pc, #28]	; (8022248 <USBD_FS_ConfigStrDescriptor+0x34>)
 802222a:	4808      	ldr	r0, [pc, #32]	; (802224c <USBD_FS_ConfigStrDescriptor+0x38>)
 802222c:	f7ff fe97 	bl	8021f5e <USBD_GetString>
 8022230:	e004      	b.n	802223c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8022232:	683a      	ldr	r2, [r7, #0]
 8022234:	4904      	ldr	r1, [pc, #16]	; (8022248 <USBD_FS_ConfigStrDescriptor+0x34>)
 8022236:	4805      	ldr	r0, [pc, #20]	; (802224c <USBD_FS_ConfigStrDescriptor+0x38>)
 8022238:	f7ff fe91 	bl	8021f5e <USBD_GetString>
  }
  return USBD_StrDesc;
 802223c:	4b02      	ldr	r3, [pc, #8]	; (8022248 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 802223e:	4618      	mov	r0, r3
 8022240:	3708      	adds	r7, #8
 8022242:	46bd      	mov	sp, r7
 8022244:	bd80      	pop	{r7, pc}
 8022246:	bf00      	nop
 8022248:	20006f0c 	.word	0x20006f0c
 802224c:	08000aac 	.word	0x08000aac

08022250 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022250:	b580      	push	{r7, lr}
 8022252:	b082      	sub	sp, #8
 8022254:	af00      	add	r7, sp, #0
 8022256:	4603      	mov	r3, r0
 8022258:	6039      	str	r1, [r7, #0]
 802225a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 802225c:	79fb      	ldrb	r3, [r7, #7]
 802225e:	2b00      	cmp	r3, #0
 8022260:	d105      	bne.n	802226e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8022262:	683a      	ldr	r2, [r7, #0]
 8022264:	4907      	ldr	r1, [pc, #28]	; (8022284 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8022266:	4808      	ldr	r0, [pc, #32]	; (8022288 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8022268:	f7ff fe79 	bl	8021f5e <USBD_GetString>
 802226c:	e004      	b.n	8022278 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 802226e:	683a      	ldr	r2, [r7, #0]
 8022270:	4904      	ldr	r1, [pc, #16]	; (8022284 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8022272:	4805      	ldr	r0, [pc, #20]	; (8022288 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8022274:	f7ff fe73 	bl	8021f5e <USBD_GetString>
  }
  return USBD_StrDesc;
 8022278:	4b02      	ldr	r3, [pc, #8]	; (8022284 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 802227a:	4618      	mov	r0, r3
 802227c:	3708      	adds	r7, #8
 802227e:	46bd      	mov	sp, r7
 8022280:	bd80      	pop	{r7, pc}
 8022282:	bf00      	nop
 8022284:	20006f0c 	.word	0x20006f0c
 8022288:	08000ab8 	.word	0x08000ab8

0802228c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802228c:	b480      	push	{r7}
 802228e:	b083      	sub	sp, #12
 8022290:	af00      	add	r7, sp, #0
 8022292:	4603      	mov	r3, r0
 8022294:	6039      	str	r1, [r7, #0]
 8022296:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8022298:	683b      	ldr	r3, [r7, #0]
 802229a:	220c      	movs	r2, #12
 802229c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 802229e:	4b03      	ldr	r3, [pc, #12]	; (80222ac <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80222a0:	4618      	mov	r0, r3
 80222a2:	370c      	adds	r7, #12
 80222a4:	46bd      	mov	sp, r7
 80222a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80222aa:	4770      	bx	lr
 80222ac:	200006b0 	.word	0x200006b0

080222b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80222b0:	b580      	push	{r7, lr}
 80222b2:	b084      	sub	sp, #16
 80222b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80222b6:	4b0f      	ldr	r3, [pc, #60]	; (80222f4 <Get_SerialNum+0x44>)
 80222b8:	681b      	ldr	r3, [r3, #0]
 80222ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80222bc:	4b0e      	ldr	r3, [pc, #56]	; (80222f8 <Get_SerialNum+0x48>)
 80222be:	681b      	ldr	r3, [r3, #0]
 80222c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80222c2:	4b0e      	ldr	r3, [pc, #56]	; (80222fc <Get_SerialNum+0x4c>)
 80222c4:	681b      	ldr	r3, [r3, #0]
 80222c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80222c8:	68fa      	ldr	r2, [r7, #12]
 80222ca:	687b      	ldr	r3, [r7, #4]
 80222cc:	4413      	add	r3, r2
 80222ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80222d0:	68fb      	ldr	r3, [r7, #12]
 80222d2:	2b00      	cmp	r3, #0
 80222d4:	d009      	beq.n	80222ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80222d6:	2208      	movs	r2, #8
 80222d8:	4909      	ldr	r1, [pc, #36]	; (8022300 <Get_SerialNum+0x50>)
 80222da:	68f8      	ldr	r0, [r7, #12]
 80222dc:	f000 f814 	bl	8022308 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80222e0:	2204      	movs	r2, #4
 80222e2:	4908      	ldr	r1, [pc, #32]	; (8022304 <Get_SerialNum+0x54>)
 80222e4:	68b8      	ldr	r0, [r7, #8]
 80222e6:	f000 f80f 	bl	8022308 <IntToUnicode>
  }
}
 80222ea:	bf00      	nop
 80222ec:	3710      	adds	r7, #16
 80222ee:	46bd      	mov	sp, r7
 80222f0:	bd80      	pop	{r7, pc}
 80222f2:	bf00      	nop
 80222f4:	1fff7a10 	.word	0x1fff7a10
 80222f8:	1fff7a14 	.word	0x1fff7a14
 80222fc:	1fff7a18 	.word	0x1fff7a18
 8022300:	200006c2 	.word	0x200006c2
 8022304:	200006d2 	.word	0x200006d2

08022308 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8022308:	b480      	push	{r7}
 802230a:	b087      	sub	sp, #28
 802230c:	af00      	add	r7, sp, #0
 802230e:	60f8      	str	r0, [r7, #12]
 8022310:	60b9      	str	r1, [r7, #8]
 8022312:	4613      	mov	r3, r2
 8022314:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8022316:	2300      	movs	r3, #0
 8022318:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 802231a:	2300      	movs	r3, #0
 802231c:	75fb      	strb	r3, [r7, #23]
 802231e:	e027      	b.n	8022370 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8022320:	68fb      	ldr	r3, [r7, #12]
 8022322:	0f1b      	lsrs	r3, r3, #28
 8022324:	2b09      	cmp	r3, #9
 8022326:	d80b      	bhi.n	8022340 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8022328:	68fb      	ldr	r3, [r7, #12]
 802232a:	0f1b      	lsrs	r3, r3, #28
 802232c:	b2da      	uxtb	r2, r3
 802232e:	7dfb      	ldrb	r3, [r7, #23]
 8022330:	005b      	lsls	r3, r3, #1
 8022332:	4619      	mov	r1, r3
 8022334:	68bb      	ldr	r3, [r7, #8]
 8022336:	440b      	add	r3, r1
 8022338:	3230      	adds	r2, #48	; 0x30
 802233a:	b2d2      	uxtb	r2, r2
 802233c:	701a      	strb	r2, [r3, #0]
 802233e:	e00a      	b.n	8022356 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8022340:	68fb      	ldr	r3, [r7, #12]
 8022342:	0f1b      	lsrs	r3, r3, #28
 8022344:	b2da      	uxtb	r2, r3
 8022346:	7dfb      	ldrb	r3, [r7, #23]
 8022348:	005b      	lsls	r3, r3, #1
 802234a:	4619      	mov	r1, r3
 802234c:	68bb      	ldr	r3, [r7, #8]
 802234e:	440b      	add	r3, r1
 8022350:	3237      	adds	r2, #55	; 0x37
 8022352:	b2d2      	uxtb	r2, r2
 8022354:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8022356:	68fb      	ldr	r3, [r7, #12]
 8022358:	011b      	lsls	r3, r3, #4
 802235a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 802235c:	7dfb      	ldrb	r3, [r7, #23]
 802235e:	005b      	lsls	r3, r3, #1
 8022360:	3301      	adds	r3, #1
 8022362:	68ba      	ldr	r2, [r7, #8]
 8022364:	4413      	add	r3, r2
 8022366:	2200      	movs	r2, #0
 8022368:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 802236a:	7dfb      	ldrb	r3, [r7, #23]
 802236c:	3301      	adds	r3, #1
 802236e:	75fb      	strb	r3, [r7, #23]
 8022370:	7dfa      	ldrb	r2, [r7, #23]
 8022372:	79fb      	ldrb	r3, [r7, #7]
 8022374:	429a      	cmp	r2, r3
 8022376:	d3d3      	bcc.n	8022320 <IntToUnicode+0x18>
  }
}
 8022378:	bf00      	nop
 802237a:	bf00      	nop
 802237c:	371c      	adds	r7, #28
 802237e:	46bd      	mov	sp, r7
 8022380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022384:	4770      	bx	lr

08022386 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8022386:	b480      	push	{r7}
 8022388:	b083      	sub	sp, #12
 802238a:	af00      	add	r7, sp, #0
 802238c:	4603      	mov	r3, r0
 802238e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8022390:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8022392:	4618      	mov	r0, r3
 8022394:	370c      	adds	r7, #12
 8022396:	46bd      	mov	sp, r7
 8022398:	f85d 7b04 	ldr.w	r7, [sp], #4
 802239c:	4770      	bx	lr

0802239e <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 802239e:	b480      	push	{r7}
 80223a0:	b085      	sub	sp, #20
 80223a2:	af00      	add	r7, sp, #0
 80223a4:	4603      	mov	r3, r0
 80223a6:	60b9      	str	r1, [r7, #8]
 80223a8:	607a      	str	r2, [r7, #4]
 80223aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 80223ac:	68bb      	ldr	r3, [r7, #8]
 80223ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80223b2:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 80223b4:	687b      	ldr	r3, [r7, #4]
 80223b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80223ba:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 80223bc:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80223be:	4618      	mov	r0, r3
 80223c0:	3714      	adds	r7, #20
 80223c2:	46bd      	mov	sp, r7
 80223c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223c8:	4770      	bx	lr

080223ca <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 80223ca:	b480      	push	{r7}
 80223cc:	b083      	sub	sp, #12
 80223ce:	af00      	add	r7, sp, #0
 80223d0:	4603      	mov	r3, r0
 80223d2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80223d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80223d6:	4618      	mov	r0, r3
 80223d8:	370c      	adds	r7, #12
 80223da:	46bd      	mov	sp, r7
 80223dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223e0:	4770      	bx	lr

080223e2 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 80223e2:	b480      	push	{r7}
 80223e4:	b083      	sub	sp, #12
 80223e6:	af00      	add	r7, sp, #0
 80223e8:	4603      	mov	r3, r0
 80223ea:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80223ec:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80223ee:	4618      	mov	r0, r3
 80223f0:	370c      	adds	r7, #12
 80223f2:	46bd      	mov	sp, r7
 80223f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223f8:	4770      	bx	lr

080223fa <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80223fa:	b580      	push	{r7, lr}
 80223fc:	b084      	sub	sp, #16
 80223fe:	af00      	add	r7, sp, #0
 8022400:	60b9      	str	r1, [r7, #8]
 8022402:	607a      	str	r2, [r7, #4]
 8022404:	461a      	mov	r2, r3
 8022406:	4603      	mov	r3, r0
 8022408:	73fb      	strb	r3, [r7, #15]
 802240a:	4613      	mov	r3, r2
 802240c:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	ExtFlash_PageRD( (char *)buf, blk_addr*STORAGE_BLK_SIZ, blk_len);
 802240e:	687b      	ldr	r3, [r7, #4]
 8022410:	025b      	lsls	r3, r3, #9
 8022412:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8022416:	4619      	mov	r1, r3
 8022418:	68b8      	ldr	r0, [r7, #8]
 802241a:	f7ec fcbd 	bl	800ed98 <ExtFlash_PageRD>
  return (USBD_OK);
 802241e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8022420:	4618      	mov	r0, r3
 8022422:	3710      	adds	r7, #16
 8022424:	46bd      	mov	sp, r7
 8022426:	bd80      	pop	{r7, pc}

08022428 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8022428:	b580      	push	{r7, lr}
 802242a:	b084      	sub	sp, #16
 802242c:	af00      	add	r7, sp, #0
 802242e:	60b9      	str	r1, [r7, #8]
 8022430:	607a      	str	r2, [r7, #4]
 8022432:	461a      	mov	r2, r3
 8022434:	4603      	mov	r3, r0
 8022436:	73fb      	strb	r3, [r7, #15]
 8022438:	4613      	mov	r3, r2
 802243a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	ExtFlash_PageWR( (char *)buf, blk_addr*STORAGE_BLK_SIZ);
 802243c:	687b      	ldr	r3, [r7, #4]
 802243e:	025b      	lsls	r3, r3, #9
 8022440:	4619      	mov	r1, r3
 8022442:	68b8      	ldr	r0, [r7, #8]
 8022444:	f7ec fd80 	bl	800ef48 <ExtFlash_PageWR>
	return (USBD_OK);
 8022448:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 802244a:	4618      	mov	r0, r3
 802244c:	3710      	adds	r7, #16
 802244e:	46bd      	mov	sp, r7
 8022450:	bd80      	pop	{r7, pc}

08022452 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8022452:	b480      	push	{r7}
 8022454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8022456:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8022458:	4618      	mov	r0, r3
 802245a:	46bd      	mov	sp, r7
 802245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022460:	4770      	bx	lr
	...

08022464 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8022464:	b580      	push	{r7, lr}
 8022466:	b0a0      	sub	sp, #128	; 0x80
 8022468:	af00      	add	r7, sp, #0
 802246a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802246c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8022470:	2200      	movs	r2, #0
 8022472:	601a      	str	r2, [r3, #0]
 8022474:	605a      	str	r2, [r3, #4]
 8022476:	609a      	str	r2, [r3, #8]
 8022478:	60da      	str	r2, [r3, #12]
 802247a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 802247c:	f107 0310 	add.w	r3, r7, #16
 8022480:	225c      	movs	r2, #92	; 0x5c
 8022482:	2100      	movs	r1, #0
 8022484:	4618      	mov	r0, r3
 8022486:	f000 fbd9 	bl	8022c3c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 802248a:	687b      	ldr	r3, [r7, #4]
 802248c:	681b      	ldr	r3, [r3, #0]
 802248e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8022492:	d154      	bne.n	802253e <HAL_PCD_MspInit+0xda>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8022494:	f44f 7380 	mov.w	r3, #256	; 0x100
 8022498:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 25;
 802249a:	2319      	movs	r3, #25
 802249c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 802249e:	23c0      	movs	r3, #192	; 0xc0
 80224a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80224a2:	2302      	movs	r3, #2
 80224a4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 80224a6:	2304      	movs	r3, #4
 80224a8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80224aa:	2301      	movs	r3, #1
 80224ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 80224ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80224b2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80224b4:	f107 0310 	add.w	r3, r7, #16
 80224b8:	4618      	mov	r0, r3
 80224ba:	f7f8 fec1 	bl	801b240 <HAL_RCCEx_PeriphCLKConfig>
 80224be:	4603      	mov	r3, r0
 80224c0:	2b00      	cmp	r3, #0
 80224c2:	d001      	beq.n	80224c8 <HAL_PCD_MspInit+0x64>
    {
      Error_Handler();
 80224c4:	f7f5 fbf2 	bl	8017cac <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80224c8:	2300      	movs	r3, #0
 80224ca:	60fb      	str	r3, [r7, #12]
 80224cc:	4b1e      	ldr	r3, [pc, #120]	; (8022548 <HAL_PCD_MspInit+0xe4>)
 80224ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80224d0:	4a1d      	ldr	r2, [pc, #116]	; (8022548 <HAL_PCD_MspInit+0xe4>)
 80224d2:	f043 0301 	orr.w	r3, r3, #1
 80224d6:	6313      	str	r3, [r2, #48]	; 0x30
 80224d8:	4b1b      	ldr	r3, [pc, #108]	; (8022548 <HAL_PCD_MspInit+0xe4>)
 80224da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80224dc:	f003 0301 	and.w	r3, r3, #1
 80224e0:	60fb      	str	r3, [r7, #12]
 80224e2:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = D__Pin|D_A12_Pin;
 80224e4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80224e8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80224ea:	2302      	movs	r3, #2
 80224ec:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80224ee:	2300      	movs	r3, #0
 80224f0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80224f2:	2303      	movs	r3, #3
 80224f4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80224f6:	230a      	movs	r3, #10
 80224f8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80224fa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80224fe:	4619      	mov	r1, r3
 8022500:	4812      	ldr	r0, [pc, #72]	; (802254c <HAL_PCD_MspInit+0xe8>)
 8022502:	f7f7 f999 	bl	8019838 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8022506:	4b10      	ldr	r3, [pc, #64]	; (8022548 <HAL_PCD_MspInit+0xe4>)
 8022508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802250a:	4a0f      	ldr	r2, [pc, #60]	; (8022548 <HAL_PCD_MspInit+0xe4>)
 802250c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022510:	6353      	str	r3, [r2, #52]	; 0x34
 8022512:	2300      	movs	r3, #0
 8022514:	60bb      	str	r3, [r7, #8]
 8022516:	4b0c      	ldr	r3, [pc, #48]	; (8022548 <HAL_PCD_MspInit+0xe4>)
 8022518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802251a:	4a0b      	ldr	r2, [pc, #44]	; (8022548 <HAL_PCD_MspInit+0xe4>)
 802251c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8022520:	6453      	str	r3, [r2, #68]	; 0x44
 8022522:	4b09      	ldr	r3, [pc, #36]	; (8022548 <HAL_PCD_MspInit+0xe4>)
 8022524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802252a:	60bb      	str	r3, [r7, #8]
 802252c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 802252e:	2200      	movs	r2, #0
 8022530:	2100      	movs	r1, #0
 8022532:	2043      	movs	r0, #67	; 0x43
 8022534:	f7f6 fabf 	bl	8018ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8022538:	2043      	movs	r0, #67	; 0x43
 802253a:	f7f6 fad8 	bl	8018aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 802253e:	bf00      	nop
 8022540:	3780      	adds	r7, #128	; 0x80
 8022542:	46bd      	mov	sp, r7
 8022544:	bd80      	pop	{r7, pc}
 8022546:	bf00      	nop
 8022548:	40023800 	.word	0x40023800
 802254c:	40020000 	.word	0x40020000

08022550 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022550:	b580      	push	{r7, lr}
 8022552:	b082      	sub	sp, #8
 8022554:	af00      	add	r7, sp, #0
 8022556:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8022558:	687b      	ldr	r3, [r7, #4]
 802255a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 802255e:	687b      	ldr	r3, [r7, #4]
 8022560:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8022564:	4619      	mov	r1, r3
 8022566:	4610      	mov	r0, r2
 8022568:	f7fe fce9 	bl	8020f3e <USBD_LL_SetupStage>
}
 802256c:	bf00      	nop
 802256e:	3708      	adds	r7, #8
 8022570:	46bd      	mov	sp, r7
 8022572:	bd80      	pop	{r7, pc}

08022574 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022574:	b580      	push	{r7, lr}
 8022576:	b082      	sub	sp, #8
 8022578:	af00      	add	r7, sp, #0
 802257a:	6078      	str	r0, [r7, #4]
 802257c:	460b      	mov	r3, r1
 802257e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8022580:	687b      	ldr	r3, [r7, #4]
 8022582:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8022586:	78fa      	ldrb	r2, [r7, #3]
 8022588:	6879      	ldr	r1, [r7, #4]
 802258a:	4613      	mov	r3, r2
 802258c:	00db      	lsls	r3, r3, #3
 802258e:	1a9b      	subs	r3, r3, r2
 8022590:	009b      	lsls	r3, r3, #2
 8022592:	440b      	add	r3, r1
 8022594:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8022598:	681a      	ldr	r2, [r3, #0]
 802259a:	78fb      	ldrb	r3, [r7, #3]
 802259c:	4619      	mov	r1, r3
 802259e:	f7fe fd23 	bl	8020fe8 <USBD_LL_DataOutStage>
}
 80225a2:	bf00      	nop
 80225a4:	3708      	adds	r7, #8
 80225a6:	46bd      	mov	sp, r7
 80225a8:	bd80      	pop	{r7, pc}

080225aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80225aa:	b580      	push	{r7, lr}
 80225ac:	b082      	sub	sp, #8
 80225ae:	af00      	add	r7, sp, #0
 80225b0:	6078      	str	r0, [r7, #4]
 80225b2:	460b      	mov	r3, r1
 80225b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80225b6:	687b      	ldr	r3, [r7, #4]
 80225b8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80225bc:	78fa      	ldrb	r2, [r7, #3]
 80225be:	6879      	ldr	r1, [r7, #4]
 80225c0:	4613      	mov	r3, r2
 80225c2:	00db      	lsls	r3, r3, #3
 80225c4:	1a9b      	subs	r3, r3, r2
 80225c6:	009b      	lsls	r3, r3, #2
 80225c8:	440b      	add	r3, r1
 80225ca:	3348      	adds	r3, #72	; 0x48
 80225cc:	681a      	ldr	r2, [r3, #0]
 80225ce:	78fb      	ldrb	r3, [r7, #3]
 80225d0:	4619      	mov	r1, r3
 80225d2:	f7fe fd6c 	bl	80210ae <USBD_LL_DataInStage>
}
 80225d6:	bf00      	nop
 80225d8:	3708      	adds	r7, #8
 80225da:	46bd      	mov	sp, r7
 80225dc:	bd80      	pop	{r7, pc}

080225de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80225de:	b580      	push	{r7, lr}
 80225e0:	b082      	sub	sp, #8
 80225e2:	af00      	add	r7, sp, #0
 80225e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80225e6:	687b      	ldr	r3, [r7, #4]
 80225e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80225ec:	4618      	mov	r0, r3
 80225ee:	f7fe fe80 	bl	80212f2 <USBD_LL_SOF>
}
 80225f2:	bf00      	nop
 80225f4:	3708      	adds	r7, #8
 80225f6:	46bd      	mov	sp, r7
 80225f8:	bd80      	pop	{r7, pc}

080225fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80225fa:	b580      	push	{r7, lr}
 80225fc:	b084      	sub	sp, #16
 80225fe:	af00      	add	r7, sp, #0
 8022600:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8022602:	2301      	movs	r3, #1
 8022604:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8022606:	687b      	ldr	r3, [r7, #4]
 8022608:	68db      	ldr	r3, [r3, #12]
 802260a:	2b00      	cmp	r3, #0
 802260c:	d102      	bne.n	8022614 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 802260e:	2300      	movs	r3, #0
 8022610:	73fb      	strb	r3, [r7, #15]
 8022612:	e008      	b.n	8022626 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8022614:	687b      	ldr	r3, [r7, #4]
 8022616:	68db      	ldr	r3, [r3, #12]
 8022618:	2b02      	cmp	r3, #2
 802261a:	d102      	bne.n	8022622 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 802261c:	2301      	movs	r3, #1
 802261e:	73fb      	strb	r3, [r7, #15]
 8022620:	e001      	b.n	8022626 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8022622:	f7f5 fb43 	bl	8017cac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8022626:	687b      	ldr	r3, [r7, #4]
 8022628:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 802262c:	7bfa      	ldrb	r2, [r7, #15]
 802262e:	4611      	mov	r1, r2
 8022630:	4618      	mov	r0, r3
 8022632:	f7fe fe20 	bl	8021276 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8022636:	687b      	ldr	r3, [r7, #4]
 8022638:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 802263c:	4618      	mov	r0, r3
 802263e:	f7fe fdcc 	bl	80211da <USBD_LL_Reset>
}
 8022642:	bf00      	nop
 8022644:	3710      	adds	r7, #16
 8022646:	46bd      	mov	sp, r7
 8022648:	bd80      	pop	{r7, pc}
	...

0802264c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802264c:	b580      	push	{r7, lr}
 802264e:	b082      	sub	sp, #8
 8022650:	af00      	add	r7, sp, #0
 8022652:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8022654:	687b      	ldr	r3, [r7, #4]
 8022656:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 802265a:	4618      	mov	r0, r3
 802265c:	f7fe fe1b 	bl	8021296 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8022660:	687b      	ldr	r3, [r7, #4]
 8022662:	681b      	ldr	r3, [r3, #0]
 8022664:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8022668:	681b      	ldr	r3, [r3, #0]
 802266a:	687a      	ldr	r2, [r7, #4]
 802266c:	6812      	ldr	r2, [r2, #0]
 802266e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8022672:	f043 0301 	orr.w	r3, r3, #1
 8022676:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8022678:	687b      	ldr	r3, [r7, #4]
 802267a:	6a1b      	ldr	r3, [r3, #32]
 802267c:	2b00      	cmp	r3, #0
 802267e:	d005      	beq.n	802268c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8022680:	4b04      	ldr	r3, [pc, #16]	; (8022694 <HAL_PCD_SuspendCallback+0x48>)
 8022682:	691b      	ldr	r3, [r3, #16]
 8022684:	4a03      	ldr	r2, [pc, #12]	; (8022694 <HAL_PCD_SuspendCallback+0x48>)
 8022686:	f043 0306 	orr.w	r3, r3, #6
 802268a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 802268c:	bf00      	nop
 802268e:	3708      	adds	r7, #8
 8022690:	46bd      	mov	sp, r7
 8022692:	bd80      	pop	{r7, pc}
 8022694:	e000ed00 	.word	0xe000ed00

08022698 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022698:	b580      	push	{r7, lr}
 802269a:	b082      	sub	sp, #8
 802269c:	af00      	add	r7, sp, #0
 802269e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80226a0:	687b      	ldr	r3, [r7, #4]
 80226a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80226a6:	4618      	mov	r0, r3
 80226a8:	f7fe fe0b 	bl	80212c2 <USBD_LL_Resume>
}
 80226ac:	bf00      	nop
 80226ae:	3708      	adds	r7, #8
 80226b0:	46bd      	mov	sp, r7
 80226b2:	bd80      	pop	{r7, pc}

080226b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80226b4:	b580      	push	{r7, lr}
 80226b6:	b082      	sub	sp, #8
 80226b8:	af00      	add	r7, sp, #0
 80226ba:	6078      	str	r0, [r7, #4]
 80226bc:	460b      	mov	r3, r1
 80226be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80226c0:	687b      	ldr	r3, [r7, #4]
 80226c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80226c6:	78fa      	ldrb	r2, [r7, #3]
 80226c8:	4611      	mov	r1, r2
 80226ca:	4618      	mov	r0, r3
 80226cc:	f7fe fe59 	bl	8021382 <USBD_LL_IsoOUTIncomplete>
}
 80226d0:	bf00      	nop
 80226d2:	3708      	adds	r7, #8
 80226d4:	46bd      	mov	sp, r7
 80226d6:	bd80      	pop	{r7, pc}

080226d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80226d8:	b580      	push	{r7, lr}
 80226da:	b082      	sub	sp, #8
 80226dc:	af00      	add	r7, sp, #0
 80226de:	6078      	str	r0, [r7, #4]
 80226e0:	460b      	mov	r3, r1
 80226e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80226e4:	687b      	ldr	r3, [r7, #4]
 80226e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80226ea:	78fa      	ldrb	r2, [r7, #3]
 80226ec:	4611      	mov	r1, r2
 80226ee:	4618      	mov	r0, r3
 80226f0:	f7fe fe21 	bl	8021336 <USBD_LL_IsoINIncomplete>
}
 80226f4:	bf00      	nop
 80226f6:	3708      	adds	r7, #8
 80226f8:	46bd      	mov	sp, r7
 80226fa:	bd80      	pop	{r7, pc}

080226fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80226fc:	b580      	push	{r7, lr}
 80226fe:	b082      	sub	sp, #8
 8022700:	af00      	add	r7, sp, #0
 8022702:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8022704:	687b      	ldr	r3, [r7, #4]
 8022706:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 802270a:	4618      	mov	r0, r3
 802270c:	f7fe fe5f 	bl	80213ce <USBD_LL_DevConnected>
}
 8022710:	bf00      	nop
 8022712:	3708      	adds	r7, #8
 8022714:	46bd      	mov	sp, r7
 8022716:	bd80      	pop	{r7, pc}

08022718 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022718:	b580      	push	{r7, lr}
 802271a:	b082      	sub	sp, #8
 802271c:	af00      	add	r7, sp, #0
 802271e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8022720:	687b      	ldr	r3, [r7, #4]
 8022722:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022726:	4618      	mov	r0, r3
 8022728:	f7fe fe5c 	bl	80213e4 <USBD_LL_DevDisconnected>
}
 802272c:	bf00      	nop
 802272e:	3708      	adds	r7, #8
 8022730:	46bd      	mov	sp, r7
 8022732:	bd80      	pop	{r7, pc}

08022734 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8022734:	b580      	push	{r7, lr}
 8022736:	b082      	sub	sp, #8
 8022738:	af00      	add	r7, sp, #0
 802273a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 802273c:	687b      	ldr	r3, [r7, #4]
 802273e:	781b      	ldrb	r3, [r3, #0]
 8022740:	2b00      	cmp	r3, #0
 8022742:	d13c      	bne.n	80227be <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8022744:	4a20      	ldr	r2, [pc, #128]	; (80227c8 <USBD_LL_Init+0x94>)
 8022746:	687b      	ldr	r3, [r7, #4]
 8022748:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 802274c:	687b      	ldr	r3, [r7, #4]
 802274e:	4a1e      	ldr	r2, [pc, #120]	; (80227c8 <USBD_LL_Init+0x94>)
 8022750:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8022754:	4b1c      	ldr	r3, [pc, #112]	; (80227c8 <USBD_LL_Init+0x94>)
 8022756:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 802275a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 802275c:	4b1a      	ldr	r3, [pc, #104]	; (80227c8 <USBD_LL_Init+0x94>)
 802275e:	2206      	movs	r2, #6
 8022760:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8022762:	4b19      	ldr	r3, [pc, #100]	; (80227c8 <USBD_LL_Init+0x94>)
 8022764:	2202      	movs	r2, #2
 8022766:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8022768:	4b17      	ldr	r3, [pc, #92]	; (80227c8 <USBD_LL_Init+0x94>)
 802276a:	2200      	movs	r2, #0
 802276c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 802276e:	4b16      	ldr	r3, [pc, #88]	; (80227c8 <USBD_LL_Init+0x94>)
 8022770:	2202      	movs	r2, #2
 8022772:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8022774:	4b14      	ldr	r3, [pc, #80]	; (80227c8 <USBD_LL_Init+0x94>)
 8022776:	2200      	movs	r2, #0
 8022778:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 802277a:	4b13      	ldr	r3, [pc, #76]	; (80227c8 <USBD_LL_Init+0x94>)
 802277c:	2200      	movs	r2, #0
 802277e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8022780:	4b11      	ldr	r3, [pc, #68]	; (80227c8 <USBD_LL_Init+0x94>)
 8022782:	2200      	movs	r2, #0
 8022784:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8022786:	4b10      	ldr	r3, [pc, #64]	; (80227c8 <USBD_LL_Init+0x94>)
 8022788:	2200      	movs	r2, #0
 802278a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 802278c:	4b0e      	ldr	r3, [pc, #56]	; (80227c8 <USBD_LL_Init+0x94>)
 802278e:	2200      	movs	r2, #0
 8022790:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8022792:	480d      	ldr	r0, [pc, #52]	; (80227c8 <USBD_LL_Init+0x94>)
 8022794:	f7f7 fa15 	bl	8019bc2 <HAL_PCD_Init>
 8022798:	4603      	mov	r3, r0
 802279a:	2b00      	cmp	r3, #0
 802279c:	d001      	beq.n	80227a2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 802279e:	f7f5 fa85 	bl	8017cac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80227a2:	2180      	movs	r1, #128	; 0x80
 80227a4:	4808      	ldr	r0, [pc, #32]	; (80227c8 <USBD_LL_Init+0x94>)
 80227a6:	f7f8 fbd4 	bl	801af52 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80227aa:	2240      	movs	r2, #64	; 0x40
 80227ac:	2100      	movs	r1, #0
 80227ae:	4806      	ldr	r0, [pc, #24]	; (80227c8 <USBD_LL_Init+0x94>)
 80227b0:	f7f8 fb88 	bl	801aec4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80227b4:	2280      	movs	r2, #128	; 0x80
 80227b6:	2101      	movs	r1, #1
 80227b8:	4803      	ldr	r0, [pc, #12]	; (80227c8 <USBD_LL_Init+0x94>)
 80227ba:	f7f8 fb83 	bl	801aec4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80227be:	2300      	movs	r3, #0
}
 80227c0:	4618      	mov	r0, r3
 80227c2:	3708      	adds	r7, #8
 80227c4:	46bd      	mov	sp, r7
 80227c6:	bd80      	pop	{r7, pc}
 80227c8:	2000710c 	.word	0x2000710c

080227cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80227cc:	b580      	push	{r7, lr}
 80227ce:	b084      	sub	sp, #16
 80227d0:	af00      	add	r7, sp, #0
 80227d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80227d4:	2300      	movs	r3, #0
 80227d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80227d8:	2300      	movs	r3, #0
 80227da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80227dc:	687b      	ldr	r3, [r7, #4]
 80227de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80227e2:	4618      	mov	r0, r3
 80227e4:	f7f7 fb11 	bl	8019e0a <HAL_PCD_Start>
 80227e8:	4603      	mov	r3, r0
 80227ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80227ec:	7bfb      	ldrb	r3, [r7, #15]
 80227ee:	4618      	mov	r0, r3
 80227f0:	f000 f9b0 	bl	8022b54 <USBD_Get_USB_Status>
 80227f4:	4603      	mov	r3, r0
 80227f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80227f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80227fa:	4618      	mov	r0, r3
 80227fc:	3710      	adds	r7, #16
 80227fe:	46bd      	mov	sp, r7
 8022800:	bd80      	pop	{r7, pc}

08022802 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8022802:	b580      	push	{r7, lr}
 8022804:	b084      	sub	sp, #16
 8022806:	af00      	add	r7, sp, #0
 8022808:	6078      	str	r0, [r7, #4]
 802280a:	4608      	mov	r0, r1
 802280c:	4611      	mov	r1, r2
 802280e:	461a      	mov	r2, r3
 8022810:	4603      	mov	r3, r0
 8022812:	70fb      	strb	r3, [r7, #3]
 8022814:	460b      	mov	r3, r1
 8022816:	70bb      	strb	r3, [r7, #2]
 8022818:	4613      	mov	r3, r2
 802281a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802281c:	2300      	movs	r3, #0
 802281e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022820:	2300      	movs	r3, #0
 8022822:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8022824:	687b      	ldr	r3, [r7, #4]
 8022826:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 802282a:	78bb      	ldrb	r3, [r7, #2]
 802282c:	883a      	ldrh	r2, [r7, #0]
 802282e:	78f9      	ldrb	r1, [r7, #3]
 8022830:	f7f7 ff22 	bl	801a678 <HAL_PCD_EP_Open>
 8022834:	4603      	mov	r3, r0
 8022836:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022838:	7bfb      	ldrb	r3, [r7, #15]
 802283a:	4618      	mov	r0, r3
 802283c:	f000 f98a 	bl	8022b54 <USBD_Get_USB_Status>
 8022840:	4603      	mov	r3, r0
 8022842:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022844:	7bbb      	ldrb	r3, [r7, #14]
}
 8022846:	4618      	mov	r0, r3
 8022848:	3710      	adds	r7, #16
 802284a:	46bd      	mov	sp, r7
 802284c:	bd80      	pop	{r7, pc}

0802284e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802284e:	b580      	push	{r7, lr}
 8022850:	b084      	sub	sp, #16
 8022852:	af00      	add	r7, sp, #0
 8022854:	6078      	str	r0, [r7, #4]
 8022856:	460b      	mov	r3, r1
 8022858:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802285a:	2300      	movs	r3, #0
 802285c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802285e:	2300      	movs	r3, #0
 8022860:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8022862:	687b      	ldr	r3, [r7, #4]
 8022864:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022868:	78fa      	ldrb	r2, [r7, #3]
 802286a:	4611      	mov	r1, r2
 802286c:	4618      	mov	r0, r3
 802286e:	f7f7 ff6b 	bl	801a748 <HAL_PCD_EP_Close>
 8022872:	4603      	mov	r3, r0
 8022874:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022876:	7bfb      	ldrb	r3, [r7, #15]
 8022878:	4618      	mov	r0, r3
 802287a:	f000 f96b 	bl	8022b54 <USBD_Get_USB_Status>
 802287e:	4603      	mov	r3, r0
 8022880:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022882:	7bbb      	ldrb	r3, [r7, #14]
}
 8022884:	4618      	mov	r0, r3
 8022886:	3710      	adds	r7, #16
 8022888:	46bd      	mov	sp, r7
 802288a:	bd80      	pop	{r7, pc}

0802288c <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802288c:	b580      	push	{r7, lr}
 802288e:	b084      	sub	sp, #16
 8022890:	af00      	add	r7, sp, #0
 8022892:	6078      	str	r0, [r7, #4]
 8022894:	460b      	mov	r3, r1
 8022896:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022898:	2300      	movs	r3, #0
 802289a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802289c:	2300      	movs	r3, #0
 802289e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80228a0:	687b      	ldr	r3, [r7, #4]
 80228a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80228a6:	78fa      	ldrb	r2, [r7, #3]
 80228a8:	4611      	mov	r1, r2
 80228aa:	4618      	mov	r0, r3
 80228ac:	f7f8 f8fd 	bl	801aaaa <HAL_PCD_EP_Flush>
 80228b0:	4603      	mov	r3, r0
 80228b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80228b4:	7bfb      	ldrb	r3, [r7, #15]
 80228b6:	4618      	mov	r0, r3
 80228b8:	f000 f94c 	bl	8022b54 <USBD_Get_USB_Status>
 80228bc:	4603      	mov	r3, r0
 80228be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80228c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80228c2:	4618      	mov	r0, r3
 80228c4:	3710      	adds	r7, #16
 80228c6:	46bd      	mov	sp, r7
 80228c8:	bd80      	pop	{r7, pc}

080228ca <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80228ca:	b580      	push	{r7, lr}
 80228cc:	b084      	sub	sp, #16
 80228ce:	af00      	add	r7, sp, #0
 80228d0:	6078      	str	r0, [r7, #4]
 80228d2:	460b      	mov	r3, r1
 80228d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80228d6:	2300      	movs	r3, #0
 80228d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80228da:	2300      	movs	r3, #0
 80228dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80228de:	687b      	ldr	r3, [r7, #4]
 80228e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80228e4:	78fa      	ldrb	r2, [r7, #3]
 80228e6:	4611      	mov	r1, r2
 80228e8:	4618      	mov	r0, r3
 80228ea:	f7f8 f824 	bl	801a936 <HAL_PCD_EP_SetStall>
 80228ee:	4603      	mov	r3, r0
 80228f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80228f2:	7bfb      	ldrb	r3, [r7, #15]
 80228f4:	4618      	mov	r0, r3
 80228f6:	f000 f92d 	bl	8022b54 <USBD_Get_USB_Status>
 80228fa:	4603      	mov	r3, r0
 80228fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80228fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8022900:	4618      	mov	r0, r3
 8022902:	3710      	adds	r7, #16
 8022904:	46bd      	mov	sp, r7
 8022906:	bd80      	pop	{r7, pc}

08022908 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022908:	b580      	push	{r7, lr}
 802290a:	b084      	sub	sp, #16
 802290c:	af00      	add	r7, sp, #0
 802290e:	6078      	str	r0, [r7, #4]
 8022910:	460b      	mov	r3, r1
 8022912:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022914:	2300      	movs	r3, #0
 8022916:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022918:	2300      	movs	r3, #0
 802291a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 802291c:	687b      	ldr	r3, [r7, #4]
 802291e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022922:	78fa      	ldrb	r2, [r7, #3]
 8022924:	4611      	mov	r1, r2
 8022926:	4618      	mov	r0, r3
 8022928:	f7f8 f869 	bl	801a9fe <HAL_PCD_EP_ClrStall>
 802292c:	4603      	mov	r3, r0
 802292e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022930:	7bfb      	ldrb	r3, [r7, #15]
 8022932:	4618      	mov	r0, r3
 8022934:	f000 f90e 	bl	8022b54 <USBD_Get_USB_Status>
 8022938:	4603      	mov	r3, r0
 802293a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802293c:	7bbb      	ldrb	r3, [r7, #14]
}
 802293e:	4618      	mov	r0, r3
 8022940:	3710      	adds	r7, #16
 8022942:	46bd      	mov	sp, r7
 8022944:	bd80      	pop	{r7, pc}

08022946 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022946:	b480      	push	{r7}
 8022948:	b085      	sub	sp, #20
 802294a:	af00      	add	r7, sp, #0
 802294c:	6078      	str	r0, [r7, #4]
 802294e:	460b      	mov	r3, r1
 8022950:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8022952:	687b      	ldr	r3, [r7, #4]
 8022954:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022958:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 802295a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 802295e:	2b00      	cmp	r3, #0
 8022960:	da0b      	bge.n	802297a <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8022962:	78fb      	ldrb	r3, [r7, #3]
 8022964:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8022968:	68f9      	ldr	r1, [r7, #12]
 802296a:	4613      	mov	r3, r2
 802296c:	00db      	lsls	r3, r3, #3
 802296e:	1a9b      	subs	r3, r3, r2
 8022970:	009b      	lsls	r3, r3, #2
 8022972:	440b      	add	r3, r1
 8022974:	333e      	adds	r3, #62	; 0x3e
 8022976:	781b      	ldrb	r3, [r3, #0]
 8022978:	e00b      	b.n	8022992 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 802297a:	78fb      	ldrb	r3, [r7, #3]
 802297c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8022980:	68f9      	ldr	r1, [r7, #12]
 8022982:	4613      	mov	r3, r2
 8022984:	00db      	lsls	r3, r3, #3
 8022986:	1a9b      	subs	r3, r3, r2
 8022988:	009b      	lsls	r3, r3, #2
 802298a:	440b      	add	r3, r1
 802298c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8022990:	781b      	ldrb	r3, [r3, #0]
  }
}
 8022992:	4618      	mov	r0, r3
 8022994:	3714      	adds	r7, #20
 8022996:	46bd      	mov	sp, r7
 8022998:	f85d 7b04 	ldr.w	r7, [sp], #4
 802299c:	4770      	bx	lr

0802299e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 802299e:	b580      	push	{r7, lr}
 80229a0:	b084      	sub	sp, #16
 80229a2:	af00      	add	r7, sp, #0
 80229a4:	6078      	str	r0, [r7, #4]
 80229a6:	460b      	mov	r3, r1
 80229a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80229aa:	2300      	movs	r3, #0
 80229ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80229ae:	2300      	movs	r3, #0
 80229b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80229b2:	687b      	ldr	r3, [r7, #4]
 80229b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80229b8:	78fa      	ldrb	r2, [r7, #3]
 80229ba:	4611      	mov	r1, r2
 80229bc:	4618      	mov	r0, r3
 80229be:	f7f7 fe36 	bl	801a62e <HAL_PCD_SetAddress>
 80229c2:	4603      	mov	r3, r0
 80229c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80229c6:	7bfb      	ldrb	r3, [r7, #15]
 80229c8:	4618      	mov	r0, r3
 80229ca:	f000 f8c3 	bl	8022b54 <USBD_Get_USB_Status>
 80229ce:	4603      	mov	r3, r0
 80229d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80229d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80229d4:	4618      	mov	r0, r3
 80229d6:	3710      	adds	r7, #16
 80229d8:	46bd      	mov	sp, r7
 80229da:	bd80      	pop	{r7, pc}

080229dc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80229dc:	b580      	push	{r7, lr}
 80229de:	b086      	sub	sp, #24
 80229e0:	af00      	add	r7, sp, #0
 80229e2:	60f8      	str	r0, [r7, #12]
 80229e4:	607a      	str	r2, [r7, #4]
 80229e6:	603b      	str	r3, [r7, #0]
 80229e8:	460b      	mov	r3, r1
 80229ea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80229ec:	2300      	movs	r3, #0
 80229ee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80229f0:	2300      	movs	r3, #0
 80229f2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80229f4:	68fb      	ldr	r3, [r7, #12]
 80229f6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80229fa:	7af9      	ldrb	r1, [r7, #11]
 80229fc:	683b      	ldr	r3, [r7, #0]
 80229fe:	687a      	ldr	r2, [r7, #4]
 8022a00:	f7f7 ff4f 	bl	801a8a2 <HAL_PCD_EP_Transmit>
 8022a04:	4603      	mov	r3, r0
 8022a06:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022a08:	7dfb      	ldrb	r3, [r7, #23]
 8022a0a:	4618      	mov	r0, r3
 8022a0c:	f000 f8a2 	bl	8022b54 <USBD_Get_USB_Status>
 8022a10:	4603      	mov	r3, r0
 8022a12:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8022a14:	7dbb      	ldrb	r3, [r7, #22]
}
 8022a16:	4618      	mov	r0, r3
 8022a18:	3718      	adds	r7, #24
 8022a1a:	46bd      	mov	sp, r7
 8022a1c:	bd80      	pop	{r7, pc}

08022a1e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8022a1e:	b580      	push	{r7, lr}
 8022a20:	b086      	sub	sp, #24
 8022a22:	af00      	add	r7, sp, #0
 8022a24:	60f8      	str	r0, [r7, #12]
 8022a26:	607a      	str	r2, [r7, #4]
 8022a28:	603b      	str	r3, [r7, #0]
 8022a2a:	460b      	mov	r3, r1
 8022a2c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022a2e:	2300      	movs	r3, #0
 8022a30:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022a32:	2300      	movs	r3, #0
 8022a34:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8022a36:	68fb      	ldr	r3, [r7, #12]
 8022a38:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8022a3c:	7af9      	ldrb	r1, [r7, #11]
 8022a3e:	683b      	ldr	r3, [r7, #0]
 8022a40:	687a      	ldr	r2, [r7, #4]
 8022a42:	f7f7 fecb 	bl	801a7dc <HAL_PCD_EP_Receive>
 8022a46:	4603      	mov	r3, r0
 8022a48:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022a4a:	7dfb      	ldrb	r3, [r7, #23]
 8022a4c:	4618      	mov	r0, r3
 8022a4e:	f000 f881 	bl	8022b54 <USBD_Get_USB_Status>
 8022a52:	4603      	mov	r3, r0
 8022a54:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8022a56:	7dbb      	ldrb	r3, [r7, #22]
}
 8022a58:	4618      	mov	r0, r3
 8022a5a:	3718      	adds	r7, #24
 8022a5c:	46bd      	mov	sp, r7
 8022a5e:	bd80      	pop	{r7, pc}

08022a60 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022a60:	b580      	push	{r7, lr}
 8022a62:	b082      	sub	sp, #8
 8022a64:	af00      	add	r7, sp, #0
 8022a66:	6078      	str	r0, [r7, #4]
 8022a68:	460b      	mov	r3, r1
 8022a6a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8022a6c:	687b      	ldr	r3, [r7, #4]
 8022a6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022a72:	78fa      	ldrb	r2, [r7, #3]
 8022a74:	4611      	mov	r1, r2
 8022a76:	4618      	mov	r0, r3
 8022a78:	f7f7 fefb 	bl	801a872 <HAL_PCD_EP_GetRxCount>
 8022a7c:	4603      	mov	r3, r0
}
 8022a7e:	4618      	mov	r0, r3
 8022a80:	3708      	adds	r7, #8
 8022a82:	46bd      	mov	sp, r7
 8022a84:	bd80      	pop	{r7, pc}
	...

08022a88 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8022a88:	b580      	push	{r7, lr}
 8022a8a:	b082      	sub	sp, #8
 8022a8c:	af00      	add	r7, sp, #0
 8022a8e:	6078      	str	r0, [r7, #4]
 8022a90:	460b      	mov	r3, r1
 8022a92:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8022a94:	78fb      	ldrb	r3, [r7, #3]
 8022a96:	2b00      	cmp	r3, #0
 8022a98:	d002      	beq.n	8022aa0 <HAL_PCDEx_LPM_Callback+0x18>
 8022a9a:	2b01      	cmp	r3, #1
 8022a9c:	d01f      	beq.n	8022ade <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8022a9e:	e03b      	b.n	8022b18 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8022aa0:	687b      	ldr	r3, [r7, #4]
 8022aa2:	6a1b      	ldr	r3, [r3, #32]
 8022aa4:	2b00      	cmp	r3, #0
 8022aa6:	d007      	beq.n	8022ab8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8022aa8:	f7f4 fc96 	bl	80173d8 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8022aac:	4b1c      	ldr	r3, [pc, #112]	; (8022b20 <HAL_PCDEx_LPM_Callback+0x98>)
 8022aae:	691b      	ldr	r3, [r3, #16]
 8022ab0:	4a1b      	ldr	r2, [pc, #108]	; (8022b20 <HAL_PCDEx_LPM_Callback+0x98>)
 8022ab2:	f023 0306 	bic.w	r3, r3, #6
 8022ab6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8022ab8:	687b      	ldr	r3, [r7, #4]
 8022aba:	681b      	ldr	r3, [r3, #0]
 8022abc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8022ac0:	681b      	ldr	r3, [r3, #0]
 8022ac2:	687a      	ldr	r2, [r7, #4]
 8022ac4:	6812      	ldr	r2, [r2, #0]
 8022ac6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8022aca:	f023 0301 	bic.w	r3, r3, #1
 8022ace:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8022ad0:	687b      	ldr	r3, [r7, #4]
 8022ad2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022ad6:	4618      	mov	r0, r3
 8022ad8:	f7fe fbf3 	bl	80212c2 <USBD_LL_Resume>
    break;
 8022adc:	e01c      	b.n	8022b18 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8022ade:	687b      	ldr	r3, [r7, #4]
 8022ae0:	681b      	ldr	r3, [r3, #0]
 8022ae2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8022ae6:	681b      	ldr	r3, [r3, #0]
 8022ae8:	687a      	ldr	r2, [r7, #4]
 8022aea:	6812      	ldr	r2, [r2, #0]
 8022aec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8022af0:	f043 0301 	orr.w	r3, r3, #1
 8022af4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8022af6:	687b      	ldr	r3, [r7, #4]
 8022af8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022afc:	4618      	mov	r0, r3
 8022afe:	f7fe fbca 	bl	8021296 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8022b02:	687b      	ldr	r3, [r7, #4]
 8022b04:	6a1b      	ldr	r3, [r3, #32]
 8022b06:	2b00      	cmp	r3, #0
 8022b08:	d005      	beq.n	8022b16 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8022b0a:	4b05      	ldr	r3, [pc, #20]	; (8022b20 <HAL_PCDEx_LPM_Callback+0x98>)
 8022b0c:	691b      	ldr	r3, [r3, #16]
 8022b0e:	4a04      	ldr	r2, [pc, #16]	; (8022b20 <HAL_PCDEx_LPM_Callback+0x98>)
 8022b10:	f043 0306 	orr.w	r3, r3, #6
 8022b14:	6113      	str	r3, [r2, #16]
    break;
 8022b16:	bf00      	nop
}
 8022b18:	bf00      	nop
 8022b1a:	3708      	adds	r7, #8
 8022b1c:	46bd      	mov	sp, r7
 8022b1e:	bd80      	pop	{r7, pc}
 8022b20:	e000ed00 	.word	0xe000ed00

08022b24 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8022b24:	b480      	push	{r7}
 8022b26:	b083      	sub	sp, #12
 8022b28:	af00      	add	r7, sp, #0
 8022b2a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8022b2c:	4b03      	ldr	r3, [pc, #12]	; (8022b3c <USBD_static_malloc+0x18>)
}
 8022b2e:	4618      	mov	r0, r3
 8022b30:	370c      	adds	r7, #12
 8022b32:	46bd      	mov	sp, r7
 8022b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b38:	4770      	bx	lr
 8022b3a:	bf00      	nop
 8022b3c:	200007b0 	.word	0x200007b0

08022b40 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8022b40:	b480      	push	{r7}
 8022b42:	b083      	sub	sp, #12
 8022b44:	af00      	add	r7, sp, #0
 8022b46:	6078      	str	r0, [r7, #4]

}
 8022b48:	bf00      	nop
 8022b4a:	370c      	adds	r7, #12
 8022b4c:	46bd      	mov	sp, r7
 8022b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b52:	4770      	bx	lr

08022b54 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8022b54:	b480      	push	{r7}
 8022b56:	b085      	sub	sp, #20
 8022b58:	af00      	add	r7, sp, #0
 8022b5a:	4603      	mov	r3, r0
 8022b5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022b5e:	2300      	movs	r3, #0
 8022b60:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8022b62:	79fb      	ldrb	r3, [r7, #7]
 8022b64:	2b03      	cmp	r3, #3
 8022b66:	d817      	bhi.n	8022b98 <USBD_Get_USB_Status+0x44>
 8022b68:	a201      	add	r2, pc, #4	; (adr r2, 8022b70 <USBD_Get_USB_Status+0x1c>)
 8022b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022b6e:	bf00      	nop
 8022b70:	08022b81 	.word	0x08022b81
 8022b74:	08022b87 	.word	0x08022b87
 8022b78:	08022b8d 	.word	0x08022b8d
 8022b7c:	08022b93 	.word	0x08022b93
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8022b80:	2300      	movs	r3, #0
 8022b82:	73fb      	strb	r3, [r7, #15]
    break;
 8022b84:	e00b      	b.n	8022b9e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8022b86:	2303      	movs	r3, #3
 8022b88:	73fb      	strb	r3, [r7, #15]
    break;
 8022b8a:	e008      	b.n	8022b9e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8022b8c:	2301      	movs	r3, #1
 8022b8e:	73fb      	strb	r3, [r7, #15]
    break;
 8022b90:	e005      	b.n	8022b9e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8022b92:	2303      	movs	r3, #3
 8022b94:	73fb      	strb	r3, [r7, #15]
    break;
 8022b96:	e002      	b.n	8022b9e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8022b98:	2303      	movs	r3, #3
 8022b9a:	73fb      	strb	r3, [r7, #15]
    break;
 8022b9c:	bf00      	nop
  }
  return usb_status;
 8022b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8022ba0:	4618      	mov	r0, r3
 8022ba2:	3714      	adds	r7, #20
 8022ba4:	46bd      	mov	sp, r7
 8022ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022baa:	4770      	bx	lr

08022bac <__errno>:
 8022bac:	4b01      	ldr	r3, [pc, #4]	; (8022bb4 <__errno+0x8>)
 8022bae:	6818      	ldr	r0, [r3, #0]
 8022bb0:	4770      	bx	lr
 8022bb2:	bf00      	nop
 8022bb4:	200006fc 	.word	0x200006fc

08022bb8 <__libc_init_array>:
 8022bb8:	b570      	push	{r4, r5, r6, lr}
 8022bba:	4d0d      	ldr	r5, [pc, #52]	; (8022bf0 <__libc_init_array+0x38>)
 8022bbc:	4c0d      	ldr	r4, [pc, #52]	; (8022bf4 <__libc_init_array+0x3c>)
 8022bbe:	1b64      	subs	r4, r4, r5
 8022bc0:	10a4      	asrs	r4, r4, #2
 8022bc2:	2600      	movs	r6, #0
 8022bc4:	42a6      	cmp	r6, r4
 8022bc6:	d109      	bne.n	8022bdc <__libc_init_array+0x24>
 8022bc8:	4d0b      	ldr	r5, [pc, #44]	; (8022bf8 <__libc_init_array+0x40>)
 8022bca:	4c0c      	ldr	r4, [pc, #48]	; (8022bfc <__libc_init_array+0x44>)
 8022bcc:	f000 f906 	bl	8022ddc <_init>
 8022bd0:	1b64      	subs	r4, r4, r5
 8022bd2:	10a4      	asrs	r4, r4, #2
 8022bd4:	2600      	movs	r6, #0
 8022bd6:	42a6      	cmp	r6, r4
 8022bd8:	d105      	bne.n	8022be6 <__libc_init_array+0x2e>
 8022bda:	bd70      	pop	{r4, r5, r6, pc}
 8022bdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8022be0:	4798      	blx	r3
 8022be2:	3601      	adds	r6, #1
 8022be4:	e7ee      	b.n	8022bc4 <__libc_init_array+0xc>
 8022be6:	f855 3b04 	ldr.w	r3, [r5], #4
 8022bea:	4798      	blx	r3
 8022bec:	3601      	adds	r6, #1
 8022bee:	e7f2      	b.n	8022bd6 <__libc_init_array+0x1e>
 8022bf0:	08022dfc 	.word	0x08022dfc
 8022bf4:	08022dfc 	.word	0x08022dfc
 8022bf8:	08022dfc 	.word	0x08022dfc
 8022bfc:	08022e00 	.word	0x08022e00

08022c00 <malloc>:
 8022c00:	4b02      	ldr	r3, [pc, #8]	; (8022c0c <malloc+0xc>)
 8022c02:	4601      	mov	r1, r0
 8022c04:	6818      	ldr	r0, [r3, #0]
 8022c06:	f000 b871 	b.w	8022cec <_malloc_r>
 8022c0a:	bf00      	nop
 8022c0c:	200006fc 	.word	0x200006fc

08022c10 <free>:
 8022c10:	4b02      	ldr	r3, [pc, #8]	; (8022c1c <free+0xc>)
 8022c12:	4601      	mov	r1, r0
 8022c14:	6818      	ldr	r0, [r3, #0]
 8022c16:	f000 b819 	b.w	8022c4c <_free_r>
 8022c1a:	bf00      	nop
 8022c1c:	200006fc 	.word	0x200006fc

08022c20 <memcpy>:
 8022c20:	440a      	add	r2, r1
 8022c22:	4291      	cmp	r1, r2
 8022c24:	f100 33ff 	add.w	r3, r0, #4294967295
 8022c28:	d100      	bne.n	8022c2c <memcpy+0xc>
 8022c2a:	4770      	bx	lr
 8022c2c:	b510      	push	{r4, lr}
 8022c2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022c32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8022c36:	4291      	cmp	r1, r2
 8022c38:	d1f9      	bne.n	8022c2e <memcpy+0xe>
 8022c3a:	bd10      	pop	{r4, pc}

08022c3c <memset>:
 8022c3c:	4402      	add	r2, r0
 8022c3e:	4603      	mov	r3, r0
 8022c40:	4293      	cmp	r3, r2
 8022c42:	d100      	bne.n	8022c46 <memset+0xa>
 8022c44:	4770      	bx	lr
 8022c46:	f803 1b01 	strb.w	r1, [r3], #1
 8022c4a:	e7f9      	b.n	8022c40 <memset+0x4>

08022c4c <_free_r>:
 8022c4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022c4e:	2900      	cmp	r1, #0
 8022c50:	d048      	beq.n	8022ce4 <_free_r+0x98>
 8022c52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022c56:	9001      	str	r0, [sp, #4]
 8022c58:	2b00      	cmp	r3, #0
 8022c5a:	f1a1 0404 	sub.w	r4, r1, #4
 8022c5e:	bfb8      	it	lt
 8022c60:	18e4      	addlt	r4, r4, r3
 8022c62:	f000 f8ad 	bl	8022dc0 <__malloc_lock>
 8022c66:	4a20      	ldr	r2, [pc, #128]	; (8022ce8 <_free_r+0x9c>)
 8022c68:	9801      	ldr	r0, [sp, #4]
 8022c6a:	6813      	ldr	r3, [r2, #0]
 8022c6c:	4615      	mov	r5, r2
 8022c6e:	b933      	cbnz	r3, 8022c7e <_free_r+0x32>
 8022c70:	6063      	str	r3, [r4, #4]
 8022c72:	6014      	str	r4, [r2, #0]
 8022c74:	b003      	add	sp, #12
 8022c76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022c7a:	f000 b8a7 	b.w	8022dcc <__malloc_unlock>
 8022c7e:	42a3      	cmp	r3, r4
 8022c80:	d90b      	bls.n	8022c9a <_free_r+0x4e>
 8022c82:	6821      	ldr	r1, [r4, #0]
 8022c84:	1862      	adds	r2, r4, r1
 8022c86:	4293      	cmp	r3, r2
 8022c88:	bf04      	itt	eq
 8022c8a:	681a      	ldreq	r2, [r3, #0]
 8022c8c:	685b      	ldreq	r3, [r3, #4]
 8022c8e:	6063      	str	r3, [r4, #4]
 8022c90:	bf04      	itt	eq
 8022c92:	1852      	addeq	r2, r2, r1
 8022c94:	6022      	streq	r2, [r4, #0]
 8022c96:	602c      	str	r4, [r5, #0]
 8022c98:	e7ec      	b.n	8022c74 <_free_r+0x28>
 8022c9a:	461a      	mov	r2, r3
 8022c9c:	685b      	ldr	r3, [r3, #4]
 8022c9e:	b10b      	cbz	r3, 8022ca4 <_free_r+0x58>
 8022ca0:	42a3      	cmp	r3, r4
 8022ca2:	d9fa      	bls.n	8022c9a <_free_r+0x4e>
 8022ca4:	6811      	ldr	r1, [r2, #0]
 8022ca6:	1855      	adds	r5, r2, r1
 8022ca8:	42a5      	cmp	r5, r4
 8022caa:	d10b      	bne.n	8022cc4 <_free_r+0x78>
 8022cac:	6824      	ldr	r4, [r4, #0]
 8022cae:	4421      	add	r1, r4
 8022cb0:	1854      	adds	r4, r2, r1
 8022cb2:	42a3      	cmp	r3, r4
 8022cb4:	6011      	str	r1, [r2, #0]
 8022cb6:	d1dd      	bne.n	8022c74 <_free_r+0x28>
 8022cb8:	681c      	ldr	r4, [r3, #0]
 8022cba:	685b      	ldr	r3, [r3, #4]
 8022cbc:	6053      	str	r3, [r2, #4]
 8022cbe:	4421      	add	r1, r4
 8022cc0:	6011      	str	r1, [r2, #0]
 8022cc2:	e7d7      	b.n	8022c74 <_free_r+0x28>
 8022cc4:	d902      	bls.n	8022ccc <_free_r+0x80>
 8022cc6:	230c      	movs	r3, #12
 8022cc8:	6003      	str	r3, [r0, #0]
 8022cca:	e7d3      	b.n	8022c74 <_free_r+0x28>
 8022ccc:	6825      	ldr	r5, [r4, #0]
 8022cce:	1961      	adds	r1, r4, r5
 8022cd0:	428b      	cmp	r3, r1
 8022cd2:	bf04      	itt	eq
 8022cd4:	6819      	ldreq	r1, [r3, #0]
 8022cd6:	685b      	ldreq	r3, [r3, #4]
 8022cd8:	6063      	str	r3, [r4, #4]
 8022cda:	bf04      	itt	eq
 8022cdc:	1949      	addeq	r1, r1, r5
 8022cde:	6021      	streq	r1, [r4, #0]
 8022ce0:	6054      	str	r4, [r2, #4]
 8022ce2:	e7c7      	b.n	8022c74 <_free_r+0x28>
 8022ce4:	b003      	add	sp, #12
 8022ce6:	bd30      	pop	{r4, r5, pc}
 8022ce8:	20000a28 	.word	0x20000a28

08022cec <_malloc_r>:
 8022cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022cee:	1ccd      	adds	r5, r1, #3
 8022cf0:	f025 0503 	bic.w	r5, r5, #3
 8022cf4:	3508      	adds	r5, #8
 8022cf6:	2d0c      	cmp	r5, #12
 8022cf8:	bf38      	it	cc
 8022cfa:	250c      	movcc	r5, #12
 8022cfc:	2d00      	cmp	r5, #0
 8022cfe:	4606      	mov	r6, r0
 8022d00:	db01      	blt.n	8022d06 <_malloc_r+0x1a>
 8022d02:	42a9      	cmp	r1, r5
 8022d04:	d903      	bls.n	8022d0e <_malloc_r+0x22>
 8022d06:	230c      	movs	r3, #12
 8022d08:	6033      	str	r3, [r6, #0]
 8022d0a:	2000      	movs	r0, #0
 8022d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022d0e:	f000 f857 	bl	8022dc0 <__malloc_lock>
 8022d12:	4921      	ldr	r1, [pc, #132]	; (8022d98 <_malloc_r+0xac>)
 8022d14:	680a      	ldr	r2, [r1, #0]
 8022d16:	4614      	mov	r4, r2
 8022d18:	b99c      	cbnz	r4, 8022d42 <_malloc_r+0x56>
 8022d1a:	4f20      	ldr	r7, [pc, #128]	; (8022d9c <_malloc_r+0xb0>)
 8022d1c:	683b      	ldr	r3, [r7, #0]
 8022d1e:	b923      	cbnz	r3, 8022d2a <_malloc_r+0x3e>
 8022d20:	4621      	mov	r1, r4
 8022d22:	4630      	mov	r0, r6
 8022d24:	f000 f83c 	bl	8022da0 <_sbrk_r>
 8022d28:	6038      	str	r0, [r7, #0]
 8022d2a:	4629      	mov	r1, r5
 8022d2c:	4630      	mov	r0, r6
 8022d2e:	f000 f837 	bl	8022da0 <_sbrk_r>
 8022d32:	1c43      	adds	r3, r0, #1
 8022d34:	d123      	bne.n	8022d7e <_malloc_r+0x92>
 8022d36:	230c      	movs	r3, #12
 8022d38:	6033      	str	r3, [r6, #0]
 8022d3a:	4630      	mov	r0, r6
 8022d3c:	f000 f846 	bl	8022dcc <__malloc_unlock>
 8022d40:	e7e3      	b.n	8022d0a <_malloc_r+0x1e>
 8022d42:	6823      	ldr	r3, [r4, #0]
 8022d44:	1b5b      	subs	r3, r3, r5
 8022d46:	d417      	bmi.n	8022d78 <_malloc_r+0x8c>
 8022d48:	2b0b      	cmp	r3, #11
 8022d4a:	d903      	bls.n	8022d54 <_malloc_r+0x68>
 8022d4c:	6023      	str	r3, [r4, #0]
 8022d4e:	441c      	add	r4, r3
 8022d50:	6025      	str	r5, [r4, #0]
 8022d52:	e004      	b.n	8022d5e <_malloc_r+0x72>
 8022d54:	6863      	ldr	r3, [r4, #4]
 8022d56:	42a2      	cmp	r2, r4
 8022d58:	bf0c      	ite	eq
 8022d5a:	600b      	streq	r3, [r1, #0]
 8022d5c:	6053      	strne	r3, [r2, #4]
 8022d5e:	4630      	mov	r0, r6
 8022d60:	f000 f834 	bl	8022dcc <__malloc_unlock>
 8022d64:	f104 000b 	add.w	r0, r4, #11
 8022d68:	1d23      	adds	r3, r4, #4
 8022d6a:	f020 0007 	bic.w	r0, r0, #7
 8022d6e:	1ac2      	subs	r2, r0, r3
 8022d70:	d0cc      	beq.n	8022d0c <_malloc_r+0x20>
 8022d72:	1a1b      	subs	r3, r3, r0
 8022d74:	50a3      	str	r3, [r4, r2]
 8022d76:	e7c9      	b.n	8022d0c <_malloc_r+0x20>
 8022d78:	4622      	mov	r2, r4
 8022d7a:	6864      	ldr	r4, [r4, #4]
 8022d7c:	e7cc      	b.n	8022d18 <_malloc_r+0x2c>
 8022d7e:	1cc4      	adds	r4, r0, #3
 8022d80:	f024 0403 	bic.w	r4, r4, #3
 8022d84:	42a0      	cmp	r0, r4
 8022d86:	d0e3      	beq.n	8022d50 <_malloc_r+0x64>
 8022d88:	1a21      	subs	r1, r4, r0
 8022d8a:	4630      	mov	r0, r6
 8022d8c:	f000 f808 	bl	8022da0 <_sbrk_r>
 8022d90:	3001      	adds	r0, #1
 8022d92:	d1dd      	bne.n	8022d50 <_malloc_r+0x64>
 8022d94:	e7cf      	b.n	8022d36 <_malloc_r+0x4a>
 8022d96:	bf00      	nop
 8022d98:	20000a28 	.word	0x20000a28
 8022d9c:	20000a2c 	.word	0x20000a2c

08022da0 <_sbrk_r>:
 8022da0:	b538      	push	{r3, r4, r5, lr}
 8022da2:	4d06      	ldr	r5, [pc, #24]	; (8022dbc <_sbrk_r+0x1c>)
 8022da4:	2300      	movs	r3, #0
 8022da6:	4604      	mov	r4, r0
 8022da8:	4608      	mov	r0, r1
 8022daa:	602b      	str	r3, [r5, #0]
 8022dac:	f7f5 fa2e 	bl	801820c <_sbrk>
 8022db0:	1c43      	adds	r3, r0, #1
 8022db2:	d102      	bne.n	8022dba <_sbrk_r+0x1a>
 8022db4:	682b      	ldr	r3, [r5, #0]
 8022db6:	b103      	cbz	r3, 8022dba <_sbrk_r+0x1a>
 8022db8:	6023      	str	r3, [r4, #0]
 8022dba:	bd38      	pop	{r3, r4, r5, pc}
 8022dbc:	20007514 	.word	0x20007514

08022dc0 <__malloc_lock>:
 8022dc0:	4801      	ldr	r0, [pc, #4]	; (8022dc8 <__malloc_lock+0x8>)
 8022dc2:	f000 b809 	b.w	8022dd8 <__retarget_lock_acquire_recursive>
 8022dc6:	bf00      	nop
 8022dc8:	2000751c 	.word	0x2000751c

08022dcc <__malloc_unlock>:
 8022dcc:	4801      	ldr	r0, [pc, #4]	; (8022dd4 <__malloc_unlock+0x8>)
 8022dce:	f000 b804 	b.w	8022dda <__retarget_lock_release_recursive>
 8022dd2:	bf00      	nop
 8022dd4:	2000751c 	.word	0x2000751c

08022dd8 <__retarget_lock_acquire_recursive>:
 8022dd8:	4770      	bx	lr

08022dda <__retarget_lock_release_recursive>:
 8022dda:	4770      	bx	lr

08022ddc <_init>:
 8022ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022dde:	bf00      	nop
 8022de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022de2:	bc08      	pop	{r3}
 8022de4:	469e      	mov	lr, r3
 8022de6:	4770      	bx	lr

08022de8 <_fini>:
 8022de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022dea:	bf00      	nop
 8022dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022dee:	bc08      	pop	{r3}
 8022df0:	469e      	mov	lr, r3
 8022df2:	4770      	bx	lr
