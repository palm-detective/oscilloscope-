
oscilliscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017220  0800c000  0800c000  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021c8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023220  08023220  00040760  2**0
                  CONTENTS
  4 .ARM          00000008  08023220  08023220  00033220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023228  08023228  00040760  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023228  08023228  00033228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802322c  0802322c  0003322c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000760  20000000  08023230  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006dd0  20000760  08023990  00040760  2**2
                  ALLOC
 10 ._user_heap_stack 00002000  20007530  08023990  00047530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040760  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003aeb6  00000000  00000000  00040790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000068b1  00000000  00000000  0007b646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d68  00000000  00000000  00081ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a88  00000000  00000000  00083c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aad1  00000000  00000000  000856e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a1cb  00000000  00000000  000b01b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5191  00000000  00000000  000da384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001bf515  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000796c  00000000  00000000  001bf568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800c000 <__do_global_dtors_aux>:
 800c000:	b510      	push	{r4, lr}
 800c002:	4c05      	ldr	r4, [pc, #20]	; (800c018 <__do_global_dtors_aux+0x18>)
 800c004:	7823      	ldrb	r3, [r4, #0]
 800c006:	b933      	cbnz	r3, 800c016 <__do_global_dtors_aux+0x16>
 800c008:	4b04      	ldr	r3, [pc, #16]	; (800c01c <__do_global_dtors_aux+0x1c>)
 800c00a:	b113      	cbz	r3, 800c012 <__do_global_dtors_aux+0x12>
 800c00c:	4804      	ldr	r0, [pc, #16]	; (800c020 <__do_global_dtors_aux+0x20>)
 800c00e:	f3af 8000 	nop.w
 800c012:	2301      	movs	r3, #1
 800c014:	7023      	strb	r3, [r4, #0]
 800c016:	bd10      	pop	{r4, pc}
 800c018:	20000760 	.word	0x20000760
 800c01c:	00000000 	.word	0x00000000
 800c020:	08023208 	.word	0x08023208

0800c024 <frame_dummy>:
 800c024:	b508      	push	{r3, lr}
 800c026:	4b03      	ldr	r3, [pc, #12]	; (800c034 <frame_dummy+0x10>)
 800c028:	b11b      	cbz	r3, 800c032 <frame_dummy+0xe>
 800c02a:	4903      	ldr	r1, [pc, #12]	; (800c038 <frame_dummy+0x14>)
 800c02c:	4803      	ldr	r0, [pc, #12]	; (800c03c <frame_dummy+0x18>)
 800c02e:	f3af 8000 	nop.w
 800c032:	bd08      	pop	{r3, pc}
 800c034:	00000000 	.word	0x00000000
 800c038:	20000764 	.word	0x20000764
 800c03c:	08023208 	.word	0x08023208

0800c040 <strlen>:
 800c040:	4603      	mov	r3, r0
 800c042:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c046:	2a00      	cmp	r2, #0
 800c048:	d1fb      	bne.n	800c042 <strlen+0x2>
 800c04a:	1a18      	subs	r0, r3, r0
 800c04c:	3801      	subs	r0, #1
 800c04e:	4770      	bx	lr

0800c050 <__aeabi_uldivmod>:
 800c050:	b953      	cbnz	r3, 800c068 <__aeabi_uldivmod+0x18>
 800c052:	b94a      	cbnz	r2, 800c068 <__aeabi_uldivmod+0x18>
 800c054:	2900      	cmp	r1, #0
 800c056:	bf08      	it	eq
 800c058:	2800      	cmpeq	r0, #0
 800c05a:	bf1c      	itt	ne
 800c05c:	f04f 31ff 	movne.w	r1, #4294967295
 800c060:	f04f 30ff 	movne.w	r0, #4294967295
 800c064:	f000 b96e 	b.w	800c344 <__aeabi_idiv0>
 800c068:	f1ad 0c08 	sub.w	ip, sp, #8
 800c06c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800c070:	f000 f806 	bl	800c080 <__udivmoddi4>
 800c074:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c078:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c07c:	b004      	add	sp, #16
 800c07e:	4770      	bx	lr

0800c080 <__udivmoddi4>:
 800c080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c084:	9d08      	ldr	r5, [sp, #32]
 800c086:	4604      	mov	r4, r0
 800c088:	468c      	mov	ip, r1
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	f040 8083 	bne.w	800c196 <__udivmoddi4+0x116>
 800c090:	428a      	cmp	r2, r1
 800c092:	4617      	mov	r7, r2
 800c094:	d947      	bls.n	800c126 <__udivmoddi4+0xa6>
 800c096:	fab2 f282 	clz	r2, r2
 800c09a:	b142      	cbz	r2, 800c0ae <__udivmoddi4+0x2e>
 800c09c:	f1c2 0020 	rsb	r0, r2, #32
 800c0a0:	fa24 f000 	lsr.w	r0, r4, r0
 800c0a4:	4091      	lsls	r1, r2
 800c0a6:	4097      	lsls	r7, r2
 800c0a8:	ea40 0c01 	orr.w	ip, r0, r1
 800c0ac:	4094      	lsls	r4, r2
 800c0ae:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800c0b2:	0c23      	lsrs	r3, r4, #16
 800c0b4:	fbbc f6f8 	udiv	r6, ip, r8
 800c0b8:	fa1f fe87 	uxth.w	lr, r7
 800c0bc:	fb08 c116 	mls	r1, r8, r6, ip
 800c0c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c0c4:	fb06 f10e 	mul.w	r1, r6, lr
 800c0c8:	4299      	cmp	r1, r3
 800c0ca:	d909      	bls.n	800c0e0 <__udivmoddi4+0x60>
 800c0cc:	18fb      	adds	r3, r7, r3
 800c0ce:	f106 30ff 	add.w	r0, r6, #4294967295
 800c0d2:	f080 8119 	bcs.w	800c308 <__udivmoddi4+0x288>
 800c0d6:	4299      	cmp	r1, r3
 800c0d8:	f240 8116 	bls.w	800c308 <__udivmoddi4+0x288>
 800c0dc:	3e02      	subs	r6, #2
 800c0de:	443b      	add	r3, r7
 800c0e0:	1a5b      	subs	r3, r3, r1
 800c0e2:	b2a4      	uxth	r4, r4
 800c0e4:	fbb3 f0f8 	udiv	r0, r3, r8
 800c0e8:	fb08 3310 	mls	r3, r8, r0, r3
 800c0ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800c0f0:	fb00 fe0e 	mul.w	lr, r0, lr
 800c0f4:	45a6      	cmp	lr, r4
 800c0f6:	d909      	bls.n	800c10c <__udivmoddi4+0x8c>
 800c0f8:	193c      	adds	r4, r7, r4
 800c0fa:	f100 33ff 	add.w	r3, r0, #4294967295
 800c0fe:	f080 8105 	bcs.w	800c30c <__udivmoddi4+0x28c>
 800c102:	45a6      	cmp	lr, r4
 800c104:	f240 8102 	bls.w	800c30c <__udivmoddi4+0x28c>
 800c108:	3802      	subs	r0, #2
 800c10a:	443c      	add	r4, r7
 800c10c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800c110:	eba4 040e 	sub.w	r4, r4, lr
 800c114:	2600      	movs	r6, #0
 800c116:	b11d      	cbz	r5, 800c120 <__udivmoddi4+0xa0>
 800c118:	40d4      	lsrs	r4, r2
 800c11a:	2300      	movs	r3, #0
 800c11c:	e9c5 4300 	strd	r4, r3, [r5]
 800c120:	4631      	mov	r1, r6
 800c122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c126:	b902      	cbnz	r2, 800c12a <__udivmoddi4+0xaa>
 800c128:	deff      	udf	#255	; 0xff
 800c12a:	fab2 f282 	clz	r2, r2
 800c12e:	2a00      	cmp	r2, #0
 800c130:	d150      	bne.n	800c1d4 <__udivmoddi4+0x154>
 800c132:	1bcb      	subs	r3, r1, r7
 800c134:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800c138:	fa1f f887 	uxth.w	r8, r7
 800c13c:	2601      	movs	r6, #1
 800c13e:	fbb3 fcfe 	udiv	ip, r3, lr
 800c142:	0c21      	lsrs	r1, r4, #16
 800c144:	fb0e 331c 	mls	r3, lr, ip, r3
 800c148:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c14c:	fb08 f30c 	mul.w	r3, r8, ip
 800c150:	428b      	cmp	r3, r1
 800c152:	d907      	bls.n	800c164 <__udivmoddi4+0xe4>
 800c154:	1879      	adds	r1, r7, r1
 800c156:	f10c 30ff 	add.w	r0, ip, #4294967295
 800c15a:	d202      	bcs.n	800c162 <__udivmoddi4+0xe2>
 800c15c:	428b      	cmp	r3, r1
 800c15e:	f200 80e9 	bhi.w	800c334 <__udivmoddi4+0x2b4>
 800c162:	4684      	mov	ip, r0
 800c164:	1ac9      	subs	r1, r1, r3
 800c166:	b2a3      	uxth	r3, r4
 800c168:	fbb1 f0fe 	udiv	r0, r1, lr
 800c16c:	fb0e 1110 	mls	r1, lr, r0, r1
 800c170:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800c174:	fb08 f800 	mul.w	r8, r8, r0
 800c178:	45a0      	cmp	r8, r4
 800c17a:	d907      	bls.n	800c18c <__udivmoddi4+0x10c>
 800c17c:	193c      	adds	r4, r7, r4
 800c17e:	f100 33ff 	add.w	r3, r0, #4294967295
 800c182:	d202      	bcs.n	800c18a <__udivmoddi4+0x10a>
 800c184:	45a0      	cmp	r8, r4
 800c186:	f200 80d9 	bhi.w	800c33c <__udivmoddi4+0x2bc>
 800c18a:	4618      	mov	r0, r3
 800c18c:	eba4 0408 	sub.w	r4, r4, r8
 800c190:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800c194:	e7bf      	b.n	800c116 <__udivmoddi4+0x96>
 800c196:	428b      	cmp	r3, r1
 800c198:	d909      	bls.n	800c1ae <__udivmoddi4+0x12e>
 800c19a:	2d00      	cmp	r5, #0
 800c19c:	f000 80b1 	beq.w	800c302 <__udivmoddi4+0x282>
 800c1a0:	2600      	movs	r6, #0
 800c1a2:	e9c5 0100 	strd	r0, r1, [r5]
 800c1a6:	4630      	mov	r0, r6
 800c1a8:	4631      	mov	r1, r6
 800c1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1ae:	fab3 f683 	clz	r6, r3
 800c1b2:	2e00      	cmp	r6, #0
 800c1b4:	d14a      	bne.n	800c24c <__udivmoddi4+0x1cc>
 800c1b6:	428b      	cmp	r3, r1
 800c1b8:	d302      	bcc.n	800c1c0 <__udivmoddi4+0x140>
 800c1ba:	4282      	cmp	r2, r0
 800c1bc:	f200 80b8 	bhi.w	800c330 <__udivmoddi4+0x2b0>
 800c1c0:	1a84      	subs	r4, r0, r2
 800c1c2:	eb61 0103 	sbc.w	r1, r1, r3
 800c1c6:	2001      	movs	r0, #1
 800c1c8:	468c      	mov	ip, r1
 800c1ca:	2d00      	cmp	r5, #0
 800c1cc:	d0a8      	beq.n	800c120 <__udivmoddi4+0xa0>
 800c1ce:	e9c5 4c00 	strd	r4, ip, [r5]
 800c1d2:	e7a5      	b.n	800c120 <__udivmoddi4+0xa0>
 800c1d4:	f1c2 0320 	rsb	r3, r2, #32
 800c1d8:	fa20 f603 	lsr.w	r6, r0, r3
 800c1dc:	4097      	lsls	r7, r2
 800c1de:	fa01 f002 	lsl.w	r0, r1, r2
 800c1e2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800c1e6:	40d9      	lsrs	r1, r3
 800c1e8:	4330      	orrs	r0, r6
 800c1ea:	0c03      	lsrs	r3, r0, #16
 800c1ec:	fbb1 f6fe 	udiv	r6, r1, lr
 800c1f0:	fa1f f887 	uxth.w	r8, r7
 800c1f4:	fb0e 1116 	mls	r1, lr, r6, r1
 800c1f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c1fc:	fb06 f108 	mul.w	r1, r6, r8
 800c200:	4299      	cmp	r1, r3
 800c202:	fa04 f402 	lsl.w	r4, r4, r2
 800c206:	d909      	bls.n	800c21c <__udivmoddi4+0x19c>
 800c208:	18fb      	adds	r3, r7, r3
 800c20a:	f106 3cff 	add.w	ip, r6, #4294967295
 800c20e:	f080 808d 	bcs.w	800c32c <__udivmoddi4+0x2ac>
 800c212:	4299      	cmp	r1, r3
 800c214:	f240 808a 	bls.w	800c32c <__udivmoddi4+0x2ac>
 800c218:	3e02      	subs	r6, #2
 800c21a:	443b      	add	r3, r7
 800c21c:	1a5b      	subs	r3, r3, r1
 800c21e:	b281      	uxth	r1, r0
 800c220:	fbb3 f0fe 	udiv	r0, r3, lr
 800c224:	fb0e 3310 	mls	r3, lr, r0, r3
 800c228:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c22c:	fb00 f308 	mul.w	r3, r0, r8
 800c230:	428b      	cmp	r3, r1
 800c232:	d907      	bls.n	800c244 <__udivmoddi4+0x1c4>
 800c234:	1879      	adds	r1, r7, r1
 800c236:	f100 3cff 	add.w	ip, r0, #4294967295
 800c23a:	d273      	bcs.n	800c324 <__udivmoddi4+0x2a4>
 800c23c:	428b      	cmp	r3, r1
 800c23e:	d971      	bls.n	800c324 <__udivmoddi4+0x2a4>
 800c240:	3802      	subs	r0, #2
 800c242:	4439      	add	r1, r7
 800c244:	1acb      	subs	r3, r1, r3
 800c246:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800c24a:	e778      	b.n	800c13e <__udivmoddi4+0xbe>
 800c24c:	f1c6 0c20 	rsb	ip, r6, #32
 800c250:	fa03 f406 	lsl.w	r4, r3, r6
 800c254:	fa22 f30c 	lsr.w	r3, r2, ip
 800c258:	431c      	orrs	r4, r3
 800c25a:	fa20 f70c 	lsr.w	r7, r0, ip
 800c25e:	fa01 f306 	lsl.w	r3, r1, r6
 800c262:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800c266:	fa21 f10c 	lsr.w	r1, r1, ip
 800c26a:	431f      	orrs	r7, r3
 800c26c:	0c3b      	lsrs	r3, r7, #16
 800c26e:	fbb1 f9fe 	udiv	r9, r1, lr
 800c272:	fa1f f884 	uxth.w	r8, r4
 800c276:	fb0e 1119 	mls	r1, lr, r9, r1
 800c27a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800c27e:	fb09 fa08 	mul.w	sl, r9, r8
 800c282:	458a      	cmp	sl, r1
 800c284:	fa02 f206 	lsl.w	r2, r2, r6
 800c288:	fa00 f306 	lsl.w	r3, r0, r6
 800c28c:	d908      	bls.n	800c2a0 <__udivmoddi4+0x220>
 800c28e:	1861      	adds	r1, r4, r1
 800c290:	f109 30ff 	add.w	r0, r9, #4294967295
 800c294:	d248      	bcs.n	800c328 <__udivmoddi4+0x2a8>
 800c296:	458a      	cmp	sl, r1
 800c298:	d946      	bls.n	800c328 <__udivmoddi4+0x2a8>
 800c29a:	f1a9 0902 	sub.w	r9, r9, #2
 800c29e:	4421      	add	r1, r4
 800c2a0:	eba1 010a 	sub.w	r1, r1, sl
 800c2a4:	b2bf      	uxth	r7, r7
 800c2a6:	fbb1 f0fe 	udiv	r0, r1, lr
 800c2aa:	fb0e 1110 	mls	r1, lr, r0, r1
 800c2ae:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800c2b2:	fb00 f808 	mul.w	r8, r0, r8
 800c2b6:	45b8      	cmp	r8, r7
 800c2b8:	d907      	bls.n	800c2ca <__udivmoddi4+0x24a>
 800c2ba:	19e7      	adds	r7, r4, r7
 800c2bc:	f100 31ff 	add.w	r1, r0, #4294967295
 800c2c0:	d22e      	bcs.n	800c320 <__udivmoddi4+0x2a0>
 800c2c2:	45b8      	cmp	r8, r7
 800c2c4:	d92c      	bls.n	800c320 <__udivmoddi4+0x2a0>
 800c2c6:	3802      	subs	r0, #2
 800c2c8:	4427      	add	r7, r4
 800c2ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800c2ce:	eba7 0708 	sub.w	r7, r7, r8
 800c2d2:	fba0 8902 	umull	r8, r9, r0, r2
 800c2d6:	454f      	cmp	r7, r9
 800c2d8:	46c6      	mov	lr, r8
 800c2da:	4649      	mov	r1, r9
 800c2dc:	d31a      	bcc.n	800c314 <__udivmoddi4+0x294>
 800c2de:	d017      	beq.n	800c310 <__udivmoddi4+0x290>
 800c2e0:	b15d      	cbz	r5, 800c2fa <__udivmoddi4+0x27a>
 800c2e2:	ebb3 020e 	subs.w	r2, r3, lr
 800c2e6:	eb67 0701 	sbc.w	r7, r7, r1
 800c2ea:	fa07 fc0c 	lsl.w	ip, r7, ip
 800c2ee:	40f2      	lsrs	r2, r6
 800c2f0:	ea4c 0202 	orr.w	r2, ip, r2
 800c2f4:	40f7      	lsrs	r7, r6
 800c2f6:	e9c5 2700 	strd	r2, r7, [r5]
 800c2fa:	2600      	movs	r6, #0
 800c2fc:	4631      	mov	r1, r6
 800c2fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c302:	462e      	mov	r6, r5
 800c304:	4628      	mov	r0, r5
 800c306:	e70b      	b.n	800c120 <__udivmoddi4+0xa0>
 800c308:	4606      	mov	r6, r0
 800c30a:	e6e9      	b.n	800c0e0 <__udivmoddi4+0x60>
 800c30c:	4618      	mov	r0, r3
 800c30e:	e6fd      	b.n	800c10c <__udivmoddi4+0x8c>
 800c310:	4543      	cmp	r3, r8
 800c312:	d2e5      	bcs.n	800c2e0 <__udivmoddi4+0x260>
 800c314:	ebb8 0e02 	subs.w	lr, r8, r2
 800c318:	eb69 0104 	sbc.w	r1, r9, r4
 800c31c:	3801      	subs	r0, #1
 800c31e:	e7df      	b.n	800c2e0 <__udivmoddi4+0x260>
 800c320:	4608      	mov	r0, r1
 800c322:	e7d2      	b.n	800c2ca <__udivmoddi4+0x24a>
 800c324:	4660      	mov	r0, ip
 800c326:	e78d      	b.n	800c244 <__udivmoddi4+0x1c4>
 800c328:	4681      	mov	r9, r0
 800c32a:	e7b9      	b.n	800c2a0 <__udivmoddi4+0x220>
 800c32c:	4666      	mov	r6, ip
 800c32e:	e775      	b.n	800c21c <__udivmoddi4+0x19c>
 800c330:	4630      	mov	r0, r6
 800c332:	e74a      	b.n	800c1ca <__udivmoddi4+0x14a>
 800c334:	f1ac 0c02 	sub.w	ip, ip, #2
 800c338:	4439      	add	r1, r7
 800c33a:	e713      	b.n	800c164 <__udivmoddi4+0xe4>
 800c33c:	3802      	subs	r0, #2
 800c33e:	443c      	add	r4, r7
 800c340:	e724      	b.n	800c18c <__udivmoddi4+0x10c>
 800c342:	bf00      	nop

0800c344 <__aeabi_idiv0>:
 800c344:	4770      	bx	lr
 800c346:	bf00      	nop

0800c348 <BIOS_Info>:

/*******************************************************************************
 Info :  Ӳ���豸��Ϣ
*******************************************************************************/
unsigned BIOS_Info(char Item)
{
 800c348:	b480      	push	{r7}
 800c34a:	b083      	sub	sp, #12
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	4603      	mov	r3, r0
 800c350:	71fb      	strb	r3, [r7, #7]
  switch (Item){
 800c352:	79fb      	ldrb	r3, [r7, #7]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d103      	bne.n	800c360 <BIOS_Info+0x18>
    case CHA_CNT:
    	return __HAL_DMA_GET_COUNTER(&hdma_adc1);  /*(u16)DMA_CH_A->CNDTR*/
 800c358:	4b05      	ldr	r3, [pc, #20]	; (800c370 <BIOS_Info+0x28>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	e000      	b.n	800c362 <BIOS_Info+0x1a>
/*    case SIN_TAB: return (u32)SIN_DATA;
    case TRG_TAB: return (u32)TRG_DATA;
    case SAW_TAB: return (u32)SAW_DATA;    */
    default:
    	return 0;
 800c360:	2300      	movs	r3, #0
  }
}
 800c362:	4618      	mov	r0, r3
 800c364:	370c      	adds	r7, #12
 800c366:	46bd      	mov	sp, r7
 800c368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36c:	4770      	bx	lr
 800c36e:	bf00      	nop
 800c370:	20006b18 	.word	0x20006b18

0800c374 <BIOS_Ctrl>:
/*******************************************************************************
 DevCtrl:  Ӳ���豸����
*******************************************************************************/
void BIOS_Ctrl(char Item, unsigned Val)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b088      	sub	sp, #32
 800c378:	af00      	add	r7, sp, #0
 800c37a:	4603      	mov	r3, r0
 800c37c:	6039      	str	r1, [r7, #0]
 800c37e:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef         GPIO_InitStructure;
  unsigned dma_tmp;

  switch (Item){
 800c380:	79fb      	ldrb	r3, [r7, #7]
 800c382:	2b08      	cmp	r3, #8
 800c384:	f200 8150 	bhi.w	800c628 <BIOS_Ctrl+0x2b4>
 800c388:	a201      	add	r2, pc, #4	; (adr r2, 800c390 <BIOS_Ctrl+0x1c>)
 800c38a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c38e:	bf00      	nop
 800c390:	0800c52b 	.word	0x0800c52b
 800c394:	0800c4d9 	.word	0x0800c4d9
 800c398:	0800c51f 	.word	0x0800c51f
 800c39c:	0800c4e9 	.word	0x0800c4e9
 800c3a0:	0800c3b5 	.word	0x0800c3b5
 800c3a4:	0800c417 	.word	0x0800c417
 800c3a8:	0800c441 	.word	0x0800c441
 800c3ac:	0800c469 	.word	0x0800c469
 800c3b0:	0800c4cb 	.word	0x0800c4cb
    case SMPL_ST: if(Val == DISABLE)
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d108      	bne.n	800c3cc <BIOS_Ctrl+0x58>
    			  {
    				  __HAL_DMA_DISABLE(&hdma_adc1);  /*DMA1_Channel1->CCR &= (~ENABLE);*/
 800c3ba:	4ba0      	ldr	r3, [pc, #640]	; (800c63c <BIOS_Ctrl+0x2c8>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	681a      	ldr	r2, [r3, #0]
 800c3c0:	4b9e      	ldr	r3, [pc, #632]	; (800c63c <BIOS_Ctrl+0x2c8>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f022 0201 	bic.w	r2, r2, #1
 800c3c8:	601a      	str	r2, [r3, #0]
                    if(Val == INTERLEAVE)
                    {
                      DMA1_Channel1->CCR = 0x3A80;
                    } */
                  }
    			  break;
 800c3ca:	e12f      	b.n	800c62c <BIOS_Ctrl+0x2b8>
    				  if(Val == ENABLE)
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	2b01      	cmp	r3, #1
 800c3d0:	f040 812c 	bne.w	800c62c <BIOS_Ctrl+0x2b8>
    			    __HAL_DMA_ENABLE(&hdma_adc1);  /* DMA1_Channel1->CCR |= ENABLE; */
 800c3d4:	4b99      	ldr	r3, [pc, #612]	; (800c63c <BIOS_Ctrl+0x2c8>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	681a      	ldr	r2, [r3, #0]
 800c3da:	4b98      	ldr	r3, [pc, #608]	; (800c63c <BIOS_Ctrl+0x2c8>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f042 0201 	orr.w	r2, r2, #1
 800c3e2:	601a      	str	r2, [r3, #0]
                    __HAL_ADC_ENABLE(&hadc1);  //ADC1->CR2 |= 0x00000001; //AD_ON
 800c3e4:	4b96      	ldr	r3, [pc, #600]	; (800c640 <BIOS_Ctrl+0x2cc>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	689a      	ldr	r2, [r3, #8]
 800c3ea:	4b95      	ldr	r3, [pc, #596]	; (800c640 <BIOS_Ctrl+0x2cc>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f042 0201 	orr.w	r2, r2, #1
 800c3f2:	609a      	str	r2, [r3, #8]
                    __HAL_ADC_ENABLE(&hadc2);  //ADC2->CR2 |= 0x00000001; //AD_ON
 800c3f4:	4b93      	ldr	r3, [pc, #588]	; (800c644 <BIOS_Ctrl+0x2d0>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	689a      	ldr	r2, [r3, #8]
 800c3fa:	4b92      	ldr	r3, [pc, #584]	; (800c644 <BIOS_Ctrl+0x2d0>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f042 0201 	orr.w	r2, r2, #1
 800c402:	609a      	str	r2, [r3, #8]
                    __HAL_TIM_ENABLE(&htim1);  /*TIM1->CR1 = 0x0081; */
 800c404:	4b90      	ldr	r3, [pc, #576]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	681a      	ldr	r2, [r3, #0]
 800c40a:	4b8f      	ldr	r3, [pc, #572]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f042 0201 	orr.w	r2, r2, #1
 800c412:	601a      	str	r2, [r3, #0]
    			  break;
 800c414:	e10a      	b.n	800c62c <BIOS_Ctrl+0x2b8>

    case SMPLTIM:
    			  octim1.Pulse = (Val+1)/2;
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	3301      	adds	r3, #1
 800c41a:	085b      	lsrs	r3, r3, #1
 800c41c:	4a8b      	ldr	r2, [pc, #556]	; (800c64c <BIOS_Ctrl+0x2d8>)
 800c41e:	6053      	str	r3, [r2, #4]
    			  HAL_TIM_OC_ConfigChannel(&htim1, &octim1, 1 );
 800c420:	2201      	movs	r2, #1
 800c422:	498a      	ldr	r1, [pc, #552]	; (800c64c <BIOS_Ctrl+0x2d8>)
 800c424:	4888      	ldr	r0, [pc, #544]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c426:	f011 f8e1 	bl	801d5ec <HAL_TIM_OC_ConfigChannel>
    			  htim1.Init.Prescaler = 0;
 800c42a:	4b87      	ldr	r3, [pc, #540]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c42c:	2200      	movs	r2, #0
 800c42e:	605a      	str	r2, [r3, #4]
    			  htim1.Init.Period = Val -1;
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	3b01      	subs	r3, #1
 800c434:	4a84      	ldr	r2, [pc, #528]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c436:	60d3      	str	r3, [r2, #12]
    			  HAL_TIM_Base_Init(&htim1);
 800c438:	4883      	ldr	r0, [pc, #524]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c43a:	f010 ff0f 	bl	801d25c <HAL_TIM_Base_Init>
                  break;
 800c43e:	e0f8      	b.n	800c632 <BIOS_Ctrl+0x2be>

    case SMPLNUM:
    			  __HAL_TIM_URS_DISABLE(&htim1);
 800c440:	4b81      	ldr	r3, [pc, #516]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	681a      	ldr	r2, [r3, #0]
 800c446:	4b80      	ldr	r3, [pc, #512]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f022 0204 	bic.w	r2, r2, #4
 800c44e:	601a      	str	r2, [r3, #0]
    			  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c450:	4b7d      	ldr	r3, [pc, #500]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c452:	2200      	movs	r2, #0
 800c454:	609a      	str	r2, [r3, #8]
    			  HAL_TIM_Base_Init(&htim1);
 800c456:	487c      	ldr	r0, [pc, #496]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c458:	f010 ff00 	bl	801d25c <HAL_TIM_Base_Init>
    			  __HAL_DMA_SET_COUNTER( &hdma_adc1, Val);  /* DMA_CH_A->CNDTR = (u32)Val;    */
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	b29a      	uxth	r2, r3
 800c460:	4b76      	ldr	r3, [pc, #472]	; (800c63c <BIOS_Ctrl+0x2c8>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	605a      	str	r2, [r3, #4]
                  break;
 800c466:	e0e4      	b.n	800c632 <BIOS_Ctrl+0x2be>

    case AiRANGE: if(Val & DC)
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	f003 0302 	and.w	r3, r3, #2
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d005      	beq.n	800c47e <BIOS_Ctrl+0x10a>
    				  HAL_GPIO_WritePin(Az_GPIO_Port, Az_Pin,GPIO_PIN_SET);  // AZ_HIGH;
 800c472:	2201      	movs	r2, #1
 800c474:	2110      	movs	r1, #16
 800c476:	4876      	ldr	r0, [pc, #472]	; (800c650 <BIOS_Ctrl+0x2dc>)
 800c478:	f00d fda0 	bl	8019fbc <HAL_GPIO_WritePin>
 800c47c:	e004      	b.n	800c488 <BIOS_Ctrl+0x114>
                  else
                	  HAL_GPIO_WritePin(Az_GPIO_Port, Az_Pin,GPIO_PIN_RESET);  //AZ_LOW;   CH_A_AC
 800c47e:	2200      	movs	r2, #0
 800c480:	2110      	movs	r1, #16
 800c482:	4873      	ldr	r0, [pc, #460]	; (800c650 <BIOS_Ctrl+0x2dc>)
 800c484:	f00d fd9a 	bl	8019fbc <HAL_GPIO_WritePin>
                  if(Val & HV)
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	f003 0301 	and.w	r3, r3, #1
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d005      	beq.n	800c49e <BIOS_Ctrl+0x12a>
                	  HAL_GPIO_WritePin(Ay_GPIO_Port, Ay_Pin,GPIO_PIN_SET);  //AY_HIGH;  CH_A_HV
 800c492:	2201      	movs	r2, #1
 800c494:	2120      	movs	r1, #32
 800c496:	486e      	ldr	r0, [pc, #440]	; (800c650 <BIOS_Ctrl+0x2dc>)
 800c498:	f00d fd90 	bl	8019fbc <HAL_GPIO_WritePin>
 800c49c:	e004      	b.n	800c4a8 <BIOS_Ctrl+0x134>
                  else
                	  HAL_GPIO_WritePin(Ay_GPIO_Port, Ay_Pin,GPIO_PIN_RESET);  //AY_LOW;   CH_A_LV
 800c49e:	2200      	movs	r2, #0
 800c4a0:	2120      	movs	r1, #32
 800c4a2:	486b      	ldr	r0, [pc, #428]	; (800c650 <BIOS_Ctrl+0x2dc>)
 800c4a4:	f00d fd8a 	bl	8019fbc <HAL_GPIO_WritePin>
                  if(Val & ACT)
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	f003 0304 	and.w	r3, r3, #4
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d005      	beq.n	800c4be <BIOS_Ctrl+0x14a>
                	  HAL_GPIO_WritePin(Ax_GPIO_Port, Ax_Pin,GPIO_PIN_SET);  //AX_HIGH;  CH_A_ACT
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	2101      	movs	r1, #1
 800c4b6:	4867      	ldr	r0, [pc, #412]	; (800c654 <BIOS_Ctrl+0x2e0>)
 800c4b8:	f00d fd80 	bl	8019fbc <HAL_GPIO_WritePin>
                  else
                	  HAL_GPIO_WritePin(Ax_GPIO_Port, Ax_Pin,GPIO_PIN_RESET);  //AX_LOW;   CH_A_GND
                  break;
 800c4bc:	e0b9      	b.n	800c632 <BIOS_Ctrl+0x2be>
                	  HAL_GPIO_WritePin(Ax_GPIO_Port, Ax_Pin,GPIO_PIN_RESET);  //AX_LOW;   CH_A_GND
 800c4be:	2200      	movs	r2, #0
 800c4c0:	2101      	movs	r1, #1
 800c4c2:	4864      	ldr	r0, [pc, #400]	; (800c654 <BIOS_Ctrl+0x2e0>)
 800c4c4:	f00d fd7a 	bl	8019fbc <HAL_GPIO_WritePin>
                  break;
 800c4c8:	e0b3      	b.n	800c632 <BIOS_Ctrl+0x2be>

    case AOFFSET: HAL_DAC_SetValue( &hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, Val);  /*DAC->DHR12R2  = (u16)Val; */
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	2110      	movs	r1, #16
 800c4d0:	4861      	ldr	r0, [pc, #388]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c4d2:	f00c fd5e 	bl	8018f92 <HAL_DAC_SetValue>
                  break;
 800c4d6:	e0ac      	b.n	800c632 <BIOS_Ctrl+0x2be>

    case DAC_TIM:
    			  htim7.Init.Period = Val-1;
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	3b01      	subs	r3, #1
 800c4dc:	4a5f      	ldr	r2, [pc, #380]	; (800c65c <BIOS_Ctrl+0x2e8>)
 800c4de:	60d3      	str	r3, [r2, #12]
    			  HAL_TIM_Base_Init(&htim7);
 800c4e0:	485e      	ldr	r0, [pc, #376]	; (800c65c <BIOS_Ctrl+0x2e8>)
 800c4e2:	f010 febb 	bl	801d25c <HAL_TIM_Base_Init>
    			  break;
 800c4e6:	e0a4      	b.n	800c632 <BIOS_Ctrl+0x2be>

    case OUT_BUF:
    // need to do this at low level
        		  // set circular  /* OUT_DMA->CCR   = 0x15B0; // PL=01, M/P_SIZE=0101, M/P_INC=10, CIRC=1, DIR=1, En=0 */
    			  dma_tmp = hdma_dac1.Instance->CR;
 800c4e8:	4b5d      	ldr	r3, [pc, #372]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	61fb      	str	r3, [r7, #28]
    			  dma_tmp &= 0x0FFFFEDE;
 800c4f0:	69fa      	ldr	r2, [r7, #28]
 800c4f2:	4b5c      	ldr	r3, [pc, #368]	; (800c664 <BIOS_Ctrl+0x2f0>)
 800c4f4:	4013      	ands	r3, r2
 800c4f6:	61fb      	str	r3, [r7, #28]
    			  dma_tmp |= 0x120; //set circ and pfctrl
 800c4f8:	69fb      	ldr	r3, [r7, #28]
 800c4fa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c4fe:	61fb      	str	r3, [r7, #28]
				  hdma_dac1.Instance->CR = dma_tmp;
 800c500:	4b57      	ldr	r3, [pc, #348]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	69fa      	ldr	r2, [r7, #28]
 800c506:	601a      	str	r2, [r3, #0]
         		  hdma_dac1.Instance->PAR = hdac.Instance->DHR12R1;  /* OUT_DMA->CPAR  = (u32)&DAC->DHR12R1; */
 800c508:	4b53      	ldr	r3, [pc, #332]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c50a:	681a      	ldr	r2, [r3, #0]
 800c50c:	4b54      	ldr	r3, [pc, #336]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	6892      	ldr	r2, [r2, #8]
 800c512:	609a      	str	r2, [r3, #8]
        		  hdma_dac1.Instance->M0AR = Val;  /*  OUT_DMA->CMAR  = (u32)Val; */
 800c514:	4b52      	ldr	r3, [pc, #328]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	683a      	ldr	r2, [r7, #0]
 800c51a:	60da      	str	r2, [r3, #12]
                  break;
 800c51c:	e089      	b.n	800c632 <BIOS_Ctrl+0x2be>

    case OUT_CNT:
    			  __HAL_DMA_SET_COUNTER( &hdma_dac1, Val);  /*OUT_DMA->CNDTR = (u16)Val; */
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	b29a      	uxth	r2, r3
 800c522:	4b4f      	ldr	r3, [pc, #316]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	605a      	str	r2, [r3, #4]
    			  break;
 800c528:	e083      	b.n	800c632 <BIOS_Ctrl+0x2be>

    case OUT_MOD:
      GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800c52a:	2301      	movs	r3, #1
 800c52c:	617b      	str	r3, [r7, #20]
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	2b04      	cmp	r3, #4
 800c532:	d009      	beq.n	800c548 <BIOS_Ctrl+0x1d4>
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	2b04      	cmp	r3, #4
 800c538:	d87a      	bhi.n	800c630 <BIOS_Ctrl+0x2bc>
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d04d      	beq.n	800c5dc <BIOS_Ctrl+0x268>
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	2b02      	cmp	r3, #2
 800c544:	d025      	beq.n	800c592 <BIOS_Ctrl+0x21e>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
                                  break;
                  }
                  break;
 800c546:	e073      	b.n	800c630 <BIOS_Ctrl+0x2bc>
                                  __HAL_DMA_DISABLE(&hdma_dac1); // OUT_DMA->CCR &= 0xFFFE;               //�رղ������DMA
 800c548:	4b45      	ldr	r3, [pc, #276]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	681a      	ldr	r2, [r3, #0]
 800c54e:	4b44      	ldr	r3, [pc, #272]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f022 0201 	bic.w	r2, r2, #1
 800c556:	601a      	str	r2, [r3, #0]
                    		      __HAL_DAC_DISABLE(&hdac, DAC_CHANNEL_1);
 800c558:	4b3f      	ldr	r3, [pc, #252]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	681a      	ldr	r2, [r3, #0]
 800c55e:	4b3e      	ldr	r3, [pc, #248]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f022 0201 	bic.w	r2, r2, #1
 800c566:	601a      	str	r2, [r3, #0]
                                  GPIO_InitStructure.Pin   = Fo2_Pin;
 800c568:	2304      	movs	r3, #4
 800c56a:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800c56c:	2302      	movs	r3, #2
 800c56e:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStructure);
 800c570:	f107 0308 	add.w	r3, r7, #8
 800c574:	4619      	mov	r1, r3
 800c576:	483c      	ldr	r0, [pc, #240]	; (800c668 <BIOS_Ctrl+0x2f4>)
 800c578:	f00d fb74 	bl	8019c64 <HAL_GPIO_Init>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
 800c57c:	2310      	movs	r3, #16
 800c57e:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
 800c580:	2300      	movs	r3, #0
 800c582:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
 800c584:	f107 0308 	add.w	r3, r7, #8
 800c588:	4619      	mov	r1, r3
 800c58a:	4837      	ldr	r0, [pc, #220]	; (800c668 <BIOS_Ctrl+0x2f4>)
 800c58c:	f00d fb6a 	bl	8019c64 <HAL_GPIO_Init>
                                  break;
 800c590:	e049      	b.n	800c626 <BIOS_Ctrl+0x2b2>
                    			  GPIO_InitStructure.Pin   = Fo2_Pin ;
 800c592:	2304      	movs	r3, #4
 800c594:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
 800c596:	2300      	movs	r3, #0
 800c598:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStructure);
 800c59a:	f107 0308 	add.w	r3, r7, #8
 800c59e:	4619      	mov	r1, r3
 800c5a0:	4831      	ldr	r0, [pc, #196]	; (800c668 <BIOS_Ctrl+0x2f4>)
 800c5a2:	f00d fb5f 	bl	8019c64 <HAL_GPIO_Init>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
 800c5a6:	2310      	movs	r3, #16
 800c5a8:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_ANALOG;
 800c5aa:	2303      	movs	r3, #3
 800c5ac:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
 800c5ae:	f107 0308 	add.w	r3, r7, #8
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	482c      	ldr	r0, [pc, #176]	; (800c668 <BIOS_Ctrl+0x2f4>)
 800c5b6:	f00d fb55 	bl	8019c64 <HAL_GPIO_Init>
                                  __HAL_DMA_ENABLE(&hdma_dac1);  // OUT_DMA->CCR |= ENABLE;               //���������DMA
 800c5ba:	4b29      	ldr	r3, [pc, #164]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	681a      	ldr	r2, [r3, #0]
 800c5c0:	4b27      	ldr	r3, [pc, #156]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f042 0201 	orr.w	r2, r2, #1
 800c5c8:	601a      	str	r2, [r3, #0]
                                  __HAL_DAC_ENABLE(&hdac, DAC_CHANNEL_1);
 800c5ca:	4b23      	ldr	r3, [pc, #140]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	681a      	ldr	r2, [r3, #0]
 800c5d0:	4b21      	ldr	r3, [pc, #132]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f042 0201 	orr.w	r2, r2, #1
 800c5d8:	601a      	str	r2, [r3, #0]
                                  break;
 800c5da:	e024      	b.n	800c626 <BIOS_Ctrl+0x2b2>
                    			  __HAL_DMA_DISABLE(&hdma_dac1);  // OUT_DMA->CCR &= 0xFFFE;                //�رղ������DMA
 800c5dc:	4b20      	ldr	r3, [pc, #128]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	681a      	ldr	r2, [r3, #0]
 800c5e2:	4b1f      	ldr	r3, [pc, #124]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	f022 0201 	bic.w	r2, r2, #1
 800c5ea:	601a      	str	r2, [r3, #0]
                    		      __HAL_DAC_DISABLE(&hdac, DAC_CHANNEL_1);
 800c5ec:	4b1a      	ldr	r3, [pc, #104]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	681a      	ldr	r2, [r3, #0]
 800c5f2:	4b19      	ldr	r3, [pc, #100]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f022 0201 	bic.w	r2, r2, #1
 800c5fa:	601a      	str	r2, [r3, #0]
                                  GPIO_InitStructure.Pin   = Fo2_Pin ;
 800c5fc:	2304      	movs	r3, #4
 800c5fe:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800c600:	2302      	movs	r3, #2
 800c602:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStructure);
 800c604:	f107 0308 	add.w	r3, r7, #8
 800c608:	4619      	mov	r1, r3
 800c60a:	4817      	ldr	r0, [pc, #92]	; (800c668 <BIOS_Ctrl+0x2f4>)
 800c60c:	f00d fb2a 	bl	8019c64 <HAL_GPIO_Init>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
 800c610:	2310      	movs	r3, #16
 800c612:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
 800c614:	2300      	movs	r3, #0
 800c616:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
 800c618:	f107 0308 	add.w	r3, r7, #8
 800c61c:	4619      	mov	r1, r3
 800c61e:	4812      	ldr	r0, [pc, #72]	; (800c668 <BIOS_Ctrl+0x2f4>)
 800c620:	f00d fb20 	bl	8019c64 <HAL_GPIO_Init>
                                  break;
 800c624:	bf00      	nop
                  break;
 800c626:	e003      	b.n	800c630 <BIOS_Ctrl+0x2bc>

    default: break;
 800c628:	bf00      	nop
 800c62a:	e002      	b.n	800c632 <BIOS_Ctrl+0x2be>
    			  break;
 800c62c:	bf00      	nop
 800c62e:	e000      	b.n	800c632 <BIOS_Ctrl+0x2be>
                  break;
 800c630:	bf00      	nop
  }
}
 800c632:	bf00      	nop
 800c634:	3720      	adds	r7, #32
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}
 800c63a:	bf00      	nop
 800c63c:	20006b18 	.word	0x20006b18
 800c640:	20006a84 	.word	0x20006a84
 800c644:	200068f4 	.word	0x200068f4
 800c648:	20006b94 	.word	0x20006b94
 800c64c:	20006b78 	.word	0x20006b78
 800c650:	40020800 	.word	0x40020800
 800c654:	40020400 	.word	0x40020400
 800c658:	20006b04 	.word	0x20006b04
 800c65c:	20006bdc 	.word	0x20006bdc
 800c660:	20006a24 	.word	0x20006a24
 800c664:	0ffffede 	.word	0x0ffffede
 800c668:	40020000 	.word	0x40020000

0800c66c <Set_Base>:

/*******************************************************************************
 Set_Base: ˮƽɨ��ʱ��ת������
*******************************************************************************/
void Set_Base(short Base)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b082      	sub	sp, #8
 800c670:	af00      	add	r7, sp, #0
 800c672:	4603      	mov	r3, r0
 800c674:	80fb      	strh	r3, [r7, #6]
	octim1.Pulse = (ARR[Base]+1)/2;
 800c676:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c67a:	4a13      	ldr	r2, [pc, #76]	; (800c6c8 <Set_Base+0x5c>)
 800c67c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c680:	3301      	adds	r3, #1
 800c682:	0fda      	lsrs	r2, r3, #31
 800c684:	4413      	add	r3, r2
 800c686:	105b      	asrs	r3, r3, #1
 800c688:	461a      	mov	r2, r3
 800c68a:	4b10      	ldr	r3, [pc, #64]	; (800c6cc <Set_Base+0x60>)
 800c68c:	605a      	str	r2, [r3, #4]
	HAL_TIM_OC_ConfigChannel(&htim1, &octim1, 1 );
 800c68e:	2201      	movs	r2, #1
 800c690:	490e      	ldr	r1, [pc, #56]	; (800c6cc <Set_Base+0x60>)
 800c692:	480f      	ldr	r0, [pc, #60]	; (800c6d0 <Set_Base+0x64>)
 800c694:	f010 ffaa 	bl	801d5ec <HAL_TIM_OC_ConfigChannel>
	htim1.Init.Prescaler = PSC[Base];
 800c698:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c69c:	4a0d      	ldr	r2, [pc, #52]	; (800c6d4 <Set_Base+0x68>)
 800c69e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c6a2:	461a      	mov	r2, r3
 800c6a4:	4b0a      	ldr	r3, [pc, #40]	; (800c6d0 <Set_Base+0x64>)
 800c6a6:	605a      	str	r2, [r3, #4]
	htim1.Init.Period = ARR[Base];
 800c6a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c6ac:	4a06      	ldr	r2, [pc, #24]	; (800c6c8 <Set_Base+0x5c>)
 800c6ae:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	4b06      	ldr	r3, [pc, #24]	; (800c6d0 <Set_Base+0x64>)
 800c6b6:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Init(&htim1);
 800c6b8:	4805      	ldr	r0, [pc, #20]	; (800c6d0 <Set_Base+0x64>)
 800c6ba:	f010 fdcf 	bl	801d25c <HAL_TIM_Base_Init>
}
 800c6be:	bf00      	nop
 800c6c0:	3708      	adds	r7, #8
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}
 800c6c6:	bf00      	nop
 800c6c8:	08000b30 	.word	0x08000b30
 800c6cc:	20006b78 	.word	0x20006b78
 800c6d0:	20006b94 	.word	0x20006b94
 800c6d4:	08000b08 	.word	0x08000b08

0800c6d8 <Set_Duty>:

/*******************************************************************************
 Set_Duty: �������ռ�ձ�����
*******************************************************************************/
void Set_Duty(void)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	af00      	add	r7, sp, #0
	 octim5.Pulse = (FARR[List[FREQ_OUT].Val]+1)*(10-List[FREQ_DUT].Val)/10;
 800c6dc:	4b0f      	ldr	r3, [pc, #60]	; (800c71c <Set_Duty+0x44>)
 800c6de:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 800c6e2:	461a      	mov	r2, r3
 800c6e4:	4b0e      	ldr	r3, [pc, #56]	; (800c720 <Set_Duty+0x48>)
 800c6e6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800c6ea:	3301      	adds	r3, #1
 800c6ec:	4a0b      	ldr	r2, [pc, #44]	; (800c71c <Set_Duty+0x44>)
 800c6ee:	f9b2 2134 	ldrsh.w	r2, [r2, #308]	; 0x134
 800c6f2:	f1c2 020a 	rsb	r2, r2, #10
 800c6f6:	fb02 f303 	mul.w	r3, r2, r3
 800c6fa:	4a0a      	ldr	r2, [pc, #40]	; (800c724 <Set_Duty+0x4c>)
 800c6fc:	fb82 1203 	smull	r1, r2, r2, r3
 800c700:	1092      	asrs	r2, r2, #2
 800c702:	17db      	asrs	r3, r3, #31
 800c704:	1ad3      	subs	r3, r2, r3
 800c706:	461a      	mov	r2, r3
 800c708:	4b07      	ldr	r3, [pc, #28]	; (800c728 <Set_Duty+0x50>)
 800c70a:	605a      	str	r2, [r3, #4]
	 HAL_TIM_OC_ConfigChannel(&htim5, &octim5, 3 );
 800c70c:	2203      	movs	r2, #3
 800c70e:	4906      	ldr	r1, [pc, #24]	; (800c728 <Set_Duty+0x50>)
 800c710:	4806      	ldr	r0, [pc, #24]	; (800c72c <Set_Duty+0x54>)
 800c712:	f010 ff6b 	bl	801d5ec <HAL_TIM_OC_ConfigChannel>
}
 800c716:	bf00      	nop
 800c718:	bd80      	pop	{r7, pc}
 800c71a:	bf00      	nop
 800c71c:	20000298 	.word	0x20000298
 800c720:	08000ae8 	.word	0x08000ae8
 800c724:	66666667 	.word	0x66666667
 800c728:	20006ae8 	.word	0x20006ae8
 800c72c:	2000693c 	.word	0x2000693c

0800c730 <Set_Fout>:

/*******************************************************************************
 Set_Fout: �������Ƶ������
*******************************************************************************/
void Set_Fout(short Range)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b082      	sub	sp, #8
 800c734:	af00      	add	r7, sp, #0
 800c736:	4603      	mov	r3, r0
 800c738:	80fb      	strh	r3, [r7, #6]
	octim5.Pulse = (FARR[Range]+1)/2;
 800c73a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c73e:	4a13      	ldr	r2, [pc, #76]	; (800c78c <Set_Fout+0x5c>)
 800c740:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c744:	3301      	adds	r3, #1
 800c746:	0fda      	lsrs	r2, r3, #31
 800c748:	4413      	add	r3, r2
 800c74a:	105b      	asrs	r3, r3, #1
 800c74c:	461a      	mov	r2, r3
 800c74e:	4b10      	ldr	r3, [pc, #64]	; (800c790 <Set_Fout+0x60>)
 800c750:	605a      	str	r2, [r3, #4]
	HAL_TIM_OC_ConfigChannel(&htim5, &octim5, 3 );
 800c752:	2203      	movs	r2, #3
 800c754:	490e      	ldr	r1, [pc, #56]	; (800c790 <Set_Fout+0x60>)
 800c756:	480f      	ldr	r0, [pc, #60]	; (800c794 <Set_Fout+0x64>)
 800c758:	f010 ff48 	bl	801d5ec <HAL_TIM_OC_ConfigChannel>
	htim5.Init.Prescaler = FPSC[Range];
 800c75c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c760:	4a0d      	ldr	r2, [pc, #52]	; (800c798 <Set_Fout+0x68>)
 800c762:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c766:	461a      	mov	r2, r3
 800c768:	4b0a      	ldr	r3, [pc, #40]	; (800c794 <Set_Fout+0x64>)
 800c76a:	605a      	str	r2, [r3, #4]
	htim5.Init.Period = FARR[Range];
 800c76c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c770:	4a06      	ldr	r2, [pc, #24]	; (800c78c <Set_Fout+0x5c>)
 800c772:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c776:	461a      	mov	r2, r3
 800c778:	4b06      	ldr	r3, [pc, #24]	; (800c794 <Set_Fout+0x64>)
 800c77a:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Init(&htim5);
 800c77c:	4805      	ldr	r0, [pc, #20]	; (800c794 <Set_Fout+0x64>)
 800c77e:	f010 fd6d 	bl	801d25c <HAL_TIM_Base_Init>
}
 800c782:	bf00      	nop
 800c784:	3708      	adds	r7, #8
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}
 800c78a:	bf00      	nop
 800c78c:	08000ae8 	.word	0x08000ae8
 800c790:	20006ae8 	.word	0x20006ae8
 800c794:	2000693c 	.word	0x2000693c
 800c798:	08000ac8 	.word	0x08000ac8

0800c79c <ADC_Start>:

/*******************************************************************************
 ADC_Start: ���¿�ʼADCɨ�����
*******************************************************************************/
void ADC_Start(void)
{
 800c79c:	b480      	push	{r7}
 800c79e:	af00      	add	r7, sp, #0
  Sampl[0]   = List[TIM_BASE].Val;         // �������ʱ����λֵ
 800c7a0:	4b20      	ldr	r3, [pc, #128]	; (800c824 <ADC_Start+0x88>)
 800c7a2:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 800c7a6:	4b20      	ldr	r3, [pc, #128]	; (800c828 <ADC_Start+0x8c>)
 800c7a8:	801a      	strh	r2, [r3, #0]
  __HAL_DMA_DISABLE(&hdma_adc1);  //  DMA1_Channel1->CCR   &= 0xFFFFFFFFE;
 800c7aa:	4b20      	ldr	r3, [pc, #128]	; (800c82c <ADC_Start+0x90>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	681a      	ldr	r2, [r3, #0]
 800c7b0:	4b1e      	ldr	r3, [pc, #120]	; (800c82c <ADC_Start+0x90>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	f022 0201 	bic.w	r2, r2, #1
 800c7b8:	601a      	str	r2, [r3, #0]
  hdma_adc1.Instance->M0AR = (unsigned)&Sampl[2];//  DMA1_Channel1->CMAR  = (u32)&Sampl[2];      // �����趨DMAͨ��1
 800c7ba:	4b1c      	ldr	r3, [pc, #112]	; (800c82c <ADC_Start+0x90>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	4a1c      	ldr	r2, [pc, #112]	; (800c830 <ADC_Start+0x94>)
 800c7c0:	60da      	str	r2, [r3, #12]
  if(( List[SYNCMODE].Val == NONE|| List[SYNCMODE].Val == SCAN)
 800c7c2:	4b18      	ldr	r3, [pc, #96]	; (800c824 <ADC_Start+0x88>)
 800c7c4:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 800c7c8:	2b05      	cmp	r3, #5
 800c7ca:	d004      	beq.n	800c7d6 <ADC_Start+0x3a>
 800c7cc:	4b15      	ldr	r3, [pc, #84]	; (800c824 <ADC_Start+0x88>)
 800c7ce:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 800c7d2:	2b01      	cmp	r3, #1
 800c7d4:	d10e      	bne.n	800c7f4 <ADC_Start+0x58>
     &&( List[TIM_BASE].Val>11))
 800c7d6:	4b13      	ldr	r3, [pc, #76]	; (800c824 <ADC_Start+0x88>)
 800c7d8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c7dc:	2b0b      	cmp	r3, #11
 800c7de:	dd09      	ble.n	800c7f4 <ADC_Start+0x58>
     {
	  __HAL_DMA_SET_COUNTER(&hdma_adc1, 302);  //       DMA1_Channel1->CNDTR  = 302;                       //10ms
 800c7e0:	4b12      	ldr	r3, [pc, #72]	; (800c82c <ADC_Start+0x90>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800c7e8:	605a      	str	r2, [r3, #4]
       List[VIEWPOSI].Val= 0;
 800c7ea:	4b0e      	ldr	r3, [pc, #56]	; (800c824 <ADC_Start+0x88>)
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800c7f2:	e00a      	b.n	800c80a <ADC_Start+0x6e>
     }
  else
  __HAL_DMA_SET_COUNTER(&hdma_adc1, DEPTH[List[SMPL_DPTH].Val]);//    DMA1_Channel1->CNDTR = DEPTH[List[SMPL_DPTH].Val]; // 0x00001000;
 800c7f4:	4b0b      	ldr	r3, [pc, #44]	; (800c824 <ADC_Start+0x88>)
 800c7f6:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	4b0d      	ldr	r3, [pc, #52]	; (800c834 <ADC_Start+0x98>)
 800c7fe:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800c802:	b29a      	uxth	r2, r3
 800c804:	4b09      	ldr	r3, [pc, #36]	; (800c82c <ADC_Start+0x90>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	605a      	str	r2, [r3, #4]
  __HAL_DMA_ENABLE(&hdma_adc1);  //  DMA1_Channel1->CCR  |= 0x00000001;                 // ���¿�ʼɨ�����
 800c80a:	4b08      	ldr	r3, [pc, #32]	; (800c82c <ADC_Start+0x90>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	681a      	ldr	r2, [r3, #0]
 800c810:	4b06      	ldr	r3, [pc, #24]	; (800c82c <ADC_Start+0x90>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f042 0201 	orr.w	r2, r2, #1
 800c818:	601a      	str	r2, [r3, #0]
}
 800c81a:	bf00      	nop
 800c81c:	46bd      	mov	sp, r7
 800c81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c822:	4770      	bx	lr
 800c824:	20000298 	.word	0x20000298
 800c828:	20002878 	.word	0x20002878
 800c82c:	20006b18 	.word	0x20006b18
 800c830:	2000287c 	.word	0x2000287c
 800c834:	08002270 	.word	0x08002270

0800c838 <Valid_Button>:

// returns 0 if invalad or code
char Valid_Button(short x,short y)
{
 800c838:	b480      	push	{r7}
 800c83a:	b085      	sub	sp, #20
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	4603      	mov	r3, r0
 800c840:	460a      	mov	r2, r1
 800c842:	80fb      	strh	r3, [r7, #6]
 800c844:	4613      	mov	r3, r2
 800c846:	80bb      	strh	r3, [r7, #4]
	char valid;
	valid =0;
 800c848:	2300      	movs	r3, #0
 800c84a:	73fb      	strb	r3, [r7, #15]

	x=x/4;
 800c84c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c850:	2b00      	cmp	r3, #0
 800c852:	da00      	bge.n	800c856 <Valid_Button+0x1e>
 800c854:	3303      	adds	r3, #3
 800c856:	109b      	asrs	r3, r3, #2
 800c858:	80fb      	strh	r3, [r7, #6]
	y=y/4;
 800c85a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	da00      	bge.n	800c864 <Valid_Button+0x2c>
 800c862:	3303      	adds	r3, #3
 800c864:	109b      	asrs	r3, r3, #2
 800c866:	80bb      	strh	r3, [r7, #4]

	if(y<=205)  //lower screen
 800c868:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c86c:	2bcd      	cmp	r3, #205	; 0xcd
 800c86e:	dc17      	bgt.n	800c8a0 <Valid_Button+0x68>
	{
		if((x>359) && (x<664))  //middle screen bottom
 800c870:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c874:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800c878:	db06      	blt.n	800c888 <Valid_Button+0x50>
 800c87a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c87e:	f5b3 7f26 	cmp.w	r3, #664	; 0x298
 800c882:	da01      	bge.n	800c888 <Valid_Button+0x50>
			valid =KEYCODE_DOWN;
 800c884:	2304      	movs	r3, #4
 800c886:	73fb      	strb	r3, [r7, #15]
		if((x <= 205)||(x >= 818)) //left or right screen
 800c888:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c88c:	2bcd      	cmp	r3, #205	; 0xcd
 800c88e:	dd05      	ble.n	800c89c <Valid_Button+0x64>
 800c890:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c894:	f240 3231 	movw	r2, #817	; 0x331
 800c898:	4293      	cmp	r3, r2
 800c89a:	dd01      	ble.n	800c8a0 <Valid_Button+0x68>
			valid = KEYCODE_MANU;
 800c89c:	2302      	movs	r3, #2
 800c89e:	73fb      	strb	r3, [r7, #15]
	}

	if(y >= 818)  //upper screen
 800c8a0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c8a4:	f240 3231 	movw	r2, #817	; 0x331
 800c8a8:	4293      	cmp	r3, r2
 800c8aa:	dd17      	ble.n	800c8dc <Valid_Button+0xa4>
	{
		if((x>359) && (x<664))  //middle screen up
 800c8ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c8b0:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800c8b4:	db06      	blt.n	800c8c4 <Valid_Button+0x8c>
 800c8b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c8ba:	f5b3 7f26 	cmp.w	r3, #664	; 0x298
 800c8be:	da01      	bge.n	800c8c4 <Valid_Button+0x8c>
			valid =KEYCODE_UP;
 800c8c0:	2303      	movs	r3, #3
 800c8c2:	73fb      	strb	r3, [r7, #15]
		if((x <= 205)||(x >= 818)) //left or right screen
 800c8c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c8c8:	2bcd      	cmp	r3, #205	; 0xcd
 800c8ca:	dd05      	ble.n	800c8d8 <Valid_Button+0xa0>
 800c8cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c8d0:	f240 3231 	movw	r2, #817	; 0x331
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	dd01      	ble.n	800c8dc <Valid_Button+0xa4>
			valid = KEYCODE_PLAY;
 800c8d8:	2301      	movs	r3, #1
 800c8da:	73fb      	strb	r3, [r7, #15]
	}

	if((y>409) && (y<613))  //middle screen
 800c8dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c8e0:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 800c8e4:	db12      	blt.n	800c90c <Valid_Button+0xd4>
 800c8e6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c8ea:	f5b3 7f19 	cmp.w	r3, #612	; 0x264
 800c8ee:	dc0d      	bgt.n	800c90c <Valid_Button+0xd4>
	{
		if(x <= 306) //left screen
 800c8f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c8f4:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800c8f8:	dc01      	bgt.n	800c8fe <Valid_Button+0xc6>
			valid=KEYCODE_LEFT;
 800c8fa:	2305      	movs	r3, #5
 800c8fc:	73fb      	strb	r3, [r7, #15]
		if(x >= 717) //right screen
 800c8fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c902:	f5b3 7f33 	cmp.w	r3, #716	; 0x2cc
 800c906:	dd01      	ble.n	800c90c <Valid_Button+0xd4>
			valid=KEYCODE_RIGHT;
 800c908:	2306      	movs	r3, #6
 800c90a:	73fb      	strb	r3, [r7, #15]
	}

	return valid;
 800c90c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c90e:	4618      	mov	r0, r3
 800c910:	3714      	adds	r7, #20
 800c912:	46bd      	mov	sp, r7
 800c914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c918:	4770      	bx	lr
	...

0800c91c <touchscan>:
//touchscan -- maps touch to key codes  returns 0 if no change
char touchscan(void)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b082      	sub	sp, #8
 800c920:	af00      	add	r7, sp, #0
	short x,y;
	char Code, TmpCode, Touched;

	TmpCode = Code =0;
 800c922:	2300      	movs	r3, #0
 800c924:	71fb      	strb	r3, [r7, #7]
 800c926:	79fb      	ldrb	r3, [r7, #7]
 800c928:	71bb      	strb	r3, [r7, #6]
	Touched = Touch_Read(&x,&y);
 800c92a:	463a      	mov	r2, r7
 800c92c:	1cbb      	adds	r3, r7, #2
 800c92e:	4611      	mov	r1, r2
 800c930:	4618      	mov	r0, r3
 800c932:	f009 feb7 	bl	80166a4 <Touch_Read>
 800c936:	4603      	mov	r3, r0
 800c938:	717b      	strb	r3, [r7, #5]

	if(Touched!=0)
 800c93a:	797b      	ldrb	r3, [r7, #5]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	f000 8087 	beq.w	800ca50 <touchscan+0x134>
	{  // there was a touch
		TmpCode = Valid_Button(x, y);
 800c942:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c946:	f9b7 2000 	ldrsh.w	r2, [r7]
 800c94a:	4611      	mov	r1, r2
 800c94c:	4618      	mov	r0, r3
 800c94e:	f7ff ff73 	bl	800c838 <Valid_Button>
 800c952:	4603      	mov	r3, r0
 800c954:	71bb      	strb	r3, [r7, #6]
		if((TmpCode!=0) && (TmpCode != Lastcode))  //changed to pressed
 800c956:	79bb      	ldrb	r3, [r7, #6]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d03c      	beq.n	800c9d6 <touchscan+0xba>
 800c95c:	4b62      	ldr	r3, [pc, #392]	; (800cae8 <touchscan+0x1cc>)
 800c95e:	781b      	ldrb	r3, [r3, #0]
 800c960:	b2db      	uxtb	r3, r3
 800c962:	79ba      	ldrb	r2, [r7, #6]
 800c964:	429a      	cmp	r2, r3
 800c966:	d036      	beq.n	800c9d6 <touchscan+0xba>
		{
		    Key_Wait_Cnt   = 50;                              // ���ó������� 1.0S ����
 800c968:	4b60      	ldr	r3, [pc, #384]	; (800caec <touchscan+0x1d0>)
 800c96a:	2232      	movs	r2, #50	; 0x32
 800c96c:	701a      	strb	r2, [r3, #0]
		    Key_Repeat_Cnt = 3;                               // �趨 60mS �Զ��ظ�����
 800c96e:	4b60      	ldr	r3, [pc, #384]	; (800caf0 <touchscan+0x1d4>)
 800c970:	2203      	movs	r2, #3
 800c972:	701a      	strb	r2, [r3, #0]
		    if(TmpCode == KEYCODE_PLAY)
 800c974:	79bb      	ldrb	r3, [r7, #6]
 800c976:	2b01      	cmp	r3, #1
 800c978:	d102      	bne.n	800c980 <touchscan+0x64>
		    	TmpKeyP = KEYCODE_PLAY;        // KeyCode(Play/A)
 800c97a:	4b5e      	ldr	r3, [pc, #376]	; (800caf4 <touchscan+0x1d8>)
 800c97c:	2201      	movs	r2, #1
 800c97e:	701a      	strb	r2, [r3, #0]
		    if(TmpCode == KEYCODE_MANU)
 800c980:	79bb      	ldrb	r3, [r7, #6]
 800c982:	2b02      	cmp	r3, #2
 800c984:	d121      	bne.n	800c9ca <touchscan+0xae>
		    {
		        if(KeymS_F)
 800c986:	4b5c      	ldr	r3, [pc, #368]	; (800caf8 <touchscan+0x1dc>)
 800c988:	781b      	ldrb	r3, [r3, #0]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d013      	beq.n	800c9b6 <touchscan+0x9a>
		        {                            // OK��˫��
		             KeymS_F = 0;                        //�������ʱ��־��KeymS_Cnt��ʱ
 800c98e:	4b5a      	ldr	r3, [pc, #360]	; (800caf8 <touchscan+0x1dc>)
 800c990:	2200      	movs	r2, #0
 800c992:	701a      	strb	r2, [r3, #0]
		             if(KeymS_Cnt < KEYTIME)
 800c994:	4b59      	ldr	r3, [pc, #356]	; (800cafc <touchscan+0x1e0>)
 800c996:	881b      	ldrh	r3, [r3, #0]
 800c998:	b21a      	sxth	r2, r3
 800c99a:	4b59      	ldr	r3, [pc, #356]	; (800cb00 <touchscan+0x1e4>)
 800c99c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c9a0:	429a      	cmp	r2, r3
 800c9a2:	da02      	bge.n	800c9aa <touchscan+0x8e>
		             {            // KEYTIME�������������μ���Ϊ˫��
		                  Code = KEYCODE_D_MANU;
 800c9a4:	230a      	movs	r3, #10
 800c9a6:	71fb      	strb	r3, [r7, #7]
 800c9a8:	e001      	b.n	800c9ae <touchscan+0x92>
		             }
		             else
		             {
		                  Code = KEYCODE_MANU;
 800c9aa:	2302      	movs	r3, #2
 800c9ac:	71fb      	strb	r3, [r7, #7]
		             }
		             KeymS_Cnt = 0;
 800c9ae:	4b53      	ldr	r3, [pc, #332]	; (800cafc <touchscan+0x1e0>)
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	801a      	strh	r2, [r3, #0]
		    if(TmpCode == KEYCODE_MANU)
 800c9b4:	e04b      	b.n	800ca4e <touchscan+0x132>
		        }
		        else
		        {                                  // OK��˫��
		                KeymS_Cnt = 0;
 800c9b6:	4b51      	ldr	r3, [pc, #324]	; (800cafc <touchscan+0x1e0>)
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	801a      	strh	r2, [r3, #0]
		                KeymS_F = 1;
 800c9bc:	4b4e      	ldr	r3, [pc, #312]	; (800caf8 <touchscan+0x1dc>)
 800c9be:	2201      	movs	r2, #1
 800c9c0:	701a      	strb	r2, [r3, #0]
		                TmpKeyOK = KEYCODE_MANU;
 800c9c2:	4b50      	ldr	r3, [pc, #320]	; (800cb04 <touchscan+0x1e8>)
 800c9c4:	2202      	movs	r2, #2
 800c9c6:	701a      	strb	r2, [r3, #0]
		    if(TmpCode == KEYCODE_MANU)
 800c9c8:	e041      	b.n	800ca4e <touchscan+0x132>
		        }
		    }
		    else
		    {
			    if(TmpCode != KEYCODE_PLAY)
 800c9ca:	79bb      	ldrb	r3, [r7, #6]
 800c9cc:	2b01      	cmp	r3, #1
 800c9ce:	d03e      	beq.n	800ca4e <touchscan+0x132>
			    	Code = TmpCode;
 800c9d0:	79bb      	ldrb	r3, [r7, #6]
 800c9d2:	71fb      	strb	r3, [r7, #7]
		    if(TmpCode == KEYCODE_MANU)
 800c9d4:	e03b      	b.n	800ca4e <touchscan+0x132>
		    }
		}
		else
		{
			if(TmpCode != 0)  // same press
 800c9d6:	79bb      	ldrb	r3, [r7, #6]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d039      	beq.n	800ca50 <touchscan+0x134>
			{
			      if((Key_Wait_Cnt < 25)&&(Key_Repeat_Cnt == 0))
 800c9dc:	4b43      	ldr	r3, [pc, #268]	; (800caec <touchscan+0x1d0>)
 800c9de:	781b      	ldrb	r3, [r3, #0]
 800c9e0:	b2db      	uxtb	r3, r3
 800c9e2:	2b18      	cmp	r3, #24
 800c9e4:	d80f      	bhi.n	800ca06 <touchscan+0xea>
 800c9e6:	4b42      	ldr	r3, [pc, #264]	; (800caf0 <touchscan+0x1d4>)
 800c9e8:	781b      	ldrb	r3, [r3, #0]
 800c9ea:	b2db      	uxtb	r3, r3
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d10a      	bne.n	800ca06 <touchscan+0xea>
			      { // �������� 0.5S ����
			    	  if((TmpCode != KEYCODE_PLAY) && (TmpCode != KEYCODE_MANU))
 800c9f0:	79bb      	ldrb	r3, [r7, #6]
 800c9f2:	2b01      	cmp	r3, #1
 800c9f4:	d007      	beq.n	800ca06 <touchscan+0xea>
 800c9f6:	79bb      	ldrb	r3, [r7, #6]
 800c9f8:	2b02      	cmp	r3, #2
 800c9fa:	d004      	beq.n	800ca06 <touchscan+0xea>
			    	  {
						  Key_Repeat_Cnt = 3;        // �趨 60mS �Զ��ظ�����
 800c9fc:	4b3c      	ldr	r3, [pc, #240]	; (800caf0 <touchscan+0x1d4>)
 800c9fe:	2203      	movs	r2, #3
 800ca00:	701a      	strb	r2, [r3, #0]
						  Code = TmpCode;
 800ca02:	79bb      	ldrb	r3, [r7, #6]
 800ca04:	71fb      	strb	r3, [r7, #7]
					  }
			      }
			      if((Key_Wait_Cnt == 0)&&(Key_Repeat_Cnt == 0))
 800ca06:	4b39      	ldr	r3, [pc, #228]	; (800caec <touchscan+0x1d0>)
 800ca08:	781b      	ldrb	r3, [r3, #0]
 800ca0a:	b2db      	uxtb	r3, r3
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d11f      	bne.n	800ca50 <touchscan+0x134>
 800ca10:	4b37      	ldr	r3, [pc, #220]	; (800caf0 <touchscan+0x1d4>)
 800ca12:	781b      	ldrb	r3, [r3, #0]
 800ca14:	b2db      	uxtb	r3, r3
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d11a      	bne.n	800ca50 <touchscan+0x134>
			      { // �������� 1.0S ����
			    	  if((TmpCode == KEYCODE_PLAY) || (TmpCode == KEYCODE_MANU))
 800ca1a:	79bb      	ldrb	r3, [r7, #6]
 800ca1c:	2b01      	cmp	r3, #1
 800ca1e:	d002      	beq.n	800ca26 <touchscan+0x10a>
 800ca20:	79bb      	ldrb	r3, [r7, #6]
 800ca22:	2b02      	cmp	r3, #2
 800ca24:	d114      	bne.n	800ca50 <touchscan+0x134>
			    	  {
			    		  if(TmpCode == KEYCODE_PLAY)
 800ca26:	79bb      	ldrb	r3, [r7, #6]
 800ca28:	2b01      	cmp	r3, #1
 800ca2a:	d104      	bne.n	800ca36 <touchscan+0x11a>
			    		  {
			    			  Code = KEYCODE_ACT; TmpKeyP = 0;
 800ca2c:	2308      	movs	r3, #8
 800ca2e:	71fb      	strb	r3, [r7, #7]
 800ca30:	4b30      	ldr	r3, [pc, #192]	; (800caf4 <touchscan+0x1d8>)
 800ca32:	2200      	movs	r2, #0
 800ca34:	701a      	strb	r2, [r3, #0]
			    		  }
			    		  if(TmpCode == KEYCODE_MANU)
 800ca36:	79bb      	ldrb	r3, [r7, #6]
 800ca38:	2b02      	cmp	r3, #2
 800ca3a:	d104      	bne.n	800ca46 <touchscan+0x12a>
			    		  {
			    			  Code = KEYCODE_MEM; TmpKeyM = 0;
 800ca3c:	2309      	movs	r3, #9
 800ca3e:	71fb      	strb	r3, [r7, #7]
 800ca40:	4b31      	ldr	r3, [pc, #196]	; (800cb08 <touchscan+0x1ec>)
 800ca42:	2200      	movs	r2, #0
 800ca44:	701a      	strb	r2, [r3, #0]
			    		  }
			         	  Key_Repeat_Cnt = 50;       //�趨 1.0S �Զ��ظ�����
 800ca46:	4b2a      	ldr	r3, [pc, #168]	; (800caf0 <touchscan+0x1d4>)
 800ca48:	2232      	movs	r2, #50	; 0x32
 800ca4a:	701a      	strb	r2, [r3, #0]
 800ca4c:	e000      	b.n	800ca50 <touchscan+0x134>
		    if(TmpCode == KEYCODE_MANU)
 800ca4e:	bf00      	nop
			    	  }
			      }
			}
		}
	}
	if((Touched == 0)||((TmpCode == 0) && (TmpCode == Lastcode)))
 800ca50:	797b      	ldrb	r3, [r7, #5]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d008      	beq.n	800ca68 <touchscan+0x14c>
 800ca56:	79bb      	ldrb	r3, [r7, #6]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d13c      	bne.n	800cad6 <touchscan+0x1ba>
 800ca5c:	4b22      	ldr	r3, [pc, #136]	; (800cae8 <touchscan+0x1cc>)
 800ca5e:	781b      	ldrb	r3, [r3, #0]
 800ca60:	b2db      	uxtb	r3, r3
 800ca62:	79ba      	ldrb	r2, [r7, #6]
 800ca64:	429a      	cmp	r2, r3
 800ca66:	d136      	bne.n	800cad6 <touchscan+0x1ba>
	{  // untouched
	    if(TmpKeyP)
 800ca68:	4b22      	ldr	r3, [pc, #136]	; (800caf4 <touchscan+0x1d8>)
 800ca6a:	781b      	ldrb	r3, [r3, #0]
 800ca6c:	b2db      	uxtb	r3, r3
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d005      	beq.n	800ca7e <touchscan+0x162>
	    {
	    	Code = TmpKeyP;
 800ca72:	4b20      	ldr	r3, [pc, #128]	; (800caf4 <touchscan+0x1d8>)
 800ca74:	781b      	ldrb	r3, [r3, #0]
 800ca76:	71fb      	strb	r3, [r7, #7]
	    	TmpKeyP = 0;
 800ca78:	4b1e      	ldr	r3, [pc, #120]	; (800caf4 <touchscan+0x1d8>)
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	701a      	strb	r2, [r3, #0]
	    }
	    if(TmpKeyOK &&(KeymS_F)&& (KeymS_Cnt > KEYTIME))
 800ca7e:	4b21      	ldr	r3, [pc, #132]	; (800cb04 <touchscan+0x1e8>)
 800ca80:	781b      	ldrb	r3, [r3, #0]
 800ca82:	b2db      	uxtb	r3, r3
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d018      	beq.n	800caba <touchscan+0x19e>
 800ca88:	4b1b      	ldr	r3, [pc, #108]	; (800caf8 <touchscan+0x1dc>)
 800ca8a:	781b      	ldrb	r3, [r3, #0]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d014      	beq.n	800caba <touchscan+0x19e>
 800ca90:	4b1a      	ldr	r3, [pc, #104]	; (800cafc <touchscan+0x1e0>)
 800ca92:	881b      	ldrh	r3, [r3, #0]
 800ca94:	b21a      	sxth	r2, r3
 800ca96:	4b1a      	ldr	r3, [pc, #104]	; (800cb00 <touchscan+0x1e4>)
 800ca98:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca9c:	429a      	cmp	r2, r3
 800ca9e:	dd0c      	ble.n	800caba <touchscan+0x19e>
	    {
	        Code = TmpKeyOK;
 800caa0:	4b18      	ldr	r3, [pc, #96]	; (800cb04 <touchscan+0x1e8>)
 800caa2:	781b      	ldrb	r3, [r3, #0]
 800caa4:	71fb      	strb	r3, [r7, #7]
	        TmpKeyOK  = 0;
 800caa6:	4b17      	ldr	r3, [pc, #92]	; (800cb04 <touchscan+0x1e8>)
 800caa8:	2200      	movs	r2, #0
 800caaa:	701a      	strb	r2, [r3, #0]
	        KeymS_F = 0;
 800caac:	4b12      	ldr	r3, [pc, #72]	; (800caf8 <touchscan+0x1dc>)
 800caae:	2200      	movs	r2, #0
 800cab0:	701a      	strb	r2, [r3, #0]
	        KeymS_Cnt = 0;
 800cab2:	4b12      	ldr	r3, [pc, #72]	; (800cafc <touchscan+0x1e0>)
 800cab4:	2200      	movs	r2, #0
 800cab6:	801a      	strh	r2, [r3, #0]
 800cab8:	e00a      	b.n	800cad0 <touchscan+0x1b4>
	    }
	    else
	    	if(TmpKeyM) {Code = TmpKeyM; TmpKeyM = 0;}
 800caba:	4b13      	ldr	r3, [pc, #76]	; (800cb08 <touchscan+0x1ec>)
 800cabc:	781b      	ldrb	r3, [r3, #0]
 800cabe:	b2db      	uxtb	r3, r3
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d005      	beq.n	800cad0 <touchscan+0x1b4>
 800cac4:	4b10      	ldr	r3, [pc, #64]	; (800cb08 <touchscan+0x1ec>)
 800cac6:	781b      	ldrb	r3, [r3, #0]
 800cac8:	71fb      	strb	r3, [r7, #7]
 800caca:	4b0f      	ldr	r3, [pc, #60]	; (800cb08 <touchscan+0x1ec>)
 800cacc:	2200      	movs	r2, #0
 800cace:	701a      	strb	r2, [r3, #0]
	        	Key_Wait_Cnt=50;                                //���ó������� 1.0S ����
 800cad0:	4b06      	ldr	r3, [pc, #24]	; (800caec <touchscan+0x1d0>)
 800cad2:	2232      	movs	r2, #50	; 0x32
 800cad4:	701a      	strb	r2, [r3, #0]
	}
	Lastcode = TmpCode;
 800cad6:	4a04      	ldr	r2, [pc, #16]	; (800cae8 <touchscan+0x1cc>)
 800cad8:	79bb      	ldrb	r3, [r7, #6]
 800cada:	7013      	strb	r3, [r2, #0]
	return Code;
 800cadc:	79fb      	ldrb	r3, [r7, #7]
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3708      	adds	r7, #8
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}
 800cae6:	bf00      	nop
 800cae8:	2000078a 	.word	0x2000078a
 800caec:	2000078d 	.word	0x2000078d
 800caf0:	2000078c 	.word	0x2000078c
 800caf4:	2000077e 	.word	0x2000077e
 800caf8:	2000078b 	.word	0x2000078b
 800cafc:	20000a3a 	.word	0x20000a3a
 800cb00:	20000782 	.word	0x20000782
 800cb04:	20000780 	.word	0x20000780
 800cb08:	2000077f 	.word	0x2000077f

0800cb0c <Tim3_ISP>:

/*******************************************************************************
* Tim3�жϴ������
*******************************************************************************/
void Tim3_ISP(void)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b082      	sub	sp, #8
 800cb10:	af00      	add	r7, sp, #0

	char checkpress;
    char KeyCode;

//  TIM3->SR = 0;          //moved to main //���жϱ�־
  if(KeymS_F)KeymS_Cnt++;                  //�������ʱ
 800cb12:	4b73      	ldr	r3, [pc, #460]	; (800cce0 <Tim3_ISP+0x1d4>)
 800cb14:	781b      	ldrb	r3, [r3, #0]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d008      	beq.n	800cb2c <Tim3_ISP+0x20>
 800cb1a:	4b72      	ldr	r3, [pc, #456]	; (800cce4 <Tim3_ISP+0x1d8>)
 800cb1c:	881b      	ldrh	r3, [r3, #0]
 800cb1e:	b21b      	sxth	r3, r3
 800cb20:	b29b      	uxth	r3, r3
 800cb22:	3301      	adds	r3, #1
 800cb24:	b29b      	uxth	r3, r3
 800cb26:	b21a      	sxth	r2, r3
 800cb28:	4b6e      	ldr	r3, [pc, #440]	; (800cce4 <Tim3_ISP+0x1d8>)
 800cb2a:	801a      	strh	r2, [r3, #0]
  Tim_Cnt++;
 800cb2c:	4b6e      	ldr	r3, [pc, #440]	; (800cce8 <Tim3_ISP+0x1dc>)
 800cb2e:	881b      	ldrh	r3, [r3, #0]
 800cb30:	b21b      	sxth	r3, r3
 800cb32:	b29b      	uxth	r3, r3
 800cb34:	3301      	adds	r3, #1
 800cb36:	b29b      	uxth	r3, r3
 800cb38:	b21a      	sxth	r2, r3
 800cb3a:	4b6b      	ldr	r3, [pc, #428]	; (800cce8 <Tim3_ISP+0x1dc>)
 800cb3c:	801a      	strh	r2, [r3, #0]
  if(Delay_Cnt>0) Delay_Cnt--;
 800cb3e:	4b6b      	ldr	r3, [pc, #428]	; (800ccec <Tim3_ISP+0x1e0>)
 800cb40:	881b      	ldrh	r3, [r3, #0]
 800cb42:	b21b      	sxth	r3, r3
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	dd08      	ble.n	800cb5a <Tim3_ISP+0x4e>
 800cb48:	4b68      	ldr	r3, [pc, #416]	; (800ccec <Tim3_ISP+0x1e0>)
 800cb4a:	881b      	ldrh	r3, [r3, #0]
 800cb4c:	b21b      	sxth	r3, r3
 800cb4e:	b29b      	uxth	r3, r3
 800cb50:	3b01      	subs	r3, #1
 800cb52:	b29b      	uxth	r3, r3
 800cb54:	b21a      	sxth	r2, r3
 800cb56:	4b65      	ldr	r3, [pc, #404]	; (800ccec <Tim3_ISP+0x1e0>)
 800cb58:	801a      	strh	r2, [r3, #0]
  if (mS_Cnt > 0)
 800cb5a:	4b65      	ldr	r3, [pc, #404]	; (800ccf0 <Tim3_ISP+0x1e4>)
 800cb5c:	881b      	ldrh	r3, [r3, #0]
 800cb5e:	b21b      	sxth	r3, r3
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	f340 8081 	ble.w	800cc68 <Tim3_ISP+0x15c>
  {
    mS_Cnt--;
 800cb66:	4b62      	ldr	r3, [pc, #392]	; (800ccf0 <Tim3_ISP+0x1e4>)
 800cb68:	881b      	ldrh	r3, [r3, #0]
 800cb6a:	b21b      	sxth	r3, r3
 800cb6c:	b29b      	uxth	r3, r3
 800cb6e:	3b01      	subs	r3, #1
 800cb70:	b29b      	uxth	r3, r3
 800cb72:	b21a      	sxth	r2, r3
 800cb74:	4b5e      	ldr	r3, [pc, #376]	; (800ccf0 <Tim3_ISP+0x1e4>)
 800cb76:	801a      	strh	r2, [r3, #0]
    if ((mS_Cnt%20)== 0)
 800cb78:	4b5d      	ldr	r3, [pc, #372]	; (800ccf0 <Tim3_ISP+0x1e4>)
 800cb7a:	881b      	ldrh	r3, [r3, #0]
 800cb7c:	b21a      	sxth	r2, r3
 800cb7e:	4b5d      	ldr	r3, [pc, #372]	; (800ccf4 <Tim3_ISP+0x1e8>)
 800cb80:	fb83 1302 	smull	r1, r3, r3, r2
 800cb84:	10d9      	asrs	r1, r3, #3
 800cb86:	17d3      	asrs	r3, r2, #31
 800cb88:	1ac9      	subs	r1, r1, r3
 800cb8a:	460b      	mov	r3, r1
 800cb8c:	009b      	lsls	r3, r3, #2
 800cb8e:	440b      	add	r3, r1
 800cb90:	009b      	lsls	r3, r3, #2
 800cb92:	1ad3      	subs	r3, r2, r3
 800cb94:	b21b      	sxth	r3, r3
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	f040 809d 	bne.w	800ccd6 <Tim3_ISP+0x1ca>
    {                 //  20mS  ÿ20mS��1�μ���
    	if(Key_Wait_Cnt)    Key_Wait_Cnt--;
 800cb9c:	4b56      	ldr	r3, [pc, #344]	; (800ccf8 <Tim3_ISP+0x1ec>)
 800cb9e:	781b      	ldrb	r3, [r3, #0]
 800cba0:	b2db      	uxtb	r3, r3
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d006      	beq.n	800cbb4 <Tim3_ISP+0xa8>
 800cba6:	4b54      	ldr	r3, [pc, #336]	; (800ccf8 <Tim3_ISP+0x1ec>)
 800cba8:	781b      	ldrb	r3, [r3, #0]
 800cbaa:	b2db      	uxtb	r3, r3
 800cbac:	3b01      	subs	r3, #1
 800cbae:	b2da      	uxtb	r2, r3
 800cbb0:	4b51      	ldr	r3, [pc, #324]	; (800ccf8 <Tim3_ISP+0x1ec>)
 800cbb2:	701a      	strb	r2, [r3, #0]
    	if(Key_Repeat_Cnt)  Key_Repeat_Cnt--;
 800cbb4:	4b51      	ldr	r3, [pc, #324]	; (800ccfc <Tim3_ISP+0x1f0>)
 800cbb6:	781b      	ldrb	r3, [r3, #0]
 800cbb8:	b2db      	uxtb	r3, r3
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d006      	beq.n	800cbcc <Tim3_ISP+0xc0>
 800cbbe:	4b4f      	ldr	r3, [pc, #316]	; (800ccfc <Tim3_ISP+0x1f0>)
 800cbc0:	781b      	ldrb	r3, [r3, #0]
 800cbc2:	b2db      	uxtb	r3, r3
 800cbc4:	3b01      	subs	r3, #1
 800cbc6:	b2da      	uxtb	r2, r3
 800cbc8:	4b4c      	ldr	r3, [pc, #304]	; (800ccfc <Tim3_ISP+0x1f0>)
 800cbca:	701a      	strb	r2, [r3, #0]
    	KeyCode = checkpress =0 ;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	71fb      	strb	r3, [r7, #7]
 800cbd0:	79fb      	ldrb	r3, [r7, #7]
 800cbd2:	71bb      	strb	r3, [r7, #6]
    	Touch = HAL_GPIO_ReadPin(TpI_GPIO_Port, TpI_Pin);  //read pen
 800cbd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cbd8:	4849      	ldr	r0, [pc, #292]	; (800cd00 <Tim3_ISP+0x1f4>)
 800cbda:	f00d f9d7 	bl	8019f8c <HAL_GPIO_ReadPin>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	461a      	mov	r2, r3
 800cbe2:	4b48      	ldr	r3, [pc, #288]	; (800cd04 <Tim3_ISP+0x1f8>)
 800cbe4:	701a      	strb	r2, [r3, #0]
    	if (Touch != LastTouch)
 800cbe6:	4b47      	ldr	r3, [pc, #284]	; (800cd04 <Tim3_ISP+0x1f8>)
 800cbe8:	781a      	ldrb	r2, [r3, #0]
 800cbea:	4b47      	ldr	r3, [pc, #284]	; (800cd08 <Tim3_ISP+0x1fc>)
 800cbec:	781b      	ldrb	r3, [r3, #0]
 800cbee:	429a      	cmp	r2, r3
 800cbf0:	d006      	beq.n	800cc00 <Tim3_ISP+0xf4>
    	{
    	// pen changed
    		checkpress =1; //check pressure if pen changed
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	71fb      	strb	r3, [r7, #7]
    		LastTouch = Touch;
 800cbf6:	4b43      	ldr	r3, [pc, #268]	; (800cd04 <Tim3_ISP+0x1f8>)
 800cbf8:	781a      	ldrb	r2, [r3, #0]
 800cbfa:	4b43      	ldr	r3, [pc, #268]	; (800cd08 <Tim3_ISP+0x1fc>)
 800cbfc:	701a      	strb	r2, [r3, #0]
 800cbfe:	e005      	b.n	800cc0c <Tim3_ISP+0x100>
    	}
    	else
    	{
    	  if(Touch != 0)
 800cc00:	4b40      	ldr	r3, [pc, #256]	; (800cd04 <Tim3_ISP+0x1f8>)
 800cc02:	781b      	ldrb	r3, [r3, #0]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d001      	beq.n	800cc0c <Tim3_ISP+0x100>
    	  {
    	    //check that press is valid
    		checkpress =1;
 800cc08:	2301      	movs	r3, #1
 800cc0a:	71fb      	strb	r3, [r7, #7]
    	  }
    	}

    	if(checkpress !=0)
 800cc0c:	79fb      	ldrb	r3, [r7, #7]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d003      	beq.n	800cc1a <Tim3_ISP+0x10e>
    	{
    		KeyCode = touchscan();
 800cc12:	f7ff fe83 	bl	800c91c <touchscan>
 800cc16:	4603      	mov	r3, r0
 800cc18:	71bb      	strb	r3, [r7, #6]
       	}
//      KeyCode = KeyScan();
      if(KeyCode !=0) Key_Buffer = KeyCode;
 800cc1a:	79bb      	ldrb	r3, [r7, #6]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d002      	beq.n	800cc26 <Tim3_ISP+0x11a>
 800cc20:	4a3a      	ldr	r2, [pc, #232]	; (800cd0c <Tim3_ISP+0x200>)
 800cc22:	79bb      	ldrb	r3, [r7, #6]
 800cc24:	7013      	strb	r3, [r2, #0]

      if(Cursor_Cnt >0)
 800cc26:	4b3a      	ldr	r3, [pc, #232]	; (800cd10 <Tim3_ISP+0x204>)
 800cc28:	881b      	ldrh	r3, [r3, #0]
 800cc2a:	b21b      	sxth	r3, r3
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	dd09      	ble.n	800cc44 <Tim3_ISP+0x138>
    	  Cursor_Cnt--;
 800cc30:	4b37      	ldr	r3, [pc, #220]	; (800cd10 <Tim3_ISP+0x204>)
 800cc32:	881b      	ldrh	r3, [r3, #0]
 800cc34:	b21b      	sxth	r3, r3
 800cc36:	b29b      	uxth	r3, r3
 800cc38:	3b01      	subs	r3, #1
 800cc3a:	b29b      	uxth	r3, r3
 800cc3c:	b21a      	sxth	r2, r3
 800cc3e:	4b34      	ldr	r3, [pc, #208]	; (800cd10 <Tim3_ISP+0x204>)
 800cc40:	801a      	strh	r2, [r3, #0]
        Windows_Pop = 0;
        Clr_WavePosi(DAR);
      }
    }
  }
}
 800cc42:	e048      	b.n	800ccd6 <Tim3_ISP+0x1ca>
        Cursor_Cnt = 12;                  // 12*20mS=240mS
 800cc44:	4b32      	ldr	r3, [pc, #200]	; (800cd10 <Tim3_ISP+0x204>)
 800cc46:	220c      	movs	r2, #12
 800cc48:	801a      	strh	r2, [r3, #0]
        Twink = !Twink;
 800cc4a:	4b32      	ldr	r3, [pc, #200]	; (800cd14 <Tim3_ISP+0x208>)
 800cc4c:	781b      	ldrb	r3, [r3, #0]
 800cc4e:	b2db      	uxtb	r3, r3
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	bf0c      	ite	eq
 800cc54:	2301      	moveq	r3, #1
 800cc56:	2300      	movne	r3, #0
 800cc58:	b2db      	uxtb	r3, r3
 800cc5a:	461a      	mov	r2, r3
 800cc5c:	4b2d      	ldr	r3, [pc, #180]	; (800cd14 <Tim3_ISP+0x208>)
 800cc5e:	701a      	strb	r2, [r3, #0]
        Blink =  BLINK;
 800cc60:	4b2d      	ldr	r3, [pc, #180]	; (800cd18 <Tim3_ISP+0x20c>)
 800cc62:	2201      	movs	r2, #1
 800cc64:	701a      	strb	r2, [r3, #0]
}
 800cc66:	e036      	b.n	800ccd6 <Tim3_ISP+0x1ca>
    mS_Cnt = 1000;
 800cc68:	4b21      	ldr	r3, [pc, #132]	; (800ccf0 <Tim3_ISP+0x1e4>)
 800cc6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cc6e:	801a      	strh	r2, [r3, #0]
    if((List[STANDBY].Val !=0) && (StdBy_Time > 0))
 800cc70:	4b2a      	ldr	r3, [pc, #168]	; (800cd1c <Tim3_ISP+0x210>)
 800cc72:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d00d      	beq.n	800cc96 <Tim3_ISP+0x18a>
 800cc7a:	4b29      	ldr	r3, [pc, #164]	; (800cd20 <Tim3_ISP+0x214>)
 800cc7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	dd08      	ble.n	800cc96 <Tim3_ISP+0x18a>
      StdBy_Time--;      //������ʱ
 800cc84:	4b26      	ldr	r3, [pc, #152]	; (800cd20 <Tim3_ISP+0x214>)
 800cc86:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cc8a:	b29b      	uxth	r3, r3
 800cc8c:	3b01      	subs	r3, #1
 800cc8e:	b29b      	uxth	r3, r3
 800cc90:	b21a      	sxth	r2, r3
 800cc92:	4b23      	ldr	r3, [pc, #140]	; (800cd20 <Tim3_ISP+0x214>)
 800cc94:	801a      	strh	r2, [r3, #0]
    if(PopupCnt > 0)
 800cc96:	4b23      	ldr	r3, [pc, #140]	; (800cd24 <Tim3_ISP+0x218>)
 800cc98:	881b      	ldrh	r3, [r3, #0]
 800cc9a:	b21b      	sxth	r3, r3
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	dd0d      	ble.n	800ccbc <Tim3_ISP+0x1b0>
      if(Cal_Flag == 0)
 800cca0:	4b21      	ldr	r3, [pc, #132]	; (800cd28 <Tim3_ISP+0x21c>)
 800cca2:	781b      	ldrb	r3, [r3, #0]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d116      	bne.n	800ccd6 <Tim3_ISP+0x1ca>
    	  PopupCnt--;
 800cca8:	4b1e      	ldr	r3, [pc, #120]	; (800cd24 <Tim3_ISP+0x218>)
 800ccaa:	881b      	ldrh	r3, [r3, #0]
 800ccac:	b21b      	sxth	r3, r3
 800ccae:	b29b      	uxth	r3, r3
 800ccb0:	3b01      	subs	r3, #1
 800ccb2:	b29b      	uxth	r3, r3
 800ccb4:	b21a      	sxth	r2, r3
 800ccb6:	4b1b      	ldr	r3, [pc, #108]	; (800cd24 <Tim3_ISP+0x218>)
 800ccb8:	801a      	strh	r2, [r3, #0]
}
 800ccba:	e00c      	b.n	800ccd6 <Tim3_ISP+0x1ca>
      Close_Pop();        // �رնԻ���
 800ccbc:	f001 ff04 	bl	800eac8 <Close_Pop>
      if(Windows_Pop)
 800ccc0:	4b1a      	ldr	r3, [pc, #104]	; (800cd2c <Tim3_ISP+0x220>)
 800ccc2:	781b      	ldrb	r3, [r3, #0]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d006      	beq.n	800ccd6 <Tim3_ISP+0x1ca>
        Windows_Pop = 0;
 800ccc8:	4b18      	ldr	r3, [pc, #96]	; (800cd2c <Tim3_ISP+0x220>)
 800ccca:	2200      	movs	r2, #0
 800cccc:	701a      	strb	r2, [r3, #0]
        Clr_WavePosi(DAR);
 800ccce:	f643 10e7 	movw	r0, #14823	; 0x39e7
 800ccd2:	f007 fe63 	bl	801499c <Clr_WavePosi>
}
 800ccd6:	bf00      	nop
 800ccd8:	3708      	adds	r7, #8
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}
 800ccde:	bf00      	nop
 800cce0:	2000078b 	.word	0x2000078b
 800cce4:	20000a3a 	.word	0x20000a3a
 800cce8:	20000a3c 	.word	0x20000a3c
 800ccec:	20000788 	.word	0x20000788
 800ccf0:	20000786 	.word	0x20000786
 800ccf4:	66666667 	.word	0x66666667
 800ccf8:	2000078d 	.word	0x2000078d
 800ccfc:	2000078c 	.word	0x2000078c
 800cd00:	40020400 	.word	0x40020400
 800cd04:	20000a38 	.word	0x20000a38
 800cd08:	2000078e 	.word	0x2000078e
 800cd0c:	2000077d 	.word	0x2000077d
 800cd10:	20000784 	.word	0x20000784
 800cd14:	2000077c 	.word	0x2000077c
 800cd18:	20000a39 	.word	0x20000a39
 800cd1c:	20000298 	.word	0x20000298
 800cd20:	200007a4 	.word	0x200007a4
 800cd24:	20000000 	.word	0x20000000
 800cd28:	200001b4 	.word	0x200001b4
 800cd2c:	200007ae 	.word	0x200007ae

0800cd30 <Fill_Base>:
unsigned short AA[205];  //one more than orginal size

// R0:pDat, R1:pTab, R2:Col, R3:Var, R4:pBuf, R5:Cnt, R6:Tmp,
//void Fill_Base(R3 = u32 Color)// �л��������ɫ RET: R4+202 Used: R3-R5
void Fill_Base(void)
{
 800cd30:	b480      	push	{r7}
 800cd32:	af00      	add	r7, sp, #0
	R4.A = (char*) &AA[204]; // 204��/2 ��408 Bytes
 800cd34:	4b12      	ldr	r3, [pc, #72]	; (800cd80 <Fill_Base+0x50>)
 800cd36:	4a13      	ldr	r2, [pc, #76]	; (800cd84 <Fill_Base+0x54>)
 800cd38:	601a      	str	r2, [r3, #0]
	R5 =102;
 800cd3a:	4b13      	ldr	r3, [pc, #76]	; (800cd88 <Fill_Base+0x58>)
 800cd3c:	2266      	movs	r2, #102	; 0x66
 800cd3e:	601a      	str	r2, [r3, #0]

Fill_Loop0:
	*(unsigned*)R4.A =R3;
 800cd40:	4b0f      	ldr	r3, [pc, #60]	; (800cd80 <Fill_Base+0x50>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	4a11      	ldr	r2, [pc, #68]	; (800cd8c <Fill_Base+0x5c>)
 800cd46:	6812      	ldr	r2, [r2, #0]
 800cd48:	601a      	str	r2, [r3, #0]
	R4.A= R4.A +4;
 800cd4a:	4b0d      	ldr	r3, [pc, #52]	; (800cd80 <Fill_Base+0x50>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	3304      	adds	r3, #4
 800cd50:	4a0b      	ldr	r2, [pc, #44]	; (800cd80 <Fill_Base+0x50>)
 800cd52:	6013      	str	r3, [r2, #0]
	R5 =R5 -1;
 800cd54:	4b0c      	ldr	r3, [pc, #48]	; (800cd88 <Fill_Base+0x58>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	3b01      	subs	r3, #1
 800cd5a:	4a0b      	ldr	r2, [pc, #44]	; (800cd88 <Fill_Base+0x58>)
 800cd5c:	6013      	str	r3, [r2, #0]
	if (R5!=0)
 800cd5e:	4b0a      	ldr	r3, [pc, #40]	; (800cd88 <Fill_Base+0x58>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d000      	beq.n	800cd68 <Fill_Base+0x38>
	{
		goto Fill_Loop0;
 800cd66:	e7eb      	b.n	800cd40 <Fill_Base+0x10>
	}
	R4.A = (char*) &AA[203];
 800cd68:	4b05      	ldr	r3, [pc, #20]	; (800cd80 <Fill_Base+0x50>)
 800cd6a:	4a09      	ldr	r2, [pc, #36]	; (800cd90 <Fill_Base+0x60>)
 800cd6c:	601a      	str	r2, [r3, #0]
	R3= GRID;
 800cd6e:	4b07      	ldr	r3, [pc, #28]	; (800cd8c <Fill_Base+0x5c>)
 800cd70:	f647 32ef 	movw	r2, #31727	; 0x7bef
 800cd74:	601a      	str	r2, [r3, #0]
}
 800cd76:	bf00      	nop
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7e:	4770      	bx	lr
 800cd80:	20000bf4 	.word	0x20000bf4
 800cd84:	20000be8 	.word	0x20000be8
 800cd88:	20000a44 	.word	0x20000a44
 800cd8c:	20000a48 	.word	0x20000a48
 800cd90:	20000be6 	.word	0x20000be6

0800cd94 <Buld_0>:

/*// void Buld_0(R4 = u16* pCol)   // ���������л������ı������� Used: R3-R5*/
void Buld_0(void)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	af00      	add	r7, sp, #0
	R3 = BACKGROUND;
 800cd98:	4b03      	ldr	r3, [pc, #12]	; (800cda8 <Buld_0+0x14>)
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	601a      	str	r2, [r3, #0]
	Fill_Base();
 800cd9e:	f7ff ffc7 	bl	800cd30 <Fill_Base>
}
 800cda2:	bf00      	nop
 800cda4:	bd80      	pop	{r7, pc}
 800cda6:	bf00      	nop
 800cda8:	20000a48 	.word	0x20000a48

0800cdac <Buld_1>:

// void Buld_1(R4 = u16* pCol)   // ���������л������ı������� Used: R3-R6
void Buld_1(void)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	af00      	add	r7, sp, #0
	R3 = GRID_COLOR;
 800cdb0:	4b0e      	ldr	r3, [pc, #56]	; (800cdec <Buld_1+0x40>)
 800cdb2:	4a0f      	ldr	r2, [pc, #60]	; (800cdf0 <Buld_1+0x44>)
 800cdb4:	601a      	str	r2, [r3, #0]
	Fill_Base();
 800cdb6:	f7ff ffbb 	bl	800cd30 <Fill_Base>
	R3 =0;
 800cdba:	4b0c      	ldr	r3, [pc, #48]	; (800cdec <Buld_1+0x40>)
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	601a      	str	r2, [r3, #0]
	R5=402;
 800cdc0:	4b0c      	ldr	r3, [pc, #48]	; (800cdf4 <Buld_1+0x48>)
 800cdc2:	f44f 72c9 	mov.w	r2, #402	; 0x192
 800cdc6:	601a      	str	r2, [r3, #0]
	*(unsigned short*)(R4.A +R5)=R3;
 800cdc8:	4b08      	ldr	r3, [pc, #32]	; (800cdec <Buld_1+0x40>)
 800cdca:	6819      	ldr	r1, [r3, #0]
 800cdcc:	4b0a      	ldr	r3, [pc, #40]	; (800cdf8 <Buld_1+0x4c>)
 800cdce:	681a      	ldr	r2, [r3, #0]
 800cdd0:	4b08      	ldr	r3, [pc, #32]	; (800cdf4 <Buld_1+0x48>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	4413      	add	r3, r2
 800cdd6:	b28a      	uxth	r2, r1
 800cdd8:	801a      	strh	r2, [r3, #0]
	*(unsigned short*)(R4.A -2)=R3;
 800cdda:	4b04      	ldr	r3, [pc, #16]	; (800cdec <Buld_1+0x40>)
 800cddc:	681a      	ldr	r2, [r3, #0]
 800cdde:	4b06      	ldr	r3, [pc, #24]	; (800cdf8 <Buld_1+0x4c>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	3b02      	subs	r3, #2
 800cde4:	b292      	uxth	r2, r2
 800cde6:	801a      	strh	r2, [r3, #0]
}
 800cde8:	bf00      	nop
 800cdea:	bd80      	pop	{r7, pc}
 800cdec:	20000a48 	.word	0x20000a48
 800cdf0:	7bef7bef 	.word	0x7bef7bef
 800cdf4:	20000a44 	.word	0x20000a44
 800cdf8:	20000bf4 	.word	0x20000bf4

0800cdfc <Buld_2>:

// void Buld_2(R4 = u16* pCol)   // ���������л������ı������� Used: R3-R6
void Buld_2(void)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	af00      	add	r7, sp, #0
	R3 = BACKGROUND;
 800ce00:	4b0c      	ldr	r3, [pc, #48]	; (800ce34 <Buld_2+0x38>)
 800ce02:	2200      	movs	r2, #0
 800ce04:	601a      	str	r2, [r3, #0]
	Fill_Base();
 800ce06:	f7ff ff93 	bl	800cd30 <Fill_Base>
	R5 =400;
 800ce0a:	4b0b      	ldr	r3, [pc, #44]	; (800ce38 <Buld_2+0x3c>)
 800ce0c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800ce10:	601a      	str	r2, [r3, #0]
	*(unsigned short*)(R4.A +R5)=R3;
 800ce12:	4b08      	ldr	r3, [pc, #32]	; (800ce34 <Buld_2+0x38>)
 800ce14:	6819      	ldr	r1, [r3, #0]
 800ce16:	4b09      	ldr	r3, [pc, #36]	; (800ce3c <Buld_2+0x40>)
 800ce18:	681a      	ldr	r2, [r3, #0]
 800ce1a:	4b07      	ldr	r3, [pc, #28]	; (800ce38 <Buld_2+0x3c>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	4413      	add	r3, r2
 800ce20:	b28a      	uxth	r2, r1
 800ce22:	801a      	strh	r2, [r3, #0]
	*(unsigned short*)(R4.A)=R3;
 800ce24:	4b03      	ldr	r3, [pc, #12]	; (800ce34 <Buld_2+0x38>)
 800ce26:	681a      	ldr	r2, [r3, #0]
 800ce28:	4b04      	ldr	r3, [pc, #16]	; (800ce3c <Buld_2+0x40>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	b292      	uxth	r2, r2
 800ce2e:	801a      	strh	r2, [r3, #0]
}
 800ce30:	bf00      	nop
 800ce32:	bd80      	pop	{r7, pc}
 800ce34:	20000a48 	.word	0x20000a48
 800ce38:	20000a44 	.word	0x20000a44
 800ce3c:	20000bf4 	.word	0x20000bf4

0800ce40 <Buld_3>:

// void Buld_3(R4 = u16* pCol)   // ��������л������ı������� Used: R3-R6
void Buld_3(void)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	af00      	add	r7, sp, #0
	R3 = BACKGROUND;
 800ce44:	4b0e      	ldr	r3, [pc, #56]	; (800ce80 <Buld_3+0x40>)
 800ce46:	2200      	movs	r2, #0
 800ce48:	601a      	str	r2, [r3, #0]
	Fill_Base();
 800ce4a:	f7ff ff71 	bl	800cd30 <Fill_Base>
	R5=450;
 800ce4e:	4b0d      	ldr	r3, [pc, #52]	; (800ce84 <Buld_3+0x44>)
 800ce50:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 800ce54:	601a      	str	r2, [r3, #0]

Loop3:
	R5 = R5 -50;
 800ce56:	4b0b      	ldr	r3, [pc, #44]	; (800ce84 <Buld_3+0x44>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	3b32      	subs	r3, #50	; 0x32
 800ce5c:	4a09      	ldr	r2, [pc, #36]	; (800ce84 <Buld_3+0x44>)
 800ce5e:	6013      	str	r3, [r2, #0]
	*(unsigned short*)(R4.A +R5)=R3;
 800ce60:	4b07      	ldr	r3, [pc, #28]	; (800ce80 <Buld_3+0x40>)
 800ce62:	6819      	ldr	r1, [r3, #0]
 800ce64:	4b08      	ldr	r3, [pc, #32]	; (800ce88 <Buld_3+0x48>)
 800ce66:	681a      	ldr	r2, [r3, #0]
 800ce68:	4b06      	ldr	r3, [pc, #24]	; (800ce84 <Buld_3+0x44>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	4413      	add	r3, r2
 800ce6e:	b28a      	uxth	r2, r1
 800ce70:	801a      	strh	r2, [r3, #0]
	if ( R5!=0)
 800ce72:	4b04      	ldr	r3, [pc, #16]	; (800ce84 <Buld_3+0x44>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d000      	beq.n	800ce7c <Buld_3+0x3c>
	{
		goto Loop3;
 800ce7a:	e7ec      	b.n	800ce56 <Buld_3+0x16>
	}
	return;
 800ce7c:	bf00      	nop
}
 800ce7e:	bd80      	pop	{r7, pc}
 800ce80:	20000a48 	.word	0x20000a48
 800ce84:	20000a44 	.word	0x20000a44
 800ce88:	20000bf4 	.word	0x20000bf4

0800ce8c <Buld_4>:

// void Buld_4(R4 = u16* pCol)   // ���������л������ı�������
void Buld_4(void)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	af00      	add	r7, sp, #0
	R3 = BACKGROUND;
 800ce90:	4b0e      	ldr	r3, [pc, #56]	; (800cecc <Buld_4+0x40>)
 800ce92:	2200      	movs	r2, #0
 800ce94:	601a      	str	r2, [r3, #0]
	Fill_Base();
 800ce96:	f7ff ff4b 	bl	800cd30 <Fill_Base>
	R5=410;
 800ce9a:	4b0d      	ldr	r3, [pc, #52]	; (800ced0 <Buld_4+0x44>)
 800ce9c:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 800cea0:	601a      	str	r2, [r3, #0]

Loop7:
	R5 = R5 -10;
 800cea2:	4b0b      	ldr	r3, [pc, #44]	; (800ced0 <Buld_4+0x44>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	3b0a      	subs	r3, #10
 800cea8:	4a09      	ldr	r2, [pc, #36]	; (800ced0 <Buld_4+0x44>)
 800ceaa:	6013      	str	r3, [r2, #0]
	*(unsigned short*)(R4.A +R5)=R3;
 800ceac:	4b07      	ldr	r3, [pc, #28]	; (800cecc <Buld_4+0x40>)
 800ceae:	6819      	ldr	r1, [r3, #0]
 800ceb0:	4b08      	ldr	r3, [pc, #32]	; (800ced4 <Buld_4+0x48>)
 800ceb2:	681a      	ldr	r2, [r3, #0]
 800ceb4:	4b06      	ldr	r3, [pc, #24]	; (800ced0 <Buld_4+0x44>)
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	4413      	add	r3, r2
 800ceba:	b28a      	uxth	r2, r1
 800cebc:	801a      	strh	r2, [r3, #0]
	if ( R5!=0)
 800cebe:	4b04      	ldr	r3, [pc, #16]	; (800ced0 <Buld_4+0x44>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d000      	beq.n	800cec8 <Buld_4+0x3c>
	{
		goto Loop7;
 800cec6:	e7ec      	b.n	800cea2 <Buld_4+0x16>
	}
	return;
 800cec8:	bf00      	nop
}
 800ceca:	bd80      	pop	{r7, pc}
 800cecc:	20000a48 	.word	0x20000a48
 800ced0:	20000a44 	.word	0x20000a44
 800ced4:	20000bf4 	.word	0x20000bf4

0800ced8 <Draw_Digit_Analog>:

// Draw_Digit(R0:pDat, R2:Col, R3:Color, R4:Posi, R8:Mask)// �����ֲ��� Used: R5-R7
// Draw_Analog(R2:Col, R3:Color, R4:pDat)// ��ģ�Ⲩ������  Used: R3-R7
void Draw_Digit_Analog(unsigned short DorA)
{
 800ced8:	b480      	push	{r7}
 800ceda:	b083      	sub	sp, #12
 800cedc:	af00      	add	r7, sp, #0
 800cede:	4603      	mov	r3, r0
 800cee0:	80fb      	strh	r3, [r7, #6]
	if(DorA == 1)  //draw digit
 800cee2:	88fb      	ldrh	r3, [r7, #6]
 800cee4:	2b01      	cmp	r3, #1
 800cee6:	d144      	bne.n	800cf72 <Draw_Digit_Analog+0x9a>
	{
	R7 =R0 +900;
 800cee8:	4b7d      	ldr	r3, [pc, #500]	; (800d0e0 <Draw_Digit_Analog+0x208>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f503 7361 	add.w	r3, r3, #900	; 0x384
 800cef0:	4a7c      	ldr	r2, [pc, #496]	; (800d0e4 <Draw_Digit_Analog+0x20c>)
 800cef2:	6013      	str	r3, [r2, #0]
	R7 = R7 + R2;
 800cef4:	4b7b      	ldr	r3, [pc, #492]	; (800d0e4 <Draw_Digit_Analog+0x20c>)
 800cef6:	681a      	ldr	r2, [r3, #0]
 800cef8:	4b7b      	ldr	r3, [pc, #492]	; (800d0e8 <Draw_Digit_Analog+0x210>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	4413      	add	r3, r2
 800cefe:	4a79      	ldr	r2, [pc, #484]	; (800d0e4 <Draw_Digit_Analog+0x20c>)
 800cf00:	6013      	str	r3, [r2, #0]
	R5 = *(char*) R7;
 800cf02:	4b78      	ldr	r3, [pc, #480]	; (800d0e4 <Draw_Digit_Analog+0x20c>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	781b      	ldrb	r3, [r3, #0]
 800cf08:	461a      	mov	r2, r3
 800cf0a:	4b78      	ldr	r3, [pc, #480]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800cf0c:	601a      	str	r2, [r3, #0]
	R6 = *(char*) (R7 -1);
 800cf0e:	4b75      	ldr	r3, [pc, #468]	; (800d0e4 <Draw_Digit_Analog+0x20c>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	3b01      	subs	r3, #1
 800cf14:	781b      	ldrb	r3, [r3, #0]
 800cf16:	461a      	mov	r2, r3
 800cf18:	4b75      	ldr	r3, [pc, #468]	; (800d0f0 <Draw_Digit_Analog+0x218>)
 800cf1a:	601a      	str	r2, [r3, #0]
	R4.I = R4.I >> 1;
 800cf1c:	4b75      	ldr	r3, [pc, #468]	; (800d0f4 <Draw_Digit_Analog+0x21c>)
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	085b      	lsrs	r3, r3, #1
 800cf22:	4a74      	ldr	r2, [pc, #464]	; (800d0f4 <Draw_Digit_Analog+0x21c>)
 800cf24:	6013      	str	r3, [r2, #0]
	R5 = R5 & R8;
 800cf26:	4b71      	ldr	r3, [pc, #452]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800cf28:	681a      	ldr	r2, [r3, #0]
 800cf2a:	4b73      	ldr	r3, [pc, #460]	; (800d0f8 <Draw_Digit_Analog+0x220>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	4013      	ands	r3, r2
 800cf30:	4a6e      	ldr	r2, [pc, #440]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800cf32:	6013      	str	r3, [r2, #0]
	if (R5 == 0 )
 800cf34:	4b6d      	ldr	r3, [pc, #436]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d104      	bne.n	800cf46 <Draw_Digit_Analog+0x6e>
		R5 = R4.I;
 800cf3c:	4b6d      	ldr	r3, [pc, #436]	; (800d0f4 <Draw_Digit_Analog+0x21c>)
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	4a6a      	ldr	r2, [pc, #424]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800cf42:	6013      	str	r3, [r2, #0]
 800cf44:	e004      	b.n	800cf50 <Draw_Digit_Analog+0x78>
	else
		R5 = R4.I + 30;
 800cf46:	4b6b      	ldr	r3, [pc, #428]	; (800d0f4 <Draw_Digit_Analog+0x21c>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	331e      	adds	r3, #30
 800cf4c:	4a67      	ldr	r2, [pc, #412]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800cf4e:	6013      	str	r3, [r2, #0]
	R6 = R6 & R8;
 800cf50:	4b67      	ldr	r3, [pc, #412]	; (800d0f0 <Draw_Digit_Analog+0x218>)
 800cf52:	681a      	ldr	r2, [r3, #0]
 800cf54:	4b68      	ldr	r3, [pc, #416]	; (800d0f8 <Draw_Digit_Analog+0x220>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	4013      	ands	r3, r2
 800cf5a:	4a65      	ldr	r2, [pc, #404]	; (800d0f0 <Draw_Digit_Analog+0x218>)
 800cf5c:	6013      	str	r3, [r2, #0]
	if( R6 != 0)
 800cf5e:	4b64      	ldr	r3, [pc, #400]	; (800d0f0 <Draw_Digit_Analog+0x218>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d01c      	beq.n	800cfa0 <Draw_Digit_Analog+0xc8>
		R4.I = R4.I + 30;
 800cf66:	4b63      	ldr	r3, [pc, #396]	; (800d0f4 <Draw_Digit_Analog+0x21c>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	331e      	adds	r3, #30
 800cf6c:	4a61      	ldr	r2, [pc, #388]	; (800d0f4 <Draw_Digit_Analog+0x21c>)
 800cf6e:	6013      	str	r3, [r2, #0]
	goto Analog0;
 800cf70:	e016      	b.n	800cfa0 <Draw_Digit_Analog+0xc8>
	}

	if(DorA == 0)  //draw analog
 800cf72:	88fb      	ldrh	r3, [r7, #6]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	f040 80a5 	bne.w	800d0c4 <Draw_Digit_Analog+0x1ec>
	{
		R4.A = R4.A +2;
 800cf7a:	4b5e      	ldr	r3, [pc, #376]	; (800d0f4 <Draw_Digit_Analog+0x21c>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	3302      	adds	r3, #2
 800cf80:	4a5c      	ldr	r2, [pc, #368]	; (800d0f4 <Draw_Digit_Analog+0x21c>)
 800cf82:	6013      	str	r3, [r2, #0]
		R5 = *(char*)R4.A; //n1
 800cf84:	4b5b      	ldr	r3, [pc, #364]	; (800d0f4 <Draw_Digit_Analog+0x21c>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	781b      	ldrb	r3, [r3, #0]
 800cf8a:	461a      	mov	r2, r3
 800cf8c:	4b57      	ldr	r3, [pc, #348]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800cf8e:	601a      	str	r2, [r3, #0]
		R4.I = *(char*)(R4.A-1); //n0
 800cf90:	4b58      	ldr	r3, [pc, #352]	; (800d0f4 <Draw_Digit_Analog+0x21c>)
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	3b01      	subs	r3, #1
 800cf96:	781b      	ldrb	r3, [r3, #0]
 800cf98:	461a      	mov	r2, r3
 800cf9a:	4b56      	ldr	r3, [pc, #344]	; (800d0f4 <Draw_Digit_Analog+0x21c>)
 800cf9c:	601a      	str	r2, [r3, #0]
		goto Analog0;
 800cf9e:	e000      	b.n	800cfa2 <Draw_Digit_Analog+0xca>
	goto Analog0;
 800cfa0:	bf00      	nop

	R5 = R5 +50;
	R4.I =R4.I +50;

	Analog0:
	if (R5 == 255)
 800cfa2:	4b52      	ldr	r3, [pc, #328]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	2bff      	cmp	r3, #255	; 0xff
 800cfa8:	f000 808e 	beq.w	800d0c8 <Draw_Digit_Analog+0x1f0>
		return;
	if (R5 == 0)
 800cfac:	4b4f      	ldr	r3, [pc, #316]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	f000 808b 	beq.w	800d0cc <Draw_Digit_Analog+0x1f4>
		return;

	if(R5 >= R4.I)  // R5 = | n1 - n0 |
 800cfb6:	4b4f      	ldr	r3, [pc, #316]	; (800d0f4 <Draw_Digit_Analog+0x21c>)
 800cfb8:	681a      	ldr	r2, [r3, #0]
 800cfba:	4b4c      	ldr	r3, [pc, #304]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	429a      	cmp	r2, r3
 800cfc0:	d80b      	bhi.n	800cfda <Draw_Digit_Analog+0x102>
	{
		R6 =R4.I;
 800cfc2:	4b4c      	ldr	r3, [pc, #304]	; (800d0f4 <Draw_Digit_Analog+0x21c>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	4a4a      	ldr	r2, [pc, #296]	; (800d0f0 <Draw_Digit_Analog+0x218>)
 800cfc8:	6013      	str	r3, [r2, #0]
		R5 = R5 -R4.I;
 800cfca:	4b48      	ldr	r3, [pc, #288]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800cfcc:	681a      	ldr	r2, [r3, #0]
 800cfce:	4b49      	ldr	r3, [pc, #292]	; (800d0f4 <Draw_Digit_Analog+0x21c>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	1ad3      	subs	r3, r2, r3
 800cfd4:	4a45      	ldr	r2, [pc, #276]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800cfd6:	6013      	str	r3, [r2, #0]
 800cfd8:	e00a      	b.n	800cff0 <Draw_Digit_Analog+0x118>
	}
	else
	{
		R6 = R5;  // n1, n0 ����С���� R6
 800cfda:	4b44      	ldr	r3, [pc, #272]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	4a44      	ldr	r2, [pc, #272]	; (800d0f0 <Draw_Digit_Analog+0x218>)
 800cfe0:	6013      	str	r3, [r2, #0]
		R5 = R4.I -R5;
 800cfe2:	4b44      	ldr	r3, [pc, #272]	; (800d0f4 <Draw_Digit_Analog+0x21c>)
 800cfe4:	681a      	ldr	r2, [r3, #0]
 800cfe6:	4b41      	ldr	r3, [pc, #260]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	1ad3      	subs	r3, r2, r3
 800cfec:	4a3f      	ldr	r2, [pc, #252]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800cfee:	6013      	str	r3, [r2, #0]
	}

	if(R6 > 199)
 800cff0:	4b3f      	ldr	r3, [pc, #252]	; (800d0f0 <Draw_Digit_Analog+0x218>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	2bc7      	cmp	r3, #199	; 0xc7
 800cff6:	d86b      	bhi.n	800d0d0 <Draw_Digit_Analog+0x1f8>
		return;

	R4.I = R5 +R6;
 800cff8:	4b3c      	ldr	r3, [pc, #240]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800cffa:	681a      	ldr	r2, [r3, #0]
 800cffc:	4b3c      	ldr	r3, [pc, #240]	; (800d0f0 <Draw_Digit_Analog+0x218>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	4413      	add	r3, r2
 800d002:	4a3c      	ldr	r2, [pc, #240]	; (800d0f4 <Draw_Digit_Analog+0x21c>)
 800d004:	6013      	str	r3, [r2, #0]
	if(R4.I >199)
 800d006:	4b3b      	ldr	r3, [pc, #236]	; (800d0f4 <Draw_Digit_Analog+0x21c>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	2bc7      	cmp	r3, #199	; 0xc7
 800d00c:	d906      	bls.n	800d01c <Draw_Digit_Analog+0x144>
	{
		R5 = 199 - R6;
 800d00e:	4b38      	ldr	r3, [pc, #224]	; (800d0f0 <Draw_Digit_Analog+0x218>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	f1c3 03c7 	rsb	r3, r3, #199	; 0xc7
 800d016:	4a35      	ldr	r2, [pc, #212]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800d018:	6013      	str	r3, [r2, #0]
		goto Analog2;
 800d01a:	e020      	b.n	800d05e <Draw_Digit_Analog+0x186>
	}

	if( R4.I < 3 )
 800d01c:	4b35      	ldr	r3, [pc, #212]	; (800d0f4 <Draw_Digit_Analog+0x21c>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	2b02      	cmp	r3, #2
 800d022:	d957      	bls.n	800d0d4 <Draw_Digit_Analog+0x1fc>
		return;

	if( R6 <3)
 800d024:	4b32      	ldr	r3, [pc, #200]	; (800d0f0 <Draw_Digit_Analog+0x218>)
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	2b02      	cmp	r3, #2
 800d02a:	d808      	bhi.n	800d03e <Draw_Digit_Analog+0x166>
	{
		R6 = 3;
 800d02c:	4b30      	ldr	r3, [pc, #192]	; (800d0f0 <Draw_Digit_Analog+0x218>)
 800d02e:	2203      	movs	r2, #3
 800d030:	601a      	str	r2, [r3, #0]
		R5 =R4.I -3;
 800d032:	4b30      	ldr	r3, [pc, #192]	; (800d0f4 <Draw_Digit_Analog+0x21c>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	3b03      	subs	r3, #3
 800d038:	4a2c      	ldr	r2, [pc, #176]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800d03a:	6013      	str	r3, [r2, #0]
		goto Analog2;
 800d03c:	e00f      	b.n	800d05e <Draw_Digit_Analog+0x186>
	}

	if(R5 ==0 )
 800d03e:	4b2b      	ldr	r3, [pc, #172]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d10a      	bne.n	800d05c <Draw_Digit_Analog+0x184>
	{
		R6 = R6 -1;
 800d046:	4b2a      	ldr	r3, [pc, #168]	; (800d0f0 <Draw_Digit_Analog+0x218>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	3b01      	subs	r3, #1
 800d04c:	4a28      	ldr	r2, [pc, #160]	; (800d0f0 <Draw_Digit_Analog+0x218>)
 800d04e:	6013      	str	r3, [r2, #0]
		R5 = R5 +2;
 800d050:	4b26      	ldr	r3, [pc, #152]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	3302      	adds	r3, #2
 800d056:	4a25      	ldr	r2, [pc, #148]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800d058:	6013      	str	r3, [r2, #0]
 800d05a:	e000      	b.n	800d05e <Draw_Digit_Analog+0x186>
	}

Analog2:
 800d05c:	bf00      	nop
	if( R5>= 20)
 800d05e:	4b23      	ldr	r3, [pc, #140]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	2b13      	cmp	r3, #19
 800d064:	d904      	bls.n	800d070 <Draw_Digit_Analog+0x198>
		R3= R3 +20;
 800d066:	4b25      	ldr	r3, [pc, #148]	; (800d0fc <Draw_Digit_Analog+0x224>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	3314      	adds	r3, #20
 800d06c:	4a23      	ldr	r2, [pc, #140]	; (800d0fc <Draw_Digit_Analog+0x224>)
 800d06e:	6013      	str	r3, [r2, #0]

	R3 =  *(unsigned short*) (R1 +R3);
 800d070:	4b23      	ldr	r3, [pc, #140]	; (800d100 <Draw_Digit_Analog+0x228>)
 800d072:	681a      	ldr	r2, [r3, #0]
 800d074:	4b21      	ldr	r3, [pc, #132]	; (800d0fc <Draw_Digit_Analog+0x224>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	4413      	add	r3, r2
 800d07a:	881b      	ldrh	r3, [r3, #0]
 800d07c:	461a      	mov	r2, r3
 800d07e:	4b1f      	ldr	r3, [pc, #124]	; (800d0fc <Draw_Digit_Analog+0x224>)
 800d080:	601a      	str	r2, [r3, #0]
	R6 = R6 << 1;
 800d082:	4b1b      	ldr	r3, [pc, #108]	; (800d0f0 <Draw_Digit_Analog+0x218>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	005b      	lsls	r3, r3, #1
 800d088:	4a19      	ldr	r2, [pc, #100]	; (800d0f0 <Draw_Digit_Analog+0x218>)
 800d08a:	6013      	str	r3, [r2, #0]
//    ADD     R6,  SP, R6            ;// ȷ����ʾλ��
    R6 = (unsigned) &AA[204- R6/2];
 800d08c:	4b18      	ldr	r3, [pc, #96]	; (800d0f0 <Draw_Digit_Analog+0x218>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	085b      	lsrs	r3, r3, #1
 800d092:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d096:	005b      	lsls	r3, r3, #1
 800d098:	4a1a      	ldr	r2, [pc, #104]	; (800d104 <Draw_Digit_Analog+0x22c>)
 800d09a:	4413      	add	r3, r2
 800d09c:	461a      	mov	r2, r3
 800d09e:	4b14      	ldr	r3, [pc, #80]	; (800d0f0 <Draw_Digit_Analog+0x218>)
 800d0a0:	601a      	str	r2, [r3, #0]

Analog3:
	*(unsigned short*)R6 = R3;
 800d0a2:	4b16      	ldr	r3, [pc, #88]	; (800d0fc <Draw_Digit_Analog+0x224>)
 800d0a4:	681a      	ldr	r2, [r3, #0]
 800d0a6:	4b12      	ldr	r3, [pc, #72]	; (800d0f0 <Draw_Digit_Analog+0x218>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	b292      	uxth	r2, r2
 800d0ac:	801a      	strh	r2, [r3, #0]
	R6 =R6 +2;
 800d0ae:	4b10      	ldr	r3, [pc, #64]	; (800d0f0 <Draw_Digit_Analog+0x218>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	3302      	adds	r3, #2
 800d0b4:	4a0e      	ldr	r2, [pc, #56]	; (800d0f0 <Draw_Digit_Analog+0x218>)
 800d0b6:	6013      	str	r3, [r2, #0]
	R5 =R5 -1;
 800d0b8:	4b0c      	ldr	r3, [pc, #48]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	3b01      	subs	r3, #1
 800d0be:	4a0b      	ldr	r2, [pc, #44]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800d0c0:	6013      	str	r3, [r2, #0]
	if(R5>=0)
		goto Analog3;
 800d0c2:	e7ee      	b.n	800d0a2 <Draw_Digit_Analog+0x1ca>
	return;
 800d0c4:	bf00      	nop
 800d0c6:	e006      	b.n	800d0d6 <Draw_Digit_Analog+0x1fe>
		return;
 800d0c8:	bf00      	nop
 800d0ca:	e004      	b.n	800d0d6 <Draw_Digit_Analog+0x1fe>
		return;
 800d0cc:	bf00      	nop
 800d0ce:	e002      	b.n	800d0d6 <Draw_Digit_Analog+0x1fe>
		return;
 800d0d0:	bf00      	nop
 800d0d2:	e000      	b.n	800d0d6 <Draw_Digit_Analog+0x1fe>
		return;
 800d0d4:	bf00      	nop

return;
}
 800d0d6:	370c      	adds	r7, #12
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0de:	4770      	bx	lr
 800d0e0:	20000a4c 	.word	0x20000a4c
 800d0e4:	20000c08 	.word	0x20000c08
 800d0e8:	20000c00 	.word	0x20000c00
 800d0ec:	20000a44 	.word	0x20000a44
 800d0f0:	20000bf0 	.word	0x20000bf0
 800d0f4:	20000bf4 	.word	0x20000bf4
 800d0f8:	20000a40 	.word	0x20000a40
 800d0fc:	20000a48 	.word	0x20000a48
 800d100:	20000bf8 	.word	0x20000bf8
 800d104:	20000a50 	.word	0x20000a50

0800d108 <Cursor_0>:

// Cursor_0(R1:pTab, R2:Col)// ���������α�˵�  Used: R3-R6
void Cursor_0(short *pTab)
{
 800d108:	b480      	push	{r7}
 800d10a:	b083      	sub	sp, #12
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
	R3 =6;
 800d110:	4b3c      	ldr	r3, [pc, #240]	; (800d204 <Cursor_0+0xfc>)
 800d112:	2206      	movs	r2, #6
 800d114:	601a      	str	r2, [r3, #0]
	R4.A = (char*) &AA[204];
 800d116:	4b3c      	ldr	r3, [pc, #240]	; (800d208 <Cursor_0+0x100>)
 800d118:	4a3c      	ldr	r2, [pc, #240]	; (800d20c <Cursor_0+0x104>)
 800d11a:	601a      	str	r2, [r3, #0]

Cursor01:
	R5 = pTab[R3];
 800d11c:	4b39      	ldr	r3, [pc, #228]	; (800d204 <Cursor_0+0xfc>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	005b      	lsls	r3, r3, #1
 800d122:	687a      	ldr	r2, [r7, #4]
 800d124:	4413      	add	r3, r2
 800d126:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d12a:	461a      	mov	r2, r3
 800d12c:	4b38      	ldr	r3, [pc, #224]	; (800d210 <Cursor_0+0x108>)
 800d12e:	601a      	str	r2, [r3, #0]
	if( (R5&1) != 0)
 800d130:	4b37      	ldr	r3, [pc, #220]	; (800d210 <Cursor_0+0x108>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	f003 0301 	and.w	r3, r3, #1
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d15c      	bne.n	800d1f6 <Cursor_0+0xee>
	{
		goto Cursor02;
	}
	R5 = pTab[R3 +10];
 800d13c:	4b31      	ldr	r3, [pc, #196]	; (800d204 <Cursor_0+0xfc>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	330a      	adds	r3, #10
 800d142:	005b      	lsls	r3, r3, #1
 800d144:	687a      	ldr	r2, [r7, #4]
 800d146:	4413      	add	r3, r2
 800d148:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d14c:	461a      	mov	r2, r3
 800d14e:	4b30      	ldr	r3, [pc, #192]	; (800d210 <Cursor_0+0x108>)
 800d150:	601a      	str	r2, [r3, #0]
	R4.A = (char*)&AA[204 - R5/2];
 800d152:	4b2f      	ldr	r3, [pc, #188]	; (800d210 <Cursor_0+0x108>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	085b      	lsrs	r3, r3, #1
 800d158:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d15c:	005b      	lsls	r3, r3, #1
 800d15e:	4a2d      	ldr	r2, [pc, #180]	; (800d214 <Cursor_0+0x10c>)
 800d160:	4413      	add	r3, r2
 800d162:	4a29      	ldr	r2, [pc, #164]	; (800d208 <Cursor_0+0x100>)
 800d164:	6013      	str	r3, [r2, #0]
	R6 = pTab[R3 +20];
 800d166:	4b27      	ldr	r3, [pc, #156]	; (800d204 <Cursor_0+0xfc>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	3314      	adds	r3, #20
 800d16c:	005b      	lsls	r3, r3, #1
 800d16e:	687a      	ldr	r2, [r7, #4]
 800d170:	4413      	add	r3, r2
 800d172:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d176:	461a      	mov	r2, r3
 800d178:	4b27      	ldr	r3, [pc, #156]	; (800d218 <Cursor_0+0x110>)
 800d17a:	601a      	str	r2, [r3, #0]
	R4.I = R4.I -4;
 800d17c:	4b22      	ldr	r3, [pc, #136]	; (800d208 <Cursor_0+0x100>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	3b04      	subs	r3, #4
 800d182:	4a21      	ldr	r2, [pc, #132]	; (800d208 <Cursor_0+0x100>)
 800d184:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d186:	4b24      	ldr	r3, [pc, #144]	; (800d218 <Cursor_0+0x110>)
 800d188:	681a      	ldr	r2, [r3, #0]
 800d18a:	4b1f      	ldr	r3, [pc, #124]	; (800d208 <Cursor_0+0x100>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	b292      	uxth	r2, r2
 800d190:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d192:	4b1d      	ldr	r3, [pc, #116]	; (800d208 <Cursor_0+0x100>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	3302      	adds	r3, #2
 800d198:	4a1b      	ldr	r2, [pc, #108]	; (800d208 <Cursor_0+0x100>)
 800d19a:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d19c:	4b1e      	ldr	r3, [pc, #120]	; (800d218 <Cursor_0+0x110>)
 800d19e:	681a      	ldr	r2, [r3, #0]
 800d1a0:	4b19      	ldr	r3, [pc, #100]	; (800d208 <Cursor_0+0x100>)
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	b292      	uxth	r2, r2
 800d1a6:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d1a8:	4b17      	ldr	r3, [pc, #92]	; (800d208 <Cursor_0+0x100>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	3302      	adds	r3, #2
 800d1ae:	4a16      	ldr	r2, [pc, #88]	; (800d208 <Cursor_0+0x100>)
 800d1b0:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d1b2:	4b19      	ldr	r3, [pc, #100]	; (800d218 <Cursor_0+0x110>)
 800d1b4:	681a      	ldr	r2, [r3, #0]
 800d1b6:	4b14      	ldr	r3, [pc, #80]	; (800d208 <Cursor_0+0x100>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	b292      	uxth	r2, r2
 800d1bc:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d1be:	4b12      	ldr	r3, [pc, #72]	; (800d208 <Cursor_0+0x100>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	3302      	adds	r3, #2
 800d1c4:	4a10      	ldr	r2, [pc, #64]	; (800d208 <Cursor_0+0x100>)
 800d1c6:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d1c8:	4b13      	ldr	r3, [pc, #76]	; (800d218 <Cursor_0+0x110>)
 800d1ca:	681a      	ldr	r2, [r3, #0]
 800d1cc:	4b0e      	ldr	r3, [pc, #56]	; (800d208 <Cursor_0+0x100>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	b292      	uxth	r2, r2
 800d1d2:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d1d4:	4b0c      	ldr	r3, [pc, #48]	; (800d208 <Cursor_0+0x100>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	3302      	adds	r3, #2
 800d1da:	4a0b      	ldr	r2, [pc, #44]	; (800d208 <Cursor_0+0x100>)
 800d1dc:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d1de:	4b0e      	ldr	r3, [pc, #56]	; (800d218 <Cursor_0+0x110>)
 800d1e0:	681a      	ldr	r2, [r3, #0]
 800d1e2:	4b09      	ldr	r3, [pc, #36]	; (800d208 <Cursor_0+0x100>)
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	b292      	uxth	r2, r2
 800d1e8:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d1ea:	4b07      	ldr	r3, [pc, #28]	; (800d208 <Cursor_0+0x100>)
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	3302      	adds	r3, #2
 800d1f0:	4a05      	ldr	r2, [pc, #20]	; (800d208 <Cursor_0+0x100>)
 800d1f2:	6013      	str	r3, [r2, #0]
 800d1f4:	e000      	b.n	800d1f8 <Cursor_0+0xf0>
		goto Cursor02;
 800d1f6:	bf00      	nop

Cursor02:
	R3 = R3 -1;
 800d1f8:	4b02      	ldr	r3, [pc, #8]	; (800d204 <Cursor_0+0xfc>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	3b01      	subs	r3, #1
 800d1fe:	4a01      	ldr	r2, [pc, #4]	; (800d204 <Cursor_0+0xfc>)
 800d200:	6013      	str	r3, [r2, #0]
	if( R3 >= 0)
	{
		goto Cursor01;
 800d202:	e78b      	b.n	800d11c <Cursor_0+0x14>
 800d204:	20000a48 	.word	0x20000a48
 800d208:	20000bf4 	.word	0x20000bf4
 800d20c:	20000be8 	.word	0x20000be8
 800d210:	20000a44 	.word	0x20000a44
 800d214:	20000a50 	.word	0x20000a50
 800d218:	20000bf0 	.word	0x20000bf0

0800d21c <Cursor_1>:
	}
	return;
}

void Cursor_1(short *pTab)
{
 800d21c:	b480      	push	{r7}
 800d21e:	b083      	sub	sp, #12
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
	R3 =6;
 800d224:	4b31      	ldr	r3, [pc, #196]	; (800d2ec <Cursor_1+0xd0>)
 800d226:	2206      	movs	r2, #6
 800d228:	601a      	str	r2, [r3, #0]
	R4.A = (char*) &AA[204];
 800d22a:	4b31      	ldr	r3, [pc, #196]	; (800d2f0 <Cursor_1+0xd4>)
 800d22c:	4a31      	ldr	r2, [pc, #196]	; (800d2f4 <Cursor_1+0xd8>)
 800d22e:	601a      	str	r2, [r3, #0]

Cursor11:
	R5 = pTab[R3];
 800d230:	4b2e      	ldr	r3, [pc, #184]	; (800d2ec <Cursor_1+0xd0>)
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	005b      	lsls	r3, r3, #1
 800d236:	687a      	ldr	r2, [r7, #4]
 800d238:	4413      	add	r3, r2
 800d23a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d23e:	461a      	mov	r2, r3
 800d240:	4b2d      	ldr	r3, [pc, #180]	; (800d2f8 <Cursor_1+0xdc>)
 800d242:	601a      	str	r2, [r3, #0]
	if( (R5&1) != 0)
 800d244:	4b2c      	ldr	r3, [pc, #176]	; (800d2f8 <Cursor_1+0xdc>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	f003 0301 	and.w	r3, r3, #1
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d146      	bne.n	800d2de <Cursor_1+0xc2>
	{
		goto Cursor12;
	}
	R5 = pTab[R3 +10];
 800d250:	4b26      	ldr	r3, [pc, #152]	; (800d2ec <Cursor_1+0xd0>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	330a      	adds	r3, #10
 800d256:	005b      	lsls	r3, r3, #1
 800d258:	687a      	ldr	r2, [r7, #4]
 800d25a:	4413      	add	r3, r2
 800d25c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d260:	461a      	mov	r2, r3
 800d262:	4b25      	ldr	r3, [pc, #148]	; (800d2f8 <Cursor_1+0xdc>)
 800d264:	601a      	str	r2, [r3, #0]
	R4.A = (char*)&AA[204 - R5/2];
 800d266:	4b24      	ldr	r3, [pc, #144]	; (800d2f8 <Cursor_1+0xdc>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	085b      	lsrs	r3, r3, #1
 800d26c:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d270:	005b      	lsls	r3, r3, #1
 800d272:	4a22      	ldr	r2, [pc, #136]	; (800d2fc <Cursor_1+0xe0>)
 800d274:	4413      	add	r3, r2
 800d276:	4a1e      	ldr	r2, [pc, #120]	; (800d2f0 <Cursor_1+0xd4>)
 800d278:	6013      	str	r3, [r2, #0]
	R6 = pTab[R3 +20];
 800d27a:	4b1c      	ldr	r3, [pc, #112]	; (800d2ec <Cursor_1+0xd0>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	3314      	adds	r3, #20
 800d280:	005b      	lsls	r3, r3, #1
 800d282:	687a      	ldr	r2, [r7, #4]
 800d284:	4413      	add	r3, r2
 800d286:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d28a:	461a      	mov	r2, r3
 800d28c:	4b1c      	ldr	r3, [pc, #112]	; (800d300 <Cursor_1+0xe4>)
 800d28e:	601a      	str	r2, [r3, #0]
	R4.I = R4.I -2;
 800d290:	4b17      	ldr	r3, [pc, #92]	; (800d2f0 <Cursor_1+0xd4>)
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	3b02      	subs	r3, #2
 800d296:	4a16      	ldr	r2, [pc, #88]	; (800d2f0 <Cursor_1+0xd4>)
 800d298:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d29a:	4b19      	ldr	r3, [pc, #100]	; (800d300 <Cursor_1+0xe4>)
 800d29c:	681a      	ldr	r2, [r3, #0]
 800d29e:	4b14      	ldr	r3, [pc, #80]	; (800d2f0 <Cursor_1+0xd4>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	b292      	uxth	r2, r2
 800d2a4:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d2a6:	4b12      	ldr	r3, [pc, #72]	; (800d2f0 <Cursor_1+0xd4>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	3302      	adds	r3, #2
 800d2ac:	4a10      	ldr	r2, [pc, #64]	; (800d2f0 <Cursor_1+0xd4>)
 800d2ae:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d2b0:	4b13      	ldr	r3, [pc, #76]	; (800d300 <Cursor_1+0xe4>)
 800d2b2:	681a      	ldr	r2, [r3, #0]
 800d2b4:	4b0e      	ldr	r3, [pc, #56]	; (800d2f0 <Cursor_1+0xd4>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	b292      	uxth	r2, r2
 800d2ba:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d2bc:	4b0c      	ldr	r3, [pc, #48]	; (800d2f0 <Cursor_1+0xd4>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	3302      	adds	r3, #2
 800d2c2:	4a0b      	ldr	r2, [pc, #44]	; (800d2f0 <Cursor_1+0xd4>)
 800d2c4:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d2c6:	4b0e      	ldr	r3, [pc, #56]	; (800d300 <Cursor_1+0xe4>)
 800d2c8:	681a      	ldr	r2, [r3, #0]
 800d2ca:	4b09      	ldr	r3, [pc, #36]	; (800d2f0 <Cursor_1+0xd4>)
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	b292      	uxth	r2, r2
 800d2d0:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d2d2:	4b07      	ldr	r3, [pc, #28]	; (800d2f0 <Cursor_1+0xd4>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	3302      	adds	r3, #2
 800d2d8:	4a05      	ldr	r2, [pc, #20]	; (800d2f0 <Cursor_1+0xd4>)
 800d2da:	6013      	str	r3, [r2, #0]
 800d2dc:	e000      	b.n	800d2e0 <Cursor_1+0xc4>
		goto Cursor12;
 800d2de:	bf00      	nop

Cursor12:
	R3 = R3 -1;
 800d2e0:	4b02      	ldr	r3, [pc, #8]	; (800d2ec <Cursor_1+0xd0>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	3b01      	subs	r3, #1
 800d2e6:	4a01      	ldr	r2, [pc, #4]	; (800d2ec <Cursor_1+0xd0>)
 800d2e8:	6013      	str	r3, [r2, #0]
	if( R3 >= 0)
	{
		goto Cursor11;
 800d2ea:	e7a1      	b.n	800d230 <Cursor_1+0x14>
 800d2ec:	20000a48 	.word	0x20000a48
 800d2f0:	20000bf4 	.word	0x20000bf4
 800d2f4:	20000be8 	.word	0x20000be8
 800d2f8:	20000a44 	.word	0x20000a44
 800d2fc:	20000a50 	.word	0x20000a50
 800d300:	20000bf0 	.word	0x20000bf0

0800d304 <Cursor_2>:
	}
	return;
}

void Cursor_2(short *pTab)
{
 800d304:	b480      	push	{r7}
 800d306:	b083      	sub	sp, #12
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
	R3 =6;
 800d30c:	4b21      	ldr	r3, [pc, #132]	; (800d394 <Cursor_2+0x90>)
 800d30e:	2206      	movs	r2, #6
 800d310:	601a      	str	r2, [r3, #0]
	R4.A = (char*) &AA[204];
 800d312:	4b21      	ldr	r3, [pc, #132]	; (800d398 <Cursor_2+0x94>)
 800d314:	4a21      	ldr	r2, [pc, #132]	; (800d39c <Cursor_2+0x98>)
 800d316:	601a      	str	r2, [r3, #0]

Cursor21:
	R5 = pTab[R3];
 800d318:	4b1e      	ldr	r3, [pc, #120]	; (800d394 <Cursor_2+0x90>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	005b      	lsls	r3, r3, #1
 800d31e:	687a      	ldr	r2, [r7, #4]
 800d320:	4413      	add	r3, r2
 800d322:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d326:	461a      	mov	r2, r3
 800d328:	4b1d      	ldr	r3, [pc, #116]	; (800d3a0 <Cursor_2+0x9c>)
 800d32a:	601a      	str	r2, [r3, #0]
	if( (R5&1) != 0)
 800d32c:	4b1c      	ldr	r3, [pc, #112]	; (800d3a0 <Cursor_2+0x9c>)
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	f003 0301 	and.w	r3, r3, #1
 800d334:	2b00      	cmp	r3, #0
 800d336:	d126      	bne.n	800d386 <Cursor_2+0x82>
	{
		goto Cursor22;
	}
	R5 = pTab[R3 +10];
 800d338:	4b16      	ldr	r3, [pc, #88]	; (800d394 <Cursor_2+0x90>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	330a      	adds	r3, #10
 800d33e:	005b      	lsls	r3, r3, #1
 800d340:	687a      	ldr	r2, [r7, #4]
 800d342:	4413      	add	r3, r2
 800d344:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d348:	461a      	mov	r2, r3
 800d34a:	4b15      	ldr	r3, [pc, #84]	; (800d3a0 <Cursor_2+0x9c>)
 800d34c:	601a      	str	r2, [r3, #0]
	R4.A = (char*)&AA[204 - R5/2];
 800d34e:	4b14      	ldr	r3, [pc, #80]	; (800d3a0 <Cursor_2+0x9c>)
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	085b      	lsrs	r3, r3, #1
 800d354:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d358:	005b      	lsls	r3, r3, #1
 800d35a:	4a12      	ldr	r2, [pc, #72]	; (800d3a4 <Cursor_2+0xa0>)
 800d35c:	4413      	add	r3, r2
 800d35e:	4a0e      	ldr	r2, [pc, #56]	; (800d398 <Cursor_2+0x94>)
 800d360:	6013      	str	r3, [r2, #0]
	R6 = pTab[R3 +20];
 800d362:	4b0c      	ldr	r3, [pc, #48]	; (800d394 <Cursor_2+0x90>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	3314      	adds	r3, #20
 800d368:	005b      	lsls	r3, r3, #1
 800d36a:	687a      	ldr	r2, [r7, #4]
 800d36c:	4413      	add	r3, r2
 800d36e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d372:	461a      	mov	r2, r3
 800d374:	4b0c      	ldr	r3, [pc, #48]	; (800d3a8 <Cursor_2+0xa4>)
 800d376:	601a      	str	r2, [r3, #0]
	*(unsigned short*)R4.A =R6;
 800d378:	4b0b      	ldr	r3, [pc, #44]	; (800d3a8 <Cursor_2+0xa4>)
 800d37a:	681a      	ldr	r2, [r3, #0]
 800d37c:	4b06      	ldr	r3, [pc, #24]	; (800d398 <Cursor_2+0x94>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	b292      	uxth	r2, r2
 800d382:	801a      	strh	r2, [r3, #0]
 800d384:	e000      	b.n	800d388 <Cursor_2+0x84>
		goto Cursor22;
 800d386:	bf00      	nop

Cursor22:
	R3 = R3 -1;
 800d388:	4b02      	ldr	r3, [pc, #8]	; (800d394 <Cursor_2+0x90>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	3b01      	subs	r3, #1
 800d38e:	4a01      	ldr	r2, [pc, #4]	; (800d394 <Cursor_2+0x90>)
 800d390:	6013      	str	r3, [r2, #0]
	if( R3 >= 0)
	{
		goto Cursor21;
 800d392:	e7c1      	b.n	800d318 <Cursor_2+0x14>
 800d394:	20000a48 	.word	0x20000a48
 800d398:	20000bf4 	.word	0x20000bf4
 800d39c:	20000be8 	.word	0x20000be8
 800d3a0:	20000a44 	.word	0x20000a44
 800d3a4:	20000a50 	.word	0x20000a50
 800d3a8:	20000bf0 	.word	0x20000bf0

0800d3ac <Cursor_3>:
	return;
}

// Cursor_3(R1:pTab, R2:Col)// ���������α���  Used: R3-R6
void Cursor_3(short *pTab)
{
 800d3ac:	b480      	push	{r7}
 800d3ae:	b083      	sub	sp, #12
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
	R3 =6;
 800d3b4:	4b2a      	ldr	r3, [pc, #168]	; (800d460 <Cursor_3+0xb4>)
 800d3b6:	2206      	movs	r2, #6
 800d3b8:	601a      	str	r2, [r3, #0]
	R4.A = (char*) &AA[204];
 800d3ba:	4b2a      	ldr	r3, [pc, #168]	; (800d464 <Cursor_3+0xb8>)
 800d3bc:	4a2a      	ldr	r2, [pc, #168]	; (800d468 <Cursor_3+0xbc>)
 800d3be:	601a      	str	r2, [r3, #0]

Cursor31:
	R5 = pTab[R3];
 800d3c0:	4b27      	ldr	r3, [pc, #156]	; (800d460 <Cursor_3+0xb4>)
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	005b      	lsls	r3, r3, #1
 800d3c6:	687a      	ldr	r2, [r7, #4]
 800d3c8:	4413      	add	r3, r2
 800d3ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d3ce:	461a      	mov	r2, r3
 800d3d0:	4b26      	ldr	r3, [pc, #152]	; (800d46c <Cursor_3+0xc0>)
 800d3d2:	601a      	str	r2, [r3, #0]
	if( (R5&2) != 0)
 800d3d4:	4b25      	ldr	r3, [pc, #148]	; (800d46c <Cursor_3+0xc0>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	f003 0302 	and.w	r3, r3, #2
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d135      	bne.n	800d44c <Cursor_3+0xa0>
	{
		goto Cursor32;
	}

	R5= R2 -1;
 800d3e0:	4b23      	ldr	r3, [pc, #140]	; (800d470 <Cursor_3+0xc4>)
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	3b01      	subs	r3, #1
 800d3e6:	4a21      	ldr	r2, [pc, #132]	; (800d46c <Cursor_3+0xc0>)
 800d3e8:	6013      	str	r3, [r2, #0]
	R5 = R5 &3;
 800d3ea:	4b20      	ldr	r3, [pc, #128]	; (800d46c <Cursor_3+0xc0>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	f003 0303 	and.w	r3, r3, #3
 800d3f2:	4a1e      	ldr	r2, [pc, #120]	; (800d46c <Cursor_3+0xc0>)
 800d3f4:	6013      	str	r3, [r2, #0]
	if( R5 != 0)
 800d3f6:	4b1d      	ldr	r3, [pc, #116]	; (800d46c <Cursor_3+0xc0>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d128      	bne.n	800d450 <Cursor_3+0xa4>
	{
		goto Cursor32;
	}

	R5 = pTab[R3 +10];
 800d3fe:	4b18      	ldr	r3, [pc, #96]	; (800d460 <Cursor_3+0xb4>)
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	330a      	adds	r3, #10
 800d404:	005b      	lsls	r3, r3, #1
 800d406:	687a      	ldr	r2, [r7, #4]
 800d408:	4413      	add	r3, r2
 800d40a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d40e:	461a      	mov	r2, r3
 800d410:	4b16      	ldr	r3, [pc, #88]	; (800d46c <Cursor_3+0xc0>)
 800d412:	601a      	str	r2, [r3, #0]
	R4.A = (char*)&AA[204 - R5/2];
 800d414:	4b15      	ldr	r3, [pc, #84]	; (800d46c <Cursor_3+0xc0>)
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	085b      	lsrs	r3, r3, #1
 800d41a:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d41e:	005b      	lsls	r3, r3, #1
 800d420:	4a14      	ldr	r2, [pc, #80]	; (800d474 <Cursor_3+0xc8>)
 800d422:	4413      	add	r3, r2
 800d424:	4a0f      	ldr	r2, [pc, #60]	; (800d464 <Cursor_3+0xb8>)
 800d426:	6013      	str	r3, [r2, #0]
	R6 = pTab[R3 +20];
 800d428:	4b0d      	ldr	r3, [pc, #52]	; (800d460 <Cursor_3+0xb4>)
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	3314      	adds	r3, #20
 800d42e:	005b      	lsls	r3, r3, #1
 800d430:	687a      	ldr	r2, [r7, #4]
 800d432:	4413      	add	r3, r2
 800d434:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d438:	461a      	mov	r2, r3
 800d43a:	4b0f      	ldr	r3, [pc, #60]	; (800d478 <Cursor_3+0xcc>)
 800d43c:	601a      	str	r2, [r3, #0]
	*(unsigned short*)R4.A =R6;
 800d43e:	4b0e      	ldr	r3, [pc, #56]	; (800d478 <Cursor_3+0xcc>)
 800d440:	681a      	ldr	r2, [r3, #0]
 800d442:	4b08      	ldr	r3, [pc, #32]	; (800d464 <Cursor_3+0xb8>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	b292      	uxth	r2, r2
 800d448:	801a      	strh	r2, [r3, #0]
 800d44a:	e002      	b.n	800d452 <Cursor_3+0xa6>
		goto Cursor32;
 800d44c:	bf00      	nop
 800d44e:	e000      	b.n	800d452 <Cursor_3+0xa6>
		goto Cursor32;
 800d450:	bf00      	nop

Cursor32:
	R3 = R3 -1;
 800d452:	4b03      	ldr	r3, [pc, #12]	; (800d460 <Cursor_3+0xb4>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	3b01      	subs	r3, #1
 800d458:	4a01      	ldr	r2, [pc, #4]	; (800d460 <Cursor_3+0xb4>)
 800d45a:	6013      	str	r3, [r2, #0]
	if( R3 >= 0)
	{
		goto Cursor31;
 800d45c:	e7b0      	b.n	800d3c0 <Cursor_3+0x14>
 800d45e:	bf00      	nop
 800d460:	20000a48 	.word	0x20000a48
 800d464:	20000bf4 	.word	0x20000bf4
 800d468:	20000be8 	.word	0x20000be8
 800d46c:	20000a44 	.word	0x20000a44
 800d470:	20000c00 	.word	0x20000c00
 800d474:	20000a50 	.word	0x20000a50
 800d478:	20000bf0 	.word	0x20000bf0

0800d47c <Cursor_4>:
	return;
}

// Cursor_4(R1:pTab, R2:Col)// �����л��α�˵�  Used: R3-R8
void Cursor_4(short *pTab)
{
 800d47c:	b480      	push	{r7}
 800d47e:	b083      	sub	sp, #12
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
	R3 = 7;
 800d484:	4b7a      	ldr	r3, [pc, #488]	; (800d670 <Cursor_4+0x1f4>)
 800d486:	2207      	movs	r2, #7
 800d488:	601a      	str	r2, [r3, #0]

Cursor40:
	R4.A = (char*) &AA[204];
 800d48a:	4b7a      	ldr	r3, [pc, #488]	; (800d674 <Cursor_4+0x1f8>)
 800d48c:	4a7a      	ldr	r2, [pc, #488]	; (800d678 <Cursor_4+0x1fc>)
 800d48e:	601a      	str	r2, [r3, #0]
	R5 = pTab[R3];
 800d490:	4b77      	ldr	r3, [pc, #476]	; (800d670 <Cursor_4+0x1f4>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	005b      	lsls	r3, r3, #1
 800d496:	687a      	ldr	r2, [r7, #4]
 800d498:	4413      	add	r3, r2
 800d49a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d49e:	461a      	mov	r2, r3
 800d4a0:	4b76      	ldr	r3, [pc, #472]	; (800d67c <Cursor_4+0x200>)
 800d4a2:	601a      	str	r2, [r3, #0]
	if((R5 & 1) == 0)
 800d4a4:	4b75      	ldr	r3, [pc, #468]	; (800d67c <Cursor_4+0x200>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	f003 0301 	and.w	r3, r3, #1
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	f040 8145 	bne.w	800d73c <Cursor_4+0x2c0>
	{
		goto Cursor41;
 800d4b2:	bf00      	nop
	}
	goto Cursor49;

Cursor41:
	R5 = pTab[R3+10];
 800d4b4:	4b6e      	ldr	r3, [pc, #440]	; (800d670 <Cursor_4+0x1f4>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	330a      	adds	r3, #10
 800d4ba:	005b      	lsls	r3, r3, #1
 800d4bc:	687a      	ldr	r2, [r7, #4]
 800d4be:	4413      	add	r3, r2
 800d4c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d4c4:	461a      	mov	r2, r3
 800d4c6:	4b6d      	ldr	r3, [pc, #436]	; (800d67c <Cursor_4+0x200>)
 800d4c8:	601a      	str	r2, [r3, #0]
	R6 = pTab[R3+20];
 800d4ca:	4b69      	ldr	r3, [pc, #420]	; (800d670 <Cursor_4+0x1f4>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	3314      	adds	r3, #20
 800d4d0:	005b      	lsls	r3, r3, #1
 800d4d2:	687a      	ldr	r2, [r7, #4]
 800d4d4:	4413      	add	r3, r2
 800d4d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d4da:	461a      	mov	r2, r3
 800d4dc:	4b68      	ldr	r3, [pc, #416]	; (800d680 <Cursor_4+0x204>)
 800d4de:	601a      	str	r2, [r3, #0]

	R8 =R5 -2;
 800d4e0:	4b66      	ldr	r3, [pc, #408]	; (800d67c <Cursor_4+0x200>)
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	3b02      	subs	r3, #2
 800d4e6:	4a67      	ldr	r2, [pc, #412]	; (800d684 <Cursor_4+0x208>)
 800d4e8:	6013      	str	r3, [r2, #0]
	if (R5 != R8)
 800d4ea:	4b64      	ldr	r3, [pc, #400]	; (800d67c <Cursor_4+0x200>)
 800d4ec:	681a      	ldr	r2, [r3, #0]
 800d4ee:	4b65      	ldr	r3, [pc, #404]	; (800d684 <Cursor_4+0x208>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	429a      	cmp	r2, r3
 800d4f4:	d112      	bne.n	800d51c <Cursor_4+0xa0>
	{
		goto Cursor42;
	}

	*(unsigned short*)R4.A =R6;
 800d4f6:	4b62      	ldr	r3, [pc, #392]	; (800d680 <Cursor_4+0x204>)
 800d4f8:	681a      	ldr	r2, [r3, #0]
 800d4fa:	4b5e      	ldr	r3, [pc, #376]	; (800d674 <Cursor_4+0x1f8>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	b292      	uxth	r2, r2
 800d500:	801a      	strh	r2, [r3, #0]
	R4.A = R4.A +404;
 800d502:	4b5c      	ldr	r3, [pc, #368]	; (800d674 <Cursor_4+0x1f8>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800d50a:	4a5a      	ldr	r2, [pc, #360]	; (800d674 <Cursor_4+0x1f8>)
 800d50c:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d50e:	4b5c      	ldr	r3, [pc, #368]	; (800d680 <Cursor_4+0x204>)
 800d510:	681a      	ldr	r2, [r3, #0]
 800d512:	4b58      	ldr	r3, [pc, #352]	; (800d674 <Cursor_4+0x1f8>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	b292      	uxth	r2, r2
 800d518:	801a      	strh	r2, [r3, #0]
	goto Cursor49;
 800d51a:	e114      	b.n	800d746 <Cursor_4+0x2ca>
		goto Cursor42;
 800d51c:	bf00      	nop

Cursor42:
	R8 = R8 +1;
 800d51e:	4b59      	ldr	r3, [pc, #356]	; (800d684 <Cursor_4+0x208>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	3301      	adds	r3, #1
 800d524:	4a57      	ldr	r2, [pc, #348]	; (800d684 <Cursor_4+0x208>)
 800d526:	6013      	str	r3, [r2, #0]
	if (R2 != R8)
 800d528:	4b57      	ldr	r3, [pc, #348]	; (800d688 <Cursor_4+0x20c>)
 800d52a:	681a      	ldr	r2, [r3, #0]
 800d52c:	4b55      	ldr	r3, [pc, #340]	; (800d684 <Cursor_4+0x208>)
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	429a      	cmp	r2, r3
 800d532:	d128      	bne.n	800d586 <Cursor_4+0x10a>
	{
		goto Cursor43;
	}

	*(unsigned short*)R4.A =R6;
 800d534:	4b52      	ldr	r3, [pc, #328]	; (800d680 <Cursor_4+0x204>)
 800d536:	681a      	ldr	r2, [r3, #0]
 800d538:	4b4e      	ldr	r3, [pc, #312]	; (800d674 <Cursor_4+0x1f8>)
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	b292      	uxth	r2, r2
 800d53e:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d540:	4b4c      	ldr	r3, [pc, #304]	; (800d674 <Cursor_4+0x1f8>)
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	3302      	adds	r3, #2
 800d546:	4a4b      	ldr	r2, [pc, #300]	; (800d674 <Cursor_4+0x1f8>)
 800d548:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d54a:	4b4d      	ldr	r3, [pc, #308]	; (800d680 <Cursor_4+0x204>)
 800d54c:	681a      	ldr	r2, [r3, #0]
 800d54e:	4b49      	ldr	r3, [pc, #292]	; (800d674 <Cursor_4+0x1f8>)
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	b292      	uxth	r2, r2
 800d554:	801a      	strh	r2, [r3, #0]
	R4.A = R4.A +400;
 800d556:	4b47      	ldr	r3, [pc, #284]	; (800d674 <Cursor_4+0x1f8>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d55e:	4a45      	ldr	r2, [pc, #276]	; (800d674 <Cursor_4+0x1f8>)
 800d560:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d562:	4b47      	ldr	r3, [pc, #284]	; (800d680 <Cursor_4+0x204>)
 800d564:	681a      	ldr	r2, [r3, #0]
 800d566:	4b43      	ldr	r3, [pc, #268]	; (800d674 <Cursor_4+0x1f8>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	b292      	uxth	r2, r2
 800d56c:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d56e:	4b41      	ldr	r3, [pc, #260]	; (800d674 <Cursor_4+0x1f8>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	3302      	adds	r3, #2
 800d574:	4a3f      	ldr	r2, [pc, #252]	; (800d674 <Cursor_4+0x1f8>)
 800d576:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d578:	4b41      	ldr	r3, [pc, #260]	; (800d680 <Cursor_4+0x204>)
 800d57a:	681a      	ldr	r2, [r3, #0]
 800d57c:	4b3d      	ldr	r3, [pc, #244]	; (800d674 <Cursor_4+0x1f8>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	b292      	uxth	r2, r2
 800d582:	801a      	strh	r2, [r3, #0]
	goto Cursor49;
 800d584:	e0df      	b.n	800d746 <Cursor_4+0x2ca>
		goto Cursor43;
 800d586:	bf00      	nop

Cursor43:
	R8 = R8 +1;
 800d588:	4b3e      	ldr	r3, [pc, #248]	; (800d684 <Cursor_4+0x208>)
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	3301      	adds	r3, #1
 800d58e:	4a3d      	ldr	r2, [pc, #244]	; (800d684 <Cursor_4+0x208>)
 800d590:	6013      	str	r3, [r2, #0]
	if (R2 != R8)
 800d592:	4b3d      	ldr	r3, [pc, #244]	; (800d688 <Cursor_4+0x20c>)
 800d594:	681a      	ldr	r2, [r3, #0]
 800d596:	4b3b      	ldr	r3, [pc, #236]	; (800d684 <Cursor_4+0x208>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	429a      	cmp	r2, r3
 800d59c:	d166      	bne.n	800d66c <Cursor_4+0x1f0>
	{
		goto Cursor45;
	}

	*(unsigned short*)R4.A =R6;
 800d59e:	4b38      	ldr	r3, [pc, #224]	; (800d680 <Cursor_4+0x204>)
 800d5a0:	681a      	ldr	r2, [r3, #0]
 800d5a2:	4b34      	ldr	r3, [pc, #208]	; (800d674 <Cursor_4+0x1f8>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	b292      	uxth	r2, r2
 800d5a8:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d5aa:	4b32      	ldr	r3, [pc, #200]	; (800d674 <Cursor_4+0x1f8>)
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	3302      	adds	r3, #2
 800d5b0:	4a30      	ldr	r2, [pc, #192]	; (800d674 <Cursor_4+0x1f8>)
 800d5b2:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d5b4:	4b32      	ldr	r3, [pc, #200]	; (800d680 <Cursor_4+0x204>)
 800d5b6:	681a      	ldr	r2, [r3, #0]
 800d5b8:	4b2e      	ldr	r3, [pc, #184]	; (800d674 <Cursor_4+0x1f8>)
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	b292      	uxth	r2, r2
 800d5be:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d5c0:	4b2c      	ldr	r3, [pc, #176]	; (800d674 <Cursor_4+0x1f8>)
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	3302      	adds	r3, #2
 800d5c6:	4a2b      	ldr	r2, [pc, #172]	; (800d674 <Cursor_4+0x1f8>)
 800d5c8:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d5ca:	4b2d      	ldr	r3, [pc, #180]	; (800d680 <Cursor_4+0x204>)
 800d5cc:	681a      	ldr	r2, [r3, #0]
 800d5ce:	4b29      	ldr	r3, [pc, #164]	; (800d674 <Cursor_4+0x1f8>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	b292      	uxth	r2, r2
 800d5d4:	801a      	strh	r2, [r3, #0]
	R4.A = (char*) &AA[4];
 800d5d6:	4b27      	ldr	r3, [pc, #156]	; (800d674 <Cursor_4+0x1f8>)
 800d5d8:	4a2c      	ldr	r2, [pc, #176]	; (800d68c <Cursor_4+0x210>)
 800d5da:	601a      	str	r2, [r3, #0]
	*(unsigned short*)R4.A =R6;
 800d5dc:	4b28      	ldr	r3, [pc, #160]	; (800d680 <Cursor_4+0x204>)
 800d5de:	681a      	ldr	r2, [r3, #0]
 800d5e0:	4b24      	ldr	r3, [pc, #144]	; (800d674 <Cursor_4+0x1f8>)
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	b292      	uxth	r2, r2
 800d5e6:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d5e8:	4b22      	ldr	r3, [pc, #136]	; (800d674 <Cursor_4+0x1f8>)
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	3302      	adds	r3, #2
 800d5ee:	4a21      	ldr	r2, [pc, #132]	; (800d674 <Cursor_4+0x1f8>)
 800d5f0:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d5f2:	4b23      	ldr	r3, [pc, #140]	; (800d680 <Cursor_4+0x204>)
 800d5f4:	681a      	ldr	r2, [r3, #0]
 800d5f6:	4b1f      	ldr	r3, [pc, #124]	; (800d674 <Cursor_4+0x1f8>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	b292      	uxth	r2, r2
 800d5fc:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d5fe:	4b1d      	ldr	r3, [pc, #116]	; (800d674 <Cursor_4+0x1f8>)
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	3302      	adds	r3, #2
 800d604:	4a1b      	ldr	r2, [pc, #108]	; (800d674 <Cursor_4+0x1f8>)
 800d606:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d608:	4b1d      	ldr	r3, [pc, #116]	; (800d680 <Cursor_4+0x204>)
 800d60a:	681a      	ldr	r2, [r3, #0]
 800d60c:	4b19      	ldr	r3, [pc, #100]	; (800d674 <Cursor_4+0x1f8>)
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	b292      	uxth	r2, r2
 800d612:	801a      	strh	r2, [r3, #0]
	R5 = pTab[R3+10];
 800d614:	4b16      	ldr	r3, [pc, #88]	; (800d670 <Cursor_4+0x1f4>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	330a      	adds	r3, #10
 800d61a:	005b      	lsls	r3, r3, #1
 800d61c:	687a      	ldr	r2, [r7, #4]
 800d61e:	4413      	add	r3, r2
 800d620:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d624:	461a      	mov	r2, r3
 800d626:	4b15      	ldr	r3, [pc, #84]	; (800d67c <Cursor_4+0x200>)
 800d628:	601a      	str	r2, [r3, #0]
	if((R5 & 2) != 0)
 800d62a:	4b14      	ldr	r3, [pc, #80]	; (800d67c <Cursor_4+0x200>)
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	f003 0302 	and.w	r3, r3, #2
 800d632:	2b00      	cmp	r3, #0
 800d634:	d12e      	bne.n	800d694 <Cursor_4+0x218>
	{
		goto Cursor45;
	}
	R4.A = (char*) &AA[204];
 800d636:	4b0f      	ldr	r3, [pc, #60]	; (800d674 <Cursor_4+0x1f8>)
 800d638:	4a0f      	ldr	r2, [pc, #60]	; (800d678 <Cursor_4+0x1fc>)
 800d63a:	601a      	str	r2, [r3, #0]
	R7 = R4.I +400;
 800d63c:	4b0d      	ldr	r3, [pc, #52]	; (800d674 <Cursor_4+0x1f8>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d644:	4a12      	ldr	r2, [pc, #72]	; (800d690 <Cursor_4+0x214>)
 800d646:	6013      	str	r3, [r2, #0]

Cursor44:
	R4.A= R4.A +8;
 800d648:	4b0a      	ldr	r3, [pc, #40]	; (800d674 <Cursor_4+0x1f8>)
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	3308      	adds	r3, #8
 800d64e:	4a09      	ldr	r2, [pc, #36]	; (800d674 <Cursor_4+0x1f8>)
 800d650:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d652:	4b0b      	ldr	r3, [pc, #44]	; (800d680 <Cursor_4+0x204>)
 800d654:	681a      	ldr	r2, [r3, #0]
 800d656:	4b07      	ldr	r3, [pc, #28]	; (800d674 <Cursor_4+0x1f8>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	b292      	uxth	r2, r2
 800d65c:	801a      	strh	r2, [r3, #0]
	if(R7 >= R4.I)
 800d65e:	4b05      	ldr	r3, [pc, #20]	; (800d674 <Cursor_4+0x1f8>)
 800d660:	681a      	ldr	r2, [r3, #0]
 800d662:	4b0b      	ldr	r3, [pc, #44]	; (800d690 <Cursor_4+0x214>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	429a      	cmp	r2, r3
 800d668:	d86a      	bhi.n	800d740 <Cursor_4+0x2c4>
	{
		goto Cursor44;
 800d66a:	e7ed      	b.n	800d648 <Cursor_4+0x1cc>
		goto Cursor45;
 800d66c:	bf00      	nop
 800d66e:	e012      	b.n	800d696 <Cursor_4+0x21a>
 800d670:	20000a48 	.word	0x20000a48
 800d674:	20000bf4 	.word	0x20000bf4
 800d678:	20000be8 	.word	0x20000be8
 800d67c:	20000a44 	.word	0x20000a44
 800d680:	20000bf0 	.word	0x20000bf0
 800d684:	20000a40 	.word	0x20000a40
 800d688:	20000c00 	.word	0x20000c00
 800d68c:	20000a58 	.word	0x20000a58
 800d690:	20000c08 	.word	0x20000c08
		goto Cursor45;
 800d694:	bf00      	nop
	}
	goto Cursor49;

Cursor45:
	R8 = R8 +1;
 800d696:	4b34      	ldr	r3, [pc, #208]	; (800d768 <Cursor_4+0x2ec>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	3301      	adds	r3, #1
 800d69c:	4a32      	ldr	r2, [pc, #200]	; (800d768 <Cursor_4+0x2ec>)
 800d69e:	6013      	str	r3, [r2, #0]
	if (R8 != R2)
 800d6a0:	4b31      	ldr	r3, [pc, #196]	; (800d768 <Cursor_4+0x2ec>)
 800d6a2:	681a      	ldr	r2, [r3, #0]
 800d6a4:	4b31      	ldr	r3, [pc, #196]	; (800d76c <Cursor_4+0x2f0>)
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	429a      	cmp	r2, r3
 800d6aa:	d128      	bne.n	800d6fe <Cursor_4+0x282>
	{
		goto Cursor46;
	}
	*(unsigned short*)R4.A =R6;
 800d6ac:	4b30      	ldr	r3, [pc, #192]	; (800d770 <Cursor_4+0x2f4>)
 800d6ae:	681a      	ldr	r2, [r3, #0]
 800d6b0:	4b30      	ldr	r3, [pc, #192]	; (800d774 <Cursor_4+0x2f8>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	b292      	uxth	r2, r2
 800d6b6:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d6b8:	4b2e      	ldr	r3, [pc, #184]	; (800d774 <Cursor_4+0x2f8>)
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	3302      	adds	r3, #2
 800d6be:	4a2d      	ldr	r2, [pc, #180]	; (800d774 <Cursor_4+0x2f8>)
 800d6c0:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d6c2:	4b2b      	ldr	r3, [pc, #172]	; (800d770 <Cursor_4+0x2f4>)
 800d6c4:	681a      	ldr	r2, [r3, #0]
 800d6c6:	4b2b      	ldr	r3, [pc, #172]	; (800d774 <Cursor_4+0x2f8>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	b292      	uxth	r2, r2
 800d6cc:	801a      	strh	r2, [r3, #0]
	R4.I = R4.I +400;
 800d6ce:	4b29      	ldr	r3, [pc, #164]	; (800d774 <Cursor_4+0x2f8>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d6d6:	4a27      	ldr	r2, [pc, #156]	; (800d774 <Cursor_4+0x2f8>)
 800d6d8:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d6da:	4b25      	ldr	r3, [pc, #148]	; (800d770 <Cursor_4+0x2f4>)
 800d6dc:	681a      	ldr	r2, [r3, #0]
 800d6de:	4b25      	ldr	r3, [pc, #148]	; (800d774 <Cursor_4+0x2f8>)
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	b292      	uxth	r2, r2
 800d6e4:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d6e6:	4b23      	ldr	r3, [pc, #140]	; (800d774 <Cursor_4+0x2f8>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	3302      	adds	r3, #2
 800d6ec:	4a21      	ldr	r2, [pc, #132]	; (800d774 <Cursor_4+0x2f8>)
 800d6ee:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d6f0:	4b1f      	ldr	r3, [pc, #124]	; (800d770 <Cursor_4+0x2f4>)
 800d6f2:	681a      	ldr	r2, [r3, #0]
 800d6f4:	4b1f      	ldr	r3, [pc, #124]	; (800d774 <Cursor_4+0x2f8>)
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	b292      	uxth	r2, r2
 800d6fa:	801a      	strh	r2, [r3, #0]
	goto Cursor49;
 800d6fc:	e023      	b.n	800d746 <Cursor_4+0x2ca>
		goto Cursor46;
 800d6fe:	bf00      	nop

Cursor46:
	R8 = R8 +1;
 800d700:	4b19      	ldr	r3, [pc, #100]	; (800d768 <Cursor_4+0x2ec>)
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	3301      	adds	r3, #1
 800d706:	4a18      	ldr	r2, [pc, #96]	; (800d768 <Cursor_4+0x2ec>)
 800d708:	6013      	str	r3, [r2, #0]
	if (R8 != R2)
 800d70a:	4b17      	ldr	r3, [pc, #92]	; (800d768 <Cursor_4+0x2ec>)
 800d70c:	681a      	ldr	r2, [r3, #0]
 800d70e:	4b17      	ldr	r3, [pc, #92]	; (800d76c <Cursor_4+0x2f0>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	429a      	cmp	r2, r3
 800d714:	d116      	bne.n	800d744 <Cursor_4+0x2c8>
	{
		goto Cursor49;
	}
	*(unsigned short*)R4.A =R6;
 800d716:	4b16      	ldr	r3, [pc, #88]	; (800d770 <Cursor_4+0x2f4>)
 800d718:	681a      	ldr	r2, [r3, #0]
 800d71a:	4b16      	ldr	r3, [pc, #88]	; (800d774 <Cursor_4+0x2f8>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	b292      	uxth	r2, r2
 800d720:	801a      	strh	r2, [r3, #0]
	R4.I = R4.I +404;
 800d722:	4b14      	ldr	r3, [pc, #80]	; (800d774 <Cursor_4+0x2f8>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800d72a:	4a12      	ldr	r2, [pc, #72]	; (800d774 <Cursor_4+0x2f8>)
 800d72c:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d72e:	4b10      	ldr	r3, [pc, #64]	; (800d770 <Cursor_4+0x2f4>)
 800d730:	681a      	ldr	r2, [r3, #0]
 800d732:	4b10      	ldr	r3, [pc, #64]	; (800d774 <Cursor_4+0x2f8>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	b292      	uxth	r2, r2
 800d738:	801a      	strh	r2, [r3, #0]
 800d73a:	e004      	b.n	800d746 <Cursor_4+0x2ca>
	goto Cursor49;
 800d73c:	bf00      	nop
 800d73e:	e002      	b.n	800d746 <Cursor_4+0x2ca>
	goto Cursor49;
 800d740:	bf00      	nop
 800d742:	e000      	b.n	800d746 <Cursor_4+0x2ca>
		goto Cursor49;
 800d744:	bf00      	nop

Cursor49:
	R3 = R3 +1;
 800d746:	4b0c      	ldr	r3, [pc, #48]	; (800d778 <Cursor_4+0x2fc>)
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	3301      	adds	r3, #1
 800d74c:	4a0a      	ldr	r2, [pc, #40]	; (800d778 <Cursor_4+0x2fc>)
 800d74e:	6013      	str	r3, [r2, #0]
	if (R3 != 10)
 800d750:	4b09      	ldr	r3, [pc, #36]	; (800d778 <Cursor_4+0x2fc>)
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	2b0a      	cmp	r3, #10
 800d756:	d000      	beq.n	800d75a <Cursor_4+0x2de>
		goto Cursor40;
 800d758:	e697      	b.n	800d48a <Cursor_4+0xe>

return;
 800d75a:	bf00      	nop
}
 800d75c:	370c      	adds	r7, #12
 800d75e:	46bd      	mov	sp, r7
 800d760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d764:	4770      	bx	lr
 800d766:	bf00      	nop
 800d768:	20000a40 	.word	0x20000a40
 800d76c:	20000c00 	.word	0x20000c00
 800d770:	20000bf0 	.word	0x20000bf0
 800d774:	20000bf4 	.word	0x20000bf4
 800d778:	20000a48 	.word	0x20000a48

0800d77c <Send_LCD>:

// R0:pDat, R1:pTab, R2:Col, R3:Tmp, R4:pBuf, R5:WR , R6:LCD, R7:Ctrl, R8:RS
// void Send_LCD(u16* pBuf, u16 Row) // �ӻ���������һ�����ݵ�LCD Used: R3-R8
void Send_LCD(short* pTab)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b082      	sub	sp, #8
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
	R5 = (unsigned)&AA[204];
 800d784:	4a12      	ldr	r2, [pc, #72]	; (800d7d0 <Send_LCD+0x54>)
 800d786:	4b13      	ldr	r3, [pc, #76]	; (800d7d4 <Send_LCD+0x58>)
 800d788:	601a      	str	r2, [r3, #0]

	LCD_Set_Posi(R2, WINDOW_Y0);
 800d78a:	4b13      	ldr	r3, [pc, #76]	; (800d7d8 <Send_LCD+0x5c>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	b21b      	sxth	r3, r3
 800d790:	2113      	movs	r1, #19
 800d792:	4618      	mov	r0, r3
 800d794:	f004 fec4 	bl	8012520 <LCD_Set_Posi>
	R4.I =203;
 800d798:	4b10      	ldr	r3, [pc, #64]	; (800d7dc <Send_LCD+0x60>)
 800d79a:	22cb      	movs	r2, #203	; 0xcb
 800d79c:	601a      	str	r2, [r3, #0]

Send_LCD_Loop:
	LCD_Set_Pixel( *(unsigned short*)R5);
 800d79e:	4b0d      	ldr	r3, [pc, #52]	; (800d7d4 <Send_LCD+0x58>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	881b      	ldrh	r3, [r3, #0]
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	f004 ff09 	bl	80125bc <LCD_Set_Pixel>
	R5 = R5+2;
 800d7aa:	4b0a      	ldr	r3, [pc, #40]	; (800d7d4 <Send_LCD+0x58>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	3302      	adds	r3, #2
 800d7b0:	4a08      	ldr	r2, [pc, #32]	; (800d7d4 <Send_LCD+0x58>)
 800d7b2:	6013      	str	r3, [r2, #0]
	R4.I = R4.I - 1;
 800d7b4:	4b09      	ldr	r3, [pc, #36]	; (800d7dc <Send_LCD+0x60>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	3b01      	subs	r3, #1
 800d7ba:	4a08      	ldr	r2, [pc, #32]	; (800d7dc <Send_LCD+0x60>)
 800d7bc:	6013      	str	r3, [r2, #0]
	if(R4.I !=0 )
 800d7be:	4b07      	ldr	r3, [pc, #28]	; (800d7dc <Send_LCD+0x60>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d000      	beq.n	800d7c8 <Send_LCD+0x4c>
		goto Send_LCD_Loop;
 800d7c6:	e7ea      	b.n	800d79e <Send_LCD+0x22>

	return;
 800d7c8:	bf00      	nop
}
 800d7ca:	3708      	adds	r7, #8
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd80      	pop	{r7, pc}
 800d7d0:	20000be8 	.word	0x20000be8
 800d7d4:	20000a44 	.word	0x20000a44
 800d7d8:	20000c00 	.word	0x20000c00
 800d7dc:	20000bf4 	.word	0x20000bf4

0800d7e0 <Draw_Pop>:

// Draw_Pop(R2:Col, R10:pPop, R11:By0, R12:By1)// ���������� Used: R5-R7
void Draw_Pop(short* pTab)
{
 800d7e0:	b480      	push	{r7}
 800d7e2:	b083      	sub	sp, #12
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
	R7 = 0x10001;
 800d7e8:	4b85      	ldr	r3, [pc, #532]	; (800da00 <Draw_Pop+0x220>)
 800d7ea:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800d7ee:	601a      	str	r2, [r3, #0]
	R5 = pTab[36];
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	3348      	adds	r3, #72	; 0x48
 800d7f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d7f8:	461a      	mov	r2, r3
 800d7fa:	4b82      	ldr	r3, [pc, #520]	; (800da04 <Draw_Pop+0x224>)
 800d7fc:	601a      	str	r2, [r3, #0]
	R6 = pTab[37];
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	334a      	adds	r3, #74	; 0x4a
 800d802:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d806:	461a      	mov	r2, r3
 800d808:	4b7f      	ldr	r3, [pc, #508]	; (800da08 <Draw_Pop+0x228>)
 800d80a:	601a      	str	r2, [r3, #0]

	R3 = R11;
 800d80c:	4b7f      	ldr	r3, [pc, #508]	; (800da0c <Draw_Pop+0x22c>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	4a7f      	ldr	r2, [pc, #508]	; (800da10 <Draw_Pop+0x230>)
 800d812:	6013      	str	r3, [r2, #0]
	if( R2 == R3 )
 800d814:	4b7f      	ldr	r3, [pc, #508]	; (800da14 <Draw_Pop+0x234>)
 800d816:	681a      	ldr	r2, [r3, #0]
 800d818:	4b7d      	ldr	r3, [pc, #500]	; (800da10 <Draw_Pop+0x230>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	429a      	cmp	r2, r3
 800d81e:	d10d      	bne.n	800d83c <Draw_Pop+0x5c>
	{
		R5 = R5 +6;
 800d820:	4b78      	ldr	r3, [pc, #480]	; (800da04 <Draw_Pop+0x224>)
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	3306      	adds	r3, #6
 800d826:	4a77      	ldr	r2, [pc, #476]	; (800da04 <Draw_Pop+0x224>)
 800d828:	6013      	str	r3, [r2, #0]
		R6 = R6 - 12;
 800d82a:	4b77      	ldr	r3, [pc, #476]	; (800da08 <Draw_Pop+0x228>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	3b0c      	subs	r3, #12
 800d830:	4a75      	ldr	r2, [pc, #468]	; (800da08 <Draw_Pop+0x228>)
 800d832:	6013      	str	r3, [r2, #0]
		R7 = 0X80008;
 800d834:	4b72      	ldr	r3, [pc, #456]	; (800da00 <Draw_Pop+0x220>)
 800d836:	f04f 1208 	mov.w	r2, #524296	; 0x80008
 800d83a:	601a      	str	r2, [r3, #0]
	}

	R3 = R11 + 1;
 800d83c:	4b73      	ldr	r3, [pc, #460]	; (800da0c <Draw_Pop+0x22c>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	3301      	adds	r3, #1
 800d842:	4a73      	ldr	r2, [pc, #460]	; (800da10 <Draw_Pop+0x230>)
 800d844:	6013      	str	r3, [r2, #0]
	if( R2 == R3 )
 800d846:	4b73      	ldr	r3, [pc, #460]	; (800da14 <Draw_Pop+0x234>)
 800d848:	681a      	ldr	r2, [r3, #0]
 800d84a:	4b71      	ldr	r3, [pc, #452]	; (800da10 <Draw_Pop+0x230>)
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	429a      	cmp	r2, r3
 800d850:	d10d      	bne.n	800d86e <Draw_Pop+0x8e>
	{
		R5 = R5 +4;
 800d852:	4b6c      	ldr	r3, [pc, #432]	; (800da04 <Draw_Pop+0x224>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	3304      	adds	r3, #4
 800d858:	4a6a      	ldr	r2, [pc, #424]	; (800da04 <Draw_Pop+0x224>)
 800d85a:	6013      	str	r3, [r2, #0]
		R6 = R6 - 8;
 800d85c:	4b6a      	ldr	r3, [pc, #424]	; (800da08 <Draw_Pop+0x228>)
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	3b08      	subs	r3, #8
 800d862:	4a69      	ldr	r2, [pc, #420]	; (800da08 <Draw_Pop+0x228>)
 800d864:	6013      	str	r3, [r2, #0]
		R7 = 0X40004;
 800d866:	4b66      	ldr	r3, [pc, #408]	; (800da00 <Draw_Pop+0x220>)
 800d868:	f04f 1204 	mov.w	r2, #262148	; 0x40004
 800d86c:	601a      	str	r2, [r3, #0]
	}

	R3 = R11 + 2;
 800d86e:	4b67      	ldr	r3, [pc, #412]	; (800da0c <Draw_Pop+0x22c>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	3302      	adds	r3, #2
 800d874:	4a66      	ldr	r2, [pc, #408]	; (800da10 <Draw_Pop+0x230>)
 800d876:	6013      	str	r3, [r2, #0]
	if( R2 == R3 )
 800d878:	4b66      	ldr	r3, [pc, #408]	; (800da14 <Draw_Pop+0x234>)
 800d87a:	681a      	ldr	r2, [r3, #0]
 800d87c:	4b64      	ldr	r3, [pc, #400]	; (800da10 <Draw_Pop+0x230>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	429a      	cmp	r2, r3
 800d882:	d10d      	bne.n	800d8a0 <Draw_Pop+0xc0>
	{
		R5 = R5 +2;
 800d884:	4b5f      	ldr	r3, [pc, #380]	; (800da04 <Draw_Pop+0x224>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	3302      	adds	r3, #2
 800d88a:	4a5e      	ldr	r2, [pc, #376]	; (800da04 <Draw_Pop+0x224>)
 800d88c:	6013      	str	r3, [r2, #0]
		R6 = R6 - 4;
 800d88e:	4b5e      	ldr	r3, [pc, #376]	; (800da08 <Draw_Pop+0x228>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	3b04      	subs	r3, #4
 800d894:	4a5c      	ldr	r2, [pc, #368]	; (800da08 <Draw_Pop+0x228>)
 800d896:	6013      	str	r3, [r2, #0]
		R7 = 0X20002;
 800d898:	4b59      	ldr	r3, [pc, #356]	; (800da00 <Draw_Pop+0x220>)
 800d89a:	f04f 1202 	mov.w	r2, #131074	; 0x20002
 800d89e:	601a      	str	r2, [r3, #0]
	}

	R3 = R12 -3;
 800d8a0:	4b5d      	ldr	r3, [pc, #372]	; (800da18 <Draw_Pop+0x238>)
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	3b03      	subs	r3, #3
 800d8a6:	4a5a      	ldr	r2, [pc, #360]	; (800da10 <Draw_Pop+0x230>)
 800d8a8:	6013      	str	r3, [r2, #0]
	if( R2 == R3 )
 800d8aa:	4b5a      	ldr	r3, [pc, #360]	; (800da14 <Draw_Pop+0x234>)
 800d8ac:	681a      	ldr	r2, [r3, #0]
 800d8ae:	4b58      	ldr	r3, [pc, #352]	; (800da10 <Draw_Pop+0x230>)
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	d10d      	bne.n	800d8d2 <Draw_Pop+0xf2>
	{
		R5 = R5 +2;
 800d8b6:	4b53      	ldr	r3, [pc, #332]	; (800da04 <Draw_Pop+0x224>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	3302      	adds	r3, #2
 800d8bc:	4a51      	ldr	r2, [pc, #324]	; (800da04 <Draw_Pop+0x224>)
 800d8be:	6013      	str	r3, [r2, #0]
		R6 = R6 - 4;
 800d8c0:	4b51      	ldr	r3, [pc, #324]	; (800da08 <Draw_Pop+0x228>)
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	3b04      	subs	r3, #4
 800d8c6:	4a50      	ldr	r2, [pc, #320]	; (800da08 <Draw_Pop+0x228>)
 800d8c8:	6013      	str	r3, [r2, #0]
		R7 = 0X20002;
 800d8ca:	4b4d      	ldr	r3, [pc, #308]	; (800da00 <Draw_Pop+0x220>)
 800d8cc:	f04f 1202 	mov.w	r2, #131074	; 0x20002
 800d8d0:	601a      	str	r2, [r3, #0]
	}

	R3 = R12 -2;
 800d8d2:	4b51      	ldr	r3, [pc, #324]	; (800da18 <Draw_Pop+0x238>)
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	3b02      	subs	r3, #2
 800d8d8:	4a4d      	ldr	r2, [pc, #308]	; (800da10 <Draw_Pop+0x230>)
 800d8da:	6013      	str	r3, [r2, #0]
	if( R2 == R3 )
 800d8dc:	4b4d      	ldr	r3, [pc, #308]	; (800da14 <Draw_Pop+0x234>)
 800d8de:	681a      	ldr	r2, [r3, #0]
 800d8e0:	4b4b      	ldr	r3, [pc, #300]	; (800da10 <Draw_Pop+0x230>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	d10d      	bne.n	800d904 <Draw_Pop+0x124>
	{
		R5 = R5 +4;
 800d8e8:	4b46      	ldr	r3, [pc, #280]	; (800da04 <Draw_Pop+0x224>)
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	3304      	adds	r3, #4
 800d8ee:	4a45      	ldr	r2, [pc, #276]	; (800da04 <Draw_Pop+0x224>)
 800d8f0:	6013      	str	r3, [r2, #0]
		R6 = R6 - 8;
 800d8f2:	4b45      	ldr	r3, [pc, #276]	; (800da08 <Draw_Pop+0x228>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	3b08      	subs	r3, #8
 800d8f8:	4a43      	ldr	r2, [pc, #268]	; (800da08 <Draw_Pop+0x228>)
 800d8fa:	6013      	str	r3, [r2, #0]
		R7 = 0X40004;
 800d8fc:	4b40      	ldr	r3, [pc, #256]	; (800da00 <Draw_Pop+0x220>)
 800d8fe:	f04f 1204 	mov.w	r2, #262148	; 0x40004
 800d902:	601a      	str	r2, [r3, #0]
	}

	R3 = R12 -1;
 800d904:	4b44      	ldr	r3, [pc, #272]	; (800da18 <Draw_Pop+0x238>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	3b01      	subs	r3, #1
 800d90a:	4a41      	ldr	r2, [pc, #260]	; (800da10 <Draw_Pop+0x230>)
 800d90c:	6013      	str	r3, [r2, #0]
	if( R2 == R3 )
 800d90e:	4b41      	ldr	r3, [pc, #260]	; (800da14 <Draw_Pop+0x234>)
 800d910:	681a      	ldr	r2, [r3, #0]
 800d912:	4b3f      	ldr	r3, [pc, #252]	; (800da10 <Draw_Pop+0x230>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	429a      	cmp	r2, r3
 800d918:	d10d      	bne.n	800d936 <Draw_Pop+0x156>
	{
		R5 = R5 +6;
 800d91a:	4b3a      	ldr	r3, [pc, #232]	; (800da04 <Draw_Pop+0x224>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	3306      	adds	r3, #6
 800d920:	4a38      	ldr	r2, [pc, #224]	; (800da04 <Draw_Pop+0x224>)
 800d922:	6013      	str	r3, [r2, #0]
		R6 = R6 - 12;
 800d924:	4b38      	ldr	r3, [pc, #224]	; (800da08 <Draw_Pop+0x228>)
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	3b0c      	subs	r3, #12
 800d92a:	4a37      	ldr	r2, [pc, #220]	; (800da08 <Draw_Pop+0x228>)
 800d92c:	6013      	str	r3, [r2, #0]
		R7 = 0X80008;
 800d92e:	4b34      	ldr	r3, [pc, #208]	; (800da00 <Draw_Pop+0x220>)
 800d930:	f04f 1208 	mov.w	r2, #524296	; 0x80008
 800d934:	601a      	str	r2, [r3, #0]
	}

//    ADD     R4,  SP, R5
	R4.A = (char*) &AA[204-R5/2];
 800d936:	4b33      	ldr	r3, [pc, #204]	; (800da04 <Draw_Pop+0x224>)
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	085b      	lsrs	r3, r3, #1
 800d93c:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d940:	005b      	lsls	r3, r3, #1
 800d942:	4a36      	ldr	r2, [pc, #216]	; (800da1c <Draw_Pop+0x23c>)
 800d944:	4413      	add	r3, r2
 800d946:	4a36      	ldr	r2, [pc, #216]	; (800da20 <Draw_Pop+0x240>)
 800d948:	6013      	str	r3, [r2, #0]
	R8 = pTab[39];
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	334e      	adds	r3, #78	; 0x4e
 800d94e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d952:	461a      	mov	r2, r3
 800d954:	4b33      	ldr	r3, [pc, #204]	; (800da24 <Draw_Pop+0x244>)
 800d956:	601a      	str	r2, [r3, #0]
	R9 = pTab[40];
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	3350      	adds	r3, #80	; 0x50
 800d95c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d960:	461a      	mov	r2, r3
 800d962:	4b31      	ldr	r3, [pc, #196]	; (800da28 <Draw_Pop+0x248>)
 800d964:	601a      	str	r2, [r3, #0]
	R3 =  *(unsigned short*) R10;
 800d966:	4b31      	ldr	r3, [pc, #196]	; (800da2c <Draw_Pop+0x24c>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	881b      	ldrh	r3, [r3, #0]
 800d96c:	461a      	mov	r2, r3
 800d96e:	4b28      	ldr	r3, [pc, #160]	; (800da10 <Draw_Pop+0x230>)
 800d970:	601a      	str	r2, [r3, #0]
	R10= R10+2;
 800d972:	4b2e      	ldr	r3, [pc, #184]	; (800da2c <Draw_Pop+0x24c>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	3302      	adds	r3, #2
 800d978:	4a2c      	ldr	r2, [pc, #176]	; (800da2c <Draw_Pop+0x24c>)
 800d97a:	6013      	str	r3, [r2, #0]

	if(R8 == 0)
 800d97c:	4b29      	ldr	r3, [pc, #164]	; (800da24 <Draw_Pop+0x244>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d100      	bne.n	800d986 <Draw_Pop+0x1a6>
	{
		goto Pop_Loop_Penetrate;
 800d984:	e054      	b.n	800da30 <Draw_Pop+0x250>
	}

Pop_Loop:
 800d986:	bf00      	nop
	if((R3 & R7) != 0)
 800d988:	4b21      	ldr	r3, [pc, #132]	; (800da10 <Draw_Pop+0x230>)
 800d98a:	681a      	ldr	r2, [r3, #0]
 800d98c:	4b1c      	ldr	r3, [pc, #112]	; (800da00 <Draw_Pop+0x220>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	4013      	ands	r3, r2
 800d992:	2b00      	cmp	r3, #0
 800d994:	d006      	beq.n	800d9a4 <Draw_Pop+0x1c4>
		R9 = *R4.A;
 800d996:	4b22      	ldr	r3, [pc, #136]	; (800da20 <Draw_Pop+0x240>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	781b      	ldrb	r3, [r3, #0]
 800d99c:	461a      	mov	r2, r3
 800d99e:	4b22      	ldr	r3, [pc, #136]	; (800da28 <Draw_Pop+0x248>)
 800d9a0:	601a      	str	r2, [r3, #0]
 800d9a2:	e005      	b.n	800d9b0 <Draw_Pop+0x1d0>
	else
		R8 = *R4.A;
 800d9a4:	4b1e      	ldr	r3, [pc, #120]	; (800da20 <Draw_Pop+0x240>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	781b      	ldrb	r3, [r3, #0]
 800d9aa:	461a      	mov	r2, r3
 800d9ac:	4b1d      	ldr	r3, [pc, #116]	; (800da24 <Draw_Pop+0x244>)
 800d9ae:	601a      	str	r2, [r3, #0]
	R4.A = R4.A + 1;
 800d9b0:	4b1b      	ldr	r3, [pc, #108]	; (800da20 <Draw_Pop+0x240>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	3301      	adds	r3, #1
 800d9b6:	4a1a      	ldr	r2, [pc, #104]	; (800da20 <Draw_Pop+0x240>)
 800d9b8:	6013      	str	r3, [r2, #0]
	R6 = R6 - 2;
 800d9ba:	4b13      	ldr	r3, [pc, #76]	; (800da08 <Draw_Pop+0x228>)
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	3b02      	subs	r3, #2
 800d9c0:	4a11      	ldr	r2, [pc, #68]	; (800da08 <Draw_Pop+0x228>)
 800d9c2:	6013      	str	r3, [r2, #0]
	if(R6 == 0 )
 800d9c4:	4b10      	ldr	r3, [pc, #64]	; (800da08 <Draw_Pop+0x228>)
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d066      	beq.n	800da9a <Draw_Pop+0x2ba>
		return;

	if((R7 & 0x80000000) != 0 )
 800d9cc:	4b0c      	ldr	r3, [pc, #48]	; (800da00 <Draw_Pop+0x220>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	da0f      	bge.n	800d9f4 <Draw_Pop+0x214>
	{
		R3 = *(unsigned short*) R10;
 800d9d4:	4b15      	ldr	r3, [pc, #84]	; (800da2c <Draw_Pop+0x24c>)
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	881b      	ldrh	r3, [r3, #0]
 800d9da:	461a      	mov	r2, r3
 800d9dc:	4b0c      	ldr	r3, [pc, #48]	; (800da10 <Draw_Pop+0x230>)
 800d9de:	601a      	str	r2, [r3, #0]
		R10= R10+2;
 800d9e0:	4b12      	ldr	r3, [pc, #72]	; (800da2c <Draw_Pop+0x24c>)
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	3302      	adds	r3, #2
 800d9e6:	4a11      	ldr	r2, [pc, #68]	; (800da2c <Draw_Pop+0x24c>)
 800d9e8:	6013      	str	r3, [r2, #0]
		R7 = 0x10001;
 800d9ea:	4b05      	ldr	r3, [pc, #20]	; (800da00 <Draw_Pop+0x220>)
 800d9ec:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800d9f0:	601a      	str	r2, [r3, #0]
 800d9f2:	e7c9      	b.n	800d988 <Draw_Pop+0x1a8>
	}
	else
		R7 = R7 << 1;
 800d9f4:	4b02      	ldr	r3, [pc, #8]	; (800da00 <Draw_Pop+0x220>)
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	005b      	lsls	r3, r3, #1
 800d9fa:	4a01      	ldr	r2, [pc, #4]	; (800da00 <Draw_Pop+0x220>)
 800d9fc:	6013      	str	r3, [r2, #0]
	goto Pop_Loop;
 800d9fe:	e7c3      	b.n	800d988 <Draw_Pop+0x1a8>
 800da00:	20000c08 	.word	0x20000c08
 800da04:	20000a44 	.word	0x20000a44
 800da08:	20000bf0 	.word	0x20000bf0
 800da0c:	20000bec 	.word	0x20000bec
 800da10:	20000a48 	.word	0x20000a48
 800da14:	20000c00 	.word	0x20000c00
 800da18:	20000bfc 	.word	0x20000bfc
 800da1c:	20000a50 	.word	0x20000a50
 800da20:	20000bf4 	.word	0x20000bf4
 800da24:	20000a40 	.word	0x20000a40
 800da28:	20000c04 	.word	0x20000c04
 800da2c:	20000c0c 	.word	0x20000c0c

Pop_Loop_Penetrate:
	if((R2 & R7) != 0)
 800da30:	4b1e      	ldr	r3, [pc, #120]	; (800daac <Draw_Pop+0x2cc>)
 800da32:	681a      	ldr	r2, [r3, #0]
 800da34:	4b1e      	ldr	r3, [pc, #120]	; (800dab0 <Draw_Pop+0x2d0>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	4013      	ands	r3, r2
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d005      	beq.n	800da4a <Draw_Pop+0x26a>
		R9 = *R4.A;
 800da3e:	4b1d      	ldr	r3, [pc, #116]	; (800dab4 <Draw_Pop+0x2d4>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	781b      	ldrb	r3, [r3, #0]
 800da44:	461a      	mov	r2, r3
 800da46:	4b1c      	ldr	r3, [pc, #112]	; (800dab8 <Draw_Pop+0x2d8>)
 800da48:	601a      	str	r2, [r3, #0]
	R4.A = R4.A + 1;
 800da4a:	4b1a      	ldr	r3, [pc, #104]	; (800dab4 <Draw_Pop+0x2d4>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	3301      	adds	r3, #1
 800da50:	4a18      	ldr	r2, [pc, #96]	; (800dab4 <Draw_Pop+0x2d4>)
 800da52:	6013      	str	r3, [r2, #0]
	R6 = R6 - 2;
 800da54:	4b19      	ldr	r3, [pc, #100]	; (800dabc <Draw_Pop+0x2dc>)
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	3b02      	subs	r3, #2
 800da5a:	4a18      	ldr	r2, [pc, #96]	; (800dabc <Draw_Pop+0x2dc>)
 800da5c:	6013      	str	r3, [r2, #0]
	if(R6 == 0 )
 800da5e:	4b17      	ldr	r3, [pc, #92]	; (800dabc <Draw_Pop+0x2dc>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d01b      	beq.n	800da9e <Draw_Pop+0x2be>
		return;

	if((R7 & 0x80000000) != 0 )
 800da66:	4b12      	ldr	r3, [pc, #72]	; (800dab0 <Draw_Pop+0x2d0>)
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	da0f      	bge.n	800da8e <Draw_Pop+0x2ae>
	{
		R3 = *(unsigned short*) R10;
 800da6e:	4b14      	ldr	r3, [pc, #80]	; (800dac0 <Draw_Pop+0x2e0>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	881b      	ldrh	r3, [r3, #0]
 800da74:	461a      	mov	r2, r3
 800da76:	4b13      	ldr	r3, [pc, #76]	; (800dac4 <Draw_Pop+0x2e4>)
 800da78:	601a      	str	r2, [r3, #0]
		R10= R10+2;
 800da7a:	4b11      	ldr	r3, [pc, #68]	; (800dac0 <Draw_Pop+0x2e0>)
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	3302      	adds	r3, #2
 800da80:	4a0f      	ldr	r2, [pc, #60]	; (800dac0 <Draw_Pop+0x2e0>)
 800da82:	6013      	str	r3, [r2, #0]
		R7 = 0x10001;
 800da84:	4b0a      	ldr	r3, [pc, #40]	; (800dab0 <Draw_Pop+0x2d0>)
 800da86:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800da8a:	601a      	str	r2, [r3, #0]
 800da8c:	e7d0      	b.n	800da30 <Draw_Pop+0x250>
		}
	else
		R7 = R7 << 1;
 800da8e:	4b08      	ldr	r3, [pc, #32]	; (800dab0 <Draw_Pop+0x2d0>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	005b      	lsls	r3, r3, #1
 800da94:	4a06      	ldr	r2, [pc, #24]	; (800dab0 <Draw_Pop+0x2d0>)
 800da96:	6013      	str	r3, [r2, #0]
	goto Pop_Loop_Penetrate;
 800da98:	e7ca      	b.n	800da30 <Draw_Pop+0x250>
		return;
 800da9a:	bf00      	nop
 800da9c:	e000      	b.n	800daa0 <Draw_Pop+0x2c0>
		return;
 800da9e:	bf00      	nop

}
 800daa0:	370c      	adds	r7, #12
 800daa2:	46bd      	mov	sp, r7
 800daa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa8:	4770      	bx	lr
 800daaa:	bf00      	nop
 800daac:	20000c00 	.word	0x20000c00
 800dab0:	20000c08 	.word	0x20000c08
 800dab4:	20000bf4 	.word	0x20000bf4
 800dab8:	20000c04 	.word	0x20000c04
 800dabc:	20000bf0 	.word	0x20000bf0
 800dac0:	20000c0c 	.word	0x20000c0c
 800dac4:	20000a48 	.word	0x20000a48

0800dac8 <DrawWindow>:

// R0:pDat, R1:pTab, R2:Col, R3:Var, R4:pCol, R5:Cnt, R6:Tmp,
// R0:pBuf, R1:pTab, R2:Col, R3:LCD, R4:Ctrl, R5:WR,  R6:Tmp, R7:Cnt, R8:RS
void DrawWindow(char* pBuf, short* pTab)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b082      	sub	sp, #8
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
 800dad0:	6039      	str	r1, [r7, #0]
	R0 = (unsigned)&pBuf[0];
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	4a9b      	ldr	r2, [pc, #620]	; (800dd44 <DrawWindow+0x27c>)
 800dad6:	6013      	str	r3, [r2, #0]
	R2 = 0;
 800dad8:	4b9b      	ldr	r3, [pc, #620]	; (800dd48 <DrawWindow+0x280>)
 800dada:	2200      	movs	r2, #0
 800dadc:	601a      	str	r2, [r3, #0]
	R10 = &pBuf[900];
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	f503 7361 	add.w	r3, r3, #900	; 0x384
 800dae4:	4a99      	ldr	r2, [pc, #612]	; (800dd4c <DrawWindow+0x284>)
 800dae6:	6013      	str	r3, [r2, #0]
	R11 = pTab[34];
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	3344      	adds	r3, #68	; 0x44
 800daec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800daf0:	461a      	mov	r2, r3
 800daf2:	4b97      	ldr	r3, [pc, #604]	; (800dd50 <DrawWindow+0x288>)
 800daf4:	601a      	str	r2, [r3, #0]
	R12 = pTab[35];
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	3346      	adds	r3, #70	; 0x46
 800dafa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dafe:	461a      	mov	r2, r3
 800db00:	4b94      	ldr	r3, [pc, #592]	; (800dd54 <DrawWindow+0x28c>)
 800db02:	601a      	str	r2, [r3, #0]
	R12 = R11 + R12;
 800db04:	4b92      	ldr	r3, [pc, #584]	; (800dd50 <DrawWindow+0x288>)
 800db06:	681a      	ldr	r2, [r3, #0]
 800db08:	4b92      	ldr	r3, [pc, #584]	; (800dd54 <DrawWindow+0x28c>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	4413      	add	r3, r2
 800db0e:	4a91      	ldr	r2, [pc, #580]	; (800dd54 <DrawWindow+0x28c>)
 800db10:	6013      	str	r3, [r2, #0]

Draw_Loop:
	if (R2 == 0)
 800db12:	4b8d      	ldr	r3, [pc, #564]	; (800dd48 <DrawWindow+0x280>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d102      	bne.n	800db20 <DrawWindow+0x58>
	{
		Buld_0();
 800db1a:	f7ff f93b 	bl	800cd94 <Buld_0>
		goto Draw_Wave;
 800db1e:	e064      	b.n	800dbea <DrawWindow+0x122>
	}

	if (R2 == 302)
 800db20:	4b89      	ldr	r3, [pc, #548]	; (800dd48 <DrawWindow+0x280>)
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800db28:	d102      	bne.n	800db30 <DrawWindow+0x68>
	{
		Buld_0();
 800db2a:	f7ff f933 	bl	800cd94 <Buld_0>
		goto Draw_Wave;
 800db2e:	e05c      	b.n	800dbea <DrawWindow+0x122>
	}

	if (R2 == 1)
 800db30:	4b85      	ldr	r3, [pc, #532]	; (800dd48 <DrawWindow+0x280>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	2b01      	cmp	r3, #1
 800db36:	d102      	bne.n	800db3e <DrawWindow+0x76>
	{
		Buld_1();
 800db38:	f7ff f938 	bl	800cdac <Buld_1>
		goto Draw_Wave;
 800db3c:	e055      	b.n	800dbea <DrawWindow+0x122>
	}
	R3 = 301;
 800db3e:	4b86      	ldr	r3, [pc, #536]	; (800dd58 <DrawWindow+0x290>)
 800db40:	f240 122d 	movw	r2, #301	; 0x12d
 800db44:	601a      	str	r2, [r3, #0]

	if (R2 == R3)
 800db46:	4b80      	ldr	r3, [pc, #512]	; (800dd48 <DrawWindow+0x280>)
 800db48:	681a      	ldr	r2, [r3, #0]
 800db4a:	4b83      	ldr	r3, [pc, #524]	; (800dd58 <DrawWindow+0x290>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	429a      	cmp	r2, r3
 800db50:	d102      	bne.n	800db58 <DrawWindow+0x90>
	{
		Buld_1();
 800db52:	f7ff f92b 	bl	800cdac <Buld_1>
		goto Draw_Wave;
 800db56:	e048      	b.n	800dbea <DrawWindow+0x122>
	}

	R3 = R2 - 1;
 800db58:	4b7b      	ldr	r3, [pc, #492]	; (800dd48 <DrawWindow+0x280>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	3b01      	subs	r3, #1
 800db5e:	4a7e      	ldr	r2, [pc, #504]	; (800dd58 <DrawWindow+0x290>)
 800db60:	6013      	str	r3, [r2, #0]
	R6 = 25;
 800db62:	4b7e      	ldr	r3, [pc, #504]	; (800dd5c <DrawWindow+0x294>)
 800db64:	2219      	movs	r2, #25
 800db66:	601a      	str	r2, [r3, #0]
	R5 = R3/R6;
 800db68:	4b7b      	ldr	r3, [pc, #492]	; (800dd58 <DrawWindow+0x290>)
 800db6a:	681a      	ldr	r2, [r3, #0]
 800db6c:	4b7b      	ldr	r3, [pc, #492]	; (800dd5c <DrawWindow+0x294>)
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	fbb2 f3f3 	udiv	r3, r2, r3
 800db74:	4a7a      	ldr	r2, [pc, #488]	; (800dd60 <DrawWindow+0x298>)
 800db76:	6013      	str	r3, [r2, #0]
	R5 = R5*R6;
 800db78:	4b79      	ldr	r3, [pc, #484]	; (800dd60 <DrawWindow+0x298>)
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	4a77      	ldr	r2, [pc, #476]	; (800dd5c <DrawWindow+0x294>)
 800db7e:	6812      	ldr	r2, [r2, #0]
 800db80:	fb02 f303 	mul.w	r3, r2, r3
 800db84:	4a76      	ldr	r2, [pc, #472]	; (800dd60 <DrawWindow+0x298>)
 800db86:	6013      	str	r3, [r2, #0]
	R5 = R3 - R5;
 800db88:	4b73      	ldr	r3, [pc, #460]	; (800dd58 <DrawWindow+0x290>)
 800db8a:	681a      	ldr	r2, [r3, #0]
 800db8c:	4b74      	ldr	r3, [pc, #464]	; (800dd60 <DrawWindow+0x298>)
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	1ad3      	subs	r3, r2, r3
 800db92:	4a73      	ldr	r2, [pc, #460]	; (800dd60 <DrawWindow+0x298>)
 800db94:	6013      	str	r3, [r2, #0]

	if (R5 == 0)
 800db96:	4b72      	ldr	r3, [pc, #456]	; (800dd60 <DrawWindow+0x298>)
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d102      	bne.n	800dba4 <DrawWindow+0xdc>
	{
		Buld_4();
 800db9e:	f7ff f975 	bl	800ce8c <Buld_4>
		goto Draw_Wave;
 800dba2:	e022      	b.n	800dbea <DrawWindow+0x122>
	}

	R6 = 5;
 800dba4:	4b6d      	ldr	r3, [pc, #436]	; (800dd5c <DrawWindow+0x294>)
 800dba6:	2205      	movs	r2, #5
 800dba8:	601a      	str	r2, [r3, #0]
	R5 = R3/R6;
 800dbaa:	4b6b      	ldr	r3, [pc, #428]	; (800dd58 <DrawWindow+0x290>)
 800dbac:	681a      	ldr	r2, [r3, #0]
 800dbae:	4b6b      	ldr	r3, [pc, #428]	; (800dd5c <DrawWindow+0x294>)
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbb6:	4a6a      	ldr	r2, [pc, #424]	; (800dd60 <DrawWindow+0x298>)
 800dbb8:	6013      	str	r3, [r2, #0]
	R5 = R5*R6;
 800dbba:	4b69      	ldr	r3, [pc, #420]	; (800dd60 <DrawWindow+0x298>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	4a67      	ldr	r2, [pc, #412]	; (800dd5c <DrawWindow+0x294>)
 800dbc0:	6812      	ldr	r2, [r2, #0]
 800dbc2:	fb02 f303 	mul.w	r3, r2, r3
 800dbc6:	4a66      	ldr	r2, [pc, #408]	; (800dd60 <DrawWindow+0x298>)
 800dbc8:	6013      	str	r3, [r2, #0]
	R5 = R3 - R5;
 800dbca:	4b63      	ldr	r3, [pc, #396]	; (800dd58 <DrawWindow+0x290>)
 800dbcc:	681a      	ldr	r2, [r3, #0]
 800dbce:	4b64      	ldr	r3, [pc, #400]	; (800dd60 <DrawWindow+0x298>)
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	1ad3      	subs	r3, r2, r3
 800dbd4:	4a62      	ldr	r2, [pc, #392]	; (800dd60 <DrawWindow+0x298>)
 800dbd6:	6013      	str	r3, [r2, #0]

	if (R5 == 0)
 800dbd8:	4b61      	ldr	r3, [pc, #388]	; (800dd60 <DrawWindow+0x298>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d102      	bne.n	800dbe6 <DrawWindow+0x11e>
	{
		Buld_3();
 800dbe0:	f7ff f92e 	bl	800ce40 <Buld_3>
		goto Draw_Wave;
 800dbe4:	e001      	b.n	800dbea <DrawWindow+0x122>
	}
	Buld_2();
 800dbe6:	f7ff f909 	bl	800cdfc <Buld_2>

Draw_Wave:
	if( (R2<3) || (R2 >= 300) ) //3 to 299
 800dbea:	4b57      	ldr	r3, [pc, #348]	; (800dd48 <DrawWindow+0x280>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	2b02      	cmp	r3, #2
 800dbf0:	d96c      	bls.n	800dccc <DrawWindow+0x204>
 800dbf2:	4b55      	ldr	r3, [pc, #340]	; (800dd48 <DrawWindow+0x280>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800dbfa:	d267      	bcs.n	800dccc <DrawWindow+0x204>
	{
		goto Horozontal;
	}
	R3 = pTab[3]; //Ch_3
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	3306      	adds	r3, #6
 800dc00:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc04:	461a      	mov	r2, r3
 800dc06:	4b54      	ldr	r3, [pc, #336]	; (800dd58 <DrawWindow+0x290>)
 800dc08:	601a      	str	r2, [r3, #0]
	if((R3 & 4) == 0)
 800dc0a:	4b53      	ldr	r3, [pc, #332]	; (800dd58 <DrawWindow+0x290>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	f003 0304 	and.w	r3, r3, #4
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d10f      	bne.n	800dc36 <DrawWindow+0x16e>
	{
		R3 = 46;
 800dc16:	4b50      	ldr	r3, [pc, #320]	; (800dd58 <DrawWindow+0x290>)
 800dc18:	222e      	movs	r2, #46	; 0x2e
 800dc1a:	601a      	str	r2, [r3, #0]
		R4.I = pTab[13];
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	331a      	adds	r3, #26
 800dc20:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc24:	461a      	mov	r2, r3
 800dc26:	4b4f      	ldr	r3, [pc, #316]	; (800dd64 <DrawWindow+0x29c>)
 800dc28:	601a      	str	r2, [r3, #0]
		R8 = 8;
 800dc2a:	4b4f      	ldr	r3, [pc, #316]	; (800dd68 <DrawWindow+0x2a0>)
 800dc2c:	2208      	movs	r2, #8
 800dc2e:	601a      	str	r2, [r3, #0]
		Draw_Digit_Analog(1);
 800dc30:	2001      	movs	r0, #1
 800dc32:	f7ff f951 	bl	800ced8 <Draw_Digit_Analog>
	}

	R3 =pTab[2]; //Ch_2
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	3304      	adds	r3, #4
 800dc3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc3e:	461a      	mov	r2, r3
 800dc40:	4b45      	ldr	r3, [pc, #276]	; (800dd58 <DrawWindow+0x290>)
 800dc42:	601a      	str	r2, [r3, #0]
	if((R3 & 4) == 0)
 800dc44:	4b44      	ldr	r3, [pc, #272]	; (800dd58 <DrawWindow+0x290>)
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	f003 0304 	and.w	r3, r3, #4
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d10f      	bne.n	800dc70 <DrawWindow+0x1a8>
	{
		R3 = 44;
 800dc50:	4b41      	ldr	r3, [pc, #260]	; (800dd58 <DrawWindow+0x290>)
 800dc52:	222c      	movs	r2, #44	; 0x2c
 800dc54:	601a      	str	r2, [r3, #0]
		R4.I = pTab[12];
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	3318      	adds	r3, #24
 800dc5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc5e:	461a      	mov	r2, r3
 800dc60:	4b40      	ldr	r3, [pc, #256]	; (800dd64 <DrawWindow+0x29c>)
 800dc62:	601a      	str	r2, [r3, #0]
		R8 = 4;
 800dc64:	4b40      	ldr	r3, [pc, #256]	; (800dd68 <DrawWindow+0x2a0>)
 800dc66:	2204      	movs	r2, #4
 800dc68:	601a      	str	r2, [r3, #0]
		Draw_Digit_Analog(1);
 800dc6a:	2001      	movs	r0, #1
 800dc6c:	f7ff f934 	bl	800ced8 <Draw_Digit_Analog>
	}

	R3 =pTab[1]; //Ch_1
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	3302      	adds	r3, #2
 800dc74:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc78:	461a      	mov	r2, r3
 800dc7a:	4b37      	ldr	r3, [pc, #220]	; (800dd58 <DrawWindow+0x290>)
 800dc7c:	601a      	str	r2, [r3, #0]
	if((R3 & 4) == 0)
 800dc7e:	4b36      	ldr	r3, [pc, #216]	; (800dd58 <DrawWindow+0x290>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	f003 0304 	and.w	r3, r3, #4
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d10a      	bne.n	800dca0 <DrawWindow+0x1d8>
	{
		R3 = 42;
 800dc8a:	4b33      	ldr	r3, [pc, #204]	; (800dd58 <DrawWindow+0x290>)
 800dc8c:	222a      	movs	r2, #42	; 0x2a
 800dc8e:	601a      	str	r2, [r3, #0]
		R4.A = &pBuf[300];
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800dc96:	4a33      	ldr	r2, [pc, #204]	; (800dd64 <DrawWindow+0x29c>)
 800dc98:	6013      	str	r3, [r2, #0]
		Draw_Digit_Analog(0);
 800dc9a:	2000      	movs	r0, #0
 800dc9c:	f7ff f91c 	bl	800ced8 <Draw_Digit_Analog>
	}

	R3 =pTab[0]; //Ch_0
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dca6:	461a      	mov	r2, r3
 800dca8:	4b2b      	ldr	r3, [pc, #172]	; (800dd58 <DrawWindow+0x290>)
 800dcaa:	601a      	str	r2, [r3, #0]
	if((R3 & 4) == 0)
 800dcac:	4b2a      	ldr	r3, [pc, #168]	; (800dd58 <DrawWindow+0x290>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	f003 0304 	and.w	r3, r3, #4
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d10b      	bne.n	800dcd0 <DrawWindow+0x208>
	{
		R3 = 40;
 800dcb8:	4b27      	ldr	r3, [pc, #156]	; (800dd58 <DrawWindow+0x290>)
 800dcba:	2228      	movs	r2, #40	; 0x28
 800dcbc:	601a      	str	r2, [r3, #0]
		R4.A = pBuf;
 800dcbe:	4a29      	ldr	r2, [pc, #164]	; (800dd64 <DrawWindow+0x29c>)
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	6013      	str	r3, [r2, #0]
		Draw_Digit_Analog(0);
 800dcc4:	2000      	movs	r0, #0
 800dcc6:	f7ff f907 	bl	800ced8 <Draw_Digit_Analog>
 800dcca:	e002      	b.n	800dcd2 <DrawWindow+0x20a>
		goto Horozontal;
 800dccc:	bf00      	nop
 800dcce:	e000      	b.n	800dcd2 <DrawWindow+0x20a>
	}

Horozontal:
 800dcd0:	bf00      	nop
	if(R2 == 0)
 800dcd2:	4b1d      	ldr	r3, [pc, #116]	; (800dd48 <DrawWindow+0x280>)
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d103      	bne.n	800dce2 <DrawWindow+0x21a>
	{
		Cursor_0(pTab);
 800dcda:	6838      	ldr	r0, [r7, #0]
 800dcdc:	f7ff fa14 	bl	800d108 <Cursor_0>
		goto Vertical;
 800dce0:	e047      	b.n	800dd72 <DrawWindow+0x2aa>
	}

	if(R2 == 302)
 800dce2:	4b19      	ldr	r3, [pc, #100]	; (800dd48 <DrawWindow+0x280>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800dcea:	d103      	bne.n	800dcf4 <DrawWindow+0x22c>
	{
		Cursor_0(pTab);
 800dcec:	6838      	ldr	r0, [r7, #0]
 800dcee:	f7ff fa0b 	bl	800d108 <Cursor_0>
		goto Vertical;
 800dcf2:	e03e      	b.n	800dd72 <DrawWindow+0x2aa>
	}

	if(R2 == 1)
 800dcf4:	4b14      	ldr	r3, [pc, #80]	; (800dd48 <DrawWindow+0x280>)
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	2b01      	cmp	r3, #1
 800dcfa:	d103      	bne.n	800dd04 <DrawWindow+0x23c>
	{
		Cursor_1(pTab);
 800dcfc:	6838      	ldr	r0, [r7, #0]
 800dcfe:	f7ff fa8d 	bl	800d21c <Cursor_1>
		goto Vertical;
 800dd02:	e036      	b.n	800dd72 <DrawWindow+0x2aa>
	}
	R5 = 301;
 800dd04:	4b16      	ldr	r3, [pc, #88]	; (800dd60 <DrawWindow+0x298>)
 800dd06:	f240 122d 	movw	r2, #301	; 0x12d
 800dd0a:	601a      	str	r2, [r3, #0]
	if(R2 == R5)
 800dd0c:	4b0e      	ldr	r3, [pc, #56]	; (800dd48 <DrawWindow+0x280>)
 800dd0e:	681a      	ldr	r2, [r3, #0]
 800dd10:	4b13      	ldr	r3, [pc, #76]	; (800dd60 <DrawWindow+0x298>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	429a      	cmp	r2, r3
 800dd16:	d103      	bne.n	800dd20 <DrawWindow+0x258>
	{
		Cursor_1(pTab);
 800dd18:	6838      	ldr	r0, [r7, #0]
 800dd1a:	f7ff fa7f 	bl	800d21c <Cursor_1>
		goto Vertical;
 800dd1e:	e028      	b.n	800dd72 <DrawWindow+0x2aa>
	}

	if(R2 == 2)
 800dd20:	4b09      	ldr	r3, [pc, #36]	; (800dd48 <DrawWindow+0x280>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	2b02      	cmp	r3, #2
 800dd26:	d103      	bne.n	800dd30 <DrawWindow+0x268>
	{
		Cursor_2(pTab);
 800dd28:	6838      	ldr	r0, [r7, #0]
 800dd2a:	f7ff faeb 	bl	800d304 <Cursor_2>
		goto Vertical;
 800dd2e:	e020      	b.n	800dd72 <DrawWindow+0x2aa>
	}
	if(R2 == 300)
 800dd30:	4b05      	ldr	r3, [pc, #20]	; (800dd48 <DrawWindow+0x280>)
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800dd38:	d118      	bne.n	800dd6c <DrawWindow+0x2a4>
	{
		Cursor_2(pTab);
 800dd3a:	6838      	ldr	r0, [r7, #0]
 800dd3c:	f7ff fae2 	bl	800d304 <Cursor_2>
		goto Vertical;
 800dd40:	e017      	b.n	800dd72 <DrawWindow+0x2aa>
 800dd42:	bf00      	nop
 800dd44:	20000a4c 	.word	0x20000a4c
 800dd48:	20000c00 	.word	0x20000c00
 800dd4c:	20000c0c 	.word	0x20000c0c
 800dd50:	20000bec 	.word	0x20000bec
 800dd54:	20000bfc 	.word	0x20000bfc
 800dd58:	20000a48 	.word	0x20000a48
 800dd5c:	20000bf0 	.word	0x20000bf0
 800dd60:	20000a44 	.word	0x20000a44
 800dd64:	20000bf4 	.word	0x20000bf4
 800dd68:	20000a40 	.word	0x20000a40
	}
	Cursor_3(pTab);
 800dd6c:	6838      	ldr	r0, [r7, #0]
 800dd6e:	f7ff fb1d 	bl	800d3ac <Cursor_3>

Vertical:
	Cursor_4(pTab);
 800dd72:	6838      	ldr	r0, [r7, #0]
 800dd74:	f7ff fb82 	bl	800d47c <Cursor_4>

	R3 = pTab[38];
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	334c      	adds	r3, #76	; 0x4c
 800dd7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd80:	461a      	mov	r2, r3
 800dd82:	4b17      	ldr	r3, [pc, #92]	; (800dde0 <DrawWindow+0x318>)
 800dd84:	601a      	str	r2, [r3, #0]
	if( (R3&1) !=1 )
 800dd86:	4b16      	ldr	r3, [pc, #88]	; (800dde0 <DrawWindow+0x318>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	f003 0301 	and.w	r3, r3, #1
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d00f      	beq.n	800ddb2 <DrawWindow+0x2ea>
	{
		goto Send;
	}

	if(R2 < R11)
 800dd92:	4b14      	ldr	r3, [pc, #80]	; (800dde4 <DrawWindow+0x31c>)
 800dd94:	681a      	ldr	r2, [r3, #0]
 800dd96:	4b14      	ldr	r3, [pc, #80]	; (800dde8 <DrawWindow+0x320>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	429a      	cmp	r2, r3
 800dd9c:	d30b      	bcc.n	800ddb6 <DrawWindow+0x2ee>
	{
		goto Send;
	}

	if(R2 < R12)
 800dd9e:	4b11      	ldr	r3, [pc, #68]	; (800dde4 <DrawWindow+0x31c>)
 800dda0:	681a      	ldr	r2, [r3, #0]
 800dda2:	4b12      	ldr	r3, [pc, #72]	; (800ddec <DrawWindow+0x324>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	429a      	cmp	r2, r3
 800dda8:	d207      	bcs.n	800ddba <DrawWindow+0x2f2>
	{
		Draw_Pop(pTab);
 800ddaa:	6838      	ldr	r0, [r7, #0]
 800ddac:	f7ff fd18 	bl	800d7e0 <Draw_Pop>
 800ddb0:	e004      	b.n	800ddbc <DrawWindow+0x2f4>
		goto Send;
 800ddb2:	bf00      	nop
 800ddb4:	e002      	b.n	800ddbc <DrawWindow+0x2f4>
		goto Send;
 800ddb6:	bf00      	nop
 800ddb8:	e000      	b.n	800ddbc <DrawWindow+0x2f4>
	}

Send:
 800ddba:	bf00      	nop
	Send_LCD(pTab);
 800ddbc:	6838      	ldr	r0, [r7, #0]
 800ddbe:	f7ff fcdd 	bl	800d77c <Send_LCD>

	if( R2 != 302 )
 800ddc2:	4b08      	ldr	r3, [pc, #32]	; (800dde4 <DrawWindow+0x31c>)
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800ddca:	d005      	beq.n	800ddd8 <DrawWindow+0x310>
	{
		R2 =R2 +1;
 800ddcc:	4b05      	ldr	r3, [pc, #20]	; (800dde4 <DrawWindow+0x31c>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	3301      	adds	r3, #1
 800ddd2:	4a04      	ldr	r2, [pc, #16]	; (800dde4 <DrawWindow+0x31c>)
 800ddd4:	6013      	str	r3, [r2, #0]
		goto Draw_Loop;
 800ddd6:	e69c      	b.n	800db12 <DrawWindow+0x4a>
	}

	return;
 800ddd8:	bf00      	nop
}
 800ddda:	3708      	adds	r7, #8
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}
 800dde0:	20000a48 	.word	0x20000a48
 800dde4:	20000c00 	.word	0x20000c00
 800dde8:	20000bec 	.word	0x20000bec
 800ddec:	20000bfc 	.word	0x20000bfc

0800ddf0 <DispChar8x14>:
//+======+======+======+======+======+======+======+======+======+======+======+

char  WaveBuf[TRACK1_SIZE + TRACK2_SIZE + TRACK23_SIZE + POP_SIZE]; // ��ʾ������

void DispChar8x14(char Mode, char Code)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b084      	sub	sp, #16
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	460a      	mov	r2, r1
 800ddfa:	71fb      	strb	r3, [r7, #7]
 800ddfc:	4613      	mov	r3, r2
 800ddfe:	71bb      	strb	r3, [r7, #6]
  short i, j, k;

  for(i=0; i<8; ++i)
 800de00:	2300      	movs	r3, #0
 800de02:	81fb      	strh	r3, [r7, #14]
 800de04:	e06d      	b.n	800dee2 <DispChar8x14+0xf2>
  {
    if(Mode & SYMB)
 800de06:	79fb      	ldrb	r3, [r7, #7]
 800de08:	f003 0310 	and.w	r3, r3, #16
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d00a      	beq.n	800de26 <DispChar8x14+0x36>
    	k = SYMB8x14[(Code - '@')*8 + i];
 800de10:	79bb      	ldrb	r3, [r7, #6]
 800de12:	3b40      	subs	r3, #64	; 0x40
 800de14:	00da      	lsls	r2, r3, #3
 800de16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800de1a:	4413      	add	r3, r2
 800de1c:	4a35      	ldr	r2, [pc, #212]	; (800def4 <DispChar8x14+0x104>)
 800de1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de22:	817b      	strh	r3, [r7, #10]
 800de24:	e005      	b.n	800de32 <DispChar8x14+0x42>
    else
        k = CHAR8x14[i];
 800de26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800de2a:	4a33      	ldr	r2, [pc, #204]	; (800def8 <DispChar8x14+0x108>)
 800de2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de30:	817b      	strh	r3, [r7, #10]

    if(Mode & VOID)
 800de32:	79fb      	ldrb	r3, [r7, #7]
 800de34:	f003 0320 	and.w	r3, r3, #32
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d00c      	beq.n	800de56 <DispChar8x14+0x66>
    	k &= (i%2)? 0xAAAA : 0x5555;
 800de3c:	89fb      	ldrh	r3, [r7, #14]
 800de3e:	f003 0301 	and.w	r3, r3, #1
 800de42:	b29b      	uxth	r3, r3
 800de44:	2b00      	cmp	r3, #0
 800de46:	d001      	beq.n	800de4c <DispChar8x14+0x5c>
 800de48:	4a2c      	ldr	r2, [pc, #176]	; (800defc <DispChar8x14+0x10c>)
 800de4a:	e001      	b.n	800de50 <DispChar8x14+0x60>
 800de4c:	f245 5255 	movw	r2, #21845	; 0x5555
 800de50:	897b      	ldrh	r3, [r7, #10]
 800de52:	4013      	ands	r3, r2
 800de54:	817b      	strh	r3, [r7, #10]
    LCD_Set_Posi(Sx, Sy);
 800de56:	4b2a      	ldr	r3, [pc, #168]	; (800df00 <DispChar8x14+0x110>)
 800de58:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de5c:	4a29      	ldr	r2, [pc, #164]	; (800df04 <DispChar8x14+0x114>)
 800de5e:	f9b2 2000 	ldrsh.w	r2, [r2]
 800de62:	4611      	mov	r1, r2
 800de64:	4618      	mov	r0, r3
 800de66:	f004 fb5b 	bl	8012520 <LCD_Set_Posi>
    for(j=0; j<14; ++j)
 800de6a:	2300      	movs	r3, #0
 800de6c:	81bb      	strh	r3, [r7, #12]
 800de6e:	e027      	b.n	800dec0 <DispChar8x14+0xd0>
    {
      if(k & 4)
 800de70:	897b      	ldrh	r3, [r7, #10]
 800de72:	f003 0304 	and.w	r3, r3, #4
 800de76:	2b00      	cmp	r3, #0
 800de78:	d00d      	beq.n	800de96 <DispChar8x14+0xa6>
    	  LCD_Set_Pixel((Mode & INV)? Background : Foreground);
 800de7a:	79fb      	ldrb	r3, [r7, #7]
 800de7c:	f003 0301 	and.w	r3, r3, #1
 800de80:	2b00      	cmp	r3, #0
 800de82:	d002      	beq.n	800de8a <DispChar8x14+0x9a>
 800de84:	4b20      	ldr	r3, [pc, #128]	; (800df08 <DispChar8x14+0x118>)
 800de86:	881b      	ldrh	r3, [r3, #0]
 800de88:	e001      	b.n	800de8e <DispChar8x14+0x9e>
 800de8a:	4b20      	ldr	r3, [pc, #128]	; (800df0c <DispChar8x14+0x11c>)
 800de8c:	881b      	ldrh	r3, [r3, #0]
 800de8e:	4618      	mov	r0, r3
 800de90:	f004 fb94 	bl	80125bc <LCD_Set_Pixel>
 800de94:	e00c      	b.n	800deb0 <DispChar8x14+0xc0>
      else
    	  LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800de96:	79fb      	ldrb	r3, [r7, #7]
 800de98:	f003 0301 	and.w	r3, r3, #1
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d002      	beq.n	800dea6 <DispChar8x14+0xb6>
 800dea0:	4b1a      	ldr	r3, [pc, #104]	; (800df0c <DispChar8x14+0x11c>)
 800dea2:	881b      	ldrh	r3, [r3, #0]
 800dea4:	e001      	b.n	800deaa <DispChar8x14+0xba>
 800dea6:	4b18      	ldr	r3, [pc, #96]	; (800df08 <DispChar8x14+0x118>)
 800dea8:	881b      	ldrh	r3, [r3, #0]
 800deaa:	4618      	mov	r0, r3
 800deac:	f004 fb86 	bl	80125bc <LCD_Set_Pixel>
      k >>= 1;
 800deb0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800deb4:	105b      	asrs	r3, r3, #1
 800deb6:	817b      	strh	r3, [r7, #10]
    for(j=0; j<14; ++j)
 800deb8:	89bb      	ldrh	r3, [r7, #12]
 800deba:	3301      	adds	r3, #1
 800debc:	b29b      	uxth	r3, r3
 800debe:	81bb      	strh	r3, [r7, #12]
 800dec0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dec4:	2b0d      	cmp	r3, #13
 800dec6:	ddd3      	ble.n	800de70 <DispChar8x14+0x80>
    }
    Sx++;
 800dec8:	4b0d      	ldr	r3, [pc, #52]	; (800df00 <DispChar8x14+0x110>)
 800deca:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dece:	b29b      	uxth	r3, r3
 800ded0:	3301      	adds	r3, #1
 800ded2:	b29b      	uxth	r3, r3
 800ded4:	b21a      	sxth	r2, r3
 800ded6:	4b0a      	ldr	r3, [pc, #40]	; (800df00 <DispChar8x14+0x110>)
 800ded8:	801a      	strh	r2, [r3, #0]
  for(i=0; i<8; ++i)
 800deda:	89fb      	ldrh	r3, [r7, #14]
 800dedc:	3301      	adds	r3, #1
 800dede:	b29b      	uxth	r3, r3
 800dee0:	81fb      	strh	r3, [r7, #14]
 800dee2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dee6:	2b07      	cmp	r3, #7
 800dee8:	dd8d      	ble.n	800de06 <DispChar8x14+0x16>
  }
}
 800deea:	bf00      	nop
 800deec:	bf00      	nop
 800deee:	3710      	adds	r7, #16
 800def0:	46bd      	mov	sp, r7
 800def2:	bd80      	pop	{r7, pc}
 800def4:	08001290 	.word	0x08001290
 800def8:	08000c90 	.word	0x08000c90
 800defc:	ffffaaaa 	.word	0xffffaaaa
 800df00:	20000790 	.word	0x20000790
 800df04:	20000792 	.word	0x20000792
 800df08:	200015d6 	.word	0x200015d6
 800df0c:	200015d4 	.word	0x200015d4

0800df10 <DispStr8x14>:

//Mode = bit0: Normal/Inv, bit1: Char/Map
void DispStr8x14(short x0, short y0, char Mode, char *Str)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b086      	sub	sp, #24
 800df14:	af00      	add	r7, sp, #0
 800df16:	607b      	str	r3, [r7, #4]
 800df18:	4603      	mov	r3, r0
 800df1a:	81fb      	strh	r3, [r7, #14]
 800df1c:	460b      	mov	r3, r1
 800df1e:	81bb      	strh	r3, [r7, #12]
 800df20:	4613      	mov	r3, r2
 800df22:	72fb      	strb	r3, [r7, #11]
	  short i;
	  Sx = x0; Sy = y0;
 800df24:	4a22      	ldr	r2, [pc, #136]	; (800dfb0 <DispStr8x14+0xa0>)
 800df26:	89fb      	ldrh	r3, [r7, #14]
 800df28:	8013      	strh	r3, [r2, #0]
 800df2a:	4a22      	ldr	r2, [pc, #136]	; (800dfb4 <DispStr8x14+0xa4>)
 800df2c:	89bb      	ldrh	r3, [r7, #12]
 800df2e:	8013      	strh	r3, [r2, #0]
	  LCD_Set_Posi(Sx, Sy);
 800df30:	4b1f      	ldr	r3, [pc, #124]	; (800dfb0 <DispStr8x14+0xa0>)
 800df32:	f9b3 3000 	ldrsh.w	r3, [r3]
 800df36:	4a1f      	ldr	r2, [pc, #124]	; (800dfb4 <DispStr8x14+0xa4>)
 800df38:	f9b2 2000 	ldrsh.w	r2, [r2]
 800df3c:	4611      	mov	r1, r2
 800df3e:	4618      	mov	r0, r3
 800df40:	f004 faee 	bl	8012520 <LCD_Set_Posi>
	  for (i=0; i<14; i++)
 800df44:	2300      	movs	r3, #0
 800df46:	82fb      	strh	r3, [r7, #22]
 800df48:	e012      	b.n	800df70 <DispStr8x14+0x60>
	  {
		  LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800df4a:	7afb      	ldrb	r3, [r7, #11]
 800df4c:	f003 0301 	and.w	r3, r3, #1
 800df50:	2b00      	cmp	r3, #0
 800df52:	d002      	beq.n	800df5a <DispStr8x14+0x4a>
 800df54:	4b18      	ldr	r3, [pc, #96]	; (800dfb8 <DispStr8x14+0xa8>)
 800df56:	881b      	ldrh	r3, [r3, #0]
 800df58:	e001      	b.n	800df5e <DispStr8x14+0x4e>
 800df5a:	4b18      	ldr	r3, [pc, #96]	; (800dfbc <DispStr8x14+0xac>)
 800df5c:	881b      	ldrh	r3, [r3, #0]
 800df5e:	4618      	mov	r0, r3
 800df60:	f004 fb2c 	bl	80125bc <LCD_Set_Pixel>
	  for (i=0; i<14; i++)
 800df64:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800df68:	b29b      	uxth	r3, r3
 800df6a:	3301      	adds	r3, #1
 800df6c:	b29b      	uxth	r3, r3
 800df6e:	82fb      	strh	r3, [r7, #22]
 800df70:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800df74:	2b0d      	cmp	r3, #13
 800df76:	dde8      	ble.n	800df4a <DispStr8x14+0x3a>
	  }
	  Sx++;
 800df78:	4b0d      	ldr	r3, [pc, #52]	; (800dfb0 <DispStr8x14+0xa0>)
 800df7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800df7e:	b29b      	uxth	r3, r3
 800df80:	3301      	adds	r3, #1
 800df82:	b29b      	uxth	r3, r3
 800df84:	b21a      	sxth	r2, r3
 800df86:	4b0a      	ldr	r3, [pc, #40]	; (800dfb0 <DispStr8x14+0xa0>)
 800df88:	801a      	strh	r2, [r3, #0]
	  while(*Str != 0)
 800df8a:	e008      	b.n	800df9e <DispStr8x14+0x8e>
	  {
	    DispChar8x14(Mode, *Str++);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	1c5a      	adds	r2, r3, #1
 800df90:	607a      	str	r2, [r7, #4]
 800df92:	781a      	ldrb	r2, [r3, #0]
 800df94:	7afb      	ldrb	r3, [r7, #11]
 800df96:	4611      	mov	r1, r2
 800df98:	4618      	mov	r0, r3
 800df9a:	f7ff ff29 	bl	800ddf0 <DispChar8x14>
	  while(*Str != 0)
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	781b      	ldrb	r3, [r3, #0]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d1f2      	bne.n	800df8c <DispStr8x14+0x7c>
	  }
}
 800dfa6:	bf00      	nop
 800dfa8:	bf00      	nop
 800dfaa:	3718      	adds	r7, #24
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd80      	pop	{r7, pc}
 800dfb0:	20000790 	.word	0x20000790
 800dfb4:	20000792 	.word	0x20000792
 800dfb8:	200015d4 	.word	0x200015d4
 800dfbc:	200015d6 	.word	0x200015d6

0800dfc0 <SetColor>:

void SetColor(unsigned short Board_Color, unsigned short Text_Color)
{
 800dfc0:	b480      	push	{r7}
 800dfc2:	b083      	sub	sp, #12
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	460a      	mov	r2, r1
 800dfca:	80fb      	strh	r3, [r7, #6]
 800dfcc:	4613      	mov	r3, r2
 800dfce:	80bb      	strh	r3, [r7, #4]
	  Background = Board_Color;
 800dfd0:	4a05      	ldr	r2, [pc, #20]	; (800dfe8 <SetColor+0x28>)
 800dfd2:	88fb      	ldrh	r3, [r7, #6]
 800dfd4:	8013      	strh	r3, [r2, #0]
	  Foreground = Text_Color;
 800dfd6:	4a05      	ldr	r2, [pc, #20]	; (800dfec <SetColor+0x2c>)
 800dfd8:	88bb      	ldrh	r3, [r7, #4]
 800dfda:	8013      	strh	r3, [r2, #0]
}
 800dfdc:	bf00      	nop
 800dfde:	370c      	adds	r7, #12
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe6:	4770      	bx	lr
 800dfe8:	200015d6 	.word	0x200015d6
 800dfec:	200015d4 	.word	0x200015d4

0800dff0 <DispStr>:

/*******************************************************************************
  DispStr: ����Ļ��ʾ�ַ�/ͼ�鴮        Mode = bit0: Normal/Inv, bit1: Char/Map
*******************************************************************************/
void DispStr(short x0, short y0, char Mode, char *Str)
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b086      	sub	sp, #24
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	607b      	str	r3, [r7, #4]
 800dff8:	4603      	mov	r3, r0
 800dffa:	81fb      	strh	r3, [r7, #14]
 800dffc:	460b      	mov	r3, r1
 800dffe:	81bb      	strh	r3, [r7, #12]
 800e000:	4613      	mov	r3, r2
 800e002:	72fb      	strb	r3, [r7, #11]
  char Code;
  short i, j, k;

  Sx = x0; Sy = y0;
 800e004:	4a5e      	ldr	r2, [pc, #376]	; (800e180 <DispStr+0x190>)
 800e006:	89fb      	ldrh	r3, [r7, #14]
 800e008:	8013      	strh	r3, [r2, #0]
 800e00a:	4a5e      	ldr	r2, [pc, #376]	; (800e184 <DispStr+0x194>)
 800e00c:	89bb      	ldrh	r3, [r7, #12]
 800e00e:	8013      	strh	r3, [r2, #0]
  LCD_Set_Posi(Sx, Sy);
 800e010:	4b5b      	ldr	r3, [pc, #364]	; (800e180 <DispStr+0x190>)
 800e012:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e016:	4a5b      	ldr	r2, [pc, #364]	; (800e184 <DispStr+0x194>)
 800e018:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e01c:	4611      	mov	r1, r2
 800e01e:	4618      	mov	r0, r3
 800e020:	f004 fa7e 	bl	8012520 <LCD_Set_Posi>

  while(*Str != 0)
 800e024:	e0a1      	b.n	800e16a <DispStr+0x17a>
  {
    Code = *Str++;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	1c5a      	adds	r2, r3, #1
 800e02a:	607a      	str	r2, [r7, #4]
 800e02c:	781b      	ldrb	r3, [r3, #0]
 800e02e:	747b      	strb	r3, [r7, #17]
    for(i=0; i<6; ++i)
 800e030:	2300      	movs	r3, #0
 800e032:	82fb      	strh	r3, [r7, #22]
 800e034:	e094      	b.n	800e160 <DispStr+0x170>
    {
      if(!(Mode & SYMB))
 800e036:	7afb      	ldrb	r3, [r7, #11]
 800e038:	f003 0310 	and.w	r3, r3, #16
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d10e      	bne.n	800e05e <DispStr+0x6e>
    	  k = CHAR6x8[((Code-0X21)*6)+i];
 800e040:	7c7b      	ldrb	r3, [r7, #17]
 800e042:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800e046:	4613      	mov	r3, r2
 800e048:	005b      	lsls	r3, r3, #1
 800e04a:	4413      	add	r3, r2
 800e04c:	005b      	lsls	r3, r3, #1
 800e04e:	461a      	mov	r2, r3
 800e050:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e054:	4413      	add	r3, r2
 800e056:	4a4c      	ldr	r2, [pc, #304]	; (800e188 <DispStr+0x198>)
 800e058:	5cd3      	ldrb	r3, [r2, r3]
 800e05a:	827b      	strh	r3, [r7, #18]
 800e05c:	e00d      	b.n	800e07a <DispStr+0x8a>
      else
    	  k = SYMB6x8[(Code - '!')*6 + i];
 800e05e:	7c7b      	ldrb	r3, [r7, #17]
 800e060:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800e064:	4613      	mov	r3, r2
 800e066:	005b      	lsls	r3, r3, #1
 800e068:	4413      	add	r3, r2
 800e06a:	005b      	lsls	r3, r3, #1
 800e06c:	461a      	mov	r2, r3
 800e06e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e072:	4413      	add	r3, r2
 800e074:	4a45      	ldr	r2, [pc, #276]	; (800e18c <DispStr+0x19c>)
 800e076:	5cd3      	ldrb	r3, [r2, r3]
 800e078:	827b      	strh	r3, [r7, #18]
      if(Mode & VOID)
 800e07a:	7afb      	ldrb	r3, [r7, #11]
 800e07c:	f003 0320 	and.w	r3, r3, #32
 800e080:	2b00      	cmp	r3, #0
 800e082:	d00c      	beq.n	800e09e <DispStr+0xae>
    	  k &= (i%2)? 0xAAAA : 0x5555;
 800e084:	8afb      	ldrh	r3, [r7, #22]
 800e086:	f003 0301 	and.w	r3, r3, #1
 800e08a:	b29b      	uxth	r3, r3
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d001      	beq.n	800e094 <DispStr+0xa4>
 800e090:	4a3f      	ldr	r2, [pc, #252]	; (800e190 <DispStr+0x1a0>)
 800e092:	e001      	b.n	800e098 <DispStr+0xa8>
 800e094:	f245 5255 	movw	r2, #21845	; 0x5555
 800e098:	8a7b      	ldrh	r3, [r7, #18]
 800e09a:	4013      	ands	r3, r2
 800e09c:	827b      	strh	r3, [r7, #18]
      LCD_Set_Posi(Sx, Sy);
 800e09e:	4b38      	ldr	r3, [pc, #224]	; (800e180 <DispStr+0x190>)
 800e0a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0a4:	4a37      	ldr	r2, [pc, #220]	; (800e184 <DispStr+0x194>)
 800e0a6:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e0aa:	4611      	mov	r1, r2
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f004 fa37 	bl	8012520 <LCD_Set_Posi>
      LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e0b2:	7afb      	ldrb	r3, [r7, #11]
 800e0b4:	f003 0301 	and.w	r3, r3, #1
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d002      	beq.n	800e0c2 <DispStr+0xd2>
 800e0bc:	4b35      	ldr	r3, [pc, #212]	; (800e194 <DispStr+0x1a4>)
 800e0be:	881b      	ldrh	r3, [r3, #0]
 800e0c0:	e001      	b.n	800e0c6 <DispStr+0xd6>
 800e0c2:	4b35      	ldr	r3, [pc, #212]	; (800e198 <DispStr+0x1a8>)
 800e0c4:	881b      	ldrh	r3, [r3, #0]
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f004 fa78 	bl	80125bc <LCD_Set_Pixel>
      LCD_Set_Posi(Sx, Sy+1);
 800e0cc:	4b2c      	ldr	r3, [pc, #176]	; (800e180 <DispStr+0x190>)
 800e0ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e0d2:	4b2c      	ldr	r3, [pc, #176]	; (800e184 <DispStr+0x194>)
 800e0d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0d8:	b29b      	uxth	r3, r3
 800e0da:	3301      	adds	r3, #1
 800e0dc:	b29b      	uxth	r3, r3
 800e0de:	b21b      	sxth	r3, r3
 800e0e0:	4619      	mov	r1, r3
 800e0e2:	4610      	mov	r0, r2
 800e0e4:	f004 fa1c 	bl	8012520 <LCD_Set_Posi>
      for(j=0; j<10; ++j)
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	82bb      	strh	r3, [r7, #20]
 800e0ec:	e027      	b.n	800e13e <DispStr+0x14e>
      {  //j<8ʱ�����У�j<10������   �����¸�������
        if(k & 1)
 800e0ee:	8a7b      	ldrh	r3, [r7, #18]
 800e0f0:	f003 0301 	and.w	r3, r3, #1
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d00d      	beq.n	800e114 <DispStr+0x124>
        	LCD_Set_Pixel((Mode & INV)? Background : Foreground);
 800e0f8:	7afb      	ldrb	r3, [r7, #11]
 800e0fa:	f003 0301 	and.w	r3, r3, #1
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d002      	beq.n	800e108 <DispStr+0x118>
 800e102:	4b25      	ldr	r3, [pc, #148]	; (800e198 <DispStr+0x1a8>)
 800e104:	881b      	ldrh	r3, [r3, #0]
 800e106:	e001      	b.n	800e10c <DispStr+0x11c>
 800e108:	4b22      	ldr	r3, [pc, #136]	; (800e194 <DispStr+0x1a4>)
 800e10a:	881b      	ldrh	r3, [r3, #0]
 800e10c:	4618      	mov	r0, r3
 800e10e:	f004 fa55 	bl	80125bc <LCD_Set_Pixel>
 800e112:	e00c      	b.n	800e12e <DispStr+0x13e>
        else
        	LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e114:	7afb      	ldrb	r3, [r7, #11]
 800e116:	f003 0301 	and.w	r3, r3, #1
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d002      	beq.n	800e124 <DispStr+0x134>
 800e11e:	4b1d      	ldr	r3, [pc, #116]	; (800e194 <DispStr+0x1a4>)
 800e120:	881b      	ldrh	r3, [r3, #0]
 800e122:	e001      	b.n	800e128 <DispStr+0x138>
 800e124:	4b1c      	ldr	r3, [pc, #112]	; (800e198 <DispStr+0x1a8>)
 800e126:	881b      	ldrh	r3, [r3, #0]
 800e128:	4618      	mov	r0, r3
 800e12a:	f004 fa47 	bl	80125bc <LCD_Set_Pixel>
       k >>= 1;
 800e12e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e132:	105b      	asrs	r3, r3, #1
 800e134:	827b      	strh	r3, [r7, #18]
      for(j=0; j<10; ++j)
 800e136:	8abb      	ldrh	r3, [r7, #20]
 800e138:	3301      	adds	r3, #1
 800e13a:	b29b      	uxth	r3, r3
 800e13c:	82bb      	strh	r3, [r7, #20]
 800e13e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e142:	2b09      	cmp	r3, #9
 800e144:	ddd3      	ble.n	800e0ee <DispStr+0xfe>
      }
      Sx++;                 //��ʾλ��ˮƽ����+1
 800e146:	4b0e      	ldr	r3, [pc, #56]	; (800e180 <DispStr+0x190>)
 800e148:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e14c:	b29b      	uxth	r3, r3
 800e14e:	3301      	adds	r3, #1
 800e150:	b29b      	uxth	r3, r3
 800e152:	b21a      	sxth	r2, r3
 800e154:	4b0a      	ldr	r3, [pc, #40]	; (800e180 <DispStr+0x190>)
 800e156:	801a      	strh	r2, [r3, #0]
    for(i=0; i<6; ++i)
 800e158:	8afb      	ldrh	r3, [r7, #22]
 800e15a:	3301      	adds	r3, #1
 800e15c:	b29b      	uxth	r3, r3
 800e15e:	82fb      	strh	r3, [r7, #22]
 800e160:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e164:	2b05      	cmp	r3, #5
 800e166:	f77f af66 	ble.w	800e036 <DispStr+0x46>
  while(*Str != 0)
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	781b      	ldrb	r3, [r3, #0]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	f47f af59 	bne.w	800e026 <DispStr+0x36>
    }
  }
}
 800e174:	bf00      	nop
 800e176:	bf00      	nop
 800e178:	3718      	adds	r7, #24
 800e17a:	46bd      	mov	sp, r7
 800e17c:	bd80      	pop	{r7, pc}
 800e17e:	bf00      	nop
 800e180:	20000790 	.word	0x20000790
 800e184:	20000792 	.word	0x20000792
 800e188:	080016c4 	.word	0x080016c4
 800e18c:	08001490 	.word	0x08001490
 800e190:	ffffaaaa 	.word	0xffffaaaa
 800e194:	200015d4 	.word	0x200015d4
 800e198:	200015d6 	.word	0x200015d6

0800e19c <Draw_Circle_D>:

/*******************************************************************************
����Ŀ��˫��Բ�ǿ�
*******************************************************************************/
void Draw_Circle_D(char Mode, short Posi_x, short Posi_y, short High, short Width, short Distance)
{
 800e19c:	b590      	push	{r4, r7, lr}
 800e19e:	b085      	sub	sp, #20
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	4604      	mov	r4, r0
 800e1a4:	4608      	mov	r0, r1
 800e1a6:	4611      	mov	r1, r2
 800e1a8:	461a      	mov	r2, r3
 800e1aa:	4623      	mov	r3, r4
 800e1ac:	71fb      	strb	r3, [r7, #7]
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	80bb      	strh	r3, [r7, #4]
 800e1b2:	460b      	mov	r3, r1
 800e1b4:	807b      	strh	r3, [r7, #2]
 800e1b6:	4613      	mov	r3, r2
 800e1b8:	803b      	strh	r3, [r7, #0]
  short x, y, i, j;

  Distance = Distance + Width*2 + 5 ;
 800e1ba:	8c3b      	ldrh	r3, [r7, #32]
 800e1bc:	005b      	lsls	r3, r3, #1
 800e1be:	b29a      	uxth	r2, r3
 800e1c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1c2:	4413      	add	r3, r2
 800e1c4:	b29b      	uxth	r3, r3
 800e1c6:	3305      	adds	r3, #5
 800e1c8:	b29b      	uxth	r3, r3
 800e1ca:	84bb      	strh	r3, [r7, #36]	; 0x24
  Posi_x = Posi_x - Width;
 800e1cc:	88ba      	ldrh	r2, [r7, #4]
 800e1ce:	8c3b      	ldrh	r3, [r7, #32]
 800e1d0:	1ad3      	subs	r3, r2, r3
 800e1d2:	b29b      	uxth	r3, r3
 800e1d4:	80bb      	strh	r3, [r7, #4]

  x = Posi_x;
 800e1d6:	88bb      	ldrh	r3, [r7, #4]
 800e1d8:	817b      	strh	r3, [r7, #10]
  y = Posi_y + 2;
 800e1da:	887b      	ldrh	r3, [r7, #2]
 800e1dc:	3302      	adds	r3, #2
 800e1de:	b29b      	uxth	r3, r3
 800e1e0:	813b      	strh	r3, [r7, #8]
  LCD_Set_Posi(x, y);
 800e1e2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e1e6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e1ea:	4611      	mov	r1, r2
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	f004 f997 	bl	8012520 <LCD_Set_Posi>
  for(j=0;j<High-4;j++ )LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	81bb      	strh	r3, [r7, #12]
 800e1f6:	e012      	b.n	800e21e <Draw_Circle_D+0x82>
 800e1f8:	79fb      	ldrb	r3, [r7, #7]
 800e1fa:	f003 0301 	and.w	r3, r3, #1
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d002      	beq.n	800e208 <Draw_Circle_D+0x6c>
 800e202:	4bad      	ldr	r3, [pc, #692]	; (800e4b8 <Draw_Circle_D+0x31c>)
 800e204:	881b      	ldrh	r3, [r3, #0]
 800e206:	e001      	b.n	800e20c <Draw_Circle_D+0x70>
 800e208:	4bac      	ldr	r3, [pc, #688]	; (800e4bc <Draw_Circle_D+0x320>)
 800e20a:	881b      	ldrh	r3, [r3, #0]
 800e20c:	4618      	mov	r0, r3
 800e20e:	f004 f9d5 	bl	80125bc <LCD_Set_Pixel>
 800e212:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e216:	b29b      	uxth	r3, r3
 800e218:	3301      	adds	r3, #1
 800e21a:	b29b      	uxth	r3, r3
 800e21c:	81bb      	strh	r3, [r7, #12]
 800e21e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e222:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e226:	3b04      	subs	r3, #4
 800e228:	429a      	cmp	r2, r3
 800e22a:	dbe5      	blt.n	800e1f8 <Draw_Circle_D+0x5c>
  x = Posi_x + Distance;
 800e22c:	88ba      	ldrh	r2, [r7, #4]
 800e22e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e230:	4413      	add	r3, r2
 800e232:	b29b      	uxth	r3, r3
 800e234:	817b      	strh	r3, [r7, #10]
  LCD_Set_Posi(x, y);
 800e236:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e23a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e23e:	4611      	mov	r1, r2
 800e240:	4618      	mov	r0, r3
 800e242:	f004 f96d 	bl	8012520 <LCD_Set_Posi>
  for(j=0;j<High-4;j++ )LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e246:	2300      	movs	r3, #0
 800e248:	81bb      	strh	r3, [r7, #12]
 800e24a:	e012      	b.n	800e272 <Draw_Circle_D+0xd6>
 800e24c:	79fb      	ldrb	r3, [r7, #7]
 800e24e:	f003 0301 	and.w	r3, r3, #1
 800e252:	2b00      	cmp	r3, #0
 800e254:	d002      	beq.n	800e25c <Draw_Circle_D+0xc0>
 800e256:	4b98      	ldr	r3, [pc, #608]	; (800e4b8 <Draw_Circle_D+0x31c>)
 800e258:	881b      	ldrh	r3, [r3, #0]
 800e25a:	e001      	b.n	800e260 <Draw_Circle_D+0xc4>
 800e25c:	4b97      	ldr	r3, [pc, #604]	; (800e4bc <Draw_Circle_D+0x320>)
 800e25e:	881b      	ldrh	r3, [r3, #0]
 800e260:	4618      	mov	r0, r3
 800e262:	f004 f9ab 	bl	80125bc <LCD_Set_Pixel>
 800e266:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e26a:	b29b      	uxth	r3, r3
 800e26c:	3301      	adds	r3, #1
 800e26e:	b29b      	uxth	r3, r3
 800e270:	81bb      	strh	r3, [r7, #12]
 800e272:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e276:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e27a:	3b04      	subs	r3, #4
 800e27c:	429a      	cmp	r2, r3
 800e27e:	dbe5      	blt.n	800e24c <Draw_Circle_D+0xb0>

  x = Posi_x + 1;
 800e280:	88bb      	ldrh	r3, [r7, #4]
 800e282:	3301      	adds	r3, #1
 800e284:	b29b      	uxth	r3, r3
 800e286:	817b      	strh	r3, [r7, #10]
  y = Posi_y + 1;
 800e288:	887b      	ldrh	r3, [r7, #2]
 800e28a:	3301      	adds	r3, #1
 800e28c:	b29b      	uxth	r3, r3
 800e28e:	813b      	strh	r3, [r7, #8]
  LCD_Set_Posi(x, y);
 800e290:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e294:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e298:	4611      	mov	r1, r2
 800e29a:	4618      	mov	r0, r3
 800e29c:	f004 f940 	bl	8012520 <LCD_Set_Posi>
  for(j=0;j<High-2;j++ )LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	81bb      	strh	r3, [r7, #12]
 800e2a4:	e012      	b.n	800e2cc <Draw_Circle_D+0x130>
 800e2a6:	79fb      	ldrb	r3, [r7, #7]
 800e2a8:	f003 0301 	and.w	r3, r3, #1
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d002      	beq.n	800e2b6 <Draw_Circle_D+0x11a>
 800e2b0:	4b81      	ldr	r3, [pc, #516]	; (800e4b8 <Draw_Circle_D+0x31c>)
 800e2b2:	881b      	ldrh	r3, [r3, #0]
 800e2b4:	e001      	b.n	800e2ba <Draw_Circle_D+0x11e>
 800e2b6:	4b81      	ldr	r3, [pc, #516]	; (800e4bc <Draw_Circle_D+0x320>)
 800e2b8:	881b      	ldrh	r3, [r3, #0]
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	f004 f97e 	bl	80125bc <LCD_Set_Pixel>
 800e2c0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e2c4:	b29b      	uxth	r3, r3
 800e2c6:	3301      	adds	r3, #1
 800e2c8:	b29b      	uxth	r3, r3
 800e2ca:	81bb      	strh	r3, [r7, #12]
 800e2cc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e2d0:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e2d4:	3b02      	subs	r3, #2
 800e2d6:	429a      	cmp	r2, r3
 800e2d8:	dbe5      	blt.n	800e2a6 <Draw_Circle_D+0x10a>
  x = Posi_x + Distance-1;
 800e2da:	88ba      	ldrh	r2, [r7, #4]
 800e2dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e2de:	4413      	add	r3, r2
 800e2e0:	b29b      	uxth	r3, r3
 800e2e2:	3b01      	subs	r3, #1
 800e2e4:	b29b      	uxth	r3, r3
 800e2e6:	817b      	strh	r3, [r7, #10]
  LCD_Set_Posi(x, y);
 800e2e8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e2ec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e2f0:	4611      	mov	r1, r2
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	f004 f914 	bl	8012520 <LCD_Set_Posi>
  for(j=0;j<High-2;j++ )LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	81bb      	strh	r3, [r7, #12]
 800e2fc:	e012      	b.n	800e324 <Draw_Circle_D+0x188>
 800e2fe:	79fb      	ldrb	r3, [r7, #7]
 800e300:	f003 0301 	and.w	r3, r3, #1
 800e304:	2b00      	cmp	r3, #0
 800e306:	d002      	beq.n	800e30e <Draw_Circle_D+0x172>
 800e308:	4b6b      	ldr	r3, [pc, #428]	; (800e4b8 <Draw_Circle_D+0x31c>)
 800e30a:	881b      	ldrh	r3, [r3, #0]
 800e30c:	e001      	b.n	800e312 <Draw_Circle_D+0x176>
 800e30e:	4b6b      	ldr	r3, [pc, #428]	; (800e4bc <Draw_Circle_D+0x320>)
 800e310:	881b      	ldrh	r3, [r3, #0]
 800e312:	4618      	mov	r0, r3
 800e314:	f004 f952 	bl	80125bc <LCD_Set_Pixel>
 800e318:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e31c:	b29b      	uxth	r3, r3
 800e31e:	3301      	adds	r3, #1
 800e320:	b29b      	uxth	r3, r3
 800e322:	81bb      	strh	r3, [r7, #12]
 800e324:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e328:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e32c:	3b02      	subs	r3, #2
 800e32e:	429a      	cmp	r2, r3
 800e330:	dbe5      	blt.n	800e2fe <Draw_Circle_D+0x162>

  x = Posi_x + 2;
 800e332:	88bb      	ldrh	r3, [r7, #4]
 800e334:	3302      	adds	r3, #2
 800e336:	b29b      	uxth	r3, r3
 800e338:	817b      	strh	r3, [r7, #10]
  y = Posi_y;
 800e33a:	887b      	ldrh	r3, [r7, #2]
 800e33c:	813b      	strh	r3, [r7, #8]
  LCD_Set_Posi(x, y);
 800e33e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e342:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e346:	4611      	mov	r1, r2
 800e348:	4618      	mov	r0, r3
 800e34a:	f004 f8e9 	bl	8012520 <LCD_Set_Posi>
  for(j=0;j<High;j++ )LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e34e:	2300      	movs	r3, #0
 800e350:	81bb      	strh	r3, [r7, #12]
 800e352:	e012      	b.n	800e37a <Draw_Circle_D+0x1de>
 800e354:	79fb      	ldrb	r3, [r7, #7]
 800e356:	f003 0301 	and.w	r3, r3, #1
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d002      	beq.n	800e364 <Draw_Circle_D+0x1c8>
 800e35e:	4b56      	ldr	r3, [pc, #344]	; (800e4b8 <Draw_Circle_D+0x31c>)
 800e360:	881b      	ldrh	r3, [r3, #0]
 800e362:	e001      	b.n	800e368 <Draw_Circle_D+0x1cc>
 800e364:	4b55      	ldr	r3, [pc, #340]	; (800e4bc <Draw_Circle_D+0x320>)
 800e366:	881b      	ldrh	r3, [r3, #0]
 800e368:	4618      	mov	r0, r3
 800e36a:	f004 f927 	bl	80125bc <LCD_Set_Pixel>
 800e36e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e372:	b29b      	uxth	r3, r3
 800e374:	3301      	adds	r3, #1
 800e376:	b29b      	uxth	r3, r3
 800e378:	81bb      	strh	r3, [r7, #12]
 800e37a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e37e:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e382:	429a      	cmp	r2, r3
 800e384:	dbe6      	blt.n	800e354 <Draw_Circle_D+0x1b8>
  x = Posi_x + Distance-2;
 800e386:	88ba      	ldrh	r2, [r7, #4]
 800e388:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e38a:	4413      	add	r3, r2
 800e38c:	b29b      	uxth	r3, r3
 800e38e:	3b02      	subs	r3, #2
 800e390:	b29b      	uxth	r3, r3
 800e392:	817b      	strh	r3, [r7, #10]
  y = Posi_y;
 800e394:	887b      	ldrh	r3, [r7, #2]
 800e396:	813b      	strh	r3, [r7, #8]
  LCD_Set_Posi(x, y);
 800e398:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e39c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e3a0:	4611      	mov	r1, r2
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f004 f8bc 	bl	8012520 <LCD_Set_Posi>
  for(j=0;j<High;j++ )LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	81bb      	strh	r3, [r7, #12]
 800e3ac:	e012      	b.n	800e3d4 <Draw_Circle_D+0x238>
 800e3ae:	79fb      	ldrb	r3, [r7, #7]
 800e3b0:	f003 0301 	and.w	r3, r3, #1
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d002      	beq.n	800e3be <Draw_Circle_D+0x222>
 800e3b8:	4b3f      	ldr	r3, [pc, #252]	; (800e4b8 <Draw_Circle_D+0x31c>)
 800e3ba:	881b      	ldrh	r3, [r3, #0]
 800e3bc:	e001      	b.n	800e3c2 <Draw_Circle_D+0x226>
 800e3be:	4b3f      	ldr	r3, [pc, #252]	; (800e4bc <Draw_Circle_D+0x320>)
 800e3c0:	881b      	ldrh	r3, [r3, #0]
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f004 f8fa 	bl	80125bc <LCD_Set_Pixel>
 800e3c8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e3cc:	b29b      	uxth	r3, r3
 800e3ce:	3301      	adds	r3, #1
 800e3d0:	b29b      	uxth	r3, r3
 800e3d2:	81bb      	strh	r3, [r7, #12]
 800e3d4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e3d8:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e3dc:	429a      	cmp	r2, r3
 800e3de:	dbe6      	blt.n	800e3ae <Draw_Circle_D+0x212>

  y = Posi_y;
 800e3e0:	887b      	ldrh	r3, [r7, #2]
 800e3e2:	813b      	strh	r3, [r7, #8]

  for(i=0;i<Width;i++){
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	81fb      	strh	r3, [r7, #14]
 800e3e8:	e05a      	b.n	800e4a0 <Draw_Circle_D+0x304>
    LCD_Set_Posi(Posi_x+3+i, y);
 800e3ea:	88ba      	ldrh	r2, [r7, #4]
 800e3ec:	89fb      	ldrh	r3, [r7, #14]
 800e3ee:	4413      	add	r3, r2
 800e3f0:	b29b      	uxth	r3, r3
 800e3f2:	3303      	adds	r3, #3
 800e3f4:	b29b      	uxth	r3, r3
 800e3f6:	b21b      	sxth	r3, r3
 800e3f8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e3fc:	4611      	mov	r1, r2
 800e3fe:	4618      	mov	r0, r3
 800e400:	f004 f88e 	bl	8012520 <LCD_Set_Posi>
    for(j=0; j<High; j++)LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e404:	2300      	movs	r3, #0
 800e406:	81bb      	strh	r3, [r7, #12]
 800e408:	e012      	b.n	800e430 <Draw_Circle_D+0x294>
 800e40a:	79fb      	ldrb	r3, [r7, #7]
 800e40c:	f003 0301 	and.w	r3, r3, #1
 800e410:	2b00      	cmp	r3, #0
 800e412:	d002      	beq.n	800e41a <Draw_Circle_D+0x27e>
 800e414:	4b28      	ldr	r3, [pc, #160]	; (800e4b8 <Draw_Circle_D+0x31c>)
 800e416:	881b      	ldrh	r3, [r3, #0]
 800e418:	e001      	b.n	800e41e <Draw_Circle_D+0x282>
 800e41a:	4b28      	ldr	r3, [pc, #160]	; (800e4bc <Draw_Circle_D+0x320>)
 800e41c:	881b      	ldrh	r3, [r3, #0]
 800e41e:	4618      	mov	r0, r3
 800e420:	f004 f8cc 	bl	80125bc <LCD_Set_Pixel>
 800e424:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e428:	b29b      	uxth	r3, r3
 800e42a:	3301      	adds	r3, #1
 800e42c:	b29b      	uxth	r3, r3
 800e42e:	81bb      	strh	r3, [r7, #12]
 800e430:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e434:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e438:	429a      	cmp	r2, r3
 800e43a:	dbe6      	blt.n	800e40a <Draw_Circle_D+0x26e>
    LCD_Set_Posi(Posi_x+Distance-3-i, y);
 800e43c:	88ba      	ldrh	r2, [r7, #4]
 800e43e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e440:	4413      	add	r3, r2
 800e442:	b29a      	uxth	r2, r3
 800e444:	89fb      	ldrh	r3, [r7, #14]
 800e446:	1ad3      	subs	r3, r2, r3
 800e448:	b29b      	uxth	r3, r3
 800e44a:	3b03      	subs	r3, #3
 800e44c:	b29b      	uxth	r3, r3
 800e44e:	b21b      	sxth	r3, r3
 800e450:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e454:	4611      	mov	r1, r2
 800e456:	4618      	mov	r0, r3
 800e458:	f004 f862 	bl	8012520 <LCD_Set_Posi>
    for(j=0; j<High; j++)LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e45c:	2300      	movs	r3, #0
 800e45e:	81bb      	strh	r3, [r7, #12]
 800e460:	e012      	b.n	800e488 <Draw_Circle_D+0x2ec>
 800e462:	79fb      	ldrb	r3, [r7, #7]
 800e464:	f003 0301 	and.w	r3, r3, #1
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d002      	beq.n	800e472 <Draw_Circle_D+0x2d6>
 800e46c:	4b12      	ldr	r3, [pc, #72]	; (800e4b8 <Draw_Circle_D+0x31c>)
 800e46e:	881b      	ldrh	r3, [r3, #0]
 800e470:	e001      	b.n	800e476 <Draw_Circle_D+0x2da>
 800e472:	4b12      	ldr	r3, [pc, #72]	; (800e4bc <Draw_Circle_D+0x320>)
 800e474:	881b      	ldrh	r3, [r3, #0]
 800e476:	4618      	mov	r0, r3
 800e478:	f004 f8a0 	bl	80125bc <LCD_Set_Pixel>
 800e47c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e480:	b29b      	uxth	r3, r3
 800e482:	3301      	adds	r3, #1
 800e484:	b29b      	uxth	r3, r3
 800e486:	81bb      	strh	r3, [r7, #12]
 800e488:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e48c:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e490:	429a      	cmp	r2, r3
 800e492:	dbe6      	blt.n	800e462 <Draw_Circle_D+0x2c6>
  for(i=0;i<Width;i++){
 800e494:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e498:	b29b      	uxth	r3, r3
 800e49a:	3301      	adds	r3, #1
 800e49c:	b29b      	uxth	r3, r3
 800e49e:	81fb      	strh	r3, [r7, #14]
 800e4a0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800e4a4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e4a8:	429a      	cmp	r2, r3
 800e4aa:	db9e      	blt.n	800e3ea <Draw_Circle_D+0x24e>
  }
}
 800e4ac:	bf00      	nop
 800e4ae:	bf00      	nop
 800e4b0:	3714      	adds	r7, #20
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd90      	pop	{r4, r7, pc}
 800e4b6:	bf00      	nop
 800e4b8:	200015d4 	.word	0x200015d4
 800e4bc:	200015d6 	.word	0x200015d6

0800e4c0 <DispStr10x14>:

/*******************************************************************************
  DispStr:                               Mode = bit0: Normal/Inv, bit1: Char/Map
*******************************************************************************/
void DispStr10x14(short x0, short y0, char Mode, char *Str)
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b084      	sub	sp, #16
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	607b      	str	r3, [r7, #4]
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	81fb      	strh	r3, [r7, #14]
 800e4cc:	460b      	mov	r3, r1
 800e4ce:	81bb      	strh	r3, [r7, #12]
 800e4d0:	4613      	mov	r3, r2
 800e4d2:	72fb      	strb	r3, [r7, #11]
  Sx = x0; Sy = y0;
 800e4d4:	4a0c      	ldr	r2, [pc, #48]	; (800e508 <DispStr10x14+0x48>)
 800e4d6:	89fb      	ldrh	r3, [r7, #14]
 800e4d8:	8013      	strh	r3, [r2, #0]
 800e4da:	4a0c      	ldr	r2, [pc, #48]	; (800e50c <DispStr10x14+0x4c>)
 800e4dc:	89bb      	ldrh	r3, [r7, #12]
 800e4de:	8013      	strh	r3, [r2, #0]
  while(*Str != 0)
 800e4e0:	e008      	b.n	800e4f4 <DispStr10x14+0x34>
  {
    DispChar10x14(Mode, *Str++);
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	1c5a      	adds	r2, r3, #1
 800e4e6:	607a      	str	r2, [r7, #4]
 800e4e8:	781a      	ldrb	r2, [r3, #0]
 800e4ea:	7afb      	ldrb	r3, [r7, #11]
 800e4ec:	4611      	mov	r1, r2
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f000 f80e 	bl	800e510 <DispChar10x14>
  while(*Str != 0)
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	781b      	ldrb	r3, [r3, #0]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d1f2      	bne.n	800e4e2 <DispStr10x14+0x22>
  }
}
 800e4fc:	bf00      	nop
 800e4fe:	bf00      	nop
 800e500:	3710      	adds	r7, #16
 800e502:	46bd      	mov	sp, r7
 800e504:	bd80      	pop	{r7, pc}
 800e506:	bf00      	nop
 800e508:	20000790 	.word	0x20000790
 800e50c:	20000792 	.word	0x20000792

0800e510 <DispChar10x14>:
/*******************************************************************************
 Disp_Char10x14:                        Mode = bit0: Normal/Inv, bit1: Char/Map
*******************************************************************************/
void DispChar10x14(char Mode, char Code)
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b084      	sub	sp, #16
 800e514:	af00      	add	r7, sp, #0
 800e516:	4603      	mov	r3, r0
 800e518:	460a      	mov	r2, r1
 800e51a:	71fb      	strb	r3, [r7, #7]
 800e51c:	4613      	mov	r3, r2
 800e51e:	71bb      	strb	r3, [r7, #6]
  short i, j, k;

  for(i=0; i<10; ++i)
 800e520:	2300      	movs	r3, #0
 800e522:	81fb      	strh	r3, [r7, #14]
 800e524:	e0fe      	b.n	800e724 <DispChar10x14+0x214>
  {
    if(Mode & SYMB) k = SYMB10x14[(Code - '@')*10 + i];
 800e526:	79fb      	ldrb	r3, [r7, #7]
 800e528:	f003 0310 	and.w	r3, r3, #16
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d00f      	beq.n	800e550 <DispChar10x14+0x40>
 800e530:	79bb      	ldrb	r3, [r7, #6]
 800e532:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 800e536:	4613      	mov	r3, r2
 800e538:	009b      	lsls	r3, r3, #2
 800e53a:	4413      	add	r3, r2
 800e53c:	005b      	lsls	r3, r3, #1
 800e53e:	461a      	mov	r2, r3
 800e540:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e544:	4413      	add	r3, r2
 800e546:	4a7c      	ldr	r2, [pc, #496]	; (800e738 <DispChar10x14+0x228>)
 800e548:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e54c:	817b      	strh	r3, [r7, #10]
 800e54e:	e00e      	b.n	800e56e <DispChar10x14+0x5e>
    else            k = CHAR10x14[((Code-0X21)*10)+i];
 800e550:	79bb      	ldrb	r3, [r7, #6]
 800e552:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800e556:	4613      	mov	r3, r2
 800e558:	009b      	lsls	r3, r3, #2
 800e55a:	4413      	add	r3, r2
 800e55c:	005b      	lsls	r3, r3, #1
 800e55e:	461a      	mov	r2, r3
 800e560:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e564:	4413      	add	r3, r2
 800e566:	4a75      	ldr	r2, [pc, #468]	; (800e73c <DispChar10x14+0x22c>)
 800e568:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e56c:	817b      	strh	r3, [r7, #10]
    if(Mode & VOID) k &= (i%2)? 0xAAAA : 0x5555;
 800e56e:	79fb      	ldrb	r3, [r7, #7]
 800e570:	f003 0320 	and.w	r3, r3, #32
 800e574:	2b00      	cmp	r3, #0
 800e576:	d00c      	beq.n	800e592 <DispChar10x14+0x82>
 800e578:	89fb      	ldrh	r3, [r7, #14]
 800e57a:	f003 0301 	and.w	r3, r3, #1
 800e57e:	b29b      	uxth	r3, r3
 800e580:	2b00      	cmp	r3, #0
 800e582:	d001      	beq.n	800e588 <DispChar10x14+0x78>
 800e584:	4a6e      	ldr	r2, [pc, #440]	; (800e740 <DispChar10x14+0x230>)
 800e586:	e001      	b.n	800e58c <DispChar10x14+0x7c>
 800e588:	f245 5255 	movw	r2, #21845	; 0x5555
 800e58c:	897b      	ldrh	r3, [r7, #10]
 800e58e:	4013      	ands	r3, r2
 800e590:	817b      	strh	r3, [r7, #10]
    LCD_Set_Posi(Sx, Sy);
 800e592:	4b6c      	ldr	r3, [pc, #432]	; (800e744 <DispChar10x14+0x234>)
 800e594:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e598:	4a6b      	ldr	r2, [pc, #428]	; (800e748 <DispChar10x14+0x238>)
 800e59a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e59e:	4611      	mov	r1, r2
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f003 ffbd 	bl	8012520 <LCD_Set_Posi>
    if((Mode & SYMB)&&(Code == 'C' || Code=='D'|| Code=='E')){       //AC/DC
 800e5a6:	79fb      	ldrb	r3, [r7, #7]
 800e5a8:	f003 0310 	and.w	r3, r3, #16
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d038      	beq.n	800e622 <DispChar10x14+0x112>
 800e5b0:	79bb      	ldrb	r3, [r7, #6]
 800e5b2:	2b43      	cmp	r3, #67	; 0x43
 800e5b4:	d005      	beq.n	800e5c2 <DispChar10x14+0xb2>
 800e5b6:	79bb      	ldrb	r3, [r7, #6]
 800e5b8:	2b44      	cmp	r3, #68	; 0x44
 800e5ba:	d002      	beq.n	800e5c2 <DispChar10x14+0xb2>
 800e5bc:	79bb      	ldrb	r3, [r7, #6]
 800e5be:	2b45      	cmp	r3, #69	; 0x45
 800e5c0:	d12f      	bne.n	800e622 <DispChar10x14+0x112>
      for(j=0; j<11; ++j){
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	81bb      	strh	r3, [r7, #12]
 800e5c6:	e027      	b.n	800e618 <DispChar10x14+0x108>
        if(k & 4)  LCD_Set_Pixel((Mode & INV)? Background : Foreground);
 800e5c8:	897b      	ldrh	r3, [r7, #10]
 800e5ca:	f003 0304 	and.w	r3, r3, #4
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d00d      	beq.n	800e5ee <DispChar10x14+0xde>
 800e5d2:	79fb      	ldrb	r3, [r7, #7]
 800e5d4:	f003 0301 	and.w	r3, r3, #1
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d002      	beq.n	800e5e2 <DispChar10x14+0xd2>
 800e5dc:	4b5b      	ldr	r3, [pc, #364]	; (800e74c <DispChar10x14+0x23c>)
 800e5de:	881b      	ldrh	r3, [r3, #0]
 800e5e0:	e001      	b.n	800e5e6 <DispChar10x14+0xd6>
 800e5e2:	4b5b      	ldr	r3, [pc, #364]	; (800e750 <DispChar10x14+0x240>)
 800e5e4:	881b      	ldrh	r3, [r3, #0]
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	f003 ffe8 	bl	80125bc <LCD_Set_Pixel>
 800e5ec:	e00c      	b.n	800e608 <DispChar10x14+0xf8>
        else       LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e5ee:	79fb      	ldrb	r3, [r7, #7]
 800e5f0:	f003 0301 	and.w	r3, r3, #1
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d002      	beq.n	800e5fe <DispChar10x14+0xee>
 800e5f8:	4b55      	ldr	r3, [pc, #340]	; (800e750 <DispChar10x14+0x240>)
 800e5fa:	881b      	ldrh	r3, [r3, #0]
 800e5fc:	e001      	b.n	800e602 <DispChar10x14+0xf2>
 800e5fe:	4b53      	ldr	r3, [pc, #332]	; (800e74c <DispChar10x14+0x23c>)
 800e600:	881b      	ldrh	r3, [r3, #0]
 800e602:	4618      	mov	r0, r3
 800e604:	f003 ffda 	bl	80125bc <LCD_Set_Pixel>
        k >>= 1;}
 800e608:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e60c:	105b      	asrs	r3, r3, #1
 800e60e:	817b      	strh	r3, [r7, #10]
      for(j=0; j<11; ++j){
 800e610:	89bb      	ldrh	r3, [r7, #12]
 800e612:	3301      	adds	r3, #1
 800e614:	b29b      	uxth	r3, r3
 800e616:	81bb      	strh	r3, [r7, #12]
 800e618:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e61c:	2b0a      	cmp	r3, #10
 800e61e:	ddd3      	ble.n	800e5c8 <DispChar10x14+0xb8>
    if((Mode & SYMB)&&(Code == 'C' || Code=='D'|| Code=='E')){       //AC/DC
 800e620:	e073      	b.n	800e70a <DispChar10x14+0x1fa>
    }
    else if((Mode & SYMB)&&(Code == 'L' || Code=='H')){
 800e622:	79fb      	ldrb	r3, [r7, #7]
 800e624:	f003 0310 	and.w	r3, r3, #16
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d03f      	beq.n	800e6ac <DispChar10x14+0x19c>
 800e62c:	79bb      	ldrb	r3, [r7, #6]
 800e62e:	2b4c      	cmp	r3, #76	; 0x4c
 800e630:	d002      	beq.n	800e638 <DispChar10x14+0x128>
 800e632:	79bb      	ldrb	r3, [r7, #6]
 800e634:	2b48      	cmp	r3, #72	; 0x48
 800e636:	d139      	bne.n	800e6ac <DispChar10x14+0x19c>
      LCD_Set_Posi(Sx, Sy);
 800e638:	4b42      	ldr	r3, [pc, #264]	; (800e744 <DispChar10x14+0x234>)
 800e63a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e63e:	4a42      	ldr	r2, [pc, #264]	; (800e748 <DispChar10x14+0x238>)
 800e640:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e644:	4611      	mov	r1, r2
 800e646:	4618      	mov	r0, r3
 800e648:	f003 ff6a 	bl	8012520 <LCD_Set_Posi>
      for(j=0; j<11; ++j){
 800e64c:	2300      	movs	r3, #0
 800e64e:	81bb      	strh	r3, [r7, #12]
 800e650:	e027      	b.n	800e6a2 <DispChar10x14+0x192>
        if(k & 4)  LCD_Set_Pixel((Mode & INV)? Background : Foreground);
 800e652:	897b      	ldrh	r3, [r7, #10]
 800e654:	f003 0304 	and.w	r3, r3, #4
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d00d      	beq.n	800e678 <DispChar10x14+0x168>
 800e65c:	79fb      	ldrb	r3, [r7, #7]
 800e65e:	f003 0301 	and.w	r3, r3, #1
 800e662:	2b00      	cmp	r3, #0
 800e664:	d002      	beq.n	800e66c <DispChar10x14+0x15c>
 800e666:	4b39      	ldr	r3, [pc, #228]	; (800e74c <DispChar10x14+0x23c>)
 800e668:	881b      	ldrh	r3, [r3, #0]
 800e66a:	e001      	b.n	800e670 <DispChar10x14+0x160>
 800e66c:	4b38      	ldr	r3, [pc, #224]	; (800e750 <DispChar10x14+0x240>)
 800e66e:	881b      	ldrh	r3, [r3, #0]
 800e670:	4618      	mov	r0, r3
 800e672:	f003 ffa3 	bl	80125bc <LCD_Set_Pixel>
 800e676:	e00c      	b.n	800e692 <DispChar10x14+0x182>
        else       LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e678:	79fb      	ldrb	r3, [r7, #7]
 800e67a:	f003 0301 	and.w	r3, r3, #1
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d002      	beq.n	800e688 <DispChar10x14+0x178>
 800e682:	4b33      	ldr	r3, [pc, #204]	; (800e750 <DispChar10x14+0x240>)
 800e684:	881b      	ldrh	r3, [r3, #0]
 800e686:	e001      	b.n	800e68c <DispChar10x14+0x17c>
 800e688:	4b30      	ldr	r3, [pc, #192]	; (800e74c <DispChar10x14+0x23c>)
 800e68a:	881b      	ldrh	r3, [r3, #0]
 800e68c:	4618      	mov	r0, r3
 800e68e:	f003 ff95 	bl	80125bc <LCD_Set_Pixel>
        k >>= 1;
 800e692:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e696:	105b      	asrs	r3, r3, #1
 800e698:	817b      	strh	r3, [r7, #10]
      for(j=0; j<11; ++j){
 800e69a:	89bb      	ldrh	r3, [r7, #12]
 800e69c:	3301      	adds	r3, #1
 800e69e:	b29b      	uxth	r3, r3
 800e6a0:	81bb      	strh	r3, [r7, #12]
 800e6a2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e6a6:	2b0a      	cmp	r3, #10
 800e6a8:	ddd3      	ble.n	800e652 <DispChar10x14+0x142>
    else if((Mode & SYMB)&&(Code == 'L' || Code=='H')){
 800e6aa:	e02e      	b.n	800e70a <DispChar10x14+0x1fa>
      }
    }
    else{
      for(j=0; j<14; ++j){
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	81bb      	strh	r3, [r7, #12]
 800e6b0:	e027      	b.n	800e702 <DispChar10x14+0x1f2>
        if(k & 4)  LCD_Set_Pixel((Mode & INV)? Background : Foreground);
 800e6b2:	897b      	ldrh	r3, [r7, #10]
 800e6b4:	f003 0304 	and.w	r3, r3, #4
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d00d      	beq.n	800e6d8 <DispChar10x14+0x1c8>
 800e6bc:	79fb      	ldrb	r3, [r7, #7]
 800e6be:	f003 0301 	and.w	r3, r3, #1
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d002      	beq.n	800e6cc <DispChar10x14+0x1bc>
 800e6c6:	4b21      	ldr	r3, [pc, #132]	; (800e74c <DispChar10x14+0x23c>)
 800e6c8:	881b      	ldrh	r3, [r3, #0]
 800e6ca:	e001      	b.n	800e6d0 <DispChar10x14+0x1c0>
 800e6cc:	4b20      	ldr	r3, [pc, #128]	; (800e750 <DispChar10x14+0x240>)
 800e6ce:	881b      	ldrh	r3, [r3, #0]
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	f003 ff73 	bl	80125bc <LCD_Set_Pixel>
 800e6d6:	e00c      	b.n	800e6f2 <DispChar10x14+0x1e2>
        else       LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e6d8:	79fb      	ldrb	r3, [r7, #7]
 800e6da:	f003 0301 	and.w	r3, r3, #1
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d002      	beq.n	800e6e8 <DispChar10x14+0x1d8>
 800e6e2:	4b1b      	ldr	r3, [pc, #108]	; (800e750 <DispChar10x14+0x240>)
 800e6e4:	881b      	ldrh	r3, [r3, #0]
 800e6e6:	e001      	b.n	800e6ec <DispChar10x14+0x1dc>
 800e6e8:	4b18      	ldr	r3, [pc, #96]	; (800e74c <DispChar10x14+0x23c>)
 800e6ea:	881b      	ldrh	r3, [r3, #0]
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	f003 ff65 	bl	80125bc <LCD_Set_Pixel>
        k >>= 1;
 800e6f2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e6f6:	105b      	asrs	r3, r3, #1
 800e6f8:	817b      	strh	r3, [r7, #10]
      for(j=0; j<14; ++j){
 800e6fa:	89bb      	ldrh	r3, [r7, #12]
 800e6fc:	3301      	adds	r3, #1
 800e6fe:	b29b      	uxth	r3, r3
 800e700:	81bb      	strh	r3, [r7, #12]
 800e702:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e706:	2b0d      	cmp	r3, #13
 800e708:	ddd3      	ble.n	800e6b2 <DispChar10x14+0x1a2>
      }
    }
    Sx++;
 800e70a:	4b0e      	ldr	r3, [pc, #56]	; (800e744 <DispChar10x14+0x234>)
 800e70c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e710:	b29b      	uxth	r3, r3
 800e712:	3301      	adds	r3, #1
 800e714:	b29b      	uxth	r3, r3
 800e716:	b21a      	sxth	r2, r3
 800e718:	4b0a      	ldr	r3, [pc, #40]	; (800e744 <DispChar10x14+0x234>)
 800e71a:	801a      	strh	r2, [r3, #0]
  for(i=0; i<10; ++i)
 800e71c:	89fb      	ldrh	r3, [r7, #14]
 800e71e:	3301      	adds	r3, #1
 800e720:	b29b      	uxth	r3, r3
 800e722:	81fb      	strh	r3, [r7, #14]
 800e724:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e728:	2b09      	cmp	r3, #9
 800e72a:	f77f aefc 	ble.w	800e526 <DispChar10x14+0x16>
  }
}
 800e72e:	bf00      	nop
 800e730:	bf00      	nop
 800e732:	3710      	adds	r7, #16
 800e734:	46bd      	mov	sp, r7
 800e736:	bd80      	pop	{r7, pc}
 800e738:	080018f8 	.word	0x080018f8
 800e73c:	08001998 	.word	0x08001998
 800e740:	ffffaaaa 	.word	0xffffaaaa
 800e744:	20000790 	.word	0x20000790
 800e748:	20000792 	.word	0x20000792
 800e74c:	200015d6 	.word	0x200015d6
 800e750:	200015d4 	.word	0x200015d4

0800e754 <NotePixel>:

/*******************************************************************************
 NotePixel: ��������������     Color: ������ɫ(1/0)  ���ض�λ: Nx, Ny
*******************************************************************************/
void NotePixel(char Color)
{
 800e754:	b480      	push	{r7}
 800e756:	b085      	sub	sp, #20
 800e758:	af00      	add	r7, sp, #0
 800e75a:	4603      	mov	r3, r0
 800e75c:	71fb      	strb	r3, [r7, #7]
  short i, j, *pBuf = (short*)&WaveBuf[300 + 300 + 300];
 800e75e:	4b42      	ldr	r3, [pc, #264]	; (800e868 <NotePixel+0x114>)
 800e760:	60fb      	str	r3, [r7, #12]

  Nx = Nx%ParamTab[WXx1];
 800e762:	4b42      	ldr	r3, [pc, #264]	; (800e86c <NotePixel+0x118>)
 800e764:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e768:	4a41      	ldr	r2, [pc, #260]	; (800e870 <NotePixel+0x11c>)
 800e76a:	f9b2 2046 	ldrsh.w	r2, [r2, #70]	; 0x46
 800e76e:	fb93 f1f2 	sdiv	r1, r3, r2
 800e772:	fb02 f201 	mul.w	r2, r2, r1
 800e776:	1a9b      	subs	r3, r3, r2
 800e778:	b21a      	sxth	r2, r3
 800e77a:	4b3c      	ldr	r3, [pc, #240]	; (800e86c <NotePixel+0x118>)
 800e77c:	801a      	strh	r2, [r3, #0]
  Ny = Ny%ParamTab[HYx2];             // Nx, Ny �����򷵻����
 800e77e:	4b3d      	ldr	r3, [pc, #244]	; (800e874 <NotePixel+0x120>)
 800e780:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e784:	4a3a      	ldr	r2, [pc, #232]	; (800e870 <NotePixel+0x11c>)
 800e786:	f9b2 204a 	ldrsh.w	r2, [r2, #74]	; 0x4a
 800e78a:	fb93 f1f2 	sdiv	r1, r3, r2
 800e78e:	fb02 f201 	mul.w	r2, r2, r1
 800e792:	1a9b      	subs	r3, r3, r2
 800e794:	b21a      	sxth	r2, r3
 800e796:	4b37      	ldr	r3, [pc, #220]	; (800e874 <NotePixel+0x120>)
 800e798:	801a      	strh	r2, [r3, #0]
  i  = Nx*(ParamTab[HYx2]/32)+ Ny/16;
 800e79a:	4b35      	ldr	r3, [pc, #212]	; (800e870 <NotePixel+0x11c>)
 800e79c:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	da00      	bge.n	800e7a6 <NotePixel+0x52>
 800e7a4:	331f      	adds	r3, #31
 800e7a6:	115b      	asrs	r3, r3, #5
 800e7a8:	b21b      	sxth	r3, r3
 800e7aa:	b29a      	uxth	r2, r3
 800e7ac:	4b2f      	ldr	r3, [pc, #188]	; (800e86c <NotePixel+0x118>)
 800e7ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e7b2:	b29b      	uxth	r3, r3
 800e7b4:	fb12 f303 	smulbb	r3, r2, r3
 800e7b8:	b29a      	uxth	r2, r3
 800e7ba:	4b2e      	ldr	r3, [pc, #184]	; (800e874 <NotePixel+0x120>)
 800e7bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	da00      	bge.n	800e7c6 <NotePixel+0x72>
 800e7c4:	330f      	adds	r3, #15
 800e7c6:	111b      	asrs	r3, r3, #4
 800e7c8:	b21b      	sxth	r3, r3
 800e7ca:	b29b      	uxth	r3, r3
 800e7cc:	4413      	add	r3, r2
 800e7ce:	b29b      	uxth	r3, r3
 800e7d0:	817b      	strh	r3, [r7, #10]
  j  = Ny%16;
 800e7d2:	4b28      	ldr	r3, [pc, #160]	; (800e874 <NotePixel+0x120>)
 800e7d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e7d8:	425a      	negs	r2, r3
 800e7da:	f003 030f 	and.w	r3, r3, #15
 800e7de:	f002 020f 	and.w	r2, r2, #15
 800e7e2:	bf58      	it	pl
 800e7e4:	4253      	negpl	r3, r2
 800e7e6:	813b      	strh	r3, [r7, #8]
  if(Color) pBuf[i] |=  1 << j;
 800e7e8:	79fb      	ldrb	r3, [r7, #7]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d015      	beq.n	800e81a <NotePixel+0xc6>
 800e7ee:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e7f2:	005b      	lsls	r3, r3, #1
 800e7f4:	68fa      	ldr	r2, [r7, #12]
 800e7f6:	4413      	add	r3, r2
 800e7f8:	f9b3 1000 	ldrsh.w	r1, [r3]
 800e7fc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800e800:	2201      	movs	r2, #1
 800e802:	fa02 f303 	lsl.w	r3, r2, r3
 800e806:	b21a      	sxth	r2, r3
 800e808:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e80c:	005b      	lsls	r3, r3, #1
 800e80e:	68f8      	ldr	r0, [r7, #12]
 800e810:	4403      	add	r3, r0
 800e812:	430a      	orrs	r2, r1
 800e814:	b212      	sxth	r2, r2
 800e816:	801a      	strh	r2, [r3, #0]
 800e818:	e016      	b.n	800e848 <NotePixel+0xf4>
  else      pBuf[i] &=~(1 << j);
 800e81a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e81e:	005b      	lsls	r3, r3, #1
 800e820:	68fa      	ldr	r2, [r7, #12]
 800e822:	4413      	add	r3, r2
 800e824:	f9b3 1000 	ldrsh.w	r1, [r3]
 800e828:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800e82c:	2201      	movs	r2, #1
 800e82e:	fa02 f303 	lsl.w	r3, r2, r3
 800e832:	b21b      	sxth	r3, r3
 800e834:	43db      	mvns	r3, r3
 800e836:	b21a      	sxth	r2, r3
 800e838:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e83c:	005b      	lsls	r3, r3, #1
 800e83e:	68f8      	ldr	r0, [r7, #12]
 800e840:	4403      	add	r3, r0
 800e842:	400a      	ands	r2, r1
 800e844:	b212      	sxth	r2, r2
 800e846:	801a      	strh	r2, [r3, #0]
  Ny++;
 800e848:	4b0a      	ldr	r3, [pc, #40]	; (800e874 <NotePixel+0x120>)
 800e84a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e84e:	b29b      	uxth	r3, r3
 800e850:	3301      	adds	r3, #1
 800e852:	b29b      	uxth	r3, r3
 800e854:	b21a      	sxth	r2, r3
 800e856:	4b07      	ldr	r3, [pc, #28]	; (800e874 <NotePixel+0x120>)
 800e858:	801a      	strh	r2, [r3, #0]
}
 800e85a:	bf00      	nop
 800e85c:	3714      	adds	r7, #20
 800e85e:	46bd      	mov	sp, r7
 800e860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e864:	4770      	bx	lr
 800e866:	bf00      	nop
 800e868:	20000f94 	.word	0x20000f94
 800e86c:	20000002 	.word	0x20000002
 800e870:	20000140 	.word	0x20000140
 800e874:	20000004 	.word	0x20000004

0800e878 <Buil_Pop>:

/*******************************************************************************
  Bull_Pop: ������������ݼ���������   �������: Nx, Ny, Wx, Hy
*******************************************************************************/
void Buil_Pop(void)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b082      	sub	sp, #8
 800e87c:	af00      	add	r7, sp, #0
  short i;
  memset(&WaveBuf[TRACK1_SIZE+TRACK2_SIZE+TRACK23_SIZE], BLK, POP_SIZE);
 800e87e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800e882:	2100      	movs	r1, #0
 800e884:	487f      	ldr	r0, [pc, #508]	; (800ea84 <Buil_Pop+0x20c>)
 800e886:	f014 fbef 	bl	8023068 <memset>
  Nx = 0; Ny = 3; for(i=0; i<ParamTab[HYx2]/2-6; i++) NotePixel(1);
 800e88a:	4b7f      	ldr	r3, [pc, #508]	; (800ea88 <Buil_Pop+0x210>)
 800e88c:	2200      	movs	r2, #0
 800e88e:	801a      	strh	r2, [r3, #0]
 800e890:	4b7e      	ldr	r3, [pc, #504]	; (800ea8c <Buil_Pop+0x214>)
 800e892:	2203      	movs	r2, #3
 800e894:	801a      	strh	r2, [r3, #0]
 800e896:	2300      	movs	r3, #0
 800e898:	80fb      	strh	r3, [r7, #6]
 800e89a:	e008      	b.n	800e8ae <Buil_Pop+0x36>
 800e89c:	2001      	movs	r0, #1
 800e89e:	f7ff ff59 	bl	800e754 <NotePixel>
 800e8a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e8a6:	b29b      	uxth	r3, r3
 800e8a8:	3301      	adds	r3, #1
 800e8aa:	b29b      	uxth	r3, r3
 800e8ac:	80fb      	strh	r3, [r7, #6]
 800e8ae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e8b2:	4b77      	ldr	r3, [pc, #476]	; (800ea90 <Buil_Pop+0x218>)
 800e8b4:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e8b8:	0fd9      	lsrs	r1, r3, #31
 800e8ba:	440b      	add	r3, r1
 800e8bc:	105b      	asrs	r3, r3, #1
 800e8be:	b21b      	sxth	r3, r3
 800e8c0:	3b06      	subs	r3, #6
 800e8c2:	429a      	cmp	r2, r3
 800e8c4:	dbea      	blt.n	800e89c <Buil_Pop+0x24>
  Nx = 1; Ny = 2;                    NotePixel(1);
 800e8c6:	4b70      	ldr	r3, [pc, #448]	; (800ea88 <Buil_Pop+0x210>)
 800e8c8:	2201      	movs	r2, #1
 800e8ca:	801a      	strh	r2, [r3, #0]
 800e8cc:	4b6f      	ldr	r3, [pc, #444]	; (800ea8c <Buil_Pop+0x214>)
 800e8ce:	2202      	movs	r2, #2
 800e8d0:	801a      	strh	r2, [r3, #0]
 800e8d2:	2001      	movs	r0, #1
 800e8d4:	f7ff ff3e 	bl	800e754 <NotePixel>
  Nx = 1; Ny = ParamTab[HYx2]/2 - 3; NotePixel(1);
 800e8d8:	4b6b      	ldr	r3, [pc, #428]	; (800ea88 <Buil_Pop+0x210>)
 800e8da:	2201      	movs	r2, #1
 800e8dc:	801a      	strh	r2, [r3, #0]
 800e8de:	4b6c      	ldr	r3, [pc, #432]	; (800ea90 <Buil_Pop+0x218>)
 800e8e0:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e8e4:	0fda      	lsrs	r2, r3, #31
 800e8e6:	4413      	add	r3, r2
 800e8e8:	105b      	asrs	r3, r3, #1
 800e8ea:	b21b      	sxth	r3, r3
 800e8ec:	b29b      	uxth	r3, r3
 800e8ee:	3b03      	subs	r3, #3
 800e8f0:	b29b      	uxth	r3, r3
 800e8f2:	b21a      	sxth	r2, r3
 800e8f4:	4b65      	ldr	r3, [pc, #404]	; (800ea8c <Buil_Pop+0x214>)
 800e8f6:	801a      	strh	r2, [r3, #0]
 800e8f8:	2001      	movs	r0, #1
 800e8fa:	f7ff ff2b 	bl	800e754 <NotePixel>
  Nx = 2; Ny = 1;                    NotePixel(1);
 800e8fe:	4b62      	ldr	r3, [pc, #392]	; (800ea88 <Buil_Pop+0x210>)
 800e900:	2202      	movs	r2, #2
 800e902:	801a      	strh	r2, [r3, #0]
 800e904:	4b61      	ldr	r3, [pc, #388]	; (800ea8c <Buil_Pop+0x214>)
 800e906:	2201      	movs	r2, #1
 800e908:	801a      	strh	r2, [r3, #0]
 800e90a:	2001      	movs	r0, #1
 800e90c:	f7ff ff22 	bl	800e754 <NotePixel>
  Nx = 2; Ny = ParamTab[HYx2]/2 - 2; NotePixel(1);
 800e910:	4b5d      	ldr	r3, [pc, #372]	; (800ea88 <Buil_Pop+0x210>)
 800e912:	2202      	movs	r2, #2
 800e914:	801a      	strh	r2, [r3, #0]
 800e916:	4b5e      	ldr	r3, [pc, #376]	; (800ea90 <Buil_Pop+0x218>)
 800e918:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e91c:	0fda      	lsrs	r2, r3, #31
 800e91e:	4413      	add	r3, r2
 800e920:	105b      	asrs	r3, r3, #1
 800e922:	b21b      	sxth	r3, r3
 800e924:	b29b      	uxth	r3, r3
 800e926:	3b02      	subs	r3, #2
 800e928:	b29b      	uxth	r3, r3
 800e92a:	b21a      	sxth	r2, r3
 800e92c:	4b57      	ldr	r3, [pc, #348]	; (800ea8c <Buil_Pop+0x214>)
 800e92e:	801a      	strh	r2, [r3, #0]
 800e930:	2001      	movs	r0, #1
 800e932:	f7ff ff0f 	bl	800e754 <NotePixel>
  for(Nx=3; Nx<ParamTab[WXx1]-2; Nx++)
 800e936:	4b54      	ldr	r3, [pc, #336]	; (800ea88 <Buil_Pop+0x210>)
 800e938:	2203      	movs	r2, #3
 800e93a:	801a      	strh	r2, [r3, #0]
 800e93c:	e01e      	b.n	800e97c <Buil_Pop+0x104>
  {
    Ny = 0;                     NotePixel(1);
 800e93e:	4b53      	ldr	r3, [pc, #332]	; (800ea8c <Buil_Pop+0x214>)
 800e940:	2200      	movs	r2, #0
 800e942:	801a      	strh	r2, [r3, #0]
 800e944:	2001      	movs	r0, #1
 800e946:	f7ff ff05 	bl	800e754 <NotePixel>
    Ny = ParamTab[HYx2]/2 - 1;; NotePixel(1);
 800e94a:	4b51      	ldr	r3, [pc, #324]	; (800ea90 <Buil_Pop+0x218>)
 800e94c:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e950:	0fda      	lsrs	r2, r3, #31
 800e952:	4413      	add	r3, r2
 800e954:	105b      	asrs	r3, r3, #1
 800e956:	b21b      	sxth	r3, r3
 800e958:	b29b      	uxth	r3, r3
 800e95a:	3b01      	subs	r3, #1
 800e95c:	b29b      	uxth	r3, r3
 800e95e:	b21a      	sxth	r2, r3
 800e960:	4b4a      	ldr	r3, [pc, #296]	; (800ea8c <Buil_Pop+0x214>)
 800e962:	801a      	strh	r2, [r3, #0]
 800e964:	2001      	movs	r0, #1
 800e966:	f7ff fef5 	bl	800e754 <NotePixel>
  for(Nx=3; Nx<ParamTab[WXx1]-2; Nx++)
 800e96a:	4b47      	ldr	r3, [pc, #284]	; (800ea88 <Buil_Pop+0x210>)
 800e96c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e970:	b29b      	uxth	r3, r3
 800e972:	3301      	adds	r3, #1
 800e974:	b29b      	uxth	r3, r3
 800e976:	b21a      	sxth	r2, r3
 800e978:	4b43      	ldr	r3, [pc, #268]	; (800ea88 <Buil_Pop+0x210>)
 800e97a:	801a      	strh	r2, [r3, #0]
 800e97c:	4b42      	ldr	r3, [pc, #264]	; (800ea88 <Buil_Pop+0x210>)
 800e97e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e982:	461a      	mov	r2, r3
 800e984:	4b42      	ldr	r3, [pc, #264]	; (800ea90 <Buil_Pop+0x218>)
 800e986:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e98a:	3b02      	subs	r3, #2
 800e98c:	429a      	cmp	r2, r3
 800e98e:	dbd6      	blt.n	800e93e <Buil_Pop+0xc6>
  }
  Nx = ParamTab[WXx1]-3; Ny = 1;                    NotePixel(1);
 800e990:	4b3f      	ldr	r3, [pc, #252]	; (800ea90 <Buil_Pop+0x218>)
 800e992:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e996:	b29b      	uxth	r3, r3
 800e998:	3b03      	subs	r3, #3
 800e99a:	b29b      	uxth	r3, r3
 800e99c:	b21a      	sxth	r2, r3
 800e99e:	4b3a      	ldr	r3, [pc, #232]	; (800ea88 <Buil_Pop+0x210>)
 800e9a0:	801a      	strh	r2, [r3, #0]
 800e9a2:	4b3a      	ldr	r3, [pc, #232]	; (800ea8c <Buil_Pop+0x214>)
 800e9a4:	2201      	movs	r2, #1
 800e9a6:	801a      	strh	r2, [r3, #0]
 800e9a8:	2001      	movs	r0, #1
 800e9aa:	f7ff fed3 	bl	800e754 <NotePixel>
  Nx = ParamTab[WXx1]-3; Ny = ParamTab[HYx2]/2 - 2; NotePixel(1);
 800e9ae:	4b38      	ldr	r3, [pc, #224]	; (800ea90 <Buil_Pop+0x218>)
 800e9b0:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e9b4:	b29b      	uxth	r3, r3
 800e9b6:	3b03      	subs	r3, #3
 800e9b8:	b29b      	uxth	r3, r3
 800e9ba:	b21a      	sxth	r2, r3
 800e9bc:	4b32      	ldr	r3, [pc, #200]	; (800ea88 <Buil_Pop+0x210>)
 800e9be:	801a      	strh	r2, [r3, #0]
 800e9c0:	4b33      	ldr	r3, [pc, #204]	; (800ea90 <Buil_Pop+0x218>)
 800e9c2:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e9c6:	0fda      	lsrs	r2, r3, #31
 800e9c8:	4413      	add	r3, r2
 800e9ca:	105b      	asrs	r3, r3, #1
 800e9cc:	b21b      	sxth	r3, r3
 800e9ce:	b29b      	uxth	r3, r3
 800e9d0:	3b02      	subs	r3, #2
 800e9d2:	b29b      	uxth	r3, r3
 800e9d4:	b21a      	sxth	r2, r3
 800e9d6:	4b2d      	ldr	r3, [pc, #180]	; (800ea8c <Buil_Pop+0x214>)
 800e9d8:	801a      	strh	r2, [r3, #0]
 800e9da:	2001      	movs	r0, #1
 800e9dc:	f7ff feba 	bl	800e754 <NotePixel>
  Nx = ParamTab[WXx1]-2; Ny = 2;                    NotePixel(1);
 800e9e0:	4b2b      	ldr	r3, [pc, #172]	; (800ea90 <Buil_Pop+0x218>)
 800e9e2:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e9e6:	b29b      	uxth	r3, r3
 800e9e8:	3b02      	subs	r3, #2
 800e9ea:	b29b      	uxth	r3, r3
 800e9ec:	b21a      	sxth	r2, r3
 800e9ee:	4b26      	ldr	r3, [pc, #152]	; (800ea88 <Buil_Pop+0x210>)
 800e9f0:	801a      	strh	r2, [r3, #0]
 800e9f2:	4b26      	ldr	r3, [pc, #152]	; (800ea8c <Buil_Pop+0x214>)
 800e9f4:	2202      	movs	r2, #2
 800e9f6:	801a      	strh	r2, [r3, #0]
 800e9f8:	2001      	movs	r0, #1
 800e9fa:	f7ff feab 	bl	800e754 <NotePixel>
  Nx = ParamTab[WXx1]-2; Ny = ParamTab[HYx2]/2 - 3; NotePixel(1);
 800e9fe:	4b24      	ldr	r3, [pc, #144]	; (800ea90 <Buil_Pop+0x218>)
 800ea00:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800ea04:	b29b      	uxth	r3, r3
 800ea06:	3b02      	subs	r3, #2
 800ea08:	b29b      	uxth	r3, r3
 800ea0a:	b21a      	sxth	r2, r3
 800ea0c:	4b1e      	ldr	r3, [pc, #120]	; (800ea88 <Buil_Pop+0x210>)
 800ea0e:	801a      	strh	r2, [r3, #0]
 800ea10:	4b1f      	ldr	r3, [pc, #124]	; (800ea90 <Buil_Pop+0x218>)
 800ea12:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800ea16:	0fda      	lsrs	r2, r3, #31
 800ea18:	4413      	add	r3, r2
 800ea1a:	105b      	asrs	r3, r3, #1
 800ea1c:	b21b      	sxth	r3, r3
 800ea1e:	b29b      	uxth	r3, r3
 800ea20:	3b03      	subs	r3, #3
 800ea22:	b29b      	uxth	r3, r3
 800ea24:	b21a      	sxth	r2, r3
 800ea26:	4b19      	ldr	r3, [pc, #100]	; (800ea8c <Buil_Pop+0x214>)
 800ea28:	801a      	strh	r2, [r3, #0]
 800ea2a:	2001      	movs	r0, #1
 800ea2c:	f7ff fe92 	bl	800e754 <NotePixel>
  Nx = ParamTab[WXx1]-1; Ny = 3; for(i=0; i<ParamTab[HYx2]/2-6; i++) NotePixel(1);
 800ea30:	4b17      	ldr	r3, [pc, #92]	; (800ea90 <Buil_Pop+0x218>)
 800ea32:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800ea36:	b29b      	uxth	r3, r3
 800ea38:	3b01      	subs	r3, #1
 800ea3a:	b29b      	uxth	r3, r3
 800ea3c:	b21a      	sxth	r2, r3
 800ea3e:	4b12      	ldr	r3, [pc, #72]	; (800ea88 <Buil_Pop+0x210>)
 800ea40:	801a      	strh	r2, [r3, #0]
 800ea42:	4b12      	ldr	r3, [pc, #72]	; (800ea8c <Buil_Pop+0x214>)
 800ea44:	2203      	movs	r2, #3
 800ea46:	801a      	strh	r2, [r3, #0]
 800ea48:	2300      	movs	r3, #0
 800ea4a:	80fb      	strh	r3, [r7, #6]
 800ea4c:	e008      	b.n	800ea60 <Buil_Pop+0x1e8>
 800ea4e:	2001      	movs	r0, #1
 800ea50:	f7ff fe80 	bl	800e754 <NotePixel>
 800ea54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ea58:	b29b      	uxth	r3, r3
 800ea5a:	3301      	adds	r3, #1
 800ea5c:	b29b      	uxth	r3, r3
 800ea5e:	80fb      	strh	r3, [r7, #6]
 800ea60:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ea64:	4b0a      	ldr	r3, [pc, #40]	; (800ea90 <Buil_Pop+0x218>)
 800ea66:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800ea6a:	0fd9      	lsrs	r1, r3, #31
 800ea6c:	440b      	add	r3, r1
 800ea6e:	105b      	asrs	r3, r3, #1
 800ea70:	b21b      	sxth	r3, r3
 800ea72:	3b06      	subs	r3, #6
 800ea74:	429a      	cmp	r2, r3
 800ea76:	dbea      	blt.n	800ea4e <Buil_Pop+0x1d6>
}
 800ea78:	bf00      	nop
 800ea7a:	bf00      	nop
 800ea7c:	3708      	adds	r7, #8
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	bd80      	pop	{r7, pc}
 800ea82:	bf00      	nop
 800ea84:	20000f94 	.word	0x20000f94
 800ea88:	20000002 	.word	0x20000002
 800ea8c:	20000004 	.word	0x20000004
 800ea90:	20000140 	.word	0x20000140

0800ea94 <PopColor>:

/*******************************************************************************
 PopColor: ��������ɫ����
*******************************************************************************/
void PopColor(unsigned short Board_Color, unsigned short Text_Color)
{
 800ea94:	b480      	push	{r7}
 800ea96:	b083      	sub	sp, #12
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	460a      	mov	r2, r1
 800ea9e:	80fb      	strh	r3, [r7, #6]
 800eaa0:	4613      	mov	r3, r2
 800eaa2:	80bb      	strh	r3, [r7, #4]
  ParamTab[POP_B] = Board_Color;
 800eaa4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800eaa8:	4b06      	ldr	r3, [pc, #24]	; (800eac4 <PopColor+0x30>)
 800eaaa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  ParamTab[POP_T] = Text_Color;
 800eaae:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800eab2:	4b04      	ldr	r3, [pc, #16]	; (800eac4 <PopColor+0x30>)
 800eab4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 800eab8:	bf00      	nop
 800eaba:	370c      	adds	r7, #12
 800eabc:	46bd      	mov	sp, r7
 800eabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac2:	4770      	bx	lr
 800eac4:	20000140 	.word	0x20000140

0800eac8 <Close_Pop>:

/*******************************************************************************
  Close_Pop: �رղ˵������Ự��
*******************************************************************************/
void Close_Pop(void)
{
 800eac8:	b480      	push	{r7}
 800eaca:	af00      	add	r7, sp, #0
  PopType &= ~(LIST_POP | DAILOG_POP);
 800eacc:	4b07      	ldr	r3, [pc, #28]	; (800eaec <Close_Pop+0x24>)
 800eace:	781b      	ldrb	r3, [r3, #0]
 800ead0:	f023 0306 	bic.w	r3, r3, #6
 800ead4:	b2da      	uxtb	r2, r3
 800ead6:	4b05      	ldr	r3, [pc, #20]	; (800eaec <Close_Pop+0x24>)
 800ead8:	701a      	strb	r2, [r3, #0]
  ParamTab[POP_F] = P_HID;
 800eada:	4b05      	ldr	r3, [pc, #20]	; (800eaf0 <Close_Pop+0x28>)
 800eadc:	2201      	movs	r2, #1
 800eade:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800eae2:	bf00      	nop
 800eae4:	46bd      	mov	sp, r7
 800eae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaea:	4770      	bx	lr
 800eaec:	20000794 	.word	0x20000794
 800eaf0:	20000140 	.word	0x20000140

0800eaf4 <List_Pop>:

/*******************************************************************************
  List_Pop: �򿪲˵���
*******************************************************************************/
void List_Pop(void)
{
 800eaf4:	b480      	push	{r7}
 800eaf6:	af00      	add	r7, sp, #0
  PopType |= LIST_POP;
 800eaf8:	4b07      	ldr	r3, [pc, #28]	; (800eb18 <List_Pop+0x24>)
 800eafa:	781b      	ldrb	r3, [r3, #0]
 800eafc:	f043 0302 	orr.w	r3, r3, #2
 800eb00:	b2da      	uxtb	r2, r3
 800eb02:	4b05      	ldr	r3, [pc, #20]	; (800eb18 <List_Pop+0x24>)
 800eb04:	701a      	strb	r2, [r3, #0]
  ParamTab[POP_F] = SHOW;
 800eb06:	4b05      	ldr	r3, [pc, #20]	; (800eb1c <List_Pop+0x28>)
 800eb08:	2200      	movs	r2, #0
 800eb0a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800eb0e:	bf00      	nop
 800eb10:	46bd      	mov	sp, r7
 800eb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb16:	4770      	bx	lr
 800eb18:	20000794 	.word	0x20000794
 800eb1c:	20000140 	.word	0x20000140

0800eb20 <Dialog_Pop>:

/*******************************************************************************
  Dialog_Pop: �����Ự��
*******************************************************************************/
void Dialog_Pop(char* Str)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b084      	sub	sp, #16
 800eb24:	af02      	add	r7, sp, #8
 800eb26:	6078      	str	r0, [r7, #4]
  PopType |= DAILOG_POP;
 800eb28:	4b2a      	ldr	r3, [pc, #168]	; (800ebd4 <Dialog_Pop+0xb4>)
 800eb2a:	781b      	ldrb	r3, [r3, #0]
 800eb2c:	f043 0304 	orr.w	r3, r3, #4
 800eb30:	b2da      	uxtb	r2, r3
 800eb32:	4b28      	ldr	r3, [pc, #160]	; (800ebd4 <Dialog_Pop+0xb4>)
 800eb34:	701a      	strb	r2, [r3, #0]
  ParamTab[WXx1]= 16*8;
 800eb36:	4b28      	ldr	r3, [pc, #160]	; (800ebd8 <Dialog_Pop+0xb8>)
 800eb38:	2280      	movs	r2, #128	; 0x80
 800eb3a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  ParamTab[HYx2]= 2*3*16;
 800eb3e:	4b26      	ldr	r3, [pc, #152]	; (800ebd8 <Dialog_Pop+0xb8>)
 800eb40:	2260      	movs	r2, #96	; 0x60
 800eb42:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  ParamTab[BXx1]= 80;
 800eb46:	4b24      	ldr	r3, [pc, #144]	; (800ebd8 <Dialog_Pop+0xb8>)
 800eb48:	2250      	movs	r2, #80	; 0x50
 800eb4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  ParamTab[BYx2]= 200;
 800eb4e:	4b22      	ldr	r3, [pc, #136]	; (800ebd8 <Dialog_Pop+0xb8>)
 800eb50:	22c8      	movs	r2, #200	; 0xc8
 800eb52:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  PopColor(WHT, DAR);
 800eb56:	f643 11e7 	movw	r1, #14823	; 0x39e7
 800eb5a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800eb5e:	f7ff ff99 	bl	800ea94 <PopColor>
  Buil_Pop();
 800eb62:	f7ff fe89 	bl	800e878 <Buil_Pop>
  NoteSTR( 1*8, 28, PRN, Str);
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	2200      	movs	r2, #0
 800eb6a:	211c      	movs	r1, #28
 800eb6c:	2008      	movs	r0, #8
 800eb6e:	f000 f8e1 	bl	800ed34 <NoteSTR>
  NoteSTR( 2*6, 8, SYMB+INV,  "{|");
 800eb72:	4b1a      	ldr	r3, [pc, #104]	; (800ebdc <Dialog_Pop+0xbc>)
 800eb74:	2211      	movs	r2, #17
 800eb76:	2108      	movs	r1, #8
 800eb78:	200c      	movs	r0, #12
 800eb7a:	f000 f8db 	bl	800ed34 <NoteSTR>
  Note_4Point(PRN, 2*6, 8, 2, 10);
 800eb7e:	230a      	movs	r3, #10
 800eb80:	9300      	str	r3, [sp, #0]
 800eb82:	2302      	movs	r3, #2
 800eb84:	2208      	movs	r2, #8
 800eb86:	210c      	movs	r1, #12
 800eb88:	2000      	movs	r0, #0
 800eb8a:	f000 f979 	bl	800ee80 <Note_4Point>
  NoteSTR( 4*6, 8, PRN,  ": Yes");
 800eb8e:	4b14      	ldr	r3, [pc, #80]	; (800ebe0 <Dialog_Pop+0xc0>)
 800eb90:	2200      	movs	r2, #0
 800eb92:	2108      	movs	r1, #8
 800eb94:	2018      	movs	r0, #24
 800eb96:	f000 f8cd 	bl	800ed34 <NoteSTR>
  NoteSTR(12*6, 8, SYMB+INV,  "yz");
 800eb9a:	4b12      	ldr	r3, [pc, #72]	; (800ebe4 <Dialog_Pop+0xc4>)
 800eb9c:	2211      	movs	r2, #17
 800eb9e:	2108      	movs	r1, #8
 800eba0:	2048      	movs	r0, #72	; 0x48
 800eba2:	f000 f8c7 	bl	800ed34 <NoteSTR>
  Note_4Point(PRN, 12*6, 8, 2, 10);
 800eba6:	230a      	movs	r3, #10
 800eba8:	9300      	str	r3, [sp, #0]
 800ebaa:	2302      	movs	r3, #2
 800ebac:	2208      	movs	r2, #8
 800ebae:	2148      	movs	r1, #72	; 0x48
 800ebb0:	2000      	movs	r0, #0
 800ebb2:	f000 f965 	bl	800ee80 <Note_4Point>
  NoteSTR(14*6, 8, PRN,  ": No");
 800ebb6:	4b0c      	ldr	r3, [pc, #48]	; (800ebe8 <Dialog_Pop+0xc8>)
 800ebb8:	2200      	movs	r2, #0
 800ebba:	2108      	movs	r1, #8
 800ebbc:	2054      	movs	r0, #84	; 0x54
 800ebbe:	f000 f8b9 	bl	800ed34 <NoteSTR>
  ParamTab[POP_F] = SHOW;
 800ebc2:	4b05      	ldr	r3, [pc, #20]	; (800ebd8 <Dialog_Pop+0xb8>)
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800ebca:	bf00      	nop
 800ebcc:	3708      	adds	r7, #8
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	bd80      	pop	{r7, pc}
 800ebd2:	bf00      	nop
 800ebd4:	20000794 	.word	0x20000794
 800ebd8:	20000140 	.word	0x20000140
 800ebdc:	080001c4 	.word	0x080001c4
 800ebe0:	080001c8 	.word	0x080001c8
 800ebe4:	080001d0 	.word	0x080001d0
 800ebe8:	080001d4 	.word	0x080001d4

0800ebec <Calibrate_Pop>:

/*******************************************************************************
  Calibrate_Pop: �����Ự��
*******************************************************************************/
void Calibrate_Pop(char* Str)
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b082      	sub	sp, #8
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
  PopType |= DAILOG_POP;
 800ebf4:	4b16      	ldr	r3, [pc, #88]	; (800ec50 <Calibrate_Pop+0x64>)
 800ebf6:	781b      	ldrb	r3, [r3, #0]
 800ebf8:	f043 0304 	orr.w	r3, r3, #4
 800ebfc:	b2da      	uxtb	r2, r3
 800ebfe:	4b14      	ldr	r3, [pc, #80]	; (800ec50 <Calibrate_Pop+0x64>)
 800ec00:	701a      	strb	r2, [r3, #0]
  ParamTab[WXx1]= 25*8;
 800ec02:	4b14      	ldr	r3, [pc, #80]	; (800ec54 <Calibrate_Pop+0x68>)
 800ec04:	22c8      	movs	r2, #200	; 0xc8
 800ec06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  ParamTab[HYx2]= 4*16;
 800ec0a:	4b12      	ldr	r3, [pc, #72]	; (800ec54 <Calibrate_Pop+0x68>)
 800ec0c:	2240      	movs	r2, #64	; 0x40
 800ec0e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  ParamTab[BXx1]= 50;
 800ec12:	4b10      	ldr	r3, [pc, #64]	; (800ec54 <Calibrate_Pop+0x68>)
 800ec14:	2232      	movs	r2, #50	; 0x32
 800ec16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  ParamTab[BYx2]= 230;
 800ec1a:	4b0e      	ldr	r3, [pc, #56]	; (800ec54 <Calibrate_Pop+0x68>)
 800ec1c:	22e6      	movs	r2, #230	; 0xe6
 800ec1e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  PopColor(WHT, DAR);
 800ec22:	f643 11e7 	movw	r1, #14823	; 0x39e7
 800ec26:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ec2a:	f7ff ff33 	bl	800ea94 <PopColor>
  Buil_Pop();
 800ec2e:	f7ff fe23 	bl	800e878 <Buil_Pop>
  NoteSTR( 2*8, 10, PRN, Str);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2200      	movs	r2, #0
 800ec36:	210a      	movs	r1, #10
 800ec38:	2010      	movs	r0, #16
 800ec3a:	f000 f87b 	bl	800ed34 <NoteSTR>
  ParamTab[POP_F] = SHOW;
 800ec3e:	4b05      	ldr	r3, [pc, #20]	; (800ec54 <Calibrate_Pop+0x68>)
 800ec40:	2200      	movs	r2, #0
 800ec42:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800ec46:	bf00      	nop
 800ec48:	3708      	adds	r7, #8
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}
 800ec4e:	bf00      	nop
 800ec50:	20000794 	.word	0x20000794
 800ec54:	20000140 	.word	0x20000140

0800ec58 <CalSave_Pop>:

/*******************************************************************************
  CalSaveg_Pop: �����Ự��
*******************************************************************************/
void CalSave_Pop(char* Str)
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b084      	sub	sp, #16
 800ec5c:	af02      	add	r7, sp, #8
 800ec5e:	6078      	str	r0, [r7, #4]
  PopType |= DAILOG_POP;
 800ec60:	4b2d      	ldr	r3, [pc, #180]	; (800ed18 <CalSave_Pop+0xc0>)
 800ec62:	781b      	ldrb	r3, [r3, #0]
 800ec64:	f043 0304 	orr.w	r3, r3, #4
 800ec68:	b2da      	uxtb	r2, r3
 800ec6a:	4b2b      	ldr	r3, [pc, #172]	; (800ed18 <CalSave_Pop+0xc0>)
 800ec6c:	701a      	strb	r2, [r3, #0]
  ParamTab[WXx1]= 13*16;
 800ec6e:	4b2b      	ldr	r3, [pc, #172]	; (800ed1c <CalSave_Pop+0xc4>)
 800ec70:	22d0      	movs	r2, #208	; 0xd0
 800ec72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  ParamTab[HYx2]= 6*16;
 800ec76:	4b29      	ldr	r3, [pc, #164]	; (800ed1c <CalSave_Pop+0xc4>)
 800ec78:	2260      	movs	r2, #96	; 0x60
 800ec7a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  ParamTab[BXx1]= 30;
 800ec7e:	4b27      	ldr	r3, [pc, #156]	; (800ed1c <CalSave_Pop+0xc4>)
 800ec80:	221e      	movs	r2, #30
 800ec82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  ParamTab[BYx2]= 200;
 800ec86:	4b25      	ldr	r3, [pc, #148]	; (800ed1c <CalSave_Pop+0xc4>)
 800ec88:	22c8      	movs	r2, #200	; 0xc8
 800ec8a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  PopColor(WHT, DAR);
 800ec8e:	f643 11e7 	movw	r1, #14823	; 0x39e7
 800ec92:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ec96:	f7ff fefd 	bl	800ea94 <PopColor>
  Buil_Pop();
 800ec9a:	f7ff fded 	bl	800e878 <Buil_Pop>
  NoteSTR( 1*6, 28, PRN, "Complete Cal,");
 800ec9e:	4b20      	ldr	r3, [pc, #128]	; (800ed20 <CalSave_Pop+0xc8>)
 800eca0:	2200      	movs	r2, #0
 800eca2:	211c      	movs	r1, #28
 800eca4:	2006      	movs	r0, #6
 800eca6:	f000 f845 	bl	800ed34 <NoteSTR>
  NoteSTR( 15*6, 28, PRN, Str);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	2200      	movs	r2, #0
 800ecae:	211c      	movs	r1, #28
 800ecb0:	205a      	movs	r0, #90	; 0x5a
 800ecb2:	f000 f83f 	bl	800ed34 <NoteSTR>
  NoteSTR( 5*6, 8, SYMB+INV,  "{|");
 800ecb6:	4b1b      	ldr	r3, [pc, #108]	; (800ed24 <CalSave_Pop+0xcc>)
 800ecb8:	2211      	movs	r2, #17
 800ecba:	2108      	movs	r1, #8
 800ecbc:	201e      	movs	r0, #30
 800ecbe:	f000 f839 	bl	800ed34 <NoteSTR>
  Note_4Point(PRN, 5*6, 8, 2, 10);
 800ecc2:	230a      	movs	r3, #10
 800ecc4:	9300      	str	r3, [sp, #0]
 800ecc6:	2302      	movs	r3, #2
 800ecc8:	2208      	movs	r2, #8
 800ecca:	211e      	movs	r1, #30
 800eccc:	2000      	movs	r0, #0
 800ecce:	f000 f8d7 	bl	800ee80 <Note_4Point>
  NoteSTR( 7*6, 8, PRN,  ": Yes");
 800ecd2:	4b15      	ldr	r3, [pc, #84]	; (800ed28 <CalSave_Pop+0xd0>)
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	2108      	movs	r1, #8
 800ecd8:	202a      	movs	r0, #42	; 0x2a
 800ecda:	f000 f82b 	bl	800ed34 <NoteSTR>
  NoteSTR(20*6, 8, SYMB+INV,  "yz");
 800ecde:	4b13      	ldr	r3, [pc, #76]	; (800ed2c <CalSave_Pop+0xd4>)
 800ece0:	2211      	movs	r2, #17
 800ece2:	2108      	movs	r1, #8
 800ece4:	2078      	movs	r0, #120	; 0x78
 800ece6:	f000 f825 	bl	800ed34 <NoteSTR>
  Note_4Point(PRN, 20*6, 8, 2, 10);
 800ecea:	230a      	movs	r3, #10
 800ecec:	9300      	str	r3, [sp, #0]
 800ecee:	2302      	movs	r3, #2
 800ecf0:	2208      	movs	r2, #8
 800ecf2:	2178      	movs	r1, #120	; 0x78
 800ecf4:	2000      	movs	r0, #0
 800ecf6:	f000 f8c3 	bl	800ee80 <Note_4Point>
  NoteSTR(22*6, 8, PRN,  ": No");
 800ecfa:	4b0d      	ldr	r3, [pc, #52]	; (800ed30 <CalSave_Pop+0xd8>)
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	2108      	movs	r1, #8
 800ed00:	2084      	movs	r0, #132	; 0x84
 800ed02:	f000 f817 	bl	800ed34 <NoteSTR>
  ParamTab[POP_F] = SHOW;
 800ed06:	4b05      	ldr	r3, [pc, #20]	; (800ed1c <CalSave_Pop+0xc4>)
 800ed08:	2200      	movs	r2, #0
 800ed0a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800ed0e:	bf00      	nop
 800ed10:	3708      	adds	r7, #8
 800ed12:	46bd      	mov	sp, r7
 800ed14:	bd80      	pop	{r7, pc}
 800ed16:	bf00      	nop
 800ed18:	20000794 	.word	0x20000794
 800ed1c:	20000140 	.word	0x20000140
 800ed20:	080001dc 	.word	0x080001dc
 800ed24:	080001c4 	.word	0x080001c4
 800ed28:	080001c8 	.word	0x080001c8
 800ed2c:	080001d0 	.word	0x080001d0
 800ed30:	080001d4 	.word	0x080001d4

0800ed34 <NoteSTR>:

/*******************************************************************************
 NoteSTR: ����������ʾ�ַ�/ͼ�鴮      Mode = bit0: Normal/Inv, bit1: Char/Symb
*******************************************************************************/
void NoteSTR(short Nx0, short Ny0, char Mode, char *Str)
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b086      	sub	sp, #24
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	607b      	str	r3, [r7, #4]
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	81fb      	strh	r3, [r7, #14]
 800ed40:	460b      	mov	r3, r1
 800ed42:	81bb      	strh	r3, [r7, #12]
 800ed44:	4613      	mov	r3, r2
 800ed46:	72fb      	strb	r3, [r7, #11]

  char Code;
  short i, j, k;

  Nx = Nx0, Ny = Ny0;
 800ed48:	4a48      	ldr	r2, [pc, #288]	; (800ee6c <NoteSTR+0x138>)
 800ed4a:	89fb      	ldrh	r3, [r7, #14]
 800ed4c:	8013      	strh	r3, [r2, #0]
 800ed4e:	4a48      	ldr	r2, [pc, #288]	; (800ee70 <NoteSTR+0x13c>)
 800ed50:	89bb      	ldrh	r3, [r7, #12]
 800ed52:	8013      	strh	r3, [r2, #0]

  while(*Str != 0){
 800ed54:	e080      	b.n	800ee58 <NoteSTR+0x124>
    Code = *Str++;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	1c5a      	adds	r2, r3, #1
 800ed5a:	607a      	str	r2, [r7, #4]
 800ed5c:	781b      	ldrb	r3, [r3, #0]
 800ed5e:	747b      	strb	r3, [r7, #17]

    for(i=0; i<6; ++i){
 800ed60:	2300      	movs	r3, #0
 800ed62:	82fb      	strh	r3, [r7, #22]
 800ed64:	e074      	b.n	800ee50 <NoteSTR+0x11c>
      if(!(Mode & SYMB)) k = CHAR6x8[((Code-0X21)*6)+ i];
 800ed66:	7afb      	ldrb	r3, [r7, #11]
 800ed68:	f003 0310 	and.w	r3, r3, #16
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d10e      	bne.n	800ed8e <NoteSTR+0x5a>
 800ed70:	7c7b      	ldrb	r3, [r7, #17]
 800ed72:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800ed76:	4613      	mov	r3, r2
 800ed78:	005b      	lsls	r3, r3, #1
 800ed7a:	4413      	add	r3, r2
 800ed7c:	005b      	lsls	r3, r3, #1
 800ed7e:	461a      	mov	r2, r3
 800ed80:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ed84:	4413      	add	r3, r2
 800ed86:	4a3b      	ldr	r2, [pc, #236]	; (800ee74 <NoteSTR+0x140>)
 800ed88:	5cd3      	ldrb	r3, [r2, r3]
 800ed8a:	827b      	strh	r3, [r7, #18]
 800ed8c:	e00d      	b.n	800edaa <NoteSTR+0x76>
      else               k = SYMB6x8[(Code - '!')*6 + i];
 800ed8e:	7c7b      	ldrb	r3, [r7, #17]
 800ed90:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800ed94:	4613      	mov	r3, r2
 800ed96:	005b      	lsls	r3, r3, #1
 800ed98:	4413      	add	r3, r2
 800ed9a:	005b      	lsls	r3, r3, #1
 800ed9c:	461a      	mov	r2, r3
 800ed9e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800eda2:	4413      	add	r3, r2
 800eda4:	4a34      	ldr	r2, [pc, #208]	; (800ee78 <NoteSTR+0x144>)
 800eda6:	5cd3      	ldrb	r3, [r2, r3]
 800eda8:	827b      	strh	r3, [r7, #18]
      if(Mode & VOID) k &= (i%2)? 0xAAAA : 0x5555;
 800edaa:	7afb      	ldrb	r3, [r7, #11]
 800edac:	f003 0320 	and.w	r3, r3, #32
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d00c      	beq.n	800edce <NoteSTR+0x9a>
 800edb4:	8afb      	ldrh	r3, [r7, #22]
 800edb6:	f003 0301 	and.w	r3, r3, #1
 800edba:	b29b      	uxth	r3, r3
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d001      	beq.n	800edc4 <NoteSTR+0x90>
 800edc0:	4a2e      	ldr	r2, [pc, #184]	; (800ee7c <NoteSTR+0x148>)
 800edc2:	e001      	b.n	800edc8 <NoteSTR+0x94>
 800edc4:	f245 5255 	movw	r2, #21845	; 0x5555
 800edc8:	8a7b      	ldrh	r3, [r7, #18]
 800edca:	4013      	ands	r3, r2
 800edcc:	827b      	strh	r3, [r7, #18]
      k <<= 2;
 800edce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800edd2:	009b      	lsls	r3, r3, #2
 800edd4:	827b      	strh	r3, [r7, #18]
      for(j=0; j<14; ++j){  //j<8ʱ�����У�j<10������   �����¸�������
 800edd6:	2300      	movs	r3, #0
 800edd8:	82bb      	strh	r3, [r7, #20]
 800edda:	e01f      	b.n	800ee1c <NoteSTR+0xe8>
        if(k & 1)  NotePixel((Mode & INV)? 0 : 1);
 800eddc:	8a7b      	ldrh	r3, [r7, #18]
 800edde:	f003 0301 	and.w	r3, r3, #1
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d00b      	beq.n	800edfe <NoteSTR+0xca>
 800ede6:	7afb      	ldrb	r3, [r7, #11]
 800ede8:	f003 0301 	and.w	r3, r3, #1
 800edec:	2b00      	cmp	r3, #0
 800edee:	bf0c      	ite	eq
 800edf0:	2301      	moveq	r3, #1
 800edf2:	2300      	movne	r3, #0
 800edf4:	b2db      	uxtb	r3, r3
 800edf6:	4618      	mov	r0, r3
 800edf8:	f7ff fcac 	bl	800e754 <NotePixel>
 800edfc:	e006      	b.n	800ee0c <NoteSTR+0xd8>
        else       NotePixel((Mode & INV)? 1 : 0);
 800edfe:	7afb      	ldrb	r3, [r7, #11]
 800ee00:	f003 0301 	and.w	r3, r3, #1
 800ee04:	b2db      	uxtb	r3, r3
 800ee06:	4618      	mov	r0, r3
 800ee08:	f7ff fca4 	bl	800e754 <NotePixel>
       k >>= 1;
 800ee0c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ee10:	105b      	asrs	r3, r3, #1
 800ee12:	827b      	strh	r3, [r7, #18]
      for(j=0; j<14; ++j){  //j<8ʱ�����У�j<10������   �����¸�������
 800ee14:	8abb      	ldrh	r3, [r7, #20]
 800ee16:	3301      	adds	r3, #1
 800ee18:	b29b      	uxth	r3, r3
 800ee1a:	82bb      	strh	r3, [r7, #20]
 800ee1c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ee20:	2b0d      	cmp	r3, #13
 800ee22:	dddb      	ble.n	800eddc <NoteSTR+0xa8>
      }
      Nx++; Ny -= 14;
 800ee24:	4b11      	ldr	r3, [pc, #68]	; (800ee6c <NoteSTR+0x138>)
 800ee26:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee2a:	b29b      	uxth	r3, r3
 800ee2c:	3301      	adds	r3, #1
 800ee2e:	b29b      	uxth	r3, r3
 800ee30:	b21a      	sxth	r2, r3
 800ee32:	4b0e      	ldr	r3, [pc, #56]	; (800ee6c <NoteSTR+0x138>)
 800ee34:	801a      	strh	r2, [r3, #0]
 800ee36:	4b0e      	ldr	r3, [pc, #56]	; (800ee70 <NoteSTR+0x13c>)
 800ee38:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee3c:	b29b      	uxth	r3, r3
 800ee3e:	3b0e      	subs	r3, #14
 800ee40:	b29b      	uxth	r3, r3
 800ee42:	b21a      	sxth	r2, r3
 800ee44:	4b0a      	ldr	r3, [pc, #40]	; (800ee70 <NoteSTR+0x13c>)
 800ee46:	801a      	strh	r2, [r3, #0]
    for(i=0; i<6; ++i){
 800ee48:	8afb      	ldrh	r3, [r7, #22]
 800ee4a:	3301      	adds	r3, #1
 800ee4c:	b29b      	uxth	r3, r3
 800ee4e:	82fb      	strh	r3, [r7, #22]
 800ee50:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ee54:	2b05      	cmp	r3, #5
 800ee56:	dd86      	ble.n	800ed66 <NoteSTR+0x32>
  while(*Str != 0){
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	781b      	ldrb	r3, [r3, #0]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	f47f af7a 	bne.w	800ed56 <NoteSTR+0x22>
    }
  }
}
 800ee62:	bf00      	nop
 800ee64:	bf00      	nop
 800ee66:	3718      	adds	r7, #24
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	bd80      	pop	{r7, pc}
 800ee6c:	20000002 	.word	0x20000002
 800ee70:	20000004 	.word	0x20000004
 800ee74:	080016c4 	.word	0x080016c4
 800ee78:	08001490 	.word	0x08001490
 800ee7c:	ffffaaaa 	.word	0xffffaaaa

0800ee80 <Note_4Point>:

/*******************************************************************************
Note_4Point:���Ķ��ǵ�
*******************************************************************************/
void Note_4Point(char Mode, short x, short y, char Str_Cnt, char High)
{
 800ee80:	b590      	push	{r4, r7, lr}
 800ee82:	b083      	sub	sp, #12
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	4604      	mov	r4, r0
 800ee88:	4608      	mov	r0, r1
 800ee8a:	4611      	mov	r1, r2
 800ee8c:	461a      	mov	r2, r3
 800ee8e:	4623      	mov	r3, r4
 800ee90:	71fb      	strb	r3, [r7, #7]
 800ee92:	4603      	mov	r3, r0
 800ee94:	80bb      	strh	r3, [r7, #4]
 800ee96:	460b      	mov	r3, r1
 800ee98:	807b      	strh	r3, [r7, #2]
 800ee9a:	4613      	mov	r3, r2
 800ee9c:	71bb      	strb	r3, [r7, #6]
  High = High+4;
 800ee9e:	7e3b      	ldrb	r3, [r7, #24]
 800eea0:	3304      	adds	r3, #4
 800eea2:	763b      	strb	r3, [r7, #24]

  Nx = x, Ny = y;
 800eea4:	4a2e      	ldr	r2, [pc, #184]	; (800ef60 <Note_4Point+0xe0>)
 800eea6:	88bb      	ldrh	r3, [r7, #4]
 800eea8:	8013      	strh	r3, [r2, #0]
 800eeaa:	4a2e      	ldr	r2, [pc, #184]	; (800ef64 <Note_4Point+0xe4>)
 800eeac:	887b      	ldrh	r3, [r7, #2]
 800eeae:	8013      	strh	r3, [r2, #0]
  NotePixel((Mode & INV)? 1 : 0);
 800eeb0:	79fb      	ldrb	r3, [r7, #7]
 800eeb2:	f003 0301 	and.w	r3, r3, #1
 800eeb6:	b2db      	uxtb	r3, r3
 800eeb8:	4618      	mov	r0, r3
 800eeba:	f7ff fc4b 	bl	800e754 <NotePixel>
  Nx = x, Ny = y+High-1;
 800eebe:	4a28      	ldr	r2, [pc, #160]	; (800ef60 <Note_4Point+0xe0>)
 800eec0:	88bb      	ldrh	r3, [r7, #4]
 800eec2:	8013      	strh	r3, [r2, #0]
 800eec4:	7e3b      	ldrb	r3, [r7, #24]
 800eec6:	b29a      	uxth	r2, r3
 800eec8:	887b      	ldrh	r3, [r7, #2]
 800eeca:	4413      	add	r3, r2
 800eecc:	b29b      	uxth	r3, r3
 800eece:	3b01      	subs	r3, #1
 800eed0:	b29b      	uxth	r3, r3
 800eed2:	b21a      	sxth	r2, r3
 800eed4:	4b23      	ldr	r3, [pc, #140]	; (800ef64 <Note_4Point+0xe4>)
 800eed6:	801a      	strh	r2, [r3, #0]
  NotePixel((Mode & INV)? 1 : 0);
 800eed8:	79fb      	ldrb	r3, [r7, #7]
 800eeda:	f003 0301 	and.w	r3, r3, #1
 800eede:	b2db      	uxtb	r3, r3
 800eee0:	4618      	mov	r0, r3
 800eee2:	f7ff fc37 	bl	800e754 <NotePixel>
  Nx = x+Str_Cnt*(6)-1, Ny = y;
 800eee6:	79bb      	ldrb	r3, [r7, #6]
 800eee8:	b29b      	uxth	r3, r3
 800eeea:	461a      	mov	r2, r3
 800eeec:	0052      	lsls	r2, r2, #1
 800eeee:	4413      	add	r3, r2
 800eef0:	005b      	lsls	r3, r3, #1
 800eef2:	b29a      	uxth	r2, r3
 800eef4:	88bb      	ldrh	r3, [r7, #4]
 800eef6:	4413      	add	r3, r2
 800eef8:	b29b      	uxth	r3, r3
 800eefa:	3b01      	subs	r3, #1
 800eefc:	b29b      	uxth	r3, r3
 800eefe:	b21a      	sxth	r2, r3
 800ef00:	4b17      	ldr	r3, [pc, #92]	; (800ef60 <Note_4Point+0xe0>)
 800ef02:	801a      	strh	r2, [r3, #0]
 800ef04:	4a17      	ldr	r2, [pc, #92]	; (800ef64 <Note_4Point+0xe4>)
 800ef06:	887b      	ldrh	r3, [r7, #2]
 800ef08:	8013      	strh	r3, [r2, #0]
  NotePixel((Mode & INV)? 1 : 0);
 800ef0a:	79fb      	ldrb	r3, [r7, #7]
 800ef0c:	f003 0301 	and.w	r3, r3, #1
 800ef10:	b2db      	uxtb	r3, r3
 800ef12:	4618      	mov	r0, r3
 800ef14:	f7ff fc1e 	bl	800e754 <NotePixel>
  Nx = x+Str_Cnt*(6)-1, Ny = y+High-1;
 800ef18:	79bb      	ldrb	r3, [r7, #6]
 800ef1a:	b29b      	uxth	r3, r3
 800ef1c:	461a      	mov	r2, r3
 800ef1e:	0052      	lsls	r2, r2, #1
 800ef20:	4413      	add	r3, r2
 800ef22:	005b      	lsls	r3, r3, #1
 800ef24:	b29a      	uxth	r2, r3
 800ef26:	88bb      	ldrh	r3, [r7, #4]
 800ef28:	4413      	add	r3, r2
 800ef2a:	b29b      	uxth	r3, r3
 800ef2c:	3b01      	subs	r3, #1
 800ef2e:	b29b      	uxth	r3, r3
 800ef30:	b21a      	sxth	r2, r3
 800ef32:	4b0b      	ldr	r3, [pc, #44]	; (800ef60 <Note_4Point+0xe0>)
 800ef34:	801a      	strh	r2, [r3, #0]
 800ef36:	7e3b      	ldrb	r3, [r7, #24]
 800ef38:	b29a      	uxth	r2, r3
 800ef3a:	887b      	ldrh	r3, [r7, #2]
 800ef3c:	4413      	add	r3, r2
 800ef3e:	b29b      	uxth	r3, r3
 800ef40:	3b01      	subs	r3, #1
 800ef42:	b29b      	uxth	r3, r3
 800ef44:	b21a      	sxth	r2, r3
 800ef46:	4b07      	ldr	r3, [pc, #28]	; (800ef64 <Note_4Point+0xe4>)
 800ef48:	801a      	strh	r2, [r3, #0]
  NotePixel((Mode & INV)? 1 : 0);
 800ef4a:	79fb      	ldrb	r3, [r7, #7]
 800ef4c:	f003 0301 	and.w	r3, r3, #1
 800ef50:	b2db      	uxtb	r3, r3
 800ef52:	4618      	mov	r0, r3
 800ef54:	f7ff fbfe 	bl	800e754 <NotePixel>

}
 800ef58:	bf00      	nop
 800ef5a:	370c      	adds	r7, #12
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	bd90      	pop	{r4, r7, pc}
 800ef60:	20000002 	.word	0x20000002
 800ef64:	20000004 	.word	0x20000004

0800ef68 <ExtFlash_SendByte>:

/*******************************************************************************
 SPI_FLASH_SendByte
*******************************************************************************/
char ExtFlash_SendByte(char byte)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b084      	sub	sp, #16
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	4603      	mov	r3, r0
 800ef70:	71fb      	strb	r3, [r7, #7]
   char retbyte=0;
 800ef72:	2300      	movs	r3, #0
 800ef74:	73fb      	strb	r3, [r7, #15]
	Tout = 0;
 800ef76:	4b1d      	ldr	r3, [pc, #116]	; (800efec <ExtFlash_SendByte+0x84>)
 800ef78:	2200      	movs	r2, #0
 800ef7a:	601a      	str	r2, [r3, #0]
  while(HAL_SPI_GetState( &hspi2 ) != HAL_SPI_STATE_READY) /*SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET*/
 800ef7c:	e009      	b.n	800ef92 <ExtFlash_SendByte+0x2a>
  {
    if(Tout++ > TMAX)
 800ef7e:	4b1b      	ldr	r3, [pc, #108]	; (800efec <ExtFlash_SendByte+0x84>)
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	1c5a      	adds	r2, r3, #1
 800ef84:	4919      	ldr	r1, [pc, #100]	; (800efec <ExtFlash_SendByte+0x84>)
 800ef86:	600a      	str	r2, [r1, #0]
 800ef88:	4a19      	ldr	r2, [pc, #100]	; (800eff0 <ExtFlash_SendByte+0x88>)
 800ef8a:	4293      	cmp	r3, r2
 800ef8c:	d901      	bls.n	800ef92 <ExtFlash_SendByte+0x2a>
    	return 255;
 800ef8e:	23ff      	movs	r3, #255	; 0xff
 800ef90:	e027      	b.n	800efe2 <ExtFlash_SendByte+0x7a>
  while(HAL_SPI_GetState( &hspi2 ) != HAL_SPI_STATE_READY) /*SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET*/
 800ef92:	4818      	ldr	r0, [pc, #96]	; (800eff4 <ExtFlash_SendByte+0x8c>)
 800ef94:	f00e f810 	bl	801cfb8 <HAL_SPI_GetState>
 800ef98:	4603      	mov	r3, r0
 800ef9a:	2b01      	cmp	r3, #1
 800ef9c:	d1ef      	bne.n	800ef7e <ExtFlash_SendByte+0x16>
  }
  HAL_SPI_Transmit(&hspi2, (unsigned char*)&byte, 1, 1);// timeout 1 ms  SPI_I2S_SendData(SPI2, byte);
 800ef9e:	1df9      	adds	r1, r7, #7
 800efa0:	2301      	movs	r3, #1
 800efa2:	2201      	movs	r2, #1
 800efa4:	4813      	ldr	r0, [pc, #76]	; (800eff4 <ExtFlash_SendByte+0x8c>)
 800efa6:	f00d fb0e 	bl	801c5c6 <HAL_SPI_Transmit>
  Tout = 0;
 800efaa:	4b10      	ldr	r3, [pc, #64]	; (800efec <ExtFlash_SendByte+0x84>)
 800efac:	2200      	movs	r2, #0
 800efae:	601a      	str	r2, [r3, #0]
  while(HAL_SPI_GetState( &hspi2 ) != HAL_SPI_STATE_READY) //  while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET)
 800efb0:	e009      	b.n	800efc6 <ExtFlash_SendByte+0x5e>
  {
    if(Tout++ > TMAX)
 800efb2:	4b0e      	ldr	r3, [pc, #56]	; (800efec <ExtFlash_SendByte+0x84>)
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	1c5a      	adds	r2, r3, #1
 800efb8:	490c      	ldr	r1, [pc, #48]	; (800efec <ExtFlash_SendByte+0x84>)
 800efba:	600a      	str	r2, [r1, #0]
 800efbc:	4a0c      	ldr	r2, [pc, #48]	; (800eff0 <ExtFlash_SendByte+0x88>)
 800efbe:	4293      	cmp	r3, r2
 800efc0:	d901      	bls.n	800efc6 <ExtFlash_SendByte+0x5e>
    	return 255;
 800efc2:	23ff      	movs	r3, #255	; 0xff
 800efc4:	e00d      	b.n	800efe2 <ExtFlash_SendByte+0x7a>
  while(HAL_SPI_GetState( &hspi2 ) != HAL_SPI_STATE_READY) //  while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET)
 800efc6:	480b      	ldr	r0, [pc, #44]	; (800eff4 <ExtFlash_SendByte+0x8c>)
 800efc8:	f00d fff6 	bl	801cfb8 <HAL_SPI_GetState>
 800efcc:	4603      	mov	r3, r0
 800efce:	2b01      	cmp	r3, #1
 800efd0:	d1ef      	bne.n	800efb2 <ExtFlash_SendByte+0x4a>
  }
  HAL_SPI_Receive(&hspi2, (unsigned char*)&retbyte, 1, 1); //timeout 1 ms
 800efd2:	f107 010f 	add.w	r1, r7, #15
 800efd6:	2301      	movs	r3, #1
 800efd8:	2201      	movs	r2, #1
 800efda:	4806      	ldr	r0, [pc, #24]	; (800eff4 <ExtFlash_SendByte+0x8c>)
 800efdc:	f00d fc2f 	bl	801c83e <HAL_SPI_Receive>
  return retbyte/*SPI_I2S_ReceiveData(SPI2)*/;
 800efe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800efe2:	4618      	mov	r0, r3
 800efe4:	3710      	adds	r7, #16
 800efe6:	46bd      	mov	sp, r7
 800efe8:	bd80      	pop	{r7, pc}
 800efea:	bf00      	nop
 800efec:	200015d8 	.word	0x200015d8
 800eff0:	000186a0 	.word	0x000186a0
 800eff4:	2000689c 	.word	0x2000689c

0800eff8 <ExtFlash_WaitForWriteEnd>:

/*******************************************************************************
 SPI_FLASH_WaitForWriteEnd
*******************************************************************************/
void ExtFlash_WaitForWriteEnd(void)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b082      	sub	sp, #8
 800effc:	af00      	add	r7, sp, #0
  char FLASH_Status = 0;
 800effe:	2300      	movs	r3, #0
 800f000:	71fb      	strb	r3, [r7, #7]

  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800f002:	2200      	movs	r2, #0
 800f004:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800f008:	4812      	ldr	r0, [pc, #72]	; (800f054 <ExtFlash_WaitForWriteEnd+0x5c>)
 800f00a:	f00a ffd7 	bl	8019fbc <HAL_GPIO_WritePin>
  ExtFlash_SendByte(RDSR);
 800f00e:	2005      	movs	r0, #5
 800f010:	f7ff ffaa 	bl	800ef68 <ExtFlash_SendByte>
  Tout = 0;
 800f014:	4b10      	ldr	r3, [pc, #64]	; (800f058 <ExtFlash_WaitForWriteEnd+0x60>)
 800f016:	2200      	movs	r2, #0
 800f018:	601a      	str	r2, [r3, #0]
  do
  {
	  FLASH_Status = ExtFlash_SendByte(Dummy_Byte);
 800f01a:	20a5      	movs	r0, #165	; 0xa5
 800f01c:	f7ff ffa4 	bl	800ef68 <ExtFlash_SendByte>
 800f020:	4603      	mov	r3, r0
 800f022:	71fb      	strb	r3, [r7, #7]
      if(Tout++ > TMAX)
 800f024:	4b0c      	ldr	r3, [pc, #48]	; (800f058 <ExtFlash_WaitForWriteEnd+0x60>)
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	1c5a      	adds	r2, r3, #1
 800f02a:	490b      	ldr	r1, [pc, #44]	; (800f058 <ExtFlash_WaitForWriteEnd+0x60>)
 800f02c:	600a      	str	r2, [r1, #0]
 800f02e:	4a0b      	ldr	r2, [pc, #44]	; (800f05c <ExtFlash_WaitForWriteEnd+0x64>)
 800f030:	4293      	cmp	r3, r2
 800f032:	d80b      	bhi.n	800f04c <ExtFlash_WaitForWriteEnd+0x54>
    	  return;
  }
  while((FLASH_Status & WIP_Flag) == SET);              // Write in progress
 800f034:	79fb      	ldrb	r3, [r7, #7]
 800f036:	f003 0301 	and.w	r3, r3, #1
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d1ed      	bne.n	800f01a <ExtFlash_WaitForWriteEnd+0x22>
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET);
 800f03e:	2201      	movs	r2, #1
 800f040:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800f044:	4803      	ldr	r0, [pc, #12]	; (800f054 <ExtFlash_WaitForWriteEnd+0x5c>)
 800f046:	f00a ffb9 	bl	8019fbc <HAL_GPIO_WritePin>
 800f04a:	e000      	b.n	800f04e <ExtFlash_WaitForWriteEnd+0x56>
    	  return;
 800f04c:	bf00      	nop
}
 800f04e:	3708      	adds	r7, #8
 800f050:	46bd      	mov	sp, r7
 800f052:	bd80      	pop	{r7, pc}
 800f054:	40020400 	.word	0x40020400
 800f058:	200015d8 	.word	0x200015d8
 800f05c:	000186a0 	.word	0x000186a0

0800f060 <ExtFlash_PageRD>:

/*******************************************************************************
 SPI_FLASH_BufferRead
*******************************************************************************/
void ExtFlash_PageRD(char* pBuffer, unsigned ReadAddr, short Length)
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b084      	sub	sp, #16
 800f064:	af00      	add	r7, sp, #0
 800f066:	60f8      	str	r0, [r7, #12]
 800f068:	60b9      	str	r1, [r7, #8]
 800f06a:	4613      	mov	r3, r2
 800f06c:	80fb      	strh	r3, [r7, #6]
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800f06e:	2201      	movs	r2, #1
 800f070:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800f074:	481d      	ldr	r0, [pc, #116]	; (800f0ec <ExtFlash_PageRD+0x8c>)
 800f076:	f00a ffa1 	bl	8019fbc <HAL_GPIO_WritePin>
  ExtFlash_WaitForWriteEnd();
 800f07a:	f7ff ffbd 	bl	800eff8 <ExtFlash_WaitForWriteEnd>
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800f07e:	2200      	movs	r2, #0
 800f080:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800f084:	4819      	ldr	r0, [pc, #100]	; (800f0ec <ExtFlash_PageRD+0x8c>)
 800f086:	f00a ff99 	bl	8019fbc <HAL_GPIO_WritePin>
  ExtFlash_SendByte(READ);
 800f08a:	2003      	movs	r0, #3
 800f08c:	f7ff ff6c 	bl	800ef68 <ExtFlash_SendByte>
  ExtFlash_SendByte((ReadAddr & 0xFF0000) >> 16);
 800f090:	68bb      	ldr	r3, [r7, #8]
 800f092:	0c1b      	lsrs	r3, r3, #16
 800f094:	b2db      	uxtb	r3, r3
 800f096:	4618      	mov	r0, r3
 800f098:	f7ff ff66 	bl	800ef68 <ExtFlash_SendByte>
  ExtFlash_SendByte((ReadAddr& 0xFF00) >> 8);
 800f09c:	68bb      	ldr	r3, [r7, #8]
 800f09e:	0a1b      	lsrs	r3, r3, #8
 800f0a0:	b2db      	uxtb	r3, r3
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	f7ff ff60 	bl	800ef68 <ExtFlash_SendByte>
  ExtFlash_SendByte(ReadAddr & 0xFF);
 800f0a8:	68bb      	ldr	r3, [r7, #8]
 800f0aa:	b2db      	uxtb	r3, r3
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	f7ff ff5b 	bl	800ef68 <ExtFlash_SendByte>

  while(Length--)
 800f0b2:	e009      	b.n	800f0c8 <ExtFlash_PageRD+0x68>
  { // while there is data to be read
    *pBuffer = (ExtFlash_SendByte(Dummy_Byte));
 800f0b4:	20a5      	movs	r0, #165	; 0xa5
 800f0b6:	f7ff ff57 	bl	800ef68 <ExtFlash_SendByte>
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	461a      	mov	r2, r3
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	701a      	strb	r2, [r3, #0]
    pBuffer++;
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	3301      	adds	r3, #1
 800f0c6:	60fb      	str	r3, [r7, #12]
  while(Length--)
 800f0c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f0cc:	b29a      	uxth	r2, r3
 800f0ce:	3a01      	subs	r2, #1
 800f0d0:	b292      	uxth	r2, r2
 800f0d2:	80fa      	strh	r2, [r7, #6]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d1ed      	bne.n	800f0b4 <ExtFlash_PageRD+0x54>
  }
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET);
 800f0d8:	2201      	movs	r2, #1
 800f0da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800f0de:	4803      	ldr	r0, [pc, #12]	; (800f0ec <ExtFlash_PageRD+0x8c>)
 800f0e0:	f00a ff6c 	bl	8019fbc <HAL_GPIO_WritePin>
}
 800f0e4:	bf00      	nop
 800f0e6:	3710      	adds	r7, #16
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	bd80      	pop	{r7, pc}
 800f0ec:	40020400 	.word	0x40020400

0800f0f0 <ExtFlash_WriteEnable>:

/*******************************************************************************
 SPI_FLASH_WriteEnable
*******************************************************************************/
void ExtFlash_WriteEnable(void)
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800f0fa:	4807      	ldr	r0, [pc, #28]	; (800f118 <ExtFlash_WriteEnable+0x28>)
 800f0fc:	f00a ff5e 	bl	8019fbc <HAL_GPIO_WritePin>
  ExtFlash_SendByte(WREN);
 800f100:	2006      	movs	r0, #6
 800f102:	f7ff ff31 	bl	800ef68 <ExtFlash_SendByte>
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800f106:	2201      	movs	r2, #1
 800f108:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800f10c:	4802      	ldr	r0, [pc, #8]	; (800f118 <ExtFlash_WriteEnable+0x28>)
 800f10e:	f00a ff55 	bl	8019fbc <HAL_GPIO_WritePin>
}
 800f112:	bf00      	nop
 800f114:	bd80      	pop	{r7, pc}
 800f116:	bf00      	nop
 800f118:	40020400 	.word	0x40020400

0800f11c <ExtFlash_PageProg>:

/*******************************************************************************
 дFLASHҳ(256 Bytes)�� Mode=0: ��0��1���ݸ�д   Mode=1: ������д
*******************************************************************************/
void ExtFlash_PageProg(char* pBuffer, unsigned WriteAddr)
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b084      	sub	sp, #16
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]
 800f124:	6039      	str	r1, [r7, #0]
  short   Lenght = 256;
 800f126:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f12a:	81fb      	strh	r3, [r7, #14]

  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800f12c:	2201      	movs	r2, #1
 800f12e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800f132:	481f      	ldr	r0, [pc, #124]	; (800f1b0 <ExtFlash_PageProg+0x94>)
 800f134:	f00a ff42 	bl	8019fbc <HAL_GPIO_WritePin>
  ExtFlash_WaitForWriteEnd();
 800f138:	f7ff ff5e 	bl	800eff8 <ExtFlash_WaitForWriteEnd>
  ExtFlash_WriteEnable();
 800f13c:	f7ff ffd8 	bl	800f0f0 <ExtFlash_WriteEnable>
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800f140:	2200      	movs	r2, #0
 800f142:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800f146:	481a      	ldr	r0, [pc, #104]	; (800f1b0 <ExtFlash_PageProg+0x94>)
 800f148:	f00a ff38 	bl	8019fbc <HAL_GPIO_WritePin>
  ExtFlash_SendByte(PP);
 800f14c:	2002      	movs	r0, #2
 800f14e:	f7ff ff0b 	bl	800ef68 <ExtFlash_SendByte>
  ExtFlash_SendByte((WriteAddr & 0xFF0000) >> 16);
 800f152:	683b      	ldr	r3, [r7, #0]
 800f154:	0c1b      	lsrs	r3, r3, #16
 800f156:	b2db      	uxtb	r3, r3
 800f158:	4618      	mov	r0, r3
 800f15a:	f7ff ff05 	bl	800ef68 <ExtFlash_SendByte>
  ExtFlash_SendByte((WriteAddr & 0xFF00) >> 8);
 800f15e:	683b      	ldr	r3, [r7, #0]
 800f160:	0a1b      	lsrs	r3, r3, #8
 800f162:	b2db      	uxtb	r3, r3
 800f164:	4618      	mov	r0, r3
 800f166:	f7ff feff 	bl	800ef68 <ExtFlash_SendByte>
  ExtFlash_SendByte(WriteAddr & 0xFF);
 800f16a:	683b      	ldr	r3, [r7, #0]
 800f16c:	b2db      	uxtb	r3, r3
 800f16e:	4618      	mov	r0, r3
 800f170:	f7ff fefa 	bl	800ef68 <ExtFlash_SendByte>
  while(Lenght--) {
 800f174:	e007      	b.n	800f186 <ExtFlash_PageProg+0x6a>
    ExtFlash_SendByte((*pBuffer));
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	781b      	ldrb	r3, [r3, #0]
 800f17a:	4618      	mov	r0, r3
 800f17c:	f7ff fef4 	bl	800ef68 <ExtFlash_SendByte>
    pBuffer++;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	3301      	adds	r3, #1
 800f184:	607b      	str	r3, [r7, #4]
  while(Lenght--) {
 800f186:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f18a:	b29a      	uxth	r2, r3
 800f18c:	3a01      	subs	r2, #1
 800f18e:	b292      	uxth	r2, r2
 800f190:	81fa      	strh	r2, [r7, #14]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d1ef      	bne.n	800f176 <ExtFlash_PageProg+0x5a>
  }
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800f196:	2201      	movs	r2, #1
 800f198:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800f19c:	4804      	ldr	r0, [pc, #16]	; (800f1b0 <ExtFlash_PageProg+0x94>)
 800f19e:	f00a ff0d 	bl	8019fbc <HAL_GPIO_WritePin>
  ExtFlash_WaitForWriteEnd();
 800f1a2:	f7ff ff29 	bl	800eff8 <ExtFlash_WaitForWriteEnd>
}
 800f1a6:	bf00      	nop
 800f1a8:	3710      	adds	r7, #16
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	bd80      	pop	{r7, pc}
 800f1ae:	bf00      	nop
 800f1b0:	40020400 	.word	0x40020400

0800f1b4 <ExtFLASH_SectorErase>:

/*******************************************************************************
 SPI_FLASH_SectorErase  : Sector Erases the specified FLASH Page.(4k/sector)
*******************************************************************************/
void ExtFLASH_SectorErase(unsigned SectorAddr)
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b082      	sub	sp, #8
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
    ExtFlash_WriteEnable();
 800f1bc:	f7ff ff98 	bl	800f0f0 <ExtFlash_WriteEnable>
    HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800f1c6:	4811      	ldr	r0, [pc, #68]	; (800f20c <ExtFLASH_SectorErase+0x58>)
 800f1c8:	f00a fef8 	bl	8019fbc <HAL_GPIO_WritePin>
    ExtFlash_SendByte(SE);
 800f1cc:	2020      	movs	r0, #32
 800f1ce:	f7ff fecb 	bl	800ef68 <ExtFlash_SendByte>
    ExtFlash_SendByte((SectorAddr & 0xFF0000) >> 16);   //Send high address byte
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	0c1b      	lsrs	r3, r3, #16
 800f1d6:	b2db      	uxtb	r3, r3
 800f1d8:	4618      	mov	r0, r3
 800f1da:	f7ff fec5 	bl	800ef68 <ExtFlash_SendByte>
    ExtFlash_SendByte((SectorAddr & 0xFF00) >> 8);      //Send medium address byte
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	0a1b      	lsrs	r3, r3, #8
 800f1e2:	b2db      	uxtb	r3, r3
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	f7ff febf 	bl	800ef68 <ExtFlash_SendByte>
    ExtFlash_SendByte(SectorAddr & 0xFF);               //Send low address byte */
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	b2db      	uxtb	r3, r3
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	f7ff feba 	bl	800ef68 <ExtFlash_SendByte>
    HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800f1f4:	2201      	movs	r2, #1
 800f1f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800f1fa:	4804      	ldr	r0, [pc, #16]	; (800f20c <ExtFLASH_SectorErase+0x58>)
 800f1fc:	f00a fede 	bl	8019fbc <HAL_GPIO_WritePin>
    ExtFlash_WaitForWriteEnd();                         // Wait the end of Flash writing
 800f200:	f7ff fefa 	bl	800eff8 <ExtFlash_WaitForWriteEnd>
}
 800f204:	bf00      	nop
 800f206:	3708      	adds	r7, #8
 800f208:	46bd      	mov	sp, r7
 800f20a:	bd80      	pop	{r7, pc}
 800f20c:	40020400 	.word	0x40020400

0800f210 <ExtFlash_PageWR>:

void ExtFlash_PageWR(char* pBuffer, unsigned WriteAddr)
{
 800f210:	b580      	push	{r7, lr}
 800f212:	b0c8      	sub	sp, #288	; 0x120
 800f214:	af00      	add	r7, sp, #0
 800f216:	1d3b      	adds	r3, r7, #4
 800f218:	6018      	str	r0, [r3, #0]
 800f21a:	463b      	mov	r3, r7
 800f21c:	6019      	str	r1, [r3, #0]
  unsigned addr,i,j;
  char* ptr;
  char  page=0,flag=0;
 800f21e:	2300      	movs	r3, #0
 800f220:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800f224:	2300      	movs	r3, #0
 800f226:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
  char  buffer[256];

  flag=0;
 800f22a:	2300      	movs	r3, #0
 800f22c:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
    addr=WriteAddr & 0xFFF000;
 800f230:	463b      	mov	r3, r7
 800f232:	681a      	ldr	r2, [r3, #0]
 800f234:	4b3b      	ldr	r3, [pc, #236]	; (800f324 <ExtFlash_PageWR+0x114>)
 800f236:	4013      	ands	r3, r2
 800f238:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    page=16;
 800f23c:	2310      	movs	r3, #16
 800f23e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  while(page>0)
 800f242:	e02e      	b.n	800f2a2 <ExtFlash_PageWR+0x92>
  {
    ExtFlash_PageRD((char*)&buffer,addr, 256);
 800f244:	f107 030c 	add.w	r3, r7, #12
 800f248:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f24c:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800f250:	4618      	mov	r0, r3
 800f252:	f7ff ff05 	bl	800f060 <ExtFlash_PageRD>
    for(j=0;j<255;j++){
 800f256:	2300      	movs	r3, #0
 800f258:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800f25c:	e012      	b.n	800f284 <ExtFlash_PageWR+0x74>
      if(buffer[j++]!=0xff){
 800f25e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f262:	1c5a      	adds	r2, r3, #1
 800f264:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 800f268:	f107 020c 	add.w	r2, r7, #12
 800f26c:	5cd3      	ldrb	r3, [r2, r3]
 800f26e:	2bff      	cmp	r3, #255	; 0xff
 800f270:	d003      	beq.n	800f27a <ExtFlash_PageWR+0x6a>
        flag=1;
 800f272:	2301      	movs	r3, #1
 800f274:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
        break;
 800f278:	e008      	b.n	800f28c <ExtFlash_PageWR+0x7c>
    for(j=0;j<255;j++){
 800f27a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f27e:	3301      	adds	r3, #1
 800f280:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800f284:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f288:	2bfe      	cmp	r3, #254	; 0xfe
 800f28a:	d9e8      	bls.n	800f25e <ExtFlash_PageWR+0x4e>
      }
    }
    addr+=256;
 800f28c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f290:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f294:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    page--;
 800f298:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800f29c:	3b01      	subs	r3, #1
 800f29e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  while(page>0)
 800f2a2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d1cc      	bne.n	800f244 <ExtFlash_PageWR+0x34>
  }
    page=16;
 800f2aa:	2310      	movs	r3, #16
 800f2ac:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
    addr=WriteAddr & 0xFFF000;
 800f2b0:	463b      	mov	r3, r7
 800f2b2:	681a      	ldr	r2, [r3, #0]
 800f2b4:	4b1b      	ldr	r3, [pc, #108]	; (800f324 <ExtFlash_PageWR+0x114>)
 800f2b6:	4013      	ands	r3, r2
 800f2b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    if(flag==1)ExtFLASH_SectorErase(addr);
 800f2bc:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800f2c0:	2b01      	cmp	r3, #1
 800f2c2:	d103      	bne.n	800f2cc <ExtFlash_PageWR+0xbc>
 800f2c4:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800f2c8:	f7ff ff74 	bl	800f1b4 <ExtFLASH_SectorErase>
  ptr=pBuffer;
 800f2cc:	1d3b      	adds	r3, r7, #4
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  for(i=0;i<page;i++){
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800f2da:	e016      	b.n	800f30a <ExtFlash_PageWR+0xfa>
    ExtFlash_PageProg(ptr, addr);
 800f2dc:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800f2e0:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800f2e4:	f7ff ff1a 	bl	800f11c <ExtFlash_PageProg>
    addr+=256;
 800f2e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f2ec:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f2f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    ptr+=256;
 800f2f4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800f2f8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f2fc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  for(i=0;i<page;i++){
 800f300:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f304:	3301      	adds	r3, #1
 800f306:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800f30a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800f30e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f312:	429a      	cmp	r2, r3
 800f314:	d3e2      	bcc.n	800f2dc <ExtFlash_PageWR+0xcc>
  }
}
 800f316:	bf00      	nop
 800f318:	bf00      	nop
 800f31a:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}
 800f322:	bf00      	nop
 800f324:	00fff000 	.word	0x00fff000

0800f328 <ReadDiskData>:

/*******************************************************************************
(256 Bytes)
*******************************************************************************/
char ReadDiskData(char* pBuffer, unsigned ReadAddr, short Length)
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b086      	sub	sp, #24
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	60f8      	str	r0, [r7, #12]
 800f330:	60b9      	str	r1, [r7, #8]
 800f332:	4613      	mov	r3, r2
 800f334:	80fb      	strh	r3, [r7, #6]
  char n = 0;
 800f336:	2300      	movs	r3, #0
 800f338:	75fb      	strb	r3, [r7, #23]

  while(1)
  {
    Clash = 0;
 800f33a:	4b0d      	ldr	r3, [pc, #52]	; (800f370 <ReadDiskData+0x48>)
 800f33c:	2200      	movs	r2, #0
 800f33e:	701a      	strb	r2, [r3, #0]
    ExtFlash_PageRD(pBuffer, ReadAddr, Length);
 800f340:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f344:	461a      	mov	r2, r3
 800f346:	68b9      	ldr	r1, [r7, #8]
 800f348:	68f8      	ldr	r0, [r7, #12]
 800f34a:	f7ff fe89 	bl	800f060 <ExtFlash_PageRD>
    if(n++ > 6)
 800f34e:	7dfb      	ldrb	r3, [r7, #23]
 800f350:	1c5a      	adds	r2, r3, #1
 800f352:	75fa      	strb	r2, [r7, #23]
 800f354:	2b06      	cmp	r3, #6
 800f356:	d901      	bls.n	800f35c <ReadDiskData+0x34>
    	return SEC_ERR;     //
 800f358:	2301      	movs	r3, #1
 800f35a:	e004      	b.n	800f366 <ReadDiskData+0x3e>
    if(Clash == 0)
 800f35c:	4b04      	ldr	r3, [pc, #16]	; (800f370 <ReadDiskData+0x48>)
 800f35e:	781b      	ldrb	r3, [r3, #0]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d1ea      	bne.n	800f33a <ReadDiskData+0x12>
    	return OK;       //
 800f364:	2300      	movs	r3, #0
  }
}
 800f366:	4618      	mov	r0, r3
 800f368:	3718      	adds	r7, #24
 800f36a:	46bd      	mov	sp, r7
 800f36c:	bd80      	pop	{r7, pc}
 800f36e:	bf00      	nop
 800f370:	20000795 	.word	0x20000795

0800f374 <OpenFileRd>:

/*******************************************************************************

*******************************************************************************/
char OpenFileRd(char* pBuffer, char* pFileName, short* pCluster, unsigned* pDirAddr)
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b086      	sub	sp, #24
 800f378:	af00      	add	r7, sp, #0
 800f37a:	60f8      	str	r0, [r7, #12]
 800f37c:	60b9      	str	r1, [r7, #8]
 800f37e:	607a      	str	r2, [r7, #4]
 800f380:	603b      	str	r3, [r7, #0]
  short i, n;

  *pCluster = 0;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	2200      	movs	r2, #0
 800f386:	801a      	strh	r2, [r3, #0]
  for(*pDirAddr=FAT_V.ROOT_BASE; *pDirAddr<FAT_V.FILE_BASE; )
 800f388:	4b35      	ldr	r3, [pc, #212]	; (800f460 <OpenFileRd+0xec>)
 800f38a:	689a      	ldr	r2, [r3, #8]
 800f38c:	683b      	ldr	r3, [r7, #0]
 800f38e:	601a      	str	r2, [r3, #0]
 800f390:	e05b      	b.n	800f44a <OpenFileRd+0xd6>
  {
    if(ReadDiskData(pBuffer, *pDirAddr,FAT_V.SEC_LEN)!= OK)
 800f392:	683b      	ldr	r3, [r7, #0]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	4a32      	ldr	r2, [pc, #200]	; (800f460 <OpenFileRd+0xec>)
 800f398:	6952      	ldr	r2, [r2, #20]
 800f39a:	b212      	sxth	r2, r2
 800f39c:	4619      	mov	r1, r3
 800f39e:	68f8      	ldr	r0, [r7, #12]
 800f3a0:	f7ff ffc2 	bl	800f328 <ReadDiskData>
 800f3a4:	4603      	mov	r3, r0
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d001      	beq.n	800f3ae <OpenFileRd+0x3a>
    	return SEC_ERR;
 800f3aa:	2301      	movs	r3, #1
 800f3ac:	e054      	b.n	800f458 <OpenFileRd+0xe4>
    for(n=0; n<FAT_V.SEC_LEN; n+=32)
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	82bb      	strh	r3, [r7, #20]
 800f3b2:	e044      	b.n	800f43e <OpenFileRd+0xca>
    {   //?????????????????????256
      for(i=0; i<11; i++)
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	82fb      	strh	r3, [r7, #22]
 800f3b8:	e031      	b.n	800f41e <OpenFileRd+0xaa>
      {
        if(pBuffer[n + i]!= 0)
 800f3ba:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800f3be:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f3c2:	4413      	add	r3, r2
 800f3c4:	461a      	mov	r2, r3
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	4413      	add	r3, r2
 800f3ca:	781b      	ldrb	r3, [r3, #0]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d01e      	beq.n	800f40e <OpenFileRd+0x9a>
        {
          if(pBuffer[n + i]!= pFileName[i])
 800f3d0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800f3d4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f3d8:	4413      	add	r3, r2
 800f3da:	461a      	mov	r2, r3
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	4413      	add	r3, r2
 800f3e0:	781a      	ldrb	r2, [r3, #0]
 800f3e2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f3e6:	68b9      	ldr	r1, [r7, #8]
 800f3e8:	440b      	add	r3, r1
 800f3ea:	781b      	ldrb	r3, [r3, #0]
 800f3ec:	429a      	cmp	r2, r3
 800f3ee:	d11b      	bne.n	800f428 <OpenFileRd+0xb4>
        	  break;
          if(i == 10)
 800f3f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f3f4:	2b0a      	cmp	r3, #10
 800f3f6:	d10c      	bne.n	800f412 <OpenFileRd+0x9e>
          {                             //
            *pCluster = *(short*)(pBuffer + n + 0x1A); //
 800f3f8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f3fc:	331a      	adds	r3, #26
 800f3fe:	68fa      	ldr	r2, [r7, #12]
 800f400:	4413      	add	r3, r2
 800f402:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	801a      	strh	r2, [r3, #0]
            return OK;
 800f40a:	2300      	movs	r3, #0
 800f40c:	e024      	b.n	800f458 <OpenFileRd+0xe4>
          }
        }
        else
        	return NEW;               //
 800f40e:	2304      	movs	r3, #4
 800f410:	e022      	b.n	800f458 <OpenFileRd+0xe4>
      for(i=0; i<11; i++)
 800f412:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f416:	b29b      	uxth	r3, r3
 800f418:	3301      	adds	r3, #1
 800f41a:	b29b      	uxth	r3, r3
 800f41c:	82fb      	strh	r3, [r7, #22]
 800f41e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f422:	2b0a      	cmp	r3, #10
 800f424:	ddc9      	ble.n	800f3ba <OpenFileRd+0x46>
 800f426:	e000      	b.n	800f42a <OpenFileRd+0xb6>
        	  break;
 800f428:	bf00      	nop
      }
      *pDirAddr += 32;
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	f103 0220 	add.w	r2, r3, #32
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	601a      	str	r2, [r3, #0]
    for(n=0; n<FAT_V.SEC_LEN; n+=32)
 800f436:	8abb      	ldrh	r3, [r7, #20]
 800f438:	3320      	adds	r3, #32
 800f43a:	b29b      	uxth	r3, r3
 800f43c:	82bb      	strh	r3, [r7, #20]
 800f43e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800f442:	4b07      	ldr	r3, [pc, #28]	; (800f460 <OpenFileRd+0xec>)
 800f444:	695b      	ldr	r3, [r3, #20]
 800f446:	429a      	cmp	r2, r3
 800f448:	d3b4      	bcc.n	800f3b4 <OpenFileRd+0x40>
  for(*pDirAddr=FAT_V.ROOT_BASE; *pDirAddr<FAT_V.FILE_BASE; )
 800f44a:	683b      	ldr	r3, [r7, #0]
 800f44c:	681a      	ldr	r2, [r3, #0]
 800f44e:	4b04      	ldr	r3, [pc, #16]	; (800f460 <OpenFileRd+0xec>)
 800f450:	68db      	ldr	r3, [r3, #12]
 800f452:	429a      	cmp	r2, r3
 800f454:	d39d      	bcc.n	800f392 <OpenFileRd+0x1e>
    }
  }
  return OVER;
 800f456:	2303      	movs	r3, #3
}
 800f458:	4618      	mov	r0, r3
 800f45a:	3718      	adds	r7, #24
 800f45c:	46bd      	mov	sp, r7
 800f45e:	bd80      	pop	{r7, pc}
 800f460:	20000194 	.word	0x20000194

0800f464 <ProgDiskPage>:

/*******************************************************************************
 д����ҳ��(256 Bytes)  ����USB��д��ͻ����д
*******************************************************************************/
char ProgDiskPage(char* pBuffer, int ProgAddr)
{
 800f464:	b580      	push	{r7, lr}
 800f466:	b084      	sub	sp, #16
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
 800f46c:	6039      	str	r1, [r7, #0]
  char n = 0;
 800f46e:	2300      	movs	r3, #0
 800f470:	73fb      	strb	r3, [r7, #15]

  while(1){
    Clash = 0;
 800f472:	4b0c      	ldr	r3, [pc, #48]	; (800f4a4 <ProgDiskPage+0x40>)
 800f474:	2200      	movs	r2, #0
 800f476:	701a      	strb	r2, [r3, #0]
    ExtFlash_PageWR(pBuffer, ProgAddr);
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	4619      	mov	r1, r3
 800f47c:	6878      	ldr	r0, [r7, #4]
 800f47e:	f7ff fec7 	bl	800f210 <ExtFlash_PageWR>
    if(n++ > 6) return SEC_ERR;     // ��ʱ������
 800f482:	7bfb      	ldrb	r3, [r7, #15]
 800f484:	1c5a      	adds	r2, r3, #1
 800f486:	73fa      	strb	r2, [r7, #15]
 800f488:	2b06      	cmp	r3, #6
 800f48a:	d901      	bls.n	800f490 <ProgDiskPage+0x2c>
 800f48c:	2301      	movs	r3, #1
 800f48e:	e004      	b.n	800f49a <ProgDiskPage+0x36>
    if(Clash == 0) return OK;       // �޳�ͻ�����򷵻�
 800f490:	4b04      	ldr	r3, [pc, #16]	; (800f4a4 <ProgDiskPage+0x40>)
 800f492:	781b      	ldrb	r3, [r3, #0]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d1ec      	bne.n	800f472 <ProgDiskPage+0xe>
 800f498:	2300      	movs	r3, #0
  }
}
 800f49a:	4618      	mov	r0, r3
 800f49c:	3710      	adds	r7, #16
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	bd80      	pop	{r7, pc}
 800f4a2:	bf00      	nop
 800f4a4:	20000795 	.word	0x20000795

0800f4a8 <SeekBlank>:

/*******************************************************************************
 ���ҿ��дغţ�����ʱָ��ָ����һ�����дغţ���ǰ�غű�����ָ��+1��λ��
*******************************************************************************/
char SeekBlank(char* pBuffer, short* pCluster)
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b084      	sub	sp, #16
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
 800f4b0:	6039      	str	r1, [r7, #0]
  short  Tmp;
  char   Buffer[2];
  char   Tmp_Flag = 1;
 800f4b2:	2301      	movs	r3, #1
 800f4b4:	73fb      	strb	r3, [r7, #15]

  *(pCluster+1)= *pCluster;                                    // ���浱ǰ�غ�
 800f4b6:	683b      	ldr	r3, [r7, #0]
 800f4b8:	3302      	adds	r3, #2
 800f4ba:	683a      	ldr	r2, [r7, #0]
 800f4bc:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f4c0:	801a      	strh	r2, [r3, #0]

  for(*pCluster=0; (*pCluster)<4095; (*pCluster)++){
 800f4c2:	683b      	ldr	r3, [r7, #0]
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	801a      	strh	r2, [r3, #0]
 800f4c8:	e05b      	b.n	800f582 <SeekBlank+0xda>
    if(ReadDiskData(Buffer, FAT_V.FAT1_BASE +(*pCluster)+(*pCluster)/2, 2)!= 0) return SEC_ERR;
 800f4ca:	4b34      	ldr	r3, [pc, #208]	; (800f59c <SeekBlank+0xf4>)
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	683a      	ldr	r2, [r7, #0]
 800f4d0:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f4d4:	441a      	add	r2, r3
 800f4d6:	683b      	ldr	r3, [r7, #0]
 800f4d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f4dc:	0fd9      	lsrs	r1, r3, #31
 800f4de:	440b      	add	r3, r1
 800f4e0:	105b      	asrs	r3, r3, #1
 800f4e2:	b21b      	sxth	r3, r3
 800f4e4:	18d1      	adds	r1, r2, r3
 800f4e6:	f107 0308 	add.w	r3, r7, #8
 800f4ea:	2202      	movs	r2, #2
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	f7ff ff1b 	bl	800f328 <ReadDiskData>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d001      	beq.n	800f4fc <SeekBlank+0x54>
 800f4f8:	2301      	movs	r3, #1
 800f4fa:	e04a      	b.n	800f592 <SeekBlank+0xea>
    Tmp = ((*pCluster)& 1)?((*(short*)Buffer)>>4):((*(short*)Buffer)& 0xFFF);
 800f4fc:	683b      	ldr	r3, [r7, #0]
 800f4fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f502:	b29b      	uxth	r3, r3
 800f504:	f003 0301 	and.w	r3, r3, #1
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d006      	beq.n	800f51a <SeekBlank+0x72>
 800f50c:	f107 0308 	add.w	r3, r7, #8
 800f510:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f514:	111b      	asrs	r3, r3, #4
 800f516:	b21b      	sxth	r3, r3
 800f518:	e006      	b.n	800f528 <SeekBlank+0x80>
 800f51a:	f107 0308 	add.w	r3, r7, #8
 800f51e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f522:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f526:	b21b      	sxth	r3, r3
 800f528:	81bb      	strh	r3, [r7, #12]

    if((Tmp == 0)&&(Tmp_Flag == 0)&&(((*pCluster))!= *(pCluster+1))) {
 800f52a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d10f      	bne.n	800f552 <SeekBlank+0xaa>
 800f532:	7bfb      	ldrb	r3, [r7, #15]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d10c      	bne.n	800f552 <SeekBlank+0xaa>
 800f538:	683b      	ldr	r3, [r7, #0]
 800f53a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	3302      	adds	r3, #2
 800f542:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f546:	429a      	cmp	r2, r3
 800f548:	d003      	beq.n	800f552 <SeekBlank+0xaa>
      Tmp_Flag = 1;
 800f54a:	2301      	movs	r3, #1
 800f54c:	73fb      	strb	r3, [r7, #15]
      return OK;
 800f54e:	2300      	movs	r3, #0
 800f550:	e01f      	b.n	800f592 <SeekBlank+0xea>
    }
    if((Tmp == 0)&&(Tmp_Flag == 1))  {
 800f552:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d10a      	bne.n	800f570 <SeekBlank+0xc8>
 800f55a:	7bfb      	ldrb	r3, [r7, #15]
 800f55c:	2b01      	cmp	r3, #1
 800f55e:	d107      	bne.n	800f570 <SeekBlank+0xc8>
      *(pCluster+2) = *pCluster;
 800f560:	683b      	ldr	r3, [r7, #0]
 800f562:	3304      	adds	r3, #4
 800f564:	683a      	ldr	r2, [r7, #0]
 800f566:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f56a:	801a      	strh	r2, [r3, #0]
      Tmp_Flag = 0;
 800f56c:	2300      	movs	r3, #0
 800f56e:	73fb      	strb	r3, [r7, #15]
  for(*pCluster=0; (*pCluster)<4095; (*pCluster)++){
 800f570:	683b      	ldr	r3, [r7, #0]
 800f572:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f576:	b29b      	uxth	r3, r3
 800f578:	3301      	adds	r3, #1
 800f57a:	b29b      	uxth	r3, r3
 800f57c:	b21a      	sxth	r2, r3
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	801a      	strh	r2, [r3, #0]
 800f582:	683b      	ldr	r3, [r7, #0]
 800f584:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f588:	f640 72fe 	movw	r2, #4094	; 0xffe
 800f58c:	4293      	cmp	r3, r2
 800f58e:	dd9c      	ble.n	800f4ca <SeekBlank+0x22>
    }
  }
  return OK;
 800f590:	2300      	movs	r3, #0
}
 800f592:	4618      	mov	r0, r3
 800f594:	3710      	adds	r7, #16
 800f596:	46bd      	mov	sp, r7
 800f598:	bd80      	pop	{r7, pc}
 800f59a:	bf00      	nop
 800f59c:	20000194 	.word	0x20000194

0800f5a0 <SetCluster>:

/*******************************************************************************
 ����һ�غ�д��FAT��ǰ������λ������ʱָ��ָ����һ�غţ�ָ��+1Ϊ��ǰ�غ�
*******************************************************************************/
char SetCluster(char* pBuffer, short* pCluster)
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b086      	sub	sp, #24
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	6078      	str	r0, [r7, #4]
 800f5a8:	6039      	str	r1, [r7, #0]
  short  Offset, i, k;
  int  SecAddr;

  i = *(pCluster+1);                    // ��ȡԭ��ǰ�غ�
 800f5aa:	683b      	ldr	r3, [r7, #0]
 800f5ac:	885b      	ldrh	r3, [r3, #2]
 800f5ae:	82fb      	strh	r3, [r7, #22]
  k = *pCluster;                        // ��ȡ��һ�غ�
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	881b      	ldrh	r3, [r3, #0]
 800f5b4:	82bb      	strh	r3, [r7, #20]
  Offset = i+ i/2;
 800f5b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f5ba:	0fda      	lsrs	r2, r3, #31
 800f5bc:	4413      	add	r3, r2
 800f5be:	105b      	asrs	r3, r3, #1
 800f5c0:	b21b      	sxth	r3, r3
 800f5c2:	b29a      	uxth	r2, r3
 800f5c4:	8afb      	ldrh	r3, [r7, #22]
 800f5c6:	4413      	add	r3, r2
 800f5c8:	b29b      	uxth	r3, r3
 800f5ca:	827b      	strh	r3, [r7, #18]
  SecAddr = FAT_V.FAT1_BASE +(Offset & 0xF000 );
 800f5cc:	4b36      	ldr	r3, [pc, #216]	; (800f6a8 <SetCluster+0x108>)
 800f5ce:	681a      	ldr	r2, [r3, #0]
 800f5d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f5d4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800f5d8:	4413      	add	r3, r2
 800f5da:	60fb      	str	r3, [r7, #12]
  Offset &= 0x0FFF;
 800f5dc:	8a7b      	ldrh	r3, [r7, #18]
 800f5de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f5e2:	827b      	strh	r3, [r7, #18]
  if(ReadDiskData(pBuffer, SecAddr, FAT_V.SEC_LEN)!= 0) return SEC_ERR; //???????????? old=258
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	4a30      	ldr	r2, [pc, #192]	; (800f6a8 <SetCluster+0x108>)
 800f5e8:	6952      	ldr	r2, [r2, #20]
 800f5ea:	b212      	sxth	r2, r2
 800f5ec:	4619      	mov	r1, r3
 800f5ee:	6878      	ldr	r0, [r7, #4]
 800f5f0:	f7ff fe9a 	bl	800f328 <ReadDiskData>
 800f5f4:	4603      	mov	r3, r0
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d001      	beq.n	800f5fe <SetCluster+0x5e>
 800f5fa:	2301      	movs	r3, #1
 800f5fc:	e04f      	b.n	800f69e <SetCluster+0xfe>
  if(i & 1){
 800f5fe:	8afb      	ldrh	r3, [r7, #22]
 800f600:	f003 0301 	and.w	r3, r3, #1
 800f604:	2b00      	cmp	r3, #0
 800f606:	d01e      	beq.n	800f646 <SetCluster+0xa6>
    pBuffer[Offset  ]=(pBuffer[Offset]& 0x0F)+((k <<4)& 0xF0);
 800f608:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f60c:	687a      	ldr	r2, [r7, #4]
 800f60e:	4413      	add	r3, r2
 800f610:	781b      	ldrb	r3, [r3, #0]
 800f612:	f003 030f 	and.w	r3, r3, #15
 800f616:	b2d9      	uxtb	r1, r3
 800f618:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f61c:	011b      	lsls	r3, r3, #4
 800f61e:	b2da      	uxtb	r2, r3
 800f620:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f624:	6878      	ldr	r0, [r7, #4]
 800f626:	4403      	add	r3, r0
 800f628:	440a      	add	r2, r1
 800f62a:	b2d2      	uxtb	r2, r2
 800f62c:	701a      	strb	r2, [r3, #0]
    pBuffer[Offset+1]= k >>4;
 800f62e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f632:	111b      	asrs	r3, r3, #4
 800f634:	b219      	sxth	r1, r3
 800f636:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f63a:	3301      	adds	r3, #1
 800f63c:	687a      	ldr	r2, [r7, #4]
 800f63e:	4413      	add	r3, r2
 800f640:	b2ca      	uxtb	r2, r1
 800f642:	701a      	strb	r2, [r3, #0]
 800f644:	e021      	b.n	800f68a <SetCluster+0xea>
  } else {
    pBuffer[Offset  ]= k & 0xFF;
 800f646:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f64a:	687a      	ldr	r2, [r7, #4]
 800f64c:	4413      	add	r3, r2
 800f64e:	8aba      	ldrh	r2, [r7, #20]
 800f650:	b2d2      	uxtb	r2, r2
 800f652:	701a      	strb	r2, [r3, #0]
    pBuffer[Offset+1]=(pBuffer[Offset+1]& 0xF0)+((k>>8)& 0x0F);
 800f654:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f658:	3301      	adds	r3, #1
 800f65a:	687a      	ldr	r2, [r7, #4]
 800f65c:	4413      	add	r3, r2
 800f65e:	781b      	ldrb	r3, [r3, #0]
 800f660:	b25b      	sxtb	r3, r3
 800f662:	f023 030f 	bic.w	r3, r3, #15
 800f666:	b25a      	sxtb	r2, r3
 800f668:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f66c:	121b      	asrs	r3, r3, #8
 800f66e:	b21b      	sxth	r3, r3
 800f670:	b25b      	sxtb	r3, r3
 800f672:	f003 030f 	and.w	r3, r3, #15
 800f676:	b25b      	sxtb	r3, r3
 800f678:	4313      	orrs	r3, r2
 800f67a:	b259      	sxtb	r1, r3
 800f67c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f680:	3301      	adds	r3, #1
 800f682:	687a      	ldr	r2, [r7, #4]
 800f684:	4413      	add	r3, r2
 800f686:	b2ca      	uxtb	r2, r1
 800f688:	701a      	strb	r2, [r3, #0]
  }

  if(ProgDiskPage(pBuffer, SecAddr)!= 0) return SEC_ERR;
 800f68a:	68f9      	ldr	r1, [r7, #12]
 800f68c:	6878      	ldr	r0, [r7, #4]
 800f68e:	f7ff fee9 	bl	800f464 <ProgDiskPage>
 800f692:	4603      	mov	r3, r0
 800f694:	2b00      	cmp	r3, #0
 800f696:	d001      	beq.n	800f69c <SetCluster+0xfc>
 800f698:	2301      	movs	r3, #1
 800f69a:	e000      	b.n	800f69e <SetCluster+0xfe>
  return OK;
 800f69c:	2300      	movs	r3, #0
}
 800f69e:	4618      	mov	r0, r3
 800f6a0:	3718      	adds	r7, #24
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	bd80      	pop	{r7, pc}
 800f6a6:	bf00      	nop
 800f6a8:	20000194 	.word	0x20000194

0800f6ac <NextCluster>:

/*******************************************************************************
 ������һ�����Ӵغź󷵻أ���ǰ�غű�����ָ��+1��λ��
*******************************************************************************/
char NextCluster(short* pCluster)
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b084      	sub	sp, #16
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
  short FatNum;
  int Addr;

  Addr=FAT_V.FAT1_BASE +(*pCluster + *pCluster/2);
 800f6b4:	4b27      	ldr	r3, [pc, #156]	; (800f754 <NextCluster+0xa8>)
 800f6b6:	681a      	ldr	r2, [r3, #0]
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f6be:	4618      	mov	r0, r3
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f6c6:	0fd9      	lsrs	r1, r3, #31
 800f6c8:	440b      	add	r3, r1
 800f6ca:	105b      	asrs	r3, r3, #1
 800f6cc:	b21b      	sxth	r3, r3
 800f6ce:	4403      	add	r3, r0
 800f6d0:	4413      	add	r3, r2
 800f6d2:	60fb      	str	r3, [r7, #12]
  *(pCluster+1)= *pCluster;                                   // ����ǰһ���غ�
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	3302      	adds	r3, #2
 800f6d8:	687a      	ldr	r2, [r7, #4]
 800f6da:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f6de:	801a      	strh	r2, [r3, #0]
  *pCluster = 0;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	801a      	strh	r2, [r3, #0]
  if((*(pCluster+1) >=FAT_V.FAT_END)||(*(pCluster+1)< 2)) return SEC_ERR;
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	3302      	adds	r3, #2
 800f6ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f6ee:	461a      	mov	r2, r3
 800f6f0:	4b18      	ldr	r3, [pc, #96]	; (800f754 <NextCluster+0xa8>)
 800f6f2:	699b      	ldr	r3, [r3, #24]
 800f6f4:	429a      	cmp	r2, r3
 800f6f6:	d205      	bcs.n	800f704 <NextCluster+0x58>
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	3302      	adds	r3, #2
 800f6fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f700:	2b01      	cmp	r3, #1
 800f702:	dc01      	bgt.n	800f708 <NextCluster+0x5c>
 800f704:	2301      	movs	r3, #1
 800f706:	e021      	b.n	800f74c <NextCluster+0xa0>
  if(ReadDiskData((char*)&FatNum, Addr, 2)!= OK) return SEC_ERR;
 800f708:	68f9      	ldr	r1, [r7, #12]
 800f70a:	f107 030a 	add.w	r3, r7, #10
 800f70e:	2202      	movs	r2, #2
 800f710:	4618      	mov	r0, r3
 800f712:	f7ff fe09 	bl	800f328 <ReadDiskData>
 800f716:	4603      	mov	r3, r0
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d001      	beq.n	800f720 <NextCluster+0x74>
 800f71c:	2301      	movs	r3, #1
 800f71e:	e015      	b.n	800f74c <NextCluster+0xa0>
  *pCluster= (*(pCluster+1) & 1)?(FatNum >>4):(FatNum & 0xFFF); // ָ����һ���غ�
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	3302      	adds	r3, #2
 800f724:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f728:	b29b      	uxth	r3, r3
 800f72a:	f003 0301 	and.w	r3, r3, #1
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d004      	beq.n	800f73c <NextCluster+0x90>
 800f732:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f736:	111b      	asrs	r3, r3, #4
 800f738:	b21b      	sxth	r3, r3
 800f73a:	e004      	b.n	800f746 <NextCluster+0x9a>
 800f73c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f744:	b21b      	sxth	r3, r3
 800f746:	687a      	ldr	r2, [r7, #4]
 800f748:	8013      	strh	r3, [r2, #0]
  return OK;
 800f74a:	2300      	movs	r3, #0
}
 800f74c:	4618      	mov	r0, r3
 800f74e:	3710      	adds	r7, #16
 800f750:	46bd      	mov	sp, r7
 800f752:	bd80      	pop	{r7, pc}
 800f754:	20000194 	.word	0x20000194

0800f758 <ProgFileSec>:

/*******************************************************************************
 д�ļ�����(512/4096 Bytes)����д��ǰFAT�����ز��ҵ�����һ���غ�
*******************************************************************************/
char ProgFileSec(char* pBuffer, short* pCluster)
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b084      	sub	sp, #16
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
 800f760:	6039      	str	r1, [r7, #0]
  short Tmp;
  int ProgAddr = FAT_V.FILE_BASE + FAT_V.SEC_LEN*(*pCluster-2);
 800f762:	4b1f      	ldr	r3, [pc, #124]	; (800f7e0 <ProgFileSec+0x88>)
 800f764:	68da      	ldr	r2, [r3, #12]
 800f766:	4b1e      	ldr	r3, [pc, #120]	; (800f7e0 <ProgFileSec+0x88>)
 800f768:	695b      	ldr	r3, [r3, #20]
 800f76a:	6839      	ldr	r1, [r7, #0]
 800f76c:	f9b1 1000 	ldrsh.w	r1, [r1]
 800f770:	3902      	subs	r1, #2
 800f772:	fb01 f303 	mul.w	r3, r1, r3
 800f776:	4413      	add	r3, r2
 800f778:	60fb      	str	r3, [r7, #12]
  if(ProgDiskPage(pBuffer, ProgAddr)!= OK) return SEC_ERR; // д���� 4096 Byte �� дǰ������
 800f77a:	68f9      	ldr	r1, [r7, #12]
 800f77c:	6878      	ldr	r0, [r7, #4]
 800f77e:	f7ff fe71 	bl	800f464 <ProgDiskPage>
 800f782:	4603      	mov	r3, r0
 800f784:	2b00      	cmp	r3, #0
 800f786:	d001      	beq.n	800f78c <ProgFileSec+0x34>
 800f788:	2301      	movs	r3, #1
 800f78a:	e025      	b.n	800f7d8 <ProgFileSec+0x80>

  if(NextCluster(pCluster)!=0) return FAT_ERR;                 // ȡ��һ���غ�
 800f78c:	6838      	ldr	r0, [r7, #0]
 800f78e:	f7ff ff8d 	bl	800f6ac <NextCluster>
 800f792:	4603      	mov	r3, r0
 800f794:	2b00      	cmp	r3, #0
 800f796:	d001      	beq.n	800f79c <ProgFileSec+0x44>
 800f798:	2302      	movs	r3, #2
 800f79a:	e01d      	b.n	800f7d8 <ProgFileSec+0x80>
  Tmp = *(pCluster+1);
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	885b      	ldrh	r3, [r3, #2]
 800f7a0:	817b      	strh	r3, [r7, #10]
  if(*pCluster == 0){
 800f7a2:	683b      	ldr	r3, [r7, #0]
 800f7a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d114      	bne.n	800f7d6 <ProgFileSec+0x7e>
    *pCluster = Tmp;
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	897a      	ldrh	r2, [r7, #10]
 800f7b0:	801a      	strh	r2, [r3, #0]
    if(SeekBlank (pBuffer, pCluster )!= OK) return OVER;
 800f7b2:	6839      	ldr	r1, [r7, #0]
 800f7b4:	6878      	ldr	r0, [r7, #4]
 800f7b6:	f7ff fe77 	bl	800f4a8 <SeekBlank>
 800f7ba:	4603      	mov	r3, r0
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d001      	beq.n	800f7c4 <ProgFileSec+0x6c>
 800f7c0:	2303      	movs	r3, #3
 800f7c2:	e009      	b.n	800f7d8 <ProgFileSec+0x80>
    if(SetCluster(pBuffer, pCluster )!= OK) return SEC_ERR;
 800f7c4:	6839      	ldr	r1, [r7, #0]
 800f7c6:	6878      	ldr	r0, [r7, #4]
 800f7c8:	f7ff feea 	bl	800f5a0 <SetCluster>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d001      	beq.n	800f7d6 <ProgFileSec+0x7e>
 800f7d2:	2301      	movs	r3, #1
 800f7d4:	e000      	b.n	800f7d8 <ProgFileSec+0x80>
  }
  return OK;
 800f7d6:	2300      	movs	r3, #0
}
 800f7d8:	4618      	mov	r0, r3
 800f7da:	3710      	adds	r7, #16
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	bd80      	pop	{r7, pc}
 800f7e0:	20000194 	.word	0x20000194

0800f7e4 <ReadFileSec>:

/*******************************************************************************
 ���ļ�����(512 Bytes), ����ʱָ��ָ����һ���غţ���ǰ�غű�����ָ��+1��λ��
*******************************************************************************/
char ReadFileSec(char* pBuffer, short* pCluster)
{
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b084      	sub	sp, #16
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]
 800f7ec:	6039      	str	r1, [r7, #0]
  int ReadAddr =FAT_V.FILE_BASE + FAT_V.SEC_LEN*(*pCluster-2);
 800f7ee:	4b13      	ldr	r3, [pc, #76]	; (800f83c <ReadFileSec+0x58>)
 800f7f0:	68da      	ldr	r2, [r3, #12]
 800f7f2:	4b12      	ldr	r3, [pc, #72]	; (800f83c <ReadFileSec+0x58>)
 800f7f4:	695b      	ldr	r3, [r3, #20]
 800f7f6:	6839      	ldr	r1, [r7, #0]
 800f7f8:	f9b1 1000 	ldrsh.w	r1, [r1]
 800f7fc:	3902      	subs	r1, #2
 800f7fe:	fb01 f303 	mul.w	r3, r1, r3
 800f802:	4413      	add	r3, r2
 800f804:	60fb      	str	r3, [r7, #12]

  if(ReadDiskData(pBuffer, ReadAddr, FAT_V.SEC_LEN)!=OK) return SEC_ERR;  //(SEC_LEN=4096/512)
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	4a0c      	ldr	r2, [pc, #48]	; (800f83c <ReadFileSec+0x58>)
 800f80a:	6952      	ldr	r2, [r2, #20]
 800f80c:	b212      	sxth	r2, r2
 800f80e:	4619      	mov	r1, r3
 800f810:	6878      	ldr	r0, [r7, #4]
 800f812:	f7ff fd89 	bl	800f328 <ReadDiskData>
 800f816:	4603      	mov	r3, r0
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d001      	beq.n	800f820 <ReadFileSec+0x3c>
 800f81c:	2301      	movs	r3, #1
 800f81e:	e008      	b.n	800f832 <ReadFileSec+0x4e>
  if(NextCluster(pCluster)!=0) return FAT_ERR;                 // ȡ��һ���غ�
 800f820:	6838      	ldr	r0, [r7, #0]
 800f822:	f7ff ff43 	bl	800f6ac <NextCluster>
 800f826:	4603      	mov	r3, r0
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d001      	beq.n	800f830 <ReadFileSec+0x4c>
 800f82c:	2302      	movs	r3, #2
 800f82e:	e000      	b.n	800f832 <ReadFileSec+0x4e>
  return OK;
 800f830:	2300      	movs	r3, #0
}
 800f832:	4618      	mov	r0, r3
 800f834:	3710      	adds	r7, #16
 800f836:	46bd      	mov	sp, r7
 800f838:	bd80      	pop	{r7, pc}
 800f83a:	bf00      	nop
 800f83c:	20000194 	.word	0x20000194

0800f840 <CloseFile>:

/*******************************************************************************
 �ر��ļ�����������д��FAT�����ļ�����д��Ŀ¼�����FAT1��FAT2
*******************************************************************************/
char CloseFile(char* pBuffer, int Lenght, short* pCluster, int* pDirAddr)
{
 800f840:	b580      	push	{r7, lr}
 800f842:	b086      	sub	sp, #24
 800f844:	af00      	add	r7, sp, #0
 800f846:	60f8      	str	r0, [r7, #12]
 800f848:	60b9      	str	r1, [r7, #8]
 800f84a:	607a      	str	r2, [r7, #4]
 800f84c:	603b      	str	r3, [r7, #0]
  int n;

  n=0xFFF;
 800f84e:	f640 73ff 	movw	r3, #4095	; 0xfff
 800f852:	617b      	str	r3, [r7, #20]
  *pCluster = 0xFFF;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	f640 72ff 	movw	r2, #4095	; 0xfff
 800f85a:	801a      	strh	r2, [r3, #0]
  SetCluster(pBuffer, pCluster);
 800f85c:	6879      	ldr	r1, [r7, #4]
 800f85e:	68f8      	ldr	r0, [r7, #12]
 800f860:	f7ff fe9e 	bl	800f5a0 <SetCluster>

  if(ReadDiskData(pBuffer, (*pDirAddr &(~n)), FAT_V.SEC_LEN)!= OK) return SEC_ERR;
 800f864:	683b      	ldr	r3, [r7, #0]
 800f866:	681a      	ldr	r2, [r3, #0]
 800f868:	697b      	ldr	r3, [r7, #20]
 800f86a:	43db      	mvns	r3, r3
 800f86c:	4013      	ands	r3, r2
 800f86e:	4619      	mov	r1, r3
 800f870:	4b24      	ldr	r3, [pc, #144]	; (800f904 <CloseFile+0xc4>)
 800f872:	695b      	ldr	r3, [r3, #20]
 800f874:	b21b      	sxth	r3, r3
 800f876:	461a      	mov	r2, r3
 800f878:	68f8      	ldr	r0, [r7, #12]
 800f87a:	f7ff fd55 	bl	800f328 <ReadDiskData>
 800f87e:	4603      	mov	r3, r0
 800f880:	2b00      	cmp	r3, #0
 800f882:	d001      	beq.n	800f888 <CloseFile+0x48>
 800f884:	2301      	movs	r3, #1
 800f886:	e039      	b.n	800f8fc <CloseFile+0xbc>
  *(char* )(pBuffer +(*pDirAddr & n)+ 0x0B)= 0x20;
 800f888:	683b      	ldr	r3, [r7, #0]
 800f88a:	681a      	ldr	r2, [r3, #0]
 800f88c:	697b      	ldr	r3, [r7, #20]
 800f88e:	4013      	ands	r3, r2
 800f890:	330b      	adds	r3, #11
 800f892:	68fa      	ldr	r2, [r7, #12]
 800f894:	4413      	add	r3, r2
 800f896:	2220      	movs	r2, #32
 800f898:	701a      	strb	r2, [r3, #0]
  *(int*)(pBuffer +(*pDirAddr & n)+ 0x1C)= Lenght;
 800f89a:	683b      	ldr	r3, [r7, #0]
 800f89c:	681a      	ldr	r2, [r3, #0]
 800f89e:	697b      	ldr	r3, [r7, #20]
 800f8a0:	4013      	ands	r3, r2
 800f8a2:	331c      	adds	r3, #28
 800f8a4:	68fa      	ldr	r2, [r7, #12]
 800f8a6:	4413      	add	r3, r2
 800f8a8:	68ba      	ldr	r2, [r7, #8]
 800f8aa:	601a      	str	r2, [r3, #0]
  if(ProgDiskPage(pBuffer, (*pDirAddr &(~n)))!= OK) return SEC_ERR;
 800f8ac:	683b      	ldr	r3, [r7, #0]
 800f8ae:	681a      	ldr	r2, [r3, #0]
 800f8b0:	697b      	ldr	r3, [r7, #20]
 800f8b2:	43db      	mvns	r3, r3
 800f8b4:	4013      	ands	r3, r2
 800f8b6:	4619      	mov	r1, r3
 800f8b8:	68f8      	ldr	r0, [r7, #12]
 800f8ba:	f7ff fdd3 	bl	800f464 <ProgDiskPage>
 800f8be:	4603      	mov	r3, r0
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d001      	beq.n	800f8c8 <CloseFile+0x88>
 800f8c4:	2301      	movs	r3, #1
 800f8c6:	e019      	b.n	800f8fc <CloseFile+0xbc>
    if(ReadDiskData(pBuffer, FAT_V.FAT1_BASE, FAT_V.SEC_LEN)!= OK) return SEC_ERR;
 800f8c8:	4b0e      	ldr	r3, [pc, #56]	; (800f904 <CloseFile+0xc4>)
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	4a0d      	ldr	r2, [pc, #52]	; (800f904 <CloseFile+0xc4>)
 800f8ce:	6952      	ldr	r2, [r2, #20]
 800f8d0:	b212      	sxth	r2, r2
 800f8d2:	4619      	mov	r1, r3
 800f8d4:	68f8      	ldr	r0, [r7, #12]
 800f8d6:	f7ff fd27 	bl	800f328 <ReadDiskData>
 800f8da:	4603      	mov	r3, r0
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d001      	beq.n	800f8e4 <CloseFile+0xa4>
 800f8e0:	2301      	movs	r3, #1
 800f8e2:	e00b      	b.n	800f8fc <CloseFile+0xbc>
    if(ProgDiskPage(pBuffer, FAT_V.FAT2_BASE     )!= OK) return SEC_ERR;
 800f8e4:	4b07      	ldr	r3, [pc, #28]	; (800f904 <CloseFile+0xc4>)
 800f8e6:	685b      	ldr	r3, [r3, #4]
 800f8e8:	4619      	mov	r1, r3
 800f8ea:	68f8      	ldr	r0, [r7, #12]
 800f8ec:	f7ff fdba 	bl	800f464 <ProgDiskPage>
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d001      	beq.n	800f8fa <CloseFile+0xba>
 800f8f6:	2301      	movs	r3, #1
 800f8f8:	e000      	b.n	800f8fc <CloseFile+0xbc>
 return OK;
 800f8fa:	2300      	movs	r3, #0
}
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	3718      	adds	r7, #24
 800f900:	46bd      	mov	sp, r7
 800f902:	bd80      	pop	{r7, pc}
 800f904:	20000194 	.word	0x20000194

0800f908 <OpenFileWr>:

/*******************************************************************************
 дģʽ���ļ��������ļ���һ���غż�Ŀ¼���ַ
*******************************************************************************/
char OpenFileWr(char* pBuffer, char* pFileName, short* pCluster, int* pDirAddr)
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b088      	sub	sp, #32
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	60f8      	str	r0, [r7, #12]
 800f910:	60b9      	str	r1, [r7, #8]
 800f912:	607a      	str	r2, [r7, #4]
 800f914:	603b      	str	r3, [r7, #0]
  int i, n,offset;

  i = OpenFileRd(pBuffer, pFileName, pCluster, (unsigned *)pDirAddr);
 800f916:	683b      	ldr	r3, [r7, #0]
 800f918:	687a      	ldr	r2, [r7, #4]
 800f91a:	68b9      	ldr	r1, [r7, #8]
 800f91c:	68f8      	ldr	r0, [r7, #12]
 800f91e:	f7ff fd29 	bl	800f374 <OpenFileRd>
 800f922:	4603      	mov	r3, r0
 800f924:	61fb      	str	r3, [r7, #28]
  if(i != NEW) return i;
 800f926:	69fb      	ldr	r3, [r7, #28]
 800f928:	2b04      	cmp	r3, #4
 800f92a:	d002      	beq.n	800f932 <OpenFileWr+0x2a>
 800f92c:	69fb      	ldr	r3, [r7, #28]
 800f92e:	b2db      	uxtb	r3, r3
 800f930:	e045      	b.n	800f9be <OpenFileWr+0xb6>
  else{                                                    // ��ǰ��Ϊ�հ�Ŀ¼��
    if(SeekBlank(pBuffer, pCluster)!= OK) return OVER;     // ��FAT��������
 800f932:	6879      	ldr	r1, [r7, #4]
 800f934:	68f8      	ldr	r0, [r7, #12]
 800f936:	f7ff fdb7 	bl	800f4a8 <SeekBlank>
 800f93a:	4603      	mov	r3, r0
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d001      	beq.n	800f944 <OpenFileWr+0x3c>
 800f940:	2303      	movs	r3, #3
 800f942:	e03c      	b.n	800f9be <OpenFileWr+0xb6>
      n =*pDirAddr & 0xFFF;
 800f944:	683b      	ldr	r3, [r7, #0]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f94c:	61bb      	str	r3, [r7, #24]
    offset=*pDirAddr-n;
 800f94e:	683b      	ldr	r3, [r7, #0]
 800f950:	681a      	ldr	r2, [r3, #0]
 800f952:	69bb      	ldr	r3, [r7, #24]
 800f954:	1ad3      	subs	r3, r2, r3
 800f956:	617b      	str	r3, [r7, #20]
    if(ReadDiskData(pBuffer,offset, FAT_V.SEC_LEN)!= OK) return SEC_ERR;
 800f958:	697b      	ldr	r3, [r7, #20]
 800f95a:	4a1b      	ldr	r2, [pc, #108]	; (800f9c8 <OpenFileWr+0xc0>)
 800f95c:	6952      	ldr	r2, [r2, #20]
 800f95e:	b212      	sxth	r2, r2
 800f960:	4619      	mov	r1, r3
 800f962:	68f8      	ldr	r0, [r7, #12]
 800f964:	f7ff fce0 	bl	800f328 <ReadDiskData>
 800f968:	4603      	mov	r3, r0
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d001      	beq.n	800f972 <OpenFileWr+0x6a>
 800f96e:	2301      	movs	r3, #1
 800f970:	e025      	b.n	800f9be <OpenFileWr+0xb6>
    for(i=0; i<11; i++) pBuffer[n+i]= pFileName[i];      // ������Ŀ¼��offset +
 800f972:	2300      	movs	r3, #0
 800f974:	61fb      	str	r3, [r7, #28]
 800f976:	e00d      	b.n	800f994 <OpenFileWr+0x8c>
 800f978:	69fb      	ldr	r3, [r7, #28]
 800f97a:	68ba      	ldr	r2, [r7, #8]
 800f97c:	441a      	add	r2, r3
 800f97e:	69b9      	ldr	r1, [r7, #24]
 800f980:	69fb      	ldr	r3, [r7, #28]
 800f982:	440b      	add	r3, r1
 800f984:	4619      	mov	r1, r3
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	440b      	add	r3, r1
 800f98a:	7812      	ldrb	r2, [r2, #0]
 800f98c:	701a      	strb	r2, [r3, #0]
 800f98e:	69fb      	ldr	r3, [r7, #28]
 800f990:	3301      	adds	r3, #1
 800f992:	61fb      	str	r3, [r7, #28]
 800f994:	69fb      	ldr	r3, [r7, #28]
 800f996:	2b0a      	cmp	r3, #10
 800f998:	ddee      	ble.n	800f978 <OpenFileWr+0x70>
    *(short*)(pBuffer + n + 0x1A)= *pCluster;
 800f99a:	69bb      	ldr	r3, [r7, #24]
 800f99c:	331a      	adds	r3, #26
 800f99e:	68fa      	ldr	r2, [r7, #12]
 800f9a0:	4413      	add	r3, r2
 800f9a2:	687a      	ldr	r2, [r7, #4]
 800f9a4:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f9a8:	801a      	strh	r2, [r3, #0]
    if(ProgDiskPage(pBuffer,offset)!= OK) return SEC_ERR;
 800f9aa:	6979      	ldr	r1, [r7, #20]
 800f9ac:	68f8      	ldr	r0, [r7, #12]
 800f9ae:	f7ff fd59 	bl	800f464 <ProgDiskPage>
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d001      	beq.n	800f9bc <OpenFileWr+0xb4>
 800f9b8:	2301      	movs	r3, #1
 800f9ba:	e000      	b.n	800f9be <OpenFileWr+0xb6>
    return OK;
 800f9bc:	2300      	movs	r3, #0
  }
}
 800f9be:	4618      	mov	r0, r3
 800f9c0:	3720      	adds	r7, #32
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	bd80      	pop	{r7, pc}
 800f9c6:	bf00      	nop
 800f9c8:	20000194 	.word	0x20000194

0800f9cc <Color_Num>:

/*******************************************************************************
Color_Num: �����ǰ��ɫ�Ķ�Ӧ��ɫ����
*******************************************************************************/
char Color_Num(short Color)
{
 800f9cc:	b480      	push	{r7}
 800f9ce:	b083      	sub	sp, #12
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	80fb      	strh	r3, [r7, #6]
  if(Color == WHT)                  return 0;
  else if((Color & CYN  )== CYN  )  return 1;
 800f9d6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f9da:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800f9de:	4013      	ands	r3, r2
 800f9e0:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800f9e4:	4293      	cmp	r3, r2
 800f9e6:	d101      	bne.n	800f9ec <Color_Num+0x20>
 800f9e8:	2301      	movs	r3, #1
 800f9ea:	e068      	b.n	800fabe <Color_Num+0xf2>
  else if((Color & CYN_ )== CYN_ )  return 2;
 800f9ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f9f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800f9f4:	f5b3 4f04 	cmp.w	r3, #33792	; 0x8400
 800f9f8:	d101      	bne.n	800f9fe <Color_Num+0x32>
 800f9fa:	2302      	movs	r3, #2
 800f9fc:	e05f      	b.n	800fabe <Color_Num+0xf2>
  else if((Color & YEL  )== YEL  )  return 3;
 800f9fe:	88fb      	ldrh	r3, [r7, #6]
 800fa00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fa04:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800fa08:	4293      	cmp	r3, r2
 800fa0a:	d101      	bne.n	800fa10 <Color_Num+0x44>
 800fa0c:	2303      	movs	r3, #3
 800fa0e:	e056      	b.n	800fabe <Color_Num+0xf2>
  else if((Color & YEL_ )== YEL_ )  return 4;
 800fa10:	88fb      	ldrh	r3, [r7, #6]
 800fa12:	f403 6382 	and.w	r3, r3, #1040	; 0x410
 800fa16:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800fa1a:	d101      	bne.n	800fa20 <Color_Num+0x54>
 800fa1c:	2304      	movs	r3, #4
 800fa1e:	e04e      	b.n	800fabe <Color_Num+0xf2>
  else if((Color & PUR  )== PUR  )  return 5;
 800fa20:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800fa24:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800fa28:	4013      	ands	r3, r2
 800fa2a:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800fa2e:	4293      	cmp	r3, r2
 800fa30:	d101      	bne.n	800fa36 <Color_Num+0x6a>
 800fa32:	2305      	movs	r3, #5
 800fa34:	e043      	b.n	800fabe <Color_Num+0xf2>
  else if((Color & PUR_ )== PUR_ )  return 6;
 800fa36:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800fa3a:	f248 0310 	movw	r3, #32784	; 0x8010
 800fa3e:	4013      	ands	r3, r2
 800fa40:	f248 0210 	movw	r2, #32784	; 0x8010
 800fa44:	4293      	cmp	r3, r2
 800fa46:	d101      	bne.n	800fa4c <Color_Num+0x80>
 800fa48:	2306      	movs	r3, #6
 800fa4a:	e038      	b.n	800fabe <Color_Num+0xf2>
  else if((Color & GRN  )== GRN  )  return 7;
 800fa4c:	88fb      	ldrh	r3, [r7, #6]
 800fa4e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800fa52:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 800fa56:	d101      	bne.n	800fa5c <Color_Num+0x90>
 800fa58:	2307      	movs	r3, #7
 800fa5a:	e030      	b.n	800fabe <Color_Num+0xf2>
  else if((Color & GRN_ )== GRN_ )  return 8;
 800fa5c:	88fb      	ldrh	r3, [r7, #6]
 800fa5e:	f403 6382 	and.w	r3, r3, #1040	; 0x410
 800fa62:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800fa66:	d101      	bne.n	800fa6c <Color_Num+0xa0>
 800fa68:	2308      	movs	r3, #8
 800fa6a:	e028      	b.n	800fabe <Color_Num+0xf2>
  else if((Color & GRY  )== GRY  )  return 9;
 800fa6c:	88fb      	ldrh	r3, [r7, #6]
 800fa6e:	461a      	mov	r2, r3
 800fa70:	f643 13e7 	movw	r3, #14823	; 0x39e7
 800fa74:	4013      	ands	r3, r2
 800fa76:	f643 12e7 	movw	r2, #14823	; 0x39e7
 800fa7a:	4293      	cmp	r3, r2
 800fa7c:	d101      	bne.n	800fa82 <Color_Num+0xb6>
 800fa7e:	2309      	movs	r3, #9
 800fa80:	e01d      	b.n	800fabe <Color_Num+0xf2>
  else if((Color & ORN  )== ORN  )  return 10;
 800fa82:	88fb      	ldrh	r3, [r7, #6]
 800fa84:	461a      	mov	r2, r3
 800fa86:	f240 531f 	movw	r3, #1311	; 0x51f
 800fa8a:	4013      	ands	r3, r2
 800fa8c:	f240 521f 	movw	r2, #1311	; 0x51f
 800fa90:	4293      	cmp	r3, r2
 800fa92:	d101      	bne.n	800fa98 <Color_Num+0xcc>
 800fa94:	230a      	movs	r3, #10
 800fa96:	e012      	b.n	800fabe <Color_Num+0xf2>
  else if((Color & BLU  )== BLU  )  return 11;
 800fa98:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800fa9c:	f64f 4310 	movw	r3, #64528	; 0xfc10
 800faa0:	4013      	ands	r3, r2
 800faa2:	f64f 4210 	movw	r2, #64528	; 0xfc10
 800faa6:	4293      	cmp	r3, r2
 800faa8:	d101      	bne.n	800faae <Color_Num+0xe2>
 800faaa:	230b      	movs	r3, #11
 800faac:	e007      	b.n	800fabe <Color_Num+0xf2>
  else if((Color & RED  )== RED  )  return 12;
 800faae:	88fb      	ldrh	r3, [r7, #6]
 800fab0:	f003 031f 	and.w	r3, r3, #31
 800fab4:	2b1f      	cmp	r3, #31
 800fab6:	d101      	bne.n	800fabc <Color_Num+0xf0>
 800fab8:	230c      	movs	r3, #12
 800faba:	e000      	b.n	800fabe <Color_Num+0xf2>
  else if((Color & BLK  )== BLK  )  return 13;
 800fabc:	230d      	movs	r3, #13
  else if((Color & LGN  )== LGN  )  return 14;
  else                              return 15;
}
 800fabe:	4618      	mov	r0, r3
 800fac0:	370c      	adds	r7, #12
 800fac2:	46bd      	mov	sp, r7
 800fac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac8:	4770      	bx	lr
	...

0800facc <PrintClk>:

/*******************************************************************************
 Print_Clk: ����ָʾ
*******************************************************************************/
void PrintClk(short x0, short y0, char Phase)
{
 800facc:	b580      	push	{r7, lr}
 800face:	b084      	sub	sp, #16
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	4603      	mov	r3, r0
 800fad4:	80fb      	strh	r3, [r7, #6]
 800fad6:	460b      	mov	r3, r1
 800fad8:	80bb      	strh	r3, [r7, #4]
 800fada:	4613      	mov	r3, r2
 800fadc:	70fb      	strb	r3, [r7, #3]
  short i, j, b;
  SetColor(GRY, TCOLOR[FN]);
 800fade:	4b31      	ldr	r3, [pc, #196]	; (800fba4 <PrintClk+0xd8>)
 800fae0:	895b      	ldrh	r3, [r3, #10]
 800fae2:	4619      	mov	r1, r3
 800fae4:	f643 10e7 	movw	r0, #14823	; 0x39e7
 800fae8:	f7fe fa6a 	bl	800dfc0 <SetColor>
  x0=S_X[SAVE_BMP]+30;
 800faec:	4b2e      	ldr	r3, [pc, #184]	; (800fba8 <PrintClk+0xdc>)
 800faee:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800faf2:	b29b      	uxth	r3, r3
 800faf4:	331e      	adds	r3, #30
 800faf6:	b29b      	uxth	r3, r3
 800faf8:	80fb      	strh	r3, [r7, #6]
  DispStr(S_X[SAVE_BMP]-3, LABLE_Y, PRN, "             ");
 800fafa:	4b2b      	ldr	r3, [pc, #172]	; (800fba8 <PrintClk+0xdc>)
 800fafc:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800fb00:	b29b      	uxth	r3, r3
 800fb02:	3b03      	subs	r3, #3
 800fb04:	b29b      	uxth	r3, r3
 800fb06:	b218      	sxth	r0, r3
 800fb08:	4b28      	ldr	r3, [pc, #160]	; (800fbac <PrintClk+0xe0>)
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	2103      	movs	r1, #3
 800fb0e:	f7fe fa6f 	bl	800dff0 <DispStr>
  for(i=1; i<11; ++i){
 800fb12:	2301      	movs	r3, #1
 800fb14:	81fb      	strh	r3, [r7, #14]
 800fb16:	e03c      	b.n	800fb92 <PrintClk+0xc6>
    b = CLK_TAB[Phase *11 + i];
 800fb18:	78fa      	ldrb	r2, [r7, #3]
 800fb1a:	4613      	mov	r3, r2
 800fb1c:	009b      	lsls	r3, r3, #2
 800fb1e:	4413      	add	r3, r2
 800fb20:	005b      	lsls	r3, r3, #1
 800fb22:	441a      	add	r2, r3
 800fb24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fb28:	4413      	add	r3, r2
 800fb2a:	4a21      	ldr	r2, [pc, #132]	; (800fbb0 <PrintClk+0xe4>)
 800fb2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fb30:	817b      	strh	r3, [r7, #10]
    for(j=0; j<11; ++j){
 800fb32:	2300      	movs	r3, #0
 800fb34:	81bb      	strh	r3, [r7, #12]
 800fb36:	e024      	b.n	800fb82 <PrintClk+0xb6>
      LCD_Set_Posi((x0+j), (y0+i));
 800fb38:	88fa      	ldrh	r2, [r7, #6]
 800fb3a:	89bb      	ldrh	r3, [r7, #12]
 800fb3c:	4413      	add	r3, r2
 800fb3e:	b29b      	uxth	r3, r3
 800fb40:	b218      	sxth	r0, r3
 800fb42:	88ba      	ldrh	r2, [r7, #4]
 800fb44:	89fb      	ldrh	r3, [r7, #14]
 800fb46:	4413      	add	r3, r2
 800fb48:	b29b      	uxth	r3, r3
 800fb4a:	b21b      	sxth	r3, r3
 800fb4c:	4619      	mov	r1, r3
 800fb4e:	f002 fce7 	bl	8012520 <LCD_Set_Posi>
      if((b >> j)& 0x001)
 800fb52:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800fb56:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800fb5a:	fa42 f303 	asr.w	r3, r2, r3
 800fb5e:	f003 0301 	and.w	r3, r3, #1
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d004      	beq.n	800fb70 <PrintClk+0xa4>
        LCD_Set_Pixel(BLU);
 800fb66:	f64f 4010 	movw	r0, #64528	; 0xfc10
 800fb6a:	f002 fd27 	bl	80125bc <LCD_Set_Pixel>
 800fb6e:	e004      	b.n	800fb7a <PrintClk+0xae>
      else
        LCD_Set_Pixel(Background);
 800fb70:	4b10      	ldr	r3, [pc, #64]	; (800fbb4 <PrintClk+0xe8>)
 800fb72:	881b      	ldrh	r3, [r3, #0]
 800fb74:	4618      	mov	r0, r3
 800fb76:	f002 fd21 	bl	80125bc <LCD_Set_Pixel>
    for(j=0; j<11; ++j){
 800fb7a:	89bb      	ldrh	r3, [r7, #12]
 800fb7c:	3301      	adds	r3, #1
 800fb7e:	b29b      	uxth	r3, r3
 800fb80:	81bb      	strh	r3, [r7, #12]
 800fb82:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800fb86:	2b0a      	cmp	r3, #10
 800fb88:	ddd6      	ble.n	800fb38 <PrintClk+0x6c>
  for(i=1; i<11; ++i){
 800fb8a:	89fb      	ldrh	r3, [r7, #14]
 800fb8c:	3301      	adds	r3, #1
 800fb8e:	b29b      	uxth	r3, r3
 800fb90:	81fb      	strh	r3, [r7, #14]
 800fb92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fb96:	2b0a      	cmp	r3, #10
 800fb98:	ddbe      	ble.n	800fb18 <PrintClk+0x4c>
    }
  }
}
 800fb9a:	bf00      	nop
 800fb9c:	bf00      	nop
 800fb9e:	3710      	adds	r7, #16
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd80      	pop	{r7, pc}
 800fba4:	08001f08 	.word	0x08001f08
 800fba8:	0800215c 	.word	0x0800215c
 800fbac:	080001ec 	.word	0x080001ec
 800fbb0:	08001bbc 	.word	0x08001bbc
 800fbb4:	200015d6 	.word	0x200015d6

0800fbb8 <WriteVar>:

/*******************************************************************************
 WriteVar
*******************************************************************************/
void WriteVar(short Var, short* pClu)
  {
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b084      	sub	sp, #16
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	6039      	str	r1, [r7, #0]
 800fbc2:	80fb      	strh	r3, [r7, #6]
    short temp_addr,temp_len;
    short Buf_len = 4096;
 800fbc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fbc8:	81fb      	strh	r3, [r7, #14]

    memset(Num, 0, 4);
 800fbca:	2204      	movs	r2, #4
 800fbcc:	2100      	movs	r1, #0
 800fbce:	4847      	ldr	r0, [pc, #284]	; (800fcec <WriteVar+0x134>)
 800fbd0:	f013 fa4a 	bl	8023068 <memset>
    u16ToDec4Str(Num,Var);
 800fbd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fbd8:	4619      	mov	r1, r3
 800fbda:	4844      	ldr	r0, [pc, #272]	; (800fcec <WriteVar+0x134>)
 800fbdc:	f002 fa1e 	bl	801201c <u16ToDec4Str>
    Length = strlen((char const*)Num);
 800fbe0:	4842      	ldr	r0, [pc, #264]	; (800fcec <WriteVar+0x134>)
 800fbe2:	f7fc fa2d 	bl	800c040 <strlen>
 800fbe6:	4603      	mov	r3, r0
 800fbe8:	b21a      	sxth	r2, r3
 800fbea:	4b41      	ldr	r3, [pc, #260]	; (800fcf0 <WriteVar+0x138>)
 800fbec:	801a      	strh	r2, [r3, #0]
    memcpy(&F_Buff[Addr], Num, Length);
 800fbee:	4b41      	ldr	r3, [pc, #260]	; (800fcf4 <WriteVar+0x13c>)
 800fbf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fbf4:	461a      	mov	r2, r3
 800fbf6:	4b40      	ldr	r3, [pc, #256]	; (800fcf8 <WriteVar+0x140>)
 800fbf8:	4413      	add	r3, r2
 800fbfa:	4a3d      	ldr	r2, [pc, #244]	; (800fcf0 <WriteVar+0x138>)
 800fbfc:	f9b2 2000 	ldrsh.w	r2, [r2]
 800fc00:	493a      	ldr	r1, [pc, #232]	; (800fcec <WriteVar+0x134>)
 800fc02:	4618      	mov	r0, r3
 800fc04:	f013 fa22 	bl	802304c <memcpy>
    Addr = Addr + Length;
 800fc08:	4b3a      	ldr	r3, [pc, #232]	; (800fcf4 <WriteVar+0x13c>)
 800fc0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fc0e:	b29a      	uxth	r2, r3
 800fc10:	4b37      	ldr	r3, [pc, #220]	; (800fcf0 <WriteVar+0x138>)
 800fc12:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fc16:	b29b      	uxth	r3, r3
 800fc18:	4413      	add	r3, r2
 800fc1a:	b29b      	uxth	r3, r3
 800fc1c:	b21a      	sxth	r2, r3
 800fc1e:	4b35      	ldr	r3, [pc, #212]	; (800fcf4 <WriteVar+0x13c>)
 800fc20:	801a      	strh	r2, [r3, #0]
    Svg_Cnt = Svg_Cnt+ Length;
 800fc22:	4b33      	ldr	r3, [pc, #204]	; (800fcf0 <WriteVar+0x138>)
 800fc24:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fc28:	461a      	mov	r2, r3
 800fc2a:	4b34      	ldr	r3, [pc, #208]	; (800fcfc <WriteVar+0x144>)
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	4413      	add	r3, r2
 800fc30:	4a32      	ldr	r2, [pc, #200]	; (800fcfc <WriteVar+0x144>)
 800fc32:	6013      	str	r3, [r2, #0]
    if(Addr >=Buf_len){
 800fc34:	4b2f      	ldr	r3, [pc, #188]	; (800fcf4 <WriteVar+0x13c>)
 800fc36:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fc3a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800fc3e:	429a      	cmp	r2, r3
 800fc40:	dc4f      	bgt.n	800fce2 <WriteVar+0x12a>
      if(ProgFileSec(F_Buff, pClu)!= OK) {}; // д������
 800fc42:	6839      	ldr	r1, [r7, #0]
 800fc44:	482c      	ldr	r0, [pc, #176]	; (800fcf8 <WriteVar+0x140>)
 800fc46:	f7ff fd87 	bl	800f758 <ProgFileSec>
      PrintClk(264,2,(Clk_Cnt++ >>1)& 3);  // ����ָʾ
 800fc4a:	4b2d      	ldr	r3, [pc, #180]	; (800fd00 <WriteVar+0x148>)
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	1c5a      	adds	r2, r3, #1
 800fc50:	492b      	ldr	r1, [pc, #172]	; (800fd00 <WriteVar+0x148>)
 800fc52:	600a      	str	r2, [r1, #0]
 800fc54:	105b      	asrs	r3, r3, #1
 800fc56:	b2db      	uxtb	r3, r3
 800fc58:	f003 0303 	and.w	r3, r3, #3
 800fc5c:	b2db      	uxtb	r3, r3
 800fc5e:	461a      	mov	r2, r3
 800fc60:	2102      	movs	r1, #2
 800fc62:	f44f 7084 	mov.w	r0, #264	; 0x108
 800fc66:	f7ff ff31 	bl	800facc <PrintClk>
      temp_len = Addr -Buf_len;
 800fc6a:	4b22      	ldr	r3, [pc, #136]	; (800fcf4 <WriteVar+0x13c>)
 800fc6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fc70:	b29a      	uxth	r2, r3
 800fc72:	89fb      	ldrh	r3, [r7, #14]
 800fc74:	1ad3      	subs	r3, r2, r3
 800fc76:	b29b      	uxth	r3, r3
 800fc78:	81bb      	strh	r3, [r7, #12]
      temp_addr = Length - temp_len;
 800fc7a:	4b1d      	ldr	r3, [pc, #116]	; (800fcf0 <WriteVar+0x138>)
 800fc7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fc80:	b29a      	uxth	r2, r3
 800fc82:	89bb      	ldrh	r3, [r7, #12]
 800fc84:	1ad3      	subs	r3, r2, r3
 800fc86:	b29b      	uxth	r3, r3
 800fc88:	817b      	strh	r3, [r7, #10]
      Addr = 0;
 800fc8a:	4b1a      	ldr	r3, [pc, #104]	; (800fcf4 <WriteVar+0x13c>)
 800fc8c:	2200      	movs	r2, #0
 800fc8e:	801a      	strh	r2, [r3, #0]
      memset(F_Buff,0,Buf_len);
 800fc90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fc94:	461a      	mov	r2, r3
 800fc96:	2100      	movs	r1, #0
 800fc98:	4817      	ldr	r0, [pc, #92]	; (800fcf8 <WriteVar+0x140>)
 800fc9a:	f013 f9e5 	bl	8023068 <memset>
      memset(Data,0,310);
 800fc9e:	f44f 729b 	mov.w	r2, #310	; 0x136
 800fca2:	2100      	movs	r1, #0
 800fca4:	4817      	ldr	r0, [pc, #92]	; (800fd04 <WriteVar+0x14c>)
 800fca6:	f013 f9df 	bl	8023068 <memset>
      memcpy(&F_Buff[Addr],Num + temp_addr, temp_len);
 800fcaa:	4b12      	ldr	r3, [pc, #72]	; (800fcf4 <WriteVar+0x13c>)
 800fcac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fcb0:	461a      	mov	r2, r3
 800fcb2:	4b11      	ldr	r3, [pc, #68]	; (800fcf8 <WriteVar+0x140>)
 800fcb4:	18d0      	adds	r0, r2, r3
 800fcb6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800fcba:	4a0c      	ldr	r2, [pc, #48]	; (800fcec <WriteVar+0x134>)
 800fcbc:	4413      	add	r3, r2
 800fcbe:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800fcc2:	4619      	mov	r1, r3
 800fcc4:	f013 f9c2 	bl	802304c <memcpy>
      Addr = Addr + temp_len;
 800fcc8:	4b0a      	ldr	r3, [pc, #40]	; (800fcf4 <WriteVar+0x13c>)
 800fcca:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fcce:	b29a      	uxth	r2, r3
 800fcd0:	89bb      	ldrh	r3, [r7, #12]
 800fcd2:	4413      	add	r3, r2
 800fcd4:	b29b      	uxth	r3, r3
 800fcd6:	b21a      	sxth	r2, r3
 800fcd8:	4b06      	ldr	r3, [pc, #24]	; (800fcf4 <WriteVar+0x13c>)
 800fcda:	801a      	strh	r2, [r3, #0]
      Length = 0;
 800fcdc:	4b04      	ldr	r3, [pc, #16]	; (800fcf0 <WriteVar+0x138>)
 800fcde:	2200      	movs	r2, #0
 800fce0:	801a      	strh	r2, [r3, #0]
    }
  }
 800fce2:	bf00      	nop
 800fce4:	3710      	adds	r7, #16
 800fce6:	46bd      	mov	sp, r7
 800fce8:	bd80      	pop	{r7, pc}
 800fcea:	bf00      	nop
 800fcec:	200015dc 	.word	0x200015dc
 800fcf0:	20000798 	.word	0x20000798
 800fcf4:	20000796 	.word	0x20000796
 800fcf8:	200017e0 	.word	0x200017e0
 800fcfc:	2000079c 	.word	0x2000079c
 800fd00:	200007a0 	.word	0x200007a0
 800fd04:	20000008 	.word	0x20000008

0800fd08 <WriteStr>:

/*******************************************************************************
 WriteStr
*******************************************************************************/
void WriteStr(char* Str, short* pClu)
  {
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b084      	sub	sp, #16
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
 800fd10:	6039      	str	r1, [r7, #0]
    short temp_addr,temp_len;
    short Buf_len = 4096;
 800fd12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fd16:	81fb      	strh	r3, [r7, #14]

    Length = strlen((char const*)Str);
 800fd18:	6878      	ldr	r0, [r7, #4]
 800fd1a:	f7fc f991 	bl	800c040 <strlen>
 800fd1e:	4603      	mov	r3, r0
 800fd20:	b21a      	sxth	r2, r3
 800fd22:	4b40      	ldr	r3, [pc, #256]	; (800fe24 <WriteStr+0x11c>)
 800fd24:	801a      	strh	r2, [r3, #0]
    memcpy(&F_Buff[Addr], Str, Length);
 800fd26:	4b40      	ldr	r3, [pc, #256]	; (800fe28 <WriteStr+0x120>)
 800fd28:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fd2c:	461a      	mov	r2, r3
 800fd2e:	4b3f      	ldr	r3, [pc, #252]	; (800fe2c <WriteStr+0x124>)
 800fd30:	4413      	add	r3, r2
 800fd32:	4a3c      	ldr	r2, [pc, #240]	; (800fe24 <WriteStr+0x11c>)
 800fd34:	f9b2 2000 	ldrsh.w	r2, [r2]
 800fd38:	6879      	ldr	r1, [r7, #4]
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f013 f986 	bl	802304c <memcpy>
    Addr = Addr + Length;
 800fd40:	4b39      	ldr	r3, [pc, #228]	; (800fe28 <WriteStr+0x120>)
 800fd42:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fd46:	b29a      	uxth	r2, r3
 800fd48:	4b36      	ldr	r3, [pc, #216]	; (800fe24 <WriteStr+0x11c>)
 800fd4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fd4e:	b29b      	uxth	r3, r3
 800fd50:	4413      	add	r3, r2
 800fd52:	b29b      	uxth	r3, r3
 800fd54:	b21a      	sxth	r2, r3
 800fd56:	4b34      	ldr	r3, [pc, #208]	; (800fe28 <WriteStr+0x120>)
 800fd58:	801a      	strh	r2, [r3, #0]
    Svg_Cnt = Svg_Cnt+ Length;
 800fd5a:	4b32      	ldr	r3, [pc, #200]	; (800fe24 <WriteStr+0x11c>)
 800fd5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fd60:	461a      	mov	r2, r3
 800fd62:	4b33      	ldr	r3, [pc, #204]	; (800fe30 <WriteStr+0x128>)
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	4413      	add	r3, r2
 800fd68:	4a31      	ldr	r2, [pc, #196]	; (800fe30 <WriteStr+0x128>)
 800fd6a:	6013      	str	r3, [r2, #0]
    if(Addr >=Buf_len){
 800fd6c:	4b2e      	ldr	r3, [pc, #184]	; (800fe28 <WriteStr+0x120>)
 800fd6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fd72:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800fd76:	429a      	cmp	r2, r3
 800fd78:	dc4f      	bgt.n	800fe1a <WriteStr+0x112>
      if(ProgFileSec(F_Buff, pClu)!= OK) {}; // д������
 800fd7a:	6839      	ldr	r1, [r7, #0]
 800fd7c:	482b      	ldr	r0, [pc, #172]	; (800fe2c <WriteStr+0x124>)
 800fd7e:	f7ff fceb 	bl	800f758 <ProgFileSec>
      PrintClk(264,2,(Clk_Cnt++ >>1)& 3);     // ����ָʾ
 800fd82:	4b2c      	ldr	r3, [pc, #176]	; (800fe34 <WriteStr+0x12c>)
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	1c5a      	adds	r2, r3, #1
 800fd88:	492a      	ldr	r1, [pc, #168]	; (800fe34 <WriteStr+0x12c>)
 800fd8a:	600a      	str	r2, [r1, #0]
 800fd8c:	105b      	asrs	r3, r3, #1
 800fd8e:	b2db      	uxtb	r3, r3
 800fd90:	f003 0303 	and.w	r3, r3, #3
 800fd94:	b2db      	uxtb	r3, r3
 800fd96:	461a      	mov	r2, r3
 800fd98:	2102      	movs	r1, #2
 800fd9a:	f44f 7084 	mov.w	r0, #264	; 0x108
 800fd9e:	f7ff fe95 	bl	800facc <PrintClk>
      temp_len = Addr -Buf_len;
 800fda2:	4b21      	ldr	r3, [pc, #132]	; (800fe28 <WriteStr+0x120>)
 800fda4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fda8:	b29a      	uxth	r2, r3
 800fdaa:	89fb      	ldrh	r3, [r7, #14]
 800fdac:	1ad3      	subs	r3, r2, r3
 800fdae:	b29b      	uxth	r3, r3
 800fdb0:	81bb      	strh	r3, [r7, #12]
      temp_addr = Length - temp_len;
 800fdb2:	4b1c      	ldr	r3, [pc, #112]	; (800fe24 <WriteStr+0x11c>)
 800fdb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fdb8:	b29a      	uxth	r2, r3
 800fdba:	89bb      	ldrh	r3, [r7, #12]
 800fdbc:	1ad3      	subs	r3, r2, r3
 800fdbe:	b29b      	uxth	r3, r3
 800fdc0:	817b      	strh	r3, [r7, #10]
      Addr = 0;
 800fdc2:	4b19      	ldr	r3, [pc, #100]	; (800fe28 <WriteStr+0x120>)
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	801a      	strh	r2, [r3, #0]
      memset(F_Buff,0,Buf_len);
 800fdc8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fdcc:	461a      	mov	r2, r3
 800fdce:	2100      	movs	r1, #0
 800fdd0:	4816      	ldr	r0, [pc, #88]	; (800fe2c <WriteStr+0x124>)
 800fdd2:	f013 f949 	bl	8023068 <memset>
      memset(Data,0,310);
 800fdd6:	f44f 729b 	mov.w	r2, #310	; 0x136
 800fdda:	2100      	movs	r1, #0
 800fddc:	4816      	ldr	r0, [pc, #88]	; (800fe38 <WriteStr+0x130>)
 800fdde:	f013 f943 	bl	8023068 <memset>
      memcpy(&F_Buff[Addr],Str + temp_addr, temp_len);
 800fde2:	4b11      	ldr	r3, [pc, #68]	; (800fe28 <WriteStr+0x120>)
 800fde4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fde8:	461a      	mov	r2, r3
 800fdea:	4b10      	ldr	r3, [pc, #64]	; (800fe2c <WriteStr+0x124>)
 800fdec:	18d0      	adds	r0, r2, r3
 800fdee:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800fdf2:	687a      	ldr	r2, [r7, #4]
 800fdf4:	4413      	add	r3, r2
 800fdf6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800fdfa:	4619      	mov	r1, r3
 800fdfc:	f013 f926 	bl	802304c <memcpy>
      Addr = Addr + temp_len;
 800fe00:	4b09      	ldr	r3, [pc, #36]	; (800fe28 <WriteStr+0x120>)
 800fe02:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fe06:	b29a      	uxth	r2, r3
 800fe08:	89bb      	ldrh	r3, [r7, #12]
 800fe0a:	4413      	add	r3, r2
 800fe0c:	b29b      	uxth	r3, r3
 800fe0e:	b21a      	sxth	r2, r3
 800fe10:	4b05      	ldr	r3, [pc, #20]	; (800fe28 <WriteStr+0x120>)
 800fe12:	801a      	strh	r2, [r3, #0]
      Length = 0;
 800fe14:	4b03      	ldr	r3, [pc, #12]	; (800fe24 <WriteStr+0x11c>)
 800fe16:	2200      	movs	r2, #0
 800fe18:	801a      	strh	r2, [r3, #0]
    }
  }
 800fe1a:	bf00      	nop
 800fe1c:	3710      	adds	r7, #16
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	bd80      	pop	{r7, pc}
 800fe22:	bf00      	nop
 800fe24:	20000798 	.word	0x20000798
 800fe28:	20000796 	.word	0x20000796
 800fe2c:	200017e0 	.word	0x200017e0
 800fe30:	2000079c 	.word	0x2000079c
 800fe34:	200007a0 	.word	0x200007a0
 800fe38:	20000008 	.word	0x20000008

0800fe3c <Make_Filename>:

/*******************************************************************************

*******************************************************************************/
void Make_Filename(short FileNo, char* FileName)
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b084      	sub	sp, #16
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	4603      	mov	r3, r0
 800fe44:	6039      	str	r1, [r7, #0]
 800fe46:	80fb      	strh	r3, [r7, #6]
  char Num[4];
  u8ToDec3(Num, FileNo);
 800fe48:	88fb      	ldrh	r3, [r7, #6]
 800fe4a:	b2da      	uxtb	r2, r3
 800fe4c:	f107 030c 	add.w	r3, r7, #12
 800fe50:	4611      	mov	r1, r2
 800fe52:	4618      	mov	r0, r3
 800fe54:	f001 ff3c 	bl	8011cd0 <u8ToDec3>
  FileName[4] = Num[0];
 800fe58:	683b      	ldr	r3, [r7, #0]
 800fe5a:	3304      	adds	r3, #4
 800fe5c:	7b3a      	ldrb	r2, [r7, #12]
 800fe5e:	701a      	strb	r2, [r3, #0]
  FileName[5] = Num[1];
 800fe60:	683b      	ldr	r3, [r7, #0]
 800fe62:	3305      	adds	r3, #5
 800fe64:	7b7a      	ldrb	r2, [r7, #13]
 800fe66:	701a      	strb	r2, [r3, #0]
  FileName[6] = Num[2];
 800fe68:	683b      	ldr	r3, [r7, #0]
 800fe6a:	3306      	adds	r3, #6
 800fe6c:	7bba      	ldrb	r2, [r7, #14]
 800fe6e:	701a      	strb	r2, [r3, #0]
}
 800fe70:	bf00      	nop
 800fe72:	3710      	adds	r7, #16
 800fe74:	46bd      	mov	sp, r7
 800fe76:	bd80      	pop	{r7, pc}

0800fe78 <Load_File_Num>:

/*******************************************************************************
Load_File_Num(char Tpye)
*******************************************************************************/
short Load_File_Num(char Type)
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b08a      	sub	sp, #40	; 0x28
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	4603      	mov	r3, r0
 800fe80:	71fb      	strb	r3, [r7, #7]
  short FileNo=0;
 800fe82:	2300      	movs	r3, #0
 800fe84:	84fb      	strh	r3, [r7, #38]	; 0x26
  char  pFileName[12]="FILE       ";
 800fe86:	4a87      	ldr	r2, [pc, #540]	; (80100a4 <Load_File_Num+0x22c>)
 800fe88:	f107 0318 	add.w	r3, r7, #24
 800fe8c:	ca07      	ldmia	r2, {r0, r1, r2}
 800fe8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  short pCluster[3];
  unsigned pDirAddr;

  switch(Type)
 800fe92:	79fb      	ldrb	r3, [r7, #7]
 800fe94:	3b1d      	subs	r3, #29
 800fe96:	2b04      	cmp	r3, #4
 800fe98:	f200 80fe 	bhi.w	8010098 <Load_File_Num+0x220>
 800fe9c:	a201      	add	r2, pc, #4	; (adr r2, 800fea4 <Load_File_Num+0x2c>)
 800fe9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fea2:	bf00      	nop
 800fea4:	0800feb9 	.word	0x0800feb9
 800fea8:	0800ff19 	.word	0x0800ff19
 800feac:	0800ff79 	.word	0x0800ff79
 800feb0:	0800ffd9 	.word	0x0800ffd9
 800feb4:	08010039 	.word	0x08010039
  {
  case SAVE_BMP:
    memset(F_Buff,0,4096);
 800feb8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800febc:	2100      	movs	r1, #0
 800febe:	487a      	ldr	r0, [pc, #488]	; (80100a8 <Load_File_Num+0x230>)
 800fec0:	f013 f8d2 	bl	8023068 <memset>
    memcpy(pFileName,"IMG_    BMP",12);
 800fec4:	4a79      	ldr	r2, [pc, #484]	; (80100ac <Load_File_Num+0x234>)
 800fec6:	f107 0318 	add.w	r3, r7, #24
 800feca:	ca07      	ldmia	r2, {r0, r1, r2}
 800fecc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Make_Filename(FileNo, pFileName);
 800fed0:	f107 0218 	add.w	r2, r7, #24
 800fed4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fed8:	4611      	mov	r1, r2
 800feda:	4618      	mov	r0, r3
 800fedc:	f7ff ffae 	bl	800fe3c <Make_Filename>
    while(OpenFileRd(F_Buff, pFileName, pCluster, &pDirAddr)==OK)
 800fee0:	e00d      	b.n	800fefe <Load_File_Num+0x86>
    {
      FileNo++;
 800fee2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fee6:	b29b      	uxth	r3, r3
 800fee8:	3301      	adds	r3, #1
 800feea:	b29b      	uxth	r3, r3
 800feec:	84fb      	strh	r3, [r7, #38]	; 0x26
      Make_Filename(FileNo, pFileName);
 800feee:	f107 0218 	add.w	r2, r7, #24
 800fef2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fef6:	4611      	mov	r1, r2
 800fef8:	4618      	mov	r0, r3
 800fefa:	f7ff ff9f 	bl	800fe3c <Make_Filename>
    while(OpenFileRd(F_Buff, pFileName, pCluster, &pDirAddr)==OK)
 800fefe:	f107 030c 	add.w	r3, r7, #12
 800ff02:	f107 0210 	add.w	r2, r7, #16
 800ff06:	f107 0118 	add.w	r1, r7, #24
 800ff0a:	4867      	ldr	r0, [pc, #412]	; (80100a8 <Load_File_Num+0x230>)
 800ff0c:	f7ff fa32 	bl	800f374 <OpenFileRd>
 800ff10:	4603      	mov	r3, r0
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d0e5      	beq.n	800fee2 <Load_File_Num+0x6a>
    }
    break;
 800ff16:	e0bf      	b.n	8010098 <Load_File_Num+0x220>
  case SAVE_DAT:
    memset(F_Buff,0,4096);
 800ff18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ff1c:	2100      	movs	r1, #0
 800ff1e:	4862      	ldr	r0, [pc, #392]	; (80100a8 <Load_File_Num+0x230>)
 800ff20:	f013 f8a2 	bl	8023068 <memset>
    memcpy(pFileName,"FILE    DAT",12);
 800ff24:	4a62      	ldr	r2, [pc, #392]	; (80100b0 <Load_File_Num+0x238>)
 800ff26:	f107 0318 	add.w	r3, r7, #24
 800ff2a:	ca07      	ldmia	r2, {r0, r1, r2}
 800ff2c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Make_Filename(FileNo, pFileName);
 800ff30:	f107 0218 	add.w	r2, r7, #24
 800ff34:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ff38:	4611      	mov	r1, r2
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	f7ff ff7e 	bl	800fe3c <Make_Filename>
    while(OpenFileRd(F_Buff, pFileName, pCluster, &pDirAddr)==OK)
 800ff40:	e00d      	b.n	800ff5e <Load_File_Num+0xe6>
    {
      FileNo++;
 800ff42:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ff46:	b29b      	uxth	r3, r3
 800ff48:	3301      	adds	r3, #1
 800ff4a:	b29b      	uxth	r3, r3
 800ff4c:	84fb      	strh	r3, [r7, #38]	; 0x26
      Make_Filename(FileNo, pFileName);
 800ff4e:	f107 0218 	add.w	r2, r7, #24
 800ff52:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ff56:	4611      	mov	r1, r2
 800ff58:	4618      	mov	r0, r3
 800ff5a:	f7ff ff6f 	bl	800fe3c <Make_Filename>
    while(OpenFileRd(F_Buff, pFileName, pCluster, &pDirAddr)==OK)
 800ff5e:	f107 030c 	add.w	r3, r7, #12
 800ff62:	f107 0210 	add.w	r2, r7, #16
 800ff66:	f107 0118 	add.w	r1, r7, #24
 800ff6a:	484f      	ldr	r0, [pc, #316]	; (80100a8 <Load_File_Num+0x230>)
 800ff6c:	f7ff fa02 	bl	800f374 <OpenFileRd>
 800ff70:	4603      	mov	r3, r0
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d0e5      	beq.n	800ff42 <Load_File_Num+0xca>
    }
    break;
 800ff76:	e08f      	b.n	8010098 <Load_File_Num+0x220>
  case SAVE_BUF:
    memset(F_Buff,0,4096);
 800ff78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ff7c:	2100      	movs	r1, #0
 800ff7e:	484a      	ldr	r0, [pc, #296]	; (80100a8 <Load_File_Num+0x230>)
 800ff80:	f013 f872 	bl	8023068 <memset>
    memcpy(pFileName,"DATA    BUF",12);
 800ff84:	4a4b      	ldr	r2, [pc, #300]	; (80100b4 <Load_File_Num+0x23c>)
 800ff86:	f107 0318 	add.w	r3, r7, #24
 800ff8a:	ca07      	ldmia	r2, {r0, r1, r2}
 800ff8c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Make_Filename(FileNo, pFileName);
 800ff90:	f107 0218 	add.w	r2, r7, #24
 800ff94:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ff98:	4611      	mov	r1, r2
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	f7ff ff4e 	bl	800fe3c <Make_Filename>
    while(OpenFileRd(F_Buff, pFileName, pCluster, &pDirAddr)==OK)
 800ffa0:	e00d      	b.n	800ffbe <Load_File_Num+0x146>
    {
      FileNo++;
 800ffa2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ffa6:	b29b      	uxth	r3, r3
 800ffa8:	3301      	adds	r3, #1
 800ffaa:	b29b      	uxth	r3, r3
 800ffac:	84fb      	strh	r3, [r7, #38]	; 0x26
      Make_Filename(FileNo, pFileName);
 800ffae:	f107 0218 	add.w	r2, r7, #24
 800ffb2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ffb6:	4611      	mov	r1, r2
 800ffb8:	4618      	mov	r0, r3
 800ffba:	f7ff ff3f 	bl	800fe3c <Make_Filename>
    while(OpenFileRd(F_Buff, pFileName, pCluster, &pDirAddr)==OK)
 800ffbe:	f107 030c 	add.w	r3, r7, #12
 800ffc2:	f107 0210 	add.w	r2, r7, #16
 800ffc6:	f107 0118 	add.w	r1, r7, #24
 800ffca:	4837      	ldr	r0, [pc, #220]	; (80100a8 <Load_File_Num+0x230>)
 800ffcc:	f7ff f9d2 	bl	800f374 <OpenFileRd>
 800ffd0:	4603      	mov	r3, r0
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d0e5      	beq.n	800ffa2 <Load_File_Num+0x12a>
    }
    break;
 800ffd6:	e05f      	b.n	8010098 <Load_File_Num+0x220>
  case SAVE_CSV:
    memset(F_Buff,0,4096);
 800ffd8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ffdc:	2100      	movs	r1, #0
 800ffde:	4832      	ldr	r0, [pc, #200]	; (80100a8 <Load_File_Num+0x230>)
 800ffe0:	f013 f842 	bl	8023068 <memset>
    memcpy(pFileName,"DATA    CSV",12);
 800ffe4:	4a34      	ldr	r2, [pc, #208]	; (80100b8 <Load_File_Num+0x240>)
 800ffe6:	f107 0318 	add.w	r3, r7, #24
 800ffea:	ca07      	ldmia	r2, {r0, r1, r2}
 800ffec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Make_Filename(FileNo, pFileName);
 800fff0:	f107 0218 	add.w	r2, r7, #24
 800fff4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fff8:	4611      	mov	r1, r2
 800fffa:	4618      	mov	r0, r3
 800fffc:	f7ff ff1e 	bl	800fe3c <Make_Filename>
    while(OpenFileRd(F_Buff, pFileName, pCluster, &pDirAddr)==OK)
 8010000:	e00d      	b.n	801001e <Load_File_Num+0x1a6>
    {
      FileNo++;
 8010002:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010006:	b29b      	uxth	r3, r3
 8010008:	3301      	adds	r3, #1
 801000a:	b29b      	uxth	r3, r3
 801000c:	84fb      	strh	r3, [r7, #38]	; 0x26
      Make_Filename(FileNo, pFileName);
 801000e:	f107 0218 	add.w	r2, r7, #24
 8010012:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010016:	4611      	mov	r1, r2
 8010018:	4618      	mov	r0, r3
 801001a:	f7ff ff0f 	bl	800fe3c <Make_Filename>
    while(OpenFileRd(F_Buff, pFileName, pCluster, &pDirAddr)==OK)
 801001e:	f107 030c 	add.w	r3, r7, #12
 8010022:	f107 0210 	add.w	r2, r7, #16
 8010026:	f107 0118 	add.w	r1, r7, #24
 801002a:	481f      	ldr	r0, [pc, #124]	; (80100a8 <Load_File_Num+0x230>)
 801002c:	f7ff f9a2 	bl	800f374 <OpenFileRd>
 8010030:	4603      	mov	r3, r0
 8010032:	2b00      	cmp	r3, #0
 8010034:	d0e5      	beq.n	8010002 <Load_File_Num+0x18a>
    }
    break;
 8010036:	e02f      	b.n	8010098 <Load_File_Num+0x220>
  case SAVE_SVG:
    memset(F_Buff,0,4096);
 8010038:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801003c:	2100      	movs	r1, #0
 801003e:	481a      	ldr	r0, [pc, #104]	; (80100a8 <Load_File_Num+0x230>)
 8010040:	f013 f812 	bl	8023068 <memset>
    memcpy(pFileName,"DATA    SVG",12);
 8010044:	4a1d      	ldr	r2, [pc, #116]	; (80100bc <Load_File_Num+0x244>)
 8010046:	f107 0318 	add.w	r3, r7, #24
 801004a:	ca07      	ldmia	r2, {r0, r1, r2}
 801004c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Make_Filename(FileNo, pFileName);
 8010050:	f107 0218 	add.w	r2, r7, #24
 8010054:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010058:	4611      	mov	r1, r2
 801005a:	4618      	mov	r0, r3
 801005c:	f7ff feee 	bl	800fe3c <Make_Filename>
    while(OpenFileRd(F_Buff, pFileName, pCluster, &pDirAddr)==OK)
 8010060:	e00d      	b.n	801007e <Load_File_Num+0x206>
    {
      FileNo++;
 8010062:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010066:	b29b      	uxth	r3, r3
 8010068:	3301      	adds	r3, #1
 801006a:	b29b      	uxth	r3, r3
 801006c:	84fb      	strh	r3, [r7, #38]	; 0x26
      Make_Filename(FileNo, pFileName);
 801006e:	f107 0218 	add.w	r2, r7, #24
 8010072:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010076:	4611      	mov	r1, r2
 8010078:	4618      	mov	r0, r3
 801007a:	f7ff fedf 	bl	800fe3c <Make_Filename>
    while(OpenFileRd(F_Buff, pFileName, pCluster, &pDirAddr)==OK)
 801007e:	f107 030c 	add.w	r3, r7, #12
 8010082:	f107 0210 	add.w	r2, r7, #16
 8010086:	f107 0118 	add.w	r1, r7, #24
 801008a:	4807      	ldr	r0, [pc, #28]	; (80100a8 <Load_File_Num+0x230>)
 801008c:	f7ff f972 	bl	800f374 <OpenFileRd>
 8010090:	4603      	mov	r3, r0
 8010092:	2b00      	cmp	r3, #0
 8010094:	d0e5      	beq.n	8010062 <Load_File_Num+0x1ea>
    }
    break;
 8010096:	bf00      	nop
  }
  return FileNo;
 8010098:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 801009c:	4618      	mov	r0, r3
 801009e:	3728      	adds	r7, #40	; 0x28
 80100a0:	46bd      	mov	sp, r7
 80100a2:	bd80      	pop	{r7, pc}
 80100a4:	08000238 	.word	0x08000238
 80100a8:	200017e0 	.word	0x200017e0
 80100ac:	080001fc 	.word	0x080001fc
 80100b0:	08000208 	.word	0x08000208
 80100b4:	08000214 	.word	0x08000214
 80100b8:	08000220 	.word	0x08000220
 80100bc:	0800022c 	.word	0x0800022c

080100c0 <File_Num>:

/*******************************************************************************
void File_Num(void)
*******************************************************************************/
void File_Num(void)
{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	af00      	add	r7, sp, #0
  List[SAVE_BMP].Val =  Load_File_Num(SAVE_BMP);
 80100c4:	201d      	movs	r0, #29
 80100c6:	f7ff fed7 	bl	800fe78 <Load_File_Num>
 80100ca:	4603      	mov	r3, r0
 80100cc:	461a      	mov	r2, r3
 80100ce:	4b12      	ldr	r3, [pc, #72]	; (8010118 <File_Num+0x58>)
 80100d0:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
  List[SAVE_DAT].Val =  Load_File_Num(SAVE_DAT);
 80100d4:	201e      	movs	r0, #30
 80100d6:	f7ff fecf 	bl	800fe78 <Load_File_Num>
 80100da:	4603      	mov	r3, r0
 80100dc:	461a      	mov	r2, r3
 80100de:	4b0e      	ldr	r3, [pc, #56]	; (8010118 <File_Num+0x58>)
 80100e0:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
  List[SAVE_BUF].Val =  Load_File_Num(SAVE_BUF);
 80100e4:	201f      	movs	r0, #31
 80100e6:	f7ff fec7 	bl	800fe78 <Load_File_Num>
 80100ea:	4603      	mov	r3, r0
 80100ec:	461a      	mov	r2, r3
 80100ee:	4b0a      	ldr	r3, [pc, #40]	; (8010118 <File_Num+0x58>)
 80100f0:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
  List[SAVE_CSV].Val =  Load_File_Num(SAVE_CSV);
 80100f4:	2020      	movs	r0, #32
 80100f6:	f7ff febf 	bl	800fe78 <Load_File_Num>
 80100fa:	4603      	mov	r3, r0
 80100fc:	461a      	mov	r2, r3
 80100fe:	4b06      	ldr	r3, [pc, #24]	; (8010118 <File_Num+0x58>)
 8010100:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
  List[SAVE_SVG].Val =  Load_File_Num(SAVE_SVG);
 8010104:	2021      	movs	r0, #33	; 0x21
 8010106:	f7ff feb7 	bl	800fe78 <Load_File_Num>
 801010a:	4603      	mov	r3, r0
 801010c:	461a      	mov	r2, r3
 801010e:	4b02      	ldr	r3, [pc, #8]	; (8010118 <File_Num+0x58>)
 8010110:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
}
 8010114:	bf00      	nop
 8010116:	bd80      	pop	{r7, pc}
 8010118:	20000298 	.word	0x20000298

0801011c <Load_Buf>:

/*******************************************************************************
Load_Buf: ���ر�����Ĳɼ����ݻ�����    ���룺�ļ����     ����ֵ��0x00=�ɹ�
*******************************************************************************/
char Load_Buf(short FileNo)
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b08e      	sub	sp, #56	; 0x38
 8010120:	af00      	add	r7, sp, #0
 8010122:	4603      	mov	r3, r0
 8010124:	80fb      	strh	r3, [r7, #6]
  char pFileName[12]="DATA    BUF";
 8010126:	4a66      	ldr	r2, [pc, #408]	; (80102c0 <Load_Buf+0x1a4>)
 8010128:	f107 0318 	add.w	r3, r7, #24
 801012c:	ca07      	ldmia	r2, {r0, r1, r2}
 801012e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  short pCluster[3];
  unsigned pDirAddr[1];
  short *ptr;
  int i,Rvalue=1;
 8010132:	2301      	movs	r3, #1
 8010134:	62fb      	str	r3, [r7, #44]	; 0x2c
  int n,k;

  Make_Filename(FileNo, pFileName);
 8010136:	f107 0218 	add.w	r2, r7, #24
 801013a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801013e:	4611      	mov	r1, r2
 8010140:	4618      	mov	r0, r3
 8010142:	f7ff fe7b 	bl	800fe3c <Make_Filename>
  if( (Rvalue=OpenFileRd(F_Buff, pFileName, pCluster, pDirAddr))!= OK) return Rvalue;
 8010146:	f107 030c 	add.w	r3, r7, #12
 801014a:	f107 0210 	add.w	r2, r7, #16
 801014e:	f107 0118 	add.w	r1, r7, #24
 8010152:	485c      	ldr	r0, [pc, #368]	; (80102c4 <Load_Buf+0x1a8>)
 8010154:	f7ff f90e 	bl	800f374 <OpenFileRd>
 8010158:	4603      	mov	r3, r0
 801015a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801015c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801015e:	2b00      	cmp	r3, #0
 8010160:	d002      	beq.n	8010168 <Load_Buf+0x4c>
 8010162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010164:	b2db      	uxtb	r3, r3
 8010166:	e0a6      	b.n	80102b6 <Load_Buf+0x19a>
    n=2;k=4096;
 8010168:	2302      	movs	r3, #2
 801016a:	633b      	str	r3, [r7, #48]	; 0x30
 801016c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010170:	62bb      	str	r3, [r7, #40]	; 0x28
  if(List[SMPL_DPTH].Val==3) n =4 ;//8K
 8010172:	4b55      	ldr	r3, [pc, #340]	; (80102c8 <Load_Buf+0x1ac>)
 8010174:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010178:	2b03      	cmp	r3, #3
 801017a:	d101      	bne.n	8010180 <Load_Buf+0x64>
 801017c:	2304      	movs	r3, #4
 801017e:	633b      	str	r3, [r7, #48]	; 0x30
  for(i=0;i<n;i++){
 8010180:	2300      	movs	r3, #0
 8010182:	637b      	str	r3, [r7, #52]	; 0x34
 8010184:	e01d      	b.n	80101c2 <Load_Buf+0xa6>
    if(ReadFileSec(F_Buff, pCluster)!= OK) return FILE_RW_ERR;
 8010186:	f107 0310 	add.w	r3, r7, #16
 801018a:	4619      	mov	r1, r3
 801018c:	484d      	ldr	r0, [pc, #308]	; (80102c4 <Load_Buf+0x1a8>)
 801018e:	f7ff fb29 	bl	800f7e4 <ReadFileSec>
 8010192:	4603      	mov	r3, r0
 8010194:	2b00      	cmp	r3, #0
 8010196:	d001      	beq.n	801019c <Load_Buf+0x80>
 8010198:	2303      	movs	r3, #3
 801019a:	e08c      	b.n	80102b6 <Load_Buf+0x19a>
    memcpy(&(Sampl[i*k/2+2]),F_Buff,k);
 801019c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801019e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80101a0:	fb02 f303 	mul.w	r3, r2, r3
 80101a4:	0fda      	lsrs	r2, r3, #31
 80101a6:	4413      	add	r3, r2
 80101a8:	105b      	asrs	r3, r3, #1
 80101aa:	3302      	adds	r3, #2
 80101ac:	005b      	lsls	r3, r3, #1
 80101ae:	4a47      	ldr	r2, [pc, #284]	; (80102cc <Load_Buf+0x1b0>)
 80101b0:	4413      	add	r3, r2
 80101b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80101b4:	4943      	ldr	r1, [pc, #268]	; (80102c4 <Load_Buf+0x1a8>)
 80101b6:	4618      	mov	r0, r3
 80101b8:	f012 ff48 	bl	802304c <memcpy>
  for(i=0;i<n;i++){
 80101bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101be:	3301      	adds	r3, #1
 80101c0:	637b      	str	r3, [r7, #52]	; 0x34
 80101c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80101c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101c6:	429a      	cmp	r2, r3
 80101c8:	dbdd      	blt.n	8010186 <Load_Buf+0x6a>
	}
  if(ReadFileSec(F_Buff, pCluster)!= OK) return FILE_RW_ERR;
 80101ca:	f107 0310 	add.w	r3, r7, #16
 80101ce:	4619      	mov	r1, r3
 80101d0:	483c      	ldr	r0, [pc, #240]	; (80102c4 <Load_Buf+0x1a8>)
 80101d2:	f7ff fb07 	bl	800f7e4 <ReadFileSec>
 80101d6:	4603      	mov	r3, r0
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d001      	beq.n	80101e0 <Load_Buf+0xc4>
 80101dc:	2303      	movs	r3, #3
 80101de:	e06a      	b.n	80102b6 <Load_Buf+0x19a>
  ptr=(short*)F_Sector;                               //�����ֳ�
 80101e0:	4b3b      	ldr	r3, [pc, #236]	; (80102d0 <Load_Buf+0x1b4>)
 80101e2:	627b      	str	r3, [r7, #36]	; 0x24
  *ptr++=0xaa55;
 80101e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101e6:	1c9a      	adds	r2, r3, #2
 80101e8:	627a      	str	r2, [r7, #36]	; 0x24
 80101ea:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80101ee:	801a      	strh	r2, [r3, #0]
  *ptr++=Sampl[0];
 80101f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101f2:	1c9a      	adds	r2, r3, #2
 80101f4:	627a      	str	r2, [r7, #36]	; 0x24
 80101f6:	4a35      	ldr	r2, [pc, #212]	; (80102cc <Load_Buf+0x1b0>)
 80101f8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80101fc:	801a      	strh	r2, [r3, #0]
  *ptr++=Sampl[1];
 80101fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010200:	1c9a      	adds	r2, r3, #2
 8010202:	627a      	str	r2, [r7, #36]	; 0x24
 8010204:	4a31      	ldr	r2, [pc, #196]	; (80102cc <Load_Buf+0x1b0>)
 8010206:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801020a:	801a      	strh	r2, [r3, #0]
  *ptr++=List[Y_RANGES].Val;
 801020c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801020e:	1c9a      	adds	r2, r3, #2
 8010210:	627a      	str	r2, [r7, #36]	; 0x24
 8010212:	4a2d      	ldr	r2, [pc, #180]	; (80102c8 <Load_Buf+0x1ac>)
 8010214:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8010218:	801a      	strh	r2, [r3, #0]
  *ptr++=List[PROBEATT].Val;
 801021a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801021c:	1c9a      	adds	r2, r3, #2
 801021e:	627a      	str	r2, [r7, #36]	; 0x24
 8010220:	4a29      	ldr	r2, [pc, #164]	; (80102c8 <Load_Buf+0x1ac>)
 8010222:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 8010226:	801a      	strh	r2, [r3, #0]
  *ptr++=List[SMPL_DPTH].Val;
 8010228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801022a:	1c9a      	adds	r2, r3, #2
 801022c:	627a      	str	r2, [r7, #36]	; 0x24
 801022e:	4a26      	ldr	r2, [pc, #152]	; (80102c8 <Load_Buf+0x1ac>)
 8010230:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 8010234:	801a      	strh	r2, [r3, #0]
  ptr =(short*)F_Buff;                            //��ԭ���Ĳ���
 8010236:	4b23      	ldr	r3, [pc, #140]	; (80102c4 <Load_Buf+0x1a8>)
 8010238:	627b      	str	r3, [r7, #36]	; 0x24
  Sampl[0]=*ptr++;
 801023a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801023c:	1c9a      	adds	r2, r3, #2
 801023e:	627a      	str	r2, [r7, #36]	; 0x24
 8010240:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010244:	4b21      	ldr	r3, [pc, #132]	; (80102cc <Load_Buf+0x1b0>)
 8010246:	801a      	strh	r2, [r3, #0]
  Sampl[1]=*ptr++;
 8010248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801024a:	1c9a      	adds	r2, r3, #2
 801024c:	627a      	str	r2, [r7, #36]	; 0x24
 801024e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010252:	4b1e      	ldr	r3, [pc, #120]	; (80102cc <Load_Buf+0x1b0>)
 8010254:	805a      	strh	r2, [r3, #2]
  List[Y_RANGES].Val=*ptr++;
 8010256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010258:	1c9a      	adds	r2, r3, #2
 801025a:	627a      	str	r2, [r7, #36]	; 0x24
 801025c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010260:	4b19      	ldr	r3, [pc, #100]	; (80102c8 <Load_Buf+0x1ac>)
 8010262:	809a      	strh	r2, [r3, #4]
  List[PROBEATT].Val=*ptr++;
 8010264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010266:	1c9a      	adds	r2, r3, #2
 8010268:	627a      	str	r2, [r7, #36]	; 0x24
 801026a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801026e:	4b16      	ldr	r3, [pc, #88]	; (80102c8 <Load_Buf+0x1ac>)
 8010270:	829a      	strh	r2, [r3, #20]
  List[SMPL_DPTH].Val=*ptr++;
 8010272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010274:	1c9a      	adds	r2, r3, #2
 8010276:	627a      	str	r2, [r7, #36]	; 0x24
 8010278:	f9b3 2000 	ldrsh.w	r2, [r3]
 801027c:	4b12      	ldr	r3, [pc, #72]	; (80102c8 <Load_Buf+0x1ac>)
 801027e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  Status |=  STOP;
 8010282:	4b14      	ldr	r3, [pc, #80]	; (80102d4 <Load_Buf+0x1b8>)
 8010284:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010288:	f043 0301 	orr.w	r3, r3, #1
 801028c:	b21a      	sxth	r2, r3
 801028e:	4b11      	ldr	r3, [pc, #68]	; (80102d4 <Load_Buf+0x1b8>)
 8010290:	801a      	strh	r2, [r3, #0]
  DispStatus();
 8010292:	f004 fa51 	bl	8014738 <DispStatus>
  if(List[LOAD_BUF].Val<99)List[LOAD_BUF].Val++;
 8010296:	4b0c      	ldr	r3, [pc, #48]	; (80102c8 <Load_Buf+0x1ac>)
 8010298:	f9b3 311c 	ldrsh.w	r3, [r3, #284]	; 0x11c
 801029c:	2b62      	cmp	r3, #98	; 0x62
 801029e:	dc09      	bgt.n	80102b4 <Load_Buf+0x198>
 80102a0:	4b09      	ldr	r3, [pc, #36]	; (80102c8 <Load_Buf+0x1ac>)
 80102a2:	f9b3 311c 	ldrsh.w	r3, [r3, #284]	; 0x11c
 80102a6:	b29b      	uxth	r3, r3
 80102a8:	3301      	adds	r3, #1
 80102aa:	b29b      	uxth	r3, r3
 80102ac:	b21a      	sxth	r2, r3
 80102ae:	4b06      	ldr	r3, [pc, #24]	; (80102c8 <Load_Buf+0x1ac>)
 80102b0:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
  return 0;
 80102b4:	2300      	movs	r3, #0
}
 80102b6:	4618      	mov	r0, r3
 80102b8:	3738      	adds	r7, #56	; 0x38
 80102ba:	46bd      	mov	sp, r7
 80102bc:	bd80      	pop	{r7, pc}
 80102be:	bf00      	nop
 80102c0:	08000214 	.word	0x08000214
 80102c4:	200017e0 	.word	0x200017e0
 80102c8:	20000298 	.word	0x20000298
 80102cc:	20002878 	.word	0x20002878
 80102d0:	200015e0 	.word	0x200015e0
 80102d4:	200007a8 	.word	0x200007a8

080102d8 <Save_Buf>:

/*******************************************************************************
Save_Buf: ����ɼ����ݻ�����ΪBUF��ʽ    ���룺�ļ����     ����ֵ��0x00=�ɹ�
*******************************************************************************/
char Save_Buf(short FileNo)
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b08e      	sub	sp, #56	; 0x38
 80102dc:	af00      	add	r7, sp, #0
 80102de:	4603      	mov	r3, r0
 80102e0:	80fb      	strh	r3, [r7, #6]
  char pFileName[12]="DATA    BUF";
 80102e2:	4a64      	ldr	r2, [pc, #400]	; (8010474 <Save_Buf+0x19c>)
 80102e4:	f107 0318 	add.w	r3, r7, #24
 80102e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80102ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  short pCluster[3];
  int pDirAddr[1];
  int i=0, Rvalue=DISK_RW_ERR;
 80102ee:	2300      	movs	r3, #0
 80102f0:	637b      	str	r3, [r7, #52]	; 0x34
 80102f2:	2304      	movs	r3, #4
 80102f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  short *p;
  char  l=0;
 80102f6:	2300      	movs	r3, #0
 80102f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  short n,k;

   n=2; k=4096;
 80102fc:	2302      	movs	r3, #2
 80102fe:	863b      	strh	r3, [r7, #48]	; 0x30
 8010300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010304:	857b      	strh	r3, [r7, #42]	; 0x2a

  if(List[SMPL_DPTH].Val==3) n =4 ;//8K
 8010306:	4b5c      	ldr	r3, [pc, #368]	; (8010478 <Save_Buf+0x1a0>)
 8010308:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 801030c:	2b03      	cmp	r3, #3
 801030e:	d101      	bne.n	8010314 <Save_Buf+0x3c>
 8010310:	2304      	movs	r3, #4
 8010312:	863b      	strh	r3, [r7, #48]	; 0x30

  Make_Filename(FileNo, pFileName);
 8010314:	f107 0218 	add.w	r2, r7, #24
 8010318:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801031c:	4611      	mov	r1, r2
 801031e:	4618      	mov	r0, r3
 8010320:	f7ff fd8c 	bl	800fe3c <Make_Filename>
  memset(F_Buff,0,4096);
 8010324:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010328:	2100      	movs	r1, #0
 801032a:	4854      	ldr	r0, [pc, #336]	; (801047c <Save_Buf+0x1a4>)
 801032c:	f012 fe9c 	bl	8023068 <memset>
  if(OpenFileWr(F_Buff, pFileName, pCluster, pDirAddr)!=OK) return Rvalue;
 8010330:	f107 030c 	add.w	r3, r7, #12
 8010334:	f107 0210 	add.w	r2, r7, #16
 8010338:	f107 0118 	add.w	r1, r7, #24
 801033c:	484f      	ldr	r0, [pc, #316]	; (801047c <Save_Buf+0x1a4>)
 801033e:	f7ff fae3 	bl	800f908 <OpenFileWr>
 8010342:	4603      	mov	r3, r0
 8010344:	2b00      	cmp	r3, #0
 8010346:	d002      	beq.n	801034e <Save_Buf+0x76>
 8010348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801034a:	b2db      	uxtb	r3, r3
 801034c:	e08e      	b.n	801046c <Save_Buf+0x194>

  for(i=0; i<n; i++){
 801034e:	2300      	movs	r3, #0
 8010350:	637b      	str	r3, [r7, #52]	; 0x34
 8010352:	e02f      	b.n	80103b4 <Save_Buf+0xdc>
    memcpy(F_Buff,&(Sampl[i*k/2+2]),k);
 8010354:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010358:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801035a:	fb02 f303 	mul.w	r3, r2, r3
 801035e:	0fda      	lsrs	r2, r3, #31
 8010360:	4413      	add	r3, r2
 8010362:	105b      	asrs	r3, r3, #1
 8010364:	3302      	adds	r3, #2
 8010366:	005b      	lsls	r3, r3, #1
 8010368:	4a45      	ldr	r2, [pc, #276]	; (8010480 <Save_Buf+0x1a8>)
 801036a:	4413      	add	r3, r2
 801036c:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8010370:	4619      	mov	r1, r3
 8010372:	4842      	ldr	r0, [pc, #264]	; (801047c <Save_Buf+0x1a4>)
 8010374:	f012 fe6a 	bl	802304c <memcpy>
    if(ProgFileSec(F_Buff, pCluster)!= OK) return FILE_RW_ERR; // д������
 8010378:	f107 0310 	add.w	r3, r7, #16
 801037c:	4619      	mov	r1, r3
 801037e:	483f      	ldr	r0, [pc, #252]	; (801047c <Save_Buf+0x1a4>)
 8010380:	f7ff f9ea 	bl	800f758 <ProgFileSec>
 8010384:	4603      	mov	r3, r0
 8010386:	2b00      	cmp	r3, #0
 8010388:	d001      	beq.n	801038e <Save_Buf+0xb6>
 801038a:	2303      	movs	r3, #3
 801038c:	e06e      	b.n	801046c <Save_Buf+0x194>
    PrintClk(264,2,(l++ >>1) & 3);                    // ����ָʾ
 801038e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010392:	1c5a      	adds	r2, r3, #1
 8010394:	f887 2033 	strb.w	r2, [r7, #51]	; 0x33
 8010398:	085b      	lsrs	r3, r3, #1
 801039a:	b2db      	uxtb	r3, r3
 801039c:	f003 0303 	and.w	r3, r3, #3
 80103a0:	b2db      	uxtb	r3, r3
 80103a2:	461a      	mov	r2, r3
 80103a4:	2102      	movs	r1, #2
 80103a6:	f44f 7084 	mov.w	r0, #264	; 0x108
 80103aa:	f7ff fb8f 	bl	800facc <PrintClk>
  for(i=0; i<n; i++){
 80103ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103b0:	3301      	adds	r3, #1
 80103b2:	637b      	str	r3, [r7, #52]	; 0x34
 80103b4:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80103b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103ba:	429a      	cmp	r2, r3
 80103bc:	dbca      	blt.n	8010354 <Save_Buf+0x7c>
  }
  memset(F_Buff,0,k);
 80103be:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80103c2:	461a      	mov	r2, r3
 80103c4:	2100      	movs	r1, #0
 80103c6:	482d      	ldr	r0, [pc, #180]	; (801047c <Save_Buf+0x1a4>)
 80103c8:	f012 fe4e 	bl	8023068 <memset>
  p =(short*)&F_Buff;
 80103cc:	4b2b      	ldr	r3, [pc, #172]	; (801047c <Save_Buf+0x1a4>)
 80103ce:	627b      	str	r3, [r7, #36]	; 0x24
  *p++=Sampl[0];
 80103d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103d2:	1c9a      	adds	r2, r3, #2
 80103d4:	627a      	str	r2, [r7, #36]	; 0x24
 80103d6:	4a2a      	ldr	r2, [pc, #168]	; (8010480 <Save_Buf+0x1a8>)
 80103d8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80103dc:	801a      	strh	r2, [r3, #0]
  *p++=Sampl[1];
 80103de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103e0:	1c9a      	adds	r2, r3, #2
 80103e2:	627a      	str	r2, [r7, #36]	; 0x24
 80103e4:	4a26      	ldr	r2, [pc, #152]	; (8010480 <Save_Buf+0x1a8>)
 80103e6:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80103ea:	801a      	strh	r2, [r3, #0]
  *p++=List[Y_RANGES].Val;
 80103ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ee:	1c9a      	adds	r2, r3, #2
 80103f0:	627a      	str	r2, [r7, #36]	; 0x24
 80103f2:	4a21      	ldr	r2, [pc, #132]	; (8010478 <Save_Buf+0x1a0>)
 80103f4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80103f8:	801a      	strh	r2, [r3, #0]
  *p++=List[PROBEATT].Val;
 80103fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103fc:	1c9a      	adds	r2, r3, #2
 80103fe:	627a      	str	r2, [r7, #36]	; 0x24
 8010400:	4a1d      	ldr	r2, [pc, #116]	; (8010478 <Save_Buf+0x1a0>)
 8010402:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 8010406:	801a      	strh	r2, [r3, #0]
  *p++=List[SMPL_DPTH].Val;
 8010408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801040a:	1c9a      	adds	r2, r3, #2
 801040c:	627a      	str	r2, [r7, #36]	; 0x24
 801040e:	4a1a      	ldr	r2, [pc, #104]	; (8010478 <Save_Buf+0x1a0>)
 8010410:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 8010414:	801a      	strh	r2, [r3, #0]
  if(ProgFileSec(F_Buff, pCluster)!= OK) return FILE_RW_ERR; // д������
 8010416:	f107 0310 	add.w	r3, r7, #16
 801041a:	4619      	mov	r1, r3
 801041c:	4817      	ldr	r0, [pc, #92]	; (801047c <Save_Buf+0x1a4>)
 801041e:	f7ff f99b 	bl	800f758 <ProgFileSec>
 8010422:	4603      	mov	r3, r0
 8010424:	2b00      	cmp	r3, #0
 8010426:	d001      	beq.n	801042c <Save_Buf+0x154>
 8010428:	2303      	movs	r3, #3
 801042a:	e01f      	b.n	801046c <Save_Buf+0x194>
  if(CloseFile(F_Buff, 16*512+k, pCluster, pDirAddr)!= OK) return FILE_RW_ERR;
 801042c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010430:	f503 5100 	add.w	r1, r3, #8192	; 0x2000
 8010434:	f107 030c 	add.w	r3, r7, #12
 8010438:	f107 0210 	add.w	r2, r7, #16
 801043c:	480f      	ldr	r0, [pc, #60]	; (801047c <Save_Buf+0x1a4>)
 801043e:	f7ff f9ff 	bl	800f840 <CloseFile>
 8010442:	4603      	mov	r3, r0
 8010444:	2b00      	cmp	r3, #0
 8010446:	d001      	beq.n	801044c <Save_Buf+0x174>
 8010448:	2303      	movs	r3, #3
 801044a:	e00f      	b.n	801046c <Save_Buf+0x194>
  if(List[SAVE_BUF].Val<99)List[SAVE_BUF].Val++;
 801044c:	4b0a      	ldr	r3, [pc, #40]	; (8010478 <Save_Buf+0x1a0>)
 801044e:	f9b3 30fc 	ldrsh.w	r3, [r3, #252]	; 0xfc
 8010452:	2b62      	cmp	r3, #98	; 0x62
 8010454:	dc09      	bgt.n	801046a <Save_Buf+0x192>
 8010456:	4b08      	ldr	r3, [pc, #32]	; (8010478 <Save_Buf+0x1a0>)
 8010458:	f9b3 30fc 	ldrsh.w	r3, [r3, #252]	; 0xfc
 801045c:	b29b      	uxth	r3, r3
 801045e:	3301      	adds	r3, #1
 8010460:	b29b      	uxth	r3, r3
 8010462:	b21a      	sxth	r2, r3
 8010464:	4b04      	ldr	r3, [pc, #16]	; (8010478 <Save_Buf+0x1a0>)
 8010466:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
  return OK;
 801046a:	2300      	movs	r3, #0
}
 801046c:	4618      	mov	r0, r3
 801046e:	3738      	adds	r7, #56	; 0x38
 8010470:	46bd      	mov	sp, r7
 8010472:	bd80      	pop	{r7, pc}
 8010474:	08000214 	.word	0x08000214
 8010478:	20000298 	.word	0x20000298
 801047c:	200017e0 	.word	0x200017e0
 8010480:	20002878 	.word	0x20002878

08010484 <Save_Dat>:

/*******************************************************************************
Save_Dat: ���浱ǰ��Ļ��ʾͼ��ԭʼ����    ���룺�ļ����     ����ֵ��0x00=�ɹ�
*******************************************************************************/
char Save_Dat(short FileNo)
{
 8010484:	b580      	push	{r7, lr}
 8010486:	b08a      	sub	sp, #40	; 0x28
 8010488:	af00      	add	r7, sp, #0
 801048a:	4603      	mov	r3, r0
 801048c:	80fb      	strh	r3, [r7, #6]
  char pFileName[12]="FILE    DAT";
 801048e:	4a42      	ldr	r2, [pc, #264]	; (8010598 <Save_Dat+0x114>)
 8010490:	f107 0318 	add.w	r3, r7, #24
 8010494:	ca07      	ldmia	r2, {r0, r1, r2}
 8010496:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  short Rvalue=DISK_RW_ERR ;
 801049a:	2304      	movs	r3, #4
 801049c:	84fb      	strh	r3, [r7, #38]	; 0x26
  short pCluster[3];
  int pDirAddr[1];
  Make_Filename(FileNo, pFileName);
 801049e:	f107 0218 	add.w	r2, r7, #24
 80104a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80104a6:	4611      	mov	r1, r2
 80104a8:	4618      	mov	r0, r3
 80104aa:	f7ff fcc7 	bl	800fe3c <Make_Filename>
  memset(F_Buff,0,4096);
 80104ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80104b2:	2100      	movs	r1, #0
 80104b4:	4839      	ldr	r0, [pc, #228]	; (801059c <Save_Dat+0x118>)
 80104b6:	f012 fdd7 	bl	8023068 <memset>
  if(OpenFileWr(F_Buff, pFileName, pCluster, pDirAddr)!=OK) return Rvalue;
 80104ba:	f107 030c 	add.w	r3, r7, #12
 80104be:	f107 0210 	add.w	r2, r7, #16
 80104c2:	f107 0118 	add.w	r1, r7, #24
 80104c6:	4835      	ldr	r0, [pc, #212]	; (801059c <Save_Dat+0x118>)
 80104c8:	f7ff fa1e 	bl	800f908 <OpenFileWr>
 80104cc:	4603      	mov	r3, r0
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d002      	beq.n	80104d8 <Save_Dat+0x54>
 80104d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80104d4:	b2db      	uxtb	r3, r3
 80104d6:	e05b      	b.n	8010590 <Save_Dat+0x10c>
  F_Buff[0]  = 1;              //Ver0001
 80104d8:	4b30      	ldr	r3, [pc, #192]	; (801059c <Save_Dat+0x118>)
 80104da:	2201      	movs	r2, #1
 80104dc:	701a      	strb	r2, [r3, #0]
  F_Buff[1]  = List[V0_POSI].Val;
 80104de:	4b30      	ldr	r3, [pc, #192]	; (80105a0 <Save_Dat+0x11c>)
 80104e0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80104e4:	b2da      	uxtb	r2, r3
 80104e6:	4b2d      	ldr	r3, [pc, #180]	; (801059c <Save_Dat+0x118>)
 80104e8:	705a      	strb	r2, [r3, #1]
  F_Buff[2]  = List[EXT_POSI].Val;
 80104ea:	4b2d      	ldr	r3, [pc, #180]	; (80105a0 <Save_Dat+0x11c>)
 80104ec:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 80104f0:	b2da      	uxtb	r2, r3
 80104f2:	4b2a      	ldr	r3, [pc, #168]	; (801059c <Save_Dat+0x118>)
 80104f4:	709a      	strb	r2, [r3, #2]
  F_Buff[3]  = List[TIM_BASE].Val;
 80104f6:	4b2a      	ldr	r3, [pc, #168]	; (80105a0 <Save_Dat+0x11c>)
 80104f8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80104fc:	b2da      	uxtb	r2, r3
 80104fe:	4b27      	ldr	r3, [pc, #156]	; (801059c <Save_Dat+0x118>)
 8010500:	70da      	strb	r2, [r3, #3]
  F_Buff[4]  = List[Y_RANGES].Val;
 8010502:	4b27      	ldr	r3, [pc, #156]	; (80105a0 <Save_Dat+0x11c>)
 8010504:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010508:	b2da      	uxtb	r2, r3
 801050a:	4b24      	ldr	r3, [pc, #144]	; (801059c <Save_Dat+0x118>)
 801050c:	711a      	strb	r2, [r3, #4]
  F_Buff[5]  = List[COUPLING].Val;
 801050e:	4b24      	ldr	r3, [pc, #144]	; (80105a0 <Save_Dat+0x11c>)
 8010510:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8010514:	b2da      	uxtb	r2, r3
 8010516:	4b21      	ldr	r3, [pc, #132]	; (801059c <Save_Dat+0x118>)
 8010518:	715a      	strb	r2, [r3, #5]
  F_Buff[6]  = List[PROBEATT].Val;
 801051a:	4b21      	ldr	r3, [pc, #132]	; (80105a0 <Save_Dat+0x11c>)
 801051c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8010520:	b2da      	uxtb	r2, r3
 8010522:	4b1e      	ldr	r3, [pc, #120]	; (801059c <Save_Dat+0x118>)
 8010524:	719a      	strb	r2, [r3, #6]
  F_Buff[7]  = List[TR_MODE].Val;
 8010526:	4b1e      	ldr	r3, [pc, #120]	; (80105a0 <Save_Dat+0x11c>)
 8010528:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 801052c:	b2da      	uxtb	r2, r3
 801052e:	4b1b      	ldr	r3, [pc, #108]	; (801059c <Save_Dat+0x118>)
 8010530:	71da      	strb	r2, [r3, #7]

  memcpy(&F_Buff[10], WaveBuf, 300);
 8010532:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8010536:	491b      	ldr	r1, [pc, #108]	; (80105a4 <Save_Dat+0x120>)
 8010538:	481b      	ldr	r0, [pc, #108]	; (80105a8 <Save_Dat+0x124>)
 801053a:	f012 fd87 	bl	802304c <memcpy>
  if(ProgFileSec(F_Buff, pCluster)!= OK) return FILE_RW_ERR; // д������
 801053e:	f107 0310 	add.w	r3, r7, #16
 8010542:	4619      	mov	r1, r3
 8010544:	4815      	ldr	r0, [pc, #84]	; (801059c <Save_Dat+0x118>)
 8010546:	f7ff f907 	bl	800f758 <ProgFileSec>
 801054a:	4603      	mov	r3, r0
 801054c:	2b00      	cmp	r3, #0
 801054e:	d001      	beq.n	8010554 <Save_Dat+0xd0>
 8010550:	2303      	movs	r3, #3
 8010552:	e01d      	b.n	8010590 <Save_Dat+0x10c>
  if(CloseFile(F_Buff, 512, pCluster, pDirAddr)!= OK) return FILE_RW_ERR;
 8010554:	f107 030c 	add.w	r3, r7, #12
 8010558:	f107 0210 	add.w	r2, r7, #16
 801055c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010560:	480e      	ldr	r0, [pc, #56]	; (801059c <Save_Dat+0x118>)
 8010562:	f7ff f96d 	bl	800f840 <CloseFile>
 8010566:	4603      	mov	r3, r0
 8010568:	2b00      	cmp	r3, #0
 801056a:	d001      	beq.n	8010570 <Save_Dat+0xec>
 801056c:	2303      	movs	r3, #3
 801056e:	e00f      	b.n	8010590 <Save_Dat+0x10c>
  if(List[SAVE_DAT].Val<99)List[SAVE_DAT].Val++;
 8010570:	4b0b      	ldr	r3, [pc, #44]	; (80105a0 <Save_Dat+0x11c>)
 8010572:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 8010576:	2b62      	cmp	r3, #98	; 0x62
 8010578:	dc09      	bgt.n	801058e <Save_Dat+0x10a>
 801057a:	4b09      	ldr	r3, [pc, #36]	; (80105a0 <Save_Dat+0x11c>)
 801057c:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 8010580:	b29b      	uxth	r3, r3
 8010582:	3301      	adds	r3, #1
 8010584:	b29b      	uxth	r3, r3
 8010586:	b21a      	sxth	r2, r3
 8010588:	4b05      	ldr	r3, [pc, #20]	; (80105a0 <Save_Dat+0x11c>)
 801058a:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
  return OK;
 801058e:	2300      	movs	r3, #0
}
 8010590:	4618      	mov	r0, r3
 8010592:	3728      	adds	r7, #40	; 0x28
 8010594:	46bd      	mov	sp, r7
 8010596:	bd80      	pop	{r7, pc}
 8010598:	08000208 	.word	0x08000208
 801059c:	200017e0 	.word	0x200017e0
 80105a0:	20000298 	.word	0x20000298
 80105a4:	20000c10 	.word	0x20000c10
 80105a8:	200017ea 	.word	0x200017ea

080105ac <Load_Dat>:

/*******************************************************************************
Load_Dat: ���ر��������Ļͼ��ԭʼ����    ���룺�ļ����     ����ֵ��0x00=�ɹ�
*******************************************************************************/
char Load_Dat(short FileNo)
{
 80105ac:	b580      	push	{r7, lr}
 80105ae:	b08a      	sub	sp, #40	; 0x28
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	4603      	mov	r3, r0
 80105b4:	80fb      	strh	r3, [r7, #6]
  char pFileName[12]="FILE    DAT";
 80105b6:	4a4f      	ldr	r2, [pc, #316]	; (80106f4 <Load_Dat+0x148>)
 80105b8:	f107 0314 	add.w	r3, r7, #20
 80105bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80105be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  short pCluster[3];
  unsigned pDirAddr[1];
  short  Rvalue=0;
 80105c2:	2300      	movs	r3, #0
 80105c4:	847b      	strh	r3, [r7, #34]	; 0x22
  int i;

  Make_Filename(FileNo, pFileName);
 80105c6:	f107 0214 	add.w	r2, r7, #20
 80105ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80105ce:	4611      	mov	r1, r2
 80105d0:	4618      	mov	r0, r3
 80105d2:	f7ff fc33 	bl	800fe3c <Make_Filename>
  if((Rvalue=OpenFileRd(F_Buff, pFileName, pCluster, pDirAddr))!= OK) return Rvalue;
 80105d6:	f107 0308 	add.w	r3, r7, #8
 80105da:	f107 020c 	add.w	r2, r7, #12
 80105de:	f107 0114 	add.w	r1, r7, #20
 80105e2:	4845      	ldr	r0, [pc, #276]	; (80106f8 <Load_Dat+0x14c>)
 80105e4:	f7fe fec6 	bl	800f374 <OpenFileRd>
 80105e8:	4603      	mov	r3, r0
 80105ea:	847b      	strh	r3, [r7, #34]	; 0x22
 80105ec:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d002      	beq.n	80105fa <Load_Dat+0x4e>
 80105f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80105f6:	b2db      	uxtb	r3, r3
 80105f8:	e077      	b.n	80106ea <Load_Dat+0x13e>
  if(ReadFileSec(F_Buff, pCluster)!= OK) return FILE_RW_ERR;
 80105fa:	f107 030c 	add.w	r3, r7, #12
 80105fe:	4619      	mov	r1, r3
 8010600:	483d      	ldr	r0, [pc, #244]	; (80106f8 <Load_Dat+0x14c>)
 8010602:	f7ff f8ef 	bl	800f7e4 <ReadFileSec>
 8010606:	4603      	mov	r3, r0
 8010608:	2b00      	cmp	r3, #0
 801060a:	d001      	beq.n	8010610 <Load_Dat+0x64>
 801060c:	2303      	movs	r3, #3
 801060e:	e06c      	b.n	80106ea <Load_Dat+0x13e>
  memcpy(Data, F_Buff, 310);
 8010610:	f44f 729b 	mov.w	r2, #310	; 0x136
 8010614:	4938      	ldr	r1, [pc, #224]	; (80106f8 <Load_Dat+0x14c>)
 8010616:	4839      	ldr	r0, [pc, #228]	; (80106fc <Load_Dat+0x150>)
 8010618:	f012 fd18 	bl	802304c <memcpy>

  List[TIM_BASE].Val = F_Buff[3];
 801061c:	4b36      	ldr	r3, [pc, #216]	; (80106f8 <Load_Dat+0x14c>)
 801061e:	78db      	ldrb	r3, [r3, #3]
 8010620:	b21a      	sxth	r2, r3
 8010622:	4b37      	ldr	r3, [pc, #220]	; (8010700 <Load_Dat+0x154>)
 8010624:	879a      	strh	r2, [r3, #60]	; 0x3c
  List[Y_RANGES].Val = F_Buff[4];
 8010626:	4b34      	ldr	r3, [pc, #208]	; (80106f8 <Load_Dat+0x14c>)
 8010628:	791b      	ldrb	r3, [r3, #4]
 801062a:	b21a      	sxth	r2, r3
 801062c:	4b34      	ldr	r3, [pc, #208]	; (8010700 <Load_Dat+0x154>)
 801062e:	809a      	strh	r2, [r3, #4]
  List[COUPLING].Val = F_Buff[5];
 8010630:	4b31      	ldr	r3, [pc, #196]	; (80106f8 <Load_Dat+0x14c>)
 8010632:	795b      	ldrb	r3, [r3, #5]
 8010634:	b21a      	sxth	r2, r3
 8010636:	4b32      	ldr	r3, [pc, #200]	; (8010700 <Load_Dat+0x154>)
 8010638:	819a      	strh	r2, [r3, #12]
  List[PROBEATT].Val = F_Buff[6];
 801063a:	4b2f      	ldr	r3, [pc, #188]	; (80106f8 <Load_Dat+0x14c>)
 801063c:	799b      	ldrb	r3, [r3, #6]
 801063e:	b21a      	sxth	r2, r3
 8010640:	4b2f      	ldr	r3, [pc, #188]	; (8010700 <Load_Dat+0x154>)
 8010642:	829a      	strh	r2, [r3, #20]
  List[TR_MODE].Val  = F_Buff[7];
 8010644:	4b2c      	ldr	r3, [pc, #176]	; (80106f8 <Load_Dat+0x14c>)
 8010646:	79db      	ldrb	r3, [r3, #7]
 8010648:	b21a      	sxth	r2, r3
 801064a:	4b2d      	ldr	r3, [pc, #180]	; (8010700 <Load_Dat+0x154>)
 801064c:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74

  for(i=0;i<4;i++)List[i].Flg |= UPD;
 8010650:	2300      	movs	r3, #0
 8010652:	627b      	str	r3, [r7, #36]	; 0x24
 8010654:	e010      	b.n	8010678 <Load_Dat+0xcc>
 8010656:	4a2a      	ldr	r2, [pc, #168]	; (8010700 <Load_Dat+0x154>)
 8010658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801065a:	00db      	lsls	r3, r3, #3
 801065c:	4413      	add	r3, r2
 801065e:	799b      	ldrb	r3, [r3, #6]
 8010660:	f043 0320 	orr.w	r3, r3, #32
 8010664:	b2d9      	uxtb	r1, r3
 8010666:	4a26      	ldr	r2, [pc, #152]	; (8010700 <Load_Dat+0x154>)
 8010668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801066a:	00db      	lsls	r3, r3, #3
 801066c:	4413      	add	r3, r2
 801066e:	460a      	mov	r2, r1
 8010670:	719a      	strb	r2, [r3, #6]
 8010672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010674:	3301      	adds	r3, #1
 8010676:	627b      	str	r3, [r7, #36]	; 0x24
 8010678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801067a:	2b03      	cmp	r3, #3
 801067c:	ddeb      	ble.n	8010656 <Load_Dat+0xaa>
  List[EXT_REFN].Flg |= UPD;
 801067e:	4b20      	ldr	r3, [pc, #128]	; (8010700 <Load_Dat+0x154>)
 8010680:	f893 30d6 	ldrb.w	r3, [r3, #214]	; 0xd6
 8010684:	f043 0320 	orr.w	r3, r3, #32
 8010688:	b2da      	uxtb	r2, r3
 801068a:	4b1d      	ldr	r3, [pc, #116]	; (8010700 <Load_Dat+0x154>)
 801068c:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
  List[EXT_POSI].Flg |= UPD;
 8010690:	4b1b      	ldr	r3, [pc, #108]	; (8010700 <Load_Dat+0x154>)
 8010692:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 8010696:	f043 0320 	orr.w	r3, r3, #32
 801069a:	b2da      	uxtb	r2, r3
 801069c:	4b18      	ldr	r3, [pc, #96]	; (8010700 <Load_Dat+0x154>)
 801069e:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
  List[TIM_BASE].Flg |= UPD;
 80106a2:	4b17      	ldr	r3, [pc, #92]	; (8010700 <Load_Dat+0x154>)
 80106a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80106a8:	f043 0320 	orr.w	r3, r3, #32
 80106ac:	b2da      	uxtb	r2, r3
 80106ae:	4b14      	ldr	r3, [pc, #80]	; (8010700 <Load_Dat+0x154>)
 80106b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  List[TR_MODE].Flg |= UPD;
 80106b4:	4b12      	ldr	r3, [pc, #72]	; (8010700 <Load_Dat+0x154>)
 80106b6:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80106ba:	f043 0320 	orr.w	r3, r3, #32
 80106be:	b2da      	uxtb	r2, r3
 80106c0:	4b0f      	ldr	r3, [pc, #60]	; (8010700 <Load_Dat+0x154>)
 80106c2:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
  Update_Detail();
 80106c6:	f002 ffab 	bl	8013620 <Update_Detail>
  if(List[LOAD_DAT].Val<99)List[LOAD_DAT].Val++;
 80106ca:	4b0d      	ldr	r3, [pc, #52]	; (8010700 <Load_Dat+0x154>)
 80106cc:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	; 0x114
 80106d0:	2b62      	cmp	r3, #98	; 0x62
 80106d2:	dc09      	bgt.n	80106e8 <Load_Dat+0x13c>
 80106d4:	4b0a      	ldr	r3, [pc, #40]	; (8010700 <Load_Dat+0x154>)
 80106d6:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	; 0x114
 80106da:	b29b      	uxth	r3, r3
 80106dc:	3301      	adds	r3, #1
 80106de:	b29b      	uxth	r3, r3
 80106e0:	b21a      	sxth	r2, r3
 80106e2:	4b07      	ldr	r3, [pc, #28]	; (8010700 <Load_Dat+0x154>)
 80106e4:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
  return OK;
 80106e8:	2300      	movs	r3, #0
}
 80106ea:	4618      	mov	r0, r3
 80106ec:	3728      	adds	r7, #40	; 0x28
 80106ee:	46bd      	mov	sp, r7
 80106f0:	bd80      	pop	{r7, pc}
 80106f2:	bf00      	nop
 80106f4:	08000208 	.word	0x08000208
 80106f8:	200017e0 	.word	0x200017e0
 80106fc:	20000008 	.word	0x20000008
 8010700:	20000298 	.word	0x20000298

08010704 <Save_Bmp>:

/*******************************************************************************
Save_Bmp: ���浱ǰ��Ļ��ʾͼ��ΪBMP��ʽ    ���룺�ļ����     ����ֵ��0x00=�ɹ�
*******************************************************************************/
char Save_Bmp(short FileNo)
{
 8010704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010706:	b08f      	sub	sp, #60	; 0x3c
 8010708:	af00      	add	r7, sp, #0
 801070a:	4603      	mov	r3, r0
 801070c:	80fb      	strh	r3, [r7, #6]
  char  pFileName[12]="IMG_    BMP";
 801070e:	4aaa      	ldr	r2, [pc, #680]	; (80109b8 <Save_Bmp+0x2b4>)
 8010710:	f107 0314 	add.w	r3, r7, #20
 8010714:	ca07      	ldmia	r2, {r0, r1, r2}
 8010716:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  short pCluster[3];
  int pDirAddr[1];
  int Rvalue=DISK_RW_ERR;
 801071a:	2304      	movs	r3, #4
 801071c:	62bb      	str	r3, [r7, #40]	; 0x28
  short x, y, i=54, j,ColorH,ColorL ;
 801071e:	2336      	movs	r3, #54	; 0x36
 8010720:	867b      	strh	r3, [r7, #50]	; 0x32
  short k=0, l=0;
 8010722:	2300      	movs	r3, #0
 8010724:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8010726:	2300      	movs	r3, #0
 8010728:	85bb      	strh	r3, [r7, #44]	; 0x2c
  int length;

  length=4096;
 801072a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801072e:	627b      	str	r3, [r7, #36]	; 0x24

  //USB_Connect(DISABLE);

  if(Current == FN){
 8010730:	4ba2      	ldr	r3, [pc, #648]	; (80109bc <Save_Bmp+0x2b8>)
 8010732:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010736:	2b05      	cmp	r3, #5
 8010738:	d105      	bne.n	8010746 <Save_Bmp+0x42>
    Close_Pop();
 801073a:	f7fe f9c5 	bl	800eac8 <Close_Pop>
    DrawWindow(WaveBuf, ParamTab);
 801073e:	49a0      	ldr	r1, [pc, #640]	; (80109c0 <Save_Bmp+0x2bc>)
 8010740:	48a0      	ldr	r0, [pc, #640]	; (80109c4 <Save_Bmp+0x2c0>)
 8010742:	f7fd f9c1 	bl	800dac8 <DrawWindow>
  }
  Make_Filename(FileNo, pFileName);
 8010746:	f107 0214 	add.w	r2, r7, #20
 801074a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801074e:	4611      	mov	r1, r2
 8010750:	4618      	mov	r0, r3
 8010752:	f7ff fb73 	bl	800fe3c <Make_Filename>
  if(OpenFileWr(F_Buff, pFileName, pCluster, pDirAddr)!=OK) return Rvalue;
 8010756:	f107 0308 	add.w	r3, r7, #8
 801075a:	f107 020c 	add.w	r2, r7, #12
 801075e:	f107 0114 	add.w	r1, r7, #20
 8010762:	4899      	ldr	r0, [pc, #612]	; (80109c8 <Save_Bmp+0x2c4>)
 8010764:	f7ff f8d0 	bl	800f908 <OpenFileWr>
 8010768:	4603      	mov	r3, r0
 801076a:	2b00      	cmp	r3, #0
 801076c:	d002      	beq.n	8010774 <Save_Bmp+0x70>
 801076e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010770:	b2db      	uxtb	r3, r3
 8010772:	e11c      	b.n	80109ae <Save_Bmp+0x2aa>
  memcpy(F_Buff, BmpHead, 54);
 8010774:	4b94      	ldr	r3, [pc, #592]	; (80109c8 <Save_Bmp+0x2c4>)
 8010776:	4a95      	ldr	r2, [pc, #596]	; (80109cc <Save_Bmp+0x2c8>)
 8010778:	4614      	mov	r4, r2
 801077a:	469c      	mov	ip, r3
 801077c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8010780:	4665      	mov	r5, ip
 8010782:	4626      	mov	r6, r4
 8010784:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010786:	6028      	str	r0, [r5, #0]
 8010788:	6069      	str	r1, [r5, #4]
 801078a:	60aa      	str	r2, [r5, #8]
 801078c:	60eb      	str	r3, [r5, #12]
 801078e:	3410      	adds	r4, #16
 8010790:	f10c 0c10 	add.w	ip, ip, #16
 8010794:	4574      	cmp	r4, lr
 8010796:	d1f3      	bne.n	8010780 <Save_Bmp+0x7c>
 8010798:	4663      	mov	r3, ip
 801079a:	4622      	mov	r2, r4
 801079c:	6810      	ldr	r0, [r2, #0]
 801079e:	6018      	str	r0, [r3, #0]
 80107a0:	8892      	ldrh	r2, [r2, #4]
 80107a2:	809a      	strh	r2, [r3, #4]
  i = 0x0036;                                     // ��ɫ���ſ�ʼ��ַ
 80107a4:	2336      	movs	r3, #54	; 0x36
 80107a6:	867b      	strh	r3, [r7, #50]	; 0x32
  for(j=0; j<16; ++j){
 80107a8:	2300      	movs	r3, #0
 80107aa:	863b      	strh	r3, [r7, #48]	; 0x30
 80107ac:	e042      	b.n	8010834 <Save_Bmp+0x130>
    F_Buff[j*4 +i+0]=(BMP_Color[j] & 0xF800)>>8;  // Bule
 80107ae:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80107b2:	4a87      	ldr	r2, [pc, #540]	; (80109d0 <Save_Bmp+0x2cc>)
 80107b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80107b8:	121b      	asrs	r3, r3, #8
 80107ba:	b2da      	uxtb	r2, r3
 80107bc:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80107c0:	0099      	lsls	r1, r3, #2
 80107c2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80107c6:	440b      	add	r3, r1
 80107c8:	f022 0207 	bic.w	r2, r2, #7
 80107cc:	b2d1      	uxtb	r1, r2
 80107ce:	4a7e      	ldr	r2, [pc, #504]	; (80109c8 <Save_Bmp+0x2c4>)
 80107d0:	54d1      	strb	r1, [r2, r3]
    F_Buff[j*4 +i+1]=(BMP_Color[j] & 0x07E0)>>3;  // Green&
 80107d2:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80107d6:	4a7e      	ldr	r2, [pc, #504]	; (80109d0 <Save_Bmp+0x2cc>)
 80107d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80107dc:	10db      	asrs	r3, r3, #3
 80107de:	b2da      	uxtb	r2, r3
 80107e0:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80107e4:	0099      	lsls	r1, r3, #2
 80107e6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80107ea:	440b      	add	r3, r1
 80107ec:	3301      	adds	r3, #1
 80107ee:	f022 0203 	bic.w	r2, r2, #3
 80107f2:	b2d1      	uxtb	r1, r2
 80107f4:	4a74      	ldr	r2, [pc, #464]	; (80109c8 <Save_Bmp+0x2c4>)
 80107f6:	54d1      	strb	r1, [r2, r3]
    F_Buff[j*4 +i+2]=(BMP_Color[j] & 0x001F)<<3;  // Red
 80107f8:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80107fc:	4a74      	ldr	r2, [pc, #464]	; (80109d0 <Save_Bmp+0x2cc>)
 80107fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010802:	00d9      	lsls	r1, r3, #3
 8010804:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010808:	009a      	lsls	r2, r3, #2
 801080a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801080e:	4413      	add	r3, r2
 8010810:	3302      	adds	r3, #2
 8010812:	b2c9      	uxtb	r1, r1
 8010814:	4a6c      	ldr	r2, [pc, #432]	; (80109c8 <Save_Bmp+0x2c4>)
 8010816:	54d1      	strb	r1, [r2, r3]
    F_Buff[j*4 +i+3]= 0;                          // Alpha
 8010818:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801081c:	009a      	lsls	r2, r3, #2
 801081e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8010822:	4413      	add	r3, r2
 8010824:	3303      	adds	r3, #3
 8010826:	4a68      	ldr	r2, [pc, #416]	; (80109c8 <Save_Bmp+0x2c4>)
 8010828:	2100      	movs	r1, #0
 801082a:	54d1      	strb	r1, [r2, r3]
  for(j=0; j<16; ++j){
 801082c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801082e:	3301      	adds	r3, #1
 8010830:	b29b      	uxth	r3, r3
 8010832:	863b      	strh	r3, [r7, #48]	; 0x30
 8010834:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010838:	2b0f      	cmp	r3, #15
 801083a:	ddb8      	ble.n	80107ae <Save_Bmp+0xaa>
  }
  i = 0x0076;                                     // ͼ�����ݿ�ʼ��ŵ�ַ
 801083c:	2376      	movs	r3, #118	; 0x76
 801083e:	867b      	strh	r3, [r7, #50]	; 0x32
  for(y=0; y<240; y++){
 8010840:	2300      	movs	r3, #0
 8010842:	86bb      	strh	r3, [r7, #52]	; 0x34
 8010844:	e079      	b.n	801093a <Save_Bmp+0x236>
    for(x=0; x<320 ; x+=2){
 8010846:	2300      	movs	r3, #0
 8010848:	86fb      	strh	r3, [r7, #54]	; 0x36
 801084a:	e06b      	b.n	8010924 <Save_Bmp+0x220>
      LCD_Set_Posi(x, y);
 801084c:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8010850:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8010854:	4611      	mov	r1, r2
 8010856:	4618      	mov	r0, r3
 8010858:	f001 fe62 	bl	8012520 <LCD_Set_Posi>
      ColorH = LCD_Get_Pixel();
 801085c:	f001 fed6 	bl	801260c <LCD_Get_Pixel>
 8010860:	4603      	mov	r3, r0
 8010862:	847b      	strh	r3, [r7, #34]	; 0x22
      LCD_Set_Posi(x+1, y);
 8010864:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010866:	3301      	adds	r3, #1
 8010868:	b29b      	uxth	r3, r3
 801086a:	b21b      	sxth	r3, r3
 801086c:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8010870:	4611      	mov	r1, r2
 8010872:	4618      	mov	r0, r3
 8010874:	f001 fe54 	bl	8012520 <LCD_Set_Posi>
      ColorL = LCD_Get_Pixel();
 8010878:	f001 fec8 	bl	801260c <LCD_Get_Pixel>
 801087c:	4603      	mov	r3, r0
 801087e:	843b      	strh	r3, [r7, #32]
      F_Buff[i] =(Color_Num(ColorH)<<4)+ Color_Num(ColorL);
 8010880:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010884:	4618      	mov	r0, r3
 8010886:	f7ff f8a1 	bl	800f9cc <Color_Num>
 801088a:	4603      	mov	r3, r0
 801088c:	011b      	lsls	r3, r3, #4
 801088e:	b2dc      	uxtb	r4, r3
 8010890:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010894:	4618      	mov	r0, r3
 8010896:	f7ff f899 	bl	800f9cc <Color_Num>
 801089a:	4603      	mov	r3, r0
 801089c:	461a      	mov	r2, r3
 801089e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80108a2:	4422      	add	r2, r4
 80108a4:	b2d1      	uxtb	r1, r2
 80108a6:	4a48      	ldr	r2, [pc, #288]	; (80109c8 <Save_Bmp+0x2c4>)
 80108a8:	54d1      	strb	r1, [r2, r3]
      i++;
 80108aa:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80108ae:	b29b      	uxth	r3, r3
 80108b0:	3301      	adds	r3, #1
 80108b2:	b29b      	uxth	r3, r3
 80108b4:	867b      	strh	r3, [r7, #50]	; 0x32
      if(i>=length){
 80108b6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80108ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108bc:	429a      	cmp	r2, r3
 80108be:	dc2d      	bgt.n	801091c <Save_Bmp+0x218>
        i=0;
 80108c0:	2300      	movs	r3, #0
 80108c2:	867b      	strh	r3, [r7, #50]	; 0x32
        if(ProgFileSec(F_Buff, pCluster)!= OK) return FILE_RW_ERR; // д������
 80108c4:	f107 030c 	add.w	r3, r7, #12
 80108c8:	4619      	mov	r1, r3
 80108ca:	483f      	ldr	r0, [pc, #252]	; (80109c8 <Save_Bmp+0x2c4>)
 80108cc:	f7fe ff44 	bl	800f758 <ProgFileSec>
 80108d0:	4603      	mov	r3, r0
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d001      	beq.n	80108da <Save_Bmp+0x1d6>
 80108d6:	2303      	movs	r3, #3
 80108d8:	e069      	b.n	80109ae <Save_Bmp+0x2aa>
        if(l==0)PrintClk(168,2,(k++ >>1)& 3);         // ����ָʾ
 80108da:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d110      	bne.n	8010904 <Save_Bmp+0x200>
 80108e2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80108e6:	b29a      	uxth	r2, r3
 80108e8:	3201      	adds	r2, #1
 80108ea:	b292      	uxth	r2, r2
 80108ec:	85fa      	strh	r2, [r7, #46]	; 0x2e
 80108ee:	105b      	asrs	r3, r3, #1
 80108f0:	b21b      	sxth	r3, r3
 80108f2:	b2db      	uxtb	r3, r3
 80108f4:	f003 0303 	and.w	r3, r3, #3
 80108f8:	b2db      	uxtb	r3, r3
 80108fa:	461a      	mov	r2, r3
 80108fc:	2102      	movs	r1, #2
 80108fe:	20a8      	movs	r0, #168	; 0xa8
 8010900:	f7ff f8e4 	bl	800facc <PrintClk>
        l++;
 8010904:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8010908:	b29b      	uxth	r3, r3
 801090a:	3301      	adds	r3, #1
 801090c:	b29b      	uxth	r3, r3
 801090e:	85bb      	strh	r3, [r7, #44]	; 0x2c
        if(l>=2)l=0;
 8010910:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8010914:	2b01      	cmp	r3, #1
 8010916:	dd01      	ble.n	801091c <Save_Bmp+0x218>
 8010918:	2300      	movs	r3, #0
 801091a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    for(x=0; x<320 ; x+=2){
 801091c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801091e:	3302      	adds	r3, #2
 8010920:	b29b      	uxth	r3, r3
 8010922:	86fb      	strh	r3, [r7, #54]	; 0x36
 8010924:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8010928:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801092c:	db8e      	blt.n	801084c <Save_Bmp+0x148>
  for(y=0; y<240; y++){
 801092e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8010932:	b29b      	uxth	r3, r3
 8010934:	3301      	adds	r3, #1
 8010936:	b29b      	uxth	r3, r3
 8010938:	86bb      	strh	r3, [r7, #52]	; 0x34
 801093a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801093e:	2bef      	cmp	r3, #239	; 0xef
 8010940:	dd81      	ble.n	8010846 <Save_Bmp+0x142>
      }
    }
  }
  if(i!=0){
 8010942:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8010946:	2b00      	cmp	r3, #0
 8010948:	d00c      	beq.n	8010964 <Save_Bmp+0x260>
      if(ProgFileSec(F_Buff, pCluster)!= OK){List_Pop();return FILE_RW_ERR;} // д������
 801094a:	f107 030c 	add.w	r3, r7, #12
 801094e:	4619      	mov	r1, r3
 8010950:	481d      	ldr	r0, [pc, #116]	; (80109c8 <Save_Bmp+0x2c4>)
 8010952:	f7fe ff01 	bl	800f758 <ProgFileSec>
 8010956:	4603      	mov	r3, r0
 8010958:	2b00      	cmp	r3, #0
 801095a:	d003      	beq.n	8010964 <Save_Bmp+0x260>
 801095c:	f7fe f8ca 	bl	800eaf4 <List_Pop>
 8010960:	2303      	movs	r3, #3
 8010962:	e024      	b.n	80109ae <Save_Bmp+0x2aa>
    }
  if(CloseFile(F_Buff, 76*512, pCluster, pDirAddr)!= OK) return FILE_RW_ERR;
 8010964:	f107 0308 	add.w	r3, r7, #8
 8010968:	f107 020c 	add.w	r2, r7, #12
 801096c:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 8010970:	4815      	ldr	r0, [pc, #84]	; (80109c8 <Save_Bmp+0x2c4>)
 8010972:	f7fe ff65 	bl	800f840 <CloseFile>
 8010976:	4603      	mov	r3, r0
 8010978:	2b00      	cmp	r3, #0
 801097a:	d001      	beq.n	8010980 <Save_Bmp+0x27c>
 801097c:	2303      	movs	r3, #3
 801097e:	e016      	b.n	80109ae <Save_Bmp+0x2aa>
  if(Current == FN)List_Pop();
 8010980:	4b0e      	ldr	r3, [pc, #56]	; (80109bc <Save_Bmp+0x2b8>)
 8010982:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010986:	2b05      	cmp	r3, #5
 8010988:	d101      	bne.n	801098e <Save_Bmp+0x28a>
 801098a:	f7fe f8b3 	bl	800eaf4 <List_Pop>
  if(List[SAVE_BMP].Val<99)List[SAVE_BMP].Val++;
 801098e:	4b11      	ldr	r3, [pc, #68]	; (80109d4 <Save_Bmp+0x2d0>)
 8010990:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 8010994:	2b62      	cmp	r3, #98	; 0x62
 8010996:	dc09      	bgt.n	80109ac <Save_Bmp+0x2a8>
 8010998:	4b0e      	ldr	r3, [pc, #56]	; (80109d4 <Save_Bmp+0x2d0>)
 801099a:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 801099e:	b29b      	uxth	r3, r3
 80109a0:	3301      	adds	r3, #1
 80109a2:	b29b      	uxth	r3, r3
 80109a4:	b21a      	sxth	r2, r3
 80109a6:	4b0b      	ldr	r3, [pc, #44]	; (80109d4 <Save_Bmp+0x2d0>)
 80109a8:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec

//  USB_Connect(ENABLE);
  return OK;
 80109ac:	2300      	movs	r3, #0
}
 80109ae:	4618      	mov	r0, r3
 80109b0:	373c      	adds	r7, #60	; 0x3c
 80109b2:	46bd      	mov	sp, r7
 80109b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109b6:	bf00      	nop
 80109b8:	080001fc 	.word	0x080001fc
 80109bc:	200007a6 	.word	0x200007a6
 80109c0:	20000140 	.word	0x20000140
 80109c4:	20000c10 	.word	0x20000c10
 80109c8:	200017e0 	.word	0x200017e0
 80109cc:	08001b84 	.word	0x08001b84
 80109d0:	08001b64 	.word	0x08001b64
 80109d4:	20000298 	.word	0x20000298

080109d8 <Save_Csv>:

/*******************************************************************************
Save_Csv: ����ɼ����ݻ�����ΪCSV��ʽ    ���룺�ļ����     ����ֵ��0x00=�ɹ�
*******************************************************************************/
char Save_Csv(short FileNo)
{
 80109d8:	b580      	push	{r7, lr}
 80109da:	b094      	sub	sp, #80	; 0x50
 80109dc:	af00      	add	r7, sp, #0
 80109de:	4603      	mov	r3, r0
 80109e0:	80fb      	strh	r3, [r7, #6]

  int Ak = (KgA[KindA+(StateA?1:0)]*4)/GK[GainA];
 80109e2:	4baf      	ldr	r3, [pc, #700]	; (8010ca0 <Save_Csv+0x2c8>)
 80109e4:	681a      	ldr	r2, [r3, #0]
 80109e6:	4baf      	ldr	r3, [pc, #700]	; (8010ca4 <Save_Csv+0x2cc>)
 80109e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80109ec:	4619      	mov	r1, r3
 80109ee:	4bae      	ldr	r3, [pc, #696]	; (8010ca8 <Save_Csv+0x2d0>)
 80109f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	bf14      	ite	ne
 80109f8:	2301      	movne	r3, #1
 80109fa:	2300      	moveq	r3, #0
 80109fc:	b2db      	uxtb	r3, r3
 80109fe:	440b      	add	r3, r1
 8010a00:	005b      	lsls	r3, r3, #1
 8010a02:	4413      	add	r3, r2
 8010a04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010a08:	009b      	lsls	r3, r3, #2
 8010a0a:	4aa8      	ldr	r2, [pc, #672]	; (8010cac <Save_Csv+0x2d4>)
 8010a0c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010a10:	4611      	mov	r1, r2
 8010a12:	4aa7      	ldr	r2, [pc, #668]	; (8010cb0 <Save_Csv+0x2d8>)
 8010a14:	5c52      	ldrb	r2, [r2, r1]
 8010a16:	fb93 f3f2 	sdiv	r3, r3, r2
 8010a1a:	63bb      	str	r3, [r7, #56]	; 0x38

  char pFileName[12]="DATA    CSV";
 8010a1c:	4aa5      	ldr	r2, [pc, #660]	; (8010cb4 <Save_Csv+0x2dc>)
 8010a1e:	f107 031c 	add.w	r3, r7, #28
 8010a22:	ca07      	ldmia	r2, {r0, r1, r2}
 8010a24:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  short pCluster[3];
  int pDirAddr[1];
  int i,k=0,l=0,Rvalue=DISK_RW_ERR,length;
 8010a28:	2300      	movs	r3, #0
 8010a2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	647b      	str	r3, [r7, #68]	; 0x44
 8010a30:	2304      	movs	r3, #4
 8010a32:	637b      	str	r3, [r7, #52]	; 0x34
  short temp;
  short count;
  char* ptr;
  char* buf;

  length=4096;
 8010a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010a38:	633b      	str	r3, [r7, #48]	; 0x30

  Make_Filename(FileNo, pFileName);
 8010a3a:	f107 021c 	add.w	r2, r7, #28
 8010a3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010a42:	4611      	mov	r1, r2
 8010a44:	4618      	mov	r0, r3
 8010a46:	f7ff f9f9 	bl	800fe3c <Make_Filename>
  if(OpenFileWr(F_Buff, pFileName, pCluster, pDirAddr)!=OK) return Rvalue;
 8010a4a:	f107 0310 	add.w	r3, r7, #16
 8010a4e:	f107 0214 	add.w	r2, r7, #20
 8010a52:	f107 011c 	add.w	r1, r7, #28
 8010a56:	4898      	ldr	r0, [pc, #608]	; (8010cb8 <Save_Csv+0x2e0>)
 8010a58:	f7fe ff56 	bl	800f908 <OpenFileWr>
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d002      	beq.n	8010a68 <Save_Csv+0x90>
 8010a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a64:	b2db      	uxtb	r3, r3
 8010a66:	e1d3      	b.n	8010e10 <Save_Csv+0x438>
  memcpy(&F_Buff[0],TimeBase_Str[List[TIM_BASE].Val],5);
 8010a68:	4b94      	ldr	r3, [pc, #592]	; (8010cbc <Save_Csv+0x2e4>)
 8010a6a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010a6e:	00db      	lsls	r3, r3, #3
 8010a70:	4a93      	ldr	r2, [pc, #588]	; (8010cc0 <Save_Csv+0x2e8>)
 8010a72:	4413      	add	r3, r2
 8010a74:	2205      	movs	r2, #5
 8010a76:	4619      	mov	r1, r3
 8010a78:	488f      	ldr	r0, [pc, #572]	; (8010cb8 <Save_Csv+0x2e0>)
 8010a7a:	f012 fae7 	bl	802304c <memcpy>
  memcpy(&F_Buff[5],"   ",3);
 8010a7e:	2203      	movs	r2, #3
 8010a80:	4990      	ldr	r1, [pc, #576]	; (8010cc4 <Save_Csv+0x2ec>)
 8010a82:	4891      	ldr	r0, [pc, #580]	; (8010cc8 <Save_Csv+0x2f0>)
 8010a84:	f012 fae2 	bl	802304c <memcpy>
  buf=&F_Buff[8];
 8010a88:	4b90      	ldr	r3, [pc, #576]	; (8010ccc <Save_Csv+0x2f4>)
 8010a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //------------------------------------------------------------------
    i=0;
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
    ptr=(char*)&R[List[Y_RANGES].Val];
 8010a90:	4b8a      	ldr	r3, [pc, #552]	; (8010cbc <Save_Csv+0x2e4>)
 8010a92:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010a96:	461a      	mov	r2, r3
 8010a98:	4613      	mov	r3, r2
 8010a9a:	005b      	lsls	r3, r3, #1
 8010a9c:	4413      	add	r3, r2
 8010a9e:	005b      	lsls	r3, r3, #1
 8010aa0:	4a8b      	ldr	r2, [pc, #556]	; (8010cd0 <Save_Csv+0x2f8>)
 8010aa2:	4413      	add	r3, r2
 8010aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(*ptr != 0)
 8010aa6:	e00a      	b.n	8010abe <Save_Csv+0xe6>
    	buf[i++] = *ptr++;
 8010aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010aaa:	1c5a      	adds	r2, r3, #1
 8010aac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010aae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010ab0:	1c51      	adds	r1, r2, #1
 8010ab2:	64f9      	str	r1, [r7, #76]	; 0x4c
 8010ab4:	4611      	mov	r1, r2
 8010ab6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010ab8:	440a      	add	r2, r1
 8010aba:	781b      	ldrb	r3, [r3, #0]
 8010abc:	7013      	strb	r3, [r2, #0]
    while(*ptr != 0)
 8010abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ac0:	781b      	ldrb	r3, [r3, #0]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d1f0      	bne.n	8010aa8 <Save_Csv+0xd0>
    buf[i++]   = 0x2a;
 8010ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ac8:	1c5a      	adds	r2, r3, #1
 8010aca:	64fa      	str	r2, [r7, #76]	; 0x4c
 8010acc:	461a      	mov	r2, r3
 8010ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ad0:	4413      	add	r3, r2
 8010ad2:	222a      	movs	r2, #42	; 0x2a
 8010ad4:	701a      	strb	r2, [r3, #0]
    ptr=(char*)&N[List[PROBEATT].Val];
 8010ad6:	4b79      	ldr	r3, [pc, #484]	; (8010cbc <Save_Csv+0x2e4>)
 8010ad8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8010adc:	461a      	mov	r2, r3
 8010ade:	4613      	mov	r3, r2
 8010ae0:	005b      	lsls	r3, r3, #1
 8010ae2:	4413      	add	r3, r2
 8010ae4:	005b      	lsls	r3, r3, #1
 8010ae6:	4a7b      	ldr	r2, [pc, #492]	; (8010cd4 <Save_Csv+0x2fc>)
 8010ae8:	4413      	add	r3, r2
 8010aea:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(*ptr != 0)
 8010aec:	e00a      	b.n	8010b04 <Save_Csv+0x12c>
    	buf[i++] = *ptr++;
 8010aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010af0:	1c5a      	adds	r2, r3, #1
 8010af2:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010af4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010af6:	1c51      	adds	r1, r2, #1
 8010af8:	64f9      	str	r1, [r7, #76]	; 0x4c
 8010afa:	4611      	mov	r1, r2
 8010afc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010afe:	440a      	add	r2, r1
 8010b00:	781b      	ldrb	r3, [r3, #0]
 8010b02:	7013      	strb	r3, [r2, #0]
    while(*ptr != 0)
 8010b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b06:	781b      	ldrb	r3, [r3, #0]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d1f0      	bne.n	8010aee <Save_Csv+0x116>
    buf[i]   = 0x2c;
 8010b0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010b10:	4413      	add	r3, r2
 8010b12:	222c      	movs	r2, #44	; 0x2c
 8010b14:	701a      	strb	r2, [r3, #0]
    buf[i+1] = 0;
 8010b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b18:	3301      	adds	r3, #1
 8010b1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010b1c:	4413      	add	r3, r2
 8010b1e:	2200      	movs	r2, #0
 8010b20:	701a      	strb	r2, [r3, #0]
    count = i+1;
 8010b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b24:	b29b      	uxth	r3, r3
 8010b26:	3301      	adds	r3, #1
 8010b28:	b29b      	uxth	r3, r3
 8010b2a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  k=8+count;
 8010b2e:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8010b32:	3308      	adds	r3, #8
 8010b34:	64bb      	str	r3, [r7, #72]	; 0x48
  memcpy(&F_Buff[k],"\r\n",2);
 8010b36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b38:	4a5f      	ldr	r2, [pc, #380]	; (8010cb8 <Save_Csv+0x2e0>)
 8010b3a:	4413      	add	r3, r2
 8010b3c:	2202      	movs	r2, #2
 8010b3e:	4966      	ldr	r1, [pc, #408]	; (8010cd8 <Save_Csv+0x300>)
 8010b40:	4618      	mov	r0, r3
 8010b42:	f012 fa83 	bl	802304c <memcpy>
  k+=2;
 8010b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b48:	3302      	adds	r3, #2
 8010b4a:	64bb      	str	r3, [r7, #72]	; 0x48
  for(i=0; i<DEPTH[List[SMPL_DPTH].Val]; i++){
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010b50:	e0fe      	b.n	8010d50 <Save_Csv+0x378>

    temp = ((((Sampl[2+i])-2048)*Ak)>>12)+100;
 8010b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b54:	3302      	adds	r3, #2
 8010b56:	4a61      	ldr	r2, [pc, #388]	; (8010cdc <Save_Csv+0x304>)
 8010b58:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8010b5c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8010b60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010b62:	fb02 f303 	mul.w	r3, r2, r3
 8010b66:	131b      	asrs	r3, r3, #12
 8010b68:	b29b      	uxth	r3, r3
 8010b6a:	3364      	adds	r3, #100	; 0x64
 8010b6c:	b29b      	uxth	r3, r3
 8010b6e:	857b      	strh	r3, [r7, #42]	; 0x2a

    if(temp > 0){
 8010b70:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	dd0a      	ble.n	8010b8e <Save_Csv+0x1b6>
      if(temp > 200)  track[0] = 199;
 8010b78:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010b7c:	2bc8      	cmp	r3, #200	; 0xc8
 8010b7e:	dd02      	ble.n	8010b86 <Save_Csv+0x1ae>
 8010b80:	23c7      	movs	r3, #199	; 0xc7
 8010b82:	723b      	strb	r3, [r7, #8]
 8010b84:	e005      	b.n	8010b92 <Save_Csv+0x1ba>
      else            track[0] = temp;
 8010b86:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010b88:	b2db      	uxtb	r3, r3
 8010b8a:	723b      	strb	r3, [r7, #8]
 8010b8c:	e001      	b.n	8010b92 <Save_Csv+0x1ba>
    } else            track[0] = 0;
 8010b8e:	2300      	movs	r3, #0
 8010b90:	723b      	strb	r3, [r7, #8]
    u8ToDec3(Num,track[0]);
 8010b92:	7a3a      	ldrb	r2, [r7, #8]
 8010b94:	f107 030c 	add.w	r3, r7, #12
 8010b98:	4611      	mov	r1, r2
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	f001 f898 	bl	8011cd0 <u8ToDec3>
    for(count=0; count<3; count++){
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010ba6:	e03a      	b.n	8010c1e <Save_Csv+0x246>
      if(Num[count] == 0) break;
 8010ba8:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8010bac:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8010bb0:	4413      	add	r3, r2
 8010bb2:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d036      	beq.n	8010c28 <Save_Csv+0x250>
      F_Buff[k++] = Num[count];
 8010bba:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8010bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010bc0:	1c59      	adds	r1, r3, #1
 8010bc2:	64b9      	str	r1, [r7, #72]	; 0x48
 8010bc4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8010bc8:	440a      	add	r2, r1
 8010bca:	f812 1c44 	ldrb.w	r1, [r2, #-68]
 8010bce:	4a3a      	ldr	r2, [pc, #232]	; (8010cb8 <Save_Csv+0x2e0>)
 8010bd0:	54d1      	strb	r1, [r2, r3]
      if(k >= length){
 8010bd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bd6:	429a      	cmp	r2, r3
 8010bd8:	db1a      	blt.n	8010c10 <Save_Csv+0x238>
        if(ProgFileSec(F_Buff, pCluster)!= OK) return FILE_RW_ERR; // д������
 8010bda:	f107 0314 	add.w	r3, r7, #20
 8010bde:	4619      	mov	r1, r3
 8010be0:	4835      	ldr	r0, [pc, #212]	; (8010cb8 <Save_Csv+0x2e0>)
 8010be2:	f7fe fdb9 	bl	800f758 <ProgFileSec>
 8010be6:	4603      	mov	r3, r0
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d001      	beq.n	8010bf0 <Save_Csv+0x218>
 8010bec:	2303      	movs	r3, #3
 8010bee:	e10f      	b.n	8010e10 <Save_Csv+0x438>
        PrintClk(264,2,(l++ >>1) & 3);                    // ����ָʾ
 8010bf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bf2:	1c5a      	adds	r2, r3, #1
 8010bf4:	647a      	str	r2, [r7, #68]	; 0x44
 8010bf6:	105b      	asrs	r3, r3, #1
 8010bf8:	b2db      	uxtb	r3, r3
 8010bfa:	f003 0303 	and.w	r3, r3, #3
 8010bfe:	b2db      	uxtb	r3, r3
 8010c00:	461a      	mov	r2, r3
 8010c02:	2102      	movs	r1, #2
 8010c04:	f44f 7084 	mov.w	r0, #264	; 0x108
 8010c08:	f7fe ff60 	bl	800facc <PrintClk>
        k = 0;
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	64bb      	str	r3, [r7, #72]	; 0x48
    for(count=0; count<3; count++){
 8010c10:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8010c14:	b29b      	uxth	r3, r3
 8010c16:	3301      	adds	r3, #1
 8010c18:	b29b      	uxth	r3, r3
 8010c1a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010c1e:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8010c22:	2b02      	cmp	r3, #2
 8010c24:	ddc0      	ble.n	8010ba8 <Save_Csv+0x1d0>
 8010c26:	e000      	b.n	8010c2a <Save_Csv+0x252>
      if(Num[count] == 0) break;
 8010c28:	bf00      	nop
      }
    }
    F_Buff[k++] = 0x2c;
 8010c2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c2c:	1c5a      	adds	r2, r3, #1
 8010c2e:	64ba      	str	r2, [r7, #72]	; 0x48
 8010c30:	4a21      	ldr	r2, [pc, #132]	; (8010cb8 <Save_Csv+0x2e0>)
 8010c32:	212c      	movs	r1, #44	; 0x2c
 8010c34:	54d1      	strb	r1, [r2, r3]
    if(k >= length){
 8010c36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c3a:	429a      	cmp	r2, r3
 8010c3c:	db1a      	blt.n	8010c74 <Save_Csv+0x29c>
      if(ProgFileSec(F_Buff, pCluster)!= OK) return FILE_RW_ERR; // д������
 8010c3e:	f107 0314 	add.w	r3, r7, #20
 8010c42:	4619      	mov	r1, r3
 8010c44:	481c      	ldr	r0, [pc, #112]	; (8010cb8 <Save_Csv+0x2e0>)
 8010c46:	f7fe fd87 	bl	800f758 <ProgFileSec>
 8010c4a:	4603      	mov	r3, r0
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d001      	beq.n	8010c54 <Save_Csv+0x27c>
 8010c50:	2303      	movs	r3, #3
 8010c52:	e0dd      	b.n	8010e10 <Save_Csv+0x438>
      PrintClk(264,2,(l++ >>1)& 3);                    // ����ָʾ
 8010c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c56:	1c5a      	adds	r2, r3, #1
 8010c58:	647a      	str	r2, [r7, #68]	; 0x44
 8010c5a:	105b      	asrs	r3, r3, #1
 8010c5c:	b2db      	uxtb	r3, r3
 8010c5e:	f003 0303 	and.w	r3, r3, #3
 8010c62:	b2db      	uxtb	r3, r3
 8010c64:	461a      	mov	r2, r3
 8010c66:	2102      	movs	r1, #2
 8010c68:	f44f 7084 	mov.w	r0, #264	; 0x108
 8010c6c:	f7fe ff2e 	bl	800facc <PrintClk>
      k = 0;
 8010c70:	2300      	movs	r3, #0
 8010c72:	64bb      	str	r3, [r7, #72]	; 0x48
    }
    F_Buff[k++] = 0x0d;
 8010c74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c76:	1c5a      	adds	r2, r3, #1
 8010c78:	64ba      	str	r2, [r7, #72]	; 0x48
 8010c7a:	4a0f      	ldr	r2, [pc, #60]	; (8010cb8 <Save_Csv+0x2e0>)
 8010c7c:	210d      	movs	r1, #13
 8010c7e:	54d1      	strb	r1, [r2, r3]
    if(k >= length){
 8010c80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c84:	429a      	cmp	r2, r3
 8010c86:	db3b      	blt.n	8010d00 <Save_Csv+0x328>
      if(ProgFileSec(F_Buff, pCluster)!= OK) return FILE_RW_ERR; // д������
 8010c88:	f107 0314 	add.w	r3, r7, #20
 8010c8c:	4619      	mov	r1, r3
 8010c8e:	480a      	ldr	r0, [pc, #40]	; (8010cb8 <Save_Csv+0x2e0>)
 8010c90:	f7fe fd62 	bl	800f758 <ProgFileSec>
 8010c94:	4603      	mov	r3, r0
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d022      	beq.n	8010ce0 <Save_Csv+0x308>
 8010c9a:	2303      	movs	r3, #3
 8010c9c:	e0b8      	b.n	8010e10 <Save_Csv+0x438>
 8010c9e:	bf00      	nop
 8010ca0:	2000057c 	.word	0x2000057c
 8010ca4:	2000688e 	.word	0x2000688e
 8010ca8:	2000286a 	.word	0x2000286a
 8010cac:	20002852 	.word	0x20002852
 8010cb0:	20000560 	.word	0x20000560
 8010cb4:	08000220 	.word	0x08000220
 8010cb8:	200017e0 	.word	0x200017e0
 8010cbc:	20000298 	.word	0x20000298
 8010cc0:	200001d0 	.word	0x200001d0
 8010cc4:	08000244 	.word	0x08000244
 8010cc8:	200017e5 	.word	0x200017e5
 8010ccc:	200017e8 	.word	0x200017e8
 8010cd0:	08001da8 	.word	0x08001da8
 8010cd4:	08001cd4 	.word	0x08001cd4
 8010cd8:	08000248 	.word	0x08000248
 8010cdc:	20002878 	.word	0x20002878
      PrintClk(264,2,(l++ >>1)& 3);                    // ����ָʾ
 8010ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ce2:	1c5a      	adds	r2, r3, #1
 8010ce4:	647a      	str	r2, [r7, #68]	; 0x44
 8010ce6:	105b      	asrs	r3, r3, #1
 8010ce8:	b2db      	uxtb	r3, r3
 8010cea:	f003 0303 	and.w	r3, r3, #3
 8010cee:	b2db      	uxtb	r3, r3
 8010cf0:	461a      	mov	r2, r3
 8010cf2:	2102      	movs	r1, #2
 8010cf4:	f44f 7084 	mov.w	r0, #264	; 0x108
 8010cf8:	f7fe fee8 	bl	800facc <PrintClk>
      k = 0;
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	64bb      	str	r3, [r7, #72]	; 0x48
    }
    F_Buff[k++] = 0x0a;
 8010d00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d02:	1c5a      	adds	r2, r3, #1
 8010d04:	64ba      	str	r2, [r7, #72]	; 0x48
 8010d06:	4a44      	ldr	r2, [pc, #272]	; (8010e18 <Save_Csv+0x440>)
 8010d08:	210a      	movs	r1, #10
 8010d0a:	54d1      	strb	r1, [r2, r3]
    if(k >= length){
 8010d0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d10:	429a      	cmp	r2, r3
 8010d12:	db1a      	blt.n	8010d4a <Save_Csv+0x372>
      if(ProgFileSec(F_Buff, pCluster)!= OK) return FILE_RW_ERR; // д������
 8010d14:	f107 0314 	add.w	r3, r7, #20
 8010d18:	4619      	mov	r1, r3
 8010d1a:	483f      	ldr	r0, [pc, #252]	; (8010e18 <Save_Csv+0x440>)
 8010d1c:	f7fe fd1c 	bl	800f758 <ProgFileSec>
 8010d20:	4603      	mov	r3, r0
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d001      	beq.n	8010d2a <Save_Csv+0x352>
 8010d26:	2303      	movs	r3, #3
 8010d28:	e072      	b.n	8010e10 <Save_Csv+0x438>
      PrintClk(264,2,(l++ >>1)& 3);                    // ����ָʾ
 8010d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d2c:	1c5a      	adds	r2, r3, #1
 8010d2e:	647a      	str	r2, [r7, #68]	; 0x44
 8010d30:	105b      	asrs	r3, r3, #1
 8010d32:	b2db      	uxtb	r3, r3
 8010d34:	f003 0303 	and.w	r3, r3, #3
 8010d38:	b2db      	uxtb	r3, r3
 8010d3a:	461a      	mov	r2, r3
 8010d3c:	2102      	movs	r1, #2
 8010d3e:	f44f 7084 	mov.w	r0, #264	; 0x108
 8010d42:	f7fe fec3 	bl	800facc <PrintClk>
      k = 0;
 8010d46:	2300      	movs	r3, #0
 8010d48:	64bb      	str	r3, [r7, #72]	; 0x48
  for(i=0; i<DEPTH[List[SMPL_DPTH].Val]; i++){
 8010d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d4c:	3301      	adds	r3, #1
 8010d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010d50:	4b32      	ldr	r3, [pc, #200]	; (8010e1c <Save_Csv+0x444>)
 8010d52:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010d56:	461a      	mov	r2, r3
 8010d58:	4b31      	ldr	r3, [pc, #196]	; (8010e20 <Save_Csv+0x448>)
 8010d5a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010d5e:	461a      	mov	r2, r3
 8010d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d62:	4293      	cmp	r3, r2
 8010d64:	f6ff aef5 	blt.w	8010b52 <Save_Csv+0x17a>
    }
  }
  if(k != 0){
 8010d68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d030      	beq.n	8010dd0 <Save_Csv+0x3f8>
    F_Buff[k++]=0x0d;
 8010d6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d70:	1c5a      	adds	r2, r3, #1
 8010d72:	64ba      	str	r2, [r7, #72]	; 0x48
 8010d74:	4a28      	ldr	r2, [pc, #160]	; (8010e18 <Save_Csv+0x440>)
 8010d76:	210d      	movs	r1, #13
 8010d78:	54d1      	strb	r1, [r2, r3]
    F_Buff[k++]=0x0a;
 8010d7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d7c:	1c5a      	adds	r2, r3, #1
 8010d7e:	64ba      	str	r2, [r7, #72]	; 0x48
 8010d80:	4a25      	ldr	r2, [pc, #148]	; (8010e18 <Save_Csv+0x440>)
 8010d82:	210a      	movs	r1, #10
 8010d84:	54d1      	strb	r1, [r2, r3]
    memset(&F_Buff[k],32,(4096-k)); //32->�ո�
 8010d86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d88:	4a23      	ldr	r2, [pc, #140]	; (8010e18 <Save_Csv+0x440>)
 8010d8a:	1898      	adds	r0, r3, r2
 8010d8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d8e:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8010d92:	461a      	mov	r2, r3
 8010d94:	2120      	movs	r1, #32
 8010d96:	f012 f967 	bl	8023068 <memset>
    k=0;
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	64bb      	str	r3, [r7, #72]	; 0x48
    if(ProgFileSec(F_Buff, pCluster)!= OK) return FILE_RW_ERR; // д������
 8010d9e:	f107 0314 	add.w	r3, r7, #20
 8010da2:	4619      	mov	r1, r3
 8010da4:	481c      	ldr	r0, [pc, #112]	; (8010e18 <Save_Csv+0x440>)
 8010da6:	f7fe fcd7 	bl	800f758 <ProgFileSec>
 8010daa:	4603      	mov	r3, r0
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d001      	beq.n	8010db4 <Save_Csv+0x3dc>
 8010db0:	2303      	movs	r3, #3
 8010db2:	e02d      	b.n	8010e10 <Save_Csv+0x438>
    PrintClk(264,2,(l++ >>1)& 3);                     // ����ָʾ
 8010db4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010db6:	1c5a      	adds	r2, r3, #1
 8010db8:	647a      	str	r2, [r7, #68]	; 0x44
 8010dba:	105b      	asrs	r3, r3, #1
 8010dbc:	b2db      	uxtb	r3, r3
 8010dbe:	f003 0303 	and.w	r3, r3, #3
 8010dc2:	b2db      	uxtb	r3, r3
 8010dc4:	461a      	mov	r2, r3
 8010dc6:	2102      	movs	r1, #2
 8010dc8:	f44f 7084 	mov.w	r0, #264	; 0x108
 8010dcc:	f7fe fe7e 	bl	800facc <PrintClk>
  }
  if(CloseFile(F_Buff, l*length, pCluster, pDirAddr)!= OK) return DISK_RW_ERR;
 8010dd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010dd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010dd4:	fb02 f103 	mul.w	r1, r2, r3
 8010dd8:	f107 0310 	add.w	r3, r7, #16
 8010ddc:	f107 0214 	add.w	r2, r7, #20
 8010de0:	480d      	ldr	r0, [pc, #52]	; (8010e18 <Save_Csv+0x440>)
 8010de2:	f7fe fd2d 	bl	800f840 <CloseFile>
 8010de6:	4603      	mov	r3, r0
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d001      	beq.n	8010df0 <Save_Csv+0x418>
 8010dec:	2304      	movs	r3, #4
 8010dee:	e00f      	b.n	8010e10 <Save_Csv+0x438>
  if(List[SAVE_CSV].Val<99)List[SAVE_CSV].Val++;
 8010df0:	4b0a      	ldr	r3, [pc, #40]	; (8010e1c <Save_Csv+0x444>)
 8010df2:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
 8010df6:	2b62      	cmp	r3, #98	; 0x62
 8010df8:	dc09      	bgt.n	8010e0e <Save_Csv+0x436>
 8010dfa:	4b08      	ldr	r3, [pc, #32]	; (8010e1c <Save_Csv+0x444>)
 8010dfc:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
 8010e00:	b29b      	uxth	r3, r3
 8010e02:	3301      	adds	r3, #1
 8010e04:	b29b      	uxth	r3, r3
 8010e06:	b21a      	sxth	r2, r3
 8010e08:	4b04      	ldr	r3, [pc, #16]	; (8010e1c <Save_Csv+0x444>)
 8010e0a:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
  return OK;
 8010e0e:	2300      	movs	r3, #0
}
 8010e10:	4618      	mov	r0, r3
 8010e12:	3750      	adds	r7, #80	; 0x50
 8010e14:	46bd      	mov	sp, r7
 8010e16:	bd80      	pop	{r7, pc}
 8010e18:	200017e0 	.word	0x200017e0
 8010e1c:	20000298 	.word	0x20000298
 8010e20:	08002270 	.word	0x08002270

08010e24 <Save_Svg>:

/*******************************************************************************
Save_Svg: ����ɼ����ݻ�����ΪBUF��ʽ    ���룺�ļ����     ����ֵ��0x00=�ɹ�
*******************************************************************************/
char Save_Svg(short FileNo)
{
 8010e24:	b580      	push	{r7, lr}
 8010e26:	b092      	sub	sp, #72	; 0x48
 8010e28:	af00      	add	r7, sp, #0
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	80fb      	strh	r3, [r7, #6]
  char pFileName[12]="DATA    SVG";
 8010e2e:	4abb      	ldr	r2, [pc, #748]	; (801111c <Save_Svg+0x2f8>)
 8010e30:	f107 031c 	add.w	r3, r7, #28
 8010e34:	ca07      	ldmia	r2, {r0, r1, r2}
 8010e36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  short pCluster[3];
  int pDirAddr[1];
  short track[4];
  int Rvalue = DISK_RW_ERR;
 8010e3a:	2304      	movs	r3, #4
 8010e3c:	63bb      	str	r3, [r7, #56]	; 0x38
  int l = 0;
 8010e3e:	2300      	movs	r3, #0
 8010e40:	637b      	str	r3, [r7, #52]	; 0x34
  short Buf_len = 4096;
 8010e42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010e46:	867b      	strh	r3, [r7, #50]	; 0x32
  short i,x, y;
  short temp;
  char  *str;
  short Posi1 = 0;
 8010e48:	2300      	movs	r3, #0
 8010e4a:	863b      	strh	r3, [r7, #48]	; 0x30
  int Ak = (KgA[KindA+(StateA?1:0)]*4)/GK[GainA];
 8010e4c:	4bb4      	ldr	r3, [pc, #720]	; (8011120 <Save_Svg+0x2fc>)
 8010e4e:	681a      	ldr	r2, [r3, #0]
 8010e50:	4bb4      	ldr	r3, [pc, #720]	; (8011124 <Save_Svg+0x300>)
 8010e52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010e56:	4619      	mov	r1, r3
 8010e58:	4bb3      	ldr	r3, [pc, #716]	; (8011128 <Save_Svg+0x304>)
 8010e5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	bf14      	ite	ne
 8010e62:	2301      	movne	r3, #1
 8010e64:	2300      	moveq	r3, #0
 8010e66:	b2db      	uxtb	r3, r3
 8010e68:	440b      	add	r3, r1
 8010e6a:	005b      	lsls	r3, r3, #1
 8010e6c:	4413      	add	r3, r2
 8010e6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010e72:	009b      	lsls	r3, r3, #2
 8010e74:	4aad      	ldr	r2, [pc, #692]	; (801112c <Save_Svg+0x308>)
 8010e76:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010e7a:	4611      	mov	r1, r2
 8010e7c:	4aac      	ldr	r2, [pc, #688]	; (8011130 <Save_Svg+0x30c>)
 8010e7e:	5c52      	ldrb	r2, [r2, r1]
 8010e80:	fb93 f3f2 	sdiv	r3, r3, r2
 8010e84:	62fb      	str	r3, [r7, #44]	; 0x2c


  Svg_Cnt = 0;
 8010e86:	4bab      	ldr	r3, [pc, #684]	; (8011134 <Save_Svg+0x310>)
 8010e88:	2200      	movs	r2, #0
 8010e8a:	601a      	str	r2, [r3, #0]
  Addr = 0, Length = 0;
 8010e8c:	4baa      	ldr	r3, [pc, #680]	; (8011138 <Save_Svg+0x314>)
 8010e8e:	2200      	movs	r2, #0
 8010e90:	801a      	strh	r2, [r3, #0]
 8010e92:	4baa      	ldr	r3, [pc, #680]	; (801113c <Save_Svg+0x318>)
 8010e94:	2200      	movs	r2, #0
 8010e96:	801a      	strh	r2, [r3, #0]
  str = (char*)&Data;
 8010e98:	4ba9      	ldr	r3, [pc, #676]	; (8011140 <Save_Svg+0x31c>)
 8010e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  //__USB_Port(DISABLE);
  memset(Data,0,310);
 8010e9c:	f44f 729b 	mov.w	r2, #310	; 0x136
 8010ea0:	2100      	movs	r1, #0
 8010ea2:	48a7      	ldr	r0, [pc, #668]	; (8011140 <Save_Svg+0x31c>)
 8010ea4:	f012 f8e0 	bl	8023068 <memset>
  memset(F_Buff,0,Buf_len);
 8010ea8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8010eac:	461a      	mov	r2, r3
 8010eae:	2100      	movs	r1, #0
 8010eb0:	48a4      	ldr	r0, [pc, #656]	; (8011144 <Save_Svg+0x320>)
 8010eb2:	f012 f8d9 	bl	8023068 <memset>
  Make_Filename(FileNo, pFileName);
 8010eb6:	f107 021c 	add.w	r2, r7, #28
 8010eba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010ebe:	4611      	mov	r1, r2
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	f7fe ffbb 	bl	800fe3c <Make_Filename>
  if(OpenFileWr(F_Buff, pFileName, pCluster, pDirAddr)!=OK) return Rvalue;
 8010ec6:	f107 0310 	add.w	r3, r7, #16
 8010eca:	f107 0214 	add.w	r2, r7, #20
 8010ece:	f107 011c 	add.w	r1, r7, #28
 8010ed2:	489c      	ldr	r0, [pc, #624]	; (8011144 <Save_Svg+0x320>)
 8010ed4:	f7fe fd18 	bl	800f908 <OpenFileWr>
 8010ed8:	4603      	mov	r3, r0
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d002      	beq.n	8010ee4 <Save_Svg+0xc0>
 8010ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ee0:	b2db      	uxtb	r3, r3
 8010ee2:	e3d5      	b.n	8011690 <Save_Svg+0x86c>
  //SVG �ĵ���ĳЩ��������SVG ,ָ���ⲿ��DTD
  str = "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n";
 8010ee4:	4b98      	ldr	r3, [pc, #608]	; (8011148 <Save_Svg+0x324>)
 8010ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010ee8:	f107 0314 	add.w	r3, r7, #20
 8010eec:	4619      	mov	r1, r3
 8010eee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010ef0:	f7fe ff0a 	bl	800fd08 <WriteStr>
  str = "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.0//EN\" \"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\">\n";
 8010ef4:	4b95      	ldr	r3, [pc, #596]	; (801114c <Save_Svg+0x328>)
 8010ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010ef8:	f107 0314 	add.w	r3, r7, #20
 8010efc:	4619      	mov	r1, r3
 8010efe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f00:	f7fe ff02 	bl	800fd08 <WriteStr>
  str = "<svg width=\"";
 8010f04:	4b92      	ldr	r3, [pc, #584]	; (8011150 <Save_Svg+0x32c>)
 8010f06:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010f08:	f107 0314 	add.w	r3, r7, #20
 8010f0c:	4619      	mov	r1, r3
 8010f0e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f10:	f7fe fefa 	bl	800fd08 <WriteStr>
  WriteVar(DEPTH[List[SMPL_DPTH].Val], pCluster);
 8010f14:	4b8f      	ldr	r3, [pc, #572]	; (8011154 <Save_Svg+0x330>)
 8010f16:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010f1a:	461a      	mov	r2, r3
 8010f1c:	4b8e      	ldr	r3, [pc, #568]	; (8011158 <Save_Svg+0x334>)
 8010f1e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010f22:	f107 0214 	add.w	r2, r7, #20
 8010f26:	4611      	mov	r1, r2
 8010f28:	4618      	mov	r0, r3
 8010f2a:	f7fe fe45 	bl	800fbb8 <WriteVar>
  str = "\" height=\"200\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" onload=\"init(evt)\" onmousemove=\"msMove(evt)\">\n";
 8010f2e:	4b8b      	ldr	r3, [pc, #556]	; (801115c <Save_Svg+0x338>)
 8010f30:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010f32:	f107 0314 	add.w	r3, r7, #20
 8010f36:	4619      	mov	r1, r3
 8010f38:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f3a:	f7fe fee5 	bl	800fd08 <WriteStr>

  //�������С��ɫ
  str = "<path stroke=\"none\" fill=\"black\" d=\"M0,0 H";
 8010f3e:	4b88      	ldr	r3, [pc, #544]	; (8011160 <Save_Svg+0x33c>)
 8010f40:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010f42:	f107 0314 	add.w	r3, r7, #20
 8010f46:	4619      	mov	r1, r3
 8010f48:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f4a:	f7fe fedd 	bl	800fd08 <WriteStr>
  WriteVar(DEPTH[List[SMPL_DPTH].Val], pCluster);
 8010f4e:	4b81      	ldr	r3, [pc, #516]	; (8011154 <Save_Svg+0x330>)
 8010f50:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010f54:	461a      	mov	r2, r3
 8010f56:	4b80      	ldr	r3, [pc, #512]	; (8011158 <Save_Svg+0x334>)
 8010f58:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010f5c:	f107 0214 	add.w	r2, r7, #20
 8010f60:	4611      	mov	r1, r2
 8010f62:	4618      	mov	r0, r3
 8010f64:	f7fe fe28 	bl	800fbb8 <WriteVar>
  str = " V200 H0 V0\"/>\n";
 8010f68:	4b7e      	ldr	r3, [pc, #504]	; (8011164 <Save_Svg+0x340>)
 8010f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010f6c:	f107 0314 	add.w	r3, r7, #20
 8010f70:	4619      	mov	r1, r3
 8010f72:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f74:	f7fe fec8 	bl	800fd08 <WriteStr>
  //��ǰ���ڱ���
  str = "<path stroke=\"none\" fill=\"#400040\" d=\"M";  //��ɫ
 8010f78:	4b7b      	ldr	r3, [pc, #492]	; (8011168 <Save_Svg+0x344>)
 8010f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010f7c:	f107 0314 	add.w	r3, r7, #20
 8010f80:	4619      	mov	r1, r3
 8010f82:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f84:	f7fe fec0 	bl	800fd08 <WriteStr>
  WriteVar(List[VIEWPOSI].Val, pCluster);
 8010f88:	4b72      	ldr	r3, [pc, #456]	; (8011154 <Save_Svg+0x330>)
 8010f8a:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8010f8e:	f107 0214 	add.w	r2, r7, #20
 8010f92:	4611      	mov	r1, r2
 8010f94:	4618      	mov	r0, r3
 8010f96:	f7fe fe0f 	bl	800fbb8 <WriteVar>
  str = ",0 H";
 8010f9a:	4b74      	ldr	r3, [pc, #464]	; (801116c <Save_Svg+0x348>)
 8010f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010f9e:	f107 0314 	add.w	r3, r7, #20
 8010fa2:	4619      	mov	r1, r3
 8010fa4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010fa6:	f7fe feaf 	bl	800fd08 <WriteStr>
  WriteVar(List[VIEWPOSI].Val, pCluster);
 8010faa:	4b6a      	ldr	r3, [pc, #424]	; (8011154 <Save_Svg+0x330>)
 8010fac:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8010fb0:	f107 0214 	add.w	r2, r7, #20
 8010fb4:	4611      	mov	r1, r2
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	f7fe fdfe 	bl	800fbb8 <WriteVar>
  str = " V200 H";
 8010fbc:	4b6c      	ldr	r3, [pc, #432]	; (8011170 <Save_Svg+0x34c>)
 8010fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010fc0:	f107 0314 	add.w	r3, r7, #20
 8010fc4:	4619      	mov	r1, r3
 8010fc6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010fc8:	f7fe fe9e 	bl	800fd08 <WriteStr>
  WriteVar(List[VIEWPOSI].Val+300, pCluster);
 8010fcc:	4b61      	ldr	r3, [pc, #388]	; (8011154 <Save_Svg+0x330>)
 8010fce:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8010fd2:	b29b      	uxth	r3, r3
 8010fd4:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8010fd8:	b29b      	uxth	r3, r3
 8010fda:	b21b      	sxth	r3, r3
 8010fdc:	f107 0214 	add.w	r2, r7, #20
 8010fe0:	4611      	mov	r1, r2
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	f7fe fde8 	bl	800fbb8 <WriteVar>
  str = "  V0\"/>\n";
 8010fe8:	4b62      	ldr	r3, [pc, #392]	; (8011174 <Save_Svg+0x350>)
 8010fea:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010fec:	f107 0314 	add.w	r3, r7, #20
 8010ff0:	4619      	mov	r1, r3
 8010ff2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010ff4:	f7fe fe88 	bl	800fd08 <WriteStr>
  //��������
 for (y=0; y<=200; y+=25){
 8010ff8:	2300      	movs	r3, #0
 8010ffa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010ffe:	e032      	b.n	8011066 <Save_Svg+0x242>
    //<path stroke="#404040" d="M0,0 H4096"/>
    str = "<path stroke=\"#404040\" d=\"M0,";
 8011000:	4b5d      	ldr	r3, [pc, #372]	; (8011178 <Save_Svg+0x354>)
 8011002:	63fb      	str	r3, [r7, #60]	; 0x3c
    WriteStr(str, pCluster);
 8011004:	f107 0314 	add.w	r3, r7, #20
 8011008:	4619      	mov	r1, r3
 801100a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801100c:	f7fe fe7c 	bl	800fd08 <WriteStr>
    WriteVar(y, pCluster);
 8011010:	f107 0214 	add.w	r2, r7, #20
 8011014:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8011018:	4611      	mov	r1, r2
 801101a:	4618      	mov	r0, r3
 801101c:	f7fe fdcc 	bl	800fbb8 <WriteVar>
    str = " H";
 8011020:	4b56      	ldr	r3, [pc, #344]	; (801117c <Save_Svg+0x358>)
 8011022:	63fb      	str	r3, [r7, #60]	; 0x3c
    WriteStr(str, pCluster);
 8011024:	f107 0314 	add.w	r3, r7, #20
 8011028:	4619      	mov	r1, r3
 801102a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801102c:	f7fe fe6c 	bl	800fd08 <WriteStr>
    WriteVar(DEPTH[List[SMPL_DPTH].Val], pCluster);
 8011030:	4b48      	ldr	r3, [pc, #288]	; (8011154 <Save_Svg+0x330>)
 8011032:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8011036:	461a      	mov	r2, r3
 8011038:	4b47      	ldr	r3, [pc, #284]	; (8011158 <Save_Svg+0x334>)
 801103a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801103e:	f107 0214 	add.w	r2, r7, #20
 8011042:	4611      	mov	r1, r2
 8011044:	4618      	mov	r0, r3
 8011046:	f7fe fdb7 	bl	800fbb8 <WriteVar>
    str = "\"/>\n";
 801104a:	4b4d      	ldr	r3, [pc, #308]	; (8011180 <Save_Svg+0x35c>)
 801104c:	63fb      	str	r3, [r7, #60]	; 0x3c
    WriteStr(str, pCluster);
 801104e:	f107 0314 	add.w	r3, r7, #20
 8011052:	4619      	mov	r1, r3
 8011054:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011056:	f7fe fe57 	bl	800fd08 <WriteStr>
 for (y=0; y<=200; y+=25){
 801105a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801105e:	3319      	adds	r3, #25
 8011060:	b29b      	uxth	r3, r3
 8011062:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011066:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 801106a:	2bc8      	cmp	r3, #200	; 0xc8
 801106c:	ddc8      	ble.n	8011000 <Save_Svg+0x1dc>
  }
  for (x=0; x<=DEPTH[List[SMPL_DPTH].Val]; x+=25){
 801106e:	2300      	movs	r3, #0
 8011070:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8011074:	e01d      	b.n	80110b2 <Save_Svg+0x28e>
    //<path stroke="#404040" d="M0,0 V256"/>
    str = "<path stroke=\"#404040\" d=\"M";
 8011076:	4b43      	ldr	r3, [pc, #268]	; (8011184 <Save_Svg+0x360>)
 8011078:	63fb      	str	r3, [r7, #60]	; 0x3c
    WriteStr(str, pCluster);
 801107a:	f107 0314 	add.w	r3, r7, #20
 801107e:	4619      	mov	r1, r3
 8011080:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011082:	f7fe fe41 	bl	800fd08 <WriteStr>
    WriteVar(x, pCluster);
 8011086:	f107 0214 	add.w	r2, r7, #20
 801108a:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 801108e:	4611      	mov	r1, r2
 8011090:	4618      	mov	r0, r3
 8011092:	f7fe fd91 	bl	800fbb8 <WriteVar>
    str = ",0 V200\"/>\n";
 8011096:	4b3c      	ldr	r3, [pc, #240]	; (8011188 <Save_Svg+0x364>)
 8011098:	63fb      	str	r3, [r7, #60]	; 0x3c
    WriteStr(str, pCluster);
 801109a:	f107 0314 	add.w	r3, r7, #20
 801109e:	4619      	mov	r1, r3
 80110a0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80110a2:	f7fe fe31 	bl	800fd08 <WriteStr>
  for (x=0; x<=DEPTH[List[SMPL_DPTH].Val]; x+=25){
 80110a6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80110aa:	3319      	adds	r3, #25
 80110ac:	b29b      	uxth	r3, r3
 80110ae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80110b2:	4b28      	ldr	r3, [pc, #160]	; (8011154 <Save_Svg+0x330>)
 80110b4:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 80110b8:	461a      	mov	r2, r3
 80110ba:	4b27      	ldr	r3, [pc, #156]	; (8011158 <Save_Svg+0x334>)
 80110bc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80110c0:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 80110c4:	429a      	cmp	r2, r3
 80110c6:	ddd6      	ble.n	8011076 <Save_Svg+0x252>
  }
  //ͨ��A����
  str = "<path stroke=\"cyan\" fill=\"none\" stroke-width=\"1\" d=\"";
 80110c8:	4b30      	ldr	r3, [pc, #192]	; (801118c <Save_Svg+0x368>)
 80110ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80110cc:	f107 0314 	add.w	r3, r7, #20
 80110d0:	4619      	mov	r1, r3
 80110d2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80110d4:	f7fe fe18 	bl	800fd08 <WriteStr>
  for (i=0; i<=DEPTH[List[SMPL_DPTH].Val]; i++){
 80110d8:	2300      	movs	r3, #0
 80110da:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80110de:	e091      	b.n	8011204 <Save_Svg+0x3e0>
      temp = ((((Sampl[2+i])-2048)*Ak)>>12)+100;
 80110e0:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80110e4:	3302      	adds	r3, #2
 80110e6:	4a2a      	ldr	r2, [pc, #168]	; (8011190 <Save_Svg+0x36c>)
 80110e8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80110ec:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80110f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80110f2:	fb02 f303 	mul.w	r3, r2, r3
 80110f6:	131b      	asrs	r3, r3, #12
 80110f8:	b29b      	uxth	r3, r3
 80110fa:	3364      	adds	r3, #100	; 0x64
 80110fc:	b29b      	uxth	r3, r3
 80110fe:	857b      	strh	r3, [r7, #42]	; 0x2a
    if(temp > 0){
 8011100:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8011104:	2b00      	cmp	r3, #0
 8011106:	dd45      	ble.n	8011194 <Save_Svg+0x370>
      if(temp > 200)  track[0] = 199;
 8011108:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801110c:	2bc8      	cmp	r3, #200	; 0xc8
 801110e:	dd02      	ble.n	8011116 <Save_Svg+0x2f2>
 8011110:	23c7      	movs	r3, #199	; 0xc7
 8011112:	813b      	strh	r3, [r7, #8]
 8011114:	e040      	b.n	8011198 <Save_Svg+0x374>
      else            track[0] = temp;
 8011116:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011118:	813b      	strh	r3, [r7, #8]
 801111a:	e03d      	b.n	8011198 <Save_Svg+0x374>
 801111c:	0800022c 	.word	0x0800022c
 8011120:	2000057c 	.word	0x2000057c
 8011124:	2000688e 	.word	0x2000688e
 8011128:	2000286a 	.word	0x2000286a
 801112c:	20002852 	.word	0x20002852
 8011130:	20000560 	.word	0x20000560
 8011134:	2000079c 	.word	0x2000079c
 8011138:	20000796 	.word	0x20000796
 801113c:	20000798 	.word	0x20000798
 8011140:	20000008 	.word	0x20000008
 8011144:	200017e0 	.word	0x200017e0
 8011148:	0800024c 	.word	0x0800024c
 801114c:	0800027c 	.word	0x0800027c
 8011150:	080002e8 	.word	0x080002e8
 8011154:	20000298 	.word	0x20000298
 8011158:	08002270 	.word	0x08002270
 801115c:	080002f8 	.word	0x080002f8
 8011160:	08000384 	.word	0x08000384
 8011164:	080003b0 	.word	0x080003b0
 8011168:	080003c0 	.word	0x080003c0
 801116c:	080003e8 	.word	0x080003e8
 8011170:	080003f0 	.word	0x080003f0
 8011174:	080003f8 	.word	0x080003f8
 8011178:	08000404 	.word	0x08000404
 801117c:	08000424 	.word	0x08000424
 8011180:	08000428 	.word	0x08000428
 8011184:	08000430 	.word	0x08000430
 8011188:	0800044c 	.word	0x0800044c
 801118c:	08000458 	.word	0x08000458
 8011190:	20002878 	.word	0x20002878
    } else            track[0] = 0;
 8011194:	2300      	movs	r3, #0
 8011196:	813b      	strh	r3, [r7, #8]
    track[0] =  200- track[0];
 8011198:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801119c:	b29b      	uxth	r3, r3
 801119e:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 80111a2:	b29b      	uxth	r3, r3
 80111a4:	b21b      	sxth	r3, r3
 80111a6:	813b      	strh	r3, [r7, #8]
    if(i==0)str = "M";
 80111a8:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d102      	bne.n	80111b6 <Save_Svg+0x392>
 80111b0:	4b3b      	ldr	r3, [pc, #236]	; (80112a0 <Save_Svg+0x47c>)
 80111b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111b4:	e001      	b.n	80111ba <Save_Svg+0x396>
    else    str = " L";
 80111b6:	4b3b      	ldr	r3, [pc, #236]	; (80112a4 <Save_Svg+0x480>)
 80111b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    WriteStr(str, pCluster);
 80111ba:	f107 0314 	add.w	r3, r7, #20
 80111be:	4619      	mov	r1, r3
 80111c0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80111c2:	f7fe fda1 	bl	800fd08 <WriteStr>
    WriteVar(i, pCluster);
 80111c6:	f107 0214 	add.w	r2, r7, #20
 80111ca:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80111ce:	4611      	mov	r1, r2
 80111d0:	4618      	mov	r0, r3
 80111d2:	f7fe fcf1 	bl	800fbb8 <WriteVar>
    str = ",";
 80111d6:	4b34      	ldr	r3, [pc, #208]	; (80112a8 <Save_Svg+0x484>)
 80111d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    WriteStr(str, pCluster);
 80111da:	f107 0314 	add.w	r3, r7, #20
 80111de:	4619      	mov	r1, r3
 80111e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80111e2:	f7fe fd91 	bl	800fd08 <WriteStr>
    WriteVar(track[0], pCluster);
 80111e6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80111ea:	f107 0214 	add.w	r2, r7, #20
 80111ee:	4611      	mov	r1, r2
 80111f0:	4618      	mov	r0, r3
 80111f2:	f7fe fce1 	bl	800fbb8 <WriteVar>
  for (i=0; i<=DEPTH[List[SMPL_DPTH].Val]; i++){
 80111f6:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80111fa:	b29b      	uxth	r3, r3
 80111fc:	3301      	adds	r3, #1
 80111fe:	b29b      	uxth	r3, r3
 8011200:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8011204:	4b29      	ldr	r3, [pc, #164]	; (80112ac <Save_Svg+0x488>)
 8011206:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 801120a:	461a      	mov	r2, r3
 801120c:	4b28      	ldr	r3, [pc, #160]	; (80112b0 <Save_Svg+0x48c>)
 801120e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8011212:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8011216:	429a      	cmp	r2, r3
 8011218:	f77f af62 	ble.w	80110e0 <Save_Svg+0x2bc>
  }
  str = "\"/>\n";
 801121c:	4b25      	ldr	r3, [pc, #148]	; (80112b4 <Save_Svg+0x490>)
 801121e:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8011220:	f107 0314 	add.w	r3, r7, #20
 8011224:	4619      	mov	r1, r3
 8011226:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011228:	f7fe fd6e 	bl	800fd08 <WriteStr>

  //�Ҷ˵�λ��ʱ������
  str = "<text font-family=\"Arial\" x=\"638\" y=\"170\" fill=\"cyan\" font-size=\"18\" text-anchor=\"end\" id=\"CH1s\">CH1: ";
 801122c:	4b22      	ldr	r3, [pc, #136]	; (80112b8 <Save_Svg+0x494>)
 801122e:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8011230:	f107 0314 	add.w	r3, r7, #20
 8011234:	4619      	mov	r1, r3
 8011236:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011238:	f7fe fd66 	bl	800fd08 <WriteStr>
  if(List[PROBEATT].Val)str = (char*)Vol_10X[List[Y_RANGES].Val];
 801123c:	4b1b      	ldr	r3, [pc, #108]	; (80112ac <Save_Svg+0x488>)
 801123e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d007      	beq.n	8011256 <Save_Svg+0x432>
 8011246:	4b19      	ldr	r3, [pc, #100]	; (80112ac <Save_Svg+0x488>)
 8011248:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801124c:	00db      	lsls	r3, r3, #3
 801124e:	4a1b      	ldr	r2, [pc, #108]	; (80112bc <Save_Svg+0x498>)
 8011250:	4413      	add	r3, r2
 8011252:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011254:	e006      	b.n	8011264 <Save_Svg+0x440>
  else                         str = (char*)Vol_Str[List[Y_RANGES].Val];
 8011256:	4b15      	ldr	r3, [pc, #84]	; (80112ac <Save_Svg+0x488>)
 8011258:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801125c:	00db      	lsls	r3, r3, #3
 801125e:	4a18      	ldr	r2, [pc, #96]	; (80112c0 <Save_Svg+0x49c>)
 8011260:	4413      	add	r3, r2
 8011262:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8011264:	f107 0314 	add.w	r3, r7, #20
 8011268:	4619      	mov	r1, r3
 801126a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801126c:	f7fe fd4c 	bl	800fd08 <WriteStr>
  str = "/div ";
 8011270:	4b14      	ldr	r3, [pc, #80]	; (80112c4 <Save_Svg+0x4a0>)
 8011272:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8011274:	f107 0314 	add.w	r3, r7, #20
 8011278:	4619      	mov	r1, r3
 801127a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801127c:	f7fe fd44 	bl	800fd08 <WriteStr>
  str = "(";
 8011280:	4b11      	ldr	r3, [pc, #68]	; (80112c8 <Save_Svg+0x4a4>)
 8011282:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8011284:	f107 0314 	add.w	r3, r7, #20
 8011288:	4619      	mov	r1, r3
 801128a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801128c:	f7fe fd3c 	bl	800fd08 <WriteStr>
  if(List[PROBEATT].Val)str = "X10";        //X10
 8011290:	4b06      	ldr	r3, [pc, #24]	; (80112ac <Save_Svg+0x488>)
 8011292:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d01a      	beq.n	80112d0 <Save_Svg+0x4ac>
 801129a:	4b0c      	ldr	r3, [pc, #48]	; (80112cc <Save_Svg+0x4a8>)
 801129c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801129e:	e019      	b.n	80112d4 <Save_Svg+0x4b0>
 80112a0:	08000490 	.word	0x08000490
 80112a4:	08000494 	.word	0x08000494
 80112a8:	08000498 	.word	0x08000498
 80112ac:	20000298 	.word	0x20000298
 80112b0:	08002270 	.word	0x08002270
 80112b4:	08000428 	.word	0x08000428
 80112b8:	0800049c 	.word	0x0800049c
 80112bc:	080019fc 	.word	0x080019fc
 80112c0:	080019ac 	.word	0x080019ac
 80112c4:	08000504 	.word	0x08000504
 80112c8:	0800050c 	.word	0x0800050c
 80112cc:	08000510 	.word	0x08000510
  else                         str = "X1";  //X1
 80112d0:	4bb1      	ldr	r3, [pc, #708]	; (8011598 <Save_Svg+0x774>)
 80112d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80112d4:	f107 0314 	add.w	r3, r7, #20
 80112d8:	4619      	mov	r1, r3
 80112da:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80112dc:	f7fe fd14 	bl	800fd08 <WriteStr>
  str = ") ";
 80112e0:	4bae      	ldr	r3, [pc, #696]	; (801159c <Save_Svg+0x778>)
 80112e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80112e4:	f107 0314 	add.w	r3, r7, #20
 80112e8:	4619      	mov	r1, r3
 80112ea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80112ec:	f7fe fd0c 	bl	800fd08 <WriteStr>
  str = (char*)TimeBase_Str[List[TIM_BASE].Val]; //Timebase
 80112f0:	4bab      	ldr	r3, [pc, #684]	; (80115a0 <Save_Svg+0x77c>)
 80112f2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80112f6:	00db      	lsls	r3, r3, #3
 80112f8:	4aaa      	ldr	r2, [pc, #680]	; (80115a4 <Save_Svg+0x780>)
 80112fa:	4413      	add	r3, r2
 80112fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80112fe:	f107 0314 	add.w	r3, r7, #20
 8011302:	4619      	mov	r1, r3
 8011304:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011306:	f7fe fcff 	bl	800fd08 <WriteStr>
  str = "/div</text>\n";
 801130a:	4ba7      	ldr	r3, [pc, #668]	; (80115a8 <Save_Svg+0x784>)
 801130c:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801130e:	f107 0314 	add.w	r3, r7, #20
 8011312:	4619      	mov	r1, r3
 8011314:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011316:	f7fe fcf7 	bl	800fd08 <WriteStr>
  str = "<text font-family=\"Arial\" x=\"2\" y=\"170\" fill=\"cyan\" font-size=\"18\" text-anchor=\"start\" id=\"CH1\"> </text>\n";
 801131a:	4ba4      	ldr	r3, [pc, #656]	; (80115ac <Save_Svg+0x788>)
 801131c:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801131e:	f107 0314 	add.w	r3, r7, #20
 8011322:	4619      	mov	r1, r3
 8011324:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011326:	f7fe fcef 	bl	800fd08 <WriteStr>
 //===============================
  //����
  Posi1 = 199-List[V0_POSI].Val;
 801132a:	4b9d      	ldr	r3, [pc, #628]	; (80115a0 <Save_Svg+0x77c>)
 801132c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8011330:	b29b      	uxth	r3, r3
 8011332:	f1c3 03c7 	rsb	r3, r3, #199	; 0xc7
 8011336:	b29b      	uxth	r3, r3
 8011338:	863b      	strh	r3, [r7, #48]	; 0x30
  //===============================
  str = "<script type=\"text/ecmascript\"><![CDATA[\n";
 801133a:	4b9d      	ldr	r3, [pc, #628]	; (80115b0 <Save_Svg+0x78c>)
 801133c:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801133e:	f107 0314 	add.w	r3, r7, #20
 8011342:	4619      	mov	r1, r3
 8011344:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011346:	f7fe fcdf 	bl	800fd08 <WriteStr>
  str = "function init(evt) { if ( window.svgDocument == null ) svgDocument = evt.target.ownerDocument; }\n";
 801134a:	4b9a      	ldr	r3, [pc, #616]	; (80115b4 <Save_Svg+0x790>)
 801134c:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801134e:	f107 0314 	add.w	r3, r7, #20
 8011352:	4619      	mov	r1, r3
 8011354:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011356:	f7fe fcd7 	bl	800fd08 <WriteStr>
  str = "function fmtT(val, div) {\n";
 801135a:	4b97      	ldr	r3, [pc, #604]	; (80115b8 <Save_Svg+0x794>)
 801135c:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801135e:	f107 0314 	add.w	r3, r7, #20
 8011362:	4619      	mov	r1, r3
 8011364:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011366:	f7fe fccf 	bl	800fd08 <WriteStr>
  str = "if (div > 10000) return Math.floor(val*div/25/1000) + \" ms\";\n";
 801136a:	4b94      	ldr	r3, [pc, #592]	; (80115bc <Save_Svg+0x798>)
 801136c:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801136e:	f107 0314 	add.w	r3, r7, #20
 8011372:	4619      	mov	r1, r3
 8011374:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011376:	f7fe fcc7 	bl	800fd08 <WriteStr>
  str = "if (div > 250) return Math.floor(val*div/25)/1000 + \" ms\";\n";
 801137a:	4b91      	ldr	r3, [pc, #580]	; (80115c0 <Save_Svg+0x79c>)
 801137c:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801137e:	f107 0314 	add.w	r3, r7, #20
 8011382:	4619      	mov	r1, r3
 8011384:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011386:	f7fe fcbf 	bl	800fd08 <WriteStr>
  str = "return Math.floor(val*div*1000/25)/1000 + \" us\";\n";
 801138a:	4b8e      	ldr	r3, [pc, #568]	; (80115c4 <Save_Svg+0x7a0>)
 801138c:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801138e:	f107 0314 	add.w	r3, r7, #20
 8011392:	4619      	mov	r1, r3
 8011394:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011396:	f7fe fcb7 	bl	800fd08 <WriteStr>
  str = "}\n";
 801139a:	4b8b      	ldr	r3, [pc, #556]	; (80115c8 <Save_Svg+0x7a4>)
 801139c:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801139e:	f107 0314 	add.w	r3, r7, #20
 80113a2:	4619      	mov	r1, r3
 80113a4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80113a6:	f7fe fcaf 	bl	800fd08 <WriteStr>
  str = "function fmtU(val, div, shift) { return Math.floor((shift-val)*div/25) + \" mV\"; }\n";
 80113aa:	4b88      	ldr	r3, [pc, #544]	; (80115cc <Save_Svg+0x7a8>)
 80113ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80113ae:	f107 0314 	add.w	r3, r7, #20
 80113b2:	4619      	mov	r1, r3
 80113b4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80113b6:	f7fe fca7 	bl	800fd08 <WriteStr>
  str = "function msMove (evt)\n";
 80113ba:	4b85      	ldr	r3, [pc, #532]	; (80115d0 <Save_Svg+0x7ac>)
 80113bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80113be:	f107 0314 	add.w	r3, r7, #20
 80113c2:	4619      	mov	r1, r3
 80113c4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80113c6:	f7fe fc9f 	bl	800fd08 <WriteStr>
  str = "{\n";
 80113ca:	4b82      	ldr	r3, [pc, #520]	; (80115d4 <Save_Svg+0x7b0>)
 80113cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80113ce:	f107 0314 	add.w	r3, r7, #20
 80113d2:	4619      	mov	r1, r3
 80113d4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80113d6:	f7fe fc97 	bl	800fd08 <WriteStr>
  str = "var x = evt.pageX;\n";
 80113da:	4b7f      	ldr	r3, [pc, #508]	; (80115d8 <Save_Svg+0x7b4>)
 80113dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80113de:	f107 0314 	add.w	r3, r7, #20
 80113e2:	4619      	mov	r1, r3
 80113e4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80113e6:	f7fe fc8f 	bl	800fd08 <WriteStr>
  str = "var y = evt.clientY;\n";
 80113ea:	4b7c      	ldr	r3, [pc, #496]	; (80115dc <Save_Svg+0x7b8>)
 80113ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80113ee:	f107 0314 	add.w	r3, r7, #20
 80113f2:	4619      	mov	r1, r3
 80113f4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80113f6:	f7fe fc87 	bl	800fd08 <WriteStr>
  str = "if (x < 0 || y < 0 || x >= ";
 80113fa:	4b79      	ldr	r3, [pc, #484]	; (80115e0 <Save_Svg+0x7bc>)
 80113fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80113fe:	f107 0314 	add.w	r3, r7, #20
 8011402:	4619      	mov	r1, r3
 8011404:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011406:	f7fe fc7f 	bl	800fd08 <WriteStr>
  WriteVar(DEPTH[List[SMPL_DPTH].Val], pCluster);
 801140a:	4b65      	ldr	r3, [pc, #404]	; (80115a0 <Save_Svg+0x77c>)
 801140c:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8011410:	461a      	mov	r2, r3
 8011412:	4b74      	ldr	r3, [pc, #464]	; (80115e4 <Save_Svg+0x7c0>)
 8011414:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8011418:	f107 0214 	add.w	r2, r7, #20
 801141c:	4611      	mov	r1, r2
 801141e:	4618      	mov	r0, r3
 8011420:	f7fe fbca 	bl	800fbb8 <WriteVar>
  str = "|| y >= 200)\n";
 8011424:	4b70      	ldr	r3, [pc, #448]	; (80115e8 <Save_Svg+0x7c4>)
 8011426:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8011428:	f107 0314 	add.w	r3, r7, #20
 801142c:	4619      	mov	r1, r3
 801142e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011430:	f7fe fc6a 	bl	800fd08 <WriteStr>
  str = "return;\n";
 8011434:	4b6d      	ldr	r3, [pc, #436]	; (80115ec <Save_Svg+0x7c8>)
 8011436:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8011438:	f107 0314 	add.w	r3, r7, #20
 801143c:	4619      	mov	r1, r3
 801143e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011440:	f7fe fc62 	bl	800fd08 <WriteStr>
  str = "var hscroll = (document.all ? document.scrollLeft : window.pageXOffset);\n";
 8011444:	4b6a      	ldr	r3, [pc, #424]	; (80115f0 <Save_Svg+0x7cc>)
 8011446:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8011448:	f107 0314 	add.w	r3, r7, #20
 801144c:	4619      	mov	r1, r3
 801144e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011450:	f7fe fc5a 	bl	800fd08 <WriteStr>
  str = "var width = window.innerWidth;\n";
 8011454:	4b67      	ldr	r3, [pc, #412]	; (80115f4 <Save_Svg+0x7d0>)
 8011456:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8011458:	f107 0314 	add.w	r3, r7, #20
 801145c:	4619      	mov	r1, r3
 801145e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011460:	f7fe fc52 	bl	800fd08 <WriteStr>
  str = "\n";
 8011464:	4b64      	ldr	r3, [pc, #400]	; (80115f8 <Save_Svg+0x7d4>)
 8011466:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8011468:	f107 0314 	add.w	r3, r7, #20
 801146c:	4619      	mov	r1, r3
 801146e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011470:	f7fe fc4a 	bl	800fd08 <WriteStr>
  str = "svgDocument.getElementById(\"CH1\").setAttribute(\"x\", hscroll+20);\n";
 8011474:	4b61      	ldr	r3, [pc, #388]	; (80115fc <Save_Svg+0x7d8>)
 8011476:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8011478:	f107 0314 	add.w	r3, r7, #20
 801147c:	4619      	mov	r1, r3
 801147e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011480:	f7fe fc42 	bl	800fd08 <WriteStr>
  str = "svgDocument.getElementById(\"CH1s\").setAttribute(\"x\", hscroll+width-20);\n";
 8011484:	4b5e      	ldr	r3, [pc, #376]	; (8011600 <Save_Svg+0x7dc>)
 8011486:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8011488:	f107 0314 	add.w	r3, r7, #20
 801148c:	4619      	mov	r1, r3
 801148e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011490:	f7fe fc3a 	bl	800fd08 <WriteStr>
  str = "\n";
 8011494:	4b58      	ldr	r3, [pc, #352]	; (80115f8 <Save_Svg+0x7d4>)
 8011496:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8011498:	f107 0314 	add.w	r3, r7, #20
 801149c:	4619      	mov	r1, r3
 801149e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80114a0:	f7fe fc32 	bl	800fd08 <WriteStr>
  //==============================
  str = "svgDocument.getElementById(\"CH1\").firstChild.data = \"CH1: \"+fmtU(y, ";
 80114a4:	4b57      	ldr	r3, [pc, #348]	; (8011604 <Save_Svg+0x7e0>)
 80114a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80114a8:	f107 0314 	add.w	r3, r7, #20
 80114ac:	4619      	mov	r1, r3
 80114ae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80114b0:	f7fe fc2a 	bl	800fd08 <WriteStr>
  if(List[PROBEATT].Val)str = (char*)VScale_Str_10X[List[Y_RANGES].Val];
 80114b4:	4b3a      	ldr	r3, [pc, #232]	; (80115a0 <Save_Svg+0x77c>)
 80114b6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d00b      	beq.n	80114d6 <Save_Svg+0x6b2>
 80114be:	4b38      	ldr	r3, [pc, #224]	; (80115a0 <Save_Svg+0x77c>)
 80114c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80114c4:	461a      	mov	r2, r3
 80114c6:	4613      	mov	r3, r2
 80114c8:	005b      	lsls	r3, r3, #1
 80114ca:	4413      	add	r3, r2
 80114cc:	005b      	lsls	r3, r3, #1
 80114ce:	4a4e      	ldr	r2, [pc, #312]	; (8011608 <Save_Svg+0x7e4>)
 80114d0:	4413      	add	r3, r2
 80114d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80114d4:	e00a      	b.n	80114ec <Save_Svg+0x6c8>
  else str = (char*)VScale_Str[List[Y_RANGES].Val];
 80114d6:	4b32      	ldr	r3, [pc, #200]	; (80115a0 <Save_Svg+0x77c>)
 80114d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80114dc:	461a      	mov	r2, r3
 80114de:	4613      	mov	r3, r2
 80114e0:	005b      	lsls	r3, r3, #1
 80114e2:	4413      	add	r3, r2
 80114e4:	005b      	lsls	r3, r3, #1
 80114e6:	4a49      	ldr	r2, [pc, #292]	; (801160c <Save_Svg+0x7e8>)
 80114e8:	4413      	add	r3, r2
 80114ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80114ec:	f107 0314 	add.w	r3, r7, #20
 80114f0:	4619      	mov	r1, r3
 80114f2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80114f4:	f7fe fc08 	bl	800fd08 <WriteStr>
  str = ", ";
 80114f8:	4b45      	ldr	r3, [pc, #276]	; (8011610 <Save_Svg+0x7ec>)
 80114fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80114fc:	f107 0314 	add.w	r3, r7, #20
 8011500:	4619      	mov	r1, r3
 8011502:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011504:	f7fe fc00 	bl	800fd08 <WriteStr>
  WriteVar((short)Posi1, pCluster);
 8011508:	f107 0214 	add.w	r2, r7, #20
 801150c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8011510:	4611      	mov	r1, r2
 8011512:	4618      	mov	r0, r3
 8011514:	f7fe fb50 	bl	800fbb8 <WriteVar>
  str = ") + \" \" + fmtT(x, ";
 8011518:	4b3e      	ldr	r3, [pc, #248]	; (8011614 <Save_Svg+0x7f0>)
 801151a:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801151c:	f107 0314 	add.w	r3, r7, #20
 8011520:	4619      	mov	r1, r3
 8011522:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011524:	f7fe fbf0 	bl	800fd08 <WriteStr>
  str = (char*)TScale_Str[List[TIM_BASE].Val]; //Timebase
 8011528:	4b1d      	ldr	r3, [pc, #116]	; (80115a0 <Save_Svg+0x77c>)
 801152a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801152e:	00db      	lsls	r3, r3, #3
 8011530:	4a39      	ldr	r2, [pc, #228]	; (8011618 <Save_Svg+0x7f4>)
 8011532:	4413      	add	r3, r2
 8011534:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8011536:	f107 0314 	add.w	r3, r7, #20
 801153a:	4619      	mov	r1, r3
 801153c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801153e:	f7fe fbe3 	bl	800fd08 <WriteStr>
  str = ");\n";
 8011542:	4b36      	ldr	r3, [pc, #216]	; (801161c <Save_Svg+0x7f8>)
 8011544:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8011546:	f107 0314 	add.w	r3, r7, #20
 801154a:	4619      	mov	r1, r3
 801154c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801154e:	f7fe fbdb 	bl	800fd08 <WriteStr>

  //==============================
  str = "}\n";
 8011552:	4b1d      	ldr	r3, [pc, #116]	; (80115c8 <Save_Svg+0x7a4>)
 8011554:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8011556:	f107 0314 	add.w	r3, r7, #20
 801155a:	4619      	mov	r1, r3
 801155c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801155e:	f7fe fbd3 	bl	800fd08 <WriteStr>
  str = "]]></script>\n";
 8011562:	4b2f      	ldr	r3, [pc, #188]	; (8011620 <Save_Svg+0x7fc>)
 8011564:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8011566:	f107 0314 	add.w	r3, r7, #20
 801156a:	4619      	mov	r1, r3
 801156c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801156e:	f7fe fbcb 	bl	800fd08 <WriteStr>
  str = "</svg>\n";
 8011572:	4b2c      	ldr	r3, [pc, #176]	; (8011624 <Save_Svg+0x800>)
 8011574:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8011576:	f107 0314 	add.w	r3, r7, #20
 801157a:	4619      	mov	r1, r3
 801157c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801157e:	f7fe fbc3 	bl	800fd08 <WriteStr>
  if(ProgFileSec(F_Buff, pCluster)!= OK) return FILE_RW_ERR; // д������
 8011582:	f107 0314 	add.w	r3, r7, #20
 8011586:	4619      	mov	r1, r3
 8011588:	4827      	ldr	r0, [pc, #156]	; (8011628 <Save_Svg+0x804>)
 801158a:	f7fe f8e5 	bl	800f758 <ProgFileSec>
 801158e:	4603      	mov	r3, r0
 8011590:	2b00      	cmp	r3, #0
 8011592:	d04b      	beq.n	801162c <Save_Svg+0x808>
 8011594:	2303      	movs	r3, #3
 8011596:	e07b      	b.n	8011690 <Save_Svg+0x86c>
 8011598:	08000514 	.word	0x08000514
 801159c:	08000518 	.word	0x08000518
 80115a0:	20000298 	.word	0x20000298
 80115a4:	200001d0 	.word	0x200001d0
 80115a8:	0800051c 	.word	0x0800051c
 80115ac:	0800052c 	.word	0x0800052c
 80115b0:	08000598 	.word	0x08000598
 80115b4:	080005c4 	.word	0x080005c4
 80115b8:	08000628 	.word	0x08000628
 80115bc:	08000644 	.word	0x08000644
 80115c0:	08000684 	.word	0x08000684
 80115c4:	080006c0 	.word	0x080006c0
 80115c8:	080006f4 	.word	0x080006f4
 80115cc:	080006f8 	.word	0x080006f8
 80115d0:	0800074c 	.word	0x0800074c
 80115d4:	08000764 	.word	0x08000764
 80115d8:	08000768 	.word	0x08000768
 80115dc:	0800077c 	.word	0x0800077c
 80115e0:	08000794 	.word	0x08000794
 80115e4:	08002270 	.word	0x08002270
 80115e8:	080007b0 	.word	0x080007b0
 80115ec:	080007c0 	.word	0x080007c0
 80115f0:	080007cc 	.word	0x080007cc
 80115f4:	08000818 	.word	0x08000818
 80115f8:	08000838 	.word	0x08000838
 80115fc:	0800083c 	.word	0x0800083c
 8011600:	08000880 	.word	0x08000880
 8011604:	080008cc 	.word	0x080008cc
 8011608:	08001a88 	.word	0x08001a88
 801160c:	08001a4c 	.word	0x08001a4c
 8011610:	08000914 	.word	0x08000914
 8011614:	08000918 	.word	0x08000918
 8011618:	08001ac4 	.word	0x08001ac4
 801161c:	0800092c 	.word	0x0800092c
 8011620:	08000930 	.word	0x08000930
 8011624:	08000940 	.word	0x08000940
 8011628:	200017e0 	.word	0x200017e0
  PrintClk(264,2,(l++ >>1)& 3);                               // ����ָʾ
 801162c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801162e:	1c5a      	adds	r2, r3, #1
 8011630:	637a      	str	r2, [r7, #52]	; 0x34
 8011632:	105b      	asrs	r3, r3, #1
 8011634:	b2db      	uxtb	r3, r3
 8011636:	f003 0303 	and.w	r3, r3, #3
 801163a:	b2db      	uxtb	r3, r3
 801163c:	461a      	mov	r2, r3
 801163e:	2102      	movs	r1, #2
 8011640:	f44f 7084 	mov.w	r0, #264	; 0x108
 8011644:	f7fe fa42 	bl	800facc <PrintClk>

  if(CloseFile(F_Buff, Svg_Cnt, pCluster, pDirAddr)!= OK)
 8011648:	4b13      	ldr	r3, [pc, #76]	; (8011698 <Save_Svg+0x874>)
 801164a:	6819      	ldr	r1, [r3, #0]
 801164c:	f107 0310 	add.w	r3, r7, #16
 8011650:	f107 0214 	add.w	r2, r7, #20
 8011654:	4811      	ldr	r0, [pc, #68]	; (801169c <Save_Svg+0x878>)
 8011656:	f7fe f8f3 	bl	800f840 <CloseFile>
 801165a:	4603      	mov	r3, r0
 801165c:	2b00      	cmp	r3, #0
 801165e:	d001      	beq.n	8011664 <Save_Svg+0x840>
    return DISK_RW_ERR;
 8011660:	2304      	movs	r3, #4
 8011662:	e015      	b.n	8011690 <Save_Svg+0x86c>
  if(List[SAVE_SVG].Val<99)List[SAVE_SVG].Val++;
 8011664:	4b0e      	ldr	r3, [pc, #56]	; (80116a0 <Save_Svg+0x87c>)
 8011666:	f9b3 310c 	ldrsh.w	r3, [r3, #268]	; 0x10c
 801166a:	2b62      	cmp	r3, #98	; 0x62
 801166c:	dc09      	bgt.n	8011682 <Save_Svg+0x85e>
 801166e:	4b0c      	ldr	r3, [pc, #48]	; (80116a0 <Save_Svg+0x87c>)
 8011670:	f9b3 310c 	ldrsh.w	r3, [r3, #268]	; 0x10c
 8011674:	b29b      	uxth	r3, r3
 8011676:	3301      	adds	r3, #1
 8011678:	b29b      	uxth	r3, r3
 801167a:	b21a      	sxth	r2, r3
 801167c:	4b08      	ldr	r3, [pc, #32]	; (80116a0 <Save_Svg+0x87c>)
 801167e:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
  //__USB_Port(ENABLE);
  memset(Data,0,310);
 8011682:	f44f 729b 	mov.w	r2, #310	; 0x136
 8011686:	2100      	movs	r1, #0
 8011688:	4806      	ldr	r0, [pc, #24]	; (80116a4 <Save_Svg+0x880>)
 801168a:	f011 fced 	bl	8023068 <memset>
  return OK;
 801168e:	2300      	movs	r3, #0
}
 8011690:	4618      	mov	r0, r3
 8011692:	3748      	adds	r7, #72	; 0x48
 8011694:	46bd      	mov	sp, r7
 8011696:	bd80      	pop	{r7, pc}
 8011698:	2000079c 	.word	0x2000079c
 801169c:	200017e0 	.word	0x200017e0
 80116a0:	20000298 	.word	0x20000298
 80116a4:	20000008 	.word	0x20000008

080116a8 <Read_CalFlag>:
unsigned long err;

FLASH_EraseInitTypeDef Flash_Erase ={0, 1, 1, 1, 2};

 void Read_CalFlag(void)
 {
 80116a8:	b480      	push	{r7}
 80116aa:	b083      	sub	sp, #12
 80116ac:	af00      	add	r7, sp, #0
	  unsigned short* ptr;
	  ptr=(unsigned short*)Kpg_Address;
 80116ae:	4b10      	ldr	r3, [pc, #64]	; (80116f0 <Read_CalFlag+0x48>)
 80116b0:	607b      	str	r3, [r7, #4]
	  if(*ptr++!=0xaa55)
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	1c9a      	adds	r2, r3, #2
 80116b6:	607a      	str	r2, [r7, #4]
 80116b8:	881b      	ldrh	r3, [r3, #0]
 80116ba:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80116be:	4293      	cmp	r3, r2
 80116c0:	d10e      	bne.n	80116e0 <Read_CalFlag+0x38>
		  return;
	  if(*ptr++!=0x0400)
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	1c9a      	adds	r2, r3, #2
 80116c6:	607a      	str	r2, [r7, #4]
 80116c8:	881b      	ldrh	r3, [r3, #0]
 80116ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80116ce:	d109      	bne.n	80116e4 <Read_CalFlag+0x3c>
		  return;
	  Cal_Flag = *ptr++;
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	1c9a      	adds	r2, r3, #2
 80116d4:	607a      	str	r2, [r7, #4]
 80116d6:	881b      	ldrh	r3, [r3, #0]
 80116d8:	b2da      	uxtb	r2, r3
 80116da:	4b06      	ldr	r3, [pc, #24]	; (80116f4 <Read_CalFlag+0x4c>)
 80116dc:	701a      	strb	r2, [r3, #0]
	  return;
 80116de:	e002      	b.n	80116e6 <Read_CalFlag+0x3e>
		  return;
 80116e0:	bf00      	nop
 80116e2:	e000      	b.n	80116e6 <Read_CalFlag+0x3e>
		  return;
 80116e4:	bf00      	nop
 }
 80116e6:	370c      	adds	r7, #12
 80116e8:	46bd      	mov	sp, r7
 80116ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ee:	4770      	bx	lr
 80116f0:	08004000 	.word	0x08004000
 80116f4:	200001b4 	.word	0x200001b4

080116f8 <Save_Parameter>:

 /*******************************************************************************
  Save_Parameter:                          Return: 0= Success
 *******************************************************************************/
 char Save_Parameter(void)
 {
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b082      	sub	sp, #8
 80116fc:	af00      	add	r7, sp, #0
   short i, j;
   unsigned short* ptr;

   Flash_Erase.Sector = 2;
 80116fe:	4b45      	ldr	r3, [pc, #276]	; (8011814 <Save_Parameter+0x11c>)
 8011700:	2202      	movs	r2, #2
 8011702:	609a      	str	r2, [r3, #8]

   HAL_FLASH_Unlock();
 8011704:	f008 f81a 	bl	801973c <HAL_FLASH_Unlock>
   j=HAL_FLASHEx_Erase( &Flash_Erase, &err);
 8011708:	4943      	ldr	r1, [pc, #268]	; (8011818 <Save_Parameter+0x120>)
 801170a:	4842      	ldr	r0, [pc, #264]	; (8011814 <Save_Parameter+0x11c>)
 801170c:	f008 f988 	bl	8019a20 <HAL_FLASHEx_Erase>
 8011710:	4603      	mov	r3, r0
 8011712:	80bb      	strh	r3, [r7, #4]
   if(j== HAL_OK)
 8011714:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011718:	2b00      	cmp	r3, #0
 801171a:	d173      	bne.n	8011804 <Save_Parameter+0x10c>
   {
     ptr=F_Buff;
 801171c:	4b3f      	ldr	r3, [pc, #252]	; (801181c <Save_Parameter+0x124>)
 801171e:	603b      	str	r3, [r7, #0]
     *ptr++=0x0400;                              //Ver:4.00
 8011720:	683b      	ldr	r3, [r7, #0]
 8011722:	1c9a      	adds	r2, r3, #2
 8011724:	603a      	str	r2, [r7, #0]
 8011726:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801172a:	801a      	strh	r2, [r3, #0]
     *ptr++=Current;
 801172c:	4b3c      	ldr	r3, [pc, #240]	; (8011820 <Save_Parameter+0x128>)
 801172e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8011732:	683b      	ldr	r3, [r7, #0]
 8011734:	1c9a      	adds	r2, r3, #2
 8011736:	603a      	str	r2, [r7, #0]
 8011738:	b28a      	uxth	r2, r1
 801173a:	801a      	strh	r2, [r3, #0]
     *ptr++=Status;
 801173c:	4b39      	ldr	r3, [pc, #228]	; (8011824 <Save_Parameter+0x12c>)
 801173e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8011742:	683b      	ldr	r3, [r7, #0]
 8011744:	1c9a      	adds	r2, r3, #2
 8011746:	603a      	str	r2, [r7, #0]
 8011748:	b28a      	uxth	r2, r1
 801174a:	801a      	strh	r2, [r3, #0]
     for(i=0;i<42;i++)
 801174c:	2300      	movs	r3, #0
 801174e:	80fb      	strh	r3, [r7, #6]
 8011750:	e011      	b.n	8011776 <Save_Parameter+0x7e>
    	 *ptr++=List[i].Val;
 8011752:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011756:	4a34      	ldr	r2, [pc, #208]	; (8011828 <Save_Parameter+0x130>)
 8011758:	00db      	lsls	r3, r3, #3
 801175a:	4413      	add	r3, r2
 801175c:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8011760:	683b      	ldr	r3, [r7, #0]
 8011762:	1c9a      	adds	r2, r3, #2
 8011764:	603a      	str	r2, [r7, #0]
 8011766:	b28a      	uxth	r2, r1
 8011768:	801a      	strh	r2, [r3, #0]
     for(i=0;i<42;i++)
 801176a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801176e:	b29b      	uxth	r3, r3
 8011770:	3301      	adds	r3, #1
 8011772:	b29b      	uxth	r3, r3
 8011774:	80fb      	strh	r3, [r7, #6]
 8011776:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801177a:	2b29      	cmp	r3, #41	; 0x29
 801177c:	dde9      	ble.n	8011752 <Save_Parameter+0x5a>
     for(i=0;i<8;i++)
 801177e:	2300      	movs	r3, #0
 8011780:	80fb      	strh	r3, [r7, #6]
 8011782:	e00f      	b.n	80117a4 <Save_Parameter+0xac>
    	 *ptr++=MenuNow[i];
 8011784:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011788:	4a28      	ldr	r2, [pc, #160]	; (801182c <Save_Parameter+0x134>)
 801178a:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 801178e:	683b      	ldr	r3, [r7, #0]
 8011790:	1c9a      	adds	r2, r3, #2
 8011792:	603a      	str	r2, [r7, #0]
 8011794:	b28a      	uxth	r2, r1
 8011796:	801a      	strh	r2, [r3, #0]
     for(i=0;i<8;i++)
 8011798:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801179c:	b29b      	uxth	r3, r3
 801179e:	3301      	adds	r3, #1
 80117a0:	b29b      	uxth	r3, r3
 80117a2:	80fb      	strh	r3, [r7, #6]
 80117a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80117a8:	2b07      	cmp	r3, #7
 80117aa:	ddeb      	ble.n	8011784 <Save_Parameter+0x8c>
     *ptr++=0xaa55;
 80117ac:	683b      	ldr	r3, [r7, #0]
 80117ae:	1c9a      	adds	r2, r3, #2
 80117b0:	603a      	str	r2, [r7, #0]
 80117b2:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80117b6:	801a      	strh	r2, [r3, #0]
     ptr=F_Buff;
 80117b8:	4b18      	ldr	r3, [pc, #96]	; (801181c <Save_Parameter+0x124>)
 80117ba:	603b      	str	r3, [r7, #0]
     for(i=0; i<256; i+=2)
 80117bc:	2300      	movs	r3, #0
 80117be:	80fb      	strh	r3, [r7, #6]
 80117c0:	e01a      	b.n	80117f8 <Save_Parameter+0x100>
     {                      //128 SHORT
       j= HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Page_Address+i, *ptr++);
 80117c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80117c6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80117ca:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80117ce:	4619      	mov	r1, r3
 80117d0:	683b      	ldr	r3, [r7, #0]
 80117d2:	1c9a      	adds	r2, r3, #2
 80117d4:	603a      	str	r2, [r7, #0]
 80117d6:	881b      	ldrh	r3, [r3, #0]
 80117d8:	b29a      	uxth	r2, r3
 80117da:	f04f 0300 	mov.w	r3, #0
 80117de:	2001      	movs	r0, #1
 80117e0:	f007 ff58 	bl	8019694 <HAL_FLASH_Program>
 80117e4:	4603      	mov	r3, r0
 80117e6:	80bb      	strh	r3, [r7, #4]
       if(j!= HAL_OK)
 80117e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d108      	bne.n	8011802 <Save_Parameter+0x10a>
     for(i=0; i<256; i+=2)
 80117f0:	88fb      	ldrh	r3, [r7, #6]
 80117f2:	3302      	adds	r3, #2
 80117f4:	b29b      	uxth	r3, r3
 80117f6:	80fb      	strh	r3, [r7, #6]
 80117f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80117fc:	2bff      	cmp	r3, #255	; 0xff
 80117fe:	dde0      	ble.n	80117c2 <Save_Parameter+0xca>
 8011800:	e000      	b.n	8011804 <Save_Parameter+0x10c>
    	   break;
 8011802:	bf00      	nop
     }
   }
   HAL_FLASH_Lock();
 8011804:	f007 ffbc 	bl	8019780 <HAL_FLASH_Lock>

   return j;
 8011808:	88bb      	ldrh	r3, [r7, #4]
 801180a:	b2db      	uxtb	r3, r3
 }
 801180c:	4618      	mov	r0, r3
 801180e:	3708      	adds	r7, #8
 8011810:	46bd      	mov	sp, r7
 8011812:	bd80      	pop	{r7, pc}
 8011814:	200001b8 	.word	0x200001b8
 8011818:	20002820 	.word	0x20002820
 801181c:	200017e0 	.word	0x200017e0
 8011820:	200007a6 	.word	0x200007a6
 8011824:	200007a8 	.word	0x200007a8
 8011828:	20000298 	.word	0x20000298
 801182c:	20000538 	.word	0x20000538

08011830 <Read_Parameter>:
 /*******************************************************************************
 Read_Parameter:
 *******************************************************************************/
 void Read_Parameter(void)
 {
 8011830:	b480      	push	{r7}
 8011832:	b083      	sub	sp, #12
 8011834:	af00      	add	r7, sp, #0
   short i;
   unsigned short* ptr;
   ptr=(unsigned short*)(Page_Address+55*2); //94*2-40
 8011836:	4b3f      	ldr	r3, [pc, #252]	; (8011934 <Read_Parameter+0x104>)
 8011838:	603b      	str	r3, [r7, #0]
   TIM_BASE_Val=List[TIM_BASE].Val;
 801183a:	4b3f      	ldr	r3, [pc, #252]	; (8011938 <Read_Parameter+0x108>)
 801183c:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8011840:	4b3e      	ldr	r3, [pc, #248]	; (801193c <Read_Parameter+0x10c>)
 8011842:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 8011844:	4b3c      	ldr	r3, [pc, #240]	; (8011938 <Read_Parameter+0x108>)
 8011846:	2200      	movs	r2, #0
 8011848:	879a      	strh	r2, [r3, #60]	; 0x3c
   if(*ptr!=0xaa55)
 801184a:	683b      	ldr	r3, [r7, #0]
 801184c:	881b      	ldrh	r3, [r3, #0]
 801184e:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8011852:	4293      	cmp	r3, r2
 8011854:	d166      	bne.n	8011924 <Read_Parameter+0xf4>
	   return ;
   ptr=(unsigned short*)Page_Address;
 8011856:	4b3a      	ldr	r3, [pc, #232]	; (8011940 <Read_Parameter+0x110>)
 8011858:	603b      	str	r3, [r7, #0]
   if(*ptr++!=0x0400)
 801185a:	683b      	ldr	r3, [r7, #0]
 801185c:	1c9a      	adds	r2, r3, #2
 801185e:	603a      	str	r2, [r7, #0]
 8011860:	881b      	ldrh	r3, [r3, #0]
 8011862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011866:	d15f      	bne.n	8011928 <Read_Parameter+0xf8>
	   return ;
   Current=*ptr++;
 8011868:	683b      	ldr	r3, [r7, #0]
 801186a:	1c9a      	adds	r2, r3, #2
 801186c:	603a      	str	r2, [r7, #0]
 801186e:	881b      	ldrh	r3, [r3, #0]
 8011870:	b21a      	sxth	r2, r3
 8011872:	4b34      	ldr	r3, [pc, #208]	; (8011944 <Read_Parameter+0x114>)
 8011874:	801a      	strh	r2, [r3, #0]
   List[MenuNow[Current]].Flg |= UPD;
 8011876:	4b33      	ldr	r3, [pc, #204]	; (8011944 <Read_Parameter+0x114>)
 8011878:	f9b3 3000 	ldrsh.w	r3, [r3]
 801187c:	461a      	mov	r2, r3
 801187e:	4b32      	ldr	r3, [pc, #200]	; (8011948 <Read_Parameter+0x118>)
 8011880:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8011884:	4a2c      	ldr	r2, [pc, #176]	; (8011938 <Read_Parameter+0x108>)
 8011886:	00db      	lsls	r3, r3, #3
 8011888:	4413      	add	r3, r2
 801188a:	799b      	ldrb	r3, [r3, #6]
 801188c:	4a2d      	ldr	r2, [pc, #180]	; (8011944 <Read_Parameter+0x114>)
 801188e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011892:	4611      	mov	r1, r2
 8011894:	4a2c      	ldr	r2, [pc, #176]	; (8011948 <Read_Parameter+0x118>)
 8011896:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 801189a:	4610      	mov	r0, r2
 801189c:	f043 0320 	orr.w	r3, r3, #32
 80118a0:	b2d9      	uxtb	r1, r3
 80118a2:	4a25      	ldr	r2, [pc, #148]	; (8011938 <Read_Parameter+0x108>)
 80118a4:	00c3      	lsls	r3, r0, #3
 80118a6:	4413      	add	r3, r2
 80118a8:	460a      	mov	r2, r1
 80118aa:	719a      	strb	r2, [r3, #6]
   ptr++;
 80118ac:	683b      	ldr	r3, [r7, #0]
 80118ae:	3302      	adds	r3, #2
 80118b0:	603b      	str	r3, [r7, #0]
   for(i=0;i<42;i++)
 80118b2:	2300      	movs	r3, #0
 80118b4:	80fb      	strh	r3, [r7, #6]
 80118b6:	e011      	b.n	80118dc <Read_Parameter+0xac>
	   List[i].Val=*ptr++;
 80118b8:	683b      	ldr	r3, [r7, #0]
 80118ba:	1c9a      	adds	r2, r3, #2
 80118bc:	603a      	str	r2, [r7, #0]
 80118be:	881a      	ldrh	r2, [r3, #0]
 80118c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80118c4:	b211      	sxth	r1, r2
 80118c6:	4a1c      	ldr	r2, [pc, #112]	; (8011938 <Read_Parameter+0x108>)
 80118c8:	00db      	lsls	r3, r3, #3
 80118ca:	4413      	add	r3, r2
 80118cc:	460a      	mov	r2, r1
 80118ce:	809a      	strh	r2, [r3, #4]
   for(i=0;i<42;i++)
 80118d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80118d4:	b29b      	uxth	r3, r3
 80118d6:	3301      	adds	r3, #1
 80118d8:	b29b      	uxth	r3, r3
 80118da:	80fb      	strh	r3, [r7, #6]
 80118dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80118e0:	2b29      	cmp	r3, #41	; 0x29
 80118e2:	dde9      	ble.n	80118b8 <Read_Parameter+0x88>
   for(i=0;i<8;i++)
 80118e4:	2300      	movs	r3, #0
 80118e6:	80fb      	strh	r3, [r7, #6]
 80118e8:	e00f      	b.n	801190a <Read_Parameter+0xda>
	   MenuNow[i]=*ptr++;
 80118ea:	683b      	ldr	r3, [r7, #0]
 80118ec:	1c9a      	adds	r2, r3, #2
 80118ee:	603a      	str	r2, [r7, #0]
 80118f0:	881a      	ldrh	r2, [r3, #0]
 80118f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80118f6:	b211      	sxth	r1, r2
 80118f8:	4a13      	ldr	r2, [pc, #76]	; (8011948 <Read_Parameter+0x118>)
 80118fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(i=0;i<8;i++)
 80118fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011902:	b29b      	uxth	r3, r3
 8011904:	3301      	adds	r3, #1
 8011906:	b29b      	uxth	r3, r3
 8011908:	80fb      	strh	r3, [r7, #6]
 801190a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801190e:	2b07      	cmp	r3, #7
 8011910:	ddeb      	ble.n	80118ea <Read_Parameter+0xba>
   TIM_BASE_Val=List[TIM_BASE].Val;
 8011912:	4b09      	ldr	r3, [pc, #36]	; (8011938 <Read_Parameter+0x108>)
 8011914:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8011918:	4b08      	ldr	r3, [pc, #32]	; (801193c <Read_Parameter+0x10c>)
 801191a:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 801191c:	4b06      	ldr	r3, [pc, #24]	; (8011938 <Read_Parameter+0x108>)
 801191e:	2200      	movs	r2, #0
 8011920:	879a      	strh	r2, [r3, #60]	; 0x3c

   return ;
 8011922:	e002      	b.n	801192a <Read_Parameter+0xfa>
	   return ;
 8011924:	bf00      	nop
 8011926:	e000      	b.n	801192a <Read_Parameter+0xfa>
	   return ;
 8011928:	bf00      	nop
 }
 801192a:	370c      	adds	r7, #12
 801192c:	46bd      	mov	sp, r7
 801192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011932:	4770      	bx	lr
 8011934:	0800806e 	.word	0x0800806e
 8011938:	20000298 	.word	0x20000298
 801193c:	2000281c 	.word	0x2000281c
 8011940:	08008000 	.word	0x08008000
 8011944:	200007a6 	.word	0x200007a6
 8011948:	20000538 	.word	0x20000538

0801194c <Save_Kpg>:
 /*******************************************************************************
  Save_Kpg:                       Return: 0= Success
 *******************************************************************************/
 char Save_Kpg(void)
 {
 801194c:	b580      	push	{r7, lr}
 801194e:	b082      	sub	sp, #8
 8011950:	af00      	add	r7, sp, #0
   short i, j;
   unsigned short* ptr;

   Flash_Erase.Sector = 1;
 8011952:	4b34      	ldr	r3, [pc, #208]	; (8011a24 <Save_Kpg+0xd8>)
 8011954:	2201      	movs	r2, #1
 8011956:	609a      	str	r2, [r3, #8]

   HAL_FLASH_Unlock();
 8011958:	f007 fef0 	bl	801973c <HAL_FLASH_Unlock>
   j=HAL_FLASHEx_Erase( &Flash_Erase, &err);
 801195c:	4932      	ldr	r1, [pc, #200]	; (8011a28 <Save_Kpg+0xdc>)
 801195e:	4831      	ldr	r0, [pc, #196]	; (8011a24 <Save_Kpg+0xd8>)
 8011960:	f008 f85e 	bl	8019a20 <HAL_FLASHEx_Erase>
 8011964:	4603      	mov	r3, r0
 8011966:	80bb      	strh	r3, [r7, #4]
   if(j== HAL_OK)
 8011968:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801196c:	2b00      	cmp	r3, #0
 801196e:	d151      	bne.n	8011a14 <Save_Kpg+0xc8>
   {
     ptr=F_Buff;
 8011970:	4b2e      	ldr	r3, [pc, #184]	; (8011a2c <Save_Kpg+0xe0>)
 8011972:	603b      	str	r3, [r7, #0]
     *ptr++=0xaa55;
 8011974:	683b      	ldr	r3, [r7, #0]
 8011976:	1c9a      	adds	r2, r3, #2
 8011978:	603a      	str	r2, [r7, #0]
 801197a:	f64a 2255 	movw	r2, #43605	; 0xaa55
 801197e:	801a      	strh	r2, [r3, #0]
     *ptr++=0x0400;                              //Ver:3.00
 8011980:	683b      	ldr	r3, [r7, #0]
 8011982:	1c9a      	adds	r2, r3, #2
 8011984:	603a      	str	r2, [r7, #0]
 8011986:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801198a:	801a      	strh	r2, [r3, #0]
     *ptr++=Cal_Flag;
 801198c:	4b28      	ldr	r3, [pc, #160]	; (8011a30 <Save_Kpg+0xe4>)
 801198e:	7819      	ldrb	r1, [r3, #0]
 8011990:	683b      	ldr	r3, [r7, #0]
 8011992:	1c9a      	adds	r2, r3, #2
 8011994:	603a      	str	r2, [r7, #0]
 8011996:	b28a      	uxth	r2, r1
 8011998:	801a      	strh	r2, [r3, #0]
     for(i=0;i<3;i++)
 801199a:	2300      	movs	r3, #0
 801199c:	80fb      	strh	r3, [r7, #6]
 801199e:	e00f      	b.n	80119c0 <Save_Kpg+0x74>
    	 *ptr++=Kpg[i];
 80119a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80119a4:	4a23      	ldr	r2, [pc, #140]	; (8011a34 <Save_Kpg+0xe8>)
 80119a6:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 80119aa:	683b      	ldr	r3, [r7, #0]
 80119ac:	1c9a      	adds	r2, r3, #2
 80119ae:	603a      	str	r2, [r7, #0]
 80119b0:	b28a      	uxth	r2, r1
 80119b2:	801a      	strh	r2, [r3, #0]
     for(i=0;i<3;i++)
 80119b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80119b8:	b29b      	uxth	r3, r3
 80119ba:	3301      	adds	r3, #1
 80119bc:	b29b      	uxth	r3, r3
 80119be:	80fb      	strh	r3, [r7, #6]
 80119c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80119c4:	2b02      	cmp	r3, #2
 80119c6:	ddeb      	ble.n	80119a0 <Save_Kpg+0x54>
     ptr=F_Buff;
 80119c8:	4b18      	ldr	r3, [pc, #96]	; (8011a2c <Save_Kpg+0xe0>)
 80119ca:	603b      	str	r3, [r7, #0]
     for(i=0; i<256; i+=2)
 80119cc:	2300      	movs	r3, #0
 80119ce:	80fb      	strh	r3, [r7, #6]
 80119d0:	e01a      	b.n	8011a08 <Save_Kpg+0xbc>
     {                      //128 SHORT
       j= HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Kpg_Address+i, *ptr++);
 80119d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80119d6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80119da:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80119de:	4619      	mov	r1, r3
 80119e0:	683b      	ldr	r3, [r7, #0]
 80119e2:	1c9a      	adds	r2, r3, #2
 80119e4:	603a      	str	r2, [r7, #0]
 80119e6:	881b      	ldrh	r3, [r3, #0]
 80119e8:	b29a      	uxth	r2, r3
 80119ea:	f04f 0300 	mov.w	r3, #0
 80119ee:	2001      	movs	r0, #1
 80119f0:	f007 fe50 	bl	8019694 <HAL_FLASH_Program>
 80119f4:	4603      	mov	r3, r0
 80119f6:	80bb      	strh	r3, [r7, #4]
       if(j!= HAL_OK)
 80119f8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d108      	bne.n	8011a12 <Save_Kpg+0xc6>
     for(i=0; i<256; i+=2)
 8011a00:	88fb      	ldrh	r3, [r7, #6]
 8011a02:	3302      	adds	r3, #2
 8011a04:	b29b      	uxth	r3, r3
 8011a06:	80fb      	strh	r3, [r7, #6]
 8011a08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011a0c:	2bff      	cmp	r3, #255	; 0xff
 8011a0e:	dde0      	ble.n	80119d2 <Save_Kpg+0x86>
 8011a10:	e000      	b.n	8011a14 <Save_Kpg+0xc8>
    	   break;
 8011a12:	bf00      	nop
     }
   }
   HAL_FLASH_Lock();
 8011a14:	f007 feb4 	bl	8019780 <HAL_FLASH_Lock>
   return j;
 8011a18:	88bb      	ldrh	r3, [r7, #4]
 8011a1a:	b2db      	uxtb	r3, r3
 }
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	3708      	adds	r7, #8
 8011a20:	46bd      	mov	sp, r7
 8011a22:	bd80      	pop	{r7, pc}
 8011a24:	200001b8 	.word	0x200001b8
 8011a28:	20002820 	.word	0x20002820
 8011a2c:	200017e0 	.word	0x200017e0
 8011a30:	200001b4 	.word	0x200001b4
 8011a34:	2000056c 	.word	0x2000056c

08011a38 <Read_Kpg>:
 /*******************************************************************************
 Read_Kpg:
 *******************************************************************************/
 void Read_Kpg(void)
 {
 8011a38:	b480      	push	{r7}
 8011a3a:	b083      	sub	sp, #12
 8011a3c:	af00      	add	r7, sp, #0
   short i;
   unsigned short* ptr;
   ptr=(unsigned short*)Kpg_Address;
 8011a3e:	4b1c      	ldr	r3, [pc, #112]	; (8011ab0 <Read_Kpg+0x78>)
 8011a40:	603b      	str	r3, [r7, #0]
   if(*ptr++!=0xaa55)
 8011a42:	683b      	ldr	r3, [r7, #0]
 8011a44:	1c9a      	adds	r2, r3, #2
 8011a46:	603a      	str	r2, [r7, #0]
 8011a48:	881b      	ldrh	r3, [r3, #0]
 8011a4a:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8011a4e:	4293      	cmp	r3, r2
 8011a50:	d125      	bne.n	8011a9e <Read_Kpg+0x66>
	   return ;
   if(*ptr++!=0x0400)
 8011a52:	683b      	ldr	r3, [r7, #0]
 8011a54:	1c9a      	adds	r2, r3, #2
 8011a56:	603a      	str	r2, [r7, #0]
 8011a58:	881b      	ldrh	r3, [r3, #0]
 8011a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011a5e:	d120      	bne.n	8011aa2 <Read_Kpg+0x6a>
	   return ;
   Cal_Flag = *ptr++;
 8011a60:	683b      	ldr	r3, [r7, #0]
 8011a62:	1c9a      	adds	r2, r3, #2
 8011a64:	603a      	str	r2, [r7, #0]
 8011a66:	881b      	ldrh	r3, [r3, #0]
 8011a68:	b2da      	uxtb	r2, r3
 8011a6a:	4b12      	ldr	r3, [pc, #72]	; (8011ab4 <Read_Kpg+0x7c>)
 8011a6c:	701a      	strb	r2, [r3, #0]
   for(i=0;i< 3;i++)
 8011a6e:	2300      	movs	r3, #0
 8011a70:	80fb      	strh	r3, [r7, #6]
 8011a72:	e00f      	b.n	8011a94 <Read_Kpg+0x5c>
       Kpg[i] = *ptr++;  //CH_A,CH_B
 8011a74:	683b      	ldr	r3, [r7, #0]
 8011a76:	1c9a      	adds	r2, r3, #2
 8011a78:	603a      	str	r2, [r7, #0]
 8011a7a:	881a      	ldrh	r2, [r3, #0]
 8011a7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011a80:	b211      	sxth	r1, r2
 8011a82:	4a0d      	ldr	r2, [pc, #52]	; (8011ab8 <Read_Kpg+0x80>)
 8011a84:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(i=0;i< 3;i++)
 8011a88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011a8c:	b29b      	uxth	r3, r3
 8011a8e:	3301      	adds	r3, #1
 8011a90:	b29b      	uxth	r3, r3
 8011a92:	80fb      	strh	r3, [r7, #6]
 8011a94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011a98:	2b02      	cmp	r3, #2
 8011a9a:	ddeb      	ble.n	8011a74 <Read_Kpg+0x3c>
   return ;
 8011a9c:	e002      	b.n	8011aa4 <Read_Kpg+0x6c>
	   return ;
 8011a9e:	bf00      	nop
 8011aa0:	e000      	b.n	8011aa4 <Read_Kpg+0x6c>
	   return ;
 8011aa2:	bf00      	nop
 }
 8011aa4:	370c      	adds	r7, #12
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aac:	4770      	bx	lr
 8011aae:	bf00      	nop
 8011ab0:	08004000 	.word	0x08004000
 8011ab4:	200001b4 	.word	0x200001b4
 8011ab8:	2000056c 	.word	0x2000056c

08011abc <Restore>:

 void Restore(void)
 {
 8011abc:	b580      	push	{r7, lr}
 8011abe:	b082      	sub	sp, #8
 8011ac0:	af00      	add	r7, sp, #0
   short i;
   TIM_BASE_Val=List[TIM_BASE].Val;
 8011ac2:	4b2d      	ldr	r3, [pc, #180]	; (8011b78 <Restore+0xbc>)
 8011ac4:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8011ac8:	4b2c      	ldr	r3, [pc, #176]	; (8011b7c <Restore+0xc0>)
 8011aca:	801a      	strh	r2, [r3, #0]
   Current=0;
 8011acc:	4b2c      	ldr	r3, [pc, #176]	; (8011b80 <Restore+0xc4>)
 8011ace:	2200      	movs	r2, #0
 8011ad0:	801a      	strh	r2, [r3, #0]
   List[MenuNow[Current]].Flg |= UPD;
 8011ad2:	4b2b      	ldr	r3, [pc, #172]	; (8011b80 <Restore+0xc4>)
 8011ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011ad8:	461a      	mov	r2, r3
 8011ada:	4b2a      	ldr	r3, [pc, #168]	; (8011b84 <Restore+0xc8>)
 8011adc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8011ae0:	4a25      	ldr	r2, [pc, #148]	; (8011b78 <Restore+0xbc>)
 8011ae2:	00db      	lsls	r3, r3, #3
 8011ae4:	4413      	add	r3, r2
 8011ae6:	799b      	ldrb	r3, [r3, #6]
 8011ae8:	4a25      	ldr	r2, [pc, #148]	; (8011b80 <Restore+0xc4>)
 8011aea:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011aee:	4611      	mov	r1, r2
 8011af0:	4a24      	ldr	r2, [pc, #144]	; (8011b84 <Restore+0xc8>)
 8011af2:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8011af6:	4610      	mov	r0, r2
 8011af8:	f043 0320 	orr.w	r3, r3, #32
 8011afc:	b2d9      	uxtb	r1, r3
 8011afe:	4a1e      	ldr	r2, [pc, #120]	; (8011b78 <Restore+0xbc>)
 8011b00:	00c3      	lsls	r3, r0, #3
 8011b02:	4413      	add	r3, r2
 8011b04:	460a      	mov	r2, r1
 8011b06:	719a      	strb	r2, [r3, #6]
   for(i=0;i<42;i++)
 8011b08:	2300      	movs	r3, #0
 8011b0a:	80fb      	strh	r3, [r7, #6]
 8011b0c:	e013      	b.n	8011b36 <Restore+0x7a>
	   List[i].Val= List_c[i].Val;
 8011b0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011b12:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011b16:	491c      	ldr	r1, [pc, #112]	; (8011b88 <Restore+0xcc>)
 8011b18:	00db      	lsls	r3, r3, #3
 8011b1a:	440b      	add	r3, r1
 8011b1c:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 8011b20:	4915      	ldr	r1, [pc, #84]	; (8011b78 <Restore+0xbc>)
 8011b22:	00d3      	lsls	r3, r2, #3
 8011b24:	440b      	add	r3, r1
 8011b26:	4602      	mov	r2, r0
 8011b28:	809a      	strh	r2, [r3, #4]
   for(i=0;i<42;i++)
 8011b2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011b2e:	b29b      	uxth	r3, r3
 8011b30:	3301      	adds	r3, #1
 8011b32:	b29b      	uxth	r3, r3
 8011b34:	80fb      	strh	r3, [r7, #6]
 8011b36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011b3a:	2b29      	cmp	r3, #41	; 0x29
 8011b3c:	dde7      	ble.n	8011b0e <Restore+0x52>
   for(i=0;i<8;i++)
 8011b3e:	2300      	movs	r3, #0
 8011b40:	80fb      	strh	r3, [r7, #6]
 8011b42:	e00f      	b.n	8011b64 <Restore+0xa8>
	   MenuNow[i]= MenuNow_C[i];
 8011b44:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011b48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011b4c:	490f      	ldr	r1, [pc, #60]	; (8011b8c <Restore+0xd0>)
 8011b4e:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8011b52:	4a0c      	ldr	r2, [pc, #48]	; (8011b84 <Restore+0xc8>)
 8011b54:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(i=0;i<8;i++)
 8011b58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011b5c:	b29b      	uxth	r3, r3
 8011b5e:	3301      	adds	r3, #1
 8011b60:	b29b      	uxth	r3, r3
 8011b62:	80fb      	strh	r3, [r7, #6]
 8011b64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011b68:	2b07      	cmp	r3, #7
 8011b6a:	ddeb      	ble.n	8011b44 <Restore+0x88>
   Update_Title();
 8011b6c:	f000 fdec 	bl	8012748 <Update_Title>
}
 8011b70:	bf00      	nop
 8011b72:	3708      	adds	r7, #8
 8011b74:	46bd      	mov	sp, r7
 8011b76:	bd80      	pop	{r7, pc}
 8011b78:	20000298 	.word	0x20000298
 8011b7c:	2000281c 	.word	0x2000281c
 8011b80:	200007a6 	.word	0x200007a6
 8011b84:	20000538 	.word	0x20000538
 8011b88:	200003e8 	.word	0x200003e8
 8011b8c:	08001ef8 	.word	0x08001ef8

08011b90 <Restore_CalPar>:

 void Restore_CalPar(void)
 {
 8011b90:	b580      	push	{r7, lr}
 8011b92:	b082      	sub	sp, #8
 8011b94:	af00      	add	r7, sp, #0
   short i = 0;
 8011b96:	2300      	movs	r3, #0
 8011b98:	80fb      	strh	r3, [r7, #6]
   List[SMPL_DPTH].Flg |= UPD;
 8011b9a:	4b47      	ldr	r3, [pc, #284]	; (8011cb8 <Restore_CalPar+0x128>)
 8011b9c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8011ba0:	f043 0320 	orr.w	r3, r3, #32
 8011ba4:	b2da      	uxtb	r2, r3
 8011ba6:	4b44      	ldr	r3, [pc, #272]	; (8011cb8 <Restore_CalPar+0x128>)
 8011ba8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
   TIM_BASE_Val=List[TIM_BASE].Val;
 8011bac:	4b42      	ldr	r3, [pc, #264]	; (8011cb8 <Restore_CalPar+0x128>)
 8011bae:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8011bb2:	4b42      	ldr	r3, [pc, #264]	; (8011cbc <Restore_CalPar+0x12c>)
 8011bb4:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 8011bb6:	4b40      	ldr	r3, [pc, #256]	; (8011cb8 <Restore_CalPar+0x128>)
 8011bb8:	2200      	movs	r2, #0
 8011bba:	879a      	strh	r2, [r3, #60]	; 0x3c
   Current=0;
 8011bbc:	4b40      	ldr	r3, [pc, #256]	; (8011cc0 <Restore_CalPar+0x130>)
 8011bbe:	2200      	movs	r2, #0
 8011bc0:	801a      	strh	r2, [r3, #0]
   List[MenuNow[Current]].Flg |= UPD;
 8011bc2:	4b3f      	ldr	r3, [pc, #252]	; (8011cc0 <Restore_CalPar+0x130>)
 8011bc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011bc8:	461a      	mov	r2, r3
 8011bca:	4b3e      	ldr	r3, [pc, #248]	; (8011cc4 <Restore_CalPar+0x134>)
 8011bcc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8011bd0:	4a39      	ldr	r2, [pc, #228]	; (8011cb8 <Restore_CalPar+0x128>)
 8011bd2:	00db      	lsls	r3, r3, #3
 8011bd4:	4413      	add	r3, r2
 8011bd6:	799b      	ldrb	r3, [r3, #6]
 8011bd8:	4a39      	ldr	r2, [pc, #228]	; (8011cc0 <Restore_CalPar+0x130>)
 8011bda:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011bde:	4611      	mov	r1, r2
 8011be0:	4a38      	ldr	r2, [pc, #224]	; (8011cc4 <Restore_CalPar+0x134>)
 8011be2:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8011be6:	4610      	mov	r0, r2
 8011be8:	f043 0320 	orr.w	r3, r3, #32
 8011bec:	b2d9      	uxtb	r1, r3
 8011bee:	4a32      	ldr	r2, [pc, #200]	; (8011cb8 <Restore_CalPar+0x128>)
 8011bf0:	00c3      	lsls	r3, r0, #3
 8011bf2:	4413      	add	r3, r2
 8011bf4:	460a      	mov	r2, r1
 8011bf6:	719a      	strb	r2, [r3, #6]
   for(i=0;i<42;i++) List[i].Val= List_c[i].Val;
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	80fb      	strh	r3, [r7, #6]
 8011bfc:	e013      	b.n	8011c26 <Restore_CalPar+0x96>
 8011bfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011c02:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011c06:	4930      	ldr	r1, [pc, #192]	; (8011cc8 <Restore_CalPar+0x138>)
 8011c08:	00db      	lsls	r3, r3, #3
 8011c0a:	440b      	add	r3, r1
 8011c0c:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 8011c10:	4929      	ldr	r1, [pc, #164]	; (8011cb8 <Restore_CalPar+0x128>)
 8011c12:	00d3      	lsls	r3, r2, #3
 8011c14:	440b      	add	r3, r1
 8011c16:	4602      	mov	r2, r0
 8011c18:	809a      	strh	r2, [r3, #4]
 8011c1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011c1e:	b29b      	uxth	r3, r3
 8011c20:	3301      	adds	r3, #1
 8011c22:	b29b      	uxth	r3, r3
 8011c24:	80fb      	strh	r3, [r7, #6]
 8011c26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011c2a:	2b29      	cmp	r3, #41	; 0x29
 8011c2c:	dde7      	ble.n	8011bfe <Restore_CalPar+0x6e>
   for(i=0;i<8;i++)  MenuNow[i]= MenuNow_C[i];
 8011c2e:	2300      	movs	r3, #0
 8011c30:	80fb      	strh	r3, [r7, #6]
 8011c32:	e00f      	b.n	8011c54 <Restore_CalPar+0xc4>
 8011c34:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011c38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011c3c:	4923      	ldr	r1, [pc, #140]	; (8011ccc <Restore_CalPar+0x13c>)
 8011c3e:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8011c42:	4a20      	ldr	r2, [pc, #128]	; (8011cc4 <Restore_CalPar+0x134>)
 8011c44:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8011c48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011c4c:	b29b      	uxth	r3, r3
 8011c4e:	3301      	adds	r3, #1
 8011c50:	b29b      	uxth	r3, r3
 8011c52:	80fb      	strh	r3, [r7, #6]
 8011c54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011c58:	2b07      	cmp	r3, #7
 8011c5a:	ddeb      	ble.n	8011c34 <Restore_CalPar+0xa4>
   TIM_BASE_Val=List[TIM_BASE].Val;
 8011c5c:	4b16      	ldr	r3, [pc, #88]	; (8011cb8 <Restore_CalPar+0x128>)
 8011c5e:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8011c62:	4b16      	ldr	r3, [pc, #88]	; (8011cbc <Restore_CalPar+0x12c>)
 8011c64:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 8011c66:	4b14      	ldr	r3, [pc, #80]	; (8011cb8 <Restore_CalPar+0x128>)
 8011c68:	2200      	movs	r2, #0
 8011c6a:	879a      	strh	r2, [r3, #60]	; 0x3c
   for(i=Y_RANGES; i<=STANDBY; i++){
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	80fb      	strh	r3, [r7, #6]
 8011c70:	e015      	b.n	8011c9e <Restore_CalPar+0x10e>
   List[i].Flg |= UPD;
 8011c72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011c76:	4a10      	ldr	r2, [pc, #64]	; (8011cb8 <Restore_CalPar+0x128>)
 8011c78:	00db      	lsls	r3, r3, #3
 8011c7a:	4413      	add	r3, r2
 8011c7c:	799a      	ldrb	r2, [r3, #6]
 8011c7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011c82:	f042 0220 	orr.w	r2, r2, #32
 8011c86:	b2d1      	uxtb	r1, r2
 8011c88:	4a0b      	ldr	r2, [pc, #44]	; (8011cb8 <Restore_CalPar+0x128>)
 8011c8a:	00db      	lsls	r3, r3, #3
 8011c8c:	4413      	add	r3, r2
 8011c8e:	460a      	mov	r2, r1
 8011c90:	719a      	strb	r2, [r3, #6]
   for(i=Y_RANGES; i<=STANDBY; i++){
 8011c92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011c96:	b29b      	uxth	r3, r3
 8011c98:	3301      	adds	r3, #1
 8011c9a:	b29b      	uxth	r3, r3
 8011c9c:	80fb      	strh	r3, [r7, #6]
 8011c9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011ca2:	2b29      	cmp	r3, #41	; 0x29
 8011ca4:	dde5      	ble.n	8011c72 <Restore_CalPar+0xe2>
   }
   Update_Title();
 8011ca6:	f000 fd4f 	bl	8012748 <Update_Title>
   Close_Pop();
 8011caa:	f7fc ff0d 	bl	800eac8 <Close_Pop>
 }
 8011cae:	bf00      	nop
 8011cb0:	3708      	adds	r7, #8
 8011cb2:	46bd      	mov	sp, r7
 8011cb4:	bd80      	pop	{r7, pc}
 8011cb6:	bf00      	nop
 8011cb8:	20000298 	.word	0x20000298
 8011cbc:	2000281c 	.word	0x2000281c
 8011cc0:	200007a6 	.word	0x200007a6
 8011cc4:	20000538 	.word	0x20000538
 8011cc8:	200003e8 	.word	0x200003e8
 8011ccc:	08001ef8 	.word	0x08001ef8

08011cd0 <u8ToDec3>:

/*******************************************************************************
 u8ToDec3: Change Byte to 3 decimal number string
*******************************************************************************/
void u8ToDec3(char *p, char n)
{
 8011cd0:	b480      	push	{r7}
 8011cd2:	b083      	sub	sp, #12
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	6078      	str	r0, [r7, #4]
 8011cd8:	460b      	mov	r3, r1
 8011cda:	70fb      	strb	r3, [r7, #3]
    *p++ = '0'+n/100;
 8011cdc:	78fb      	ldrb	r3, [r7, #3]
 8011cde:	4a1e      	ldr	r2, [pc, #120]	; (8011d58 <u8ToDec3+0x88>)
 8011ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8011ce4:	095b      	lsrs	r3, r3, #5
 8011ce6:	b2da      	uxtb	r2, r3
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	1c59      	adds	r1, r3, #1
 8011cec:	6079      	str	r1, [r7, #4]
 8011cee:	3230      	adds	r2, #48	; 0x30
 8011cf0:	b2d2      	uxtb	r2, r2
 8011cf2:	701a      	strb	r2, [r3, #0]
    n %= 100;
 8011cf4:	78fb      	ldrb	r3, [r7, #3]
 8011cf6:	4a18      	ldr	r2, [pc, #96]	; (8011d58 <u8ToDec3+0x88>)
 8011cf8:	fba2 1203 	umull	r1, r2, r2, r3
 8011cfc:	0952      	lsrs	r2, r2, #5
 8011cfe:	2164      	movs	r1, #100	; 0x64
 8011d00:	fb01 f202 	mul.w	r2, r1, r2
 8011d04:	1a9b      	subs	r3, r3, r2
 8011d06:	70fb      	strb	r3, [r7, #3]
    *p++ = '0'+n/10;
 8011d08:	78fb      	ldrb	r3, [r7, #3]
 8011d0a:	4a14      	ldr	r2, [pc, #80]	; (8011d5c <u8ToDec3+0x8c>)
 8011d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8011d10:	08db      	lsrs	r3, r3, #3
 8011d12:	b2da      	uxtb	r2, r3
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	1c59      	adds	r1, r3, #1
 8011d18:	6079      	str	r1, [r7, #4]
 8011d1a:	3230      	adds	r2, #48	; 0x30
 8011d1c:	b2d2      	uxtb	r2, r2
 8011d1e:	701a      	strb	r2, [r3, #0]
    n %= 10;
 8011d20:	78fa      	ldrb	r2, [r7, #3]
 8011d22:	4b0e      	ldr	r3, [pc, #56]	; (8011d5c <u8ToDec3+0x8c>)
 8011d24:	fba3 1302 	umull	r1, r3, r3, r2
 8011d28:	08d9      	lsrs	r1, r3, #3
 8011d2a:	460b      	mov	r3, r1
 8011d2c:	009b      	lsls	r3, r3, #2
 8011d2e:	440b      	add	r3, r1
 8011d30:	005b      	lsls	r3, r3, #1
 8011d32:	1ad3      	subs	r3, r2, r3
 8011d34:	70fb      	strb	r3, [r7, #3]
    *p++ = '0'+n;
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	1c5a      	adds	r2, r3, #1
 8011d3a:	607a      	str	r2, [r7, #4]
 8011d3c:	78fa      	ldrb	r2, [r7, #3]
 8011d3e:	3230      	adds	r2, #48	; 0x30
 8011d40:	b2d2      	uxtb	r2, r2
 8011d42:	701a      	strb	r2, [r3, #0]
    *p = 0;
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	2200      	movs	r2, #0
 8011d48:	701a      	strb	r2, [r3, #0]
}
 8011d4a:	bf00      	nop
 8011d4c:	370c      	adds	r7, #12
 8011d4e:	46bd      	mov	sp, r7
 8011d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d54:	4770      	bx	lr
 8011d56:	bf00      	nop
 8011d58:	51eb851f 	.word	0x51eb851f
 8011d5c:	cccccccd 	.word	0xcccccccd

08011d60 <memset16>:

// 16 bit memset

void memset16(unsigned short* ptr, unsigned short value, short len)
{
 8011d60:	b480      	push	{r7}
 8011d62:	b083      	sub	sp, #12
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	6078      	str	r0, [r7, #4]
 8011d68:	460b      	mov	r3, r1
 8011d6a:	807b      	strh	r3, [r7, #2]
 8011d6c:	4613      	mov	r3, r2
 8011d6e:	803b      	strh	r3, [r7, #0]
	while(len!=0)
 8011d70:	e00a      	b.n	8011d88 <memset16+0x28>
	{
		*ptr++ = value;
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	1c9a      	adds	r2, r3, #2
 8011d76:	607a      	str	r2, [r7, #4]
 8011d78:	887a      	ldrh	r2, [r7, #2]
 8011d7a:	801a      	strh	r2, [r3, #0]
		len--;
 8011d7c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8011d80:	b29b      	uxth	r3, r3
 8011d82:	3b01      	subs	r3, #1
 8011d84:	b29b      	uxth	r3, r3
 8011d86:	803b      	strh	r3, [r7, #0]
	while(len!=0)
 8011d88:	f9b7 3000 	ldrsh.w	r3, [r7]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d1f0      	bne.n	8011d72 <memset16+0x12>
	}
}
 8011d90:	bf00      	nop
 8011d92:	bf00      	nop
 8011d94:	370c      	adds	r7, #12
 8011d96:	46bd      	mov	sp, r7
 8011d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9c:	4770      	bx	lr
	...

08011da0 <Value2Str>:

/*******************************************************************************
 Value2Str: 32λ��תeλ��Ч���ַ��� + �����ַ������ṹΪUnit[][6]��+  ģʽ
*******************************************************************************/
void Value2Str(char *p, long n, const char *pUnit, char e, char Mode)
{
 8011da0:	b580      	push	{r7, lr}
 8011da2:	b088      	sub	sp, #32
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	60f8      	str	r0, [r7, #12]
 8011da8:	60b9      	str	r1, [r7, #8]
 8011daa:	607a      	str	r2, [r7, #4]
 8011dac:	70fb      	strb	r3, [r7, #3]
  short i = 0;
 8011dae:	2300      	movs	r3, #0
 8011db0:	83fb      	strh	r3, [r7, #30]
  long m = n, c = 5;
 8011db2:	68bb      	ldr	r3, [r7, #8]
 8011db4:	61bb      	str	r3, [r7, #24]
 8011db6:	2305      	movs	r3, #5
 8011db8:	617b      	str	r3, [r7, #20]

  if(Mode == SIGN)
 8011dba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d129      	bne.n	8011e16 <Value2Str+0x76>
  {
    if(n == 0) *p++ = ' ';
 8011dc2:	68bb      	ldr	r3, [r7, #8]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d104      	bne.n	8011dd2 <Value2Str+0x32>
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	1c5a      	adds	r2, r3, #1
 8011dcc:	60fa      	str	r2, [r7, #12]
 8011dce:	2220      	movs	r2, #32
 8011dd0:	701a      	strb	r2, [r3, #0]
    if(n >  0) *p++ = '+';
 8011dd2:	68bb      	ldr	r3, [r7, #8]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	dd04      	ble.n	8011de2 <Value2Str+0x42>
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	1c5a      	adds	r2, r3, #1
 8011ddc:	60fa      	str	r2, [r7, #12]
 8011dde:	222b      	movs	r2, #43	; 0x2b
 8011de0:	701a      	strb	r2, [r3, #0]
    if(n <  0){*p++ = '-'; n = -n;}
 8011de2:	68bb      	ldr	r3, [r7, #8]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	da16      	bge.n	8011e16 <Value2Str+0x76>
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	1c5a      	adds	r2, r3, #1
 8011dec:	60fa      	str	r2, [r7, #12]
 8011dee:	222d      	movs	r2, #45	; 0x2d
 8011df0:	701a      	strb	r2, [r3, #0]
 8011df2:	68bb      	ldr	r3, [r7, #8]
 8011df4:	425b      	negs	r3, r3
 8011df6:	60bb      	str	r3, [r7, #8]
  }
  while(m >= 10){m /= 10; i++;} // ���� n ����Чλ�� i
 8011df8:	e00d      	b.n	8011e16 <Value2Str+0x76>
 8011dfa:	69bb      	ldr	r3, [r7, #24]
 8011dfc:	4a64      	ldr	r2, [pc, #400]	; (8011f90 <Value2Str+0x1f0>)
 8011dfe:	fb82 1203 	smull	r1, r2, r2, r3
 8011e02:	1092      	asrs	r2, r2, #2
 8011e04:	17db      	asrs	r3, r3, #31
 8011e06:	1ad3      	subs	r3, r2, r3
 8011e08:	61bb      	str	r3, [r7, #24]
 8011e0a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011e0e:	b29b      	uxth	r3, r3
 8011e10:	3301      	adds	r3, #1
 8011e12:	b29b      	uxth	r3, r3
 8011e14:	83fb      	strh	r3, [r7, #30]
 8011e16:	69bb      	ldr	r3, [r7, #24]
 8011e18:	2b09      	cmp	r3, #9
 8011e1a:	dcee      	bgt.n	8011dfa <Value2Str+0x5a>
  if((i%3 == 2)&&(e == 2)) e++;
 8011e1c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011e20:	4b5c      	ldr	r3, [pc, #368]	; (8011f94 <Value2Str+0x1f4>)
 8011e22:	fb83 3102 	smull	r3, r1, r3, r2
 8011e26:	17d3      	asrs	r3, r2, #31
 8011e28:	1ac9      	subs	r1, r1, r3
 8011e2a:	460b      	mov	r3, r1
 8011e2c:	005b      	lsls	r3, r3, #1
 8011e2e:	440b      	add	r3, r1
 8011e30:	1ad3      	subs	r3, r2, r3
 8011e32:	b21b      	sxth	r3, r3
 8011e34:	2b02      	cmp	r3, #2
 8011e36:	d105      	bne.n	8011e44 <Value2Str+0xa4>
 8011e38:	78fb      	ldrb	r3, [r7, #3]
 8011e3a:	2b02      	cmp	r3, #2
 8011e3c:	d102      	bne.n	8011e44 <Value2Str+0xa4>
 8011e3e:	78fb      	ldrb	r3, [r7, #3]
 8011e40:	3301      	adds	r3, #1
 8011e42:	70fb      	strb	r3, [r7, #3]
  m = n; i = 0;
 8011e44:	68bb      	ldr	r3, [r7, #8]
 8011e46:	61bb      	str	r3, [r7, #24]
 8011e48:	2300      	movs	r3, #0
 8011e4a:	83fb      	strh	r3, [r7, #30]
  while(m >= 10)
 8011e4c:	e016      	b.n	8011e7c <Value2Str+0xdc>
  {
    m /= 10;
 8011e4e:	69bb      	ldr	r3, [r7, #24]
 8011e50:	4a4f      	ldr	r2, [pc, #316]	; (8011f90 <Value2Str+0x1f0>)
 8011e52:	fb82 1203 	smull	r1, r2, r2, r3
 8011e56:	1092      	asrs	r2, r2, #2
 8011e58:	17db      	asrs	r3, r3, #31
 8011e5a:	1ad3      	subs	r3, r2, r3
 8011e5c:	61bb      	str	r3, [r7, #24]
    if(++i > e) c *= 10;        // n ����Чλ�� i ����e�������������ֵ
 8011e5e:	8bfb      	ldrh	r3, [r7, #30]
 8011e60:	3301      	adds	r3, #1
 8011e62:	b29b      	uxth	r3, r3
 8011e64:	83fb      	strh	r3, [r7, #30]
 8011e66:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011e6a:	78fb      	ldrb	r3, [r7, #3]
 8011e6c:	429a      	cmp	r2, r3
 8011e6e:	dd05      	ble.n	8011e7c <Value2Str+0xdc>
 8011e70:	697a      	ldr	r2, [r7, #20]
 8011e72:	4613      	mov	r3, r2
 8011e74:	009b      	lsls	r3, r3, #2
 8011e76:	4413      	add	r3, r2
 8011e78:	005b      	lsls	r3, r3, #1
 8011e7a:	617b      	str	r3, [r7, #20]
  while(m >= 10)
 8011e7c:	69bb      	ldr	r3, [r7, #24]
 8011e7e:	2b09      	cmp	r3, #9
 8011e80:	dce5      	bgt.n	8011e4e <Value2Str+0xae>
  }
  if(i >= e) n += c;            // n ������������ֵ
 8011e82:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011e86:	78fb      	ldrb	r3, [r7, #3]
 8011e88:	429a      	cmp	r2, r3
 8011e8a:	db03      	blt.n	8011e94 <Value2Str+0xf4>
 8011e8c:	68ba      	ldr	r2, [r7, #8]
 8011e8e:	697b      	ldr	r3, [r7, #20]
 8011e90:	4413      	add	r3, r2
 8011e92:	60bb      	str	r3, [r7, #8]
  m = n; i = 0;
 8011e94:	68bb      	ldr	r3, [r7, #8]
 8011e96:	61bb      	str	r3, [r7, #24]
 8011e98:	2300      	movs	r3, #0
 8011e9a:	83fb      	strh	r3, [r7, #30]
  while(m >= 10){m /= 10; i++;} // ���¼��� n ����Чλ�� i
 8011e9c:	e00d      	b.n	8011eba <Value2Str+0x11a>
 8011e9e:	69bb      	ldr	r3, [r7, #24]
 8011ea0:	4a3b      	ldr	r2, [pc, #236]	; (8011f90 <Value2Str+0x1f0>)
 8011ea2:	fb82 1203 	smull	r1, r2, r2, r3
 8011ea6:	1092      	asrs	r2, r2, #2
 8011ea8:	17db      	asrs	r3, r3, #31
 8011eaa:	1ad3      	subs	r3, r2, r3
 8011eac:	61bb      	str	r3, [r7, #24]
 8011eae:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011eb2:	b29b      	uxth	r3, r3
 8011eb4:	3301      	adds	r3, #1
 8011eb6:	b29b      	uxth	r3, r3
 8011eb8:	83fb      	strh	r3, [r7, #30]
 8011eba:	69bb      	ldr	r3, [r7, #24]
 8011ebc:	2b09      	cmp	r3, #9
 8011ebe:	dcee      	bgt.n	8011e9e <Value2Str+0xfe>

  m = i/3;                      // �������ٵ�λȡֵƫ����
 8011ec0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011ec4:	4a33      	ldr	r2, [pc, #204]	; (8011f94 <Value2Str+0x1f4>)
 8011ec6:	fb82 1203 	smull	r1, r2, r2, r3
 8011eca:	17db      	asrs	r3, r3, #31
 8011ecc:	1ad3      	subs	r3, r2, r3
 8011ece:	b21b      	sxth	r3, r3
 8011ed0:	61bb      	str	r3, [r7, #24]
  while(e--)
 8011ed2:	e03e      	b.n	8011f52 <Value2Str+0x1b2>
  {
    *p++ = '0'+ n/Exp(i);
 8011ed4:	8bfb      	ldrh	r3, [r7, #30]
 8011ed6:	b2db      	uxtb	r3, r3
 8011ed8:	4618      	mov	r0, r3
 8011eda:	f000 f85d 	bl	8011f98 <Exp>
 8011ede:	4602      	mov	r2, r0
 8011ee0:	68bb      	ldr	r3, [r7, #8]
 8011ee2:	fb93 f3f2 	sdiv	r3, r3, r2
 8011ee6:	b2da      	uxtb	r2, r3
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	1c59      	adds	r1, r3, #1
 8011eec:	60f9      	str	r1, [r7, #12]
 8011eee:	3230      	adds	r2, #48	; 0x30
 8011ef0:	b2d2      	uxtb	r2, r2
 8011ef2:	701a      	strb	r2, [r3, #0]
    if(e &&(i%3 == 0)) *p++ = '.';
 8011ef4:	78fb      	ldrb	r3, [r7, #3]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d012      	beq.n	8011f20 <Value2Str+0x180>
 8011efa:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011efe:	4b25      	ldr	r3, [pc, #148]	; (8011f94 <Value2Str+0x1f4>)
 8011f00:	fb83 3102 	smull	r3, r1, r3, r2
 8011f04:	17d3      	asrs	r3, r2, #31
 8011f06:	1ac9      	subs	r1, r1, r3
 8011f08:	460b      	mov	r3, r1
 8011f0a:	005b      	lsls	r3, r3, #1
 8011f0c:	440b      	add	r3, r1
 8011f0e:	1ad3      	subs	r3, r2, r3
 8011f10:	b21b      	sxth	r3, r3
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d104      	bne.n	8011f20 <Value2Str+0x180>
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	1c5a      	adds	r2, r3, #1
 8011f1a:	60fa      	str	r2, [r7, #12]
 8011f1c:	222e      	movs	r2, #46	; 0x2e
 8011f1e:	701a      	strb	r2, [r3, #0]
    n = (i < 0)? 0 : n%Exp(i);
 8011f20:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	db0c      	blt.n	8011f42 <Value2Str+0x1a2>
 8011f28:	8bfb      	ldrh	r3, [r7, #30]
 8011f2a:	b2db      	uxtb	r3, r3
 8011f2c:	4618      	mov	r0, r3
 8011f2e:	f000 f833 	bl	8011f98 <Exp>
 8011f32:	4602      	mov	r2, r0
 8011f34:	68bb      	ldr	r3, [r7, #8]
 8011f36:	fb93 f1f2 	sdiv	r1, r3, r2
 8011f3a:	fb02 f201 	mul.w	r2, r2, r1
 8011f3e:	1a9b      	subs	r3, r3, r2
 8011f40:	e000      	b.n	8011f44 <Value2Str+0x1a4>
 8011f42:	2300      	movs	r3, #0
 8011f44:	60bb      	str	r3, [r7, #8]
    i--;
 8011f46:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011f4a:	b29b      	uxth	r3, r3
 8011f4c:	3b01      	subs	r3, #1
 8011f4e:	b29b      	uxth	r3, r3
 8011f50:	83fb      	strh	r3, [r7, #30]
  while(e--)
 8011f52:	78fb      	ldrb	r3, [r7, #3]
 8011f54:	1e5a      	subs	r2, r3, #1
 8011f56:	70fa      	strb	r2, [r7, #3]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d1bb      	bne.n	8011ed4 <Value2Str+0x134>
  }
  pUnit += 6*m;                 //
 8011f5c:	69ba      	ldr	r2, [r7, #24]
 8011f5e:	4613      	mov	r3, r2
 8011f60:	005b      	lsls	r3, r3, #1
 8011f62:	4413      	add	r3, r2
 8011f64:	005b      	lsls	r3, r3, #1
 8011f66:	461a      	mov	r2, r3
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	4413      	add	r3, r2
 8011f6c:	607b      	str	r3, [r7, #4]
  do {*p++ = *pUnit;}
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	1c5a      	adds	r2, r3, #1
 8011f72:	60fa      	str	r2, [r7, #12]
 8011f74:	687a      	ldr	r2, [r7, #4]
 8011f76:	7812      	ldrb	r2, [r2, #0]
 8011f78:	701a      	strb	r2, [r3, #0]
  while(*pUnit++);              // ���������ַ��ַ���
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	1c5a      	adds	r2, r3, #1
 8011f7e:	607a      	str	r2, [r7, #4]
 8011f80:	781b      	ldrb	r3, [r3, #0]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d1f3      	bne.n	8011f6e <Value2Str+0x1ce>
}
 8011f86:	bf00      	nop
 8011f88:	bf00      	nop
 8011f8a:	3720      	adds	r7, #32
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	bd80      	pop	{r7, pc}
 8011f90:	66666667 	.word	0x66666667
 8011f94:	55555556 	.word	0x55555556

08011f98 <Exp>:

/*******************************************************************************
  ���� 10 �� x �η�
*******************************************************************************/
long Exp(char x)
{
 8011f98:	b480      	push	{r7}
 8011f9a:	b085      	sub	sp, #20
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	4603      	mov	r3, r0
 8011fa0:	71fb      	strb	r3, [r7, #7]
  long m = 1;
 8011fa2:	2301      	movs	r3, #1
 8011fa4:	60fb      	str	r3, [r7, #12]

  while(x--)
 8011fa6:	e005      	b.n	8011fb4 <Exp+0x1c>
	  m *= 10;
 8011fa8:	68fa      	ldr	r2, [r7, #12]
 8011faa:	4613      	mov	r3, r2
 8011fac:	009b      	lsls	r3, r3, #2
 8011fae:	4413      	add	r3, r2
 8011fb0:	005b      	lsls	r3, r3, #1
 8011fb2:	60fb      	str	r3, [r7, #12]
  while(x--)
 8011fb4:	79fb      	ldrb	r3, [r7, #7]
 8011fb6:	1e5a      	subs	r2, r3, #1
 8011fb8:	71fa      	strb	r2, [r7, #7]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d1f4      	bne.n	8011fa8 <Exp+0x10>
  return m;
 8011fbe:	68fb      	ldr	r3, [r7, #12]
}
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	3714      	adds	r7, #20
 8011fc4:	46bd      	mov	sp, r7
 8011fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fca:	4770      	bx	lr

08011fcc <Sqrt32>:

/*******************************************************************************
 Int_sqrt: unsigned int square root
*******************************************************************************/
short Sqrt32(int n)
{
 8011fcc:	b580      	push	{r7, lr}
 8011fce:	b084      	sub	sp, #16
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	6078      	str	r0, [r7, #4]
	int k;
  if ( n == 0 ) return 0;
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d101      	bne.n	8011fde <Sqrt32+0x12>
 8011fda:	2300      	movs	r3, #0
 8011fdc:	e019      	b.n	8012012 <Sqrt32+0x46>
  k = 2*Sqrt32(n/4)+1;
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	da00      	bge.n	8011fe6 <Sqrt32+0x1a>
 8011fe4:	3303      	adds	r3, #3
 8011fe6:	109b      	asrs	r3, r3, #2
 8011fe8:	4618      	mov	r0, r3
 8011fea:	f7ff ffef 	bl	8011fcc <Sqrt32>
 8011fee:	4603      	mov	r3, r0
 8011ff0:	005b      	lsls	r3, r3, #1
 8011ff2:	3301      	adds	r3, #1
 8011ff4:	60fb      	str	r3, [r7, #12]
  if ( k*k > n ) return k-1;
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	fb03 f303 	mul.w	r3, r3, r3
 8011ffc:	687a      	ldr	r2, [r7, #4]
 8011ffe:	429a      	cmp	r2, r3
 8012000:	da05      	bge.n	801200e <Sqrt32+0x42>
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	b29b      	uxth	r3, r3
 8012006:	3b01      	subs	r3, #1
 8012008:	b29b      	uxth	r3, r3
 801200a:	b21b      	sxth	r3, r3
 801200c:	e001      	b.n	8012012 <Sqrt32+0x46>
  else return k;
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	b21b      	sxth	r3, r3
}
 8012012:	4618      	mov	r0, r3
 8012014:	3710      	adds	r7, #16
 8012016:	46bd      	mov	sp, r7
 8012018:	bd80      	pop	{r7, pc}
	...

0801201c <u16ToDec4Str>:

/*******************************************************************************
 u16ToDec4Str: �޷���16λ��������ת4λʮ�����ַ�������Ч����ǰ��ո�
*******************************************************************************/
void u16ToDec4Str(char *p, short n)
{
 801201c:	b480      	push	{r7}
 801201e:	b083      	sub	sp, #12
 8012020:	af00      	add	r7, sp, #0
 8012022:	6078      	str	r0, [r7, #4]
 8012024:	460b      	mov	r3, r1
 8012026:	807b      	strh	r3, [r7, #2]
  if(n/10000){
 8012028:	887b      	ldrh	r3, [r7, #2]
 801202a:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 801202e:	330f      	adds	r3, #15
 8012030:	b29b      	uxth	r3, r3
 8012032:	f644 621e 	movw	r2, #19998	; 0x4e1e
 8012036:	4293      	cmp	r3, r2
 8012038:	d917      	bls.n	801206a <u16ToDec4Str+0x4e>
    *p++ = 'O';
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	1c5a      	adds	r2, r3, #1
 801203e:	607a      	str	r2, [r7, #4]
 8012040:	224f      	movs	r2, #79	; 0x4f
 8012042:	701a      	strb	r2, [r3, #0]
    *p++ = 'v';
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	1c5a      	adds	r2, r3, #1
 8012048:	607a      	str	r2, [r7, #4]
 801204a:	2276      	movs	r2, #118	; 0x76
 801204c:	701a      	strb	r2, [r3, #0]
    *p++ = 'e';
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	1c5a      	adds	r2, r3, #1
 8012052:	607a      	str	r2, [r7, #4]
 8012054:	2265      	movs	r2, #101	; 0x65
 8012056:	701a      	strb	r2, [r3, #0]
    *p++ = 'r';
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	1c5a      	adds	r2, r3, #1
 801205c:	607a      	str	r2, [r7, #4]
 801205e:	2272      	movs	r2, #114	; 0x72
 8012060:	701a      	strb	r2, [r3, #0]
    *p   = 0;
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	2200      	movs	r2, #0
 8012066:	701a      	strb	r2, [r3, #0]
    return;
 8012068:	e07e      	b.n	8012168 <u16ToDec4Str+0x14c>
  }
  *p++ = '0'+n/1000;
 801206a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801206e:	4a41      	ldr	r2, [pc, #260]	; (8012174 <u16ToDec4Str+0x158>)
 8012070:	fb82 1203 	smull	r1, r2, r2, r3
 8012074:	1192      	asrs	r2, r2, #6
 8012076:	17db      	asrs	r3, r3, #31
 8012078:	1ad3      	subs	r3, r2, r3
 801207a:	b21b      	sxth	r3, r3
 801207c:	b2da      	uxtb	r2, r3
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	1c59      	adds	r1, r3, #1
 8012082:	6079      	str	r1, [r7, #4]
 8012084:	3230      	adds	r2, #48	; 0x30
 8012086:	b2d2      	uxtb	r2, r2
 8012088:	701a      	strb	r2, [r3, #0]
  n %= 1000;
 801208a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801208e:	4a39      	ldr	r2, [pc, #228]	; (8012174 <u16ToDec4Str+0x158>)
 8012090:	fb82 1203 	smull	r1, r2, r2, r3
 8012094:	1191      	asrs	r1, r2, #6
 8012096:	17da      	asrs	r2, r3, #31
 8012098:	1a8a      	subs	r2, r1, r2
 801209a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801209e:	fb01 f202 	mul.w	r2, r1, r2
 80120a2:	1a9b      	subs	r3, r3, r2
 80120a4:	807b      	strh	r3, [r7, #2]
  *p++ = '0'+n/100;
 80120a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80120aa:	4a33      	ldr	r2, [pc, #204]	; (8012178 <u16ToDec4Str+0x15c>)
 80120ac:	fb82 1203 	smull	r1, r2, r2, r3
 80120b0:	1152      	asrs	r2, r2, #5
 80120b2:	17db      	asrs	r3, r3, #31
 80120b4:	1ad3      	subs	r3, r2, r3
 80120b6:	b21b      	sxth	r3, r3
 80120b8:	b2da      	uxtb	r2, r3
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	1c59      	adds	r1, r3, #1
 80120be:	6079      	str	r1, [r7, #4]
 80120c0:	3230      	adds	r2, #48	; 0x30
 80120c2:	b2d2      	uxtb	r2, r2
 80120c4:	701a      	strb	r2, [r3, #0]
  n %= 100;
 80120c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80120ca:	4a2b      	ldr	r2, [pc, #172]	; (8012178 <u16ToDec4Str+0x15c>)
 80120cc:	fb82 1203 	smull	r1, r2, r2, r3
 80120d0:	1151      	asrs	r1, r2, #5
 80120d2:	17da      	asrs	r2, r3, #31
 80120d4:	1a8a      	subs	r2, r1, r2
 80120d6:	2164      	movs	r1, #100	; 0x64
 80120d8:	fb01 f202 	mul.w	r2, r1, r2
 80120dc:	1a9b      	subs	r3, r3, r2
 80120de:	807b      	strh	r3, [r7, #2]
  *p++ = '0'+n/10;
 80120e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80120e4:	4a25      	ldr	r2, [pc, #148]	; (801217c <u16ToDec4Str+0x160>)
 80120e6:	fb82 1203 	smull	r1, r2, r2, r3
 80120ea:	1092      	asrs	r2, r2, #2
 80120ec:	17db      	asrs	r3, r3, #31
 80120ee:	1ad3      	subs	r3, r2, r3
 80120f0:	b21b      	sxth	r3, r3
 80120f2:	b2da      	uxtb	r2, r3
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	1c59      	adds	r1, r3, #1
 80120f8:	6079      	str	r1, [r7, #4]
 80120fa:	3230      	adds	r2, #48	; 0x30
 80120fc:	b2d2      	uxtb	r2, r2
 80120fe:	701a      	strb	r2, [r3, #0]
  n %= 10;
 8012100:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012104:	4b1d      	ldr	r3, [pc, #116]	; (801217c <u16ToDec4Str+0x160>)
 8012106:	fb83 1302 	smull	r1, r3, r3, r2
 801210a:	1099      	asrs	r1, r3, #2
 801210c:	17d3      	asrs	r3, r2, #31
 801210e:	1ac9      	subs	r1, r1, r3
 8012110:	460b      	mov	r3, r1
 8012112:	009b      	lsls	r3, r3, #2
 8012114:	440b      	add	r3, r1
 8012116:	005b      	lsls	r3, r3, #1
 8012118:	1ad3      	subs	r3, r2, r3
 801211a:	807b      	strh	r3, [r7, #2]
  *p++ = '0'+n;
 801211c:	887b      	ldrh	r3, [r7, #2]
 801211e:	b2da      	uxtb	r2, r3
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	1c59      	adds	r1, r3, #1
 8012124:	6079      	str	r1, [r7, #4]
 8012126:	3230      	adds	r2, #48	; 0x30
 8012128:	b2d2      	uxtb	r2, r2
 801212a:	701a      	strb	r2, [r3, #0]
  *p = 0;
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	2200      	movs	r2, #0
 8012130:	701a      	strb	r2, [r3, #0]
  if(p[-4] == '0'){
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	3b04      	subs	r3, #4
 8012136:	781b      	ldrb	r3, [r3, #0]
 8012138:	2b30      	cmp	r3, #48	; 0x30
 801213a:	d115      	bne.n	8012168 <u16ToDec4Str+0x14c>
    p[-4] = ' ';
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	3b04      	subs	r3, #4
 8012140:	2220      	movs	r2, #32
 8012142:	701a      	strb	r2, [r3, #0]
    if(p[-3] == '0'){
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	3b03      	subs	r3, #3
 8012148:	781b      	ldrb	r3, [r3, #0]
 801214a:	2b30      	cmp	r3, #48	; 0x30
 801214c:	d10c      	bne.n	8012168 <u16ToDec4Str+0x14c>
      p[-3] = ' ';
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	3b03      	subs	r3, #3
 8012152:	2220      	movs	r2, #32
 8012154:	701a      	strb	r2, [r3, #0]
      if(p[-2] == '0') p[-2] = ' ';
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	3b02      	subs	r3, #2
 801215a:	781b      	ldrb	r3, [r3, #0]
 801215c:	2b30      	cmp	r3, #48	; 0x30
 801215e:	d103      	bne.n	8012168 <u16ToDec4Str+0x14c>
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	3b02      	subs	r3, #2
 8012164:	2220      	movs	r2, #32
 8012166:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8012168:	370c      	adds	r7, #12
 801216a:	46bd      	mov	sp, r7
 801216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012170:	4770      	bx	lr
 8012172:	bf00      	nop
 8012174:	10624dd3 	.word	0x10624dd3
 8012178:	51eb851f 	.word	0x51eb851f
 801217c:	66666667 	.word	0x66666667

08012180 <lcd_write_cmd_data>:
#include "Func.h"

unsigned short data[15];

void lcd_write_cmd_data( unsigned short Cmd, short Len, unsigned short *Data )
{
 8012180:	b580      	push	{r7, lr}
 8012182:	b082      	sub	sp, #8
 8012184:	af00      	add	r7, sp, #0
 8012186:	4603      	mov	r3, r0
 8012188:	603a      	str	r2, [r7, #0]
 801218a:	80fb      	strh	r3, [r7, #6]
 801218c:	460b      	mov	r3, r1
 801218e:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( LcdRs_GPIO_Port, LcdRs_Pin, GPIO_PIN_RESET); // low for command
 8012190:	2200      	movs	r2, #0
 8012192:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8012196:	480e      	ldr	r0, [pc, #56]	; (80121d0 <lcd_write_cmd_data+0x50>)
 8012198:	f007 ff10 	bl	8019fbc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (unsigned char*)&Cmd, 1, 1);// timeout 1 ms
 801219c:	1db9      	adds	r1, r7, #6
 801219e:	2301      	movs	r3, #1
 80121a0:	2201      	movs	r2, #1
 80121a2:	480c      	ldr	r0, [pc, #48]	; (80121d4 <lcd_write_cmd_data+0x54>)
 80121a4:	f00a fa0f 	bl	801c5c6 <HAL_SPI_Transmit>

	if(Len !=0)
 80121a8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d00b      	beq.n	80121c8 <lcd_write_cmd_data+0x48>
	{
		HAL_GPIO_WritePin( LcdRs_GPIO_Port, LcdRs_Pin, GPIO_PIN_SET);  //high for data
 80121b0:	2201      	movs	r2, #1
 80121b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80121b6:	4806      	ldr	r0, [pc, #24]	; (80121d0 <lcd_write_cmd_data+0x50>)
 80121b8:	f007 ff00 	bl	8019fbc <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, (unsigned char*)Data, Len, 1);// timeout 1 ms
 80121bc:	88ba      	ldrh	r2, [r7, #4]
 80121be:	2301      	movs	r3, #1
 80121c0:	6839      	ldr	r1, [r7, #0]
 80121c2:	4804      	ldr	r0, [pc, #16]	; (80121d4 <lcd_write_cmd_data+0x54>)
 80121c4:	f00a f9ff 	bl	801c5c6 <HAL_SPI_Transmit>
	}
}
 80121c8:	bf00      	nop
 80121ca:	3708      	adds	r7, #8
 80121cc:	46bd      	mov	sp, r7
 80121ce:	bd80      	pop	{r7, pc}
 80121d0:	40020800 	.word	0x40020800
 80121d4:	200069cc 	.word	0x200069cc

080121d8 <Init_LCD>:

// initialize the LCD
void Init_LCD(void)
{
 80121d8:	b580      	push	{r7, lr}
 80121da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 80121dc:	2200      	movs	r2, #0
 80121de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80121e2:	4885      	ldr	r0, [pc, #532]	; (80123f8 <Init_LCD+0x220>)
 80121e4:	f007 feea 	bl	8019fbc <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin( Dres_GPIO_Port, Dres_Pin, GPIO_PIN_SET);  //display reset
 80121e8:	2201      	movs	r2, #1
 80121ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80121ee:	4883      	ldr	r0, [pc, #524]	; (80123fc <Init_LCD+0x224>)
 80121f0:	f007 fee4 	bl	8019fbc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80121f4:	2001      	movs	r0, #1
 80121f6:	f006 fb03 	bl	8018800 <HAL_Delay>
	HAL_GPIO_WritePin( Dres_GPIO_Port, Dres_Pin, GPIO_PIN_RESET);
 80121fa:	2200      	movs	r2, #0
 80121fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012200:	487e      	ldr	r0, [pc, #504]	; (80123fc <Init_LCD+0x224>)
 8012202:	f007 fedb 	bl	8019fbc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8012206:	200a      	movs	r0, #10
 8012208:	f006 fafa 	bl	8018800 <HAL_Delay>
	HAL_GPIO_WritePin( Dres_GPIO_Port, Dres_Pin, GPIO_PIN_SET);
 801220c:	2201      	movs	r2, #1
 801220e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012212:	487a      	ldr	r0, [pc, #488]	; (80123fc <Init_LCD+0x224>)
 8012214:	f007 fed2 	bl	8019fbc <HAL_GPIO_WritePin>
	HAL_Delay(120);
 8012218:	2078      	movs	r0, #120	; 0x78
 801221a:	f006 faf1 	bl	8018800 <HAL_Delay>

	data[0]=0;
 801221e:	4b78      	ldr	r3, [pc, #480]	; (8012400 <Init_LCD+0x228>)
 8012220:	2200      	movs	r2, #0
 8012222:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0xb0, 1, data);  //set interface
 8012224:	4a76      	ldr	r2, [pc, #472]	; (8012400 <Init_LCD+0x228>)
 8012226:	2101      	movs	r1, #1
 8012228:	20b0      	movs	r0, #176	; 0xb0
 801222a:	f7ff ffa9 	bl	8012180 <lcd_write_cmd_data>
	lcd_write_cmd_data(0x11, 0, data);  //sleep
 801222e:	4a74      	ldr	r2, [pc, #464]	; (8012400 <Init_LCD+0x228>)
 8012230:	2100      	movs	r1, #0
 8012232:	2011      	movs	r0, #17
 8012234:	f7ff ffa4 	bl	8012180 <lcd_write_cmd_data>
	HAL_Delay(120);
 8012238:	2078      	movs	r0, #120	; 0x78
 801223a:	f006 fae1 	bl	8018800 <HAL_Delay>
	data[0]=0x55;
 801223e:	4b70      	ldr	r3, [pc, #448]	; (8012400 <Init_LCD+0x228>)
 8012240:	2255      	movs	r2, #85	; 0x55
 8012242:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0x3A, 1, data);  //set pixels to 16 bit
 8012244:	4a6e      	ldr	r2, [pc, #440]	; (8012400 <Init_LCD+0x228>)
 8012246:	2101      	movs	r1, #1
 8012248:	203a      	movs	r0, #58	; 0x3a
 801224a:	f7ff ff99 	bl	8012180 <lcd_write_cmd_data>
	data[0]=data[1]=9;
 801224e:	4b6c      	ldr	r3, [pc, #432]	; (8012400 <Init_LCD+0x228>)
 8012250:	2209      	movs	r2, #9
 8012252:	805a      	strh	r2, [r3, #2]
 8012254:	4b6a      	ldr	r3, [pc, #424]	; (8012400 <Init_LCD+0x228>)
 8012256:	885a      	ldrh	r2, [r3, #2]
 8012258:	4b69      	ldr	r3, [pc, #420]	; (8012400 <Init_LCD+0x228>)
 801225a:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0xc0, 2, data);  //set power
 801225c:	4a68      	ldr	r2, [pc, #416]	; (8012400 <Init_LCD+0x228>)
 801225e:	2102      	movs	r1, #2
 8012260:	20c0      	movs	r0, #192	; 0xc0
 8012262:	f7ff ff8d 	bl	8012180 <lcd_write_cmd_data>
	data[0]= 0x41;
 8012266:	4b66      	ldr	r3, [pc, #408]	; (8012400 <Init_LCD+0x228>)
 8012268:	2241      	movs	r2, #65	; 0x41
 801226a:	801a      	strh	r2, [r3, #0]
	data[1]=0;
 801226c:	4b64      	ldr	r3, [pc, #400]	; (8012400 <Init_LCD+0x228>)
 801226e:	2200      	movs	r2, #0
 8012270:	805a      	strh	r2, [r3, #2]
	lcd_write_cmd_data(0xc1, 2, data);  //set power
 8012272:	4a63      	ldr	r2, [pc, #396]	; (8012400 <Init_LCD+0x228>)
 8012274:	2102      	movs	r1, #2
 8012276:	20c1      	movs	r0, #193	; 0xc1
 8012278:	f7ff ff82 	bl	8012180 <lcd_write_cmd_data>
	data[0]= 0x33;
 801227c:	4b60      	ldr	r3, [pc, #384]	; (8012400 <Init_LCD+0x228>)
 801227e:	2233      	movs	r2, #51	; 0x33
 8012280:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0xc2, 1, data);  //set power
 8012282:	4a5f      	ldr	r2, [pc, #380]	; (8012400 <Init_LCD+0x228>)
 8012284:	2101      	movs	r1, #1
 8012286:	20c2      	movs	r0, #194	; 0xc2
 8012288:	f7ff ff7a 	bl	8012180 <lcd_write_cmd_data>
	data[0]=data[1]=0;
 801228c:	4b5c      	ldr	r3, [pc, #368]	; (8012400 <Init_LCD+0x228>)
 801228e:	2200      	movs	r2, #0
 8012290:	805a      	strh	r2, [r3, #2]
 8012292:	4b5b      	ldr	r3, [pc, #364]	; (8012400 <Init_LCD+0x228>)
 8012294:	885a      	ldrh	r2, [r3, #2]
 8012296:	4b5a      	ldr	r3, [pc, #360]	; (8012400 <Init_LCD+0x228>)
 8012298:	801a      	strh	r2, [r3, #0]
	data[2]=data[3]=0;  //#3 may be 0x36
 801229a:	4b59      	ldr	r3, [pc, #356]	; (8012400 <Init_LCD+0x228>)
 801229c:	2200      	movs	r2, #0
 801229e:	80da      	strh	r2, [r3, #6]
 80122a0:	4b57      	ldr	r3, [pc, #348]	; (8012400 <Init_LCD+0x228>)
 80122a2:	88da      	ldrh	r2, [r3, #6]
 80122a4:	4b56      	ldr	r3, [pc, #344]	; (8012400 <Init_LCD+0x228>)
 80122a6:	809a      	strh	r2, [r3, #4]
	lcd_write_cmd_data(0xc5, 4, data);  //Vcom control
 80122a8:	4a55      	ldr	r2, [pc, #340]	; (8012400 <Init_LCD+0x228>)
 80122aa:	2104      	movs	r1, #4
 80122ac:	20c5      	movs	r0, #197	; 0xc5
 80122ae:	f7ff ff67 	bl	8012180 <lcd_write_cmd_data>

	data[0]=  0;
 80122b2:	4b53      	ldr	r3, [pc, #332]	; (8012400 <Init_LCD+0x228>)
 80122b4:	2200      	movs	r2, #0
 80122b6:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0x36, 1, data);  //madctl
 80122b8:	4a51      	ldr	r2, [pc, #324]	; (8012400 <Init_LCD+0x228>)
 80122ba:	2101      	movs	r1, #1
 80122bc:	2036      	movs	r0, #54	; 0x36
 80122be:	f7ff ff5f 	bl	8012180 <lcd_write_cmd_data>
	 Digital Gamma Control 1
	-1, 0xE2, 0x0F, 0x32, 0x2E, 0x0B, 0x0D, 0x05, 0x47, 0x75,
	          0x37, 0x06, 0x10, 0x03, 0x24, 0x20, 0x00,
    SPI_TRANSFER(0xE0 Positive Gamma Control, 0x00, 0x2C, 0x2C, 0x0B, 0x0C, 0x04, 0x4C, 0x64, 0x36, 0x03, 0x0E, 0x01, 0x10, 0x01, 0x00);
    SPI_TRANSFER(0xE1 Negative Gamma Control, 0x0F, 0x37, 0x37, 0x0C, 0x0F, 0x05, 0x50, 0x32, 0x36, 0x04, 0x0B, 0x00, 0x19, 0x14, 0x0F); */
	data[0]=data[14]=  0;
 80122c2:	4b4f      	ldr	r3, [pc, #316]	; (8012400 <Init_LCD+0x228>)
 80122c4:	2200      	movs	r2, #0
 80122c6:	839a      	strh	r2, [r3, #28]
 80122c8:	4b4d      	ldr	r3, [pc, #308]	; (8012400 <Init_LCD+0x228>)
 80122ca:	8b9a      	ldrh	r2, [r3, #28]
 80122cc:	4b4c      	ldr	r3, [pc, #304]	; (8012400 <Init_LCD+0x228>)
 80122ce:	801a      	strh	r2, [r3, #0]
	data[1]=data[2]=   0x2C;
 80122d0:	4b4b      	ldr	r3, [pc, #300]	; (8012400 <Init_LCD+0x228>)
 80122d2:	222c      	movs	r2, #44	; 0x2c
 80122d4:	809a      	strh	r2, [r3, #4]
 80122d6:	4b4a      	ldr	r3, [pc, #296]	; (8012400 <Init_LCD+0x228>)
 80122d8:	889a      	ldrh	r2, [r3, #4]
 80122da:	4b49      	ldr	r3, [pc, #292]	; (8012400 <Init_LCD+0x228>)
 80122dc:	805a      	strh	r2, [r3, #2]
	data[3]=  0x0B;
 80122de:	4b48      	ldr	r3, [pc, #288]	; (8012400 <Init_LCD+0x228>)
 80122e0:	220b      	movs	r2, #11
 80122e2:	80da      	strh	r2, [r3, #6]
	data[4]=  0x0C;
 80122e4:	4b46      	ldr	r3, [pc, #280]	; (8012400 <Init_LCD+0x228>)
 80122e6:	220c      	movs	r2, #12
 80122e8:	811a      	strh	r2, [r3, #8]
	data[5]=  0x04;
 80122ea:	4b45      	ldr	r3, [pc, #276]	; (8012400 <Init_LCD+0x228>)
 80122ec:	2204      	movs	r2, #4
 80122ee:	815a      	strh	r2, [r3, #10]
	data[6]=  0x4C;
 80122f0:	4b43      	ldr	r3, [pc, #268]	; (8012400 <Init_LCD+0x228>)
 80122f2:	224c      	movs	r2, #76	; 0x4c
 80122f4:	819a      	strh	r2, [r3, #12]
	data[7]=  0x64;
 80122f6:	4b42      	ldr	r3, [pc, #264]	; (8012400 <Init_LCD+0x228>)
 80122f8:	2264      	movs	r2, #100	; 0x64
 80122fa:	81da      	strh	r2, [r3, #14]
	data[8]=  0x36;
 80122fc:	4b40      	ldr	r3, [pc, #256]	; (8012400 <Init_LCD+0x228>)
 80122fe:	2236      	movs	r2, #54	; 0x36
 8012300:	821a      	strh	r2, [r3, #16]
	data[9]=  0x03;
 8012302:	4b3f      	ldr	r3, [pc, #252]	; (8012400 <Init_LCD+0x228>)
 8012304:	2203      	movs	r2, #3
 8012306:	825a      	strh	r2, [r3, #18]
	data[10]= 0x0E;
 8012308:	4b3d      	ldr	r3, [pc, #244]	; (8012400 <Init_LCD+0x228>)
 801230a:	220e      	movs	r2, #14
 801230c:	829a      	strh	r2, [r3, #20]
	data[11]=data[13]= 0x2C;
 801230e:	4b3c      	ldr	r3, [pc, #240]	; (8012400 <Init_LCD+0x228>)
 8012310:	222c      	movs	r2, #44	; 0x2c
 8012312:	835a      	strh	r2, [r3, #26]
 8012314:	4b3a      	ldr	r3, [pc, #232]	; (8012400 <Init_LCD+0x228>)
 8012316:	8b5a      	ldrh	r2, [r3, #26]
 8012318:	4b39      	ldr	r3, [pc, #228]	; (8012400 <Init_LCD+0x228>)
 801231a:	82da      	strh	r2, [r3, #22]
	data[12]= 0x10;
 801231c:	4b38      	ldr	r3, [pc, #224]	; (8012400 <Init_LCD+0x228>)
 801231e:	2210      	movs	r2, #16
 8012320:	831a      	strh	r2, [r3, #24]
	lcd_write_cmd_data(0xe0, 15, data);  //positive gamma control
 8012322:	4a37      	ldr	r2, [pc, #220]	; (8012400 <Init_LCD+0x228>)
 8012324:	210f      	movs	r1, #15
 8012326:	20e0      	movs	r0, #224	; 0xe0
 8012328:	f7ff ff2a 	bl	8012180 <lcd_write_cmd_data>

	data[0]=data[4]= data[14]= 0x0F;
 801232c:	4b34      	ldr	r3, [pc, #208]	; (8012400 <Init_LCD+0x228>)
 801232e:	220f      	movs	r2, #15
 8012330:	839a      	strh	r2, [r3, #28]
 8012332:	4b33      	ldr	r3, [pc, #204]	; (8012400 <Init_LCD+0x228>)
 8012334:	8b9a      	ldrh	r2, [r3, #28]
 8012336:	4b32      	ldr	r3, [pc, #200]	; (8012400 <Init_LCD+0x228>)
 8012338:	811a      	strh	r2, [r3, #8]
 801233a:	4b31      	ldr	r3, [pc, #196]	; (8012400 <Init_LCD+0x228>)
 801233c:	891a      	ldrh	r2, [r3, #8]
 801233e:	4b30      	ldr	r3, [pc, #192]	; (8012400 <Init_LCD+0x228>)
 8012340:	801a      	strh	r2, [r3, #0]
	data[1]=data[2]= 0x37;
 8012342:	4b2f      	ldr	r3, [pc, #188]	; (8012400 <Init_LCD+0x228>)
 8012344:	2237      	movs	r2, #55	; 0x37
 8012346:	809a      	strh	r2, [r3, #4]
 8012348:	4b2d      	ldr	r3, [pc, #180]	; (8012400 <Init_LCD+0x228>)
 801234a:	889a      	ldrh	r2, [r3, #4]
 801234c:	4b2c      	ldr	r3, [pc, #176]	; (8012400 <Init_LCD+0x228>)
 801234e:	805a      	strh	r2, [r3, #2]
	data[3]=  0x0C;
 8012350:	4b2b      	ldr	r3, [pc, #172]	; (8012400 <Init_LCD+0x228>)
 8012352:	220c      	movs	r2, #12
 8012354:	80da      	strh	r2, [r3, #6]
	data[5]=  0x05;
 8012356:	4b2a      	ldr	r3, [pc, #168]	; (8012400 <Init_LCD+0x228>)
 8012358:	2205      	movs	r2, #5
 801235a:	815a      	strh	r2, [r3, #10]
	data[6]=  0x50;
 801235c:	4b28      	ldr	r3, [pc, #160]	; (8012400 <Init_LCD+0x228>)
 801235e:	2250      	movs	r2, #80	; 0x50
 8012360:	819a      	strh	r2, [r3, #12]
	data[7]=  0x32;
 8012362:	4b27      	ldr	r3, [pc, #156]	; (8012400 <Init_LCD+0x228>)
 8012364:	2232      	movs	r2, #50	; 0x32
 8012366:	81da      	strh	r2, [r3, #14]
	data[8]=  0x36;
 8012368:	4b25      	ldr	r3, [pc, #148]	; (8012400 <Init_LCD+0x228>)
 801236a:	2236      	movs	r2, #54	; 0x36
 801236c:	821a      	strh	r2, [r3, #16]
	data[9]=  0x04;
 801236e:	4b24      	ldr	r3, [pc, #144]	; (8012400 <Init_LCD+0x228>)
 8012370:	2204      	movs	r2, #4
 8012372:	825a      	strh	r2, [r3, #18]
	data[10]= 0x0B;
 8012374:	4b22      	ldr	r3, [pc, #136]	; (8012400 <Init_LCD+0x228>)
 8012376:	220b      	movs	r2, #11
 8012378:	829a      	strh	r2, [r3, #20]
	data[11]= 0;
 801237a:	4b21      	ldr	r3, [pc, #132]	; (8012400 <Init_LCD+0x228>)
 801237c:	2200      	movs	r2, #0
 801237e:	82da      	strh	r2, [r3, #22]
	data[12]= 0x19;
 8012380:	4b1f      	ldr	r3, [pc, #124]	; (8012400 <Init_LCD+0x228>)
 8012382:	2219      	movs	r2, #25
 8012384:	831a      	strh	r2, [r3, #24]
	data[13]= 0x14;
 8012386:	4b1e      	ldr	r3, [pc, #120]	; (8012400 <Init_LCD+0x228>)
 8012388:	2214      	movs	r2, #20
 801238a:	835a      	strh	r2, [r3, #26]
	lcd_write_cmd_data(0xe1, 15, data);  //Negitive gamma control
 801238c:	4a1c      	ldr	r2, [pc, #112]	; (8012400 <Init_LCD+0x228>)
 801238e:	210f      	movs	r1, #15
 8012390:	20e1      	movs	r0, #225	; 0xe1
 8012392:	f7ff fef5 	bl	8012180 <lcd_write_cmd_data>

//	SPI_TRANSFER(0xB6/*Display Function Control*/, 0, /*ISC=2*/2, /*Display Height h=*/59); // Actual display height = (h+1)*8 so (59+1)*8=480
	data[0]=0;
 8012396:	4b1a      	ldr	r3, [pc, #104]	; (8012400 <Init_LCD+0x228>)
 8012398:	2200      	movs	r2, #0
 801239a:	801a      	strh	r2, [r3, #0]
	data[1]=2;
 801239c:	4b18      	ldr	r3, [pc, #96]	; (8012400 <Init_LCD+0x228>)
 801239e:	2202      	movs	r2, #2
 80123a0:	805a      	strh	r2, [r3, #2]
	data[2]=59;
 80123a2:	4b17      	ldr	r3, [pc, #92]	; (8012400 <Init_LCD+0x228>)
 80123a4:	223b      	movs	r2, #59	; 0x3b
 80123a6:	809a      	strh	r2, [r3, #4]
	lcd_write_cmd_data(0xb6, 3, data);  //display function control
 80123a8:	4a15      	ldr	r2, [pc, #84]	; (8012400 <Init_LCD+0x228>)
 80123aa:	2103      	movs	r1, #3
 80123ac:	20b6      	movs	r0, #182	; 0xb6
 80123ae:	f7ff fee7 	bl	8012180 <lcd_write_cmd_data>

	lcd_write_cmd_data(0x11, 0, data);  //sleep
 80123b2:	4a13      	ldr	r2, [pc, #76]	; (8012400 <Init_LCD+0x228>)
 80123b4:	2100      	movs	r1, #0
 80123b6:	2011      	movs	r0, #17
 80123b8:	f7ff fee2 	bl	8012180 <lcd_write_cmd_data>
	HAL_Delay(120);
 80123bc:	2078      	movs	r0, #120	; 0x78
 80123be:	f006 fa1f 	bl	8018800 <HAL_Delay>
	lcd_write_cmd_data(0x29, 0, data);  //display on
 80123c2:	4a0f      	ldr	r2, [pc, #60]	; (8012400 <Init_LCD+0x228>)
 80123c4:	2100      	movs	r1, #0
 80123c6:	2029      	movs	r0, #41	; 0x29
 80123c8:	f7ff feda 	bl	8012180 <lcd_write_cmd_data>
	lcd_write_cmd_data(0x38, 0, data);  //idle off
 80123cc:	4a0c      	ldr	r2, [pc, #48]	; (8012400 <Init_LCD+0x228>)
 80123ce:	2100      	movs	r1, #0
 80123d0:	2038      	movs	r0, #56	; 0x38
 80123d2:	f7ff fed5 	bl	8012180 <lcd_write_cmd_data>
	lcd_write_cmd_data(0x13, 0, data);  //Normal Display Mode ON
 80123d6:	4a0a      	ldr	r2, [pc, #40]	; (8012400 <Init_LCD+0x228>)
 80123d8:	2100      	movs	r1, #0
 80123da:	2013      	movs	r0, #19
 80123dc:	f7ff fed0 	bl	8012180 <lcd_write_cmd_data>

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);  //disable lcd controller
 80123e0:	2201      	movs	r2, #1
 80123e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80123e6:	4804      	ldr	r0, [pc, #16]	; (80123f8 <Init_LCD+0x220>)
 80123e8:	f007 fde8 	bl	8019fbc <HAL_GPIO_WritePin>

	LCD_ClrScrn(0);  //clear screen to black
 80123ec:	2000      	movs	r0, #0
 80123ee:	f000 f809 	bl	8012404 <LCD_ClrScrn>
}
 80123f2:	bf00      	nop
 80123f4:	bd80      	pop	{r7, pc}
 80123f6:	bf00      	nop
 80123f8:	40020800 	.word	0x40020800
 80123fc:	40020400 	.word	0x40020400
 8012400:	20002824 	.word	0x20002824

08012404 <LCD_ClrScrn>:

void LCD_ClrScrn(unsigned short Color)
{
 8012404:	b580      	push	{r7, lr}
 8012406:	b084      	sub	sp, #16
 8012408:	af00      	add	r7, sp, #0
 801240a:	4603      	mov	r3, r0
 801240c:	80fb      	strh	r3, [r7, #6]
short y;
unsigned short *ptr;

ptr = malloc(320*2);
 801240e:	f44f 7020 	mov.w	r0, #640	; 0x280
 8012412:	f010 fe0b 	bl	802302c <malloc>
 8012416:	4603      	mov	r3, r0
 8012418:	60bb      	str	r3, [r7, #8]
HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 801241a:	2200      	movs	r2, #0
 801241c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012420:	483d      	ldr	r0, [pc, #244]	; (8012518 <LCD_ClrScrn+0x114>)
 8012422:	f007 fdcb 	bl	8019fbc <HAL_GPIO_WritePin>

for(y=0; y<480; ++y )
 8012426:	2300      	movs	r3, #0
 8012428:	81fb      	strh	r3, [r7, #14]
 801242a:	e03c      	b.n	80124a6 <LCD_ClrScrn+0xa2>
{
	data[0]=data[1]= 0;
 801242c:	4b3b      	ldr	r3, [pc, #236]	; (801251c <LCD_ClrScrn+0x118>)
 801242e:	2200      	movs	r2, #0
 8012430:	805a      	strh	r2, [r3, #2]
 8012432:	4b3a      	ldr	r3, [pc, #232]	; (801251c <LCD_ClrScrn+0x118>)
 8012434:	885a      	ldrh	r2, [r3, #2]
 8012436:	4b39      	ldr	r3, [pc, #228]	; (801251c <LCD_ClrScrn+0x118>)
 8012438:	801a      	strh	r2, [r3, #0]
	data[2]= 319>>8;
 801243a:	4b38      	ldr	r3, [pc, #224]	; (801251c <LCD_ClrScrn+0x118>)
 801243c:	2201      	movs	r2, #1
 801243e:	809a      	strh	r2, [r3, #4]
	data[3]= 319 & 0xFF;
 8012440:	4b36      	ldr	r3, [pc, #216]	; (801251c <LCD_ClrScrn+0x118>)
 8012442:	223f      	movs	r2, #63	; 0x3f
 8012444:	80da      	strh	r2, [r3, #6]
	lcd_write_cmd_data(0x2A, 4, data);  //set x
 8012446:	4a35      	ldr	r2, [pc, #212]	; (801251c <LCD_ClrScrn+0x118>)
 8012448:	2104      	movs	r1, #4
 801244a:	202a      	movs	r0, #42	; 0x2a
 801244c:	f7ff fe98 	bl	8012180 <lcd_write_cmd_data>
	data[0]= y>>8;
 8012450:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012454:	121b      	asrs	r3, r3, #8
 8012456:	b21b      	sxth	r3, r3
 8012458:	b29a      	uxth	r2, r3
 801245a:	4b30      	ldr	r3, [pc, #192]	; (801251c <LCD_ClrScrn+0x118>)
 801245c:	801a      	strh	r2, [r3, #0]
	data[1]= y & 0xFF;
 801245e:	89fb      	ldrh	r3, [r7, #14]
 8012460:	b2db      	uxtb	r3, r3
 8012462:	b29a      	uxth	r2, r3
 8012464:	4b2d      	ldr	r3, [pc, #180]	; (801251c <LCD_ClrScrn+0x118>)
 8012466:	805a      	strh	r2, [r3, #2]
	data[2]= 479>>8;
 8012468:	4b2c      	ldr	r3, [pc, #176]	; (801251c <LCD_ClrScrn+0x118>)
 801246a:	2201      	movs	r2, #1
 801246c:	809a      	strh	r2, [r3, #4]
	data[3]= 479 & 0xFF;
 801246e:	4b2b      	ldr	r3, [pc, #172]	; (801251c <LCD_ClrScrn+0x118>)
 8012470:	22df      	movs	r2, #223	; 0xdf
 8012472:	80da      	strh	r2, [r3, #6]
	lcd_write_cmd_data(0x2B, 4, data);  //set y
 8012474:	4a29      	ldr	r2, [pc, #164]	; (801251c <LCD_ClrScrn+0x118>)
 8012476:	2104      	movs	r1, #4
 8012478:	202b      	movs	r0, #43	; 0x2b
 801247a:	f7ff fe81 	bl	8012180 <lcd_write_cmd_data>

	if(ptr != NULL)
 801247e:	68bb      	ldr	r3, [r7, #8]
 8012480:	2b00      	cmp	r3, #0
 8012482:	d016      	beq.n	80124b2 <LCD_ClrScrn+0xae>
	{
		memset16(ptr, Color, 320);
 8012484:	88fb      	ldrh	r3, [r7, #6]
 8012486:	f44f 72a0 	mov.w	r2, #320	; 0x140
 801248a:	4619      	mov	r1, r3
 801248c:	68b8      	ldr	r0, [r7, #8]
 801248e:	f7ff fc67 	bl	8011d60 <memset16>
		lcd_write_cmd_data(0x2C, 320, ptr);  //write out pixels
 8012492:	68ba      	ldr	r2, [r7, #8]
 8012494:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012498:	202c      	movs	r0, #44	; 0x2c
 801249a:	f7ff fe71 	bl	8012180 <lcd_write_cmd_data>
for(y=0; y<480; ++y )
 801249e:	89fb      	ldrh	r3, [r7, #14]
 80124a0:	3301      	adds	r3, #1
 80124a2:	b29b      	uxth	r3, r3
 80124a4:	81fb      	strh	r3, [r7, #14]
 80124a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80124aa:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80124ae:	dbbd      	blt.n	801242c <LCD_ClrScrn+0x28>
 80124b0:	e000      	b.n	80124b4 <LCD_ClrScrn+0xb0>
	}
	else
		break; //bail out
 80124b2:	bf00      	nop
}

free(ptr);
 80124b4:	68b8      	ldr	r0, [r7, #8]
 80124b6:	f010 fdc1 	bl	802303c <free>

data[0]=data[1]= 0;
 80124ba:	4b18      	ldr	r3, [pc, #96]	; (801251c <LCD_ClrScrn+0x118>)
 80124bc:	2200      	movs	r2, #0
 80124be:	805a      	strh	r2, [r3, #2]
 80124c0:	4b16      	ldr	r3, [pc, #88]	; (801251c <LCD_ClrScrn+0x118>)
 80124c2:	885a      	ldrh	r2, [r3, #2]
 80124c4:	4b15      	ldr	r3, [pc, #84]	; (801251c <LCD_ClrScrn+0x118>)
 80124c6:	801a      	strh	r2, [r3, #0]
data[2]= 319>>8;
 80124c8:	4b14      	ldr	r3, [pc, #80]	; (801251c <LCD_ClrScrn+0x118>)
 80124ca:	2201      	movs	r2, #1
 80124cc:	809a      	strh	r2, [r3, #4]
data[3]= 319 & 0xFF;
 80124ce:	4b13      	ldr	r3, [pc, #76]	; (801251c <LCD_ClrScrn+0x118>)
 80124d0:	223f      	movs	r2, #63	; 0x3f
 80124d2:	80da      	strh	r2, [r3, #6]
lcd_write_cmd_data(0x2A, 4, data);  //set x
 80124d4:	4a11      	ldr	r2, [pc, #68]	; (801251c <LCD_ClrScrn+0x118>)
 80124d6:	2104      	movs	r1, #4
 80124d8:	202a      	movs	r0, #42	; 0x2a
 80124da:	f7ff fe51 	bl	8012180 <lcd_write_cmd_data>
data[0]=data[1]= 0;
 80124de:	4b0f      	ldr	r3, [pc, #60]	; (801251c <LCD_ClrScrn+0x118>)
 80124e0:	2200      	movs	r2, #0
 80124e2:	805a      	strh	r2, [r3, #2]
 80124e4:	4b0d      	ldr	r3, [pc, #52]	; (801251c <LCD_ClrScrn+0x118>)
 80124e6:	885a      	ldrh	r2, [r3, #2]
 80124e8:	4b0c      	ldr	r3, [pc, #48]	; (801251c <LCD_ClrScrn+0x118>)
 80124ea:	801a      	strh	r2, [r3, #0]
data[2]= 479>>8;
 80124ec:	4b0b      	ldr	r3, [pc, #44]	; (801251c <LCD_ClrScrn+0x118>)
 80124ee:	2201      	movs	r2, #1
 80124f0:	809a      	strh	r2, [r3, #4]
data[3]= 479 & 0xFF;
 80124f2:	4b0a      	ldr	r3, [pc, #40]	; (801251c <LCD_ClrScrn+0x118>)
 80124f4:	22df      	movs	r2, #223	; 0xdf
 80124f6:	80da      	strh	r2, [r3, #6]
lcd_write_cmd_data(0x2B, 4, data);  //set y
 80124f8:	4a08      	ldr	r2, [pc, #32]	; (801251c <LCD_ClrScrn+0x118>)
 80124fa:	2104      	movs	r1, #4
 80124fc:	202b      	movs	r0, #43	; 0x2b
 80124fe:	f7ff fe3f 	bl	8012180 <lcd_write_cmd_data>

HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);  //disable lcd controller
 8012502:	2201      	movs	r2, #1
 8012504:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012508:	4803      	ldr	r0, [pc, #12]	; (8012518 <LCD_ClrScrn+0x114>)
 801250a:	f007 fd57 	bl	8019fbc <HAL_GPIO_WritePin>

}
 801250e:	bf00      	nop
 8012510:	3710      	adds	r7, #16
 8012512:	46bd      	mov	sp, r7
 8012514:	bd80      	pop	{r7, pc}
 8012516:	bf00      	nop
 8012518:	40020800 	.word	0x40020800
 801251c:	20002824 	.word	0x20002824

08012520 <LCD_Set_Posi>:

void LCD_Set_Posi(short Sx, short Sy)
{
 8012520:	b580      	push	{r7, lr}
 8012522:	b082      	sub	sp, #8
 8012524:	af00      	add	r7, sp, #0
 8012526:	4603      	mov	r3, r0
 8012528:	460a      	mov	r2, r1
 801252a:	80fb      	strh	r3, [r7, #6]
 801252c:	4613      	mov	r3, r2
 801252e:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 8012530:	2200      	movs	r2, #0
 8012532:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012536:	481f      	ldr	r0, [pc, #124]	; (80125b4 <LCD_Set_Posi+0x94>)
 8012538:	f007 fd40 	bl	8019fbc <HAL_GPIO_WritePin>

	data[0]= data[2]= Sx>>8;
 801253c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012540:	121b      	asrs	r3, r3, #8
 8012542:	b21b      	sxth	r3, r3
 8012544:	b29a      	uxth	r2, r3
 8012546:	4b1c      	ldr	r3, [pc, #112]	; (80125b8 <LCD_Set_Posi+0x98>)
 8012548:	809a      	strh	r2, [r3, #4]
 801254a:	4b1b      	ldr	r3, [pc, #108]	; (80125b8 <LCD_Set_Posi+0x98>)
 801254c:	889a      	ldrh	r2, [r3, #4]
 801254e:	4b1a      	ldr	r3, [pc, #104]	; (80125b8 <LCD_Set_Posi+0x98>)
 8012550:	801a      	strh	r2, [r3, #0]
	data[1]= data[3]= Sx & 0xFF;
 8012552:	88fb      	ldrh	r3, [r7, #6]
 8012554:	b2db      	uxtb	r3, r3
 8012556:	b29a      	uxth	r2, r3
 8012558:	4b17      	ldr	r3, [pc, #92]	; (80125b8 <LCD_Set_Posi+0x98>)
 801255a:	80da      	strh	r2, [r3, #6]
 801255c:	4b16      	ldr	r3, [pc, #88]	; (80125b8 <LCD_Set_Posi+0x98>)
 801255e:	88da      	ldrh	r2, [r3, #6]
 8012560:	4b15      	ldr	r3, [pc, #84]	; (80125b8 <LCD_Set_Posi+0x98>)
 8012562:	805a      	strh	r2, [r3, #2]
	lcd_write_cmd_data(0x2A, 4, data);  //set x
 8012564:	4a14      	ldr	r2, [pc, #80]	; (80125b8 <LCD_Set_Posi+0x98>)
 8012566:	2104      	movs	r1, #4
 8012568:	202a      	movs	r0, #42	; 0x2a
 801256a:	f7ff fe09 	bl	8012180 <lcd_write_cmd_data>
	data[0]= data[1]= Sy>>8;
 801256e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012572:	121b      	asrs	r3, r3, #8
 8012574:	b21b      	sxth	r3, r3
 8012576:	b29a      	uxth	r2, r3
 8012578:	4b0f      	ldr	r3, [pc, #60]	; (80125b8 <LCD_Set_Posi+0x98>)
 801257a:	805a      	strh	r2, [r3, #2]
 801257c:	4b0e      	ldr	r3, [pc, #56]	; (80125b8 <LCD_Set_Posi+0x98>)
 801257e:	885a      	ldrh	r2, [r3, #2]
 8012580:	4b0d      	ldr	r3, [pc, #52]	; (80125b8 <LCD_Set_Posi+0x98>)
 8012582:	801a      	strh	r2, [r3, #0]
	data[2]= data[3]= Sy & 0xFF;
 8012584:	88bb      	ldrh	r3, [r7, #4]
 8012586:	b2db      	uxtb	r3, r3
 8012588:	b29a      	uxth	r2, r3
 801258a:	4b0b      	ldr	r3, [pc, #44]	; (80125b8 <LCD_Set_Posi+0x98>)
 801258c:	80da      	strh	r2, [r3, #6]
 801258e:	4b0a      	ldr	r3, [pc, #40]	; (80125b8 <LCD_Set_Posi+0x98>)
 8012590:	88da      	ldrh	r2, [r3, #6]
 8012592:	4b09      	ldr	r3, [pc, #36]	; (80125b8 <LCD_Set_Posi+0x98>)
 8012594:	809a      	strh	r2, [r3, #4]
	lcd_write_cmd_data(0x2B, 4, data);  //set y
 8012596:	4a08      	ldr	r2, [pc, #32]	; (80125b8 <LCD_Set_Posi+0x98>)
 8012598:	2104      	movs	r1, #4
 801259a:	202b      	movs	r0, #43	; 0x2b
 801259c:	f7ff fdf0 	bl	8012180 <lcd_write_cmd_data>

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);    //disable lcd controller
 80125a0:	2201      	movs	r2, #1
 80125a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80125a6:	4803      	ldr	r0, [pc, #12]	; (80125b4 <LCD_Set_Posi+0x94>)
 80125a8:	f007 fd08 	bl	8019fbc <HAL_GPIO_WritePin>
}
 80125ac:	bf00      	nop
 80125ae:	3708      	adds	r7, #8
 80125b0:	46bd      	mov	sp, r7
 80125b2:	bd80      	pop	{r7, pc}
 80125b4:	40020800 	.word	0x40020800
 80125b8:	20002824 	.word	0x20002824

080125bc <LCD_Set_Pixel>:

void LCD_Set_Pixel(unsigned short Color)
{
 80125bc:	b580      	push	{r7, lr}
 80125be:	b082      	sub	sp, #8
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	4603      	mov	r3, r0
 80125c4:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 80125c6:	2200      	movs	r2, #0
 80125c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80125cc:	480d      	ldr	r0, [pc, #52]	; (8012604 <LCD_Set_Pixel+0x48>)
 80125ce:	f007 fcf5 	bl	8019fbc <HAL_GPIO_WritePin>

	data[0]= Color>>8;
 80125d2:	88fb      	ldrh	r3, [r7, #6]
 80125d4:	0a1b      	lsrs	r3, r3, #8
 80125d6:	b29a      	uxth	r2, r3
 80125d8:	4b0b      	ldr	r3, [pc, #44]	; (8012608 <LCD_Set_Pixel+0x4c>)
 80125da:	801a      	strh	r2, [r3, #0]
	data[1]= Color & 0xFF;
 80125dc:	88fb      	ldrh	r3, [r7, #6]
 80125de:	b2db      	uxtb	r3, r3
 80125e0:	b29a      	uxth	r2, r3
 80125e2:	4b09      	ldr	r3, [pc, #36]	; (8012608 <LCD_Set_Pixel+0x4c>)
 80125e4:	805a      	strh	r2, [r3, #2]
	lcd_write_cmd_data(0x2C, 2, data);  //set pixel
 80125e6:	4a08      	ldr	r2, [pc, #32]	; (8012608 <LCD_Set_Pixel+0x4c>)
 80125e8:	2102      	movs	r1, #2
 80125ea:	202c      	movs	r0, #44	; 0x2c
 80125ec:	f7ff fdc8 	bl	8012180 <lcd_write_cmd_data>
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);    //disable lcd controller
 80125f0:	2201      	movs	r2, #1
 80125f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80125f6:	4803      	ldr	r0, [pc, #12]	; (8012604 <LCD_Set_Pixel+0x48>)
 80125f8:	f007 fce0 	bl	8019fbc <HAL_GPIO_WritePin>
}
 80125fc:	bf00      	nop
 80125fe:	3708      	adds	r7, #8
 8012600:	46bd      	mov	sp, r7
 8012602:	bd80      	pop	{r7, pc}
 8012604:	40020800 	.word	0x40020800
 8012608:	20002824 	.word	0x20002824

0801260c <LCD_Get_Pixel>:

unsigned short LCD_Get_Pixel(void)
{
 801260c:	b580      	push	{r7, lr}
 801260e:	b082      	sub	sp, #8
 8012610:	af00      	add	r7, sp, #0
	short ret;
	unsigned short fred;

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 8012612:	2200      	movs	r2, #0
 8012614:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012618:	4814      	ldr	r0, [pc, #80]	; (801266c <LCD_Get_Pixel+0x60>)
 801261a:	f007 fccf 	bl	8019fbc <HAL_GPIO_WritePin>
	lcd_write_cmd_data(0x2E, 0, data);  //read data
 801261e:	4a14      	ldr	r2, [pc, #80]	; (8012670 <LCD_Get_Pixel+0x64>)
 8012620:	2100      	movs	r1, #0
 8012622:	202e      	movs	r0, #46	; 0x2e
 8012624:	f7ff fdac 	bl	8012180 <lcd_write_cmd_data>

	ret = HAL_SPI_Receive(&hspi3, (unsigned char *)data, 2, 1);
 8012628:	2301      	movs	r3, #1
 801262a:	2202      	movs	r2, #2
 801262c:	4910      	ldr	r1, [pc, #64]	; (8012670 <LCD_Get_Pixel+0x64>)
 801262e:	4811      	ldr	r0, [pc, #68]	; (8012674 <LCD_Get_Pixel+0x68>)
 8012630:	f00a f905 	bl	801c83e <HAL_SPI_Receive>
 8012634:	4603      	mov	r3, r0
 8012636:	80fb      	strh	r3, [r7, #6]

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);    //disable lcd controller
 8012638:	2201      	movs	r2, #1
 801263a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801263e:	480b      	ldr	r0, [pc, #44]	; (801266c <LCD_Get_Pixel+0x60>)
 8012640:	f007 fcbc 	bl	8019fbc <HAL_GPIO_WritePin>

	if( ret == HAL_OK )
 8012644:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d10a      	bne.n	8012662 <LCD_Get_Pixel+0x56>
		{
		fred =data[0]<<8;
 801264c:	4b08      	ldr	r3, [pc, #32]	; (8012670 <LCD_Get_Pixel+0x64>)
 801264e:	881b      	ldrh	r3, [r3, #0]
 8012650:	021b      	lsls	r3, r3, #8
 8012652:	80bb      	strh	r3, [r7, #4]
		fred |= data[1];
 8012654:	4b06      	ldr	r3, [pc, #24]	; (8012670 <LCD_Get_Pixel+0x64>)
 8012656:	885a      	ldrh	r2, [r3, #2]
 8012658:	88bb      	ldrh	r3, [r7, #4]
 801265a:	4313      	orrs	r3, r2
 801265c:	80bb      	strh	r3, [r7, #4]
		return (fred);
 801265e:	88bb      	ldrh	r3, [r7, #4]
 8012660:	e000      	b.n	8012664 <LCD_Get_Pixel+0x58>
		}
	else
		return 0;
 8012662:	2300      	movs	r3, #0

}
 8012664:	4618      	mov	r0, r3
 8012666:	3708      	adds	r7, #8
 8012668:	46bd      	mov	sp, r7
 801266a:	bd80      	pop	{r7, pc}
 801266c:	40020800 	.word	0x40020800
 8012670:	20002824 	.word	0x20002824
 8012674:	200069cc 	.word	0x200069cc

08012678 <Draw_4Point>:

/*******************************************************************************
Draw_4Point:
*******************************************************************************/
void Draw_4Point(short x, short y, char Str_Cnt, char High)
{
 8012678:	b590      	push	{r4, r7, lr}
 801267a:	b083      	sub	sp, #12
 801267c:	af00      	add	r7, sp, #0
 801267e:	4604      	mov	r4, r0
 8012680:	4608      	mov	r0, r1
 8012682:	4611      	mov	r1, r2
 8012684:	461a      	mov	r2, r3
 8012686:	4623      	mov	r3, r4
 8012688:	80fb      	strh	r3, [r7, #6]
 801268a:	4603      	mov	r3, r0
 801268c:	80bb      	strh	r3, [r7, #4]
 801268e:	460b      	mov	r3, r1
 8012690:	70fb      	strb	r3, [r7, #3]
 8012692:	4613      	mov	r3, r2
 8012694:	70bb      	strb	r3, [r7, #2]
  LCD_Set_Posi(x,y);
 8012696:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801269a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801269e:	4611      	mov	r1, r2
 80126a0:	4618      	mov	r0, r3
 80126a2:	f7ff ff3d 	bl	8012520 <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 80126a6:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80126aa:	f7ff ff87 	bl	80125bc <LCD_Set_Pixel>
  LCD_Set_Posi(x,y+High-1);
 80126ae:	78bb      	ldrb	r3, [r7, #2]
 80126b0:	b29a      	uxth	r2, r3
 80126b2:	88bb      	ldrh	r3, [r7, #4]
 80126b4:	4413      	add	r3, r2
 80126b6:	b29b      	uxth	r3, r3
 80126b8:	3b01      	subs	r3, #1
 80126ba:	b29b      	uxth	r3, r3
 80126bc:	b21a      	sxth	r2, r3
 80126be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80126c2:	4611      	mov	r1, r2
 80126c4:	4618      	mov	r0, r3
 80126c6:	f7ff ff2b 	bl	8012520 <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 80126ca:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80126ce:	f7ff ff75 	bl	80125bc <LCD_Set_Pixel>
  LCD_Set_Posi(x+Str_Cnt*((High>10)? 8:6),y);
 80126d2:	78fb      	ldrb	r3, [r7, #3]
 80126d4:	b29b      	uxth	r3, r3
 80126d6:	78ba      	ldrb	r2, [r7, #2]
 80126d8:	2a0a      	cmp	r2, #10
 80126da:	d901      	bls.n	80126e0 <Draw_4Point+0x68>
 80126dc:	2208      	movs	r2, #8
 80126de:	e000      	b.n	80126e2 <Draw_4Point+0x6a>
 80126e0:	2206      	movs	r2, #6
 80126e2:	fb12 f303 	smulbb	r3, r2, r3
 80126e6:	b29a      	uxth	r2, r3
 80126e8:	88fb      	ldrh	r3, [r7, #6]
 80126ea:	4413      	add	r3, r2
 80126ec:	b29b      	uxth	r3, r3
 80126ee:	b21b      	sxth	r3, r3
 80126f0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80126f4:	4611      	mov	r1, r2
 80126f6:	4618      	mov	r0, r3
 80126f8:	f7ff ff12 	bl	8012520 <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 80126fc:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012700:	f7ff ff5c 	bl	80125bc <LCD_Set_Pixel>
  LCD_Set_Posi(x+Str_Cnt*((High>10)? 8:6),y+High-1);
 8012704:	78fb      	ldrb	r3, [r7, #3]
 8012706:	b29b      	uxth	r3, r3
 8012708:	78ba      	ldrb	r2, [r7, #2]
 801270a:	2a0a      	cmp	r2, #10
 801270c:	d901      	bls.n	8012712 <Draw_4Point+0x9a>
 801270e:	2208      	movs	r2, #8
 8012710:	e000      	b.n	8012714 <Draw_4Point+0x9c>
 8012712:	2206      	movs	r2, #6
 8012714:	fb12 f303 	smulbb	r3, r2, r3
 8012718:	b29a      	uxth	r2, r3
 801271a:	88fb      	ldrh	r3, [r7, #6]
 801271c:	4413      	add	r3, r2
 801271e:	b29b      	uxth	r3, r3
 8012720:	b218      	sxth	r0, r3
 8012722:	78bb      	ldrb	r3, [r7, #2]
 8012724:	b29a      	uxth	r2, r3
 8012726:	88bb      	ldrh	r3, [r7, #4]
 8012728:	4413      	add	r3, r2
 801272a:	b29b      	uxth	r3, r3
 801272c:	3b01      	subs	r3, #1
 801272e:	b29b      	uxth	r3, r3
 8012730:	b21b      	sxth	r3, r3
 8012732:	4619      	mov	r1, r3
 8012734:	f7ff fef4 	bl	8012520 <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 8012738:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801273c:	f7ff ff3e 	bl	80125bc <LCD_Set_Pixel>
}
 8012740:	bf00      	nop
 8012742:	370c      	adds	r7, #12
 8012744:	46bd      	mov	sp, r7
 8012746:	bd90      	pop	{r4, r7, pc}

08012748 <Update_Title>:

/*******************************************************************************
 Update_Item:
*******************************************************************************/
void Update_Title(void)
{
 8012748:	b580      	push	{r7, lr}
 801274a:	b082      	sub	sp, #8
 801274c:	af00      	add	r7, sp, #0
  short i;

  for(i=0; i<8; i++)
 801274e:	2300      	movs	r3, #0
 8012750:	80fb      	strh	r3, [r7, #6]
 8012752:	e03b      	b.n	80127cc <Update_Title+0x84>
  {
    SetColor(GRY, TCOLOR[i]);
 8012754:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012758:	4a21      	ldr	r2, [pc, #132]	; (80127e0 <Update_Title+0x98>)
 801275a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801275e:	4619      	mov	r1, r3
 8012760:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012764:	f7fb fc2c 	bl	800dfc0 <SetColor>
    DispStr8x14(T_X-2, TITLE_Y[i], (Current == i)? INV : PRN, (char*)TSTR[i]);
 8012768:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801276c:	4a1d      	ldr	r2, [pc, #116]	; (80127e4 <Update_Title+0x9c>)
 801276e:	5cd3      	ldrb	r3, [r2, r3]
 8012770:	b219      	sxth	r1, r3
 8012772:	4b1d      	ldr	r3, [pc, #116]	; (80127e8 <Update_Title+0xa0>)
 8012774:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012778:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801277c:	429a      	cmp	r2, r3
 801277e:	bf0c      	ite	eq
 8012780:	2301      	moveq	r3, #1
 8012782:	2300      	movne	r3, #0
 8012784:	b2db      	uxtb	r3, r3
 8012786:	4618      	mov	r0, r3
 8012788:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801278c:	009b      	lsls	r3, r3, #2
 801278e:	4a17      	ldr	r2, [pc, #92]	; (80127ec <Update_Title+0xa4>)
 8012790:	4413      	add	r3, r2
 8012792:	4602      	mov	r2, r0
 8012794:	f240 102f 	movw	r0, #303	; 0x12f
 8012798:	f7fb fbba 	bl	800df10 <DispStr8x14>
    if(Current == i)
 801279c:	4b12      	ldr	r3, [pc, #72]	; (80127e8 <Update_Title+0xa0>)
 801279e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80127a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80127a6:	429a      	cmp	r2, r3
 80127a8:	d10a      	bne.n	80127c0 <Update_Title+0x78>
    {
        Draw_4Point(T_X-2, TITLE_Y[i], 2, Font8x14_H);
 80127aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80127ae:	4a0d      	ldr	r2, [pc, #52]	; (80127e4 <Update_Title+0x9c>)
 80127b0:	5cd3      	ldrb	r3, [r2, r3]
 80127b2:	b219      	sxth	r1, r3
 80127b4:	230e      	movs	r3, #14
 80127b6:	2202      	movs	r2, #2
 80127b8:	f240 102f 	movw	r0, #303	; 0x12f
 80127bc:	f7ff ff5c 	bl	8012678 <Draw_4Point>
  for(i=0; i<8; i++)
 80127c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80127c4:	b29b      	uxth	r3, r3
 80127c6:	3301      	adds	r3, #1
 80127c8:	b29b      	uxth	r3, r3
 80127ca:	80fb      	strh	r3, [r7, #6]
 80127cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80127d0:	2b07      	cmp	r3, #7
 80127d2:	ddbf      	ble.n	8012754 <Update_Title+0xc>
    }
  }
}
 80127d4:	bf00      	nop
 80127d6:	bf00      	nop
 80127d8:	3708      	adds	r7, #8
 80127da:	46bd      	mov	sp, r7
 80127dc:	bd80      	pop	{r7, pc}
 80127de:	bf00      	nop
 80127e0:	08001f08 	.word	0x08001f08
 80127e4:	08001f38 	.word	0x08001f38
 80127e8:	200007a6 	.word	0x200007a6
 80127ec:	08001f18 	.word	0x08001f18

080127f0 <Update_Blink>:

/*******************************************************************************
 Update_Blink:
*******************************************************************************/
void Update_Blink(void)
{
 80127f0:	b590      	push	{r4, r7, lr}
 80127f2:	b087      	sub	sp, #28
 80127f4:	af02      	add	r7, sp, #8
  char* ptr;
  long Tmp;
  unsigned short i, Range = List[Y_RANGES].Val + 10*List[PROBEATT].Val;
 80127f6:	4bbd      	ldr	r3, [pc, #756]	; (8012aec <Update_Blink+0x2fc>)
 80127f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80127fc:	b29a      	uxth	r2, r3
 80127fe:	4bbb      	ldr	r3, [pc, #748]	; (8012aec <Update_Blink+0x2fc>)
 8012800:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8012804:	b29b      	uxth	r3, r3
 8012806:	4619      	mov	r1, r3
 8012808:	0089      	lsls	r1, r1, #2
 801280a:	440b      	add	r3, r1
 801280c:	005b      	lsls	r3, r3, #1
 801280e:	b29b      	uxth	r3, r3
 8012810:	4413      	add	r3, r2
 8012812:	81fb      	strh	r3, [r7, #14]

  i = MenuNow[Current];
 8012814:	4bb6      	ldr	r3, [pc, #728]	; (8012af0 <Update_Blink+0x300>)
 8012816:	f9b3 3000 	ldrsh.w	r3, [r3]
 801281a:	461a      	mov	r2, r3
 801281c:	4bb5      	ldr	r3, [pc, #724]	; (8012af4 <Update_Blink+0x304>)
 801281e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8012822:	81bb      	strh	r3, [r7, #12]
  ptr = (char*)(List[i].PTR +(List[i].Val)*6);
 8012824:	89bb      	ldrh	r3, [r7, #12]
 8012826:	4ab1      	ldr	r2, [pc, #708]	; (8012aec <Update_Blink+0x2fc>)
 8012828:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801282c:	89bb      	ldrh	r3, [r7, #12]
 801282e:	49af      	ldr	r1, [pc, #700]	; (8012aec <Update_Blink+0x2fc>)
 8012830:	00db      	lsls	r3, r3, #3
 8012832:	440b      	add	r3, r1
 8012834:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012838:	4619      	mov	r1, r3
 801283a:	460b      	mov	r3, r1
 801283c:	005b      	lsls	r3, r3, #1
 801283e:	440b      	add	r3, r1
 8012840:	005b      	lsls	r3, r3, #1
 8012842:	4413      	add	r3, r2
 8012844:	60bb      	str	r3, [r7, #8]
  if(Blink == BLINK)
 8012846:	4bac      	ldr	r3, [pc, #688]	; (8012af8 <Update_Blink+0x308>)
 8012848:	781b      	ldrb	r3, [r3, #0]
 801284a:	b2db      	uxtb	r3, r3
 801284c:	2b01      	cmp	r3, #1
 801284e:	f040 86ca 	bne.w	80135e6 <Update_Blink+0xdf6>
  {
    Blink = 0;
 8012852:	4ba9      	ldr	r3, [pc, #676]	; (8012af8 <Update_Blink+0x308>)
 8012854:	2200      	movs	r2, #0
 8012856:	701a      	strb	r2, [r3, #0]
    List[MenuNow[ME]].Flg |= UPD; //
 8012858:	4ba6      	ldr	r3, [pc, #664]	; (8012af4 <Update_Blink+0x304>)
 801285a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801285e:	4aa3      	ldr	r2, [pc, #652]	; (8012aec <Update_Blink+0x2fc>)
 8012860:	00db      	lsls	r3, r3, #3
 8012862:	4413      	add	r3, r2
 8012864:	799b      	ldrb	r3, [r3, #6]
 8012866:	4aa3      	ldr	r2, [pc, #652]	; (8012af4 <Update_Blink+0x304>)
 8012868:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 801286c:	4610      	mov	r0, r2
 801286e:	f043 0320 	orr.w	r3, r3, #32
 8012872:	b2d9      	uxtb	r1, r3
 8012874:	4a9d      	ldr	r2, [pc, #628]	; (8012aec <Update_Blink+0x2fc>)
 8012876:	00c3      	lsls	r3, r0, #3
 8012878:	4413      	add	r3, r2
 801287a:	460a      	mov	r2, r1
 801287c:	719a      	strb	r2, [r3, #6]
    switch(i)
 801287e:	89bb      	ldrh	r3, [r7, #12]
 8012880:	2b29      	cmp	r3, #41	; 0x29
 8012882:	f200 86aa 	bhi.w	80135da <Update_Blink+0xdea>
 8012886:	a201      	add	r2, pc, #4	; (adr r2, 801288c <Update_Blink+0x9c>)
 8012888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801288c:	080129f7 	.word	0x080129f7
 8012890:	080129f7 	.word	0x080129f7
 8012894:	080129f7 	.word	0x080129f7
 8012898:	08012a8b 	.word	0x08012a8b
 801289c:	08012abd 	.word	0x08012abd
 80128a0:	08012abd 	.word	0x08012abd
 80128a4:	08012bf3 	.word	0x08012bf3
 80128a8:	08012c51 	.word	0x08012c51
 80128ac:	08012ca9 	.word	0x08012ca9
 80128b0:	08012cdb 	.word	0x08012cdb
 80128b4:	08012d47 	.word	0x08012d47
 80128b8:	08012d47 	.word	0x08012d47
 80128bc:	08012ea9 	.word	0x08012ea9
 80128c0:	08012f03 	.word	0x08012f03
 80128c4:	08012f61 	.word	0x08012f61
 80128c8:	08013031 	.word	0x08013031
 80128cc:	0801305b 	.word	0x0801305b
 80128d0:	08012f61 	.word	0x08012f61
 80128d4:	08013089 	.word	0x08013089
 80128d8:	080135db 	.word	0x080135db
 80128dc:	080135db 	.word	0x080135db
 80128e0:	080135db 	.word	0x080135db
 80128e4:	080135db 	.word	0x080135db
 80128e8:	080135db 	.word	0x080135db
 80128ec:	080135db 	.word	0x080135db
 80128f0:	080135db 	.word	0x080135db
 80128f4:	08013101 	.word	0x08013101
 80128f8:	0801317d 	.word	0x0801317d
 80128fc:	080131ab 	.word	0x080131ab
 8012900:	08012935 	.word	0x08012935
 8012904:	08012935 	.word	0x08012935
 8012908:	08012935 	.word	0x08012935
 801290c:	08012935 	.word	0x08012935
 8012910:	08012935 	.word	0x08012935
 8012914:	08012935 	.word	0x08012935
 8012918:	08012935 	.word	0x08012935
 801291c:	08013227 	.word	0x08013227
 8012920:	080132c1 	.word	0x080132c1
 8012924:	08013385 	.word	0x08013385
 8012928:	08013433 	.word	0x08013433
 801292c:	080134cd 	.word	0x080134cd
 8012930:	0801353b 	.word	0x0801353b
    case SAVE_BUF:
    case SAVE_CSV:
    case SAVE_SVG:
    case LOAD_DAT:
    case LOAD_BUF:
      SetColor(GRY, TCOLOR[FN]);
 8012934:	f64f 4310 	movw	r3, #64528	; 0xfc10
 8012938:	4619      	mov	r1, r3
 801293a:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801293e:	f7fb fb3f 	bl	800dfc0 <SetColor>
      u8ToDec3(NumStr, List[i].Val);
 8012942:	89bb      	ldrh	r3, [r7, #12]
 8012944:	4a69      	ldr	r2, [pc, #420]	; (8012aec <Update_Blink+0x2fc>)
 8012946:	00db      	lsls	r3, r3, #3
 8012948:	4413      	add	r3, r2
 801294a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801294e:	b2db      	uxtb	r3, r3
 8012950:	4619      	mov	r1, r3
 8012952:	486a      	ldr	r0, [pc, #424]	; (8012afc <Update_Blink+0x30c>)
 8012954:	f7ff f9bc 	bl	8011cd0 <u8ToDec3>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*11);
 8012958:	4b69      	ldr	r3, [pc, #420]	; (8012b00 <Update_Blink+0x310>)
 801295a:	781b      	ldrb	r3, [r3, #0]
 801295c:	b2d8      	uxtb	r0, r3
 801295e:	89bb      	ldrh	r3, [r7, #12]
 8012960:	4a68      	ldr	r2, [pc, #416]	; (8012b04 <Update_Blink+0x314>)
 8012962:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012966:	b29b      	uxth	r3, r3
 8012968:	3b03      	subs	r3, #3
 801296a:	b29b      	uxth	r3, r3
 801296c:	b219      	sxth	r1, r3
 801296e:	2342      	movs	r3, #66	; 0x42
 8012970:	9301      	str	r3, [sp, #4]
 8012972:	2300      	movs	r3, #0
 8012974:	9300      	str	r3, [sp, #0]
 8012976:	230b      	movs	r3, #11
 8012978:	2203      	movs	r2, #3
 801297a:	f7fb fc0f 	bl	800e19c <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, ((i > SAVE_SVG)? "Load" : "Save"));//0513
 801297e:	89bb      	ldrh	r3, [r7, #12]
 8012980:	4a60      	ldr	r2, [pc, #384]	; (8012b04 <Update_Blink+0x314>)
 8012982:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012986:	4b5e      	ldr	r3, [pc, #376]	; (8012b00 <Update_Blink+0x310>)
 8012988:	781b      	ldrb	r3, [r3, #0]
 801298a:	b2da      	uxtb	r2, r3
 801298c:	89bb      	ldrh	r3, [r7, #12]
 801298e:	2b21      	cmp	r3, #33	; 0x21
 8012990:	d901      	bls.n	8012996 <Update_Blink+0x1a6>
 8012992:	4b5d      	ldr	r3, [pc, #372]	; (8012b08 <Update_Blink+0x318>)
 8012994:	e000      	b.n	8012998 <Update_Blink+0x1a8>
 8012996:	4b5d      	ldr	r3, [pc, #372]	; (8012b0c <Update_Blink+0x31c>)
 8012998:	2103      	movs	r1, #3
 801299a:	f7fb fb29 	bl	800dff0 <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, (char *)NumStr);
 801299e:	89bb      	ldrh	r3, [r7, #12]
 80129a0:	4a58      	ldr	r2, [pc, #352]	; (8012b04 <Update_Blink+0x314>)
 80129a2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80129a6:	b29b      	uxth	r3, r3
 80129a8:	3318      	adds	r3, #24
 80129aa:	b29b      	uxth	r3, r3
 80129ac:	b218      	sxth	r0, r3
 80129ae:	4b54      	ldr	r3, [pc, #336]	; (8012b00 <Update_Blink+0x310>)
 80129b0:	781b      	ldrb	r3, [r3, #0]
 80129b2:	b2da      	uxtb	r2, r3
 80129b4:	4b51      	ldr	r3, [pc, #324]	; (8012afc <Update_Blink+0x30c>)
 80129b6:	2103      	movs	r1, #3
 80129b8:	f7fb fb1a 	bl	800dff0 <DispStr>
      DispStr(S_X[i]+42, LABLE_Y, Twink, (List[i].PTR +(i - SAVE_BMP)*6));
 80129bc:	89bb      	ldrh	r3, [r7, #12]
 80129be:	4a51      	ldr	r2, [pc, #324]	; (8012b04 <Update_Blink+0x314>)
 80129c0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80129c4:	b29b      	uxth	r3, r3
 80129c6:	332a      	adds	r3, #42	; 0x2a
 80129c8:	b29b      	uxth	r3, r3
 80129ca:	b218      	sxth	r0, r3
 80129cc:	4b4c      	ldr	r3, [pc, #304]	; (8012b00 <Update_Blink+0x310>)
 80129ce:	781b      	ldrb	r3, [r3, #0]
 80129d0:	b2dc      	uxtb	r4, r3
 80129d2:	89bb      	ldrh	r3, [r7, #12]
 80129d4:	4a45      	ldr	r2, [pc, #276]	; (8012aec <Update_Blink+0x2fc>)
 80129d6:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80129da:	89bb      	ldrh	r3, [r7, #12]
 80129dc:	f1a3 021d 	sub.w	r2, r3, #29
 80129e0:	4613      	mov	r3, r2
 80129e2:	005b      	lsls	r3, r3, #1
 80129e4:	4413      	add	r3, r2
 80129e6:	005b      	lsls	r3, r3, #1
 80129e8:	440b      	add	r3, r1
 80129ea:	4622      	mov	r2, r4
 80129ec:	2103      	movs	r1, #3
 80129ee:	f7fb faff 	bl	800dff0 <DispStr>
      break;
 80129f2:	f000 bdf2 	b.w	80135da <Update_Blink+0xdea>

    case Y_RANGES:
    case COUPLING:
    case PROBEATT:
      SetColor(GRY, TCOLOR[YN]);
 80129f6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80129fa:	4619      	mov	r1, r3
 80129fc:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012a00:	f7fb fade 	bl	800dfc0 <SetColor>
      Draw_Circle_D(Twink, S_X[Y_RANGES]-3, TITLE_Y_POS, 11, 0, 6*7);
 8012a04:	4b3e      	ldr	r3, [pc, #248]	; (8012b00 <Update_Blink+0x310>)
 8012a06:	781b      	ldrb	r3, [r3, #0]
 8012a08:	b2d8      	uxtb	r0, r3
 8012a0a:	232f      	movs	r3, #47	; 0x2f
 8012a0c:	b29b      	uxth	r3, r3
 8012a0e:	3b03      	subs	r3, #3
 8012a10:	b29b      	uxth	r3, r3
 8012a12:	b219      	sxth	r1, r3
 8012a14:	232a      	movs	r3, #42	; 0x2a
 8012a16:	9301      	str	r3, [sp, #4]
 8012a18:	2300      	movs	r3, #0
 8012a1a:	9300      	str	r3, [sp, #0]
 8012a1c:	230b      	movs	r3, #11
 8012a1e:	22e1      	movs	r2, #225	; 0xe1
 8012a20:	f7fb fbbc 	bl	800e19c <Draw_Circle_D>
      DispStr(S_X[Y_RANGES], TITLE_Y_POS, Twink, (List[Y_RANGES].PTR +(Range)*6));
 8012a24:	242f      	movs	r4, #47	; 0x2f
 8012a26:	4b36      	ldr	r3, [pc, #216]	; (8012b00 <Update_Blink+0x310>)
 8012a28:	781b      	ldrb	r3, [r3, #0]
 8012a2a:	b2d8      	uxtb	r0, r3
 8012a2c:	4b2f      	ldr	r3, [pc, #188]	; (8012aec <Update_Blink+0x2fc>)
 8012a2e:	6819      	ldr	r1, [r3, #0]
 8012a30:	89fa      	ldrh	r2, [r7, #14]
 8012a32:	4613      	mov	r3, r2
 8012a34:	005b      	lsls	r3, r3, #1
 8012a36:	4413      	add	r3, r2
 8012a38:	005b      	lsls	r3, r3, #1
 8012a3a:	440b      	add	r3, r1
 8012a3c:	4602      	mov	r2, r0
 8012a3e:	21e1      	movs	r1, #225	; 0xe1
 8012a40:	4620      	mov	r0, r4
 8012a42:	f7fb fad5 	bl	800dff0 <DispStr>
      DispStr(S_X[COUPLING], TITLE_Y_POS, Twink, (List[COUPLING].PTR +(List[COUPLING].Val)*6));
 8012a46:	2047      	movs	r0, #71	; 0x47
 8012a48:	4b2d      	ldr	r3, [pc, #180]	; (8012b00 <Update_Blink+0x310>)
 8012a4a:	781b      	ldrb	r3, [r3, #0]
 8012a4c:	b2d9      	uxtb	r1, r3
 8012a4e:	4b27      	ldr	r3, [pc, #156]	; (8012aec <Update_Blink+0x2fc>)
 8012a50:	689a      	ldr	r2, [r3, #8]
 8012a52:	4b26      	ldr	r3, [pc, #152]	; (8012aec <Update_Blink+0x2fc>)
 8012a54:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012a58:	461c      	mov	r4, r3
 8012a5a:	4623      	mov	r3, r4
 8012a5c:	005b      	lsls	r3, r3, #1
 8012a5e:	4423      	add	r3, r4
 8012a60:	005b      	lsls	r3, r3, #1
 8012a62:	4413      	add	r3, r2
 8012a64:	460a      	mov	r2, r1
 8012a66:	21e1      	movs	r1, #225	; 0xe1
 8012a68:	f7fb fac2 	bl	800dff0 <DispStr>
      DispStr10x14(S_X[PROBEATT], TITLE_Y_POS, PRN+SYMB,(List[PROBEATT].Val?("A"):("B")));
 8012a6c:	2020      	movs	r0, #32
 8012a6e:	4b1f      	ldr	r3, [pc, #124]	; (8012aec <Update_Blink+0x2fc>)
 8012a70:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d001      	beq.n	8012a7c <Update_Blink+0x28c>
 8012a78:	4b25      	ldr	r3, [pc, #148]	; (8012b10 <Update_Blink+0x320>)
 8012a7a:	e000      	b.n	8012a7e <Update_Blink+0x28e>
 8012a7c:	4b25      	ldr	r3, [pc, #148]	; (8012b14 <Update_Blink+0x324>)
 8012a7e:	2210      	movs	r2, #16
 8012a80:	21e1      	movs	r1, #225	; 0xe1
 8012a82:	f7fb fd1d 	bl	800e4c0 <DispStr10x14>
      break;
 8012a86:	f000 bda8 	b.w	80135da <Update_Blink+0xdea>

    case V0_POSI:
      if(Twink) ParamTab[P1F] |=  D_HID;
 8012a8a:	4b1d      	ldr	r3, [pc, #116]	; (8012b00 <Update_Blink+0x310>)
 8012a8c:	781b      	ldrb	r3, [r3, #0]
 8012a8e:	b2db      	uxtb	r3, r3
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d009      	beq.n	8012aa8 <Update_Blink+0x2b8>
 8012a94:	4b20      	ldr	r3, [pc, #128]	; (8012b18 <Update_Blink+0x328>)
 8012a96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012a9a:	f043 0301 	orr.w	r3, r3, #1
 8012a9e:	b21a      	sxth	r2, r3
 8012aa0:	4b1d      	ldr	r3, [pc, #116]	; (8012b18 <Update_Blink+0x328>)
 8012aa2:	801a      	strh	r2, [r3, #0]
      else      ParamTab[P1F] &= ~D_HID;
      break;
 8012aa4:	f000 bd99 	b.w	80135da <Update_Blink+0xdea>
      else      ParamTab[P1F] &= ~D_HID;
 8012aa8:	4b1b      	ldr	r3, [pc, #108]	; (8012b18 <Update_Blink+0x328>)
 8012aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012aae:	f023 0301 	bic.w	r3, r3, #1
 8012ab2:	b21a      	sxth	r2, r3
 8012ab4:	4b18      	ldr	r3, [pc, #96]	; (8012b18 <Update_Blink+0x328>)
 8012ab6:	801a      	strh	r2, [r3, #0]
      break;
 8012ab8:	f000 bd8f 	b.w	80135da <Update_Blink+0xdea>

    case V1_POSI:
    case V2_POSI:
      Tmp = (i == V1_POSI)? V1F : V2F;
 8012abc:	89bb      	ldrh	r3, [r7, #12]
 8012abe:	2b04      	cmp	r3, #4
 8012ac0:	d101      	bne.n	8012ac6 <Update_Blink+0x2d6>
 8012ac2:	2305      	movs	r3, #5
 8012ac4:	e000      	b.n	8012ac8 <Update_Blink+0x2d8>
 8012ac6:	2306      	movs	r3, #6
 8012ac8:	607b      	str	r3, [r7, #4]
      if(Twink) ParamTab[Tmp] |=  D_HID;
 8012aca:	4b0d      	ldr	r3, [pc, #52]	; (8012b00 <Update_Blink+0x310>)
 8012acc:	781b      	ldrb	r3, [r3, #0]
 8012ace:	b2db      	uxtb	r3, r3
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d023      	beq.n	8012b1c <Update_Blink+0x32c>
 8012ad4:	4a10      	ldr	r2, [pc, #64]	; (8012b18 <Update_Blink+0x328>)
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012adc:	f043 0301 	orr.w	r3, r3, #1
 8012ae0:	b219      	sxth	r1, r3
 8012ae2:	4a0d      	ldr	r2, [pc, #52]	; (8012b18 <Update_Blink+0x328>)
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8012aea:	e022      	b.n	8012b32 <Update_Blink+0x342>
 8012aec:	20000298 	.word	0x20000298
 8012af0:	200007a6 	.word	0x200007a6
 8012af4:	20000538 	.word	0x20000538
 8012af8:	20000a39 	.word	0x20000a39
 8012afc:	20002844 	.word	0x20002844
 8012b00:	2000077c 	.word	0x2000077c
 8012b04:	0800215c 	.word	0x0800215c
 8012b08:	08000948 	.word	0x08000948
 8012b0c:	08000950 	.word	0x08000950
 8012b10:	08000958 	.word	0x08000958
 8012b14:	0800095c 	.word	0x0800095c
 8012b18:	20000140 	.word	0x20000140
      else      ParamTab[Tmp] &= ~D_HID;
 8012b1c:	4ab1      	ldr	r2, [pc, #708]	; (8012de4 <Update_Blink+0x5f4>)
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012b24:	f023 0301 	bic.w	r3, r3, #1
 8012b28:	b219      	sxth	r1, r3
 8012b2a:	4aae      	ldr	r2, [pc, #696]	; (8012de4 <Update_Blink+0x5f4>)
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      Tmp  =(ParamTab[V1x2]- ParamTab[V2x2])/2;         // V2 - V1 ��ֵ
 8012b32:	4bac      	ldr	r3, [pc, #688]	; (8012de4 <Update_Blink+0x5f4>)
 8012b34:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8012b38:	461a      	mov	r2, r3
 8012b3a:	4baa      	ldr	r3, [pc, #680]	; (8012de4 <Update_Blink+0x5f4>)
 8012b3c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8012b40:	1ad3      	subs	r3, r2, r3
 8012b42:	0fda      	lsrs	r2, r3, #31
 8012b44:	4413      	add	r3, r2
 8012b46:	105b      	asrs	r3, r3, #1
 8012b48:	607b      	str	r3, [r7, #4]
      Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8012b4a:	89fb      	ldrh	r3, [r7, #14]
 8012b4c:	4aa6      	ldr	r2, [pc, #664]	; (8012de8 <Update_Blink+0x5f8>)
 8012b4e:	5cd3      	ldrb	r3, [r2, r3]
 8012b50:	461c      	mov	r4, r3
 8012b52:	89fb      	ldrh	r3, [r7, #14]
 8012b54:	4aa5      	ldr	r2, [pc, #660]	; (8012dec <Update_Blink+0x5fc>)
 8012b56:	5cd3      	ldrb	r3, [r2, r3]
 8012b58:	4618      	mov	r0, r3
 8012b5a:	f7ff fa1d 	bl	8011f98 <Exp>
 8012b5e:	4603      	mov	r3, r0
 8012b60:	fb03 f204 	mul.w	r2, r3, r4
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	fb02 f303 	mul.w	r3, r2, r3
 8012b6a:	607b      	str	r3, [r7, #4]
      Value2Str(NumStr, Tmp, V[0], 3, UNSIGN);
 8012b6c:	2301      	movs	r3, #1
 8012b6e:	9300      	str	r3, [sp, #0]
 8012b70:	2303      	movs	r3, #3
 8012b72:	4a9f      	ldr	r2, [pc, #636]	; (8012df0 <Update_Blink+0x600>)
 8012b74:	6879      	ldr	r1, [r7, #4]
 8012b76:	489f      	ldr	r0, [pc, #636]	; (8012df4 <Update_Blink+0x604>)
 8012b78:	f7ff f912 	bl	8011da0 <Value2Str>
      SetColor(GRY, TCOLOR[YN]);
 8012b7c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8012b80:	4619      	mov	r1, r3
 8012b82:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012b86:	f7fb fa1b 	bl	800dfc0 <SetColor>
      Draw_Circle_D(Twink, S_X[V1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 8012b8a:	4b9b      	ldr	r3, [pc, #620]	; (8012df8 <Update_Blink+0x608>)
 8012b8c:	781b      	ldrb	r3, [r3, #0]
 8012b8e:	b2d8      	uxtb	r0, r3
 8012b90:	2307      	movs	r3, #7
 8012b92:	b29b      	uxth	r3, r3
 8012b94:	3b03      	subs	r3, #3
 8012b96:	b29b      	uxth	r3, r3
 8012b98:	b219      	sxth	r1, r3
 8012b9a:	2336      	movs	r3, #54	; 0x36
 8012b9c:	9301      	str	r3, [sp, #4]
 8012b9e:	2300      	movs	r3, #0
 8012ba0:	9300      	str	r3, [sp, #0]
 8012ba2:	230b      	movs	r3, #11
 8012ba4:	2203      	movs	r2, #3
 8012ba6:	f7fb faf9 	bl	800e19c <Draw_Circle_D>
      DispStr(S_X[V1_POSI]+0*6, LABLE_Y, Twink+SYMB, "]");
 8012baa:	2007      	movs	r0, #7
 8012bac:	4b92      	ldr	r3, [pc, #584]	; (8012df8 <Update_Blink+0x608>)
 8012bae:	781b      	ldrb	r3, [r3, #0]
 8012bb0:	b2db      	uxtb	r3, r3
 8012bb2:	3310      	adds	r3, #16
 8012bb4:	b2da      	uxtb	r2, r3
 8012bb6:	4b91      	ldr	r3, [pc, #580]	; (8012dfc <Update_Blink+0x60c>)
 8012bb8:	2103      	movs	r1, #3
 8012bba:	f7fb fa19 	bl	800dff0 <DispStr>
      DispStr(S_X[V1_POSI]+1*6, LABLE_Y, Twink,      "V:      ");
 8012bbe:	2307      	movs	r3, #7
 8012bc0:	b29b      	uxth	r3, r3
 8012bc2:	3306      	adds	r3, #6
 8012bc4:	b29b      	uxth	r3, r3
 8012bc6:	b218      	sxth	r0, r3
 8012bc8:	4b8b      	ldr	r3, [pc, #556]	; (8012df8 <Update_Blink+0x608>)
 8012bca:	781b      	ldrb	r3, [r3, #0]
 8012bcc:	b2da      	uxtb	r2, r3
 8012bce:	4b8c      	ldr	r3, [pc, #560]	; (8012e00 <Update_Blink+0x610>)
 8012bd0:	2103      	movs	r1, #3
 8012bd2:	f7fb fa0d 	bl	800dff0 <DispStr>
      DispStr(S_X[V1_POSI]+3*6, LABLE_Y, Twink, (char *)NumStr);
 8012bd6:	2307      	movs	r3, #7
 8012bd8:	b29b      	uxth	r3, r3
 8012bda:	3312      	adds	r3, #18
 8012bdc:	b29b      	uxth	r3, r3
 8012bde:	b218      	sxth	r0, r3
 8012be0:	4b85      	ldr	r3, [pc, #532]	; (8012df8 <Update_Blink+0x608>)
 8012be2:	781b      	ldrb	r3, [r3, #0]
 8012be4:	b2da      	uxtb	r2, r3
 8012be6:	4b83      	ldr	r3, [pc, #524]	; (8012df4 <Update_Blink+0x604>)
 8012be8:	2103      	movs	r1, #3
 8012bea:	f7fb fa01 	bl	800dff0 <DispStr>
      break;
 8012bee:	f000 bcf4 	b.w	80135da <Update_Blink+0xdea>

    case YN_TYPE:
      if(Twink) ParamTab[V1F] |=  D_HID;
 8012bf2:	4b81      	ldr	r3, [pc, #516]	; (8012df8 <Update_Blink+0x608>)
 8012bf4:	781b      	ldrb	r3, [r3, #0]
 8012bf6:	b2db      	uxtb	r3, r3
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d008      	beq.n	8012c0e <Update_Blink+0x41e>
 8012bfc:	4b79      	ldr	r3, [pc, #484]	; (8012de4 <Update_Blink+0x5f4>)
 8012bfe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8012c02:	f043 0301 	orr.w	r3, r3, #1
 8012c06:	b21a      	sxth	r2, r3
 8012c08:	4b76      	ldr	r3, [pc, #472]	; (8012de4 <Update_Blink+0x5f4>)
 8012c0a:	815a      	strh	r2, [r3, #10]
 8012c0c:	e007      	b.n	8012c1e <Update_Blink+0x42e>
      else      ParamTab[V1F] &= ~D_HID;
 8012c0e:	4b75      	ldr	r3, [pc, #468]	; (8012de4 <Update_Blink+0x5f4>)
 8012c10:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8012c14:	f023 0301 	bic.w	r3, r3, #1
 8012c18:	b21a      	sxth	r2, r3
 8012c1a:	4b72      	ldr	r3, [pc, #456]	; (8012de4 <Update_Blink+0x5f4>)
 8012c1c:	815a      	strh	r2, [r3, #10]
      if(Twink) ParamTab[V2F] |=  D_HID;
 8012c1e:	4b76      	ldr	r3, [pc, #472]	; (8012df8 <Update_Blink+0x608>)
 8012c20:	781b      	ldrb	r3, [r3, #0]
 8012c22:	b2db      	uxtb	r3, r3
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d009      	beq.n	8012c3c <Update_Blink+0x44c>
 8012c28:	4b6e      	ldr	r3, [pc, #440]	; (8012de4 <Update_Blink+0x5f4>)
 8012c2a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012c2e:	f043 0301 	orr.w	r3, r3, #1
 8012c32:	b21a      	sxth	r2, r3
 8012c34:	4b6b      	ldr	r3, [pc, #428]	; (8012de4 <Update_Blink+0x5f4>)
 8012c36:	819a      	strh	r2, [r3, #12]
      else      ParamTab[V2F] &= ~D_HID;
      break;
 8012c38:	f000 bccf 	b.w	80135da <Update_Blink+0xdea>
      else      ParamTab[V2F] &= ~D_HID;
 8012c3c:	4b69      	ldr	r3, [pc, #420]	; (8012de4 <Update_Blink+0x5f4>)
 8012c3e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012c42:	f023 0301 	bic.w	r3, r3, #1
 8012c46:	b21a      	sxth	r2, r3
 8012c48:	4b66      	ldr	r3, [pc, #408]	; (8012de4 <Update_Blink+0x5f4>)
 8012c4a:	819a      	strh	r2, [r3, #12]
      break;
 8012c4c:	f000 bcc5 	b.w	80135da <Update_Blink+0xdea>

    case TIM_BASE:
      SetColor(GRY, TCOLOR[XN]);
 8012c50:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8012c54:	4619      	mov	r1, r3
 8012c56:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012c5a:	f7fb f9b1 	bl	800dfc0 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 2, 6*5);
 8012c5e:	4b66      	ldr	r3, [pc, #408]	; (8012df8 <Update_Blink+0x608>)
 8012c60:	781b      	ldrb	r3, [r3, #0]
 8012c62:	b2d8      	uxtb	r0, r3
 8012c64:	89bb      	ldrh	r3, [r7, #12]
 8012c66:	4a67      	ldr	r2, [pc, #412]	; (8012e04 <Update_Blink+0x614>)
 8012c68:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012c6c:	b29b      	uxth	r3, r3
 8012c6e:	3b03      	subs	r3, #3
 8012c70:	b29b      	uxth	r3, r3
 8012c72:	b219      	sxth	r1, r3
 8012c74:	231e      	movs	r3, #30
 8012c76:	9301      	str	r3, [sp, #4]
 8012c78:	2302      	movs	r3, #2
 8012c7a:	9300      	str	r3, [sp, #0]
 8012c7c:	230b      	movs	r3, #11
 8012c7e:	22e1      	movs	r2, #225	; 0xe1
 8012c80:	f7fb fa8c 	bl	800e19c <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, TimeBase_Str[List[TIM_BASE].Val]);
 8012c84:	89bb      	ldrh	r3, [r7, #12]
 8012c86:	4a5f      	ldr	r2, [pc, #380]	; (8012e04 <Update_Blink+0x614>)
 8012c88:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012c8c:	4b5a      	ldr	r3, [pc, #360]	; (8012df8 <Update_Blink+0x608>)
 8012c8e:	781b      	ldrb	r3, [r3, #0]
 8012c90:	b2da      	uxtb	r2, r3
 8012c92:	4b5d      	ldr	r3, [pc, #372]	; (8012e08 <Update_Blink+0x618>)
 8012c94:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012c98:	00db      	lsls	r3, r3, #3
 8012c9a:	495c      	ldr	r1, [pc, #368]	; (8012e0c <Update_Blink+0x61c>)
 8012c9c:	440b      	add	r3, r1
 8012c9e:	21e1      	movs	r1, #225	; 0xe1
 8012ca0:	f7fb f9a6 	bl	800dff0 <DispStr>
      break;
 8012ca4:	f000 bc99 	b.w	80135da <Update_Blink+0xdea>

    case VIEWPOSI:
      if(Twink) ParamTab[T0F] |=  D_HID;
 8012ca8:	4b53      	ldr	r3, [pc, #332]	; (8012df8 <Update_Blink+0x608>)
 8012caa:	781b      	ldrb	r3, [r3, #0]
 8012cac:	b2db      	uxtb	r3, r3
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d009      	beq.n	8012cc6 <Update_Blink+0x4d6>
 8012cb2:	4b4c      	ldr	r3, [pc, #304]	; (8012de4 <Update_Blink+0x5f4>)
 8012cb4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012cb8:	f043 0301 	orr.w	r3, r3, #1
 8012cbc:	b21a      	sxth	r2, r3
 8012cbe:	4b49      	ldr	r3, [pc, #292]	; (8012de4 <Update_Blink+0x5f4>)
 8012cc0:	81da      	strh	r2, [r3, #14]
      else      ParamTab[T0F] &= ~D_HID;
      break;
 8012cc2:	f000 bc8a 	b.w	80135da <Update_Blink+0xdea>
      else      ParamTab[T0F] &= ~D_HID;
 8012cc6:	4b47      	ldr	r3, [pc, #284]	; (8012de4 <Update_Blink+0x5f4>)
 8012cc8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012ccc:	f023 0301 	bic.w	r3, r3, #1
 8012cd0:	b21a      	sxth	r2, r3
 8012cd2:	4b44      	ldr	r3, [pc, #272]	; (8012de4 <Update_Blink+0x5f4>)
 8012cd4:	81da      	strh	r2, [r3, #14]
      break;
 8012cd6:	f000 bc80 	b.w	80135da <Update_Blink+0xdea>

    case SMPL_DPTH:
      SetColor(GRY, TCOLOR[XN]);
 8012cda:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8012cde:	4619      	mov	r1, r3
 8012ce0:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012ce4:	f7fb f96c 	bl	800dfc0 <SetColor>
      Draw_Circle_D(Twink, S_X[SMPL_DPTH]-3, LABLE_Y, 11, 0, 6*11);
 8012ce8:	4b43      	ldr	r3, [pc, #268]	; (8012df8 <Update_Blink+0x608>)
 8012cea:	781b      	ldrb	r3, [r3, #0]
 8012cec:	b2d8      	uxtb	r0, r3
 8012cee:	23f8      	movs	r3, #248	; 0xf8
 8012cf0:	b29b      	uxth	r3, r3
 8012cf2:	3b03      	subs	r3, #3
 8012cf4:	b29b      	uxth	r3, r3
 8012cf6:	b219      	sxth	r1, r3
 8012cf8:	2342      	movs	r3, #66	; 0x42
 8012cfa:	9301      	str	r3, [sp, #4]
 8012cfc:	2300      	movs	r3, #0
 8012cfe:	9300      	str	r3, [sp, #0]
 8012d00:	230b      	movs	r3, #11
 8012d02:	2203      	movs	r2, #3
 8012d04:	f7fb fa4a 	bl	800e19c <Draw_Circle_D>
      DispStr(S_X[SMPL_DPTH],    LABLE_Y,  Twink, "SmplDpth:  ");
 8012d08:	20f8      	movs	r0, #248	; 0xf8
 8012d0a:	4b3b      	ldr	r3, [pc, #236]	; (8012df8 <Update_Blink+0x608>)
 8012d0c:	781b      	ldrb	r3, [r3, #0]
 8012d0e:	b2da      	uxtb	r2, r3
 8012d10:	4b3f      	ldr	r3, [pc, #252]	; (8012e10 <Update_Blink+0x620>)
 8012d12:	2103      	movs	r1, #3
 8012d14:	f7fb f96c 	bl	800dff0 <DispStr>
      DispStr(S_X[SMPL_DPTH]+6*9, LABLE_Y,  Twink, (char *)&D[List[SMPL_DPTH].Val]);
 8012d18:	23f8      	movs	r3, #248	; 0xf8
 8012d1a:	b29b      	uxth	r3, r3
 8012d1c:	3336      	adds	r3, #54	; 0x36
 8012d1e:	b29b      	uxth	r3, r3
 8012d20:	b218      	sxth	r0, r3
 8012d22:	4b35      	ldr	r3, [pc, #212]	; (8012df8 <Update_Blink+0x608>)
 8012d24:	781b      	ldrb	r3, [r3, #0]
 8012d26:	b2da      	uxtb	r2, r3
 8012d28:	4b37      	ldr	r3, [pc, #220]	; (8012e08 <Update_Blink+0x618>)
 8012d2a:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8012d2e:	4619      	mov	r1, r3
 8012d30:	460b      	mov	r3, r1
 8012d32:	005b      	lsls	r3, r3, #1
 8012d34:	440b      	add	r3, r1
 8012d36:	005b      	lsls	r3, r3, #1
 8012d38:	4936      	ldr	r1, [pc, #216]	; (8012e14 <Update_Blink+0x624>)
 8012d3a:	440b      	add	r3, r1
 8012d3c:	2103      	movs	r1, #3
 8012d3e:	f7fb f957 	bl	800dff0 <DispStr>
      break;
 8012d42:	f000 bc4a 	b.w	80135da <Update_Blink+0xdea>

    case T1_POSI:
    case T2_POSI:
      Tmp = (i == T1_POSI)? T1F : T2F;
 8012d46:	89bb      	ldrh	r3, [r7, #12]
 8012d48:	2b0a      	cmp	r3, #10
 8012d4a:	d101      	bne.n	8012d50 <Update_Blink+0x560>
 8012d4c:	2308      	movs	r3, #8
 8012d4e:	e000      	b.n	8012d52 <Update_Blink+0x562>
 8012d50:	2309      	movs	r3, #9
 8012d52:	607b      	str	r3, [r7, #4]
      if(Twink) ParamTab[Tmp] |=  D_HID;
 8012d54:	4b28      	ldr	r3, [pc, #160]	; (8012df8 <Update_Blink+0x608>)
 8012d56:	781b      	ldrb	r3, [r3, #0]
 8012d58:	b2db      	uxtb	r3, r3
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d00b      	beq.n	8012d76 <Update_Blink+0x586>
 8012d5e:	4a21      	ldr	r2, [pc, #132]	; (8012de4 <Update_Blink+0x5f4>)
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012d66:	f043 0301 	orr.w	r3, r3, #1
 8012d6a:	b219      	sxth	r1, r3
 8012d6c:	4a1d      	ldr	r2, [pc, #116]	; (8012de4 <Update_Blink+0x5f4>)
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8012d74:	e00a      	b.n	8012d8c <Update_Blink+0x59c>
      else      ParamTab[Tmp] &= ~D_HID;
 8012d76:	4a1b      	ldr	r2, [pc, #108]	; (8012de4 <Update_Blink+0x5f4>)
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012d7e:	f023 0301 	bic.w	r3, r3, #1
 8012d82:	b219      	sxth	r1, r3
 8012d84:	4a17      	ldr	r2, [pc, #92]	; (8012de4 <Update_Blink+0x5f4>)
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      Tmp  = ParamTab[T2x1] - ParamTab[T1x1];          // T2 - T1 ��ֵ
 8012d8c:	4b15      	ldr	r3, [pc, #84]	; (8012de4 <Update_Blink+0x5f4>)
 8012d8e:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8012d92:	461a      	mov	r2, r3
 8012d94:	4b13      	ldr	r3, [pc, #76]	; (8012de4 <Update_Blink+0x5f4>)
 8012d96:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8012d9a:	1ad3      	subs	r3, r2, r3
 8012d9c:	607b      	str	r3, [r7, #4]
      Tmp *= B_SCALE[List[TIM_BASE].Val]* Exp(T_SCALE[List[TIM_BASE].Val]);
 8012d9e:	4b1a      	ldr	r3, [pc, #104]	; (8012e08 <Update_Blink+0x618>)
 8012da0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012da4:	461a      	mov	r2, r3
 8012da6:	4b1c      	ldr	r3, [pc, #112]	; (8012e18 <Update_Blink+0x628>)
 8012da8:	5c9b      	ldrb	r3, [r3, r2]
 8012daa:	461c      	mov	r4, r3
 8012dac:	4b16      	ldr	r3, [pc, #88]	; (8012e08 <Update_Blink+0x618>)
 8012dae:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012db2:	461a      	mov	r2, r3
 8012db4:	4b19      	ldr	r3, [pc, #100]	; (8012e1c <Update_Blink+0x62c>)
 8012db6:	5c9b      	ldrb	r3, [r3, r2]
 8012db8:	4618      	mov	r0, r3
 8012dba:	f7ff f8ed 	bl	8011f98 <Exp>
 8012dbe:	4603      	mov	r3, r0
 8012dc0:	fb03 f204 	mul.w	r2, r3, r4
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	fb02 f303 	mul.w	r3, r2, r3
 8012dca:	607b      	str	r3, [r7, #4]
      if(Tmp>=0)
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	db28      	blt.n	8012e24 <Update_Blink+0x634>
        Value2Str(NumStr, Tmp, T[0], 3, UNSIGN);
 8012dd2:	2301      	movs	r3, #1
 8012dd4:	9300      	str	r3, [sp, #0]
 8012dd6:	2303      	movs	r3, #3
 8012dd8:	4a11      	ldr	r2, [pc, #68]	; (8012e20 <Update_Blink+0x630>)
 8012dda:	6879      	ldr	r1, [r7, #4]
 8012ddc:	4805      	ldr	r0, [pc, #20]	; (8012df4 <Update_Blink+0x604>)
 8012dde:	f7fe ffdf 	bl	8011da0 <Value2Str>
 8012de2:	e027      	b.n	8012e34 <Update_Blink+0x644>
 8012de4:	20000140 	.word	0x20000140
 8012de8:	08002130 	.word	0x08002130
 8012dec:	08002108 	.word	0x08002108
 8012df0:	08001d00 	.word	0x08001d00
 8012df4:	20002844 	.word	0x20002844
 8012df8:	2000077c 	.word	0x2000077c
 8012dfc:	08000960 	.word	0x08000960
 8012e00:	08000964 	.word	0x08000964
 8012e04:	0800215c 	.word	0x0800215c
 8012e08:	20000298 	.word	0x20000298
 8012e0c:	200001d0 	.word	0x200001d0
 8012e10:	08000970 	.word	0x08000970
 8012e14:	08001c4c 	.word	0x08001c4c
 8012e18:	0800211c 	.word	0x0800211c
 8012e1c:	080020f4 	.word	0x080020f4
 8012e20:	08001ce8 	.word	0x08001ce8
      else
        Value2Str(NumStr, Tmp, T[0], 3, SIGN);
 8012e24:	2300      	movs	r3, #0
 8012e26:	9300      	str	r3, [sp, #0]
 8012e28:	2303      	movs	r3, #3
 8012e2a:	4aa3      	ldr	r2, [pc, #652]	; (80130b8 <Update_Blink+0x8c8>)
 8012e2c:	6879      	ldr	r1, [r7, #4]
 8012e2e:	48a3      	ldr	r0, [pc, #652]	; (80130bc <Update_Blink+0x8cc>)
 8012e30:	f7fe ffb6 	bl	8011da0 <Value2Str>
      SetColor(GRY, TCOLOR[XN]);
 8012e34:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8012e38:	4619      	mov	r1, r3
 8012e3a:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012e3e:	f7fb f8bf 	bl	800dfc0 <SetColor>
      Draw_Circle_D(Twink, S_X[T1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 8012e42:	4b9f      	ldr	r3, [pc, #636]	; (80130c0 <Update_Blink+0x8d0>)
 8012e44:	781b      	ldrb	r3, [r3, #0]
 8012e46:	b2d8      	uxtb	r0, r3
 8012e48:	2307      	movs	r3, #7
 8012e4a:	b29b      	uxth	r3, r3
 8012e4c:	3b03      	subs	r3, #3
 8012e4e:	b29b      	uxth	r3, r3
 8012e50:	b219      	sxth	r1, r3
 8012e52:	2336      	movs	r3, #54	; 0x36
 8012e54:	9301      	str	r3, [sp, #4]
 8012e56:	2300      	movs	r3, #0
 8012e58:	9300      	str	r3, [sp, #0]
 8012e5a:	230b      	movs	r3, #11
 8012e5c:	2203      	movs	r2, #3
 8012e5e:	f7fb f99d 	bl	800e19c <Draw_Circle_D>
      DispStr(S_X[T1_POSI]+0*6, LABLE_Y, Twink+SYMB, "]");
 8012e62:	2007      	movs	r0, #7
 8012e64:	4b96      	ldr	r3, [pc, #600]	; (80130c0 <Update_Blink+0x8d0>)
 8012e66:	781b      	ldrb	r3, [r3, #0]
 8012e68:	b2db      	uxtb	r3, r3
 8012e6a:	3310      	adds	r3, #16
 8012e6c:	b2da      	uxtb	r2, r3
 8012e6e:	4b95      	ldr	r3, [pc, #596]	; (80130c4 <Update_Blink+0x8d4>)
 8012e70:	2103      	movs	r1, #3
 8012e72:	f7fb f8bd 	bl	800dff0 <DispStr>
      DispStr(S_X[T1_POSI]+1*6, LABLE_Y, Twink,      "T:      ");
 8012e76:	2307      	movs	r3, #7
 8012e78:	b29b      	uxth	r3, r3
 8012e7a:	3306      	adds	r3, #6
 8012e7c:	b29b      	uxth	r3, r3
 8012e7e:	b218      	sxth	r0, r3
 8012e80:	4b8f      	ldr	r3, [pc, #572]	; (80130c0 <Update_Blink+0x8d0>)
 8012e82:	781b      	ldrb	r3, [r3, #0]
 8012e84:	b2da      	uxtb	r2, r3
 8012e86:	4b90      	ldr	r3, [pc, #576]	; (80130c8 <Update_Blink+0x8d8>)
 8012e88:	2103      	movs	r1, #3
 8012e8a:	f7fb f8b1 	bl	800dff0 <DispStr>
      DispStr(S_X[T1_POSI]+3*6, LABLE_Y, Twink,      (char *)NumStr);
 8012e8e:	2307      	movs	r3, #7
 8012e90:	b29b      	uxth	r3, r3
 8012e92:	3312      	adds	r3, #18
 8012e94:	b29b      	uxth	r3, r3
 8012e96:	b218      	sxth	r0, r3
 8012e98:	4b89      	ldr	r3, [pc, #548]	; (80130c0 <Update_Blink+0x8d0>)
 8012e9a:	781b      	ldrb	r3, [r3, #0]
 8012e9c:	b2da      	uxtb	r2, r3
 8012e9e:	4b87      	ldr	r3, [pc, #540]	; (80130bc <Update_Blink+0x8cc>)
 8012ea0:	2103      	movs	r1, #3
 8012ea2:	f7fb f8a5 	bl	800dff0 <DispStr>
      break;
 8012ea6:	e398      	b.n	80135da <Update_Blink+0xdea>

    case XN_TYPE:
      if(Twink) ParamTab[T1F] |=  D_HID;
 8012ea8:	4b85      	ldr	r3, [pc, #532]	; (80130c0 <Update_Blink+0x8d0>)
 8012eaa:	781b      	ldrb	r3, [r3, #0]
 8012eac:	b2db      	uxtb	r3, r3
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d008      	beq.n	8012ec4 <Update_Blink+0x6d4>
 8012eb2:	4b86      	ldr	r3, [pc, #536]	; (80130cc <Update_Blink+0x8dc>)
 8012eb4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8012eb8:	f043 0301 	orr.w	r3, r3, #1
 8012ebc:	b21a      	sxth	r2, r3
 8012ebe:	4b83      	ldr	r3, [pc, #524]	; (80130cc <Update_Blink+0x8dc>)
 8012ec0:	821a      	strh	r2, [r3, #16]
 8012ec2:	e007      	b.n	8012ed4 <Update_Blink+0x6e4>
      else      ParamTab[T1F] &= ~D_HID;
 8012ec4:	4b81      	ldr	r3, [pc, #516]	; (80130cc <Update_Blink+0x8dc>)
 8012ec6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8012eca:	f023 0301 	bic.w	r3, r3, #1
 8012ece:	b21a      	sxth	r2, r3
 8012ed0:	4b7e      	ldr	r3, [pc, #504]	; (80130cc <Update_Blink+0x8dc>)
 8012ed2:	821a      	strh	r2, [r3, #16]
      if(Twink) ParamTab[T2F] |=  D_HID;
 8012ed4:	4b7a      	ldr	r3, [pc, #488]	; (80130c0 <Update_Blink+0x8d0>)
 8012ed6:	781b      	ldrb	r3, [r3, #0]
 8012ed8:	b2db      	uxtb	r3, r3
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d008      	beq.n	8012ef0 <Update_Blink+0x700>
 8012ede:	4b7b      	ldr	r3, [pc, #492]	; (80130cc <Update_Blink+0x8dc>)
 8012ee0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8012ee4:	f043 0301 	orr.w	r3, r3, #1
 8012ee8:	b21a      	sxth	r2, r3
 8012eea:	4b78      	ldr	r3, [pc, #480]	; (80130cc <Update_Blink+0x8dc>)
 8012eec:	825a      	strh	r2, [r3, #18]
      else      ParamTab[T2F] &= ~D_HID;
      break;
 8012eee:	e374      	b.n	80135da <Update_Blink+0xdea>
      else      ParamTab[T2F] &= ~D_HID;
 8012ef0:	4b76      	ldr	r3, [pc, #472]	; (80130cc <Update_Blink+0x8dc>)
 8012ef2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8012ef6:	f023 0301 	bic.w	r3, r3, #1
 8012efa:	b21a      	sxth	r2, r3
 8012efc:	4b73      	ldr	r3, [pc, #460]	; (80130cc <Update_Blink+0x8dc>)
 8012efe:	825a      	strh	r2, [r3, #18]
      break;
 8012f00:	e36b      	b.n	80135da <Update_Blink+0xdea>

    case SYNCMODE:
      if(!(Status &  STOP))
 8012f02:	4b73      	ldr	r3, [pc, #460]	; (80130d0 <Update_Blink+0x8e0>)
 8012f04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012f08:	b29b      	uxth	r3, r3
 8012f0a:	f003 0301 	and.w	r3, r3, #1
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	f040 8362 	bne.w	80135d8 <Update_Blink+0xde8>
      {
      SetColor(GRY, TCOLOR[TRG]);
 8012f14:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8012f18:	4619      	mov	r1, r3
 8012f1a:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012f1e:	f7fb f84f 	bl	800dfc0 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 1, 6*4);
 8012f22:	4b67      	ldr	r3, [pc, #412]	; (80130c0 <Update_Blink+0x8d0>)
 8012f24:	781b      	ldrb	r3, [r3, #0]
 8012f26:	b2d8      	uxtb	r0, r3
 8012f28:	89bb      	ldrh	r3, [r7, #12]
 8012f2a:	4a6a      	ldr	r2, [pc, #424]	; (80130d4 <Update_Blink+0x8e4>)
 8012f2c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012f30:	b29b      	uxth	r3, r3
 8012f32:	3b03      	subs	r3, #3
 8012f34:	b29b      	uxth	r3, r3
 8012f36:	b219      	sxth	r1, r3
 8012f38:	2318      	movs	r3, #24
 8012f3a:	9301      	str	r3, [sp, #4]
 8012f3c:	2301      	movs	r3, #1
 8012f3e:	9300      	str	r3, [sp, #0]
 8012f40:	230b      	movs	r3, #11
 8012f42:	22e1      	movs	r2, #225	; 0xe1
 8012f44:	f7fb f92a 	bl	800e19c <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, (char *)ptr);
 8012f48:	89bb      	ldrh	r3, [r7, #12]
 8012f4a:	4a62      	ldr	r2, [pc, #392]	; (80130d4 <Update_Blink+0x8e4>)
 8012f4c:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012f50:	4b5b      	ldr	r3, [pc, #364]	; (80130c0 <Update_Blink+0x8d0>)
 8012f52:	781b      	ldrb	r3, [r3, #0]
 8012f54:	b2da      	uxtb	r2, r3
 8012f56:	68bb      	ldr	r3, [r7, #8]
 8012f58:	21e1      	movs	r1, #225	; 0xe1
 8012f5a:	f7fb f849 	bl	800dff0 <DispStr>
      }
      break;
 8012f5e:	e33b      	b.n	80135d8 <Update_Blink+0xde8>

    case TR_MODE:
    case SENSITIVE:
      SetColor(GRY, TCOLOR[TRG]);
 8012f60:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8012f64:	4619      	mov	r1, r3
 8012f66:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012f6a:	f7fb f829 	bl	800dfc0 <SetColor>
      Draw_Circle_D(Twink, S_X[TR_MODE]-3, TITLE_Y_POS, 11, 0, 6*8);
 8012f6e:	4b54      	ldr	r3, [pc, #336]	; (80130c0 <Update_Blink+0x8d0>)
 8012f70:	781b      	ldrb	r3, [r3, #0]
 8012f72:	b2d8      	uxtb	r0, r3
 8012f74:	23dd      	movs	r3, #221	; 0xdd
 8012f76:	b29b      	uxth	r3, r3
 8012f78:	3b03      	subs	r3, #3
 8012f7a:	b29b      	uxth	r3, r3
 8012f7c:	b219      	sxth	r1, r3
 8012f7e:	2330      	movs	r3, #48	; 0x30
 8012f80:	9301      	str	r3, [sp, #4]
 8012f82:	2300      	movs	r3, #0
 8012f84:	9300      	str	r3, [sp, #0]
 8012f86:	230b      	movs	r3, #11
 8012f88:	22e1      	movs	r2, #225	; 0xe1
 8012f8a:	f7fb f907 	bl	800e19c <Draw_Circle_D>
      DispStr10x14(S_X[TR_MODE], TITLE_Y_POS, Twink+SYMB,(List[TR_MODE].Val?("D"):("C")));
 8012f8e:	20dd      	movs	r0, #221	; 0xdd
 8012f90:	4b4b      	ldr	r3, [pc, #300]	; (80130c0 <Update_Blink+0x8d0>)
 8012f92:	781b      	ldrb	r3, [r3, #0]
 8012f94:	b2db      	uxtb	r3, r3
 8012f96:	3310      	adds	r3, #16
 8012f98:	b2da      	uxtb	r2, r3
 8012f9a:	4b4f      	ldr	r3, [pc, #316]	; (80130d8 <Update_Blink+0x8e8>)
 8012f9c:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d001      	beq.n	8012fa8 <Update_Blink+0x7b8>
 8012fa4:	4b4d      	ldr	r3, [pc, #308]	; (80130dc <Update_Blink+0x8ec>)
 8012fa6:	e000      	b.n	8012faa <Update_Blink+0x7ba>
 8012fa8:	4b4d      	ldr	r3, [pc, #308]	; (80130e0 <Update_Blink+0x8f0>)
 8012faa:	21e1      	movs	r1, #225	; 0xe1
 8012fac:	f7fb fa88 	bl	800e4c0 <DispStr10x14>

      Tmp  = List[SENSITIVE].Val;                        // �����ز�ֵ
 8012fb0:	4b49      	ldr	r3, [pc, #292]	; (80130d8 <Update_Blink+0x8e8>)
 8012fb2:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8012fb6:	607b      	str	r3, [r7, #4]
      Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8012fb8:	89fb      	ldrh	r3, [r7, #14]
 8012fba:	4a4a      	ldr	r2, [pc, #296]	; (80130e4 <Update_Blink+0x8f4>)
 8012fbc:	5cd3      	ldrb	r3, [r2, r3]
 8012fbe:	461c      	mov	r4, r3
 8012fc0:	89fb      	ldrh	r3, [r7, #14]
 8012fc2:	4a49      	ldr	r2, [pc, #292]	; (80130e8 <Update_Blink+0x8f8>)
 8012fc4:	5cd3      	ldrb	r3, [r2, r3]
 8012fc6:	4618      	mov	r0, r3
 8012fc8:	f7fe ffe6 	bl	8011f98 <Exp>
 8012fcc:	4603      	mov	r3, r0
 8012fce:	fb03 f204 	mul.w	r2, r3, r4
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	fb02 f303 	mul.w	r3, r2, r3
 8012fd8:	607b      	str	r3, [r7, #4]
      Value2Str(NumStr, Tmp, V[0], 2, UNSIGN);
 8012fda:	2301      	movs	r3, #1
 8012fdc:	9300      	str	r3, [sp, #0]
 8012fde:	2302      	movs	r3, #2
 8012fe0:	4a42      	ldr	r2, [pc, #264]	; (80130ec <Update_Blink+0x8fc>)
 8012fe2:	6879      	ldr	r1, [r7, #4]
 8012fe4:	4835      	ldr	r0, [pc, #212]	; (80130bc <Update_Blink+0x8cc>)
 8012fe6:	f7fe fedb 	bl	8011da0 <Value2Str>
      DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, Twink,  "     ");
 8012fea:	23e7      	movs	r3, #231	; 0xe7
 8012fec:	b29b      	uxth	r3, r3
 8012fee:	3309      	adds	r3, #9
 8012ff0:	b29b      	uxth	r3, r3
 8012ff2:	b218      	sxth	r0, r3
 8012ff4:	4b32      	ldr	r3, [pc, #200]	; (80130c0 <Update_Blink+0x8d0>)
 8012ff6:	781b      	ldrb	r3, [r3, #0]
 8012ff8:	b2da      	uxtb	r2, r3
 8012ffa:	4b3d      	ldr	r3, [pc, #244]	; (80130f0 <Update_Blink+0x900>)
 8012ffc:	21e1      	movs	r1, #225	; 0xe1
 8012ffe:	f7fa fff7 	bl	800dff0 <DispStr>
      DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, Twink+SYMB,"E");
 8013002:	20e7      	movs	r0, #231	; 0xe7
 8013004:	4b2e      	ldr	r3, [pc, #184]	; (80130c0 <Update_Blink+0x8d0>)
 8013006:	781b      	ldrb	r3, [r3, #0]
 8013008:	b2db      	uxtb	r3, r3
 801300a:	3310      	adds	r3, #16
 801300c:	b2da      	uxtb	r2, r3
 801300e:	4b39      	ldr	r3, [pc, #228]	; (80130f4 <Update_Blink+0x904>)
 8013010:	21e1      	movs	r1, #225	; 0xe1
 8013012:	f7fb fa55 	bl	800e4c0 <DispStr10x14>
      DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, Twink     ,  (char *)NumStr);
 8013016:	23e7      	movs	r3, #231	; 0xe7
 8013018:	b29b      	uxth	r3, r3
 801301a:	3309      	adds	r3, #9
 801301c:	b29b      	uxth	r3, r3
 801301e:	b218      	sxth	r0, r3
 8013020:	4b27      	ldr	r3, [pc, #156]	; (80130c0 <Update_Blink+0x8d0>)
 8013022:	781b      	ldrb	r3, [r3, #0]
 8013024:	b2da      	uxtb	r2, r3
 8013026:	4b25      	ldr	r3, [pc, #148]	; (80130bc <Update_Blink+0x8cc>)
 8013028:	21e1      	movs	r1, #225	; 0xe1
 801302a:	f7fa ffe1 	bl	800dff0 <DispStr>
      break;
 801302e:	e2d4      	b.n	80135da <Update_Blink+0xdea>

    case FITTRIGG:
      SetColor(GRY, TCOLOR[TRG]);
 8013030:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8013034:	4619      	mov	r1, r3
 8013036:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801303a:	f7fa ffc1 	bl	800dfc0 <SetColor>
      DispStr10x14(S_X[FITTRIGG], TITLE_Y_POS, PRN+SYMB,(List[FITTRIGG].Val?("F"):("B")));
 801303e:	20cf      	movs	r0, #207	; 0xcf
 8013040:	4b25      	ldr	r3, [pc, #148]	; (80130d8 <Update_Blink+0x8e8>)
 8013042:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8013046:	2b00      	cmp	r3, #0
 8013048:	d001      	beq.n	801304e <Update_Blink+0x85e>
 801304a:	4b2b      	ldr	r3, [pc, #172]	; (80130f8 <Update_Blink+0x908>)
 801304c:	e000      	b.n	8013050 <Update_Blink+0x860>
 801304e:	4b2b      	ldr	r3, [pc, #172]	; (80130fc <Update_Blink+0x90c>)
 8013050:	2210      	movs	r2, #16
 8013052:	21e1      	movs	r1, #225	; 0xe1
 8013054:	f7fb fa34 	bl	800e4c0 <DispStr10x14>
      break;
 8013058:	e2bf      	b.n	80135da <Update_Blink+0xdea>

    case THRESHOLD:
      if(Twink) ParamTab[VTF] |=  D_HID;
 801305a:	4b19      	ldr	r3, [pc, #100]	; (80130c0 <Update_Blink+0x8d0>)
 801305c:	781b      	ldrb	r3, [r3, #0]
 801305e:	b2db      	uxtb	r3, r3
 8013060:	2b00      	cmp	r3, #0
 8013062:	d008      	beq.n	8013076 <Update_Blink+0x886>
 8013064:	4b19      	ldr	r3, [pc, #100]	; (80130cc <Update_Blink+0x8dc>)
 8013066:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801306a:	f043 0301 	orr.w	r3, r3, #1
 801306e:	b21a      	sxth	r2, r3
 8013070:	4b16      	ldr	r3, [pc, #88]	; (80130cc <Update_Blink+0x8dc>)
 8013072:	811a      	strh	r2, [r3, #8]
      else      ParamTab[VTF] &= ~D_HID;
      break;
 8013074:	e2b1      	b.n	80135da <Update_Blink+0xdea>
      else      ParamTab[VTF] &= ~D_HID;
 8013076:	4b15      	ldr	r3, [pc, #84]	; (80130cc <Update_Blink+0x8dc>)
 8013078:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801307c:	f023 0301 	bic.w	r3, r3, #1
 8013080:	b21a      	sxth	r2, r3
 8013082:	4b12      	ldr	r3, [pc, #72]	; (80130cc <Update_Blink+0x8dc>)
 8013084:	811a      	strh	r2, [r3, #8]
      break;
 8013086:	e2a8      	b.n	80135da <Update_Blink+0xdea>

    case TR_TYPE:
      if(Twink) ParamTab[VTF] |=  D_HID;
 8013088:	4b0d      	ldr	r3, [pc, #52]	; (80130c0 <Update_Blink+0x8d0>)
 801308a:	781b      	ldrb	r3, [r3, #0]
 801308c:	b2db      	uxtb	r3, r3
 801308e:	2b00      	cmp	r3, #0
 8013090:	d008      	beq.n	80130a4 <Update_Blink+0x8b4>
 8013092:	4b0e      	ldr	r3, [pc, #56]	; (80130cc <Update_Blink+0x8dc>)
 8013094:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8013098:	f043 0301 	orr.w	r3, r3, #1
 801309c:	b21a      	sxth	r2, r3
 801309e:	4b0b      	ldr	r3, [pc, #44]	; (80130cc <Update_Blink+0x8dc>)
 80130a0:	811a      	strh	r2, [r3, #8]
      else      ParamTab[VTF] &= ~D_HID;
      break;
 80130a2:	e29a      	b.n	80135da <Update_Blink+0xdea>
      else      ParamTab[VTF] &= ~D_HID;
 80130a4:	4b09      	ldr	r3, [pc, #36]	; (80130cc <Update_Blink+0x8dc>)
 80130a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80130aa:	f023 0301 	bic.w	r3, r3, #1
 80130ae:	b21a      	sxth	r2, r3
 80130b0:	4b06      	ldr	r3, [pc, #24]	; (80130cc <Update_Blink+0x8dc>)
 80130b2:	811a      	strh	r2, [r3, #8]
      break;
 80130b4:	e291      	b.n	80135da <Update_Blink+0xdea>
 80130b6:	bf00      	nop
 80130b8:	08001ce8 	.word	0x08001ce8
 80130bc:	20002844 	.word	0x20002844
 80130c0:	2000077c 	.word	0x2000077c
 80130c4:	08000960 	.word	0x08000960
 80130c8:	0800097c 	.word	0x0800097c
 80130cc:	20000140 	.word	0x20000140
 80130d0:	200007a8 	.word	0x200007a8
 80130d4:	0800215c 	.word	0x0800215c
 80130d8:	20000298 	.word	0x20000298
 80130dc:	08000988 	.word	0x08000988
 80130e0:	0800098c 	.word	0x0800098c
 80130e4:	08002130 	.word	0x08002130
 80130e8:	08002108 	.word	0x08002108
 80130ec:	08001d00 	.word	0x08001d00
 80130f0:	08000990 	.word	0x08000990
 80130f4:	08000998 	.word	0x08000998
 80130f8:	0800099c 	.word	0x0800099c
 80130fc:	0800095c 	.word	0x0800095c

    case EXT_REFN:
      SetColor(GRY, TCOLOR[EX]);
 8013100:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8013104:	4619      	mov	r1, r3
 8013106:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801310a:	f7fa ff59 	bl	800dfc0 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 1, 6*5);
 801310e:	4b93      	ldr	r3, [pc, #588]	; (801335c <Update_Blink+0xb6c>)
 8013110:	781b      	ldrb	r3, [r3, #0]
 8013112:	b2d8      	uxtb	r0, r3
 8013114:	89bb      	ldrh	r3, [r7, #12]
 8013116:	4a92      	ldr	r2, [pc, #584]	; (8013360 <Update_Blink+0xb70>)
 8013118:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801311c:	b29b      	uxth	r3, r3
 801311e:	3b03      	subs	r3, #3
 8013120:	b29b      	uxth	r3, r3
 8013122:	b219      	sxth	r1, r3
 8013124:	231e      	movs	r3, #30
 8013126:	9301      	str	r3, [sp, #4]
 8013128:	2301      	movs	r3, #1
 801312a:	9300      	str	r3, [sp, #0]
 801312c:	230b      	movs	r3, #11
 801312e:	22e1      	movs	r2, #225	; 0xe1
 8013130:	f7fb f834 	bl	800e19c <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 8013134:	89bb      	ldrh	r3, [r7, #12]
 8013136:	4a8a      	ldr	r2, [pc, #552]	; (8013360 <Update_Blink+0xb70>)
 8013138:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 801313c:	4b87      	ldr	r3, [pc, #540]	; (801335c <Update_Blink+0xb6c>)
 801313e:	781b      	ldrb	r3, [r3, #0]
 8013140:	b2da      	uxtb	r2, r3
 8013142:	4b88      	ldr	r3, [pc, #544]	; (8013364 <Update_Blink+0xb74>)
 8013144:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8013148:	2b00      	cmp	r3, #0
 801314a:	d00a      	beq.n	8013162 <Update_Blink+0x972>
 801314c:	4b85      	ldr	r3, [pc, #532]	; (8013364 <Update_Blink+0xb74>)
 801314e:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8013152:	4619      	mov	r1, r3
 8013154:	460b      	mov	r3, r1
 8013156:	005b      	lsls	r3, r3, #1
 8013158:	440b      	add	r3, r1
 801315a:	005b      	lsls	r3, r3, #1
 801315c:	4982      	ldr	r1, [pc, #520]	; (8013368 <Update_Blink+0xb78>)
 801315e:	440b      	add	r3, r1
 8013160:	e000      	b.n	8013164 <Update_Blink+0x974>
 8013162:	4b82      	ldr	r3, [pc, #520]	; (801336c <Update_Blink+0xb7c>)
 8013164:	21e1      	movs	r1, #225	; 0xe1
 8013166:	f7fa ff43 	bl	800dff0 <DispStr>
      ParamTab[P2F] &= ~D_HID;
 801316a:	4b81      	ldr	r3, [pc, #516]	; (8013370 <Update_Blink+0xb80>)
 801316c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013170:	f023 0301 	bic.w	r3, r3, #1
 8013174:	b21a      	sxth	r2, r3
 8013176:	4b7e      	ldr	r3, [pc, #504]	; (8013370 <Update_Blink+0xb80>)
 8013178:	805a      	strh	r2, [r3, #2]
      break;
 801317a:	e22e      	b.n	80135da <Update_Blink+0xdea>

    case EXT_POSI:
      if(Twink) ParamTab[P2F] |=  D_HID;
 801317c:	4b77      	ldr	r3, [pc, #476]	; (801335c <Update_Blink+0xb6c>)
 801317e:	781b      	ldrb	r3, [r3, #0]
 8013180:	b2db      	uxtb	r3, r3
 8013182:	2b00      	cmp	r3, #0
 8013184:	d008      	beq.n	8013198 <Update_Blink+0x9a8>
 8013186:	4b7a      	ldr	r3, [pc, #488]	; (8013370 <Update_Blink+0xb80>)
 8013188:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801318c:	f043 0301 	orr.w	r3, r3, #1
 8013190:	b21a      	sxth	r2, r3
 8013192:	4b77      	ldr	r3, [pc, #476]	; (8013370 <Update_Blink+0xb80>)
 8013194:	805a      	strh	r2, [r3, #2]
      else      ParamTab[P2F] &= ~D_HID;
      break;
 8013196:	e220      	b.n	80135da <Update_Blink+0xdea>
      else      ParamTab[P2F] &= ~D_HID;
 8013198:	4b75      	ldr	r3, [pc, #468]	; (8013370 <Update_Blink+0xb80>)
 801319a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801319e:	f023 0301 	bic.w	r3, r3, #1
 80131a2:	b21a      	sxth	r2, r3
 80131a4:	4b72      	ldr	r3, [pc, #456]	; (8013370 <Update_Blink+0xb80>)
 80131a6:	805a      	strh	r2, [r3, #2]
      break;
 80131a8:	e217      	b.n	80135da <Update_Blink+0xdea>

    case EXT_HIDE:
      SetColor(GRY, TCOLOR[EX]);
 80131aa:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80131ae:	4619      	mov	r1, r3
 80131b0:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80131b4:	f7fa ff04 	bl	800dfc0 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 1, 6*5);
 80131b8:	4b68      	ldr	r3, [pc, #416]	; (801335c <Update_Blink+0xb6c>)
 80131ba:	781b      	ldrb	r3, [r3, #0]
 80131bc:	b2d8      	uxtb	r0, r3
 80131be:	89bb      	ldrh	r3, [r7, #12]
 80131c0:	4a67      	ldr	r2, [pc, #412]	; (8013360 <Update_Blink+0xb70>)
 80131c2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80131c6:	b29b      	uxth	r3, r3
 80131c8:	3b03      	subs	r3, #3
 80131ca:	b29b      	uxth	r3, r3
 80131cc:	b219      	sxth	r1, r3
 80131ce:	231e      	movs	r3, #30
 80131d0:	9301      	str	r3, [sp, #4]
 80131d2:	2301      	movs	r3, #1
 80131d4:	9300      	str	r3, [sp, #0]
 80131d6:	230b      	movs	r3, #11
 80131d8:	22e1      	movs	r2, #225	; 0xe1
 80131da:	f7fa ffdf 	bl	800e19c <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 80131de:	89bb      	ldrh	r3, [r7, #12]
 80131e0:	4a5f      	ldr	r2, [pc, #380]	; (8013360 <Update_Blink+0xb70>)
 80131e2:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 80131e6:	4b5d      	ldr	r3, [pc, #372]	; (801335c <Update_Blink+0xb6c>)
 80131e8:	781b      	ldrb	r3, [r3, #0]
 80131ea:	b2da      	uxtb	r2, r3
 80131ec:	4b5d      	ldr	r3, [pc, #372]	; (8013364 <Update_Blink+0xb74>)
 80131ee:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d00a      	beq.n	801320c <Update_Blink+0xa1c>
 80131f6:	4b5b      	ldr	r3, [pc, #364]	; (8013364 <Update_Blink+0xb74>)
 80131f8:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 80131fc:	4619      	mov	r1, r3
 80131fe:	460b      	mov	r3, r1
 8013200:	005b      	lsls	r3, r3, #1
 8013202:	440b      	add	r3, r1
 8013204:	005b      	lsls	r3, r3, #1
 8013206:	4958      	ldr	r1, [pc, #352]	; (8013368 <Update_Blink+0xb78>)
 8013208:	440b      	add	r3, r1
 801320a:	e000      	b.n	801320e <Update_Blink+0xa1e>
 801320c:	4b57      	ldr	r3, [pc, #348]	; (801336c <Update_Blink+0xb7c>)
 801320e:	21e1      	movs	r1, #225	; 0xe1
 8013210:	f7fa feee 	bl	800dff0 <DispStr>
      ParamTab[P2F] &= ~D_HID;
 8013214:	4b56      	ldr	r3, [pc, #344]	; (8013370 <Update_Blink+0xb80>)
 8013216:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801321a:	f023 0301 	bic.w	r3, r3, #1
 801321e:	b21a      	sxth	r2, r3
 8013220:	4b53      	ldr	r3, [pc, #332]	; (8013370 <Update_Blink+0xb80>)
 8013222:	805a      	strh	r2, [r3, #2]
      break;
 8013224:	e1d9      	b.n	80135da <Update_Blink+0xdea>

    case TPYE_OUT:
      SetColor(GRY, TCOLOR[SN]);
 8013226:	f240 531f 	movw	r3, #1311	; 0x51f
 801322a:	4619      	mov	r1, r3
 801322c:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013230:	f7fa fec6 	bl	800dfc0 <SetColor>
      Draw_Circle_D(Twink, S_X[TPYE_OUT]-3, LABLE_Y, 11, 0, 6*9);
 8013234:	4b49      	ldr	r3, [pc, #292]	; (801335c <Update_Blink+0xb6c>)
 8013236:	781b      	ldrb	r3, [r3, #0]
 8013238:	b2d8      	uxtb	r0, r3
 801323a:	2307      	movs	r3, #7
 801323c:	b29b      	uxth	r3, r3
 801323e:	3b03      	subs	r3, #3
 8013240:	b29b      	uxth	r3, r3
 8013242:	b219      	sxth	r1, r3
 8013244:	2336      	movs	r3, #54	; 0x36
 8013246:	9301      	str	r3, [sp, #4]
 8013248:	2300      	movs	r3, #0
 801324a:	9300      	str	r3, [sp, #0]
 801324c:	230b      	movs	r3, #11
 801324e:	2203      	movs	r2, #3
 8013250:	f7fa ffa4 	bl	800e19c <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, "FO: ");
 8013254:	89bb      	ldrh	r3, [r7, #12]
 8013256:	4a42      	ldr	r2, [pc, #264]	; (8013360 <Update_Blink+0xb70>)
 8013258:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 801325c:	4b3f      	ldr	r3, [pc, #252]	; (801335c <Update_Blink+0xb6c>)
 801325e:	781b      	ldrb	r3, [r3, #0]
 8013260:	b2da      	uxtb	r2, r3
 8013262:	4b44      	ldr	r3, [pc, #272]	; (8013374 <Update_Blink+0xb84>)
 8013264:	2103      	movs	r1, #3
 8013266:	f7fa fec3 	bl	800dff0 <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, "     ");
 801326a:	89bb      	ldrh	r3, [r7, #12]
 801326c:	4a3c      	ldr	r2, [pc, #240]	; (8013360 <Update_Blink+0xb70>)
 801326e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013272:	b29b      	uxth	r3, r3
 8013274:	3318      	adds	r3, #24
 8013276:	b29b      	uxth	r3, r3
 8013278:	b218      	sxth	r0, r3
 801327a:	4b38      	ldr	r3, [pc, #224]	; (801335c <Update_Blink+0xb6c>)
 801327c:	781b      	ldrb	r3, [r3, #0]
 801327e:	b2da      	uxtb	r2, r3
 8013280:	4b3d      	ldr	r3, [pc, #244]	; (8013378 <Update_Blink+0xb88>)
 8013282:	2103      	movs	r1, #3
 8013284:	f7fa feb4 	bl	800dff0 <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, (char*)OT[List[i].Val]);
 8013288:	89bb      	ldrh	r3, [r7, #12]
 801328a:	4a35      	ldr	r2, [pc, #212]	; (8013360 <Update_Blink+0xb70>)
 801328c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013290:	b29b      	uxth	r3, r3
 8013292:	3318      	adds	r3, #24
 8013294:	b29b      	uxth	r3, r3
 8013296:	b218      	sxth	r0, r3
 8013298:	4b30      	ldr	r3, [pc, #192]	; (801335c <Update_Blink+0xb6c>)
 801329a:	781b      	ldrb	r3, [r3, #0]
 801329c:	b2da      	uxtb	r2, r3
 801329e:	89bb      	ldrh	r3, [r7, #12]
 80132a0:	4930      	ldr	r1, [pc, #192]	; (8013364 <Update_Blink+0xb74>)
 80132a2:	00db      	lsls	r3, r3, #3
 80132a4:	440b      	add	r3, r1
 80132a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80132aa:	4619      	mov	r1, r3
 80132ac:	460b      	mov	r3, r1
 80132ae:	005b      	lsls	r3, r3, #1
 80132b0:	440b      	add	r3, r1
 80132b2:	005b      	lsls	r3, r3, #1
 80132b4:	4931      	ldr	r1, [pc, #196]	; (801337c <Update_Blink+0xb8c>)
 80132b6:	440b      	add	r3, r1
 80132b8:	2103      	movs	r1, #3
 80132ba:	f7fa fe99 	bl	800dff0 <DispStr>
      break;
 80132be:	e18c      	b.n	80135da <Update_Blink+0xdea>

    case FREQ_OUT:
      SetColor(GRY, TCOLOR[SN]);
 80132c0:	f240 531f 	movw	r3, #1311	; 0x51f
 80132c4:	4619      	mov	r1, r3
 80132c6:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80132ca:	f7fa fe79 	bl	800dfc0 <SetColor>
      Draw_Circle_D(Twink, S_X[FREQ_OUT]-3, LABLE_Y, 11, 0, 6*9);
 80132ce:	4b23      	ldr	r3, [pc, #140]	; (801335c <Update_Blink+0xb6c>)
 80132d0:	781b      	ldrb	r3, [r3, #0]
 80132d2:	b2d8      	uxtb	r0, r3
 80132d4:	2307      	movs	r3, #7
 80132d6:	b29b      	uxth	r3, r3
 80132d8:	3b03      	subs	r3, #3
 80132da:	b29b      	uxth	r3, r3
 80132dc:	b219      	sxth	r1, r3
 80132de:	2336      	movs	r3, #54	; 0x36
 80132e0:	9301      	str	r3, [sp, #4]
 80132e2:	2300      	movs	r3, #0
 80132e4:	9300      	str	r3, [sp, #0]
 80132e6:	230b      	movs	r3, #11
 80132e8:	2203      	movs	r2, #3
 80132ea:	f7fa ff57 	bl	800e19c <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, "FO: ");
 80132ee:	89bb      	ldrh	r3, [r7, #12]
 80132f0:	4a1b      	ldr	r2, [pc, #108]	; (8013360 <Update_Blink+0xb70>)
 80132f2:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 80132f6:	4b19      	ldr	r3, [pc, #100]	; (801335c <Update_Blink+0xb6c>)
 80132f8:	781b      	ldrb	r3, [r3, #0]
 80132fa:	b2da      	uxtb	r2, r3
 80132fc:	4b1d      	ldr	r3, [pc, #116]	; (8013374 <Update_Blink+0xb84>)
 80132fe:	2103      	movs	r1, #3
 8013300:	f7fa fe76 	bl	800dff0 <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, "     ");
 8013304:	89bb      	ldrh	r3, [r7, #12]
 8013306:	4a16      	ldr	r2, [pc, #88]	; (8013360 <Update_Blink+0xb70>)
 8013308:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801330c:	b29b      	uxth	r3, r3
 801330e:	3318      	adds	r3, #24
 8013310:	b29b      	uxth	r3, r3
 8013312:	b218      	sxth	r0, r3
 8013314:	4b11      	ldr	r3, [pc, #68]	; (801335c <Update_Blink+0xb6c>)
 8013316:	781b      	ldrb	r3, [r3, #0]
 8013318:	b2da      	uxtb	r2, r3
 801331a:	4b17      	ldr	r3, [pc, #92]	; (8013378 <Update_Blink+0xb88>)
 801331c:	2103      	movs	r1, #3
 801331e:	f7fa fe67 	bl	800dff0 <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, (char*)Q[List[i].Val]);
 8013322:	89bb      	ldrh	r3, [r7, #12]
 8013324:	4a0e      	ldr	r2, [pc, #56]	; (8013360 <Update_Blink+0xb70>)
 8013326:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801332a:	b29b      	uxth	r3, r3
 801332c:	3318      	adds	r3, #24
 801332e:	b29b      	uxth	r3, r3
 8013330:	b218      	sxth	r0, r3
 8013332:	4b0a      	ldr	r3, [pc, #40]	; (801335c <Update_Blink+0xb6c>)
 8013334:	781b      	ldrb	r3, [r3, #0]
 8013336:	b2da      	uxtb	r2, r3
 8013338:	89bb      	ldrh	r3, [r7, #12]
 801333a:	490a      	ldr	r1, [pc, #40]	; (8013364 <Update_Blink+0xb74>)
 801333c:	00db      	lsls	r3, r3, #3
 801333e:	440b      	add	r3, r1
 8013340:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013344:	4619      	mov	r1, r3
 8013346:	460b      	mov	r3, r1
 8013348:	005b      	lsls	r3, r3, #1
 801334a:	440b      	add	r3, r1
 801334c:	005b      	lsls	r3, r3, #1
 801334e:	490c      	ldr	r1, [pc, #48]	; (8013380 <Update_Blink+0xb90>)
 8013350:	440b      	add	r3, r1
 8013352:	2103      	movs	r1, #3
 8013354:	f7fa fe4c 	bl	800dff0 <DispStr>
      break;
 8013358:	e13f      	b.n	80135da <Update_Blink+0xdea>
 801335a:	bf00      	nop
 801335c:	2000077c 	.word	0x2000077c
 8013360:	0800215c 	.word	0x0800215c
 8013364:	20000298 	.word	0x20000298
 8013368:	08001c88 	.word	0x08001c88
 801336c:	08001cac 	.word	0x08001cac
 8013370:	20000140 	.word	0x20000140
 8013374:	080009a0 	.word	0x080009a0
 8013378:	08000990 	.word	0x08000990
 801337c:	08001d50 	.word	0x08001d50
 8013380:	08001e98 	.word	0x08001e98

    case FREQ_DUT:
      SetColor(GRY, TCOLOR[SN]);
 8013384:	f240 531f 	movw	r3, #1311	; 0x51f
 8013388:	4619      	mov	r1, r3
 801338a:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801338e:	f7fa fe17 	bl	800dfc0 <SetColor>
      Value2Str(NumStr, List[i].Val*10, List[i].PTR, 2, UNSIGN);
 8013392:	89bb      	ldrh	r3, [r7, #12]
 8013394:	4a96      	ldr	r2, [pc, #600]	; (80135f0 <Update_Blink+0xe00>)
 8013396:	00db      	lsls	r3, r3, #3
 8013398:	4413      	add	r3, r2
 801339a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801339e:	461a      	mov	r2, r3
 80133a0:	4613      	mov	r3, r2
 80133a2:	009b      	lsls	r3, r3, #2
 80133a4:	4413      	add	r3, r2
 80133a6:	005b      	lsls	r3, r3, #1
 80133a8:	4619      	mov	r1, r3
 80133aa:	89bb      	ldrh	r3, [r7, #12]
 80133ac:	4a90      	ldr	r2, [pc, #576]	; (80135f0 <Update_Blink+0xe00>)
 80133ae:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80133b2:	2301      	movs	r3, #1
 80133b4:	9300      	str	r3, [sp, #0]
 80133b6:	2302      	movs	r3, #2
 80133b8:	488e      	ldr	r0, [pc, #568]	; (80135f4 <Update_Blink+0xe04>)
 80133ba:	f7fe fcf1 	bl	8011da0 <Value2Str>
      Draw_Circle_D(Twink, S_X[FREQ_DUT]-3, LABLE_Y, 11, 0, 6*9);
 80133be:	4b8e      	ldr	r3, [pc, #568]	; (80135f8 <Update_Blink+0xe08>)
 80133c0:	781b      	ldrb	r3, [r3, #0]
 80133c2:	b2d8      	uxtb	r0, r3
 80133c4:	2307      	movs	r3, #7
 80133c6:	b29b      	uxth	r3, r3
 80133c8:	3b03      	subs	r3, #3
 80133ca:	b29b      	uxth	r3, r3
 80133cc:	b219      	sxth	r1, r3
 80133ce:	2336      	movs	r3, #54	; 0x36
 80133d0:	9301      	str	r3, [sp, #4]
 80133d2:	2300      	movs	r3, #0
 80133d4:	9300      	str	r3, [sp, #0]
 80133d6:	230b      	movs	r3, #11
 80133d8:	2203      	movs	r2, #3
 80133da:	f7fa fedf 	bl	800e19c <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, "Duty: ");
 80133de:	89bb      	ldrh	r3, [r7, #12]
 80133e0:	4a86      	ldr	r2, [pc, #536]	; (80135fc <Update_Blink+0xe0c>)
 80133e2:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 80133e6:	4b84      	ldr	r3, [pc, #528]	; (80135f8 <Update_Blink+0xe08>)
 80133e8:	781b      	ldrb	r3, [r3, #0]
 80133ea:	b2da      	uxtb	r2, r3
 80133ec:	4b84      	ldr	r3, [pc, #528]	; (8013600 <Update_Blink+0xe10>)
 80133ee:	2103      	movs	r1, #3
 80133f0:	f7fa fdfe 	bl	800dff0 <DispStr>
      DispStr(S_X[i]+36, LABLE_Y, Twink, "   ");
 80133f4:	89bb      	ldrh	r3, [r7, #12]
 80133f6:	4a81      	ldr	r2, [pc, #516]	; (80135fc <Update_Blink+0xe0c>)
 80133f8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80133fc:	b29b      	uxth	r3, r3
 80133fe:	3324      	adds	r3, #36	; 0x24
 8013400:	b29b      	uxth	r3, r3
 8013402:	b218      	sxth	r0, r3
 8013404:	4b7c      	ldr	r3, [pc, #496]	; (80135f8 <Update_Blink+0xe08>)
 8013406:	781b      	ldrb	r3, [r3, #0]
 8013408:	b2da      	uxtb	r2, r3
 801340a:	4b7e      	ldr	r3, [pc, #504]	; (8013604 <Update_Blink+0xe14>)
 801340c:	2103      	movs	r1, #3
 801340e:	f7fa fdef 	bl	800dff0 <DispStr>
      DispStr(S_X[i]+36, LABLE_Y, Twink, (char *)NumStr);
 8013412:	89bb      	ldrh	r3, [r7, #12]
 8013414:	4a79      	ldr	r2, [pc, #484]	; (80135fc <Update_Blink+0xe0c>)
 8013416:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801341a:	b29b      	uxth	r3, r3
 801341c:	3324      	adds	r3, #36	; 0x24
 801341e:	b29b      	uxth	r3, r3
 8013420:	b218      	sxth	r0, r3
 8013422:	4b75      	ldr	r3, [pc, #468]	; (80135f8 <Update_Blink+0xe08>)
 8013424:	781b      	ldrb	r3, [r3, #0]
 8013426:	b2da      	uxtb	r2, r3
 8013428:	4b72      	ldr	r3, [pc, #456]	; (80135f4 <Update_Blink+0xe04>)
 801342a:	2103      	movs	r1, #3
 801342c:	f7fa fde0 	bl	800dff0 <DispStr>
      break;
 8013430:	e0d3      	b.n	80135da <Update_Blink+0xdea>

    case AUTO_CAL:
      if(Twink) ParamTab[P1F] |=  W_HID;
 8013432:	4b71      	ldr	r3, [pc, #452]	; (80135f8 <Update_Blink+0xe08>)
 8013434:	781b      	ldrb	r3, [r3, #0]
 8013436:	b2db      	uxtb	r3, r3
 8013438:	2b00      	cmp	r3, #0
 801343a:	d008      	beq.n	801344e <Update_Blink+0xc5e>
 801343c:	4b72      	ldr	r3, [pc, #456]	; (8013608 <Update_Blink+0xe18>)
 801343e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013442:	f043 0304 	orr.w	r3, r3, #4
 8013446:	b21a      	sxth	r2, r3
 8013448:	4b6f      	ldr	r3, [pc, #444]	; (8013608 <Update_Blink+0xe18>)
 801344a:	801a      	strh	r2, [r3, #0]
 801344c:	e007      	b.n	801345e <Update_Blink+0xc6e>
      else      ParamTab[P1F] &= ~W_HID;
 801344e:	4b6e      	ldr	r3, [pc, #440]	; (8013608 <Update_Blink+0xe18>)
 8013450:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013454:	f023 0304 	bic.w	r3, r3, #4
 8013458:	b21a      	sxth	r2, r3
 801345a:	4b6b      	ldr	r3, [pc, #428]	; (8013608 <Update_Blink+0xe18>)
 801345c:	801a      	strh	r2, [r3, #0]

      SetColor(GRY, TCOLOR[ST]);
 801345e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8013462:	4619      	mov	r1, r3
 8013464:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013468:	f7fa fdaa 	bl	800dfc0 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 801346c:	4b62      	ldr	r3, [pc, #392]	; (80135f8 <Update_Blink+0xe08>)
 801346e:	781b      	ldrb	r3, [r3, #0]
 8013470:	b2d8      	uxtb	r0, r3
 8013472:	89bb      	ldrh	r3, [r7, #12]
 8013474:	4a61      	ldr	r2, [pc, #388]	; (80135fc <Update_Blink+0xe0c>)
 8013476:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801347a:	b29b      	uxth	r3, r3
 801347c:	3b03      	subs	r3, #3
 801347e:	b29b      	uxth	r3, r3
 8013480:	b219      	sxth	r1, r3
 8013482:	2336      	movs	r3, #54	; 0x36
 8013484:	9301      	str	r3, [sp, #4]
 8013486:	2300      	movs	r3, #0
 8013488:	9300      	str	r3, [sp, #0]
 801348a:	230b      	movs	r3, #11
 801348c:	2203      	movs	r2, #3
 801348e:	f7fa fe85 	bl	800e19c <Draw_Circle_D>
      DispStr( S_X[i]+0, LABLE_Y, Twink+PRN,  "Press:   ");
 8013492:	89bb      	ldrh	r3, [r7, #12]
 8013494:	4a59      	ldr	r2, [pc, #356]	; (80135fc <Update_Blink+0xe0c>)
 8013496:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 801349a:	4b57      	ldr	r3, [pc, #348]	; (80135f8 <Update_Blink+0xe08>)
 801349c:	781b      	ldrb	r3, [r3, #0]
 801349e:	b2da      	uxtb	r2, r3
 80134a0:	4b5a      	ldr	r3, [pc, #360]	; (801360c <Update_Blink+0xe1c>)
 80134a2:	2103      	movs	r1, #3
 80134a4:	f7fa fda4 	bl	800dff0 <DispStr>
      DispStr(S_X[i]+40, LABLE_Y, Twink+SYMB, "{|");//������ͣͼ��
 80134a8:	89bb      	ldrh	r3, [r7, #12]
 80134aa:	4a54      	ldr	r2, [pc, #336]	; (80135fc <Update_Blink+0xe0c>)
 80134ac:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80134b0:	b29b      	uxth	r3, r3
 80134b2:	3328      	adds	r3, #40	; 0x28
 80134b4:	b29b      	uxth	r3, r3
 80134b6:	b218      	sxth	r0, r3
 80134b8:	4b4f      	ldr	r3, [pc, #316]	; (80135f8 <Update_Blink+0xe08>)
 80134ba:	781b      	ldrb	r3, [r3, #0]
 80134bc:	b2db      	uxtb	r3, r3
 80134be:	3310      	adds	r3, #16
 80134c0:	b2da      	uxtb	r2, r3
 80134c2:	4b53      	ldr	r3, [pc, #332]	; (8013610 <Update_Blink+0xe20>)
 80134c4:	2103      	movs	r1, #3
 80134c6:	f7fa fd93 	bl	800dff0 <DispStr>
      break;
 80134ca:	e086      	b.n	80135da <Update_Blink+0xdea>

    case RESTORE:
      SetColor(GRY, TCOLOR[ST]);
 80134cc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80134d0:	4619      	mov	r1, r3
 80134d2:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80134d6:	f7fa fd73 	bl	800dfc0 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 80134da:	4b47      	ldr	r3, [pc, #284]	; (80135f8 <Update_Blink+0xe08>)
 80134dc:	781b      	ldrb	r3, [r3, #0]
 80134de:	b2d8      	uxtb	r0, r3
 80134e0:	89bb      	ldrh	r3, [r7, #12]
 80134e2:	4a46      	ldr	r2, [pc, #280]	; (80135fc <Update_Blink+0xe0c>)
 80134e4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80134e8:	b29b      	uxth	r3, r3
 80134ea:	3b03      	subs	r3, #3
 80134ec:	b29b      	uxth	r3, r3
 80134ee:	b219      	sxth	r1, r3
 80134f0:	2336      	movs	r3, #54	; 0x36
 80134f2:	9301      	str	r3, [sp, #4]
 80134f4:	2300      	movs	r3, #0
 80134f6:	9300      	str	r3, [sp, #0]
 80134f8:	230b      	movs	r3, #11
 80134fa:	2203      	movs	r2, #3
 80134fc:	f7fa fe4e 	bl	800e19c <Draw_Circle_D>
      DispStr( S_X[i]+0, LABLE_Y, Twink+PRN,  "Press:   ");
 8013500:	89bb      	ldrh	r3, [r7, #12]
 8013502:	4a3e      	ldr	r2, [pc, #248]	; (80135fc <Update_Blink+0xe0c>)
 8013504:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8013508:	4b3b      	ldr	r3, [pc, #236]	; (80135f8 <Update_Blink+0xe08>)
 801350a:	781b      	ldrb	r3, [r3, #0]
 801350c:	b2da      	uxtb	r2, r3
 801350e:	4b3f      	ldr	r3, [pc, #252]	; (801360c <Update_Blink+0xe1c>)
 8013510:	2103      	movs	r1, #3
 8013512:	f7fa fd6d 	bl	800dff0 <DispStr>
      DispStr( S_X[i]+40, LABLE_Y, Twink+SYMB, "{|");//������ͣͼ��
 8013516:	89bb      	ldrh	r3, [r7, #12]
 8013518:	4a38      	ldr	r2, [pc, #224]	; (80135fc <Update_Blink+0xe0c>)
 801351a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801351e:	b29b      	uxth	r3, r3
 8013520:	3328      	adds	r3, #40	; 0x28
 8013522:	b29b      	uxth	r3, r3
 8013524:	b218      	sxth	r0, r3
 8013526:	4b34      	ldr	r3, [pc, #208]	; (80135f8 <Update_Blink+0xe08>)
 8013528:	781b      	ldrb	r3, [r3, #0]
 801352a:	b2db      	uxtb	r3, r3
 801352c:	3310      	adds	r3, #16
 801352e:	b2da      	uxtb	r2, r3
 8013530:	4b37      	ldr	r3, [pc, #220]	; (8013610 <Update_Blink+0xe20>)
 8013532:	2103      	movs	r1, #3
 8013534:	f7fa fd5c 	bl	800dff0 <DispStr>
      break;
 8013538:	e04f      	b.n	80135da <Update_Blink+0xdea>

    case STANDBY:
      SetColor(GRY, TCOLOR[ST]);
 801353a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 801353e:	4619      	mov	r1, r3
 8013540:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013544:	f7fa fd3c 	bl	800dfc0 <SetColor>
      Value2Str(NumStr, List[STANDBY].Val, NSTR[0], 2, UNSIGN);
 8013548:	4b29      	ldr	r3, [pc, #164]	; (80135f0 <Update_Blink+0xe00>)
 801354a:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 801354e:	4619      	mov	r1, r3
 8013550:	2301      	movs	r3, #1
 8013552:	9300      	str	r3, [sp, #0]
 8013554:	2302      	movs	r3, #2
 8013556:	4a2f      	ldr	r2, [pc, #188]	; (8013614 <Update_Blink+0xe24>)
 8013558:	4826      	ldr	r0, [pc, #152]	; (80135f4 <Update_Blink+0xe04>)
 801355a:	f7fe fc21 	bl	8011da0 <Value2Str>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 801355e:	4b26      	ldr	r3, [pc, #152]	; (80135f8 <Update_Blink+0xe08>)
 8013560:	781b      	ldrb	r3, [r3, #0]
 8013562:	b2d8      	uxtb	r0, r3
 8013564:	89bb      	ldrh	r3, [r7, #12]
 8013566:	4a25      	ldr	r2, [pc, #148]	; (80135fc <Update_Blink+0xe0c>)
 8013568:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801356c:	b29b      	uxth	r3, r3
 801356e:	3b03      	subs	r3, #3
 8013570:	b29b      	uxth	r3, r3
 8013572:	b219      	sxth	r1, r3
 8013574:	2336      	movs	r3, #54	; 0x36
 8013576:	9301      	str	r3, [sp, #4]
 8013578:	2300      	movs	r3, #0
 801357a:	9300      	str	r3, [sp, #0]
 801357c:	230b      	movs	r3, #11
 801357e:	2203      	movs	r2, #3
 8013580:	f7fa fe0c 	bl	800e19c <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink+PRN,  " ");
 8013584:	89bb      	ldrh	r3, [r7, #12]
 8013586:	4a1d      	ldr	r2, [pc, #116]	; (80135fc <Update_Blink+0xe0c>)
 8013588:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 801358c:	4b1a      	ldr	r3, [pc, #104]	; (80135f8 <Update_Blink+0xe08>)
 801358e:	781b      	ldrb	r3, [r3, #0]
 8013590:	b2da      	uxtb	r2, r3
 8013592:	4b21      	ldr	r3, [pc, #132]	; (8013618 <Update_Blink+0xe28>)
 8013594:	2103      	movs	r1, #3
 8013596:	f7fa fd2b 	bl	800dff0 <DispStr>
      DispStr(S_X[i]+6, LABLE_Y, Twink+PRN,  (char *)NumStr);
 801359a:	89bb      	ldrh	r3, [r7, #12]
 801359c:	4a17      	ldr	r2, [pc, #92]	; (80135fc <Update_Blink+0xe0c>)
 801359e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80135a2:	b29b      	uxth	r3, r3
 80135a4:	3306      	adds	r3, #6
 80135a6:	b29b      	uxth	r3, r3
 80135a8:	b218      	sxth	r0, r3
 80135aa:	4b13      	ldr	r3, [pc, #76]	; (80135f8 <Update_Blink+0xe08>)
 80135ac:	781b      	ldrb	r3, [r3, #0]
 80135ae:	b2da      	uxtb	r2, r3
 80135b0:	4b10      	ldr	r3, [pc, #64]	; (80135f4 <Update_Blink+0xe04>)
 80135b2:	2103      	movs	r1, #3
 80135b4:	f7fa fd1c 	bl	800dff0 <DispStr>
      DispStr(S_X[i]+30, LABLE_Y, Twink+PRN,  "min ");
 80135b8:	89bb      	ldrh	r3, [r7, #12]
 80135ba:	4a10      	ldr	r2, [pc, #64]	; (80135fc <Update_Blink+0xe0c>)
 80135bc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80135c0:	b29b      	uxth	r3, r3
 80135c2:	331e      	adds	r3, #30
 80135c4:	b29b      	uxth	r3, r3
 80135c6:	b218      	sxth	r0, r3
 80135c8:	4b0b      	ldr	r3, [pc, #44]	; (80135f8 <Update_Blink+0xe08>)
 80135ca:	781b      	ldrb	r3, [r3, #0]
 80135cc:	b2da      	uxtb	r2, r3
 80135ce:	4b13      	ldr	r3, [pc, #76]	; (801361c <Update_Blink+0xe2c>)
 80135d0:	2103      	movs	r1, #3
 80135d2:	f7fa fd0d 	bl	800dff0 <DispStr>
      break;
 80135d6:	e000      	b.n	80135da <Update_Blink+0xdea>
      break;
 80135d8:	bf00      	nop

    }
    if(i != V0_POSI)  ParamTab[P1F]   = L_HID ;//0513
 80135da:	89bb      	ldrh	r3, [r7, #12]
 80135dc:	2b03      	cmp	r3, #3
 80135de:	d002      	beq.n	80135e6 <Update_Blink+0xdf6>
 80135e0:	4b09      	ldr	r3, [pc, #36]	; (8013608 <Update_Blink+0xe18>)
 80135e2:	2202      	movs	r2, #2
 80135e4:	801a      	strh	r2, [r3, #0]
  }
}
 80135e6:	bf00      	nop
 80135e8:	3714      	adds	r7, #20
 80135ea:	46bd      	mov	sp, r7
 80135ec:	bd90      	pop	{r4, r7, pc}
 80135ee:	bf00      	nop
 80135f0:	20000298 	.word	0x20000298
 80135f4:	20002844 	.word	0x20002844
 80135f8:	2000077c 	.word	0x2000077c
 80135fc:	0800215c 	.word	0x0800215c
 8013600:	080009a8 	.word	0x080009a8
 8013604:	080009b0 	.word	0x080009b0
 8013608:	20000140 	.word	0x20000140
 801360c:	080009b4 	.word	0x080009b4
 8013610:	080009c0 	.word	0x080009c0
 8013614:	20000548 	.word	0x20000548
 8013618:	080009c4 	.word	0x080009c4
 801361c:	080009c8 	.word	0x080009c8

08013620 <Update_Detail>:
/*******************************************************************************
 Update_Detail:
*******************************************************************************/
void Update_Detail(void)
{
 8013620:	b590      	push	{r4, r7, lr}
 8013622:	b089      	sub	sp, #36	; 0x24
 8013624:	af02      	add	r7, sp, #8
  long scale = 0;
 8013626:	2300      	movs	r3, #0
 8013628:	60bb      	str	r3, [r7, #8]
  int  Ak = (KgA[KindA+(StateA?1:0)]*4)/GK[GainA];
 801362a:	4ba9      	ldr	r3, [pc, #676]	; (80138d0 <Update_Detail+0x2b0>)
 801362c:	681a      	ldr	r2, [r3, #0]
 801362e:	4ba9      	ldr	r3, [pc, #676]	; (80138d4 <Update_Detail+0x2b4>)
 8013630:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013634:	4619      	mov	r1, r3
 8013636:	4ba8      	ldr	r3, [pc, #672]	; (80138d8 <Update_Detail+0x2b8>)
 8013638:	f9b3 3000 	ldrsh.w	r3, [r3]
 801363c:	2b00      	cmp	r3, #0
 801363e:	bf14      	ite	ne
 8013640:	2301      	movne	r3, #1
 8013642:	2300      	moveq	r3, #0
 8013644:	b2db      	uxtb	r3, r3
 8013646:	440b      	add	r3, r1
 8013648:	005b      	lsls	r3, r3, #1
 801364a:	4413      	add	r3, r2
 801364c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013650:	009b      	lsls	r3, r3, #2
 8013652:	4aa2      	ldr	r2, [pc, #648]	; (80138dc <Update_Detail+0x2bc>)
 8013654:	f9b2 2000 	ldrsh.w	r2, [r2]
 8013658:	4611      	mov	r1, r2
 801365a:	4aa1      	ldr	r2, [pc, #644]	; (80138e0 <Update_Detail+0x2c0>)
 801365c:	5c52      	ldrb	r2, [r2, r1]
 801365e:	fb93 f3f2 	sdiv	r3, r3, r2
 8013662:	607b      	str	r3, [r7, #4]
  unsigned short i, k = HighT+LowT;
 8013664:	4b9f      	ldr	r3, [pc, #636]	; (80138e4 <Update_Detail+0x2c4>)
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	b29a      	uxth	r2, r3
 801366a:	4b9f      	ldr	r3, [pc, #636]	; (80138e8 <Update_Detail+0x2c8>)
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	b29b      	uxth	r3, r3
 8013670:	4413      	add	r3, r2
 8013672:	807b      	strh	r3, [r7, #2]
  long Tmp = 0;
 8013674:	2300      	movs	r3, #0
 8013676:	613b      	str	r3, [r7, #16]
  short Range = List[Y_RANGES].Val + 10*List[PROBEATT].Val;
 8013678:	4b9c      	ldr	r3, [pc, #624]	; (80138ec <Update_Detail+0x2cc>)
 801367a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801367e:	b29a      	uxth	r2, r3
 8013680:	4b9a      	ldr	r3, [pc, #616]	; (80138ec <Update_Detail+0x2cc>)
 8013682:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8013686:	b29b      	uxth	r3, r3
 8013688:	4619      	mov	r1, r3
 801368a:	0089      	lsls	r1, r1, #2
 801368c:	440b      	add	r3, r1
 801368e:	005b      	lsls	r3, r3, #1
 8013690:	b29b      	uxth	r3, r3
 8013692:	4413      	add	r3, r2
 8013694:	b29b      	uxth	r3, r3
 8013696:	803b      	strh	r3, [r7, #0]
  unsigned long FTmp;

  for(i=Y_RANGES; i<=STANDBY; i++){
 8013698:	2300      	movs	r3, #0
 801369a:	82fb      	strh	r3, [r7, #22]
 801369c:	f000 bfb3 	b.w	8014606 <Update_Detail+0xfe6>
    if(i==FREQUENC)
 80136a0:	8afb      	ldrh	r3, [r7, #22]
 80136a2:	2b13      	cmp	r3, #19
 80136a4:	d118      	bne.n	80136d8 <Update_Detail+0xb8>
    {
      if(Freq_Cnt > 10){
 80136a6:	4b92      	ldr	r3, [pc, #584]	; (80138f0 <Update_Detail+0x2d0>)
 80136a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80136ac:	2b0a      	cmp	r3, #10
 80136ae:	dd0a      	ble.n	80136c6 <Update_Detail+0xa6>
        Freq_Cnt = 0;
 80136b0:	4b8f      	ldr	r3, [pc, #572]	; (80138f0 <Update_Detail+0x2d0>)
 80136b2:	2200      	movs	r2, #0
 80136b4:	801a      	strh	r2, [r3, #0]
        Freq_Flag |= UPD;
 80136b6:	4b8f      	ldr	r3, [pc, #572]	; (80138f4 <Update_Detail+0x2d4>)
 80136b8:	781b      	ldrb	r3, [r3, #0]
 80136ba:	f043 0320 	orr.w	r3, r3, #32
 80136be:	b2da      	uxtb	r2, r3
 80136c0:	4b8c      	ldr	r3, [pc, #560]	; (80138f4 <Update_Detail+0x2d4>)
 80136c2:	701a      	strb	r2, [r3, #0]
 80136c4:	e008      	b.n	80136d8 <Update_Detail+0xb8>
      }
      else Freq_Cnt++;
 80136c6:	4b8a      	ldr	r3, [pc, #552]	; (80138f0 <Update_Detail+0x2d0>)
 80136c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80136cc:	b29b      	uxth	r3, r3
 80136ce:	3301      	adds	r3, #1
 80136d0:	b29b      	uxth	r3, r3
 80136d2:	b21a      	sxth	r2, r3
 80136d4:	4b86      	ldr	r3, [pc, #536]	; (80138f0 <Update_Detail+0x2d0>)
 80136d6:	801a      	strh	r2, [r3, #0]
    }

    if(List[i].Flg & UPD){
 80136d8:	8afb      	ldrh	r3, [r7, #22]
 80136da:	4a84      	ldr	r2, [pc, #528]	; (80138ec <Update_Detail+0x2cc>)
 80136dc:	00db      	lsls	r3, r3, #3
 80136de:	4413      	add	r3, r2
 80136e0:	799b      	ldrb	r3, [r3, #6]
 80136e2:	f003 0320 	and.w	r3, r3, #32
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	f000 878a 	beq.w	8014600 <Update_Detail+0xfe0>
      List[i].Flg &= ~UPD;
 80136ec:	8afb      	ldrh	r3, [r7, #22]
 80136ee:	4a7f      	ldr	r2, [pc, #508]	; (80138ec <Update_Detail+0x2cc>)
 80136f0:	00db      	lsls	r3, r3, #3
 80136f2:	4413      	add	r3, r2
 80136f4:	799a      	ldrb	r2, [r3, #6]
 80136f6:	8afb      	ldrh	r3, [r7, #22]
 80136f8:	f022 0220 	bic.w	r2, r2, #32
 80136fc:	b2d1      	uxtb	r1, r2
 80136fe:	4a7b      	ldr	r2, [pc, #492]	; (80138ec <Update_Detail+0x2cc>)
 8013700:	00db      	lsls	r3, r3, #3
 8013702:	4413      	add	r3, r2
 8013704:	460a      	mov	r2, r1
 8013706:	719a      	strb	r2, [r3, #6]
      switch (i){
 8013708:	8afb      	ldrh	r3, [r7, #22]
 801370a:	2b29      	cmp	r3, #41	; 0x29
 801370c:	f200 8739 	bhi.w	8014582 <Update_Detail+0xf62>
 8013710:	a201      	add	r2, pc, #4	; (adr r2, 8013718 <Update_Detail+0xf8>)
 8013712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013716:	bf00      	nop
 8013718:	080137c1 	.word	0x080137c1
 801371c:	080137c1 	.word	0x080137c1
 8013720:	080137c1 	.word	0x080137c1
 8013724:	080137c1 	.word	0x080137c1
 8013728:	080137c1 	.word	0x080137c1
 801372c:	080137c1 	.word	0x080137c1
 8013730:	080137c1 	.word	0x080137c1
 8013734:	08013fc9 	.word	0x08013fc9
 8013738:	08013fc9 	.word	0x08013fc9
 801373c:	08013fc9 	.word	0x08013fc9
 8013740:	08013fc9 	.word	0x08013fc9
 8013744:	08013fc9 	.word	0x08013fc9
 8013748:	08013fc9 	.word	0x08013fc9
 801374c:	08013e5f 	.word	0x08013e5f
 8013750:	08013e5f 	.word	0x08013e5f
 8013754:	08013e5f 	.word	0x08013e5f
 8013758:	08013e5f 	.word	0x08013e5f
 801375c:	08013e5f 	.word	0x08013e5f
 8013760:	08013e5f 	.word	0x08013e5f
 8013764:	08014221 	.word	0x08014221
 8013768:	08014295 	.word	0x08014295
 801376c:	080142b5 	.word	0x080142b5
 8013770:	080143bb 	.word	0x080143bb
 8013774:	0801432b 	.word	0x0801432b
 8013778:	08014441 	.word	0x08014441
 801377c:	080144c7 	.word	0x080144c7
 8013780:	08013d43 	.word	0x08013d43
 8013784:	08013d43 	.word	0x08013d43
 8013788:	08013ddb 	.word	0x08013ddb
 801378c:	08013ac1 	.word	0x08013ac1
 8013790:	08013ac1 	.word	0x08013ac1
 8013794:	08013ac1 	.word	0x08013ac1
 8013798:	08013ac1 	.word	0x08013ac1
 801379c:	08013ac1 	.word	0x08013ac1
 80137a0:	08013ac1 	.word	0x08013ac1
 80137a4:	08013ac1 	.word	0x08013ac1
 80137a8:	08013b71 	.word	0x08013b71
 80137ac:	08013c5d 	.word	0x08013c5d
 80137b0:	08013cff 	.word	0x08013cff
 80137b4:	08014583 	.word	0x08014583
 80137b8:	08014583 	.word	0x08014583
 80137bc:	08014583 	.word	0x08014583
      case COUPLING:   // ˢ����ʾ���ģʽ״̬
      case V0_POSI:    // ˢ����ʾ��ֱƫ��λ��
      case V1_POSI:    // ˢ����ʾ��λ�α�λ��
      case V2_POSI:    // ˢ����ʾ��λ�α�λ��
      case YN_TYPE:    // ˢ����ʾ�α���ʽ
        SetColor(GRY, TCOLOR[YN]);
 80137c0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80137c4:	4619      	mov	r1, r3
 80137c6:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80137ca:	f7fa fbf9 	bl	800dfc0 <SetColor>
        if(i == Y_RANGES || i == COUPLING||i == PROBEATT)
 80137ce:	8afb      	ldrh	r3, [r7, #22]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d005      	beq.n	80137e0 <Update_Detail+0x1c0>
 80137d4:	8afb      	ldrh	r3, [r7, #22]
 80137d6:	2b01      	cmp	r3, #1
 80137d8:	d002      	beq.n	80137e0 <Update_Detail+0x1c0>
 80137da:	8afb      	ldrh	r3, [r7, #22]
 80137dc:	2b02      	cmp	r3, #2
 80137de:	d138      	bne.n	8013852 <Update_Detail+0x232>
        {
      Draw_Circle_D(INV, S_X[Y_RANGES]-3, TITLE_Y_POS, 11, 0, 6*7);
 80137e0:	232f      	movs	r3, #47	; 0x2f
 80137e2:	b29b      	uxth	r3, r3
 80137e4:	3b03      	subs	r3, #3
 80137e6:	b29b      	uxth	r3, r3
 80137e8:	b219      	sxth	r1, r3
 80137ea:	232a      	movs	r3, #42	; 0x2a
 80137ec:	9301      	str	r3, [sp, #4]
 80137ee:	2300      	movs	r3, #0
 80137f0:	9300      	str	r3, [sp, #0]
 80137f2:	230b      	movs	r3, #11
 80137f4:	22e1      	movs	r2, #225	; 0xe1
 80137f6:	2001      	movs	r0, #1
 80137f8:	f7fa fcd0 	bl	800e19c <Draw_Circle_D>
      DispStr(S_X[Y_RANGES], TITLE_Y_POS, INV,      (List[Y_RANGES].PTR +(Range)*6));
 80137fc:	202f      	movs	r0, #47	; 0x2f
 80137fe:	4b3b      	ldr	r3, [pc, #236]	; (80138ec <Update_Detail+0x2cc>)
 8013800:	6819      	ldr	r1, [r3, #0]
 8013802:	f9b7 2000 	ldrsh.w	r2, [r7]
 8013806:	4613      	mov	r3, r2
 8013808:	005b      	lsls	r3, r3, #1
 801380a:	4413      	add	r3, r2
 801380c:	005b      	lsls	r3, r3, #1
 801380e:	440b      	add	r3, r1
 8013810:	2201      	movs	r2, #1
 8013812:	21e1      	movs	r1, #225	; 0xe1
 8013814:	f7fa fbec 	bl	800dff0 <DispStr>
      DispStr(S_X[COUPLING], TITLE_Y_POS, INV,      (List[COUPLING].PTR +(List[COUPLING].Val)*6));
 8013818:	2047      	movs	r0, #71	; 0x47
 801381a:	4b34      	ldr	r3, [pc, #208]	; (80138ec <Update_Detail+0x2cc>)
 801381c:	689a      	ldr	r2, [r3, #8]
 801381e:	4b33      	ldr	r3, [pc, #204]	; (80138ec <Update_Detail+0x2cc>)
 8013820:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8013824:	4619      	mov	r1, r3
 8013826:	460b      	mov	r3, r1
 8013828:	005b      	lsls	r3, r3, #1
 801382a:	440b      	add	r3, r1
 801382c:	005b      	lsls	r3, r3, #1
 801382e:	4413      	add	r3, r2
 8013830:	2201      	movs	r2, #1
 8013832:	21e1      	movs	r1, #225	; 0xe1
 8013834:	f7fa fbdc 	bl	800dff0 <DispStr>
      DispStr10x14(S_X[PROBEATT], TITLE_Y_POS, PRN+SYMB,(List[PROBEATT].Val?("A"):("B")));
 8013838:	2020      	movs	r0, #32
 801383a:	4b2c      	ldr	r3, [pc, #176]	; (80138ec <Update_Detail+0x2cc>)
 801383c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8013840:	2b00      	cmp	r3, #0
 8013842:	d001      	beq.n	8013848 <Update_Detail+0x228>
 8013844:	4b2c      	ldr	r3, [pc, #176]	; (80138f8 <Update_Detail+0x2d8>)
 8013846:	e000      	b.n	801384a <Update_Detail+0x22a>
 8013848:	4b2c      	ldr	r3, [pc, #176]	; (80138fc <Update_Detail+0x2dc>)
 801384a:	2210      	movs	r2, #16
 801384c:	21e1      	movs	r1, #225	; 0xe1
 801384e:	f7fa fe37 	bl	800e4c0 <DispStr10x14>
        }
        ParamTab[P1x2] = 2*((List[V0_POSI].Val+1));
 8013852:	4b26      	ldr	r3, [pc, #152]	; (80138ec <Update_Detail+0x2cc>)
 8013854:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8013858:	3301      	adds	r3, #1
 801385a:	b29b      	uxth	r3, r3
 801385c:	005b      	lsls	r3, r3, #1
 801385e:	b29b      	uxth	r3, r3
 8013860:	b21a      	sxth	r2, r3
 8013862:	4b27      	ldr	r3, [pc, #156]	; (8013900 <Update_Detail+0x2e0>)
 8013864:	829a      	strh	r2, [r3, #20]
        ParamTab[VTx2] = ParamTab[P1x2]+ 2*(List[THRESHOLD].Val+1);
 8013866:	4b26      	ldr	r3, [pc, #152]	; (8013900 <Update_Detail+0x2e0>)
 8013868:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801386c:	b29a      	uxth	r2, r3
 801386e:	4b1f      	ldr	r3, [pc, #124]	; (80138ec <Update_Detail+0x2cc>)
 8013870:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8013874:	3301      	adds	r3, #1
 8013876:	b29b      	uxth	r3, r3
 8013878:	005b      	lsls	r3, r3, #1
 801387a:	b29b      	uxth	r3, r3
 801387c:	4413      	add	r3, r2
 801387e:	b29b      	uxth	r3, r3
 8013880:	b21a      	sxth	r2, r3
 8013882:	4b1f      	ldr	r3, [pc, #124]	; (8013900 <Update_Detail+0x2e0>)
 8013884:	839a      	strh	r2, [r3, #28]
        ParamTab[V1x2] = 2*(List[V1_POSI].Val+1);
 8013886:	4b19      	ldr	r3, [pc, #100]	; (80138ec <Update_Detail+0x2cc>)
 8013888:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 801388c:	3301      	adds	r3, #1
 801388e:	b29b      	uxth	r3, r3
 8013890:	005b      	lsls	r3, r3, #1
 8013892:	b29b      	uxth	r3, r3
 8013894:	b21a      	sxth	r2, r3
 8013896:	4b1a      	ldr	r3, [pc, #104]	; (8013900 <Update_Detail+0x2e0>)
 8013898:	83da      	strh	r2, [r3, #30]
        ParamTab[V2x2] = 2*(List[V2_POSI].Val+1);
 801389a:	4b14      	ldr	r3, [pc, #80]	; (80138ec <Update_Detail+0x2cc>)
 801389c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80138a0:	3301      	adds	r3, #1
 80138a2:	b29b      	uxth	r3, r3
 80138a4:	005b      	lsls	r3, r3, #1
 80138a6:	b29b      	uxth	r3, r3
 80138a8:	b21a      	sxth	r2, r3
 80138aa:	4b15      	ldr	r3, [pc, #84]	; (8013900 <Update_Detail+0x2e0>)
 80138ac:	841a      	strh	r2, [r3, #32]
        ParamTab[V1F]  = (List[YN_TYPE].Val)? L_HID : SHOW;
 80138ae:	4b0f      	ldr	r3, [pc, #60]	; (80138ec <Update_Detail+0x2cc>)
 80138b0:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d001      	beq.n	80138bc <Update_Detail+0x29c>
 80138b8:	2202      	movs	r2, #2
 80138ba:	e000      	b.n	80138be <Update_Detail+0x29e>
 80138bc:	2200      	movs	r2, #0
 80138be:	4b10      	ldr	r3, [pc, #64]	; (8013900 <Update_Detail+0x2e0>)
 80138c0:	815a      	strh	r2, [r3, #10]
        ParamTab[V2F]  = (List[YN_TYPE].Val)? L_HID : SHOW;
 80138c2:	4b0a      	ldr	r3, [pc, #40]	; (80138ec <Update_Detail+0x2cc>)
 80138c4:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d01b      	beq.n	8013904 <Update_Detail+0x2e4>
 80138cc:	2202      	movs	r2, #2
 80138ce:	e01a      	b.n	8013906 <Update_Detail+0x2e6>
 80138d0:	2000057c 	.word	0x2000057c
 80138d4:	2000688e 	.word	0x2000688e
 80138d8:	2000286a 	.word	0x2000286a
 80138dc:	20002852 	.word	0x20002852
 80138e0:	20000560 	.word	0x20000560
 80138e4:	20006880 	.word	0x20006880
 80138e8:	20006894 	.word	0x20006894
 80138ec:	20000298 	.word	0x20000298
 80138f0:	200007ac 	.word	0x200007ac
 80138f4:	200001cc 	.word	0x200001cc
 80138f8:	08000958 	.word	0x08000958
 80138fc:	0800095c 	.word	0x0800095c
 8013900:	20000140 	.word	0x20000140
 8013904:	2200      	movs	r2, #0
 8013906:	4ba6      	ldr	r3, [pc, #664]	; (8013ba0 <Update_Detail+0x580>)
 8013908:	819a      	strh	r2, [r3, #12]

        Tmp  =(ParamTab[V1x2]- ParamTab[V2x2])/2;         // ˢ����ʾV2-V1��ֵ
 801390a:	4ba5      	ldr	r3, [pc, #660]	; (8013ba0 <Update_Detail+0x580>)
 801390c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8013910:	461a      	mov	r2, r3
 8013912:	4ba3      	ldr	r3, [pc, #652]	; (8013ba0 <Update_Detail+0x580>)
 8013914:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8013918:	1ad3      	subs	r3, r2, r3
 801391a:	0fda      	lsrs	r2, r3, #31
 801391c:	4413      	add	r3, r2
 801391e:	105b      	asrs	r3, r3, #1
 8013920:	613b      	str	r3, [r7, #16]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8013922:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013926:	4a9f      	ldr	r2, [pc, #636]	; (8013ba4 <Update_Detail+0x584>)
 8013928:	5cd3      	ldrb	r3, [r2, r3]
 801392a:	461c      	mov	r4, r3
 801392c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013930:	4a9d      	ldr	r2, [pc, #628]	; (8013ba8 <Update_Detail+0x588>)
 8013932:	5cd3      	ldrb	r3, [r2, r3]
 8013934:	4618      	mov	r0, r3
 8013936:	f7fe fb2f 	bl	8011f98 <Exp>
 801393a:	4603      	mov	r3, r0
 801393c:	fb03 f204 	mul.w	r2, r3, r4
 8013940:	693b      	ldr	r3, [r7, #16]
 8013942:	fb02 f303 	mul.w	r3, r2, r3
 8013946:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp, V[0], 3, UNSIGN);
 8013948:	2301      	movs	r3, #1
 801394a:	9300      	str	r3, [sp, #0]
 801394c:	2303      	movs	r3, #3
 801394e:	4a97      	ldr	r2, [pc, #604]	; (8013bac <Update_Detail+0x58c>)
 8013950:	6939      	ldr	r1, [r7, #16]
 8013952:	4897      	ldr	r0, [pc, #604]	; (8013bb0 <Update_Detail+0x590>)
 8013954:	f7fe fa24 	bl	8011da0 <Value2Str>
        Draw_Circle_D(INV, S_X[V1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 8013958:	2307      	movs	r3, #7
 801395a:	b29b      	uxth	r3, r3
 801395c:	3b03      	subs	r3, #3
 801395e:	b29b      	uxth	r3, r3
 8013960:	b219      	sxth	r1, r3
 8013962:	2336      	movs	r3, #54	; 0x36
 8013964:	9301      	str	r3, [sp, #4]
 8013966:	2300      	movs	r3, #0
 8013968:	9300      	str	r3, [sp, #0]
 801396a:	230b      	movs	r3, #11
 801396c:	2203      	movs	r2, #3
 801396e:	2001      	movs	r0, #1
 8013970:	f7fa fc14 	bl	800e19c <Draw_Circle_D>
        DispStr(S_X[V1_POSI]+0*6, LABLE_Y, INV+SYMB, "]");
 8013974:	2007      	movs	r0, #7
 8013976:	4b8f      	ldr	r3, [pc, #572]	; (8013bb4 <Update_Detail+0x594>)
 8013978:	2211      	movs	r2, #17
 801397a:	2103      	movs	r1, #3
 801397c:	f7fa fb38 	bl	800dff0 <DispStr>
        DispStr(S_X[V1_POSI]+1*6, LABLE_Y, INV,      "V:      ");
 8013980:	2307      	movs	r3, #7
 8013982:	b29b      	uxth	r3, r3
 8013984:	3306      	adds	r3, #6
 8013986:	b29b      	uxth	r3, r3
 8013988:	b218      	sxth	r0, r3
 801398a:	4b8b      	ldr	r3, [pc, #556]	; (8013bb8 <Update_Detail+0x598>)
 801398c:	2201      	movs	r2, #1
 801398e:	2103      	movs	r1, #3
 8013990:	f7fa fb2e 	bl	800dff0 <DispStr>
        DispStr(S_X[V1_POSI]+7*6, LABLE_Y, INV,  "  ");
 8013994:	2307      	movs	r3, #7
 8013996:	b29b      	uxth	r3, r3
 8013998:	332a      	adds	r3, #42	; 0x2a
 801399a:	b29b      	uxth	r3, r3
 801399c:	b218      	sxth	r0, r3
 801399e:	4b87      	ldr	r3, [pc, #540]	; (8013bbc <Update_Detail+0x59c>)
 80139a0:	2201      	movs	r2, #1
 80139a2:	2103      	movs	r1, #3
 80139a4:	f7fa fb24 	bl	800dff0 <DispStr>
        DispStr(S_X[V1_POSI]+3*6, LABLE_Y, INV,  (char *)NumStr);
 80139a8:	2307      	movs	r3, #7
 80139aa:	b29b      	uxth	r3, r3
 80139ac:	3312      	adds	r3, #18
 80139ae:	b29b      	uxth	r3, r3
 80139b0:	b218      	sxth	r0, r3
 80139b2:	4b7f      	ldr	r3, [pc, #508]	; (8013bb0 <Update_Detail+0x590>)
 80139b4:	2201      	movs	r2, #1
 80139b6:	2103      	movs	r1, #3
 80139b8:	f7fa fb1a 	bl	800dff0 <DispStr>

        SetColor(GRY, TCOLOR[TRG]);
 80139bc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80139c0:	4619      	mov	r1, r3
 80139c2:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80139c6:	f7fa fafb 	bl	800dfc0 <SetColor>
        Tmp  = List[SENSITIVE].Val;                       // ˢ����ʾ�����ز�ֵ
 80139ca:	4b7d      	ldr	r3, [pc, #500]	; (8013bc0 <Update_Detail+0x5a0>)
 80139cc:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 80139d0:	613b      	str	r3, [r7, #16]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 80139d2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80139d6:	4a73      	ldr	r2, [pc, #460]	; (8013ba4 <Update_Detail+0x584>)
 80139d8:	5cd3      	ldrb	r3, [r2, r3]
 80139da:	461c      	mov	r4, r3
 80139dc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80139e0:	4a71      	ldr	r2, [pc, #452]	; (8013ba8 <Update_Detail+0x588>)
 80139e2:	5cd3      	ldrb	r3, [r2, r3]
 80139e4:	4618      	mov	r0, r3
 80139e6:	f7fe fad7 	bl	8011f98 <Exp>
 80139ea:	4603      	mov	r3, r0
 80139ec:	fb03 f204 	mul.w	r2, r3, r4
 80139f0:	693b      	ldr	r3, [r7, #16]
 80139f2:	fb02 f303 	mul.w	r3, r2, r3
 80139f6:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp,V[0], 2, UNSIGN);
 80139f8:	2301      	movs	r3, #1
 80139fa:	9300      	str	r3, [sp, #0]
 80139fc:	2302      	movs	r3, #2
 80139fe:	4a6b      	ldr	r2, [pc, #428]	; (8013bac <Update_Detail+0x58c>)
 8013a00:	6939      	ldr	r1, [r7, #16]
 8013a02:	486b      	ldr	r0, [pc, #428]	; (8013bb0 <Update_Detail+0x590>)
 8013a04:	f7fe f9cc 	bl	8011da0 <Value2Str>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  "     ");
 8013a08:	23e7      	movs	r3, #231	; 0xe7
 8013a0a:	b29b      	uxth	r3, r3
 8013a0c:	3309      	adds	r3, #9
 8013a0e:	b29b      	uxth	r3, r3
 8013a10:	b218      	sxth	r0, r3
 8013a12:	4b6c      	ldr	r3, [pc, #432]	; (8013bc4 <Update_Detail+0x5a4>)
 8013a14:	2201      	movs	r2, #1
 8013a16:	21e1      	movs	r1, #225	; 0xe1
 8013a18:	f7fa faea 	bl	800dff0 <DispStr>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  (char *)NumStr);
 8013a1c:	23e7      	movs	r3, #231	; 0xe7
 8013a1e:	b29b      	uxth	r3, r3
 8013a20:	3309      	adds	r3, #9
 8013a22:	b29b      	uxth	r3, r3
 8013a24:	b218      	sxth	r0, r3
 8013a26:	4b62      	ldr	r3, [pc, #392]	; (8013bb0 <Update_Detail+0x590>)
 8013a28:	2201      	movs	r2, #1
 8013a2a:	21e1      	movs	r1, #225	; 0xe1
 8013a2c:	f7fa fae0 	bl	800dff0 <DispStr>
        DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, INV+SYMB,"E");
 8013a30:	20e7      	movs	r0, #231	; 0xe7
 8013a32:	4b65      	ldr	r3, [pc, #404]	; (8013bc8 <Update_Detail+0x5a8>)
 8013a34:	2211      	movs	r2, #17
 8013a36:	21e1      	movs	r1, #225	; 0xe1
 8013a38:	f7fa fd42 	bl	800e4c0 <DispStr10x14>
        GainA  = (char)List[Y_RANGES].Val;
 8013a3c:	4b60      	ldr	r3, [pc, #384]	; (8013bc0 <Update_Detail+0x5a0>)
 8013a3e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013a42:	b2db      	uxtb	r3, r3
 8013a44:	b21a      	sxth	r2, r3
 8013a46:	4b61      	ldr	r3, [pc, #388]	; (8013bcc <Update_Detail+0x5ac>)
 8013a48:	801a      	strh	r2, [r3, #0]

        if((char)List[Y_RANGES].Val>1)
 8013a4a:	4b5d      	ldr	r3, [pc, #372]	; (8013bc0 <Update_Detail+0x5a0>)
 8013a4c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013a50:	b2db      	uxtb	r3, r3
 8013a52:	2b01      	cmp	r3, #1
 8013a54:	d903      	bls.n	8013a5e <Update_Detail+0x43e>
          KindA  = HV;
 8013a56:	4b5e      	ldr	r3, [pc, #376]	; (8013bd0 <Update_Detail+0x5b0>)
 8013a58:	2201      	movs	r2, #1
 8013a5a:	801a      	strh	r2, [r3, #0]
 8013a5c:	e002      	b.n	8013a64 <Update_Detail+0x444>
        else
          KindA  = LV;                //Ch1ѡ���ѹ���ѹ����
 8013a5e:	4b5c      	ldr	r3, [pc, #368]	; (8013bd0 <Update_Detail+0x5b0>)
 8013a60:	2200      	movs	r2, #0
 8013a62:	801a      	strh	r2, [r3, #0]
        StateA =  ((char)List[Y_RANGES].Val>5)?ACT: GND;
 8013a64:	4b56      	ldr	r3, [pc, #344]	; (8013bc0 <Update_Detail+0x5a0>)
 8013a66:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013a6a:	b2db      	uxtb	r3, r3
 8013a6c:	2b05      	cmp	r3, #5
 8013a6e:	d901      	bls.n	8013a74 <Update_Detail+0x454>
 8013a70:	2204      	movs	r2, #4
 8013a72:	e000      	b.n	8013a76 <Update_Detail+0x456>
 8013a74:	2200      	movs	r2, #0
 8013a76:	4b57      	ldr	r3, [pc, #348]	; (8013bd4 <Update_Detail+0x5b4>)
 8013a78:	801a      	strh	r2, [r3, #0]

        CouplA = (List[COUPLING].Val)? AC : DC;                      // AC);  //AC/DC��Ϸ�ʽ
 8013a7a:	4b51      	ldr	r3, [pc, #324]	; (8013bc0 <Update_Detail+0x5a0>)
 8013a7c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d001      	beq.n	8013a88 <Update_Detail+0x468>
 8013a84:	2200      	movs	r2, #0
 8013a86:	e000      	b.n	8013a8a <Update_Detail+0x46a>
 8013a88:	2202      	movs	r2, #2
 8013a8a:	4b53      	ldr	r3, [pc, #332]	; (8013bd8 <Update_Detail+0x5b8>)
 8013a8c:	801a      	strh	r2, [r3, #0]
        BIOS_Ctrl(AiRANGE, KindA+CouplA+StateA);             //Ch1״̬ˢ��
 8013a8e:	4b50      	ldr	r3, [pc, #320]	; (8013bd0 <Update_Detail+0x5b0>)
 8013a90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013a94:	461a      	mov	r2, r3
 8013a96:	4b50      	ldr	r3, [pc, #320]	; (8013bd8 <Update_Detail+0x5b8>)
 8013a98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013a9c:	4413      	add	r3, r2
 8013a9e:	4a4d      	ldr	r2, [pc, #308]	; (8013bd4 <Update_Detail+0x5b4>)
 8013aa0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8013aa4:	4413      	add	r3, r2
 8013aa6:	4619      	mov	r1, r3
 8013aa8:	2007      	movs	r0, #7
 8013aaa:	f7f8 fc63 	bl	800c374 <BIOS_Ctrl>
        AiPosi(List[V0_POSI].Val);                        //Ch1Ӳ����Ӧλ��
 8013aae:	4b44      	ldr	r3, [pc, #272]	; (8013bc0 <Update_Detail+0x5a0>)
 8013ab0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8013ab4:	b2db      	uxtb	r3, r3
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	f001 fc5c 	bl	8015374 <AiPosi>
        break;
 8013abc:	f000 bd61 	b.w	8014582 <Update_Detail+0xf62>
      case SAVE_BUF:
      case SAVE_CSV:
      case SAVE_SVG:
      case LOAD_DAT: //��ʾ��ѡ��Ҫ��ȡ���ļ����
      case LOAD_BUF:
        SetColor(GRY, TCOLOR[FN]);
 8013ac0:	f64f 4310 	movw	r3, #64528	; 0xfc10
 8013ac4:	4619      	mov	r1, r3
 8013ac6:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013aca:	f7fa fa79 	bl	800dfc0 <SetColor>
        u8ToDec3(NumStr, List[i].Val);
 8013ace:	8afb      	ldrh	r3, [r7, #22]
 8013ad0:	4a3b      	ldr	r2, [pc, #236]	; (8013bc0 <Update_Detail+0x5a0>)
 8013ad2:	00db      	lsls	r3, r3, #3
 8013ad4:	4413      	add	r3, r2
 8013ad6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013ada:	b2db      	uxtb	r3, r3
 8013adc:	4619      	mov	r1, r3
 8013ade:	4834      	ldr	r0, [pc, #208]	; (8013bb0 <Update_Detail+0x590>)
 8013ae0:	f7fe f8f6 	bl	8011cd0 <u8ToDec3>
        Draw_Circle_D(INV, S_X[i]-3, LABLE_Y, 11, 0, 6*11);
 8013ae4:	8afb      	ldrh	r3, [r7, #22]
 8013ae6:	4a3d      	ldr	r2, [pc, #244]	; (8013bdc <Update_Detail+0x5bc>)
 8013ae8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013aec:	b29b      	uxth	r3, r3
 8013aee:	3b03      	subs	r3, #3
 8013af0:	b29b      	uxth	r3, r3
 8013af2:	b219      	sxth	r1, r3
 8013af4:	2342      	movs	r3, #66	; 0x42
 8013af6:	9301      	str	r3, [sp, #4]
 8013af8:	2300      	movs	r3, #0
 8013afa:	9300      	str	r3, [sp, #0]
 8013afc:	230b      	movs	r3, #11
 8013afe:	2203      	movs	r2, #3
 8013b00:	2001      	movs	r0, #1
 8013b02:	f7fa fb4b 	bl	800e19c <Draw_Circle_D>
        DispStr(S_X[i],    LABLE_Y, INV, ((i > SAVE_SVG)? "Load" : "Save"));//0513
 8013b06:	8afb      	ldrh	r3, [r7, #22]
 8013b08:	4a34      	ldr	r2, [pc, #208]	; (8013bdc <Update_Detail+0x5bc>)
 8013b0a:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8013b0e:	8afb      	ldrh	r3, [r7, #22]
 8013b10:	2b21      	cmp	r3, #33	; 0x21
 8013b12:	d901      	bls.n	8013b18 <Update_Detail+0x4f8>
 8013b14:	4b32      	ldr	r3, [pc, #200]	; (8013be0 <Update_Detail+0x5c0>)
 8013b16:	e000      	b.n	8013b1a <Update_Detail+0x4fa>
 8013b18:	4b32      	ldr	r3, [pc, #200]	; (8013be4 <Update_Detail+0x5c4>)
 8013b1a:	2201      	movs	r2, #1
 8013b1c:	2103      	movs	r1, #3
 8013b1e:	f7fa fa67 	bl	800dff0 <DispStr>
        DispStr(S_X[i]+24, LABLE_Y, INV, (char *)NumStr);
 8013b22:	8afb      	ldrh	r3, [r7, #22]
 8013b24:	4a2d      	ldr	r2, [pc, #180]	; (8013bdc <Update_Detail+0x5bc>)
 8013b26:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013b2a:	b29b      	uxth	r3, r3
 8013b2c:	3318      	adds	r3, #24
 8013b2e:	b29b      	uxth	r3, r3
 8013b30:	b218      	sxth	r0, r3
 8013b32:	4b1f      	ldr	r3, [pc, #124]	; (8013bb0 <Update_Detail+0x590>)
 8013b34:	2201      	movs	r2, #1
 8013b36:	2103      	movs	r1, #3
 8013b38:	f7fa fa5a 	bl	800dff0 <DispStr>
        DispStr(S_X[i]+42, LABLE_Y, INV, (List[i].PTR +(i - SAVE_BMP)*6));
 8013b3c:	8afb      	ldrh	r3, [r7, #22]
 8013b3e:	4a27      	ldr	r2, [pc, #156]	; (8013bdc <Update_Detail+0x5bc>)
 8013b40:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013b44:	b29b      	uxth	r3, r3
 8013b46:	332a      	adds	r3, #42	; 0x2a
 8013b48:	b29b      	uxth	r3, r3
 8013b4a:	b218      	sxth	r0, r3
 8013b4c:	8afb      	ldrh	r3, [r7, #22]
 8013b4e:	4a1c      	ldr	r2, [pc, #112]	; (8013bc0 <Update_Detail+0x5a0>)
 8013b50:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8013b54:	8afb      	ldrh	r3, [r7, #22]
 8013b56:	f1a3 021d 	sub.w	r2, r3, #29
 8013b5a:	4613      	mov	r3, r2
 8013b5c:	005b      	lsls	r3, r3, #1
 8013b5e:	4413      	add	r3, r2
 8013b60:	005b      	lsls	r3, r3, #1
 8013b62:	440b      	add	r3, r1
 8013b64:	2201      	movs	r2, #1
 8013b66:	2103      	movs	r1, #3
 8013b68:	f7fa fa42 	bl	800dff0 <DispStr>
        break;
 8013b6c:	f000 bd09 	b.w	8014582 <Update_Detail+0xf62>

      case TPYE_OUT:
        if(List[TPYE_OUT].Val ==0) //suqar
 8013b70:	4b13      	ldr	r3, [pc, #76]	; (8013bc0 <Update_Detail+0x5a0>)
 8013b72:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d136      	bne.n	8013be8 <Update_Detail+0x5c8>
        {
          BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 8013b7a:	2100      	movs	r1, #0
 8013b7c:	2000      	movs	r0, #0
 8013b7e:	f7f8 fbf9 	bl	800c374 <BIOS_Ctrl>
          Set_Fout(List[FREQ_OUT].Val);
 8013b82:	4b0f      	ldr	r3, [pc, #60]	; (8013bc0 <Update_Detail+0x5a0>)
 8013b84:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013b88:	4618      	mov	r0, r3
 8013b8a:	f7f8 fdd1 	bl	800c730 <Set_Fout>
          Set_Duty();
 8013b8e:	f7f8 fda3 	bl	800c6d8 <Set_Duty>
          BIOS_Ctrl(OUT_MOD, PULSED);             // �趨�������ģʽ
 8013b92:	2104      	movs	r1, #4
 8013b94:	2000      	movs	r0, #0
 8013b96:	f7f8 fbed 	bl	800c374 <BIOS_Ctrl>
           BIOS_Ctrl(OUT_CNT, 180);
           BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
           BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
        }

      break;
 8013b9a:	f000 bcf2 	b.w	8014582 <Update_Detail+0xf62>
 8013b9e:	bf00      	nop
 8013ba0:	20000140 	.word	0x20000140
 8013ba4:	08002130 	.word	0x08002130
 8013ba8:	08002108 	.word	0x08002108
 8013bac:	08001d00 	.word	0x08001d00
 8013bb0:	20002844 	.word	0x20002844
 8013bb4:	08000960 	.word	0x08000960
 8013bb8:	08000964 	.word	0x08000964
 8013bbc:	080009d0 	.word	0x080009d0
 8013bc0:	20000298 	.word	0x20000298
 8013bc4:	08000990 	.word	0x08000990
 8013bc8:	08000998 	.word	0x08000998
 8013bcc:	20002852 	.word	0x20002852
 8013bd0:	2000688e 	.word	0x2000688e
 8013bd4:	2000286a 	.word	0x2000286a
 8013bd8:	20006890 	.word	0x20006890
 8013bdc:	0800215c 	.word	0x0800215c
 8013be0:	08000948 	.word	0x08000948
 8013be4:	08000950 	.word	0x08000950
          if(List[FREQ_OUT].Val > MAX_FREQ)
 8013be8:	4bbf      	ldr	r3, [pc, #764]	; (8013ee8 <Update_Detail+0x8c8>)
 8013bea:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013bee:	2b09      	cmp	r3, #9
 8013bf0:	dd03      	ble.n	8013bfa <Update_Detail+0x5da>
             List[FREQ_OUT].Val = MAX_FREQ ;   //10KHz
 8013bf2:	4bbd      	ldr	r3, [pc, #756]	; (8013ee8 <Update_Detail+0x8c8>)
 8013bf4:	2209      	movs	r2, #9
 8013bf6:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
           BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 8013bfa:	2100      	movs	r1, #0
 8013bfc:	2000      	movs	r0, #0
 8013bfe:	f7f8 fbb9 	bl	800c374 <BIOS_Ctrl>
           htim7.Init.Prescaler = Dac_Psc[List[FREQ_OUT].Val] - 1;
 8013c02:	4bb9      	ldr	r3, [pc, #740]	; (8013ee8 <Update_Detail+0x8c8>)
 8013c04:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013c08:	461a      	mov	r2, r3
 8013c0a:	4bb8      	ldr	r3, [pc, #736]	; (8013eec <Update_Detail+0x8cc>)
 8013c0c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8013c10:	3b01      	subs	r3, #1
 8013c12:	461a      	mov	r2, r3
 8013c14:	4bb6      	ldr	r3, [pc, #728]	; (8013ef0 <Update_Detail+0x8d0>)
 8013c16:	605a      	str	r2, [r3, #4]
           BIOS_Ctrl(DAC_TIM, Dac_Tim[List[FREQ_OUT].Val]-1); // 72MHz/2/180/100 = 2KHz ģ���������(ÿ����36��)
 8013c18:	4bb3      	ldr	r3, [pc, #716]	; (8013ee8 <Update_Detail+0x8c8>)
 8013c1a:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013c1e:	461a      	mov	r2, r3
 8013c20:	4bb4      	ldr	r3, [pc, #720]	; (8013ef4 <Update_Detail+0x8d4>)
 8013c22:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8013c26:	3b01      	subs	r3, #1
 8013c28:	4619      	mov	r1, r3
 8013c2a:	2001      	movs	r0, #1
 8013c2c:	f7f8 fba2 	bl	800c374 <BIOS_Ctrl>
           BIOS_Ctrl(OUT_CNT, 180);
 8013c30:	21b4      	movs	r1, #180	; 0xb4
 8013c32:	2002      	movs	r0, #2
 8013c34:	f7f8 fb9e 	bl	800c374 <BIOS_Ctrl>
           BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
 8013c38:	4bab      	ldr	r3, [pc, #684]	; (8013ee8 <Update_Detail+0x8c8>)
 8013c3a:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8013c3e:	b2db      	uxtb	r3, r3
 8013c40:	4618      	mov	r0, r3
 8013c42:	f7f8 fb81 	bl	800c348 <BIOS_Info>
 8013c46:	4603      	mov	r3, r0
 8013c48:	4619      	mov	r1, r3
 8013c4a:	2003      	movs	r0, #3
 8013c4c:	f7f8 fb92 	bl	800c374 <BIOS_Ctrl>
           BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
 8013c50:	2102      	movs	r1, #2
 8013c52:	2000      	movs	r0, #0
 8013c54:	f7f8 fb8e 	bl	800c374 <BIOS_Ctrl>
      break;
 8013c58:	f000 bc93 	b.w	8014582 <Update_Detail+0xf62>

      case FREQ_OUT: // ��ʾ�������Ƶ��
        if(List[TPYE_OUT].Val ==0) //suqar
 8013c5c:	4ba2      	ldr	r3, [pc, #648]	; (8013ee8 <Update_Detail+0x8c8>)
 8013c5e:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d111      	bne.n	8013c8a <Update_Detail+0x66a>
        {
          BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 8013c66:	2100      	movs	r1, #0
 8013c68:	2000      	movs	r0, #0
 8013c6a:	f7f8 fb83 	bl	800c374 <BIOS_Ctrl>
          Set_Fout(List[FREQ_OUT].Val);
 8013c6e:	4b9e      	ldr	r3, [pc, #632]	; (8013ee8 <Update_Detail+0x8c8>)
 8013c70:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013c74:	4618      	mov	r0, r3
 8013c76:	f7f8 fd5b 	bl	800c730 <Set_Fout>
          Set_Duty();
 8013c7a:	f7f8 fd2d 	bl	800c6d8 <Set_Duty>
          BIOS_Ctrl(OUT_MOD, PULSED);             // �趨�������ģʽ
 8013c7e:	2104      	movs	r1, #4
 8013c80:	2000      	movs	r0, #0
 8013c82:	f7f8 fb77 	bl	800c374 <BIOS_Ctrl>
          BIOS_Ctrl(DAC_TIM, Dac_Tim[List[FREQ_OUT].Val]-1); // 72MHz/2/180/100 = 2KHz ģ���������(ÿ����36��)
          BIOS_Ctrl(OUT_CNT, 180);
          BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
          BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
        }
        break;
 8013c86:	f000 bc7c 	b.w	8014582 <Update_Detail+0xf62>
          if(List[FREQ_OUT].Val > MAX_FREQ)
 8013c8a:	4b97      	ldr	r3, [pc, #604]	; (8013ee8 <Update_Detail+0x8c8>)
 8013c8c:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013c90:	2b09      	cmp	r3, #9
 8013c92:	dd03      	ble.n	8013c9c <Update_Detail+0x67c>
            List[FREQ_OUT].Val = MAX_FREQ ;   //10KHz
 8013c94:	4b94      	ldr	r3, [pc, #592]	; (8013ee8 <Update_Detail+0x8c8>)
 8013c96:	2209      	movs	r2, #9
 8013c98:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
          BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 8013c9c:	2100      	movs	r1, #0
 8013c9e:	2000      	movs	r0, #0
 8013ca0:	f7f8 fb68 	bl	800c374 <BIOS_Ctrl>
          htim7.Init.Prescaler = Dac_Psc[List[FREQ_OUT].Val] - 1;
 8013ca4:	4b90      	ldr	r3, [pc, #576]	; (8013ee8 <Update_Detail+0x8c8>)
 8013ca6:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013caa:	461a      	mov	r2, r3
 8013cac:	4b8f      	ldr	r3, [pc, #572]	; (8013eec <Update_Detail+0x8cc>)
 8013cae:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8013cb2:	3b01      	subs	r3, #1
 8013cb4:	461a      	mov	r2, r3
 8013cb6:	4b8e      	ldr	r3, [pc, #568]	; (8013ef0 <Update_Detail+0x8d0>)
 8013cb8:	605a      	str	r2, [r3, #4]
          BIOS_Ctrl(DAC_TIM, Dac_Tim[List[FREQ_OUT].Val]-1); // 72MHz/2/180/100 = 2KHz ģ���������(ÿ����36��)
 8013cba:	4b8b      	ldr	r3, [pc, #556]	; (8013ee8 <Update_Detail+0x8c8>)
 8013cbc:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013cc0:	461a      	mov	r2, r3
 8013cc2:	4b8c      	ldr	r3, [pc, #560]	; (8013ef4 <Update_Detail+0x8d4>)
 8013cc4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8013cc8:	3b01      	subs	r3, #1
 8013cca:	4619      	mov	r1, r3
 8013ccc:	2001      	movs	r0, #1
 8013cce:	f7f8 fb51 	bl	800c374 <BIOS_Ctrl>
          BIOS_Ctrl(OUT_CNT, 180);
 8013cd2:	21b4      	movs	r1, #180	; 0xb4
 8013cd4:	2002      	movs	r0, #2
 8013cd6:	f7f8 fb4d 	bl	800c374 <BIOS_Ctrl>
          BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
 8013cda:	4b83      	ldr	r3, [pc, #524]	; (8013ee8 <Update_Detail+0x8c8>)
 8013cdc:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8013ce0:	b2db      	uxtb	r3, r3
 8013ce2:	4618      	mov	r0, r3
 8013ce4:	f7f8 fb30 	bl	800c348 <BIOS_Info>
 8013ce8:	4603      	mov	r3, r0
 8013cea:	4619      	mov	r1, r3
 8013cec:	2003      	movs	r0, #3
 8013cee:	f7f8 fb41 	bl	800c374 <BIOS_Ctrl>
          BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
 8013cf2:	2102      	movs	r1, #2
 8013cf4:	2000      	movs	r0, #0
 8013cf6:	f7f8 fb3d 	bl	800c374 <BIOS_Ctrl>
        break;
 8013cfa:	f000 bc42 	b.w	8014582 <Update_Detail+0xf62>

      case FREQ_DUT: // ��ʾ�������ռ�ձ�
        SetColor(GRY, TCOLOR[SN]);
 8013cfe:	f240 531f 	movw	r3, #1311	; 0x51f
 8013d02:	4619      	mov	r1, r3
 8013d04:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013d08:	f7fa f95a 	bl	800dfc0 <SetColor>
        Draw_Circle_D(INV, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 8013d0c:	8afb      	ldrh	r3, [r7, #22]
 8013d0e:	4a7a      	ldr	r2, [pc, #488]	; (8013ef8 <Update_Detail+0x8d8>)
 8013d10:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013d14:	b29b      	uxth	r3, r3
 8013d16:	3b03      	subs	r3, #3
 8013d18:	b29b      	uxth	r3, r3
 8013d1a:	b219      	sxth	r1, r3
 8013d1c:	2336      	movs	r3, #54	; 0x36
 8013d1e:	9301      	str	r3, [sp, #4]
 8013d20:	2300      	movs	r3, #0
 8013d22:	9300      	str	r3, [sp, #0]
 8013d24:	230b      	movs	r3, #11
 8013d26:	2203      	movs	r2, #3
 8013d28:	2001      	movs	r0, #1
 8013d2a:	f7fa fa37 	bl	800e19c <Draw_Circle_D>
        if(List[TPYE_OUT].Val == 0) //suqar
 8013d2e:	4b6e      	ldr	r3, [pc, #440]	; (8013ee8 <Update_Detail+0x8c8>)
 8013d30:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	f040 8423 	bne.w	8014580 <Update_Detail+0xf60>
        {
          Set_Duty();
 8013d3a:	f7f8 fccd 	bl	800c6d8 <Set_Duty>
        }
        break;
 8013d3e:	f000 bc1f 	b.w	8014580 <Update_Detail+0xf60>

      case EXT_REFN: // ��ʾ�ο���������
      case EXT_POSI: // ��ʾ�ο�����ƫ��
        SetColor(GRY, TCOLOR[EX]);
 8013d42:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8013d46:	4619      	mov	r1, r3
 8013d48:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013d4c:	f7fa f938 	bl	800dfc0 <SetColor>
        if((i == EXT_REFN) || (i == EXT_POSI))
 8013d50:	8afb      	ldrh	r3, [r7, #22]
 8013d52:	2b1a      	cmp	r3, #26
 8013d54:	d002      	beq.n	8013d5c <Update_Detail+0x73c>
 8013d56:	8afb      	ldrh	r3, [r7, #22]
 8013d58:	2b1b      	cmp	r3, #27
 8013d5a:	d123      	bne.n	8013da4 <Update_Detail+0x784>
        {
          Draw_Circle_D(INV, S_X[EXT_REFN]-3, TITLE_Y_POS, 11, 1, 6*5);
 8013d5c:	23a8      	movs	r3, #168	; 0xa8
 8013d5e:	b29b      	uxth	r3, r3
 8013d60:	3b03      	subs	r3, #3
 8013d62:	b29b      	uxth	r3, r3
 8013d64:	b219      	sxth	r1, r3
 8013d66:	231e      	movs	r3, #30
 8013d68:	9301      	str	r3, [sp, #4]
 8013d6a:	2301      	movs	r3, #1
 8013d6c:	9300      	str	r3, [sp, #0]
 8013d6e:	230b      	movs	r3, #11
 8013d70:	22e1      	movs	r2, #225	; 0xe1
 8013d72:	2001      	movs	r0, #1
 8013d74:	f7fa fa12 	bl	800e19c <Draw_Circle_D>
          DispStr(S_X[EXT_REFN], TITLE_Y_POS, INV, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 8013d78:	20a8      	movs	r0, #168	; 0xa8
 8013d7a:	4b5b      	ldr	r3, [pc, #364]	; (8013ee8 <Update_Detail+0x8c8>)
 8013d7c:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d00a      	beq.n	8013d9a <Update_Detail+0x77a>
 8013d84:	4b58      	ldr	r3, [pc, #352]	; (8013ee8 <Update_Detail+0x8c8>)
 8013d86:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8013d8a:	461a      	mov	r2, r3
 8013d8c:	4613      	mov	r3, r2
 8013d8e:	005b      	lsls	r3, r3, #1
 8013d90:	4413      	add	r3, r2
 8013d92:	005b      	lsls	r3, r3, #1
 8013d94:	4a59      	ldr	r2, [pc, #356]	; (8013efc <Update_Detail+0x8dc>)
 8013d96:	4413      	add	r3, r2
 8013d98:	e000      	b.n	8013d9c <Update_Detail+0x77c>
 8013d9a:	4b59      	ldr	r3, [pc, #356]	; (8013f00 <Update_Detail+0x8e0>)
 8013d9c:	2201      	movs	r2, #1
 8013d9e:	21e1      	movs	r1, #225	; 0xe1
 8013da0:	f7fa f926 	bl	800dff0 <DispStr>
        }
        if(List[EXT_REFN].Val < 6) ParamTab[P2x2]=(List[EXT_POSI].Val + 1)*2;
 8013da4:	4b50      	ldr	r3, [pc, #320]	; (8013ee8 <Update_Detail+0x8c8>)
 8013da6:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8013daa:	2b05      	cmp	r3, #5
 8013dac:	dc0a      	bgt.n	8013dc4 <Update_Detail+0x7a4>
 8013dae:	4b4e      	ldr	r3, [pc, #312]	; (8013ee8 <Update_Detail+0x8c8>)
 8013db0:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8013db4:	3301      	adds	r3, #1
 8013db6:	b29b      	uxth	r3, r3
 8013db8:	005b      	lsls	r3, r3, #1
 8013dba:	b29b      	uxth	r3, r3
 8013dbc:	b21a      	sxth	r2, r3
 8013dbe:	4b51      	ldr	r3, [pc, #324]	; (8013f04 <Update_Detail+0x8e4>)
 8013dc0:	82da      	strh	r2, [r3, #22]
        else                       ParamTab[P2x2]=(List[ V0_POSI].Val + 1)*2;
        break;
 8013dc2:	e3de      	b.n	8014582 <Update_Detail+0xf62>
        else                       ParamTab[P2x2]=(List[ V0_POSI].Val + 1)*2;
 8013dc4:	4b48      	ldr	r3, [pc, #288]	; (8013ee8 <Update_Detail+0x8c8>)
 8013dc6:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8013dca:	3301      	adds	r3, #1
 8013dcc:	b29b      	uxth	r3, r3
 8013dce:	005b      	lsls	r3, r3, #1
 8013dd0:	b29b      	uxth	r3, r3
 8013dd2:	b21a      	sxth	r2, r3
 8013dd4:	4b4b      	ldr	r3, [pc, #300]	; (8013f04 <Update_Detail+0x8e4>)
 8013dd6:	82da      	strh	r2, [r3, #22]
        break;
 8013dd8:	e3d3      	b.n	8014582 <Update_Detail+0xf62>

      case EXT_HIDE:
        if(List[EXT_HIDE].Val == 0) ParamTab[P2F] |=  W_HID;  // W_HID�����ο�����
 8013dda:	4b43      	ldr	r3, [pc, #268]	; (8013ee8 <Update_Detail+0x8c8>)
 8013ddc:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d108      	bne.n	8013df6 <Update_Detail+0x7d6>
 8013de4:	4b47      	ldr	r3, [pc, #284]	; (8013f04 <Update_Detail+0x8e4>)
 8013de6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013dea:	f043 0304 	orr.w	r3, r3, #4
 8013dee:	b21a      	sxth	r2, r3
 8013df0:	4b44      	ldr	r3, [pc, #272]	; (8013f04 <Update_Detail+0x8e4>)
 8013df2:	805a      	strh	r2, [r3, #2]
 8013df4:	e007      	b.n	8013e06 <Update_Detail+0x7e6>
        else                        ParamTab[P2F] &= ~W_HID;  // W_HID��ʾ�ο�����
 8013df6:	4b43      	ldr	r3, [pc, #268]	; (8013f04 <Update_Detail+0x8e4>)
 8013df8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013dfc:	f023 0304 	bic.w	r3, r3, #4
 8013e00:	b21a      	sxth	r2, r3
 8013e02:	4b40      	ldr	r3, [pc, #256]	; (8013f04 <Update_Detail+0x8e4>)
 8013e04:	805a      	strh	r2, [r3, #2]
        SetColor(GRY, TCOLOR[EX]);
 8013e06:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8013e0a:	4619      	mov	r1, r3
 8013e0c:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013e10:	f7fa f8d6 	bl	800dfc0 <SetColor>
        Draw_Circle_D(INV, S_X[EXT_REFN]-3, TITLE_Y_POS, 11, 1, 6*5);
 8013e14:	23a8      	movs	r3, #168	; 0xa8
 8013e16:	b29b      	uxth	r3, r3
 8013e18:	3b03      	subs	r3, #3
 8013e1a:	b29b      	uxth	r3, r3
 8013e1c:	b219      	sxth	r1, r3
 8013e1e:	231e      	movs	r3, #30
 8013e20:	9301      	str	r3, [sp, #4]
 8013e22:	2301      	movs	r3, #1
 8013e24:	9300      	str	r3, [sp, #0]
 8013e26:	230b      	movs	r3, #11
 8013e28:	22e1      	movs	r2, #225	; 0xe1
 8013e2a:	2001      	movs	r0, #1
 8013e2c:	f7fa f9b6 	bl	800e19c <Draw_Circle_D>
        DispStr(S_X[EXT_REFN], TITLE_Y_POS, INV, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 8013e30:	20a8      	movs	r0, #168	; 0xa8
 8013e32:	4b2d      	ldr	r3, [pc, #180]	; (8013ee8 <Update_Detail+0x8c8>)
 8013e34:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d00a      	beq.n	8013e52 <Update_Detail+0x832>
 8013e3c:	4b2a      	ldr	r3, [pc, #168]	; (8013ee8 <Update_Detail+0x8c8>)
 8013e3e:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8013e42:	461a      	mov	r2, r3
 8013e44:	4613      	mov	r3, r2
 8013e46:	005b      	lsls	r3, r3, #1
 8013e48:	4413      	add	r3, r2
 8013e4a:	005b      	lsls	r3, r3, #1
 8013e4c:	4a2b      	ldr	r2, [pc, #172]	; (8013efc <Update_Detail+0x8dc>)
 8013e4e:	4413      	add	r3, r2
 8013e50:	e000      	b.n	8013e54 <Update_Detail+0x834>
 8013e52:	4b2b      	ldr	r3, [pc, #172]	; (8013f00 <Update_Detail+0x8e0>)
 8013e54:	2201      	movs	r2, #1
 8013e56:	21e1      	movs	r1, #225	; 0xe1
 8013e58:	f7fa f8ca 	bl	800dff0 <DispStr>
      break;
 8013e5c:	e391      	b.n	8014582 <Update_Detail+0xf62>
      case TR_MODE:   // ˢ����ʾ������ʽ
      case FITTRIGG:  // ˢ����ʾ�Զ�������ֵ
      case THRESHOLD: // ˢ����ʾ������ֵ
      case SENSITIVE: // ˢ����ʾ����������
      case TR_TYPE:   // ˢ����ʾ�α���ʽ
        DispStatus();
 8013e5e:	f000 fc6b 	bl	8014738 <DispStatus>
        SetColor(GRY, TCOLOR[TRG]);
 8013e62:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8013e66:	4619      	mov	r1, r3
 8013e68:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013e6c:	f7fa f8a8 	bl	800dfc0 <SetColor>
        if(i == TR_MODE || i==SENSITIVE)
 8013e70:	8afb      	ldrh	r3, [r7, #22]
 8013e72:	2b0e      	cmp	r3, #14
 8013e74:	d002      	beq.n	8013e7c <Update_Detail+0x85c>
 8013e76:	8afb      	ldrh	r3, [r7, #22]
 8013e78:	2b11      	cmp	r3, #17
 8013e7a:	d11a      	bne.n	8013eb2 <Update_Detail+0x892>
        {
          Draw_Circle_D(INV, S_X[TR_MODE]-3, TITLE_Y_POS, 11, 0, 6*8);
 8013e7c:	23dd      	movs	r3, #221	; 0xdd
 8013e7e:	b29b      	uxth	r3, r3
 8013e80:	3b03      	subs	r3, #3
 8013e82:	b29b      	uxth	r3, r3
 8013e84:	b219      	sxth	r1, r3
 8013e86:	2330      	movs	r3, #48	; 0x30
 8013e88:	9301      	str	r3, [sp, #4]
 8013e8a:	2300      	movs	r3, #0
 8013e8c:	9300      	str	r3, [sp, #0]
 8013e8e:	230b      	movs	r3, #11
 8013e90:	22e1      	movs	r2, #225	; 0xe1
 8013e92:	2001      	movs	r0, #1
 8013e94:	f7fa f982 	bl	800e19c <Draw_Circle_D>
          DispStr10x14(S_X[TR_MODE], TITLE_Y_POS, INV+SYMB,(List[TR_MODE].Val?("D"):("C")));
 8013e98:	20dd      	movs	r0, #221	; 0xdd
 8013e9a:	4b13      	ldr	r3, [pc, #76]	; (8013ee8 <Update_Detail+0x8c8>)
 8013e9c:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d001      	beq.n	8013ea8 <Update_Detail+0x888>
 8013ea4:	4b18      	ldr	r3, [pc, #96]	; (8013f08 <Update_Detail+0x8e8>)
 8013ea6:	e000      	b.n	8013eaa <Update_Detail+0x88a>
 8013ea8:	4b18      	ldr	r3, [pc, #96]	; (8013f0c <Update_Detail+0x8ec>)
 8013eaa:	2211      	movs	r2, #17
 8013eac:	21e1      	movs	r1, #225	; 0xe1
 8013eae:	f7fa fb07 	bl	800e4c0 <DispStr10x14>
        }
        if(i == FITTRIGG)
 8013eb2:	8afb      	ldrh	r3, [r7, #22]
 8013eb4:	2b0f      	cmp	r3, #15
 8013eb6:	d134      	bne.n	8013f22 <Update_Detail+0x902>
        {
          DispStr10x14(S_X[FITTRIGG], TITLE_Y_POS, PRN+SYMB,(List[FITTRIGG].Val?("F"):("B")));
 8013eb8:	20cf      	movs	r0, #207	; 0xcf
 8013eba:	4b0b      	ldr	r3, [pc, #44]	; (8013ee8 <Update_Detail+0x8c8>)
 8013ebc:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d001      	beq.n	8013ec8 <Update_Detail+0x8a8>
 8013ec4:	4b12      	ldr	r3, [pc, #72]	; (8013f10 <Update_Detail+0x8f0>)
 8013ec6:	e000      	b.n	8013eca <Update_Detail+0x8aa>
 8013ec8:	4b12      	ldr	r3, [pc, #72]	; (8013f14 <Update_Detail+0x8f4>)
 8013eca:	2210      	movs	r2, #16
 8013ecc:	21e1      	movs	r1, #225	; 0xe1
 8013ece:	f7fa faf7 	bl	800e4c0 <DispStr10x14>
          if(List[FITTRIGG].Val)KEYTIME = 300;
 8013ed2:	4b05      	ldr	r3, [pc, #20]	; (8013ee8 <Update_Detail+0x8c8>)
 8013ed4:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d01f      	beq.n	8013f1c <Update_Detail+0x8fc>
 8013edc:	4b0e      	ldr	r3, [pc, #56]	; (8013f18 <Update_Detail+0x8f8>)
 8013ede:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8013ee2:	801a      	strh	r2, [r3, #0]
 8013ee4:	e01d      	b.n	8013f22 <Update_Detail+0x902>
 8013ee6:	bf00      	nop
 8013ee8:	20000298 	.word	0x20000298
 8013eec:	08002338 	.word	0x08002338
 8013ef0:	20006bdc 	.word	0x20006bdc
 8013ef4:	08001d90 	.word	0x08001d90
 8013ef8:	0800215c 	.word	0x0800215c
 8013efc:	08001c88 	.word	0x08001c88
 8013f00:	08001cac 	.word	0x08001cac
 8013f04:	20000140 	.word	0x20000140
 8013f08:	08000988 	.word	0x08000988
 8013f0c:	0800098c 	.word	0x0800098c
 8013f10:	0800099c 	.word	0x0800099c
 8013f14:	0800095c 	.word	0x0800095c
 8013f18:	20000782 	.word	0x20000782
          else KEYTIME = 0;
 8013f1c:	4bac      	ldr	r3, [pc, #688]	; (80141d0 <Update_Detail+0xbb0>)
 8013f1e:	2200      	movs	r2, #0
 8013f20:	801a      	strh	r2, [r3, #0]
        }
        ParamTab[VTx2]= ParamTab[P1x2]+2*List[THRESHOLD].Val;
 8013f22:	4bac      	ldr	r3, [pc, #688]	; (80141d4 <Update_Detail+0xbb4>)
 8013f24:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8013f28:	b29a      	uxth	r2, r3
 8013f2a:	4bab      	ldr	r3, [pc, #684]	; (80141d8 <Update_Detail+0xbb8>)
 8013f2c:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8013f30:	b29b      	uxth	r3, r3
 8013f32:	005b      	lsls	r3, r3, #1
 8013f34:	b29b      	uxth	r3, r3
 8013f36:	4413      	add	r3, r2
 8013f38:	b29b      	uxth	r3, r3
 8013f3a:	b21a      	sxth	r2, r3
 8013f3c:	4ba5      	ldr	r3, [pc, #660]	; (80141d4 <Update_Detail+0xbb4>)
 8013f3e:	839a      	strh	r2, [r3, #28]
        Tmp  = List[SENSITIVE].Val;
 8013f40:	4ba5      	ldr	r3, [pc, #660]	; (80141d8 <Update_Detail+0xbb8>)
 8013f42:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8013f46:	613b      	str	r3, [r7, #16]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8013f48:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013f4c:	4aa3      	ldr	r2, [pc, #652]	; (80141dc <Update_Detail+0xbbc>)
 8013f4e:	5cd3      	ldrb	r3, [r2, r3]
 8013f50:	461c      	mov	r4, r3
 8013f52:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013f56:	4aa2      	ldr	r2, [pc, #648]	; (80141e0 <Update_Detail+0xbc0>)
 8013f58:	5cd3      	ldrb	r3, [r2, r3]
 8013f5a:	4618      	mov	r0, r3
 8013f5c:	f7fe f81c 	bl	8011f98 <Exp>
 8013f60:	4603      	mov	r3, r0
 8013f62:	fb03 f204 	mul.w	r2, r3, r4
 8013f66:	693b      	ldr	r3, [r7, #16]
 8013f68:	fb02 f303 	mul.w	r3, r2, r3
 8013f6c:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp, V[0], 2, UNSIGN);
 8013f6e:	2301      	movs	r3, #1
 8013f70:	9300      	str	r3, [sp, #0]
 8013f72:	2302      	movs	r3, #2
 8013f74:	4a9b      	ldr	r2, [pc, #620]	; (80141e4 <Update_Detail+0xbc4>)
 8013f76:	6939      	ldr	r1, [r7, #16]
 8013f78:	489b      	ldr	r0, [pc, #620]	; (80141e8 <Update_Detail+0xbc8>)
 8013f7a:	f7fd ff11 	bl	8011da0 <Value2Str>
        DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, INV+SYMB,"E");
 8013f7e:	20e7      	movs	r0, #231	; 0xe7
 8013f80:	4b9a      	ldr	r3, [pc, #616]	; (80141ec <Update_Detail+0xbcc>)
 8013f82:	2211      	movs	r2, #17
 8013f84:	21e1      	movs	r1, #225	; 0xe1
 8013f86:	f7fa fa9b 	bl	800e4c0 <DispStr10x14>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  "     ");
 8013f8a:	23e7      	movs	r3, #231	; 0xe7
 8013f8c:	b29b      	uxth	r3, r3
 8013f8e:	3309      	adds	r3, #9
 8013f90:	b29b      	uxth	r3, r3
 8013f92:	b218      	sxth	r0, r3
 8013f94:	4b96      	ldr	r3, [pc, #600]	; (80141f0 <Update_Detail+0xbd0>)
 8013f96:	2201      	movs	r2, #1
 8013f98:	21e1      	movs	r1, #225	; 0xe1
 8013f9a:	f7fa f829 	bl	800dff0 <DispStr>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  (char *)NumStr);
 8013f9e:	23e7      	movs	r3, #231	; 0xe7
 8013fa0:	b29b      	uxth	r3, r3
 8013fa2:	3309      	adds	r3, #9
 8013fa4:	b29b      	uxth	r3, r3
 8013fa6:	b218      	sxth	r0, r3
 8013fa8:	4b8f      	ldr	r3, [pc, #572]	; (80141e8 <Update_Detail+0xbc8>)
 8013faa:	2201      	movs	r2, #1
 8013fac:	21e1      	movs	r1, #225	; 0xe1
 8013fae:	f7fa f81f 	bl	800dff0 <DispStr>
        ParamTab[VTF]=(List[TR_TYPE].Val)? L_HID : SHOW;
 8013fb2:	4b89      	ldr	r3, [pc, #548]	; (80141d8 <Update_Detail+0xbb8>)
 8013fb4:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d001      	beq.n	8013fc0 <Update_Detail+0x9a0>
 8013fbc:	2202      	movs	r2, #2
 8013fbe:	e000      	b.n	8013fc2 <Update_Detail+0x9a2>
 8013fc0:	2200      	movs	r2, #0
 8013fc2:	4b84      	ldr	r3, [pc, #528]	; (80141d4 <Update_Detail+0xbb4>)
 8013fc4:	811a      	strh	r2, [r3, #8]
        break;
 8013fc6:	e2dc      	b.n	8014582 <Update_Detail+0xf62>
      case VIEWPOSI:  // ˢ����ʾˮƽ�Ӵ�λ��
      case SMPL_DPTH: // ˢ����ʾ�������
      case T1_POSI:   // ˢ����ʾ����α�λ��
      case T2_POSI:   // ˢ����ʾ�Ҷ��α�λ��
      case XN_TYPE:   // ˢ����ʾ�α���ʽ
        SetColor(GRY, TCOLOR[XN]);
 8013fc8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8013fcc:	4619      	mov	r1, r3
 8013fce:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013fd2:	f7f9 fff5 	bl	800dfc0 <SetColor>
        if(i == TIM_BASE)
 8013fd6:	8afb      	ldrh	r3, [r7, #22]
 8013fd8:	2b07      	cmp	r3, #7
 8013fda:	d11e      	bne.n	801401a <Update_Detail+0x9fa>
        {
          Draw_Circle_D(INV, S_X[i]-3, TITLE_Y_POS, 11, 2, 6*5);
 8013fdc:	8afb      	ldrh	r3, [r7, #22]
 8013fde:	4a85      	ldr	r2, [pc, #532]	; (80141f4 <Update_Detail+0xbd4>)
 8013fe0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013fe4:	b29b      	uxth	r3, r3
 8013fe6:	3b03      	subs	r3, #3
 8013fe8:	b29b      	uxth	r3, r3
 8013fea:	b219      	sxth	r1, r3
 8013fec:	231e      	movs	r3, #30
 8013fee:	9301      	str	r3, [sp, #4]
 8013ff0:	2302      	movs	r3, #2
 8013ff2:	9300      	str	r3, [sp, #0]
 8013ff4:	230b      	movs	r3, #11
 8013ff6:	22e1      	movs	r2, #225	; 0xe1
 8013ff8:	2001      	movs	r0, #1
 8013ffa:	f7fa f8cf 	bl	800e19c <Draw_Circle_D>
          DispStr(S_X[i], TITLE_Y_POS, INV, TimeBase_Str[List[TIM_BASE].Val]);
 8013ffe:	8afb      	ldrh	r3, [r7, #22]
 8014000:	4a7c      	ldr	r2, [pc, #496]	; (80141f4 <Update_Detail+0xbd4>)
 8014002:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8014006:	4b74      	ldr	r3, [pc, #464]	; (80141d8 <Update_Detail+0xbb8>)
 8014008:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801400c:	00db      	lsls	r3, r3, #3
 801400e:	4a7a      	ldr	r2, [pc, #488]	; (80141f8 <Update_Detail+0xbd8>)
 8014010:	4413      	add	r3, r2
 8014012:	2201      	movs	r2, #1
 8014014:	21e1      	movs	r1, #225	; 0xe1
 8014016:	f7f9 ffeb 	bl	800dff0 <DispStr>
        }
        if(i == SMPL_DPTH){
 801401a:	8afb      	ldrh	r3, [r7, #22]
 801401c:	2b09      	cmp	r3, #9
 801401e:	d126      	bne.n	801406e <Update_Detail+0xa4e>
          Draw_Circle_D(INV, S_X[SMPL_DPTH]-3, LABLE_Y, 11, 0, 6*11);
 8014020:	23f8      	movs	r3, #248	; 0xf8
 8014022:	b29b      	uxth	r3, r3
 8014024:	3b03      	subs	r3, #3
 8014026:	b29b      	uxth	r3, r3
 8014028:	b219      	sxth	r1, r3
 801402a:	2342      	movs	r3, #66	; 0x42
 801402c:	9301      	str	r3, [sp, #4]
 801402e:	2300      	movs	r3, #0
 8014030:	9300      	str	r3, [sp, #0]
 8014032:	230b      	movs	r3, #11
 8014034:	2203      	movs	r2, #3
 8014036:	2001      	movs	r0, #1
 8014038:	f7fa f8b0 	bl	800e19c <Draw_Circle_D>
          DispStr(S_X[SMPL_DPTH],    LABLE_Y,  INV, "SmplDpth:  ");
 801403c:	20f8      	movs	r0, #248	; 0xf8
 801403e:	4b6f      	ldr	r3, [pc, #444]	; (80141fc <Update_Detail+0xbdc>)
 8014040:	2201      	movs	r2, #1
 8014042:	2103      	movs	r1, #3
 8014044:	f7f9 ffd4 	bl	800dff0 <DispStr>
          DispStr(S_X[SMPL_DPTH]+6*9, LABLE_Y,  INV, (char *)&D[List[SMPL_DPTH].Val]);
 8014048:	23f8      	movs	r3, #248	; 0xf8
 801404a:	b29b      	uxth	r3, r3
 801404c:	3336      	adds	r3, #54	; 0x36
 801404e:	b29b      	uxth	r3, r3
 8014050:	b218      	sxth	r0, r3
 8014052:	4b61      	ldr	r3, [pc, #388]	; (80141d8 <Update_Detail+0xbb8>)
 8014054:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8014058:	461a      	mov	r2, r3
 801405a:	4613      	mov	r3, r2
 801405c:	005b      	lsls	r3, r3, #1
 801405e:	4413      	add	r3, r2
 8014060:	005b      	lsls	r3, r3, #1
 8014062:	4a67      	ldr	r2, [pc, #412]	; (8014200 <Update_Detail+0xbe0>)
 8014064:	4413      	add	r3, r2
 8014066:	2201      	movs	r2, #1
 8014068:	2103      	movs	r1, #3
 801406a:	f7f9 ffc1 	bl	800dff0 <DispStr>
        }
        Update_Windows();
 801406e:	f000 fbad 	bl	80147cc <Update_Windows>

        ParamTab[T0x1] = 2 + Presampling - List[VIEWPOSI].Val;
 8014072:	4b64      	ldr	r3, [pc, #400]	; (8014204 <Update_Detail+0xbe4>)
 8014074:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014078:	b29a      	uxth	r2, r3
 801407a:	4b57      	ldr	r3, [pc, #348]	; (80141d8 <Update_Detail+0xbb8>)
 801407c:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8014080:	b29b      	uxth	r3, r3
 8014082:	1ad3      	subs	r3, r2, r3
 8014084:	b29b      	uxth	r3, r3
 8014086:	3302      	adds	r3, #2
 8014088:	b29b      	uxth	r3, r3
 801408a:	b21a      	sxth	r2, r3
 801408c:	4b51      	ldr	r3, [pc, #324]	; (80141d4 <Update_Detail+0xbb4>)
 801408e:	845a      	strh	r2, [r3, #34]	; 0x22
        ParamTab[T0F] &= ~D_HID;
 8014090:	4b50      	ldr	r3, [pc, #320]	; (80141d4 <Update_Detail+0xbb4>)
 8014092:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8014096:	f023 0301 	bic.w	r3, r3, #1
 801409a:	b21a      	sxth	r2, r3
 801409c:	4b4d      	ldr	r3, [pc, #308]	; (80141d4 <Update_Detail+0xbb4>)
 801409e:	81da      	strh	r2, [r3, #14]
        ParamTab[T1F] &= ~D_HID;
 80140a0:	4b4c      	ldr	r3, [pc, #304]	; (80141d4 <Update_Detail+0xbb4>)
 80140a2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80140a6:	f023 0301 	bic.w	r3, r3, #1
 80140aa:	b21a      	sxth	r2, r3
 80140ac:	4b49      	ldr	r3, [pc, #292]	; (80141d4 <Update_Detail+0xbb4>)
 80140ae:	821a      	strh	r2, [r3, #16]
        ParamTab[T1F] &= ~D_HID;
 80140b0:	4b48      	ldr	r3, [pc, #288]	; (80141d4 <Update_Detail+0xbb4>)
 80140b2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80140b6:	f023 0301 	bic.w	r3, r3, #1
 80140ba:	b21a      	sxth	r2, r3
 80140bc:	4b45      	ldr	r3, [pc, #276]	; (80141d4 <Update_Detail+0xbb4>)
 80140be:	821a      	strh	r2, [r3, #16]
        ParamTab[T1x1] = List[T1_POSI].Val+1;
 80140c0:	4b45      	ldr	r3, [pc, #276]	; (80141d8 <Update_Detail+0xbb8>)
 80140c2:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 80140c6:	b29b      	uxth	r3, r3
 80140c8:	3301      	adds	r3, #1
 80140ca:	b29b      	uxth	r3, r3
 80140cc:	b21a      	sxth	r2, r3
 80140ce:	4b41      	ldr	r3, [pc, #260]	; (80141d4 <Update_Detail+0xbb4>)
 80140d0:	849a      	strh	r2, [r3, #36]	; 0x24
        ParamTab[T2x1] = List[T2_POSI].Val+1;
 80140d2:	4b41      	ldr	r3, [pc, #260]	; (80141d8 <Update_Detail+0xbb8>)
 80140d4:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 80140d8:	b29b      	uxth	r3, r3
 80140da:	3301      	adds	r3, #1
 80140dc:	b29b      	uxth	r3, r3
 80140de:	b21a      	sxth	r2, r3
 80140e0:	4b3c      	ldr	r3, [pc, #240]	; (80141d4 <Update_Detail+0xbb4>)
 80140e2:	84da      	strh	r2, [r3, #38]	; 0x26
        ParamTab[T1F]  = (List[XN_TYPE].Val)? L_HID : SHOW;
 80140e4:	4b3c      	ldr	r3, [pc, #240]	; (80141d8 <Update_Detail+0xbb8>)
 80140e6:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d001      	beq.n	80140f2 <Update_Detail+0xad2>
 80140ee:	2202      	movs	r2, #2
 80140f0:	e000      	b.n	80140f4 <Update_Detail+0xad4>
 80140f2:	2200      	movs	r2, #0
 80140f4:	4b37      	ldr	r3, [pc, #220]	; (80141d4 <Update_Detail+0xbb4>)
 80140f6:	821a      	strh	r2, [r3, #16]
        ParamTab[T2F]  = (List[XN_TYPE].Val)? L_HID : SHOW;
 80140f8:	4b37      	ldr	r3, [pc, #220]	; (80141d8 <Update_Detail+0xbb8>)
 80140fa:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d001      	beq.n	8014106 <Update_Detail+0xae6>
 8014102:	2202      	movs	r2, #2
 8014104:	e000      	b.n	8014108 <Update_Detail+0xae8>
 8014106:	2200      	movs	r2, #0
 8014108:	4b32      	ldr	r3, [pc, #200]	; (80141d4 <Update_Detail+0xbb4>)
 801410a:	825a      	strh	r2, [r3, #18]
        Tmp  = ParamTab[T2x1] - ParamTab[T1x1];
 801410c:	4b31      	ldr	r3, [pc, #196]	; (80141d4 <Update_Detail+0xbb4>)
 801410e:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8014112:	461a      	mov	r2, r3
 8014114:	4b2f      	ldr	r3, [pc, #188]	; (80141d4 <Update_Detail+0xbb4>)
 8014116:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 801411a:	1ad3      	subs	r3, r2, r3
 801411c:	613b      	str	r3, [r7, #16]
        Tmp *= B_SCALE[List[TIM_BASE].Val]* Exp(T_SCALE[List[TIM_BASE].Val]);
 801411e:	4b2e      	ldr	r3, [pc, #184]	; (80141d8 <Update_Detail+0xbb8>)
 8014120:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014124:	461a      	mov	r2, r3
 8014126:	4b38      	ldr	r3, [pc, #224]	; (8014208 <Update_Detail+0xbe8>)
 8014128:	5c9b      	ldrb	r3, [r3, r2]
 801412a:	461c      	mov	r4, r3
 801412c:	4b2a      	ldr	r3, [pc, #168]	; (80141d8 <Update_Detail+0xbb8>)
 801412e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014132:	461a      	mov	r2, r3
 8014134:	4b35      	ldr	r3, [pc, #212]	; (801420c <Update_Detail+0xbec>)
 8014136:	5c9b      	ldrb	r3, [r3, r2]
 8014138:	4618      	mov	r0, r3
 801413a:	f7fd ff2d 	bl	8011f98 <Exp>
 801413e:	4603      	mov	r3, r0
 8014140:	fb03 f204 	mul.w	r2, r3, r4
 8014144:	693b      	ldr	r3, [r7, #16]
 8014146:	fb02 f303 	mul.w	r3, r2, r3
 801414a:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp, T[0], 3, UNSIGN);
 801414c:	2301      	movs	r3, #1
 801414e:	9300      	str	r3, [sp, #0]
 8014150:	2303      	movs	r3, #3
 8014152:	4a2f      	ldr	r2, [pc, #188]	; (8014210 <Update_Detail+0xbf0>)
 8014154:	6939      	ldr	r1, [r7, #16]
 8014156:	4824      	ldr	r0, [pc, #144]	; (80141e8 <Update_Detail+0xbc8>)
 8014158:	f7fd fe22 	bl	8011da0 <Value2Str>
        Draw_Circle_D(INV, S_X[V1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 801415c:	2307      	movs	r3, #7
 801415e:	b29b      	uxth	r3, r3
 8014160:	3b03      	subs	r3, #3
 8014162:	b29b      	uxth	r3, r3
 8014164:	b219      	sxth	r1, r3
 8014166:	2336      	movs	r3, #54	; 0x36
 8014168:	9301      	str	r3, [sp, #4]
 801416a:	2300      	movs	r3, #0
 801416c:	9300      	str	r3, [sp, #0]
 801416e:	230b      	movs	r3, #11
 8014170:	2203      	movs	r2, #3
 8014172:	2001      	movs	r0, #1
 8014174:	f7fa f812 	bl	800e19c <Draw_Circle_D>
        DispStr(S_X[T1_POSI]+0*6, LABLE_Y, INV+SYMB, "]");
 8014178:	2007      	movs	r0, #7
 801417a:	4b26      	ldr	r3, [pc, #152]	; (8014214 <Update_Detail+0xbf4>)
 801417c:	2211      	movs	r2, #17
 801417e:	2103      	movs	r1, #3
 8014180:	f7f9 ff36 	bl	800dff0 <DispStr>
        DispStr(S_X[T1_POSI]+1*6, LABLE_Y, INV,      "T:      ");
 8014184:	2307      	movs	r3, #7
 8014186:	b29b      	uxth	r3, r3
 8014188:	3306      	adds	r3, #6
 801418a:	b29b      	uxth	r3, r3
 801418c:	b218      	sxth	r0, r3
 801418e:	4b22      	ldr	r3, [pc, #136]	; (8014218 <Update_Detail+0xbf8>)
 8014190:	2201      	movs	r2, #1
 8014192:	2103      	movs	r1, #3
 8014194:	f7f9 ff2c 	bl	800dff0 <DispStr>
        DispStr(S_X[T1_POSI]+7*6, LABLE_Y, INV,  "  ");
 8014198:	2307      	movs	r3, #7
 801419a:	b29b      	uxth	r3, r3
 801419c:	332a      	adds	r3, #42	; 0x2a
 801419e:	b29b      	uxth	r3, r3
 80141a0:	b218      	sxth	r0, r3
 80141a2:	4b1e      	ldr	r3, [pc, #120]	; (801421c <Update_Detail+0xbfc>)
 80141a4:	2201      	movs	r2, #1
 80141a6:	2103      	movs	r1, #3
 80141a8:	f7f9 ff22 	bl	800dff0 <DispStr>
        DispStr(S_X[T1_POSI]+3*6, LABLE_Y, INV,  (char *)NumStr);
 80141ac:	2307      	movs	r3, #7
 80141ae:	b29b      	uxth	r3, r3
 80141b0:	3312      	adds	r3, #18
 80141b2:	b29b      	uxth	r3, r3
 80141b4:	b218      	sxth	r0, r3
 80141b6:	4b0c      	ldr	r3, [pc, #48]	; (80141e8 <Update_Detail+0xbc8>)
 80141b8:	2201      	movs	r2, #1
 80141ba:	2103      	movs	r1, #3
 80141bc:	f7f9 ff18 	bl	800dff0 <DispStr>
        Set_Base(List[TIM_BASE].Val);          // Ӳ������ɨ��ʱ����λ
 80141c0:	4b05      	ldr	r3, [pc, #20]	; (80141d8 <Update_Detail+0xbb8>)
 80141c2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80141c6:	4618      	mov	r0, r3
 80141c8:	f7f8 fa50 	bl	800c66c <Set_Base>
      break;
 80141cc:	e1d9      	b.n	8014582 <Update_Detail+0xf62>
 80141ce:	bf00      	nop
 80141d0:	20000782 	.word	0x20000782
 80141d4:	20000140 	.word	0x20000140
 80141d8:	20000298 	.word	0x20000298
 80141dc:	08002130 	.word	0x08002130
 80141e0:	08002108 	.word	0x08002108
 80141e4:	08001d00 	.word	0x08001d00
 80141e8:	20002844 	.word	0x20002844
 80141ec:	08000998 	.word	0x08000998
 80141f0:	08000990 	.word	0x08000990
 80141f4:	0800215c 	.word	0x0800215c
 80141f8:	200001d0 	.word	0x200001d0
 80141fc:	08000970 	.word	0x08000970
 8014200:	08001c4c 	.word	0x08001c4c
 8014204:	2000055a 	.word	0x2000055a
 8014208:	0800211c 	.word	0x0800211c
 801420c:	080020f4 	.word	0x080020f4
 8014210:	08001ce8 	.word	0x08001ce8
 8014214:	08000960 	.word	0x08000960
 8014218:	0800097c 	.word	0x0800097c
 801421c:	080009d0 	.word	0x080009d0

      case FREQUENC://��ʾƵ��
        FTmp=Edge*25*1000/2;
 8014220:	4bb7      	ldr	r3, [pc, #732]	; (8014500 <Update_Detail+0xee0>)
 8014222:	681b      	ldr	r3, [r3, #0]
 8014224:	f243 02d4 	movw	r2, #12500	; 0x30d4
 8014228:	fb02 f303 	mul.w	r3, r2, r3
 801422c:	60fb      	str	r3, [r7, #12]
        if(List[TIM_BASE].Val<9)FTmp= FTmp*1000000;
 801422e:	4bb5      	ldr	r3, [pc, #724]	; (8014504 <Update_Detail+0xee4>)
 8014230:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014234:	2b08      	cmp	r3, #8
 8014236:	dc05      	bgt.n	8014244 <Update_Detail+0xc24>
 8014238:	68fb      	ldr	r3, [r7, #12]
 801423a:	4ab3      	ldr	r2, [pc, #716]	; (8014508 <Update_Detail+0xee8>)
 801423c:	fb02 f303 	mul.w	r3, r2, r3
 8014240:	60fb      	str	r3, [r7, #12]
 8014242:	e00a      	b.n	801425a <Update_Detail+0xc3a>
        else if(List[TIM_BASE].Val<18)FTmp= FTmp*1000;
 8014244:	4baf      	ldr	r3, [pc, #700]	; (8014504 <Update_Detail+0xee4>)
 8014246:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801424a:	2b11      	cmp	r3, #17
 801424c:	dc05      	bgt.n	801425a <Update_Detail+0xc3a>
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014254:	fb02 f303 	mul.w	r3, r2, r3
 8014258:	60fb      	str	r3, [r7, #12]
        FTmp=FTmp/Ts[List[TIM_BASE].Val]/DEPTH[List[SMPL_DPTH].Val];
 801425a:	4baa      	ldr	r3, [pc, #680]	; (8014504 <Update_Detail+0xee4>)
 801425c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014260:	461a      	mov	r2, r3
 8014262:	4baa      	ldr	r3, [pc, #680]	; (801450c <Update_Detail+0xeec>)
 8014264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014268:	461a      	mov	r2, r3
 801426a:	68fb      	ldr	r3, [r7, #12]
 801426c:	fbb3 f3f2 	udiv	r3, r3, r2
 8014270:	4aa4      	ldr	r2, [pc, #656]	; (8014504 <Update_Detail+0xee4>)
 8014272:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 8014276:	4611      	mov	r1, r2
 8014278:	4aa5      	ldr	r2, [pc, #660]	; (8014510 <Update_Detail+0xef0>)
 801427a:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 801427e:	fbb3 f3f2 	udiv	r3, r3, r2
 8014282:	60fb      	str	r3, [r7, #12]
          DispMeter(i, 1, UNSIGN,FTmp);
 8014284:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	2201      	movs	r2, #1
 801428c:	2101      	movs	r1, #1
 801428e:	f000 f9d3 	bl	8014638 <DispMeter>
      break;
 8014292:	e176      	b.n	8014582 <Update_Detail+0xf62>

      case DUTY:    //��ʾռ�ձ�
         DispMeter(i, k, UNSIGN,(HighT*100)/k);
 8014294:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8014298:	887b      	ldrh	r3, [r7, #2]
 801429a:	b2d9      	uxtb	r1, r3
 801429c:	4b9d      	ldr	r3, [pc, #628]	; (8014514 <Update_Detail+0xef4>)
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	2264      	movs	r2, #100	; 0x64
 80142a2:	fb02 f203 	mul.w	r2, r2, r3
 80142a6:	887b      	ldrh	r3, [r7, #2]
 80142a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80142ac:	2201      	movs	r2, #1
 80142ae:	f000 f9c3 	bl	8014638 <DispMeter>
        break;
 80142b2:	e166      	b.n	8014582 <Update_Detail+0xf62>

      case VRMS://��ʾ��ѹ��Чֵ
        if(abs(Vrms)<4)
 80142b4:	4b98      	ldr	r3, [pc, #608]	; (8014518 <Update_Detail+0xef8>)
 80142b6:	681b      	ldr	r3, [r3, #0]
 80142b8:	f113 0f03 	cmn.w	r3, #3
 80142bc:	db06      	blt.n	80142cc <Update_Detail+0xcac>
 80142be:	4b96      	ldr	r3, [pc, #600]	; (8014518 <Update_Detail+0xef8>)
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	2b03      	cmp	r3, #3
 80142c4:	dc02      	bgt.n	80142cc <Update_Detail+0xcac>
        {
          Tmp = 0.00;
 80142c6:	2300      	movs	r3, #0
 80142c8:	613b      	str	r3, [r7, #16]
 80142ca:	e026      	b.n	801431a <Update_Detail+0xcfa>
        }else{
		  scale = (List[PROBEATT].Val?
 80142cc:	4b8d      	ldr	r3, [pc, #564]	; (8014504 <Update_Detail+0xee4>)
 80142ce:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d00b      	beq.n	80142ee <Update_Detail+0xcce>
 80142d6:	4b8b      	ldr	r3, [pc, #556]	; (8014504 <Update_Detail+0xee4>)
 80142d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80142dc:	461a      	mov	r2, r3
 80142de:	4b8f      	ldr	r3, [pc, #572]	; (801451c <Update_Detail+0xefc>)
 80142e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80142e4:	4613      	mov	r3, r2
 80142e6:	009b      	lsls	r3, r3, #2
 80142e8:	4413      	add	r3, r2
 80142ea:	00db      	lsls	r3, r3, #3
 80142ec:	e00a      	b.n	8014304 <Update_Detail+0xce4>
 80142ee:	4b85      	ldr	r3, [pc, #532]	; (8014504 <Update_Detail+0xee4>)
 80142f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80142f4:	461a      	mov	r2, r3
 80142f6:	4b8a      	ldr	r3, [pc, #552]	; (8014520 <Update_Detail+0xf00>)
 80142f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80142fc:	4613      	mov	r3, r2
 80142fe:	009b      	lsls	r3, r3, #2
 8014300:	4413      	add	r3, r2
 8014302:	00db      	lsls	r3, r3, #3
		  scale = (List[PROBEATT].Val?
 8014304:	60bb      	str	r3, [r7, #8]
	          Tmp  = ((((Vrms)*Ak)>>12))*scale;
 8014306:	4b84      	ldr	r3, [pc, #528]	; (8014518 <Update_Detail+0xef8>)
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	687a      	ldr	r2, [r7, #4]
 801430c:	fb02 f303 	mul.w	r3, r2, r3
 8014310:	131a      	asrs	r2, r3, #12
 8014312:	68bb      	ldr	r3, [r7, #8]
 8014314:	fb02 f303 	mul.w	r3, r2, r3
 8014318:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 801431a:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 801431e:	693b      	ldr	r3, [r7, #16]
 8014320:	2201      	movs	r2, #1
 8014322:	2101      	movs	r1, #1
 8014324:	f000 f988 	bl	8014638 <DispMeter>
        break;
 8014328:	e12b      	b.n	8014582 <Update_Detail+0xf62>

      case VP_P://��ʾ��ѹ���ֵ
        if(abs(Vpp)<7){
 801432a:	4b7e      	ldr	r3, [pc, #504]	; (8014524 <Update_Detail+0xf04>)
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	f113 0f06 	cmn.w	r3, #6
 8014332:	db06      	blt.n	8014342 <Update_Detail+0xd22>
 8014334:	4b7b      	ldr	r3, [pc, #492]	; (8014524 <Update_Detail+0xf04>)
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	2b06      	cmp	r3, #6
 801433a:	dc02      	bgt.n	8014342 <Update_Detail+0xd22>
          Tmp = 0.00;
 801433c:	2300      	movs	r3, #0
 801433e:	613b      	str	r3, [r7, #16]
 8014340:	e033      	b.n	80143aa <Update_Detail+0xd8a>
        }
        else
        {
           scale = (List[PROBEATT].Val?
 8014342:	4b70      	ldr	r3, [pc, #448]	; (8014504 <Update_Detail+0xee4>)
 8014344:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 8014348:	2b00      	cmp	r3, #0
 801434a:	d00b      	beq.n	8014364 <Update_Detail+0xd44>
 801434c:	4b6d      	ldr	r3, [pc, #436]	; (8014504 <Update_Detail+0xee4>)
 801434e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014352:	461a      	mov	r2, r3
 8014354:	4b71      	ldr	r3, [pc, #452]	; (801451c <Update_Detail+0xefc>)
 8014356:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801435a:	4613      	mov	r3, r2
 801435c:	009b      	lsls	r3, r3, #2
 801435e:	4413      	add	r3, r2
 8014360:	00db      	lsls	r3, r3, #3
 8014362:	e00a      	b.n	801437a <Update_Detail+0xd5a>
 8014364:	4b67      	ldr	r3, [pc, #412]	; (8014504 <Update_Detail+0xee4>)
 8014366:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801436a:	461a      	mov	r2, r3
 801436c:	4b6c      	ldr	r3, [pc, #432]	; (8014520 <Update_Detail+0xf00>)
 801436e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014372:	4613      	mov	r3, r2
 8014374:	009b      	lsls	r3, r3, #2
 8014376:	4413      	add	r3, r2
 8014378:	00db      	lsls	r3, r3, #3
           scale = (List[PROBEATT].Val?
 801437a:	60bb      	str	r3, [r7, #8]
          Tmp  = ((((Vmax-2048)*(Ak))>>12)-(((Vmin-2048)*(Ak))>>12))*scale;
 801437c:	4b6a      	ldr	r3, [pc, #424]	; (8014528 <Update_Detail+0xf08>)
 801437e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014382:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8014386:	687a      	ldr	r2, [r7, #4]
 8014388:	fb02 f303 	mul.w	r3, r2, r3
 801438c:	131a      	asrs	r2, r3, #12
 801438e:	4b67      	ldr	r3, [pc, #412]	; (801452c <Update_Detail+0xf0c>)
 8014390:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014394:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8014398:	6879      	ldr	r1, [r7, #4]
 801439a:	fb01 f303 	mul.w	r3, r1, r3
 801439e:	131b      	asrs	r3, r3, #12
 80143a0:	1ad2      	subs	r2, r2, r3
 80143a2:	68bb      	ldr	r3, [r7, #8]
 80143a4:	fb02 f303 	mul.w	r3, r2, r3
 80143a8:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 80143aa:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 80143ae:	693b      	ldr	r3, [r7, #16]
 80143b0:	2201      	movs	r2, #1
 80143b2:	2101      	movs	r1, #1
 80143b4:	f000 f940 	bl	8014638 <DispMeter>
        break;
 80143b8:	e0e3      	b.n	8014582 <Update_Detail+0xf62>

      case VAVG://��ʾ��ѹƽ��ֵ
        if(abs(Vavg)<4)
 80143ba:	4b5d      	ldr	r3, [pc, #372]	; (8014530 <Update_Detail+0xf10>)
 80143bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	bfb8      	it	lt
 80143c4:	425b      	neglt	r3, r3
 80143c6:	b29b      	uxth	r3, r3
 80143c8:	2b03      	cmp	r3, #3
 80143ca:	d802      	bhi.n	80143d2 <Update_Detail+0xdb2>
        {
          Tmp = 0.00;
 80143cc:	2300      	movs	r3, #0
 80143ce:	613b      	str	r3, [r7, #16]
 80143d0:	e02e      	b.n	8014430 <Update_Detail+0xe10>
        }else{
          scale = (List[PROBEATT].Val?
 80143d2:	4b4c      	ldr	r3, [pc, #304]	; (8014504 <Update_Detail+0xee4>)
 80143d4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d00b      	beq.n	80143f4 <Update_Detail+0xdd4>
 80143dc:	4b49      	ldr	r3, [pc, #292]	; (8014504 <Update_Detail+0xee4>)
 80143de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80143e2:	461a      	mov	r2, r3
 80143e4:	4b4d      	ldr	r3, [pc, #308]	; (801451c <Update_Detail+0xefc>)
 80143e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80143ea:	4613      	mov	r3, r2
 80143ec:	009b      	lsls	r3, r3, #2
 80143ee:	4413      	add	r3, r2
 80143f0:	00db      	lsls	r3, r3, #3
 80143f2:	e00a      	b.n	801440a <Update_Detail+0xdea>
 80143f4:	4b43      	ldr	r3, [pc, #268]	; (8014504 <Update_Detail+0xee4>)
 80143f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80143fa:	461a      	mov	r2, r3
 80143fc:	4b48      	ldr	r3, [pc, #288]	; (8014520 <Update_Detail+0xf00>)
 80143fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014402:	4613      	mov	r3, r2
 8014404:	009b      	lsls	r3, r3, #2
 8014406:	4413      	add	r3, r2
 8014408:	00db      	lsls	r3, r3, #3
          scale = (List[PROBEATT].Val?
 801440a:	60bb      	str	r3, [r7, #8]
          Tmp = ((((Vavg-2048)*(Ak))>>12)+100-List[V0_POSI].Val)*scale;
 801440c:	4b48      	ldr	r3, [pc, #288]	; (8014530 <Update_Detail+0xf10>)
 801440e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014412:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8014416:	687a      	ldr	r2, [r7, #4]
 8014418:	fb02 f303 	mul.w	r3, r2, r3
 801441c:	131b      	asrs	r3, r3, #12
 801441e:	3364      	adds	r3, #100	; 0x64
 8014420:	4a38      	ldr	r2, [pc, #224]	; (8014504 <Update_Detail+0xee4>)
 8014422:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8014426:	1a9a      	subs	r2, r3, r2
 8014428:	68bb      	ldr	r3, [r7, #8]
 801442a:	fb02 f303 	mul.w	r3, r2, r3
 801442e:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 8014430:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8014434:	693b      	ldr	r3, [r7, #16]
 8014436:	2201      	movs	r2, #1
 8014438:	2101      	movs	r1, #1
 801443a:	f000 f8fd 	bl	8014638 <DispMeter>
        break;
 801443e:	e0a0      	b.n	8014582 <Update_Detail+0xf62>

      case VMAX://��ʾ��ѹ���ֵ
        if(abs(Vmax)<4){
 8014440:	4b39      	ldr	r3, [pc, #228]	; (8014528 <Update_Detail+0xf08>)
 8014442:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014446:	2b00      	cmp	r3, #0
 8014448:	bfb8      	it	lt
 801444a:	425b      	neglt	r3, r3
 801444c:	b29b      	uxth	r3, r3
 801444e:	2b03      	cmp	r3, #3
 8014450:	d802      	bhi.n	8014458 <Update_Detail+0xe38>
          Tmp = 0.00;
 8014452:	2300      	movs	r3, #0
 8014454:	613b      	str	r3, [r7, #16]
 8014456:	e02e      	b.n	80144b6 <Update_Detail+0xe96>
        }else{
		  scale = (List[PROBEATT].Val?
 8014458:	4b2a      	ldr	r3, [pc, #168]	; (8014504 <Update_Detail+0xee4>)
 801445a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 801445e:	2b00      	cmp	r3, #0
 8014460:	d00b      	beq.n	801447a <Update_Detail+0xe5a>
 8014462:	4b28      	ldr	r3, [pc, #160]	; (8014504 <Update_Detail+0xee4>)
 8014464:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014468:	461a      	mov	r2, r3
 801446a:	4b2c      	ldr	r3, [pc, #176]	; (801451c <Update_Detail+0xefc>)
 801446c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014470:	4613      	mov	r3, r2
 8014472:	009b      	lsls	r3, r3, #2
 8014474:	4413      	add	r3, r2
 8014476:	00db      	lsls	r3, r3, #3
 8014478:	e00a      	b.n	8014490 <Update_Detail+0xe70>
 801447a:	4b22      	ldr	r3, [pc, #136]	; (8014504 <Update_Detail+0xee4>)
 801447c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014480:	461a      	mov	r2, r3
 8014482:	4b27      	ldr	r3, [pc, #156]	; (8014520 <Update_Detail+0xf00>)
 8014484:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014488:	4613      	mov	r3, r2
 801448a:	009b      	lsls	r3, r3, #2
 801448c:	4413      	add	r3, r2
 801448e:	00db      	lsls	r3, r3, #3
		  scale = (List[PROBEATT].Val?
 8014490:	60bb      	str	r3, [r7, #8]
          Tmp  = ((((Vmax-2048)*(Ak))>>12)+100-List[V0_POSI].Val)*scale;
 8014492:	4b25      	ldr	r3, [pc, #148]	; (8014528 <Update_Detail+0xf08>)
 8014494:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014498:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801449c:	687a      	ldr	r2, [r7, #4]
 801449e:	fb02 f303 	mul.w	r3, r2, r3
 80144a2:	131b      	asrs	r3, r3, #12
 80144a4:	3364      	adds	r3, #100	; 0x64
 80144a6:	4a17      	ldr	r2, [pc, #92]	; (8014504 <Update_Detail+0xee4>)
 80144a8:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 80144ac:	1a9a      	subs	r2, r3, r2
 80144ae:	68bb      	ldr	r3, [r7, #8]
 80144b0:	fb02 f303 	mul.w	r3, r2, r3
 80144b4:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 80144b6:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 80144ba:	693b      	ldr	r3, [r7, #16]
 80144bc:	2201      	movs	r2, #1
 80144be:	2101      	movs	r1, #1
 80144c0:	f000 f8ba 	bl	8014638 <DispMeter>
        break;
 80144c4:	e05d      	b.n	8014582 <Update_Detail+0xf62>

      case VMIN://��ʾ��ѹ��Сֵ
        if(abs(Vmin)<4){
 80144c6:	4b19      	ldr	r3, [pc, #100]	; (801452c <Update_Detail+0xf0c>)
 80144c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	bfb8      	it	lt
 80144d0:	425b      	neglt	r3, r3
 80144d2:	b29b      	uxth	r3, r3
 80144d4:	2b03      	cmp	r3, #3
 80144d6:	d802      	bhi.n	80144de <Update_Detail+0xebe>
          Tmp = 0.00;
 80144d8:	2300      	movs	r3, #0
 80144da:	613b      	str	r3, [r7, #16]
 80144dc:	e048      	b.n	8014570 <Update_Detail+0xf50>
        }else{
		  scale = (List[PROBEATT].Val?
 80144de:	4b09      	ldr	r3, [pc, #36]	; (8014504 <Update_Detail+0xee4>)
 80144e0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                           VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d025      	beq.n	8014534 <Update_Detail+0xf14>
 80144e8:	4b06      	ldr	r3, [pc, #24]	; (8014504 <Update_Detail+0xee4>)
 80144ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80144ee:	461a      	mov	r2, r3
 80144f0:	4b0a      	ldr	r3, [pc, #40]	; (801451c <Update_Detail+0xefc>)
 80144f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80144f6:	4613      	mov	r3, r2
 80144f8:	009b      	lsls	r3, r3, #2
 80144fa:	4413      	add	r3, r2
 80144fc:	00db      	lsls	r3, r3, #3
 80144fe:	e024      	b.n	801454a <Update_Detail+0xf2a>
 8014500:	20002858 	.word	0x20002858
 8014504:	20000298 	.word	0x20000298
 8014508:	000f4240 	.word	0x000f4240
 801450c:	080022a0 	.word	0x080022a0
 8014510:	08002270 	.word	0x08002270
 8014514:	20006880 	.word	0x20006880
 8014518:	2000286c 	.word	0x2000286c
 801451c:	20000270 	.word	0x20000270
 8014520:	08001d68 	.word	0x08001d68
 8014524:	20006888 	.word	0x20006888
 8014528:	2000285e 	.word	0x2000285e
 801452c:	20002870 	.word	0x20002870
 8014530:	20002860 	.word	0x20002860
 8014534:	4b38      	ldr	r3, [pc, #224]	; (8014618 <Update_Detail+0xff8>)
 8014536:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801453a:	461a      	mov	r2, r3
 801453c:	4b37      	ldr	r3, [pc, #220]	; (801461c <Update_Detail+0xffc>)
 801453e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014542:	4613      	mov	r3, r2
 8014544:	009b      	lsls	r3, r3, #2
 8014546:	4413      	add	r3, r2
 8014548:	00db      	lsls	r3, r3, #3
		  scale = (List[PROBEATT].Val?
 801454a:	60bb      	str	r3, [r7, #8]
                  Tmp  = ((((Vmin-2048)*(Ak))>>12)+100-List[V0_POSI].Val)*scale;
 801454c:	4b34      	ldr	r3, [pc, #208]	; (8014620 <Update_Detail+0x1000>)
 801454e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014552:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8014556:	687a      	ldr	r2, [r7, #4]
 8014558:	fb02 f303 	mul.w	r3, r2, r3
 801455c:	131b      	asrs	r3, r3, #12
 801455e:	3364      	adds	r3, #100	; 0x64
 8014560:	4a2d      	ldr	r2, [pc, #180]	; (8014618 <Update_Detail+0xff8>)
 8014562:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8014566:	1a9a      	subs	r2, r3, r2
 8014568:	68bb      	ldr	r3, [r7, #8]
 801456a:	fb02 f303 	mul.w	r3, r2, r3
 801456e:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, SIGN, Tmp);
 8014570:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8014574:	693b      	ldr	r3, [r7, #16]
 8014576:	2200      	movs	r2, #0
 8014578:	2101      	movs	r1, #1
 801457a:	f000 f85d 	bl	8014638 <DispMeter>
        break;
 801457e:	e000      	b.n	8014582 <Update_Detail+0xf62>
        break;
 8014580:	bf00      	nop

        break;

      }
      /**/
      if(Freq_Flag){
 8014582:	4b28      	ldr	r3, [pc, #160]	; (8014624 <Update_Detail+0x1004>)
 8014584:	781b      	ldrb	r3, [r3, #0]
 8014586:	2b00      	cmp	r3, #0
 8014588:	d03a      	beq.n	8014600 <Update_Detail+0xfe0>
        Freq_Flag = 0;
 801458a:	4b26      	ldr	r3, [pc, #152]	; (8014624 <Update_Detail+0x1004>)
 801458c:	2200      	movs	r2, #0
 801458e:	701a      	strb	r2, [r3, #0]
        FTmp=Edge*25*1000/2;
 8014590:	4b25      	ldr	r3, [pc, #148]	; (8014628 <Update_Detail+0x1008>)
 8014592:	681b      	ldr	r3, [r3, #0]
 8014594:	f243 02d4 	movw	r2, #12500	; 0x30d4
 8014598:	fb02 f303 	mul.w	r3, r2, r3
 801459c:	60fb      	str	r3, [r7, #12]
        if(List[TIM_BASE].Val<9)FTmp= FTmp*1000000;
 801459e:	4b1e      	ldr	r3, [pc, #120]	; (8014618 <Update_Detail+0xff8>)
 80145a0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80145a4:	2b08      	cmp	r3, #8
 80145a6:	dc05      	bgt.n	80145b4 <Update_Detail+0xf94>
 80145a8:	68fb      	ldr	r3, [r7, #12]
 80145aa:	4a20      	ldr	r2, [pc, #128]	; (801462c <Update_Detail+0x100c>)
 80145ac:	fb02 f303 	mul.w	r3, r2, r3
 80145b0:	60fb      	str	r3, [r7, #12]
 80145b2:	e00a      	b.n	80145ca <Update_Detail+0xfaa>
        else if(List[TIM_BASE].Val<18)FTmp= FTmp*1000;
 80145b4:	4b18      	ldr	r3, [pc, #96]	; (8014618 <Update_Detail+0xff8>)
 80145b6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80145ba:	2b11      	cmp	r3, #17
 80145bc:	dc05      	bgt.n	80145ca <Update_Detail+0xfaa>
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80145c4:	fb02 f303 	mul.w	r3, r2, r3
 80145c8:	60fb      	str	r3, [r7, #12]
        FTmp=FTmp/Ts[List[TIM_BASE].Val]/DEPTH[List[SMPL_DPTH].Val];
 80145ca:	4b13      	ldr	r3, [pc, #76]	; (8014618 <Update_Detail+0xff8>)
 80145cc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80145d0:	461a      	mov	r2, r3
 80145d2:	4b17      	ldr	r3, [pc, #92]	; (8014630 <Update_Detail+0x1010>)
 80145d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80145d8:	461a      	mov	r2, r3
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80145e0:	4a0d      	ldr	r2, [pc, #52]	; (8014618 <Update_Detail+0xff8>)
 80145e2:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 80145e6:	4611      	mov	r1, r2
 80145e8:	4a12      	ldr	r2, [pc, #72]	; (8014634 <Update_Detail+0x1014>)
 80145ea:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80145ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80145f2:	60fb      	str	r3, [r7, #12]
        DispFreq(    1, UNSIGN,FTmp);
 80145f4:	68fb      	ldr	r3, [r7, #12]
 80145f6:	461a      	mov	r2, r3
 80145f8:	2101      	movs	r1, #1
 80145fa:	2001      	movs	r0, #1
 80145fc:	f000 fa08 	bl	8014a10 <DispFreq>
  for(i=Y_RANGES; i<=STANDBY; i++){
 8014600:	8afb      	ldrh	r3, [r7, #22]
 8014602:	3301      	adds	r3, #1
 8014604:	82fb      	strh	r3, [r7, #22]
 8014606:	8afb      	ldrh	r3, [r7, #22]
 8014608:	2b29      	cmp	r3, #41	; 0x29
 801460a:	f67f a849 	bls.w	80136a0 <Update_Detail+0x80>
      }
    }
  }

}
 801460e:	bf00      	nop
 8014610:	bf00      	nop
 8014612:	371c      	adds	r7, #28
 8014614:	46bd      	mov	sp, r7
 8014616:	bd90      	pop	{r4, r7, pc}
 8014618:	20000298 	.word	0x20000298
 801461c:	08001d68 	.word	0x08001d68
 8014620:	20002870 	.word	0x20002870
 8014624:	200001cc 	.word	0x200001cc
 8014628:	20002858 	.word	0x20002858
 801462c:	000f4240 	.word	0x000f4240
 8014630:	080022a0 	.word	0x080022a0
 8014634:	08002270 	.word	0x08002270

08014638 <DispMeter>:
/*******************************************************************************

*******************************************************************************/
void DispMeter(short Item, char St, char Mode, int Val)
{
 8014638:	b580      	push	{r7, lr}
 801463a:	b084      	sub	sp, #16
 801463c:	af02      	add	r7, sp, #8
 801463e:	603b      	str	r3, [r7, #0]
 8014640:	4603      	mov	r3, r0
 8014642:	80fb      	strh	r3, [r7, #6]
 8014644:	460b      	mov	r3, r1
 8014646:	717b      	strb	r3, [r7, #5]
 8014648:	4613      	mov	r3, r2
 801464a:	713b      	strb	r3, [r7, #4]
  SetColor(GRY, TCOLOR[ME]);
 801464c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014650:	4619      	mov	r1, r3
 8014652:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014656:	f7f9 fcb3 	bl	800dfc0 <SetColor>

  Draw_Circle_D(INV, S_X[Item]-3, LABLE_Y, 11, 0, 6*12);
 801465a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801465e:	4a30      	ldr	r2, [pc, #192]	; (8014720 <DispMeter+0xe8>)
 8014660:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8014664:	b29b      	uxth	r3, r3
 8014666:	3b03      	subs	r3, #3
 8014668:	b29b      	uxth	r3, r3
 801466a:	b219      	sxth	r1, r3
 801466c:	2348      	movs	r3, #72	; 0x48
 801466e:	9301      	str	r3, [sp, #4]
 8014670:	2300      	movs	r3, #0
 8014672:	9300      	str	r3, [sp, #0]
 8014674:	230b      	movs	r3, #11
 8014676:	2203      	movs	r2, #3
 8014678:	2001      	movs	r0, #1
 801467a:	f7f9 fd8f 	bl	800e19c <Draw_Circle_D>
  DispStr(S_X[Item], LABLE_Y, INV, (char *)&Z[Item-FREQUENC]);// ��ʾ������Ŀ����
 801467e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014682:	4a27      	ldr	r2, [pc, #156]	; (8014720 <DispMeter+0xe8>)
 8014684:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8014688:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801468c:	f1a3 0213 	sub.w	r2, r3, #19
 8014690:	4613      	mov	r3, r2
 8014692:	005b      	lsls	r3, r3, #1
 8014694:	4413      	add	r3, r2
 8014696:	005b      	lsls	r3, r3, #1
 8014698:	4a22      	ldr	r2, [pc, #136]	; (8014724 <DispMeter+0xec>)
 801469a:	4413      	add	r3, r2
 801469c:	2201      	movs	r2, #1
 801469e:	2103      	movs	r1, #3
 80146a0:	f7f9 fca6 	bl	800dff0 <DispStr>
  Value2Str(NumStr, Val, List[Item].PTR, 3, Mode);
 80146a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80146a8:	4a1f      	ldr	r2, [pc, #124]	; (8014728 <DispMeter+0xf0>)
 80146aa:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80146ae:	793b      	ldrb	r3, [r7, #4]
 80146b0:	9300      	str	r3, [sp, #0]
 80146b2:	2303      	movs	r3, #3
 80146b4:	6839      	ldr	r1, [r7, #0]
 80146b6:	481d      	ldr	r0, [pc, #116]	; (801472c <DispMeter+0xf4>)
 80146b8:	f7fd fb72 	bl	8011da0 <Value2Str>

  if(St)
 80146bc:	797b      	ldrb	r3, [r7, #5]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d01c      	beq.n	80146fc <DispMeter+0xc4>
  {
    DispStr(S_X[Item]+24, LABLE_Y, INV, ":       ");
 80146c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80146c6:	4a16      	ldr	r2, [pc, #88]	; (8014720 <DispMeter+0xe8>)
 80146c8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80146cc:	b29b      	uxth	r3, r3
 80146ce:	3318      	adds	r3, #24
 80146d0:	b29b      	uxth	r3, r3
 80146d2:	b218      	sxth	r0, r3
 80146d4:	4b16      	ldr	r3, [pc, #88]	; (8014730 <DispMeter+0xf8>)
 80146d6:	2201      	movs	r2, #1
 80146d8:	2103      	movs	r1, #3
 80146da:	f7f9 fc89 	bl	800dff0 <DispStr>
    DispStr(S_X[Item]+30, LABLE_Y, INV, (char *)NumStr);   // ��ʾ������ֵ+����
 80146de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80146e2:	4a0f      	ldr	r2, [pc, #60]	; (8014720 <DispMeter+0xe8>)
 80146e4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80146e8:	b29b      	uxth	r3, r3
 80146ea:	331e      	adds	r3, #30
 80146ec:	b29b      	uxth	r3, r3
 80146ee:	b218      	sxth	r0, r3
 80146f0:	4b0e      	ldr	r3, [pc, #56]	; (801472c <DispMeter+0xf4>)
 80146f2:	2201      	movs	r2, #1
 80146f4:	2103      	movs	r1, #3
 80146f6:	f7f9 fc7b 	bl	800dff0 <DispStr>
  }
  else
	  DispStr(S_X[Item]+24, LABLE_Y, INV, ": ----- ");
}
 80146fa:	e00d      	b.n	8014718 <DispMeter+0xe0>
	  DispStr(S_X[Item]+24, LABLE_Y, INV, ": ----- ");
 80146fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014700:	4a07      	ldr	r2, [pc, #28]	; (8014720 <DispMeter+0xe8>)
 8014702:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8014706:	b29b      	uxth	r3, r3
 8014708:	3318      	adds	r3, #24
 801470a:	b29b      	uxth	r3, r3
 801470c:	b218      	sxth	r0, r3
 801470e:	4b09      	ldr	r3, [pc, #36]	; (8014734 <DispMeter+0xfc>)
 8014710:	2201      	movs	r2, #1
 8014712:	2103      	movs	r1, #3
 8014714:	f7f9 fc6c 	bl	800dff0 <DispStr>
}
 8014718:	bf00      	nop
 801471a:	3708      	adds	r7, #8
 801471c:	46bd      	mov	sp, r7
 801471e:	bd80      	pop	{r7, pc}
 8014720:	0800215c 	.word	0x0800215c
 8014724:	08001d18 	.word	0x08001d18
 8014728:	20000298 	.word	0x20000298
 801472c:	20002844 	.word	0x20002844
 8014730:	080009d4 	.word	0x080009d4
 8014734:	080009e0 	.word	0x080009e0

08014738 <DispStatus>:

/*******************************************************************************

*******************************************************************************/
void DispStatus(void)
{
 8014738:	b580      	push	{r7, lr}
 801473a:	b084      	sub	sp, #16
 801473c:	af02      	add	r7, sp, #8
  char* p;
  SetColor(GRY, (Status & STOP) ? RED : TCOLOR[TRG]);
 801473e:	4b20      	ldr	r3, [pc, #128]	; (80147c0 <DispStatus+0x88>)
 8014740:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014744:	b29b      	uxth	r3, r3
 8014746:	f003 0301 	and.w	r3, r3, #1
 801474a:	2b00      	cmp	r3, #0
 801474c:	d102      	bne.n	8014754 <DispStatus+0x1c>
 801474e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8014752:	e000      	b.n	8014756 <DispStatus+0x1e>
 8014754:	231f      	movs	r3, #31
 8014756:	4619      	mov	r1, r3
 8014758:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801475c:	f7f9 fc30 	bl	800dfc0 <SetColor>
  p =(Status & STOP)?(char*)M :(List[SYNCMODE].PTR +(List[SYNCMODE].Val)*6);
 8014760:	4b17      	ldr	r3, [pc, #92]	; (80147c0 <DispStatus+0x88>)
 8014762:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014766:	b29b      	uxth	r3, r3
 8014768:	f003 0301 	and.w	r3, r3, #1
 801476c:	2b00      	cmp	r3, #0
 801476e:	d10b      	bne.n	8014788 <DispStatus+0x50>
 8014770:	4b14      	ldr	r3, [pc, #80]	; (80147c4 <DispStatus+0x8c>)
 8014772:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8014774:	4b13      	ldr	r3, [pc, #76]	; (80147c4 <DispStatus+0x8c>)
 8014776:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 801477a:	4619      	mov	r1, r3
 801477c:	460b      	mov	r3, r1
 801477e:	005b      	lsls	r3, r3, #1
 8014780:	440b      	add	r3, r1
 8014782:	005b      	lsls	r3, r3, #1
 8014784:	4413      	add	r3, r2
 8014786:	e000      	b.n	801478a <DispStatus+0x52>
 8014788:	4b0f      	ldr	r3, [pc, #60]	; (80147c8 <DispStatus+0x90>)
 801478a:	607b      	str	r3, [r7, #4]
  Draw_Circle_D(INV, S_X[SYNCMODE]-3, TITLE_Y_POS, 11, 1, 6*4);
 801478c:	f240 1321 	movw	r3, #289	; 0x121
 8014790:	b29b      	uxth	r3, r3
 8014792:	3b03      	subs	r3, #3
 8014794:	b29b      	uxth	r3, r3
 8014796:	b219      	sxth	r1, r3
 8014798:	2318      	movs	r3, #24
 801479a:	9301      	str	r3, [sp, #4]
 801479c:	2301      	movs	r3, #1
 801479e:	9300      	str	r3, [sp, #0]
 80147a0:	230b      	movs	r3, #11
 80147a2:	22e1      	movs	r2, #225	; 0xe1
 80147a4:	2001      	movs	r0, #1
 80147a6:	f7f9 fcf9 	bl	800e19c <Draw_Circle_D>
  DispStr(S_X[SYNCMODE], TITLE_Y_POS, INV, (char *)p);
 80147aa:	f240 1021 	movw	r0, #289	; 0x121
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	2201      	movs	r2, #1
 80147b2:	21e1      	movs	r1, #225	; 0xe1
 80147b4:	f7f9 fc1c 	bl	800dff0 <DispStr>
}
 80147b8:	bf00      	nop
 80147ba:	3708      	adds	r7, #8
 80147bc:	46bd      	mov	sp, r7
 80147be:	bd80      	pop	{r7, pc}
 80147c0:	200007a8 	.word	0x200007a8
 80147c4:	20000298 	.word	0x20000298
 80147c8:	08001cb4 	.word	0x08001cb4

080147cc <Update_Windows>:

/*******************************************************************************
���»���������λ��
*******************************************************************************/
void Update_Windows(void)
{
 80147cc:	b580      	push	{r7, lr}
 80147ce:	b084      	sub	sp, #16
 80147d0:	af00      	add	r7, sp, #0
  short  x0,x,y,i,j,Width;
  short  Depth =  DEPTH[List[SMPL_DPTH].Val];
 80147d2:	4b6a      	ldr	r3, [pc, #424]	; (801497c <Update_Windows+0x1b0>)
 80147d4:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 80147d8:	461a      	mov	r2, r3
 80147da:	4b69      	ldr	r3, [pc, #420]	; (8014980 <Update_Windows+0x1b4>)
 80147dc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80147e0:	80fb      	strh	r3, [r7, #6]
  Width =(300*300)/Depth;
 80147e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80147e6:	4a67      	ldr	r2, [pc, #412]	; (8014984 <Update_Windows+0x1b8>)
 80147e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80147ec:	80bb      	strh	r3, [r7, #4]
  if(Current == XN &&(PopType & LIST_POP) )
 80147ee:	4b66      	ldr	r3, [pc, #408]	; (8014988 <Update_Windows+0x1bc>)
 80147f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80147f4:	2b01      	cmp	r3, #1
 80147f6:	f040 80a9 	bne.w	801494c <Update_Windows+0x180>
 80147fa:	4b64      	ldr	r3, [pc, #400]	; (801498c <Update_Windows+0x1c0>)
 80147fc:	781b      	ldrb	r3, [r3, #0]
 80147fe:	f003 0302 	and.w	r3, r3, #2
 8014802:	2b00      	cmp	r3, #0
 8014804:	f000 80a2 	beq.w	801494c <Update_Windows+0x180>
  {
      Windows_Pop = 1;
 8014808:	4b61      	ldr	r3, [pc, #388]	; (8014990 <Update_Windows+0x1c4>)
 801480a:	2201      	movs	r2, #1
 801480c:	701a      	strb	r2, [r3, #0]
      x0=2+(List[VIEWPOSI].Val)*300/Depth;
 801480e:	4b5b      	ldr	r3, [pc, #364]	; (801497c <Update_Windows+0x1b0>)
 8014810:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8014814:	461a      	mov	r2, r3
 8014816:	f44f 7396 	mov.w	r3, #300	; 0x12c
 801481a:	fb03 f202 	mul.w	r2, r3, r2
 801481e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014822:	fb92 f3f3 	sdiv	r3, r2, r3
 8014826:	b29b      	uxth	r3, r3
 8014828:	3302      	adds	r3, #2
 801482a:	b29b      	uxth	r3, r3
 801482c:	81fb      	strh	r3, [r7, #14]
      x=2;
 801482e:	2302      	movs	r3, #2
 8014830:	81bb      	strh	r3, [r7, #12]
      y=15;
 8014832:	230f      	movs	r3, #15
 8014834:	807b      	strh	r3, [r7, #2]
      for(i=0;i<300;i++){    //��������
 8014836:	2300      	movs	r3, #0
 8014838:	817b      	strh	r3, [r7, #10]
 801483a:	e029      	b.n	8014890 <Update_Windows+0xc4>
        LCD_Set_Posi(x++, y);
 801483c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8014840:	b293      	uxth	r3, r2
 8014842:	3301      	adds	r3, #1
 8014844:	b29b      	uxth	r3, r3
 8014846:	81bb      	strh	r3, [r7, #12]
 8014848:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801484c:	4619      	mov	r1, r3
 801484e:	4610      	mov	r0, r2
 8014850:	f7fd fe66 	bl	8012520 <LCD_Set_Posi>
        LCD_Set_Pixel(DAR);
 8014854:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014858:	f7fd feb0 	bl	80125bc <LCD_Set_Pixel>
        for(j=0; j<2; j++)LCD_Set_Pixel(RED);
 801485c:	2300      	movs	r3, #0
 801485e:	813b      	strh	r3, [r7, #8]
 8014860:	e008      	b.n	8014874 <Update_Windows+0xa8>
 8014862:	201f      	movs	r0, #31
 8014864:	f7fd feaa 	bl	80125bc <LCD_Set_Pixel>
 8014868:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801486c:	b29b      	uxth	r3, r3
 801486e:	3301      	adds	r3, #1
 8014870:	b29b      	uxth	r3, r3
 8014872:	813b      	strh	r3, [r7, #8]
 8014874:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014878:	2b01      	cmp	r3, #1
 801487a:	ddf2      	ble.n	8014862 <Update_Windows+0x96>
        LCD_Set_Pixel(DAR);
 801487c:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014880:	f7fd fe9c 	bl	80125bc <LCD_Set_Pixel>
      for(i=0;i<300;i++){    //��������
 8014884:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014888:	b29b      	uxth	r3, r3
 801488a:	3301      	adds	r3, #1
 801488c:	b29b      	uxth	r3, r3
 801488e:	817b      	strh	r3, [r7, #10]
 8014890:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014894:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014898:	dbd0      	blt.n	801483c <Update_Windows+0x70>
      }
      if(Current == XN && (MenuNow[XN]==SMPL_DPTH ))
 801489a:	4b3b      	ldr	r3, [pc, #236]	; (8014988 <Update_Windows+0x1bc>)
 801489c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80148a0:	2b01      	cmp	r3, #1
 80148a2:	d122      	bne.n	80148ea <Update_Windows+0x11e>
 80148a4:	4b3b      	ldr	r3, [pc, #236]	; (8014994 <Update_Windows+0x1c8>)
 80148a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80148aa:	2b09      	cmp	r3, #9
 80148ac:	d11d      	bne.n	80148ea <Update_Windows+0x11e>
      {  //Depthѡ��
        if(Key_Buffer == KEYCODE_RIGHT || Key_Buffer == KEYCODE_LEFT)
 80148ae:	4b3a      	ldr	r3, [pc, #232]	; (8014998 <Update_Windows+0x1cc>)
 80148b0:	781b      	ldrb	r3, [r3, #0]
 80148b2:	b2db      	uxtb	r3, r3
 80148b4:	2b06      	cmp	r3, #6
 80148b6:	d004      	beq.n	80148c2 <Update_Windows+0xf6>
 80148b8:	4b37      	ldr	r3, [pc, #220]	; (8014998 <Update_Windows+0x1cc>)
 80148ba:	781b      	ldrb	r3, [r3, #0]
 80148bc:	b2db      	uxtb	r3, r3
 80148be:	2b05      	cmp	r3, #5
 80148c0:	d113      	bne.n	80148ea <Update_Windows+0x11e>
        {  //ѡ���б䶯ʱ�ı�Ԥ����λ��
          List[VIEWPOSI].Val= 0;
 80148c2:	4b2e      	ldr	r3, [pc, #184]	; (801497c <Update_Windows+0x1b0>)
 80148c4:	2200      	movs	r2, #0
 80148c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
          x0=2+(List[VIEWPOSI].Val)*300/Depth;
 80148ca:	4b2c      	ldr	r3, [pc, #176]	; (801497c <Update_Windows+0x1b0>)
 80148cc:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80148d0:	461a      	mov	r2, r3
 80148d2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80148d6:	fb03 f202 	mul.w	r2, r3, r2
 80148da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80148de:	fb92 f3f3 	sdiv	r3, r2, r3
 80148e2:	b29b      	uxth	r3, r3
 80148e4:	3302      	adds	r3, #2
 80148e6:	b29b      	uxth	r3, r3
 80148e8:	81fb      	strh	r3, [r7, #14]
        }
      }
      x = x0;               //��ǰ�����ڻ�����λ��
 80148ea:	89fb      	ldrh	r3, [r7, #14]
 80148ec:	81bb      	strh	r3, [r7, #12]
      y=15;
 80148ee:	230f      	movs	r3, #15
 80148f0:	807b      	strh	r3, [r7, #2]
      for(i=0;i<Width;i++){
 80148f2:	2300      	movs	r3, #0
 80148f4:	817b      	strh	r3, [r7, #10]
 80148f6:	e022      	b.n	801493e <Update_Windows+0x172>
        LCD_Set_Posi(x++, y);
 80148f8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80148fc:	b293      	uxth	r3, r2
 80148fe:	3301      	adds	r3, #1
 8014900:	b29b      	uxth	r3, r3
 8014902:	81bb      	strh	r3, [r7, #12]
 8014904:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014908:	4619      	mov	r1, r3
 801490a:	4610      	mov	r0, r2
 801490c:	f7fd fe08 	bl	8012520 <LCD_Set_Posi>
        for(j=0; j<4; j++)LCD_Set_Pixel(GRN);
 8014910:	2300      	movs	r3, #0
 8014912:	813b      	strh	r3, [r7, #8]
 8014914:	e009      	b.n	801492a <Update_Windows+0x15e>
 8014916:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 801491a:	f7fd fe4f 	bl	80125bc <LCD_Set_Pixel>
 801491e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014922:	b29b      	uxth	r3, r3
 8014924:	3301      	adds	r3, #1
 8014926:	b29b      	uxth	r3, r3
 8014928:	813b      	strh	r3, [r7, #8]
 801492a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801492e:	2b03      	cmp	r3, #3
 8014930:	ddf1      	ble.n	8014916 <Update_Windows+0x14a>
      for(i=0;i<Width;i++){
 8014932:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014936:	b29b      	uxth	r3, r3
 8014938:	3301      	adds	r3, #1
 801493a:	b29b      	uxth	r3, r3
 801493c:	817b      	strh	r3, [r7, #10]
 801493e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8014942:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014946:	429a      	cmp	r2, r3
 8014948:	dbd6      	blt.n	80148f8 <Update_Windows+0x12c>
  if(Current == XN &&(PopType & LIST_POP) )
 801494a:	e012      	b.n	8014972 <Update_Windows+0x1a6>
      }
  }
  else if(Current == XN &&!(PopType & LIST_POP))
 801494c:	4b0e      	ldr	r3, [pc, #56]	; (8014988 <Update_Windows+0x1bc>)
 801494e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014952:	2b01      	cmp	r3, #1
 8014954:	d10d      	bne.n	8014972 <Update_Windows+0x1a6>
 8014956:	4b0d      	ldr	r3, [pc, #52]	; (801498c <Update_Windows+0x1c0>)
 8014958:	781b      	ldrb	r3, [r3, #0]
 801495a:	f003 0302 	and.w	r3, r3, #2
 801495e:	2b00      	cmp	r3, #0
 8014960:	d107      	bne.n	8014972 <Update_Windows+0x1a6>
  {
    Windows_Pop = 0;
 8014962:	4b0b      	ldr	r3, [pc, #44]	; (8014990 <Update_Windows+0x1c4>)
 8014964:	2200      	movs	r2, #0
 8014966:	701a      	strb	r2, [r3, #0]
    Clr_WavePosi(DAR);
 8014968:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801496c:	f000 f816 	bl	801499c <Clr_WavePosi>
  }
}
 8014970:	e7ff      	b.n	8014972 <Update_Windows+0x1a6>
 8014972:	bf00      	nop
 8014974:	3710      	adds	r7, #16
 8014976:	46bd      	mov	sp, r7
 8014978:	bd80      	pop	{r7, pc}
 801497a:	bf00      	nop
 801497c:	20000298 	.word	0x20000298
 8014980:	08002270 	.word	0x08002270
 8014984:	00015f90 	.word	0x00015f90
 8014988:	200007a6 	.word	0x200007a6
 801498c:	20000794 	.word	0x20000794
 8014990:	200007ae 	.word	0x200007ae
 8014994:	20000538 	.word	0x20000538
 8014998:	2000077d 	.word	0x2000077d

0801499c <Clr_WavePosi>:

/*******************************************************************************
 void Clr_WavePosi(u16 Col)  �������λ����ʾ
*******************************************************************************/
void Clr_WavePosi(short Col)
{
 801499c:	b580      	push	{r7, lr}
 801499e:	b084      	sub	sp, #16
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	4603      	mov	r3, r0
 80149a4:	80fb      	strh	r3, [r7, #6]
  short x,y,i,j;
  x=2;
 80149a6:	2302      	movs	r3, #2
 80149a8:	81fb      	strh	r3, [r7, #14]
  y=14;
 80149aa:	230e      	movs	r3, #14
 80149ac:	813b      	strh	r3, [r7, #8]
  for(i=0;i<300;i++)
 80149ae:	2300      	movs	r3, #0
 80149b0:	81bb      	strh	r3, [r7, #12]
 80149b2:	e022      	b.n	80149fa <Clr_WavePosi+0x5e>
  {
    LCD_Set_Posi(x++, y);
 80149b4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80149b8:	b293      	uxth	r3, r2
 80149ba:	3301      	adds	r3, #1
 80149bc:	b29b      	uxth	r3, r3
 80149be:	81fb      	strh	r3, [r7, #14]
 80149c0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80149c4:	4619      	mov	r1, r3
 80149c6:	4610      	mov	r0, r2
 80149c8:	f7fd fdaa 	bl	8012520 <LCD_Set_Posi>
    for(j=0; j<6; j++)
 80149cc:	2300      	movs	r3, #0
 80149ce:	817b      	strh	r3, [r7, #10]
 80149d0:	e009      	b.n	80149e6 <Clr_WavePosi+0x4a>
    	LCD_Set_Pixel(Col);
 80149d2:	88fb      	ldrh	r3, [r7, #6]
 80149d4:	4618      	mov	r0, r3
 80149d6:	f7fd fdf1 	bl	80125bc <LCD_Set_Pixel>
    for(j=0; j<6; j++)
 80149da:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80149de:	b29b      	uxth	r3, r3
 80149e0:	3301      	adds	r3, #1
 80149e2:	b29b      	uxth	r3, r3
 80149e4:	817b      	strh	r3, [r7, #10]
 80149e6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80149ea:	2b05      	cmp	r3, #5
 80149ec:	ddf1      	ble.n	80149d2 <Clr_WavePosi+0x36>
  for(i=0;i<300;i++)
 80149ee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80149f2:	b29b      	uxth	r3, r3
 80149f4:	3301      	adds	r3, #1
 80149f6:	b29b      	uxth	r3, r3
 80149f8:	81bb      	strh	r3, [r7, #12]
 80149fa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80149fe:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014a02:	dbd7      	blt.n	80149b4 <Clr_WavePosi+0x18>
  }
}
 8014a04:	bf00      	nop
 8014a06:	bf00      	nop
 8014a08:	3710      	adds	r7, #16
 8014a0a:	46bd      	mov	sp, r7
 8014a0c:	bd80      	pop	{r7, pc}
	...

08014a10 <DispFreq>:

/*******************************************************************************

*******************************************************************************/
void DispFreq(char St, char Mode, int Val)
{
 8014a10:	b580      	push	{r7, lr}
 8014a12:	b084      	sub	sp, #16
 8014a14:	af02      	add	r7, sp, #8
 8014a16:	4603      	mov	r3, r0
 8014a18:	603a      	str	r2, [r7, #0]
 8014a1a:	71fb      	strb	r3, [r7, #7]
 8014a1c:	460b      	mov	r3, r1
 8014a1e:	71bb      	strb	r3, [r7, #6]
  SetColor(GRY, TCOLOR[ME]);
 8014a20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014a24:	4619      	mov	r1, r3
 8014a26:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014a2a:	f7f9 fac9 	bl	800dfc0 <SetColor>

  Draw_Circle_D(INV, S_X[FREQUENC]-6*15-3+4, LABLE_Y, 11, 0, 6*12);
 8014a2e:	23a2      	movs	r3, #162	; 0xa2
 8014a30:	b29b      	uxth	r3, r3
 8014a32:	3b59      	subs	r3, #89	; 0x59
 8014a34:	b29b      	uxth	r3, r3
 8014a36:	b219      	sxth	r1, r3
 8014a38:	2348      	movs	r3, #72	; 0x48
 8014a3a:	9301      	str	r3, [sp, #4]
 8014a3c:	2300      	movs	r3, #0
 8014a3e:	9300      	str	r3, [sp, #0]
 8014a40:	230b      	movs	r3, #11
 8014a42:	2203      	movs	r2, #3
 8014a44:	2001      	movs	r0, #1
 8014a46:	f7f9 fba9 	bl	800e19c <Draw_Circle_D>
  DispStr(S_X[FREQUENC]-6*15+4, LABLE_Y, INV, (char*)&Z[0]);// ��ʾ������Ŀ����
 8014a4a:	23a2      	movs	r3, #162	; 0xa2
 8014a4c:	b29b      	uxth	r3, r3
 8014a4e:	3b56      	subs	r3, #86	; 0x56
 8014a50:	b29b      	uxth	r3, r3
 8014a52:	b218      	sxth	r0, r3
 8014a54:	4b1a      	ldr	r3, [pc, #104]	; (8014ac0 <DispFreq+0xb0>)
 8014a56:	2201      	movs	r2, #1
 8014a58:	2103      	movs	r1, #3
 8014a5a:	f7f9 fac9 	bl	800dff0 <DispStr>
  Value2Str(NumStr, Val, List[FREQUENC].PTR, 3, Mode);
 8014a5e:	4b19      	ldr	r3, [pc, #100]	; (8014ac4 <DispFreq+0xb4>)
 8014a60:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8014a64:	79bb      	ldrb	r3, [r7, #6]
 8014a66:	9300      	str	r3, [sp, #0]
 8014a68:	2303      	movs	r3, #3
 8014a6a:	6839      	ldr	r1, [r7, #0]
 8014a6c:	4816      	ldr	r0, [pc, #88]	; (8014ac8 <DispFreq+0xb8>)
 8014a6e:	f7fd f997 	bl	8011da0 <Value2Str>

  if(St) {
 8014a72:	79fb      	ldrb	r3, [r7, #7]
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d014      	beq.n	8014aa2 <DispFreq+0x92>
    DispStr(24+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, ":       ");
 8014a78:	23a2      	movs	r3, #162	; 0xa2
 8014a7a:	b29b      	uxth	r3, r3
 8014a7c:	3b3e      	subs	r3, #62	; 0x3e
 8014a7e:	b29b      	uxth	r3, r3
 8014a80:	b218      	sxth	r0, r3
 8014a82:	4b12      	ldr	r3, [pc, #72]	; (8014acc <DispFreq+0xbc>)
 8014a84:	2201      	movs	r2, #1
 8014a86:	2103      	movs	r1, #3
 8014a88:	f7f9 fab2 	bl	800dff0 <DispStr>
    DispStr(30+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, (char *)NumStr);   // ��ʾ������ֵ+����
 8014a8c:	23a2      	movs	r3, #162	; 0xa2
 8014a8e:	b29b      	uxth	r3, r3
 8014a90:	3b38      	subs	r3, #56	; 0x38
 8014a92:	b29b      	uxth	r3, r3
 8014a94:	b218      	sxth	r0, r3
 8014a96:	4b0c      	ldr	r3, [pc, #48]	; (8014ac8 <DispFreq+0xb8>)
 8014a98:	2201      	movs	r2, #1
 8014a9a:	2103      	movs	r1, #3
 8014a9c:	f7f9 faa8 	bl	800dff0 <DispStr>
  }
  else   DispStr(24+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, ": ---- ");
}
 8014aa0:	e009      	b.n	8014ab6 <DispFreq+0xa6>
  else   DispStr(24+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, ": ---- ");
 8014aa2:	23a2      	movs	r3, #162	; 0xa2
 8014aa4:	b29b      	uxth	r3, r3
 8014aa6:	3b3e      	subs	r3, #62	; 0x3e
 8014aa8:	b29b      	uxth	r3, r3
 8014aaa:	b218      	sxth	r0, r3
 8014aac:	4b08      	ldr	r3, [pc, #32]	; (8014ad0 <DispFreq+0xc0>)
 8014aae:	2201      	movs	r2, #1
 8014ab0:	2103      	movs	r1, #3
 8014ab2:	f7f9 fa9d 	bl	800dff0 <DispStr>
}
 8014ab6:	bf00      	nop
 8014ab8:	3708      	adds	r7, #8
 8014aba:	46bd      	mov	sp, r7
 8014abc:	bd80      	pop	{r7, pc}
 8014abe:	bf00      	nop
 8014ac0:	08001d18 	.word	0x08001d18
 8014ac4:	20000298 	.word	0x20000298
 8014ac8:	20002844 	.word	0x20002844
 8014acc:	080009d4 	.word	0x080009d4
 8014ad0:	080009ec 	.word	0x080009ec

08014ad4 <Show_List>:

/*******************************************************************************
 Show_List: ���ò˵���λ�á��ߴ硢��ɫ����ʾ����
*******************************************************************************/
void Show_List(void)
{
 8014ad4:	b580      	push	{r7, lr}
 8014ad6:	b088      	sub	sp, #32
 8014ad8:	af02      	add	r7, sp, #8
  short i, Ny0, Nx0, CurrentMax = MU_BEGN[Current]+ M_ITEMS[Current];
 8014ada:	4b59      	ldr	r3, [pc, #356]	; (8014c40 <Show_List+0x16c>)
 8014adc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014ae0:	461a      	mov	r2, r3
 8014ae2:	4b58      	ldr	r3, [pc, #352]	; (8014c44 <Show_List+0x170>)
 8014ae4:	5c9b      	ldrb	r3, [r3, r2]
 8014ae6:	b29a      	uxth	r2, r3
 8014ae8:	4b55      	ldr	r3, [pc, #340]	; (8014c40 <Show_List+0x16c>)
 8014aea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014aee:	4619      	mov	r1, r3
 8014af0:	4b55      	ldr	r3, [pc, #340]	; (8014c48 <Show_List+0x174>)
 8014af2:	5c5b      	ldrb	r3, [r3, r1]
 8014af4:	b29b      	uxth	r3, r3
 8014af6:	4413      	add	r3, r2
 8014af8:	b29b      	uxth	r3, r3
 8014afa:	827b      	strh	r3, [r7, #18]
  char  Flag = 0;
 8014afc:	2300      	movs	r3, #0
 8014afe:	757b      	strb	r3, [r7, #21]
  char  str[12];
  ParamTab[BXx1]= BLOCK_X[Current];
 8014b00:	4b4f      	ldr	r3, [pc, #316]	; (8014c40 <Show_List+0x16c>)
 8014b02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014b06:	461a      	mov	r2, r3
 8014b08:	4b50      	ldr	r3, [pc, #320]	; (8014c4c <Show_List+0x178>)
 8014b0a:	5c9b      	ldrb	r3, [r3, r2]
 8014b0c:	b21a      	sxth	r2, r3
 8014b0e:	4b50      	ldr	r3, [pc, #320]	; (8014c50 <Show_List+0x17c>)
 8014b10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  ParamTab[BYx2]= BLOCK_Y[Current]*2;
 8014b14:	4b4a      	ldr	r3, [pc, #296]	; (8014c40 <Show_List+0x16c>)
 8014b16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014b1a:	461a      	mov	r2, r3
 8014b1c:	4b4d      	ldr	r3, [pc, #308]	; (8014c54 <Show_List+0x180>)
 8014b1e:	5c9b      	ldrb	r3, [r3, r2]
 8014b20:	b29b      	uxth	r3, r3
 8014b22:	005b      	lsls	r3, r3, #1
 8014b24:	b29b      	uxth	r3, r3
 8014b26:	b21a      	sxth	r2, r3
 8014b28:	4b49      	ldr	r3, [pc, #292]	; (8014c50 <Show_List+0x17c>)
 8014b2a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  ParamTab[WXx1]= BLOCK_W[Current];
 8014b2e:	4b44      	ldr	r3, [pc, #272]	; (8014c40 <Show_List+0x16c>)
 8014b30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014b34:	461a      	mov	r2, r3
 8014b36:	4b48      	ldr	r3, [pc, #288]	; (8014c58 <Show_List+0x184>)
 8014b38:	5c9b      	ldrb	r3, [r3, r2]
 8014b3a:	b21a      	sxth	r2, r3
 8014b3c:	4b44      	ldr	r3, [pc, #272]	; (8014c50 <Show_List+0x17c>)
 8014b3e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  ParamTab[HYx2]=(M_ITEMS[Current]+1)*32;
 8014b42:	4b3f      	ldr	r3, [pc, #252]	; (8014c40 <Show_List+0x16c>)
 8014b44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014b48:	461a      	mov	r2, r3
 8014b4a:	4b3f      	ldr	r3, [pc, #252]	; (8014c48 <Show_List+0x174>)
 8014b4c:	5c9b      	ldrb	r3, [r3, r2]
 8014b4e:	3301      	adds	r3, #1
 8014b50:	b29b      	uxth	r3, r3
 8014b52:	015b      	lsls	r3, r3, #5
 8014b54:	b29b      	uxth	r3, r3
 8014b56:	b21a      	sxth	r2, r3
 8014b58:	4b3d      	ldr	r3, [pc, #244]	; (8014c50 <Show_List+0x17c>)
 8014b5a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  PopColor(WHT, DAR);
 8014b5e:	f643 11e7 	movw	r1, #14823	; 0x39e7
 8014b62:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014b66:	f7f9 ff95 	bl	800ea94 <PopColor>
  Buil_Pop();
 8014b6a:	f7f9 fe85 	bl	800e878 <Buil_Pop>
  for(i=MU_BEGN[Current]; i<CurrentMax; i++){
 8014b6e:	4b34      	ldr	r3, [pc, #208]	; (8014c40 <Show_List+0x16c>)
 8014b70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014b74:	461a      	mov	r2, r3
 8014b76:	4b33      	ldr	r3, [pc, #204]	; (8014c44 <Show_List+0x170>)
 8014b78:	5c9b      	ldrb	r3, [r3, r2]
 8014b7a:	82fb      	strh	r3, [r7, #22]
 8014b7c:	e054      	b.n	8014c28 <Show_List+0x154>
    if(i == MenuNow[Current]) {
 8014b7e:	4b30      	ldr	r3, [pc, #192]	; (8014c40 <Show_List+0x16c>)
 8014b80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014b84:	461a      	mov	r2, r3
 8014b86:	4b35      	ldr	r3, [pc, #212]	; (8014c5c <Show_List+0x188>)
 8014b88:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8014b8c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014b90:	429a      	cmp	r2, r3
 8014b92:	d102      	bne.n	8014b9a <Show_List+0xc6>
      Flag = INV;
 8014b94:	2301      	movs	r3, #1
 8014b96:	757b      	strb	r3, [r7, #21]
 8014b98:	e007      	b.n	8014baa <Show_List+0xd6>
    }
    else                      {
      PopColor(WHT, DAR);
 8014b9a:	f643 11e7 	movw	r1, #14823	; 0x39e7
 8014b9e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014ba2:	f7f9 ff77 	bl	800ea94 <PopColor>
      Flag = PRN;
 8014ba6:	2300      	movs	r3, #0
 8014ba8:	757b      	strb	r3, [r7, #21]
    }
    Ny0 = ((CurrentMax - i)*17 - 10);
 8014baa:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8014bae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014bb2:	1ad3      	subs	r3, r2, r3
 8014bb4:	b29b      	uxth	r3, r3
 8014bb6:	461a      	mov	r2, r3
 8014bb8:	0112      	lsls	r2, r2, #4
 8014bba:	4413      	add	r3, r2
 8014bbc:	b29b      	uxth	r3, r3
 8014bbe:	3b0a      	subs	r3, #10
 8014bc0:	b29b      	uxth	r3, r3
 8014bc2:	823b      	strh	r3, [r7, #16]
    Nx0 = N_X ;
 8014bc4:	2304      	movs	r3, #4
 8014bc6:	81fb      	strh	r3, [r7, #14]
    memset(str,0,12);
 8014bc8:	463b      	mov	r3, r7
 8014bca:	220c      	movs	r2, #12
 8014bcc:	2100      	movs	r1, #0
 8014bce:	4618      	mov	r0, r3
 8014bd0:	f00e fa4a 	bl	8023068 <memset>
    memcpy(str,&ESTR[i],10);
 8014bd4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014bd8:	4613      	mov	r3, r2
 8014bda:	009b      	lsls	r3, r3, #2
 8014bdc:	4413      	add	r3, r2
 8014bde:	005b      	lsls	r3, r3, #1
 8014be0:	4a1f      	ldr	r2, [pc, #124]	; (8014c60 <Show_List+0x18c>)
 8014be2:	1899      	adds	r1, r3, r2
 8014be4:	463b      	mov	r3, r7
 8014be6:	220a      	movs	r2, #10
 8014be8:	4618      	mov	r0, r3
 8014bea:	f00e fa2f 	bl	802304c <memcpy>
    NoteSTR(Nx0, Ny0, Flag, (char *)str);
 8014bee:	463b      	mov	r3, r7
 8014bf0:	7d7a      	ldrb	r2, [r7, #21]
 8014bf2:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8014bf6:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8014bfa:	f7fa f89b 	bl	800ed34 <NoteSTR>
    Note_4Point(PRN, Nx0, Ny0, strlen((char*)str), Font6x8_H);
 8014bfe:	463b      	mov	r3, r7
 8014c00:	4618      	mov	r0, r3
 8014c02:	f7f7 fa1d 	bl	800c040 <strlen>
 8014c06:	4603      	mov	r3, r0
 8014c08:	b2db      	uxtb	r3, r3
 8014c0a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8014c0e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8014c12:	200a      	movs	r0, #10
 8014c14:	9000      	str	r0, [sp, #0]
 8014c16:	2000      	movs	r0, #0
 8014c18:	f7fa f932 	bl	800ee80 <Note_4Point>
  for(i=MU_BEGN[Current]; i<CurrentMax; i++){
 8014c1c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014c20:	b29b      	uxth	r3, r3
 8014c22:	3301      	adds	r3, #1
 8014c24:	b29b      	uxth	r3, r3
 8014c26:	82fb      	strh	r3, [r7, #22]
 8014c28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014c2c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014c30:	429a      	cmp	r2, r3
 8014c32:	dba4      	blt.n	8014b7e <Show_List+0xaa>
  }
  List_Pop();
 8014c34:	f7f9 ff5e 	bl	800eaf4 <List_Pop>
}
 8014c38:	bf00      	nop
 8014c3a:	3718      	adds	r7, #24
 8014c3c:	46bd      	mov	sp, r7
 8014c3e:	bd80      	pop	{r7, pc}
 8014c40:	200007a6 	.word	0x200007a6
 8014c44:	08001f40 	.word	0x08001f40
 8014c48:	08001f48 	.word	0x08001f48
 8014c4c:	08002144 	.word	0x08002144
 8014c50:	20000140 	.word	0x20000140
 8014c54:	0800214c 	.word	0x0800214c
 8014c58:	08002154 	.word	0x08002154
 8014c5c:	20000538 	.word	0x20000538
 8014c60:	08001f50 	.word	0x08001f50

08014c64 <DispFileInfo>:

/*******************************************************************************

*******************************************************************************/
void DispFileInfo(char Info)
{
 8014c64:	b580      	push	{r7, lr}
 8014c66:	b084      	sub	sp, #16
 8014c68:	af02      	add	r7, sp, #8
 8014c6a:	4603      	mov	r3, r0
 8014c6c:	71fb      	strb	r3, [r7, #7]
  SetColor(DAR, BLU);
 8014c6e:	f64f 4110 	movw	r1, #64528	; 0xfc10
 8014c72:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014c76:	f7f9 f9a3 	bl	800dfc0 <SetColor>
  Draw_Circle_D(INV, S_X[SAVE_BMP]-3, LABLE_Y, 11, 0, 6*11);
 8014c7a:	23f8      	movs	r3, #248	; 0xf8
 8014c7c:	b29b      	uxth	r3, r3
 8014c7e:	3b03      	subs	r3, #3
 8014c80:	b29b      	uxth	r3, r3
 8014c82:	b219      	sxth	r1, r3
 8014c84:	2342      	movs	r3, #66	; 0x42
 8014c86:	9301      	str	r3, [sp, #4]
 8014c88:	2300      	movs	r3, #0
 8014c8a:	9300      	str	r3, [sp, #0]
 8014c8c:	230b      	movs	r3, #11
 8014c8e:	2203      	movs	r2, #3
 8014c90:	2001      	movs	r0, #1
 8014c92:	f7f9 fa83 	bl	800e19c <Draw_Circle_D>
  DispStr(S_X[SAVE_BMP], LABLE_Y, INV, (char *)(&FnNote+14*Info));
 8014c96:	20f8      	movs	r0, #248	; 0xf8
 8014c98:	79fb      	ldrb	r3, [r7, #7]
 8014c9a:	f44f 7275 	mov.w	r2, #980	; 0x3d4
 8014c9e:	fb02 f303 	mul.w	r3, r2, r3
 8014ca2:	4a07      	ldr	r2, [pc, #28]	; (8014cc0 <DispFileInfo+0x5c>)
 8014ca4:	4413      	add	r3, r2
 8014ca6:	2201      	movs	r2, #1
 8014ca8:	2103      	movs	r1, #3
 8014caa:	f7f9 f9a1 	bl	800dff0 <DispStr>
  HAL_Delay(2000);
 8014cae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8014cb2:	f003 fda5 	bl	8018800 <HAL_Delay>

}
 8014cb6:	bf00      	nop
 8014cb8:	3708      	adds	r7, #8
 8014cba:	46bd      	mov	sp, r7
 8014cbc:	bd80      	pop	{r7, pc}
 8014cbe:	bf00      	nop
 8014cc0:	080022f0 	.word	0x080022f0

08014cc4 <DispBMPInfo>:

/*******************************************************************************

*******************************************************************************/
void DispBMPInfo(void)
{
 8014cc4:	b580      	push	{r7, lr}
 8014cc6:	b082      	sub	sp, #8
 8014cc8:	af02      	add	r7, sp, #8
  SetColor(GRY, TCOLOR[FN]);
 8014cca:	f64f 4310 	movw	r3, #64528	; 0xfc10
 8014cce:	4619      	mov	r1, r3
 8014cd0:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014cd4:	f7f9 f974 	bl	800dfc0 <SetColor>
  u8ToDec3(NumStr, List[SAVE_BMP].Val);
 8014cd8:	4b1a      	ldr	r3, [pc, #104]	; (8014d44 <DispBMPInfo+0x80>)
 8014cda:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 8014cde:	b2db      	uxtb	r3, r3
 8014ce0:	4619      	mov	r1, r3
 8014ce2:	4819      	ldr	r0, [pc, #100]	; (8014d48 <DispBMPInfo+0x84>)
 8014ce4:	f7fc fff4 	bl	8011cd0 <u8ToDec3>
  Draw_Circle_D(INV, S_X[SAVE_BMP]-3, LABLE_Y, 11, 0, 6*11);
 8014ce8:	23f8      	movs	r3, #248	; 0xf8
 8014cea:	b29b      	uxth	r3, r3
 8014cec:	3b03      	subs	r3, #3
 8014cee:	b29b      	uxth	r3, r3
 8014cf0:	b219      	sxth	r1, r3
 8014cf2:	2342      	movs	r3, #66	; 0x42
 8014cf4:	9301      	str	r3, [sp, #4]
 8014cf6:	2300      	movs	r3, #0
 8014cf8:	9300      	str	r3, [sp, #0]
 8014cfa:	230b      	movs	r3, #11
 8014cfc:	2203      	movs	r2, #3
 8014cfe:	2001      	movs	r0, #1
 8014d00:	f7f9 fa4c 	bl	800e19c <Draw_Circle_D>
  DispStr(S_X[SAVE_BMP],    LABLE_Y, INV, ("Save"));//0513
 8014d04:	20f8      	movs	r0, #248	; 0xf8
 8014d06:	4b11      	ldr	r3, [pc, #68]	; (8014d4c <DispBMPInfo+0x88>)
 8014d08:	2201      	movs	r2, #1
 8014d0a:	2103      	movs	r1, #3
 8014d0c:	f7f9 f970 	bl	800dff0 <DispStr>
  DispStr(S_X[SAVE_BMP]+24, LABLE_Y, INV, (char *)NumStr);
 8014d10:	23f8      	movs	r3, #248	; 0xf8
 8014d12:	b29b      	uxth	r3, r3
 8014d14:	3318      	adds	r3, #24
 8014d16:	b29b      	uxth	r3, r3
 8014d18:	b218      	sxth	r0, r3
 8014d1a:	4b0b      	ldr	r3, [pc, #44]	; (8014d48 <DispBMPInfo+0x84>)
 8014d1c:	2201      	movs	r2, #1
 8014d1e:	2103      	movs	r1, #3
 8014d20:	f7f9 f966 	bl	800dff0 <DispStr>
  DispStr(S_X[SAVE_BMP]+42, LABLE_Y, INV, (List[SAVE_BMP].PTR ));
 8014d24:	23f8      	movs	r3, #248	; 0xf8
 8014d26:	b29b      	uxth	r3, r3
 8014d28:	332a      	adds	r3, #42	; 0x2a
 8014d2a:	b29b      	uxth	r3, r3
 8014d2c:	b218      	sxth	r0, r3
 8014d2e:	4b05      	ldr	r3, [pc, #20]	; (8014d44 <DispBMPInfo+0x80>)
 8014d30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014d34:	2201      	movs	r2, #1
 8014d36:	2103      	movs	r1, #3
 8014d38:	f7f9 f95a 	bl	800dff0 <DispStr>
}
 8014d3c:	bf00      	nop
 8014d3e:	46bd      	mov	sp, r7
 8014d40:	bd80      	pop	{r7, pc}
 8014d42:	bf00      	nop
 8014d44:	20000298 	.word	0x20000298
 8014d48:	20002844 	.word	0x20002844
 8014d4c:	08000950 	.word	0x08000950

08014d50 <Update_Proc_All>:

/*******************************************************************************
Update_Proc_All  ȫ��ˢ��
*******************************************************************************/
void Update_Proc_All(void)
{
 8014d50:	b590      	push	{r4, r7, lr}
 8014d52:	b087      	sub	sp, #28
 8014d54:	af02      	add	r7, sp, #8
  short i;
  long Tmp = 0;
 8014d56:	2300      	movs	r3, #0
 8014d58:	60bb      	str	r3, [r7, #8]
  short Range = List[Y_RANGES].Val + 10*List[PROBEATT].Val;
 8014d5a:	4ba3      	ldr	r3, [pc, #652]	; (8014fe8 <Update_Proc_All+0x298>)
 8014d5c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014d60:	b29a      	uxth	r2, r3
 8014d62:	4ba1      	ldr	r3, [pc, #644]	; (8014fe8 <Update_Proc_All+0x298>)
 8014d64:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8014d68:	b29b      	uxth	r3, r3
 8014d6a:	4619      	mov	r1, r3
 8014d6c:	0089      	lsls	r1, r1, #2
 8014d6e:	440b      	add	r3, r1
 8014d70:	005b      	lsls	r3, r3, #1
 8014d72:	b29b      	uxth	r3, r3
 8014d74:	4413      	add	r3, r2
 8014d76:	b29b      	uxth	r3, r3
 8014d78:	80fb      	strh	r3, [r7, #6]

  for(i=Y_RANGES; i<=STANDBY; i++){
 8014d7a:	2300      	movs	r3, #0
 8014d7c:	81fb      	strh	r3, [r7, #14]
 8014d7e:	e015      	b.n	8014dac <Update_Proc_All+0x5c>
    List[i].Flg |= UPD;
 8014d80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014d84:	4a98      	ldr	r2, [pc, #608]	; (8014fe8 <Update_Proc_All+0x298>)
 8014d86:	00db      	lsls	r3, r3, #3
 8014d88:	4413      	add	r3, r2
 8014d8a:	799a      	ldrb	r2, [r3, #6]
 8014d8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014d90:	f042 0220 	orr.w	r2, r2, #32
 8014d94:	b2d1      	uxtb	r1, r2
 8014d96:	4a94      	ldr	r2, [pc, #592]	; (8014fe8 <Update_Proc_All+0x298>)
 8014d98:	00db      	lsls	r3, r3, #3
 8014d9a:	4413      	add	r3, r2
 8014d9c:	460a      	mov	r2, r1
 8014d9e:	719a      	strb	r2, [r3, #6]
  for(i=Y_RANGES; i<=STANDBY; i++){
 8014da0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014da4:	b29b      	uxth	r3, r3
 8014da6:	3301      	adds	r3, #1
 8014da8:	b29b      	uxth	r3, r3
 8014daa:	81fb      	strh	r3, [r7, #14]
 8014dac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014db0:	2b29      	cmp	r3, #41	; 0x29
 8014db2:	dde5      	ble.n	8014d80 <Update_Proc_All+0x30>
  }

  for(i=Y_RANGES; i<=STANDBY; i++){
 8014db4:	2300      	movs	r3, #0
 8014db6:	81fb      	strh	r3, [r7, #14]
 8014db8:	e1be      	b.n	8015138 <Update_Proc_All+0x3e8>
    if(List[i].Flg & UPD){
 8014dba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014dbe:	4a8a      	ldr	r2, [pc, #552]	; (8014fe8 <Update_Proc_All+0x298>)
 8014dc0:	00db      	lsls	r3, r3, #3
 8014dc2:	4413      	add	r3, r2
 8014dc4:	799b      	ldrb	r3, [r3, #6]
 8014dc6:	f003 0320 	and.w	r3, r3, #32
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	f000 81ad 	beq.w	801512a <Update_Proc_All+0x3da>
      List[i].Flg &= ~UPD;
 8014dd0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014dd4:	4a84      	ldr	r2, [pc, #528]	; (8014fe8 <Update_Proc_All+0x298>)
 8014dd6:	00db      	lsls	r3, r3, #3
 8014dd8:	4413      	add	r3, r2
 8014dda:	799a      	ldrb	r2, [r3, #6]
 8014ddc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014de0:	f022 0220 	bic.w	r2, r2, #32
 8014de4:	b2d1      	uxtb	r1, r2
 8014de6:	4a80      	ldr	r2, [pc, #512]	; (8014fe8 <Update_Proc_All+0x298>)
 8014de8:	00db      	lsls	r3, r3, #3
 8014dea:	4413      	add	r3, r2
 8014dec:	460a      	mov	r2, r1
 8014dee:	719a      	strb	r2, [r3, #6]
      switch (i){
 8014df0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014df4:	2b12      	cmp	r3, #18
 8014df6:	f300 8199 	bgt.w	801512c <Update_Proc_All+0x3dc>
 8014dfa:	2b0d      	cmp	r3, #13
 8014dfc:	f280 80ac 	bge.w	8014f58 <Update_Proc_All+0x208>
 8014e00:	2b03      	cmp	r3, #3
 8014e02:	dc02      	bgt.n	8014e0a <Update_Proc_All+0xba>
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	da04      	bge.n	8014e12 <Update_Proc_All+0xc2>
 8014e08:	e190      	b.n	801512c <Update_Proc_All+0x3dc>
 8014e0a:	2b07      	cmp	r3, #7
 8014e0c:	f000 815a 	beq.w	80150c4 <Update_Proc_All+0x374>
 8014e10:	e18c      	b.n	801512c <Update_Proc_All+0x3dc>
      case Y_RANGES:   // ˢ����ʾ Y ���̵�λ
      case PROBEATT:   // ˢ����ʾ̽ͷ˥������
      case COUPLING:   // ˢ����ʾ���ģʽ״̬
      case V0_POSI:    // ˢ����ʾ��ֱƫ��λ��
        SetColor(GRY, TCOLOR[YN]);
 8014e12:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8014e16:	4619      	mov	r1, r3
 8014e18:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014e1c:	f7f9 f8d0 	bl	800dfc0 <SetColor>
        if(i == Y_RANGES || i == COUPLING||i == PROBEATT){
 8014e20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d007      	beq.n	8014e38 <Update_Proc_All+0xe8>
 8014e28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014e2c:	2b01      	cmp	r3, #1
 8014e2e:	d003      	beq.n	8014e38 <Update_Proc_All+0xe8>
 8014e30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014e34:	2b02      	cmp	r3, #2
 8014e36:	d138      	bne.n	8014eaa <Update_Proc_All+0x15a>
          Draw_Circle_D(INV, S_X[Y_RANGES]-3, TITLE_Y_POS, 11, 0, 6*7);
 8014e38:	232f      	movs	r3, #47	; 0x2f
 8014e3a:	b29b      	uxth	r3, r3
 8014e3c:	3b03      	subs	r3, #3
 8014e3e:	b29b      	uxth	r3, r3
 8014e40:	b219      	sxth	r1, r3
 8014e42:	232a      	movs	r3, #42	; 0x2a
 8014e44:	9301      	str	r3, [sp, #4]
 8014e46:	2300      	movs	r3, #0
 8014e48:	9300      	str	r3, [sp, #0]
 8014e4a:	230b      	movs	r3, #11
 8014e4c:	22e1      	movs	r2, #225	; 0xe1
 8014e4e:	2001      	movs	r0, #1
 8014e50:	f7f9 f9a4 	bl	800e19c <Draw_Circle_D>
          DispStr(S_X[Y_RANGES], TITLE_Y_POS, INV,      (List[Y_RANGES].PTR +(Range)*6));
 8014e54:	202f      	movs	r0, #47	; 0x2f
 8014e56:	4b64      	ldr	r3, [pc, #400]	; (8014fe8 <Update_Proc_All+0x298>)
 8014e58:	6819      	ldr	r1, [r3, #0]
 8014e5a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014e5e:	4613      	mov	r3, r2
 8014e60:	005b      	lsls	r3, r3, #1
 8014e62:	4413      	add	r3, r2
 8014e64:	005b      	lsls	r3, r3, #1
 8014e66:	440b      	add	r3, r1
 8014e68:	2201      	movs	r2, #1
 8014e6a:	21e1      	movs	r1, #225	; 0xe1
 8014e6c:	f7f9 f8c0 	bl	800dff0 <DispStr>
          DispStr(S_X[COUPLING], TITLE_Y_POS, INV,      (List[COUPLING].PTR +(List[COUPLING].Val)*6));
 8014e70:	2047      	movs	r0, #71	; 0x47
 8014e72:	4b5d      	ldr	r3, [pc, #372]	; (8014fe8 <Update_Proc_All+0x298>)
 8014e74:	689a      	ldr	r2, [r3, #8]
 8014e76:	4b5c      	ldr	r3, [pc, #368]	; (8014fe8 <Update_Proc_All+0x298>)
 8014e78:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8014e7c:	4619      	mov	r1, r3
 8014e7e:	460b      	mov	r3, r1
 8014e80:	005b      	lsls	r3, r3, #1
 8014e82:	440b      	add	r3, r1
 8014e84:	005b      	lsls	r3, r3, #1
 8014e86:	4413      	add	r3, r2
 8014e88:	2201      	movs	r2, #1
 8014e8a:	21e1      	movs	r1, #225	; 0xe1
 8014e8c:	f7f9 f8b0 	bl	800dff0 <DispStr>
          DispStr10x14(S_X[PROBEATT], TITLE_Y_POS, PRN+SYMB,(List[PROBEATT].Val?("A"):("B")));
 8014e90:	2020      	movs	r0, #32
 8014e92:	4b55      	ldr	r3, [pc, #340]	; (8014fe8 <Update_Proc_All+0x298>)
 8014e94:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d001      	beq.n	8014ea0 <Update_Proc_All+0x150>
 8014e9c:	4b53      	ldr	r3, [pc, #332]	; (8014fec <Update_Proc_All+0x29c>)
 8014e9e:	e000      	b.n	8014ea2 <Update_Proc_All+0x152>
 8014ea0:	4b53      	ldr	r3, [pc, #332]	; (8014ff0 <Update_Proc_All+0x2a0>)
 8014ea2:	2210      	movs	r2, #16
 8014ea4:	21e1      	movs	r1, #225	; 0xe1
 8014ea6:	f7f9 fb0b 	bl	800e4c0 <DispStr10x14>
        }
        ParamTab[P1x2] = 2*((List[V0_POSI].Val+1));
 8014eaa:	4b4f      	ldr	r3, [pc, #316]	; (8014fe8 <Update_Proc_All+0x298>)
 8014eac:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8014eb0:	3301      	adds	r3, #1
 8014eb2:	b29b      	uxth	r3, r3
 8014eb4:	005b      	lsls	r3, r3, #1
 8014eb6:	b29b      	uxth	r3, r3
 8014eb8:	b21a      	sxth	r2, r3
 8014eba:	4b4e      	ldr	r3, [pc, #312]	; (8014ff4 <Update_Proc_All+0x2a4>)
 8014ebc:	829a      	strh	r2, [r3, #20]
        ParamTab[VTx2] = ParamTab[P1x2]+ 2*(List[THRESHOLD].Val+1);
 8014ebe:	4b4d      	ldr	r3, [pc, #308]	; (8014ff4 <Update_Proc_All+0x2a4>)
 8014ec0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8014ec4:	b29a      	uxth	r2, r3
 8014ec6:	4b48      	ldr	r3, [pc, #288]	; (8014fe8 <Update_Proc_All+0x298>)
 8014ec8:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8014ecc:	3301      	adds	r3, #1
 8014ece:	b29b      	uxth	r3, r3
 8014ed0:	005b      	lsls	r3, r3, #1
 8014ed2:	b29b      	uxth	r3, r3
 8014ed4:	4413      	add	r3, r2
 8014ed6:	b29b      	uxth	r3, r3
 8014ed8:	b21a      	sxth	r2, r3
 8014eda:	4b46      	ldr	r3, [pc, #280]	; (8014ff4 <Update_Proc_All+0x2a4>)
 8014edc:	839a      	strh	r2, [r3, #28]

        StateA =  (List[Y_RANGES].Val>5)?ACT: GND;                                    //ACT GND �ӵػ򼤻�״̬
 8014ede:	4b42      	ldr	r3, [pc, #264]	; (8014fe8 <Update_Proc_All+0x298>)
 8014ee0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014ee4:	2b05      	cmp	r3, #5
 8014ee6:	dd01      	ble.n	8014eec <Update_Proc_All+0x19c>
 8014ee8:	2204      	movs	r2, #4
 8014eea:	e000      	b.n	8014eee <Update_Proc_All+0x19e>
 8014eec:	2200      	movs	r2, #0
 8014eee:	4b42      	ldr	r3, [pc, #264]	; (8014ff8 <Update_Proc_All+0x2a8>)
 8014ef0:	801a      	strh	r2, [r3, #0]
        GainA  = List[Y_RANGES].Val;
 8014ef2:	4b3d      	ldr	r3, [pc, #244]	; (8014fe8 <Update_Proc_All+0x298>)
 8014ef4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8014ef8:	4b40      	ldr	r3, [pc, #256]	; (8014ffc <Update_Proc_All+0x2ac>)
 8014efa:	801a      	strh	r2, [r3, #0]
        if(List[Y_RANGES].Val>1)
 8014efc:	4b3a      	ldr	r3, [pc, #232]	; (8014fe8 <Update_Proc_All+0x298>)
 8014efe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014f02:	2b01      	cmp	r3, #1
 8014f04:	dd03      	ble.n	8014f0e <Update_Proc_All+0x1be>
          KindA  = HV;
 8014f06:	4b3e      	ldr	r3, [pc, #248]	; (8015000 <Update_Proc_All+0x2b0>)
 8014f08:	2201      	movs	r2, #1
 8014f0a:	801a      	strh	r2, [r3, #0]
 8014f0c:	e002      	b.n	8014f14 <Update_Proc_All+0x1c4>
        else
          KindA  = LV;                //Ch1ѡ���ѹ���ѹ����
 8014f0e:	4b3c      	ldr	r3, [pc, #240]	; (8015000 <Update_Proc_All+0x2b0>)
 8014f10:	2200      	movs	r2, #0
 8014f12:	801a      	strh	r2, [r3, #0]

        CouplA = (List[COUPLING].Val)? AC : DC;                      // AC);  //AC/DC��Ϸ�ʽ
 8014f14:	4b34      	ldr	r3, [pc, #208]	; (8014fe8 <Update_Proc_All+0x298>)
 8014f16:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d001      	beq.n	8014f22 <Update_Proc_All+0x1d2>
 8014f1e:	2200      	movs	r2, #0
 8014f20:	e000      	b.n	8014f24 <Update_Proc_All+0x1d4>
 8014f22:	2202      	movs	r2, #2
 8014f24:	4b37      	ldr	r3, [pc, #220]	; (8015004 <Update_Proc_All+0x2b4>)
 8014f26:	801a      	strh	r2, [r3, #0]
        BIOS_Ctrl(AiRANGE, KindA+CouplA+StateA);             //Ch1״̬ˢ��
 8014f28:	4b35      	ldr	r3, [pc, #212]	; (8015000 <Update_Proc_All+0x2b0>)
 8014f2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014f2e:	461a      	mov	r2, r3
 8014f30:	4b34      	ldr	r3, [pc, #208]	; (8015004 <Update_Proc_All+0x2b4>)
 8014f32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014f36:	4413      	add	r3, r2
 8014f38:	4a2f      	ldr	r2, [pc, #188]	; (8014ff8 <Update_Proc_All+0x2a8>)
 8014f3a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014f3e:	4413      	add	r3, r2
 8014f40:	4619      	mov	r1, r3
 8014f42:	2007      	movs	r0, #7
 8014f44:	f7f7 fa16 	bl	800c374 <BIOS_Ctrl>
        AiPosi(List[V0_POSI].Val);                        //Ch1Ӳ����Ӧλ��
 8014f48:	4b27      	ldr	r3, [pc, #156]	; (8014fe8 <Update_Proc_All+0x298>)
 8014f4a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8014f4e:	b2db      	uxtb	r3, r3
 8014f50:	4618      	mov	r0, r3
 8014f52:	f000 fa0f 	bl	8015374 <AiPosi>

        break;
 8014f56:	e0e9      	b.n	801512c <Update_Proc_All+0x3dc>
      case TR_MODE:   // ˢ����ʾ������ʽ
      case FITTRIGG:  // ˢ����ʾ�Զ�������ֵ
      case THRESHOLD: // ˢ����ʾ������ֵ
      case SENSITIVE: // ˢ����ʾ����������
      case TR_TYPE:   // ˢ����ʾ�α���ʽ
        DispStatus();
 8014f58:	f7ff fbee 	bl	8014738 <DispStatus>
        SetColor(GRY, TCOLOR[TRG]);
 8014f5c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8014f60:	4619      	mov	r1, r3
 8014f62:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014f66:	f7f9 f82b 	bl	800dfc0 <SetColor>
        if(i == TR_MODE || i==SENSITIVE)
 8014f6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014f6e:	2b0e      	cmp	r3, #14
 8014f70:	d003      	beq.n	8014f7a <Update_Proc_All+0x22a>
 8014f72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014f76:	2b11      	cmp	r3, #17
 8014f78:	d11a      	bne.n	8014fb0 <Update_Proc_All+0x260>
        {
          Draw_Circle_D(INV, S_X[TR_MODE]-3, TITLE_Y_POS, 11, 0, 6*8);
 8014f7a:	23dd      	movs	r3, #221	; 0xdd
 8014f7c:	b29b      	uxth	r3, r3
 8014f7e:	3b03      	subs	r3, #3
 8014f80:	b29b      	uxth	r3, r3
 8014f82:	b219      	sxth	r1, r3
 8014f84:	2330      	movs	r3, #48	; 0x30
 8014f86:	9301      	str	r3, [sp, #4]
 8014f88:	2300      	movs	r3, #0
 8014f8a:	9300      	str	r3, [sp, #0]
 8014f8c:	230b      	movs	r3, #11
 8014f8e:	22e1      	movs	r2, #225	; 0xe1
 8014f90:	2001      	movs	r0, #1
 8014f92:	f7f9 f903 	bl	800e19c <Draw_Circle_D>
          DispStr10x14(S_X[TR_MODE], TITLE_Y_POS, INV+SYMB,(List[TR_MODE].Val?("D"):("C")));
 8014f96:	20dd      	movs	r0, #221	; 0xdd
 8014f98:	4b13      	ldr	r3, [pc, #76]	; (8014fe8 <Update_Proc_All+0x298>)
 8014f9a:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d001      	beq.n	8014fa6 <Update_Proc_All+0x256>
 8014fa2:	4b19      	ldr	r3, [pc, #100]	; (8015008 <Update_Proc_All+0x2b8>)
 8014fa4:	e000      	b.n	8014fa8 <Update_Proc_All+0x258>
 8014fa6:	4b19      	ldr	r3, [pc, #100]	; (801500c <Update_Proc_All+0x2bc>)
 8014fa8:	2211      	movs	r2, #17
 8014faa:	21e1      	movs	r1, #225	; 0xe1
 8014fac:	f7f9 fa88 	bl	800e4c0 <DispStr10x14>
        }
        if(i == FITTRIGG)
 8014fb0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014fb4:	2b0f      	cmp	r3, #15
 8014fb6:	d132      	bne.n	801501e <Update_Proc_All+0x2ce>
        {
          DispStr10x14(S_X[FITTRIGG], TITLE_Y_POS, PRN+SYMB,(List[FITTRIGG].Val?("F"):("B")));
 8014fb8:	20cf      	movs	r0, #207	; 0xcf
 8014fba:	4b0b      	ldr	r3, [pc, #44]	; (8014fe8 <Update_Proc_All+0x298>)
 8014fbc:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d001      	beq.n	8014fc8 <Update_Proc_All+0x278>
 8014fc4:	4b12      	ldr	r3, [pc, #72]	; (8015010 <Update_Proc_All+0x2c0>)
 8014fc6:	e000      	b.n	8014fca <Update_Proc_All+0x27a>
 8014fc8:	4b09      	ldr	r3, [pc, #36]	; (8014ff0 <Update_Proc_All+0x2a0>)
 8014fca:	2210      	movs	r2, #16
 8014fcc:	21e1      	movs	r1, #225	; 0xe1
 8014fce:	f7f9 fa77 	bl	800e4c0 <DispStr10x14>
          if(List[FITTRIGG].Val)KEYTIME = 300;
 8014fd2:	4b05      	ldr	r3, [pc, #20]	; (8014fe8 <Update_Proc_All+0x298>)
 8014fd4:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d01d      	beq.n	8015018 <Update_Proc_All+0x2c8>
 8014fdc:	4b0d      	ldr	r3, [pc, #52]	; (8015014 <Update_Proc_All+0x2c4>)
 8014fde:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8014fe2:	801a      	strh	r2, [r3, #0]
 8014fe4:	e01b      	b.n	801501e <Update_Proc_All+0x2ce>
 8014fe6:	bf00      	nop
 8014fe8:	20000298 	.word	0x20000298
 8014fec:	08000958 	.word	0x08000958
 8014ff0:	0800095c 	.word	0x0800095c
 8014ff4:	20000140 	.word	0x20000140
 8014ff8:	2000286a 	.word	0x2000286a
 8014ffc:	20002852 	.word	0x20002852
 8015000:	2000688e 	.word	0x2000688e
 8015004:	20006890 	.word	0x20006890
 8015008:	08000988 	.word	0x08000988
 801500c:	0800098c 	.word	0x0800098c
 8015010:	0800099c 	.word	0x0800099c
 8015014:	20000782 	.word	0x20000782
          else KEYTIME = 0;
 8015018:	4b4c      	ldr	r3, [pc, #304]	; (801514c <Update_Proc_All+0x3fc>)
 801501a:	2200      	movs	r2, #0
 801501c:	801a      	strh	r2, [r3, #0]
        };
        ParamTab[VTx2]= ParamTab[P1x2]+2*List[THRESHOLD].Val;
 801501e:	4b4c      	ldr	r3, [pc, #304]	; (8015150 <Update_Proc_All+0x400>)
 8015020:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8015024:	b29a      	uxth	r2, r3
 8015026:	4b4b      	ldr	r3, [pc, #300]	; (8015154 <Update_Proc_All+0x404>)
 8015028:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 801502c:	b29b      	uxth	r3, r3
 801502e:	005b      	lsls	r3, r3, #1
 8015030:	b29b      	uxth	r3, r3
 8015032:	4413      	add	r3, r2
 8015034:	b29b      	uxth	r3, r3
 8015036:	b21a      	sxth	r2, r3
 8015038:	4b45      	ldr	r3, [pc, #276]	; (8015150 <Update_Proc_All+0x400>)
 801503a:	839a      	strh	r2, [r3, #28]
        Tmp  = List[SENSITIVE].Val;
 801503c:	4b45      	ldr	r3, [pc, #276]	; (8015154 <Update_Proc_All+0x404>)
 801503e:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8015042:	60bb      	str	r3, [r7, #8]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8015044:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015048:	4a43      	ldr	r2, [pc, #268]	; (8015158 <Update_Proc_All+0x408>)
 801504a:	5cd3      	ldrb	r3, [r2, r3]
 801504c:	461c      	mov	r4, r3
 801504e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015052:	4a42      	ldr	r2, [pc, #264]	; (801515c <Update_Proc_All+0x40c>)
 8015054:	5cd3      	ldrb	r3, [r2, r3]
 8015056:	4618      	mov	r0, r3
 8015058:	f7fc ff9e 	bl	8011f98 <Exp>
 801505c:	4603      	mov	r3, r0
 801505e:	fb03 f204 	mul.w	r2, r3, r4
 8015062:	68bb      	ldr	r3, [r7, #8]
 8015064:	fb02 f303 	mul.w	r3, r2, r3
 8015068:	60bb      	str	r3, [r7, #8]
        Value2Str(NumStr, Tmp, V[2], 2, UNSIGN);
 801506a:	2301      	movs	r3, #1
 801506c:	9300      	str	r3, [sp, #0]
 801506e:	2302      	movs	r3, #2
 8015070:	4a3b      	ldr	r2, [pc, #236]	; (8015160 <Update_Proc_All+0x410>)
 8015072:	68b9      	ldr	r1, [r7, #8]
 8015074:	483b      	ldr	r0, [pc, #236]	; (8015164 <Update_Proc_All+0x414>)
 8015076:	f7fc fe93 	bl	8011da0 <Value2Str>
        DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, INV+SYMB,"E");
 801507a:	20e7      	movs	r0, #231	; 0xe7
 801507c:	4b3a      	ldr	r3, [pc, #232]	; (8015168 <Update_Proc_All+0x418>)
 801507e:	2211      	movs	r2, #17
 8015080:	21e1      	movs	r1, #225	; 0xe1
 8015082:	f7f9 fa1d 	bl	800e4c0 <DispStr10x14>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  "     ");
 8015086:	23e7      	movs	r3, #231	; 0xe7
 8015088:	b29b      	uxth	r3, r3
 801508a:	3309      	adds	r3, #9
 801508c:	b29b      	uxth	r3, r3
 801508e:	b218      	sxth	r0, r3
 8015090:	4b36      	ldr	r3, [pc, #216]	; (801516c <Update_Proc_All+0x41c>)
 8015092:	2201      	movs	r2, #1
 8015094:	21e1      	movs	r1, #225	; 0xe1
 8015096:	f7f8 ffab 	bl	800dff0 <DispStr>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  (char *)NumStr);
 801509a:	23e7      	movs	r3, #231	; 0xe7
 801509c:	b29b      	uxth	r3, r3
 801509e:	3309      	adds	r3, #9
 80150a0:	b29b      	uxth	r3, r3
 80150a2:	b218      	sxth	r0, r3
 80150a4:	4b2f      	ldr	r3, [pc, #188]	; (8015164 <Update_Proc_All+0x414>)
 80150a6:	2201      	movs	r2, #1
 80150a8:	21e1      	movs	r1, #225	; 0xe1
 80150aa:	f7f8 ffa1 	bl	800dff0 <DispStr>
        ParamTab[VTF]=(List[TR_TYPE].Val)? L_HID : SHOW;
 80150ae:	4b29      	ldr	r3, [pc, #164]	; (8015154 <Update_Proc_All+0x404>)
 80150b0:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d001      	beq.n	80150bc <Update_Proc_All+0x36c>
 80150b8:	2202      	movs	r2, #2
 80150ba:	e000      	b.n	80150be <Update_Proc_All+0x36e>
 80150bc:	2200      	movs	r2, #0
 80150be:	4b24      	ldr	r3, [pc, #144]	; (8015150 <Update_Proc_All+0x400>)
 80150c0:	811a      	strh	r2, [r3, #8]
        break;
 80150c2:	e033      	b.n	801512c <Update_Proc_All+0x3dc>

      case TIM_BASE:  // ˢ����ʾʱ����λ
        SetColor(GRY, TCOLOR[XN]);
 80150c4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80150c8:	4619      	mov	r1, r3
 80150ca:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80150ce:	f7f8 ff77 	bl	800dfc0 <SetColor>
        if(i == TIM_BASE)
 80150d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80150d6:	2b07      	cmp	r3, #7
 80150d8:	d120      	bne.n	801511c <Update_Proc_All+0x3cc>
        {
          Draw_Circle_D(INV, S_X[i]-3, TITLE_Y_POS, 11, 2, 6*5);
 80150da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80150de:	4a24      	ldr	r2, [pc, #144]	; (8015170 <Update_Proc_All+0x420>)
 80150e0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80150e4:	b29b      	uxth	r3, r3
 80150e6:	3b03      	subs	r3, #3
 80150e8:	b29b      	uxth	r3, r3
 80150ea:	b219      	sxth	r1, r3
 80150ec:	231e      	movs	r3, #30
 80150ee:	9301      	str	r3, [sp, #4]
 80150f0:	2302      	movs	r3, #2
 80150f2:	9300      	str	r3, [sp, #0]
 80150f4:	230b      	movs	r3, #11
 80150f6:	22e1      	movs	r2, #225	; 0xe1
 80150f8:	2001      	movs	r0, #1
 80150fa:	f7f9 f84f 	bl	800e19c <Draw_Circle_D>
          DispStr(S_X[i], TITLE_Y_POS, INV, (char *)TimeBase_Str[List[TIM_BASE].Val]);
 80150fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015102:	4a1b      	ldr	r2, [pc, #108]	; (8015170 <Update_Proc_All+0x420>)
 8015104:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8015108:	4b12      	ldr	r3, [pc, #72]	; (8015154 <Update_Proc_All+0x404>)
 801510a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801510e:	00db      	lsls	r3, r3, #3
 8015110:	4a18      	ldr	r2, [pc, #96]	; (8015174 <Update_Proc_All+0x424>)
 8015112:	4413      	add	r3, r2
 8015114:	2201      	movs	r2, #1
 8015116:	21e1      	movs	r1, #225	; 0xe1
 8015118:	f7f8 ff6a 	bl	800dff0 <DispStr>
        }
        Set_Base(List[TIM_BASE].Val);          // Ӳ������ɨ��ʱ����λ
 801511c:	4b0d      	ldr	r3, [pc, #52]	; (8015154 <Update_Proc_All+0x404>)
 801511e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015122:	4618      	mov	r0, r3
 8015124:	f7f7 faa2 	bl	800c66c <Set_Base>
      break;
 8015128:	e000      	b.n	801512c <Update_Proc_All+0x3dc>

      }
    }
 801512a:	bf00      	nop
  for(i=Y_RANGES; i<=STANDBY; i++){
 801512c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015130:	b29b      	uxth	r3, r3
 8015132:	3301      	adds	r3, #1
 8015134:	b29b      	uxth	r3, r3
 8015136:	81fb      	strh	r3, [r7, #14]
 8015138:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801513c:	2b29      	cmp	r3, #41	; 0x29
 801513e:	f77f ae3c 	ble.w	8014dba <Update_Proc_All+0x6a>
  }
}
 8015142:	bf00      	nop
 8015144:	bf00      	nop
 8015146:	3714      	adds	r7, #20
 8015148:	46bd      	mov	sp, r7
 801514a:	bd90      	pop	{r4, r7, pc}
 801514c:	20000782 	.word	0x20000782
 8015150:	20000140 	.word	0x20000140
 8015154:	20000298 	.word	0x20000298
 8015158:	08002130 	.word	0x08002130
 801515c:	08002108 	.word	0x08002108
 8015160:	08001d0c 	.word	0x08001d0c
 8015164:	20002844 	.word	0x20002844
 8015168:	08000998 	.word	0x08000998
 801516c:	08000990 	.word	0x08000990
 8015170:	0800215c 	.word	0x0800215c
 8015174:	200001d0 	.word	0x200001d0

08015178 <Align_Set>:

/*******************************************************************************
 Align_Set:
*******************************************************************************/
void Align_Set(void)
{
 8015178:	b580      	push	{r7, lr}
 801517a:	b082      	sub	sp, #8
 801517c:	af00      	add	r7, sp, #0
  unsigned short i, TmpA = 0, StA = 0;
 801517e:	2300      	movs	r3, #0
 8015180:	807b      	strh	r3, [r7, #2]
 8015182:	2300      	movs	r3, #0
 8015184:	80bb      	strh	r3, [r7, #4]

  Analys();
 8015186:	f000 f8b1 	bl	80152ec <Analys>
  for(i=0; i<100; i++)
 801518a:	2300      	movs	r3, #0
 801518c:	80fb      	strh	r3, [r7, #6]
 801518e:	e051      	b.n	8015234 <Align_Set+0xbc>
  {
    AiPosi(100);
 8015190:	2064      	movs	r0, #100	; 0x64
 8015192:	f000 f8ef 	bl	8015374 <AiPosi>
    HAL_Delay(10);                             // Wait 10mS
 8015196:	200a      	movs	r0, #10
 8015198:	f003 fb32 	bl	8018800 <HAL_Delay>
    Analys();
 801519c:	f000 f8a6 	bl	80152ec <Analys>
    TmpA = 2048-Vavg;
 80151a0:	4b28      	ldr	r3, [pc, #160]	; (8015244 <Align_Set+0xcc>)
 80151a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80151a6:	b29b      	uxth	r3, r3
 80151a8:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80151ac:	807b      	strh	r3, [r7, #2]

    if(TmpA != 0)
 80151ae:	887b      	ldrh	r3, [r7, #2]
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d036      	beq.n	8015222 <Align_Set+0xaa>
    {
      KpA[KindA+(StateA?1:0)] += 700*TmpA/2048;
 80151b4:	4b24      	ldr	r3, [pc, #144]	; (8015248 <Align_Set+0xd0>)
 80151b6:	681a      	ldr	r2, [r3, #0]
 80151b8:	4b24      	ldr	r3, [pc, #144]	; (801524c <Align_Set+0xd4>)
 80151ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80151be:	4619      	mov	r1, r3
 80151c0:	4b23      	ldr	r3, [pc, #140]	; (8015250 <Align_Set+0xd8>)
 80151c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	bf14      	ite	ne
 80151ca:	2301      	movne	r3, #1
 80151cc:	2300      	moveq	r3, #0
 80151ce:	b2db      	uxtb	r3, r3
 80151d0:	440b      	add	r3, r1
 80151d2:	005b      	lsls	r3, r3, #1
 80151d4:	4413      	add	r3, r2
 80151d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80151da:	b29a      	uxth	r2, r3
 80151dc:	887b      	ldrh	r3, [r7, #2]
 80151de:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 80151e2:	fb01 f303 	mul.w	r3, r1, r3
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	da01      	bge.n	80151ee <Align_Set+0x76>
 80151ea:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80151ee:	12db      	asrs	r3, r3, #11
 80151f0:	b29b      	uxth	r3, r3
 80151f2:	4413      	add	r3, r2
 80151f4:	b299      	uxth	r1, r3
 80151f6:	4b14      	ldr	r3, [pc, #80]	; (8015248 <Align_Set+0xd0>)
 80151f8:	681a      	ldr	r2, [r3, #0]
 80151fa:	4b14      	ldr	r3, [pc, #80]	; (801524c <Align_Set+0xd4>)
 80151fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015200:	4618      	mov	r0, r3
 8015202:	4b13      	ldr	r3, [pc, #76]	; (8015250 <Align_Set+0xd8>)
 8015204:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015208:	2b00      	cmp	r3, #0
 801520a:	bf14      	ite	ne
 801520c:	2301      	movne	r3, #1
 801520e:	2300      	moveq	r3, #0
 8015210:	b2db      	uxtb	r3, r3
 8015212:	4403      	add	r3, r0
 8015214:	005b      	lsls	r3, r3, #1
 8015216:	4413      	add	r3, r2
 8015218:	b20a      	sxth	r2, r1
 801521a:	801a      	strh	r2, [r3, #0]
      StA = 0;
 801521c:	2300      	movs	r3, #0
 801521e:	80bb      	strh	r3, [r7, #4]
 8015220:	e002      	b.n	8015228 <Align_Set+0xb0>
    }
    else
      StA++;
 8015222:	88bb      	ldrh	r3, [r7, #4]
 8015224:	3301      	adds	r3, #1
 8015226:	80bb      	strh	r3, [r7, #4]

    if(StA > 4)
 8015228:	88bb      	ldrh	r3, [r7, #4]
 801522a:	2b04      	cmp	r3, #4
 801522c:	d806      	bhi.n	801523c <Align_Set+0xc4>
  for(i=0; i<100; i++)
 801522e:	88fb      	ldrh	r3, [r7, #6]
 8015230:	3301      	adds	r3, #1
 8015232:	80fb      	strh	r3, [r7, #6]
 8015234:	88fb      	ldrh	r3, [r7, #6]
 8015236:	2b63      	cmp	r3, #99	; 0x63
 8015238:	d9aa      	bls.n	8015190 <Align_Set+0x18>
 801523a:	e000      	b.n	801523e <Align_Set+0xc6>
    	return;
 801523c:	bf00      	nop
  }

}
 801523e:	3708      	adds	r7, #8
 8015240:	46bd      	mov	sp, r7
 8015242:	bd80      	pop	{r7, pc}
 8015244:	20002860 	.word	0x20002860
 8015248:	20000578 	.word	0x20000578
 801524c:	2000688e 	.word	0x2000688e
 8015250:	2000286a 	.word	0x2000286a

08015254 <Zero_Align>:

/*******************************************************************************
 Channel's zero alignment:
*******************************************************************************/
void Zero_Align(void)
{
 8015254:	b580      	push	{r7, lr}
 8015256:	af00      	add	r7, sp, #0
  GainA  = 0;//0x20;
 8015258:	4b21      	ldr	r3, [pc, #132]	; (80152e0 <Zero_Align+0x8c>)
 801525a:	2200      	movs	r2, #0
 801525c:	801a      	strh	r2, [r3, #0]
  KindA  = HV;
 801525e:	4b21      	ldr	r3, [pc, #132]	; (80152e4 <Zero_Align+0x90>)
 8015260:	2201      	movs	r2, #1
 8015262:	801a      	strh	r2, [r3, #0]
  StateA = ACT;
 8015264:	4b20      	ldr	r3, [pc, #128]	; (80152e8 <Zero_Align+0x94>)
 8015266:	2204      	movs	r2, #4
 8015268:	801a      	strh	r2, [r3, #0]
  BIOS_Ctrl(AiRANGE, HV+AC+ACT);
 801526a:	2105      	movs	r1, #5
 801526c:	2007      	movs	r0, #7
 801526e:	f7f7 f881 	bl	800c374 <BIOS_Ctrl>
  AiPosi(100);
 8015272:	2064      	movs	r0, #100	; 0x64
 8015274:	f000 f87e 	bl	8015374 <AiPosi>
  HAL_Delay(1000);
 8015278:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801527c:	f003 fac0 	bl	8018800 <HAL_Delay>
  Align_Set();
 8015280:	f7ff ff7a 	bl	8015178 <Align_Set>

  GainA  = 0;//0x20;
 8015284:	4b16      	ldr	r3, [pc, #88]	; (80152e0 <Zero_Align+0x8c>)
 8015286:	2200      	movs	r2, #0
 8015288:	801a      	strh	r2, [r3, #0]
  KindA  = HV;
 801528a:	4b16      	ldr	r3, [pc, #88]	; (80152e4 <Zero_Align+0x90>)
 801528c:	2201      	movs	r2, #1
 801528e:	801a      	strh	r2, [r3, #0]
  StateA = GND;
 8015290:	4b15      	ldr	r3, [pc, #84]	; (80152e8 <Zero_Align+0x94>)
 8015292:	2200      	movs	r2, #0
 8015294:	801a      	strh	r2, [r3, #0]
  BIOS_Ctrl(AiRANGE, HV+AC+GND);
 8015296:	2101      	movs	r1, #1
 8015298:	2007      	movs	r0, #7
 801529a:	f7f7 f86b 	bl	800c374 <BIOS_Ctrl>
  AiPosi(100);
 801529e:	2064      	movs	r0, #100	; 0x64
 80152a0:	f000 f868 	bl	8015374 <AiPosi>
  HAL_Delay(1000);
 80152a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80152a8:	f003 faaa 	bl	8018800 <HAL_Delay>
  Align_Set();
 80152ac:	f7ff ff64 	bl	8015178 <Align_Set>

  GainA  = 0;//0x20;
 80152b0:	4b0b      	ldr	r3, [pc, #44]	; (80152e0 <Zero_Align+0x8c>)
 80152b2:	2200      	movs	r2, #0
 80152b4:	801a      	strh	r2, [r3, #0]
  KindA  = LV;
 80152b6:	4b0b      	ldr	r3, [pc, #44]	; (80152e4 <Zero_Align+0x90>)
 80152b8:	2200      	movs	r2, #0
 80152ba:	801a      	strh	r2, [r3, #0]
  StateA = GND;
 80152bc:	4b0a      	ldr	r3, [pc, #40]	; (80152e8 <Zero_Align+0x94>)
 80152be:	2200      	movs	r2, #0
 80152c0:	801a      	strh	r2, [r3, #0]
  BIOS_Ctrl(AiRANGE, LV+AC+GND);
 80152c2:	2100      	movs	r1, #0
 80152c4:	2007      	movs	r0, #7
 80152c6:	f7f7 f855 	bl	800c374 <BIOS_Ctrl>
  AiPosi(100);
 80152ca:	2064      	movs	r0, #100	; 0x64
 80152cc:	f000 f852 	bl	8015374 <AiPosi>
  HAL_Delay(1000);
 80152d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80152d4:	f003 fa94 	bl	8018800 <HAL_Delay>
  Align_Set();
 80152d8:	f7ff ff4e 	bl	8015178 <Align_Set>

}
 80152dc:	bf00      	nop
 80152de:	bd80      	pop	{r7, pc}
 80152e0:	20002852 	.word	0x20002852
 80152e4:	2000688e 	.word	0x2000688e
 80152e8:	2000286a 	.word	0x2000286a

080152ec <Analys>:

/*******************************************************************************
 Channel's error analys
*******************************************************************************/
void Analys(void)
{
 80152ec:	b580      	push	{r7, lr}
 80152ee:	b082      	sub	sp, #8
 80152f0:	af00      	add	r7, sp, #0
  unsigned i, SumA = 0;
 80152f2:	2300      	movs	r3, #0
 80152f4:	603b      	str	r3, [r7, #0]

  BIOS_Ctrl(SMPL_ST, DISABLE);
 80152f6:	2100      	movs	r1, #0
 80152f8:	2004      	movs	r0, #4
 80152fa:	f7f7 f83b 	bl	800c374 <BIOS_Ctrl>
  BIOS_Ctrl(SMPLTIM, 720-1);      // 72MHz/360 = 400kHz = 2.5uS
 80152fe:	f240 21cf 	movw	r1, #719	; 0x2cf
 8015302:	2005      	movs	r0, #5
 8015304:	f7f7 f836 	bl	800c374 <BIOS_Ctrl>
  BIOS_Ctrl(SMPLNUM, 4096);       // 8192
 8015308:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801530c:	2006      	movs	r0, #6
 801530e:	f7f7 f831 	bl	800c374 <BIOS_Ctrl>
  BIOS_Ctrl(SMPL_ST, ENABLE);
 8015312:	2101      	movs	r1, #1
 8015314:	2004      	movs	r0, #4
 8015316:	f7f7 f82d 	bl	800c374 <BIOS_Ctrl>
  while((BIOS_Info(CHA_CNT) != 0)) {};
 801531a:	bf00      	nop
 801531c:	2000      	movs	r0, #0
 801531e:	f7f7 f813 	bl	800c348 <BIOS_Info>
 8015322:	4603      	mov	r3, r0
 8015324:	2b00      	cmp	r3, #0
 8015326:	d1f9      	bne.n	801531c <Analys+0x30>
  for(i=2; i<4000+2; i++){
 8015328:	2302      	movs	r3, #2
 801532a:	607b      	str	r3, [r7, #4]
 801532c:	e00a      	b.n	8015344 <Analys+0x58>
    SumA += Sampl[i];
 801532e:	4a0e      	ldr	r2, [pc, #56]	; (8015368 <Analys+0x7c>)
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8015336:	461a      	mov	r2, r3
 8015338:	683b      	ldr	r3, [r7, #0]
 801533a:	4413      	add	r3, r2
 801533c:	603b      	str	r3, [r7, #0]
  for(i=2; i<4000+2; i++){
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	3301      	adds	r3, #1
 8015342:	607b      	str	r3, [r7, #4]
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	f640 72a1 	movw	r2, #4001	; 0xfa1
 801534a:	4293      	cmp	r3, r2
 801534c:	d9ef      	bls.n	801532e <Analys+0x42>
  }
  Vavg = SumA/4000; // 4000
 801534e:	683b      	ldr	r3, [r7, #0]
 8015350:	4a06      	ldr	r2, [pc, #24]	; (801536c <Analys+0x80>)
 8015352:	fba2 2303 	umull	r2, r3, r2, r3
 8015356:	0a1b      	lsrs	r3, r3, #8
 8015358:	b21a      	sxth	r2, r3
 801535a:	4b05      	ldr	r3, [pc, #20]	; (8015370 <Analys+0x84>)
 801535c:	801a      	strh	r2, [r3, #0]
}
 801535e:	bf00      	nop
 8015360:	3708      	adds	r7, #8
 8015362:	46bd      	mov	sp, r7
 8015364:	bd80      	pop	{r7, pc}
 8015366:	bf00      	nop
 8015368:	20002878 	.word	0x20002878
 801536c:	10624dd3 	.word	0x10624dd3
 8015370:	20002860 	.word	0x20002860

08015374 <AiPosi>:

/*******************************************************************************
 DevCtrl:  offset
*******************************************************************************/
void AiPosi(char Val)
{
 8015374:	b580      	push	{r7, lr}
 8015376:	b082      	sub	sp, #8
 8015378:	af00      	add	r7, sp, #0
 801537a:	4603      	mov	r3, r0
 801537c:	71fb      	strb	r3, [r7, #7]
   BIOS_Ctrl(AOFFSET,((char)Val-100)*(KpA[KindA+(StateA?1:0)]/2)*GK[GainA]/KgA[KindA+(StateA?1:0)]+KpA[KindA+(StateA?1:0)]);
 801537e:	79fb      	ldrb	r3, [r7, #7]
 8015380:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8015384:	4b28      	ldr	r3, [pc, #160]	; (8015428 <AiPosi+0xb4>)
 8015386:	6819      	ldr	r1, [r3, #0]
 8015388:	4b28      	ldr	r3, [pc, #160]	; (801542c <AiPosi+0xb8>)
 801538a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801538e:	4618      	mov	r0, r3
 8015390:	4b27      	ldr	r3, [pc, #156]	; (8015430 <AiPosi+0xbc>)
 8015392:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015396:	2b00      	cmp	r3, #0
 8015398:	bf14      	ite	ne
 801539a:	2301      	movne	r3, #1
 801539c:	2300      	moveq	r3, #0
 801539e:	b2db      	uxtb	r3, r3
 80153a0:	4403      	add	r3, r0
 80153a2:	005b      	lsls	r3, r3, #1
 80153a4:	440b      	add	r3, r1
 80153a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80153aa:	0fd9      	lsrs	r1, r3, #31
 80153ac:	440b      	add	r3, r1
 80153ae:	105b      	asrs	r3, r3, #1
 80153b0:	b21b      	sxth	r3, r3
 80153b2:	fb03 f302 	mul.w	r3, r3, r2
 80153b6:	4a1f      	ldr	r2, [pc, #124]	; (8015434 <AiPosi+0xc0>)
 80153b8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80153bc:	4611      	mov	r1, r2
 80153be:	4a1e      	ldr	r2, [pc, #120]	; (8015438 <AiPosi+0xc4>)
 80153c0:	5c52      	ldrb	r2, [r2, r1]
 80153c2:	fb02 f303 	mul.w	r3, r2, r3
 80153c6:	4a1d      	ldr	r2, [pc, #116]	; (801543c <AiPosi+0xc8>)
 80153c8:	6811      	ldr	r1, [r2, #0]
 80153ca:	4a18      	ldr	r2, [pc, #96]	; (801542c <AiPosi+0xb8>)
 80153cc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80153d0:	4610      	mov	r0, r2
 80153d2:	4a17      	ldr	r2, [pc, #92]	; (8015430 <AiPosi+0xbc>)
 80153d4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80153d8:	2a00      	cmp	r2, #0
 80153da:	bf14      	ite	ne
 80153dc:	2201      	movne	r2, #1
 80153de:	2200      	moveq	r2, #0
 80153e0:	b2d2      	uxtb	r2, r2
 80153e2:	4402      	add	r2, r0
 80153e4:	0052      	lsls	r2, r2, #1
 80153e6:	440a      	add	r2, r1
 80153e8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80153ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80153f0:	4a0d      	ldr	r2, [pc, #52]	; (8015428 <AiPosi+0xb4>)
 80153f2:	6811      	ldr	r1, [r2, #0]
 80153f4:	4a0d      	ldr	r2, [pc, #52]	; (801542c <AiPosi+0xb8>)
 80153f6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80153fa:	4610      	mov	r0, r2
 80153fc:	4a0c      	ldr	r2, [pc, #48]	; (8015430 <AiPosi+0xbc>)
 80153fe:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015402:	2a00      	cmp	r2, #0
 8015404:	bf14      	ite	ne
 8015406:	2201      	movne	r2, #1
 8015408:	2200      	moveq	r2, #0
 801540a:	b2d2      	uxtb	r2, r2
 801540c:	4402      	add	r2, r0
 801540e:	0052      	lsls	r2, r2, #1
 8015410:	440a      	add	r2, r1
 8015412:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015416:	4413      	add	r3, r2
 8015418:	4619      	mov	r1, r3
 801541a:	2008      	movs	r0, #8
 801541c:	f7f6 ffaa 	bl	800c374 <BIOS_Ctrl>
}
 8015420:	bf00      	nop
 8015422:	3708      	adds	r7, #8
 8015424:	46bd      	mov	sp, r7
 8015426:	bd80      	pop	{r7, pc}
 8015428:	20000578 	.word	0x20000578
 801542c:	2000688e 	.word	0x2000688e
 8015430:	2000286a 	.word	0x2000286a
 8015434:	20002852 	.word	0x20002852
 8015438:	20000560 	.word	0x20000560
 801543c:	2000057c 	.word	0x2000057c

08015440 <WaveProcess>:
/*******************************************************************************
 WaveProcess: ���㴦���������������
*******************************************************************************/

void WaveProcess(void)
{
 8015440:	b580      	push	{r7, lr}
 8015442:	b094      	sub	sp, #80	; 0x50
 8015444:	af00      	add	r7, sp, #0
  //------------------ ����Ԥ����,���ɽ���ָ��������ݵ���Ч�� -----------------//

  short* Ain  = (short*)&Sampl[2];
 8015446:	4bb0      	ldr	r3, [pc, #704]	; (8015708 <WaveProcess+0x2c8>)
 8015448:	617b      	str	r3, [r7, #20]

  int  Ak = (KgA[KindA+(StateA?1:0)]*4)/GK[GainA];
 801544a:	4bb0      	ldr	r3, [pc, #704]	; (801570c <WaveProcess+0x2cc>)
 801544c:	681a      	ldr	r2, [r3, #0]
 801544e:	4bb0      	ldr	r3, [pc, #704]	; (8015710 <WaveProcess+0x2d0>)
 8015450:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015454:	4619      	mov	r1, r3
 8015456:	4baf      	ldr	r3, [pc, #700]	; (8015714 <WaveProcess+0x2d4>)
 8015458:	f9b3 3000 	ldrsh.w	r3, [r3]
 801545c:	2b00      	cmp	r3, #0
 801545e:	bf14      	ite	ne
 8015460:	2301      	movne	r3, #1
 8015462:	2300      	moveq	r3, #0
 8015464:	b2db      	uxtb	r3, r3
 8015466:	440b      	add	r3, r1
 8015468:	005b      	lsls	r3, r3, #1
 801546a:	4413      	add	r3, r2
 801546c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015470:	009b      	lsls	r3, r3, #2
 8015472:	4aa9      	ldr	r2, [pc, #676]	; (8015718 <WaveProcess+0x2d8>)
 8015474:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015478:	4611      	mov	r1, r2
 801547a:	4aa8      	ldr	r2, [pc, #672]	; (801571c <WaveProcess+0x2dc>)
 801547c:	5c52      	ldrb	r2, [r2, r1]
 801547e:	fb93 f3f2 	sdiv	r3, r3, r2
 8015482:	613b      	str	r3, [r7, #16]
  short  i, n, k, p = 0;
 8015484:	2300      	movs	r3, #0
 8015486:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

  short  VtlA, ViA, VthA, VeA, VpA, VoA;            // VtA,

  short  DtA   = 0, TslA  =  0, TshA = 0, StA  = 2;
 801548a:	2300      	movs	r3, #0
 801548c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801548e:	2300      	movs	r3, #0
 8015490:	877b      	strh	r3, [r7, #58]	; 0x3a
 8015492:	2300      	movs	r3, #0
 8015494:	873b      	strh	r3, [r7, #56]	; 0x38
 8015496:	2302      	movs	r3, #2
 8015498:	86fb      	strh	r3, [r7, #54]	; 0x36
  short  FallA = 0, RiseA =  0, UpA  = 0, DnA  = 0;
 801549a:	2300      	movs	r3, #0
 801549c:	86bb      	strh	r3, [r7, #52]	; 0x34
 801549e:	2300      	movs	r3, #0
 80154a0:	867b      	strh	r3, [r7, #50]	; 0x32
 80154a2:	2300      	movs	r3, #0
 80154a4:	863b      	strh	r3, [r7, #48]	; 0x30
 80154a6:	2300      	movs	r3, #0
 80154a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
  int  MaxA  = 0, MinA  = ~0, SumA = 0, SsqA = 0; // ���/��Сֵ,�ۼ�/ƽ���� = 0
 80154aa:	2300      	movs	r3, #0
 80154ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80154ae:	f04f 33ff 	mov.w	r3, #4294967295
 80154b2:	627b      	str	r3, [r7, #36]	; 0x24
 80154b4:	2300      	movs	r3, #0
 80154b6:	623b      	str	r3, [r7, #32]
 80154b8:	2300      	movs	r3, #0
 80154ba:	61fb      	str	r3, [r7, #28]

  short  Dpth  = DEPTH[List[SMPL_DPTH].Val] - 1;
 80154bc:	4b98      	ldr	r3, [pc, #608]	; (8015720 <WaveProcess+0x2e0>)
 80154be:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 80154c2:	461a      	mov	r2, r3
 80154c4:	4b97      	ldr	r3, [pc, #604]	; (8015724 <WaveProcess+0x2e4>)
 80154c6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80154ca:	b29b      	uxth	r3, r3
 80154cc:	3b01      	subs	r3, #1
 80154ce:	b29b      	uxth	r3, r3
 80154d0:	837b      	strh	r3, [r7, #26]
  short  Tp    = PRE_SMPL+1, Tm = List[TR_MODE].Val & 1;
 80154d2:	2397      	movs	r3, #151	; 0x97
 80154d4:	81fb      	strh	r3, [r7, #14]
 80154d6:	4b92      	ldr	r3, [pc, #584]	; (8015720 <WaveProcess+0x2e0>)
 80154d8:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 80154dc:	f003 0301 	and.w	r3, r3, #1
 80154e0:	81bb      	strh	r3, [r7, #12]
  short  Ks    = KS[List[TIM_BASE].Val],  Sm = List[SYNCMODE].Val;
 80154e2:	4b8f      	ldr	r3, [pc, #572]	; (8015720 <WaveProcess+0x2e0>)
 80154e4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80154e8:	461a      	mov	r2, r3
 80154ea:	4b8f      	ldr	r3, [pc, #572]	; (8015728 <WaveProcess+0x2e8>)
 80154ec:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80154f0:	817b      	strh	r3, [r7, #10]
 80154f2:	4b8b      	ldr	r3, [pc, #556]	; (8015720 <WaveProcess+0x2e0>)
 80154f4:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 80154f8:	813b      	strh	r3, [r7, #8]
  char   Ext = List[EXT_REFN].Val;
 80154fa:	4b89      	ldr	r3, [pc, #548]	; (8015720 <WaveProcess+0x2e0>)
 80154fc:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8015500:	71fb      	strb	r3, [r7, #7]

//---------------------- ��������Ԥ����,����ʵ�ʴ�����ֵ ---------------------//
  if(Status == STOP)
 8015502:	4b8a      	ldr	r3, [pc, #552]	; (801572c <WaveProcess+0x2ec>)
 8015504:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015508:	2b01      	cmp	r3, #1
 801550a:	d13c      	bne.n	8015586 <WaveProcess+0x146>
  {
    VtlA  = (((Tri_Posi + Ch1_Posi - List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 801550c:	4b88      	ldr	r3, [pc, #544]	; (8015730 <WaveProcess+0x2f0>)
 801550e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015512:	461a      	mov	r2, r3
 8015514:	4b87      	ldr	r3, [pc, #540]	; (8015734 <WaveProcess+0x2f4>)
 8015516:	f9b3 3000 	ldrsh.w	r3, [r3]
 801551a:	4413      	add	r3, r2
 801551c:	4a80      	ldr	r2, [pc, #512]	; (8015720 <WaveProcess+0x2e0>)
 801551e:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 8015522:	1a9b      	subs	r3, r3, r2
 8015524:	3b64      	subs	r3, #100	; 0x64
 8015526:	031a      	lsls	r2, r3, #12
 8015528:	693b      	ldr	r3, [r7, #16]
 801552a:	fb92 f3f3 	sdiv	r3, r2, r3
 801552e:	b29b      	uxth	r3, r3
 8015530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015534:	b29b      	uxth	r3, r3
 8015536:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    VthA  = (((Tri_Posi + Ch1_Posi + List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 801553a:	4b7d      	ldr	r3, [pc, #500]	; (8015730 <WaveProcess+0x2f0>)
 801553c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015540:	461a      	mov	r2, r3
 8015542:	4b7c      	ldr	r3, [pc, #496]	; (8015734 <WaveProcess+0x2f4>)
 8015544:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015548:	4413      	add	r3, r2
 801554a:	4a75      	ldr	r2, [pc, #468]	; (8015720 <WaveProcess+0x2e0>)
 801554c:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 8015550:	4413      	add	r3, r2
 8015552:	3b64      	subs	r3, #100	; 0x64
 8015554:	031a      	lsls	r2, r3, #12
 8015556:	693b      	ldr	r3, [r7, #16]
 8015558:	fb92 f3f3 	sdiv	r3, r2, r3
 801555c:	b29b      	uxth	r3, r3
 801555e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015562:	b29b      	uxth	r3, r3
 8015564:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    VpA   = ((((List[V0_POSI].Val)       -100)<<12)/Ak)+2048; //??
 8015568:	4b6d      	ldr	r3, [pc, #436]	; (8015720 <WaveProcess+0x2e0>)
 801556a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801556e:	3b64      	subs	r3, #100	; 0x64
 8015570:	031a      	lsls	r2, r3, #12
 8015572:	693b      	ldr	r3, [r7, #16]
 8015574:	fb92 f3f3 	sdiv	r3, r2, r3
 8015578:	b29b      	uxth	r3, r3
 801557a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801557e:	b29b      	uxth	r3, r3
 8015580:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8015584:	e03b      	b.n	80155fe <WaveProcess+0x1be>
  }
  else
  {
    VtlA  = (((List[THRESHOLD].Val + List[V0_POSI].Val - List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 8015586:	4b66      	ldr	r3, [pc, #408]	; (8015720 <WaveProcess+0x2e0>)
 8015588:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 801558c:	461a      	mov	r2, r3
 801558e:	4b64      	ldr	r3, [pc, #400]	; (8015720 <WaveProcess+0x2e0>)
 8015590:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015594:	4413      	add	r3, r2
 8015596:	4a62      	ldr	r2, [pc, #392]	; (8015720 <WaveProcess+0x2e0>)
 8015598:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 801559c:	1a9b      	subs	r3, r3, r2
 801559e:	3b64      	subs	r3, #100	; 0x64
 80155a0:	031a      	lsls	r2, r3, #12
 80155a2:	693b      	ldr	r3, [r7, #16]
 80155a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80155a8:	b29b      	uxth	r3, r3
 80155aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80155ae:	b29b      	uxth	r3, r3
 80155b0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    VthA  = (((List[THRESHOLD].Val + List[V0_POSI].Val + List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 80155b4:	4b5a      	ldr	r3, [pc, #360]	; (8015720 <WaveProcess+0x2e0>)
 80155b6:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 80155ba:	461a      	mov	r2, r3
 80155bc:	4b58      	ldr	r3, [pc, #352]	; (8015720 <WaveProcess+0x2e0>)
 80155be:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80155c2:	4413      	add	r3, r2
 80155c4:	4a56      	ldr	r2, [pc, #344]	; (8015720 <WaveProcess+0x2e0>)
 80155c6:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 80155ca:	4413      	add	r3, r2
 80155cc:	3b64      	subs	r3, #100	; 0x64
 80155ce:	031a      	lsls	r2, r3, #12
 80155d0:	693b      	ldr	r3, [r7, #16]
 80155d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80155d6:	b29b      	uxth	r3, r3
 80155d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80155dc:	b29b      	uxth	r3, r3
 80155de:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    VpA   = ((((List[V0_POSI].Val)       -100)<<12)/Ak)+2048;
 80155e2:	4b4f      	ldr	r3, [pc, #316]	; (8015720 <WaveProcess+0x2e0>)
 80155e4:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80155e8:	3b64      	subs	r3, #100	; 0x64
 80155ea:	031a      	lsls	r2, r3, #12
 80155ec:	693b      	ldr	r3, [r7, #16]
 80155ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80155f2:	b29b      	uxth	r3, r3
 80155f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80155f8:	b29b      	uxth	r3, r3
 80155fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  }
//-------------------------- ��������ͳ������� ------------------------------//


  if(((List[SYNCMODE].Val == NONE)||(List[SYNCMODE].Val == SCAN))
 80155fe:	4b48      	ldr	r3, [pc, #288]	; (8015720 <WaveProcess+0x2e0>)
 8015600:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8015604:	2b05      	cmp	r3, #5
 8015606:	d004      	beq.n	8015612 <WaveProcess+0x1d2>
 8015608:	4b45      	ldr	r3, [pc, #276]	; (8015720 <WaveProcess+0x2e0>)
 801560a:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 801560e:	2b01      	cmp	r3, #1
 8015610:	d10b      	bne.n	801562a <WaveProcess+0x1ea>
     &&(List[TIM_BASE].Val>11))
 8015612:	4b43      	ldr	r3, [pc, #268]	; (8015720 <WaveProcess+0x2e0>)
 8015614:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015618:	2b0b      	cmp	r3, #11
 801561a:	dd06      	ble.n	801562a <WaveProcess+0x1ea>
  {
    Dpth = 302;
 801561c:	f44f 7397 	mov.w	r3, #302	; 0x12e
 8015620:	837b      	strh	r3, [r7, #26]
    List[VIEWPOSI].Val = 0;
 8015622:	4b3f      	ldr	r3, [pc, #252]	; (8015720 <WaveProcess+0x2e0>)
 8015624:	2200      	movs	r2, #0
 8015626:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  for(i=0; i<Dpth; i++)
 801562a:	2300      	movs	r3, #0
 801562c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8015630:	e0ad      	b.n	801578e <WaveProcess+0x34e>
  {
	n = __HAL_DMA_GET_COUNTER(&hdma_adc1);//    DMA1_Channel1->CNDTR;              //DMA_CH_A->CNDTR; //DMA1_CNDTR1
 8015632:	4b41      	ldr	r3, [pc, #260]	; (8015738 <WaveProcess+0x2f8>)
 8015634:	681b      	ldr	r3, [r3, #0]
 8015636:	685b      	ldr	r3, [r3, #4]
 8015638:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    if(i >= (Dpth-n)) break;      // ����һ���ڵȴ�A/Dת�����
 801563c:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8015640:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 8015644:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015648:	1acb      	subs	r3, r1, r3
 801564a:	429a      	cmp	r2, r3
 801564c:	f280 80a7 	bge.w	801579e <WaveProcess+0x35e>
    ViA = Ain[i];
 8015650:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015654:	005b      	lsls	r3, r3, #1
 8015656:	697a      	ldr	r2, [r7, #20]
 8015658:	4413      	add	r3, r2
 801565a:	881b      	ldrh	r3, [r3, #0]
 801565c:	80bb      	strh	r3, [r7, #4]

    if(MaxA < ViA) MaxA = ViA;    // ͳ�����ֵ
 801565e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015662:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015664:	429a      	cmp	r2, r3
 8015666:	da02      	bge.n	801566e <WaveProcess+0x22e>
 8015668:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801566c:	62bb      	str	r3, [r7, #40]	; 0x28
    if(MinA > ViA) MinA = ViA;    // ͳ����Сֵ
 801566e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015674:	429a      	cmp	r2, r3
 8015676:	dd02      	ble.n	801567e <WaveProcess+0x23e>
 8015678:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801567c:	627b      	str	r3, [r7, #36]	; 0x24
    SumA += ViA;                  // ͳ���ۼӺ�
 801567e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015682:	6a3a      	ldr	r2, [r7, #32]
 8015684:	4413      	add	r3, r2
 8015686:	623b      	str	r3, [r7, #32]
    SsqA +=(ViA-VpA)*(ViA-VpA);   // ͳ��ƽ����
 8015688:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801568c:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8015690:	1ad3      	subs	r3, r2, r3
 8015692:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8015696:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 801569a:	1a8a      	subs	r2, r1, r2
 801569c:	fb02 f303 	mul.w	r3, r2, r3
 80156a0:	69fa      	ldr	r2, [r7, #28]
 80156a2:	4413      	add	r3, r2
 80156a4:	61fb      	str	r3, [r7, #28]


    if(StA == 2) DtA = 0;                  // ����CH_A�׸�������ǰ��ʱ���ۼ�
 80156a6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80156aa:	2b02      	cmp	r3, #2
 80156ac:	d102      	bne.n	80156b4 <WaveProcess+0x274>
 80156ae:	2300      	movs	r3, #0
 80156b0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80156b2:	e005      	b.n	80156c0 <WaveProcess+0x280>
    else         DtA++;
 80156b4:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 80156b8:	b29b      	uxth	r3, r3
 80156ba:	3301      	adds	r3, #1
 80156bc:	b29b      	uxth	r3, r3
 80156be:	87bb      	strh	r3, [r7, #60]	; 0x3c

    if(ViA > VthA){                        // ViA ������ֵ����
 80156c0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80156c4:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80156c8:	429a      	cmp	r2, r3
 80156ca:	dd37      	ble.n	801573c <WaveProcess+0x2fc>
      if(StA == 0){
 80156cc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d115      	bne.n	8015700 <WaveProcess+0x2c0>
        TslA += DtA; DtA = 0; RiseA++;     // CH_A��λʱ���ۼƣ��������ۼ�
 80156d4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80156d6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80156d8:	4413      	add	r3, r2
 80156da:	b29b      	uxth	r3, r3
 80156dc:	877b      	strh	r3, [r7, #58]	; 0x3a
 80156de:	2300      	movs	r3, #0
 80156e0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80156e2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80156e6:	b29b      	uxth	r3, r3
 80156e8:	3301      	adds	r3, #1
 80156ea:	b29b      	uxth	r3, r3
 80156ec:	867b      	strh	r3, [r7, #50]	; 0x32
        if(UpA < Tp) UpA = i;              // ��¼Ԥ������CH_A��һ��������λ��
 80156ee:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80156f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80156f6:	429a      	cmp	r2, r3
 80156f8:	da02      	bge.n	8015700 <WaveProcess+0x2c0>
 80156fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80156fe:	863b      	strh	r3, [r7, #48]	; 0x30
      }
      StA = 1;                             // ��ǰCH_A״̬��Ϊ��λ
 8015700:	2301      	movs	r3, #1
 8015702:	86fb      	strh	r3, [r7, #54]	; 0x36
 8015704:	e03c      	b.n	8015780 <WaveProcess+0x340>
 8015706:	bf00      	nop
 8015708:	2000287c 	.word	0x2000287c
 801570c:	2000057c 	.word	0x2000057c
 8015710:	2000688e 	.word	0x2000688e
 8015714:	2000286a 	.word	0x2000286a
 8015718:	20002852 	.word	0x20002852
 801571c:	20000560 	.word	0x20000560
 8015720:	20000298 	.word	0x20000298
 8015724:	08002270 	.word	0x08002270
 8015728:	08002278 	.word	0x08002278
 801572c:	200007a8 	.word	0x200007a8
 8015730:	20002868 	.word	0x20002868
 8015734:	2000688c 	.word	0x2000688c
 8015738:	20006b18 	.word	0x20006b18
    } else if(ViA < VtlA){                 // ViA ������ֵ����
 801573c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8015740:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8015744:	429a      	cmp	r2, r3
 8015746:	da1b      	bge.n	8015780 <WaveProcess+0x340>
      if(StA == 1){
 8015748:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801574c:	2b01      	cmp	r3, #1
 801574e:	d115      	bne.n	801577c <WaveProcess+0x33c>
        TshA += DtA; DtA = 0; FallA++;     // CH_A��λʱ���ۼƣ��½����ۼ�
 8015750:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8015752:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015754:	4413      	add	r3, r2
 8015756:	b29b      	uxth	r3, r3
 8015758:	873b      	strh	r3, [r7, #56]	; 0x38
 801575a:	2300      	movs	r3, #0
 801575c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801575e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8015762:	b29b      	uxth	r3, r3
 8015764:	3301      	adds	r3, #1
 8015766:	b29b      	uxth	r3, r3
 8015768:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(DnA < Tp) DnA = i;              // ��¼Ԥ������CH_A��һ���½���λ��
 801576a:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 801576e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015772:	429a      	cmp	r2, r3
 8015774:	da02      	bge.n	801577c <WaveProcess+0x33c>
 8015776:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801577a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      StA = 0;                             // ��ǰCH_A״̬��Ϊ��λ
 801577c:	2300      	movs	r3, #0
 801577e:	86fb      	strh	r3, [r7, #54]	; 0x36
  for(i=0; i<Dpth; i++)
 8015780:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015784:	b29b      	uxth	r3, r3
 8015786:	3301      	adds	r3, #1
 8015788:	b29b      	uxth	r3, r3
 801578a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 801578e:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8015792:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8015796:	429a      	cmp	r2, r3
 8015798:	f6ff af4b 	blt.w	8015632 <WaveProcess+0x1f2>
 801579c:	e000      	b.n	80157a0 <WaveProcess+0x360>
    if(i >= (Dpth-n)) break;      // ����һ���ڵȴ�A/Dת�����
 801579e:	bf00      	nop
    }
  }
  if(n == 0)
 80157a0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	d14f      	bne.n	8015848 <WaveProcess+0x408>
  {                              // ����ȫ����ɺ��������ֵ i == Dpth
    Vmax = MaxA; Vmin = MinA; Vavg = SumA/i; Vssq = SsqA/(i+1);
 80157a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157aa:	b21a      	sxth	r2, r3
 80157ac:	4b9a      	ldr	r3, [pc, #616]	; (8015a18 <WaveProcess+0x5d8>)
 80157ae:	801a      	strh	r2, [r3, #0]
 80157b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157b2:	b21a      	sxth	r2, r3
 80157b4:	4b99      	ldr	r3, [pc, #612]	; (8015a1c <WaveProcess+0x5dc>)
 80157b6:	801a      	strh	r2, [r3, #0]
 80157b8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80157bc:	6a3a      	ldr	r2, [r7, #32]
 80157be:	fb92 f3f3 	sdiv	r3, r2, r3
 80157c2:	b21a      	sxth	r2, r3
 80157c4:	4b96      	ldr	r3, [pc, #600]	; (8015a20 <WaveProcess+0x5e0>)
 80157c6:	801a      	strh	r2, [r3, #0]
 80157c8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80157cc:	3301      	adds	r3, #1
 80157ce:	69fa      	ldr	r2, [r7, #28]
 80157d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80157d4:	4a93      	ldr	r2, [pc, #588]	; (8015a24 <WaveProcess+0x5e4>)
 80157d6:	6013      	str	r3, [r2, #0]
    Vrms = (Sqrt32(Vssq)); Vmid = (Vmax + Vmin)/2; Vpp = Vmax - Vmin;
 80157d8:	4b92      	ldr	r3, [pc, #584]	; (8015a24 <WaveProcess+0x5e4>)
 80157da:	681b      	ldr	r3, [r3, #0]
 80157dc:	4618      	mov	r0, r3
 80157de:	f7fc fbf5 	bl	8011fcc <Sqrt32>
 80157e2:	4603      	mov	r3, r0
 80157e4:	461a      	mov	r2, r3
 80157e6:	4b90      	ldr	r3, [pc, #576]	; (8015a28 <WaveProcess+0x5e8>)
 80157e8:	601a      	str	r2, [r3, #0]
 80157ea:	4b8b      	ldr	r3, [pc, #556]	; (8015a18 <WaveProcess+0x5d8>)
 80157ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80157f0:	461a      	mov	r2, r3
 80157f2:	4b8a      	ldr	r3, [pc, #552]	; (8015a1c <WaveProcess+0x5dc>)
 80157f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80157f8:	4413      	add	r3, r2
 80157fa:	0fda      	lsrs	r2, r3, #31
 80157fc:	4413      	add	r3, r2
 80157fe:	105b      	asrs	r3, r3, #1
 8015800:	b21a      	sxth	r2, r3
 8015802:	4b8a      	ldr	r3, [pc, #552]	; (8015a2c <WaveProcess+0x5ec>)
 8015804:	801a      	strh	r2, [r3, #0]
 8015806:	4b84      	ldr	r3, [pc, #528]	; (8015a18 <WaveProcess+0x5d8>)
 8015808:	f9b3 3000 	ldrsh.w	r3, [r3]
 801580c:	461a      	mov	r2, r3
 801580e:	4b83      	ldr	r3, [pc, #524]	; (8015a1c <WaveProcess+0x5dc>)
 8015810:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015814:	1ad3      	subs	r3, r2, r3
 8015816:	4a86      	ldr	r2, [pc, #536]	; (8015a30 <WaveProcess+0x5f0>)
 8015818:	6013      	str	r3, [r2, #0]
    HighT = TshA/FallA; LowT = TslA/RiseA; Edge = FallA+ RiseA;
 801581a:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 801581e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8015822:	fb92 f3f3 	sdiv	r3, r2, r3
 8015826:	4a83      	ldr	r2, [pc, #524]	; (8015a34 <WaveProcess+0x5f4>)
 8015828:	6013      	str	r3, [r2, #0]
 801582a:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 801582e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8015832:	fb92 f3f3 	sdiv	r3, r2, r3
 8015836:	4a80      	ldr	r2, [pc, #512]	; (8015a38 <WaveProcess+0x5f8>)
 8015838:	6013      	str	r3, [r2, #0]
 801583a:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 801583e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8015842:	4413      	add	r3, r2
 8015844:	4a7d      	ldr	r2, [pc, #500]	; (8015a3c <WaveProcess+0x5fc>)
 8015846:	6013      	str	r3, [r2, #0]

  }
//--------------------------- ���ɲ�����ʾ���� -------------------------------//

  if(((Sm == NONE)||(Sm == SCAN))){
 8015848:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801584c:	2b05      	cmp	r3, #5
 801584e:	d003      	beq.n	8015858 <WaveProcess+0x418>
 8015850:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8015854:	2b01      	cmp	r3, #1
 8015856:	d12f      	bne.n	80158b8 <WaveProcess+0x478>
    if(List[TIM_BASE].Val > 11)
 8015858:	4b79      	ldr	r3, [pc, #484]	; (8015a40 <WaveProcess+0x600>)
 801585a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801585e:	2b0b      	cmp	r3, #11
 8015860:	dd03      	ble.n	801586a <WaveProcess+0x42a>
      k = 1;                         // NONE SCAN ģʽ��ǿ�ƴ���
 8015862:	2301      	movs	r3, #1
 8015864:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if(List[TIM_BASE].Val > 11)
 8015868:	e033      	b.n	80158d2 <WaveProcess+0x492>
    else
    {
      k =((Tm == RISE)? UpA : DnA)-Tp; // k:Ԥ�����󴥷���λ��
 801586a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801586e:	2b00      	cmp	r3, #0
 8015870:	d101      	bne.n	8015876 <WaveProcess+0x436>
 8015872:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8015874:	e000      	b.n	8015878 <WaveProcess+0x438>
 8015876:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015878:	89fa      	ldrh	r2, [r7, #14]
 801587a:	1a9b      	subs	r3, r3, r2
 801587c:	b29b      	uxth	r3, r3
 801587e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if((Sm == SCAN)&&(k < 0)){ // AUTO ģʽ���޴���ʱ
 8015882:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8015886:	2b01      	cmp	r3, #1
 8015888:	d123      	bne.n	80158d2 <WaveProcess+0x492>
 801588a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 801588e:	2b00      	cmp	r3, #0
 8015890:	da1f      	bge.n	80158d2 <WaveProcess+0x492>
        if(i > Dpth/4) k = 1;    // ������1/4����ǿ�ƴ���
 8015892:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8015896:	2b00      	cmp	r3, #0
 8015898:	da00      	bge.n	801589c <WaveProcess+0x45c>
 801589a:	3303      	adds	r3, #3
 801589c:	109b      	asrs	r3, r3, #2
 801589e:	b21b      	sxth	r3, r3
 80158a0:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 80158a4:	429a      	cmp	r2, r3
 80158a6:	dd03      	ble.n	80158b0 <WaveProcess+0x470>
 80158a8:	2301      	movs	r3, #1
 80158aa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if(List[TIM_BASE].Val > 11)
 80158ae:	e010      	b.n	80158d2 <WaveProcess+0x492>
        else           k = 0;    // ������1/4��ǰ����ʾ
 80158b0:	2300      	movs	r3, #0
 80158b2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if(List[TIM_BASE].Val > 11)
 80158b6:	e00c      	b.n	80158d2 <WaveProcess+0x492>
      }

    }
  } else
    k =((Tm == RISE)? UpA : DnA)-Tp; // k:Ԥ�����󴥷���λ��
 80158b8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80158bc:	2b00      	cmp	r3, #0
 80158be:	d101      	bne.n	80158c4 <WaveProcess+0x484>
 80158c0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80158c2:	e000      	b.n	80158c6 <WaveProcess+0x486>
 80158c4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80158c6:	89fa      	ldrh	r2, [r7, #14]
 80158c8:	1a9b      	subs	r3, r3, r2
 80158ca:	b29b      	uxth	r3, r3
 80158cc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80158d0:	e000      	b.n	80158d4 <WaveProcess+0x494>
    if(List[TIM_BASE].Val > 11)
 80158d2:	bf00      	nop

  if((!n)&&(Sm == SINGL)&&(k > 0)){ // SNGL ģʽ���д���ʱ�����������Զ�ֹͣ
 80158d4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d10c      	bne.n	80158f6 <WaveProcess+0x4b6>
 80158dc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80158e0:	2b04      	cmp	r3, #4
 80158e2:	d108      	bne.n	80158f6 <WaveProcess+0x4b6>
 80158e4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	dd04      	ble.n	80158f6 <WaveProcess+0x4b6>
    Status = STOP;
 80158ec:	4b55      	ldr	r3, [pc, #340]	; (8015a44 <WaveProcess+0x604>)
 80158ee:	2201      	movs	r2, #1
 80158f0:	801a      	strh	r2, [r3, #0]
    DispStatus();
 80158f2:	f7fe ff21 	bl	8014738 <DispStatus>
  }

  if((Sm == AUTO)&&(k < 0)){ // AUTO ģʽ���޴���ʱ
 80158f6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80158fa:	2b02      	cmp	r3, #2
 80158fc:	d115      	bne.n	801592a <WaveProcess+0x4ea>
 80158fe:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8015902:	2b00      	cmp	r3, #0
 8015904:	da11      	bge.n	801592a <WaveProcess+0x4ea>
    if(i > Dpth/4) k = 1;    // ������1/4����ǿ�ƴ���
 8015906:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801590a:	2b00      	cmp	r3, #0
 801590c:	da00      	bge.n	8015910 <WaveProcess+0x4d0>
 801590e:	3303      	adds	r3, #3
 8015910:	109b      	asrs	r3, r3, #2
 8015912:	b21b      	sxth	r3, r3
 8015914:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8015918:	429a      	cmp	r2, r3
 801591a:	dd03      	ble.n	8015924 <WaveProcess+0x4e4>
 801591c:	2301      	movs	r3, #1
 801591e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8015922:	e002      	b.n	801592a <WaveProcess+0x4ea>
    else           k = 0;    // ������1/4��ǰ����ʾ
 8015924:	2300      	movs	r3, #0
 8015926:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  }

  Trigger_k = k;
 801592a:	4a47      	ldr	r2, [pc, #284]	; (8015a48 <WaveProcess+0x608>)
 801592c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8015930:	8013      	strh	r3, [r2, #0]

  if(Trigger_k>0)NORM_Kflag = 1;
 8015932:	4b45      	ldr	r3, [pc, #276]	; (8015a48 <WaveProcess+0x608>)
 8015934:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015938:	2b00      	cmp	r3, #0
 801593a:	dd02      	ble.n	8015942 <WaveProcess+0x502>
 801593c:	4b43      	ldr	r3, [pc, #268]	; (8015a4c <WaveProcess+0x60c>)
 801593e:	2201      	movs	r2, #1
 8015940:	701a      	strb	r2, [r3, #0]

  if((SNGL_Kflag)&&(Status == STOP))
 8015942:	4b43      	ldr	r3, [pc, #268]	; (8015a50 <WaveProcess+0x610>)
 8015944:	781b      	ldrb	r3, [r3, #0]
 8015946:	2b00      	cmp	r3, #0
 8015948:	d016      	beq.n	8015978 <WaveProcess+0x538>
 801594a:	4b3e      	ldr	r3, [pc, #248]	; (8015a44 <WaveProcess+0x604>)
 801594c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015950:	2b01      	cmp	r3, #1
 8015952:	d111      	bne.n	8015978 <WaveProcess+0x538>
  {
    Ch1_Posi = List[V0_POSI].Val;
 8015954:	4b3a      	ldr	r3, [pc, #232]	; (8015a40 <WaveProcess+0x600>)
 8015956:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 801595a:	4b3e      	ldr	r3, [pc, #248]	; (8015a54 <WaveProcess+0x614>)
 801595c:	801a      	strh	r2, [r3, #0]
    Ch2_Posi = List[EXT_POSI].Val;
 801595e:	4b38      	ldr	r3, [pc, #224]	; (8015a40 <WaveProcess+0x600>)
 8015960:	f9b3 20dc 	ldrsh.w	r2, [r3, #220]	; 0xdc
 8015964:	4b3c      	ldr	r3, [pc, #240]	; (8015a58 <WaveProcess+0x618>)
 8015966:	801a      	strh	r2, [r3, #0]
    Tri_Posi = List[THRESHOLD].Val;
 8015968:	4b35      	ldr	r3, [pc, #212]	; (8015a40 <WaveProcess+0x600>)
 801596a:	f9b3 2084 	ldrsh.w	r2, [r3, #132]	; 0x84
 801596e:	4b3b      	ldr	r3, [pc, #236]	; (8015a5c <WaveProcess+0x61c>)
 8015970:	801a      	strh	r2, [r3, #0]
    SNGL_Kflag = 0;
 8015972:	4b37      	ldr	r3, [pc, #220]	; (8015a50 <WaveProcess+0x610>)
 8015974:	2200      	movs	r2, #0
 8015976:	701a      	strb	r2, [r3, #0]
  }

  if(k > 0)
 8015978:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 801597c:	2b00      	cmp	r3, #0
 801597e:	f340 8104 	ble.w	8015b8a <WaveProcess+0x74a>
  {                                               // �д���ʱ����ʾ����
    k += List[VIEWPOSI].Val+((1024-Ks)*Tp+512)/1024; // ���β�ֵ���
 8015982:	4b2f      	ldr	r3, [pc, #188]	; (8015a40 <WaveProcess+0x600>)
 8015984:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8015988:	b29a      	uxth	r2, r3
 801598a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801598e:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8015992:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8015996:	fb01 f303 	mul.w	r3, r1, r3
 801599a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801599e:	2b00      	cmp	r3, #0
 80159a0:	da01      	bge.n	80159a6 <WaveProcess+0x566>
 80159a2:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80159a6:	129b      	asrs	r3, r3, #10
 80159a8:	b29b      	uxth	r3, r3
 80159aa:	4413      	add	r3, r2
 80159ac:	b29a      	uxth	r2, r3
 80159ae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80159b2:	4413      	add	r3, r2
 80159b4:	b29b      	uxth	r3, r3
 80159b6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    VeA =(((Ain[k]-2048)*Ak)>>12)+100;
 80159ba:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80159be:	005b      	lsls	r3, r3, #1
 80159c0:	697a      	ldr	r2, [r7, #20]
 80159c2:	4413      	add	r3, r2
 80159c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80159c8:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80159cc:	693a      	ldr	r2, [r7, #16]
 80159ce:	fb02 f303 	mul.w	r3, r2, r3
 80159d2:	131b      	asrs	r3, r3, #12
 80159d4:	b29b      	uxth	r3, r3
 80159d6:	3364      	adds	r3, #100	; 0x64
 80159d8:	b29b      	uxth	r3, r3
 80159da:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    for(n=0; n<300;)
 80159de:	2300      	movs	r3, #0
 80159e0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80159e4:	e0c7      	b.n	8015b76 <WaveProcess+0x736>
    {
      ViA =(((Ain[k]-2048)*Ak)>>12)+100;
 80159e6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80159ea:	005b      	lsls	r3, r3, #1
 80159ec:	697a      	ldr	r2, [r7, #20]
 80159ee:	4413      	add	r3, r2
 80159f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80159f4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80159f8:	693a      	ldr	r2, [r7, #16]
 80159fa:	fb02 f303 	mul.w	r3, r2, r3
 80159fe:	131b      	asrs	r3, r3, #12
 8015a00:	b29b      	uxth	r3, r3
 8015a02:	3364      	adds	r3, #100	; 0x64
 8015a04:	b29b      	uxth	r3, r3
 8015a06:	80bb      	strh	r3, [r7, #4]
      k++;
 8015a08:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8015a0c:	b29b      	uxth	r3, r3
 8015a0e:	3301      	adds	r3, #1
 8015a10:	b29b      	uxth	r3, r3
 8015a12:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
      while(p > 0){
 8015a16:	e09e      	b.n	8015b56 <WaveProcess+0x716>
 8015a18:	2000285e 	.word	0x2000285e
 8015a1c:	20002870 	.word	0x20002870
 8015a20:	20002860 	.word	0x20002860
 8015a24:	20002864 	.word	0x20002864
 8015a28:	2000286c 	.word	0x2000286c
 8015a2c:	20002872 	.word	0x20002872
 8015a30:	20006888 	.word	0x20006888
 8015a34:	20006880 	.word	0x20006880
 8015a38:	20006894 	.word	0x20006894
 8015a3c:	20002858 	.word	0x20002858
 8015a40:	20000298 	.word	0x20000298
 8015a44:	200007a8 	.word	0x200007a8
 8015a48:	2000285c 	.word	0x2000285c
 8015a4c:	20002874 	.word	0x20002874
 8015a50:	2000055c 	.word	0x2000055c
 8015a54:	2000688c 	.word	0x2000688c
 8015a58:	20006884 	.word	0x20006884
 8015a5c:	20002868 	.word	0x20002868
        VoA = VeA +((ViA-VeA)*(1024-p))/1024; // ���� A ͨ����ǰ���ε�Ĳ�ֵ
 8015a60:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8015a64:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8015a68:	1ad3      	subs	r3, r2, r3
 8015a6a:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8015a6e:	f5c2 6280 	rsb	r2, r2, #1024	; 0x400
 8015a72:	fb02 f303 	mul.w	r3, r2, r3
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	da01      	bge.n	8015a7e <WaveProcess+0x63e>
 8015a7a:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8015a7e:	129b      	asrs	r3, r3, #10
 8015a80:	b29a      	uxth	r2, r3
 8015a82:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015a86:	4413      	add	r3, r2
 8015a88:	b29b      	uxth	r3, r3
 8015a8a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        if(Status == STOP){
 8015a8c:	4b63      	ldr	r3, [pc, #396]	; (8015c1c <WaveProcess+0x7dc>)
 8015a8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015a92:	2b01      	cmp	r3, #1
 8015a94:	d132      	bne.n	8015afc <WaveProcess+0x6bc>

          Vo_Temp = VoA+(List[V0_POSI].Val-Ch1_Posi);
 8015a96:	4b62      	ldr	r3, [pc, #392]	; (8015c20 <WaveProcess+0x7e0>)
 8015a98:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015a9c:	b29a      	uxth	r2, r3
 8015a9e:	4b61      	ldr	r3, [pc, #388]	; (8015c24 <WaveProcess+0x7e4>)
 8015aa0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015aa4:	b29b      	uxth	r3, r3
 8015aa6:	1ad3      	subs	r3, r2, r3
 8015aa8:	b29a      	uxth	r2, r3
 8015aaa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015aac:	4413      	add	r3, r2
 8015aae:	b29b      	uxth	r3, r3
 8015ab0:	b21a      	sxth	r2, r3
 8015ab2:	4b5d      	ldr	r3, [pc, #372]	; (8015c28 <WaveProcess+0x7e8>)
 8015ab4:	801a      	strh	r2, [r3, #0]

          if(Vo_Temp > 199) Vo_Temp = 202;
 8015ab6:	4b5c      	ldr	r3, [pc, #368]	; (8015c28 <WaveProcess+0x7e8>)
 8015ab8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015abc:	2bc7      	cmp	r3, #199	; 0xc7
 8015abe:	dd02      	ble.n	8015ac6 <WaveProcess+0x686>
 8015ac0:	4b59      	ldr	r3, [pc, #356]	; (8015c28 <WaveProcess+0x7e8>)
 8015ac2:	22ca      	movs	r2, #202	; 0xca
 8015ac4:	801a      	strh	r2, [r3, #0]
          if(Vo_Temp <   3) Vo_Temp = 1;                     // �����޷�
 8015ac6:	4b58      	ldr	r3, [pc, #352]	; (8015c28 <WaveProcess+0x7e8>)
 8015ac8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015acc:	2b02      	cmp	r3, #2
 8015ace:	dc02      	bgt.n	8015ad6 <WaveProcess+0x696>
 8015ad0:	4b55      	ldr	r3, [pc, #340]	; (8015c28 <WaveProcess+0x7e8>)
 8015ad2:	2201      	movs	r2, #1
 8015ad4:	801a      	strh	r2, [r3, #0]

          WaveBuf[n]= Vo_Temp;
 8015ad6:	4b54      	ldr	r3, [pc, #336]	; (8015c28 <WaveProcess+0x7e8>)
 8015ad8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015adc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015ae0:	b2d1      	uxtb	r1, r2
 8015ae2:	4a52      	ldr	r2, [pc, #328]	; (8015c2c <WaveProcess+0x7ec>)
 8015ae4:	54d1      	strb	r1, [r2, r3]

          Build_Ext(n, Ext, List[V0_POSI].Val);
 8015ae6:	4b4e      	ldr	r3, [pc, #312]	; (8015c20 <WaveProcess+0x7e0>)
 8015ae8:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015aec:	b2da      	uxtb	r2, r3
 8015aee:	79f9      	ldrb	r1, [r7, #7]
 8015af0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015af4:	4618      	mov	r0, r3
 8015af6:	f000 f89d 	bl	8015c34 <Build_Ext>
 8015afa:	e01b      	b.n	8015b34 <WaveProcess+0x6f4>
        }
        else{
          if(VoA > 199) VoA = 202;                   // �����޷�  ��������
 8015afc:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8015b00:	2bc7      	cmp	r3, #199	; 0xc7
 8015b02:	dd01      	ble.n	8015b08 <WaveProcess+0x6c8>
 8015b04:	23ca      	movs	r3, #202	; 0xca
 8015b06:	87fb      	strh	r3, [r7, #62]	; 0x3e
          if(VoA <   3) VoA = 2;                     // �����޷�
 8015b08:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8015b0c:	2b02      	cmp	r3, #2
 8015b0e:	dc01      	bgt.n	8015b14 <WaveProcess+0x6d4>
 8015b10:	2302      	movs	r3, #2
 8015b12:	87fb      	strh	r3, [r7, #62]	; 0x3e
          WaveBuf[n]= VoA;
 8015b14:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015b18:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015b1a:	b2d1      	uxtb	r1, r2
 8015b1c:	4a43      	ldr	r2, [pc, #268]	; (8015c2c <WaveProcess+0x7ec>)
 8015b1e:	54d1      	strb	r1, [r2, r3]

          Build_Ext(n, Ext, List[V0_POSI].Val);
 8015b20:	4b3f      	ldr	r3, [pc, #252]	; (8015c20 <WaveProcess+0x7e0>)
 8015b22:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015b26:	b2da      	uxtb	r2, r3
 8015b28:	79f9      	ldrb	r1, [r7, #7]
 8015b2a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015b2e:	4618      	mov	r0, r3
 8015b30:	f000 f880 	bl	8015c34 <Build_Ext>
        }

        if(n++ >= 300) break;
 8015b34:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015b38:	b29a      	uxth	r2, r3
 8015b3a:	3201      	adds	r2, #1
 8015b3c:	b292      	uxth	r2, r2
 8015b3e:	f8a7 204c 	strh.w	r2, [r7, #76]	; 0x4c
 8015b42:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015b46:	da0b      	bge.n	8015b60 <WaveProcess+0x720>
        p -= Ks;
 8015b48:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8015b4c:	897b      	ldrh	r3, [r7, #10]
 8015b4e:	1ad3      	subs	r3, r2, r3
 8015b50:	b29b      	uxth	r3, r3
 8015b52:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      while(p > 0){
 8015b56:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	dc80      	bgt.n	8015a60 <WaveProcess+0x620>
 8015b5e:	e000      	b.n	8015b62 <WaveProcess+0x722>
        if(n++ >= 300) break;
 8015b60:	bf00      	nop
      }
      p += 1024;
 8015b62:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8015b66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015b6a:	b29b      	uxth	r3, r3
 8015b6c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      VeA = ViA;                              // �ݴ浱ǰ���ε��ֵ
 8015b70:	88bb      	ldrh	r3, [r7, #4]
 8015b72:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    for(n=0; n<300;)
 8015b76:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015b7a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015b7e:	f6ff af32 	blt.w	80159e6 <WaveProcess+0x5a6>
    }
    Norm_Clr = 0;                                          //NORM����
 8015b82:	4b2b      	ldr	r3, [pc, #172]	; (8015c30 <WaveProcess+0x7f0>)
 8015b84:	2200      	movs	r2, #0
 8015b86:	701a      	strb	r2, [r3, #0]
 8015b88:	e037      	b.n	8015bfa <WaveProcess+0x7ba>
  }
  else if((k < 0) && ((Sm != NORM)||(Norm_Clr))){          //NORM��������Ļ
 8015b8a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	da33      	bge.n	8015bfa <WaveProcess+0x7ba>
 8015b92:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8015b96:	2b03      	cmp	r3, #3
 8015b98:	d103      	bne.n	8015ba2 <WaveProcess+0x762>
 8015b9a:	4b25      	ldr	r3, [pc, #148]	; (8015c30 <WaveProcess+0x7f0>)
 8015b9c:	781b      	ldrb	r3, [r3, #0]
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d02b      	beq.n	8015bfa <WaveProcess+0x7ba>
    for(n=0; n<300;){
 8015ba2:	2300      	movs	r3, #0
 8015ba4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8015ba8:	e022      	b.n	8015bf0 <WaveProcess+0x7b0>
      while(p > 0){
        WaveBuf[n]= 255;
 8015baa:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015bae:	4a1f      	ldr	r2, [pc, #124]	; (8015c2c <WaveProcess+0x7ec>)
 8015bb0:	21ff      	movs	r1, #255	; 0xff
 8015bb2:	54d1      	strb	r1, [r2, r3]

        if(n++ >= 300) break;
 8015bb4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015bb8:	b29a      	uxth	r2, r3
 8015bba:	3201      	adds	r2, #1
 8015bbc:	b292      	uxth	r2, r2
 8015bbe:	f8a7 204c 	strh.w	r2, [r7, #76]	; 0x4c
 8015bc2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015bc6:	da0b      	bge.n	8015be0 <WaveProcess+0x7a0>
        p -= Ks;
 8015bc8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8015bcc:	897b      	ldrh	r3, [r7, #10]
 8015bce:	1ad3      	subs	r3, r2, r3
 8015bd0:	b29b      	uxth	r3, r3
 8015bd2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      while(p > 0){
 8015bd6:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	dce5      	bgt.n	8015baa <WaveProcess+0x76a>
 8015bde:	e000      	b.n	8015be2 <WaveProcess+0x7a2>
        if(n++ >= 300) break;
 8015be0:	bf00      	nop
      }
      p += 1024;
 8015be2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8015be6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015bea:	b29b      	uxth	r3, r3
 8015bec:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    for(n=0; n<300;){
 8015bf0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015bf4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015bf8:	dbed      	blt.n	8015bd6 <WaveProcess+0x796>
    }
  }
  if((i == Dpth)&&(Status != STOP))
 8015bfa:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8015bfe:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8015c02:	429a      	cmp	r2, r3
 8015c04:	d106      	bne.n	8015c14 <WaveProcess+0x7d4>
 8015c06:	4b05      	ldr	r3, [pc, #20]	; (8015c1c <WaveProcess+0x7dc>)
 8015c08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015c0c:	2b01      	cmp	r3, #1
 8015c0e:	d001      	beq.n	8015c14 <WaveProcess+0x7d4>
  {
	  ADC_Start();       // ���¿�ʼ ADC ɨ�����
 8015c10:	f7f6 fdc4 	bl	800c79c <ADC_Start>
  }
}
 8015c14:	bf00      	nop
 8015c16:	3750      	adds	r7, #80	; 0x50
 8015c18:	46bd      	mov	sp, r7
 8015c1a:	bd80      	pop	{r7, pc}
 8015c1c:	200007a8 	.word	0x200007a8
 8015c20:	20000298 	.word	0x20000298
 8015c24:	2000688c 	.word	0x2000688c
 8015c28:	20002850 	.word	0x20002850
 8015c2c:	20000c10 	.word	0x20000c10
 8015c30:	200007af 	.word	0x200007af

08015c34 <Build_Ext>:

/*******************************************************************************
 Build_Ext: ��չͨ��������ʾ
*******************************************************************************/
void  Build_Ext(short x, char Ext, char Yp)
{
 8015c34:	b480      	push	{r7}
 8015c36:	b085      	sub	sp, #20
 8015c38:	af00      	add	r7, sp, #0
 8015c3a:	4603      	mov	r3, r0
 8015c3c:	80fb      	strh	r3, [r7, #6]
 8015c3e:	460b      	mov	r3, r1
 8015c40:	717b      	strb	r3, [r7, #5]
 8015c42:	4613      	mov	r3, r2
 8015c44:	713b      	strb	r3, [r7, #4]
  char* Buf = WaveBuf + TRACK1_SIZE;
 8015c46:	4b69      	ldr	r3, [pc, #420]	; (8015dec <Build_Ext+0x1b8>)
 8015c48:	60bb      	str	r3, [r7, #8]
  short  Vo;

  Posi_2F1 = List[EXT_POSI].Val -  Data[1] - List[V0_POSI].Val;
 8015c4a:	4b69      	ldr	r3, [pc, #420]	; (8015df0 <Build_Ext+0x1bc>)
 8015c4c:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015c50:	b29a      	uxth	r2, r3
 8015c52:	4b68      	ldr	r3, [pc, #416]	; (8015df4 <Build_Ext+0x1c0>)
 8015c54:	785b      	ldrb	r3, [r3, #1]
 8015c56:	b29b      	uxth	r3, r3
 8015c58:	1ad3      	subs	r3, r2, r3
 8015c5a:	b29a      	uxth	r2, r3
 8015c5c:	4b64      	ldr	r3, [pc, #400]	; (8015df0 <Build_Ext+0x1bc>)
 8015c5e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015c62:	b29b      	uxth	r3, r3
 8015c64:	1ad3      	subs	r3, r2, r3
 8015c66:	b29b      	uxth	r3, r3
 8015c68:	b21a      	sxth	r2, r3
 8015c6a:	4b63      	ldr	r3, [pc, #396]	; (8015df8 <Build_Ext+0x1c4>)
 8015c6c:	801a      	strh	r2, [r3, #0]
  Posi_2F2 = List[EXT_POSI].Val;// - Data[2];
 8015c6e:	4b60      	ldr	r3, [pc, #384]	; (8015df0 <Build_Ext+0x1bc>)
 8015c70:	f9b3 20dc 	ldrsh.w	r2, [r3, #220]	; 0xdc
 8015c74:	4b61      	ldr	r3, [pc, #388]	; (8015dfc <Build_Ext+0x1c8>)
 8015c76:	801a      	strh	r2, [r3, #0]

  switch(Ext)
 8015c78:	797b      	ldrb	r3, [r7, #5]
 8015c7a:	2b05      	cmp	r3, #5
 8015c7c:	f200 809c 	bhi.w	8015db8 <Build_Ext+0x184>
 8015c80:	a201      	add	r2, pc, #4	; (adr r2, 8015c88 <Build_Ext+0x54>)
 8015c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c86:	bf00      	nop
 8015c88:	08015ca1 	.word	0x08015ca1
 8015c8c:	08015cc7 	.word	0x08015cc7
 8015c90:	08015ced 	.word	0x08015ced
 8015c94:	08015d17 	.word	0x08015d17
 8015c98:	08015d57 	.word	0x08015d57
 8015c9c:	08015d97 	.word	0x08015d97
  {
  case 0: // D
    Vo = Data[x+10]-Data[1]+List[EXT_POSI].Val; break;
 8015ca0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015ca4:	330a      	adds	r3, #10
 8015ca6:	4a53      	ldr	r2, [pc, #332]	; (8015df4 <Build_Ext+0x1c0>)
 8015ca8:	5cd3      	ldrb	r3, [r2, r3]
 8015caa:	b29a      	uxth	r2, r3
 8015cac:	4b51      	ldr	r3, [pc, #324]	; (8015df4 <Build_Ext+0x1c0>)
 8015cae:	785b      	ldrb	r3, [r3, #1]
 8015cb0:	b29b      	uxth	r3, r3
 8015cb2:	1ad3      	subs	r3, r2, r3
 8015cb4:	b29a      	uxth	r2, r3
 8015cb6:	4b4e      	ldr	r3, [pc, #312]	; (8015df0 <Build_Ext+0x1bc>)
 8015cb8:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015cbc:	b29b      	uxth	r3, r3
 8015cbe:	4413      	add	r3, r2
 8015cc0:	b29b      	uxth	r3, r3
 8015cc2:	81fb      	strh	r3, [r7, #14]
 8015cc4:	e078      	b.n	8015db8 <Build_Ext+0x184>
  case 1: // -D
    Vo = List[EXT_POSI].Val+Data[1]-Data[x+10]; break;
 8015cc6:	4b4a      	ldr	r3, [pc, #296]	; (8015df0 <Build_Ext+0x1bc>)
 8015cc8:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015ccc:	b29a      	uxth	r2, r3
 8015cce:	4b49      	ldr	r3, [pc, #292]	; (8015df4 <Build_Ext+0x1c0>)
 8015cd0:	785b      	ldrb	r3, [r3, #1]
 8015cd2:	b29b      	uxth	r3, r3
 8015cd4:	4413      	add	r3, r2
 8015cd6:	b29a      	uxth	r2, r3
 8015cd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015cdc:	330a      	adds	r3, #10
 8015cde:	4945      	ldr	r1, [pc, #276]	; (8015df4 <Build_Ext+0x1c0>)
 8015ce0:	5ccb      	ldrb	r3, [r1, r3]
 8015ce2:	b29b      	uxth	r3, r3
 8015ce4:	1ad3      	subs	r3, r2, r3
 8015ce6:	b29b      	uxth	r3, r3
 8015ce8:	81fb      	strh	r3, [r7, #14]
 8015cea:	e065      	b.n	8015db8 <Build_Ext+0x184>
  case 2: // Inp+D
    Vo = Data[x+10]+ WaveBuf[x]+Posi_2F1; break;
 8015cec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015cf0:	330a      	adds	r3, #10
 8015cf2:	4a40      	ldr	r2, [pc, #256]	; (8015df4 <Build_Ext+0x1c0>)
 8015cf4:	5cd3      	ldrb	r3, [r2, r3]
 8015cf6:	b29a      	uxth	r2, r3
 8015cf8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015cfc:	4940      	ldr	r1, [pc, #256]	; (8015e00 <Build_Ext+0x1cc>)
 8015cfe:	5ccb      	ldrb	r3, [r1, r3]
 8015d00:	b29b      	uxth	r3, r3
 8015d02:	4413      	add	r3, r2
 8015d04:	b29a      	uxth	r2, r3
 8015d06:	4b3c      	ldr	r3, [pc, #240]	; (8015df8 <Build_Ext+0x1c4>)
 8015d08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015d0c:	b29b      	uxth	r3, r3
 8015d0e:	4413      	add	r3, r2
 8015d10:	b29b      	uxth	r3, r3
 8015d12:	81fb      	strh	r3, [r7, #14]
 8015d14:	e050      	b.n	8015db8 <Build_Ext+0x184>
  case 3: // D-Inp
    Vo = (Data[x+10]-Data[1])- (WaveBuf[x]-List[V0_POSI].Val)+ List[EXT_POSI].Val; break;
 8015d16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015d1a:	330a      	adds	r3, #10
 8015d1c:	4a35      	ldr	r2, [pc, #212]	; (8015df4 <Build_Ext+0x1c0>)
 8015d1e:	5cd3      	ldrb	r3, [r2, r3]
 8015d20:	b29a      	uxth	r2, r3
 8015d22:	4b34      	ldr	r3, [pc, #208]	; (8015df4 <Build_Ext+0x1c0>)
 8015d24:	785b      	ldrb	r3, [r3, #1]
 8015d26:	b29b      	uxth	r3, r3
 8015d28:	1ad3      	subs	r3, r2, r3
 8015d2a:	b29a      	uxth	r2, r3
 8015d2c:	4b30      	ldr	r3, [pc, #192]	; (8015df0 <Build_Ext+0x1bc>)
 8015d2e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015d32:	b299      	uxth	r1, r3
 8015d34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015d38:	4831      	ldr	r0, [pc, #196]	; (8015e00 <Build_Ext+0x1cc>)
 8015d3a:	5cc3      	ldrb	r3, [r0, r3]
 8015d3c:	b29b      	uxth	r3, r3
 8015d3e:	1acb      	subs	r3, r1, r3
 8015d40:	b29b      	uxth	r3, r3
 8015d42:	4413      	add	r3, r2
 8015d44:	b29a      	uxth	r2, r3
 8015d46:	4b2a      	ldr	r3, [pc, #168]	; (8015df0 <Build_Ext+0x1bc>)
 8015d48:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015d4c:	b29b      	uxth	r3, r3
 8015d4e:	4413      	add	r3, r2
 8015d50:	b29b      	uxth	r3, r3
 8015d52:	81fb      	strh	r3, [r7, #14]
 8015d54:	e030      	b.n	8015db8 <Build_Ext+0x184>
  case 4: // Inp-D
    Vo = (WaveBuf[x]-List[V0_POSI].Val)-(Data[x+10]-Data[1]) + List[EXT_POSI].Val; break;
 8015d56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015d5a:	4a29      	ldr	r2, [pc, #164]	; (8015e00 <Build_Ext+0x1cc>)
 8015d5c:	5cd3      	ldrb	r3, [r2, r3]
 8015d5e:	b29a      	uxth	r2, r3
 8015d60:	4b23      	ldr	r3, [pc, #140]	; (8015df0 <Build_Ext+0x1bc>)
 8015d62:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015d66:	b29b      	uxth	r3, r3
 8015d68:	1ad3      	subs	r3, r2, r3
 8015d6a:	b29a      	uxth	r2, r3
 8015d6c:	4b21      	ldr	r3, [pc, #132]	; (8015df4 <Build_Ext+0x1c0>)
 8015d6e:	785b      	ldrb	r3, [r3, #1]
 8015d70:	b299      	uxth	r1, r3
 8015d72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015d76:	330a      	adds	r3, #10
 8015d78:	481e      	ldr	r0, [pc, #120]	; (8015df4 <Build_Ext+0x1c0>)
 8015d7a:	5cc3      	ldrb	r3, [r0, r3]
 8015d7c:	b29b      	uxth	r3, r3
 8015d7e:	1acb      	subs	r3, r1, r3
 8015d80:	b29b      	uxth	r3, r3
 8015d82:	4413      	add	r3, r2
 8015d84:	b29a      	uxth	r2, r3
 8015d86:	4b1a      	ldr	r3, [pc, #104]	; (8015df0 <Build_Ext+0x1bc>)
 8015d88:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015d8c:	b29b      	uxth	r3, r3
 8015d8e:	4413      	add	r3, r2
 8015d90:	b29b      	uxth	r3, r3
 8015d92:	81fb      	strh	r3, [r7, #14]
 8015d94:	e010      	b.n	8015db8 <Build_Ext+0x184>
  case 5: // -Inp
    Vo = Yp+List[EXT_POSI].Val - WaveBuf[x]; break;
 8015d96:	793b      	ldrb	r3, [r7, #4]
 8015d98:	b29a      	uxth	r2, r3
 8015d9a:	4b15      	ldr	r3, [pc, #84]	; (8015df0 <Build_Ext+0x1bc>)
 8015d9c:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015da0:	b29b      	uxth	r3, r3
 8015da2:	4413      	add	r3, r2
 8015da4:	b29a      	uxth	r2, r3
 8015da6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015daa:	4915      	ldr	r1, [pc, #84]	; (8015e00 <Build_Ext+0x1cc>)
 8015dac:	5ccb      	ldrb	r3, [r1, r3]
 8015dae:	b29b      	uxth	r3, r3
 8015db0:	1ad3      	subs	r3, r2, r3
 8015db2:	b29b      	uxth	r3, r3
 8015db4:	81fb      	strh	r3, [r7, #14]
 8015db6:	bf00      	nop
  }
  if(Vo > 199) Vo = 202;
 8015db8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015dbc:	2bc7      	cmp	r3, #199	; 0xc7
 8015dbe:	dd01      	ble.n	8015dc4 <Build_Ext+0x190>
 8015dc0:	23ca      	movs	r3, #202	; 0xca
 8015dc2:	81fb      	strh	r3, [r7, #14]
  if(Vo <   3) Vo = 1;                     // �����޷�
 8015dc4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015dc8:	2b02      	cmp	r3, #2
 8015dca:	dc01      	bgt.n	8015dd0 <Build_Ext+0x19c>
 8015dcc:	2301      	movs	r3, #1
 8015dce:	81fb      	strh	r3, [r7, #14]
  Buf[x]= Vo;
 8015dd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015dd4:	68ba      	ldr	r2, [r7, #8]
 8015dd6:	4413      	add	r3, r2
 8015dd8:	89fa      	ldrh	r2, [r7, #14]
 8015dda:	b2d2      	uxtb	r2, r2
 8015ddc:	701a      	strb	r2, [r3, #0]
}
 8015dde:	bf00      	nop
 8015de0:	3714      	adds	r7, #20
 8015de2:	46bd      	mov	sp, r7
 8015de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015de8:	4770      	bx	lr
 8015dea:	bf00      	nop
 8015dec:	20000d3c 	.word	0x20000d3c
 8015df0:	20000298 	.word	0x20000298
 8015df4:	20000008 	.word	0x20000008
 8015df8:	20002854 	.word	0x20002854
 8015dfc:	2000687c 	.word	0x2000687c
 8015e00:	20000c10 	.word	0x20000c10

08015e04 <Auto_Fit>:

void Auto_Fit(void)
{
 8015e04:	b590      	push	{r4, r7, lr}
 8015e06:	b083      	sub	sp, #12
 8015e08:	af00      	add	r7, sp, #0
  char i,j,k=0;
 8015e0a:	2300      	movs	r3, #0
 8015e0c:	717b      	strb	r3, [r7, #5]
  short Tmp,Tmp1;

  if(Status != STOP){
 8015e0e:	4b38      	ldr	r3, [pc, #224]	; (8015ef0 <Auto_Fit+0xec>)
 8015e10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015e14:	2b01      	cmp	r3, #1
 8015e16:	f000 83de 	beq.w	80165d6 <Auto_Fit+0x7d2>
    //======��ѹ���Զ�ѡ��==============
    for(i=0;i<9;i++){
 8015e1a:	2300      	movs	r3, #0
 8015e1c:	71fb      	strb	r3, [r7, #7]
 8015e1e:	e098      	b.n	8015f52 <Auto_Fit+0x14e>
      //******Aͨ��***********
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015e20:	4b34      	ldr	r3, [pc, #208]	; (8015ef4 <Auto_Fit+0xf0>)
 8015e22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015e26:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015e2a:	4a33      	ldr	r2, [pc, #204]	; (8015ef8 <Auto_Fit+0xf4>)
 8015e2c:	6811      	ldr	r1, [r2, #0]
 8015e2e:	4a33      	ldr	r2, [pc, #204]	; (8015efc <Auto_Fit+0xf8>)
 8015e30:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015e34:	4610      	mov	r0, r2
 8015e36:	4a32      	ldr	r2, [pc, #200]	; (8015f00 <Auto_Fit+0xfc>)
 8015e38:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015e3c:	2a00      	cmp	r2, #0
 8015e3e:	bf14      	ite	ne
 8015e40:	2201      	movne	r2, #1
 8015e42:	2200      	moveq	r2, #0
 8015e44:	b2d2      	uxtb	r2, r2
 8015e46:	4402      	add	r2, r0
 8015e48:	0052      	lsls	r2, r2, #1
 8015e4a:	440a      	add	r2, r1
 8015e4c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015e50:	0092      	lsls	r2, r2, #2
 8015e52:	492c      	ldr	r1, [pc, #176]	; (8015f04 <Auto_Fit+0x100>)
 8015e54:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015e58:	4608      	mov	r0, r1
 8015e5a:	492b      	ldr	r1, [pc, #172]	; (8015f08 <Auto_Fit+0x104>)
 8015e5c:	5c09      	ldrb	r1, [r1, r0]
 8015e5e:	fb92 f2f1 	sdiv	r2, r2, r1
 8015e62:	fb02 f303 	mul.w	r3, r2, r3
 8015e66:	131b      	asrs	r3, r3, #12
           - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val);
 8015e68:	b29a      	uxth	r2, r3
 8015e6a:	4b28      	ldr	r3, [pc, #160]	; (8015f0c <Auto_Fit+0x108>)
 8015e6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015e70:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015e74:	4920      	ldr	r1, [pc, #128]	; (8015ef8 <Auto_Fit+0xf4>)
 8015e76:	6808      	ldr	r0, [r1, #0]
 8015e78:	4920      	ldr	r1, [pc, #128]	; (8015efc <Auto_Fit+0xf8>)
 8015e7a:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015e7e:	460c      	mov	r4, r1
 8015e80:	491f      	ldr	r1, [pc, #124]	; (8015f00 <Auto_Fit+0xfc>)
 8015e82:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015e86:	2900      	cmp	r1, #0
 8015e88:	bf14      	ite	ne
 8015e8a:	2101      	movne	r1, #1
 8015e8c:	2100      	moveq	r1, #0
 8015e8e:	b2c9      	uxtb	r1, r1
 8015e90:	4421      	add	r1, r4
 8015e92:	0049      	lsls	r1, r1, #1
 8015e94:	4401      	add	r1, r0
 8015e96:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015e9a:	0089      	lsls	r1, r1, #2
 8015e9c:	4819      	ldr	r0, [pc, #100]	; (8015f04 <Auto_Fit+0x100>)
 8015e9e:	f9b0 0000 	ldrsh.w	r0, [r0]
 8015ea2:	4604      	mov	r4, r0
 8015ea4:	4818      	ldr	r0, [pc, #96]	; (8015f08 <Auto_Fit+0x104>)
 8015ea6:	5d00      	ldrb	r0, [r0, r4]
 8015ea8:	fb91 f1f0 	sdiv	r1, r1, r0
 8015eac:	fb01 f303 	mul.w	r3, r1, r3
 8015eb0:	131b      	asrs	r3, r3, #12
 8015eb2:	b29b      	uxth	r3, r3
 8015eb4:	1ad3      	subs	r3, r2, r3
 8015eb6:	b29b      	uxth	r3, r3
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015eb8:	803b      	strh	r3, [r7, #0]
      if((Tmp1 < 40)&&(List[Y_RANGES].Val > 2)){       //40
 8015eba:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015ebe:	2b27      	cmp	r3, #39	; 0x27
 8015ec0:	dc28      	bgt.n	8015f14 <Auto_Fit+0x110>
 8015ec2:	4b13      	ldr	r3, [pc, #76]	; (8015f10 <Auto_Fit+0x10c>)
 8015ec4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015ec8:	2b02      	cmp	r3, #2
 8015eca:	dd23      	ble.n	8015f14 <Auto_Fit+0x110>
        List[Y_RANGES].Val--;
 8015ecc:	4b10      	ldr	r3, [pc, #64]	; (8015f10 <Auto_Fit+0x10c>)
 8015ece:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015ed2:	b29b      	uxth	r3, r3
 8015ed4:	3b01      	subs	r3, #1
 8015ed6:	b29b      	uxth	r3, r3
 8015ed8:	b21a      	sxth	r2, r3
 8015eda:	4b0d      	ldr	r3, [pc, #52]	; (8015f10 <Auto_Fit+0x10c>)
 8015edc:	809a      	strh	r2, [r3, #4]
        List[V0_POSI].Val=100;
 8015ede:	4b0c      	ldr	r3, [pc, #48]	; (8015f10 <Auto_Fit+0x10c>)
 8015ee0:	2264      	movs	r2, #100	; 0x64
 8015ee2:	839a      	strh	r2, [r3, #28]
        WaveProcess();
 8015ee4:	f7ff faac 	bl	8015440 <WaveProcess>
        Update_Proc_All();
 8015ee8:	f7fe ff32 	bl	8014d50 <Update_Proc_All>
 8015eec:	e02b      	b.n	8015f46 <Auto_Fit+0x142>
 8015eee:	bf00      	nop
 8015ef0:	200007a8 	.word	0x200007a8
 8015ef4:	2000285e 	.word	0x2000285e
 8015ef8:	2000057c 	.word	0x2000057c
 8015efc:	2000688e 	.word	0x2000688e
 8015f00:	2000286a 	.word	0x2000286a
 8015f04:	20002852 	.word	0x20002852
 8015f08:	20000560 	.word	0x20000560
 8015f0c:	20002870 	.word	0x20002870
 8015f10:	20000298 	.word	0x20000298
      }
      else if((Tmp1 > 110)&&(List[Y_RANGES].Val < 9)){ //110
 8015f14:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015f18:	2b6e      	cmp	r3, #110	; 0x6e
 8015f1a:	dd14      	ble.n	8015f46 <Auto_Fit+0x142>
 8015f1c:	4bbe      	ldr	r3, [pc, #760]	; (8016218 <Auto_Fit+0x414>)
 8015f1e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015f22:	2b08      	cmp	r3, #8
 8015f24:	dc0f      	bgt.n	8015f46 <Auto_Fit+0x142>
        List[Y_RANGES].Val++;
 8015f26:	4bbc      	ldr	r3, [pc, #752]	; (8016218 <Auto_Fit+0x414>)
 8015f28:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015f2c:	b29b      	uxth	r3, r3
 8015f2e:	3301      	adds	r3, #1
 8015f30:	b29b      	uxth	r3, r3
 8015f32:	b21a      	sxth	r2, r3
 8015f34:	4bb8      	ldr	r3, [pc, #736]	; (8016218 <Auto_Fit+0x414>)
 8015f36:	809a      	strh	r2, [r3, #4]
        List[V0_POSI].Val=100;
 8015f38:	4bb7      	ldr	r3, [pc, #732]	; (8016218 <Auto_Fit+0x414>)
 8015f3a:	2264      	movs	r2, #100	; 0x64
 8015f3c:	839a      	strh	r2, [r3, #28]
        WaveProcess();
 8015f3e:	f7ff fa7f 	bl	8015440 <WaveProcess>
        Update_Proc_All();
 8015f42:	f7fe ff05 	bl	8014d50 <Update_Proc_All>
      }
      HAL_Delay(50);
 8015f46:	2032      	movs	r0, #50	; 0x32
 8015f48:	f002 fc5a 	bl	8018800 <HAL_Delay>
    for(i=0;i<9;i++){
 8015f4c:	79fb      	ldrb	r3, [r7, #7]
 8015f4e:	3301      	adds	r3, #1
 8015f50:	71fb      	strb	r3, [r7, #7]
 8015f52:	79fb      	ldrb	r3, [r7, #7]
 8015f54:	2b08      	cmp	r3, #8
 8015f56:	f67f af63 	bls.w	8015e20 <Auto_Fit+0x1c>
    //============ʶ�𴥷�Դ======================


    //======�������Զ�ѡ��==============
    //if(!List[TRI_Ch]){//******Aͨ��***********
      Tmp = (((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015f5a:	4bb0      	ldr	r3, [pc, #704]	; (801621c <Auto_Fit+0x418>)
 8015f5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015f60:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015f64:	4aae      	ldr	r2, [pc, #696]	; (8016220 <Auto_Fit+0x41c>)
 8015f66:	6811      	ldr	r1, [r2, #0]
 8015f68:	4aae      	ldr	r2, [pc, #696]	; (8016224 <Auto_Fit+0x420>)
 8015f6a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015f6e:	4610      	mov	r0, r2
 8015f70:	4aad      	ldr	r2, [pc, #692]	; (8016228 <Auto_Fit+0x424>)
 8015f72:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015f76:	2a00      	cmp	r2, #0
 8015f78:	bf14      	ite	ne
 8015f7a:	2201      	movne	r2, #1
 8015f7c:	2200      	moveq	r2, #0
 8015f7e:	b2d2      	uxtb	r2, r2
 8015f80:	4402      	add	r2, r0
 8015f82:	0052      	lsls	r2, r2, #1
 8015f84:	440a      	add	r2, r1
 8015f86:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015f8a:	0092      	lsls	r2, r2, #2
 8015f8c:	49a7      	ldr	r1, [pc, #668]	; (801622c <Auto_Fit+0x428>)
 8015f8e:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015f92:	4608      	mov	r0, r1
 8015f94:	49a6      	ldr	r1, [pc, #664]	; (8016230 <Auto_Fit+0x42c>)
 8015f96:	5c09      	ldrb	r1, [r1, r0]
 8015f98:	fb92 f2f1 	sdiv	r2, r2, r1
 8015f9c:	fb02 f303 	mul.w	r3, r2, r3
 8015fa0:	131a      	asrs	r2, r3, #12
           - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val))/4;
 8015fa2:	4ba4      	ldr	r3, [pc, #656]	; (8016234 <Auto_Fit+0x430>)
 8015fa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015fa8:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015fac:	499c      	ldr	r1, [pc, #624]	; (8016220 <Auto_Fit+0x41c>)
 8015fae:	6808      	ldr	r0, [r1, #0]
 8015fb0:	499c      	ldr	r1, [pc, #624]	; (8016224 <Auto_Fit+0x420>)
 8015fb2:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015fb6:	460c      	mov	r4, r1
 8015fb8:	499b      	ldr	r1, [pc, #620]	; (8016228 <Auto_Fit+0x424>)
 8015fba:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015fbe:	2900      	cmp	r1, #0
 8015fc0:	bf14      	ite	ne
 8015fc2:	2101      	movne	r1, #1
 8015fc4:	2100      	moveq	r1, #0
 8015fc6:	b2c9      	uxtb	r1, r1
 8015fc8:	4421      	add	r1, r4
 8015fca:	0049      	lsls	r1, r1, #1
 8015fcc:	4401      	add	r1, r0
 8015fce:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015fd2:	0089      	lsls	r1, r1, #2
 8015fd4:	4895      	ldr	r0, [pc, #596]	; (801622c <Auto_Fit+0x428>)
 8015fd6:	f9b0 0000 	ldrsh.w	r0, [r0]
 8015fda:	4604      	mov	r4, r0
 8015fdc:	4894      	ldr	r0, [pc, #592]	; (8016230 <Auto_Fit+0x42c>)
 8015fde:	5d00      	ldrb	r0, [r0, r4]
 8015fe0:	fb91 f1f0 	sdiv	r1, r1, r0
 8015fe4:	fb01 f303 	mul.w	r3, r1, r3
 8015fe8:	131b      	asrs	r3, r3, #12
 8015fea:	1ad3      	subs	r3, r2, r3
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	da00      	bge.n	8015ff2 <Auto_Fit+0x1ee>
 8015ff0:	3303      	adds	r3, #3
 8015ff2:	109b      	asrs	r3, r3, #2
      Tmp = (((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015ff4:	807b      	strh	r3, [r7, #2]
      if((List[THRESHOLD].Val > (((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)  + Tmp))||
 8015ff6:	4b88      	ldr	r3, [pc, #544]	; (8016218 <Auto_Fit+0x414>)
 8015ff8:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8015ffc:	4618      	mov	r0, r3
 8015ffe:	4b8e      	ldr	r3, [pc, #568]	; (8016238 <Auto_Fit+0x434>)
 8016000:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016004:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8016008:	4a85      	ldr	r2, [pc, #532]	; (8016220 <Auto_Fit+0x41c>)
 801600a:	6811      	ldr	r1, [r2, #0]
 801600c:	4a85      	ldr	r2, [pc, #532]	; (8016224 <Auto_Fit+0x420>)
 801600e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016012:	4614      	mov	r4, r2
 8016014:	4a84      	ldr	r2, [pc, #528]	; (8016228 <Auto_Fit+0x424>)
 8016016:	f9b2 2000 	ldrsh.w	r2, [r2]
 801601a:	2a00      	cmp	r2, #0
 801601c:	bf14      	ite	ne
 801601e:	2201      	movne	r2, #1
 8016020:	2200      	moveq	r2, #0
 8016022:	b2d2      	uxtb	r2, r2
 8016024:	4422      	add	r2, r4
 8016026:	0052      	lsls	r2, r2, #1
 8016028:	440a      	add	r2, r1
 801602a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801602e:	0092      	lsls	r2, r2, #2
 8016030:	497e      	ldr	r1, [pc, #504]	; (801622c <Auto_Fit+0x428>)
 8016032:	f9b1 1000 	ldrsh.w	r1, [r1]
 8016036:	460c      	mov	r4, r1
 8016038:	497d      	ldr	r1, [pc, #500]	; (8016230 <Auto_Fit+0x42c>)
 801603a:	5d09      	ldrb	r1, [r1, r4]
 801603c:	fb92 f2f1 	sdiv	r2, r2, r1
 8016040:	fb02 f303 	mul.w	r3, r2, r3
 8016044:	131b      	asrs	r3, r3, #12
 8016046:	3364      	adds	r3, #100	; 0x64
 8016048:	4a73      	ldr	r2, [pc, #460]	; (8016218 <Auto_Fit+0x414>)
 801604a:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 801604e:	1a9a      	subs	r2, r3, r2
 8016050:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016054:	4413      	add	r3, r2
 8016056:	4298      	cmp	r0, r3
 8016058:	dc32      	bgt.n	80160c0 <Auto_Fit+0x2bc>
         (List[THRESHOLD].Val < (((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)  - Tmp))){
 801605a:	4b6f      	ldr	r3, [pc, #444]	; (8016218 <Auto_Fit+0x414>)
 801605c:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8016060:	4618      	mov	r0, r3
 8016062:	4b75      	ldr	r3, [pc, #468]	; (8016238 <Auto_Fit+0x434>)
 8016064:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016068:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801606c:	4a6c      	ldr	r2, [pc, #432]	; (8016220 <Auto_Fit+0x41c>)
 801606e:	6811      	ldr	r1, [r2, #0]
 8016070:	4a6c      	ldr	r2, [pc, #432]	; (8016224 <Auto_Fit+0x420>)
 8016072:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016076:	4614      	mov	r4, r2
 8016078:	4a6b      	ldr	r2, [pc, #428]	; (8016228 <Auto_Fit+0x424>)
 801607a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801607e:	2a00      	cmp	r2, #0
 8016080:	bf14      	ite	ne
 8016082:	2201      	movne	r2, #1
 8016084:	2200      	moveq	r2, #0
 8016086:	b2d2      	uxtb	r2, r2
 8016088:	4422      	add	r2, r4
 801608a:	0052      	lsls	r2, r2, #1
 801608c:	440a      	add	r2, r1
 801608e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016092:	0092      	lsls	r2, r2, #2
 8016094:	4965      	ldr	r1, [pc, #404]	; (801622c <Auto_Fit+0x428>)
 8016096:	f9b1 1000 	ldrsh.w	r1, [r1]
 801609a:	460c      	mov	r4, r1
 801609c:	4964      	ldr	r1, [pc, #400]	; (8016230 <Auto_Fit+0x42c>)
 801609e:	5d09      	ldrb	r1, [r1, r4]
 80160a0:	fb92 f2f1 	sdiv	r2, r2, r1
 80160a4:	fb02 f303 	mul.w	r3, r2, r3
 80160a8:	131b      	asrs	r3, r3, #12
 80160aa:	3364      	adds	r3, #100	; 0x64
 80160ac:	4a5a      	ldr	r2, [pc, #360]	; (8016218 <Auto_Fit+0x414>)
 80160ae:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 80160b2:	1a9a      	subs	r2, r3, r2
 80160b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80160b8:	1ad3      	subs	r3, r2, r3
      if((List[THRESHOLD].Val > (((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)  + Tmp))||
 80160ba:	4298      	cmp	r0, r3
 80160bc:	f280 808e 	bge.w	80161dc <Auto_Fit+0x3d8>
           if(abs(((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)+15)<195)
 80160c0:	4b5d      	ldr	r3, [pc, #372]	; (8016238 <Auto_Fit+0x434>)
 80160c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80160c6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80160ca:	4a55      	ldr	r2, [pc, #340]	; (8016220 <Auto_Fit+0x41c>)
 80160cc:	6811      	ldr	r1, [r2, #0]
 80160ce:	4a55      	ldr	r2, [pc, #340]	; (8016224 <Auto_Fit+0x420>)
 80160d0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80160d4:	4610      	mov	r0, r2
 80160d6:	4a54      	ldr	r2, [pc, #336]	; (8016228 <Auto_Fit+0x424>)
 80160d8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80160dc:	2a00      	cmp	r2, #0
 80160de:	bf14      	ite	ne
 80160e0:	2201      	movne	r2, #1
 80160e2:	2200      	moveq	r2, #0
 80160e4:	b2d2      	uxtb	r2, r2
 80160e6:	4402      	add	r2, r0
 80160e8:	0052      	lsls	r2, r2, #1
 80160ea:	440a      	add	r2, r1
 80160ec:	f9b2 2000 	ldrsh.w	r2, [r2]
 80160f0:	0092      	lsls	r2, r2, #2
 80160f2:	494e      	ldr	r1, [pc, #312]	; (801622c <Auto_Fit+0x428>)
 80160f4:	f9b1 1000 	ldrsh.w	r1, [r1]
 80160f8:	4608      	mov	r0, r1
 80160fa:	494d      	ldr	r1, [pc, #308]	; (8016230 <Auto_Fit+0x42c>)
 80160fc:	5c09      	ldrb	r1, [r1, r0]
 80160fe:	fb92 f2f1 	sdiv	r2, r2, r1
 8016102:	fb02 f303 	mul.w	r3, r2, r3
 8016106:	131b      	asrs	r3, r3, #12
 8016108:	3364      	adds	r3, #100	; 0x64
 801610a:	4a43      	ldr	r2, [pc, #268]	; (8016218 <Auto_Fit+0x414>)
 801610c:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8016110:	1a9b      	subs	r3, r3, r2
 8016112:	330f      	adds	r3, #15
 8016114:	f113 0fc2 	cmn.w	r3, #194	; 0xc2
 8016118:	db5c      	blt.n	80161d4 <Auto_Fit+0x3d0>
 801611a:	4b47      	ldr	r3, [pc, #284]	; (8016238 <Auto_Fit+0x434>)
 801611c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016120:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8016124:	4a3e      	ldr	r2, [pc, #248]	; (8016220 <Auto_Fit+0x41c>)
 8016126:	6811      	ldr	r1, [r2, #0]
 8016128:	4a3e      	ldr	r2, [pc, #248]	; (8016224 <Auto_Fit+0x420>)
 801612a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801612e:	4610      	mov	r0, r2
 8016130:	4a3d      	ldr	r2, [pc, #244]	; (8016228 <Auto_Fit+0x424>)
 8016132:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016136:	2a00      	cmp	r2, #0
 8016138:	bf14      	ite	ne
 801613a:	2201      	movne	r2, #1
 801613c:	2200      	moveq	r2, #0
 801613e:	b2d2      	uxtb	r2, r2
 8016140:	4402      	add	r2, r0
 8016142:	0052      	lsls	r2, r2, #1
 8016144:	440a      	add	r2, r1
 8016146:	f9b2 2000 	ldrsh.w	r2, [r2]
 801614a:	0092      	lsls	r2, r2, #2
 801614c:	4937      	ldr	r1, [pc, #220]	; (801622c <Auto_Fit+0x428>)
 801614e:	f9b1 1000 	ldrsh.w	r1, [r1]
 8016152:	4608      	mov	r0, r1
 8016154:	4936      	ldr	r1, [pc, #216]	; (8016230 <Auto_Fit+0x42c>)
 8016156:	5c09      	ldrb	r1, [r1, r0]
 8016158:	fb92 f2f1 	sdiv	r2, r2, r1
 801615c:	fb02 f303 	mul.w	r3, r2, r3
 8016160:	131b      	asrs	r3, r3, #12
 8016162:	3364      	adds	r3, #100	; 0x64
 8016164:	4a2c      	ldr	r2, [pc, #176]	; (8016218 <Auto_Fit+0x414>)
 8016166:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 801616a:	1a9b      	subs	r3, r3, r2
 801616c:	330f      	adds	r3, #15
 801616e:	2bc2      	cmp	r3, #194	; 0xc2
 8016170:	dc30      	bgt.n	80161d4 <Auto_Fit+0x3d0>
             List[THRESHOLD].Val = ((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)+15 ;
 8016172:	4b31      	ldr	r3, [pc, #196]	; (8016238 <Auto_Fit+0x434>)
 8016174:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016178:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801617c:	4a28      	ldr	r2, [pc, #160]	; (8016220 <Auto_Fit+0x41c>)
 801617e:	6811      	ldr	r1, [r2, #0]
 8016180:	4a28      	ldr	r2, [pc, #160]	; (8016224 <Auto_Fit+0x420>)
 8016182:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016186:	4610      	mov	r0, r2
 8016188:	4a27      	ldr	r2, [pc, #156]	; (8016228 <Auto_Fit+0x424>)
 801618a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801618e:	2a00      	cmp	r2, #0
 8016190:	bf14      	ite	ne
 8016192:	2201      	movne	r2, #1
 8016194:	2200      	moveq	r2, #0
 8016196:	b2d2      	uxtb	r2, r2
 8016198:	4402      	add	r2, r0
 801619a:	0052      	lsls	r2, r2, #1
 801619c:	440a      	add	r2, r1
 801619e:	f9b2 2000 	ldrsh.w	r2, [r2]
 80161a2:	0092      	lsls	r2, r2, #2
 80161a4:	4921      	ldr	r1, [pc, #132]	; (801622c <Auto_Fit+0x428>)
 80161a6:	f9b1 1000 	ldrsh.w	r1, [r1]
 80161aa:	4608      	mov	r0, r1
 80161ac:	4920      	ldr	r1, [pc, #128]	; (8016230 <Auto_Fit+0x42c>)
 80161ae:	5c09      	ldrb	r1, [r1, r0]
 80161b0:	fb92 f2f1 	sdiv	r2, r2, r1
 80161b4:	fb02 f303 	mul.w	r3, r2, r3
 80161b8:	131b      	asrs	r3, r3, #12
 80161ba:	b29a      	uxth	r2, r3
 80161bc:	4b16      	ldr	r3, [pc, #88]	; (8016218 <Auto_Fit+0x414>)
 80161be:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80161c2:	b29b      	uxth	r3, r3
 80161c4:	1ad3      	subs	r3, r2, r3
 80161c6:	b29b      	uxth	r3, r3
 80161c8:	3373      	adds	r3, #115	; 0x73
 80161ca:	b29b      	uxth	r3, r3
 80161cc:	b21a      	sxth	r2, r3
 80161ce:	4b12      	ldr	r3, [pc, #72]	; (8016218 <Auto_Fit+0x414>)
 80161d0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
           WaveProcess();
 80161d4:	f7ff f934 	bl	8015440 <WaveProcess>
           Update_Proc_All();
 80161d8:	f7fe fdba 	bl	8014d50 <Update_Proc_All>
         }

      ParamTab[VTx2]= ParamTab[P1x2] + 2*List[THRESHOLD].Val;
 80161dc:	4b17      	ldr	r3, [pc, #92]	; (801623c <Auto_Fit+0x438>)
 80161de:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80161e2:	b29a      	uxth	r2, r3
 80161e4:	4b0c      	ldr	r3, [pc, #48]	; (8016218 <Auto_Fit+0x414>)
 80161e6:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 80161ea:	b29b      	uxth	r3, r3
 80161ec:	005b      	lsls	r3, r3, #1
 80161ee:	b29b      	uxth	r3, r3
 80161f0:	4413      	add	r3, r2
 80161f2:	b29b      	uxth	r3, r3
 80161f4:	b21a      	sxth	r2, r3
 80161f6:	4b11      	ldr	r3, [pc, #68]	; (801623c <Auto_Fit+0x438>)
 80161f8:	839a      	strh	r2, [r3, #28]
      List[THRESHOLD].Flg |= UPD;
 80161fa:	4b07      	ldr	r3, [pc, #28]	; (8016218 <Auto_Fit+0x414>)
 80161fc:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8016200:	f043 0320 	orr.w	r3, r3, #32
 8016204:	b2da      	uxtb	r2, r3
 8016206:	4b04      	ldr	r3, [pc, #16]	; (8016218 <Auto_Fit+0x414>)
 8016208:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      Update_Title();
 801620c:	f7fc fa9c 	bl	8012748 <Update_Title>

    //===========��ƽʱ��������==================
    HAL_Delay(100);
 8016210:	2064      	movs	r0, #100	; 0x64
 8016212:	f002 faf5 	bl	8018800 <HAL_Delay>
 8016216:	e013      	b.n	8016240 <Auto_Fit+0x43c>
 8016218:	20000298 	.word	0x20000298
 801621c:	2000285e 	.word	0x2000285e
 8016220:	2000057c 	.word	0x2000057c
 8016224:	2000688e 	.word	0x2000688e
 8016228:	2000286a 	.word	0x2000286a
 801622c:	20002852 	.word	0x20002852
 8016230:	20000560 	.word	0x20000560
 8016234:	20002870 	.word	0x20002870
 8016238:	20002872 	.word	0x20002872
 801623c:	20000140 	.word	0x20000140

        if(((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)>10){
 8016240:	4ba3      	ldr	r3, [pc, #652]	; (80164d0 <Auto_Fit+0x6cc>)
 8016242:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016246:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801624a:	4aa2      	ldr	r2, [pc, #648]	; (80164d4 <Auto_Fit+0x6d0>)
 801624c:	6811      	ldr	r1, [r2, #0]
 801624e:	4aa2      	ldr	r2, [pc, #648]	; (80164d8 <Auto_Fit+0x6d4>)
 8016250:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016254:	4610      	mov	r0, r2
 8016256:	4aa1      	ldr	r2, [pc, #644]	; (80164dc <Auto_Fit+0x6d8>)
 8016258:	f9b2 2000 	ldrsh.w	r2, [r2]
 801625c:	2a00      	cmp	r2, #0
 801625e:	bf14      	ite	ne
 8016260:	2201      	movne	r2, #1
 8016262:	2200      	moveq	r2, #0
 8016264:	b2d2      	uxtb	r2, r2
 8016266:	4402      	add	r2, r0
 8016268:	0052      	lsls	r2, r2, #1
 801626a:	440a      	add	r2, r1
 801626c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016270:	0092      	lsls	r2, r2, #2
 8016272:	499b      	ldr	r1, [pc, #620]	; (80164e0 <Auto_Fit+0x6dc>)
 8016274:	f9b1 1000 	ldrsh.w	r1, [r1]
 8016278:	4608      	mov	r0, r1
 801627a:	499a      	ldr	r1, [pc, #616]	; (80164e4 <Auto_Fit+0x6e0>)
 801627c:	5c09      	ldrb	r1, [r1, r0]
 801627e:	fb92 f2f1 	sdiv	r2, r2, r1
 8016282:	fb02 f303 	mul.w	r3, r2, r3
 8016286:	131b      	asrs	r3, r3, #12
 8016288:	3364      	adds	r3, #100	; 0x64
 801628a:	4a97      	ldr	r2, [pc, #604]	; (80164e8 <Auto_Fit+0x6e4>)
 801628c:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8016290:	1a9b      	subs	r3, r3, r2
 8016292:	2b0a      	cmp	r3, #10
 8016294:	dd76      	ble.n	8016384 <Auto_Fit+0x580>
      WaveProcess();
 8016296:	f7ff f8d3 	bl	8015440 <WaveProcess>
      Update_Proc_All();
 801629a:	f7fe fd59 	bl	8014d50 <Update_Proc_All>
      HAL_Delay(100);
 801629e:	2064      	movs	r0, #100	; 0x64
 80162a0:	f002 faae 	bl	8018800 <HAL_Delay>
      for(i=0;i<9;i++){
 80162a4:	2300      	movs	r3, #0
 80162a6:	71fb      	strb	r3, [r7, #7]
 80162a8:	e068      	b.n	801637c <Auto_Fit+0x578>
        WaveProcess();
 80162aa:	f7ff f8c9 	bl	8015440 <WaveProcess>
        Tmp1 = (((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val;
 80162ae:	4b8f      	ldr	r3, [pc, #572]	; (80164ec <Auto_Fit+0x6e8>)
 80162b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80162b4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80162b8:	4a86      	ldr	r2, [pc, #536]	; (80164d4 <Auto_Fit+0x6d0>)
 80162ba:	6811      	ldr	r1, [r2, #0]
 80162bc:	4a86      	ldr	r2, [pc, #536]	; (80164d8 <Auto_Fit+0x6d4>)
 80162be:	f9b2 2000 	ldrsh.w	r2, [r2]
 80162c2:	4610      	mov	r0, r2
 80162c4:	4a85      	ldr	r2, [pc, #532]	; (80164dc <Auto_Fit+0x6d8>)
 80162c6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80162ca:	2a00      	cmp	r2, #0
 80162cc:	bf14      	ite	ne
 80162ce:	2201      	movne	r2, #1
 80162d0:	2200      	moveq	r2, #0
 80162d2:	b2d2      	uxtb	r2, r2
 80162d4:	4402      	add	r2, r0
 80162d6:	0052      	lsls	r2, r2, #1
 80162d8:	440a      	add	r2, r1
 80162da:	f9b2 2000 	ldrsh.w	r2, [r2]
 80162de:	0092      	lsls	r2, r2, #2
 80162e0:	497f      	ldr	r1, [pc, #508]	; (80164e0 <Auto_Fit+0x6dc>)
 80162e2:	f9b1 1000 	ldrsh.w	r1, [r1]
 80162e6:	4608      	mov	r0, r1
 80162e8:	497e      	ldr	r1, [pc, #504]	; (80164e4 <Auto_Fit+0x6e0>)
 80162ea:	5c09      	ldrb	r1, [r1, r0]
 80162ec:	fb92 f2f1 	sdiv	r2, r2, r1
 80162f0:	fb02 f303 	mul.w	r3, r2, r3
 80162f4:	131b      	asrs	r3, r3, #12
 80162f6:	b29a      	uxth	r2, r3
 80162f8:	4b7b      	ldr	r3, [pc, #492]	; (80164e8 <Auto_Fit+0x6e4>)
 80162fa:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80162fe:	b29b      	uxth	r3, r3
 8016300:	1ad3      	subs	r3, r2, r3
 8016302:	b29b      	uxth	r3, r3
 8016304:	3364      	adds	r3, #100	; 0x64
 8016306:	b29b      	uxth	r3, r3
 8016308:	803b      	strh	r3, [r7, #0]
        if((Tmp1 < 40)&&(List[Y_RANGES].Val > 2)){       //40
 801630a:	f9b7 3000 	ldrsh.w	r3, [r7]
 801630e:	2b27      	cmp	r3, #39	; 0x27
 8016310:	dc15      	bgt.n	801633e <Auto_Fit+0x53a>
 8016312:	4b75      	ldr	r3, [pc, #468]	; (80164e8 <Auto_Fit+0x6e4>)
 8016314:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016318:	2b02      	cmp	r3, #2
 801631a:	dd10      	ble.n	801633e <Auto_Fit+0x53a>
          List[Y_RANGES].Val--;
 801631c:	4b72      	ldr	r3, [pc, #456]	; (80164e8 <Auto_Fit+0x6e4>)
 801631e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016322:	b29b      	uxth	r3, r3
 8016324:	3b01      	subs	r3, #1
 8016326:	b29b      	uxth	r3, r3
 8016328:	b21a      	sxth	r2, r3
 801632a:	4b6f      	ldr	r3, [pc, #444]	; (80164e8 <Auto_Fit+0x6e4>)
 801632c:	809a      	strh	r2, [r3, #4]
          List[V0_POSI].Val=100;
 801632e:	4b6e      	ldr	r3, [pc, #440]	; (80164e8 <Auto_Fit+0x6e4>)
 8016330:	2264      	movs	r2, #100	; 0x64
 8016332:	839a      	strh	r2, [r3, #28]
          WaveProcess();
 8016334:	f7ff f884 	bl	8015440 <WaveProcess>
          Update_Proc_All();
 8016338:	f7fe fd0a 	bl	8014d50 <Update_Proc_All>
 801633c:	e018      	b.n	8016370 <Auto_Fit+0x56c>
        }
        else if((Tmp1 > 100)&&(List[Y_RANGES].Val < 9)){ //110
 801633e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8016342:	2b64      	cmp	r3, #100	; 0x64
 8016344:	dd14      	ble.n	8016370 <Auto_Fit+0x56c>
 8016346:	4b68      	ldr	r3, [pc, #416]	; (80164e8 <Auto_Fit+0x6e4>)
 8016348:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801634c:	2b08      	cmp	r3, #8
 801634e:	dc0f      	bgt.n	8016370 <Auto_Fit+0x56c>
          List[Y_RANGES].Val++;
 8016350:	4b65      	ldr	r3, [pc, #404]	; (80164e8 <Auto_Fit+0x6e4>)
 8016352:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016356:	b29b      	uxth	r3, r3
 8016358:	3301      	adds	r3, #1
 801635a:	b29b      	uxth	r3, r3
 801635c:	b21a      	sxth	r2, r3
 801635e:	4b62      	ldr	r3, [pc, #392]	; (80164e8 <Auto_Fit+0x6e4>)
 8016360:	809a      	strh	r2, [r3, #4]
          List[V0_POSI].Val=100;
 8016362:	4b61      	ldr	r3, [pc, #388]	; (80164e8 <Auto_Fit+0x6e4>)
 8016364:	2264      	movs	r2, #100	; 0x64
 8016366:	839a      	strh	r2, [r3, #28]
          WaveProcess();
 8016368:	f7ff f86a 	bl	8015440 <WaveProcess>
          Update_Proc_All();
 801636c:	f7fe fcf0 	bl	8014d50 <Update_Proc_All>
        }
        HAL_Delay(50);
 8016370:	2032      	movs	r0, #50	; 0x32
 8016372:	f002 fa45 	bl	8018800 <HAL_Delay>
      for(i=0;i<9;i++){
 8016376:	79fb      	ldrb	r3, [r7, #7]
 8016378:	3301      	adds	r3, #1
 801637a:	71fb      	strb	r3, [r7, #7]
 801637c:	79fb      	ldrb	r3, [r7, #7]
 801637e:	2b08      	cmp	r3, #8
 8016380:	d993      	bls.n	80162aa <Auto_Fit+0x4a6>
 8016382:	e054      	b.n	801642e <Auto_Fit+0x62a>
      }
    }
    else if((((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8016384:	4b59      	ldr	r3, [pc, #356]	; (80164ec <Auto_Fit+0x6e8>)
 8016386:	f9b3 3000 	ldrsh.w	r3, [r3]
 801638a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801638e:	4a51      	ldr	r2, [pc, #324]	; (80164d4 <Auto_Fit+0x6d0>)
 8016390:	6811      	ldr	r1, [r2, #0]
 8016392:	4a51      	ldr	r2, [pc, #324]	; (80164d8 <Auto_Fit+0x6d4>)
 8016394:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016398:	4610      	mov	r0, r2
 801639a:	4a50      	ldr	r2, [pc, #320]	; (80164dc <Auto_Fit+0x6d8>)
 801639c:	f9b2 2000 	ldrsh.w	r2, [r2]
 80163a0:	2a00      	cmp	r2, #0
 80163a2:	bf14      	ite	ne
 80163a4:	2201      	movne	r2, #1
 80163a6:	2200      	moveq	r2, #0
 80163a8:	b2d2      	uxtb	r2, r2
 80163aa:	4402      	add	r2, r0
 80163ac:	0052      	lsls	r2, r2, #1
 80163ae:	440a      	add	r2, r1
 80163b0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80163b4:	0092      	lsls	r2, r2, #2
 80163b6:	494a      	ldr	r1, [pc, #296]	; (80164e0 <Auto_Fit+0x6dc>)
 80163b8:	f9b1 1000 	ldrsh.w	r1, [r1]
 80163bc:	4608      	mov	r0, r1
 80163be:	4949      	ldr	r1, [pc, #292]	; (80164e4 <Auto_Fit+0x6e0>)
 80163c0:	5c09      	ldrb	r1, [r1, r0]
 80163c2:	fb92 f2f1 	sdiv	r2, r2, r1
 80163c6:	fb02 f303 	mul.w	r3, r2, r3
 80163ca:	131a      	asrs	r2, r3, #12
         - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)) <10){
 80163cc:	4b48      	ldr	r3, [pc, #288]	; (80164f0 <Auto_Fit+0x6ec>)
 80163ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80163d2:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80163d6:	493f      	ldr	r1, [pc, #252]	; (80164d4 <Auto_Fit+0x6d0>)
 80163d8:	6808      	ldr	r0, [r1, #0]
 80163da:	493f      	ldr	r1, [pc, #252]	; (80164d8 <Auto_Fit+0x6d4>)
 80163dc:	f9b1 1000 	ldrsh.w	r1, [r1]
 80163e0:	460c      	mov	r4, r1
 80163e2:	493e      	ldr	r1, [pc, #248]	; (80164dc <Auto_Fit+0x6d8>)
 80163e4:	f9b1 1000 	ldrsh.w	r1, [r1]
 80163e8:	2900      	cmp	r1, #0
 80163ea:	bf14      	ite	ne
 80163ec:	2101      	movne	r1, #1
 80163ee:	2100      	moveq	r1, #0
 80163f0:	b2c9      	uxtb	r1, r1
 80163f2:	4421      	add	r1, r4
 80163f4:	0049      	lsls	r1, r1, #1
 80163f6:	4401      	add	r1, r0
 80163f8:	f9b1 1000 	ldrsh.w	r1, [r1]
 80163fc:	0089      	lsls	r1, r1, #2
 80163fe:	4838      	ldr	r0, [pc, #224]	; (80164e0 <Auto_Fit+0x6dc>)
 8016400:	f9b0 0000 	ldrsh.w	r0, [r0]
 8016404:	4604      	mov	r4, r0
 8016406:	4837      	ldr	r0, [pc, #220]	; (80164e4 <Auto_Fit+0x6e0>)
 8016408:	5d00      	ldrb	r0, [r0, r4]
 801640a:	fb91 f1f0 	sdiv	r1, r1, r0
 801640e:	fb01 f303 	mul.w	r3, r1, r3
 8016412:	131b      	asrs	r3, r3, #12
 8016414:	1ad3      	subs	r3, r2, r3
    else if((((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8016416:	2b09      	cmp	r3, #9
 8016418:	dc09      	bgt.n	801642e <Auto_Fit+0x62a>
      //===========���ź�ʱ��ѹ��2V==================
        List[Y_RANGES].Val=7; //2v
 801641a:	4b33      	ldr	r3, [pc, #204]	; (80164e8 <Auto_Fit+0x6e4>)
 801641c:	2207      	movs	r2, #7
 801641e:	809a      	strh	r2, [r3, #4]
        WaveProcess();
 8016420:	f7ff f80e 	bl	8015440 <WaveProcess>
        Update_Proc_All();
 8016424:	f7fe fc94 	bl	8014d50 <Update_Proc_All>
        HAL_Delay(50);
 8016428:	2032      	movs	r0, #50	; 0x32
 801642a:	f002 f9e9 	bl	8018800 <HAL_Delay>


    //======ʱ���Զ�ѡ��==============

    //if(!List[TRI_Ch].Val){//******Aͨ��***********
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 801642e:	4b2f      	ldr	r3, [pc, #188]	; (80164ec <Auto_Fit+0x6e8>)
 8016430:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016434:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8016438:	4a26      	ldr	r2, [pc, #152]	; (80164d4 <Auto_Fit+0x6d0>)
 801643a:	6811      	ldr	r1, [r2, #0]
 801643c:	4a26      	ldr	r2, [pc, #152]	; (80164d8 <Auto_Fit+0x6d4>)
 801643e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016442:	4610      	mov	r0, r2
 8016444:	4a25      	ldr	r2, [pc, #148]	; (80164dc <Auto_Fit+0x6d8>)
 8016446:	f9b2 2000 	ldrsh.w	r2, [r2]
 801644a:	2a00      	cmp	r2, #0
 801644c:	bf14      	ite	ne
 801644e:	2201      	movne	r2, #1
 8016450:	2200      	moveq	r2, #0
 8016452:	b2d2      	uxtb	r2, r2
 8016454:	4402      	add	r2, r0
 8016456:	0052      	lsls	r2, r2, #1
 8016458:	440a      	add	r2, r1
 801645a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801645e:	0092      	lsls	r2, r2, #2
 8016460:	491f      	ldr	r1, [pc, #124]	; (80164e0 <Auto_Fit+0x6dc>)
 8016462:	f9b1 1000 	ldrsh.w	r1, [r1]
 8016466:	4608      	mov	r0, r1
 8016468:	491e      	ldr	r1, [pc, #120]	; (80164e4 <Auto_Fit+0x6e0>)
 801646a:	5c09      	ldrb	r1, [r1, r0]
 801646c:	fb92 f2f1 	sdiv	r2, r2, r1
 8016470:	fb02 f303 	mul.w	r3, r2, r3
 8016474:	131b      	asrs	r3, r3, #12
           - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val);
 8016476:	b29a      	uxth	r2, r3
 8016478:	4b1d      	ldr	r3, [pc, #116]	; (80164f0 <Auto_Fit+0x6ec>)
 801647a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801647e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8016482:	4914      	ldr	r1, [pc, #80]	; (80164d4 <Auto_Fit+0x6d0>)
 8016484:	6808      	ldr	r0, [r1, #0]
 8016486:	4914      	ldr	r1, [pc, #80]	; (80164d8 <Auto_Fit+0x6d4>)
 8016488:	f9b1 1000 	ldrsh.w	r1, [r1]
 801648c:	460c      	mov	r4, r1
 801648e:	4913      	ldr	r1, [pc, #76]	; (80164dc <Auto_Fit+0x6d8>)
 8016490:	f9b1 1000 	ldrsh.w	r1, [r1]
 8016494:	2900      	cmp	r1, #0
 8016496:	bf14      	ite	ne
 8016498:	2101      	movne	r1, #1
 801649a:	2100      	moveq	r1, #0
 801649c:	b2c9      	uxtb	r1, r1
 801649e:	4421      	add	r1, r4
 80164a0:	0049      	lsls	r1, r1, #1
 80164a2:	4401      	add	r1, r0
 80164a4:	f9b1 1000 	ldrsh.w	r1, [r1]
 80164a8:	0089      	lsls	r1, r1, #2
 80164aa:	480d      	ldr	r0, [pc, #52]	; (80164e0 <Auto_Fit+0x6dc>)
 80164ac:	f9b0 0000 	ldrsh.w	r0, [r0]
 80164b0:	4604      	mov	r4, r0
 80164b2:	480c      	ldr	r0, [pc, #48]	; (80164e4 <Auto_Fit+0x6e0>)
 80164b4:	5d00      	ldrb	r0, [r0, r4]
 80164b6:	fb91 f1f0 	sdiv	r1, r1, r0
 80164ba:	fb01 f303 	mul.w	r3, r1, r3
 80164be:	131b      	asrs	r3, r3, #12
 80164c0:	b29b      	uxth	r3, r3
 80164c2:	1ad3      	subs	r3, r2, r3
 80164c4:	b29b      	uxth	r3, r3
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 80164c6:	803b      	strh	r3, [r7, #0]
      for(j=0;j<11;j++){
 80164c8:	2300      	movs	r3, #0
 80164ca:	71bb      	strb	r3, [r7, #6]
 80164cc:	e06e      	b.n	80165ac <Auto_Fit+0x7a8>
 80164ce:	bf00      	nop
 80164d0:	20002872 	.word	0x20002872
 80164d4:	2000057c 	.word	0x2000057c
 80164d8:	2000688e 	.word	0x2000688e
 80164dc:	2000286a 	.word	0x2000286a
 80164e0:	20002852 	.word	0x20002852
 80164e4:	20000560 	.word	0x20000560
 80164e8:	20000298 	.word	0x20000298
 80164ec:	2000285e 	.word	0x2000285e
 80164f0:	20002870 	.word	0x20002870
        WaveProcess();
 80164f4:	f7fe ffa4 	bl	8015440 <WaveProcess>
        if((k==0)&&(Edge < 60)&&(List[TIM_BASE].Val >5)){
 80164f8:	797b      	ldrb	r3, [r7, #5]
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d114      	bne.n	8016528 <Auto_Fit+0x724>
 80164fe:	4b38      	ldr	r3, [pc, #224]	; (80165e0 <Auto_Fit+0x7dc>)
 8016500:	681b      	ldr	r3, [r3, #0]
 8016502:	2b3b      	cmp	r3, #59	; 0x3b
 8016504:	dc10      	bgt.n	8016528 <Auto_Fit+0x724>
 8016506:	4b37      	ldr	r3, [pc, #220]	; (80165e4 <Auto_Fit+0x7e0>)
 8016508:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801650c:	2b05      	cmp	r3, #5
 801650e:	dd0b      	ble.n	8016528 <Auto_Fit+0x724>
          Set_Base(5);                           // Ӳ������ɨ��ʱ����λ
 8016510:	2005      	movs	r0, #5
 8016512:	f7f6 f8ab 	bl	800c66c <Set_Base>
          List[TIM_BASE].Val = 5;
 8016516:	4b33      	ldr	r3, [pc, #204]	; (80165e4 <Auto_Fit+0x7e0>)
 8016518:	2205      	movs	r2, #5
 801651a:	879a      	strh	r2, [r3, #60]	; 0x3c
          WaveProcess();
 801651c:	f7fe ff90 	bl	8015440 <WaveProcess>
          Update_Proc_All();
 8016520:	f7fe fc16 	bl	8014d50 <Update_Proc_All>
          k=1;
 8016524:	2301      	movs	r3, #1
 8016526:	717b      	strb	r3, [r7, #5]
        }
        if((Edge > 180)&&(List[TIM_BASE].Val > 2)){
 8016528:	4b2d      	ldr	r3, [pc, #180]	; (80165e0 <Auto_Fit+0x7dc>)
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	2bb4      	cmp	r3, #180	; 0xb4
 801652e:	dd1b      	ble.n	8016568 <Auto_Fit+0x764>
 8016530:	4b2c      	ldr	r3, [pc, #176]	; (80165e4 <Auto_Fit+0x7e0>)
 8016532:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016536:	2b02      	cmp	r3, #2
 8016538:	dd16      	ble.n	8016568 <Auto_Fit+0x764>
          List[TIM_BASE].Val--;
 801653a:	4b2a      	ldr	r3, [pc, #168]	; (80165e4 <Auto_Fit+0x7e0>)
 801653c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016540:	b29b      	uxth	r3, r3
 8016542:	3b01      	subs	r3, #1
 8016544:	b29b      	uxth	r3, r3
 8016546:	b21a      	sxth	r2, r3
 8016548:	4b26      	ldr	r3, [pc, #152]	; (80165e4 <Auto_Fit+0x7e0>)
 801654a:	879a      	strh	r2, [r3, #60]	; 0x3c
          Set_Base(List[TIM_BASE].Val);   // Ӳ������ɨ��ʱ����λ
 801654c:	4b25      	ldr	r3, [pc, #148]	; (80165e4 <Auto_Fit+0x7e0>)
 801654e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016552:	4618      	mov	r0, r3
 8016554:	f7f6 f88a 	bl	800c66c <Set_Base>
          WaveProcess();
 8016558:	f7fe ff72 	bl	8015440 <WaveProcess>
                 Update_Proc_All();
 801655c:	f7fe fbf8 	bl	8014d50 <Update_Proc_All>
          HAL_Delay(50);
 8016560:	2032      	movs	r0, #50	; 0x32
 8016562:	f002 f94d 	bl	8018800 <HAL_Delay>
 8016566:	e01e      	b.n	80165a6 <Auto_Fit+0x7a2>
        }
        else if((Edge < 80)&&(List[TIM_BASE].Val< 11)){
 8016568:	4b1d      	ldr	r3, [pc, #116]	; (80165e0 <Auto_Fit+0x7dc>)
 801656a:	681b      	ldr	r3, [r3, #0]
 801656c:	2b4f      	cmp	r3, #79	; 0x4f
 801656e:	dc1a      	bgt.n	80165a6 <Auto_Fit+0x7a2>
 8016570:	4b1c      	ldr	r3, [pc, #112]	; (80165e4 <Auto_Fit+0x7e0>)
 8016572:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016576:	2b0a      	cmp	r3, #10
 8016578:	dc15      	bgt.n	80165a6 <Auto_Fit+0x7a2>
          List[TIM_BASE].Val++;
 801657a:	4b1a      	ldr	r3, [pc, #104]	; (80165e4 <Auto_Fit+0x7e0>)
 801657c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016580:	b29b      	uxth	r3, r3
 8016582:	3301      	adds	r3, #1
 8016584:	b29b      	uxth	r3, r3
 8016586:	b21a      	sxth	r2, r3
 8016588:	4b16      	ldr	r3, [pc, #88]	; (80165e4 <Auto_Fit+0x7e0>)
 801658a:	879a      	strh	r2, [r3, #60]	; 0x3c
          Set_Base(List[TIM_BASE].Val);   // Ӳ������ɨ��ʱ����λ
 801658c:	4b15      	ldr	r3, [pc, #84]	; (80165e4 <Auto_Fit+0x7e0>)
 801658e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016592:	4618      	mov	r0, r3
 8016594:	f7f6 f86a 	bl	800c66c <Set_Base>
          WaveProcess();
 8016598:	f7fe ff52 	bl	8015440 <WaveProcess>
                 Update_Proc_All();
 801659c:	f7fe fbd8 	bl	8014d50 <Update_Proc_All>
          HAL_Delay(50);
 80165a0:	2032      	movs	r0, #50	; 0x32
 80165a2:	f002 f92d 	bl	8018800 <HAL_Delay>
      for(j=0;j<11;j++){
 80165a6:	79bb      	ldrb	r3, [r7, #6]
 80165a8:	3301      	adds	r3, #1
 80165aa:	71bb      	strb	r3, [r7, #6]
 80165ac:	79bb      	ldrb	r3, [r7, #6]
 80165ae:	2b0a      	cmp	r3, #10
 80165b0:	d9a0      	bls.n	80164f4 <Auto_Fit+0x6f0>
        }
      }

      if(Tmp1 < 20){
 80165b2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80165b6:	2b13      	cmp	r3, #19
 80165b8:	dc0b      	bgt.n	80165d2 <Auto_Fit+0x7ce>
        List[TIM_BASE].Val=5; //50us
 80165ba:	4b0a      	ldr	r3, [pc, #40]	; (80165e4 <Auto_Fit+0x7e0>)
 80165bc:	2205      	movs	r2, #5
 80165be:	879a      	strh	r2, [r3, #60]	; 0x3c
        Set_Base(List[TIM_BASE].Val);   // Ӳ������ɨ��ʱ����λ
 80165c0:	4b08      	ldr	r3, [pc, #32]	; (80165e4 <Auto_Fit+0x7e0>)
 80165c2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80165c6:	4618      	mov	r0, r3
 80165c8:	f7f6 f850 	bl	800c66c <Set_Base>
        HAL_Delay(50);
 80165cc:	2032      	movs	r0, #50	; 0x32
 80165ce:	f002 f917 	bl	8018800 <HAL_Delay>
      }
       Update_Proc_All();
 80165d2:	f7fe fbbd 	bl	8014d50 <Update_Proc_All>
  }
}
 80165d6:	bf00      	nop
 80165d8:	370c      	adds	r7, #12
 80165da:	46bd      	mov	sp, r7
 80165dc:	bd90      	pop	{r4, r7, pc}
 80165de:	bf00      	nop
 80165e0:	20002858 	.word	0x20002858
 80165e4:	20000298 	.word	0x20000298

080165e8 <Init_Touch>:

unsigned char val[2]; //input buffer

// initialize touch screen
void Init_Touch(void)
{
 80165e8:	b580      	push	{r7, lr}
 80165ea:	af00      	add	r7, sp, #0
	Touch_SPI();
 80165ec:	f000 f810 	bl	8016610 <Touch_SPI>
	HAL_GPIO_WritePin( TpCs_GPIO_Port, TpCs_Pin, GPIO_PIN_RESET);
 80165f0:	2200      	movs	r2, #0
 80165f2:	2140      	movs	r1, #64	; 0x40
 80165f4:	4805      	ldr	r0, [pc, #20]	; (801660c <Init_Touch+0x24>)
 80165f6:	f003 fce1 	bl	8019fbc <HAL_GPIO_WritePin>
// not needed yet
	HAL_GPIO_WritePin( TpCs_GPIO_Port, TpCs_Pin, GPIO_PIN_SET);
 80165fa:	2201      	movs	r2, #1
 80165fc:	2140      	movs	r1, #64	; 0x40
 80165fe:	4803      	ldr	r0, [pc, #12]	; (801660c <Init_Touch+0x24>)
 8016600:	f003 fcdc 	bl	8019fbc <HAL_GPIO_WritePin>
	LCD_SPI();
 8016604:	f000 f814 	bl	8016630 <LCD_SPI>
}
 8016608:	bf00      	nop
 801660a:	bd80      	pop	{r7, pc}
 801660c:	40020400 	.word	0x40020400

08016610 <Touch_SPI>:

// set SPI for touch controller
void Touch_SPI(void)
{
 8016610:	b580      	push	{r7, lr}
 8016612:	af00      	add	r7, sp, #0
//	HAL_SPI_DeInit(&hspi3);  switch on the fly
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8016614:	4b05      	ldr	r3, [pc, #20]	; (801662c <Touch_SPI+0x1c>)
 8016616:	2200      	movs	r2, #0
 8016618:	60da      	str	r2, [r3, #12]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16; //slow clock for touch controller
 801661a:	4b04      	ldr	r3, [pc, #16]	; (801662c <Touch_SPI+0x1c>)
 801661c:	2218      	movs	r2, #24
 801661e:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi3);
 8016620:	4802      	ldr	r0, [pc, #8]	; (801662c <Touch_SPI+0x1c>)
 8016622:	f005 ff47 	bl	801c4b4 <HAL_SPI_Init>
}
 8016626:	bf00      	nop
 8016628:	bd80      	pop	{r7, pc}
 801662a:	bf00      	nop
 801662c:	200069cc 	.word	0x200069cc

08016630 <LCD_SPI>:

// set SPI for LCD display
void LCD_SPI(void)
{
 8016630:	b580      	push	{r7, lr}
 8016632:	af00      	add	r7, sp, #0
//	HAL_SPI_DeInit(&hspi3); switch on fly
	hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8016634:	4b05      	ldr	r3, [pc, #20]	; (801664c <LCD_SPI+0x1c>)
 8016636:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801663a:	60da      	str	r2, [r3, #12]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 801663c:	4b03      	ldr	r3, [pc, #12]	; (801664c <LCD_SPI+0x1c>)
 801663e:	2210      	movs	r2, #16
 8016640:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi3);
 8016642:	4802      	ldr	r0, [pc, #8]	; (801664c <LCD_SPI+0x1c>)
 8016644:	f005 ff36 	bl	801c4b4 <HAL_SPI_Init>
}
 8016648:	bf00      	nop
 801664a:	bd80      	pop	{r7, pc}
 801664c:	200069cc 	.word	0x200069cc

08016650 <read_2046>:

short read_2046( unsigned char cmd )  //internal value read
{
 8016650:	b580      	push	{r7, lr}
 8016652:	b084      	sub	sp, #16
 8016654:	af00      	add	r7, sp, #0
 8016656:	4603      	mov	r3, r0
 8016658:	71fb      	strb	r3, [r7, #7]
	short xyz;

	HAL_SPI_Transmit(&hspi3, &cmd, 1, 1);// timeout 1 ms
 801665a:	1df9      	adds	r1, r7, #7
 801665c:	2301      	movs	r3, #1
 801665e:	2201      	movs	r2, #1
 8016660:	480e      	ldr	r0, [pc, #56]	; (801669c <read_2046+0x4c>)
 8016662:	f005 ffb0 	bl	801c5c6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,val,2,1);   // read value
 8016666:	2301      	movs	r3, #1
 8016668:	2202      	movs	r2, #2
 801666a:	490d      	ldr	r1, [pc, #52]	; (80166a0 <read_2046+0x50>)
 801666c:	480b      	ldr	r0, [pc, #44]	; (801669c <read_2046+0x4c>)
 801666e:	f006 f8e6 	bl	801c83e <HAL_SPI_Receive>

	xyz = (val[0] <<8) +val[1];
 8016672:	4b0b      	ldr	r3, [pc, #44]	; (80166a0 <read_2046+0x50>)
 8016674:	781b      	ldrb	r3, [r3, #0]
 8016676:	b29b      	uxth	r3, r3
 8016678:	021b      	lsls	r3, r3, #8
 801667a:	b29a      	uxth	r2, r3
 801667c:	4b08      	ldr	r3, [pc, #32]	; (80166a0 <read_2046+0x50>)
 801667e:	785b      	ldrb	r3, [r3, #1]
 8016680:	b29b      	uxth	r3, r3
 8016682:	4413      	add	r3, r2
 8016684:	b29b      	uxth	r3, r3
 8016686:	81fb      	strh	r3, [r7, #14]
	xyz = xyz >> 3;  //12 bit value
 8016688:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801668c:	10db      	asrs	r3, r3, #3
 801668e:	81fb      	strh	r3, [r7, #14]
	return xyz;
 8016690:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8016694:	4618      	mov	r0, r3
 8016696:	3710      	adds	r7, #16
 8016698:	46bd      	mov	sp, r7
 801669a:	bd80      	pop	{r7, pc}
 801669c:	200069cc 	.word	0x200069cc
 80166a0:	20006898 	.word	0x20006898

080166a4 <Touch_Read>:

char Touch_Read(short *x, short*y)
{
 80166a4:	b580      	push	{r7, lr}
 80166a6:	b084      	sub	sp, #16
 80166a8:	af00      	add	r7, sp, #0
 80166aa:	6078      	str	r0, [r7, #4]
 80166ac:	6039      	str	r1, [r7, #0]
	short z1,z2;
	short press;
	press =0;
 80166ae:	2300      	movs	r3, #0
 80166b0:	81fb      	strh	r3, [r7, #14]

	Touch_SPI();
 80166b2:	f7ff ffad 	bl	8016610 <Touch_SPI>
	HAL_GPIO_WritePin( TpCs_GPIO_Port, TpCs_Pin, GPIO_PIN_RESET);
 80166b6:	2200      	movs	r2, #0
 80166b8:	2140      	movs	r1, #64	; 0x40
 80166ba:	481f      	ldr	r0, [pc, #124]	; (8016738 <Touch_Read+0x94>)
 80166bc:	f003 fc7e 	bl	8019fbc <HAL_GPIO_WritePin>

	z1 = read_2046(0xB0);  //read z1 cmd 8+3
 80166c0:	20b0      	movs	r0, #176	; 0xb0
 80166c2:	f7ff ffc5 	bl	8016650 <read_2046>
 80166c6:	4603      	mov	r3, r0
 80166c8:	81bb      	strh	r3, [r7, #12]
	z2 = read_2046(0xC0);  //read z2 cmd 8+4
 80166ca:	20c0      	movs	r0, #192	; 0xc0
 80166cc:	f7ff ffc0 	bl	8016650 <read_2046>
 80166d0:	4603      	mov	r3, r0
 80166d2:	817b      	strh	r3, [r7, #10]
	press = z1 + 4095;
 80166d4:	89bb      	ldrh	r3, [r7, #12]
 80166d6:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80166da:	b29b      	uxth	r3, r3
 80166dc:	81fb      	strh	r3, [r7, #14]
	press -= z2;
 80166de:	89fa      	ldrh	r2, [r7, #14]
 80166e0:	897b      	ldrh	r3, [r7, #10]
 80166e2:	1ad3      	subs	r3, r2, r3
 80166e4:	b29b      	uxth	r3, r3
 80166e6:	81fb      	strh	r3, [r7, #14]

	if( press >= 400 )
 80166e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80166ec:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80166f0:	db0d      	blt.n	801670e <Touch_Read+0x6a>
	{
		*x = read_2046(0xD0);  //read x cmd 8+5
 80166f2:	20d0      	movs	r0, #208	; 0xd0
 80166f4:	f7ff ffac 	bl	8016650 <read_2046>
 80166f8:	4603      	mov	r3, r0
 80166fa:	461a      	mov	r2, r3
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	801a      	strh	r2, [r3, #0]
		*y = read_2046(0x90);  //read y cmd 8+1
 8016700:	2090      	movs	r0, #144	; 0x90
 8016702:	f7ff ffa5 	bl	8016650 <read_2046>
 8016706:	4603      	mov	r3, r0
 8016708:	461a      	mov	r2, r3
 801670a:	683b      	ldr	r3, [r7, #0]
 801670c:	801a      	strh	r2, [r3, #0]
	}

	HAL_GPIO_WritePin( TpCs_GPIO_Port, TpCs_Pin, GPIO_PIN_SET);
 801670e:	2201      	movs	r2, #1
 8016710:	2140      	movs	r1, #64	; 0x40
 8016712:	4809      	ldr	r0, [pc, #36]	; (8016738 <Touch_Read+0x94>)
 8016714:	f003 fc52 	bl	8019fbc <HAL_GPIO_WritePin>
	LCD_SPI();
 8016718:	f7ff ff8a 	bl	8016630 <LCD_SPI>

	return (press<400)?0:1;
 801671c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016720:	f240 128f 	movw	r2, #399	; 0x18f
 8016724:	4293      	cmp	r3, r2
 8016726:	bfcc      	ite	gt
 8016728:	2301      	movgt	r3, #1
 801672a:	2300      	movle	r3, #0
 801672c:	b2db      	uxtb	r3, r3
}
 801672e:	4618      	mov	r0, r3
 8016730:	3710      	adds	r7, #16
 8016732:	46bd      	mov	sp, r7
 8016734:	bd80      	pop	{r7, pc}
 8016736:	bf00      	nop
 8016738:	40020400 	.word	0x40020400

0801673c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 801673c:	b580      	push	{r7, lr}
 801673e:	b082      	sub	sp, #8
 8016740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  short i;
  char SAVE_FLAG = 0;
 8016742:	2300      	movs	r3, #0
 8016744:	717b      	strb	r3, [r7, #5]
  char Pop_Num = 0;
 8016746:	2300      	movs	r3, #0
 8016748:	713b      	strb	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 801674a:	f001 ffe7 	bl	801871c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 801674e:	f001 f859 	bl	8017804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8016752:	f001 fbfb 	bl	8017f4c <MX_GPIO_Init>
  MX_DMA_Init();
 8016756:	f001 fbc3 	bl	8017ee0 <MX_DMA_Init>
  MX_ADC1_Init();
 801675a:	f001 f8c7 	bl	80178ec <MX_ADC1_Init>
  MX_ADC2_Init();
 801675e:	f001 f917 	bl	8017990 <MX_ADC2_Init>
  MX_DAC_Init();
 8016762:	f001 f967 	bl	8017a34 <MX_DAC_Init>
  MX_SPI2_Init();
 8016766:	f001 f9a3 	bl	8017ab0 <MX_SPI2_Init>
  MX_SPI3_Init();
 801676a:	f001 f9d7 	bl	8017b1c <MX_SPI3_Init>
  MX_TIM1_Init();
 801676e:	f001 fa0d 	bl	8017b8c <MX_TIM1_Init>
  MX_TIM3_Init();
 8016772:	f001 fa81 	bl	8017c78 <MX_TIM3_Init>
  MX_TIM5_Init();
 8016776:	f001 fadf 	bl	8017d38 <MX_TIM5_Init>
  MX_USB_DEVICE_Init();
 801677a:	f00b fec9 	bl	8022510 <MX_USB_DEVICE_Init>
  MX_TIM7_Init();
 801677e:	f001 fb69 	bl	8017e54 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  // initialize adc dma
  __HAL_DMA_DISABLE(&hdma_adc1);
 8016782:	4bb1      	ldr	r3, [pc, #708]	; (8016a48 <main+0x30c>)
 8016784:	681b      	ldr	r3, [r3, #0]
 8016786:	681a      	ldr	r2, [r3, #0]
 8016788:	4baf      	ldr	r3, [pc, #700]	; (8016a48 <main+0x30c>)
 801678a:	681b      	ldr	r3, [r3, #0]
 801678c:	f022 0201 	bic.w	r2, r2, #1
 8016790:	601a      	str	r2, [r3, #0]
  dma_tmp = hdma_adc1.Instance->CR;
 8016792:	4bad      	ldr	r3, [pc, #692]	; (8016a48 <main+0x30c>)
 8016794:	681b      	ldr	r3, [r3, #0]
 8016796:	681b      	ldr	r3, [r3, #0]
 8016798:	603b      	str	r3, [r7, #0]
  dma_tmp &= 0x0FFCFFFE;
 801679a:	683a      	ldr	r2, [r7, #0]
 801679c:	4bab      	ldr	r3, [pc, #684]	; (8016a4c <main+0x310>)
 801679e:	4013      	ands	r3, r2
 80167a0:	603b      	str	r3, [r7, #0]
  dma_tmp |= 0x30000; //set very high pirority
 80167a2:	683b      	ldr	r3, [r7, #0]
 80167a4:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80167a8:	603b      	str	r3, [r7, #0]
  hdma_adc1.Instance->CR = dma_tmp;
 80167aa:	4ba7      	ldr	r3, [pc, #668]	; (8016a48 <main+0x30c>)
 80167ac:	681b      	ldr	r3, [r3, #0]
 80167ae:	683a      	ldr	r2, [r7, #0]
 80167b0:	601a      	str	r2, [r3, #0]

   hdma_adc1.Instance->M0AR = (unsigned)&Sampl[2];
 80167b2:	4ba5      	ldr	r3, [pc, #660]	; (8016a48 <main+0x30c>)
 80167b4:	681b      	ldr	r3, [r3, #0]
 80167b6:	4aa6      	ldr	r2, [pc, #664]	; (8016a50 <main+0x314>)
 80167b8:	60da      	str	r2, [r3, #12]
   hdma_adc1.Instance->PAR = hadc1.Instance->DR;
 80167ba:	4ba6      	ldr	r3, [pc, #664]	; (8016a54 <main+0x318>)
 80167bc:	681a      	ldr	r2, [r3, #0]
 80167be:	4ba2      	ldr	r3, [pc, #648]	; (8016a48 <main+0x30c>)
 80167c0:	681b      	ldr	r3, [r3, #0]
 80167c2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80167c4:	609a      	str	r2, [r3, #8]
   __HAL_DMA_SET_COUNTER(&hdma_adc1, 0x1000);
 80167c6:	4ba0      	ldr	r3, [pc, #640]	; (8016a48 <main+0x30c>)
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80167ce:	605a      	str	r2, [r3, #4]
   __HAL_DMA_ENABLE(&hdma_adc1);
 80167d0:	4b9d      	ldr	r3, [pc, #628]	; (8016a48 <main+0x30c>)
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	681a      	ldr	r2, [r3, #0]
 80167d6:	4b9c      	ldr	r3, [pc, #624]	; (8016a48 <main+0x30c>)
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	f042 0201 	orr.w	r2, r2, #1
 80167de:	601a      	str	r2, [r3, #0]

  // inittialize LCD and touch screen
  Init_LCD();
 80167e0:	f7fb fcfa 	bl	80121d8 <Init_LCD>
  Init_Touch();
 80167e4:	f7ff ff00 	bl	80165e8 <Init_Touch>

  SetColor(BLK, WHT);
 80167e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80167ec:	2000      	movs	r0, #0
 80167ee:	f7f7 fbe7 	bl	800dfc0 <SetColor>

  DispStr8x14(8, 90, PRN, "         Oscilloscope              ");
 80167f2:	4b99      	ldr	r3, [pc, #612]	; (8016a58 <main+0x31c>)
 80167f4:	2200      	movs	r2, #0
 80167f6:	215a      	movs	r1, #90	; 0x5a
 80167f8:	2008      	movs	r0, #8
 80167fa:	f7f7 fb89 	bl	800df10 <DispStr8x14>
  DispStr8x14(8+22*8, 90, PRN, APP_VERSION);
 80167fe:	4b97      	ldr	r3, [pc, #604]	; (8016a5c <main+0x320>)
 8016800:	2200      	movs	r2, #0
 8016802:	215a      	movs	r1, #90	; 0x5a
 8016804:	20b8      	movs	r0, #184	; 0xb8
 8016806:	f7f7 fb83 	bl	800df10 <DispStr8x14>
  DispStr8x14(8, 70, PRN, "        System Initializing...       ");
 801680a:	4b95      	ldr	r3, [pc, #596]	; (8016a60 <main+0x324>)
 801680c:	2200      	movs	r2, #0
 801680e:	2146      	movs	r1, #70	; 0x46
 8016810:	2008      	movs	r0, #8
 8016812:	f7f7 fb7d 	bl	800df10 <DispStr8x14>

  HAL_Delay(1000);
 8016816:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801681a:	f001 fff1 	bl	8018800 <HAL_Delay>

//=============================check callibration׼===========================
  Read_CalFlag();
 801681e:	f7fa ff43 	bl	80116a8 <Read_CalFlag>

  if(Cal_Flag == 1)
 8016822:	4b90      	ldr	r3, [pc, #576]	; (8016a64 <main+0x328>)
 8016824:	781b      	ldrb	r3, [r3, #0]
 8016826:	2b01      	cmp	r3, #1
 8016828:	d10f      	bne.n	801684a <main+0x10e>
  {
	  Cal_Flag = 0;
 801682a:	4b8e      	ldr	r3, [pc, #568]	; (8016a64 <main+0x328>)
 801682c:	2200      	movs	r2, #0
 801682e:	701a      	strb	r2, [r3, #0]
	  SetColor(BLK, WHT);
 8016830:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016834:	2000      	movs	r0, #0
 8016836:	f7f7 fbc3 	bl	800dfc0 <SetColor>
	  Zero_Align();                              //set zero
 801683a:	f7fe fd0b 	bl	8015254 <Zero_Align>
	  Restore();                                 //restore list
 801683e:	f7fb f93d 	bl	8011abc <Restore>
	  Save_Parameter();                          //save list
 8016842:	f7fa ff59 	bl	80116f8 <Save_Parameter>
	  Save_Kpg();
 8016846:	f7fb f881 	bl	801194c <Save_Kpg>
  }
  Read_Kpg();
 801684a:	f7fb f8f5 	bl	8011a38 <Read_Kpg>
  Read_Parameter();
 801684e:	f7fa ffef 	bl	8011830 <Read_Parameter>
  File_Num();
 8016852:	f7f9 fc35 	bl	80100c0 <File_Num>
  memcpy(Data, DEMO, 310);
 8016856:	f44f 729b 	mov.w	r2, #310	; 0x136
 801685a:	4983      	ldr	r1, [pc, #524]	; (8016a68 <main+0x32c>)
 801685c:	4883      	ldr	r0, [pc, #524]	; (8016a6c <main+0x330>)
 801685e:	f00c fbf5 	bl	802304c <memcpy>

  LCD_ClrScrn(GRY);
 8016862:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8016866:	f7fb fdcd 	bl	8012404 <LCD_ClrScrn>
  Update_Title();
 801686a:	f7fb ff6d 	bl	8012748 <Update_Title>

  List[SMPL_DPTH].Flg |= UPD;
 801686e:	4b80      	ldr	r3, [pc, #512]	; (8016a70 <main+0x334>)
 8016870:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8016874:	f043 0320 	orr.w	r3, r3, #32
 8016878:	b2da      	uxtb	r2, r3
 801687a:	4b7d      	ldr	r3, [pc, #500]	; (8016a70 <main+0x334>)
 801687c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

  StdBy_Time = List[STANDBY].Val * MIN_UNIT;
 8016880:	4b7b      	ldr	r3, [pc, #492]	; (8016a70 <main+0x334>)
 8016882:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 8016886:	b29b      	uxth	r3, r3
 8016888:	461a      	mov	r2, r3
 801688a:	0112      	lsls	r2, r2, #4
 801688c:	1ad3      	subs	r3, r2, r3
 801688e:	009b      	lsls	r3, r3, #2
 8016890:	b29b      	uxth	r3, r3
 8016892:	b21a      	sxth	r2, r3
 8016894:	4b77      	ldr	r3, [pc, #476]	; (8016a74 <main+0x338>)
 8016896:	801a      	strh	r2, [r3, #0]

  // Start timer
  HAL_TIM_Base_Start_IT(&htim3);
 8016898:	4877      	ldr	r0, [pc, #476]	; (8016a78 <main+0x33c>)
 801689a:	f006 fd2f 	bl	801d2fc <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    if((List[STANDBY].Val != 0)&&(StdBy_Time == 0))
 801689e:	4b74      	ldr	r3, [pc, #464]	; (8016a70 <main+0x334>)
 80168a0:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 80168a4:	2b00      	cmp	r3, #0
 80168a6:	d007      	beq.n	80168b8 <main+0x17c>
 80168a8:	4b72      	ldr	r3, [pc, #456]	; (8016a74 <main+0x338>)
 80168aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d102      	bne.n	80168b8 <main+0x17c>
	    {
	      StdBy_Flag = 1;
 80168b2:	4b72      	ldr	r3, [pc, #456]	; (8016a7c <main+0x340>)
 80168b4:	2201      	movs	r2, #1
 80168b6:	701a      	strb	r2, [r3, #0]
	    }

	    Update_Detail();
 80168b8:	f7fc feb2 	bl	8013620 <Update_Detail>
	    Update_Blink();
 80168bc:	f7fb ff98 	bl	80127f0 <Update_Blink>
	    WaveProcess();
 80168c0:	f7fe fdbe 	bl	8015440 <WaveProcess>
	    DrawWindow(WaveBuf, ParamTab);
 80168c4:	496e      	ldr	r1, [pc, #440]	; (8016a80 <main+0x344>)
 80168c6:	486f      	ldr	r0, [pc, #444]	; (8016a84 <main+0x348>)
 80168c8:	f7f7 f8fe 	bl	800dac8 <DrawWindow>

	   if(TIM_BASE_Val!=0)
 80168cc:	4b6e      	ldr	r3, [pc, #440]	; (8016a88 <main+0x34c>)
 80168ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	d01c      	beq.n	8016910 <main+0x1d4>
	    {
	      List[TIM_BASE].Val=TIM_BASE_Val;
 80168d6:	4b6c      	ldr	r3, [pc, #432]	; (8016a88 <main+0x34c>)
 80168d8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80168dc:	4b64      	ldr	r3, [pc, #400]	; (8016a70 <main+0x334>)
 80168de:	879a      	strh	r2, [r3, #60]	; 0x3c
	      List[TIM_BASE].Flg |= UPD;
 80168e0:	4b63      	ldr	r3, [pc, #396]	; (8016a70 <main+0x334>)
 80168e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80168e6:	f043 0320 	orr.w	r3, r3, #32
 80168ea:	b2da      	uxtb	r2, r3
 80168ec:	4b60      	ldr	r3, [pc, #384]	; (8016a70 <main+0x334>)
 80168ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	      TIM_BASE_Val=Current;
 80168f2:	4b66      	ldr	r3, [pc, #408]	; (8016a8c <main+0x350>)
 80168f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80168f8:	4b63      	ldr	r3, [pc, #396]	; (8016a88 <main+0x34c>)
 80168fa:	801a      	strh	r2, [r3, #0]
	      Update_Title();
 80168fc:	f7fb ff24 	bl	8012748 <Update_Title>
	      Current=TIM_BASE_Val;
 8016900:	4b61      	ldr	r3, [pc, #388]	; (8016a88 <main+0x34c>)
 8016902:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016906:	4b61      	ldr	r3, [pc, #388]	; (8016a8c <main+0x350>)
 8016908:	801a      	strh	r2, [r3, #0]
	      TIM_BASE_Val=0;
 801690a:	4b5f      	ldr	r3, [pc, #380]	; (8016a88 <main+0x34c>)
 801690c:	2200      	movs	r2, #0
 801690e:	801a      	strh	r2, [r3, #0]
	    }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    if(Key_Buffer != 0)
 8016910:	4b5f      	ldr	r3, [pc, #380]	; (8016a90 <main+0x354>)
 8016912:	781b      	ldrb	r3, [r3, #0]
 8016914:	b2db      	uxtb	r3, r3
 8016916:	2b00      	cmp	r3, #0
 8016918:	d0c1      	beq.n	801689e <main+0x162>
	    {
	      StdBy_Flag = 0;
 801691a:	4b58      	ldr	r3, [pc, #352]	; (8016a7c <main+0x340>)
 801691c:	2200      	movs	r2, #0
 801691e:	701a      	strb	r2, [r3, #0]
	      PopupCnt = 10;                  // �ް���ʱ�˵���ά����ʾ 10��
 8016920:	4b5c      	ldr	r3, [pc, #368]	; (8016a94 <main+0x358>)
 8016922:	220a      	movs	r2, #10
 8016924:	801a      	strh	r2, [r3, #0]
	      List[MenuNow[Current]].Flg |= UPD;
 8016926:	4b59      	ldr	r3, [pc, #356]	; (8016a8c <main+0x350>)
 8016928:	f9b3 3000 	ldrsh.w	r3, [r3]
 801692c:	461a      	mov	r2, r3
 801692e:	4b5a      	ldr	r3, [pc, #360]	; (8016a98 <main+0x35c>)
 8016930:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016934:	4a4e      	ldr	r2, [pc, #312]	; (8016a70 <main+0x334>)
 8016936:	00db      	lsls	r3, r3, #3
 8016938:	4413      	add	r3, r2
 801693a:	799b      	ldrb	r3, [r3, #6]
 801693c:	4a53      	ldr	r2, [pc, #332]	; (8016a8c <main+0x350>)
 801693e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016942:	4611      	mov	r1, r2
 8016944:	4a54      	ldr	r2, [pc, #336]	; (8016a98 <main+0x35c>)
 8016946:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 801694a:	4610      	mov	r0, r2
 801694c:	f043 0320 	orr.w	r3, r3, #32
 8016950:	b2d9      	uxtb	r1, r3
 8016952:	4a47      	ldr	r2, [pc, #284]	; (8016a70 <main+0x334>)
 8016954:	00c3      	lsls	r3, r0, #3
 8016956:	4413      	add	r3, r2
 8016958:	460a      	mov	r2, r1
 801695a:	719a      	strb	r2, [r3, #6]

	      switch (Key_Buffer)
 801695c:	4b4c      	ldr	r3, [pc, #304]	; (8016a90 <main+0x354>)
 801695e:	781b      	ldrb	r3, [r3, #0]
 8016960:	b2db      	uxtb	r3, r3
 8016962:	3b01      	subs	r3, #1
 8016964:	2b09      	cmp	r3, #9
 8016966:	f200 8709 	bhi.w	801777c <main+0x1040>
 801696a:	a201      	add	r2, pc, #4	; (adr r2, 8016970 <main+0x234>)
 801696c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016970:	080169e1 	.word	0x080169e1
 8016974:	08016cf5 	.word	0x08016cf5
 8016978:	08016e4d 	.word	0x08016e4d
 801697c:	08016efb 	.word	0x08016efb
 8016980:	08016fb1 	.word	0x08016fb1
 8016984:	08017357 	.word	0x08017357
 8016988:	0801777d 	.word	0x0801777d
 801698c:	080169bb 	.word	0x080169bb
 8016990:	08016999 	.word	0x08016999
 8016994:	08016ce1 	.word	0x08016ce1
	      {
	     case KEYCODE_MEM:
	         i = Save_Bmp(List[SAVE_BMP].Val);
 8016998:	4b35      	ldr	r3, [pc, #212]	; (8016a70 <main+0x334>)
 801699a:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 801699e:	4618      	mov	r0, r3
 80169a0:	f7f9 feb0 	bl	8010704 <Save_Bmp>
 80169a4:	4603      	mov	r3, r0
 80169a6:	80fb      	strh	r3, [r7, #6]
	         DispFileInfo(i);
 80169a8:	88fb      	ldrh	r3, [r7, #6]
 80169aa:	b2db      	uxtb	r3, r3
 80169ac:	4618      	mov	r0, r3
 80169ae:	f7fe f959 	bl	8014c64 <DispFileInfo>
	         DispBMPInfo();
 80169b2:	f7fe f987 	bl	8014cc4 <DispBMPInfo>
	        break;
 80169b6:	f000 bee1 	b.w	801777c <main+0x1040>

	     case KEYCODE_ACT:
	       SAVE_FLAG=0;
 80169ba:	2300      	movs	r3, #0
 80169bc:	717b      	strb	r3, [r7, #5]
	       if(PopType & DAILOG_POP) Close_Pop();
 80169be:	4b37      	ldr	r3, [pc, #220]	; (8016a9c <main+0x360>)
 80169c0:	781b      	ldrb	r3, [r3, #0]
 80169c2:	f003 0304 	and.w	r3, r3, #4
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d003      	beq.n	80169d2 <main+0x296>
 80169ca:	f7f8 f87d 	bl	800eac8 <Close_Pop>
	       else {
	         Dialog_Pop("Save All ParamTab?");
	         Pop_Num = 1;
	       }
	       break;
 80169ce:	f000 bed5 	b.w	801777c <main+0x1040>
	         Dialog_Pop("Save All ParamTab?");
 80169d2:	4833      	ldr	r0, [pc, #204]	; (8016aa0 <main+0x364>)
 80169d4:	f7f8 f8a4 	bl	800eb20 <Dialog_Pop>
	         Pop_Num = 1;
 80169d8:	2301      	movs	r3, #1
 80169da:	713b      	strb	r3, [r7, #4]
	       break;
 80169dc:	f000 bece 	b.w	801777c <main+0x1040>

	     case KEYCODE_PLAY:
	       if((Current == ST)&&(Cal_Flag==0))
 80169e0:	4b2a      	ldr	r3, [pc, #168]	; (8016a8c <main+0x350>)
 80169e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80169e6:	2b07      	cmp	r3, #7
 80169e8:	f040 8080 	bne.w	8016aec <main+0x3b0>
 80169ec:	4b1d      	ldr	r3, [pc, #116]	; (8016a64 <main+0x328>)
 80169ee:	781b      	ldrb	r3, [r3, #0]
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d17b      	bne.n	8016aec <main+0x3b0>
	       {
	         if(PopType & DAILOG_POP){
 80169f4:	4b29      	ldr	r3, [pc, #164]	; (8016a9c <main+0x360>)
 80169f6:	781b      	ldrb	r3, [r3, #0]
 80169f8:	f003 0304 	and.w	r3, r3, #4
 80169fc:	2b00      	cmp	r3, #0
 80169fe:	d00e      	beq.n	8016a1e <main+0x2e2>
	           if(Pop_Num == 1){
 8016a00:	793b      	ldrb	r3, [r7, #4]
 8016a02:	2b01      	cmp	r3, #1
 8016a04:	d105      	bne.n	8016a12 <main+0x2d6>
	             Save_Parameter();
 8016a06:	f7fa fe77 	bl	80116f8 <Save_Parameter>
	             Close_Pop();
 8016a0a:	f7f8 f85d 	bl	800eac8 <Close_Pop>
	           Zero_Align();
	           Update_Proc_All();
	           Close_Pop();
	           CalSave_Pop("Save Cal ParamTab?");
	         }
	         break;
 8016a0e:	f000 bea6 	b.w	801775e <main+0x1022>
	             Close_Pop();
 8016a12:	f7f8 f859 	bl	800eac8 <Close_Pop>
	             List_Pop();
 8016a16:	f7f8 f86d 	bl	800eaf4 <List_Pop>
	         break;
 8016a1a:	f000 bea0 	b.w	801775e <main+0x1022>
	         else if((PopType & LIST_POP) && (MenuNow[ST]==RESTORE )) {
 8016a1e:	4b1f      	ldr	r3, [pc, #124]	; (8016a9c <main+0x360>)
 8016a20:	781b      	ldrb	r3, [r3, #0]
 8016a22:	f003 0302 	and.w	r3, r3, #2
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d03c      	beq.n	8016aa4 <main+0x368>
 8016a2a:	4b1b      	ldr	r3, [pc, #108]	; (8016a98 <main+0x35c>)
 8016a2c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8016a30:	2b28      	cmp	r3, #40	; 0x28
 8016a32:	d137      	bne.n	8016aa4 <main+0x368>
	           Restore_CalPar();
 8016a34:	f7fb f8ac 	bl	8011b90 <Restore_CalPar>
	           Dialog_Pop("Save All ParamTab?");
 8016a38:	4819      	ldr	r0, [pc, #100]	; (8016aa0 <main+0x364>)
 8016a3a:	f7f8 f871 	bl	800eb20 <Dialog_Pop>
	           Cal_Flag = 1;
 8016a3e:	4b09      	ldr	r3, [pc, #36]	; (8016a64 <main+0x328>)
 8016a40:	2201      	movs	r2, #1
 8016a42:	701a      	strb	r2, [r3, #0]
	         break;
 8016a44:	f000 be8b 	b.w	801775e <main+0x1022>
 8016a48:	20006b18 	.word	0x20006b18
 8016a4c:	0ffcfffe 	.word	0x0ffcfffe
 8016a50:	2000287c 	.word	0x2000287c
 8016a54:	20006a84 	.word	0x20006a84
 8016a58:	080009f4 	.word	0x080009f4
 8016a5c:	20000580 	.word	0x20000580
 8016a60:	08000a18 	.word	0x08000a18
 8016a64:	200001b4 	.word	0x200001b4
 8016a68:	08000b58 	.word	0x08000b58
 8016a6c:	20000008 	.word	0x20000008
 8016a70:	20000298 	.word	0x20000298
 8016a74:	200007a4 	.word	0x200007a4
 8016a78:	20006984 	.word	0x20006984
 8016a7c:	200007aa 	.word	0x200007aa
 8016a80:	20000140 	.word	0x20000140
 8016a84:	20000c10 	.word	0x20000c10
 8016a88:	2000281c 	.word	0x2000281c
 8016a8c:	200007a6 	.word	0x200007a6
 8016a90:	2000077d 	.word	0x2000077d
 8016a94:	20000000 	.word	0x20000000
 8016a98:	20000538 	.word	0x20000538
 8016a9c:	20000794 	.word	0x20000794
 8016aa0:	08000a40 	.word	0x08000a40
	         else if((PopType & LIST_POP) && (MenuNow[ST]==AUTO_CAL )) {
 8016aa4:	4baf      	ldr	r3, [pc, #700]	; (8016d64 <main+0x628>)
 8016aa6:	781b      	ldrb	r3, [r3, #0]
 8016aa8:	f003 0302 	and.w	r3, r3, #2
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	f000 8656 	beq.w	801775e <main+0x1022>
 8016ab2:	4bad      	ldr	r3, [pc, #692]	; (8016d68 <main+0x62c>)
 8016ab4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8016ab8:	2b27      	cmp	r3, #39	; 0x27
 8016aba:	f040 8650 	bne.w	801775e <main+0x1022>
	           Close_Pop();
 8016abe:	f7f8 f803 	bl	800eac8 <Close_Pop>
	           Calibrate_Pop("Waiting for Calibration...");
 8016ac2:	48aa      	ldr	r0, [pc, #680]	; (8016d6c <main+0x630>)
 8016ac4:	f7f8 f892 	bl	800ebec <Calibrate_Pop>
	           Cal_Flag = 1;
 8016ac8:	4ba9      	ldr	r3, [pc, #676]	; (8016d70 <main+0x634>)
 8016aca:	2201      	movs	r2, #1
 8016acc:	701a      	strb	r2, [r3, #0]
	           DrawWindow(WaveBuf, ParamTab);
 8016ace:	49a9      	ldr	r1, [pc, #676]	; (8016d74 <main+0x638>)
 8016ad0:	48a9      	ldr	r0, [pc, #676]	; (8016d78 <main+0x63c>)
 8016ad2:	f7f6 fff9 	bl	800dac8 <DrawWindow>
	           Zero_Align();
 8016ad6:	f7fe fbbd 	bl	8015254 <Zero_Align>
	           Update_Proc_All();
 8016ada:	f7fe f939 	bl	8014d50 <Update_Proc_All>
	           Close_Pop();
 8016ade:	f7f7 fff3 	bl	800eac8 <Close_Pop>
	           CalSave_Pop("Save Cal ParamTab?");
 8016ae2:	48a6      	ldr	r0, [pc, #664]	; (8016d7c <main+0x640>)
 8016ae4:	f7f8 f8b8 	bl	800ec58 <CalSave_Pop>
	         break;
 8016ae8:	f000 be39 	b.w	801775e <main+0x1022>
	       }
	       else if((Current == ST)&&(Cal_Flag==1)){
 8016aec:	4ba4      	ldr	r3, [pc, #656]	; (8016d80 <main+0x644>)
 8016aee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016af2:	2b07      	cmp	r3, #7
 8016af4:	d113      	bne.n	8016b1e <main+0x3e2>
 8016af6:	4b9e      	ldr	r3, [pc, #632]	; (8016d70 <main+0x634>)
 8016af8:	781b      	ldrb	r3, [r3, #0]
 8016afa:	2b01      	cmp	r3, #1
 8016afc:	d10f      	bne.n	8016b1e <main+0x3e2>
	         if(PopType & DAILOG_POP){
 8016afe:	4b99      	ldr	r3, [pc, #612]	; (8016d64 <main+0x628>)
 8016b00:	781b      	ldrb	r3, [r3, #0]
 8016b02:	f003 0304 	and.w	r3, r3, #4
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	f000 862b 	beq.w	8017762 <main+0x1026>
	           Save_Kpg();
 8016b0c:	f7fa ff1e 	bl	801194c <Save_Kpg>
	           Close_Pop();
 8016b10:	f7f7 ffda 	bl	800eac8 <Close_Pop>
	           Cal_Flag = 0;
 8016b14:	4b96      	ldr	r3, [pc, #600]	; (8016d70 <main+0x634>)
 8016b16:	2200      	movs	r2, #0
 8016b18:	701a      	strb	r2, [r3, #0]
	         }
	         break;
 8016b1a:	f000 be22 	b.w	8017762 <main+0x1026>
	       }

	       if ((Current == FN)&&(PopType & LIST_POP)){
 8016b1e:	4b98      	ldr	r3, [pc, #608]	; (8016d80 <main+0x644>)
 8016b20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b24:	2b05      	cmp	r3, #5
 8016b26:	d177      	bne.n	8016c18 <main+0x4dc>
 8016b28:	4b8e      	ldr	r3, [pc, #568]	; (8016d64 <main+0x628>)
 8016b2a:	781b      	ldrb	r3, [r3, #0]
 8016b2c:	f003 0302 	and.w	r3, r3, #2
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	d071      	beq.n	8016c18 <main+0x4dc>
	         i = 0;
 8016b34:	2300      	movs	r3, #0
 8016b36:	80fb      	strh	r3, [r7, #6]
	         {
	           if(SAVE_FLAG==KEYCODE_MEM)Close_Pop();
 8016b38:	797b      	ldrb	r3, [r7, #5]
 8016b3a:	2b09      	cmp	r3, #9
 8016b3c:	d101      	bne.n	8016b42 <main+0x406>
 8016b3e:	f7f7 ffc3 	bl	800eac8 <Close_Pop>
	           if(MenuNow[FN] == SAVE_BMP) i = Save_Bmp(List[SAVE_BMP].Val);
 8016b42:	4b89      	ldr	r3, [pc, #548]	; (8016d68 <main+0x62c>)
 8016b44:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016b48:	2b1d      	cmp	r3, #29
 8016b4a:	d107      	bne.n	8016b5c <main+0x420>
 8016b4c:	4b8d      	ldr	r3, [pc, #564]	; (8016d84 <main+0x648>)
 8016b4e:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 8016b52:	4618      	mov	r0, r3
 8016b54:	f7f9 fdd6 	bl	8010704 <Save_Bmp>
 8016b58:	4603      	mov	r3, r0
 8016b5a:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_DAT) i = Save_Dat(List[SAVE_DAT].Val);
 8016b5c:	4b82      	ldr	r3, [pc, #520]	; (8016d68 <main+0x62c>)
 8016b5e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016b62:	2b1e      	cmp	r3, #30
 8016b64:	d107      	bne.n	8016b76 <main+0x43a>
 8016b66:	4b87      	ldr	r3, [pc, #540]	; (8016d84 <main+0x648>)
 8016b68:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 8016b6c:	4618      	mov	r0, r3
 8016b6e:	f7f9 fc89 	bl	8010484 <Save_Dat>
 8016b72:	4603      	mov	r3, r0
 8016b74:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_BUF) i = Save_Buf(List[SAVE_BUF].Val);
 8016b76:	4b7c      	ldr	r3, [pc, #496]	; (8016d68 <main+0x62c>)
 8016b78:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016b7c:	2b1f      	cmp	r3, #31
 8016b7e:	d107      	bne.n	8016b90 <main+0x454>
 8016b80:	4b80      	ldr	r3, [pc, #512]	; (8016d84 <main+0x648>)
 8016b82:	f9b3 30fc 	ldrsh.w	r3, [r3, #252]	; 0xfc
 8016b86:	4618      	mov	r0, r3
 8016b88:	f7f9 fba6 	bl	80102d8 <Save_Buf>
 8016b8c:	4603      	mov	r3, r0
 8016b8e:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_CSV) i = Save_Csv(List[SAVE_CSV].Val);
 8016b90:	4b75      	ldr	r3, [pc, #468]	; (8016d68 <main+0x62c>)
 8016b92:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016b96:	2b20      	cmp	r3, #32
 8016b98:	d107      	bne.n	8016baa <main+0x46e>
 8016b9a:	4b7a      	ldr	r3, [pc, #488]	; (8016d84 <main+0x648>)
 8016b9c:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
 8016ba0:	4618      	mov	r0, r3
 8016ba2:	f7f9 ff19 	bl	80109d8 <Save_Csv>
 8016ba6:	4603      	mov	r3, r0
 8016ba8:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_SVG) i = Save_Svg(List[SAVE_SVG].Val);
 8016baa:	4b6f      	ldr	r3, [pc, #444]	; (8016d68 <main+0x62c>)
 8016bac:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016bb0:	2b21      	cmp	r3, #33	; 0x21
 8016bb2:	d107      	bne.n	8016bc4 <main+0x488>
 8016bb4:	4b73      	ldr	r3, [pc, #460]	; (8016d84 <main+0x648>)
 8016bb6:	f9b3 310c 	ldrsh.w	r3, [r3, #268]	; 0x10c
 8016bba:	4618      	mov	r0, r3
 8016bbc:	f7fa f932 	bl	8010e24 <Save_Svg>
 8016bc0:	4603      	mov	r3, r0
 8016bc2:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == LOAD_DAT) i = Load_Dat(List[LOAD_DAT].Val);
 8016bc4:	4b68      	ldr	r3, [pc, #416]	; (8016d68 <main+0x62c>)
 8016bc6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016bca:	2b22      	cmp	r3, #34	; 0x22
 8016bcc:	d107      	bne.n	8016bde <main+0x4a2>
 8016bce:	4b6d      	ldr	r3, [pc, #436]	; (8016d84 <main+0x648>)
 8016bd0:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	; 0x114
 8016bd4:	4618      	mov	r0, r3
 8016bd6:	f7f9 fce9 	bl	80105ac <Load_Dat>
 8016bda:	4603      	mov	r3, r0
 8016bdc:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == LOAD_BUF) i = Load_Buf(List[LOAD_BUF].Val);
 8016bde:	4b62      	ldr	r3, [pc, #392]	; (8016d68 <main+0x62c>)
 8016be0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016be4:	2b23      	cmp	r3, #35	; 0x23
 8016be6:	d107      	bne.n	8016bf8 <main+0x4bc>
 8016be8:	4b66      	ldr	r3, [pc, #408]	; (8016d84 <main+0x648>)
 8016bea:	f9b3 311c 	ldrsh.w	r3, [r3, #284]	; 0x11c
 8016bee:	4618      	mov	r0, r3
 8016bf0:	f7f9 fa94 	bl	801011c <Load_Buf>
 8016bf4:	4603      	mov	r3, r0
 8016bf6:	80fb      	strh	r3, [r7, #6]
	           SAVE_FLAG = 0;
 8016bf8:	2300      	movs	r3, #0
 8016bfa:	717b      	strb	r3, [r7, #5]
	         }
	         DispFileInfo(i);
 8016bfc:	88fb      	ldrh	r3, [r7, #6]
 8016bfe:	b2db      	uxtb	r3, r3
 8016c00:	4618      	mov	r0, r3
 8016c02:	f7fe f82f 	bl	8014c64 <DispFileInfo>

	         if(PopType & DAILOG_POP)  Close_Pop();
 8016c06:	4b57      	ldr	r3, [pc, #348]	; (8016d64 <main+0x628>)
 8016c08:	781b      	ldrb	r3, [r3, #0]
 8016c0a:	f003 0304 	and.w	r3, r3, #4
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d062      	beq.n	8016cd8 <main+0x59c>
 8016c12:	f7f7 ff59 	bl	800eac8 <Close_Pop>
 8016c16:	e05f      	b.n	8016cd8 <main+0x59c>

	       }
	       else if((PopType & DAILOG_POP ) &&(SAVE_FLAG!=KEYCODE_MEM)){
 8016c18:	4b52      	ldr	r3, [pc, #328]	; (8016d64 <main+0x628>)
 8016c1a:	781b      	ldrb	r3, [r3, #0]
 8016c1c:	f003 0304 	and.w	r3, r3, #4
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	d00b      	beq.n	8016c3c <main+0x500>
 8016c24:	797b      	ldrb	r3, [r7, #5]
 8016c26:	2b09      	cmp	r3, #9
 8016c28:	d008      	beq.n	8016c3c <main+0x500>
	         Save_Parameter();
 8016c2a:	f7fa fd65 	bl	80116f8 <Save_Parameter>
	         Cal_Flag = 0;
 8016c2e:	4b50      	ldr	r3, [pc, #320]	; (8016d70 <main+0x634>)
 8016c30:	2200      	movs	r2, #0
 8016c32:	701a      	strb	r2, [r3, #0]
	         Close_Pop();
 8016c34:	f7f7 ff48 	bl	800eac8 <Close_Pop>
	         break;
 8016c38:	f000 bda0 	b.w	801777c <main+0x1040>
	       }
	       else {
	          if(Status & STOP){
 8016c3c:	4b52      	ldr	r3, [pc, #328]	; (8016d88 <main+0x64c>)
 8016c3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c42:	b29b      	uxth	r3, r3
 8016c44:	f003 0301 	and.w	r3, r3, #1
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d02e      	beq.n	8016caa <main+0x56e>
	            if(Status & LOADM )Status &= ~LOADM;
 8016c4c:	4b4e      	ldr	r3, [pc, #312]	; (8016d88 <main+0x64c>)
 8016c4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c52:	b29b      	uxth	r3, r3
 8016c54:	f003 0310 	and.w	r3, r3, #16
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d007      	beq.n	8016c6c <main+0x530>
 8016c5c:	4b4a      	ldr	r3, [pc, #296]	; (8016d88 <main+0x64c>)
 8016c5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c62:	f023 0310 	bic.w	r3, r3, #16
 8016c66:	b21a      	sxth	r2, r3
 8016c68:	4b47      	ldr	r3, [pc, #284]	; (8016d88 <main+0x64c>)
 8016c6a:	801a      	strh	r2, [r3, #0]
	            Status &= ~STOP;     // ��������״̬
 8016c6c:	4b46      	ldr	r3, [pc, #280]	; (8016d88 <main+0x64c>)
 8016c6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c72:	f023 0301 	bic.w	r3, r3, #1
 8016c76:	b21a      	sxth	r2, r3
 8016c78:	4b43      	ldr	r3, [pc, #268]	; (8016d88 <main+0x64c>)
 8016c7a:	801a      	strh	r2, [r3, #0]
	            if(List[SYNCMODE].Val==SINGL) ADC_Start();
 8016c7c:	4b41      	ldr	r3, [pc, #260]	; (8016d84 <main+0x648>)
 8016c7e:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8016c82:	2b04      	cmp	r3, #4
 8016c84:	d101      	bne.n	8016c8a <main+0x54e>
 8016c86:	f7f5 fd89 	bl	800c79c <ADC_Start>
	            if(List[SYNCMODE].Val==NORM)  ADC_Start();
 8016c8a:	4b3e      	ldr	r3, [pc, #248]	; (8016d84 <main+0x648>)
 8016c8c:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8016c90:	2b03      	cmp	r3, #3
 8016c92:	d101      	bne.n	8016c98 <main+0x55c>
 8016c94:	f7f5 fd82 	bl	800c79c <ADC_Start>
	            Norm_Clr = 1;
 8016c98:	4b3c      	ldr	r3, [pc, #240]	; (8016d8c <main+0x650>)
 8016c9a:	2201      	movs	r2, #1
 8016c9c:	701a      	strb	r2, [r3, #0]
	            SNGL_Kflag = 1;
 8016c9e:	4b3c      	ldr	r3, [pc, #240]	; (8016d90 <main+0x654>)
 8016ca0:	2201      	movs	r2, #1
 8016ca2:	701a      	strb	r2, [r3, #0]
	            Update_Proc_All();
 8016ca4:	f7fe f854 	bl	8014d50 <Update_Proc_All>
 8016ca8:	e016      	b.n	8016cd8 <main+0x59c>

	            if(*(short*)F_Sector==0xaa55)Restore_Scene();

	          }
	          else {
	            Status |=  STOP;     // ������ͣ״̬
 8016caa:	4b37      	ldr	r3, [pc, #220]	; (8016d88 <main+0x64c>)
 8016cac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016cb0:	f043 0301 	orr.w	r3, r3, #1
 8016cb4:	b21a      	sxth	r2, r3
 8016cb6:	4b34      	ldr	r3, [pc, #208]	; (8016d88 <main+0x64c>)
 8016cb8:	801a      	strh	r2, [r3, #0]
	            Ch1_Posi = List[V0_POSI].Val;
 8016cba:	4b32      	ldr	r3, [pc, #200]	; (8016d84 <main+0x648>)
 8016cbc:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 8016cc0:	4b34      	ldr	r3, [pc, #208]	; (8016d94 <main+0x658>)
 8016cc2:	801a      	strh	r2, [r3, #0]
	            Ch2_Posi = List[EXT_POSI].Val;
 8016cc4:	4b2f      	ldr	r3, [pc, #188]	; (8016d84 <main+0x648>)
 8016cc6:	f9b3 20dc 	ldrsh.w	r2, [r3, #220]	; 0xdc
 8016cca:	4b33      	ldr	r3, [pc, #204]	; (8016d98 <main+0x65c>)
 8016ccc:	801a      	strh	r2, [r3, #0]
	            Tri_Posi = List[THRESHOLD].Val;
 8016cce:	4b2d      	ldr	r3, [pc, #180]	; (8016d84 <main+0x648>)
 8016cd0:	f9b3 2084 	ldrsh.w	r2, [r3, #132]	; 0x84
 8016cd4:	4b31      	ldr	r3, [pc, #196]	; (8016d9c <main+0x660>)
 8016cd6:	801a      	strh	r2, [r3, #0]
	            Save_Bmp(List[SAVE_BMP].Val);
	            List[SAVE_BMP].Val++;
	          #endif
	          }
	        }
	        DispStatus();            // ��ʾ����״̬
 8016cd8:	f7fd fd2e 	bl	8014738 <DispStatus>
 	       break;
 8016cdc:	f000 bd4e 	b.w	801777c <main+0x1040>

	      case KEYCODE_D_MANU:
	        if(List[FITTRIGG].Val)
 8016ce0:	4b28      	ldr	r3, [pc, #160]	; (8016d84 <main+0x648>)
 8016ce2:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	f000 853d 	beq.w	8017766 <main+0x102a>
	        {
	          Auto_Fit();
 8016cec:	f7ff f88a 	bl	8015e04 <Auto_Fit>
	        }
	        break;
 8016cf0:	f000 bd39 	b.w	8017766 <main+0x102a>

	      case KEYCODE_MANU:
	        if(!(PopType & LIST_POP)){
 8016cf4:	4b1b      	ldr	r3, [pc, #108]	; (8016d64 <main+0x628>)
 8016cf6:	781b      	ldrb	r3, [r3, #0]
 8016cf8:	f003 0302 	and.w	r3, r3, #2
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d111      	bne.n	8016d24 <main+0x5e8>
	            if(Cal_Flag){
 8016d00:	4b1b      	ldr	r3, [pc, #108]	; (8016d70 <main+0x634>)
 8016d02:	781b      	ldrb	r3, [r3, #0]
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	d006      	beq.n	8016d16 <main+0x5da>
	              Cal_Flag = 0;
 8016d08:	4b19      	ldr	r3, [pc, #100]	; (8016d70 <main+0x634>)
 8016d0a:	2200      	movs	r2, #0
 8016d0c:	701a      	strb	r2, [r3, #0]
	              Close_Pop();
 8016d0e:	f7f7 fedb 	bl	800eac8 <Close_Pop>
	          // ------------ �ָ���ʾ��Ϣ��ʾ���Ҷ�ԭ����ʾ��Ϣ ------------
	          if(MenuNow[Current] == SMPL_DPTH) List[SMPL_DPTH].Flg  |= UPD; // ������ȸ�����ʾ
	          else if(Current == FN)           List[MenuNow[FN]].Flg |= UPD; // ָ�����ļ���д�������ʾ
	          else                             List[MenuNow[ME]].Flg |= UPD; // ָ���Ĳ��β����������ʾ
	        }
	        break;
 8016d12:	f000 bd33 	b.w	801777c <main+0x1040>
	              Cal_Flag = 0;
 8016d16:	4b16      	ldr	r3, [pc, #88]	; (8016d70 <main+0x634>)
 8016d18:	2200      	movs	r2, #0
 8016d1a:	701a      	strb	r2, [r3, #0]
	              List_Pop(); // �˵����ر�ʱ, �򿪲˵���
 8016d1c:	f7f7 feea 	bl	800eaf4 <List_Pop>
	        break;
 8016d20:	f000 bd2c 	b.w	801777c <main+0x1040>
	          Close_Pop();                // �˵����Ѵ�ʱ, �رղ˵���
 8016d24:	f7f7 fed0 	bl	800eac8 <Close_Pop>
	          if(Current == XN)      List[T1_POSI   ].Flg |= UPD;
 8016d28:	4b15      	ldr	r3, [pc, #84]	; (8016d80 <main+0x644>)
 8016d2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d2e:	2b01      	cmp	r3, #1
 8016d30:	d109      	bne.n	8016d46 <main+0x60a>
 8016d32:	4b14      	ldr	r3, [pc, #80]	; (8016d84 <main+0x648>)
 8016d34:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8016d38:	f043 0320 	orr.w	r3, r3, #32
 8016d3c:	b2da      	uxtb	r2, r3
 8016d3e:	4b11      	ldr	r3, [pc, #68]	; (8016d84 <main+0x648>)
 8016d40:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 8016d44:	e03f      	b.n	8016dc6 <main+0x68a>
	          else if(Current == YN) List[V1_POSI   ].Flg |= UPD;
 8016d46:	4b0e      	ldr	r3, [pc, #56]	; (8016d80 <main+0x644>)
 8016d48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	d127      	bne.n	8016da0 <main+0x664>
 8016d50:	4b0c      	ldr	r3, [pc, #48]	; (8016d84 <main+0x648>)
 8016d52:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8016d56:	f043 0320 	orr.w	r3, r3, #32
 8016d5a:	b2da      	uxtb	r2, r3
 8016d5c:	4b09      	ldr	r3, [pc, #36]	; (8016d84 <main+0x648>)
 8016d5e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8016d62:	e030      	b.n	8016dc6 <main+0x68a>
 8016d64:	20000794 	.word	0x20000794
 8016d68:	20000538 	.word	0x20000538
 8016d6c:	08000a54 	.word	0x08000a54
 8016d70:	200001b4 	.word	0x200001b4
 8016d74:	20000140 	.word	0x20000140
 8016d78:	20000c10 	.word	0x20000c10
 8016d7c:	08000a70 	.word	0x08000a70
 8016d80:	200007a6 	.word	0x200007a6
 8016d84:	20000298 	.word	0x20000298
 8016d88:	200007a8 	.word	0x200007a8
 8016d8c:	200007af 	.word	0x200007af
 8016d90:	2000055c 	.word	0x2000055c
 8016d94:	2000688c 	.word	0x2000688c
 8016d98:	20006884 	.word	0x20006884
 8016d9c:	20002868 	.word	0x20002868
	          else                   List[MenuNow[SN]].Flg |= UPD;
 8016da0:	4b7d      	ldr	r3, [pc, #500]	; (8016f98 <main+0x85c>)
 8016da2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8016da6:	4a7d      	ldr	r2, [pc, #500]	; (8016f9c <main+0x860>)
 8016da8:	00db      	lsls	r3, r3, #3
 8016daa:	4413      	add	r3, r2
 8016dac:	799b      	ldrb	r3, [r3, #6]
 8016dae:	4a7a      	ldr	r2, [pc, #488]	; (8016f98 <main+0x85c>)
 8016db0:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8016db4:	4610      	mov	r0, r2
 8016db6:	f043 0320 	orr.w	r3, r3, #32
 8016dba:	b2d9      	uxtb	r1, r3
 8016dbc:	4a77      	ldr	r2, [pc, #476]	; (8016f9c <main+0x860>)
 8016dbe:	00c3      	lsls	r3, r0, #3
 8016dc0:	4413      	add	r3, r2
 8016dc2:	460a      	mov	r2, r1
 8016dc4:	719a      	strb	r2, [r3, #6]
	          if(MenuNow[Current] == SMPL_DPTH) List[SMPL_DPTH].Flg  |= UPD; // ������ȸ�����ʾ
 8016dc6:	4b76      	ldr	r3, [pc, #472]	; (8016fa0 <main+0x864>)
 8016dc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016dcc:	461a      	mov	r2, r3
 8016dce:	4b72      	ldr	r3, [pc, #456]	; (8016f98 <main+0x85c>)
 8016dd0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016dd4:	2b09      	cmp	r3, #9
 8016dd6:	d10a      	bne.n	8016dee <main+0x6b2>
 8016dd8:	4b70      	ldr	r3, [pc, #448]	; (8016f9c <main+0x860>)
 8016dda:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8016dde:	f043 0320 	orr.w	r3, r3, #32
 8016de2:	b2da      	uxtb	r2, r3
 8016de4:	4b6d      	ldr	r3, [pc, #436]	; (8016f9c <main+0x860>)
 8016de6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	        break;
 8016dea:	f000 bcc7 	b.w	801777c <main+0x1040>
	          else if(Current == FN)           List[MenuNow[FN]].Flg |= UPD; // ָ�����ļ���д�������ʾ
 8016dee:	4b6c      	ldr	r3, [pc, #432]	; (8016fa0 <main+0x864>)
 8016df0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016df4:	2b05      	cmp	r3, #5
 8016df6:	d114      	bne.n	8016e22 <main+0x6e6>
 8016df8:	4b67      	ldr	r3, [pc, #412]	; (8016f98 <main+0x85c>)
 8016dfa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016dfe:	4a67      	ldr	r2, [pc, #412]	; (8016f9c <main+0x860>)
 8016e00:	00db      	lsls	r3, r3, #3
 8016e02:	4413      	add	r3, r2
 8016e04:	799b      	ldrb	r3, [r3, #6]
 8016e06:	4a64      	ldr	r2, [pc, #400]	; (8016f98 <main+0x85c>)
 8016e08:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8016e0c:	4610      	mov	r0, r2
 8016e0e:	f043 0320 	orr.w	r3, r3, #32
 8016e12:	b2d9      	uxtb	r1, r3
 8016e14:	4a61      	ldr	r2, [pc, #388]	; (8016f9c <main+0x860>)
 8016e16:	00c3      	lsls	r3, r0, #3
 8016e18:	4413      	add	r3, r2
 8016e1a:	460a      	mov	r2, r1
 8016e1c:	719a      	strb	r2, [r3, #6]
	        break;
 8016e1e:	f000 bcad 	b.w	801777c <main+0x1040>
	          else                             List[MenuNow[ME]].Flg |= UPD; // ָ���Ĳ��β����������ʾ
 8016e22:	4b5d      	ldr	r3, [pc, #372]	; (8016f98 <main+0x85c>)
 8016e24:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8016e28:	4a5c      	ldr	r2, [pc, #368]	; (8016f9c <main+0x860>)
 8016e2a:	00db      	lsls	r3, r3, #3
 8016e2c:	4413      	add	r3, r2
 8016e2e:	799b      	ldrb	r3, [r3, #6]
 8016e30:	4a59      	ldr	r2, [pc, #356]	; (8016f98 <main+0x85c>)
 8016e32:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8016e36:	4610      	mov	r0, r2
 8016e38:	f043 0320 	orr.w	r3, r3, #32
 8016e3c:	b2d9      	uxtb	r1, r3
 8016e3e:	4a57      	ldr	r2, [pc, #348]	; (8016f9c <main+0x860>)
 8016e40:	00c3      	lsls	r3, r0, #3
 8016e42:	4413      	add	r3, r2
 8016e44:	460a      	mov	r2, r1
 8016e46:	719a      	strb	r2, [r3, #6]
	        break;
 8016e48:	f000 bc98 	b.w	801777c <main+0x1040>

	      case KEYCODE_UP:
	        if (PopType & LIST_POP){
 8016e4c:	4b55      	ldr	r3, [pc, #340]	; (8016fa4 <main+0x868>)
 8016e4e:	781b      	ldrb	r3, [r3, #0]
 8016e50:	f003 0302 	and.w	r3, r3, #2
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	d03b      	beq.n	8016ed0 <main+0x794>
	          if(MenuNow[Current] > MU_BEGN[Current]) MenuNow[Current]--;
 8016e58:	4b51      	ldr	r3, [pc, #324]	; (8016fa0 <main+0x864>)
 8016e5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e5e:	461a      	mov	r2, r3
 8016e60:	4b4d      	ldr	r3, [pc, #308]	; (8016f98 <main+0x85c>)
 8016e62:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016e66:	461a      	mov	r2, r3
 8016e68:	4b4d      	ldr	r3, [pc, #308]	; (8016fa0 <main+0x864>)
 8016e6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e6e:	4619      	mov	r1, r3
 8016e70:	4b4d      	ldr	r3, [pc, #308]	; (8016fa8 <main+0x86c>)
 8016e72:	5c5b      	ldrb	r3, [r3, r1]
 8016e74:	429a      	cmp	r2, r3
 8016e76:	dd0e      	ble.n	8016e96 <main+0x75a>
 8016e78:	4b49      	ldr	r3, [pc, #292]	; (8016fa0 <main+0x864>)
 8016e7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e7e:	4a46      	ldr	r2, [pc, #280]	; (8016f98 <main+0x85c>)
 8016e80:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8016e84:	b292      	uxth	r2, r2
 8016e86:	3a01      	subs	r2, #1
 8016e88:	b292      	uxth	r2, r2
 8016e8a:	b211      	sxth	r1, r2
 8016e8c:	4a42      	ldr	r2, [pc, #264]	; (8016f98 <main+0x85c>)
 8016e8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	          else                  MenuNow[Current] += M_ITEMS[Current]-1;
	        } else {
	          if (Current > 0) Current--;
	          else             Current = ST;
	        }
	        break;
 8016e92:	f000 bc73 	b.w	801777c <main+0x1040>
	          else                  MenuNow[Current] += M_ITEMS[Current]-1;
 8016e96:	4b42      	ldr	r3, [pc, #264]	; (8016fa0 <main+0x864>)
 8016e98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e9c:	461a      	mov	r2, r3
 8016e9e:	4b3e      	ldr	r3, [pc, #248]	; (8016f98 <main+0x85c>)
 8016ea0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016ea4:	b29a      	uxth	r2, r3
 8016ea6:	4b3e      	ldr	r3, [pc, #248]	; (8016fa0 <main+0x864>)
 8016ea8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016eac:	4619      	mov	r1, r3
 8016eae:	4b3f      	ldr	r3, [pc, #252]	; (8016fac <main+0x870>)
 8016eb0:	5c5b      	ldrb	r3, [r3, r1]
 8016eb2:	b29b      	uxth	r3, r3
 8016eb4:	4413      	add	r3, r2
 8016eb6:	b29b      	uxth	r3, r3
 8016eb8:	3b01      	subs	r3, #1
 8016eba:	b299      	uxth	r1, r3
 8016ebc:	4b38      	ldr	r3, [pc, #224]	; (8016fa0 <main+0x864>)
 8016ebe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ec2:	461a      	mov	r2, r3
 8016ec4:	b209      	sxth	r1, r1
 8016ec6:	4b34      	ldr	r3, [pc, #208]	; (8016f98 <main+0x85c>)
 8016ec8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	        break;
 8016ecc:	f000 bc56 	b.w	801777c <main+0x1040>
	          if (Current > 0) Current--;
 8016ed0:	4b33      	ldr	r3, [pc, #204]	; (8016fa0 <main+0x864>)
 8016ed2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	dd0a      	ble.n	8016ef0 <main+0x7b4>
 8016eda:	4b31      	ldr	r3, [pc, #196]	; (8016fa0 <main+0x864>)
 8016edc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ee0:	b29b      	uxth	r3, r3
 8016ee2:	3b01      	subs	r3, #1
 8016ee4:	b29b      	uxth	r3, r3
 8016ee6:	b21a      	sxth	r2, r3
 8016ee8:	4b2d      	ldr	r3, [pc, #180]	; (8016fa0 <main+0x864>)
 8016eea:	801a      	strh	r2, [r3, #0]
	        break;
 8016eec:	f000 bc46 	b.w	801777c <main+0x1040>
	          else             Current = ST;
 8016ef0:	4b2b      	ldr	r3, [pc, #172]	; (8016fa0 <main+0x864>)
 8016ef2:	2207      	movs	r2, #7
 8016ef4:	801a      	strh	r2, [r3, #0]
	        break;
 8016ef6:	f000 bc41 	b.w	801777c <main+0x1040>

	     case KEYCODE_DOWN:
	        if(PopType & LIST_POP){
 8016efa:	4b2a      	ldr	r3, [pc, #168]	; (8016fa4 <main+0x868>)
 8016efc:	781b      	ldrb	r3, [r3, #0]
 8016efe:	f003 0302 	and.w	r3, r3, #2
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	d034      	beq.n	8016f70 <main+0x834>
	          MenuNow[Current]++;
 8016f06:	4b26      	ldr	r3, [pc, #152]	; (8016fa0 <main+0x864>)
 8016f08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f0c:	4a22      	ldr	r2, [pc, #136]	; (8016f98 <main+0x85c>)
 8016f0e:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8016f12:	b292      	uxth	r2, r2
 8016f14:	3201      	adds	r2, #1
 8016f16:	b292      	uxth	r2, r2
 8016f18:	b211      	sxth	r1, r2
 8016f1a:	4a1f      	ldr	r2, [pc, #124]	; (8016f98 <main+0x85c>)
 8016f1c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	          if(MenuNow[Current] >=(MU_BEGN[Current]+M_ITEMS[Current])){
 8016f20:	4b1f      	ldr	r3, [pc, #124]	; (8016fa0 <main+0x864>)
 8016f22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f26:	461a      	mov	r2, r3
 8016f28:	4b1b      	ldr	r3, [pc, #108]	; (8016f98 <main+0x85c>)
 8016f2a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016f2e:	461a      	mov	r2, r3
 8016f30:	4b1b      	ldr	r3, [pc, #108]	; (8016fa0 <main+0x864>)
 8016f32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f36:	4619      	mov	r1, r3
 8016f38:	4b1b      	ldr	r3, [pc, #108]	; (8016fa8 <main+0x86c>)
 8016f3a:	5c5b      	ldrb	r3, [r3, r1]
 8016f3c:	4619      	mov	r1, r3
 8016f3e:	4b18      	ldr	r3, [pc, #96]	; (8016fa0 <main+0x864>)
 8016f40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f44:	4618      	mov	r0, r3
 8016f46:	4b19      	ldr	r3, [pc, #100]	; (8016fac <main+0x870>)
 8016f48:	5c1b      	ldrb	r3, [r3, r0]
 8016f4a:	440b      	add	r3, r1
 8016f4c:	429a      	cmp	r2, r3
 8016f4e:	f2c0 840c 	blt.w	801776a <main+0x102e>
	            MenuNow[Current] = MU_BEGN[Current];
 8016f52:	4b13      	ldr	r3, [pc, #76]	; (8016fa0 <main+0x864>)
 8016f54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f58:	461a      	mov	r2, r3
 8016f5a:	4b13      	ldr	r3, [pc, #76]	; (8016fa8 <main+0x86c>)
 8016f5c:	5c99      	ldrb	r1, [r3, r2]
 8016f5e:	4b10      	ldr	r3, [pc, #64]	; (8016fa0 <main+0x864>)
 8016f60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f64:	461a      	mov	r2, r3
 8016f66:	b209      	sxth	r1, r1
 8016f68:	4b0b      	ldr	r3, [pc, #44]	; (8016f98 <main+0x85c>)
 8016f6a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	          }
	        } else {
	          if (Current < 7) Current++;
	          else             Current = YN;
	        }
	        break;
 8016f6e:	e3fc      	b.n	801776a <main+0x102e>
	          if (Current < 7) Current++;
 8016f70:	4b0b      	ldr	r3, [pc, #44]	; (8016fa0 <main+0x864>)
 8016f72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f76:	2b06      	cmp	r3, #6
 8016f78:	dc09      	bgt.n	8016f8e <main+0x852>
 8016f7a:	4b09      	ldr	r3, [pc, #36]	; (8016fa0 <main+0x864>)
 8016f7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f80:	b29b      	uxth	r3, r3
 8016f82:	3301      	adds	r3, #1
 8016f84:	b29b      	uxth	r3, r3
 8016f86:	b21a      	sxth	r2, r3
 8016f88:	4b05      	ldr	r3, [pc, #20]	; (8016fa0 <main+0x864>)
 8016f8a:	801a      	strh	r2, [r3, #0]
	        break;
 8016f8c:	e3ed      	b.n	801776a <main+0x102e>
	          else             Current = YN;
 8016f8e:	4b04      	ldr	r3, [pc, #16]	; (8016fa0 <main+0x864>)
 8016f90:	2200      	movs	r2, #0
 8016f92:	801a      	strh	r2, [r3, #0]
	        break;
 8016f94:	e3e9      	b.n	801776a <main+0x102e>
 8016f96:	bf00      	nop
 8016f98:	20000538 	.word	0x20000538
 8016f9c:	20000298 	.word	0x20000298
 8016fa0:	200007a6 	.word	0x200007a6
 8016fa4:	20000794 	.word	0x20000794
 8016fa8:	08001f40 	.word	0x08001f40
 8016fac:	08001f48 	.word	0x08001f48

	      case KEYCODE_LEFT:
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 8016fb0:	4bb9      	ldr	r3, [pc, #740]	; (8017298 <main+0xb5c>)
 8016fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016fb6:	2b07      	cmp	r3, #7
 8016fb8:	d106      	bne.n	8016fc8 <main+0x88c>
 8016fba:	4bb8      	ldr	r3, [pc, #736]	; (801729c <main+0xb60>)
 8016fbc:	781b      	ldrb	r3, [r3, #0]
 8016fbe:	f003 0302 	and.w	r3, r3, #2
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	f000 83d3 	beq.w	801776e <main+0x1032>
	        List[MenuNow[Current]].Flg |= UPD;  // ˢ�±��ǰԭ��ʾ��Ŀ����
 8016fc8:	4bb3      	ldr	r3, [pc, #716]	; (8017298 <main+0xb5c>)
 8016fca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016fce:	461a      	mov	r2, r3
 8016fd0:	4bb3      	ldr	r3, [pc, #716]	; (80172a0 <main+0xb64>)
 8016fd2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016fd6:	4ab3      	ldr	r2, [pc, #716]	; (80172a4 <main+0xb68>)
 8016fd8:	00db      	lsls	r3, r3, #3
 8016fda:	4413      	add	r3, r2
 8016fdc:	799b      	ldrb	r3, [r3, #6]
 8016fde:	4aae      	ldr	r2, [pc, #696]	; (8017298 <main+0xb5c>)
 8016fe0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016fe4:	4611      	mov	r1, r2
 8016fe6:	4aae      	ldr	r2, [pc, #696]	; (80172a0 <main+0xb64>)
 8016fe8:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8016fec:	4610      	mov	r0, r2
 8016fee:	f043 0320 	orr.w	r3, r3, #32
 8016ff2:	b2d9      	uxtb	r1, r3
 8016ff4:	4aab      	ldr	r2, [pc, #684]	; (80172a4 <main+0xb68>)
 8016ff6:	00c3      	lsls	r3, r0, #3
 8016ff8:	4413      	add	r3, r2
 8016ffa:	460a      	mov	r2, r1
 8016ffc:	719a      	strb	r2, [r3, #6]
	        if(List[MenuNow[Current]].Val <=MIN[MenuNow[Current]]){
 8016ffe:	4ba6      	ldr	r3, [pc, #664]	; (8017298 <main+0xb5c>)
 8017000:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017004:	461a      	mov	r2, r3
 8017006:	4ba6      	ldr	r3, [pc, #664]	; (80172a0 <main+0xb64>)
 8017008:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801700c:	4aa5      	ldr	r2, [pc, #660]	; (80172a4 <main+0xb68>)
 801700e:	00db      	lsls	r3, r3, #3
 8017010:	4413      	add	r3, r2
 8017012:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8017016:	4ba0      	ldr	r3, [pc, #640]	; (8017298 <main+0xb5c>)
 8017018:	f9b3 3000 	ldrsh.w	r3, [r3]
 801701c:	4619      	mov	r1, r3
 801701e:	4ba0      	ldr	r3, [pc, #640]	; (80172a0 <main+0xb64>)
 8017020:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8017024:	4619      	mov	r1, r3
 8017026:	4ba0      	ldr	r3, [pc, #640]	; (80172a8 <main+0xb6c>)
 8017028:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 801702c:	429a      	cmp	r2, r3
 801702e:	dc73      	bgt.n	8017118 <main+0x9dc>
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 8017030:	4b99      	ldr	r3, [pc, #612]	; (8017298 <main+0xb5c>)
 8017032:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017036:	461a      	mov	r2, r3
 8017038:	4b99      	ldr	r3, [pc, #612]	; (80172a0 <main+0xb64>)
 801703a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801703e:	2b01      	cmp	r3, #1
 8017040:	d051      	beq.n	80170e6 <main+0x9aa>
 8017042:	4b95      	ldr	r3, [pc, #596]	; (8017298 <main+0xb5c>)
 8017044:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017048:	461a      	mov	r2, r3
 801704a:	4b95      	ldr	r3, [pc, #596]	; (80172a0 <main+0xb64>)
 801704c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017050:	2b06      	cmp	r3, #6
 8017052:	d048      	beq.n	80170e6 <main+0x9aa>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8017054:	4b90      	ldr	r3, [pc, #576]	; (8017298 <main+0xb5c>)
 8017056:	f9b3 3000 	ldrsh.w	r3, [r3]
 801705a:	461a      	mov	r2, r3
 801705c:	4b90      	ldr	r3, [pc, #576]	; (80172a0 <main+0xb64>)
 801705e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 8017062:	2b0c      	cmp	r3, #12
 8017064:	d03f      	beq.n	80170e6 <main+0x9aa>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8017066:	4b8c      	ldr	r3, [pc, #560]	; (8017298 <main+0xb5c>)
 8017068:	f9b3 3000 	ldrsh.w	r3, [r3]
 801706c:	461a      	mov	r2, r3
 801706e:	4b8c      	ldr	r3, [pc, #560]	; (80172a0 <main+0xb64>)
 8017070:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017074:	2b1c      	cmp	r3, #28
 8017076:	d036      	beq.n	80170e6 <main+0x9aa>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8017078:	4b87      	ldr	r3, [pc, #540]	; (8017298 <main+0xb5c>)
 801707a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801707e:	461a      	mov	r2, r3
 8017080:	4b87      	ldr	r3, [pc, #540]	; (80172a0 <main+0xb64>)
 8017082:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8017086:	2b0f      	cmp	r3, #15
 8017088:	d02d      	beq.n	80170e6 <main+0x9aa>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 801708a:	4b83      	ldr	r3, [pc, #524]	; (8017298 <main+0xb5c>)
 801708c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017090:	461a      	mov	r2, r3
 8017092:	4b83      	ldr	r3, [pc, #524]	; (80172a0 <main+0xb64>)
 8017094:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017098:	2b0e      	cmp	r3, #14
 801709a:	d024      	beq.n	80170e6 <main+0x9aa>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 801709c:	4b7e      	ldr	r3, [pc, #504]	; (8017298 <main+0xb5c>)
 801709e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80170a2:	461a      	mov	r2, r3
 80170a4:	4b7e      	ldr	r3, [pc, #504]	; (80172a0 <main+0xb64>)
 80170a6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 80170aa:	2b0d      	cmp	r3, #13
 80170ac:	d01b      	beq.n	80170e6 <main+0x9aa>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 80170ae:	4b7a      	ldr	r3, [pc, #488]	; (8017298 <main+0xb5c>)
 80170b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80170b4:	461a      	mov	r2, r3
 80170b6:	4b7a      	ldr	r3, [pc, #488]	; (80172a0 <main+0xb64>)
 80170b8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80170bc:	2b1a      	cmp	r3, #26
 80170be:	d012      	beq.n	80170e6 <main+0x9aa>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 80170c0:	4b75      	ldr	r3, [pc, #468]	; (8017298 <main+0xb5c>)
 80170c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80170c6:	461a      	mov	r2, r3
 80170c8:	4b75      	ldr	r3, [pc, #468]	; (80172a0 <main+0xb64>)
 80170ca:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 80170ce:	2b02      	cmp	r3, #2
 80170d0:	d009      	beq.n	80170e6 <main+0x9aa>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 80170d2:	4b71      	ldr	r3, [pc, #452]	; (8017298 <main+0xb5c>)
 80170d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80170d8:	461a      	mov	r2, r3
 80170da:	4b71      	ldr	r3, [pc, #452]	; (80172a0 <main+0xb64>)
 80170dc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80170e0:	2b24      	cmp	r3, #36	; 0x24
 80170e2:	f040 8129 	bne.w	8017338 <main+0xbfc>
	            List[MenuNow[Current]].Val =MAX[MenuNow[Current]] ;
 80170e6:	4b6c      	ldr	r3, [pc, #432]	; (8017298 <main+0xb5c>)
 80170e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80170ec:	461a      	mov	r2, r3
 80170ee:	4b6c      	ldr	r3, [pc, #432]	; (80172a0 <main+0xb64>)
 80170f0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80170f4:	461a      	mov	r2, r3
 80170f6:	4b68      	ldr	r3, [pc, #416]	; (8017298 <main+0xb5c>)
 80170f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80170fc:	4619      	mov	r1, r3
 80170fe:	4b68      	ldr	r3, [pc, #416]	; (80172a0 <main+0xb64>)
 8017100:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8017104:	4618      	mov	r0, r3
 8017106:	4b69      	ldr	r3, [pc, #420]	; (80172ac <main+0xb70>)
 8017108:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 801710c:	4a65      	ldr	r2, [pc, #404]	; (80172a4 <main+0xb68>)
 801710e:	00c3      	lsls	r3, r0, #3
 8017110:	4413      	add	r3, r2
 8017112:	460a      	mov	r2, r1
 8017114:	809a      	strh	r2, [r3, #4]
 8017116:	e10f      	b.n	8017338 <main+0xbfc>
	        } else {
	          if((MenuNow[Current] == VIEWPOSI)&&((List[MenuNow[Current]].Val) >=150 ))
 8017118:	4b5f      	ldr	r3, [pc, #380]	; (8017298 <main+0xb5c>)
 801711a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801711e:	461a      	mov	r2, r3
 8017120:	4b5f      	ldr	r3, [pc, #380]	; (80172a0 <main+0xb64>)
 8017122:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017126:	2b08      	cmp	r3, #8
 8017128:	d12a      	bne.n	8017180 <main+0xa44>
 801712a:	4b5b      	ldr	r3, [pc, #364]	; (8017298 <main+0xb5c>)
 801712c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017130:	461a      	mov	r2, r3
 8017132:	4b5b      	ldr	r3, [pc, #364]	; (80172a0 <main+0xb64>)
 8017134:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017138:	4a5a      	ldr	r2, [pc, #360]	; (80172a4 <main+0xb68>)
 801713a:	00db      	lsls	r3, r3, #3
 801713c:	4413      	add	r3, r2
 801713e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017142:	2b95      	cmp	r3, #149	; 0x95
 8017144:	dd1c      	ble.n	8017180 <main+0xa44>
	            List[MenuNow[Current]].Val-=25;
 8017146:	4b54      	ldr	r3, [pc, #336]	; (8017298 <main+0xb5c>)
 8017148:	f9b3 3000 	ldrsh.w	r3, [r3]
 801714c:	461a      	mov	r2, r3
 801714e:	4b54      	ldr	r3, [pc, #336]	; (80172a0 <main+0xb64>)
 8017150:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017154:	4a53      	ldr	r2, [pc, #332]	; (80172a4 <main+0xb68>)
 8017156:	00db      	lsls	r3, r3, #3
 8017158:	4413      	add	r3, r2
 801715a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801715e:	b29b      	uxth	r3, r3
 8017160:	3b19      	subs	r3, #25
 8017162:	b29a      	uxth	r2, r3
 8017164:	4b4c      	ldr	r3, [pc, #304]	; (8017298 <main+0xb5c>)
 8017166:	f9b3 3000 	ldrsh.w	r3, [r3]
 801716a:	4619      	mov	r1, r3
 801716c:	4b4c      	ldr	r3, [pc, #304]	; (80172a0 <main+0xb64>)
 801716e:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8017172:	b211      	sxth	r1, r2
 8017174:	4a4b      	ldr	r2, [pc, #300]	; (80172a4 <main+0xb68>)
 8017176:	00db      	lsls	r3, r3, #3
 8017178:	4413      	add	r3, r2
 801717a:	460a      	mov	r2, r1
 801717c:	809a      	strh	r2, [r3, #4]
 801717e:	e0ad      	b.n	80172dc <main+0xba0>
	          else{
	          //============5.04�޸������߳�����������========
	            if(MenuNow[Current] == THRESHOLD){
 8017180:	4b45      	ldr	r3, [pc, #276]	; (8017298 <main+0xb5c>)
 8017182:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017186:	461a      	mov	r2, r3
 8017188:	4b45      	ldr	r3, [pc, #276]	; (80172a0 <main+0xb64>)
 801718a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801718e:	2b10      	cmp	r3, #16
 8017190:	d121      	bne.n	80171d6 <main+0xa9a>
	              if((List[V0_POSI].Val + List[THRESHOLD].Val) > 2)  //����������
 8017192:	4b44      	ldr	r3, [pc, #272]	; (80172a4 <main+0xb68>)
 8017194:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8017198:	461a      	mov	r2, r3
 801719a:	4b42      	ldr	r3, [pc, #264]	; (80172a4 <main+0xb68>)
 801719c:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 80171a0:	4413      	add	r3, r2
 80171a2:	2b02      	cmp	r3, #2
 80171a4:	f340 809a 	ble.w	80172dc <main+0xba0>
	                List[MenuNow[Current]].Val--;
 80171a8:	4b3b      	ldr	r3, [pc, #236]	; (8017298 <main+0xb5c>)
 80171aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80171ae:	461a      	mov	r2, r3
 80171b0:	4b3b      	ldr	r3, [pc, #236]	; (80172a0 <main+0xb64>)
 80171b2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80171b6:	461a      	mov	r2, r3
 80171b8:	493a      	ldr	r1, [pc, #232]	; (80172a4 <main+0xb68>)
 80171ba:	00d3      	lsls	r3, r2, #3
 80171bc:	440b      	add	r3, r1
 80171be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80171c2:	b29b      	uxth	r3, r3
 80171c4:	3b01      	subs	r3, #1
 80171c6:	b29b      	uxth	r3, r3
 80171c8:	b218      	sxth	r0, r3
 80171ca:	4936      	ldr	r1, [pc, #216]	; (80172a4 <main+0xb68>)
 80171cc:	00d3      	lsls	r3, r2, #3
 80171ce:	440b      	add	r3, r1
 80171d0:	4602      	mov	r2, r0
 80171d2:	809a      	strh	r2, [r3, #4]
 80171d4:	e082      	b.n	80172dc <main+0xba0>
	            }
	            else if(MenuNow[Current] == V0_POSI){
 80171d6:	4b30      	ldr	r3, [pc, #192]	; (8017298 <main+0xb5c>)
 80171d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80171dc:	461a      	mov	r2, r3
 80171de:	4b30      	ldr	r3, [pc, #192]	; (80172a0 <main+0xb64>)
 80171e0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80171e4:	2b03      	cmp	r3, #3
 80171e6:	d134      	bne.n	8017252 <main+0xb16>
	              if((List[V0_POSI].Val + List[THRESHOLD].Val) <2){
 80171e8:	4b2e      	ldr	r3, [pc, #184]	; (80172a4 <main+0xb68>)
 80171ea:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80171ee:	461a      	mov	r2, r3
 80171f0:	4b2c      	ldr	r3, [pc, #176]	; (80172a4 <main+0xb68>)
 80171f2:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 80171f6:	4413      	add	r3, r2
 80171f8:	2b01      	cmp	r3, #1
 80171fa:	dc13      	bgt.n	8017224 <main+0xae8>
	                List[V0_POSI].Val--;
 80171fc:	4b29      	ldr	r3, [pc, #164]	; (80172a4 <main+0xb68>)
 80171fe:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8017202:	b29b      	uxth	r3, r3
 8017204:	3b01      	subs	r3, #1
 8017206:	b29b      	uxth	r3, r3
 8017208:	b21a      	sxth	r2, r3
 801720a:	4b26      	ldr	r3, [pc, #152]	; (80172a4 <main+0xb68>)
 801720c:	839a      	strh	r2, [r3, #28]
	                List[THRESHOLD].Val++;
 801720e:	4b25      	ldr	r3, [pc, #148]	; (80172a4 <main+0xb68>)
 8017210:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8017214:	b29b      	uxth	r3, r3
 8017216:	3301      	adds	r3, #1
 8017218:	b29b      	uxth	r3, r3
 801721a:	b21a      	sxth	r2, r3
 801721c:	4b21      	ldr	r3, [pc, #132]	; (80172a4 <main+0xb68>)
 801721e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8017222:	e05b      	b.n	80172dc <main+0xba0>
	              }else List[MenuNow[Current]].Val--;
 8017224:	4b1c      	ldr	r3, [pc, #112]	; (8017298 <main+0xb5c>)
 8017226:	f9b3 3000 	ldrsh.w	r3, [r3]
 801722a:	461a      	mov	r2, r3
 801722c:	4b1c      	ldr	r3, [pc, #112]	; (80172a0 <main+0xb64>)
 801722e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017232:	461a      	mov	r2, r3
 8017234:	491b      	ldr	r1, [pc, #108]	; (80172a4 <main+0xb68>)
 8017236:	00d3      	lsls	r3, r2, #3
 8017238:	440b      	add	r3, r1
 801723a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801723e:	b29b      	uxth	r3, r3
 8017240:	3b01      	subs	r3, #1
 8017242:	b29b      	uxth	r3, r3
 8017244:	b218      	sxth	r0, r3
 8017246:	4917      	ldr	r1, [pc, #92]	; (80172a4 <main+0xb68>)
 8017248:	00d3      	lsls	r3, r2, #3
 801724a:	440b      	add	r3, r1
 801724c:	4602      	mov	r2, r0
 801724e:	809a      	strh	r2, [r3, #4]
 8017250:	e044      	b.n	80172dc <main+0xba0>
	            }
	            else if((MenuNow[Current] ==V1_POSI) && (List[V1_POSI].Val <= List[V2_POSI].Val))
 8017252:	4b11      	ldr	r3, [pc, #68]	; (8017298 <main+0xb5c>)
 8017254:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017258:	461a      	mov	r2, r3
 801725a:	4b11      	ldr	r3, [pc, #68]	; (80172a0 <main+0xb64>)
 801725c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017260:	2b04      	cmp	r3, #4
 8017262:	d125      	bne.n	80172b0 <main+0xb74>
 8017264:	4b0f      	ldr	r3, [pc, #60]	; (80172a4 <main+0xb68>)
 8017266:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 801726a:	4b0e      	ldr	r3, [pc, #56]	; (80172a4 <main+0xb68>)
 801726c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8017270:	429a      	cmp	r2, r3
 8017272:	dc1d      	bgt.n	80172b0 <main+0xb74>
	            List[MenuNow[Current]].Val=List[V2_POSI].Val;
 8017274:	4b08      	ldr	r3, [pc, #32]	; (8017298 <main+0xb5c>)
 8017276:	f9b3 3000 	ldrsh.w	r3, [r3]
 801727a:	461a      	mov	r2, r3
 801727c:	4b08      	ldr	r3, [pc, #32]	; (80172a0 <main+0xb64>)
 801727e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017282:	4618      	mov	r0, r3
 8017284:	4b07      	ldr	r3, [pc, #28]	; (80172a4 <main+0xb68>)
 8017286:	f9b3 102c 	ldrsh.w	r1, [r3, #44]	; 0x2c
 801728a:	4a06      	ldr	r2, [pc, #24]	; (80172a4 <main+0xb68>)
 801728c:	00c3      	lsls	r3, r0, #3
 801728e:	4413      	add	r3, r2
 8017290:	460a      	mov	r2, r1
 8017292:	809a      	strh	r2, [r3, #4]
 8017294:	e022      	b.n	80172dc <main+0xba0>
 8017296:	bf00      	nop
 8017298:	200007a6 	.word	0x200007a6
 801729c:	20000794 	.word	0x20000794
 80172a0:	20000538 	.word	0x20000538
 80172a4:	20000298 	.word	0x20000298
 80172a8:	08002214 	.word	0x08002214
 80172ac:	080021b8 	.word	0x080021b8
	            else List[MenuNow[Current]].Val--;
 80172b0:	4bb7      	ldr	r3, [pc, #732]	; (8017590 <main+0xe54>)
 80172b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80172b6:	461a      	mov	r2, r3
 80172b8:	4bb6      	ldr	r3, [pc, #728]	; (8017594 <main+0xe58>)
 80172ba:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80172be:	461a      	mov	r2, r3
 80172c0:	49b5      	ldr	r1, [pc, #724]	; (8017598 <main+0xe5c>)
 80172c2:	00d3      	lsls	r3, r2, #3
 80172c4:	440b      	add	r3, r1
 80172c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80172ca:	b29b      	uxth	r3, r3
 80172cc:	3b01      	subs	r3, #1
 80172ce:	b29b      	uxth	r3, r3
 80172d0:	b218      	sxth	r0, r3
 80172d2:	49b1      	ldr	r1, [pc, #708]	; (8017598 <main+0xe5c>)
 80172d4:	00d3      	lsls	r3, r2, #3
 80172d6:	440b      	add	r3, r1
 80172d8:	4602      	mov	r2, r0
 80172da:	809a      	strh	r2, [r3, #4]
	          }
	          //==============================================
	            if(MenuNow[Current] == SMPL_DPTH){
 80172dc:	4bac      	ldr	r3, [pc, #688]	; (8017590 <main+0xe54>)
 80172de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80172e2:	461a      	mov	r2, r3
 80172e4:	4bab      	ldr	r3, [pc, #684]	; (8017594 <main+0xe58>)
 80172e6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80172ea:	2b09      	cmp	r3, #9
 80172ec:	d103      	bne.n	80172f6 <main+0xbba>
	              List[VIEWPOSI].Val=1 ;
 80172ee:	4baa      	ldr	r3, [pc, #680]	; (8017598 <main+0xe5c>)
 80172f0:	2201      	movs	r2, #1
 80172f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	           }
	            if((MenuNow[Current] ==T2_POSI) && (List[T2_POSI].Val <= List[T1_POSI].Val))
 80172f6:	4ba6      	ldr	r3, [pc, #664]	; (8017590 <main+0xe54>)
 80172f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80172fc:	461a      	mov	r2, r3
 80172fe:	4ba5      	ldr	r3, [pc, #660]	; (8017594 <main+0xe58>)
 8017300:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017304:	2b0b      	cmp	r3, #11
 8017306:	d117      	bne.n	8017338 <main+0xbfc>
 8017308:	4ba3      	ldr	r3, [pc, #652]	; (8017598 <main+0xe5c>)
 801730a:	f9b3 205c 	ldrsh.w	r2, [r3, #92]	; 0x5c
 801730e:	4ba2      	ldr	r3, [pc, #648]	; (8017598 <main+0xe5c>)
 8017310:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8017314:	429a      	cmp	r2, r3
 8017316:	dc0f      	bgt.n	8017338 <main+0xbfc>
	              List[MenuNow[Current]].Val=List[T1_POSI].Val;
 8017318:	4b9d      	ldr	r3, [pc, #628]	; (8017590 <main+0xe54>)
 801731a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801731e:	461a      	mov	r2, r3
 8017320:	4b9c      	ldr	r3, [pc, #624]	; (8017594 <main+0xe58>)
 8017322:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017326:	4618      	mov	r0, r3
 8017328:	4b9b      	ldr	r3, [pc, #620]	; (8017598 <main+0xe5c>)
 801732a:	f9b3 1054 	ldrsh.w	r1, [r3, #84]	; 0x54
 801732e:	4a9a      	ldr	r2, [pc, #616]	; (8017598 <main+0xe5c>)
 8017330:	00c3      	lsls	r3, r0, #3
 8017332:	4413      	add	r3, r2
 8017334:	460a      	mov	r2, r1
 8017336:	809a      	strh	r2, [r3, #4]
	        }
	        if(Current == TRG) Status &= ~STOP; // �ı�ͬ��ģʽ��ָ�����״̬
 8017338:	4b95      	ldr	r3, [pc, #596]	; (8017590 <main+0xe54>)
 801733a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801733e:	2b02      	cmp	r3, #2
 8017340:	f040 8217 	bne.w	8017772 <main+0x1036>
 8017344:	4b95      	ldr	r3, [pc, #596]	; (801759c <main+0xe60>)
 8017346:	f9b3 3000 	ldrsh.w	r3, [r3]
 801734a:	f023 0301 	bic.w	r3, r3, #1
 801734e:	b21a      	sxth	r2, r3
 8017350:	4b92      	ldr	r3, [pc, #584]	; (801759c <main+0xe60>)
 8017352:	801a      	strh	r2, [r3, #0]
	        break;
 8017354:	e20d      	b.n	8017772 <main+0x1036>

	      case KEYCODE_RIGHT:
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 8017356:	4b8e      	ldr	r3, [pc, #568]	; (8017590 <main+0xe54>)
 8017358:	f9b3 3000 	ldrsh.w	r3, [r3]
 801735c:	2b07      	cmp	r3, #7
 801735e:	d106      	bne.n	801736e <main+0xc32>
 8017360:	4b8f      	ldr	r3, [pc, #572]	; (80175a0 <main+0xe64>)
 8017362:	781b      	ldrb	r3, [r3, #0]
 8017364:	f003 0302 	and.w	r3, r3, #2
 8017368:	2b00      	cmp	r3, #0
 801736a:	f000 8204 	beq.w	8017776 <main+0x103a>
	        List[MenuNow[Current]].Flg |= UPD;  // ˢ�±��ǰԭ��ʾ��Ŀ����
 801736e:	4b88      	ldr	r3, [pc, #544]	; (8017590 <main+0xe54>)
 8017370:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017374:	461a      	mov	r2, r3
 8017376:	4b87      	ldr	r3, [pc, #540]	; (8017594 <main+0xe58>)
 8017378:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801737c:	4a86      	ldr	r2, [pc, #536]	; (8017598 <main+0xe5c>)
 801737e:	00db      	lsls	r3, r3, #3
 8017380:	4413      	add	r3, r2
 8017382:	799b      	ldrb	r3, [r3, #6]
 8017384:	4a82      	ldr	r2, [pc, #520]	; (8017590 <main+0xe54>)
 8017386:	f9b2 2000 	ldrsh.w	r2, [r2]
 801738a:	4611      	mov	r1, r2
 801738c:	4a81      	ldr	r2, [pc, #516]	; (8017594 <main+0xe58>)
 801738e:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8017392:	4610      	mov	r0, r2
 8017394:	f043 0320 	orr.w	r3, r3, #32
 8017398:	b2d9      	uxtb	r1, r3
 801739a:	4a7f      	ldr	r2, [pc, #508]	; (8017598 <main+0xe5c>)
 801739c:	00c3      	lsls	r3, r0, #3
 801739e:	4413      	add	r3, r2
 80173a0:	460a      	mov	r2, r1
 80173a2:	719a      	strb	r2, [r3, #6]
	        if(List[MenuNow[Current]].Val >=MAX[MenuNow[Current]] ){
 80173a4:	4b7a      	ldr	r3, [pc, #488]	; (8017590 <main+0xe54>)
 80173a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80173aa:	461a      	mov	r2, r3
 80173ac:	4b79      	ldr	r3, [pc, #484]	; (8017594 <main+0xe58>)
 80173ae:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80173b2:	4a79      	ldr	r2, [pc, #484]	; (8017598 <main+0xe5c>)
 80173b4:	00db      	lsls	r3, r3, #3
 80173b6:	4413      	add	r3, r2
 80173b8:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80173bc:	4b74      	ldr	r3, [pc, #464]	; (8017590 <main+0xe54>)
 80173be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80173c2:	4619      	mov	r1, r3
 80173c4:	4b73      	ldr	r3, [pc, #460]	; (8017594 <main+0xe58>)
 80173c6:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 80173ca:	4619      	mov	r1, r3
 80173cc:	4b75      	ldr	r3, [pc, #468]	; (80175a4 <main+0xe68>)
 80173ce:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 80173d2:	429a      	cmp	r2, r3
 80173d4:	db73      	blt.n	80174be <main+0xd82>
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 80173d6:	4b6e      	ldr	r3, [pc, #440]	; (8017590 <main+0xe54>)
 80173d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80173dc:	461a      	mov	r2, r3
 80173de:	4b6d      	ldr	r3, [pc, #436]	; (8017594 <main+0xe58>)
 80173e0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80173e4:	2b01      	cmp	r3, #1
 80173e6:	d051      	beq.n	801748c <main+0xd50>
 80173e8:	4b69      	ldr	r3, [pc, #420]	; (8017590 <main+0xe54>)
 80173ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80173ee:	461a      	mov	r2, r3
 80173f0:	4b68      	ldr	r3, [pc, #416]	; (8017594 <main+0xe58>)
 80173f2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80173f6:	2b06      	cmp	r3, #6
 80173f8:	d048      	beq.n	801748c <main+0xd50>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 80173fa:	4b65      	ldr	r3, [pc, #404]	; (8017590 <main+0xe54>)
 80173fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017400:	461a      	mov	r2, r3
 8017402:	4b64      	ldr	r3, [pc, #400]	; (8017594 <main+0xe58>)
 8017404:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 8017408:	2b0c      	cmp	r3, #12
 801740a:	d03f      	beq.n	801748c <main+0xd50>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 801740c:	4b60      	ldr	r3, [pc, #384]	; (8017590 <main+0xe54>)
 801740e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017412:	461a      	mov	r2, r3
 8017414:	4b5f      	ldr	r3, [pc, #380]	; (8017594 <main+0xe58>)
 8017416:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801741a:	2b1c      	cmp	r3, #28
 801741c:	d036      	beq.n	801748c <main+0xd50>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 801741e:	4b5c      	ldr	r3, [pc, #368]	; (8017590 <main+0xe54>)
 8017420:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017424:	461a      	mov	r2, r3
 8017426:	4b5b      	ldr	r3, [pc, #364]	; (8017594 <main+0xe58>)
 8017428:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 801742c:	2b0f      	cmp	r3, #15
 801742e:	d02d      	beq.n	801748c <main+0xd50>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8017430:	4b57      	ldr	r3, [pc, #348]	; (8017590 <main+0xe54>)
 8017432:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017436:	461a      	mov	r2, r3
 8017438:	4b56      	ldr	r3, [pc, #344]	; (8017594 <main+0xe58>)
 801743a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801743e:	2b0e      	cmp	r3, #14
 8017440:	d024      	beq.n	801748c <main+0xd50>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8017442:	4b53      	ldr	r3, [pc, #332]	; (8017590 <main+0xe54>)
 8017444:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017448:	461a      	mov	r2, r3
 801744a:	4b52      	ldr	r3, [pc, #328]	; (8017594 <main+0xe58>)
 801744c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8017450:	2b0d      	cmp	r3, #13
 8017452:	d01b      	beq.n	801748c <main+0xd50>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8017454:	4b4e      	ldr	r3, [pc, #312]	; (8017590 <main+0xe54>)
 8017456:	f9b3 3000 	ldrsh.w	r3, [r3]
 801745a:	461a      	mov	r2, r3
 801745c:	4b4d      	ldr	r3, [pc, #308]	; (8017594 <main+0xe58>)
 801745e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017462:	2b1a      	cmp	r3, #26
 8017464:	d012      	beq.n	801748c <main+0xd50>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 8017466:	4b4a      	ldr	r3, [pc, #296]	; (8017590 <main+0xe54>)
 8017468:	f9b3 3000 	ldrsh.w	r3, [r3]
 801746c:	461a      	mov	r2, r3
 801746e:	4b49      	ldr	r3, [pc, #292]	; (8017594 <main+0xe58>)
 8017470:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8017474:	2b02      	cmp	r3, #2
 8017476:	d009      	beq.n	801748c <main+0xd50>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 8017478:	4b45      	ldr	r3, [pc, #276]	; (8017590 <main+0xe54>)
 801747a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801747e:	461a      	mov	r2, r3
 8017480:	4b44      	ldr	r3, [pc, #272]	; (8017594 <main+0xe58>)
 8017482:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017486:	2b24      	cmp	r3, #36	; 0x24
 8017488:	f040 8154 	bne.w	8017734 <main+0xff8>
	            List[MenuNow[Current]].Val =MIN[MenuNow[Current]] ;
 801748c:	4b40      	ldr	r3, [pc, #256]	; (8017590 <main+0xe54>)
 801748e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017492:	461a      	mov	r2, r3
 8017494:	4b3f      	ldr	r3, [pc, #252]	; (8017594 <main+0xe58>)
 8017496:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801749a:	461a      	mov	r2, r3
 801749c:	4b3c      	ldr	r3, [pc, #240]	; (8017590 <main+0xe54>)
 801749e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80174a2:	4619      	mov	r1, r3
 80174a4:	4b3b      	ldr	r3, [pc, #236]	; (8017594 <main+0xe58>)
 80174a6:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 80174aa:	4618      	mov	r0, r3
 80174ac:	4b3e      	ldr	r3, [pc, #248]	; (80175a8 <main+0xe6c>)
 80174ae:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 80174b2:	4a39      	ldr	r2, [pc, #228]	; (8017598 <main+0xe5c>)
 80174b4:	00c3      	lsls	r3, r0, #3
 80174b6:	4413      	add	r3, r2
 80174b8:	460a      	mov	r2, r1
 80174ba:	809a      	strh	r2, [r3, #4]
 80174bc:	e13a      	b.n	8017734 <main+0xff8>
	        } else {
	            if(MenuNow[Current] == VIEWPOSI)
 80174be:	4b34      	ldr	r3, [pc, #208]	; (8017590 <main+0xe54>)
 80174c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80174c4:	461a      	mov	r2, r3
 80174c6:	4b33      	ldr	r3, [pc, #204]	; (8017594 <main+0xe58>)
 80174c8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80174cc:	2b08      	cmp	r3, #8
 80174ce:	d16f      	bne.n	80175b0 <main+0xe74>
	            {
	              if(List[MenuNow[Current]].Val <(DEPTH[List[SMPL_DPTH].Val]-(350-List[SMPL_DPTH].Val)))
 80174d0:	4b2f      	ldr	r3, [pc, #188]	; (8017590 <main+0xe54>)
 80174d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80174d6:	461a      	mov	r2, r3
 80174d8:	4b2e      	ldr	r3, [pc, #184]	; (8017594 <main+0xe58>)
 80174da:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80174de:	4a2e      	ldr	r2, [pc, #184]	; (8017598 <main+0xe5c>)
 80174e0:	00db      	lsls	r3, r3, #3
 80174e2:	4413      	add	r3, r2
 80174e4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80174e8:	461a      	mov	r2, r3
 80174ea:	4b2b      	ldr	r3, [pc, #172]	; (8017598 <main+0xe5c>)
 80174ec:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 80174f0:	4619      	mov	r1, r3
 80174f2:	4b2e      	ldr	r3, [pc, #184]	; (80175ac <main+0xe70>)
 80174f4:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 80174f8:	4619      	mov	r1, r3
 80174fa:	4b27      	ldr	r3, [pc, #156]	; (8017598 <main+0xe5c>)
 80174fc:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8017500:	f5c3 73af 	rsb	r3, r3, #350	; 0x15e
 8017504:	1acb      	subs	r3, r1, r3
 8017506:	429a      	cmp	r2, r3
 8017508:	f280 80f3 	bge.w	80176f2 <main+0xfb6>
	              {
	                if(List[MenuNow[Current]].Val >150 )
 801750c:	4b20      	ldr	r3, [pc, #128]	; (8017590 <main+0xe54>)
 801750e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017512:	461a      	mov	r2, r3
 8017514:	4b1f      	ldr	r3, [pc, #124]	; (8017594 <main+0xe58>)
 8017516:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801751a:	4a1f      	ldr	r2, [pc, #124]	; (8017598 <main+0xe5c>)
 801751c:	00db      	lsls	r3, r3, #3
 801751e:	4413      	add	r3, r2
 8017520:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017524:	2b96      	cmp	r3, #150	; 0x96
 8017526:	dd1c      	ble.n	8017562 <main+0xe26>
	                  List[MenuNow[Current]].Val += 25;
 8017528:	4b19      	ldr	r3, [pc, #100]	; (8017590 <main+0xe54>)
 801752a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801752e:	461a      	mov	r2, r3
 8017530:	4b18      	ldr	r3, [pc, #96]	; (8017594 <main+0xe58>)
 8017532:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017536:	4a18      	ldr	r2, [pc, #96]	; (8017598 <main+0xe5c>)
 8017538:	00db      	lsls	r3, r3, #3
 801753a:	4413      	add	r3, r2
 801753c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017540:	b29b      	uxth	r3, r3
 8017542:	3319      	adds	r3, #25
 8017544:	b29a      	uxth	r2, r3
 8017546:	4b12      	ldr	r3, [pc, #72]	; (8017590 <main+0xe54>)
 8017548:	f9b3 3000 	ldrsh.w	r3, [r3]
 801754c:	4619      	mov	r1, r3
 801754e:	4b11      	ldr	r3, [pc, #68]	; (8017594 <main+0xe58>)
 8017550:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8017554:	b211      	sxth	r1, r2
 8017556:	4a10      	ldr	r2, [pc, #64]	; (8017598 <main+0xe5c>)
 8017558:	00db      	lsls	r3, r3, #3
 801755a:	4413      	add	r3, r2
 801755c:	460a      	mov	r2, r1
 801755e:	809a      	strh	r2, [r3, #4]
 8017560:	e0c7      	b.n	80176f2 <main+0xfb6>
	                else
	                  List[MenuNow[Current]].Val++;
 8017562:	4b0b      	ldr	r3, [pc, #44]	; (8017590 <main+0xe54>)
 8017564:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017568:	461a      	mov	r2, r3
 801756a:	4b0a      	ldr	r3, [pc, #40]	; (8017594 <main+0xe58>)
 801756c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017570:	461a      	mov	r2, r3
 8017572:	4909      	ldr	r1, [pc, #36]	; (8017598 <main+0xe5c>)
 8017574:	00d3      	lsls	r3, r2, #3
 8017576:	440b      	add	r3, r1
 8017578:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801757c:	b29b      	uxth	r3, r3
 801757e:	3301      	adds	r3, #1
 8017580:	b29b      	uxth	r3, r3
 8017582:	b218      	sxth	r0, r3
 8017584:	4904      	ldr	r1, [pc, #16]	; (8017598 <main+0xe5c>)
 8017586:	00d3      	lsls	r3, r2, #3
 8017588:	440b      	add	r3, r1
 801758a:	4602      	mov	r2, r0
 801758c:	809a      	strh	r2, [r3, #4]
 801758e:	e0b0      	b.n	80176f2 <main+0xfb6>
 8017590:	200007a6 	.word	0x200007a6
 8017594:	20000538 	.word	0x20000538
 8017598:	20000298 	.word	0x20000298
 801759c:	200007a8 	.word	0x200007a8
 80175a0:	20000794 	.word	0x20000794
 80175a4:	080021b8 	.word	0x080021b8
 80175a8:	08002214 	.word	0x08002214
 80175ac:	08002270 	.word	0x08002270
	              }
	            }
	            else{
	              //============4.27�޸������߳�����������========
	              if(MenuNow[Current] == THRESHOLD){
 80175b0:	4b8d      	ldr	r3, [pc, #564]	; (80177e8 <main+0x10ac>)
 80175b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80175b6:	461a      	mov	r2, r3
 80175b8:	4b8c      	ldr	r3, [pc, #560]	; (80177ec <main+0x10b0>)
 80175ba:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80175be:	2b10      	cmp	r3, #16
 80175c0:	d121      	bne.n	8017606 <main+0xeca>
	                if((List[V0_POSI].Val + List[THRESHOLD].Val) < 198)
 80175c2:	4b8b      	ldr	r3, [pc, #556]	; (80177f0 <main+0x10b4>)
 80175c4:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80175c8:	461a      	mov	r2, r3
 80175ca:	4b89      	ldr	r3, [pc, #548]	; (80177f0 <main+0x10b4>)
 80175cc:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 80175d0:	4413      	add	r3, r2
 80175d2:	2bc5      	cmp	r3, #197	; 0xc5
 80175d4:	f300 808d 	bgt.w	80176f2 <main+0xfb6>
	                 List[MenuNow[Current]].Val++;
 80175d8:	4b83      	ldr	r3, [pc, #524]	; (80177e8 <main+0x10ac>)
 80175da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80175de:	461a      	mov	r2, r3
 80175e0:	4b82      	ldr	r3, [pc, #520]	; (80177ec <main+0x10b0>)
 80175e2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80175e6:	461a      	mov	r2, r3
 80175e8:	4981      	ldr	r1, [pc, #516]	; (80177f0 <main+0x10b4>)
 80175ea:	00d3      	lsls	r3, r2, #3
 80175ec:	440b      	add	r3, r1
 80175ee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80175f2:	b29b      	uxth	r3, r3
 80175f4:	3301      	adds	r3, #1
 80175f6:	b29b      	uxth	r3, r3
 80175f8:	b218      	sxth	r0, r3
 80175fa:	497d      	ldr	r1, [pc, #500]	; (80177f0 <main+0x10b4>)
 80175fc:	00d3      	lsls	r3, r2, #3
 80175fe:	440b      	add	r3, r1
 8017600:	4602      	mov	r2, r0
 8017602:	809a      	strh	r2, [r3, #4]
 8017604:	e075      	b.n	80176f2 <main+0xfb6>
	              }
	              else if(MenuNow[Current] == V0_POSI){
 8017606:	4b78      	ldr	r3, [pc, #480]	; (80177e8 <main+0x10ac>)
 8017608:	f9b3 3000 	ldrsh.w	r3, [r3]
 801760c:	461a      	mov	r2, r3
 801760e:	4b77      	ldr	r3, [pc, #476]	; (80177ec <main+0x10b0>)
 8017610:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017614:	2b03      	cmp	r3, #3
 8017616:	d134      	bne.n	8017682 <main+0xf46>
	                if((List[V0_POSI].Val + List[THRESHOLD].Val) > 198){
 8017618:	4b75      	ldr	r3, [pc, #468]	; (80177f0 <main+0x10b4>)
 801761a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801761e:	461a      	mov	r2, r3
 8017620:	4b73      	ldr	r3, [pc, #460]	; (80177f0 <main+0x10b4>)
 8017622:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8017626:	4413      	add	r3, r2
 8017628:	2bc6      	cmp	r3, #198	; 0xc6
 801762a:	dd13      	ble.n	8017654 <main+0xf18>
	                  List[V0_POSI].Val++;
 801762c:	4b70      	ldr	r3, [pc, #448]	; (80177f0 <main+0x10b4>)
 801762e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8017632:	b29b      	uxth	r3, r3
 8017634:	3301      	adds	r3, #1
 8017636:	b29b      	uxth	r3, r3
 8017638:	b21a      	sxth	r2, r3
 801763a:	4b6d      	ldr	r3, [pc, #436]	; (80177f0 <main+0x10b4>)
 801763c:	839a      	strh	r2, [r3, #28]
	                  List[THRESHOLD].Val--;
 801763e:	4b6c      	ldr	r3, [pc, #432]	; (80177f0 <main+0x10b4>)
 8017640:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8017644:	b29b      	uxth	r3, r3
 8017646:	3b01      	subs	r3, #1
 8017648:	b29b      	uxth	r3, r3
 801764a:	b21a      	sxth	r2, r3
 801764c:	4b68      	ldr	r3, [pc, #416]	; (80177f0 <main+0x10b4>)
 801764e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8017652:	e04e      	b.n	80176f2 <main+0xfb6>
	                }else List[MenuNow[Current]].Val++;
 8017654:	4b64      	ldr	r3, [pc, #400]	; (80177e8 <main+0x10ac>)
 8017656:	f9b3 3000 	ldrsh.w	r3, [r3]
 801765a:	461a      	mov	r2, r3
 801765c:	4b63      	ldr	r3, [pc, #396]	; (80177ec <main+0x10b0>)
 801765e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017662:	461a      	mov	r2, r3
 8017664:	4962      	ldr	r1, [pc, #392]	; (80177f0 <main+0x10b4>)
 8017666:	00d3      	lsls	r3, r2, #3
 8017668:	440b      	add	r3, r1
 801766a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801766e:	b29b      	uxth	r3, r3
 8017670:	3301      	adds	r3, #1
 8017672:	b29b      	uxth	r3, r3
 8017674:	b218      	sxth	r0, r3
 8017676:	495e      	ldr	r1, [pc, #376]	; (80177f0 <main+0x10b4>)
 8017678:	00d3      	lsls	r3, r2, #3
 801767a:	440b      	add	r3, r1
 801767c:	4602      	mov	r2, r0
 801767e:	809a      	strh	r2, [r3, #4]
 8017680:	e037      	b.n	80176f2 <main+0xfb6>
	              }
	              else if((MenuNow[Current] ==V2_POSI) && (List[V2_POSI].Val >= List[V1_POSI].Val))
 8017682:	4b59      	ldr	r3, [pc, #356]	; (80177e8 <main+0x10ac>)
 8017684:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017688:	461a      	mov	r2, r3
 801768a:	4b58      	ldr	r3, [pc, #352]	; (80177ec <main+0x10b0>)
 801768c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017690:	2b05      	cmp	r3, #5
 8017692:	d118      	bne.n	80176c6 <main+0xf8a>
 8017694:	4b56      	ldr	r3, [pc, #344]	; (80177f0 <main+0x10b4>)
 8017696:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 801769a:	4b55      	ldr	r3, [pc, #340]	; (80177f0 <main+0x10b4>)
 801769c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80176a0:	429a      	cmp	r2, r3
 80176a2:	db10      	blt.n	80176c6 <main+0xf8a>
	                List[MenuNow[Current]].Val=List[V1_POSI].Val;
 80176a4:	4b50      	ldr	r3, [pc, #320]	; (80177e8 <main+0x10ac>)
 80176a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80176aa:	461a      	mov	r2, r3
 80176ac:	4b4f      	ldr	r3, [pc, #316]	; (80177ec <main+0x10b0>)
 80176ae:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80176b2:	4618      	mov	r0, r3
 80176b4:	4b4e      	ldr	r3, [pc, #312]	; (80177f0 <main+0x10b4>)
 80176b6:	f9b3 1024 	ldrsh.w	r1, [r3, #36]	; 0x24
 80176ba:	4a4d      	ldr	r2, [pc, #308]	; (80177f0 <main+0x10b4>)
 80176bc:	00c3      	lsls	r3, r0, #3
 80176be:	4413      	add	r3, r2
 80176c0:	460a      	mov	r2, r1
 80176c2:	809a      	strh	r2, [r3, #4]
 80176c4:	e015      	b.n	80176f2 <main+0xfb6>
	              else List[MenuNow[Current]].Val++;
 80176c6:	4b48      	ldr	r3, [pc, #288]	; (80177e8 <main+0x10ac>)
 80176c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80176cc:	461a      	mov	r2, r3
 80176ce:	4b47      	ldr	r3, [pc, #284]	; (80177ec <main+0x10b0>)
 80176d0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80176d4:	461a      	mov	r2, r3
 80176d6:	4946      	ldr	r1, [pc, #280]	; (80177f0 <main+0x10b4>)
 80176d8:	00d3      	lsls	r3, r2, #3
 80176da:	440b      	add	r3, r1
 80176dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80176e0:	b29b      	uxth	r3, r3
 80176e2:	3301      	adds	r3, #1
 80176e4:	b29b      	uxth	r3, r3
 80176e6:	b218      	sxth	r0, r3
 80176e8:	4941      	ldr	r1, [pc, #260]	; (80177f0 <main+0x10b4>)
 80176ea:	00d3      	lsls	r3, r2, #3
 80176ec:	440b      	add	r3, r1
 80176ee:	4602      	mov	r2, r0
 80176f0:	809a      	strh	r2, [r3, #4]
	            }
	            //==============================================
	            if((MenuNow[Current] ==T1_POSI) && (List[T1_POSI].Val >= List[T2_POSI].Val))
 80176f2:	4b3d      	ldr	r3, [pc, #244]	; (80177e8 <main+0x10ac>)
 80176f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80176f8:	461a      	mov	r2, r3
 80176fa:	4b3c      	ldr	r3, [pc, #240]	; (80177ec <main+0x10b0>)
 80176fc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017700:	2b0a      	cmp	r3, #10
 8017702:	d117      	bne.n	8017734 <main+0xff8>
 8017704:	4b3a      	ldr	r3, [pc, #232]	; (80177f0 <main+0x10b4>)
 8017706:	f9b3 2054 	ldrsh.w	r2, [r3, #84]	; 0x54
 801770a:	4b39      	ldr	r3, [pc, #228]	; (80177f0 <main+0x10b4>)
 801770c:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 8017710:	429a      	cmp	r2, r3
 8017712:	db0f      	blt.n	8017734 <main+0xff8>
	               List[MenuNow[Current]].Val=List[T2_POSI].Val;
 8017714:	4b34      	ldr	r3, [pc, #208]	; (80177e8 <main+0x10ac>)
 8017716:	f9b3 3000 	ldrsh.w	r3, [r3]
 801771a:	461a      	mov	r2, r3
 801771c:	4b33      	ldr	r3, [pc, #204]	; (80177ec <main+0x10b0>)
 801771e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017722:	4618      	mov	r0, r3
 8017724:	4b32      	ldr	r3, [pc, #200]	; (80177f0 <main+0x10b4>)
 8017726:	f9b3 105c 	ldrsh.w	r1, [r3, #92]	; 0x5c
 801772a:	4a31      	ldr	r2, [pc, #196]	; (80177f0 <main+0x10b4>)
 801772c:	00c3      	lsls	r3, r0, #3
 801772e:	4413      	add	r3, r2
 8017730:	460a      	mov	r2, r1
 8017732:	809a      	strh	r2, [r3, #4]
	        }
	        if(Current == TRG) {Status &= ~STOP; // �ı�ͬ��ģʽ��ָ�����״̬
 8017734:	4b2c      	ldr	r3, [pc, #176]	; (80177e8 <main+0x10ac>)
 8017736:	f9b3 3000 	ldrsh.w	r3, [r3]
 801773a:	2b02      	cmp	r3, #2
 801773c:	d11d      	bne.n	801777a <main+0x103e>
 801773e:	4b2d      	ldr	r3, [pc, #180]	; (80177f4 <main+0x10b8>)
 8017740:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017744:	f023 0301 	bic.w	r3, r3, #1
 8017748:	b21a      	sxth	r2, r3
 801774a:	4b2a      	ldr	r3, [pc, #168]	; (80177f4 <main+0x10b8>)
 801774c:	801a      	strh	r2, [r3, #0]
	        if(List[SYNCMODE].Val==SINGL)ADC_Start(); }
 801774e:	4b28      	ldr	r3, [pc, #160]	; (80177f0 <main+0x10b4>)
 8017750:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8017754:	2b04      	cmp	r3, #4
 8017756:	d110      	bne.n	801777a <main+0x103e>
 8017758:	f7f5 f820 	bl	800c79c <ADC_Start>
	        break;
 801775c:	e00d      	b.n	801777a <main+0x103e>
	         break;
 801775e:	bf00      	nop
 8017760:	e00c      	b.n	801777c <main+0x1040>
	         break;
 8017762:	bf00      	nop
 8017764:	e00a      	b.n	801777c <main+0x1040>
	        break;
 8017766:	bf00      	nop
 8017768:	e008      	b.n	801777c <main+0x1040>
	        break;
 801776a:	bf00      	nop
 801776c:	e006      	b.n	801777c <main+0x1040>
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 801776e:	bf00      	nop
 8017770:	e004      	b.n	801777c <main+0x1040>
	        break;
 8017772:	bf00      	nop
 8017774:	e002      	b.n	801777c <main+0x1040>
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 8017776:	bf00      	nop
 8017778:	e000      	b.n	801777c <main+0x1040>
	        break;
 801777a:	bf00      	nop

	     } //switch end
	     List[MenuNow[Current]].Flg |= UPD;
 801777c:	4b1a      	ldr	r3, [pc, #104]	; (80177e8 <main+0x10ac>)
 801777e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017782:	461a      	mov	r2, r3
 8017784:	4b19      	ldr	r3, [pc, #100]	; (80177ec <main+0x10b0>)
 8017786:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801778a:	4a19      	ldr	r2, [pc, #100]	; (80177f0 <main+0x10b4>)
 801778c:	00db      	lsls	r3, r3, #3
 801778e:	4413      	add	r3, r2
 8017790:	799b      	ldrb	r3, [r3, #6]
 8017792:	4a15      	ldr	r2, [pc, #84]	; (80177e8 <main+0x10ac>)
 8017794:	f9b2 2000 	ldrsh.w	r2, [r2]
 8017798:	4611      	mov	r1, r2
 801779a:	4a14      	ldr	r2, [pc, #80]	; (80177ec <main+0x10b0>)
 801779c:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80177a0:	4610      	mov	r0, r2
 80177a2:	f043 0320 	orr.w	r3, r3, #32
 80177a6:	b2d9      	uxtb	r1, r3
 80177a8:	4a11      	ldr	r2, [pc, #68]	; (80177f0 <main+0x10b4>)
 80177aa:	00c3      	lsls	r3, r0, #3
 80177ac:	4413      	add	r3, r2
 80177ae:	460a      	mov	r2, r1
 80177b0:	719a      	strb	r2, [r3, #6]
	     StdBy_Time  = List[STANDBY].Val * MIN_UNIT;  //����
 80177b2:	4b0f      	ldr	r3, [pc, #60]	; (80177f0 <main+0x10b4>)
 80177b4:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 80177b8:	b29b      	uxth	r3, r3
 80177ba:	461a      	mov	r2, r3
 80177bc:	0112      	lsls	r2, r2, #4
 80177be:	1ad3      	subs	r3, r2, r3
 80177c0:	009b      	lsls	r3, r3, #2
 80177c2:	b29b      	uxth	r3, r3
 80177c4:	b21a      	sxth	r2, r3
 80177c6:	4b0c      	ldr	r3, [pc, #48]	; (80177f8 <main+0x10bc>)
 80177c8:	801a      	strh	r2, [r3, #0]

	      if(PopType & LIST_POP) Show_List();
 80177ca:	4b0c      	ldr	r3, [pc, #48]	; (80177fc <main+0x10c0>)
 80177cc:	781b      	ldrb	r3, [r3, #0]
 80177ce:	f003 0302 	and.w	r3, r3, #2
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	d001      	beq.n	80177da <main+0x109e>
 80177d6:	f7fd f97d 	bl	8014ad4 <Show_List>
	      Update_Title();
 80177da:	f7fa ffb5 	bl	8012748 <Update_Title>
	      Key_Buffer = 0;
 80177de:	4b08      	ldr	r3, [pc, #32]	; (8017800 <main+0x10c4>)
 80177e0:	2200      	movs	r2, #0
 80177e2:	701a      	strb	r2, [r3, #0]
	    if((List[STANDBY].Val != 0)&&(StdBy_Time == 0))
 80177e4:	f7ff b85b 	b.w	801689e <main+0x162>
 80177e8:	200007a6 	.word	0x200007a6
 80177ec:	20000538 	.word	0x20000538
 80177f0:	20000298 	.word	0x20000298
 80177f4:	200007a8 	.word	0x200007a8
 80177f8:	200007a4 	.word	0x200007a4
 80177fc:	20000794 	.word	0x20000794
 8017800:	2000077d 	.word	0x2000077d

08017804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8017804:	b580      	push	{r7, lr}
 8017806:	b094      	sub	sp, #80	; 0x50
 8017808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801780a:	f107 031c 	add.w	r3, r7, #28
 801780e:	2234      	movs	r2, #52	; 0x34
 8017810:	2100      	movs	r1, #0
 8017812:	4618      	mov	r0, r3
 8017814:	f00b fc28 	bl	8023068 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8017818:	f107 0308 	add.w	r3, r7, #8
 801781c:	2200      	movs	r2, #0
 801781e:	601a      	str	r2, [r3, #0]
 8017820:	605a      	str	r2, [r3, #4]
 8017822:	609a      	str	r2, [r3, #8]
 8017824:	60da      	str	r2, [r3, #12]
 8017826:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8017828:	2300      	movs	r3, #0
 801782a:	607b      	str	r3, [r7, #4]
 801782c:	4b2d      	ldr	r3, [pc, #180]	; (80178e4 <SystemClock_Config+0xe0>)
 801782e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017830:	4a2c      	ldr	r2, [pc, #176]	; (80178e4 <SystemClock_Config+0xe0>)
 8017832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017836:	6413      	str	r3, [r2, #64]	; 0x40
 8017838:	4b2a      	ldr	r3, [pc, #168]	; (80178e4 <SystemClock_Config+0xe0>)
 801783a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801783c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017840:	607b      	str	r3, [r7, #4]
 8017842:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8017844:	2300      	movs	r3, #0
 8017846:	603b      	str	r3, [r7, #0]
 8017848:	4b27      	ldr	r3, [pc, #156]	; (80178e8 <SystemClock_Config+0xe4>)
 801784a:	681b      	ldr	r3, [r3, #0]
 801784c:	4a26      	ldr	r2, [pc, #152]	; (80178e8 <SystemClock_Config+0xe4>)
 801784e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8017852:	6013      	str	r3, [r2, #0]
 8017854:	4b24      	ldr	r3, [pc, #144]	; (80178e8 <SystemClock_Config+0xe4>)
 8017856:	681b      	ldr	r3, [r3, #0]
 8017858:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801785c:	603b      	str	r3, [r7, #0]
 801785e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8017860:	2301      	movs	r3, #1
 8017862:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8017864:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8017868:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801786a:	2302      	movs	r3, #2
 801786c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801786e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8017872:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8017874:	2319      	movs	r3, #25
 8017876:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8017878:	f44f 73b4 	mov.w	r3, #360	; 0x168
 801787c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 801787e:	2302      	movs	r3, #2
 8017880:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8017882:	2305      	movs	r3, #5
 8017884:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8017886:	2302      	movs	r3, #2
 8017888:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801788a:	f107 031c 	add.w	r3, r7, #28
 801788e:	4618      	mov	r0, r3
 8017890:	f004 fb72 	bl	801bf78 <HAL_RCC_OscConfig>
 8017894:	4603      	mov	r3, r0
 8017896:	2b00      	cmp	r3, #0
 8017898:	d001      	beq.n	801789e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 801789a:	f000 fc1d 	bl	80180d8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 801789e:	f003 fda3 	bl	801b3e8 <HAL_PWREx_EnableOverDrive>
 80178a2:	4603      	mov	r3, r0
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	d001      	beq.n	80178ac <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80178a8:	f000 fc16 	bl	80180d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80178ac:	230f      	movs	r3, #15
 80178ae:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80178b0:	2302      	movs	r3, #2
 80178b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80178b4:	2300      	movs	r3, #0
 80178b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80178b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80178bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80178be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80178c2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80178c4:	f107 0308 	add.w	r3, r7, #8
 80178c8:	2105      	movs	r1, #5
 80178ca:	4618      	mov	r0, r3
 80178cc:	f003 fddc 	bl	801b488 <HAL_RCC_ClockConfig>
 80178d0:	4603      	mov	r3, r0
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d001      	beq.n	80178da <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80178d6:	f000 fbff 	bl	80180d8 <Error_Handler>
  }
}
 80178da:	bf00      	nop
 80178dc:	3750      	adds	r7, #80	; 0x50
 80178de:	46bd      	mov	sp, r7
 80178e0:	bd80      	pop	{r7, pc}
 80178e2:	bf00      	nop
 80178e4:	40023800 	.word	0x40023800
 80178e8:	40007000 	.word	0x40007000

080178ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80178ec:	b580      	push	{r7, lr}
 80178ee:	b084      	sub	sp, #16
 80178f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80178f2:	463b      	mov	r3, r7
 80178f4:	2200      	movs	r2, #0
 80178f6:	601a      	str	r2, [r3, #0]
 80178f8:	605a      	str	r2, [r3, #4]
 80178fa:	609a      	str	r2, [r3, #8]
 80178fc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80178fe:	4b22      	ldr	r3, [pc, #136]	; (8017988 <MX_ADC1_Init+0x9c>)
 8017900:	4a22      	ldr	r2, [pc, #136]	; (801798c <MX_ADC1_Init+0xa0>)
 8017902:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8017904:	4b20      	ldr	r3, [pc, #128]	; (8017988 <MX_ADC1_Init+0x9c>)
 8017906:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801790a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 801790c:	4b1e      	ldr	r3, [pc, #120]	; (8017988 <MX_ADC1_Init+0x9c>)
 801790e:	2200      	movs	r2, #0
 8017910:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8017912:	4b1d      	ldr	r3, [pc, #116]	; (8017988 <MX_ADC1_Init+0x9c>)
 8017914:	2200      	movs	r2, #0
 8017916:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8017918:	4b1b      	ldr	r3, [pc, #108]	; (8017988 <MX_ADC1_Init+0x9c>)
 801791a:	2200      	movs	r2, #0
 801791c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 801791e:	4b1a      	ldr	r3, [pc, #104]	; (8017988 <MX_ADC1_Init+0x9c>)
 8017920:	2200      	movs	r2, #0
 8017922:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8017926:	4b18      	ldr	r3, [pc, #96]	; (8017988 <MX_ADC1_Init+0x9c>)
 8017928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801792c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 801792e:	4b16      	ldr	r3, [pc, #88]	; (8017988 <MX_ADC1_Init+0x9c>)
 8017930:	2200      	movs	r2, #0
 8017932:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8017934:	4b14      	ldr	r3, [pc, #80]	; (8017988 <MX_ADC1_Init+0x9c>)
 8017936:	2200      	movs	r2, #0
 8017938:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 801793a:	4b13      	ldr	r3, [pc, #76]	; (8017988 <MX_ADC1_Init+0x9c>)
 801793c:	2201      	movs	r2, #1
 801793e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8017940:	4b11      	ldr	r3, [pc, #68]	; (8017988 <MX_ADC1_Init+0x9c>)
 8017942:	2200      	movs	r2, #0
 8017944:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8017948:	4b0f      	ldr	r3, [pc, #60]	; (8017988 <MX_ADC1_Init+0x9c>)
 801794a:	2201      	movs	r2, #1
 801794c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 801794e:	480e      	ldr	r0, [pc, #56]	; (8017988 <MX_ADC1_Init+0x9c>)
 8017950:	f000 ff7a 	bl	8018848 <HAL_ADC_Init>
 8017954:	4603      	mov	r3, r0
 8017956:	2b00      	cmp	r3, #0
 8017958:	d001      	beq.n	801795e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 801795a:	f000 fbbd 	bl	80180d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 801795e:	2306      	movs	r3, #6
 8017960:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8017962:	2301      	movs	r3, #1
 8017964:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8017966:	2300      	movs	r3, #0
 8017968:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801796a:	463b      	mov	r3, r7
 801796c:	4619      	mov	r1, r3
 801796e:	4806      	ldr	r0, [pc, #24]	; (8017988 <MX_ADC1_Init+0x9c>)
 8017970:	f000 ffae 	bl	80188d0 <HAL_ADC_ConfigChannel>
 8017974:	4603      	mov	r3, r0
 8017976:	2b00      	cmp	r3, #0
 8017978:	d001      	beq.n	801797e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 801797a:	f000 fbad 	bl	80180d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 801797e:	bf00      	nop
 8017980:	3710      	adds	r7, #16
 8017982:	46bd      	mov	sp, r7
 8017984:	bd80      	pop	{r7, pc}
 8017986:	bf00      	nop
 8017988:	20006a84 	.word	0x20006a84
 801798c:	40012000 	.word	0x40012000

08017990 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8017990:	b580      	push	{r7, lr}
 8017992:	b084      	sub	sp, #16
 8017994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8017996:	463b      	mov	r3, r7
 8017998:	2200      	movs	r2, #0
 801799a:	601a      	str	r2, [r3, #0]
 801799c:	605a      	str	r2, [r3, #4]
 801799e:	609a      	str	r2, [r3, #8]
 80179a0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80179a2:	4b22      	ldr	r3, [pc, #136]	; (8017a2c <MX_ADC2_Init+0x9c>)
 80179a4:	4a22      	ldr	r2, [pc, #136]	; (8017a30 <MX_ADC2_Init+0xa0>)
 80179a6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80179a8:	4b20      	ldr	r3, [pc, #128]	; (8017a2c <MX_ADC2_Init+0x9c>)
 80179aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80179ae:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80179b0:	4b1e      	ldr	r3, [pc, #120]	; (8017a2c <MX_ADC2_Init+0x9c>)
 80179b2:	2200      	movs	r2, #0
 80179b4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80179b6:	4b1d      	ldr	r3, [pc, #116]	; (8017a2c <MX_ADC2_Init+0x9c>)
 80179b8:	2200      	movs	r2, #0
 80179ba:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80179bc:	4b1b      	ldr	r3, [pc, #108]	; (8017a2c <MX_ADC2_Init+0x9c>)
 80179be:	2200      	movs	r2, #0
 80179c0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80179c2:	4b1a      	ldr	r3, [pc, #104]	; (8017a2c <MX_ADC2_Init+0x9c>)
 80179c4:	2200      	movs	r2, #0
 80179c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80179ca:	4b18      	ldr	r3, [pc, #96]	; (8017a2c <MX_ADC2_Init+0x9c>)
 80179cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80179d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 80179d2:	4b16      	ldr	r3, [pc, #88]	; (8017a2c <MX_ADC2_Init+0x9c>)
 80179d4:	2200      	movs	r2, #0
 80179d6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80179d8:	4b14      	ldr	r3, [pc, #80]	; (8017a2c <MX_ADC2_Init+0x9c>)
 80179da:	2200      	movs	r2, #0
 80179dc:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80179de:	4b13      	ldr	r3, [pc, #76]	; (8017a2c <MX_ADC2_Init+0x9c>)
 80179e0:	2201      	movs	r2, #1
 80179e2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80179e4:	4b11      	ldr	r3, [pc, #68]	; (8017a2c <MX_ADC2_Init+0x9c>)
 80179e6:	2200      	movs	r2, #0
 80179e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80179ec:	4b0f      	ldr	r3, [pc, #60]	; (8017a2c <MX_ADC2_Init+0x9c>)
 80179ee:	2201      	movs	r2, #1
 80179f0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80179f2:	480e      	ldr	r0, [pc, #56]	; (8017a2c <MX_ADC2_Init+0x9c>)
 80179f4:	f000 ff28 	bl	8018848 <HAL_ADC_Init>
 80179f8:	4603      	mov	r3, r0
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	d001      	beq.n	8017a02 <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 80179fe:	f000 fb6b 	bl	80180d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8017a02:	2307      	movs	r3, #7
 8017a04:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8017a06:	2301      	movs	r3, #1
 8017a08:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8017a0a:	2300      	movs	r3, #0
 8017a0c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8017a0e:	463b      	mov	r3, r7
 8017a10:	4619      	mov	r1, r3
 8017a12:	4806      	ldr	r0, [pc, #24]	; (8017a2c <MX_ADC2_Init+0x9c>)
 8017a14:	f000 ff5c 	bl	80188d0 <HAL_ADC_ConfigChannel>
 8017a18:	4603      	mov	r3, r0
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	d001      	beq.n	8017a22 <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 8017a1e:	f000 fb5b 	bl	80180d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8017a22:	bf00      	nop
 8017a24:	3710      	adds	r7, #16
 8017a26:	46bd      	mov	sp, r7
 8017a28:	bd80      	pop	{r7, pc}
 8017a2a:	bf00      	nop
 8017a2c:	200068f4 	.word	0x200068f4
 8017a30:	40012100 	.word	0x40012100

08017a34 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8017a34:	b580      	push	{r7, lr}
 8017a36:	b082      	sub	sp, #8
 8017a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8017a3a:	463b      	mov	r3, r7
 8017a3c:	2200      	movs	r2, #0
 8017a3e:	601a      	str	r2, [r3, #0]
 8017a40:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8017a42:	4b19      	ldr	r3, [pc, #100]	; (8017aa8 <MX_DAC_Init+0x74>)
 8017a44:	4a19      	ldr	r2, [pc, #100]	; (8017aac <MX_DAC_Init+0x78>)
 8017a46:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8017a48:	4817      	ldr	r0, [pc, #92]	; (8017aa8 <MX_DAC_Init+0x74>)
 8017a4a:	f001 fa80 	bl	8018f4e <HAL_DAC_Init>
 8017a4e:	4603      	mov	r3, r0
 8017a50:	2b00      	cmp	r3, #0
 8017a52:	d001      	beq.n	8017a58 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8017a54:	f000 fb40 	bl	80180d8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8017a58:	2300      	movs	r3, #0
 8017a5a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8017a5c:	2300      	movs	r3, #0
 8017a5e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8017a60:	463b      	mov	r3, r7
 8017a62:	2200      	movs	r2, #0
 8017a64:	4619      	mov	r1, r3
 8017a66:	4810      	ldr	r0, [pc, #64]	; (8017aa8 <MX_DAC_Init+0x74>)
 8017a68:	f001 fab8 	bl	8018fdc <HAL_DAC_ConfigChannel>
 8017a6c:	4603      	mov	r3, r0
 8017a6e:	2b00      	cmp	r3, #0
 8017a70:	d001      	beq.n	8017a76 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8017a72:	f000 fb31 	bl	80180d8 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8017a76:	2302      	movs	r3, #2
 8017a78:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8017a7a:	463b      	mov	r3, r7
 8017a7c:	2210      	movs	r2, #16
 8017a7e:	4619      	mov	r1, r3
 8017a80:	4809      	ldr	r0, [pc, #36]	; (8017aa8 <MX_DAC_Init+0x74>)
 8017a82:	f001 faab 	bl	8018fdc <HAL_DAC_ConfigChannel>
 8017a86:	4603      	mov	r3, r0
 8017a88:	2b00      	cmp	r3, #0
 8017a8a:	d001      	beq.n	8017a90 <MX_DAC_Init+0x5c>
  {
    Error_Handler();
 8017a8c:	f000 fb24 	bl	80180d8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 620);  //(620*4095)/330;//50mv
 8017a90:	f44f 731b 	mov.w	r3, #620	; 0x26c
 8017a94:	2200      	movs	r2, #0
 8017a96:	2110      	movs	r1, #16
 8017a98:	4803      	ldr	r0, [pc, #12]	; (8017aa8 <MX_DAC_Init+0x74>)
 8017a9a:	f001 fa7a 	bl	8018f92 <HAL_DAC_SetValue>
  /* USER CODE END DAC_Init 2 */

}
 8017a9e:	bf00      	nop
 8017aa0:	3708      	adds	r7, #8
 8017aa2:	46bd      	mov	sp, r7
 8017aa4:	bd80      	pop	{r7, pc}
 8017aa6:	bf00      	nop
 8017aa8:	20006b04 	.word	0x20006b04
 8017aac:	40007400 	.word	0x40007400

08017ab0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8017ab0:	b580      	push	{r7, lr}
 8017ab2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8017ab4:	4b17      	ldr	r3, [pc, #92]	; (8017b14 <MX_SPI2_Init+0x64>)
 8017ab6:	4a18      	ldr	r2, [pc, #96]	; (8017b18 <MX_SPI2_Init+0x68>)
 8017ab8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8017aba:	4b16      	ldr	r3, [pc, #88]	; (8017b14 <MX_SPI2_Init+0x64>)
 8017abc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8017ac0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8017ac2:	4b14      	ldr	r3, [pc, #80]	; (8017b14 <MX_SPI2_Init+0x64>)
 8017ac4:	2200      	movs	r2, #0
 8017ac6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8017ac8:	4b12      	ldr	r3, [pc, #72]	; (8017b14 <MX_SPI2_Init+0x64>)
 8017aca:	2200      	movs	r2, #0
 8017acc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8017ace:	4b11      	ldr	r3, [pc, #68]	; (8017b14 <MX_SPI2_Init+0x64>)
 8017ad0:	2202      	movs	r2, #2
 8017ad2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8017ad4:	4b0f      	ldr	r3, [pc, #60]	; (8017b14 <MX_SPI2_Init+0x64>)
 8017ad6:	2201      	movs	r2, #1
 8017ad8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8017ada:	4b0e      	ldr	r3, [pc, #56]	; (8017b14 <MX_SPI2_Init+0x64>)
 8017adc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017ae0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8017ae2:	4b0c      	ldr	r3, [pc, #48]	; (8017b14 <MX_SPI2_Init+0x64>)
 8017ae4:	2200      	movs	r2, #0
 8017ae6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8017ae8:	4b0a      	ldr	r3, [pc, #40]	; (8017b14 <MX_SPI2_Init+0x64>)
 8017aea:	2200      	movs	r2, #0
 8017aec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8017aee:	4b09      	ldr	r3, [pc, #36]	; (8017b14 <MX_SPI2_Init+0x64>)
 8017af0:	2200      	movs	r2, #0
 8017af2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8017af4:	4b07      	ldr	r3, [pc, #28]	; (8017b14 <MX_SPI2_Init+0x64>)
 8017af6:	2200      	movs	r2, #0
 8017af8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8017afa:	4b06      	ldr	r3, [pc, #24]	; (8017b14 <MX_SPI2_Init+0x64>)
 8017afc:	220a      	movs	r2, #10
 8017afe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8017b00:	4804      	ldr	r0, [pc, #16]	; (8017b14 <MX_SPI2_Init+0x64>)
 8017b02:	f004 fcd7 	bl	801c4b4 <HAL_SPI_Init>
 8017b06:	4603      	mov	r3, r0
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	d001      	beq.n	8017b10 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8017b0c:	f000 fae4 	bl	80180d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8017b10:	bf00      	nop
 8017b12:	bd80      	pop	{r7, pc}
 8017b14:	2000689c 	.word	0x2000689c
 8017b18:	40003800 	.word	0x40003800

08017b1c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8017b1c:	b580      	push	{r7, lr}
 8017b1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8017b20:	4b18      	ldr	r3, [pc, #96]	; (8017b84 <MX_SPI3_Init+0x68>)
 8017b22:	4a19      	ldr	r2, [pc, #100]	; (8017b88 <MX_SPI3_Init+0x6c>)
 8017b24:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8017b26:	4b17      	ldr	r3, [pc, #92]	; (8017b84 <MX_SPI3_Init+0x68>)
 8017b28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8017b2c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8017b2e:	4b15      	ldr	r3, [pc, #84]	; (8017b84 <MX_SPI3_Init+0x68>)
 8017b30:	2200      	movs	r2, #0
 8017b32:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8017b34:	4b13      	ldr	r3, [pc, #76]	; (8017b84 <MX_SPI3_Init+0x68>)
 8017b36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017b3a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8017b3c:	4b11      	ldr	r3, [pc, #68]	; (8017b84 <MX_SPI3_Init+0x68>)
 8017b3e:	2200      	movs	r2, #0
 8017b40:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8017b42:	4b10      	ldr	r3, [pc, #64]	; (8017b84 <MX_SPI3_Init+0x68>)
 8017b44:	2200      	movs	r2, #0
 8017b46:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8017b48:	4b0e      	ldr	r3, [pc, #56]	; (8017b84 <MX_SPI3_Init+0x68>)
 8017b4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017b4e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8017b50:	4b0c      	ldr	r3, [pc, #48]	; (8017b84 <MX_SPI3_Init+0x68>)
 8017b52:	2210      	movs	r2, #16
 8017b54:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8017b56:	4b0b      	ldr	r3, [pc, #44]	; (8017b84 <MX_SPI3_Init+0x68>)
 8017b58:	2200      	movs	r2, #0
 8017b5a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8017b5c:	4b09      	ldr	r3, [pc, #36]	; (8017b84 <MX_SPI3_Init+0x68>)
 8017b5e:	2200      	movs	r2, #0
 8017b60:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8017b62:	4b08      	ldr	r3, [pc, #32]	; (8017b84 <MX_SPI3_Init+0x68>)
 8017b64:	2200      	movs	r2, #0
 8017b66:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8017b68:	4b06      	ldr	r3, [pc, #24]	; (8017b84 <MX_SPI3_Init+0x68>)
 8017b6a:	220a      	movs	r2, #10
 8017b6c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8017b6e:	4805      	ldr	r0, [pc, #20]	; (8017b84 <MX_SPI3_Init+0x68>)
 8017b70:	f004 fca0 	bl	801c4b4 <HAL_SPI_Init>
 8017b74:	4603      	mov	r3, r0
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	d001      	beq.n	8017b7e <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8017b7a:	f000 faad 	bl	80180d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8017b7e:	bf00      	nop
 8017b80:	bd80      	pop	{r7, pc}
 8017b82:	bf00      	nop
 8017b84:	200069cc 	.word	0x200069cc
 8017b88:	40003c00 	.word	0x40003c00

08017b8c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8017b8c:	b580      	push	{r7, lr}
 8017b8e:	b086      	sub	sp, #24
 8017b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8017b92:	f107 0308 	add.w	r3, r7, #8
 8017b96:	2200      	movs	r2, #0
 8017b98:	601a      	str	r2, [r3, #0]
 8017b9a:	605a      	str	r2, [r3, #4]
 8017b9c:	609a      	str	r2, [r3, #8]
 8017b9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017ba0:	463b      	mov	r3, r7
 8017ba2:	2200      	movs	r2, #0
 8017ba4:	601a      	str	r2, [r3, #0]
 8017ba6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */
  octim1.Pulse = 500;
 8017ba8:	4b30      	ldr	r3, [pc, #192]	; (8017c6c <MX_TIM1_Init+0xe0>)
 8017baa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8017bae:	605a      	str	r2, [r3, #4]
  octim1.OCMode = TIM_OCMODE_PWM2;
 8017bb0:	4b2e      	ldr	r3, [pc, #184]	; (8017c6c <MX_TIM1_Init+0xe0>)
 8017bb2:	2270      	movs	r2, #112	; 0x70
 8017bb4:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8017bb6:	4b2e      	ldr	r3, [pc, #184]	; (8017c70 <MX_TIM1_Init+0xe4>)
 8017bb8:	4a2e      	ldr	r2, [pc, #184]	; (8017c74 <MX_TIM1_Init+0xe8>)
 8017bba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 89;
 8017bbc:	4b2c      	ldr	r3, [pc, #176]	; (8017c70 <MX_TIM1_Init+0xe4>)
 8017bbe:	2259      	movs	r2, #89	; 0x59
 8017bc0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8017bc2:	4b2b      	ldr	r3, [pc, #172]	; (8017c70 <MX_TIM1_Init+0xe4>)
 8017bc4:	2210      	movs	r2, #16
 8017bc6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8017bc8:	4b29      	ldr	r3, [pc, #164]	; (8017c70 <MX_TIM1_Init+0xe4>)
 8017bca:	f240 32e7 	movw	r2, #999	; 0x3e7
 8017bce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017bd0:	4b27      	ldr	r3, [pc, #156]	; (8017c70 <MX_TIM1_Init+0xe4>)
 8017bd2:	2200      	movs	r2, #0
 8017bd4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8017bd6:	4b26      	ldr	r3, [pc, #152]	; (8017c70 <MX_TIM1_Init+0xe4>)
 8017bd8:	2200      	movs	r2, #0
 8017bda:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8017bdc:	4b24      	ldr	r3, [pc, #144]	; (8017c70 <MX_TIM1_Init+0xe4>)
 8017bde:	2280      	movs	r2, #128	; 0x80
 8017be0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8017be2:	4823      	ldr	r0, [pc, #140]	; (8017c70 <MX_TIM1_Init+0xe4>)
 8017be4:	f005 fb3a 	bl	801d25c <HAL_TIM_Base_Init>
 8017be8:	4603      	mov	r3, r0
 8017bea:	2b00      	cmp	r3, #0
 8017bec:	d001      	beq.n	8017bf2 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8017bee:	f000 fa73 	bl	80180d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8017bf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017bf6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8017bf8:	f107 0308 	add.w	r3, r7, #8
 8017bfc:	4619      	mov	r1, r3
 8017bfe:	481c      	ldr	r0, [pc, #112]	; (8017c70 <MX_TIM1_Init+0xe4>)
 8017c00:	f005 fd50 	bl	801d6a4 <HAL_TIM_ConfigClockSource>
 8017c04:	4603      	mov	r3, r0
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	d001      	beq.n	8017c0e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8017c0a:	f000 fa65 	bl	80180d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017c0e:	2300      	movs	r3, #0
 8017c10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8017c12:	2300      	movs	r3, #0
 8017c14:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8017c16:	463b      	mov	r3, r7
 8017c18:	4619      	mov	r1, r3
 8017c1a:	4815      	ldr	r0, [pc, #84]	; (8017c70 <MX_TIM1_Init+0xe4>)
 8017c1c:	f006 f91c 	bl	801de58 <HAL_TIMEx_MasterConfigSynchronization>
 8017c20:	4603      	mov	r3, r0
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	d001      	beq.n	8017c2a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8017c26:	f000 fa57 	bl	80180d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_OC_ConfigChannel(&htim1, &octim1, 1 );
 8017c2a:	2201      	movs	r2, #1
 8017c2c:	490f      	ldr	r1, [pc, #60]	; (8017c6c <MX_TIM1_Init+0xe0>)
 8017c2e:	4810      	ldr	r0, [pc, #64]	; (8017c70 <MX_TIM1_Init+0xe4>)
 8017c30:	f005 fcdc 	bl	801d5ec <HAL_TIM_OC_ConfigChannel>
  __HAL_TIM_URS_ENABLE(&htim1);
 8017c34:	4b0e      	ldr	r3, [pc, #56]	; (8017c70 <MX_TIM1_Init+0xe4>)
 8017c36:	681b      	ldr	r3, [r3, #0]
 8017c38:	681a      	ldr	r2, [r3, #0]
 8017c3a:	4b0d      	ldr	r3, [pc, #52]	; (8017c70 <MX_TIM1_Init+0xe4>)
 8017c3c:	681b      	ldr	r3, [r3, #0]
 8017c3e:	f042 0204 	orr.w	r2, r2, #4
 8017c42:	601a      	str	r2, [r3, #0]
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_CC1 | TIM_DMA_TRIGGER);
 8017c44:	4b0a      	ldr	r3, [pc, #40]	; (8017c70 <MX_TIM1_Init+0xe4>)
 8017c46:	681b      	ldr	r3, [r3, #0]
 8017c48:	68da      	ldr	r2, [r3, #12]
 8017c4a:	4b09      	ldr	r3, [pc, #36]	; (8017c70 <MX_TIM1_Init+0xe4>)
 8017c4c:	681b      	ldr	r3, [r3, #0]
 8017c4e:	f442 4284 	orr.w	r2, r2, #16896	; 0x4200
 8017c52:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 8017c54:	4b06      	ldr	r3, [pc, #24]	; (8017c70 <MX_TIM1_Init+0xe4>)
 8017c56:	681b      	ldr	r3, [r3, #0]
 8017c58:	681a      	ldr	r2, [r3, #0]
 8017c5a:	4b05      	ldr	r3, [pc, #20]	; (8017c70 <MX_TIM1_Init+0xe4>)
 8017c5c:	681b      	ldr	r3, [r3, #0]
 8017c5e:	f042 0201 	orr.w	r2, r2, #1
 8017c62:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM1_Init 2 */

}
 8017c64:	bf00      	nop
 8017c66:	3718      	adds	r7, #24
 8017c68:	46bd      	mov	sp, r7
 8017c6a:	bd80      	pop	{r7, pc}
 8017c6c:	20006b78 	.word	0x20006b78
 8017c70:	20006b94 	.word	0x20006b94
 8017c74:	40010000 	.word	0x40010000

08017c78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8017c78:	b580      	push	{r7, lr}
 8017c7a:	b086      	sub	sp, #24
 8017c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8017c7e:	f107 0308 	add.w	r3, r7, #8
 8017c82:	2200      	movs	r2, #0
 8017c84:	601a      	str	r2, [r3, #0]
 8017c86:	605a      	str	r2, [r3, #4]
 8017c88:	609a      	str	r2, [r3, #8]
 8017c8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017c8c:	463b      	mov	r3, r7
 8017c8e:	2200      	movs	r2, #0
 8017c90:	601a      	str	r2, [r3, #0]
 8017c92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */
  octim3.Pulse = 3750;
 8017c94:	4b25      	ldr	r3, [pc, #148]	; (8017d2c <MX_TIM3_Init+0xb4>)
 8017c96:	f640 62a6 	movw	r2, #3750	; 0xea6
 8017c9a:	605a      	str	r2, [r3, #4]
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8017c9c:	4b24      	ldr	r3, [pc, #144]	; (8017d30 <MX_TIM3_Init+0xb8>)
 8017c9e:	4a25      	ldr	r2, [pc, #148]	; (8017d34 <MX_TIM3_Init+0xbc>)
 8017ca0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 11;
 8017ca2:	4b23      	ldr	r3, [pc, #140]	; (8017d30 <MX_TIM3_Init+0xb8>)
 8017ca4:	220b      	movs	r2, #11
 8017ca6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017ca8:	4b21      	ldr	r3, [pc, #132]	; (8017d30 <MX_TIM3_Init+0xb8>)
 8017caa:	2200      	movs	r2, #0
 8017cac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7499;
 8017cae:	4b20      	ldr	r3, [pc, #128]	; (8017d30 <MX_TIM3_Init+0xb8>)
 8017cb0:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8017cb4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017cb6:	4b1e      	ldr	r3, [pc, #120]	; (8017d30 <MX_TIM3_Init+0xb8>)
 8017cb8:	2200      	movs	r2, #0
 8017cba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8017cbc:	4b1c      	ldr	r3, [pc, #112]	; (8017d30 <MX_TIM3_Init+0xb8>)
 8017cbe:	2280      	movs	r2, #128	; 0x80
 8017cc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8017cc2:	481b      	ldr	r0, [pc, #108]	; (8017d30 <MX_TIM3_Init+0xb8>)
 8017cc4:	f005 faca 	bl	801d25c <HAL_TIM_Base_Init>
 8017cc8:	4603      	mov	r3, r0
 8017cca:	2b00      	cmp	r3, #0
 8017ccc:	d001      	beq.n	8017cd2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8017cce:	f000 fa03 	bl	80180d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8017cd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017cd6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8017cd8:	f107 0308 	add.w	r3, r7, #8
 8017cdc:	4619      	mov	r1, r3
 8017cde:	4814      	ldr	r0, [pc, #80]	; (8017d30 <MX_TIM3_Init+0xb8>)
 8017ce0:	f005 fce0 	bl	801d6a4 <HAL_TIM_ConfigClockSource>
 8017ce4:	4603      	mov	r3, r0
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	d001      	beq.n	8017cee <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8017cea:	f000 f9f5 	bl	80180d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8017cee:	2320      	movs	r3, #32
 8017cf0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8017cf2:	2300      	movs	r3, #0
 8017cf4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8017cf6:	463b      	mov	r3, r7
 8017cf8:	4619      	mov	r1, r3
 8017cfa:	480d      	ldr	r0, [pc, #52]	; (8017d30 <MX_TIM3_Init+0xb8>)
 8017cfc:	f006 f8ac 	bl	801de58 <HAL_TIMEx_MasterConfigSynchronization>
 8017d00:	4603      	mov	r3, r0
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	d001      	beq.n	8017d0a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8017d06:	f000 f9e7 	bl	80180d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_OC_ConfigChannel(&htim3, &octim3, 1 );
 8017d0a:	2201      	movs	r2, #1
 8017d0c:	4907      	ldr	r1, [pc, #28]	; (8017d2c <MX_TIM3_Init+0xb4>)
 8017d0e:	4808      	ldr	r0, [pc, #32]	; (8017d30 <MX_TIM3_Init+0xb8>)
 8017d10:	f005 fc6c 	bl	801d5ec <HAL_TIM_OC_ConfigChannel>
  __HAL_TIM_ENABLE(&htim3);
 8017d14:	4b06      	ldr	r3, [pc, #24]	; (8017d30 <MX_TIM3_Init+0xb8>)
 8017d16:	681b      	ldr	r3, [r3, #0]
 8017d18:	681a      	ldr	r2, [r3, #0]
 8017d1a:	4b05      	ldr	r3, [pc, #20]	; (8017d30 <MX_TIM3_Init+0xb8>)
 8017d1c:	681b      	ldr	r3, [r3, #0]
 8017d1e:	f042 0201 	orr.w	r2, r2, #1
 8017d22:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM3_Init 2 */

}
 8017d24:	bf00      	nop
 8017d26:	3718      	adds	r7, #24
 8017d28:	46bd      	mov	sp, r7
 8017d2a:	bd80      	pop	{r7, pc}
 8017d2c:	20006acc 	.word	0x20006acc
 8017d30:	20006984 	.word	0x20006984
 8017d34:	40000400 	.word	0x40000400

08017d38 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8017d38:	b580      	push	{r7, lr}
 8017d3a:	b086      	sub	sp, #24
 8017d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8017d3e:	f107 0308 	add.w	r3, r7, #8
 8017d42:	2200      	movs	r2, #0
 8017d44:	601a      	str	r2, [r3, #0]
 8017d46:	605a      	str	r2, [r3, #4]
 8017d48:	609a      	str	r2, [r3, #8]
 8017d4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017d4c:	463b      	mov	r3, r7
 8017d4e:	2200      	movs	r2, #0
 8017d50:	601a      	str	r2, [r3, #0]
 8017d52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */
  octim5.Pulse = (FARR[List[FREQ_OUT].Val]+1)/2;
 8017d54:	4b3a      	ldr	r3, [pc, #232]	; (8017e40 <MX_TIM5_Init+0x108>)
 8017d56:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8017d5a:	461a      	mov	r2, r3
 8017d5c:	4b39      	ldr	r3, [pc, #228]	; (8017e44 <MX_TIM5_Init+0x10c>)
 8017d5e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017d62:	3301      	adds	r3, #1
 8017d64:	0fda      	lsrs	r2, r3, #31
 8017d66:	4413      	add	r3, r2
 8017d68:	105b      	asrs	r3, r3, #1
 8017d6a:	461a      	mov	r2, r3
 8017d6c:	4b36      	ldr	r3, [pc, #216]	; (8017e48 <MX_TIM5_Init+0x110>)
 8017d6e:	605a      	str	r2, [r3, #4]
  octim5.OCMode = TIM_OCMODE_PWM2;
 8017d70:	4b35      	ldr	r3, [pc, #212]	; (8017e48 <MX_TIM5_Init+0x110>)
 8017d72:	2270      	movs	r2, #112	; 0x70
 8017d74:	601a      	str	r2, [r3, #0]
  octim5.OCFastMode = TIM_OCFAST_ENABLE;
 8017d76:	4b34      	ldr	r3, [pc, #208]	; (8017e48 <MX_TIM5_Init+0x110>)
 8017d78:	2204      	movs	r2, #4
 8017d7a:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8017d7c:	4b33      	ldr	r3, [pc, #204]	; (8017e4c <MX_TIM5_Init+0x114>)
 8017d7e:	4a34      	ldr	r2, [pc, #208]	; (8017e50 <MX_TIM5_Init+0x118>)
 8017d80:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9;
 8017d82:	4b32      	ldr	r3, [pc, #200]	; (8017e4c <MX_TIM5_Init+0x114>)
 8017d84:	2209      	movs	r2, #9
 8017d86:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017d88:	4b30      	ldr	r3, [pc, #192]	; (8017e4c <MX_TIM5_Init+0x114>)
 8017d8a:	2200      	movs	r2, #0
 8017d8c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 18000;
 8017d8e:	4b2f      	ldr	r3, [pc, #188]	; (8017e4c <MX_TIM5_Init+0x114>)
 8017d90:	f244 6250 	movw	r2, #18000	; 0x4650
 8017d94:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017d96:	4b2d      	ldr	r3, [pc, #180]	; (8017e4c <MX_TIM5_Init+0x114>)
 8017d98:	2200      	movs	r2, #0
 8017d9a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8017d9c:	4b2b      	ldr	r3, [pc, #172]	; (8017e4c <MX_TIM5_Init+0x114>)
 8017d9e:	2280      	movs	r2, #128	; 0x80
 8017da0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8017da2:	482a      	ldr	r0, [pc, #168]	; (8017e4c <MX_TIM5_Init+0x114>)
 8017da4:	f005 fa5a 	bl	801d25c <HAL_TIM_Base_Init>
 8017da8:	4603      	mov	r3, r0
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	d001      	beq.n	8017db2 <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
 8017dae:	f000 f993 	bl	80180d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8017db2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017db6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8017db8:	f107 0308 	add.w	r3, r7, #8
 8017dbc:	4619      	mov	r1, r3
 8017dbe:	4823      	ldr	r0, [pc, #140]	; (8017e4c <MX_TIM5_Init+0x114>)
 8017dc0:	f005 fc70 	bl	801d6a4 <HAL_TIM_ConfigClockSource>
 8017dc4:	4603      	mov	r3, r0
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	d001      	beq.n	8017dce <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 8017dca:	f000 f985 	bl	80180d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017dce:	2300      	movs	r3, #0
 8017dd0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8017dd2:	2300      	movs	r3, #0
 8017dd4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8017dd6:	463b      	mov	r3, r7
 8017dd8:	4619      	mov	r1, r3
 8017dda:	481c      	ldr	r0, [pc, #112]	; (8017e4c <MX_TIM5_Init+0x114>)
 8017ddc:	f006 f83c 	bl	801de58 <HAL_TIMEx_MasterConfigSynchronization>
 8017de0:	4603      	mov	r3, r0
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	d001      	beq.n	8017dea <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8017de6:	f000 f977 	bl	80180d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  htim5.Init.Period = FARR[List[FREQ_OUT].Val];
 8017dea:	4b15      	ldr	r3, [pc, #84]	; (8017e40 <MX_TIM5_Init+0x108>)
 8017dec:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8017df0:	461a      	mov	r2, r3
 8017df2:	4b14      	ldr	r3, [pc, #80]	; (8017e44 <MX_TIM5_Init+0x10c>)
 8017df4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017df8:	461a      	mov	r2, r3
 8017dfa:	4b14      	ldr	r3, [pc, #80]	; (8017e4c <MX_TIM5_Init+0x114>)
 8017dfc:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8017dfe:	4813      	ldr	r0, [pc, #76]	; (8017e4c <MX_TIM5_Init+0x114>)
 8017e00:	f005 fa2c 	bl	801d25c <HAL_TIM_Base_Init>
 8017e04:	4603      	mov	r3, r0
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	d001      	beq.n	8017e0e <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8017e0a:	f000 f965 	bl	80180d8 <Error_Handler>
  }
  HAL_TIM_OC_ConfigChannel(&htim5, &octim5, 3 );
 8017e0e:	2203      	movs	r2, #3
 8017e10:	490d      	ldr	r1, [pc, #52]	; (8017e48 <MX_TIM5_Init+0x110>)
 8017e12:	480e      	ldr	r0, [pc, #56]	; (8017e4c <MX_TIM5_Init+0x114>)
 8017e14:	f005 fbea 	bl	801d5ec <HAL_TIM_OC_ConfigChannel>
  __HAL_TIM_URS_ENABLE(&htim5);
 8017e18:	4b0c      	ldr	r3, [pc, #48]	; (8017e4c <MX_TIM5_Init+0x114>)
 8017e1a:	681b      	ldr	r3, [r3, #0]
 8017e1c:	681a      	ldr	r2, [r3, #0]
 8017e1e:	4b0b      	ldr	r3, [pc, #44]	; (8017e4c <MX_TIM5_Init+0x114>)
 8017e20:	681b      	ldr	r3, [r3, #0]
 8017e22:	f042 0204 	orr.w	r2, r2, #4
 8017e26:	601a      	str	r2, [r3, #0]
  __HAL_TIM_ENABLE(&htim5);
 8017e28:	4b08      	ldr	r3, [pc, #32]	; (8017e4c <MX_TIM5_Init+0x114>)
 8017e2a:	681b      	ldr	r3, [r3, #0]
 8017e2c:	681a      	ldr	r2, [r3, #0]
 8017e2e:	4b07      	ldr	r3, [pc, #28]	; (8017e4c <MX_TIM5_Init+0x114>)
 8017e30:	681b      	ldr	r3, [r3, #0]
 8017e32:	f042 0201 	orr.w	r2, r2, #1
 8017e36:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM5_Init 2 */

}
 8017e38:	bf00      	nop
 8017e3a:	3718      	adds	r7, #24
 8017e3c:	46bd      	mov	sp, r7
 8017e3e:	bd80      	pop	{r7, pc}
 8017e40:	20000298 	.word	0x20000298
 8017e44:	08000ae8 	.word	0x08000ae8
 8017e48:	20006ae8 	.word	0x20006ae8
 8017e4c:	2000693c 	.word	0x2000693c
 8017e50:	40000c00 	.word	0x40000c00

08017e54 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8017e54:	b580      	push	{r7, lr}
 8017e56:	b082      	sub	sp, #8
 8017e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */
  // aka tim_da
  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017e5a:	463b      	mov	r3, r7
 8017e5c:	2200      	movs	r2, #0
 8017e5e:	601a      	str	r2, [r3, #0]
 8017e60:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8017e62:	4b1d      	ldr	r3, [pc, #116]	; (8017ed8 <MX_TIM7_Init+0x84>)
 8017e64:	4a1d      	ldr	r2, [pc, #116]	; (8017edc <MX_TIM7_Init+0x88>)
 8017e66:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2;
 8017e68:	4b1b      	ldr	r3, [pc, #108]	; (8017ed8 <MX_TIM7_Init+0x84>)
 8017e6a:	2202      	movs	r2, #2
 8017e6c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017e6e:	4b1a      	ldr	r3, [pc, #104]	; (8017ed8 <MX_TIM7_Init+0x84>)
 8017e70:	2200      	movs	r2, #0
 8017e72:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8017e74:	4b18      	ldr	r3, [pc, #96]	; (8017ed8 <MX_TIM7_Init+0x84>)
 8017e76:	f240 32e7 	movw	r2, #999	; 0x3e7
 8017e7a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8017e7c:	4b16      	ldr	r3, [pc, #88]	; (8017ed8 <MX_TIM7_Init+0x84>)
 8017e7e:	2200      	movs	r2, #0
 8017e80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8017e82:	4815      	ldr	r0, [pc, #84]	; (8017ed8 <MX_TIM7_Init+0x84>)
 8017e84:	f005 f9ea 	bl	801d25c <HAL_TIM_Base_Init>
 8017e88:	4603      	mov	r3, r0
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d001      	beq.n	8017e92 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8017e8e:	f000 f923 	bl	80180d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017e92:	2300      	movs	r3, #0
 8017e94:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8017e96:	2300      	movs	r3, #0
 8017e98:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8017e9a:	463b      	mov	r3, r7
 8017e9c:	4619      	mov	r1, r3
 8017e9e:	480e      	ldr	r0, [pc, #56]	; (8017ed8 <MX_TIM7_Init+0x84>)
 8017ea0:	f005 ffda 	bl	801de58 <HAL_TIMEx_MasterConfigSynchronization>
 8017ea4:	4603      	mov	r3, r0
 8017ea6:	2b00      	cmp	r3, #0
 8017ea8:	d001      	beq.n	8017eae <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8017eaa:	f000 f915 	bl	80180d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  __HAL_TIM_ENABLE_DMA(&htim7,TIM_DMA_UPDATE);
 8017eae:	4b0a      	ldr	r3, [pc, #40]	; (8017ed8 <MX_TIM7_Init+0x84>)
 8017eb0:	681b      	ldr	r3, [r3, #0]
 8017eb2:	68da      	ldr	r2, [r3, #12]
 8017eb4:	4b08      	ldr	r3, [pc, #32]	; (8017ed8 <MX_TIM7_Init+0x84>)
 8017eb6:	681b      	ldr	r3, [r3, #0]
 8017eb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017ebc:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim7);
 8017ebe:	4b06      	ldr	r3, [pc, #24]	; (8017ed8 <MX_TIM7_Init+0x84>)
 8017ec0:	681b      	ldr	r3, [r3, #0]
 8017ec2:	681a      	ldr	r2, [r3, #0]
 8017ec4:	4b04      	ldr	r3, [pc, #16]	; (8017ed8 <MX_TIM7_Init+0x84>)
 8017ec6:	681b      	ldr	r3, [r3, #0]
 8017ec8:	f042 0201 	orr.w	r2, r2, #1
 8017ecc:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM7_Init 2 */

}
 8017ece:	bf00      	nop
 8017ed0:	3708      	adds	r7, #8
 8017ed2:	46bd      	mov	sp, r7
 8017ed4:	bd80      	pop	{r7, pc}
 8017ed6:	bf00      	nop
 8017ed8:	20006bdc 	.word	0x20006bdc
 8017edc:	40001400 	.word	0x40001400

08017ee0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8017ee0:	b580      	push	{r7, lr}
 8017ee2:	b082      	sub	sp, #8
 8017ee4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8017ee6:	2300      	movs	r3, #0
 8017ee8:	607b      	str	r3, [r7, #4]
 8017eea:	4b17      	ldr	r3, [pc, #92]	; (8017f48 <MX_DMA_Init+0x68>)
 8017eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017eee:	4a16      	ldr	r2, [pc, #88]	; (8017f48 <MX_DMA_Init+0x68>)
 8017ef0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8017ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8017ef6:	4b14      	ldr	r3, [pc, #80]	; (8017f48 <MX_DMA_Init+0x68>)
 8017ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8017efe:	607b      	str	r3, [r7, #4]
 8017f00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8017f02:	2300      	movs	r3, #0
 8017f04:	603b      	str	r3, [r7, #0]
 8017f06:	4b10      	ldr	r3, [pc, #64]	; (8017f48 <MX_DMA_Init+0x68>)
 8017f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f0a:	4a0f      	ldr	r2, [pc, #60]	; (8017f48 <MX_DMA_Init+0x68>)
 8017f0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8017f10:	6313      	str	r3, [r2, #48]	; 0x30
 8017f12:	4b0d      	ldr	r3, [pc, #52]	; (8017f48 <MX_DMA_Init+0x68>)
 8017f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8017f1a:	603b      	str	r3, [r7, #0]
 8017f1c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8017f1e:	2200      	movs	r2, #0
 8017f20:	2100      	movs	r1, #0
 8017f22:	2010      	movs	r0, #16
 8017f24:	f000 ffdd 	bl	8018ee2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8017f28:	2010      	movs	r0, #16
 8017f2a:	f000 fff6 	bl	8018f1a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8017f2e:	2200      	movs	r2, #0
 8017f30:	2100      	movs	r1, #0
 8017f32:	2038      	movs	r0, #56	; 0x38
 8017f34:	f000 ffd5 	bl	8018ee2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8017f38:	2038      	movs	r0, #56	; 0x38
 8017f3a:	f000 ffee 	bl	8018f1a <HAL_NVIC_EnableIRQ>

}
 8017f3e:	bf00      	nop
 8017f40:	3708      	adds	r7, #8
 8017f42:	46bd      	mov	sp, r7
 8017f44:	bd80      	pop	{r7, pc}
 8017f46:	bf00      	nop
 8017f48:	40023800 	.word	0x40023800

08017f4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8017f4c:	b580      	push	{r7, lr}
 8017f4e:	b08a      	sub	sp, #40	; 0x28
 8017f50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017f52:	f107 0314 	add.w	r3, r7, #20
 8017f56:	2200      	movs	r2, #0
 8017f58:	601a      	str	r2, [r3, #0]
 8017f5a:	605a      	str	r2, [r3, #4]
 8017f5c:	609a      	str	r2, [r3, #8]
 8017f5e:	60da      	str	r2, [r3, #12]
 8017f60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8017f62:	2300      	movs	r3, #0
 8017f64:	613b      	str	r3, [r7, #16]
 8017f66:	4b4e      	ldr	r3, [pc, #312]	; (80180a0 <MX_GPIO_Init+0x154>)
 8017f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f6a:	4a4d      	ldr	r2, [pc, #308]	; (80180a0 <MX_GPIO_Init+0x154>)
 8017f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017f70:	6313      	str	r3, [r2, #48]	; 0x30
 8017f72:	4b4b      	ldr	r3, [pc, #300]	; (80180a0 <MX_GPIO_Init+0x154>)
 8017f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017f7a:	613b      	str	r3, [r7, #16]
 8017f7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8017f7e:	2300      	movs	r3, #0
 8017f80:	60fb      	str	r3, [r7, #12]
 8017f82:	4b47      	ldr	r3, [pc, #284]	; (80180a0 <MX_GPIO_Init+0x154>)
 8017f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f86:	4a46      	ldr	r2, [pc, #280]	; (80180a0 <MX_GPIO_Init+0x154>)
 8017f88:	f043 0301 	orr.w	r3, r3, #1
 8017f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8017f8e:	4b44      	ldr	r3, [pc, #272]	; (80180a0 <MX_GPIO_Init+0x154>)
 8017f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f92:	f003 0301 	and.w	r3, r3, #1
 8017f96:	60fb      	str	r3, [r7, #12]
 8017f98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8017f9a:	2300      	movs	r3, #0
 8017f9c:	60bb      	str	r3, [r7, #8]
 8017f9e:	4b40      	ldr	r3, [pc, #256]	; (80180a0 <MX_GPIO_Init+0x154>)
 8017fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017fa2:	4a3f      	ldr	r2, [pc, #252]	; (80180a0 <MX_GPIO_Init+0x154>)
 8017fa4:	f043 0304 	orr.w	r3, r3, #4
 8017fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8017faa:	4b3d      	ldr	r3, [pc, #244]	; (80180a0 <MX_GPIO_Init+0x154>)
 8017fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017fae:	f003 0304 	and.w	r3, r3, #4
 8017fb2:	60bb      	str	r3, [r7, #8]
 8017fb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8017fb6:	2300      	movs	r3, #0
 8017fb8:	607b      	str	r3, [r7, #4]
 8017fba:	4b39      	ldr	r3, [pc, #228]	; (80180a0 <MX_GPIO_Init+0x154>)
 8017fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017fbe:	4a38      	ldr	r2, [pc, #224]	; (80180a0 <MX_GPIO_Init+0x154>)
 8017fc0:	f043 0302 	orr.w	r3, r3, #2
 8017fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8017fc6:	4b36      	ldr	r3, [pc, #216]	; (80180a0 <MX_GPIO_Init+0x154>)
 8017fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017fca:	f003 0302 	and.w	r3, r3, #2
 8017fce:	607b      	str	r3, [r7, #4]
 8017fd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Fo2_GPIO_Port, Fo2_Pin, GPIO_PIN_RESET);
 8017fd2:	2200      	movs	r2, #0
 8017fd4:	2104      	movs	r1, #4
 8017fd6:	4833      	ldr	r0, [pc, #204]	; (80180a4 <MX_GPIO_Init+0x158>)
 8017fd8:	f001 fff0 	bl	8019fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Az_Pin|Ay_Pin|LcdRs_Pin, GPIO_PIN_RESET);
 8017fdc:	2200      	movs	r2, #0
 8017fde:	f44f 6103 	mov.w	r1, #2096	; 0x830
 8017fe2:	4831      	ldr	r0, [pc, #196]	; (80180a8 <MX_GPIO_Init+0x15c>)
 8017fe4:	f001 ffea 	bl	8019fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Ax_Pin|Dres_Pin, GPIO_PIN_RESET);
 8017fe8:	2200      	movs	r2, #0
 8017fea:	f240 2101 	movw	r1, #513	; 0x201
 8017fee:	482f      	ldr	r0, [pc, #188]	; (80180ac <MX_GPIO_Init+0x160>)
 8017ff0:	f001 ffe4 	bl	8019fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS_Pin|TpCs_Pin, GPIO_PIN_SET);
 8017ff4:	2201      	movs	r2, #1
 8017ff6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8017ffa:	482c      	ldr	r0, [pc, #176]	; (80180ac <MX_GPIO_Init+0x160>)
 8017ffc:	f001 ffde 	bl	8019fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);
 8018000:	2201      	movs	r2, #1
 8018002:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8018006:	4828      	ldr	r0, [pc, #160]	; (80180a8 <MX_GPIO_Init+0x15c>)
 8018008:	f001 ffd8 	bl	8019fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Fo2_Pin */
  GPIO_InitStruct.Pin = Fo2_Pin;
 801800c:	2304      	movs	r3, #4
 801800e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8018010:	2301      	movs	r3, #1
 8018012:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018014:	2300      	movs	r3, #0
 8018016:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018018:	2300      	movs	r3, #0
 801801a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStruct);
 801801c:	f107 0314 	add.w	r3, r7, #20
 8018020:	4619      	mov	r1, r3
 8018022:	4820      	ldr	r0, [pc, #128]	; (80180a4 <MX_GPIO_Init+0x158>)
 8018024:	f001 fe1e 	bl	8019c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : Az_Pin Ay_Pin LcdRs_Pin LcdCs_Pin */
  GPIO_InitStruct.Pin = Az_Pin|Ay_Pin|LcdRs_Pin|LcdCs_Pin;
 8018028:	f641 0330 	movw	r3, #6192	; 0x1830
 801802c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801802e:	2301      	movs	r3, #1
 8018030:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018032:	2300      	movs	r3, #0
 8018034:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018036:	2300      	movs	r3, #0
 8018038:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801803a:	f107 0314 	add.w	r3, r7, #20
 801803e:	4619      	mov	r1, r3
 8018040:	4819      	ldr	r0, [pc, #100]	; (80180a8 <MX_GPIO_Init+0x15c>)
 8018042:	f001 fe0f 	bl	8019c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : Ax_Pin SS_Pin TpCs_Pin Dres_Pin */
  GPIO_InitStruct.Pin = Ax_Pin|SS_Pin|TpCs_Pin|Dres_Pin;
 8018046:	f241 2341 	movw	r3, #4673	; 0x1241
 801804a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801804c:	2301      	movs	r3, #1
 801804e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018050:	2300      	movs	r3, #0
 8018052:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018054:	2300      	movs	r3, #0
 8018056:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8018058:	f107 0314 	add.w	r3, r7, #20
 801805c:	4619      	mov	r1, r3
 801805e:	4813      	ldr	r0, [pc, #76]	; (80180ac <MX_GPIO_Init+0x160>)
 8018060:	f001 fe00 	bl	8019c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : Boot1_Pin */
  GPIO_InitStruct.Pin = Boot1_Pin;
 8018064:	2304      	movs	r3, #4
 8018066:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8018068:	2300      	movs	r3, #0
 801806a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801806c:	2300      	movs	r3, #0
 801806e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Boot1_GPIO_Port, &GPIO_InitStruct);
 8018070:	f107 0314 	add.w	r3, r7, #20
 8018074:	4619      	mov	r1, r3
 8018076:	480d      	ldr	r0, [pc, #52]	; (80180ac <MX_GPIO_Init+0x160>)
 8018078:	f001 fdf4 	bl	8019c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : TpI_Pin */
  GPIO_InitStruct.Pin = TpI_Pin;
 801807c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8018080:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8018082:	2300      	movs	r3, #0
 8018084:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8018086:	2301      	movs	r3, #1
 8018088:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TpI_GPIO_Port, &GPIO_InitStruct);
 801808a:	f107 0314 	add.w	r3, r7, #20
 801808e:	4619      	mov	r1, r3
 8018090:	4806      	ldr	r0, [pc, #24]	; (80180ac <MX_GPIO_Init+0x160>)
 8018092:	f001 fde7 	bl	8019c64 <HAL_GPIO_Init>

}
 8018096:	bf00      	nop
 8018098:	3728      	adds	r7, #40	; 0x28
 801809a:	46bd      	mov	sp, r7
 801809c:	bd80      	pop	{r7, pc}
 801809e:	bf00      	nop
 80180a0:	40023800 	.word	0x40023800
 80180a4:	40020000 	.word	0x40020000
 80180a8:	40020800 	.word	0x40020800
 80180ac:	40020400 	.word	0x40020400

080180b0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80180b0:	b580      	push	{r7, lr}
 80180b2:	b082      	sub	sp, #8
 80180b4:	af00      	add	r7, sp, #0
 80180b6:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback
  if (htim == &htim3 )
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	4a06      	ldr	r2, [pc, #24]	; (80180d4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80180bc:	4293      	cmp	r3, r2
 80180be:	d105      	bne.n	80180cc <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
	  htim->Instance->SR =0;
 80180c0:	687b      	ldr	r3, [r7, #4]
 80180c2:	681b      	ldr	r3, [r3, #0]
 80180c4:	2200      	movs	r2, #0
 80180c6:	611a      	str	r2, [r3, #16]
	  Tim3_ISP();
 80180c8:	f7f4 fd20 	bl	800cb0c <Tim3_ISP>
  }
}
 80180cc:	bf00      	nop
 80180ce:	3708      	adds	r7, #8
 80180d0:	46bd      	mov	sp, r7
 80180d2:	bd80      	pop	{r7, pc}
 80180d4:	20006984 	.word	0x20006984

080180d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80180d8:	b480      	push	{r7}
 80180da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80180dc:	b672      	cpsid	i
}
 80180de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80180e0:	e7fe      	b.n	80180e0 <Error_Handler+0x8>
	...

080180e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80180e4:	b480      	push	{r7}
 80180e6:	b083      	sub	sp, #12
 80180e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80180ea:	2300      	movs	r3, #0
 80180ec:	607b      	str	r3, [r7, #4]
 80180ee:	4b10      	ldr	r3, [pc, #64]	; (8018130 <HAL_MspInit+0x4c>)
 80180f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80180f2:	4a0f      	ldr	r2, [pc, #60]	; (8018130 <HAL_MspInit+0x4c>)
 80180f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80180f8:	6453      	str	r3, [r2, #68]	; 0x44
 80180fa:	4b0d      	ldr	r3, [pc, #52]	; (8018130 <HAL_MspInit+0x4c>)
 80180fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80180fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018102:	607b      	str	r3, [r7, #4]
 8018104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8018106:	2300      	movs	r3, #0
 8018108:	603b      	str	r3, [r7, #0]
 801810a:	4b09      	ldr	r3, [pc, #36]	; (8018130 <HAL_MspInit+0x4c>)
 801810c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801810e:	4a08      	ldr	r2, [pc, #32]	; (8018130 <HAL_MspInit+0x4c>)
 8018110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8018114:	6413      	str	r3, [r2, #64]	; 0x40
 8018116:	4b06      	ldr	r3, [pc, #24]	; (8018130 <HAL_MspInit+0x4c>)
 8018118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801811a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801811e:	603b      	str	r3, [r7, #0]
 8018120:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8018122:	bf00      	nop
 8018124:	370c      	adds	r7, #12
 8018126:	46bd      	mov	sp, r7
 8018128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801812c:	4770      	bx	lr
 801812e:	bf00      	nop
 8018130:	40023800 	.word	0x40023800

08018134 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8018134:	b580      	push	{r7, lr}
 8018136:	b08c      	sub	sp, #48	; 0x30
 8018138:	af00      	add	r7, sp, #0
 801813a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801813c:	f107 031c 	add.w	r3, r7, #28
 8018140:	2200      	movs	r2, #0
 8018142:	601a      	str	r2, [r3, #0]
 8018144:	605a      	str	r2, [r3, #4]
 8018146:	609a      	str	r2, [r3, #8]
 8018148:	60da      	str	r2, [r3, #12]
 801814a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	681b      	ldr	r3, [r3, #0]
 8018150:	4a45      	ldr	r2, [pc, #276]	; (8018268 <HAL_ADC_MspInit+0x134>)
 8018152:	4293      	cmp	r3, r2
 8018154:	d157      	bne.n	8018206 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8018156:	2300      	movs	r3, #0
 8018158:	61bb      	str	r3, [r7, #24]
 801815a:	4b44      	ldr	r3, [pc, #272]	; (801826c <HAL_ADC_MspInit+0x138>)
 801815c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801815e:	4a43      	ldr	r2, [pc, #268]	; (801826c <HAL_ADC_MspInit+0x138>)
 8018160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8018164:	6453      	str	r3, [r2, #68]	; 0x44
 8018166:	4b41      	ldr	r3, [pc, #260]	; (801826c <HAL_ADC_MspInit+0x138>)
 8018168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801816a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801816e:	61bb      	str	r3, [r7, #24]
 8018170:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018172:	2300      	movs	r3, #0
 8018174:	617b      	str	r3, [r7, #20]
 8018176:	4b3d      	ldr	r3, [pc, #244]	; (801826c <HAL_ADC_MspInit+0x138>)
 8018178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801817a:	4a3c      	ldr	r2, [pc, #240]	; (801826c <HAL_ADC_MspInit+0x138>)
 801817c:	f043 0301 	orr.w	r3, r3, #1
 8018180:	6313      	str	r3, [r2, #48]	; 0x30
 8018182:	4b3a      	ldr	r3, [pc, #232]	; (801826c <HAL_ADC_MspInit+0x138>)
 8018184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018186:	f003 0301 	and.w	r3, r3, #1
 801818a:	617b      	str	r3, [r7, #20]
 801818c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = Ao_Pin;
 801818e:	2340      	movs	r3, #64	; 0x40
 8018190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8018192:	2303      	movs	r3, #3
 8018194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018196:	2300      	movs	r3, #0
 8018198:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Ao_GPIO_Port, &GPIO_InitStruct);
 801819a:	f107 031c 	add.w	r3, r7, #28
 801819e:	4619      	mov	r1, r3
 80181a0:	4833      	ldr	r0, [pc, #204]	; (8018270 <HAL_ADC_MspInit+0x13c>)
 80181a2:	f001 fd5f 	bl	8019c64 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80181a6:	4b33      	ldr	r3, [pc, #204]	; (8018274 <HAL_ADC_MspInit+0x140>)
 80181a8:	4a33      	ldr	r2, [pc, #204]	; (8018278 <HAL_ADC_MspInit+0x144>)
 80181aa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80181ac:	4b31      	ldr	r3, [pc, #196]	; (8018274 <HAL_ADC_MspInit+0x140>)
 80181ae:	2200      	movs	r2, #0
 80181b0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80181b2:	4b30      	ldr	r3, [pc, #192]	; (8018274 <HAL_ADC_MspInit+0x140>)
 80181b4:	2200      	movs	r2, #0
 80181b6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80181b8:	4b2e      	ldr	r3, [pc, #184]	; (8018274 <HAL_ADC_MspInit+0x140>)
 80181ba:	2200      	movs	r2, #0
 80181bc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80181be:	4b2d      	ldr	r3, [pc, #180]	; (8018274 <HAL_ADC_MspInit+0x140>)
 80181c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80181c4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80181c6:	4b2b      	ldr	r3, [pc, #172]	; (8018274 <HAL_ADC_MspInit+0x140>)
 80181c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80181cc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80181ce:	4b29      	ldr	r3, [pc, #164]	; (8018274 <HAL_ADC_MspInit+0x140>)
 80181d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80181d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80181d6:	4b27      	ldr	r3, [pc, #156]	; (8018274 <HAL_ADC_MspInit+0x140>)
 80181d8:	2200      	movs	r2, #0
 80181da:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80181dc:	4b25      	ldr	r3, [pc, #148]	; (8018274 <HAL_ADC_MspInit+0x140>)
 80181de:	2200      	movs	r2, #0
 80181e0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80181e2:	4b24      	ldr	r3, [pc, #144]	; (8018274 <HAL_ADC_MspInit+0x140>)
 80181e4:	2200      	movs	r2, #0
 80181e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80181e8:	4822      	ldr	r0, [pc, #136]	; (8018274 <HAL_ADC_MspInit+0x140>)
 80181ea:	f000 ff47 	bl	801907c <HAL_DMA_Init>
 80181ee:	4603      	mov	r3, r0
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d001      	beq.n	80181f8 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80181f4:	f7ff ff70 	bl	80180d8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	4a1e      	ldr	r2, [pc, #120]	; (8018274 <HAL_ADC_MspInit+0x140>)
 80181fc:	639a      	str	r2, [r3, #56]	; 0x38
 80181fe:	4a1d      	ldr	r2, [pc, #116]	; (8018274 <HAL_ADC_MspInit+0x140>)
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8018204:	e02c      	b.n	8018260 <HAL_ADC_MspInit+0x12c>
  else if(hadc->Instance==ADC2)
 8018206:	687b      	ldr	r3, [r7, #4]
 8018208:	681b      	ldr	r3, [r3, #0]
 801820a:	4a1c      	ldr	r2, [pc, #112]	; (801827c <HAL_ADC_MspInit+0x148>)
 801820c:	4293      	cmp	r3, r2
 801820e:	d127      	bne.n	8018260 <HAL_ADC_MspInit+0x12c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8018210:	2300      	movs	r3, #0
 8018212:	613b      	str	r3, [r7, #16]
 8018214:	4b15      	ldr	r3, [pc, #84]	; (801826c <HAL_ADC_MspInit+0x138>)
 8018216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018218:	4a14      	ldr	r2, [pc, #80]	; (801826c <HAL_ADC_MspInit+0x138>)
 801821a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801821e:	6453      	str	r3, [r2, #68]	; 0x44
 8018220:	4b12      	ldr	r3, [pc, #72]	; (801826c <HAL_ADC_MspInit+0x138>)
 8018222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018224:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8018228:	613b      	str	r3, [r7, #16]
 801822a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801822c:	2300      	movs	r3, #0
 801822e:	60fb      	str	r3, [r7, #12]
 8018230:	4b0e      	ldr	r3, [pc, #56]	; (801826c <HAL_ADC_MspInit+0x138>)
 8018232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018234:	4a0d      	ldr	r2, [pc, #52]	; (801826c <HAL_ADC_MspInit+0x138>)
 8018236:	f043 0301 	orr.w	r3, r3, #1
 801823a:	6313      	str	r3, [r2, #48]	; 0x30
 801823c:	4b0b      	ldr	r3, [pc, #44]	; (801826c <HAL_ADC_MspInit+0x138>)
 801823e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018240:	f003 0301 	and.w	r3, r3, #1
 8018244:	60fb      	str	r3, [r7, #12]
 8018246:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AoA7_Pin;
 8018248:	2380      	movs	r3, #128	; 0x80
 801824a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801824c:	2303      	movs	r3, #3
 801824e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018250:	2300      	movs	r3, #0
 8018252:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AoA7_GPIO_Port, &GPIO_InitStruct);
 8018254:	f107 031c 	add.w	r3, r7, #28
 8018258:	4619      	mov	r1, r3
 801825a:	4805      	ldr	r0, [pc, #20]	; (8018270 <HAL_ADC_MspInit+0x13c>)
 801825c:	f001 fd02 	bl	8019c64 <HAL_GPIO_Init>
}
 8018260:	bf00      	nop
 8018262:	3730      	adds	r7, #48	; 0x30
 8018264:	46bd      	mov	sp, r7
 8018266:	bd80      	pop	{r7, pc}
 8018268:	40012000 	.word	0x40012000
 801826c:	40023800 	.word	0x40023800
 8018270:	40020000 	.word	0x40020000
 8018274:	20006b18 	.word	0x20006b18
 8018278:	40026410 	.word	0x40026410
 801827c:	40012100 	.word	0x40012100

08018280 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8018280:	b580      	push	{r7, lr}
 8018282:	b08a      	sub	sp, #40	; 0x28
 8018284:	af00      	add	r7, sp, #0
 8018286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018288:	f107 0314 	add.w	r3, r7, #20
 801828c:	2200      	movs	r2, #0
 801828e:	601a      	str	r2, [r3, #0]
 8018290:	605a      	str	r2, [r3, #4]
 8018292:	609a      	str	r2, [r3, #8]
 8018294:	60da      	str	r2, [r3, #12]
 8018296:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	681b      	ldr	r3, [r3, #0]
 801829c:	4a33      	ldr	r2, [pc, #204]	; (801836c <HAL_DAC_MspInit+0xec>)
 801829e:	4293      	cmp	r3, r2
 80182a0:	d15f      	bne.n	8018362 <HAL_DAC_MspInit+0xe2>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80182a2:	2300      	movs	r3, #0
 80182a4:	613b      	str	r3, [r7, #16]
 80182a6:	4b32      	ldr	r3, [pc, #200]	; (8018370 <HAL_DAC_MspInit+0xf0>)
 80182a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80182aa:	4a31      	ldr	r2, [pc, #196]	; (8018370 <HAL_DAC_MspInit+0xf0>)
 80182ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80182b0:	6413      	str	r3, [r2, #64]	; 0x40
 80182b2:	4b2f      	ldr	r3, [pc, #188]	; (8018370 <HAL_DAC_MspInit+0xf0>)
 80182b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80182b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80182ba:	613b      	str	r3, [r7, #16]
 80182bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80182be:	2300      	movs	r3, #0
 80182c0:	60fb      	str	r3, [r7, #12]
 80182c2:	4b2b      	ldr	r3, [pc, #172]	; (8018370 <HAL_DAC_MspInit+0xf0>)
 80182c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80182c6:	4a2a      	ldr	r2, [pc, #168]	; (8018370 <HAL_DAC_MspInit+0xf0>)
 80182c8:	f043 0301 	orr.w	r3, r3, #1
 80182cc:	6313      	str	r3, [r2, #48]	; 0x30
 80182ce:	4b28      	ldr	r3, [pc, #160]	; (8018370 <HAL_DAC_MspInit+0xf0>)
 80182d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80182d2:	f003 0301 	and.w	r3, r3, #1
 80182d6:	60fb      	str	r3, [r7, #12]
 80182d8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = Fo4_Pin|Ap_Pin;
 80182da:	2330      	movs	r3, #48	; 0x30
 80182dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80182de:	2303      	movs	r3, #3
 80182e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80182e2:	2300      	movs	r3, #0
 80182e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80182e6:	f107 0314 	add.w	r3, r7, #20
 80182ea:	4619      	mov	r1, r3
 80182ec:	4821      	ldr	r0, [pc, #132]	; (8018374 <HAL_DAC_MspInit+0xf4>)
 80182ee:	f001 fcb9 	bl	8019c64 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80182f2:	4b21      	ldr	r3, [pc, #132]	; (8018378 <HAL_DAC_MspInit+0xf8>)
 80182f4:	4a21      	ldr	r2, [pc, #132]	; (801837c <HAL_DAC_MspInit+0xfc>)
 80182f6:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80182f8:	4b1f      	ldr	r3, [pc, #124]	; (8018378 <HAL_DAC_MspInit+0xf8>)
 80182fa:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80182fe:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8018300:	4b1d      	ldr	r3, [pc, #116]	; (8018378 <HAL_DAC_MspInit+0xf8>)
 8018302:	2240      	movs	r2, #64	; 0x40
 8018304:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8018306:	4b1c      	ldr	r3, [pc, #112]	; (8018378 <HAL_DAC_MspInit+0xf8>)
 8018308:	2200      	movs	r2, #0
 801830a:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 801830c:	4b1a      	ldr	r3, [pc, #104]	; (8018378 <HAL_DAC_MspInit+0xf8>)
 801830e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018312:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8018314:	4b18      	ldr	r3, [pc, #96]	; (8018378 <HAL_DAC_MspInit+0xf8>)
 8018316:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801831a:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801831c:	4b16      	ldr	r3, [pc, #88]	; (8018378 <HAL_DAC_MspInit+0xf8>)
 801831e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018322:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 8018324:	4b14      	ldr	r3, [pc, #80]	; (8018378 <HAL_DAC_MspInit+0xf8>)
 8018326:	2200      	movs	r2, #0
 8018328:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 801832a:	4b13      	ldr	r3, [pc, #76]	; (8018378 <HAL_DAC_MspInit+0xf8>)
 801832c:	2200      	movs	r2, #0
 801832e:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8018330:	4b11      	ldr	r3, [pc, #68]	; (8018378 <HAL_DAC_MspInit+0xf8>)
 8018332:	2200      	movs	r2, #0
 8018334:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8018336:	4810      	ldr	r0, [pc, #64]	; (8018378 <HAL_DAC_MspInit+0xf8>)
 8018338:	f000 fea0 	bl	801907c <HAL_DMA_Init>
 801833c:	4603      	mov	r3, r0
 801833e:	2b00      	cmp	r3, #0
 8018340:	d001      	beq.n	8018346 <HAL_DAC_MspInit+0xc6>
    {
      Error_Handler();
 8018342:	f7ff fec9 	bl	80180d8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	4a0b      	ldr	r2, [pc, #44]	; (8018378 <HAL_DAC_MspInit+0xf8>)
 801834a:	609a      	str	r2, [r3, #8]
 801834c:	4a0a      	ldr	r2, [pc, #40]	; (8018378 <HAL_DAC_MspInit+0xf8>)
 801834e:	687b      	ldr	r3, [r7, #4]
 8018350:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8018352:	2200      	movs	r2, #0
 8018354:	2100      	movs	r1, #0
 8018356:	2036      	movs	r0, #54	; 0x36
 8018358:	f000 fdc3 	bl	8018ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 801835c:	2036      	movs	r0, #54	; 0x36
 801835e:	f000 fddc 	bl	8018f1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8018362:	bf00      	nop
 8018364:	3728      	adds	r7, #40	; 0x28
 8018366:	46bd      	mov	sp, r7
 8018368:	bd80      	pop	{r7, pc}
 801836a:	bf00      	nop
 801836c:	40007400 	.word	0x40007400
 8018370:	40023800 	.word	0x40023800
 8018374:	40020000 	.word	0x40020000
 8018378:	20006a24 	.word	0x20006a24
 801837c:	40026088 	.word	0x40026088

08018380 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8018380:	b580      	push	{r7, lr}
 8018382:	b08c      	sub	sp, #48	; 0x30
 8018384:	af00      	add	r7, sp, #0
 8018386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018388:	f107 031c 	add.w	r3, r7, #28
 801838c:	2200      	movs	r2, #0
 801838e:	601a      	str	r2, [r3, #0]
 8018390:	605a      	str	r2, [r3, #4]
 8018392:	609a      	str	r2, [r3, #8]
 8018394:	60da      	str	r2, [r3, #12]
 8018396:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	681b      	ldr	r3, [r3, #0]
 801839c:	4a3a      	ldr	r2, [pc, #232]	; (8018488 <HAL_SPI_MspInit+0x108>)
 801839e:	4293      	cmp	r3, r2
 80183a0:	d135      	bne.n	801840e <HAL_SPI_MspInit+0x8e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80183a2:	2300      	movs	r3, #0
 80183a4:	61bb      	str	r3, [r7, #24]
 80183a6:	4b39      	ldr	r3, [pc, #228]	; (801848c <HAL_SPI_MspInit+0x10c>)
 80183a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183aa:	4a38      	ldr	r2, [pc, #224]	; (801848c <HAL_SPI_MspInit+0x10c>)
 80183ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80183b0:	6413      	str	r3, [r2, #64]	; 0x40
 80183b2:	4b36      	ldr	r3, [pc, #216]	; (801848c <HAL_SPI_MspInit+0x10c>)
 80183b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80183ba:	61bb      	str	r3, [r7, #24]
 80183bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80183be:	2300      	movs	r3, #0
 80183c0:	617b      	str	r3, [r7, #20]
 80183c2:	4b32      	ldr	r3, [pc, #200]	; (801848c <HAL_SPI_MspInit+0x10c>)
 80183c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80183c6:	4a31      	ldr	r2, [pc, #196]	; (801848c <HAL_SPI_MspInit+0x10c>)
 80183c8:	f043 0302 	orr.w	r3, r3, #2
 80183cc:	6313      	str	r3, [r2, #48]	; 0x30
 80183ce:	4b2f      	ldr	r3, [pc, #188]	; (801848c <HAL_SPI_MspInit+0x10c>)
 80183d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80183d2:	f003 0302 	and.w	r3, r3, #2
 80183d6:	617b      	str	r3, [r7, #20]
 80183d8:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|So_Pin|Si_Pin;
 80183da:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80183de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80183e0:	2302      	movs	r3, #2
 80183e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80183e4:	2300      	movs	r3, #0
 80183e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80183e8:	2303      	movs	r3, #3
 80183ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80183ec:	2305      	movs	r3, #5
 80183ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80183f0:	f107 031c 	add.w	r3, r7, #28
 80183f4:	4619      	mov	r1, r3
 80183f6:	4826      	ldr	r0, [pc, #152]	; (8018490 <HAL_SPI_MspInit+0x110>)
 80183f8:	f001 fc34 	bl	8019c64 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 1, 0);
 80183fc:	2200      	movs	r2, #0
 80183fe:	2101      	movs	r1, #1
 8018400:	2024      	movs	r0, #36	; 0x24
 8018402:	f000 fd6e 	bl	8018ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8018406:	2024      	movs	r0, #36	; 0x24
 8018408:	f000 fd87 	bl	8018f1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 801840c:	e038      	b.n	8018480 <HAL_SPI_MspInit+0x100>
  else if(hspi->Instance==SPI3)
 801840e:	687b      	ldr	r3, [r7, #4]
 8018410:	681b      	ldr	r3, [r3, #0]
 8018412:	4a20      	ldr	r2, [pc, #128]	; (8018494 <HAL_SPI_MspInit+0x114>)
 8018414:	4293      	cmp	r3, r2
 8018416:	d133      	bne.n	8018480 <HAL_SPI_MspInit+0x100>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8018418:	2300      	movs	r3, #0
 801841a:	613b      	str	r3, [r7, #16]
 801841c:	4b1b      	ldr	r3, [pc, #108]	; (801848c <HAL_SPI_MspInit+0x10c>)
 801841e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018420:	4a1a      	ldr	r2, [pc, #104]	; (801848c <HAL_SPI_MspInit+0x10c>)
 8018422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8018426:	6413      	str	r3, [r2, #64]	; 0x40
 8018428:	4b18      	ldr	r3, [pc, #96]	; (801848c <HAL_SPI_MspInit+0x10c>)
 801842a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801842c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8018430:	613b      	str	r3, [r7, #16]
 8018432:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8018434:	2300      	movs	r3, #0
 8018436:	60fb      	str	r3, [r7, #12]
 8018438:	4b14      	ldr	r3, [pc, #80]	; (801848c <HAL_SPI_MspInit+0x10c>)
 801843a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801843c:	4a13      	ldr	r2, [pc, #76]	; (801848c <HAL_SPI_MspInit+0x10c>)
 801843e:	f043 0302 	orr.w	r3, r3, #2
 8018442:	6313      	str	r3, [r2, #48]	; 0x30
 8018444:	4b11      	ldr	r3, [pc, #68]	; (801848c <HAL_SPI_MspInit+0x10c>)
 8018446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018448:	f003 0302 	and.w	r3, r3, #2
 801844c:	60fb      	str	r3, [r7, #12]
 801844e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TpCk_Pin|TpSo_Pin|TpSi_Pin;
 8018450:	2338      	movs	r3, #56	; 0x38
 8018452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018454:	2302      	movs	r3, #2
 8018456:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018458:	2300      	movs	r3, #0
 801845a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801845c:	2303      	movs	r3, #3
 801845e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8018460:	2306      	movs	r3, #6
 8018462:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8018464:	f107 031c 	add.w	r3, r7, #28
 8018468:	4619      	mov	r1, r3
 801846a:	4809      	ldr	r0, [pc, #36]	; (8018490 <HAL_SPI_MspInit+0x110>)
 801846c:	f001 fbfa 	bl	8019c64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 1, 0);
 8018470:	2200      	movs	r2, #0
 8018472:	2101      	movs	r1, #1
 8018474:	2033      	movs	r0, #51	; 0x33
 8018476:	f000 fd34 	bl	8018ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 801847a:	2033      	movs	r0, #51	; 0x33
 801847c:	f000 fd4d 	bl	8018f1a <HAL_NVIC_EnableIRQ>
}
 8018480:	bf00      	nop
 8018482:	3730      	adds	r7, #48	; 0x30
 8018484:	46bd      	mov	sp, r7
 8018486:	bd80      	pop	{r7, pc}
 8018488:	40003800 	.word	0x40003800
 801848c:	40023800 	.word	0x40023800
 8018490:	40020400 	.word	0x40020400
 8018494:	40003c00 	.word	0x40003c00

08018498 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8018498:	b580      	push	{r7, lr}
 801849a:	b086      	sub	sp, #24
 801849c:	af00      	add	r7, sp, #0
 801849e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	681b      	ldr	r3, [r3, #0]
 80184a4:	4a2c      	ldr	r2, [pc, #176]	; (8018558 <HAL_TIM_Base_MspInit+0xc0>)
 80184a6:	4293      	cmp	r3, r2
 80184a8:	d10e      	bne.n	80184c8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80184aa:	2300      	movs	r3, #0
 80184ac:	617b      	str	r3, [r7, #20]
 80184ae:	4b2b      	ldr	r3, [pc, #172]	; (801855c <HAL_TIM_Base_MspInit+0xc4>)
 80184b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80184b2:	4a2a      	ldr	r2, [pc, #168]	; (801855c <HAL_TIM_Base_MspInit+0xc4>)
 80184b4:	f043 0301 	orr.w	r3, r3, #1
 80184b8:	6453      	str	r3, [r2, #68]	; 0x44
 80184ba:	4b28      	ldr	r3, [pc, #160]	; (801855c <HAL_TIM_Base_MspInit+0xc4>)
 80184bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80184be:	f003 0301 	and.w	r3, r3, #1
 80184c2:	617b      	str	r3, [r7, #20]
 80184c4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80184c6:	e042      	b.n	801854e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	681b      	ldr	r3, [r3, #0]
 80184cc:	4a24      	ldr	r2, [pc, #144]	; (8018560 <HAL_TIM_Base_MspInit+0xc8>)
 80184ce:	4293      	cmp	r3, r2
 80184d0:	d116      	bne.n	8018500 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80184d2:	2300      	movs	r3, #0
 80184d4:	613b      	str	r3, [r7, #16]
 80184d6:	4b21      	ldr	r3, [pc, #132]	; (801855c <HAL_TIM_Base_MspInit+0xc4>)
 80184d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80184da:	4a20      	ldr	r2, [pc, #128]	; (801855c <HAL_TIM_Base_MspInit+0xc4>)
 80184dc:	f043 0302 	orr.w	r3, r3, #2
 80184e0:	6413      	str	r3, [r2, #64]	; 0x40
 80184e2:	4b1e      	ldr	r3, [pc, #120]	; (801855c <HAL_TIM_Base_MspInit+0xc4>)
 80184e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80184e6:	f003 0302 	and.w	r3, r3, #2
 80184ea:	613b      	str	r3, [r7, #16]
 80184ec:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80184ee:	2200      	movs	r2, #0
 80184f0:	2100      	movs	r1, #0
 80184f2:	201d      	movs	r0, #29
 80184f4:	f000 fcf5 	bl	8018ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80184f8:	201d      	movs	r0, #29
 80184fa:	f000 fd0e 	bl	8018f1a <HAL_NVIC_EnableIRQ>
}
 80184fe:	e026      	b.n	801854e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM5)
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	681b      	ldr	r3, [r3, #0]
 8018504:	4a17      	ldr	r2, [pc, #92]	; (8018564 <HAL_TIM_Base_MspInit+0xcc>)
 8018506:	4293      	cmp	r3, r2
 8018508:	d10e      	bne.n	8018528 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM5_CLK_ENABLE();
 801850a:	2300      	movs	r3, #0
 801850c:	60fb      	str	r3, [r7, #12]
 801850e:	4b13      	ldr	r3, [pc, #76]	; (801855c <HAL_TIM_Base_MspInit+0xc4>)
 8018510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018512:	4a12      	ldr	r2, [pc, #72]	; (801855c <HAL_TIM_Base_MspInit+0xc4>)
 8018514:	f043 0308 	orr.w	r3, r3, #8
 8018518:	6413      	str	r3, [r2, #64]	; 0x40
 801851a:	4b10      	ldr	r3, [pc, #64]	; (801855c <HAL_TIM_Base_MspInit+0xc4>)
 801851c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801851e:	f003 0308 	and.w	r3, r3, #8
 8018522:	60fb      	str	r3, [r7, #12]
 8018524:	68fb      	ldr	r3, [r7, #12]
}
 8018526:	e012      	b.n	801854e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM7)
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	681b      	ldr	r3, [r3, #0]
 801852c:	4a0e      	ldr	r2, [pc, #56]	; (8018568 <HAL_TIM_Base_MspInit+0xd0>)
 801852e:	4293      	cmp	r3, r2
 8018530:	d10d      	bne.n	801854e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8018532:	2300      	movs	r3, #0
 8018534:	60bb      	str	r3, [r7, #8]
 8018536:	4b09      	ldr	r3, [pc, #36]	; (801855c <HAL_TIM_Base_MspInit+0xc4>)
 8018538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801853a:	4a08      	ldr	r2, [pc, #32]	; (801855c <HAL_TIM_Base_MspInit+0xc4>)
 801853c:	f043 0320 	orr.w	r3, r3, #32
 8018540:	6413      	str	r3, [r2, #64]	; 0x40
 8018542:	4b06      	ldr	r3, [pc, #24]	; (801855c <HAL_TIM_Base_MspInit+0xc4>)
 8018544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018546:	f003 0320 	and.w	r3, r3, #32
 801854a:	60bb      	str	r3, [r7, #8]
 801854c:	68bb      	ldr	r3, [r7, #8]
}
 801854e:	bf00      	nop
 8018550:	3718      	adds	r7, #24
 8018552:	46bd      	mov	sp, r7
 8018554:	bd80      	pop	{r7, pc}
 8018556:	bf00      	nop
 8018558:	40010000 	.word	0x40010000
 801855c:	40023800 	.word	0x40023800
 8018560:	40000400 	.word	0x40000400
 8018564:	40000c00 	.word	0x40000c00
 8018568:	40001400 	.word	0x40001400

0801856c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801856c:	b480      	push	{r7}
 801856e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8018570:	e7fe      	b.n	8018570 <NMI_Handler+0x4>

08018572 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8018572:	b480      	push	{r7}
 8018574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8018576:	e7fe      	b.n	8018576 <HardFault_Handler+0x4>

08018578 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8018578:	b480      	push	{r7}
 801857a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 801857c:	e7fe      	b.n	801857c <MemManage_Handler+0x4>

0801857e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801857e:	b480      	push	{r7}
 8018580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8018582:	e7fe      	b.n	8018582 <BusFault_Handler+0x4>

08018584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8018584:	b480      	push	{r7}
 8018586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8018588:	e7fe      	b.n	8018588 <UsageFault_Handler+0x4>

0801858a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 801858a:	b480      	push	{r7}
 801858c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 801858e:	bf00      	nop
 8018590:	46bd      	mov	sp, r7
 8018592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018596:	4770      	bx	lr

08018598 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8018598:	b480      	push	{r7}
 801859a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801859c:	bf00      	nop
 801859e:	46bd      	mov	sp, r7
 80185a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185a4:	4770      	bx	lr

080185a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80185a6:	b480      	push	{r7}
 80185a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80185aa:	bf00      	nop
 80185ac:	46bd      	mov	sp, r7
 80185ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185b2:	4770      	bx	lr

080185b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80185b4:	b580      	push	{r7, lr}
 80185b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80185b8:	f000 f902 	bl	80187c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80185bc:	bf00      	nop
 80185be:	bd80      	pop	{r7, pc}

080185c0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80185c0:	b580      	push	{r7, lr}
 80185c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80185c4:	4802      	ldr	r0, [pc, #8]	; (80185d0 <DMA1_Stream5_IRQHandler+0x10>)
 80185c6:	f000 fe29 	bl	801921c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80185ca:	bf00      	nop
 80185cc:	bd80      	pop	{r7, pc}
 80185ce:	bf00      	nop
 80185d0:	20006a24 	.word	0x20006a24

080185d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80185d4:	b580      	push	{r7, lr}
 80185d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80185d8:	4802      	ldr	r0, [pc, #8]	; (80185e4 <TIM3_IRQHandler+0x10>)
 80185da:	f004 feff 	bl	801d3dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80185de:	bf00      	nop
 80185e0:	bd80      	pop	{r7, pc}
 80185e2:	bf00      	nop
 80185e4:	20006984 	.word	0x20006984

080185e8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80185e8:	b580      	push	{r7, lr}
 80185ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80185ec:	4802      	ldr	r0, [pc, #8]	; (80185f8 <SPI2_IRQHandler+0x10>)
 80185ee:	f004 fbd9 	bl	801cda4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80185f2:	bf00      	nop
 80185f4:	bd80      	pop	{r7, pc}
 80185f6:	bf00      	nop
 80185f8:	2000689c 	.word	0x2000689c

080185fc <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80185fc:	b580      	push	{r7, lr}
 80185fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8018600:	4802      	ldr	r0, [pc, #8]	; (801860c <SPI3_IRQHandler+0x10>)
 8018602:	f004 fbcf 	bl	801cda4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8018606:	bf00      	nop
 8018608:	bd80      	pop	{r7, pc}
 801860a:	bf00      	nop
 801860c:	200069cc 	.word	0x200069cc

08018610 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8018610:	b580      	push	{r7, lr}
 8018612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8018614:	4802      	ldr	r0, [pc, #8]	; (8018620 <DMA2_Stream0_IRQHandler+0x10>)
 8018616:	f000 fe01 	bl	801921c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 801861a:	bf00      	nop
 801861c:	bd80      	pop	{r7, pc}
 801861e:	bf00      	nop
 8018620:	20006b18 	.word	0x20006b18

08018624 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8018624:	b580      	push	{r7, lr}
 8018626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8018628:	4802      	ldr	r0, [pc, #8]	; (8018634 <OTG_FS_IRQHandler+0x10>)
 801862a:	f001 fe37 	bl	801a29c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 801862e:	bf00      	nop
 8018630:	bd80      	pop	{r7, pc}
 8018632:	bf00      	nop
 8018634:	20007118 	.word	0x20007118

08018638 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8018638:	b580      	push	{r7, lr}
 801863a:	b086      	sub	sp, #24
 801863c:	af00      	add	r7, sp, #0
 801863e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8018640:	4a14      	ldr	r2, [pc, #80]	; (8018694 <_sbrk+0x5c>)
 8018642:	4b15      	ldr	r3, [pc, #84]	; (8018698 <_sbrk+0x60>)
 8018644:	1ad3      	subs	r3, r2, r3
 8018646:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8018648:	697b      	ldr	r3, [r7, #20]
 801864a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 801864c:	4b13      	ldr	r3, [pc, #76]	; (801869c <_sbrk+0x64>)
 801864e:	681b      	ldr	r3, [r3, #0]
 8018650:	2b00      	cmp	r3, #0
 8018652:	d102      	bne.n	801865a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8018654:	4b11      	ldr	r3, [pc, #68]	; (801869c <_sbrk+0x64>)
 8018656:	4a12      	ldr	r2, [pc, #72]	; (80186a0 <_sbrk+0x68>)
 8018658:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801865a:	4b10      	ldr	r3, [pc, #64]	; (801869c <_sbrk+0x64>)
 801865c:	681a      	ldr	r2, [r3, #0]
 801865e:	687b      	ldr	r3, [r7, #4]
 8018660:	4413      	add	r3, r2
 8018662:	693a      	ldr	r2, [r7, #16]
 8018664:	429a      	cmp	r2, r3
 8018666:	d207      	bcs.n	8018678 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8018668:	f00a fcb6 	bl	8022fd8 <__errno>
 801866c:	4603      	mov	r3, r0
 801866e:	220c      	movs	r2, #12
 8018670:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8018672:	f04f 33ff 	mov.w	r3, #4294967295
 8018676:	e009      	b.n	801868c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8018678:	4b08      	ldr	r3, [pc, #32]	; (801869c <_sbrk+0x64>)
 801867a:	681b      	ldr	r3, [r3, #0]
 801867c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801867e:	4b07      	ldr	r3, [pc, #28]	; (801869c <_sbrk+0x64>)
 8018680:	681a      	ldr	r2, [r3, #0]
 8018682:	687b      	ldr	r3, [r7, #4]
 8018684:	4413      	add	r3, r2
 8018686:	4a05      	ldr	r2, [pc, #20]	; (801869c <_sbrk+0x64>)
 8018688:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801868a:	68fb      	ldr	r3, [r7, #12]
}
 801868c:	4618      	mov	r0, r3
 801868e:	3718      	adds	r7, #24
 8018690:	46bd      	mov	sp, r7
 8018692:	bd80      	pop	{r7, pc}
 8018694:	20020000 	.word	0x20020000
 8018698:	00001000 	.word	0x00001000
 801869c:	200007b0 	.word	0x200007b0
 80186a0:	20007530 	.word	0x20007530

080186a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80186a4:	b480      	push	{r7}
 80186a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80186a8:	4b06      	ldr	r3, [pc, #24]	; (80186c4 <SystemInit+0x20>)
 80186aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80186ae:	4a05      	ldr	r2, [pc, #20]	; (80186c4 <SystemInit+0x20>)
 80186b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80186b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80186b8:	bf00      	nop
 80186ba:	46bd      	mov	sp, r7
 80186bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186c0:	4770      	bx	lr
 80186c2:	bf00      	nop
 80186c4:	e000ed00 	.word	0xe000ed00

080186c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80186c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8018700 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80186cc:	480d      	ldr	r0, [pc, #52]	; (8018704 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80186ce:	490e      	ldr	r1, [pc, #56]	; (8018708 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80186d0:	4a0e      	ldr	r2, [pc, #56]	; (801870c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80186d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80186d4:	e002      	b.n	80186dc <LoopCopyDataInit>

080186d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80186d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80186d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80186da:	3304      	adds	r3, #4

080186dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80186dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80186de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80186e0:	d3f9      	bcc.n	80186d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80186e2:	4a0b      	ldr	r2, [pc, #44]	; (8018710 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80186e4:	4c0b      	ldr	r4, [pc, #44]	; (8018714 <LoopFillZerobss+0x26>)
  movs r3, #0
 80186e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80186e8:	e001      	b.n	80186ee <LoopFillZerobss>

080186ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80186ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80186ec:	3204      	adds	r2, #4

080186ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80186ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80186f0:	d3fb      	bcc.n	80186ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80186f2:	f7ff ffd7 	bl	80186a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80186f6:	f00a fc75 	bl	8022fe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80186fa:	f7fe f81f 	bl	801673c <main>
  bx  lr    
 80186fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8018700:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8018704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8018708:	20000760 	.word	0x20000760
  ldr r2, =_sidata
 801870c:	08023230 	.word	0x08023230
  ldr r2, =_sbss
 8018710:	20000760 	.word	0x20000760
  ldr r4, =_ebss
 8018714:	20007530 	.word	0x20007530

08018718 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8018718:	e7fe      	b.n	8018718 <ADC_IRQHandler>
	...

0801871c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801871c:	b580      	push	{r7, lr}
 801871e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8018720:	4b0e      	ldr	r3, [pc, #56]	; (801875c <HAL_Init+0x40>)
 8018722:	681b      	ldr	r3, [r3, #0]
 8018724:	4a0d      	ldr	r2, [pc, #52]	; (801875c <HAL_Init+0x40>)
 8018726:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801872a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 801872c:	4b0b      	ldr	r3, [pc, #44]	; (801875c <HAL_Init+0x40>)
 801872e:	681b      	ldr	r3, [r3, #0]
 8018730:	4a0a      	ldr	r2, [pc, #40]	; (801875c <HAL_Init+0x40>)
 8018732:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8018736:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8018738:	4b08      	ldr	r3, [pc, #32]	; (801875c <HAL_Init+0x40>)
 801873a:	681b      	ldr	r3, [r3, #0]
 801873c:	4a07      	ldr	r2, [pc, #28]	; (801875c <HAL_Init+0x40>)
 801873e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8018742:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8018744:	2003      	movs	r0, #3
 8018746:	f000 fbc1 	bl	8018ecc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801874a:	2000      	movs	r0, #0
 801874c:	f000 f808 	bl	8018760 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8018750:	f7ff fcc8 	bl	80180e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8018754:	2300      	movs	r3, #0
}
 8018756:	4618      	mov	r0, r3
 8018758:	bd80      	pop	{r7, pc}
 801875a:	bf00      	nop
 801875c:	40023c00 	.word	0x40023c00

08018760 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8018760:	b580      	push	{r7, lr}
 8018762:	b082      	sub	sp, #8
 8018764:	af00      	add	r7, sp, #0
 8018766:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8018768:	4b12      	ldr	r3, [pc, #72]	; (80187b4 <HAL_InitTick+0x54>)
 801876a:	681a      	ldr	r2, [r3, #0]
 801876c:	4b12      	ldr	r3, [pc, #72]	; (80187b8 <HAL_InitTick+0x58>)
 801876e:	781b      	ldrb	r3, [r3, #0]
 8018770:	4619      	mov	r1, r3
 8018772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018776:	fbb3 f3f1 	udiv	r3, r3, r1
 801877a:	fbb2 f3f3 	udiv	r3, r2, r3
 801877e:	4618      	mov	r0, r3
 8018780:	f000 fbd9 	bl	8018f36 <HAL_SYSTICK_Config>
 8018784:	4603      	mov	r3, r0
 8018786:	2b00      	cmp	r3, #0
 8018788:	d001      	beq.n	801878e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 801878a:	2301      	movs	r3, #1
 801878c:	e00e      	b.n	80187ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	2b0f      	cmp	r3, #15
 8018792:	d80a      	bhi.n	80187aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8018794:	2200      	movs	r2, #0
 8018796:	6879      	ldr	r1, [r7, #4]
 8018798:	f04f 30ff 	mov.w	r0, #4294967295
 801879c:	f000 fba1 	bl	8018ee2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80187a0:	4a06      	ldr	r2, [pc, #24]	; (80187bc <HAL_InitTick+0x5c>)
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80187a6:	2300      	movs	r3, #0
 80187a8:	e000      	b.n	80187ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80187aa:	2301      	movs	r3, #1
}
 80187ac:	4618      	mov	r0, r3
 80187ae:	3708      	adds	r7, #8
 80187b0:	46bd      	mov	sp, r7
 80187b2:	bd80      	pop	{r7, pc}
 80187b4:	20000588 	.word	0x20000588
 80187b8:	20000590 	.word	0x20000590
 80187bc:	2000058c 	.word	0x2000058c

080187c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80187c0:	b480      	push	{r7}
 80187c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80187c4:	4b06      	ldr	r3, [pc, #24]	; (80187e0 <HAL_IncTick+0x20>)
 80187c6:	781b      	ldrb	r3, [r3, #0]
 80187c8:	461a      	mov	r2, r3
 80187ca:	4b06      	ldr	r3, [pc, #24]	; (80187e4 <HAL_IncTick+0x24>)
 80187cc:	681b      	ldr	r3, [r3, #0]
 80187ce:	4413      	add	r3, r2
 80187d0:	4a04      	ldr	r2, [pc, #16]	; (80187e4 <HAL_IncTick+0x24>)
 80187d2:	6013      	str	r3, [r2, #0]
}
 80187d4:	bf00      	nop
 80187d6:	46bd      	mov	sp, r7
 80187d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187dc:	4770      	bx	lr
 80187de:	bf00      	nop
 80187e0:	20000590 	.word	0x20000590
 80187e4:	20006c24 	.word	0x20006c24

080187e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80187e8:	b480      	push	{r7}
 80187ea:	af00      	add	r7, sp, #0
  return uwTick;
 80187ec:	4b03      	ldr	r3, [pc, #12]	; (80187fc <HAL_GetTick+0x14>)
 80187ee:	681b      	ldr	r3, [r3, #0]
}
 80187f0:	4618      	mov	r0, r3
 80187f2:	46bd      	mov	sp, r7
 80187f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187f8:	4770      	bx	lr
 80187fa:	bf00      	nop
 80187fc:	20006c24 	.word	0x20006c24

08018800 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8018800:	b580      	push	{r7, lr}
 8018802:	b084      	sub	sp, #16
 8018804:	af00      	add	r7, sp, #0
 8018806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8018808:	f7ff ffee 	bl	80187e8 <HAL_GetTick>
 801880c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801880e:	687b      	ldr	r3, [r7, #4]
 8018810:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8018812:	68fb      	ldr	r3, [r7, #12]
 8018814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018818:	d005      	beq.n	8018826 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801881a:	4b0a      	ldr	r3, [pc, #40]	; (8018844 <HAL_Delay+0x44>)
 801881c:	781b      	ldrb	r3, [r3, #0]
 801881e:	461a      	mov	r2, r3
 8018820:	68fb      	ldr	r3, [r7, #12]
 8018822:	4413      	add	r3, r2
 8018824:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8018826:	bf00      	nop
 8018828:	f7ff ffde 	bl	80187e8 <HAL_GetTick>
 801882c:	4602      	mov	r2, r0
 801882e:	68bb      	ldr	r3, [r7, #8]
 8018830:	1ad3      	subs	r3, r2, r3
 8018832:	68fa      	ldr	r2, [r7, #12]
 8018834:	429a      	cmp	r2, r3
 8018836:	d8f7      	bhi.n	8018828 <HAL_Delay+0x28>
  {
  }
}
 8018838:	bf00      	nop
 801883a:	bf00      	nop
 801883c:	3710      	adds	r7, #16
 801883e:	46bd      	mov	sp, r7
 8018840:	bd80      	pop	{r7, pc}
 8018842:	bf00      	nop
 8018844:	20000590 	.word	0x20000590

08018848 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8018848:	b580      	push	{r7, lr}
 801884a:	b084      	sub	sp, #16
 801884c:	af00      	add	r7, sp, #0
 801884e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8018850:	2300      	movs	r3, #0
 8018852:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	2b00      	cmp	r3, #0
 8018858:	d101      	bne.n	801885e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 801885a:	2301      	movs	r3, #1
 801885c:	e033      	b.n	80188c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 801885e:	687b      	ldr	r3, [r7, #4]
 8018860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018862:	2b00      	cmp	r3, #0
 8018864:	d109      	bne.n	801887a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8018866:	6878      	ldr	r0, [r7, #4]
 8018868:	f7ff fc64 	bl	8018134 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	2200      	movs	r2, #0
 8018870:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8018872:	687b      	ldr	r3, [r7, #4]
 8018874:	2200      	movs	r2, #0
 8018876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801887e:	f003 0310 	and.w	r3, r3, #16
 8018882:	2b00      	cmp	r3, #0
 8018884:	d118      	bne.n	80188b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801888a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801888e:	f023 0302 	bic.w	r3, r3, #2
 8018892:	f043 0202 	orr.w	r2, r3, #2
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 801889a:	6878      	ldr	r0, [r7, #4]
 801889c:	f000 f94a 	bl	8018b34 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	2200      	movs	r2, #0
 80188a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80188aa:	f023 0303 	bic.w	r3, r3, #3
 80188ae:	f043 0201 	orr.w	r2, r3, #1
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	641a      	str	r2, [r3, #64]	; 0x40
 80188b6:	e001      	b.n	80188bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80188b8:	2301      	movs	r3, #1
 80188ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	2200      	movs	r2, #0
 80188c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80188c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80188c6:	4618      	mov	r0, r3
 80188c8:	3710      	adds	r7, #16
 80188ca:	46bd      	mov	sp, r7
 80188cc:	bd80      	pop	{r7, pc}
	...

080188d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80188d0:	b480      	push	{r7}
 80188d2:	b085      	sub	sp, #20
 80188d4:	af00      	add	r7, sp, #0
 80188d6:	6078      	str	r0, [r7, #4]
 80188d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80188da:	2300      	movs	r3, #0
 80188dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80188e4:	2b01      	cmp	r3, #1
 80188e6:	d101      	bne.n	80188ec <HAL_ADC_ConfigChannel+0x1c>
 80188e8:	2302      	movs	r3, #2
 80188ea:	e113      	b.n	8018b14 <HAL_ADC_ConfigChannel+0x244>
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	2201      	movs	r2, #1
 80188f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80188f4:	683b      	ldr	r3, [r7, #0]
 80188f6:	681b      	ldr	r3, [r3, #0]
 80188f8:	2b09      	cmp	r3, #9
 80188fa:	d925      	bls.n	8018948 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80188fc:	687b      	ldr	r3, [r7, #4]
 80188fe:	681b      	ldr	r3, [r3, #0]
 8018900:	68d9      	ldr	r1, [r3, #12]
 8018902:	683b      	ldr	r3, [r7, #0]
 8018904:	681b      	ldr	r3, [r3, #0]
 8018906:	b29b      	uxth	r3, r3
 8018908:	461a      	mov	r2, r3
 801890a:	4613      	mov	r3, r2
 801890c:	005b      	lsls	r3, r3, #1
 801890e:	4413      	add	r3, r2
 8018910:	3b1e      	subs	r3, #30
 8018912:	2207      	movs	r2, #7
 8018914:	fa02 f303 	lsl.w	r3, r2, r3
 8018918:	43da      	mvns	r2, r3
 801891a:	687b      	ldr	r3, [r7, #4]
 801891c:	681b      	ldr	r3, [r3, #0]
 801891e:	400a      	ands	r2, r1
 8018920:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	681b      	ldr	r3, [r3, #0]
 8018926:	68d9      	ldr	r1, [r3, #12]
 8018928:	683b      	ldr	r3, [r7, #0]
 801892a:	689a      	ldr	r2, [r3, #8]
 801892c:	683b      	ldr	r3, [r7, #0]
 801892e:	681b      	ldr	r3, [r3, #0]
 8018930:	b29b      	uxth	r3, r3
 8018932:	4618      	mov	r0, r3
 8018934:	4603      	mov	r3, r0
 8018936:	005b      	lsls	r3, r3, #1
 8018938:	4403      	add	r3, r0
 801893a:	3b1e      	subs	r3, #30
 801893c:	409a      	lsls	r2, r3
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	681b      	ldr	r3, [r3, #0]
 8018942:	430a      	orrs	r2, r1
 8018944:	60da      	str	r2, [r3, #12]
 8018946:	e022      	b.n	801898e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	681b      	ldr	r3, [r3, #0]
 801894c:	6919      	ldr	r1, [r3, #16]
 801894e:	683b      	ldr	r3, [r7, #0]
 8018950:	681b      	ldr	r3, [r3, #0]
 8018952:	b29b      	uxth	r3, r3
 8018954:	461a      	mov	r2, r3
 8018956:	4613      	mov	r3, r2
 8018958:	005b      	lsls	r3, r3, #1
 801895a:	4413      	add	r3, r2
 801895c:	2207      	movs	r2, #7
 801895e:	fa02 f303 	lsl.w	r3, r2, r3
 8018962:	43da      	mvns	r2, r3
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	681b      	ldr	r3, [r3, #0]
 8018968:	400a      	ands	r2, r1
 801896a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	681b      	ldr	r3, [r3, #0]
 8018970:	6919      	ldr	r1, [r3, #16]
 8018972:	683b      	ldr	r3, [r7, #0]
 8018974:	689a      	ldr	r2, [r3, #8]
 8018976:	683b      	ldr	r3, [r7, #0]
 8018978:	681b      	ldr	r3, [r3, #0]
 801897a:	b29b      	uxth	r3, r3
 801897c:	4618      	mov	r0, r3
 801897e:	4603      	mov	r3, r0
 8018980:	005b      	lsls	r3, r3, #1
 8018982:	4403      	add	r3, r0
 8018984:	409a      	lsls	r2, r3
 8018986:	687b      	ldr	r3, [r7, #4]
 8018988:	681b      	ldr	r3, [r3, #0]
 801898a:	430a      	orrs	r2, r1
 801898c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 801898e:	683b      	ldr	r3, [r7, #0]
 8018990:	685b      	ldr	r3, [r3, #4]
 8018992:	2b06      	cmp	r3, #6
 8018994:	d824      	bhi.n	80189e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	681b      	ldr	r3, [r3, #0]
 801899a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801899c:	683b      	ldr	r3, [r7, #0]
 801899e:	685a      	ldr	r2, [r3, #4]
 80189a0:	4613      	mov	r3, r2
 80189a2:	009b      	lsls	r3, r3, #2
 80189a4:	4413      	add	r3, r2
 80189a6:	3b05      	subs	r3, #5
 80189a8:	221f      	movs	r2, #31
 80189aa:	fa02 f303 	lsl.w	r3, r2, r3
 80189ae:	43da      	mvns	r2, r3
 80189b0:	687b      	ldr	r3, [r7, #4]
 80189b2:	681b      	ldr	r3, [r3, #0]
 80189b4:	400a      	ands	r2, r1
 80189b6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80189b8:	687b      	ldr	r3, [r7, #4]
 80189ba:	681b      	ldr	r3, [r3, #0]
 80189bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80189be:	683b      	ldr	r3, [r7, #0]
 80189c0:	681b      	ldr	r3, [r3, #0]
 80189c2:	b29b      	uxth	r3, r3
 80189c4:	4618      	mov	r0, r3
 80189c6:	683b      	ldr	r3, [r7, #0]
 80189c8:	685a      	ldr	r2, [r3, #4]
 80189ca:	4613      	mov	r3, r2
 80189cc:	009b      	lsls	r3, r3, #2
 80189ce:	4413      	add	r3, r2
 80189d0:	3b05      	subs	r3, #5
 80189d2:	fa00 f203 	lsl.w	r2, r0, r3
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	681b      	ldr	r3, [r3, #0]
 80189da:	430a      	orrs	r2, r1
 80189dc:	635a      	str	r2, [r3, #52]	; 0x34
 80189de:	e04c      	b.n	8018a7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80189e0:	683b      	ldr	r3, [r7, #0]
 80189e2:	685b      	ldr	r3, [r3, #4]
 80189e4:	2b0c      	cmp	r3, #12
 80189e6:	d824      	bhi.n	8018a32 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	681b      	ldr	r3, [r3, #0]
 80189ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80189ee:	683b      	ldr	r3, [r7, #0]
 80189f0:	685a      	ldr	r2, [r3, #4]
 80189f2:	4613      	mov	r3, r2
 80189f4:	009b      	lsls	r3, r3, #2
 80189f6:	4413      	add	r3, r2
 80189f8:	3b23      	subs	r3, #35	; 0x23
 80189fa:	221f      	movs	r2, #31
 80189fc:	fa02 f303 	lsl.w	r3, r2, r3
 8018a00:	43da      	mvns	r2, r3
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	681b      	ldr	r3, [r3, #0]
 8018a06:	400a      	ands	r2, r1
 8018a08:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	681b      	ldr	r3, [r3, #0]
 8018a0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8018a10:	683b      	ldr	r3, [r7, #0]
 8018a12:	681b      	ldr	r3, [r3, #0]
 8018a14:	b29b      	uxth	r3, r3
 8018a16:	4618      	mov	r0, r3
 8018a18:	683b      	ldr	r3, [r7, #0]
 8018a1a:	685a      	ldr	r2, [r3, #4]
 8018a1c:	4613      	mov	r3, r2
 8018a1e:	009b      	lsls	r3, r3, #2
 8018a20:	4413      	add	r3, r2
 8018a22:	3b23      	subs	r3, #35	; 0x23
 8018a24:	fa00 f203 	lsl.w	r2, r0, r3
 8018a28:	687b      	ldr	r3, [r7, #4]
 8018a2a:	681b      	ldr	r3, [r3, #0]
 8018a2c:	430a      	orrs	r2, r1
 8018a2e:	631a      	str	r2, [r3, #48]	; 0x30
 8018a30:	e023      	b.n	8018a7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8018a32:	687b      	ldr	r3, [r7, #4]
 8018a34:	681b      	ldr	r3, [r3, #0]
 8018a36:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8018a38:	683b      	ldr	r3, [r7, #0]
 8018a3a:	685a      	ldr	r2, [r3, #4]
 8018a3c:	4613      	mov	r3, r2
 8018a3e:	009b      	lsls	r3, r3, #2
 8018a40:	4413      	add	r3, r2
 8018a42:	3b41      	subs	r3, #65	; 0x41
 8018a44:	221f      	movs	r2, #31
 8018a46:	fa02 f303 	lsl.w	r3, r2, r3
 8018a4a:	43da      	mvns	r2, r3
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	681b      	ldr	r3, [r3, #0]
 8018a50:	400a      	ands	r2, r1
 8018a52:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	681b      	ldr	r3, [r3, #0]
 8018a58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8018a5a:	683b      	ldr	r3, [r7, #0]
 8018a5c:	681b      	ldr	r3, [r3, #0]
 8018a5e:	b29b      	uxth	r3, r3
 8018a60:	4618      	mov	r0, r3
 8018a62:	683b      	ldr	r3, [r7, #0]
 8018a64:	685a      	ldr	r2, [r3, #4]
 8018a66:	4613      	mov	r3, r2
 8018a68:	009b      	lsls	r3, r3, #2
 8018a6a:	4413      	add	r3, r2
 8018a6c:	3b41      	subs	r3, #65	; 0x41
 8018a6e:	fa00 f203 	lsl.w	r2, r0, r3
 8018a72:	687b      	ldr	r3, [r7, #4]
 8018a74:	681b      	ldr	r3, [r3, #0]
 8018a76:	430a      	orrs	r2, r1
 8018a78:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8018a7a:	4b29      	ldr	r3, [pc, #164]	; (8018b20 <HAL_ADC_ConfigChannel+0x250>)
 8018a7c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	681b      	ldr	r3, [r3, #0]
 8018a82:	4a28      	ldr	r2, [pc, #160]	; (8018b24 <HAL_ADC_ConfigChannel+0x254>)
 8018a84:	4293      	cmp	r3, r2
 8018a86:	d10f      	bne.n	8018aa8 <HAL_ADC_ConfigChannel+0x1d8>
 8018a88:	683b      	ldr	r3, [r7, #0]
 8018a8a:	681b      	ldr	r3, [r3, #0]
 8018a8c:	2b12      	cmp	r3, #18
 8018a8e:	d10b      	bne.n	8018aa8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8018a90:	68fb      	ldr	r3, [r7, #12]
 8018a92:	685b      	ldr	r3, [r3, #4]
 8018a94:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8018a98:	68fb      	ldr	r3, [r7, #12]
 8018a9a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8018a9c:	68fb      	ldr	r3, [r7, #12]
 8018a9e:	685b      	ldr	r3, [r3, #4]
 8018aa0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8018aa4:	68fb      	ldr	r3, [r7, #12]
 8018aa6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8018aa8:	687b      	ldr	r3, [r7, #4]
 8018aaa:	681b      	ldr	r3, [r3, #0]
 8018aac:	4a1d      	ldr	r2, [pc, #116]	; (8018b24 <HAL_ADC_ConfigChannel+0x254>)
 8018aae:	4293      	cmp	r3, r2
 8018ab0:	d12b      	bne.n	8018b0a <HAL_ADC_ConfigChannel+0x23a>
 8018ab2:	683b      	ldr	r3, [r7, #0]
 8018ab4:	681b      	ldr	r3, [r3, #0]
 8018ab6:	4a1c      	ldr	r2, [pc, #112]	; (8018b28 <HAL_ADC_ConfigChannel+0x258>)
 8018ab8:	4293      	cmp	r3, r2
 8018aba:	d003      	beq.n	8018ac4 <HAL_ADC_ConfigChannel+0x1f4>
 8018abc:	683b      	ldr	r3, [r7, #0]
 8018abe:	681b      	ldr	r3, [r3, #0]
 8018ac0:	2b11      	cmp	r3, #17
 8018ac2:	d122      	bne.n	8018b0a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8018ac4:	68fb      	ldr	r3, [r7, #12]
 8018ac6:	685b      	ldr	r3, [r3, #4]
 8018ac8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8018acc:	68fb      	ldr	r3, [r7, #12]
 8018ace:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8018ad0:	68fb      	ldr	r3, [r7, #12]
 8018ad2:	685b      	ldr	r3, [r3, #4]
 8018ad4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8018ad8:	68fb      	ldr	r3, [r7, #12]
 8018ada:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8018adc:	683b      	ldr	r3, [r7, #0]
 8018ade:	681b      	ldr	r3, [r3, #0]
 8018ae0:	4a11      	ldr	r2, [pc, #68]	; (8018b28 <HAL_ADC_ConfigChannel+0x258>)
 8018ae2:	4293      	cmp	r3, r2
 8018ae4:	d111      	bne.n	8018b0a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8018ae6:	4b11      	ldr	r3, [pc, #68]	; (8018b2c <HAL_ADC_ConfigChannel+0x25c>)
 8018ae8:	681b      	ldr	r3, [r3, #0]
 8018aea:	4a11      	ldr	r2, [pc, #68]	; (8018b30 <HAL_ADC_ConfigChannel+0x260>)
 8018aec:	fba2 2303 	umull	r2, r3, r2, r3
 8018af0:	0c9a      	lsrs	r2, r3, #18
 8018af2:	4613      	mov	r3, r2
 8018af4:	009b      	lsls	r3, r3, #2
 8018af6:	4413      	add	r3, r2
 8018af8:	005b      	lsls	r3, r3, #1
 8018afa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8018afc:	e002      	b.n	8018b04 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8018afe:	68bb      	ldr	r3, [r7, #8]
 8018b00:	3b01      	subs	r3, #1
 8018b02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8018b04:	68bb      	ldr	r3, [r7, #8]
 8018b06:	2b00      	cmp	r3, #0
 8018b08:	d1f9      	bne.n	8018afe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	2200      	movs	r2, #0
 8018b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8018b12:	2300      	movs	r3, #0
}
 8018b14:	4618      	mov	r0, r3
 8018b16:	3714      	adds	r7, #20
 8018b18:	46bd      	mov	sp, r7
 8018b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b1e:	4770      	bx	lr
 8018b20:	40012300 	.word	0x40012300
 8018b24:	40012000 	.word	0x40012000
 8018b28:	10000012 	.word	0x10000012
 8018b2c:	20000588 	.word	0x20000588
 8018b30:	431bde83 	.word	0x431bde83

08018b34 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8018b34:	b480      	push	{r7}
 8018b36:	b085      	sub	sp, #20
 8018b38:	af00      	add	r7, sp, #0
 8018b3a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8018b3c:	4b79      	ldr	r3, [pc, #484]	; (8018d24 <ADC_Init+0x1f0>)
 8018b3e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8018b40:	68fb      	ldr	r3, [r7, #12]
 8018b42:	685b      	ldr	r3, [r3, #4]
 8018b44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8018b48:	68fb      	ldr	r3, [r7, #12]
 8018b4a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8018b4c:	68fb      	ldr	r3, [r7, #12]
 8018b4e:	685a      	ldr	r2, [r3, #4]
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	685b      	ldr	r3, [r3, #4]
 8018b54:	431a      	orrs	r2, r3
 8018b56:	68fb      	ldr	r3, [r7, #12]
 8018b58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8018b5a:	687b      	ldr	r3, [r7, #4]
 8018b5c:	681b      	ldr	r3, [r3, #0]
 8018b5e:	685a      	ldr	r2, [r3, #4]
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	681b      	ldr	r3, [r3, #0]
 8018b64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8018b68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	681b      	ldr	r3, [r3, #0]
 8018b6e:	6859      	ldr	r1, [r3, #4]
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	691b      	ldr	r3, [r3, #16]
 8018b74:	021a      	lsls	r2, r3, #8
 8018b76:	687b      	ldr	r3, [r7, #4]
 8018b78:	681b      	ldr	r3, [r3, #0]
 8018b7a:	430a      	orrs	r2, r1
 8018b7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	681b      	ldr	r3, [r3, #0]
 8018b82:	685a      	ldr	r2, [r3, #4]
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	681b      	ldr	r3, [r3, #0]
 8018b88:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8018b8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	681b      	ldr	r3, [r3, #0]
 8018b92:	6859      	ldr	r1, [r3, #4]
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	689a      	ldr	r2, [r3, #8]
 8018b98:	687b      	ldr	r3, [r7, #4]
 8018b9a:	681b      	ldr	r3, [r3, #0]
 8018b9c:	430a      	orrs	r2, r1
 8018b9e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8018ba0:	687b      	ldr	r3, [r7, #4]
 8018ba2:	681b      	ldr	r3, [r3, #0]
 8018ba4:	689a      	ldr	r2, [r3, #8]
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	681b      	ldr	r3, [r3, #0]
 8018baa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8018bae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	681b      	ldr	r3, [r3, #0]
 8018bb4:	6899      	ldr	r1, [r3, #8]
 8018bb6:	687b      	ldr	r3, [r7, #4]
 8018bb8:	68da      	ldr	r2, [r3, #12]
 8018bba:	687b      	ldr	r3, [r7, #4]
 8018bbc:	681b      	ldr	r3, [r3, #0]
 8018bbe:	430a      	orrs	r2, r1
 8018bc0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018bc6:	4a58      	ldr	r2, [pc, #352]	; (8018d28 <ADC_Init+0x1f4>)
 8018bc8:	4293      	cmp	r3, r2
 8018bca:	d022      	beq.n	8018c12 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8018bcc:	687b      	ldr	r3, [r7, #4]
 8018bce:	681b      	ldr	r3, [r3, #0]
 8018bd0:	689a      	ldr	r2, [r3, #8]
 8018bd2:	687b      	ldr	r3, [r7, #4]
 8018bd4:	681b      	ldr	r3, [r3, #0]
 8018bd6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8018bda:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	681b      	ldr	r3, [r3, #0]
 8018be0:	6899      	ldr	r1, [r3, #8]
 8018be2:	687b      	ldr	r3, [r7, #4]
 8018be4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	681b      	ldr	r3, [r3, #0]
 8018bea:	430a      	orrs	r2, r1
 8018bec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8018bee:	687b      	ldr	r3, [r7, #4]
 8018bf0:	681b      	ldr	r3, [r3, #0]
 8018bf2:	689a      	ldr	r2, [r3, #8]
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	681b      	ldr	r3, [r3, #0]
 8018bf8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8018bfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8018bfe:	687b      	ldr	r3, [r7, #4]
 8018c00:	681b      	ldr	r3, [r3, #0]
 8018c02:	6899      	ldr	r1, [r3, #8]
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	681b      	ldr	r3, [r3, #0]
 8018c0c:	430a      	orrs	r2, r1
 8018c0e:	609a      	str	r2, [r3, #8]
 8018c10:	e00f      	b.n	8018c32 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8018c12:	687b      	ldr	r3, [r7, #4]
 8018c14:	681b      	ldr	r3, [r3, #0]
 8018c16:	689a      	ldr	r2, [r3, #8]
 8018c18:	687b      	ldr	r3, [r7, #4]
 8018c1a:	681b      	ldr	r3, [r3, #0]
 8018c1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8018c20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8018c22:	687b      	ldr	r3, [r7, #4]
 8018c24:	681b      	ldr	r3, [r3, #0]
 8018c26:	689a      	ldr	r2, [r3, #8]
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	681b      	ldr	r3, [r3, #0]
 8018c2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8018c30:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8018c32:	687b      	ldr	r3, [r7, #4]
 8018c34:	681b      	ldr	r3, [r3, #0]
 8018c36:	689a      	ldr	r2, [r3, #8]
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	681b      	ldr	r3, [r3, #0]
 8018c3c:	f022 0202 	bic.w	r2, r2, #2
 8018c40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	681b      	ldr	r3, [r3, #0]
 8018c46:	6899      	ldr	r1, [r3, #8]
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	7e1b      	ldrb	r3, [r3, #24]
 8018c4c:	005a      	lsls	r2, r3, #1
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	681b      	ldr	r3, [r3, #0]
 8018c52:	430a      	orrs	r2, r1
 8018c54:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8018c5c:	2b00      	cmp	r3, #0
 8018c5e:	d01b      	beq.n	8018c98 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	681b      	ldr	r3, [r3, #0]
 8018c64:	685a      	ldr	r2, [r3, #4]
 8018c66:	687b      	ldr	r3, [r7, #4]
 8018c68:	681b      	ldr	r3, [r3, #0]
 8018c6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8018c6e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	681b      	ldr	r3, [r3, #0]
 8018c74:	685a      	ldr	r2, [r3, #4]
 8018c76:	687b      	ldr	r3, [r7, #4]
 8018c78:	681b      	ldr	r3, [r3, #0]
 8018c7a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8018c7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	681b      	ldr	r3, [r3, #0]
 8018c84:	6859      	ldr	r1, [r3, #4]
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c8a:	3b01      	subs	r3, #1
 8018c8c:	035a      	lsls	r2, r3, #13
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	681b      	ldr	r3, [r3, #0]
 8018c92:	430a      	orrs	r2, r1
 8018c94:	605a      	str	r2, [r3, #4]
 8018c96:	e007      	b.n	8018ca8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8018c98:	687b      	ldr	r3, [r7, #4]
 8018c9a:	681b      	ldr	r3, [r3, #0]
 8018c9c:	685a      	ldr	r2, [r3, #4]
 8018c9e:	687b      	ldr	r3, [r7, #4]
 8018ca0:	681b      	ldr	r3, [r3, #0]
 8018ca2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8018ca6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8018ca8:	687b      	ldr	r3, [r7, #4]
 8018caa:	681b      	ldr	r3, [r3, #0]
 8018cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018cae:	687b      	ldr	r3, [r7, #4]
 8018cb0:	681b      	ldr	r3, [r3, #0]
 8018cb2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8018cb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	681b      	ldr	r3, [r3, #0]
 8018cbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	69db      	ldr	r3, [r3, #28]
 8018cc2:	3b01      	subs	r3, #1
 8018cc4:	051a      	lsls	r2, r3, #20
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	681b      	ldr	r3, [r3, #0]
 8018cca:	430a      	orrs	r2, r1
 8018ccc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	681b      	ldr	r3, [r3, #0]
 8018cd2:	689a      	ldr	r2, [r3, #8]
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	681b      	ldr	r3, [r3, #0]
 8018cd8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8018cdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	681b      	ldr	r3, [r3, #0]
 8018ce2:	6899      	ldr	r1, [r3, #8]
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018cea:	025a      	lsls	r2, r3, #9
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	681b      	ldr	r3, [r3, #0]
 8018cf0:	430a      	orrs	r2, r1
 8018cf2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8018cf4:	687b      	ldr	r3, [r7, #4]
 8018cf6:	681b      	ldr	r3, [r3, #0]
 8018cf8:	689a      	ldr	r2, [r3, #8]
 8018cfa:	687b      	ldr	r3, [r7, #4]
 8018cfc:	681b      	ldr	r3, [r3, #0]
 8018cfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018d02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	681b      	ldr	r3, [r3, #0]
 8018d08:	6899      	ldr	r1, [r3, #8]
 8018d0a:	687b      	ldr	r3, [r7, #4]
 8018d0c:	695b      	ldr	r3, [r3, #20]
 8018d0e:	029a      	lsls	r2, r3, #10
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	681b      	ldr	r3, [r3, #0]
 8018d14:	430a      	orrs	r2, r1
 8018d16:	609a      	str	r2, [r3, #8]
}
 8018d18:	bf00      	nop
 8018d1a:	3714      	adds	r7, #20
 8018d1c:	46bd      	mov	sp, r7
 8018d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d22:	4770      	bx	lr
 8018d24:	40012300 	.word	0x40012300
 8018d28:	0f000001 	.word	0x0f000001

08018d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8018d2c:	b480      	push	{r7}
 8018d2e:	b085      	sub	sp, #20
 8018d30:	af00      	add	r7, sp, #0
 8018d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	f003 0307 	and.w	r3, r3, #7
 8018d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8018d3c:	4b0c      	ldr	r3, [pc, #48]	; (8018d70 <__NVIC_SetPriorityGrouping+0x44>)
 8018d3e:	68db      	ldr	r3, [r3, #12]
 8018d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8018d42:	68ba      	ldr	r2, [r7, #8]
 8018d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8018d48:	4013      	ands	r3, r2
 8018d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8018d4c:	68fb      	ldr	r3, [r7, #12]
 8018d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8018d50:	68bb      	ldr	r3, [r7, #8]
 8018d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8018d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8018d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8018d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8018d5e:	4a04      	ldr	r2, [pc, #16]	; (8018d70 <__NVIC_SetPriorityGrouping+0x44>)
 8018d60:	68bb      	ldr	r3, [r7, #8]
 8018d62:	60d3      	str	r3, [r2, #12]
}
 8018d64:	bf00      	nop
 8018d66:	3714      	adds	r7, #20
 8018d68:	46bd      	mov	sp, r7
 8018d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d6e:	4770      	bx	lr
 8018d70:	e000ed00 	.word	0xe000ed00

08018d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8018d74:	b480      	push	{r7}
 8018d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8018d78:	4b04      	ldr	r3, [pc, #16]	; (8018d8c <__NVIC_GetPriorityGrouping+0x18>)
 8018d7a:	68db      	ldr	r3, [r3, #12]
 8018d7c:	0a1b      	lsrs	r3, r3, #8
 8018d7e:	f003 0307 	and.w	r3, r3, #7
}
 8018d82:	4618      	mov	r0, r3
 8018d84:	46bd      	mov	sp, r7
 8018d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d8a:	4770      	bx	lr
 8018d8c:	e000ed00 	.word	0xe000ed00

08018d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8018d90:	b480      	push	{r7}
 8018d92:	b083      	sub	sp, #12
 8018d94:	af00      	add	r7, sp, #0
 8018d96:	4603      	mov	r3, r0
 8018d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8018d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018d9e:	2b00      	cmp	r3, #0
 8018da0:	db0b      	blt.n	8018dba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8018da2:	79fb      	ldrb	r3, [r7, #7]
 8018da4:	f003 021f 	and.w	r2, r3, #31
 8018da8:	4907      	ldr	r1, [pc, #28]	; (8018dc8 <__NVIC_EnableIRQ+0x38>)
 8018daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018dae:	095b      	lsrs	r3, r3, #5
 8018db0:	2001      	movs	r0, #1
 8018db2:	fa00 f202 	lsl.w	r2, r0, r2
 8018db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8018dba:	bf00      	nop
 8018dbc:	370c      	adds	r7, #12
 8018dbe:	46bd      	mov	sp, r7
 8018dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dc4:	4770      	bx	lr
 8018dc6:	bf00      	nop
 8018dc8:	e000e100 	.word	0xe000e100

08018dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8018dcc:	b480      	push	{r7}
 8018dce:	b083      	sub	sp, #12
 8018dd0:	af00      	add	r7, sp, #0
 8018dd2:	4603      	mov	r3, r0
 8018dd4:	6039      	str	r1, [r7, #0]
 8018dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8018dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018ddc:	2b00      	cmp	r3, #0
 8018dde:	db0a      	blt.n	8018df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018de0:	683b      	ldr	r3, [r7, #0]
 8018de2:	b2da      	uxtb	r2, r3
 8018de4:	490c      	ldr	r1, [pc, #48]	; (8018e18 <__NVIC_SetPriority+0x4c>)
 8018de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018dea:	0112      	lsls	r2, r2, #4
 8018dec:	b2d2      	uxtb	r2, r2
 8018dee:	440b      	add	r3, r1
 8018df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8018df4:	e00a      	b.n	8018e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018df6:	683b      	ldr	r3, [r7, #0]
 8018df8:	b2da      	uxtb	r2, r3
 8018dfa:	4908      	ldr	r1, [pc, #32]	; (8018e1c <__NVIC_SetPriority+0x50>)
 8018dfc:	79fb      	ldrb	r3, [r7, #7]
 8018dfe:	f003 030f 	and.w	r3, r3, #15
 8018e02:	3b04      	subs	r3, #4
 8018e04:	0112      	lsls	r2, r2, #4
 8018e06:	b2d2      	uxtb	r2, r2
 8018e08:	440b      	add	r3, r1
 8018e0a:	761a      	strb	r2, [r3, #24]
}
 8018e0c:	bf00      	nop
 8018e0e:	370c      	adds	r7, #12
 8018e10:	46bd      	mov	sp, r7
 8018e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e16:	4770      	bx	lr
 8018e18:	e000e100 	.word	0xe000e100
 8018e1c:	e000ed00 	.word	0xe000ed00

08018e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8018e20:	b480      	push	{r7}
 8018e22:	b089      	sub	sp, #36	; 0x24
 8018e24:	af00      	add	r7, sp, #0
 8018e26:	60f8      	str	r0, [r7, #12]
 8018e28:	60b9      	str	r1, [r7, #8]
 8018e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8018e2c:	68fb      	ldr	r3, [r7, #12]
 8018e2e:	f003 0307 	and.w	r3, r3, #7
 8018e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8018e34:	69fb      	ldr	r3, [r7, #28]
 8018e36:	f1c3 0307 	rsb	r3, r3, #7
 8018e3a:	2b04      	cmp	r3, #4
 8018e3c:	bf28      	it	cs
 8018e3e:	2304      	movcs	r3, #4
 8018e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8018e42:	69fb      	ldr	r3, [r7, #28]
 8018e44:	3304      	adds	r3, #4
 8018e46:	2b06      	cmp	r3, #6
 8018e48:	d902      	bls.n	8018e50 <NVIC_EncodePriority+0x30>
 8018e4a:	69fb      	ldr	r3, [r7, #28]
 8018e4c:	3b03      	subs	r3, #3
 8018e4e:	e000      	b.n	8018e52 <NVIC_EncodePriority+0x32>
 8018e50:	2300      	movs	r3, #0
 8018e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8018e54:	f04f 32ff 	mov.w	r2, #4294967295
 8018e58:	69bb      	ldr	r3, [r7, #24]
 8018e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8018e5e:	43da      	mvns	r2, r3
 8018e60:	68bb      	ldr	r3, [r7, #8]
 8018e62:	401a      	ands	r2, r3
 8018e64:	697b      	ldr	r3, [r7, #20]
 8018e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8018e68:	f04f 31ff 	mov.w	r1, #4294967295
 8018e6c:	697b      	ldr	r3, [r7, #20]
 8018e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8018e72:	43d9      	mvns	r1, r3
 8018e74:	687b      	ldr	r3, [r7, #4]
 8018e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8018e78:	4313      	orrs	r3, r2
         );
}
 8018e7a:	4618      	mov	r0, r3
 8018e7c:	3724      	adds	r7, #36	; 0x24
 8018e7e:	46bd      	mov	sp, r7
 8018e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e84:	4770      	bx	lr
	...

08018e88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8018e88:	b580      	push	{r7, lr}
 8018e8a:	b082      	sub	sp, #8
 8018e8c:	af00      	add	r7, sp, #0
 8018e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	3b01      	subs	r3, #1
 8018e94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8018e98:	d301      	bcc.n	8018e9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8018e9a:	2301      	movs	r3, #1
 8018e9c:	e00f      	b.n	8018ebe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8018e9e:	4a0a      	ldr	r2, [pc, #40]	; (8018ec8 <SysTick_Config+0x40>)
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	3b01      	subs	r3, #1
 8018ea4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8018ea6:	210f      	movs	r1, #15
 8018ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8018eac:	f7ff ff8e 	bl	8018dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8018eb0:	4b05      	ldr	r3, [pc, #20]	; (8018ec8 <SysTick_Config+0x40>)
 8018eb2:	2200      	movs	r2, #0
 8018eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8018eb6:	4b04      	ldr	r3, [pc, #16]	; (8018ec8 <SysTick_Config+0x40>)
 8018eb8:	2207      	movs	r2, #7
 8018eba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8018ebc:	2300      	movs	r3, #0
}
 8018ebe:	4618      	mov	r0, r3
 8018ec0:	3708      	adds	r7, #8
 8018ec2:	46bd      	mov	sp, r7
 8018ec4:	bd80      	pop	{r7, pc}
 8018ec6:	bf00      	nop
 8018ec8:	e000e010 	.word	0xe000e010

08018ecc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8018ecc:	b580      	push	{r7, lr}
 8018ece:	b082      	sub	sp, #8
 8018ed0:	af00      	add	r7, sp, #0
 8018ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8018ed4:	6878      	ldr	r0, [r7, #4]
 8018ed6:	f7ff ff29 	bl	8018d2c <__NVIC_SetPriorityGrouping>
}
 8018eda:	bf00      	nop
 8018edc:	3708      	adds	r7, #8
 8018ede:	46bd      	mov	sp, r7
 8018ee0:	bd80      	pop	{r7, pc}

08018ee2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8018ee2:	b580      	push	{r7, lr}
 8018ee4:	b086      	sub	sp, #24
 8018ee6:	af00      	add	r7, sp, #0
 8018ee8:	4603      	mov	r3, r0
 8018eea:	60b9      	str	r1, [r7, #8]
 8018eec:	607a      	str	r2, [r7, #4]
 8018eee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8018ef0:	2300      	movs	r3, #0
 8018ef2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8018ef4:	f7ff ff3e 	bl	8018d74 <__NVIC_GetPriorityGrouping>
 8018ef8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8018efa:	687a      	ldr	r2, [r7, #4]
 8018efc:	68b9      	ldr	r1, [r7, #8]
 8018efe:	6978      	ldr	r0, [r7, #20]
 8018f00:	f7ff ff8e 	bl	8018e20 <NVIC_EncodePriority>
 8018f04:	4602      	mov	r2, r0
 8018f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018f0a:	4611      	mov	r1, r2
 8018f0c:	4618      	mov	r0, r3
 8018f0e:	f7ff ff5d 	bl	8018dcc <__NVIC_SetPriority>
}
 8018f12:	bf00      	nop
 8018f14:	3718      	adds	r7, #24
 8018f16:	46bd      	mov	sp, r7
 8018f18:	bd80      	pop	{r7, pc}

08018f1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8018f1a:	b580      	push	{r7, lr}
 8018f1c:	b082      	sub	sp, #8
 8018f1e:	af00      	add	r7, sp, #0
 8018f20:	4603      	mov	r3, r0
 8018f22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8018f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018f28:	4618      	mov	r0, r3
 8018f2a:	f7ff ff31 	bl	8018d90 <__NVIC_EnableIRQ>
}
 8018f2e:	bf00      	nop
 8018f30:	3708      	adds	r7, #8
 8018f32:	46bd      	mov	sp, r7
 8018f34:	bd80      	pop	{r7, pc}

08018f36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8018f36:	b580      	push	{r7, lr}
 8018f38:	b082      	sub	sp, #8
 8018f3a:	af00      	add	r7, sp, #0
 8018f3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8018f3e:	6878      	ldr	r0, [r7, #4]
 8018f40:	f7ff ffa2 	bl	8018e88 <SysTick_Config>
 8018f44:	4603      	mov	r3, r0
}
 8018f46:	4618      	mov	r0, r3
 8018f48:	3708      	adds	r7, #8
 8018f4a:	46bd      	mov	sp, r7
 8018f4c:	bd80      	pop	{r7, pc}

08018f4e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8018f4e:	b580      	push	{r7, lr}
 8018f50:	b082      	sub	sp, #8
 8018f52:	af00      	add	r7, sp, #0
 8018f54:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8018f56:	687b      	ldr	r3, [r7, #4]
 8018f58:	2b00      	cmp	r3, #0
 8018f5a:	d101      	bne.n	8018f60 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8018f5c:	2301      	movs	r3, #1
 8018f5e:	e014      	b.n	8018f8a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8018f60:	687b      	ldr	r3, [r7, #4]
 8018f62:	791b      	ldrb	r3, [r3, #4]
 8018f64:	b2db      	uxtb	r3, r3
 8018f66:	2b00      	cmp	r3, #0
 8018f68:	d105      	bne.n	8018f76 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8018f6a:	687b      	ldr	r3, [r7, #4]
 8018f6c:	2200      	movs	r2, #0
 8018f6e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8018f70:	6878      	ldr	r0, [r7, #4]
 8018f72:	f7ff f985 	bl	8018280 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	2202      	movs	r2, #2
 8018f7a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	2200      	movs	r2, #0
 8018f80:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8018f82:	687b      	ldr	r3, [r7, #4]
 8018f84:	2201      	movs	r2, #1
 8018f86:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8018f88:	2300      	movs	r3, #0
}
 8018f8a:	4618      	mov	r0, r3
 8018f8c:	3708      	adds	r7, #8
 8018f8e:	46bd      	mov	sp, r7
 8018f90:	bd80      	pop	{r7, pc}

08018f92 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8018f92:	b480      	push	{r7}
 8018f94:	b087      	sub	sp, #28
 8018f96:	af00      	add	r7, sp, #0
 8018f98:	60f8      	str	r0, [r7, #12]
 8018f9a:	60b9      	str	r1, [r7, #8]
 8018f9c:	607a      	str	r2, [r7, #4]
 8018f9e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8018fa0:	2300      	movs	r3, #0
 8018fa2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8018fa4:	68fb      	ldr	r3, [r7, #12]
 8018fa6:	681b      	ldr	r3, [r3, #0]
 8018fa8:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8018faa:	68bb      	ldr	r3, [r7, #8]
 8018fac:	2b00      	cmp	r3, #0
 8018fae:	d105      	bne.n	8018fbc <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8018fb0:	697a      	ldr	r2, [r7, #20]
 8018fb2:	687b      	ldr	r3, [r7, #4]
 8018fb4:	4413      	add	r3, r2
 8018fb6:	3308      	adds	r3, #8
 8018fb8:	617b      	str	r3, [r7, #20]
 8018fba:	e004      	b.n	8018fc6 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8018fbc:	697a      	ldr	r2, [r7, #20]
 8018fbe:	687b      	ldr	r3, [r7, #4]
 8018fc0:	4413      	add	r3, r2
 8018fc2:	3314      	adds	r3, #20
 8018fc4:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8018fc6:	697b      	ldr	r3, [r7, #20]
 8018fc8:	461a      	mov	r2, r3
 8018fca:	683b      	ldr	r3, [r7, #0]
 8018fcc:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8018fce:	2300      	movs	r3, #0
}
 8018fd0:	4618      	mov	r0, r3
 8018fd2:	371c      	adds	r7, #28
 8018fd4:	46bd      	mov	sp, r7
 8018fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fda:	4770      	bx	lr

08018fdc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8018fdc:	b480      	push	{r7}
 8018fde:	b087      	sub	sp, #28
 8018fe0:	af00      	add	r7, sp, #0
 8018fe2:	60f8      	str	r0, [r7, #12]
 8018fe4:	60b9      	str	r1, [r7, #8]
 8018fe6:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8018fe8:	68fb      	ldr	r3, [r7, #12]
 8018fea:	795b      	ldrb	r3, [r3, #5]
 8018fec:	2b01      	cmp	r3, #1
 8018fee:	d101      	bne.n	8018ff4 <HAL_DAC_ConfigChannel+0x18>
 8018ff0:	2302      	movs	r3, #2
 8018ff2:	e03c      	b.n	801906e <HAL_DAC_ConfigChannel+0x92>
 8018ff4:	68fb      	ldr	r3, [r7, #12]
 8018ff6:	2201      	movs	r2, #1
 8018ff8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8018ffa:	68fb      	ldr	r3, [r7, #12]
 8018ffc:	2202      	movs	r2, #2
 8018ffe:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8019000:	68fb      	ldr	r3, [r7, #12]
 8019002:	681b      	ldr	r3, [r3, #0]
 8019004:	681b      	ldr	r3, [r3, #0]
 8019006:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	f003 0310 	and.w	r3, r3, #16
 801900e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8019012:	fa02 f303 	lsl.w	r3, r2, r3
 8019016:	43db      	mvns	r3, r3
 8019018:	697a      	ldr	r2, [r7, #20]
 801901a:	4013      	ands	r3, r2
 801901c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 801901e:	68bb      	ldr	r3, [r7, #8]
 8019020:	681a      	ldr	r2, [r3, #0]
 8019022:	68bb      	ldr	r3, [r7, #8]
 8019024:	685b      	ldr	r3, [r3, #4]
 8019026:	4313      	orrs	r3, r2
 8019028:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 801902a:	687b      	ldr	r3, [r7, #4]
 801902c:	f003 0310 	and.w	r3, r3, #16
 8019030:	693a      	ldr	r2, [r7, #16]
 8019032:	fa02 f303 	lsl.w	r3, r2, r3
 8019036:	697a      	ldr	r2, [r7, #20]
 8019038:	4313      	orrs	r3, r2
 801903a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 801903c:	68fb      	ldr	r3, [r7, #12]
 801903e:	681b      	ldr	r3, [r3, #0]
 8019040:	697a      	ldr	r2, [r7, #20]
 8019042:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8019044:	68fb      	ldr	r3, [r7, #12]
 8019046:	681b      	ldr	r3, [r3, #0]
 8019048:	6819      	ldr	r1, [r3, #0]
 801904a:	687b      	ldr	r3, [r7, #4]
 801904c:	f003 0310 	and.w	r3, r3, #16
 8019050:	22c0      	movs	r2, #192	; 0xc0
 8019052:	fa02 f303 	lsl.w	r3, r2, r3
 8019056:	43da      	mvns	r2, r3
 8019058:	68fb      	ldr	r3, [r7, #12]
 801905a:	681b      	ldr	r3, [r3, #0]
 801905c:	400a      	ands	r2, r1
 801905e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8019060:	68fb      	ldr	r3, [r7, #12]
 8019062:	2201      	movs	r2, #1
 8019064:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8019066:	68fb      	ldr	r3, [r7, #12]
 8019068:	2200      	movs	r2, #0
 801906a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 801906c:	2300      	movs	r3, #0
}
 801906e:	4618      	mov	r0, r3
 8019070:	371c      	adds	r7, #28
 8019072:	46bd      	mov	sp, r7
 8019074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019078:	4770      	bx	lr
	...

0801907c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801907c:	b580      	push	{r7, lr}
 801907e:	b086      	sub	sp, #24
 8019080:	af00      	add	r7, sp, #0
 8019082:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8019084:	2300      	movs	r3, #0
 8019086:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8019088:	f7ff fbae 	bl	80187e8 <HAL_GetTick>
 801908c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 801908e:	687b      	ldr	r3, [r7, #4]
 8019090:	2b00      	cmp	r3, #0
 8019092:	d101      	bne.n	8019098 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8019094:	2301      	movs	r3, #1
 8019096:	e099      	b.n	80191cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	2202      	movs	r2, #2
 801909c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80190a0:	687b      	ldr	r3, [r7, #4]
 80190a2:	2200      	movs	r2, #0
 80190a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80190a8:	687b      	ldr	r3, [r7, #4]
 80190aa:	681b      	ldr	r3, [r3, #0]
 80190ac:	681a      	ldr	r2, [r3, #0]
 80190ae:	687b      	ldr	r3, [r7, #4]
 80190b0:	681b      	ldr	r3, [r3, #0]
 80190b2:	f022 0201 	bic.w	r2, r2, #1
 80190b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80190b8:	e00f      	b.n	80190da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80190ba:	f7ff fb95 	bl	80187e8 <HAL_GetTick>
 80190be:	4602      	mov	r2, r0
 80190c0:	693b      	ldr	r3, [r7, #16]
 80190c2:	1ad3      	subs	r3, r2, r3
 80190c4:	2b05      	cmp	r3, #5
 80190c6:	d908      	bls.n	80190da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80190c8:	687b      	ldr	r3, [r7, #4]
 80190ca:	2220      	movs	r2, #32
 80190cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80190ce:	687b      	ldr	r3, [r7, #4]
 80190d0:	2203      	movs	r2, #3
 80190d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80190d6:	2303      	movs	r3, #3
 80190d8:	e078      	b.n	80191cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80190da:	687b      	ldr	r3, [r7, #4]
 80190dc:	681b      	ldr	r3, [r3, #0]
 80190de:	681b      	ldr	r3, [r3, #0]
 80190e0:	f003 0301 	and.w	r3, r3, #1
 80190e4:	2b00      	cmp	r3, #0
 80190e6:	d1e8      	bne.n	80190ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80190e8:	687b      	ldr	r3, [r7, #4]
 80190ea:	681b      	ldr	r3, [r3, #0]
 80190ec:	681b      	ldr	r3, [r3, #0]
 80190ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80190f0:	697a      	ldr	r2, [r7, #20]
 80190f2:	4b38      	ldr	r3, [pc, #224]	; (80191d4 <HAL_DMA_Init+0x158>)
 80190f4:	4013      	ands	r3, r2
 80190f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80190f8:	687b      	ldr	r3, [r7, #4]
 80190fa:	685a      	ldr	r2, [r3, #4]
 80190fc:	687b      	ldr	r3, [r7, #4]
 80190fe:	689b      	ldr	r3, [r3, #8]
 8019100:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8019102:	687b      	ldr	r3, [r7, #4]
 8019104:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8019106:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8019108:	687b      	ldr	r3, [r7, #4]
 801910a:	691b      	ldr	r3, [r3, #16]
 801910c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801910e:	687b      	ldr	r3, [r7, #4]
 8019110:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8019112:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8019114:	687b      	ldr	r3, [r7, #4]
 8019116:	699b      	ldr	r3, [r3, #24]
 8019118:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801911a:	687b      	ldr	r3, [r7, #4]
 801911c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801911e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8019120:	687b      	ldr	r3, [r7, #4]
 8019122:	6a1b      	ldr	r3, [r3, #32]
 8019124:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8019126:	697a      	ldr	r2, [r7, #20]
 8019128:	4313      	orrs	r3, r2
 801912a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801912c:	687b      	ldr	r3, [r7, #4]
 801912e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019130:	2b04      	cmp	r3, #4
 8019132:	d107      	bne.n	8019144 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019138:	687b      	ldr	r3, [r7, #4]
 801913a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801913c:	4313      	orrs	r3, r2
 801913e:	697a      	ldr	r2, [r7, #20]
 8019140:	4313      	orrs	r3, r2
 8019142:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8019144:	687b      	ldr	r3, [r7, #4]
 8019146:	681b      	ldr	r3, [r3, #0]
 8019148:	697a      	ldr	r2, [r7, #20]
 801914a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 801914c:	687b      	ldr	r3, [r7, #4]
 801914e:	681b      	ldr	r3, [r3, #0]
 8019150:	695b      	ldr	r3, [r3, #20]
 8019152:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8019154:	697b      	ldr	r3, [r7, #20]
 8019156:	f023 0307 	bic.w	r3, r3, #7
 801915a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 801915c:	687b      	ldr	r3, [r7, #4]
 801915e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019160:	697a      	ldr	r2, [r7, #20]
 8019162:	4313      	orrs	r3, r2
 8019164:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8019166:	687b      	ldr	r3, [r7, #4]
 8019168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801916a:	2b04      	cmp	r3, #4
 801916c:	d117      	bne.n	801919e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 801916e:	687b      	ldr	r3, [r7, #4]
 8019170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019172:	697a      	ldr	r2, [r7, #20]
 8019174:	4313      	orrs	r3, r2
 8019176:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8019178:	687b      	ldr	r3, [r7, #4]
 801917a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801917c:	2b00      	cmp	r3, #0
 801917e:	d00e      	beq.n	801919e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8019180:	6878      	ldr	r0, [r7, #4]
 8019182:	f000 fa0b 	bl	801959c <DMA_CheckFifoParam>
 8019186:	4603      	mov	r3, r0
 8019188:	2b00      	cmp	r3, #0
 801918a:	d008      	beq.n	801919e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801918c:	687b      	ldr	r3, [r7, #4]
 801918e:	2240      	movs	r2, #64	; 0x40
 8019190:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	2201      	movs	r2, #1
 8019196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 801919a:	2301      	movs	r3, #1
 801919c:	e016      	b.n	80191cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 801919e:	687b      	ldr	r3, [r7, #4]
 80191a0:	681b      	ldr	r3, [r3, #0]
 80191a2:	697a      	ldr	r2, [r7, #20]
 80191a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80191a6:	6878      	ldr	r0, [r7, #4]
 80191a8:	f000 f9c2 	bl	8019530 <DMA_CalcBaseAndBitshift>
 80191ac:	4603      	mov	r3, r0
 80191ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80191b0:	687b      	ldr	r3, [r7, #4]
 80191b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80191b4:	223f      	movs	r2, #63	; 0x3f
 80191b6:	409a      	lsls	r2, r3
 80191b8:	68fb      	ldr	r3, [r7, #12]
 80191ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80191bc:	687b      	ldr	r3, [r7, #4]
 80191be:	2200      	movs	r2, #0
 80191c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80191c2:	687b      	ldr	r3, [r7, #4]
 80191c4:	2201      	movs	r2, #1
 80191c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80191ca:	2300      	movs	r3, #0
}
 80191cc:	4618      	mov	r0, r3
 80191ce:	3718      	adds	r7, #24
 80191d0:	46bd      	mov	sp, r7
 80191d2:	bd80      	pop	{r7, pc}
 80191d4:	f010803f 	.word	0xf010803f

080191d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80191d8:	b480      	push	{r7}
 80191da:	b083      	sub	sp, #12
 80191dc:	af00      	add	r7, sp, #0
 80191de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80191e6:	b2db      	uxtb	r3, r3
 80191e8:	2b02      	cmp	r3, #2
 80191ea:	d004      	beq.n	80191f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80191ec:	687b      	ldr	r3, [r7, #4]
 80191ee:	2280      	movs	r2, #128	; 0x80
 80191f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80191f2:	2301      	movs	r3, #1
 80191f4:	e00c      	b.n	8019210 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80191f6:	687b      	ldr	r3, [r7, #4]
 80191f8:	2205      	movs	r2, #5
 80191fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80191fe:	687b      	ldr	r3, [r7, #4]
 8019200:	681b      	ldr	r3, [r3, #0]
 8019202:	681a      	ldr	r2, [r3, #0]
 8019204:	687b      	ldr	r3, [r7, #4]
 8019206:	681b      	ldr	r3, [r3, #0]
 8019208:	f022 0201 	bic.w	r2, r2, #1
 801920c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801920e:	2300      	movs	r3, #0
}
 8019210:	4618      	mov	r0, r3
 8019212:	370c      	adds	r7, #12
 8019214:	46bd      	mov	sp, r7
 8019216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801921a:	4770      	bx	lr

0801921c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801921c:	b580      	push	{r7, lr}
 801921e:	b086      	sub	sp, #24
 8019220:	af00      	add	r7, sp, #0
 8019222:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8019224:	2300      	movs	r3, #0
 8019226:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8019228:	4b92      	ldr	r3, [pc, #584]	; (8019474 <HAL_DMA_IRQHandler+0x258>)
 801922a:	681b      	ldr	r3, [r3, #0]
 801922c:	4a92      	ldr	r2, [pc, #584]	; (8019478 <HAL_DMA_IRQHandler+0x25c>)
 801922e:	fba2 2303 	umull	r2, r3, r2, r3
 8019232:	0a9b      	lsrs	r3, r3, #10
 8019234:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8019236:	687b      	ldr	r3, [r7, #4]
 8019238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801923a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 801923c:	693b      	ldr	r3, [r7, #16]
 801923e:	681b      	ldr	r3, [r3, #0]
 8019240:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019246:	2208      	movs	r2, #8
 8019248:	409a      	lsls	r2, r3
 801924a:	68fb      	ldr	r3, [r7, #12]
 801924c:	4013      	ands	r3, r2
 801924e:	2b00      	cmp	r3, #0
 8019250:	d01a      	beq.n	8019288 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8019252:	687b      	ldr	r3, [r7, #4]
 8019254:	681b      	ldr	r3, [r3, #0]
 8019256:	681b      	ldr	r3, [r3, #0]
 8019258:	f003 0304 	and.w	r3, r3, #4
 801925c:	2b00      	cmp	r3, #0
 801925e:	d013      	beq.n	8019288 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	681b      	ldr	r3, [r3, #0]
 8019264:	681a      	ldr	r2, [r3, #0]
 8019266:	687b      	ldr	r3, [r7, #4]
 8019268:	681b      	ldr	r3, [r3, #0]
 801926a:	f022 0204 	bic.w	r2, r2, #4
 801926e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8019270:	687b      	ldr	r3, [r7, #4]
 8019272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019274:	2208      	movs	r2, #8
 8019276:	409a      	lsls	r2, r3
 8019278:	693b      	ldr	r3, [r7, #16]
 801927a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801927c:	687b      	ldr	r3, [r7, #4]
 801927e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019280:	f043 0201 	orr.w	r2, r3, #1
 8019284:	687b      	ldr	r3, [r7, #4]
 8019286:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8019288:	687b      	ldr	r3, [r7, #4]
 801928a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801928c:	2201      	movs	r2, #1
 801928e:	409a      	lsls	r2, r3
 8019290:	68fb      	ldr	r3, [r7, #12]
 8019292:	4013      	ands	r3, r2
 8019294:	2b00      	cmp	r3, #0
 8019296:	d012      	beq.n	80192be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8019298:	687b      	ldr	r3, [r7, #4]
 801929a:	681b      	ldr	r3, [r3, #0]
 801929c:	695b      	ldr	r3, [r3, #20]
 801929e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80192a2:	2b00      	cmp	r3, #0
 80192a4:	d00b      	beq.n	80192be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80192aa:	2201      	movs	r2, #1
 80192ac:	409a      	lsls	r2, r3
 80192ae:	693b      	ldr	r3, [r7, #16]
 80192b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80192b2:	687b      	ldr	r3, [r7, #4]
 80192b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80192b6:	f043 0202 	orr.w	r2, r3, #2
 80192ba:	687b      	ldr	r3, [r7, #4]
 80192bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80192be:	687b      	ldr	r3, [r7, #4]
 80192c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80192c2:	2204      	movs	r2, #4
 80192c4:	409a      	lsls	r2, r3
 80192c6:	68fb      	ldr	r3, [r7, #12]
 80192c8:	4013      	ands	r3, r2
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	d012      	beq.n	80192f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80192ce:	687b      	ldr	r3, [r7, #4]
 80192d0:	681b      	ldr	r3, [r3, #0]
 80192d2:	681b      	ldr	r3, [r3, #0]
 80192d4:	f003 0302 	and.w	r3, r3, #2
 80192d8:	2b00      	cmp	r3, #0
 80192da:	d00b      	beq.n	80192f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80192dc:	687b      	ldr	r3, [r7, #4]
 80192de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80192e0:	2204      	movs	r2, #4
 80192e2:	409a      	lsls	r2, r3
 80192e4:	693b      	ldr	r3, [r7, #16]
 80192e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80192e8:	687b      	ldr	r3, [r7, #4]
 80192ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80192ec:	f043 0204 	orr.w	r2, r3, #4
 80192f0:	687b      	ldr	r3, [r7, #4]
 80192f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80192f4:	687b      	ldr	r3, [r7, #4]
 80192f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80192f8:	2210      	movs	r2, #16
 80192fa:	409a      	lsls	r2, r3
 80192fc:	68fb      	ldr	r3, [r7, #12]
 80192fe:	4013      	ands	r3, r2
 8019300:	2b00      	cmp	r3, #0
 8019302:	d043      	beq.n	801938c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8019304:	687b      	ldr	r3, [r7, #4]
 8019306:	681b      	ldr	r3, [r3, #0]
 8019308:	681b      	ldr	r3, [r3, #0]
 801930a:	f003 0308 	and.w	r3, r3, #8
 801930e:	2b00      	cmp	r3, #0
 8019310:	d03c      	beq.n	801938c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8019312:	687b      	ldr	r3, [r7, #4]
 8019314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019316:	2210      	movs	r2, #16
 8019318:	409a      	lsls	r2, r3
 801931a:	693b      	ldr	r3, [r7, #16]
 801931c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	681b      	ldr	r3, [r3, #0]
 8019322:	681b      	ldr	r3, [r3, #0]
 8019324:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8019328:	2b00      	cmp	r3, #0
 801932a:	d018      	beq.n	801935e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801932c:	687b      	ldr	r3, [r7, #4]
 801932e:	681b      	ldr	r3, [r3, #0]
 8019330:	681b      	ldr	r3, [r3, #0]
 8019332:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8019336:	2b00      	cmp	r3, #0
 8019338:	d108      	bne.n	801934c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801933e:	2b00      	cmp	r3, #0
 8019340:	d024      	beq.n	801938c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8019342:	687b      	ldr	r3, [r7, #4]
 8019344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019346:	6878      	ldr	r0, [r7, #4]
 8019348:	4798      	blx	r3
 801934a:	e01f      	b.n	801938c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801934c:	687b      	ldr	r3, [r7, #4]
 801934e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019350:	2b00      	cmp	r3, #0
 8019352:	d01b      	beq.n	801938c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8019354:	687b      	ldr	r3, [r7, #4]
 8019356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019358:	6878      	ldr	r0, [r7, #4]
 801935a:	4798      	blx	r3
 801935c:	e016      	b.n	801938c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801935e:	687b      	ldr	r3, [r7, #4]
 8019360:	681b      	ldr	r3, [r3, #0]
 8019362:	681b      	ldr	r3, [r3, #0]
 8019364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019368:	2b00      	cmp	r3, #0
 801936a:	d107      	bne.n	801937c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	681b      	ldr	r3, [r3, #0]
 8019370:	681a      	ldr	r2, [r3, #0]
 8019372:	687b      	ldr	r3, [r7, #4]
 8019374:	681b      	ldr	r3, [r3, #0]
 8019376:	f022 0208 	bic.w	r2, r2, #8
 801937a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019380:	2b00      	cmp	r3, #0
 8019382:	d003      	beq.n	801938c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8019384:	687b      	ldr	r3, [r7, #4]
 8019386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019388:	6878      	ldr	r0, [r7, #4]
 801938a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 801938c:	687b      	ldr	r3, [r7, #4]
 801938e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019390:	2220      	movs	r2, #32
 8019392:	409a      	lsls	r2, r3
 8019394:	68fb      	ldr	r3, [r7, #12]
 8019396:	4013      	ands	r3, r2
 8019398:	2b00      	cmp	r3, #0
 801939a:	f000 808e 	beq.w	80194ba <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 801939e:	687b      	ldr	r3, [r7, #4]
 80193a0:	681b      	ldr	r3, [r3, #0]
 80193a2:	681b      	ldr	r3, [r3, #0]
 80193a4:	f003 0310 	and.w	r3, r3, #16
 80193a8:	2b00      	cmp	r3, #0
 80193aa:	f000 8086 	beq.w	80194ba <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80193ae:	687b      	ldr	r3, [r7, #4]
 80193b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80193b2:	2220      	movs	r2, #32
 80193b4:	409a      	lsls	r2, r3
 80193b6:	693b      	ldr	r3, [r7, #16]
 80193b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80193c0:	b2db      	uxtb	r3, r3
 80193c2:	2b05      	cmp	r3, #5
 80193c4:	d136      	bne.n	8019434 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80193c6:	687b      	ldr	r3, [r7, #4]
 80193c8:	681b      	ldr	r3, [r3, #0]
 80193ca:	681a      	ldr	r2, [r3, #0]
 80193cc:	687b      	ldr	r3, [r7, #4]
 80193ce:	681b      	ldr	r3, [r3, #0]
 80193d0:	f022 0216 	bic.w	r2, r2, #22
 80193d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80193d6:	687b      	ldr	r3, [r7, #4]
 80193d8:	681b      	ldr	r3, [r3, #0]
 80193da:	695a      	ldr	r2, [r3, #20]
 80193dc:	687b      	ldr	r3, [r7, #4]
 80193de:	681b      	ldr	r3, [r3, #0]
 80193e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80193e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80193e6:	687b      	ldr	r3, [r7, #4]
 80193e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80193ea:	2b00      	cmp	r3, #0
 80193ec:	d103      	bne.n	80193f6 <HAL_DMA_IRQHandler+0x1da>
 80193ee:	687b      	ldr	r3, [r7, #4]
 80193f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80193f2:	2b00      	cmp	r3, #0
 80193f4:	d007      	beq.n	8019406 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80193f6:	687b      	ldr	r3, [r7, #4]
 80193f8:	681b      	ldr	r3, [r3, #0]
 80193fa:	681a      	ldr	r2, [r3, #0]
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	681b      	ldr	r3, [r3, #0]
 8019400:	f022 0208 	bic.w	r2, r2, #8
 8019404:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801940a:	223f      	movs	r2, #63	; 0x3f
 801940c:	409a      	lsls	r2, r3
 801940e:	693b      	ldr	r3, [r7, #16]
 8019410:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8019412:	687b      	ldr	r3, [r7, #4]
 8019414:	2201      	movs	r2, #1
 8019416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801941a:	687b      	ldr	r3, [r7, #4]
 801941c:	2200      	movs	r2, #0
 801941e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8019422:	687b      	ldr	r3, [r7, #4]
 8019424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019426:	2b00      	cmp	r3, #0
 8019428:	d07d      	beq.n	8019526 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 801942a:	687b      	ldr	r3, [r7, #4]
 801942c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801942e:	6878      	ldr	r0, [r7, #4]
 8019430:	4798      	blx	r3
        }
        return;
 8019432:	e078      	b.n	8019526 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8019434:	687b      	ldr	r3, [r7, #4]
 8019436:	681b      	ldr	r3, [r3, #0]
 8019438:	681b      	ldr	r3, [r3, #0]
 801943a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801943e:	2b00      	cmp	r3, #0
 8019440:	d01c      	beq.n	801947c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8019442:	687b      	ldr	r3, [r7, #4]
 8019444:	681b      	ldr	r3, [r3, #0]
 8019446:	681b      	ldr	r3, [r3, #0]
 8019448:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801944c:	2b00      	cmp	r3, #0
 801944e:	d108      	bne.n	8019462 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8019450:	687b      	ldr	r3, [r7, #4]
 8019452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019454:	2b00      	cmp	r3, #0
 8019456:	d030      	beq.n	80194ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8019458:	687b      	ldr	r3, [r7, #4]
 801945a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801945c:	6878      	ldr	r0, [r7, #4]
 801945e:	4798      	blx	r3
 8019460:	e02b      	b.n	80194ba <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8019462:	687b      	ldr	r3, [r7, #4]
 8019464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019466:	2b00      	cmp	r3, #0
 8019468:	d027      	beq.n	80194ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 801946a:	687b      	ldr	r3, [r7, #4]
 801946c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801946e:	6878      	ldr	r0, [r7, #4]
 8019470:	4798      	blx	r3
 8019472:	e022      	b.n	80194ba <HAL_DMA_IRQHandler+0x29e>
 8019474:	20000588 	.word	0x20000588
 8019478:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	681b      	ldr	r3, [r3, #0]
 8019480:	681b      	ldr	r3, [r3, #0]
 8019482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019486:	2b00      	cmp	r3, #0
 8019488:	d10f      	bne.n	80194aa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 801948a:	687b      	ldr	r3, [r7, #4]
 801948c:	681b      	ldr	r3, [r3, #0]
 801948e:	681a      	ldr	r2, [r3, #0]
 8019490:	687b      	ldr	r3, [r7, #4]
 8019492:	681b      	ldr	r3, [r3, #0]
 8019494:	f022 0210 	bic.w	r2, r2, #16
 8019498:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	2201      	movs	r2, #1
 801949e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80194a2:	687b      	ldr	r3, [r7, #4]
 80194a4:	2200      	movs	r2, #0
 80194a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80194aa:	687b      	ldr	r3, [r7, #4]
 80194ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80194ae:	2b00      	cmp	r3, #0
 80194b0:	d003      	beq.n	80194ba <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80194b2:	687b      	ldr	r3, [r7, #4]
 80194b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80194b6:	6878      	ldr	r0, [r7, #4]
 80194b8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80194ba:	687b      	ldr	r3, [r7, #4]
 80194bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80194be:	2b00      	cmp	r3, #0
 80194c0:	d032      	beq.n	8019528 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80194c2:	687b      	ldr	r3, [r7, #4]
 80194c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80194c6:	f003 0301 	and.w	r3, r3, #1
 80194ca:	2b00      	cmp	r3, #0
 80194cc:	d022      	beq.n	8019514 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80194ce:	687b      	ldr	r3, [r7, #4]
 80194d0:	2205      	movs	r2, #5
 80194d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	681b      	ldr	r3, [r3, #0]
 80194da:	681a      	ldr	r2, [r3, #0]
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	681b      	ldr	r3, [r3, #0]
 80194e0:	f022 0201 	bic.w	r2, r2, #1
 80194e4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80194e6:	68bb      	ldr	r3, [r7, #8]
 80194e8:	3301      	adds	r3, #1
 80194ea:	60bb      	str	r3, [r7, #8]
 80194ec:	697a      	ldr	r2, [r7, #20]
 80194ee:	429a      	cmp	r2, r3
 80194f0:	d307      	bcc.n	8019502 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80194f2:	687b      	ldr	r3, [r7, #4]
 80194f4:	681b      	ldr	r3, [r3, #0]
 80194f6:	681b      	ldr	r3, [r3, #0]
 80194f8:	f003 0301 	and.w	r3, r3, #1
 80194fc:	2b00      	cmp	r3, #0
 80194fe:	d1f2      	bne.n	80194e6 <HAL_DMA_IRQHandler+0x2ca>
 8019500:	e000      	b.n	8019504 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8019502:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8019504:	687b      	ldr	r3, [r7, #4]
 8019506:	2201      	movs	r2, #1
 8019508:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	2200      	movs	r2, #0
 8019510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019518:	2b00      	cmp	r3, #0
 801951a:	d005      	beq.n	8019528 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801951c:	687b      	ldr	r3, [r7, #4]
 801951e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019520:	6878      	ldr	r0, [r7, #4]
 8019522:	4798      	blx	r3
 8019524:	e000      	b.n	8019528 <HAL_DMA_IRQHandler+0x30c>
        return;
 8019526:	bf00      	nop
    }
  }
}
 8019528:	3718      	adds	r7, #24
 801952a:	46bd      	mov	sp, r7
 801952c:	bd80      	pop	{r7, pc}
 801952e:	bf00      	nop

08019530 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8019530:	b480      	push	{r7}
 8019532:	b085      	sub	sp, #20
 8019534:	af00      	add	r7, sp, #0
 8019536:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8019538:	687b      	ldr	r3, [r7, #4]
 801953a:	681b      	ldr	r3, [r3, #0]
 801953c:	b2db      	uxtb	r3, r3
 801953e:	3b10      	subs	r3, #16
 8019540:	4a14      	ldr	r2, [pc, #80]	; (8019594 <DMA_CalcBaseAndBitshift+0x64>)
 8019542:	fba2 2303 	umull	r2, r3, r2, r3
 8019546:	091b      	lsrs	r3, r3, #4
 8019548:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 801954a:	4a13      	ldr	r2, [pc, #76]	; (8019598 <DMA_CalcBaseAndBitshift+0x68>)
 801954c:	68fb      	ldr	r3, [r7, #12]
 801954e:	4413      	add	r3, r2
 8019550:	781b      	ldrb	r3, [r3, #0]
 8019552:	461a      	mov	r2, r3
 8019554:	687b      	ldr	r3, [r7, #4]
 8019556:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8019558:	68fb      	ldr	r3, [r7, #12]
 801955a:	2b03      	cmp	r3, #3
 801955c:	d909      	bls.n	8019572 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 801955e:	687b      	ldr	r3, [r7, #4]
 8019560:	681b      	ldr	r3, [r3, #0]
 8019562:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8019566:	f023 0303 	bic.w	r3, r3, #3
 801956a:	1d1a      	adds	r2, r3, #4
 801956c:	687b      	ldr	r3, [r7, #4]
 801956e:	659a      	str	r2, [r3, #88]	; 0x58
 8019570:	e007      	b.n	8019582 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8019572:	687b      	ldr	r3, [r7, #4]
 8019574:	681b      	ldr	r3, [r3, #0]
 8019576:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801957a:	f023 0303 	bic.w	r3, r3, #3
 801957e:	687a      	ldr	r2, [r7, #4]
 8019580:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8019582:	687b      	ldr	r3, [r7, #4]
 8019584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8019586:	4618      	mov	r0, r3
 8019588:	3714      	adds	r7, #20
 801958a:	46bd      	mov	sp, r7
 801958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019590:	4770      	bx	lr
 8019592:	bf00      	nop
 8019594:	aaaaaaab 	.word	0xaaaaaaab
 8019598:	08002360 	.word	0x08002360

0801959c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801959c:	b480      	push	{r7}
 801959e:	b085      	sub	sp, #20
 80195a0:	af00      	add	r7, sp, #0
 80195a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80195a4:	2300      	movs	r3, #0
 80195a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80195a8:	687b      	ldr	r3, [r7, #4]
 80195aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80195ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80195ae:	687b      	ldr	r3, [r7, #4]
 80195b0:	699b      	ldr	r3, [r3, #24]
 80195b2:	2b00      	cmp	r3, #0
 80195b4:	d11f      	bne.n	80195f6 <DMA_CheckFifoParam+0x5a>
 80195b6:	68bb      	ldr	r3, [r7, #8]
 80195b8:	2b03      	cmp	r3, #3
 80195ba:	d856      	bhi.n	801966a <DMA_CheckFifoParam+0xce>
 80195bc:	a201      	add	r2, pc, #4	; (adr r2, 80195c4 <DMA_CheckFifoParam+0x28>)
 80195be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80195c2:	bf00      	nop
 80195c4:	080195d5 	.word	0x080195d5
 80195c8:	080195e7 	.word	0x080195e7
 80195cc:	080195d5 	.word	0x080195d5
 80195d0:	0801966b 	.word	0x0801966b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80195d4:	687b      	ldr	r3, [r7, #4]
 80195d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80195d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80195dc:	2b00      	cmp	r3, #0
 80195de:	d046      	beq.n	801966e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80195e0:	2301      	movs	r3, #1
 80195e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80195e4:	e043      	b.n	801966e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80195e6:	687b      	ldr	r3, [r7, #4]
 80195e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80195ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80195ee:	d140      	bne.n	8019672 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80195f0:	2301      	movs	r3, #1
 80195f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80195f4:	e03d      	b.n	8019672 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80195f6:	687b      	ldr	r3, [r7, #4]
 80195f8:	699b      	ldr	r3, [r3, #24]
 80195fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80195fe:	d121      	bne.n	8019644 <DMA_CheckFifoParam+0xa8>
 8019600:	68bb      	ldr	r3, [r7, #8]
 8019602:	2b03      	cmp	r3, #3
 8019604:	d837      	bhi.n	8019676 <DMA_CheckFifoParam+0xda>
 8019606:	a201      	add	r2, pc, #4	; (adr r2, 801960c <DMA_CheckFifoParam+0x70>)
 8019608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801960c:	0801961d 	.word	0x0801961d
 8019610:	08019623 	.word	0x08019623
 8019614:	0801961d 	.word	0x0801961d
 8019618:	08019635 	.word	0x08019635
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 801961c:	2301      	movs	r3, #1
 801961e:	73fb      	strb	r3, [r7, #15]
      break;
 8019620:	e030      	b.n	8019684 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019626:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801962a:	2b00      	cmp	r3, #0
 801962c:	d025      	beq.n	801967a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 801962e:	2301      	movs	r3, #1
 8019630:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8019632:	e022      	b.n	801967a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8019634:	687b      	ldr	r3, [r7, #4]
 8019636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019638:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801963c:	d11f      	bne.n	801967e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 801963e:	2301      	movs	r3, #1
 8019640:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8019642:	e01c      	b.n	801967e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8019644:	68bb      	ldr	r3, [r7, #8]
 8019646:	2b02      	cmp	r3, #2
 8019648:	d903      	bls.n	8019652 <DMA_CheckFifoParam+0xb6>
 801964a:	68bb      	ldr	r3, [r7, #8]
 801964c:	2b03      	cmp	r3, #3
 801964e:	d003      	beq.n	8019658 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8019650:	e018      	b.n	8019684 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8019652:	2301      	movs	r3, #1
 8019654:	73fb      	strb	r3, [r7, #15]
      break;
 8019656:	e015      	b.n	8019684 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8019658:	687b      	ldr	r3, [r7, #4]
 801965a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801965c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8019660:	2b00      	cmp	r3, #0
 8019662:	d00e      	beq.n	8019682 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8019664:	2301      	movs	r3, #1
 8019666:	73fb      	strb	r3, [r7, #15]
      break;
 8019668:	e00b      	b.n	8019682 <DMA_CheckFifoParam+0xe6>
      break;
 801966a:	bf00      	nop
 801966c:	e00a      	b.n	8019684 <DMA_CheckFifoParam+0xe8>
      break;
 801966e:	bf00      	nop
 8019670:	e008      	b.n	8019684 <DMA_CheckFifoParam+0xe8>
      break;
 8019672:	bf00      	nop
 8019674:	e006      	b.n	8019684 <DMA_CheckFifoParam+0xe8>
      break;
 8019676:	bf00      	nop
 8019678:	e004      	b.n	8019684 <DMA_CheckFifoParam+0xe8>
      break;
 801967a:	bf00      	nop
 801967c:	e002      	b.n	8019684 <DMA_CheckFifoParam+0xe8>
      break;   
 801967e:	bf00      	nop
 8019680:	e000      	b.n	8019684 <DMA_CheckFifoParam+0xe8>
      break;
 8019682:	bf00      	nop
    }
  } 
  
  return status; 
 8019684:	7bfb      	ldrb	r3, [r7, #15]
}
 8019686:	4618      	mov	r0, r3
 8019688:	3714      	adds	r7, #20
 801968a:	46bd      	mov	sp, r7
 801968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019690:	4770      	bx	lr
 8019692:	bf00      	nop

08019694 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8019694:	b580      	push	{r7, lr}
 8019696:	b086      	sub	sp, #24
 8019698:	af00      	add	r7, sp, #0
 801969a:	60f8      	str	r0, [r7, #12]
 801969c:	60b9      	str	r1, [r7, #8]
 801969e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80196a2:	2301      	movs	r3, #1
 80196a4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80196a6:	4b23      	ldr	r3, [pc, #140]	; (8019734 <HAL_FLASH_Program+0xa0>)
 80196a8:	7e1b      	ldrb	r3, [r3, #24]
 80196aa:	2b01      	cmp	r3, #1
 80196ac:	d101      	bne.n	80196b2 <HAL_FLASH_Program+0x1e>
 80196ae:	2302      	movs	r3, #2
 80196b0:	e03b      	b.n	801972a <HAL_FLASH_Program+0x96>
 80196b2:	4b20      	ldr	r3, [pc, #128]	; (8019734 <HAL_FLASH_Program+0xa0>)
 80196b4:	2201      	movs	r2, #1
 80196b6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80196b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80196bc:	f000 f870 	bl	80197a0 <FLASH_WaitForLastOperation>
 80196c0:	4603      	mov	r3, r0
 80196c2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80196c4:	7dfb      	ldrb	r3, [r7, #23]
 80196c6:	2b00      	cmp	r3, #0
 80196c8:	d12b      	bne.n	8019722 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80196ca:	68fb      	ldr	r3, [r7, #12]
 80196cc:	2b00      	cmp	r3, #0
 80196ce:	d105      	bne.n	80196dc <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80196d0:	783b      	ldrb	r3, [r7, #0]
 80196d2:	4619      	mov	r1, r3
 80196d4:	68b8      	ldr	r0, [r7, #8]
 80196d6:	f000 f91b 	bl	8019910 <FLASH_Program_Byte>
 80196da:	e016      	b.n	801970a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80196dc:	68fb      	ldr	r3, [r7, #12]
 80196de:	2b01      	cmp	r3, #1
 80196e0:	d105      	bne.n	80196ee <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80196e2:	883b      	ldrh	r3, [r7, #0]
 80196e4:	4619      	mov	r1, r3
 80196e6:	68b8      	ldr	r0, [r7, #8]
 80196e8:	f000 f8ee 	bl	80198c8 <FLASH_Program_HalfWord>
 80196ec:	e00d      	b.n	801970a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80196ee:	68fb      	ldr	r3, [r7, #12]
 80196f0:	2b02      	cmp	r3, #2
 80196f2:	d105      	bne.n	8019700 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80196f4:	683b      	ldr	r3, [r7, #0]
 80196f6:	4619      	mov	r1, r3
 80196f8:	68b8      	ldr	r0, [r7, #8]
 80196fa:	f000 f8c3 	bl	8019884 <FLASH_Program_Word>
 80196fe:	e004      	b.n	801970a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8019700:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019704:	68b8      	ldr	r0, [r7, #8]
 8019706:	f000 f88b 	bl	8019820 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801970a:	f24c 3050 	movw	r0, #50000	; 0xc350
 801970e:	f000 f847 	bl	80197a0 <FLASH_WaitForLastOperation>
 8019712:	4603      	mov	r3, r0
 8019714:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8019716:	4b08      	ldr	r3, [pc, #32]	; (8019738 <HAL_FLASH_Program+0xa4>)
 8019718:	691b      	ldr	r3, [r3, #16]
 801971a:	4a07      	ldr	r2, [pc, #28]	; (8019738 <HAL_FLASH_Program+0xa4>)
 801971c:	f023 0301 	bic.w	r3, r3, #1
 8019720:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8019722:	4b04      	ldr	r3, [pc, #16]	; (8019734 <HAL_FLASH_Program+0xa0>)
 8019724:	2200      	movs	r2, #0
 8019726:	761a      	strb	r2, [r3, #24]
  
  return status;
 8019728:	7dfb      	ldrb	r3, [r7, #23]
}
 801972a:	4618      	mov	r0, r3
 801972c:	3718      	adds	r7, #24
 801972e:	46bd      	mov	sp, r7
 8019730:	bd80      	pop	{r7, pc}
 8019732:	bf00      	nop
 8019734:	20006c28 	.word	0x20006c28
 8019738:	40023c00 	.word	0x40023c00

0801973c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 801973c:	b480      	push	{r7}
 801973e:	b083      	sub	sp, #12
 8019740:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8019742:	2300      	movs	r3, #0
 8019744:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8019746:	4b0b      	ldr	r3, [pc, #44]	; (8019774 <HAL_FLASH_Unlock+0x38>)
 8019748:	691b      	ldr	r3, [r3, #16]
 801974a:	2b00      	cmp	r3, #0
 801974c:	da0b      	bge.n	8019766 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 801974e:	4b09      	ldr	r3, [pc, #36]	; (8019774 <HAL_FLASH_Unlock+0x38>)
 8019750:	4a09      	ldr	r2, [pc, #36]	; (8019778 <HAL_FLASH_Unlock+0x3c>)
 8019752:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8019754:	4b07      	ldr	r3, [pc, #28]	; (8019774 <HAL_FLASH_Unlock+0x38>)
 8019756:	4a09      	ldr	r2, [pc, #36]	; (801977c <HAL_FLASH_Unlock+0x40>)
 8019758:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 801975a:	4b06      	ldr	r3, [pc, #24]	; (8019774 <HAL_FLASH_Unlock+0x38>)
 801975c:	691b      	ldr	r3, [r3, #16]
 801975e:	2b00      	cmp	r3, #0
 8019760:	da01      	bge.n	8019766 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8019762:	2301      	movs	r3, #1
 8019764:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8019766:	79fb      	ldrb	r3, [r7, #7]
}
 8019768:	4618      	mov	r0, r3
 801976a:	370c      	adds	r7, #12
 801976c:	46bd      	mov	sp, r7
 801976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019772:	4770      	bx	lr
 8019774:	40023c00 	.word	0x40023c00
 8019778:	45670123 	.word	0x45670123
 801977c:	cdef89ab 	.word	0xcdef89ab

08019780 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8019780:	b480      	push	{r7}
 8019782:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8019784:	4b05      	ldr	r3, [pc, #20]	; (801979c <HAL_FLASH_Lock+0x1c>)
 8019786:	691b      	ldr	r3, [r3, #16]
 8019788:	4a04      	ldr	r2, [pc, #16]	; (801979c <HAL_FLASH_Lock+0x1c>)
 801978a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801978e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8019790:	2300      	movs	r3, #0
}
 8019792:	4618      	mov	r0, r3
 8019794:	46bd      	mov	sp, r7
 8019796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801979a:	4770      	bx	lr
 801979c:	40023c00 	.word	0x40023c00

080197a0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80197a0:	b580      	push	{r7, lr}
 80197a2:	b084      	sub	sp, #16
 80197a4:	af00      	add	r7, sp, #0
 80197a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80197a8:	2300      	movs	r3, #0
 80197aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80197ac:	4b1a      	ldr	r3, [pc, #104]	; (8019818 <FLASH_WaitForLastOperation+0x78>)
 80197ae:	2200      	movs	r2, #0
 80197b0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80197b2:	f7ff f819 	bl	80187e8 <HAL_GetTick>
 80197b6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80197b8:	e010      	b.n	80197dc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80197ba:	687b      	ldr	r3, [r7, #4]
 80197bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80197c0:	d00c      	beq.n	80197dc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80197c2:	687b      	ldr	r3, [r7, #4]
 80197c4:	2b00      	cmp	r3, #0
 80197c6:	d007      	beq.n	80197d8 <FLASH_WaitForLastOperation+0x38>
 80197c8:	f7ff f80e 	bl	80187e8 <HAL_GetTick>
 80197cc:	4602      	mov	r2, r0
 80197ce:	68fb      	ldr	r3, [r7, #12]
 80197d0:	1ad3      	subs	r3, r2, r3
 80197d2:	687a      	ldr	r2, [r7, #4]
 80197d4:	429a      	cmp	r2, r3
 80197d6:	d201      	bcs.n	80197dc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80197d8:	2303      	movs	r3, #3
 80197da:	e019      	b.n	8019810 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80197dc:	4b0f      	ldr	r3, [pc, #60]	; (801981c <FLASH_WaitForLastOperation+0x7c>)
 80197de:	68db      	ldr	r3, [r3, #12]
 80197e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80197e4:	2b00      	cmp	r3, #0
 80197e6:	d1e8      	bne.n	80197ba <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80197e8:	4b0c      	ldr	r3, [pc, #48]	; (801981c <FLASH_WaitForLastOperation+0x7c>)
 80197ea:	68db      	ldr	r3, [r3, #12]
 80197ec:	f003 0301 	and.w	r3, r3, #1
 80197f0:	2b00      	cmp	r3, #0
 80197f2:	d002      	beq.n	80197fa <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80197f4:	4b09      	ldr	r3, [pc, #36]	; (801981c <FLASH_WaitForLastOperation+0x7c>)
 80197f6:	2201      	movs	r2, #1
 80197f8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80197fa:	4b08      	ldr	r3, [pc, #32]	; (801981c <FLASH_WaitForLastOperation+0x7c>)
 80197fc:	68db      	ldr	r3, [r3, #12]
 80197fe:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8019802:	2b00      	cmp	r3, #0
 8019804:	d003      	beq.n	801980e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8019806:	f000 f8a5 	bl	8019954 <FLASH_SetErrorCode>
    return HAL_ERROR;
 801980a:	2301      	movs	r3, #1
 801980c:	e000      	b.n	8019810 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 801980e:	2300      	movs	r3, #0
  
}  
 8019810:	4618      	mov	r0, r3
 8019812:	3710      	adds	r7, #16
 8019814:	46bd      	mov	sp, r7
 8019816:	bd80      	pop	{r7, pc}
 8019818:	20006c28 	.word	0x20006c28
 801981c:	40023c00 	.word	0x40023c00

08019820 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8019820:	b480      	push	{r7}
 8019822:	b085      	sub	sp, #20
 8019824:	af00      	add	r7, sp, #0
 8019826:	60f8      	str	r0, [r7, #12]
 8019828:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801982c:	4b14      	ldr	r3, [pc, #80]	; (8019880 <FLASH_Program_DoubleWord+0x60>)
 801982e:	691b      	ldr	r3, [r3, #16]
 8019830:	4a13      	ldr	r2, [pc, #76]	; (8019880 <FLASH_Program_DoubleWord+0x60>)
 8019832:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019836:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8019838:	4b11      	ldr	r3, [pc, #68]	; (8019880 <FLASH_Program_DoubleWord+0x60>)
 801983a:	691b      	ldr	r3, [r3, #16]
 801983c:	4a10      	ldr	r2, [pc, #64]	; (8019880 <FLASH_Program_DoubleWord+0x60>)
 801983e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8019842:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8019844:	4b0e      	ldr	r3, [pc, #56]	; (8019880 <FLASH_Program_DoubleWord+0x60>)
 8019846:	691b      	ldr	r3, [r3, #16]
 8019848:	4a0d      	ldr	r2, [pc, #52]	; (8019880 <FLASH_Program_DoubleWord+0x60>)
 801984a:	f043 0301 	orr.w	r3, r3, #1
 801984e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8019850:	68fb      	ldr	r3, [r7, #12]
 8019852:	683a      	ldr	r2, [r7, #0]
 8019854:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8019856:	f3bf 8f6f 	isb	sy
}
 801985a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 801985c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8019860:	f04f 0200 	mov.w	r2, #0
 8019864:	f04f 0300 	mov.w	r3, #0
 8019868:	000a      	movs	r2, r1
 801986a:	2300      	movs	r3, #0
 801986c:	68f9      	ldr	r1, [r7, #12]
 801986e:	3104      	adds	r1, #4
 8019870:	4613      	mov	r3, r2
 8019872:	600b      	str	r3, [r1, #0]
}
 8019874:	bf00      	nop
 8019876:	3714      	adds	r7, #20
 8019878:	46bd      	mov	sp, r7
 801987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801987e:	4770      	bx	lr
 8019880:	40023c00 	.word	0x40023c00

08019884 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8019884:	b480      	push	{r7}
 8019886:	b083      	sub	sp, #12
 8019888:	af00      	add	r7, sp, #0
 801988a:	6078      	str	r0, [r7, #4]
 801988c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801988e:	4b0d      	ldr	r3, [pc, #52]	; (80198c4 <FLASH_Program_Word+0x40>)
 8019890:	691b      	ldr	r3, [r3, #16]
 8019892:	4a0c      	ldr	r2, [pc, #48]	; (80198c4 <FLASH_Program_Word+0x40>)
 8019894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019898:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 801989a:	4b0a      	ldr	r3, [pc, #40]	; (80198c4 <FLASH_Program_Word+0x40>)
 801989c:	691b      	ldr	r3, [r3, #16]
 801989e:	4a09      	ldr	r2, [pc, #36]	; (80198c4 <FLASH_Program_Word+0x40>)
 80198a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80198a4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80198a6:	4b07      	ldr	r3, [pc, #28]	; (80198c4 <FLASH_Program_Word+0x40>)
 80198a8:	691b      	ldr	r3, [r3, #16]
 80198aa:	4a06      	ldr	r2, [pc, #24]	; (80198c4 <FLASH_Program_Word+0x40>)
 80198ac:	f043 0301 	orr.w	r3, r3, #1
 80198b0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	683a      	ldr	r2, [r7, #0]
 80198b6:	601a      	str	r2, [r3, #0]
}
 80198b8:	bf00      	nop
 80198ba:	370c      	adds	r7, #12
 80198bc:	46bd      	mov	sp, r7
 80198be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198c2:	4770      	bx	lr
 80198c4:	40023c00 	.word	0x40023c00

080198c8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80198c8:	b480      	push	{r7}
 80198ca:	b083      	sub	sp, #12
 80198cc:	af00      	add	r7, sp, #0
 80198ce:	6078      	str	r0, [r7, #4]
 80198d0:	460b      	mov	r3, r1
 80198d2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80198d4:	4b0d      	ldr	r3, [pc, #52]	; (801990c <FLASH_Program_HalfWord+0x44>)
 80198d6:	691b      	ldr	r3, [r3, #16]
 80198d8:	4a0c      	ldr	r2, [pc, #48]	; (801990c <FLASH_Program_HalfWord+0x44>)
 80198da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80198de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80198e0:	4b0a      	ldr	r3, [pc, #40]	; (801990c <FLASH_Program_HalfWord+0x44>)
 80198e2:	691b      	ldr	r3, [r3, #16]
 80198e4:	4a09      	ldr	r2, [pc, #36]	; (801990c <FLASH_Program_HalfWord+0x44>)
 80198e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80198ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80198ec:	4b07      	ldr	r3, [pc, #28]	; (801990c <FLASH_Program_HalfWord+0x44>)
 80198ee:	691b      	ldr	r3, [r3, #16]
 80198f0:	4a06      	ldr	r2, [pc, #24]	; (801990c <FLASH_Program_HalfWord+0x44>)
 80198f2:	f043 0301 	orr.w	r3, r3, #1
 80198f6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80198f8:	687b      	ldr	r3, [r7, #4]
 80198fa:	887a      	ldrh	r2, [r7, #2]
 80198fc:	801a      	strh	r2, [r3, #0]
}
 80198fe:	bf00      	nop
 8019900:	370c      	adds	r7, #12
 8019902:	46bd      	mov	sp, r7
 8019904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019908:	4770      	bx	lr
 801990a:	bf00      	nop
 801990c:	40023c00 	.word	0x40023c00

08019910 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8019910:	b480      	push	{r7}
 8019912:	b083      	sub	sp, #12
 8019914:	af00      	add	r7, sp, #0
 8019916:	6078      	str	r0, [r7, #4]
 8019918:	460b      	mov	r3, r1
 801991a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801991c:	4b0c      	ldr	r3, [pc, #48]	; (8019950 <FLASH_Program_Byte+0x40>)
 801991e:	691b      	ldr	r3, [r3, #16]
 8019920:	4a0b      	ldr	r2, [pc, #44]	; (8019950 <FLASH_Program_Byte+0x40>)
 8019922:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019926:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8019928:	4b09      	ldr	r3, [pc, #36]	; (8019950 <FLASH_Program_Byte+0x40>)
 801992a:	4a09      	ldr	r2, [pc, #36]	; (8019950 <FLASH_Program_Byte+0x40>)
 801992c:	691b      	ldr	r3, [r3, #16]
 801992e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8019930:	4b07      	ldr	r3, [pc, #28]	; (8019950 <FLASH_Program_Byte+0x40>)
 8019932:	691b      	ldr	r3, [r3, #16]
 8019934:	4a06      	ldr	r2, [pc, #24]	; (8019950 <FLASH_Program_Byte+0x40>)
 8019936:	f043 0301 	orr.w	r3, r3, #1
 801993a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 801993c:	687b      	ldr	r3, [r7, #4]
 801993e:	78fa      	ldrb	r2, [r7, #3]
 8019940:	701a      	strb	r2, [r3, #0]
}
 8019942:	bf00      	nop
 8019944:	370c      	adds	r7, #12
 8019946:	46bd      	mov	sp, r7
 8019948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801994c:	4770      	bx	lr
 801994e:	bf00      	nop
 8019950:	40023c00 	.word	0x40023c00

08019954 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8019954:	b480      	push	{r7}
 8019956:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8019958:	4b2f      	ldr	r3, [pc, #188]	; (8019a18 <FLASH_SetErrorCode+0xc4>)
 801995a:	68db      	ldr	r3, [r3, #12]
 801995c:	f003 0310 	and.w	r3, r3, #16
 8019960:	2b00      	cmp	r3, #0
 8019962:	d008      	beq.n	8019976 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8019964:	4b2d      	ldr	r3, [pc, #180]	; (8019a1c <FLASH_SetErrorCode+0xc8>)
 8019966:	69db      	ldr	r3, [r3, #28]
 8019968:	f043 0310 	orr.w	r3, r3, #16
 801996c:	4a2b      	ldr	r2, [pc, #172]	; (8019a1c <FLASH_SetErrorCode+0xc8>)
 801996e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8019970:	4b29      	ldr	r3, [pc, #164]	; (8019a18 <FLASH_SetErrorCode+0xc4>)
 8019972:	2210      	movs	r2, #16
 8019974:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8019976:	4b28      	ldr	r3, [pc, #160]	; (8019a18 <FLASH_SetErrorCode+0xc4>)
 8019978:	68db      	ldr	r3, [r3, #12]
 801997a:	f003 0320 	and.w	r3, r3, #32
 801997e:	2b00      	cmp	r3, #0
 8019980:	d008      	beq.n	8019994 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8019982:	4b26      	ldr	r3, [pc, #152]	; (8019a1c <FLASH_SetErrorCode+0xc8>)
 8019984:	69db      	ldr	r3, [r3, #28]
 8019986:	f043 0308 	orr.w	r3, r3, #8
 801998a:	4a24      	ldr	r2, [pc, #144]	; (8019a1c <FLASH_SetErrorCode+0xc8>)
 801998c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 801998e:	4b22      	ldr	r3, [pc, #136]	; (8019a18 <FLASH_SetErrorCode+0xc4>)
 8019990:	2220      	movs	r2, #32
 8019992:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8019994:	4b20      	ldr	r3, [pc, #128]	; (8019a18 <FLASH_SetErrorCode+0xc4>)
 8019996:	68db      	ldr	r3, [r3, #12]
 8019998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801999c:	2b00      	cmp	r3, #0
 801999e:	d008      	beq.n	80199b2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80199a0:	4b1e      	ldr	r3, [pc, #120]	; (8019a1c <FLASH_SetErrorCode+0xc8>)
 80199a2:	69db      	ldr	r3, [r3, #28]
 80199a4:	f043 0304 	orr.w	r3, r3, #4
 80199a8:	4a1c      	ldr	r2, [pc, #112]	; (8019a1c <FLASH_SetErrorCode+0xc8>)
 80199aa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80199ac:	4b1a      	ldr	r3, [pc, #104]	; (8019a18 <FLASH_SetErrorCode+0xc4>)
 80199ae:	2240      	movs	r2, #64	; 0x40
 80199b0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80199b2:	4b19      	ldr	r3, [pc, #100]	; (8019a18 <FLASH_SetErrorCode+0xc4>)
 80199b4:	68db      	ldr	r3, [r3, #12]
 80199b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80199ba:	2b00      	cmp	r3, #0
 80199bc:	d008      	beq.n	80199d0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80199be:	4b17      	ldr	r3, [pc, #92]	; (8019a1c <FLASH_SetErrorCode+0xc8>)
 80199c0:	69db      	ldr	r3, [r3, #28]
 80199c2:	f043 0302 	orr.w	r3, r3, #2
 80199c6:	4a15      	ldr	r2, [pc, #84]	; (8019a1c <FLASH_SetErrorCode+0xc8>)
 80199c8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80199ca:	4b13      	ldr	r3, [pc, #76]	; (8019a18 <FLASH_SetErrorCode+0xc4>)
 80199cc:	2280      	movs	r2, #128	; 0x80
 80199ce:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80199d0:	4b11      	ldr	r3, [pc, #68]	; (8019a18 <FLASH_SetErrorCode+0xc4>)
 80199d2:	68db      	ldr	r3, [r3, #12]
 80199d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80199d8:	2b00      	cmp	r3, #0
 80199da:	d009      	beq.n	80199f0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80199dc:	4b0f      	ldr	r3, [pc, #60]	; (8019a1c <FLASH_SetErrorCode+0xc8>)
 80199de:	69db      	ldr	r3, [r3, #28]
 80199e0:	f043 0301 	orr.w	r3, r3, #1
 80199e4:	4a0d      	ldr	r2, [pc, #52]	; (8019a1c <FLASH_SetErrorCode+0xc8>)
 80199e6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80199e8:	4b0b      	ldr	r3, [pc, #44]	; (8019a18 <FLASH_SetErrorCode+0xc4>)
 80199ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80199ee:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80199f0:	4b09      	ldr	r3, [pc, #36]	; (8019a18 <FLASH_SetErrorCode+0xc4>)
 80199f2:	68db      	ldr	r3, [r3, #12]
 80199f4:	f003 0302 	and.w	r3, r3, #2
 80199f8:	2b00      	cmp	r3, #0
 80199fa:	d008      	beq.n	8019a0e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80199fc:	4b07      	ldr	r3, [pc, #28]	; (8019a1c <FLASH_SetErrorCode+0xc8>)
 80199fe:	69db      	ldr	r3, [r3, #28]
 8019a00:	f043 0320 	orr.w	r3, r3, #32
 8019a04:	4a05      	ldr	r2, [pc, #20]	; (8019a1c <FLASH_SetErrorCode+0xc8>)
 8019a06:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8019a08:	4b03      	ldr	r3, [pc, #12]	; (8019a18 <FLASH_SetErrorCode+0xc4>)
 8019a0a:	2202      	movs	r2, #2
 8019a0c:	60da      	str	r2, [r3, #12]
  }
}
 8019a0e:	bf00      	nop
 8019a10:	46bd      	mov	sp, r7
 8019a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a16:	4770      	bx	lr
 8019a18:	40023c00 	.word	0x40023c00
 8019a1c:	20006c28 	.word	0x20006c28

08019a20 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8019a20:	b580      	push	{r7, lr}
 8019a22:	b084      	sub	sp, #16
 8019a24:	af00      	add	r7, sp, #0
 8019a26:	6078      	str	r0, [r7, #4]
 8019a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8019a2a:	2301      	movs	r3, #1
 8019a2c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8019a2e:	2300      	movs	r3, #0
 8019a30:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8019a32:	4b31      	ldr	r3, [pc, #196]	; (8019af8 <HAL_FLASHEx_Erase+0xd8>)
 8019a34:	7e1b      	ldrb	r3, [r3, #24]
 8019a36:	2b01      	cmp	r3, #1
 8019a38:	d101      	bne.n	8019a3e <HAL_FLASHEx_Erase+0x1e>
 8019a3a:	2302      	movs	r3, #2
 8019a3c:	e058      	b.n	8019af0 <HAL_FLASHEx_Erase+0xd0>
 8019a3e:	4b2e      	ldr	r3, [pc, #184]	; (8019af8 <HAL_FLASHEx_Erase+0xd8>)
 8019a40:	2201      	movs	r2, #1
 8019a42:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8019a44:	f24c 3050 	movw	r0, #50000	; 0xc350
 8019a48:	f7ff feaa 	bl	80197a0 <FLASH_WaitForLastOperation>
 8019a4c:	4603      	mov	r3, r0
 8019a4e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8019a50:	7bfb      	ldrb	r3, [r7, #15]
 8019a52:	2b00      	cmp	r3, #0
 8019a54:	d148      	bne.n	8019ae8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8019a56:	683b      	ldr	r3, [r7, #0]
 8019a58:	f04f 32ff 	mov.w	r2, #4294967295
 8019a5c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8019a5e:	687b      	ldr	r3, [r7, #4]
 8019a60:	681b      	ldr	r3, [r3, #0]
 8019a62:	2b01      	cmp	r3, #1
 8019a64:	d115      	bne.n	8019a92 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8019a66:	687b      	ldr	r3, [r7, #4]
 8019a68:	691b      	ldr	r3, [r3, #16]
 8019a6a:	b2da      	uxtb	r2, r3
 8019a6c:	687b      	ldr	r3, [r7, #4]
 8019a6e:	685b      	ldr	r3, [r3, #4]
 8019a70:	4619      	mov	r1, r3
 8019a72:	4610      	mov	r0, r2
 8019a74:	f000 f844 	bl	8019b00 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8019a78:	f24c 3050 	movw	r0, #50000	; 0xc350
 8019a7c:	f7ff fe90 	bl	80197a0 <FLASH_WaitForLastOperation>
 8019a80:	4603      	mov	r3, r0
 8019a82:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8019a84:	4b1d      	ldr	r3, [pc, #116]	; (8019afc <HAL_FLASHEx_Erase+0xdc>)
 8019a86:	691b      	ldr	r3, [r3, #16]
 8019a88:	4a1c      	ldr	r2, [pc, #112]	; (8019afc <HAL_FLASHEx_Erase+0xdc>)
 8019a8a:	f023 0304 	bic.w	r3, r3, #4
 8019a8e:	6113      	str	r3, [r2, #16]
 8019a90:	e028      	b.n	8019ae4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8019a92:	687b      	ldr	r3, [r7, #4]
 8019a94:	689b      	ldr	r3, [r3, #8]
 8019a96:	60bb      	str	r3, [r7, #8]
 8019a98:	e01c      	b.n	8019ad4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8019a9a:	687b      	ldr	r3, [r7, #4]
 8019a9c:	691b      	ldr	r3, [r3, #16]
 8019a9e:	b2db      	uxtb	r3, r3
 8019aa0:	4619      	mov	r1, r3
 8019aa2:	68b8      	ldr	r0, [r7, #8]
 8019aa4:	f000 f850 	bl	8019b48 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8019aa8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8019aac:	f7ff fe78 	bl	80197a0 <FLASH_WaitForLastOperation>
 8019ab0:	4603      	mov	r3, r0
 8019ab2:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8019ab4:	4b11      	ldr	r3, [pc, #68]	; (8019afc <HAL_FLASHEx_Erase+0xdc>)
 8019ab6:	691b      	ldr	r3, [r3, #16]
 8019ab8:	4a10      	ldr	r2, [pc, #64]	; (8019afc <HAL_FLASHEx_Erase+0xdc>)
 8019aba:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8019abe:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8019ac0:	7bfb      	ldrb	r3, [r7, #15]
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	d003      	beq.n	8019ace <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8019ac6:	683b      	ldr	r3, [r7, #0]
 8019ac8:	68ba      	ldr	r2, [r7, #8]
 8019aca:	601a      	str	r2, [r3, #0]
          break;
 8019acc:	e00a      	b.n	8019ae4 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8019ace:	68bb      	ldr	r3, [r7, #8]
 8019ad0:	3301      	adds	r3, #1
 8019ad2:	60bb      	str	r3, [r7, #8]
 8019ad4:	687b      	ldr	r3, [r7, #4]
 8019ad6:	68da      	ldr	r2, [r3, #12]
 8019ad8:	687b      	ldr	r3, [r7, #4]
 8019ada:	689b      	ldr	r3, [r3, #8]
 8019adc:	4413      	add	r3, r2
 8019ade:	68ba      	ldr	r2, [r7, #8]
 8019ae0:	429a      	cmp	r2, r3
 8019ae2:	d3da      	bcc.n	8019a9a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8019ae4:	f000 f878 	bl	8019bd8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8019ae8:	4b03      	ldr	r3, [pc, #12]	; (8019af8 <HAL_FLASHEx_Erase+0xd8>)
 8019aea:	2200      	movs	r2, #0
 8019aec:	761a      	strb	r2, [r3, #24]

  return status;
 8019aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8019af0:	4618      	mov	r0, r3
 8019af2:	3710      	adds	r7, #16
 8019af4:	46bd      	mov	sp, r7
 8019af6:	bd80      	pop	{r7, pc}
 8019af8:	20006c28 	.word	0x20006c28
 8019afc:	40023c00 	.word	0x40023c00

08019b00 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8019b00:	b480      	push	{r7}
 8019b02:	b083      	sub	sp, #12
 8019b04:	af00      	add	r7, sp, #0
 8019b06:	4603      	mov	r3, r0
 8019b08:	6039      	str	r1, [r7, #0]
 8019b0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8019b0c:	4b0d      	ldr	r3, [pc, #52]	; (8019b44 <FLASH_MassErase+0x44>)
 8019b0e:	691b      	ldr	r3, [r3, #16]
 8019b10:	4a0c      	ldr	r2, [pc, #48]	; (8019b44 <FLASH_MassErase+0x44>)
 8019b12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019b16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8019b18:	4b0a      	ldr	r3, [pc, #40]	; (8019b44 <FLASH_MassErase+0x44>)
 8019b1a:	691b      	ldr	r3, [r3, #16]
 8019b1c:	4a09      	ldr	r2, [pc, #36]	; (8019b44 <FLASH_MassErase+0x44>)
 8019b1e:	f043 0304 	orr.w	r3, r3, #4
 8019b22:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8019b24:	4b07      	ldr	r3, [pc, #28]	; (8019b44 <FLASH_MassErase+0x44>)
 8019b26:	691a      	ldr	r2, [r3, #16]
 8019b28:	79fb      	ldrb	r3, [r7, #7]
 8019b2a:	021b      	lsls	r3, r3, #8
 8019b2c:	4313      	orrs	r3, r2
 8019b2e:	4a05      	ldr	r2, [pc, #20]	; (8019b44 <FLASH_MassErase+0x44>)
 8019b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019b34:	6113      	str	r3, [r2, #16]
}
 8019b36:	bf00      	nop
 8019b38:	370c      	adds	r7, #12
 8019b3a:	46bd      	mov	sp, r7
 8019b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b40:	4770      	bx	lr
 8019b42:	bf00      	nop
 8019b44:	40023c00 	.word	0x40023c00

08019b48 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8019b48:	b480      	push	{r7}
 8019b4a:	b085      	sub	sp, #20
 8019b4c:	af00      	add	r7, sp, #0
 8019b4e:	6078      	str	r0, [r7, #4]
 8019b50:	460b      	mov	r3, r1
 8019b52:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8019b54:	2300      	movs	r3, #0
 8019b56:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8019b58:	78fb      	ldrb	r3, [r7, #3]
 8019b5a:	2b00      	cmp	r3, #0
 8019b5c:	d102      	bne.n	8019b64 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8019b5e:	2300      	movs	r3, #0
 8019b60:	60fb      	str	r3, [r7, #12]
 8019b62:	e010      	b.n	8019b86 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8019b64:	78fb      	ldrb	r3, [r7, #3]
 8019b66:	2b01      	cmp	r3, #1
 8019b68:	d103      	bne.n	8019b72 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8019b6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019b6e:	60fb      	str	r3, [r7, #12]
 8019b70:	e009      	b.n	8019b86 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8019b72:	78fb      	ldrb	r3, [r7, #3]
 8019b74:	2b02      	cmp	r3, #2
 8019b76:	d103      	bne.n	8019b80 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8019b78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8019b7c:	60fb      	str	r3, [r7, #12]
 8019b7e:	e002      	b.n	8019b86 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8019b80:	f44f 7340 	mov.w	r3, #768	; 0x300
 8019b84:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8019b86:	4b13      	ldr	r3, [pc, #76]	; (8019bd4 <FLASH_Erase_Sector+0x8c>)
 8019b88:	691b      	ldr	r3, [r3, #16]
 8019b8a:	4a12      	ldr	r2, [pc, #72]	; (8019bd4 <FLASH_Erase_Sector+0x8c>)
 8019b8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019b90:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8019b92:	4b10      	ldr	r3, [pc, #64]	; (8019bd4 <FLASH_Erase_Sector+0x8c>)
 8019b94:	691a      	ldr	r2, [r3, #16]
 8019b96:	490f      	ldr	r1, [pc, #60]	; (8019bd4 <FLASH_Erase_Sector+0x8c>)
 8019b98:	68fb      	ldr	r3, [r7, #12]
 8019b9a:	4313      	orrs	r3, r2
 8019b9c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8019b9e:	4b0d      	ldr	r3, [pc, #52]	; (8019bd4 <FLASH_Erase_Sector+0x8c>)
 8019ba0:	691b      	ldr	r3, [r3, #16]
 8019ba2:	4a0c      	ldr	r2, [pc, #48]	; (8019bd4 <FLASH_Erase_Sector+0x8c>)
 8019ba4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8019ba8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8019baa:	4b0a      	ldr	r3, [pc, #40]	; (8019bd4 <FLASH_Erase_Sector+0x8c>)
 8019bac:	691a      	ldr	r2, [r3, #16]
 8019bae:	687b      	ldr	r3, [r7, #4]
 8019bb0:	00db      	lsls	r3, r3, #3
 8019bb2:	4313      	orrs	r3, r2
 8019bb4:	4a07      	ldr	r2, [pc, #28]	; (8019bd4 <FLASH_Erase_Sector+0x8c>)
 8019bb6:	f043 0302 	orr.w	r3, r3, #2
 8019bba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8019bbc:	4b05      	ldr	r3, [pc, #20]	; (8019bd4 <FLASH_Erase_Sector+0x8c>)
 8019bbe:	691b      	ldr	r3, [r3, #16]
 8019bc0:	4a04      	ldr	r2, [pc, #16]	; (8019bd4 <FLASH_Erase_Sector+0x8c>)
 8019bc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019bc6:	6113      	str	r3, [r2, #16]
}
 8019bc8:	bf00      	nop
 8019bca:	3714      	adds	r7, #20
 8019bcc:	46bd      	mov	sp, r7
 8019bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bd2:	4770      	bx	lr
 8019bd4:	40023c00 	.word	0x40023c00

08019bd8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8019bd8:	b480      	push	{r7}
 8019bda:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8019bdc:	4b20      	ldr	r3, [pc, #128]	; (8019c60 <FLASH_FlushCaches+0x88>)
 8019bde:	681b      	ldr	r3, [r3, #0]
 8019be0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019be4:	2b00      	cmp	r3, #0
 8019be6:	d017      	beq.n	8019c18 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8019be8:	4b1d      	ldr	r3, [pc, #116]	; (8019c60 <FLASH_FlushCaches+0x88>)
 8019bea:	681b      	ldr	r3, [r3, #0]
 8019bec:	4a1c      	ldr	r2, [pc, #112]	; (8019c60 <FLASH_FlushCaches+0x88>)
 8019bee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8019bf2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8019bf4:	4b1a      	ldr	r3, [pc, #104]	; (8019c60 <FLASH_FlushCaches+0x88>)
 8019bf6:	681b      	ldr	r3, [r3, #0]
 8019bf8:	4a19      	ldr	r2, [pc, #100]	; (8019c60 <FLASH_FlushCaches+0x88>)
 8019bfa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8019bfe:	6013      	str	r3, [r2, #0]
 8019c00:	4b17      	ldr	r3, [pc, #92]	; (8019c60 <FLASH_FlushCaches+0x88>)
 8019c02:	681b      	ldr	r3, [r3, #0]
 8019c04:	4a16      	ldr	r2, [pc, #88]	; (8019c60 <FLASH_FlushCaches+0x88>)
 8019c06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019c0a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8019c0c:	4b14      	ldr	r3, [pc, #80]	; (8019c60 <FLASH_FlushCaches+0x88>)
 8019c0e:	681b      	ldr	r3, [r3, #0]
 8019c10:	4a13      	ldr	r2, [pc, #76]	; (8019c60 <FLASH_FlushCaches+0x88>)
 8019c12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8019c16:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8019c18:	4b11      	ldr	r3, [pc, #68]	; (8019c60 <FLASH_FlushCaches+0x88>)
 8019c1a:	681b      	ldr	r3, [r3, #0]
 8019c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019c20:	2b00      	cmp	r3, #0
 8019c22:	d017      	beq.n	8019c54 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8019c24:	4b0e      	ldr	r3, [pc, #56]	; (8019c60 <FLASH_FlushCaches+0x88>)
 8019c26:	681b      	ldr	r3, [r3, #0]
 8019c28:	4a0d      	ldr	r2, [pc, #52]	; (8019c60 <FLASH_FlushCaches+0x88>)
 8019c2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8019c2e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8019c30:	4b0b      	ldr	r3, [pc, #44]	; (8019c60 <FLASH_FlushCaches+0x88>)
 8019c32:	681b      	ldr	r3, [r3, #0]
 8019c34:	4a0a      	ldr	r2, [pc, #40]	; (8019c60 <FLASH_FlushCaches+0x88>)
 8019c36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8019c3a:	6013      	str	r3, [r2, #0]
 8019c3c:	4b08      	ldr	r3, [pc, #32]	; (8019c60 <FLASH_FlushCaches+0x88>)
 8019c3e:	681b      	ldr	r3, [r3, #0]
 8019c40:	4a07      	ldr	r2, [pc, #28]	; (8019c60 <FLASH_FlushCaches+0x88>)
 8019c42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019c46:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8019c48:	4b05      	ldr	r3, [pc, #20]	; (8019c60 <FLASH_FlushCaches+0x88>)
 8019c4a:	681b      	ldr	r3, [r3, #0]
 8019c4c:	4a04      	ldr	r2, [pc, #16]	; (8019c60 <FLASH_FlushCaches+0x88>)
 8019c4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8019c52:	6013      	str	r3, [r2, #0]
  }
}
 8019c54:	bf00      	nop
 8019c56:	46bd      	mov	sp, r7
 8019c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c5c:	4770      	bx	lr
 8019c5e:	bf00      	nop
 8019c60:	40023c00 	.word	0x40023c00

08019c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8019c64:	b480      	push	{r7}
 8019c66:	b089      	sub	sp, #36	; 0x24
 8019c68:	af00      	add	r7, sp, #0
 8019c6a:	6078      	str	r0, [r7, #4]
 8019c6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8019c6e:	2300      	movs	r3, #0
 8019c70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8019c72:	2300      	movs	r3, #0
 8019c74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8019c76:	2300      	movs	r3, #0
 8019c78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8019c7a:	2300      	movs	r3, #0
 8019c7c:	61fb      	str	r3, [r7, #28]
 8019c7e:	e165      	b.n	8019f4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8019c80:	2201      	movs	r2, #1
 8019c82:	69fb      	ldr	r3, [r7, #28]
 8019c84:	fa02 f303 	lsl.w	r3, r2, r3
 8019c88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8019c8a:	683b      	ldr	r3, [r7, #0]
 8019c8c:	681b      	ldr	r3, [r3, #0]
 8019c8e:	697a      	ldr	r2, [r7, #20]
 8019c90:	4013      	ands	r3, r2
 8019c92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8019c94:	693a      	ldr	r2, [r7, #16]
 8019c96:	697b      	ldr	r3, [r7, #20]
 8019c98:	429a      	cmp	r2, r3
 8019c9a:	f040 8154 	bne.w	8019f46 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8019c9e:	683b      	ldr	r3, [r7, #0]
 8019ca0:	685b      	ldr	r3, [r3, #4]
 8019ca2:	f003 0303 	and.w	r3, r3, #3
 8019ca6:	2b01      	cmp	r3, #1
 8019ca8:	d005      	beq.n	8019cb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8019caa:	683b      	ldr	r3, [r7, #0]
 8019cac:	685b      	ldr	r3, [r3, #4]
 8019cae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8019cb2:	2b02      	cmp	r3, #2
 8019cb4:	d130      	bne.n	8019d18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8019cb6:	687b      	ldr	r3, [r7, #4]
 8019cb8:	689b      	ldr	r3, [r3, #8]
 8019cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8019cbc:	69fb      	ldr	r3, [r7, #28]
 8019cbe:	005b      	lsls	r3, r3, #1
 8019cc0:	2203      	movs	r2, #3
 8019cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8019cc6:	43db      	mvns	r3, r3
 8019cc8:	69ba      	ldr	r2, [r7, #24]
 8019cca:	4013      	ands	r3, r2
 8019ccc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8019cce:	683b      	ldr	r3, [r7, #0]
 8019cd0:	68da      	ldr	r2, [r3, #12]
 8019cd2:	69fb      	ldr	r3, [r7, #28]
 8019cd4:	005b      	lsls	r3, r3, #1
 8019cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8019cda:	69ba      	ldr	r2, [r7, #24]
 8019cdc:	4313      	orrs	r3, r2
 8019cde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8019ce0:	687b      	ldr	r3, [r7, #4]
 8019ce2:	69ba      	ldr	r2, [r7, #24]
 8019ce4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8019ce6:	687b      	ldr	r3, [r7, #4]
 8019ce8:	685b      	ldr	r3, [r3, #4]
 8019cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8019cec:	2201      	movs	r2, #1
 8019cee:	69fb      	ldr	r3, [r7, #28]
 8019cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8019cf4:	43db      	mvns	r3, r3
 8019cf6:	69ba      	ldr	r2, [r7, #24]
 8019cf8:	4013      	ands	r3, r2
 8019cfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8019cfc:	683b      	ldr	r3, [r7, #0]
 8019cfe:	685b      	ldr	r3, [r3, #4]
 8019d00:	091b      	lsrs	r3, r3, #4
 8019d02:	f003 0201 	and.w	r2, r3, #1
 8019d06:	69fb      	ldr	r3, [r7, #28]
 8019d08:	fa02 f303 	lsl.w	r3, r2, r3
 8019d0c:	69ba      	ldr	r2, [r7, #24]
 8019d0e:	4313      	orrs	r3, r2
 8019d10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8019d12:	687b      	ldr	r3, [r7, #4]
 8019d14:	69ba      	ldr	r2, [r7, #24]
 8019d16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8019d18:	683b      	ldr	r3, [r7, #0]
 8019d1a:	685b      	ldr	r3, [r3, #4]
 8019d1c:	f003 0303 	and.w	r3, r3, #3
 8019d20:	2b03      	cmp	r3, #3
 8019d22:	d017      	beq.n	8019d54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8019d24:	687b      	ldr	r3, [r7, #4]
 8019d26:	68db      	ldr	r3, [r3, #12]
 8019d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8019d2a:	69fb      	ldr	r3, [r7, #28]
 8019d2c:	005b      	lsls	r3, r3, #1
 8019d2e:	2203      	movs	r2, #3
 8019d30:	fa02 f303 	lsl.w	r3, r2, r3
 8019d34:	43db      	mvns	r3, r3
 8019d36:	69ba      	ldr	r2, [r7, #24]
 8019d38:	4013      	ands	r3, r2
 8019d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8019d3c:	683b      	ldr	r3, [r7, #0]
 8019d3e:	689a      	ldr	r2, [r3, #8]
 8019d40:	69fb      	ldr	r3, [r7, #28]
 8019d42:	005b      	lsls	r3, r3, #1
 8019d44:	fa02 f303 	lsl.w	r3, r2, r3
 8019d48:	69ba      	ldr	r2, [r7, #24]
 8019d4a:	4313      	orrs	r3, r2
 8019d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8019d4e:	687b      	ldr	r3, [r7, #4]
 8019d50:	69ba      	ldr	r2, [r7, #24]
 8019d52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8019d54:	683b      	ldr	r3, [r7, #0]
 8019d56:	685b      	ldr	r3, [r3, #4]
 8019d58:	f003 0303 	and.w	r3, r3, #3
 8019d5c:	2b02      	cmp	r3, #2
 8019d5e:	d123      	bne.n	8019da8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8019d60:	69fb      	ldr	r3, [r7, #28]
 8019d62:	08da      	lsrs	r2, r3, #3
 8019d64:	687b      	ldr	r3, [r7, #4]
 8019d66:	3208      	adds	r2, #8
 8019d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8019d6e:	69fb      	ldr	r3, [r7, #28]
 8019d70:	f003 0307 	and.w	r3, r3, #7
 8019d74:	009b      	lsls	r3, r3, #2
 8019d76:	220f      	movs	r2, #15
 8019d78:	fa02 f303 	lsl.w	r3, r2, r3
 8019d7c:	43db      	mvns	r3, r3
 8019d7e:	69ba      	ldr	r2, [r7, #24]
 8019d80:	4013      	ands	r3, r2
 8019d82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8019d84:	683b      	ldr	r3, [r7, #0]
 8019d86:	691a      	ldr	r2, [r3, #16]
 8019d88:	69fb      	ldr	r3, [r7, #28]
 8019d8a:	f003 0307 	and.w	r3, r3, #7
 8019d8e:	009b      	lsls	r3, r3, #2
 8019d90:	fa02 f303 	lsl.w	r3, r2, r3
 8019d94:	69ba      	ldr	r2, [r7, #24]
 8019d96:	4313      	orrs	r3, r2
 8019d98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8019d9a:	69fb      	ldr	r3, [r7, #28]
 8019d9c:	08da      	lsrs	r2, r3, #3
 8019d9e:	687b      	ldr	r3, [r7, #4]
 8019da0:	3208      	adds	r2, #8
 8019da2:	69b9      	ldr	r1, [r7, #24]
 8019da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	681b      	ldr	r3, [r3, #0]
 8019dac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8019dae:	69fb      	ldr	r3, [r7, #28]
 8019db0:	005b      	lsls	r3, r3, #1
 8019db2:	2203      	movs	r2, #3
 8019db4:	fa02 f303 	lsl.w	r3, r2, r3
 8019db8:	43db      	mvns	r3, r3
 8019dba:	69ba      	ldr	r2, [r7, #24]
 8019dbc:	4013      	ands	r3, r2
 8019dbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8019dc0:	683b      	ldr	r3, [r7, #0]
 8019dc2:	685b      	ldr	r3, [r3, #4]
 8019dc4:	f003 0203 	and.w	r2, r3, #3
 8019dc8:	69fb      	ldr	r3, [r7, #28]
 8019dca:	005b      	lsls	r3, r3, #1
 8019dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8019dd0:	69ba      	ldr	r2, [r7, #24]
 8019dd2:	4313      	orrs	r3, r2
 8019dd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8019dd6:	687b      	ldr	r3, [r7, #4]
 8019dd8:	69ba      	ldr	r2, [r7, #24]
 8019dda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8019ddc:	683b      	ldr	r3, [r7, #0]
 8019dde:	685b      	ldr	r3, [r3, #4]
 8019de0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8019de4:	2b00      	cmp	r3, #0
 8019de6:	f000 80ae 	beq.w	8019f46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8019dea:	2300      	movs	r3, #0
 8019dec:	60fb      	str	r3, [r7, #12]
 8019dee:	4b5d      	ldr	r3, [pc, #372]	; (8019f64 <HAL_GPIO_Init+0x300>)
 8019df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019df2:	4a5c      	ldr	r2, [pc, #368]	; (8019f64 <HAL_GPIO_Init+0x300>)
 8019df4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8019df8:	6453      	str	r3, [r2, #68]	; 0x44
 8019dfa:	4b5a      	ldr	r3, [pc, #360]	; (8019f64 <HAL_GPIO_Init+0x300>)
 8019dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8019e02:	60fb      	str	r3, [r7, #12]
 8019e04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8019e06:	4a58      	ldr	r2, [pc, #352]	; (8019f68 <HAL_GPIO_Init+0x304>)
 8019e08:	69fb      	ldr	r3, [r7, #28]
 8019e0a:	089b      	lsrs	r3, r3, #2
 8019e0c:	3302      	adds	r3, #2
 8019e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8019e14:	69fb      	ldr	r3, [r7, #28]
 8019e16:	f003 0303 	and.w	r3, r3, #3
 8019e1a:	009b      	lsls	r3, r3, #2
 8019e1c:	220f      	movs	r2, #15
 8019e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8019e22:	43db      	mvns	r3, r3
 8019e24:	69ba      	ldr	r2, [r7, #24]
 8019e26:	4013      	ands	r3, r2
 8019e28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8019e2a:	687b      	ldr	r3, [r7, #4]
 8019e2c:	4a4f      	ldr	r2, [pc, #316]	; (8019f6c <HAL_GPIO_Init+0x308>)
 8019e2e:	4293      	cmp	r3, r2
 8019e30:	d025      	beq.n	8019e7e <HAL_GPIO_Init+0x21a>
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	4a4e      	ldr	r2, [pc, #312]	; (8019f70 <HAL_GPIO_Init+0x30c>)
 8019e36:	4293      	cmp	r3, r2
 8019e38:	d01f      	beq.n	8019e7a <HAL_GPIO_Init+0x216>
 8019e3a:	687b      	ldr	r3, [r7, #4]
 8019e3c:	4a4d      	ldr	r2, [pc, #308]	; (8019f74 <HAL_GPIO_Init+0x310>)
 8019e3e:	4293      	cmp	r3, r2
 8019e40:	d019      	beq.n	8019e76 <HAL_GPIO_Init+0x212>
 8019e42:	687b      	ldr	r3, [r7, #4]
 8019e44:	4a4c      	ldr	r2, [pc, #304]	; (8019f78 <HAL_GPIO_Init+0x314>)
 8019e46:	4293      	cmp	r3, r2
 8019e48:	d013      	beq.n	8019e72 <HAL_GPIO_Init+0x20e>
 8019e4a:	687b      	ldr	r3, [r7, #4]
 8019e4c:	4a4b      	ldr	r2, [pc, #300]	; (8019f7c <HAL_GPIO_Init+0x318>)
 8019e4e:	4293      	cmp	r3, r2
 8019e50:	d00d      	beq.n	8019e6e <HAL_GPIO_Init+0x20a>
 8019e52:	687b      	ldr	r3, [r7, #4]
 8019e54:	4a4a      	ldr	r2, [pc, #296]	; (8019f80 <HAL_GPIO_Init+0x31c>)
 8019e56:	4293      	cmp	r3, r2
 8019e58:	d007      	beq.n	8019e6a <HAL_GPIO_Init+0x206>
 8019e5a:	687b      	ldr	r3, [r7, #4]
 8019e5c:	4a49      	ldr	r2, [pc, #292]	; (8019f84 <HAL_GPIO_Init+0x320>)
 8019e5e:	4293      	cmp	r3, r2
 8019e60:	d101      	bne.n	8019e66 <HAL_GPIO_Init+0x202>
 8019e62:	2306      	movs	r3, #6
 8019e64:	e00c      	b.n	8019e80 <HAL_GPIO_Init+0x21c>
 8019e66:	2307      	movs	r3, #7
 8019e68:	e00a      	b.n	8019e80 <HAL_GPIO_Init+0x21c>
 8019e6a:	2305      	movs	r3, #5
 8019e6c:	e008      	b.n	8019e80 <HAL_GPIO_Init+0x21c>
 8019e6e:	2304      	movs	r3, #4
 8019e70:	e006      	b.n	8019e80 <HAL_GPIO_Init+0x21c>
 8019e72:	2303      	movs	r3, #3
 8019e74:	e004      	b.n	8019e80 <HAL_GPIO_Init+0x21c>
 8019e76:	2302      	movs	r3, #2
 8019e78:	e002      	b.n	8019e80 <HAL_GPIO_Init+0x21c>
 8019e7a:	2301      	movs	r3, #1
 8019e7c:	e000      	b.n	8019e80 <HAL_GPIO_Init+0x21c>
 8019e7e:	2300      	movs	r3, #0
 8019e80:	69fa      	ldr	r2, [r7, #28]
 8019e82:	f002 0203 	and.w	r2, r2, #3
 8019e86:	0092      	lsls	r2, r2, #2
 8019e88:	4093      	lsls	r3, r2
 8019e8a:	69ba      	ldr	r2, [r7, #24]
 8019e8c:	4313      	orrs	r3, r2
 8019e8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8019e90:	4935      	ldr	r1, [pc, #212]	; (8019f68 <HAL_GPIO_Init+0x304>)
 8019e92:	69fb      	ldr	r3, [r7, #28]
 8019e94:	089b      	lsrs	r3, r3, #2
 8019e96:	3302      	adds	r3, #2
 8019e98:	69ba      	ldr	r2, [r7, #24]
 8019e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8019e9e:	4b3a      	ldr	r3, [pc, #232]	; (8019f88 <HAL_GPIO_Init+0x324>)
 8019ea0:	681b      	ldr	r3, [r3, #0]
 8019ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019ea4:	693b      	ldr	r3, [r7, #16]
 8019ea6:	43db      	mvns	r3, r3
 8019ea8:	69ba      	ldr	r2, [r7, #24]
 8019eaa:	4013      	ands	r3, r2
 8019eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8019eae:	683b      	ldr	r3, [r7, #0]
 8019eb0:	685b      	ldr	r3, [r3, #4]
 8019eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019eb6:	2b00      	cmp	r3, #0
 8019eb8:	d003      	beq.n	8019ec2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8019eba:	69ba      	ldr	r2, [r7, #24]
 8019ebc:	693b      	ldr	r3, [r7, #16]
 8019ebe:	4313      	orrs	r3, r2
 8019ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8019ec2:	4a31      	ldr	r2, [pc, #196]	; (8019f88 <HAL_GPIO_Init+0x324>)
 8019ec4:	69bb      	ldr	r3, [r7, #24]
 8019ec6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8019ec8:	4b2f      	ldr	r3, [pc, #188]	; (8019f88 <HAL_GPIO_Init+0x324>)
 8019eca:	685b      	ldr	r3, [r3, #4]
 8019ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019ece:	693b      	ldr	r3, [r7, #16]
 8019ed0:	43db      	mvns	r3, r3
 8019ed2:	69ba      	ldr	r2, [r7, #24]
 8019ed4:	4013      	ands	r3, r2
 8019ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8019ed8:	683b      	ldr	r3, [r7, #0]
 8019eda:	685b      	ldr	r3, [r3, #4]
 8019edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019ee0:	2b00      	cmp	r3, #0
 8019ee2:	d003      	beq.n	8019eec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8019ee4:	69ba      	ldr	r2, [r7, #24]
 8019ee6:	693b      	ldr	r3, [r7, #16]
 8019ee8:	4313      	orrs	r3, r2
 8019eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8019eec:	4a26      	ldr	r2, [pc, #152]	; (8019f88 <HAL_GPIO_Init+0x324>)
 8019eee:	69bb      	ldr	r3, [r7, #24]
 8019ef0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8019ef2:	4b25      	ldr	r3, [pc, #148]	; (8019f88 <HAL_GPIO_Init+0x324>)
 8019ef4:	689b      	ldr	r3, [r3, #8]
 8019ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019ef8:	693b      	ldr	r3, [r7, #16]
 8019efa:	43db      	mvns	r3, r3
 8019efc:	69ba      	ldr	r2, [r7, #24]
 8019efe:	4013      	ands	r3, r2
 8019f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8019f02:	683b      	ldr	r3, [r7, #0]
 8019f04:	685b      	ldr	r3, [r3, #4]
 8019f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8019f0a:	2b00      	cmp	r3, #0
 8019f0c:	d003      	beq.n	8019f16 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8019f0e:	69ba      	ldr	r2, [r7, #24]
 8019f10:	693b      	ldr	r3, [r7, #16]
 8019f12:	4313      	orrs	r3, r2
 8019f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8019f16:	4a1c      	ldr	r2, [pc, #112]	; (8019f88 <HAL_GPIO_Init+0x324>)
 8019f18:	69bb      	ldr	r3, [r7, #24]
 8019f1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8019f1c:	4b1a      	ldr	r3, [pc, #104]	; (8019f88 <HAL_GPIO_Init+0x324>)
 8019f1e:	68db      	ldr	r3, [r3, #12]
 8019f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019f22:	693b      	ldr	r3, [r7, #16]
 8019f24:	43db      	mvns	r3, r3
 8019f26:	69ba      	ldr	r2, [r7, #24]
 8019f28:	4013      	ands	r3, r2
 8019f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8019f2c:	683b      	ldr	r3, [r7, #0]
 8019f2e:	685b      	ldr	r3, [r3, #4]
 8019f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8019f34:	2b00      	cmp	r3, #0
 8019f36:	d003      	beq.n	8019f40 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8019f38:	69ba      	ldr	r2, [r7, #24]
 8019f3a:	693b      	ldr	r3, [r7, #16]
 8019f3c:	4313      	orrs	r3, r2
 8019f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8019f40:	4a11      	ldr	r2, [pc, #68]	; (8019f88 <HAL_GPIO_Init+0x324>)
 8019f42:	69bb      	ldr	r3, [r7, #24]
 8019f44:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8019f46:	69fb      	ldr	r3, [r7, #28]
 8019f48:	3301      	adds	r3, #1
 8019f4a:	61fb      	str	r3, [r7, #28]
 8019f4c:	69fb      	ldr	r3, [r7, #28]
 8019f4e:	2b0f      	cmp	r3, #15
 8019f50:	f67f ae96 	bls.w	8019c80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8019f54:	bf00      	nop
 8019f56:	bf00      	nop
 8019f58:	3724      	adds	r7, #36	; 0x24
 8019f5a:	46bd      	mov	sp, r7
 8019f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f60:	4770      	bx	lr
 8019f62:	bf00      	nop
 8019f64:	40023800 	.word	0x40023800
 8019f68:	40013800 	.word	0x40013800
 8019f6c:	40020000 	.word	0x40020000
 8019f70:	40020400 	.word	0x40020400
 8019f74:	40020800 	.word	0x40020800
 8019f78:	40020c00 	.word	0x40020c00
 8019f7c:	40021000 	.word	0x40021000
 8019f80:	40021400 	.word	0x40021400
 8019f84:	40021800 	.word	0x40021800
 8019f88:	40013c00 	.word	0x40013c00

08019f8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8019f8c:	b480      	push	{r7}
 8019f8e:	b085      	sub	sp, #20
 8019f90:	af00      	add	r7, sp, #0
 8019f92:	6078      	str	r0, [r7, #4]
 8019f94:	460b      	mov	r3, r1
 8019f96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8019f98:	687b      	ldr	r3, [r7, #4]
 8019f9a:	691a      	ldr	r2, [r3, #16]
 8019f9c:	887b      	ldrh	r3, [r7, #2]
 8019f9e:	4013      	ands	r3, r2
 8019fa0:	2b00      	cmp	r3, #0
 8019fa2:	d002      	beq.n	8019faa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8019fa4:	2301      	movs	r3, #1
 8019fa6:	73fb      	strb	r3, [r7, #15]
 8019fa8:	e001      	b.n	8019fae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8019faa:	2300      	movs	r3, #0
 8019fac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8019fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8019fb0:	4618      	mov	r0, r3
 8019fb2:	3714      	adds	r7, #20
 8019fb4:	46bd      	mov	sp, r7
 8019fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fba:	4770      	bx	lr

08019fbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8019fbc:	b480      	push	{r7}
 8019fbe:	b083      	sub	sp, #12
 8019fc0:	af00      	add	r7, sp, #0
 8019fc2:	6078      	str	r0, [r7, #4]
 8019fc4:	460b      	mov	r3, r1
 8019fc6:	807b      	strh	r3, [r7, #2]
 8019fc8:	4613      	mov	r3, r2
 8019fca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8019fcc:	787b      	ldrb	r3, [r7, #1]
 8019fce:	2b00      	cmp	r3, #0
 8019fd0:	d003      	beq.n	8019fda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8019fd2:	887a      	ldrh	r2, [r7, #2]
 8019fd4:	687b      	ldr	r3, [r7, #4]
 8019fd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8019fd8:	e003      	b.n	8019fe2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8019fda:	887b      	ldrh	r3, [r7, #2]
 8019fdc:	041a      	lsls	r2, r3, #16
 8019fde:	687b      	ldr	r3, [r7, #4]
 8019fe0:	619a      	str	r2, [r3, #24]
}
 8019fe2:	bf00      	nop
 8019fe4:	370c      	adds	r7, #12
 8019fe6:	46bd      	mov	sp, r7
 8019fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fec:	4770      	bx	lr

08019fee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8019fee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019ff0:	b08f      	sub	sp, #60	; 0x3c
 8019ff2:	af0a      	add	r7, sp, #40	; 0x28
 8019ff4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8019ff6:	687b      	ldr	r3, [r7, #4]
 8019ff8:	2b00      	cmp	r3, #0
 8019ffa:	d101      	bne.n	801a000 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8019ffc:	2301      	movs	r3, #1
 8019ffe:	e116      	b.n	801a22e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 801a000:	687b      	ldr	r3, [r7, #4]
 801a002:	681b      	ldr	r3, [r3, #0]
 801a004:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 801a006:	687b      	ldr	r3, [r7, #4]
 801a008:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 801a00c:	b2db      	uxtb	r3, r3
 801a00e:	2b00      	cmp	r3, #0
 801a010:	d106      	bne.n	801a020 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 801a012:	687b      	ldr	r3, [r7, #4]
 801a014:	2200      	movs	r2, #0
 801a016:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 801a01a:	6878      	ldr	r0, [r7, #4]
 801a01c:	f008 fc38 	bl	8022890 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 801a020:	687b      	ldr	r3, [r7, #4]
 801a022:	2203      	movs	r2, #3
 801a024:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 801a028:	68bb      	ldr	r3, [r7, #8]
 801a02a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a02c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a030:	2b00      	cmp	r3, #0
 801a032:	d102      	bne.n	801a03a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 801a034:	687b      	ldr	r3, [r7, #4]
 801a036:	2200      	movs	r2, #0
 801a038:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 801a03a:	687b      	ldr	r3, [r7, #4]
 801a03c:	681b      	ldr	r3, [r3, #0]
 801a03e:	4618      	mov	r0, r3
 801a040:	f004 f8af 	bl	801e1a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 801a044:	687b      	ldr	r3, [r7, #4]
 801a046:	681b      	ldr	r3, [r3, #0]
 801a048:	603b      	str	r3, [r7, #0]
 801a04a:	687e      	ldr	r6, [r7, #4]
 801a04c:	466d      	mov	r5, sp
 801a04e:	f106 0410 	add.w	r4, r6, #16
 801a052:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a054:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a056:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a058:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a05a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801a05e:	e885 0003 	stmia.w	r5, {r0, r1}
 801a062:	1d33      	adds	r3, r6, #4
 801a064:	cb0e      	ldmia	r3, {r1, r2, r3}
 801a066:	6838      	ldr	r0, [r7, #0]
 801a068:	f003 ff86 	bl	801df78 <USB_CoreInit>
 801a06c:	4603      	mov	r3, r0
 801a06e:	2b00      	cmp	r3, #0
 801a070:	d005      	beq.n	801a07e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 801a072:	687b      	ldr	r3, [r7, #4]
 801a074:	2202      	movs	r2, #2
 801a076:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 801a07a:	2301      	movs	r3, #1
 801a07c:	e0d7      	b.n	801a22e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 801a07e:	687b      	ldr	r3, [r7, #4]
 801a080:	681b      	ldr	r3, [r3, #0]
 801a082:	2100      	movs	r1, #0
 801a084:	4618      	mov	r0, r3
 801a086:	f004 f89d 	bl	801e1c4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801a08a:	2300      	movs	r3, #0
 801a08c:	73fb      	strb	r3, [r7, #15]
 801a08e:	e04a      	b.n	801a126 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 801a090:	7bfa      	ldrb	r2, [r7, #15]
 801a092:	6879      	ldr	r1, [r7, #4]
 801a094:	4613      	mov	r3, r2
 801a096:	00db      	lsls	r3, r3, #3
 801a098:	1a9b      	subs	r3, r3, r2
 801a09a:	009b      	lsls	r3, r3, #2
 801a09c:	440b      	add	r3, r1
 801a09e:	333d      	adds	r3, #61	; 0x3d
 801a0a0:	2201      	movs	r2, #1
 801a0a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 801a0a4:	7bfa      	ldrb	r2, [r7, #15]
 801a0a6:	6879      	ldr	r1, [r7, #4]
 801a0a8:	4613      	mov	r3, r2
 801a0aa:	00db      	lsls	r3, r3, #3
 801a0ac:	1a9b      	subs	r3, r3, r2
 801a0ae:	009b      	lsls	r3, r3, #2
 801a0b0:	440b      	add	r3, r1
 801a0b2:	333c      	adds	r3, #60	; 0x3c
 801a0b4:	7bfa      	ldrb	r2, [r7, #15]
 801a0b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 801a0b8:	7bfa      	ldrb	r2, [r7, #15]
 801a0ba:	7bfb      	ldrb	r3, [r7, #15]
 801a0bc:	b298      	uxth	r0, r3
 801a0be:	6879      	ldr	r1, [r7, #4]
 801a0c0:	4613      	mov	r3, r2
 801a0c2:	00db      	lsls	r3, r3, #3
 801a0c4:	1a9b      	subs	r3, r3, r2
 801a0c6:	009b      	lsls	r3, r3, #2
 801a0c8:	440b      	add	r3, r1
 801a0ca:	3342      	adds	r3, #66	; 0x42
 801a0cc:	4602      	mov	r2, r0
 801a0ce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 801a0d0:	7bfa      	ldrb	r2, [r7, #15]
 801a0d2:	6879      	ldr	r1, [r7, #4]
 801a0d4:	4613      	mov	r3, r2
 801a0d6:	00db      	lsls	r3, r3, #3
 801a0d8:	1a9b      	subs	r3, r3, r2
 801a0da:	009b      	lsls	r3, r3, #2
 801a0dc:	440b      	add	r3, r1
 801a0de:	333f      	adds	r3, #63	; 0x3f
 801a0e0:	2200      	movs	r2, #0
 801a0e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 801a0e4:	7bfa      	ldrb	r2, [r7, #15]
 801a0e6:	6879      	ldr	r1, [r7, #4]
 801a0e8:	4613      	mov	r3, r2
 801a0ea:	00db      	lsls	r3, r3, #3
 801a0ec:	1a9b      	subs	r3, r3, r2
 801a0ee:	009b      	lsls	r3, r3, #2
 801a0f0:	440b      	add	r3, r1
 801a0f2:	3344      	adds	r3, #68	; 0x44
 801a0f4:	2200      	movs	r2, #0
 801a0f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 801a0f8:	7bfa      	ldrb	r2, [r7, #15]
 801a0fa:	6879      	ldr	r1, [r7, #4]
 801a0fc:	4613      	mov	r3, r2
 801a0fe:	00db      	lsls	r3, r3, #3
 801a100:	1a9b      	subs	r3, r3, r2
 801a102:	009b      	lsls	r3, r3, #2
 801a104:	440b      	add	r3, r1
 801a106:	3348      	adds	r3, #72	; 0x48
 801a108:	2200      	movs	r2, #0
 801a10a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 801a10c:	7bfa      	ldrb	r2, [r7, #15]
 801a10e:	6879      	ldr	r1, [r7, #4]
 801a110:	4613      	mov	r3, r2
 801a112:	00db      	lsls	r3, r3, #3
 801a114:	1a9b      	subs	r3, r3, r2
 801a116:	009b      	lsls	r3, r3, #2
 801a118:	440b      	add	r3, r1
 801a11a:	3350      	adds	r3, #80	; 0x50
 801a11c:	2200      	movs	r2, #0
 801a11e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801a120:	7bfb      	ldrb	r3, [r7, #15]
 801a122:	3301      	adds	r3, #1
 801a124:	73fb      	strb	r3, [r7, #15]
 801a126:	7bfa      	ldrb	r2, [r7, #15]
 801a128:	687b      	ldr	r3, [r7, #4]
 801a12a:	685b      	ldr	r3, [r3, #4]
 801a12c:	429a      	cmp	r2, r3
 801a12e:	d3af      	bcc.n	801a090 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801a130:	2300      	movs	r3, #0
 801a132:	73fb      	strb	r3, [r7, #15]
 801a134:	e044      	b.n	801a1c0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 801a136:	7bfa      	ldrb	r2, [r7, #15]
 801a138:	6879      	ldr	r1, [r7, #4]
 801a13a:	4613      	mov	r3, r2
 801a13c:	00db      	lsls	r3, r3, #3
 801a13e:	1a9b      	subs	r3, r3, r2
 801a140:	009b      	lsls	r3, r3, #2
 801a142:	440b      	add	r3, r1
 801a144:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 801a148:	2200      	movs	r2, #0
 801a14a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 801a14c:	7bfa      	ldrb	r2, [r7, #15]
 801a14e:	6879      	ldr	r1, [r7, #4]
 801a150:	4613      	mov	r3, r2
 801a152:	00db      	lsls	r3, r3, #3
 801a154:	1a9b      	subs	r3, r3, r2
 801a156:	009b      	lsls	r3, r3, #2
 801a158:	440b      	add	r3, r1
 801a15a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 801a15e:	7bfa      	ldrb	r2, [r7, #15]
 801a160:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 801a162:	7bfa      	ldrb	r2, [r7, #15]
 801a164:	6879      	ldr	r1, [r7, #4]
 801a166:	4613      	mov	r3, r2
 801a168:	00db      	lsls	r3, r3, #3
 801a16a:	1a9b      	subs	r3, r3, r2
 801a16c:	009b      	lsls	r3, r3, #2
 801a16e:	440b      	add	r3, r1
 801a170:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 801a174:	2200      	movs	r2, #0
 801a176:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 801a178:	7bfa      	ldrb	r2, [r7, #15]
 801a17a:	6879      	ldr	r1, [r7, #4]
 801a17c:	4613      	mov	r3, r2
 801a17e:	00db      	lsls	r3, r3, #3
 801a180:	1a9b      	subs	r3, r3, r2
 801a182:	009b      	lsls	r3, r3, #2
 801a184:	440b      	add	r3, r1
 801a186:	f503 7301 	add.w	r3, r3, #516	; 0x204
 801a18a:	2200      	movs	r2, #0
 801a18c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 801a18e:	7bfa      	ldrb	r2, [r7, #15]
 801a190:	6879      	ldr	r1, [r7, #4]
 801a192:	4613      	mov	r3, r2
 801a194:	00db      	lsls	r3, r3, #3
 801a196:	1a9b      	subs	r3, r3, r2
 801a198:	009b      	lsls	r3, r3, #2
 801a19a:	440b      	add	r3, r1
 801a19c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801a1a0:	2200      	movs	r2, #0
 801a1a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 801a1a4:	7bfa      	ldrb	r2, [r7, #15]
 801a1a6:	6879      	ldr	r1, [r7, #4]
 801a1a8:	4613      	mov	r3, r2
 801a1aa:	00db      	lsls	r3, r3, #3
 801a1ac:	1a9b      	subs	r3, r3, r2
 801a1ae:	009b      	lsls	r3, r3, #2
 801a1b0:	440b      	add	r3, r1
 801a1b2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 801a1b6:	2200      	movs	r2, #0
 801a1b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801a1ba:	7bfb      	ldrb	r3, [r7, #15]
 801a1bc:	3301      	adds	r3, #1
 801a1be:	73fb      	strb	r3, [r7, #15]
 801a1c0:	7bfa      	ldrb	r2, [r7, #15]
 801a1c2:	687b      	ldr	r3, [r7, #4]
 801a1c4:	685b      	ldr	r3, [r3, #4]
 801a1c6:	429a      	cmp	r2, r3
 801a1c8:	d3b5      	bcc.n	801a136 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 801a1ca:	687b      	ldr	r3, [r7, #4]
 801a1cc:	681b      	ldr	r3, [r3, #0]
 801a1ce:	603b      	str	r3, [r7, #0]
 801a1d0:	687e      	ldr	r6, [r7, #4]
 801a1d2:	466d      	mov	r5, sp
 801a1d4:	f106 0410 	add.w	r4, r6, #16
 801a1d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a1da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a1dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a1de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a1e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 801a1e4:	e885 0003 	stmia.w	r5, {r0, r1}
 801a1e8:	1d33      	adds	r3, r6, #4
 801a1ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 801a1ec:	6838      	ldr	r0, [r7, #0]
 801a1ee:	f004 f835 	bl	801e25c <USB_DevInit>
 801a1f2:	4603      	mov	r3, r0
 801a1f4:	2b00      	cmp	r3, #0
 801a1f6:	d005      	beq.n	801a204 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 801a1f8:	687b      	ldr	r3, [r7, #4]
 801a1fa:	2202      	movs	r2, #2
 801a1fc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 801a200:	2301      	movs	r3, #1
 801a202:	e014      	b.n	801a22e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 801a204:	687b      	ldr	r3, [r7, #4]
 801a206:	2200      	movs	r2, #0
 801a208:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 801a20c:	687b      	ldr	r3, [r7, #4]
 801a20e:	2201      	movs	r2, #1
 801a210:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 801a214:	687b      	ldr	r3, [r7, #4]
 801a216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a218:	2b01      	cmp	r3, #1
 801a21a:	d102      	bne.n	801a222 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 801a21c:	6878      	ldr	r0, [r7, #4]
 801a21e:	f001 f8bf 	bl	801b3a0 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	681b      	ldr	r3, [r3, #0]
 801a226:	4618      	mov	r0, r3
 801a228:	f005 f8a4 	bl	801f374 <USB_DevDisconnect>

  return HAL_OK;
 801a22c:	2300      	movs	r3, #0
}
 801a22e:	4618      	mov	r0, r3
 801a230:	3714      	adds	r7, #20
 801a232:	46bd      	mov	sp, r7
 801a234:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a236 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 801a236:	b580      	push	{r7, lr}
 801a238:	b084      	sub	sp, #16
 801a23a:	af00      	add	r7, sp, #0
 801a23c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801a23e:	687b      	ldr	r3, [r7, #4]
 801a240:	681b      	ldr	r3, [r3, #0]
 801a242:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 801a244:	687b      	ldr	r3, [r7, #4]
 801a246:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801a24a:	2b01      	cmp	r3, #1
 801a24c:	d101      	bne.n	801a252 <HAL_PCD_Start+0x1c>
 801a24e:	2302      	movs	r3, #2
 801a250:	e020      	b.n	801a294 <HAL_PCD_Start+0x5e>
 801a252:	687b      	ldr	r3, [r7, #4]
 801a254:	2201      	movs	r2, #1
 801a256:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 801a25a:	687b      	ldr	r3, [r7, #4]
 801a25c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a25e:	2b01      	cmp	r3, #1
 801a260:	d109      	bne.n	801a276 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 801a262:	687b      	ldr	r3, [r7, #4]
 801a264:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 801a266:	2b01      	cmp	r3, #1
 801a268:	d005      	beq.n	801a276 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801a26a:	68fb      	ldr	r3, [r7, #12]
 801a26c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a26e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801a272:	68fb      	ldr	r3, [r7, #12]
 801a274:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 801a276:	687b      	ldr	r3, [r7, #4]
 801a278:	681b      	ldr	r3, [r3, #0]
 801a27a:	4618      	mov	r0, r3
 801a27c:	f003 ff80 	bl	801e180 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 801a280:	687b      	ldr	r3, [r7, #4]
 801a282:	681b      	ldr	r3, [r3, #0]
 801a284:	4618      	mov	r0, r3
 801a286:	f005 f854 	bl	801f332 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	2200      	movs	r2, #0
 801a28e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801a292:	2300      	movs	r3, #0
}
 801a294:	4618      	mov	r0, r3
 801a296:	3710      	adds	r7, #16
 801a298:	46bd      	mov	sp, r7
 801a29a:	bd80      	pop	{r7, pc}

0801a29c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 801a29c:	b590      	push	{r4, r7, lr}
 801a29e:	b08d      	sub	sp, #52	; 0x34
 801a2a0:	af00      	add	r7, sp, #0
 801a2a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	681b      	ldr	r3, [r3, #0]
 801a2a8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a2aa:	6a3b      	ldr	r3, [r7, #32]
 801a2ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 801a2ae:	687b      	ldr	r3, [r7, #4]
 801a2b0:	681b      	ldr	r3, [r3, #0]
 801a2b2:	4618      	mov	r0, r3
 801a2b4:	f005 f912 	bl	801f4dc <USB_GetMode>
 801a2b8:	4603      	mov	r3, r0
 801a2ba:	2b00      	cmp	r3, #0
 801a2bc:	f040 83ca 	bne.w	801aa54 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 801a2c0:	687b      	ldr	r3, [r7, #4]
 801a2c2:	681b      	ldr	r3, [r3, #0]
 801a2c4:	4618      	mov	r0, r3
 801a2c6:	f005 f876 	bl	801f3b6 <USB_ReadInterrupts>
 801a2ca:	4603      	mov	r3, r0
 801a2cc:	2b00      	cmp	r3, #0
 801a2ce:	f000 83c0 	beq.w	801aa52 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 801a2d2:	687b      	ldr	r3, [r7, #4]
 801a2d4:	681b      	ldr	r3, [r3, #0]
 801a2d6:	4618      	mov	r0, r3
 801a2d8:	f005 f86d 	bl	801f3b6 <USB_ReadInterrupts>
 801a2dc:	4603      	mov	r3, r0
 801a2de:	f003 0302 	and.w	r3, r3, #2
 801a2e2:	2b02      	cmp	r3, #2
 801a2e4:	d107      	bne.n	801a2f6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 801a2e6:	687b      	ldr	r3, [r7, #4]
 801a2e8:	681b      	ldr	r3, [r3, #0]
 801a2ea:	695a      	ldr	r2, [r3, #20]
 801a2ec:	687b      	ldr	r3, [r7, #4]
 801a2ee:	681b      	ldr	r3, [r3, #0]
 801a2f0:	f002 0202 	and.w	r2, r2, #2
 801a2f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 801a2f6:	687b      	ldr	r3, [r7, #4]
 801a2f8:	681b      	ldr	r3, [r3, #0]
 801a2fa:	4618      	mov	r0, r3
 801a2fc:	f005 f85b 	bl	801f3b6 <USB_ReadInterrupts>
 801a300:	4603      	mov	r3, r0
 801a302:	f003 0310 	and.w	r3, r3, #16
 801a306:	2b10      	cmp	r3, #16
 801a308:	d161      	bne.n	801a3ce <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 801a30a:	687b      	ldr	r3, [r7, #4]
 801a30c:	681b      	ldr	r3, [r3, #0]
 801a30e:	699a      	ldr	r2, [r3, #24]
 801a310:	687b      	ldr	r3, [r7, #4]
 801a312:	681b      	ldr	r3, [r3, #0]
 801a314:	f022 0210 	bic.w	r2, r2, #16
 801a318:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 801a31a:	6a3b      	ldr	r3, [r7, #32]
 801a31c:	6a1b      	ldr	r3, [r3, #32]
 801a31e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 801a320:	69bb      	ldr	r3, [r7, #24]
 801a322:	f003 020f 	and.w	r2, r3, #15
 801a326:	4613      	mov	r3, r2
 801a328:	00db      	lsls	r3, r3, #3
 801a32a:	1a9b      	subs	r3, r3, r2
 801a32c:	009b      	lsls	r3, r3, #2
 801a32e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801a332:	687a      	ldr	r2, [r7, #4]
 801a334:	4413      	add	r3, r2
 801a336:	3304      	adds	r3, #4
 801a338:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 801a33a:	69bb      	ldr	r3, [r7, #24]
 801a33c:	0c5b      	lsrs	r3, r3, #17
 801a33e:	f003 030f 	and.w	r3, r3, #15
 801a342:	2b02      	cmp	r3, #2
 801a344:	d124      	bne.n	801a390 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 801a346:	69ba      	ldr	r2, [r7, #24]
 801a348:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 801a34c:	4013      	ands	r3, r2
 801a34e:	2b00      	cmp	r3, #0
 801a350:	d035      	beq.n	801a3be <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 801a352:	697b      	ldr	r3, [r7, #20]
 801a354:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 801a356:	69bb      	ldr	r3, [r7, #24]
 801a358:	091b      	lsrs	r3, r3, #4
 801a35a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 801a35c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a360:	b29b      	uxth	r3, r3
 801a362:	461a      	mov	r2, r3
 801a364:	6a38      	ldr	r0, [r7, #32]
 801a366:	f004 fe92 	bl	801f08e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 801a36a:	697b      	ldr	r3, [r7, #20]
 801a36c:	68da      	ldr	r2, [r3, #12]
 801a36e:	69bb      	ldr	r3, [r7, #24]
 801a370:	091b      	lsrs	r3, r3, #4
 801a372:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a376:	441a      	add	r2, r3
 801a378:	697b      	ldr	r3, [r7, #20]
 801a37a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 801a37c:	697b      	ldr	r3, [r7, #20]
 801a37e:	699a      	ldr	r2, [r3, #24]
 801a380:	69bb      	ldr	r3, [r7, #24]
 801a382:	091b      	lsrs	r3, r3, #4
 801a384:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a388:	441a      	add	r2, r3
 801a38a:	697b      	ldr	r3, [r7, #20]
 801a38c:	619a      	str	r2, [r3, #24]
 801a38e:	e016      	b.n	801a3be <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 801a390:	69bb      	ldr	r3, [r7, #24]
 801a392:	0c5b      	lsrs	r3, r3, #17
 801a394:	f003 030f 	and.w	r3, r3, #15
 801a398:	2b06      	cmp	r3, #6
 801a39a:	d110      	bne.n	801a3be <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 801a39c:	687b      	ldr	r3, [r7, #4]
 801a39e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801a3a2:	2208      	movs	r2, #8
 801a3a4:	4619      	mov	r1, r3
 801a3a6:	6a38      	ldr	r0, [r7, #32]
 801a3a8:	f004 fe71 	bl	801f08e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 801a3ac:	697b      	ldr	r3, [r7, #20]
 801a3ae:	699a      	ldr	r2, [r3, #24]
 801a3b0:	69bb      	ldr	r3, [r7, #24]
 801a3b2:	091b      	lsrs	r3, r3, #4
 801a3b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a3b8:	441a      	add	r2, r3
 801a3ba:	697b      	ldr	r3, [r7, #20]
 801a3bc:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 801a3be:	687b      	ldr	r3, [r7, #4]
 801a3c0:	681b      	ldr	r3, [r3, #0]
 801a3c2:	699a      	ldr	r2, [r3, #24]
 801a3c4:	687b      	ldr	r3, [r7, #4]
 801a3c6:	681b      	ldr	r3, [r3, #0]
 801a3c8:	f042 0210 	orr.w	r2, r2, #16
 801a3cc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 801a3ce:	687b      	ldr	r3, [r7, #4]
 801a3d0:	681b      	ldr	r3, [r3, #0]
 801a3d2:	4618      	mov	r0, r3
 801a3d4:	f004 ffef 	bl	801f3b6 <USB_ReadInterrupts>
 801a3d8:	4603      	mov	r3, r0
 801a3da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801a3de:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 801a3e2:	d16e      	bne.n	801a4c2 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 801a3e4:	2300      	movs	r3, #0
 801a3e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 801a3e8:	687b      	ldr	r3, [r7, #4]
 801a3ea:	681b      	ldr	r3, [r3, #0]
 801a3ec:	4618      	mov	r0, r3
 801a3ee:	f004 fff5 	bl	801f3dc <USB_ReadDevAllOutEpInterrupt>
 801a3f2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 801a3f4:	e062      	b.n	801a4bc <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 801a3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3f8:	f003 0301 	and.w	r3, r3, #1
 801a3fc:	2b00      	cmp	r3, #0
 801a3fe:	d057      	beq.n	801a4b0 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 801a400:	687b      	ldr	r3, [r7, #4]
 801a402:	681b      	ldr	r3, [r3, #0]
 801a404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a406:	b2d2      	uxtb	r2, r2
 801a408:	4611      	mov	r1, r2
 801a40a:	4618      	mov	r0, r3
 801a40c:	f005 f81a 	bl	801f444 <USB_ReadDevOutEPInterrupt>
 801a410:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 801a412:	693b      	ldr	r3, [r7, #16]
 801a414:	f003 0301 	and.w	r3, r3, #1
 801a418:	2b00      	cmp	r3, #0
 801a41a:	d00c      	beq.n	801a436 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 801a41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a41e:	015a      	lsls	r2, r3, #5
 801a420:	69fb      	ldr	r3, [r7, #28]
 801a422:	4413      	add	r3, r2
 801a424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a428:	461a      	mov	r2, r3
 801a42a:	2301      	movs	r3, #1
 801a42c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 801a42e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a430:	6878      	ldr	r0, [r7, #4]
 801a432:	f000 fe0b 	bl	801b04c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 801a436:	693b      	ldr	r3, [r7, #16]
 801a438:	f003 0308 	and.w	r3, r3, #8
 801a43c:	2b00      	cmp	r3, #0
 801a43e:	d00c      	beq.n	801a45a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 801a440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a442:	015a      	lsls	r2, r3, #5
 801a444:	69fb      	ldr	r3, [r7, #28]
 801a446:	4413      	add	r3, r2
 801a448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a44c:	461a      	mov	r2, r3
 801a44e:	2308      	movs	r3, #8
 801a450:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 801a452:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a454:	6878      	ldr	r0, [r7, #4]
 801a456:	f000 ff05 	bl	801b264 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 801a45a:	693b      	ldr	r3, [r7, #16]
 801a45c:	f003 0310 	and.w	r3, r3, #16
 801a460:	2b00      	cmp	r3, #0
 801a462:	d008      	beq.n	801a476 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 801a464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a466:	015a      	lsls	r2, r3, #5
 801a468:	69fb      	ldr	r3, [r7, #28]
 801a46a:	4413      	add	r3, r2
 801a46c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a470:	461a      	mov	r2, r3
 801a472:	2310      	movs	r3, #16
 801a474:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 801a476:	693b      	ldr	r3, [r7, #16]
 801a478:	f003 0320 	and.w	r3, r3, #32
 801a47c:	2b00      	cmp	r3, #0
 801a47e:	d008      	beq.n	801a492 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801a480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a482:	015a      	lsls	r2, r3, #5
 801a484:	69fb      	ldr	r3, [r7, #28]
 801a486:	4413      	add	r3, r2
 801a488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a48c:	461a      	mov	r2, r3
 801a48e:	2320      	movs	r3, #32
 801a490:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 801a492:	693b      	ldr	r3, [r7, #16]
 801a494:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a498:	2b00      	cmp	r3, #0
 801a49a:	d009      	beq.n	801a4b0 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 801a49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a49e:	015a      	lsls	r2, r3, #5
 801a4a0:	69fb      	ldr	r3, [r7, #28]
 801a4a2:	4413      	add	r3, r2
 801a4a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a4a8:	461a      	mov	r2, r3
 801a4aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801a4ae:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 801a4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4b2:	3301      	adds	r3, #1
 801a4b4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 801a4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4b8:	085b      	lsrs	r3, r3, #1
 801a4ba:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 801a4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4be:	2b00      	cmp	r3, #0
 801a4c0:	d199      	bne.n	801a3f6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 801a4c2:	687b      	ldr	r3, [r7, #4]
 801a4c4:	681b      	ldr	r3, [r3, #0]
 801a4c6:	4618      	mov	r0, r3
 801a4c8:	f004 ff75 	bl	801f3b6 <USB_ReadInterrupts>
 801a4cc:	4603      	mov	r3, r0
 801a4ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801a4d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801a4d6:	f040 80c0 	bne.w	801a65a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 801a4da:	687b      	ldr	r3, [r7, #4]
 801a4dc:	681b      	ldr	r3, [r3, #0]
 801a4de:	4618      	mov	r0, r3
 801a4e0:	f004 ff96 	bl	801f410 <USB_ReadDevAllInEpInterrupt>
 801a4e4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 801a4e6:	2300      	movs	r3, #0
 801a4e8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 801a4ea:	e0b2      	b.n	801a652 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 801a4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4ee:	f003 0301 	and.w	r3, r3, #1
 801a4f2:	2b00      	cmp	r3, #0
 801a4f4:	f000 80a7 	beq.w	801a646 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 801a4f8:	687b      	ldr	r3, [r7, #4]
 801a4fa:	681b      	ldr	r3, [r3, #0]
 801a4fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a4fe:	b2d2      	uxtb	r2, r2
 801a500:	4611      	mov	r1, r2
 801a502:	4618      	mov	r0, r3
 801a504:	f004 ffbc 	bl	801f480 <USB_ReadDevInEPInterrupt>
 801a508:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 801a50a:	693b      	ldr	r3, [r7, #16]
 801a50c:	f003 0301 	and.w	r3, r3, #1
 801a510:	2b00      	cmp	r3, #0
 801a512:	d057      	beq.n	801a5c4 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 801a514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a516:	f003 030f 	and.w	r3, r3, #15
 801a51a:	2201      	movs	r2, #1
 801a51c:	fa02 f303 	lsl.w	r3, r2, r3
 801a520:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 801a522:	69fb      	ldr	r3, [r7, #28]
 801a524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a528:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801a52a:	68fb      	ldr	r3, [r7, #12]
 801a52c:	43db      	mvns	r3, r3
 801a52e:	69f9      	ldr	r1, [r7, #28]
 801a530:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801a534:	4013      	ands	r3, r2
 801a536:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 801a538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a53a:	015a      	lsls	r2, r3, #5
 801a53c:	69fb      	ldr	r3, [r7, #28]
 801a53e:	4413      	add	r3, r2
 801a540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a544:	461a      	mov	r2, r3
 801a546:	2301      	movs	r3, #1
 801a548:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 801a54a:	687b      	ldr	r3, [r7, #4]
 801a54c:	691b      	ldr	r3, [r3, #16]
 801a54e:	2b01      	cmp	r3, #1
 801a550:	d132      	bne.n	801a5b8 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 801a552:	6879      	ldr	r1, [r7, #4]
 801a554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a556:	4613      	mov	r3, r2
 801a558:	00db      	lsls	r3, r3, #3
 801a55a:	1a9b      	subs	r3, r3, r2
 801a55c:	009b      	lsls	r3, r3, #2
 801a55e:	440b      	add	r3, r1
 801a560:	3348      	adds	r3, #72	; 0x48
 801a562:	6819      	ldr	r1, [r3, #0]
 801a564:	6878      	ldr	r0, [r7, #4]
 801a566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a568:	4613      	mov	r3, r2
 801a56a:	00db      	lsls	r3, r3, #3
 801a56c:	1a9b      	subs	r3, r3, r2
 801a56e:	009b      	lsls	r3, r3, #2
 801a570:	4403      	add	r3, r0
 801a572:	3344      	adds	r3, #68	; 0x44
 801a574:	681b      	ldr	r3, [r3, #0]
 801a576:	4419      	add	r1, r3
 801a578:	6878      	ldr	r0, [r7, #4]
 801a57a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a57c:	4613      	mov	r3, r2
 801a57e:	00db      	lsls	r3, r3, #3
 801a580:	1a9b      	subs	r3, r3, r2
 801a582:	009b      	lsls	r3, r3, #2
 801a584:	4403      	add	r3, r0
 801a586:	3348      	adds	r3, #72	; 0x48
 801a588:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 801a58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a58c:	2b00      	cmp	r3, #0
 801a58e:	d113      	bne.n	801a5b8 <HAL_PCD_IRQHandler+0x31c>
 801a590:	6879      	ldr	r1, [r7, #4]
 801a592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a594:	4613      	mov	r3, r2
 801a596:	00db      	lsls	r3, r3, #3
 801a598:	1a9b      	subs	r3, r3, r2
 801a59a:	009b      	lsls	r3, r3, #2
 801a59c:	440b      	add	r3, r1
 801a59e:	3350      	adds	r3, #80	; 0x50
 801a5a0:	681b      	ldr	r3, [r3, #0]
 801a5a2:	2b00      	cmp	r3, #0
 801a5a4:	d108      	bne.n	801a5b8 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801a5a6:	687b      	ldr	r3, [r7, #4]
 801a5a8:	6818      	ldr	r0, [r3, #0]
 801a5aa:	687b      	ldr	r3, [r7, #4]
 801a5ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801a5b0:	461a      	mov	r2, r3
 801a5b2:	2101      	movs	r1, #1
 801a5b4:	f004 ffc4 	bl	801f540 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 801a5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5ba:	b2db      	uxtb	r3, r3
 801a5bc:	4619      	mov	r1, r3
 801a5be:	6878      	ldr	r0, [r7, #4]
 801a5c0:	f008 fa09 	bl	80229d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 801a5c4:	693b      	ldr	r3, [r7, #16]
 801a5c6:	f003 0308 	and.w	r3, r3, #8
 801a5ca:	2b00      	cmp	r3, #0
 801a5cc:	d008      	beq.n	801a5e0 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 801a5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5d0:	015a      	lsls	r2, r3, #5
 801a5d2:	69fb      	ldr	r3, [r7, #28]
 801a5d4:	4413      	add	r3, r2
 801a5d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a5da:	461a      	mov	r2, r3
 801a5dc:	2308      	movs	r3, #8
 801a5de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 801a5e0:	693b      	ldr	r3, [r7, #16]
 801a5e2:	f003 0310 	and.w	r3, r3, #16
 801a5e6:	2b00      	cmp	r3, #0
 801a5e8:	d008      	beq.n	801a5fc <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 801a5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5ec:	015a      	lsls	r2, r3, #5
 801a5ee:	69fb      	ldr	r3, [r7, #28]
 801a5f0:	4413      	add	r3, r2
 801a5f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a5f6:	461a      	mov	r2, r3
 801a5f8:	2310      	movs	r3, #16
 801a5fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 801a5fc:	693b      	ldr	r3, [r7, #16]
 801a5fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a602:	2b00      	cmp	r3, #0
 801a604:	d008      	beq.n	801a618 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 801a606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a608:	015a      	lsls	r2, r3, #5
 801a60a:	69fb      	ldr	r3, [r7, #28]
 801a60c:	4413      	add	r3, r2
 801a60e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a612:	461a      	mov	r2, r3
 801a614:	2340      	movs	r3, #64	; 0x40
 801a616:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 801a618:	693b      	ldr	r3, [r7, #16]
 801a61a:	f003 0302 	and.w	r3, r3, #2
 801a61e:	2b00      	cmp	r3, #0
 801a620:	d008      	beq.n	801a634 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 801a622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a624:	015a      	lsls	r2, r3, #5
 801a626:	69fb      	ldr	r3, [r7, #28]
 801a628:	4413      	add	r3, r2
 801a62a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a62e:	461a      	mov	r2, r3
 801a630:	2302      	movs	r3, #2
 801a632:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 801a634:	693b      	ldr	r3, [r7, #16]
 801a636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a63a:	2b00      	cmp	r3, #0
 801a63c:	d003      	beq.n	801a646 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 801a63e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a640:	6878      	ldr	r0, [r7, #4]
 801a642:	f000 fc75 	bl	801af30 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 801a646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a648:	3301      	adds	r3, #1
 801a64a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 801a64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a64e:	085b      	lsrs	r3, r3, #1
 801a650:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 801a652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a654:	2b00      	cmp	r3, #0
 801a656:	f47f af49 	bne.w	801a4ec <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 801a65a:	687b      	ldr	r3, [r7, #4]
 801a65c:	681b      	ldr	r3, [r3, #0]
 801a65e:	4618      	mov	r0, r3
 801a660:	f004 fea9 	bl	801f3b6 <USB_ReadInterrupts>
 801a664:	4603      	mov	r3, r0
 801a666:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801a66a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a66e:	d122      	bne.n	801a6b6 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 801a670:	69fb      	ldr	r3, [r7, #28]
 801a672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a676:	685b      	ldr	r3, [r3, #4]
 801a678:	69fa      	ldr	r2, [r7, #28]
 801a67a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a67e:	f023 0301 	bic.w	r3, r3, #1
 801a682:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 801a684:	687b      	ldr	r3, [r7, #4]
 801a686:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 801a68a:	2b01      	cmp	r3, #1
 801a68c:	d108      	bne.n	801a6a0 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 801a68e:	687b      	ldr	r3, [r7, #4]
 801a690:	2200      	movs	r2, #0
 801a692:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 801a696:	2100      	movs	r1, #0
 801a698:	6878      	ldr	r0, [r7, #4]
 801a69a:	f008 fc0b 	bl	8022eb4 <HAL_PCDEx_LPM_Callback>
 801a69e:	e002      	b.n	801a6a6 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 801a6a0:	6878      	ldr	r0, [r7, #4]
 801a6a2:	f008 fa0f 	bl	8022ac4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 801a6a6:	687b      	ldr	r3, [r7, #4]
 801a6a8:	681b      	ldr	r3, [r3, #0]
 801a6aa:	695a      	ldr	r2, [r3, #20]
 801a6ac:	687b      	ldr	r3, [r7, #4]
 801a6ae:	681b      	ldr	r3, [r3, #0]
 801a6b0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 801a6b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 801a6b6:	687b      	ldr	r3, [r7, #4]
 801a6b8:	681b      	ldr	r3, [r3, #0]
 801a6ba:	4618      	mov	r0, r3
 801a6bc:	f004 fe7b 	bl	801f3b6 <USB_ReadInterrupts>
 801a6c0:	4603      	mov	r3, r0
 801a6c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801a6c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a6ca:	d112      	bne.n	801a6f2 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 801a6cc:	69fb      	ldr	r3, [r7, #28]
 801a6ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a6d2:	689b      	ldr	r3, [r3, #8]
 801a6d4:	f003 0301 	and.w	r3, r3, #1
 801a6d8:	2b01      	cmp	r3, #1
 801a6da:	d102      	bne.n	801a6e2 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 801a6dc:	6878      	ldr	r0, [r7, #4]
 801a6de:	f008 f9cb 	bl	8022a78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 801a6e2:	687b      	ldr	r3, [r7, #4]
 801a6e4:	681b      	ldr	r3, [r3, #0]
 801a6e6:	695a      	ldr	r2, [r3, #20]
 801a6e8:	687b      	ldr	r3, [r7, #4]
 801a6ea:	681b      	ldr	r3, [r3, #0]
 801a6ec:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 801a6f0:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 801a6f2:	687b      	ldr	r3, [r7, #4]
 801a6f4:	681b      	ldr	r3, [r3, #0]
 801a6f6:	4618      	mov	r0, r3
 801a6f8:	f004 fe5d 	bl	801f3b6 <USB_ReadInterrupts>
 801a6fc:	4603      	mov	r3, r0
 801a6fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801a702:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801a706:	d121      	bne.n	801a74c <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 801a708:	687b      	ldr	r3, [r7, #4]
 801a70a:	681b      	ldr	r3, [r3, #0]
 801a70c:	695a      	ldr	r2, [r3, #20]
 801a70e:	687b      	ldr	r3, [r7, #4]
 801a710:	681b      	ldr	r3, [r3, #0]
 801a712:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 801a716:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 801a718:	687b      	ldr	r3, [r7, #4]
 801a71a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 801a71e:	2b00      	cmp	r3, #0
 801a720:	d111      	bne.n	801a746 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 801a722:	687b      	ldr	r3, [r7, #4]
 801a724:	2201      	movs	r2, #1
 801a726:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 801a72a:	687b      	ldr	r3, [r7, #4]
 801a72c:	681b      	ldr	r3, [r3, #0]
 801a72e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a730:	089b      	lsrs	r3, r3, #2
 801a732:	f003 020f 	and.w	r2, r3, #15
 801a736:	687b      	ldr	r3, [r7, #4]
 801a738:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 801a73c:	2101      	movs	r1, #1
 801a73e:	6878      	ldr	r0, [r7, #4]
 801a740:	f008 fbb8 	bl	8022eb4 <HAL_PCDEx_LPM_Callback>
 801a744:	e002      	b.n	801a74c <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 801a746:	6878      	ldr	r0, [r7, #4]
 801a748:	f008 f996 	bl	8022a78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 801a74c:	687b      	ldr	r3, [r7, #4]
 801a74e:	681b      	ldr	r3, [r3, #0]
 801a750:	4618      	mov	r0, r3
 801a752:	f004 fe30 	bl	801f3b6 <USB_ReadInterrupts>
 801a756:	4603      	mov	r3, r0
 801a758:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801a75c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a760:	f040 80c7 	bne.w	801a8f2 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 801a764:	69fb      	ldr	r3, [r7, #28]
 801a766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a76a:	685b      	ldr	r3, [r3, #4]
 801a76c:	69fa      	ldr	r2, [r7, #28]
 801a76e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a772:	f023 0301 	bic.w	r3, r3, #1
 801a776:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 801a778:	687b      	ldr	r3, [r7, #4]
 801a77a:	681b      	ldr	r3, [r3, #0]
 801a77c:	2110      	movs	r1, #16
 801a77e:	4618      	mov	r0, r3
 801a780:	f003 feca 	bl	801e518 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801a784:	2300      	movs	r3, #0
 801a786:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a788:	e056      	b.n	801a838 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 801a78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a78c:	015a      	lsls	r2, r3, #5
 801a78e:	69fb      	ldr	r3, [r7, #28]
 801a790:	4413      	add	r3, r2
 801a792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a796:	461a      	mov	r2, r3
 801a798:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801a79c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801a79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7a0:	015a      	lsls	r2, r3, #5
 801a7a2:	69fb      	ldr	r3, [r7, #28]
 801a7a4:	4413      	add	r3, r2
 801a7a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a7aa:	681b      	ldr	r3, [r3, #0]
 801a7ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a7ae:	0151      	lsls	r1, r2, #5
 801a7b0:	69fa      	ldr	r2, [r7, #28]
 801a7b2:	440a      	add	r2, r1
 801a7b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a7b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801a7bc:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801a7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7c0:	015a      	lsls	r2, r3, #5
 801a7c2:	69fb      	ldr	r3, [r7, #28]
 801a7c4:	4413      	add	r3, r2
 801a7c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a7ca:	681b      	ldr	r3, [r3, #0]
 801a7cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a7ce:	0151      	lsls	r1, r2, #5
 801a7d0:	69fa      	ldr	r2, [r7, #28]
 801a7d2:	440a      	add	r2, r1
 801a7d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a7d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801a7dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 801a7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7e0:	015a      	lsls	r2, r3, #5
 801a7e2:	69fb      	ldr	r3, [r7, #28]
 801a7e4:	4413      	add	r3, r2
 801a7e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a7ea:	461a      	mov	r2, r3
 801a7ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801a7f0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801a7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7f4:	015a      	lsls	r2, r3, #5
 801a7f6:	69fb      	ldr	r3, [r7, #28]
 801a7f8:	4413      	add	r3, r2
 801a7fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a7fe:	681b      	ldr	r3, [r3, #0]
 801a800:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a802:	0151      	lsls	r1, r2, #5
 801a804:	69fa      	ldr	r2, [r7, #28]
 801a806:	440a      	add	r2, r1
 801a808:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a80c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801a810:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801a812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a814:	015a      	lsls	r2, r3, #5
 801a816:	69fb      	ldr	r3, [r7, #28]
 801a818:	4413      	add	r3, r2
 801a81a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a81e:	681b      	ldr	r3, [r3, #0]
 801a820:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a822:	0151      	lsls	r1, r2, #5
 801a824:	69fa      	ldr	r2, [r7, #28]
 801a826:	440a      	add	r2, r1
 801a828:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a82c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801a830:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801a832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a834:	3301      	adds	r3, #1
 801a836:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a838:	687b      	ldr	r3, [r7, #4]
 801a83a:	685b      	ldr	r3, [r3, #4]
 801a83c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a83e:	429a      	cmp	r2, r3
 801a840:	d3a3      	bcc.n	801a78a <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 801a842:	69fb      	ldr	r3, [r7, #28]
 801a844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a848:	69db      	ldr	r3, [r3, #28]
 801a84a:	69fa      	ldr	r2, [r7, #28]
 801a84c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a850:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 801a854:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 801a856:	687b      	ldr	r3, [r7, #4]
 801a858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a85a:	2b00      	cmp	r3, #0
 801a85c:	d016      	beq.n	801a88c <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 801a85e:	69fb      	ldr	r3, [r7, #28]
 801a860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a864:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a868:	69fa      	ldr	r2, [r7, #28]
 801a86a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a86e:	f043 030b 	orr.w	r3, r3, #11
 801a872:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 801a876:	69fb      	ldr	r3, [r7, #28]
 801a878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a87c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a87e:	69fa      	ldr	r2, [r7, #28]
 801a880:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a884:	f043 030b 	orr.w	r3, r3, #11
 801a888:	6453      	str	r3, [r2, #68]	; 0x44
 801a88a:	e015      	b.n	801a8b8 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 801a88c:	69fb      	ldr	r3, [r7, #28]
 801a88e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a892:	695b      	ldr	r3, [r3, #20]
 801a894:	69fa      	ldr	r2, [r7, #28]
 801a896:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a89a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a89e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 801a8a2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 801a8a4:	69fb      	ldr	r3, [r7, #28]
 801a8a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a8aa:	691b      	ldr	r3, [r3, #16]
 801a8ac:	69fa      	ldr	r2, [r7, #28]
 801a8ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a8b2:	f043 030b 	orr.w	r3, r3, #11
 801a8b6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 801a8b8:	69fb      	ldr	r3, [r7, #28]
 801a8ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a8be:	681b      	ldr	r3, [r3, #0]
 801a8c0:	69fa      	ldr	r2, [r7, #28]
 801a8c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a8c6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801a8ca:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 801a8cc:	687b      	ldr	r3, [r7, #4]
 801a8ce:	6818      	ldr	r0, [r3, #0]
 801a8d0:	687b      	ldr	r3, [r7, #4]
 801a8d2:	691b      	ldr	r3, [r3, #16]
 801a8d4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 801a8d6:	687b      	ldr	r3, [r7, #4]
 801a8d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 801a8dc:	461a      	mov	r2, r3
 801a8de:	f004 fe2f 	bl	801f540 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 801a8e2:	687b      	ldr	r3, [r7, #4]
 801a8e4:	681b      	ldr	r3, [r3, #0]
 801a8e6:	695a      	ldr	r2, [r3, #20]
 801a8e8:	687b      	ldr	r3, [r7, #4]
 801a8ea:	681b      	ldr	r3, [r3, #0]
 801a8ec:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 801a8f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 801a8f2:	687b      	ldr	r3, [r7, #4]
 801a8f4:	681b      	ldr	r3, [r3, #0]
 801a8f6:	4618      	mov	r0, r3
 801a8f8:	f004 fd5d 	bl	801f3b6 <USB_ReadInterrupts>
 801a8fc:	4603      	mov	r3, r0
 801a8fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a902:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801a906:	d124      	bne.n	801a952 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 801a908:	687b      	ldr	r3, [r7, #4]
 801a90a:	681b      	ldr	r3, [r3, #0]
 801a90c:	4618      	mov	r0, r3
 801a90e:	f004 fdf3 	bl	801f4f8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 801a912:	687b      	ldr	r3, [r7, #4]
 801a914:	681b      	ldr	r3, [r3, #0]
 801a916:	4618      	mov	r0, r3
 801a918:	f003 fe5b 	bl	801e5d2 <USB_GetDevSpeed>
 801a91c:	4603      	mov	r3, r0
 801a91e:	461a      	mov	r2, r3
 801a920:	687b      	ldr	r3, [r7, #4]
 801a922:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 801a924:	687b      	ldr	r3, [r7, #4]
 801a926:	681c      	ldr	r4, [r3, #0]
 801a928:	f000 fe94 	bl	801b654 <HAL_RCC_GetHCLKFreq>
 801a92c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 801a92e:	687b      	ldr	r3, [r7, #4]
 801a930:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 801a932:	b2db      	uxtb	r3, r3
 801a934:	461a      	mov	r2, r3
 801a936:	4620      	mov	r0, r4
 801a938:	f003 fb80 	bl	801e03c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 801a93c:	6878      	ldr	r0, [r7, #4]
 801a93e:	f008 f872 	bl	8022a26 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 801a942:	687b      	ldr	r3, [r7, #4]
 801a944:	681b      	ldr	r3, [r3, #0]
 801a946:	695a      	ldr	r2, [r3, #20]
 801a948:	687b      	ldr	r3, [r7, #4]
 801a94a:	681b      	ldr	r3, [r3, #0]
 801a94c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 801a950:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 801a952:	687b      	ldr	r3, [r7, #4]
 801a954:	681b      	ldr	r3, [r3, #0]
 801a956:	4618      	mov	r0, r3
 801a958:	f004 fd2d 	bl	801f3b6 <USB_ReadInterrupts>
 801a95c:	4603      	mov	r3, r0
 801a95e:	f003 0308 	and.w	r3, r3, #8
 801a962:	2b08      	cmp	r3, #8
 801a964:	d10a      	bne.n	801a97c <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 801a966:	6878      	ldr	r0, [r7, #4]
 801a968:	f008 f84f 	bl	8022a0a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 801a96c:	687b      	ldr	r3, [r7, #4]
 801a96e:	681b      	ldr	r3, [r3, #0]
 801a970:	695a      	ldr	r2, [r3, #20]
 801a972:	687b      	ldr	r3, [r7, #4]
 801a974:	681b      	ldr	r3, [r3, #0]
 801a976:	f002 0208 	and.w	r2, r2, #8
 801a97a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 801a97c:	687b      	ldr	r3, [r7, #4]
 801a97e:	681b      	ldr	r3, [r3, #0]
 801a980:	4618      	mov	r0, r3
 801a982:	f004 fd18 	bl	801f3b6 <USB_ReadInterrupts>
 801a986:	4603      	mov	r3, r0
 801a988:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801a98c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801a990:	d10f      	bne.n	801a9b2 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 801a992:	2300      	movs	r3, #0
 801a994:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 801a996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a998:	b2db      	uxtb	r3, r3
 801a99a:	4619      	mov	r1, r3
 801a99c:	6878      	ldr	r0, [r7, #4]
 801a99e:	f008 f8b1 	bl	8022b04 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 801a9a2:	687b      	ldr	r3, [r7, #4]
 801a9a4:	681b      	ldr	r3, [r3, #0]
 801a9a6:	695a      	ldr	r2, [r3, #20]
 801a9a8:	687b      	ldr	r3, [r7, #4]
 801a9aa:	681b      	ldr	r3, [r3, #0]
 801a9ac:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 801a9b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 801a9b2:	687b      	ldr	r3, [r7, #4]
 801a9b4:	681b      	ldr	r3, [r3, #0]
 801a9b6:	4618      	mov	r0, r3
 801a9b8:	f004 fcfd 	bl	801f3b6 <USB_ReadInterrupts>
 801a9bc:	4603      	mov	r3, r0
 801a9be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801a9c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801a9c6:	d10f      	bne.n	801a9e8 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 801a9c8:	2300      	movs	r3, #0
 801a9ca:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 801a9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a9ce:	b2db      	uxtb	r3, r3
 801a9d0:	4619      	mov	r1, r3
 801a9d2:	6878      	ldr	r0, [r7, #4]
 801a9d4:	f008 f884 	bl	8022ae0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 801a9d8:	687b      	ldr	r3, [r7, #4]
 801a9da:	681b      	ldr	r3, [r3, #0]
 801a9dc:	695a      	ldr	r2, [r3, #20]
 801a9de:	687b      	ldr	r3, [r7, #4]
 801a9e0:	681b      	ldr	r3, [r3, #0]
 801a9e2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 801a9e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 801a9e8:	687b      	ldr	r3, [r7, #4]
 801a9ea:	681b      	ldr	r3, [r3, #0]
 801a9ec:	4618      	mov	r0, r3
 801a9ee:	f004 fce2 	bl	801f3b6 <USB_ReadInterrupts>
 801a9f2:	4603      	mov	r3, r0
 801a9f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801a9f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a9fc:	d10a      	bne.n	801aa14 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 801a9fe:	6878      	ldr	r0, [r7, #4]
 801aa00:	f008 f892 	bl	8022b28 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 801aa04:	687b      	ldr	r3, [r7, #4]
 801aa06:	681b      	ldr	r3, [r3, #0]
 801aa08:	695a      	ldr	r2, [r3, #20]
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	681b      	ldr	r3, [r3, #0]
 801aa0e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 801aa12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	681b      	ldr	r3, [r3, #0]
 801aa18:	4618      	mov	r0, r3
 801aa1a:	f004 fccc 	bl	801f3b6 <USB_ReadInterrupts>
 801aa1e:	4603      	mov	r3, r0
 801aa20:	f003 0304 	and.w	r3, r3, #4
 801aa24:	2b04      	cmp	r3, #4
 801aa26:	d115      	bne.n	801aa54 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 801aa28:	687b      	ldr	r3, [r7, #4]
 801aa2a:	681b      	ldr	r3, [r3, #0]
 801aa2c:	685b      	ldr	r3, [r3, #4]
 801aa2e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 801aa30:	69bb      	ldr	r3, [r7, #24]
 801aa32:	f003 0304 	and.w	r3, r3, #4
 801aa36:	2b00      	cmp	r3, #0
 801aa38:	d002      	beq.n	801aa40 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 801aa3a:	6878      	ldr	r0, [r7, #4]
 801aa3c:	f008 f882 	bl	8022b44 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 801aa40:	687b      	ldr	r3, [r7, #4]
 801aa42:	681b      	ldr	r3, [r3, #0]
 801aa44:	6859      	ldr	r1, [r3, #4]
 801aa46:	687b      	ldr	r3, [r7, #4]
 801aa48:	681b      	ldr	r3, [r3, #0]
 801aa4a:	69ba      	ldr	r2, [r7, #24]
 801aa4c:	430a      	orrs	r2, r1
 801aa4e:	605a      	str	r2, [r3, #4]
 801aa50:	e000      	b.n	801aa54 <HAL_PCD_IRQHandler+0x7b8>
      return;
 801aa52:	bf00      	nop
    }
  }
}
 801aa54:	3734      	adds	r7, #52	; 0x34
 801aa56:	46bd      	mov	sp, r7
 801aa58:	bd90      	pop	{r4, r7, pc}

0801aa5a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 801aa5a:	b580      	push	{r7, lr}
 801aa5c:	b082      	sub	sp, #8
 801aa5e:	af00      	add	r7, sp, #0
 801aa60:	6078      	str	r0, [r7, #4]
 801aa62:	460b      	mov	r3, r1
 801aa64:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 801aa66:	687b      	ldr	r3, [r7, #4]
 801aa68:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801aa6c:	2b01      	cmp	r3, #1
 801aa6e:	d101      	bne.n	801aa74 <HAL_PCD_SetAddress+0x1a>
 801aa70:	2302      	movs	r3, #2
 801aa72:	e013      	b.n	801aa9c <HAL_PCD_SetAddress+0x42>
 801aa74:	687b      	ldr	r3, [r7, #4]
 801aa76:	2201      	movs	r2, #1
 801aa78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 801aa7c:	687b      	ldr	r3, [r7, #4]
 801aa7e:	78fa      	ldrb	r2, [r7, #3]
 801aa80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 801aa84:	687b      	ldr	r3, [r7, #4]
 801aa86:	681b      	ldr	r3, [r3, #0]
 801aa88:	78fa      	ldrb	r2, [r7, #3]
 801aa8a:	4611      	mov	r1, r2
 801aa8c:	4618      	mov	r0, r3
 801aa8e:	f004 fc2a 	bl	801f2e6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 801aa92:	687b      	ldr	r3, [r7, #4]
 801aa94:	2200      	movs	r2, #0
 801aa96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801aa9a:	2300      	movs	r3, #0
}
 801aa9c:	4618      	mov	r0, r3
 801aa9e:	3708      	adds	r7, #8
 801aaa0:	46bd      	mov	sp, r7
 801aaa2:	bd80      	pop	{r7, pc}

0801aaa4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 801aaa4:	b580      	push	{r7, lr}
 801aaa6:	b084      	sub	sp, #16
 801aaa8:	af00      	add	r7, sp, #0
 801aaaa:	6078      	str	r0, [r7, #4]
 801aaac:	4608      	mov	r0, r1
 801aaae:	4611      	mov	r1, r2
 801aab0:	461a      	mov	r2, r3
 801aab2:	4603      	mov	r3, r0
 801aab4:	70fb      	strb	r3, [r7, #3]
 801aab6:	460b      	mov	r3, r1
 801aab8:	803b      	strh	r3, [r7, #0]
 801aaba:	4613      	mov	r3, r2
 801aabc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 801aabe:	2300      	movs	r3, #0
 801aac0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801aac2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801aac6:	2b00      	cmp	r3, #0
 801aac8:	da0f      	bge.n	801aaea <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801aaca:	78fb      	ldrb	r3, [r7, #3]
 801aacc:	f003 020f 	and.w	r2, r3, #15
 801aad0:	4613      	mov	r3, r2
 801aad2:	00db      	lsls	r3, r3, #3
 801aad4:	1a9b      	subs	r3, r3, r2
 801aad6:	009b      	lsls	r3, r3, #2
 801aad8:	3338      	adds	r3, #56	; 0x38
 801aada:	687a      	ldr	r2, [r7, #4]
 801aadc:	4413      	add	r3, r2
 801aade:	3304      	adds	r3, #4
 801aae0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801aae2:	68fb      	ldr	r3, [r7, #12]
 801aae4:	2201      	movs	r2, #1
 801aae6:	705a      	strb	r2, [r3, #1]
 801aae8:	e00f      	b.n	801ab0a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801aaea:	78fb      	ldrb	r3, [r7, #3]
 801aaec:	f003 020f 	and.w	r2, r3, #15
 801aaf0:	4613      	mov	r3, r2
 801aaf2:	00db      	lsls	r3, r3, #3
 801aaf4:	1a9b      	subs	r3, r3, r2
 801aaf6:	009b      	lsls	r3, r3, #2
 801aaf8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801aafc:	687a      	ldr	r2, [r7, #4]
 801aafe:	4413      	add	r3, r2
 801ab00:	3304      	adds	r3, #4
 801ab02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801ab04:	68fb      	ldr	r3, [r7, #12]
 801ab06:	2200      	movs	r2, #0
 801ab08:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 801ab0a:	78fb      	ldrb	r3, [r7, #3]
 801ab0c:	f003 030f 	and.w	r3, r3, #15
 801ab10:	b2da      	uxtb	r2, r3
 801ab12:	68fb      	ldr	r3, [r7, #12]
 801ab14:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 801ab16:	883a      	ldrh	r2, [r7, #0]
 801ab18:	68fb      	ldr	r3, [r7, #12]
 801ab1a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 801ab1c:	68fb      	ldr	r3, [r7, #12]
 801ab1e:	78ba      	ldrb	r2, [r7, #2]
 801ab20:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 801ab22:	68fb      	ldr	r3, [r7, #12]
 801ab24:	785b      	ldrb	r3, [r3, #1]
 801ab26:	2b00      	cmp	r3, #0
 801ab28:	d004      	beq.n	801ab34 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 801ab2a:	68fb      	ldr	r3, [r7, #12]
 801ab2c:	781b      	ldrb	r3, [r3, #0]
 801ab2e:	b29a      	uxth	r2, r3
 801ab30:	68fb      	ldr	r3, [r7, #12]
 801ab32:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 801ab34:	78bb      	ldrb	r3, [r7, #2]
 801ab36:	2b02      	cmp	r3, #2
 801ab38:	d102      	bne.n	801ab40 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 801ab3a:	68fb      	ldr	r3, [r7, #12]
 801ab3c:	2200      	movs	r2, #0
 801ab3e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 801ab40:	687b      	ldr	r3, [r7, #4]
 801ab42:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801ab46:	2b01      	cmp	r3, #1
 801ab48:	d101      	bne.n	801ab4e <HAL_PCD_EP_Open+0xaa>
 801ab4a:	2302      	movs	r3, #2
 801ab4c:	e00e      	b.n	801ab6c <HAL_PCD_EP_Open+0xc8>
 801ab4e:	687b      	ldr	r3, [r7, #4]
 801ab50:	2201      	movs	r2, #1
 801ab52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 801ab56:	687b      	ldr	r3, [r7, #4]
 801ab58:	681b      	ldr	r3, [r3, #0]
 801ab5a:	68f9      	ldr	r1, [r7, #12]
 801ab5c:	4618      	mov	r0, r3
 801ab5e:	f003 fd5d 	bl	801e61c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801ab62:	687b      	ldr	r3, [r7, #4]
 801ab64:	2200      	movs	r2, #0
 801ab66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 801ab6a:	7afb      	ldrb	r3, [r7, #11]
}
 801ab6c:	4618      	mov	r0, r3
 801ab6e:	3710      	adds	r7, #16
 801ab70:	46bd      	mov	sp, r7
 801ab72:	bd80      	pop	{r7, pc}

0801ab74 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801ab74:	b580      	push	{r7, lr}
 801ab76:	b084      	sub	sp, #16
 801ab78:	af00      	add	r7, sp, #0
 801ab7a:	6078      	str	r0, [r7, #4]
 801ab7c:	460b      	mov	r3, r1
 801ab7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801ab80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ab84:	2b00      	cmp	r3, #0
 801ab86:	da0f      	bge.n	801aba8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801ab88:	78fb      	ldrb	r3, [r7, #3]
 801ab8a:	f003 020f 	and.w	r2, r3, #15
 801ab8e:	4613      	mov	r3, r2
 801ab90:	00db      	lsls	r3, r3, #3
 801ab92:	1a9b      	subs	r3, r3, r2
 801ab94:	009b      	lsls	r3, r3, #2
 801ab96:	3338      	adds	r3, #56	; 0x38
 801ab98:	687a      	ldr	r2, [r7, #4]
 801ab9a:	4413      	add	r3, r2
 801ab9c:	3304      	adds	r3, #4
 801ab9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801aba0:	68fb      	ldr	r3, [r7, #12]
 801aba2:	2201      	movs	r2, #1
 801aba4:	705a      	strb	r2, [r3, #1]
 801aba6:	e00f      	b.n	801abc8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801aba8:	78fb      	ldrb	r3, [r7, #3]
 801abaa:	f003 020f 	and.w	r2, r3, #15
 801abae:	4613      	mov	r3, r2
 801abb0:	00db      	lsls	r3, r3, #3
 801abb2:	1a9b      	subs	r3, r3, r2
 801abb4:	009b      	lsls	r3, r3, #2
 801abb6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801abba:	687a      	ldr	r2, [r7, #4]
 801abbc:	4413      	add	r3, r2
 801abbe:	3304      	adds	r3, #4
 801abc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801abc2:	68fb      	ldr	r3, [r7, #12]
 801abc4:	2200      	movs	r2, #0
 801abc6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 801abc8:	78fb      	ldrb	r3, [r7, #3]
 801abca:	f003 030f 	and.w	r3, r3, #15
 801abce:	b2da      	uxtb	r2, r3
 801abd0:	68fb      	ldr	r3, [r7, #12]
 801abd2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801abd4:	687b      	ldr	r3, [r7, #4]
 801abd6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801abda:	2b01      	cmp	r3, #1
 801abdc:	d101      	bne.n	801abe2 <HAL_PCD_EP_Close+0x6e>
 801abde:	2302      	movs	r3, #2
 801abe0:	e00e      	b.n	801ac00 <HAL_PCD_EP_Close+0x8c>
 801abe2:	687b      	ldr	r3, [r7, #4]
 801abe4:	2201      	movs	r2, #1
 801abe6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	681b      	ldr	r3, [r3, #0]
 801abee:	68f9      	ldr	r1, [r7, #12]
 801abf0:	4618      	mov	r0, r3
 801abf2:	f003 fd9b 	bl	801e72c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801abf6:	687b      	ldr	r3, [r7, #4]
 801abf8:	2200      	movs	r2, #0
 801abfa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 801abfe:	2300      	movs	r3, #0
}
 801ac00:	4618      	mov	r0, r3
 801ac02:	3710      	adds	r7, #16
 801ac04:	46bd      	mov	sp, r7
 801ac06:	bd80      	pop	{r7, pc}

0801ac08 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801ac08:	b580      	push	{r7, lr}
 801ac0a:	b086      	sub	sp, #24
 801ac0c:	af00      	add	r7, sp, #0
 801ac0e:	60f8      	str	r0, [r7, #12]
 801ac10:	607a      	str	r2, [r7, #4]
 801ac12:	603b      	str	r3, [r7, #0]
 801ac14:	460b      	mov	r3, r1
 801ac16:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801ac18:	7afb      	ldrb	r3, [r7, #11]
 801ac1a:	f003 020f 	and.w	r2, r3, #15
 801ac1e:	4613      	mov	r3, r2
 801ac20:	00db      	lsls	r3, r3, #3
 801ac22:	1a9b      	subs	r3, r3, r2
 801ac24:	009b      	lsls	r3, r3, #2
 801ac26:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801ac2a:	68fa      	ldr	r2, [r7, #12]
 801ac2c:	4413      	add	r3, r2
 801ac2e:	3304      	adds	r3, #4
 801ac30:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801ac32:	697b      	ldr	r3, [r7, #20]
 801ac34:	687a      	ldr	r2, [r7, #4]
 801ac36:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 801ac38:	697b      	ldr	r3, [r7, #20]
 801ac3a:	683a      	ldr	r2, [r7, #0]
 801ac3c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 801ac3e:	697b      	ldr	r3, [r7, #20]
 801ac40:	2200      	movs	r2, #0
 801ac42:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 801ac44:	697b      	ldr	r3, [r7, #20]
 801ac46:	2200      	movs	r2, #0
 801ac48:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801ac4a:	7afb      	ldrb	r3, [r7, #11]
 801ac4c:	f003 030f 	and.w	r3, r3, #15
 801ac50:	b2da      	uxtb	r2, r3
 801ac52:	697b      	ldr	r3, [r7, #20]
 801ac54:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 801ac56:	68fb      	ldr	r3, [r7, #12]
 801ac58:	691b      	ldr	r3, [r3, #16]
 801ac5a:	2b01      	cmp	r3, #1
 801ac5c:	d102      	bne.n	801ac64 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 801ac5e:	687a      	ldr	r2, [r7, #4]
 801ac60:	697b      	ldr	r3, [r7, #20]
 801ac62:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801ac64:	7afb      	ldrb	r3, [r7, #11]
 801ac66:	f003 030f 	and.w	r3, r3, #15
 801ac6a:	2b00      	cmp	r3, #0
 801ac6c:	d109      	bne.n	801ac82 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801ac6e:	68fb      	ldr	r3, [r7, #12]
 801ac70:	6818      	ldr	r0, [r3, #0]
 801ac72:	68fb      	ldr	r3, [r7, #12]
 801ac74:	691b      	ldr	r3, [r3, #16]
 801ac76:	b2db      	uxtb	r3, r3
 801ac78:	461a      	mov	r2, r3
 801ac7a:	6979      	ldr	r1, [r7, #20]
 801ac7c:	f004 f876 	bl	801ed6c <USB_EP0StartXfer>
 801ac80:	e008      	b.n	801ac94 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801ac82:	68fb      	ldr	r3, [r7, #12]
 801ac84:	6818      	ldr	r0, [r3, #0]
 801ac86:	68fb      	ldr	r3, [r7, #12]
 801ac88:	691b      	ldr	r3, [r3, #16]
 801ac8a:	b2db      	uxtb	r3, r3
 801ac8c:	461a      	mov	r2, r3
 801ac8e:	6979      	ldr	r1, [r7, #20]
 801ac90:	f003 fe28 	bl	801e8e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 801ac94:	2300      	movs	r3, #0
}
 801ac96:	4618      	mov	r0, r3
 801ac98:	3718      	adds	r7, #24
 801ac9a:	46bd      	mov	sp, r7
 801ac9c:	bd80      	pop	{r7, pc}

0801ac9e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801ac9e:	b480      	push	{r7}
 801aca0:	b083      	sub	sp, #12
 801aca2:	af00      	add	r7, sp, #0
 801aca4:	6078      	str	r0, [r7, #4]
 801aca6:	460b      	mov	r3, r1
 801aca8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 801acaa:	78fb      	ldrb	r3, [r7, #3]
 801acac:	f003 020f 	and.w	r2, r3, #15
 801acb0:	6879      	ldr	r1, [r7, #4]
 801acb2:	4613      	mov	r3, r2
 801acb4:	00db      	lsls	r3, r3, #3
 801acb6:	1a9b      	subs	r3, r3, r2
 801acb8:	009b      	lsls	r3, r3, #2
 801acba:	440b      	add	r3, r1
 801acbc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 801acc0:	681b      	ldr	r3, [r3, #0]
}
 801acc2:	4618      	mov	r0, r3
 801acc4:	370c      	adds	r7, #12
 801acc6:	46bd      	mov	sp, r7
 801acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801accc:	4770      	bx	lr

0801acce <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801acce:	b580      	push	{r7, lr}
 801acd0:	b086      	sub	sp, #24
 801acd2:	af00      	add	r7, sp, #0
 801acd4:	60f8      	str	r0, [r7, #12]
 801acd6:	607a      	str	r2, [r7, #4]
 801acd8:	603b      	str	r3, [r7, #0]
 801acda:	460b      	mov	r3, r1
 801acdc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801acde:	7afb      	ldrb	r3, [r7, #11]
 801ace0:	f003 020f 	and.w	r2, r3, #15
 801ace4:	4613      	mov	r3, r2
 801ace6:	00db      	lsls	r3, r3, #3
 801ace8:	1a9b      	subs	r3, r3, r2
 801acea:	009b      	lsls	r3, r3, #2
 801acec:	3338      	adds	r3, #56	; 0x38
 801acee:	68fa      	ldr	r2, [r7, #12]
 801acf0:	4413      	add	r3, r2
 801acf2:	3304      	adds	r3, #4
 801acf4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801acf6:	697b      	ldr	r3, [r7, #20]
 801acf8:	687a      	ldr	r2, [r7, #4]
 801acfa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 801acfc:	697b      	ldr	r3, [r7, #20]
 801acfe:	683a      	ldr	r2, [r7, #0]
 801ad00:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 801ad02:	697b      	ldr	r3, [r7, #20]
 801ad04:	2200      	movs	r2, #0
 801ad06:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 801ad08:	697b      	ldr	r3, [r7, #20]
 801ad0a:	2201      	movs	r2, #1
 801ad0c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801ad0e:	7afb      	ldrb	r3, [r7, #11]
 801ad10:	f003 030f 	and.w	r3, r3, #15
 801ad14:	b2da      	uxtb	r2, r3
 801ad16:	697b      	ldr	r3, [r7, #20]
 801ad18:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 801ad1a:	68fb      	ldr	r3, [r7, #12]
 801ad1c:	691b      	ldr	r3, [r3, #16]
 801ad1e:	2b01      	cmp	r3, #1
 801ad20:	d102      	bne.n	801ad28 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 801ad22:	687a      	ldr	r2, [r7, #4]
 801ad24:	697b      	ldr	r3, [r7, #20]
 801ad26:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801ad28:	7afb      	ldrb	r3, [r7, #11]
 801ad2a:	f003 030f 	and.w	r3, r3, #15
 801ad2e:	2b00      	cmp	r3, #0
 801ad30:	d109      	bne.n	801ad46 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801ad32:	68fb      	ldr	r3, [r7, #12]
 801ad34:	6818      	ldr	r0, [r3, #0]
 801ad36:	68fb      	ldr	r3, [r7, #12]
 801ad38:	691b      	ldr	r3, [r3, #16]
 801ad3a:	b2db      	uxtb	r3, r3
 801ad3c:	461a      	mov	r2, r3
 801ad3e:	6979      	ldr	r1, [r7, #20]
 801ad40:	f004 f814 	bl	801ed6c <USB_EP0StartXfer>
 801ad44:	e008      	b.n	801ad58 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801ad46:	68fb      	ldr	r3, [r7, #12]
 801ad48:	6818      	ldr	r0, [r3, #0]
 801ad4a:	68fb      	ldr	r3, [r7, #12]
 801ad4c:	691b      	ldr	r3, [r3, #16]
 801ad4e:	b2db      	uxtb	r3, r3
 801ad50:	461a      	mov	r2, r3
 801ad52:	6979      	ldr	r1, [r7, #20]
 801ad54:	f003 fdc6 	bl	801e8e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 801ad58:	2300      	movs	r3, #0
}
 801ad5a:	4618      	mov	r0, r3
 801ad5c:	3718      	adds	r7, #24
 801ad5e:	46bd      	mov	sp, r7
 801ad60:	bd80      	pop	{r7, pc}

0801ad62 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801ad62:	b580      	push	{r7, lr}
 801ad64:	b084      	sub	sp, #16
 801ad66:	af00      	add	r7, sp, #0
 801ad68:	6078      	str	r0, [r7, #4]
 801ad6a:	460b      	mov	r3, r1
 801ad6c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 801ad6e:	78fb      	ldrb	r3, [r7, #3]
 801ad70:	f003 020f 	and.w	r2, r3, #15
 801ad74:	687b      	ldr	r3, [r7, #4]
 801ad76:	685b      	ldr	r3, [r3, #4]
 801ad78:	429a      	cmp	r2, r3
 801ad7a:	d901      	bls.n	801ad80 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 801ad7c:	2301      	movs	r3, #1
 801ad7e:	e050      	b.n	801ae22 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801ad80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ad84:	2b00      	cmp	r3, #0
 801ad86:	da0f      	bge.n	801ada8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801ad88:	78fb      	ldrb	r3, [r7, #3]
 801ad8a:	f003 020f 	and.w	r2, r3, #15
 801ad8e:	4613      	mov	r3, r2
 801ad90:	00db      	lsls	r3, r3, #3
 801ad92:	1a9b      	subs	r3, r3, r2
 801ad94:	009b      	lsls	r3, r3, #2
 801ad96:	3338      	adds	r3, #56	; 0x38
 801ad98:	687a      	ldr	r2, [r7, #4]
 801ad9a:	4413      	add	r3, r2
 801ad9c:	3304      	adds	r3, #4
 801ad9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801ada0:	68fb      	ldr	r3, [r7, #12]
 801ada2:	2201      	movs	r2, #1
 801ada4:	705a      	strb	r2, [r3, #1]
 801ada6:	e00d      	b.n	801adc4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801ada8:	78fa      	ldrb	r2, [r7, #3]
 801adaa:	4613      	mov	r3, r2
 801adac:	00db      	lsls	r3, r3, #3
 801adae:	1a9b      	subs	r3, r3, r2
 801adb0:	009b      	lsls	r3, r3, #2
 801adb2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801adb6:	687a      	ldr	r2, [r7, #4]
 801adb8:	4413      	add	r3, r2
 801adba:	3304      	adds	r3, #4
 801adbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801adbe:	68fb      	ldr	r3, [r7, #12]
 801adc0:	2200      	movs	r2, #0
 801adc2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 801adc4:	68fb      	ldr	r3, [r7, #12]
 801adc6:	2201      	movs	r2, #1
 801adc8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801adca:	78fb      	ldrb	r3, [r7, #3]
 801adcc:	f003 030f 	and.w	r3, r3, #15
 801add0:	b2da      	uxtb	r2, r3
 801add2:	68fb      	ldr	r3, [r7, #12]
 801add4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801add6:	687b      	ldr	r3, [r7, #4]
 801add8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801addc:	2b01      	cmp	r3, #1
 801adde:	d101      	bne.n	801ade4 <HAL_PCD_EP_SetStall+0x82>
 801ade0:	2302      	movs	r3, #2
 801ade2:	e01e      	b.n	801ae22 <HAL_PCD_EP_SetStall+0xc0>
 801ade4:	687b      	ldr	r3, [r7, #4]
 801ade6:	2201      	movs	r2, #1
 801ade8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 801adec:	687b      	ldr	r3, [r7, #4]
 801adee:	681b      	ldr	r3, [r3, #0]
 801adf0:	68f9      	ldr	r1, [r7, #12]
 801adf2:	4618      	mov	r0, r3
 801adf4:	f004 f9a3 	bl	801f13e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801adf8:	78fb      	ldrb	r3, [r7, #3]
 801adfa:	f003 030f 	and.w	r3, r3, #15
 801adfe:	2b00      	cmp	r3, #0
 801ae00:	d10a      	bne.n	801ae18 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 801ae02:	687b      	ldr	r3, [r7, #4]
 801ae04:	6818      	ldr	r0, [r3, #0]
 801ae06:	687b      	ldr	r3, [r7, #4]
 801ae08:	691b      	ldr	r3, [r3, #16]
 801ae0a:	b2d9      	uxtb	r1, r3
 801ae0c:	687b      	ldr	r3, [r7, #4]
 801ae0e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801ae12:	461a      	mov	r2, r3
 801ae14:	f004 fb94 	bl	801f540 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 801ae18:	687b      	ldr	r3, [r7, #4]
 801ae1a:	2200      	movs	r2, #0
 801ae1c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801ae20:	2300      	movs	r3, #0
}
 801ae22:	4618      	mov	r0, r3
 801ae24:	3710      	adds	r7, #16
 801ae26:	46bd      	mov	sp, r7
 801ae28:	bd80      	pop	{r7, pc}

0801ae2a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801ae2a:	b580      	push	{r7, lr}
 801ae2c:	b084      	sub	sp, #16
 801ae2e:	af00      	add	r7, sp, #0
 801ae30:	6078      	str	r0, [r7, #4]
 801ae32:	460b      	mov	r3, r1
 801ae34:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 801ae36:	78fb      	ldrb	r3, [r7, #3]
 801ae38:	f003 020f 	and.w	r2, r3, #15
 801ae3c:	687b      	ldr	r3, [r7, #4]
 801ae3e:	685b      	ldr	r3, [r3, #4]
 801ae40:	429a      	cmp	r2, r3
 801ae42:	d901      	bls.n	801ae48 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 801ae44:	2301      	movs	r3, #1
 801ae46:	e042      	b.n	801aece <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801ae48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ae4c:	2b00      	cmp	r3, #0
 801ae4e:	da0f      	bge.n	801ae70 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801ae50:	78fb      	ldrb	r3, [r7, #3]
 801ae52:	f003 020f 	and.w	r2, r3, #15
 801ae56:	4613      	mov	r3, r2
 801ae58:	00db      	lsls	r3, r3, #3
 801ae5a:	1a9b      	subs	r3, r3, r2
 801ae5c:	009b      	lsls	r3, r3, #2
 801ae5e:	3338      	adds	r3, #56	; 0x38
 801ae60:	687a      	ldr	r2, [r7, #4]
 801ae62:	4413      	add	r3, r2
 801ae64:	3304      	adds	r3, #4
 801ae66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801ae68:	68fb      	ldr	r3, [r7, #12]
 801ae6a:	2201      	movs	r2, #1
 801ae6c:	705a      	strb	r2, [r3, #1]
 801ae6e:	e00f      	b.n	801ae90 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801ae70:	78fb      	ldrb	r3, [r7, #3]
 801ae72:	f003 020f 	and.w	r2, r3, #15
 801ae76:	4613      	mov	r3, r2
 801ae78:	00db      	lsls	r3, r3, #3
 801ae7a:	1a9b      	subs	r3, r3, r2
 801ae7c:	009b      	lsls	r3, r3, #2
 801ae7e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801ae82:	687a      	ldr	r2, [r7, #4]
 801ae84:	4413      	add	r3, r2
 801ae86:	3304      	adds	r3, #4
 801ae88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801ae8a:	68fb      	ldr	r3, [r7, #12]
 801ae8c:	2200      	movs	r2, #0
 801ae8e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 801ae90:	68fb      	ldr	r3, [r7, #12]
 801ae92:	2200      	movs	r2, #0
 801ae94:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801ae96:	78fb      	ldrb	r3, [r7, #3]
 801ae98:	f003 030f 	and.w	r3, r3, #15
 801ae9c:	b2da      	uxtb	r2, r3
 801ae9e:	68fb      	ldr	r3, [r7, #12]
 801aea0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801aea2:	687b      	ldr	r3, [r7, #4]
 801aea4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801aea8:	2b01      	cmp	r3, #1
 801aeaa:	d101      	bne.n	801aeb0 <HAL_PCD_EP_ClrStall+0x86>
 801aeac:	2302      	movs	r3, #2
 801aeae:	e00e      	b.n	801aece <HAL_PCD_EP_ClrStall+0xa4>
 801aeb0:	687b      	ldr	r3, [r7, #4]
 801aeb2:	2201      	movs	r2, #1
 801aeb4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 801aeb8:	687b      	ldr	r3, [r7, #4]
 801aeba:	681b      	ldr	r3, [r3, #0]
 801aebc:	68f9      	ldr	r1, [r7, #12]
 801aebe:	4618      	mov	r0, r3
 801aec0:	f004 f9ab 	bl	801f21a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 801aec4:	687b      	ldr	r3, [r7, #4]
 801aec6:	2200      	movs	r2, #0
 801aec8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801aecc:	2300      	movs	r3, #0
}
 801aece:	4618      	mov	r0, r3
 801aed0:	3710      	adds	r7, #16
 801aed2:	46bd      	mov	sp, r7
 801aed4:	bd80      	pop	{r7, pc}

0801aed6 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801aed6:	b580      	push	{r7, lr}
 801aed8:	b082      	sub	sp, #8
 801aeda:	af00      	add	r7, sp, #0
 801aedc:	6078      	str	r0, [r7, #4]
 801aede:	460b      	mov	r3, r1
 801aee0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 801aee2:	687b      	ldr	r3, [r7, #4]
 801aee4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801aee8:	2b01      	cmp	r3, #1
 801aeea:	d101      	bne.n	801aef0 <HAL_PCD_EP_Flush+0x1a>
 801aeec:	2302      	movs	r3, #2
 801aeee:	e01b      	b.n	801af28 <HAL_PCD_EP_Flush+0x52>
 801aef0:	687b      	ldr	r3, [r7, #4]
 801aef2:	2201      	movs	r2, #1
 801aef4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 801aef8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801aefc:	2b00      	cmp	r3, #0
 801aefe:	da09      	bge.n	801af14 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 801af00:	687b      	ldr	r3, [r7, #4]
 801af02:	681a      	ldr	r2, [r3, #0]
 801af04:	78fb      	ldrb	r3, [r7, #3]
 801af06:	f003 030f 	and.w	r3, r3, #15
 801af0a:	4619      	mov	r1, r3
 801af0c:	4610      	mov	r0, r2
 801af0e:	f003 fb03 	bl	801e518 <USB_FlushTxFifo>
 801af12:	e004      	b.n	801af1e <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 801af14:	687b      	ldr	r3, [r7, #4]
 801af16:	681b      	ldr	r3, [r3, #0]
 801af18:	4618      	mov	r0, r3
 801af1a:	f003 fb21 	bl	801e560 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 801af1e:	687b      	ldr	r3, [r7, #4]
 801af20:	2200      	movs	r2, #0
 801af22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801af26:	2300      	movs	r3, #0
}
 801af28:	4618      	mov	r0, r3
 801af2a:	3708      	adds	r7, #8
 801af2c:	46bd      	mov	sp, r7
 801af2e:	bd80      	pop	{r7, pc}

0801af30 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801af30:	b580      	push	{r7, lr}
 801af32:	b08a      	sub	sp, #40	; 0x28
 801af34:	af02      	add	r7, sp, #8
 801af36:	6078      	str	r0, [r7, #4]
 801af38:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801af3a:	687b      	ldr	r3, [r7, #4]
 801af3c:	681b      	ldr	r3, [r3, #0]
 801af3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801af40:	697b      	ldr	r3, [r7, #20]
 801af42:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 801af44:	683a      	ldr	r2, [r7, #0]
 801af46:	4613      	mov	r3, r2
 801af48:	00db      	lsls	r3, r3, #3
 801af4a:	1a9b      	subs	r3, r3, r2
 801af4c:	009b      	lsls	r3, r3, #2
 801af4e:	3338      	adds	r3, #56	; 0x38
 801af50:	687a      	ldr	r2, [r7, #4]
 801af52:	4413      	add	r3, r2
 801af54:	3304      	adds	r3, #4
 801af56:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 801af58:	68fb      	ldr	r3, [r7, #12]
 801af5a:	699a      	ldr	r2, [r3, #24]
 801af5c:	68fb      	ldr	r3, [r7, #12]
 801af5e:	695b      	ldr	r3, [r3, #20]
 801af60:	429a      	cmp	r2, r3
 801af62:	d901      	bls.n	801af68 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 801af64:	2301      	movs	r3, #1
 801af66:	e06c      	b.n	801b042 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 801af68:	68fb      	ldr	r3, [r7, #12]
 801af6a:	695a      	ldr	r2, [r3, #20]
 801af6c:	68fb      	ldr	r3, [r7, #12]
 801af6e:	699b      	ldr	r3, [r3, #24]
 801af70:	1ad3      	subs	r3, r2, r3
 801af72:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 801af74:	68fb      	ldr	r3, [r7, #12]
 801af76:	689b      	ldr	r3, [r3, #8]
 801af78:	69fa      	ldr	r2, [r7, #28]
 801af7a:	429a      	cmp	r2, r3
 801af7c:	d902      	bls.n	801af84 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 801af7e:	68fb      	ldr	r3, [r7, #12]
 801af80:	689b      	ldr	r3, [r3, #8]
 801af82:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 801af84:	69fb      	ldr	r3, [r7, #28]
 801af86:	3303      	adds	r3, #3
 801af88:	089b      	lsrs	r3, r3, #2
 801af8a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801af8c:	e02b      	b.n	801afe6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 801af8e:	68fb      	ldr	r3, [r7, #12]
 801af90:	695a      	ldr	r2, [r3, #20]
 801af92:	68fb      	ldr	r3, [r7, #12]
 801af94:	699b      	ldr	r3, [r3, #24]
 801af96:	1ad3      	subs	r3, r2, r3
 801af98:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 801af9a:	68fb      	ldr	r3, [r7, #12]
 801af9c:	689b      	ldr	r3, [r3, #8]
 801af9e:	69fa      	ldr	r2, [r7, #28]
 801afa0:	429a      	cmp	r2, r3
 801afa2:	d902      	bls.n	801afaa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 801afa4:	68fb      	ldr	r3, [r7, #12]
 801afa6:	689b      	ldr	r3, [r3, #8]
 801afa8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 801afaa:	69fb      	ldr	r3, [r7, #28]
 801afac:	3303      	adds	r3, #3
 801afae:	089b      	lsrs	r3, r3, #2
 801afb0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 801afb2:	68fb      	ldr	r3, [r7, #12]
 801afb4:	68d9      	ldr	r1, [r3, #12]
 801afb6:	683b      	ldr	r3, [r7, #0]
 801afb8:	b2da      	uxtb	r2, r3
 801afba:	69fb      	ldr	r3, [r7, #28]
 801afbc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 801afbe:	687b      	ldr	r3, [r7, #4]
 801afc0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 801afc2:	b2db      	uxtb	r3, r3
 801afc4:	9300      	str	r3, [sp, #0]
 801afc6:	4603      	mov	r3, r0
 801afc8:	6978      	ldr	r0, [r7, #20]
 801afca:	f004 f822 	bl	801f012 <USB_WritePacket>

    ep->xfer_buff  += len;
 801afce:	68fb      	ldr	r3, [r7, #12]
 801afd0:	68da      	ldr	r2, [r3, #12]
 801afd2:	69fb      	ldr	r3, [r7, #28]
 801afd4:	441a      	add	r2, r3
 801afd6:	68fb      	ldr	r3, [r7, #12]
 801afd8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 801afda:	68fb      	ldr	r3, [r7, #12]
 801afdc:	699a      	ldr	r2, [r3, #24]
 801afde:	69fb      	ldr	r3, [r7, #28]
 801afe0:	441a      	add	r2, r3
 801afe2:	68fb      	ldr	r3, [r7, #12]
 801afe4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801afe6:	683b      	ldr	r3, [r7, #0]
 801afe8:	015a      	lsls	r2, r3, #5
 801afea:	693b      	ldr	r3, [r7, #16]
 801afec:	4413      	add	r3, r2
 801afee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801aff2:	699b      	ldr	r3, [r3, #24]
 801aff4:	b29b      	uxth	r3, r3
 801aff6:	69ba      	ldr	r2, [r7, #24]
 801aff8:	429a      	cmp	r2, r3
 801affa:	d809      	bhi.n	801b010 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801affc:	68fb      	ldr	r3, [r7, #12]
 801affe:	699a      	ldr	r2, [r3, #24]
 801b000:	68fb      	ldr	r3, [r7, #12]
 801b002:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801b004:	429a      	cmp	r2, r3
 801b006:	d203      	bcs.n	801b010 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801b008:	68fb      	ldr	r3, [r7, #12]
 801b00a:	695b      	ldr	r3, [r3, #20]
 801b00c:	2b00      	cmp	r3, #0
 801b00e:	d1be      	bne.n	801af8e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 801b010:	68fb      	ldr	r3, [r7, #12]
 801b012:	695a      	ldr	r2, [r3, #20]
 801b014:	68fb      	ldr	r3, [r7, #12]
 801b016:	699b      	ldr	r3, [r3, #24]
 801b018:	429a      	cmp	r2, r3
 801b01a:	d811      	bhi.n	801b040 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 801b01c:	683b      	ldr	r3, [r7, #0]
 801b01e:	f003 030f 	and.w	r3, r3, #15
 801b022:	2201      	movs	r2, #1
 801b024:	fa02 f303 	lsl.w	r3, r2, r3
 801b028:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 801b02a:	693b      	ldr	r3, [r7, #16]
 801b02c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b030:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801b032:	68bb      	ldr	r3, [r7, #8]
 801b034:	43db      	mvns	r3, r3
 801b036:	6939      	ldr	r1, [r7, #16]
 801b038:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b03c:	4013      	ands	r3, r2
 801b03e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 801b040:	2300      	movs	r3, #0
}
 801b042:	4618      	mov	r0, r3
 801b044:	3720      	adds	r7, #32
 801b046:	46bd      	mov	sp, r7
 801b048:	bd80      	pop	{r7, pc}
	...

0801b04c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801b04c:	b580      	push	{r7, lr}
 801b04e:	b086      	sub	sp, #24
 801b050:	af00      	add	r7, sp, #0
 801b052:	6078      	str	r0, [r7, #4]
 801b054:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801b056:	687b      	ldr	r3, [r7, #4]
 801b058:	681b      	ldr	r3, [r3, #0]
 801b05a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b05c:	697b      	ldr	r3, [r7, #20]
 801b05e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801b060:	697b      	ldr	r3, [r7, #20]
 801b062:	333c      	adds	r3, #60	; 0x3c
 801b064:	3304      	adds	r3, #4
 801b066:	681b      	ldr	r3, [r3, #0]
 801b068:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801b06a:	683b      	ldr	r3, [r7, #0]
 801b06c:	015a      	lsls	r2, r3, #5
 801b06e:	693b      	ldr	r3, [r7, #16]
 801b070:	4413      	add	r3, r2
 801b072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b076:	689b      	ldr	r3, [r3, #8]
 801b078:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 801b07a:	687b      	ldr	r3, [r7, #4]
 801b07c:	691b      	ldr	r3, [r3, #16]
 801b07e:	2b01      	cmp	r3, #1
 801b080:	f040 80a0 	bne.w	801b1c4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 801b084:	68bb      	ldr	r3, [r7, #8]
 801b086:	f003 0308 	and.w	r3, r3, #8
 801b08a:	2b00      	cmp	r3, #0
 801b08c:	d015      	beq.n	801b0ba <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801b08e:	68fb      	ldr	r3, [r7, #12]
 801b090:	4a72      	ldr	r2, [pc, #456]	; (801b25c <PCD_EP_OutXfrComplete_int+0x210>)
 801b092:	4293      	cmp	r3, r2
 801b094:	f240 80dd 	bls.w	801b252 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801b098:	68bb      	ldr	r3, [r7, #8]
 801b09a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801b09e:	2b00      	cmp	r3, #0
 801b0a0:	f000 80d7 	beq.w	801b252 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801b0a4:	683b      	ldr	r3, [r7, #0]
 801b0a6:	015a      	lsls	r2, r3, #5
 801b0a8:	693b      	ldr	r3, [r7, #16]
 801b0aa:	4413      	add	r3, r2
 801b0ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b0b0:	461a      	mov	r2, r3
 801b0b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801b0b6:	6093      	str	r3, [r2, #8]
 801b0b8:	e0cb      	b.n	801b252 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 801b0ba:	68bb      	ldr	r3, [r7, #8]
 801b0bc:	f003 0320 	and.w	r3, r3, #32
 801b0c0:	2b00      	cmp	r3, #0
 801b0c2:	d009      	beq.n	801b0d8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801b0c4:	683b      	ldr	r3, [r7, #0]
 801b0c6:	015a      	lsls	r2, r3, #5
 801b0c8:	693b      	ldr	r3, [r7, #16]
 801b0ca:	4413      	add	r3, r2
 801b0cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b0d0:	461a      	mov	r2, r3
 801b0d2:	2320      	movs	r3, #32
 801b0d4:	6093      	str	r3, [r2, #8]
 801b0d6:	e0bc      	b.n	801b252 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 801b0d8:	68bb      	ldr	r3, [r7, #8]
 801b0da:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801b0de:	2b00      	cmp	r3, #0
 801b0e0:	f040 80b7 	bne.w	801b252 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801b0e4:	68fb      	ldr	r3, [r7, #12]
 801b0e6:	4a5d      	ldr	r2, [pc, #372]	; (801b25c <PCD_EP_OutXfrComplete_int+0x210>)
 801b0e8:	4293      	cmp	r3, r2
 801b0ea:	d90f      	bls.n	801b10c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801b0ec:	68bb      	ldr	r3, [r7, #8]
 801b0ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801b0f2:	2b00      	cmp	r3, #0
 801b0f4:	d00a      	beq.n	801b10c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801b0f6:	683b      	ldr	r3, [r7, #0]
 801b0f8:	015a      	lsls	r2, r3, #5
 801b0fa:	693b      	ldr	r3, [r7, #16]
 801b0fc:	4413      	add	r3, r2
 801b0fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b102:	461a      	mov	r2, r3
 801b104:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801b108:	6093      	str	r3, [r2, #8]
 801b10a:	e0a2      	b.n	801b252 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 801b10c:	6879      	ldr	r1, [r7, #4]
 801b10e:	683a      	ldr	r2, [r7, #0]
 801b110:	4613      	mov	r3, r2
 801b112:	00db      	lsls	r3, r3, #3
 801b114:	1a9b      	subs	r3, r3, r2
 801b116:	009b      	lsls	r3, r3, #2
 801b118:	440b      	add	r3, r1
 801b11a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 801b11e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 801b120:	683b      	ldr	r3, [r7, #0]
 801b122:	0159      	lsls	r1, r3, #5
 801b124:	693b      	ldr	r3, [r7, #16]
 801b126:	440b      	add	r3, r1
 801b128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b12c:	691b      	ldr	r3, [r3, #16]
 801b12e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 801b132:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 801b134:	6878      	ldr	r0, [r7, #4]
 801b136:	683a      	ldr	r2, [r7, #0]
 801b138:	4613      	mov	r3, r2
 801b13a:	00db      	lsls	r3, r3, #3
 801b13c:	1a9b      	subs	r3, r3, r2
 801b13e:	009b      	lsls	r3, r3, #2
 801b140:	4403      	add	r3, r0
 801b142:	f503 7305 	add.w	r3, r3, #532	; 0x214
 801b146:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 801b148:	6879      	ldr	r1, [r7, #4]
 801b14a:	683a      	ldr	r2, [r7, #0]
 801b14c:	4613      	mov	r3, r2
 801b14e:	00db      	lsls	r3, r3, #3
 801b150:	1a9b      	subs	r3, r3, r2
 801b152:	009b      	lsls	r3, r3, #2
 801b154:	440b      	add	r3, r1
 801b156:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801b15a:	6819      	ldr	r1, [r3, #0]
 801b15c:	6878      	ldr	r0, [r7, #4]
 801b15e:	683a      	ldr	r2, [r7, #0]
 801b160:	4613      	mov	r3, r2
 801b162:	00db      	lsls	r3, r3, #3
 801b164:	1a9b      	subs	r3, r3, r2
 801b166:	009b      	lsls	r3, r3, #2
 801b168:	4403      	add	r3, r0
 801b16a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 801b16e:	681b      	ldr	r3, [r3, #0]
 801b170:	4419      	add	r1, r3
 801b172:	6878      	ldr	r0, [r7, #4]
 801b174:	683a      	ldr	r2, [r7, #0]
 801b176:	4613      	mov	r3, r2
 801b178:	00db      	lsls	r3, r3, #3
 801b17a:	1a9b      	subs	r3, r3, r2
 801b17c:	009b      	lsls	r3, r3, #2
 801b17e:	4403      	add	r3, r0
 801b180:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801b184:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 801b186:	683b      	ldr	r3, [r7, #0]
 801b188:	2b00      	cmp	r3, #0
 801b18a:	d114      	bne.n	801b1b6 <PCD_EP_OutXfrComplete_int+0x16a>
 801b18c:	6879      	ldr	r1, [r7, #4]
 801b18e:	683a      	ldr	r2, [r7, #0]
 801b190:	4613      	mov	r3, r2
 801b192:	00db      	lsls	r3, r3, #3
 801b194:	1a9b      	subs	r3, r3, r2
 801b196:	009b      	lsls	r3, r3, #2
 801b198:	440b      	add	r3, r1
 801b19a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 801b19e:	681b      	ldr	r3, [r3, #0]
 801b1a0:	2b00      	cmp	r3, #0
 801b1a2:	d108      	bne.n	801b1b6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801b1a4:	687b      	ldr	r3, [r7, #4]
 801b1a6:	6818      	ldr	r0, [r3, #0]
 801b1a8:	687b      	ldr	r3, [r7, #4]
 801b1aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801b1ae:	461a      	mov	r2, r3
 801b1b0:	2101      	movs	r1, #1
 801b1b2:	f004 f9c5 	bl	801f540 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801b1b6:	683b      	ldr	r3, [r7, #0]
 801b1b8:	b2db      	uxtb	r3, r3
 801b1ba:	4619      	mov	r1, r3
 801b1bc:	6878      	ldr	r0, [r7, #4]
 801b1be:	f007 fbef 	bl	80229a0 <HAL_PCD_DataOutStageCallback>
 801b1c2:	e046      	b.n	801b252 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 801b1c4:	68fb      	ldr	r3, [r7, #12]
 801b1c6:	4a26      	ldr	r2, [pc, #152]	; (801b260 <PCD_EP_OutXfrComplete_int+0x214>)
 801b1c8:	4293      	cmp	r3, r2
 801b1ca:	d124      	bne.n	801b216 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 801b1cc:	68bb      	ldr	r3, [r7, #8]
 801b1ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801b1d2:	2b00      	cmp	r3, #0
 801b1d4:	d00a      	beq.n	801b1ec <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801b1d6:	683b      	ldr	r3, [r7, #0]
 801b1d8:	015a      	lsls	r2, r3, #5
 801b1da:	693b      	ldr	r3, [r7, #16]
 801b1dc:	4413      	add	r3, r2
 801b1de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b1e2:	461a      	mov	r2, r3
 801b1e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801b1e8:	6093      	str	r3, [r2, #8]
 801b1ea:	e032      	b.n	801b252 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 801b1ec:	68bb      	ldr	r3, [r7, #8]
 801b1ee:	f003 0320 	and.w	r3, r3, #32
 801b1f2:	2b00      	cmp	r3, #0
 801b1f4:	d008      	beq.n	801b208 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801b1f6:	683b      	ldr	r3, [r7, #0]
 801b1f8:	015a      	lsls	r2, r3, #5
 801b1fa:	693b      	ldr	r3, [r7, #16]
 801b1fc:	4413      	add	r3, r2
 801b1fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b202:	461a      	mov	r2, r3
 801b204:	2320      	movs	r3, #32
 801b206:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801b208:	683b      	ldr	r3, [r7, #0]
 801b20a:	b2db      	uxtb	r3, r3
 801b20c:	4619      	mov	r1, r3
 801b20e:	6878      	ldr	r0, [r7, #4]
 801b210:	f007 fbc6 	bl	80229a0 <HAL_PCD_DataOutStageCallback>
 801b214:	e01d      	b.n	801b252 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 801b216:	683b      	ldr	r3, [r7, #0]
 801b218:	2b00      	cmp	r3, #0
 801b21a:	d114      	bne.n	801b246 <PCD_EP_OutXfrComplete_int+0x1fa>
 801b21c:	6879      	ldr	r1, [r7, #4]
 801b21e:	683a      	ldr	r2, [r7, #0]
 801b220:	4613      	mov	r3, r2
 801b222:	00db      	lsls	r3, r3, #3
 801b224:	1a9b      	subs	r3, r3, r2
 801b226:	009b      	lsls	r3, r3, #2
 801b228:	440b      	add	r3, r1
 801b22a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 801b22e:	681b      	ldr	r3, [r3, #0]
 801b230:	2b00      	cmp	r3, #0
 801b232:	d108      	bne.n	801b246 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 801b234:	687b      	ldr	r3, [r7, #4]
 801b236:	6818      	ldr	r0, [r3, #0]
 801b238:	687b      	ldr	r3, [r7, #4]
 801b23a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801b23e:	461a      	mov	r2, r3
 801b240:	2100      	movs	r1, #0
 801b242:	f004 f97d 	bl	801f540 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801b246:	683b      	ldr	r3, [r7, #0]
 801b248:	b2db      	uxtb	r3, r3
 801b24a:	4619      	mov	r1, r3
 801b24c:	6878      	ldr	r0, [r7, #4]
 801b24e:	f007 fba7 	bl	80229a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 801b252:	2300      	movs	r3, #0
}
 801b254:	4618      	mov	r0, r3
 801b256:	3718      	adds	r7, #24
 801b258:	46bd      	mov	sp, r7
 801b25a:	bd80      	pop	{r7, pc}
 801b25c:	4f54300a 	.word	0x4f54300a
 801b260:	4f54310a 	.word	0x4f54310a

0801b264 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801b264:	b580      	push	{r7, lr}
 801b266:	b086      	sub	sp, #24
 801b268:	af00      	add	r7, sp, #0
 801b26a:	6078      	str	r0, [r7, #4]
 801b26c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801b26e:	687b      	ldr	r3, [r7, #4]
 801b270:	681b      	ldr	r3, [r3, #0]
 801b272:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b274:	697b      	ldr	r3, [r7, #20]
 801b276:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801b278:	697b      	ldr	r3, [r7, #20]
 801b27a:	333c      	adds	r3, #60	; 0x3c
 801b27c:	3304      	adds	r3, #4
 801b27e:	681b      	ldr	r3, [r3, #0]
 801b280:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801b282:	683b      	ldr	r3, [r7, #0]
 801b284:	015a      	lsls	r2, r3, #5
 801b286:	693b      	ldr	r3, [r7, #16]
 801b288:	4413      	add	r3, r2
 801b28a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b28e:	689b      	ldr	r3, [r3, #8]
 801b290:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801b292:	68fb      	ldr	r3, [r7, #12]
 801b294:	4a15      	ldr	r2, [pc, #84]	; (801b2ec <PCD_EP_OutSetupPacket_int+0x88>)
 801b296:	4293      	cmp	r3, r2
 801b298:	d90e      	bls.n	801b2b8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801b29a:	68bb      	ldr	r3, [r7, #8]
 801b29c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801b2a0:	2b00      	cmp	r3, #0
 801b2a2:	d009      	beq.n	801b2b8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801b2a4:	683b      	ldr	r3, [r7, #0]
 801b2a6:	015a      	lsls	r2, r3, #5
 801b2a8:	693b      	ldr	r3, [r7, #16]
 801b2aa:	4413      	add	r3, r2
 801b2ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b2b0:	461a      	mov	r2, r3
 801b2b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801b2b6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 801b2b8:	6878      	ldr	r0, [r7, #4]
 801b2ba:	f007 fb5f 	bl	802297c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 801b2be:	68fb      	ldr	r3, [r7, #12]
 801b2c0:	4a0a      	ldr	r2, [pc, #40]	; (801b2ec <PCD_EP_OutSetupPacket_int+0x88>)
 801b2c2:	4293      	cmp	r3, r2
 801b2c4:	d90c      	bls.n	801b2e0 <PCD_EP_OutSetupPacket_int+0x7c>
 801b2c6:	687b      	ldr	r3, [r7, #4]
 801b2c8:	691b      	ldr	r3, [r3, #16]
 801b2ca:	2b01      	cmp	r3, #1
 801b2cc:	d108      	bne.n	801b2e0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801b2ce:	687b      	ldr	r3, [r7, #4]
 801b2d0:	6818      	ldr	r0, [r3, #0]
 801b2d2:	687b      	ldr	r3, [r7, #4]
 801b2d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801b2d8:	461a      	mov	r2, r3
 801b2da:	2101      	movs	r1, #1
 801b2dc:	f004 f930 	bl	801f540 <USB_EP0_OutStart>
  }

  return HAL_OK;
 801b2e0:	2300      	movs	r3, #0
}
 801b2e2:	4618      	mov	r0, r3
 801b2e4:	3718      	adds	r7, #24
 801b2e6:	46bd      	mov	sp, r7
 801b2e8:	bd80      	pop	{r7, pc}
 801b2ea:	bf00      	nop
 801b2ec:	4f54300a 	.word	0x4f54300a

0801b2f0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 801b2f0:	b480      	push	{r7}
 801b2f2:	b085      	sub	sp, #20
 801b2f4:	af00      	add	r7, sp, #0
 801b2f6:	6078      	str	r0, [r7, #4]
 801b2f8:	460b      	mov	r3, r1
 801b2fa:	70fb      	strb	r3, [r7, #3]
 801b2fc:	4613      	mov	r3, r2
 801b2fe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 801b300:	687b      	ldr	r3, [r7, #4]
 801b302:	681b      	ldr	r3, [r3, #0]
 801b304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b306:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 801b308:	78fb      	ldrb	r3, [r7, #3]
 801b30a:	2b00      	cmp	r3, #0
 801b30c:	d107      	bne.n	801b31e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 801b30e:	883b      	ldrh	r3, [r7, #0]
 801b310:	0419      	lsls	r1, r3, #16
 801b312:	687b      	ldr	r3, [r7, #4]
 801b314:	681b      	ldr	r3, [r3, #0]
 801b316:	68ba      	ldr	r2, [r7, #8]
 801b318:	430a      	orrs	r2, r1
 801b31a:	629a      	str	r2, [r3, #40]	; 0x28
 801b31c:	e028      	b.n	801b370 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 801b31e:	687b      	ldr	r3, [r7, #4]
 801b320:	681b      	ldr	r3, [r3, #0]
 801b322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b324:	0c1b      	lsrs	r3, r3, #16
 801b326:	68ba      	ldr	r2, [r7, #8]
 801b328:	4413      	add	r3, r2
 801b32a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 801b32c:	2300      	movs	r3, #0
 801b32e:	73fb      	strb	r3, [r7, #15]
 801b330:	e00d      	b.n	801b34e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 801b332:	687b      	ldr	r3, [r7, #4]
 801b334:	681a      	ldr	r2, [r3, #0]
 801b336:	7bfb      	ldrb	r3, [r7, #15]
 801b338:	3340      	adds	r3, #64	; 0x40
 801b33a:	009b      	lsls	r3, r3, #2
 801b33c:	4413      	add	r3, r2
 801b33e:	685b      	ldr	r3, [r3, #4]
 801b340:	0c1b      	lsrs	r3, r3, #16
 801b342:	68ba      	ldr	r2, [r7, #8]
 801b344:	4413      	add	r3, r2
 801b346:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 801b348:	7bfb      	ldrb	r3, [r7, #15]
 801b34a:	3301      	adds	r3, #1
 801b34c:	73fb      	strb	r3, [r7, #15]
 801b34e:	7bfa      	ldrb	r2, [r7, #15]
 801b350:	78fb      	ldrb	r3, [r7, #3]
 801b352:	3b01      	subs	r3, #1
 801b354:	429a      	cmp	r2, r3
 801b356:	d3ec      	bcc.n	801b332 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 801b358:	883b      	ldrh	r3, [r7, #0]
 801b35a:	0418      	lsls	r0, r3, #16
 801b35c:	687b      	ldr	r3, [r7, #4]
 801b35e:	6819      	ldr	r1, [r3, #0]
 801b360:	78fb      	ldrb	r3, [r7, #3]
 801b362:	3b01      	subs	r3, #1
 801b364:	68ba      	ldr	r2, [r7, #8]
 801b366:	4302      	orrs	r2, r0
 801b368:	3340      	adds	r3, #64	; 0x40
 801b36a:	009b      	lsls	r3, r3, #2
 801b36c:	440b      	add	r3, r1
 801b36e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 801b370:	2300      	movs	r3, #0
}
 801b372:	4618      	mov	r0, r3
 801b374:	3714      	adds	r7, #20
 801b376:	46bd      	mov	sp, r7
 801b378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b37c:	4770      	bx	lr

0801b37e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 801b37e:	b480      	push	{r7}
 801b380:	b083      	sub	sp, #12
 801b382:	af00      	add	r7, sp, #0
 801b384:	6078      	str	r0, [r7, #4]
 801b386:	460b      	mov	r3, r1
 801b388:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 801b38a:	687b      	ldr	r3, [r7, #4]
 801b38c:	681b      	ldr	r3, [r3, #0]
 801b38e:	887a      	ldrh	r2, [r7, #2]
 801b390:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 801b392:	2300      	movs	r3, #0
}
 801b394:	4618      	mov	r0, r3
 801b396:	370c      	adds	r7, #12
 801b398:	46bd      	mov	sp, r7
 801b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b39e:	4770      	bx	lr

0801b3a0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801b3a0:	b480      	push	{r7}
 801b3a2:	b085      	sub	sp, #20
 801b3a4:	af00      	add	r7, sp, #0
 801b3a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801b3a8:	687b      	ldr	r3, [r7, #4]
 801b3aa:	681b      	ldr	r3, [r3, #0]
 801b3ac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 801b3ae:	687b      	ldr	r3, [r7, #4]
 801b3b0:	2201      	movs	r2, #1
 801b3b2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 801b3b6:	687b      	ldr	r3, [r7, #4]
 801b3b8:	2200      	movs	r2, #0
 801b3ba:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 801b3be:	68fb      	ldr	r3, [r7, #12]
 801b3c0:	699b      	ldr	r3, [r3, #24]
 801b3c2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801b3c6:	68fb      	ldr	r3, [r7, #12]
 801b3c8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 801b3ca:	68fb      	ldr	r3, [r7, #12]
 801b3cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b3ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b3d2:	f043 0303 	orr.w	r3, r3, #3
 801b3d6:	68fa      	ldr	r2, [r7, #12]
 801b3d8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 801b3da:	2300      	movs	r3, #0
}
 801b3dc:	4618      	mov	r0, r3
 801b3de:	3714      	adds	r7, #20
 801b3e0:	46bd      	mov	sp, r7
 801b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3e6:	4770      	bx	lr

0801b3e8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 801b3e8:	b580      	push	{r7, lr}
 801b3ea:	b082      	sub	sp, #8
 801b3ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 801b3ee:	2300      	movs	r3, #0
 801b3f0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 801b3f2:	2300      	movs	r3, #0
 801b3f4:	603b      	str	r3, [r7, #0]
 801b3f6:	4b20      	ldr	r3, [pc, #128]	; (801b478 <HAL_PWREx_EnableOverDrive+0x90>)
 801b3f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b3fa:	4a1f      	ldr	r2, [pc, #124]	; (801b478 <HAL_PWREx_EnableOverDrive+0x90>)
 801b3fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b400:	6413      	str	r3, [r2, #64]	; 0x40
 801b402:	4b1d      	ldr	r3, [pc, #116]	; (801b478 <HAL_PWREx_EnableOverDrive+0x90>)
 801b404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b40a:	603b      	str	r3, [r7, #0]
 801b40c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 801b40e:	4b1b      	ldr	r3, [pc, #108]	; (801b47c <HAL_PWREx_EnableOverDrive+0x94>)
 801b410:	2201      	movs	r2, #1
 801b412:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801b414:	f7fd f9e8 	bl	80187e8 <HAL_GetTick>
 801b418:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801b41a:	e009      	b.n	801b430 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801b41c:	f7fd f9e4 	bl	80187e8 <HAL_GetTick>
 801b420:	4602      	mov	r2, r0
 801b422:	687b      	ldr	r3, [r7, #4]
 801b424:	1ad3      	subs	r3, r2, r3
 801b426:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801b42a:	d901      	bls.n	801b430 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 801b42c:	2303      	movs	r3, #3
 801b42e:	e01f      	b.n	801b470 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801b430:	4b13      	ldr	r3, [pc, #76]	; (801b480 <HAL_PWREx_EnableOverDrive+0x98>)
 801b432:	685b      	ldr	r3, [r3, #4]
 801b434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801b438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b43c:	d1ee      	bne.n	801b41c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 801b43e:	4b11      	ldr	r3, [pc, #68]	; (801b484 <HAL_PWREx_EnableOverDrive+0x9c>)
 801b440:	2201      	movs	r2, #1
 801b442:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801b444:	f7fd f9d0 	bl	80187e8 <HAL_GetTick>
 801b448:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801b44a:	e009      	b.n	801b460 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801b44c:	f7fd f9cc 	bl	80187e8 <HAL_GetTick>
 801b450:	4602      	mov	r2, r0
 801b452:	687b      	ldr	r3, [r7, #4]
 801b454:	1ad3      	subs	r3, r2, r3
 801b456:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801b45a:	d901      	bls.n	801b460 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 801b45c:	2303      	movs	r3, #3
 801b45e:	e007      	b.n	801b470 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801b460:	4b07      	ldr	r3, [pc, #28]	; (801b480 <HAL_PWREx_EnableOverDrive+0x98>)
 801b462:	685b      	ldr	r3, [r3, #4]
 801b464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b468:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801b46c:	d1ee      	bne.n	801b44c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 801b46e:	2300      	movs	r3, #0
}
 801b470:	4618      	mov	r0, r3
 801b472:	3708      	adds	r7, #8
 801b474:	46bd      	mov	sp, r7
 801b476:	bd80      	pop	{r7, pc}
 801b478:	40023800 	.word	0x40023800
 801b47c:	420e0040 	.word	0x420e0040
 801b480:	40007000 	.word	0x40007000
 801b484:	420e0044 	.word	0x420e0044

0801b488 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801b488:	b580      	push	{r7, lr}
 801b48a:	b084      	sub	sp, #16
 801b48c:	af00      	add	r7, sp, #0
 801b48e:	6078      	str	r0, [r7, #4]
 801b490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801b492:	687b      	ldr	r3, [r7, #4]
 801b494:	2b00      	cmp	r3, #0
 801b496:	d101      	bne.n	801b49c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801b498:	2301      	movs	r3, #1
 801b49a:	e0cc      	b.n	801b636 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801b49c:	4b68      	ldr	r3, [pc, #416]	; (801b640 <HAL_RCC_ClockConfig+0x1b8>)
 801b49e:	681b      	ldr	r3, [r3, #0]
 801b4a0:	f003 030f 	and.w	r3, r3, #15
 801b4a4:	683a      	ldr	r2, [r7, #0]
 801b4a6:	429a      	cmp	r2, r3
 801b4a8:	d90c      	bls.n	801b4c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b4aa:	4b65      	ldr	r3, [pc, #404]	; (801b640 <HAL_RCC_ClockConfig+0x1b8>)
 801b4ac:	683a      	ldr	r2, [r7, #0]
 801b4ae:	b2d2      	uxtb	r2, r2
 801b4b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801b4b2:	4b63      	ldr	r3, [pc, #396]	; (801b640 <HAL_RCC_ClockConfig+0x1b8>)
 801b4b4:	681b      	ldr	r3, [r3, #0]
 801b4b6:	f003 030f 	and.w	r3, r3, #15
 801b4ba:	683a      	ldr	r2, [r7, #0]
 801b4bc:	429a      	cmp	r2, r3
 801b4be:	d001      	beq.n	801b4c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801b4c0:	2301      	movs	r3, #1
 801b4c2:	e0b8      	b.n	801b636 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801b4c4:	687b      	ldr	r3, [r7, #4]
 801b4c6:	681b      	ldr	r3, [r3, #0]
 801b4c8:	f003 0302 	and.w	r3, r3, #2
 801b4cc:	2b00      	cmp	r3, #0
 801b4ce:	d020      	beq.n	801b512 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b4d0:	687b      	ldr	r3, [r7, #4]
 801b4d2:	681b      	ldr	r3, [r3, #0]
 801b4d4:	f003 0304 	and.w	r3, r3, #4
 801b4d8:	2b00      	cmp	r3, #0
 801b4da:	d005      	beq.n	801b4e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801b4dc:	4b59      	ldr	r3, [pc, #356]	; (801b644 <HAL_RCC_ClockConfig+0x1bc>)
 801b4de:	689b      	ldr	r3, [r3, #8]
 801b4e0:	4a58      	ldr	r2, [pc, #352]	; (801b644 <HAL_RCC_ClockConfig+0x1bc>)
 801b4e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801b4e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b4e8:	687b      	ldr	r3, [r7, #4]
 801b4ea:	681b      	ldr	r3, [r3, #0]
 801b4ec:	f003 0308 	and.w	r3, r3, #8
 801b4f0:	2b00      	cmp	r3, #0
 801b4f2:	d005      	beq.n	801b500 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801b4f4:	4b53      	ldr	r3, [pc, #332]	; (801b644 <HAL_RCC_ClockConfig+0x1bc>)
 801b4f6:	689b      	ldr	r3, [r3, #8]
 801b4f8:	4a52      	ldr	r2, [pc, #328]	; (801b644 <HAL_RCC_ClockConfig+0x1bc>)
 801b4fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801b4fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801b500:	4b50      	ldr	r3, [pc, #320]	; (801b644 <HAL_RCC_ClockConfig+0x1bc>)
 801b502:	689b      	ldr	r3, [r3, #8]
 801b504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801b508:	687b      	ldr	r3, [r7, #4]
 801b50a:	689b      	ldr	r3, [r3, #8]
 801b50c:	494d      	ldr	r1, [pc, #308]	; (801b644 <HAL_RCC_ClockConfig+0x1bc>)
 801b50e:	4313      	orrs	r3, r2
 801b510:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801b512:	687b      	ldr	r3, [r7, #4]
 801b514:	681b      	ldr	r3, [r3, #0]
 801b516:	f003 0301 	and.w	r3, r3, #1
 801b51a:	2b00      	cmp	r3, #0
 801b51c:	d044      	beq.n	801b5a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801b51e:	687b      	ldr	r3, [r7, #4]
 801b520:	685b      	ldr	r3, [r3, #4]
 801b522:	2b01      	cmp	r3, #1
 801b524:	d107      	bne.n	801b536 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801b526:	4b47      	ldr	r3, [pc, #284]	; (801b644 <HAL_RCC_ClockConfig+0x1bc>)
 801b528:	681b      	ldr	r3, [r3, #0]
 801b52a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b52e:	2b00      	cmp	r3, #0
 801b530:	d119      	bne.n	801b566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801b532:	2301      	movs	r3, #1
 801b534:	e07f      	b.n	801b636 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801b536:	687b      	ldr	r3, [r7, #4]
 801b538:	685b      	ldr	r3, [r3, #4]
 801b53a:	2b02      	cmp	r3, #2
 801b53c:	d003      	beq.n	801b546 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801b53e:	687b      	ldr	r3, [r7, #4]
 801b540:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801b542:	2b03      	cmp	r3, #3
 801b544:	d107      	bne.n	801b556 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801b546:	4b3f      	ldr	r3, [pc, #252]	; (801b644 <HAL_RCC_ClockConfig+0x1bc>)
 801b548:	681b      	ldr	r3, [r3, #0]
 801b54a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b54e:	2b00      	cmp	r3, #0
 801b550:	d109      	bne.n	801b566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801b552:	2301      	movs	r3, #1
 801b554:	e06f      	b.n	801b636 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801b556:	4b3b      	ldr	r3, [pc, #236]	; (801b644 <HAL_RCC_ClockConfig+0x1bc>)
 801b558:	681b      	ldr	r3, [r3, #0]
 801b55a:	f003 0302 	and.w	r3, r3, #2
 801b55e:	2b00      	cmp	r3, #0
 801b560:	d101      	bne.n	801b566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801b562:	2301      	movs	r3, #1
 801b564:	e067      	b.n	801b636 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801b566:	4b37      	ldr	r3, [pc, #220]	; (801b644 <HAL_RCC_ClockConfig+0x1bc>)
 801b568:	689b      	ldr	r3, [r3, #8]
 801b56a:	f023 0203 	bic.w	r2, r3, #3
 801b56e:	687b      	ldr	r3, [r7, #4]
 801b570:	685b      	ldr	r3, [r3, #4]
 801b572:	4934      	ldr	r1, [pc, #208]	; (801b644 <HAL_RCC_ClockConfig+0x1bc>)
 801b574:	4313      	orrs	r3, r2
 801b576:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801b578:	f7fd f936 	bl	80187e8 <HAL_GetTick>
 801b57c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b57e:	e00a      	b.n	801b596 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b580:	f7fd f932 	bl	80187e8 <HAL_GetTick>
 801b584:	4602      	mov	r2, r0
 801b586:	68fb      	ldr	r3, [r7, #12]
 801b588:	1ad3      	subs	r3, r2, r3
 801b58a:	f241 3288 	movw	r2, #5000	; 0x1388
 801b58e:	4293      	cmp	r3, r2
 801b590:	d901      	bls.n	801b596 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801b592:	2303      	movs	r3, #3
 801b594:	e04f      	b.n	801b636 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b596:	4b2b      	ldr	r3, [pc, #172]	; (801b644 <HAL_RCC_ClockConfig+0x1bc>)
 801b598:	689b      	ldr	r3, [r3, #8]
 801b59a:	f003 020c 	and.w	r2, r3, #12
 801b59e:	687b      	ldr	r3, [r7, #4]
 801b5a0:	685b      	ldr	r3, [r3, #4]
 801b5a2:	009b      	lsls	r3, r3, #2
 801b5a4:	429a      	cmp	r2, r3
 801b5a6:	d1eb      	bne.n	801b580 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801b5a8:	4b25      	ldr	r3, [pc, #148]	; (801b640 <HAL_RCC_ClockConfig+0x1b8>)
 801b5aa:	681b      	ldr	r3, [r3, #0]
 801b5ac:	f003 030f 	and.w	r3, r3, #15
 801b5b0:	683a      	ldr	r2, [r7, #0]
 801b5b2:	429a      	cmp	r2, r3
 801b5b4:	d20c      	bcs.n	801b5d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b5b6:	4b22      	ldr	r3, [pc, #136]	; (801b640 <HAL_RCC_ClockConfig+0x1b8>)
 801b5b8:	683a      	ldr	r2, [r7, #0]
 801b5ba:	b2d2      	uxtb	r2, r2
 801b5bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801b5be:	4b20      	ldr	r3, [pc, #128]	; (801b640 <HAL_RCC_ClockConfig+0x1b8>)
 801b5c0:	681b      	ldr	r3, [r3, #0]
 801b5c2:	f003 030f 	and.w	r3, r3, #15
 801b5c6:	683a      	ldr	r2, [r7, #0]
 801b5c8:	429a      	cmp	r2, r3
 801b5ca:	d001      	beq.n	801b5d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801b5cc:	2301      	movs	r3, #1
 801b5ce:	e032      	b.n	801b636 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b5d0:	687b      	ldr	r3, [r7, #4]
 801b5d2:	681b      	ldr	r3, [r3, #0]
 801b5d4:	f003 0304 	and.w	r3, r3, #4
 801b5d8:	2b00      	cmp	r3, #0
 801b5da:	d008      	beq.n	801b5ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801b5dc:	4b19      	ldr	r3, [pc, #100]	; (801b644 <HAL_RCC_ClockConfig+0x1bc>)
 801b5de:	689b      	ldr	r3, [r3, #8]
 801b5e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801b5e4:	687b      	ldr	r3, [r7, #4]
 801b5e6:	68db      	ldr	r3, [r3, #12]
 801b5e8:	4916      	ldr	r1, [pc, #88]	; (801b644 <HAL_RCC_ClockConfig+0x1bc>)
 801b5ea:	4313      	orrs	r3, r2
 801b5ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b5ee:	687b      	ldr	r3, [r7, #4]
 801b5f0:	681b      	ldr	r3, [r3, #0]
 801b5f2:	f003 0308 	and.w	r3, r3, #8
 801b5f6:	2b00      	cmp	r3, #0
 801b5f8:	d009      	beq.n	801b60e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801b5fa:	4b12      	ldr	r3, [pc, #72]	; (801b644 <HAL_RCC_ClockConfig+0x1bc>)
 801b5fc:	689b      	ldr	r3, [r3, #8]
 801b5fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801b602:	687b      	ldr	r3, [r7, #4]
 801b604:	691b      	ldr	r3, [r3, #16]
 801b606:	00db      	lsls	r3, r3, #3
 801b608:	490e      	ldr	r1, [pc, #56]	; (801b644 <HAL_RCC_ClockConfig+0x1bc>)
 801b60a:	4313      	orrs	r3, r2
 801b60c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801b60e:	f000 fb57 	bl	801bcc0 <HAL_RCC_GetSysClockFreq>
 801b612:	4602      	mov	r2, r0
 801b614:	4b0b      	ldr	r3, [pc, #44]	; (801b644 <HAL_RCC_ClockConfig+0x1bc>)
 801b616:	689b      	ldr	r3, [r3, #8]
 801b618:	091b      	lsrs	r3, r3, #4
 801b61a:	f003 030f 	and.w	r3, r3, #15
 801b61e:	490a      	ldr	r1, [pc, #40]	; (801b648 <HAL_RCC_ClockConfig+0x1c0>)
 801b620:	5ccb      	ldrb	r3, [r1, r3]
 801b622:	fa22 f303 	lsr.w	r3, r2, r3
 801b626:	4a09      	ldr	r2, [pc, #36]	; (801b64c <HAL_RCC_ClockConfig+0x1c4>)
 801b628:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801b62a:	4b09      	ldr	r3, [pc, #36]	; (801b650 <HAL_RCC_ClockConfig+0x1c8>)
 801b62c:	681b      	ldr	r3, [r3, #0]
 801b62e:	4618      	mov	r0, r3
 801b630:	f7fd f896 	bl	8018760 <HAL_InitTick>

  return HAL_OK;
 801b634:	2300      	movs	r3, #0
}
 801b636:	4618      	mov	r0, r3
 801b638:	3710      	adds	r7, #16
 801b63a:	46bd      	mov	sp, r7
 801b63c:	bd80      	pop	{r7, pc}
 801b63e:	bf00      	nop
 801b640:	40023c00 	.word	0x40023c00
 801b644:	40023800 	.word	0x40023800
 801b648:	08002350 	.word	0x08002350
 801b64c:	20000588 	.word	0x20000588
 801b650:	2000058c 	.word	0x2000058c

0801b654 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801b654:	b480      	push	{r7}
 801b656:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801b658:	4b03      	ldr	r3, [pc, #12]	; (801b668 <HAL_RCC_GetHCLKFreq+0x14>)
 801b65a:	681b      	ldr	r3, [r3, #0]
}
 801b65c:	4618      	mov	r0, r3
 801b65e:	46bd      	mov	sp, r7
 801b660:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b664:	4770      	bx	lr
 801b666:	bf00      	nop
 801b668:	20000588 	.word	0x20000588

0801b66c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801b66c:	b580      	push	{r7, lr}
 801b66e:	b08c      	sub	sp, #48	; 0x30
 801b670:	af00      	add	r7, sp, #0
 801b672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801b674:	2300      	movs	r3, #0
 801b676:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 801b678:	2300      	movs	r3, #0
 801b67a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 801b67c:	2300      	movs	r3, #0
 801b67e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 801b680:	2300      	movs	r3, #0
 801b682:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 801b684:	2300      	movs	r3, #0
 801b686:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 801b688:	2300      	movs	r3, #0
 801b68a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 801b68c:	2300      	movs	r3, #0
 801b68e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 801b690:	2300      	movs	r3, #0
 801b692:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 801b694:	2300      	movs	r3, #0
 801b696:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 801b698:	687b      	ldr	r3, [r7, #4]
 801b69a:	681b      	ldr	r3, [r3, #0]
 801b69c:	f003 0301 	and.w	r3, r3, #1
 801b6a0:	2b00      	cmp	r3, #0
 801b6a2:	d010      	beq.n	801b6c6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 801b6a4:	4b6f      	ldr	r3, [pc, #444]	; (801b864 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b6a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b6aa:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 801b6ae:	687b      	ldr	r3, [r7, #4]
 801b6b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b6b2:	496c      	ldr	r1, [pc, #432]	; (801b864 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b6b4:	4313      	orrs	r3, r2
 801b6b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 801b6ba:	687b      	ldr	r3, [r7, #4]
 801b6bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b6be:	2b00      	cmp	r3, #0
 801b6c0:	d101      	bne.n	801b6c6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 801b6c2:	2301      	movs	r3, #1
 801b6c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 801b6c6:	687b      	ldr	r3, [r7, #4]
 801b6c8:	681b      	ldr	r3, [r3, #0]
 801b6ca:	f003 0302 	and.w	r3, r3, #2
 801b6ce:	2b00      	cmp	r3, #0
 801b6d0:	d010      	beq.n	801b6f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 801b6d2:	4b64      	ldr	r3, [pc, #400]	; (801b864 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b6d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b6d8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 801b6dc:	687b      	ldr	r3, [r7, #4]
 801b6de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b6e0:	4960      	ldr	r1, [pc, #384]	; (801b864 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b6e2:	4313      	orrs	r3, r2
 801b6e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 801b6e8:	687b      	ldr	r3, [r7, #4]
 801b6ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b6ec:	2b00      	cmp	r3, #0
 801b6ee:	d101      	bne.n	801b6f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 801b6f0:	2301      	movs	r3, #1
 801b6f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 801b6f4:	687b      	ldr	r3, [r7, #4]
 801b6f6:	681b      	ldr	r3, [r3, #0]
 801b6f8:	f003 0304 	and.w	r3, r3, #4
 801b6fc:	2b00      	cmp	r3, #0
 801b6fe:	d017      	beq.n	801b730 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801b700:	4b58      	ldr	r3, [pc, #352]	; (801b864 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b702:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b706:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801b70a:	687b      	ldr	r3, [r7, #4]
 801b70c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b70e:	4955      	ldr	r1, [pc, #340]	; (801b864 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b710:	4313      	orrs	r3, r2
 801b712:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 801b716:	687b      	ldr	r3, [r7, #4]
 801b718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b71a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801b71e:	d101      	bne.n	801b724 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 801b720:	2301      	movs	r3, #1
 801b722:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 801b724:	687b      	ldr	r3, [r7, #4]
 801b726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b728:	2b00      	cmp	r3, #0
 801b72a:	d101      	bne.n	801b730 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 801b72c:	2301      	movs	r3, #1
 801b72e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 801b730:	687b      	ldr	r3, [r7, #4]
 801b732:	681b      	ldr	r3, [r3, #0]
 801b734:	f003 0308 	and.w	r3, r3, #8
 801b738:	2b00      	cmp	r3, #0
 801b73a:	d017      	beq.n	801b76c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 801b73c:	4b49      	ldr	r3, [pc, #292]	; (801b864 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b73e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b742:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801b746:	687b      	ldr	r3, [r7, #4]
 801b748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b74a:	4946      	ldr	r1, [pc, #280]	; (801b864 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b74c:	4313      	orrs	r3, r2
 801b74e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 801b752:	687b      	ldr	r3, [r7, #4]
 801b754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b756:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801b75a:	d101      	bne.n	801b760 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 801b75c:	2301      	movs	r3, #1
 801b75e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 801b760:	687b      	ldr	r3, [r7, #4]
 801b762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b764:	2b00      	cmp	r3, #0
 801b766:	d101      	bne.n	801b76c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 801b768:	2301      	movs	r3, #1
 801b76a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801b76c:	687b      	ldr	r3, [r7, #4]
 801b76e:	681b      	ldr	r3, [r3, #0]
 801b770:	f003 0320 	and.w	r3, r3, #32
 801b774:	2b00      	cmp	r3, #0
 801b776:	f000 808a 	beq.w	801b88e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 801b77a:	2300      	movs	r3, #0
 801b77c:	60bb      	str	r3, [r7, #8]
 801b77e:	4b39      	ldr	r3, [pc, #228]	; (801b864 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b782:	4a38      	ldr	r2, [pc, #224]	; (801b864 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b788:	6413      	str	r3, [r2, #64]	; 0x40
 801b78a:	4b36      	ldr	r3, [pc, #216]	; (801b864 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b78c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b78e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b792:	60bb      	str	r3, [r7, #8]
 801b794:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 801b796:	4b34      	ldr	r3, [pc, #208]	; (801b868 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 801b798:	681b      	ldr	r3, [r3, #0]
 801b79a:	4a33      	ldr	r2, [pc, #204]	; (801b868 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 801b79c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b7a0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 801b7a2:	f7fd f821 	bl	80187e8 <HAL_GetTick>
 801b7a6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 801b7a8:	e008      	b.n	801b7bc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 801b7aa:	f7fd f81d 	bl	80187e8 <HAL_GetTick>
 801b7ae:	4602      	mov	r2, r0
 801b7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7b2:	1ad3      	subs	r3, r2, r3
 801b7b4:	2b02      	cmp	r3, #2
 801b7b6:	d901      	bls.n	801b7bc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 801b7b8:	2303      	movs	r3, #3
 801b7ba:	e278      	b.n	801bcae <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 801b7bc:	4b2a      	ldr	r3, [pc, #168]	; (801b868 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 801b7be:	681b      	ldr	r3, [r3, #0]
 801b7c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b7c4:	2b00      	cmp	r3, #0
 801b7c6:	d0f0      	beq.n	801b7aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 801b7c8:	4b26      	ldr	r3, [pc, #152]	; (801b864 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b7ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b7cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b7d0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 801b7d2:	6a3b      	ldr	r3, [r7, #32]
 801b7d4:	2b00      	cmp	r3, #0
 801b7d6:	d02f      	beq.n	801b838 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 801b7d8:	687b      	ldr	r3, [r7, #4]
 801b7da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b7dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b7e0:	6a3a      	ldr	r2, [r7, #32]
 801b7e2:	429a      	cmp	r2, r3
 801b7e4:	d028      	beq.n	801b838 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801b7e6:	4b1f      	ldr	r3, [pc, #124]	; (801b864 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b7e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b7ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b7ee:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801b7f0:	4b1e      	ldr	r3, [pc, #120]	; (801b86c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 801b7f2:	2201      	movs	r2, #1
 801b7f4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 801b7f6:	4b1d      	ldr	r3, [pc, #116]	; (801b86c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 801b7f8:	2200      	movs	r2, #0
 801b7fa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 801b7fc:	4a19      	ldr	r2, [pc, #100]	; (801b864 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b7fe:	6a3b      	ldr	r3, [r7, #32]
 801b800:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 801b802:	4b18      	ldr	r3, [pc, #96]	; (801b864 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b806:	f003 0301 	and.w	r3, r3, #1
 801b80a:	2b01      	cmp	r3, #1
 801b80c:	d114      	bne.n	801b838 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 801b80e:	f7fc ffeb 	bl	80187e8 <HAL_GetTick>
 801b812:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801b814:	e00a      	b.n	801b82c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801b816:	f7fc ffe7 	bl	80187e8 <HAL_GetTick>
 801b81a:	4602      	mov	r2, r0
 801b81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b81e:	1ad3      	subs	r3, r2, r3
 801b820:	f241 3288 	movw	r2, #5000	; 0x1388
 801b824:	4293      	cmp	r3, r2
 801b826:	d901      	bls.n	801b82c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 801b828:	2303      	movs	r3, #3
 801b82a:	e240      	b.n	801bcae <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801b82c:	4b0d      	ldr	r3, [pc, #52]	; (801b864 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b82e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b830:	f003 0302 	and.w	r3, r3, #2
 801b834:	2b00      	cmp	r3, #0
 801b836:	d0ee      	beq.n	801b816 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801b838:	687b      	ldr	r3, [r7, #4]
 801b83a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b83c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b840:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801b844:	d114      	bne.n	801b870 <HAL_RCCEx_PeriphCLKConfig+0x204>
 801b846:	4b07      	ldr	r3, [pc, #28]	; (801b864 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b848:	689b      	ldr	r3, [r3, #8]
 801b84a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 801b84e:	687b      	ldr	r3, [r7, #4]
 801b850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b852:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801b856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b85a:	4902      	ldr	r1, [pc, #8]	; (801b864 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b85c:	4313      	orrs	r3, r2
 801b85e:	608b      	str	r3, [r1, #8]
 801b860:	e00c      	b.n	801b87c <HAL_RCCEx_PeriphCLKConfig+0x210>
 801b862:	bf00      	nop
 801b864:	40023800 	.word	0x40023800
 801b868:	40007000 	.word	0x40007000
 801b86c:	42470e40 	.word	0x42470e40
 801b870:	4b4a      	ldr	r3, [pc, #296]	; (801b99c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b872:	689b      	ldr	r3, [r3, #8]
 801b874:	4a49      	ldr	r2, [pc, #292]	; (801b99c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b876:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 801b87a:	6093      	str	r3, [r2, #8]
 801b87c:	4b47      	ldr	r3, [pc, #284]	; (801b99c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b87e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801b880:	687b      	ldr	r3, [r7, #4]
 801b882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b884:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801b888:	4944      	ldr	r1, [pc, #272]	; (801b99c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b88a:	4313      	orrs	r3, r2
 801b88c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 801b88e:	687b      	ldr	r3, [r7, #4]
 801b890:	681b      	ldr	r3, [r3, #0]
 801b892:	f003 0310 	and.w	r3, r3, #16
 801b896:	2b00      	cmp	r3, #0
 801b898:	d004      	beq.n	801b8a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801b89a:	687b      	ldr	r3, [r7, #4]
 801b89c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 801b8a0:	4b3f      	ldr	r3, [pc, #252]	; (801b9a0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 801b8a2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 801b8a4:	687b      	ldr	r3, [r7, #4]
 801b8a6:	681b      	ldr	r3, [r3, #0]
 801b8a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b8ac:	2b00      	cmp	r3, #0
 801b8ae:	d00a      	beq.n	801b8c6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 801b8b0:	4b3a      	ldr	r3, [pc, #232]	; (801b99c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b8b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b8b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801b8ba:	687b      	ldr	r3, [r7, #4]
 801b8bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b8be:	4937      	ldr	r1, [pc, #220]	; (801b99c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b8c0:	4313      	orrs	r3, r2
 801b8c2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801b8c6:	687b      	ldr	r3, [r7, #4]
 801b8c8:	681b      	ldr	r3, [r3, #0]
 801b8ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b8ce:	2b00      	cmp	r3, #0
 801b8d0:	d00a      	beq.n	801b8e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801b8d2:	4b32      	ldr	r3, [pc, #200]	; (801b99c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b8d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b8d8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 801b8dc:	687b      	ldr	r3, [r7, #4]
 801b8de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b8e0:	492e      	ldr	r1, [pc, #184]	; (801b99c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b8e2:	4313      	orrs	r3, r2
 801b8e4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 801b8e8:	687b      	ldr	r3, [r7, #4]
 801b8ea:	681b      	ldr	r3, [r3, #0]
 801b8ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b8f0:	2b00      	cmp	r3, #0
 801b8f2:	d011      	beq.n	801b918 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 801b8f4:	4b29      	ldr	r3, [pc, #164]	; (801b99c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b8f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b8fa:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 801b8fe:	687b      	ldr	r3, [r7, #4]
 801b900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b902:	4926      	ldr	r1, [pc, #152]	; (801b99c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b904:	4313      	orrs	r3, r2
 801b906:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 801b90a:	687b      	ldr	r3, [r7, #4]
 801b90c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b90e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801b912:	d101      	bne.n	801b918 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 801b914:	2301      	movs	r3, #1
 801b916:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 801b918:	687b      	ldr	r3, [r7, #4]
 801b91a:	681b      	ldr	r3, [r3, #0]
 801b91c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801b920:	2b00      	cmp	r3, #0
 801b922:	d00a      	beq.n	801b93a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 801b924:	4b1d      	ldr	r3, [pc, #116]	; (801b99c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b926:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b92a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801b92e:	687b      	ldr	r3, [r7, #4]
 801b930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b932:	491a      	ldr	r1, [pc, #104]	; (801b99c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b934:	4313      	orrs	r3, r2
 801b936:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801b93a:	687b      	ldr	r3, [r7, #4]
 801b93c:	681b      	ldr	r3, [r3, #0]
 801b93e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b942:	2b00      	cmp	r3, #0
 801b944:	d011      	beq.n	801b96a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 801b946:	4b15      	ldr	r3, [pc, #84]	; (801b99c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b948:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b94c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801b950:	687b      	ldr	r3, [r7, #4]
 801b952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b954:	4911      	ldr	r1, [pc, #68]	; (801b99c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b956:	4313      	orrs	r3, r2
 801b958:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 801b95c:	687b      	ldr	r3, [r7, #4]
 801b95e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b960:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b964:	d101      	bne.n	801b96a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 801b966:	2301      	movs	r3, #1
 801b968:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 801b96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b96c:	2b01      	cmp	r3, #1
 801b96e:	d005      	beq.n	801b97c <HAL_RCCEx_PeriphCLKConfig+0x310>
 801b970:	687b      	ldr	r3, [r7, #4]
 801b972:	681b      	ldr	r3, [r3, #0]
 801b974:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801b978:	f040 80ff 	bne.w	801bb7a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 801b97c:	4b09      	ldr	r3, [pc, #36]	; (801b9a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b97e:	2200      	movs	r2, #0
 801b980:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801b982:	f7fc ff31 	bl	80187e8 <HAL_GetTick>
 801b986:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801b988:	e00e      	b.n	801b9a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 801b98a:	f7fc ff2d 	bl	80187e8 <HAL_GetTick>
 801b98e:	4602      	mov	r2, r0
 801b990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b992:	1ad3      	subs	r3, r2, r3
 801b994:	2b02      	cmp	r3, #2
 801b996:	d907      	bls.n	801b9a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801b998:	2303      	movs	r3, #3
 801b99a:	e188      	b.n	801bcae <HAL_RCCEx_PeriphCLKConfig+0x642>
 801b99c:	40023800 	.word	0x40023800
 801b9a0:	424711e0 	.word	0x424711e0
 801b9a4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801b9a8:	4b7e      	ldr	r3, [pc, #504]	; (801bba4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b9aa:	681b      	ldr	r3, [r3, #0]
 801b9ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801b9b0:	2b00      	cmp	r3, #0
 801b9b2:	d1ea      	bne.n	801b98a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 801b9b4:	687b      	ldr	r3, [r7, #4]
 801b9b6:	681b      	ldr	r3, [r3, #0]
 801b9b8:	f003 0301 	and.w	r3, r3, #1
 801b9bc:	2b00      	cmp	r3, #0
 801b9be:	d003      	beq.n	801b9c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 801b9c0:	687b      	ldr	r3, [r7, #4]
 801b9c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b9c4:	2b00      	cmp	r3, #0
 801b9c6:	d009      	beq.n	801b9dc <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 801b9c8:	687b      	ldr	r3, [r7, #4]
 801b9ca:	681b      	ldr	r3, [r3, #0]
 801b9cc:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 801b9d0:	2b00      	cmp	r3, #0
 801b9d2:	d028      	beq.n	801ba26 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 801b9d4:	687b      	ldr	r3, [r7, #4]
 801b9d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b9d8:	2b00      	cmp	r3, #0
 801b9da:	d124      	bne.n	801ba26 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 801b9dc:	4b71      	ldr	r3, [pc, #452]	; (801bba4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b9de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b9e2:	0c1b      	lsrs	r3, r3, #16
 801b9e4:	f003 0303 	and.w	r3, r3, #3
 801b9e8:	3301      	adds	r3, #1
 801b9ea:	005b      	lsls	r3, r3, #1
 801b9ec:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 801b9ee:	4b6d      	ldr	r3, [pc, #436]	; (801bba4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b9f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b9f4:	0e1b      	lsrs	r3, r3, #24
 801b9f6:	f003 030f 	and.w	r3, r3, #15
 801b9fa:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 801b9fc:	687b      	ldr	r3, [r7, #4]
 801b9fe:	685a      	ldr	r2, [r3, #4]
 801ba00:	687b      	ldr	r3, [r7, #4]
 801ba02:	689b      	ldr	r3, [r3, #8]
 801ba04:	019b      	lsls	r3, r3, #6
 801ba06:	431a      	orrs	r2, r3
 801ba08:	69fb      	ldr	r3, [r7, #28]
 801ba0a:	085b      	lsrs	r3, r3, #1
 801ba0c:	3b01      	subs	r3, #1
 801ba0e:	041b      	lsls	r3, r3, #16
 801ba10:	431a      	orrs	r2, r3
 801ba12:	69bb      	ldr	r3, [r7, #24]
 801ba14:	061b      	lsls	r3, r3, #24
 801ba16:	431a      	orrs	r2, r3
 801ba18:	687b      	ldr	r3, [r7, #4]
 801ba1a:	695b      	ldr	r3, [r3, #20]
 801ba1c:	071b      	lsls	r3, r3, #28
 801ba1e:	4961      	ldr	r1, [pc, #388]	; (801bba4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801ba20:	4313      	orrs	r3, r2
 801ba22:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801ba26:	687b      	ldr	r3, [r7, #4]
 801ba28:	681b      	ldr	r3, [r3, #0]
 801ba2a:	f003 0304 	and.w	r3, r3, #4
 801ba2e:	2b00      	cmp	r3, #0
 801ba30:	d004      	beq.n	801ba3c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 801ba32:	687b      	ldr	r3, [r7, #4]
 801ba34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ba36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801ba3a:	d00a      	beq.n	801ba52 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801ba3c:	687b      	ldr	r3, [r7, #4]
 801ba3e:	681b      	ldr	r3, [r3, #0]
 801ba40:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801ba44:	2b00      	cmp	r3, #0
 801ba46:	d035      	beq.n	801bab4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801ba48:	687b      	ldr	r3, [r7, #4]
 801ba4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ba4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801ba50:	d130      	bne.n	801bab4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 801ba52:	4b54      	ldr	r3, [pc, #336]	; (801bba4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801ba54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ba58:	0c1b      	lsrs	r3, r3, #16
 801ba5a:	f003 0303 	and.w	r3, r3, #3
 801ba5e:	3301      	adds	r3, #1
 801ba60:	005b      	lsls	r3, r3, #1
 801ba62:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801ba64:	4b4f      	ldr	r3, [pc, #316]	; (801bba4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801ba66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ba6a:	0f1b      	lsrs	r3, r3, #28
 801ba6c:	f003 0307 	and.w	r3, r3, #7
 801ba70:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 801ba72:	687b      	ldr	r3, [r7, #4]
 801ba74:	685a      	ldr	r2, [r3, #4]
 801ba76:	687b      	ldr	r3, [r7, #4]
 801ba78:	689b      	ldr	r3, [r3, #8]
 801ba7a:	019b      	lsls	r3, r3, #6
 801ba7c:	431a      	orrs	r2, r3
 801ba7e:	69fb      	ldr	r3, [r7, #28]
 801ba80:	085b      	lsrs	r3, r3, #1
 801ba82:	3b01      	subs	r3, #1
 801ba84:	041b      	lsls	r3, r3, #16
 801ba86:	431a      	orrs	r2, r3
 801ba88:	687b      	ldr	r3, [r7, #4]
 801ba8a:	691b      	ldr	r3, [r3, #16]
 801ba8c:	061b      	lsls	r3, r3, #24
 801ba8e:	431a      	orrs	r2, r3
 801ba90:	697b      	ldr	r3, [r7, #20]
 801ba92:	071b      	lsls	r3, r3, #28
 801ba94:	4943      	ldr	r1, [pc, #268]	; (801bba4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801ba96:	4313      	orrs	r3, r2
 801ba98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 801ba9c:	4b41      	ldr	r3, [pc, #260]	; (801bba4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801ba9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801baa2:	f023 021f 	bic.w	r2, r3, #31
 801baa6:	687b      	ldr	r3, [r7, #4]
 801baa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801baaa:	3b01      	subs	r3, #1
 801baac:	493d      	ldr	r1, [pc, #244]	; (801bba4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801baae:	4313      	orrs	r3, r2
 801bab0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 801bab4:	687b      	ldr	r3, [r7, #4]
 801bab6:	681b      	ldr	r3, [r3, #0]
 801bab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801babc:	2b00      	cmp	r3, #0
 801babe:	d029      	beq.n	801bb14 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 801bac0:	687b      	ldr	r3, [r7, #4]
 801bac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bac4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801bac8:	d124      	bne.n	801bb14 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 801baca:	4b36      	ldr	r3, [pc, #216]	; (801bba4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801bacc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801bad0:	0c1b      	lsrs	r3, r3, #16
 801bad2:	f003 0303 	and.w	r3, r3, #3
 801bad6:	3301      	adds	r3, #1
 801bad8:	005b      	lsls	r3, r3, #1
 801bada:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801badc:	4b31      	ldr	r3, [pc, #196]	; (801bba4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801bade:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801bae2:	0f1b      	lsrs	r3, r3, #28
 801bae4:	f003 0307 	and.w	r3, r3, #7
 801bae8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 801baea:	687b      	ldr	r3, [r7, #4]
 801baec:	685a      	ldr	r2, [r3, #4]
 801baee:	687b      	ldr	r3, [r7, #4]
 801baf0:	689b      	ldr	r3, [r3, #8]
 801baf2:	019b      	lsls	r3, r3, #6
 801baf4:	431a      	orrs	r2, r3
 801baf6:	687b      	ldr	r3, [r7, #4]
 801baf8:	68db      	ldr	r3, [r3, #12]
 801bafa:	085b      	lsrs	r3, r3, #1
 801bafc:	3b01      	subs	r3, #1
 801bafe:	041b      	lsls	r3, r3, #16
 801bb00:	431a      	orrs	r2, r3
 801bb02:	69bb      	ldr	r3, [r7, #24]
 801bb04:	061b      	lsls	r3, r3, #24
 801bb06:	431a      	orrs	r2, r3
 801bb08:	697b      	ldr	r3, [r7, #20]
 801bb0a:	071b      	lsls	r3, r3, #28
 801bb0c:	4925      	ldr	r1, [pc, #148]	; (801bba4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801bb0e:	4313      	orrs	r3, r2
 801bb10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 801bb14:	687b      	ldr	r3, [r7, #4]
 801bb16:	681b      	ldr	r3, [r3, #0]
 801bb18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801bb1c:	2b00      	cmp	r3, #0
 801bb1e:	d016      	beq.n	801bb4e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 801bb20:	687b      	ldr	r3, [r7, #4]
 801bb22:	685a      	ldr	r2, [r3, #4]
 801bb24:	687b      	ldr	r3, [r7, #4]
 801bb26:	689b      	ldr	r3, [r3, #8]
 801bb28:	019b      	lsls	r3, r3, #6
 801bb2a:	431a      	orrs	r2, r3
 801bb2c:	687b      	ldr	r3, [r7, #4]
 801bb2e:	68db      	ldr	r3, [r3, #12]
 801bb30:	085b      	lsrs	r3, r3, #1
 801bb32:	3b01      	subs	r3, #1
 801bb34:	041b      	lsls	r3, r3, #16
 801bb36:	431a      	orrs	r2, r3
 801bb38:	687b      	ldr	r3, [r7, #4]
 801bb3a:	691b      	ldr	r3, [r3, #16]
 801bb3c:	061b      	lsls	r3, r3, #24
 801bb3e:	431a      	orrs	r2, r3
 801bb40:	687b      	ldr	r3, [r7, #4]
 801bb42:	695b      	ldr	r3, [r3, #20]
 801bb44:	071b      	lsls	r3, r3, #28
 801bb46:	4917      	ldr	r1, [pc, #92]	; (801bba4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801bb48:	4313      	orrs	r3, r2
 801bb4a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 801bb4e:	4b16      	ldr	r3, [pc, #88]	; (801bba8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 801bb50:	2201      	movs	r2, #1
 801bb52:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801bb54:	f7fc fe48 	bl	80187e8 <HAL_GetTick>
 801bb58:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801bb5a:	e008      	b.n	801bb6e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 801bb5c:	f7fc fe44 	bl	80187e8 <HAL_GetTick>
 801bb60:	4602      	mov	r2, r0
 801bb62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb64:	1ad3      	subs	r3, r2, r3
 801bb66:	2b02      	cmp	r3, #2
 801bb68:	d901      	bls.n	801bb6e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801bb6a:	2303      	movs	r3, #3
 801bb6c:	e09f      	b.n	801bcae <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801bb6e:	4b0d      	ldr	r3, [pc, #52]	; (801bba4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801bb70:	681b      	ldr	r3, [r3, #0]
 801bb72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801bb76:	2b00      	cmp	r3, #0
 801bb78:	d0f0      	beq.n	801bb5c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 801bb7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bb7c:	2b01      	cmp	r3, #1
 801bb7e:	f040 8095 	bne.w	801bcac <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 801bb82:	4b0a      	ldr	r3, [pc, #40]	; (801bbac <HAL_RCCEx_PeriphCLKConfig+0x540>)
 801bb84:	2200      	movs	r2, #0
 801bb86:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801bb88:	f7fc fe2e 	bl	80187e8 <HAL_GetTick>
 801bb8c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801bb8e:	e00f      	b.n	801bbb0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 801bb90:	f7fc fe2a 	bl	80187e8 <HAL_GetTick>
 801bb94:	4602      	mov	r2, r0
 801bb96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb98:	1ad3      	subs	r3, r2, r3
 801bb9a:	2b02      	cmp	r3, #2
 801bb9c:	d908      	bls.n	801bbb0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801bb9e:	2303      	movs	r3, #3
 801bba0:	e085      	b.n	801bcae <HAL_RCCEx_PeriphCLKConfig+0x642>
 801bba2:	bf00      	nop
 801bba4:	40023800 	.word	0x40023800
 801bba8:	42470068 	.word	0x42470068
 801bbac:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801bbb0:	4b41      	ldr	r3, [pc, #260]	; (801bcb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801bbb2:	681b      	ldr	r3, [r3, #0]
 801bbb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801bbb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801bbbc:	d0e8      	beq.n	801bb90 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 801bbbe:	687b      	ldr	r3, [r7, #4]
 801bbc0:	681b      	ldr	r3, [r3, #0]
 801bbc2:	f003 0304 	and.w	r3, r3, #4
 801bbc6:	2b00      	cmp	r3, #0
 801bbc8:	d003      	beq.n	801bbd2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 801bbca:	687b      	ldr	r3, [r7, #4]
 801bbcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bbce:	2b00      	cmp	r3, #0
 801bbd0:	d009      	beq.n	801bbe6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801bbd2:	687b      	ldr	r3, [r7, #4]
 801bbd4:	681b      	ldr	r3, [r3, #0]
 801bbd6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 801bbda:	2b00      	cmp	r3, #0
 801bbdc:	d02b      	beq.n	801bc36 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801bbde:	687b      	ldr	r3, [r7, #4]
 801bbe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bbe2:	2b00      	cmp	r3, #0
 801bbe4:	d127      	bne.n	801bc36 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 801bbe6:	4b34      	ldr	r3, [pc, #208]	; (801bcb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801bbe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bbec:	0c1b      	lsrs	r3, r3, #16
 801bbee:	f003 0303 	and.w	r3, r3, #3
 801bbf2:	3301      	adds	r3, #1
 801bbf4:	005b      	lsls	r3, r3, #1
 801bbf6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 801bbf8:	687b      	ldr	r3, [r7, #4]
 801bbfa:	699a      	ldr	r2, [r3, #24]
 801bbfc:	687b      	ldr	r3, [r7, #4]
 801bbfe:	69db      	ldr	r3, [r3, #28]
 801bc00:	019b      	lsls	r3, r3, #6
 801bc02:	431a      	orrs	r2, r3
 801bc04:	693b      	ldr	r3, [r7, #16]
 801bc06:	085b      	lsrs	r3, r3, #1
 801bc08:	3b01      	subs	r3, #1
 801bc0a:	041b      	lsls	r3, r3, #16
 801bc0c:	431a      	orrs	r2, r3
 801bc0e:	687b      	ldr	r3, [r7, #4]
 801bc10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bc12:	061b      	lsls	r3, r3, #24
 801bc14:	4928      	ldr	r1, [pc, #160]	; (801bcb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801bc16:	4313      	orrs	r3, r2
 801bc18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 801bc1c:	4b26      	ldr	r3, [pc, #152]	; (801bcb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801bc1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801bc22:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 801bc26:	687b      	ldr	r3, [r7, #4]
 801bc28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bc2a:	3b01      	subs	r3, #1
 801bc2c:	021b      	lsls	r3, r3, #8
 801bc2e:	4922      	ldr	r1, [pc, #136]	; (801bcb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801bc30:	4313      	orrs	r3, r2
 801bc32:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 801bc36:	687b      	ldr	r3, [r7, #4]
 801bc38:	681b      	ldr	r3, [r3, #0]
 801bc3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bc3e:	2b00      	cmp	r3, #0
 801bc40:	d01d      	beq.n	801bc7e <HAL_RCCEx_PeriphCLKConfig+0x612>
 801bc42:	687b      	ldr	r3, [r7, #4]
 801bc44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801bc46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801bc4a:	d118      	bne.n	801bc7e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 801bc4c:	4b1a      	ldr	r3, [pc, #104]	; (801bcb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801bc4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bc52:	0e1b      	lsrs	r3, r3, #24
 801bc54:	f003 030f 	and.w	r3, r3, #15
 801bc58:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 801bc5a:	687b      	ldr	r3, [r7, #4]
 801bc5c:	699a      	ldr	r2, [r3, #24]
 801bc5e:	687b      	ldr	r3, [r7, #4]
 801bc60:	69db      	ldr	r3, [r3, #28]
 801bc62:	019b      	lsls	r3, r3, #6
 801bc64:	431a      	orrs	r2, r3
 801bc66:	687b      	ldr	r3, [r7, #4]
 801bc68:	6a1b      	ldr	r3, [r3, #32]
 801bc6a:	085b      	lsrs	r3, r3, #1
 801bc6c:	3b01      	subs	r3, #1
 801bc6e:	041b      	lsls	r3, r3, #16
 801bc70:	431a      	orrs	r2, r3
 801bc72:	68fb      	ldr	r3, [r7, #12]
 801bc74:	061b      	lsls	r3, r3, #24
 801bc76:	4910      	ldr	r1, [pc, #64]	; (801bcb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801bc78:	4313      	orrs	r3, r2
 801bc7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 801bc7e:	4b0f      	ldr	r3, [pc, #60]	; (801bcbc <HAL_RCCEx_PeriphCLKConfig+0x650>)
 801bc80:	2201      	movs	r2, #1
 801bc82:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801bc84:	f7fc fdb0 	bl	80187e8 <HAL_GetTick>
 801bc88:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801bc8a:	e008      	b.n	801bc9e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 801bc8c:	f7fc fdac 	bl	80187e8 <HAL_GetTick>
 801bc90:	4602      	mov	r2, r0
 801bc92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc94:	1ad3      	subs	r3, r2, r3
 801bc96:	2b02      	cmp	r3, #2
 801bc98:	d901      	bls.n	801bc9e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801bc9a:	2303      	movs	r3, #3
 801bc9c:	e007      	b.n	801bcae <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801bc9e:	4b06      	ldr	r3, [pc, #24]	; (801bcb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801bca0:	681b      	ldr	r3, [r3, #0]
 801bca2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801bca6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801bcaa:	d1ef      	bne.n	801bc8c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 801bcac:	2300      	movs	r3, #0
}
 801bcae:	4618      	mov	r0, r3
 801bcb0:	3730      	adds	r7, #48	; 0x30
 801bcb2:	46bd      	mov	sp, r7
 801bcb4:	bd80      	pop	{r7, pc}
 801bcb6:	bf00      	nop
 801bcb8:	40023800 	.word	0x40023800
 801bcbc:	42470070 	.word	0x42470070

0801bcc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801bcc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bcc4:	b087      	sub	sp, #28
 801bcc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 801bcc8:	2600      	movs	r6, #0
 801bcca:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 801bccc:	2600      	movs	r6, #0
 801bcce:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 801bcd0:	2600      	movs	r6, #0
 801bcd2:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 801bcd4:	2600      	movs	r6, #0
 801bcd6:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 801bcd8:	2600      	movs	r6, #0
 801bcda:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801bcdc:	4ea3      	ldr	r6, [pc, #652]	; (801bf6c <HAL_RCC_GetSysClockFreq+0x2ac>)
 801bcde:	68b6      	ldr	r6, [r6, #8]
 801bce0:	f006 060c 	and.w	r6, r6, #12
 801bce4:	2e0c      	cmp	r6, #12
 801bce6:	f200 8137 	bhi.w	801bf58 <HAL_RCC_GetSysClockFreq+0x298>
 801bcea:	f20f 0c08 	addw	ip, pc, #8
 801bcee:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 801bcf2:	bf00      	nop
 801bcf4:	0801bd29 	.word	0x0801bd29
 801bcf8:	0801bf59 	.word	0x0801bf59
 801bcfc:	0801bf59 	.word	0x0801bf59
 801bd00:	0801bf59 	.word	0x0801bf59
 801bd04:	0801bd2f 	.word	0x0801bd2f
 801bd08:	0801bf59 	.word	0x0801bf59
 801bd0c:	0801bf59 	.word	0x0801bf59
 801bd10:	0801bf59 	.word	0x0801bf59
 801bd14:	0801bd35 	.word	0x0801bd35
 801bd18:	0801bf59 	.word	0x0801bf59
 801bd1c:	0801bf59 	.word	0x0801bf59
 801bd20:	0801bf59 	.word	0x0801bf59
 801bd24:	0801be4b 	.word	0x0801be4b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801bd28:	4b91      	ldr	r3, [pc, #580]	; (801bf70 <HAL_RCC_GetSysClockFreq+0x2b0>)
 801bd2a:	613b      	str	r3, [r7, #16]
       break;
 801bd2c:	e117      	b.n	801bf5e <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801bd2e:	4b91      	ldr	r3, [pc, #580]	; (801bf74 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801bd30:	613b      	str	r3, [r7, #16]
      break;
 801bd32:	e114      	b.n	801bf5e <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801bd34:	4b8d      	ldr	r3, [pc, #564]	; (801bf6c <HAL_RCC_GetSysClockFreq+0x2ac>)
 801bd36:	685b      	ldr	r3, [r3, #4]
 801bd38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801bd3c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801bd3e:	4b8b      	ldr	r3, [pc, #556]	; (801bf6c <HAL_RCC_GetSysClockFreq+0x2ac>)
 801bd40:	685b      	ldr	r3, [r3, #4]
 801bd42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bd46:	2b00      	cmp	r3, #0
 801bd48:	d024      	beq.n	801bd94 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801bd4a:	4b88      	ldr	r3, [pc, #544]	; (801bf6c <HAL_RCC_GetSysClockFreq+0x2ac>)
 801bd4c:	685b      	ldr	r3, [r3, #4]
 801bd4e:	099b      	lsrs	r3, r3, #6
 801bd50:	461a      	mov	r2, r3
 801bd52:	f04f 0300 	mov.w	r3, #0
 801bd56:	f240 14ff 	movw	r4, #511	; 0x1ff
 801bd5a:	f04f 0500 	mov.w	r5, #0
 801bd5e:	ea02 0004 	and.w	r0, r2, r4
 801bd62:	ea03 0105 	and.w	r1, r3, r5
 801bd66:	4b83      	ldr	r3, [pc, #524]	; (801bf74 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801bd68:	fb03 f201 	mul.w	r2, r3, r1
 801bd6c:	2300      	movs	r3, #0
 801bd6e:	fb03 f300 	mul.w	r3, r3, r0
 801bd72:	4413      	add	r3, r2
 801bd74:	4a7f      	ldr	r2, [pc, #508]	; (801bf74 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801bd76:	fba0 0102 	umull	r0, r1, r0, r2
 801bd7a:	440b      	add	r3, r1
 801bd7c:	4619      	mov	r1, r3
 801bd7e:	68fb      	ldr	r3, [r7, #12]
 801bd80:	461a      	mov	r2, r3
 801bd82:	f04f 0300 	mov.w	r3, #0
 801bd86:	f7f0 f963 	bl	800c050 <__aeabi_uldivmod>
 801bd8a:	4602      	mov	r2, r0
 801bd8c:	460b      	mov	r3, r1
 801bd8e:	4613      	mov	r3, r2
 801bd90:	617b      	str	r3, [r7, #20]
 801bd92:	e04c      	b.n	801be2e <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801bd94:	4b75      	ldr	r3, [pc, #468]	; (801bf6c <HAL_RCC_GetSysClockFreq+0x2ac>)
 801bd96:	685b      	ldr	r3, [r3, #4]
 801bd98:	099b      	lsrs	r3, r3, #6
 801bd9a:	461a      	mov	r2, r3
 801bd9c:	f04f 0300 	mov.w	r3, #0
 801bda0:	f240 10ff 	movw	r0, #511	; 0x1ff
 801bda4:	f04f 0100 	mov.w	r1, #0
 801bda8:	ea02 0800 	and.w	r8, r2, r0
 801bdac:	ea03 0901 	and.w	r9, r3, r1
 801bdb0:	4640      	mov	r0, r8
 801bdb2:	4649      	mov	r1, r9
 801bdb4:	f04f 0200 	mov.w	r2, #0
 801bdb8:	f04f 0300 	mov.w	r3, #0
 801bdbc:	014b      	lsls	r3, r1, #5
 801bdbe:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 801bdc2:	0142      	lsls	r2, r0, #5
 801bdc4:	4610      	mov	r0, r2
 801bdc6:	4619      	mov	r1, r3
 801bdc8:	ebb0 0008 	subs.w	r0, r0, r8
 801bdcc:	eb61 0109 	sbc.w	r1, r1, r9
 801bdd0:	f04f 0200 	mov.w	r2, #0
 801bdd4:	f04f 0300 	mov.w	r3, #0
 801bdd8:	018b      	lsls	r3, r1, #6
 801bdda:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 801bdde:	0182      	lsls	r2, r0, #6
 801bde0:	1a12      	subs	r2, r2, r0
 801bde2:	eb63 0301 	sbc.w	r3, r3, r1
 801bde6:	f04f 0000 	mov.w	r0, #0
 801bdea:	f04f 0100 	mov.w	r1, #0
 801bdee:	00d9      	lsls	r1, r3, #3
 801bdf0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801bdf4:	00d0      	lsls	r0, r2, #3
 801bdf6:	4602      	mov	r2, r0
 801bdf8:	460b      	mov	r3, r1
 801bdfa:	eb12 0208 	adds.w	r2, r2, r8
 801bdfe:	eb43 0309 	adc.w	r3, r3, r9
 801be02:	f04f 0000 	mov.w	r0, #0
 801be06:	f04f 0100 	mov.w	r1, #0
 801be0a:	0299      	lsls	r1, r3, #10
 801be0c:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 801be10:	0290      	lsls	r0, r2, #10
 801be12:	4602      	mov	r2, r0
 801be14:	460b      	mov	r3, r1
 801be16:	4610      	mov	r0, r2
 801be18:	4619      	mov	r1, r3
 801be1a:	68fb      	ldr	r3, [r7, #12]
 801be1c:	461a      	mov	r2, r3
 801be1e:	f04f 0300 	mov.w	r3, #0
 801be22:	f7f0 f915 	bl	800c050 <__aeabi_uldivmod>
 801be26:	4602      	mov	r2, r0
 801be28:	460b      	mov	r3, r1
 801be2a:	4613      	mov	r3, r2
 801be2c:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801be2e:	4b4f      	ldr	r3, [pc, #316]	; (801bf6c <HAL_RCC_GetSysClockFreq+0x2ac>)
 801be30:	685b      	ldr	r3, [r3, #4]
 801be32:	0c1b      	lsrs	r3, r3, #16
 801be34:	f003 0303 	and.w	r3, r3, #3
 801be38:	3301      	adds	r3, #1
 801be3a:	005b      	lsls	r3, r3, #1
 801be3c:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 801be3e:	697a      	ldr	r2, [r7, #20]
 801be40:	68bb      	ldr	r3, [r7, #8]
 801be42:	fbb2 f3f3 	udiv	r3, r2, r3
 801be46:	613b      	str	r3, [r7, #16]
      break;
 801be48:	e089      	b.n	801bf5e <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801be4a:	4948      	ldr	r1, [pc, #288]	; (801bf6c <HAL_RCC_GetSysClockFreq+0x2ac>)
 801be4c:	6849      	ldr	r1, [r1, #4]
 801be4e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 801be52:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801be54:	4945      	ldr	r1, [pc, #276]	; (801bf6c <HAL_RCC_GetSysClockFreq+0x2ac>)
 801be56:	6849      	ldr	r1, [r1, #4]
 801be58:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 801be5c:	2900      	cmp	r1, #0
 801be5e:	d024      	beq.n	801beaa <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801be60:	4942      	ldr	r1, [pc, #264]	; (801bf6c <HAL_RCC_GetSysClockFreq+0x2ac>)
 801be62:	6849      	ldr	r1, [r1, #4]
 801be64:	0989      	lsrs	r1, r1, #6
 801be66:	4608      	mov	r0, r1
 801be68:	f04f 0100 	mov.w	r1, #0
 801be6c:	f240 14ff 	movw	r4, #511	; 0x1ff
 801be70:	f04f 0500 	mov.w	r5, #0
 801be74:	ea00 0204 	and.w	r2, r0, r4
 801be78:	ea01 0305 	and.w	r3, r1, r5
 801be7c:	493d      	ldr	r1, [pc, #244]	; (801bf74 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801be7e:	fb01 f003 	mul.w	r0, r1, r3
 801be82:	2100      	movs	r1, #0
 801be84:	fb01 f102 	mul.w	r1, r1, r2
 801be88:	1844      	adds	r4, r0, r1
 801be8a:	493a      	ldr	r1, [pc, #232]	; (801bf74 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801be8c:	fba2 0101 	umull	r0, r1, r2, r1
 801be90:	1863      	adds	r3, r4, r1
 801be92:	4619      	mov	r1, r3
 801be94:	68fb      	ldr	r3, [r7, #12]
 801be96:	461a      	mov	r2, r3
 801be98:	f04f 0300 	mov.w	r3, #0
 801be9c:	f7f0 f8d8 	bl	800c050 <__aeabi_uldivmod>
 801bea0:	4602      	mov	r2, r0
 801bea2:	460b      	mov	r3, r1
 801bea4:	4613      	mov	r3, r2
 801bea6:	617b      	str	r3, [r7, #20]
 801bea8:	e04a      	b.n	801bf40 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801beaa:	4b30      	ldr	r3, [pc, #192]	; (801bf6c <HAL_RCC_GetSysClockFreq+0x2ac>)
 801beac:	685b      	ldr	r3, [r3, #4]
 801beae:	099b      	lsrs	r3, r3, #6
 801beb0:	461a      	mov	r2, r3
 801beb2:	f04f 0300 	mov.w	r3, #0
 801beb6:	f240 10ff 	movw	r0, #511	; 0x1ff
 801beba:	f04f 0100 	mov.w	r1, #0
 801bebe:	ea02 0400 	and.w	r4, r2, r0
 801bec2:	ea03 0501 	and.w	r5, r3, r1
 801bec6:	4620      	mov	r0, r4
 801bec8:	4629      	mov	r1, r5
 801beca:	f04f 0200 	mov.w	r2, #0
 801bece:	f04f 0300 	mov.w	r3, #0
 801bed2:	014b      	lsls	r3, r1, #5
 801bed4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 801bed8:	0142      	lsls	r2, r0, #5
 801beda:	4610      	mov	r0, r2
 801bedc:	4619      	mov	r1, r3
 801bede:	1b00      	subs	r0, r0, r4
 801bee0:	eb61 0105 	sbc.w	r1, r1, r5
 801bee4:	f04f 0200 	mov.w	r2, #0
 801bee8:	f04f 0300 	mov.w	r3, #0
 801beec:	018b      	lsls	r3, r1, #6
 801beee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 801bef2:	0182      	lsls	r2, r0, #6
 801bef4:	1a12      	subs	r2, r2, r0
 801bef6:	eb63 0301 	sbc.w	r3, r3, r1
 801befa:	f04f 0000 	mov.w	r0, #0
 801befe:	f04f 0100 	mov.w	r1, #0
 801bf02:	00d9      	lsls	r1, r3, #3
 801bf04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801bf08:	00d0      	lsls	r0, r2, #3
 801bf0a:	4602      	mov	r2, r0
 801bf0c:	460b      	mov	r3, r1
 801bf0e:	1912      	adds	r2, r2, r4
 801bf10:	eb45 0303 	adc.w	r3, r5, r3
 801bf14:	f04f 0000 	mov.w	r0, #0
 801bf18:	f04f 0100 	mov.w	r1, #0
 801bf1c:	0299      	lsls	r1, r3, #10
 801bf1e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 801bf22:	0290      	lsls	r0, r2, #10
 801bf24:	4602      	mov	r2, r0
 801bf26:	460b      	mov	r3, r1
 801bf28:	4610      	mov	r0, r2
 801bf2a:	4619      	mov	r1, r3
 801bf2c:	68fb      	ldr	r3, [r7, #12]
 801bf2e:	461a      	mov	r2, r3
 801bf30:	f04f 0300 	mov.w	r3, #0
 801bf34:	f7f0 f88c 	bl	800c050 <__aeabi_uldivmod>
 801bf38:	4602      	mov	r2, r0
 801bf3a:	460b      	mov	r3, r1
 801bf3c:	4613      	mov	r3, r2
 801bf3e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 801bf40:	4b0a      	ldr	r3, [pc, #40]	; (801bf6c <HAL_RCC_GetSysClockFreq+0x2ac>)
 801bf42:	685b      	ldr	r3, [r3, #4]
 801bf44:	0f1b      	lsrs	r3, r3, #28
 801bf46:	f003 0307 	and.w	r3, r3, #7
 801bf4a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 801bf4c:	697a      	ldr	r2, [r7, #20]
 801bf4e:	687b      	ldr	r3, [r7, #4]
 801bf50:	fbb2 f3f3 	udiv	r3, r2, r3
 801bf54:	613b      	str	r3, [r7, #16]
      break;
 801bf56:	e002      	b.n	801bf5e <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801bf58:	4b05      	ldr	r3, [pc, #20]	; (801bf70 <HAL_RCC_GetSysClockFreq+0x2b0>)
 801bf5a:	613b      	str	r3, [r7, #16]
      break;
 801bf5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 801bf5e:	693b      	ldr	r3, [r7, #16]
}
 801bf60:	4618      	mov	r0, r3
 801bf62:	371c      	adds	r7, #28
 801bf64:	46bd      	mov	sp, r7
 801bf66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bf6a:	bf00      	nop
 801bf6c:	40023800 	.word	0x40023800
 801bf70:	00f42400 	.word	0x00f42400
 801bf74:	017d7840 	.word	0x017d7840

0801bf78 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801bf78:	b580      	push	{r7, lr}
 801bf7a:	b086      	sub	sp, #24
 801bf7c:	af00      	add	r7, sp, #0
 801bf7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801bf80:	687b      	ldr	r3, [r7, #4]
 801bf82:	2b00      	cmp	r3, #0
 801bf84:	d101      	bne.n	801bf8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801bf86:	2301      	movs	r3, #1
 801bf88:	e28d      	b.n	801c4a6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801bf8a:	687b      	ldr	r3, [r7, #4]
 801bf8c:	681b      	ldr	r3, [r3, #0]
 801bf8e:	f003 0301 	and.w	r3, r3, #1
 801bf92:	2b00      	cmp	r3, #0
 801bf94:	f000 8083 	beq.w	801c09e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 801bf98:	4b94      	ldr	r3, [pc, #592]	; (801c1ec <HAL_RCC_OscConfig+0x274>)
 801bf9a:	689b      	ldr	r3, [r3, #8]
 801bf9c:	f003 030c 	and.w	r3, r3, #12
 801bfa0:	2b04      	cmp	r3, #4
 801bfa2:	d019      	beq.n	801bfd8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 801bfa4:	4b91      	ldr	r3, [pc, #580]	; (801c1ec <HAL_RCC_OscConfig+0x274>)
 801bfa6:	689b      	ldr	r3, [r3, #8]
 801bfa8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 801bfac:	2b08      	cmp	r3, #8
 801bfae:	d106      	bne.n	801bfbe <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 801bfb0:	4b8e      	ldr	r3, [pc, #568]	; (801c1ec <HAL_RCC_OscConfig+0x274>)
 801bfb2:	685b      	ldr	r3, [r3, #4]
 801bfb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bfb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801bfbc:	d00c      	beq.n	801bfd8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801bfbe:	4b8b      	ldr	r3, [pc, #556]	; (801c1ec <HAL_RCC_OscConfig+0x274>)
 801bfc0:	689b      	ldr	r3, [r3, #8]
 801bfc2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 801bfc6:	2b0c      	cmp	r3, #12
 801bfc8:	d112      	bne.n	801bff0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801bfca:	4b88      	ldr	r3, [pc, #544]	; (801c1ec <HAL_RCC_OscConfig+0x274>)
 801bfcc:	685b      	ldr	r3, [r3, #4]
 801bfce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bfd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801bfd6:	d10b      	bne.n	801bff0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801bfd8:	4b84      	ldr	r3, [pc, #528]	; (801c1ec <HAL_RCC_OscConfig+0x274>)
 801bfda:	681b      	ldr	r3, [r3, #0]
 801bfdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bfe0:	2b00      	cmp	r3, #0
 801bfe2:	d05b      	beq.n	801c09c <HAL_RCC_OscConfig+0x124>
 801bfe4:	687b      	ldr	r3, [r7, #4]
 801bfe6:	685b      	ldr	r3, [r3, #4]
 801bfe8:	2b00      	cmp	r3, #0
 801bfea:	d157      	bne.n	801c09c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 801bfec:	2301      	movs	r3, #1
 801bfee:	e25a      	b.n	801c4a6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801bff0:	687b      	ldr	r3, [r7, #4]
 801bff2:	685b      	ldr	r3, [r3, #4]
 801bff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801bff8:	d106      	bne.n	801c008 <HAL_RCC_OscConfig+0x90>
 801bffa:	4b7c      	ldr	r3, [pc, #496]	; (801c1ec <HAL_RCC_OscConfig+0x274>)
 801bffc:	681b      	ldr	r3, [r3, #0]
 801bffe:	4a7b      	ldr	r2, [pc, #492]	; (801c1ec <HAL_RCC_OscConfig+0x274>)
 801c000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c004:	6013      	str	r3, [r2, #0]
 801c006:	e01d      	b.n	801c044 <HAL_RCC_OscConfig+0xcc>
 801c008:	687b      	ldr	r3, [r7, #4]
 801c00a:	685b      	ldr	r3, [r3, #4]
 801c00c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801c010:	d10c      	bne.n	801c02c <HAL_RCC_OscConfig+0xb4>
 801c012:	4b76      	ldr	r3, [pc, #472]	; (801c1ec <HAL_RCC_OscConfig+0x274>)
 801c014:	681b      	ldr	r3, [r3, #0]
 801c016:	4a75      	ldr	r2, [pc, #468]	; (801c1ec <HAL_RCC_OscConfig+0x274>)
 801c018:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801c01c:	6013      	str	r3, [r2, #0]
 801c01e:	4b73      	ldr	r3, [pc, #460]	; (801c1ec <HAL_RCC_OscConfig+0x274>)
 801c020:	681b      	ldr	r3, [r3, #0]
 801c022:	4a72      	ldr	r2, [pc, #456]	; (801c1ec <HAL_RCC_OscConfig+0x274>)
 801c024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c028:	6013      	str	r3, [r2, #0]
 801c02a:	e00b      	b.n	801c044 <HAL_RCC_OscConfig+0xcc>
 801c02c:	4b6f      	ldr	r3, [pc, #444]	; (801c1ec <HAL_RCC_OscConfig+0x274>)
 801c02e:	681b      	ldr	r3, [r3, #0]
 801c030:	4a6e      	ldr	r2, [pc, #440]	; (801c1ec <HAL_RCC_OscConfig+0x274>)
 801c032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801c036:	6013      	str	r3, [r2, #0]
 801c038:	4b6c      	ldr	r3, [pc, #432]	; (801c1ec <HAL_RCC_OscConfig+0x274>)
 801c03a:	681b      	ldr	r3, [r3, #0]
 801c03c:	4a6b      	ldr	r2, [pc, #428]	; (801c1ec <HAL_RCC_OscConfig+0x274>)
 801c03e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801c042:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801c044:	687b      	ldr	r3, [r7, #4]
 801c046:	685b      	ldr	r3, [r3, #4]
 801c048:	2b00      	cmp	r3, #0
 801c04a:	d013      	beq.n	801c074 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c04c:	f7fc fbcc 	bl	80187e8 <HAL_GetTick>
 801c050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801c052:	e008      	b.n	801c066 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801c054:	f7fc fbc8 	bl	80187e8 <HAL_GetTick>
 801c058:	4602      	mov	r2, r0
 801c05a:	693b      	ldr	r3, [r7, #16]
 801c05c:	1ad3      	subs	r3, r2, r3
 801c05e:	2b64      	cmp	r3, #100	; 0x64
 801c060:	d901      	bls.n	801c066 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 801c062:	2303      	movs	r3, #3
 801c064:	e21f      	b.n	801c4a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801c066:	4b61      	ldr	r3, [pc, #388]	; (801c1ec <HAL_RCC_OscConfig+0x274>)
 801c068:	681b      	ldr	r3, [r3, #0]
 801c06a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c06e:	2b00      	cmp	r3, #0
 801c070:	d0f0      	beq.n	801c054 <HAL_RCC_OscConfig+0xdc>
 801c072:	e014      	b.n	801c09e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c074:	f7fc fbb8 	bl	80187e8 <HAL_GetTick>
 801c078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801c07a:	e008      	b.n	801c08e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801c07c:	f7fc fbb4 	bl	80187e8 <HAL_GetTick>
 801c080:	4602      	mov	r2, r0
 801c082:	693b      	ldr	r3, [r7, #16]
 801c084:	1ad3      	subs	r3, r2, r3
 801c086:	2b64      	cmp	r3, #100	; 0x64
 801c088:	d901      	bls.n	801c08e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 801c08a:	2303      	movs	r3, #3
 801c08c:	e20b      	b.n	801c4a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801c08e:	4b57      	ldr	r3, [pc, #348]	; (801c1ec <HAL_RCC_OscConfig+0x274>)
 801c090:	681b      	ldr	r3, [r3, #0]
 801c092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c096:	2b00      	cmp	r3, #0
 801c098:	d1f0      	bne.n	801c07c <HAL_RCC_OscConfig+0x104>
 801c09a:	e000      	b.n	801c09e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801c09c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801c09e:	687b      	ldr	r3, [r7, #4]
 801c0a0:	681b      	ldr	r3, [r3, #0]
 801c0a2:	f003 0302 	and.w	r3, r3, #2
 801c0a6:	2b00      	cmp	r3, #0
 801c0a8:	d06f      	beq.n	801c18a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 801c0aa:	4b50      	ldr	r3, [pc, #320]	; (801c1ec <HAL_RCC_OscConfig+0x274>)
 801c0ac:	689b      	ldr	r3, [r3, #8]
 801c0ae:	f003 030c 	and.w	r3, r3, #12
 801c0b2:	2b00      	cmp	r3, #0
 801c0b4:	d017      	beq.n	801c0e6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 801c0b6:	4b4d      	ldr	r3, [pc, #308]	; (801c1ec <HAL_RCC_OscConfig+0x274>)
 801c0b8:	689b      	ldr	r3, [r3, #8]
 801c0ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 801c0be:	2b08      	cmp	r3, #8
 801c0c0:	d105      	bne.n	801c0ce <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 801c0c2:	4b4a      	ldr	r3, [pc, #296]	; (801c1ec <HAL_RCC_OscConfig+0x274>)
 801c0c4:	685b      	ldr	r3, [r3, #4]
 801c0c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801c0ca:	2b00      	cmp	r3, #0
 801c0cc:	d00b      	beq.n	801c0e6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801c0ce:	4b47      	ldr	r3, [pc, #284]	; (801c1ec <HAL_RCC_OscConfig+0x274>)
 801c0d0:	689b      	ldr	r3, [r3, #8]
 801c0d2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 801c0d6:	2b0c      	cmp	r3, #12
 801c0d8:	d11c      	bne.n	801c114 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801c0da:	4b44      	ldr	r3, [pc, #272]	; (801c1ec <HAL_RCC_OscConfig+0x274>)
 801c0dc:	685b      	ldr	r3, [r3, #4]
 801c0de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801c0e2:	2b00      	cmp	r3, #0
 801c0e4:	d116      	bne.n	801c114 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801c0e6:	4b41      	ldr	r3, [pc, #260]	; (801c1ec <HAL_RCC_OscConfig+0x274>)
 801c0e8:	681b      	ldr	r3, [r3, #0]
 801c0ea:	f003 0302 	and.w	r3, r3, #2
 801c0ee:	2b00      	cmp	r3, #0
 801c0f0:	d005      	beq.n	801c0fe <HAL_RCC_OscConfig+0x186>
 801c0f2:	687b      	ldr	r3, [r7, #4]
 801c0f4:	68db      	ldr	r3, [r3, #12]
 801c0f6:	2b01      	cmp	r3, #1
 801c0f8:	d001      	beq.n	801c0fe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 801c0fa:	2301      	movs	r3, #1
 801c0fc:	e1d3      	b.n	801c4a6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c0fe:	4b3b      	ldr	r3, [pc, #236]	; (801c1ec <HAL_RCC_OscConfig+0x274>)
 801c100:	681b      	ldr	r3, [r3, #0]
 801c102:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801c106:	687b      	ldr	r3, [r7, #4]
 801c108:	691b      	ldr	r3, [r3, #16]
 801c10a:	00db      	lsls	r3, r3, #3
 801c10c:	4937      	ldr	r1, [pc, #220]	; (801c1ec <HAL_RCC_OscConfig+0x274>)
 801c10e:	4313      	orrs	r3, r2
 801c110:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801c112:	e03a      	b.n	801c18a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801c114:	687b      	ldr	r3, [r7, #4]
 801c116:	68db      	ldr	r3, [r3, #12]
 801c118:	2b00      	cmp	r3, #0
 801c11a:	d020      	beq.n	801c15e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801c11c:	4b34      	ldr	r3, [pc, #208]	; (801c1f0 <HAL_RCC_OscConfig+0x278>)
 801c11e:	2201      	movs	r2, #1
 801c120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c122:	f7fc fb61 	bl	80187e8 <HAL_GetTick>
 801c126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801c128:	e008      	b.n	801c13c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801c12a:	f7fc fb5d 	bl	80187e8 <HAL_GetTick>
 801c12e:	4602      	mov	r2, r0
 801c130:	693b      	ldr	r3, [r7, #16]
 801c132:	1ad3      	subs	r3, r2, r3
 801c134:	2b02      	cmp	r3, #2
 801c136:	d901      	bls.n	801c13c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 801c138:	2303      	movs	r3, #3
 801c13a:	e1b4      	b.n	801c4a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801c13c:	4b2b      	ldr	r3, [pc, #172]	; (801c1ec <HAL_RCC_OscConfig+0x274>)
 801c13e:	681b      	ldr	r3, [r3, #0]
 801c140:	f003 0302 	and.w	r3, r3, #2
 801c144:	2b00      	cmp	r3, #0
 801c146:	d0f0      	beq.n	801c12a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c148:	4b28      	ldr	r3, [pc, #160]	; (801c1ec <HAL_RCC_OscConfig+0x274>)
 801c14a:	681b      	ldr	r3, [r3, #0]
 801c14c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801c150:	687b      	ldr	r3, [r7, #4]
 801c152:	691b      	ldr	r3, [r3, #16]
 801c154:	00db      	lsls	r3, r3, #3
 801c156:	4925      	ldr	r1, [pc, #148]	; (801c1ec <HAL_RCC_OscConfig+0x274>)
 801c158:	4313      	orrs	r3, r2
 801c15a:	600b      	str	r3, [r1, #0]
 801c15c:	e015      	b.n	801c18a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801c15e:	4b24      	ldr	r3, [pc, #144]	; (801c1f0 <HAL_RCC_OscConfig+0x278>)
 801c160:	2200      	movs	r2, #0
 801c162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c164:	f7fc fb40 	bl	80187e8 <HAL_GetTick>
 801c168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801c16a:	e008      	b.n	801c17e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801c16c:	f7fc fb3c 	bl	80187e8 <HAL_GetTick>
 801c170:	4602      	mov	r2, r0
 801c172:	693b      	ldr	r3, [r7, #16]
 801c174:	1ad3      	subs	r3, r2, r3
 801c176:	2b02      	cmp	r3, #2
 801c178:	d901      	bls.n	801c17e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 801c17a:	2303      	movs	r3, #3
 801c17c:	e193      	b.n	801c4a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801c17e:	4b1b      	ldr	r3, [pc, #108]	; (801c1ec <HAL_RCC_OscConfig+0x274>)
 801c180:	681b      	ldr	r3, [r3, #0]
 801c182:	f003 0302 	and.w	r3, r3, #2
 801c186:	2b00      	cmp	r3, #0
 801c188:	d1f0      	bne.n	801c16c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801c18a:	687b      	ldr	r3, [r7, #4]
 801c18c:	681b      	ldr	r3, [r3, #0]
 801c18e:	f003 0308 	and.w	r3, r3, #8
 801c192:	2b00      	cmp	r3, #0
 801c194:	d036      	beq.n	801c204 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801c196:	687b      	ldr	r3, [r7, #4]
 801c198:	695b      	ldr	r3, [r3, #20]
 801c19a:	2b00      	cmp	r3, #0
 801c19c:	d016      	beq.n	801c1cc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801c19e:	4b15      	ldr	r3, [pc, #84]	; (801c1f4 <HAL_RCC_OscConfig+0x27c>)
 801c1a0:	2201      	movs	r2, #1
 801c1a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c1a4:	f7fc fb20 	bl	80187e8 <HAL_GetTick>
 801c1a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801c1aa:	e008      	b.n	801c1be <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801c1ac:	f7fc fb1c 	bl	80187e8 <HAL_GetTick>
 801c1b0:	4602      	mov	r2, r0
 801c1b2:	693b      	ldr	r3, [r7, #16]
 801c1b4:	1ad3      	subs	r3, r2, r3
 801c1b6:	2b02      	cmp	r3, #2
 801c1b8:	d901      	bls.n	801c1be <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 801c1ba:	2303      	movs	r3, #3
 801c1bc:	e173      	b.n	801c4a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801c1be:	4b0b      	ldr	r3, [pc, #44]	; (801c1ec <HAL_RCC_OscConfig+0x274>)
 801c1c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c1c2:	f003 0302 	and.w	r3, r3, #2
 801c1c6:	2b00      	cmp	r3, #0
 801c1c8:	d0f0      	beq.n	801c1ac <HAL_RCC_OscConfig+0x234>
 801c1ca:	e01b      	b.n	801c204 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801c1cc:	4b09      	ldr	r3, [pc, #36]	; (801c1f4 <HAL_RCC_OscConfig+0x27c>)
 801c1ce:	2200      	movs	r2, #0
 801c1d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c1d2:	f7fc fb09 	bl	80187e8 <HAL_GetTick>
 801c1d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801c1d8:	e00e      	b.n	801c1f8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801c1da:	f7fc fb05 	bl	80187e8 <HAL_GetTick>
 801c1de:	4602      	mov	r2, r0
 801c1e0:	693b      	ldr	r3, [r7, #16]
 801c1e2:	1ad3      	subs	r3, r2, r3
 801c1e4:	2b02      	cmp	r3, #2
 801c1e6:	d907      	bls.n	801c1f8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 801c1e8:	2303      	movs	r3, #3
 801c1ea:	e15c      	b.n	801c4a6 <HAL_RCC_OscConfig+0x52e>
 801c1ec:	40023800 	.word	0x40023800
 801c1f0:	42470000 	.word	0x42470000
 801c1f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801c1f8:	4b8a      	ldr	r3, [pc, #552]	; (801c424 <HAL_RCC_OscConfig+0x4ac>)
 801c1fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c1fc:	f003 0302 	and.w	r3, r3, #2
 801c200:	2b00      	cmp	r3, #0
 801c202:	d1ea      	bne.n	801c1da <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801c204:	687b      	ldr	r3, [r7, #4]
 801c206:	681b      	ldr	r3, [r3, #0]
 801c208:	f003 0304 	and.w	r3, r3, #4
 801c20c:	2b00      	cmp	r3, #0
 801c20e:	f000 8097 	beq.w	801c340 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801c212:	2300      	movs	r3, #0
 801c214:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801c216:	4b83      	ldr	r3, [pc, #524]	; (801c424 <HAL_RCC_OscConfig+0x4ac>)
 801c218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c21a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c21e:	2b00      	cmp	r3, #0
 801c220:	d10f      	bne.n	801c242 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801c222:	2300      	movs	r3, #0
 801c224:	60bb      	str	r3, [r7, #8]
 801c226:	4b7f      	ldr	r3, [pc, #508]	; (801c424 <HAL_RCC_OscConfig+0x4ac>)
 801c228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c22a:	4a7e      	ldr	r2, [pc, #504]	; (801c424 <HAL_RCC_OscConfig+0x4ac>)
 801c22c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801c230:	6413      	str	r3, [r2, #64]	; 0x40
 801c232:	4b7c      	ldr	r3, [pc, #496]	; (801c424 <HAL_RCC_OscConfig+0x4ac>)
 801c234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c23a:	60bb      	str	r3, [r7, #8]
 801c23c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801c23e:	2301      	movs	r3, #1
 801c240:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801c242:	4b79      	ldr	r3, [pc, #484]	; (801c428 <HAL_RCC_OscConfig+0x4b0>)
 801c244:	681b      	ldr	r3, [r3, #0]
 801c246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c24a:	2b00      	cmp	r3, #0
 801c24c:	d118      	bne.n	801c280 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801c24e:	4b76      	ldr	r3, [pc, #472]	; (801c428 <HAL_RCC_OscConfig+0x4b0>)
 801c250:	681b      	ldr	r3, [r3, #0]
 801c252:	4a75      	ldr	r2, [pc, #468]	; (801c428 <HAL_RCC_OscConfig+0x4b0>)
 801c254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c258:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801c25a:	f7fc fac5 	bl	80187e8 <HAL_GetTick>
 801c25e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801c260:	e008      	b.n	801c274 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801c262:	f7fc fac1 	bl	80187e8 <HAL_GetTick>
 801c266:	4602      	mov	r2, r0
 801c268:	693b      	ldr	r3, [r7, #16]
 801c26a:	1ad3      	subs	r3, r2, r3
 801c26c:	2b02      	cmp	r3, #2
 801c26e:	d901      	bls.n	801c274 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 801c270:	2303      	movs	r3, #3
 801c272:	e118      	b.n	801c4a6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801c274:	4b6c      	ldr	r3, [pc, #432]	; (801c428 <HAL_RCC_OscConfig+0x4b0>)
 801c276:	681b      	ldr	r3, [r3, #0]
 801c278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c27c:	2b00      	cmp	r3, #0
 801c27e:	d0f0      	beq.n	801c262 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801c280:	687b      	ldr	r3, [r7, #4]
 801c282:	689b      	ldr	r3, [r3, #8]
 801c284:	2b01      	cmp	r3, #1
 801c286:	d106      	bne.n	801c296 <HAL_RCC_OscConfig+0x31e>
 801c288:	4b66      	ldr	r3, [pc, #408]	; (801c424 <HAL_RCC_OscConfig+0x4ac>)
 801c28a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c28c:	4a65      	ldr	r2, [pc, #404]	; (801c424 <HAL_RCC_OscConfig+0x4ac>)
 801c28e:	f043 0301 	orr.w	r3, r3, #1
 801c292:	6713      	str	r3, [r2, #112]	; 0x70
 801c294:	e01c      	b.n	801c2d0 <HAL_RCC_OscConfig+0x358>
 801c296:	687b      	ldr	r3, [r7, #4]
 801c298:	689b      	ldr	r3, [r3, #8]
 801c29a:	2b05      	cmp	r3, #5
 801c29c:	d10c      	bne.n	801c2b8 <HAL_RCC_OscConfig+0x340>
 801c29e:	4b61      	ldr	r3, [pc, #388]	; (801c424 <HAL_RCC_OscConfig+0x4ac>)
 801c2a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c2a2:	4a60      	ldr	r2, [pc, #384]	; (801c424 <HAL_RCC_OscConfig+0x4ac>)
 801c2a4:	f043 0304 	orr.w	r3, r3, #4
 801c2a8:	6713      	str	r3, [r2, #112]	; 0x70
 801c2aa:	4b5e      	ldr	r3, [pc, #376]	; (801c424 <HAL_RCC_OscConfig+0x4ac>)
 801c2ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c2ae:	4a5d      	ldr	r2, [pc, #372]	; (801c424 <HAL_RCC_OscConfig+0x4ac>)
 801c2b0:	f043 0301 	orr.w	r3, r3, #1
 801c2b4:	6713      	str	r3, [r2, #112]	; 0x70
 801c2b6:	e00b      	b.n	801c2d0 <HAL_RCC_OscConfig+0x358>
 801c2b8:	4b5a      	ldr	r3, [pc, #360]	; (801c424 <HAL_RCC_OscConfig+0x4ac>)
 801c2ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c2bc:	4a59      	ldr	r2, [pc, #356]	; (801c424 <HAL_RCC_OscConfig+0x4ac>)
 801c2be:	f023 0301 	bic.w	r3, r3, #1
 801c2c2:	6713      	str	r3, [r2, #112]	; 0x70
 801c2c4:	4b57      	ldr	r3, [pc, #348]	; (801c424 <HAL_RCC_OscConfig+0x4ac>)
 801c2c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c2c8:	4a56      	ldr	r2, [pc, #344]	; (801c424 <HAL_RCC_OscConfig+0x4ac>)
 801c2ca:	f023 0304 	bic.w	r3, r3, #4
 801c2ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801c2d0:	687b      	ldr	r3, [r7, #4]
 801c2d2:	689b      	ldr	r3, [r3, #8]
 801c2d4:	2b00      	cmp	r3, #0
 801c2d6:	d015      	beq.n	801c304 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c2d8:	f7fc fa86 	bl	80187e8 <HAL_GetTick>
 801c2dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801c2de:	e00a      	b.n	801c2f6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801c2e0:	f7fc fa82 	bl	80187e8 <HAL_GetTick>
 801c2e4:	4602      	mov	r2, r0
 801c2e6:	693b      	ldr	r3, [r7, #16]
 801c2e8:	1ad3      	subs	r3, r2, r3
 801c2ea:	f241 3288 	movw	r2, #5000	; 0x1388
 801c2ee:	4293      	cmp	r3, r2
 801c2f0:	d901      	bls.n	801c2f6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 801c2f2:	2303      	movs	r3, #3
 801c2f4:	e0d7      	b.n	801c4a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801c2f6:	4b4b      	ldr	r3, [pc, #300]	; (801c424 <HAL_RCC_OscConfig+0x4ac>)
 801c2f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c2fa:	f003 0302 	and.w	r3, r3, #2
 801c2fe:	2b00      	cmp	r3, #0
 801c300:	d0ee      	beq.n	801c2e0 <HAL_RCC_OscConfig+0x368>
 801c302:	e014      	b.n	801c32e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c304:	f7fc fa70 	bl	80187e8 <HAL_GetTick>
 801c308:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801c30a:	e00a      	b.n	801c322 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801c30c:	f7fc fa6c 	bl	80187e8 <HAL_GetTick>
 801c310:	4602      	mov	r2, r0
 801c312:	693b      	ldr	r3, [r7, #16]
 801c314:	1ad3      	subs	r3, r2, r3
 801c316:	f241 3288 	movw	r2, #5000	; 0x1388
 801c31a:	4293      	cmp	r3, r2
 801c31c:	d901      	bls.n	801c322 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 801c31e:	2303      	movs	r3, #3
 801c320:	e0c1      	b.n	801c4a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801c322:	4b40      	ldr	r3, [pc, #256]	; (801c424 <HAL_RCC_OscConfig+0x4ac>)
 801c324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c326:	f003 0302 	and.w	r3, r3, #2
 801c32a:	2b00      	cmp	r3, #0
 801c32c:	d1ee      	bne.n	801c30c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801c32e:	7dfb      	ldrb	r3, [r7, #23]
 801c330:	2b01      	cmp	r3, #1
 801c332:	d105      	bne.n	801c340 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801c334:	4b3b      	ldr	r3, [pc, #236]	; (801c424 <HAL_RCC_OscConfig+0x4ac>)
 801c336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c338:	4a3a      	ldr	r2, [pc, #232]	; (801c424 <HAL_RCC_OscConfig+0x4ac>)
 801c33a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801c33e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801c340:	687b      	ldr	r3, [r7, #4]
 801c342:	699b      	ldr	r3, [r3, #24]
 801c344:	2b00      	cmp	r3, #0
 801c346:	f000 80ad 	beq.w	801c4a4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801c34a:	4b36      	ldr	r3, [pc, #216]	; (801c424 <HAL_RCC_OscConfig+0x4ac>)
 801c34c:	689b      	ldr	r3, [r3, #8]
 801c34e:	f003 030c 	and.w	r3, r3, #12
 801c352:	2b08      	cmp	r3, #8
 801c354:	d060      	beq.n	801c418 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801c356:	687b      	ldr	r3, [r7, #4]
 801c358:	699b      	ldr	r3, [r3, #24]
 801c35a:	2b02      	cmp	r3, #2
 801c35c:	d145      	bne.n	801c3ea <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c35e:	4b33      	ldr	r3, [pc, #204]	; (801c42c <HAL_RCC_OscConfig+0x4b4>)
 801c360:	2200      	movs	r2, #0
 801c362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c364:	f7fc fa40 	bl	80187e8 <HAL_GetTick>
 801c368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801c36a:	e008      	b.n	801c37e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801c36c:	f7fc fa3c 	bl	80187e8 <HAL_GetTick>
 801c370:	4602      	mov	r2, r0
 801c372:	693b      	ldr	r3, [r7, #16]
 801c374:	1ad3      	subs	r3, r2, r3
 801c376:	2b02      	cmp	r3, #2
 801c378:	d901      	bls.n	801c37e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 801c37a:	2303      	movs	r3, #3
 801c37c:	e093      	b.n	801c4a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801c37e:	4b29      	ldr	r3, [pc, #164]	; (801c424 <HAL_RCC_OscConfig+0x4ac>)
 801c380:	681b      	ldr	r3, [r3, #0]
 801c382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c386:	2b00      	cmp	r3, #0
 801c388:	d1f0      	bne.n	801c36c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801c38a:	687b      	ldr	r3, [r7, #4]
 801c38c:	69da      	ldr	r2, [r3, #28]
 801c38e:	687b      	ldr	r3, [r7, #4]
 801c390:	6a1b      	ldr	r3, [r3, #32]
 801c392:	431a      	orrs	r2, r3
 801c394:	687b      	ldr	r3, [r7, #4]
 801c396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c398:	019b      	lsls	r3, r3, #6
 801c39a:	431a      	orrs	r2, r3
 801c39c:	687b      	ldr	r3, [r7, #4]
 801c39e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c3a0:	085b      	lsrs	r3, r3, #1
 801c3a2:	3b01      	subs	r3, #1
 801c3a4:	041b      	lsls	r3, r3, #16
 801c3a6:	431a      	orrs	r2, r3
 801c3a8:	687b      	ldr	r3, [r7, #4]
 801c3aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c3ac:	061b      	lsls	r3, r3, #24
 801c3ae:	431a      	orrs	r2, r3
 801c3b0:	687b      	ldr	r3, [r7, #4]
 801c3b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c3b4:	071b      	lsls	r3, r3, #28
 801c3b6:	491b      	ldr	r1, [pc, #108]	; (801c424 <HAL_RCC_OscConfig+0x4ac>)
 801c3b8:	4313      	orrs	r3, r2
 801c3ba:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801c3bc:	4b1b      	ldr	r3, [pc, #108]	; (801c42c <HAL_RCC_OscConfig+0x4b4>)
 801c3be:	2201      	movs	r2, #1
 801c3c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c3c2:	f7fc fa11 	bl	80187e8 <HAL_GetTick>
 801c3c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801c3c8:	e008      	b.n	801c3dc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801c3ca:	f7fc fa0d 	bl	80187e8 <HAL_GetTick>
 801c3ce:	4602      	mov	r2, r0
 801c3d0:	693b      	ldr	r3, [r7, #16]
 801c3d2:	1ad3      	subs	r3, r2, r3
 801c3d4:	2b02      	cmp	r3, #2
 801c3d6:	d901      	bls.n	801c3dc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 801c3d8:	2303      	movs	r3, #3
 801c3da:	e064      	b.n	801c4a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801c3dc:	4b11      	ldr	r3, [pc, #68]	; (801c424 <HAL_RCC_OscConfig+0x4ac>)
 801c3de:	681b      	ldr	r3, [r3, #0]
 801c3e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c3e4:	2b00      	cmp	r3, #0
 801c3e6:	d0f0      	beq.n	801c3ca <HAL_RCC_OscConfig+0x452>
 801c3e8:	e05c      	b.n	801c4a4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c3ea:	4b10      	ldr	r3, [pc, #64]	; (801c42c <HAL_RCC_OscConfig+0x4b4>)
 801c3ec:	2200      	movs	r2, #0
 801c3ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c3f0:	f7fc f9fa 	bl	80187e8 <HAL_GetTick>
 801c3f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801c3f6:	e008      	b.n	801c40a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801c3f8:	f7fc f9f6 	bl	80187e8 <HAL_GetTick>
 801c3fc:	4602      	mov	r2, r0
 801c3fe:	693b      	ldr	r3, [r7, #16]
 801c400:	1ad3      	subs	r3, r2, r3
 801c402:	2b02      	cmp	r3, #2
 801c404:	d901      	bls.n	801c40a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 801c406:	2303      	movs	r3, #3
 801c408:	e04d      	b.n	801c4a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801c40a:	4b06      	ldr	r3, [pc, #24]	; (801c424 <HAL_RCC_OscConfig+0x4ac>)
 801c40c:	681b      	ldr	r3, [r3, #0]
 801c40e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c412:	2b00      	cmp	r3, #0
 801c414:	d1f0      	bne.n	801c3f8 <HAL_RCC_OscConfig+0x480>
 801c416:	e045      	b.n	801c4a4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801c418:	687b      	ldr	r3, [r7, #4]
 801c41a:	699b      	ldr	r3, [r3, #24]
 801c41c:	2b01      	cmp	r3, #1
 801c41e:	d107      	bne.n	801c430 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 801c420:	2301      	movs	r3, #1
 801c422:	e040      	b.n	801c4a6 <HAL_RCC_OscConfig+0x52e>
 801c424:	40023800 	.word	0x40023800
 801c428:	40007000 	.word	0x40007000
 801c42c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801c430:	4b1f      	ldr	r3, [pc, #124]	; (801c4b0 <HAL_RCC_OscConfig+0x538>)
 801c432:	685b      	ldr	r3, [r3, #4]
 801c434:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801c436:	687b      	ldr	r3, [r7, #4]
 801c438:	699b      	ldr	r3, [r3, #24]
 801c43a:	2b01      	cmp	r3, #1
 801c43c:	d030      	beq.n	801c4a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c43e:	68fb      	ldr	r3, [r7, #12]
 801c440:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801c444:	687b      	ldr	r3, [r7, #4]
 801c446:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801c448:	429a      	cmp	r2, r3
 801c44a:	d129      	bne.n	801c4a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801c44c:	68fb      	ldr	r3, [r7, #12]
 801c44e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801c452:	687b      	ldr	r3, [r7, #4]
 801c454:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c456:	429a      	cmp	r2, r3
 801c458:	d122      	bne.n	801c4a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801c45a:	68fa      	ldr	r2, [r7, #12]
 801c45c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801c460:	4013      	ands	r3, r2
 801c462:	687a      	ldr	r2, [r7, #4]
 801c464:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801c466:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801c468:	4293      	cmp	r3, r2
 801c46a:	d119      	bne.n	801c4a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801c46c:	68fb      	ldr	r3, [r7, #12]
 801c46e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801c472:	687b      	ldr	r3, [r7, #4]
 801c474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c476:	085b      	lsrs	r3, r3, #1
 801c478:	3b01      	subs	r3, #1
 801c47a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801c47c:	429a      	cmp	r2, r3
 801c47e:	d10f      	bne.n	801c4a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801c480:	68fb      	ldr	r3, [r7, #12]
 801c482:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801c486:	687b      	ldr	r3, [r7, #4]
 801c488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c48a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801c48c:	429a      	cmp	r2, r3
 801c48e:	d107      	bne.n	801c4a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 801c490:	68fb      	ldr	r3, [r7, #12]
 801c492:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 801c496:	687b      	ldr	r3, [r7, #4]
 801c498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c49a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801c49c:	429a      	cmp	r2, r3
 801c49e:	d001      	beq.n	801c4a4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 801c4a0:	2301      	movs	r3, #1
 801c4a2:	e000      	b.n	801c4a6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 801c4a4:	2300      	movs	r3, #0
}
 801c4a6:	4618      	mov	r0, r3
 801c4a8:	3718      	adds	r7, #24
 801c4aa:	46bd      	mov	sp, r7
 801c4ac:	bd80      	pop	{r7, pc}
 801c4ae:	bf00      	nop
 801c4b0:	40023800 	.word	0x40023800

0801c4b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801c4b4:	b580      	push	{r7, lr}
 801c4b6:	b082      	sub	sp, #8
 801c4b8:	af00      	add	r7, sp, #0
 801c4ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801c4bc:	687b      	ldr	r3, [r7, #4]
 801c4be:	2b00      	cmp	r3, #0
 801c4c0:	d101      	bne.n	801c4c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801c4c2:	2301      	movs	r3, #1
 801c4c4:	e07b      	b.n	801c5be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801c4c6:	687b      	ldr	r3, [r7, #4]
 801c4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c4ca:	2b00      	cmp	r3, #0
 801c4cc:	d108      	bne.n	801c4e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801c4ce:	687b      	ldr	r3, [r7, #4]
 801c4d0:	685b      	ldr	r3, [r3, #4]
 801c4d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c4d6:	d009      	beq.n	801c4ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801c4d8:	687b      	ldr	r3, [r7, #4]
 801c4da:	2200      	movs	r2, #0
 801c4dc:	61da      	str	r2, [r3, #28]
 801c4de:	e005      	b.n	801c4ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801c4e0:	687b      	ldr	r3, [r7, #4]
 801c4e2:	2200      	movs	r2, #0
 801c4e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801c4e6:	687b      	ldr	r3, [r7, #4]
 801c4e8:	2200      	movs	r2, #0
 801c4ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801c4ec:	687b      	ldr	r3, [r7, #4]
 801c4ee:	2200      	movs	r2, #0
 801c4f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801c4f2:	687b      	ldr	r3, [r7, #4]
 801c4f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c4f8:	b2db      	uxtb	r3, r3
 801c4fa:	2b00      	cmp	r3, #0
 801c4fc:	d106      	bne.n	801c50c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801c4fe:	687b      	ldr	r3, [r7, #4]
 801c500:	2200      	movs	r2, #0
 801c502:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801c506:	6878      	ldr	r0, [r7, #4]
 801c508:	f7fb ff3a 	bl	8018380 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801c50c:	687b      	ldr	r3, [r7, #4]
 801c50e:	2202      	movs	r2, #2
 801c510:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801c514:	687b      	ldr	r3, [r7, #4]
 801c516:	681b      	ldr	r3, [r3, #0]
 801c518:	681a      	ldr	r2, [r3, #0]
 801c51a:	687b      	ldr	r3, [r7, #4]
 801c51c:	681b      	ldr	r3, [r3, #0]
 801c51e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c522:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801c524:	687b      	ldr	r3, [r7, #4]
 801c526:	685b      	ldr	r3, [r3, #4]
 801c528:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801c52c:	687b      	ldr	r3, [r7, #4]
 801c52e:	689b      	ldr	r3, [r3, #8]
 801c530:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801c534:	431a      	orrs	r2, r3
 801c536:	687b      	ldr	r3, [r7, #4]
 801c538:	68db      	ldr	r3, [r3, #12]
 801c53a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c53e:	431a      	orrs	r2, r3
 801c540:	687b      	ldr	r3, [r7, #4]
 801c542:	691b      	ldr	r3, [r3, #16]
 801c544:	f003 0302 	and.w	r3, r3, #2
 801c548:	431a      	orrs	r2, r3
 801c54a:	687b      	ldr	r3, [r7, #4]
 801c54c:	695b      	ldr	r3, [r3, #20]
 801c54e:	f003 0301 	and.w	r3, r3, #1
 801c552:	431a      	orrs	r2, r3
 801c554:	687b      	ldr	r3, [r7, #4]
 801c556:	699b      	ldr	r3, [r3, #24]
 801c558:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801c55c:	431a      	orrs	r2, r3
 801c55e:	687b      	ldr	r3, [r7, #4]
 801c560:	69db      	ldr	r3, [r3, #28]
 801c562:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801c566:	431a      	orrs	r2, r3
 801c568:	687b      	ldr	r3, [r7, #4]
 801c56a:	6a1b      	ldr	r3, [r3, #32]
 801c56c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c570:	ea42 0103 	orr.w	r1, r2, r3
 801c574:	687b      	ldr	r3, [r7, #4]
 801c576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c578:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801c57c:	687b      	ldr	r3, [r7, #4]
 801c57e:	681b      	ldr	r3, [r3, #0]
 801c580:	430a      	orrs	r2, r1
 801c582:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 801c584:	687b      	ldr	r3, [r7, #4]
 801c586:	699b      	ldr	r3, [r3, #24]
 801c588:	0c1b      	lsrs	r3, r3, #16
 801c58a:	f003 0104 	and.w	r1, r3, #4
 801c58e:	687b      	ldr	r3, [r7, #4]
 801c590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c592:	f003 0210 	and.w	r2, r3, #16
 801c596:	687b      	ldr	r3, [r7, #4]
 801c598:	681b      	ldr	r3, [r3, #0]
 801c59a:	430a      	orrs	r2, r1
 801c59c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801c59e:	687b      	ldr	r3, [r7, #4]
 801c5a0:	681b      	ldr	r3, [r3, #0]
 801c5a2:	69da      	ldr	r2, [r3, #28]
 801c5a4:	687b      	ldr	r3, [r7, #4]
 801c5a6:	681b      	ldr	r3, [r3, #0]
 801c5a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801c5ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801c5ae:	687b      	ldr	r3, [r7, #4]
 801c5b0:	2200      	movs	r2, #0
 801c5b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 801c5b4:	687b      	ldr	r3, [r7, #4]
 801c5b6:	2201      	movs	r2, #1
 801c5b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 801c5bc:	2300      	movs	r3, #0
}
 801c5be:	4618      	mov	r0, r3
 801c5c0:	3708      	adds	r7, #8
 801c5c2:	46bd      	mov	sp, r7
 801c5c4:	bd80      	pop	{r7, pc}

0801c5c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c5c6:	b580      	push	{r7, lr}
 801c5c8:	b088      	sub	sp, #32
 801c5ca:	af00      	add	r7, sp, #0
 801c5cc:	60f8      	str	r0, [r7, #12]
 801c5ce:	60b9      	str	r1, [r7, #8]
 801c5d0:	603b      	str	r3, [r7, #0]
 801c5d2:	4613      	mov	r3, r2
 801c5d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801c5d6:	2300      	movs	r3, #0
 801c5d8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c5da:	68fb      	ldr	r3, [r7, #12]
 801c5dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801c5e0:	2b01      	cmp	r3, #1
 801c5e2:	d101      	bne.n	801c5e8 <HAL_SPI_Transmit+0x22>
 801c5e4:	2302      	movs	r3, #2
 801c5e6:	e126      	b.n	801c836 <HAL_SPI_Transmit+0x270>
 801c5e8:	68fb      	ldr	r3, [r7, #12]
 801c5ea:	2201      	movs	r2, #1
 801c5ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c5f0:	f7fc f8fa 	bl	80187e8 <HAL_GetTick>
 801c5f4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801c5f6:	88fb      	ldrh	r3, [r7, #6]
 801c5f8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801c5fa:	68fb      	ldr	r3, [r7, #12]
 801c5fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c600:	b2db      	uxtb	r3, r3
 801c602:	2b01      	cmp	r3, #1
 801c604:	d002      	beq.n	801c60c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801c606:	2302      	movs	r3, #2
 801c608:	77fb      	strb	r3, [r7, #31]
    goto error;
 801c60a:	e10b      	b.n	801c824 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 801c60c:	68bb      	ldr	r3, [r7, #8]
 801c60e:	2b00      	cmp	r3, #0
 801c610:	d002      	beq.n	801c618 <HAL_SPI_Transmit+0x52>
 801c612:	88fb      	ldrh	r3, [r7, #6]
 801c614:	2b00      	cmp	r3, #0
 801c616:	d102      	bne.n	801c61e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801c618:	2301      	movs	r3, #1
 801c61a:	77fb      	strb	r3, [r7, #31]
    goto error;
 801c61c:	e102      	b.n	801c824 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801c61e:	68fb      	ldr	r3, [r7, #12]
 801c620:	2203      	movs	r2, #3
 801c622:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c626:	68fb      	ldr	r3, [r7, #12]
 801c628:	2200      	movs	r2, #0
 801c62a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801c62c:	68fb      	ldr	r3, [r7, #12]
 801c62e:	68ba      	ldr	r2, [r7, #8]
 801c630:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 801c632:	68fb      	ldr	r3, [r7, #12]
 801c634:	88fa      	ldrh	r2, [r7, #6]
 801c636:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 801c638:	68fb      	ldr	r3, [r7, #12]
 801c63a:	88fa      	ldrh	r2, [r7, #6]
 801c63c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801c63e:	68fb      	ldr	r3, [r7, #12]
 801c640:	2200      	movs	r2, #0
 801c642:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 801c644:	68fb      	ldr	r3, [r7, #12]
 801c646:	2200      	movs	r2, #0
 801c648:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 801c64a:	68fb      	ldr	r3, [r7, #12]
 801c64c:	2200      	movs	r2, #0
 801c64e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 801c650:	68fb      	ldr	r3, [r7, #12]
 801c652:	2200      	movs	r2, #0
 801c654:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 801c656:	68fb      	ldr	r3, [r7, #12]
 801c658:	2200      	movs	r2, #0
 801c65a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c65c:	68fb      	ldr	r3, [r7, #12]
 801c65e:	689b      	ldr	r3, [r3, #8]
 801c660:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c664:	d10f      	bne.n	801c686 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801c666:	68fb      	ldr	r3, [r7, #12]
 801c668:	681b      	ldr	r3, [r3, #0]
 801c66a:	681a      	ldr	r2, [r3, #0]
 801c66c:	68fb      	ldr	r3, [r7, #12]
 801c66e:	681b      	ldr	r3, [r3, #0]
 801c670:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c674:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801c676:	68fb      	ldr	r3, [r7, #12]
 801c678:	681b      	ldr	r3, [r3, #0]
 801c67a:	681a      	ldr	r2, [r3, #0]
 801c67c:	68fb      	ldr	r3, [r7, #12]
 801c67e:	681b      	ldr	r3, [r3, #0]
 801c680:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801c684:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c686:	68fb      	ldr	r3, [r7, #12]
 801c688:	681b      	ldr	r3, [r3, #0]
 801c68a:	681b      	ldr	r3, [r3, #0]
 801c68c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c690:	2b40      	cmp	r3, #64	; 0x40
 801c692:	d007      	beq.n	801c6a4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c694:	68fb      	ldr	r3, [r7, #12]
 801c696:	681b      	ldr	r3, [r3, #0]
 801c698:	681a      	ldr	r2, [r3, #0]
 801c69a:	68fb      	ldr	r3, [r7, #12]
 801c69c:	681b      	ldr	r3, [r3, #0]
 801c69e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c6a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801c6a4:	68fb      	ldr	r3, [r7, #12]
 801c6a6:	68db      	ldr	r3, [r3, #12]
 801c6a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c6ac:	d14b      	bne.n	801c746 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c6ae:	68fb      	ldr	r3, [r7, #12]
 801c6b0:	685b      	ldr	r3, [r3, #4]
 801c6b2:	2b00      	cmp	r3, #0
 801c6b4:	d002      	beq.n	801c6bc <HAL_SPI_Transmit+0xf6>
 801c6b6:	8afb      	ldrh	r3, [r7, #22]
 801c6b8:	2b01      	cmp	r3, #1
 801c6ba:	d13e      	bne.n	801c73a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c6bc:	68fb      	ldr	r3, [r7, #12]
 801c6be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c6c0:	881a      	ldrh	r2, [r3, #0]
 801c6c2:	68fb      	ldr	r3, [r7, #12]
 801c6c4:	681b      	ldr	r3, [r3, #0]
 801c6c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801c6c8:	68fb      	ldr	r3, [r7, #12]
 801c6ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c6cc:	1c9a      	adds	r2, r3, #2
 801c6ce:	68fb      	ldr	r3, [r7, #12]
 801c6d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801c6d2:	68fb      	ldr	r3, [r7, #12]
 801c6d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c6d6:	b29b      	uxth	r3, r3
 801c6d8:	3b01      	subs	r3, #1
 801c6da:	b29a      	uxth	r2, r3
 801c6dc:	68fb      	ldr	r3, [r7, #12]
 801c6de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801c6e0:	e02b      	b.n	801c73a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801c6e2:	68fb      	ldr	r3, [r7, #12]
 801c6e4:	681b      	ldr	r3, [r3, #0]
 801c6e6:	689b      	ldr	r3, [r3, #8]
 801c6e8:	f003 0302 	and.w	r3, r3, #2
 801c6ec:	2b02      	cmp	r3, #2
 801c6ee:	d112      	bne.n	801c716 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c6f0:	68fb      	ldr	r3, [r7, #12]
 801c6f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c6f4:	881a      	ldrh	r2, [r3, #0]
 801c6f6:	68fb      	ldr	r3, [r7, #12]
 801c6f8:	681b      	ldr	r3, [r3, #0]
 801c6fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801c6fc:	68fb      	ldr	r3, [r7, #12]
 801c6fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c700:	1c9a      	adds	r2, r3, #2
 801c702:	68fb      	ldr	r3, [r7, #12]
 801c704:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801c706:	68fb      	ldr	r3, [r7, #12]
 801c708:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c70a:	b29b      	uxth	r3, r3
 801c70c:	3b01      	subs	r3, #1
 801c70e:	b29a      	uxth	r2, r3
 801c710:	68fb      	ldr	r3, [r7, #12]
 801c712:	86da      	strh	r2, [r3, #54]	; 0x36
 801c714:	e011      	b.n	801c73a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c716:	f7fc f867 	bl	80187e8 <HAL_GetTick>
 801c71a:	4602      	mov	r2, r0
 801c71c:	69bb      	ldr	r3, [r7, #24]
 801c71e:	1ad3      	subs	r3, r2, r3
 801c720:	683a      	ldr	r2, [r7, #0]
 801c722:	429a      	cmp	r2, r3
 801c724:	d803      	bhi.n	801c72e <HAL_SPI_Transmit+0x168>
 801c726:	683b      	ldr	r3, [r7, #0]
 801c728:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c72c:	d102      	bne.n	801c734 <HAL_SPI_Transmit+0x16e>
 801c72e:	683b      	ldr	r3, [r7, #0]
 801c730:	2b00      	cmp	r3, #0
 801c732:	d102      	bne.n	801c73a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 801c734:	2303      	movs	r3, #3
 801c736:	77fb      	strb	r3, [r7, #31]
          goto error;
 801c738:	e074      	b.n	801c824 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 801c73a:	68fb      	ldr	r3, [r7, #12]
 801c73c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c73e:	b29b      	uxth	r3, r3
 801c740:	2b00      	cmp	r3, #0
 801c742:	d1ce      	bne.n	801c6e2 <HAL_SPI_Transmit+0x11c>
 801c744:	e04c      	b.n	801c7e0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c746:	68fb      	ldr	r3, [r7, #12]
 801c748:	685b      	ldr	r3, [r3, #4]
 801c74a:	2b00      	cmp	r3, #0
 801c74c:	d002      	beq.n	801c754 <HAL_SPI_Transmit+0x18e>
 801c74e:	8afb      	ldrh	r3, [r7, #22]
 801c750:	2b01      	cmp	r3, #1
 801c752:	d140      	bne.n	801c7d6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801c754:	68fb      	ldr	r3, [r7, #12]
 801c756:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c758:	68fb      	ldr	r3, [r7, #12]
 801c75a:	681b      	ldr	r3, [r3, #0]
 801c75c:	330c      	adds	r3, #12
 801c75e:	7812      	ldrb	r2, [r2, #0]
 801c760:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801c762:	68fb      	ldr	r3, [r7, #12]
 801c764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c766:	1c5a      	adds	r2, r3, #1
 801c768:	68fb      	ldr	r3, [r7, #12]
 801c76a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801c76c:	68fb      	ldr	r3, [r7, #12]
 801c76e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c770:	b29b      	uxth	r3, r3
 801c772:	3b01      	subs	r3, #1
 801c774:	b29a      	uxth	r2, r3
 801c776:	68fb      	ldr	r3, [r7, #12]
 801c778:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 801c77a:	e02c      	b.n	801c7d6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801c77c:	68fb      	ldr	r3, [r7, #12]
 801c77e:	681b      	ldr	r3, [r3, #0]
 801c780:	689b      	ldr	r3, [r3, #8]
 801c782:	f003 0302 	and.w	r3, r3, #2
 801c786:	2b02      	cmp	r3, #2
 801c788:	d113      	bne.n	801c7b2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801c78a:	68fb      	ldr	r3, [r7, #12]
 801c78c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c78e:	68fb      	ldr	r3, [r7, #12]
 801c790:	681b      	ldr	r3, [r3, #0]
 801c792:	330c      	adds	r3, #12
 801c794:	7812      	ldrb	r2, [r2, #0]
 801c796:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801c798:	68fb      	ldr	r3, [r7, #12]
 801c79a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c79c:	1c5a      	adds	r2, r3, #1
 801c79e:	68fb      	ldr	r3, [r7, #12]
 801c7a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801c7a2:	68fb      	ldr	r3, [r7, #12]
 801c7a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c7a6:	b29b      	uxth	r3, r3
 801c7a8:	3b01      	subs	r3, #1
 801c7aa:	b29a      	uxth	r2, r3
 801c7ac:	68fb      	ldr	r3, [r7, #12]
 801c7ae:	86da      	strh	r2, [r3, #54]	; 0x36
 801c7b0:	e011      	b.n	801c7d6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c7b2:	f7fc f819 	bl	80187e8 <HAL_GetTick>
 801c7b6:	4602      	mov	r2, r0
 801c7b8:	69bb      	ldr	r3, [r7, #24]
 801c7ba:	1ad3      	subs	r3, r2, r3
 801c7bc:	683a      	ldr	r2, [r7, #0]
 801c7be:	429a      	cmp	r2, r3
 801c7c0:	d803      	bhi.n	801c7ca <HAL_SPI_Transmit+0x204>
 801c7c2:	683b      	ldr	r3, [r7, #0]
 801c7c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c7c8:	d102      	bne.n	801c7d0 <HAL_SPI_Transmit+0x20a>
 801c7ca:	683b      	ldr	r3, [r7, #0]
 801c7cc:	2b00      	cmp	r3, #0
 801c7ce:	d102      	bne.n	801c7d6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 801c7d0:	2303      	movs	r3, #3
 801c7d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 801c7d4:	e026      	b.n	801c824 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 801c7d6:	68fb      	ldr	r3, [r7, #12]
 801c7d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c7da:	b29b      	uxth	r3, r3
 801c7dc:	2b00      	cmp	r3, #0
 801c7de:	d1cd      	bne.n	801c77c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c7e0:	69ba      	ldr	r2, [r7, #24]
 801c7e2:	6839      	ldr	r1, [r7, #0]
 801c7e4:	68f8      	ldr	r0, [r7, #12]
 801c7e6:	f000 fcf7 	bl	801d1d8 <SPI_EndRxTxTransaction>
 801c7ea:	4603      	mov	r3, r0
 801c7ec:	2b00      	cmp	r3, #0
 801c7ee:	d002      	beq.n	801c7f6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c7f0:	68fb      	ldr	r3, [r7, #12]
 801c7f2:	2220      	movs	r2, #32
 801c7f4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801c7f6:	68fb      	ldr	r3, [r7, #12]
 801c7f8:	689b      	ldr	r3, [r3, #8]
 801c7fa:	2b00      	cmp	r3, #0
 801c7fc:	d10a      	bne.n	801c814 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801c7fe:	2300      	movs	r3, #0
 801c800:	613b      	str	r3, [r7, #16]
 801c802:	68fb      	ldr	r3, [r7, #12]
 801c804:	681b      	ldr	r3, [r3, #0]
 801c806:	68db      	ldr	r3, [r3, #12]
 801c808:	613b      	str	r3, [r7, #16]
 801c80a:	68fb      	ldr	r3, [r7, #12]
 801c80c:	681b      	ldr	r3, [r3, #0]
 801c80e:	689b      	ldr	r3, [r3, #8]
 801c810:	613b      	str	r3, [r7, #16]
 801c812:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801c814:	68fb      	ldr	r3, [r7, #12]
 801c816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c818:	2b00      	cmp	r3, #0
 801c81a:	d002      	beq.n	801c822 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 801c81c:	2301      	movs	r3, #1
 801c81e:	77fb      	strb	r3, [r7, #31]
 801c820:	e000      	b.n	801c824 <HAL_SPI_Transmit+0x25e>
  }

error:
 801c822:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c824:	68fb      	ldr	r3, [r7, #12]
 801c826:	2201      	movs	r2, #1
 801c828:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801c82c:	68fb      	ldr	r3, [r7, #12]
 801c82e:	2200      	movs	r2, #0
 801c830:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801c834:	7ffb      	ldrb	r3, [r7, #31]
}
 801c836:	4618      	mov	r0, r3
 801c838:	3720      	adds	r7, #32
 801c83a:	46bd      	mov	sp, r7
 801c83c:	bd80      	pop	{r7, pc}

0801c83e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c83e:	b580      	push	{r7, lr}
 801c840:	b088      	sub	sp, #32
 801c842:	af02      	add	r7, sp, #8
 801c844:	60f8      	str	r0, [r7, #12]
 801c846:	60b9      	str	r1, [r7, #8]
 801c848:	603b      	str	r3, [r7, #0]
 801c84a:	4613      	mov	r3, r2
 801c84c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801c84e:	2300      	movs	r3, #0
 801c850:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801c852:	68fb      	ldr	r3, [r7, #12]
 801c854:	685b      	ldr	r3, [r3, #4]
 801c856:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c85a:	d112      	bne.n	801c882 <HAL_SPI_Receive+0x44>
 801c85c:	68fb      	ldr	r3, [r7, #12]
 801c85e:	689b      	ldr	r3, [r3, #8]
 801c860:	2b00      	cmp	r3, #0
 801c862:	d10e      	bne.n	801c882 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801c864:	68fb      	ldr	r3, [r7, #12]
 801c866:	2204      	movs	r2, #4
 801c868:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801c86c:	88fa      	ldrh	r2, [r7, #6]
 801c86e:	683b      	ldr	r3, [r7, #0]
 801c870:	9300      	str	r3, [sp, #0]
 801c872:	4613      	mov	r3, r2
 801c874:	68ba      	ldr	r2, [r7, #8]
 801c876:	68b9      	ldr	r1, [r7, #8]
 801c878:	68f8      	ldr	r0, [r7, #12]
 801c87a:	f000 f8f1 	bl	801ca60 <HAL_SPI_TransmitReceive>
 801c87e:	4603      	mov	r3, r0
 801c880:	e0ea      	b.n	801ca58 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c882:	68fb      	ldr	r3, [r7, #12]
 801c884:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801c888:	2b01      	cmp	r3, #1
 801c88a:	d101      	bne.n	801c890 <HAL_SPI_Receive+0x52>
 801c88c:	2302      	movs	r3, #2
 801c88e:	e0e3      	b.n	801ca58 <HAL_SPI_Receive+0x21a>
 801c890:	68fb      	ldr	r3, [r7, #12]
 801c892:	2201      	movs	r2, #1
 801c894:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c898:	f7fb ffa6 	bl	80187e8 <HAL_GetTick>
 801c89c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801c89e:	68fb      	ldr	r3, [r7, #12]
 801c8a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c8a4:	b2db      	uxtb	r3, r3
 801c8a6:	2b01      	cmp	r3, #1
 801c8a8:	d002      	beq.n	801c8b0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801c8aa:	2302      	movs	r3, #2
 801c8ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 801c8ae:	e0ca      	b.n	801ca46 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 801c8b0:	68bb      	ldr	r3, [r7, #8]
 801c8b2:	2b00      	cmp	r3, #0
 801c8b4:	d002      	beq.n	801c8bc <HAL_SPI_Receive+0x7e>
 801c8b6:	88fb      	ldrh	r3, [r7, #6]
 801c8b8:	2b00      	cmp	r3, #0
 801c8ba:	d102      	bne.n	801c8c2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801c8bc:	2301      	movs	r3, #1
 801c8be:	75fb      	strb	r3, [r7, #23]
    goto error;
 801c8c0:	e0c1      	b.n	801ca46 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801c8c2:	68fb      	ldr	r3, [r7, #12]
 801c8c4:	2204      	movs	r2, #4
 801c8c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c8ca:	68fb      	ldr	r3, [r7, #12]
 801c8cc:	2200      	movs	r2, #0
 801c8ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801c8d0:	68fb      	ldr	r3, [r7, #12]
 801c8d2:	68ba      	ldr	r2, [r7, #8]
 801c8d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 801c8d6:	68fb      	ldr	r3, [r7, #12]
 801c8d8:	88fa      	ldrh	r2, [r7, #6]
 801c8da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 801c8dc:	68fb      	ldr	r3, [r7, #12]
 801c8de:	88fa      	ldrh	r2, [r7, #6]
 801c8e0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801c8e2:	68fb      	ldr	r3, [r7, #12]
 801c8e4:	2200      	movs	r2, #0
 801c8e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 801c8e8:	68fb      	ldr	r3, [r7, #12]
 801c8ea:	2200      	movs	r2, #0
 801c8ec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 801c8ee:	68fb      	ldr	r3, [r7, #12]
 801c8f0:	2200      	movs	r2, #0
 801c8f2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 801c8f4:	68fb      	ldr	r3, [r7, #12]
 801c8f6:	2200      	movs	r2, #0
 801c8f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801c8fa:	68fb      	ldr	r3, [r7, #12]
 801c8fc:	2200      	movs	r2, #0
 801c8fe:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c900:	68fb      	ldr	r3, [r7, #12]
 801c902:	689b      	ldr	r3, [r3, #8]
 801c904:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c908:	d10f      	bne.n	801c92a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801c90a:	68fb      	ldr	r3, [r7, #12]
 801c90c:	681b      	ldr	r3, [r3, #0]
 801c90e:	681a      	ldr	r2, [r3, #0]
 801c910:	68fb      	ldr	r3, [r7, #12]
 801c912:	681b      	ldr	r3, [r3, #0]
 801c914:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c918:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801c91a:	68fb      	ldr	r3, [r7, #12]
 801c91c:	681b      	ldr	r3, [r3, #0]
 801c91e:	681a      	ldr	r2, [r3, #0]
 801c920:	68fb      	ldr	r3, [r7, #12]
 801c922:	681b      	ldr	r3, [r3, #0]
 801c924:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801c928:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c92a:	68fb      	ldr	r3, [r7, #12]
 801c92c:	681b      	ldr	r3, [r3, #0]
 801c92e:	681b      	ldr	r3, [r3, #0]
 801c930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c934:	2b40      	cmp	r3, #64	; 0x40
 801c936:	d007      	beq.n	801c948 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c938:	68fb      	ldr	r3, [r7, #12]
 801c93a:	681b      	ldr	r3, [r3, #0]
 801c93c:	681a      	ldr	r2, [r3, #0]
 801c93e:	68fb      	ldr	r3, [r7, #12]
 801c940:	681b      	ldr	r3, [r3, #0]
 801c942:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c946:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 801c948:	68fb      	ldr	r3, [r7, #12]
 801c94a:	68db      	ldr	r3, [r3, #12]
 801c94c:	2b00      	cmp	r3, #0
 801c94e:	d162      	bne.n	801ca16 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801c950:	e02e      	b.n	801c9b0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801c952:	68fb      	ldr	r3, [r7, #12]
 801c954:	681b      	ldr	r3, [r3, #0]
 801c956:	689b      	ldr	r3, [r3, #8]
 801c958:	f003 0301 	and.w	r3, r3, #1
 801c95c:	2b01      	cmp	r3, #1
 801c95e:	d115      	bne.n	801c98c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801c960:	68fb      	ldr	r3, [r7, #12]
 801c962:	681b      	ldr	r3, [r3, #0]
 801c964:	f103 020c 	add.w	r2, r3, #12
 801c968:	68fb      	ldr	r3, [r7, #12]
 801c96a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c96c:	7812      	ldrb	r2, [r2, #0]
 801c96e:	b2d2      	uxtb	r2, r2
 801c970:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801c972:	68fb      	ldr	r3, [r7, #12]
 801c974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c976:	1c5a      	adds	r2, r3, #1
 801c978:	68fb      	ldr	r3, [r7, #12]
 801c97a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801c97c:	68fb      	ldr	r3, [r7, #12]
 801c97e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c980:	b29b      	uxth	r3, r3
 801c982:	3b01      	subs	r3, #1
 801c984:	b29a      	uxth	r2, r3
 801c986:	68fb      	ldr	r3, [r7, #12]
 801c988:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c98a:	e011      	b.n	801c9b0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c98c:	f7fb ff2c 	bl	80187e8 <HAL_GetTick>
 801c990:	4602      	mov	r2, r0
 801c992:	693b      	ldr	r3, [r7, #16]
 801c994:	1ad3      	subs	r3, r2, r3
 801c996:	683a      	ldr	r2, [r7, #0]
 801c998:	429a      	cmp	r2, r3
 801c99a:	d803      	bhi.n	801c9a4 <HAL_SPI_Receive+0x166>
 801c99c:	683b      	ldr	r3, [r7, #0]
 801c99e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c9a2:	d102      	bne.n	801c9aa <HAL_SPI_Receive+0x16c>
 801c9a4:	683b      	ldr	r3, [r7, #0]
 801c9a6:	2b00      	cmp	r3, #0
 801c9a8:	d102      	bne.n	801c9b0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 801c9aa:	2303      	movs	r3, #3
 801c9ac:	75fb      	strb	r3, [r7, #23]
          goto error;
 801c9ae:	e04a      	b.n	801ca46 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 801c9b0:	68fb      	ldr	r3, [r7, #12]
 801c9b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c9b4:	b29b      	uxth	r3, r3
 801c9b6:	2b00      	cmp	r3, #0
 801c9b8:	d1cb      	bne.n	801c952 <HAL_SPI_Receive+0x114>
 801c9ba:	e031      	b.n	801ca20 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801c9bc:	68fb      	ldr	r3, [r7, #12]
 801c9be:	681b      	ldr	r3, [r3, #0]
 801c9c0:	689b      	ldr	r3, [r3, #8]
 801c9c2:	f003 0301 	and.w	r3, r3, #1
 801c9c6:	2b01      	cmp	r3, #1
 801c9c8:	d113      	bne.n	801c9f2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801c9ca:	68fb      	ldr	r3, [r7, #12]
 801c9cc:	681b      	ldr	r3, [r3, #0]
 801c9ce:	68da      	ldr	r2, [r3, #12]
 801c9d0:	68fb      	ldr	r3, [r7, #12]
 801c9d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c9d4:	b292      	uxth	r2, r2
 801c9d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801c9d8:	68fb      	ldr	r3, [r7, #12]
 801c9da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c9dc:	1c9a      	adds	r2, r3, #2
 801c9de:	68fb      	ldr	r3, [r7, #12]
 801c9e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801c9e2:	68fb      	ldr	r3, [r7, #12]
 801c9e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c9e6:	b29b      	uxth	r3, r3
 801c9e8:	3b01      	subs	r3, #1
 801c9ea:	b29a      	uxth	r2, r3
 801c9ec:	68fb      	ldr	r3, [r7, #12]
 801c9ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c9f0:	e011      	b.n	801ca16 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c9f2:	f7fb fef9 	bl	80187e8 <HAL_GetTick>
 801c9f6:	4602      	mov	r2, r0
 801c9f8:	693b      	ldr	r3, [r7, #16]
 801c9fa:	1ad3      	subs	r3, r2, r3
 801c9fc:	683a      	ldr	r2, [r7, #0]
 801c9fe:	429a      	cmp	r2, r3
 801ca00:	d803      	bhi.n	801ca0a <HAL_SPI_Receive+0x1cc>
 801ca02:	683b      	ldr	r3, [r7, #0]
 801ca04:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ca08:	d102      	bne.n	801ca10 <HAL_SPI_Receive+0x1d2>
 801ca0a:	683b      	ldr	r3, [r7, #0]
 801ca0c:	2b00      	cmp	r3, #0
 801ca0e:	d102      	bne.n	801ca16 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 801ca10:	2303      	movs	r3, #3
 801ca12:	75fb      	strb	r3, [r7, #23]
          goto error;
 801ca14:	e017      	b.n	801ca46 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 801ca16:	68fb      	ldr	r3, [r7, #12]
 801ca18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ca1a:	b29b      	uxth	r3, r3
 801ca1c:	2b00      	cmp	r3, #0
 801ca1e:	d1cd      	bne.n	801c9bc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801ca20:	693a      	ldr	r2, [r7, #16]
 801ca22:	6839      	ldr	r1, [r7, #0]
 801ca24:	68f8      	ldr	r0, [r7, #12]
 801ca26:	f000 fb71 	bl	801d10c <SPI_EndRxTransaction>
 801ca2a:	4603      	mov	r3, r0
 801ca2c:	2b00      	cmp	r3, #0
 801ca2e:	d002      	beq.n	801ca36 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801ca30:	68fb      	ldr	r3, [r7, #12]
 801ca32:	2220      	movs	r2, #32
 801ca34:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801ca36:	68fb      	ldr	r3, [r7, #12]
 801ca38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ca3a:	2b00      	cmp	r3, #0
 801ca3c:	d002      	beq.n	801ca44 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 801ca3e:	2301      	movs	r3, #1
 801ca40:	75fb      	strb	r3, [r7, #23]
 801ca42:	e000      	b.n	801ca46 <HAL_SPI_Receive+0x208>
  }

error :
 801ca44:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801ca46:	68fb      	ldr	r3, [r7, #12]
 801ca48:	2201      	movs	r2, #1
 801ca4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801ca4e:	68fb      	ldr	r3, [r7, #12]
 801ca50:	2200      	movs	r2, #0
 801ca52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801ca56:	7dfb      	ldrb	r3, [r7, #23]
}
 801ca58:	4618      	mov	r0, r3
 801ca5a:	3718      	adds	r7, #24
 801ca5c:	46bd      	mov	sp, r7
 801ca5e:	bd80      	pop	{r7, pc}

0801ca60 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801ca60:	b580      	push	{r7, lr}
 801ca62:	b08c      	sub	sp, #48	; 0x30
 801ca64:	af00      	add	r7, sp, #0
 801ca66:	60f8      	str	r0, [r7, #12]
 801ca68:	60b9      	str	r1, [r7, #8]
 801ca6a:	607a      	str	r2, [r7, #4]
 801ca6c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801ca6e:	2301      	movs	r3, #1
 801ca70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801ca72:	2300      	movs	r3, #0
 801ca74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801ca78:	68fb      	ldr	r3, [r7, #12]
 801ca7a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801ca7e:	2b01      	cmp	r3, #1
 801ca80:	d101      	bne.n	801ca86 <HAL_SPI_TransmitReceive+0x26>
 801ca82:	2302      	movs	r3, #2
 801ca84:	e18a      	b.n	801cd9c <HAL_SPI_TransmitReceive+0x33c>
 801ca86:	68fb      	ldr	r3, [r7, #12]
 801ca88:	2201      	movs	r2, #1
 801ca8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801ca8e:	f7fb feab 	bl	80187e8 <HAL_GetTick>
 801ca92:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801ca94:	68fb      	ldr	r3, [r7, #12]
 801ca96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801ca9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 801ca9e:	68fb      	ldr	r3, [r7, #12]
 801caa0:	685b      	ldr	r3, [r3, #4]
 801caa2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 801caa4:	887b      	ldrh	r3, [r7, #2]
 801caa6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801caa8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801caac:	2b01      	cmp	r3, #1
 801caae:	d00f      	beq.n	801cad0 <HAL_SPI_TransmitReceive+0x70>
 801cab0:	69fb      	ldr	r3, [r7, #28]
 801cab2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801cab6:	d107      	bne.n	801cac8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801cab8:	68fb      	ldr	r3, [r7, #12]
 801caba:	689b      	ldr	r3, [r3, #8]
 801cabc:	2b00      	cmp	r3, #0
 801cabe:	d103      	bne.n	801cac8 <HAL_SPI_TransmitReceive+0x68>
 801cac0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801cac4:	2b04      	cmp	r3, #4
 801cac6:	d003      	beq.n	801cad0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 801cac8:	2302      	movs	r3, #2
 801caca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801cace:	e15b      	b.n	801cd88 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801cad0:	68bb      	ldr	r3, [r7, #8]
 801cad2:	2b00      	cmp	r3, #0
 801cad4:	d005      	beq.n	801cae2 <HAL_SPI_TransmitReceive+0x82>
 801cad6:	687b      	ldr	r3, [r7, #4]
 801cad8:	2b00      	cmp	r3, #0
 801cada:	d002      	beq.n	801cae2 <HAL_SPI_TransmitReceive+0x82>
 801cadc:	887b      	ldrh	r3, [r7, #2]
 801cade:	2b00      	cmp	r3, #0
 801cae0:	d103      	bne.n	801caea <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 801cae2:	2301      	movs	r3, #1
 801cae4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801cae8:	e14e      	b.n	801cd88 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801caea:	68fb      	ldr	r3, [r7, #12]
 801caec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801caf0:	b2db      	uxtb	r3, r3
 801caf2:	2b04      	cmp	r3, #4
 801caf4:	d003      	beq.n	801cafe <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801caf6:	68fb      	ldr	r3, [r7, #12]
 801caf8:	2205      	movs	r2, #5
 801cafa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801cafe:	68fb      	ldr	r3, [r7, #12]
 801cb00:	2200      	movs	r2, #0
 801cb02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801cb04:	68fb      	ldr	r3, [r7, #12]
 801cb06:	687a      	ldr	r2, [r7, #4]
 801cb08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 801cb0a:	68fb      	ldr	r3, [r7, #12]
 801cb0c:	887a      	ldrh	r2, [r7, #2]
 801cb0e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 801cb10:	68fb      	ldr	r3, [r7, #12]
 801cb12:	887a      	ldrh	r2, [r7, #2]
 801cb14:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801cb16:	68fb      	ldr	r3, [r7, #12]
 801cb18:	68ba      	ldr	r2, [r7, #8]
 801cb1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 801cb1c:	68fb      	ldr	r3, [r7, #12]
 801cb1e:	887a      	ldrh	r2, [r7, #2]
 801cb20:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 801cb22:	68fb      	ldr	r3, [r7, #12]
 801cb24:	887a      	ldrh	r2, [r7, #2]
 801cb26:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801cb28:	68fb      	ldr	r3, [r7, #12]
 801cb2a:	2200      	movs	r2, #0
 801cb2c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801cb2e:	68fb      	ldr	r3, [r7, #12]
 801cb30:	2200      	movs	r2, #0
 801cb32:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801cb34:	68fb      	ldr	r3, [r7, #12]
 801cb36:	681b      	ldr	r3, [r3, #0]
 801cb38:	681b      	ldr	r3, [r3, #0]
 801cb3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801cb3e:	2b40      	cmp	r3, #64	; 0x40
 801cb40:	d007      	beq.n	801cb52 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801cb42:	68fb      	ldr	r3, [r7, #12]
 801cb44:	681b      	ldr	r3, [r3, #0]
 801cb46:	681a      	ldr	r2, [r3, #0]
 801cb48:	68fb      	ldr	r3, [r7, #12]
 801cb4a:	681b      	ldr	r3, [r3, #0]
 801cb4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801cb50:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801cb52:	68fb      	ldr	r3, [r7, #12]
 801cb54:	68db      	ldr	r3, [r3, #12]
 801cb56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801cb5a:	d178      	bne.n	801cc4e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801cb5c:	68fb      	ldr	r3, [r7, #12]
 801cb5e:	685b      	ldr	r3, [r3, #4]
 801cb60:	2b00      	cmp	r3, #0
 801cb62:	d002      	beq.n	801cb6a <HAL_SPI_TransmitReceive+0x10a>
 801cb64:	8b7b      	ldrh	r3, [r7, #26]
 801cb66:	2b01      	cmp	r3, #1
 801cb68:	d166      	bne.n	801cc38 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801cb6a:	68fb      	ldr	r3, [r7, #12]
 801cb6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cb6e:	881a      	ldrh	r2, [r3, #0]
 801cb70:	68fb      	ldr	r3, [r7, #12]
 801cb72:	681b      	ldr	r3, [r3, #0]
 801cb74:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801cb76:	68fb      	ldr	r3, [r7, #12]
 801cb78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cb7a:	1c9a      	adds	r2, r3, #2
 801cb7c:	68fb      	ldr	r3, [r7, #12]
 801cb7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801cb80:	68fb      	ldr	r3, [r7, #12]
 801cb82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801cb84:	b29b      	uxth	r3, r3
 801cb86:	3b01      	subs	r3, #1
 801cb88:	b29a      	uxth	r2, r3
 801cb8a:	68fb      	ldr	r3, [r7, #12]
 801cb8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801cb8e:	e053      	b.n	801cc38 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801cb90:	68fb      	ldr	r3, [r7, #12]
 801cb92:	681b      	ldr	r3, [r3, #0]
 801cb94:	689b      	ldr	r3, [r3, #8]
 801cb96:	f003 0302 	and.w	r3, r3, #2
 801cb9a:	2b02      	cmp	r3, #2
 801cb9c:	d11b      	bne.n	801cbd6 <HAL_SPI_TransmitReceive+0x176>
 801cb9e:	68fb      	ldr	r3, [r7, #12]
 801cba0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801cba2:	b29b      	uxth	r3, r3
 801cba4:	2b00      	cmp	r3, #0
 801cba6:	d016      	beq.n	801cbd6 <HAL_SPI_TransmitReceive+0x176>
 801cba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cbaa:	2b01      	cmp	r3, #1
 801cbac:	d113      	bne.n	801cbd6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801cbae:	68fb      	ldr	r3, [r7, #12]
 801cbb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cbb2:	881a      	ldrh	r2, [r3, #0]
 801cbb4:	68fb      	ldr	r3, [r7, #12]
 801cbb6:	681b      	ldr	r3, [r3, #0]
 801cbb8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801cbba:	68fb      	ldr	r3, [r7, #12]
 801cbbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cbbe:	1c9a      	adds	r2, r3, #2
 801cbc0:	68fb      	ldr	r3, [r7, #12]
 801cbc2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801cbc4:	68fb      	ldr	r3, [r7, #12]
 801cbc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801cbc8:	b29b      	uxth	r3, r3
 801cbca:	3b01      	subs	r3, #1
 801cbcc:	b29a      	uxth	r2, r3
 801cbce:	68fb      	ldr	r3, [r7, #12]
 801cbd0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801cbd2:	2300      	movs	r3, #0
 801cbd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801cbd6:	68fb      	ldr	r3, [r7, #12]
 801cbd8:	681b      	ldr	r3, [r3, #0]
 801cbda:	689b      	ldr	r3, [r3, #8]
 801cbdc:	f003 0301 	and.w	r3, r3, #1
 801cbe0:	2b01      	cmp	r3, #1
 801cbe2:	d119      	bne.n	801cc18 <HAL_SPI_TransmitReceive+0x1b8>
 801cbe4:	68fb      	ldr	r3, [r7, #12]
 801cbe6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cbe8:	b29b      	uxth	r3, r3
 801cbea:	2b00      	cmp	r3, #0
 801cbec:	d014      	beq.n	801cc18 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801cbee:	68fb      	ldr	r3, [r7, #12]
 801cbf0:	681b      	ldr	r3, [r3, #0]
 801cbf2:	68da      	ldr	r2, [r3, #12]
 801cbf4:	68fb      	ldr	r3, [r7, #12]
 801cbf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cbf8:	b292      	uxth	r2, r2
 801cbfa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801cbfc:	68fb      	ldr	r3, [r7, #12]
 801cbfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cc00:	1c9a      	adds	r2, r3, #2
 801cc02:	68fb      	ldr	r3, [r7, #12]
 801cc04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801cc06:	68fb      	ldr	r3, [r7, #12]
 801cc08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cc0a:	b29b      	uxth	r3, r3
 801cc0c:	3b01      	subs	r3, #1
 801cc0e:	b29a      	uxth	r2, r3
 801cc10:	68fb      	ldr	r3, [r7, #12]
 801cc12:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801cc14:	2301      	movs	r3, #1
 801cc16:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801cc18:	f7fb fde6 	bl	80187e8 <HAL_GetTick>
 801cc1c:	4602      	mov	r2, r0
 801cc1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc20:	1ad3      	subs	r3, r2, r3
 801cc22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801cc24:	429a      	cmp	r2, r3
 801cc26:	d807      	bhi.n	801cc38 <HAL_SPI_TransmitReceive+0x1d8>
 801cc28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cc2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cc2e:	d003      	beq.n	801cc38 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 801cc30:	2303      	movs	r3, #3
 801cc32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 801cc36:	e0a7      	b.n	801cd88 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801cc38:	68fb      	ldr	r3, [r7, #12]
 801cc3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801cc3c:	b29b      	uxth	r3, r3
 801cc3e:	2b00      	cmp	r3, #0
 801cc40:	d1a6      	bne.n	801cb90 <HAL_SPI_TransmitReceive+0x130>
 801cc42:	68fb      	ldr	r3, [r7, #12]
 801cc44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cc46:	b29b      	uxth	r3, r3
 801cc48:	2b00      	cmp	r3, #0
 801cc4a:	d1a1      	bne.n	801cb90 <HAL_SPI_TransmitReceive+0x130>
 801cc4c:	e07c      	b.n	801cd48 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801cc4e:	68fb      	ldr	r3, [r7, #12]
 801cc50:	685b      	ldr	r3, [r3, #4]
 801cc52:	2b00      	cmp	r3, #0
 801cc54:	d002      	beq.n	801cc5c <HAL_SPI_TransmitReceive+0x1fc>
 801cc56:	8b7b      	ldrh	r3, [r7, #26]
 801cc58:	2b01      	cmp	r3, #1
 801cc5a:	d16b      	bne.n	801cd34 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801cc5c:	68fb      	ldr	r3, [r7, #12]
 801cc5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801cc60:	68fb      	ldr	r3, [r7, #12]
 801cc62:	681b      	ldr	r3, [r3, #0]
 801cc64:	330c      	adds	r3, #12
 801cc66:	7812      	ldrb	r2, [r2, #0]
 801cc68:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801cc6a:	68fb      	ldr	r3, [r7, #12]
 801cc6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cc6e:	1c5a      	adds	r2, r3, #1
 801cc70:	68fb      	ldr	r3, [r7, #12]
 801cc72:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801cc74:	68fb      	ldr	r3, [r7, #12]
 801cc76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801cc78:	b29b      	uxth	r3, r3
 801cc7a:	3b01      	subs	r3, #1
 801cc7c:	b29a      	uxth	r2, r3
 801cc7e:	68fb      	ldr	r3, [r7, #12]
 801cc80:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801cc82:	e057      	b.n	801cd34 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801cc84:	68fb      	ldr	r3, [r7, #12]
 801cc86:	681b      	ldr	r3, [r3, #0]
 801cc88:	689b      	ldr	r3, [r3, #8]
 801cc8a:	f003 0302 	and.w	r3, r3, #2
 801cc8e:	2b02      	cmp	r3, #2
 801cc90:	d11c      	bne.n	801cccc <HAL_SPI_TransmitReceive+0x26c>
 801cc92:	68fb      	ldr	r3, [r7, #12]
 801cc94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801cc96:	b29b      	uxth	r3, r3
 801cc98:	2b00      	cmp	r3, #0
 801cc9a:	d017      	beq.n	801cccc <HAL_SPI_TransmitReceive+0x26c>
 801cc9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cc9e:	2b01      	cmp	r3, #1
 801cca0:	d114      	bne.n	801cccc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801cca2:	68fb      	ldr	r3, [r7, #12]
 801cca4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801cca6:	68fb      	ldr	r3, [r7, #12]
 801cca8:	681b      	ldr	r3, [r3, #0]
 801ccaa:	330c      	adds	r3, #12
 801ccac:	7812      	ldrb	r2, [r2, #0]
 801ccae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801ccb0:	68fb      	ldr	r3, [r7, #12]
 801ccb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ccb4:	1c5a      	adds	r2, r3, #1
 801ccb6:	68fb      	ldr	r3, [r7, #12]
 801ccb8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801ccba:	68fb      	ldr	r3, [r7, #12]
 801ccbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801ccbe:	b29b      	uxth	r3, r3
 801ccc0:	3b01      	subs	r3, #1
 801ccc2:	b29a      	uxth	r2, r3
 801ccc4:	68fb      	ldr	r3, [r7, #12]
 801ccc6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801ccc8:	2300      	movs	r3, #0
 801ccca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801cccc:	68fb      	ldr	r3, [r7, #12]
 801ccce:	681b      	ldr	r3, [r3, #0]
 801ccd0:	689b      	ldr	r3, [r3, #8]
 801ccd2:	f003 0301 	and.w	r3, r3, #1
 801ccd6:	2b01      	cmp	r3, #1
 801ccd8:	d119      	bne.n	801cd0e <HAL_SPI_TransmitReceive+0x2ae>
 801ccda:	68fb      	ldr	r3, [r7, #12]
 801ccdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ccde:	b29b      	uxth	r3, r3
 801cce0:	2b00      	cmp	r3, #0
 801cce2:	d014      	beq.n	801cd0e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 801cce4:	68fb      	ldr	r3, [r7, #12]
 801cce6:	681b      	ldr	r3, [r3, #0]
 801cce8:	68da      	ldr	r2, [r3, #12]
 801ccea:	68fb      	ldr	r3, [r7, #12]
 801ccec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ccee:	b2d2      	uxtb	r2, r2
 801ccf0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 801ccf2:	68fb      	ldr	r3, [r7, #12]
 801ccf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ccf6:	1c5a      	adds	r2, r3, #1
 801ccf8:	68fb      	ldr	r3, [r7, #12]
 801ccfa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801ccfc:	68fb      	ldr	r3, [r7, #12]
 801ccfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cd00:	b29b      	uxth	r3, r3
 801cd02:	3b01      	subs	r3, #1
 801cd04:	b29a      	uxth	r2, r3
 801cd06:	68fb      	ldr	r3, [r7, #12]
 801cd08:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801cd0a:	2301      	movs	r3, #1
 801cd0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801cd0e:	f7fb fd6b 	bl	80187e8 <HAL_GetTick>
 801cd12:	4602      	mov	r2, r0
 801cd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd16:	1ad3      	subs	r3, r2, r3
 801cd18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801cd1a:	429a      	cmp	r2, r3
 801cd1c:	d803      	bhi.n	801cd26 <HAL_SPI_TransmitReceive+0x2c6>
 801cd1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cd20:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cd24:	d102      	bne.n	801cd2c <HAL_SPI_TransmitReceive+0x2cc>
 801cd26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cd28:	2b00      	cmp	r3, #0
 801cd2a:	d103      	bne.n	801cd34 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 801cd2c:	2303      	movs	r3, #3
 801cd2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 801cd32:	e029      	b.n	801cd88 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801cd34:	68fb      	ldr	r3, [r7, #12]
 801cd36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801cd38:	b29b      	uxth	r3, r3
 801cd3a:	2b00      	cmp	r3, #0
 801cd3c:	d1a2      	bne.n	801cc84 <HAL_SPI_TransmitReceive+0x224>
 801cd3e:	68fb      	ldr	r3, [r7, #12]
 801cd40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cd42:	b29b      	uxth	r3, r3
 801cd44:	2b00      	cmp	r3, #0
 801cd46:	d19d      	bne.n	801cc84 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801cd48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cd4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801cd4c:	68f8      	ldr	r0, [r7, #12]
 801cd4e:	f000 fa43 	bl	801d1d8 <SPI_EndRxTxTransaction>
 801cd52:	4603      	mov	r3, r0
 801cd54:	2b00      	cmp	r3, #0
 801cd56:	d006      	beq.n	801cd66 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 801cd58:	2301      	movs	r3, #1
 801cd5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801cd5e:	68fb      	ldr	r3, [r7, #12]
 801cd60:	2220      	movs	r2, #32
 801cd62:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 801cd64:	e010      	b.n	801cd88 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801cd66:	68fb      	ldr	r3, [r7, #12]
 801cd68:	689b      	ldr	r3, [r3, #8]
 801cd6a:	2b00      	cmp	r3, #0
 801cd6c:	d10b      	bne.n	801cd86 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801cd6e:	2300      	movs	r3, #0
 801cd70:	617b      	str	r3, [r7, #20]
 801cd72:	68fb      	ldr	r3, [r7, #12]
 801cd74:	681b      	ldr	r3, [r3, #0]
 801cd76:	68db      	ldr	r3, [r3, #12]
 801cd78:	617b      	str	r3, [r7, #20]
 801cd7a:	68fb      	ldr	r3, [r7, #12]
 801cd7c:	681b      	ldr	r3, [r3, #0]
 801cd7e:	689b      	ldr	r3, [r3, #8]
 801cd80:	617b      	str	r3, [r7, #20]
 801cd82:	697b      	ldr	r3, [r7, #20]
 801cd84:	e000      	b.n	801cd88 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 801cd86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801cd88:	68fb      	ldr	r3, [r7, #12]
 801cd8a:	2201      	movs	r2, #1
 801cd8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801cd90:	68fb      	ldr	r3, [r7, #12]
 801cd92:	2200      	movs	r2, #0
 801cd94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801cd98:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 801cd9c:	4618      	mov	r0, r3
 801cd9e:	3730      	adds	r7, #48	; 0x30
 801cda0:	46bd      	mov	sp, r7
 801cda2:	bd80      	pop	{r7, pc}

0801cda4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801cda4:	b580      	push	{r7, lr}
 801cda6:	b088      	sub	sp, #32
 801cda8:	af00      	add	r7, sp, #0
 801cdaa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 801cdac:	687b      	ldr	r3, [r7, #4]
 801cdae:	681b      	ldr	r3, [r3, #0]
 801cdb0:	685b      	ldr	r3, [r3, #4]
 801cdb2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 801cdb4:	687b      	ldr	r3, [r7, #4]
 801cdb6:	681b      	ldr	r3, [r3, #0]
 801cdb8:	689b      	ldr	r3, [r3, #8]
 801cdba:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 801cdbc:	69bb      	ldr	r3, [r7, #24]
 801cdbe:	099b      	lsrs	r3, r3, #6
 801cdc0:	f003 0301 	and.w	r3, r3, #1
 801cdc4:	2b00      	cmp	r3, #0
 801cdc6:	d10f      	bne.n	801cde8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801cdc8:	69bb      	ldr	r3, [r7, #24]
 801cdca:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 801cdce:	2b00      	cmp	r3, #0
 801cdd0:	d00a      	beq.n	801cde8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801cdd2:	69fb      	ldr	r3, [r7, #28]
 801cdd4:	099b      	lsrs	r3, r3, #6
 801cdd6:	f003 0301 	and.w	r3, r3, #1
 801cdda:	2b00      	cmp	r3, #0
 801cddc:	d004      	beq.n	801cde8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 801cdde:	687b      	ldr	r3, [r7, #4]
 801cde0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cde2:	6878      	ldr	r0, [r7, #4]
 801cde4:	4798      	blx	r3
    return;
 801cde6:	e0d7      	b.n	801cf98 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 801cde8:	69bb      	ldr	r3, [r7, #24]
 801cdea:	085b      	lsrs	r3, r3, #1
 801cdec:	f003 0301 	and.w	r3, r3, #1
 801cdf0:	2b00      	cmp	r3, #0
 801cdf2:	d00a      	beq.n	801ce0a <HAL_SPI_IRQHandler+0x66>
 801cdf4:	69fb      	ldr	r3, [r7, #28]
 801cdf6:	09db      	lsrs	r3, r3, #7
 801cdf8:	f003 0301 	and.w	r3, r3, #1
 801cdfc:	2b00      	cmp	r3, #0
 801cdfe:	d004      	beq.n	801ce0a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 801ce00:	687b      	ldr	r3, [r7, #4]
 801ce02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ce04:	6878      	ldr	r0, [r7, #4]
 801ce06:	4798      	blx	r3
    return;
 801ce08:	e0c6      	b.n	801cf98 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801ce0a:	69bb      	ldr	r3, [r7, #24]
 801ce0c:	095b      	lsrs	r3, r3, #5
 801ce0e:	f003 0301 	and.w	r3, r3, #1
 801ce12:	2b00      	cmp	r3, #0
 801ce14:	d10c      	bne.n	801ce30 <HAL_SPI_IRQHandler+0x8c>
 801ce16:	69bb      	ldr	r3, [r7, #24]
 801ce18:	099b      	lsrs	r3, r3, #6
 801ce1a:	f003 0301 	and.w	r3, r3, #1
 801ce1e:	2b00      	cmp	r3, #0
 801ce20:	d106      	bne.n	801ce30 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 801ce22:	69bb      	ldr	r3, [r7, #24]
 801ce24:	0a1b      	lsrs	r3, r3, #8
 801ce26:	f003 0301 	and.w	r3, r3, #1
 801ce2a:	2b00      	cmp	r3, #0
 801ce2c:	f000 80b4 	beq.w	801cf98 <HAL_SPI_IRQHandler+0x1f4>
 801ce30:	69fb      	ldr	r3, [r7, #28]
 801ce32:	095b      	lsrs	r3, r3, #5
 801ce34:	f003 0301 	and.w	r3, r3, #1
 801ce38:	2b00      	cmp	r3, #0
 801ce3a:	f000 80ad 	beq.w	801cf98 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801ce3e:	69bb      	ldr	r3, [r7, #24]
 801ce40:	099b      	lsrs	r3, r3, #6
 801ce42:	f003 0301 	and.w	r3, r3, #1
 801ce46:	2b00      	cmp	r3, #0
 801ce48:	d023      	beq.n	801ce92 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801ce4a:	687b      	ldr	r3, [r7, #4]
 801ce4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801ce50:	b2db      	uxtb	r3, r3
 801ce52:	2b03      	cmp	r3, #3
 801ce54:	d011      	beq.n	801ce7a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801ce56:	687b      	ldr	r3, [r7, #4]
 801ce58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ce5a:	f043 0204 	orr.w	r2, r3, #4
 801ce5e:	687b      	ldr	r3, [r7, #4]
 801ce60:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801ce62:	2300      	movs	r3, #0
 801ce64:	617b      	str	r3, [r7, #20]
 801ce66:	687b      	ldr	r3, [r7, #4]
 801ce68:	681b      	ldr	r3, [r3, #0]
 801ce6a:	68db      	ldr	r3, [r3, #12]
 801ce6c:	617b      	str	r3, [r7, #20]
 801ce6e:	687b      	ldr	r3, [r7, #4]
 801ce70:	681b      	ldr	r3, [r3, #0]
 801ce72:	689b      	ldr	r3, [r3, #8]
 801ce74:	617b      	str	r3, [r7, #20]
 801ce76:	697b      	ldr	r3, [r7, #20]
 801ce78:	e00b      	b.n	801ce92 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801ce7a:	2300      	movs	r3, #0
 801ce7c:	613b      	str	r3, [r7, #16]
 801ce7e:	687b      	ldr	r3, [r7, #4]
 801ce80:	681b      	ldr	r3, [r3, #0]
 801ce82:	68db      	ldr	r3, [r3, #12]
 801ce84:	613b      	str	r3, [r7, #16]
 801ce86:	687b      	ldr	r3, [r7, #4]
 801ce88:	681b      	ldr	r3, [r3, #0]
 801ce8a:	689b      	ldr	r3, [r3, #8]
 801ce8c:	613b      	str	r3, [r7, #16]
 801ce8e:	693b      	ldr	r3, [r7, #16]
        return;
 801ce90:	e082      	b.n	801cf98 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 801ce92:	69bb      	ldr	r3, [r7, #24]
 801ce94:	095b      	lsrs	r3, r3, #5
 801ce96:	f003 0301 	and.w	r3, r3, #1
 801ce9a:	2b00      	cmp	r3, #0
 801ce9c:	d014      	beq.n	801cec8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801ce9e:	687b      	ldr	r3, [r7, #4]
 801cea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cea2:	f043 0201 	orr.w	r2, r3, #1
 801cea6:	687b      	ldr	r3, [r7, #4]
 801cea8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801ceaa:	2300      	movs	r3, #0
 801ceac:	60fb      	str	r3, [r7, #12]
 801ceae:	687b      	ldr	r3, [r7, #4]
 801ceb0:	681b      	ldr	r3, [r3, #0]
 801ceb2:	689b      	ldr	r3, [r3, #8]
 801ceb4:	60fb      	str	r3, [r7, #12]
 801ceb6:	687b      	ldr	r3, [r7, #4]
 801ceb8:	681b      	ldr	r3, [r3, #0]
 801ceba:	681a      	ldr	r2, [r3, #0]
 801cebc:	687b      	ldr	r3, [r7, #4]
 801cebe:	681b      	ldr	r3, [r3, #0]
 801cec0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801cec4:	601a      	str	r2, [r3, #0]
 801cec6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 801cec8:	69bb      	ldr	r3, [r7, #24]
 801ceca:	0a1b      	lsrs	r3, r3, #8
 801cecc:	f003 0301 	and.w	r3, r3, #1
 801ced0:	2b00      	cmp	r3, #0
 801ced2:	d00c      	beq.n	801ceee <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801ced4:	687b      	ldr	r3, [r7, #4]
 801ced6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ced8:	f043 0208 	orr.w	r2, r3, #8
 801cedc:	687b      	ldr	r3, [r7, #4]
 801cede:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 801cee0:	2300      	movs	r3, #0
 801cee2:	60bb      	str	r3, [r7, #8]
 801cee4:	687b      	ldr	r3, [r7, #4]
 801cee6:	681b      	ldr	r3, [r3, #0]
 801cee8:	689b      	ldr	r3, [r3, #8]
 801ceea:	60bb      	str	r3, [r7, #8]
 801ceec:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801ceee:	687b      	ldr	r3, [r7, #4]
 801cef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cef2:	2b00      	cmp	r3, #0
 801cef4:	d04f      	beq.n	801cf96 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 801cef6:	687b      	ldr	r3, [r7, #4]
 801cef8:	681b      	ldr	r3, [r3, #0]
 801cefa:	685a      	ldr	r2, [r3, #4]
 801cefc:	687b      	ldr	r3, [r7, #4]
 801cefe:	681b      	ldr	r3, [r3, #0]
 801cf00:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801cf04:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 801cf06:	687b      	ldr	r3, [r7, #4]
 801cf08:	2201      	movs	r2, #1
 801cf0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 801cf0e:	69fb      	ldr	r3, [r7, #28]
 801cf10:	f003 0302 	and.w	r3, r3, #2
 801cf14:	2b00      	cmp	r3, #0
 801cf16:	d104      	bne.n	801cf22 <HAL_SPI_IRQHandler+0x17e>
 801cf18:	69fb      	ldr	r3, [r7, #28]
 801cf1a:	f003 0301 	and.w	r3, r3, #1
 801cf1e:	2b00      	cmp	r3, #0
 801cf20:	d034      	beq.n	801cf8c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 801cf22:	687b      	ldr	r3, [r7, #4]
 801cf24:	681b      	ldr	r3, [r3, #0]
 801cf26:	685a      	ldr	r2, [r3, #4]
 801cf28:	687b      	ldr	r3, [r7, #4]
 801cf2a:	681b      	ldr	r3, [r3, #0]
 801cf2c:	f022 0203 	bic.w	r2, r2, #3
 801cf30:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801cf32:	687b      	ldr	r3, [r7, #4]
 801cf34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cf36:	2b00      	cmp	r3, #0
 801cf38:	d011      	beq.n	801cf5e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801cf3a:	687b      	ldr	r3, [r7, #4]
 801cf3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cf3e:	4a18      	ldr	r2, [pc, #96]	; (801cfa0 <HAL_SPI_IRQHandler+0x1fc>)
 801cf40:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801cf42:	687b      	ldr	r3, [r7, #4]
 801cf44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cf46:	4618      	mov	r0, r3
 801cf48:	f7fc f946 	bl	80191d8 <HAL_DMA_Abort_IT>
 801cf4c:	4603      	mov	r3, r0
 801cf4e:	2b00      	cmp	r3, #0
 801cf50:	d005      	beq.n	801cf5e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801cf52:	687b      	ldr	r3, [r7, #4]
 801cf54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cf56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801cf5a:	687b      	ldr	r3, [r7, #4]
 801cf5c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801cf5e:	687b      	ldr	r3, [r7, #4]
 801cf60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cf62:	2b00      	cmp	r3, #0
 801cf64:	d016      	beq.n	801cf94 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801cf66:	687b      	ldr	r3, [r7, #4]
 801cf68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cf6a:	4a0d      	ldr	r2, [pc, #52]	; (801cfa0 <HAL_SPI_IRQHandler+0x1fc>)
 801cf6c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801cf6e:	687b      	ldr	r3, [r7, #4]
 801cf70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cf72:	4618      	mov	r0, r3
 801cf74:	f7fc f930 	bl	80191d8 <HAL_DMA_Abort_IT>
 801cf78:	4603      	mov	r3, r0
 801cf7a:	2b00      	cmp	r3, #0
 801cf7c:	d00a      	beq.n	801cf94 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801cf7e:	687b      	ldr	r3, [r7, #4]
 801cf80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cf82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801cf86:	687b      	ldr	r3, [r7, #4]
 801cf88:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 801cf8a:	e003      	b.n	801cf94 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 801cf8c:	6878      	ldr	r0, [r7, #4]
 801cf8e:	f000 f809 	bl	801cfa4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801cf92:	e000      	b.n	801cf96 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 801cf94:	bf00      	nop
    return;
 801cf96:	bf00      	nop
  }
}
 801cf98:	3720      	adds	r7, #32
 801cf9a:	46bd      	mov	sp, r7
 801cf9c:	bd80      	pop	{r7, pc}
 801cf9e:	bf00      	nop
 801cfa0:	0801cfd5 	.word	0x0801cfd5

0801cfa4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 801cfa4:	b480      	push	{r7}
 801cfa6:	b083      	sub	sp, #12
 801cfa8:	af00      	add	r7, sp, #0
 801cfaa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 801cfac:	bf00      	nop
 801cfae:	370c      	adds	r7, #12
 801cfb0:	46bd      	mov	sp, r7
 801cfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfb6:	4770      	bx	lr

0801cfb8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 801cfb8:	b480      	push	{r7}
 801cfba:	b083      	sub	sp, #12
 801cfbc:	af00      	add	r7, sp, #0
 801cfbe:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 801cfc0:	687b      	ldr	r3, [r7, #4]
 801cfc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801cfc6:	b2db      	uxtb	r3, r3
}
 801cfc8:	4618      	mov	r0, r3
 801cfca:	370c      	adds	r7, #12
 801cfcc:	46bd      	mov	sp, r7
 801cfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfd2:	4770      	bx	lr

0801cfd4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801cfd4:	b580      	push	{r7, lr}
 801cfd6:	b084      	sub	sp, #16
 801cfd8:	af00      	add	r7, sp, #0
 801cfda:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801cfdc:	687b      	ldr	r3, [r7, #4]
 801cfde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cfe0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 801cfe2:	68fb      	ldr	r3, [r7, #12]
 801cfe4:	2200      	movs	r2, #0
 801cfe6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 801cfe8:	68fb      	ldr	r3, [r7, #12]
 801cfea:	2200      	movs	r2, #0
 801cfec:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801cfee:	68f8      	ldr	r0, [r7, #12]
 801cff0:	f7ff ffd8 	bl	801cfa4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801cff4:	bf00      	nop
 801cff6:	3710      	adds	r7, #16
 801cff8:	46bd      	mov	sp, r7
 801cffa:	bd80      	pop	{r7, pc}

0801cffc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801cffc:	b580      	push	{r7, lr}
 801cffe:	b088      	sub	sp, #32
 801d000:	af00      	add	r7, sp, #0
 801d002:	60f8      	str	r0, [r7, #12]
 801d004:	60b9      	str	r1, [r7, #8]
 801d006:	603b      	str	r3, [r7, #0]
 801d008:	4613      	mov	r3, r2
 801d00a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801d00c:	f7fb fbec 	bl	80187e8 <HAL_GetTick>
 801d010:	4602      	mov	r2, r0
 801d012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d014:	1a9b      	subs	r3, r3, r2
 801d016:	683a      	ldr	r2, [r7, #0]
 801d018:	4413      	add	r3, r2
 801d01a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801d01c:	f7fb fbe4 	bl	80187e8 <HAL_GetTick>
 801d020:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801d022:	4b39      	ldr	r3, [pc, #228]	; (801d108 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801d024:	681b      	ldr	r3, [r3, #0]
 801d026:	015b      	lsls	r3, r3, #5
 801d028:	0d1b      	lsrs	r3, r3, #20
 801d02a:	69fa      	ldr	r2, [r7, #28]
 801d02c:	fb02 f303 	mul.w	r3, r2, r3
 801d030:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801d032:	e054      	b.n	801d0de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801d034:	683b      	ldr	r3, [r7, #0]
 801d036:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d03a:	d050      	beq.n	801d0de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801d03c:	f7fb fbd4 	bl	80187e8 <HAL_GetTick>
 801d040:	4602      	mov	r2, r0
 801d042:	69bb      	ldr	r3, [r7, #24]
 801d044:	1ad3      	subs	r3, r2, r3
 801d046:	69fa      	ldr	r2, [r7, #28]
 801d048:	429a      	cmp	r2, r3
 801d04a:	d902      	bls.n	801d052 <SPI_WaitFlagStateUntilTimeout+0x56>
 801d04c:	69fb      	ldr	r3, [r7, #28]
 801d04e:	2b00      	cmp	r3, #0
 801d050:	d13d      	bne.n	801d0ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801d052:	68fb      	ldr	r3, [r7, #12]
 801d054:	681b      	ldr	r3, [r3, #0]
 801d056:	685a      	ldr	r2, [r3, #4]
 801d058:	68fb      	ldr	r3, [r7, #12]
 801d05a:	681b      	ldr	r3, [r3, #0]
 801d05c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801d060:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801d062:	68fb      	ldr	r3, [r7, #12]
 801d064:	685b      	ldr	r3, [r3, #4]
 801d066:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801d06a:	d111      	bne.n	801d090 <SPI_WaitFlagStateUntilTimeout+0x94>
 801d06c:	68fb      	ldr	r3, [r7, #12]
 801d06e:	689b      	ldr	r3, [r3, #8]
 801d070:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801d074:	d004      	beq.n	801d080 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801d076:	68fb      	ldr	r3, [r7, #12]
 801d078:	689b      	ldr	r3, [r3, #8]
 801d07a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801d07e:	d107      	bne.n	801d090 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801d080:	68fb      	ldr	r3, [r7, #12]
 801d082:	681b      	ldr	r3, [r3, #0]
 801d084:	681a      	ldr	r2, [r3, #0]
 801d086:	68fb      	ldr	r3, [r7, #12]
 801d088:	681b      	ldr	r3, [r3, #0]
 801d08a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801d08e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801d090:	68fb      	ldr	r3, [r7, #12]
 801d092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d094:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d098:	d10f      	bne.n	801d0ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801d09a:	68fb      	ldr	r3, [r7, #12]
 801d09c:	681b      	ldr	r3, [r3, #0]
 801d09e:	681a      	ldr	r2, [r3, #0]
 801d0a0:	68fb      	ldr	r3, [r7, #12]
 801d0a2:	681b      	ldr	r3, [r3, #0]
 801d0a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801d0a8:	601a      	str	r2, [r3, #0]
 801d0aa:	68fb      	ldr	r3, [r7, #12]
 801d0ac:	681b      	ldr	r3, [r3, #0]
 801d0ae:	681a      	ldr	r2, [r3, #0]
 801d0b0:	68fb      	ldr	r3, [r7, #12]
 801d0b2:	681b      	ldr	r3, [r3, #0]
 801d0b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801d0b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801d0ba:	68fb      	ldr	r3, [r7, #12]
 801d0bc:	2201      	movs	r2, #1
 801d0be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801d0c2:	68fb      	ldr	r3, [r7, #12]
 801d0c4:	2200      	movs	r2, #0
 801d0c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 801d0ca:	2303      	movs	r3, #3
 801d0cc:	e017      	b.n	801d0fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 801d0ce:	697b      	ldr	r3, [r7, #20]
 801d0d0:	2b00      	cmp	r3, #0
 801d0d2:	d101      	bne.n	801d0d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801d0d4:	2300      	movs	r3, #0
 801d0d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801d0d8:	697b      	ldr	r3, [r7, #20]
 801d0da:	3b01      	subs	r3, #1
 801d0dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801d0de:	68fb      	ldr	r3, [r7, #12]
 801d0e0:	681b      	ldr	r3, [r3, #0]
 801d0e2:	689a      	ldr	r2, [r3, #8]
 801d0e4:	68bb      	ldr	r3, [r7, #8]
 801d0e6:	4013      	ands	r3, r2
 801d0e8:	68ba      	ldr	r2, [r7, #8]
 801d0ea:	429a      	cmp	r2, r3
 801d0ec:	bf0c      	ite	eq
 801d0ee:	2301      	moveq	r3, #1
 801d0f0:	2300      	movne	r3, #0
 801d0f2:	b2db      	uxtb	r3, r3
 801d0f4:	461a      	mov	r2, r3
 801d0f6:	79fb      	ldrb	r3, [r7, #7]
 801d0f8:	429a      	cmp	r2, r3
 801d0fa:	d19b      	bne.n	801d034 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801d0fc:	2300      	movs	r3, #0
}
 801d0fe:	4618      	mov	r0, r3
 801d100:	3720      	adds	r7, #32
 801d102:	46bd      	mov	sp, r7
 801d104:	bd80      	pop	{r7, pc}
 801d106:	bf00      	nop
 801d108:	20000588 	.word	0x20000588

0801d10c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801d10c:	b580      	push	{r7, lr}
 801d10e:	b086      	sub	sp, #24
 801d110:	af02      	add	r7, sp, #8
 801d112:	60f8      	str	r0, [r7, #12]
 801d114:	60b9      	str	r1, [r7, #8]
 801d116:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801d118:	68fb      	ldr	r3, [r7, #12]
 801d11a:	685b      	ldr	r3, [r3, #4]
 801d11c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801d120:	d111      	bne.n	801d146 <SPI_EndRxTransaction+0x3a>
 801d122:	68fb      	ldr	r3, [r7, #12]
 801d124:	689b      	ldr	r3, [r3, #8]
 801d126:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801d12a:	d004      	beq.n	801d136 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801d12c:	68fb      	ldr	r3, [r7, #12]
 801d12e:	689b      	ldr	r3, [r3, #8]
 801d130:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801d134:	d107      	bne.n	801d146 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801d136:	68fb      	ldr	r3, [r7, #12]
 801d138:	681b      	ldr	r3, [r3, #0]
 801d13a:	681a      	ldr	r2, [r3, #0]
 801d13c:	68fb      	ldr	r3, [r7, #12]
 801d13e:	681b      	ldr	r3, [r3, #0]
 801d140:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801d144:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801d146:	68fb      	ldr	r3, [r7, #12]
 801d148:	685b      	ldr	r3, [r3, #4]
 801d14a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801d14e:	d12a      	bne.n	801d1a6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 801d150:	68fb      	ldr	r3, [r7, #12]
 801d152:	689b      	ldr	r3, [r3, #8]
 801d154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801d158:	d012      	beq.n	801d180 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801d15a:	687b      	ldr	r3, [r7, #4]
 801d15c:	9300      	str	r3, [sp, #0]
 801d15e:	68bb      	ldr	r3, [r7, #8]
 801d160:	2200      	movs	r2, #0
 801d162:	2180      	movs	r1, #128	; 0x80
 801d164:	68f8      	ldr	r0, [r7, #12]
 801d166:	f7ff ff49 	bl	801cffc <SPI_WaitFlagStateUntilTimeout>
 801d16a:	4603      	mov	r3, r0
 801d16c:	2b00      	cmp	r3, #0
 801d16e:	d02d      	beq.n	801d1cc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801d170:	68fb      	ldr	r3, [r7, #12]
 801d172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d174:	f043 0220 	orr.w	r2, r3, #32
 801d178:	68fb      	ldr	r3, [r7, #12]
 801d17a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801d17c:	2303      	movs	r3, #3
 801d17e:	e026      	b.n	801d1ce <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801d180:	687b      	ldr	r3, [r7, #4]
 801d182:	9300      	str	r3, [sp, #0]
 801d184:	68bb      	ldr	r3, [r7, #8]
 801d186:	2200      	movs	r2, #0
 801d188:	2101      	movs	r1, #1
 801d18a:	68f8      	ldr	r0, [r7, #12]
 801d18c:	f7ff ff36 	bl	801cffc <SPI_WaitFlagStateUntilTimeout>
 801d190:	4603      	mov	r3, r0
 801d192:	2b00      	cmp	r3, #0
 801d194:	d01a      	beq.n	801d1cc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801d196:	68fb      	ldr	r3, [r7, #12]
 801d198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d19a:	f043 0220 	orr.w	r2, r3, #32
 801d19e:	68fb      	ldr	r3, [r7, #12]
 801d1a0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801d1a2:	2303      	movs	r3, #3
 801d1a4:	e013      	b.n	801d1ce <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801d1a6:	687b      	ldr	r3, [r7, #4]
 801d1a8:	9300      	str	r3, [sp, #0]
 801d1aa:	68bb      	ldr	r3, [r7, #8]
 801d1ac:	2200      	movs	r2, #0
 801d1ae:	2101      	movs	r1, #1
 801d1b0:	68f8      	ldr	r0, [r7, #12]
 801d1b2:	f7ff ff23 	bl	801cffc <SPI_WaitFlagStateUntilTimeout>
 801d1b6:	4603      	mov	r3, r0
 801d1b8:	2b00      	cmp	r3, #0
 801d1ba:	d007      	beq.n	801d1cc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801d1bc:	68fb      	ldr	r3, [r7, #12]
 801d1be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d1c0:	f043 0220 	orr.w	r2, r3, #32
 801d1c4:	68fb      	ldr	r3, [r7, #12]
 801d1c6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801d1c8:	2303      	movs	r3, #3
 801d1ca:	e000      	b.n	801d1ce <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 801d1cc:	2300      	movs	r3, #0
}
 801d1ce:	4618      	mov	r0, r3
 801d1d0:	3710      	adds	r7, #16
 801d1d2:	46bd      	mov	sp, r7
 801d1d4:	bd80      	pop	{r7, pc}
	...

0801d1d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801d1d8:	b580      	push	{r7, lr}
 801d1da:	b088      	sub	sp, #32
 801d1dc:	af02      	add	r7, sp, #8
 801d1de:	60f8      	str	r0, [r7, #12]
 801d1e0:	60b9      	str	r1, [r7, #8]
 801d1e2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801d1e4:	4b1b      	ldr	r3, [pc, #108]	; (801d254 <SPI_EndRxTxTransaction+0x7c>)
 801d1e6:	681b      	ldr	r3, [r3, #0]
 801d1e8:	4a1b      	ldr	r2, [pc, #108]	; (801d258 <SPI_EndRxTxTransaction+0x80>)
 801d1ea:	fba2 2303 	umull	r2, r3, r2, r3
 801d1ee:	0d5b      	lsrs	r3, r3, #21
 801d1f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d1f4:	fb02 f303 	mul.w	r3, r2, r3
 801d1f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801d1fa:	68fb      	ldr	r3, [r7, #12]
 801d1fc:	685b      	ldr	r3, [r3, #4]
 801d1fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801d202:	d112      	bne.n	801d22a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801d204:	687b      	ldr	r3, [r7, #4]
 801d206:	9300      	str	r3, [sp, #0]
 801d208:	68bb      	ldr	r3, [r7, #8]
 801d20a:	2200      	movs	r2, #0
 801d20c:	2180      	movs	r1, #128	; 0x80
 801d20e:	68f8      	ldr	r0, [r7, #12]
 801d210:	f7ff fef4 	bl	801cffc <SPI_WaitFlagStateUntilTimeout>
 801d214:	4603      	mov	r3, r0
 801d216:	2b00      	cmp	r3, #0
 801d218:	d016      	beq.n	801d248 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801d21a:	68fb      	ldr	r3, [r7, #12]
 801d21c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d21e:	f043 0220 	orr.w	r2, r3, #32
 801d222:	68fb      	ldr	r3, [r7, #12]
 801d224:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801d226:	2303      	movs	r3, #3
 801d228:	e00f      	b.n	801d24a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801d22a:	697b      	ldr	r3, [r7, #20]
 801d22c:	2b00      	cmp	r3, #0
 801d22e:	d00a      	beq.n	801d246 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 801d230:	697b      	ldr	r3, [r7, #20]
 801d232:	3b01      	subs	r3, #1
 801d234:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801d236:	68fb      	ldr	r3, [r7, #12]
 801d238:	681b      	ldr	r3, [r3, #0]
 801d23a:	689b      	ldr	r3, [r3, #8]
 801d23c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d240:	2b80      	cmp	r3, #128	; 0x80
 801d242:	d0f2      	beq.n	801d22a <SPI_EndRxTxTransaction+0x52>
 801d244:	e000      	b.n	801d248 <SPI_EndRxTxTransaction+0x70>
        break;
 801d246:	bf00      	nop
  }

  return HAL_OK;
 801d248:	2300      	movs	r3, #0
}
 801d24a:	4618      	mov	r0, r3
 801d24c:	3718      	adds	r7, #24
 801d24e:	46bd      	mov	sp, r7
 801d250:	bd80      	pop	{r7, pc}
 801d252:	bf00      	nop
 801d254:	20000588 	.word	0x20000588
 801d258:	165e9f81 	.word	0x165e9f81

0801d25c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801d25c:	b580      	push	{r7, lr}
 801d25e:	b082      	sub	sp, #8
 801d260:	af00      	add	r7, sp, #0
 801d262:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801d264:	687b      	ldr	r3, [r7, #4]
 801d266:	2b00      	cmp	r3, #0
 801d268:	d101      	bne.n	801d26e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801d26a:	2301      	movs	r3, #1
 801d26c:	e041      	b.n	801d2f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801d26e:	687b      	ldr	r3, [r7, #4]
 801d270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d274:	b2db      	uxtb	r3, r3
 801d276:	2b00      	cmp	r3, #0
 801d278:	d106      	bne.n	801d288 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801d27a:	687b      	ldr	r3, [r7, #4]
 801d27c:	2200      	movs	r2, #0
 801d27e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801d282:	6878      	ldr	r0, [r7, #4]
 801d284:	f7fb f908 	bl	8018498 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801d288:	687b      	ldr	r3, [r7, #4]
 801d28a:	2202      	movs	r2, #2
 801d28c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801d290:	687b      	ldr	r3, [r7, #4]
 801d292:	681a      	ldr	r2, [r3, #0]
 801d294:	687b      	ldr	r3, [r7, #4]
 801d296:	3304      	adds	r3, #4
 801d298:	4619      	mov	r1, r3
 801d29a:	4610      	mov	r0, r2
 801d29c:	f000 faf2 	bl	801d884 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801d2a0:	687b      	ldr	r3, [r7, #4]
 801d2a2:	2201      	movs	r2, #1
 801d2a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801d2a8:	687b      	ldr	r3, [r7, #4]
 801d2aa:	2201      	movs	r2, #1
 801d2ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801d2b0:	687b      	ldr	r3, [r7, #4]
 801d2b2:	2201      	movs	r2, #1
 801d2b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801d2b8:	687b      	ldr	r3, [r7, #4]
 801d2ba:	2201      	movs	r2, #1
 801d2bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801d2c0:	687b      	ldr	r3, [r7, #4]
 801d2c2:	2201      	movs	r2, #1
 801d2c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801d2c8:	687b      	ldr	r3, [r7, #4]
 801d2ca:	2201      	movs	r2, #1
 801d2cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801d2d0:	687b      	ldr	r3, [r7, #4]
 801d2d2:	2201      	movs	r2, #1
 801d2d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801d2d8:	687b      	ldr	r3, [r7, #4]
 801d2da:	2201      	movs	r2, #1
 801d2dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801d2e0:	687b      	ldr	r3, [r7, #4]
 801d2e2:	2201      	movs	r2, #1
 801d2e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801d2e8:	687b      	ldr	r3, [r7, #4]
 801d2ea:	2201      	movs	r2, #1
 801d2ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801d2f0:	2300      	movs	r3, #0
}
 801d2f2:	4618      	mov	r0, r3
 801d2f4:	3708      	adds	r7, #8
 801d2f6:	46bd      	mov	sp, r7
 801d2f8:	bd80      	pop	{r7, pc}
	...

0801d2fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801d2fc:	b480      	push	{r7}
 801d2fe:	b085      	sub	sp, #20
 801d300:	af00      	add	r7, sp, #0
 801d302:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801d304:	687b      	ldr	r3, [r7, #4]
 801d306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d30a:	b2db      	uxtb	r3, r3
 801d30c:	2b01      	cmp	r3, #1
 801d30e:	d001      	beq.n	801d314 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801d310:	2301      	movs	r3, #1
 801d312:	e04e      	b.n	801d3b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801d314:	687b      	ldr	r3, [r7, #4]
 801d316:	2202      	movs	r2, #2
 801d318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801d31c:	687b      	ldr	r3, [r7, #4]
 801d31e:	681b      	ldr	r3, [r3, #0]
 801d320:	68da      	ldr	r2, [r3, #12]
 801d322:	687b      	ldr	r3, [r7, #4]
 801d324:	681b      	ldr	r3, [r3, #0]
 801d326:	f042 0201 	orr.w	r2, r2, #1
 801d32a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801d32c:	687b      	ldr	r3, [r7, #4]
 801d32e:	681b      	ldr	r3, [r3, #0]
 801d330:	4a23      	ldr	r2, [pc, #140]	; (801d3c0 <HAL_TIM_Base_Start_IT+0xc4>)
 801d332:	4293      	cmp	r3, r2
 801d334:	d022      	beq.n	801d37c <HAL_TIM_Base_Start_IT+0x80>
 801d336:	687b      	ldr	r3, [r7, #4]
 801d338:	681b      	ldr	r3, [r3, #0]
 801d33a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d33e:	d01d      	beq.n	801d37c <HAL_TIM_Base_Start_IT+0x80>
 801d340:	687b      	ldr	r3, [r7, #4]
 801d342:	681b      	ldr	r3, [r3, #0]
 801d344:	4a1f      	ldr	r2, [pc, #124]	; (801d3c4 <HAL_TIM_Base_Start_IT+0xc8>)
 801d346:	4293      	cmp	r3, r2
 801d348:	d018      	beq.n	801d37c <HAL_TIM_Base_Start_IT+0x80>
 801d34a:	687b      	ldr	r3, [r7, #4]
 801d34c:	681b      	ldr	r3, [r3, #0]
 801d34e:	4a1e      	ldr	r2, [pc, #120]	; (801d3c8 <HAL_TIM_Base_Start_IT+0xcc>)
 801d350:	4293      	cmp	r3, r2
 801d352:	d013      	beq.n	801d37c <HAL_TIM_Base_Start_IT+0x80>
 801d354:	687b      	ldr	r3, [r7, #4]
 801d356:	681b      	ldr	r3, [r3, #0]
 801d358:	4a1c      	ldr	r2, [pc, #112]	; (801d3cc <HAL_TIM_Base_Start_IT+0xd0>)
 801d35a:	4293      	cmp	r3, r2
 801d35c:	d00e      	beq.n	801d37c <HAL_TIM_Base_Start_IT+0x80>
 801d35e:	687b      	ldr	r3, [r7, #4]
 801d360:	681b      	ldr	r3, [r3, #0]
 801d362:	4a1b      	ldr	r2, [pc, #108]	; (801d3d0 <HAL_TIM_Base_Start_IT+0xd4>)
 801d364:	4293      	cmp	r3, r2
 801d366:	d009      	beq.n	801d37c <HAL_TIM_Base_Start_IT+0x80>
 801d368:	687b      	ldr	r3, [r7, #4]
 801d36a:	681b      	ldr	r3, [r3, #0]
 801d36c:	4a19      	ldr	r2, [pc, #100]	; (801d3d4 <HAL_TIM_Base_Start_IT+0xd8>)
 801d36e:	4293      	cmp	r3, r2
 801d370:	d004      	beq.n	801d37c <HAL_TIM_Base_Start_IT+0x80>
 801d372:	687b      	ldr	r3, [r7, #4]
 801d374:	681b      	ldr	r3, [r3, #0]
 801d376:	4a18      	ldr	r2, [pc, #96]	; (801d3d8 <HAL_TIM_Base_Start_IT+0xdc>)
 801d378:	4293      	cmp	r3, r2
 801d37a:	d111      	bne.n	801d3a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801d37c:	687b      	ldr	r3, [r7, #4]
 801d37e:	681b      	ldr	r3, [r3, #0]
 801d380:	689b      	ldr	r3, [r3, #8]
 801d382:	f003 0307 	and.w	r3, r3, #7
 801d386:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801d388:	68fb      	ldr	r3, [r7, #12]
 801d38a:	2b06      	cmp	r3, #6
 801d38c:	d010      	beq.n	801d3b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 801d38e:	687b      	ldr	r3, [r7, #4]
 801d390:	681b      	ldr	r3, [r3, #0]
 801d392:	681a      	ldr	r2, [r3, #0]
 801d394:	687b      	ldr	r3, [r7, #4]
 801d396:	681b      	ldr	r3, [r3, #0]
 801d398:	f042 0201 	orr.w	r2, r2, #1
 801d39c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801d39e:	e007      	b.n	801d3b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801d3a0:	687b      	ldr	r3, [r7, #4]
 801d3a2:	681b      	ldr	r3, [r3, #0]
 801d3a4:	681a      	ldr	r2, [r3, #0]
 801d3a6:	687b      	ldr	r3, [r7, #4]
 801d3a8:	681b      	ldr	r3, [r3, #0]
 801d3aa:	f042 0201 	orr.w	r2, r2, #1
 801d3ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801d3b0:	2300      	movs	r3, #0
}
 801d3b2:	4618      	mov	r0, r3
 801d3b4:	3714      	adds	r7, #20
 801d3b6:	46bd      	mov	sp, r7
 801d3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3bc:	4770      	bx	lr
 801d3be:	bf00      	nop
 801d3c0:	40010000 	.word	0x40010000
 801d3c4:	40000400 	.word	0x40000400
 801d3c8:	40000800 	.word	0x40000800
 801d3cc:	40000c00 	.word	0x40000c00
 801d3d0:	40010400 	.word	0x40010400
 801d3d4:	40014000 	.word	0x40014000
 801d3d8:	40001800 	.word	0x40001800

0801d3dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801d3dc:	b580      	push	{r7, lr}
 801d3de:	b082      	sub	sp, #8
 801d3e0:	af00      	add	r7, sp, #0
 801d3e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801d3e4:	687b      	ldr	r3, [r7, #4]
 801d3e6:	681b      	ldr	r3, [r3, #0]
 801d3e8:	691b      	ldr	r3, [r3, #16]
 801d3ea:	f003 0302 	and.w	r3, r3, #2
 801d3ee:	2b02      	cmp	r3, #2
 801d3f0:	d122      	bne.n	801d438 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801d3f2:	687b      	ldr	r3, [r7, #4]
 801d3f4:	681b      	ldr	r3, [r3, #0]
 801d3f6:	68db      	ldr	r3, [r3, #12]
 801d3f8:	f003 0302 	and.w	r3, r3, #2
 801d3fc:	2b02      	cmp	r3, #2
 801d3fe:	d11b      	bne.n	801d438 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801d400:	687b      	ldr	r3, [r7, #4]
 801d402:	681b      	ldr	r3, [r3, #0]
 801d404:	f06f 0202 	mvn.w	r2, #2
 801d408:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801d40a:	687b      	ldr	r3, [r7, #4]
 801d40c:	2201      	movs	r2, #1
 801d40e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801d410:	687b      	ldr	r3, [r7, #4]
 801d412:	681b      	ldr	r3, [r3, #0]
 801d414:	699b      	ldr	r3, [r3, #24]
 801d416:	f003 0303 	and.w	r3, r3, #3
 801d41a:	2b00      	cmp	r3, #0
 801d41c:	d003      	beq.n	801d426 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801d41e:	6878      	ldr	r0, [r7, #4]
 801d420:	f000 fa11 	bl	801d846 <HAL_TIM_IC_CaptureCallback>
 801d424:	e005      	b.n	801d432 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801d426:	6878      	ldr	r0, [r7, #4]
 801d428:	f000 fa03 	bl	801d832 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d42c:	6878      	ldr	r0, [r7, #4]
 801d42e:	f000 fa14 	bl	801d85a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d432:	687b      	ldr	r3, [r7, #4]
 801d434:	2200      	movs	r2, #0
 801d436:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801d438:	687b      	ldr	r3, [r7, #4]
 801d43a:	681b      	ldr	r3, [r3, #0]
 801d43c:	691b      	ldr	r3, [r3, #16]
 801d43e:	f003 0304 	and.w	r3, r3, #4
 801d442:	2b04      	cmp	r3, #4
 801d444:	d122      	bne.n	801d48c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801d446:	687b      	ldr	r3, [r7, #4]
 801d448:	681b      	ldr	r3, [r3, #0]
 801d44a:	68db      	ldr	r3, [r3, #12]
 801d44c:	f003 0304 	and.w	r3, r3, #4
 801d450:	2b04      	cmp	r3, #4
 801d452:	d11b      	bne.n	801d48c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801d454:	687b      	ldr	r3, [r7, #4]
 801d456:	681b      	ldr	r3, [r3, #0]
 801d458:	f06f 0204 	mvn.w	r2, #4
 801d45c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801d45e:	687b      	ldr	r3, [r7, #4]
 801d460:	2202      	movs	r2, #2
 801d462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801d464:	687b      	ldr	r3, [r7, #4]
 801d466:	681b      	ldr	r3, [r3, #0]
 801d468:	699b      	ldr	r3, [r3, #24]
 801d46a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d46e:	2b00      	cmp	r3, #0
 801d470:	d003      	beq.n	801d47a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d472:	6878      	ldr	r0, [r7, #4]
 801d474:	f000 f9e7 	bl	801d846 <HAL_TIM_IC_CaptureCallback>
 801d478:	e005      	b.n	801d486 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d47a:	6878      	ldr	r0, [r7, #4]
 801d47c:	f000 f9d9 	bl	801d832 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d480:	6878      	ldr	r0, [r7, #4]
 801d482:	f000 f9ea 	bl	801d85a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d486:	687b      	ldr	r3, [r7, #4]
 801d488:	2200      	movs	r2, #0
 801d48a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801d48c:	687b      	ldr	r3, [r7, #4]
 801d48e:	681b      	ldr	r3, [r3, #0]
 801d490:	691b      	ldr	r3, [r3, #16]
 801d492:	f003 0308 	and.w	r3, r3, #8
 801d496:	2b08      	cmp	r3, #8
 801d498:	d122      	bne.n	801d4e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801d49a:	687b      	ldr	r3, [r7, #4]
 801d49c:	681b      	ldr	r3, [r3, #0]
 801d49e:	68db      	ldr	r3, [r3, #12]
 801d4a0:	f003 0308 	and.w	r3, r3, #8
 801d4a4:	2b08      	cmp	r3, #8
 801d4a6:	d11b      	bne.n	801d4e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801d4a8:	687b      	ldr	r3, [r7, #4]
 801d4aa:	681b      	ldr	r3, [r3, #0]
 801d4ac:	f06f 0208 	mvn.w	r2, #8
 801d4b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801d4b2:	687b      	ldr	r3, [r7, #4]
 801d4b4:	2204      	movs	r2, #4
 801d4b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801d4b8:	687b      	ldr	r3, [r7, #4]
 801d4ba:	681b      	ldr	r3, [r3, #0]
 801d4bc:	69db      	ldr	r3, [r3, #28]
 801d4be:	f003 0303 	and.w	r3, r3, #3
 801d4c2:	2b00      	cmp	r3, #0
 801d4c4:	d003      	beq.n	801d4ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d4c6:	6878      	ldr	r0, [r7, #4]
 801d4c8:	f000 f9bd 	bl	801d846 <HAL_TIM_IC_CaptureCallback>
 801d4cc:	e005      	b.n	801d4da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d4ce:	6878      	ldr	r0, [r7, #4]
 801d4d0:	f000 f9af 	bl	801d832 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d4d4:	6878      	ldr	r0, [r7, #4]
 801d4d6:	f000 f9c0 	bl	801d85a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d4da:	687b      	ldr	r3, [r7, #4]
 801d4dc:	2200      	movs	r2, #0
 801d4de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801d4e0:	687b      	ldr	r3, [r7, #4]
 801d4e2:	681b      	ldr	r3, [r3, #0]
 801d4e4:	691b      	ldr	r3, [r3, #16]
 801d4e6:	f003 0310 	and.w	r3, r3, #16
 801d4ea:	2b10      	cmp	r3, #16
 801d4ec:	d122      	bne.n	801d534 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801d4ee:	687b      	ldr	r3, [r7, #4]
 801d4f0:	681b      	ldr	r3, [r3, #0]
 801d4f2:	68db      	ldr	r3, [r3, #12]
 801d4f4:	f003 0310 	and.w	r3, r3, #16
 801d4f8:	2b10      	cmp	r3, #16
 801d4fa:	d11b      	bne.n	801d534 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801d4fc:	687b      	ldr	r3, [r7, #4]
 801d4fe:	681b      	ldr	r3, [r3, #0]
 801d500:	f06f 0210 	mvn.w	r2, #16
 801d504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801d506:	687b      	ldr	r3, [r7, #4]
 801d508:	2208      	movs	r2, #8
 801d50a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801d50c:	687b      	ldr	r3, [r7, #4]
 801d50e:	681b      	ldr	r3, [r3, #0]
 801d510:	69db      	ldr	r3, [r3, #28]
 801d512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d516:	2b00      	cmp	r3, #0
 801d518:	d003      	beq.n	801d522 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d51a:	6878      	ldr	r0, [r7, #4]
 801d51c:	f000 f993 	bl	801d846 <HAL_TIM_IC_CaptureCallback>
 801d520:	e005      	b.n	801d52e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d522:	6878      	ldr	r0, [r7, #4]
 801d524:	f000 f985 	bl	801d832 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d528:	6878      	ldr	r0, [r7, #4]
 801d52a:	f000 f996 	bl	801d85a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d52e:	687b      	ldr	r3, [r7, #4]
 801d530:	2200      	movs	r2, #0
 801d532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801d534:	687b      	ldr	r3, [r7, #4]
 801d536:	681b      	ldr	r3, [r3, #0]
 801d538:	691b      	ldr	r3, [r3, #16]
 801d53a:	f003 0301 	and.w	r3, r3, #1
 801d53e:	2b01      	cmp	r3, #1
 801d540:	d10e      	bne.n	801d560 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801d542:	687b      	ldr	r3, [r7, #4]
 801d544:	681b      	ldr	r3, [r3, #0]
 801d546:	68db      	ldr	r3, [r3, #12]
 801d548:	f003 0301 	and.w	r3, r3, #1
 801d54c:	2b01      	cmp	r3, #1
 801d54e:	d107      	bne.n	801d560 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801d550:	687b      	ldr	r3, [r7, #4]
 801d552:	681b      	ldr	r3, [r3, #0]
 801d554:	f06f 0201 	mvn.w	r2, #1
 801d558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801d55a:	6878      	ldr	r0, [r7, #4]
 801d55c:	f7fa fda8 	bl	80180b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801d560:	687b      	ldr	r3, [r7, #4]
 801d562:	681b      	ldr	r3, [r3, #0]
 801d564:	691b      	ldr	r3, [r3, #16]
 801d566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d56a:	2b80      	cmp	r3, #128	; 0x80
 801d56c:	d10e      	bne.n	801d58c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801d56e:	687b      	ldr	r3, [r7, #4]
 801d570:	681b      	ldr	r3, [r3, #0]
 801d572:	68db      	ldr	r3, [r3, #12]
 801d574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d578:	2b80      	cmp	r3, #128	; 0x80
 801d57a:	d107      	bne.n	801d58c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801d57c:	687b      	ldr	r3, [r7, #4]
 801d57e:	681b      	ldr	r3, [r3, #0]
 801d580:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801d584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801d586:	6878      	ldr	r0, [r7, #4]
 801d588:	f000 fcec 	bl	801df64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801d58c:	687b      	ldr	r3, [r7, #4]
 801d58e:	681b      	ldr	r3, [r3, #0]
 801d590:	691b      	ldr	r3, [r3, #16]
 801d592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d596:	2b40      	cmp	r3, #64	; 0x40
 801d598:	d10e      	bne.n	801d5b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801d59a:	687b      	ldr	r3, [r7, #4]
 801d59c:	681b      	ldr	r3, [r3, #0]
 801d59e:	68db      	ldr	r3, [r3, #12]
 801d5a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d5a4:	2b40      	cmp	r3, #64	; 0x40
 801d5a6:	d107      	bne.n	801d5b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801d5a8:	687b      	ldr	r3, [r7, #4]
 801d5aa:	681b      	ldr	r3, [r3, #0]
 801d5ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801d5b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801d5b2:	6878      	ldr	r0, [r7, #4]
 801d5b4:	f000 f95b 	bl	801d86e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801d5b8:	687b      	ldr	r3, [r7, #4]
 801d5ba:	681b      	ldr	r3, [r3, #0]
 801d5bc:	691b      	ldr	r3, [r3, #16]
 801d5be:	f003 0320 	and.w	r3, r3, #32
 801d5c2:	2b20      	cmp	r3, #32
 801d5c4:	d10e      	bne.n	801d5e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801d5c6:	687b      	ldr	r3, [r7, #4]
 801d5c8:	681b      	ldr	r3, [r3, #0]
 801d5ca:	68db      	ldr	r3, [r3, #12]
 801d5cc:	f003 0320 	and.w	r3, r3, #32
 801d5d0:	2b20      	cmp	r3, #32
 801d5d2:	d107      	bne.n	801d5e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801d5d4:	687b      	ldr	r3, [r7, #4]
 801d5d6:	681b      	ldr	r3, [r3, #0]
 801d5d8:	f06f 0220 	mvn.w	r2, #32
 801d5dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801d5de:	6878      	ldr	r0, [r7, #4]
 801d5e0:	f000 fcb6 	bl	801df50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801d5e4:	bf00      	nop
 801d5e6:	3708      	adds	r7, #8
 801d5e8:	46bd      	mov	sp, r7
 801d5ea:	bd80      	pop	{r7, pc}

0801d5ec <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 801d5ec:	b580      	push	{r7, lr}
 801d5ee:	b086      	sub	sp, #24
 801d5f0:	af00      	add	r7, sp, #0
 801d5f2:	60f8      	str	r0, [r7, #12]
 801d5f4:	60b9      	str	r1, [r7, #8]
 801d5f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801d5f8:	2300      	movs	r3, #0
 801d5fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 801d5fc:	68fb      	ldr	r3, [r7, #12]
 801d5fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d602:	2b01      	cmp	r3, #1
 801d604:	d101      	bne.n	801d60a <HAL_TIM_OC_ConfigChannel+0x1e>
 801d606:	2302      	movs	r3, #2
 801d608:	e048      	b.n	801d69c <HAL_TIM_OC_ConfigChannel+0xb0>
 801d60a:	68fb      	ldr	r3, [r7, #12]
 801d60c:	2201      	movs	r2, #1
 801d60e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 801d612:	687b      	ldr	r3, [r7, #4]
 801d614:	2b0c      	cmp	r3, #12
 801d616:	d839      	bhi.n	801d68c <HAL_TIM_OC_ConfigChannel+0xa0>
 801d618:	a201      	add	r2, pc, #4	; (adr r2, 801d620 <HAL_TIM_OC_ConfigChannel+0x34>)
 801d61a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d61e:	bf00      	nop
 801d620:	0801d655 	.word	0x0801d655
 801d624:	0801d68d 	.word	0x0801d68d
 801d628:	0801d68d 	.word	0x0801d68d
 801d62c:	0801d68d 	.word	0x0801d68d
 801d630:	0801d663 	.word	0x0801d663
 801d634:	0801d68d 	.word	0x0801d68d
 801d638:	0801d68d 	.word	0x0801d68d
 801d63c:	0801d68d 	.word	0x0801d68d
 801d640:	0801d671 	.word	0x0801d671
 801d644:	0801d68d 	.word	0x0801d68d
 801d648:	0801d68d 	.word	0x0801d68d
 801d64c:	0801d68d 	.word	0x0801d68d
 801d650:	0801d67f 	.word	0x0801d67f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801d654:	68fb      	ldr	r3, [r7, #12]
 801d656:	681b      	ldr	r3, [r3, #0]
 801d658:	68b9      	ldr	r1, [r7, #8]
 801d65a:	4618      	mov	r0, r3
 801d65c:	f000 f9b2 	bl	801d9c4 <TIM_OC1_SetConfig>
      break;
 801d660:	e017      	b.n	801d692 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801d662:	68fb      	ldr	r3, [r7, #12]
 801d664:	681b      	ldr	r3, [r3, #0]
 801d666:	68b9      	ldr	r1, [r7, #8]
 801d668:	4618      	mov	r0, r3
 801d66a:	f000 fa1b 	bl	801daa4 <TIM_OC2_SetConfig>
      break;
 801d66e:	e010      	b.n	801d692 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801d670:	68fb      	ldr	r3, [r7, #12]
 801d672:	681b      	ldr	r3, [r3, #0]
 801d674:	68b9      	ldr	r1, [r7, #8]
 801d676:	4618      	mov	r0, r3
 801d678:	f000 fa8a 	bl	801db90 <TIM_OC3_SetConfig>
      break;
 801d67c:	e009      	b.n	801d692 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801d67e:	68fb      	ldr	r3, [r7, #12]
 801d680:	681b      	ldr	r3, [r3, #0]
 801d682:	68b9      	ldr	r1, [r7, #8]
 801d684:	4618      	mov	r0, r3
 801d686:	f000 faf7 	bl	801dc78 <TIM_OC4_SetConfig>
      break;
 801d68a:	e002      	b.n	801d692 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 801d68c:	2301      	movs	r3, #1
 801d68e:	75fb      	strb	r3, [r7, #23]
      break;
 801d690:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801d692:	68fb      	ldr	r3, [r7, #12]
 801d694:	2200      	movs	r2, #0
 801d696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801d69a:	7dfb      	ldrb	r3, [r7, #23]
}
 801d69c:	4618      	mov	r0, r3
 801d69e:	3718      	adds	r7, #24
 801d6a0:	46bd      	mov	sp, r7
 801d6a2:	bd80      	pop	{r7, pc}

0801d6a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801d6a4:	b580      	push	{r7, lr}
 801d6a6:	b084      	sub	sp, #16
 801d6a8:	af00      	add	r7, sp, #0
 801d6aa:	6078      	str	r0, [r7, #4]
 801d6ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801d6ae:	2300      	movs	r3, #0
 801d6b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801d6b2:	687b      	ldr	r3, [r7, #4]
 801d6b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d6b8:	2b01      	cmp	r3, #1
 801d6ba:	d101      	bne.n	801d6c0 <HAL_TIM_ConfigClockSource+0x1c>
 801d6bc:	2302      	movs	r3, #2
 801d6be:	e0b4      	b.n	801d82a <HAL_TIM_ConfigClockSource+0x186>
 801d6c0:	687b      	ldr	r3, [r7, #4]
 801d6c2:	2201      	movs	r2, #1
 801d6c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801d6c8:	687b      	ldr	r3, [r7, #4]
 801d6ca:	2202      	movs	r2, #2
 801d6cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801d6d0:	687b      	ldr	r3, [r7, #4]
 801d6d2:	681b      	ldr	r3, [r3, #0]
 801d6d4:	689b      	ldr	r3, [r3, #8]
 801d6d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801d6d8:	68bb      	ldr	r3, [r7, #8]
 801d6da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801d6de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801d6e0:	68bb      	ldr	r3, [r7, #8]
 801d6e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801d6e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801d6e8:	687b      	ldr	r3, [r7, #4]
 801d6ea:	681b      	ldr	r3, [r3, #0]
 801d6ec:	68ba      	ldr	r2, [r7, #8]
 801d6ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801d6f0:	683b      	ldr	r3, [r7, #0]
 801d6f2:	681b      	ldr	r3, [r3, #0]
 801d6f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d6f8:	d03e      	beq.n	801d778 <HAL_TIM_ConfigClockSource+0xd4>
 801d6fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d6fe:	f200 8087 	bhi.w	801d810 <HAL_TIM_ConfigClockSource+0x16c>
 801d702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d706:	f000 8086 	beq.w	801d816 <HAL_TIM_ConfigClockSource+0x172>
 801d70a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d70e:	d87f      	bhi.n	801d810 <HAL_TIM_ConfigClockSource+0x16c>
 801d710:	2b70      	cmp	r3, #112	; 0x70
 801d712:	d01a      	beq.n	801d74a <HAL_TIM_ConfigClockSource+0xa6>
 801d714:	2b70      	cmp	r3, #112	; 0x70
 801d716:	d87b      	bhi.n	801d810 <HAL_TIM_ConfigClockSource+0x16c>
 801d718:	2b60      	cmp	r3, #96	; 0x60
 801d71a:	d050      	beq.n	801d7be <HAL_TIM_ConfigClockSource+0x11a>
 801d71c:	2b60      	cmp	r3, #96	; 0x60
 801d71e:	d877      	bhi.n	801d810 <HAL_TIM_ConfigClockSource+0x16c>
 801d720:	2b50      	cmp	r3, #80	; 0x50
 801d722:	d03c      	beq.n	801d79e <HAL_TIM_ConfigClockSource+0xfa>
 801d724:	2b50      	cmp	r3, #80	; 0x50
 801d726:	d873      	bhi.n	801d810 <HAL_TIM_ConfigClockSource+0x16c>
 801d728:	2b40      	cmp	r3, #64	; 0x40
 801d72a:	d058      	beq.n	801d7de <HAL_TIM_ConfigClockSource+0x13a>
 801d72c:	2b40      	cmp	r3, #64	; 0x40
 801d72e:	d86f      	bhi.n	801d810 <HAL_TIM_ConfigClockSource+0x16c>
 801d730:	2b30      	cmp	r3, #48	; 0x30
 801d732:	d064      	beq.n	801d7fe <HAL_TIM_ConfigClockSource+0x15a>
 801d734:	2b30      	cmp	r3, #48	; 0x30
 801d736:	d86b      	bhi.n	801d810 <HAL_TIM_ConfigClockSource+0x16c>
 801d738:	2b20      	cmp	r3, #32
 801d73a:	d060      	beq.n	801d7fe <HAL_TIM_ConfigClockSource+0x15a>
 801d73c:	2b20      	cmp	r3, #32
 801d73e:	d867      	bhi.n	801d810 <HAL_TIM_ConfigClockSource+0x16c>
 801d740:	2b00      	cmp	r3, #0
 801d742:	d05c      	beq.n	801d7fe <HAL_TIM_ConfigClockSource+0x15a>
 801d744:	2b10      	cmp	r3, #16
 801d746:	d05a      	beq.n	801d7fe <HAL_TIM_ConfigClockSource+0x15a>
 801d748:	e062      	b.n	801d810 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801d74a:	687b      	ldr	r3, [r7, #4]
 801d74c:	6818      	ldr	r0, [r3, #0]
 801d74e:	683b      	ldr	r3, [r7, #0]
 801d750:	6899      	ldr	r1, [r3, #8]
 801d752:	683b      	ldr	r3, [r7, #0]
 801d754:	685a      	ldr	r2, [r3, #4]
 801d756:	683b      	ldr	r3, [r7, #0]
 801d758:	68db      	ldr	r3, [r3, #12]
 801d75a:	f000 fb5d 	bl	801de18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801d75e:	687b      	ldr	r3, [r7, #4]
 801d760:	681b      	ldr	r3, [r3, #0]
 801d762:	689b      	ldr	r3, [r3, #8]
 801d764:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801d766:	68bb      	ldr	r3, [r7, #8]
 801d768:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801d76c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801d76e:	687b      	ldr	r3, [r7, #4]
 801d770:	681b      	ldr	r3, [r3, #0]
 801d772:	68ba      	ldr	r2, [r7, #8]
 801d774:	609a      	str	r2, [r3, #8]
      break;
 801d776:	e04f      	b.n	801d818 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801d778:	687b      	ldr	r3, [r7, #4]
 801d77a:	6818      	ldr	r0, [r3, #0]
 801d77c:	683b      	ldr	r3, [r7, #0]
 801d77e:	6899      	ldr	r1, [r3, #8]
 801d780:	683b      	ldr	r3, [r7, #0]
 801d782:	685a      	ldr	r2, [r3, #4]
 801d784:	683b      	ldr	r3, [r7, #0]
 801d786:	68db      	ldr	r3, [r3, #12]
 801d788:	f000 fb46 	bl	801de18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801d78c:	687b      	ldr	r3, [r7, #4]
 801d78e:	681b      	ldr	r3, [r3, #0]
 801d790:	689a      	ldr	r2, [r3, #8]
 801d792:	687b      	ldr	r3, [r7, #4]
 801d794:	681b      	ldr	r3, [r3, #0]
 801d796:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801d79a:	609a      	str	r2, [r3, #8]
      break;
 801d79c:	e03c      	b.n	801d818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801d79e:	687b      	ldr	r3, [r7, #4]
 801d7a0:	6818      	ldr	r0, [r3, #0]
 801d7a2:	683b      	ldr	r3, [r7, #0]
 801d7a4:	6859      	ldr	r1, [r3, #4]
 801d7a6:	683b      	ldr	r3, [r7, #0]
 801d7a8:	68db      	ldr	r3, [r3, #12]
 801d7aa:	461a      	mov	r2, r3
 801d7ac:	f000 faba 	bl	801dd24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801d7b0:	687b      	ldr	r3, [r7, #4]
 801d7b2:	681b      	ldr	r3, [r3, #0]
 801d7b4:	2150      	movs	r1, #80	; 0x50
 801d7b6:	4618      	mov	r0, r3
 801d7b8:	f000 fb13 	bl	801dde2 <TIM_ITRx_SetConfig>
      break;
 801d7bc:	e02c      	b.n	801d818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801d7be:	687b      	ldr	r3, [r7, #4]
 801d7c0:	6818      	ldr	r0, [r3, #0]
 801d7c2:	683b      	ldr	r3, [r7, #0]
 801d7c4:	6859      	ldr	r1, [r3, #4]
 801d7c6:	683b      	ldr	r3, [r7, #0]
 801d7c8:	68db      	ldr	r3, [r3, #12]
 801d7ca:	461a      	mov	r2, r3
 801d7cc:	f000 fad9 	bl	801dd82 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801d7d0:	687b      	ldr	r3, [r7, #4]
 801d7d2:	681b      	ldr	r3, [r3, #0]
 801d7d4:	2160      	movs	r1, #96	; 0x60
 801d7d6:	4618      	mov	r0, r3
 801d7d8:	f000 fb03 	bl	801dde2 <TIM_ITRx_SetConfig>
      break;
 801d7dc:	e01c      	b.n	801d818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801d7de:	687b      	ldr	r3, [r7, #4]
 801d7e0:	6818      	ldr	r0, [r3, #0]
 801d7e2:	683b      	ldr	r3, [r7, #0]
 801d7e4:	6859      	ldr	r1, [r3, #4]
 801d7e6:	683b      	ldr	r3, [r7, #0]
 801d7e8:	68db      	ldr	r3, [r3, #12]
 801d7ea:	461a      	mov	r2, r3
 801d7ec:	f000 fa9a 	bl	801dd24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801d7f0:	687b      	ldr	r3, [r7, #4]
 801d7f2:	681b      	ldr	r3, [r3, #0]
 801d7f4:	2140      	movs	r1, #64	; 0x40
 801d7f6:	4618      	mov	r0, r3
 801d7f8:	f000 faf3 	bl	801dde2 <TIM_ITRx_SetConfig>
      break;
 801d7fc:	e00c      	b.n	801d818 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801d7fe:	687b      	ldr	r3, [r7, #4]
 801d800:	681a      	ldr	r2, [r3, #0]
 801d802:	683b      	ldr	r3, [r7, #0]
 801d804:	681b      	ldr	r3, [r3, #0]
 801d806:	4619      	mov	r1, r3
 801d808:	4610      	mov	r0, r2
 801d80a:	f000 faea 	bl	801dde2 <TIM_ITRx_SetConfig>
      break;
 801d80e:	e003      	b.n	801d818 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 801d810:	2301      	movs	r3, #1
 801d812:	73fb      	strb	r3, [r7, #15]
      break;
 801d814:	e000      	b.n	801d818 <HAL_TIM_ConfigClockSource+0x174>
      break;
 801d816:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801d818:	687b      	ldr	r3, [r7, #4]
 801d81a:	2201      	movs	r2, #1
 801d81c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801d820:	687b      	ldr	r3, [r7, #4]
 801d822:	2200      	movs	r2, #0
 801d824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801d828:	7bfb      	ldrb	r3, [r7, #15]
}
 801d82a:	4618      	mov	r0, r3
 801d82c:	3710      	adds	r7, #16
 801d82e:	46bd      	mov	sp, r7
 801d830:	bd80      	pop	{r7, pc}

0801d832 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801d832:	b480      	push	{r7}
 801d834:	b083      	sub	sp, #12
 801d836:	af00      	add	r7, sp, #0
 801d838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801d83a:	bf00      	nop
 801d83c:	370c      	adds	r7, #12
 801d83e:	46bd      	mov	sp, r7
 801d840:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d844:	4770      	bx	lr

0801d846 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801d846:	b480      	push	{r7}
 801d848:	b083      	sub	sp, #12
 801d84a:	af00      	add	r7, sp, #0
 801d84c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801d84e:	bf00      	nop
 801d850:	370c      	adds	r7, #12
 801d852:	46bd      	mov	sp, r7
 801d854:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d858:	4770      	bx	lr

0801d85a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801d85a:	b480      	push	{r7}
 801d85c:	b083      	sub	sp, #12
 801d85e:	af00      	add	r7, sp, #0
 801d860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801d862:	bf00      	nop
 801d864:	370c      	adds	r7, #12
 801d866:	46bd      	mov	sp, r7
 801d868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d86c:	4770      	bx	lr

0801d86e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801d86e:	b480      	push	{r7}
 801d870:	b083      	sub	sp, #12
 801d872:	af00      	add	r7, sp, #0
 801d874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801d876:	bf00      	nop
 801d878:	370c      	adds	r7, #12
 801d87a:	46bd      	mov	sp, r7
 801d87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d880:	4770      	bx	lr
	...

0801d884 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801d884:	b480      	push	{r7}
 801d886:	b085      	sub	sp, #20
 801d888:	af00      	add	r7, sp, #0
 801d88a:	6078      	str	r0, [r7, #4]
 801d88c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801d88e:	687b      	ldr	r3, [r7, #4]
 801d890:	681b      	ldr	r3, [r3, #0]
 801d892:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801d894:	687b      	ldr	r3, [r7, #4]
 801d896:	4a40      	ldr	r2, [pc, #256]	; (801d998 <TIM_Base_SetConfig+0x114>)
 801d898:	4293      	cmp	r3, r2
 801d89a:	d013      	beq.n	801d8c4 <TIM_Base_SetConfig+0x40>
 801d89c:	687b      	ldr	r3, [r7, #4]
 801d89e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d8a2:	d00f      	beq.n	801d8c4 <TIM_Base_SetConfig+0x40>
 801d8a4:	687b      	ldr	r3, [r7, #4]
 801d8a6:	4a3d      	ldr	r2, [pc, #244]	; (801d99c <TIM_Base_SetConfig+0x118>)
 801d8a8:	4293      	cmp	r3, r2
 801d8aa:	d00b      	beq.n	801d8c4 <TIM_Base_SetConfig+0x40>
 801d8ac:	687b      	ldr	r3, [r7, #4]
 801d8ae:	4a3c      	ldr	r2, [pc, #240]	; (801d9a0 <TIM_Base_SetConfig+0x11c>)
 801d8b0:	4293      	cmp	r3, r2
 801d8b2:	d007      	beq.n	801d8c4 <TIM_Base_SetConfig+0x40>
 801d8b4:	687b      	ldr	r3, [r7, #4]
 801d8b6:	4a3b      	ldr	r2, [pc, #236]	; (801d9a4 <TIM_Base_SetConfig+0x120>)
 801d8b8:	4293      	cmp	r3, r2
 801d8ba:	d003      	beq.n	801d8c4 <TIM_Base_SetConfig+0x40>
 801d8bc:	687b      	ldr	r3, [r7, #4]
 801d8be:	4a3a      	ldr	r2, [pc, #232]	; (801d9a8 <TIM_Base_SetConfig+0x124>)
 801d8c0:	4293      	cmp	r3, r2
 801d8c2:	d108      	bne.n	801d8d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801d8c4:	68fb      	ldr	r3, [r7, #12]
 801d8c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d8ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801d8cc:	683b      	ldr	r3, [r7, #0]
 801d8ce:	685b      	ldr	r3, [r3, #4]
 801d8d0:	68fa      	ldr	r2, [r7, #12]
 801d8d2:	4313      	orrs	r3, r2
 801d8d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801d8d6:	687b      	ldr	r3, [r7, #4]
 801d8d8:	4a2f      	ldr	r2, [pc, #188]	; (801d998 <TIM_Base_SetConfig+0x114>)
 801d8da:	4293      	cmp	r3, r2
 801d8dc:	d02b      	beq.n	801d936 <TIM_Base_SetConfig+0xb2>
 801d8de:	687b      	ldr	r3, [r7, #4]
 801d8e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d8e4:	d027      	beq.n	801d936 <TIM_Base_SetConfig+0xb2>
 801d8e6:	687b      	ldr	r3, [r7, #4]
 801d8e8:	4a2c      	ldr	r2, [pc, #176]	; (801d99c <TIM_Base_SetConfig+0x118>)
 801d8ea:	4293      	cmp	r3, r2
 801d8ec:	d023      	beq.n	801d936 <TIM_Base_SetConfig+0xb2>
 801d8ee:	687b      	ldr	r3, [r7, #4]
 801d8f0:	4a2b      	ldr	r2, [pc, #172]	; (801d9a0 <TIM_Base_SetConfig+0x11c>)
 801d8f2:	4293      	cmp	r3, r2
 801d8f4:	d01f      	beq.n	801d936 <TIM_Base_SetConfig+0xb2>
 801d8f6:	687b      	ldr	r3, [r7, #4]
 801d8f8:	4a2a      	ldr	r2, [pc, #168]	; (801d9a4 <TIM_Base_SetConfig+0x120>)
 801d8fa:	4293      	cmp	r3, r2
 801d8fc:	d01b      	beq.n	801d936 <TIM_Base_SetConfig+0xb2>
 801d8fe:	687b      	ldr	r3, [r7, #4]
 801d900:	4a29      	ldr	r2, [pc, #164]	; (801d9a8 <TIM_Base_SetConfig+0x124>)
 801d902:	4293      	cmp	r3, r2
 801d904:	d017      	beq.n	801d936 <TIM_Base_SetConfig+0xb2>
 801d906:	687b      	ldr	r3, [r7, #4]
 801d908:	4a28      	ldr	r2, [pc, #160]	; (801d9ac <TIM_Base_SetConfig+0x128>)
 801d90a:	4293      	cmp	r3, r2
 801d90c:	d013      	beq.n	801d936 <TIM_Base_SetConfig+0xb2>
 801d90e:	687b      	ldr	r3, [r7, #4]
 801d910:	4a27      	ldr	r2, [pc, #156]	; (801d9b0 <TIM_Base_SetConfig+0x12c>)
 801d912:	4293      	cmp	r3, r2
 801d914:	d00f      	beq.n	801d936 <TIM_Base_SetConfig+0xb2>
 801d916:	687b      	ldr	r3, [r7, #4]
 801d918:	4a26      	ldr	r2, [pc, #152]	; (801d9b4 <TIM_Base_SetConfig+0x130>)
 801d91a:	4293      	cmp	r3, r2
 801d91c:	d00b      	beq.n	801d936 <TIM_Base_SetConfig+0xb2>
 801d91e:	687b      	ldr	r3, [r7, #4]
 801d920:	4a25      	ldr	r2, [pc, #148]	; (801d9b8 <TIM_Base_SetConfig+0x134>)
 801d922:	4293      	cmp	r3, r2
 801d924:	d007      	beq.n	801d936 <TIM_Base_SetConfig+0xb2>
 801d926:	687b      	ldr	r3, [r7, #4]
 801d928:	4a24      	ldr	r2, [pc, #144]	; (801d9bc <TIM_Base_SetConfig+0x138>)
 801d92a:	4293      	cmp	r3, r2
 801d92c:	d003      	beq.n	801d936 <TIM_Base_SetConfig+0xb2>
 801d92e:	687b      	ldr	r3, [r7, #4]
 801d930:	4a23      	ldr	r2, [pc, #140]	; (801d9c0 <TIM_Base_SetConfig+0x13c>)
 801d932:	4293      	cmp	r3, r2
 801d934:	d108      	bne.n	801d948 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801d936:	68fb      	ldr	r3, [r7, #12]
 801d938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d93c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801d93e:	683b      	ldr	r3, [r7, #0]
 801d940:	68db      	ldr	r3, [r3, #12]
 801d942:	68fa      	ldr	r2, [r7, #12]
 801d944:	4313      	orrs	r3, r2
 801d946:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801d948:	68fb      	ldr	r3, [r7, #12]
 801d94a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801d94e:	683b      	ldr	r3, [r7, #0]
 801d950:	695b      	ldr	r3, [r3, #20]
 801d952:	4313      	orrs	r3, r2
 801d954:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801d956:	687b      	ldr	r3, [r7, #4]
 801d958:	68fa      	ldr	r2, [r7, #12]
 801d95a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801d95c:	683b      	ldr	r3, [r7, #0]
 801d95e:	689a      	ldr	r2, [r3, #8]
 801d960:	687b      	ldr	r3, [r7, #4]
 801d962:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801d964:	683b      	ldr	r3, [r7, #0]
 801d966:	681a      	ldr	r2, [r3, #0]
 801d968:	687b      	ldr	r3, [r7, #4]
 801d96a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801d96c:	687b      	ldr	r3, [r7, #4]
 801d96e:	4a0a      	ldr	r2, [pc, #40]	; (801d998 <TIM_Base_SetConfig+0x114>)
 801d970:	4293      	cmp	r3, r2
 801d972:	d003      	beq.n	801d97c <TIM_Base_SetConfig+0xf8>
 801d974:	687b      	ldr	r3, [r7, #4]
 801d976:	4a0c      	ldr	r2, [pc, #48]	; (801d9a8 <TIM_Base_SetConfig+0x124>)
 801d978:	4293      	cmp	r3, r2
 801d97a:	d103      	bne.n	801d984 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801d97c:	683b      	ldr	r3, [r7, #0]
 801d97e:	691a      	ldr	r2, [r3, #16]
 801d980:	687b      	ldr	r3, [r7, #4]
 801d982:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801d984:	687b      	ldr	r3, [r7, #4]
 801d986:	2201      	movs	r2, #1
 801d988:	615a      	str	r2, [r3, #20]
}
 801d98a:	bf00      	nop
 801d98c:	3714      	adds	r7, #20
 801d98e:	46bd      	mov	sp, r7
 801d990:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d994:	4770      	bx	lr
 801d996:	bf00      	nop
 801d998:	40010000 	.word	0x40010000
 801d99c:	40000400 	.word	0x40000400
 801d9a0:	40000800 	.word	0x40000800
 801d9a4:	40000c00 	.word	0x40000c00
 801d9a8:	40010400 	.word	0x40010400
 801d9ac:	40014000 	.word	0x40014000
 801d9b0:	40014400 	.word	0x40014400
 801d9b4:	40014800 	.word	0x40014800
 801d9b8:	40001800 	.word	0x40001800
 801d9bc:	40001c00 	.word	0x40001c00
 801d9c0:	40002000 	.word	0x40002000

0801d9c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d9c4:	b480      	push	{r7}
 801d9c6:	b087      	sub	sp, #28
 801d9c8:	af00      	add	r7, sp, #0
 801d9ca:	6078      	str	r0, [r7, #4]
 801d9cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801d9ce:	687b      	ldr	r3, [r7, #4]
 801d9d0:	6a1b      	ldr	r3, [r3, #32]
 801d9d2:	f023 0201 	bic.w	r2, r3, #1
 801d9d6:	687b      	ldr	r3, [r7, #4]
 801d9d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d9da:	687b      	ldr	r3, [r7, #4]
 801d9dc:	6a1b      	ldr	r3, [r3, #32]
 801d9de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d9e0:	687b      	ldr	r3, [r7, #4]
 801d9e2:	685b      	ldr	r3, [r3, #4]
 801d9e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d9e6:	687b      	ldr	r3, [r7, #4]
 801d9e8:	699b      	ldr	r3, [r3, #24]
 801d9ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801d9ec:	68fb      	ldr	r3, [r7, #12]
 801d9ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d9f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801d9f4:	68fb      	ldr	r3, [r7, #12]
 801d9f6:	f023 0303 	bic.w	r3, r3, #3
 801d9fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d9fc:	683b      	ldr	r3, [r7, #0]
 801d9fe:	681b      	ldr	r3, [r3, #0]
 801da00:	68fa      	ldr	r2, [r7, #12]
 801da02:	4313      	orrs	r3, r2
 801da04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801da06:	697b      	ldr	r3, [r7, #20]
 801da08:	f023 0302 	bic.w	r3, r3, #2
 801da0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801da0e:	683b      	ldr	r3, [r7, #0]
 801da10:	689b      	ldr	r3, [r3, #8]
 801da12:	697a      	ldr	r2, [r7, #20]
 801da14:	4313      	orrs	r3, r2
 801da16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801da18:	687b      	ldr	r3, [r7, #4]
 801da1a:	4a20      	ldr	r2, [pc, #128]	; (801da9c <TIM_OC1_SetConfig+0xd8>)
 801da1c:	4293      	cmp	r3, r2
 801da1e:	d003      	beq.n	801da28 <TIM_OC1_SetConfig+0x64>
 801da20:	687b      	ldr	r3, [r7, #4]
 801da22:	4a1f      	ldr	r2, [pc, #124]	; (801daa0 <TIM_OC1_SetConfig+0xdc>)
 801da24:	4293      	cmp	r3, r2
 801da26:	d10c      	bne.n	801da42 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801da28:	697b      	ldr	r3, [r7, #20]
 801da2a:	f023 0308 	bic.w	r3, r3, #8
 801da2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801da30:	683b      	ldr	r3, [r7, #0]
 801da32:	68db      	ldr	r3, [r3, #12]
 801da34:	697a      	ldr	r2, [r7, #20]
 801da36:	4313      	orrs	r3, r2
 801da38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801da3a:	697b      	ldr	r3, [r7, #20]
 801da3c:	f023 0304 	bic.w	r3, r3, #4
 801da40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801da42:	687b      	ldr	r3, [r7, #4]
 801da44:	4a15      	ldr	r2, [pc, #84]	; (801da9c <TIM_OC1_SetConfig+0xd8>)
 801da46:	4293      	cmp	r3, r2
 801da48:	d003      	beq.n	801da52 <TIM_OC1_SetConfig+0x8e>
 801da4a:	687b      	ldr	r3, [r7, #4]
 801da4c:	4a14      	ldr	r2, [pc, #80]	; (801daa0 <TIM_OC1_SetConfig+0xdc>)
 801da4e:	4293      	cmp	r3, r2
 801da50:	d111      	bne.n	801da76 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801da52:	693b      	ldr	r3, [r7, #16]
 801da54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801da58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801da5a:	693b      	ldr	r3, [r7, #16]
 801da5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801da60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801da62:	683b      	ldr	r3, [r7, #0]
 801da64:	695b      	ldr	r3, [r3, #20]
 801da66:	693a      	ldr	r2, [r7, #16]
 801da68:	4313      	orrs	r3, r2
 801da6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801da6c:	683b      	ldr	r3, [r7, #0]
 801da6e:	699b      	ldr	r3, [r3, #24]
 801da70:	693a      	ldr	r2, [r7, #16]
 801da72:	4313      	orrs	r3, r2
 801da74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801da76:	687b      	ldr	r3, [r7, #4]
 801da78:	693a      	ldr	r2, [r7, #16]
 801da7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801da7c:	687b      	ldr	r3, [r7, #4]
 801da7e:	68fa      	ldr	r2, [r7, #12]
 801da80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801da82:	683b      	ldr	r3, [r7, #0]
 801da84:	685a      	ldr	r2, [r3, #4]
 801da86:	687b      	ldr	r3, [r7, #4]
 801da88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801da8a:	687b      	ldr	r3, [r7, #4]
 801da8c:	697a      	ldr	r2, [r7, #20]
 801da8e:	621a      	str	r2, [r3, #32]
}
 801da90:	bf00      	nop
 801da92:	371c      	adds	r7, #28
 801da94:	46bd      	mov	sp, r7
 801da96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da9a:	4770      	bx	lr
 801da9c:	40010000 	.word	0x40010000
 801daa0:	40010400 	.word	0x40010400

0801daa4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801daa4:	b480      	push	{r7}
 801daa6:	b087      	sub	sp, #28
 801daa8:	af00      	add	r7, sp, #0
 801daaa:	6078      	str	r0, [r7, #4]
 801daac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801daae:	687b      	ldr	r3, [r7, #4]
 801dab0:	6a1b      	ldr	r3, [r3, #32]
 801dab2:	f023 0210 	bic.w	r2, r3, #16
 801dab6:	687b      	ldr	r3, [r7, #4]
 801dab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801daba:	687b      	ldr	r3, [r7, #4]
 801dabc:	6a1b      	ldr	r3, [r3, #32]
 801dabe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801dac0:	687b      	ldr	r3, [r7, #4]
 801dac2:	685b      	ldr	r3, [r3, #4]
 801dac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801dac6:	687b      	ldr	r3, [r7, #4]
 801dac8:	699b      	ldr	r3, [r3, #24]
 801daca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801dacc:	68fb      	ldr	r3, [r7, #12]
 801dace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801dad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801dad4:	68fb      	ldr	r3, [r7, #12]
 801dad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801dada:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801dadc:	683b      	ldr	r3, [r7, #0]
 801dade:	681b      	ldr	r3, [r3, #0]
 801dae0:	021b      	lsls	r3, r3, #8
 801dae2:	68fa      	ldr	r2, [r7, #12]
 801dae4:	4313      	orrs	r3, r2
 801dae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801dae8:	697b      	ldr	r3, [r7, #20]
 801daea:	f023 0320 	bic.w	r3, r3, #32
 801daee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801daf0:	683b      	ldr	r3, [r7, #0]
 801daf2:	689b      	ldr	r3, [r3, #8]
 801daf4:	011b      	lsls	r3, r3, #4
 801daf6:	697a      	ldr	r2, [r7, #20]
 801daf8:	4313      	orrs	r3, r2
 801dafa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801dafc:	687b      	ldr	r3, [r7, #4]
 801dafe:	4a22      	ldr	r2, [pc, #136]	; (801db88 <TIM_OC2_SetConfig+0xe4>)
 801db00:	4293      	cmp	r3, r2
 801db02:	d003      	beq.n	801db0c <TIM_OC2_SetConfig+0x68>
 801db04:	687b      	ldr	r3, [r7, #4]
 801db06:	4a21      	ldr	r2, [pc, #132]	; (801db8c <TIM_OC2_SetConfig+0xe8>)
 801db08:	4293      	cmp	r3, r2
 801db0a:	d10d      	bne.n	801db28 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801db0c:	697b      	ldr	r3, [r7, #20]
 801db0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801db12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801db14:	683b      	ldr	r3, [r7, #0]
 801db16:	68db      	ldr	r3, [r3, #12]
 801db18:	011b      	lsls	r3, r3, #4
 801db1a:	697a      	ldr	r2, [r7, #20]
 801db1c:	4313      	orrs	r3, r2
 801db1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801db20:	697b      	ldr	r3, [r7, #20]
 801db22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801db26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801db28:	687b      	ldr	r3, [r7, #4]
 801db2a:	4a17      	ldr	r2, [pc, #92]	; (801db88 <TIM_OC2_SetConfig+0xe4>)
 801db2c:	4293      	cmp	r3, r2
 801db2e:	d003      	beq.n	801db38 <TIM_OC2_SetConfig+0x94>
 801db30:	687b      	ldr	r3, [r7, #4]
 801db32:	4a16      	ldr	r2, [pc, #88]	; (801db8c <TIM_OC2_SetConfig+0xe8>)
 801db34:	4293      	cmp	r3, r2
 801db36:	d113      	bne.n	801db60 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801db38:	693b      	ldr	r3, [r7, #16]
 801db3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801db3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801db40:	693b      	ldr	r3, [r7, #16]
 801db42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801db46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801db48:	683b      	ldr	r3, [r7, #0]
 801db4a:	695b      	ldr	r3, [r3, #20]
 801db4c:	009b      	lsls	r3, r3, #2
 801db4e:	693a      	ldr	r2, [r7, #16]
 801db50:	4313      	orrs	r3, r2
 801db52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801db54:	683b      	ldr	r3, [r7, #0]
 801db56:	699b      	ldr	r3, [r3, #24]
 801db58:	009b      	lsls	r3, r3, #2
 801db5a:	693a      	ldr	r2, [r7, #16]
 801db5c:	4313      	orrs	r3, r2
 801db5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801db60:	687b      	ldr	r3, [r7, #4]
 801db62:	693a      	ldr	r2, [r7, #16]
 801db64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801db66:	687b      	ldr	r3, [r7, #4]
 801db68:	68fa      	ldr	r2, [r7, #12]
 801db6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801db6c:	683b      	ldr	r3, [r7, #0]
 801db6e:	685a      	ldr	r2, [r3, #4]
 801db70:	687b      	ldr	r3, [r7, #4]
 801db72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801db74:	687b      	ldr	r3, [r7, #4]
 801db76:	697a      	ldr	r2, [r7, #20]
 801db78:	621a      	str	r2, [r3, #32]
}
 801db7a:	bf00      	nop
 801db7c:	371c      	adds	r7, #28
 801db7e:	46bd      	mov	sp, r7
 801db80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db84:	4770      	bx	lr
 801db86:	bf00      	nop
 801db88:	40010000 	.word	0x40010000
 801db8c:	40010400 	.word	0x40010400

0801db90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801db90:	b480      	push	{r7}
 801db92:	b087      	sub	sp, #28
 801db94:	af00      	add	r7, sp, #0
 801db96:	6078      	str	r0, [r7, #4]
 801db98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801db9a:	687b      	ldr	r3, [r7, #4]
 801db9c:	6a1b      	ldr	r3, [r3, #32]
 801db9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801dba2:	687b      	ldr	r3, [r7, #4]
 801dba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801dba6:	687b      	ldr	r3, [r7, #4]
 801dba8:	6a1b      	ldr	r3, [r3, #32]
 801dbaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801dbac:	687b      	ldr	r3, [r7, #4]
 801dbae:	685b      	ldr	r3, [r3, #4]
 801dbb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801dbb2:	687b      	ldr	r3, [r7, #4]
 801dbb4:	69db      	ldr	r3, [r3, #28]
 801dbb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801dbb8:	68fb      	ldr	r3, [r7, #12]
 801dbba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801dbbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801dbc0:	68fb      	ldr	r3, [r7, #12]
 801dbc2:	f023 0303 	bic.w	r3, r3, #3
 801dbc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801dbc8:	683b      	ldr	r3, [r7, #0]
 801dbca:	681b      	ldr	r3, [r3, #0]
 801dbcc:	68fa      	ldr	r2, [r7, #12]
 801dbce:	4313      	orrs	r3, r2
 801dbd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801dbd2:	697b      	ldr	r3, [r7, #20]
 801dbd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801dbd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801dbda:	683b      	ldr	r3, [r7, #0]
 801dbdc:	689b      	ldr	r3, [r3, #8]
 801dbde:	021b      	lsls	r3, r3, #8
 801dbe0:	697a      	ldr	r2, [r7, #20]
 801dbe2:	4313      	orrs	r3, r2
 801dbe4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801dbe6:	687b      	ldr	r3, [r7, #4]
 801dbe8:	4a21      	ldr	r2, [pc, #132]	; (801dc70 <TIM_OC3_SetConfig+0xe0>)
 801dbea:	4293      	cmp	r3, r2
 801dbec:	d003      	beq.n	801dbf6 <TIM_OC3_SetConfig+0x66>
 801dbee:	687b      	ldr	r3, [r7, #4]
 801dbf0:	4a20      	ldr	r2, [pc, #128]	; (801dc74 <TIM_OC3_SetConfig+0xe4>)
 801dbf2:	4293      	cmp	r3, r2
 801dbf4:	d10d      	bne.n	801dc12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801dbf6:	697b      	ldr	r3, [r7, #20]
 801dbf8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801dbfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801dbfe:	683b      	ldr	r3, [r7, #0]
 801dc00:	68db      	ldr	r3, [r3, #12]
 801dc02:	021b      	lsls	r3, r3, #8
 801dc04:	697a      	ldr	r2, [r7, #20]
 801dc06:	4313      	orrs	r3, r2
 801dc08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801dc0a:	697b      	ldr	r3, [r7, #20]
 801dc0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801dc10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801dc12:	687b      	ldr	r3, [r7, #4]
 801dc14:	4a16      	ldr	r2, [pc, #88]	; (801dc70 <TIM_OC3_SetConfig+0xe0>)
 801dc16:	4293      	cmp	r3, r2
 801dc18:	d003      	beq.n	801dc22 <TIM_OC3_SetConfig+0x92>
 801dc1a:	687b      	ldr	r3, [r7, #4]
 801dc1c:	4a15      	ldr	r2, [pc, #84]	; (801dc74 <TIM_OC3_SetConfig+0xe4>)
 801dc1e:	4293      	cmp	r3, r2
 801dc20:	d113      	bne.n	801dc4a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801dc22:	693b      	ldr	r3, [r7, #16]
 801dc24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801dc28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801dc2a:	693b      	ldr	r3, [r7, #16]
 801dc2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801dc30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801dc32:	683b      	ldr	r3, [r7, #0]
 801dc34:	695b      	ldr	r3, [r3, #20]
 801dc36:	011b      	lsls	r3, r3, #4
 801dc38:	693a      	ldr	r2, [r7, #16]
 801dc3a:	4313      	orrs	r3, r2
 801dc3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801dc3e:	683b      	ldr	r3, [r7, #0]
 801dc40:	699b      	ldr	r3, [r3, #24]
 801dc42:	011b      	lsls	r3, r3, #4
 801dc44:	693a      	ldr	r2, [r7, #16]
 801dc46:	4313      	orrs	r3, r2
 801dc48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801dc4a:	687b      	ldr	r3, [r7, #4]
 801dc4c:	693a      	ldr	r2, [r7, #16]
 801dc4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801dc50:	687b      	ldr	r3, [r7, #4]
 801dc52:	68fa      	ldr	r2, [r7, #12]
 801dc54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801dc56:	683b      	ldr	r3, [r7, #0]
 801dc58:	685a      	ldr	r2, [r3, #4]
 801dc5a:	687b      	ldr	r3, [r7, #4]
 801dc5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801dc5e:	687b      	ldr	r3, [r7, #4]
 801dc60:	697a      	ldr	r2, [r7, #20]
 801dc62:	621a      	str	r2, [r3, #32]
}
 801dc64:	bf00      	nop
 801dc66:	371c      	adds	r7, #28
 801dc68:	46bd      	mov	sp, r7
 801dc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc6e:	4770      	bx	lr
 801dc70:	40010000 	.word	0x40010000
 801dc74:	40010400 	.word	0x40010400

0801dc78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801dc78:	b480      	push	{r7}
 801dc7a:	b087      	sub	sp, #28
 801dc7c:	af00      	add	r7, sp, #0
 801dc7e:	6078      	str	r0, [r7, #4]
 801dc80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801dc82:	687b      	ldr	r3, [r7, #4]
 801dc84:	6a1b      	ldr	r3, [r3, #32]
 801dc86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801dc8a:	687b      	ldr	r3, [r7, #4]
 801dc8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801dc8e:	687b      	ldr	r3, [r7, #4]
 801dc90:	6a1b      	ldr	r3, [r3, #32]
 801dc92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801dc94:	687b      	ldr	r3, [r7, #4]
 801dc96:	685b      	ldr	r3, [r3, #4]
 801dc98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801dc9a:	687b      	ldr	r3, [r7, #4]
 801dc9c:	69db      	ldr	r3, [r3, #28]
 801dc9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801dca0:	68fb      	ldr	r3, [r7, #12]
 801dca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801dca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801dca8:	68fb      	ldr	r3, [r7, #12]
 801dcaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801dcae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801dcb0:	683b      	ldr	r3, [r7, #0]
 801dcb2:	681b      	ldr	r3, [r3, #0]
 801dcb4:	021b      	lsls	r3, r3, #8
 801dcb6:	68fa      	ldr	r2, [r7, #12]
 801dcb8:	4313      	orrs	r3, r2
 801dcba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801dcbc:	693b      	ldr	r3, [r7, #16]
 801dcbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801dcc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801dcc4:	683b      	ldr	r3, [r7, #0]
 801dcc6:	689b      	ldr	r3, [r3, #8]
 801dcc8:	031b      	lsls	r3, r3, #12
 801dcca:	693a      	ldr	r2, [r7, #16]
 801dccc:	4313      	orrs	r3, r2
 801dcce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801dcd0:	687b      	ldr	r3, [r7, #4]
 801dcd2:	4a12      	ldr	r2, [pc, #72]	; (801dd1c <TIM_OC4_SetConfig+0xa4>)
 801dcd4:	4293      	cmp	r3, r2
 801dcd6:	d003      	beq.n	801dce0 <TIM_OC4_SetConfig+0x68>
 801dcd8:	687b      	ldr	r3, [r7, #4]
 801dcda:	4a11      	ldr	r2, [pc, #68]	; (801dd20 <TIM_OC4_SetConfig+0xa8>)
 801dcdc:	4293      	cmp	r3, r2
 801dcde:	d109      	bne.n	801dcf4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801dce0:	697b      	ldr	r3, [r7, #20]
 801dce2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801dce6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801dce8:	683b      	ldr	r3, [r7, #0]
 801dcea:	695b      	ldr	r3, [r3, #20]
 801dcec:	019b      	lsls	r3, r3, #6
 801dcee:	697a      	ldr	r2, [r7, #20]
 801dcf0:	4313      	orrs	r3, r2
 801dcf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801dcf4:	687b      	ldr	r3, [r7, #4]
 801dcf6:	697a      	ldr	r2, [r7, #20]
 801dcf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801dcfa:	687b      	ldr	r3, [r7, #4]
 801dcfc:	68fa      	ldr	r2, [r7, #12]
 801dcfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801dd00:	683b      	ldr	r3, [r7, #0]
 801dd02:	685a      	ldr	r2, [r3, #4]
 801dd04:	687b      	ldr	r3, [r7, #4]
 801dd06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801dd08:	687b      	ldr	r3, [r7, #4]
 801dd0a:	693a      	ldr	r2, [r7, #16]
 801dd0c:	621a      	str	r2, [r3, #32]
}
 801dd0e:	bf00      	nop
 801dd10:	371c      	adds	r7, #28
 801dd12:	46bd      	mov	sp, r7
 801dd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd18:	4770      	bx	lr
 801dd1a:	bf00      	nop
 801dd1c:	40010000 	.word	0x40010000
 801dd20:	40010400 	.word	0x40010400

0801dd24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801dd24:	b480      	push	{r7}
 801dd26:	b087      	sub	sp, #28
 801dd28:	af00      	add	r7, sp, #0
 801dd2a:	60f8      	str	r0, [r7, #12]
 801dd2c:	60b9      	str	r1, [r7, #8]
 801dd2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801dd30:	68fb      	ldr	r3, [r7, #12]
 801dd32:	6a1b      	ldr	r3, [r3, #32]
 801dd34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801dd36:	68fb      	ldr	r3, [r7, #12]
 801dd38:	6a1b      	ldr	r3, [r3, #32]
 801dd3a:	f023 0201 	bic.w	r2, r3, #1
 801dd3e:	68fb      	ldr	r3, [r7, #12]
 801dd40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801dd42:	68fb      	ldr	r3, [r7, #12]
 801dd44:	699b      	ldr	r3, [r3, #24]
 801dd46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801dd48:	693b      	ldr	r3, [r7, #16]
 801dd4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801dd4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801dd50:	687b      	ldr	r3, [r7, #4]
 801dd52:	011b      	lsls	r3, r3, #4
 801dd54:	693a      	ldr	r2, [r7, #16]
 801dd56:	4313      	orrs	r3, r2
 801dd58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801dd5a:	697b      	ldr	r3, [r7, #20]
 801dd5c:	f023 030a 	bic.w	r3, r3, #10
 801dd60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801dd62:	697a      	ldr	r2, [r7, #20]
 801dd64:	68bb      	ldr	r3, [r7, #8]
 801dd66:	4313      	orrs	r3, r2
 801dd68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801dd6a:	68fb      	ldr	r3, [r7, #12]
 801dd6c:	693a      	ldr	r2, [r7, #16]
 801dd6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801dd70:	68fb      	ldr	r3, [r7, #12]
 801dd72:	697a      	ldr	r2, [r7, #20]
 801dd74:	621a      	str	r2, [r3, #32]
}
 801dd76:	bf00      	nop
 801dd78:	371c      	adds	r7, #28
 801dd7a:	46bd      	mov	sp, r7
 801dd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd80:	4770      	bx	lr

0801dd82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801dd82:	b480      	push	{r7}
 801dd84:	b087      	sub	sp, #28
 801dd86:	af00      	add	r7, sp, #0
 801dd88:	60f8      	str	r0, [r7, #12]
 801dd8a:	60b9      	str	r1, [r7, #8]
 801dd8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801dd8e:	68fb      	ldr	r3, [r7, #12]
 801dd90:	6a1b      	ldr	r3, [r3, #32]
 801dd92:	f023 0210 	bic.w	r2, r3, #16
 801dd96:	68fb      	ldr	r3, [r7, #12]
 801dd98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801dd9a:	68fb      	ldr	r3, [r7, #12]
 801dd9c:	699b      	ldr	r3, [r3, #24]
 801dd9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801dda0:	68fb      	ldr	r3, [r7, #12]
 801dda2:	6a1b      	ldr	r3, [r3, #32]
 801dda4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801dda6:	697b      	ldr	r3, [r7, #20]
 801dda8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801ddac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801ddae:	687b      	ldr	r3, [r7, #4]
 801ddb0:	031b      	lsls	r3, r3, #12
 801ddb2:	697a      	ldr	r2, [r7, #20]
 801ddb4:	4313      	orrs	r3, r2
 801ddb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801ddb8:	693b      	ldr	r3, [r7, #16]
 801ddba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801ddbe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801ddc0:	68bb      	ldr	r3, [r7, #8]
 801ddc2:	011b      	lsls	r3, r3, #4
 801ddc4:	693a      	ldr	r2, [r7, #16]
 801ddc6:	4313      	orrs	r3, r2
 801ddc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801ddca:	68fb      	ldr	r3, [r7, #12]
 801ddcc:	697a      	ldr	r2, [r7, #20]
 801ddce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801ddd0:	68fb      	ldr	r3, [r7, #12]
 801ddd2:	693a      	ldr	r2, [r7, #16]
 801ddd4:	621a      	str	r2, [r3, #32]
}
 801ddd6:	bf00      	nop
 801ddd8:	371c      	adds	r7, #28
 801ddda:	46bd      	mov	sp, r7
 801dddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dde0:	4770      	bx	lr

0801dde2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801dde2:	b480      	push	{r7}
 801dde4:	b085      	sub	sp, #20
 801dde6:	af00      	add	r7, sp, #0
 801dde8:	6078      	str	r0, [r7, #4]
 801ddea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801ddec:	687b      	ldr	r3, [r7, #4]
 801ddee:	689b      	ldr	r3, [r3, #8]
 801ddf0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801ddf2:	68fb      	ldr	r3, [r7, #12]
 801ddf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ddf8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801ddfa:	683a      	ldr	r2, [r7, #0]
 801ddfc:	68fb      	ldr	r3, [r7, #12]
 801ddfe:	4313      	orrs	r3, r2
 801de00:	f043 0307 	orr.w	r3, r3, #7
 801de04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801de06:	687b      	ldr	r3, [r7, #4]
 801de08:	68fa      	ldr	r2, [r7, #12]
 801de0a:	609a      	str	r2, [r3, #8]
}
 801de0c:	bf00      	nop
 801de0e:	3714      	adds	r7, #20
 801de10:	46bd      	mov	sp, r7
 801de12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de16:	4770      	bx	lr

0801de18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801de18:	b480      	push	{r7}
 801de1a:	b087      	sub	sp, #28
 801de1c:	af00      	add	r7, sp, #0
 801de1e:	60f8      	str	r0, [r7, #12]
 801de20:	60b9      	str	r1, [r7, #8]
 801de22:	607a      	str	r2, [r7, #4]
 801de24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801de26:	68fb      	ldr	r3, [r7, #12]
 801de28:	689b      	ldr	r3, [r3, #8]
 801de2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801de2c:	697b      	ldr	r3, [r7, #20]
 801de2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801de32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801de34:	683b      	ldr	r3, [r7, #0]
 801de36:	021a      	lsls	r2, r3, #8
 801de38:	687b      	ldr	r3, [r7, #4]
 801de3a:	431a      	orrs	r2, r3
 801de3c:	68bb      	ldr	r3, [r7, #8]
 801de3e:	4313      	orrs	r3, r2
 801de40:	697a      	ldr	r2, [r7, #20]
 801de42:	4313      	orrs	r3, r2
 801de44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801de46:	68fb      	ldr	r3, [r7, #12]
 801de48:	697a      	ldr	r2, [r7, #20]
 801de4a:	609a      	str	r2, [r3, #8]
}
 801de4c:	bf00      	nop
 801de4e:	371c      	adds	r7, #28
 801de50:	46bd      	mov	sp, r7
 801de52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de56:	4770      	bx	lr

0801de58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801de58:	b480      	push	{r7}
 801de5a:	b085      	sub	sp, #20
 801de5c:	af00      	add	r7, sp, #0
 801de5e:	6078      	str	r0, [r7, #4]
 801de60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801de62:	687b      	ldr	r3, [r7, #4]
 801de64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801de68:	2b01      	cmp	r3, #1
 801de6a:	d101      	bne.n	801de70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801de6c:	2302      	movs	r3, #2
 801de6e:	e05a      	b.n	801df26 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 801de70:	687b      	ldr	r3, [r7, #4]
 801de72:	2201      	movs	r2, #1
 801de74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801de78:	687b      	ldr	r3, [r7, #4]
 801de7a:	2202      	movs	r2, #2
 801de7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801de80:	687b      	ldr	r3, [r7, #4]
 801de82:	681b      	ldr	r3, [r3, #0]
 801de84:	685b      	ldr	r3, [r3, #4]
 801de86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801de88:	687b      	ldr	r3, [r7, #4]
 801de8a:	681b      	ldr	r3, [r3, #0]
 801de8c:	689b      	ldr	r3, [r3, #8]
 801de8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801de90:	68fb      	ldr	r3, [r7, #12]
 801de92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801de96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801de98:	683b      	ldr	r3, [r7, #0]
 801de9a:	681b      	ldr	r3, [r3, #0]
 801de9c:	68fa      	ldr	r2, [r7, #12]
 801de9e:	4313      	orrs	r3, r2
 801dea0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801dea2:	687b      	ldr	r3, [r7, #4]
 801dea4:	681b      	ldr	r3, [r3, #0]
 801dea6:	68fa      	ldr	r2, [r7, #12]
 801dea8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801deaa:	687b      	ldr	r3, [r7, #4]
 801deac:	681b      	ldr	r3, [r3, #0]
 801deae:	4a21      	ldr	r2, [pc, #132]	; (801df34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 801deb0:	4293      	cmp	r3, r2
 801deb2:	d022      	beq.n	801defa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801deb4:	687b      	ldr	r3, [r7, #4]
 801deb6:	681b      	ldr	r3, [r3, #0]
 801deb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801debc:	d01d      	beq.n	801defa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801debe:	687b      	ldr	r3, [r7, #4]
 801dec0:	681b      	ldr	r3, [r3, #0]
 801dec2:	4a1d      	ldr	r2, [pc, #116]	; (801df38 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 801dec4:	4293      	cmp	r3, r2
 801dec6:	d018      	beq.n	801defa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801dec8:	687b      	ldr	r3, [r7, #4]
 801deca:	681b      	ldr	r3, [r3, #0]
 801decc:	4a1b      	ldr	r2, [pc, #108]	; (801df3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801dece:	4293      	cmp	r3, r2
 801ded0:	d013      	beq.n	801defa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801ded2:	687b      	ldr	r3, [r7, #4]
 801ded4:	681b      	ldr	r3, [r3, #0]
 801ded6:	4a1a      	ldr	r2, [pc, #104]	; (801df40 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 801ded8:	4293      	cmp	r3, r2
 801deda:	d00e      	beq.n	801defa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801dedc:	687b      	ldr	r3, [r7, #4]
 801dede:	681b      	ldr	r3, [r3, #0]
 801dee0:	4a18      	ldr	r2, [pc, #96]	; (801df44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801dee2:	4293      	cmp	r3, r2
 801dee4:	d009      	beq.n	801defa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801dee6:	687b      	ldr	r3, [r7, #4]
 801dee8:	681b      	ldr	r3, [r3, #0]
 801deea:	4a17      	ldr	r2, [pc, #92]	; (801df48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 801deec:	4293      	cmp	r3, r2
 801deee:	d004      	beq.n	801defa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801def0:	687b      	ldr	r3, [r7, #4]
 801def2:	681b      	ldr	r3, [r3, #0]
 801def4:	4a15      	ldr	r2, [pc, #84]	; (801df4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 801def6:	4293      	cmp	r3, r2
 801def8:	d10c      	bne.n	801df14 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801defa:	68bb      	ldr	r3, [r7, #8]
 801defc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801df00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801df02:	683b      	ldr	r3, [r7, #0]
 801df04:	685b      	ldr	r3, [r3, #4]
 801df06:	68ba      	ldr	r2, [r7, #8]
 801df08:	4313      	orrs	r3, r2
 801df0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801df0c:	687b      	ldr	r3, [r7, #4]
 801df0e:	681b      	ldr	r3, [r3, #0]
 801df10:	68ba      	ldr	r2, [r7, #8]
 801df12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801df14:	687b      	ldr	r3, [r7, #4]
 801df16:	2201      	movs	r2, #1
 801df18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801df1c:	687b      	ldr	r3, [r7, #4]
 801df1e:	2200      	movs	r2, #0
 801df20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801df24:	2300      	movs	r3, #0
}
 801df26:	4618      	mov	r0, r3
 801df28:	3714      	adds	r7, #20
 801df2a:	46bd      	mov	sp, r7
 801df2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df30:	4770      	bx	lr
 801df32:	bf00      	nop
 801df34:	40010000 	.word	0x40010000
 801df38:	40000400 	.word	0x40000400
 801df3c:	40000800 	.word	0x40000800
 801df40:	40000c00 	.word	0x40000c00
 801df44:	40010400 	.word	0x40010400
 801df48:	40014000 	.word	0x40014000
 801df4c:	40001800 	.word	0x40001800

0801df50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801df50:	b480      	push	{r7}
 801df52:	b083      	sub	sp, #12
 801df54:	af00      	add	r7, sp, #0
 801df56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801df58:	bf00      	nop
 801df5a:	370c      	adds	r7, #12
 801df5c:	46bd      	mov	sp, r7
 801df5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df62:	4770      	bx	lr

0801df64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801df64:	b480      	push	{r7}
 801df66:	b083      	sub	sp, #12
 801df68:	af00      	add	r7, sp, #0
 801df6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801df6c:	bf00      	nop
 801df6e:	370c      	adds	r7, #12
 801df70:	46bd      	mov	sp, r7
 801df72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df76:	4770      	bx	lr

0801df78 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801df78:	b084      	sub	sp, #16
 801df7a:	b580      	push	{r7, lr}
 801df7c:	b084      	sub	sp, #16
 801df7e:	af00      	add	r7, sp, #0
 801df80:	6078      	str	r0, [r7, #4]
 801df82:	f107 001c 	add.w	r0, r7, #28
 801df86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801df8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801df8c:	2b01      	cmp	r3, #1
 801df8e:	d122      	bne.n	801dfd6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801df90:	687b      	ldr	r3, [r7, #4]
 801df92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801df94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801df98:	687b      	ldr	r3, [r7, #4]
 801df9a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801df9c:	687b      	ldr	r3, [r7, #4]
 801df9e:	68db      	ldr	r3, [r3, #12]
 801dfa0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 801dfa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801dfa8:	687a      	ldr	r2, [r7, #4]
 801dfaa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801dfac:	687b      	ldr	r3, [r7, #4]
 801dfae:	68db      	ldr	r3, [r3, #12]
 801dfb0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801dfb4:	687b      	ldr	r3, [r7, #4]
 801dfb6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801dfb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dfba:	2b01      	cmp	r3, #1
 801dfbc:	d105      	bne.n	801dfca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801dfbe:	687b      	ldr	r3, [r7, #4]
 801dfc0:	68db      	ldr	r3, [r3, #12]
 801dfc2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801dfc6:	687b      	ldr	r3, [r7, #4]
 801dfc8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801dfca:	6878      	ldr	r0, [r7, #4]
 801dfcc:	f001 fb16 	bl	801f5fc <USB_CoreReset>
 801dfd0:	4603      	mov	r3, r0
 801dfd2:	73fb      	strb	r3, [r7, #15]
 801dfd4:	e01a      	b.n	801e00c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801dfd6:	687b      	ldr	r3, [r7, #4]
 801dfd8:	68db      	ldr	r3, [r3, #12]
 801dfda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801dfde:	687b      	ldr	r3, [r7, #4]
 801dfe0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801dfe2:	6878      	ldr	r0, [r7, #4]
 801dfe4:	f001 fb0a 	bl	801f5fc <USB_CoreReset>
 801dfe8:	4603      	mov	r3, r0
 801dfea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801dfec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801dfee:	2b00      	cmp	r3, #0
 801dff0:	d106      	bne.n	801e000 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801dff2:	687b      	ldr	r3, [r7, #4]
 801dff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dff6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801dffa:	687b      	ldr	r3, [r7, #4]
 801dffc:	639a      	str	r2, [r3, #56]	; 0x38
 801dffe:	e005      	b.n	801e00c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801e000:	687b      	ldr	r3, [r7, #4]
 801e002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e004:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801e008:	687b      	ldr	r3, [r7, #4]
 801e00a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801e00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e00e:	2b01      	cmp	r3, #1
 801e010:	d10b      	bne.n	801e02a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801e012:	687b      	ldr	r3, [r7, #4]
 801e014:	689b      	ldr	r3, [r3, #8]
 801e016:	f043 0206 	orr.w	r2, r3, #6
 801e01a:	687b      	ldr	r3, [r7, #4]
 801e01c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801e01e:	687b      	ldr	r3, [r7, #4]
 801e020:	689b      	ldr	r3, [r3, #8]
 801e022:	f043 0220 	orr.w	r2, r3, #32
 801e026:	687b      	ldr	r3, [r7, #4]
 801e028:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801e02a:	7bfb      	ldrb	r3, [r7, #15]
}
 801e02c:	4618      	mov	r0, r3
 801e02e:	3710      	adds	r7, #16
 801e030:	46bd      	mov	sp, r7
 801e032:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801e036:	b004      	add	sp, #16
 801e038:	4770      	bx	lr
	...

0801e03c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801e03c:	b480      	push	{r7}
 801e03e:	b087      	sub	sp, #28
 801e040:	af00      	add	r7, sp, #0
 801e042:	60f8      	str	r0, [r7, #12]
 801e044:	60b9      	str	r1, [r7, #8]
 801e046:	4613      	mov	r3, r2
 801e048:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801e04a:	79fb      	ldrb	r3, [r7, #7]
 801e04c:	2b02      	cmp	r3, #2
 801e04e:	d165      	bne.n	801e11c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801e050:	68bb      	ldr	r3, [r7, #8]
 801e052:	4a41      	ldr	r2, [pc, #260]	; (801e158 <USB_SetTurnaroundTime+0x11c>)
 801e054:	4293      	cmp	r3, r2
 801e056:	d906      	bls.n	801e066 <USB_SetTurnaroundTime+0x2a>
 801e058:	68bb      	ldr	r3, [r7, #8]
 801e05a:	4a40      	ldr	r2, [pc, #256]	; (801e15c <USB_SetTurnaroundTime+0x120>)
 801e05c:	4293      	cmp	r3, r2
 801e05e:	d202      	bcs.n	801e066 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801e060:	230f      	movs	r3, #15
 801e062:	617b      	str	r3, [r7, #20]
 801e064:	e062      	b.n	801e12c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801e066:	68bb      	ldr	r3, [r7, #8]
 801e068:	4a3c      	ldr	r2, [pc, #240]	; (801e15c <USB_SetTurnaroundTime+0x120>)
 801e06a:	4293      	cmp	r3, r2
 801e06c:	d306      	bcc.n	801e07c <USB_SetTurnaroundTime+0x40>
 801e06e:	68bb      	ldr	r3, [r7, #8]
 801e070:	4a3b      	ldr	r2, [pc, #236]	; (801e160 <USB_SetTurnaroundTime+0x124>)
 801e072:	4293      	cmp	r3, r2
 801e074:	d202      	bcs.n	801e07c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801e076:	230e      	movs	r3, #14
 801e078:	617b      	str	r3, [r7, #20]
 801e07a:	e057      	b.n	801e12c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801e07c:	68bb      	ldr	r3, [r7, #8]
 801e07e:	4a38      	ldr	r2, [pc, #224]	; (801e160 <USB_SetTurnaroundTime+0x124>)
 801e080:	4293      	cmp	r3, r2
 801e082:	d306      	bcc.n	801e092 <USB_SetTurnaroundTime+0x56>
 801e084:	68bb      	ldr	r3, [r7, #8]
 801e086:	4a37      	ldr	r2, [pc, #220]	; (801e164 <USB_SetTurnaroundTime+0x128>)
 801e088:	4293      	cmp	r3, r2
 801e08a:	d202      	bcs.n	801e092 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801e08c:	230d      	movs	r3, #13
 801e08e:	617b      	str	r3, [r7, #20]
 801e090:	e04c      	b.n	801e12c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801e092:	68bb      	ldr	r3, [r7, #8]
 801e094:	4a33      	ldr	r2, [pc, #204]	; (801e164 <USB_SetTurnaroundTime+0x128>)
 801e096:	4293      	cmp	r3, r2
 801e098:	d306      	bcc.n	801e0a8 <USB_SetTurnaroundTime+0x6c>
 801e09a:	68bb      	ldr	r3, [r7, #8]
 801e09c:	4a32      	ldr	r2, [pc, #200]	; (801e168 <USB_SetTurnaroundTime+0x12c>)
 801e09e:	4293      	cmp	r3, r2
 801e0a0:	d802      	bhi.n	801e0a8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801e0a2:	230c      	movs	r3, #12
 801e0a4:	617b      	str	r3, [r7, #20]
 801e0a6:	e041      	b.n	801e12c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 801e0a8:	68bb      	ldr	r3, [r7, #8]
 801e0aa:	4a2f      	ldr	r2, [pc, #188]	; (801e168 <USB_SetTurnaroundTime+0x12c>)
 801e0ac:	4293      	cmp	r3, r2
 801e0ae:	d906      	bls.n	801e0be <USB_SetTurnaroundTime+0x82>
 801e0b0:	68bb      	ldr	r3, [r7, #8]
 801e0b2:	4a2e      	ldr	r2, [pc, #184]	; (801e16c <USB_SetTurnaroundTime+0x130>)
 801e0b4:	4293      	cmp	r3, r2
 801e0b6:	d802      	bhi.n	801e0be <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 801e0b8:	230b      	movs	r3, #11
 801e0ba:	617b      	str	r3, [r7, #20]
 801e0bc:	e036      	b.n	801e12c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801e0be:	68bb      	ldr	r3, [r7, #8]
 801e0c0:	4a2a      	ldr	r2, [pc, #168]	; (801e16c <USB_SetTurnaroundTime+0x130>)
 801e0c2:	4293      	cmp	r3, r2
 801e0c4:	d906      	bls.n	801e0d4 <USB_SetTurnaroundTime+0x98>
 801e0c6:	68bb      	ldr	r3, [r7, #8]
 801e0c8:	4a29      	ldr	r2, [pc, #164]	; (801e170 <USB_SetTurnaroundTime+0x134>)
 801e0ca:	4293      	cmp	r3, r2
 801e0cc:	d802      	bhi.n	801e0d4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801e0ce:	230a      	movs	r3, #10
 801e0d0:	617b      	str	r3, [r7, #20]
 801e0d2:	e02b      	b.n	801e12c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801e0d4:	68bb      	ldr	r3, [r7, #8]
 801e0d6:	4a26      	ldr	r2, [pc, #152]	; (801e170 <USB_SetTurnaroundTime+0x134>)
 801e0d8:	4293      	cmp	r3, r2
 801e0da:	d906      	bls.n	801e0ea <USB_SetTurnaroundTime+0xae>
 801e0dc:	68bb      	ldr	r3, [r7, #8]
 801e0de:	4a25      	ldr	r2, [pc, #148]	; (801e174 <USB_SetTurnaroundTime+0x138>)
 801e0e0:	4293      	cmp	r3, r2
 801e0e2:	d202      	bcs.n	801e0ea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801e0e4:	2309      	movs	r3, #9
 801e0e6:	617b      	str	r3, [r7, #20]
 801e0e8:	e020      	b.n	801e12c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801e0ea:	68bb      	ldr	r3, [r7, #8]
 801e0ec:	4a21      	ldr	r2, [pc, #132]	; (801e174 <USB_SetTurnaroundTime+0x138>)
 801e0ee:	4293      	cmp	r3, r2
 801e0f0:	d306      	bcc.n	801e100 <USB_SetTurnaroundTime+0xc4>
 801e0f2:	68bb      	ldr	r3, [r7, #8]
 801e0f4:	4a20      	ldr	r2, [pc, #128]	; (801e178 <USB_SetTurnaroundTime+0x13c>)
 801e0f6:	4293      	cmp	r3, r2
 801e0f8:	d802      	bhi.n	801e100 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801e0fa:	2308      	movs	r3, #8
 801e0fc:	617b      	str	r3, [r7, #20]
 801e0fe:	e015      	b.n	801e12c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801e100:	68bb      	ldr	r3, [r7, #8]
 801e102:	4a1d      	ldr	r2, [pc, #116]	; (801e178 <USB_SetTurnaroundTime+0x13c>)
 801e104:	4293      	cmp	r3, r2
 801e106:	d906      	bls.n	801e116 <USB_SetTurnaroundTime+0xda>
 801e108:	68bb      	ldr	r3, [r7, #8]
 801e10a:	4a1c      	ldr	r2, [pc, #112]	; (801e17c <USB_SetTurnaroundTime+0x140>)
 801e10c:	4293      	cmp	r3, r2
 801e10e:	d202      	bcs.n	801e116 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 801e110:	2307      	movs	r3, #7
 801e112:	617b      	str	r3, [r7, #20]
 801e114:	e00a      	b.n	801e12c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801e116:	2306      	movs	r3, #6
 801e118:	617b      	str	r3, [r7, #20]
 801e11a:	e007      	b.n	801e12c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 801e11c:	79fb      	ldrb	r3, [r7, #7]
 801e11e:	2b00      	cmp	r3, #0
 801e120:	d102      	bne.n	801e128 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801e122:	2309      	movs	r3, #9
 801e124:	617b      	str	r3, [r7, #20]
 801e126:	e001      	b.n	801e12c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 801e128:	2309      	movs	r3, #9
 801e12a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801e12c:	68fb      	ldr	r3, [r7, #12]
 801e12e:	68db      	ldr	r3, [r3, #12]
 801e130:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 801e134:	68fb      	ldr	r3, [r7, #12]
 801e136:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 801e138:	68fb      	ldr	r3, [r7, #12]
 801e13a:	68da      	ldr	r2, [r3, #12]
 801e13c:	697b      	ldr	r3, [r7, #20]
 801e13e:	029b      	lsls	r3, r3, #10
 801e140:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 801e144:	431a      	orrs	r2, r3
 801e146:	68fb      	ldr	r3, [r7, #12]
 801e148:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801e14a:	2300      	movs	r3, #0
}
 801e14c:	4618      	mov	r0, r3
 801e14e:	371c      	adds	r7, #28
 801e150:	46bd      	mov	sp, r7
 801e152:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e156:	4770      	bx	lr
 801e158:	00d8acbf 	.word	0x00d8acbf
 801e15c:	00e4e1c0 	.word	0x00e4e1c0
 801e160:	00f42400 	.word	0x00f42400
 801e164:	01067380 	.word	0x01067380
 801e168:	011a499f 	.word	0x011a499f
 801e16c:	01312cff 	.word	0x01312cff
 801e170:	014ca43f 	.word	0x014ca43f
 801e174:	016e3600 	.word	0x016e3600
 801e178:	01a6ab1f 	.word	0x01a6ab1f
 801e17c:	01e84800 	.word	0x01e84800

0801e180 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801e180:	b480      	push	{r7}
 801e182:	b083      	sub	sp, #12
 801e184:	af00      	add	r7, sp, #0
 801e186:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801e188:	687b      	ldr	r3, [r7, #4]
 801e18a:	689b      	ldr	r3, [r3, #8]
 801e18c:	f043 0201 	orr.w	r2, r3, #1
 801e190:	687b      	ldr	r3, [r7, #4]
 801e192:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801e194:	2300      	movs	r3, #0
}
 801e196:	4618      	mov	r0, r3
 801e198:	370c      	adds	r7, #12
 801e19a:	46bd      	mov	sp, r7
 801e19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e1a0:	4770      	bx	lr

0801e1a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801e1a2:	b480      	push	{r7}
 801e1a4:	b083      	sub	sp, #12
 801e1a6:	af00      	add	r7, sp, #0
 801e1a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801e1aa:	687b      	ldr	r3, [r7, #4]
 801e1ac:	689b      	ldr	r3, [r3, #8]
 801e1ae:	f023 0201 	bic.w	r2, r3, #1
 801e1b2:	687b      	ldr	r3, [r7, #4]
 801e1b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801e1b6:	2300      	movs	r3, #0
}
 801e1b8:	4618      	mov	r0, r3
 801e1ba:	370c      	adds	r7, #12
 801e1bc:	46bd      	mov	sp, r7
 801e1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e1c2:	4770      	bx	lr

0801e1c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801e1c4:	b580      	push	{r7, lr}
 801e1c6:	b084      	sub	sp, #16
 801e1c8:	af00      	add	r7, sp, #0
 801e1ca:	6078      	str	r0, [r7, #4]
 801e1cc:	460b      	mov	r3, r1
 801e1ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801e1d0:	2300      	movs	r3, #0
 801e1d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801e1d4:	687b      	ldr	r3, [r7, #4]
 801e1d6:	68db      	ldr	r3, [r3, #12]
 801e1d8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 801e1dc:	687b      	ldr	r3, [r7, #4]
 801e1de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801e1e0:	78fb      	ldrb	r3, [r7, #3]
 801e1e2:	2b01      	cmp	r3, #1
 801e1e4:	d115      	bne.n	801e212 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801e1e6:	687b      	ldr	r3, [r7, #4]
 801e1e8:	68db      	ldr	r3, [r3, #12]
 801e1ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801e1ee:	687b      	ldr	r3, [r7, #4]
 801e1f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801e1f2:	2001      	movs	r0, #1
 801e1f4:	f7fa fb04 	bl	8018800 <HAL_Delay>
      ms++;
 801e1f8:	68fb      	ldr	r3, [r7, #12]
 801e1fa:	3301      	adds	r3, #1
 801e1fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801e1fe:	6878      	ldr	r0, [r7, #4]
 801e200:	f001 f96c 	bl	801f4dc <USB_GetMode>
 801e204:	4603      	mov	r3, r0
 801e206:	2b01      	cmp	r3, #1
 801e208:	d01e      	beq.n	801e248 <USB_SetCurrentMode+0x84>
 801e20a:	68fb      	ldr	r3, [r7, #12]
 801e20c:	2b31      	cmp	r3, #49	; 0x31
 801e20e:	d9f0      	bls.n	801e1f2 <USB_SetCurrentMode+0x2e>
 801e210:	e01a      	b.n	801e248 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801e212:	78fb      	ldrb	r3, [r7, #3]
 801e214:	2b00      	cmp	r3, #0
 801e216:	d115      	bne.n	801e244 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801e218:	687b      	ldr	r3, [r7, #4]
 801e21a:	68db      	ldr	r3, [r3, #12]
 801e21c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801e220:	687b      	ldr	r3, [r7, #4]
 801e222:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801e224:	2001      	movs	r0, #1
 801e226:	f7fa faeb 	bl	8018800 <HAL_Delay>
      ms++;
 801e22a:	68fb      	ldr	r3, [r7, #12]
 801e22c:	3301      	adds	r3, #1
 801e22e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 801e230:	6878      	ldr	r0, [r7, #4]
 801e232:	f001 f953 	bl	801f4dc <USB_GetMode>
 801e236:	4603      	mov	r3, r0
 801e238:	2b00      	cmp	r3, #0
 801e23a:	d005      	beq.n	801e248 <USB_SetCurrentMode+0x84>
 801e23c:	68fb      	ldr	r3, [r7, #12]
 801e23e:	2b31      	cmp	r3, #49	; 0x31
 801e240:	d9f0      	bls.n	801e224 <USB_SetCurrentMode+0x60>
 801e242:	e001      	b.n	801e248 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801e244:	2301      	movs	r3, #1
 801e246:	e005      	b.n	801e254 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 801e248:	68fb      	ldr	r3, [r7, #12]
 801e24a:	2b32      	cmp	r3, #50	; 0x32
 801e24c:	d101      	bne.n	801e252 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801e24e:	2301      	movs	r3, #1
 801e250:	e000      	b.n	801e254 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801e252:	2300      	movs	r3, #0
}
 801e254:	4618      	mov	r0, r3
 801e256:	3710      	adds	r7, #16
 801e258:	46bd      	mov	sp, r7
 801e25a:	bd80      	pop	{r7, pc}

0801e25c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801e25c:	b084      	sub	sp, #16
 801e25e:	b580      	push	{r7, lr}
 801e260:	b086      	sub	sp, #24
 801e262:	af00      	add	r7, sp, #0
 801e264:	6078      	str	r0, [r7, #4]
 801e266:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801e26a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801e26e:	2300      	movs	r3, #0
 801e270:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e272:	687b      	ldr	r3, [r7, #4]
 801e274:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801e276:	2300      	movs	r3, #0
 801e278:	613b      	str	r3, [r7, #16]
 801e27a:	e009      	b.n	801e290 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801e27c:	687a      	ldr	r2, [r7, #4]
 801e27e:	693b      	ldr	r3, [r7, #16]
 801e280:	3340      	adds	r3, #64	; 0x40
 801e282:	009b      	lsls	r3, r3, #2
 801e284:	4413      	add	r3, r2
 801e286:	2200      	movs	r2, #0
 801e288:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801e28a:	693b      	ldr	r3, [r7, #16]
 801e28c:	3301      	adds	r3, #1
 801e28e:	613b      	str	r3, [r7, #16]
 801e290:	693b      	ldr	r3, [r7, #16]
 801e292:	2b0e      	cmp	r3, #14
 801e294:	d9f2      	bls.n	801e27c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801e296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e298:	2b00      	cmp	r3, #0
 801e29a:	d11c      	bne.n	801e2d6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801e29c:	68fb      	ldr	r3, [r7, #12]
 801e29e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e2a2:	685b      	ldr	r3, [r3, #4]
 801e2a4:	68fa      	ldr	r2, [r7, #12]
 801e2a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801e2aa:	f043 0302 	orr.w	r3, r3, #2
 801e2ae:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801e2b0:	687b      	ldr	r3, [r7, #4]
 801e2b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e2b4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801e2b8:	687b      	ldr	r3, [r7, #4]
 801e2ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801e2bc:	687b      	ldr	r3, [r7, #4]
 801e2be:	681b      	ldr	r3, [r3, #0]
 801e2c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801e2c4:	687b      	ldr	r3, [r7, #4]
 801e2c6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801e2c8:	687b      	ldr	r3, [r7, #4]
 801e2ca:	681b      	ldr	r3, [r3, #0]
 801e2cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801e2d0:	687b      	ldr	r3, [r7, #4]
 801e2d2:	601a      	str	r2, [r3, #0]
 801e2d4:	e005      	b.n	801e2e2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801e2d6:	687b      	ldr	r3, [r7, #4]
 801e2d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e2da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801e2de:	687b      	ldr	r3, [r7, #4]
 801e2e0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801e2e2:	68fb      	ldr	r3, [r7, #12]
 801e2e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801e2e8:	461a      	mov	r2, r3
 801e2ea:	2300      	movs	r3, #0
 801e2ec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801e2ee:	68fb      	ldr	r3, [r7, #12]
 801e2f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e2f4:	4619      	mov	r1, r3
 801e2f6:	68fb      	ldr	r3, [r7, #12]
 801e2f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e2fc:	461a      	mov	r2, r3
 801e2fe:	680b      	ldr	r3, [r1, #0]
 801e300:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801e302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e304:	2b01      	cmp	r3, #1
 801e306:	d10c      	bne.n	801e322 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 801e308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e30a:	2b00      	cmp	r3, #0
 801e30c:	d104      	bne.n	801e318 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801e30e:	2100      	movs	r1, #0
 801e310:	6878      	ldr	r0, [r7, #4]
 801e312:	f000 f945 	bl	801e5a0 <USB_SetDevSpeed>
 801e316:	e008      	b.n	801e32a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801e318:	2101      	movs	r1, #1
 801e31a:	6878      	ldr	r0, [r7, #4]
 801e31c:	f000 f940 	bl	801e5a0 <USB_SetDevSpeed>
 801e320:	e003      	b.n	801e32a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801e322:	2103      	movs	r1, #3
 801e324:	6878      	ldr	r0, [r7, #4]
 801e326:	f000 f93b 	bl	801e5a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801e32a:	2110      	movs	r1, #16
 801e32c:	6878      	ldr	r0, [r7, #4]
 801e32e:	f000 f8f3 	bl	801e518 <USB_FlushTxFifo>
 801e332:	4603      	mov	r3, r0
 801e334:	2b00      	cmp	r3, #0
 801e336:	d001      	beq.n	801e33c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 801e338:	2301      	movs	r3, #1
 801e33a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801e33c:	6878      	ldr	r0, [r7, #4]
 801e33e:	f000 f90f 	bl	801e560 <USB_FlushRxFifo>
 801e342:	4603      	mov	r3, r0
 801e344:	2b00      	cmp	r3, #0
 801e346:	d001      	beq.n	801e34c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 801e348:	2301      	movs	r3, #1
 801e34a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801e34c:	68fb      	ldr	r3, [r7, #12]
 801e34e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e352:	461a      	mov	r2, r3
 801e354:	2300      	movs	r3, #0
 801e356:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801e358:	68fb      	ldr	r3, [r7, #12]
 801e35a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e35e:	461a      	mov	r2, r3
 801e360:	2300      	movs	r3, #0
 801e362:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801e364:	68fb      	ldr	r3, [r7, #12]
 801e366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e36a:	461a      	mov	r2, r3
 801e36c:	2300      	movs	r3, #0
 801e36e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801e370:	2300      	movs	r3, #0
 801e372:	613b      	str	r3, [r7, #16]
 801e374:	e043      	b.n	801e3fe <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801e376:	693b      	ldr	r3, [r7, #16]
 801e378:	015a      	lsls	r2, r3, #5
 801e37a:	68fb      	ldr	r3, [r7, #12]
 801e37c:	4413      	add	r3, r2
 801e37e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e382:	681b      	ldr	r3, [r3, #0]
 801e384:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801e388:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801e38c:	d118      	bne.n	801e3c0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 801e38e:	693b      	ldr	r3, [r7, #16]
 801e390:	2b00      	cmp	r3, #0
 801e392:	d10a      	bne.n	801e3aa <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801e394:	693b      	ldr	r3, [r7, #16]
 801e396:	015a      	lsls	r2, r3, #5
 801e398:	68fb      	ldr	r3, [r7, #12]
 801e39a:	4413      	add	r3, r2
 801e39c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e3a0:	461a      	mov	r2, r3
 801e3a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801e3a6:	6013      	str	r3, [r2, #0]
 801e3a8:	e013      	b.n	801e3d2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801e3aa:	693b      	ldr	r3, [r7, #16]
 801e3ac:	015a      	lsls	r2, r3, #5
 801e3ae:	68fb      	ldr	r3, [r7, #12]
 801e3b0:	4413      	add	r3, r2
 801e3b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e3b6:	461a      	mov	r2, r3
 801e3b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801e3bc:	6013      	str	r3, [r2, #0]
 801e3be:	e008      	b.n	801e3d2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801e3c0:	693b      	ldr	r3, [r7, #16]
 801e3c2:	015a      	lsls	r2, r3, #5
 801e3c4:	68fb      	ldr	r3, [r7, #12]
 801e3c6:	4413      	add	r3, r2
 801e3c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e3cc:	461a      	mov	r2, r3
 801e3ce:	2300      	movs	r3, #0
 801e3d0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801e3d2:	693b      	ldr	r3, [r7, #16]
 801e3d4:	015a      	lsls	r2, r3, #5
 801e3d6:	68fb      	ldr	r3, [r7, #12]
 801e3d8:	4413      	add	r3, r2
 801e3da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e3de:	461a      	mov	r2, r3
 801e3e0:	2300      	movs	r3, #0
 801e3e2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801e3e4:	693b      	ldr	r3, [r7, #16]
 801e3e6:	015a      	lsls	r2, r3, #5
 801e3e8:	68fb      	ldr	r3, [r7, #12]
 801e3ea:	4413      	add	r3, r2
 801e3ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e3f0:	461a      	mov	r2, r3
 801e3f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801e3f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801e3f8:	693b      	ldr	r3, [r7, #16]
 801e3fa:	3301      	adds	r3, #1
 801e3fc:	613b      	str	r3, [r7, #16]
 801e3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e400:	693a      	ldr	r2, [r7, #16]
 801e402:	429a      	cmp	r2, r3
 801e404:	d3b7      	bcc.n	801e376 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801e406:	2300      	movs	r3, #0
 801e408:	613b      	str	r3, [r7, #16]
 801e40a:	e043      	b.n	801e494 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801e40c:	693b      	ldr	r3, [r7, #16]
 801e40e:	015a      	lsls	r2, r3, #5
 801e410:	68fb      	ldr	r3, [r7, #12]
 801e412:	4413      	add	r3, r2
 801e414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e418:	681b      	ldr	r3, [r3, #0]
 801e41a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801e41e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801e422:	d118      	bne.n	801e456 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 801e424:	693b      	ldr	r3, [r7, #16]
 801e426:	2b00      	cmp	r3, #0
 801e428:	d10a      	bne.n	801e440 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801e42a:	693b      	ldr	r3, [r7, #16]
 801e42c:	015a      	lsls	r2, r3, #5
 801e42e:	68fb      	ldr	r3, [r7, #12]
 801e430:	4413      	add	r3, r2
 801e432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e436:	461a      	mov	r2, r3
 801e438:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801e43c:	6013      	str	r3, [r2, #0]
 801e43e:	e013      	b.n	801e468 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801e440:	693b      	ldr	r3, [r7, #16]
 801e442:	015a      	lsls	r2, r3, #5
 801e444:	68fb      	ldr	r3, [r7, #12]
 801e446:	4413      	add	r3, r2
 801e448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e44c:	461a      	mov	r2, r3
 801e44e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801e452:	6013      	str	r3, [r2, #0]
 801e454:	e008      	b.n	801e468 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801e456:	693b      	ldr	r3, [r7, #16]
 801e458:	015a      	lsls	r2, r3, #5
 801e45a:	68fb      	ldr	r3, [r7, #12]
 801e45c:	4413      	add	r3, r2
 801e45e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e462:	461a      	mov	r2, r3
 801e464:	2300      	movs	r3, #0
 801e466:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801e468:	693b      	ldr	r3, [r7, #16]
 801e46a:	015a      	lsls	r2, r3, #5
 801e46c:	68fb      	ldr	r3, [r7, #12]
 801e46e:	4413      	add	r3, r2
 801e470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e474:	461a      	mov	r2, r3
 801e476:	2300      	movs	r3, #0
 801e478:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801e47a:	693b      	ldr	r3, [r7, #16]
 801e47c:	015a      	lsls	r2, r3, #5
 801e47e:	68fb      	ldr	r3, [r7, #12]
 801e480:	4413      	add	r3, r2
 801e482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e486:	461a      	mov	r2, r3
 801e488:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801e48c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801e48e:	693b      	ldr	r3, [r7, #16]
 801e490:	3301      	adds	r3, #1
 801e492:	613b      	str	r3, [r7, #16]
 801e494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e496:	693a      	ldr	r2, [r7, #16]
 801e498:	429a      	cmp	r2, r3
 801e49a:	d3b7      	bcc.n	801e40c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801e49c:	68fb      	ldr	r3, [r7, #12]
 801e49e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e4a2:	691b      	ldr	r3, [r3, #16]
 801e4a4:	68fa      	ldr	r2, [r7, #12]
 801e4a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801e4aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801e4ae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801e4b0:	687b      	ldr	r3, [r7, #4]
 801e4b2:	2200      	movs	r2, #0
 801e4b4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801e4b6:	687b      	ldr	r3, [r7, #4]
 801e4b8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801e4bc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801e4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e4c0:	2b00      	cmp	r3, #0
 801e4c2:	d105      	bne.n	801e4d0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801e4c4:	687b      	ldr	r3, [r7, #4]
 801e4c6:	699b      	ldr	r3, [r3, #24]
 801e4c8:	f043 0210 	orr.w	r2, r3, #16
 801e4cc:	687b      	ldr	r3, [r7, #4]
 801e4ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801e4d0:	687b      	ldr	r3, [r7, #4]
 801e4d2:	699a      	ldr	r2, [r3, #24]
 801e4d4:	4b0f      	ldr	r3, [pc, #60]	; (801e514 <USB_DevInit+0x2b8>)
 801e4d6:	4313      	orrs	r3, r2
 801e4d8:	687a      	ldr	r2, [r7, #4]
 801e4da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801e4dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e4de:	2b00      	cmp	r3, #0
 801e4e0:	d005      	beq.n	801e4ee <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801e4e2:	687b      	ldr	r3, [r7, #4]
 801e4e4:	699b      	ldr	r3, [r3, #24]
 801e4e6:	f043 0208 	orr.w	r2, r3, #8
 801e4ea:	687b      	ldr	r3, [r7, #4]
 801e4ec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801e4ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e4f0:	2b01      	cmp	r3, #1
 801e4f2:	d107      	bne.n	801e504 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801e4f4:	687b      	ldr	r3, [r7, #4]
 801e4f6:	699b      	ldr	r3, [r3, #24]
 801e4f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801e4fc:	f043 0304 	orr.w	r3, r3, #4
 801e500:	687a      	ldr	r2, [r7, #4]
 801e502:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801e504:	7dfb      	ldrb	r3, [r7, #23]
}
 801e506:	4618      	mov	r0, r3
 801e508:	3718      	adds	r7, #24
 801e50a:	46bd      	mov	sp, r7
 801e50c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801e510:	b004      	add	sp, #16
 801e512:	4770      	bx	lr
 801e514:	803c3800 	.word	0x803c3800

0801e518 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801e518:	b480      	push	{r7}
 801e51a:	b085      	sub	sp, #20
 801e51c:	af00      	add	r7, sp, #0
 801e51e:	6078      	str	r0, [r7, #4]
 801e520:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801e522:	2300      	movs	r3, #0
 801e524:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801e526:	683b      	ldr	r3, [r7, #0]
 801e528:	019b      	lsls	r3, r3, #6
 801e52a:	f043 0220 	orr.w	r2, r3, #32
 801e52e:	687b      	ldr	r3, [r7, #4]
 801e530:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801e532:	68fb      	ldr	r3, [r7, #12]
 801e534:	3301      	adds	r3, #1
 801e536:	60fb      	str	r3, [r7, #12]
 801e538:	4a08      	ldr	r2, [pc, #32]	; (801e55c <USB_FlushTxFifo+0x44>)
 801e53a:	4293      	cmp	r3, r2
 801e53c:	d901      	bls.n	801e542 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 801e53e:	2303      	movs	r3, #3
 801e540:	e006      	b.n	801e550 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801e542:	687b      	ldr	r3, [r7, #4]
 801e544:	691b      	ldr	r3, [r3, #16]
 801e546:	f003 0320 	and.w	r3, r3, #32
 801e54a:	2b20      	cmp	r3, #32
 801e54c:	d0f1      	beq.n	801e532 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 801e54e:	2300      	movs	r3, #0
}
 801e550:	4618      	mov	r0, r3
 801e552:	3714      	adds	r7, #20
 801e554:	46bd      	mov	sp, r7
 801e556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e55a:	4770      	bx	lr
 801e55c:	00030d40 	.word	0x00030d40

0801e560 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801e560:	b480      	push	{r7}
 801e562:	b085      	sub	sp, #20
 801e564:	af00      	add	r7, sp, #0
 801e566:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801e568:	2300      	movs	r3, #0
 801e56a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801e56c:	687b      	ldr	r3, [r7, #4]
 801e56e:	2210      	movs	r2, #16
 801e570:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801e572:	68fb      	ldr	r3, [r7, #12]
 801e574:	3301      	adds	r3, #1
 801e576:	60fb      	str	r3, [r7, #12]
 801e578:	4a08      	ldr	r2, [pc, #32]	; (801e59c <USB_FlushRxFifo+0x3c>)
 801e57a:	4293      	cmp	r3, r2
 801e57c:	d901      	bls.n	801e582 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 801e57e:	2303      	movs	r3, #3
 801e580:	e006      	b.n	801e590 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801e582:	687b      	ldr	r3, [r7, #4]
 801e584:	691b      	ldr	r3, [r3, #16]
 801e586:	f003 0310 	and.w	r3, r3, #16
 801e58a:	2b10      	cmp	r3, #16
 801e58c:	d0f1      	beq.n	801e572 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 801e58e:	2300      	movs	r3, #0
}
 801e590:	4618      	mov	r0, r3
 801e592:	3714      	adds	r7, #20
 801e594:	46bd      	mov	sp, r7
 801e596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e59a:	4770      	bx	lr
 801e59c:	00030d40 	.word	0x00030d40

0801e5a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801e5a0:	b480      	push	{r7}
 801e5a2:	b085      	sub	sp, #20
 801e5a4:	af00      	add	r7, sp, #0
 801e5a6:	6078      	str	r0, [r7, #4]
 801e5a8:	460b      	mov	r3, r1
 801e5aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e5ac:	687b      	ldr	r3, [r7, #4]
 801e5ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801e5b0:	68fb      	ldr	r3, [r7, #12]
 801e5b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e5b6:	681a      	ldr	r2, [r3, #0]
 801e5b8:	78fb      	ldrb	r3, [r7, #3]
 801e5ba:	68f9      	ldr	r1, [r7, #12]
 801e5bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e5c0:	4313      	orrs	r3, r2
 801e5c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801e5c4:	2300      	movs	r3, #0
}
 801e5c6:	4618      	mov	r0, r3
 801e5c8:	3714      	adds	r7, #20
 801e5ca:	46bd      	mov	sp, r7
 801e5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e5d0:	4770      	bx	lr

0801e5d2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801e5d2:	b480      	push	{r7}
 801e5d4:	b087      	sub	sp, #28
 801e5d6:	af00      	add	r7, sp, #0
 801e5d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e5da:	687b      	ldr	r3, [r7, #4]
 801e5dc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801e5de:	693b      	ldr	r3, [r7, #16]
 801e5e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e5e4:	689b      	ldr	r3, [r3, #8]
 801e5e6:	f003 0306 	and.w	r3, r3, #6
 801e5ea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801e5ec:	68fb      	ldr	r3, [r7, #12]
 801e5ee:	2b00      	cmp	r3, #0
 801e5f0:	d102      	bne.n	801e5f8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801e5f2:	2300      	movs	r3, #0
 801e5f4:	75fb      	strb	r3, [r7, #23]
 801e5f6:	e00a      	b.n	801e60e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801e5f8:	68fb      	ldr	r3, [r7, #12]
 801e5fa:	2b02      	cmp	r3, #2
 801e5fc:	d002      	beq.n	801e604 <USB_GetDevSpeed+0x32>
 801e5fe:	68fb      	ldr	r3, [r7, #12]
 801e600:	2b06      	cmp	r3, #6
 801e602:	d102      	bne.n	801e60a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801e604:	2302      	movs	r3, #2
 801e606:	75fb      	strb	r3, [r7, #23]
 801e608:	e001      	b.n	801e60e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801e60a:	230f      	movs	r3, #15
 801e60c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801e60e:	7dfb      	ldrb	r3, [r7, #23]
}
 801e610:	4618      	mov	r0, r3
 801e612:	371c      	adds	r7, #28
 801e614:	46bd      	mov	sp, r7
 801e616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e61a:	4770      	bx	lr

0801e61c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801e61c:	b480      	push	{r7}
 801e61e:	b085      	sub	sp, #20
 801e620:	af00      	add	r7, sp, #0
 801e622:	6078      	str	r0, [r7, #4]
 801e624:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e626:	687b      	ldr	r3, [r7, #4]
 801e628:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801e62a:	683b      	ldr	r3, [r7, #0]
 801e62c:	781b      	ldrb	r3, [r3, #0]
 801e62e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801e630:	683b      	ldr	r3, [r7, #0]
 801e632:	785b      	ldrb	r3, [r3, #1]
 801e634:	2b01      	cmp	r3, #1
 801e636:	d13a      	bne.n	801e6ae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801e638:	68fb      	ldr	r3, [r7, #12]
 801e63a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e63e:	69da      	ldr	r2, [r3, #28]
 801e640:	683b      	ldr	r3, [r7, #0]
 801e642:	781b      	ldrb	r3, [r3, #0]
 801e644:	f003 030f 	and.w	r3, r3, #15
 801e648:	2101      	movs	r1, #1
 801e64a:	fa01 f303 	lsl.w	r3, r1, r3
 801e64e:	b29b      	uxth	r3, r3
 801e650:	68f9      	ldr	r1, [r7, #12]
 801e652:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e656:	4313      	orrs	r3, r2
 801e658:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801e65a:	68bb      	ldr	r3, [r7, #8]
 801e65c:	015a      	lsls	r2, r3, #5
 801e65e:	68fb      	ldr	r3, [r7, #12]
 801e660:	4413      	add	r3, r2
 801e662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e666:	681b      	ldr	r3, [r3, #0]
 801e668:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801e66c:	2b00      	cmp	r3, #0
 801e66e:	d155      	bne.n	801e71c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801e670:	68bb      	ldr	r3, [r7, #8]
 801e672:	015a      	lsls	r2, r3, #5
 801e674:	68fb      	ldr	r3, [r7, #12]
 801e676:	4413      	add	r3, r2
 801e678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e67c:	681a      	ldr	r2, [r3, #0]
 801e67e:	683b      	ldr	r3, [r7, #0]
 801e680:	689b      	ldr	r3, [r3, #8]
 801e682:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801e686:	683b      	ldr	r3, [r7, #0]
 801e688:	78db      	ldrb	r3, [r3, #3]
 801e68a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801e68c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801e68e:	68bb      	ldr	r3, [r7, #8]
 801e690:	059b      	lsls	r3, r3, #22
 801e692:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801e694:	4313      	orrs	r3, r2
 801e696:	68ba      	ldr	r2, [r7, #8]
 801e698:	0151      	lsls	r1, r2, #5
 801e69a:	68fa      	ldr	r2, [r7, #12]
 801e69c:	440a      	add	r2, r1
 801e69e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e6a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e6a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801e6aa:	6013      	str	r3, [r2, #0]
 801e6ac:	e036      	b.n	801e71c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801e6ae:	68fb      	ldr	r3, [r7, #12]
 801e6b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e6b4:	69da      	ldr	r2, [r3, #28]
 801e6b6:	683b      	ldr	r3, [r7, #0]
 801e6b8:	781b      	ldrb	r3, [r3, #0]
 801e6ba:	f003 030f 	and.w	r3, r3, #15
 801e6be:	2101      	movs	r1, #1
 801e6c0:	fa01 f303 	lsl.w	r3, r1, r3
 801e6c4:	041b      	lsls	r3, r3, #16
 801e6c6:	68f9      	ldr	r1, [r7, #12]
 801e6c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e6cc:	4313      	orrs	r3, r2
 801e6ce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801e6d0:	68bb      	ldr	r3, [r7, #8]
 801e6d2:	015a      	lsls	r2, r3, #5
 801e6d4:	68fb      	ldr	r3, [r7, #12]
 801e6d6:	4413      	add	r3, r2
 801e6d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e6dc:	681b      	ldr	r3, [r3, #0]
 801e6de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801e6e2:	2b00      	cmp	r3, #0
 801e6e4:	d11a      	bne.n	801e71c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801e6e6:	68bb      	ldr	r3, [r7, #8]
 801e6e8:	015a      	lsls	r2, r3, #5
 801e6ea:	68fb      	ldr	r3, [r7, #12]
 801e6ec:	4413      	add	r3, r2
 801e6ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e6f2:	681a      	ldr	r2, [r3, #0]
 801e6f4:	683b      	ldr	r3, [r7, #0]
 801e6f6:	689b      	ldr	r3, [r3, #8]
 801e6f8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801e6fc:	683b      	ldr	r3, [r7, #0]
 801e6fe:	78db      	ldrb	r3, [r3, #3]
 801e700:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801e702:	430b      	orrs	r3, r1
 801e704:	4313      	orrs	r3, r2
 801e706:	68ba      	ldr	r2, [r7, #8]
 801e708:	0151      	lsls	r1, r2, #5
 801e70a:	68fa      	ldr	r2, [r7, #12]
 801e70c:	440a      	add	r2, r1
 801e70e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801e71a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801e71c:	2300      	movs	r3, #0
}
 801e71e:	4618      	mov	r0, r3
 801e720:	3714      	adds	r7, #20
 801e722:	46bd      	mov	sp, r7
 801e724:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e728:	4770      	bx	lr
	...

0801e72c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801e72c:	b480      	push	{r7}
 801e72e:	b085      	sub	sp, #20
 801e730:	af00      	add	r7, sp, #0
 801e732:	6078      	str	r0, [r7, #4]
 801e734:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e736:	687b      	ldr	r3, [r7, #4]
 801e738:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801e73a:	683b      	ldr	r3, [r7, #0]
 801e73c:	781b      	ldrb	r3, [r3, #0]
 801e73e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801e740:	683b      	ldr	r3, [r7, #0]
 801e742:	785b      	ldrb	r3, [r3, #1]
 801e744:	2b01      	cmp	r3, #1
 801e746:	d161      	bne.n	801e80c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801e748:	68bb      	ldr	r3, [r7, #8]
 801e74a:	015a      	lsls	r2, r3, #5
 801e74c:	68fb      	ldr	r3, [r7, #12]
 801e74e:	4413      	add	r3, r2
 801e750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e754:	681b      	ldr	r3, [r3, #0]
 801e756:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801e75a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801e75e:	d11f      	bne.n	801e7a0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801e760:	68bb      	ldr	r3, [r7, #8]
 801e762:	015a      	lsls	r2, r3, #5
 801e764:	68fb      	ldr	r3, [r7, #12]
 801e766:	4413      	add	r3, r2
 801e768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e76c:	681b      	ldr	r3, [r3, #0]
 801e76e:	68ba      	ldr	r2, [r7, #8]
 801e770:	0151      	lsls	r1, r2, #5
 801e772:	68fa      	ldr	r2, [r7, #12]
 801e774:	440a      	add	r2, r1
 801e776:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e77a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801e77e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801e780:	68bb      	ldr	r3, [r7, #8]
 801e782:	015a      	lsls	r2, r3, #5
 801e784:	68fb      	ldr	r3, [r7, #12]
 801e786:	4413      	add	r3, r2
 801e788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e78c:	681b      	ldr	r3, [r3, #0]
 801e78e:	68ba      	ldr	r2, [r7, #8]
 801e790:	0151      	lsls	r1, r2, #5
 801e792:	68fa      	ldr	r2, [r7, #12]
 801e794:	440a      	add	r2, r1
 801e796:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e79a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801e79e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801e7a0:	68fb      	ldr	r3, [r7, #12]
 801e7a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e7a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e7a8:	683b      	ldr	r3, [r7, #0]
 801e7aa:	781b      	ldrb	r3, [r3, #0]
 801e7ac:	f003 030f 	and.w	r3, r3, #15
 801e7b0:	2101      	movs	r1, #1
 801e7b2:	fa01 f303 	lsl.w	r3, r1, r3
 801e7b6:	b29b      	uxth	r3, r3
 801e7b8:	43db      	mvns	r3, r3
 801e7ba:	68f9      	ldr	r1, [r7, #12]
 801e7bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e7c0:	4013      	ands	r3, r2
 801e7c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801e7c4:	68fb      	ldr	r3, [r7, #12]
 801e7c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e7ca:	69da      	ldr	r2, [r3, #28]
 801e7cc:	683b      	ldr	r3, [r7, #0]
 801e7ce:	781b      	ldrb	r3, [r3, #0]
 801e7d0:	f003 030f 	and.w	r3, r3, #15
 801e7d4:	2101      	movs	r1, #1
 801e7d6:	fa01 f303 	lsl.w	r3, r1, r3
 801e7da:	b29b      	uxth	r3, r3
 801e7dc:	43db      	mvns	r3, r3
 801e7de:	68f9      	ldr	r1, [r7, #12]
 801e7e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e7e4:	4013      	ands	r3, r2
 801e7e6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801e7e8:	68bb      	ldr	r3, [r7, #8]
 801e7ea:	015a      	lsls	r2, r3, #5
 801e7ec:	68fb      	ldr	r3, [r7, #12]
 801e7ee:	4413      	add	r3, r2
 801e7f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e7f4:	681a      	ldr	r2, [r3, #0]
 801e7f6:	68bb      	ldr	r3, [r7, #8]
 801e7f8:	0159      	lsls	r1, r3, #5
 801e7fa:	68fb      	ldr	r3, [r7, #12]
 801e7fc:	440b      	add	r3, r1
 801e7fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e802:	4619      	mov	r1, r3
 801e804:	4b35      	ldr	r3, [pc, #212]	; (801e8dc <USB_DeactivateEndpoint+0x1b0>)
 801e806:	4013      	ands	r3, r2
 801e808:	600b      	str	r3, [r1, #0]
 801e80a:	e060      	b.n	801e8ce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801e80c:	68bb      	ldr	r3, [r7, #8]
 801e80e:	015a      	lsls	r2, r3, #5
 801e810:	68fb      	ldr	r3, [r7, #12]
 801e812:	4413      	add	r3, r2
 801e814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e818:	681b      	ldr	r3, [r3, #0]
 801e81a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801e81e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801e822:	d11f      	bne.n	801e864 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801e824:	68bb      	ldr	r3, [r7, #8]
 801e826:	015a      	lsls	r2, r3, #5
 801e828:	68fb      	ldr	r3, [r7, #12]
 801e82a:	4413      	add	r3, r2
 801e82c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e830:	681b      	ldr	r3, [r3, #0]
 801e832:	68ba      	ldr	r2, [r7, #8]
 801e834:	0151      	lsls	r1, r2, #5
 801e836:	68fa      	ldr	r2, [r7, #12]
 801e838:	440a      	add	r2, r1
 801e83a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e83e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801e842:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801e844:	68bb      	ldr	r3, [r7, #8]
 801e846:	015a      	lsls	r2, r3, #5
 801e848:	68fb      	ldr	r3, [r7, #12]
 801e84a:	4413      	add	r3, r2
 801e84c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e850:	681b      	ldr	r3, [r3, #0]
 801e852:	68ba      	ldr	r2, [r7, #8]
 801e854:	0151      	lsls	r1, r2, #5
 801e856:	68fa      	ldr	r2, [r7, #12]
 801e858:	440a      	add	r2, r1
 801e85a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e85e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801e862:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801e864:	68fb      	ldr	r3, [r7, #12]
 801e866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e86a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e86c:	683b      	ldr	r3, [r7, #0]
 801e86e:	781b      	ldrb	r3, [r3, #0]
 801e870:	f003 030f 	and.w	r3, r3, #15
 801e874:	2101      	movs	r1, #1
 801e876:	fa01 f303 	lsl.w	r3, r1, r3
 801e87a:	041b      	lsls	r3, r3, #16
 801e87c:	43db      	mvns	r3, r3
 801e87e:	68f9      	ldr	r1, [r7, #12]
 801e880:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e884:	4013      	ands	r3, r2
 801e886:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801e888:	68fb      	ldr	r3, [r7, #12]
 801e88a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e88e:	69da      	ldr	r2, [r3, #28]
 801e890:	683b      	ldr	r3, [r7, #0]
 801e892:	781b      	ldrb	r3, [r3, #0]
 801e894:	f003 030f 	and.w	r3, r3, #15
 801e898:	2101      	movs	r1, #1
 801e89a:	fa01 f303 	lsl.w	r3, r1, r3
 801e89e:	041b      	lsls	r3, r3, #16
 801e8a0:	43db      	mvns	r3, r3
 801e8a2:	68f9      	ldr	r1, [r7, #12]
 801e8a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e8a8:	4013      	ands	r3, r2
 801e8aa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801e8ac:	68bb      	ldr	r3, [r7, #8]
 801e8ae:	015a      	lsls	r2, r3, #5
 801e8b0:	68fb      	ldr	r3, [r7, #12]
 801e8b2:	4413      	add	r3, r2
 801e8b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e8b8:	681a      	ldr	r2, [r3, #0]
 801e8ba:	68bb      	ldr	r3, [r7, #8]
 801e8bc:	0159      	lsls	r1, r3, #5
 801e8be:	68fb      	ldr	r3, [r7, #12]
 801e8c0:	440b      	add	r3, r1
 801e8c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e8c6:	4619      	mov	r1, r3
 801e8c8:	4b05      	ldr	r3, [pc, #20]	; (801e8e0 <USB_DeactivateEndpoint+0x1b4>)
 801e8ca:	4013      	ands	r3, r2
 801e8cc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801e8ce:	2300      	movs	r3, #0
}
 801e8d0:	4618      	mov	r0, r3
 801e8d2:	3714      	adds	r7, #20
 801e8d4:	46bd      	mov	sp, r7
 801e8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8da:	4770      	bx	lr
 801e8dc:	ec337800 	.word	0xec337800
 801e8e0:	eff37800 	.word	0xeff37800

0801e8e4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801e8e4:	b580      	push	{r7, lr}
 801e8e6:	b08a      	sub	sp, #40	; 0x28
 801e8e8:	af02      	add	r7, sp, #8
 801e8ea:	60f8      	str	r0, [r7, #12]
 801e8ec:	60b9      	str	r1, [r7, #8]
 801e8ee:	4613      	mov	r3, r2
 801e8f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e8f2:	68fb      	ldr	r3, [r7, #12]
 801e8f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801e8f6:	68bb      	ldr	r3, [r7, #8]
 801e8f8:	781b      	ldrb	r3, [r3, #0]
 801e8fa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801e8fc:	68bb      	ldr	r3, [r7, #8]
 801e8fe:	785b      	ldrb	r3, [r3, #1]
 801e900:	2b01      	cmp	r3, #1
 801e902:	f040 815c 	bne.w	801ebbe <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801e906:	68bb      	ldr	r3, [r7, #8]
 801e908:	695b      	ldr	r3, [r3, #20]
 801e90a:	2b00      	cmp	r3, #0
 801e90c:	d132      	bne.n	801e974 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801e90e:	69bb      	ldr	r3, [r7, #24]
 801e910:	015a      	lsls	r2, r3, #5
 801e912:	69fb      	ldr	r3, [r7, #28]
 801e914:	4413      	add	r3, r2
 801e916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e91a:	691b      	ldr	r3, [r3, #16]
 801e91c:	69ba      	ldr	r2, [r7, #24]
 801e91e:	0151      	lsls	r1, r2, #5
 801e920:	69fa      	ldr	r2, [r7, #28]
 801e922:	440a      	add	r2, r1
 801e924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e928:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e92c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e930:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801e932:	69bb      	ldr	r3, [r7, #24]
 801e934:	015a      	lsls	r2, r3, #5
 801e936:	69fb      	ldr	r3, [r7, #28]
 801e938:	4413      	add	r3, r2
 801e93a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e93e:	691b      	ldr	r3, [r3, #16]
 801e940:	69ba      	ldr	r2, [r7, #24]
 801e942:	0151      	lsls	r1, r2, #5
 801e944:	69fa      	ldr	r2, [r7, #28]
 801e946:	440a      	add	r2, r1
 801e948:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e94c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801e950:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801e952:	69bb      	ldr	r3, [r7, #24]
 801e954:	015a      	lsls	r2, r3, #5
 801e956:	69fb      	ldr	r3, [r7, #28]
 801e958:	4413      	add	r3, r2
 801e95a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e95e:	691b      	ldr	r3, [r3, #16]
 801e960:	69ba      	ldr	r2, [r7, #24]
 801e962:	0151      	lsls	r1, r2, #5
 801e964:	69fa      	ldr	r2, [r7, #28]
 801e966:	440a      	add	r2, r1
 801e968:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e96c:	0cdb      	lsrs	r3, r3, #19
 801e96e:	04db      	lsls	r3, r3, #19
 801e970:	6113      	str	r3, [r2, #16]
 801e972:	e074      	b.n	801ea5e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801e974:	69bb      	ldr	r3, [r7, #24]
 801e976:	015a      	lsls	r2, r3, #5
 801e978:	69fb      	ldr	r3, [r7, #28]
 801e97a:	4413      	add	r3, r2
 801e97c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e980:	691b      	ldr	r3, [r3, #16]
 801e982:	69ba      	ldr	r2, [r7, #24]
 801e984:	0151      	lsls	r1, r2, #5
 801e986:	69fa      	ldr	r2, [r7, #28]
 801e988:	440a      	add	r2, r1
 801e98a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e98e:	0cdb      	lsrs	r3, r3, #19
 801e990:	04db      	lsls	r3, r3, #19
 801e992:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801e994:	69bb      	ldr	r3, [r7, #24]
 801e996:	015a      	lsls	r2, r3, #5
 801e998:	69fb      	ldr	r3, [r7, #28]
 801e99a:	4413      	add	r3, r2
 801e99c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e9a0:	691b      	ldr	r3, [r3, #16]
 801e9a2:	69ba      	ldr	r2, [r7, #24]
 801e9a4:	0151      	lsls	r1, r2, #5
 801e9a6:	69fa      	ldr	r2, [r7, #28]
 801e9a8:	440a      	add	r2, r1
 801e9aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e9ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e9b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e9b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801e9b8:	69bb      	ldr	r3, [r7, #24]
 801e9ba:	015a      	lsls	r2, r3, #5
 801e9bc:	69fb      	ldr	r3, [r7, #28]
 801e9be:	4413      	add	r3, r2
 801e9c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e9c4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801e9c6:	68bb      	ldr	r3, [r7, #8]
 801e9c8:	6959      	ldr	r1, [r3, #20]
 801e9ca:	68bb      	ldr	r3, [r7, #8]
 801e9cc:	689b      	ldr	r3, [r3, #8]
 801e9ce:	440b      	add	r3, r1
 801e9d0:	1e59      	subs	r1, r3, #1
 801e9d2:	68bb      	ldr	r3, [r7, #8]
 801e9d4:	689b      	ldr	r3, [r3, #8]
 801e9d6:	fbb1 f3f3 	udiv	r3, r1, r3
 801e9da:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801e9dc:	4b9d      	ldr	r3, [pc, #628]	; (801ec54 <USB_EPStartXfer+0x370>)
 801e9de:	400b      	ands	r3, r1
 801e9e0:	69b9      	ldr	r1, [r7, #24]
 801e9e2:	0148      	lsls	r0, r1, #5
 801e9e4:	69f9      	ldr	r1, [r7, #28]
 801e9e6:	4401      	add	r1, r0
 801e9e8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801e9ec:	4313      	orrs	r3, r2
 801e9ee:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801e9f0:	69bb      	ldr	r3, [r7, #24]
 801e9f2:	015a      	lsls	r2, r3, #5
 801e9f4:	69fb      	ldr	r3, [r7, #28]
 801e9f6:	4413      	add	r3, r2
 801e9f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e9fc:	691a      	ldr	r2, [r3, #16]
 801e9fe:	68bb      	ldr	r3, [r7, #8]
 801ea00:	695b      	ldr	r3, [r3, #20]
 801ea02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801ea06:	69b9      	ldr	r1, [r7, #24]
 801ea08:	0148      	lsls	r0, r1, #5
 801ea0a:	69f9      	ldr	r1, [r7, #28]
 801ea0c:	4401      	add	r1, r0
 801ea0e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801ea12:	4313      	orrs	r3, r2
 801ea14:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801ea16:	68bb      	ldr	r3, [r7, #8]
 801ea18:	78db      	ldrb	r3, [r3, #3]
 801ea1a:	2b01      	cmp	r3, #1
 801ea1c:	d11f      	bne.n	801ea5e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801ea1e:	69bb      	ldr	r3, [r7, #24]
 801ea20:	015a      	lsls	r2, r3, #5
 801ea22:	69fb      	ldr	r3, [r7, #28]
 801ea24:	4413      	add	r3, r2
 801ea26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ea2a:	691b      	ldr	r3, [r3, #16]
 801ea2c:	69ba      	ldr	r2, [r7, #24]
 801ea2e:	0151      	lsls	r1, r2, #5
 801ea30:	69fa      	ldr	r2, [r7, #28]
 801ea32:	440a      	add	r2, r1
 801ea34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ea38:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801ea3c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801ea3e:	69bb      	ldr	r3, [r7, #24]
 801ea40:	015a      	lsls	r2, r3, #5
 801ea42:	69fb      	ldr	r3, [r7, #28]
 801ea44:	4413      	add	r3, r2
 801ea46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ea4a:	691b      	ldr	r3, [r3, #16]
 801ea4c:	69ba      	ldr	r2, [r7, #24]
 801ea4e:	0151      	lsls	r1, r2, #5
 801ea50:	69fa      	ldr	r2, [r7, #28]
 801ea52:	440a      	add	r2, r1
 801ea54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ea58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801ea5c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801ea5e:	79fb      	ldrb	r3, [r7, #7]
 801ea60:	2b01      	cmp	r3, #1
 801ea62:	d14b      	bne.n	801eafc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801ea64:	68bb      	ldr	r3, [r7, #8]
 801ea66:	691b      	ldr	r3, [r3, #16]
 801ea68:	2b00      	cmp	r3, #0
 801ea6a:	d009      	beq.n	801ea80 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801ea6c:	69bb      	ldr	r3, [r7, #24]
 801ea6e:	015a      	lsls	r2, r3, #5
 801ea70:	69fb      	ldr	r3, [r7, #28]
 801ea72:	4413      	add	r3, r2
 801ea74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ea78:	461a      	mov	r2, r3
 801ea7a:	68bb      	ldr	r3, [r7, #8]
 801ea7c:	691b      	ldr	r3, [r3, #16]
 801ea7e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801ea80:	68bb      	ldr	r3, [r7, #8]
 801ea82:	78db      	ldrb	r3, [r3, #3]
 801ea84:	2b01      	cmp	r3, #1
 801ea86:	d128      	bne.n	801eada <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801ea88:	69fb      	ldr	r3, [r7, #28]
 801ea8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ea8e:	689b      	ldr	r3, [r3, #8]
 801ea90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ea94:	2b00      	cmp	r3, #0
 801ea96:	d110      	bne.n	801eaba <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801ea98:	69bb      	ldr	r3, [r7, #24]
 801ea9a:	015a      	lsls	r2, r3, #5
 801ea9c:	69fb      	ldr	r3, [r7, #28]
 801ea9e:	4413      	add	r3, r2
 801eaa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801eaa4:	681b      	ldr	r3, [r3, #0]
 801eaa6:	69ba      	ldr	r2, [r7, #24]
 801eaa8:	0151      	lsls	r1, r2, #5
 801eaaa:	69fa      	ldr	r2, [r7, #28]
 801eaac:	440a      	add	r2, r1
 801eaae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801eab2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801eab6:	6013      	str	r3, [r2, #0]
 801eab8:	e00f      	b.n	801eada <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801eaba:	69bb      	ldr	r3, [r7, #24]
 801eabc:	015a      	lsls	r2, r3, #5
 801eabe:	69fb      	ldr	r3, [r7, #28]
 801eac0:	4413      	add	r3, r2
 801eac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801eac6:	681b      	ldr	r3, [r3, #0]
 801eac8:	69ba      	ldr	r2, [r7, #24]
 801eaca:	0151      	lsls	r1, r2, #5
 801eacc:	69fa      	ldr	r2, [r7, #28]
 801eace:	440a      	add	r2, r1
 801ead0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ead4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801ead8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801eada:	69bb      	ldr	r3, [r7, #24]
 801eadc:	015a      	lsls	r2, r3, #5
 801eade:	69fb      	ldr	r3, [r7, #28]
 801eae0:	4413      	add	r3, r2
 801eae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801eae6:	681b      	ldr	r3, [r3, #0]
 801eae8:	69ba      	ldr	r2, [r7, #24]
 801eaea:	0151      	lsls	r1, r2, #5
 801eaec:	69fa      	ldr	r2, [r7, #28]
 801eaee:	440a      	add	r2, r1
 801eaf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801eaf4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801eaf8:	6013      	str	r3, [r2, #0]
 801eafa:	e12f      	b.n	801ed5c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801eafc:	69bb      	ldr	r3, [r7, #24]
 801eafe:	015a      	lsls	r2, r3, #5
 801eb00:	69fb      	ldr	r3, [r7, #28]
 801eb02:	4413      	add	r3, r2
 801eb04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801eb08:	681b      	ldr	r3, [r3, #0]
 801eb0a:	69ba      	ldr	r2, [r7, #24]
 801eb0c:	0151      	lsls	r1, r2, #5
 801eb0e:	69fa      	ldr	r2, [r7, #28]
 801eb10:	440a      	add	r2, r1
 801eb12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801eb16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801eb1a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801eb1c:	68bb      	ldr	r3, [r7, #8]
 801eb1e:	78db      	ldrb	r3, [r3, #3]
 801eb20:	2b01      	cmp	r3, #1
 801eb22:	d015      	beq.n	801eb50 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801eb24:	68bb      	ldr	r3, [r7, #8]
 801eb26:	695b      	ldr	r3, [r3, #20]
 801eb28:	2b00      	cmp	r3, #0
 801eb2a:	f000 8117 	beq.w	801ed5c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801eb2e:	69fb      	ldr	r3, [r7, #28]
 801eb30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801eb34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801eb36:	68bb      	ldr	r3, [r7, #8]
 801eb38:	781b      	ldrb	r3, [r3, #0]
 801eb3a:	f003 030f 	and.w	r3, r3, #15
 801eb3e:	2101      	movs	r1, #1
 801eb40:	fa01 f303 	lsl.w	r3, r1, r3
 801eb44:	69f9      	ldr	r1, [r7, #28]
 801eb46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801eb4a:	4313      	orrs	r3, r2
 801eb4c:	634b      	str	r3, [r1, #52]	; 0x34
 801eb4e:	e105      	b.n	801ed5c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801eb50:	69fb      	ldr	r3, [r7, #28]
 801eb52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801eb56:	689b      	ldr	r3, [r3, #8]
 801eb58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801eb5c:	2b00      	cmp	r3, #0
 801eb5e:	d110      	bne.n	801eb82 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801eb60:	69bb      	ldr	r3, [r7, #24]
 801eb62:	015a      	lsls	r2, r3, #5
 801eb64:	69fb      	ldr	r3, [r7, #28]
 801eb66:	4413      	add	r3, r2
 801eb68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801eb6c:	681b      	ldr	r3, [r3, #0]
 801eb6e:	69ba      	ldr	r2, [r7, #24]
 801eb70:	0151      	lsls	r1, r2, #5
 801eb72:	69fa      	ldr	r2, [r7, #28]
 801eb74:	440a      	add	r2, r1
 801eb76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801eb7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801eb7e:	6013      	str	r3, [r2, #0]
 801eb80:	e00f      	b.n	801eba2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801eb82:	69bb      	ldr	r3, [r7, #24]
 801eb84:	015a      	lsls	r2, r3, #5
 801eb86:	69fb      	ldr	r3, [r7, #28]
 801eb88:	4413      	add	r3, r2
 801eb8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801eb8e:	681b      	ldr	r3, [r3, #0]
 801eb90:	69ba      	ldr	r2, [r7, #24]
 801eb92:	0151      	lsls	r1, r2, #5
 801eb94:	69fa      	ldr	r2, [r7, #28]
 801eb96:	440a      	add	r2, r1
 801eb98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801eb9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801eba0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801eba2:	68bb      	ldr	r3, [r7, #8]
 801eba4:	68d9      	ldr	r1, [r3, #12]
 801eba6:	68bb      	ldr	r3, [r7, #8]
 801eba8:	781a      	ldrb	r2, [r3, #0]
 801ebaa:	68bb      	ldr	r3, [r7, #8]
 801ebac:	695b      	ldr	r3, [r3, #20]
 801ebae:	b298      	uxth	r0, r3
 801ebb0:	79fb      	ldrb	r3, [r7, #7]
 801ebb2:	9300      	str	r3, [sp, #0]
 801ebb4:	4603      	mov	r3, r0
 801ebb6:	68f8      	ldr	r0, [r7, #12]
 801ebb8:	f000 fa2b 	bl	801f012 <USB_WritePacket>
 801ebbc:	e0ce      	b.n	801ed5c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801ebbe:	69bb      	ldr	r3, [r7, #24]
 801ebc0:	015a      	lsls	r2, r3, #5
 801ebc2:	69fb      	ldr	r3, [r7, #28]
 801ebc4:	4413      	add	r3, r2
 801ebc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ebca:	691b      	ldr	r3, [r3, #16]
 801ebcc:	69ba      	ldr	r2, [r7, #24]
 801ebce:	0151      	lsls	r1, r2, #5
 801ebd0:	69fa      	ldr	r2, [r7, #28]
 801ebd2:	440a      	add	r2, r1
 801ebd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ebd8:	0cdb      	lsrs	r3, r3, #19
 801ebda:	04db      	lsls	r3, r3, #19
 801ebdc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801ebde:	69bb      	ldr	r3, [r7, #24]
 801ebe0:	015a      	lsls	r2, r3, #5
 801ebe2:	69fb      	ldr	r3, [r7, #28]
 801ebe4:	4413      	add	r3, r2
 801ebe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ebea:	691b      	ldr	r3, [r3, #16]
 801ebec:	69ba      	ldr	r2, [r7, #24]
 801ebee:	0151      	lsls	r1, r2, #5
 801ebf0:	69fa      	ldr	r2, [r7, #28]
 801ebf2:	440a      	add	r2, r1
 801ebf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ebf8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801ebfc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801ec00:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 801ec02:	68bb      	ldr	r3, [r7, #8]
 801ec04:	695b      	ldr	r3, [r3, #20]
 801ec06:	2b00      	cmp	r3, #0
 801ec08:	d126      	bne.n	801ec58 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801ec0a:	69bb      	ldr	r3, [r7, #24]
 801ec0c:	015a      	lsls	r2, r3, #5
 801ec0e:	69fb      	ldr	r3, [r7, #28]
 801ec10:	4413      	add	r3, r2
 801ec12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ec16:	691a      	ldr	r2, [r3, #16]
 801ec18:	68bb      	ldr	r3, [r7, #8]
 801ec1a:	689b      	ldr	r3, [r3, #8]
 801ec1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801ec20:	69b9      	ldr	r1, [r7, #24]
 801ec22:	0148      	lsls	r0, r1, #5
 801ec24:	69f9      	ldr	r1, [r7, #28]
 801ec26:	4401      	add	r1, r0
 801ec28:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801ec2c:	4313      	orrs	r3, r2
 801ec2e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801ec30:	69bb      	ldr	r3, [r7, #24]
 801ec32:	015a      	lsls	r2, r3, #5
 801ec34:	69fb      	ldr	r3, [r7, #28]
 801ec36:	4413      	add	r3, r2
 801ec38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ec3c:	691b      	ldr	r3, [r3, #16]
 801ec3e:	69ba      	ldr	r2, [r7, #24]
 801ec40:	0151      	lsls	r1, r2, #5
 801ec42:	69fa      	ldr	r2, [r7, #28]
 801ec44:	440a      	add	r2, r1
 801ec46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ec4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801ec4e:	6113      	str	r3, [r2, #16]
 801ec50:	e036      	b.n	801ecc0 <USB_EPStartXfer+0x3dc>
 801ec52:	bf00      	nop
 801ec54:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801ec58:	68bb      	ldr	r3, [r7, #8]
 801ec5a:	695a      	ldr	r2, [r3, #20]
 801ec5c:	68bb      	ldr	r3, [r7, #8]
 801ec5e:	689b      	ldr	r3, [r3, #8]
 801ec60:	4413      	add	r3, r2
 801ec62:	1e5a      	subs	r2, r3, #1
 801ec64:	68bb      	ldr	r3, [r7, #8]
 801ec66:	689b      	ldr	r3, [r3, #8]
 801ec68:	fbb2 f3f3 	udiv	r3, r2, r3
 801ec6c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801ec6e:	69bb      	ldr	r3, [r7, #24]
 801ec70:	015a      	lsls	r2, r3, #5
 801ec72:	69fb      	ldr	r3, [r7, #28]
 801ec74:	4413      	add	r3, r2
 801ec76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ec7a:	691a      	ldr	r2, [r3, #16]
 801ec7c:	8afb      	ldrh	r3, [r7, #22]
 801ec7e:	04d9      	lsls	r1, r3, #19
 801ec80:	4b39      	ldr	r3, [pc, #228]	; (801ed68 <USB_EPStartXfer+0x484>)
 801ec82:	400b      	ands	r3, r1
 801ec84:	69b9      	ldr	r1, [r7, #24]
 801ec86:	0148      	lsls	r0, r1, #5
 801ec88:	69f9      	ldr	r1, [r7, #28]
 801ec8a:	4401      	add	r1, r0
 801ec8c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801ec90:	4313      	orrs	r3, r2
 801ec92:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 801ec94:	69bb      	ldr	r3, [r7, #24]
 801ec96:	015a      	lsls	r2, r3, #5
 801ec98:	69fb      	ldr	r3, [r7, #28]
 801ec9a:	4413      	add	r3, r2
 801ec9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eca0:	691a      	ldr	r2, [r3, #16]
 801eca2:	68bb      	ldr	r3, [r7, #8]
 801eca4:	689b      	ldr	r3, [r3, #8]
 801eca6:	8af9      	ldrh	r1, [r7, #22]
 801eca8:	fb01 f303 	mul.w	r3, r1, r3
 801ecac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801ecb0:	69b9      	ldr	r1, [r7, #24]
 801ecb2:	0148      	lsls	r0, r1, #5
 801ecb4:	69f9      	ldr	r1, [r7, #28]
 801ecb6:	4401      	add	r1, r0
 801ecb8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801ecbc:	4313      	orrs	r3, r2
 801ecbe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801ecc0:	79fb      	ldrb	r3, [r7, #7]
 801ecc2:	2b01      	cmp	r3, #1
 801ecc4:	d10d      	bne.n	801ece2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801ecc6:	68bb      	ldr	r3, [r7, #8]
 801ecc8:	68db      	ldr	r3, [r3, #12]
 801ecca:	2b00      	cmp	r3, #0
 801eccc:	d009      	beq.n	801ece2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801ecce:	68bb      	ldr	r3, [r7, #8]
 801ecd0:	68d9      	ldr	r1, [r3, #12]
 801ecd2:	69bb      	ldr	r3, [r7, #24]
 801ecd4:	015a      	lsls	r2, r3, #5
 801ecd6:	69fb      	ldr	r3, [r7, #28]
 801ecd8:	4413      	add	r3, r2
 801ecda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ecde:	460a      	mov	r2, r1
 801ece0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801ece2:	68bb      	ldr	r3, [r7, #8]
 801ece4:	78db      	ldrb	r3, [r3, #3]
 801ece6:	2b01      	cmp	r3, #1
 801ece8:	d128      	bne.n	801ed3c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801ecea:	69fb      	ldr	r3, [r7, #28]
 801ecec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ecf0:	689b      	ldr	r3, [r3, #8]
 801ecf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ecf6:	2b00      	cmp	r3, #0
 801ecf8:	d110      	bne.n	801ed1c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801ecfa:	69bb      	ldr	r3, [r7, #24]
 801ecfc:	015a      	lsls	r2, r3, #5
 801ecfe:	69fb      	ldr	r3, [r7, #28]
 801ed00:	4413      	add	r3, r2
 801ed02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ed06:	681b      	ldr	r3, [r3, #0]
 801ed08:	69ba      	ldr	r2, [r7, #24]
 801ed0a:	0151      	lsls	r1, r2, #5
 801ed0c:	69fa      	ldr	r2, [r7, #28]
 801ed0e:	440a      	add	r2, r1
 801ed10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ed14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801ed18:	6013      	str	r3, [r2, #0]
 801ed1a:	e00f      	b.n	801ed3c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801ed1c:	69bb      	ldr	r3, [r7, #24]
 801ed1e:	015a      	lsls	r2, r3, #5
 801ed20:	69fb      	ldr	r3, [r7, #28]
 801ed22:	4413      	add	r3, r2
 801ed24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ed28:	681b      	ldr	r3, [r3, #0]
 801ed2a:	69ba      	ldr	r2, [r7, #24]
 801ed2c:	0151      	lsls	r1, r2, #5
 801ed2e:	69fa      	ldr	r2, [r7, #28]
 801ed30:	440a      	add	r2, r1
 801ed32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ed36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801ed3a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801ed3c:	69bb      	ldr	r3, [r7, #24]
 801ed3e:	015a      	lsls	r2, r3, #5
 801ed40:	69fb      	ldr	r3, [r7, #28]
 801ed42:	4413      	add	r3, r2
 801ed44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ed48:	681b      	ldr	r3, [r3, #0]
 801ed4a:	69ba      	ldr	r2, [r7, #24]
 801ed4c:	0151      	lsls	r1, r2, #5
 801ed4e:	69fa      	ldr	r2, [r7, #28]
 801ed50:	440a      	add	r2, r1
 801ed52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ed56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801ed5a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801ed5c:	2300      	movs	r3, #0
}
 801ed5e:	4618      	mov	r0, r3
 801ed60:	3720      	adds	r7, #32
 801ed62:	46bd      	mov	sp, r7
 801ed64:	bd80      	pop	{r7, pc}
 801ed66:	bf00      	nop
 801ed68:	1ff80000 	.word	0x1ff80000

0801ed6c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801ed6c:	b480      	push	{r7}
 801ed6e:	b087      	sub	sp, #28
 801ed70:	af00      	add	r7, sp, #0
 801ed72:	60f8      	str	r0, [r7, #12]
 801ed74:	60b9      	str	r1, [r7, #8]
 801ed76:	4613      	mov	r3, r2
 801ed78:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ed7a:	68fb      	ldr	r3, [r7, #12]
 801ed7c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801ed7e:	68bb      	ldr	r3, [r7, #8]
 801ed80:	781b      	ldrb	r3, [r3, #0]
 801ed82:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801ed84:	68bb      	ldr	r3, [r7, #8]
 801ed86:	785b      	ldrb	r3, [r3, #1]
 801ed88:	2b01      	cmp	r3, #1
 801ed8a:	f040 80cd 	bne.w	801ef28 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801ed8e:	68bb      	ldr	r3, [r7, #8]
 801ed90:	695b      	ldr	r3, [r3, #20]
 801ed92:	2b00      	cmp	r3, #0
 801ed94:	d132      	bne.n	801edfc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801ed96:	693b      	ldr	r3, [r7, #16]
 801ed98:	015a      	lsls	r2, r3, #5
 801ed9a:	697b      	ldr	r3, [r7, #20]
 801ed9c:	4413      	add	r3, r2
 801ed9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801eda2:	691b      	ldr	r3, [r3, #16]
 801eda4:	693a      	ldr	r2, [r7, #16]
 801eda6:	0151      	lsls	r1, r2, #5
 801eda8:	697a      	ldr	r2, [r7, #20]
 801edaa:	440a      	add	r2, r1
 801edac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801edb0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801edb4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801edb8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801edba:	693b      	ldr	r3, [r7, #16]
 801edbc:	015a      	lsls	r2, r3, #5
 801edbe:	697b      	ldr	r3, [r7, #20]
 801edc0:	4413      	add	r3, r2
 801edc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801edc6:	691b      	ldr	r3, [r3, #16]
 801edc8:	693a      	ldr	r2, [r7, #16]
 801edca:	0151      	lsls	r1, r2, #5
 801edcc:	697a      	ldr	r2, [r7, #20]
 801edce:	440a      	add	r2, r1
 801edd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801edd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801edd8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801edda:	693b      	ldr	r3, [r7, #16]
 801eddc:	015a      	lsls	r2, r3, #5
 801edde:	697b      	ldr	r3, [r7, #20]
 801ede0:	4413      	add	r3, r2
 801ede2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ede6:	691b      	ldr	r3, [r3, #16]
 801ede8:	693a      	ldr	r2, [r7, #16]
 801edea:	0151      	lsls	r1, r2, #5
 801edec:	697a      	ldr	r2, [r7, #20]
 801edee:	440a      	add	r2, r1
 801edf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801edf4:	0cdb      	lsrs	r3, r3, #19
 801edf6:	04db      	lsls	r3, r3, #19
 801edf8:	6113      	str	r3, [r2, #16]
 801edfa:	e04e      	b.n	801ee9a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801edfc:	693b      	ldr	r3, [r7, #16]
 801edfe:	015a      	lsls	r2, r3, #5
 801ee00:	697b      	ldr	r3, [r7, #20]
 801ee02:	4413      	add	r3, r2
 801ee04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ee08:	691b      	ldr	r3, [r3, #16]
 801ee0a:	693a      	ldr	r2, [r7, #16]
 801ee0c:	0151      	lsls	r1, r2, #5
 801ee0e:	697a      	ldr	r2, [r7, #20]
 801ee10:	440a      	add	r2, r1
 801ee12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ee16:	0cdb      	lsrs	r3, r3, #19
 801ee18:	04db      	lsls	r3, r3, #19
 801ee1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801ee1c:	693b      	ldr	r3, [r7, #16]
 801ee1e:	015a      	lsls	r2, r3, #5
 801ee20:	697b      	ldr	r3, [r7, #20]
 801ee22:	4413      	add	r3, r2
 801ee24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ee28:	691b      	ldr	r3, [r3, #16]
 801ee2a:	693a      	ldr	r2, [r7, #16]
 801ee2c:	0151      	lsls	r1, r2, #5
 801ee2e:	697a      	ldr	r2, [r7, #20]
 801ee30:	440a      	add	r2, r1
 801ee32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ee36:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801ee3a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801ee3e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 801ee40:	68bb      	ldr	r3, [r7, #8]
 801ee42:	695a      	ldr	r2, [r3, #20]
 801ee44:	68bb      	ldr	r3, [r7, #8]
 801ee46:	689b      	ldr	r3, [r3, #8]
 801ee48:	429a      	cmp	r2, r3
 801ee4a:	d903      	bls.n	801ee54 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 801ee4c:	68bb      	ldr	r3, [r7, #8]
 801ee4e:	689a      	ldr	r2, [r3, #8]
 801ee50:	68bb      	ldr	r3, [r7, #8]
 801ee52:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801ee54:	693b      	ldr	r3, [r7, #16]
 801ee56:	015a      	lsls	r2, r3, #5
 801ee58:	697b      	ldr	r3, [r7, #20]
 801ee5a:	4413      	add	r3, r2
 801ee5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ee60:	691b      	ldr	r3, [r3, #16]
 801ee62:	693a      	ldr	r2, [r7, #16]
 801ee64:	0151      	lsls	r1, r2, #5
 801ee66:	697a      	ldr	r2, [r7, #20]
 801ee68:	440a      	add	r2, r1
 801ee6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ee6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801ee72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801ee74:	693b      	ldr	r3, [r7, #16]
 801ee76:	015a      	lsls	r2, r3, #5
 801ee78:	697b      	ldr	r3, [r7, #20]
 801ee7a:	4413      	add	r3, r2
 801ee7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ee80:	691a      	ldr	r2, [r3, #16]
 801ee82:	68bb      	ldr	r3, [r7, #8]
 801ee84:	695b      	ldr	r3, [r3, #20]
 801ee86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801ee8a:	6939      	ldr	r1, [r7, #16]
 801ee8c:	0148      	lsls	r0, r1, #5
 801ee8e:	6979      	ldr	r1, [r7, #20]
 801ee90:	4401      	add	r1, r0
 801ee92:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801ee96:	4313      	orrs	r3, r2
 801ee98:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801ee9a:	79fb      	ldrb	r3, [r7, #7]
 801ee9c:	2b01      	cmp	r3, #1
 801ee9e:	d11e      	bne.n	801eede <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801eea0:	68bb      	ldr	r3, [r7, #8]
 801eea2:	691b      	ldr	r3, [r3, #16]
 801eea4:	2b00      	cmp	r3, #0
 801eea6:	d009      	beq.n	801eebc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801eea8:	693b      	ldr	r3, [r7, #16]
 801eeaa:	015a      	lsls	r2, r3, #5
 801eeac:	697b      	ldr	r3, [r7, #20]
 801eeae:	4413      	add	r3, r2
 801eeb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801eeb4:	461a      	mov	r2, r3
 801eeb6:	68bb      	ldr	r3, [r7, #8]
 801eeb8:	691b      	ldr	r3, [r3, #16]
 801eeba:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801eebc:	693b      	ldr	r3, [r7, #16]
 801eebe:	015a      	lsls	r2, r3, #5
 801eec0:	697b      	ldr	r3, [r7, #20]
 801eec2:	4413      	add	r3, r2
 801eec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801eec8:	681b      	ldr	r3, [r3, #0]
 801eeca:	693a      	ldr	r2, [r7, #16]
 801eecc:	0151      	lsls	r1, r2, #5
 801eece:	697a      	ldr	r2, [r7, #20]
 801eed0:	440a      	add	r2, r1
 801eed2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801eed6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801eeda:	6013      	str	r3, [r2, #0]
 801eedc:	e092      	b.n	801f004 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801eede:	693b      	ldr	r3, [r7, #16]
 801eee0:	015a      	lsls	r2, r3, #5
 801eee2:	697b      	ldr	r3, [r7, #20]
 801eee4:	4413      	add	r3, r2
 801eee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801eeea:	681b      	ldr	r3, [r3, #0]
 801eeec:	693a      	ldr	r2, [r7, #16]
 801eeee:	0151      	lsls	r1, r2, #5
 801eef0:	697a      	ldr	r2, [r7, #20]
 801eef2:	440a      	add	r2, r1
 801eef4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801eef8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801eefc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801eefe:	68bb      	ldr	r3, [r7, #8]
 801ef00:	695b      	ldr	r3, [r3, #20]
 801ef02:	2b00      	cmp	r3, #0
 801ef04:	d07e      	beq.n	801f004 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801ef06:	697b      	ldr	r3, [r7, #20]
 801ef08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ef0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801ef0e:	68bb      	ldr	r3, [r7, #8]
 801ef10:	781b      	ldrb	r3, [r3, #0]
 801ef12:	f003 030f 	and.w	r3, r3, #15
 801ef16:	2101      	movs	r1, #1
 801ef18:	fa01 f303 	lsl.w	r3, r1, r3
 801ef1c:	6979      	ldr	r1, [r7, #20]
 801ef1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801ef22:	4313      	orrs	r3, r2
 801ef24:	634b      	str	r3, [r1, #52]	; 0x34
 801ef26:	e06d      	b.n	801f004 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801ef28:	693b      	ldr	r3, [r7, #16]
 801ef2a:	015a      	lsls	r2, r3, #5
 801ef2c:	697b      	ldr	r3, [r7, #20]
 801ef2e:	4413      	add	r3, r2
 801ef30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ef34:	691b      	ldr	r3, [r3, #16]
 801ef36:	693a      	ldr	r2, [r7, #16]
 801ef38:	0151      	lsls	r1, r2, #5
 801ef3a:	697a      	ldr	r2, [r7, #20]
 801ef3c:	440a      	add	r2, r1
 801ef3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ef42:	0cdb      	lsrs	r3, r3, #19
 801ef44:	04db      	lsls	r3, r3, #19
 801ef46:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801ef48:	693b      	ldr	r3, [r7, #16]
 801ef4a:	015a      	lsls	r2, r3, #5
 801ef4c:	697b      	ldr	r3, [r7, #20]
 801ef4e:	4413      	add	r3, r2
 801ef50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ef54:	691b      	ldr	r3, [r3, #16]
 801ef56:	693a      	ldr	r2, [r7, #16]
 801ef58:	0151      	lsls	r1, r2, #5
 801ef5a:	697a      	ldr	r2, [r7, #20]
 801ef5c:	440a      	add	r2, r1
 801ef5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ef62:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801ef66:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801ef6a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 801ef6c:	68bb      	ldr	r3, [r7, #8]
 801ef6e:	695b      	ldr	r3, [r3, #20]
 801ef70:	2b00      	cmp	r3, #0
 801ef72:	d003      	beq.n	801ef7c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 801ef74:	68bb      	ldr	r3, [r7, #8]
 801ef76:	689a      	ldr	r2, [r3, #8]
 801ef78:	68bb      	ldr	r3, [r7, #8]
 801ef7a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801ef7c:	693b      	ldr	r3, [r7, #16]
 801ef7e:	015a      	lsls	r2, r3, #5
 801ef80:	697b      	ldr	r3, [r7, #20]
 801ef82:	4413      	add	r3, r2
 801ef84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ef88:	691b      	ldr	r3, [r3, #16]
 801ef8a:	693a      	ldr	r2, [r7, #16]
 801ef8c:	0151      	lsls	r1, r2, #5
 801ef8e:	697a      	ldr	r2, [r7, #20]
 801ef90:	440a      	add	r2, r1
 801ef92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ef96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801ef9a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 801ef9c:	693b      	ldr	r3, [r7, #16]
 801ef9e:	015a      	lsls	r2, r3, #5
 801efa0:	697b      	ldr	r3, [r7, #20]
 801efa2:	4413      	add	r3, r2
 801efa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801efa8:	691a      	ldr	r2, [r3, #16]
 801efaa:	68bb      	ldr	r3, [r7, #8]
 801efac:	689b      	ldr	r3, [r3, #8]
 801efae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801efb2:	6939      	ldr	r1, [r7, #16]
 801efb4:	0148      	lsls	r0, r1, #5
 801efb6:	6979      	ldr	r1, [r7, #20]
 801efb8:	4401      	add	r1, r0
 801efba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801efbe:	4313      	orrs	r3, r2
 801efc0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 801efc2:	79fb      	ldrb	r3, [r7, #7]
 801efc4:	2b01      	cmp	r3, #1
 801efc6:	d10d      	bne.n	801efe4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801efc8:	68bb      	ldr	r3, [r7, #8]
 801efca:	68db      	ldr	r3, [r3, #12]
 801efcc:	2b00      	cmp	r3, #0
 801efce:	d009      	beq.n	801efe4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801efd0:	68bb      	ldr	r3, [r7, #8]
 801efd2:	68d9      	ldr	r1, [r3, #12]
 801efd4:	693b      	ldr	r3, [r7, #16]
 801efd6:	015a      	lsls	r2, r3, #5
 801efd8:	697b      	ldr	r3, [r7, #20]
 801efda:	4413      	add	r3, r2
 801efdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801efe0:	460a      	mov	r2, r1
 801efe2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801efe4:	693b      	ldr	r3, [r7, #16]
 801efe6:	015a      	lsls	r2, r3, #5
 801efe8:	697b      	ldr	r3, [r7, #20]
 801efea:	4413      	add	r3, r2
 801efec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eff0:	681b      	ldr	r3, [r3, #0]
 801eff2:	693a      	ldr	r2, [r7, #16]
 801eff4:	0151      	lsls	r1, r2, #5
 801eff6:	697a      	ldr	r2, [r7, #20]
 801eff8:	440a      	add	r2, r1
 801effa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801effe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801f002:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801f004:	2300      	movs	r3, #0
}
 801f006:	4618      	mov	r0, r3
 801f008:	371c      	adds	r7, #28
 801f00a:	46bd      	mov	sp, r7
 801f00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f010:	4770      	bx	lr

0801f012 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801f012:	b480      	push	{r7}
 801f014:	b089      	sub	sp, #36	; 0x24
 801f016:	af00      	add	r7, sp, #0
 801f018:	60f8      	str	r0, [r7, #12]
 801f01a:	60b9      	str	r1, [r7, #8]
 801f01c:	4611      	mov	r1, r2
 801f01e:	461a      	mov	r2, r3
 801f020:	460b      	mov	r3, r1
 801f022:	71fb      	strb	r3, [r7, #7]
 801f024:	4613      	mov	r3, r2
 801f026:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f028:	68fb      	ldr	r3, [r7, #12]
 801f02a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801f02c:	68bb      	ldr	r3, [r7, #8]
 801f02e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801f030:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801f034:	2b00      	cmp	r3, #0
 801f036:	d123      	bne.n	801f080 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801f038:	88bb      	ldrh	r3, [r7, #4]
 801f03a:	3303      	adds	r3, #3
 801f03c:	089b      	lsrs	r3, r3, #2
 801f03e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801f040:	2300      	movs	r3, #0
 801f042:	61bb      	str	r3, [r7, #24]
 801f044:	e018      	b.n	801f078 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801f046:	79fb      	ldrb	r3, [r7, #7]
 801f048:	031a      	lsls	r2, r3, #12
 801f04a:	697b      	ldr	r3, [r7, #20]
 801f04c:	4413      	add	r3, r2
 801f04e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801f052:	461a      	mov	r2, r3
 801f054:	69fb      	ldr	r3, [r7, #28]
 801f056:	681b      	ldr	r3, [r3, #0]
 801f058:	6013      	str	r3, [r2, #0]
      pSrc++;
 801f05a:	69fb      	ldr	r3, [r7, #28]
 801f05c:	3301      	adds	r3, #1
 801f05e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801f060:	69fb      	ldr	r3, [r7, #28]
 801f062:	3301      	adds	r3, #1
 801f064:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801f066:	69fb      	ldr	r3, [r7, #28]
 801f068:	3301      	adds	r3, #1
 801f06a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801f06c:	69fb      	ldr	r3, [r7, #28]
 801f06e:	3301      	adds	r3, #1
 801f070:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801f072:	69bb      	ldr	r3, [r7, #24]
 801f074:	3301      	adds	r3, #1
 801f076:	61bb      	str	r3, [r7, #24]
 801f078:	69ba      	ldr	r2, [r7, #24]
 801f07a:	693b      	ldr	r3, [r7, #16]
 801f07c:	429a      	cmp	r2, r3
 801f07e:	d3e2      	bcc.n	801f046 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801f080:	2300      	movs	r3, #0
}
 801f082:	4618      	mov	r0, r3
 801f084:	3724      	adds	r7, #36	; 0x24
 801f086:	46bd      	mov	sp, r7
 801f088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f08c:	4770      	bx	lr

0801f08e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801f08e:	b480      	push	{r7}
 801f090:	b08b      	sub	sp, #44	; 0x2c
 801f092:	af00      	add	r7, sp, #0
 801f094:	60f8      	str	r0, [r7, #12]
 801f096:	60b9      	str	r1, [r7, #8]
 801f098:	4613      	mov	r3, r2
 801f09a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f09c:	68fb      	ldr	r3, [r7, #12]
 801f09e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801f0a0:	68bb      	ldr	r3, [r7, #8]
 801f0a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801f0a4:	88fb      	ldrh	r3, [r7, #6]
 801f0a6:	089b      	lsrs	r3, r3, #2
 801f0a8:	b29b      	uxth	r3, r3
 801f0aa:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801f0ac:	88fb      	ldrh	r3, [r7, #6]
 801f0ae:	f003 0303 	and.w	r3, r3, #3
 801f0b2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801f0b4:	2300      	movs	r3, #0
 801f0b6:	623b      	str	r3, [r7, #32]
 801f0b8:	e014      	b.n	801f0e4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801f0ba:	69bb      	ldr	r3, [r7, #24]
 801f0bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801f0c0:	681a      	ldr	r2, [r3, #0]
 801f0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f0c4:	601a      	str	r2, [r3, #0]
    pDest++;
 801f0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f0c8:	3301      	adds	r3, #1
 801f0ca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801f0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f0ce:	3301      	adds	r3, #1
 801f0d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801f0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f0d4:	3301      	adds	r3, #1
 801f0d6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801f0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f0da:	3301      	adds	r3, #1
 801f0dc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 801f0de:	6a3b      	ldr	r3, [r7, #32]
 801f0e0:	3301      	adds	r3, #1
 801f0e2:	623b      	str	r3, [r7, #32]
 801f0e4:	6a3a      	ldr	r2, [r7, #32]
 801f0e6:	697b      	ldr	r3, [r7, #20]
 801f0e8:	429a      	cmp	r2, r3
 801f0ea:	d3e6      	bcc.n	801f0ba <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801f0ec:	8bfb      	ldrh	r3, [r7, #30]
 801f0ee:	2b00      	cmp	r3, #0
 801f0f0:	d01e      	beq.n	801f130 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801f0f2:	2300      	movs	r3, #0
 801f0f4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801f0f6:	69bb      	ldr	r3, [r7, #24]
 801f0f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801f0fc:	461a      	mov	r2, r3
 801f0fe:	f107 0310 	add.w	r3, r7, #16
 801f102:	6812      	ldr	r2, [r2, #0]
 801f104:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801f106:	693a      	ldr	r2, [r7, #16]
 801f108:	6a3b      	ldr	r3, [r7, #32]
 801f10a:	b2db      	uxtb	r3, r3
 801f10c:	00db      	lsls	r3, r3, #3
 801f10e:	fa22 f303 	lsr.w	r3, r2, r3
 801f112:	b2da      	uxtb	r2, r3
 801f114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f116:	701a      	strb	r2, [r3, #0]
      i++;
 801f118:	6a3b      	ldr	r3, [r7, #32]
 801f11a:	3301      	adds	r3, #1
 801f11c:	623b      	str	r3, [r7, #32]
      pDest++;
 801f11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f120:	3301      	adds	r3, #1
 801f122:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801f124:	8bfb      	ldrh	r3, [r7, #30]
 801f126:	3b01      	subs	r3, #1
 801f128:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801f12a:	8bfb      	ldrh	r3, [r7, #30]
 801f12c:	2b00      	cmp	r3, #0
 801f12e:	d1ea      	bne.n	801f106 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801f130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801f132:	4618      	mov	r0, r3
 801f134:	372c      	adds	r7, #44	; 0x2c
 801f136:	46bd      	mov	sp, r7
 801f138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f13c:	4770      	bx	lr

0801f13e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801f13e:	b480      	push	{r7}
 801f140:	b085      	sub	sp, #20
 801f142:	af00      	add	r7, sp, #0
 801f144:	6078      	str	r0, [r7, #4]
 801f146:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f148:	687b      	ldr	r3, [r7, #4]
 801f14a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801f14c:	683b      	ldr	r3, [r7, #0]
 801f14e:	781b      	ldrb	r3, [r3, #0]
 801f150:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801f152:	683b      	ldr	r3, [r7, #0]
 801f154:	785b      	ldrb	r3, [r3, #1]
 801f156:	2b01      	cmp	r3, #1
 801f158:	d12c      	bne.n	801f1b4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801f15a:	68bb      	ldr	r3, [r7, #8]
 801f15c:	015a      	lsls	r2, r3, #5
 801f15e:	68fb      	ldr	r3, [r7, #12]
 801f160:	4413      	add	r3, r2
 801f162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801f166:	681b      	ldr	r3, [r3, #0]
 801f168:	2b00      	cmp	r3, #0
 801f16a:	db12      	blt.n	801f192 <USB_EPSetStall+0x54>
 801f16c:	68bb      	ldr	r3, [r7, #8]
 801f16e:	2b00      	cmp	r3, #0
 801f170:	d00f      	beq.n	801f192 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801f172:	68bb      	ldr	r3, [r7, #8]
 801f174:	015a      	lsls	r2, r3, #5
 801f176:	68fb      	ldr	r3, [r7, #12]
 801f178:	4413      	add	r3, r2
 801f17a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801f17e:	681b      	ldr	r3, [r3, #0]
 801f180:	68ba      	ldr	r2, [r7, #8]
 801f182:	0151      	lsls	r1, r2, #5
 801f184:	68fa      	ldr	r2, [r7, #12]
 801f186:	440a      	add	r2, r1
 801f188:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801f18c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801f190:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801f192:	68bb      	ldr	r3, [r7, #8]
 801f194:	015a      	lsls	r2, r3, #5
 801f196:	68fb      	ldr	r3, [r7, #12]
 801f198:	4413      	add	r3, r2
 801f19a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801f19e:	681b      	ldr	r3, [r3, #0]
 801f1a0:	68ba      	ldr	r2, [r7, #8]
 801f1a2:	0151      	lsls	r1, r2, #5
 801f1a4:	68fa      	ldr	r2, [r7, #12]
 801f1a6:	440a      	add	r2, r1
 801f1a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801f1ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801f1b0:	6013      	str	r3, [r2, #0]
 801f1b2:	e02b      	b.n	801f20c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801f1b4:	68bb      	ldr	r3, [r7, #8]
 801f1b6:	015a      	lsls	r2, r3, #5
 801f1b8:	68fb      	ldr	r3, [r7, #12]
 801f1ba:	4413      	add	r3, r2
 801f1bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f1c0:	681b      	ldr	r3, [r3, #0]
 801f1c2:	2b00      	cmp	r3, #0
 801f1c4:	db12      	blt.n	801f1ec <USB_EPSetStall+0xae>
 801f1c6:	68bb      	ldr	r3, [r7, #8]
 801f1c8:	2b00      	cmp	r3, #0
 801f1ca:	d00f      	beq.n	801f1ec <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801f1cc:	68bb      	ldr	r3, [r7, #8]
 801f1ce:	015a      	lsls	r2, r3, #5
 801f1d0:	68fb      	ldr	r3, [r7, #12]
 801f1d2:	4413      	add	r3, r2
 801f1d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f1d8:	681b      	ldr	r3, [r3, #0]
 801f1da:	68ba      	ldr	r2, [r7, #8]
 801f1dc:	0151      	lsls	r1, r2, #5
 801f1de:	68fa      	ldr	r2, [r7, #12]
 801f1e0:	440a      	add	r2, r1
 801f1e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f1e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801f1ea:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801f1ec:	68bb      	ldr	r3, [r7, #8]
 801f1ee:	015a      	lsls	r2, r3, #5
 801f1f0:	68fb      	ldr	r3, [r7, #12]
 801f1f2:	4413      	add	r3, r2
 801f1f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f1f8:	681b      	ldr	r3, [r3, #0]
 801f1fa:	68ba      	ldr	r2, [r7, #8]
 801f1fc:	0151      	lsls	r1, r2, #5
 801f1fe:	68fa      	ldr	r2, [r7, #12]
 801f200:	440a      	add	r2, r1
 801f202:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f206:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801f20a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801f20c:	2300      	movs	r3, #0
}
 801f20e:	4618      	mov	r0, r3
 801f210:	3714      	adds	r7, #20
 801f212:	46bd      	mov	sp, r7
 801f214:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f218:	4770      	bx	lr

0801f21a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801f21a:	b480      	push	{r7}
 801f21c:	b085      	sub	sp, #20
 801f21e:	af00      	add	r7, sp, #0
 801f220:	6078      	str	r0, [r7, #4]
 801f222:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f224:	687b      	ldr	r3, [r7, #4]
 801f226:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801f228:	683b      	ldr	r3, [r7, #0]
 801f22a:	781b      	ldrb	r3, [r3, #0]
 801f22c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801f22e:	683b      	ldr	r3, [r7, #0]
 801f230:	785b      	ldrb	r3, [r3, #1]
 801f232:	2b01      	cmp	r3, #1
 801f234:	d128      	bne.n	801f288 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801f236:	68bb      	ldr	r3, [r7, #8]
 801f238:	015a      	lsls	r2, r3, #5
 801f23a:	68fb      	ldr	r3, [r7, #12]
 801f23c:	4413      	add	r3, r2
 801f23e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801f242:	681b      	ldr	r3, [r3, #0]
 801f244:	68ba      	ldr	r2, [r7, #8]
 801f246:	0151      	lsls	r1, r2, #5
 801f248:	68fa      	ldr	r2, [r7, #12]
 801f24a:	440a      	add	r2, r1
 801f24c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801f250:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801f254:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801f256:	683b      	ldr	r3, [r7, #0]
 801f258:	78db      	ldrb	r3, [r3, #3]
 801f25a:	2b03      	cmp	r3, #3
 801f25c:	d003      	beq.n	801f266 <USB_EPClearStall+0x4c>
 801f25e:	683b      	ldr	r3, [r7, #0]
 801f260:	78db      	ldrb	r3, [r3, #3]
 801f262:	2b02      	cmp	r3, #2
 801f264:	d138      	bne.n	801f2d8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801f266:	68bb      	ldr	r3, [r7, #8]
 801f268:	015a      	lsls	r2, r3, #5
 801f26a:	68fb      	ldr	r3, [r7, #12]
 801f26c:	4413      	add	r3, r2
 801f26e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801f272:	681b      	ldr	r3, [r3, #0]
 801f274:	68ba      	ldr	r2, [r7, #8]
 801f276:	0151      	lsls	r1, r2, #5
 801f278:	68fa      	ldr	r2, [r7, #12]
 801f27a:	440a      	add	r2, r1
 801f27c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801f280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801f284:	6013      	str	r3, [r2, #0]
 801f286:	e027      	b.n	801f2d8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801f288:	68bb      	ldr	r3, [r7, #8]
 801f28a:	015a      	lsls	r2, r3, #5
 801f28c:	68fb      	ldr	r3, [r7, #12]
 801f28e:	4413      	add	r3, r2
 801f290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f294:	681b      	ldr	r3, [r3, #0]
 801f296:	68ba      	ldr	r2, [r7, #8]
 801f298:	0151      	lsls	r1, r2, #5
 801f29a:	68fa      	ldr	r2, [r7, #12]
 801f29c:	440a      	add	r2, r1
 801f29e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f2a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801f2a6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801f2a8:	683b      	ldr	r3, [r7, #0]
 801f2aa:	78db      	ldrb	r3, [r3, #3]
 801f2ac:	2b03      	cmp	r3, #3
 801f2ae:	d003      	beq.n	801f2b8 <USB_EPClearStall+0x9e>
 801f2b0:	683b      	ldr	r3, [r7, #0]
 801f2b2:	78db      	ldrb	r3, [r3, #3]
 801f2b4:	2b02      	cmp	r3, #2
 801f2b6:	d10f      	bne.n	801f2d8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801f2b8:	68bb      	ldr	r3, [r7, #8]
 801f2ba:	015a      	lsls	r2, r3, #5
 801f2bc:	68fb      	ldr	r3, [r7, #12]
 801f2be:	4413      	add	r3, r2
 801f2c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f2c4:	681b      	ldr	r3, [r3, #0]
 801f2c6:	68ba      	ldr	r2, [r7, #8]
 801f2c8:	0151      	lsls	r1, r2, #5
 801f2ca:	68fa      	ldr	r2, [r7, #12]
 801f2cc:	440a      	add	r2, r1
 801f2ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f2d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801f2d6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801f2d8:	2300      	movs	r3, #0
}
 801f2da:	4618      	mov	r0, r3
 801f2dc:	3714      	adds	r7, #20
 801f2de:	46bd      	mov	sp, r7
 801f2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2e4:	4770      	bx	lr

0801f2e6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801f2e6:	b480      	push	{r7}
 801f2e8:	b085      	sub	sp, #20
 801f2ea:	af00      	add	r7, sp, #0
 801f2ec:	6078      	str	r0, [r7, #4]
 801f2ee:	460b      	mov	r3, r1
 801f2f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f2f2:	687b      	ldr	r3, [r7, #4]
 801f2f4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801f2f6:	68fb      	ldr	r3, [r7, #12]
 801f2f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f2fc:	681b      	ldr	r3, [r3, #0]
 801f2fe:	68fa      	ldr	r2, [r7, #12]
 801f300:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801f304:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801f308:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801f30a:	68fb      	ldr	r3, [r7, #12]
 801f30c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f310:	681a      	ldr	r2, [r3, #0]
 801f312:	78fb      	ldrb	r3, [r7, #3]
 801f314:	011b      	lsls	r3, r3, #4
 801f316:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801f31a:	68f9      	ldr	r1, [r7, #12]
 801f31c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801f320:	4313      	orrs	r3, r2
 801f322:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801f324:	2300      	movs	r3, #0
}
 801f326:	4618      	mov	r0, r3
 801f328:	3714      	adds	r7, #20
 801f32a:	46bd      	mov	sp, r7
 801f32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f330:	4770      	bx	lr

0801f332 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801f332:	b480      	push	{r7}
 801f334:	b085      	sub	sp, #20
 801f336:	af00      	add	r7, sp, #0
 801f338:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f33a:	687b      	ldr	r3, [r7, #4]
 801f33c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801f33e:	68fb      	ldr	r3, [r7, #12]
 801f340:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801f344:	681b      	ldr	r3, [r3, #0]
 801f346:	68fa      	ldr	r2, [r7, #12]
 801f348:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801f34c:	f023 0303 	bic.w	r3, r3, #3
 801f350:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801f352:	68fb      	ldr	r3, [r7, #12]
 801f354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f358:	685b      	ldr	r3, [r3, #4]
 801f35a:	68fa      	ldr	r2, [r7, #12]
 801f35c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801f360:	f023 0302 	bic.w	r3, r3, #2
 801f364:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801f366:	2300      	movs	r3, #0
}
 801f368:	4618      	mov	r0, r3
 801f36a:	3714      	adds	r7, #20
 801f36c:	46bd      	mov	sp, r7
 801f36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f372:	4770      	bx	lr

0801f374 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801f374:	b480      	push	{r7}
 801f376:	b085      	sub	sp, #20
 801f378:	af00      	add	r7, sp, #0
 801f37a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f37c:	687b      	ldr	r3, [r7, #4]
 801f37e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801f380:	68fb      	ldr	r3, [r7, #12]
 801f382:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801f386:	681b      	ldr	r3, [r3, #0]
 801f388:	68fa      	ldr	r2, [r7, #12]
 801f38a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801f38e:	f023 0303 	bic.w	r3, r3, #3
 801f392:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801f394:	68fb      	ldr	r3, [r7, #12]
 801f396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f39a:	685b      	ldr	r3, [r3, #4]
 801f39c:	68fa      	ldr	r2, [r7, #12]
 801f39e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801f3a2:	f043 0302 	orr.w	r3, r3, #2
 801f3a6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801f3a8:	2300      	movs	r3, #0
}
 801f3aa:	4618      	mov	r0, r3
 801f3ac:	3714      	adds	r7, #20
 801f3ae:	46bd      	mov	sp, r7
 801f3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3b4:	4770      	bx	lr

0801f3b6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801f3b6:	b480      	push	{r7}
 801f3b8:	b085      	sub	sp, #20
 801f3ba:	af00      	add	r7, sp, #0
 801f3bc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801f3be:	687b      	ldr	r3, [r7, #4]
 801f3c0:	695b      	ldr	r3, [r3, #20]
 801f3c2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801f3c4:	687b      	ldr	r3, [r7, #4]
 801f3c6:	699b      	ldr	r3, [r3, #24]
 801f3c8:	68fa      	ldr	r2, [r7, #12]
 801f3ca:	4013      	ands	r3, r2
 801f3cc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801f3ce:	68fb      	ldr	r3, [r7, #12]
}
 801f3d0:	4618      	mov	r0, r3
 801f3d2:	3714      	adds	r7, #20
 801f3d4:	46bd      	mov	sp, r7
 801f3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3da:	4770      	bx	lr

0801f3dc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801f3dc:	b480      	push	{r7}
 801f3de:	b085      	sub	sp, #20
 801f3e0:	af00      	add	r7, sp, #0
 801f3e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f3e4:	687b      	ldr	r3, [r7, #4]
 801f3e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801f3e8:	68fb      	ldr	r3, [r7, #12]
 801f3ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f3ee:	699b      	ldr	r3, [r3, #24]
 801f3f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801f3f2:	68fb      	ldr	r3, [r7, #12]
 801f3f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f3f8:	69db      	ldr	r3, [r3, #28]
 801f3fa:	68ba      	ldr	r2, [r7, #8]
 801f3fc:	4013      	ands	r3, r2
 801f3fe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801f400:	68bb      	ldr	r3, [r7, #8]
 801f402:	0c1b      	lsrs	r3, r3, #16
}
 801f404:	4618      	mov	r0, r3
 801f406:	3714      	adds	r7, #20
 801f408:	46bd      	mov	sp, r7
 801f40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f40e:	4770      	bx	lr

0801f410 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801f410:	b480      	push	{r7}
 801f412:	b085      	sub	sp, #20
 801f414:	af00      	add	r7, sp, #0
 801f416:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f418:	687b      	ldr	r3, [r7, #4]
 801f41a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801f41c:	68fb      	ldr	r3, [r7, #12]
 801f41e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f422:	699b      	ldr	r3, [r3, #24]
 801f424:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801f426:	68fb      	ldr	r3, [r7, #12]
 801f428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f42c:	69db      	ldr	r3, [r3, #28]
 801f42e:	68ba      	ldr	r2, [r7, #8]
 801f430:	4013      	ands	r3, r2
 801f432:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801f434:	68bb      	ldr	r3, [r7, #8]
 801f436:	b29b      	uxth	r3, r3
}
 801f438:	4618      	mov	r0, r3
 801f43a:	3714      	adds	r7, #20
 801f43c:	46bd      	mov	sp, r7
 801f43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f442:	4770      	bx	lr

0801f444 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801f444:	b480      	push	{r7}
 801f446:	b085      	sub	sp, #20
 801f448:	af00      	add	r7, sp, #0
 801f44a:	6078      	str	r0, [r7, #4]
 801f44c:	460b      	mov	r3, r1
 801f44e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f450:	687b      	ldr	r3, [r7, #4]
 801f452:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801f454:	78fb      	ldrb	r3, [r7, #3]
 801f456:	015a      	lsls	r2, r3, #5
 801f458:	68fb      	ldr	r3, [r7, #12]
 801f45a:	4413      	add	r3, r2
 801f45c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f460:	689b      	ldr	r3, [r3, #8]
 801f462:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801f464:	68fb      	ldr	r3, [r7, #12]
 801f466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f46a:	695b      	ldr	r3, [r3, #20]
 801f46c:	68ba      	ldr	r2, [r7, #8]
 801f46e:	4013      	ands	r3, r2
 801f470:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801f472:	68bb      	ldr	r3, [r7, #8]
}
 801f474:	4618      	mov	r0, r3
 801f476:	3714      	adds	r7, #20
 801f478:	46bd      	mov	sp, r7
 801f47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f47e:	4770      	bx	lr

0801f480 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801f480:	b480      	push	{r7}
 801f482:	b087      	sub	sp, #28
 801f484:	af00      	add	r7, sp, #0
 801f486:	6078      	str	r0, [r7, #4]
 801f488:	460b      	mov	r3, r1
 801f48a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f48c:	687b      	ldr	r3, [r7, #4]
 801f48e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801f490:	697b      	ldr	r3, [r7, #20]
 801f492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f496:	691b      	ldr	r3, [r3, #16]
 801f498:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801f49a:	697b      	ldr	r3, [r7, #20]
 801f49c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f4a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f4a2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801f4a4:	78fb      	ldrb	r3, [r7, #3]
 801f4a6:	f003 030f 	and.w	r3, r3, #15
 801f4aa:	68fa      	ldr	r2, [r7, #12]
 801f4ac:	fa22 f303 	lsr.w	r3, r2, r3
 801f4b0:	01db      	lsls	r3, r3, #7
 801f4b2:	b2db      	uxtb	r3, r3
 801f4b4:	693a      	ldr	r2, [r7, #16]
 801f4b6:	4313      	orrs	r3, r2
 801f4b8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801f4ba:	78fb      	ldrb	r3, [r7, #3]
 801f4bc:	015a      	lsls	r2, r3, #5
 801f4be:	697b      	ldr	r3, [r7, #20]
 801f4c0:	4413      	add	r3, r2
 801f4c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801f4c6:	689b      	ldr	r3, [r3, #8]
 801f4c8:	693a      	ldr	r2, [r7, #16]
 801f4ca:	4013      	ands	r3, r2
 801f4cc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801f4ce:	68bb      	ldr	r3, [r7, #8]
}
 801f4d0:	4618      	mov	r0, r3
 801f4d2:	371c      	adds	r7, #28
 801f4d4:	46bd      	mov	sp, r7
 801f4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4da:	4770      	bx	lr

0801f4dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801f4dc:	b480      	push	{r7}
 801f4de:	b083      	sub	sp, #12
 801f4e0:	af00      	add	r7, sp, #0
 801f4e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801f4e4:	687b      	ldr	r3, [r7, #4]
 801f4e6:	695b      	ldr	r3, [r3, #20]
 801f4e8:	f003 0301 	and.w	r3, r3, #1
}
 801f4ec:	4618      	mov	r0, r3
 801f4ee:	370c      	adds	r7, #12
 801f4f0:	46bd      	mov	sp, r7
 801f4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4f6:	4770      	bx	lr

0801f4f8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801f4f8:	b480      	push	{r7}
 801f4fa:	b085      	sub	sp, #20
 801f4fc:	af00      	add	r7, sp, #0
 801f4fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f500:	687b      	ldr	r3, [r7, #4]
 801f502:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801f504:	68fb      	ldr	r3, [r7, #12]
 801f506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801f50a:	681b      	ldr	r3, [r3, #0]
 801f50c:	68fa      	ldr	r2, [r7, #12]
 801f50e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801f512:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801f516:	f023 0307 	bic.w	r3, r3, #7
 801f51a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801f51c:	68fb      	ldr	r3, [r7, #12]
 801f51e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f522:	685b      	ldr	r3, [r3, #4]
 801f524:	68fa      	ldr	r2, [r7, #12]
 801f526:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801f52a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801f52e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801f530:	2300      	movs	r3, #0
}
 801f532:	4618      	mov	r0, r3
 801f534:	3714      	adds	r7, #20
 801f536:	46bd      	mov	sp, r7
 801f538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f53c:	4770      	bx	lr
	...

0801f540 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 801f540:	b480      	push	{r7}
 801f542:	b087      	sub	sp, #28
 801f544:	af00      	add	r7, sp, #0
 801f546:	60f8      	str	r0, [r7, #12]
 801f548:	460b      	mov	r3, r1
 801f54a:	607a      	str	r2, [r7, #4]
 801f54c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f54e:	68fb      	ldr	r3, [r7, #12]
 801f550:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801f552:	68fb      	ldr	r3, [r7, #12]
 801f554:	333c      	adds	r3, #60	; 0x3c
 801f556:	3304      	adds	r3, #4
 801f558:	681b      	ldr	r3, [r3, #0]
 801f55a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801f55c:	693b      	ldr	r3, [r7, #16]
 801f55e:	4a26      	ldr	r2, [pc, #152]	; (801f5f8 <USB_EP0_OutStart+0xb8>)
 801f560:	4293      	cmp	r3, r2
 801f562:	d90a      	bls.n	801f57a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801f564:	697b      	ldr	r3, [r7, #20]
 801f566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f56a:	681b      	ldr	r3, [r3, #0]
 801f56c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801f570:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801f574:	d101      	bne.n	801f57a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801f576:	2300      	movs	r3, #0
 801f578:	e037      	b.n	801f5ea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801f57a:	697b      	ldr	r3, [r7, #20]
 801f57c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f580:	461a      	mov	r2, r3
 801f582:	2300      	movs	r3, #0
 801f584:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801f586:	697b      	ldr	r3, [r7, #20]
 801f588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f58c:	691b      	ldr	r3, [r3, #16]
 801f58e:	697a      	ldr	r2, [r7, #20]
 801f590:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f594:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801f598:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801f59a:	697b      	ldr	r3, [r7, #20]
 801f59c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f5a0:	691b      	ldr	r3, [r3, #16]
 801f5a2:	697a      	ldr	r2, [r7, #20]
 801f5a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f5a8:	f043 0318 	orr.w	r3, r3, #24
 801f5ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801f5ae:	697b      	ldr	r3, [r7, #20]
 801f5b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f5b4:	691b      	ldr	r3, [r3, #16]
 801f5b6:	697a      	ldr	r2, [r7, #20]
 801f5b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f5bc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801f5c0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801f5c2:	7afb      	ldrb	r3, [r7, #11]
 801f5c4:	2b01      	cmp	r3, #1
 801f5c6:	d10f      	bne.n	801f5e8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801f5c8:	697b      	ldr	r3, [r7, #20]
 801f5ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f5ce:	461a      	mov	r2, r3
 801f5d0:	687b      	ldr	r3, [r7, #4]
 801f5d2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801f5d4:	697b      	ldr	r3, [r7, #20]
 801f5d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f5da:	681b      	ldr	r3, [r3, #0]
 801f5dc:	697a      	ldr	r2, [r7, #20]
 801f5de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f5e2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801f5e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801f5e8:	2300      	movs	r3, #0
}
 801f5ea:	4618      	mov	r0, r3
 801f5ec:	371c      	adds	r7, #28
 801f5ee:	46bd      	mov	sp, r7
 801f5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5f4:	4770      	bx	lr
 801f5f6:	bf00      	nop
 801f5f8:	4f54300a 	.word	0x4f54300a

0801f5fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801f5fc:	b480      	push	{r7}
 801f5fe:	b085      	sub	sp, #20
 801f600:	af00      	add	r7, sp, #0
 801f602:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801f604:	2300      	movs	r3, #0
 801f606:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 801f608:	68fb      	ldr	r3, [r7, #12]
 801f60a:	3301      	adds	r3, #1
 801f60c:	60fb      	str	r3, [r7, #12]
 801f60e:	4a13      	ldr	r2, [pc, #76]	; (801f65c <USB_CoreReset+0x60>)
 801f610:	4293      	cmp	r3, r2
 801f612:	d901      	bls.n	801f618 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 801f614:	2303      	movs	r3, #3
 801f616:	e01a      	b.n	801f64e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801f618:	687b      	ldr	r3, [r7, #4]
 801f61a:	691b      	ldr	r3, [r3, #16]
 801f61c:	2b00      	cmp	r3, #0
 801f61e:	daf3      	bge.n	801f608 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801f620:	2300      	movs	r3, #0
 801f622:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801f624:	687b      	ldr	r3, [r7, #4]
 801f626:	691b      	ldr	r3, [r3, #16]
 801f628:	f043 0201 	orr.w	r2, r3, #1
 801f62c:	687b      	ldr	r3, [r7, #4]
 801f62e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801f630:	68fb      	ldr	r3, [r7, #12]
 801f632:	3301      	adds	r3, #1
 801f634:	60fb      	str	r3, [r7, #12]
 801f636:	4a09      	ldr	r2, [pc, #36]	; (801f65c <USB_CoreReset+0x60>)
 801f638:	4293      	cmp	r3, r2
 801f63a:	d901      	bls.n	801f640 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 801f63c:	2303      	movs	r3, #3
 801f63e:	e006      	b.n	801f64e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801f640:	687b      	ldr	r3, [r7, #4]
 801f642:	691b      	ldr	r3, [r3, #16]
 801f644:	f003 0301 	and.w	r3, r3, #1
 801f648:	2b01      	cmp	r3, #1
 801f64a:	d0f1      	beq.n	801f630 <USB_CoreReset+0x34>

  return HAL_OK;
 801f64c:	2300      	movs	r3, #0
}
 801f64e:	4618      	mov	r0, r3
 801f650:	3714      	adds	r7, #20
 801f652:	46bd      	mov	sp, r7
 801f654:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f658:	4770      	bx	lr
 801f65a:	bf00      	nop
 801f65c:	00030d40 	.word	0x00030d40

0801f660 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801f660:	b580      	push	{r7, lr}
 801f662:	b084      	sub	sp, #16
 801f664:	af00      	add	r7, sp, #0
 801f666:	6078      	str	r0, [r7, #4]
 801f668:	460b      	mov	r3, r1
 801f66a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 801f66c:	f44f 701d 	mov.w	r0, #628	; 0x274
 801f670:	f003 fc6e 	bl	8022f50 <USBD_static_malloc>
 801f674:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 801f676:	68fb      	ldr	r3, [r7, #12]
 801f678:	2b00      	cmp	r3, #0
 801f67a:	d105      	bne.n	801f688 <USBD_MSC_Init+0x28>
  {
    pdev->pClassData = NULL;
 801f67c:	687b      	ldr	r3, [r7, #4]
 801f67e:	2200      	movs	r2, #0
 801f680:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 801f684:	2302      	movs	r3, #2
 801f686:	e034      	b.n	801f6f2 <USBD_MSC_Init+0x92>
  }

  pdev->pClassData = (void *)hmsc;
 801f688:	687b      	ldr	r3, [r7, #4]
 801f68a:	68fa      	ldr	r2, [r7, #12]
 801f68c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801f690:	687b      	ldr	r3, [r7, #4]
 801f692:	7c1b      	ldrb	r3, [r3, #16]
 801f694:	2b00      	cmp	r3, #0
 801f696:	d115      	bne.n	801f6c4 <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801f698:	f44f 7300 	mov.w	r3, #512	; 0x200
 801f69c:	2202      	movs	r2, #2
 801f69e:	2101      	movs	r1, #1
 801f6a0:	6878      	ldr	r0, [r7, #4]
 801f6a2:	f003 fac4 	bl	8022c2e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 801f6a6:	687b      	ldr	r3, [r7, #4]
 801f6a8:	2201      	movs	r2, #1
 801f6aa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801f6ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 801f6b2:	2202      	movs	r2, #2
 801f6b4:	2181      	movs	r1, #129	; 0x81
 801f6b6:	6878      	ldr	r0, [r7, #4]
 801f6b8:	f003 fab9 	bl	8022c2e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 801f6bc:	687b      	ldr	r3, [r7, #4]
 801f6be:	2201      	movs	r2, #1
 801f6c0:	871a      	strh	r2, [r3, #56]	; 0x38
 801f6c2:	e012      	b.n	801f6ea <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801f6c4:	2340      	movs	r3, #64	; 0x40
 801f6c6:	2202      	movs	r2, #2
 801f6c8:	2101      	movs	r1, #1
 801f6ca:	6878      	ldr	r0, [r7, #4]
 801f6cc:	f003 faaf 	bl	8022c2e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 801f6d0:	687b      	ldr	r3, [r7, #4]
 801f6d2:	2201      	movs	r2, #1
 801f6d4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801f6d8:	2340      	movs	r3, #64	; 0x40
 801f6da:	2202      	movs	r2, #2
 801f6dc:	2181      	movs	r1, #129	; 0x81
 801f6de:	6878      	ldr	r0, [r7, #4]
 801f6e0:	f003 faa5 	bl	8022c2e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 801f6e4:	687b      	ldr	r3, [r7, #4]
 801f6e6:	2201      	movs	r2, #1
 801f6e8:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 801f6ea:	6878      	ldr	r0, [r7, #4]
 801f6ec:	f000 f999 	bl	801fa22 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 801f6f0:	2300      	movs	r3, #0
}
 801f6f2:	4618      	mov	r0, r3
 801f6f4:	3710      	adds	r7, #16
 801f6f6:	46bd      	mov	sp, r7
 801f6f8:	bd80      	pop	{r7, pc}

0801f6fa <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801f6fa:	b580      	push	{r7, lr}
 801f6fc:	b082      	sub	sp, #8
 801f6fe:	af00      	add	r7, sp, #0
 801f700:	6078      	str	r0, [r7, #4]
 801f702:	460b      	mov	r3, r1
 801f704:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 801f706:	2101      	movs	r1, #1
 801f708:	6878      	ldr	r0, [r7, #4]
 801f70a:	f003 fab6 	bl	8022c7a <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 801f70e:	687b      	ldr	r3, [r7, #4]
 801f710:	2200      	movs	r2, #0
 801f712:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 801f716:	2181      	movs	r1, #129	; 0x81
 801f718:	6878      	ldr	r0, [r7, #4]
 801f71a:	f003 faae 	bl	8022c7a <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 801f71e:	687b      	ldr	r3, [r7, #4]
 801f720:	2200      	movs	r2, #0
 801f722:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 801f724:	687b      	ldr	r3, [r7, #4]
 801f726:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f72a:	2b00      	cmp	r3, #0
 801f72c:	d00c      	beq.n	801f748 <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 801f72e:	6878      	ldr	r0, [r7, #4]
 801f730:	f000 f9d5 	bl	801fade <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassData);
 801f734:	687b      	ldr	r3, [r7, #4]
 801f736:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f73a:	4618      	mov	r0, r3
 801f73c:	f003 fc16 	bl	8022f6c <USBD_static_free>
    pdev->pClassData = NULL;
 801f740:	687b      	ldr	r3, [r7, #4]
 801f742:	2200      	movs	r2, #0
 801f744:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801f748:	2300      	movs	r3, #0
}
 801f74a:	4618      	mov	r0, r3
 801f74c:	3708      	adds	r7, #8
 801f74e:	46bd      	mov	sp, r7
 801f750:	bd80      	pop	{r7, pc}
	...

0801f754 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801f754:	b580      	push	{r7, lr}
 801f756:	b086      	sub	sp, #24
 801f758:	af00      	add	r7, sp, #0
 801f75a:	6078      	str	r0, [r7, #4]
 801f75c:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f75e:	687b      	ldr	r3, [r7, #4]
 801f760:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f764:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 801f766:	2300      	movs	r3, #0
 801f768:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 801f76a:	2300      	movs	r3, #0
 801f76c:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 801f76e:	693b      	ldr	r3, [r7, #16]
 801f770:	2b00      	cmp	r3, #0
 801f772:	d101      	bne.n	801f778 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801f774:	2303      	movs	r3, #3
 801f776:	e0db      	b.n	801f930 <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801f778:	683b      	ldr	r3, [r7, #0]
 801f77a:	781b      	ldrb	r3, [r3, #0]
 801f77c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801f780:	2b00      	cmp	r3, #0
 801f782:	d04e      	beq.n	801f822 <USBD_MSC_Setup+0xce>
 801f784:	2b20      	cmp	r3, #32
 801f786:	f040 80cb 	bne.w	801f920 <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 801f78a:	683b      	ldr	r3, [r7, #0]
 801f78c:	785b      	ldrb	r3, [r3, #1]
 801f78e:	2bfe      	cmp	r3, #254	; 0xfe
 801f790:	d002      	beq.n	801f798 <USBD_MSC_Setup+0x44>
 801f792:	2bff      	cmp	r3, #255	; 0xff
 801f794:	d025      	beq.n	801f7e2 <USBD_MSC_Setup+0x8e>
 801f796:	e03c      	b.n	801f812 <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801f798:	683b      	ldr	r3, [r7, #0]
 801f79a:	885b      	ldrh	r3, [r3, #2]
 801f79c:	2b00      	cmp	r3, #0
 801f79e:	d119      	bne.n	801f7d4 <USBD_MSC_Setup+0x80>
 801f7a0:	683b      	ldr	r3, [r7, #0]
 801f7a2:	88db      	ldrh	r3, [r3, #6]
 801f7a4:	2b01      	cmp	r3, #1
 801f7a6:	d115      	bne.n	801f7d4 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 801f7a8:	683b      	ldr	r3, [r7, #0]
 801f7aa:	781b      	ldrb	r3, [r3, #0]
 801f7ac:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801f7ae:	2b00      	cmp	r3, #0
 801f7b0:	da10      	bge.n	801f7d4 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 801f7b2:	687b      	ldr	r3, [r7, #4]
 801f7b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801f7b8:	699b      	ldr	r3, [r3, #24]
 801f7ba:	4798      	blx	r3
 801f7bc:	4603      	mov	r3, r0
 801f7be:	461a      	mov	r2, r3
 801f7c0:	693b      	ldr	r3, [r7, #16]
 801f7c2:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 801f7c4:	693b      	ldr	r3, [r7, #16]
 801f7c6:	2201      	movs	r2, #1
 801f7c8:	4619      	mov	r1, r3
 801f7ca:	6878      	ldr	r0, [r7, #4]
 801f7cc:	f002 fe3d 	bl	802244a <USBD_CtlSendData>
 801f7d0:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f7d2:	e025      	b.n	801f820 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 801f7d4:	6839      	ldr	r1, [r7, #0]
 801f7d6:	6878      	ldr	r0, [r7, #4]
 801f7d8:	f002 fdc6 	bl	8022368 <USBD_CtlError>
            ret = USBD_FAIL;
 801f7dc:	2303      	movs	r3, #3
 801f7de:	75fb      	strb	r3, [r7, #23]
          break;
 801f7e0:	e01e      	b.n	801f820 <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801f7e2:	683b      	ldr	r3, [r7, #0]
 801f7e4:	885b      	ldrh	r3, [r3, #2]
 801f7e6:	2b00      	cmp	r3, #0
 801f7e8:	d10c      	bne.n	801f804 <USBD_MSC_Setup+0xb0>
 801f7ea:	683b      	ldr	r3, [r7, #0]
 801f7ec:	88db      	ldrh	r3, [r3, #6]
 801f7ee:	2b00      	cmp	r3, #0
 801f7f0:	d108      	bne.n	801f804 <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 801f7f2:	683b      	ldr	r3, [r7, #0]
 801f7f4:	781b      	ldrb	r3, [r3, #0]
 801f7f6:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801f7f8:	2b00      	cmp	r3, #0
 801f7fa:	db03      	blt.n	801f804 <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 801f7fc:	6878      	ldr	r0, [r7, #4]
 801f7fe:	f000 f948 	bl	801fa92 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f802:	e00d      	b.n	801f820 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 801f804:	6839      	ldr	r1, [r7, #0]
 801f806:	6878      	ldr	r0, [r7, #4]
 801f808:	f002 fdae 	bl	8022368 <USBD_CtlError>
            ret = USBD_FAIL;
 801f80c:	2303      	movs	r3, #3
 801f80e:	75fb      	strb	r3, [r7, #23]
          break;
 801f810:	e006      	b.n	801f820 <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801f812:	6839      	ldr	r1, [r7, #0]
 801f814:	6878      	ldr	r0, [r7, #4]
 801f816:	f002 fda7 	bl	8022368 <USBD_CtlError>
          ret = USBD_FAIL;
 801f81a:	2303      	movs	r3, #3
 801f81c:	75fb      	strb	r3, [r7, #23]
          break;
 801f81e:	bf00      	nop
      }
      break;
 801f820:	e085      	b.n	801f92e <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801f822:	683b      	ldr	r3, [r7, #0]
 801f824:	785b      	ldrb	r3, [r3, #1]
 801f826:	2b0b      	cmp	r3, #11
 801f828:	d871      	bhi.n	801f90e <USBD_MSC_Setup+0x1ba>
 801f82a:	a201      	add	r2, pc, #4	; (adr r2, 801f830 <USBD_MSC_Setup+0xdc>)
 801f82c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f830:	0801f861 	.word	0x0801f861
 801f834:	0801f8dd 	.word	0x0801f8dd
 801f838:	0801f90f 	.word	0x0801f90f
 801f83c:	0801f90f 	.word	0x0801f90f
 801f840:	0801f90f 	.word	0x0801f90f
 801f844:	0801f90f 	.word	0x0801f90f
 801f848:	0801f90f 	.word	0x0801f90f
 801f84c:	0801f90f 	.word	0x0801f90f
 801f850:	0801f90f 	.word	0x0801f90f
 801f854:	0801f90f 	.word	0x0801f90f
 801f858:	0801f88b 	.word	0x0801f88b
 801f85c:	0801f8b5 	.word	0x0801f8b5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f860:	687b      	ldr	r3, [r7, #4]
 801f862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f866:	b2db      	uxtb	r3, r3
 801f868:	2b03      	cmp	r3, #3
 801f86a:	d107      	bne.n	801f87c <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801f86c:	f107 030e 	add.w	r3, r7, #14
 801f870:	2202      	movs	r2, #2
 801f872:	4619      	mov	r1, r3
 801f874:	6878      	ldr	r0, [r7, #4]
 801f876:	f002 fde8 	bl	802244a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f87a:	e050      	b.n	801f91e <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801f87c:	6839      	ldr	r1, [r7, #0]
 801f87e:	6878      	ldr	r0, [r7, #4]
 801f880:	f002 fd72 	bl	8022368 <USBD_CtlError>
            ret = USBD_FAIL;
 801f884:	2303      	movs	r3, #3
 801f886:	75fb      	strb	r3, [r7, #23]
          break;
 801f888:	e049      	b.n	801f91e <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f88a:	687b      	ldr	r3, [r7, #4]
 801f88c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f890:	b2db      	uxtb	r3, r3
 801f892:	2b03      	cmp	r3, #3
 801f894:	d107      	bne.n	801f8a6 <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 801f896:	693b      	ldr	r3, [r7, #16]
 801f898:	3304      	adds	r3, #4
 801f89a:	2201      	movs	r2, #1
 801f89c:	4619      	mov	r1, r3
 801f89e:	6878      	ldr	r0, [r7, #4]
 801f8a0:	f002 fdd3 	bl	802244a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f8a4:	e03b      	b.n	801f91e <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801f8a6:	6839      	ldr	r1, [r7, #0]
 801f8a8:	6878      	ldr	r0, [r7, #4]
 801f8aa:	f002 fd5d 	bl	8022368 <USBD_CtlError>
            ret = USBD_FAIL;
 801f8ae:	2303      	movs	r3, #3
 801f8b0:	75fb      	strb	r3, [r7, #23]
          break;
 801f8b2:	e034      	b.n	801f91e <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f8b4:	687b      	ldr	r3, [r7, #4]
 801f8b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f8ba:	b2db      	uxtb	r3, r3
 801f8bc:	2b03      	cmp	r3, #3
 801f8be:	d106      	bne.n	801f8ce <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 801f8c0:	683b      	ldr	r3, [r7, #0]
 801f8c2:	885b      	ldrh	r3, [r3, #2]
 801f8c4:	b2db      	uxtb	r3, r3
 801f8c6:	461a      	mov	r2, r3
 801f8c8:	693b      	ldr	r3, [r7, #16]
 801f8ca:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f8cc:	e027      	b.n	801f91e <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801f8ce:	6839      	ldr	r1, [r7, #0]
 801f8d0:	6878      	ldr	r0, [r7, #4]
 801f8d2:	f002 fd49 	bl	8022368 <USBD_CtlError>
            ret = USBD_FAIL;
 801f8d6:	2303      	movs	r3, #3
 801f8d8:	75fb      	strb	r3, [r7, #23]
          break;
 801f8da:	e020      	b.n	801f91e <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f8dc:	687b      	ldr	r3, [r7, #4]
 801f8de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f8e2:	b2db      	uxtb	r3, r3
 801f8e4:	2b03      	cmp	r3, #3
 801f8e6:	d119      	bne.n	801f91c <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 801f8e8:	683b      	ldr	r3, [r7, #0]
 801f8ea:	885b      	ldrh	r3, [r3, #2]
 801f8ec:	2b00      	cmp	r3, #0
 801f8ee:	d115      	bne.n	801f91c <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 801f8f0:	683b      	ldr	r3, [r7, #0]
 801f8f2:	889b      	ldrh	r3, [r3, #4]
 801f8f4:	b2db      	uxtb	r3, r3
 801f8f6:	4619      	mov	r1, r3
 801f8f8:	6878      	ldr	r0, [r7, #4]
 801f8fa:	f003 f9dd 	bl	8022cb8 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 801f8fe:	683b      	ldr	r3, [r7, #0]
 801f900:	889b      	ldrh	r3, [r3, #4]
 801f902:	b2db      	uxtb	r3, r3
 801f904:	4619      	mov	r1, r3
 801f906:	6878      	ldr	r0, [r7, #4]
 801f908:	f000 fa82 	bl	801fe10 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 801f90c:	e006      	b.n	801f91c <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 801f90e:	6839      	ldr	r1, [r7, #0]
 801f910:	6878      	ldr	r0, [r7, #4]
 801f912:	f002 fd29 	bl	8022368 <USBD_CtlError>
          ret = USBD_FAIL;
 801f916:	2303      	movs	r3, #3
 801f918:	75fb      	strb	r3, [r7, #23]
          break;
 801f91a:	e000      	b.n	801f91e <USBD_MSC_Setup+0x1ca>
          break;
 801f91c:	bf00      	nop
      }
      break;
 801f91e:	e006      	b.n	801f92e <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 801f920:	6839      	ldr	r1, [r7, #0]
 801f922:	6878      	ldr	r0, [r7, #4]
 801f924:	f002 fd20 	bl	8022368 <USBD_CtlError>
      ret = USBD_FAIL;
 801f928:	2303      	movs	r3, #3
 801f92a:	75fb      	strb	r3, [r7, #23]
      break;
 801f92c:	bf00      	nop
  }

  return (uint8_t)ret;
 801f92e:	7dfb      	ldrb	r3, [r7, #23]
}
 801f930:	4618      	mov	r0, r3
 801f932:	3718      	adds	r7, #24
 801f934:	46bd      	mov	sp, r7
 801f936:	bd80      	pop	{r7, pc}

0801f938 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f938:	b580      	push	{r7, lr}
 801f93a:	b082      	sub	sp, #8
 801f93c:	af00      	add	r7, sp, #0
 801f93e:	6078      	str	r0, [r7, #4]
 801f940:	460b      	mov	r3, r1
 801f942:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 801f944:	78fb      	ldrb	r3, [r7, #3]
 801f946:	4619      	mov	r1, r3
 801f948:	6878      	ldr	r0, [r7, #4]
 801f94a:	f000 f8dc 	bl	801fb06 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 801f94e:	2300      	movs	r3, #0
}
 801f950:	4618      	mov	r0, r3
 801f952:	3708      	adds	r7, #8
 801f954:	46bd      	mov	sp, r7
 801f956:	bd80      	pop	{r7, pc}

0801f958 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f958:	b580      	push	{r7, lr}
 801f95a:	b082      	sub	sp, #8
 801f95c:	af00      	add	r7, sp, #0
 801f95e:	6078      	str	r0, [r7, #4]
 801f960:	460b      	mov	r3, r1
 801f962:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 801f964:	78fb      	ldrb	r3, [r7, #3]
 801f966:	4619      	mov	r1, r3
 801f968:	6878      	ldr	r0, [r7, #4]
 801f96a:	f000 f902 	bl	801fb72 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 801f96e:	2300      	movs	r3, #0
}
 801f970:	4618      	mov	r0, r3
 801f972:	3708      	adds	r7, #8
 801f974:	46bd      	mov	sp, r7
 801f976:	bd80      	pop	{r7, pc}

0801f978 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 801f978:	b480      	push	{r7}
 801f97a:	b083      	sub	sp, #12
 801f97c:	af00      	add	r7, sp, #0
 801f97e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 801f980:	687b      	ldr	r3, [r7, #4]
 801f982:	2220      	movs	r2, #32
 801f984:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 801f986:	4b03      	ldr	r3, [pc, #12]	; (801f994 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 801f988:	4618      	mov	r0, r3
 801f98a:	370c      	adds	r7, #12
 801f98c:	46bd      	mov	sp, r7
 801f98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f992:	4770      	bx	lr
 801f994:	200005cc 	.word	0x200005cc

0801f998 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 801f998:	b480      	push	{r7}
 801f99a:	b083      	sub	sp, #12
 801f99c:	af00      	add	r7, sp, #0
 801f99e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 801f9a0:	687b      	ldr	r3, [r7, #4]
 801f9a2:	2220      	movs	r2, #32
 801f9a4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 801f9a6:	4b03      	ldr	r3, [pc, #12]	; (801f9b4 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 801f9a8:	4618      	mov	r0, r3
 801f9aa:	370c      	adds	r7, #12
 801f9ac:	46bd      	mov	sp, r7
 801f9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9b2:	4770      	bx	lr
 801f9b4:	200005ec 	.word	0x200005ec

0801f9b8 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801f9b8:	b480      	push	{r7}
 801f9ba:	b083      	sub	sp, #12
 801f9bc:	af00      	add	r7, sp, #0
 801f9be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 801f9c0:	687b      	ldr	r3, [r7, #4]
 801f9c2:	2220      	movs	r2, #32
 801f9c4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 801f9c6:	4b03      	ldr	r3, [pc, #12]	; (801f9d4 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 801f9c8:	4618      	mov	r0, r3
 801f9ca:	370c      	adds	r7, #12
 801f9cc:	46bd      	mov	sp, r7
 801f9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9d2:	4770      	bx	lr
 801f9d4:	2000060c 	.word	0x2000060c

0801f9d8 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801f9d8:	b480      	push	{r7}
 801f9da:	b083      	sub	sp, #12
 801f9dc:	af00      	add	r7, sp, #0
 801f9de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 801f9e0:	687b      	ldr	r3, [r7, #4]
 801f9e2:	220a      	movs	r2, #10
 801f9e4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 801f9e6:	4b03      	ldr	r3, [pc, #12]	; (801f9f4 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 801f9e8:	4618      	mov	r0, r3
 801f9ea:	370c      	adds	r7, #12
 801f9ec:	46bd      	mov	sp, r7
 801f9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9f2:	4770      	bx	lr
 801f9f4:	2000062c 	.word	0x2000062c

0801f9f8 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 801f9f8:	b480      	push	{r7}
 801f9fa:	b083      	sub	sp, #12
 801f9fc:	af00      	add	r7, sp, #0
 801f9fe:	6078      	str	r0, [r7, #4]
 801fa00:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801fa02:	683b      	ldr	r3, [r7, #0]
 801fa04:	2b00      	cmp	r3, #0
 801fa06:	d101      	bne.n	801fa0c <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801fa08:	2303      	movs	r3, #3
 801fa0a:	e004      	b.n	801fa16 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 801fa0c:	687b      	ldr	r3, [r7, #4]
 801fa0e:	683a      	ldr	r2, [r7, #0]
 801fa10:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 801fa14:	2300      	movs	r3, #0
}
 801fa16:	4618      	mov	r0, r3
 801fa18:	370c      	adds	r7, #12
 801fa1a:	46bd      	mov	sp, r7
 801fa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa20:	4770      	bx	lr

0801fa22 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 801fa22:	b580      	push	{r7, lr}
 801fa24:	b084      	sub	sp, #16
 801fa26:	af00      	add	r7, sp, #0
 801fa28:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fa2a:	687b      	ldr	r3, [r7, #4]
 801fa2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fa30:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801fa32:	68fb      	ldr	r3, [r7, #12]
 801fa34:	2b00      	cmp	r3, #0
 801fa36:	d028      	beq.n	801fa8a <MSC_BOT_Init+0x68>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 801fa38:	68fb      	ldr	r3, [r7, #12]
 801fa3a:	2200      	movs	r2, #0
 801fa3c:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 801fa3e:	68fb      	ldr	r3, [r7, #12]
 801fa40:	2200      	movs	r2, #0
 801fa42:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 801fa44:	68fb      	ldr	r3, [r7, #12]
 801fa46:	2200      	movs	r2, #0
 801fa48:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 801fa4c:	68fb      	ldr	r3, [r7, #12]
 801fa4e:	2200      	movs	r2, #0
 801fa50:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801fa54:	68fb      	ldr	r3, [r7, #12]
 801fa56:	2200      	movs	r2, #0
 801fa58:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 801fa5c:	687b      	ldr	r3, [r7, #4]
 801fa5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801fa62:	681b      	ldr	r3, [r3, #0]
 801fa64:	2000      	movs	r0, #0
 801fa66:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 801fa68:	2101      	movs	r1, #1
 801fa6a:	6878      	ldr	r0, [r7, #4]
 801fa6c:	f003 f924 	bl	8022cb8 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 801fa70:	2181      	movs	r1, #129	; 0x81
 801fa72:	6878      	ldr	r0, [r7, #4]
 801fa74:	f003 f920 	bl	8022cb8 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 801fa78:	68fb      	ldr	r3, [r7, #12]
 801fa7a:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801fa7e:	231f      	movs	r3, #31
 801fa80:	2101      	movs	r1, #1
 801fa82:	6878      	ldr	r0, [r7, #4]
 801fa84:	f003 f9e1 	bl	8022e4a <USBD_LL_PrepareReceive>
 801fa88:	e000      	b.n	801fa8c <MSC_BOT_Init+0x6a>
    return;
 801fa8a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801fa8c:	3710      	adds	r7, #16
 801fa8e:	46bd      	mov	sp, r7
 801fa90:	bd80      	pop	{r7, pc}

0801fa92 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 801fa92:	b580      	push	{r7, lr}
 801fa94:	b084      	sub	sp, #16
 801fa96:	af00      	add	r7, sp, #0
 801fa98:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fa9a:	687b      	ldr	r3, [r7, #4]
 801fa9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801faa0:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801faa2:	68fb      	ldr	r3, [r7, #12]
 801faa4:	2b00      	cmp	r3, #0
 801faa6:	d016      	beq.n	801fad6 <MSC_BOT_Reset+0x44>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 801faa8:	68fb      	ldr	r3, [r7, #12]
 801faaa:	2200      	movs	r2, #0
 801faac:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 801faae:	68fb      	ldr	r3, [r7, #12]
 801fab0:	2201      	movs	r2, #1
 801fab2:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 801fab4:	2181      	movs	r1, #129	; 0x81
 801fab6:	6878      	ldr	r0, [r7, #4]
 801fab8:	f003 f93c 	bl	8022d34 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 801fabc:	2101      	movs	r1, #1
 801fabe:	6878      	ldr	r0, [r7, #4]
 801fac0:	f003 f938 	bl	8022d34 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 801fac4:	68fb      	ldr	r3, [r7, #12]
 801fac6:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801faca:	231f      	movs	r3, #31
 801facc:	2101      	movs	r1, #1
 801face:	6878      	ldr	r0, [r7, #4]
 801fad0:	f003 f9bb 	bl	8022e4a <USBD_LL_PrepareReceive>
 801fad4:	e000      	b.n	801fad8 <MSC_BOT_Reset+0x46>
    return;
 801fad6:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801fad8:	3710      	adds	r7, #16
 801fada:	46bd      	mov	sp, r7
 801fadc:	bd80      	pop	{r7, pc}

0801fade <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 801fade:	b480      	push	{r7}
 801fae0:	b085      	sub	sp, #20
 801fae2:	af00      	add	r7, sp, #0
 801fae4:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fae6:	687b      	ldr	r3, [r7, #4]
 801fae8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801faec:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 801faee:	68fb      	ldr	r3, [r7, #12]
 801faf0:	2b00      	cmp	r3, #0
 801faf2:	d002      	beq.n	801fafa <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 801faf4:	68fb      	ldr	r3, [r7, #12]
 801faf6:	2200      	movs	r2, #0
 801faf8:	721a      	strb	r2, [r3, #8]
  }
}
 801fafa:	bf00      	nop
 801fafc:	3714      	adds	r7, #20
 801fafe:	46bd      	mov	sp, r7
 801fb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb04:	4770      	bx	lr

0801fb06 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801fb06:	b580      	push	{r7, lr}
 801fb08:	b084      	sub	sp, #16
 801fb0a:	af00      	add	r7, sp, #0
 801fb0c:	6078      	str	r0, [r7, #4]
 801fb0e:	460b      	mov	r3, r1
 801fb10:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fb12:	687b      	ldr	r3, [r7, #4]
 801fb14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fb18:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801fb1a:	68fb      	ldr	r3, [r7, #12]
 801fb1c:	2b00      	cmp	r3, #0
 801fb1e:	d020      	beq.n	801fb62 <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 801fb20:	68fb      	ldr	r3, [r7, #12]
 801fb22:	7a1b      	ldrb	r3, [r3, #8]
 801fb24:	2b02      	cmp	r3, #2
 801fb26:	d005      	beq.n	801fb34 <MSC_BOT_DataIn+0x2e>
 801fb28:	2b02      	cmp	r3, #2
 801fb2a:	db1c      	blt.n	801fb66 <MSC_BOT_DataIn+0x60>
 801fb2c:	3b03      	subs	r3, #3
 801fb2e:	2b01      	cmp	r3, #1
 801fb30:	d819      	bhi.n	801fb66 <MSC_BOT_DataIn+0x60>
 801fb32:	e011      	b.n	801fb58 <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801fb34:	68fb      	ldr	r3, [r7, #12]
 801fb36:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801fb3a:	68fb      	ldr	r3, [r7, #12]
 801fb3c:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801fb40:	461a      	mov	r2, r3
 801fb42:	6878      	ldr	r0, [r7, #4]
 801fb44:	f000 f992 	bl	801fe6c <SCSI_ProcessCmd>
 801fb48:	4603      	mov	r3, r0
 801fb4a:	2b00      	cmp	r3, #0
 801fb4c:	da0d      	bge.n	801fb6a <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801fb4e:	2101      	movs	r1, #1
 801fb50:	6878      	ldr	r0, [r7, #4]
 801fb52:	f000 f8fb 	bl	801fd4c <MSC_BOT_SendCSW>
      }
      break;
 801fb56:	e008      	b.n	801fb6a <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801fb58:	2100      	movs	r1, #0
 801fb5a:	6878      	ldr	r0, [r7, #4]
 801fb5c:	f000 f8f6 	bl	801fd4c <MSC_BOT_SendCSW>
      break;
 801fb60:	e004      	b.n	801fb6c <MSC_BOT_DataIn+0x66>
    return;
 801fb62:	bf00      	nop
 801fb64:	e002      	b.n	801fb6c <MSC_BOT_DataIn+0x66>

    default:
      break;
 801fb66:	bf00      	nop
 801fb68:	e000      	b.n	801fb6c <MSC_BOT_DataIn+0x66>
      break;
 801fb6a:	bf00      	nop
  }
}
 801fb6c:	3710      	adds	r7, #16
 801fb6e:	46bd      	mov	sp, r7
 801fb70:	bd80      	pop	{r7, pc}

0801fb72 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801fb72:	b580      	push	{r7, lr}
 801fb74:	b084      	sub	sp, #16
 801fb76:	af00      	add	r7, sp, #0
 801fb78:	6078      	str	r0, [r7, #4]
 801fb7a:	460b      	mov	r3, r1
 801fb7c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fb7e:	687b      	ldr	r3, [r7, #4]
 801fb80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fb84:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801fb86:	68fb      	ldr	r3, [r7, #12]
 801fb88:	2b00      	cmp	r3, #0
 801fb8a:	d01c      	beq.n	801fbc6 <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 801fb8c:	68fb      	ldr	r3, [r7, #12]
 801fb8e:	7a1b      	ldrb	r3, [r3, #8]
 801fb90:	2b00      	cmp	r3, #0
 801fb92:	d002      	beq.n	801fb9a <MSC_BOT_DataOut+0x28>
 801fb94:	2b01      	cmp	r3, #1
 801fb96:	d004      	beq.n	801fba2 <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 801fb98:	e018      	b.n	801fbcc <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 801fb9a:	6878      	ldr	r0, [r7, #4]
 801fb9c:	f000 f81a 	bl	801fbd4 <MSC_BOT_CBW_Decode>
      break;
 801fba0:	e014      	b.n	801fbcc <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801fba2:	68fb      	ldr	r3, [r7, #12]
 801fba4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801fba8:	68fb      	ldr	r3, [r7, #12]
 801fbaa:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801fbae:	461a      	mov	r2, r3
 801fbb0:	6878      	ldr	r0, [r7, #4]
 801fbb2:	f000 f95b 	bl	801fe6c <SCSI_ProcessCmd>
 801fbb6:	4603      	mov	r3, r0
 801fbb8:	2b00      	cmp	r3, #0
 801fbba:	da06      	bge.n	801fbca <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801fbbc:	2101      	movs	r1, #1
 801fbbe:	6878      	ldr	r0, [r7, #4]
 801fbc0:	f000 f8c4 	bl	801fd4c <MSC_BOT_SendCSW>
      break;
 801fbc4:	e001      	b.n	801fbca <MSC_BOT_DataOut+0x58>
    return;
 801fbc6:	bf00      	nop
 801fbc8:	e000      	b.n	801fbcc <MSC_BOT_DataOut+0x5a>
      break;
 801fbca:	bf00      	nop
  }
}
 801fbcc:	3710      	adds	r7, #16
 801fbce:	46bd      	mov	sp, r7
 801fbd0:	bd80      	pop	{r7, pc}
	...

0801fbd4 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 801fbd4:	b580      	push	{r7, lr}
 801fbd6:	b084      	sub	sp, #16
 801fbd8:	af00      	add	r7, sp, #0
 801fbda:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fbdc:	687b      	ldr	r3, [r7, #4]
 801fbde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fbe2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801fbe4:	68fb      	ldr	r3, [r7, #12]
 801fbe6:	2b00      	cmp	r3, #0
 801fbe8:	d077      	beq.n	801fcda <MSC_BOT_CBW_Decode+0x106>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 801fbea:	68fb      	ldr	r3, [r7, #12]
 801fbec:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 801fbf0:	68fb      	ldr	r3, [r7, #12]
 801fbf2:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 801fbf6:	68fb      	ldr	r3, [r7, #12]
 801fbf8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801fbfc:	68fb      	ldr	r3, [r7, #12]
 801fbfe:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 801fc02:	2101      	movs	r1, #1
 801fc04:	6878      	ldr	r0, [r7, #4]
 801fc06:	f003 f941 	bl	8022e8c <USBD_LL_GetRxDataSize>
 801fc0a:	4603      	mov	r3, r0
 801fc0c:	2b1f      	cmp	r3, #31
 801fc0e:	d114      	bne.n	801fc3a <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801fc10:	68fb      	ldr	r3, [r7, #12]
 801fc12:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 801fc16:	4a34      	ldr	r2, [pc, #208]	; (801fce8 <MSC_BOT_CBW_Decode+0x114>)
 801fc18:	4293      	cmp	r3, r2
 801fc1a:	d10e      	bne.n	801fc3a <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801fc1c:	68fb      	ldr	r3, [r7, #12]
 801fc1e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801fc22:	2b01      	cmp	r3, #1
 801fc24:	d809      	bhi.n	801fc3a <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801fc26:	68fb      	ldr	r3, [r7, #12]
 801fc28:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 801fc2c:	2b00      	cmp	r3, #0
 801fc2e:	d004      	beq.n	801fc3a <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bCBLength > 16U))
 801fc30:	68fb      	ldr	r3, [r7, #12]
 801fc32:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801fc36:	2b10      	cmp	r3, #16
 801fc38:	d90e      	bls.n	801fc58 <MSC_BOT_CBW_Decode+0x84>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801fc3a:	68fb      	ldr	r3, [r7, #12]
 801fc3c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801fc40:	2320      	movs	r3, #32
 801fc42:	2205      	movs	r2, #5
 801fc44:	6878      	ldr	r0, [r7, #4]
 801fc46:	f000 fdbc 	bl	80207c2 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801fc4a:	68fb      	ldr	r3, [r7, #12]
 801fc4c:	2202      	movs	r2, #2
 801fc4e:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 801fc50:	6878      	ldr	r0, [r7, #4]
 801fc52:	f000 f8ab 	bl	801fdac <MSC_BOT_Abort>
 801fc56:	e043      	b.n	801fce0 <MSC_BOT_CBW_Decode+0x10c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801fc58:	68fb      	ldr	r3, [r7, #12]
 801fc5a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801fc5e:	68fb      	ldr	r3, [r7, #12]
 801fc60:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801fc64:	461a      	mov	r2, r3
 801fc66:	6878      	ldr	r0, [r7, #4]
 801fc68:	f000 f900 	bl	801fe6c <SCSI_ProcessCmd>
 801fc6c:	4603      	mov	r3, r0
 801fc6e:	2b00      	cmp	r3, #0
 801fc70:	da0c      	bge.n	801fc8c <MSC_BOT_CBW_Decode+0xb8>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 801fc72:	68fb      	ldr	r3, [r7, #12]
 801fc74:	7a1b      	ldrb	r3, [r3, #8]
 801fc76:	2b05      	cmp	r3, #5
 801fc78:	d104      	bne.n	801fc84 <MSC_BOT_CBW_Decode+0xb0>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801fc7a:	2101      	movs	r1, #1
 801fc7c:	6878      	ldr	r0, [r7, #4]
 801fc7e:	f000 f865 	bl	801fd4c <MSC_BOT_SendCSW>
 801fc82:	e02d      	b.n	801fce0 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801fc84:	6878      	ldr	r0, [r7, #4]
 801fc86:	f000 f891 	bl	801fdac <MSC_BOT_Abort>
 801fc8a:	e029      	b.n	801fce0 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801fc8c:	68fb      	ldr	r3, [r7, #12]
 801fc8e:	7a1b      	ldrb	r3, [r3, #8]
 801fc90:	2b02      	cmp	r3, #2
 801fc92:	d024      	beq.n	801fcde <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801fc94:	68fb      	ldr	r3, [r7, #12]
 801fc96:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801fc98:	2b01      	cmp	r3, #1
 801fc9a:	d020      	beq.n	801fcde <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 801fc9c:	68fb      	ldr	r3, [r7, #12]
 801fc9e:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801fca0:	2b03      	cmp	r3, #3
 801fca2:	d01c      	beq.n	801fcde <MSC_BOT_CBW_Decode+0x10a>
    {
      if (hmsc->bot_data_length > 0U)
 801fca4:	68fb      	ldr	r3, [r7, #12]
 801fca6:	68db      	ldr	r3, [r3, #12]
 801fca8:	2b00      	cmp	r3, #0
 801fcaa:	d009      	beq.n	801fcc0 <MSC_BOT_CBW_Decode+0xec>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 801fcac:	68fb      	ldr	r3, [r7, #12]
 801fcae:	f103 0110 	add.w	r1, r3, #16
 801fcb2:	68fb      	ldr	r3, [r7, #12]
 801fcb4:	68db      	ldr	r3, [r3, #12]
 801fcb6:	461a      	mov	r2, r3
 801fcb8:	6878      	ldr	r0, [r7, #4]
 801fcba:	f000 f817 	bl	801fcec <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 801fcbe:	e00f      	b.n	801fce0 <MSC_BOT_CBW_Decode+0x10c>
      }
      else if (hmsc->bot_data_length == 0U)
 801fcc0:	68fb      	ldr	r3, [r7, #12]
 801fcc2:	68db      	ldr	r3, [r3, #12]
 801fcc4:	2b00      	cmp	r3, #0
 801fcc6:	d104      	bne.n	801fcd2 <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801fcc8:	2100      	movs	r1, #0
 801fcca:	6878      	ldr	r0, [r7, #4]
 801fccc:	f000 f83e 	bl	801fd4c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 801fcd0:	e006      	b.n	801fce0 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801fcd2:	6878      	ldr	r0, [r7, #4]
 801fcd4:	f000 f86a 	bl	801fdac <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 801fcd8:	e002      	b.n	801fce0 <MSC_BOT_CBW_Decode+0x10c>
    return;
 801fcda:	bf00      	nop
 801fcdc:	e000      	b.n	801fce0 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    else
    {
      return;
 801fcde:	bf00      	nop
    }
  }
}
 801fce0:	3710      	adds	r7, #16
 801fce2:	46bd      	mov	sp, r7
 801fce4:	bd80      	pop	{r7, pc}
 801fce6:	bf00      	nop
 801fce8:	43425355 	.word	0x43425355

0801fcec <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 801fcec:	b580      	push	{r7, lr}
 801fcee:	b086      	sub	sp, #24
 801fcf0:	af00      	add	r7, sp, #0
 801fcf2:	60f8      	str	r0, [r7, #12]
 801fcf4:	60b9      	str	r1, [r7, #8]
 801fcf6:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fcf8:	68fb      	ldr	r3, [r7, #12]
 801fcfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fcfe:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 801fd00:	697b      	ldr	r3, [r7, #20]
 801fd02:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801fd06:	687a      	ldr	r2, [r7, #4]
 801fd08:	4293      	cmp	r3, r2
 801fd0a:	bf28      	it	cs
 801fd0c:	4613      	movcs	r3, r2
 801fd0e:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801fd10:	697b      	ldr	r3, [r7, #20]
 801fd12:	2b00      	cmp	r3, #0
 801fd14:	d015      	beq.n	801fd42 <MSC_BOT_SendData+0x56>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 801fd16:	697b      	ldr	r3, [r7, #20]
 801fd18:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 801fd1c:	687b      	ldr	r3, [r7, #4]
 801fd1e:	1ad2      	subs	r2, r2, r3
 801fd20:	697b      	ldr	r3, [r7, #20]
 801fd22:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 801fd26:	697b      	ldr	r3, [r7, #20]
 801fd28:	2200      	movs	r2, #0
 801fd2a:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 801fd2e:	697b      	ldr	r3, [r7, #20]
 801fd30:	2204      	movs	r2, #4
 801fd32:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 801fd34:	693b      	ldr	r3, [r7, #16]
 801fd36:	68ba      	ldr	r2, [r7, #8]
 801fd38:	2181      	movs	r1, #129	; 0x81
 801fd3a:	68f8      	ldr	r0, [r7, #12]
 801fd3c:	f003 f864 	bl	8022e08 <USBD_LL_Transmit>
 801fd40:	e000      	b.n	801fd44 <MSC_BOT_SendData+0x58>
    return;
 801fd42:	bf00      	nop
}
 801fd44:	3718      	adds	r7, #24
 801fd46:	46bd      	mov	sp, r7
 801fd48:	bd80      	pop	{r7, pc}
	...

0801fd4c <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 801fd4c:	b580      	push	{r7, lr}
 801fd4e:	b084      	sub	sp, #16
 801fd50:	af00      	add	r7, sp, #0
 801fd52:	6078      	str	r0, [r7, #4]
 801fd54:	460b      	mov	r3, r1
 801fd56:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fd58:	687b      	ldr	r3, [r7, #4]
 801fd5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fd5e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801fd60:	68fb      	ldr	r3, [r7, #12]
 801fd62:	2b00      	cmp	r3, #0
 801fd64:	d01b      	beq.n	801fd9e <MSC_BOT_SendCSW+0x52>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 801fd66:	68fb      	ldr	r3, [r7, #12]
 801fd68:	4a0f      	ldr	r2, [pc, #60]	; (801fda8 <MSC_BOT_SendCSW+0x5c>)
 801fd6a:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 801fd6e:	68fb      	ldr	r3, [r7, #12]
 801fd70:	78fa      	ldrb	r2, [r7, #3]
 801fd72:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 801fd76:	68fb      	ldr	r3, [r7, #12]
 801fd78:	2200      	movs	r2, #0
 801fd7a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 801fd7c:	68fb      	ldr	r3, [r7, #12]
 801fd7e:	f503 720c 	add.w	r2, r3, #560	; 0x230
 801fd82:	230d      	movs	r3, #13
 801fd84:	2181      	movs	r1, #129	; 0x81
 801fd86:	6878      	ldr	r0, [r7, #4]
 801fd88:	f003 f83e 	bl	8022e08 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 801fd8c:	68fb      	ldr	r3, [r7, #12]
 801fd8e:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801fd92:	231f      	movs	r3, #31
 801fd94:	2101      	movs	r1, #1
 801fd96:	6878      	ldr	r0, [r7, #4]
 801fd98:	f003 f857 	bl	8022e4a <USBD_LL_PrepareReceive>
 801fd9c:	e000      	b.n	801fda0 <MSC_BOT_SendCSW+0x54>
    return;
 801fd9e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801fda0:	3710      	adds	r7, #16
 801fda2:	46bd      	mov	sp, r7
 801fda4:	bd80      	pop	{r7, pc}
 801fda6:	bf00      	nop
 801fda8:	53425355 	.word	0x53425355

0801fdac <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 801fdac:	b580      	push	{r7, lr}
 801fdae:	b084      	sub	sp, #16
 801fdb0:	af00      	add	r7, sp, #0
 801fdb2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fdb4:	687b      	ldr	r3, [r7, #4]
 801fdb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fdba:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801fdbc:	68fb      	ldr	r3, [r7, #12]
 801fdbe:	2b00      	cmp	r3, #0
 801fdc0:	d022      	beq.n	801fe08 <MSC_BOT_Abort+0x5c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 801fdc2:	68fb      	ldr	r3, [r7, #12]
 801fdc4:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801fdc8:	2b00      	cmp	r3, #0
 801fdca:	d10c      	bne.n	801fde6 <MSC_BOT_Abort+0x3a>
      (hmsc->cbw.dDataLength != 0U) &&
 801fdcc:	68fb      	ldr	r3, [r7, #12]
 801fdce:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 801fdd2:	2b00      	cmp	r3, #0
 801fdd4:	d007      	beq.n	801fde6 <MSC_BOT_Abort+0x3a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 801fdd6:	68fb      	ldr	r3, [r7, #12]
 801fdd8:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 801fdda:	2b00      	cmp	r3, #0
 801fddc:	d103      	bne.n	801fde6 <MSC_BOT_Abort+0x3a>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 801fdde:	2101      	movs	r1, #1
 801fde0:	6878      	ldr	r0, [r7, #4]
 801fde2:	f002 ff88 	bl	8022cf6 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 801fde6:	2181      	movs	r1, #129	; 0x81
 801fde8:	6878      	ldr	r0, [r7, #4]
 801fdea:	f002 ff84 	bl	8022cf6 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 801fdee:	68fb      	ldr	r3, [r7, #12]
 801fdf0:	7a5b      	ldrb	r3, [r3, #9]
 801fdf2:	2b02      	cmp	r3, #2
 801fdf4:	d109      	bne.n	801fe0a <MSC_BOT_Abort+0x5e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 801fdf6:	2181      	movs	r1, #129	; 0x81
 801fdf8:	6878      	ldr	r0, [r7, #4]
 801fdfa:	f002 ff7c 	bl	8022cf6 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 801fdfe:	2101      	movs	r1, #1
 801fe00:	6878      	ldr	r0, [r7, #4]
 801fe02:	f002 ff78 	bl	8022cf6 <USBD_LL_StallEP>
 801fe06:	e000      	b.n	801fe0a <MSC_BOT_Abort+0x5e>
    return;
 801fe08:	bf00      	nop
  }
}
 801fe0a:	3710      	adds	r7, #16
 801fe0c:	46bd      	mov	sp, r7
 801fe0e:	bd80      	pop	{r7, pc}

0801fe10 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801fe10:	b580      	push	{r7, lr}
 801fe12:	b084      	sub	sp, #16
 801fe14:	af00      	add	r7, sp, #0
 801fe16:	6078      	str	r0, [r7, #4]
 801fe18:	460b      	mov	r3, r1
 801fe1a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fe1c:	687b      	ldr	r3, [r7, #4]
 801fe1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fe22:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801fe24:	68fb      	ldr	r3, [r7, #12]
 801fe26:	2b00      	cmp	r3, #0
 801fe28:	d019      	beq.n	801fe5e <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 801fe2a:	68fb      	ldr	r3, [r7, #12]
 801fe2c:	7a5b      	ldrb	r3, [r3, #9]
 801fe2e:	2b02      	cmp	r3, #2
 801fe30:	d108      	bne.n	801fe44 <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 801fe32:	2181      	movs	r1, #129	; 0x81
 801fe34:	6878      	ldr	r0, [r7, #4]
 801fe36:	f002 ff5e 	bl	8022cf6 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 801fe3a:	2101      	movs	r1, #1
 801fe3c:	6878      	ldr	r0, [r7, #4]
 801fe3e:	f002 ff5a 	bl	8022cf6 <USBD_LL_StallEP>
 801fe42:	e00f      	b.n	801fe64 <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 801fe44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801fe48:	2b00      	cmp	r3, #0
 801fe4a:	da0a      	bge.n	801fe62 <MSC_BOT_CplClrFeature+0x52>
 801fe4c:	68fb      	ldr	r3, [r7, #12]
 801fe4e:	7a5b      	ldrb	r3, [r3, #9]
 801fe50:	2b01      	cmp	r3, #1
 801fe52:	d006      	beq.n	801fe62 <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801fe54:	2101      	movs	r1, #1
 801fe56:	6878      	ldr	r0, [r7, #4]
 801fe58:	f7ff ff78 	bl	801fd4c <MSC_BOT_SendCSW>
 801fe5c:	e002      	b.n	801fe64 <MSC_BOT_CplClrFeature+0x54>
    return;
 801fe5e:	bf00      	nop
 801fe60:	e000      	b.n	801fe64 <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 801fe62:	bf00      	nop
  }
}
 801fe64:	3710      	adds	r7, #16
 801fe66:	46bd      	mov	sp, r7
 801fe68:	bd80      	pop	{r7, pc}
	...

0801fe6c <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 801fe6c:	b580      	push	{r7, lr}
 801fe6e:	b086      	sub	sp, #24
 801fe70:	af00      	add	r7, sp, #0
 801fe72:	60f8      	str	r0, [r7, #12]
 801fe74:	460b      	mov	r3, r1
 801fe76:	607a      	str	r2, [r7, #4]
 801fe78:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fe7a:	68fb      	ldr	r3, [r7, #12]
 801fe7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fe80:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801fe82:	693b      	ldr	r3, [r7, #16]
 801fe84:	2b00      	cmp	r3, #0
 801fe86:	d102      	bne.n	801fe8e <SCSI_ProcessCmd+0x22>
  {
    return -1;
 801fe88:	f04f 33ff 	mov.w	r3, #4294967295
 801fe8c:	e168      	b.n	8020160 <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 801fe8e:	687b      	ldr	r3, [r7, #4]
 801fe90:	781b      	ldrb	r3, [r3, #0]
 801fe92:	2baa      	cmp	r3, #170	; 0xaa
 801fe94:	f000 8144 	beq.w	8020120 <SCSI_ProcessCmd+0x2b4>
 801fe98:	2baa      	cmp	r3, #170	; 0xaa
 801fe9a:	f300 8153 	bgt.w	8020144 <SCSI_ProcessCmd+0x2d8>
 801fe9e:	2ba8      	cmp	r3, #168	; 0xa8
 801fea0:	f000 812c 	beq.w	80200fc <SCSI_ProcessCmd+0x290>
 801fea4:	2ba8      	cmp	r3, #168	; 0xa8
 801fea6:	f300 814d 	bgt.w	8020144 <SCSI_ProcessCmd+0x2d8>
 801feaa:	2b5a      	cmp	r3, #90	; 0x5a
 801feac:	f300 80c0 	bgt.w	8020030 <SCSI_ProcessCmd+0x1c4>
 801feb0:	2b00      	cmp	r3, #0
 801feb2:	f2c0 8147 	blt.w	8020144 <SCSI_ProcessCmd+0x2d8>
 801feb6:	2b5a      	cmp	r3, #90	; 0x5a
 801feb8:	f200 8144 	bhi.w	8020144 <SCSI_ProcessCmd+0x2d8>
 801febc:	a201      	add	r2, pc, #4	; (adr r2, 801fec4 <SCSI_ProcessCmd+0x58>)
 801febe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fec2:	bf00      	nop
 801fec4:	08020037 	.word	0x08020037
 801fec8:	08020145 	.word	0x08020145
 801fecc:	08020145 	.word	0x08020145
 801fed0:	08020049 	.word	0x08020049
 801fed4:	08020145 	.word	0x08020145
 801fed8:	08020145 	.word	0x08020145
 801fedc:	08020145 	.word	0x08020145
 801fee0:	08020145 	.word	0x08020145
 801fee4:	08020145 	.word	0x08020145
 801fee8:	08020145 	.word	0x08020145
 801feec:	08020145 	.word	0x08020145
 801fef0:	08020145 	.word	0x08020145
 801fef4:	08020145 	.word	0x08020145
 801fef8:	08020145 	.word	0x08020145
 801fefc:	08020145 	.word	0x08020145
 801ff00:	08020145 	.word	0x08020145
 801ff04:	08020145 	.word	0x08020145
 801ff08:	08020145 	.word	0x08020145
 801ff0c:	0802005b 	.word	0x0802005b
 801ff10:	08020145 	.word	0x08020145
 801ff14:	08020145 	.word	0x08020145
 801ff18:	08020145 	.word	0x08020145
 801ff1c:	08020145 	.word	0x08020145
 801ff20:	08020145 	.word	0x08020145
 801ff24:	08020145 	.word	0x08020145
 801ff28:	08020145 	.word	0x08020145
 801ff2c:	08020091 	.word	0x08020091
 801ff30:	0802006d 	.word	0x0802006d
 801ff34:	08020145 	.word	0x08020145
 801ff38:	08020145 	.word	0x08020145
 801ff3c:	0802007f 	.word	0x0802007f
 801ff40:	08020145 	.word	0x08020145
 801ff44:	08020145 	.word	0x08020145
 801ff48:	08020145 	.word	0x08020145
 801ff4c:	08020145 	.word	0x08020145
 801ff50:	080200b5 	.word	0x080200b5
 801ff54:	08020145 	.word	0x08020145
 801ff58:	080200c7 	.word	0x080200c7
 801ff5c:	08020145 	.word	0x08020145
 801ff60:	08020145 	.word	0x08020145
 801ff64:	080200eb 	.word	0x080200eb
 801ff68:	08020145 	.word	0x08020145
 801ff6c:	0802010f 	.word	0x0802010f
 801ff70:	08020145 	.word	0x08020145
 801ff74:	08020145 	.word	0x08020145
 801ff78:	08020145 	.word	0x08020145
 801ff7c:	08020145 	.word	0x08020145
 801ff80:	08020133 	.word	0x08020133
 801ff84:	08020145 	.word	0x08020145
 801ff88:	08020145 	.word	0x08020145
 801ff8c:	08020145 	.word	0x08020145
 801ff90:	08020145 	.word	0x08020145
 801ff94:	08020145 	.word	0x08020145
 801ff98:	08020145 	.word	0x08020145
 801ff9c:	08020145 	.word	0x08020145
 801ffa0:	08020145 	.word	0x08020145
 801ffa4:	08020145 	.word	0x08020145
 801ffa8:	08020145 	.word	0x08020145
 801ffac:	08020145 	.word	0x08020145
 801ffb0:	08020145 	.word	0x08020145
 801ffb4:	08020145 	.word	0x08020145
 801ffb8:	08020145 	.word	0x08020145
 801ffbc:	08020145 	.word	0x08020145
 801ffc0:	08020145 	.word	0x08020145
 801ffc4:	08020145 	.word	0x08020145
 801ffc8:	08020145 	.word	0x08020145
 801ffcc:	08020145 	.word	0x08020145
 801ffd0:	08020145 	.word	0x08020145
 801ffd4:	08020145 	.word	0x08020145
 801ffd8:	08020145 	.word	0x08020145
 801ffdc:	08020145 	.word	0x08020145
 801ffe0:	08020145 	.word	0x08020145
 801ffe4:	08020145 	.word	0x08020145
 801ffe8:	08020145 	.word	0x08020145
 801ffec:	08020145 	.word	0x08020145
 801fff0:	08020145 	.word	0x08020145
 801fff4:	08020145 	.word	0x08020145
 801fff8:	08020145 	.word	0x08020145
 801fffc:	08020145 	.word	0x08020145
 8020000:	08020145 	.word	0x08020145
 8020004:	08020145 	.word	0x08020145
 8020008:	08020145 	.word	0x08020145
 802000c:	08020145 	.word	0x08020145
 8020010:	08020145 	.word	0x08020145
 8020014:	08020145 	.word	0x08020145
 8020018:	08020145 	.word	0x08020145
 802001c:	08020145 	.word	0x08020145
 8020020:	08020145 	.word	0x08020145
 8020024:	08020145 	.word	0x08020145
 8020028:	08020145 	.word	0x08020145
 802002c:	080200a3 	.word	0x080200a3
 8020030:	2b9e      	cmp	r3, #158	; 0x9e
 8020032:	d051      	beq.n	80200d8 <SCSI_ProcessCmd+0x26c>
 8020034:	e086      	b.n	8020144 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8020036:	7afb      	ldrb	r3, [r7, #11]
 8020038:	687a      	ldr	r2, [r7, #4]
 802003a:	4619      	mov	r1, r3
 802003c:	68f8      	ldr	r0, [r7, #12]
 802003e:	f000 f893 	bl	8020168 <SCSI_TestUnitReady>
 8020042:	4603      	mov	r3, r0
 8020044:	75fb      	strb	r3, [r7, #23]
      break;
 8020046:	e089      	b.n	802015c <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8020048:	7afb      	ldrb	r3, [r7, #11]
 802004a:	687a      	ldr	r2, [r7, #4]
 802004c:	4619      	mov	r1, r3
 802004e:	68f8      	ldr	r0, [r7, #12]
 8020050:	f000 fb38 	bl	80206c4 <SCSI_RequestSense>
 8020054:	4603      	mov	r3, r0
 8020056:	75fb      	strb	r3, [r7, #23]
      break;
 8020058:	e080      	b.n	802015c <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 802005a:	7afb      	ldrb	r3, [r7, #11]
 802005c:	687a      	ldr	r2, [r7, #4]
 802005e:	4619      	mov	r1, r3
 8020060:	68f8      	ldr	r0, [r7, #12]
 8020062:	f000 f8d1 	bl	8020208 <SCSI_Inquiry>
 8020066:	4603      	mov	r3, r0
 8020068:	75fb      	strb	r3, [r7, #23]
      break;
 802006a:	e077      	b.n	802015c <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 802006c:	7afb      	ldrb	r3, [r7, #11]
 802006e:	687a      	ldr	r2, [r7, #4]
 8020070:	4619      	mov	r1, r3
 8020072:	68f8      	ldr	r0, [r7, #12]
 8020074:	f000 fbec 	bl	8020850 <SCSI_StartStopUnit>
 8020078:	4603      	mov	r3, r0
 802007a:	75fb      	strb	r3, [r7, #23]
      break;
 802007c:	e06e      	b.n	802015c <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 802007e:	7afb      	ldrb	r3, [r7, #11]
 8020080:	687a      	ldr	r2, [r7, #4]
 8020082:	4619      	mov	r1, r3
 8020084:	68f8      	ldr	r0, [r7, #12]
 8020086:	f000 fc34 	bl	80208f2 <SCSI_AllowPreventRemovable>
 802008a:	4603      	mov	r3, r0
 802008c:	75fb      	strb	r3, [r7, #23]
      break;
 802008e:	e065      	b.n	802015c <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8020090:	7afb      	ldrb	r3, [r7, #11]
 8020092:	687a      	ldr	r2, [r7, #4]
 8020094:	4619      	mov	r1, r3
 8020096:	68f8      	ldr	r0, [r7, #12]
 8020098:	f000 fabc 	bl	8020614 <SCSI_ModeSense6>
 802009c:	4603      	mov	r3, r0
 802009e:	75fb      	strb	r3, [r7, #23]
      break;
 80200a0:	e05c      	b.n	802015c <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 80200a2:	7afb      	ldrb	r3, [r7, #11]
 80200a4:	687a      	ldr	r2, [r7, #4]
 80200a6:	4619      	mov	r1, r3
 80200a8:	68f8      	ldr	r0, [r7, #12]
 80200aa:	f000 fadf 	bl	802066c <SCSI_ModeSense10>
 80200ae:	4603      	mov	r3, r0
 80200b0:	75fb      	strb	r3, [r7, #23]
      break;
 80200b2:	e053      	b.n	802015c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 80200b4:	7afb      	ldrb	r3, [r7, #11]
 80200b6:	687a      	ldr	r2, [r7, #4]
 80200b8:	4619      	mov	r1, r3
 80200ba:	68f8      	ldr	r0, [r7, #12]
 80200bc:	f000 fa37 	bl	802052e <SCSI_ReadFormatCapacity>
 80200c0:	4603      	mov	r3, r0
 80200c2:	75fb      	strb	r3, [r7, #23]
      break;
 80200c4:	e04a      	b.n	802015c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 80200c6:	7afb      	ldrb	r3, [r7, #11]
 80200c8:	687a      	ldr	r2, [r7, #4]
 80200ca:	4619      	mov	r1, r3
 80200cc:	68f8      	ldr	r0, [r7, #12]
 80200ce:	f000 f90f 	bl	80202f0 <SCSI_ReadCapacity10>
 80200d2:	4603      	mov	r3, r0
 80200d4:	75fb      	strb	r3, [r7, #23]
      break;
 80200d6:	e041      	b.n	802015c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 80200d8:	7afb      	ldrb	r3, [r7, #11]
 80200da:	687a      	ldr	r2, [r7, #4]
 80200dc:	4619      	mov	r1, r3
 80200de:	68f8      	ldr	r0, [r7, #12]
 80200e0:	f000 f97b 	bl	80203da <SCSI_ReadCapacity16>
 80200e4:	4603      	mov	r3, r0
 80200e6:	75fb      	strb	r3, [r7, #23]
      break;
 80200e8:	e038      	b.n	802015c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 80200ea:	7afb      	ldrb	r3, [r7, #11]
 80200ec:	687a      	ldr	r2, [r7, #4]
 80200ee:	4619      	mov	r1, r3
 80200f0:	68f8      	ldr	r0, [r7, #12]
 80200f2:	f000 fc27 	bl	8020944 <SCSI_Read10>
 80200f6:	4603      	mov	r3, r0
 80200f8:	75fb      	strb	r3, [r7, #23]
      break;
 80200fa:	e02f      	b.n	802015c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 80200fc:	7afb      	ldrb	r3, [r7, #11]
 80200fe:	687a      	ldr	r2, [r7, #4]
 8020100:	4619      	mov	r1, r3
 8020102:	68f8      	ldr	r0, [r7, #12]
 8020104:	f000 fcbe 	bl	8020a84 <SCSI_Read12>
 8020108:	4603      	mov	r3, r0
 802010a:	75fb      	strb	r3, [r7, #23]
      break;
 802010c:	e026      	b.n	802015c <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 802010e:	7afb      	ldrb	r3, [r7, #11]
 8020110:	687a      	ldr	r2, [r7, #4]
 8020112:	4619      	mov	r1, r3
 8020114:	68f8      	ldr	r0, [r7, #12]
 8020116:	f000 fd60 	bl	8020bda <SCSI_Write10>
 802011a:	4603      	mov	r3, r0
 802011c:	75fb      	strb	r3, [r7, #23]
      break;
 802011e:	e01d      	b.n	802015c <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8020120:	7afb      	ldrb	r3, [r7, #11]
 8020122:	687a      	ldr	r2, [r7, #4]
 8020124:	4619      	mov	r1, r3
 8020126:	68f8      	ldr	r0, [r7, #12]
 8020128:	f000 fe1c 	bl	8020d64 <SCSI_Write12>
 802012c:	4603      	mov	r3, r0
 802012e:	75fb      	strb	r3, [r7, #23]
      break;
 8020130:	e014      	b.n	802015c <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8020132:	7afb      	ldrb	r3, [r7, #11]
 8020134:	687a      	ldr	r2, [r7, #4]
 8020136:	4619      	mov	r1, r3
 8020138:	68f8      	ldr	r0, [r7, #12]
 802013a:	f000 fee8 	bl	8020f0e <SCSI_Verify10>
 802013e:	4603      	mov	r3, r0
 8020140:	75fb      	strb	r3, [r7, #23]
      break;
 8020142:	e00b      	b.n	802015c <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8020144:	7af9      	ldrb	r1, [r7, #11]
 8020146:	2320      	movs	r3, #32
 8020148:	2205      	movs	r2, #5
 802014a:	68f8      	ldr	r0, [r7, #12]
 802014c:	f000 fb39 	bl	80207c2 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8020150:	693b      	ldr	r3, [r7, #16]
 8020152:	2202      	movs	r2, #2
 8020154:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8020156:	23ff      	movs	r3, #255	; 0xff
 8020158:	75fb      	strb	r3, [r7, #23]
      break;
 802015a:	bf00      	nop
  }

  return ret;
 802015c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8020160:	4618      	mov	r0, r3
 8020162:	3718      	adds	r7, #24
 8020164:	46bd      	mov	sp, r7
 8020166:	bd80      	pop	{r7, pc}

08020168 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020168:	b580      	push	{r7, lr}
 802016a:	b086      	sub	sp, #24
 802016c:	af00      	add	r7, sp, #0
 802016e:	60f8      	str	r0, [r7, #12]
 8020170:	460b      	mov	r3, r1
 8020172:	607a      	str	r2, [r7, #4]
 8020174:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020176:	68fb      	ldr	r3, [r7, #12]
 8020178:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802017c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 802017e:	697b      	ldr	r3, [r7, #20]
 8020180:	2b00      	cmp	r3, #0
 8020182:	d102      	bne.n	802018a <SCSI_TestUnitReady+0x22>
  {
    return -1;
 8020184:	f04f 33ff 	mov.w	r3, #4294967295
 8020188:	e03a      	b.n	8020200 <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 802018a:	697b      	ldr	r3, [r7, #20]
 802018c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8020190:	2b00      	cmp	r3, #0
 8020192:	d00a      	beq.n	80201aa <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020194:	697b      	ldr	r3, [r7, #20]
 8020196:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 802019a:	2320      	movs	r3, #32
 802019c:	2205      	movs	r2, #5
 802019e:	68f8      	ldr	r0, [r7, #12]
 80201a0:	f000 fb0f 	bl	80207c2 <SCSI_SenseCode>

    return -1;
 80201a4:	f04f 33ff 	mov.w	r3, #4294967295
 80201a8:	e02a      	b.n	8020200 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80201aa:	697b      	ldr	r3, [r7, #20]
 80201ac:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80201b0:	2b02      	cmp	r3, #2
 80201b2:	d10b      	bne.n	80201cc <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80201b4:	7af9      	ldrb	r1, [r7, #11]
 80201b6:	233a      	movs	r3, #58	; 0x3a
 80201b8:	2202      	movs	r2, #2
 80201ba:	68f8      	ldr	r0, [r7, #12]
 80201bc:	f000 fb01 	bl	80207c2 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80201c0:	697b      	ldr	r3, [r7, #20]
 80201c2:	2205      	movs	r2, #5
 80201c4:	721a      	strb	r2, [r3, #8]
    return -1;
 80201c6:	f04f 33ff 	mov.w	r3, #4294967295
 80201ca:	e019      	b.n	8020200 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80201cc:	68fb      	ldr	r3, [r7, #12]
 80201ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80201d2:	689b      	ldr	r3, [r3, #8]
 80201d4:	7afa      	ldrb	r2, [r7, #11]
 80201d6:	4610      	mov	r0, r2
 80201d8:	4798      	blx	r3
 80201da:	4603      	mov	r3, r0
 80201dc:	2b00      	cmp	r3, #0
 80201de:	d00b      	beq.n	80201f8 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80201e0:	7af9      	ldrb	r1, [r7, #11]
 80201e2:	233a      	movs	r3, #58	; 0x3a
 80201e4:	2202      	movs	r2, #2
 80201e6:	68f8      	ldr	r0, [r7, #12]
 80201e8:	f000 faeb 	bl	80207c2 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80201ec:	697b      	ldr	r3, [r7, #20]
 80201ee:	2205      	movs	r2, #5
 80201f0:	721a      	strb	r2, [r3, #8]

    return -1;
 80201f2:	f04f 33ff 	mov.w	r3, #4294967295
 80201f6:	e003      	b.n	8020200 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 80201f8:	697b      	ldr	r3, [r7, #20]
 80201fa:	2200      	movs	r2, #0
 80201fc:	60da      	str	r2, [r3, #12]

  return 0;
 80201fe:	2300      	movs	r3, #0
}
 8020200:	4618      	mov	r0, r3
 8020202:	3718      	adds	r7, #24
 8020204:	46bd      	mov	sp, r7
 8020206:	bd80      	pop	{r7, pc}

08020208 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020208:	b580      	push	{r7, lr}
 802020a:	b088      	sub	sp, #32
 802020c:	af00      	add	r7, sp, #0
 802020e:	60f8      	str	r0, [r7, #12]
 8020210:	460b      	mov	r3, r1
 8020212:	607a      	str	r2, [r7, #4]
 8020214:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020216:	68fb      	ldr	r3, [r7, #12]
 8020218:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802021c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 802021e:	69bb      	ldr	r3, [r7, #24]
 8020220:	2b00      	cmp	r3, #0
 8020222:	d102      	bne.n	802022a <SCSI_Inquiry+0x22>
  {
    return -1;
 8020224:	f04f 33ff 	mov.w	r3, #4294967295
 8020228:	e05a      	b.n	80202e0 <SCSI_Inquiry+0xd8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 802022a:	69bb      	ldr	r3, [r7, #24]
 802022c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8020230:	2b00      	cmp	r3, #0
 8020232:	d10a      	bne.n	802024a <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020234:	69bb      	ldr	r3, [r7, #24]
 8020236:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 802023a:	2320      	movs	r3, #32
 802023c:	2205      	movs	r2, #5
 802023e:	68f8      	ldr	r0, [r7, #12]
 8020240:	f000 fabf 	bl	80207c2 <SCSI_SenseCode>
    return -1;
 8020244:	f04f 33ff 	mov.w	r3, #4294967295
 8020248:	e04a      	b.n	80202e0 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 802024a:	687b      	ldr	r3, [r7, #4]
 802024c:	3301      	adds	r3, #1
 802024e:	781b      	ldrb	r3, [r3, #0]
 8020250:	f003 0301 	and.w	r3, r3, #1
 8020254:	2b00      	cmp	r3, #0
 8020256:	d020      	beq.n	802029a <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8020258:	687b      	ldr	r3, [r7, #4]
 802025a:	3302      	adds	r3, #2
 802025c:	781b      	ldrb	r3, [r3, #0]
 802025e:	2b00      	cmp	r3, #0
 8020260:	d105      	bne.n	802026e <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8020262:	2206      	movs	r2, #6
 8020264:	4920      	ldr	r1, [pc, #128]	; (80202e8 <SCSI_Inquiry+0xe0>)
 8020266:	69b8      	ldr	r0, [r7, #24]
 8020268:	f000 ffb4 	bl	80211d4 <SCSI_UpdateBotData>
 802026c:	e037      	b.n	80202de <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 802026e:	687b      	ldr	r3, [r7, #4]
 8020270:	3302      	adds	r3, #2
 8020272:	781b      	ldrb	r3, [r3, #0]
 8020274:	2b80      	cmp	r3, #128	; 0x80
 8020276:	d105      	bne.n	8020284 <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8020278:	2208      	movs	r2, #8
 802027a:	491c      	ldr	r1, [pc, #112]	; (80202ec <SCSI_Inquiry+0xe4>)
 802027c:	69b8      	ldr	r0, [r7, #24]
 802027e:	f000 ffa9 	bl	80211d4 <SCSI_UpdateBotData>
 8020282:	e02c      	b.n	80202de <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8020284:	69bb      	ldr	r3, [r7, #24]
 8020286:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 802028a:	2324      	movs	r3, #36	; 0x24
 802028c:	2205      	movs	r2, #5
 802028e:	68f8      	ldr	r0, [r7, #12]
 8020290:	f000 fa97 	bl	80207c2 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8020294:	f04f 33ff 	mov.w	r3, #4294967295
 8020298:	e022      	b.n	80202e0 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 802029a:	68fb      	ldr	r3, [r7, #12]
 802029c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80202a0:	69d9      	ldr	r1, [r3, #28]
 80202a2:	7afa      	ldrb	r2, [r7, #11]
 80202a4:	4613      	mov	r3, r2
 80202a6:	00db      	lsls	r3, r3, #3
 80202a8:	4413      	add	r3, r2
 80202aa:	009b      	lsls	r3, r3, #2
 80202ac:	440b      	add	r3, r1
 80202ae:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 80202b0:	697b      	ldr	r3, [r7, #20]
 80202b2:	3304      	adds	r3, #4
 80202b4:	781b      	ldrb	r3, [r3, #0]
 80202b6:	b29b      	uxth	r3, r3
 80202b8:	3305      	adds	r3, #5
 80202ba:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 80202bc:	687b      	ldr	r3, [r7, #4]
 80202be:	3304      	adds	r3, #4
 80202c0:	781b      	ldrb	r3, [r3, #0]
 80202c2:	b29b      	uxth	r3, r3
 80202c4:	8bfa      	ldrh	r2, [r7, #30]
 80202c6:	429a      	cmp	r2, r3
 80202c8:	d303      	bcc.n	80202d2 <SCSI_Inquiry+0xca>
    {
      len = params[4];
 80202ca:	687b      	ldr	r3, [r7, #4]
 80202cc:	3304      	adds	r3, #4
 80202ce:	781b      	ldrb	r3, [r3, #0]
 80202d0:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 80202d2:	8bfb      	ldrh	r3, [r7, #30]
 80202d4:	461a      	mov	r2, r3
 80202d6:	6979      	ldr	r1, [r7, #20]
 80202d8:	69b8      	ldr	r0, [r7, #24]
 80202da:	f000 ff7b 	bl	80211d4 <SCSI_UpdateBotData>
  }

  return 0;
 80202de:	2300      	movs	r3, #0
}
 80202e0:	4618      	mov	r0, r3
 80202e2:	3720      	adds	r7, #32
 80202e4:	46bd      	mov	sp, r7
 80202e6:	bd80      	pop	{r7, pc}
 80202e8:	20000638 	.word	0x20000638
 80202ec:	20000640 	.word	0x20000640

080202f0 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80202f0:	b580      	push	{r7, lr}
 80202f2:	b086      	sub	sp, #24
 80202f4:	af00      	add	r7, sp, #0
 80202f6:	60f8      	str	r0, [r7, #12]
 80202f8:	460b      	mov	r3, r1
 80202fa:	607a      	str	r2, [r7, #4]
 80202fc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80202fe:	68fb      	ldr	r3, [r7, #12]
 8020300:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020304:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020306:	697b      	ldr	r3, [r7, #20]
 8020308:	2b00      	cmp	r3, #0
 802030a:	d102      	bne.n	8020312 <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 802030c:	f04f 33ff 	mov.w	r3, #4294967295
 8020310:	e05f      	b.n	80203d2 <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8020312:	68fb      	ldr	r3, [r7, #12]
 8020314:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020318:	685b      	ldr	r3, [r3, #4]
 802031a:	697a      	ldr	r2, [r7, #20]
 802031c:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8020320:	697a      	ldr	r2, [r7, #20]
 8020322:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8020326:	7af8      	ldrb	r0, [r7, #11]
 8020328:	4798      	blx	r3
 802032a:	4603      	mov	r3, r0
 802032c:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 802032e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8020332:	2b00      	cmp	r3, #0
 8020334:	d104      	bne.n	8020340 <SCSI_ReadCapacity10+0x50>
 8020336:	697b      	ldr	r3, [r7, #20]
 8020338:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 802033c:	2b02      	cmp	r3, #2
 802033e:	d108      	bne.n	8020352 <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020340:	7af9      	ldrb	r1, [r7, #11]
 8020342:	233a      	movs	r3, #58	; 0x3a
 8020344:	2202      	movs	r2, #2
 8020346:	68f8      	ldr	r0, [r7, #12]
 8020348:	f000 fa3b 	bl	80207c2 <SCSI_SenseCode>
    return -1;
 802034c:	f04f 33ff 	mov.w	r3, #4294967295
 8020350:	e03f      	b.n	80203d2 <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8020352:	697b      	ldr	r3, [r7, #20]
 8020354:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8020358:	3b01      	subs	r3, #1
 802035a:	0e1b      	lsrs	r3, r3, #24
 802035c:	b2da      	uxtb	r2, r3
 802035e:	697b      	ldr	r3, [r7, #20]
 8020360:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8020362:	697b      	ldr	r3, [r7, #20]
 8020364:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8020368:	3b01      	subs	r3, #1
 802036a:	0c1b      	lsrs	r3, r3, #16
 802036c:	b2da      	uxtb	r2, r3
 802036e:	697b      	ldr	r3, [r7, #20]
 8020370:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8020372:	697b      	ldr	r3, [r7, #20]
 8020374:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8020378:	3b01      	subs	r3, #1
 802037a:	0a1b      	lsrs	r3, r3, #8
 802037c:	b2da      	uxtb	r2, r3
 802037e:	697b      	ldr	r3, [r7, #20]
 8020380:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8020382:	697b      	ldr	r3, [r7, #20]
 8020384:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8020388:	b2db      	uxtb	r3, r3
 802038a:	3b01      	subs	r3, #1
 802038c:	b2da      	uxtb	r2, r3
 802038e:	697b      	ldr	r3, [r7, #20]
 8020390:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8020392:	697b      	ldr	r3, [r7, #20]
 8020394:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020398:	161b      	asrs	r3, r3, #24
 802039a:	b2da      	uxtb	r2, r3
 802039c:	697b      	ldr	r3, [r7, #20]
 802039e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80203a0:	697b      	ldr	r3, [r7, #20]
 80203a2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80203a6:	141b      	asrs	r3, r3, #16
 80203a8:	b2da      	uxtb	r2, r3
 80203aa:	697b      	ldr	r3, [r7, #20]
 80203ac:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80203ae:	697b      	ldr	r3, [r7, #20]
 80203b0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80203b4:	0a1b      	lsrs	r3, r3, #8
 80203b6:	b29b      	uxth	r3, r3
 80203b8:	b2da      	uxtb	r2, r3
 80203ba:	697b      	ldr	r3, [r7, #20]
 80203bc:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 80203be:	697b      	ldr	r3, [r7, #20]
 80203c0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80203c4:	b2da      	uxtb	r2, r3
 80203c6:	697b      	ldr	r3, [r7, #20]
 80203c8:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 80203ca:	697b      	ldr	r3, [r7, #20]
 80203cc:	2208      	movs	r2, #8
 80203ce:	60da      	str	r2, [r3, #12]

  return 0;
 80203d0:	2300      	movs	r3, #0

}
 80203d2:	4618      	mov	r0, r3
 80203d4:	3718      	adds	r7, #24
 80203d6:	46bd      	mov	sp, r7
 80203d8:	bd80      	pop	{r7, pc}

080203da <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80203da:	b580      	push	{r7, lr}
 80203dc:	b088      	sub	sp, #32
 80203de:	af00      	add	r7, sp, #0
 80203e0:	60f8      	str	r0, [r7, #12]
 80203e2:	460b      	mov	r3, r1
 80203e4:	607a      	str	r2, [r7, #4]
 80203e6:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80203e8:	68fb      	ldr	r3, [r7, #12]
 80203ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80203ee:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80203f0:	69bb      	ldr	r3, [r7, #24]
 80203f2:	2b00      	cmp	r3, #0
 80203f4:	d102      	bne.n	80203fc <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 80203f6:	f04f 33ff 	mov.w	r3, #4294967295
 80203fa:	e094      	b.n	8020526 <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80203fc:	68fb      	ldr	r3, [r7, #12]
 80203fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020402:	685b      	ldr	r3, [r3, #4]
 8020404:	69ba      	ldr	r2, [r7, #24]
 8020406:	f502 711a 	add.w	r1, r2, #616	; 0x268
 802040a:	69ba      	ldr	r2, [r7, #24]
 802040c:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8020410:	7af8      	ldrb	r0, [r7, #11]
 8020412:	4798      	blx	r3
 8020414:	4603      	mov	r3, r0
 8020416:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8020418:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802041c:	2b00      	cmp	r3, #0
 802041e:	d104      	bne.n	802042a <SCSI_ReadCapacity16+0x50>
 8020420:	69bb      	ldr	r3, [r7, #24]
 8020422:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8020426:	2b02      	cmp	r3, #2
 8020428:	d108      	bne.n	802043c <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 802042a:	7af9      	ldrb	r1, [r7, #11]
 802042c:	233a      	movs	r3, #58	; 0x3a
 802042e:	2202      	movs	r2, #2
 8020430:	68f8      	ldr	r0, [r7, #12]
 8020432:	f000 f9c6 	bl	80207c2 <SCSI_SenseCode>
    return -1;
 8020436:	f04f 33ff 	mov.w	r3, #4294967295
 802043a:	e074      	b.n	8020526 <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 802043c:	687b      	ldr	r3, [r7, #4]
 802043e:	330a      	adds	r3, #10
 8020440:	781b      	ldrb	r3, [r3, #0]
 8020442:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8020444:	687b      	ldr	r3, [r7, #4]
 8020446:	330b      	adds	r3, #11
 8020448:	781b      	ldrb	r3, [r3, #0]
 802044a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 802044c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 802044e:	687b      	ldr	r3, [r7, #4]
 8020450:	330c      	adds	r3, #12
 8020452:	781b      	ldrb	r3, [r3, #0]
 8020454:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8020456:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8020458:	687a      	ldr	r2, [r7, #4]
 802045a:	320d      	adds	r2, #13
 802045c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 802045e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8020460:	69bb      	ldr	r3, [r7, #24]
 8020462:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8020464:	2300      	movs	r3, #0
 8020466:	77fb      	strb	r3, [r7, #31]
 8020468:	e007      	b.n	802047a <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 802046a:	7ffb      	ldrb	r3, [r7, #31]
 802046c:	69ba      	ldr	r2, [r7, #24]
 802046e:	4413      	add	r3, r2
 8020470:	2200      	movs	r2, #0
 8020472:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8020474:	7ffb      	ldrb	r3, [r7, #31]
 8020476:	3301      	adds	r3, #1
 8020478:	77fb      	strb	r3, [r7, #31]
 802047a:	7ffa      	ldrb	r2, [r7, #31]
 802047c:	69bb      	ldr	r3, [r7, #24]
 802047e:	68db      	ldr	r3, [r3, #12]
 8020480:	429a      	cmp	r2, r3
 8020482:	d3f2      	bcc.n	802046a <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8020484:	69bb      	ldr	r3, [r7, #24]
 8020486:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 802048a:	3b01      	subs	r3, #1
 802048c:	0e1b      	lsrs	r3, r3, #24
 802048e:	b2da      	uxtb	r2, r3
 8020490:	69bb      	ldr	r3, [r7, #24]
 8020492:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8020494:	69bb      	ldr	r3, [r7, #24]
 8020496:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 802049a:	3b01      	subs	r3, #1
 802049c:	0c1b      	lsrs	r3, r3, #16
 802049e:	b2da      	uxtb	r2, r3
 80204a0:	69bb      	ldr	r3, [r7, #24]
 80204a2:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80204a4:	69bb      	ldr	r3, [r7, #24]
 80204a6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80204aa:	3b01      	subs	r3, #1
 80204ac:	0a1b      	lsrs	r3, r3, #8
 80204ae:	b2da      	uxtb	r2, r3
 80204b0:	69bb      	ldr	r3, [r7, #24]
 80204b2:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80204b4:	69bb      	ldr	r3, [r7, #24]
 80204b6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80204ba:	b2db      	uxtb	r3, r3
 80204bc:	3b01      	subs	r3, #1
 80204be:	b2da      	uxtb	r2, r3
 80204c0:	69bb      	ldr	r3, [r7, #24]
 80204c2:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80204c4:	69bb      	ldr	r3, [r7, #24]
 80204c6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80204ca:	161b      	asrs	r3, r3, #24
 80204cc:	b2da      	uxtb	r2, r3
 80204ce:	69bb      	ldr	r3, [r7, #24]
 80204d0:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80204d2:	69bb      	ldr	r3, [r7, #24]
 80204d4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80204d8:	141b      	asrs	r3, r3, #16
 80204da:	b2da      	uxtb	r2, r3
 80204dc:	69bb      	ldr	r3, [r7, #24]
 80204de:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80204e0:	69bb      	ldr	r3, [r7, #24]
 80204e2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80204e6:	0a1b      	lsrs	r3, r3, #8
 80204e8:	b29b      	uxth	r3, r3
 80204ea:	b2da      	uxtb	r2, r3
 80204ec:	69bb      	ldr	r3, [r7, #24]
 80204ee:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 80204f0:	69bb      	ldr	r3, [r7, #24]
 80204f2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80204f6:	b2da      	uxtb	r2, r3
 80204f8:	69bb      	ldr	r3, [r7, #24]
 80204fa:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80204fc:	687b      	ldr	r3, [r7, #4]
 80204fe:	330a      	adds	r3, #10
 8020500:	781b      	ldrb	r3, [r3, #0]
 8020502:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8020504:	687b      	ldr	r3, [r7, #4]
 8020506:	330b      	adds	r3, #11
 8020508:	781b      	ldrb	r3, [r3, #0]
 802050a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 802050c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 802050e:	687b      	ldr	r3, [r7, #4]
 8020510:	330c      	adds	r3, #12
 8020512:	781b      	ldrb	r3, [r3, #0]
 8020514:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8020516:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8020518:	687a      	ldr	r2, [r7, #4]
 802051a:	320d      	adds	r2, #13
 802051c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 802051e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8020520:	69bb      	ldr	r3, [r7, #24]
 8020522:	60da      	str	r2, [r3, #12]

  return 0;
 8020524:	2300      	movs	r3, #0
}
 8020526:	4618      	mov	r0, r3
 8020528:	3720      	adds	r7, #32
 802052a:	46bd      	mov	sp, r7
 802052c:	bd80      	pop	{r7, pc}

0802052e <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 802052e:	b580      	push	{r7, lr}
 8020530:	b088      	sub	sp, #32
 8020532:	af00      	add	r7, sp, #0
 8020534:	60f8      	str	r0, [r7, #12]
 8020536:	460b      	mov	r3, r1
 8020538:	607a      	str	r2, [r7, #4]
 802053a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 802053c:	68fb      	ldr	r3, [r7, #12]
 802053e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020542:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8020544:	69bb      	ldr	r3, [r7, #24]
 8020546:	2b00      	cmp	r3, #0
 8020548:	d102      	bne.n	8020550 <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 802054a:	f04f 33ff 	mov.w	r3, #4294967295
 802054e:	e05c      	b.n	802060a <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 8020550:	68fb      	ldr	r3, [r7, #12]
 8020552:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020556:	685b      	ldr	r3, [r3, #4]
 8020558:	f107 0214 	add.w	r2, r7, #20
 802055c:	f107 0110 	add.w	r1, r7, #16
 8020560:	7af8      	ldrb	r0, [r7, #11]
 8020562:	4798      	blx	r3
 8020564:	4603      	mov	r3, r0
 8020566:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8020568:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802056c:	2b00      	cmp	r3, #0
 802056e:	d104      	bne.n	802057a <SCSI_ReadFormatCapacity+0x4c>
 8020570:	69bb      	ldr	r3, [r7, #24]
 8020572:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8020576:	2b02      	cmp	r3, #2
 8020578:	d108      	bne.n	802058c <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 802057a:	7af9      	ldrb	r1, [r7, #11]
 802057c:	233a      	movs	r3, #58	; 0x3a
 802057e:	2202      	movs	r2, #2
 8020580:	68f8      	ldr	r0, [r7, #12]
 8020582:	f000 f91e 	bl	80207c2 <SCSI_SenseCode>
    return -1;
 8020586:	f04f 33ff 	mov.w	r3, #4294967295
 802058a:	e03e      	b.n	802060a <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 802058c:	2300      	movs	r3, #0
 802058e:	83fb      	strh	r3, [r7, #30]
 8020590:	e007      	b.n	80205a2 <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 8020592:	8bfb      	ldrh	r3, [r7, #30]
 8020594:	69ba      	ldr	r2, [r7, #24]
 8020596:	4413      	add	r3, r2
 8020598:	2200      	movs	r2, #0
 802059a:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 802059c:	8bfb      	ldrh	r3, [r7, #30]
 802059e:	3301      	adds	r3, #1
 80205a0:	83fb      	strh	r3, [r7, #30]
 80205a2:	8bfb      	ldrh	r3, [r7, #30]
 80205a4:	2b0b      	cmp	r3, #11
 80205a6:	d9f4      	bls.n	8020592 <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 80205a8:	69bb      	ldr	r3, [r7, #24]
 80205aa:	2208      	movs	r2, #8
 80205ac:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80205ae:	693b      	ldr	r3, [r7, #16]
 80205b0:	3b01      	subs	r3, #1
 80205b2:	0e1b      	lsrs	r3, r3, #24
 80205b4:	b2da      	uxtb	r2, r3
 80205b6:	69bb      	ldr	r3, [r7, #24]
 80205b8:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80205ba:	693b      	ldr	r3, [r7, #16]
 80205bc:	3b01      	subs	r3, #1
 80205be:	0c1b      	lsrs	r3, r3, #16
 80205c0:	b2da      	uxtb	r2, r3
 80205c2:	69bb      	ldr	r3, [r7, #24]
 80205c4:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80205c6:	693b      	ldr	r3, [r7, #16]
 80205c8:	3b01      	subs	r3, #1
 80205ca:	0a1b      	lsrs	r3, r3, #8
 80205cc:	b2da      	uxtb	r2, r3
 80205ce:	69bb      	ldr	r3, [r7, #24]
 80205d0:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80205d2:	693b      	ldr	r3, [r7, #16]
 80205d4:	b2db      	uxtb	r3, r3
 80205d6:	3b01      	subs	r3, #1
 80205d8:	b2da      	uxtb	r2, r3
 80205da:	69bb      	ldr	r3, [r7, #24]
 80205dc:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 80205de:	69bb      	ldr	r3, [r7, #24]
 80205e0:	2202      	movs	r2, #2
 80205e2:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80205e4:	8abb      	ldrh	r3, [r7, #20]
 80205e6:	141b      	asrs	r3, r3, #16
 80205e8:	b2da      	uxtb	r2, r3
 80205ea:	69bb      	ldr	r3, [r7, #24]
 80205ec:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80205ee:	8abb      	ldrh	r3, [r7, #20]
 80205f0:	0a1b      	lsrs	r3, r3, #8
 80205f2:	b29b      	uxth	r3, r3
 80205f4:	b2da      	uxtb	r2, r3
 80205f6:	69bb      	ldr	r3, [r7, #24]
 80205f8:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 80205fa:	8abb      	ldrh	r3, [r7, #20]
 80205fc:	b2da      	uxtb	r2, r3
 80205fe:	69bb      	ldr	r3, [r7, #24]
 8020600:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8020602:	69bb      	ldr	r3, [r7, #24]
 8020604:	220c      	movs	r2, #12
 8020606:	60da      	str	r2, [r3, #12]

  return 0;
 8020608:	2300      	movs	r3, #0
}
 802060a:	4618      	mov	r0, r3
 802060c:	3720      	adds	r7, #32
 802060e:	46bd      	mov	sp, r7
 8020610:	bd80      	pop	{r7, pc}
	...

08020614 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020614:	b580      	push	{r7, lr}
 8020616:	b086      	sub	sp, #24
 8020618:	af00      	add	r7, sp, #0
 802061a:	60f8      	str	r0, [r7, #12]
 802061c:	460b      	mov	r3, r1
 802061e:	607a      	str	r2, [r7, #4]
 8020620:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020622:	68fb      	ldr	r3, [r7, #12]
 8020624:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020628:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 802062a:	2317      	movs	r3, #23
 802062c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 802062e:	693b      	ldr	r3, [r7, #16]
 8020630:	2b00      	cmp	r3, #0
 8020632:	d102      	bne.n	802063a <SCSI_ModeSense6+0x26>
  {
    return -1;
 8020634:	f04f 33ff 	mov.w	r3, #4294967295
 8020638:	e011      	b.n	802065e <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 802063a:	687b      	ldr	r3, [r7, #4]
 802063c:	3304      	adds	r3, #4
 802063e:	781b      	ldrb	r3, [r3, #0]
 8020640:	b29b      	uxth	r3, r3
 8020642:	8afa      	ldrh	r2, [r7, #22]
 8020644:	429a      	cmp	r2, r3
 8020646:	d303      	bcc.n	8020650 <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 8020648:	687b      	ldr	r3, [r7, #4]
 802064a:	3304      	adds	r3, #4
 802064c:	781b      	ldrb	r3, [r3, #0]
 802064e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8020650:	8afb      	ldrh	r3, [r7, #22]
 8020652:	461a      	mov	r2, r3
 8020654:	4904      	ldr	r1, [pc, #16]	; (8020668 <SCSI_ModeSense6+0x54>)
 8020656:	6938      	ldr	r0, [r7, #16]
 8020658:	f000 fdbc 	bl	80211d4 <SCSI_UpdateBotData>

  return 0;
 802065c:	2300      	movs	r3, #0
}
 802065e:	4618      	mov	r0, r3
 8020660:	3718      	adds	r7, #24
 8020662:	46bd      	mov	sp, r7
 8020664:	bd80      	pop	{r7, pc}
 8020666:	bf00      	nop
 8020668:	20000648 	.word	0x20000648

0802066c <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 802066c:	b580      	push	{r7, lr}
 802066e:	b086      	sub	sp, #24
 8020670:	af00      	add	r7, sp, #0
 8020672:	60f8      	str	r0, [r7, #12]
 8020674:	460b      	mov	r3, r1
 8020676:	607a      	str	r2, [r7, #4]
 8020678:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 802067a:	68fb      	ldr	r3, [r7, #12]
 802067c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020680:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8020682:	231b      	movs	r3, #27
 8020684:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8020686:	693b      	ldr	r3, [r7, #16]
 8020688:	2b00      	cmp	r3, #0
 802068a:	d102      	bne.n	8020692 <SCSI_ModeSense10+0x26>
  {
    return -1;
 802068c:	f04f 33ff 	mov.w	r3, #4294967295
 8020690:	e011      	b.n	80206b6 <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 8020692:	687b      	ldr	r3, [r7, #4]
 8020694:	3308      	adds	r3, #8
 8020696:	781b      	ldrb	r3, [r3, #0]
 8020698:	b29b      	uxth	r3, r3
 802069a:	8afa      	ldrh	r2, [r7, #22]
 802069c:	429a      	cmp	r2, r3
 802069e:	d303      	bcc.n	80206a8 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 80206a0:	687b      	ldr	r3, [r7, #4]
 80206a2:	3308      	adds	r3, #8
 80206a4:	781b      	ldrb	r3, [r3, #0]
 80206a6:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80206a8:	8afb      	ldrh	r3, [r7, #22]
 80206aa:	461a      	mov	r2, r3
 80206ac:	4904      	ldr	r1, [pc, #16]	; (80206c0 <SCSI_ModeSense10+0x54>)
 80206ae:	6938      	ldr	r0, [r7, #16]
 80206b0:	f000 fd90 	bl	80211d4 <SCSI_UpdateBotData>

  return 0;
 80206b4:	2300      	movs	r3, #0
}
 80206b6:	4618      	mov	r0, r3
 80206b8:	3718      	adds	r7, #24
 80206ba:	46bd      	mov	sp, r7
 80206bc:	bd80      	pop	{r7, pc}
 80206be:	bf00      	nop
 80206c0:	20000660 	.word	0x20000660

080206c4 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80206c4:	b580      	push	{r7, lr}
 80206c6:	b086      	sub	sp, #24
 80206c8:	af00      	add	r7, sp, #0
 80206ca:	60f8      	str	r0, [r7, #12]
 80206cc:	460b      	mov	r3, r1
 80206ce:	607a      	str	r2, [r7, #4]
 80206d0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80206d2:	68fb      	ldr	r3, [r7, #12]
 80206d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80206d8:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80206da:	693b      	ldr	r3, [r7, #16]
 80206dc:	2b00      	cmp	r3, #0
 80206de:	d102      	bne.n	80206e6 <SCSI_RequestSense+0x22>
  {
    return -1;
 80206e0:	f04f 33ff 	mov.w	r3, #4294967295
 80206e4:	e069      	b.n	80207ba <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80206e6:	693b      	ldr	r3, [r7, #16]
 80206e8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80206ec:	2b00      	cmp	r3, #0
 80206ee:	d10a      	bne.n	8020706 <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80206f0:	693b      	ldr	r3, [r7, #16]
 80206f2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80206f6:	2320      	movs	r3, #32
 80206f8:	2205      	movs	r2, #5
 80206fa:	68f8      	ldr	r0, [r7, #12]
 80206fc:	f000 f861 	bl	80207c2 <SCSI_SenseCode>
    return -1;
 8020700:	f04f 33ff 	mov.w	r3, #4294967295
 8020704:	e059      	b.n	80207ba <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8020706:	2300      	movs	r3, #0
 8020708:	75fb      	strb	r3, [r7, #23]
 802070a:	e007      	b.n	802071c <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 802070c:	7dfb      	ldrb	r3, [r7, #23]
 802070e:	693a      	ldr	r2, [r7, #16]
 8020710:	4413      	add	r3, r2
 8020712:	2200      	movs	r2, #0
 8020714:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8020716:	7dfb      	ldrb	r3, [r7, #23]
 8020718:	3301      	adds	r3, #1
 802071a:	75fb      	strb	r3, [r7, #23]
 802071c:	7dfb      	ldrb	r3, [r7, #23]
 802071e:	2b11      	cmp	r3, #17
 8020720:	d9f4      	bls.n	802070c <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 8020722:	693b      	ldr	r3, [r7, #16]
 8020724:	2270      	movs	r2, #112	; 0x70
 8020726:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8020728:	693b      	ldr	r3, [r7, #16]
 802072a:	220c      	movs	r2, #12
 802072c:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 802072e:	693b      	ldr	r3, [r7, #16]
 8020730:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8020734:	693b      	ldr	r3, [r7, #16]
 8020736:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 802073a:	429a      	cmp	r2, r3
 802073c:	d02e      	beq.n	802079c <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 802073e:	693b      	ldr	r3, [r7, #16]
 8020740:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8020744:	461a      	mov	r2, r3
 8020746:	693b      	ldr	r3, [r7, #16]
 8020748:	3248      	adds	r2, #72	; 0x48
 802074a:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 802074e:	693b      	ldr	r3, [r7, #16]
 8020750:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8020752:	693b      	ldr	r3, [r7, #16]
 8020754:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8020758:	693a      	ldr	r2, [r7, #16]
 802075a:	3348      	adds	r3, #72	; 0x48
 802075c:	00db      	lsls	r3, r3, #3
 802075e:	4413      	add	r3, r2
 8020760:	791a      	ldrb	r2, [r3, #4]
 8020762:	693b      	ldr	r3, [r7, #16]
 8020764:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8020766:	693b      	ldr	r3, [r7, #16]
 8020768:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 802076c:	693a      	ldr	r2, [r7, #16]
 802076e:	3348      	adds	r3, #72	; 0x48
 8020770:	00db      	lsls	r3, r3, #3
 8020772:	4413      	add	r3, r2
 8020774:	795a      	ldrb	r2, [r3, #5]
 8020776:	693b      	ldr	r3, [r7, #16]
 8020778:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 802077a:	693b      	ldr	r3, [r7, #16]
 802077c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8020780:	3301      	adds	r3, #1
 8020782:	b2da      	uxtb	r2, r3
 8020784:	693b      	ldr	r3, [r7, #16]
 8020786:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 802078a:	693b      	ldr	r3, [r7, #16]
 802078c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8020790:	2b04      	cmp	r3, #4
 8020792:	d103      	bne.n	802079c <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 8020794:	693b      	ldr	r3, [r7, #16]
 8020796:	2200      	movs	r2, #0
 8020798:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 802079c:	693b      	ldr	r3, [r7, #16]
 802079e:	2212      	movs	r2, #18
 80207a0:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80207a2:	687b      	ldr	r3, [r7, #4]
 80207a4:	3304      	adds	r3, #4
 80207a6:	781b      	ldrb	r3, [r3, #0]
 80207a8:	2b12      	cmp	r3, #18
 80207aa:	d805      	bhi.n	80207b8 <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 80207ac:	687b      	ldr	r3, [r7, #4]
 80207ae:	3304      	adds	r3, #4
 80207b0:	781b      	ldrb	r3, [r3, #0]
 80207b2:	461a      	mov	r2, r3
 80207b4:	693b      	ldr	r3, [r7, #16]
 80207b6:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80207b8:	2300      	movs	r3, #0
}
 80207ba:	4618      	mov	r0, r3
 80207bc:	3718      	adds	r7, #24
 80207be:	46bd      	mov	sp, r7
 80207c0:	bd80      	pop	{r7, pc}

080207c2 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80207c2:	b480      	push	{r7}
 80207c4:	b085      	sub	sp, #20
 80207c6:	af00      	add	r7, sp, #0
 80207c8:	6078      	str	r0, [r7, #4]
 80207ca:	4608      	mov	r0, r1
 80207cc:	4611      	mov	r1, r2
 80207ce:	461a      	mov	r2, r3
 80207d0:	4603      	mov	r3, r0
 80207d2:	70fb      	strb	r3, [r7, #3]
 80207d4:	460b      	mov	r3, r1
 80207d6:	70bb      	strb	r3, [r7, #2]
 80207d8:	4613      	mov	r3, r2
 80207da:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80207dc:	687b      	ldr	r3, [r7, #4]
 80207de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80207e2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80207e4:	68fb      	ldr	r3, [r7, #12]
 80207e6:	2b00      	cmp	r3, #0
 80207e8:	d02c      	beq.n	8020844 <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 80207ea:	68fb      	ldr	r3, [r7, #12]
 80207ec:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80207f0:	461a      	mov	r2, r3
 80207f2:	68fb      	ldr	r3, [r7, #12]
 80207f4:	3248      	adds	r2, #72	; 0x48
 80207f6:	78b9      	ldrb	r1, [r7, #2]
 80207f8:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 80207fc:	68fb      	ldr	r3, [r7, #12]
 80207fe:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8020802:	68fa      	ldr	r2, [r7, #12]
 8020804:	3348      	adds	r3, #72	; 0x48
 8020806:	00db      	lsls	r3, r3, #3
 8020808:	4413      	add	r3, r2
 802080a:	787a      	ldrb	r2, [r7, #1]
 802080c:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 802080e:	68fb      	ldr	r3, [r7, #12]
 8020810:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8020814:	68fa      	ldr	r2, [r7, #12]
 8020816:	3348      	adds	r3, #72	; 0x48
 8020818:	00db      	lsls	r3, r3, #3
 802081a:	4413      	add	r3, r2
 802081c:	2200      	movs	r2, #0
 802081e:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8020820:	68fb      	ldr	r3, [r7, #12]
 8020822:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8020826:	3301      	adds	r3, #1
 8020828:	b2da      	uxtb	r2, r3
 802082a:	68fb      	ldr	r3, [r7, #12]
 802082c:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8020830:	68fb      	ldr	r3, [r7, #12]
 8020832:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8020836:	2b04      	cmp	r3, #4
 8020838:	d105      	bne.n	8020846 <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 802083a:	68fb      	ldr	r3, [r7, #12]
 802083c:	2200      	movs	r2, #0
 802083e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 8020842:	e000      	b.n	8020846 <SCSI_SenseCode+0x84>
    return;
 8020844:	bf00      	nop
  }
}
 8020846:	3714      	adds	r7, #20
 8020848:	46bd      	mov	sp, r7
 802084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802084e:	4770      	bx	lr

08020850 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020850:	b580      	push	{r7, lr}
 8020852:	b086      	sub	sp, #24
 8020854:	af00      	add	r7, sp, #0
 8020856:	60f8      	str	r0, [r7, #12]
 8020858:	460b      	mov	r3, r1
 802085a:	607a      	str	r2, [r7, #4]
 802085c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 802085e:	68fb      	ldr	r3, [r7, #12]
 8020860:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020864:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020866:	697b      	ldr	r3, [r7, #20]
 8020868:	2b00      	cmp	r3, #0
 802086a:	d102      	bne.n	8020872 <SCSI_StartStopUnit+0x22>
  {
    return -1;
 802086c:	f04f 33ff 	mov.w	r3, #4294967295
 8020870:	e03b      	b.n	80208ea <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8020872:	697b      	ldr	r3, [r7, #20]
 8020874:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8020878:	2b01      	cmp	r3, #1
 802087a:	d10f      	bne.n	802089c <SCSI_StartStopUnit+0x4c>
 802087c:	687b      	ldr	r3, [r7, #4]
 802087e:	3304      	adds	r3, #4
 8020880:	781b      	ldrb	r3, [r3, #0]
 8020882:	f003 0303 	and.w	r3, r3, #3
 8020886:	2b02      	cmp	r3, #2
 8020888:	d108      	bne.n	802089c <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 802088a:	7af9      	ldrb	r1, [r7, #11]
 802088c:	2324      	movs	r3, #36	; 0x24
 802088e:	2205      	movs	r2, #5
 8020890:	68f8      	ldr	r0, [r7, #12]
 8020892:	f7ff ff96 	bl	80207c2 <SCSI_SenseCode>

    return -1;
 8020896:	f04f 33ff 	mov.w	r3, #4294967295
 802089a:	e026      	b.n	80208ea <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 802089c:	687b      	ldr	r3, [r7, #4]
 802089e:	3304      	adds	r3, #4
 80208a0:	781b      	ldrb	r3, [r3, #0]
 80208a2:	f003 0303 	and.w	r3, r3, #3
 80208a6:	2b01      	cmp	r3, #1
 80208a8:	d104      	bne.n	80208b4 <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80208aa:	697b      	ldr	r3, [r7, #20]
 80208ac:	2200      	movs	r2, #0
 80208ae:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80208b2:	e016      	b.n	80208e2 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80208b4:	687b      	ldr	r3, [r7, #4]
 80208b6:	3304      	adds	r3, #4
 80208b8:	781b      	ldrb	r3, [r3, #0]
 80208ba:	f003 0303 	and.w	r3, r3, #3
 80208be:	2b02      	cmp	r3, #2
 80208c0:	d104      	bne.n	80208cc <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80208c2:	697b      	ldr	r3, [r7, #20]
 80208c4:	2202      	movs	r2, #2
 80208c6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80208ca:	e00a      	b.n	80208e2 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 80208cc:	687b      	ldr	r3, [r7, #4]
 80208ce:	3304      	adds	r3, #4
 80208d0:	781b      	ldrb	r3, [r3, #0]
 80208d2:	f003 0303 	and.w	r3, r3, #3
 80208d6:	2b03      	cmp	r3, #3
 80208d8:	d103      	bne.n	80208e2 <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80208da:	697b      	ldr	r3, [r7, #20]
 80208dc:	2200      	movs	r2, #0
 80208de:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 80208e2:	697b      	ldr	r3, [r7, #20]
 80208e4:	2200      	movs	r2, #0
 80208e6:	60da      	str	r2, [r3, #12]

  return 0;
 80208e8:	2300      	movs	r3, #0
}
 80208ea:	4618      	mov	r0, r3
 80208ec:	3718      	adds	r7, #24
 80208ee:	46bd      	mov	sp, r7
 80208f0:	bd80      	pop	{r7, pc}

080208f2 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80208f2:	b480      	push	{r7}
 80208f4:	b087      	sub	sp, #28
 80208f6:	af00      	add	r7, sp, #0
 80208f8:	60f8      	str	r0, [r7, #12]
 80208fa:	460b      	mov	r3, r1
 80208fc:	607a      	str	r2, [r7, #4]
 80208fe:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020900:	68fb      	ldr	r3, [r7, #12]
 8020902:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020906:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020908:	697b      	ldr	r3, [r7, #20]
 802090a:	2b00      	cmp	r3, #0
 802090c:	d102      	bne.n	8020914 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 802090e:	f04f 33ff 	mov.w	r3, #4294967295
 8020912:	e011      	b.n	8020938 <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 8020914:	687b      	ldr	r3, [r7, #4]
 8020916:	3304      	adds	r3, #4
 8020918:	781b      	ldrb	r3, [r3, #0]
 802091a:	2b00      	cmp	r3, #0
 802091c:	d104      	bne.n	8020928 <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 802091e:	697b      	ldr	r3, [r7, #20]
 8020920:	2200      	movs	r2, #0
 8020922:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8020926:	e003      	b.n	8020930 <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8020928:	697b      	ldr	r3, [r7, #20]
 802092a:	2201      	movs	r2, #1
 802092c:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 8020930:	697b      	ldr	r3, [r7, #20]
 8020932:	2200      	movs	r2, #0
 8020934:	60da      	str	r2, [r3, #12]

  return 0;
 8020936:	2300      	movs	r3, #0
}
 8020938:	4618      	mov	r0, r3
 802093a:	371c      	adds	r7, #28
 802093c:	46bd      	mov	sp, r7
 802093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020942:	4770      	bx	lr

08020944 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020944:	b580      	push	{r7, lr}
 8020946:	b086      	sub	sp, #24
 8020948:	af00      	add	r7, sp, #0
 802094a:	60f8      	str	r0, [r7, #12]
 802094c:	460b      	mov	r3, r1
 802094e:	607a      	str	r2, [r7, #4]
 8020950:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020952:	68fb      	ldr	r3, [r7, #12]
 8020954:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020958:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 802095a:	697b      	ldr	r3, [r7, #20]
 802095c:	2b00      	cmp	r3, #0
 802095e:	d102      	bne.n	8020966 <SCSI_Read10+0x22>
  {
    return -1;
 8020960:	f04f 33ff 	mov.w	r3, #4294967295
 8020964:	e08a      	b.n	8020a7c <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8020966:	697b      	ldr	r3, [r7, #20]
 8020968:	7a1b      	ldrb	r3, [r3, #8]
 802096a:	2b00      	cmp	r3, #0
 802096c:	d17c      	bne.n	8020a68 <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 802096e:	697b      	ldr	r3, [r7, #20]
 8020970:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8020974:	b25b      	sxtb	r3, r3
 8020976:	2b00      	cmp	r3, #0
 8020978:	db0a      	blt.n	8020990 <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 802097a:	697b      	ldr	r3, [r7, #20]
 802097c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020980:	2320      	movs	r3, #32
 8020982:	2205      	movs	r2, #5
 8020984:	68f8      	ldr	r0, [r7, #12]
 8020986:	f7ff ff1c 	bl	80207c2 <SCSI_SenseCode>
      return -1;
 802098a:	f04f 33ff 	mov.w	r3, #4294967295
 802098e:	e075      	b.n	8020a7c <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8020990:	697b      	ldr	r3, [r7, #20]
 8020992:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8020996:	2b02      	cmp	r3, #2
 8020998:	d108      	bne.n	80209ac <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 802099a:	7af9      	ldrb	r1, [r7, #11]
 802099c:	233a      	movs	r3, #58	; 0x3a
 802099e:	2202      	movs	r2, #2
 80209a0:	68f8      	ldr	r0, [r7, #12]
 80209a2:	f7ff ff0e 	bl	80207c2 <SCSI_SenseCode>

      return -1;
 80209a6:	f04f 33ff 	mov.w	r3, #4294967295
 80209aa:	e067      	b.n	8020a7c <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80209ac:	68fb      	ldr	r3, [r7, #12]
 80209ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80209b2:	689b      	ldr	r3, [r3, #8]
 80209b4:	7afa      	ldrb	r2, [r7, #11]
 80209b6:	4610      	mov	r0, r2
 80209b8:	4798      	blx	r3
 80209ba:	4603      	mov	r3, r0
 80209bc:	2b00      	cmp	r3, #0
 80209be:	d008      	beq.n	80209d2 <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80209c0:	7af9      	ldrb	r1, [r7, #11]
 80209c2:	233a      	movs	r3, #58	; 0x3a
 80209c4:	2202      	movs	r2, #2
 80209c6:	68f8      	ldr	r0, [r7, #12]
 80209c8:	f7ff fefb 	bl	80207c2 <SCSI_SenseCode>
      return -1;
 80209cc:	f04f 33ff 	mov.w	r3, #4294967295
 80209d0:	e054      	b.n	8020a7c <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80209d2:	687b      	ldr	r3, [r7, #4]
 80209d4:	3302      	adds	r3, #2
 80209d6:	781b      	ldrb	r3, [r3, #0]
 80209d8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80209da:	687b      	ldr	r3, [r7, #4]
 80209dc:	3303      	adds	r3, #3
 80209de:	781b      	ldrb	r3, [r3, #0]
 80209e0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80209e2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80209e4:	687b      	ldr	r3, [r7, #4]
 80209e6:	3304      	adds	r3, #4
 80209e8:	781b      	ldrb	r3, [r3, #0]
 80209ea:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80209ec:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80209ee:	687a      	ldr	r2, [r7, #4]
 80209f0:	3205      	adds	r2, #5
 80209f2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80209f4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80209f6:	697b      	ldr	r3, [r7, #20]
 80209f8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 80209fc:	687b      	ldr	r3, [r7, #4]
 80209fe:	3307      	adds	r3, #7
 8020a00:	781b      	ldrb	r3, [r3, #0]
 8020a02:	021b      	lsls	r3, r3, #8
 8020a04:	687a      	ldr	r2, [r7, #4]
 8020a06:	3208      	adds	r2, #8
 8020a08:	7812      	ldrb	r2, [r2, #0]
 8020a0a:	431a      	orrs	r2, r3
 8020a0c:	697b      	ldr	r3, [r7, #20]
 8020a0e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8020a12:	697b      	ldr	r3, [r7, #20]
 8020a14:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020a18:	697b      	ldr	r3, [r7, #20]
 8020a1a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020a1e:	7af9      	ldrb	r1, [r7, #11]
 8020a20:	68f8      	ldr	r0, [r7, #12]
 8020a22:	f000 faad 	bl	8020f80 <SCSI_CheckAddressRange>
 8020a26:	4603      	mov	r3, r0
 8020a28:	2b00      	cmp	r3, #0
 8020a2a:	da02      	bge.n	8020a32 <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8020a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8020a30:	e024      	b.n	8020a7c <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8020a32:	697b      	ldr	r3, [r7, #20]
 8020a34:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8020a38:	697b      	ldr	r3, [r7, #20]
 8020a3a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020a3e:	6979      	ldr	r1, [r7, #20]
 8020a40:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8020a44:	fb01 f303 	mul.w	r3, r1, r3
 8020a48:	429a      	cmp	r2, r3
 8020a4a:	d00a      	beq.n	8020a62 <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020a4c:	697b      	ldr	r3, [r7, #20]
 8020a4e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020a52:	2320      	movs	r3, #32
 8020a54:	2205      	movs	r2, #5
 8020a56:	68f8      	ldr	r0, [r7, #12]
 8020a58:	f7ff feb3 	bl	80207c2 <SCSI_SenseCode>
      return -1;
 8020a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8020a60:	e00c      	b.n	8020a7c <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8020a62:	697b      	ldr	r3, [r7, #20]
 8020a64:	2202      	movs	r2, #2
 8020a66:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8020a68:	697b      	ldr	r3, [r7, #20]
 8020a6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020a6e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8020a70:	7afb      	ldrb	r3, [r7, #11]
 8020a72:	4619      	mov	r1, r3
 8020a74:	68f8      	ldr	r0, [r7, #12]
 8020a76:	f000 faab 	bl	8020fd0 <SCSI_ProcessRead>
 8020a7a:	4603      	mov	r3, r0
}
 8020a7c:	4618      	mov	r0, r3
 8020a7e:	3718      	adds	r7, #24
 8020a80:	46bd      	mov	sp, r7
 8020a82:	bd80      	pop	{r7, pc}

08020a84 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020a84:	b580      	push	{r7, lr}
 8020a86:	b086      	sub	sp, #24
 8020a88:	af00      	add	r7, sp, #0
 8020a8a:	60f8      	str	r0, [r7, #12]
 8020a8c:	460b      	mov	r3, r1
 8020a8e:	607a      	str	r2, [r7, #4]
 8020a90:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020a92:	68fb      	ldr	r3, [r7, #12]
 8020a94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020a98:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020a9a:	697b      	ldr	r3, [r7, #20]
 8020a9c:	2b00      	cmp	r3, #0
 8020a9e:	d102      	bne.n	8020aa6 <SCSI_Read12+0x22>
  {
    return -1;
 8020aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8020aa4:	e095      	b.n	8020bd2 <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8020aa6:	697b      	ldr	r3, [r7, #20]
 8020aa8:	7a1b      	ldrb	r3, [r3, #8]
 8020aaa:	2b00      	cmp	r3, #0
 8020aac:	f040 8087 	bne.w	8020bbe <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8020ab0:	697b      	ldr	r3, [r7, #20]
 8020ab2:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8020ab6:	b25b      	sxtb	r3, r3
 8020ab8:	2b00      	cmp	r3, #0
 8020aba:	db0a      	blt.n	8020ad2 <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020abc:	697b      	ldr	r3, [r7, #20]
 8020abe:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020ac2:	2320      	movs	r3, #32
 8020ac4:	2205      	movs	r2, #5
 8020ac6:	68f8      	ldr	r0, [r7, #12]
 8020ac8:	f7ff fe7b 	bl	80207c2 <SCSI_SenseCode>
      return -1;
 8020acc:	f04f 33ff 	mov.w	r3, #4294967295
 8020ad0:	e07f      	b.n	8020bd2 <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8020ad2:	697b      	ldr	r3, [r7, #20]
 8020ad4:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8020ad8:	2b02      	cmp	r3, #2
 8020ada:	d108      	bne.n	8020aee <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020adc:	7af9      	ldrb	r1, [r7, #11]
 8020ade:	233a      	movs	r3, #58	; 0x3a
 8020ae0:	2202      	movs	r2, #2
 8020ae2:	68f8      	ldr	r0, [r7, #12]
 8020ae4:	f7ff fe6d 	bl	80207c2 <SCSI_SenseCode>
      return -1;
 8020ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8020aec:	e071      	b.n	8020bd2 <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8020aee:	68fb      	ldr	r3, [r7, #12]
 8020af0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020af4:	689b      	ldr	r3, [r3, #8]
 8020af6:	7afa      	ldrb	r2, [r7, #11]
 8020af8:	4610      	mov	r0, r2
 8020afa:	4798      	blx	r3
 8020afc:	4603      	mov	r3, r0
 8020afe:	2b00      	cmp	r3, #0
 8020b00:	d008      	beq.n	8020b14 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020b02:	7af9      	ldrb	r1, [r7, #11]
 8020b04:	233a      	movs	r3, #58	; 0x3a
 8020b06:	2202      	movs	r2, #2
 8020b08:	68f8      	ldr	r0, [r7, #12]
 8020b0a:	f7ff fe5a 	bl	80207c2 <SCSI_SenseCode>
      return -1;
 8020b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8020b12:	e05e      	b.n	8020bd2 <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020b14:	687b      	ldr	r3, [r7, #4]
 8020b16:	3302      	adds	r3, #2
 8020b18:	781b      	ldrb	r3, [r3, #0]
 8020b1a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8020b1c:	687b      	ldr	r3, [r7, #4]
 8020b1e:	3303      	adds	r3, #3
 8020b20:	781b      	ldrb	r3, [r3, #0]
 8020b22:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020b24:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8020b26:	687b      	ldr	r3, [r7, #4]
 8020b28:	3304      	adds	r3, #4
 8020b2a:	781b      	ldrb	r3, [r3, #0]
 8020b2c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8020b2e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8020b30:	687a      	ldr	r2, [r7, #4]
 8020b32:	3205      	adds	r2, #5
 8020b34:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8020b36:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020b38:	697b      	ldr	r3, [r7, #20]
 8020b3a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020b3e:	687b      	ldr	r3, [r7, #4]
 8020b40:	3306      	adds	r3, #6
 8020b42:	781b      	ldrb	r3, [r3, #0]
 8020b44:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8020b46:	687b      	ldr	r3, [r7, #4]
 8020b48:	3307      	adds	r3, #7
 8020b4a:	781b      	ldrb	r3, [r3, #0]
 8020b4c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020b4e:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8020b50:	687b      	ldr	r3, [r7, #4]
 8020b52:	3308      	adds	r3, #8
 8020b54:	781b      	ldrb	r3, [r3, #0]
 8020b56:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8020b58:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8020b5a:	687a      	ldr	r2, [r7, #4]
 8020b5c:	3209      	adds	r2, #9
 8020b5e:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8020b60:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020b62:	697b      	ldr	r3, [r7, #20]
 8020b64:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8020b68:	697b      	ldr	r3, [r7, #20]
 8020b6a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020b6e:	697b      	ldr	r3, [r7, #20]
 8020b70:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020b74:	7af9      	ldrb	r1, [r7, #11]
 8020b76:	68f8      	ldr	r0, [r7, #12]
 8020b78:	f000 fa02 	bl	8020f80 <SCSI_CheckAddressRange>
 8020b7c:	4603      	mov	r3, r0
 8020b7e:	2b00      	cmp	r3, #0
 8020b80:	da02      	bge.n	8020b88 <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8020b82:	f04f 33ff 	mov.w	r3, #4294967295
 8020b86:	e024      	b.n	8020bd2 <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8020b88:	697b      	ldr	r3, [r7, #20]
 8020b8a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8020b8e:	697b      	ldr	r3, [r7, #20]
 8020b90:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020b94:	6979      	ldr	r1, [r7, #20]
 8020b96:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8020b9a:	fb01 f303 	mul.w	r3, r1, r3
 8020b9e:	429a      	cmp	r2, r3
 8020ba0:	d00a      	beq.n	8020bb8 <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020ba2:	697b      	ldr	r3, [r7, #20]
 8020ba4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020ba8:	2320      	movs	r3, #32
 8020baa:	2205      	movs	r2, #5
 8020bac:	68f8      	ldr	r0, [r7, #12]
 8020bae:	f7ff fe08 	bl	80207c2 <SCSI_SenseCode>
      return -1;
 8020bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8020bb6:	e00c      	b.n	8020bd2 <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8020bb8:	697b      	ldr	r3, [r7, #20]
 8020bba:	2202      	movs	r2, #2
 8020bbc:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8020bbe:	697b      	ldr	r3, [r7, #20]
 8020bc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020bc4:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8020bc6:	7afb      	ldrb	r3, [r7, #11]
 8020bc8:	4619      	mov	r1, r3
 8020bca:	68f8      	ldr	r0, [r7, #12]
 8020bcc:	f000 fa00 	bl	8020fd0 <SCSI_ProcessRead>
 8020bd0:	4603      	mov	r3, r0
}
 8020bd2:	4618      	mov	r0, r3
 8020bd4:	3718      	adds	r7, #24
 8020bd6:	46bd      	mov	sp, r7
 8020bd8:	bd80      	pop	{r7, pc}

08020bda <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020bda:	b580      	push	{r7, lr}
 8020bdc:	b086      	sub	sp, #24
 8020bde:	af00      	add	r7, sp, #0
 8020be0:	60f8      	str	r0, [r7, #12]
 8020be2:	460b      	mov	r3, r1
 8020be4:	607a      	str	r2, [r7, #4]
 8020be6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020be8:	68fb      	ldr	r3, [r7, #12]
 8020bea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020bee:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8020bf0:	697b      	ldr	r3, [r7, #20]
 8020bf2:	2b00      	cmp	r3, #0
 8020bf4:	d102      	bne.n	8020bfc <SCSI_Write10+0x22>
  {
    return -1;
 8020bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8020bfa:	e0af      	b.n	8020d5c <SCSI_Write10+0x182>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8020bfc:	697b      	ldr	r3, [r7, #20]
 8020bfe:	7a1b      	ldrb	r3, [r3, #8]
 8020c00:	2b00      	cmp	r3, #0
 8020c02:	f040 80a5 	bne.w	8020d50 <SCSI_Write10+0x176>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8020c06:	697b      	ldr	r3, [r7, #20]
 8020c08:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8020c0c:	2b00      	cmp	r3, #0
 8020c0e:	d10a      	bne.n	8020c26 <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020c10:	697b      	ldr	r3, [r7, #20]
 8020c12:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020c16:	2320      	movs	r3, #32
 8020c18:	2205      	movs	r2, #5
 8020c1a:	68f8      	ldr	r0, [r7, #12]
 8020c1c:	f7ff fdd1 	bl	80207c2 <SCSI_SenseCode>
      return -1;
 8020c20:	f04f 33ff 	mov.w	r3, #4294967295
 8020c24:	e09a      	b.n	8020d5c <SCSI_Write10+0x182>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8020c26:	697b      	ldr	r3, [r7, #20]
 8020c28:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8020c2c:	b25b      	sxtb	r3, r3
 8020c2e:	2b00      	cmp	r3, #0
 8020c30:	da0a      	bge.n	8020c48 <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020c32:	697b      	ldr	r3, [r7, #20]
 8020c34:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020c38:	2320      	movs	r3, #32
 8020c3a:	2205      	movs	r2, #5
 8020c3c:	68f8      	ldr	r0, [r7, #12]
 8020c3e:	f7ff fdc0 	bl	80207c2 <SCSI_SenseCode>
      return -1;
 8020c42:	f04f 33ff 	mov.w	r3, #4294967295
 8020c46:	e089      	b.n	8020d5c <SCSI_Write10+0x182>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8020c48:	68fb      	ldr	r3, [r7, #12]
 8020c4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020c4e:	689b      	ldr	r3, [r3, #8]
 8020c50:	7afa      	ldrb	r2, [r7, #11]
 8020c52:	4610      	mov	r0, r2
 8020c54:	4798      	blx	r3
 8020c56:	4603      	mov	r3, r0
 8020c58:	2b00      	cmp	r3, #0
 8020c5a:	d008      	beq.n	8020c6e <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020c5c:	7af9      	ldrb	r1, [r7, #11]
 8020c5e:	233a      	movs	r3, #58	; 0x3a
 8020c60:	2202      	movs	r2, #2
 8020c62:	68f8      	ldr	r0, [r7, #12]
 8020c64:	f7ff fdad 	bl	80207c2 <SCSI_SenseCode>
      return -1;
 8020c68:	f04f 33ff 	mov.w	r3, #4294967295
 8020c6c:	e076      	b.n	8020d5c <SCSI_Write10+0x182>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8020c6e:	68fb      	ldr	r3, [r7, #12]
 8020c70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020c74:	68db      	ldr	r3, [r3, #12]
 8020c76:	7afa      	ldrb	r2, [r7, #11]
 8020c78:	4610      	mov	r0, r2
 8020c7a:	4798      	blx	r3
 8020c7c:	4603      	mov	r3, r0
 8020c7e:	2b00      	cmp	r3, #0
 8020c80:	d008      	beq.n	8020c94 <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8020c82:	7af9      	ldrb	r1, [r7, #11]
 8020c84:	2327      	movs	r3, #39	; 0x27
 8020c86:	2202      	movs	r2, #2
 8020c88:	68f8      	ldr	r0, [r7, #12]
 8020c8a:	f7ff fd9a 	bl	80207c2 <SCSI_SenseCode>
      return -1;
 8020c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8020c92:	e063      	b.n	8020d5c <SCSI_Write10+0x182>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020c94:	687b      	ldr	r3, [r7, #4]
 8020c96:	3302      	adds	r3, #2
 8020c98:	781b      	ldrb	r3, [r3, #0]
 8020c9a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8020c9c:	687b      	ldr	r3, [r7, #4]
 8020c9e:	3303      	adds	r3, #3
 8020ca0:	781b      	ldrb	r3, [r3, #0]
 8020ca2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020ca4:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8020ca6:	687b      	ldr	r3, [r7, #4]
 8020ca8:	3304      	adds	r3, #4
 8020caa:	781b      	ldrb	r3, [r3, #0]
 8020cac:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8020cae:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8020cb0:	687a      	ldr	r2, [r7, #4]
 8020cb2:	3205      	adds	r2, #5
 8020cb4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8020cb6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020cb8:	697b      	ldr	r3, [r7, #20]
 8020cba:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8020cbe:	687b      	ldr	r3, [r7, #4]
 8020cc0:	3307      	adds	r3, #7
 8020cc2:	781b      	ldrb	r3, [r3, #0]
 8020cc4:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8020cc6:	687a      	ldr	r2, [r7, #4]
 8020cc8:	3208      	adds	r2, #8
 8020cca:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8020ccc:	431a      	orrs	r2, r3
 8020cce:	697b      	ldr	r3, [r7, #20]
 8020cd0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8020cd4:	697b      	ldr	r3, [r7, #20]
 8020cd6:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020cda:	697b      	ldr	r3, [r7, #20]
 8020cdc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020ce0:	7af9      	ldrb	r1, [r7, #11]
 8020ce2:	68f8      	ldr	r0, [r7, #12]
 8020ce4:	f000 f94c 	bl	8020f80 <SCSI_CheckAddressRange>
 8020ce8:	4603      	mov	r3, r0
 8020cea:	2b00      	cmp	r3, #0
 8020cec:	da02      	bge.n	8020cf4 <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8020cee:	f04f 33ff 	mov.w	r3, #4294967295
 8020cf2:	e033      	b.n	8020d5c <SCSI_Write10+0x182>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8020cf4:	697b      	ldr	r3, [r7, #20]
 8020cf6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020cfa:	697a      	ldr	r2, [r7, #20]
 8020cfc:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8020d00:	fb02 f303 	mul.w	r3, r2, r3
 8020d04:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8020d06:	697b      	ldr	r3, [r7, #20]
 8020d08:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8020d0c:	693a      	ldr	r2, [r7, #16]
 8020d0e:	429a      	cmp	r2, r3
 8020d10:	d00a      	beq.n	8020d28 <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020d12:	697b      	ldr	r3, [r7, #20]
 8020d14:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020d18:	2320      	movs	r3, #32
 8020d1a:	2205      	movs	r2, #5
 8020d1c:	68f8      	ldr	r0, [r7, #12]
 8020d1e:	f7ff fd50 	bl	80207c2 <SCSI_SenseCode>
      return -1;
 8020d22:	f04f 33ff 	mov.w	r3, #4294967295
 8020d26:	e019      	b.n	8020d5c <SCSI_Write10+0x182>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8020d28:	693b      	ldr	r3, [r7, #16]
 8020d2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020d2e:	bf28      	it	cs
 8020d30:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8020d34:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8020d36:	697b      	ldr	r3, [r7, #20]
 8020d38:	2201      	movs	r2, #1
 8020d3a:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8020d3c:	697b      	ldr	r3, [r7, #20]
 8020d3e:	f103 0210 	add.w	r2, r3, #16
 8020d42:	693b      	ldr	r3, [r7, #16]
 8020d44:	2101      	movs	r1, #1
 8020d46:	68f8      	ldr	r0, [r7, #12]
 8020d48:	f002 f87f 	bl	8022e4a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8020d4c:	2300      	movs	r3, #0
 8020d4e:	e005      	b.n	8020d5c <SCSI_Write10+0x182>
    return SCSI_ProcessWrite(pdev, lun);
 8020d50:	7afb      	ldrb	r3, [r7, #11]
 8020d52:	4619      	mov	r1, r3
 8020d54:	68f8      	ldr	r0, [r7, #12]
 8020d56:	f000 f9b4 	bl	80210c2 <SCSI_ProcessWrite>
 8020d5a:	4603      	mov	r3, r0
}
 8020d5c:	4618      	mov	r0, r3
 8020d5e:	3718      	adds	r7, #24
 8020d60:	46bd      	mov	sp, r7
 8020d62:	bd80      	pop	{r7, pc}

08020d64 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020d64:	b580      	push	{r7, lr}
 8020d66:	b086      	sub	sp, #24
 8020d68:	af00      	add	r7, sp, #0
 8020d6a:	60f8      	str	r0, [r7, #12]
 8020d6c:	460b      	mov	r3, r1
 8020d6e:	607a      	str	r2, [r7, #4]
 8020d70:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020d72:	68fb      	ldr	r3, [r7, #12]
 8020d74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020d78:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8020d7a:	697b      	ldr	r3, [r7, #20]
 8020d7c:	2b00      	cmp	r3, #0
 8020d7e:	d102      	bne.n	8020d86 <SCSI_Write12+0x22>
  {
    return -1;
 8020d80:	f04f 33ff 	mov.w	r3, #4294967295
 8020d84:	e0bf      	b.n	8020f06 <SCSI_Write12+0x1a2>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8020d86:	697b      	ldr	r3, [r7, #20]
 8020d88:	7a1b      	ldrb	r3, [r3, #8]
 8020d8a:	2b00      	cmp	r3, #0
 8020d8c:	f040 80b5 	bne.w	8020efa <SCSI_Write12+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8020d90:	697b      	ldr	r3, [r7, #20]
 8020d92:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8020d96:	2b00      	cmp	r3, #0
 8020d98:	d10a      	bne.n	8020db0 <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020d9a:	697b      	ldr	r3, [r7, #20]
 8020d9c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020da0:	2320      	movs	r3, #32
 8020da2:	2205      	movs	r2, #5
 8020da4:	68f8      	ldr	r0, [r7, #12]
 8020da6:	f7ff fd0c 	bl	80207c2 <SCSI_SenseCode>
      return -1;
 8020daa:	f04f 33ff 	mov.w	r3, #4294967295
 8020dae:	e0aa      	b.n	8020f06 <SCSI_Write12+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8020db0:	697b      	ldr	r3, [r7, #20]
 8020db2:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8020db6:	b25b      	sxtb	r3, r3
 8020db8:	2b00      	cmp	r3, #0
 8020dba:	da0a      	bge.n	8020dd2 <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020dbc:	697b      	ldr	r3, [r7, #20]
 8020dbe:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020dc2:	2320      	movs	r3, #32
 8020dc4:	2205      	movs	r2, #5
 8020dc6:	68f8      	ldr	r0, [r7, #12]
 8020dc8:	f7ff fcfb 	bl	80207c2 <SCSI_SenseCode>
      return -1;
 8020dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8020dd0:	e099      	b.n	8020f06 <SCSI_Write12+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8020dd2:	68fb      	ldr	r3, [r7, #12]
 8020dd4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020dd8:	689b      	ldr	r3, [r3, #8]
 8020dda:	7afa      	ldrb	r2, [r7, #11]
 8020ddc:	4610      	mov	r0, r2
 8020dde:	4798      	blx	r3
 8020de0:	4603      	mov	r3, r0
 8020de2:	2b00      	cmp	r3, #0
 8020de4:	d00b      	beq.n	8020dfe <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020de6:	7af9      	ldrb	r1, [r7, #11]
 8020de8:	233a      	movs	r3, #58	; 0x3a
 8020dea:	2202      	movs	r2, #2
 8020dec:	68f8      	ldr	r0, [r7, #12]
 8020dee:	f7ff fce8 	bl	80207c2 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8020df2:	697b      	ldr	r3, [r7, #20]
 8020df4:	2205      	movs	r2, #5
 8020df6:	721a      	strb	r2, [r3, #8]
      return -1;
 8020df8:	f04f 33ff 	mov.w	r3, #4294967295
 8020dfc:	e083      	b.n	8020f06 <SCSI_Write12+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8020dfe:	68fb      	ldr	r3, [r7, #12]
 8020e00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020e04:	68db      	ldr	r3, [r3, #12]
 8020e06:	7afa      	ldrb	r2, [r7, #11]
 8020e08:	4610      	mov	r0, r2
 8020e0a:	4798      	blx	r3
 8020e0c:	4603      	mov	r3, r0
 8020e0e:	2b00      	cmp	r3, #0
 8020e10:	d00b      	beq.n	8020e2a <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8020e12:	7af9      	ldrb	r1, [r7, #11]
 8020e14:	2327      	movs	r3, #39	; 0x27
 8020e16:	2202      	movs	r2, #2
 8020e18:	68f8      	ldr	r0, [r7, #12]
 8020e1a:	f7ff fcd2 	bl	80207c2 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8020e1e:	697b      	ldr	r3, [r7, #20]
 8020e20:	2205      	movs	r2, #5
 8020e22:	721a      	strb	r2, [r3, #8]
      return -1;
 8020e24:	f04f 33ff 	mov.w	r3, #4294967295
 8020e28:	e06d      	b.n	8020f06 <SCSI_Write12+0x1a2>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020e2a:	687b      	ldr	r3, [r7, #4]
 8020e2c:	3302      	adds	r3, #2
 8020e2e:	781b      	ldrb	r3, [r3, #0]
 8020e30:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8020e32:	687b      	ldr	r3, [r7, #4]
 8020e34:	3303      	adds	r3, #3
 8020e36:	781b      	ldrb	r3, [r3, #0]
 8020e38:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020e3a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8020e3c:	687b      	ldr	r3, [r7, #4]
 8020e3e:	3304      	adds	r3, #4
 8020e40:	781b      	ldrb	r3, [r3, #0]
 8020e42:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8020e44:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8020e46:	687a      	ldr	r2, [r7, #4]
 8020e48:	3205      	adds	r2, #5
 8020e4a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8020e4c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020e4e:	697b      	ldr	r3, [r7, #20]
 8020e50:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020e54:	687b      	ldr	r3, [r7, #4]
 8020e56:	3306      	adds	r3, #6
 8020e58:	781b      	ldrb	r3, [r3, #0]
 8020e5a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8020e5c:	687b      	ldr	r3, [r7, #4]
 8020e5e:	3307      	adds	r3, #7
 8020e60:	781b      	ldrb	r3, [r3, #0]
 8020e62:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020e64:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8020e66:	687b      	ldr	r3, [r7, #4]
 8020e68:	3308      	adds	r3, #8
 8020e6a:	781b      	ldrb	r3, [r3, #0]
 8020e6c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8020e6e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8020e70:	687a      	ldr	r2, [r7, #4]
 8020e72:	3209      	adds	r2, #9
 8020e74:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8020e76:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020e78:	697b      	ldr	r3, [r7, #20]
 8020e7a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8020e7e:	697b      	ldr	r3, [r7, #20]
 8020e80:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020e84:	697b      	ldr	r3, [r7, #20]
 8020e86:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020e8a:	7af9      	ldrb	r1, [r7, #11]
 8020e8c:	68f8      	ldr	r0, [r7, #12]
 8020e8e:	f000 f877 	bl	8020f80 <SCSI_CheckAddressRange>
 8020e92:	4603      	mov	r3, r0
 8020e94:	2b00      	cmp	r3, #0
 8020e96:	da02      	bge.n	8020e9e <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8020e98:	f04f 33ff 	mov.w	r3, #4294967295
 8020e9c:	e033      	b.n	8020f06 <SCSI_Write12+0x1a2>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8020e9e:	697b      	ldr	r3, [r7, #20]
 8020ea0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020ea4:	697a      	ldr	r2, [r7, #20]
 8020ea6:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8020eaa:	fb02 f303 	mul.w	r3, r2, r3
 8020eae:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8020eb0:	697b      	ldr	r3, [r7, #20]
 8020eb2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8020eb6:	693a      	ldr	r2, [r7, #16]
 8020eb8:	429a      	cmp	r2, r3
 8020eba:	d00a      	beq.n	8020ed2 <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020ebc:	697b      	ldr	r3, [r7, #20]
 8020ebe:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020ec2:	2320      	movs	r3, #32
 8020ec4:	2205      	movs	r2, #5
 8020ec6:	68f8      	ldr	r0, [r7, #12]
 8020ec8:	f7ff fc7b 	bl	80207c2 <SCSI_SenseCode>
      return -1;
 8020ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8020ed0:	e019      	b.n	8020f06 <SCSI_Write12+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8020ed2:	693b      	ldr	r3, [r7, #16]
 8020ed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020ed8:	bf28      	it	cs
 8020eda:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8020ede:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8020ee0:	697b      	ldr	r3, [r7, #20]
 8020ee2:	2201      	movs	r2, #1
 8020ee4:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8020ee6:	697b      	ldr	r3, [r7, #20]
 8020ee8:	f103 0210 	add.w	r2, r3, #16
 8020eec:	693b      	ldr	r3, [r7, #16]
 8020eee:	2101      	movs	r1, #1
 8020ef0:	68f8      	ldr	r0, [r7, #12]
 8020ef2:	f001 ffaa 	bl	8022e4a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8020ef6:	2300      	movs	r3, #0
 8020ef8:	e005      	b.n	8020f06 <SCSI_Write12+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 8020efa:	7afb      	ldrb	r3, [r7, #11]
 8020efc:	4619      	mov	r1, r3
 8020efe:	68f8      	ldr	r0, [r7, #12]
 8020f00:	f000 f8df 	bl	80210c2 <SCSI_ProcessWrite>
 8020f04:	4603      	mov	r3, r0
}
 8020f06:	4618      	mov	r0, r3
 8020f08:	3718      	adds	r7, #24
 8020f0a:	46bd      	mov	sp, r7
 8020f0c:	bd80      	pop	{r7, pc}

08020f0e <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020f0e:	b580      	push	{r7, lr}
 8020f10:	b086      	sub	sp, #24
 8020f12:	af00      	add	r7, sp, #0
 8020f14:	60f8      	str	r0, [r7, #12]
 8020f16:	460b      	mov	r3, r1
 8020f18:	607a      	str	r2, [r7, #4]
 8020f1a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020f1c:	68fb      	ldr	r3, [r7, #12]
 8020f1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020f22:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020f24:	697b      	ldr	r3, [r7, #20]
 8020f26:	2b00      	cmp	r3, #0
 8020f28:	d102      	bne.n	8020f30 <SCSI_Verify10+0x22>
  {
    return -1;
 8020f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8020f2e:	e023      	b.n	8020f78 <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8020f30:	687b      	ldr	r3, [r7, #4]
 8020f32:	3301      	adds	r3, #1
 8020f34:	781b      	ldrb	r3, [r3, #0]
 8020f36:	f003 0302 	and.w	r3, r3, #2
 8020f3a:	2b00      	cmp	r3, #0
 8020f3c:	d008      	beq.n	8020f50 <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8020f3e:	7af9      	ldrb	r1, [r7, #11]
 8020f40:	2324      	movs	r3, #36	; 0x24
 8020f42:	2205      	movs	r2, #5
 8020f44:	68f8      	ldr	r0, [r7, #12]
 8020f46:	f7ff fc3c 	bl	80207c2 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8020f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8020f4e:	e013      	b.n	8020f78 <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8020f50:	697b      	ldr	r3, [r7, #20]
 8020f52:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020f56:	697b      	ldr	r3, [r7, #20]
 8020f58:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020f5c:	7af9      	ldrb	r1, [r7, #11]
 8020f5e:	68f8      	ldr	r0, [r7, #12]
 8020f60:	f000 f80e 	bl	8020f80 <SCSI_CheckAddressRange>
 8020f64:	4603      	mov	r3, r0
 8020f66:	2b00      	cmp	r3, #0
 8020f68:	da02      	bge.n	8020f70 <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 8020f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8020f6e:	e003      	b.n	8020f78 <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 8020f70:	697b      	ldr	r3, [r7, #20]
 8020f72:	2200      	movs	r2, #0
 8020f74:	60da      	str	r2, [r3, #12]

  return 0;
 8020f76:	2300      	movs	r3, #0
}
 8020f78:	4618      	mov	r0, r3
 8020f7a:	3718      	adds	r7, #24
 8020f7c:	46bd      	mov	sp, r7
 8020f7e:	bd80      	pop	{r7, pc}

08020f80 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8020f80:	b580      	push	{r7, lr}
 8020f82:	b086      	sub	sp, #24
 8020f84:	af00      	add	r7, sp, #0
 8020f86:	60f8      	str	r0, [r7, #12]
 8020f88:	607a      	str	r2, [r7, #4]
 8020f8a:	603b      	str	r3, [r7, #0]
 8020f8c:	460b      	mov	r3, r1
 8020f8e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020f90:	68fb      	ldr	r3, [r7, #12]
 8020f92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020f96:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020f98:	697b      	ldr	r3, [r7, #20]
 8020f9a:	2b00      	cmp	r3, #0
 8020f9c:	d102      	bne.n	8020fa4 <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 8020f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8020fa2:	e011      	b.n	8020fc8 <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8020fa4:	687a      	ldr	r2, [r7, #4]
 8020fa6:	683b      	ldr	r3, [r7, #0]
 8020fa8:	441a      	add	r2, r3
 8020faa:	697b      	ldr	r3, [r7, #20]
 8020fac:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8020fb0:	429a      	cmp	r2, r3
 8020fb2:	d908      	bls.n	8020fc6 <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8020fb4:	7af9      	ldrb	r1, [r7, #11]
 8020fb6:	2321      	movs	r3, #33	; 0x21
 8020fb8:	2205      	movs	r2, #5
 8020fba:	68f8      	ldr	r0, [r7, #12]
 8020fbc:	f7ff fc01 	bl	80207c2 <SCSI_SenseCode>
    return -1;
 8020fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8020fc4:	e000      	b.n	8020fc8 <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 8020fc6:	2300      	movs	r3, #0
}
 8020fc8:	4618      	mov	r0, r3
 8020fca:	3718      	adds	r7, #24
 8020fcc:	46bd      	mov	sp, r7
 8020fce:	bd80      	pop	{r7, pc}

08020fd0 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8020fd0:	b590      	push	{r4, r7, lr}
 8020fd2:	b085      	sub	sp, #20
 8020fd4:	af00      	add	r7, sp, #0
 8020fd6:	6078      	str	r0, [r7, #4]
 8020fd8:	460b      	mov	r3, r1
 8020fda:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020fdc:	687b      	ldr	r3, [r7, #4]
 8020fde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020fe2:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8020fe4:	68fb      	ldr	r3, [r7, #12]
 8020fe6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020fea:	68fa      	ldr	r2, [r7, #12]
 8020fec:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8020ff0:	fb02 f303 	mul.w	r3, r2, r3
 8020ff4:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8020ff6:	68fb      	ldr	r3, [r7, #12]
 8020ff8:	2b00      	cmp	r3, #0
 8020ffa:	d102      	bne.n	8021002 <SCSI_ProcessRead+0x32>
  {
    return -1;
 8020ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8021000:	e05b      	b.n	80210ba <SCSI_ProcessRead+0xea>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8021002:	68bb      	ldr	r3, [r7, #8]
 8021004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021008:	bf28      	it	cs
 802100a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 802100e:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8021010:	687b      	ldr	r3, [r7, #4]
 8021012:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8021016:	691c      	ldr	r4, [r3, #16]
 8021018:	68fb      	ldr	r3, [r7, #12]
 802101a:	f103 0110 	add.w	r1, r3, #16
 802101e:	68fb      	ldr	r3, [r7, #12]
 8021020:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8021024:	68fb      	ldr	r3, [r7, #12]
 8021026:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 802102a:	4618      	mov	r0, r3
 802102c:	68bb      	ldr	r3, [r7, #8]
 802102e:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8021032:	b29b      	uxth	r3, r3
 8021034:	78f8      	ldrb	r0, [r7, #3]
 8021036:	47a0      	blx	r4
 8021038:	4603      	mov	r3, r0
 802103a:	2b00      	cmp	r3, #0
 802103c:	da08      	bge.n	8021050 <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 802103e:	78f9      	ldrb	r1, [r7, #3]
 8021040:	2311      	movs	r3, #17
 8021042:	2204      	movs	r2, #4
 8021044:	6878      	ldr	r0, [r7, #4]
 8021046:	f7ff fbbc 	bl	80207c2 <SCSI_SenseCode>
    return -1;
 802104a:	f04f 33ff 	mov.w	r3, #4294967295
 802104e:	e034      	b.n	80210ba <SCSI_ProcessRead+0xea>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8021050:	68fb      	ldr	r3, [r7, #12]
 8021052:	f103 0210 	add.w	r2, r3, #16
 8021056:	68bb      	ldr	r3, [r7, #8]
 8021058:	2181      	movs	r1, #129	; 0x81
 802105a:	6878      	ldr	r0, [r7, #4]
 802105c:	f001 fed4 	bl	8022e08 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8021060:	68fb      	ldr	r3, [r7, #12]
 8021062:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8021066:	68fb      	ldr	r3, [r7, #12]
 8021068:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 802106c:	4619      	mov	r1, r3
 802106e:	68bb      	ldr	r3, [r7, #8]
 8021070:	fbb3 f3f1 	udiv	r3, r3, r1
 8021074:	441a      	add	r2, r3
 8021076:	68fb      	ldr	r3, [r7, #12]
 8021078:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 802107c:	68fb      	ldr	r3, [r7, #12]
 802107e:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8021082:	68fb      	ldr	r3, [r7, #12]
 8021084:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8021088:	4619      	mov	r1, r3
 802108a:	68bb      	ldr	r3, [r7, #8]
 802108c:	fbb3 f3f1 	udiv	r3, r3, r1
 8021090:	1ad2      	subs	r2, r2, r3
 8021092:	68fb      	ldr	r3, [r7, #12]
 8021094:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8021098:	68fb      	ldr	r3, [r7, #12]
 802109a:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 802109e:	68bb      	ldr	r3, [r7, #8]
 80210a0:	1ad2      	subs	r2, r2, r3
 80210a2:	68fb      	ldr	r3, [r7, #12]
 80210a4:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 80210a8:	68fb      	ldr	r3, [r7, #12]
 80210aa:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80210ae:	2b00      	cmp	r3, #0
 80210b0:	d102      	bne.n	80210b8 <SCSI_ProcessRead+0xe8>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 80210b2:	68fb      	ldr	r3, [r7, #12]
 80210b4:	2203      	movs	r2, #3
 80210b6:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 80210b8:	2300      	movs	r3, #0
}
 80210ba:	4618      	mov	r0, r3
 80210bc:	3714      	adds	r7, #20
 80210be:	46bd      	mov	sp, r7
 80210c0:	bd90      	pop	{r4, r7, pc}

080210c2 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80210c2:	b590      	push	{r4, r7, lr}
 80210c4:	b085      	sub	sp, #20
 80210c6:	af00      	add	r7, sp, #0
 80210c8:	6078      	str	r0, [r7, #4]
 80210ca:	460b      	mov	r3, r1
 80210cc:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80210ce:	687b      	ldr	r3, [r7, #4]
 80210d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80210d4:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80210d6:	68fb      	ldr	r3, [r7, #12]
 80210d8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80210dc:	68fa      	ldr	r2, [r7, #12]
 80210de:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80210e2:	fb02 f303 	mul.w	r3, r2, r3
 80210e6:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 80210e8:	68fb      	ldr	r3, [r7, #12]
 80210ea:	2b00      	cmp	r3, #0
 80210ec:	d102      	bne.n	80210f4 <SCSI_ProcessWrite+0x32>
  {
    return -1;
 80210ee:	f04f 33ff 	mov.w	r3, #4294967295
 80210f2:	e06b      	b.n	80211cc <SCSI_ProcessWrite+0x10a>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 80210f4:	68bb      	ldr	r3, [r7, #8]
 80210f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80210fa:	bf28      	it	cs
 80210fc:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8021100:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8021102:	687b      	ldr	r3, [r7, #4]
 8021104:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8021108:	695c      	ldr	r4, [r3, #20]
 802110a:	68fb      	ldr	r3, [r7, #12]
 802110c:	f103 0110 	add.w	r1, r3, #16
 8021110:	68fb      	ldr	r3, [r7, #12]
 8021112:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8021116:	68fb      	ldr	r3, [r7, #12]
 8021118:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 802111c:	4618      	mov	r0, r3
 802111e:	68bb      	ldr	r3, [r7, #8]
 8021120:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8021124:	b29b      	uxth	r3, r3
 8021126:	78f8      	ldrb	r0, [r7, #3]
 8021128:	47a0      	blx	r4
 802112a:	4603      	mov	r3, r0
 802112c:	2b00      	cmp	r3, #0
 802112e:	da08      	bge.n	8021142 <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8021130:	78f9      	ldrb	r1, [r7, #3]
 8021132:	2303      	movs	r3, #3
 8021134:	2204      	movs	r2, #4
 8021136:	6878      	ldr	r0, [r7, #4]
 8021138:	f7ff fb43 	bl	80207c2 <SCSI_SenseCode>
    return -1;
 802113c:	f04f 33ff 	mov.w	r3, #4294967295
 8021140:	e044      	b.n	80211cc <SCSI_ProcessWrite+0x10a>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8021142:	68fb      	ldr	r3, [r7, #12]
 8021144:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8021148:	68fb      	ldr	r3, [r7, #12]
 802114a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 802114e:	4619      	mov	r1, r3
 8021150:	68bb      	ldr	r3, [r7, #8]
 8021152:	fbb3 f3f1 	udiv	r3, r3, r1
 8021156:	441a      	add	r2, r3
 8021158:	68fb      	ldr	r3, [r7, #12]
 802115a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 802115e:	68fb      	ldr	r3, [r7, #12]
 8021160:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8021164:	68fb      	ldr	r3, [r7, #12]
 8021166:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 802116a:	4619      	mov	r1, r3
 802116c:	68bb      	ldr	r3, [r7, #8]
 802116e:	fbb3 f3f1 	udiv	r3, r3, r1
 8021172:	1ad2      	subs	r2, r2, r3
 8021174:	68fb      	ldr	r3, [r7, #12]
 8021176:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 802117a:	68fb      	ldr	r3, [r7, #12]
 802117c:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8021180:	68bb      	ldr	r3, [r7, #8]
 8021182:	1ad2      	subs	r2, r2, r3
 8021184:	68fb      	ldr	r3, [r7, #12]
 8021186:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 802118a:	68fb      	ldr	r3, [r7, #12]
 802118c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8021190:	2b00      	cmp	r3, #0
 8021192:	d104      	bne.n	802119e <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8021194:	2100      	movs	r1, #0
 8021196:	6878      	ldr	r0, [r7, #4]
 8021198:	f7fe fdd8 	bl	801fd4c <MSC_BOT_SendCSW>
 802119c:	e015      	b.n	80211ca <SCSI_ProcessWrite+0x108>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 802119e:	68fb      	ldr	r3, [r7, #12]
 80211a0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80211a4:	68fa      	ldr	r2, [r7, #12]
 80211a6:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80211aa:	fb02 f303 	mul.w	r3, r2, r3
 80211ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80211b2:	bf28      	it	cs
 80211b4:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80211b8:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80211ba:	68fb      	ldr	r3, [r7, #12]
 80211bc:	f103 0210 	add.w	r2, r3, #16
 80211c0:	68bb      	ldr	r3, [r7, #8]
 80211c2:	2101      	movs	r1, #1
 80211c4:	6878      	ldr	r0, [r7, #4]
 80211c6:	f001 fe40 	bl	8022e4a <USBD_LL_PrepareReceive>
  }

  return 0;
 80211ca:	2300      	movs	r3, #0
}
 80211cc:	4618      	mov	r0, r3
 80211ce:	3714      	adds	r7, #20
 80211d0:	46bd      	mov	sp, r7
 80211d2:	bd90      	pop	{r4, r7, pc}

080211d4 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 80211d4:	b480      	push	{r7}
 80211d6:	b087      	sub	sp, #28
 80211d8:	af00      	add	r7, sp, #0
 80211da:	60f8      	str	r0, [r7, #12]
 80211dc:	60b9      	str	r1, [r7, #8]
 80211de:	4613      	mov	r3, r2
 80211e0:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 80211e2:	88fb      	ldrh	r3, [r7, #6]
 80211e4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80211e6:	68fb      	ldr	r3, [r7, #12]
 80211e8:	2b00      	cmp	r3, #0
 80211ea:	d102      	bne.n	80211f2 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 80211ec:	f04f 33ff 	mov.w	r3, #4294967295
 80211f0:	e013      	b.n	802121a <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 80211f2:	8afa      	ldrh	r2, [r7, #22]
 80211f4:	68fb      	ldr	r3, [r7, #12]
 80211f6:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 80211f8:	e00b      	b.n	8021212 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 80211fa:	8afb      	ldrh	r3, [r7, #22]
 80211fc:	3b01      	subs	r3, #1
 80211fe:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8021200:	8afb      	ldrh	r3, [r7, #22]
 8021202:	68ba      	ldr	r2, [r7, #8]
 8021204:	441a      	add	r2, r3
 8021206:	8afb      	ldrh	r3, [r7, #22]
 8021208:	7811      	ldrb	r1, [r2, #0]
 802120a:	68fa      	ldr	r2, [r7, #12]
 802120c:	4413      	add	r3, r2
 802120e:	460a      	mov	r2, r1
 8021210:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8021212:	8afb      	ldrh	r3, [r7, #22]
 8021214:	2b00      	cmp	r3, #0
 8021216:	d1f0      	bne.n	80211fa <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8021218:	2300      	movs	r3, #0
}
 802121a:	4618      	mov	r0, r3
 802121c:	371c      	adds	r7, #28
 802121e:	46bd      	mov	sp, r7
 8021220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021224:	4770      	bx	lr

08021226 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8021226:	b580      	push	{r7, lr}
 8021228:	b086      	sub	sp, #24
 802122a:	af00      	add	r7, sp, #0
 802122c:	60f8      	str	r0, [r7, #12]
 802122e:	60b9      	str	r1, [r7, #8]
 8021230:	4613      	mov	r3, r2
 8021232:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8021234:	68fb      	ldr	r3, [r7, #12]
 8021236:	2b00      	cmp	r3, #0
 8021238:	d101      	bne.n	802123e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 802123a:	2303      	movs	r3, #3
 802123c:	e01f      	b.n	802127e <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 802123e:	68fb      	ldr	r3, [r7, #12]
 8021240:	2200      	movs	r2, #0
 8021242:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8021246:	68fb      	ldr	r3, [r7, #12]
 8021248:	2200      	movs	r2, #0
 802124a:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 802124e:	68fb      	ldr	r3, [r7, #12]
 8021250:	2200      	movs	r2, #0
 8021252:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8021256:	68bb      	ldr	r3, [r7, #8]
 8021258:	2b00      	cmp	r3, #0
 802125a:	d003      	beq.n	8021264 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 802125c:	68fb      	ldr	r3, [r7, #12]
 802125e:	68ba      	ldr	r2, [r7, #8]
 8021260:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8021264:	68fb      	ldr	r3, [r7, #12]
 8021266:	2201      	movs	r2, #1
 8021268:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 802126c:	68fb      	ldr	r3, [r7, #12]
 802126e:	79fa      	ldrb	r2, [r7, #7]
 8021270:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8021272:	68f8      	ldr	r0, [r7, #12]
 8021274:	f001 fc74 	bl	8022b60 <USBD_LL_Init>
 8021278:	4603      	mov	r3, r0
 802127a:	75fb      	strb	r3, [r7, #23]

  return ret;
 802127c:	7dfb      	ldrb	r3, [r7, #23]
}
 802127e:	4618      	mov	r0, r3
 8021280:	3718      	adds	r7, #24
 8021282:	46bd      	mov	sp, r7
 8021284:	bd80      	pop	{r7, pc}

08021286 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8021286:	b580      	push	{r7, lr}
 8021288:	b084      	sub	sp, #16
 802128a:	af00      	add	r7, sp, #0
 802128c:	6078      	str	r0, [r7, #4]
 802128e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8021290:	2300      	movs	r3, #0
 8021292:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8021294:	683b      	ldr	r3, [r7, #0]
 8021296:	2b00      	cmp	r3, #0
 8021298:	d101      	bne.n	802129e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 802129a:	2303      	movs	r3, #3
 802129c:	e016      	b.n	80212cc <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 802129e:	687b      	ldr	r3, [r7, #4]
 80212a0:	683a      	ldr	r2, [r7, #0]
 80212a2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80212a6:	687b      	ldr	r3, [r7, #4]
 80212a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80212ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80212ae:	2b00      	cmp	r3, #0
 80212b0:	d00b      	beq.n	80212ca <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80212b2:	687b      	ldr	r3, [r7, #4]
 80212b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80212b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80212ba:	f107 020e 	add.w	r2, r7, #14
 80212be:	4610      	mov	r0, r2
 80212c0:	4798      	blx	r3
 80212c2:	4602      	mov	r2, r0
 80212c4:	687b      	ldr	r3, [r7, #4]
 80212c6:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80212ca:	2300      	movs	r3, #0
}
 80212cc:	4618      	mov	r0, r3
 80212ce:	3710      	adds	r7, #16
 80212d0:	46bd      	mov	sp, r7
 80212d2:	bd80      	pop	{r7, pc}

080212d4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80212d4:	b580      	push	{r7, lr}
 80212d6:	b082      	sub	sp, #8
 80212d8:	af00      	add	r7, sp, #0
 80212da:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80212dc:	6878      	ldr	r0, [r7, #4]
 80212de:	f001 fc8b 	bl	8022bf8 <USBD_LL_Start>
 80212e2:	4603      	mov	r3, r0
}
 80212e4:	4618      	mov	r0, r3
 80212e6:	3708      	adds	r7, #8
 80212e8:	46bd      	mov	sp, r7
 80212ea:	bd80      	pop	{r7, pc}

080212ec <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80212ec:	b480      	push	{r7}
 80212ee:	b083      	sub	sp, #12
 80212f0:	af00      	add	r7, sp, #0
 80212f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80212f4:	2300      	movs	r3, #0
}
 80212f6:	4618      	mov	r0, r3
 80212f8:	370c      	adds	r7, #12
 80212fa:	46bd      	mov	sp, r7
 80212fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021300:	4770      	bx	lr

08021302 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8021302:	b580      	push	{r7, lr}
 8021304:	b084      	sub	sp, #16
 8021306:	af00      	add	r7, sp, #0
 8021308:	6078      	str	r0, [r7, #4]
 802130a:	460b      	mov	r3, r1
 802130c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 802130e:	2303      	movs	r3, #3
 8021310:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8021312:	687b      	ldr	r3, [r7, #4]
 8021314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021318:	2b00      	cmp	r3, #0
 802131a:	d009      	beq.n	8021330 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 802131c:	687b      	ldr	r3, [r7, #4]
 802131e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021322:	681b      	ldr	r3, [r3, #0]
 8021324:	78fa      	ldrb	r2, [r7, #3]
 8021326:	4611      	mov	r1, r2
 8021328:	6878      	ldr	r0, [r7, #4]
 802132a:	4798      	blx	r3
 802132c:	4603      	mov	r3, r0
 802132e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8021330:	7bfb      	ldrb	r3, [r7, #15]
}
 8021332:	4618      	mov	r0, r3
 8021334:	3710      	adds	r7, #16
 8021336:	46bd      	mov	sp, r7
 8021338:	bd80      	pop	{r7, pc}

0802133a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 802133a:	b580      	push	{r7, lr}
 802133c:	b082      	sub	sp, #8
 802133e:	af00      	add	r7, sp, #0
 8021340:	6078      	str	r0, [r7, #4]
 8021342:	460b      	mov	r3, r1
 8021344:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8021346:	687b      	ldr	r3, [r7, #4]
 8021348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802134c:	2b00      	cmp	r3, #0
 802134e:	d007      	beq.n	8021360 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8021350:	687b      	ldr	r3, [r7, #4]
 8021352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021356:	685b      	ldr	r3, [r3, #4]
 8021358:	78fa      	ldrb	r2, [r7, #3]
 802135a:	4611      	mov	r1, r2
 802135c:	6878      	ldr	r0, [r7, #4]
 802135e:	4798      	blx	r3
  }

  return USBD_OK;
 8021360:	2300      	movs	r3, #0
}
 8021362:	4618      	mov	r0, r3
 8021364:	3708      	adds	r7, #8
 8021366:	46bd      	mov	sp, r7
 8021368:	bd80      	pop	{r7, pc}

0802136a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 802136a:	b580      	push	{r7, lr}
 802136c:	b084      	sub	sp, #16
 802136e:	af00      	add	r7, sp, #0
 8021370:	6078      	str	r0, [r7, #4]
 8021372:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8021374:	687b      	ldr	r3, [r7, #4]
 8021376:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 802137a:	6839      	ldr	r1, [r7, #0]
 802137c:	4618      	mov	r0, r3
 802137e:	f000 ffb9 	bl	80222f4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8021382:	687b      	ldr	r3, [r7, #4]
 8021384:	2201      	movs	r2, #1
 8021386:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 802138a:	687b      	ldr	r3, [r7, #4]
 802138c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8021390:	461a      	mov	r2, r3
 8021392:	687b      	ldr	r3, [r7, #4]
 8021394:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8021398:	687b      	ldr	r3, [r7, #4]
 802139a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 802139e:	f003 031f 	and.w	r3, r3, #31
 80213a2:	2b02      	cmp	r3, #2
 80213a4:	d01a      	beq.n	80213dc <USBD_LL_SetupStage+0x72>
 80213a6:	2b02      	cmp	r3, #2
 80213a8:	d822      	bhi.n	80213f0 <USBD_LL_SetupStage+0x86>
 80213aa:	2b00      	cmp	r3, #0
 80213ac:	d002      	beq.n	80213b4 <USBD_LL_SetupStage+0x4a>
 80213ae:	2b01      	cmp	r3, #1
 80213b0:	d00a      	beq.n	80213c8 <USBD_LL_SetupStage+0x5e>
 80213b2:	e01d      	b.n	80213f0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80213b4:	687b      	ldr	r3, [r7, #4]
 80213b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80213ba:	4619      	mov	r1, r3
 80213bc:	6878      	ldr	r0, [r7, #4]
 80213be:	f000 fa61 	bl	8021884 <USBD_StdDevReq>
 80213c2:	4603      	mov	r3, r0
 80213c4:	73fb      	strb	r3, [r7, #15]
      break;
 80213c6:	e020      	b.n	802140a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80213c8:	687b      	ldr	r3, [r7, #4]
 80213ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80213ce:	4619      	mov	r1, r3
 80213d0:	6878      	ldr	r0, [r7, #4]
 80213d2:	f000 fac5 	bl	8021960 <USBD_StdItfReq>
 80213d6:	4603      	mov	r3, r0
 80213d8:	73fb      	strb	r3, [r7, #15]
      break;
 80213da:	e016      	b.n	802140a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80213dc:	687b      	ldr	r3, [r7, #4]
 80213de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80213e2:	4619      	mov	r1, r3
 80213e4:	6878      	ldr	r0, [r7, #4]
 80213e6:	f000 fb04 	bl	80219f2 <USBD_StdEPReq>
 80213ea:	4603      	mov	r3, r0
 80213ec:	73fb      	strb	r3, [r7, #15]
      break;
 80213ee:	e00c      	b.n	802140a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80213f0:	687b      	ldr	r3, [r7, #4]
 80213f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80213f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80213fa:	b2db      	uxtb	r3, r3
 80213fc:	4619      	mov	r1, r3
 80213fe:	6878      	ldr	r0, [r7, #4]
 8021400:	f001 fc79 	bl	8022cf6 <USBD_LL_StallEP>
 8021404:	4603      	mov	r3, r0
 8021406:	73fb      	strb	r3, [r7, #15]
      break;
 8021408:	bf00      	nop
  }

  return ret;
 802140a:	7bfb      	ldrb	r3, [r7, #15]
}
 802140c:	4618      	mov	r0, r3
 802140e:	3710      	adds	r7, #16
 8021410:	46bd      	mov	sp, r7
 8021412:	bd80      	pop	{r7, pc}

08021414 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8021414:	b580      	push	{r7, lr}
 8021416:	b086      	sub	sp, #24
 8021418:	af00      	add	r7, sp, #0
 802141a:	60f8      	str	r0, [r7, #12]
 802141c:	460b      	mov	r3, r1
 802141e:	607a      	str	r2, [r7, #4]
 8021420:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8021422:	7afb      	ldrb	r3, [r7, #11]
 8021424:	2b00      	cmp	r3, #0
 8021426:	d138      	bne.n	802149a <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8021428:	68fb      	ldr	r3, [r7, #12]
 802142a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 802142e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8021430:	68fb      	ldr	r3, [r7, #12]
 8021432:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8021436:	2b03      	cmp	r3, #3
 8021438:	d14a      	bne.n	80214d0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 802143a:	693b      	ldr	r3, [r7, #16]
 802143c:	689a      	ldr	r2, [r3, #8]
 802143e:	693b      	ldr	r3, [r7, #16]
 8021440:	68db      	ldr	r3, [r3, #12]
 8021442:	429a      	cmp	r2, r3
 8021444:	d913      	bls.n	802146e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8021446:	693b      	ldr	r3, [r7, #16]
 8021448:	689a      	ldr	r2, [r3, #8]
 802144a:	693b      	ldr	r3, [r7, #16]
 802144c:	68db      	ldr	r3, [r3, #12]
 802144e:	1ad2      	subs	r2, r2, r3
 8021450:	693b      	ldr	r3, [r7, #16]
 8021452:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8021454:	693b      	ldr	r3, [r7, #16]
 8021456:	68da      	ldr	r2, [r3, #12]
 8021458:	693b      	ldr	r3, [r7, #16]
 802145a:	689b      	ldr	r3, [r3, #8]
 802145c:	4293      	cmp	r3, r2
 802145e:	bf28      	it	cs
 8021460:	4613      	movcs	r3, r2
 8021462:	461a      	mov	r2, r3
 8021464:	6879      	ldr	r1, [r7, #4]
 8021466:	68f8      	ldr	r0, [r7, #12]
 8021468:	f001 f81b 	bl	80224a2 <USBD_CtlContinueRx>
 802146c:	e030      	b.n	80214d0 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802146e:	68fb      	ldr	r3, [r7, #12]
 8021470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021474:	b2db      	uxtb	r3, r3
 8021476:	2b03      	cmp	r3, #3
 8021478:	d10b      	bne.n	8021492 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 802147a:	68fb      	ldr	r3, [r7, #12]
 802147c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021480:	691b      	ldr	r3, [r3, #16]
 8021482:	2b00      	cmp	r3, #0
 8021484:	d005      	beq.n	8021492 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8021486:	68fb      	ldr	r3, [r7, #12]
 8021488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802148c:	691b      	ldr	r3, [r3, #16]
 802148e:	68f8      	ldr	r0, [r7, #12]
 8021490:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8021492:	68f8      	ldr	r0, [r7, #12]
 8021494:	f001 f816 	bl	80224c4 <USBD_CtlSendStatus>
 8021498:	e01a      	b.n	80214d0 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802149a:	68fb      	ldr	r3, [r7, #12]
 802149c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80214a0:	b2db      	uxtb	r3, r3
 80214a2:	2b03      	cmp	r3, #3
 80214a4:	d114      	bne.n	80214d0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80214a6:	68fb      	ldr	r3, [r7, #12]
 80214a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80214ac:	699b      	ldr	r3, [r3, #24]
 80214ae:	2b00      	cmp	r3, #0
 80214b0:	d00e      	beq.n	80214d0 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80214b2:	68fb      	ldr	r3, [r7, #12]
 80214b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80214b8:	699b      	ldr	r3, [r3, #24]
 80214ba:	7afa      	ldrb	r2, [r7, #11]
 80214bc:	4611      	mov	r1, r2
 80214be:	68f8      	ldr	r0, [r7, #12]
 80214c0:	4798      	blx	r3
 80214c2:	4603      	mov	r3, r0
 80214c4:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80214c6:	7dfb      	ldrb	r3, [r7, #23]
 80214c8:	2b00      	cmp	r3, #0
 80214ca:	d001      	beq.n	80214d0 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80214cc:	7dfb      	ldrb	r3, [r7, #23]
 80214ce:	e000      	b.n	80214d2 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80214d0:	2300      	movs	r3, #0
}
 80214d2:	4618      	mov	r0, r3
 80214d4:	3718      	adds	r7, #24
 80214d6:	46bd      	mov	sp, r7
 80214d8:	bd80      	pop	{r7, pc}

080214da <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80214da:	b580      	push	{r7, lr}
 80214dc:	b086      	sub	sp, #24
 80214de:	af00      	add	r7, sp, #0
 80214e0:	60f8      	str	r0, [r7, #12]
 80214e2:	460b      	mov	r3, r1
 80214e4:	607a      	str	r2, [r7, #4]
 80214e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80214e8:	7afb      	ldrb	r3, [r7, #11]
 80214ea:	2b00      	cmp	r3, #0
 80214ec:	d16b      	bne.n	80215c6 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80214ee:	68fb      	ldr	r3, [r7, #12]
 80214f0:	3314      	adds	r3, #20
 80214f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80214f4:	68fb      	ldr	r3, [r7, #12]
 80214f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80214fa:	2b02      	cmp	r3, #2
 80214fc:	d156      	bne.n	80215ac <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80214fe:	693b      	ldr	r3, [r7, #16]
 8021500:	689a      	ldr	r2, [r3, #8]
 8021502:	693b      	ldr	r3, [r7, #16]
 8021504:	68db      	ldr	r3, [r3, #12]
 8021506:	429a      	cmp	r2, r3
 8021508:	d914      	bls.n	8021534 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 802150a:	693b      	ldr	r3, [r7, #16]
 802150c:	689a      	ldr	r2, [r3, #8]
 802150e:	693b      	ldr	r3, [r7, #16]
 8021510:	68db      	ldr	r3, [r3, #12]
 8021512:	1ad2      	subs	r2, r2, r3
 8021514:	693b      	ldr	r3, [r7, #16]
 8021516:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8021518:	693b      	ldr	r3, [r7, #16]
 802151a:	689b      	ldr	r3, [r3, #8]
 802151c:	461a      	mov	r2, r3
 802151e:	6879      	ldr	r1, [r7, #4]
 8021520:	68f8      	ldr	r0, [r7, #12]
 8021522:	f000 ffad 	bl	8022480 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8021526:	2300      	movs	r3, #0
 8021528:	2200      	movs	r2, #0
 802152a:	2100      	movs	r1, #0
 802152c:	68f8      	ldr	r0, [r7, #12]
 802152e:	f001 fc8c 	bl	8022e4a <USBD_LL_PrepareReceive>
 8021532:	e03b      	b.n	80215ac <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8021534:	693b      	ldr	r3, [r7, #16]
 8021536:	68da      	ldr	r2, [r3, #12]
 8021538:	693b      	ldr	r3, [r7, #16]
 802153a:	689b      	ldr	r3, [r3, #8]
 802153c:	429a      	cmp	r2, r3
 802153e:	d11c      	bne.n	802157a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8021540:	693b      	ldr	r3, [r7, #16]
 8021542:	685a      	ldr	r2, [r3, #4]
 8021544:	693b      	ldr	r3, [r7, #16]
 8021546:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8021548:	429a      	cmp	r2, r3
 802154a:	d316      	bcc.n	802157a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 802154c:	693b      	ldr	r3, [r7, #16]
 802154e:	685a      	ldr	r2, [r3, #4]
 8021550:	68fb      	ldr	r3, [r7, #12]
 8021552:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8021556:	429a      	cmp	r2, r3
 8021558:	d20f      	bcs.n	802157a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 802155a:	2200      	movs	r2, #0
 802155c:	2100      	movs	r1, #0
 802155e:	68f8      	ldr	r0, [r7, #12]
 8021560:	f000 ff8e 	bl	8022480 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8021564:	68fb      	ldr	r3, [r7, #12]
 8021566:	2200      	movs	r2, #0
 8021568:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 802156c:	2300      	movs	r3, #0
 802156e:	2200      	movs	r2, #0
 8021570:	2100      	movs	r1, #0
 8021572:	68f8      	ldr	r0, [r7, #12]
 8021574:	f001 fc69 	bl	8022e4a <USBD_LL_PrepareReceive>
 8021578:	e018      	b.n	80215ac <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802157a:	68fb      	ldr	r3, [r7, #12]
 802157c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021580:	b2db      	uxtb	r3, r3
 8021582:	2b03      	cmp	r3, #3
 8021584:	d10b      	bne.n	802159e <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8021586:	68fb      	ldr	r3, [r7, #12]
 8021588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802158c:	68db      	ldr	r3, [r3, #12]
 802158e:	2b00      	cmp	r3, #0
 8021590:	d005      	beq.n	802159e <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8021592:	68fb      	ldr	r3, [r7, #12]
 8021594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021598:	68db      	ldr	r3, [r3, #12]
 802159a:	68f8      	ldr	r0, [r7, #12]
 802159c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 802159e:	2180      	movs	r1, #128	; 0x80
 80215a0:	68f8      	ldr	r0, [r7, #12]
 80215a2:	f001 fba8 	bl	8022cf6 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80215a6:	68f8      	ldr	r0, [r7, #12]
 80215a8:	f000 ff9f 	bl	80224ea <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80215ac:	68fb      	ldr	r3, [r7, #12]
 80215ae:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80215b2:	2b01      	cmp	r3, #1
 80215b4:	d122      	bne.n	80215fc <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80215b6:	68f8      	ldr	r0, [r7, #12]
 80215b8:	f7ff fe98 	bl	80212ec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80215bc:	68fb      	ldr	r3, [r7, #12]
 80215be:	2200      	movs	r2, #0
 80215c0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80215c4:	e01a      	b.n	80215fc <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80215c6:	68fb      	ldr	r3, [r7, #12]
 80215c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80215cc:	b2db      	uxtb	r3, r3
 80215ce:	2b03      	cmp	r3, #3
 80215d0:	d114      	bne.n	80215fc <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80215d2:	68fb      	ldr	r3, [r7, #12]
 80215d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80215d8:	695b      	ldr	r3, [r3, #20]
 80215da:	2b00      	cmp	r3, #0
 80215dc:	d00e      	beq.n	80215fc <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80215de:	68fb      	ldr	r3, [r7, #12]
 80215e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80215e4:	695b      	ldr	r3, [r3, #20]
 80215e6:	7afa      	ldrb	r2, [r7, #11]
 80215e8:	4611      	mov	r1, r2
 80215ea:	68f8      	ldr	r0, [r7, #12]
 80215ec:	4798      	blx	r3
 80215ee:	4603      	mov	r3, r0
 80215f0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80215f2:	7dfb      	ldrb	r3, [r7, #23]
 80215f4:	2b00      	cmp	r3, #0
 80215f6:	d001      	beq.n	80215fc <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80215f8:	7dfb      	ldrb	r3, [r7, #23]
 80215fa:	e000      	b.n	80215fe <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80215fc:	2300      	movs	r3, #0
}
 80215fe:	4618      	mov	r0, r3
 8021600:	3718      	adds	r7, #24
 8021602:	46bd      	mov	sp, r7
 8021604:	bd80      	pop	{r7, pc}

08021606 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8021606:	b580      	push	{r7, lr}
 8021608:	b082      	sub	sp, #8
 802160a:	af00      	add	r7, sp, #0
 802160c:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 802160e:	687b      	ldr	r3, [r7, #4]
 8021610:	2201      	movs	r2, #1
 8021612:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8021616:	687b      	ldr	r3, [r7, #4]
 8021618:	2200      	movs	r2, #0
 802161a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 802161e:	687b      	ldr	r3, [r7, #4]
 8021620:	2200      	movs	r2, #0
 8021622:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8021624:	687b      	ldr	r3, [r7, #4]
 8021626:	2200      	movs	r2, #0
 8021628:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 802162c:	687b      	ldr	r3, [r7, #4]
 802162e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021632:	2b00      	cmp	r3, #0
 8021634:	d101      	bne.n	802163a <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8021636:	2303      	movs	r3, #3
 8021638:	e02f      	b.n	802169a <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 802163a:	687b      	ldr	r3, [r7, #4]
 802163c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8021640:	2b00      	cmp	r3, #0
 8021642:	d00f      	beq.n	8021664 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8021644:	687b      	ldr	r3, [r7, #4]
 8021646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802164a:	685b      	ldr	r3, [r3, #4]
 802164c:	2b00      	cmp	r3, #0
 802164e:	d009      	beq.n	8021664 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8021650:	687b      	ldr	r3, [r7, #4]
 8021652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021656:	685b      	ldr	r3, [r3, #4]
 8021658:	687a      	ldr	r2, [r7, #4]
 802165a:	6852      	ldr	r2, [r2, #4]
 802165c:	b2d2      	uxtb	r2, r2
 802165e:	4611      	mov	r1, r2
 8021660:	6878      	ldr	r0, [r7, #4]
 8021662:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8021664:	2340      	movs	r3, #64	; 0x40
 8021666:	2200      	movs	r2, #0
 8021668:	2100      	movs	r1, #0
 802166a:	6878      	ldr	r0, [r7, #4]
 802166c:	f001 fadf 	bl	8022c2e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8021670:	687b      	ldr	r3, [r7, #4]
 8021672:	2201      	movs	r2, #1
 8021674:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8021678:	687b      	ldr	r3, [r7, #4]
 802167a:	2240      	movs	r2, #64	; 0x40
 802167c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8021680:	2340      	movs	r3, #64	; 0x40
 8021682:	2200      	movs	r2, #0
 8021684:	2180      	movs	r1, #128	; 0x80
 8021686:	6878      	ldr	r0, [r7, #4]
 8021688:	f001 fad1 	bl	8022c2e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 802168c:	687b      	ldr	r3, [r7, #4]
 802168e:	2201      	movs	r2, #1
 8021690:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8021692:	687b      	ldr	r3, [r7, #4]
 8021694:	2240      	movs	r2, #64	; 0x40
 8021696:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8021698:	2300      	movs	r3, #0
}
 802169a:	4618      	mov	r0, r3
 802169c:	3708      	adds	r7, #8
 802169e:	46bd      	mov	sp, r7
 80216a0:	bd80      	pop	{r7, pc}

080216a2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80216a2:	b480      	push	{r7}
 80216a4:	b083      	sub	sp, #12
 80216a6:	af00      	add	r7, sp, #0
 80216a8:	6078      	str	r0, [r7, #4]
 80216aa:	460b      	mov	r3, r1
 80216ac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80216ae:	687b      	ldr	r3, [r7, #4]
 80216b0:	78fa      	ldrb	r2, [r7, #3]
 80216b2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80216b4:	2300      	movs	r3, #0
}
 80216b6:	4618      	mov	r0, r3
 80216b8:	370c      	adds	r7, #12
 80216ba:	46bd      	mov	sp, r7
 80216bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216c0:	4770      	bx	lr

080216c2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80216c2:	b480      	push	{r7}
 80216c4:	b083      	sub	sp, #12
 80216c6:	af00      	add	r7, sp, #0
 80216c8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80216ca:	687b      	ldr	r3, [r7, #4]
 80216cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80216d0:	b2da      	uxtb	r2, r3
 80216d2:	687b      	ldr	r3, [r7, #4]
 80216d4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80216d8:	687b      	ldr	r3, [r7, #4]
 80216da:	2204      	movs	r2, #4
 80216dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80216e0:	2300      	movs	r3, #0
}
 80216e2:	4618      	mov	r0, r3
 80216e4:	370c      	adds	r7, #12
 80216e6:	46bd      	mov	sp, r7
 80216e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216ec:	4770      	bx	lr

080216ee <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80216ee:	b480      	push	{r7}
 80216f0:	b083      	sub	sp, #12
 80216f2:	af00      	add	r7, sp, #0
 80216f4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80216f6:	687b      	ldr	r3, [r7, #4]
 80216f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80216fc:	b2db      	uxtb	r3, r3
 80216fe:	2b04      	cmp	r3, #4
 8021700:	d106      	bne.n	8021710 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8021702:	687b      	ldr	r3, [r7, #4]
 8021704:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8021708:	b2da      	uxtb	r2, r3
 802170a:	687b      	ldr	r3, [r7, #4]
 802170c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8021710:	2300      	movs	r3, #0
}
 8021712:	4618      	mov	r0, r3
 8021714:	370c      	adds	r7, #12
 8021716:	46bd      	mov	sp, r7
 8021718:	f85d 7b04 	ldr.w	r7, [sp], #4
 802171c:	4770      	bx	lr

0802171e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 802171e:	b580      	push	{r7, lr}
 8021720:	b082      	sub	sp, #8
 8021722:	af00      	add	r7, sp, #0
 8021724:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8021726:	687b      	ldr	r3, [r7, #4]
 8021728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802172c:	2b00      	cmp	r3, #0
 802172e:	d101      	bne.n	8021734 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8021730:	2303      	movs	r3, #3
 8021732:	e012      	b.n	802175a <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021734:	687b      	ldr	r3, [r7, #4]
 8021736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802173a:	b2db      	uxtb	r3, r3
 802173c:	2b03      	cmp	r3, #3
 802173e:	d10b      	bne.n	8021758 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8021740:	687b      	ldr	r3, [r7, #4]
 8021742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021746:	69db      	ldr	r3, [r3, #28]
 8021748:	2b00      	cmp	r3, #0
 802174a:	d005      	beq.n	8021758 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 802174c:	687b      	ldr	r3, [r7, #4]
 802174e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021752:	69db      	ldr	r3, [r3, #28]
 8021754:	6878      	ldr	r0, [r7, #4]
 8021756:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8021758:	2300      	movs	r3, #0
}
 802175a:	4618      	mov	r0, r3
 802175c:	3708      	adds	r7, #8
 802175e:	46bd      	mov	sp, r7
 8021760:	bd80      	pop	{r7, pc}

08021762 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8021762:	b580      	push	{r7, lr}
 8021764:	b082      	sub	sp, #8
 8021766:	af00      	add	r7, sp, #0
 8021768:	6078      	str	r0, [r7, #4]
 802176a:	460b      	mov	r3, r1
 802176c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 802176e:	687b      	ldr	r3, [r7, #4]
 8021770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021774:	2b00      	cmp	r3, #0
 8021776:	d101      	bne.n	802177c <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8021778:	2303      	movs	r3, #3
 802177a:	e014      	b.n	80217a6 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802177c:	687b      	ldr	r3, [r7, #4]
 802177e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021782:	b2db      	uxtb	r3, r3
 8021784:	2b03      	cmp	r3, #3
 8021786:	d10d      	bne.n	80217a4 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8021788:	687b      	ldr	r3, [r7, #4]
 802178a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802178e:	6a1b      	ldr	r3, [r3, #32]
 8021790:	2b00      	cmp	r3, #0
 8021792:	d007      	beq.n	80217a4 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8021794:	687b      	ldr	r3, [r7, #4]
 8021796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802179a:	6a1b      	ldr	r3, [r3, #32]
 802179c:	78fa      	ldrb	r2, [r7, #3]
 802179e:	4611      	mov	r1, r2
 80217a0:	6878      	ldr	r0, [r7, #4]
 80217a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80217a4:	2300      	movs	r3, #0
}
 80217a6:	4618      	mov	r0, r3
 80217a8:	3708      	adds	r7, #8
 80217aa:	46bd      	mov	sp, r7
 80217ac:	bd80      	pop	{r7, pc}

080217ae <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80217ae:	b580      	push	{r7, lr}
 80217b0:	b082      	sub	sp, #8
 80217b2:	af00      	add	r7, sp, #0
 80217b4:	6078      	str	r0, [r7, #4]
 80217b6:	460b      	mov	r3, r1
 80217b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80217ba:	687b      	ldr	r3, [r7, #4]
 80217bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80217c0:	2b00      	cmp	r3, #0
 80217c2:	d101      	bne.n	80217c8 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80217c4:	2303      	movs	r3, #3
 80217c6:	e014      	b.n	80217f2 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80217c8:	687b      	ldr	r3, [r7, #4]
 80217ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80217ce:	b2db      	uxtb	r3, r3
 80217d0:	2b03      	cmp	r3, #3
 80217d2:	d10d      	bne.n	80217f0 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80217d4:	687b      	ldr	r3, [r7, #4]
 80217d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80217da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80217dc:	2b00      	cmp	r3, #0
 80217de:	d007      	beq.n	80217f0 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80217e0:	687b      	ldr	r3, [r7, #4]
 80217e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80217e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80217e8:	78fa      	ldrb	r2, [r7, #3]
 80217ea:	4611      	mov	r1, r2
 80217ec:	6878      	ldr	r0, [r7, #4]
 80217ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80217f0:	2300      	movs	r3, #0
}
 80217f2:	4618      	mov	r0, r3
 80217f4:	3708      	adds	r7, #8
 80217f6:	46bd      	mov	sp, r7
 80217f8:	bd80      	pop	{r7, pc}

080217fa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80217fa:	b480      	push	{r7}
 80217fc:	b083      	sub	sp, #12
 80217fe:	af00      	add	r7, sp, #0
 8021800:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8021802:	2300      	movs	r3, #0
}
 8021804:	4618      	mov	r0, r3
 8021806:	370c      	adds	r7, #12
 8021808:	46bd      	mov	sp, r7
 802180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802180e:	4770      	bx	lr

08021810 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8021810:	b580      	push	{r7, lr}
 8021812:	b082      	sub	sp, #8
 8021814:	af00      	add	r7, sp, #0
 8021816:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8021818:	687b      	ldr	r3, [r7, #4]
 802181a:	2201      	movs	r2, #1
 802181c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8021820:	687b      	ldr	r3, [r7, #4]
 8021822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021826:	2b00      	cmp	r3, #0
 8021828:	d009      	beq.n	802183e <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 802182a:	687b      	ldr	r3, [r7, #4]
 802182c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021830:	685b      	ldr	r3, [r3, #4]
 8021832:	687a      	ldr	r2, [r7, #4]
 8021834:	6852      	ldr	r2, [r2, #4]
 8021836:	b2d2      	uxtb	r2, r2
 8021838:	4611      	mov	r1, r2
 802183a:	6878      	ldr	r0, [r7, #4]
 802183c:	4798      	blx	r3
  }

  return USBD_OK;
 802183e:	2300      	movs	r3, #0
}
 8021840:	4618      	mov	r0, r3
 8021842:	3708      	adds	r7, #8
 8021844:	46bd      	mov	sp, r7
 8021846:	bd80      	pop	{r7, pc}

08021848 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8021848:	b480      	push	{r7}
 802184a:	b087      	sub	sp, #28
 802184c:	af00      	add	r7, sp, #0
 802184e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8021850:	687b      	ldr	r3, [r7, #4]
 8021852:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8021854:	697b      	ldr	r3, [r7, #20]
 8021856:	781b      	ldrb	r3, [r3, #0]
 8021858:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 802185a:	697b      	ldr	r3, [r7, #20]
 802185c:	3301      	adds	r3, #1
 802185e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8021860:	697b      	ldr	r3, [r7, #20]
 8021862:	781b      	ldrb	r3, [r3, #0]
 8021864:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8021866:	8a3b      	ldrh	r3, [r7, #16]
 8021868:	021b      	lsls	r3, r3, #8
 802186a:	b21a      	sxth	r2, r3
 802186c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8021870:	4313      	orrs	r3, r2
 8021872:	b21b      	sxth	r3, r3
 8021874:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8021876:	89fb      	ldrh	r3, [r7, #14]
}
 8021878:	4618      	mov	r0, r3
 802187a:	371c      	adds	r7, #28
 802187c:	46bd      	mov	sp, r7
 802187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021882:	4770      	bx	lr

08021884 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021884:	b580      	push	{r7, lr}
 8021886:	b084      	sub	sp, #16
 8021888:	af00      	add	r7, sp, #0
 802188a:	6078      	str	r0, [r7, #4]
 802188c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 802188e:	2300      	movs	r3, #0
 8021890:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8021892:	683b      	ldr	r3, [r7, #0]
 8021894:	781b      	ldrb	r3, [r3, #0]
 8021896:	f003 0360 	and.w	r3, r3, #96	; 0x60
 802189a:	2b40      	cmp	r3, #64	; 0x40
 802189c:	d005      	beq.n	80218aa <USBD_StdDevReq+0x26>
 802189e:	2b40      	cmp	r3, #64	; 0x40
 80218a0:	d853      	bhi.n	802194a <USBD_StdDevReq+0xc6>
 80218a2:	2b00      	cmp	r3, #0
 80218a4:	d00b      	beq.n	80218be <USBD_StdDevReq+0x3a>
 80218a6:	2b20      	cmp	r3, #32
 80218a8:	d14f      	bne.n	802194a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80218aa:	687b      	ldr	r3, [r7, #4]
 80218ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80218b0:	689b      	ldr	r3, [r3, #8]
 80218b2:	6839      	ldr	r1, [r7, #0]
 80218b4:	6878      	ldr	r0, [r7, #4]
 80218b6:	4798      	blx	r3
 80218b8:	4603      	mov	r3, r0
 80218ba:	73fb      	strb	r3, [r7, #15]
      break;
 80218bc:	e04a      	b.n	8021954 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80218be:	683b      	ldr	r3, [r7, #0]
 80218c0:	785b      	ldrb	r3, [r3, #1]
 80218c2:	2b09      	cmp	r3, #9
 80218c4:	d83b      	bhi.n	802193e <USBD_StdDevReq+0xba>
 80218c6:	a201      	add	r2, pc, #4	; (adr r2, 80218cc <USBD_StdDevReq+0x48>)
 80218c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80218cc:	08021921 	.word	0x08021921
 80218d0:	08021935 	.word	0x08021935
 80218d4:	0802193f 	.word	0x0802193f
 80218d8:	0802192b 	.word	0x0802192b
 80218dc:	0802193f 	.word	0x0802193f
 80218e0:	080218ff 	.word	0x080218ff
 80218e4:	080218f5 	.word	0x080218f5
 80218e8:	0802193f 	.word	0x0802193f
 80218ec:	08021917 	.word	0x08021917
 80218f0:	08021909 	.word	0x08021909
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80218f4:	6839      	ldr	r1, [r7, #0]
 80218f6:	6878      	ldr	r0, [r7, #4]
 80218f8:	f000 f9de 	bl	8021cb8 <USBD_GetDescriptor>
          break;
 80218fc:	e024      	b.n	8021948 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80218fe:	6839      	ldr	r1, [r7, #0]
 8021900:	6878      	ldr	r0, [r7, #4]
 8021902:	f000 fb6d 	bl	8021fe0 <USBD_SetAddress>
          break;
 8021906:	e01f      	b.n	8021948 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8021908:	6839      	ldr	r1, [r7, #0]
 802190a:	6878      	ldr	r0, [r7, #4]
 802190c:	f000 fbac 	bl	8022068 <USBD_SetConfig>
 8021910:	4603      	mov	r3, r0
 8021912:	73fb      	strb	r3, [r7, #15]
          break;
 8021914:	e018      	b.n	8021948 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8021916:	6839      	ldr	r1, [r7, #0]
 8021918:	6878      	ldr	r0, [r7, #4]
 802191a:	f000 fc4b 	bl	80221b4 <USBD_GetConfig>
          break;
 802191e:	e013      	b.n	8021948 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8021920:	6839      	ldr	r1, [r7, #0]
 8021922:	6878      	ldr	r0, [r7, #4]
 8021924:	f000 fc7c 	bl	8022220 <USBD_GetStatus>
          break;
 8021928:	e00e      	b.n	8021948 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 802192a:	6839      	ldr	r1, [r7, #0]
 802192c:	6878      	ldr	r0, [r7, #4]
 802192e:	f000 fcab 	bl	8022288 <USBD_SetFeature>
          break;
 8021932:	e009      	b.n	8021948 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8021934:	6839      	ldr	r1, [r7, #0]
 8021936:	6878      	ldr	r0, [r7, #4]
 8021938:	f000 fcba 	bl	80222b0 <USBD_ClrFeature>
          break;
 802193c:	e004      	b.n	8021948 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 802193e:	6839      	ldr	r1, [r7, #0]
 8021940:	6878      	ldr	r0, [r7, #4]
 8021942:	f000 fd11 	bl	8022368 <USBD_CtlError>
          break;
 8021946:	bf00      	nop
      }
      break;
 8021948:	e004      	b.n	8021954 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 802194a:	6839      	ldr	r1, [r7, #0]
 802194c:	6878      	ldr	r0, [r7, #4]
 802194e:	f000 fd0b 	bl	8022368 <USBD_CtlError>
      break;
 8021952:	bf00      	nop
  }

  return ret;
 8021954:	7bfb      	ldrb	r3, [r7, #15]
}
 8021956:	4618      	mov	r0, r3
 8021958:	3710      	adds	r7, #16
 802195a:	46bd      	mov	sp, r7
 802195c:	bd80      	pop	{r7, pc}
 802195e:	bf00      	nop

08021960 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021960:	b580      	push	{r7, lr}
 8021962:	b084      	sub	sp, #16
 8021964:	af00      	add	r7, sp, #0
 8021966:	6078      	str	r0, [r7, #4]
 8021968:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 802196a:	2300      	movs	r3, #0
 802196c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802196e:	683b      	ldr	r3, [r7, #0]
 8021970:	781b      	ldrb	r3, [r3, #0]
 8021972:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8021976:	2b40      	cmp	r3, #64	; 0x40
 8021978:	d005      	beq.n	8021986 <USBD_StdItfReq+0x26>
 802197a:	2b40      	cmp	r3, #64	; 0x40
 802197c:	d82f      	bhi.n	80219de <USBD_StdItfReq+0x7e>
 802197e:	2b00      	cmp	r3, #0
 8021980:	d001      	beq.n	8021986 <USBD_StdItfReq+0x26>
 8021982:	2b20      	cmp	r3, #32
 8021984:	d12b      	bne.n	80219de <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8021986:	687b      	ldr	r3, [r7, #4]
 8021988:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802198c:	b2db      	uxtb	r3, r3
 802198e:	3b01      	subs	r3, #1
 8021990:	2b02      	cmp	r3, #2
 8021992:	d81d      	bhi.n	80219d0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8021994:	683b      	ldr	r3, [r7, #0]
 8021996:	889b      	ldrh	r3, [r3, #4]
 8021998:	b2db      	uxtb	r3, r3
 802199a:	2b01      	cmp	r3, #1
 802199c:	d813      	bhi.n	80219c6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 802199e:	687b      	ldr	r3, [r7, #4]
 80219a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80219a4:	689b      	ldr	r3, [r3, #8]
 80219a6:	6839      	ldr	r1, [r7, #0]
 80219a8:	6878      	ldr	r0, [r7, #4]
 80219aa:	4798      	blx	r3
 80219ac:	4603      	mov	r3, r0
 80219ae:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80219b0:	683b      	ldr	r3, [r7, #0]
 80219b2:	88db      	ldrh	r3, [r3, #6]
 80219b4:	2b00      	cmp	r3, #0
 80219b6:	d110      	bne.n	80219da <USBD_StdItfReq+0x7a>
 80219b8:	7bfb      	ldrb	r3, [r7, #15]
 80219ba:	2b00      	cmp	r3, #0
 80219bc:	d10d      	bne.n	80219da <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80219be:	6878      	ldr	r0, [r7, #4]
 80219c0:	f000 fd80 	bl	80224c4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80219c4:	e009      	b.n	80219da <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80219c6:	6839      	ldr	r1, [r7, #0]
 80219c8:	6878      	ldr	r0, [r7, #4]
 80219ca:	f000 fccd 	bl	8022368 <USBD_CtlError>
          break;
 80219ce:	e004      	b.n	80219da <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80219d0:	6839      	ldr	r1, [r7, #0]
 80219d2:	6878      	ldr	r0, [r7, #4]
 80219d4:	f000 fcc8 	bl	8022368 <USBD_CtlError>
          break;
 80219d8:	e000      	b.n	80219dc <USBD_StdItfReq+0x7c>
          break;
 80219da:	bf00      	nop
      }
      break;
 80219dc:	e004      	b.n	80219e8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80219de:	6839      	ldr	r1, [r7, #0]
 80219e0:	6878      	ldr	r0, [r7, #4]
 80219e2:	f000 fcc1 	bl	8022368 <USBD_CtlError>
      break;
 80219e6:	bf00      	nop
  }

  return ret;
 80219e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80219ea:	4618      	mov	r0, r3
 80219ec:	3710      	adds	r7, #16
 80219ee:	46bd      	mov	sp, r7
 80219f0:	bd80      	pop	{r7, pc}

080219f2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80219f2:	b580      	push	{r7, lr}
 80219f4:	b084      	sub	sp, #16
 80219f6:	af00      	add	r7, sp, #0
 80219f8:	6078      	str	r0, [r7, #4]
 80219fa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80219fc:	2300      	movs	r3, #0
 80219fe:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8021a00:	683b      	ldr	r3, [r7, #0]
 8021a02:	889b      	ldrh	r3, [r3, #4]
 8021a04:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8021a06:	683b      	ldr	r3, [r7, #0]
 8021a08:	781b      	ldrb	r3, [r3, #0]
 8021a0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8021a0e:	2b40      	cmp	r3, #64	; 0x40
 8021a10:	d007      	beq.n	8021a22 <USBD_StdEPReq+0x30>
 8021a12:	2b40      	cmp	r3, #64	; 0x40
 8021a14:	f200 8145 	bhi.w	8021ca2 <USBD_StdEPReq+0x2b0>
 8021a18:	2b00      	cmp	r3, #0
 8021a1a:	d00c      	beq.n	8021a36 <USBD_StdEPReq+0x44>
 8021a1c:	2b20      	cmp	r3, #32
 8021a1e:	f040 8140 	bne.w	8021ca2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8021a22:	687b      	ldr	r3, [r7, #4]
 8021a24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021a28:	689b      	ldr	r3, [r3, #8]
 8021a2a:	6839      	ldr	r1, [r7, #0]
 8021a2c:	6878      	ldr	r0, [r7, #4]
 8021a2e:	4798      	blx	r3
 8021a30:	4603      	mov	r3, r0
 8021a32:	73fb      	strb	r3, [r7, #15]
      break;
 8021a34:	e13a      	b.n	8021cac <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8021a36:	683b      	ldr	r3, [r7, #0]
 8021a38:	785b      	ldrb	r3, [r3, #1]
 8021a3a:	2b03      	cmp	r3, #3
 8021a3c:	d007      	beq.n	8021a4e <USBD_StdEPReq+0x5c>
 8021a3e:	2b03      	cmp	r3, #3
 8021a40:	f300 8129 	bgt.w	8021c96 <USBD_StdEPReq+0x2a4>
 8021a44:	2b00      	cmp	r3, #0
 8021a46:	d07f      	beq.n	8021b48 <USBD_StdEPReq+0x156>
 8021a48:	2b01      	cmp	r3, #1
 8021a4a:	d03c      	beq.n	8021ac6 <USBD_StdEPReq+0xd4>
 8021a4c:	e123      	b.n	8021c96 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8021a4e:	687b      	ldr	r3, [r7, #4]
 8021a50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021a54:	b2db      	uxtb	r3, r3
 8021a56:	2b02      	cmp	r3, #2
 8021a58:	d002      	beq.n	8021a60 <USBD_StdEPReq+0x6e>
 8021a5a:	2b03      	cmp	r3, #3
 8021a5c:	d016      	beq.n	8021a8c <USBD_StdEPReq+0x9a>
 8021a5e:	e02c      	b.n	8021aba <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8021a60:	7bbb      	ldrb	r3, [r7, #14]
 8021a62:	2b00      	cmp	r3, #0
 8021a64:	d00d      	beq.n	8021a82 <USBD_StdEPReq+0x90>
 8021a66:	7bbb      	ldrb	r3, [r7, #14]
 8021a68:	2b80      	cmp	r3, #128	; 0x80
 8021a6a:	d00a      	beq.n	8021a82 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8021a6c:	7bbb      	ldrb	r3, [r7, #14]
 8021a6e:	4619      	mov	r1, r3
 8021a70:	6878      	ldr	r0, [r7, #4]
 8021a72:	f001 f940 	bl	8022cf6 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8021a76:	2180      	movs	r1, #128	; 0x80
 8021a78:	6878      	ldr	r0, [r7, #4]
 8021a7a:	f001 f93c 	bl	8022cf6 <USBD_LL_StallEP>
 8021a7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8021a80:	e020      	b.n	8021ac4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8021a82:	6839      	ldr	r1, [r7, #0]
 8021a84:	6878      	ldr	r0, [r7, #4]
 8021a86:	f000 fc6f 	bl	8022368 <USBD_CtlError>
              break;
 8021a8a:	e01b      	b.n	8021ac4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8021a8c:	683b      	ldr	r3, [r7, #0]
 8021a8e:	885b      	ldrh	r3, [r3, #2]
 8021a90:	2b00      	cmp	r3, #0
 8021a92:	d10e      	bne.n	8021ab2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8021a94:	7bbb      	ldrb	r3, [r7, #14]
 8021a96:	2b00      	cmp	r3, #0
 8021a98:	d00b      	beq.n	8021ab2 <USBD_StdEPReq+0xc0>
 8021a9a:	7bbb      	ldrb	r3, [r7, #14]
 8021a9c:	2b80      	cmp	r3, #128	; 0x80
 8021a9e:	d008      	beq.n	8021ab2 <USBD_StdEPReq+0xc0>
 8021aa0:	683b      	ldr	r3, [r7, #0]
 8021aa2:	88db      	ldrh	r3, [r3, #6]
 8021aa4:	2b00      	cmp	r3, #0
 8021aa6:	d104      	bne.n	8021ab2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8021aa8:	7bbb      	ldrb	r3, [r7, #14]
 8021aaa:	4619      	mov	r1, r3
 8021aac:	6878      	ldr	r0, [r7, #4]
 8021aae:	f001 f922 	bl	8022cf6 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8021ab2:	6878      	ldr	r0, [r7, #4]
 8021ab4:	f000 fd06 	bl	80224c4 <USBD_CtlSendStatus>

              break;
 8021ab8:	e004      	b.n	8021ac4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8021aba:	6839      	ldr	r1, [r7, #0]
 8021abc:	6878      	ldr	r0, [r7, #4]
 8021abe:	f000 fc53 	bl	8022368 <USBD_CtlError>
              break;
 8021ac2:	bf00      	nop
          }
          break;
 8021ac4:	e0ec      	b.n	8021ca0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8021ac6:	687b      	ldr	r3, [r7, #4]
 8021ac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021acc:	b2db      	uxtb	r3, r3
 8021ace:	2b02      	cmp	r3, #2
 8021ad0:	d002      	beq.n	8021ad8 <USBD_StdEPReq+0xe6>
 8021ad2:	2b03      	cmp	r3, #3
 8021ad4:	d016      	beq.n	8021b04 <USBD_StdEPReq+0x112>
 8021ad6:	e030      	b.n	8021b3a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8021ad8:	7bbb      	ldrb	r3, [r7, #14]
 8021ada:	2b00      	cmp	r3, #0
 8021adc:	d00d      	beq.n	8021afa <USBD_StdEPReq+0x108>
 8021ade:	7bbb      	ldrb	r3, [r7, #14]
 8021ae0:	2b80      	cmp	r3, #128	; 0x80
 8021ae2:	d00a      	beq.n	8021afa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8021ae4:	7bbb      	ldrb	r3, [r7, #14]
 8021ae6:	4619      	mov	r1, r3
 8021ae8:	6878      	ldr	r0, [r7, #4]
 8021aea:	f001 f904 	bl	8022cf6 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8021aee:	2180      	movs	r1, #128	; 0x80
 8021af0:	6878      	ldr	r0, [r7, #4]
 8021af2:	f001 f900 	bl	8022cf6 <USBD_LL_StallEP>
 8021af6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8021af8:	e025      	b.n	8021b46 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8021afa:	6839      	ldr	r1, [r7, #0]
 8021afc:	6878      	ldr	r0, [r7, #4]
 8021afe:	f000 fc33 	bl	8022368 <USBD_CtlError>
              break;
 8021b02:	e020      	b.n	8021b46 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8021b04:	683b      	ldr	r3, [r7, #0]
 8021b06:	885b      	ldrh	r3, [r3, #2]
 8021b08:	2b00      	cmp	r3, #0
 8021b0a:	d11b      	bne.n	8021b44 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8021b0c:	7bbb      	ldrb	r3, [r7, #14]
 8021b0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8021b12:	2b00      	cmp	r3, #0
 8021b14:	d004      	beq.n	8021b20 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8021b16:	7bbb      	ldrb	r3, [r7, #14]
 8021b18:	4619      	mov	r1, r3
 8021b1a:	6878      	ldr	r0, [r7, #4]
 8021b1c:	f001 f90a 	bl	8022d34 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8021b20:	6878      	ldr	r0, [r7, #4]
 8021b22:	f000 fccf 	bl	80224c4 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8021b26:	687b      	ldr	r3, [r7, #4]
 8021b28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021b2c:	689b      	ldr	r3, [r3, #8]
 8021b2e:	6839      	ldr	r1, [r7, #0]
 8021b30:	6878      	ldr	r0, [r7, #4]
 8021b32:	4798      	blx	r3
 8021b34:	4603      	mov	r3, r0
 8021b36:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8021b38:	e004      	b.n	8021b44 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8021b3a:	6839      	ldr	r1, [r7, #0]
 8021b3c:	6878      	ldr	r0, [r7, #4]
 8021b3e:	f000 fc13 	bl	8022368 <USBD_CtlError>
              break;
 8021b42:	e000      	b.n	8021b46 <USBD_StdEPReq+0x154>
              break;
 8021b44:	bf00      	nop
          }
          break;
 8021b46:	e0ab      	b.n	8021ca0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8021b48:	687b      	ldr	r3, [r7, #4]
 8021b4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021b4e:	b2db      	uxtb	r3, r3
 8021b50:	2b02      	cmp	r3, #2
 8021b52:	d002      	beq.n	8021b5a <USBD_StdEPReq+0x168>
 8021b54:	2b03      	cmp	r3, #3
 8021b56:	d032      	beq.n	8021bbe <USBD_StdEPReq+0x1cc>
 8021b58:	e097      	b.n	8021c8a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8021b5a:	7bbb      	ldrb	r3, [r7, #14]
 8021b5c:	2b00      	cmp	r3, #0
 8021b5e:	d007      	beq.n	8021b70 <USBD_StdEPReq+0x17e>
 8021b60:	7bbb      	ldrb	r3, [r7, #14]
 8021b62:	2b80      	cmp	r3, #128	; 0x80
 8021b64:	d004      	beq.n	8021b70 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8021b66:	6839      	ldr	r1, [r7, #0]
 8021b68:	6878      	ldr	r0, [r7, #4]
 8021b6a:	f000 fbfd 	bl	8022368 <USBD_CtlError>
                break;
 8021b6e:	e091      	b.n	8021c94 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8021b70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8021b74:	2b00      	cmp	r3, #0
 8021b76:	da0b      	bge.n	8021b90 <USBD_StdEPReq+0x19e>
 8021b78:	7bbb      	ldrb	r3, [r7, #14]
 8021b7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8021b7e:	4613      	mov	r3, r2
 8021b80:	009b      	lsls	r3, r3, #2
 8021b82:	4413      	add	r3, r2
 8021b84:	009b      	lsls	r3, r3, #2
 8021b86:	3310      	adds	r3, #16
 8021b88:	687a      	ldr	r2, [r7, #4]
 8021b8a:	4413      	add	r3, r2
 8021b8c:	3304      	adds	r3, #4
 8021b8e:	e00b      	b.n	8021ba8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8021b90:	7bbb      	ldrb	r3, [r7, #14]
 8021b92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8021b96:	4613      	mov	r3, r2
 8021b98:	009b      	lsls	r3, r3, #2
 8021b9a:	4413      	add	r3, r2
 8021b9c:	009b      	lsls	r3, r3, #2
 8021b9e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8021ba2:	687a      	ldr	r2, [r7, #4]
 8021ba4:	4413      	add	r3, r2
 8021ba6:	3304      	adds	r3, #4
 8021ba8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8021baa:	68bb      	ldr	r3, [r7, #8]
 8021bac:	2200      	movs	r2, #0
 8021bae:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8021bb0:	68bb      	ldr	r3, [r7, #8]
 8021bb2:	2202      	movs	r2, #2
 8021bb4:	4619      	mov	r1, r3
 8021bb6:	6878      	ldr	r0, [r7, #4]
 8021bb8:	f000 fc47 	bl	802244a <USBD_CtlSendData>
              break;
 8021bbc:	e06a      	b.n	8021c94 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8021bbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8021bc2:	2b00      	cmp	r3, #0
 8021bc4:	da11      	bge.n	8021bea <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8021bc6:	7bbb      	ldrb	r3, [r7, #14]
 8021bc8:	f003 020f 	and.w	r2, r3, #15
 8021bcc:	6879      	ldr	r1, [r7, #4]
 8021bce:	4613      	mov	r3, r2
 8021bd0:	009b      	lsls	r3, r3, #2
 8021bd2:	4413      	add	r3, r2
 8021bd4:	009b      	lsls	r3, r3, #2
 8021bd6:	440b      	add	r3, r1
 8021bd8:	3324      	adds	r3, #36	; 0x24
 8021bda:	881b      	ldrh	r3, [r3, #0]
 8021bdc:	2b00      	cmp	r3, #0
 8021bde:	d117      	bne.n	8021c10 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8021be0:	6839      	ldr	r1, [r7, #0]
 8021be2:	6878      	ldr	r0, [r7, #4]
 8021be4:	f000 fbc0 	bl	8022368 <USBD_CtlError>
                  break;
 8021be8:	e054      	b.n	8021c94 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8021bea:	7bbb      	ldrb	r3, [r7, #14]
 8021bec:	f003 020f 	and.w	r2, r3, #15
 8021bf0:	6879      	ldr	r1, [r7, #4]
 8021bf2:	4613      	mov	r3, r2
 8021bf4:	009b      	lsls	r3, r3, #2
 8021bf6:	4413      	add	r3, r2
 8021bf8:	009b      	lsls	r3, r3, #2
 8021bfa:	440b      	add	r3, r1
 8021bfc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8021c00:	881b      	ldrh	r3, [r3, #0]
 8021c02:	2b00      	cmp	r3, #0
 8021c04:	d104      	bne.n	8021c10 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8021c06:	6839      	ldr	r1, [r7, #0]
 8021c08:	6878      	ldr	r0, [r7, #4]
 8021c0a:	f000 fbad 	bl	8022368 <USBD_CtlError>
                  break;
 8021c0e:	e041      	b.n	8021c94 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8021c10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8021c14:	2b00      	cmp	r3, #0
 8021c16:	da0b      	bge.n	8021c30 <USBD_StdEPReq+0x23e>
 8021c18:	7bbb      	ldrb	r3, [r7, #14]
 8021c1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8021c1e:	4613      	mov	r3, r2
 8021c20:	009b      	lsls	r3, r3, #2
 8021c22:	4413      	add	r3, r2
 8021c24:	009b      	lsls	r3, r3, #2
 8021c26:	3310      	adds	r3, #16
 8021c28:	687a      	ldr	r2, [r7, #4]
 8021c2a:	4413      	add	r3, r2
 8021c2c:	3304      	adds	r3, #4
 8021c2e:	e00b      	b.n	8021c48 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8021c30:	7bbb      	ldrb	r3, [r7, #14]
 8021c32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8021c36:	4613      	mov	r3, r2
 8021c38:	009b      	lsls	r3, r3, #2
 8021c3a:	4413      	add	r3, r2
 8021c3c:	009b      	lsls	r3, r3, #2
 8021c3e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8021c42:	687a      	ldr	r2, [r7, #4]
 8021c44:	4413      	add	r3, r2
 8021c46:	3304      	adds	r3, #4
 8021c48:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8021c4a:	7bbb      	ldrb	r3, [r7, #14]
 8021c4c:	2b00      	cmp	r3, #0
 8021c4e:	d002      	beq.n	8021c56 <USBD_StdEPReq+0x264>
 8021c50:	7bbb      	ldrb	r3, [r7, #14]
 8021c52:	2b80      	cmp	r3, #128	; 0x80
 8021c54:	d103      	bne.n	8021c5e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8021c56:	68bb      	ldr	r3, [r7, #8]
 8021c58:	2200      	movs	r2, #0
 8021c5a:	601a      	str	r2, [r3, #0]
 8021c5c:	e00e      	b.n	8021c7c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8021c5e:	7bbb      	ldrb	r3, [r7, #14]
 8021c60:	4619      	mov	r1, r3
 8021c62:	6878      	ldr	r0, [r7, #4]
 8021c64:	f001 f885 	bl	8022d72 <USBD_LL_IsStallEP>
 8021c68:	4603      	mov	r3, r0
 8021c6a:	2b00      	cmp	r3, #0
 8021c6c:	d003      	beq.n	8021c76 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8021c6e:	68bb      	ldr	r3, [r7, #8]
 8021c70:	2201      	movs	r2, #1
 8021c72:	601a      	str	r2, [r3, #0]
 8021c74:	e002      	b.n	8021c7c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8021c76:	68bb      	ldr	r3, [r7, #8]
 8021c78:	2200      	movs	r2, #0
 8021c7a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8021c7c:	68bb      	ldr	r3, [r7, #8]
 8021c7e:	2202      	movs	r2, #2
 8021c80:	4619      	mov	r1, r3
 8021c82:	6878      	ldr	r0, [r7, #4]
 8021c84:	f000 fbe1 	bl	802244a <USBD_CtlSendData>
              break;
 8021c88:	e004      	b.n	8021c94 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8021c8a:	6839      	ldr	r1, [r7, #0]
 8021c8c:	6878      	ldr	r0, [r7, #4]
 8021c8e:	f000 fb6b 	bl	8022368 <USBD_CtlError>
              break;
 8021c92:	bf00      	nop
          }
          break;
 8021c94:	e004      	b.n	8021ca0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8021c96:	6839      	ldr	r1, [r7, #0]
 8021c98:	6878      	ldr	r0, [r7, #4]
 8021c9a:	f000 fb65 	bl	8022368 <USBD_CtlError>
          break;
 8021c9e:	bf00      	nop
      }
      break;
 8021ca0:	e004      	b.n	8021cac <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8021ca2:	6839      	ldr	r1, [r7, #0]
 8021ca4:	6878      	ldr	r0, [r7, #4]
 8021ca6:	f000 fb5f 	bl	8022368 <USBD_CtlError>
      break;
 8021caa:	bf00      	nop
  }

  return ret;
 8021cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8021cae:	4618      	mov	r0, r3
 8021cb0:	3710      	adds	r7, #16
 8021cb2:	46bd      	mov	sp, r7
 8021cb4:	bd80      	pop	{r7, pc}
	...

08021cb8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021cb8:	b580      	push	{r7, lr}
 8021cba:	b084      	sub	sp, #16
 8021cbc:	af00      	add	r7, sp, #0
 8021cbe:	6078      	str	r0, [r7, #4]
 8021cc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8021cc2:	2300      	movs	r3, #0
 8021cc4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8021cc6:	2300      	movs	r3, #0
 8021cc8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8021cca:	2300      	movs	r3, #0
 8021ccc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8021cce:	683b      	ldr	r3, [r7, #0]
 8021cd0:	885b      	ldrh	r3, [r3, #2]
 8021cd2:	0a1b      	lsrs	r3, r3, #8
 8021cd4:	b29b      	uxth	r3, r3
 8021cd6:	3b01      	subs	r3, #1
 8021cd8:	2b0e      	cmp	r3, #14
 8021cda:	f200 8152 	bhi.w	8021f82 <USBD_GetDescriptor+0x2ca>
 8021cde:	a201      	add	r2, pc, #4	; (adr r2, 8021ce4 <USBD_GetDescriptor+0x2c>)
 8021ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021ce4:	08021d55 	.word	0x08021d55
 8021ce8:	08021d6d 	.word	0x08021d6d
 8021cec:	08021dad 	.word	0x08021dad
 8021cf0:	08021f83 	.word	0x08021f83
 8021cf4:	08021f83 	.word	0x08021f83
 8021cf8:	08021f23 	.word	0x08021f23
 8021cfc:	08021f4f 	.word	0x08021f4f
 8021d00:	08021f83 	.word	0x08021f83
 8021d04:	08021f83 	.word	0x08021f83
 8021d08:	08021f83 	.word	0x08021f83
 8021d0c:	08021f83 	.word	0x08021f83
 8021d10:	08021f83 	.word	0x08021f83
 8021d14:	08021f83 	.word	0x08021f83
 8021d18:	08021f83 	.word	0x08021f83
 8021d1c:	08021d21 	.word	0x08021d21
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8021d20:	687b      	ldr	r3, [r7, #4]
 8021d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021d26:	69db      	ldr	r3, [r3, #28]
 8021d28:	2b00      	cmp	r3, #0
 8021d2a:	d00b      	beq.n	8021d44 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8021d2c:	687b      	ldr	r3, [r7, #4]
 8021d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021d32:	69db      	ldr	r3, [r3, #28]
 8021d34:	687a      	ldr	r2, [r7, #4]
 8021d36:	7c12      	ldrb	r2, [r2, #16]
 8021d38:	f107 0108 	add.w	r1, r7, #8
 8021d3c:	4610      	mov	r0, r2
 8021d3e:	4798      	blx	r3
 8021d40:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8021d42:	e126      	b.n	8021f92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8021d44:	6839      	ldr	r1, [r7, #0]
 8021d46:	6878      	ldr	r0, [r7, #4]
 8021d48:	f000 fb0e 	bl	8022368 <USBD_CtlError>
        err++;
 8021d4c:	7afb      	ldrb	r3, [r7, #11]
 8021d4e:	3301      	adds	r3, #1
 8021d50:	72fb      	strb	r3, [r7, #11]
      break;
 8021d52:	e11e      	b.n	8021f92 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8021d54:	687b      	ldr	r3, [r7, #4]
 8021d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021d5a:	681b      	ldr	r3, [r3, #0]
 8021d5c:	687a      	ldr	r2, [r7, #4]
 8021d5e:	7c12      	ldrb	r2, [r2, #16]
 8021d60:	f107 0108 	add.w	r1, r7, #8
 8021d64:	4610      	mov	r0, r2
 8021d66:	4798      	blx	r3
 8021d68:	60f8      	str	r0, [r7, #12]
      break;
 8021d6a:	e112      	b.n	8021f92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021d6c:	687b      	ldr	r3, [r7, #4]
 8021d6e:	7c1b      	ldrb	r3, [r3, #16]
 8021d70:	2b00      	cmp	r3, #0
 8021d72:	d10d      	bne.n	8021d90 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8021d74:	687b      	ldr	r3, [r7, #4]
 8021d76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021d7c:	f107 0208 	add.w	r2, r7, #8
 8021d80:	4610      	mov	r0, r2
 8021d82:	4798      	blx	r3
 8021d84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8021d86:	68fb      	ldr	r3, [r7, #12]
 8021d88:	3301      	adds	r3, #1
 8021d8a:	2202      	movs	r2, #2
 8021d8c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8021d8e:	e100      	b.n	8021f92 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8021d90:	687b      	ldr	r3, [r7, #4]
 8021d92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021d98:	f107 0208 	add.w	r2, r7, #8
 8021d9c:	4610      	mov	r0, r2
 8021d9e:	4798      	blx	r3
 8021da0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8021da2:	68fb      	ldr	r3, [r7, #12]
 8021da4:	3301      	adds	r3, #1
 8021da6:	2202      	movs	r2, #2
 8021da8:	701a      	strb	r2, [r3, #0]
      break;
 8021daa:	e0f2      	b.n	8021f92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8021dac:	683b      	ldr	r3, [r7, #0]
 8021dae:	885b      	ldrh	r3, [r3, #2]
 8021db0:	b2db      	uxtb	r3, r3
 8021db2:	2b05      	cmp	r3, #5
 8021db4:	f200 80ac 	bhi.w	8021f10 <USBD_GetDescriptor+0x258>
 8021db8:	a201      	add	r2, pc, #4	; (adr r2, 8021dc0 <USBD_GetDescriptor+0x108>)
 8021dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021dbe:	bf00      	nop
 8021dc0:	08021dd9 	.word	0x08021dd9
 8021dc4:	08021e0d 	.word	0x08021e0d
 8021dc8:	08021e41 	.word	0x08021e41
 8021dcc:	08021e75 	.word	0x08021e75
 8021dd0:	08021ea9 	.word	0x08021ea9
 8021dd4:	08021edd 	.word	0x08021edd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8021dd8:	687b      	ldr	r3, [r7, #4]
 8021dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021dde:	685b      	ldr	r3, [r3, #4]
 8021de0:	2b00      	cmp	r3, #0
 8021de2:	d00b      	beq.n	8021dfc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8021de4:	687b      	ldr	r3, [r7, #4]
 8021de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021dea:	685b      	ldr	r3, [r3, #4]
 8021dec:	687a      	ldr	r2, [r7, #4]
 8021dee:	7c12      	ldrb	r2, [r2, #16]
 8021df0:	f107 0108 	add.w	r1, r7, #8
 8021df4:	4610      	mov	r0, r2
 8021df6:	4798      	blx	r3
 8021df8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021dfa:	e091      	b.n	8021f20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021dfc:	6839      	ldr	r1, [r7, #0]
 8021dfe:	6878      	ldr	r0, [r7, #4]
 8021e00:	f000 fab2 	bl	8022368 <USBD_CtlError>
            err++;
 8021e04:	7afb      	ldrb	r3, [r7, #11]
 8021e06:	3301      	adds	r3, #1
 8021e08:	72fb      	strb	r3, [r7, #11]
          break;
 8021e0a:	e089      	b.n	8021f20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8021e0c:	687b      	ldr	r3, [r7, #4]
 8021e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021e12:	689b      	ldr	r3, [r3, #8]
 8021e14:	2b00      	cmp	r3, #0
 8021e16:	d00b      	beq.n	8021e30 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8021e18:	687b      	ldr	r3, [r7, #4]
 8021e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021e1e:	689b      	ldr	r3, [r3, #8]
 8021e20:	687a      	ldr	r2, [r7, #4]
 8021e22:	7c12      	ldrb	r2, [r2, #16]
 8021e24:	f107 0108 	add.w	r1, r7, #8
 8021e28:	4610      	mov	r0, r2
 8021e2a:	4798      	blx	r3
 8021e2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021e2e:	e077      	b.n	8021f20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021e30:	6839      	ldr	r1, [r7, #0]
 8021e32:	6878      	ldr	r0, [r7, #4]
 8021e34:	f000 fa98 	bl	8022368 <USBD_CtlError>
            err++;
 8021e38:	7afb      	ldrb	r3, [r7, #11]
 8021e3a:	3301      	adds	r3, #1
 8021e3c:	72fb      	strb	r3, [r7, #11]
          break;
 8021e3e:	e06f      	b.n	8021f20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8021e40:	687b      	ldr	r3, [r7, #4]
 8021e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021e46:	68db      	ldr	r3, [r3, #12]
 8021e48:	2b00      	cmp	r3, #0
 8021e4a:	d00b      	beq.n	8021e64 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8021e4c:	687b      	ldr	r3, [r7, #4]
 8021e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021e52:	68db      	ldr	r3, [r3, #12]
 8021e54:	687a      	ldr	r2, [r7, #4]
 8021e56:	7c12      	ldrb	r2, [r2, #16]
 8021e58:	f107 0108 	add.w	r1, r7, #8
 8021e5c:	4610      	mov	r0, r2
 8021e5e:	4798      	blx	r3
 8021e60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021e62:	e05d      	b.n	8021f20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021e64:	6839      	ldr	r1, [r7, #0]
 8021e66:	6878      	ldr	r0, [r7, #4]
 8021e68:	f000 fa7e 	bl	8022368 <USBD_CtlError>
            err++;
 8021e6c:	7afb      	ldrb	r3, [r7, #11]
 8021e6e:	3301      	adds	r3, #1
 8021e70:	72fb      	strb	r3, [r7, #11]
          break;
 8021e72:	e055      	b.n	8021f20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8021e74:	687b      	ldr	r3, [r7, #4]
 8021e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021e7a:	691b      	ldr	r3, [r3, #16]
 8021e7c:	2b00      	cmp	r3, #0
 8021e7e:	d00b      	beq.n	8021e98 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8021e80:	687b      	ldr	r3, [r7, #4]
 8021e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021e86:	691b      	ldr	r3, [r3, #16]
 8021e88:	687a      	ldr	r2, [r7, #4]
 8021e8a:	7c12      	ldrb	r2, [r2, #16]
 8021e8c:	f107 0108 	add.w	r1, r7, #8
 8021e90:	4610      	mov	r0, r2
 8021e92:	4798      	blx	r3
 8021e94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021e96:	e043      	b.n	8021f20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021e98:	6839      	ldr	r1, [r7, #0]
 8021e9a:	6878      	ldr	r0, [r7, #4]
 8021e9c:	f000 fa64 	bl	8022368 <USBD_CtlError>
            err++;
 8021ea0:	7afb      	ldrb	r3, [r7, #11]
 8021ea2:	3301      	adds	r3, #1
 8021ea4:	72fb      	strb	r3, [r7, #11]
          break;
 8021ea6:	e03b      	b.n	8021f20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8021ea8:	687b      	ldr	r3, [r7, #4]
 8021eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021eae:	695b      	ldr	r3, [r3, #20]
 8021eb0:	2b00      	cmp	r3, #0
 8021eb2:	d00b      	beq.n	8021ecc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8021eb4:	687b      	ldr	r3, [r7, #4]
 8021eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021eba:	695b      	ldr	r3, [r3, #20]
 8021ebc:	687a      	ldr	r2, [r7, #4]
 8021ebe:	7c12      	ldrb	r2, [r2, #16]
 8021ec0:	f107 0108 	add.w	r1, r7, #8
 8021ec4:	4610      	mov	r0, r2
 8021ec6:	4798      	blx	r3
 8021ec8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021eca:	e029      	b.n	8021f20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021ecc:	6839      	ldr	r1, [r7, #0]
 8021ece:	6878      	ldr	r0, [r7, #4]
 8021ed0:	f000 fa4a 	bl	8022368 <USBD_CtlError>
            err++;
 8021ed4:	7afb      	ldrb	r3, [r7, #11]
 8021ed6:	3301      	adds	r3, #1
 8021ed8:	72fb      	strb	r3, [r7, #11]
          break;
 8021eda:	e021      	b.n	8021f20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8021edc:	687b      	ldr	r3, [r7, #4]
 8021ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021ee2:	699b      	ldr	r3, [r3, #24]
 8021ee4:	2b00      	cmp	r3, #0
 8021ee6:	d00b      	beq.n	8021f00 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8021ee8:	687b      	ldr	r3, [r7, #4]
 8021eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021eee:	699b      	ldr	r3, [r3, #24]
 8021ef0:	687a      	ldr	r2, [r7, #4]
 8021ef2:	7c12      	ldrb	r2, [r2, #16]
 8021ef4:	f107 0108 	add.w	r1, r7, #8
 8021ef8:	4610      	mov	r0, r2
 8021efa:	4798      	blx	r3
 8021efc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021efe:	e00f      	b.n	8021f20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021f00:	6839      	ldr	r1, [r7, #0]
 8021f02:	6878      	ldr	r0, [r7, #4]
 8021f04:	f000 fa30 	bl	8022368 <USBD_CtlError>
            err++;
 8021f08:	7afb      	ldrb	r3, [r7, #11]
 8021f0a:	3301      	adds	r3, #1
 8021f0c:	72fb      	strb	r3, [r7, #11]
          break;
 8021f0e:	e007      	b.n	8021f20 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8021f10:	6839      	ldr	r1, [r7, #0]
 8021f12:	6878      	ldr	r0, [r7, #4]
 8021f14:	f000 fa28 	bl	8022368 <USBD_CtlError>
          err++;
 8021f18:	7afb      	ldrb	r3, [r7, #11]
 8021f1a:	3301      	adds	r3, #1
 8021f1c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8021f1e:	bf00      	nop
      }
      break;
 8021f20:	e037      	b.n	8021f92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021f22:	687b      	ldr	r3, [r7, #4]
 8021f24:	7c1b      	ldrb	r3, [r3, #16]
 8021f26:	2b00      	cmp	r3, #0
 8021f28:	d109      	bne.n	8021f3e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8021f2a:	687b      	ldr	r3, [r7, #4]
 8021f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021f32:	f107 0208 	add.w	r2, r7, #8
 8021f36:	4610      	mov	r0, r2
 8021f38:	4798      	blx	r3
 8021f3a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8021f3c:	e029      	b.n	8021f92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8021f3e:	6839      	ldr	r1, [r7, #0]
 8021f40:	6878      	ldr	r0, [r7, #4]
 8021f42:	f000 fa11 	bl	8022368 <USBD_CtlError>
        err++;
 8021f46:	7afb      	ldrb	r3, [r7, #11]
 8021f48:	3301      	adds	r3, #1
 8021f4a:	72fb      	strb	r3, [r7, #11]
      break;
 8021f4c:	e021      	b.n	8021f92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021f4e:	687b      	ldr	r3, [r7, #4]
 8021f50:	7c1b      	ldrb	r3, [r3, #16]
 8021f52:	2b00      	cmp	r3, #0
 8021f54:	d10d      	bne.n	8021f72 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8021f56:	687b      	ldr	r3, [r7, #4]
 8021f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021f5e:	f107 0208 	add.w	r2, r7, #8
 8021f62:	4610      	mov	r0, r2
 8021f64:	4798      	blx	r3
 8021f66:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8021f68:	68fb      	ldr	r3, [r7, #12]
 8021f6a:	3301      	adds	r3, #1
 8021f6c:	2207      	movs	r2, #7
 8021f6e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8021f70:	e00f      	b.n	8021f92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8021f72:	6839      	ldr	r1, [r7, #0]
 8021f74:	6878      	ldr	r0, [r7, #4]
 8021f76:	f000 f9f7 	bl	8022368 <USBD_CtlError>
        err++;
 8021f7a:	7afb      	ldrb	r3, [r7, #11]
 8021f7c:	3301      	adds	r3, #1
 8021f7e:	72fb      	strb	r3, [r7, #11]
      break;
 8021f80:	e007      	b.n	8021f92 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8021f82:	6839      	ldr	r1, [r7, #0]
 8021f84:	6878      	ldr	r0, [r7, #4]
 8021f86:	f000 f9ef 	bl	8022368 <USBD_CtlError>
      err++;
 8021f8a:	7afb      	ldrb	r3, [r7, #11]
 8021f8c:	3301      	adds	r3, #1
 8021f8e:	72fb      	strb	r3, [r7, #11]
      break;
 8021f90:	bf00      	nop
  }

  if (err != 0U)
 8021f92:	7afb      	ldrb	r3, [r7, #11]
 8021f94:	2b00      	cmp	r3, #0
 8021f96:	d11e      	bne.n	8021fd6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8021f98:	683b      	ldr	r3, [r7, #0]
 8021f9a:	88db      	ldrh	r3, [r3, #6]
 8021f9c:	2b00      	cmp	r3, #0
 8021f9e:	d016      	beq.n	8021fce <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8021fa0:	893b      	ldrh	r3, [r7, #8]
 8021fa2:	2b00      	cmp	r3, #0
 8021fa4:	d00e      	beq.n	8021fc4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8021fa6:	683b      	ldr	r3, [r7, #0]
 8021fa8:	88da      	ldrh	r2, [r3, #6]
 8021faa:	893b      	ldrh	r3, [r7, #8]
 8021fac:	4293      	cmp	r3, r2
 8021fae:	bf28      	it	cs
 8021fb0:	4613      	movcs	r3, r2
 8021fb2:	b29b      	uxth	r3, r3
 8021fb4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8021fb6:	893b      	ldrh	r3, [r7, #8]
 8021fb8:	461a      	mov	r2, r3
 8021fba:	68f9      	ldr	r1, [r7, #12]
 8021fbc:	6878      	ldr	r0, [r7, #4]
 8021fbe:	f000 fa44 	bl	802244a <USBD_CtlSendData>
 8021fc2:	e009      	b.n	8021fd8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8021fc4:	6839      	ldr	r1, [r7, #0]
 8021fc6:	6878      	ldr	r0, [r7, #4]
 8021fc8:	f000 f9ce 	bl	8022368 <USBD_CtlError>
 8021fcc:	e004      	b.n	8021fd8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8021fce:	6878      	ldr	r0, [r7, #4]
 8021fd0:	f000 fa78 	bl	80224c4 <USBD_CtlSendStatus>
 8021fd4:	e000      	b.n	8021fd8 <USBD_GetDescriptor+0x320>
    return;
 8021fd6:	bf00      	nop
  }
}
 8021fd8:	3710      	adds	r7, #16
 8021fda:	46bd      	mov	sp, r7
 8021fdc:	bd80      	pop	{r7, pc}
 8021fde:	bf00      	nop

08021fe0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021fe0:	b580      	push	{r7, lr}
 8021fe2:	b084      	sub	sp, #16
 8021fe4:	af00      	add	r7, sp, #0
 8021fe6:	6078      	str	r0, [r7, #4]
 8021fe8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8021fea:	683b      	ldr	r3, [r7, #0]
 8021fec:	889b      	ldrh	r3, [r3, #4]
 8021fee:	2b00      	cmp	r3, #0
 8021ff0:	d131      	bne.n	8022056 <USBD_SetAddress+0x76>
 8021ff2:	683b      	ldr	r3, [r7, #0]
 8021ff4:	88db      	ldrh	r3, [r3, #6]
 8021ff6:	2b00      	cmp	r3, #0
 8021ff8:	d12d      	bne.n	8022056 <USBD_SetAddress+0x76>
 8021ffa:	683b      	ldr	r3, [r7, #0]
 8021ffc:	885b      	ldrh	r3, [r3, #2]
 8021ffe:	2b7f      	cmp	r3, #127	; 0x7f
 8022000:	d829      	bhi.n	8022056 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8022002:	683b      	ldr	r3, [r7, #0]
 8022004:	885b      	ldrh	r3, [r3, #2]
 8022006:	b2db      	uxtb	r3, r3
 8022008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802200c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802200e:	687b      	ldr	r3, [r7, #4]
 8022010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8022014:	b2db      	uxtb	r3, r3
 8022016:	2b03      	cmp	r3, #3
 8022018:	d104      	bne.n	8022024 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 802201a:	6839      	ldr	r1, [r7, #0]
 802201c:	6878      	ldr	r0, [r7, #4]
 802201e:	f000 f9a3 	bl	8022368 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8022022:	e01d      	b.n	8022060 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8022024:	687b      	ldr	r3, [r7, #4]
 8022026:	7bfa      	ldrb	r2, [r7, #15]
 8022028:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 802202c:	7bfb      	ldrb	r3, [r7, #15]
 802202e:	4619      	mov	r1, r3
 8022030:	6878      	ldr	r0, [r7, #4]
 8022032:	f000 feca 	bl	8022dca <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8022036:	6878      	ldr	r0, [r7, #4]
 8022038:	f000 fa44 	bl	80224c4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 802203c:	7bfb      	ldrb	r3, [r7, #15]
 802203e:	2b00      	cmp	r3, #0
 8022040:	d004      	beq.n	802204c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8022042:	687b      	ldr	r3, [r7, #4]
 8022044:	2202      	movs	r2, #2
 8022046:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802204a:	e009      	b.n	8022060 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 802204c:	687b      	ldr	r3, [r7, #4]
 802204e:	2201      	movs	r2, #1
 8022050:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8022054:	e004      	b.n	8022060 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8022056:	6839      	ldr	r1, [r7, #0]
 8022058:	6878      	ldr	r0, [r7, #4]
 802205a:	f000 f985 	bl	8022368 <USBD_CtlError>
  }
}
 802205e:	bf00      	nop
 8022060:	bf00      	nop
 8022062:	3710      	adds	r7, #16
 8022064:	46bd      	mov	sp, r7
 8022066:	bd80      	pop	{r7, pc}

08022068 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8022068:	b580      	push	{r7, lr}
 802206a:	b084      	sub	sp, #16
 802206c:	af00      	add	r7, sp, #0
 802206e:	6078      	str	r0, [r7, #4]
 8022070:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8022072:	2300      	movs	r3, #0
 8022074:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8022076:	683b      	ldr	r3, [r7, #0]
 8022078:	885b      	ldrh	r3, [r3, #2]
 802207a:	b2da      	uxtb	r2, r3
 802207c:	4b4c      	ldr	r3, [pc, #304]	; (80221b0 <USBD_SetConfig+0x148>)
 802207e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8022080:	4b4b      	ldr	r3, [pc, #300]	; (80221b0 <USBD_SetConfig+0x148>)
 8022082:	781b      	ldrb	r3, [r3, #0]
 8022084:	2b01      	cmp	r3, #1
 8022086:	d905      	bls.n	8022094 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8022088:	6839      	ldr	r1, [r7, #0]
 802208a:	6878      	ldr	r0, [r7, #4]
 802208c:	f000 f96c 	bl	8022368 <USBD_CtlError>
    return USBD_FAIL;
 8022090:	2303      	movs	r3, #3
 8022092:	e088      	b.n	80221a6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8022094:	687b      	ldr	r3, [r7, #4]
 8022096:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802209a:	b2db      	uxtb	r3, r3
 802209c:	2b02      	cmp	r3, #2
 802209e:	d002      	beq.n	80220a6 <USBD_SetConfig+0x3e>
 80220a0:	2b03      	cmp	r3, #3
 80220a2:	d025      	beq.n	80220f0 <USBD_SetConfig+0x88>
 80220a4:	e071      	b.n	802218a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80220a6:	4b42      	ldr	r3, [pc, #264]	; (80221b0 <USBD_SetConfig+0x148>)
 80220a8:	781b      	ldrb	r3, [r3, #0]
 80220aa:	2b00      	cmp	r3, #0
 80220ac:	d01c      	beq.n	80220e8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80220ae:	4b40      	ldr	r3, [pc, #256]	; (80221b0 <USBD_SetConfig+0x148>)
 80220b0:	781b      	ldrb	r3, [r3, #0]
 80220b2:	461a      	mov	r2, r3
 80220b4:	687b      	ldr	r3, [r7, #4]
 80220b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80220b8:	4b3d      	ldr	r3, [pc, #244]	; (80221b0 <USBD_SetConfig+0x148>)
 80220ba:	781b      	ldrb	r3, [r3, #0]
 80220bc:	4619      	mov	r1, r3
 80220be:	6878      	ldr	r0, [r7, #4]
 80220c0:	f7ff f91f 	bl	8021302 <USBD_SetClassConfig>
 80220c4:	4603      	mov	r3, r0
 80220c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80220c8:	7bfb      	ldrb	r3, [r7, #15]
 80220ca:	2b00      	cmp	r3, #0
 80220cc:	d004      	beq.n	80220d8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80220ce:	6839      	ldr	r1, [r7, #0]
 80220d0:	6878      	ldr	r0, [r7, #4]
 80220d2:	f000 f949 	bl	8022368 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80220d6:	e065      	b.n	80221a4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80220d8:	6878      	ldr	r0, [r7, #4]
 80220da:	f000 f9f3 	bl	80224c4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80220de:	687b      	ldr	r3, [r7, #4]
 80220e0:	2203      	movs	r2, #3
 80220e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80220e6:	e05d      	b.n	80221a4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80220e8:	6878      	ldr	r0, [r7, #4]
 80220ea:	f000 f9eb 	bl	80224c4 <USBD_CtlSendStatus>
      break;
 80220ee:	e059      	b.n	80221a4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80220f0:	4b2f      	ldr	r3, [pc, #188]	; (80221b0 <USBD_SetConfig+0x148>)
 80220f2:	781b      	ldrb	r3, [r3, #0]
 80220f4:	2b00      	cmp	r3, #0
 80220f6:	d112      	bne.n	802211e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80220f8:	687b      	ldr	r3, [r7, #4]
 80220fa:	2202      	movs	r2, #2
 80220fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8022100:	4b2b      	ldr	r3, [pc, #172]	; (80221b0 <USBD_SetConfig+0x148>)
 8022102:	781b      	ldrb	r3, [r3, #0]
 8022104:	461a      	mov	r2, r3
 8022106:	687b      	ldr	r3, [r7, #4]
 8022108:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 802210a:	4b29      	ldr	r3, [pc, #164]	; (80221b0 <USBD_SetConfig+0x148>)
 802210c:	781b      	ldrb	r3, [r3, #0]
 802210e:	4619      	mov	r1, r3
 8022110:	6878      	ldr	r0, [r7, #4]
 8022112:	f7ff f912 	bl	802133a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8022116:	6878      	ldr	r0, [r7, #4]
 8022118:	f000 f9d4 	bl	80224c4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 802211c:	e042      	b.n	80221a4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 802211e:	4b24      	ldr	r3, [pc, #144]	; (80221b0 <USBD_SetConfig+0x148>)
 8022120:	781b      	ldrb	r3, [r3, #0]
 8022122:	461a      	mov	r2, r3
 8022124:	687b      	ldr	r3, [r7, #4]
 8022126:	685b      	ldr	r3, [r3, #4]
 8022128:	429a      	cmp	r2, r3
 802212a:	d02a      	beq.n	8022182 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 802212c:	687b      	ldr	r3, [r7, #4]
 802212e:	685b      	ldr	r3, [r3, #4]
 8022130:	b2db      	uxtb	r3, r3
 8022132:	4619      	mov	r1, r3
 8022134:	6878      	ldr	r0, [r7, #4]
 8022136:	f7ff f900 	bl	802133a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 802213a:	4b1d      	ldr	r3, [pc, #116]	; (80221b0 <USBD_SetConfig+0x148>)
 802213c:	781b      	ldrb	r3, [r3, #0]
 802213e:	461a      	mov	r2, r3
 8022140:	687b      	ldr	r3, [r7, #4]
 8022142:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8022144:	4b1a      	ldr	r3, [pc, #104]	; (80221b0 <USBD_SetConfig+0x148>)
 8022146:	781b      	ldrb	r3, [r3, #0]
 8022148:	4619      	mov	r1, r3
 802214a:	6878      	ldr	r0, [r7, #4]
 802214c:	f7ff f8d9 	bl	8021302 <USBD_SetClassConfig>
 8022150:	4603      	mov	r3, r0
 8022152:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8022154:	7bfb      	ldrb	r3, [r7, #15]
 8022156:	2b00      	cmp	r3, #0
 8022158:	d00f      	beq.n	802217a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 802215a:	6839      	ldr	r1, [r7, #0]
 802215c:	6878      	ldr	r0, [r7, #4]
 802215e:	f000 f903 	bl	8022368 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8022162:	687b      	ldr	r3, [r7, #4]
 8022164:	685b      	ldr	r3, [r3, #4]
 8022166:	b2db      	uxtb	r3, r3
 8022168:	4619      	mov	r1, r3
 802216a:	6878      	ldr	r0, [r7, #4]
 802216c:	f7ff f8e5 	bl	802133a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8022170:	687b      	ldr	r3, [r7, #4]
 8022172:	2202      	movs	r2, #2
 8022174:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8022178:	e014      	b.n	80221a4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 802217a:	6878      	ldr	r0, [r7, #4]
 802217c:	f000 f9a2 	bl	80224c4 <USBD_CtlSendStatus>
      break;
 8022180:	e010      	b.n	80221a4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8022182:	6878      	ldr	r0, [r7, #4]
 8022184:	f000 f99e 	bl	80224c4 <USBD_CtlSendStatus>
      break;
 8022188:	e00c      	b.n	80221a4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 802218a:	6839      	ldr	r1, [r7, #0]
 802218c:	6878      	ldr	r0, [r7, #4]
 802218e:	f000 f8eb 	bl	8022368 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8022192:	4b07      	ldr	r3, [pc, #28]	; (80221b0 <USBD_SetConfig+0x148>)
 8022194:	781b      	ldrb	r3, [r3, #0]
 8022196:	4619      	mov	r1, r3
 8022198:	6878      	ldr	r0, [r7, #4]
 802219a:	f7ff f8ce 	bl	802133a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 802219e:	2303      	movs	r3, #3
 80221a0:	73fb      	strb	r3, [r7, #15]
      break;
 80221a2:	bf00      	nop
  }

  return ret;
 80221a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80221a6:	4618      	mov	r0, r3
 80221a8:	3710      	adds	r7, #16
 80221aa:	46bd      	mov	sp, r7
 80221ac:	bd80      	pop	{r7, pc}
 80221ae:	bf00      	nop
 80221b0:	200007b4 	.word	0x200007b4

080221b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80221b4:	b580      	push	{r7, lr}
 80221b6:	b082      	sub	sp, #8
 80221b8:	af00      	add	r7, sp, #0
 80221ba:	6078      	str	r0, [r7, #4]
 80221bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80221be:	683b      	ldr	r3, [r7, #0]
 80221c0:	88db      	ldrh	r3, [r3, #6]
 80221c2:	2b01      	cmp	r3, #1
 80221c4:	d004      	beq.n	80221d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80221c6:	6839      	ldr	r1, [r7, #0]
 80221c8:	6878      	ldr	r0, [r7, #4]
 80221ca:	f000 f8cd 	bl	8022368 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80221ce:	e023      	b.n	8022218 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80221d0:	687b      	ldr	r3, [r7, #4]
 80221d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80221d6:	b2db      	uxtb	r3, r3
 80221d8:	2b02      	cmp	r3, #2
 80221da:	dc02      	bgt.n	80221e2 <USBD_GetConfig+0x2e>
 80221dc:	2b00      	cmp	r3, #0
 80221de:	dc03      	bgt.n	80221e8 <USBD_GetConfig+0x34>
 80221e0:	e015      	b.n	802220e <USBD_GetConfig+0x5a>
 80221e2:	2b03      	cmp	r3, #3
 80221e4:	d00b      	beq.n	80221fe <USBD_GetConfig+0x4a>
 80221e6:	e012      	b.n	802220e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80221e8:	687b      	ldr	r3, [r7, #4]
 80221ea:	2200      	movs	r2, #0
 80221ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80221ee:	687b      	ldr	r3, [r7, #4]
 80221f0:	3308      	adds	r3, #8
 80221f2:	2201      	movs	r2, #1
 80221f4:	4619      	mov	r1, r3
 80221f6:	6878      	ldr	r0, [r7, #4]
 80221f8:	f000 f927 	bl	802244a <USBD_CtlSendData>
        break;
 80221fc:	e00c      	b.n	8022218 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80221fe:	687b      	ldr	r3, [r7, #4]
 8022200:	3304      	adds	r3, #4
 8022202:	2201      	movs	r2, #1
 8022204:	4619      	mov	r1, r3
 8022206:	6878      	ldr	r0, [r7, #4]
 8022208:	f000 f91f 	bl	802244a <USBD_CtlSendData>
        break;
 802220c:	e004      	b.n	8022218 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 802220e:	6839      	ldr	r1, [r7, #0]
 8022210:	6878      	ldr	r0, [r7, #4]
 8022212:	f000 f8a9 	bl	8022368 <USBD_CtlError>
        break;
 8022216:	bf00      	nop
}
 8022218:	bf00      	nop
 802221a:	3708      	adds	r7, #8
 802221c:	46bd      	mov	sp, r7
 802221e:	bd80      	pop	{r7, pc}

08022220 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8022220:	b580      	push	{r7, lr}
 8022222:	b082      	sub	sp, #8
 8022224:	af00      	add	r7, sp, #0
 8022226:	6078      	str	r0, [r7, #4]
 8022228:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 802222a:	687b      	ldr	r3, [r7, #4]
 802222c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8022230:	b2db      	uxtb	r3, r3
 8022232:	3b01      	subs	r3, #1
 8022234:	2b02      	cmp	r3, #2
 8022236:	d81e      	bhi.n	8022276 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8022238:	683b      	ldr	r3, [r7, #0]
 802223a:	88db      	ldrh	r3, [r3, #6]
 802223c:	2b02      	cmp	r3, #2
 802223e:	d004      	beq.n	802224a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8022240:	6839      	ldr	r1, [r7, #0]
 8022242:	6878      	ldr	r0, [r7, #4]
 8022244:	f000 f890 	bl	8022368 <USBD_CtlError>
        break;
 8022248:	e01a      	b.n	8022280 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 802224a:	687b      	ldr	r3, [r7, #4]
 802224c:	2201      	movs	r2, #1
 802224e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8022250:	687b      	ldr	r3, [r7, #4]
 8022252:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8022256:	2b00      	cmp	r3, #0
 8022258:	d005      	beq.n	8022266 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 802225a:	687b      	ldr	r3, [r7, #4]
 802225c:	68db      	ldr	r3, [r3, #12]
 802225e:	f043 0202 	orr.w	r2, r3, #2
 8022262:	687b      	ldr	r3, [r7, #4]
 8022264:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8022266:	687b      	ldr	r3, [r7, #4]
 8022268:	330c      	adds	r3, #12
 802226a:	2202      	movs	r2, #2
 802226c:	4619      	mov	r1, r3
 802226e:	6878      	ldr	r0, [r7, #4]
 8022270:	f000 f8eb 	bl	802244a <USBD_CtlSendData>
      break;
 8022274:	e004      	b.n	8022280 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8022276:	6839      	ldr	r1, [r7, #0]
 8022278:	6878      	ldr	r0, [r7, #4]
 802227a:	f000 f875 	bl	8022368 <USBD_CtlError>
      break;
 802227e:	bf00      	nop
  }
}
 8022280:	bf00      	nop
 8022282:	3708      	adds	r7, #8
 8022284:	46bd      	mov	sp, r7
 8022286:	bd80      	pop	{r7, pc}

08022288 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8022288:	b580      	push	{r7, lr}
 802228a:	b082      	sub	sp, #8
 802228c:	af00      	add	r7, sp, #0
 802228e:	6078      	str	r0, [r7, #4]
 8022290:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8022292:	683b      	ldr	r3, [r7, #0]
 8022294:	885b      	ldrh	r3, [r3, #2]
 8022296:	2b01      	cmp	r3, #1
 8022298:	d106      	bne.n	80222a8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 802229a:	687b      	ldr	r3, [r7, #4]
 802229c:	2201      	movs	r2, #1
 802229e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80222a2:	6878      	ldr	r0, [r7, #4]
 80222a4:	f000 f90e 	bl	80224c4 <USBD_CtlSendStatus>
  }
}
 80222a8:	bf00      	nop
 80222aa:	3708      	adds	r7, #8
 80222ac:	46bd      	mov	sp, r7
 80222ae:	bd80      	pop	{r7, pc}

080222b0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80222b0:	b580      	push	{r7, lr}
 80222b2:	b082      	sub	sp, #8
 80222b4:	af00      	add	r7, sp, #0
 80222b6:	6078      	str	r0, [r7, #4]
 80222b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80222ba:	687b      	ldr	r3, [r7, #4]
 80222bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80222c0:	b2db      	uxtb	r3, r3
 80222c2:	3b01      	subs	r3, #1
 80222c4:	2b02      	cmp	r3, #2
 80222c6:	d80b      	bhi.n	80222e0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80222c8:	683b      	ldr	r3, [r7, #0]
 80222ca:	885b      	ldrh	r3, [r3, #2]
 80222cc:	2b01      	cmp	r3, #1
 80222ce:	d10c      	bne.n	80222ea <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80222d0:	687b      	ldr	r3, [r7, #4]
 80222d2:	2200      	movs	r2, #0
 80222d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80222d8:	6878      	ldr	r0, [r7, #4]
 80222da:	f000 f8f3 	bl	80224c4 <USBD_CtlSendStatus>
      }
      break;
 80222de:	e004      	b.n	80222ea <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80222e0:	6839      	ldr	r1, [r7, #0]
 80222e2:	6878      	ldr	r0, [r7, #4]
 80222e4:	f000 f840 	bl	8022368 <USBD_CtlError>
      break;
 80222e8:	e000      	b.n	80222ec <USBD_ClrFeature+0x3c>
      break;
 80222ea:	bf00      	nop
  }
}
 80222ec:	bf00      	nop
 80222ee:	3708      	adds	r7, #8
 80222f0:	46bd      	mov	sp, r7
 80222f2:	bd80      	pop	{r7, pc}

080222f4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80222f4:	b580      	push	{r7, lr}
 80222f6:	b084      	sub	sp, #16
 80222f8:	af00      	add	r7, sp, #0
 80222fa:	6078      	str	r0, [r7, #4]
 80222fc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80222fe:	683b      	ldr	r3, [r7, #0]
 8022300:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8022302:	68fb      	ldr	r3, [r7, #12]
 8022304:	781a      	ldrb	r2, [r3, #0]
 8022306:	687b      	ldr	r3, [r7, #4]
 8022308:	701a      	strb	r2, [r3, #0]

  pbuff++;
 802230a:	68fb      	ldr	r3, [r7, #12]
 802230c:	3301      	adds	r3, #1
 802230e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8022310:	68fb      	ldr	r3, [r7, #12]
 8022312:	781a      	ldrb	r2, [r3, #0]
 8022314:	687b      	ldr	r3, [r7, #4]
 8022316:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8022318:	68fb      	ldr	r3, [r7, #12]
 802231a:	3301      	adds	r3, #1
 802231c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 802231e:	68f8      	ldr	r0, [r7, #12]
 8022320:	f7ff fa92 	bl	8021848 <SWAPBYTE>
 8022324:	4603      	mov	r3, r0
 8022326:	461a      	mov	r2, r3
 8022328:	687b      	ldr	r3, [r7, #4]
 802232a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 802232c:	68fb      	ldr	r3, [r7, #12]
 802232e:	3301      	adds	r3, #1
 8022330:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8022332:	68fb      	ldr	r3, [r7, #12]
 8022334:	3301      	adds	r3, #1
 8022336:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8022338:	68f8      	ldr	r0, [r7, #12]
 802233a:	f7ff fa85 	bl	8021848 <SWAPBYTE>
 802233e:	4603      	mov	r3, r0
 8022340:	461a      	mov	r2, r3
 8022342:	687b      	ldr	r3, [r7, #4]
 8022344:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8022346:	68fb      	ldr	r3, [r7, #12]
 8022348:	3301      	adds	r3, #1
 802234a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 802234c:	68fb      	ldr	r3, [r7, #12]
 802234e:	3301      	adds	r3, #1
 8022350:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8022352:	68f8      	ldr	r0, [r7, #12]
 8022354:	f7ff fa78 	bl	8021848 <SWAPBYTE>
 8022358:	4603      	mov	r3, r0
 802235a:	461a      	mov	r2, r3
 802235c:	687b      	ldr	r3, [r7, #4]
 802235e:	80da      	strh	r2, [r3, #6]
}
 8022360:	bf00      	nop
 8022362:	3710      	adds	r7, #16
 8022364:	46bd      	mov	sp, r7
 8022366:	bd80      	pop	{r7, pc}

08022368 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8022368:	b580      	push	{r7, lr}
 802236a:	b082      	sub	sp, #8
 802236c:	af00      	add	r7, sp, #0
 802236e:	6078      	str	r0, [r7, #4]
 8022370:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8022372:	2180      	movs	r1, #128	; 0x80
 8022374:	6878      	ldr	r0, [r7, #4]
 8022376:	f000 fcbe 	bl	8022cf6 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 802237a:	2100      	movs	r1, #0
 802237c:	6878      	ldr	r0, [r7, #4]
 802237e:	f000 fcba 	bl	8022cf6 <USBD_LL_StallEP>
}
 8022382:	bf00      	nop
 8022384:	3708      	adds	r7, #8
 8022386:	46bd      	mov	sp, r7
 8022388:	bd80      	pop	{r7, pc}

0802238a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 802238a:	b580      	push	{r7, lr}
 802238c:	b086      	sub	sp, #24
 802238e:	af00      	add	r7, sp, #0
 8022390:	60f8      	str	r0, [r7, #12]
 8022392:	60b9      	str	r1, [r7, #8]
 8022394:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8022396:	2300      	movs	r3, #0
 8022398:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 802239a:	68fb      	ldr	r3, [r7, #12]
 802239c:	2b00      	cmp	r3, #0
 802239e:	d036      	beq.n	802240e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80223a0:	68fb      	ldr	r3, [r7, #12]
 80223a2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80223a4:	6938      	ldr	r0, [r7, #16]
 80223a6:	f000 f836 	bl	8022416 <USBD_GetLen>
 80223aa:	4603      	mov	r3, r0
 80223ac:	3301      	adds	r3, #1
 80223ae:	b29b      	uxth	r3, r3
 80223b0:	005b      	lsls	r3, r3, #1
 80223b2:	b29a      	uxth	r2, r3
 80223b4:	687b      	ldr	r3, [r7, #4]
 80223b6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80223b8:	7dfb      	ldrb	r3, [r7, #23]
 80223ba:	68ba      	ldr	r2, [r7, #8]
 80223bc:	4413      	add	r3, r2
 80223be:	687a      	ldr	r2, [r7, #4]
 80223c0:	7812      	ldrb	r2, [r2, #0]
 80223c2:	701a      	strb	r2, [r3, #0]
  idx++;
 80223c4:	7dfb      	ldrb	r3, [r7, #23]
 80223c6:	3301      	adds	r3, #1
 80223c8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80223ca:	7dfb      	ldrb	r3, [r7, #23]
 80223cc:	68ba      	ldr	r2, [r7, #8]
 80223ce:	4413      	add	r3, r2
 80223d0:	2203      	movs	r2, #3
 80223d2:	701a      	strb	r2, [r3, #0]
  idx++;
 80223d4:	7dfb      	ldrb	r3, [r7, #23]
 80223d6:	3301      	adds	r3, #1
 80223d8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80223da:	e013      	b.n	8022404 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80223dc:	7dfb      	ldrb	r3, [r7, #23]
 80223de:	68ba      	ldr	r2, [r7, #8]
 80223e0:	4413      	add	r3, r2
 80223e2:	693a      	ldr	r2, [r7, #16]
 80223e4:	7812      	ldrb	r2, [r2, #0]
 80223e6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80223e8:	693b      	ldr	r3, [r7, #16]
 80223ea:	3301      	adds	r3, #1
 80223ec:	613b      	str	r3, [r7, #16]
    idx++;
 80223ee:	7dfb      	ldrb	r3, [r7, #23]
 80223f0:	3301      	adds	r3, #1
 80223f2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80223f4:	7dfb      	ldrb	r3, [r7, #23]
 80223f6:	68ba      	ldr	r2, [r7, #8]
 80223f8:	4413      	add	r3, r2
 80223fa:	2200      	movs	r2, #0
 80223fc:	701a      	strb	r2, [r3, #0]
    idx++;
 80223fe:	7dfb      	ldrb	r3, [r7, #23]
 8022400:	3301      	adds	r3, #1
 8022402:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8022404:	693b      	ldr	r3, [r7, #16]
 8022406:	781b      	ldrb	r3, [r3, #0]
 8022408:	2b00      	cmp	r3, #0
 802240a:	d1e7      	bne.n	80223dc <USBD_GetString+0x52>
 802240c:	e000      	b.n	8022410 <USBD_GetString+0x86>
    return;
 802240e:	bf00      	nop
  }
}
 8022410:	3718      	adds	r7, #24
 8022412:	46bd      	mov	sp, r7
 8022414:	bd80      	pop	{r7, pc}

08022416 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8022416:	b480      	push	{r7}
 8022418:	b085      	sub	sp, #20
 802241a:	af00      	add	r7, sp, #0
 802241c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 802241e:	2300      	movs	r3, #0
 8022420:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8022422:	687b      	ldr	r3, [r7, #4]
 8022424:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8022426:	e005      	b.n	8022434 <USBD_GetLen+0x1e>
  {
    len++;
 8022428:	7bfb      	ldrb	r3, [r7, #15]
 802242a:	3301      	adds	r3, #1
 802242c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 802242e:	68bb      	ldr	r3, [r7, #8]
 8022430:	3301      	adds	r3, #1
 8022432:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8022434:	68bb      	ldr	r3, [r7, #8]
 8022436:	781b      	ldrb	r3, [r3, #0]
 8022438:	2b00      	cmp	r3, #0
 802243a:	d1f5      	bne.n	8022428 <USBD_GetLen+0x12>
  }

  return len;
 802243c:	7bfb      	ldrb	r3, [r7, #15]
}
 802243e:	4618      	mov	r0, r3
 8022440:	3714      	adds	r7, #20
 8022442:	46bd      	mov	sp, r7
 8022444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022448:	4770      	bx	lr

0802244a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 802244a:	b580      	push	{r7, lr}
 802244c:	b084      	sub	sp, #16
 802244e:	af00      	add	r7, sp, #0
 8022450:	60f8      	str	r0, [r7, #12]
 8022452:	60b9      	str	r1, [r7, #8]
 8022454:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8022456:	68fb      	ldr	r3, [r7, #12]
 8022458:	2202      	movs	r2, #2
 802245a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 802245e:	68fb      	ldr	r3, [r7, #12]
 8022460:	687a      	ldr	r2, [r7, #4]
 8022462:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8022464:	68fb      	ldr	r3, [r7, #12]
 8022466:	687a      	ldr	r2, [r7, #4]
 8022468:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 802246a:	687b      	ldr	r3, [r7, #4]
 802246c:	68ba      	ldr	r2, [r7, #8]
 802246e:	2100      	movs	r1, #0
 8022470:	68f8      	ldr	r0, [r7, #12]
 8022472:	f000 fcc9 	bl	8022e08 <USBD_LL_Transmit>

  return USBD_OK;
 8022476:	2300      	movs	r3, #0
}
 8022478:	4618      	mov	r0, r3
 802247a:	3710      	adds	r7, #16
 802247c:	46bd      	mov	sp, r7
 802247e:	bd80      	pop	{r7, pc}

08022480 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8022480:	b580      	push	{r7, lr}
 8022482:	b084      	sub	sp, #16
 8022484:	af00      	add	r7, sp, #0
 8022486:	60f8      	str	r0, [r7, #12]
 8022488:	60b9      	str	r1, [r7, #8]
 802248a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 802248c:	687b      	ldr	r3, [r7, #4]
 802248e:	68ba      	ldr	r2, [r7, #8]
 8022490:	2100      	movs	r1, #0
 8022492:	68f8      	ldr	r0, [r7, #12]
 8022494:	f000 fcb8 	bl	8022e08 <USBD_LL_Transmit>

  return USBD_OK;
 8022498:	2300      	movs	r3, #0
}
 802249a:	4618      	mov	r0, r3
 802249c:	3710      	adds	r7, #16
 802249e:	46bd      	mov	sp, r7
 80224a0:	bd80      	pop	{r7, pc}

080224a2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80224a2:	b580      	push	{r7, lr}
 80224a4:	b084      	sub	sp, #16
 80224a6:	af00      	add	r7, sp, #0
 80224a8:	60f8      	str	r0, [r7, #12]
 80224aa:	60b9      	str	r1, [r7, #8]
 80224ac:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80224ae:	687b      	ldr	r3, [r7, #4]
 80224b0:	68ba      	ldr	r2, [r7, #8]
 80224b2:	2100      	movs	r1, #0
 80224b4:	68f8      	ldr	r0, [r7, #12]
 80224b6:	f000 fcc8 	bl	8022e4a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80224ba:	2300      	movs	r3, #0
}
 80224bc:	4618      	mov	r0, r3
 80224be:	3710      	adds	r7, #16
 80224c0:	46bd      	mov	sp, r7
 80224c2:	bd80      	pop	{r7, pc}

080224c4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80224c4:	b580      	push	{r7, lr}
 80224c6:	b082      	sub	sp, #8
 80224c8:	af00      	add	r7, sp, #0
 80224ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80224cc:	687b      	ldr	r3, [r7, #4]
 80224ce:	2204      	movs	r2, #4
 80224d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80224d4:	2300      	movs	r3, #0
 80224d6:	2200      	movs	r2, #0
 80224d8:	2100      	movs	r1, #0
 80224da:	6878      	ldr	r0, [r7, #4]
 80224dc:	f000 fc94 	bl	8022e08 <USBD_LL_Transmit>

  return USBD_OK;
 80224e0:	2300      	movs	r3, #0
}
 80224e2:	4618      	mov	r0, r3
 80224e4:	3708      	adds	r7, #8
 80224e6:	46bd      	mov	sp, r7
 80224e8:	bd80      	pop	{r7, pc}

080224ea <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80224ea:	b580      	push	{r7, lr}
 80224ec:	b082      	sub	sp, #8
 80224ee:	af00      	add	r7, sp, #0
 80224f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80224f2:	687b      	ldr	r3, [r7, #4]
 80224f4:	2205      	movs	r2, #5
 80224f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80224fa:	2300      	movs	r3, #0
 80224fc:	2200      	movs	r2, #0
 80224fe:	2100      	movs	r1, #0
 8022500:	6878      	ldr	r0, [r7, #4]
 8022502:	f000 fca2 	bl	8022e4a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8022506:	2300      	movs	r3, #0
}
 8022508:	4618      	mov	r0, r3
 802250a:	3708      	adds	r7, #8
 802250c:	46bd      	mov	sp, r7
 802250e:	bd80      	pop	{r7, pc}

08022510 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8022510:	b580      	push	{r7, lr}
 8022512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8022514:	2200      	movs	r2, #0
 8022516:	4912      	ldr	r1, [pc, #72]	; (8022560 <MX_USB_DEVICE_Init+0x50>)
 8022518:	4812      	ldr	r0, [pc, #72]	; (8022564 <MX_USB_DEVICE_Init+0x54>)
 802251a:	f7fe fe84 	bl	8021226 <USBD_Init>
 802251e:	4603      	mov	r3, r0
 8022520:	2b00      	cmp	r3, #0
 8022522:	d001      	beq.n	8022528 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8022524:	f7f5 fdd8 	bl	80180d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8022528:	490f      	ldr	r1, [pc, #60]	; (8022568 <MX_USB_DEVICE_Init+0x58>)
 802252a:	480e      	ldr	r0, [pc, #56]	; (8022564 <MX_USB_DEVICE_Init+0x54>)
 802252c:	f7fe feab 	bl	8021286 <USBD_RegisterClass>
 8022530:	4603      	mov	r3, r0
 8022532:	2b00      	cmp	r3, #0
 8022534:	d001      	beq.n	802253a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8022536:	f7f5 fdcf 	bl	80180d8 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 802253a:	490c      	ldr	r1, [pc, #48]	; (802256c <MX_USB_DEVICE_Init+0x5c>)
 802253c:	4809      	ldr	r0, [pc, #36]	; (8022564 <MX_USB_DEVICE_Init+0x54>)
 802253e:	f7fd fa5b 	bl	801f9f8 <USBD_MSC_RegisterStorage>
 8022542:	4603      	mov	r3, r0
 8022544:	2b00      	cmp	r3, #0
 8022546:	d001      	beq.n	802254c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8022548:	f7f5 fdc6 	bl	80180d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 802254c:	4805      	ldr	r0, [pc, #20]	; (8022564 <MX_USB_DEVICE_Init+0x54>)
 802254e:	f7fe fec1 	bl	80212d4 <USBD_Start>
 8022552:	4603      	mov	r3, r0
 8022554:	2b00      	cmp	r3, #0
 8022556:	d001      	beq.n	802255c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8022558:	f7f5 fdbe 	bl	80180d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 802255c:	bf00      	nop
 802255e:	bd80      	pop	{r7, pc}
 8022560:	2000067c 	.word	0x2000067c
 8022564:	20006c48 	.word	0x20006c48
 8022568:	20000594 	.word	0x20000594
 802256c:	200006dc 	.word	0x200006dc

08022570 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022570:	b480      	push	{r7}
 8022572:	b083      	sub	sp, #12
 8022574:	af00      	add	r7, sp, #0
 8022576:	4603      	mov	r3, r0
 8022578:	6039      	str	r1, [r7, #0]
 802257a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 802257c:	683b      	ldr	r3, [r7, #0]
 802257e:	2212      	movs	r2, #18
 8022580:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8022582:	4b03      	ldr	r3, [pc, #12]	; (8022590 <USBD_FS_DeviceDescriptor+0x20>)
}
 8022584:	4618      	mov	r0, r3
 8022586:	370c      	adds	r7, #12
 8022588:	46bd      	mov	sp, r7
 802258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802258e:	4770      	bx	lr
 8022590:	2000069c 	.word	0x2000069c

08022594 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022594:	b480      	push	{r7}
 8022596:	b083      	sub	sp, #12
 8022598:	af00      	add	r7, sp, #0
 802259a:	4603      	mov	r3, r0
 802259c:	6039      	str	r1, [r7, #0]
 802259e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80225a0:	683b      	ldr	r3, [r7, #0]
 80225a2:	2204      	movs	r2, #4
 80225a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80225a6:	4b03      	ldr	r3, [pc, #12]	; (80225b4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80225a8:	4618      	mov	r0, r3
 80225aa:	370c      	adds	r7, #12
 80225ac:	46bd      	mov	sp, r7
 80225ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80225b2:	4770      	bx	lr
 80225b4:	200006bc 	.word	0x200006bc

080225b8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80225b8:	b580      	push	{r7, lr}
 80225ba:	b082      	sub	sp, #8
 80225bc:	af00      	add	r7, sp, #0
 80225be:	4603      	mov	r3, r0
 80225c0:	6039      	str	r1, [r7, #0]
 80225c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80225c4:	79fb      	ldrb	r3, [r7, #7]
 80225c6:	2b00      	cmp	r3, #0
 80225c8:	d105      	bne.n	80225d6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80225ca:	683a      	ldr	r2, [r7, #0]
 80225cc:	4907      	ldr	r1, [pc, #28]	; (80225ec <USBD_FS_ProductStrDescriptor+0x34>)
 80225ce:	4808      	ldr	r0, [pc, #32]	; (80225f0 <USBD_FS_ProductStrDescriptor+0x38>)
 80225d0:	f7ff fedb 	bl	802238a <USBD_GetString>
 80225d4:	e004      	b.n	80225e0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80225d6:	683a      	ldr	r2, [r7, #0]
 80225d8:	4904      	ldr	r1, [pc, #16]	; (80225ec <USBD_FS_ProductStrDescriptor+0x34>)
 80225da:	4805      	ldr	r0, [pc, #20]	; (80225f0 <USBD_FS_ProductStrDescriptor+0x38>)
 80225dc:	f7ff fed5 	bl	802238a <USBD_GetString>
  }
  return USBD_StrDesc;
 80225e0:	4b02      	ldr	r3, [pc, #8]	; (80225ec <USBD_FS_ProductStrDescriptor+0x34>)
}
 80225e2:	4618      	mov	r0, r3
 80225e4:	3708      	adds	r7, #8
 80225e6:	46bd      	mov	sp, r7
 80225e8:	bd80      	pop	{r7, pc}
 80225ea:	bf00      	nop
 80225ec:	20006f18 	.word	0x20006f18
 80225f0:	08000a84 	.word	0x08000a84

080225f4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80225f4:	b580      	push	{r7, lr}
 80225f6:	b082      	sub	sp, #8
 80225f8:	af00      	add	r7, sp, #0
 80225fa:	4603      	mov	r3, r0
 80225fc:	6039      	str	r1, [r7, #0]
 80225fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8022600:	683a      	ldr	r2, [r7, #0]
 8022602:	4904      	ldr	r1, [pc, #16]	; (8022614 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8022604:	4804      	ldr	r0, [pc, #16]	; (8022618 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8022606:	f7ff fec0 	bl	802238a <USBD_GetString>
  return USBD_StrDesc;
 802260a:	4b02      	ldr	r3, [pc, #8]	; (8022614 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 802260c:	4618      	mov	r0, r3
 802260e:	3708      	adds	r7, #8
 8022610:	46bd      	mov	sp, r7
 8022612:	bd80      	pop	{r7, pc}
 8022614:	20006f18 	.word	0x20006f18
 8022618:	08000a98 	.word	0x08000a98

0802261c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802261c:	b580      	push	{r7, lr}
 802261e:	b082      	sub	sp, #8
 8022620:	af00      	add	r7, sp, #0
 8022622:	4603      	mov	r3, r0
 8022624:	6039      	str	r1, [r7, #0]
 8022626:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8022628:	683b      	ldr	r3, [r7, #0]
 802262a:	221a      	movs	r2, #26
 802262c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 802262e:	f000 f855 	bl	80226dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8022632:	4b02      	ldr	r3, [pc, #8]	; (802263c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8022634:	4618      	mov	r0, r3
 8022636:	3708      	adds	r7, #8
 8022638:	46bd      	mov	sp, r7
 802263a:	bd80      	pop	{r7, pc}
 802263c:	200006c0 	.word	0x200006c0

08022640 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022640:	b580      	push	{r7, lr}
 8022642:	b082      	sub	sp, #8
 8022644:	af00      	add	r7, sp, #0
 8022646:	4603      	mov	r3, r0
 8022648:	6039      	str	r1, [r7, #0]
 802264a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 802264c:	79fb      	ldrb	r3, [r7, #7]
 802264e:	2b00      	cmp	r3, #0
 8022650:	d105      	bne.n	802265e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8022652:	683a      	ldr	r2, [r7, #0]
 8022654:	4907      	ldr	r1, [pc, #28]	; (8022674 <USBD_FS_ConfigStrDescriptor+0x34>)
 8022656:	4808      	ldr	r0, [pc, #32]	; (8022678 <USBD_FS_ConfigStrDescriptor+0x38>)
 8022658:	f7ff fe97 	bl	802238a <USBD_GetString>
 802265c:	e004      	b.n	8022668 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802265e:	683a      	ldr	r2, [r7, #0]
 8022660:	4904      	ldr	r1, [pc, #16]	; (8022674 <USBD_FS_ConfigStrDescriptor+0x34>)
 8022662:	4805      	ldr	r0, [pc, #20]	; (8022678 <USBD_FS_ConfigStrDescriptor+0x38>)
 8022664:	f7ff fe91 	bl	802238a <USBD_GetString>
  }
  return USBD_StrDesc;
 8022668:	4b02      	ldr	r3, [pc, #8]	; (8022674 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 802266a:	4618      	mov	r0, r3
 802266c:	3708      	adds	r7, #8
 802266e:	46bd      	mov	sp, r7
 8022670:	bd80      	pop	{r7, pc}
 8022672:	bf00      	nop
 8022674:	20006f18 	.word	0x20006f18
 8022678:	08000aac 	.word	0x08000aac

0802267c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802267c:	b580      	push	{r7, lr}
 802267e:	b082      	sub	sp, #8
 8022680:	af00      	add	r7, sp, #0
 8022682:	4603      	mov	r3, r0
 8022684:	6039      	str	r1, [r7, #0]
 8022686:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8022688:	79fb      	ldrb	r3, [r7, #7]
 802268a:	2b00      	cmp	r3, #0
 802268c:	d105      	bne.n	802269a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 802268e:	683a      	ldr	r2, [r7, #0]
 8022690:	4907      	ldr	r1, [pc, #28]	; (80226b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8022692:	4808      	ldr	r0, [pc, #32]	; (80226b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8022694:	f7ff fe79 	bl	802238a <USBD_GetString>
 8022698:	e004      	b.n	80226a4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 802269a:	683a      	ldr	r2, [r7, #0]
 802269c:	4904      	ldr	r1, [pc, #16]	; (80226b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 802269e:	4805      	ldr	r0, [pc, #20]	; (80226b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80226a0:	f7ff fe73 	bl	802238a <USBD_GetString>
  }
  return USBD_StrDesc;
 80226a4:	4b02      	ldr	r3, [pc, #8]	; (80226b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80226a6:	4618      	mov	r0, r3
 80226a8:	3708      	adds	r7, #8
 80226aa:	46bd      	mov	sp, r7
 80226ac:	bd80      	pop	{r7, pc}
 80226ae:	bf00      	nop
 80226b0:	20006f18 	.word	0x20006f18
 80226b4:	08000ab8 	.word	0x08000ab8

080226b8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80226b8:	b480      	push	{r7}
 80226ba:	b083      	sub	sp, #12
 80226bc:	af00      	add	r7, sp, #0
 80226be:	4603      	mov	r3, r0
 80226c0:	6039      	str	r1, [r7, #0]
 80226c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80226c4:	683b      	ldr	r3, [r7, #0]
 80226c6:	220c      	movs	r2, #12
 80226c8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80226ca:	4b03      	ldr	r3, [pc, #12]	; (80226d8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80226cc:	4618      	mov	r0, r3
 80226ce:	370c      	adds	r7, #12
 80226d0:	46bd      	mov	sp, r7
 80226d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80226d6:	4770      	bx	lr
 80226d8:	200006b0 	.word	0x200006b0

080226dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80226dc:	b580      	push	{r7, lr}
 80226de:	b084      	sub	sp, #16
 80226e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80226e2:	4b0f      	ldr	r3, [pc, #60]	; (8022720 <Get_SerialNum+0x44>)
 80226e4:	681b      	ldr	r3, [r3, #0]
 80226e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80226e8:	4b0e      	ldr	r3, [pc, #56]	; (8022724 <Get_SerialNum+0x48>)
 80226ea:	681b      	ldr	r3, [r3, #0]
 80226ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80226ee:	4b0e      	ldr	r3, [pc, #56]	; (8022728 <Get_SerialNum+0x4c>)
 80226f0:	681b      	ldr	r3, [r3, #0]
 80226f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80226f4:	68fa      	ldr	r2, [r7, #12]
 80226f6:	687b      	ldr	r3, [r7, #4]
 80226f8:	4413      	add	r3, r2
 80226fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80226fc:	68fb      	ldr	r3, [r7, #12]
 80226fe:	2b00      	cmp	r3, #0
 8022700:	d009      	beq.n	8022716 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8022702:	2208      	movs	r2, #8
 8022704:	4909      	ldr	r1, [pc, #36]	; (802272c <Get_SerialNum+0x50>)
 8022706:	68f8      	ldr	r0, [r7, #12]
 8022708:	f000 f814 	bl	8022734 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 802270c:	2204      	movs	r2, #4
 802270e:	4908      	ldr	r1, [pc, #32]	; (8022730 <Get_SerialNum+0x54>)
 8022710:	68b8      	ldr	r0, [r7, #8]
 8022712:	f000 f80f 	bl	8022734 <IntToUnicode>
  }
}
 8022716:	bf00      	nop
 8022718:	3710      	adds	r7, #16
 802271a:	46bd      	mov	sp, r7
 802271c:	bd80      	pop	{r7, pc}
 802271e:	bf00      	nop
 8022720:	1fff7a10 	.word	0x1fff7a10
 8022724:	1fff7a14 	.word	0x1fff7a14
 8022728:	1fff7a18 	.word	0x1fff7a18
 802272c:	200006c2 	.word	0x200006c2
 8022730:	200006d2 	.word	0x200006d2

08022734 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8022734:	b480      	push	{r7}
 8022736:	b087      	sub	sp, #28
 8022738:	af00      	add	r7, sp, #0
 802273a:	60f8      	str	r0, [r7, #12]
 802273c:	60b9      	str	r1, [r7, #8]
 802273e:	4613      	mov	r3, r2
 8022740:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8022742:	2300      	movs	r3, #0
 8022744:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8022746:	2300      	movs	r3, #0
 8022748:	75fb      	strb	r3, [r7, #23]
 802274a:	e027      	b.n	802279c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 802274c:	68fb      	ldr	r3, [r7, #12]
 802274e:	0f1b      	lsrs	r3, r3, #28
 8022750:	2b09      	cmp	r3, #9
 8022752:	d80b      	bhi.n	802276c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8022754:	68fb      	ldr	r3, [r7, #12]
 8022756:	0f1b      	lsrs	r3, r3, #28
 8022758:	b2da      	uxtb	r2, r3
 802275a:	7dfb      	ldrb	r3, [r7, #23]
 802275c:	005b      	lsls	r3, r3, #1
 802275e:	4619      	mov	r1, r3
 8022760:	68bb      	ldr	r3, [r7, #8]
 8022762:	440b      	add	r3, r1
 8022764:	3230      	adds	r2, #48	; 0x30
 8022766:	b2d2      	uxtb	r2, r2
 8022768:	701a      	strb	r2, [r3, #0]
 802276a:	e00a      	b.n	8022782 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 802276c:	68fb      	ldr	r3, [r7, #12]
 802276e:	0f1b      	lsrs	r3, r3, #28
 8022770:	b2da      	uxtb	r2, r3
 8022772:	7dfb      	ldrb	r3, [r7, #23]
 8022774:	005b      	lsls	r3, r3, #1
 8022776:	4619      	mov	r1, r3
 8022778:	68bb      	ldr	r3, [r7, #8]
 802277a:	440b      	add	r3, r1
 802277c:	3237      	adds	r2, #55	; 0x37
 802277e:	b2d2      	uxtb	r2, r2
 8022780:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8022782:	68fb      	ldr	r3, [r7, #12]
 8022784:	011b      	lsls	r3, r3, #4
 8022786:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8022788:	7dfb      	ldrb	r3, [r7, #23]
 802278a:	005b      	lsls	r3, r3, #1
 802278c:	3301      	adds	r3, #1
 802278e:	68ba      	ldr	r2, [r7, #8]
 8022790:	4413      	add	r3, r2
 8022792:	2200      	movs	r2, #0
 8022794:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8022796:	7dfb      	ldrb	r3, [r7, #23]
 8022798:	3301      	adds	r3, #1
 802279a:	75fb      	strb	r3, [r7, #23]
 802279c:	7dfa      	ldrb	r2, [r7, #23]
 802279e:	79fb      	ldrb	r3, [r7, #7]
 80227a0:	429a      	cmp	r2, r3
 80227a2:	d3d3      	bcc.n	802274c <IntToUnicode+0x18>
  }
}
 80227a4:	bf00      	nop
 80227a6:	bf00      	nop
 80227a8:	371c      	adds	r7, #28
 80227aa:	46bd      	mov	sp, r7
 80227ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80227b0:	4770      	bx	lr

080227b2 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 80227b2:	b480      	push	{r7}
 80227b4:	b083      	sub	sp, #12
 80227b6:	af00      	add	r7, sp, #0
 80227b8:	4603      	mov	r3, r0
 80227ba:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 80227bc:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80227be:	4618      	mov	r0, r3
 80227c0:	370c      	adds	r7, #12
 80227c2:	46bd      	mov	sp, r7
 80227c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80227c8:	4770      	bx	lr

080227ca <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 80227ca:	b480      	push	{r7}
 80227cc:	b085      	sub	sp, #20
 80227ce:	af00      	add	r7, sp, #0
 80227d0:	4603      	mov	r3, r0
 80227d2:	60b9      	str	r1, [r7, #8]
 80227d4:	607a      	str	r2, [r7, #4]
 80227d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 80227d8:	68bb      	ldr	r3, [r7, #8]
 80227da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80227de:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 80227e0:	687b      	ldr	r3, [r7, #4]
 80227e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80227e6:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 80227e8:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80227ea:	4618      	mov	r0, r3
 80227ec:	3714      	adds	r7, #20
 80227ee:	46bd      	mov	sp, r7
 80227f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80227f4:	4770      	bx	lr

080227f6 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 80227f6:	b480      	push	{r7}
 80227f8:	b083      	sub	sp, #12
 80227fa:	af00      	add	r7, sp, #0
 80227fc:	4603      	mov	r3, r0
 80227fe:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8022800:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8022802:	4618      	mov	r0, r3
 8022804:	370c      	adds	r7, #12
 8022806:	46bd      	mov	sp, r7
 8022808:	f85d 7b04 	ldr.w	r7, [sp], #4
 802280c:	4770      	bx	lr

0802280e <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 802280e:	b480      	push	{r7}
 8022810:	b083      	sub	sp, #12
 8022812:	af00      	add	r7, sp, #0
 8022814:	4603      	mov	r3, r0
 8022816:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8022818:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 802281a:	4618      	mov	r0, r3
 802281c:	370c      	adds	r7, #12
 802281e:	46bd      	mov	sp, r7
 8022820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022824:	4770      	bx	lr

08022826 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8022826:	b580      	push	{r7, lr}
 8022828:	b084      	sub	sp, #16
 802282a:	af00      	add	r7, sp, #0
 802282c:	60b9      	str	r1, [r7, #8]
 802282e:	607a      	str	r2, [r7, #4]
 8022830:	461a      	mov	r2, r3
 8022832:	4603      	mov	r3, r0
 8022834:	73fb      	strb	r3, [r7, #15]
 8022836:	4613      	mov	r3, r2
 8022838:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	ExtFlash_PageRD( (char *)buf, blk_addr*STORAGE_BLK_SIZ, blk_len);
 802283a:	687b      	ldr	r3, [r7, #4]
 802283c:	025b      	lsls	r3, r3, #9
 802283e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8022842:	4619      	mov	r1, r3
 8022844:	68b8      	ldr	r0, [r7, #8]
 8022846:	f7ec fc0b 	bl	800f060 <ExtFlash_PageRD>
  return (USBD_OK);
 802284a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 802284c:	4618      	mov	r0, r3
 802284e:	3710      	adds	r7, #16
 8022850:	46bd      	mov	sp, r7
 8022852:	bd80      	pop	{r7, pc}

08022854 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8022854:	b580      	push	{r7, lr}
 8022856:	b084      	sub	sp, #16
 8022858:	af00      	add	r7, sp, #0
 802285a:	60b9      	str	r1, [r7, #8]
 802285c:	607a      	str	r2, [r7, #4]
 802285e:	461a      	mov	r2, r3
 8022860:	4603      	mov	r3, r0
 8022862:	73fb      	strb	r3, [r7, #15]
 8022864:	4613      	mov	r3, r2
 8022866:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	ExtFlash_PageWR( (char *)buf, blk_addr*STORAGE_BLK_SIZ);
 8022868:	687b      	ldr	r3, [r7, #4]
 802286a:	025b      	lsls	r3, r3, #9
 802286c:	4619      	mov	r1, r3
 802286e:	68b8      	ldr	r0, [r7, #8]
 8022870:	f7ec fcce 	bl	800f210 <ExtFlash_PageWR>
	return (USBD_OK);
 8022874:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8022876:	4618      	mov	r0, r3
 8022878:	3710      	adds	r7, #16
 802287a:	46bd      	mov	sp, r7
 802287c:	bd80      	pop	{r7, pc}

0802287e <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 802287e:	b480      	push	{r7}
 8022880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8022882:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8022884:	4618      	mov	r0, r3
 8022886:	46bd      	mov	sp, r7
 8022888:	f85d 7b04 	ldr.w	r7, [sp], #4
 802288c:	4770      	bx	lr
	...

08022890 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8022890:	b580      	push	{r7, lr}
 8022892:	b0a0      	sub	sp, #128	; 0x80
 8022894:	af00      	add	r7, sp, #0
 8022896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8022898:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 802289c:	2200      	movs	r2, #0
 802289e:	601a      	str	r2, [r3, #0]
 80228a0:	605a      	str	r2, [r3, #4]
 80228a2:	609a      	str	r2, [r3, #8]
 80228a4:	60da      	str	r2, [r3, #12]
 80228a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80228a8:	f107 0310 	add.w	r3, r7, #16
 80228ac:	225c      	movs	r2, #92	; 0x5c
 80228ae:	2100      	movs	r1, #0
 80228b0:	4618      	mov	r0, r3
 80228b2:	f000 fbd9 	bl	8023068 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80228b6:	687b      	ldr	r3, [r7, #4]
 80228b8:	681b      	ldr	r3, [r3, #0]
 80228ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80228be:	d154      	bne.n	802296a <HAL_PCD_MspInit+0xda>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80228c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80228c4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 25;
 80228c6:	2319      	movs	r3, #25
 80228c8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80228ca:	23c0      	movs	r3, #192	; 0xc0
 80228cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80228ce:	2302      	movs	r3, #2
 80228d0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 80228d2:	2304      	movs	r3, #4
 80228d4:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80228d6:	2301      	movs	r3, #1
 80228d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 80228da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80228de:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80228e0:	f107 0310 	add.w	r3, r7, #16
 80228e4:	4618      	mov	r0, r3
 80228e6:	f7f8 fec1 	bl	801b66c <HAL_RCCEx_PeriphCLKConfig>
 80228ea:	4603      	mov	r3, r0
 80228ec:	2b00      	cmp	r3, #0
 80228ee:	d001      	beq.n	80228f4 <HAL_PCD_MspInit+0x64>
    {
      Error_Handler();
 80228f0:	f7f5 fbf2 	bl	80180d8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80228f4:	2300      	movs	r3, #0
 80228f6:	60fb      	str	r3, [r7, #12]
 80228f8:	4b1e      	ldr	r3, [pc, #120]	; (8022974 <HAL_PCD_MspInit+0xe4>)
 80228fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80228fc:	4a1d      	ldr	r2, [pc, #116]	; (8022974 <HAL_PCD_MspInit+0xe4>)
 80228fe:	f043 0301 	orr.w	r3, r3, #1
 8022902:	6313      	str	r3, [r2, #48]	; 0x30
 8022904:	4b1b      	ldr	r3, [pc, #108]	; (8022974 <HAL_PCD_MspInit+0xe4>)
 8022906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022908:	f003 0301 	and.w	r3, r3, #1
 802290c:	60fb      	str	r3, [r7, #12]
 802290e:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = D__Pin|D_A12_Pin;
 8022910:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8022914:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8022916:	2302      	movs	r3, #2
 8022918:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802291a:	2300      	movs	r3, #0
 802291c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802291e:	2303      	movs	r3, #3
 8022920:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8022922:	230a      	movs	r3, #10
 8022924:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8022926:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 802292a:	4619      	mov	r1, r3
 802292c:	4812      	ldr	r0, [pc, #72]	; (8022978 <HAL_PCD_MspInit+0xe8>)
 802292e:	f7f7 f999 	bl	8019c64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8022932:	4b10      	ldr	r3, [pc, #64]	; (8022974 <HAL_PCD_MspInit+0xe4>)
 8022934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022936:	4a0f      	ldr	r2, [pc, #60]	; (8022974 <HAL_PCD_MspInit+0xe4>)
 8022938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802293c:	6353      	str	r3, [r2, #52]	; 0x34
 802293e:	2300      	movs	r3, #0
 8022940:	60bb      	str	r3, [r7, #8]
 8022942:	4b0c      	ldr	r3, [pc, #48]	; (8022974 <HAL_PCD_MspInit+0xe4>)
 8022944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022946:	4a0b      	ldr	r2, [pc, #44]	; (8022974 <HAL_PCD_MspInit+0xe4>)
 8022948:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802294c:	6453      	str	r3, [r2, #68]	; 0x44
 802294e:	4b09      	ldr	r3, [pc, #36]	; (8022974 <HAL_PCD_MspInit+0xe4>)
 8022950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8022956:	60bb      	str	r3, [r7, #8]
 8022958:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 802295a:	2200      	movs	r2, #0
 802295c:	2100      	movs	r1, #0
 802295e:	2043      	movs	r0, #67	; 0x43
 8022960:	f7f6 fabf 	bl	8018ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8022964:	2043      	movs	r0, #67	; 0x43
 8022966:	f7f6 fad8 	bl	8018f1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 802296a:	bf00      	nop
 802296c:	3780      	adds	r7, #128	; 0x80
 802296e:	46bd      	mov	sp, r7
 8022970:	bd80      	pop	{r7, pc}
 8022972:	bf00      	nop
 8022974:	40023800 	.word	0x40023800
 8022978:	40020000 	.word	0x40020000

0802297c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802297c:	b580      	push	{r7, lr}
 802297e:	b082      	sub	sp, #8
 8022980:	af00      	add	r7, sp, #0
 8022982:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8022984:	687b      	ldr	r3, [r7, #4]
 8022986:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 802298a:	687b      	ldr	r3, [r7, #4]
 802298c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8022990:	4619      	mov	r1, r3
 8022992:	4610      	mov	r0, r2
 8022994:	f7fe fce9 	bl	802136a <USBD_LL_SetupStage>
}
 8022998:	bf00      	nop
 802299a:	3708      	adds	r7, #8
 802299c:	46bd      	mov	sp, r7
 802299e:	bd80      	pop	{r7, pc}

080229a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80229a0:	b580      	push	{r7, lr}
 80229a2:	b082      	sub	sp, #8
 80229a4:	af00      	add	r7, sp, #0
 80229a6:	6078      	str	r0, [r7, #4]
 80229a8:	460b      	mov	r3, r1
 80229aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80229ac:	687b      	ldr	r3, [r7, #4]
 80229ae:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80229b2:	78fa      	ldrb	r2, [r7, #3]
 80229b4:	6879      	ldr	r1, [r7, #4]
 80229b6:	4613      	mov	r3, r2
 80229b8:	00db      	lsls	r3, r3, #3
 80229ba:	1a9b      	subs	r3, r3, r2
 80229bc:	009b      	lsls	r3, r3, #2
 80229be:	440b      	add	r3, r1
 80229c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80229c4:	681a      	ldr	r2, [r3, #0]
 80229c6:	78fb      	ldrb	r3, [r7, #3]
 80229c8:	4619      	mov	r1, r3
 80229ca:	f7fe fd23 	bl	8021414 <USBD_LL_DataOutStage>
}
 80229ce:	bf00      	nop
 80229d0:	3708      	adds	r7, #8
 80229d2:	46bd      	mov	sp, r7
 80229d4:	bd80      	pop	{r7, pc}

080229d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80229d6:	b580      	push	{r7, lr}
 80229d8:	b082      	sub	sp, #8
 80229da:	af00      	add	r7, sp, #0
 80229dc:	6078      	str	r0, [r7, #4]
 80229de:	460b      	mov	r3, r1
 80229e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80229e2:	687b      	ldr	r3, [r7, #4]
 80229e4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80229e8:	78fa      	ldrb	r2, [r7, #3]
 80229ea:	6879      	ldr	r1, [r7, #4]
 80229ec:	4613      	mov	r3, r2
 80229ee:	00db      	lsls	r3, r3, #3
 80229f0:	1a9b      	subs	r3, r3, r2
 80229f2:	009b      	lsls	r3, r3, #2
 80229f4:	440b      	add	r3, r1
 80229f6:	3348      	adds	r3, #72	; 0x48
 80229f8:	681a      	ldr	r2, [r3, #0]
 80229fa:	78fb      	ldrb	r3, [r7, #3]
 80229fc:	4619      	mov	r1, r3
 80229fe:	f7fe fd6c 	bl	80214da <USBD_LL_DataInStage>
}
 8022a02:	bf00      	nop
 8022a04:	3708      	adds	r7, #8
 8022a06:	46bd      	mov	sp, r7
 8022a08:	bd80      	pop	{r7, pc}

08022a0a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022a0a:	b580      	push	{r7, lr}
 8022a0c:	b082      	sub	sp, #8
 8022a0e:	af00      	add	r7, sp, #0
 8022a10:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8022a12:	687b      	ldr	r3, [r7, #4]
 8022a14:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022a18:	4618      	mov	r0, r3
 8022a1a:	f7fe fe80 	bl	802171e <USBD_LL_SOF>
}
 8022a1e:	bf00      	nop
 8022a20:	3708      	adds	r7, #8
 8022a22:	46bd      	mov	sp, r7
 8022a24:	bd80      	pop	{r7, pc}

08022a26 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022a26:	b580      	push	{r7, lr}
 8022a28:	b084      	sub	sp, #16
 8022a2a:	af00      	add	r7, sp, #0
 8022a2c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8022a2e:	2301      	movs	r3, #1
 8022a30:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8022a32:	687b      	ldr	r3, [r7, #4]
 8022a34:	68db      	ldr	r3, [r3, #12]
 8022a36:	2b00      	cmp	r3, #0
 8022a38:	d102      	bne.n	8022a40 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8022a3a:	2300      	movs	r3, #0
 8022a3c:	73fb      	strb	r3, [r7, #15]
 8022a3e:	e008      	b.n	8022a52 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8022a40:	687b      	ldr	r3, [r7, #4]
 8022a42:	68db      	ldr	r3, [r3, #12]
 8022a44:	2b02      	cmp	r3, #2
 8022a46:	d102      	bne.n	8022a4e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8022a48:	2301      	movs	r3, #1
 8022a4a:	73fb      	strb	r3, [r7, #15]
 8022a4c:	e001      	b.n	8022a52 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8022a4e:	f7f5 fb43 	bl	80180d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8022a52:	687b      	ldr	r3, [r7, #4]
 8022a54:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022a58:	7bfa      	ldrb	r2, [r7, #15]
 8022a5a:	4611      	mov	r1, r2
 8022a5c:	4618      	mov	r0, r3
 8022a5e:	f7fe fe20 	bl	80216a2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8022a62:	687b      	ldr	r3, [r7, #4]
 8022a64:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022a68:	4618      	mov	r0, r3
 8022a6a:	f7fe fdcc 	bl	8021606 <USBD_LL_Reset>
}
 8022a6e:	bf00      	nop
 8022a70:	3710      	adds	r7, #16
 8022a72:	46bd      	mov	sp, r7
 8022a74:	bd80      	pop	{r7, pc}
	...

08022a78 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022a78:	b580      	push	{r7, lr}
 8022a7a:	b082      	sub	sp, #8
 8022a7c:	af00      	add	r7, sp, #0
 8022a7e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8022a80:	687b      	ldr	r3, [r7, #4]
 8022a82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022a86:	4618      	mov	r0, r3
 8022a88:	f7fe fe1b 	bl	80216c2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8022a8c:	687b      	ldr	r3, [r7, #4]
 8022a8e:	681b      	ldr	r3, [r3, #0]
 8022a90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8022a94:	681b      	ldr	r3, [r3, #0]
 8022a96:	687a      	ldr	r2, [r7, #4]
 8022a98:	6812      	ldr	r2, [r2, #0]
 8022a9a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8022a9e:	f043 0301 	orr.w	r3, r3, #1
 8022aa2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8022aa4:	687b      	ldr	r3, [r7, #4]
 8022aa6:	6a1b      	ldr	r3, [r3, #32]
 8022aa8:	2b00      	cmp	r3, #0
 8022aaa:	d005      	beq.n	8022ab8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8022aac:	4b04      	ldr	r3, [pc, #16]	; (8022ac0 <HAL_PCD_SuspendCallback+0x48>)
 8022aae:	691b      	ldr	r3, [r3, #16]
 8022ab0:	4a03      	ldr	r2, [pc, #12]	; (8022ac0 <HAL_PCD_SuspendCallback+0x48>)
 8022ab2:	f043 0306 	orr.w	r3, r3, #6
 8022ab6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8022ab8:	bf00      	nop
 8022aba:	3708      	adds	r7, #8
 8022abc:	46bd      	mov	sp, r7
 8022abe:	bd80      	pop	{r7, pc}
 8022ac0:	e000ed00 	.word	0xe000ed00

08022ac4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022ac4:	b580      	push	{r7, lr}
 8022ac6:	b082      	sub	sp, #8
 8022ac8:	af00      	add	r7, sp, #0
 8022aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8022acc:	687b      	ldr	r3, [r7, #4]
 8022ace:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022ad2:	4618      	mov	r0, r3
 8022ad4:	f7fe fe0b 	bl	80216ee <USBD_LL_Resume>
}
 8022ad8:	bf00      	nop
 8022ada:	3708      	adds	r7, #8
 8022adc:	46bd      	mov	sp, r7
 8022ade:	bd80      	pop	{r7, pc}

08022ae0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022ae0:	b580      	push	{r7, lr}
 8022ae2:	b082      	sub	sp, #8
 8022ae4:	af00      	add	r7, sp, #0
 8022ae6:	6078      	str	r0, [r7, #4]
 8022ae8:	460b      	mov	r3, r1
 8022aea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8022aec:	687b      	ldr	r3, [r7, #4]
 8022aee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022af2:	78fa      	ldrb	r2, [r7, #3]
 8022af4:	4611      	mov	r1, r2
 8022af6:	4618      	mov	r0, r3
 8022af8:	f7fe fe59 	bl	80217ae <USBD_LL_IsoOUTIncomplete>
}
 8022afc:	bf00      	nop
 8022afe:	3708      	adds	r7, #8
 8022b00:	46bd      	mov	sp, r7
 8022b02:	bd80      	pop	{r7, pc}

08022b04 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022b04:	b580      	push	{r7, lr}
 8022b06:	b082      	sub	sp, #8
 8022b08:	af00      	add	r7, sp, #0
 8022b0a:	6078      	str	r0, [r7, #4]
 8022b0c:	460b      	mov	r3, r1
 8022b0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8022b10:	687b      	ldr	r3, [r7, #4]
 8022b12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022b16:	78fa      	ldrb	r2, [r7, #3]
 8022b18:	4611      	mov	r1, r2
 8022b1a:	4618      	mov	r0, r3
 8022b1c:	f7fe fe21 	bl	8021762 <USBD_LL_IsoINIncomplete>
}
 8022b20:	bf00      	nop
 8022b22:	3708      	adds	r7, #8
 8022b24:	46bd      	mov	sp, r7
 8022b26:	bd80      	pop	{r7, pc}

08022b28 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022b28:	b580      	push	{r7, lr}
 8022b2a:	b082      	sub	sp, #8
 8022b2c:	af00      	add	r7, sp, #0
 8022b2e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8022b30:	687b      	ldr	r3, [r7, #4]
 8022b32:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022b36:	4618      	mov	r0, r3
 8022b38:	f7fe fe5f 	bl	80217fa <USBD_LL_DevConnected>
}
 8022b3c:	bf00      	nop
 8022b3e:	3708      	adds	r7, #8
 8022b40:	46bd      	mov	sp, r7
 8022b42:	bd80      	pop	{r7, pc}

08022b44 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022b44:	b580      	push	{r7, lr}
 8022b46:	b082      	sub	sp, #8
 8022b48:	af00      	add	r7, sp, #0
 8022b4a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8022b4c:	687b      	ldr	r3, [r7, #4]
 8022b4e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022b52:	4618      	mov	r0, r3
 8022b54:	f7fe fe5c 	bl	8021810 <USBD_LL_DevDisconnected>
}
 8022b58:	bf00      	nop
 8022b5a:	3708      	adds	r7, #8
 8022b5c:	46bd      	mov	sp, r7
 8022b5e:	bd80      	pop	{r7, pc}

08022b60 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8022b60:	b580      	push	{r7, lr}
 8022b62:	b082      	sub	sp, #8
 8022b64:	af00      	add	r7, sp, #0
 8022b66:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8022b68:	687b      	ldr	r3, [r7, #4]
 8022b6a:	781b      	ldrb	r3, [r3, #0]
 8022b6c:	2b00      	cmp	r3, #0
 8022b6e:	d13c      	bne.n	8022bea <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8022b70:	4a20      	ldr	r2, [pc, #128]	; (8022bf4 <USBD_LL_Init+0x94>)
 8022b72:	687b      	ldr	r3, [r7, #4]
 8022b74:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8022b78:	687b      	ldr	r3, [r7, #4]
 8022b7a:	4a1e      	ldr	r2, [pc, #120]	; (8022bf4 <USBD_LL_Init+0x94>)
 8022b7c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8022b80:	4b1c      	ldr	r3, [pc, #112]	; (8022bf4 <USBD_LL_Init+0x94>)
 8022b82:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8022b86:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8022b88:	4b1a      	ldr	r3, [pc, #104]	; (8022bf4 <USBD_LL_Init+0x94>)
 8022b8a:	2206      	movs	r2, #6
 8022b8c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8022b8e:	4b19      	ldr	r3, [pc, #100]	; (8022bf4 <USBD_LL_Init+0x94>)
 8022b90:	2202      	movs	r2, #2
 8022b92:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8022b94:	4b17      	ldr	r3, [pc, #92]	; (8022bf4 <USBD_LL_Init+0x94>)
 8022b96:	2200      	movs	r2, #0
 8022b98:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8022b9a:	4b16      	ldr	r3, [pc, #88]	; (8022bf4 <USBD_LL_Init+0x94>)
 8022b9c:	2202      	movs	r2, #2
 8022b9e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8022ba0:	4b14      	ldr	r3, [pc, #80]	; (8022bf4 <USBD_LL_Init+0x94>)
 8022ba2:	2200      	movs	r2, #0
 8022ba4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8022ba6:	4b13      	ldr	r3, [pc, #76]	; (8022bf4 <USBD_LL_Init+0x94>)
 8022ba8:	2200      	movs	r2, #0
 8022baa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8022bac:	4b11      	ldr	r3, [pc, #68]	; (8022bf4 <USBD_LL_Init+0x94>)
 8022bae:	2200      	movs	r2, #0
 8022bb0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8022bb2:	4b10      	ldr	r3, [pc, #64]	; (8022bf4 <USBD_LL_Init+0x94>)
 8022bb4:	2200      	movs	r2, #0
 8022bb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8022bb8:	4b0e      	ldr	r3, [pc, #56]	; (8022bf4 <USBD_LL_Init+0x94>)
 8022bba:	2200      	movs	r2, #0
 8022bbc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8022bbe:	480d      	ldr	r0, [pc, #52]	; (8022bf4 <USBD_LL_Init+0x94>)
 8022bc0:	f7f7 fa15 	bl	8019fee <HAL_PCD_Init>
 8022bc4:	4603      	mov	r3, r0
 8022bc6:	2b00      	cmp	r3, #0
 8022bc8:	d001      	beq.n	8022bce <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8022bca:	f7f5 fa85 	bl	80180d8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8022bce:	2180      	movs	r1, #128	; 0x80
 8022bd0:	4808      	ldr	r0, [pc, #32]	; (8022bf4 <USBD_LL_Init+0x94>)
 8022bd2:	f7f8 fbd4 	bl	801b37e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8022bd6:	2240      	movs	r2, #64	; 0x40
 8022bd8:	2100      	movs	r1, #0
 8022bda:	4806      	ldr	r0, [pc, #24]	; (8022bf4 <USBD_LL_Init+0x94>)
 8022bdc:	f7f8 fb88 	bl	801b2f0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8022be0:	2280      	movs	r2, #128	; 0x80
 8022be2:	2101      	movs	r1, #1
 8022be4:	4803      	ldr	r0, [pc, #12]	; (8022bf4 <USBD_LL_Init+0x94>)
 8022be6:	f7f8 fb83 	bl	801b2f0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8022bea:	2300      	movs	r3, #0
}
 8022bec:	4618      	mov	r0, r3
 8022bee:	3708      	adds	r7, #8
 8022bf0:	46bd      	mov	sp, r7
 8022bf2:	bd80      	pop	{r7, pc}
 8022bf4:	20007118 	.word	0x20007118

08022bf8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8022bf8:	b580      	push	{r7, lr}
 8022bfa:	b084      	sub	sp, #16
 8022bfc:	af00      	add	r7, sp, #0
 8022bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022c00:	2300      	movs	r3, #0
 8022c02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022c04:	2300      	movs	r3, #0
 8022c06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8022c08:	687b      	ldr	r3, [r7, #4]
 8022c0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022c0e:	4618      	mov	r0, r3
 8022c10:	f7f7 fb11 	bl	801a236 <HAL_PCD_Start>
 8022c14:	4603      	mov	r3, r0
 8022c16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022c18:	7bfb      	ldrb	r3, [r7, #15]
 8022c1a:	4618      	mov	r0, r3
 8022c1c:	f000 f9b0 	bl	8022f80 <USBD_Get_USB_Status>
 8022c20:	4603      	mov	r3, r0
 8022c22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022c24:	7bbb      	ldrb	r3, [r7, #14]
}
 8022c26:	4618      	mov	r0, r3
 8022c28:	3710      	adds	r7, #16
 8022c2a:	46bd      	mov	sp, r7
 8022c2c:	bd80      	pop	{r7, pc}

08022c2e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8022c2e:	b580      	push	{r7, lr}
 8022c30:	b084      	sub	sp, #16
 8022c32:	af00      	add	r7, sp, #0
 8022c34:	6078      	str	r0, [r7, #4]
 8022c36:	4608      	mov	r0, r1
 8022c38:	4611      	mov	r1, r2
 8022c3a:	461a      	mov	r2, r3
 8022c3c:	4603      	mov	r3, r0
 8022c3e:	70fb      	strb	r3, [r7, #3]
 8022c40:	460b      	mov	r3, r1
 8022c42:	70bb      	strb	r3, [r7, #2]
 8022c44:	4613      	mov	r3, r2
 8022c46:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022c48:	2300      	movs	r3, #0
 8022c4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022c4c:	2300      	movs	r3, #0
 8022c4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8022c50:	687b      	ldr	r3, [r7, #4]
 8022c52:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8022c56:	78bb      	ldrb	r3, [r7, #2]
 8022c58:	883a      	ldrh	r2, [r7, #0]
 8022c5a:	78f9      	ldrb	r1, [r7, #3]
 8022c5c:	f7f7 ff22 	bl	801aaa4 <HAL_PCD_EP_Open>
 8022c60:	4603      	mov	r3, r0
 8022c62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022c64:	7bfb      	ldrb	r3, [r7, #15]
 8022c66:	4618      	mov	r0, r3
 8022c68:	f000 f98a 	bl	8022f80 <USBD_Get_USB_Status>
 8022c6c:	4603      	mov	r3, r0
 8022c6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022c70:	7bbb      	ldrb	r3, [r7, #14]
}
 8022c72:	4618      	mov	r0, r3
 8022c74:	3710      	adds	r7, #16
 8022c76:	46bd      	mov	sp, r7
 8022c78:	bd80      	pop	{r7, pc}

08022c7a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022c7a:	b580      	push	{r7, lr}
 8022c7c:	b084      	sub	sp, #16
 8022c7e:	af00      	add	r7, sp, #0
 8022c80:	6078      	str	r0, [r7, #4]
 8022c82:	460b      	mov	r3, r1
 8022c84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022c86:	2300      	movs	r3, #0
 8022c88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022c8a:	2300      	movs	r3, #0
 8022c8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8022c8e:	687b      	ldr	r3, [r7, #4]
 8022c90:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022c94:	78fa      	ldrb	r2, [r7, #3]
 8022c96:	4611      	mov	r1, r2
 8022c98:	4618      	mov	r0, r3
 8022c9a:	f7f7 ff6b 	bl	801ab74 <HAL_PCD_EP_Close>
 8022c9e:	4603      	mov	r3, r0
 8022ca0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022ca2:	7bfb      	ldrb	r3, [r7, #15]
 8022ca4:	4618      	mov	r0, r3
 8022ca6:	f000 f96b 	bl	8022f80 <USBD_Get_USB_Status>
 8022caa:	4603      	mov	r3, r0
 8022cac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022cae:	7bbb      	ldrb	r3, [r7, #14]
}
 8022cb0:	4618      	mov	r0, r3
 8022cb2:	3710      	adds	r7, #16
 8022cb4:	46bd      	mov	sp, r7
 8022cb6:	bd80      	pop	{r7, pc}

08022cb8 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022cb8:	b580      	push	{r7, lr}
 8022cba:	b084      	sub	sp, #16
 8022cbc:	af00      	add	r7, sp, #0
 8022cbe:	6078      	str	r0, [r7, #4]
 8022cc0:	460b      	mov	r3, r1
 8022cc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022cc4:	2300      	movs	r3, #0
 8022cc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022cc8:	2300      	movs	r3, #0
 8022cca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8022ccc:	687b      	ldr	r3, [r7, #4]
 8022cce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022cd2:	78fa      	ldrb	r2, [r7, #3]
 8022cd4:	4611      	mov	r1, r2
 8022cd6:	4618      	mov	r0, r3
 8022cd8:	f7f8 f8fd 	bl	801aed6 <HAL_PCD_EP_Flush>
 8022cdc:	4603      	mov	r3, r0
 8022cde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022ce0:	7bfb      	ldrb	r3, [r7, #15]
 8022ce2:	4618      	mov	r0, r3
 8022ce4:	f000 f94c 	bl	8022f80 <USBD_Get_USB_Status>
 8022ce8:	4603      	mov	r3, r0
 8022cea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022cec:	7bbb      	ldrb	r3, [r7, #14]
}
 8022cee:	4618      	mov	r0, r3
 8022cf0:	3710      	adds	r7, #16
 8022cf2:	46bd      	mov	sp, r7
 8022cf4:	bd80      	pop	{r7, pc}

08022cf6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022cf6:	b580      	push	{r7, lr}
 8022cf8:	b084      	sub	sp, #16
 8022cfa:	af00      	add	r7, sp, #0
 8022cfc:	6078      	str	r0, [r7, #4]
 8022cfe:	460b      	mov	r3, r1
 8022d00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022d02:	2300      	movs	r3, #0
 8022d04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022d06:	2300      	movs	r3, #0
 8022d08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8022d0a:	687b      	ldr	r3, [r7, #4]
 8022d0c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022d10:	78fa      	ldrb	r2, [r7, #3]
 8022d12:	4611      	mov	r1, r2
 8022d14:	4618      	mov	r0, r3
 8022d16:	f7f8 f824 	bl	801ad62 <HAL_PCD_EP_SetStall>
 8022d1a:	4603      	mov	r3, r0
 8022d1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022d1e:	7bfb      	ldrb	r3, [r7, #15]
 8022d20:	4618      	mov	r0, r3
 8022d22:	f000 f92d 	bl	8022f80 <USBD_Get_USB_Status>
 8022d26:	4603      	mov	r3, r0
 8022d28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022d2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8022d2c:	4618      	mov	r0, r3
 8022d2e:	3710      	adds	r7, #16
 8022d30:	46bd      	mov	sp, r7
 8022d32:	bd80      	pop	{r7, pc}

08022d34 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022d34:	b580      	push	{r7, lr}
 8022d36:	b084      	sub	sp, #16
 8022d38:	af00      	add	r7, sp, #0
 8022d3a:	6078      	str	r0, [r7, #4]
 8022d3c:	460b      	mov	r3, r1
 8022d3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022d40:	2300      	movs	r3, #0
 8022d42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022d44:	2300      	movs	r3, #0
 8022d46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8022d48:	687b      	ldr	r3, [r7, #4]
 8022d4a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022d4e:	78fa      	ldrb	r2, [r7, #3]
 8022d50:	4611      	mov	r1, r2
 8022d52:	4618      	mov	r0, r3
 8022d54:	f7f8 f869 	bl	801ae2a <HAL_PCD_EP_ClrStall>
 8022d58:	4603      	mov	r3, r0
 8022d5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022d5c:	7bfb      	ldrb	r3, [r7, #15]
 8022d5e:	4618      	mov	r0, r3
 8022d60:	f000 f90e 	bl	8022f80 <USBD_Get_USB_Status>
 8022d64:	4603      	mov	r3, r0
 8022d66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022d68:	7bbb      	ldrb	r3, [r7, #14]
}
 8022d6a:	4618      	mov	r0, r3
 8022d6c:	3710      	adds	r7, #16
 8022d6e:	46bd      	mov	sp, r7
 8022d70:	bd80      	pop	{r7, pc}

08022d72 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022d72:	b480      	push	{r7}
 8022d74:	b085      	sub	sp, #20
 8022d76:	af00      	add	r7, sp, #0
 8022d78:	6078      	str	r0, [r7, #4]
 8022d7a:	460b      	mov	r3, r1
 8022d7c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8022d7e:	687b      	ldr	r3, [r7, #4]
 8022d80:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022d84:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8022d86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8022d8a:	2b00      	cmp	r3, #0
 8022d8c:	da0b      	bge.n	8022da6 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8022d8e:	78fb      	ldrb	r3, [r7, #3]
 8022d90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8022d94:	68f9      	ldr	r1, [r7, #12]
 8022d96:	4613      	mov	r3, r2
 8022d98:	00db      	lsls	r3, r3, #3
 8022d9a:	1a9b      	subs	r3, r3, r2
 8022d9c:	009b      	lsls	r3, r3, #2
 8022d9e:	440b      	add	r3, r1
 8022da0:	333e      	adds	r3, #62	; 0x3e
 8022da2:	781b      	ldrb	r3, [r3, #0]
 8022da4:	e00b      	b.n	8022dbe <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8022da6:	78fb      	ldrb	r3, [r7, #3]
 8022da8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8022dac:	68f9      	ldr	r1, [r7, #12]
 8022dae:	4613      	mov	r3, r2
 8022db0:	00db      	lsls	r3, r3, #3
 8022db2:	1a9b      	subs	r3, r3, r2
 8022db4:	009b      	lsls	r3, r3, #2
 8022db6:	440b      	add	r3, r1
 8022db8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8022dbc:	781b      	ldrb	r3, [r3, #0]
  }
}
 8022dbe:	4618      	mov	r0, r3
 8022dc0:	3714      	adds	r7, #20
 8022dc2:	46bd      	mov	sp, r7
 8022dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022dc8:	4770      	bx	lr

08022dca <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8022dca:	b580      	push	{r7, lr}
 8022dcc:	b084      	sub	sp, #16
 8022dce:	af00      	add	r7, sp, #0
 8022dd0:	6078      	str	r0, [r7, #4]
 8022dd2:	460b      	mov	r3, r1
 8022dd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022dd6:	2300      	movs	r3, #0
 8022dd8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022dda:	2300      	movs	r3, #0
 8022ddc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8022dde:	687b      	ldr	r3, [r7, #4]
 8022de0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022de4:	78fa      	ldrb	r2, [r7, #3]
 8022de6:	4611      	mov	r1, r2
 8022de8:	4618      	mov	r0, r3
 8022dea:	f7f7 fe36 	bl	801aa5a <HAL_PCD_SetAddress>
 8022dee:	4603      	mov	r3, r0
 8022df0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022df2:	7bfb      	ldrb	r3, [r7, #15]
 8022df4:	4618      	mov	r0, r3
 8022df6:	f000 f8c3 	bl	8022f80 <USBD_Get_USB_Status>
 8022dfa:	4603      	mov	r3, r0
 8022dfc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022dfe:	7bbb      	ldrb	r3, [r7, #14]
}
 8022e00:	4618      	mov	r0, r3
 8022e02:	3710      	adds	r7, #16
 8022e04:	46bd      	mov	sp, r7
 8022e06:	bd80      	pop	{r7, pc}

08022e08 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8022e08:	b580      	push	{r7, lr}
 8022e0a:	b086      	sub	sp, #24
 8022e0c:	af00      	add	r7, sp, #0
 8022e0e:	60f8      	str	r0, [r7, #12]
 8022e10:	607a      	str	r2, [r7, #4]
 8022e12:	603b      	str	r3, [r7, #0]
 8022e14:	460b      	mov	r3, r1
 8022e16:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022e18:	2300      	movs	r3, #0
 8022e1a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022e1c:	2300      	movs	r3, #0
 8022e1e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8022e20:	68fb      	ldr	r3, [r7, #12]
 8022e22:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8022e26:	7af9      	ldrb	r1, [r7, #11]
 8022e28:	683b      	ldr	r3, [r7, #0]
 8022e2a:	687a      	ldr	r2, [r7, #4]
 8022e2c:	f7f7 ff4f 	bl	801acce <HAL_PCD_EP_Transmit>
 8022e30:	4603      	mov	r3, r0
 8022e32:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022e34:	7dfb      	ldrb	r3, [r7, #23]
 8022e36:	4618      	mov	r0, r3
 8022e38:	f000 f8a2 	bl	8022f80 <USBD_Get_USB_Status>
 8022e3c:	4603      	mov	r3, r0
 8022e3e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8022e40:	7dbb      	ldrb	r3, [r7, #22]
}
 8022e42:	4618      	mov	r0, r3
 8022e44:	3718      	adds	r7, #24
 8022e46:	46bd      	mov	sp, r7
 8022e48:	bd80      	pop	{r7, pc}

08022e4a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8022e4a:	b580      	push	{r7, lr}
 8022e4c:	b086      	sub	sp, #24
 8022e4e:	af00      	add	r7, sp, #0
 8022e50:	60f8      	str	r0, [r7, #12]
 8022e52:	607a      	str	r2, [r7, #4]
 8022e54:	603b      	str	r3, [r7, #0]
 8022e56:	460b      	mov	r3, r1
 8022e58:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022e5a:	2300      	movs	r3, #0
 8022e5c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022e5e:	2300      	movs	r3, #0
 8022e60:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8022e62:	68fb      	ldr	r3, [r7, #12]
 8022e64:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8022e68:	7af9      	ldrb	r1, [r7, #11]
 8022e6a:	683b      	ldr	r3, [r7, #0]
 8022e6c:	687a      	ldr	r2, [r7, #4]
 8022e6e:	f7f7 fecb 	bl	801ac08 <HAL_PCD_EP_Receive>
 8022e72:	4603      	mov	r3, r0
 8022e74:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022e76:	7dfb      	ldrb	r3, [r7, #23]
 8022e78:	4618      	mov	r0, r3
 8022e7a:	f000 f881 	bl	8022f80 <USBD_Get_USB_Status>
 8022e7e:	4603      	mov	r3, r0
 8022e80:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8022e82:	7dbb      	ldrb	r3, [r7, #22]
}
 8022e84:	4618      	mov	r0, r3
 8022e86:	3718      	adds	r7, #24
 8022e88:	46bd      	mov	sp, r7
 8022e8a:	bd80      	pop	{r7, pc}

08022e8c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022e8c:	b580      	push	{r7, lr}
 8022e8e:	b082      	sub	sp, #8
 8022e90:	af00      	add	r7, sp, #0
 8022e92:	6078      	str	r0, [r7, #4]
 8022e94:	460b      	mov	r3, r1
 8022e96:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8022e98:	687b      	ldr	r3, [r7, #4]
 8022e9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022e9e:	78fa      	ldrb	r2, [r7, #3]
 8022ea0:	4611      	mov	r1, r2
 8022ea2:	4618      	mov	r0, r3
 8022ea4:	f7f7 fefb 	bl	801ac9e <HAL_PCD_EP_GetRxCount>
 8022ea8:	4603      	mov	r3, r0
}
 8022eaa:	4618      	mov	r0, r3
 8022eac:	3708      	adds	r7, #8
 8022eae:	46bd      	mov	sp, r7
 8022eb0:	bd80      	pop	{r7, pc}
	...

08022eb4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8022eb4:	b580      	push	{r7, lr}
 8022eb6:	b082      	sub	sp, #8
 8022eb8:	af00      	add	r7, sp, #0
 8022eba:	6078      	str	r0, [r7, #4]
 8022ebc:	460b      	mov	r3, r1
 8022ebe:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8022ec0:	78fb      	ldrb	r3, [r7, #3]
 8022ec2:	2b00      	cmp	r3, #0
 8022ec4:	d002      	beq.n	8022ecc <HAL_PCDEx_LPM_Callback+0x18>
 8022ec6:	2b01      	cmp	r3, #1
 8022ec8:	d01f      	beq.n	8022f0a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8022eca:	e03b      	b.n	8022f44 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8022ecc:	687b      	ldr	r3, [r7, #4]
 8022ece:	6a1b      	ldr	r3, [r3, #32]
 8022ed0:	2b00      	cmp	r3, #0
 8022ed2:	d007      	beq.n	8022ee4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8022ed4:	f7f4 fc96 	bl	8017804 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8022ed8:	4b1c      	ldr	r3, [pc, #112]	; (8022f4c <HAL_PCDEx_LPM_Callback+0x98>)
 8022eda:	691b      	ldr	r3, [r3, #16]
 8022edc:	4a1b      	ldr	r2, [pc, #108]	; (8022f4c <HAL_PCDEx_LPM_Callback+0x98>)
 8022ede:	f023 0306 	bic.w	r3, r3, #6
 8022ee2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8022ee4:	687b      	ldr	r3, [r7, #4]
 8022ee6:	681b      	ldr	r3, [r3, #0]
 8022ee8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8022eec:	681b      	ldr	r3, [r3, #0]
 8022eee:	687a      	ldr	r2, [r7, #4]
 8022ef0:	6812      	ldr	r2, [r2, #0]
 8022ef2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8022ef6:	f023 0301 	bic.w	r3, r3, #1
 8022efa:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8022efc:	687b      	ldr	r3, [r7, #4]
 8022efe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022f02:	4618      	mov	r0, r3
 8022f04:	f7fe fbf3 	bl	80216ee <USBD_LL_Resume>
    break;
 8022f08:	e01c      	b.n	8022f44 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8022f0a:	687b      	ldr	r3, [r7, #4]
 8022f0c:	681b      	ldr	r3, [r3, #0]
 8022f0e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8022f12:	681b      	ldr	r3, [r3, #0]
 8022f14:	687a      	ldr	r2, [r7, #4]
 8022f16:	6812      	ldr	r2, [r2, #0]
 8022f18:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8022f1c:	f043 0301 	orr.w	r3, r3, #1
 8022f20:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8022f22:	687b      	ldr	r3, [r7, #4]
 8022f24:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022f28:	4618      	mov	r0, r3
 8022f2a:	f7fe fbca 	bl	80216c2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8022f2e:	687b      	ldr	r3, [r7, #4]
 8022f30:	6a1b      	ldr	r3, [r3, #32]
 8022f32:	2b00      	cmp	r3, #0
 8022f34:	d005      	beq.n	8022f42 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8022f36:	4b05      	ldr	r3, [pc, #20]	; (8022f4c <HAL_PCDEx_LPM_Callback+0x98>)
 8022f38:	691b      	ldr	r3, [r3, #16]
 8022f3a:	4a04      	ldr	r2, [pc, #16]	; (8022f4c <HAL_PCDEx_LPM_Callback+0x98>)
 8022f3c:	f043 0306 	orr.w	r3, r3, #6
 8022f40:	6113      	str	r3, [r2, #16]
    break;
 8022f42:	bf00      	nop
}
 8022f44:	bf00      	nop
 8022f46:	3708      	adds	r7, #8
 8022f48:	46bd      	mov	sp, r7
 8022f4a:	bd80      	pop	{r7, pc}
 8022f4c:	e000ed00 	.word	0xe000ed00

08022f50 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8022f50:	b480      	push	{r7}
 8022f52:	b083      	sub	sp, #12
 8022f54:	af00      	add	r7, sp, #0
 8022f56:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8022f58:	4b03      	ldr	r3, [pc, #12]	; (8022f68 <USBD_static_malloc+0x18>)
}
 8022f5a:	4618      	mov	r0, r3
 8022f5c:	370c      	adds	r7, #12
 8022f5e:	46bd      	mov	sp, r7
 8022f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f64:	4770      	bx	lr
 8022f66:	bf00      	nop
 8022f68:	200007b8 	.word	0x200007b8

08022f6c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8022f6c:	b480      	push	{r7}
 8022f6e:	b083      	sub	sp, #12
 8022f70:	af00      	add	r7, sp, #0
 8022f72:	6078      	str	r0, [r7, #4]

}
 8022f74:	bf00      	nop
 8022f76:	370c      	adds	r7, #12
 8022f78:	46bd      	mov	sp, r7
 8022f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f7e:	4770      	bx	lr

08022f80 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8022f80:	b480      	push	{r7}
 8022f82:	b085      	sub	sp, #20
 8022f84:	af00      	add	r7, sp, #0
 8022f86:	4603      	mov	r3, r0
 8022f88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022f8a:	2300      	movs	r3, #0
 8022f8c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8022f8e:	79fb      	ldrb	r3, [r7, #7]
 8022f90:	2b03      	cmp	r3, #3
 8022f92:	d817      	bhi.n	8022fc4 <USBD_Get_USB_Status+0x44>
 8022f94:	a201      	add	r2, pc, #4	; (adr r2, 8022f9c <USBD_Get_USB_Status+0x1c>)
 8022f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022f9a:	bf00      	nop
 8022f9c:	08022fad 	.word	0x08022fad
 8022fa0:	08022fb3 	.word	0x08022fb3
 8022fa4:	08022fb9 	.word	0x08022fb9
 8022fa8:	08022fbf 	.word	0x08022fbf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8022fac:	2300      	movs	r3, #0
 8022fae:	73fb      	strb	r3, [r7, #15]
    break;
 8022fb0:	e00b      	b.n	8022fca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8022fb2:	2303      	movs	r3, #3
 8022fb4:	73fb      	strb	r3, [r7, #15]
    break;
 8022fb6:	e008      	b.n	8022fca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8022fb8:	2301      	movs	r3, #1
 8022fba:	73fb      	strb	r3, [r7, #15]
    break;
 8022fbc:	e005      	b.n	8022fca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8022fbe:	2303      	movs	r3, #3
 8022fc0:	73fb      	strb	r3, [r7, #15]
    break;
 8022fc2:	e002      	b.n	8022fca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8022fc4:	2303      	movs	r3, #3
 8022fc6:	73fb      	strb	r3, [r7, #15]
    break;
 8022fc8:	bf00      	nop
  }
  return usb_status;
 8022fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8022fcc:	4618      	mov	r0, r3
 8022fce:	3714      	adds	r7, #20
 8022fd0:	46bd      	mov	sp, r7
 8022fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022fd6:	4770      	bx	lr

08022fd8 <__errno>:
 8022fd8:	4b01      	ldr	r3, [pc, #4]	; (8022fe0 <__errno+0x8>)
 8022fda:	6818      	ldr	r0, [r3, #0]
 8022fdc:	4770      	bx	lr
 8022fde:	bf00      	nop
 8022fe0:	200006fc 	.word	0x200006fc

08022fe4 <__libc_init_array>:
 8022fe4:	b570      	push	{r4, r5, r6, lr}
 8022fe6:	4d0d      	ldr	r5, [pc, #52]	; (802301c <__libc_init_array+0x38>)
 8022fe8:	4c0d      	ldr	r4, [pc, #52]	; (8023020 <__libc_init_array+0x3c>)
 8022fea:	1b64      	subs	r4, r4, r5
 8022fec:	10a4      	asrs	r4, r4, #2
 8022fee:	2600      	movs	r6, #0
 8022ff0:	42a6      	cmp	r6, r4
 8022ff2:	d109      	bne.n	8023008 <__libc_init_array+0x24>
 8022ff4:	4d0b      	ldr	r5, [pc, #44]	; (8023024 <__libc_init_array+0x40>)
 8022ff6:	4c0c      	ldr	r4, [pc, #48]	; (8023028 <__libc_init_array+0x44>)
 8022ff8:	f000 f906 	bl	8023208 <_init>
 8022ffc:	1b64      	subs	r4, r4, r5
 8022ffe:	10a4      	asrs	r4, r4, #2
 8023000:	2600      	movs	r6, #0
 8023002:	42a6      	cmp	r6, r4
 8023004:	d105      	bne.n	8023012 <__libc_init_array+0x2e>
 8023006:	bd70      	pop	{r4, r5, r6, pc}
 8023008:	f855 3b04 	ldr.w	r3, [r5], #4
 802300c:	4798      	blx	r3
 802300e:	3601      	adds	r6, #1
 8023010:	e7ee      	b.n	8022ff0 <__libc_init_array+0xc>
 8023012:	f855 3b04 	ldr.w	r3, [r5], #4
 8023016:	4798      	blx	r3
 8023018:	3601      	adds	r6, #1
 802301a:	e7f2      	b.n	8023002 <__libc_init_array+0x1e>
 802301c:	08023228 	.word	0x08023228
 8023020:	08023228 	.word	0x08023228
 8023024:	08023228 	.word	0x08023228
 8023028:	0802322c 	.word	0x0802322c

0802302c <malloc>:
 802302c:	4b02      	ldr	r3, [pc, #8]	; (8023038 <malloc+0xc>)
 802302e:	4601      	mov	r1, r0
 8023030:	6818      	ldr	r0, [r3, #0]
 8023032:	f000 b871 	b.w	8023118 <_malloc_r>
 8023036:	bf00      	nop
 8023038:	200006fc 	.word	0x200006fc

0802303c <free>:
 802303c:	4b02      	ldr	r3, [pc, #8]	; (8023048 <free+0xc>)
 802303e:	4601      	mov	r1, r0
 8023040:	6818      	ldr	r0, [r3, #0]
 8023042:	f000 b819 	b.w	8023078 <_free_r>
 8023046:	bf00      	nop
 8023048:	200006fc 	.word	0x200006fc

0802304c <memcpy>:
 802304c:	440a      	add	r2, r1
 802304e:	4291      	cmp	r1, r2
 8023050:	f100 33ff 	add.w	r3, r0, #4294967295
 8023054:	d100      	bne.n	8023058 <memcpy+0xc>
 8023056:	4770      	bx	lr
 8023058:	b510      	push	{r4, lr}
 802305a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802305e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8023062:	4291      	cmp	r1, r2
 8023064:	d1f9      	bne.n	802305a <memcpy+0xe>
 8023066:	bd10      	pop	{r4, pc}

08023068 <memset>:
 8023068:	4402      	add	r2, r0
 802306a:	4603      	mov	r3, r0
 802306c:	4293      	cmp	r3, r2
 802306e:	d100      	bne.n	8023072 <memset+0xa>
 8023070:	4770      	bx	lr
 8023072:	f803 1b01 	strb.w	r1, [r3], #1
 8023076:	e7f9      	b.n	802306c <memset+0x4>

08023078 <_free_r>:
 8023078:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802307a:	2900      	cmp	r1, #0
 802307c:	d048      	beq.n	8023110 <_free_r+0x98>
 802307e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023082:	9001      	str	r0, [sp, #4]
 8023084:	2b00      	cmp	r3, #0
 8023086:	f1a1 0404 	sub.w	r4, r1, #4
 802308a:	bfb8      	it	lt
 802308c:	18e4      	addlt	r4, r4, r3
 802308e:	f000 f8ad 	bl	80231ec <__malloc_lock>
 8023092:	4a20      	ldr	r2, [pc, #128]	; (8023114 <_free_r+0x9c>)
 8023094:	9801      	ldr	r0, [sp, #4]
 8023096:	6813      	ldr	r3, [r2, #0]
 8023098:	4615      	mov	r5, r2
 802309a:	b933      	cbnz	r3, 80230aa <_free_r+0x32>
 802309c:	6063      	str	r3, [r4, #4]
 802309e:	6014      	str	r4, [r2, #0]
 80230a0:	b003      	add	sp, #12
 80230a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80230a6:	f000 b8a7 	b.w	80231f8 <__malloc_unlock>
 80230aa:	42a3      	cmp	r3, r4
 80230ac:	d90b      	bls.n	80230c6 <_free_r+0x4e>
 80230ae:	6821      	ldr	r1, [r4, #0]
 80230b0:	1862      	adds	r2, r4, r1
 80230b2:	4293      	cmp	r3, r2
 80230b4:	bf04      	itt	eq
 80230b6:	681a      	ldreq	r2, [r3, #0]
 80230b8:	685b      	ldreq	r3, [r3, #4]
 80230ba:	6063      	str	r3, [r4, #4]
 80230bc:	bf04      	itt	eq
 80230be:	1852      	addeq	r2, r2, r1
 80230c0:	6022      	streq	r2, [r4, #0]
 80230c2:	602c      	str	r4, [r5, #0]
 80230c4:	e7ec      	b.n	80230a0 <_free_r+0x28>
 80230c6:	461a      	mov	r2, r3
 80230c8:	685b      	ldr	r3, [r3, #4]
 80230ca:	b10b      	cbz	r3, 80230d0 <_free_r+0x58>
 80230cc:	42a3      	cmp	r3, r4
 80230ce:	d9fa      	bls.n	80230c6 <_free_r+0x4e>
 80230d0:	6811      	ldr	r1, [r2, #0]
 80230d2:	1855      	adds	r5, r2, r1
 80230d4:	42a5      	cmp	r5, r4
 80230d6:	d10b      	bne.n	80230f0 <_free_r+0x78>
 80230d8:	6824      	ldr	r4, [r4, #0]
 80230da:	4421      	add	r1, r4
 80230dc:	1854      	adds	r4, r2, r1
 80230de:	42a3      	cmp	r3, r4
 80230e0:	6011      	str	r1, [r2, #0]
 80230e2:	d1dd      	bne.n	80230a0 <_free_r+0x28>
 80230e4:	681c      	ldr	r4, [r3, #0]
 80230e6:	685b      	ldr	r3, [r3, #4]
 80230e8:	6053      	str	r3, [r2, #4]
 80230ea:	4421      	add	r1, r4
 80230ec:	6011      	str	r1, [r2, #0]
 80230ee:	e7d7      	b.n	80230a0 <_free_r+0x28>
 80230f0:	d902      	bls.n	80230f8 <_free_r+0x80>
 80230f2:	230c      	movs	r3, #12
 80230f4:	6003      	str	r3, [r0, #0]
 80230f6:	e7d3      	b.n	80230a0 <_free_r+0x28>
 80230f8:	6825      	ldr	r5, [r4, #0]
 80230fa:	1961      	adds	r1, r4, r5
 80230fc:	428b      	cmp	r3, r1
 80230fe:	bf04      	itt	eq
 8023100:	6819      	ldreq	r1, [r3, #0]
 8023102:	685b      	ldreq	r3, [r3, #4]
 8023104:	6063      	str	r3, [r4, #4]
 8023106:	bf04      	itt	eq
 8023108:	1949      	addeq	r1, r1, r5
 802310a:	6021      	streq	r1, [r4, #0]
 802310c:	6054      	str	r4, [r2, #4]
 802310e:	e7c7      	b.n	80230a0 <_free_r+0x28>
 8023110:	b003      	add	sp, #12
 8023112:	bd30      	pop	{r4, r5, pc}
 8023114:	20000a30 	.word	0x20000a30

08023118 <_malloc_r>:
 8023118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802311a:	1ccd      	adds	r5, r1, #3
 802311c:	f025 0503 	bic.w	r5, r5, #3
 8023120:	3508      	adds	r5, #8
 8023122:	2d0c      	cmp	r5, #12
 8023124:	bf38      	it	cc
 8023126:	250c      	movcc	r5, #12
 8023128:	2d00      	cmp	r5, #0
 802312a:	4606      	mov	r6, r0
 802312c:	db01      	blt.n	8023132 <_malloc_r+0x1a>
 802312e:	42a9      	cmp	r1, r5
 8023130:	d903      	bls.n	802313a <_malloc_r+0x22>
 8023132:	230c      	movs	r3, #12
 8023134:	6033      	str	r3, [r6, #0]
 8023136:	2000      	movs	r0, #0
 8023138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802313a:	f000 f857 	bl	80231ec <__malloc_lock>
 802313e:	4921      	ldr	r1, [pc, #132]	; (80231c4 <_malloc_r+0xac>)
 8023140:	680a      	ldr	r2, [r1, #0]
 8023142:	4614      	mov	r4, r2
 8023144:	b99c      	cbnz	r4, 802316e <_malloc_r+0x56>
 8023146:	4f20      	ldr	r7, [pc, #128]	; (80231c8 <_malloc_r+0xb0>)
 8023148:	683b      	ldr	r3, [r7, #0]
 802314a:	b923      	cbnz	r3, 8023156 <_malloc_r+0x3e>
 802314c:	4621      	mov	r1, r4
 802314e:	4630      	mov	r0, r6
 8023150:	f000 f83c 	bl	80231cc <_sbrk_r>
 8023154:	6038      	str	r0, [r7, #0]
 8023156:	4629      	mov	r1, r5
 8023158:	4630      	mov	r0, r6
 802315a:	f000 f837 	bl	80231cc <_sbrk_r>
 802315e:	1c43      	adds	r3, r0, #1
 8023160:	d123      	bne.n	80231aa <_malloc_r+0x92>
 8023162:	230c      	movs	r3, #12
 8023164:	6033      	str	r3, [r6, #0]
 8023166:	4630      	mov	r0, r6
 8023168:	f000 f846 	bl	80231f8 <__malloc_unlock>
 802316c:	e7e3      	b.n	8023136 <_malloc_r+0x1e>
 802316e:	6823      	ldr	r3, [r4, #0]
 8023170:	1b5b      	subs	r3, r3, r5
 8023172:	d417      	bmi.n	80231a4 <_malloc_r+0x8c>
 8023174:	2b0b      	cmp	r3, #11
 8023176:	d903      	bls.n	8023180 <_malloc_r+0x68>
 8023178:	6023      	str	r3, [r4, #0]
 802317a:	441c      	add	r4, r3
 802317c:	6025      	str	r5, [r4, #0]
 802317e:	e004      	b.n	802318a <_malloc_r+0x72>
 8023180:	6863      	ldr	r3, [r4, #4]
 8023182:	42a2      	cmp	r2, r4
 8023184:	bf0c      	ite	eq
 8023186:	600b      	streq	r3, [r1, #0]
 8023188:	6053      	strne	r3, [r2, #4]
 802318a:	4630      	mov	r0, r6
 802318c:	f000 f834 	bl	80231f8 <__malloc_unlock>
 8023190:	f104 000b 	add.w	r0, r4, #11
 8023194:	1d23      	adds	r3, r4, #4
 8023196:	f020 0007 	bic.w	r0, r0, #7
 802319a:	1ac2      	subs	r2, r0, r3
 802319c:	d0cc      	beq.n	8023138 <_malloc_r+0x20>
 802319e:	1a1b      	subs	r3, r3, r0
 80231a0:	50a3      	str	r3, [r4, r2]
 80231a2:	e7c9      	b.n	8023138 <_malloc_r+0x20>
 80231a4:	4622      	mov	r2, r4
 80231a6:	6864      	ldr	r4, [r4, #4]
 80231a8:	e7cc      	b.n	8023144 <_malloc_r+0x2c>
 80231aa:	1cc4      	adds	r4, r0, #3
 80231ac:	f024 0403 	bic.w	r4, r4, #3
 80231b0:	42a0      	cmp	r0, r4
 80231b2:	d0e3      	beq.n	802317c <_malloc_r+0x64>
 80231b4:	1a21      	subs	r1, r4, r0
 80231b6:	4630      	mov	r0, r6
 80231b8:	f000 f808 	bl	80231cc <_sbrk_r>
 80231bc:	3001      	adds	r0, #1
 80231be:	d1dd      	bne.n	802317c <_malloc_r+0x64>
 80231c0:	e7cf      	b.n	8023162 <_malloc_r+0x4a>
 80231c2:	bf00      	nop
 80231c4:	20000a30 	.word	0x20000a30
 80231c8:	20000a34 	.word	0x20000a34

080231cc <_sbrk_r>:
 80231cc:	b538      	push	{r3, r4, r5, lr}
 80231ce:	4d06      	ldr	r5, [pc, #24]	; (80231e8 <_sbrk_r+0x1c>)
 80231d0:	2300      	movs	r3, #0
 80231d2:	4604      	mov	r4, r0
 80231d4:	4608      	mov	r0, r1
 80231d6:	602b      	str	r3, [r5, #0]
 80231d8:	f7f5 fa2e 	bl	8018638 <_sbrk>
 80231dc:	1c43      	adds	r3, r0, #1
 80231de:	d102      	bne.n	80231e6 <_sbrk_r+0x1a>
 80231e0:	682b      	ldr	r3, [r5, #0]
 80231e2:	b103      	cbz	r3, 80231e6 <_sbrk_r+0x1a>
 80231e4:	6023      	str	r3, [r4, #0]
 80231e6:	bd38      	pop	{r3, r4, r5, pc}
 80231e8:	20007520 	.word	0x20007520

080231ec <__malloc_lock>:
 80231ec:	4801      	ldr	r0, [pc, #4]	; (80231f4 <__malloc_lock+0x8>)
 80231ee:	f000 b809 	b.w	8023204 <__retarget_lock_acquire_recursive>
 80231f2:	bf00      	nop
 80231f4:	20007528 	.word	0x20007528

080231f8 <__malloc_unlock>:
 80231f8:	4801      	ldr	r0, [pc, #4]	; (8023200 <__malloc_unlock+0x8>)
 80231fa:	f000 b804 	b.w	8023206 <__retarget_lock_release_recursive>
 80231fe:	bf00      	nop
 8023200:	20007528 	.word	0x20007528

08023204 <__retarget_lock_acquire_recursive>:
 8023204:	4770      	bx	lr

08023206 <__retarget_lock_release_recursive>:
 8023206:	4770      	bx	lr

08023208 <_init>:
 8023208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802320a:	bf00      	nop
 802320c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802320e:	bc08      	pop	{r3}
 8023210:	469e      	mov	lr, r3
 8023212:	4770      	bx	lr

08023214 <_fini>:
 8023214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023216:	bf00      	nop
 8023218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802321a:	bc08      	pop	{r3}
 802321c:	469e      	mov	lr, r3
 802321e:	4770      	bx	lr
