
oscilliscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000171ac  0800c000  0800c000  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021c8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080231ac  080231ac  00040764  2**0
                  CONTENTS
  4 .ARM          00000008  080231ac  080231ac  000331ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080231b4  080231b4  00040764  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080231b4  080231b4  000331b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080231b8  080231b8  000331b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000764  20000000  080231bc  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006dcc  20000764  08023920  00040764  2**2
                  ALLOC
 10 ._user_heap_stack 00000e00  20007530  08023920  00047530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040764  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003aef4  00000000  00000000  00040794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000068c2  00000000  00000000  0007b688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d70  00000000  00000000  00081f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a90  00000000  00000000  00083cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aad1  00000000  00000000  00085750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a149  00000000  00000000  000b0221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e51d0  00000000  00000000  000da36a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001bf53a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007998  00000000  00000000  001bf590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800c000 <__do_global_dtors_aux>:
 800c000:	b510      	push	{r4, lr}
 800c002:	4c05      	ldr	r4, [pc, #20]	; (800c018 <__do_global_dtors_aux+0x18>)
 800c004:	7823      	ldrb	r3, [r4, #0]
 800c006:	b933      	cbnz	r3, 800c016 <__do_global_dtors_aux+0x16>
 800c008:	4b04      	ldr	r3, [pc, #16]	; (800c01c <__do_global_dtors_aux+0x1c>)
 800c00a:	b113      	cbz	r3, 800c012 <__do_global_dtors_aux+0x12>
 800c00c:	4804      	ldr	r0, [pc, #16]	; (800c020 <__do_global_dtors_aux+0x20>)
 800c00e:	f3af 8000 	nop.w
 800c012:	2301      	movs	r3, #1
 800c014:	7023      	strb	r3, [r4, #0]
 800c016:	bd10      	pop	{r4, pc}
 800c018:	20000764 	.word	0x20000764
 800c01c:	00000000 	.word	0x00000000
 800c020:	08023194 	.word	0x08023194

0800c024 <frame_dummy>:
 800c024:	b508      	push	{r3, lr}
 800c026:	4b03      	ldr	r3, [pc, #12]	; (800c034 <frame_dummy+0x10>)
 800c028:	b11b      	cbz	r3, 800c032 <frame_dummy+0xe>
 800c02a:	4903      	ldr	r1, [pc, #12]	; (800c038 <frame_dummy+0x14>)
 800c02c:	4803      	ldr	r0, [pc, #12]	; (800c03c <frame_dummy+0x18>)
 800c02e:	f3af 8000 	nop.w
 800c032:	bd08      	pop	{r3, pc}
 800c034:	00000000 	.word	0x00000000
 800c038:	20000768 	.word	0x20000768
 800c03c:	08023194 	.word	0x08023194

0800c040 <strlen>:
 800c040:	4603      	mov	r3, r0
 800c042:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c046:	2a00      	cmp	r2, #0
 800c048:	d1fb      	bne.n	800c042 <strlen+0x2>
 800c04a:	1a18      	subs	r0, r3, r0
 800c04c:	3801      	subs	r0, #1
 800c04e:	4770      	bx	lr

0800c050 <__aeabi_uldivmod>:
 800c050:	b953      	cbnz	r3, 800c068 <__aeabi_uldivmod+0x18>
 800c052:	b94a      	cbnz	r2, 800c068 <__aeabi_uldivmod+0x18>
 800c054:	2900      	cmp	r1, #0
 800c056:	bf08      	it	eq
 800c058:	2800      	cmpeq	r0, #0
 800c05a:	bf1c      	itt	ne
 800c05c:	f04f 31ff 	movne.w	r1, #4294967295
 800c060:	f04f 30ff 	movne.w	r0, #4294967295
 800c064:	f000 b96e 	b.w	800c344 <__aeabi_idiv0>
 800c068:	f1ad 0c08 	sub.w	ip, sp, #8
 800c06c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800c070:	f000 f806 	bl	800c080 <__udivmoddi4>
 800c074:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c078:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c07c:	b004      	add	sp, #16
 800c07e:	4770      	bx	lr

0800c080 <__udivmoddi4>:
 800c080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c084:	9d08      	ldr	r5, [sp, #32]
 800c086:	4604      	mov	r4, r0
 800c088:	468c      	mov	ip, r1
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	f040 8083 	bne.w	800c196 <__udivmoddi4+0x116>
 800c090:	428a      	cmp	r2, r1
 800c092:	4617      	mov	r7, r2
 800c094:	d947      	bls.n	800c126 <__udivmoddi4+0xa6>
 800c096:	fab2 f282 	clz	r2, r2
 800c09a:	b142      	cbz	r2, 800c0ae <__udivmoddi4+0x2e>
 800c09c:	f1c2 0020 	rsb	r0, r2, #32
 800c0a0:	fa24 f000 	lsr.w	r0, r4, r0
 800c0a4:	4091      	lsls	r1, r2
 800c0a6:	4097      	lsls	r7, r2
 800c0a8:	ea40 0c01 	orr.w	ip, r0, r1
 800c0ac:	4094      	lsls	r4, r2
 800c0ae:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800c0b2:	0c23      	lsrs	r3, r4, #16
 800c0b4:	fbbc f6f8 	udiv	r6, ip, r8
 800c0b8:	fa1f fe87 	uxth.w	lr, r7
 800c0bc:	fb08 c116 	mls	r1, r8, r6, ip
 800c0c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c0c4:	fb06 f10e 	mul.w	r1, r6, lr
 800c0c8:	4299      	cmp	r1, r3
 800c0ca:	d909      	bls.n	800c0e0 <__udivmoddi4+0x60>
 800c0cc:	18fb      	adds	r3, r7, r3
 800c0ce:	f106 30ff 	add.w	r0, r6, #4294967295
 800c0d2:	f080 8119 	bcs.w	800c308 <__udivmoddi4+0x288>
 800c0d6:	4299      	cmp	r1, r3
 800c0d8:	f240 8116 	bls.w	800c308 <__udivmoddi4+0x288>
 800c0dc:	3e02      	subs	r6, #2
 800c0de:	443b      	add	r3, r7
 800c0e0:	1a5b      	subs	r3, r3, r1
 800c0e2:	b2a4      	uxth	r4, r4
 800c0e4:	fbb3 f0f8 	udiv	r0, r3, r8
 800c0e8:	fb08 3310 	mls	r3, r8, r0, r3
 800c0ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800c0f0:	fb00 fe0e 	mul.w	lr, r0, lr
 800c0f4:	45a6      	cmp	lr, r4
 800c0f6:	d909      	bls.n	800c10c <__udivmoddi4+0x8c>
 800c0f8:	193c      	adds	r4, r7, r4
 800c0fa:	f100 33ff 	add.w	r3, r0, #4294967295
 800c0fe:	f080 8105 	bcs.w	800c30c <__udivmoddi4+0x28c>
 800c102:	45a6      	cmp	lr, r4
 800c104:	f240 8102 	bls.w	800c30c <__udivmoddi4+0x28c>
 800c108:	3802      	subs	r0, #2
 800c10a:	443c      	add	r4, r7
 800c10c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800c110:	eba4 040e 	sub.w	r4, r4, lr
 800c114:	2600      	movs	r6, #0
 800c116:	b11d      	cbz	r5, 800c120 <__udivmoddi4+0xa0>
 800c118:	40d4      	lsrs	r4, r2
 800c11a:	2300      	movs	r3, #0
 800c11c:	e9c5 4300 	strd	r4, r3, [r5]
 800c120:	4631      	mov	r1, r6
 800c122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c126:	b902      	cbnz	r2, 800c12a <__udivmoddi4+0xaa>
 800c128:	deff      	udf	#255	; 0xff
 800c12a:	fab2 f282 	clz	r2, r2
 800c12e:	2a00      	cmp	r2, #0
 800c130:	d150      	bne.n	800c1d4 <__udivmoddi4+0x154>
 800c132:	1bcb      	subs	r3, r1, r7
 800c134:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800c138:	fa1f f887 	uxth.w	r8, r7
 800c13c:	2601      	movs	r6, #1
 800c13e:	fbb3 fcfe 	udiv	ip, r3, lr
 800c142:	0c21      	lsrs	r1, r4, #16
 800c144:	fb0e 331c 	mls	r3, lr, ip, r3
 800c148:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c14c:	fb08 f30c 	mul.w	r3, r8, ip
 800c150:	428b      	cmp	r3, r1
 800c152:	d907      	bls.n	800c164 <__udivmoddi4+0xe4>
 800c154:	1879      	adds	r1, r7, r1
 800c156:	f10c 30ff 	add.w	r0, ip, #4294967295
 800c15a:	d202      	bcs.n	800c162 <__udivmoddi4+0xe2>
 800c15c:	428b      	cmp	r3, r1
 800c15e:	f200 80e9 	bhi.w	800c334 <__udivmoddi4+0x2b4>
 800c162:	4684      	mov	ip, r0
 800c164:	1ac9      	subs	r1, r1, r3
 800c166:	b2a3      	uxth	r3, r4
 800c168:	fbb1 f0fe 	udiv	r0, r1, lr
 800c16c:	fb0e 1110 	mls	r1, lr, r0, r1
 800c170:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800c174:	fb08 f800 	mul.w	r8, r8, r0
 800c178:	45a0      	cmp	r8, r4
 800c17a:	d907      	bls.n	800c18c <__udivmoddi4+0x10c>
 800c17c:	193c      	adds	r4, r7, r4
 800c17e:	f100 33ff 	add.w	r3, r0, #4294967295
 800c182:	d202      	bcs.n	800c18a <__udivmoddi4+0x10a>
 800c184:	45a0      	cmp	r8, r4
 800c186:	f200 80d9 	bhi.w	800c33c <__udivmoddi4+0x2bc>
 800c18a:	4618      	mov	r0, r3
 800c18c:	eba4 0408 	sub.w	r4, r4, r8
 800c190:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800c194:	e7bf      	b.n	800c116 <__udivmoddi4+0x96>
 800c196:	428b      	cmp	r3, r1
 800c198:	d909      	bls.n	800c1ae <__udivmoddi4+0x12e>
 800c19a:	2d00      	cmp	r5, #0
 800c19c:	f000 80b1 	beq.w	800c302 <__udivmoddi4+0x282>
 800c1a0:	2600      	movs	r6, #0
 800c1a2:	e9c5 0100 	strd	r0, r1, [r5]
 800c1a6:	4630      	mov	r0, r6
 800c1a8:	4631      	mov	r1, r6
 800c1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1ae:	fab3 f683 	clz	r6, r3
 800c1b2:	2e00      	cmp	r6, #0
 800c1b4:	d14a      	bne.n	800c24c <__udivmoddi4+0x1cc>
 800c1b6:	428b      	cmp	r3, r1
 800c1b8:	d302      	bcc.n	800c1c0 <__udivmoddi4+0x140>
 800c1ba:	4282      	cmp	r2, r0
 800c1bc:	f200 80b8 	bhi.w	800c330 <__udivmoddi4+0x2b0>
 800c1c0:	1a84      	subs	r4, r0, r2
 800c1c2:	eb61 0103 	sbc.w	r1, r1, r3
 800c1c6:	2001      	movs	r0, #1
 800c1c8:	468c      	mov	ip, r1
 800c1ca:	2d00      	cmp	r5, #0
 800c1cc:	d0a8      	beq.n	800c120 <__udivmoddi4+0xa0>
 800c1ce:	e9c5 4c00 	strd	r4, ip, [r5]
 800c1d2:	e7a5      	b.n	800c120 <__udivmoddi4+0xa0>
 800c1d4:	f1c2 0320 	rsb	r3, r2, #32
 800c1d8:	fa20 f603 	lsr.w	r6, r0, r3
 800c1dc:	4097      	lsls	r7, r2
 800c1de:	fa01 f002 	lsl.w	r0, r1, r2
 800c1e2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800c1e6:	40d9      	lsrs	r1, r3
 800c1e8:	4330      	orrs	r0, r6
 800c1ea:	0c03      	lsrs	r3, r0, #16
 800c1ec:	fbb1 f6fe 	udiv	r6, r1, lr
 800c1f0:	fa1f f887 	uxth.w	r8, r7
 800c1f4:	fb0e 1116 	mls	r1, lr, r6, r1
 800c1f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c1fc:	fb06 f108 	mul.w	r1, r6, r8
 800c200:	4299      	cmp	r1, r3
 800c202:	fa04 f402 	lsl.w	r4, r4, r2
 800c206:	d909      	bls.n	800c21c <__udivmoddi4+0x19c>
 800c208:	18fb      	adds	r3, r7, r3
 800c20a:	f106 3cff 	add.w	ip, r6, #4294967295
 800c20e:	f080 808d 	bcs.w	800c32c <__udivmoddi4+0x2ac>
 800c212:	4299      	cmp	r1, r3
 800c214:	f240 808a 	bls.w	800c32c <__udivmoddi4+0x2ac>
 800c218:	3e02      	subs	r6, #2
 800c21a:	443b      	add	r3, r7
 800c21c:	1a5b      	subs	r3, r3, r1
 800c21e:	b281      	uxth	r1, r0
 800c220:	fbb3 f0fe 	udiv	r0, r3, lr
 800c224:	fb0e 3310 	mls	r3, lr, r0, r3
 800c228:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c22c:	fb00 f308 	mul.w	r3, r0, r8
 800c230:	428b      	cmp	r3, r1
 800c232:	d907      	bls.n	800c244 <__udivmoddi4+0x1c4>
 800c234:	1879      	adds	r1, r7, r1
 800c236:	f100 3cff 	add.w	ip, r0, #4294967295
 800c23a:	d273      	bcs.n	800c324 <__udivmoddi4+0x2a4>
 800c23c:	428b      	cmp	r3, r1
 800c23e:	d971      	bls.n	800c324 <__udivmoddi4+0x2a4>
 800c240:	3802      	subs	r0, #2
 800c242:	4439      	add	r1, r7
 800c244:	1acb      	subs	r3, r1, r3
 800c246:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800c24a:	e778      	b.n	800c13e <__udivmoddi4+0xbe>
 800c24c:	f1c6 0c20 	rsb	ip, r6, #32
 800c250:	fa03 f406 	lsl.w	r4, r3, r6
 800c254:	fa22 f30c 	lsr.w	r3, r2, ip
 800c258:	431c      	orrs	r4, r3
 800c25a:	fa20 f70c 	lsr.w	r7, r0, ip
 800c25e:	fa01 f306 	lsl.w	r3, r1, r6
 800c262:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800c266:	fa21 f10c 	lsr.w	r1, r1, ip
 800c26a:	431f      	orrs	r7, r3
 800c26c:	0c3b      	lsrs	r3, r7, #16
 800c26e:	fbb1 f9fe 	udiv	r9, r1, lr
 800c272:	fa1f f884 	uxth.w	r8, r4
 800c276:	fb0e 1119 	mls	r1, lr, r9, r1
 800c27a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800c27e:	fb09 fa08 	mul.w	sl, r9, r8
 800c282:	458a      	cmp	sl, r1
 800c284:	fa02 f206 	lsl.w	r2, r2, r6
 800c288:	fa00 f306 	lsl.w	r3, r0, r6
 800c28c:	d908      	bls.n	800c2a0 <__udivmoddi4+0x220>
 800c28e:	1861      	adds	r1, r4, r1
 800c290:	f109 30ff 	add.w	r0, r9, #4294967295
 800c294:	d248      	bcs.n	800c328 <__udivmoddi4+0x2a8>
 800c296:	458a      	cmp	sl, r1
 800c298:	d946      	bls.n	800c328 <__udivmoddi4+0x2a8>
 800c29a:	f1a9 0902 	sub.w	r9, r9, #2
 800c29e:	4421      	add	r1, r4
 800c2a0:	eba1 010a 	sub.w	r1, r1, sl
 800c2a4:	b2bf      	uxth	r7, r7
 800c2a6:	fbb1 f0fe 	udiv	r0, r1, lr
 800c2aa:	fb0e 1110 	mls	r1, lr, r0, r1
 800c2ae:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800c2b2:	fb00 f808 	mul.w	r8, r0, r8
 800c2b6:	45b8      	cmp	r8, r7
 800c2b8:	d907      	bls.n	800c2ca <__udivmoddi4+0x24a>
 800c2ba:	19e7      	adds	r7, r4, r7
 800c2bc:	f100 31ff 	add.w	r1, r0, #4294967295
 800c2c0:	d22e      	bcs.n	800c320 <__udivmoddi4+0x2a0>
 800c2c2:	45b8      	cmp	r8, r7
 800c2c4:	d92c      	bls.n	800c320 <__udivmoddi4+0x2a0>
 800c2c6:	3802      	subs	r0, #2
 800c2c8:	4427      	add	r7, r4
 800c2ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800c2ce:	eba7 0708 	sub.w	r7, r7, r8
 800c2d2:	fba0 8902 	umull	r8, r9, r0, r2
 800c2d6:	454f      	cmp	r7, r9
 800c2d8:	46c6      	mov	lr, r8
 800c2da:	4649      	mov	r1, r9
 800c2dc:	d31a      	bcc.n	800c314 <__udivmoddi4+0x294>
 800c2de:	d017      	beq.n	800c310 <__udivmoddi4+0x290>
 800c2e0:	b15d      	cbz	r5, 800c2fa <__udivmoddi4+0x27a>
 800c2e2:	ebb3 020e 	subs.w	r2, r3, lr
 800c2e6:	eb67 0701 	sbc.w	r7, r7, r1
 800c2ea:	fa07 fc0c 	lsl.w	ip, r7, ip
 800c2ee:	40f2      	lsrs	r2, r6
 800c2f0:	ea4c 0202 	orr.w	r2, ip, r2
 800c2f4:	40f7      	lsrs	r7, r6
 800c2f6:	e9c5 2700 	strd	r2, r7, [r5]
 800c2fa:	2600      	movs	r6, #0
 800c2fc:	4631      	mov	r1, r6
 800c2fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c302:	462e      	mov	r6, r5
 800c304:	4628      	mov	r0, r5
 800c306:	e70b      	b.n	800c120 <__udivmoddi4+0xa0>
 800c308:	4606      	mov	r6, r0
 800c30a:	e6e9      	b.n	800c0e0 <__udivmoddi4+0x60>
 800c30c:	4618      	mov	r0, r3
 800c30e:	e6fd      	b.n	800c10c <__udivmoddi4+0x8c>
 800c310:	4543      	cmp	r3, r8
 800c312:	d2e5      	bcs.n	800c2e0 <__udivmoddi4+0x260>
 800c314:	ebb8 0e02 	subs.w	lr, r8, r2
 800c318:	eb69 0104 	sbc.w	r1, r9, r4
 800c31c:	3801      	subs	r0, #1
 800c31e:	e7df      	b.n	800c2e0 <__udivmoddi4+0x260>
 800c320:	4608      	mov	r0, r1
 800c322:	e7d2      	b.n	800c2ca <__udivmoddi4+0x24a>
 800c324:	4660      	mov	r0, ip
 800c326:	e78d      	b.n	800c244 <__udivmoddi4+0x1c4>
 800c328:	4681      	mov	r9, r0
 800c32a:	e7b9      	b.n	800c2a0 <__udivmoddi4+0x220>
 800c32c:	4666      	mov	r6, ip
 800c32e:	e775      	b.n	800c21c <__udivmoddi4+0x19c>
 800c330:	4630      	mov	r0, r6
 800c332:	e74a      	b.n	800c1ca <__udivmoddi4+0x14a>
 800c334:	f1ac 0c02 	sub.w	ip, ip, #2
 800c338:	4439      	add	r1, r7
 800c33a:	e713      	b.n	800c164 <__udivmoddi4+0xe4>
 800c33c:	3802      	subs	r0, #2
 800c33e:	443c      	add	r4, r7
 800c340:	e724      	b.n	800c18c <__udivmoddi4+0x10c>
 800c342:	bf00      	nop

0800c344 <__aeabi_idiv0>:
 800c344:	4770      	bx	lr
 800c346:	bf00      	nop

0800c348 <BIOS_Info>:

/*******************************************************************************
 Info :  Ӳ���豸��Ϣ
*******************************************************************************/
unsigned BIOS_Info(char Item)
{
 800c348:	b480      	push	{r7}
 800c34a:	b083      	sub	sp, #12
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	4603      	mov	r3, r0
 800c350:	71fb      	strb	r3, [r7, #7]
  switch (Item){
 800c352:	79fb      	ldrb	r3, [r7, #7]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d103      	bne.n	800c360 <BIOS_Info+0x18>
    case CHA_CNT:
    	return __HAL_DMA_GET_COUNTER(&hdma_adc1);  /*(u16)DMA_CH_A->CNDTR*/
 800c358:	4b05      	ldr	r3, [pc, #20]	; (800c370 <BIOS_Info+0x28>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	e000      	b.n	800c362 <BIOS_Info+0x1a>
/*    case SIN_TAB: return (u32)SIN_DATA;
    case TRG_TAB: return (u32)TRG_DATA;
    case SAW_TAB: return (u32)SAW_DATA;    */
    default:
    	return 0;
 800c360:	2300      	movs	r3, #0
  }
}
 800c362:	4618      	mov	r0, r3
 800c364:	370c      	adds	r7, #12
 800c366:	46bd      	mov	sp, r7
 800c368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36c:	4770      	bx	lr
 800c36e:	bf00      	nop
 800c370:	20006b18 	.word	0x20006b18

0800c374 <BIOS_Ctrl>:
/*******************************************************************************
 DevCtrl:  Ӳ���豸����
*******************************************************************************/
void BIOS_Ctrl(char Item, unsigned Val)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b088      	sub	sp, #32
 800c378:	af00      	add	r7, sp, #0
 800c37a:	4603      	mov	r3, r0
 800c37c:	6039      	str	r1, [r7, #0]
 800c37e:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef         GPIO_InitStructure;
  unsigned dma_tmp;

  switch (Item){
 800c380:	79fb      	ldrb	r3, [r7, #7]
 800c382:	2b08      	cmp	r3, #8
 800c384:	f200 8150 	bhi.w	800c628 <BIOS_Ctrl+0x2b4>
 800c388:	a201      	add	r2, pc, #4	; (adr r2, 800c390 <BIOS_Ctrl+0x1c>)
 800c38a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c38e:	bf00      	nop
 800c390:	0800c52b 	.word	0x0800c52b
 800c394:	0800c4d9 	.word	0x0800c4d9
 800c398:	0800c51f 	.word	0x0800c51f
 800c39c:	0800c4e9 	.word	0x0800c4e9
 800c3a0:	0800c3b5 	.word	0x0800c3b5
 800c3a4:	0800c417 	.word	0x0800c417
 800c3a8:	0800c441 	.word	0x0800c441
 800c3ac:	0800c469 	.word	0x0800c469
 800c3b0:	0800c4cb 	.word	0x0800c4cb
    case SMPL_ST: if(Val == DISABLE)
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d108      	bne.n	800c3cc <BIOS_Ctrl+0x58>
    			  {
    				  __HAL_DMA_DISABLE(&hdma_adc1);  /*DMA1_Channel1->CCR &= (~ENABLE);*/
 800c3ba:	4ba0      	ldr	r3, [pc, #640]	; (800c63c <BIOS_Ctrl+0x2c8>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	681a      	ldr	r2, [r3, #0]
 800c3c0:	4b9e      	ldr	r3, [pc, #632]	; (800c63c <BIOS_Ctrl+0x2c8>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f022 0201 	bic.w	r2, r2, #1
 800c3c8:	601a      	str	r2, [r3, #0]
                    if(Val == INTERLEAVE)
                    {
                      DMA1_Channel1->CCR = 0x3A80;
                    } */
                  }
    			  break;
 800c3ca:	e12f      	b.n	800c62c <BIOS_Ctrl+0x2b8>
    				  if(Val == ENABLE)
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	2b01      	cmp	r3, #1
 800c3d0:	f040 812c 	bne.w	800c62c <BIOS_Ctrl+0x2b8>
    			    __HAL_DMA_ENABLE(&hdma_adc1);  /* DMA1_Channel1->CCR |= ENABLE; */
 800c3d4:	4b99      	ldr	r3, [pc, #612]	; (800c63c <BIOS_Ctrl+0x2c8>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	681a      	ldr	r2, [r3, #0]
 800c3da:	4b98      	ldr	r3, [pc, #608]	; (800c63c <BIOS_Ctrl+0x2c8>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f042 0201 	orr.w	r2, r2, #1
 800c3e2:	601a      	str	r2, [r3, #0]
                    __HAL_ADC_ENABLE(&hadc1);  //ADC1->CR2 |= 0x00000001; //AD_ON
 800c3e4:	4b96      	ldr	r3, [pc, #600]	; (800c640 <BIOS_Ctrl+0x2cc>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	689a      	ldr	r2, [r3, #8]
 800c3ea:	4b95      	ldr	r3, [pc, #596]	; (800c640 <BIOS_Ctrl+0x2cc>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f042 0201 	orr.w	r2, r2, #1
 800c3f2:	609a      	str	r2, [r3, #8]
                    __HAL_ADC_ENABLE(&hadc2);  //ADC2->CR2 |= 0x00000001; //AD_ON
 800c3f4:	4b93      	ldr	r3, [pc, #588]	; (800c644 <BIOS_Ctrl+0x2d0>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	689a      	ldr	r2, [r3, #8]
 800c3fa:	4b92      	ldr	r3, [pc, #584]	; (800c644 <BIOS_Ctrl+0x2d0>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f042 0201 	orr.w	r2, r2, #1
 800c402:	609a      	str	r2, [r3, #8]
                    __HAL_TIM_ENABLE(&htim1);  /*TIM1->CR1 = 0x0081; */
 800c404:	4b90      	ldr	r3, [pc, #576]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	681a      	ldr	r2, [r3, #0]
 800c40a:	4b8f      	ldr	r3, [pc, #572]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f042 0201 	orr.w	r2, r2, #1
 800c412:	601a      	str	r2, [r3, #0]
    			  break;
 800c414:	e10a      	b.n	800c62c <BIOS_Ctrl+0x2b8>

    case SMPLTIM:
    			  octim1.Pulse = (Val+1)/2;
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	3301      	adds	r3, #1
 800c41a:	085b      	lsrs	r3, r3, #1
 800c41c:	4a8b      	ldr	r2, [pc, #556]	; (800c64c <BIOS_Ctrl+0x2d8>)
 800c41e:	6053      	str	r3, [r2, #4]
    			  HAL_TIM_OC_ConfigChannel(&htim1, &octim1, 1 );
 800c420:	2201      	movs	r2, #1
 800c422:	498a      	ldr	r1, [pc, #552]	; (800c64c <BIOS_Ctrl+0x2d8>)
 800c424:	4888      	ldr	r0, [pc, #544]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c426:	f011 f8a7 	bl	801d578 <HAL_TIM_OC_ConfigChannel>
    			  htim1.Init.Prescaler = 0;
 800c42a:	4b87      	ldr	r3, [pc, #540]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c42c:	2200      	movs	r2, #0
 800c42e:	605a      	str	r2, [r3, #4]
    			  htim1.Init.Period = Val -1;
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	3b01      	subs	r3, #1
 800c434:	4a84      	ldr	r2, [pc, #528]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c436:	60d3      	str	r3, [r2, #12]
    			  HAL_TIM_Base_Init(&htim1);
 800c438:	4883      	ldr	r0, [pc, #524]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c43a:	f010 fed5 	bl	801d1e8 <HAL_TIM_Base_Init>
                  break;
 800c43e:	e0f8      	b.n	800c632 <BIOS_Ctrl+0x2be>

    case SMPLNUM:
    			  __HAL_TIM_URS_DISABLE(&htim1);
 800c440:	4b81      	ldr	r3, [pc, #516]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	681a      	ldr	r2, [r3, #0]
 800c446:	4b80      	ldr	r3, [pc, #512]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f022 0204 	bic.w	r2, r2, #4
 800c44e:	601a      	str	r2, [r3, #0]
    			  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c450:	4b7d      	ldr	r3, [pc, #500]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c452:	2200      	movs	r2, #0
 800c454:	609a      	str	r2, [r3, #8]
    			  HAL_TIM_Base_Init(&htim1);
 800c456:	487c      	ldr	r0, [pc, #496]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c458:	f010 fec6 	bl	801d1e8 <HAL_TIM_Base_Init>
    			  __HAL_DMA_SET_COUNTER( &hdma_adc1, Val);  /* DMA_CH_A->CNDTR = (u32)Val;    */
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	b29a      	uxth	r2, r3
 800c460:	4b76      	ldr	r3, [pc, #472]	; (800c63c <BIOS_Ctrl+0x2c8>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	605a      	str	r2, [r3, #4]
                  break;
 800c466:	e0e4      	b.n	800c632 <BIOS_Ctrl+0x2be>

    case AiRANGE: if(Val & DC)
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	f003 0302 	and.w	r3, r3, #2
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d005      	beq.n	800c47e <BIOS_Ctrl+0x10a>
    				  HAL_GPIO_WritePin(Az_GPIO_Port, Az_Pin,GPIO_PIN_SET);  // AZ_HIGH;
 800c472:	2201      	movs	r2, #1
 800c474:	2110      	movs	r1, #16
 800c476:	4876      	ldr	r0, [pc, #472]	; (800c650 <BIOS_Ctrl+0x2dc>)
 800c478:	f00d fd66 	bl	8019f48 <HAL_GPIO_WritePin>
 800c47c:	e004      	b.n	800c488 <BIOS_Ctrl+0x114>
                  else
                	  HAL_GPIO_WritePin(Az_GPIO_Port, Az_Pin,GPIO_PIN_RESET);  //AZ_LOW;   CH_A_AC
 800c47e:	2200      	movs	r2, #0
 800c480:	2110      	movs	r1, #16
 800c482:	4873      	ldr	r0, [pc, #460]	; (800c650 <BIOS_Ctrl+0x2dc>)
 800c484:	f00d fd60 	bl	8019f48 <HAL_GPIO_WritePin>
                  if(Val & HV)
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	f003 0301 	and.w	r3, r3, #1
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d005      	beq.n	800c49e <BIOS_Ctrl+0x12a>
                	  HAL_GPIO_WritePin(Ay_GPIO_Port, Ay_Pin,GPIO_PIN_SET);  //AY_HIGH;  CH_A_HV
 800c492:	2201      	movs	r2, #1
 800c494:	2120      	movs	r1, #32
 800c496:	486e      	ldr	r0, [pc, #440]	; (800c650 <BIOS_Ctrl+0x2dc>)
 800c498:	f00d fd56 	bl	8019f48 <HAL_GPIO_WritePin>
 800c49c:	e004      	b.n	800c4a8 <BIOS_Ctrl+0x134>
                  else
                	  HAL_GPIO_WritePin(Ay_GPIO_Port, Ay_Pin,GPIO_PIN_RESET);  //AY_LOW;   CH_A_LV
 800c49e:	2200      	movs	r2, #0
 800c4a0:	2120      	movs	r1, #32
 800c4a2:	486b      	ldr	r0, [pc, #428]	; (800c650 <BIOS_Ctrl+0x2dc>)
 800c4a4:	f00d fd50 	bl	8019f48 <HAL_GPIO_WritePin>
                  if(Val & ACT)
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	f003 0304 	and.w	r3, r3, #4
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d005      	beq.n	800c4be <BIOS_Ctrl+0x14a>
                	  HAL_GPIO_WritePin(Ax_GPIO_Port, Ax_Pin,GPIO_PIN_SET);  //AX_HIGH;  CH_A_ACT
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	2101      	movs	r1, #1
 800c4b6:	4867      	ldr	r0, [pc, #412]	; (800c654 <BIOS_Ctrl+0x2e0>)
 800c4b8:	f00d fd46 	bl	8019f48 <HAL_GPIO_WritePin>
                  else
                	  HAL_GPIO_WritePin(Ax_GPIO_Port, Ax_Pin,GPIO_PIN_RESET);  //AX_LOW;   CH_A_GND
                  break;
 800c4bc:	e0b9      	b.n	800c632 <BIOS_Ctrl+0x2be>
                	  HAL_GPIO_WritePin(Ax_GPIO_Port, Ax_Pin,GPIO_PIN_RESET);  //AX_LOW;   CH_A_GND
 800c4be:	2200      	movs	r2, #0
 800c4c0:	2101      	movs	r1, #1
 800c4c2:	4864      	ldr	r0, [pc, #400]	; (800c654 <BIOS_Ctrl+0x2e0>)
 800c4c4:	f00d fd40 	bl	8019f48 <HAL_GPIO_WritePin>
                  break;
 800c4c8:	e0b3      	b.n	800c632 <BIOS_Ctrl+0x2be>

    case AOFFSET: HAL_DAC_SetValue( &hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, Val);  /*DAC->DHR12R2  = (u16)Val; */
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	2110      	movs	r1, #16
 800c4d0:	4861      	ldr	r0, [pc, #388]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c4d2:	f00c fd24 	bl	8018f1e <HAL_DAC_SetValue>
                  break;
 800c4d6:	e0ac      	b.n	800c632 <BIOS_Ctrl+0x2be>

    case DAC_TIM:
    			  htim7.Init.Period = Val-1;
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	3b01      	subs	r3, #1
 800c4dc:	4a5f      	ldr	r2, [pc, #380]	; (800c65c <BIOS_Ctrl+0x2e8>)
 800c4de:	60d3      	str	r3, [r2, #12]
    			  HAL_TIM_Base_Init(&htim7);
 800c4e0:	485e      	ldr	r0, [pc, #376]	; (800c65c <BIOS_Ctrl+0x2e8>)
 800c4e2:	f010 fe81 	bl	801d1e8 <HAL_TIM_Base_Init>
    			  break;
 800c4e6:	e0a4      	b.n	800c632 <BIOS_Ctrl+0x2be>

    case OUT_BUF:
    // need to do this at low level
        		  // set circular  /* OUT_DMA->CCR   = 0x15B0; // PL=01, M/P_SIZE=0101, M/P_INC=10, CIRC=1, DIR=1, En=0 */
    			  dma_tmp = hdma_dac1.Instance->CR;
 800c4e8:	4b5d      	ldr	r3, [pc, #372]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	61fb      	str	r3, [r7, #28]
    			  dma_tmp &= 0x0FFFFEDE;
 800c4f0:	69fa      	ldr	r2, [r7, #28]
 800c4f2:	4b5c      	ldr	r3, [pc, #368]	; (800c664 <BIOS_Ctrl+0x2f0>)
 800c4f4:	4013      	ands	r3, r2
 800c4f6:	61fb      	str	r3, [r7, #28]
    			  dma_tmp |= 0x120; //set circ and pfctrl
 800c4f8:	69fb      	ldr	r3, [r7, #28]
 800c4fa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c4fe:	61fb      	str	r3, [r7, #28]
				  hdma_dac1.Instance->CR = dma_tmp;
 800c500:	4b57      	ldr	r3, [pc, #348]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	69fa      	ldr	r2, [r7, #28]
 800c506:	601a      	str	r2, [r3, #0]
         		  hdma_dac1.Instance->PAR = hdac.Instance->DHR12R1;  /* OUT_DMA->CPAR  = (u32)&DAC->DHR12R1; */
 800c508:	4b53      	ldr	r3, [pc, #332]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c50a:	681a      	ldr	r2, [r3, #0]
 800c50c:	4b54      	ldr	r3, [pc, #336]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	6892      	ldr	r2, [r2, #8]
 800c512:	609a      	str	r2, [r3, #8]
        		  hdma_dac1.Instance->M0AR = Val;  /*  OUT_DMA->CMAR  = (u32)Val; */
 800c514:	4b52      	ldr	r3, [pc, #328]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	683a      	ldr	r2, [r7, #0]
 800c51a:	60da      	str	r2, [r3, #12]
                  break;
 800c51c:	e089      	b.n	800c632 <BIOS_Ctrl+0x2be>

    case OUT_CNT:
    			  __HAL_DMA_SET_COUNTER( &hdma_dac1, Val);  /*OUT_DMA->CNDTR = (u16)Val; */
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	b29a      	uxth	r2, r3
 800c522:	4b4f      	ldr	r3, [pc, #316]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	605a      	str	r2, [r3, #4]
    			  break;
 800c528:	e083      	b.n	800c632 <BIOS_Ctrl+0x2be>

    case OUT_MOD:
      GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800c52a:	2301      	movs	r3, #1
 800c52c:	617b      	str	r3, [r7, #20]
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	2b04      	cmp	r3, #4
 800c532:	d009      	beq.n	800c548 <BIOS_Ctrl+0x1d4>
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	2b04      	cmp	r3, #4
 800c538:	d87a      	bhi.n	800c630 <BIOS_Ctrl+0x2bc>
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d04d      	beq.n	800c5dc <BIOS_Ctrl+0x268>
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	2b02      	cmp	r3, #2
 800c544:	d025      	beq.n	800c592 <BIOS_Ctrl+0x21e>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
                                  break;
                  }
                  break;
 800c546:	e073      	b.n	800c630 <BIOS_Ctrl+0x2bc>
                                  __HAL_DMA_DISABLE(&hdma_dac1); // OUT_DMA->CCR &= 0xFFFE;               //�رղ������DMA
 800c548:	4b45      	ldr	r3, [pc, #276]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	681a      	ldr	r2, [r3, #0]
 800c54e:	4b44      	ldr	r3, [pc, #272]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f022 0201 	bic.w	r2, r2, #1
 800c556:	601a      	str	r2, [r3, #0]
                    		      __HAL_DAC_DISABLE(&hdac, DAC_CHANNEL_1);
 800c558:	4b3f      	ldr	r3, [pc, #252]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	681a      	ldr	r2, [r3, #0]
 800c55e:	4b3e      	ldr	r3, [pc, #248]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f022 0201 	bic.w	r2, r2, #1
 800c566:	601a      	str	r2, [r3, #0]
                                  GPIO_InitStructure.Pin   = Fo2_Pin;
 800c568:	2304      	movs	r3, #4
 800c56a:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800c56c:	2302      	movs	r3, #2
 800c56e:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStructure);
 800c570:	f107 0308 	add.w	r3, r7, #8
 800c574:	4619      	mov	r1, r3
 800c576:	483c      	ldr	r0, [pc, #240]	; (800c668 <BIOS_Ctrl+0x2f4>)
 800c578:	f00d fb3a 	bl	8019bf0 <HAL_GPIO_Init>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
 800c57c:	2310      	movs	r3, #16
 800c57e:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
 800c580:	2300      	movs	r3, #0
 800c582:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
 800c584:	f107 0308 	add.w	r3, r7, #8
 800c588:	4619      	mov	r1, r3
 800c58a:	4837      	ldr	r0, [pc, #220]	; (800c668 <BIOS_Ctrl+0x2f4>)
 800c58c:	f00d fb30 	bl	8019bf0 <HAL_GPIO_Init>
                                  break;
 800c590:	e049      	b.n	800c626 <BIOS_Ctrl+0x2b2>
                    			  GPIO_InitStructure.Pin   = Fo2_Pin ;
 800c592:	2304      	movs	r3, #4
 800c594:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
 800c596:	2300      	movs	r3, #0
 800c598:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStructure);
 800c59a:	f107 0308 	add.w	r3, r7, #8
 800c59e:	4619      	mov	r1, r3
 800c5a0:	4831      	ldr	r0, [pc, #196]	; (800c668 <BIOS_Ctrl+0x2f4>)
 800c5a2:	f00d fb25 	bl	8019bf0 <HAL_GPIO_Init>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
 800c5a6:	2310      	movs	r3, #16
 800c5a8:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_ANALOG;
 800c5aa:	2303      	movs	r3, #3
 800c5ac:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
 800c5ae:	f107 0308 	add.w	r3, r7, #8
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	482c      	ldr	r0, [pc, #176]	; (800c668 <BIOS_Ctrl+0x2f4>)
 800c5b6:	f00d fb1b 	bl	8019bf0 <HAL_GPIO_Init>
                                  __HAL_DMA_ENABLE(&hdma_dac1);  // OUT_DMA->CCR |= ENABLE;               //���������DMA
 800c5ba:	4b29      	ldr	r3, [pc, #164]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	681a      	ldr	r2, [r3, #0]
 800c5c0:	4b27      	ldr	r3, [pc, #156]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f042 0201 	orr.w	r2, r2, #1
 800c5c8:	601a      	str	r2, [r3, #0]
                                  __HAL_DAC_ENABLE(&hdac, DAC_CHANNEL_1);
 800c5ca:	4b23      	ldr	r3, [pc, #140]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	681a      	ldr	r2, [r3, #0]
 800c5d0:	4b21      	ldr	r3, [pc, #132]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f042 0201 	orr.w	r2, r2, #1
 800c5d8:	601a      	str	r2, [r3, #0]
                                  break;
 800c5da:	e024      	b.n	800c626 <BIOS_Ctrl+0x2b2>
                    			  __HAL_DMA_DISABLE(&hdma_dac1);  // OUT_DMA->CCR &= 0xFFFE;                //�رղ������DMA
 800c5dc:	4b20      	ldr	r3, [pc, #128]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	681a      	ldr	r2, [r3, #0]
 800c5e2:	4b1f      	ldr	r3, [pc, #124]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	f022 0201 	bic.w	r2, r2, #1
 800c5ea:	601a      	str	r2, [r3, #0]
                    		      __HAL_DAC_DISABLE(&hdac, DAC_CHANNEL_1);
 800c5ec:	4b1a      	ldr	r3, [pc, #104]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	681a      	ldr	r2, [r3, #0]
 800c5f2:	4b19      	ldr	r3, [pc, #100]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f022 0201 	bic.w	r2, r2, #1
 800c5fa:	601a      	str	r2, [r3, #0]
                                  GPIO_InitStructure.Pin   = Fo2_Pin ;
 800c5fc:	2304      	movs	r3, #4
 800c5fe:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800c600:	2302      	movs	r3, #2
 800c602:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStructure);
 800c604:	f107 0308 	add.w	r3, r7, #8
 800c608:	4619      	mov	r1, r3
 800c60a:	4817      	ldr	r0, [pc, #92]	; (800c668 <BIOS_Ctrl+0x2f4>)
 800c60c:	f00d faf0 	bl	8019bf0 <HAL_GPIO_Init>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
 800c610:	2310      	movs	r3, #16
 800c612:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
 800c614:	2300      	movs	r3, #0
 800c616:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
 800c618:	f107 0308 	add.w	r3, r7, #8
 800c61c:	4619      	mov	r1, r3
 800c61e:	4812      	ldr	r0, [pc, #72]	; (800c668 <BIOS_Ctrl+0x2f4>)
 800c620:	f00d fae6 	bl	8019bf0 <HAL_GPIO_Init>
                                  break;
 800c624:	bf00      	nop
                  break;
 800c626:	e003      	b.n	800c630 <BIOS_Ctrl+0x2bc>

    default: break;
 800c628:	bf00      	nop
 800c62a:	e002      	b.n	800c632 <BIOS_Ctrl+0x2be>
    			  break;
 800c62c:	bf00      	nop
 800c62e:	e000      	b.n	800c632 <BIOS_Ctrl+0x2be>
                  break;
 800c630:	bf00      	nop
  }
}
 800c632:	bf00      	nop
 800c634:	3720      	adds	r7, #32
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}
 800c63a:	bf00      	nop
 800c63c:	20006b18 	.word	0x20006b18
 800c640:	20006a84 	.word	0x20006a84
 800c644:	200068f4 	.word	0x200068f4
 800c648:	20006b94 	.word	0x20006b94
 800c64c:	20006b78 	.word	0x20006b78
 800c650:	40020800 	.word	0x40020800
 800c654:	40020400 	.word	0x40020400
 800c658:	20006b04 	.word	0x20006b04
 800c65c:	20006bdc 	.word	0x20006bdc
 800c660:	20006a24 	.word	0x20006a24
 800c664:	0ffffede 	.word	0x0ffffede
 800c668:	40020000 	.word	0x40020000

0800c66c <Set_Base>:

/*******************************************************************************
 Set_Base: ˮƽɨ��ʱ��ת������
*******************************************************************************/
void Set_Base(short Base)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b082      	sub	sp, #8
 800c670:	af00      	add	r7, sp, #0
 800c672:	4603      	mov	r3, r0
 800c674:	80fb      	strh	r3, [r7, #6]
	octim1.Pulse = (ARR[Base]+1)/2;
 800c676:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c67a:	4a13      	ldr	r2, [pc, #76]	; (800c6c8 <Set_Base+0x5c>)
 800c67c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c680:	3301      	adds	r3, #1
 800c682:	0fda      	lsrs	r2, r3, #31
 800c684:	4413      	add	r3, r2
 800c686:	105b      	asrs	r3, r3, #1
 800c688:	461a      	mov	r2, r3
 800c68a:	4b10      	ldr	r3, [pc, #64]	; (800c6cc <Set_Base+0x60>)
 800c68c:	605a      	str	r2, [r3, #4]
	HAL_TIM_OC_ConfigChannel(&htim1, &octim1, 1 );
 800c68e:	2201      	movs	r2, #1
 800c690:	490e      	ldr	r1, [pc, #56]	; (800c6cc <Set_Base+0x60>)
 800c692:	480f      	ldr	r0, [pc, #60]	; (800c6d0 <Set_Base+0x64>)
 800c694:	f010 ff70 	bl	801d578 <HAL_TIM_OC_ConfigChannel>
	htim1.Init.Prescaler = PSC[Base];
 800c698:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c69c:	4a0d      	ldr	r2, [pc, #52]	; (800c6d4 <Set_Base+0x68>)
 800c69e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c6a2:	461a      	mov	r2, r3
 800c6a4:	4b0a      	ldr	r3, [pc, #40]	; (800c6d0 <Set_Base+0x64>)
 800c6a6:	605a      	str	r2, [r3, #4]
	htim1.Init.Period = ARR[Base];
 800c6a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c6ac:	4a06      	ldr	r2, [pc, #24]	; (800c6c8 <Set_Base+0x5c>)
 800c6ae:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	4b06      	ldr	r3, [pc, #24]	; (800c6d0 <Set_Base+0x64>)
 800c6b6:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Init(&htim1);
 800c6b8:	4805      	ldr	r0, [pc, #20]	; (800c6d0 <Set_Base+0x64>)
 800c6ba:	f010 fd95 	bl	801d1e8 <HAL_TIM_Base_Init>
}
 800c6be:	bf00      	nop
 800c6c0:	3708      	adds	r7, #8
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}
 800c6c6:	bf00      	nop
 800c6c8:	08000b30 	.word	0x08000b30
 800c6cc:	20006b78 	.word	0x20006b78
 800c6d0:	20006b94 	.word	0x20006b94
 800c6d4:	08000b08 	.word	0x08000b08

0800c6d8 <Set_Duty>:

/*******************************************************************************
 Set_Duty: �������ռ�ձ�����
*******************************************************************************/
void Set_Duty(void)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	af00      	add	r7, sp, #0
	 octim5.Pulse = (FARR[List[FREQ_OUT].Val]+1)*(10-List[FREQ_DUT].Val)/10;
 800c6dc:	4b0f      	ldr	r3, [pc, #60]	; (800c71c <Set_Duty+0x44>)
 800c6de:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 800c6e2:	461a      	mov	r2, r3
 800c6e4:	4b0e      	ldr	r3, [pc, #56]	; (800c720 <Set_Duty+0x48>)
 800c6e6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800c6ea:	3301      	adds	r3, #1
 800c6ec:	4a0b      	ldr	r2, [pc, #44]	; (800c71c <Set_Duty+0x44>)
 800c6ee:	f9b2 2134 	ldrsh.w	r2, [r2, #308]	; 0x134
 800c6f2:	f1c2 020a 	rsb	r2, r2, #10
 800c6f6:	fb02 f303 	mul.w	r3, r2, r3
 800c6fa:	4a0a      	ldr	r2, [pc, #40]	; (800c724 <Set_Duty+0x4c>)
 800c6fc:	fb82 1203 	smull	r1, r2, r2, r3
 800c700:	1092      	asrs	r2, r2, #2
 800c702:	17db      	asrs	r3, r3, #31
 800c704:	1ad3      	subs	r3, r2, r3
 800c706:	461a      	mov	r2, r3
 800c708:	4b07      	ldr	r3, [pc, #28]	; (800c728 <Set_Duty+0x50>)
 800c70a:	605a      	str	r2, [r3, #4]
	 HAL_TIM_OC_ConfigChannel(&htim5, &octim5, 3 );
 800c70c:	2203      	movs	r2, #3
 800c70e:	4906      	ldr	r1, [pc, #24]	; (800c728 <Set_Duty+0x50>)
 800c710:	4806      	ldr	r0, [pc, #24]	; (800c72c <Set_Duty+0x54>)
 800c712:	f010 ff31 	bl	801d578 <HAL_TIM_OC_ConfigChannel>
}
 800c716:	bf00      	nop
 800c718:	bd80      	pop	{r7, pc}
 800c71a:	bf00      	nop
 800c71c:	2000029c 	.word	0x2000029c
 800c720:	08000ae8 	.word	0x08000ae8
 800c724:	66666667 	.word	0x66666667
 800c728:	20006ae8 	.word	0x20006ae8
 800c72c:	2000693c 	.word	0x2000693c

0800c730 <Set_Fout>:

/*******************************************************************************
 Set_Fout: �������Ƶ������
*******************************************************************************/
void Set_Fout(short Range)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b082      	sub	sp, #8
 800c734:	af00      	add	r7, sp, #0
 800c736:	4603      	mov	r3, r0
 800c738:	80fb      	strh	r3, [r7, #6]
	octim5.Pulse = (FARR[Range]+1)/2;
 800c73a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c73e:	4a13      	ldr	r2, [pc, #76]	; (800c78c <Set_Fout+0x5c>)
 800c740:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c744:	3301      	adds	r3, #1
 800c746:	0fda      	lsrs	r2, r3, #31
 800c748:	4413      	add	r3, r2
 800c74a:	105b      	asrs	r3, r3, #1
 800c74c:	461a      	mov	r2, r3
 800c74e:	4b10      	ldr	r3, [pc, #64]	; (800c790 <Set_Fout+0x60>)
 800c750:	605a      	str	r2, [r3, #4]
	HAL_TIM_OC_ConfigChannel(&htim5, &octim5, 3 );
 800c752:	2203      	movs	r2, #3
 800c754:	490e      	ldr	r1, [pc, #56]	; (800c790 <Set_Fout+0x60>)
 800c756:	480f      	ldr	r0, [pc, #60]	; (800c794 <Set_Fout+0x64>)
 800c758:	f010 ff0e 	bl	801d578 <HAL_TIM_OC_ConfigChannel>
	htim5.Init.Prescaler = FPSC[Range];
 800c75c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c760:	4a0d      	ldr	r2, [pc, #52]	; (800c798 <Set_Fout+0x68>)
 800c762:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c766:	461a      	mov	r2, r3
 800c768:	4b0a      	ldr	r3, [pc, #40]	; (800c794 <Set_Fout+0x64>)
 800c76a:	605a      	str	r2, [r3, #4]
	htim5.Init.Period = FARR[Range];
 800c76c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c770:	4a06      	ldr	r2, [pc, #24]	; (800c78c <Set_Fout+0x5c>)
 800c772:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c776:	461a      	mov	r2, r3
 800c778:	4b06      	ldr	r3, [pc, #24]	; (800c794 <Set_Fout+0x64>)
 800c77a:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Init(&htim5);
 800c77c:	4805      	ldr	r0, [pc, #20]	; (800c794 <Set_Fout+0x64>)
 800c77e:	f010 fd33 	bl	801d1e8 <HAL_TIM_Base_Init>
}
 800c782:	bf00      	nop
 800c784:	3708      	adds	r7, #8
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}
 800c78a:	bf00      	nop
 800c78c:	08000ae8 	.word	0x08000ae8
 800c790:	20006ae8 	.word	0x20006ae8
 800c794:	2000693c 	.word	0x2000693c
 800c798:	08000ac8 	.word	0x08000ac8

0800c79c <ADC_Start>:

/*******************************************************************************
 ADC_Start: ���¿�ʼADCɨ�����
*******************************************************************************/
void ADC_Start(void)
{
 800c79c:	b480      	push	{r7}
 800c79e:	af00      	add	r7, sp, #0
  Sampl[0]   = List[TIM_BASE].Val;         // �������ʱ����λֵ
 800c7a0:	4b20      	ldr	r3, [pc, #128]	; (800c824 <ADC_Start+0x88>)
 800c7a2:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 800c7a6:	4b20      	ldr	r3, [pc, #128]	; (800c828 <ADC_Start+0x8c>)
 800c7a8:	801a      	strh	r2, [r3, #0]
  __HAL_DMA_DISABLE(&hdma_adc1);  //  DMA1_Channel1->CCR   &= 0xFFFFFFFFE;
 800c7aa:	4b20      	ldr	r3, [pc, #128]	; (800c82c <ADC_Start+0x90>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	681a      	ldr	r2, [r3, #0]
 800c7b0:	4b1e      	ldr	r3, [pc, #120]	; (800c82c <ADC_Start+0x90>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	f022 0201 	bic.w	r2, r2, #1
 800c7b8:	601a      	str	r2, [r3, #0]
  hdma_adc1.Instance->M0AR = (unsigned)&Sampl[2];//  DMA1_Channel1->CMAR  = (u32)&Sampl[2];      // �����趨DMAͨ��1
 800c7ba:	4b1c      	ldr	r3, [pc, #112]	; (800c82c <ADC_Start+0x90>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	4a1c      	ldr	r2, [pc, #112]	; (800c830 <ADC_Start+0x94>)
 800c7c0:	60da      	str	r2, [r3, #12]
  if(( List[SYNCMODE].Val == NONE|| List[SYNCMODE].Val == SCAN)
 800c7c2:	4b18      	ldr	r3, [pc, #96]	; (800c824 <ADC_Start+0x88>)
 800c7c4:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 800c7c8:	2b05      	cmp	r3, #5
 800c7ca:	d004      	beq.n	800c7d6 <ADC_Start+0x3a>
 800c7cc:	4b15      	ldr	r3, [pc, #84]	; (800c824 <ADC_Start+0x88>)
 800c7ce:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 800c7d2:	2b01      	cmp	r3, #1
 800c7d4:	d10e      	bne.n	800c7f4 <ADC_Start+0x58>
     &&( List[TIM_BASE].Val>11))
 800c7d6:	4b13      	ldr	r3, [pc, #76]	; (800c824 <ADC_Start+0x88>)
 800c7d8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c7dc:	2b0b      	cmp	r3, #11
 800c7de:	dd09      	ble.n	800c7f4 <ADC_Start+0x58>
     {
	  __HAL_DMA_SET_COUNTER(&hdma_adc1, 302);  //       DMA1_Channel1->CNDTR  = 302;                       //10ms
 800c7e0:	4b12      	ldr	r3, [pc, #72]	; (800c82c <ADC_Start+0x90>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800c7e8:	605a      	str	r2, [r3, #4]
       List[VIEWPOSI].Val= 0;
 800c7ea:	4b0e      	ldr	r3, [pc, #56]	; (800c824 <ADC_Start+0x88>)
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800c7f2:	e00a      	b.n	800c80a <ADC_Start+0x6e>
     }
  else
  __HAL_DMA_SET_COUNTER(&hdma_adc1, DEPTH[List[SMPL_DPTH].Val]);//    DMA1_Channel1->CNDTR = DEPTH[List[SMPL_DPTH].Val]; // 0x00001000;
 800c7f4:	4b0b      	ldr	r3, [pc, #44]	; (800c824 <ADC_Start+0x88>)
 800c7f6:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	4b0d      	ldr	r3, [pc, #52]	; (800c834 <ADC_Start+0x98>)
 800c7fe:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800c802:	b29a      	uxth	r2, r3
 800c804:	4b09      	ldr	r3, [pc, #36]	; (800c82c <ADC_Start+0x90>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	605a      	str	r2, [r3, #4]
  __HAL_DMA_ENABLE(&hdma_adc1);  //  DMA1_Channel1->CCR  |= 0x00000001;                 // ���¿�ʼɨ�����
 800c80a:	4b08      	ldr	r3, [pc, #32]	; (800c82c <ADC_Start+0x90>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	681a      	ldr	r2, [r3, #0]
 800c810:	4b06      	ldr	r3, [pc, #24]	; (800c82c <ADC_Start+0x90>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f042 0201 	orr.w	r2, r2, #1
 800c818:	601a      	str	r2, [r3, #0]
}
 800c81a:	bf00      	nop
 800c81c:	46bd      	mov	sp, r7
 800c81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c822:	4770      	bx	lr
 800c824:	2000029c 	.word	0x2000029c
 800c828:	20002878 	.word	0x20002878
 800c82c:	20006b18 	.word	0x20006b18
 800c830:	2000287c 	.word	0x2000287c
 800c834:	08002270 	.word	0x08002270

0800c838 <fuzz>:

//  fuzzy equal returns 1 if close
char fuzz( short val, short last)
{
 800c838:	b480      	push	{r7}
 800c83a:	b083      	sub	sp, #12
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	4603      	mov	r3, r0
 800c840:	460a      	mov	r2, r1
 800c842:	80fb      	strh	r3, [r7, #6]
 800c844:	4613      	mov	r3, r2
 800c846:	80bb      	strh	r3, [r7, #4]
	if((val/16) == (last/16))
 800c848:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	da00      	bge.n	800c852 <fuzz+0x1a>
 800c850:	330f      	adds	r3, #15
 800c852:	111b      	asrs	r3, r3, #4
 800c854:	b21a      	sxth	r2, r3
 800c856:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	da00      	bge.n	800c860 <fuzz+0x28>
 800c85e:	330f      	adds	r3, #15
 800c860:	111b      	asrs	r3, r3, #4
 800c862:	b21b      	sxth	r3, r3
 800c864:	429a      	cmp	r2, r3
 800c866:	d101      	bne.n	800c86c <fuzz+0x34>
		return 1;
 800c868:	2301      	movs	r3, #1
 800c86a:	e000      	b.n	800c86e <fuzz+0x36>
	else
		return 0;
 800c86c:	2300      	movs	r3, #0
}
 800c86e:	4618      	mov	r0, r3
 800c870:	370c      	adds	r7, #12
 800c872:	46bd      	mov	sp, r7
 800c874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c878:	4770      	bx	lr

0800c87a <Valid_Button>:

// returns 0xff if invalad or code
char Valid_Button(short x,short y)
{
 800c87a:	b480      	push	{r7}
 800c87c:	b085      	sub	sp, #20
 800c87e:	af00      	add	r7, sp, #0
 800c880:	4603      	mov	r3, r0
 800c882:	460a      	mov	r2, r1
 800c884:	80fb      	strh	r3, [r7, #6]
 800c886:	4613      	mov	r3, r2
 800c888:	80bb      	strh	r3, [r7, #4]
	char valid;
	valid =0xFF;
 800c88a:	23ff      	movs	r3, #255	; 0xff
 800c88c:	73fb      	strb	r3, [r7, #15]

	x=x/4;
 800c88e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c892:	2b00      	cmp	r3, #0
 800c894:	da00      	bge.n	800c898 <Valid_Button+0x1e>
 800c896:	3303      	adds	r3, #3
 800c898:	109b      	asrs	r3, r3, #2
 800c89a:	80fb      	strh	r3, [r7, #6]
	y=y/4;
 800c89c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	da00      	bge.n	800c8a6 <Valid_Button+0x2c>
 800c8a4:	3303      	adds	r3, #3
 800c8a6:	109b      	asrs	r3, r3, #2
 800c8a8:	80bb      	strh	r3, [r7, #4]

	if(y<=205)  //lower screen
 800c8aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c8ae:	2bcd      	cmp	r3, #205	; 0xcd
 800c8b0:	dc17      	bgt.n	800c8e2 <Valid_Button+0x68>
	{
		if((x>359) && (x<664))  //middle screen bottom
 800c8b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c8b6:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800c8ba:	db06      	blt.n	800c8ca <Valid_Button+0x50>
 800c8bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c8c0:	f5b3 7f26 	cmp.w	r3, #664	; 0x298
 800c8c4:	da01      	bge.n	800c8ca <Valid_Button+0x50>
			valid =KEYCODE_DOWN;
 800c8c6:	2304      	movs	r3, #4
 800c8c8:	73fb      	strb	r3, [r7, #15]
		if((x <= 205)||(x >= 818)) //left or right screen
 800c8ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c8ce:	2bcd      	cmp	r3, #205	; 0xcd
 800c8d0:	dd05      	ble.n	800c8de <Valid_Button+0x64>
 800c8d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c8d6:	f240 3231 	movw	r2, #817	; 0x331
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	dd01      	ble.n	800c8e2 <Valid_Button+0x68>
			valid = KEYCODE_MANU;
 800c8de:	2302      	movs	r3, #2
 800c8e0:	73fb      	strb	r3, [r7, #15]
	}

	if(y >= 818)  //upper screen
 800c8e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c8e6:	f240 3231 	movw	r2, #817	; 0x331
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	dd17      	ble.n	800c91e <Valid_Button+0xa4>
	{
		if((x>359) && (x<664))  //middle screen up
 800c8ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c8f2:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800c8f6:	db06      	blt.n	800c906 <Valid_Button+0x8c>
 800c8f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c8fc:	f5b3 7f26 	cmp.w	r3, #664	; 0x298
 800c900:	da01      	bge.n	800c906 <Valid_Button+0x8c>
			valid =KEYCODE_UP;
 800c902:	2303      	movs	r3, #3
 800c904:	73fb      	strb	r3, [r7, #15]
		if((x <= 205)||(x >= 818)) //left or right screen
 800c906:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c90a:	2bcd      	cmp	r3, #205	; 0xcd
 800c90c:	dd05      	ble.n	800c91a <Valid_Button+0xa0>
 800c90e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c912:	f240 3231 	movw	r2, #817	; 0x331
 800c916:	4293      	cmp	r3, r2
 800c918:	dd01      	ble.n	800c91e <Valid_Button+0xa4>
			valid = KEYCODE_PLAY;
 800c91a:	2301      	movs	r3, #1
 800c91c:	73fb      	strb	r3, [r7, #15]
	}

	if((y>409) && (y<613))  //middle screen
 800c91e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c922:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 800c926:	db12      	blt.n	800c94e <Valid_Button+0xd4>
 800c928:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c92c:	f5b3 7f19 	cmp.w	r3, #612	; 0x264
 800c930:	dc0d      	bgt.n	800c94e <Valid_Button+0xd4>
	{
		if(x <= 306) //left screen
 800c932:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c936:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800c93a:	dc01      	bgt.n	800c940 <Valid_Button+0xc6>
			valid=KEYCODE_LEFT;
 800c93c:	2305      	movs	r3, #5
 800c93e:	73fb      	strb	r3, [r7, #15]
		if(x >= 717) //right screen
 800c940:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c944:	f5b3 7f33 	cmp.w	r3, #716	; 0x2cc
 800c948:	dd01      	ble.n	800c94e <Valid_Button+0xd4>
			valid=KEYCODE_RIGHT;
 800c94a:	2306      	movs	r3, #6
 800c94c:	73fb      	strb	r3, [r7, #15]
	}

	return valid;
 800c94e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c950:	4618      	mov	r0, r3
 800c952:	3714      	adds	r7, #20
 800c954:	46bd      	mov	sp, r7
 800c956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95a:	4770      	bx	lr

0800c95c <touchscan>:
//touchscan -- maps touch to key codes  returns 0 if no change
char touchscan(void)
{
 800c95c:	b590      	push	{r4, r7, lr}
 800c95e:	b083      	sub	sp, #12
 800c960:	af00      	add	r7, sp, #0
	short x,y;
	char Code, TmpCode;

	Code =0;
 800c962:	2300      	movs	r3, #0
 800c964:	71fb      	strb	r3, [r7, #7]
	if(Touch_Read(&x,&y)!=0)
 800c966:	1cba      	adds	r2, r7, #2
 800c968:	1d3b      	adds	r3, r7, #4
 800c96a:	4611      	mov	r1, r2
 800c96c:	4618      	mov	r0, r3
 800c96e:	f009 fe5f 	bl	8016630 <Touch_Read>
 800c972:	4603      	mov	r3, r0
 800c974:	2b00      	cmp	r3, #0
 800c976:	d036      	beq.n	800c9e6 <touchscan+0x8a>
	{  // there was a touch
		TmpCode = Valid_Button(x, y);
 800c978:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c97c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c980:	4611      	mov	r1, r2
 800c982:	4618      	mov	r0, r3
 800c984:	f7ff ff79 	bl	800c87a <Valid_Button>
 800c988:	4603      	mov	r3, r0
 800c98a:	71bb      	strb	r3, [r7, #6]
		if(TmpCode != 0xFF)
 800c98c:	79bb      	ldrb	r3, [r7, #6]
 800c98e:	2bff      	cmp	r3, #255	; 0xff
 800c990:	d027      	beq.n	800c9e2 <touchscan+0x86>
		{	//touched button area
			if(fuzz(x,Lastx) & fuzz(y,Lasty))
 800c992:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c996:	4a36      	ldr	r2, [pc, #216]	; (800ca70 <touchscan+0x114>)
 800c998:	8812      	ldrh	r2, [r2, #0]
 800c99a:	b212      	sxth	r2, r2
 800c99c:	4611      	mov	r1, r2
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f7ff ff4a 	bl	800c838 <fuzz>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	461c      	mov	r4, r3
 800c9a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c9ac:	4a31      	ldr	r2, [pc, #196]	; (800ca74 <touchscan+0x118>)
 800c9ae:	8812      	ldrh	r2, [r2, #0]
 800c9b0:	b212      	sxth	r2, r2
 800c9b2:	4611      	mov	r1, r2
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f7ff ff3f 	bl	800c838 <fuzz>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	4023      	ands	r3, r4
 800c9be:	b2db      	uxtb	r3, r3
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d147      	bne.n	800ca54 <touchscan+0xf8>
			{  //changed

			}
			else
			{  //no change
				if((Key_Wait_Cnt < 25)&&(Key_Repeat_Cnt == 0))
 800c9c4:	4b2c      	ldr	r3, [pc, #176]	; (800ca78 <touchscan+0x11c>)
 800c9c6:	781b      	ldrb	r3, [r3, #0]
 800c9c8:	b2db      	uxtb	r3, r3
 800c9ca:	2b18      	cmp	r3, #24
 800c9cc:	d801      	bhi.n	800c9d2 <touchscan+0x76>
 800c9ce:	4b2b      	ldr	r3, [pc, #172]	; (800ca7c <touchscan+0x120>)
 800c9d0:	781b      	ldrb	r3, [r3, #0]
				{ // �������� 0.5S ����

				}
				if((Key_Wait_Cnt == 0)&&(Key_Repeat_Cnt == 0))
 800c9d2:	4b29      	ldr	r3, [pc, #164]	; (800ca78 <touchscan+0x11c>)
 800c9d4:	781b      	ldrb	r3, [r3, #0]
 800c9d6:	b2db      	uxtb	r3, r3
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d13b      	bne.n	800ca54 <touchscan+0xf8>
 800c9dc:	4b27      	ldr	r3, [pc, #156]	; (800ca7c <touchscan+0x120>)
 800c9de:	781b      	ldrb	r3, [r3, #0]
 800c9e0:	e038      	b.n	800ca54 <touchscan+0xf8>

				}
			}
		}
		else
			return 0;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	e03f      	b.n	800ca66 <touchscan+0x10a>
	}
	else
	{  // untouched
	    if(TmpKeyP)
 800c9e6:	4b26      	ldr	r3, [pc, #152]	; (800ca80 <touchscan+0x124>)
 800c9e8:	781b      	ldrb	r3, [r3, #0]
 800c9ea:	b2db      	uxtb	r3, r3
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d005      	beq.n	800c9fc <touchscan+0xa0>
	    {
	    	Code = TmpKeyP;
 800c9f0:	4b23      	ldr	r3, [pc, #140]	; (800ca80 <touchscan+0x124>)
 800c9f2:	781b      	ldrb	r3, [r3, #0]
 800c9f4:	71fb      	strb	r3, [r7, #7]
	    	TmpKeyP = 0;
 800c9f6:	4b22      	ldr	r3, [pc, #136]	; (800ca80 <touchscan+0x124>)
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	701a      	strb	r2, [r3, #0]
	    }
	    if(TmpKeyOK &&(KeymS_F)&& (KeymS_Cnt > KEYTIME))
 800c9fc:	4b21      	ldr	r3, [pc, #132]	; (800ca84 <touchscan+0x128>)
 800c9fe:	781b      	ldrb	r3, [r3, #0]
 800ca00:	b2db      	uxtb	r3, r3
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d018      	beq.n	800ca38 <touchscan+0xdc>
 800ca06:	4b20      	ldr	r3, [pc, #128]	; (800ca88 <touchscan+0x12c>)
 800ca08:	781b      	ldrb	r3, [r3, #0]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d014      	beq.n	800ca38 <touchscan+0xdc>
 800ca0e:	4b1f      	ldr	r3, [pc, #124]	; (800ca8c <touchscan+0x130>)
 800ca10:	881b      	ldrh	r3, [r3, #0]
 800ca12:	b21a      	sxth	r2, r3
 800ca14:	4b1e      	ldr	r3, [pc, #120]	; (800ca90 <touchscan+0x134>)
 800ca16:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca1a:	429a      	cmp	r2, r3
 800ca1c:	dd0c      	ble.n	800ca38 <touchscan+0xdc>
	    {
	        Code = TmpKeyOK;
 800ca1e:	4b19      	ldr	r3, [pc, #100]	; (800ca84 <touchscan+0x128>)
 800ca20:	781b      	ldrb	r3, [r3, #0]
 800ca22:	71fb      	strb	r3, [r7, #7]
	        TmpKeyOK  = 0;
 800ca24:	4b17      	ldr	r3, [pc, #92]	; (800ca84 <touchscan+0x128>)
 800ca26:	2200      	movs	r2, #0
 800ca28:	701a      	strb	r2, [r3, #0]
	        KeymS_F = 0;
 800ca2a:	4b17      	ldr	r3, [pc, #92]	; (800ca88 <touchscan+0x12c>)
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	701a      	strb	r2, [r3, #0]
	        KeymS_Cnt = 0;
 800ca30:	4b16      	ldr	r3, [pc, #88]	; (800ca8c <touchscan+0x130>)
 800ca32:	2200      	movs	r2, #0
 800ca34:	801a      	strh	r2, [r3, #0]
 800ca36:	e00a      	b.n	800ca4e <touchscan+0xf2>
	    }
	    else
	    	if(TmpKeyM) {Code = TmpKeyM; TmpKeyM = 0;}
 800ca38:	4b16      	ldr	r3, [pc, #88]	; (800ca94 <touchscan+0x138>)
 800ca3a:	781b      	ldrb	r3, [r3, #0]
 800ca3c:	b2db      	uxtb	r3, r3
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d005      	beq.n	800ca4e <touchscan+0xf2>
 800ca42:	4b14      	ldr	r3, [pc, #80]	; (800ca94 <touchscan+0x138>)
 800ca44:	781b      	ldrb	r3, [r3, #0]
 800ca46:	71fb      	strb	r3, [r7, #7]
 800ca48:	4b12      	ldr	r3, [pc, #72]	; (800ca94 <touchscan+0x138>)
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	701a      	strb	r2, [r3, #0]
	        	Key_Wait_Cnt=50;                                //���ó������� 1.0S ����
 800ca4e:	4b0a      	ldr	r3, [pc, #40]	; (800ca78 <touchscan+0x11c>)
 800ca50:	2232      	movs	r2, #50	; 0x32
 800ca52:	701a      	strb	r2, [r3, #0]
	}
	Lastx =x;
 800ca54:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800ca58:	4b05      	ldr	r3, [pc, #20]	; (800ca70 <touchscan+0x114>)
 800ca5a:	801a      	strh	r2, [r3, #0]
	Lasty =y;
 800ca5c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800ca60:	4b04      	ldr	r3, [pc, #16]	; (800ca74 <touchscan+0x118>)
 800ca62:	801a      	strh	r2, [r3, #0]
	return Code;
 800ca64:	79fb      	ldrb	r3, [r7, #7]
}
 800ca66:	4618      	mov	r0, r3
 800ca68:	370c      	adds	r7, #12
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bd90      	pop	{r4, r7, pc}
 800ca6e:	bf00      	nop
 800ca70:	20000002 	.word	0x20000002
 800ca74:	20000004 	.word	0x20000004
 800ca78:	20000790 	.word	0x20000790
 800ca7c:	2000078f 	.word	0x2000078f
 800ca80:	20000782 	.word	0x20000782
 800ca84:	20000784 	.word	0x20000784
 800ca88:	2000078e 	.word	0x2000078e
 800ca8c:	20000a3a 	.word	0x20000a3a
 800ca90:	20000786 	.word	0x20000786
 800ca94:	20000783 	.word	0x20000783

0800ca98 <Tim3_ISP>:

/*******************************************************************************
* Tim3�жϴ������
*******************************************************************************/
void Tim3_ISP(void)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b082      	sub	sp, #8
 800ca9c:	af00      	add	r7, sp, #0

	char checkpress;
    char KeyCode;

//  TIM3->SR = 0;          //moved to main //���жϱ�־
  if(KeymS_F)KeymS_Cnt++;                  //�������ʱ
 800ca9e:	4b73      	ldr	r3, [pc, #460]	; (800cc6c <Tim3_ISP+0x1d4>)
 800caa0:	781b      	ldrb	r3, [r3, #0]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d008      	beq.n	800cab8 <Tim3_ISP+0x20>
 800caa6:	4b72      	ldr	r3, [pc, #456]	; (800cc70 <Tim3_ISP+0x1d8>)
 800caa8:	881b      	ldrh	r3, [r3, #0]
 800caaa:	b21b      	sxth	r3, r3
 800caac:	b29b      	uxth	r3, r3
 800caae:	3301      	adds	r3, #1
 800cab0:	b29b      	uxth	r3, r3
 800cab2:	b21a      	sxth	r2, r3
 800cab4:	4b6e      	ldr	r3, [pc, #440]	; (800cc70 <Tim3_ISP+0x1d8>)
 800cab6:	801a      	strh	r2, [r3, #0]
  Tim_Cnt++;
 800cab8:	4b6e      	ldr	r3, [pc, #440]	; (800cc74 <Tim3_ISP+0x1dc>)
 800caba:	881b      	ldrh	r3, [r3, #0]
 800cabc:	b21b      	sxth	r3, r3
 800cabe:	b29b      	uxth	r3, r3
 800cac0:	3301      	adds	r3, #1
 800cac2:	b29b      	uxth	r3, r3
 800cac4:	b21a      	sxth	r2, r3
 800cac6:	4b6b      	ldr	r3, [pc, #428]	; (800cc74 <Tim3_ISP+0x1dc>)
 800cac8:	801a      	strh	r2, [r3, #0]
  if(Delay_Cnt>0) Delay_Cnt--;
 800caca:	4b6b      	ldr	r3, [pc, #428]	; (800cc78 <Tim3_ISP+0x1e0>)
 800cacc:	881b      	ldrh	r3, [r3, #0]
 800cace:	b21b      	sxth	r3, r3
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	dd08      	ble.n	800cae6 <Tim3_ISP+0x4e>
 800cad4:	4b68      	ldr	r3, [pc, #416]	; (800cc78 <Tim3_ISP+0x1e0>)
 800cad6:	881b      	ldrh	r3, [r3, #0]
 800cad8:	b21b      	sxth	r3, r3
 800cada:	b29b      	uxth	r3, r3
 800cadc:	3b01      	subs	r3, #1
 800cade:	b29b      	uxth	r3, r3
 800cae0:	b21a      	sxth	r2, r3
 800cae2:	4b65      	ldr	r3, [pc, #404]	; (800cc78 <Tim3_ISP+0x1e0>)
 800cae4:	801a      	strh	r2, [r3, #0]
  if (mS_Cnt > 0)
 800cae6:	4b65      	ldr	r3, [pc, #404]	; (800cc7c <Tim3_ISP+0x1e4>)
 800cae8:	881b      	ldrh	r3, [r3, #0]
 800caea:	b21b      	sxth	r3, r3
 800caec:	2b00      	cmp	r3, #0
 800caee:	f340 8081 	ble.w	800cbf4 <Tim3_ISP+0x15c>
  {
    mS_Cnt--;
 800caf2:	4b62      	ldr	r3, [pc, #392]	; (800cc7c <Tim3_ISP+0x1e4>)
 800caf4:	881b      	ldrh	r3, [r3, #0]
 800caf6:	b21b      	sxth	r3, r3
 800caf8:	b29b      	uxth	r3, r3
 800cafa:	3b01      	subs	r3, #1
 800cafc:	b29b      	uxth	r3, r3
 800cafe:	b21a      	sxth	r2, r3
 800cb00:	4b5e      	ldr	r3, [pc, #376]	; (800cc7c <Tim3_ISP+0x1e4>)
 800cb02:	801a      	strh	r2, [r3, #0]
    if ((mS_Cnt%20)== 0)
 800cb04:	4b5d      	ldr	r3, [pc, #372]	; (800cc7c <Tim3_ISP+0x1e4>)
 800cb06:	881b      	ldrh	r3, [r3, #0]
 800cb08:	b21a      	sxth	r2, r3
 800cb0a:	4b5d      	ldr	r3, [pc, #372]	; (800cc80 <Tim3_ISP+0x1e8>)
 800cb0c:	fb83 1302 	smull	r1, r3, r3, r2
 800cb10:	10d9      	asrs	r1, r3, #3
 800cb12:	17d3      	asrs	r3, r2, #31
 800cb14:	1ac9      	subs	r1, r1, r3
 800cb16:	460b      	mov	r3, r1
 800cb18:	009b      	lsls	r3, r3, #2
 800cb1a:	440b      	add	r3, r1
 800cb1c:	009b      	lsls	r3, r3, #2
 800cb1e:	1ad3      	subs	r3, r2, r3
 800cb20:	b21b      	sxth	r3, r3
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	f040 809d 	bne.w	800cc62 <Tim3_ISP+0x1ca>
    {                 //  20mS  ÿ20mS��1�μ���
    	if(Key_Wait_Cnt)    Key_Wait_Cnt--;
 800cb28:	4b56      	ldr	r3, [pc, #344]	; (800cc84 <Tim3_ISP+0x1ec>)
 800cb2a:	781b      	ldrb	r3, [r3, #0]
 800cb2c:	b2db      	uxtb	r3, r3
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d006      	beq.n	800cb40 <Tim3_ISP+0xa8>
 800cb32:	4b54      	ldr	r3, [pc, #336]	; (800cc84 <Tim3_ISP+0x1ec>)
 800cb34:	781b      	ldrb	r3, [r3, #0]
 800cb36:	b2db      	uxtb	r3, r3
 800cb38:	3b01      	subs	r3, #1
 800cb3a:	b2da      	uxtb	r2, r3
 800cb3c:	4b51      	ldr	r3, [pc, #324]	; (800cc84 <Tim3_ISP+0x1ec>)
 800cb3e:	701a      	strb	r2, [r3, #0]
    	if(Key_Repeat_Cnt)  Key_Repeat_Cnt--;
 800cb40:	4b51      	ldr	r3, [pc, #324]	; (800cc88 <Tim3_ISP+0x1f0>)
 800cb42:	781b      	ldrb	r3, [r3, #0]
 800cb44:	b2db      	uxtb	r3, r3
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d006      	beq.n	800cb58 <Tim3_ISP+0xc0>
 800cb4a:	4b4f      	ldr	r3, [pc, #316]	; (800cc88 <Tim3_ISP+0x1f0>)
 800cb4c:	781b      	ldrb	r3, [r3, #0]
 800cb4e:	b2db      	uxtb	r3, r3
 800cb50:	3b01      	subs	r3, #1
 800cb52:	b2da      	uxtb	r2, r3
 800cb54:	4b4c      	ldr	r3, [pc, #304]	; (800cc88 <Tim3_ISP+0x1f0>)
 800cb56:	701a      	strb	r2, [r3, #0]
    	KeyCode = checkpress =0 ;
 800cb58:	2300      	movs	r3, #0
 800cb5a:	71fb      	strb	r3, [r7, #7]
 800cb5c:	79fb      	ldrb	r3, [r7, #7]
 800cb5e:	71bb      	strb	r3, [r7, #6]
    	Touch = HAL_GPIO_ReadPin(TpI_GPIO_Port, TpI_Pin);  //read pen
 800cb60:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cb64:	4849      	ldr	r0, [pc, #292]	; (800cc8c <Tim3_ISP+0x1f4>)
 800cb66:	f00d f9d7 	bl	8019f18 <HAL_GPIO_ReadPin>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	461a      	mov	r2, r3
 800cb6e:	4b48      	ldr	r3, [pc, #288]	; (800cc90 <Tim3_ISP+0x1f8>)
 800cb70:	701a      	strb	r2, [r3, #0]
    	if (Touch != LastTouch)
 800cb72:	4b47      	ldr	r3, [pc, #284]	; (800cc90 <Tim3_ISP+0x1f8>)
 800cb74:	781a      	ldrb	r2, [r3, #0]
 800cb76:	4b47      	ldr	r3, [pc, #284]	; (800cc94 <Tim3_ISP+0x1fc>)
 800cb78:	781b      	ldrb	r3, [r3, #0]
 800cb7a:	429a      	cmp	r2, r3
 800cb7c:	d006      	beq.n	800cb8c <Tim3_ISP+0xf4>
    	{
    	// pen changed
    		checkpress =1; //check pressure if pen changed
 800cb7e:	2301      	movs	r3, #1
 800cb80:	71fb      	strb	r3, [r7, #7]
    		LastTouch = Touch;
 800cb82:	4b43      	ldr	r3, [pc, #268]	; (800cc90 <Tim3_ISP+0x1f8>)
 800cb84:	781a      	ldrb	r2, [r3, #0]
 800cb86:	4b43      	ldr	r3, [pc, #268]	; (800cc94 <Tim3_ISP+0x1fc>)
 800cb88:	701a      	strb	r2, [r3, #0]
 800cb8a:	e005      	b.n	800cb98 <Tim3_ISP+0x100>
    	}
    	else
    	{
    	  if(Touch != 0)
 800cb8c:	4b40      	ldr	r3, [pc, #256]	; (800cc90 <Tim3_ISP+0x1f8>)
 800cb8e:	781b      	ldrb	r3, [r3, #0]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d001      	beq.n	800cb98 <Tim3_ISP+0x100>
    	  {
    	    //check that press is valid
    		checkpress =1;
 800cb94:	2301      	movs	r3, #1
 800cb96:	71fb      	strb	r3, [r7, #7]
    	  }
    	}

    	if(checkpress !=0)
 800cb98:	79fb      	ldrb	r3, [r7, #7]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d003      	beq.n	800cba6 <Tim3_ISP+0x10e>
    	{
    		KeyCode = touchscan();
 800cb9e:	f7ff fedd 	bl	800c95c <touchscan>
 800cba2:	4603      	mov	r3, r0
 800cba4:	71bb      	strb	r3, [r7, #6]
       	}
//      KeyCode = KeyScan();
      if(KeyCode !=0) Key_Buffer = KeyCode;
 800cba6:	79bb      	ldrb	r3, [r7, #6]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d002      	beq.n	800cbb2 <Tim3_ISP+0x11a>
 800cbac:	4a3a      	ldr	r2, [pc, #232]	; (800cc98 <Tim3_ISP+0x200>)
 800cbae:	79bb      	ldrb	r3, [r7, #6]
 800cbb0:	7013      	strb	r3, [r2, #0]

      if(Cursor_Cnt >0)
 800cbb2:	4b3a      	ldr	r3, [pc, #232]	; (800cc9c <Tim3_ISP+0x204>)
 800cbb4:	881b      	ldrh	r3, [r3, #0]
 800cbb6:	b21b      	sxth	r3, r3
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	dd09      	ble.n	800cbd0 <Tim3_ISP+0x138>
    	  Cursor_Cnt--;
 800cbbc:	4b37      	ldr	r3, [pc, #220]	; (800cc9c <Tim3_ISP+0x204>)
 800cbbe:	881b      	ldrh	r3, [r3, #0]
 800cbc0:	b21b      	sxth	r3, r3
 800cbc2:	b29b      	uxth	r3, r3
 800cbc4:	3b01      	subs	r3, #1
 800cbc6:	b29b      	uxth	r3, r3
 800cbc8:	b21a      	sxth	r2, r3
 800cbca:	4b34      	ldr	r3, [pc, #208]	; (800cc9c <Tim3_ISP+0x204>)
 800cbcc:	801a      	strh	r2, [r3, #0]
        Windows_Pop = 0;
        Clr_WavePosi(DAR);
      }
    }
  }
}
 800cbce:	e048      	b.n	800cc62 <Tim3_ISP+0x1ca>
        Cursor_Cnt = 12;                  // 12*20mS=240mS
 800cbd0:	4b32      	ldr	r3, [pc, #200]	; (800cc9c <Tim3_ISP+0x204>)
 800cbd2:	220c      	movs	r2, #12
 800cbd4:	801a      	strh	r2, [r3, #0]
        Twink = !Twink;
 800cbd6:	4b32      	ldr	r3, [pc, #200]	; (800cca0 <Tim3_ISP+0x208>)
 800cbd8:	781b      	ldrb	r3, [r3, #0]
 800cbda:	b2db      	uxtb	r3, r3
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	bf0c      	ite	eq
 800cbe0:	2301      	moveq	r3, #1
 800cbe2:	2300      	movne	r3, #0
 800cbe4:	b2db      	uxtb	r3, r3
 800cbe6:	461a      	mov	r2, r3
 800cbe8:	4b2d      	ldr	r3, [pc, #180]	; (800cca0 <Tim3_ISP+0x208>)
 800cbea:	701a      	strb	r2, [r3, #0]
        Blink =  BLINK;
 800cbec:	4b2d      	ldr	r3, [pc, #180]	; (800cca4 <Tim3_ISP+0x20c>)
 800cbee:	2201      	movs	r2, #1
 800cbf0:	701a      	strb	r2, [r3, #0]
}
 800cbf2:	e036      	b.n	800cc62 <Tim3_ISP+0x1ca>
    mS_Cnt = 1000;
 800cbf4:	4b21      	ldr	r3, [pc, #132]	; (800cc7c <Tim3_ISP+0x1e4>)
 800cbf6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cbfa:	801a      	strh	r2, [r3, #0]
    if((List[STANDBY].Val !=0) && (StdBy_Time > 0))
 800cbfc:	4b2a      	ldr	r3, [pc, #168]	; (800cca8 <Tim3_ISP+0x210>)
 800cbfe:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d00d      	beq.n	800cc22 <Tim3_ISP+0x18a>
 800cc06:	4b29      	ldr	r3, [pc, #164]	; (800ccac <Tim3_ISP+0x214>)
 800cc08:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	dd08      	ble.n	800cc22 <Tim3_ISP+0x18a>
      StdBy_Time--;      //������ʱ
 800cc10:	4b26      	ldr	r3, [pc, #152]	; (800ccac <Tim3_ISP+0x214>)
 800cc12:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cc16:	b29b      	uxth	r3, r3
 800cc18:	3b01      	subs	r3, #1
 800cc1a:	b29b      	uxth	r3, r3
 800cc1c:	b21a      	sxth	r2, r3
 800cc1e:	4b23      	ldr	r3, [pc, #140]	; (800ccac <Tim3_ISP+0x214>)
 800cc20:	801a      	strh	r2, [r3, #0]
    if(PopupCnt > 0)
 800cc22:	4b23      	ldr	r3, [pc, #140]	; (800ccb0 <Tim3_ISP+0x218>)
 800cc24:	881b      	ldrh	r3, [r3, #0]
 800cc26:	b21b      	sxth	r3, r3
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	dd0d      	ble.n	800cc48 <Tim3_ISP+0x1b0>
      if(Cal_Flag == 0)
 800cc2c:	4b21      	ldr	r3, [pc, #132]	; (800ccb4 <Tim3_ISP+0x21c>)
 800cc2e:	781b      	ldrb	r3, [r3, #0]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d116      	bne.n	800cc62 <Tim3_ISP+0x1ca>
    	  PopupCnt--;
 800cc34:	4b1e      	ldr	r3, [pc, #120]	; (800ccb0 <Tim3_ISP+0x218>)
 800cc36:	881b      	ldrh	r3, [r3, #0]
 800cc38:	b21b      	sxth	r3, r3
 800cc3a:	b29b      	uxth	r3, r3
 800cc3c:	3b01      	subs	r3, #1
 800cc3e:	b29b      	uxth	r3, r3
 800cc40:	b21a      	sxth	r2, r3
 800cc42:	4b1b      	ldr	r3, [pc, #108]	; (800ccb0 <Tim3_ISP+0x218>)
 800cc44:	801a      	strh	r2, [r3, #0]
}
 800cc46:	e00c      	b.n	800cc62 <Tim3_ISP+0x1ca>
      Close_Pop();        // �رնԻ���
 800cc48:	f001 ff04 	bl	800ea54 <Close_Pop>
      if(Windows_Pop)
 800cc4c:	4b1a      	ldr	r3, [pc, #104]	; (800ccb8 <Tim3_ISP+0x220>)
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d006      	beq.n	800cc62 <Tim3_ISP+0x1ca>
        Windows_Pop = 0;
 800cc54:	4b18      	ldr	r3, [pc, #96]	; (800ccb8 <Tim3_ISP+0x220>)
 800cc56:	2200      	movs	r2, #0
 800cc58:	701a      	strb	r2, [r3, #0]
        Clr_WavePosi(DAR);
 800cc5a:	f643 10e7 	movw	r0, #14823	; 0x39e7
 800cc5e:	f007 fe63 	bl	8014928 <Clr_WavePosi>
}
 800cc62:	bf00      	nop
 800cc64:	3708      	adds	r7, #8
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}
 800cc6a:	bf00      	nop
 800cc6c:	2000078e 	.word	0x2000078e
 800cc70:	20000a3a 	.word	0x20000a3a
 800cc74:	20000a3c 	.word	0x20000a3c
 800cc78:	2000078c 	.word	0x2000078c
 800cc7c:	2000078a 	.word	0x2000078a
 800cc80:	66666667 	.word	0x66666667
 800cc84:	20000790 	.word	0x20000790
 800cc88:	2000078f 	.word	0x2000078f
 800cc8c:	40020400 	.word	0x40020400
 800cc90:	20000a38 	.word	0x20000a38
 800cc94:	20000791 	.word	0x20000791
 800cc98:	20000781 	.word	0x20000781
 800cc9c:	20000788 	.word	0x20000788
 800cca0:	20000780 	.word	0x20000780
 800cca4:	20000a39 	.word	0x20000a39
 800cca8:	2000029c 	.word	0x2000029c
 800ccac:	200007a4 	.word	0x200007a4
 800ccb0:	20000000 	.word	0x20000000
 800ccb4:	200001b8 	.word	0x200001b8
 800ccb8:	200007ae 	.word	0x200007ae

0800ccbc <Fill_Base>:
 800ccbc:	b480      	push	{r7}
 800ccbe:	af00      	add	r7, sp, #0
 800ccc0:	4b12      	ldr	r3, [pc, #72]	; (800cd0c <Fill_Base+0x50>)
 800ccc2:	4a13      	ldr	r2, [pc, #76]	; (800cd10 <Fill_Base+0x54>)
 800ccc4:	601a      	str	r2, [r3, #0]
 800ccc6:	4b13      	ldr	r3, [pc, #76]	; (800cd14 <Fill_Base+0x58>)
 800ccc8:	2266      	movs	r2, #102	; 0x66
 800ccca:	601a      	str	r2, [r3, #0]
 800cccc:	4b0f      	ldr	r3, [pc, #60]	; (800cd0c <Fill_Base+0x50>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	4a11      	ldr	r2, [pc, #68]	; (800cd18 <Fill_Base+0x5c>)
 800ccd2:	6812      	ldr	r2, [r2, #0]
 800ccd4:	601a      	str	r2, [r3, #0]
 800ccd6:	4b0d      	ldr	r3, [pc, #52]	; (800cd0c <Fill_Base+0x50>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	3304      	adds	r3, #4
 800ccdc:	4a0b      	ldr	r2, [pc, #44]	; (800cd0c <Fill_Base+0x50>)
 800ccde:	6013      	str	r3, [r2, #0]
 800cce0:	4b0c      	ldr	r3, [pc, #48]	; (800cd14 <Fill_Base+0x58>)
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	3b01      	subs	r3, #1
 800cce6:	4a0b      	ldr	r2, [pc, #44]	; (800cd14 <Fill_Base+0x58>)
 800cce8:	6013      	str	r3, [r2, #0]
 800ccea:	4b0a      	ldr	r3, [pc, #40]	; (800cd14 <Fill_Base+0x58>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d000      	beq.n	800ccf4 <Fill_Base+0x38>
 800ccf2:	e7eb      	b.n	800cccc <Fill_Base+0x10>
 800ccf4:	4b05      	ldr	r3, [pc, #20]	; (800cd0c <Fill_Base+0x50>)
 800ccf6:	4a09      	ldr	r2, [pc, #36]	; (800cd1c <Fill_Base+0x60>)
 800ccf8:	601a      	str	r2, [r3, #0]
 800ccfa:	4b07      	ldr	r3, [pc, #28]	; (800cd18 <Fill_Base+0x5c>)
 800ccfc:	f647 32ef 	movw	r2, #31727	; 0x7bef
 800cd00:	601a      	str	r2, [r3, #0]
 800cd02:	bf00      	nop
 800cd04:	46bd      	mov	sp, r7
 800cd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0a:	4770      	bx	lr
 800cd0c:	20000bf4 	.word	0x20000bf4
 800cd10:	20000be8 	.word	0x20000be8
 800cd14:	20000a44 	.word	0x20000a44
 800cd18:	20000a48 	.word	0x20000a48
 800cd1c:	20000be6 	.word	0x20000be6

0800cd20 <Buld_0>:
 800cd20:	b580      	push	{r7, lr}
 800cd22:	af00      	add	r7, sp, #0
 800cd24:	4b03      	ldr	r3, [pc, #12]	; (800cd34 <Buld_0+0x14>)
 800cd26:	2200      	movs	r2, #0
 800cd28:	601a      	str	r2, [r3, #0]
 800cd2a:	f7ff ffc7 	bl	800ccbc <Fill_Base>
 800cd2e:	bf00      	nop
 800cd30:	bd80      	pop	{r7, pc}
 800cd32:	bf00      	nop
 800cd34:	20000a48 	.word	0x20000a48

0800cd38 <Buld_1>:
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	af00      	add	r7, sp, #0
 800cd3c:	4b0e      	ldr	r3, [pc, #56]	; (800cd78 <Buld_1+0x40>)
 800cd3e:	4a0f      	ldr	r2, [pc, #60]	; (800cd7c <Buld_1+0x44>)
 800cd40:	601a      	str	r2, [r3, #0]
 800cd42:	f7ff ffbb 	bl	800ccbc <Fill_Base>
 800cd46:	4b0c      	ldr	r3, [pc, #48]	; (800cd78 <Buld_1+0x40>)
 800cd48:	2200      	movs	r2, #0
 800cd4a:	601a      	str	r2, [r3, #0]
 800cd4c:	4b0c      	ldr	r3, [pc, #48]	; (800cd80 <Buld_1+0x48>)
 800cd4e:	f44f 72c9 	mov.w	r2, #402	; 0x192
 800cd52:	601a      	str	r2, [r3, #0]
 800cd54:	4b08      	ldr	r3, [pc, #32]	; (800cd78 <Buld_1+0x40>)
 800cd56:	6819      	ldr	r1, [r3, #0]
 800cd58:	4b0a      	ldr	r3, [pc, #40]	; (800cd84 <Buld_1+0x4c>)
 800cd5a:	681a      	ldr	r2, [r3, #0]
 800cd5c:	4b08      	ldr	r3, [pc, #32]	; (800cd80 <Buld_1+0x48>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	4413      	add	r3, r2
 800cd62:	b28a      	uxth	r2, r1
 800cd64:	801a      	strh	r2, [r3, #0]
 800cd66:	4b04      	ldr	r3, [pc, #16]	; (800cd78 <Buld_1+0x40>)
 800cd68:	681a      	ldr	r2, [r3, #0]
 800cd6a:	4b06      	ldr	r3, [pc, #24]	; (800cd84 <Buld_1+0x4c>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	3b02      	subs	r3, #2
 800cd70:	b292      	uxth	r2, r2
 800cd72:	801a      	strh	r2, [r3, #0]
 800cd74:	bf00      	nop
 800cd76:	bd80      	pop	{r7, pc}
 800cd78:	20000a48 	.word	0x20000a48
 800cd7c:	7bef7bef 	.word	0x7bef7bef
 800cd80:	20000a44 	.word	0x20000a44
 800cd84:	20000bf4 	.word	0x20000bf4

0800cd88 <Buld_2>:
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	af00      	add	r7, sp, #0
 800cd8c:	4b0c      	ldr	r3, [pc, #48]	; (800cdc0 <Buld_2+0x38>)
 800cd8e:	2200      	movs	r2, #0
 800cd90:	601a      	str	r2, [r3, #0]
 800cd92:	f7ff ff93 	bl	800ccbc <Fill_Base>
 800cd96:	4b0b      	ldr	r3, [pc, #44]	; (800cdc4 <Buld_2+0x3c>)
 800cd98:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800cd9c:	601a      	str	r2, [r3, #0]
 800cd9e:	4b08      	ldr	r3, [pc, #32]	; (800cdc0 <Buld_2+0x38>)
 800cda0:	6819      	ldr	r1, [r3, #0]
 800cda2:	4b09      	ldr	r3, [pc, #36]	; (800cdc8 <Buld_2+0x40>)
 800cda4:	681a      	ldr	r2, [r3, #0]
 800cda6:	4b07      	ldr	r3, [pc, #28]	; (800cdc4 <Buld_2+0x3c>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	4413      	add	r3, r2
 800cdac:	b28a      	uxth	r2, r1
 800cdae:	801a      	strh	r2, [r3, #0]
 800cdb0:	4b03      	ldr	r3, [pc, #12]	; (800cdc0 <Buld_2+0x38>)
 800cdb2:	681a      	ldr	r2, [r3, #0]
 800cdb4:	4b04      	ldr	r3, [pc, #16]	; (800cdc8 <Buld_2+0x40>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	b292      	uxth	r2, r2
 800cdba:	801a      	strh	r2, [r3, #0]
 800cdbc:	bf00      	nop
 800cdbe:	bd80      	pop	{r7, pc}
 800cdc0:	20000a48 	.word	0x20000a48
 800cdc4:	20000a44 	.word	0x20000a44
 800cdc8:	20000bf4 	.word	0x20000bf4

0800cdcc <Buld_3>:
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	af00      	add	r7, sp, #0
 800cdd0:	4b0e      	ldr	r3, [pc, #56]	; (800ce0c <Buld_3+0x40>)
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	601a      	str	r2, [r3, #0]
 800cdd6:	f7ff ff71 	bl	800ccbc <Fill_Base>
 800cdda:	4b0d      	ldr	r3, [pc, #52]	; (800ce10 <Buld_3+0x44>)
 800cddc:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 800cde0:	601a      	str	r2, [r3, #0]
 800cde2:	4b0b      	ldr	r3, [pc, #44]	; (800ce10 <Buld_3+0x44>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	3b32      	subs	r3, #50	; 0x32
 800cde8:	4a09      	ldr	r2, [pc, #36]	; (800ce10 <Buld_3+0x44>)
 800cdea:	6013      	str	r3, [r2, #0]
 800cdec:	4b07      	ldr	r3, [pc, #28]	; (800ce0c <Buld_3+0x40>)
 800cdee:	6819      	ldr	r1, [r3, #0]
 800cdf0:	4b08      	ldr	r3, [pc, #32]	; (800ce14 <Buld_3+0x48>)
 800cdf2:	681a      	ldr	r2, [r3, #0]
 800cdf4:	4b06      	ldr	r3, [pc, #24]	; (800ce10 <Buld_3+0x44>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	4413      	add	r3, r2
 800cdfa:	b28a      	uxth	r2, r1
 800cdfc:	801a      	strh	r2, [r3, #0]
 800cdfe:	4b04      	ldr	r3, [pc, #16]	; (800ce10 <Buld_3+0x44>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d000      	beq.n	800ce08 <Buld_3+0x3c>
 800ce06:	e7ec      	b.n	800cde2 <Buld_3+0x16>
 800ce08:	bf00      	nop
 800ce0a:	bd80      	pop	{r7, pc}
 800ce0c:	20000a48 	.word	0x20000a48
 800ce10:	20000a44 	.word	0x20000a44
 800ce14:	20000bf4 	.word	0x20000bf4

0800ce18 <Buld_4>:
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	af00      	add	r7, sp, #0
 800ce1c:	4b0e      	ldr	r3, [pc, #56]	; (800ce58 <Buld_4+0x40>)
 800ce1e:	2200      	movs	r2, #0
 800ce20:	601a      	str	r2, [r3, #0]
 800ce22:	f7ff ff4b 	bl	800ccbc <Fill_Base>
 800ce26:	4b0d      	ldr	r3, [pc, #52]	; (800ce5c <Buld_4+0x44>)
 800ce28:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 800ce2c:	601a      	str	r2, [r3, #0]
 800ce2e:	4b0b      	ldr	r3, [pc, #44]	; (800ce5c <Buld_4+0x44>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	3b0a      	subs	r3, #10
 800ce34:	4a09      	ldr	r2, [pc, #36]	; (800ce5c <Buld_4+0x44>)
 800ce36:	6013      	str	r3, [r2, #0]
 800ce38:	4b07      	ldr	r3, [pc, #28]	; (800ce58 <Buld_4+0x40>)
 800ce3a:	6819      	ldr	r1, [r3, #0]
 800ce3c:	4b08      	ldr	r3, [pc, #32]	; (800ce60 <Buld_4+0x48>)
 800ce3e:	681a      	ldr	r2, [r3, #0]
 800ce40:	4b06      	ldr	r3, [pc, #24]	; (800ce5c <Buld_4+0x44>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	4413      	add	r3, r2
 800ce46:	b28a      	uxth	r2, r1
 800ce48:	801a      	strh	r2, [r3, #0]
 800ce4a:	4b04      	ldr	r3, [pc, #16]	; (800ce5c <Buld_4+0x44>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d000      	beq.n	800ce54 <Buld_4+0x3c>
 800ce52:	e7ec      	b.n	800ce2e <Buld_4+0x16>
 800ce54:	bf00      	nop
 800ce56:	bd80      	pop	{r7, pc}
 800ce58:	20000a48 	.word	0x20000a48
 800ce5c:	20000a44 	.word	0x20000a44
 800ce60:	20000bf4 	.word	0x20000bf4

0800ce64 <Draw_Digit_Analog>:
 800ce64:	b480      	push	{r7}
 800ce66:	b083      	sub	sp, #12
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	80fb      	strh	r3, [r7, #6]
 800ce6e:	88fb      	ldrh	r3, [r7, #6]
 800ce70:	2b01      	cmp	r3, #1
 800ce72:	d144      	bne.n	800cefe <Draw_Digit_Analog+0x9a>
 800ce74:	4b7d      	ldr	r3, [pc, #500]	; (800d06c <Draw_Digit_Analog+0x208>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f503 7361 	add.w	r3, r3, #900	; 0x384
 800ce7c:	4a7c      	ldr	r2, [pc, #496]	; (800d070 <Draw_Digit_Analog+0x20c>)
 800ce7e:	6013      	str	r3, [r2, #0]
 800ce80:	4b7b      	ldr	r3, [pc, #492]	; (800d070 <Draw_Digit_Analog+0x20c>)
 800ce82:	681a      	ldr	r2, [r3, #0]
 800ce84:	4b7b      	ldr	r3, [pc, #492]	; (800d074 <Draw_Digit_Analog+0x210>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	4413      	add	r3, r2
 800ce8a:	4a79      	ldr	r2, [pc, #484]	; (800d070 <Draw_Digit_Analog+0x20c>)
 800ce8c:	6013      	str	r3, [r2, #0]
 800ce8e:	4b78      	ldr	r3, [pc, #480]	; (800d070 <Draw_Digit_Analog+0x20c>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	781b      	ldrb	r3, [r3, #0]
 800ce94:	461a      	mov	r2, r3
 800ce96:	4b78      	ldr	r3, [pc, #480]	; (800d078 <Draw_Digit_Analog+0x214>)
 800ce98:	601a      	str	r2, [r3, #0]
 800ce9a:	4b75      	ldr	r3, [pc, #468]	; (800d070 <Draw_Digit_Analog+0x20c>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	3b01      	subs	r3, #1
 800cea0:	781b      	ldrb	r3, [r3, #0]
 800cea2:	461a      	mov	r2, r3
 800cea4:	4b75      	ldr	r3, [pc, #468]	; (800d07c <Draw_Digit_Analog+0x218>)
 800cea6:	601a      	str	r2, [r3, #0]
 800cea8:	4b75      	ldr	r3, [pc, #468]	; (800d080 <Draw_Digit_Analog+0x21c>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	085b      	lsrs	r3, r3, #1
 800ceae:	4a74      	ldr	r2, [pc, #464]	; (800d080 <Draw_Digit_Analog+0x21c>)
 800ceb0:	6013      	str	r3, [r2, #0]
 800ceb2:	4b71      	ldr	r3, [pc, #452]	; (800d078 <Draw_Digit_Analog+0x214>)
 800ceb4:	681a      	ldr	r2, [r3, #0]
 800ceb6:	4b73      	ldr	r3, [pc, #460]	; (800d084 <Draw_Digit_Analog+0x220>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	4013      	ands	r3, r2
 800cebc:	4a6e      	ldr	r2, [pc, #440]	; (800d078 <Draw_Digit_Analog+0x214>)
 800cebe:	6013      	str	r3, [r2, #0]
 800cec0:	4b6d      	ldr	r3, [pc, #436]	; (800d078 <Draw_Digit_Analog+0x214>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d104      	bne.n	800ced2 <Draw_Digit_Analog+0x6e>
 800cec8:	4b6d      	ldr	r3, [pc, #436]	; (800d080 <Draw_Digit_Analog+0x21c>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	4a6a      	ldr	r2, [pc, #424]	; (800d078 <Draw_Digit_Analog+0x214>)
 800cece:	6013      	str	r3, [r2, #0]
 800ced0:	e004      	b.n	800cedc <Draw_Digit_Analog+0x78>
 800ced2:	4b6b      	ldr	r3, [pc, #428]	; (800d080 <Draw_Digit_Analog+0x21c>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	331e      	adds	r3, #30
 800ced8:	4a67      	ldr	r2, [pc, #412]	; (800d078 <Draw_Digit_Analog+0x214>)
 800ceda:	6013      	str	r3, [r2, #0]
 800cedc:	4b67      	ldr	r3, [pc, #412]	; (800d07c <Draw_Digit_Analog+0x218>)
 800cede:	681a      	ldr	r2, [r3, #0]
 800cee0:	4b68      	ldr	r3, [pc, #416]	; (800d084 <Draw_Digit_Analog+0x220>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	4013      	ands	r3, r2
 800cee6:	4a65      	ldr	r2, [pc, #404]	; (800d07c <Draw_Digit_Analog+0x218>)
 800cee8:	6013      	str	r3, [r2, #0]
 800ceea:	4b64      	ldr	r3, [pc, #400]	; (800d07c <Draw_Digit_Analog+0x218>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d01c      	beq.n	800cf2c <Draw_Digit_Analog+0xc8>
 800cef2:	4b63      	ldr	r3, [pc, #396]	; (800d080 <Draw_Digit_Analog+0x21c>)
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	331e      	adds	r3, #30
 800cef8:	4a61      	ldr	r2, [pc, #388]	; (800d080 <Draw_Digit_Analog+0x21c>)
 800cefa:	6013      	str	r3, [r2, #0]
 800cefc:	e016      	b.n	800cf2c <Draw_Digit_Analog+0xc8>
 800cefe:	88fb      	ldrh	r3, [r7, #6]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	f040 80a5 	bne.w	800d050 <Draw_Digit_Analog+0x1ec>
 800cf06:	4b5e      	ldr	r3, [pc, #376]	; (800d080 <Draw_Digit_Analog+0x21c>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	3302      	adds	r3, #2
 800cf0c:	4a5c      	ldr	r2, [pc, #368]	; (800d080 <Draw_Digit_Analog+0x21c>)
 800cf0e:	6013      	str	r3, [r2, #0]
 800cf10:	4b5b      	ldr	r3, [pc, #364]	; (800d080 <Draw_Digit_Analog+0x21c>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	781b      	ldrb	r3, [r3, #0]
 800cf16:	461a      	mov	r2, r3
 800cf18:	4b57      	ldr	r3, [pc, #348]	; (800d078 <Draw_Digit_Analog+0x214>)
 800cf1a:	601a      	str	r2, [r3, #0]
 800cf1c:	4b58      	ldr	r3, [pc, #352]	; (800d080 <Draw_Digit_Analog+0x21c>)
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	3b01      	subs	r3, #1
 800cf22:	781b      	ldrb	r3, [r3, #0]
 800cf24:	461a      	mov	r2, r3
 800cf26:	4b56      	ldr	r3, [pc, #344]	; (800d080 <Draw_Digit_Analog+0x21c>)
 800cf28:	601a      	str	r2, [r3, #0]
 800cf2a:	e000      	b.n	800cf2e <Draw_Digit_Analog+0xca>
 800cf2c:	bf00      	nop
 800cf2e:	4b52      	ldr	r3, [pc, #328]	; (800d078 <Draw_Digit_Analog+0x214>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	2bff      	cmp	r3, #255	; 0xff
 800cf34:	f000 808e 	beq.w	800d054 <Draw_Digit_Analog+0x1f0>
 800cf38:	4b4f      	ldr	r3, [pc, #316]	; (800d078 <Draw_Digit_Analog+0x214>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	f000 808b 	beq.w	800d058 <Draw_Digit_Analog+0x1f4>
 800cf42:	4b4f      	ldr	r3, [pc, #316]	; (800d080 <Draw_Digit_Analog+0x21c>)
 800cf44:	681a      	ldr	r2, [r3, #0]
 800cf46:	4b4c      	ldr	r3, [pc, #304]	; (800d078 <Draw_Digit_Analog+0x214>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	429a      	cmp	r2, r3
 800cf4c:	d80b      	bhi.n	800cf66 <Draw_Digit_Analog+0x102>
 800cf4e:	4b4c      	ldr	r3, [pc, #304]	; (800d080 <Draw_Digit_Analog+0x21c>)
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	4a4a      	ldr	r2, [pc, #296]	; (800d07c <Draw_Digit_Analog+0x218>)
 800cf54:	6013      	str	r3, [r2, #0]
 800cf56:	4b48      	ldr	r3, [pc, #288]	; (800d078 <Draw_Digit_Analog+0x214>)
 800cf58:	681a      	ldr	r2, [r3, #0]
 800cf5a:	4b49      	ldr	r3, [pc, #292]	; (800d080 <Draw_Digit_Analog+0x21c>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	1ad3      	subs	r3, r2, r3
 800cf60:	4a45      	ldr	r2, [pc, #276]	; (800d078 <Draw_Digit_Analog+0x214>)
 800cf62:	6013      	str	r3, [r2, #0]
 800cf64:	e00a      	b.n	800cf7c <Draw_Digit_Analog+0x118>
 800cf66:	4b44      	ldr	r3, [pc, #272]	; (800d078 <Draw_Digit_Analog+0x214>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	4a44      	ldr	r2, [pc, #272]	; (800d07c <Draw_Digit_Analog+0x218>)
 800cf6c:	6013      	str	r3, [r2, #0]
 800cf6e:	4b44      	ldr	r3, [pc, #272]	; (800d080 <Draw_Digit_Analog+0x21c>)
 800cf70:	681a      	ldr	r2, [r3, #0]
 800cf72:	4b41      	ldr	r3, [pc, #260]	; (800d078 <Draw_Digit_Analog+0x214>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	1ad3      	subs	r3, r2, r3
 800cf78:	4a3f      	ldr	r2, [pc, #252]	; (800d078 <Draw_Digit_Analog+0x214>)
 800cf7a:	6013      	str	r3, [r2, #0]
 800cf7c:	4b3f      	ldr	r3, [pc, #252]	; (800d07c <Draw_Digit_Analog+0x218>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	2bc7      	cmp	r3, #199	; 0xc7
 800cf82:	d86b      	bhi.n	800d05c <Draw_Digit_Analog+0x1f8>
 800cf84:	4b3c      	ldr	r3, [pc, #240]	; (800d078 <Draw_Digit_Analog+0x214>)
 800cf86:	681a      	ldr	r2, [r3, #0]
 800cf88:	4b3c      	ldr	r3, [pc, #240]	; (800d07c <Draw_Digit_Analog+0x218>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	4413      	add	r3, r2
 800cf8e:	4a3c      	ldr	r2, [pc, #240]	; (800d080 <Draw_Digit_Analog+0x21c>)
 800cf90:	6013      	str	r3, [r2, #0]
 800cf92:	4b3b      	ldr	r3, [pc, #236]	; (800d080 <Draw_Digit_Analog+0x21c>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	2bc7      	cmp	r3, #199	; 0xc7
 800cf98:	d906      	bls.n	800cfa8 <Draw_Digit_Analog+0x144>
 800cf9a:	4b38      	ldr	r3, [pc, #224]	; (800d07c <Draw_Digit_Analog+0x218>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	f1c3 03c7 	rsb	r3, r3, #199	; 0xc7
 800cfa2:	4a35      	ldr	r2, [pc, #212]	; (800d078 <Draw_Digit_Analog+0x214>)
 800cfa4:	6013      	str	r3, [r2, #0]
 800cfa6:	e020      	b.n	800cfea <Draw_Digit_Analog+0x186>
 800cfa8:	4b35      	ldr	r3, [pc, #212]	; (800d080 <Draw_Digit_Analog+0x21c>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	2b02      	cmp	r3, #2
 800cfae:	d957      	bls.n	800d060 <Draw_Digit_Analog+0x1fc>
 800cfb0:	4b32      	ldr	r3, [pc, #200]	; (800d07c <Draw_Digit_Analog+0x218>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	2b02      	cmp	r3, #2
 800cfb6:	d808      	bhi.n	800cfca <Draw_Digit_Analog+0x166>
 800cfb8:	4b30      	ldr	r3, [pc, #192]	; (800d07c <Draw_Digit_Analog+0x218>)
 800cfba:	2203      	movs	r2, #3
 800cfbc:	601a      	str	r2, [r3, #0]
 800cfbe:	4b30      	ldr	r3, [pc, #192]	; (800d080 <Draw_Digit_Analog+0x21c>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	3b03      	subs	r3, #3
 800cfc4:	4a2c      	ldr	r2, [pc, #176]	; (800d078 <Draw_Digit_Analog+0x214>)
 800cfc6:	6013      	str	r3, [r2, #0]
 800cfc8:	e00f      	b.n	800cfea <Draw_Digit_Analog+0x186>
 800cfca:	4b2b      	ldr	r3, [pc, #172]	; (800d078 <Draw_Digit_Analog+0x214>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d10a      	bne.n	800cfe8 <Draw_Digit_Analog+0x184>
 800cfd2:	4b2a      	ldr	r3, [pc, #168]	; (800d07c <Draw_Digit_Analog+0x218>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	3b01      	subs	r3, #1
 800cfd8:	4a28      	ldr	r2, [pc, #160]	; (800d07c <Draw_Digit_Analog+0x218>)
 800cfda:	6013      	str	r3, [r2, #0]
 800cfdc:	4b26      	ldr	r3, [pc, #152]	; (800d078 <Draw_Digit_Analog+0x214>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	3302      	adds	r3, #2
 800cfe2:	4a25      	ldr	r2, [pc, #148]	; (800d078 <Draw_Digit_Analog+0x214>)
 800cfe4:	6013      	str	r3, [r2, #0]
 800cfe6:	e000      	b.n	800cfea <Draw_Digit_Analog+0x186>
 800cfe8:	bf00      	nop
 800cfea:	4b23      	ldr	r3, [pc, #140]	; (800d078 <Draw_Digit_Analog+0x214>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	2b13      	cmp	r3, #19
 800cff0:	d904      	bls.n	800cffc <Draw_Digit_Analog+0x198>
 800cff2:	4b25      	ldr	r3, [pc, #148]	; (800d088 <Draw_Digit_Analog+0x224>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	3314      	adds	r3, #20
 800cff8:	4a23      	ldr	r2, [pc, #140]	; (800d088 <Draw_Digit_Analog+0x224>)
 800cffa:	6013      	str	r3, [r2, #0]
 800cffc:	4b23      	ldr	r3, [pc, #140]	; (800d08c <Draw_Digit_Analog+0x228>)
 800cffe:	681a      	ldr	r2, [r3, #0]
 800d000:	4b21      	ldr	r3, [pc, #132]	; (800d088 <Draw_Digit_Analog+0x224>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	4413      	add	r3, r2
 800d006:	881b      	ldrh	r3, [r3, #0]
 800d008:	461a      	mov	r2, r3
 800d00a:	4b1f      	ldr	r3, [pc, #124]	; (800d088 <Draw_Digit_Analog+0x224>)
 800d00c:	601a      	str	r2, [r3, #0]
 800d00e:	4b1b      	ldr	r3, [pc, #108]	; (800d07c <Draw_Digit_Analog+0x218>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	005b      	lsls	r3, r3, #1
 800d014:	4a19      	ldr	r2, [pc, #100]	; (800d07c <Draw_Digit_Analog+0x218>)
 800d016:	6013      	str	r3, [r2, #0]
 800d018:	4b18      	ldr	r3, [pc, #96]	; (800d07c <Draw_Digit_Analog+0x218>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	085b      	lsrs	r3, r3, #1
 800d01e:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d022:	005b      	lsls	r3, r3, #1
 800d024:	4a1a      	ldr	r2, [pc, #104]	; (800d090 <Draw_Digit_Analog+0x22c>)
 800d026:	4413      	add	r3, r2
 800d028:	461a      	mov	r2, r3
 800d02a:	4b14      	ldr	r3, [pc, #80]	; (800d07c <Draw_Digit_Analog+0x218>)
 800d02c:	601a      	str	r2, [r3, #0]
 800d02e:	4b16      	ldr	r3, [pc, #88]	; (800d088 <Draw_Digit_Analog+0x224>)
 800d030:	681a      	ldr	r2, [r3, #0]
 800d032:	4b12      	ldr	r3, [pc, #72]	; (800d07c <Draw_Digit_Analog+0x218>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	b292      	uxth	r2, r2
 800d038:	801a      	strh	r2, [r3, #0]
 800d03a:	4b10      	ldr	r3, [pc, #64]	; (800d07c <Draw_Digit_Analog+0x218>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	3302      	adds	r3, #2
 800d040:	4a0e      	ldr	r2, [pc, #56]	; (800d07c <Draw_Digit_Analog+0x218>)
 800d042:	6013      	str	r3, [r2, #0]
 800d044:	4b0c      	ldr	r3, [pc, #48]	; (800d078 <Draw_Digit_Analog+0x214>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	3b01      	subs	r3, #1
 800d04a:	4a0b      	ldr	r2, [pc, #44]	; (800d078 <Draw_Digit_Analog+0x214>)
 800d04c:	6013      	str	r3, [r2, #0]
 800d04e:	e7ee      	b.n	800d02e <Draw_Digit_Analog+0x1ca>
 800d050:	bf00      	nop
 800d052:	e006      	b.n	800d062 <Draw_Digit_Analog+0x1fe>
 800d054:	bf00      	nop
 800d056:	e004      	b.n	800d062 <Draw_Digit_Analog+0x1fe>
 800d058:	bf00      	nop
 800d05a:	e002      	b.n	800d062 <Draw_Digit_Analog+0x1fe>
 800d05c:	bf00      	nop
 800d05e:	e000      	b.n	800d062 <Draw_Digit_Analog+0x1fe>
 800d060:	bf00      	nop
 800d062:	370c      	adds	r7, #12
 800d064:	46bd      	mov	sp, r7
 800d066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06a:	4770      	bx	lr
 800d06c:	20000a4c 	.word	0x20000a4c
 800d070:	20000c08 	.word	0x20000c08
 800d074:	20000c00 	.word	0x20000c00
 800d078:	20000a44 	.word	0x20000a44
 800d07c:	20000bf0 	.word	0x20000bf0
 800d080:	20000bf4 	.word	0x20000bf4
 800d084:	20000a40 	.word	0x20000a40
 800d088:	20000a48 	.word	0x20000a48
 800d08c:	20000bf8 	.word	0x20000bf8
 800d090:	20000a50 	.word	0x20000a50

0800d094 <Cursor_0>:
 800d094:	b480      	push	{r7}
 800d096:	b083      	sub	sp, #12
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
 800d09c:	4b3c      	ldr	r3, [pc, #240]	; (800d190 <Cursor_0+0xfc>)
 800d09e:	2206      	movs	r2, #6
 800d0a0:	601a      	str	r2, [r3, #0]
 800d0a2:	4b3c      	ldr	r3, [pc, #240]	; (800d194 <Cursor_0+0x100>)
 800d0a4:	4a3c      	ldr	r2, [pc, #240]	; (800d198 <Cursor_0+0x104>)
 800d0a6:	601a      	str	r2, [r3, #0]
 800d0a8:	4b39      	ldr	r3, [pc, #228]	; (800d190 <Cursor_0+0xfc>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	005b      	lsls	r3, r3, #1
 800d0ae:	687a      	ldr	r2, [r7, #4]
 800d0b0:	4413      	add	r3, r2
 800d0b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d0b6:	461a      	mov	r2, r3
 800d0b8:	4b38      	ldr	r3, [pc, #224]	; (800d19c <Cursor_0+0x108>)
 800d0ba:	601a      	str	r2, [r3, #0]
 800d0bc:	4b37      	ldr	r3, [pc, #220]	; (800d19c <Cursor_0+0x108>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	f003 0301 	and.w	r3, r3, #1
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d15c      	bne.n	800d182 <Cursor_0+0xee>
 800d0c8:	4b31      	ldr	r3, [pc, #196]	; (800d190 <Cursor_0+0xfc>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	330a      	adds	r3, #10
 800d0ce:	005b      	lsls	r3, r3, #1
 800d0d0:	687a      	ldr	r2, [r7, #4]
 800d0d2:	4413      	add	r3, r2
 800d0d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d0d8:	461a      	mov	r2, r3
 800d0da:	4b30      	ldr	r3, [pc, #192]	; (800d19c <Cursor_0+0x108>)
 800d0dc:	601a      	str	r2, [r3, #0]
 800d0de:	4b2f      	ldr	r3, [pc, #188]	; (800d19c <Cursor_0+0x108>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	085b      	lsrs	r3, r3, #1
 800d0e4:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d0e8:	005b      	lsls	r3, r3, #1
 800d0ea:	4a2d      	ldr	r2, [pc, #180]	; (800d1a0 <Cursor_0+0x10c>)
 800d0ec:	4413      	add	r3, r2
 800d0ee:	4a29      	ldr	r2, [pc, #164]	; (800d194 <Cursor_0+0x100>)
 800d0f0:	6013      	str	r3, [r2, #0]
 800d0f2:	4b27      	ldr	r3, [pc, #156]	; (800d190 <Cursor_0+0xfc>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	3314      	adds	r3, #20
 800d0f8:	005b      	lsls	r3, r3, #1
 800d0fa:	687a      	ldr	r2, [r7, #4]
 800d0fc:	4413      	add	r3, r2
 800d0fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d102:	461a      	mov	r2, r3
 800d104:	4b27      	ldr	r3, [pc, #156]	; (800d1a4 <Cursor_0+0x110>)
 800d106:	601a      	str	r2, [r3, #0]
 800d108:	4b22      	ldr	r3, [pc, #136]	; (800d194 <Cursor_0+0x100>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	3b04      	subs	r3, #4
 800d10e:	4a21      	ldr	r2, [pc, #132]	; (800d194 <Cursor_0+0x100>)
 800d110:	6013      	str	r3, [r2, #0]
 800d112:	4b24      	ldr	r3, [pc, #144]	; (800d1a4 <Cursor_0+0x110>)
 800d114:	681a      	ldr	r2, [r3, #0]
 800d116:	4b1f      	ldr	r3, [pc, #124]	; (800d194 <Cursor_0+0x100>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	b292      	uxth	r2, r2
 800d11c:	801a      	strh	r2, [r3, #0]
 800d11e:	4b1d      	ldr	r3, [pc, #116]	; (800d194 <Cursor_0+0x100>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	3302      	adds	r3, #2
 800d124:	4a1b      	ldr	r2, [pc, #108]	; (800d194 <Cursor_0+0x100>)
 800d126:	6013      	str	r3, [r2, #0]
 800d128:	4b1e      	ldr	r3, [pc, #120]	; (800d1a4 <Cursor_0+0x110>)
 800d12a:	681a      	ldr	r2, [r3, #0]
 800d12c:	4b19      	ldr	r3, [pc, #100]	; (800d194 <Cursor_0+0x100>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	b292      	uxth	r2, r2
 800d132:	801a      	strh	r2, [r3, #0]
 800d134:	4b17      	ldr	r3, [pc, #92]	; (800d194 <Cursor_0+0x100>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	3302      	adds	r3, #2
 800d13a:	4a16      	ldr	r2, [pc, #88]	; (800d194 <Cursor_0+0x100>)
 800d13c:	6013      	str	r3, [r2, #0]
 800d13e:	4b19      	ldr	r3, [pc, #100]	; (800d1a4 <Cursor_0+0x110>)
 800d140:	681a      	ldr	r2, [r3, #0]
 800d142:	4b14      	ldr	r3, [pc, #80]	; (800d194 <Cursor_0+0x100>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	b292      	uxth	r2, r2
 800d148:	801a      	strh	r2, [r3, #0]
 800d14a:	4b12      	ldr	r3, [pc, #72]	; (800d194 <Cursor_0+0x100>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	3302      	adds	r3, #2
 800d150:	4a10      	ldr	r2, [pc, #64]	; (800d194 <Cursor_0+0x100>)
 800d152:	6013      	str	r3, [r2, #0]
 800d154:	4b13      	ldr	r3, [pc, #76]	; (800d1a4 <Cursor_0+0x110>)
 800d156:	681a      	ldr	r2, [r3, #0]
 800d158:	4b0e      	ldr	r3, [pc, #56]	; (800d194 <Cursor_0+0x100>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	b292      	uxth	r2, r2
 800d15e:	801a      	strh	r2, [r3, #0]
 800d160:	4b0c      	ldr	r3, [pc, #48]	; (800d194 <Cursor_0+0x100>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	3302      	adds	r3, #2
 800d166:	4a0b      	ldr	r2, [pc, #44]	; (800d194 <Cursor_0+0x100>)
 800d168:	6013      	str	r3, [r2, #0]
 800d16a:	4b0e      	ldr	r3, [pc, #56]	; (800d1a4 <Cursor_0+0x110>)
 800d16c:	681a      	ldr	r2, [r3, #0]
 800d16e:	4b09      	ldr	r3, [pc, #36]	; (800d194 <Cursor_0+0x100>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	b292      	uxth	r2, r2
 800d174:	801a      	strh	r2, [r3, #0]
 800d176:	4b07      	ldr	r3, [pc, #28]	; (800d194 <Cursor_0+0x100>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	3302      	adds	r3, #2
 800d17c:	4a05      	ldr	r2, [pc, #20]	; (800d194 <Cursor_0+0x100>)
 800d17e:	6013      	str	r3, [r2, #0]
 800d180:	e000      	b.n	800d184 <Cursor_0+0xf0>
 800d182:	bf00      	nop
 800d184:	4b02      	ldr	r3, [pc, #8]	; (800d190 <Cursor_0+0xfc>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	3b01      	subs	r3, #1
 800d18a:	4a01      	ldr	r2, [pc, #4]	; (800d190 <Cursor_0+0xfc>)
 800d18c:	6013      	str	r3, [r2, #0]
 800d18e:	e78b      	b.n	800d0a8 <Cursor_0+0x14>
 800d190:	20000a48 	.word	0x20000a48
 800d194:	20000bf4 	.word	0x20000bf4
 800d198:	20000be8 	.word	0x20000be8
 800d19c:	20000a44 	.word	0x20000a44
 800d1a0:	20000a50 	.word	0x20000a50
 800d1a4:	20000bf0 	.word	0x20000bf0

0800d1a8 <Cursor_1>:
 800d1a8:	b480      	push	{r7}
 800d1aa:	b083      	sub	sp, #12
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
 800d1b0:	4b31      	ldr	r3, [pc, #196]	; (800d278 <Cursor_1+0xd0>)
 800d1b2:	2206      	movs	r2, #6
 800d1b4:	601a      	str	r2, [r3, #0]
 800d1b6:	4b31      	ldr	r3, [pc, #196]	; (800d27c <Cursor_1+0xd4>)
 800d1b8:	4a31      	ldr	r2, [pc, #196]	; (800d280 <Cursor_1+0xd8>)
 800d1ba:	601a      	str	r2, [r3, #0]
 800d1bc:	4b2e      	ldr	r3, [pc, #184]	; (800d278 <Cursor_1+0xd0>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	005b      	lsls	r3, r3, #1
 800d1c2:	687a      	ldr	r2, [r7, #4]
 800d1c4:	4413      	add	r3, r2
 800d1c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d1ca:	461a      	mov	r2, r3
 800d1cc:	4b2d      	ldr	r3, [pc, #180]	; (800d284 <Cursor_1+0xdc>)
 800d1ce:	601a      	str	r2, [r3, #0]
 800d1d0:	4b2c      	ldr	r3, [pc, #176]	; (800d284 <Cursor_1+0xdc>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	f003 0301 	and.w	r3, r3, #1
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d146      	bne.n	800d26a <Cursor_1+0xc2>
 800d1dc:	4b26      	ldr	r3, [pc, #152]	; (800d278 <Cursor_1+0xd0>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	330a      	adds	r3, #10
 800d1e2:	005b      	lsls	r3, r3, #1
 800d1e4:	687a      	ldr	r2, [r7, #4]
 800d1e6:	4413      	add	r3, r2
 800d1e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d1ec:	461a      	mov	r2, r3
 800d1ee:	4b25      	ldr	r3, [pc, #148]	; (800d284 <Cursor_1+0xdc>)
 800d1f0:	601a      	str	r2, [r3, #0]
 800d1f2:	4b24      	ldr	r3, [pc, #144]	; (800d284 <Cursor_1+0xdc>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	085b      	lsrs	r3, r3, #1
 800d1f8:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d1fc:	005b      	lsls	r3, r3, #1
 800d1fe:	4a22      	ldr	r2, [pc, #136]	; (800d288 <Cursor_1+0xe0>)
 800d200:	4413      	add	r3, r2
 800d202:	4a1e      	ldr	r2, [pc, #120]	; (800d27c <Cursor_1+0xd4>)
 800d204:	6013      	str	r3, [r2, #0]
 800d206:	4b1c      	ldr	r3, [pc, #112]	; (800d278 <Cursor_1+0xd0>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	3314      	adds	r3, #20
 800d20c:	005b      	lsls	r3, r3, #1
 800d20e:	687a      	ldr	r2, [r7, #4]
 800d210:	4413      	add	r3, r2
 800d212:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d216:	461a      	mov	r2, r3
 800d218:	4b1c      	ldr	r3, [pc, #112]	; (800d28c <Cursor_1+0xe4>)
 800d21a:	601a      	str	r2, [r3, #0]
 800d21c:	4b17      	ldr	r3, [pc, #92]	; (800d27c <Cursor_1+0xd4>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	3b02      	subs	r3, #2
 800d222:	4a16      	ldr	r2, [pc, #88]	; (800d27c <Cursor_1+0xd4>)
 800d224:	6013      	str	r3, [r2, #0]
 800d226:	4b19      	ldr	r3, [pc, #100]	; (800d28c <Cursor_1+0xe4>)
 800d228:	681a      	ldr	r2, [r3, #0]
 800d22a:	4b14      	ldr	r3, [pc, #80]	; (800d27c <Cursor_1+0xd4>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	b292      	uxth	r2, r2
 800d230:	801a      	strh	r2, [r3, #0]
 800d232:	4b12      	ldr	r3, [pc, #72]	; (800d27c <Cursor_1+0xd4>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	3302      	adds	r3, #2
 800d238:	4a10      	ldr	r2, [pc, #64]	; (800d27c <Cursor_1+0xd4>)
 800d23a:	6013      	str	r3, [r2, #0]
 800d23c:	4b13      	ldr	r3, [pc, #76]	; (800d28c <Cursor_1+0xe4>)
 800d23e:	681a      	ldr	r2, [r3, #0]
 800d240:	4b0e      	ldr	r3, [pc, #56]	; (800d27c <Cursor_1+0xd4>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	b292      	uxth	r2, r2
 800d246:	801a      	strh	r2, [r3, #0]
 800d248:	4b0c      	ldr	r3, [pc, #48]	; (800d27c <Cursor_1+0xd4>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	3302      	adds	r3, #2
 800d24e:	4a0b      	ldr	r2, [pc, #44]	; (800d27c <Cursor_1+0xd4>)
 800d250:	6013      	str	r3, [r2, #0]
 800d252:	4b0e      	ldr	r3, [pc, #56]	; (800d28c <Cursor_1+0xe4>)
 800d254:	681a      	ldr	r2, [r3, #0]
 800d256:	4b09      	ldr	r3, [pc, #36]	; (800d27c <Cursor_1+0xd4>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	b292      	uxth	r2, r2
 800d25c:	801a      	strh	r2, [r3, #0]
 800d25e:	4b07      	ldr	r3, [pc, #28]	; (800d27c <Cursor_1+0xd4>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	3302      	adds	r3, #2
 800d264:	4a05      	ldr	r2, [pc, #20]	; (800d27c <Cursor_1+0xd4>)
 800d266:	6013      	str	r3, [r2, #0]
 800d268:	e000      	b.n	800d26c <Cursor_1+0xc4>
 800d26a:	bf00      	nop
 800d26c:	4b02      	ldr	r3, [pc, #8]	; (800d278 <Cursor_1+0xd0>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	3b01      	subs	r3, #1
 800d272:	4a01      	ldr	r2, [pc, #4]	; (800d278 <Cursor_1+0xd0>)
 800d274:	6013      	str	r3, [r2, #0]
 800d276:	e7a1      	b.n	800d1bc <Cursor_1+0x14>
 800d278:	20000a48 	.word	0x20000a48
 800d27c:	20000bf4 	.word	0x20000bf4
 800d280:	20000be8 	.word	0x20000be8
 800d284:	20000a44 	.word	0x20000a44
 800d288:	20000a50 	.word	0x20000a50
 800d28c:	20000bf0 	.word	0x20000bf0

0800d290 <Cursor_2>:
 800d290:	b480      	push	{r7}
 800d292:	b083      	sub	sp, #12
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	4b21      	ldr	r3, [pc, #132]	; (800d320 <Cursor_2+0x90>)
 800d29a:	2206      	movs	r2, #6
 800d29c:	601a      	str	r2, [r3, #0]
 800d29e:	4b21      	ldr	r3, [pc, #132]	; (800d324 <Cursor_2+0x94>)
 800d2a0:	4a21      	ldr	r2, [pc, #132]	; (800d328 <Cursor_2+0x98>)
 800d2a2:	601a      	str	r2, [r3, #0]
 800d2a4:	4b1e      	ldr	r3, [pc, #120]	; (800d320 <Cursor_2+0x90>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	005b      	lsls	r3, r3, #1
 800d2aa:	687a      	ldr	r2, [r7, #4]
 800d2ac:	4413      	add	r3, r2
 800d2ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d2b2:	461a      	mov	r2, r3
 800d2b4:	4b1d      	ldr	r3, [pc, #116]	; (800d32c <Cursor_2+0x9c>)
 800d2b6:	601a      	str	r2, [r3, #0]
 800d2b8:	4b1c      	ldr	r3, [pc, #112]	; (800d32c <Cursor_2+0x9c>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	f003 0301 	and.w	r3, r3, #1
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d126      	bne.n	800d312 <Cursor_2+0x82>
 800d2c4:	4b16      	ldr	r3, [pc, #88]	; (800d320 <Cursor_2+0x90>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	330a      	adds	r3, #10
 800d2ca:	005b      	lsls	r3, r3, #1
 800d2cc:	687a      	ldr	r2, [r7, #4]
 800d2ce:	4413      	add	r3, r2
 800d2d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d2d4:	461a      	mov	r2, r3
 800d2d6:	4b15      	ldr	r3, [pc, #84]	; (800d32c <Cursor_2+0x9c>)
 800d2d8:	601a      	str	r2, [r3, #0]
 800d2da:	4b14      	ldr	r3, [pc, #80]	; (800d32c <Cursor_2+0x9c>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	085b      	lsrs	r3, r3, #1
 800d2e0:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d2e4:	005b      	lsls	r3, r3, #1
 800d2e6:	4a12      	ldr	r2, [pc, #72]	; (800d330 <Cursor_2+0xa0>)
 800d2e8:	4413      	add	r3, r2
 800d2ea:	4a0e      	ldr	r2, [pc, #56]	; (800d324 <Cursor_2+0x94>)
 800d2ec:	6013      	str	r3, [r2, #0]
 800d2ee:	4b0c      	ldr	r3, [pc, #48]	; (800d320 <Cursor_2+0x90>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	3314      	adds	r3, #20
 800d2f4:	005b      	lsls	r3, r3, #1
 800d2f6:	687a      	ldr	r2, [r7, #4]
 800d2f8:	4413      	add	r3, r2
 800d2fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d2fe:	461a      	mov	r2, r3
 800d300:	4b0c      	ldr	r3, [pc, #48]	; (800d334 <Cursor_2+0xa4>)
 800d302:	601a      	str	r2, [r3, #0]
 800d304:	4b0b      	ldr	r3, [pc, #44]	; (800d334 <Cursor_2+0xa4>)
 800d306:	681a      	ldr	r2, [r3, #0]
 800d308:	4b06      	ldr	r3, [pc, #24]	; (800d324 <Cursor_2+0x94>)
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	b292      	uxth	r2, r2
 800d30e:	801a      	strh	r2, [r3, #0]
 800d310:	e000      	b.n	800d314 <Cursor_2+0x84>
 800d312:	bf00      	nop
 800d314:	4b02      	ldr	r3, [pc, #8]	; (800d320 <Cursor_2+0x90>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	3b01      	subs	r3, #1
 800d31a:	4a01      	ldr	r2, [pc, #4]	; (800d320 <Cursor_2+0x90>)
 800d31c:	6013      	str	r3, [r2, #0]
 800d31e:	e7c1      	b.n	800d2a4 <Cursor_2+0x14>
 800d320:	20000a48 	.word	0x20000a48
 800d324:	20000bf4 	.word	0x20000bf4
 800d328:	20000be8 	.word	0x20000be8
 800d32c:	20000a44 	.word	0x20000a44
 800d330:	20000a50 	.word	0x20000a50
 800d334:	20000bf0 	.word	0x20000bf0

0800d338 <Cursor_3>:
 800d338:	b480      	push	{r7}
 800d33a:	b083      	sub	sp, #12
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
 800d340:	4b2a      	ldr	r3, [pc, #168]	; (800d3ec <Cursor_3+0xb4>)
 800d342:	2206      	movs	r2, #6
 800d344:	601a      	str	r2, [r3, #0]
 800d346:	4b2a      	ldr	r3, [pc, #168]	; (800d3f0 <Cursor_3+0xb8>)
 800d348:	4a2a      	ldr	r2, [pc, #168]	; (800d3f4 <Cursor_3+0xbc>)
 800d34a:	601a      	str	r2, [r3, #0]
 800d34c:	4b27      	ldr	r3, [pc, #156]	; (800d3ec <Cursor_3+0xb4>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	005b      	lsls	r3, r3, #1
 800d352:	687a      	ldr	r2, [r7, #4]
 800d354:	4413      	add	r3, r2
 800d356:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d35a:	461a      	mov	r2, r3
 800d35c:	4b26      	ldr	r3, [pc, #152]	; (800d3f8 <Cursor_3+0xc0>)
 800d35e:	601a      	str	r2, [r3, #0]
 800d360:	4b25      	ldr	r3, [pc, #148]	; (800d3f8 <Cursor_3+0xc0>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	f003 0302 	and.w	r3, r3, #2
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d135      	bne.n	800d3d8 <Cursor_3+0xa0>
 800d36c:	4b23      	ldr	r3, [pc, #140]	; (800d3fc <Cursor_3+0xc4>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	3b01      	subs	r3, #1
 800d372:	4a21      	ldr	r2, [pc, #132]	; (800d3f8 <Cursor_3+0xc0>)
 800d374:	6013      	str	r3, [r2, #0]
 800d376:	4b20      	ldr	r3, [pc, #128]	; (800d3f8 <Cursor_3+0xc0>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	f003 0303 	and.w	r3, r3, #3
 800d37e:	4a1e      	ldr	r2, [pc, #120]	; (800d3f8 <Cursor_3+0xc0>)
 800d380:	6013      	str	r3, [r2, #0]
 800d382:	4b1d      	ldr	r3, [pc, #116]	; (800d3f8 <Cursor_3+0xc0>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d128      	bne.n	800d3dc <Cursor_3+0xa4>
 800d38a:	4b18      	ldr	r3, [pc, #96]	; (800d3ec <Cursor_3+0xb4>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	330a      	adds	r3, #10
 800d390:	005b      	lsls	r3, r3, #1
 800d392:	687a      	ldr	r2, [r7, #4]
 800d394:	4413      	add	r3, r2
 800d396:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d39a:	461a      	mov	r2, r3
 800d39c:	4b16      	ldr	r3, [pc, #88]	; (800d3f8 <Cursor_3+0xc0>)
 800d39e:	601a      	str	r2, [r3, #0]
 800d3a0:	4b15      	ldr	r3, [pc, #84]	; (800d3f8 <Cursor_3+0xc0>)
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	085b      	lsrs	r3, r3, #1
 800d3a6:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d3aa:	005b      	lsls	r3, r3, #1
 800d3ac:	4a14      	ldr	r2, [pc, #80]	; (800d400 <Cursor_3+0xc8>)
 800d3ae:	4413      	add	r3, r2
 800d3b0:	4a0f      	ldr	r2, [pc, #60]	; (800d3f0 <Cursor_3+0xb8>)
 800d3b2:	6013      	str	r3, [r2, #0]
 800d3b4:	4b0d      	ldr	r3, [pc, #52]	; (800d3ec <Cursor_3+0xb4>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	3314      	adds	r3, #20
 800d3ba:	005b      	lsls	r3, r3, #1
 800d3bc:	687a      	ldr	r2, [r7, #4]
 800d3be:	4413      	add	r3, r2
 800d3c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d3c4:	461a      	mov	r2, r3
 800d3c6:	4b0f      	ldr	r3, [pc, #60]	; (800d404 <Cursor_3+0xcc>)
 800d3c8:	601a      	str	r2, [r3, #0]
 800d3ca:	4b0e      	ldr	r3, [pc, #56]	; (800d404 <Cursor_3+0xcc>)
 800d3cc:	681a      	ldr	r2, [r3, #0]
 800d3ce:	4b08      	ldr	r3, [pc, #32]	; (800d3f0 <Cursor_3+0xb8>)
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	b292      	uxth	r2, r2
 800d3d4:	801a      	strh	r2, [r3, #0]
 800d3d6:	e002      	b.n	800d3de <Cursor_3+0xa6>
 800d3d8:	bf00      	nop
 800d3da:	e000      	b.n	800d3de <Cursor_3+0xa6>
 800d3dc:	bf00      	nop
 800d3de:	4b03      	ldr	r3, [pc, #12]	; (800d3ec <Cursor_3+0xb4>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	3b01      	subs	r3, #1
 800d3e4:	4a01      	ldr	r2, [pc, #4]	; (800d3ec <Cursor_3+0xb4>)
 800d3e6:	6013      	str	r3, [r2, #0]
 800d3e8:	e7b0      	b.n	800d34c <Cursor_3+0x14>
 800d3ea:	bf00      	nop
 800d3ec:	20000a48 	.word	0x20000a48
 800d3f0:	20000bf4 	.word	0x20000bf4
 800d3f4:	20000be8 	.word	0x20000be8
 800d3f8:	20000a44 	.word	0x20000a44
 800d3fc:	20000c00 	.word	0x20000c00
 800d400:	20000a50 	.word	0x20000a50
 800d404:	20000bf0 	.word	0x20000bf0

0800d408 <Cursor_4>:
 800d408:	b480      	push	{r7}
 800d40a:	b083      	sub	sp, #12
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
 800d410:	4b7a      	ldr	r3, [pc, #488]	; (800d5fc <Cursor_4+0x1f4>)
 800d412:	2207      	movs	r2, #7
 800d414:	601a      	str	r2, [r3, #0]
 800d416:	4b7a      	ldr	r3, [pc, #488]	; (800d600 <Cursor_4+0x1f8>)
 800d418:	4a7a      	ldr	r2, [pc, #488]	; (800d604 <Cursor_4+0x1fc>)
 800d41a:	601a      	str	r2, [r3, #0]
 800d41c:	4b77      	ldr	r3, [pc, #476]	; (800d5fc <Cursor_4+0x1f4>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	005b      	lsls	r3, r3, #1
 800d422:	687a      	ldr	r2, [r7, #4]
 800d424:	4413      	add	r3, r2
 800d426:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d42a:	461a      	mov	r2, r3
 800d42c:	4b76      	ldr	r3, [pc, #472]	; (800d608 <Cursor_4+0x200>)
 800d42e:	601a      	str	r2, [r3, #0]
 800d430:	4b75      	ldr	r3, [pc, #468]	; (800d608 <Cursor_4+0x200>)
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	f003 0301 	and.w	r3, r3, #1
 800d438:	2b00      	cmp	r3, #0
 800d43a:	f040 8145 	bne.w	800d6c8 <Cursor_4+0x2c0>
 800d43e:	bf00      	nop
 800d440:	4b6e      	ldr	r3, [pc, #440]	; (800d5fc <Cursor_4+0x1f4>)
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	330a      	adds	r3, #10
 800d446:	005b      	lsls	r3, r3, #1
 800d448:	687a      	ldr	r2, [r7, #4]
 800d44a:	4413      	add	r3, r2
 800d44c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d450:	461a      	mov	r2, r3
 800d452:	4b6d      	ldr	r3, [pc, #436]	; (800d608 <Cursor_4+0x200>)
 800d454:	601a      	str	r2, [r3, #0]
 800d456:	4b69      	ldr	r3, [pc, #420]	; (800d5fc <Cursor_4+0x1f4>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	3314      	adds	r3, #20
 800d45c:	005b      	lsls	r3, r3, #1
 800d45e:	687a      	ldr	r2, [r7, #4]
 800d460:	4413      	add	r3, r2
 800d462:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d466:	461a      	mov	r2, r3
 800d468:	4b68      	ldr	r3, [pc, #416]	; (800d60c <Cursor_4+0x204>)
 800d46a:	601a      	str	r2, [r3, #0]
 800d46c:	4b66      	ldr	r3, [pc, #408]	; (800d608 <Cursor_4+0x200>)
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	3b02      	subs	r3, #2
 800d472:	4a67      	ldr	r2, [pc, #412]	; (800d610 <Cursor_4+0x208>)
 800d474:	6013      	str	r3, [r2, #0]
 800d476:	4b64      	ldr	r3, [pc, #400]	; (800d608 <Cursor_4+0x200>)
 800d478:	681a      	ldr	r2, [r3, #0]
 800d47a:	4b65      	ldr	r3, [pc, #404]	; (800d610 <Cursor_4+0x208>)
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	429a      	cmp	r2, r3
 800d480:	d112      	bne.n	800d4a8 <Cursor_4+0xa0>
 800d482:	4b62      	ldr	r3, [pc, #392]	; (800d60c <Cursor_4+0x204>)
 800d484:	681a      	ldr	r2, [r3, #0]
 800d486:	4b5e      	ldr	r3, [pc, #376]	; (800d600 <Cursor_4+0x1f8>)
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	b292      	uxth	r2, r2
 800d48c:	801a      	strh	r2, [r3, #0]
 800d48e:	4b5c      	ldr	r3, [pc, #368]	; (800d600 <Cursor_4+0x1f8>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800d496:	4a5a      	ldr	r2, [pc, #360]	; (800d600 <Cursor_4+0x1f8>)
 800d498:	6013      	str	r3, [r2, #0]
 800d49a:	4b5c      	ldr	r3, [pc, #368]	; (800d60c <Cursor_4+0x204>)
 800d49c:	681a      	ldr	r2, [r3, #0]
 800d49e:	4b58      	ldr	r3, [pc, #352]	; (800d600 <Cursor_4+0x1f8>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	b292      	uxth	r2, r2
 800d4a4:	801a      	strh	r2, [r3, #0]
 800d4a6:	e114      	b.n	800d6d2 <Cursor_4+0x2ca>
 800d4a8:	bf00      	nop
 800d4aa:	4b59      	ldr	r3, [pc, #356]	; (800d610 <Cursor_4+0x208>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	3301      	adds	r3, #1
 800d4b0:	4a57      	ldr	r2, [pc, #348]	; (800d610 <Cursor_4+0x208>)
 800d4b2:	6013      	str	r3, [r2, #0]
 800d4b4:	4b57      	ldr	r3, [pc, #348]	; (800d614 <Cursor_4+0x20c>)
 800d4b6:	681a      	ldr	r2, [r3, #0]
 800d4b8:	4b55      	ldr	r3, [pc, #340]	; (800d610 <Cursor_4+0x208>)
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d128      	bne.n	800d512 <Cursor_4+0x10a>
 800d4c0:	4b52      	ldr	r3, [pc, #328]	; (800d60c <Cursor_4+0x204>)
 800d4c2:	681a      	ldr	r2, [r3, #0]
 800d4c4:	4b4e      	ldr	r3, [pc, #312]	; (800d600 <Cursor_4+0x1f8>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	b292      	uxth	r2, r2
 800d4ca:	801a      	strh	r2, [r3, #0]
 800d4cc:	4b4c      	ldr	r3, [pc, #304]	; (800d600 <Cursor_4+0x1f8>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	3302      	adds	r3, #2
 800d4d2:	4a4b      	ldr	r2, [pc, #300]	; (800d600 <Cursor_4+0x1f8>)
 800d4d4:	6013      	str	r3, [r2, #0]
 800d4d6:	4b4d      	ldr	r3, [pc, #308]	; (800d60c <Cursor_4+0x204>)
 800d4d8:	681a      	ldr	r2, [r3, #0]
 800d4da:	4b49      	ldr	r3, [pc, #292]	; (800d600 <Cursor_4+0x1f8>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	b292      	uxth	r2, r2
 800d4e0:	801a      	strh	r2, [r3, #0]
 800d4e2:	4b47      	ldr	r3, [pc, #284]	; (800d600 <Cursor_4+0x1f8>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d4ea:	4a45      	ldr	r2, [pc, #276]	; (800d600 <Cursor_4+0x1f8>)
 800d4ec:	6013      	str	r3, [r2, #0]
 800d4ee:	4b47      	ldr	r3, [pc, #284]	; (800d60c <Cursor_4+0x204>)
 800d4f0:	681a      	ldr	r2, [r3, #0]
 800d4f2:	4b43      	ldr	r3, [pc, #268]	; (800d600 <Cursor_4+0x1f8>)
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	b292      	uxth	r2, r2
 800d4f8:	801a      	strh	r2, [r3, #0]
 800d4fa:	4b41      	ldr	r3, [pc, #260]	; (800d600 <Cursor_4+0x1f8>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	3302      	adds	r3, #2
 800d500:	4a3f      	ldr	r2, [pc, #252]	; (800d600 <Cursor_4+0x1f8>)
 800d502:	6013      	str	r3, [r2, #0]
 800d504:	4b41      	ldr	r3, [pc, #260]	; (800d60c <Cursor_4+0x204>)
 800d506:	681a      	ldr	r2, [r3, #0]
 800d508:	4b3d      	ldr	r3, [pc, #244]	; (800d600 <Cursor_4+0x1f8>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	b292      	uxth	r2, r2
 800d50e:	801a      	strh	r2, [r3, #0]
 800d510:	e0df      	b.n	800d6d2 <Cursor_4+0x2ca>
 800d512:	bf00      	nop
 800d514:	4b3e      	ldr	r3, [pc, #248]	; (800d610 <Cursor_4+0x208>)
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	3301      	adds	r3, #1
 800d51a:	4a3d      	ldr	r2, [pc, #244]	; (800d610 <Cursor_4+0x208>)
 800d51c:	6013      	str	r3, [r2, #0]
 800d51e:	4b3d      	ldr	r3, [pc, #244]	; (800d614 <Cursor_4+0x20c>)
 800d520:	681a      	ldr	r2, [r3, #0]
 800d522:	4b3b      	ldr	r3, [pc, #236]	; (800d610 <Cursor_4+0x208>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	429a      	cmp	r2, r3
 800d528:	d166      	bne.n	800d5f8 <Cursor_4+0x1f0>
 800d52a:	4b38      	ldr	r3, [pc, #224]	; (800d60c <Cursor_4+0x204>)
 800d52c:	681a      	ldr	r2, [r3, #0]
 800d52e:	4b34      	ldr	r3, [pc, #208]	; (800d600 <Cursor_4+0x1f8>)
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	b292      	uxth	r2, r2
 800d534:	801a      	strh	r2, [r3, #0]
 800d536:	4b32      	ldr	r3, [pc, #200]	; (800d600 <Cursor_4+0x1f8>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	3302      	adds	r3, #2
 800d53c:	4a30      	ldr	r2, [pc, #192]	; (800d600 <Cursor_4+0x1f8>)
 800d53e:	6013      	str	r3, [r2, #0]
 800d540:	4b32      	ldr	r3, [pc, #200]	; (800d60c <Cursor_4+0x204>)
 800d542:	681a      	ldr	r2, [r3, #0]
 800d544:	4b2e      	ldr	r3, [pc, #184]	; (800d600 <Cursor_4+0x1f8>)
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	b292      	uxth	r2, r2
 800d54a:	801a      	strh	r2, [r3, #0]
 800d54c:	4b2c      	ldr	r3, [pc, #176]	; (800d600 <Cursor_4+0x1f8>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	3302      	adds	r3, #2
 800d552:	4a2b      	ldr	r2, [pc, #172]	; (800d600 <Cursor_4+0x1f8>)
 800d554:	6013      	str	r3, [r2, #0]
 800d556:	4b2d      	ldr	r3, [pc, #180]	; (800d60c <Cursor_4+0x204>)
 800d558:	681a      	ldr	r2, [r3, #0]
 800d55a:	4b29      	ldr	r3, [pc, #164]	; (800d600 <Cursor_4+0x1f8>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	b292      	uxth	r2, r2
 800d560:	801a      	strh	r2, [r3, #0]
 800d562:	4b27      	ldr	r3, [pc, #156]	; (800d600 <Cursor_4+0x1f8>)
 800d564:	4a2c      	ldr	r2, [pc, #176]	; (800d618 <Cursor_4+0x210>)
 800d566:	601a      	str	r2, [r3, #0]
 800d568:	4b28      	ldr	r3, [pc, #160]	; (800d60c <Cursor_4+0x204>)
 800d56a:	681a      	ldr	r2, [r3, #0]
 800d56c:	4b24      	ldr	r3, [pc, #144]	; (800d600 <Cursor_4+0x1f8>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	b292      	uxth	r2, r2
 800d572:	801a      	strh	r2, [r3, #0]
 800d574:	4b22      	ldr	r3, [pc, #136]	; (800d600 <Cursor_4+0x1f8>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	3302      	adds	r3, #2
 800d57a:	4a21      	ldr	r2, [pc, #132]	; (800d600 <Cursor_4+0x1f8>)
 800d57c:	6013      	str	r3, [r2, #0]
 800d57e:	4b23      	ldr	r3, [pc, #140]	; (800d60c <Cursor_4+0x204>)
 800d580:	681a      	ldr	r2, [r3, #0]
 800d582:	4b1f      	ldr	r3, [pc, #124]	; (800d600 <Cursor_4+0x1f8>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	b292      	uxth	r2, r2
 800d588:	801a      	strh	r2, [r3, #0]
 800d58a:	4b1d      	ldr	r3, [pc, #116]	; (800d600 <Cursor_4+0x1f8>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	3302      	adds	r3, #2
 800d590:	4a1b      	ldr	r2, [pc, #108]	; (800d600 <Cursor_4+0x1f8>)
 800d592:	6013      	str	r3, [r2, #0]
 800d594:	4b1d      	ldr	r3, [pc, #116]	; (800d60c <Cursor_4+0x204>)
 800d596:	681a      	ldr	r2, [r3, #0]
 800d598:	4b19      	ldr	r3, [pc, #100]	; (800d600 <Cursor_4+0x1f8>)
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	b292      	uxth	r2, r2
 800d59e:	801a      	strh	r2, [r3, #0]
 800d5a0:	4b16      	ldr	r3, [pc, #88]	; (800d5fc <Cursor_4+0x1f4>)
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	330a      	adds	r3, #10
 800d5a6:	005b      	lsls	r3, r3, #1
 800d5a8:	687a      	ldr	r2, [r7, #4]
 800d5aa:	4413      	add	r3, r2
 800d5ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d5b0:	461a      	mov	r2, r3
 800d5b2:	4b15      	ldr	r3, [pc, #84]	; (800d608 <Cursor_4+0x200>)
 800d5b4:	601a      	str	r2, [r3, #0]
 800d5b6:	4b14      	ldr	r3, [pc, #80]	; (800d608 <Cursor_4+0x200>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	f003 0302 	and.w	r3, r3, #2
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d12e      	bne.n	800d620 <Cursor_4+0x218>
 800d5c2:	4b0f      	ldr	r3, [pc, #60]	; (800d600 <Cursor_4+0x1f8>)
 800d5c4:	4a0f      	ldr	r2, [pc, #60]	; (800d604 <Cursor_4+0x1fc>)
 800d5c6:	601a      	str	r2, [r3, #0]
 800d5c8:	4b0d      	ldr	r3, [pc, #52]	; (800d600 <Cursor_4+0x1f8>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d5d0:	4a12      	ldr	r2, [pc, #72]	; (800d61c <Cursor_4+0x214>)
 800d5d2:	6013      	str	r3, [r2, #0]
 800d5d4:	4b0a      	ldr	r3, [pc, #40]	; (800d600 <Cursor_4+0x1f8>)
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	3308      	adds	r3, #8
 800d5da:	4a09      	ldr	r2, [pc, #36]	; (800d600 <Cursor_4+0x1f8>)
 800d5dc:	6013      	str	r3, [r2, #0]
 800d5de:	4b0b      	ldr	r3, [pc, #44]	; (800d60c <Cursor_4+0x204>)
 800d5e0:	681a      	ldr	r2, [r3, #0]
 800d5e2:	4b07      	ldr	r3, [pc, #28]	; (800d600 <Cursor_4+0x1f8>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	b292      	uxth	r2, r2
 800d5e8:	801a      	strh	r2, [r3, #0]
 800d5ea:	4b05      	ldr	r3, [pc, #20]	; (800d600 <Cursor_4+0x1f8>)
 800d5ec:	681a      	ldr	r2, [r3, #0]
 800d5ee:	4b0b      	ldr	r3, [pc, #44]	; (800d61c <Cursor_4+0x214>)
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	429a      	cmp	r2, r3
 800d5f4:	d86a      	bhi.n	800d6cc <Cursor_4+0x2c4>
 800d5f6:	e7ed      	b.n	800d5d4 <Cursor_4+0x1cc>
 800d5f8:	bf00      	nop
 800d5fa:	e012      	b.n	800d622 <Cursor_4+0x21a>
 800d5fc:	20000a48 	.word	0x20000a48
 800d600:	20000bf4 	.word	0x20000bf4
 800d604:	20000be8 	.word	0x20000be8
 800d608:	20000a44 	.word	0x20000a44
 800d60c:	20000bf0 	.word	0x20000bf0
 800d610:	20000a40 	.word	0x20000a40
 800d614:	20000c00 	.word	0x20000c00
 800d618:	20000a58 	.word	0x20000a58
 800d61c:	20000c08 	.word	0x20000c08
 800d620:	bf00      	nop
 800d622:	4b34      	ldr	r3, [pc, #208]	; (800d6f4 <Cursor_4+0x2ec>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	3301      	adds	r3, #1
 800d628:	4a32      	ldr	r2, [pc, #200]	; (800d6f4 <Cursor_4+0x2ec>)
 800d62a:	6013      	str	r3, [r2, #0]
 800d62c:	4b31      	ldr	r3, [pc, #196]	; (800d6f4 <Cursor_4+0x2ec>)
 800d62e:	681a      	ldr	r2, [r3, #0]
 800d630:	4b31      	ldr	r3, [pc, #196]	; (800d6f8 <Cursor_4+0x2f0>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	429a      	cmp	r2, r3
 800d636:	d128      	bne.n	800d68a <Cursor_4+0x282>
 800d638:	4b30      	ldr	r3, [pc, #192]	; (800d6fc <Cursor_4+0x2f4>)
 800d63a:	681a      	ldr	r2, [r3, #0]
 800d63c:	4b30      	ldr	r3, [pc, #192]	; (800d700 <Cursor_4+0x2f8>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	b292      	uxth	r2, r2
 800d642:	801a      	strh	r2, [r3, #0]
 800d644:	4b2e      	ldr	r3, [pc, #184]	; (800d700 <Cursor_4+0x2f8>)
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	3302      	adds	r3, #2
 800d64a:	4a2d      	ldr	r2, [pc, #180]	; (800d700 <Cursor_4+0x2f8>)
 800d64c:	6013      	str	r3, [r2, #0]
 800d64e:	4b2b      	ldr	r3, [pc, #172]	; (800d6fc <Cursor_4+0x2f4>)
 800d650:	681a      	ldr	r2, [r3, #0]
 800d652:	4b2b      	ldr	r3, [pc, #172]	; (800d700 <Cursor_4+0x2f8>)
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	b292      	uxth	r2, r2
 800d658:	801a      	strh	r2, [r3, #0]
 800d65a:	4b29      	ldr	r3, [pc, #164]	; (800d700 <Cursor_4+0x2f8>)
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d662:	4a27      	ldr	r2, [pc, #156]	; (800d700 <Cursor_4+0x2f8>)
 800d664:	6013      	str	r3, [r2, #0]
 800d666:	4b25      	ldr	r3, [pc, #148]	; (800d6fc <Cursor_4+0x2f4>)
 800d668:	681a      	ldr	r2, [r3, #0]
 800d66a:	4b25      	ldr	r3, [pc, #148]	; (800d700 <Cursor_4+0x2f8>)
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	b292      	uxth	r2, r2
 800d670:	801a      	strh	r2, [r3, #0]
 800d672:	4b23      	ldr	r3, [pc, #140]	; (800d700 <Cursor_4+0x2f8>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	3302      	adds	r3, #2
 800d678:	4a21      	ldr	r2, [pc, #132]	; (800d700 <Cursor_4+0x2f8>)
 800d67a:	6013      	str	r3, [r2, #0]
 800d67c:	4b1f      	ldr	r3, [pc, #124]	; (800d6fc <Cursor_4+0x2f4>)
 800d67e:	681a      	ldr	r2, [r3, #0]
 800d680:	4b1f      	ldr	r3, [pc, #124]	; (800d700 <Cursor_4+0x2f8>)
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	b292      	uxth	r2, r2
 800d686:	801a      	strh	r2, [r3, #0]
 800d688:	e023      	b.n	800d6d2 <Cursor_4+0x2ca>
 800d68a:	bf00      	nop
 800d68c:	4b19      	ldr	r3, [pc, #100]	; (800d6f4 <Cursor_4+0x2ec>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	3301      	adds	r3, #1
 800d692:	4a18      	ldr	r2, [pc, #96]	; (800d6f4 <Cursor_4+0x2ec>)
 800d694:	6013      	str	r3, [r2, #0]
 800d696:	4b17      	ldr	r3, [pc, #92]	; (800d6f4 <Cursor_4+0x2ec>)
 800d698:	681a      	ldr	r2, [r3, #0]
 800d69a:	4b17      	ldr	r3, [pc, #92]	; (800d6f8 <Cursor_4+0x2f0>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	429a      	cmp	r2, r3
 800d6a0:	d116      	bne.n	800d6d0 <Cursor_4+0x2c8>
 800d6a2:	4b16      	ldr	r3, [pc, #88]	; (800d6fc <Cursor_4+0x2f4>)
 800d6a4:	681a      	ldr	r2, [r3, #0]
 800d6a6:	4b16      	ldr	r3, [pc, #88]	; (800d700 <Cursor_4+0x2f8>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	b292      	uxth	r2, r2
 800d6ac:	801a      	strh	r2, [r3, #0]
 800d6ae:	4b14      	ldr	r3, [pc, #80]	; (800d700 <Cursor_4+0x2f8>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800d6b6:	4a12      	ldr	r2, [pc, #72]	; (800d700 <Cursor_4+0x2f8>)
 800d6b8:	6013      	str	r3, [r2, #0]
 800d6ba:	4b10      	ldr	r3, [pc, #64]	; (800d6fc <Cursor_4+0x2f4>)
 800d6bc:	681a      	ldr	r2, [r3, #0]
 800d6be:	4b10      	ldr	r3, [pc, #64]	; (800d700 <Cursor_4+0x2f8>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	b292      	uxth	r2, r2
 800d6c4:	801a      	strh	r2, [r3, #0]
 800d6c6:	e004      	b.n	800d6d2 <Cursor_4+0x2ca>
 800d6c8:	bf00      	nop
 800d6ca:	e002      	b.n	800d6d2 <Cursor_4+0x2ca>
 800d6cc:	bf00      	nop
 800d6ce:	e000      	b.n	800d6d2 <Cursor_4+0x2ca>
 800d6d0:	bf00      	nop
 800d6d2:	4b0c      	ldr	r3, [pc, #48]	; (800d704 <Cursor_4+0x2fc>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	3301      	adds	r3, #1
 800d6d8:	4a0a      	ldr	r2, [pc, #40]	; (800d704 <Cursor_4+0x2fc>)
 800d6da:	6013      	str	r3, [r2, #0]
 800d6dc:	4b09      	ldr	r3, [pc, #36]	; (800d704 <Cursor_4+0x2fc>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	2b0a      	cmp	r3, #10
 800d6e2:	d000      	beq.n	800d6e6 <Cursor_4+0x2de>
 800d6e4:	e697      	b.n	800d416 <Cursor_4+0xe>
 800d6e6:	bf00      	nop
 800d6e8:	370c      	adds	r7, #12
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f0:	4770      	bx	lr
 800d6f2:	bf00      	nop
 800d6f4:	20000a40 	.word	0x20000a40
 800d6f8:	20000c00 	.word	0x20000c00
 800d6fc:	20000bf0 	.word	0x20000bf0
 800d700:	20000bf4 	.word	0x20000bf4
 800d704:	20000a48 	.word	0x20000a48

0800d708 <Send_LCD>:
 800d708:	b580      	push	{r7, lr}
 800d70a:	b082      	sub	sp, #8
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
 800d710:	4a12      	ldr	r2, [pc, #72]	; (800d75c <Send_LCD+0x54>)
 800d712:	4b13      	ldr	r3, [pc, #76]	; (800d760 <Send_LCD+0x58>)
 800d714:	601a      	str	r2, [r3, #0]
 800d716:	4b13      	ldr	r3, [pc, #76]	; (800d764 <Send_LCD+0x5c>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	b21b      	sxth	r3, r3
 800d71c:	2113      	movs	r1, #19
 800d71e:	4618      	mov	r0, r3
 800d720:	f004 fec4 	bl	80124ac <LCD_Set_Posi>
 800d724:	4b10      	ldr	r3, [pc, #64]	; (800d768 <Send_LCD+0x60>)
 800d726:	22cb      	movs	r2, #203	; 0xcb
 800d728:	601a      	str	r2, [r3, #0]
 800d72a:	4b0d      	ldr	r3, [pc, #52]	; (800d760 <Send_LCD+0x58>)
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	881b      	ldrh	r3, [r3, #0]
 800d730:	4618      	mov	r0, r3
 800d732:	f004 ff09 	bl	8012548 <LCD_Set_Pixel>
 800d736:	4b0a      	ldr	r3, [pc, #40]	; (800d760 <Send_LCD+0x58>)
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	3302      	adds	r3, #2
 800d73c:	4a08      	ldr	r2, [pc, #32]	; (800d760 <Send_LCD+0x58>)
 800d73e:	6013      	str	r3, [r2, #0]
 800d740:	4b09      	ldr	r3, [pc, #36]	; (800d768 <Send_LCD+0x60>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	3b01      	subs	r3, #1
 800d746:	4a08      	ldr	r2, [pc, #32]	; (800d768 <Send_LCD+0x60>)
 800d748:	6013      	str	r3, [r2, #0]
 800d74a:	4b07      	ldr	r3, [pc, #28]	; (800d768 <Send_LCD+0x60>)
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d000      	beq.n	800d754 <Send_LCD+0x4c>
 800d752:	e7ea      	b.n	800d72a <Send_LCD+0x22>
 800d754:	bf00      	nop
 800d756:	3708      	adds	r7, #8
 800d758:	46bd      	mov	sp, r7
 800d75a:	bd80      	pop	{r7, pc}
 800d75c:	20000be8 	.word	0x20000be8
 800d760:	20000a44 	.word	0x20000a44
 800d764:	20000c00 	.word	0x20000c00
 800d768:	20000bf4 	.word	0x20000bf4

0800d76c <Draw_Pop>:
 800d76c:	b480      	push	{r7}
 800d76e:	b083      	sub	sp, #12
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
 800d774:	4b85      	ldr	r3, [pc, #532]	; (800d98c <Draw_Pop+0x220>)
 800d776:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800d77a:	601a      	str	r2, [r3, #0]
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	3348      	adds	r3, #72	; 0x48
 800d780:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d784:	461a      	mov	r2, r3
 800d786:	4b82      	ldr	r3, [pc, #520]	; (800d990 <Draw_Pop+0x224>)
 800d788:	601a      	str	r2, [r3, #0]
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	334a      	adds	r3, #74	; 0x4a
 800d78e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d792:	461a      	mov	r2, r3
 800d794:	4b7f      	ldr	r3, [pc, #508]	; (800d994 <Draw_Pop+0x228>)
 800d796:	601a      	str	r2, [r3, #0]
 800d798:	4b7f      	ldr	r3, [pc, #508]	; (800d998 <Draw_Pop+0x22c>)
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	4a7f      	ldr	r2, [pc, #508]	; (800d99c <Draw_Pop+0x230>)
 800d79e:	6013      	str	r3, [r2, #0]
 800d7a0:	4b7f      	ldr	r3, [pc, #508]	; (800d9a0 <Draw_Pop+0x234>)
 800d7a2:	681a      	ldr	r2, [r3, #0]
 800d7a4:	4b7d      	ldr	r3, [pc, #500]	; (800d99c <Draw_Pop+0x230>)
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	429a      	cmp	r2, r3
 800d7aa:	d10d      	bne.n	800d7c8 <Draw_Pop+0x5c>
 800d7ac:	4b78      	ldr	r3, [pc, #480]	; (800d990 <Draw_Pop+0x224>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	3306      	adds	r3, #6
 800d7b2:	4a77      	ldr	r2, [pc, #476]	; (800d990 <Draw_Pop+0x224>)
 800d7b4:	6013      	str	r3, [r2, #0]
 800d7b6:	4b77      	ldr	r3, [pc, #476]	; (800d994 <Draw_Pop+0x228>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	3b0c      	subs	r3, #12
 800d7bc:	4a75      	ldr	r2, [pc, #468]	; (800d994 <Draw_Pop+0x228>)
 800d7be:	6013      	str	r3, [r2, #0]
 800d7c0:	4b72      	ldr	r3, [pc, #456]	; (800d98c <Draw_Pop+0x220>)
 800d7c2:	f04f 1208 	mov.w	r2, #524296	; 0x80008
 800d7c6:	601a      	str	r2, [r3, #0]
 800d7c8:	4b73      	ldr	r3, [pc, #460]	; (800d998 <Draw_Pop+0x22c>)
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	3301      	adds	r3, #1
 800d7ce:	4a73      	ldr	r2, [pc, #460]	; (800d99c <Draw_Pop+0x230>)
 800d7d0:	6013      	str	r3, [r2, #0]
 800d7d2:	4b73      	ldr	r3, [pc, #460]	; (800d9a0 <Draw_Pop+0x234>)
 800d7d4:	681a      	ldr	r2, [r3, #0]
 800d7d6:	4b71      	ldr	r3, [pc, #452]	; (800d99c <Draw_Pop+0x230>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	429a      	cmp	r2, r3
 800d7dc:	d10d      	bne.n	800d7fa <Draw_Pop+0x8e>
 800d7de:	4b6c      	ldr	r3, [pc, #432]	; (800d990 <Draw_Pop+0x224>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	3304      	adds	r3, #4
 800d7e4:	4a6a      	ldr	r2, [pc, #424]	; (800d990 <Draw_Pop+0x224>)
 800d7e6:	6013      	str	r3, [r2, #0]
 800d7e8:	4b6a      	ldr	r3, [pc, #424]	; (800d994 <Draw_Pop+0x228>)
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	3b08      	subs	r3, #8
 800d7ee:	4a69      	ldr	r2, [pc, #420]	; (800d994 <Draw_Pop+0x228>)
 800d7f0:	6013      	str	r3, [r2, #0]
 800d7f2:	4b66      	ldr	r3, [pc, #408]	; (800d98c <Draw_Pop+0x220>)
 800d7f4:	f04f 1204 	mov.w	r2, #262148	; 0x40004
 800d7f8:	601a      	str	r2, [r3, #0]
 800d7fa:	4b67      	ldr	r3, [pc, #412]	; (800d998 <Draw_Pop+0x22c>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	3302      	adds	r3, #2
 800d800:	4a66      	ldr	r2, [pc, #408]	; (800d99c <Draw_Pop+0x230>)
 800d802:	6013      	str	r3, [r2, #0]
 800d804:	4b66      	ldr	r3, [pc, #408]	; (800d9a0 <Draw_Pop+0x234>)
 800d806:	681a      	ldr	r2, [r3, #0]
 800d808:	4b64      	ldr	r3, [pc, #400]	; (800d99c <Draw_Pop+0x230>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	429a      	cmp	r2, r3
 800d80e:	d10d      	bne.n	800d82c <Draw_Pop+0xc0>
 800d810:	4b5f      	ldr	r3, [pc, #380]	; (800d990 <Draw_Pop+0x224>)
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	3302      	adds	r3, #2
 800d816:	4a5e      	ldr	r2, [pc, #376]	; (800d990 <Draw_Pop+0x224>)
 800d818:	6013      	str	r3, [r2, #0]
 800d81a:	4b5e      	ldr	r3, [pc, #376]	; (800d994 <Draw_Pop+0x228>)
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	3b04      	subs	r3, #4
 800d820:	4a5c      	ldr	r2, [pc, #368]	; (800d994 <Draw_Pop+0x228>)
 800d822:	6013      	str	r3, [r2, #0]
 800d824:	4b59      	ldr	r3, [pc, #356]	; (800d98c <Draw_Pop+0x220>)
 800d826:	f04f 1202 	mov.w	r2, #131074	; 0x20002
 800d82a:	601a      	str	r2, [r3, #0]
 800d82c:	4b5d      	ldr	r3, [pc, #372]	; (800d9a4 <Draw_Pop+0x238>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	3b03      	subs	r3, #3
 800d832:	4a5a      	ldr	r2, [pc, #360]	; (800d99c <Draw_Pop+0x230>)
 800d834:	6013      	str	r3, [r2, #0]
 800d836:	4b5a      	ldr	r3, [pc, #360]	; (800d9a0 <Draw_Pop+0x234>)
 800d838:	681a      	ldr	r2, [r3, #0]
 800d83a:	4b58      	ldr	r3, [pc, #352]	; (800d99c <Draw_Pop+0x230>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	429a      	cmp	r2, r3
 800d840:	d10d      	bne.n	800d85e <Draw_Pop+0xf2>
 800d842:	4b53      	ldr	r3, [pc, #332]	; (800d990 <Draw_Pop+0x224>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	3302      	adds	r3, #2
 800d848:	4a51      	ldr	r2, [pc, #324]	; (800d990 <Draw_Pop+0x224>)
 800d84a:	6013      	str	r3, [r2, #0]
 800d84c:	4b51      	ldr	r3, [pc, #324]	; (800d994 <Draw_Pop+0x228>)
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	3b04      	subs	r3, #4
 800d852:	4a50      	ldr	r2, [pc, #320]	; (800d994 <Draw_Pop+0x228>)
 800d854:	6013      	str	r3, [r2, #0]
 800d856:	4b4d      	ldr	r3, [pc, #308]	; (800d98c <Draw_Pop+0x220>)
 800d858:	f04f 1202 	mov.w	r2, #131074	; 0x20002
 800d85c:	601a      	str	r2, [r3, #0]
 800d85e:	4b51      	ldr	r3, [pc, #324]	; (800d9a4 <Draw_Pop+0x238>)
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	3b02      	subs	r3, #2
 800d864:	4a4d      	ldr	r2, [pc, #308]	; (800d99c <Draw_Pop+0x230>)
 800d866:	6013      	str	r3, [r2, #0]
 800d868:	4b4d      	ldr	r3, [pc, #308]	; (800d9a0 <Draw_Pop+0x234>)
 800d86a:	681a      	ldr	r2, [r3, #0]
 800d86c:	4b4b      	ldr	r3, [pc, #300]	; (800d99c <Draw_Pop+0x230>)
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	429a      	cmp	r2, r3
 800d872:	d10d      	bne.n	800d890 <Draw_Pop+0x124>
 800d874:	4b46      	ldr	r3, [pc, #280]	; (800d990 <Draw_Pop+0x224>)
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	3304      	adds	r3, #4
 800d87a:	4a45      	ldr	r2, [pc, #276]	; (800d990 <Draw_Pop+0x224>)
 800d87c:	6013      	str	r3, [r2, #0]
 800d87e:	4b45      	ldr	r3, [pc, #276]	; (800d994 <Draw_Pop+0x228>)
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	3b08      	subs	r3, #8
 800d884:	4a43      	ldr	r2, [pc, #268]	; (800d994 <Draw_Pop+0x228>)
 800d886:	6013      	str	r3, [r2, #0]
 800d888:	4b40      	ldr	r3, [pc, #256]	; (800d98c <Draw_Pop+0x220>)
 800d88a:	f04f 1204 	mov.w	r2, #262148	; 0x40004
 800d88e:	601a      	str	r2, [r3, #0]
 800d890:	4b44      	ldr	r3, [pc, #272]	; (800d9a4 <Draw_Pop+0x238>)
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	3b01      	subs	r3, #1
 800d896:	4a41      	ldr	r2, [pc, #260]	; (800d99c <Draw_Pop+0x230>)
 800d898:	6013      	str	r3, [r2, #0]
 800d89a:	4b41      	ldr	r3, [pc, #260]	; (800d9a0 <Draw_Pop+0x234>)
 800d89c:	681a      	ldr	r2, [r3, #0]
 800d89e:	4b3f      	ldr	r3, [pc, #252]	; (800d99c <Draw_Pop+0x230>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	429a      	cmp	r2, r3
 800d8a4:	d10d      	bne.n	800d8c2 <Draw_Pop+0x156>
 800d8a6:	4b3a      	ldr	r3, [pc, #232]	; (800d990 <Draw_Pop+0x224>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	3306      	adds	r3, #6
 800d8ac:	4a38      	ldr	r2, [pc, #224]	; (800d990 <Draw_Pop+0x224>)
 800d8ae:	6013      	str	r3, [r2, #0]
 800d8b0:	4b38      	ldr	r3, [pc, #224]	; (800d994 <Draw_Pop+0x228>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	3b0c      	subs	r3, #12
 800d8b6:	4a37      	ldr	r2, [pc, #220]	; (800d994 <Draw_Pop+0x228>)
 800d8b8:	6013      	str	r3, [r2, #0]
 800d8ba:	4b34      	ldr	r3, [pc, #208]	; (800d98c <Draw_Pop+0x220>)
 800d8bc:	f04f 1208 	mov.w	r2, #524296	; 0x80008
 800d8c0:	601a      	str	r2, [r3, #0]
 800d8c2:	4b33      	ldr	r3, [pc, #204]	; (800d990 <Draw_Pop+0x224>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	085b      	lsrs	r3, r3, #1
 800d8c8:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d8cc:	005b      	lsls	r3, r3, #1
 800d8ce:	4a36      	ldr	r2, [pc, #216]	; (800d9a8 <Draw_Pop+0x23c>)
 800d8d0:	4413      	add	r3, r2
 800d8d2:	4a36      	ldr	r2, [pc, #216]	; (800d9ac <Draw_Pop+0x240>)
 800d8d4:	6013      	str	r3, [r2, #0]
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	334e      	adds	r3, #78	; 0x4e
 800d8da:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d8de:	461a      	mov	r2, r3
 800d8e0:	4b33      	ldr	r3, [pc, #204]	; (800d9b0 <Draw_Pop+0x244>)
 800d8e2:	601a      	str	r2, [r3, #0]
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	3350      	adds	r3, #80	; 0x50
 800d8e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d8ec:	461a      	mov	r2, r3
 800d8ee:	4b31      	ldr	r3, [pc, #196]	; (800d9b4 <Draw_Pop+0x248>)
 800d8f0:	601a      	str	r2, [r3, #0]
 800d8f2:	4b31      	ldr	r3, [pc, #196]	; (800d9b8 <Draw_Pop+0x24c>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	881b      	ldrh	r3, [r3, #0]
 800d8f8:	461a      	mov	r2, r3
 800d8fa:	4b28      	ldr	r3, [pc, #160]	; (800d99c <Draw_Pop+0x230>)
 800d8fc:	601a      	str	r2, [r3, #0]
 800d8fe:	4b2e      	ldr	r3, [pc, #184]	; (800d9b8 <Draw_Pop+0x24c>)
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	3302      	adds	r3, #2
 800d904:	4a2c      	ldr	r2, [pc, #176]	; (800d9b8 <Draw_Pop+0x24c>)
 800d906:	6013      	str	r3, [r2, #0]
 800d908:	4b29      	ldr	r3, [pc, #164]	; (800d9b0 <Draw_Pop+0x244>)
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d100      	bne.n	800d912 <Draw_Pop+0x1a6>
 800d910:	e054      	b.n	800d9bc <Draw_Pop+0x250>
 800d912:	bf00      	nop
 800d914:	4b21      	ldr	r3, [pc, #132]	; (800d99c <Draw_Pop+0x230>)
 800d916:	681a      	ldr	r2, [r3, #0]
 800d918:	4b1c      	ldr	r3, [pc, #112]	; (800d98c <Draw_Pop+0x220>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	4013      	ands	r3, r2
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d006      	beq.n	800d930 <Draw_Pop+0x1c4>
 800d922:	4b22      	ldr	r3, [pc, #136]	; (800d9ac <Draw_Pop+0x240>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	781b      	ldrb	r3, [r3, #0]
 800d928:	461a      	mov	r2, r3
 800d92a:	4b22      	ldr	r3, [pc, #136]	; (800d9b4 <Draw_Pop+0x248>)
 800d92c:	601a      	str	r2, [r3, #0]
 800d92e:	e005      	b.n	800d93c <Draw_Pop+0x1d0>
 800d930:	4b1e      	ldr	r3, [pc, #120]	; (800d9ac <Draw_Pop+0x240>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	781b      	ldrb	r3, [r3, #0]
 800d936:	461a      	mov	r2, r3
 800d938:	4b1d      	ldr	r3, [pc, #116]	; (800d9b0 <Draw_Pop+0x244>)
 800d93a:	601a      	str	r2, [r3, #0]
 800d93c:	4b1b      	ldr	r3, [pc, #108]	; (800d9ac <Draw_Pop+0x240>)
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	3301      	adds	r3, #1
 800d942:	4a1a      	ldr	r2, [pc, #104]	; (800d9ac <Draw_Pop+0x240>)
 800d944:	6013      	str	r3, [r2, #0]
 800d946:	4b13      	ldr	r3, [pc, #76]	; (800d994 <Draw_Pop+0x228>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	3b02      	subs	r3, #2
 800d94c:	4a11      	ldr	r2, [pc, #68]	; (800d994 <Draw_Pop+0x228>)
 800d94e:	6013      	str	r3, [r2, #0]
 800d950:	4b10      	ldr	r3, [pc, #64]	; (800d994 <Draw_Pop+0x228>)
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d066      	beq.n	800da26 <Draw_Pop+0x2ba>
 800d958:	4b0c      	ldr	r3, [pc, #48]	; (800d98c <Draw_Pop+0x220>)
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	da0f      	bge.n	800d980 <Draw_Pop+0x214>
 800d960:	4b15      	ldr	r3, [pc, #84]	; (800d9b8 <Draw_Pop+0x24c>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	881b      	ldrh	r3, [r3, #0]
 800d966:	461a      	mov	r2, r3
 800d968:	4b0c      	ldr	r3, [pc, #48]	; (800d99c <Draw_Pop+0x230>)
 800d96a:	601a      	str	r2, [r3, #0]
 800d96c:	4b12      	ldr	r3, [pc, #72]	; (800d9b8 <Draw_Pop+0x24c>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	3302      	adds	r3, #2
 800d972:	4a11      	ldr	r2, [pc, #68]	; (800d9b8 <Draw_Pop+0x24c>)
 800d974:	6013      	str	r3, [r2, #0]
 800d976:	4b05      	ldr	r3, [pc, #20]	; (800d98c <Draw_Pop+0x220>)
 800d978:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800d97c:	601a      	str	r2, [r3, #0]
 800d97e:	e7c9      	b.n	800d914 <Draw_Pop+0x1a8>
 800d980:	4b02      	ldr	r3, [pc, #8]	; (800d98c <Draw_Pop+0x220>)
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	005b      	lsls	r3, r3, #1
 800d986:	4a01      	ldr	r2, [pc, #4]	; (800d98c <Draw_Pop+0x220>)
 800d988:	6013      	str	r3, [r2, #0]
 800d98a:	e7c3      	b.n	800d914 <Draw_Pop+0x1a8>
 800d98c:	20000c08 	.word	0x20000c08
 800d990:	20000a44 	.word	0x20000a44
 800d994:	20000bf0 	.word	0x20000bf0
 800d998:	20000bec 	.word	0x20000bec
 800d99c:	20000a48 	.word	0x20000a48
 800d9a0:	20000c00 	.word	0x20000c00
 800d9a4:	20000bfc 	.word	0x20000bfc
 800d9a8:	20000a50 	.word	0x20000a50
 800d9ac:	20000bf4 	.word	0x20000bf4
 800d9b0:	20000a40 	.word	0x20000a40
 800d9b4:	20000c04 	.word	0x20000c04
 800d9b8:	20000c0c 	.word	0x20000c0c
 800d9bc:	4b1e      	ldr	r3, [pc, #120]	; (800da38 <Draw_Pop+0x2cc>)
 800d9be:	681a      	ldr	r2, [r3, #0]
 800d9c0:	4b1e      	ldr	r3, [pc, #120]	; (800da3c <Draw_Pop+0x2d0>)
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	4013      	ands	r3, r2
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d005      	beq.n	800d9d6 <Draw_Pop+0x26a>
 800d9ca:	4b1d      	ldr	r3, [pc, #116]	; (800da40 <Draw_Pop+0x2d4>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	781b      	ldrb	r3, [r3, #0]
 800d9d0:	461a      	mov	r2, r3
 800d9d2:	4b1c      	ldr	r3, [pc, #112]	; (800da44 <Draw_Pop+0x2d8>)
 800d9d4:	601a      	str	r2, [r3, #0]
 800d9d6:	4b1a      	ldr	r3, [pc, #104]	; (800da40 <Draw_Pop+0x2d4>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	3301      	adds	r3, #1
 800d9dc:	4a18      	ldr	r2, [pc, #96]	; (800da40 <Draw_Pop+0x2d4>)
 800d9de:	6013      	str	r3, [r2, #0]
 800d9e0:	4b19      	ldr	r3, [pc, #100]	; (800da48 <Draw_Pop+0x2dc>)
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	3b02      	subs	r3, #2
 800d9e6:	4a18      	ldr	r2, [pc, #96]	; (800da48 <Draw_Pop+0x2dc>)
 800d9e8:	6013      	str	r3, [r2, #0]
 800d9ea:	4b17      	ldr	r3, [pc, #92]	; (800da48 <Draw_Pop+0x2dc>)
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d01b      	beq.n	800da2a <Draw_Pop+0x2be>
 800d9f2:	4b12      	ldr	r3, [pc, #72]	; (800da3c <Draw_Pop+0x2d0>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	da0f      	bge.n	800da1a <Draw_Pop+0x2ae>
 800d9fa:	4b14      	ldr	r3, [pc, #80]	; (800da4c <Draw_Pop+0x2e0>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	881b      	ldrh	r3, [r3, #0]
 800da00:	461a      	mov	r2, r3
 800da02:	4b13      	ldr	r3, [pc, #76]	; (800da50 <Draw_Pop+0x2e4>)
 800da04:	601a      	str	r2, [r3, #0]
 800da06:	4b11      	ldr	r3, [pc, #68]	; (800da4c <Draw_Pop+0x2e0>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	3302      	adds	r3, #2
 800da0c:	4a0f      	ldr	r2, [pc, #60]	; (800da4c <Draw_Pop+0x2e0>)
 800da0e:	6013      	str	r3, [r2, #0]
 800da10:	4b0a      	ldr	r3, [pc, #40]	; (800da3c <Draw_Pop+0x2d0>)
 800da12:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800da16:	601a      	str	r2, [r3, #0]
 800da18:	e7d0      	b.n	800d9bc <Draw_Pop+0x250>
 800da1a:	4b08      	ldr	r3, [pc, #32]	; (800da3c <Draw_Pop+0x2d0>)
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	005b      	lsls	r3, r3, #1
 800da20:	4a06      	ldr	r2, [pc, #24]	; (800da3c <Draw_Pop+0x2d0>)
 800da22:	6013      	str	r3, [r2, #0]
 800da24:	e7ca      	b.n	800d9bc <Draw_Pop+0x250>
 800da26:	bf00      	nop
 800da28:	e000      	b.n	800da2c <Draw_Pop+0x2c0>
 800da2a:	bf00      	nop
 800da2c:	370c      	adds	r7, #12
 800da2e:	46bd      	mov	sp, r7
 800da30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da34:	4770      	bx	lr
 800da36:	bf00      	nop
 800da38:	20000c00 	.word	0x20000c00
 800da3c:	20000c08 	.word	0x20000c08
 800da40:	20000bf4 	.word	0x20000bf4
 800da44:	20000c04 	.word	0x20000c04
 800da48:	20000bf0 	.word	0x20000bf0
 800da4c:	20000c0c 	.word	0x20000c0c
 800da50:	20000a48 	.word	0x20000a48

0800da54 <DrawWindow>:
 800da54:	b580      	push	{r7, lr}
 800da56:	b082      	sub	sp, #8
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
 800da5c:	6039      	str	r1, [r7, #0]
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	4a9b      	ldr	r2, [pc, #620]	; (800dcd0 <DrawWindow+0x27c>)
 800da62:	6013      	str	r3, [r2, #0]
 800da64:	4b9b      	ldr	r3, [pc, #620]	; (800dcd4 <DrawWindow+0x280>)
 800da66:	2200      	movs	r2, #0
 800da68:	601a      	str	r2, [r3, #0]
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f503 7361 	add.w	r3, r3, #900	; 0x384
 800da70:	4a99      	ldr	r2, [pc, #612]	; (800dcd8 <DrawWindow+0x284>)
 800da72:	6013      	str	r3, [r2, #0]
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	3344      	adds	r3, #68	; 0x44
 800da78:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da7c:	461a      	mov	r2, r3
 800da7e:	4b97      	ldr	r3, [pc, #604]	; (800dcdc <DrawWindow+0x288>)
 800da80:	601a      	str	r2, [r3, #0]
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	3346      	adds	r3, #70	; 0x46
 800da86:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da8a:	461a      	mov	r2, r3
 800da8c:	4b94      	ldr	r3, [pc, #592]	; (800dce0 <DrawWindow+0x28c>)
 800da8e:	601a      	str	r2, [r3, #0]
 800da90:	4b92      	ldr	r3, [pc, #584]	; (800dcdc <DrawWindow+0x288>)
 800da92:	681a      	ldr	r2, [r3, #0]
 800da94:	4b92      	ldr	r3, [pc, #584]	; (800dce0 <DrawWindow+0x28c>)
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	4413      	add	r3, r2
 800da9a:	4a91      	ldr	r2, [pc, #580]	; (800dce0 <DrawWindow+0x28c>)
 800da9c:	6013      	str	r3, [r2, #0]
 800da9e:	4b8d      	ldr	r3, [pc, #564]	; (800dcd4 <DrawWindow+0x280>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d102      	bne.n	800daac <DrawWindow+0x58>
 800daa6:	f7ff f93b 	bl	800cd20 <Buld_0>
 800daaa:	e064      	b.n	800db76 <DrawWindow+0x122>
 800daac:	4b89      	ldr	r3, [pc, #548]	; (800dcd4 <DrawWindow+0x280>)
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800dab4:	d102      	bne.n	800dabc <DrawWindow+0x68>
 800dab6:	f7ff f933 	bl	800cd20 <Buld_0>
 800daba:	e05c      	b.n	800db76 <DrawWindow+0x122>
 800dabc:	4b85      	ldr	r3, [pc, #532]	; (800dcd4 <DrawWindow+0x280>)
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	2b01      	cmp	r3, #1
 800dac2:	d102      	bne.n	800daca <DrawWindow+0x76>
 800dac4:	f7ff f938 	bl	800cd38 <Buld_1>
 800dac8:	e055      	b.n	800db76 <DrawWindow+0x122>
 800daca:	4b86      	ldr	r3, [pc, #536]	; (800dce4 <DrawWindow+0x290>)
 800dacc:	f240 122d 	movw	r2, #301	; 0x12d
 800dad0:	601a      	str	r2, [r3, #0]
 800dad2:	4b80      	ldr	r3, [pc, #512]	; (800dcd4 <DrawWindow+0x280>)
 800dad4:	681a      	ldr	r2, [r3, #0]
 800dad6:	4b83      	ldr	r3, [pc, #524]	; (800dce4 <DrawWindow+0x290>)
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	429a      	cmp	r2, r3
 800dadc:	d102      	bne.n	800dae4 <DrawWindow+0x90>
 800dade:	f7ff f92b 	bl	800cd38 <Buld_1>
 800dae2:	e048      	b.n	800db76 <DrawWindow+0x122>
 800dae4:	4b7b      	ldr	r3, [pc, #492]	; (800dcd4 <DrawWindow+0x280>)
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	3b01      	subs	r3, #1
 800daea:	4a7e      	ldr	r2, [pc, #504]	; (800dce4 <DrawWindow+0x290>)
 800daec:	6013      	str	r3, [r2, #0]
 800daee:	4b7e      	ldr	r3, [pc, #504]	; (800dce8 <DrawWindow+0x294>)
 800daf0:	2219      	movs	r2, #25
 800daf2:	601a      	str	r2, [r3, #0]
 800daf4:	4b7b      	ldr	r3, [pc, #492]	; (800dce4 <DrawWindow+0x290>)
 800daf6:	681a      	ldr	r2, [r3, #0]
 800daf8:	4b7b      	ldr	r3, [pc, #492]	; (800dce8 <DrawWindow+0x294>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	fbb2 f3f3 	udiv	r3, r2, r3
 800db00:	4a7a      	ldr	r2, [pc, #488]	; (800dcec <DrawWindow+0x298>)
 800db02:	6013      	str	r3, [r2, #0]
 800db04:	4b79      	ldr	r3, [pc, #484]	; (800dcec <DrawWindow+0x298>)
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	4a77      	ldr	r2, [pc, #476]	; (800dce8 <DrawWindow+0x294>)
 800db0a:	6812      	ldr	r2, [r2, #0]
 800db0c:	fb02 f303 	mul.w	r3, r2, r3
 800db10:	4a76      	ldr	r2, [pc, #472]	; (800dcec <DrawWindow+0x298>)
 800db12:	6013      	str	r3, [r2, #0]
 800db14:	4b73      	ldr	r3, [pc, #460]	; (800dce4 <DrawWindow+0x290>)
 800db16:	681a      	ldr	r2, [r3, #0]
 800db18:	4b74      	ldr	r3, [pc, #464]	; (800dcec <DrawWindow+0x298>)
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	1ad3      	subs	r3, r2, r3
 800db1e:	4a73      	ldr	r2, [pc, #460]	; (800dcec <DrawWindow+0x298>)
 800db20:	6013      	str	r3, [r2, #0]
 800db22:	4b72      	ldr	r3, [pc, #456]	; (800dcec <DrawWindow+0x298>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d102      	bne.n	800db30 <DrawWindow+0xdc>
 800db2a:	f7ff f975 	bl	800ce18 <Buld_4>
 800db2e:	e022      	b.n	800db76 <DrawWindow+0x122>
 800db30:	4b6d      	ldr	r3, [pc, #436]	; (800dce8 <DrawWindow+0x294>)
 800db32:	2205      	movs	r2, #5
 800db34:	601a      	str	r2, [r3, #0]
 800db36:	4b6b      	ldr	r3, [pc, #428]	; (800dce4 <DrawWindow+0x290>)
 800db38:	681a      	ldr	r2, [r3, #0]
 800db3a:	4b6b      	ldr	r3, [pc, #428]	; (800dce8 <DrawWindow+0x294>)
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800db42:	4a6a      	ldr	r2, [pc, #424]	; (800dcec <DrawWindow+0x298>)
 800db44:	6013      	str	r3, [r2, #0]
 800db46:	4b69      	ldr	r3, [pc, #420]	; (800dcec <DrawWindow+0x298>)
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	4a67      	ldr	r2, [pc, #412]	; (800dce8 <DrawWindow+0x294>)
 800db4c:	6812      	ldr	r2, [r2, #0]
 800db4e:	fb02 f303 	mul.w	r3, r2, r3
 800db52:	4a66      	ldr	r2, [pc, #408]	; (800dcec <DrawWindow+0x298>)
 800db54:	6013      	str	r3, [r2, #0]
 800db56:	4b63      	ldr	r3, [pc, #396]	; (800dce4 <DrawWindow+0x290>)
 800db58:	681a      	ldr	r2, [r3, #0]
 800db5a:	4b64      	ldr	r3, [pc, #400]	; (800dcec <DrawWindow+0x298>)
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	1ad3      	subs	r3, r2, r3
 800db60:	4a62      	ldr	r2, [pc, #392]	; (800dcec <DrawWindow+0x298>)
 800db62:	6013      	str	r3, [r2, #0]
 800db64:	4b61      	ldr	r3, [pc, #388]	; (800dcec <DrawWindow+0x298>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d102      	bne.n	800db72 <DrawWindow+0x11e>
 800db6c:	f7ff f92e 	bl	800cdcc <Buld_3>
 800db70:	e001      	b.n	800db76 <DrawWindow+0x122>
 800db72:	f7ff f909 	bl	800cd88 <Buld_2>
 800db76:	4b57      	ldr	r3, [pc, #348]	; (800dcd4 <DrawWindow+0x280>)
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	2b02      	cmp	r3, #2
 800db7c:	d96c      	bls.n	800dc58 <DrawWindow+0x204>
 800db7e:	4b55      	ldr	r3, [pc, #340]	; (800dcd4 <DrawWindow+0x280>)
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800db86:	d267      	bcs.n	800dc58 <DrawWindow+0x204>
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	3306      	adds	r3, #6
 800db8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db90:	461a      	mov	r2, r3
 800db92:	4b54      	ldr	r3, [pc, #336]	; (800dce4 <DrawWindow+0x290>)
 800db94:	601a      	str	r2, [r3, #0]
 800db96:	4b53      	ldr	r3, [pc, #332]	; (800dce4 <DrawWindow+0x290>)
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	f003 0304 	and.w	r3, r3, #4
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d10f      	bne.n	800dbc2 <DrawWindow+0x16e>
 800dba2:	4b50      	ldr	r3, [pc, #320]	; (800dce4 <DrawWindow+0x290>)
 800dba4:	222e      	movs	r2, #46	; 0x2e
 800dba6:	601a      	str	r2, [r3, #0]
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	331a      	adds	r3, #26
 800dbac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dbb0:	461a      	mov	r2, r3
 800dbb2:	4b4f      	ldr	r3, [pc, #316]	; (800dcf0 <DrawWindow+0x29c>)
 800dbb4:	601a      	str	r2, [r3, #0]
 800dbb6:	4b4f      	ldr	r3, [pc, #316]	; (800dcf4 <DrawWindow+0x2a0>)
 800dbb8:	2208      	movs	r2, #8
 800dbba:	601a      	str	r2, [r3, #0]
 800dbbc:	2001      	movs	r0, #1
 800dbbe:	f7ff f951 	bl	800ce64 <Draw_Digit_Analog>
 800dbc2:	683b      	ldr	r3, [r7, #0]
 800dbc4:	3304      	adds	r3, #4
 800dbc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dbca:	461a      	mov	r2, r3
 800dbcc:	4b45      	ldr	r3, [pc, #276]	; (800dce4 <DrawWindow+0x290>)
 800dbce:	601a      	str	r2, [r3, #0]
 800dbd0:	4b44      	ldr	r3, [pc, #272]	; (800dce4 <DrawWindow+0x290>)
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	f003 0304 	and.w	r3, r3, #4
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d10f      	bne.n	800dbfc <DrawWindow+0x1a8>
 800dbdc:	4b41      	ldr	r3, [pc, #260]	; (800dce4 <DrawWindow+0x290>)
 800dbde:	222c      	movs	r2, #44	; 0x2c
 800dbe0:	601a      	str	r2, [r3, #0]
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	3318      	adds	r3, #24
 800dbe6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dbea:	461a      	mov	r2, r3
 800dbec:	4b40      	ldr	r3, [pc, #256]	; (800dcf0 <DrawWindow+0x29c>)
 800dbee:	601a      	str	r2, [r3, #0]
 800dbf0:	4b40      	ldr	r3, [pc, #256]	; (800dcf4 <DrawWindow+0x2a0>)
 800dbf2:	2204      	movs	r2, #4
 800dbf4:	601a      	str	r2, [r3, #0]
 800dbf6:	2001      	movs	r0, #1
 800dbf8:	f7ff f934 	bl	800ce64 <Draw_Digit_Analog>
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	3302      	adds	r3, #2
 800dc00:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc04:	461a      	mov	r2, r3
 800dc06:	4b37      	ldr	r3, [pc, #220]	; (800dce4 <DrawWindow+0x290>)
 800dc08:	601a      	str	r2, [r3, #0]
 800dc0a:	4b36      	ldr	r3, [pc, #216]	; (800dce4 <DrawWindow+0x290>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	f003 0304 	and.w	r3, r3, #4
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d10a      	bne.n	800dc2c <DrawWindow+0x1d8>
 800dc16:	4b33      	ldr	r3, [pc, #204]	; (800dce4 <DrawWindow+0x290>)
 800dc18:	222a      	movs	r2, #42	; 0x2a
 800dc1a:	601a      	str	r2, [r3, #0]
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800dc22:	4a33      	ldr	r2, [pc, #204]	; (800dcf0 <DrawWindow+0x29c>)
 800dc24:	6013      	str	r3, [r2, #0]
 800dc26:	2000      	movs	r0, #0
 800dc28:	f7ff f91c 	bl	800ce64 <Draw_Digit_Analog>
 800dc2c:	683b      	ldr	r3, [r7, #0]
 800dc2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc32:	461a      	mov	r2, r3
 800dc34:	4b2b      	ldr	r3, [pc, #172]	; (800dce4 <DrawWindow+0x290>)
 800dc36:	601a      	str	r2, [r3, #0]
 800dc38:	4b2a      	ldr	r3, [pc, #168]	; (800dce4 <DrawWindow+0x290>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	f003 0304 	and.w	r3, r3, #4
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d10b      	bne.n	800dc5c <DrawWindow+0x208>
 800dc44:	4b27      	ldr	r3, [pc, #156]	; (800dce4 <DrawWindow+0x290>)
 800dc46:	2228      	movs	r2, #40	; 0x28
 800dc48:	601a      	str	r2, [r3, #0]
 800dc4a:	4a29      	ldr	r2, [pc, #164]	; (800dcf0 <DrawWindow+0x29c>)
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	6013      	str	r3, [r2, #0]
 800dc50:	2000      	movs	r0, #0
 800dc52:	f7ff f907 	bl	800ce64 <Draw_Digit_Analog>
 800dc56:	e002      	b.n	800dc5e <DrawWindow+0x20a>
 800dc58:	bf00      	nop
 800dc5a:	e000      	b.n	800dc5e <DrawWindow+0x20a>
 800dc5c:	bf00      	nop
 800dc5e:	4b1d      	ldr	r3, [pc, #116]	; (800dcd4 <DrawWindow+0x280>)
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d103      	bne.n	800dc6e <DrawWindow+0x21a>
 800dc66:	6838      	ldr	r0, [r7, #0]
 800dc68:	f7ff fa14 	bl	800d094 <Cursor_0>
 800dc6c:	e047      	b.n	800dcfe <DrawWindow+0x2aa>
 800dc6e:	4b19      	ldr	r3, [pc, #100]	; (800dcd4 <DrawWindow+0x280>)
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800dc76:	d103      	bne.n	800dc80 <DrawWindow+0x22c>
 800dc78:	6838      	ldr	r0, [r7, #0]
 800dc7a:	f7ff fa0b 	bl	800d094 <Cursor_0>
 800dc7e:	e03e      	b.n	800dcfe <DrawWindow+0x2aa>
 800dc80:	4b14      	ldr	r3, [pc, #80]	; (800dcd4 <DrawWindow+0x280>)
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	2b01      	cmp	r3, #1
 800dc86:	d103      	bne.n	800dc90 <DrawWindow+0x23c>
 800dc88:	6838      	ldr	r0, [r7, #0]
 800dc8a:	f7ff fa8d 	bl	800d1a8 <Cursor_1>
 800dc8e:	e036      	b.n	800dcfe <DrawWindow+0x2aa>
 800dc90:	4b16      	ldr	r3, [pc, #88]	; (800dcec <DrawWindow+0x298>)
 800dc92:	f240 122d 	movw	r2, #301	; 0x12d
 800dc96:	601a      	str	r2, [r3, #0]
 800dc98:	4b0e      	ldr	r3, [pc, #56]	; (800dcd4 <DrawWindow+0x280>)
 800dc9a:	681a      	ldr	r2, [r3, #0]
 800dc9c:	4b13      	ldr	r3, [pc, #76]	; (800dcec <DrawWindow+0x298>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	429a      	cmp	r2, r3
 800dca2:	d103      	bne.n	800dcac <DrawWindow+0x258>
 800dca4:	6838      	ldr	r0, [r7, #0]
 800dca6:	f7ff fa7f 	bl	800d1a8 <Cursor_1>
 800dcaa:	e028      	b.n	800dcfe <DrawWindow+0x2aa>
 800dcac:	4b09      	ldr	r3, [pc, #36]	; (800dcd4 <DrawWindow+0x280>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	2b02      	cmp	r3, #2
 800dcb2:	d103      	bne.n	800dcbc <DrawWindow+0x268>
 800dcb4:	6838      	ldr	r0, [r7, #0]
 800dcb6:	f7ff faeb 	bl	800d290 <Cursor_2>
 800dcba:	e020      	b.n	800dcfe <DrawWindow+0x2aa>
 800dcbc:	4b05      	ldr	r3, [pc, #20]	; (800dcd4 <DrawWindow+0x280>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800dcc4:	d118      	bne.n	800dcf8 <DrawWindow+0x2a4>
 800dcc6:	6838      	ldr	r0, [r7, #0]
 800dcc8:	f7ff fae2 	bl	800d290 <Cursor_2>
 800dccc:	e017      	b.n	800dcfe <DrawWindow+0x2aa>
 800dcce:	bf00      	nop
 800dcd0:	20000a4c 	.word	0x20000a4c
 800dcd4:	20000c00 	.word	0x20000c00
 800dcd8:	20000c0c 	.word	0x20000c0c
 800dcdc:	20000bec 	.word	0x20000bec
 800dce0:	20000bfc 	.word	0x20000bfc
 800dce4:	20000a48 	.word	0x20000a48
 800dce8:	20000bf0 	.word	0x20000bf0
 800dcec:	20000a44 	.word	0x20000a44
 800dcf0:	20000bf4 	.word	0x20000bf4
 800dcf4:	20000a40 	.word	0x20000a40
 800dcf8:	6838      	ldr	r0, [r7, #0]
 800dcfa:	f7ff fb1d 	bl	800d338 <Cursor_3>
 800dcfe:	6838      	ldr	r0, [r7, #0]
 800dd00:	f7ff fb82 	bl	800d408 <Cursor_4>
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	334c      	adds	r3, #76	; 0x4c
 800dd08:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd0c:	461a      	mov	r2, r3
 800dd0e:	4b17      	ldr	r3, [pc, #92]	; (800dd6c <DrawWindow+0x318>)
 800dd10:	601a      	str	r2, [r3, #0]
 800dd12:	4b16      	ldr	r3, [pc, #88]	; (800dd6c <DrawWindow+0x318>)
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	f003 0301 	and.w	r3, r3, #1
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d00f      	beq.n	800dd3e <DrawWindow+0x2ea>
 800dd1e:	4b14      	ldr	r3, [pc, #80]	; (800dd70 <DrawWindow+0x31c>)
 800dd20:	681a      	ldr	r2, [r3, #0]
 800dd22:	4b14      	ldr	r3, [pc, #80]	; (800dd74 <DrawWindow+0x320>)
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	429a      	cmp	r2, r3
 800dd28:	d30b      	bcc.n	800dd42 <DrawWindow+0x2ee>
 800dd2a:	4b11      	ldr	r3, [pc, #68]	; (800dd70 <DrawWindow+0x31c>)
 800dd2c:	681a      	ldr	r2, [r3, #0]
 800dd2e:	4b12      	ldr	r3, [pc, #72]	; (800dd78 <DrawWindow+0x324>)
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	429a      	cmp	r2, r3
 800dd34:	d207      	bcs.n	800dd46 <DrawWindow+0x2f2>
 800dd36:	6838      	ldr	r0, [r7, #0]
 800dd38:	f7ff fd18 	bl	800d76c <Draw_Pop>
 800dd3c:	e004      	b.n	800dd48 <DrawWindow+0x2f4>
 800dd3e:	bf00      	nop
 800dd40:	e002      	b.n	800dd48 <DrawWindow+0x2f4>
 800dd42:	bf00      	nop
 800dd44:	e000      	b.n	800dd48 <DrawWindow+0x2f4>
 800dd46:	bf00      	nop
 800dd48:	6838      	ldr	r0, [r7, #0]
 800dd4a:	f7ff fcdd 	bl	800d708 <Send_LCD>
 800dd4e:	4b08      	ldr	r3, [pc, #32]	; (800dd70 <DrawWindow+0x31c>)
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800dd56:	d005      	beq.n	800dd64 <DrawWindow+0x310>
 800dd58:	4b05      	ldr	r3, [pc, #20]	; (800dd70 <DrawWindow+0x31c>)
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	3301      	adds	r3, #1
 800dd5e:	4a04      	ldr	r2, [pc, #16]	; (800dd70 <DrawWindow+0x31c>)
 800dd60:	6013      	str	r3, [r2, #0]
 800dd62:	e69c      	b.n	800da9e <DrawWindow+0x4a>
 800dd64:	bf00      	nop
 800dd66:	3708      	adds	r7, #8
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bd80      	pop	{r7, pc}
 800dd6c:	20000a48 	.word	0x20000a48
 800dd70:	20000c00 	.word	0x20000c00
 800dd74:	20000bec 	.word	0x20000bec
 800dd78:	20000bfc 	.word	0x20000bfc

0800dd7c <DispChar8x14>:
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b084      	sub	sp, #16
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	4603      	mov	r3, r0
 800dd84:	460a      	mov	r2, r1
 800dd86:	71fb      	strb	r3, [r7, #7]
 800dd88:	4613      	mov	r3, r2
 800dd8a:	71bb      	strb	r3, [r7, #6]
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	81fb      	strh	r3, [r7, #14]
 800dd90:	e06d      	b.n	800de6e <DispChar8x14+0xf2>
 800dd92:	79fb      	ldrb	r3, [r7, #7]
 800dd94:	f003 0310 	and.w	r3, r3, #16
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d00a      	beq.n	800ddb2 <DispChar8x14+0x36>
 800dd9c:	79bb      	ldrb	r3, [r7, #6]
 800dd9e:	3b40      	subs	r3, #64	; 0x40
 800dda0:	00da      	lsls	r2, r3, #3
 800dda2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dda6:	4413      	add	r3, r2
 800dda8:	4a35      	ldr	r2, [pc, #212]	; (800de80 <DispChar8x14+0x104>)
 800ddaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ddae:	817b      	strh	r3, [r7, #10]
 800ddb0:	e005      	b.n	800ddbe <DispChar8x14+0x42>
 800ddb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ddb6:	4a33      	ldr	r2, [pc, #204]	; (800de84 <DispChar8x14+0x108>)
 800ddb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ddbc:	817b      	strh	r3, [r7, #10]
 800ddbe:	79fb      	ldrb	r3, [r7, #7]
 800ddc0:	f003 0320 	and.w	r3, r3, #32
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d00c      	beq.n	800dde2 <DispChar8x14+0x66>
 800ddc8:	89fb      	ldrh	r3, [r7, #14]
 800ddca:	f003 0301 	and.w	r3, r3, #1
 800ddce:	b29b      	uxth	r3, r3
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d001      	beq.n	800ddd8 <DispChar8x14+0x5c>
 800ddd4:	4a2c      	ldr	r2, [pc, #176]	; (800de88 <DispChar8x14+0x10c>)
 800ddd6:	e001      	b.n	800dddc <DispChar8x14+0x60>
 800ddd8:	f245 5255 	movw	r2, #21845	; 0x5555
 800dddc:	897b      	ldrh	r3, [r7, #10]
 800ddde:	4013      	ands	r3, r2
 800dde0:	817b      	strh	r3, [r7, #10]
 800dde2:	4b2a      	ldr	r3, [pc, #168]	; (800de8c <DispChar8x14+0x110>)
 800dde4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dde8:	4a29      	ldr	r2, [pc, #164]	; (800de90 <DispChar8x14+0x114>)
 800ddea:	f9b2 2000 	ldrsh.w	r2, [r2]
 800ddee:	4611      	mov	r1, r2
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f004 fb5b 	bl	80124ac <LCD_Set_Posi>
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	81bb      	strh	r3, [r7, #12]
 800ddfa:	e027      	b.n	800de4c <DispChar8x14+0xd0>
 800ddfc:	897b      	ldrh	r3, [r7, #10]
 800ddfe:	f003 0304 	and.w	r3, r3, #4
 800de02:	2b00      	cmp	r3, #0
 800de04:	d00d      	beq.n	800de22 <DispChar8x14+0xa6>
 800de06:	79fb      	ldrb	r3, [r7, #7]
 800de08:	f003 0301 	and.w	r3, r3, #1
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d002      	beq.n	800de16 <DispChar8x14+0x9a>
 800de10:	4b20      	ldr	r3, [pc, #128]	; (800de94 <DispChar8x14+0x118>)
 800de12:	881b      	ldrh	r3, [r3, #0]
 800de14:	e001      	b.n	800de1a <DispChar8x14+0x9e>
 800de16:	4b20      	ldr	r3, [pc, #128]	; (800de98 <DispChar8x14+0x11c>)
 800de18:	881b      	ldrh	r3, [r3, #0]
 800de1a:	4618      	mov	r0, r3
 800de1c:	f004 fb94 	bl	8012548 <LCD_Set_Pixel>
 800de20:	e00c      	b.n	800de3c <DispChar8x14+0xc0>
 800de22:	79fb      	ldrb	r3, [r7, #7]
 800de24:	f003 0301 	and.w	r3, r3, #1
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d002      	beq.n	800de32 <DispChar8x14+0xb6>
 800de2c:	4b1a      	ldr	r3, [pc, #104]	; (800de98 <DispChar8x14+0x11c>)
 800de2e:	881b      	ldrh	r3, [r3, #0]
 800de30:	e001      	b.n	800de36 <DispChar8x14+0xba>
 800de32:	4b18      	ldr	r3, [pc, #96]	; (800de94 <DispChar8x14+0x118>)
 800de34:	881b      	ldrh	r3, [r3, #0]
 800de36:	4618      	mov	r0, r3
 800de38:	f004 fb86 	bl	8012548 <LCD_Set_Pixel>
 800de3c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800de40:	105b      	asrs	r3, r3, #1
 800de42:	817b      	strh	r3, [r7, #10]
 800de44:	89bb      	ldrh	r3, [r7, #12]
 800de46:	3301      	adds	r3, #1
 800de48:	b29b      	uxth	r3, r3
 800de4a:	81bb      	strh	r3, [r7, #12]
 800de4c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800de50:	2b0d      	cmp	r3, #13
 800de52:	ddd3      	ble.n	800ddfc <DispChar8x14+0x80>
 800de54:	4b0d      	ldr	r3, [pc, #52]	; (800de8c <DispChar8x14+0x110>)
 800de56:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de5a:	b29b      	uxth	r3, r3
 800de5c:	3301      	adds	r3, #1
 800de5e:	b29b      	uxth	r3, r3
 800de60:	b21a      	sxth	r2, r3
 800de62:	4b0a      	ldr	r3, [pc, #40]	; (800de8c <DispChar8x14+0x110>)
 800de64:	801a      	strh	r2, [r3, #0]
 800de66:	89fb      	ldrh	r3, [r7, #14]
 800de68:	3301      	adds	r3, #1
 800de6a:	b29b      	uxth	r3, r3
 800de6c:	81fb      	strh	r3, [r7, #14]
 800de6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800de72:	2b07      	cmp	r3, #7
 800de74:	dd8d      	ble.n	800dd92 <DispChar8x14+0x16>
 800de76:	bf00      	nop
 800de78:	bf00      	nop
 800de7a:	3710      	adds	r7, #16
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bd80      	pop	{r7, pc}
 800de80:	08001290 	.word	0x08001290
 800de84:	08000c90 	.word	0x08000c90
 800de88:	ffffaaaa 	.word	0xffffaaaa
 800de8c:	20000792 	.word	0x20000792
 800de90:	20000794 	.word	0x20000794
 800de94:	200015d6 	.word	0x200015d6
 800de98:	200015d4 	.word	0x200015d4

0800de9c <DispStr8x14>:
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b086      	sub	sp, #24
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	607b      	str	r3, [r7, #4]
 800dea4:	4603      	mov	r3, r0
 800dea6:	81fb      	strh	r3, [r7, #14]
 800dea8:	460b      	mov	r3, r1
 800deaa:	81bb      	strh	r3, [r7, #12]
 800deac:	4613      	mov	r3, r2
 800deae:	72fb      	strb	r3, [r7, #11]
 800deb0:	4a22      	ldr	r2, [pc, #136]	; (800df3c <DispStr8x14+0xa0>)
 800deb2:	89fb      	ldrh	r3, [r7, #14]
 800deb4:	8013      	strh	r3, [r2, #0]
 800deb6:	4a22      	ldr	r2, [pc, #136]	; (800df40 <DispStr8x14+0xa4>)
 800deb8:	89bb      	ldrh	r3, [r7, #12]
 800deba:	8013      	strh	r3, [r2, #0]
 800debc:	4b1f      	ldr	r3, [pc, #124]	; (800df3c <DispStr8x14+0xa0>)
 800debe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dec2:	4a1f      	ldr	r2, [pc, #124]	; (800df40 <DispStr8x14+0xa4>)
 800dec4:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dec8:	4611      	mov	r1, r2
 800deca:	4618      	mov	r0, r3
 800decc:	f004 faee 	bl	80124ac <LCD_Set_Posi>
 800ded0:	2300      	movs	r3, #0
 800ded2:	82fb      	strh	r3, [r7, #22]
 800ded4:	e012      	b.n	800defc <DispStr8x14+0x60>
 800ded6:	7afb      	ldrb	r3, [r7, #11]
 800ded8:	f003 0301 	and.w	r3, r3, #1
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d002      	beq.n	800dee6 <DispStr8x14+0x4a>
 800dee0:	4b18      	ldr	r3, [pc, #96]	; (800df44 <DispStr8x14+0xa8>)
 800dee2:	881b      	ldrh	r3, [r3, #0]
 800dee4:	e001      	b.n	800deea <DispStr8x14+0x4e>
 800dee6:	4b18      	ldr	r3, [pc, #96]	; (800df48 <DispStr8x14+0xac>)
 800dee8:	881b      	ldrh	r3, [r3, #0]
 800deea:	4618      	mov	r0, r3
 800deec:	f004 fb2c 	bl	8012548 <LCD_Set_Pixel>
 800def0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800def4:	b29b      	uxth	r3, r3
 800def6:	3301      	adds	r3, #1
 800def8:	b29b      	uxth	r3, r3
 800defa:	82fb      	strh	r3, [r7, #22]
 800defc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800df00:	2b0d      	cmp	r3, #13
 800df02:	dde8      	ble.n	800ded6 <DispStr8x14+0x3a>
 800df04:	4b0d      	ldr	r3, [pc, #52]	; (800df3c <DispStr8x14+0xa0>)
 800df06:	f9b3 3000 	ldrsh.w	r3, [r3]
 800df0a:	b29b      	uxth	r3, r3
 800df0c:	3301      	adds	r3, #1
 800df0e:	b29b      	uxth	r3, r3
 800df10:	b21a      	sxth	r2, r3
 800df12:	4b0a      	ldr	r3, [pc, #40]	; (800df3c <DispStr8x14+0xa0>)
 800df14:	801a      	strh	r2, [r3, #0]
 800df16:	e008      	b.n	800df2a <DispStr8x14+0x8e>
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	1c5a      	adds	r2, r3, #1
 800df1c:	607a      	str	r2, [r7, #4]
 800df1e:	781a      	ldrb	r2, [r3, #0]
 800df20:	7afb      	ldrb	r3, [r7, #11]
 800df22:	4611      	mov	r1, r2
 800df24:	4618      	mov	r0, r3
 800df26:	f7ff ff29 	bl	800dd7c <DispChar8x14>
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	781b      	ldrb	r3, [r3, #0]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d1f2      	bne.n	800df18 <DispStr8x14+0x7c>
 800df32:	bf00      	nop
 800df34:	bf00      	nop
 800df36:	3718      	adds	r7, #24
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd80      	pop	{r7, pc}
 800df3c:	20000792 	.word	0x20000792
 800df40:	20000794 	.word	0x20000794
 800df44:	200015d4 	.word	0x200015d4
 800df48:	200015d6 	.word	0x200015d6

0800df4c <SetColor>:
 800df4c:	b480      	push	{r7}
 800df4e:	b083      	sub	sp, #12
 800df50:	af00      	add	r7, sp, #0
 800df52:	4603      	mov	r3, r0
 800df54:	460a      	mov	r2, r1
 800df56:	80fb      	strh	r3, [r7, #6]
 800df58:	4613      	mov	r3, r2
 800df5a:	80bb      	strh	r3, [r7, #4]
 800df5c:	4a05      	ldr	r2, [pc, #20]	; (800df74 <SetColor+0x28>)
 800df5e:	88fb      	ldrh	r3, [r7, #6]
 800df60:	8013      	strh	r3, [r2, #0]
 800df62:	4a05      	ldr	r2, [pc, #20]	; (800df78 <SetColor+0x2c>)
 800df64:	88bb      	ldrh	r3, [r7, #4]
 800df66:	8013      	strh	r3, [r2, #0]
 800df68:	bf00      	nop
 800df6a:	370c      	adds	r7, #12
 800df6c:	46bd      	mov	sp, r7
 800df6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df72:	4770      	bx	lr
 800df74:	200015d6 	.word	0x200015d6
 800df78:	200015d4 	.word	0x200015d4

0800df7c <DispStr>:
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b086      	sub	sp, #24
 800df80:	af00      	add	r7, sp, #0
 800df82:	607b      	str	r3, [r7, #4]
 800df84:	4603      	mov	r3, r0
 800df86:	81fb      	strh	r3, [r7, #14]
 800df88:	460b      	mov	r3, r1
 800df8a:	81bb      	strh	r3, [r7, #12]
 800df8c:	4613      	mov	r3, r2
 800df8e:	72fb      	strb	r3, [r7, #11]
 800df90:	4a5e      	ldr	r2, [pc, #376]	; (800e10c <DispStr+0x190>)
 800df92:	89fb      	ldrh	r3, [r7, #14]
 800df94:	8013      	strh	r3, [r2, #0]
 800df96:	4a5e      	ldr	r2, [pc, #376]	; (800e110 <DispStr+0x194>)
 800df98:	89bb      	ldrh	r3, [r7, #12]
 800df9a:	8013      	strh	r3, [r2, #0]
 800df9c:	4b5b      	ldr	r3, [pc, #364]	; (800e10c <DispStr+0x190>)
 800df9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dfa2:	4a5b      	ldr	r2, [pc, #364]	; (800e110 <DispStr+0x194>)
 800dfa4:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dfa8:	4611      	mov	r1, r2
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f004 fa7e 	bl	80124ac <LCD_Set_Posi>
 800dfb0:	e0a1      	b.n	800e0f6 <DispStr+0x17a>
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	1c5a      	adds	r2, r3, #1
 800dfb6:	607a      	str	r2, [r7, #4]
 800dfb8:	781b      	ldrb	r3, [r3, #0]
 800dfba:	747b      	strb	r3, [r7, #17]
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	82fb      	strh	r3, [r7, #22]
 800dfc0:	e094      	b.n	800e0ec <DispStr+0x170>
 800dfc2:	7afb      	ldrb	r3, [r7, #11]
 800dfc4:	f003 0310 	and.w	r3, r3, #16
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d10e      	bne.n	800dfea <DispStr+0x6e>
 800dfcc:	7c7b      	ldrb	r3, [r7, #17]
 800dfce:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800dfd2:	4613      	mov	r3, r2
 800dfd4:	005b      	lsls	r3, r3, #1
 800dfd6:	4413      	add	r3, r2
 800dfd8:	005b      	lsls	r3, r3, #1
 800dfda:	461a      	mov	r2, r3
 800dfdc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dfe0:	4413      	add	r3, r2
 800dfe2:	4a4c      	ldr	r2, [pc, #304]	; (800e114 <DispStr+0x198>)
 800dfe4:	5cd3      	ldrb	r3, [r2, r3]
 800dfe6:	827b      	strh	r3, [r7, #18]
 800dfe8:	e00d      	b.n	800e006 <DispStr+0x8a>
 800dfea:	7c7b      	ldrb	r3, [r7, #17]
 800dfec:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800dff0:	4613      	mov	r3, r2
 800dff2:	005b      	lsls	r3, r3, #1
 800dff4:	4413      	add	r3, r2
 800dff6:	005b      	lsls	r3, r3, #1
 800dff8:	461a      	mov	r2, r3
 800dffa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dffe:	4413      	add	r3, r2
 800e000:	4a45      	ldr	r2, [pc, #276]	; (800e118 <DispStr+0x19c>)
 800e002:	5cd3      	ldrb	r3, [r2, r3]
 800e004:	827b      	strh	r3, [r7, #18]
 800e006:	7afb      	ldrb	r3, [r7, #11]
 800e008:	f003 0320 	and.w	r3, r3, #32
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d00c      	beq.n	800e02a <DispStr+0xae>
 800e010:	8afb      	ldrh	r3, [r7, #22]
 800e012:	f003 0301 	and.w	r3, r3, #1
 800e016:	b29b      	uxth	r3, r3
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d001      	beq.n	800e020 <DispStr+0xa4>
 800e01c:	4a3f      	ldr	r2, [pc, #252]	; (800e11c <DispStr+0x1a0>)
 800e01e:	e001      	b.n	800e024 <DispStr+0xa8>
 800e020:	f245 5255 	movw	r2, #21845	; 0x5555
 800e024:	8a7b      	ldrh	r3, [r7, #18]
 800e026:	4013      	ands	r3, r2
 800e028:	827b      	strh	r3, [r7, #18]
 800e02a:	4b38      	ldr	r3, [pc, #224]	; (800e10c <DispStr+0x190>)
 800e02c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e030:	4a37      	ldr	r2, [pc, #220]	; (800e110 <DispStr+0x194>)
 800e032:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e036:	4611      	mov	r1, r2
 800e038:	4618      	mov	r0, r3
 800e03a:	f004 fa37 	bl	80124ac <LCD_Set_Posi>
 800e03e:	7afb      	ldrb	r3, [r7, #11]
 800e040:	f003 0301 	and.w	r3, r3, #1
 800e044:	2b00      	cmp	r3, #0
 800e046:	d002      	beq.n	800e04e <DispStr+0xd2>
 800e048:	4b35      	ldr	r3, [pc, #212]	; (800e120 <DispStr+0x1a4>)
 800e04a:	881b      	ldrh	r3, [r3, #0]
 800e04c:	e001      	b.n	800e052 <DispStr+0xd6>
 800e04e:	4b35      	ldr	r3, [pc, #212]	; (800e124 <DispStr+0x1a8>)
 800e050:	881b      	ldrh	r3, [r3, #0]
 800e052:	4618      	mov	r0, r3
 800e054:	f004 fa78 	bl	8012548 <LCD_Set_Pixel>
 800e058:	4b2c      	ldr	r3, [pc, #176]	; (800e10c <DispStr+0x190>)
 800e05a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e05e:	4b2c      	ldr	r3, [pc, #176]	; (800e110 <DispStr+0x194>)
 800e060:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e064:	b29b      	uxth	r3, r3
 800e066:	3301      	adds	r3, #1
 800e068:	b29b      	uxth	r3, r3
 800e06a:	b21b      	sxth	r3, r3
 800e06c:	4619      	mov	r1, r3
 800e06e:	4610      	mov	r0, r2
 800e070:	f004 fa1c 	bl	80124ac <LCD_Set_Posi>
 800e074:	2300      	movs	r3, #0
 800e076:	82bb      	strh	r3, [r7, #20]
 800e078:	e027      	b.n	800e0ca <DispStr+0x14e>
 800e07a:	8a7b      	ldrh	r3, [r7, #18]
 800e07c:	f003 0301 	and.w	r3, r3, #1
 800e080:	2b00      	cmp	r3, #0
 800e082:	d00d      	beq.n	800e0a0 <DispStr+0x124>
 800e084:	7afb      	ldrb	r3, [r7, #11]
 800e086:	f003 0301 	and.w	r3, r3, #1
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d002      	beq.n	800e094 <DispStr+0x118>
 800e08e:	4b25      	ldr	r3, [pc, #148]	; (800e124 <DispStr+0x1a8>)
 800e090:	881b      	ldrh	r3, [r3, #0]
 800e092:	e001      	b.n	800e098 <DispStr+0x11c>
 800e094:	4b22      	ldr	r3, [pc, #136]	; (800e120 <DispStr+0x1a4>)
 800e096:	881b      	ldrh	r3, [r3, #0]
 800e098:	4618      	mov	r0, r3
 800e09a:	f004 fa55 	bl	8012548 <LCD_Set_Pixel>
 800e09e:	e00c      	b.n	800e0ba <DispStr+0x13e>
 800e0a0:	7afb      	ldrb	r3, [r7, #11]
 800e0a2:	f003 0301 	and.w	r3, r3, #1
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d002      	beq.n	800e0b0 <DispStr+0x134>
 800e0aa:	4b1d      	ldr	r3, [pc, #116]	; (800e120 <DispStr+0x1a4>)
 800e0ac:	881b      	ldrh	r3, [r3, #0]
 800e0ae:	e001      	b.n	800e0b4 <DispStr+0x138>
 800e0b0:	4b1c      	ldr	r3, [pc, #112]	; (800e124 <DispStr+0x1a8>)
 800e0b2:	881b      	ldrh	r3, [r3, #0]
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	f004 fa47 	bl	8012548 <LCD_Set_Pixel>
 800e0ba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e0be:	105b      	asrs	r3, r3, #1
 800e0c0:	827b      	strh	r3, [r7, #18]
 800e0c2:	8abb      	ldrh	r3, [r7, #20]
 800e0c4:	3301      	adds	r3, #1
 800e0c6:	b29b      	uxth	r3, r3
 800e0c8:	82bb      	strh	r3, [r7, #20]
 800e0ca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e0ce:	2b09      	cmp	r3, #9
 800e0d0:	ddd3      	ble.n	800e07a <DispStr+0xfe>
 800e0d2:	4b0e      	ldr	r3, [pc, #56]	; (800e10c <DispStr+0x190>)
 800e0d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0d8:	b29b      	uxth	r3, r3
 800e0da:	3301      	adds	r3, #1
 800e0dc:	b29b      	uxth	r3, r3
 800e0de:	b21a      	sxth	r2, r3
 800e0e0:	4b0a      	ldr	r3, [pc, #40]	; (800e10c <DispStr+0x190>)
 800e0e2:	801a      	strh	r2, [r3, #0]
 800e0e4:	8afb      	ldrh	r3, [r7, #22]
 800e0e6:	3301      	adds	r3, #1
 800e0e8:	b29b      	uxth	r3, r3
 800e0ea:	82fb      	strh	r3, [r7, #22]
 800e0ec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e0f0:	2b05      	cmp	r3, #5
 800e0f2:	f77f af66 	ble.w	800dfc2 <DispStr+0x46>
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	781b      	ldrb	r3, [r3, #0]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	f47f af59 	bne.w	800dfb2 <DispStr+0x36>
 800e100:	bf00      	nop
 800e102:	bf00      	nop
 800e104:	3718      	adds	r7, #24
 800e106:	46bd      	mov	sp, r7
 800e108:	bd80      	pop	{r7, pc}
 800e10a:	bf00      	nop
 800e10c:	20000792 	.word	0x20000792
 800e110:	20000794 	.word	0x20000794
 800e114:	080016c4 	.word	0x080016c4
 800e118:	08001490 	.word	0x08001490
 800e11c:	ffffaaaa 	.word	0xffffaaaa
 800e120:	200015d4 	.word	0x200015d4
 800e124:	200015d6 	.word	0x200015d6

0800e128 <Draw_Circle_D>:
 800e128:	b590      	push	{r4, r7, lr}
 800e12a:	b085      	sub	sp, #20
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	4604      	mov	r4, r0
 800e130:	4608      	mov	r0, r1
 800e132:	4611      	mov	r1, r2
 800e134:	461a      	mov	r2, r3
 800e136:	4623      	mov	r3, r4
 800e138:	71fb      	strb	r3, [r7, #7]
 800e13a:	4603      	mov	r3, r0
 800e13c:	80bb      	strh	r3, [r7, #4]
 800e13e:	460b      	mov	r3, r1
 800e140:	807b      	strh	r3, [r7, #2]
 800e142:	4613      	mov	r3, r2
 800e144:	803b      	strh	r3, [r7, #0]
 800e146:	8c3b      	ldrh	r3, [r7, #32]
 800e148:	005b      	lsls	r3, r3, #1
 800e14a:	b29a      	uxth	r2, r3
 800e14c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e14e:	4413      	add	r3, r2
 800e150:	b29b      	uxth	r3, r3
 800e152:	3305      	adds	r3, #5
 800e154:	b29b      	uxth	r3, r3
 800e156:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e158:	88ba      	ldrh	r2, [r7, #4]
 800e15a:	8c3b      	ldrh	r3, [r7, #32]
 800e15c:	1ad3      	subs	r3, r2, r3
 800e15e:	b29b      	uxth	r3, r3
 800e160:	80bb      	strh	r3, [r7, #4]
 800e162:	88bb      	ldrh	r3, [r7, #4]
 800e164:	817b      	strh	r3, [r7, #10]
 800e166:	887b      	ldrh	r3, [r7, #2]
 800e168:	3302      	adds	r3, #2
 800e16a:	b29b      	uxth	r3, r3
 800e16c:	813b      	strh	r3, [r7, #8]
 800e16e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e172:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e176:	4611      	mov	r1, r2
 800e178:	4618      	mov	r0, r3
 800e17a:	f004 f997 	bl	80124ac <LCD_Set_Posi>
 800e17e:	2300      	movs	r3, #0
 800e180:	81bb      	strh	r3, [r7, #12]
 800e182:	e012      	b.n	800e1aa <Draw_Circle_D+0x82>
 800e184:	79fb      	ldrb	r3, [r7, #7]
 800e186:	f003 0301 	and.w	r3, r3, #1
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d002      	beq.n	800e194 <Draw_Circle_D+0x6c>
 800e18e:	4bad      	ldr	r3, [pc, #692]	; (800e444 <Draw_Circle_D+0x31c>)
 800e190:	881b      	ldrh	r3, [r3, #0]
 800e192:	e001      	b.n	800e198 <Draw_Circle_D+0x70>
 800e194:	4bac      	ldr	r3, [pc, #688]	; (800e448 <Draw_Circle_D+0x320>)
 800e196:	881b      	ldrh	r3, [r3, #0]
 800e198:	4618      	mov	r0, r3
 800e19a:	f004 f9d5 	bl	8012548 <LCD_Set_Pixel>
 800e19e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e1a2:	b29b      	uxth	r3, r3
 800e1a4:	3301      	adds	r3, #1
 800e1a6:	b29b      	uxth	r3, r3
 800e1a8:	81bb      	strh	r3, [r7, #12]
 800e1aa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e1ae:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e1b2:	3b04      	subs	r3, #4
 800e1b4:	429a      	cmp	r2, r3
 800e1b6:	dbe5      	blt.n	800e184 <Draw_Circle_D+0x5c>
 800e1b8:	88ba      	ldrh	r2, [r7, #4]
 800e1ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1bc:	4413      	add	r3, r2
 800e1be:	b29b      	uxth	r3, r3
 800e1c0:	817b      	strh	r3, [r7, #10]
 800e1c2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e1c6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e1ca:	4611      	mov	r1, r2
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	f004 f96d 	bl	80124ac <LCD_Set_Posi>
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	81bb      	strh	r3, [r7, #12]
 800e1d6:	e012      	b.n	800e1fe <Draw_Circle_D+0xd6>
 800e1d8:	79fb      	ldrb	r3, [r7, #7]
 800e1da:	f003 0301 	and.w	r3, r3, #1
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d002      	beq.n	800e1e8 <Draw_Circle_D+0xc0>
 800e1e2:	4b98      	ldr	r3, [pc, #608]	; (800e444 <Draw_Circle_D+0x31c>)
 800e1e4:	881b      	ldrh	r3, [r3, #0]
 800e1e6:	e001      	b.n	800e1ec <Draw_Circle_D+0xc4>
 800e1e8:	4b97      	ldr	r3, [pc, #604]	; (800e448 <Draw_Circle_D+0x320>)
 800e1ea:	881b      	ldrh	r3, [r3, #0]
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	f004 f9ab 	bl	8012548 <LCD_Set_Pixel>
 800e1f2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e1f6:	b29b      	uxth	r3, r3
 800e1f8:	3301      	adds	r3, #1
 800e1fa:	b29b      	uxth	r3, r3
 800e1fc:	81bb      	strh	r3, [r7, #12]
 800e1fe:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e202:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e206:	3b04      	subs	r3, #4
 800e208:	429a      	cmp	r2, r3
 800e20a:	dbe5      	blt.n	800e1d8 <Draw_Circle_D+0xb0>
 800e20c:	88bb      	ldrh	r3, [r7, #4]
 800e20e:	3301      	adds	r3, #1
 800e210:	b29b      	uxth	r3, r3
 800e212:	817b      	strh	r3, [r7, #10]
 800e214:	887b      	ldrh	r3, [r7, #2]
 800e216:	3301      	adds	r3, #1
 800e218:	b29b      	uxth	r3, r3
 800e21a:	813b      	strh	r3, [r7, #8]
 800e21c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e220:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e224:	4611      	mov	r1, r2
 800e226:	4618      	mov	r0, r3
 800e228:	f004 f940 	bl	80124ac <LCD_Set_Posi>
 800e22c:	2300      	movs	r3, #0
 800e22e:	81bb      	strh	r3, [r7, #12]
 800e230:	e012      	b.n	800e258 <Draw_Circle_D+0x130>
 800e232:	79fb      	ldrb	r3, [r7, #7]
 800e234:	f003 0301 	and.w	r3, r3, #1
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d002      	beq.n	800e242 <Draw_Circle_D+0x11a>
 800e23c:	4b81      	ldr	r3, [pc, #516]	; (800e444 <Draw_Circle_D+0x31c>)
 800e23e:	881b      	ldrh	r3, [r3, #0]
 800e240:	e001      	b.n	800e246 <Draw_Circle_D+0x11e>
 800e242:	4b81      	ldr	r3, [pc, #516]	; (800e448 <Draw_Circle_D+0x320>)
 800e244:	881b      	ldrh	r3, [r3, #0]
 800e246:	4618      	mov	r0, r3
 800e248:	f004 f97e 	bl	8012548 <LCD_Set_Pixel>
 800e24c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e250:	b29b      	uxth	r3, r3
 800e252:	3301      	adds	r3, #1
 800e254:	b29b      	uxth	r3, r3
 800e256:	81bb      	strh	r3, [r7, #12]
 800e258:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e25c:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e260:	3b02      	subs	r3, #2
 800e262:	429a      	cmp	r2, r3
 800e264:	dbe5      	blt.n	800e232 <Draw_Circle_D+0x10a>
 800e266:	88ba      	ldrh	r2, [r7, #4]
 800e268:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e26a:	4413      	add	r3, r2
 800e26c:	b29b      	uxth	r3, r3
 800e26e:	3b01      	subs	r3, #1
 800e270:	b29b      	uxth	r3, r3
 800e272:	817b      	strh	r3, [r7, #10]
 800e274:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e278:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e27c:	4611      	mov	r1, r2
 800e27e:	4618      	mov	r0, r3
 800e280:	f004 f914 	bl	80124ac <LCD_Set_Posi>
 800e284:	2300      	movs	r3, #0
 800e286:	81bb      	strh	r3, [r7, #12]
 800e288:	e012      	b.n	800e2b0 <Draw_Circle_D+0x188>
 800e28a:	79fb      	ldrb	r3, [r7, #7]
 800e28c:	f003 0301 	and.w	r3, r3, #1
 800e290:	2b00      	cmp	r3, #0
 800e292:	d002      	beq.n	800e29a <Draw_Circle_D+0x172>
 800e294:	4b6b      	ldr	r3, [pc, #428]	; (800e444 <Draw_Circle_D+0x31c>)
 800e296:	881b      	ldrh	r3, [r3, #0]
 800e298:	e001      	b.n	800e29e <Draw_Circle_D+0x176>
 800e29a:	4b6b      	ldr	r3, [pc, #428]	; (800e448 <Draw_Circle_D+0x320>)
 800e29c:	881b      	ldrh	r3, [r3, #0]
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f004 f952 	bl	8012548 <LCD_Set_Pixel>
 800e2a4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e2a8:	b29b      	uxth	r3, r3
 800e2aa:	3301      	adds	r3, #1
 800e2ac:	b29b      	uxth	r3, r3
 800e2ae:	81bb      	strh	r3, [r7, #12]
 800e2b0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e2b4:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e2b8:	3b02      	subs	r3, #2
 800e2ba:	429a      	cmp	r2, r3
 800e2bc:	dbe5      	blt.n	800e28a <Draw_Circle_D+0x162>
 800e2be:	88bb      	ldrh	r3, [r7, #4]
 800e2c0:	3302      	adds	r3, #2
 800e2c2:	b29b      	uxth	r3, r3
 800e2c4:	817b      	strh	r3, [r7, #10]
 800e2c6:	887b      	ldrh	r3, [r7, #2]
 800e2c8:	813b      	strh	r3, [r7, #8]
 800e2ca:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e2ce:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e2d2:	4611      	mov	r1, r2
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	f004 f8e9 	bl	80124ac <LCD_Set_Posi>
 800e2da:	2300      	movs	r3, #0
 800e2dc:	81bb      	strh	r3, [r7, #12]
 800e2de:	e012      	b.n	800e306 <Draw_Circle_D+0x1de>
 800e2e0:	79fb      	ldrb	r3, [r7, #7]
 800e2e2:	f003 0301 	and.w	r3, r3, #1
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d002      	beq.n	800e2f0 <Draw_Circle_D+0x1c8>
 800e2ea:	4b56      	ldr	r3, [pc, #344]	; (800e444 <Draw_Circle_D+0x31c>)
 800e2ec:	881b      	ldrh	r3, [r3, #0]
 800e2ee:	e001      	b.n	800e2f4 <Draw_Circle_D+0x1cc>
 800e2f0:	4b55      	ldr	r3, [pc, #340]	; (800e448 <Draw_Circle_D+0x320>)
 800e2f2:	881b      	ldrh	r3, [r3, #0]
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f004 f927 	bl	8012548 <LCD_Set_Pixel>
 800e2fa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e2fe:	b29b      	uxth	r3, r3
 800e300:	3301      	adds	r3, #1
 800e302:	b29b      	uxth	r3, r3
 800e304:	81bb      	strh	r3, [r7, #12]
 800e306:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e30a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e30e:	429a      	cmp	r2, r3
 800e310:	dbe6      	blt.n	800e2e0 <Draw_Circle_D+0x1b8>
 800e312:	88ba      	ldrh	r2, [r7, #4]
 800e314:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e316:	4413      	add	r3, r2
 800e318:	b29b      	uxth	r3, r3
 800e31a:	3b02      	subs	r3, #2
 800e31c:	b29b      	uxth	r3, r3
 800e31e:	817b      	strh	r3, [r7, #10]
 800e320:	887b      	ldrh	r3, [r7, #2]
 800e322:	813b      	strh	r3, [r7, #8]
 800e324:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e328:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e32c:	4611      	mov	r1, r2
 800e32e:	4618      	mov	r0, r3
 800e330:	f004 f8bc 	bl	80124ac <LCD_Set_Posi>
 800e334:	2300      	movs	r3, #0
 800e336:	81bb      	strh	r3, [r7, #12]
 800e338:	e012      	b.n	800e360 <Draw_Circle_D+0x238>
 800e33a:	79fb      	ldrb	r3, [r7, #7]
 800e33c:	f003 0301 	and.w	r3, r3, #1
 800e340:	2b00      	cmp	r3, #0
 800e342:	d002      	beq.n	800e34a <Draw_Circle_D+0x222>
 800e344:	4b3f      	ldr	r3, [pc, #252]	; (800e444 <Draw_Circle_D+0x31c>)
 800e346:	881b      	ldrh	r3, [r3, #0]
 800e348:	e001      	b.n	800e34e <Draw_Circle_D+0x226>
 800e34a:	4b3f      	ldr	r3, [pc, #252]	; (800e448 <Draw_Circle_D+0x320>)
 800e34c:	881b      	ldrh	r3, [r3, #0]
 800e34e:	4618      	mov	r0, r3
 800e350:	f004 f8fa 	bl	8012548 <LCD_Set_Pixel>
 800e354:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e358:	b29b      	uxth	r3, r3
 800e35a:	3301      	adds	r3, #1
 800e35c:	b29b      	uxth	r3, r3
 800e35e:	81bb      	strh	r3, [r7, #12]
 800e360:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e364:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e368:	429a      	cmp	r2, r3
 800e36a:	dbe6      	blt.n	800e33a <Draw_Circle_D+0x212>
 800e36c:	887b      	ldrh	r3, [r7, #2]
 800e36e:	813b      	strh	r3, [r7, #8]
 800e370:	2300      	movs	r3, #0
 800e372:	81fb      	strh	r3, [r7, #14]
 800e374:	e05a      	b.n	800e42c <Draw_Circle_D+0x304>
 800e376:	88ba      	ldrh	r2, [r7, #4]
 800e378:	89fb      	ldrh	r3, [r7, #14]
 800e37a:	4413      	add	r3, r2
 800e37c:	b29b      	uxth	r3, r3
 800e37e:	3303      	adds	r3, #3
 800e380:	b29b      	uxth	r3, r3
 800e382:	b21b      	sxth	r3, r3
 800e384:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e388:	4611      	mov	r1, r2
 800e38a:	4618      	mov	r0, r3
 800e38c:	f004 f88e 	bl	80124ac <LCD_Set_Posi>
 800e390:	2300      	movs	r3, #0
 800e392:	81bb      	strh	r3, [r7, #12]
 800e394:	e012      	b.n	800e3bc <Draw_Circle_D+0x294>
 800e396:	79fb      	ldrb	r3, [r7, #7]
 800e398:	f003 0301 	and.w	r3, r3, #1
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d002      	beq.n	800e3a6 <Draw_Circle_D+0x27e>
 800e3a0:	4b28      	ldr	r3, [pc, #160]	; (800e444 <Draw_Circle_D+0x31c>)
 800e3a2:	881b      	ldrh	r3, [r3, #0]
 800e3a4:	e001      	b.n	800e3aa <Draw_Circle_D+0x282>
 800e3a6:	4b28      	ldr	r3, [pc, #160]	; (800e448 <Draw_Circle_D+0x320>)
 800e3a8:	881b      	ldrh	r3, [r3, #0]
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	f004 f8cc 	bl	8012548 <LCD_Set_Pixel>
 800e3b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e3b4:	b29b      	uxth	r3, r3
 800e3b6:	3301      	adds	r3, #1
 800e3b8:	b29b      	uxth	r3, r3
 800e3ba:	81bb      	strh	r3, [r7, #12]
 800e3bc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e3c0:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	dbe6      	blt.n	800e396 <Draw_Circle_D+0x26e>
 800e3c8:	88ba      	ldrh	r2, [r7, #4]
 800e3ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e3cc:	4413      	add	r3, r2
 800e3ce:	b29a      	uxth	r2, r3
 800e3d0:	89fb      	ldrh	r3, [r7, #14]
 800e3d2:	1ad3      	subs	r3, r2, r3
 800e3d4:	b29b      	uxth	r3, r3
 800e3d6:	3b03      	subs	r3, #3
 800e3d8:	b29b      	uxth	r3, r3
 800e3da:	b21b      	sxth	r3, r3
 800e3dc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e3e0:	4611      	mov	r1, r2
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f004 f862 	bl	80124ac <LCD_Set_Posi>
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	81bb      	strh	r3, [r7, #12]
 800e3ec:	e012      	b.n	800e414 <Draw_Circle_D+0x2ec>
 800e3ee:	79fb      	ldrb	r3, [r7, #7]
 800e3f0:	f003 0301 	and.w	r3, r3, #1
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d002      	beq.n	800e3fe <Draw_Circle_D+0x2d6>
 800e3f8:	4b12      	ldr	r3, [pc, #72]	; (800e444 <Draw_Circle_D+0x31c>)
 800e3fa:	881b      	ldrh	r3, [r3, #0]
 800e3fc:	e001      	b.n	800e402 <Draw_Circle_D+0x2da>
 800e3fe:	4b12      	ldr	r3, [pc, #72]	; (800e448 <Draw_Circle_D+0x320>)
 800e400:	881b      	ldrh	r3, [r3, #0]
 800e402:	4618      	mov	r0, r3
 800e404:	f004 f8a0 	bl	8012548 <LCD_Set_Pixel>
 800e408:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e40c:	b29b      	uxth	r3, r3
 800e40e:	3301      	adds	r3, #1
 800e410:	b29b      	uxth	r3, r3
 800e412:	81bb      	strh	r3, [r7, #12]
 800e414:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e418:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e41c:	429a      	cmp	r2, r3
 800e41e:	dbe6      	blt.n	800e3ee <Draw_Circle_D+0x2c6>
 800e420:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e424:	b29b      	uxth	r3, r3
 800e426:	3301      	adds	r3, #1
 800e428:	b29b      	uxth	r3, r3
 800e42a:	81fb      	strh	r3, [r7, #14]
 800e42c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800e430:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e434:	429a      	cmp	r2, r3
 800e436:	db9e      	blt.n	800e376 <Draw_Circle_D+0x24e>
 800e438:	bf00      	nop
 800e43a:	bf00      	nop
 800e43c:	3714      	adds	r7, #20
 800e43e:	46bd      	mov	sp, r7
 800e440:	bd90      	pop	{r4, r7, pc}
 800e442:	bf00      	nop
 800e444:	200015d4 	.word	0x200015d4
 800e448:	200015d6 	.word	0x200015d6

0800e44c <DispStr10x14>:
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b084      	sub	sp, #16
 800e450:	af00      	add	r7, sp, #0
 800e452:	607b      	str	r3, [r7, #4]
 800e454:	4603      	mov	r3, r0
 800e456:	81fb      	strh	r3, [r7, #14]
 800e458:	460b      	mov	r3, r1
 800e45a:	81bb      	strh	r3, [r7, #12]
 800e45c:	4613      	mov	r3, r2
 800e45e:	72fb      	strb	r3, [r7, #11]
 800e460:	4a0c      	ldr	r2, [pc, #48]	; (800e494 <DispStr10x14+0x48>)
 800e462:	89fb      	ldrh	r3, [r7, #14]
 800e464:	8013      	strh	r3, [r2, #0]
 800e466:	4a0c      	ldr	r2, [pc, #48]	; (800e498 <DispStr10x14+0x4c>)
 800e468:	89bb      	ldrh	r3, [r7, #12]
 800e46a:	8013      	strh	r3, [r2, #0]
 800e46c:	e008      	b.n	800e480 <DispStr10x14+0x34>
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	1c5a      	adds	r2, r3, #1
 800e472:	607a      	str	r2, [r7, #4]
 800e474:	781a      	ldrb	r2, [r3, #0]
 800e476:	7afb      	ldrb	r3, [r7, #11]
 800e478:	4611      	mov	r1, r2
 800e47a:	4618      	mov	r0, r3
 800e47c:	f000 f80e 	bl	800e49c <DispChar10x14>
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	781b      	ldrb	r3, [r3, #0]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d1f2      	bne.n	800e46e <DispStr10x14+0x22>
 800e488:	bf00      	nop
 800e48a:	bf00      	nop
 800e48c:	3710      	adds	r7, #16
 800e48e:	46bd      	mov	sp, r7
 800e490:	bd80      	pop	{r7, pc}
 800e492:	bf00      	nop
 800e494:	20000792 	.word	0x20000792
 800e498:	20000794 	.word	0x20000794

0800e49c <DispChar10x14>:
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b084      	sub	sp, #16
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	460a      	mov	r2, r1
 800e4a6:	71fb      	strb	r3, [r7, #7]
 800e4a8:	4613      	mov	r3, r2
 800e4aa:	71bb      	strb	r3, [r7, #6]
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	81fb      	strh	r3, [r7, #14]
 800e4b0:	e0fe      	b.n	800e6b0 <DispChar10x14+0x214>
 800e4b2:	79fb      	ldrb	r3, [r7, #7]
 800e4b4:	f003 0310 	and.w	r3, r3, #16
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d00f      	beq.n	800e4dc <DispChar10x14+0x40>
 800e4bc:	79bb      	ldrb	r3, [r7, #6]
 800e4be:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 800e4c2:	4613      	mov	r3, r2
 800e4c4:	009b      	lsls	r3, r3, #2
 800e4c6:	4413      	add	r3, r2
 800e4c8:	005b      	lsls	r3, r3, #1
 800e4ca:	461a      	mov	r2, r3
 800e4cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e4d0:	4413      	add	r3, r2
 800e4d2:	4a7c      	ldr	r2, [pc, #496]	; (800e6c4 <DispChar10x14+0x228>)
 800e4d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e4d8:	817b      	strh	r3, [r7, #10]
 800e4da:	e00e      	b.n	800e4fa <DispChar10x14+0x5e>
 800e4dc:	79bb      	ldrb	r3, [r7, #6]
 800e4de:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800e4e2:	4613      	mov	r3, r2
 800e4e4:	009b      	lsls	r3, r3, #2
 800e4e6:	4413      	add	r3, r2
 800e4e8:	005b      	lsls	r3, r3, #1
 800e4ea:	461a      	mov	r2, r3
 800e4ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e4f0:	4413      	add	r3, r2
 800e4f2:	4a75      	ldr	r2, [pc, #468]	; (800e6c8 <DispChar10x14+0x22c>)
 800e4f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e4f8:	817b      	strh	r3, [r7, #10]
 800e4fa:	79fb      	ldrb	r3, [r7, #7]
 800e4fc:	f003 0320 	and.w	r3, r3, #32
 800e500:	2b00      	cmp	r3, #0
 800e502:	d00c      	beq.n	800e51e <DispChar10x14+0x82>
 800e504:	89fb      	ldrh	r3, [r7, #14]
 800e506:	f003 0301 	and.w	r3, r3, #1
 800e50a:	b29b      	uxth	r3, r3
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d001      	beq.n	800e514 <DispChar10x14+0x78>
 800e510:	4a6e      	ldr	r2, [pc, #440]	; (800e6cc <DispChar10x14+0x230>)
 800e512:	e001      	b.n	800e518 <DispChar10x14+0x7c>
 800e514:	f245 5255 	movw	r2, #21845	; 0x5555
 800e518:	897b      	ldrh	r3, [r7, #10]
 800e51a:	4013      	ands	r3, r2
 800e51c:	817b      	strh	r3, [r7, #10]
 800e51e:	4b6c      	ldr	r3, [pc, #432]	; (800e6d0 <DispChar10x14+0x234>)
 800e520:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e524:	4a6b      	ldr	r2, [pc, #428]	; (800e6d4 <DispChar10x14+0x238>)
 800e526:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e52a:	4611      	mov	r1, r2
 800e52c:	4618      	mov	r0, r3
 800e52e:	f003 ffbd 	bl	80124ac <LCD_Set_Posi>
 800e532:	79fb      	ldrb	r3, [r7, #7]
 800e534:	f003 0310 	and.w	r3, r3, #16
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d038      	beq.n	800e5ae <DispChar10x14+0x112>
 800e53c:	79bb      	ldrb	r3, [r7, #6]
 800e53e:	2b43      	cmp	r3, #67	; 0x43
 800e540:	d005      	beq.n	800e54e <DispChar10x14+0xb2>
 800e542:	79bb      	ldrb	r3, [r7, #6]
 800e544:	2b44      	cmp	r3, #68	; 0x44
 800e546:	d002      	beq.n	800e54e <DispChar10x14+0xb2>
 800e548:	79bb      	ldrb	r3, [r7, #6]
 800e54a:	2b45      	cmp	r3, #69	; 0x45
 800e54c:	d12f      	bne.n	800e5ae <DispChar10x14+0x112>
 800e54e:	2300      	movs	r3, #0
 800e550:	81bb      	strh	r3, [r7, #12]
 800e552:	e027      	b.n	800e5a4 <DispChar10x14+0x108>
 800e554:	897b      	ldrh	r3, [r7, #10]
 800e556:	f003 0304 	and.w	r3, r3, #4
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d00d      	beq.n	800e57a <DispChar10x14+0xde>
 800e55e:	79fb      	ldrb	r3, [r7, #7]
 800e560:	f003 0301 	and.w	r3, r3, #1
 800e564:	2b00      	cmp	r3, #0
 800e566:	d002      	beq.n	800e56e <DispChar10x14+0xd2>
 800e568:	4b5b      	ldr	r3, [pc, #364]	; (800e6d8 <DispChar10x14+0x23c>)
 800e56a:	881b      	ldrh	r3, [r3, #0]
 800e56c:	e001      	b.n	800e572 <DispChar10x14+0xd6>
 800e56e:	4b5b      	ldr	r3, [pc, #364]	; (800e6dc <DispChar10x14+0x240>)
 800e570:	881b      	ldrh	r3, [r3, #0]
 800e572:	4618      	mov	r0, r3
 800e574:	f003 ffe8 	bl	8012548 <LCD_Set_Pixel>
 800e578:	e00c      	b.n	800e594 <DispChar10x14+0xf8>
 800e57a:	79fb      	ldrb	r3, [r7, #7]
 800e57c:	f003 0301 	and.w	r3, r3, #1
 800e580:	2b00      	cmp	r3, #0
 800e582:	d002      	beq.n	800e58a <DispChar10x14+0xee>
 800e584:	4b55      	ldr	r3, [pc, #340]	; (800e6dc <DispChar10x14+0x240>)
 800e586:	881b      	ldrh	r3, [r3, #0]
 800e588:	e001      	b.n	800e58e <DispChar10x14+0xf2>
 800e58a:	4b53      	ldr	r3, [pc, #332]	; (800e6d8 <DispChar10x14+0x23c>)
 800e58c:	881b      	ldrh	r3, [r3, #0]
 800e58e:	4618      	mov	r0, r3
 800e590:	f003 ffda 	bl	8012548 <LCD_Set_Pixel>
 800e594:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e598:	105b      	asrs	r3, r3, #1
 800e59a:	817b      	strh	r3, [r7, #10]
 800e59c:	89bb      	ldrh	r3, [r7, #12]
 800e59e:	3301      	adds	r3, #1
 800e5a0:	b29b      	uxth	r3, r3
 800e5a2:	81bb      	strh	r3, [r7, #12]
 800e5a4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e5a8:	2b0a      	cmp	r3, #10
 800e5aa:	ddd3      	ble.n	800e554 <DispChar10x14+0xb8>
 800e5ac:	e073      	b.n	800e696 <DispChar10x14+0x1fa>
 800e5ae:	79fb      	ldrb	r3, [r7, #7]
 800e5b0:	f003 0310 	and.w	r3, r3, #16
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d03f      	beq.n	800e638 <DispChar10x14+0x19c>
 800e5b8:	79bb      	ldrb	r3, [r7, #6]
 800e5ba:	2b4c      	cmp	r3, #76	; 0x4c
 800e5bc:	d002      	beq.n	800e5c4 <DispChar10x14+0x128>
 800e5be:	79bb      	ldrb	r3, [r7, #6]
 800e5c0:	2b48      	cmp	r3, #72	; 0x48
 800e5c2:	d139      	bne.n	800e638 <DispChar10x14+0x19c>
 800e5c4:	4b42      	ldr	r3, [pc, #264]	; (800e6d0 <DispChar10x14+0x234>)
 800e5c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e5ca:	4a42      	ldr	r2, [pc, #264]	; (800e6d4 <DispChar10x14+0x238>)
 800e5cc:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e5d0:	4611      	mov	r1, r2
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f003 ff6a 	bl	80124ac <LCD_Set_Posi>
 800e5d8:	2300      	movs	r3, #0
 800e5da:	81bb      	strh	r3, [r7, #12]
 800e5dc:	e027      	b.n	800e62e <DispChar10x14+0x192>
 800e5de:	897b      	ldrh	r3, [r7, #10]
 800e5e0:	f003 0304 	and.w	r3, r3, #4
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d00d      	beq.n	800e604 <DispChar10x14+0x168>
 800e5e8:	79fb      	ldrb	r3, [r7, #7]
 800e5ea:	f003 0301 	and.w	r3, r3, #1
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d002      	beq.n	800e5f8 <DispChar10x14+0x15c>
 800e5f2:	4b39      	ldr	r3, [pc, #228]	; (800e6d8 <DispChar10x14+0x23c>)
 800e5f4:	881b      	ldrh	r3, [r3, #0]
 800e5f6:	e001      	b.n	800e5fc <DispChar10x14+0x160>
 800e5f8:	4b38      	ldr	r3, [pc, #224]	; (800e6dc <DispChar10x14+0x240>)
 800e5fa:	881b      	ldrh	r3, [r3, #0]
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	f003 ffa3 	bl	8012548 <LCD_Set_Pixel>
 800e602:	e00c      	b.n	800e61e <DispChar10x14+0x182>
 800e604:	79fb      	ldrb	r3, [r7, #7]
 800e606:	f003 0301 	and.w	r3, r3, #1
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d002      	beq.n	800e614 <DispChar10x14+0x178>
 800e60e:	4b33      	ldr	r3, [pc, #204]	; (800e6dc <DispChar10x14+0x240>)
 800e610:	881b      	ldrh	r3, [r3, #0]
 800e612:	e001      	b.n	800e618 <DispChar10x14+0x17c>
 800e614:	4b30      	ldr	r3, [pc, #192]	; (800e6d8 <DispChar10x14+0x23c>)
 800e616:	881b      	ldrh	r3, [r3, #0]
 800e618:	4618      	mov	r0, r3
 800e61a:	f003 ff95 	bl	8012548 <LCD_Set_Pixel>
 800e61e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e622:	105b      	asrs	r3, r3, #1
 800e624:	817b      	strh	r3, [r7, #10]
 800e626:	89bb      	ldrh	r3, [r7, #12]
 800e628:	3301      	adds	r3, #1
 800e62a:	b29b      	uxth	r3, r3
 800e62c:	81bb      	strh	r3, [r7, #12]
 800e62e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e632:	2b0a      	cmp	r3, #10
 800e634:	ddd3      	ble.n	800e5de <DispChar10x14+0x142>
 800e636:	e02e      	b.n	800e696 <DispChar10x14+0x1fa>
 800e638:	2300      	movs	r3, #0
 800e63a:	81bb      	strh	r3, [r7, #12]
 800e63c:	e027      	b.n	800e68e <DispChar10x14+0x1f2>
 800e63e:	897b      	ldrh	r3, [r7, #10]
 800e640:	f003 0304 	and.w	r3, r3, #4
 800e644:	2b00      	cmp	r3, #0
 800e646:	d00d      	beq.n	800e664 <DispChar10x14+0x1c8>
 800e648:	79fb      	ldrb	r3, [r7, #7]
 800e64a:	f003 0301 	and.w	r3, r3, #1
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d002      	beq.n	800e658 <DispChar10x14+0x1bc>
 800e652:	4b21      	ldr	r3, [pc, #132]	; (800e6d8 <DispChar10x14+0x23c>)
 800e654:	881b      	ldrh	r3, [r3, #0]
 800e656:	e001      	b.n	800e65c <DispChar10x14+0x1c0>
 800e658:	4b20      	ldr	r3, [pc, #128]	; (800e6dc <DispChar10x14+0x240>)
 800e65a:	881b      	ldrh	r3, [r3, #0]
 800e65c:	4618      	mov	r0, r3
 800e65e:	f003 ff73 	bl	8012548 <LCD_Set_Pixel>
 800e662:	e00c      	b.n	800e67e <DispChar10x14+0x1e2>
 800e664:	79fb      	ldrb	r3, [r7, #7]
 800e666:	f003 0301 	and.w	r3, r3, #1
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d002      	beq.n	800e674 <DispChar10x14+0x1d8>
 800e66e:	4b1b      	ldr	r3, [pc, #108]	; (800e6dc <DispChar10x14+0x240>)
 800e670:	881b      	ldrh	r3, [r3, #0]
 800e672:	e001      	b.n	800e678 <DispChar10x14+0x1dc>
 800e674:	4b18      	ldr	r3, [pc, #96]	; (800e6d8 <DispChar10x14+0x23c>)
 800e676:	881b      	ldrh	r3, [r3, #0]
 800e678:	4618      	mov	r0, r3
 800e67a:	f003 ff65 	bl	8012548 <LCD_Set_Pixel>
 800e67e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e682:	105b      	asrs	r3, r3, #1
 800e684:	817b      	strh	r3, [r7, #10]
 800e686:	89bb      	ldrh	r3, [r7, #12]
 800e688:	3301      	adds	r3, #1
 800e68a:	b29b      	uxth	r3, r3
 800e68c:	81bb      	strh	r3, [r7, #12]
 800e68e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e692:	2b0d      	cmp	r3, #13
 800e694:	ddd3      	ble.n	800e63e <DispChar10x14+0x1a2>
 800e696:	4b0e      	ldr	r3, [pc, #56]	; (800e6d0 <DispChar10x14+0x234>)
 800e698:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e69c:	b29b      	uxth	r3, r3
 800e69e:	3301      	adds	r3, #1
 800e6a0:	b29b      	uxth	r3, r3
 800e6a2:	b21a      	sxth	r2, r3
 800e6a4:	4b0a      	ldr	r3, [pc, #40]	; (800e6d0 <DispChar10x14+0x234>)
 800e6a6:	801a      	strh	r2, [r3, #0]
 800e6a8:	89fb      	ldrh	r3, [r7, #14]
 800e6aa:	3301      	adds	r3, #1
 800e6ac:	b29b      	uxth	r3, r3
 800e6ae:	81fb      	strh	r3, [r7, #14]
 800e6b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e6b4:	2b09      	cmp	r3, #9
 800e6b6:	f77f aefc 	ble.w	800e4b2 <DispChar10x14+0x16>
 800e6ba:	bf00      	nop
 800e6bc:	bf00      	nop
 800e6be:	3710      	adds	r7, #16
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bd80      	pop	{r7, pc}
 800e6c4:	080018f8 	.word	0x080018f8
 800e6c8:	08001998 	.word	0x08001998
 800e6cc:	ffffaaaa 	.word	0xffffaaaa
 800e6d0:	20000792 	.word	0x20000792
 800e6d4:	20000794 	.word	0x20000794
 800e6d8:	200015d6 	.word	0x200015d6
 800e6dc:	200015d4 	.word	0x200015d4

0800e6e0 <NotePixel>:
 800e6e0:	b480      	push	{r7}
 800e6e2:	b085      	sub	sp, #20
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	71fb      	strb	r3, [r7, #7]
 800e6ea:	4b42      	ldr	r3, [pc, #264]	; (800e7f4 <NotePixel+0x114>)
 800e6ec:	60fb      	str	r3, [r7, #12]
 800e6ee:	4b42      	ldr	r3, [pc, #264]	; (800e7f8 <NotePixel+0x118>)
 800e6f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e6f4:	4a41      	ldr	r2, [pc, #260]	; (800e7fc <NotePixel+0x11c>)
 800e6f6:	f9b2 2046 	ldrsh.w	r2, [r2, #70]	; 0x46
 800e6fa:	fb93 f1f2 	sdiv	r1, r3, r2
 800e6fe:	fb02 f201 	mul.w	r2, r2, r1
 800e702:	1a9b      	subs	r3, r3, r2
 800e704:	b21a      	sxth	r2, r3
 800e706:	4b3c      	ldr	r3, [pc, #240]	; (800e7f8 <NotePixel+0x118>)
 800e708:	801a      	strh	r2, [r3, #0]
 800e70a:	4b3d      	ldr	r3, [pc, #244]	; (800e800 <NotePixel+0x120>)
 800e70c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e710:	4a3a      	ldr	r2, [pc, #232]	; (800e7fc <NotePixel+0x11c>)
 800e712:	f9b2 204a 	ldrsh.w	r2, [r2, #74]	; 0x4a
 800e716:	fb93 f1f2 	sdiv	r1, r3, r2
 800e71a:	fb02 f201 	mul.w	r2, r2, r1
 800e71e:	1a9b      	subs	r3, r3, r2
 800e720:	b21a      	sxth	r2, r3
 800e722:	4b37      	ldr	r3, [pc, #220]	; (800e800 <NotePixel+0x120>)
 800e724:	801a      	strh	r2, [r3, #0]
 800e726:	4b35      	ldr	r3, [pc, #212]	; (800e7fc <NotePixel+0x11c>)
 800e728:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	da00      	bge.n	800e732 <NotePixel+0x52>
 800e730:	331f      	adds	r3, #31
 800e732:	115b      	asrs	r3, r3, #5
 800e734:	b21b      	sxth	r3, r3
 800e736:	b29a      	uxth	r2, r3
 800e738:	4b2f      	ldr	r3, [pc, #188]	; (800e7f8 <NotePixel+0x118>)
 800e73a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e73e:	b29b      	uxth	r3, r3
 800e740:	fb12 f303 	smulbb	r3, r2, r3
 800e744:	b29a      	uxth	r2, r3
 800e746:	4b2e      	ldr	r3, [pc, #184]	; (800e800 <NotePixel+0x120>)
 800e748:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	da00      	bge.n	800e752 <NotePixel+0x72>
 800e750:	330f      	adds	r3, #15
 800e752:	111b      	asrs	r3, r3, #4
 800e754:	b21b      	sxth	r3, r3
 800e756:	b29b      	uxth	r3, r3
 800e758:	4413      	add	r3, r2
 800e75a:	b29b      	uxth	r3, r3
 800e75c:	817b      	strh	r3, [r7, #10]
 800e75e:	4b28      	ldr	r3, [pc, #160]	; (800e800 <NotePixel+0x120>)
 800e760:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e764:	425a      	negs	r2, r3
 800e766:	f003 030f 	and.w	r3, r3, #15
 800e76a:	f002 020f 	and.w	r2, r2, #15
 800e76e:	bf58      	it	pl
 800e770:	4253      	negpl	r3, r2
 800e772:	813b      	strh	r3, [r7, #8]
 800e774:	79fb      	ldrb	r3, [r7, #7]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d015      	beq.n	800e7a6 <NotePixel+0xc6>
 800e77a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e77e:	005b      	lsls	r3, r3, #1
 800e780:	68fa      	ldr	r2, [r7, #12]
 800e782:	4413      	add	r3, r2
 800e784:	f9b3 1000 	ldrsh.w	r1, [r3]
 800e788:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800e78c:	2201      	movs	r2, #1
 800e78e:	fa02 f303 	lsl.w	r3, r2, r3
 800e792:	b21a      	sxth	r2, r3
 800e794:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e798:	005b      	lsls	r3, r3, #1
 800e79a:	68f8      	ldr	r0, [r7, #12]
 800e79c:	4403      	add	r3, r0
 800e79e:	430a      	orrs	r2, r1
 800e7a0:	b212      	sxth	r2, r2
 800e7a2:	801a      	strh	r2, [r3, #0]
 800e7a4:	e016      	b.n	800e7d4 <NotePixel+0xf4>
 800e7a6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e7aa:	005b      	lsls	r3, r3, #1
 800e7ac:	68fa      	ldr	r2, [r7, #12]
 800e7ae:	4413      	add	r3, r2
 800e7b0:	f9b3 1000 	ldrsh.w	r1, [r3]
 800e7b4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800e7b8:	2201      	movs	r2, #1
 800e7ba:	fa02 f303 	lsl.w	r3, r2, r3
 800e7be:	b21b      	sxth	r3, r3
 800e7c0:	43db      	mvns	r3, r3
 800e7c2:	b21a      	sxth	r2, r3
 800e7c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e7c8:	005b      	lsls	r3, r3, #1
 800e7ca:	68f8      	ldr	r0, [r7, #12]
 800e7cc:	4403      	add	r3, r0
 800e7ce:	400a      	ands	r2, r1
 800e7d0:	b212      	sxth	r2, r2
 800e7d2:	801a      	strh	r2, [r3, #0]
 800e7d4:	4b0a      	ldr	r3, [pc, #40]	; (800e800 <NotePixel+0x120>)
 800e7d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e7da:	b29b      	uxth	r3, r3
 800e7dc:	3301      	adds	r3, #1
 800e7de:	b29b      	uxth	r3, r3
 800e7e0:	b21a      	sxth	r2, r3
 800e7e2:	4b07      	ldr	r3, [pc, #28]	; (800e800 <NotePixel+0x120>)
 800e7e4:	801a      	strh	r2, [r3, #0]
 800e7e6:	bf00      	nop
 800e7e8:	3714      	adds	r7, #20
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f0:	4770      	bx	lr
 800e7f2:	bf00      	nop
 800e7f4:	20000f94 	.word	0x20000f94
 800e7f8:	20000006 	.word	0x20000006
 800e7fc:	20000144 	.word	0x20000144
 800e800:	20000008 	.word	0x20000008

0800e804 <Buil_Pop>:
 800e804:	b580      	push	{r7, lr}
 800e806:	b082      	sub	sp, #8
 800e808:	af00      	add	r7, sp, #0
 800e80a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800e80e:	2100      	movs	r1, #0
 800e810:	487f      	ldr	r0, [pc, #508]	; (800ea10 <Buil_Pop+0x20c>)
 800e812:	f014 fbef 	bl	8022ff4 <memset>
 800e816:	4b7f      	ldr	r3, [pc, #508]	; (800ea14 <Buil_Pop+0x210>)
 800e818:	2200      	movs	r2, #0
 800e81a:	801a      	strh	r2, [r3, #0]
 800e81c:	4b7e      	ldr	r3, [pc, #504]	; (800ea18 <Buil_Pop+0x214>)
 800e81e:	2203      	movs	r2, #3
 800e820:	801a      	strh	r2, [r3, #0]
 800e822:	2300      	movs	r3, #0
 800e824:	80fb      	strh	r3, [r7, #6]
 800e826:	e008      	b.n	800e83a <Buil_Pop+0x36>
 800e828:	2001      	movs	r0, #1
 800e82a:	f7ff ff59 	bl	800e6e0 <NotePixel>
 800e82e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e832:	b29b      	uxth	r3, r3
 800e834:	3301      	adds	r3, #1
 800e836:	b29b      	uxth	r3, r3
 800e838:	80fb      	strh	r3, [r7, #6]
 800e83a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e83e:	4b77      	ldr	r3, [pc, #476]	; (800ea1c <Buil_Pop+0x218>)
 800e840:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e844:	0fd9      	lsrs	r1, r3, #31
 800e846:	440b      	add	r3, r1
 800e848:	105b      	asrs	r3, r3, #1
 800e84a:	b21b      	sxth	r3, r3
 800e84c:	3b06      	subs	r3, #6
 800e84e:	429a      	cmp	r2, r3
 800e850:	dbea      	blt.n	800e828 <Buil_Pop+0x24>
 800e852:	4b70      	ldr	r3, [pc, #448]	; (800ea14 <Buil_Pop+0x210>)
 800e854:	2201      	movs	r2, #1
 800e856:	801a      	strh	r2, [r3, #0]
 800e858:	4b6f      	ldr	r3, [pc, #444]	; (800ea18 <Buil_Pop+0x214>)
 800e85a:	2202      	movs	r2, #2
 800e85c:	801a      	strh	r2, [r3, #0]
 800e85e:	2001      	movs	r0, #1
 800e860:	f7ff ff3e 	bl	800e6e0 <NotePixel>
 800e864:	4b6b      	ldr	r3, [pc, #428]	; (800ea14 <Buil_Pop+0x210>)
 800e866:	2201      	movs	r2, #1
 800e868:	801a      	strh	r2, [r3, #0]
 800e86a:	4b6c      	ldr	r3, [pc, #432]	; (800ea1c <Buil_Pop+0x218>)
 800e86c:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e870:	0fda      	lsrs	r2, r3, #31
 800e872:	4413      	add	r3, r2
 800e874:	105b      	asrs	r3, r3, #1
 800e876:	b21b      	sxth	r3, r3
 800e878:	b29b      	uxth	r3, r3
 800e87a:	3b03      	subs	r3, #3
 800e87c:	b29b      	uxth	r3, r3
 800e87e:	b21a      	sxth	r2, r3
 800e880:	4b65      	ldr	r3, [pc, #404]	; (800ea18 <Buil_Pop+0x214>)
 800e882:	801a      	strh	r2, [r3, #0]
 800e884:	2001      	movs	r0, #1
 800e886:	f7ff ff2b 	bl	800e6e0 <NotePixel>
 800e88a:	4b62      	ldr	r3, [pc, #392]	; (800ea14 <Buil_Pop+0x210>)
 800e88c:	2202      	movs	r2, #2
 800e88e:	801a      	strh	r2, [r3, #0]
 800e890:	4b61      	ldr	r3, [pc, #388]	; (800ea18 <Buil_Pop+0x214>)
 800e892:	2201      	movs	r2, #1
 800e894:	801a      	strh	r2, [r3, #0]
 800e896:	2001      	movs	r0, #1
 800e898:	f7ff ff22 	bl	800e6e0 <NotePixel>
 800e89c:	4b5d      	ldr	r3, [pc, #372]	; (800ea14 <Buil_Pop+0x210>)
 800e89e:	2202      	movs	r2, #2
 800e8a0:	801a      	strh	r2, [r3, #0]
 800e8a2:	4b5e      	ldr	r3, [pc, #376]	; (800ea1c <Buil_Pop+0x218>)
 800e8a4:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e8a8:	0fda      	lsrs	r2, r3, #31
 800e8aa:	4413      	add	r3, r2
 800e8ac:	105b      	asrs	r3, r3, #1
 800e8ae:	b21b      	sxth	r3, r3
 800e8b0:	b29b      	uxth	r3, r3
 800e8b2:	3b02      	subs	r3, #2
 800e8b4:	b29b      	uxth	r3, r3
 800e8b6:	b21a      	sxth	r2, r3
 800e8b8:	4b57      	ldr	r3, [pc, #348]	; (800ea18 <Buil_Pop+0x214>)
 800e8ba:	801a      	strh	r2, [r3, #0]
 800e8bc:	2001      	movs	r0, #1
 800e8be:	f7ff ff0f 	bl	800e6e0 <NotePixel>
 800e8c2:	4b54      	ldr	r3, [pc, #336]	; (800ea14 <Buil_Pop+0x210>)
 800e8c4:	2203      	movs	r2, #3
 800e8c6:	801a      	strh	r2, [r3, #0]
 800e8c8:	e01e      	b.n	800e908 <Buil_Pop+0x104>
 800e8ca:	4b53      	ldr	r3, [pc, #332]	; (800ea18 <Buil_Pop+0x214>)
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	801a      	strh	r2, [r3, #0]
 800e8d0:	2001      	movs	r0, #1
 800e8d2:	f7ff ff05 	bl	800e6e0 <NotePixel>
 800e8d6:	4b51      	ldr	r3, [pc, #324]	; (800ea1c <Buil_Pop+0x218>)
 800e8d8:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e8dc:	0fda      	lsrs	r2, r3, #31
 800e8de:	4413      	add	r3, r2
 800e8e0:	105b      	asrs	r3, r3, #1
 800e8e2:	b21b      	sxth	r3, r3
 800e8e4:	b29b      	uxth	r3, r3
 800e8e6:	3b01      	subs	r3, #1
 800e8e8:	b29b      	uxth	r3, r3
 800e8ea:	b21a      	sxth	r2, r3
 800e8ec:	4b4a      	ldr	r3, [pc, #296]	; (800ea18 <Buil_Pop+0x214>)
 800e8ee:	801a      	strh	r2, [r3, #0]
 800e8f0:	2001      	movs	r0, #1
 800e8f2:	f7ff fef5 	bl	800e6e0 <NotePixel>
 800e8f6:	4b47      	ldr	r3, [pc, #284]	; (800ea14 <Buil_Pop+0x210>)
 800e8f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e8fc:	b29b      	uxth	r3, r3
 800e8fe:	3301      	adds	r3, #1
 800e900:	b29b      	uxth	r3, r3
 800e902:	b21a      	sxth	r2, r3
 800e904:	4b43      	ldr	r3, [pc, #268]	; (800ea14 <Buil_Pop+0x210>)
 800e906:	801a      	strh	r2, [r3, #0]
 800e908:	4b42      	ldr	r3, [pc, #264]	; (800ea14 <Buil_Pop+0x210>)
 800e90a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e90e:	461a      	mov	r2, r3
 800e910:	4b42      	ldr	r3, [pc, #264]	; (800ea1c <Buil_Pop+0x218>)
 800e912:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e916:	3b02      	subs	r3, #2
 800e918:	429a      	cmp	r2, r3
 800e91a:	dbd6      	blt.n	800e8ca <Buil_Pop+0xc6>
 800e91c:	4b3f      	ldr	r3, [pc, #252]	; (800ea1c <Buil_Pop+0x218>)
 800e91e:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e922:	b29b      	uxth	r3, r3
 800e924:	3b03      	subs	r3, #3
 800e926:	b29b      	uxth	r3, r3
 800e928:	b21a      	sxth	r2, r3
 800e92a:	4b3a      	ldr	r3, [pc, #232]	; (800ea14 <Buil_Pop+0x210>)
 800e92c:	801a      	strh	r2, [r3, #0]
 800e92e:	4b3a      	ldr	r3, [pc, #232]	; (800ea18 <Buil_Pop+0x214>)
 800e930:	2201      	movs	r2, #1
 800e932:	801a      	strh	r2, [r3, #0]
 800e934:	2001      	movs	r0, #1
 800e936:	f7ff fed3 	bl	800e6e0 <NotePixel>
 800e93a:	4b38      	ldr	r3, [pc, #224]	; (800ea1c <Buil_Pop+0x218>)
 800e93c:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e940:	b29b      	uxth	r3, r3
 800e942:	3b03      	subs	r3, #3
 800e944:	b29b      	uxth	r3, r3
 800e946:	b21a      	sxth	r2, r3
 800e948:	4b32      	ldr	r3, [pc, #200]	; (800ea14 <Buil_Pop+0x210>)
 800e94a:	801a      	strh	r2, [r3, #0]
 800e94c:	4b33      	ldr	r3, [pc, #204]	; (800ea1c <Buil_Pop+0x218>)
 800e94e:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e952:	0fda      	lsrs	r2, r3, #31
 800e954:	4413      	add	r3, r2
 800e956:	105b      	asrs	r3, r3, #1
 800e958:	b21b      	sxth	r3, r3
 800e95a:	b29b      	uxth	r3, r3
 800e95c:	3b02      	subs	r3, #2
 800e95e:	b29b      	uxth	r3, r3
 800e960:	b21a      	sxth	r2, r3
 800e962:	4b2d      	ldr	r3, [pc, #180]	; (800ea18 <Buil_Pop+0x214>)
 800e964:	801a      	strh	r2, [r3, #0]
 800e966:	2001      	movs	r0, #1
 800e968:	f7ff feba 	bl	800e6e0 <NotePixel>
 800e96c:	4b2b      	ldr	r3, [pc, #172]	; (800ea1c <Buil_Pop+0x218>)
 800e96e:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e972:	b29b      	uxth	r3, r3
 800e974:	3b02      	subs	r3, #2
 800e976:	b29b      	uxth	r3, r3
 800e978:	b21a      	sxth	r2, r3
 800e97a:	4b26      	ldr	r3, [pc, #152]	; (800ea14 <Buil_Pop+0x210>)
 800e97c:	801a      	strh	r2, [r3, #0]
 800e97e:	4b26      	ldr	r3, [pc, #152]	; (800ea18 <Buil_Pop+0x214>)
 800e980:	2202      	movs	r2, #2
 800e982:	801a      	strh	r2, [r3, #0]
 800e984:	2001      	movs	r0, #1
 800e986:	f7ff feab 	bl	800e6e0 <NotePixel>
 800e98a:	4b24      	ldr	r3, [pc, #144]	; (800ea1c <Buil_Pop+0x218>)
 800e98c:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e990:	b29b      	uxth	r3, r3
 800e992:	3b02      	subs	r3, #2
 800e994:	b29b      	uxth	r3, r3
 800e996:	b21a      	sxth	r2, r3
 800e998:	4b1e      	ldr	r3, [pc, #120]	; (800ea14 <Buil_Pop+0x210>)
 800e99a:	801a      	strh	r2, [r3, #0]
 800e99c:	4b1f      	ldr	r3, [pc, #124]	; (800ea1c <Buil_Pop+0x218>)
 800e99e:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e9a2:	0fda      	lsrs	r2, r3, #31
 800e9a4:	4413      	add	r3, r2
 800e9a6:	105b      	asrs	r3, r3, #1
 800e9a8:	b21b      	sxth	r3, r3
 800e9aa:	b29b      	uxth	r3, r3
 800e9ac:	3b03      	subs	r3, #3
 800e9ae:	b29b      	uxth	r3, r3
 800e9b0:	b21a      	sxth	r2, r3
 800e9b2:	4b19      	ldr	r3, [pc, #100]	; (800ea18 <Buil_Pop+0x214>)
 800e9b4:	801a      	strh	r2, [r3, #0]
 800e9b6:	2001      	movs	r0, #1
 800e9b8:	f7ff fe92 	bl	800e6e0 <NotePixel>
 800e9bc:	4b17      	ldr	r3, [pc, #92]	; (800ea1c <Buil_Pop+0x218>)
 800e9be:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e9c2:	b29b      	uxth	r3, r3
 800e9c4:	3b01      	subs	r3, #1
 800e9c6:	b29b      	uxth	r3, r3
 800e9c8:	b21a      	sxth	r2, r3
 800e9ca:	4b12      	ldr	r3, [pc, #72]	; (800ea14 <Buil_Pop+0x210>)
 800e9cc:	801a      	strh	r2, [r3, #0]
 800e9ce:	4b12      	ldr	r3, [pc, #72]	; (800ea18 <Buil_Pop+0x214>)
 800e9d0:	2203      	movs	r2, #3
 800e9d2:	801a      	strh	r2, [r3, #0]
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	80fb      	strh	r3, [r7, #6]
 800e9d8:	e008      	b.n	800e9ec <Buil_Pop+0x1e8>
 800e9da:	2001      	movs	r0, #1
 800e9dc:	f7ff fe80 	bl	800e6e0 <NotePixel>
 800e9e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e9e4:	b29b      	uxth	r3, r3
 800e9e6:	3301      	adds	r3, #1
 800e9e8:	b29b      	uxth	r3, r3
 800e9ea:	80fb      	strh	r3, [r7, #6]
 800e9ec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e9f0:	4b0a      	ldr	r3, [pc, #40]	; (800ea1c <Buil_Pop+0x218>)
 800e9f2:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e9f6:	0fd9      	lsrs	r1, r3, #31
 800e9f8:	440b      	add	r3, r1
 800e9fa:	105b      	asrs	r3, r3, #1
 800e9fc:	b21b      	sxth	r3, r3
 800e9fe:	3b06      	subs	r3, #6
 800ea00:	429a      	cmp	r2, r3
 800ea02:	dbea      	blt.n	800e9da <Buil_Pop+0x1d6>
 800ea04:	bf00      	nop
 800ea06:	bf00      	nop
 800ea08:	3708      	adds	r7, #8
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	bd80      	pop	{r7, pc}
 800ea0e:	bf00      	nop
 800ea10:	20000f94 	.word	0x20000f94
 800ea14:	20000006 	.word	0x20000006
 800ea18:	20000008 	.word	0x20000008
 800ea1c:	20000144 	.word	0x20000144

0800ea20 <PopColor>:
 800ea20:	b480      	push	{r7}
 800ea22:	b083      	sub	sp, #12
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	4603      	mov	r3, r0
 800ea28:	460a      	mov	r2, r1
 800ea2a:	80fb      	strh	r3, [r7, #6]
 800ea2c:	4613      	mov	r3, r2
 800ea2e:	80bb      	strh	r3, [r7, #4]
 800ea30:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ea34:	4b06      	ldr	r3, [pc, #24]	; (800ea50 <PopColor+0x30>)
 800ea36:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800ea3a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800ea3e:	4b04      	ldr	r3, [pc, #16]	; (800ea50 <PopColor+0x30>)
 800ea40:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800ea44:	bf00      	nop
 800ea46:	370c      	adds	r7, #12
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4e:	4770      	bx	lr
 800ea50:	20000144 	.word	0x20000144

0800ea54 <Close_Pop>:
 800ea54:	b480      	push	{r7}
 800ea56:	af00      	add	r7, sp, #0
 800ea58:	4b07      	ldr	r3, [pc, #28]	; (800ea78 <Close_Pop+0x24>)
 800ea5a:	781b      	ldrb	r3, [r3, #0]
 800ea5c:	f023 0306 	bic.w	r3, r3, #6
 800ea60:	b2da      	uxtb	r2, r3
 800ea62:	4b05      	ldr	r3, [pc, #20]	; (800ea78 <Close_Pop+0x24>)
 800ea64:	701a      	strb	r2, [r3, #0]
 800ea66:	4b05      	ldr	r3, [pc, #20]	; (800ea7c <Close_Pop+0x28>)
 800ea68:	2201      	movs	r2, #1
 800ea6a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800ea6e:	bf00      	nop
 800ea70:	46bd      	mov	sp, r7
 800ea72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea76:	4770      	bx	lr
 800ea78:	20000796 	.word	0x20000796
 800ea7c:	20000144 	.word	0x20000144

0800ea80 <List_Pop>:
 800ea80:	b480      	push	{r7}
 800ea82:	af00      	add	r7, sp, #0
 800ea84:	4b07      	ldr	r3, [pc, #28]	; (800eaa4 <List_Pop+0x24>)
 800ea86:	781b      	ldrb	r3, [r3, #0]
 800ea88:	f043 0302 	orr.w	r3, r3, #2
 800ea8c:	b2da      	uxtb	r2, r3
 800ea8e:	4b05      	ldr	r3, [pc, #20]	; (800eaa4 <List_Pop+0x24>)
 800ea90:	701a      	strb	r2, [r3, #0]
 800ea92:	4b05      	ldr	r3, [pc, #20]	; (800eaa8 <List_Pop+0x28>)
 800ea94:	2200      	movs	r2, #0
 800ea96:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800ea9a:	bf00      	nop
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa2:	4770      	bx	lr
 800eaa4:	20000796 	.word	0x20000796
 800eaa8:	20000144 	.word	0x20000144

0800eaac <Dialog_Pop>:
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b084      	sub	sp, #16
 800eab0:	af02      	add	r7, sp, #8
 800eab2:	6078      	str	r0, [r7, #4]
 800eab4:	4b2a      	ldr	r3, [pc, #168]	; (800eb60 <Dialog_Pop+0xb4>)
 800eab6:	781b      	ldrb	r3, [r3, #0]
 800eab8:	f043 0304 	orr.w	r3, r3, #4
 800eabc:	b2da      	uxtb	r2, r3
 800eabe:	4b28      	ldr	r3, [pc, #160]	; (800eb60 <Dialog_Pop+0xb4>)
 800eac0:	701a      	strb	r2, [r3, #0]
 800eac2:	4b28      	ldr	r3, [pc, #160]	; (800eb64 <Dialog_Pop+0xb8>)
 800eac4:	2280      	movs	r2, #128	; 0x80
 800eac6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800eaca:	4b26      	ldr	r3, [pc, #152]	; (800eb64 <Dialog_Pop+0xb8>)
 800eacc:	2260      	movs	r2, #96	; 0x60
 800eace:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 800ead2:	4b24      	ldr	r3, [pc, #144]	; (800eb64 <Dialog_Pop+0xb8>)
 800ead4:	2250      	movs	r2, #80	; 0x50
 800ead6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800eada:	4b22      	ldr	r3, [pc, #136]	; (800eb64 <Dialog_Pop+0xb8>)
 800eadc:	22c8      	movs	r2, #200	; 0xc8
 800eade:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800eae2:	f643 11e7 	movw	r1, #14823	; 0x39e7
 800eae6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800eaea:	f7ff ff99 	bl	800ea20 <PopColor>
 800eaee:	f7ff fe89 	bl	800e804 <Buil_Pop>
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	211c      	movs	r1, #28
 800eaf8:	2008      	movs	r0, #8
 800eafa:	f000 f8e1 	bl	800ecc0 <NoteSTR>
 800eafe:	4b1a      	ldr	r3, [pc, #104]	; (800eb68 <Dialog_Pop+0xbc>)
 800eb00:	2211      	movs	r2, #17
 800eb02:	2108      	movs	r1, #8
 800eb04:	200c      	movs	r0, #12
 800eb06:	f000 f8db 	bl	800ecc0 <NoteSTR>
 800eb0a:	230a      	movs	r3, #10
 800eb0c:	9300      	str	r3, [sp, #0]
 800eb0e:	2302      	movs	r3, #2
 800eb10:	2208      	movs	r2, #8
 800eb12:	210c      	movs	r1, #12
 800eb14:	2000      	movs	r0, #0
 800eb16:	f000 f979 	bl	800ee0c <Note_4Point>
 800eb1a:	4b14      	ldr	r3, [pc, #80]	; (800eb6c <Dialog_Pop+0xc0>)
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	2108      	movs	r1, #8
 800eb20:	2018      	movs	r0, #24
 800eb22:	f000 f8cd 	bl	800ecc0 <NoteSTR>
 800eb26:	4b12      	ldr	r3, [pc, #72]	; (800eb70 <Dialog_Pop+0xc4>)
 800eb28:	2211      	movs	r2, #17
 800eb2a:	2108      	movs	r1, #8
 800eb2c:	2048      	movs	r0, #72	; 0x48
 800eb2e:	f000 f8c7 	bl	800ecc0 <NoteSTR>
 800eb32:	230a      	movs	r3, #10
 800eb34:	9300      	str	r3, [sp, #0]
 800eb36:	2302      	movs	r3, #2
 800eb38:	2208      	movs	r2, #8
 800eb3a:	2148      	movs	r1, #72	; 0x48
 800eb3c:	2000      	movs	r0, #0
 800eb3e:	f000 f965 	bl	800ee0c <Note_4Point>
 800eb42:	4b0c      	ldr	r3, [pc, #48]	; (800eb74 <Dialog_Pop+0xc8>)
 800eb44:	2200      	movs	r2, #0
 800eb46:	2108      	movs	r1, #8
 800eb48:	2054      	movs	r0, #84	; 0x54
 800eb4a:	f000 f8b9 	bl	800ecc0 <NoteSTR>
 800eb4e:	4b05      	ldr	r3, [pc, #20]	; (800eb64 <Dialog_Pop+0xb8>)
 800eb50:	2200      	movs	r2, #0
 800eb52:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800eb56:	bf00      	nop
 800eb58:	3708      	adds	r7, #8
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	bd80      	pop	{r7, pc}
 800eb5e:	bf00      	nop
 800eb60:	20000796 	.word	0x20000796
 800eb64:	20000144 	.word	0x20000144
 800eb68:	080001c4 	.word	0x080001c4
 800eb6c:	080001c8 	.word	0x080001c8
 800eb70:	080001d0 	.word	0x080001d0
 800eb74:	080001d4 	.word	0x080001d4

0800eb78 <Calibrate_Pop>:
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b082      	sub	sp, #8
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
 800eb80:	4b16      	ldr	r3, [pc, #88]	; (800ebdc <Calibrate_Pop+0x64>)
 800eb82:	781b      	ldrb	r3, [r3, #0]
 800eb84:	f043 0304 	orr.w	r3, r3, #4
 800eb88:	b2da      	uxtb	r2, r3
 800eb8a:	4b14      	ldr	r3, [pc, #80]	; (800ebdc <Calibrate_Pop+0x64>)
 800eb8c:	701a      	strb	r2, [r3, #0]
 800eb8e:	4b14      	ldr	r3, [pc, #80]	; (800ebe0 <Calibrate_Pop+0x68>)
 800eb90:	22c8      	movs	r2, #200	; 0xc8
 800eb92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800eb96:	4b12      	ldr	r3, [pc, #72]	; (800ebe0 <Calibrate_Pop+0x68>)
 800eb98:	2240      	movs	r2, #64	; 0x40
 800eb9a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 800eb9e:	4b10      	ldr	r3, [pc, #64]	; (800ebe0 <Calibrate_Pop+0x68>)
 800eba0:	2232      	movs	r2, #50	; 0x32
 800eba2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800eba6:	4b0e      	ldr	r3, [pc, #56]	; (800ebe0 <Calibrate_Pop+0x68>)
 800eba8:	22e6      	movs	r2, #230	; 0xe6
 800ebaa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ebae:	f643 11e7 	movw	r1, #14823	; 0x39e7
 800ebb2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ebb6:	f7ff ff33 	bl	800ea20 <PopColor>
 800ebba:	f7ff fe23 	bl	800e804 <Buil_Pop>
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	210a      	movs	r1, #10
 800ebc4:	2010      	movs	r0, #16
 800ebc6:	f000 f87b 	bl	800ecc0 <NoteSTR>
 800ebca:	4b05      	ldr	r3, [pc, #20]	; (800ebe0 <Calibrate_Pop+0x68>)
 800ebcc:	2200      	movs	r2, #0
 800ebce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800ebd2:	bf00      	nop
 800ebd4:	3708      	adds	r7, #8
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}
 800ebda:	bf00      	nop
 800ebdc:	20000796 	.word	0x20000796
 800ebe0:	20000144 	.word	0x20000144

0800ebe4 <CalSave_Pop>:
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b084      	sub	sp, #16
 800ebe8:	af02      	add	r7, sp, #8
 800ebea:	6078      	str	r0, [r7, #4]
 800ebec:	4b2d      	ldr	r3, [pc, #180]	; (800eca4 <CalSave_Pop+0xc0>)
 800ebee:	781b      	ldrb	r3, [r3, #0]
 800ebf0:	f043 0304 	orr.w	r3, r3, #4
 800ebf4:	b2da      	uxtb	r2, r3
 800ebf6:	4b2b      	ldr	r3, [pc, #172]	; (800eca4 <CalSave_Pop+0xc0>)
 800ebf8:	701a      	strb	r2, [r3, #0]
 800ebfa:	4b2b      	ldr	r3, [pc, #172]	; (800eca8 <CalSave_Pop+0xc4>)
 800ebfc:	22d0      	movs	r2, #208	; 0xd0
 800ebfe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800ec02:	4b29      	ldr	r3, [pc, #164]	; (800eca8 <CalSave_Pop+0xc4>)
 800ec04:	2260      	movs	r2, #96	; 0x60
 800ec06:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 800ec0a:	4b27      	ldr	r3, [pc, #156]	; (800eca8 <CalSave_Pop+0xc4>)
 800ec0c:	221e      	movs	r2, #30
 800ec0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800ec12:	4b25      	ldr	r3, [pc, #148]	; (800eca8 <CalSave_Pop+0xc4>)
 800ec14:	22c8      	movs	r2, #200	; 0xc8
 800ec16:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ec1a:	f643 11e7 	movw	r1, #14823	; 0x39e7
 800ec1e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ec22:	f7ff fefd 	bl	800ea20 <PopColor>
 800ec26:	f7ff fded 	bl	800e804 <Buil_Pop>
 800ec2a:	4b20      	ldr	r3, [pc, #128]	; (800ecac <CalSave_Pop+0xc8>)
 800ec2c:	2200      	movs	r2, #0
 800ec2e:	211c      	movs	r1, #28
 800ec30:	2006      	movs	r0, #6
 800ec32:	f000 f845 	bl	800ecc0 <NoteSTR>
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	2200      	movs	r2, #0
 800ec3a:	211c      	movs	r1, #28
 800ec3c:	205a      	movs	r0, #90	; 0x5a
 800ec3e:	f000 f83f 	bl	800ecc0 <NoteSTR>
 800ec42:	4b1b      	ldr	r3, [pc, #108]	; (800ecb0 <CalSave_Pop+0xcc>)
 800ec44:	2211      	movs	r2, #17
 800ec46:	2108      	movs	r1, #8
 800ec48:	201e      	movs	r0, #30
 800ec4a:	f000 f839 	bl	800ecc0 <NoteSTR>
 800ec4e:	230a      	movs	r3, #10
 800ec50:	9300      	str	r3, [sp, #0]
 800ec52:	2302      	movs	r3, #2
 800ec54:	2208      	movs	r2, #8
 800ec56:	211e      	movs	r1, #30
 800ec58:	2000      	movs	r0, #0
 800ec5a:	f000 f8d7 	bl	800ee0c <Note_4Point>
 800ec5e:	4b15      	ldr	r3, [pc, #84]	; (800ecb4 <CalSave_Pop+0xd0>)
 800ec60:	2200      	movs	r2, #0
 800ec62:	2108      	movs	r1, #8
 800ec64:	202a      	movs	r0, #42	; 0x2a
 800ec66:	f000 f82b 	bl	800ecc0 <NoteSTR>
 800ec6a:	4b13      	ldr	r3, [pc, #76]	; (800ecb8 <CalSave_Pop+0xd4>)
 800ec6c:	2211      	movs	r2, #17
 800ec6e:	2108      	movs	r1, #8
 800ec70:	2078      	movs	r0, #120	; 0x78
 800ec72:	f000 f825 	bl	800ecc0 <NoteSTR>
 800ec76:	230a      	movs	r3, #10
 800ec78:	9300      	str	r3, [sp, #0]
 800ec7a:	2302      	movs	r3, #2
 800ec7c:	2208      	movs	r2, #8
 800ec7e:	2178      	movs	r1, #120	; 0x78
 800ec80:	2000      	movs	r0, #0
 800ec82:	f000 f8c3 	bl	800ee0c <Note_4Point>
 800ec86:	4b0d      	ldr	r3, [pc, #52]	; (800ecbc <CalSave_Pop+0xd8>)
 800ec88:	2200      	movs	r2, #0
 800ec8a:	2108      	movs	r1, #8
 800ec8c:	2084      	movs	r0, #132	; 0x84
 800ec8e:	f000 f817 	bl	800ecc0 <NoteSTR>
 800ec92:	4b05      	ldr	r3, [pc, #20]	; (800eca8 <CalSave_Pop+0xc4>)
 800ec94:	2200      	movs	r2, #0
 800ec96:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800ec9a:	bf00      	nop
 800ec9c:	3708      	adds	r7, #8
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}
 800eca2:	bf00      	nop
 800eca4:	20000796 	.word	0x20000796
 800eca8:	20000144 	.word	0x20000144
 800ecac:	080001dc 	.word	0x080001dc
 800ecb0:	080001c4 	.word	0x080001c4
 800ecb4:	080001c8 	.word	0x080001c8
 800ecb8:	080001d0 	.word	0x080001d0
 800ecbc:	080001d4 	.word	0x080001d4

0800ecc0 <NoteSTR>:
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b086      	sub	sp, #24
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	607b      	str	r3, [r7, #4]
 800ecc8:	4603      	mov	r3, r0
 800ecca:	81fb      	strh	r3, [r7, #14]
 800eccc:	460b      	mov	r3, r1
 800ecce:	81bb      	strh	r3, [r7, #12]
 800ecd0:	4613      	mov	r3, r2
 800ecd2:	72fb      	strb	r3, [r7, #11]
 800ecd4:	4a48      	ldr	r2, [pc, #288]	; (800edf8 <NoteSTR+0x138>)
 800ecd6:	89fb      	ldrh	r3, [r7, #14]
 800ecd8:	8013      	strh	r3, [r2, #0]
 800ecda:	4a48      	ldr	r2, [pc, #288]	; (800edfc <NoteSTR+0x13c>)
 800ecdc:	89bb      	ldrh	r3, [r7, #12]
 800ecde:	8013      	strh	r3, [r2, #0]
 800ece0:	e080      	b.n	800ede4 <NoteSTR+0x124>
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	1c5a      	adds	r2, r3, #1
 800ece6:	607a      	str	r2, [r7, #4]
 800ece8:	781b      	ldrb	r3, [r3, #0]
 800ecea:	747b      	strb	r3, [r7, #17]
 800ecec:	2300      	movs	r3, #0
 800ecee:	82fb      	strh	r3, [r7, #22]
 800ecf0:	e074      	b.n	800eddc <NoteSTR+0x11c>
 800ecf2:	7afb      	ldrb	r3, [r7, #11]
 800ecf4:	f003 0310 	and.w	r3, r3, #16
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d10e      	bne.n	800ed1a <NoteSTR+0x5a>
 800ecfc:	7c7b      	ldrb	r3, [r7, #17]
 800ecfe:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800ed02:	4613      	mov	r3, r2
 800ed04:	005b      	lsls	r3, r3, #1
 800ed06:	4413      	add	r3, r2
 800ed08:	005b      	lsls	r3, r3, #1
 800ed0a:	461a      	mov	r2, r3
 800ed0c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ed10:	4413      	add	r3, r2
 800ed12:	4a3b      	ldr	r2, [pc, #236]	; (800ee00 <NoteSTR+0x140>)
 800ed14:	5cd3      	ldrb	r3, [r2, r3]
 800ed16:	827b      	strh	r3, [r7, #18]
 800ed18:	e00d      	b.n	800ed36 <NoteSTR+0x76>
 800ed1a:	7c7b      	ldrb	r3, [r7, #17]
 800ed1c:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800ed20:	4613      	mov	r3, r2
 800ed22:	005b      	lsls	r3, r3, #1
 800ed24:	4413      	add	r3, r2
 800ed26:	005b      	lsls	r3, r3, #1
 800ed28:	461a      	mov	r2, r3
 800ed2a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ed2e:	4413      	add	r3, r2
 800ed30:	4a34      	ldr	r2, [pc, #208]	; (800ee04 <NoteSTR+0x144>)
 800ed32:	5cd3      	ldrb	r3, [r2, r3]
 800ed34:	827b      	strh	r3, [r7, #18]
 800ed36:	7afb      	ldrb	r3, [r7, #11]
 800ed38:	f003 0320 	and.w	r3, r3, #32
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d00c      	beq.n	800ed5a <NoteSTR+0x9a>
 800ed40:	8afb      	ldrh	r3, [r7, #22]
 800ed42:	f003 0301 	and.w	r3, r3, #1
 800ed46:	b29b      	uxth	r3, r3
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d001      	beq.n	800ed50 <NoteSTR+0x90>
 800ed4c:	4a2e      	ldr	r2, [pc, #184]	; (800ee08 <NoteSTR+0x148>)
 800ed4e:	e001      	b.n	800ed54 <NoteSTR+0x94>
 800ed50:	f245 5255 	movw	r2, #21845	; 0x5555
 800ed54:	8a7b      	ldrh	r3, [r7, #18]
 800ed56:	4013      	ands	r3, r2
 800ed58:	827b      	strh	r3, [r7, #18]
 800ed5a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ed5e:	009b      	lsls	r3, r3, #2
 800ed60:	827b      	strh	r3, [r7, #18]
 800ed62:	2300      	movs	r3, #0
 800ed64:	82bb      	strh	r3, [r7, #20]
 800ed66:	e01f      	b.n	800eda8 <NoteSTR+0xe8>
 800ed68:	8a7b      	ldrh	r3, [r7, #18]
 800ed6a:	f003 0301 	and.w	r3, r3, #1
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d00b      	beq.n	800ed8a <NoteSTR+0xca>
 800ed72:	7afb      	ldrb	r3, [r7, #11]
 800ed74:	f003 0301 	and.w	r3, r3, #1
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	bf0c      	ite	eq
 800ed7c:	2301      	moveq	r3, #1
 800ed7e:	2300      	movne	r3, #0
 800ed80:	b2db      	uxtb	r3, r3
 800ed82:	4618      	mov	r0, r3
 800ed84:	f7ff fcac 	bl	800e6e0 <NotePixel>
 800ed88:	e006      	b.n	800ed98 <NoteSTR+0xd8>
 800ed8a:	7afb      	ldrb	r3, [r7, #11]
 800ed8c:	f003 0301 	and.w	r3, r3, #1
 800ed90:	b2db      	uxtb	r3, r3
 800ed92:	4618      	mov	r0, r3
 800ed94:	f7ff fca4 	bl	800e6e0 <NotePixel>
 800ed98:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ed9c:	105b      	asrs	r3, r3, #1
 800ed9e:	827b      	strh	r3, [r7, #18]
 800eda0:	8abb      	ldrh	r3, [r7, #20]
 800eda2:	3301      	adds	r3, #1
 800eda4:	b29b      	uxth	r3, r3
 800eda6:	82bb      	strh	r3, [r7, #20]
 800eda8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800edac:	2b0d      	cmp	r3, #13
 800edae:	dddb      	ble.n	800ed68 <NoteSTR+0xa8>
 800edb0:	4b11      	ldr	r3, [pc, #68]	; (800edf8 <NoteSTR+0x138>)
 800edb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800edb6:	b29b      	uxth	r3, r3
 800edb8:	3301      	adds	r3, #1
 800edba:	b29b      	uxth	r3, r3
 800edbc:	b21a      	sxth	r2, r3
 800edbe:	4b0e      	ldr	r3, [pc, #56]	; (800edf8 <NoteSTR+0x138>)
 800edc0:	801a      	strh	r2, [r3, #0]
 800edc2:	4b0e      	ldr	r3, [pc, #56]	; (800edfc <NoteSTR+0x13c>)
 800edc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800edc8:	b29b      	uxth	r3, r3
 800edca:	3b0e      	subs	r3, #14
 800edcc:	b29b      	uxth	r3, r3
 800edce:	b21a      	sxth	r2, r3
 800edd0:	4b0a      	ldr	r3, [pc, #40]	; (800edfc <NoteSTR+0x13c>)
 800edd2:	801a      	strh	r2, [r3, #0]
 800edd4:	8afb      	ldrh	r3, [r7, #22]
 800edd6:	3301      	adds	r3, #1
 800edd8:	b29b      	uxth	r3, r3
 800edda:	82fb      	strh	r3, [r7, #22]
 800eddc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ede0:	2b05      	cmp	r3, #5
 800ede2:	dd86      	ble.n	800ecf2 <NoteSTR+0x32>
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	781b      	ldrb	r3, [r3, #0]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	f47f af7a 	bne.w	800ece2 <NoteSTR+0x22>
 800edee:	bf00      	nop
 800edf0:	bf00      	nop
 800edf2:	3718      	adds	r7, #24
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bd80      	pop	{r7, pc}
 800edf8:	20000006 	.word	0x20000006
 800edfc:	20000008 	.word	0x20000008
 800ee00:	080016c4 	.word	0x080016c4
 800ee04:	08001490 	.word	0x08001490
 800ee08:	ffffaaaa 	.word	0xffffaaaa

0800ee0c <Note_4Point>:
 800ee0c:	b590      	push	{r4, r7, lr}
 800ee0e:	b083      	sub	sp, #12
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	4604      	mov	r4, r0
 800ee14:	4608      	mov	r0, r1
 800ee16:	4611      	mov	r1, r2
 800ee18:	461a      	mov	r2, r3
 800ee1a:	4623      	mov	r3, r4
 800ee1c:	71fb      	strb	r3, [r7, #7]
 800ee1e:	4603      	mov	r3, r0
 800ee20:	80bb      	strh	r3, [r7, #4]
 800ee22:	460b      	mov	r3, r1
 800ee24:	807b      	strh	r3, [r7, #2]
 800ee26:	4613      	mov	r3, r2
 800ee28:	71bb      	strb	r3, [r7, #6]
 800ee2a:	7e3b      	ldrb	r3, [r7, #24]
 800ee2c:	3304      	adds	r3, #4
 800ee2e:	763b      	strb	r3, [r7, #24]
 800ee30:	4a2e      	ldr	r2, [pc, #184]	; (800eeec <Note_4Point+0xe0>)
 800ee32:	88bb      	ldrh	r3, [r7, #4]
 800ee34:	8013      	strh	r3, [r2, #0]
 800ee36:	4a2e      	ldr	r2, [pc, #184]	; (800eef0 <Note_4Point+0xe4>)
 800ee38:	887b      	ldrh	r3, [r7, #2]
 800ee3a:	8013      	strh	r3, [r2, #0]
 800ee3c:	79fb      	ldrb	r3, [r7, #7]
 800ee3e:	f003 0301 	and.w	r3, r3, #1
 800ee42:	b2db      	uxtb	r3, r3
 800ee44:	4618      	mov	r0, r3
 800ee46:	f7ff fc4b 	bl	800e6e0 <NotePixel>
 800ee4a:	4a28      	ldr	r2, [pc, #160]	; (800eeec <Note_4Point+0xe0>)
 800ee4c:	88bb      	ldrh	r3, [r7, #4]
 800ee4e:	8013      	strh	r3, [r2, #0]
 800ee50:	7e3b      	ldrb	r3, [r7, #24]
 800ee52:	b29a      	uxth	r2, r3
 800ee54:	887b      	ldrh	r3, [r7, #2]
 800ee56:	4413      	add	r3, r2
 800ee58:	b29b      	uxth	r3, r3
 800ee5a:	3b01      	subs	r3, #1
 800ee5c:	b29b      	uxth	r3, r3
 800ee5e:	b21a      	sxth	r2, r3
 800ee60:	4b23      	ldr	r3, [pc, #140]	; (800eef0 <Note_4Point+0xe4>)
 800ee62:	801a      	strh	r2, [r3, #0]
 800ee64:	79fb      	ldrb	r3, [r7, #7]
 800ee66:	f003 0301 	and.w	r3, r3, #1
 800ee6a:	b2db      	uxtb	r3, r3
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f7ff fc37 	bl	800e6e0 <NotePixel>
 800ee72:	79bb      	ldrb	r3, [r7, #6]
 800ee74:	b29b      	uxth	r3, r3
 800ee76:	461a      	mov	r2, r3
 800ee78:	0052      	lsls	r2, r2, #1
 800ee7a:	4413      	add	r3, r2
 800ee7c:	005b      	lsls	r3, r3, #1
 800ee7e:	b29a      	uxth	r2, r3
 800ee80:	88bb      	ldrh	r3, [r7, #4]
 800ee82:	4413      	add	r3, r2
 800ee84:	b29b      	uxth	r3, r3
 800ee86:	3b01      	subs	r3, #1
 800ee88:	b29b      	uxth	r3, r3
 800ee8a:	b21a      	sxth	r2, r3
 800ee8c:	4b17      	ldr	r3, [pc, #92]	; (800eeec <Note_4Point+0xe0>)
 800ee8e:	801a      	strh	r2, [r3, #0]
 800ee90:	4a17      	ldr	r2, [pc, #92]	; (800eef0 <Note_4Point+0xe4>)
 800ee92:	887b      	ldrh	r3, [r7, #2]
 800ee94:	8013      	strh	r3, [r2, #0]
 800ee96:	79fb      	ldrb	r3, [r7, #7]
 800ee98:	f003 0301 	and.w	r3, r3, #1
 800ee9c:	b2db      	uxtb	r3, r3
 800ee9e:	4618      	mov	r0, r3
 800eea0:	f7ff fc1e 	bl	800e6e0 <NotePixel>
 800eea4:	79bb      	ldrb	r3, [r7, #6]
 800eea6:	b29b      	uxth	r3, r3
 800eea8:	461a      	mov	r2, r3
 800eeaa:	0052      	lsls	r2, r2, #1
 800eeac:	4413      	add	r3, r2
 800eeae:	005b      	lsls	r3, r3, #1
 800eeb0:	b29a      	uxth	r2, r3
 800eeb2:	88bb      	ldrh	r3, [r7, #4]
 800eeb4:	4413      	add	r3, r2
 800eeb6:	b29b      	uxth	r3, r3
 800eeb8:	3b01      	subs	r3, #1
 800eeba:	b29b      	uxth	r3, r3
 800eebc:	b21a      	sxth	r2, r3
 800eebe:	4b0b      	ldr	r3, [pc, #44]	; (800eeec <Note_4Point+0xe0>)
 800eec0:	801a      	strh	r2, [r3, #0]
 800eec2:	7e3b      	ldrb	r3, [r7, #24]
 800eec4:	b29a      	uxth	r2, r3
 800eec6:	887b      	ldrh	r3, [r7, #2]
 800eec8:	4413      	add	r3, r2
 800eeca:	b29b      	uxth	r3, r3
 800eecc:	3b01      	subs	r3, #1
 800eece:	b29b      	uxth	r3, r3
 800eed0:	b21a      	sxth	r2, r3
 800eed2:	4b07      	ldr	r3, [pc, #28]	; (800eef0 <Note_4Point+0xe4>)
 800eed4:	801a      	strh	r2, [r3, #0]
 800eed6:	79fb      	ldrb	r3, [r7, #7]
 800eed8:	f003 0301 	and.w	r3, r3, #1
 800eedc:	b2db      	uxtb	r3, r3
 800eede:	4618      	mov	r0, r3
 800eee0:	f7ff fbfe 	bl	800e6e0 <NotePixel>
 800eee4:	bf00      	nop
 800eee6:	370c      	adds	r7, #12
 800eee8:	46bd      	mov	sp, r7
 800eeea:	bd90      	pop	{r4, r7, pc}
 800eeec:	20000006 	.word	0x20000006
 800eef0:	20000008 	.word	0x20000008

0800eef4 <ExtFlash_SendByte>:

/*******************************************************************************
 SPI_FLASH_SendByte
*******************************************************************************/
char ExtFlash_SendByte(char byte)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b084      	sub	sp, #16
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	4603      	mov	r3, r0
 800eefc:	71fb      	strb	r3, [r7, #7]
   char retbyte=0;
 800eefe:	2300      	movs	r3, #0
 800ef00:	73fb      	strb	r3, [r7, #15]
	Tout = 0;
 800ef02:	4b1d      	ldr	r3, [pc, #116]	; (800ef78 <ExtFlash_SendByte+0x84>)
 800ef04:	2200      	movs	r2, #0
 800ef06:	601a      	str	r2, [r3, #0]
  while(HAL_SPI_GetState( &hspi2 ) != HAL_SPI_STATE_READY) /*SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET*/
 800ef08:	e009      	b.n	800ef1e <ExtFlash_SendByte+0x2a>
  {
    if(Tout++ > TMAX)
 800ef0a:	4b1b      	ldr	r3, [pc, #108]	; (800ef78 <ExtFlash_SendByte+0x84>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	1c5a      	adds	r2, r3, #1
 800ef10:	4919      	ldr	r1, [pc, #100]	; (800ef78 <ExtFlash_SendByte+0x84>)
 800ef12:	600a      	str	r2, [r1, #0]
 800ef14:	4a19      	ldr	r2, [pc, #100]	; (800ef7c <ExtFlash_SendByte+0x88>)
 800ef16:	4293      	cmp	r3, r2
 800ef18:	d901      	bls.n	800ef1e <ExtFlash_SendByte+0x2a>
    	return 255;
 800ef1a:	23ff      	movs	r3, #255	; 0xff
 800ef1c:	e027      	b.n	800ef6e <ExtFlash_SendByte+0x7a>
  while(HAL_SPI_GetState( &hspi2 ) != HAL_SPI_STATE_READY) /*SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET*/
 800ef1e:	4818      	ldr	r0, [pc, #96]	; (800ef80 <ExtFlash_SendByte+0x8c>)
 800ef20:	f00e f810 	bl	801cf44 <HAL_SPI_GetState>
 800ef24:	4603      	mov	r3, r0
 800ef26:	2b01      	cmp	r3, #1
 800ef28:	d1ef      	bne.n	800ef0a <ExtFlash_SendByte+0x16>
  }
  HAL_SPI_Transmit(&hspi2, (unsigned char*)&byte, 1, 1);// timeout 1 ms  SPI_I2S_SendData(SPI2, byte);
 800ef2a:	1df9      	adds	r1, r7, #7
 800ef2c:	2301      	movs	r3, #1
 800ef2e:	2201      	movs	r2, #1
 800ef30:	4813      	ldr	r0, [pc, #76]	; (800ef80 <ExtFlash_SendByte+0x8c>)
 800ef32:	f00d fb0e 	bl	801c552 <HAL_SPI_Transmit>
  Tout = 0;
 800ef36:	4b10      	ldr	r3, [pc, #64]	; (800ef78 <ExtFlash_SendByte+0x84>)
 800ef38:	2200      	movs	r2, #0
 800ef3a:	601a      	str	r2, [r3, #0]
  while(HAL_SPI_GetState( &hspi2 ) != HAL_SPI_STATE_READY) //  while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET)
 800ef3c:	e009      	b.n	800ef52 <ExtFlash_SendByte+0x5e>
  {
    if(Tout++ > TMAX)
 800ef3e:	4b0e      	ldr	r3, [pc, #56]	; (800ef78 <ExtFlash_SendByte+0x84>)
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	1c5a      	adds	r2, r3, #1
 800ef44:	490c      	ldr	r1, [pc, #48]	; (800ef78 <ExtFlash_SendByte+0x84>)
 800ef46:	600a      	str	r2, [r1, #0]
 800ef48:	4a0c      	ldr	r2, [pc, #48]	; (800ef7c <ExtFlash_SendByte+0x88>)
 800ef4a:	4293      	cmp	r3, r2
 800ef4c:	d901      	bls.n	800ef52 <ExtFlash_SendByte+0x5e>
    	return 255;
 800ef4e:	23ff      	movs	r3, #255	; 0xff
 800ef50:	e00d      	b.n	800ef6e <ExtFlash_SendByte+0x7a>
  while(HAL_SPI_GetState( &hspi2 ) != HAL_SPI_STATE_READY) //  while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET)
 800ef52:	480b      	ldr	r0, [pc, #44]	; (800ef80 <ExtFlash_SendByte+0x8c>)
 800ef54:	f00d fff6 	bl	801cf44 <HAL_SPI_GetState>
 800ef58:	4603      	mov	r3, r0
 800ef5a:	2b01      	cmp	r3, #1
 800ef5c:	d1ef      	bne.n	800ef3e <ExtFlash_SendByte+0x4a>
  }
  HAL_SPI_Receive(&hspi2, (unsigned char*)&retbyte, 1, 1); //timeout 1 ms
 800ef5e:	f107 010f 	add.w	r1, r7, #15
 800ef62:	2301      	movs	r3, #1
 800ef64:	2201      	movs	r2, #1
 800ef66:	4806      	ldr	r0, [pc, #24]	; (800ef80 <ExtFlash_SendByte+0x8c>)
 800ef68:	f00d fc2f 	bl	801c7ca <HAL_SPI_Receive>
  return retbyte/*SPI_I2S_ReceiveData(SPI2)*/;
 800ef6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef6e:	4618      	mov	r0, r3
 800ef70:	3710      	adds	r7, #16
 800ef72:	46bd      	mov	sp, r7
 800ef74:	bd80      	pop	{r7, pc}
 800ef76:	bf00      	nop
 800ef78:	200015d8 	.word	0x200015d8
 800ef7c:	000186a0 	.word	0x000186a0
 800ef80:	2000689c 	.word	0x2000689c

0800ef84 <ExtFlash_WaitForWriteEnd>:

/*******************************************************************************
 SPI_FLASH_WaitForWriteEnd
*******************************************************************************/
void ExtFlash_WaitForWriteEnd(void)
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b082      	sub	sp, #8
 800ef88:	af00      	add	r7, sp, #0
  char FLASH_Status = 0;
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	71fb      	strb	r3, [r7, #7]

  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800ef8e:	2200      	movs	r2, #0
 800ef90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ef94:	4812      	ldr	r0, [pc, #72]	; (800efe0 <ExtFlash_WaitForWriteEnd+0x5c>)
 800ef96:	f00a ffd7 	bl	8019f48 <HAL_GPIO_WritePin>
  ExtFlash_SendByte(RDSR);
 800ef9a:	2005      	movs	r0, #5
 800ef9c:	f7ff ffaa 	bl	800eef4 <ExtFlash_SendByte>
  Tout = 0;
 800efa0:	4b10      	ldr	r3, [pc, #64]	; (800efe4 <ExtFlash_WaitForWriteEnd+0x60>)
 800efa2:	2200      	movs	r2, #0
 800efa4:	601a      	str	r2, [r3, #0]
  do
  {
	  FLASH_Status = ExtFlash_SendByte(Dummy_Byte);
 800efa6:	20a5      	movs	r0, #165	; 0xa5
 800efa8:	f7ff ffa4 	bl	800eef4 <ExtFlash_SendByte>
 800efac:	4603      	mov	r3, r0
 800efae:	71fb      	strb	r3, [r7, #7]
      if(Tout++ > TMAX)
 800efb0:	4b0c      	ldr	r3, [pc, #48]	; (800efe4 <ExtFlash_WaitForWriteEnd+0x60>)
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	1c5a      	adds	r2, r3, #1
 800efb6:	490b      	ldr	r1, [pc, #44]	; (800efe4 <ExtFlash_WaitForWriteEnd+0x60>)
 800efb8:	600a      	str	r2, [r1, #0]
 800efba:	4a0b      	ldr	r2, [pc, #44]	; (800efe8 <ExtFlash_WaitForWriteEnd+0x64>)
 800efbc:	4293      	cmp	r3, r2
 800efbe:	d80b      	bhi.n	800efd8 <ExtFlash_WaitForWriteEnd+0x54>
    	  return;
  }
  while((FLASH_Status & WIP_Flag) == SET);              // Write in progress
 800efc0:	79fb      	ldrb	r3, [r7, #7]
 800efc2:	f003 0301 	and.w	r3, r3, #1
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d1ed      	bne.n	800efa6 <ExtFlash_WaitForWriteEnd+0x22>
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET);
 800efca:	2201      	movs	r2, #1
 800efcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800efd0:	4803      	ldr	r0, [pc, #12]	; (800efe0 <ExtFlash_WaitForWriteEnd+0x5c>)
 800efd2:	f00a ffb9 	bl	8019f48 <HAL_GPIO_WritePin>
 800efd6:	e000      	b.n	800efda <ExtFlash_WaitForWriteEnd+0x56>
    	  return;
 800efd8:	bf00      	nop
}
 800efda:	3708      	adds	r7, #8
 800efdc:	46bd      	mov	sp, r7
 800efde:	bd80      	pop	{r7, pc}
 800efe0:	40020400 	.word	0x40020400
 800efe4:	200015d8 	.word	0x200015d8
 800efe8:	000186a0 	.word	0x000186a0

0800efec <ExtFlash_PageRD>:

/*******************************************************************************
 SPI_FLASH_BufferRead
*******************************************************************************/
void ExtFlash_PageRD(char* pBuffer, unsigned ReadAddr, short Length)
{
 800efec:	b580      	push	{r7, lr}
 800efee:	b084      	sub	sp, #16
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	60f8      	str	r0, [r7, #12]
 800eff4:	60b9      	str	r1, [r7, #8]
 800eff6:	4613      	mov	r3, r2
 800eff8:	80fb      	strh	r3, [r7, #6]
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800effa:	2201      	movs	r2, #1
 800effc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800f000:	481d      	ldr	r0, [pc, #116]	; (800f078 <ExtFlash_PageRD+0x8c>)
 800f002:	f00a ffa1 	bl	8019f48 <HAL_GPIO_WritePin>
  ExtFlash_WaitForWriteEnd();
 800f006:	f7ff ffbd 	bl	800ef84 <ExtFlash_WaitForWriteEnd>
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800f00a:	2200      	movs	r2, #0
 800f00c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800f010:	4819      	ldr	r0, [pc, #100]	; (800f078 <ExtFlash_PageRD+0x8c>)
 800f012:	f00a ff99 	bl	8019f48 <HAL_GPIO_WritePin>
  ExtFlash_SendByte(READ);
 800f016:	2003      	movs	r0, #3
 800f018:	f7ff ff6c 	bl	800eef4 <ExtFlash_SendByte>
  ExtFlash_SendByte((ReadAddr & 0xFF0000) >> 16);
 800f01c:	68bb      	ldr	r3, [r7, #8]
 800f01e:	0c1b      	lsrs	r3, r3, #16
 800f020:	b2db      	uxtb	r3, r3
 800f022:	4618      	mov	r0, r3
 800f024:	f7ff ff66 	bl	800eef4 <ExtFlash_SendByte>
  ExtFlash_SendByte((ReadAddr& 0xFF00) >> 8);
 800f028:	68bb      	ldr	r3, [r7, #8]
 800f02a:	0a1b      	lsrs	r3, r3, #8
 800f02c:	b2db      	uxtb	r3, r3
 800f02e:	4618      	mov	r0, r3
 800f030:	f7ff ff60 	bl	800eef4 <ExtFlash_SendByte>
  ExtFlash_SendByte(ReadAddr & 0xFF);
 800f034:	68bb      	ldr	r3, [r7, #8]
 800f036:	b2db      	uxtb	r3, r3
 800f038:	4618      	mov	r0, r3
 800f03a:	f7ff ff5b 	bl	800eef4 <ExtFlash_SendByte>

  while(Length--)
 800f03e:	e009      	b.n	800f054 <ExtFlash_PageRD+0x68>
  { // while there is data to be read
    *pBuffer = (ExtFlash_SendByte(Dummy_Byte));
 800f040:	20a5      	movs	r0, #165	; 0xa5
 800f042:	f7ff ff57 	bl	800eef4 <ExtFlash_SendByte>
 800f046:	4603      	mov	r3, r0
 800f048:	461a      	mov	r2, r3
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	701a      	strb	r2, [r3, #0]
    pBuffer++;
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	3301      	adds	r3, #1
 800f052:	60fb      	str	r3, [r7, #12]
  while(Length--)
 800f054:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f058:	b29a      	uxth	r2, r3
 800f05a:	3a01      	subs	r2, #1
 800f05c:	b292      	uxth	r2, r2
 800f05e:	80fa      	strh	r2, [r7, #6]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d1ed      	bne.n	800f040 <ExtFlash_PageRD+0x54>
  }
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET);
 800f064:	2201      	movs	r2, #1
 800f066:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800f06a:	4803      	ldr	r0, [pc, #12]	; (800f078 <ExtFlash_PageRD+0x8c>)
 800f06c:	f00a ff6c 	bl	8019f48 <HAL_GPIO_WritePin>
}
 800f070:	bf00      	nop
 800f072:	3710      	adds	r7, #16
 800f074:	46bd      	mov	sp, r7
 800f076:	bd80      	pop	{r7, pc}
 800f078:	40020400 	.word	0x40020400

0800f07c <ExtFlash_WriteEnable>:

/*******************************************************************************
 SPI_FLASH_WriteEnable
*******************************************************************************/
void ExtFlash_WriteEnable(void)
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800f080:	2200      	movs	r2, #0
 800f082:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800f086:	4807      	ldr	r0, [pc, #28]	; (800f0a4 <ExtFlash_WriteEnable+0x28>)
 800f088:	f00a ff5e 	bl	8019f48 <HAL_GPIO_WritePin>
  ExtFlash_SendByte(WREN);
 800f08c:	2006      	movs	r0, #6
 800f08e:	f7ff ff31 	bl	800eef4 <ExtFlash_SendByte>
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800f092:	2201      	movs	r2, #1
 800f094:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800f098:	4802      	ldr	r0, [pc, #8]	; (800f0a4 <ExtFlash_WriteEnable+0x28>)
 800f09a:	f00a ff55 	bl	8019f48 <HAL_GPIO_WritePin>
}
 800f09e:	bf00      	nop
 800f0a0:	bd80      	pop	{r7, pc}
 800f0a2:	bf00      	nop
 800f0a4:	40020400 	.word	0x40020400

0800f0a8 <ExtFlash_PageProg>:

/*******************************************************************************
 дFLASHҳ(256 Bytes)�� Mode=0: ��0��1���ݸ�д   Mode=1: ������д
*******************************************************************************/
void ExtFlash_PageProg(char* pBuffer, unsigned WriteAddr)
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b084      	sub	sp, #16
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
 800f0b0:	6039      	str	r1, [r7, #0]
  short   Lenght = 256;
 800f0b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f0b6:	81fb      	strh	r3, [r7, #14]

  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800f0b8:	2201      	movs	r2, #1
 800f0ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800f0be:	481f      	ldr	r0, [pc, #124]	; (800f13c <ExtFlash_PageProg+0x94>)
 800f0c0:	f00a ff42 	bl	8019f48 <HAL_GPIO_WritePin>
  ExtFlash_WaitForWriteEnd();
 800f0c4:	f7ff ff5e 	bl	800ef84 <ExtFlash_WaitForWriteEnd>
  ExtFlash_WriteEnable();
 800f0c8:	f7ff ffd8 	bl	800f07c <ExtFlash_WriteEnable>
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800f0cc:	2200      	movs	r2, #0
 800f0ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800f0d2:	481a      	ldr	r0, [pc, #104]	; (800f13c <ExtFlash_PageProg+0x94>)
 800f0d4:	f00a ff38 	bl	8019f48 <HAL_GPIO_WritePin>
  ExtFlash_SendByte(PP);
 800f0d8:	2002      	movs	r0, #2
 800f0da:	f7ff ff0b 	bl	800eef4 <ExtFlash_SendByte>
  ExtFlash_SendByte((WriteAddr & 0xFF0000) >> 16);
 800f0de:	683b      	ldr	r3, [r7, #0]
 800f0e0:	0c1b      	lsrs	r3, r3, #16
 800f0e2:	b2db      	uxtb	r3, r3
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	f7ff ff05 	bl	800eef4 <ExtFlash_SendByte>
  ExtFlash_SendByte((WriteAddr & 0xFF00) >> 8);
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	0a1b      	lsrs	r3, r3, #8
 800f0ee:	b2db      	uxtb	r3, r3
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	f7ff feff 	bl	800eef4 <ExtFlash_SendByte>
  ExtFlash_SendByte(WriteAddr & 0xFF);
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	b2db      	uxtb	r3, r3
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	f7ff fefa 	bl	800eef4 <ExtFlash_SendByte>
  while(Lenght--) {
 800f100:	e007      	b.n	800f112 <ExtFlash_PageProg+0x6a>
    ExtFlash_SendByte((*pBuffer));
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	781b      	ldrb	r3, [r3, #0]
 800f106:	4618      	mov	r0, r3
 800f108:	f7ff fef4 	bl	800eef4 <ExtFlash_SendByte>
    pBuffer++;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	3301      	adds	r3, #1
 800f110:	607b      	str	r3, [r7, #4]
  while(Lenght--) {
 800f112:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f116:	b29a      	uxth	r2, r3
 800f118:	3a01      	subs	r2, #1
 800f11a:	b292      	uxth	r2, r2
 800f11c:	81fa      	strh	r2, [r7, #14]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d1ef      	bne.n	800f102 <ExtFlash_PageProg+0x5a>
  }
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800f122:	2201      	movs	r2, #1
 800f124:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800f128:	4804      	ldr	r0, [pc, #16]	; (800f13c <ExtFlash_PageProg+0x94>)
 800f12a:	f00a ff0d 	bl	8019f48 <HAL_GPIO_WritePin>
  ExtFlash_WaitForWriteEnd();
 800f12e:	f7ff ff29 	bl	800ef84 <ExtFlash_WaitForWriteEnd>
}
 800f132:	bf00      	nop
 800f134:	3710      	adds	r7, #16
 800f136:	46bd      	mov	sp, r7
 800f138:	bd80      	pop	{r7, pc}
 800f13a:	bf00      	nop
 800f13c:	40020400 	.word	0x40020400

0800f140 <ExtFLASH_SectorErase>:

/*******************************************************************************
 SPI_FLASH_SectorErase  : Sector Erases the specified FLASH Page.(4k/sector)
*******************************************************************************/
void ExtFLASH_SectorErase(unsigned SectorAddr)
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b082      	sub	sp, #8
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
    ExtFlash_WriteEnable();
 800f148:	f7ff ff98 	bl	800f07c <ExtFlash_WriteEnable>
    HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800f14c:	2200      	movs	r2, #0
 800f14e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800f152:	4811      	ldr	r0, [pc, #68]	; (800f198 <ExtFLASH_SectorErase+0x58>)
 800f154:	f00a fef8 	bl	8019f48 <HAL_GPIO_WritePin>
    ExtFlash_SendByte(SE);
 800f158:	2020      	movs	r0, #32
 800f15a:	f7ff fecb 	bl	800eef4 <ExtFlash_SendByte>
    ExtFlash_SendByte((SectorAddr & 0xFF0000) >> 16);   //Send high address byte
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	0c1b      	lsrs	r3, r3, #16
 800f162:	b2db      	uxtb	r3, r3
 800f164:	4618      	mov	r0, r3
 800f166:	f7ff fec5 	bl	800eef4 <ExtFlash_SendByte>
    ExtFlash_SendByte((SectorAddr & 0xFF00) >> 8);      //Send medium address byte
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	0a1b      	lsrs	r3, r3, #8
 800f16e:	b2db      	uxtb	r3, r3
 800f170:	4618      	mov	r0, r3
 800f172:	f7ff febf 	bl	800eef4 <ExtFlash_SendByte>
    ExtFlash_SendByte(SectorAddr & 0xFF);               //Send low address byte */
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	b2db      	uxtb	r3, r3
 800f17a:	4618      	mov	r0, r3
 800f17c:	f7ff feba 	bl	800eef4 <ExtFlash_SendByte>
    HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800f180:	2201      	movs	r2, #1
 800f182:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800f186:	4804      	ldr	r0, [pc, #16]	; (800f198 <ExtFLASH_SectorErase+0x58>)
 800f188:	f00a fede 	bl	8019f48 <HAL_GPIO_WritePin>
    ExtFlash_WaitForWriteEnd();                         // Wait the end of Flash writing
 800f18c:	f7ff fefa 	bl	800ef84 <ExtFlash_WaitForWriteEnd>
}
 800f190:	bf00      	nop
 800f192:	3708      	adds	r7, #8
 800f194:	46bd      	mov	sp, r7
 800f196:	bd80      	pop	{r7, pc}
 800f198:	40020400 	.word	0x40020400

0800f19c <ExtFlash_PageWR>:

void ExtFlash_PageWR(char* pBuffer, unsigned WriteAddr)
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b0c8      	sub	sp, #288	; 0x120
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	1d3b      	adds	r3, r7, #4
 800f1a4:	6018      	str	r0, [r3, #0]
 800f1a6:	463b      	mov	r3, r7
 800f1a8:	6019      	str	r1, [r3, #0]
  unsigned addr,i,j;
  char* ptr;
  char  page=0,flag=0;
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
  char  buffer[256];

  flag=0;
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
    addr=WriteAddr & 0xFFF000;
 800f1bc:	463b      	mov	r3, r7
 800f1be:	681a      	ldr	r2, [r3, #0]
 800f1c0:	4b3b      	ldr	r3, [pc, #236]	; (800f2b0 <ExtFlash_PageWR+0x114>)
 800f1c2:	4013      	ands	r3, r2
 800f1c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    page=16;
 800f1c8:	2310      	movs	r3, #16
 800f1ca:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  while(page>0)
 800f1ce:	e02e      	b.n	800f22e <ExtFlash_PageWR+0x92>
  {
    ExtFlash_PageRD((char*)&buffer,addr, 256);
 800f1d0:	f107 030c 	add.w	r3, r7, #12
 800f1d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f1d8:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800f1dc:	4618      	mov	r0, r3
 800f1de:	f7ff ff05 	bl	800efec <ExtFlash_PageRD>
    for(j=0;j<255;j++){
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800f1e8:	e012      	b.n	800f210 <ExtFlash_PageWR+0x74>
      if(buffer[j++]!=0xff){
 800f1ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1ee:	1c5a      	adds	r2, r3, #1
 800f1f0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 800f1f4:	f107 020c 	add.w	r2, r7, #12
 800f1f8:	5cd3      	ldrb	r3, [r2, r3]
 800f1fa:	2bff      	cmp	r3, #255	; 0xff
 800f1fc:	d003      	beq.n	800f206 <ExtFlash_PageWR+0x6a>
        flag=1;
 800f1fe:	2301      	movs	r3, #1
 800f200:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
        break;
 800f204:	e008      	b.n	800f218 <ExtFlash_PageWR+0x7c>
    for(j=0;j<255;j++){
 800f206:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f20a:	3301      	adds	r3, #1
 800f20c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800f210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f214:	2bfe      	cmp	r3, #254	; 0xfe
 800f216:	d9e8      	bls.n	800f1ea <ExtFlash_PageWR+0x4e>
      }
    }
    addr+=256;
 800f218:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f21c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f220:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    page--;
 800f224:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800f228:	3b01      	subs	r3, #1
 800f22a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  while(page>0)
 800f22e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800f232:	2b00      	cmp	r3, #0
 800f234:	d1cc      	bne.n	800f1d0 <ExtFlash_PageWR+0x34>
  }
    page=16;
 800f236:	2310      	movs	r3, #16
 800f238:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
    addr=WriteAddr & 0xFFF000;
 800f23c:	463b      	mov	r3, r7
 800f23e:	681a      	ldr	r2, [r3, #0]
 800f240:	4b1b      	ldr	r3, [pc, #108]	; (800f2b0 <ExtFlash_PageWR+0x114>)
 800f242:	4013      	ands	r3, r2
 800f244:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    if(flag==1)ExtFLASH_SectorErase(addr);
 800f248:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800f24c:	2b01      	cmp	r3, #1
 800f24e:	d103      	bne.n	800f258 <ExtFlash_PageWR+0xbc>
 800f250:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800f254:	f7ff ff74 	bl	800f140 <ExtFLASH_SectorErase>
  ptr=pBuffer;
 800f258:	1d3b      	adds	r3, r7, #4
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  for(i=0;i<page;i++){
 800f260:	2300      	movs	r3, #0
 800f262:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800f266:	e016      	b.n	800f296 <ExtFlash_PageWR+0xfa>
    ExtFlash_PageProg(ptr, addr);
 800f268:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800f26c:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800f270:	f7ff ff1a 	bl	800f0a8 <ExtFlash_PageProg>
    addr+=256;
 800f274:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f278:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f27c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    ptr+=256;
 800f280:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800f284:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f288:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  for(i=0;i<page;i++){
 800f28c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f290:	3301      	adds	r3, #1
 800f292:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800f296:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800f29a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f29e:	429a      	cmp	r2, r3
 800f2a0:	d3e2      	bcc.n	800f268 <ExtFlash_PageWR+0xcc>
  }
}
 800f2a2:	bf00      	nop
 800f2a4:	bf00      	nop
 800f2a6:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	bd80      	pop	{r7, pc}
 800f2ae:	bf00      	nop
 800f2b0:	00fff000 	.word	0x00fff000

0800f2b4 <ReadDiskData>:
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b086      	sub	sp, #24
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	60f8      	str	r0, [r7, #12]
 800f2bc:	60b9      	str	r1, [r7, #8]
 800f2be:	4613      	mov	r3, r2
 800f2c0:	80fb      	strh	r3, [r7, #6]
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	75fb      	strb	r3, [r7, #23]
 800f2c6:	4b0d      	ldr	r3, [pc, #52]	; (800f2fc <ReadDiskData+0x48>)
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	701a      	strb	r2, [r3, #0]
 800f2cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f2d0:	461a      	mov	r2, r3
 800f2d2:	68b9      	ldr	r1, [r7, #8]
 800f2d4:	68f8      	ldr	r0, [r7, #12]
 800f2d6:	f7ff fe89 	bl	800efec <ExtFlash_PageRD>
 800f2da:	7dfb      	ldrb	r3, [r7, #23]
 800f2dc:	1c5a      	adds	r2, r3, #1
 800f2de:	75fa      	strb	r2, [r7, #23]
 800f2e0:	2b06      	cmp	r3, #6
 800f2e2:	d901      	bls.n	800f2e8 <ReadDiskData+0x34>
 800f2e4:	2301      	movs	r3, #1
 800f2e6:	e004      	b.n	800f2f2 <ReadDiskData+0x3e>
 800f2e8:	4b04      	ldr	r3, [pc, #16]	; (800f2fc <ReadDiskData+0x48>)
 800f2ea:	781b      	ldrb	r3, [r3, #0]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d1ea      	bne.n	800f2c6 <ReadDiskData+0x12>
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	3718      	adds	r7, #24
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	bd80      	pop	{r7, pc}
 800f2fa:	bf00      	nop
 800f2fc:	20000797 	.word	0x20000797

0800f300 <OpenFileRd>:
 800f300:	b580      	push	{r7, lr}
 800f302:	b086      	sub	sp, #24
 800f304:	af00      	add	r7, sp, #0
 800f306:	60f8      	str	r0, [r7, #12]
 800f308:	60b9      	str	r1, [r7, #8]
 800f30a:	607a      	str	r2, [r7, #4]
 800f30c:	603b      	str	r3, [r7, #0]
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	2200      	movs	r2, #0
 800f312:	801a      	strh	r2, [r3, #0]
 800f314:	4b35      	ldr	r3, [pc, #212]	; (800f3ec <OpenFileRd+0xec>)
 800f316:	689a      	ldr	r2, [r3, #8]
 800f318:	683b      	ldr	r3, [r7, #0]
 800f31a:	601a      	str	r2, [r3, #0]
 800f31c:	e05b      	b.n	800f3d6 <OpenFileRd+0xd6>
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	4a32      	ldr	r2, [pc, #200]	; (800f3ec <OpenFileRd+0xec>)
 800f324:	6952      	ldr	r2, [r2, #20]
 800f326:	b212      	sxth	r2, r2
 800f328:	4619      	mov	r1, r3
 800f32a:	68f8      	ldr	r0, [r7, #12]
 800f32c:	f7ff ffc2 	bl	800f2b4 <ReadDiskData>
 800f330:	4603      	mov	r3, r0
 800f332:	2b00      	cmp	r3, #0
 800f334:	d001      	beq.n	800f33a <OpenFileRd+0x3a>
 800f336:	2301      	movs	r3, #1
 800f338:	e054      	b.n	800f3e4 <OpenFileRd+0xe4>
 800f33a:	2300      	movs	r3, #0
 800f33c:	82bb      	strh	r3, [r7, #20]
 800f33e:	e044      	b.n	800f3ca <OpenFileRd+0xca>
 800f340:	2300      	movs	r3, #0
 800f342:	82fb      	strh	r3, [r7, #22]
 800f344:	e031      	b.n	800f3aa <OpenFileRd+0xaa>
 800f346:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800f34a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f34e:	4413      	add	r3, r2
 800f350:	461a      	mov	r2, r3
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	4413      	add	r3, r2
 800f356:	781b      	ldrb	r3, [r3, #0]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d01e      	beq.n	800f39a <OpenFileRd+0x9a>
 800f35c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800f360:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f364:	4413      	add	r3, r2
 800f366:	461a      	mov	r2, r3
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	4413      	add	r3, r2
 800f36c:	781a      	ldrb	r2, [r3, #0]
 800f36e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f372:	68b9      	ldr	r1, [r7, #8]
 800f374:	440b      	add	r3, r1
 800f376:	781b      	ldrb	r3, [r3, #0]
 800f378:	429a      	cmp	r2, r3
 800f37a:	d11b      	bne.n	800f3b4 <OpenFileRd+0xb4>
 800f37c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f380:	2b0a      	cmp	r3, #10
 800f382:	d10c      	bne.n	800f39e <OpenFileRd+0x9e>
 800f384:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f388:	331a      	adds	r3, #26
 800f38a:	68fa      	ldr	r2, [r7, #12]
 800f38c:	4413      	add	r3, r2
 800f38e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	801a      	strh	r2, [r3, #0]
 800f396:	2300      	movs	r3, #0
 800f398:	e024      	b.n	800f3e4 <OpenFileRd+0xe4>
 800f39a:	2304      	movs	r3, #4
 800f39c:	e022      	b.n	800f3e4 <OpenFileRd+0xe4>
 800f39e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f3a2:	b29b      	uxth	r3, r3
 800f3a4:	3301      	adds	r3, #1
 800f3a6:	b29b      	uxth	r3, r3
 800f3a8:	82fb      	strh	r3, [r7, #22]
 800f3aa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f3ae:	2b0a      	cmp	r3, #10
 800f3b0:	ddc9      	ble.n	800f346 <OpenFileRd+0x46>
 800f3b2:	e000      	b.n	800f3b6 <OpenFileRd+0xb6>
 800f3b4:	bf00      	nop
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	f103 0220 	add.w	r2, r3, #32
 800f3be:	683b      	ldr	r3, [r7, #0]
 800f3c0:	601a      	str	r2, [r3, #0]
 800f3c2:	8abb      	ldrh	r3, [r7, #20]
 800f3c4:	3320      	adds	r3, #32
 800f3c6:	b29b      	uxth	r3, r3
 800f3c8:	82bb      	strh	r3, [r7, #20]
 800f3ca:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800f3ce:	4b07      	ldr	r3, [pc, #28]	; (800f3ec <OpenFileRd+0xec>)
 800f3d0:	695b      	ldr	r3, [r3, #20]
 800f3d2:	429a      	cmp	r2, r3
 800f3d4:	d3b4      	bcc.n	800f340 <OpenFileRd+0x40>
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	681a      	ldr	r2, [r3, #0]
 800f3da:	4b04      	ldr	r3, [pc, #16]	; (800f3ec <OpenFileRd+0xec>)
 800f3dc:	68db      	ldr	r3, [r3, #12]
 800f3de:	429a      	cmp	r2, r3
 800f3e0:	d39d      	bcc.n	800f31e <OpenFileRd+0x1e>
 800f3e2:	2303      	movs	r3, #3
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	3718      	adds	r7, #24
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	bd80      	pop	{r7, pc}
 800f3ec:	20000198 	.word	0x20000198

0800f3f0 <ProgDiskPage>:
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b084      	sub	sp, #16
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
 800f3f8:	6039      	str	r1, [r7, #0]
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	73fb      	strb	r3, [r7, #15]
 800f3fe:	4b0c      	ldr	r3, [pc, #48]	; (800f430 <ProgDiskPage+0x40>)
 800f400:	2200      	movs	r2, #0
 800f402:	701a      	strb	r2, [r3, #0]
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	4619      	mov	r1, r3
 800f408:	6878      	ldr	r0, [r7, #4]
 800f40a:	f7ff fec7 	bl	800f19c <ExtFlash_PageWR>
 800f40e:	7bfb      	ldrb	r3, [r7, #15]
 800f410:	1c5a      	adds	r2, r3, #1
 800f412:	73fa      	strb	r2, [r7, #15]
 800f414:	2b06      	cmp	r3, #6
 800f416:	d901      	bls.n	800f41c <ProgDiskPage+0x2c>
 800f418:	2301      	movs	r3, #1
 800f41a:	e004      	b.n	800f426 <ProgDiskPage+0x36>
 800f41c:	4b04      	ldr	r3, [pc, #16]	; (800f430 <ProgDiskPage+0x40>)
 800f41e:	781b      	ldrb	r3, [r3, #0]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d1ec      	bne.n	800f3fe <ProgDiskPage+0xe>
 800f424:	2300      	movs	r3, #0
 800f426:	4618      	mov	r0, r3
 800f428:	3710      	adds	r7, #16
 800f42a:	46bd      	mov	sp, r7
 800f42c:	bd80      	pop	{r7, pc}
 800f42e:	bf00      	nop
 800f430:	20000797 	.word	0x20000797

0800f434 <SeekBlank>:
 800f434:	b580      	push	{r7, lr}
 800f436:	b084      	sub	sp, #16
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
 800f43c:	6039      	str	r1, [r7, #0]
 800f43e:	2301      	movs	r3, #1
 800f440:	73fb      	strb	r3, [r7, #15]
 800f442:	683b      	ldr	r3, [r7, #0]
 800f444:	3302      	adds	r3, #2
 800f446:	683a      	ldr	r2, [r7, #0]
 800f448:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f44c:	801a      	strh	r2, [r3, #0]
 800f44e:	683b      	ldr	r3, [r7, #0]
 800f450:	2200      	movs	r2, #0
 800f452:	801a      	strh	r2, [r3, #0]
 800f454:	e05b      	b.n	800f50e <SeekBlank+0xda>
 800f456:	4b34      	ldr	r3, [pc, #208]	; (800f528 <SeekBlank+0xf4>)
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	683a      	ldr	r2, [r7, #0]
 800f45c:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f460:	441a      	add	r2, r3
 800f462:	683b      	ldr	r3, [r7, #0]
 800f464:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f468:	0fd9      	lsrs	r1, r3, #31
 800f46a:	440b      	add	r3, r1
 800f46c:	105b      	asrs	r3, r3, #1
 800f46e:	b21b      	sxth	r3, r3
 800f470:	18d1      	adds	r1, r2, r3
 800f472:	f107 0308 	add.w	r3, r7, #8
 800f476:	2202      	movs	r2, #2
 800f478:	4618      	mov	r0, r3
 800f47a:	f7ff ff1b 	bl	800f2b4 <ReadDiskData>
 800f47e:	4603      	mov	r3, r0
 800f480:	2b00      	cmp	r3, #0
 800f482:	d001      	beq.n	800f488 <SeekBlank+0x54>
 800f484:	2301      	movs	r3, #1
 800f486:	e04a      	b.n	800f51e <SeekBlank+0xea>
 800f488:	683b      	ldr	r3, [r7, #0]
 800f48a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f48e:	b29b      	uxth	r3, r3
 800f490:	f003 0301 	and.w	r3, r3, #1
 800f494:	2b00      	cmp	r3, #0
 800f496:	d006      	beq.n	800f4a6 <SeekBlank+0x72>
 800f498:	f107 0308 	add.w	r3, r7, #8
 800f49c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f4a0:	111b      	asrs	r3, r3, #4
 800f4a2:	b21b      	sxth	r3, r3
 800f4a4:	e006      	b.n	800f4b4 <SeekBlank+0x80>
 800f4a6:	f107 0308 	add.w	r3, r7, #8
 800f4aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f4ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f4b2:	b21b      	sxth	r3, r3
 800f4b4:	81bb      	strh	r3, [r7, #12]
 800f4b6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d10f      	bne.n	800f4de <SeekBlank+0xaa>
 800f4be:	7bfb      	ldrb	r3, [r7, #15]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d10c      	bne.n	800f4de <SeekBlank+0xaa>
 800f4c4:	683b      	ldr	r3, [r7, #0]
 800f4c6:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	3302      	adds	r3, #2
 800f4ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f4d2:	429a      	cmp	r2, r3
 800f4d4:	d003      	beq.n	800f4de <SeekBlank+0xaa>
 800f4d6:	2301      	movs	r3, #1
 800f4d8:	73fb      	strb	r3, [r7, #15]
 800f4da:	2300      	movs	r3, #0
 800f4dc:	e01f      	b.n	800f51e <SeekBlank+0xea>
 800f4de:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d10a      	bne.n	800f4fc <SeekBlank+0xc8>
 800f4e6:	7bfb      	ldrb	r3, [r7, #15]
 800f4e8:	2b01      	cmp	r3, #1
 800f4ea:	d107      	bne.n	800f4fc <SeekBlank+0xc8>
 800f4ec:	683b      	ldr	r3, [r7, #0]
 800f4ee:	3304      	adds	r3, #4
 800f4f0:	683a      	ldr	r2, [r7, #0]
 800f4f2:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f4f6:	801a      	strh	r2, [r3, #0]
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	73fb      	strb	r3, [r7, #15]
 800f4fc:	683b      	ldr	r3, [r7, #0]
 800f4fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f502:	b29b      	uxth	r3, r3
 800f504:	3301      	adds	r3, #1
 800f506:	b29b      	uxth	r3, r3
 800f508:	b21a      	sxth	r2, r3
 800f50a:	683b      	ldr	r3, [r7, #0]
 800f50c:	801a      	strh	r2, [r3, #0]
 800f50e:	683b      	ldr	r3, [r7, #0]
 800f510:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f514:	f640 72fe 	movw	r2, #4094	; 0xffe
 800f518:	4293      	cmp	r3, r2
 800f51a:	dd9c      	ble.n	800f456 <SeekBlank+0x22>
 800f51c:	2300      	movs	r3, #0
 800f51e:	4618      	mov	r0, r3
 800f520:	3710      	adds	r7, #16
 800f522:	46bd      	mov	sp, r7
 800f524:	bd80      	pop	{r7, pc}
 800f526:	bf00      	nop
 800f528:	20000198 	.word	0x20000198

0800f52c <SetCluster>:
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b086      	sub	sp, #24
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
 800f534:	6039      	str	r1, [r7, #0]
 800f536:	683b      	ldr	r3, [r7, #0]
 800f538:	885b      	ldrh	r3, [r3, #2]
 800f53a:	82fb      	strh	r3, [r7, #22]
 800f53c:	683b      	ldr	r3, [r7, #0]
 800f53e:	881b      	ldrh	r3, [r3, #0]
 800f540:	82bb      	strh	r3, [r7, #20]
 800f542:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f546:	0fda      	lsrs	r2, r3, #31
 800f548:	4413      	add	r3, r2
 800f54a:	105b      	asrs	r3, r3, #1
 800f54c:	b21b      	sxth	r3, r3
 800f54e:	b29a      	uxth	r2, r3
 800f550:	8afb      	ldrh	r3, [r7, #22]
 800f552:	4413      	add	r3, r2
 800f554:	b29b      	uxth	r3, r3
 800f556:	827b      	strh	r3, [r7, #18]
 800f558:	4b36      	ldr	r3, [pc, #216]	; (800f634 <SetCluster+0x108>)
 800f55a:	681a      	ldr	r2, [r3, #0]
 800f55c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f560:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800f564:	4413      	add	r3, r2
 800f566:	60fb      	str	r3, [r7, #12]
 800f568:	8a7b      	ldrh	r3, [r7, #18]
 800f56a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f56e:	827b      	strh	r3, [r7, #18]
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	4a30      	ldr	r2, [pc, #192]	; (800f634 <SetCluster+0x108>)
 800f574:	6952      	ldr	r2, [r2, #20]
 800f576:	b212      	sxth	r2, r2
 800f578:	4619      	mov	r1, r3
 800f57a:	6878      	ldr	r0, [r7, #4]
 800f57c:	f7ff fe9a 	bl	800f2b4 <ReadDiskData>
 800f580:	4603      	mov	r3, r0
 800f582:	2b00      	cmp	r3, #0
 800f584:	d001      	beq.n	800f58a <SetCluster+0x5e>
 800f586:	2301      	movs	r3, #1
 800f588:	e04f      	b.n	800f62a <SetCluster+0xfe>
 800f58a:	8afb      	ldrh	r3, [r7, #22]
 800f58c:	f003 0301 	and.w	r3, r3, #1
 800f590:	2b00      	cmp	r3, #0
 800f592:	d01e      	beq.n	800f5d2 <SetCluster+0xa6>
 800f594:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f598:	687a      	ldr	r2, [r7, #4]
 800f59a:	4413      	add	r3, r2
 800f59c:	781b      	ldrb	r3, [r3, #0]
 800f59e:	f003 030f 	and.w	r3, r3, #15
 800f5a2:	b2d9      	uxtb	r1, r3
 800f5a4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f5a8:	011b      	lsls	r3, r3, #4
 800f5aa:	b2da      	uxtb	r2, r3
 800f5ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f5b0:	6878      	ldr	r0, [r7, #4]
 800f5b2:	4403      	add	r3, r0
 800f5b4:	440a      	add	r2, r1
 800f5b6:	b2d2      	uxtb	r2, r2
 800f5b8:	701a      	strb	r2, [r3, #0]
 800f5ba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f5be:	111b      	asrs	r3, r3, #4
 800f5c0:	b219      	sxth	r1, r3
 800f5c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f5c6:	3301      	adds	r3, #1
 800f5c8:	687a      	ldr	r2, [r7, #4]
 800f5ca:	4413      	add	r3, r2
 800f5cc:	b2ca      	uxtb	r2, r1
 800f5ce:	701a      	strb	r2, [r3, #0]
 800f5d0:	e021      	b.n	800f616 <SetCluster+0xea>
 800f5d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f5d6:	687a      	ldr	r2, [r7, #4]
 800f5d8:	4413      	add	r3, r2
 800f5da:	8aba      	ldrh	r2, [r7, #20]
 800f5dc:	b2d2      	uxtb	r2, r2
 800f5de:	701a      	strb	r2, [r3, #0]
 800f5e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f5e4:	3301      	adds	r3, #1
 800f5e6:	687a      	ldr	r2, [r7, #4]
 800f5e8:	4413      	add	r3, r2
 800f5ea:	781b      	ldrb	r3, [r3, #0]
 800f5ec:	b25b      	sxtb	r3, r3
 800f5ee:	f023 030f 	bic.w	r3, r3, #15
 800f5f2:	b25a      	sxtb	r2, r3
 800f5f4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f5f8:	121b      	asrs	r3, r3, #8
 800f5fa:	b21b      	sxth	r3, r3
 800f5fc:	b25b      	sxtb	r3, r3
 800f5fe:	f003 030f 	and.w	r3, r3, #15
 800f602:	b25b      	sxtb	r3, r3
 800f604:	4313      	orrs	r3, r2
 800f606:	b259      	sxtb	r1, r3
 800f608:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f60c:	3301      	adds	r3, #1
 800f60e:	687a      	ldr	r2, [r7, #4]
 800f610:	4413      	add	r3, r2
 800f612:	b2ca      	uxtb	r2, r1
 800f614:	701a      	strb	r2, [r3, #0]
 800f616:	68f9      	ldr	r1, [r7, #12]
 800f618:	6878      	ldr	r0, [r7, #4]
 800f61a:	f7ff fee9 	bl	800f3f0 <ProgDiskPage>
 800f61e:	4603      	mov	r3, r0
 800f620:	2b00      	cmp	r3, #0
 800f622:	d001      	beq.n	800f628 <SetCluster+0xfc>
 800f624:	2301      	movs	r3, #1
 800f626:	e000      	b.n	800f62a <SetCluster+0xfe>
 800f628:	2300      	movs	r3, #0
 800f62a:	4618      	mov	r0, r3
 800f62c:	3718      	adds	r7, #24
 800f62e:	46bd      	mov	sp, r7
 800f630:	bd80      	pop	{r7, pc}
 800f632:	bf00      	nop
 800f634:	20000198 	.word	0x20000198

0800f638 <NextCluster>:
 800f638:	b580      	push	{r7, lr}
 800f63a:	b084      	sub	sp, #16
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
 800f640:	4b27      	ldr	r3, [pc, #156]	; (800f6e0 <NextCluster+0xa8>)
 800f642:	681a      	ldr	r2, [r3, #0]
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f64a:	4618      	mov	r0, r3
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f652:	0fd9      	lsrs	r1, r3, #31
 800f654:	440b      	add	r3, r1
 800f656:	105b      	asrs	r3, r3, #1
 800f658:	b21b      	sxth	r3, r3
 800f65a:	4403      	add	r3, r0
 800f65c:	4413      	add	r3, r2
 800f65e:	60fb      	str	r3, [r7, #12]
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	3302      	adds	r3, #2
 800f664:	687a      	ldr	r2, [r7, #4]
 800f666:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f66a:	801a      	strh	r2, [r3, #0]
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	2200      	movs	r2, #0
 800f670:	801a      	strh	r2, [r3, #0]
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	3302      	adds	r3, #2
 800f676:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f67a:	461a      	mov	r2, r3
 800f67c:	4b18      	ldr	r3, [pc, #96]	; (800f6e0 <NextCluster+0xa8>)
 800f67e:	699b      	ldr	r3, [r3, #24]
 800f680:	429a      	cmp	r2, r3
 800f682:	d205      	bcs.n	800f690 <NextCluster+0x58>
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	3302      	adds	r3, #2
 800f688:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f68c:	2b01      	cmp	r3, #1
 800f68e:	dc01      	bgt.n	800f694 <NextCluster+0x5c>
 800f690:	2301      	movs	r3, #1
 800f692:	e021      	b.n	800f6d8 <NextCluster+0xa0>
 800f694:	68f9      	ldr	r1, [r7, #12]
 800f696:	f107 030a 	add.w	r3, r7, #10
 800f69a:	2202      	movs	r2, #2
 800f69c:	4618      	mov	r0, r3
 800f69e:	f7ff fe09 	bl	800f2b4 <ReadDiskData>
 800f6a2:	4603      	mov	r3, r0
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d001      	beq.n	800f6ac <NextCluster+0x74>
 800f6a8:	2301      	movs	r3, #1
 800f6aa:	e015      	b.n	800f6d8 <NextCluster+0xa0>
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	3302      	adds	r3, #2
 800f6b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f6b4:	b29b      	uxth	r3, r3
 800f6b6:	f003 0301 	and.w	r3, r3, #1
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d004      	beq.n	800f6c8 <NextCluster+0x90>
 800f6be:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f6c2:	111b      	asrs	r3, r3, #4
 800f6c4:	b21b      	sxth	r3, r3
 800f6c6:	e004      	b.n	800f6d2 <NextCluster+0x9a>
 800f6c8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f6cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f6d0:	b21b      	sxth	r3, r3
 800f6d2:	687a      	ldr	r2, [r7, #4]
 800f6d4:	8013      	strh	r3, [r2, #0]
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	4618      	mov	r0, r3
 800f6da:	3710      	adds	r7, #16
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	bd80      	pop	{r7, pc}
 800f6e0:	20000198 	.word	0x20000198

0800f6e4 <ProgFileSec>:
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	b084      	sub	sp, #16
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
 800f6ec:	6039      	str	r1, [r7, #0]
 800f6ee:	4b1f      	ldr	r3, [pc, #124]	; (800f76c <ProgFileSec+0x88>)
 800f6f0:	68da      	ldr	r2, [r3, #12]
 800f6f2:	4b1e      	ldr	r3, [pc, #120]	; (800f76c <ProgFileSec+0x88>)
 800f6f4:	695b      	ldr	r3, [r3, #20]
 800f6f6:	6839      	ldr	r1, [r7, #0]
 800f6f8:	f9b1 1000 	ldrsh.w	r1, [r1]
 800f6fc:	3902      	subs	r1, #2
 800f6fe:	fb01 f303 	mul.w	r3, r1, r3
 800f702:	4413      	add	r3, r2
 800f704:	60fb      	str	r3, [r7, #12]
 800f706:	68f9      	ldr	r1, [r7, #12]
 800f708:	6878      	ldr	r0, [r7, #4]
 800f70a:	f7ff fe71 	bl	800f3f0 <ProgDiskPage>
 800f70e:	4603      	mov	r3, r0
 800f710:	2b00      	cmp	r3, #0
 800f712:	d001      	beq.n	800f718 <ProgFileSec+0x34>
 800f714:	2301      	movs	r3, #1
 800f716:	e025      	b.n	800f764 <ProgFileSec+0x80>
 800f718:	6838      	ldr	r0, [r7, #0]
 800f71a:	f7ff ff8d 	bl	800f638 <NextCluster>
 800f71e:	4603      	mov	r3, r0
 800f720:	2b00      	cmp	r3, #0
 800f722:	d001      	beq.n	800f728 <ProgFileSec+0x44>
 800f724:	2302      	movs	r3, #2
 800f726:	e01d      	b.n	800f764 <ProgFileSec+0x80>
 800f728:	683b      	ldr	r3, [r7, #0]
 800f72a:	885b      	ldrh	r3, [r3, #2]
 800f72c:	817b      	strh	r3, [r7, #10]
 800f72e:	683b      	ldr	r3, [r7, #0]
 800f730:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d114      	bne.n	800f762 <ProgFileSec+0x7e>
 800f738:	683b      	ldr	r3, [r7, #0]
 800f73a:	897a      	ldrh	r2, [r7, #10]
 800f73c:	801a      	strh	r2, [r3, #0]
 800f73e:	6839      	ldr	r1, [r7, #0]
 800f740:	6878      	ldr	r0, [r7, #4]
 800f742:	f7ff fe77 	bl	800f434 <SeekBlank>
 800f746:	4603      	mov	r3, r0
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d001      	beq.n	800f750 <ProgFileSec+0x6c>
 800f74c:	2303      	movs	r3, #3
 800f74e:	e009      	b.n	800f764 <ProgFileSec+0x80>
 800f750:	6839      	ldr	r1, [r7, #0]
 800f752:	6878      	ldr	r0, [r7, #4]
 800f754:	f7ff feea 	bl	800f52c <SetCluster>
 800f758:	4603      	mov	r3, r0
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d001      	beq.n	800f762 <ProgFileSec+0x7e>
 800f75e:	2301      	movs	r3, #1
 800f760:	e000      	b.n	800f764 <ProgFileSec+0x80>
 800f762:	2300      	movs	r3, #0
 800f764:	4618      	mov	r0, r3
 800f766:	3710      	adds	r7, #16
 800f768:	46bd      	mov	sp, r7
 800f76a:	bd80      	pop	{r7, pc}
 800f76c:	20000198 	.word	0x20000198

0800f770 <ReadFileSec>:
 800f770:	b580      	push	{r7, lr}
 800f772:	b084      	sub	sp, #16
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
 800f778:	6039      	str	r1, [r7, #0]
 800f77a:	4b13      	ldr	r3, [pc, #76]	; (800f7c8 <ReadFileSec+0x58>)
 800f77c:	68da      	ldr	r2, [r3, #12]
 800f77e:	4b12      	ldr	r3, [pc, #72]	; (800f7c8 <ReadFileSec+0x58>)
 800f780:	695b      	ldr	r3, [r3, #20]
 800f782:	6839      	ldr	r1, [r7, #0]
 800f784:	f9b1 1000 	ldrsh.w	r1, [r1]
 800f788:	3902      	subs	r1, #2
 800f78a:	fb01 f303 	mul.w	r3, r1, r3
 800f78e:	4413      	add	r3, r2
 800f790:	60fb      	str	r3, [r7, #12]
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	4a0c      	ldr	r2, [pc, #48]	; (800f7c8 <ReadFileSec+0x58>)
 800f796:	6952      	ldr	r2, [r2, #20]
 800f798:	b212      	sxth	r2, r2
 800f79a:	4619      	mov	r1, r3
 800f79c:	6878      	ldr	r0, [r7, #4]
 800f79e:	f7ff fd89 	bl	800f2b4 <ReadDiskData>
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d001      	beq.n	800f7ac <ReadFileSec+0x3c>
 800f7a8:	2301      	movs	r3, #1
 800f7aa:	e008      	b.n	800f7be <ReadFileSec+0x4e>
 800f7ac:	6838      	ldr	r0, [r7, #0]
 800f7ae:	f7ff ff43 	bl	800f638 <NextCluster>
 800f7b2:	4603      	mov	r3, r0
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d001      	beq.n	800f7bc <ReadFileSec+0x4c>
 800f7b8:	2302      	movs	r3, #2
 800f7ba:	e000      	b.n	800f7be <ReadFileSec+0x4e>
 800f7bc:	2300      	movs	r3, #0
 800f7be:	4618      	mov	r0, r3
 800f7c0:	3710      	adds	r7, #16
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd80      	pop	{r7, pc}
 800f7c6:	bf00      	nop
 800f7c8:	20000198 	.word	0x20000198

0800f7cc <CloseFile>:
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b086      	sub	sp, #24
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	60f8      	str	r0, [r7, #12]
 800f7d4:	60b9      	str	r1, [r7, #8]
 800f7d6:	607a      	str	r2, [r7, #4]
 800f7d8:	603b      	str	r3, [r7, #0]
 800f7da:	f640 73ff 	movw	r3, #4095	; 0xfff
 800f7de:	617b      	str	r3, [r7, #20]
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	f640 72ff 	movw	r2, #4095	; 0xfff
 800f7e6:	801a      	strh	r2, [r3, #0]
 800f7e8:	6879      	ldr	r1, [r7, #4]
 800f7ea:	68f8      	ldr	r0, [r7, #12]
 800f7ec:	f7ff fe9e 	bl	800f52c <SetCluster>
 800f7f0:	683b      	ldr	r3, [r7, #0]
 800f7f2:	681a      	ldr	r2, [r3, #0]
 800f7f4:	697b      	ldr	r3, [r7, #20]
 800f7f6:	43db      	mvns	r3, r3
 800f7f8:	4013      	ands	r3, r2
 800f7fa:	4619      	mov	r1, r3
 800f7fc:	4b24      	ldr	r3, [pc, #144]	; (800f890 <CloseFile+0xc4>)
 800f7fe:	695b      	ldr	r3, [r3, #20]
 800f800:	b21b      	sxth	r3, r3
 800f802:	461a      	mov	r2, r3
 800f804:	68f8      	ldr	r0, [r7, #12]
 800f806:	f7ff fd55 	bl	800f2b4 <ReadDiskData>
 800f80a:	4603      	mov	r3, r0
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d001      	beq.n	800f814 <CloseFile+0x48>
 800f810:	2301      	movs	r3, #1
 800f812:	e039      	b.n	800f888 <CloseFile+0xbc>
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	681a      	ldr	r2, [r3, #0]
 800f818:	697b      	ldr	r3, [r7, #20]
 800f81a:	4013      	ands	r3, r2
 800f81c:	330b      	adds	r3, #11
 800f81e:	68fa      	ldr	r2, [r7, #12]
 800f820:	4413      	add	r3, r2
 800f822:	2220      	movs	r2, #32
 800f824:	701a      	strb	r2, [r3, #0]
 800f826:	683b      	ldr	r3, [r7, #0]
 800f828:	681a      	ldr	r2, [r3, #0]
 800f82a:	697b      	ldr	r3, [r7, #20]
 800f82c:	4013      	ands	r3, r2
 800f82e:	331c      	adds	r3, #28
 800f830:	68fa      	ldr	r2, [r7, #12]
 800f832:	4413      	add	r3, r2
 800f834:	68ba      	ldr	r2, [r7, #8]
 800f836:	601a      	str	r2, [r3, #0]
 800f838:	683b      	ldr	r3, [r7, #0]
 800f83a:	681a      	ldr	r2, [r3, #0]
 800f83c:	697b      	ldr	r3, [r7, #20]
 800f83e:	43db      	mvns	r3, r3
 800f840:	4013      	ands	r3, r2
 800f842:	4619      	mov	r1, r3
 800f844:	68f8      	ldr	r0, [r7, #12]
 800f846:	f7ff fdd3 	bl	800f3f0 <ProgDiskPage>
 800f84a:	4603      	mov	r3, r0
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d001      	beq.n	800f854 <CloseFile+0x88>
 800f850:	2301      	movs	r3, #1
 800f852:	e019      	b.n	800f888 <CloseFile+0xbc>
 800f854:	4b0e      	ldr	r3, [pc, #56]	; (800f890 <CloseFile+0xc4>)
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	4a0d      	ldr	r2, [pc, #52]	; (800f890 <CloseFile+0xc4>)
 800f85a:	6952      	ldr	r2, [r2, #20]
 800f85c:	b212      	sxth	r2, r2
 800f85e:	4619      	mov	r1, r3
 800f860:	68f8      	ldr	r0, [r7, #12]
 800f862:	f7ff fd27 	bl	800f2b4 <ReadDiskData>
 800f866:	4603      	mov	r3, r0
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d001      	beq.n	800f870 <CloseFile+0xa4>
 800f86c:	2301      	movs	r3, #1
 800f86e:	e00b      	b.n	800f888 <CloseFile+0xbc>
 800f870:	4b07      	ldr	r3, [pc, #28]	; (800f890 <CloseFile+0xc4>)
 800f872:	685b      	ldr	r3, [r3, #4]
 800f874:	4619      	mov	r1, r3
 800f876:	68f8      	ldr	r0, [r7, #12]
 800f878:	f7ff fdba 	bl	800f3f0 <ProgDiskPage>
 800f87c:	4603      	mov	r3, r0
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d001      	beq.n	800f886 <CloseFile+0xba>
 800f882:	2301      	movs	r3, #1
 800f884:	e000      	b.n	800f888 <CloseFile+0xbc>
 800f886:	2300      	movs	r3, #0
 800f888:	4618      	mov	r0, r3
 800f88a:	3718      	adds	r7, #24
 800f88c:	46bd      	mov	sp, r7
 800f88e:	bd80      	pop	{r7, pc}
 800f890:	20000198 	.word	0x20000198

0800f894 <OpenFileWr>:
 800f894:	b580      	push	{r7, lr}
 800f896:	b088      	sub	sp, #32
 800f898:	af00      	add	r7, sp, #0
 800f89a:	60f8      	str	r0, [r7, #12]
 800f89c:	60b9      	str	r1, [r7, #8]
 800f89e:	607a      	str	r2, [r7, #4]
 800f8a0:	603b      	str	r3, [r7, #0]
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	687a      	ldr	r2, [r7, #4]
 800f8a6:	68b9      	ldr	r1, [r7, #8]
 800f8a8:	68f8      	ldr	r0, [r7, #12]
 800f8aa:	f7ff fd29 	bl	800f300 <OpenFileRd>
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	61fb      	str	r3, [r7, #28]
 800f8b2:	69fb      	ldr	r3, [r7, #28]
 800f8b4:	2b04      	cmp	r3, #4
 800f8b6:	d002      	beq.n	800f8be <OpenFileWr+0x2a>
 800f8b8:	69fb      	ldr	r3, [r7, #28]
 800f8ba:	b2db      	uxtb	r3, r3
 800f8bc:	e045      	b.n	800f94a <OpenFileWr+0xb6>
 800f8be:	6879      	ldr	r1, [r7, #4]
 800f8c0:	68f8      	ldr	r0, [r7, #12]
 800f8c2:	f7ff fdb7 	bl	800f434 <SeekBlank>
 800f8c6:	4603      	mov	r3, r0
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d001      	beq.n	800f8d0 <OpenFileWr+0x3c>
 800f8cc:	2303      	movs	r3, #3
 800f8ce:	e03c      	b.n	800f94a <OpenFileWr+0xb6>
 800f8d0:	683b      	ldr	r3, [r7, #0]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f8d8:	61bb      	str	r3, [r7, #24]
 800f8da:	683b      	ldr	r3, [r7, #0]
 800f8dc:	681a      	ldr	r2, [r3, #0]
 800f8de:	69bb      	ldr	r3, [r7, #24]
 800f8e0:	1ad3      	subs	r3, r2, r3
 800f8e2:	617b      	str	r3, [r7, #20]
 800f8e4:	697b      	ldr	r3, [r7, #20]
 800f8e6:	4a1b      	ldr	r2, [pc, #108]	; (800f954 <OpenFileWr+0xc0>)
 800f8e8:	6952      	ldr	r2, [r2, #20]
 800f8ea:	b212      	sxth	r2, r2
 800f8ec:	4619      	mov	r1, r3
 800f8ee:	68f8      	ldr	r0, [r7, #12]
 800f8f0:	f7ff fce0 	bl	800f2b4 <ReadDiskData>
 800f8f4:	4603      	mov	r3, r0
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d001      	beq.n	800f8fe <OpenFileWr+0x6a>
 800f8fa:	2301      	movs	r3, #1
 800f8fc:	e025      	b.n	800f94a <OpenFileWr+0xb6>
 800f8fe:	2300      	movs	r3, #0
 800f900:	61fb      	str	r3, [r7, #28]
 800f902:	e00d      	b.n	800f920 <OpenFileWr+0x8c>
 800f904:	69fb      	ldr	r3, [r7, #28]
 800f906:	68ba      	ldr	r2, [r7, #8]
 800f908:	441a      	add	r2, r3
 800f90a:	69b9      	ldr	r1, [r7, #24]
 800f90c:	69fb      	ldr	r3, [r7, #28]
 800f90e:	440b      	add	r3, r1
 800f910:	4619      	mov	r1, r3
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	440b      	add	r3, r1
 800f916:	7812      	ldrb	r2, [r2, #0]
 800f918:	701a      	strb	r2, [r3, #0]
 800f91a:	69fb      	ldr	r3, [r7, #28]
 800f91c:	3301      	adds	r3, #1
 800f91e:	61fb      	str	r3, [r7, #28]
 800f920:	69fb      	ldr	r3, [r7, #28]
 800f922:	2b0a      	cmp	r3, #10
 800f924:	ddee      	ble.n	800f904 <OpenFileWr+0x70>
 800f926:	69bb      	ldr	r3, [r7, #24]
 800f928:	331a      	adds	r3, #26
 800f92a:	68fa      	ldr	r2, [r7, #12]
 800f92c:	4413      	add	r3, r2
 800f92e:	687a      	ldr	r2, [r7, #4]
 800f930:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f934:	801a      	strh	r2, [r3, #0]
 800f936:	6979      	ldr	r1, [r7, #20]
 800f938:	68f8      	ldr	r0, [r7, #12]
 800f93a:	f7ff fd59 	bl	800f3f0 <ProgDiskPage>
 800f93e:	4603      	mov	r3, r0
 800f940:	2b00      	cmp	r3, #0
 800f942:	d001      	beq.n	800f948 <OpenFileWr+0xb4>
 800f944:	2301      	movs	r3, #1
 800f946:	e000      	b.n	800f94a <OpenFileWr+0xb6>
 800f948:	2300      	movs	r3, #0
 800f94a:	4618      	mov	r0, r3
 800f94c:	3720      	adds	r7, #32
 800f94e:	46bd      	mov	sp, r7
 800f950:	bd80      	pop	{r7, pc}
 800f952:	bf00      	nop
 800f954:	20000198 	.word	0x20000198

0800f958 <Color_Num>:
 800f958:	b480      	push	{r7}
 800f95a:	b083      	sub	sp, #12
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	4603      	mov	r3, r0
 800f960:	80fb      	strh	r3, [r7, #6]
 800f962:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f966:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800f96a:	4013      	ands	r3, r2
 800f96c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800f970:	4293      	cmp	r3, r2
 800f972:	d101      	bne.n	800f978 <Color_Num+0x20>
 800f974:	2301      	movs	r3, #1
 800f976:	e068      	b.n	800fa4a <Color_Num+0xf2>
 800f978:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f97c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800f980:	f5b3 4f04 	cmp.w	r3, #33792	; 0x8400
 800f984:	d101      	bne.n	800f98a <Color_Num+0x32>
 800f986:	2302      	movs	r3, #2
 800f988:	e05f      	b.n	800fa4a <Color_Num+0xf2>
 800f98a:	88fb      	ldrh	r3, [r7, #6]
 800f98c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f990:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f994:	4293      	cmp	r3, r2
 800f996:	d101      	bne.n	800f99c <Color_Num+0x44>
 800f998:	2303      	movs	r3, #3
 800f99a:	e056      	b.n	800fa4a <Color_Num+0xf2>
 800f99c:	88fb      	ldrh	r3, [r7, #6]
 800f99e:	f403 6382 	and.w	r3, r3, #1040	; 0x410
 800f9a2:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800f9a6:	d101      	bne.n	800f9ac <Color_Num+0x54>
 800f9a8:	2304      	movs	r3, #4
 800f9aa:	e04e      	b.n	800fa4a <Color_Num+0xf2>
 800f9ac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f9b0:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800f9b4:	4013      	ands	r3, r2
 800f9b6:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800f9ba:	4293      	cmp	r3, r2
 800f9bc:	d101      	bne.n	800f9c2 <Color_Num+0x6a>
 800f9be:	2305      	movs	r3, #5
 800f9c0:	e043      	b.n	800fa4a <Color_Num+0xf2>
 800f9c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f9c6:	f248 0310 	movw	r3, #32784	; 0x8010
 800f9ca:	4013      	ands	r3, r2
 800f9cc:	f248 0210 	movw	r2, #32784	; 0x8010
 800f9d0:	4293      	cmp	r3, r2
 800f9d2:	d101      	bne.n	800f9d8 <Color_Num+0x80>
 800f9d4:	2306      	movs	r3, #6
 800f9d6:	e038      	b.n	800fa4a <Color_Num+0xf2>
 800f9d8:	88fb      	ldrh	r3, [r7, #6]
 800f9da:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800f9de:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 800f9e2:	d101      	bne.n	800f9e8 <Color_Num+0x90>
 800f9e4:	2307      	movs	r3, #7
 800f9e6:	e030      	b.n	800fa4a <Color_Num+0xf2>
 800f9e8:	88fb      	ldrh	r3, [r7, #6]
 800f9ea:	f403 6382 	and.w	r3, r3, #1040	; 0x410
 800f9ee:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800f9f2:	d101      	bne.n	800f9f8 <Color_Num+0xa0>
 800f9f4:	2308      	movs	r3, #8
 800f9f6:	e028      	b.n	800fa4a <Color_Num+0xf2>
 800f9f8:	88fb      	ldrh	r3, [r7, #6]
 800f9fa:	461a      	mov	r2, r3
 800f9fc:	f643 13e7 	movw	r3, #14823	; 0x39e7
 800fa00:	4013      	ands	r3, r2
 800fa02:	f643 12e7 	movw	r2, #14823	; 0x39e7
 800fa06:	4293      	cmp	r3, r2
 800fa08:	d101      	bne.n	800fa0e <Color_Num+0xb6>
 800fa0a:	2309      	movs	r3, #9
 800fa0c:	e01d      	b.n	800fa4a <Color_Num+0xf2>
 800fa0e:	88fb      	ldrh	r3, [r7, #6]
 800fa10:	461a      	mov	r2, r3
 800fa12:	f240 531f 	movw	r3, #1311	; 0x51f
 800fa16:	4013      	ands	r3, r2
 800fa18:	f240 521f 	movw	r2, #1311	; 0x51f
 800fa1c:	4293      	cmp	r3, r2
 800fa1e:	d101      	bne.n	800fa24 <Color_Num+0xcc>
 800fa20:	230a      	movs	r3, #10
 800fa22:	e012      	b.n	800fa4a <Color_Num+0xf2>
 800fa24:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800fa28:	f64f 4310 	movw	r3, #64528	; 0xfc10
 800fa2c:	4013      	ands	r3, r2
 800fa2e:	f64f 4210 	movw	r2, #64528	; 0xfc10
 800fa32:	4293      	cmp	r3, r2
 800fa34:	d101      	bne.n	800fa3a <Color_Num+0xe2>
 800fa36:	230b      	movs	r3, #11
 800fa38:	e007      	b.n	800fa4a <Color_Num+0xf2>
 800fa3a:	88fb      	ldrh	r3, [r7, #6]
 800fa3c:	f003 031f 	and.w	r3, r3, #31
 800fa40:	2b1f      	cmp	r3, #31
 800fa42:	d101      	bne.n	800fa48 <Color_Num+0xf0>
 800fa44:	230c      	movs	r3, #12
 800fa46:	e000      	b.n	800fa4a <Color_Num+0xf2>
 800fa48:	230d      	movs	r3, #13
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	370c      	adds	r7, #12
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa54:	4770      	bx	lr
	...

0800fa58 <PrintClk>:
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b084      	sub	sp, #16
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	4603      	mov	r3, r0
 800fa60:	80fb      	strh	r3, [r7, #6]
 800fa62:	460b      	mov	r3, r1
 800fa64:	80bb      	strh	r3, [r7, #4]
 800fa66:	4613      	mov	r3, r2
 800fa68:	70fb      	strb	r3, [r7, #3]
 800fa6a:	4b31      	ldr	r3, [pc, #196]	; (800fb30 <PrintClk+0xd8>)
 800fa6c:	895b      	ldrh	r3, [r3, #10]
 800fa6e:	4619      	mov	r1, r3
 800fa70:	f643 10e7 	movw	r0, #14823	; 0x39e7
 800fa74:	f7fe fa6a 	bl	800df4c <SetColor>
 800fa78:	4b2e      	ldr	r3, [pc, #184]	; (800fb34 <PrintClk+0xdc>)
 800fa7a:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800fa7e:	b29b      	uxth	r3, r3
 800fa80:	331e      	adds	r3, #30
 800fa82:	b29b      	uxth	r3, r3
 800fa84:	80fb      	strh	r3, [r7, #6]
 800fa86:	4b2b      	ldr	r3, [pc, #172]	; (800fb34 <PrintClk+0xdc>)
 800fa88:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800fa8c:	b29b      	uxth	r3, r3
 800fa8e:	3b03      	subs	r3, #3
 800fa90:	b29b      	uxth	r3, r3
 800fa92:	b218      	sxth	r0, r3
 800fa94:	4b28      	ldr	r3, [pc, #160]	; (800fb38 <PrintClk+0xe0>)
 800fa96:	2200      	movs	r2, #0
 800fa98:	2103      	movs	r1, #3
 800fa9a:	f7fe fa6f 	bl	800df7c <DispStr>
 800fa9e:	2301      	movs	r3, #1
 800faa0:	81fb      	strh	r3, [r7, #14]
 800faa2:	e03c      	b.n	800fb1e <PrintClk+0xc6>
 800faa4:	78fa      	ldrb	r2, [r7, #3]
 800faa6:	4613      	mov	r3, r2
 800faa8:	009b      	lsls	r3, r3, #2
 800faaa:	4413      	add	r3, r2
 800faac:	005b      	lsls	r3, r3, #1
 800faae:	441a      	add	r2, r3
 800fab0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fab4:	4413      	add	r3, r2
 800fab6:	4a21      	ldr	r2, [pc, #132]	; (800fb3c <PrintClk+0xe4>)
 800fab8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fabc:	817b      	strh	r3, [r7, #10]
 800fabe:	2300      	movs	r3, #0
 800fac0:	81bb      	strh	r3, [r7, #12]
 800fac2:	e024      	b.n	800fb0e <PrintClk+0xb6>
 800fac4:	88fa      	ldrh	r2, [r7, #6]
 800fac6:	89bb      	ldrh	r3, [r7, #12]
 800fac8:	4413      	add	r3, r2
 800faca:	b29b      	uxth	r3, r3
 800facc:	b218      	sxth	r0, r3
 800face:	88ba      	ldrh	r2, [r7, #4]
 800fad0:	89fb      	ldrh	r3, [r7, #14]
 800fad2:	4413      	add	r3, r2
 800fad4:	b29b      	uxth	r3, r3
 800fad6:	b21b      	sxth	r3, r3
 800fad8:	4619      	mov	r1, r3
 800fada:	f002 fce7 	bl	80124ac <LCD_Set_Posi>
 800fade:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800fae2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800fae6:	fa42 f303 	asr.w	r3, r2, r3
 800faea:	f003 0301 	and.w	r3, r3, #1
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d004      	beq.n	800fafc <PrintClk+0xa4>
 800faf2:	f64f 4010 	movw	r0, #64528	; 0xfc10
 800faf6:	f002 fd27 	bl	8012548 <LCD_Set_Pixel>
 800fafa:	e004      	b.n	800fb06 <PrintClk+0xae>
 800fafc:	4b10      	ldr	r3, [pc, #64]	; (800fb40 <PrintClk+0xe8>)
 800fafe:	881b      	ldrh	r3, [r3, #0]
 800fb00:	4618      	mov	r0, r3
 800fb02:	f002 fd21 	bl	8012548 <LCD_Set_Pixel>
 800fb06:	89bb      	ldrh	r3, [r7, #12]
 800fb08:	3301      	adds	r3, #1
 800fb0a:	b29b      	uxth	r3, r3
 800fb0c:	81bb      	strh	r3, [r7, #12]
 800fb0e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800fb12:	2b0a      	cmp	r3, #10
 800fb14:	ddd6      	ble.n	800fac4 <PrintClk+0x6c>
 800fb16:	89fb      	ldrh	r3, [r7, #14]
 800fb18:	3301      	adds	r3, #1
 800fb1a:	b29b      	uxth	r3, r3
 800fb1c:	81fb      	strh	r3, [r7, #14]
 800fb1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fb22:	2b0a      	cmp	r3, #10
 800fb24:	ddbe      	ble.n	800faa4 <PrintClk+0x4c>
 800fb26:	bf00      	nop
 800fb28:	bf00      	nop
 800fb2a:	3710      	adds	r7, #16
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	bd80      	pop	{r7, pc}
 800fb30:	08001f08 	.word	0x08001f08
 800fb34:	0800215c 	.word	0x0800215c
 800fb38:	080001ec 	.word	0x080001ec
 800fb3c:	08001bbc 	.word	0x08001bbc
 800fb40:	200015d6 	.word	0x200015d6

0800fb44 <WriteVar>:
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b084      	sub	sp, #16
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	4603      	mov	r3, r0
 800fb4c:	6039      	str	r1, [r7, #0]
 800fb4e:	80fb      	strh	r3, [r7, #6]
 800fb50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fb54:	81fb      	strh	r3, [r7, #14]
 800fb56:	2204      	movs	r2, #4
 800fb58:	2100      	movs	r1, #0
 800fb5a:	4847      	ldr	r0, [pc, #284]	; (800fc78 <WriteVar+0x134>)
 800fb5c:	f013 fa4a 	bl	8022ff4 <memset>
 800fb60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fb64:	4619      	mov	r1, r3
 800fb66:	4844      	ldr	r0, [pc, #272]	; (800fc78 <WriteVar+0x134>)
 800fb68:	f002 fa1e 	bl	8011fa8 <u16ToDec4Str>
 800fb6c:	4842      	ldr	r0, [pc, #264]	; (800fc78 <WriteVar+0x134>)
 800fb6e:	f7fc fa67 	bl	800c040 <strlen>
 800fb72:	4603      	mov	r3, r0
 800fb74:	b21a      	sxth	r2, r3
 800fb76:	4b41      	ldr	r3, [pc, #260]	; (800fc7c <WriteVar+0x138>)
 800fb78:	801a      	strh	r2, [r3, #0]
 800fb7a:	4b41      	ldr	r3, [pc, #260]	; (800fc80 <WriteVar+0x13c>)
 800fb7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fb80:	461a      	mov	r2, r3
 800fb82:	4b40      	ldr	r3, [pc, #256]	; (800fc84 <WriteVar+0x140>)
 800fb84:	4413      	add	r3, r2
 800fb86:	4a3d      	ldr	r2, [pc, #244]	; (800fc7c <WriteVar+0x138>)
 800fb88:	f9b2 2000 	ldrsh.w	r2, [r2]
 800fb8c:	493a      	ldr	r1, [pc, #232]	; (800fc78 <WriteVar+0x134>)
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f013 fa22 	bl	8022fd8 <memcpy>
 800fb94:	4b3a      	ldr	r3, [pc, #232]	; (800fc80 <WriteVar+0x13c>)
 800fb96:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fb9a:	b29a      	uxth	r2, r3
 800fb9c:	4b37      	ldr	r3, [pc, #220]	; (800fc7c <WriteVar+0x138>)
 800fb9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fba2:	b29b      	uxth	r3, r3
 800fba4:	4413      	add	r3, r2
 800fba6:	b29b      	uxth	r3, r3
 800fba8:	b21a      	sxth	r2, r3
 800fbaa:	4b35      	ldr	r3, [pc, #212]	; (800fc80 <WriteVar+0x13c>)
 800fbac:	801a      	strh	r2, [r3, #0]
 800fbae:	4b33      	ldr	r3, [pc, #204]	; (800fc7c <WriteVar+0x138>)
 800fbb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fbb4:	461a      	mov	r2, r3
 800fbb6:	4b34      	ldr	r3, [pc, #208]	; (800fc88 <WriteVar+0x144>)
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	4413      	add	r3, r2
 800fbbc:	4a32      	ldr	r2, [pc, #200]	; (800fc88 <WriteVar+0x144>)
 800fbbe:	6013      	str	r3, [r2, #0]
 800fbc0:	4b2f      	ldr	r3, [pc, #188]	; (800fc80 <WriteVar+0x13c>)
 800fbc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fbc6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800fbca:	429a      	cmp	r2, r3
 800fbcc:	dc4f      	bgt.n	800fc6e <WriteVar+0x12a>
 800fbce:	6839      	ldr	r1, [r7, #0]
 800fbd0:	482c      	ldr	r0, [pc, #176]	; (800fc84 <WriteVar+0x140>)
 800fbd2:	f7ff fd87 	bl	800f6e4 <ProgFileSec>
 800fbd6:	4b2d      	ldr	r3, [pc, #180]	; (800fc8c <WriteVar+0x148>)
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	1c5a      	adds	r2, r3, #1
 800fbdc:	492b      	ldr	r1, [pc, #172]	; (800fc8c <WriteVar+0x148>)
 800fbde:	600a      	str	r2, [r1, #0]
 800fbe0:	105b      	asrs	r3, r3, #1
 800fbe2:	b2db      	uxtb	r3, r3
 800fbe4:	f003 0303 	and.w	r3, r3, #3
 800fbe8:	b2db      	uxtb	r3, r3
 800fbea:	461a      	mov	r2, r3
 800fbec:	2102      	movs	r1, #2
 800fbee:	f44f 7084 	mov.w	r0, #264	; 0x108
 800fbf2:	f7ff ff31 	bl	800fa58 <PrintClk>
 800fbf6:	4b22      	ldr	r3, [pc, #136]	; (800fc80 <WriteVar+0x13c>)
 800fbf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fbfc:	b29a      	uxth	r2, r3
 800fbfe:	89fb      	ldrh	r3, [r7, #14]
 800fc00:	1ad3      	subs	r3, r2, r3
 800fc02:	b29b      	uxth	r3, r3
 800fc04:	81bb      	strh	r3, [r7, #12]
 800fc06:	4b1d      	ldr	r3, [pc, #116]	; (800fc7c <WriteVar+0x138>)
 800fc08:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fc0c:	b29a      	uxth	r2, r3
 800fc0e:	89bb      	ldrh	r3, [r7, #12]
 800fc10:	1ad3      	subs	r3, r2, r3
 800fc12:	b29b      	uxth	r3, r3
 800fc14:	817b      	strh	r3, [r7, #10]
 800fc16:	4b1a      	ldr	r3, [pc, #104]	; (800fc80 <WriteVar+0x13c>)
 800fc18:	2200      	movs	r2, #0
 800fc1a:	801a      	strh	r2, [r3, #0]
 800fc1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fc20:	461a      	mov	r2, r3
 800fc22:	2100      	movs	r1, #0
 800fc24:	4817      	ldr	r0, [pc, #92]	; (800fc84 <WriteVar+0x140>)
 800fc26:	f013 f9e5 	bl	8022ff4 <memset>
 800fc2a:	f44f 729b 	mov.w	r2, #310	; 0x136
 800fc2e:	2100      	movs	r1, #0
 800fc30:	4817      	ldr	r0, [pc, #92]	; (800fc90 <WriteVar+0x14c>)
 800fc32:	f013 f9df 	bl	8022ff4 <memset>
 800fc36:	4b12      	ldr	r3, [pc, #72]	; (800fc80 <WriteVar+0x13c>)
 800fc38:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fc3c:	461a      	mov	r2, r3
 800fc3e:	4b11      	ldr	r3, [pc, #68]	; (800fc84 <WriteVar+0x140>)
 800fc40:	18d0      	adds	r0, r2, r3
 800fc42:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800fc46:	4a0c      	ldr	r2, [pc, #48]	; (800fc78 <WriteVar+0x134>)
 800fc48:	4413      	add	r3, r2
 800fc4a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800fc4e:	4619      	mov	r1, r3
 800fc50:	f013 f9c2 	bl	8022fd8 <memcpy>
 800fc54:	4b0a      	ldr	r3, [pc, #40]	; (800fc80 <WriteVar+0x13c>)
 800fc56:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fc5a:	b29a      	uxth	r2, r3
 800fc5c:	89bb      	ldrh	r3, [r7, #12]
 800fc5e:	4413      	add	r3, r2
 800fc60:	b29b      	uxth	r3, r3
 800fc62:	b21a      	sxth	r2, r3
 800fc64:	4b06      	ldr	r3, [pc, #24]	; (800fc80 <WriteVar+0x13c>)
 800fc66:	801a      	strh	r2, [r3, #0]
 800fc68:	4b04      	ldr	r3, [pc, #16]	; (800fc7c <WriteVar+0x138>)
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	801a      	strh	r2, [r3, #0]
 800fc6e:	bf00      	nop
 800fc70:	3710      	adds	r7, #16
 800fc72:	46bd      	mov	sp, r7
 800fc74:	bd80      	pop	{r7, pc}
 800fc76:	bf00      	nop
 800fc78:	200015dc 	.word	0x200015dc
 800fc7c:	2000079a 	.word	0x2000079a
 800fc80:	20000798 	.word	0x20000798
 800fc84:	200017e0 	.word	0x200017e0
 800fc88:	2000079c 	.word	0x2000079c
 800fc8c:	200007a0 	.word	0x200007a0
 800fc90:	2000000c 	.word	0x2000000c

0800fc94 <WriteStr>:
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b084      	sub	sp, #16
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
 800fc9c:	6039      	str	r1, [r7, #0]
 800fc9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fca2:	81fb      	strh	r3, [r7, #14]
 800fca4:	6878      	ldr	r0, [r7, #4]
 800fca6:	f7fc f9cb 	bl	800c040 <strlen>
 800fcaa:	4603      	mov	r3, r0
 800fcac:	b21a      	sxth	r2, r3
 800fcae:	4b40      	ldr	r3, [pc, #256]	; (800fdb0 <WriteStr+0x11c>)
 800fcb0:	801a      	strh	r2, [r3, #0]
 800fcb2:	4b40      	ldr	r3, [pc, #256]	; (800fdb4 <WriteStr+0x120>)
 800fcb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fcb8:	461a      	mov	r2, r3
 800fcba:	4b3f      	ldr	r3, [pc, #252]	; (800fdb8 <WriteStr+0x124>)
 800fcbc:	4413      	add	r3, r2
 800fcbe:	4a3c      	ldr	r2, [pc, #240]	; (800fdb0 <WriteStr+0x11c>)
 800fcc0:	f9b2 2000 	ldrsh.w	r2, [r2]
 800fcc4:	6879      	ldr	r1, [r7, #4]
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	f013 f986 	bl	8022fd8 <memcpy>
 800fccc:	4b39      	ldr	r3, [pc, #228]	; (800fdb4 <WriteStr+0x120>)
 800fcce:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fcd2:	b29a      	uxth	r2, r3
 800fcd4:	4b36      	ldr	r3, [pc, #216]	; (800fdb0 <WriteStr+0x11c>)
 800fcd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fcda:	b29b      	uxth	r3, r3
 800fcdc:	4413      	add	r3, r2
 800fcde:	b29b      	uxth	r3, r3
 800fce0:	b21a      	sxth	r2, r3
 800fce2:	4b34      	ldr	r3, [pc, #208]	; (800fdb4 <WriteStr+0x120>)
 800fce4:	801a      	strh	r2, [r3, #0]
 800fce6:	4b32      	ldr	r3, [pc, #200]	; (800fdb0 <WriteStr+0x11c>)
 800fce8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fcec:	461a      	mov	r2, r3
 800fcee:	4b33      	ldr	r3, [pc, #204]	; (800fdbc <WriteStr+0x128>)
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	4413      	add	r3, r2
 800fcf4:	4a31      	ldr	r2, [pc, #196]	; (800fdbc <WriteStr+0x128>)
 800fcf6:	6013      	str	r3, [r2, #0]
 800fcf8:	4b2e      	ldr	r3, [pc, #184]	; (800fdb4 <WriteStr+0x120>)
 800fcfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fcfe:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800fd02:	429a      	cmp	r2, r3
 800fd04:	dc4f      	bgt.n	800fda6 <WriteStr+0x112>
 800fd06:	6839      	ldr	r1, [r7, #0]
 800fd08:	482b      	ldr	r0, [pc, #172]	; (800fdb8 <WriteStr+0x124>)
 800fd0a:	f7ff fceb 	bl	800f6e4 <ProgFileSec>
 800fd0e:	4b2c      	ldr	r3, [pc, #176]	; (800fdc0 <WriteStr+0x12c>)
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	1c5a      	adds	r2, r3, #1
 800fd14:	492a      	ldr	r1, [pc, #168]	; (800fdc0 <WriteStr+0x12c>)
 800fd16:	600a      	str	r2, [r1, #0]
 800fd18:	105b      	asrs	r3, r3, #1
 800fd1a:	b2db      	uxtb	r3, r3
 800fd1c:	f003 0303 	and.w	r3, r3, #3
 800fd20:	b2db      	uxtb	r3, r3
 800fd22:	461a      	mov	r2, r3
 800fd24:	2102      	movs	r1, #2
 800fd26:	f44f 7084 	mov.w	r0, #264	; 0x108
 800fd2a:	f7ff fe95 	bl	800fa58 <PrintClk>
 800fd2e:	4b21      	ldr	r3, [pc, #132]	; (800fdb4 <WriteStr+0x120>)
 800fd30:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fd34:	b29a      	uxth	r2, r3
 800fd36:	89fb      	ldrh	r3, [r7, #14]
 800fd38:	1ad3      	subs	r3, r2, r3
 800fd3a:	b29b      	uxth	r3, r3
 800fd3c:	81bb      	strh	r3, [r7, #12]
 800fd3e:	4b1c      	ldr	r3, [pc, #112]	; (800fdb0 <WriteStr+0x11c>)
 800fd40:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fd44:	b29a      	uxth	r2, r3
 800fd46:	89bb      	ldrh	r3, [r7, #12]
 800fd48:	1ad3      	subs	r3, r2, r3
 800fd4a:	b29b      	uxth	r3, r3
 800fd4c:	817b      	strh	r3, [r7, #10]
 800fd4e:	4b19      	ldr	r3, [pc, #100]	; (800fdb4 <WriteStr+0x120>)
 800fd50:	2200      	movs	r2, #0
 800fd52:	801a      	strh	r2, [r3, #0]
 800fd54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fd58:	461a      	mov	r2, r3
 800fd5a:	2100      	movs	r1, #0
 800fd5c:	4816      	ldr	r0, [pc, #88]	; (800fdb8 <WriteStr+0x124>)
 800fd5e:	f013 f949 	bl	8022ff4 <memset>
 800fd62:	f44f 729b 	mov.w	r2, #310	; 0x136
 800fd66:	2100      	movs	r1, #0
 800fd68:	4816      	ldr	r0, [pc, #88]	; (800fdc4 <WriteStr+0x130>)
 800fd6a:	f013 f943 	bl	8022ff4 <memset>
 800fd6e:	4b11      	ldr	r3, [pc, #68]	; (800fdb4 <WriteStr+0x120>)
 800fd70:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fd74:	461a      	mov	r2, r3
 800fd76:	4b10      	ldr	r3, [pc, #64]	; (800fdb8 <WriteStr+0x124>)
 800fd78:	18d0      	adds	r0, r2, r3
 800fd7a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800fd7e:	687a      	ldr	r2, [r7, #4]
 800fd80:	4413      	add	r3, r2
 800fd82:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800fd86:	4619      	mov	r1, r3
 800fd88:	f013 f926 	bl	8022fd8 <memcpy>
 800fd8c:	4b09      	ldr	r3, [pc, #36]	; (800fdb4 <WriteStr+0x120>)
 800fd8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fd92:	b29a      	uxth	r2, r3
 800fd94:	89bb      	ldrh	r3, [r7, #12]
 800fd96:	4413      	add	r3, r2
 800fd98:	b29b      	uxth	r3, r3
 800fd9a:	b21a      	sxth	r2, r3
 800fd9c:	4b05      	ldr	r3, [pc, #20]	; (800fdb4 <WriteStr+0x120>)
 800fd9e:	801a      	strh	r2, [r3, #0]
 800fda0:	4b03      	ldr	r3, [pc, #12]	; (800fdb0 <WriteStr+0x11c>)
 800fda2:	2200      	movs	r2, #0
 800fda4:	801a      	strh	r2, [r3, #0]
 800fda6:	bf00      	nop
 800fda8:	3710      	adds	r7, #16
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	bd80      	pop	{r7, pc}
 800fdae:	bf00      	nop
 800fdb0:	2000079a 	.word	0x2000079a
 800fdb4:	20000798 	.word	0x20000798
 800fdb8:	200017e0 	.word	0x200017e0
 800fdbc:	2000079c 	.word	0x2000079c
 800fdc0:	200007a0 	.word	0x200007a0
 800fdc4:	2000000c 	.word	0x2000000c

0800fdc8 <Make_Filename>:
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b084      	sub	sp, #16
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	4603      	mov	r3, r0
 800fdd0:	6039      	str	r1, [r7, #0]
 800fdd2:	80fb      	strh	r3, [r7, #6]
 800fdd4:	88fb      	ldrh	r3, [r7, #6]
 800fdd6:	b2da      	uxtb	r2, r3
 800fdd8:	f107 030c 	add.w	r3, r7, #12
 800fddc:	4611      	mov	r1, r2
 800fdde:	4618      	mov	r0, r3
 800fde0:	f001 ff3c 	bl	8011c5c <u8ToDec3>
 800fde4:	683b      	ldr	r3, [r7, #0]
 800fde6:	3304      	adds	r3, #4
 800fde8:	7b3a      	ldrb	r2, [r7, #12]
 800fdea:	701a      	strb	r2, [r3, #0]
 800fdec:	683b      	ldr	r3, [r7, #0]
 800fdee:	3305      	adds	r3, #5
 800fdf0:	7b7a      	ldrb	r2, [r7, #13]
 800fdf2:	701a      	strb	r2, [r3, #0]
 800fdf4:	683b      	ldr	r3, [r7, #0]
 800fdf6:	3306      	adds	r3, #6
 800fdf8:	7bba      	ldrb	r2, [r7, #14]
 800fdfa:	701a      	strb	r2, [r3, #0]
 800fdfc:	bf00      	nop
 800fdfe:	3710      	adds	r7, #16
 800fe00:	46bd      	mov	sp, r7
 800fe02:	bd80      	pop	{r7, pc}

0800fe04 <Load_File_Num>:
 800fe04:	b580      	push	{r7, lr}
 800fe06:	b08a      	sub	sp, #40	; 0x28
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	71fb      	strb	r3, [r7, #7]
 800fe0e:	2300      	movs	r3, #0
 800fe10:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fe12:	4a87      	ldr	r2, [pc, #540]	; (8010030 <Load_File_Num+0x22c>)
 800fe14:	f107 0318 	add.w	r3, r7, #24
 800fe18:	ca07      	ldmia	r2, {r0, r1, r2}
 800fe1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fe1e:	79fb      	ldrb	r3, [r7, #7]
 800fe20:	3b1d      	subs	r3, #29
 800fe22:	2b04      	cmp	r3, #4
 800fe24:	f200 80fe 	bhi.w	8010024 <Load_File_Num+0x220>
 800fe28:	a201      	add	r2, pc, #4	; (adr r2, 800fe30 <Load_File_Num+0x2c>)
 800fe2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe2e:	bf00      	nop
 800fe30:	0800fe45 	.word	0x0800fe45
 800fe34:	0800fea5 	.word	0x0800fea5
 800fe38:	0800ff05 	.word	0x0800ff05
 800fe3c:	0800ff65 	.word	0x0800ff65
 800fe40:	0800ffc5 	.word	0x0800ffc5
 800fe44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fe48:	2100      	movs	r1, #0
 800fe4a:	487a      	ldr	r0, [pc, #488]	; (8010034 <Load_File_Num+0x230>)
 800fe4c:	f013 f8d2 	bl	8022ff4 <memset>
 800fe50:	4a79      	ldr	r2, [pc, #484]	; (8010038 <Load_File_Num+0x234>)
 800fe52:	f107 0318 	add.w	r3, r7, #24
 800fe56:	ca07      	ldmia	r2, {r0, r1, r2}
 800fe58:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fe5c:	f107 0218 	add.w	r2, r7, #24
 800fe60:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fe64:	4611      	mov	r1, r2
 800fe66:	4618      	mov	r0, r3
 800fe68:	f7ff ffae 	bl	800fdc8 <Make_Filename>
 800fe6c:	e00d      	b.n	800fe8a <Load_File_Num+0x86>
 800fe6e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fe72:	b29b      	uxth	r3, r3
 800fe74:	3301      	adds	r3, #1
 800fe76:	b29b      	uxth	r3, r3
 800fe78:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fe7a:	f107 0218 	add.w	r2, r7, #24
 800fe7e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fe82:	4611      	mov	r1, r2
 800fe84:	4618      	mov	r0, r3
 800fe86:	f7ff ff9f 	bl	800fdc8 <Make_Filename>
 800fe8a:	f107 030c 	add.w	r3, r7, #12
 800fe8e:	f107 0210 	add.w	r2, r7, #16
 800fe92:	f107 0118 	add.w	r1, r7, #24
 800fe96:	4867      	ldr	r0, [pc, #412]	; (8010034 <Load_File_Num+0x230>)
 800fe98:	f7ff fa32 	bl	800f300 <OpenFileRd>
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d0e5      	beq.n	800fe6e <Load_File_Num+0x6a>
 800fea2:	e0bf      	b.n	8010024 <Load_File_Num+0x220>
 800fea4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fea8:	2100      	movs	r1, #0
 800feaa:	4862      	ldr	r0, [pc, #392]	; (8010034 <Load_File_Num+0x230>)
 800feac:	f013 f8a2 	bl	8022ff4 <memset>
 800feb0:	4a62      	ldr	r2, [pc, #392]	; (801003c <Load_File_Num+0x238>)
 800feb2:	f107 0318 	add.w	r3, r7, #24
 800feb6:	ca07      	ldmia	r2, {r0, r1, r2}
 800feb8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800febc:	f107 0218 	add.w	r2, r7, #24
 800fec0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fec4:	4611      	mov	r1, r2
 800fec6:	4618      	mov	r0, r3
 800fec8:	f7ff ff7e 	bl	800fdc8 <Make_Filename>
 800fecc:	e00d      	b.n	800feea <Load_File_Num+0xe6>
 800fece:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fed2:	b29b      	uxth	r3, r3
 800fed4:	3301      	adds	r3, #1
 800fed6:	b29b      	uxth	r3, r3
 800fed8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800feda:	f107 0218 	add.w	r2, r7, #24
 800fede:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fee2:	4611      	mov	r1, r2
 800fee4:	4618      	mov	r0, r3
 800fee6:	f7ff ff6f 	bl	800fdc8 <Make_Filename>
 800feea:	f107 030c 	add.w	r3, r7, #12
 800feee:	f107 0210 	add.w	r2, r7, #16
 800fef2:	f107 0118 	add.w	r1, r7, #24
 800fef6:	484f      	ldr	r0, [pc, #316]	; (8010034 <Load_File_Num+0x230>)
 800fef8:	f7ff fa02 	bl	800f300 <OpenFileRd>
 800fefc:	4603      	mov	r3, r0
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d0e5      	beq.n	800fece <Load_File_Num+0xca>
 800ff02:	e08f      	b.n	8010024 <Load_File_Num+0x220>
 800ff04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ff08:	2100      	movs	r1, #0
 800ff0a:	484a      	ldr	r0, [pc, #296]	; (8010034 <Load_File_Num+0x230>)
 800ff0c:	f013 f872 	bl	8022ff4 <memset>
 800ff10:	4a4b      	ldr	r2, [pc, #300]	; (8010040 <Load_File_Num+0x23c>)
 800ff12:	f107 0318 	add.w	r3, r7, #24
 800ff16:	ca07      	ldmia	r2, {r0, r1, r2}
 800ff18:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ff1c:	f107 0218 	add.w	r2, r7, #24
 800ff20:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ff24:	4611      	mov	r1, r2
 800ff26:	4618      	mov	r0, r3
 800ff28:	f7ff ff4e 	bl	800fdc8 <Make_Filename>
 800ff2c:	e00d      	b.n	800ff4a <Load_File_Num+0x146>
 800ff2e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ff32:	b29b      	uxth	r3, r3
 800ff34:	3301      	adds	r3, #1
 800ff36:	b29b      	uxth	r3, r3
 800ff38:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ff3a:	f107 0218 	add.w	r2, r7, #24
 800ff3e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ff42:	4611      	mov	r1, r2
 800ff44:	4618      	mov	r0, r3
 800ff46:	f7ff ff3f 	bl	800fdc8 <Make_Filename>
 800ff4a:	f107 030c 	add.w	r3, r7, #12
 800ff4e:	f107 0210 	add.w	r2, r7, #16
 800ff52:	f107 0118 	add.w	r1, r7, #24
 800ff56:	4837      	ldr	r0, [pc, #220]	; (8010034 <Load_File_Num+0x230>)
 800ff58:	f7ff f9d2 	bl	800f300 <OpenFileRd>
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d0e5      	beq.n	800ff2e <Load_File_Num+0x12a>
 800ff62:	e05f      	b.n	8010024 <Load_File_Num+0x220>
 800ff64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ff68:	2100      	movs	r1, #0
 800ff6a:	4832      	ldr	r0, [pc, #200]	; (8010034 <Load_File_Num+0x230>)
 800ff6c:	f013 f842 	bl	8022ff4 <memset>
 800ff70:	4a34      	ldr	r2, [pc, #208]	; (8010044 <Load_File_Num+0x240>)
 800ff72:	f107 0318 	add.w	r3, r7, #24
 800ff76:	ca07      	ldmia	r2, {r0, r1, r2}
 800ff78:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ff7c:	f107 0218 	add.w	r2, r7, #24
 800ff80:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ff84:	4611      	mov	r1, r2
 800ff86:	4618      	mov	r0, r3
 800ff88:	f7ff ff1e 	bl	800fdc8 <Make_Filename>
 800ff8c:	e00d      	b.n	800ffaa <Load_File_Num+0x1a6>
 800ff8e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ff92:	b29b      	uxth	r3, r3
 800ff94:	3301      	adds	r3, #1
 800ff96:	b29b      	uxth	r3, r3
 800ff98:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ff9a:	f107 0218 	add.w	r2, r7, #24
 800ff9e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ffa2:	4611      	mov	r1, r2
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	f7ff ff0f 	bl	800fdc8 <Make_Filename>
 800ffaa:	f107 030c 	add.w	r3, r7, #12
 800ffae:	f107 0210 	add.w	r2, r7, #16
 800ffb2:	f107 0118 	add.w	r1, r7, #24
 800ffb6:	481f      	ldr	r0, [pc, #124]	; (8010034 <Load_File_Num+0x230>)
 800ffb8:	f7ff f9a2 	bl	800f300 <OpenFileRd>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d0e5      	beq.n	800ff8e <Load_File_Num+0x18a>
 800ffc2:	e02f      	b.n	8010024 <Load_File_Num+0x220>
 800ffc4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ffc8:	2100      	movs	r1, #0
 800ffca:	481a      	ldr	r0, [pc, #104]	; (8010034 <Load_File_Num+0x230>)
 800ffcc:	f013 f812 	bl	8022ff4 <memset>
 800ffd0:	4a1d      	ldr	r2, [pc, #116]	; (8010048 <Load_File_Num+0x244>)
 800ffd2:	f107 0318 	add.w	r3, r7, #24
 800ffd6:	ca07      	ldmia	r2, {r0, r1, r2}
 800ffd8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ffdc:	f107 0218 	add.w	r2, r7, #24
 800ffe0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ffe4:	4611      	mov	r1, r2
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	f7ff feee 	bl	800fdc8 <Make_Filename>
 800ffec:	e00d      	b.n	801000a <Load_File_Num+0x206>
 800ffee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fff2:	b29b      	uxth	r3, r3
 800fff4:	3301      	adds	r3, #1
 800fff6:	b29b      	uxth	r3, r3
 800fff8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fffa:	f107 0218 	add.w	r2, r7, #24
 800fffe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010002:	4611      	mov	r1, r2
 8010004:	4618      	mov	r0, r3
 8010006:	f7ff fedf 	bl	800fdc8 <Make_Filename>
 801000a:	f107 030c 	add.w	r3, r7, #12
 801000e:	f107 0210 	add.w	r2, r7, #16
 8010012:	f107 0118 	add.w	r1, r7, #24
 8010016:	4807      	ldr	r0, [pc, #28]	; (8010034 <Load_File_Num+0x230>)
 8010018:	f7ff f972 	bl	800f300 <OpenFileRd>
 801001c:	4603      	mov	r3, r0
 801001e:	2b00      	cmp	r3, #0
 8010020:	d0e5      	beq.n	800ffee <Load_File_Num+0x1ea>
 8010022:	bf00      	nop
 8010024:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010028:	4618      	mov	r0, r3
 801002a:	3728      	adds	r7, #40	; 0x28
 801002c:	46bd      	mov	sp, r7
 801002e:	bd80      	pop	{r7, pc}
 8010030:	08000238 	.word	0x08000238
 8010034:	200017e0 	.word	0x200017e0
 8010038:	080001fc 	.word	0x080001fc
 801003c:	08000208 	.word	0x08000208
 8010040:	08000214 	.word	0x08000214
 8010044:	08000220 	.word	0x08000220
 8010048:	0800022c 	.word	0x0800022c

0801004c <File_Num>:
 801004c:	b580      	push	{r7, lr}
 801004e:	af00      	add	r7, sp, #0
 8010050:	201d      	movs	r0, #29
 8010052:	f7ff fed7 	bl	800fe04 <Load_File_Num>
 8010056:	4603      	mov	r3, r0
 8010058:	461a      	mov	r2, r3
 801005a:	4b12      	ldr	r3, [pc, #72]	; (80100a4 <File_Num+0x58>)
 801005c:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 8010060:	201e      	movs	r0, #30
 8010062:	f7ff fecf 	bl	800fe04 <Load_File_Num>
 8010066:	4603      	mov	r3, r0
 8010068:	461a      	mov	r2, r3
 801006a:	4b0e      	ldr	r3, [pc, #56]	; (80100a4 <File_Num+0x58>)
 801006c:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
 8010070:	201f      	movs	r0, #31
 8010072:	f7ff fec7 	bl	800fe04 <Load_File_Num>
 8010076:	4603      	mov	r3, r0
 8010078:	461a      	mov	r2, r3
 801007a:	4b0a      	ldr	r3, [pc, #40]	; (80100a4 <File_Num+0x58>)
 801007c:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
 8010080:	2020      	movs	r0, #32
 8010082:	f7ff febf 	bl	800fe04 <Load_File_Num>
 8010086:	4603      	mov	r3, r0
 8010088:	461a      	mov	r2, r3
 801008a:	4b06      	ldr	r3, [pc, #24]	; (80100a4 <File_Num+0x58>)
 801008c:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 8010090:	2021      	movs	r0, #33	; 0x21
 8010092:	f7ff feb7 	bl	800fe04 <Load_File_Num>
 8010096:	4603      	mov	r3, r0
 8010098:	461a      	mov	r2, r3
 801009a:	4b02      	ldr	r3, [pc, #8]	; (80100a4 <File_Num+0x58>)
 801009c:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
 80100a0:	bf00      	nop
 80100a2:	bd80      	pop	{r7, pc}
 80100a4:	2000029c 	.word	0x2000029c

080100a8 <Load_Buf>:
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b08e      	sub	sp, #56	; 0x38
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	4603      	mov	r3, r0
 80100b0:	80fb      	strh	r3, [r7, #6]
 80100b2:	4a66      	ldr	r2, [pc, #408]	; (801024c <Load_Buf+0x1a4>)
 80100b4:	f107 0318 	add.w	r3, r7, #24
 80100b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80100ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80100be:	2301      	movs	r3, #1
 80100c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80100c2:	f107 0218 	add.w	r2, r7, #24
 80100c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80100ca:	4611      	mov	r1, r2
 80100cc:	4618      	mov	r0, r3
 80100ce:	f7ff fe7b 	bl	800fdc8 <Make_Filename>
 80100d2:	f107 030c 	add.w	r3, r7, #12
 80100d6:	f107 0210 	add.w	r2, r7, #16
 80100da:	f107 0118 	add.w	r1, r7, #24
 80100de:	485c      	ldr	r0, [pc, #368]	; (8010250 <Load_Buf+0x1a8>)
 80100e0:	f7ff f90e 	bl	800f300 <OpenFileRd>
 80100e4:	4603      	mov	r3, r0
 80100e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80100e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d002      	beq.n	80100f4 <Load_Buf+0x4c>
 80100ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100f0:	b2db      	uxtb	r3, r3
 80100f2:	e0a6      	b.n	8010242 <Load_Buf+0x19a>
 80100f4:	2302      	movs	r3, #2
 80100f6:	633b      	str	r3, [r7, #48]	; 0x30
 80100f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80100fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80100fe:	4b55      	ldr	r3, [pc, #340]	; (8010254 <Load_Buf+0x1ac>)
 8010100:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010104:	2b03      	cmp	r3, #3
 8010106:	d101      	bne.n	801010c <Load_Buf+0x64>
 8010108:	2304      	movs	r3, #4
 801010a:	633b      	str	r3, [r7, #48]	; 0x30
 801010c:	2300      	movs	r3, #0
 801010e:	637b      	str	r3, [r7, #52]	; 0x34
 8010110:	e01d      	b.n	801014e <Load_Buf+0xa6>
 8010112:	f107 0310 	add.w	r3, r7, #16
 8010116:	4619      	mov	r1, r3
 8010118:	484d      	ldr	r0, [pc, #308]	; (8010250 <Load_Buf+0x1a8>)
 801011a:	f7ff fb29 	bl	800f770 <ReadFileSec>
 801011e:	4603      	mov	r3, r0
 8010120:	2b00      	cmp	r3, #0
 8010122:	d001      	beq.n	8010128 <Load_Buf+0x80>
 8010124:	2303      	movs	r3, #3
 8010126:	e08c      	b.n	8010242 <Load_Buf+0x19a>
 8010128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801012a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801012c:	fb02 f303 	mul.w	r3, r2, r3
 8010130:	0fda      	lsrs	r2, r3, #31
 8010132:	4413      	add	r3, r2
 8010134:	105b      	asrs	r3, r3, #1
 8010136:	3302      	adds	r3, #2
 8010138:	005b      	lsls	r3, r3, #1
 801013a:	4a47      	ldr	r2, [pc, #284]	; (8010258 <Load_Buf+0x1b0>)
 801013c:	4413      	add	r3, r2
 801013e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010140:	4943      	ldr	r1, [pc, #268]	; (8010250 <Load_Buf+0x1a8>)
 8010142:	4618      	mov	r0, r3
 8010144:	f012 ff48 	bl	8022fd8 <memcpy>
 8010148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801014a:	3301      	adds	r3, #1
 801014c:	637b      	str	r3, [r7, #52]	; 0x34
 801014e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010152:	429a      	cmp	r2, r3
 8010154:	dbdd      	blt.n	8010112 <Load_Buf+0x6a>
 8010156:	f107 0310 	add.w	r3, r7, #16
 801015a:	4619      	mov	r1, r3
 801015c:	483c      	ldr	r0, [pc, #240]	; (8010250 <Load_Buf+0x1a8>)
 801015e:	f7ff fb07 	bl	800f770 <ReadFileSec>
 8010162:	4603      	mov	r3, r0
 8010164:	2b00      	cmp	r3, #0
 8010166:	d001      	beq.n	801016c <Load_Buf+0xc4>
 8010168:	2303      	movs	r3, #3
 801016a:	e06a      	b.n	8010242 <Load_Buf+0x19a>
 801016c:	4b3b      	ldr	r3, [pc, #236]	; (801025c <Load_Buf+0x1b4>)
 801016e:	627b      	str	r3, [r7, #36]	; 0x24
 8010170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010172:	1c9a      	adds	r2, r3, #2
 8010174:	627a      	str	r2, [r7, #36]	; 0x24
 8010176:	f64a 2255 	movw	r2, #43605	; 0xaa55
 801017a:	801a      	strh	r2, [r3, #0]
 801017c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801017e:	1c9a      	adds	r2, r3, #2
 8010180:	627a      	str	r2, [r7, #36]	; 0x24
 8010182:	4a35      	ldr	r2, [pc, #212]	; (8010258 <Load_Buf+0x1b0>)
 8010184:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010188:	801a      	strh	r2, [r3, #0]
 801018a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801018c:	1c9a      	adds	r2, r3, #2
 801018e:	627a      	str	r2, [r7, #36]	; 0x24
 8010190:	4a31      	ldr	r2, [pc, #196]	; (8010258 <Load_Buf+0x1b0>)
 8010192:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8010196:	801a      	strh	r2, [r3, #0]
 8010198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801019a:	1c9a      	adds	r2, r3, #2
 801019c:	627a      	str	r2, [r7, #36]	; 0x24
 801019e:	4a2d      	ldr	r2, [pc, #180]	; (8010254 <Load_Buf+0x1ac>)
 80101a0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80101a4:	801a      	strh	r2, [r3, #0]
 80101a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101a8:	1c9a      	adds	r2, r3, #2
 80101aa:	627a      	str	r2, [r7, #36]	; 0x24
 80101ac:	4a29      	ldr	r2, [pc, #164]	; (8010254 <Load_Buf+0x1ac>)
 80101ae:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 80101b2:	801a      	strh	r2, [r3, #0]
 80101b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101b6:	1c9a      	adds	r2, r3, #2
 80101b8:	627a      	str	r2, [r7, #36]	; 0x24
 80101ba:	4a26      	ldr	r2, [pc, #152]	; (8010254 <Load_Buf+0x1ac>)
 80101bc:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 80101c0:	801a      	strh	r2, [r3, #0]
 80101c2:	4b23      	ldr	r3, [pc, #140]	; (8010250 <Load_Buf+0x1a8>)
 80101c4:	627b      	str	r3, [r7, #36]	; 0x24
 80101c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101c8:	1c9a      	adds	r2, r3, #2
 80101ca:	627a      	str	r2, [r7, #36]	; 0x24
 80101cc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80101d0:	4b21      	ldr	r3, [pc, #132]	; (8010258 <Load_Buf+0x1b0>)
 80101d2:	801a      	strh	r2, [r3, #0]
 80101d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101d6:	1c9a      	adds	r2, r3, #2
 80101d8:	627a      	str	r2, [r7, #36]	; 0x24
 80101da:	f9b3 2000 	ldrsh.w	r2, [r3]
 80101de:	4b1e      	ldr	r3, [pc, #120]	; (8010258 <Load_Buf+0x1b0>)
 80101e0:	805a      	strh	r2, [r3, #2]
 80101e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101e4:	1c9a      	adds	r2, r3, #2
 80101e6:	627a      	str	r2, [r7, #36]	; 0x24
 80101e8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80101ec:	4b19      	ldr	r3, [pc, #100]	; (8010254 <Load_Buf+0x1ac>)
 80101ee:	809a      	strh	r2, [r3, #4]
 80101f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101f2:	1c9a      	adds	r2, r3, #2
 80101f4:	627a      	str	r2, [r7, #36]	; 0x24
 80101f6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80101fa:	4b16      	ldr	r3, [pc, #88]	; (8010254 <Load_Buf+0x1ac>)
 80101fc:	829a      	strh	r2, [r3, #20]
 80101fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010200:	1c9a      	adds	r2, r3, #2
 8010202:	627a      	str	r2, [r7, #36]	; 0x24
 8010204:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010208:	4b12      	ldr	r3, [pc, #72]	; (8010254 <Load_Buf+0x1ac>)
 801020a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 801020e:	4b14      	ldr	r3, [pc, #80]	; (8010260 <Load_Buf+0x1b8>)
 8010210:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010214:	f043 0301 	orr.w	r3, r3, #1
 8010218:	b21a      	sxth	r2, r3
 801021a:	4b11      	ldr	r3, [pc, #68]	; (8010260 <Load_Buf+0x1b8>)
 801021c:	801a      	strh	r2, [r3, #0]
 801021e:	f004 fa51 	bl	80146c4 <DispStatus>
 8010222:	4b0c      	ldr	r3, [pc, #48]	; (8010254 <Load_Buf+0x1ac>)
 8010224:	f9b3 311c 	ldrsh.w	r3, [r3, #284]	; 0x11c
 8010228:	2b62      	cmp	r3, #98	; 0x62
 801022a:	dc09      	bgt.n	8010240 <Load_Buf+0x198>
 801022c:	4b09      	ldr	r3, [pc, #36]	; (8010254 <Load_Buf+0x1ac>)
 801022e:	f9b3 311c 	ldrsh.w	r3, [r3, #284]	; 0x11c
 8010232:	b29b      	uxth	r3, r3
 8010234:	3301      	adds	r3, #1
 8010236:	b29b      	uxth	r3, r3
 8010238:	b21a      	sxth	r2, r3
 801023a:	4b06      	ldr	r3, [pc, #24]	; (8010254 <Load_Buf+0x1ac>)
 801023c:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
 8010240:	2300      	movs	r3, #0
 8010242:	4618      	mov	r0, r3
 8010244:	3738      	adds	r7, #56	; 0x38
 8010246:	46bd      	mov	sp, r7
 8010248:	bd80      	pop	{r7, pc}
 801024a:	bf00      	nop
 801024c:	08000214 	.word	0x08000214
 8010250:	200017e0 	.word	0x200017e0
 8010254:	2000029c 	.word	0x2000029c
 8010258:	20002878 	.word	0x20002878
 801025c:	200015e0 	.word	0x200015e0
 8010260:	200007a8 	.word	0x200007a8

08010264 <Save_Buf>:
 8010264:	b580      	push	{r7, lr}
 8010266:	b08e      	sub	sp, #56	; 0x38
 8010268:	af00      	add	r7, sp, #0
 801026a:	4603      	mov	r3, r0
 801026c:	80fb      	strh	r3, [r7, #6]
 801026e:	4a64      	ldr	r2, [pc, #400]	; (8010400 <Save_Buf+0x19c>)
 8010270:	f107 0318 	add.w	r3, r7, #24
 8010274:	ca07      	ldmia	r2, {r0, r1, r2}
 8010276:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801027a:	2300      	movs	r3, #0
 801027c:	637b      	str	r3, [r7, #52]	; 0x34
 801027e:	2304      	movs	r3, #4
 8010280:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010282:	2300      	movs	r3, #0
 8010284:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010288:	2302      	movs	r3, #2
 801028a:	863b      	strh	r3, [r7, #48]	; 0x30
 801028c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010290:	857b      	strh	r3, [r7, #42]	; 0x2a
 8010292:	4b5c      	ldr	r3, [pc, #368]	; (8010404 <Save_Buf+0x1a0>)
 8010294:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010298:	2b03      	cmp	r3, #3
 801029a:	d101      	bne.n	80102a0 <Save_Buf+0x3c>
 801029c:	2304      	movs	r3, #4
 801029e:	863b      	strh	r3, [r7, #48]	; 0x30
 80102a0:	f107 0218 	add.w	r2, r7, #24
 80102a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80102a8:	4611      	mov	r1, r2
 80102aa:	4618      	mov	r0, r3
 80102ac:	f7ff fd8c 	bl	800fdc8 <Make_Filename>
 80102b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80102b4:	2100      	movs	r1, #0
 80102b6:	4854      	ldr	r0, [pc, #336]	; (8010408 <Save_Buf+0x1a4>)
 80102b8:	f012 fe9c 	bl	8022ff4 <memset>
 80102bc:	f107 030c 	add.w	r3, r7, #12
 80102c0:	f107 0210 	add.w	r2, r7, #16
 80102c4:	f107 0118 	add.w	r1, r7, #24
 80102c8:	484f      	ldr	r0, [pc, #316]	; (8010408 <Save_Buf+0x1a4>)
 80102ca:	f7ff fae3 	bl	800f894 <OpenFileWr>
 80102ce:	4603      	mov	r3, r0
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d002      	beq.n	80102da <Save_Buf+0x76>
 80102d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102d6:	b2db      	uxtb	r3, r3
 80102d8:	e08e      	b.n	80103f8 <Save_Buf+0x194>
 80102da:	2300      	movs	r3, #0
 80102dc:	637b      	str	r3, [r7, #52]	; 0x34
 80102de:	e02f      	b.n	8010340 <Save_Buf+0xdc>
 80102e0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80102e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80102e6:	fb02 f303 	mul.w	r3, r2, r3
 80102ea:	0fda      	lsrs	r2, r3, #31
 80102ec:	4413      	add	r3, r2
 80102ee:	105b      	asrs	r3, r3, #1
 80102f0:	3302      	adds	r3, #2
 80102f2:	005b      	lsls	r3, r3, #1
 80102f4:	4a45      	ldr	r2, [pc, #276]	; (801040c <Save_Buf+0x1a8>)
 80102f6:	4413      	add	r3, r2
 80102f8:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80102fc:	4619      	mov	r1, r3
 80102fe:	4842      	ldr	r0, [pc, #264]	; (8010408 <Save_Buf+0x1a4>)
 8010300:	f012 fe6a 	bl	8022fd8 <memcpy>
 8010304:	f107 0310 	add.w	r3, r7, #16
 8010308:	4619      	mov	r1, r3
 801030a:	483f      	ldr	r0, [pc, #252]	; (8010408 <Save_Buf+0x1a4>)
 801030c:	f7ff f9ea 	bl	800f6e4 <ProgFileSec>
 8010310:	4603      	mov	r3, r0
 8010312:	2b00      	cmp	r3, #0
 8010314:	d001      	beq.n	801031a <Save_Buf+0xb6>
 8010316:	2303      	movs	r3, #3
 8010318:	e06e      	b.n	80103f8 <Save_Buf+0x194>
 801031a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801031e:	1c5a      	adds	r2, r3, #1
 8010320:	f887 2033 	strb.w	r2, [r7, #51]	; 0x33
 8010324:	085b      	lsrs	r3, r3, #1
 8010326:	b2db      	uxtb	r3, r3
 8010328:	f003 0303 	and.w	r3, r3, #3
 801032c:	b2db      	uxtb	r3, r3
 801032e:	461a      	mov	r2, r3
 8010330:	2102      	movs	r1, #2
 8010332:	f44f 7084 	mov.w	r0, #264	; 0x108
 8010336:	f7ff fb8f 	bl	800fa58 <PrintClk>
 801033a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801033c:	3301      	adds	r3, #1
 801033e:	637b      	str	r3, [r7, #52]	; 0x34
 8010340:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010344:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010346:	429a      	cmp	r2, r3
 8010348:	dbca      	blt.n	80102e0 <Save_Buf+0x7c>
 801034a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801034e:	461a      	mov	r2, r3
 8010350:	2100      	movs	r1, #0
 8010352:	482d      	ldr	r0, [pc, #180]	; (8010408 <Save_Buf+0x1a4>)
 8010354:	f012 fe4e 	bl	8022ff4 <memset>
 8010358:	4b2b      	ldr	r3, [pc, #172]	; (8010408 <Save_Buf+0x1a4>)
 801035a:	627b      	str	r3, [r7, #36]	; 0x24
 801035c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801035e:	1c9a      	adds	r2, r3, #2
 8010360:	627a      	str	r2, [r7, #36]	; 0x24
 8010362:	4a2a      	ldr	r2, [pc, #168]	; (801040c <Save_Buf+0x1a8>)
 8010364:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010368:	801a      	strh	r2, [r3, #0]
 801036a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801036c:	1c9a      	adds	r2, r3, #2
 801036e:	627a      	str	r2, [r7, #36]	; 0x24
 8010370:	4a26      	ldr	r2, [pc, #152]	; (801040c <Save_Buf+0x1a8>)
 8010372:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8010376:	801a      	strh	r2, [r3, #0]
 8010378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801037a:	1c9a      	adds	r2, r3, #2
 801037c:	627a      	str	r2, [r7, #36]	; 0x24
 801037e:	4a21      	ldr	r2, [pc, #132]	; (8010404 <Save_Buf+0x1a0>)
 8010380:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8010384:	801a      	strh	r2, [r3, #0]
 8010386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010388:	1c9a      	adds	r2, r3, #2
 801038a:	627a      	str	r2, [r7, #36]	; 0x24
 801038c:	4a1d      	ldr	r2, [pc, #116]	; (8010404 <Save_Buf+0x1a0>)
 801038e:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 8010392:	801a      	strh	r2, [r3, #0]
 8010394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010396:	1c9a      	adds	r2, r3, #2
 8010398:	627a      	str	r2, [r7, #36]	; 0x24
 801039a:	4a1a      	ldr	r2, [pc, #104]	; (8010404 <Save_Buf+0x1a0>)
 801039c:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 80103a0:	801a      	strh	r2, [r3, #0]
 80103a2:	f107 0310 	add.w	r3, r7, #16
 80103a6:	4619      	mov	r1, r3
 80103a8:	4817      	ldr	r0, [pc, #92]	; (8010408 <Save_Buf+0x1a4>)
 80103aa:	f7ff f99b 	bl	800f6e4 <ProgFileSec>
 80103ae:	4603      	mov	r3, r0
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d001      	beq.n	80103b8 <Save_Buf+0x154>
 80103b4:	2303      	movs	r3, #3
 80103b6:	e01f      	b.n	80103f8 <Save_Buf+0x194>
 80103b8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80103bc:	f503 5100 	add.w	r1, r3, #8192	; 0x2000
 80103c0:	f107 030c 	add.w	r3, r7, #12
 80103c4:	f107 0210 	add.w	r2, r7, #16
 80103c8:	480f      	ldr	r0, [pc, #60]	; (8010408 <Save_Buf+0x1a4>)
 80103ca:	f7ff f9ff 	bl	800f7cc <CloseFile>
 80103ce:	4603      	mov	r3, r0
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d001      	beq.n	80103d8 <Save_Buf+0x174>
 80103d4:	2303      	movs	r3, #3
 80103d6:	e00f      	b.n	80103f8 <Save_Buf+0x194>
 80103d8:	4b0a      	ldr	r3, [pc, #40]	; (8010404 <Save_Buf+0x1a0>)
 80103da:	f9b3 30fc 	ldrsh.w	r3, [r3, #252]	; 0xfc
 80103de:	2b62      	cmp	r3, #98	; 0x62
 80103e0:	dc09      	bgt.n	80103f6 <Save_Buf+0x192>
 80103e2:	4b08      	ldr	r3, [pc, #32]	; (8010404 <Save_Buf+0x1a0>)
 80103e4:	f9b3 30fc 	ldrsh.w	r3, [r3, #252]	; 0xfc
 80103e8:	b29b      	uxth	r3, r3
 80103ea:	3301      	adds	r3, #1
 80103ec:	b29b      	uxth	r3, r3
 80103ee:	b21a      	sxth	r2, r3
 80103f0:	4b04      	ldr	r3, [pc, #16]	; (8010404 <Save_Buf+0x1a0>)
 80103f2:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
 80103f6:	2300      	movs	r3, #0
 80103f8:	4618      	mov	r0, r3
 80103fa:	3738      	adds	r7, #56	; 0x38
 80103fc:	46bd      	mov	sp, r7
 80103fe:	bd80      	pop	{r7, pc}
 8010400:	08000214 	.word	0x08000214
 8010404:	2000029c 	.word	0x2000029c
 8010408:	200017e0 	.word	0x200017e0
 801040c:	20002878 	.word	0x20002878

08010410 <Save_Dat>:
 8010410:	b580      	push	{r7, lr}
 8010412:	b08a      	sub	sp, #40	; 0x28
 8010414:	af00      	add	r7, sp, #0
 8010416:	4603      	mov	r3, r0
 8010418:	80fb      	strh	r3, [r7, #6]
 801041a:	4a42      	ldr	r2, [pc, #264]	; (8010524 <Save_Dat+0x114>)
 801041c:	f107 0318 	add.w	r3, r7, #24
 8010420:	ca07      	ldmia	r2, {r0, r1, r2}
 8010422:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010426:	2304      	movs	r3, #4
 8010428:	84fb      	strh	r3, [r7, #38]	; 0x26
 801042a:	f107 0218 	add.w	r2, r7, #24
 801042e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010432:	4611      	mov	r1, r2
 8010434:	4618      	mov	r0, r3
 8010436:	f7ff fcc7 	bl	800fdc8 <Make_Filename>
 801043a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801043e:	2100      	movs	r1, #0
 8010440:	4839      	ldr	r0, [pc, #228]	; (8010528 <Save_Dat+0x118>)
 8010442:	f012 fdd7 	bl	8022ff4 <memset>
 8010446:	f107 030c 	add.w	r3, r7, #12
 801044a:	f107 0210 	add.w	r2, r7, #16
 801044e:	f107 0118 	add.w	r1, r7, #24
 8010452:	4835      	ldr	r0, [pc, #212]	; (8010528 <Save_Dat+0x118>)
 8010454:	f7ff fa1e 	bl	800f894 <OpenFileWr>
 8010458:	4603      	mov	r3, r0
 801045a:	2b00      	cmp	r3, #0
 801045c:	d002      	beq.n	8010464 <Save_Dat+0x54>
 801045e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010460:	b2db      	uxtb	r3, r3
 8010462:	e05b      	b.n	801051c <Save_Dat+0x10c>
 8010464:	4b30      	ldr	r3, [pc, #192]	; (8010528 <Save_Dat+0x118>)
 8010466:	2201      	movs	r2, #1
 8010468:	701a      	strb	r2, [r3, #0]
 801046a:	4b30      	ldr	r3, [pc, #192]	; (801052c <Save_Dat+0x11c>)
 801046c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8010470:	b2da      	uxtb	r2, r3
 8010472:	4b2d      	ldr	r3, [pc, #180]	; (8010528 <Save_Dat+0x118>)
 8010474:	705a      	strb	r2, [r3, #1]
 8010476:	4b2d      	ldr	r3, [pc, #180]	; (801052c <Save_Dat+0x11c>)
 8010478:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 801047c:	b2da      	uxtb	r2, r3
 801047e:	4b2a      	ldr	r3, [pc, #168]	; (8010528 <Save_Dat+0x118>)
 8010480:	709a      	strb	r2, [r3, #2]
 8010482:	4b2a      	ldr	r3, [pc, #168]	; (801052c <Save_Dat+0x11c>)
 8010484:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010488:	b2da      	uxtb	r2, r3
 801048a:	4b27      	ldr	r3, [pc, #156]	; (8010528 <Save_Dat+0x118>)
 801048c:	70da      	strb	r2, [r3, #3]
 801048e:	4b27      	ldr	r3, [pc, #156]	; (801052c <Save_Dat+0x11c>)
 8010490:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010494:	b2da      	uxtb	r2, r3
 8010496:	4b24      	ldr	r3, [pc, #144]	; (8010528 <Save_Dat+0x118>)
 8010498:	711a      	strb	r2, [r3, #4]
 801049a:	4b24      	ldr	r3, [pc, #144]	; (801052c <Save_Dat+0x11c>)
 801049c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80104a0:	b2da      	uxtb	r2, r3
 80104a2:	4b21      	ldr	r3, [pc, #132]	; (8010528 <Save_Dat+0x118>)
 80104a4:	715a      	strb	r2, [r3, #5]
 80104a6:	4b21      	ldr	r3, [pc, #132]	; (801052c <Save_Dat+0x11c>)
 80104a8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80104ac:	b2da      	uxtb	r2, r3
 80104ae:	4b1e      	ldr	r3, [pc, #120]	; (8010528 <Save_Dat+0x118>)
 80104b0:	719a      	strb	r2, [r3, #6]
 80104b2:	4b1e      	ldr	r3, [pc, #120]	; (801052c <Save_Dat+0x11c>)
 80104b4:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 80104b8:	b2da      	uxtb	r2, r3
 80104ba:	4b1b      	ldr	r3, [pc, #108]	; (8010528 <Save_Dat+0x118>)
 80104bc:	71da      	strb	r2, [r3, #7]
 80104be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80104c2:	491b      	ldr	r1, [pc, #108]	; (8010530 <Save_Dat+0x120>)
 80104c4:	481b      	ldr	r0, [pc, #108]	; (8010534 <Save_Dat+0x124>)
 80104c6:	f012 fd87 	bl	8022fd8 <memcpy>
 80104ca:	f107 0310 	add.w	r3, r7, #16
 80104ce:	4619      	mov	r1, r3
 80104d0:	4815      	ldr	r0, [pc, #84]	; (8010528 <Save_Dat+0x118>)
 80104d2:	f7ff f907 	bl	800f6e4 <ProgFileSec>
 80104d6:	4603      	mov	r3, r0
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d001      	beq.n	80104e0 <Save_Dat+0xd0>
 80104dc:	2303      	movs	r3, #3
 80104de:	e01d      	b.n	801051c <Save_Dat+0x10c>
 80104e0:	f107 030c 	add.w	r3, r7, #12
 80104e4:	f107 0210 	add.w	r2, r7, #16
 80104e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80104ec:	480e      	ldr	r0, [pc, #56]	; (8010528 <Save_Dat+0x118>)
 80104ee:	f7ff f96d 	bl	800f7cc <CloseFile>
 80104f2:	4603      	mov	r3, r0
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d001      	beq.n	80104fc <Save_Dat+0xec>
 80104f8:	2303      	movs	r3, #3
 80104fa:	e00f      	b.n	801051c <Save_Dat+0x10c>
 80104fc:	4b0b      	ldr	r3, [pc, #44]	; (801052c <Save_Dat+0x11c>)
 80104fe:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 8010502:	2b62      	cmp	r3, #98	; 0x62
 8010504:	dc09      	bgt.n	801051a <Save_Dat+0x10a>
 8010506:	4b09      	ldr	r3, [pc, #36]	; (801052c <Save_Dat+0x11c>)
 8010508:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 801050c:	b29b      	uxth	r3, r3
 801050e:	3301      	adds	r3, #1
 8010510:	b29b      	uxth	r3, r3
 8010512:	b21a      	sxth	r2, r3
 8010514:	4b05      	ldr	r3, [pc, #20]	; (801052c <Save_Dat+0x11c>)
 8010516:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
 801051a:	2300      	movs	r3, #0
 801051c:	4618      	mov	r0, r3
 801051e:	3728      	adds	r7, #40	; 0x28
 8010520:	46bd      	mov	sp, r7
 8010522:	bd80      	pop	{r7, pc}
 8010524:	08000208 	.word	0x08000208
 8010528:	200017e0 	.word	0x200017e0
 801052c:	2000029c 	.word	0x2000029c
 8010530:	20000c10 	.word	0x20000c10
 8010534:	200017ea 	.word	0x200017ea

08010538 <Load_Dat>:
 8010538:	b580      	push	{r7, lr}
 801053a:	b08a      	sub	sp, #40	; 0x28
 801053c:	af00      	add	r7, sp, #0
 801053e:	4603      	mov	r3, r0
 8010540:	80fb      	strh	r3, [r7, #6]
 8010542:	4a4f      	ldr	r2, [pc, #316]	; (8010680 <Load_Dat+0x148>)
 8010544:	f107 0314 	add.w	r3, r7, #20
 8010548:	ca07      	ldmia	r2, {r0, r1, r2}
 801054a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801054e:	2300      	movs	r3, #0
 8010550:	847b      	strh	r3, [r7, #34]	; 0x22
 8010552:	f107 0214 	add.w	r2, r7, #20
 8010556:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801055a:	4611      	mov	r1, r2
 801055c:	4618      	mov	r0, r3
 801055e:	f7ff fc33 	bl	800fdc8 <Make_Filename>
 8010562:	f107 0308 	add.w	r3, r7, #8
 8010566:	f107 020c 	add.w	r2, r7, #12
 801056a:	f107 0114 	add.w	r1, r7, #20
 801056e:	4845      	ldr	r0, [pc, #276]	; (8010684 <Load_Dat+0x14c>)
 8010570:	f7fe fec6 	bl	800f300 <OpenFileRd>
 8010574:	4603      	mov	r3, r0
 8010576:	847b      	strh	r3, [r7, #34]	; 0x22
 8010578:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801057c:	2b00      	cmp	r3, #0
 801057e:	d002      	beq.n	8010586 <Load_Dat+0x4e>
 8010580:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010582:	b2db      	uxtb	r3, r3
 8010584:	e077      	b.n	8010676 <Load_Dat+0x13e>
 8010586:	f107 030c 	add.w	r3, r7, #12
 801058a:	4619      	mov	r1, r3
 801058c:	483d      	ldr	r0, [pc, #244]	; (8010684 <Load_Dat+0x14c>)
 801058e:	f7ff f8ef 	bl	800f770 <ReadFileSec>
 8010592:	4603      	mov	r3, r0
 8010594:	2b00      	cmp	r3, #0
 8010596:	d001      	beq.n	801059c <Load_Dat+0x64>
 8010598:	2303      	movs	r3, #3
 801059a:	e06c      	b.n	8010676 <Load_Dat+0x13e>
 801059c:	f44f 729b 	mov.w	r2, #310	; 0x136
 80105a0:	4938      	ldr	r1, [pc, #224]	; (8010684 <Load_Dat+0x14c>)
 80105a2:	4839      	ldr	r0, [pc, #228]	; (8010688 <Load_Dat+0x150>)
 80105a4:	f012 fd18 	bl	8022fd8 <memcpy>
 80105a8:	4b36      	ldr	r3, [pc, #216]	; (8010684 <Load_Dat+0x14c>)
 80105aa:	78db      	ldrb	r3, [r3, #3]
 80105ac:	b21a      	sxth	r2, r3
 80105ae:	4b37      	ldr	r3, [pc, #220]	; (801068c <Load_Dat+0x154>)
 80105b0:	879a      	strh	r2, [r3, #60]	; 0x3c
 80105b2:	4b34      	ldr	r3, [pc, #208]	; (8010684 <Load_Dat+0x14c>)
 80105b4:	791b      	ldrb	r3, [r3, #4]
 80105b6:	b21a      	sxth	r2, r3
 80105b8:	4b34      	ldr	r3, [pc, #208]	; (801068c <Load_Dat+0x154>)
 80105ba:	809a      	strh	r2, [r3, #4]
 80105bc:	4b31      	ldr	r3, [pc, #196]	; (8010684 <Load_Dat+0x14c>)
 80105be:	795b      	ldrb	r3, [r3, #5]
 80105c0:	b21a      	sxth	r2, r3
 80105c2:	4b32      	ldr	r3, [pc, #200]	; (801068c <Load_Dat+0x154>)
 80105c4:	819a      	strh	r2, [r3, #12]
 80105c6:	4b2f      	ldr	r3, [pc, #188]	; (8010684 <Load_Dat+0x14c>)
 80105c8:	799b      	ldrb	r3, [r3, #6]
 80105ca:	b21a      	sxth	r2, r3
 80105cc:	4b2f      	ldr	r3, [pc, #188]	; (801068c <Load_Dat+0x154>)
 80105ce:	829a      	strh	r2, [r3, #20]
 80105d0:	4b2c      	ldr	r3, [pc, #176]	; (8010684 <Load_Dat+0x14c>)
 80105d2:	79db      	ldrb	r3, [r3, #7]
 80105d4:	b21a      	sxth	r2, r3
 80105d6:	4b2d      	ldr	r3, [pc, #180]	; (801068c <Load_Dat+0x154>)
 80105d8:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 80105dc:	2300      	movs	r3, #0
 80105de:	627b      	str	r3, [r7, #36]	; 0x24
 80105e0:	e010      	b.n	8010604 <Load_Dat+0xcc>
 80105e2:	4a2a      	ldr	r2, [pc, #168]	; (801068c <Load_Dat+0x154>)
 80105e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105e6:	00db      	lsls	r3, r3, #3
 80105e8:	4413      	add	r3, r2
 80105ea:	799b      	ldrb	r3, [r3, #6]
 80105ec:	f043 0320 	orr.w	r3, r3, #32
 80105f0:	b2d9      	uxtb	r1, r3
 80105f2:	4a26      	ldr	r2, [pc, #152]	; (801068c <Load_Dat+0x154>)
 80105f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f6:	00db      	lsls	r3, r3, #3
 80105f8:	4413      	add	r3, r2
 80105fa:	460a      	mov	r2, r1
 80105fc:	719a      	strb	r2, [r3, #6]
 80105fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010600:	3301      	adds	r3, #1
 8010602:	627b      	str	r3, [r7, #36]	; 0x24
 8010604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010606:	2b03      	cmp	r3, #3
 8010608:	ddeb      	ble.n	80105e2 <Load_Dat+0xaa>
 801060a:	4b20      	ldr	r3, [pc, #128]	; (801068c <Load_Dat+0x154>)
 801060c:	f893 30d6 	ldrb.w	r3, [r3, #214]	; 0xd6
 8010610:	f043 0320 	orr.w	r3, r3, #32
 8010614:	b2da      	uxtb	r2, r3
 8010616:	4b1d      	ldr	r3, [pc, #116]	; (801068c <Load_Dat+0x154>)
 8010618:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
 801061c:	4b1b      	ldr	r3, [pc, #108]	; (801068c <Load_Dat+0x154>)
 801061e:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 8010622:	f043 0320 	orr.w	r3, r3, #32
 8010626:	b2da      	uxtb	r2, r3
 8010628:	4b18      	ldr	r3, [pc, #96]	; (801068c <Load_Dat+0x154>)
 801062a:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
 801062e:	4b17      	ldr	r3, [pc, #92]	; (801068c <Load_Dat+0x154>)
 8010630:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010634:	f043 0320 	orr.w	r3, r3, #32
 8010638:	b2da      	uxtb	r2, r3
 801063a:	4b14      	ldr	r3, [pc, #80]	; (801068c <Load_Dat+0x154>)
 801063c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010640:	4b12      	ldr	r3, [pc, #72]	; (801068c <Load_Dat+0x154>)
 8010642:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8010646:	f043 0320 	orr.w	r3, r3, #32
 801064a:	b2da      	uxtb	r2, r3
 801064c:	4b0f      	ldr	r3, [pc, #60]	; (801068c <Load_Dat+0x154>)
 801064e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8010652:	f002 ffab 	bl	80135ac <Update_Detail>
 8010656:	4b0d      	ldr	r3, [pc, #52]	; (801068c <Load_Dat+0x154>)
 8010658:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	; 0x114
 801065c:	2b62      	cmp	r3, #98	; 0x62
 801065e:	dc09      	bgt.n	8010674 <Load_Dat+0x13c>
 8010660:	4b0a      	ldr	r3, [pc, #40]	; (801068c <Load_Dat+0x154>)
 8010662:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	; 0x114
 8010666:	b29b      	uxth	r3, r3
 8010668:	3301      	adds	r3, #1
 801066a:	b29b      	uxth	r3, r3
 801066c:	b21a      	sxth	r2, r3
 801066e:	4b07      	ldr	r3, [pc, #28]	; (801068c <Load_Dat+0x154>)
 8010670:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
 8010674:	2300      	movs	r3, #0
 8010676:	4618      	mov	r0, r3
 8010678:	3728      	adds	r7, #40	; 0x28
 801067a:	46bd      	mov	sp, r7
 801067c:	bd80      	pop	{r7, pc}
 801067e:	bf00      	nop
 8010680:	08000208 	.word	0x08000208
 8010684:	200017e0 	.word	0x200017e0
 8010688:	2000000c 	.word	0x2000000c
 801068c:	2000029c 	.word	0x2000029c

08010690 <Save_Bmp>:
 8010690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010692:	b08f      	sub	sp, #60	; 0x3c
 8010694:	af00      	add	r7, sp, #0
 8010696:	4603      	mov	r3, r0
 8010698:	80fb      	strh	r3, [r7, #6]
 801069a:	4aaa      	ldr	r2, [pc, #680]	; (8010944 <Save_Bmp+0x2b4>)
 801069c:	f107 0314 	add.w	r3, r7, #20
 80106a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80106a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80106a6:	2304      	movs	r3, #4
 80106a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80106aa:	2336      	movs	r3, #54	; 0x36
 80106ac:	867b      	strh	r3, [r7, #50]	; 0x32
 80106ae:	2300      	movs	r3, #0
 80106b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80106b2:	2300      	movs	r3, #0
 80106b4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80106b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80106ba:	627b      	str	r3, [r7, #36]	; 0x24
 80106bc:	4ba2      	ldr	r3, [pc, #648]	; (8010948 <Save_Bmp+0x2b8>)
 80106be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80106c2:	2b05      	cmp	r3, #5
 80106c4:	d105      	bne.n	80106d2 <Save_Bmp+0x42>
 80106c6:	f7fe f9c5 	bl	800ea54 <Close_Pop>
 80106ca:	49a0      	ldr	r1, [pc, #640]	; (801094c <Save_Bmp+0x2bc>)
 80106cc:	48a0      	ldr	r0, [pc, #640]	; (8010950 <Save_Bmp+0x2c0>)
 80106ce:	f7fd f9c1 	bl	800da54 <DrawWindow>
 80106d2:	f107 0214 	add.w	r2, r7, #20
 80106d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80106da:	4611      	mov	r1, r2
 80106dc:	4618      	mov	r0, r3
 80106de:	f7ff fb73 	bl	800fdc8 <Make_Filename>
 80106e2:	f107 0308 	add.w	r3, r7, #8
 80106e6:	f107 020c 	add.w	r2, r7, #12
 80106ea:	f107 0114 	add.w	r1, r7, #20
 80106ee:	4899      	ldr	r0, [pc, #612]	; (8010954 <Save_Bmp+0x2c4>)
 80106f0:	f7ff f8d0 	bl	800f894 <OpenFileWr>
 80106f4:	4603      	mov	r3, r0
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d002      	beq.n	8010700 <Save_Bmp+0x70>
 80106fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106fc:	b2db      	uxtb	r3, r3
 80106fe:	e11c      	b.n	801093a <Save_Bmp+0x2aa>
 8010700:	4b94      	ldr	r3, [pc, #592]	; (8010954 <Save_Bmp+0x2c4>)
 8010702:	4a95      	ldr	r2, [pc, #596]	; (8010958 <Save_Bmp+0x2c8>)
 8010704:	4614      	mov	r4, r2
 8010706:	469c      	mov	ip, r3
 8010708:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 801070c:	4665      	mov	r5, ip
 801070e:	4626      	mov	r6, r4
 8010710:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010712:	6028      	str	r0, [r5, #0]
 8010714:	6069      	str	r1, [r5, #4]
 8010716:	60aa      	str	r2, [r5, #8]
 8010718:	60eb      	str	r3, [r5, #12]
 801071a:	3410      	adds	r4, #16
 801071c:	f10c 0c10 	add.w	ip, ip, #16
 8010720:	4574      	cmp	r4, lr
 8010722:	d1f3      	bne.n	801070c <Save_Bmp+0x7c>
 8010724:	4663      	mov	r3, ip
 8010726:	4622      	mov	r2, r4
 8010728:	6810      	ldr	r0, [r2, #0]
 801072a:	6018      	str	r0, [r3, #0]
 801072c:	8892      	ldrh	r2, [r2, #4]
 801072e:	809a      	strh	r2, [r3, #4]
 8010730:	2336      	movs	r3, #54	; 0x36
 8010732:	867b      	strh	r3, [r7, #50]	; 0x32
 8010734:	2300      	movs	r3, #0
 8010736:	863b      	strh	r3, [r7, #48]	; 0x30
 8010738:	e042      	b.n	80107c0 <Save_Bmp+0x130>
 801073a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801073e:	4a87      	ldr	r2, [pc, #540]	; (801095c <Save_Bmp+0x2cc>)
 8010740:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010744:	121b      	asrs	r3, r3, #8
 8010746:	b2da      	uxtb	r2, r3
 8010748:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801074c:	0099      	lsls	r1, r3, #2
 801074e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8010752:	440b      	add	r3, r1
 8010754:	f022 0207 	bic.w	r2, r2, #7
 8010758:	b2d1      	uxtb	r1, r2
 801075a:	4a7e      	ldr	r2, [pc, #504]	; (8010954 <Save_Bmp+0x2c4>)
 801075c:	54d1      	strb	r1, [r2, r3]
 801075e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010762:	4a7e      	ldr	r2, [pc, #504]	; (801095c <Save_Bmp+0x2cc>)
 8010764:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010768:	10db      	asrs	r3, r3, #3
 801076a:	b2da      	uxtb	r2, r3
 801076c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010770:	0099      	lsls	r1, r3, #2
 8010772:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8010776:	440b      	add	r3, r1
 8010778:	3301      	adds	r3, #1
 801077a:	f022 0203 	bic.w	r2, r2, #3
 801077e:	b2d1      	uxtb	r1, r2
 8010780:	4a74      	ldr	r2, [pc, #464]	; (8010954 <Save_Bmp+0x2c4>)
 8010782:	54d1      	strb	r1, [r2, r3]
 8010784:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010788:	4a74      	ldr	r2, [pc, #464]	; (801095c <Save_Bmp+0x2cc>)
 801078a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801078e:	00d9      	lsls	r1, r3, #3
 8010790:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010794:	009a      	lsls	r2, r3, #2
 8010796:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801079a:	4413      	add	r3, r2
 801079c:	3302      	adds	r3, #2
 801079e:	b2c9      	uxtb	r1, r1
 80107a0:	4a6c      	ldr	r2, [pc, #432]	; (8010954 <Save_Bmp+0x2c4>)
 80107a2:	54d1      	strb	r1, [r2, r3]
 80107a4:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80107a8:	009a      	lsls	r2, r3, #2
 80107aa:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80107ae:	4413      	add	r3, r2
 80107b0:	3303      	adds	r3, #3
 80107b2:	4a68      	ldr	r2, [pc, #416]	; (8010954 <Save_Bmp+0x2c4>)
 80107b4:	2100      	movs	r1, #0
 80107b6:	54d1      	strb	r1, [r2, r3]
 80107b8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80107ba:	3301      	adds	r3, #1
 80107bc:	b29b      	uxth	r3, r3
 80107be:	863b      	strh	r3, [r7, #48]	; 0x30
 80107c0:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80107c4:	2b0f      	cmp	r3, #15
 80107c6:	ddb8      	ble.n	801073a <Save_Bmp+0xaa>
 80107c8:	2376      	movs	r3, #118	; 0x76
 80107ca:	867b      	strh	r3, [r7, #50]	; 0x32
 80107cc:	2300      	movs	r3, #0
 80107ce:	86bb      	strh	r3, [r7, #52]	; 0x34
 80107d0:	e079      	b.n	80108c6 <Save_Bmp+0x236>
 80107d2:	2300      	movs	r3, #0
 80107d4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80107d6:	e06b      	b.n	80108b0 <Save_Bmp+0x220>
 80107d8:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 80107dc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80107e0:	4611      	mov	r1, r2
 80107e2:	4618      	mov	r0, r3
 80107e4:	f001 fe62 	bl	80124ac <LCD_Set_Posi>
 80107e8:	f001 fed6 	bl	8012598 <LCD_Get_Pixel>
 80107ec:	4603      	mov	r3, r0
 80107ee:	847b      	strh	r3, [r7, #34]	; 0x22
 80107f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80107f2:	3301      	adds	r3, #1
 80107f4:	b29b      	uxth	r3, r3
 80107f6:	b21b      	sxth	r3, r3
 80107f8:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 80107fc:	4611      	mov	r1, r2
 80107fe:	4618      	mov	r0, r3
 8010800:	f001 fe54 	bl	80124ac <LCD_Set_Posi>
 8010804:	f001 fec8 	bl	8012598 <LCD_Get_Pixel>
 8010808:	4603      	mov	r3, r0
 801080a:	843b      	strh	r3, [r7, #32]
 801080c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010810:	4618      	mov	r0, r3
 8010812:	f7ff f8a1 	bl	800f958 <Color_Num>
 8010816:	4603      	mov	r3, r0
 8010818:	011b      	lsls	r3, r3, #4
 801081a:	b2dc      	uxtb	r4, r3
 801081c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010820:	4618      	mov	r0, r3
 8010822:	f7ff f899 	bl	800f958 <Color_Num>
 8010826:	4603      	mov	r3, r0
 8010828:	461a      	mov	r2, r3
 801082a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801082e:	4422      	add	r2, r4
 8010830:	b2d1      	uxtb	r1, r2
 8010832:	4a48      	ldr	r2, [pc, #288]	; (8010954 <Save_Bmp+0x2c4>)
 8010834:	54d1      	strb	r1, [r2, r3]
 8010836:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801083a:	b29b      	uxth	r3, r3
 801083c:	3301      	adds	r3, #1
 801083e:	b29b      	uxth	r3, r3
 8010840:	867b      	strh	r3, [r7, #50]	; 0x32
 8010842:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8010846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010848:	429a      	cmp	r2, r3
 801084a:	dc2d      	bgt.n	80108a8 <Save_Bmp+0x218>
 801084c:	2300      	movs	r3, #0
 801084e:	867b      	strh	r3, [r7, #50]	; 0x32
 8010850:	f107 030c 	add.w	r3, r7, #12
 8010854:	4619      	mov	r1, r3
 8010856:	483f      	ldr	r0, [pc, #252]	; (8010954 <Save_Bmp+0x2c4>)
 8010858:	f7fe ff44 	bl	800f6e4 <ProgFileSec>
 801085c:	4603      	mov	r3, r0
 801085e:	2b00      	cmp	r3, #0
 8010860:	d001      	beq.n	8010866 <Save_Bmp+0x1d6>
 8010862:	2303      	movs	r3, #3
 8010864:	e069      	b.n	801093a <Save_Bmp+0x2aa>
 8010866:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 801086a:	2b00      	cmp	r3, #0
 801086c:	d110      	bne.n	8010890 <Save_Bmp+0x200>
 801086e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8010872:	b29a      	uxth	r2, r3
 8010874:	3201      	adds	r2, #1
 8010876:	b292      	uxth	r2, r2
 8010878:	85fa      	strh	r2, [r7, #46]	; 0x2e
 801087a:	105b      	asrs	r3, r3, #1
 801087c:	b21b      	sxth	r3, r3
 801087e:	b2db      	uxtb	r3, r3
 8010880:	f003 0303 	and.w	r3, r3, #3
 8010884:	b2db      	uxtb	r3, r3
 8010886:	461a      	mov	r2, r3
 8010888:	2102      	movs	r1, #2
 801088a:	20a8      	movs	r0, #168	; 0xa8
 801088c:	f7ff f8e4 	bl	800fa58 <PrintClk>
 8010890:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8010894:	b29b      	uxth	r3, r3
 8010896:	3301      	adds	r3, #1
 8010898:	b29b      	uxth	r3, r3
 801089a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 801089c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80108a0:	2b01      	cmp	r3, #1
 80108a2:	dd01      	ble.n	80108a8 <Save_Bmp+0x218>
 80108a4:	2300      	movs	r3, #0
 80108a6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80108a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80108aa:	3302      	adds	r3, #2
 80108ac:	b29b      	uxth	r3, r3
 80108ae:	86fb      	strh	r3, [r7, #54]	; 0x36
 80108b0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80108b4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80108b8:	db8e      	blt.n	80107d8 <Save_Bmp+0x148>
 80108ba:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80108be:	b29b      	uxth	r3, r3
 80108c0:	3301      	adds	r3, #1
 80108c2:	b29b      	uxth	r3, r3
 80108c4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80108c6:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80108ca:	2bef      	cmp	r3, #239	; 0xef
 80108cc:	dd81      	ble.n	80107d2 <Save_Bmp+0x142>
 80108ce:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d00c      	beq.n	80108f0 <Save_Bmp+0x260>
 80108d6:	f107 030c 	add.w	r3, r7, #12
 80108da:	4619      	mov	r1, r3
 80108dc:	481d      	ldr	r0, [pc, #116]	; (8010954 <Save_Bmp+0x2c4>)
 80108de:	f7fe ff01 	bl	800f6e4 <ProgFileSec>
 80108e2:	4603      	mov	r3, r0
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d003      	beq.n	80108f0 <Save_Bmp+0x260>
 80108e8:	f7fe f8ca 	bl	800ea80 <List_Pop>
 80108ec:	2303      	movs	r3, #3
 80108ee:	e024      	b.n	801093a <Save_Bmp+0x2aa>
 80108f0:	f107 0308 	add.w	r3, r7, #8
 80108f4:	f107 020c 	add.w	r2, r7, #12
 80108f8:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 80108fc:	4815      	ldr	r0, [pc, #84]	; (8010954 <Save_Bmp+0x2c4>)
 80108fe:	f7fe ff65 	bl	800f7cc <CloseFile>
 8010902:	4603      	mov	r3, r0
 8010904:	2b00      	cmp	r3, #0
 8010906:	d001      	beq.n	801090c <Save_Bmp+0x27c>
 8010908:	2303      	movs	r3, #3
 801090a:	e016      	b.n	801093a <Save_Bmp+0x2aa>
 801090c:	4b0e      	ldr	r3, [pc, #56]	; (8010948 <Save_Bmp+0x2b8>)
 801090e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010912:	2b05      	cmp	r3, #5
 8010914:	d101      	bne.n	801091a <Save_Bmp+0x28a>
 8010916:	f7fe f8b3 	bl	800ea80 <List_Pop>
 801091a:	4b11      	ldr	r3, [pc, #68]	; (8010960 <Save_Bmp+0x2d0>)
 801091c:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 8010920:	2b62      	cmp	r3, #98	; 0x62
 8010922:	dc09      	bgt.n	8010938 <Save_Bmp+0x2a8>
 8010924:	4b0e      	ldr	r3, [pc, #56]	; (8010960 <Save_Bmp+0x2d0>)
 8010926:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 801092a:	b29b      	uxth	r3, r3
 801092c:	3301      	adds	r3, #1
 801092e:	b29b      	uxth	r3, r3
 8010930:	b21a      	sxth	r2, r3
 8010932:	4b0b      	ldr	r3, [pc, #44]	; (8010960 <Save_Bmp+0x2d0>)
 8010934:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 8010938:	2300      	movs	r3, #0
 801093a:	4618      	mov	r0, r3
 801093c:	373c      	adds	r7, #60	; 0x3c
 801093e:	46bd      	mov	sp, r7
 8010940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010942:	bf00      	nop
 8010944:	080001fc 	.word	0x080001fc
 8010948:	200007a6 	.word	0x200007a6
 801094c:	20000144 	.word	0x20000144
 8010950:	20000c10 	.word	0x20000c10
 8010954:	200017e0 	.word	0x200017e0
 8010958:	08001b84 	.word	0x08001b84
 801095c:	08001b64 	.word	0x08001b64
 8010960:	2000029c 	.word	0x2000029c

08010964 <Save_Csv>:
 8010964:	b580      	push	{r7, lr}
 8010966:	b094      	sub	sp, #80	; 0x50
 8010968:	af00      	add	r7, sp, #0
 801096a:	4603      	mov	r3, r0
 801096c:	80fb      	strh	r3, [r7, #6]
 801096e:	4baf      	ldr	r3, [pc, #700]	; (8010c2c <Save_Csv+0x2c8>)
 8010970:	681a      	ldr	r2, [r3, #0]
 8010972:	4baf      	ldr	r3, [pc, #700]	; (8010c30 <Save_Csv+0x2cc>)
 8010974:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010978:	4619      	mov	r1, r3
 801097a:	4bae      	ldr	r3, [pc, #696]	; (8010c34 <Save_Csv+0x2d0>)
 801097c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010980:	2b00      	cmp	r3, #0
 8010982:	bf14      	ite	ne
 8010984:	2301      	movne	r3, #1
 8010986:	2300      	moveq	r3, #0
 8010988:	b2db      	uxtb	r3, r3
 801098a:	440b      	add	r3, r1
 801098c:	005b      	lsls	r3, r3, #1
 801098e:	4413      	add	r3, r2
 8010990:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010994:	009b      	lsls	r3, r3, #2
 8010996:	4aa8      	ldr	r2, [pc, #672]	; (8010c38 <Save_Csv+0x2d4>)
 8010998:	f9b2 2000 	ldrsh.w	r2, [r2]
 801099c:	4611      	mov	r1, r2
 801099e:	4aa7      	ldr	r2, [pc, #668]	; (8010c3c <Save_Csv+0x2d8>)
 80109a0:	5c52      	ldrb	r2, [r2, r1]
 80109a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80109a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80109a8:	4aa5      	ldr	r2, [pc, #660]	; (8010c40 <Save_Csv+0x2dc>)
 80109aa:	f107 031c 	add.w	r3, r7, #28
 80109ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80109b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80109b4:	2300      	movs	r3, #0
 80109b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80109b8:	2300      	movs	r3, #0
 80109ba:	647b      	str	r3, [r7, #68]	; 0x44
 80109bc:	2304      	movs	r3, #4
 80109be:	637b      	str	r3, [r7, #52]	; 0x34
 80109c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80109c4:	633b      	str	r3, [r7, #48]	; 0x30
 80109c6:	f107 021c 	add.w	r2, r7, #28
 80109ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80109ce:	4611      	mov	r1, r2
 80109d0:	4618      	mov	r0, r3
 80109d2:	f7ff f9f9 	bl	800fdc8 <Make_Filename>
 80109d6:	f107 0310 	add.w	r3, r7, #16
 80109da:	f107 0214 	add.w	r2, r7, #20
 80109de:	f107 011c 	add.w	r1, r7, #28
 80109e2:	4898      	ldr	r0, [pc, #608]	; (8010c44 <Save_Csv+0x2e0>)
 80109e4:	f7fe ff56 	bl	800f894 <OpenFileWr>
 80109e8:	4603      	mov	r3, r0
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d002      	beq.n	80109f4 <Save_Csv+0x90>
 80109ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109f0:	b2db      	uxtb	r3, r3
 80109f2:	e1d3      	b.n	8010d9c <Save_Csv+0x438>
 80109f4:	4b94      	ldr	r3, [pc, #592]	; (8010c48 <Save_Csv+0x2e4>)
 80109f6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80109fa:	00db      	lsls	r3, r3, #3
 80109fc:	4a93      	ldr	r2, [pc, #588]	; (8010c4c <Save_Csv+0x2e8>)
 80109fe:	4413      	add	r3, r2
 8010a00:	2205      	movs	r2, #5
 8010a02:	4619      	mov	r1, r3
 8010a04:	488f      	ldr	r0, [pc, #572]	; (8010c44 <Save_Csv+0x2e0>)
 8010a06:	f012 fae7 	bl	8022fd8 <memcpy>
 8010a0a:	2203      	movs	r2, #3
 8010a0c:	4990      	ldr	r1, [pc, #576]	; (8010c50 <Save_Csv+0x2ec>)
 8010a0e:	4891      	ldr	r0, [pc, #580]	; (8010c54 <Save_Csv+0x2f0>)
 8010a10:	f012 fae2 	bl	8022fd8 <memcpy>
 8010a14:	4b90      	ldr	r3, [pc, #576]	; (8010c58 <Save_Csv+0x2f4>)
 8010a16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010a18:	2300      	movs	r3, #0
 8010a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010a1c:	4b8a      	ldr	r3, [pc, #552]	; (8010c48 <Save_Csv+0x2e4>)
 8010a1e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010a22:	461a      	mov	r2, r3
 8010a24:	4613      	mov	r3, r2
 8010a26:	005b      	lsls	r3, r3, #1
 8010a28:	4413      	add	r3, r2
 8010a2a:	005b      	lsls	r3, r3, #1
 8010a2c:	4a8b      	ldr	r2, [pc, #556]	; (8010c5c <Save_Csv+0x2f8>)
 8010a2e:	4413      	add	r3, r2
 8010a30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010a32:	e00a      	b.n	8010a4a <Save_Csv+0xe6>
 8010a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a36:	1c5a      	adds	r2, r3, #1
 8010a38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010a3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010a3c:	1c51      	adds	r1, r2, #1
 8010a3e:	64f9      	str	r1, [r7, #76]	; 0x4c
 8010a40:	4611      	mov	r1, r2
 8010a42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a44:	440a      	add	r2, r1
 8010a46:	781b      	ldrb	r3, [r3, #0]
 8010a48:	7013      	strb	r3, [r2, #0]
 8010a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a4c:	781b      	ldrb	r3, [r3, #0]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d1f0      	bne.n	8010a34 <Save_Csv+0xd0>
 8010a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a54:	1c5a      	adds	r2, r3, #1
 8010a56:	64fa      	str	r2, [r7, #76]	; 0x4c
 8010a58:	461a      	mov	r2, r3
 8010a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a5c:	4413      	add	r3, r2
 8010a5e:	222a      	movs	r2, #42	; 0x2a
 8010a60:	701a      	strb	r2, [r3, #0]
 8010a62:	4b79      	ldr	r3, [pc, #484]	; (8010c48 <Save_Csv+0x2e4>)
 8010a64:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8010a68:	461a      	mov	r2, r3
 8010a6a:	4613      	mov	r3, r2
 8010a6c:	005b      	lsls	r3, r3, #1
 8010a6e:	4413      	add	r3, r2
 8010a70:	005b      	lsls	r3, r3, #1
 8010a72:	4a7b      	ldr	r2, [pc, #492]	; (8010c60 <Save_Csv+0x2fc>)
 8010a74:	4413      	add	r3, r2
 8010a76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010a78:	e00a      	b.n	8010a90 <Save_Csv+0x12c>
 8010a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a7c:	1c5a      	adds	r2, r3, #1
 8010a7e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010a80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010a82:	1c51      	adds	r1, r2, #1
 8010a84:	64f9      	str	r1, [r7, #76]	; 0x4c
 8010a86:	4611      	mov	r1, r2
 8010a88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a8a:	440a      	add	r2, r1
 8010a8c:	781b      	ldrb	r3, [r3, #0]
 8010a8e:	7013      	strb	r3, [r2, #0]
 8010a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a92:	781b      	ldrb	r3, [r3, #0]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d1f0      	bne.n	8010a7a <Save_Csv+0x116>
 8010a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a9c:	4413      	add	r3, r2
 8010a9e:	222c      	movs	r2, #44	; 0x2c
 8010aa0:	701a      	strb	r2, [r3, #0]
 8010aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010aa4:	3301      	adds	r3, #1
 8010aa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010aa8:	4413      	add	r3, r2
 8010aaa:	2200      	movs	r2, #0
 8010aac:	701a      	strb	r2, [r3, #0]
 8010aae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ab0:	b29b      	uxth	r3, r3
 8010ab2:	3301      	adds	r3, #1
 8010ab4:	b29b      	uxth	r3, r3
 8010ab6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010aba:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8010abe:	3308      	adds	r3, #8
 8010ac0:	64bb      	str	r3, [r7, #72]	; 0x48
 8010ac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ac4:	4a5f      	ldr	r2, [pc, #380]	; (8010c44 <Save_Csv+0x2e0>)
 8010ac6:	4413      	add	r3, r2
 8010ac8:	2202      	movs	r2, #2
 8010aca:	4966      	ldr	r1, [pc, #408]	; (8010c64 <Save_Csv+0x300>)
 8010acc:	4618      	mov	r0, r3
 8010ace:	f012 fa83 	bl	8022fd8 <memcpy>
 8010ad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ad4:	3302      	adds	r3, #2
 8010ad6:	64bb      	str	r3, [r7, #72]	; 0x48
 8010ad8:	2300      	movs	r3, #0
 8010ada:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010adc:	e0fe      	b.n	8010cdc <Save_Csv+0x378>
 8010ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ae0:	3302      	adds	r3, #2
 8010ae2:	4a61      	ldr	r2, [pc, #388]	; (8010c68 <Save_Csv+0x304>)
 8010ae4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8010ae8:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8010aec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010aee:	fb02 f303 	mul.w	r3, r2, r3
 8010af2:	131b      	asrs	r3, r3, #12
 8010af4:	b29b      	uxth	r3, r3
 8010af6:	3364      	adds	r3, #100	; 0x64
 8010af8:	b29b      	uxth	r3, r3
 8010afa:	857b      	strh	r3, [r7, #42]	; 0x2a
 8010afc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	dd0a      	ble.n	8010b1a <Save_Csv+0x1b6>
 8010b04:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010b08:	2bc8      	cmp	r3, #200	; 0xc8
 8010b0a:	dd02      	ble.n	8010b12 <Save_Csv+0x1ae>
 8010b0c:	23c7      	movs	r3, #199	; 0xc7
 8010b0e:	723b      	strb	r3, [r7, #8]
 8010b10:	e005      	b.n	8010b1e <Save_Csv+0x1ba>
 8010b12:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010b14:	b2db      	uxtb	r3, r3
 8010b16:	723b      	strb	r3, [r7, #8]
 8010b18:	e001      	b.n	8010b1e <Save_Csv+0x1ba>
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	723b      	strb	r3, [r7, #8]
 8010b1e:	7a3a      	ldrb	r2, [r7, #8]
 8010b20:	f107 030c 	add.w	r3, r7, #12
 8010b24:	4611      	mov	r1, r2
 8010b26:	4618      	mov	r0, r3
 8010b28:	f001 f898 	bl	8011c5c <u8ToDec3>
 8010b2c:	2300      	movs	r3, #0
 8010b2e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010b32:	e03a      	b.n	8010baa <Save_Csv+0x246>
 8010b34:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8010b38:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8010b3c:	4413      	add	r3, r2
 8010b3e:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d036      	beq.n	8010bb4 <Save_Csv+0x250>
 8010b46:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8010b4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b4c:	1c59      	adds	r1, r3, #1
 8010b4e:	64b9      	str	r1, [r7, #72]	; 0x48
 8010b50:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8010b54:	440a      	add	r2, r1
 8010b56:	f812 1c44 	ldrb.w	r1, [r2, #-68]
 8010b5a:	4a3a      	ldr	r2, [pc, #232]	; (8010c44 <Save_Csv+0x2e0>)
 8010b5c:	54d1      	strb	r1, [r2, r3]
 8010b5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b62:	429a      	cmp	r2, r3
 8010b64:	db1a      	blt.n	8010b9c <Save_Csv+0x238>
 8010b66:	f107 0314 	add.w	r3, r7, #20
 8010b6a:	4619      	mov	r1, r3
 8010b6c:	4835      	ldr	r0, [pc, #212]	; (8010c44 <Save_Csv+0x2e0>)
 8010b6e:	f7fe fdb9 	bl	800f6e4 <ProgFileSec>
 8010b72:	4603      	mov	r3, r0
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d001      	beq.n	8010b7c <Save_Csv+0x218>
 8010b78:	2303      	movs	r3, #3
 8010b7a:	e10f      	b.n	8010d9c <Save_Csv+0x438>
 8010b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b7e:	1c5a      	adds	r2, r3, #1
 8010b80:	647a      	str	r2, [r7, #68]	; 0x44
 8010b82:	105b      	asrs	r3, r3, #1
 8010b84:	b2db      	uxtb	r3, r3
 8010b86:	f003 0303 	and.w	r3, r3, #3
 8010b8a:	b2db      	uxtb	r3, r3
 8010b8c:	461a      	mov	r2, r3
 8010b8e:	2102      	movs	r1, #2
 8010b90:	f44f 7084 	mov.w	r0, #264	; 0x108
 8010b94:	f7fe ff60 	bl	800fa58 <PrintClk>
 8010b98:	2300      	movs	r3, #0
 8010b9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8010b9c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8010ba0:	b29b      	uxth	r3, r3
 8010ba2:	3301      	adds	r3, #1
 8010ba4:	b29b      	uxth	r3, r3
 8010ba6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010baa:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8010bae:	2b02      	cmp	r3, #2
 8010bb0:	ddc0      	ble.n	8010b34 <Save_Csv+0x1d0>
 8010bb2:	e000      	b.n	8010bb6 <Save_Csv+0x252>
 8010bb4:	bf00      	nop
 8010bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010bb8:	1c5a      	adds	r2, r3, #1
 8010bba:	64ba      	str	r2, [r7, #72]	; 0x48
 8010bbc:	4a21      	ldr	r2, [pc, #132]	; (8010c44 <Save_Csv+0x2e0>)
 8010bbe:	212c      	movs	r1, #44	; 0x2c
 8010bc0:	54d1      	strb	r1, [r2, r3]
 8010bc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bc6:	429a      	cmp	r2, r3
 8010bc8:	db1a      	blt.n	8010c00 <Save_Csv+0x29c>
 8010bca:	f107 0314 	add.w	r3, r7, #20
 8010bce:	4619      	mov	r1, r3
 8010bd0:	481c      	ldr	r0, [pc, #112]	; (8010c44 <Save_Csv+0x2e0>)
 8010bd2:	f7fe fd87 	bl	800f6e4 <ProgFileSec>
 8010bd6:	4603      	mov	r3, r0
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d001      	beq.n	8010be0 <Save_Csv+0x27c>
 8010bdc:	2303      	movs	r3, #3
 8010bde:	e0dd      	b.n	8010d9c <Save_Csv+0x438>
 8010be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010be2:	1c5a      	adds	r2, r3, #1
 8010be4:	647a      	str	r2, [r7, #68]	; 0x44
 8010be6:	105b      	asrs	r3, r3, #1
 8010be8:	b2db      	uxtb	r3, r3
 8010bea:	f003 0303 	and.w	r3, r3, #3
 8010bee:	b2db      	uxtb	r3, r3
 8010bf0:	461a      	mov	r2, r3
 8010bf2:	2102      	movs	r1, #2
 8010bf4:	f44f 7084 	mov.w	r0, #264	; 0x108
 8010bf8:	f7fe ff2e 	bl	800fa58 <PrintClk>
 8010bfc:	2300      	movs	r3, #0
 8010bfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8010c00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c02:	1c5a      	adds	r2, r3, #1
 8010c04:	64ba      	str	r2, [r7, #72]	; 0x48
 8010c06:	4a0f      	ldr	r2, [pc, #60]	; (8010c44 <Save_Csv+0x2e0>)
 8010c08:	210d      	movs	r1, #13
 8010c0a:	54d1      	strb	r1, [r2, r3]
 8010c0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c10:	429a      	cmp	r2, r3
 8010c12:	db3b      	blt.n	8010c8c <Save_Csv+0x328>
 8010c14:	f107 0314 	add.w	r3, r7, #20
 8010c18:	4619      	mov	r1, r3
 8010c1a:	480a      	ldr	r0, [pc, #40]	; (8010c44 <Save_Csv+0x2e0>)
 8010c1c:	f7fe fd62 	bl	800f6e4 <ProgFileSec>
 8010c20:	4603      	mov	r3, r0
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d022      	beq.n	8010c6c <Save_Csv+0x308>
 8010c26:	2303      	movs	r3, #3
 8010c28:	e0b8      	b.n	8010d9c <Save_Csv+0x438>
 8010c2a:	bf00      	nop
 8010c2c:	20000580 	.word	0x20000580
 8010c30:	2000688e 	.word	0x2000688e
 8010c34:	2000286a 	.word	0x2000286a
 8010c38:	20002852 	.word	0x20002852
 8010c3c:	20000564 	.word	0x20000564
 8010c40:	08000220 	.word	0x08000220
 8010c44:	200017e0 	.word	0x200017e0
 8010c48:	2000029c 	.word	0x2000029c
 8010c4c:	200001d4 	.word	0x200001d4
 8010c50:	08000244 	.word	0x08000244
 8010c54:	200017e5 	.word	0x200017e5
 8010c58:	200017e8 	.word	0x200017e8
 8010c5c:	08001da8 	.word	0x08001da8
 8010c60:	08001cd4 	.word	0x08001cd4
 8010c64:	08000248 	.word	0x08000248
 8010c68:	20002878 	.word	0x20002878
 8010c6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c6e:	1c5a      	adds	r2, r3, #1
 8010c70:	647a      	str	r2, [r7, #68]	; 0x44
 8010c72:	105b      	asrs	r3, r3, #1
 8010c74:	b2db      	uxtb	r3, r3
 8010c76:	f003 0303 	and.w	r3, r3, #3
 8010c7a:	b2db      	uxtb	r3, r3
 8010c7c:	461a      	mov	r2, r3
 8010c7e:	2102      	movs	r1, #2
 8010c80:	f44f 7084 	mov.w	r0, #264	; 0x108
 8010c84:	f7fe fee8 	bl	800fa58 <PrintClk>
 8010c88:	2300      	movs	r3, #0
 8010c8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8010c8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c8e:	1c5a      	adds	r2, r3, #1
 8010c90:	64ba      	str	r2, [r7, #72]	; 0x48
 8010c92:	4a44      	ldr	r2, [pc, #272]	; (8010da4 <Save_Csv+0x440>)
 8010c94:	210a      	movs	r1, #10
 8010c96:	54d1      	strb	r1, [r2, r3]
 8010c98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c9c:	429a      	cmp	r2, r3
 8010c9e:	db1a      	blt.n	8010cd6 <Save_Csv+0x372>
 8010ca0:	f107 0314 	add.w	r3, r7, #20
 8010ca4:	4619      	mov	r1, r3
 8010ca6:	483f      	ldr	r0, [pc, #252]	; (8010da4 <Save_Csv+0x440>)
 8010ca8:	f7fe fd1c 	bl	800f6e4 <ProgFileSec>
 8010cac:	4603      	mov	r3, r0
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d001      	beq.n	8010cb6 <Save_Csv+0x352>
 8010cb2:	2303      	movs	r3, #3
 8010cb4:	e072      	b.n	8010d9c <Save_Csv+0x438>
 8010cb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010cb8:	1c5a      	adds	r2, r3, #1
 8010cba:	647a      	str	r2, [r7, #68]	; 0x44
 8010cbc:	105b      	asrs	r3, r3, #1
 8010cbe:	b2db      	uxtb	r3, r3
 8010cc0:	f003 0303 	and.w	r3, r3, #3
 8010cc4:	b2db      	uxtb	r3, r3
 8010cc6:	461a      	mov	r2, r3
 8010cc8:	2102      	movs	r1, #2
 8010cca:	f44f 7084 	mov.w	r0, #264	; 0x108
 8010cce:	f7fe fec3 	bl	800fa58 <PrintClk>
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8010cd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cd8:	3301      	adds	r3, #1
 8010cda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010cdc:	4b32      	ldr	r3, [pc, #200]	; (8010da8 <Save_Csv+0x444>)
 8010cde:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010ce2:	461a      	mov	r2, r3
 8010ce4:	4b31      	ldr	r3, [pc, #196]	; (8010dac <Save_Csv+0x448>)
 8010ce6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010cea:	461a      	mov	r2, r3
 8010cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cee:	4293      	cmp	r3, r2
 8010cf0:	f6ff aef5 	blt.w	8010ade <Save_Csv+0x17a>
 8010cf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d030      	beq.n	8010d5c <Save_Csv+0x3f8>
 8010cfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010cfc:	1c5a      	adds	r2, r3, #1
 8010cfe:	64ba      	str	r2, [r7, #72]	; 0x48
 8010d00:	4a28      	ldr	r2, [pc, #160]	; (8010da4 <Save_Csv+0x440>)
 8010d02:	210d      	movs	r1, #13
 8010d04:	54d1      	strb	r1, [r2, r3]
 8010d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d08:	1c5a      	adds	r2, r3, #1
 8010d0a:	64ba      	str	r2, [r7, #72]	; 0x48
 8010d0c:	4a25      	ldr	r2, [pc, #148]	; (8010da4 <Save_Csv+0x440>)
 8010d0e:	210a      	movs	r1, #10
 8010d10:	54d1      	strb	r1, [r2, r3]
 8010d12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d14:	4a23      	ldr	r2, [pc, #140]	; (8010da4 <Save_Csv+0x440>)
 8010d16:	1898      	adds	r0, r3, r2
 8010d18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d1a:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8010d1e:	461a      	mov	r2, r3
 8010d20:	2120      	movs	r1, #32
 8010d22:	f012 f967 	bl	8022ff4 <memset>
 8010d26:	2300      	movs	r3, #0
 8010d28:	64bb      	str	r3, [r7, #72]	; 0x48
 8010d2a:	f107 0314 	add.w	r3, r7, #20
 8010d2e:	4619      	mov	r1, r3
 8010d30:	481c      	ldr	r0, [pc, #112]	; (8010da4 <Save_Csv+0x440>)
 8010d32:	f7fe fcd7 	bl	800f6e4 <ProgFileSec>
 8010d36:	4603      	mov	r3, r0
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d001      	beq.n	8010d40 <Save_Csv+0x3dc>
 8010d3c:	2303      	movs	r3, #3
 8010d3e:	e02d      	b.n	8010d9c <Save_Csv+0x438>
 8010d40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d42:	1c5a      	adds	r2, r3, #1
 8010d44:	647a      	str	r2, [r7, #68]	; 0x44
 8010d46:	105b      	asrs	r3, r3, #1
 8010d48:	b2db      	uxtb	r3, r3
 8010d4a:	f003 0303 	and.w	r3, r3, #3
 8010d4e:	b2db      	uxtb	r3, r3
 8010d50:	461a      	mov	r2, r3
 8010d52:	2102      	movs	r1, #2
 8010d54:	f44f 7084 	mov.w	r0, #264	; 0x108
 8010d58:	f7fe fe7e 	bl	800fa58 <PrintClk>
 8010d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d60:	fb02 f103 	mul.w	r1, r2, r3
 8010d64:	f107 0310 	add.w	r3, r7, #16
 8010d68:	f107 0214 	add.w	r2, r7, #20
 8010d6c:	480d      	ldr	r0, [pc, #52]	; (8010da4 <Save_Csv+0x440>)
 8010d6e:	f7fe fd2d 	bl	800f7cc <CloseFile>
 8010d72:	4603      	mov	r3, r0
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d001      	beq.n	8010d7c <Save_Csv+0x418>
 8010d78:	2304      	movs	r3, #4
 8010d7a:	e00f      	b.n	8010d9c <Save_Csv+0x438>
 8010d7c:	4b0a      	ldr	r3, [pc, #40]	; (8010da8 <Save_Csv+0x444>)
 8010d7e:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
 8010d82:	2b62      	cmp	r3, #98	; 0x62
 8010d84:	dc09      	bgt.n	8010d9a <Save_Csv+0x436>
 8010d86:	4b08      	ldr	r3, [pc, #32]	; (8010da8 <Save_Csv+0x444>)
 8010d88:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
 8010d8c:	b29b      	uxth	r3, r3
 8010d8e:	3301      	adds	r3, #1
 8010d90:	b29b      	uxth	r3, r3
 8010d92:	b21a      	sxth	r2, r3
 8010d94:	4b04      	ldr	r3, [pc, #16]	; (8010da8 <Save_Csv+0x444>)
 8010d96:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	3750      	adds	r7, #80	; 0x50
 8010da0:	46bd      	mov	sp, r7
 8010da2:	bd80      	pop	{r7, pc}
 8010da4:	200017e0 	.word	0x200017e0
 8010da8:	2000029c 	.word	0x2000029c
 8010dac:	08002270 	.word	0x08002270

08010db0 <Save_Svg>:
 8010db0:	b580      	push	{r7, lr}
 8010db2:	b092      	sub	sp, #72	; 0x48
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	4603      	mov	r3, r0
 8010db8:	80fb      	strh	r3, [r7, #6]
 8010dba:	4abb      	ldr	r2, [pc, #748]	; (80110a8 <Save_Svg+0x2f8>)
 8010dbc:	f107 031c 	add.w	r3, r7, #28
 8010dc0:	ca07      	ldmia	r2, {r0, r1, r2}
 8010dc2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010dc6:	2304      	movs	r3, #4
 8010dc8:	63bb      	str	r3, [r7, #56]	; 0x38
 8010dca:	2300      	movs	r3, #0
 8010dcc:	637b      	str	r3, [r7, #52]	; 0x34
 8010dce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010dd2:	867b      	strh	r3, [r7, #50]	; 0x32
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	863b      	strh	r3, [r7, #48]	; 0x30
 8010dd8:	4bb4      	ldr	r3, [pc, #720]	; (80110ac <Save_Svg+0x2fc>)
 8010dda:	681a      	ldr	r2, [r3, #0]
 8010ddc:	4bb4      	ldr	r3, [pc, #720]	; (80110b0 <Save_Svg+0x300>)
 8010dde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010de2:	4619      	mov	r1, r3
 8010de4:	4bb3      	ldr	r3, [pc, #716]	; (80110b4 <Save_Svg+0x304>)
 8010de6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	bf14      	ite	ne
 8010dee:	2301      	movne	r3, #1
 8010df0:	2300      	moveq	r3, #0
 8010df2:	b2db      	uxtb	r3, r3
 8010df4:	440b      	add	r3, r1
 8010df6:	005b      	lsls	r3, r3, #1
 8010df8:	4413      	add	r3, r2
 8010dfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010dfe:	009b      	lsls	r3, r3, #2
 8010e00:	4aad      	ldr	r2, [pc, #692]	; (80110b8 <Save_Svg+0x308>)
 8010e02:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010e06:	4611      	mov	r1, r2
 8010e08:	4aac      	ldr	r2, [pc, #688]	; (80110bc <Save_Svg+0x30c>)
 8010e0a:	5c52      	ldrb	r2, [r2, r1]
 8010e0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010e10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010e12:	4bab      	ldr	r3, [pc, #684]	; (80110c0 <Save_Svg+0x310>)
 8010e14:	2200      	movs	r2, #0
 8010e16:	601a      	str	r2, [r3, #0]
 8010e18:	4baa      	ldr	r3, [pc, #680]	; (80110c4 <Save_Svg+0x314>)
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	801a      	strh	r2, [r3, #0]
 8010e1e:	4baa      	ldr	r3, [pc, #680]	; (80110c8 <Save_Svg+0x318>)
 8010e20:	2200      	movs	r2, #0
 8010e22:	801a      	strh	r2, [r3, #0]
 8010e24:	4ba9      	ldr	r3, [pc, #676]	; (80110cc <Save_Svg+0x31c>)
 8010e26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e28:	f44f 729b 	mov.w	r2, #310	; 0x136
 8010e2c:	2100      	movs	r1, #0
 8010e2e:	48a7      	ldr	r0, [pc, #668]	; (80110cc <Save_Svg+0x31c>)
 8010e30:	f012 f8e0 	bl	8022ff4 <memset>
 8010e34:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8010e38:	461a      	mov	r2, r3
 8010e3a:	2100      	movs	r1, #0
 8010e3c:	48a4      	ldr	r0, [pc, #656]	; (80110d0 <Save_Svg+0x320>)
 8010e3e:	f012 f8d9 	bl	8022ff4 <memset>
 8010e42:	f107 021c 	add.w	r2, r7, #28
 8010e46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010e4a:	4611      	mov	r1, r2
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	f7fe ffbb 	bl	800fdc8 <Make_Filename>
 8010e52:	f107 0310 	add.w	r3, r7, #16
 8010e56:	f107 0214 	add.w	r2, r7, #20
 8010e5a:	f107 011c 	add.w	r1, r7, #28
 8010e5e:	489c      	ldr	r0, [pc, #624]	; (80110d0 <Save_Svg+0x320>)
 8010e60:	f7fe fd18 	bl	800f894 <OpenFileWr>
 8010e64:	4603      	mov	r3, r0
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d002      	beq.n	8010e70 <Save_Svg+0xc0>
 8010e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e6c:	b2db      	uxtb	r3, r3
 8010e6e:	e3d5      	b.n	801161c <Save_Svg+0x86c>
 8010e70:	4b98      	ldr	r3, [pc, #608]	; (80110d4 <Save_Svg+0x324>)
 8010e72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e74:	f107 0314 	add.w	r3, r7, #20
 8010e78:	4619      	mov	r1, r3
 8010e7a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010e7c:	f7fe ff0a 	bl	800fc94 <WriteStr>
 8010e80:	4b95      	ldr	r3, [pc, #596]	; (80110d8 <Save_Svg+0x328>)
 8010e82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e84:	f107 0314 	add.w	r3, r7, #20
 8010e88:	4619      	mov	r1, r3
 8010e8a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010e8c:	f7fe ff02 	bl	800fc94 <WriteStr>
 8010e90:	4b92      	ldr	r3, [pc, #584]	; (80110dc <Save_Svg+0x32c>)
 8010e92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e94:	f107 0314 	add.w	r3, r7, #20
 8010e98:	4619      	mov	r1, r3
 8010e9a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010e9c:	f7fe fefa 	bl	800fc94 <WriteStr>
 8010ea0:	4b8f      	ldr	r3, [pc, #572]	; (80110e0 <Save_Svg+0x330>)
 8010ea2:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010ea6:	461a      	mov	r2, r3
 8010ea8:	4b8e      	ldr	r3, [pc, #568]	; (80110e4 <Save_Svg+0x334>)
 8010eaa:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010eae:	f107 0214 	add.w	r2, r7, #20
 8010eb2:	4611      	mov	r1, r2
 8010eb4:	4618      	mov	r0, r3
 8010eb6:	f7fe fe45 	bl	800fb44 <WriteVar>
 8010eba:	4b8b      	ldr	r3, [pc, #556]	; (80110e8 <Save_Svg+0x338>)
 8010ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ebe:	f107 0314 	add.w	r3, r7, #20
 8010ec2:	4619      	mov	r1, r3
 8010ec4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010ec6:	f7fe fee5 	bl	800fc94 <WriteStr>
 8010eca:	4b88      	ldr	r3, [pc, #544]	; (80110ec <Save_Svg+0x33c>)
 8010ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ece:	f107 0314 	add.w	r3, r7, #20
 8010ed2:	4619      	mov	r1, r3
 8010ed4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010ed6:	f7fe fedd 	bl	800fc94 <WriteStr>
 8010eda:	4b81      	ldr	r3, [pc, #516]	; (80110e0 <Save_Svg+0x330>)
 8010edc:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010ee0:	461a      	mov	r2, r3
 8010ee2:	4b80      	ldr	r3, [pc, #512]	; (80110e4 <Save_Svg+0x334>)
 8010ee4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010ee8:	f107 0214 	add.w	r2, r7, #20
 8010eec:	4611      	mov	r1, r2
 8010eee:	4618      	mov	r0, r3
 8010ef0:	f7fe fe28 	bl	800fb44 <WriteVar>
 8010ef4:	4b7e      	ldr	r3, [pc, #504]	; (80110f0 <Save_Svg+0x340>)
 8010ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ef8:	f107 0314 	add.w	r3, r7, #20
 8010efc:	4619      	mov	r1, r3
 8010efe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f00:	f7fe fec8 	bl	800fc94 <WriteStr>
 8010f04:	4b7b      	ldr	r3, [pc, #492]	; (80110f4 <Save_Svg+0x344>)
 8010f06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f08:	f107 0314 	add.w	r3, r7, #20
 8010f0c:	4619      	mov	r1, r3
 8010f0e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f10:	f7fe fec0 	bl	800fc94 <WriteStr>
 8010f14:	4b72      	ldr	r3, [pc, #456]	; (80110e0 <Save_Svg+0x330>)
 8010f16:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8010f1a:	f107 0214 	add.w	r2, r7, #20
 8010f1e:	4611      	mov	r1, r2
 8010f20:	4618      	mov	r0, r3
 8010f22:	f7fe fe0f 	bl	800fb44 <WriteVar>
 8010f26:	4b74      	ldr	r3, [pc, #464]	; (80110f8 <Save_Svg+0x348>)
 8010f28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f2a:	f107 0314 	add.w	r3, r7, #20
 8010f2e:	4619      	mov	r1, r3
 8010f30:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f32:	f7fe feaf 	bl	800fc94 <WriteStr>
 8010f36:	4b6a      	ldr	r3, [pc, #424]	; (80110e0 <Save_Svg+0x330>)
 8010f38:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8010f3c:	f107 0214 	add.w	r2, r7, #20
 8010f40:	4611      	mov	r1, r2
 8010f42:	4618      	mov	r0, r3
 8010f44:	f7fe fdfe 	bl	800fb44 <WriteVar>
 8010f48:	4b6c      	ldr	r3, [pc, #432]	; (80110fc <Save_Svg+0x34c>)
 8010f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f4c:	f107 0314 	add.w	r3, r7, #20
 8010f50:	4619      	mov	r1, r3
 8010f52:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f54:	f7fe fe9e 	bl	800fc94 <WriteStr>
 8010f58:	4b61      	ldr	r3, [pc, #388]	; (80110e0 <Save_Svg+0x330>)
 8010f5a:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8010f5e:	b29b      	uxth	r3, r3
 8010f60:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8010f64:	b29b      	uxth	r3, r3
 8010f66:	b21b      	sxth	r3, r3
 8010f68:	f107 0214 	add.w	r2, r7, #20
 8010f6c:	4611      	mov	r1, r2
 8010f6e:	4618      	mov	r0, r3
 8010f70:	f7fe fde8 	bl	800fb44 <WriteVar>
 8010f74:	4b62      	ldr	r3, [pc, #392]	; (8011100 <Save_Svg+0x350>)
 8010f76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f78:	f107 0314 	add.w	r3, r7, #20
 8010f7c:	4619      	mov	r1, r3
 8010f7e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f80:	f7fe fe88 	bl	800fc94 <WriteStr>
 8010f84:	2300      	movs	r3, #0
 8010f86:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010f8a:	e032      	b.n	8010ff2 <Save_Svg+0x242>
 8010f8c:	4b5d      	ldr	r3, [pc, #372]	; (8011104 <Save_Svg+0x354>)
 8010f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f90:	f107 0314 	add.w	r3, r7, #20
 8010f94:	4619      	mov	r1, r3
 8010f96:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f98:	f7fe fe7c 	bl	800fc94 <WriteStr>
 8010f9c:	f107 0214 	add.w	r2, r7, #20
 8010fa0:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8010fa4:	4611      	mov	r1, r2
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	f7fe fdcc 	bl	800fb44 <WriteVar>
 8010fac:	4b56      	ldr	r3, [pc, #344]	; (8011108 <Save_Svg+0x358>)
 8010fae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010fb0:	f107 0314 	add.w	r3, r7, #20
 8010fb4:	4619      	mov	r1, r3
 8010fb6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010fb8:	f7fe fe6c 	bl	800fc94 <WriteStr>
 8010fbc:	4b48      	ldr	r3, [pc, #288]	; (80110e0 <Save_Svg+0x330>)
 8010fbe:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010fc2:	461a      	mov	r2, r3
 8010fc4:	4b47      	ldr	r3, [pc, #284]	; (80110e4 <Save_Svg+0x334>)
 8010fc6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010fca:	f107 0214 	add.w	r2, r7, #20
 8010fce:	4611      	mov	r1, r2
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	f7fe fdb7 	bl	800fb44 <WriteVar>
 8010fd6:	4b4d      	ldr	r3, [pc, #308]	; (801110c <Save_Svg+0x35c>)
 8010fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010fda:	f107 0314 	add.w	r3, r7, #20
 8010fde:	4619      	mov	r1, r3
 8010fe0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010fe2:	f7fe fe57 	bl	800fc94 <WriteStr>
 8010fe6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010fea:	3319      	adds	r3, #25
 8010fec:	b29b      	uxth	r3, r3
 8010fee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010ff2:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8010ff6:	2bc8      	cmp	r3, #200	; 0xc8
 8010ff8:	ddc8      	ble.n	8010f8c <Save_Svg+0x1dc>
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8011000:	e01d      	b.n	801103e <Save_Svg+0x28e>
 8011002:	4b43      	ldr	r3, [pc, #268]	; (8011110 <Save_Svg+0x360>)
 8011004:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011006:	f107 0314 	add.w	r3, r7, #20
 801100a:	4619      	mov	r1, r3
 801100c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801100e:	f7fe fe41 	bl	800fc94 <WriteStr>
 8011012:	f107 0214 	add.w	r2, r7, #20
 8011016:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 801101a:	4611      	mov	r1, r2
 801101c:	4618      	mov	r0, r3
 801101e:	f7fe fd91 	bl	800fb44 <WriteVar>
 8011022:	4b3c      	ldr	r3, [pc, #240]	; (8011114 <Save_Svg+0x364>)
 8011024:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011026:	f107 0314 	add.w	r3, r7, #20
 801102a:	4619      	mov	r1, r3
 801102c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801102e:	f7fe fe31 	bl	800fc94 <WriteStr>
 8011032:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011036:	3319      	adds	r3, #25
 8011038:	b29b      	uxth	r3, r3
 801103a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 801103e:	4b28      	ldr	r3, [pc, #160]	; (80110e0 <Save_Svg+0x330>)
 8011040:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8011044:	461a      	mov	r2, r3
 8011046:	4b27      	ldr	r3, [pc, #156]	; (80110e4 <Save_Svg+0x334>)
 8011048:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801104c:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8011050:	429a      	cmp	r2, r3
 8011052:	ddd6      	ble.n	8011002 <Save_Svg+0x252>
 8011054:	4b30      	ldr	r3, [pc, #192]	; (8011118 <Save_Svg+0x368>)
 8011056:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011058:	f107 0314 	add.w	r3, r7, #20
 801105c:	4619      	mov	r1, r3
 801105e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011060:	f7fe fe18 	bl	800fc94 <WriteStr>
 8011064:	2300      	movs	r3, #0
 8011066:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 801106a:	e091      	b.n	8011190 <Save_Svg+0x3e0>
 801106c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8011070:	3302      	adds	r3, #2
 8011072:	4a2a      	ldr	r2, [pc, #168]	; (801111c <Save_Svg+0x36c>)
 8011074:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8011078:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801107c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801107e:	fb02 f303 	mul.w	r3, r2, r3
 8011082:	131b      	asrs	r3, r3, #12
 8011084:	b29b      	uxth	r3, r3
 8011086:	3364      	adds	r3, #100	; 0x64
 8011088:	b29b      	uxth	r3, r3
 801108a:	857b      	strh	r3, [r7, #42]	; 0x2a
 801108c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8011090:	2b00      	cmp	r3, #0
 8011092:	dd45      	ble.n	8011120 <Save_Svg+0x370>
 8011094:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8011098:	2bc8      	cmp	r3, #200	; 0xc8
 801109a:	dd02      	ble.n	80110a2 <Save_Svg+0x2f2>
 801109c:	23c7      	movs	r3, #199	; 0xc7
 801109e:	813b      	strh	r3, [r7, #8]
 80110a0:	e040      	b.n	8011124 <Save_Svg+0x374>
 80110a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80110a4:	813b      	strh	r3, [r7, #8]
 80110a6:	e03d      	b.n	8011124 <Save_Svg+0x374>
 80110a8:	0800022c 	.word	0x0800022c
 80110ac:	20000580 	.word	0x20000580
 80110b0:	2000688e 	.word	0x2000688e
 80110b4:	2000286a 	.word	0x2000286a
 80110b8:	20002852 	.word	0x20002852
 80110bc:	20000564 	.word	0x20000564
 80110c0:	2000079c 	.word	0x2000079c
 80110c4:	20000798 	.word	0x20000798
 80110c8:	2000079a 	.word	0x2000079a
 80110cc:	2000000c 	.word	0x2000000c
 80110d0:	200017e0 	.word	0x200017e0
 80110d4:	0800024c 	.word	0x0800024c
 80110d8:	0800027c 	.word	0x0800027c
 80110dc:	080002e8 	.word	0x080002e8
 80110e0:	2000029c 	.word	0x2000029c
 80110e4:	08002270 	.word	0x08002270
 80110e8:	080002f8 	.word	0x080002f8
 80110ec:	08000384 	.word	0x08000384
 80110f0:	080003b0 	.word	0x080003b0
 80110f4:	080003c0 	.word	0x080003c0
 80110f8:	080003e8 	.word	0x080003e8
 80110fc:	080003f0 	.word	0x080003f0
 8011100:	080003f8 	.word	0x080003f8
 8011104:	08000404 	.word	0x08000404
 8011108:	08000424 	.word	0x08000424
 801110c:	08000428 	.word	0x08000428
 8011110:	08000430 	.word	0x08000430
 8011114:	0800044c 	.word	0x0800044c
 8011118:	08000458 	.word	0x08000458
 801111c:	20002878 	.word	0x20002878
 8011120:	2300      	movs	r3, #0
 8011122:	813b      	strh	r3, [r7, #8]
 8011124:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011128:	b29b      	uxth	r3, r3
 801112a:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 801112e:	b29b      	uxth	r3, r3
 8011130:	b21b      	sxth	r3, r3
 8011132:	813b      	strh	r3, [r7, #8]
 8011134:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8011138:	2b00      	cmp	r3, #0
 801113a:	d102      	bne.n	8011142 <Save_Svg+0x392>
 801113c:	4b3b      	ldr	r3, [pc, #236]	; (801122c <Save_Svg+0x47c>)
 801113e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011140:	e001      	b.n	8011146 <Save_Svg+0x396>
 8011142:	4b3b      	ldr	r3, [pc, #236]	; (8011230 <Save_Svg+0x480>)
 8011144:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011146:	f107 0314 	add.w	r3, r7, #20
 801114a:	4619      	mov	r1, r3
 801114c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801114e:	f7fe fda1 	bl	800fc94 <WriteStr>
 8011152:	f107 0214 	add.w	r2, r7, #20
 8011156:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 801115a:	4611      	mov	r1, r2
 801115c:	4618      	mov	r0, r3
 801115e:	f7fe fcf1 	bl	800fb44 <WriteVar>
 8011162:	4b34      	ldr	r3, [pc, #208]	; (8011234 <Save_Svg+0x484>)
 8011164:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011166:	f107 0314 	add.w	r3, r7, #20
 801116a:	4619      	mov	r1, r3
 801116c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801116e:	f7fe fd91 	bl	800fc94 <WriteStr>
 8011172:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011176:	f107 0214 	add.w	r2, r7, #20
 801117a:	4611      	mov	r1, r2
 801117c:	4618      	mov	r0, r3
 801117e:	f7fe fce1 	bl	800fb44 <WriteVar>
 8011182:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8011186:	b29b      	uxth	r3, r3
 8011188:	3301      	adds	r3, #1
 801118a:	b29b      	uxth	r3, r3
 801118c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8011190:	4b29      	ldr	r3, [pc, #164]	; (8011238 <Save_Svg+0x488>)
 8011192:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8011196:	461a      	mov	r2, r3
 8011198:	4b28      	ldr	r3, [pc, #160]	; (801123c <Save_Svg+0x48c>)
 801119a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801119e:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 80111a2:	429a      	cmp	r2, r3
 80111a4:	f77f af62 	ble.w	801106c <Save_Svg+0x2bc>
 80111a8:	4b25      	ldr	r3, [pc, #148]	; (8011240 <Save_Svg+0x490>)
 80111aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111ac:	f107 0314 	add.w	r3, r7, #20
 80111b0:	4619      	mov	r1, r3
 80111b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80111b4:	f7fe fd6e 	bl	800fc94 <WriteStr>
 80111b8:	4b22      	ldr	r3, [pc, #136]	; (8011244 <Save_Svg+0x494>)
 80111ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111bc:	f107 0314 	add.w	r3, r7, #20
 80111c0:	4619      	mov	r1, r3
 80111c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80111c4:	f7fe fd66 	bl	800fc94 <WriteStr>
 80111c8:	4b1b      	ldr	r3, [pc, #108]	; (8011238 <Save_Svg+0x488>)
 80111ca:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d007      	beq.n	80111e2 <Save_Svg+0x432>
 80111d2:	4b19      	ldr	r3, [pc, #100]	; (8011238 <Save_Svg+0x488>)
 80111d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80111d8:	00db      	lsls	r3, r3, #3
 80111da:	4a1b      	ldr	r2, [pc, #108]	; (8011248 <Save_Svg+0x498>)
 80111dc:	4413      	add	r3, r2
 80111de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111e0:	e006      	b.n	80111f0 <Save_Svg+0x440>
 80111e2:	4b15      	ldr	r3, [pc, #84]	; (8011238 <Save_Svg+0x488>)
 80111e4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80111e8:	00db      	lsls	r3, r3, #3
 80111ea:	4a18      	ldr	r2, [pc, #96]	; (801124c <Save_Svg+0x49c>)
 80111ec:	4413      	add	r3, r2
 80111ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111f0:	f107 0314 	add.w	r3, r7, #20
 80111f4:	4619      	mov	r1, r3
 80111f6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80111f8:	f7fe fd4c 	bl	800fc94 <WriteStr>
 80111fc:	4b14      	ldr	r3, [pc, #80]	; (8011250 <Save_Svg+0x4a0>)
 80111fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011200:	f107 0314 	add.w	r3, r7, #20
 8011204:	4619      	mov	r1, r3
 8011206:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011208:	f7fe fd44 	bl	800fc94 <WriteStr>
 801120c:	4b11      	ldr	r3, [pc, #68]	; (8011254 <Save_Svg+0x4a4>)
 801120e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011210:	f107 0314 	add.w	r3, r7, #20
 8011214:	4619      	mov	r1, r3
 8011216:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011218:	f7fe fd3c 	bl	800fc94 <WriteStr>
 801121c:	4b06      	ldr	r3, [pc, #24]	; (8011238 <Save_Svg+0x488>)
 801121e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d01a      	beq.n	801125c <Save_Svg+0x4ac>
 8011226:	4b0c      	ldr	r3, [pc, #48]	; (8011258 <Save_Svg+0x4a8>)
 8011228:	63fb      	str	r3, [r7, #60]	; 0x3c
 801122a:	e019      	b.n	8011260 <Save_Svg+0x4b0>
 801122c:	08000490 	.word	0x08000490
 8011230:	08000494 	.word	0x08000494
 8011234:	08000498 	.word	0x08000498
 8011238:	2000029c 	.word	0x2000029c
 801123c:	08002270 	.word	0x08002270
 8011240:	08000428 	.word	0x08000428
 8011244:	0800049c 	.word	0x0800049c
 8011248:	080019fc 	.word	0x080019fc
 801124c:	080019ac 	.word	0x080019ac
 8011250:	08000504 	.word	0x08000504
 8011254:	0800050c 	.word	0x0800050c
 8011258:	08000510 	.word	0x08000510
 801125c:	4bb1      	ldr	r3, [pc, #708]	; (8011524 <Save_Svg+0x774>)
 801125e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011260:	f107 0314 	add.w	r3, r7, #20
 8011264:	4619      	mov	r1, r3
 8011266:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011268:	f7fe fd14 	bl	800fc94 <WriteStr>
 801126c:	4bae      	ldr	r3, [pc, #696]	; (8011528 <Save_Svg+0x778>)
 801126e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011270:	f107 0314 	add.w	r3, r7, #20
 8011274:	4619      	mov	r1, r3
 8011276:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011278:	f7fe fd0c 	bl	800fc94 <WriteStr>
 801127c:	4bab      	ldr	r3, [pc, #684]	; (801152c <Save_Svg+0x77c>)
 801127e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011282:	00db      	lsls	r3, r3, #3
 8011284:	4aaa      	ldr	r2, [pc, #680]	; (8011530 <Save_Svg+0x780>)
 8011286:	4413      	add	r3, r2
 8011288:	63fb      	str	r3, [r7, #60]	; 0x3c
 801128a:	f107 0314 	add.w	r3, r7, #20
 801128e:	4619      	mov	r1, r3
 8011290:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011292:	f7fe fcff 	bl	800fc94 <WriteStr>
 8011296:	4ba7      	ldr	r3, [pc, #668]	; (8011534 <Save_Svg+0x784>)
 8011298:	63fb      	str	r3, [r7, #60]	; 0x3c
 801129a:	f107 0314 	add.w	r3, r7, #20
 801129e:	4619      	mov	r1, r3
 80112a0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80112a2:	f7fe fcf7 	bl	800fc94 <WriteStr>
 80112a6:	4ba4      	ldr	r3, [pc, #656]	; (8011538 <Save_Svg+0x788>)
 80112a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80112aa:	f107 0314 	add.w	r3, r7, #20
 80112ae:	4619      	mov	r1, r3
 80112b0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80112b2:	f7fe fcef 	bl	800fc94 <WriteStr>
 80112b6:	4b9d      	ldr	r3, [pc, #628]	; (801152c <Save_Svg+0x77c>)
 80112b8:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80112bc:	b29b      	uxth	r3, r3
 80112be:	f1c3 03c7 	rsb	r3, r3, #199	; 0xc7
 80112c2:	b29b      	uxth	r3, r3
 80112c4:	863b      	strh	r3, [r7, #48]	; 0x30
 80112c6:	4b9d      	ldr	r3, [pc, #628]	; (801153c <Save_Svg+0x78c>)
 80112c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80112ca:	f107 0314 	add.w	r3, r7, #20
 80112ce:	4619      	mov	r1, r3
 80112d0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80112d2:	f7fe fcdf 	bl	800fc94 <WriteStr>
 80112d6:	4b9a      	ldr	r3, [pc, #616]	; (8011540 <Save_Svg+0x790>)
 80112d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80112da:	f107 0314 	add.w	r3, r7, #20
 80112de:	4619      	mov	r1, r3
 80112e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80112e2:	f7fe fcd7 	bl	800fc94 <WriteStr>
 80112e6:	4b97      	ldr	r3, [pc, #604]	; (8011544 <Save_Svg+0x794>)
 80112e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80112ea:	f107 0314 	add.w	r3, r7, #20
 80112ee:	4619      	mov	r1, r3
 80112f0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80112f2:	f7fe fccf 	bl	800fc94 <WriteStr>
 80112f6:	4b94      	ldr	r3, [pc, #592]	; (8011548 <Save_Svg+0x798>)
 80112f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80112fa:	f107 0314 	add.w	r3, r7, #20
 80112fe:	4619      	mov	r1, r3
 8011300:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011302:	f7fe fcc7 	bl	800fc94 <WriteStr>
 8011306:	4b91      	ldr	r3, [pc, #580]	; (801154c <Save_Svg+0x79c>)
 8011308:	63fb      	str	r3, [r7, #60]	; 0x3c
 801130a:	f107 0314 	add.w	r3, r7, #20
 801130e:	4619      	mov	r1, r3
 8011310:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011312:	f7fe fcbf 	bl	800fc94 <WriteStr>
 8011316:	4b8e      	ldr	r3, [pc, #568]	; (8011550 <Save_Svg+0x7a0>)
 8011318:	63fb      	str	r3, [r7, #60]	; 0x3c
 801131a:	f107 0314 	add.w	r3, r7, #20
 801131e:	4619      	mov	r1, r3
 8011320:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011322:	f7fe fcb7 	bl	800fc94 <WriteStr>
 8011326:	4b8b      	ldr	r3, [pc, #556]	; (8011554 <Save_Svg+0x7a4>)
 8011328:	63fb      	str	r3, [r7, #60]	; 0x3c
 801132a:	f107 0314 	add.w	r3, r7, #20
 801132e:	4619      	mov	r1, r3
 8011330:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011332:	f7fe fcaf 	bl	800fc94 <WriteStr>
 8011336:	4b88      	ldr	r3, [pc, #544]	; (8011558 <Save_Svg+0x7a8>)
 8011338:	63fb      	str	r3, [r7, #60]	; 0x3c
 801133a:	f107 0314 	add.w	r3, r7, #20
 801133e:	4619      	mov	r1, r3
 8011340:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011342:	f7fe fca7 	bl	800fc94 <WriteStr>
 8011346:	4b85      	ldr	r3, [pc, #532]	; (801155c <Save_Svg+0x7ac>)
 8011348:	63fb      	str	r3, [r7, #60]	; 0x3c
 801134a:	f107 0314 	add.w	r3, r7, #20
 801134e:	4619      	mov	r1, r3
 8011350:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011352:	f7fe fc9f 	bl	800fc94 <WriteStr>
 8011356:	4b82      	ldr	r3, [pc, #520]	; (8011560 <Save_Svg+0x7b0>)
 8011358:	63fb      	str	r3, [r7, #60]	; 0x3c
 801135a:	f107 0314 	add.w	r3, r7, #20
 801135e:	4619      	mov	r1, r3
 8011360:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011362:	f7fe fc97 	bl	800fc94 <WriteStr>
 8011366:	4b7f      	ldr	r3, [pc, #508]	; (8011564 <Save_Svg+0x7b4>)
 8011368:	63fb      	str	r3, [r7, #60]	; 0x3c
 801136a:	f107 0314 	add.w	r3, r7, #20
 801136e:	4619      	mov	r1, r3
 8011370:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011372:	f7fe fc8f 	bl	800fc94 <WriteStr>
 8011376:	4b7c      	ldr	r3, [pc, #496]	; (8011568 <Save_Svg+0x7b8>)
 8011378:	63fb      	str	r3, [r7, #60]	; 0x3c
 801137a:	f107 0314 	add.w	r3, r7, #20
 801137e:	4619      	mov	r1, r3
 8011380:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011382:	f7fe fc87 	bl	800fc94 <WriteStr>
 8011386:	4b79      	ldr	r3, [pc, #484]	; (801156c <Save_Svg+0x7bc>)
 8011388:	63fb      	str	r3, [r7, #60]	; 0x3c
 801138a:	f107 0314 	add.w	r3, r7, #20
 801138e:	4619      	mov	r1, r3
 8011390:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011392:	f7fe fc7f 	bl	800fc94 <WriteStr>
 8011396:	4b65      	ldr	r3, [pc, #404]	; (801152c <Save_Svg+0x77c>)
 8011398:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 801139c:	461a      	mov	r2, r3
 801139e:	4b74      	ldr	r3, [pc, #464]	; (8011570 <Save_Svg+0x7c0>)
 80113a0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80113a4:	f107 0214 	add.w	r2, r7, #20
 80113a8:	4611      	mov	r1, r2
 80113aa:	4618      	mov	r0, r3
 80113ac:	f7fe fbca 	bl	800fb44 <WriteVar>
 80113b0:	4b70      	ldr	r3, [pc, #448]	; (8011574 <Save_Svg+0x7c4>)
 80113b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80113b4:	f107 0314 	add.w	r3, r7, #20
 80113b8:	4619      	mov	r1, r3
 80113ba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80113bc:	f7fe fc6a 	bl	800fc94 <WriteStr>
 80113c0:	4b6d      	ldr	r3, [pc, #436]	; (8011578 <Save_Svg+0x7c8>)
 80113c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80113c4:	f107 0314 	add.w	r3, r7, #20
 80113c8:	4619      	mov	r1, r3
 80113ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80113cc:	f7fe fc62 	bl	800fc94 <WriteStr>
 80113d0:	4b6a      	ldr	r3, [pc, #424]	; (801157c <Save_Svg+0x7cc>)
 80113d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80113d4:	f107 0314 	add.w	r3, r7, #20
 80113d8:	4619      	mov	r1, r3
 80113da:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80113dc:	f7fe fc5a 	bl	800fc94 <WriteStr>
 80113e0:	4b67      	ldr	r3, [pc, #412]	; (8011580 <Save_Svg+0x7d0>)
 80113e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80113e4:	f107 0314 	add.w	r3, r7, #20
 80113e8:	4619      	mov	r1, r3
 80113ea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80113ec:	f7fe fc52 	bl	800fc94 <WriteStr>
 80113f0:	4b64      	ldr	r3, [pc, #400]	; (8011584 <Save_Svg+0x7d4>)
 80113f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80113f4:	f107 0314 	add.w	r3, r7, #20
 80113f8:	4619      	mov	r1, r3
 80113fa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80113fc:	f7fe fc4a 	bl	800fc94 <WriteStr>
 8011400:	4b61      	ldr	r3, [pc, #388]	; (8011588 <Save_Svg+0x7d8>)
 8011402:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011404:	f107 0314 	add.w	r3, r7, #20
 8011408:	4619      	mov	r1, r3
 801140a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801140c:	f7fe fc42 	bl	800fc94 <WriteStr>
 8011410:	4b5e      	ldr	r3, [pc, #376]	; (801158c <Save_Svg+0x7dc>)
 8011412:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011414:	f107 0314 	add.w	r3, r7, #20
 8011418:	4619      	mov	r1, r3
 801141a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801141c:	f7fe fc3a 	bl	800fc94 <WriteStr>
 8011420:	4b58      	ldr	r3, [pc, #352]	; (8011584 <Save_Svg+0x7d4>)
 8011422:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011424:	f107 0314 	add.w	r3, r7, #20
 8011428:	4619      	mov	r1, r3
 801142a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801142c:	f7fe fc32 	bl	800fc94 <WriteStr>
 8011430:	4b57      	ldr	r3, [pc, #348]	; (8011590 <Save_Svg+0x7e0>)
 8011432:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011434:	f107 0314 	add.w	r3, r7, #20
 8011438:	4619      	mov	r1, r3
 801143a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801143c:	f7fe fc2a 	bl	800fc94 <WriteStr>
 8011440:	4b3a      	ldr	r3, [pc, #232]	; (801152c <Save_Svg+0x77c>)
 8011442:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d00b      	beq.n	8011462 <Save_Svg+0x6b2>
 801144a:	4b38      	ldr	r3, [pc, #224]	; (801152c <Save_Svg+0x77c>)
 801144c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011450:	461a      	mov	r2, r3
 8011452:	4613      	mov	r3, r2
 8011454:	005b      	lsls	r3, r3, #1
 8011456:	4413      	add	r3, r2
 8011458:	005b      	lsls	r3, r3, #1
 801145a:	4a4e      	ldr	r2, [pc, #312]	; (8011594 <Save_Svg+0x7e4>)
 801145c:	4413      	add	r3, r2
 801145e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011460:	e00a      	b.n	8011478 <Save_Svg+0x6c8>
 8011462:	4b32      	ldr	r3, [pc, #200]	; (801152c <Save_Svg+0x77c>)
 8011464:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011468:	461a      	mov	r2, r3
 801146a:	4613      	mov	r3, r2
 801146c:	005b      	lsls	r3, r3, #1
 801146e:	4413      	add	r3, r2
 8011470:	005b      	lsls	r3, r3, #1
 8011472:	4a49      	ldr	r2, [pc, #292]	; (8011598 <Save_Svg+0x7e8>)
 8011474:	4413      	add	r3, r2
 8011476:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011478:	f107 0314 	add.w	r3, r7, #20
 801147c:	4619      	mov	r1, r3
 801147e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011480:	f7fe fc08 	bl	800fc94 <WriteStr>
 8011484:	4b45      	ldr	r3, [pc, #276]	; (801159c <Save_Svg+0x7ec>)
 8011486:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011488:	f107 0314 	add.w	r3, r7, #20
 801148c:	4619      	mov	r1, r3
 801148e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011490:	f7fe fc00 	bl	800fc94 <WriteStr>
 8011494:	f107 0214 	add.w	r2, r7, #20
 8011498:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801149c:	4611      	mov	r1, r2
 801149e:	4618      	mov	r0, r3
 80114a0:	f7fe fb50 	bl	800fb44 <WriteVar>
 80114a4:	4b3e      	ldr	r3, [pc, #248]	; (80115a0 <Save_Svg+0x7f0>)
 80114a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80114a8:	f107 0314 	add.w	r3, r7, #20
 80114ac:	4619      	mov	r1, r3
 80114ae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80114b0:	f7fe fbf0 	bl	800fc94 <WriteStr>
 80114b4:	4b1d      	ldr	r3, [pc, #116]	; (801152c <Save_Svg+0x77c>)
 80114b6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80114ba:	00db      	lsls	r3, r3, #3
 80114bc:	4a39      	ldr	r2, [pc, #228]	; (80115a4 <Save_Svg+0x7f4>)
 80114be:	4413      	add	r3, r2
 80114c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80114c2:	f107 0314 	add.w	r3, r7, #20
 80114c6:	4619      	mov	r1, r3
 80114c8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80114ca:	f7fe fbe3 	bl	800fc94 <WriteStr>
 80114ce:	4b36      	ldr	r3, [pc, #216]	; (80115a8 <Save_Svg+0x7f8>)
 80114d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80114d2:	f107 0314 	add.w	r3, r7, #20
 80114d6:	4619      	mov	r1, r3
 80114d8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80114da:	f7fe fbdb 	bl	800fc94 <WriteStr>
 80114de:	4b1d      	ldr	r3, [pc, #116]	; (8011554 <Save_Svg+0x7a4>)
 80114e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80114e2:	f107 0314 	add.w	r3, r7, #20
 80114e6:	4619      	mov	r1, r3
 80114e8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80114ea:	f7fe fbd3 	bl	800fc94 <WriteStr>
 80114ee:	4b2f      	ldr	r3, [pc, #188]	; (80115ac <Save_Svg+0x7fc>)
 80114f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80114f2:	f107 0314 	add.w	r3, r7, #20
 80114f6:	4619      	mov	r1, r3
 80114f8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80114fa:	f7fe fbcb 	bl	800fc94 <WriteStr>
 80114fe:	4b2c      	ldr	r3, [pc, #176]	; (80115b0 <Save_Svg+0x800>)
 8011500:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011502:	f107 0314 	add.w	r3, r7, #20
 8011506:	4619      	mov	r1, r3
 8011508:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801150a:	f7fe fbc3 	bl	800fc94 <WriteStr>
 801150e:	f107 0314 	add.w	r3, r7, #20
 8011512:	4619      	mov	r1, r3
 8011514:	4827      	ldr	r0, [pc, #156]	; (80115b4 <Save_Svg+0x804>)
 8011516:	f7fe f8e5 	bl	800f6e4 <ProgFileSec>
 801151a:	4603      	mov	r3, r0
 801151c:	2b00      	cmp	r3, #0
 801151e:	d04b      	beq.n	80115b8 <Save_Svg+0x808>
 8011520:	2303      	movs	r3, #3
 8011522:	e07b      	b.n	801161c <Save_Svg+0x86c>
 8011524:	08000514 	.word	0x08000514
 8011528:	08000518 	.word	0x08000518
 801152c:	2000029c 	.word	0x2000029c
 8011530:	200001d4 	.word	0x200001d4
 8011534:	0800051c 	.word	0x0800051c
 8011538:	0800052c 	.word	0x0800052c
 801153c:	08000598 	.word	0x08000598
 8011540:	080005c4 	.word	0x080005c4
 8011544:	08000628 	.word	0x08000628
 8011548:	08000644 	.word	0x08000644
 801154c:	08000684 	.word	0x08000684
 8011550:	080006c0 	.word	0x080006c0
 8011554:	080006f4 	.word	0x080006f4
 8011558:	080006f8 	.word	0x080006f8
 801155c:	0800074c 	.word	0x0800074c
 8011560:	08000764 	.word	0x08000764
 8011564:	08000768 	.word	0x08000768
 8011568:	0800077c 	.word	0x0800077c
 801156c:	08000794 	.word	0x08000794
 8011570:	08002270 	.word	0x08002270
 8011574:	080007b0 	.word	0x080007b0
 8011578:	080007c0 	.word	0x080007c0
 801157c:	080007cc 	.word	0x080007cc
 8011580:	08000818 	.word	0x08000818
 8011584:	08000838 	.word	0x08000838
 8011588:	0800083c 	.word	0x0800083c
 801158c:	08000880 	.word	0x08000880
 8011590:	080008cc 	.word	0x080008cc
 8011594:	08001a88 	.word	0x08001a88
 8011598:	08001a4c 	.word	0x08001a4c
 801159c:	08000914 	.word	0x08000914
 80115a0:	08000918 	.word	0x08000918
 80115a4:	08001ac4 	.word	0x08001ac4
 80115a8:	0800092c 	.word	0x0800092c
 80115ac:	08000930 	.word	0x08000930
 80115b0:	08000940 	.word	0x08000940
 80115b4:	200017e0 	.word	0x200017e0
 80115b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115ba:	1c5a      	adds	r2, r3, #1
 80115bc:	637a      	str	r2, [r7, #52]	; 0x34
 80115be:	105b      	asrs	r3, r3, #1
 80115c0:	b2db      	uxtb	r3, r3
 80115c2:	f003 0303 	and.w	r3, r3, #3
 80115c6:	b2db      	uxtb	r3, r3
 80115c8:	461a      	mov	r2, r3
 80115ca:	2102      	movs	r1, #2
 80115cc:	f44f 7084 	mov.w	r0, #264	; 0x108
 80115d0:	f7fe fa42 	bl	800fa58 <PrintClk>
 80115d4:	4b13      	ldr	r3, [pc, #76]	; (8011624 <Save_Svg+0x874>)
 80115d6:	6819      	ldr	r1, [r3, #0]
 80115d8:	f107 0310 	add.w	r3, r7, #16
 80115dc:	f107 0214 	add.w	r2, r7, #20
 80115e0:	4811      	ldr	r0, [pc, #68]	; (8011628 <Save_Svg+0x878>)
 80115e2:	f7fe f8f3 	bl	800f7cc <CloseFile>
 80115e6:	4603      	mov	r3, r0
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d001      	beq.n	80115f0 <Save_Svg+0x840>
 80115ec:	2304      	movs	r3, #4
 80115ee:	e015      	b.n	801161c <Save_Svg+0x86c>
 80115f0:	4b0e      	ldr	r3, [pc, #56]	; (801162c <Save_Svg+0x87c>)
 80115f2:	f9b3 310c 	ldrsh.w	r3, [r3, #268]	; 0x10c
 80115f6:	2b62      	cmp	r3, #98	; 0x62
 80115f8:	dc09      	bgt.n	801160e <Save_Svg+0x85e>
 80115fa:	4b0c      	ldr	r3, [pc, #48]	; (801162c <Save_Svg+0x87c>)
 80115fc:	f9b3 310c 	ldrsh.w	r3, [r3, #268]	; 0x10c
 8011600:	b29b      	uxth	r3, r3
 8011602:	3301      	adds	r3, #1
 8011604:	b29b      	uxth	r3, r3
 8011606:	b21a      	sxth	r2, r3
 8011608:	4b08      	ldr	r3, [pc, #32]	; (801162c <Save_Svg+0x87c>)
 801160a:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
 801160e:	f44f 729b 	mov.w	r2, #310	; 0x136
 8011612:	2100      	movs	r1, #0
 8011614:	4806      	ldr	r0, [pc, #24]	; (8011630 <Save_Svg+0x880>)
 8011616:	f011 fced 	bl	8022ff4 <memset>
 801161a:	2300      	movs	r3, #0
 801161c:	4618      	mov	r0, r3
 801161e:	3748      	adds	r7, #72	; 0x48
 8011620:	46bd      	mov	sp, r7
 8011622:	bd80      	pop	{r7, pc}
 8011624:	2000079c 	.word	0x2000079c
 8011628:	200017e0 	.word	0x200017e0
 801162c:	2000029c 	.word	0x2000029c
 8011630:	2000000c 	.word	0x2000000c

08011634 <Read_CalFlag>:
unsigned long err;

FLASH_EraseInitTypeDef Flash_Erase ={0, 1, 1, 1, 2};

 void Read_CalFlag(void)
 {
 8011634:	b480      	push	{r7}
 8011636:	b083      	sub	sp, #12
 8011638:	af00      	add	r7, sp, #0
	  unsigned short* ptr;
	  ptr=(unsigned short*)Kpg_Address;
 801163a:	4b10      	ldr	r3, [pc, #64]	; (801167c <Read_CalFlag+0x48>)
 801163c:	607b      	str	r3, [r7, #4]
	  if(*ptr++!=0xaa55)
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	1c9a      	adds	r2, r3, #2
 8011642:	607a      	str	r2, [r7, #4]
 8011644:	881b      	ldrh	r3, [r3, #0]
 8011646:	f64a 2255 	movw	r2, #43605	; 0xaa55
 801164a:	4293      	cmp	r3, r2
 801164c:	d10e      	bne.n	801166c <Read_CalFlag+0x38>
		  return;
	  if(*ptr++!=0x0400)
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	1c9a      	adds	r2, r3, #2
 8011652:	607a      	str	r2, [r7, #4]
 8011654:	881b      	ldrh	r3, [r3, #0]
 8011656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801165a:	d109      	bne.n	8011670 <Read_CalFlag+0x3c>
		  return;
	  Cal_Flag = *ptr++;
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	1c9a      	adds	r2, r3, #2
 8011660:	607a      	str	r2, [r7, #4]
 8011662:	881b      	ldrh	r3, [r3, #0]
 8011664:	b2da      	uxtb	r2, r3
 8011666:	4b06      	ldr	r3, [pc, #24]	; (8011680 <Read_CalFlag+0x4c>)
 8011668:	701a      	strb	r2, [r3, #0]
	  return;
 801166a:	e002      	b.n	8011672 <Read_CalFlag+0x3e>
		  return;
 801166c:	bf00      	nop
 801166e:	e000      	b.n	8011672 <Read_CalFlag+0x3e>
		  return;
 8011670:	bf00      	nop
 }
 8011672:	370c      	adds	r7, #12
 8011674:	46bd      	mov	sp, r7
 8011676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167a:	4770      	bx	lr
 801167c:	08004000 	.word	0x08004000
 8011680:	200001b8 	.word	0x200001b8

08011684 <Save_Parameter>:

 /*******************************************************************************
  Save_Parameter:                          Return: 0= Success
 *******************************************************************************/
 char Save_Parameter(void)
 {
 8011684:	b580      	push	{r7, lr}
 8011686:	b082      	sub	sp, #8
 8011688:	af00      	add	r7, sp, #0
   short i, j;
   unsigned short* ptr;

   Flash_Erase.Sector = 2;
 801168a:	4b45      	ldr	r3, [pc, #276]	; (80117a0 <Save_Parameter+0x11c>)
 801168c:	2202      	movs	r2, #2
 801168e:	609a      	str	r2, [r3, #8]

   HAL_FLASH_Unlock();
 8011690:	f008 f81a 	bl	80196c8 <HAL_FLASH_Unlock>
   j=HAL_FLASHEx_Erase( &Flash_Erase, &err);
 8011694:	4943      	ldr	r1, [pc, #268]	; (80117a4 <Save_Parameter+0x120>)
 8011696:	4842      	ldr	r0, [pc, #264]	; (80117a0 <Save_Parameter+0x11c>)
 8011698:	f008 f988 	bl	80199ac <HAL_FLASHEx_Erase>
 801169c:	4603      	mov	r3, r0
 801169e:	80bb      	strh	r3, [r7, #4]
   if(j== HAL_OK)
 80116a0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d173      	bne.n	8011790 <Save_Parameter+0x10c>
   {
     ptr=F_Buff;
 80116a8:	4b3f      	ldr	r3, [pc, #252]	; (80117a8 <Save_Parameter+0x124>)
 80116aa:	603b      	str	r3, [r7, #0]
     *ptr++=0x0400;                              //Ver:4.00
 80116ac:	683b      	ldr	r3, [r7, #0]
 80116ae:	1c9a      	adds	r2, r3, #2
 80116b0:	603a      	str	r2, [r7, #0]
 80116b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80116b6:	801a      	strh	r2, [r3, #0]
     *ptr++=Current;
 80116b8:	4b3c      	ldr	r3, [pc, #240]	; (80117ac <Save_Parameter+0x128>)
 80116ba:	f9b3 1000 	ldrsh.w	r1, [r3]
 80116be:	683b      	ldr	r3, [r7, #0]
 80116c0:	1c9a      	adds	r2, r3, #2
 80116c2:	603a      	str	r2, [r7, #0]
 80116c4:	b28a      	uxth	r2, r1
 80116c6:	801a      	strh	r2, [r3, #0]
     *ptr++=Status;
 80116c8:	4b39      	ldr	r3, [pc, #228]	; (80117b0 <Save_Parameter+0x12c>)
 80116ca:	f9b3 1000 	ldrsh.w	r1, [r3]
 80116ce:	683b      	ldr	r3, [r7, #0]
 80116d0:	1c9a      	adds	r2, r3, #2
 80116d2:	603a      	str	r2, [r7, #0]
 80116d4:	b28a      	uxth	r2, r1
 80116d6:	801a      	strh	r2, [r3, #0]
     for(i=0;i<42;i++)
 80116d8:	2300      	movs	r3, #0
 80116da:	80fb      	strh	r3, [r7, #6]
 80116dc:	e011      	b.n	8011702 <Save_Parameter+0x7e>
    	 *ptr++=List[i].Val;
 80116de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80116e2:	4a34      	ldr	r2, [pc, #208]	; (80117b4 <Save_Parameter+0x130>)
 80116e4:	00db      	lsls	r3, r3, #3
 80116e6:	4413      	add	r3, r2
 80116e8:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80116ec:	683b      	ldr	r3, [r7, #0]
 80116ee:	1c9a      	adds	r2, r3, #2
 80116f0:	603a      	str	r2, [r7, #0]
 80116f2:	b28a      	uxth	r2, r1
 80116f4:	801a      	strh	r2, [r3, #0]
     for(i=0;i<42;i++)
 80116f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80116fa:	b29b      	uxth	r3, r3
 80116fc:	3301      	adds	r3, #1
 80116fe:	b29b      	uxth	r3, r3
 8011700:	80fb      	strh	r3, [r7, #6]
 8011702:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011706:	2b29      	cmp	r3, #41	; 0x29
 8011708:	dde9      	ble.n	80116de <Save_Parameter+0x5a>
     for(i=0;i<8;i++)
 801170a:	2300      	movs	r3, #0
 801170c:	80fb      	strh	r3, [r7, #6]
 801170e:	e00f      	b.n	8011730 <Save_Parameter+0xac>
    	 *ptr++=MenuNow[i];
 8011710:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011714:	4a28      	ldr	r2, [pc, #160]	; (80117b8 <Save_Parameter+0x134>)
 8011716:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 801171a:	683b      	ldr	r3, [r7, #0]
 801171c:	1c9a      	adds	r2, r3, #2
 801171e:	603a      	str	r2, [r7, #0]
 8011720:	b28a      	uxth	r2, r1
 8011722:	801a      	strh	r2, [r3, #0]
     for(i=0;i<8;i++)
 8011724:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011728:	b29b      	uxth	r3, r3
 801172a:	3301      	adds	r3, #1
 801172c:	b29b      	uxth	r3, r3
 801172e:	80fb      	strh	r3, [r7, #6]
 8011730:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011734:	2b07      	cmp	r3, #7
 8011736:	ddeb      	ble.n	8011710 <Save_Parameter+0x8c>
     *ptr++=0xaa55;
 8011738:	683b      	ldr	r3, [r7, #0]
 801173a:	1c9a      	adds	r2, r3, #2
 801173c:	603a      	str	r2, [r7, #0]
 801173e:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8011742:	801a      	strh	r2, [r3, #0]
     ptr=F_Buff;
 8011744:	4b18      	ldr	r3, [pc, #96]	; (80117a8 <Save_Parameter+0x124>)
 8011746:	603b      	str	r3, [r7, #0]
     for(i=0; i<256; i+=2)
 8011748:	2300      	movs	r3, #0
 801174a:	80fb      	strh	r3, [r7, #6]
 801174c:	e01a      	b.n	8011784 <Save_Parameter+0x100>
     {                      //128 SHORT
       j= HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Page_Address+i, *ptr++);
 801174e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011752:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8011756:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801175a:	4619      	mov	r1, r3
 801175c:	683b      	ldr	r3, [r7, #0]
 801175e:	1c9a      	adds	r2, r3, #2
 8011760:	603a      	str	r2, [r7, #0]
 8011762:	881b      	ldrh	r3, [r3, #0]
 8011764:	b29a      	uxth	r2, r3
 8011766:	f04f 0300 	mov.w	r3, #0
 801176a:	2001      	movs	r0, #1
 801176c:	f007 ff58 	bl	8019620 <HAL_FLASH_Program>
 8011770:	4603      	mov	r3, r0
 8011772:	80bb      	strh	r3, [r7, #4]
       if(j!= HAL_OK)
 8011774:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011778:	2b00      	cmp	r3, #0
 801177a:	d108      	bne.n	801178e <Save_Parameter+0x10a>
     for(i=0; i<256; i+=2)
 801177c:	88fb      	ldrh	r3, [r7, #6]
 801177e:	3302      	adds	r3, #2
 8011780:	b29b      	uxth	r3, r3
 8011782:	80fb      	strh	r3, [r7, #6]
 8011784:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011788:	2bff      	cmp	r3, #255	; 0xff
 801178a:	dde0      	ble.n	801174e <Save_Parameter+0xca>
 801178c:	e000      	b.n	8011790 <Save_Parameter+0x10c>
    	   break;
 801178e:	bf00      	nop
     }
   }
   HAL_FLASH_Lock();
 8011790:	f007 ffbc 	bl	801970c <HAL_FLASH_Lock>

   return j;
 8011794:	88bb      	ldrh	r3, [r7, #4]
 8011796:	b2db      	uxtb	r3, r3
 }
 8011798:	4618      	mov	r0, r3
 801179a:	3708      	adds	r7, #8
 801179c:	46bd      	mov	sp, r7
 801179e:	bd80      	pop	{r7, pc}
 80117a0:	200001bc 	.word	0x200001bc
 80117a4:	20002820 	.word	0x20002820
 80117a8:	200017e0 	.word	0x200017e0
 80117ac:	200007a6 	.word	0x200007a6
 80117b0:	200007a8 	.word	0x200007a8
 80117b4:	2000029c 	.word	0x2000029c
 80117b8:	2000053c 	.word	0x2000053c

080117bc <Read_Parameter>:
 /*******************************************************************************
 Read_Parameter:
 *******************************************************************************/
 void Read_Parameter(void)
 {
 80117bc:	b480      	push	{r7}
 80117be:	b083      	sub	sp, #12
 80117c0:	af00      	add	r7, sp, #0
   short i;
   unsigned short* ptr;
   ptr=(unsigned short*)(Page_Address+55*2); //94*2-40
 80117c2:	4b3f      	ldr	r3, [pc, #252]	; (80118c0 <Read_Parameter+0x104>)
 80117c4:	603b      	str	r3, [r7, #0]
   TIM_BASE_Val=List[TIM_BASE].Val;
 80117c6:	4b3f      	ldr	r3, [pc, #252]	; (80118c4 <Read_Parameter+0x108>)
 80117c8:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 80117cc:	4b3e      	ldr	r3, [pc, #248]	; (80118c8 <Read_Parameter+0x10c>)
 80117ce:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 80117d0:	4b3c      	ldr	r3, [pc, #240]	; (80118c4 <Read_Parameter+0x108>)
 80117d2:	2200      	movs	r2, #0
 80117d4:	879a      	strh	r2, [r3, #60]	; 0x3c
   if(*ptr!=0xaa55)
 80117d6:	683b      	ldr	r3, [r7, #0]
 80117d8:	881b      	ldrh	r3, [r3, #0]
 80117da:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80117de:	4293      	cmp	r3, r2
 80117e0:	d166      	bne.n	80118b0 <Read_Parameter+0xf4>
	   return ;
   ptr=(unsigned short*)Page_Address;
 80117e2:	4b3a      	ldr	r3, [pc, #232]	; (80118cc <Read_Parameter+0x110>)
 80117e4:	603b      	str	r3, [r7, #0]
   if(*ptr++!=0x0400)
 80117e6:	683b      	ldr	r3, [r7, #0]
 80117e8:	1c9a      	adds	r2, r3, #2
 80117ea:	603a      	str	r2, [r7, #0]
 80117ec:	881b      	ldrh	r3, [r3, #0]
 80117ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80117f2:	d15f      	bne.n	80118b4 <Read_Parameter+0xf8>
	   return ;
   Current=*ptr++;
 80117f4:	683b      	ldr	r3, [r7, #0]
 80117f6:	1c9a      	adds	r2, r3, #2
 80117f8:	603a      	str	r2, [r7, #0]
 80117fa:	881b      	ldrh	r3, [r3, #0]
 80117fc:	b21a      	sxth	r2, r3
 80117fe:	4b34      	ldr	r3, [pc, #208]	; (80118d0 <Read_Parameter+0x114>)
 8011800:	801a      	strh	r2, [r3, #0]
   List[MenuNow[Current]].Flg |= UPD;
 8011802:	4b33      	ldr	r3, [pc, #204]	; (80118d0 <Read_Parameter+0x114>)
 8011804:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011808:	461a      	mov	r2, r3
 801180a:	4b32      	ldr	r3, [pc, #200]	; (80118d4 <Read_Parameter+0x118>)
 801180c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8011810:	4a2c      	ldr	r2, [pc, #176]	; (80118c4 <Read_Parameter+0x108>)
 8011812:	00db      	lsls	r3, r3, #3
 8011814:	4413      	add	r3, r2
 8011816:	799b      	ldrb	r3, [r3, #6]
 8011818:	4a2d      	ldr	r2, [pc, #180]	; (80118d0 <Read_Parameter+0x114>)
 801181a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801181e:	4611      	mov	r1, r2
 8011820:	4a2c      	ldr	r2, [pc, #176]	; (80118d4 <Read_Parameter+0x118>)
 8011822:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8011826:	4610      	mov	r0, r2
 8011828:	f043 0320 	orr.w	r3, r3, #32
 801182c:	b2d9      	uxtb	r1, r3
 801182e:	4a25      	ldr	r2, [pc, #148]	; (80118c4 <Read_Parameter+0x108>)
 8011830:	00c3      	lsls	r3, r0, #3
 8011832:	4413      	add	r3, r2
 8011834:	460a      	mov	r2, r1
 8011836:	719a      	strb	r2, [r3, #6]
   ptr++;
 8011838:	683b      	ldr	r3, [r7, #0]
 801183a:	3302      	adds	r3, #2
 801183c:	603b      	str	r3, [r7, #0]
   for(i=0;i<42;i++)
 801183e:	2300      	movs	r3, #0
 8011840:	80fb      	strh	r3, [r7, #6]
 8011842:	e011      	b.n	8011868 <Read_Parameter+0xac>
	   List[i].Val=*ptr++;
 8011844:	683b      	ldr	r3, [r7, #0]
 8011846:	1c9a      	adds	r2, r3, #2
 8011848:	603a      	str	r2, [r7, #0]
 801184a:	881a      	ldrh	r2, [r3, #0]
 801184c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011850:	b211      	sxth	r1, r2
 8011852:	4a1c      	ldr	r2, [pc, #112]	; (80118c4 <Read_Parameter+0x108>)
 8011854:	00db      	lsls	r3, r3, #3
 8011856:	4413      	add	r3, r2
 8011858:	460a      	mov	r2, r1
 801185a:	809a      	strh	r2, [r3, #4]
   for(i=0;i<42;i++)
 801185c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011860:	b29b      	uxth	r3, r3
 8011862:	3301      	adds	r3, #1
 8011864:	b29b      	uxth	r3, r3
 8011866:	80fb      	strh	r3, [r7, #6]
 8011868:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801186c:	2b29      	cmp	r3, #41	; 0x29
 801186e:	dde9      	ble.n	8011844 <Read_Parameter+0x88>
   for(i=0;i<8;i++)
 8011870:	2300      	movs	r3, #0
 8011872:	80fb      	strh	r3, [r7, #6]
 8011874:	e00f      	b.n	8011896 <Read_Parameter+0xda>
	   MenuNow[i]=*ptr++;
 8011876:	683b      	ldr	r3, [r7, #0]
 8011878:	1c9a      	adds	r2, r3, #2
 801187a:	603a      	str	r2, [r7, #0]
 801187c:	881a      	ldrh	r2, [r3, #0]
 801187e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011882:	b211      	sxth	r1, r2
 8011884:	4a13      	ldr	r2, [pc, #76]	; (80118d4 <Read_Parameter+0x118>)
 8011886:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(i=0;i<8;i++)
 801188a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801188e:	b29b      	uxth	r3, r3
 8011890:	3301      	adds	r3, #1
 8011892:	b29b      	uxth	r3, r3
 8011894:	80fb      	strh	r3, [r7, #6]
 8011896:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801189a:	2b07      	cmp	r3, #7
 801189c:	ddeb      	ble.n	8011876 <Read_Parameter+0xba>
   TIM_BASE_Val=List[TIM_BASE].Val;
 801189e:	4b09      	ldr	r3, [pc, #36]	; (80118c4 <Read_Parameter+0x108>)
 80118a0:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 80118a4:	4b08      	ldr	r3, [pc, #32]	; (80118c8 <Read_Parameter+0x10c>)
 80118a6:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 80118a8:	4b06      	ldr	r3, [pc, #24]	; (80118c4 <Read_Parameter+0x108>)
 80118aa:	2200      	movs	r2, #0
 80118ac:	879a      	strh	r2, [r3, #60]	; 0x3c

   return ;
 80118ae:	e002      	b.n	80118b6 <Read_Parameter+0xfa>
	   return ;
 80118b0:	bf00      	nop
 80118b2:	e000      	b.n	80118b6 <Read_Parameter+0xfa>
	   return ;
 80118b4:	bf00      	nop
 }
 80118b6:	370c      	adds	r7, #12
 80118b8:	46bd      	mov	sp, r7
 80118ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118be:	4770      	bx	lr
 80118c0:	0800806e 	.word	0x0800806e
 80118c4:	2000029c 	.word	0x2000029c
 80118c8:	2000281c 	.word	0x2000281c
 80118cc:	08008000 	.word	0x08008000
 80118d0:	200007a6 	.word	0x200007a6
 80118d4:	2000053c 	.word	0x2000053c

080118d8 <Save_Kpg>:
 /*******************************************************************************
  Save_Kpg:                       Return: 0= Success
 *******************************************************************************/
 char Save_Kpg(void)
 {
 80118d8:	b580      	push	{r7, lr}
 80118da:	b082      	sub	sp, #8
 80118dc:	af00      	add	r7, sp, #0
   short i, j;
   unsigned short* ptr;

   Flash_Erase.Sector = 1;
 80118de:	4b34      	ldr	r3, [pc, #208]	; (80119b0 <Save_Kpg+0xd8>)
 80118e0:	2201      	movs	r2, #1
 80118e2:	609a      	str	r2, [r3, #8]

   HAL_FLASH_Unlock();
 80118e4:	f007 fef0 	bl	80196c8 <HAL_FLASH_Unlock>
   j=HAL_FLASHEx_Erase( &Flash_Erase, &err);
 80118e8:	4932      	ldr	r1, [pc, #200]	; (80119b4 <Save_Kpg+0xdc>)
 80118ea:	4831      	ldr	r0, [pc, #196]	; (80119b0 <Save_Kpg+0xd8>)
 80118ec:	f008 f85e 	bl	80199ac <HAL_FLASHEx_Erase>
 80118f0:	4603      	mov	r3, r0
 80118f2:	80bb      	strh	r3, [r7, #4]
   if(j== HAL_OK)
 80118f4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d151      	bne.n	80119a0 <Save_Kpg+0xc8>
   {
     ptr=F_Buff;
 80118fc:	4b2e      	ldr	r3, [pc, #184]	; (80119b8 <Save_Kpg+0xe0>)
 80118fe:	603b      	str	r3, [r7, #0]
     *ptr++=0xaa55;
 8011900:	683b      	ldr	r3, [r7, #0]
 8011902:	1c9a      	adds	r2, r3, #2
 8011904:	603a      	str	r2, [r7, #0]
 8011906:	f64a 2255 	movw	r2, #43605	; 0xaa55
 801190a:	801a      	strh	r2, [r3, #0]
     *ptr++=0x0400;                              //Ver:3.00
 801190c:	683b      	ldr	r3, [r7, #0]
 801190e:	1c9a      	adds	r2, r3, #2
 8011910:	603a      	str	r2, [r7, #0]
 8011912:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011916:	801a      	strh	r2, [r3, #0]
     *ptr++=Cal_Flag;
 8011918:	4b28      	ldr	r3, [pc, #160]	; (80119bc <Save_Kpg+0xe4>)
 801191a:	7819      	ldrb	r1, [r3, #0]
 801191c:	683b      	ldr	r3, [r7, #0]
 801191e:	1c9a      	adds	r2, r3, #2
 8011920:	603a      	str	r2, [r7, #0]
 8011922:	b28a      	uxth	r2, r1
 8011924:	801a      	strh	r2, [r3, #0]
     for(i=0;i<3;i++)
 8011926:	2300      	movs	r3, #0
 8011928:	80fb      	strh	r3, [r7, #6]
 801192a:	e00f      	b.n	801194c <Save_Kpg+0x74>
    	 *ptr++=Kpg[i];
 801192c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011930:	4a23      	ldr	r2, [pc, #140]	; (80119c0 <Save_Kpg+0xe8>)
 8011932:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8011936:	683b      	ldr	r3, [r7, #0]
 8011938:	1c9a      	adds	r2, r3, #2
 801193a:	603a      	str	r2, [r7, #0]
 801193c:	b28a      	uxth	r2, r1
 801193e:	801a      	strh	r2, [r3, #0]
     for(i=0;i<3;i++)
 8011940:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011944:	b29b      	uxth	r3, r3
 8011946:	3301      	adds	r3, #1
 8011948:	b29b      	uxth	r3, r3
 801194a:	80fb      	strh	r3, [r7, #6]
 801194c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011950:	2b02      	cmp	r3, #2
 8011952:	ddeb      	ble.n	801192c <Save_Kpg+0x54>
     ptr=F_Buff;
 8011954:	4b18      	ldr	r3, [pc, #96]	; (80119b8 <Save_Kpg+0xe0>)
 8011956:	603b      	str	r3, [r7, #0]
     for(i=0; i<256; i+=2)
 8011958:	2300      	movs	r3, #0
 801195a:	80fb      	strh	r3, [r7, #6]
 801195c:	e01a      	b.n	8011994 <Save_Kpg+0xbc>
     {                      //128 SHORT
       j= HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Kpg_Address+i, *ptr++);
 801195e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011962:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8011966:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801196a:	4619      	mov	r1, r3
 801196c:	683b      	ldr	r3, [r7, #0]
 801196e:	1c9a      	adds	r2, r3, #2
 8011970:	603a      	str	r2, [r7, #0]
 8011972:	881b      	ldrh	r3, [r3, #0]
 8011974:	b29a      	uxth	r2, r3
 8011976:	f04f 0300 	mov.w	r3, #0
 801197a:	2001      	movs	r0, #1
 801197c:	f007 fe50 	bl	8019620 <HAL_FLASH_Program>
 8011980:	4603      	mov	r3, r0
 8011982:	80bb      	strh	r3, [r7, #4]
       if(j!= HAL_OK)
 8011984:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011988:	2b00      	cmp	r3, #0
 801198a:	d108      	bne.n	801199e <Save_Kpg+0xc6>
     for(i=0; i<256; i+=2)
 801198c:	88fb      	ldrh	r3, [r7, #6]
 801198e:	3302      	adds	r3, #2
 8011990:	b29b      	uxth	r3, r3
 8011992:	80fb      	strh	r3, [r7, #6]
 8011994:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011998:	2bff      	cmp	r3, #255	; 0xff
 801199a:	dde0      	ble.n	801195e <Save_Kpg+0x86>
 801199c:	e000      	b.n	80119a0 <Save_Kpg+0xc8>
    	   break;
 801199e:	bf00      	nop
     }
   }
   HAL_FLASH_Lock();
 80119a0:	f007 feb4 	bl	801970c <HAL_FLASH_Lock>
   return j;
 80119a4:	88bb      	ldrh	r3, [r7, #4]
 80119a6:	b2db      	uxtb	r3, r3
 }
 80119a8:	4618      	mov	r0, r3
 80119aa:	3708      	adds	r7, #8
 80119ac:	46bd      	mov	sp, r7
 80119ae:	bd80      	pop	{r7, pc}
 80119b0:	200001bc 	.word	0x200001bc
 80119b4:	20002820 	.word	0x20002820
 80119b8:	200017e0 	.word	0x200017e0
 80119bc:	200001b8 	.word	0x200001b8
 80119c0:	20000570 	.word	0x20000570

080119c4 <Read_Kpg>:
 /*******************************************************************************
 Read_Kpg:
 *******************************************************************************/
 void Read_Kpg(void)
 {
 80119c4:	b480      	push	{r7}
 80119c6:	b083      	sub	sp, #12
 80119c8:	af00      	add	r7, sp, #0
   short i;
   unsigned short* ptr;
   ptr=(unsigned short*)Kpg_Address;
 80119ca:	4b1c      	ldr	r3, [pc, #112]	; (8011a3c <Read_Kpg+0x78>)
 80119cc:	603b      	str	r3, [r7, #0]
   if(*ptr++!=0xaa55)
 80119ce:	683b      	ldr	r3, [r7, #0]
 80119d0:	1c9a      	adds	r2, r3, #2
 80119d2:	603a      	str	r2, [r7, #0]
 80119d4:	881b      	ldrh	r3, [r3, #0]
 80119d6:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80119da:	4293      	cmp	r3, r2
 80119dc:	d125      	bne.n	8011a2a <Read_Kpg+0x66>
	   return ;
   if(*ptr++!=0x0400)
 80119de:	683b      	ldr	r3, [r7, #0]
 80119e0:	1c9a      	adds	r2, r3, #2
 80119e2:	603a      	str	r2, [r7, #0]
 80119e4:	881b      	ldrh	r3, [r3, #0]
 80119e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80119ea:	d120      	bne.n	8011a2e <Read_Kpg+0x6a>
	   return ;
   Cal_Flag = *ptr++;
 80119ec:	683b      	ldr	r3, [r7, #0]
 80119ee:	1c9a      	adds	r2, r3, #2
 80119f0:	603a      	str	r2, [r7, #0]
 80119f2:	881b      	ldrh	r3, [r3, #0]
 80119f4:	b2da      	uxtb	r2, r3
 80119f6:	4b12      	ldr	r3, [pc, #72]	; (8011a40 <Read_Kpg+0x7c>)
 80119f8:	701a      	strb	r2, [r3, #0]
   for(i=0;i< 3;i++)
 80119fa:	2300      	movs	r3, #0
 80119fc:	80fb      	strh	r3, [r7, #6]
 80119fe:	e00f      	b.n	8011a20 <Read_Kpg+0x5c>
       Kpg[i] = *ptr++;  //CH_A,CH_B
 8011a00:	683b      	ldr	r3, [r7, #0]
 8011a02:	1c9a      	adds	r2, r3, #2
 8011a04:	603a      	str	r2, [r7, #0]
 8011a06:	881a      	ldrh	r2, [r3, #0]
 8011a08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011a0c:	b211      	sxth	r1, r2
 8011a0e:	4a0d      	ldr	r2, [pc, #52]	; (8011a44 <Read_Kpg+0x80>)
 8011a10:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(i=0;i< 3;i++)
 8011a14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011a18:	b29b      	uxth	r3, r3
 8011a1a:	3301      	adds	r3, #1
 8011a1c:	b29b      	uxth	r3, r3
 8011a1e:	80fb      	strh	r3, [r7, #6]
 8011a20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011a24:	2b02      	cmp	r3, #2
 8011a26:	ddeb      	ble.n	8011a00 <Read_Kpg+0x3c>
   return ;
 8011a28:	e002      	b.n	8011a30 <Read_Kpg+0x6c>
	   return ;
 8011a2a:	bf00      	nop
 8011a2c:	e000      	b.n	8011a30 <Read_Kpg+0x6c>
	   return ;
 8011a2e:	bf00      	nop
 }
 8011a30:	370c      	adds	r7, #12
 8011a32:	46bd      	mov	sp, r7
 8011a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a38:	4770      	bx	lr
 8011a3a:	bf00      	nop
 8011a3c:	08004000 	.word	0x08004000
 8011a40:	200001b8 	.word	0x200001b8
 8011a44:	20000570 	.word	0x20000570

08011a48 <Restore>:

 void Restore(void)
 {
 8011a48:	b580      	push	{r7, lr}
 8011a4a:	b082      	sub	sp, #8
 8011a4c:	af00      	add	r7, sp, #0
   short i;
   TIM_BASE_Val=List[TIM_BASE].Val;
 8011a4e:	4b2d      	ldr	r3, [pc, #180]	; (8011b04 <Restore+0xbc>)
 8011a50:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8011a54:	4b2c      	ldr	r3, [pc, #176]	; (8011b08 <Restore+0xc0>)
 8011a56:	801a      	strh	r2, [r3, #0]
   Current=0;
 8011a58:	4b2c      	ldr	r3, [pc, #176]	; (8011b0c <Restore+0xc4>)
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	801a      	strh	r2, [r3, #0]
   List[MenuNow[Current]].Flg |= UPD;
 8011a5e:	4b2b      	ldr	r3, [pc, #172]	; (8011b0c <Restore+0xc4>)
 8011a60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011a64:	461a      	mov	r2, r3
 8011a66:	4b2a      	ldr	r3, [pc, #168]	; (8011b10 <Restore+0xc8>)
 8011a68:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8011a6c:	4a25      	ldr	r2, [pc, #148]	; (8011b04 <Restore+0xbc>)
 8011a6e:	00db      	lsls	r3, r3, #3
 8011a70:	4413      	add	r3, r2
 8011a72:	799b      	ldrb	r3, [r3, #6]
 8011a74:	4a25      	ldr	r2, [pc, #148]	; (8011b0c <Restore+0xc4>)
 8011a76:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011a7a:	4611      	mov	r1, r2
 8011a7c:	4a24      	ldr	r2, [pc, #144]	; (8011b10 <Restore+0xc8>)
 8011a7e:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8011a82:	4610      	mov	r0, r2
 8011a84:	f043 0320 	orr.w	r3, r3, #32
 8011a88:	b2d9      	uxtb	r1, r3
 8011a8a:	4a1e      	ldr	r2, [pc, #120]	; (8011b04 <Restore+0xbc>)
 8011a8c:	00c3      	lsls	r3, r0, #3
 8011a8e:	4413      	add	r3, r2
 8011a90:	460a      	mov	r2, r1
 8011a92:	719a      	strb	r2, [r3, #6]
   for(i=0;i<42;i++)
 8011a94:	2300      	movs	r3, #0
 8011a96:	80fb      	strh	r3, [r7, #6]
 8011a98:	e013      	b.n	8011ac2 <Restore+0x7a>
	   List[i].Val= List_c[i].Val;
 8011a9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011a9e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011aa2:	491c      	ldr	r1, [pc, #112]	; (8011b14 <Restore+0xcc>)
 8011aa4:	00db      	lsls	r3, r3, #3
 8011aa6:	440b      	add	r3, r1
 8011aa8:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 8011aac:	4915      	ldr	r1, [pc, #84]	; (8011b04 <Restore+0xbc>)
 8011aae:	00d3      	lsls	r3, r2, #3
 8011ab0:	440b      	add	r3, r1
 8011ab2:	4602      	mov	r2, r0
 8011ab4:	809a      	strh	r2, [r3, #4]
   for(i=0;i<42;i++)
 8011ab6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011aba:	b29b      	uxth	r3, r3
 8011abc:	3301      	adds	r3, #1
 8011abe:	b29b      	uxth	r3, r3
 8011ac0:	80fb      	strh	r3, [r7, #6]
 8011ac2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011ac6:	2b29      	cmp	r3, #41	; 0x29
 8011ac8:	dde7      	ble.n	8011a9a <Restore+0x52>
   for(i=0;i<8;i++)
 8011aca:	2300      	movs	r3, #0
 8011acc:	80fb      	strh	r3, [r7, #6]
 8011ace:	e00f      	b.n	8011af0 <Restore+0xa8>
	   MenuNow[i]= MenuNow_C[i];
 8011ad0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011ad4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011ad8:	490f      	ldr	r1, [pc, #60]	; (8011b18 <Restore+0xd0>)
 8011ada:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8011ade:	4a0c      	ldr	r2, [pc, #48]	; (8011b10 <Restore+0xc8>)
 8011ae0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(i=0;i<8;i++)
 8011ae4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011ae8:	b29b      	uxth	r3, r3
 8011aea:	3301      	adds	r3, #1
 8011aec:	b29b      	uxth	r3, r3
 8011aee:	80fb      	strh	r3, [r7, #6]
 8011af0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011af4:	2b07      	cmp	r3, #7
 8011af6:	ddeb      	ble.n	8011ad0 <Restore+0x88>
   Update_Title();
 8011af8:	f000 fdec 	bl	80126d4 <Update_Title>
}
 8011afc:	bf00      	nop
 8011afe:	3708      	adds	r7, #8
 8011b00:	46bd      	mov	sp, r7
 8011b02:	bd80      	pop	{r7, pc}
 8011b04:	2000029c 	.word	0x2000029c
 8011b08:	2000281c 	.word	0x2000281c
 8011b0c:	200007a6 	.word	0x200007a6
 8011b10:	2000053c 	.word	0x2000053c
 8011b14:	200003ec 	.word	0x200003ec
 8011b18:	08001ef8 	.word	0x08001ef8

08011b1c <Restore_CalPar>:

 void Restore_CalPar(void)
 {
 8011b1c:	b580      	push	{r7, lr}
 8011b1e:	b082      	sub	sp, #8
 8011b20:	af00      	add	r7, sp, #0
   short i = 0;
 8011b22:	2300      	movs	r3, #0
 8011b24:	80fb      	strh	r3, [r7, #6]
   List[SMPL_DPTH].Flg |= UPD;
 8011b26:	4b47      	ldr	r3, [pc, #284]	; (8011c44 <Restore_CalPar+0x128>)
 8011b28:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8011b2c:	f043 0320 	orr.w	r3, r3, #32
 8011b30:	b2da      	uxtb	r2, r3
 8011b32:	4b44      	ldr	r3, [pc, #272]	; (8011c44 <Restore_CalPar+0x128>)
 8011b34:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
   TIM_BASE_Val=List[TIM_BASE].Val;
 8011b38:	4b42      	ldr	r3, [pc, #264]	; (8011c44 <Restore_CalPar+0x128>)
 8011b3a:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8011b3e:	4b42      	ldr	r3, [pc, #264]	; (8011c48 <Restore_CalPar+0x12c>)
 8011b40:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 8011b42:	4b40      	ldr	r3, [pc, #256]	; (8011c44 <Restore_CalPar+0x128>)
 8011b44:	2200      	movs	r2, #0
 8011b46:	879a      	strh	r2, [r3, #60]	; 0x3c
   Current=0;
 8011b48:	4b40      	ldr	r3, [pc, #256]	; (8011c4c <Restore_CalPar+0x130>)
 8011b4a:	2200      	movs	r2, #0
 8011b4c:	801a      	strh	r2, [r3, #0]
   List[MenuNow[Current]].Flg |= UPD;
 8011b4e:	4b3f      	ldr	r3, [pc, #252]	; (8011c4c <Restore_CalPar+0x130>)
 8011b50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011b54:	461a      	mov	r2, r3
 8011b56:	4b3e      	ldr	r3, [pc, #248]	; (8011c50 <Restore_CalPar+0x134>)
 8011b58:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8011b5c:	4a39      	ldr	r2, [pc, #228]	; (8011c44 <Restore_CalPar+0x128>)
 8011b5e:	00db      	lsls	r3, r3, #3
 8011b60:	4413      	add	r3, r2
 8011b62:	799b      	ldrb	r3, [r3, #6]
 8011b64:	4a39      	ldr	r2, [pc, #228]	; (8011c4c <Restore_CalPar+0x130>)
 8011b66:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011b6a:	4611      	mov	r1, r2
 8011b6c:	4a38      	ldr	r2, [pc, #224]	; (8011c50 <Restore_CalPar+0x134>)
 8011b6e:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8011b72:	4610      	mov	r0, r2
 8011b74:	f043 0320 	orr.w	r3, r3, #32
 8011b78:	b2d9      	uxtb	r1, r3
 8011b7a:	4a32      	ldr	r2, [pc, #200]	; (8011c44 <Restore_CalPar+0x128>)
 8011b7c:	00c3      	lsls	r3, r0, #3
 8011b7e:	4413      	add	r3, r2
 8011b80:	460a      	mov	r2, r1
 8011b82:	719a      	strb	r2, [r3, #6]
   for(i=0;i<42;i++) List[i].Val= List_c[i].Val;
 8011b84:	2300      	movs	r3, #0
 8011b86:	80fb      	strh	r3, [r7, #6]
 8011b88:	e013      	b.n	8011bb2 <Restore_CalPar+0x96>
 8011b8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011b8e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011b92:	4930      	ldr	r1, [pc, #192]	; (8011c54 <Restore_CalPar+0x138>)
 8011b94:	00db      	lsls	r3, r3, #3
 8011b96:	440b      	add	r3, r1
 8011b98:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 8011b9c:	4929      	ldr	r1, [pc, #164]	; (8011c44 <Restore_CalPar+0x128>)
 8011b9e:	00d3      	lsls	r3, r2, #3
 8011ba0:	440b      	add	r3, r1
 8011ba2:	4602      	mov	r2, r0
 8011ba4:	809a      	strh	r2, [r3, #4]
 8011ba6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011baa:	b29b      	uxth	r3, r3
 8011bac:	3301      	adds	r3, #1
 8011bae:	b29b      	uxth	r3, r3
 8011bb0:	80fb      	strh	r3, [r7, #6]
 8011bb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011bb6:	2b29      	cmp	r3, #41	; 0x29
 8011bb8:	dde7      	ble.n	8011b8a <Restore_CalPar+0x6e>
   for(i=0;i<8;i++)  MenuNow[i]= MenuNow_C[i];
 8011bba:	2300      	movs	r3, #0
 8011bbc:	80fb      	strh	r3, [r7, #6]
 8011bbe:	e00f      	b.n	8011be0 <Restore_CalPar+0xc4>
 8011bc0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011bc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011bc8:	4923      	ldr	r1, [pc, #140]	; (8011c58 <Restore_CalPar+0x13c>)
 8011bca:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8011bce:	4a20      	ldr	r2, [pc, #128]	; (8011c50 <Restore_CalPar+0x134>)
 8011bd0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8011bd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011bd8:	b29b      	uxth	r3, r3
 8011bda:	3301      	adds	r3, #1
 8011bdc:	b29b      	uxth	r3, r3
 8011bde:	80fb      	strh	r3, [r7, #6]
 8011be0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011be4:	2b07      	cmp	r3, #7
 8011be6:	ddeb      	ble.n	8011bc0 <Restore_CalPar+0xa4>
   TIM_BASE_Val=List[TIM_BASE].Val;
 8011be8:	4b16      	ldr	r3, [pc, #88]	; (8011c44 <Restore_CalPar+0x128>)
 8011bea:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8011bee:	4b16      	ldr	r3, [pc, #88]	; (8011c48 <Restore_CalPar+0x12c>)
 8011bf0:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 8011bf2:	4b14      	ldr	r3, [pc, #80]	; (8011c44 <Restore_CalPar+0x128>)
 8011bf4:	2200      	movs	r2, #0
 8011bf6:	879a      	strh	r2, [r3, #60]	; 0x3c
   for(i=Y_RANGES; i<=STANDBY; i++){
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	80fb      	strh	r3, [r7, #6]
 8011bfc:	e015      	b.n	8011c2a <Restore_CalPar+0x10e>
   List[i].Flg |= UPD;
 8011bfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011c02:	4a10      	ldr	r2, [pc, #64]	; (8011c44 <Restore_CalPar+0x128>)
 8011c04:	00db      	lsls	r3, r3, #3
 8011c06:	4413      	add	r3, r2
 8011c08:	799a      	ldrb	r2, [r3, #6]
 8011c0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011c0e:	f042 0220 	orr.w	r2, r2, #32
 8011c12:	b2d1      	uxtb	r1, r2
 8011c14:	4a0b      	ldr	r2, [pc, #44]	; (8011c44 <Restore_CalPar+0x128>)
 8011c16:	00db      	lsls	r3, r3, #3
 8011c18:	4413      	add	r3, r2
 8011c1a:	460a      	mov	r2, r1
 8011c1c:	719a      	strb	r2, [r3, #6]
   for(i=Y_RANGES; i<=STANDBY; i++){
 8011c1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011c22:	b29b      	uxth	r3, r3
 8011c24:	3301      	adds	r3, #1
 8011c26:	b29b      	uxth	r3, r3
 8011c28:	80fb      	strh	r3, [r7, #6]
 8011c2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011c2e:	2b29      	cmp	r3, #41	; 0x29
 8011c30:	dde5      	ble.n	8011bfe <Restore_CalPar+0xe2>
   }
   Update_Title();
 8011c32:	f000 fd4f 	bl	80126d4 <Update_Title>
   Close_Pop();
 8011c36:	f7fc ff0d 	bl	800ea54 <Close_Pop>
 }
 8011c3a:	bf00      	nop
 8011c3c:	3708      	adds	r7, #8
 8011c3e:	46bd      	mov	sp, r7
 8011c40:	bd80      	pop	{r7, pc}
 8011c42:	bf00      	nop
 8011c44:	2000029c 	.word	0x2000029c
 8011c48:	2000281c 	.word	0x2000281c
 8011c4c:	200007a6 	.word	0x200007a6
 8011c50:	2000053c 	.word	0x2000053c
 8011c54:	200003ec 	.word	0x200003ec
 8011c58:	08001ef8 	.word	0x08001ef8

08011c5c <u8ToDec3>:
 8011c5c:	b480      	push	{r7}
 8011c5e:	b083      	sub	sp, #12
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	6078      	str	r0, [r7, #4]
 8011c64:	460b      	mov	r3, r1
 8011c66:	70fb      	strb	r3, [r7, #3]
 8011c68:	78fb      	ldrb	r3, [r7, #3]
 8011c6a:	4a1e      	ldr	r2, [pc, #120]	; (8011ce4 <u8ToDec3+0x88>)
 8011c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8011c70:	095b      	lsrs	r3, r3, #5
 8011c72:	b2da      	uxtb	r2, r3
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	1c59      	adds	r1, r3, #1
 8011c78:	6079      	str	r1, [r7, #4]
 8011c7a:	3230      	adds	r2, #48	; 0x30
 8011c7c:	b2d2      	uxtb	r2, r2
 8011c7e:	701a      	strb	r2, [r3, #0]
 8011c80:	78fb      	ldrb	r3, [r7, #3]
 8011c82:	4a18      	ldr	r2, [pc, #96]	; (8011ce4 <u8ToDec3+0x88>)
 8011c84:	fba2 1203 	umull	r1, r2, r2, r3
 8011c88:	0952      	lsrs	r2, r2, #5
 8011c8a:	2164      	movs	r1, #100	; 0x64
 8011c8c:	fb01 f202 	mul.w	r2, r1, r2
 8011c90:	1a9b      	subs	r3, r3, r2
 8011c92:	70fb      	strb	r3, [r7, #3]
 8011c94:	78fb      	ldrb	r3, [r7, #3]
 8011c96:	4a14      	ldr	r2, [pc, #80]	; (8011ce8 <u8ToDec3+0x8c>)
 8011c98:	fba2 2303 	umull	r2, r3, r2, r3
 8011c9c:	08db      	lsrs	r3, r3, #3
 8011c9e:	b2da      	uxtb	r2, r3
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	1c59      	adds	r1, r3, #1
 8011ca4:	6079      	str	r1, [r7, #4]
 8011ca6:	3230      	adds	r2, #48	; 0x30
 8011ca8:	b2d2      	uxtb	r2, r2
 8011caa:	701a      	strb	r2, [r3, #0]
 8011cac:	78fa      	ldrb	r2, [r7, #3]
 8011cae:	4b0e      	ldr	r3, [pc, #56]	; (8011ce8 <u8ToDec3+0x8c>)
 8011cb0:	fba3 1302 	umull	r1, r3, r3, r2
 8011cb4:	08d9      	lsrs	r1, r3, #3
 8011cb6:	460b      	mov	r3, r1
 8011cb8:	009b      	lsls	r3, r3, #2
 8011cba:	440b      	add	r3, r1
 8011cbc:	005b      	lsls	r3, r3, #1
 8011cbe:	1ad3      	subs	r3, r2, r3
 8011cc0:	70fb      	strb	r3, [r7, #3]
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	1c5a      	adds	r2, r3, #1
 8011cc6:	607a      	str	r2, [r7, #4]
 8011cc8:	78fa      	ldrb	r2, [r7, #3]
 8011cca:	3230      	adds	r2, #48	; 0x30
 8011ccc:	b2d2      	uxtb	r2, r2
 8011cce:	701a      	strb	r2, [r3, #0]
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	2200      	movs	r2, #0
 8011cd4:	701a      	strb	r2, [r3, #0]
 8011cd6:	bf00      	nop
 8011cd8:	370c      	adds	r7, #12
 8011cda:	46bd      	mov	sp, r7
 8011cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce0:	4770      	bx	lr
 8011ce2:	bf00      	nop
 8011ce4:	51eb851f 	.word	0x51eb851f
 8011ce8:	cccccccd 	.word	0xcccccccd

08011cec <memset16>:
 8011cec:	b480      	push	{r7}
 8011cee:	b083      	sub	sp, #12
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	6078      	str	r0, [r7, #4]
 8011cf4:	460b      	mov	r3, r1
 8011cf6:	807b      	strh	r3, [r7, #2]
 8011cf8:	4613      	mov	r3, r2
 8011cfa:	803b      	strh	r3, [r7, #0]
 8011cfc:	e00a      	b.n	8011d14 <memset16+0x28>
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	1c9a      	adds	r2, r3, #2
 8011d02:	607a      	str	r2, [r7, #4]
 8011d04:	887a      	ldrh	r2, [r7, #2]
 8011d06:	801a      	strh	r2, [r3, #0]
 8011d08:	f9b7 3000 	ldrsh.w	r3, [r7]
 8011d0c:	b29b      	uxth	r3, r3
 8011d0e:	3b01      	subs	r3, #1
 8011d10:	b29b      	uxth	r3, r3
 8011d12:	803b      	strh	r3, [r7, #0]
 8011d14:	f9b7 3000 	ldrsh.w	r3, [r7]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d1f0      	bne.n	8011cfe <memset16+0x12>
 8011d1c:	bf00      	nop
 8011d1e:	bf00      	nop
 8011d20:	370c      	adds	r7, #12
 8011d22:	46bd      	mov	sp, r7
 8011d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d28:	4770      	bx	lr
	...

08011d2c <Value2Str>:
 8011d2c:	b580      	push	{r7, lr}
 8011d2e:	b088      	sub	sp, #32
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	60f8      	str	r0, [r7, #12]
 8011d34:	60b9      	str	r1, [r7, #8]
 8011d36:	607a      	str	r2, [r7, #4]
 8011d38:	70fb      	strb	r3, [r7, #3]
 8011d3a:	2300      	movs	r3, #0
 8011d3c:	83fb      	strh	r3, [r7, #30]
 8011d3e:	68bb      	ldr	r3, [r7, #8]
 8011d40:	61bb      	str	r3, [r7, #24]
 8011d42:	2305      	movs	r3, #5
 8011d44:	617b      	str	r3, [r7, #20]
 8011d46:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d129      	bne.n	8011da2 <Value2Str+0x76>
 8011d4e:	68bb      	ldr	r3, [r7, #8]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d104      	bne.n	8011d5e <Value2Str+0x32>
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	1c5a      	adds	r2, r3, #1
 8011d58:	60fa      	str	r2, [r7, #12]
 8011d5a:	2220      	movs	r2, #32
 8011d5c:	701a      	strb	r2, [r3, #0]
 8011d5e:	68bb      	ldr	r3, [r7, #8]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	dd04      	ble.n	8011d6e <Value2Str+0x42>
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	1c5a      	adds	r2, r3, #1
 8011d68:	60fa      	str	r2, [r7, #12]
 8011d6a:	222b      	movs	r2, #43	; 0x2b
 8011d6c:	701a      	strb	r2, [r3, #0]
 8011d6e:	68bb      	ldr	r3, [r7, #8]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	da16      	bge.n	8011da2 <Value2Str+0x76>
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	1c5a      	adds	r2, r3, #1
 8011d78:	60fa      	str	r2, [r7, #12]
 8011d7a:	222d      	movs	r2, #45	; 0x2d
 8011d7c:	701a      	strb	r2, [r3, #0]
 8011d7e:	68bb      	ldr	r3, [r7, #8]
 8011d80:	425b      	negs	r3, r3
 8011d82:	60bb      	str	r3, [r7, #8]
 8011d84:	e00d      	b.n	8011da2 <Value2Str+0x76>
 8011d86:	69bb      	ldr	r3, [r7, #24]
 8011d88:	4a64      	ldr	r2, [pc, #400]	; (8011f1c <Value2Str+0x1f0>)
 8011d8a:	fb82 1203 	smull	r1, r2, r2, r3
 8011d8e:	1092      	asrs	r2, r2, #2
 8011d90:	17db      	asrs	r3, r3, #31
 8011d92:	1ad3      	subs	r3, r2, r3
 8011d94:	61bb      	str	r3, [r7, #24]
 8011d96:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011d9a:	b29b      	uxth	r3, r3
 8011d9c:	3301      	adds	r3, #1
 8011d9e:	b29b      	uxth	r3, r3
 8011da0:	83fb      	strh	r3, [r7, #30]
 8011da2:	69bb      	ldr	r3, [r7, #24]
 8011da4:	2b09      	cmp	r3, #9
 8011da6:	dcee      	bgt.n	8011d86 <Value2Str+0x5a>
 8011da8:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011dac:	4b5c      	ldr	r3, [pc, #368]	; (8011f20 <Value2Str+0x1f4>)
 8011dae:	fb83 3102 	smull	r3, r1, r3, r2
 8011db2:	17d3      	asrs	r3, r2, #31
 8011db4:	1ac9      	subs	r1, r1, r3
 8011db6:	460b      	mov	r3, r1
 8011db8:	005b      	lsls	r3, r3, #1
 8011dba:	440b      	add	r3, r1
 8011dbc:	1ad3      	subs	r3, r2, r3
 8011dbe:	b21b      	sxth	r3, r3
 8011dc0:	2b02      	cmp	r3, #2
 8011dc2:	d105      	bne.n	8011dd0 <Value2Str+0xa4>
 8011dc4:	78fb      	ldrb	r3, [r7, #3]
 8011dc6:	2b02      	cmp	r3, #2
 8011dc8:	d102      	bne.n	8011dd0 <Value2Str+0xa4>
 8011dca:	78fb      	ldrb	r3, [r7, #3]
 8011dcc:	3301      	adds	r3, #1
 8011dce:	70fb      	strb	r3, [r7, #3]
 8011dd0:	68bb      	ldr	r3, [r7, #8]
 8011dd2:	61bb      	str	r3, [r7, #24]
 8011dd4:	2300      	movs	r3, #0
 8011dd6:	83fb      	strh	r3, [r7, #30]
 8011dd8:	e016      	b.n	8011e08 <Value2Str+0xdc>
 8011dda:	69bb      	ldr	r3, [r7, #24]
 8011ddc:	4a4f      	ldr	r2, [pc, #316]	; (8011f1c <Value2Str+0x1f0>)
 8011dde:	fb82 1203 	smull	r1, r2, r2, r3
 8011de2:	1092      	asrs	r2, r2, #2
 8011de4:	17db      	asrs	r3, r3, #31
 8011de6:	1ad3      	subs	r3, r2, r3
 8011de8:	61bb      	str	r3, [r7, #24]
 8011dea:	8bfb      	ldrh	r3, [r7, #30]
 8011dec:	3301      	adds	r3, #1
 8011dee:	b29b      	uxth	r3, r3
 8011df0:	83fb      	strh	r3, [r7, #30]
 8011df2:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011df6:	78fb      	ldrb	r3, [r7, #3]
 8011df8:	429a      	cmp	r2, r3
 8011dfa:	dd05      	ble.n	8011e08 <Value2Str+0xdc>
 8011dfc:	697a      	ldr	r2, [r7, #20]
 8011dfe:	4613      	mov	r3, r2
 8011e00:	009b      	lsls	r3, r3, #2
 8011e02:	4413      	add	r3, r2
 8011e04:	005b      	lsls	r3, r3, #1
 8011e06:	617b      	str	r3, [r7, #20]
 8011e08:	69bb      	ldr	r3, [r7, #24]
 8011e0a:	2b09      	cmp	r3, #9
 8011e0c:	dce5      	bgt.n	8011dda <Value2Str+0xae>
 8011e0e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011e12:	78fb      	ldrb	r3, [r7, #3]
 8011e14:	429a      	cmp	r2, r3
 8011e16:	db03      	blt.n	8011e20 <Value2Str+0xf4>
 8011e18:	68ba      	ldr	r2, [r7, #8]
 8011e1a:	697b      	ldr	r3, [r7, #20]
 8011e1c:	4413      	add	r3, r2
 8011e1e:	60bb      	str	r3, [r7, #8]
 8011e20:	68bb      	ldr	r3, [r7, #8]
 8011e22:	61bb      	str	r3, [r7, #24]
 8011e24:	2300      	movs	r3, #0
 8011e26:	83fb      	strh	r3, [r7, #30]
 8011e28:	e00d      	b.n	8011e46 <Value2Str+0x11a>
 8011e2a:	69bb      	ldr	r3, [r7, #24]
 8011e2c:	4a3b      	ldr	r2, [pc, #236]	; (8011f1c <Value2Str+0x1f0>)
 8011e2e:	fb82 1203 	smull	r1, r2, r2, r3
 8011e32:	1092      	asrs	r2, r2, #2
 8011e34:	17db      	asrs	r3, r3, #31
 8011e36:	1ad3      	subs	r3, r2, r3
 8011e38:	61bb      	str	r3, [r7, #24]
 8011e3a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011e3e:	b29b      	uxth	r3, r3
 8011e40:	3301      	adds	r3, #1
 8011e42:	b29b      	uxth	r3, r3
 8011e44:	83fb      	strh	r3, [r7, #30]
 8011e46:	69bb      	ldr	r3, [r7, #24]
 8011e48:	2b09      	cmp	r3, #9
 8011e4a:	dcee      	bgt.n	8011e2a <Value2Str+0xfe>
 8011e4c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011e50:	4a33      	ldr	r2, [pc, #204]	; (8011f20 <Value2Str+0x1f4>)
 8011e52:	fb82 1203 	smull	r1, r2, r2, r3
 8011e56:	17db      	asrs	r3, r3, #31
 8011e58:	1ad3      	subs	r3, r2, r3
 8011e5a:	b21b      	sxth	r3, r3
 8011e5c:	61bb      	str	r3, [r7, #24]
 8011e5e:	e03e      	b.n	8011ede <Value2Str+0x1b2>
 8011e60:	8bfb      	ldrh	r3, [r7, #30]
 8011e62:	b2db      	uxtb	r3, r3
 8011e64:	4618      	mov	r0, r3
 8011e66:	f000 f85d 	bl	8011f24 <Exp>
 8011e6a:	4602      	mov	r2, r0
 8011e6c:	68bb      	ldr	r3, [r7, #8]
 8011e6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8011e72:	b2da      	uxtb	r2, r3
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	1c59      	adds	r1, r3, #1
 8011e78:	60f9      	str	r1, [r7, #12]
 8011e7a:	3230      	adds	r2, #48	; 0x30
 8011e7c:	b2d2      	uxtb	r2, r2
 8011e7e:	701a      	strb	r2, [r3, #0]
 8011e80:	78fb      	ldrb	r3, [r7, #3]
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d012      	beq.n	8011eac <Value2Str+0x180>
 8011e86:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011e8a:	4b25      	ldr	r3, [pc, #148]	; (8011f20 <Value2Str+0x1f4>)
 8011e8c:	fb83 3102 	smull	r3, r1, r3, r2
 8011e90:	17d3      	asrs	r3, r2, #31
 8011e92:	1ac9      	subs	r1, r1, r3
 8011e94:	460b      	mov	r3, r1
 8011e96:	005b      	lsls	r3, r3, #1
 8011e98:	440b      	add	r3, r1
 8011e9a:	1ad3      	subs	r3, r2, r3
 8011e9c:	b21b      	sxth	r3, r3
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d104      	bne.n	8011eac <Value2Str+0x180>
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	1c5a      	adds	r2, r3, #1
 8011ea6:	60fa      	str	r2, [r7, #12]
 8011ea8:	222e      	movs	r2, #46	; 0x2e
 8011eaa:	701a      	strb	r2, [r3, #0]
 8011eac:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	db0c      	blt.n	8011ece <Value2Str+0x1a2>
 8011eb4:	8bfb      	ldrh	r3, [r7, #30]
 8011eb6:	b2db      	uxtb	r3, r3
 8011eb8:	4618      	mov	r0, r3
 8011eba:	f000 f833 	bl	8011f24 <Exp>
 8011ebe:	4602      	mov	r2, r0
 8011ec0:	68bb      	ldr	r3, [r7, #8]
 8011ec2:	fb93 f1f2 	sdiv	r1, r3, r2
 8011ec6:	fb02 f201 	mul.w	r2, r2, r1
 8011eca:	1a9b      	subs	r3, r3, r2
 8011ecc:	e000      	b.n	8011ed0 <Value2Str+0x1a4>
 8011ece:	2300      	movs	r3, #0
 8011ed0:	60bb      	str	r3, [r7, #8]
 8011ed2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011ed6:	b29b      	uxth	r3, r3
 8011ed8:	3b01      	subs	r3, #1
 8011eda:	b29b      	uxth	r3, r3
 8011edc:	83fb      	strh	r3, [r7, #30]
 8011ede:	78fb      	ldrb	r3, [r7, #3]
 8011ee0:	1e5a      	subs	r2, r3, #1
 8011ee2:	70fa      	strb	r2, [r7, #3]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d1bb      	bne.n	8011e60 <Value2Str+0x134>
 8011ee8:	69ba      	ldr	r2, [r7, #24]
 8011eea:	4613      	mov	r3, r2
 8011eec:	005b      	lsls	r3, r3, #1
 8011eee:	4413      	add	r3, r2
 8011ef0:	005b      	lsls	r3, r3, #1
 8011ef2:	461a      	mov	r2, r3
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	4413      	add	r3, r2
 8011ef8:	607b      	str	r3, [r7, #4]
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	1c5a      	adds	r2, r3, #1
 8011efe:	60fa      	str	r2, [r7, #12]
 8011f00:	687a      	ldr	r2, [r7, #4]
 8011f02:	7812      	ldrb	r2, [r2, #0]
 8011f04:	701a      	strb	r2, [r3, #0]
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	1c5a      	adds	r2, r3, #1
 8011f0a:	607a      	str	r2, [r7, #4]
 8011f0c:	781b      	ldrb	r3, [r3, #0]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d1f3      	bne.n	8011efa <Value2Str+0x1ce>
 8011f12:	bf00      	nop
 8011f14:	bf00      	nop
 8011f16:	3720      	adds	r7, #32
 8011f18:	46bd      	mov	sp, r7
 8011f1a:	bd80      	pop	{r7, pc}
 8011f1c:	66666667 	.word	0x66666667
 8011f20:	55555556 	.word	0x55555556

08011f24 <Exp>:
 8011f24:	b480      	push	{r7}
 8011f26:	b085      	sub	sp, #20
 8011f28:	af00      	add	r7, sp, #0
 8011f2a:	4603      	mov	r3, r0
 8011f2c:	71fb      	strb	r3, [r7, #7]
 8011f2e:	2301      	movs	r3, #1
 8011f30:	60fb      	str	r3, [r7, #12]
 8011f32:	e005      	b.n	8011f40 <Exp+0x1c>
 8011f34:	68fa      	ldr	r2, [r7, #12]
 8011f36:	4613      	mov	r3, r2
 8011f38:	009b      	lsls	r3, r3, #2
 8011f3a:	4413      	add	r3, r2
 8011f3c:	005b      	lsls	r3, r3, #1
 8011f3e:	60fb      	str	r3, [r7, #12]
 8011f40:	79fb      	ldrb	r3, [r7, #7]
 8011f42:	1e5a      	subs	r2, r3, #1
 8011f44:	71fa      	strb	r2, [r7, #7]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d1f4      	bne.n	8011f34 <Exp+0x10>
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	3714      	adds	r7, #20
 8011f50:	46bd      	mov	sp, r7
 8011f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f56:	4770      	bx	lr

08011f58 <Sqrt32>:
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b084      	sub	sp, #16
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d101      	bne.n	8011f6a <Sqrt32+0x12>
 8011f66:	2300      	movs	r3, #0
 8011f68:	e019      	b.n	8011f9e <Sqrt32+0x46>
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	da00      	bge.n	8011f72 <Sqrt32+0x1a>
 8011f70:	3303      	adds	r3, #3
 8011f72:	109b      	asrs	r3, r3, #2
 8011f74:	4618      	mov	r0, r3
 8011f76:	f7ff ffef 	bl	8011f58 <Sqrt32>
 8011f7a:	4603      	mov	r3, r0
 8011f7c:	005b      	lsls	r3, r3, #1
 8011f7e:	3301      	adds	r3, #1
 8011f80:	60fb      	str	r3, [r7, #12]
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	fb03 f303 	mul.w	r3, r3, r3
 8011f88:	687a      	ldr	r2, [r7, #4]
 8011f8a:	429a      	cmp	r2, r3
 8011f8c:	da05      	bge.n	8011f9a <Sqrt32+0x42>
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	b29b      	uxth	r3, r3
 8011f92:	3b01      	subs	r3, #1
 8011f94:	b29b      	uxth	r3, r3
 8011f96:	b21b      	sxth	r3, r3
 8011f98:	e001      	b.n	8011f9e <Sqrt32+0x46>
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	b21b      	sxth	r3, r3
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	3710      	adds	r7, #16
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	bd80      	pop	{r7, pc}
	...

08011fa8 <u16ToDec4Str>:
 8011fa8:	b480      	push	{r7}
 8011faa:	b083      	sub	sp, #12
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	6078      	str	r0, [r7, #4]
 8011fb0:	460b      	mov	r3, r1
 8011fb2:	807b      	strh	r3, [r7, #2]
 8011fb4:	887b      	ldrh	r3, [r7, #2]
 8011fb6:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8011fba:	330f      	adds	r3, #15
 8011fbc:	b29b      	uxth	r3, r3
 8011fbe:	f644 621e 	movw	r2, #19998	; 0x4e1e
 8011fc2:	4293      	cmp	r3, r2
 8011fc4:	d917      	bls.n	8011ff6 <u16ToDec4Str+0x4e>
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	1c5a      	adds	r2, r3, #1
 8011fca:	607a      	str	r2, [r7, #4]
 8011fcc:	224f      	movs	r2, #79	; 0x4f
 8011fce:	701a      	strb	r2, [r3, #0]
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	1c5a      	adds	r2, r3, #1
 8011fd4:	607a      	str	r2, [r7, #4]
 8011fd6:	2276      	movs	r2, #118	; 0x76
 8011fd8:	701a      	strb	r2, [r3, #0]
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	1c5a      	adds	r2, r3, #1
 8011fde:	607a      	str	r2, [r7, #4]
 8011fe0:	2265      	movs	r2, #101	; 0x65
 8011fe2:	701a      	strb	r2, [r3, #0]
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	1c5a      	adds	r2, r3, #1
 8011fe8:	607a      	str	r2, [r7, #4]
 8011fea:	2272      	movs	r2, #114	; 0x72
 8011fec:	701a      	strb	r2, [r3, #0]
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	2200      	movs	r2, #0
 8011ff2:	701a      	strb	r2, [r3, #0]
 8011ff4:	e07e      	b.n	80120f4 <u16ToDec4Str+0x14c>
 8011ff6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011ffa:	4a41      	ldr	r2, [pc, #260]	; (8012100 <u16ToDec4Str+0x158>)
 8011ffc:	fb82 1203 	smull	r1, r2, r2, r3
 8012000:	1192      	asrs	r2, r2, #6
 8012002:	17db      	asrs	r3, r3, #31
 8012004:	1ad3      	subs	r3, r2, r3
 8012006:	b21b      	sxth	r3, r3
 8012008:	b2da      	uxtb	r2, r3
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	1c59      	adds	r1, r3, #1
 801200e:	6079      	str	r1, [r7, #4]
 8012010:	3230      	adds	r2, #48	; 0x30
 8012012:	b2d2      	uxtb	r2, r2
 8012014:	701a      	strb	r2, [r3, #0]
 8012016:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801201a:	4a39      	ldr	r2, [pc, #228]	; (8012100 <u16ToDec4Str+0x158>)
 801201c:	fb82 1203 	smull	r1, r2, r2, r3
 8012020:	1191      	asrs	r1, r2, #6
 8012022:	17da      	asrs	r2, r3, #31
 8012024:	1a8a      	subs	r2, r1, r2
 8012026:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801202a:	fb01 f202 	mul.w	r2, r1, r2
 801202e:	1a9b      	subs	r3, r3, r2
 8012030:	807b      	strh	r3, [r7, #2]
 8012032:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012036:	4a33      	ldr	r2, [pc, #204]	; (8012104 <u16ToDec4Str+0x15c>)
 8012038:	fb82 1203 	smull	r1, r2, r2, r3
 801203c:	1152      	asrs	r2, r2, #5
 801203e:	17db      	asrs	r3, r3, #31
 8012040:	1ad3      	subs	r3, r2, r3
 8012042:	b21b      	sxth	r3, r3
 8012044:	b2da      	uxtb	r2, r3
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	1c59      	adds	r1, r3, #1
 801204a:	6079      	str	r1, [r7, #4]
 801204c:	3230      	adds	r2, #48	; 0x30
 801204e:	b2d2      	uxtb	r2, r2
 8012050:	701a      	strb	r2, [r3, #0]
 8012052:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012056:	4a2b      	ldr	r2, [pc, #172]	; (8012104 <u16ToDec4Str+0x15c>)
 8012058:	fb82 1203 	smull	r1, r2, r2, r3
 801205c:	1151      	asrs	r1, r2, #5
 801205e:	17da      	asrs	r2, r3, #31
 8012060:	1a8a      	subs	r2, r1, r2
 8012062:	2164      	movs	r1, #100	; 0x64
 8012064:	fb01 f202 	mul.w	r2, r1, r2
 8012068:	1a9b      	subs	r3, r3, r2
 801206a:	807b      	strh	r3, [r7, #2]
 801206c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012070:	4a25      	ldr	r2, [pc, #148]	; (8012108 <u16ToDec4Str+0x160>)
 8012072:	fb82 1203 	smull	r1, r2, r2, r3
 8012076:	1092      	asrs	r2, r2, #2
 8012078:	17db      	asrs	r3, r3, #31
 801207a:	1ad3      	subs	r3, r2, r3
 801207c:	b21b      	sxth	r3, r3
 801207e:	b2da      	uxtb	r2, r3
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	1c59      	adds	r1, r3, #1
 8012084:	6079      	str	r1, [r7, #4]
 8012086:	3230      	adds	r2, #48	; 0x30
 8012088:	b2d2      	uxtb	r2, r2
 801208a:	701a      	strb	r2, [r3, #0]
 801208c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012090:	4b1d      	ldr	r3, [pc, #116]	; (8012108 <u16ToDec4Str+0x160>)
 8012092:	fb83 1302 	smull	r1, r3, r3, r2
 8012096:	1099      	asrs	r1, r3, #2
 8012098:	17d3      	asrs	r3, r2, #31
 801209a:	1ac9      	subs	r1, r1, r3
 801209c:	460b      	mov	r3, r1
 801209e:	009b      	lsls	r3, r3, #2
 80120a0:	440b      	add	r3, r1
 80120a2:	005b      	lsls	r3, r3, #1
 80120a4:	1ad3      	subs	r3, r2, r3
 80120a6:	807b      	strh	r3, [r7, #2]
 80120a8:	887b      	ldrh	r3, [r7, #2]
 80120aa:	b2da      	uxtb	r2, r3
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	1c59      	adds	r1, r3, #1
 80120b0:	6079      	str	r1, [r7, #4]
 80120b2:	3230      	adds	r2, #48	; 0x30
 80120b4:	b2d2      	uxtb	r2, r2
 80120b6:	701a      	strb	r2, [r3, #0]
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	2200      	movs	r2, #0
 80120bc:	701a      	strb	r2, [r3, #0]
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	3b04      	subs	r3, #4
 80120c2:	781b      	ldrb	r3, [r3, #0]
 80120c4:	2b30      	cmp	r3, #48	; 0x30
 80120c6:	d115      	bne.n	80120f4 <u16ToDec4Str+0x14c>
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	3b04      	subs	r3, #4
 80120cc:	2220      	movs	r2, #32
 80120ce:	701a      	strb	r2, [r3, #0]
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	3b03      	subs	r3, #3
 80120d4:	781b      	ldrb	r3, [r3, #0]
 80120d6:	2b30      	cmp	r3, #48	; 0x30
 80120d8:	d10c      	bne.n	80120f4 <u16ToDec4Str+0x14c>
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	3b03      	subs	r3, #3
 80120de:	2220      	movs	r2, #32
 80120e0:	701a      	strb	r2, [r3, #0]
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	3b02      	subs	r3, #2
 80120e6:	781b      	ldrb	r3, [r3, #0]
 80120e8:	2b30      	cmp	r3, #48	; 0x30
 80120ea:	d103      	bne.n	80120f4 <u16ToDec4Str+0x14c>
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	3b02      	subs	r3, #2
 80120f0:	2220      	movs	r2, #32
 80120f2:	701a      	strb	r2, [r3, #0]
 80120f4:	370c      	adds	r7, #12
 80120f6:	46bd      	mov	sp, r7
 80120f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120fc:	4770      	bx	lr
 80120fe:	bf00      	nop
 8012100:	10624dd3 	.word	0x10624dd3
 8012104:	51eb851f 	.word	0x51eb851f
 8012108:	66666667 	.word	0x66666667

0801210c <lcd_write_cmd_data>:
#include "Func.h"

unsigned short data[15];

void lcd_write_cmd_data( unsigned short Cmd, short Len, unsigned short *Data )
{
 801210c:	b580      	push	{r7, lr}
 801210e:	b082      	sub	sp, #8
 8012110:	af00      	add	r7, sp, #0
 8012112:	4603      	mov	r3, r0
 8012114:	603a      	str	r2, [r7, #0]
 8012116:	80fb      	strh	r3, [r7, #6]
 8012118:	460b      	mov	r3, r1
 801211a:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( LcdRs_GPIO_Port, LcdRs_Pin, GPIO_PIN_RESET); // low for command
 801211c:	2200      	movs	r2, #0
 801211e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8012122:	480e      	ldr	r0, [pc, #56]	; (801215c <lcd_write_cmd_data+0x50>)
 8012124:	f007 ff10 	bl	8019f48 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (unsigned char*)&Cmd, 1, 1);// timeout 1 ms
 8012128:	1db9      	adds	r1, r7, #6
 801212a:	2301      	movs	r3, #1
 801212c:	2201      	movs	r2, #1
 801212e:	480c      	ldr	r0, [pc, #48]	; (8012160 <lcd_write_cmd_data+0x54>)
 8012130:	f00a fa0f 	bl	801c552 <HAL_SPI_Transmit>

	if(Len !=0)
 8012134:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d00b      	beq.n	8012154 <lcd_write_cmd_data+0x48>
	{
		HAL_GPIO_WritePin( LcdRs_GPIO_Port, LcdRs_Pin, GPIO_PIN_SET);  //high for data
 801213c:	2201      	movs	r2, #1
 801213e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8012142:	4806      	ldr	r0, [pc, #24]	; (801215c <lcd_write_cmd_data+0x50>)
 8012144:	f007 ff00 	bl	8019f48 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, (unsigned char*)Data, Len, 1);// timeout 1 ms
 8012148:	88ba      	ldrh	r2, [r7, #4]
 801214a:	2301      	movs	r3, #1
 801214c:	6839      	ldr	r1, [r7, #0]
 801214e:	4804      	ldr	r0, [pc, #16]	; (8012160 <lcd_write_cmd_data+0x54>)
 8012150:	f00a f9ff 	bl	801c552 <HAL_SPI_Transmit>
	}
}
 8012154:	bf00      	nop
 8012156:	3708      	adds	r7, #8
 8012158:	46bd      	mov	sp, r7
 801215a:	bd80      	pop	{r7, pc}
 801215c:	40020800 	.word	0x40020800
 8012160:	200069cc 	.word	0x200069cc

08012164 <Init_LCD>:

// initialize the LCD
void Init_LCD(void)
{
 8012164:	b580      	push	{r7, lr}
 8012166:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 8012168:	2200      	movs	r2, #0
 801216a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801216e:	4885      	ldr	r0, [pc, #532]	; (8012384 <Init_LCD+0x220>)
 8012170:	f007 feea 	bl	8019f48 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin( Dres_GPIO_Port, Dres_Pin, GPIO_PIN_SET);  //display reset
 8012174:	2201      	movs	r2, #1
 8012176:	f44f 7100 	mov.w	r1, #512	; 0x200
 801217a:	4883      	ldr	r0, [pc, #524]	; (8012388 <Init_LCD+0x224>)
 801217c:	f007 fee4 	bl	8019f48 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8012180:	2001      	movs	r0, #1
 8012182:	f006 fb03 	bl	801878c <HAL_Delay>
	HAL_GPIO_WritePin( Dres_GPIO_Port, Dres_Pin, GPIO_PIN_RESET);
 8012186:	2200      	movs	r2, #0
 8012188:	f44f 7100 	mov.w	r1, #512	; 0x200
 801218c:	487e      	ldr	r0, [pc, #504]	; (8012388 <Init_LCD+0x224>)
 801218e:	f007 fedb 	bl	8019f48 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8012192:	200a      	movs	r0, #10
 8012194:	f006 fafa 	bl	801878c <HAL_Delay>
	HAL_GPIO_WritePin( Dres_GPIO_Port, Dres_Pin, GPIO_PIN_SET);
 8012198:	2201      	movs	r2, #1
 801219a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801219e:	487a      	ldr	r0, [pc, #488]	; (8012388 <Init_LCD+0x224>)
 80121a0:	f007 fed2 	bl	8019f48 <HAL_GPIO_WritePin>
	HAL_Delay(120);
 80121a4:	2078      	movs	r0, #120	; 0x78
 80121a6:	f006 faf1 	bl	801878c <HAL_Delay>

	data[0]=0;
 80121aa:	4b78      	ldr	r3, [pc, #480]	; (801238c <Init_LCD+0x228>)
 80121ac:	2200      	movs	r2, #0
 80121ae:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0xb0, 1, data);  //set interface
 80121b0:	4a76      	ldr	r2, [pc, #472]	; (801238c <Init_LCD+0x228>)
 80121b2:	2101      	movs	r1, #1
 80121b4:	20b0      	movs	r0, #176	; 0xb0
 80121b6:	f7ff ffa9 	bl	801210c <lcd_write_cmd_data>
	lcd_write_cmd_data(0x11, 0, data);  //sleep
 80121ba:	4a74      	ldr	r2, [pc, #464]	; (801238c <Init_LCD+0x228>)
 80121bc:	2100      	movs	r1, #0
 80121be:	2011      	movs	r0, #17
 80121c0:	f7ff ffa4 	bl	801210c <lcd_write_cmd_data>
	HAL_Delay(120);
 80121c4:	2078      	movs	r0, #120	; 0x78
 80121c6:	f006 fae1 	bl	801878c <HAL_Delay>
	data[0]=0x55;
 80121ca:	4b70      	ldr	r3, [pc, #448]	; (801238c <Init_LCD+0x228>)
 80121cc:	2255      	movs	r2, #85	; 0x55
 80121ce:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0x3A, 1, data);  //set pixels to 16 bit
 80121d0:	4a6e      	ldr	r2, [pc, #440]	; (801238c <Init_LCD+0x228>)
 80121d2:	2101      	movs	r1, #1
 80121d4:	203a      	movs	r0, #58	; 0x3a
 80121d6:	f7ff ff99 	bl	801210c <lcd_write_cmd_data>
	data[0]=data[1]=9;
 80121da:	4b6c      	ldr	r3, [pc, #432]	; (801238c <Init_LCD+0x228>)
 80121dc:	2209      	movs	r2, #9
 80121de:	805a      	strh	r2, [r3, #2]
 80121e0:	4b6a      	ldr	r3, [pc, #424]	; (801238c <Init_LCD+0x228>)
 80121e2:	885a      	ldrh	r2, [r3, #2]
 80121e4:	4b69      	ldr	r3, [pc, #420]	; (801238c <Init_LCD+0x228>)
 80121e6:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0xc0, 2, data);  //set power
 80121e8:	4a68      	ldr	r2, [pc, #416]	; (801238c <Init_LCD+0x228>)
 80121ea:	2102      	movs	r1, #2
 80121ec:	20c0      	movs	r0, #192	; 0xc0
 80121ee:	f7ff ff8d 	bl	801210c <lcd_write_cmd_data>
	data[0]= 0x41;
 80121f2:	4b66      	ldr	r3, [pc, #408]	; (801238c <Init_LCD+0x228>)
 80121f4:	2241      	movs	r2, #65	; 0x41
 80121f6:	801a      	strh	r2, [r3, #0]
	data[1]=0;
 80121f8:	4b64      	ldr	r3, [pc, #400]	; (801238c <Init_LCD+0x228>)
 80121fa:	2200      	movs	r2, #0
 80121fc:	805a      	strh	r2, [r3, #2]
	lcd_write_cmd_data(0xc1, 2, data);  //set power
 80121fe:	4a63      	ldr	r2, [pc, #396]	; (801238c <Init_LCD+0x228>)
 8012200:	2102      	movs	r1, #2
 8012202:	20c1      	movs	r0, #193	; 0xc1
 8012204:	f7ff ff82 	bl	801210c <lcd_write_cmd_data>
	data[0]= 0x33;
 8012208:	4b60      	ldr	r3, [pc, #384]	; (801238c <Init_LCD+0x228>)
 801220a:	2233      	movs	r2, #51	; 0x33
 801220c:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0xc2, 1, data);  //set power
 801220e:	4a5f      	ldr	r2, [pc, #380]	; (801238c <Init_LCD+0x228>)
 8012210:	2101      	movs	r1, #1
 8012212:	20c2      	movs	r0, #194	; 0xc2
 8012214:	f7ff ff7a 	bl	801210c <lcd_write_cmd_data>
	data[0]=data[1]=0;
 8012218:	4b5c      	ldr	r3, [pc, #368]	; (801238c <Init_LCD+0x228>)
 801221a:	2200      	movs	r2, #0
 801221c:	805a      	strh	r2, [r3, #2]
 801221e:	4b5b      	ldr	r3, [pc, #364]	; (801238c <Init_LCD+0x228>)
 8012220:	885a      	ldrh	r2, [r3, #2]
 8012222:	4b5a      	ldr	r3, [pc, #360]	; (801238c <Init_LCD+0x228>)
 8012224:	801a      	strh	r2, [r3, #0]
	data[2]=data[3]=0;  //#3 may be 0x36
 8012226:	4b59      	ldr	r3, [pc, #356]	; (801238c <Init_LCD+0x228>)
 8012228:	2200      	movs	r2, #0
 801222a:	80da      	strh	r2, [r3, #6]
 801222c:	4b57      	ldr	r3, [pc, #348]	; (801238c <Init_LCD+0x228>)
 801222e:	88da      	ldrh	r2, [r3, #6]
 8012230:	4b56      	ldr	r3, [pc, #344]	; (801238c <Init_LCD+0x228>)
 8012232:	809a      	strh	r2, [r3, #4]
	lcd_write_cmd_data(0xc5, 4, data);  //Vcom control
 8012234:	4a55      	ldr	r2, [pc, #340]	; (801238c <Init_LCD+0x228>)
 8012236:	2104      	movs	r1, #4
 8012238:	20c5      	movs	r0, #197	; 0xc5
 801223a:	f7ff ff67 	bl	801210c <lcd_write_cmd_data>

	data[0]=  0;
 801223e:	4b53      	ldr	r3, [pc, #332]	; (801238c <Init_LCD+0x228>)
 8012240:	2200      	movs	r2, #0
 8012242:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0x36, 1, data);  //madctl
 8012244:	4a51      	ldr	r2, [pc, #324]	; (801238c <Init_LCD+0x228>)
 8012246:	2101      	movs	r1, #1
 8012248:	2036      	movs	r0, #54	; 0x36
 801224a:	f7ff ff5f 	bl	801210c <lcd_write_cmd_data>
	 Digital Gamma Control 1
	-1, 0xE2, 0x0F, 0x32, 0x2E, 0x0B, 0x0D, 0x05, 0x47, 0x75,
	          0x37, 0x06, 0x10, 0x03, 0x24, 0x20, 0x00,
    SPI_TRANSFER(0xE0 Positive Gamma Control, 0x00, 0x2C, 0x2C, 0x0B, 0x0C, 0x04, 0x4C, 0x64, 0x36, 0x03, 0x0E, 0x01, 0x10, 0x01, 0x00);
    SPI_TRANSFER(0xE1 Negative Gamma Control, 0x0F, 0x37, 0x37, 0x0C, 0x0F, 0x05, 0x50, 0x32, 0x36, 0x04, 0x0B, 0x00, 0x19, 0x14, 0x0F); */
	data[0]=data[14]=  0;
 801224e:	4b4f      	ldr	r3, [pc, #316]	; (801238c <Init_LCD+0x228>)
 8012250:	2200      	movs	r2, #0
 8012252:	839a      	strh	r2, [r3, #28]
 8012254:	4b4d      	ldr	r3, [pc, #308]	; (801238c <Init_LCD+0x228>)
 8012256:	8b9a      	ldrh	r2, [r3, #28]
 8012258:	4b4c      	ldr	r3, [pc, #304]	; (801238c <Init_LCD+0x228>)
 801225a:	801a      	strh	r2, [r3, #0]
	data[1]=data[2]=   0x2C;
 801225c:	4b4b      	ldr	r3, [pc, #300]	; (801238c <Init_LCD+0x228>)
 801225e:	222c      	movs	r2, #44	; 0x2c
 8012260:	809a      	strh	r2, [r3, #4]
 8012262:	4b4a      	ldr	r3, [pc, #296]	; (801238c <Init_LCD+0x228>)
 8012264:	889a      	ldrh	r2, [r3, #4]
 8012266:	4b49      	ldr	r3, [pc, #292]	; (801238c <Init_LCD+0x228>)
 8012268:	805a      	strh	r2, [r3, #2]
	data[3]=  0x0B;
 801226a:	4b48      	ldr	r3, [pc, #288]	; (801238c <Init_LCD+0x228>)
 801226c:	220b      	movs	r2, #11
 801226e:	80da      	strh	r2, [r3, #6]
	data[4]=  0x0C;
 8012270:	4b46      	ldr	r3, [pc, #280]	; (801238c <Init_LCD+0x228>)
 8012272:	220c      	movs	r2, #12
 8012274:	811a      	strh	r2, [r3, #8]
	data[5]=  0x04;
 8012276:	4b45      	ldr	r3, [pc, #276]	; (801238c <Init_LCD+0x228>)
 8012278:	2204      	movs	r2, #4
 801227a:	815a      	strh	r2, [r3, #10]
	data[6]=  0x4C;
 801227c:	4b43      	ldr	r3, [pc, #268]	; (801238c <Init_LCD+0x228>)
 801227e:	224c      	movs	r2, #76	; 0x4c
 8012280:	819a      	strh	r2, [r3, #12]
	data[7]=  0x64;
 8012282:	4b42      	ldr	r3, [pc, #264]	; (801238c <Init_LCD+0x228>)
 8012284:	2264      	movs	r2, #100	; 0x64
 8012286:	81da      	strh	r2, [r3, #14]
	data[8]=  0x36;
 8012288:	4b40      	ldr	r3, [pc, #256]	; (801238c <Init_LCD+0x228>)
 801228a:	2236      	movs	r2, #54	; 0x36
 801228c:	821a      	strh	r2, [r3, #16]
	data[9]=  0x03;
 801228e:	4b3f      	ldr	r3, [pc, #252]	; (801238c <Init_LCD+0x228>)
 8012290:	2203      	movs	r2, #3
 8012292:	825a      	strh	r2, [r3, #18]
	data[10]= 0x0E;
 8012294:	4b3d      	ldr	r3, [pc, #244]	; (801238c <Init_LCD+0x228>)
 8012296:	220e      	movs	r2, #14
 8012298:	829a      	strh	r2, [r3, #20]
	data[11]=data[13]= 0x2C;
 801229a:	4b3c      	ldr	r3, [pc, #240]	; (801238c <Init_LCD+0x228>)
 801229c:	222c      	movs	r2, #44	; 0x2c
 801229e:	835a      	strh	r2, [r3, #26]
 80122a0:	4b3a      	ldr	r3, [pc, #232]	; (801238c <Init_LCD+0x228>)
 80122a2:	8b5a      	ldrh	r2, [r3, #26]
 80122a4:	4b39      	ldr	r3, [pc, #228]	; (801238c <Init_LCD+0x228>)
 80122a6:	82da      	strh	r2, [r3, #22]
	data[12]= 0x10;
 80122a8:	4b38      	ldr	r3, [pc, #224]	; (801238c <Init_LCD+0x228>)
 80122aa:	2210      	movs	r2, #16
 80122ac:	831a      	strh	r2, [r3, #24]
	lcd_write_cmd_data(0xe0, 15, data);  //positive gamma control
 80122ae:	4a37      	ldr	r2, [pc, #220]	; (801238c <Init_LCD+0x228>)
 80122b0:	210f      	movs	r1, #15
 80122b2:	20e0      	movs	r0, #224	; 0xe0
 80122b4:	f7ff ff2a 	bl	801210c <lcd_write_cmd_data>

	data[0]=data[4]= data[14]= 0x0F;
 80122b8:	4b34      	ldr	r3, [pc, #208]	; (801238c <Init_LCD+0x228>)
 80122ba:	220f      	movs	r2, #15
 80122bc:	839a      	strh	r2, [r3, #28]
 80122be:	4b33      	ldr	r3, [pc, #204]	; (801238c <Init_LCD+0x228>)
 80122c0:	8b9a      	ldrh	r2, [r3, #28]
 80122c2:	4b32      	ldr	r3, [pc, #200]	; (801238c <Init_LCD+0x228>)
 80122c4:	811a      	strh	r2, [r3, #8]
 80122c6:	4b31      	ldr	r3, [pc, #196]	; (801238c <Init_LCD+0x228>)
 80122c8:	891a      	ldrh	r2, [r3, #8]
 80122ca:	4b30      	ldr	r3, [pc, #192]	; (801238c <Init_LCD+0x228>)
 80122cc:	801a      	strh	r2, [r3, #0]
	data[1]=data[2]= 0x37;
 80122ce:	4b2f      	ldr	r3, [pc, #188]	; (801238c <Init_LCD+0x228>)
 80122d0:	2237      	movs	r2, #55	; 0x37
 80122d2:	809a      	strh	r2, [r3, #4]
 80122d4:	4b2d      	ldr	r3, [pc, #180]	; (801238c <Init_LCD+0x228>)
 80122d6:	889a      	ldrh	r2, [r3, #4]
 80122d8:	4b2c      	ldr	r3, [pc, #176]	; (801238c <Init_LCD+0x228>)
 80122da:	805a      	strh	r2, [r3, #2]
	data[3]=  0x0C;
 80122dc:	4b2b      	ldr	r3, [pc, #172]	; (801238c <Init_LCD+0x228>)
 80122de:	220c      	movs	r2, #12
 80122e0:	80da      	strh	r2, [r3, #6]
	data[5]=  0x05;
 80122e2:	4b2a      	ldr	r3, [pc, #168]	; (801238c <Init_LCD+0x228>)
 80122e4:	2205      	movs	r2, #5
 80122e6:	815a      	strh	r2, [r3, #10]
	data[6]=  0x50;
 80122e8:	4b28      	ldr	r3, [pc, #160]	; (801238c <Init_LCD+0x228>)
 80122ea:	2250      	movs	r2, #80	; 0x50
 80122ec:	819a      	strh	r2, [r3, #12]
	data[7]=  0x32;
 80122ee:	4b27      	ldr	r3, [pc, #156]	; (801238c <Init_LCD+0x228>)
 80122f0:	2232      	movs	r2, #50	; 0x32
 80122f2:	81da      	strh	r2, [r3, #14]
	data[8]=  0x36;
 80122f4:	4b25      	ldr	r3, [pc, #148]	; (801238c <Init_LCD+0x228>)
 80122f6:	2236      	movs	r2, #54	; 0x36
 80122f8:	821a      	strh	r2, [r3, #16]
	data[9]=  0x04;
 80122fa:	4b24      	ldr	r3, [pc, #144]	; (801238c <Init_LCD+0x228>)
 80122fc:	2204      	movs	r2, #4
 80122fe:	825a      	strh	r2, [r3, #18]
	data[10]= 0x0B;
 8012300:	4b22      	ldr	r3, [pc, #136]	; (801238c <Init_LCD+0x228>)
 8012302:	220b      	movs	r2, #11
 8012304:	829a      	strh	r2, [r3, #20]
	data[11]= 0;
 8012306:	4b21      	ldr	r3, [pc, #132]	; (801238c <Init_LCD+0x228>)
 8012308:	2200      	movs	r2, #0
 801230a:	82da      	strh	r2, [r3, #22]
	data[12]= 0x19;
 801230c:	4b1f      	ldr	r3, [pc, #124]	; (801238c <Init_LCD+0x228>)
 801230e:	2219      	movs	r2, #25
 8012310:	831a      	strh	r2, [r3, #24]
	data[13]= 0x14;
 8012312:	4b1e      	ldr	r3, [pc, #120]	; (801238c <Init_LCD+0x228>)
 8012314:	2214      	movs	r2, #20
 8012316:	835a      	strh	r2, [r3, #26]
	lcd_write_cmd_data(0xe1, 15, data);  //Negitive gamma control
 8012318:	4a1c      	ldr	r2, [pc, #112]	; (801238c <Init_LCD+0x228>)
 801231a:	210f      	movs	r1, #15
 801231c:	20e1      	movs	r0, #225	; 0xe1
 801231e:	f7ff fef5 	bl	801210c <lcd_write_cmd_data>

//	SPI_TRANSFER(0xB6/*Display Function Control*/, 0, /*ISC=2*/2, /*Display Height h=*/59); // Actual display height = (h+1)*8 so (59+1)*8=480
	data[0]=0;
 8012322:	4b1a      	ldr	r3, [pc, #104]	; (801238c <Init_LCD+0x228>)
 8012324:	2200      	movs	r2, #0
 8012326:	801a      	strh	r2, [r3, #0]
	data[1]=2;
 8012328:	4b18      	ldr	r3, [pc, #96]	; (801238c <Init_LCD+0x228>)
 801232a:	2202      	movs	r2, #2
 801232c:	805a      	strh	r2, [r3, #2]
	data[2]=59;
 801232e:	4b17      	ldr	r3, [pc, #92]	; (801238c <Init_LCD+0x228>)
 8012330:	223b      	movs	r2, #59	; 0x3b
 8012332:	809a      	strh	r2, [r3, #4]
	lcd_write_cmd_data(0xb6, 3, data);  //display function control
 8012334:	4a15      	ldr	r2, [pc, #84]	; (801238c <Init_LCD+0x228>)
 8012336:	2103      	movs	r1, #3
 8012338:	20b6      	movs	r0, #182	; 0xb6
 801233a:	f7ff fee7 	bl	801210c <lcd_write_cmd_data>

	lcd_write_cmd_data(0x11, 0, data);  //sleep
 801233e:	4a13      	ldr	r2, [pc, #76]	; (801238c <Init_LCD+0x228>)
 8012340:	2100      	movs	r1, #0
 8012342:	2011      	movs	r0, #17
 8012344:	f7ff fee2 	bl	801210c <lcd_write_cmd_data>
	HAL_Delay(120);
 8012348:	2078      	movs	r0, #120	; 0x78
 801234a:	f006 fa1f 	bl	801878c <HAL_Delay>
	lcd_write_cmd_data(0x29, 0, data);  //display on
 801234e:	4a0f      	ldr	r2, [pc, #60]	; (801238c <Init_LCD+0x228>)
 8012350:	2100      	movs	r1, #0
 8012352:	2029      	movs	r0, #41	; 0x29
 8012354:	f7ff feda 	bl	801210c <lcd_write_cmd_data>
	lcd_write_cmd_data(0x38, 0, data);  //idle off
 8012358:	4a0c      	ldr	r2, [pc, #48]	; (801238c <Init_LCD+0x228>)
 801235a:	2100      	movs	r1, #0
 801235c:	2038      	movs	r0, #56	; 0x38
 801235e:	f7ff fed5 	bl	801210c <lcd_write_cmd_data>
	lcd_write_cmd_data(0x13, 0, data);  //Normal Display Mode ON
 8012362:	4a0a      	ldr	r2, [pc, #40]	; (801238c <Init_LCD+0x228>)
 8012364:	2100      	movs	r1, #0
 8012366:	2013      	movs	r0, #19
 8012368:	f7ff fed0 	bl	801210c <lcd_write_cmd_data>

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);  //disable lcd controller
 801236c:	2201      	movs	r2, #1
 801236e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012372:	4804      	ldr	r0, [pc, #16]	; (8012384 <Init_LCD+0x220>)
 8012374:	f007 fde8 	bl	8019f48 <HAL_GPIO_WritePin>

	LCD_ClrScrn(0);  //clear screen to black
 8012378:	2000      	movs	r0, #0
 801237a:	f000 f809 	bl	8012390 <LCD_ClrScrn>
}
 801237e:	bf00      	nop
 8012380:	bd80      	pop	{r7, pc}
 8012382:	bf00      	nop
 8012384:	40020800 	.word	0x40020800
 8012388:	40020400 	.word	0x40020400
 801238c:	20002824 	.word	0x20002824

08012390 <LCD_ClrScrn>:

void LCD_ClrScrn(unsigned short Color)
{
 8012390:	b580      	push	{r7, lr}
 8012392:	b084      	sub	sp, #16
 8012394:	af00      	add	r7, sp, #0
 8012396:	4603      	mov	r3, r0
 8012398:	80fb      	strh	r3, [r7, #6]
short y;
unsigned short *ptr;

ptr = malloc(320*2);
 801239a:	f44f 7020 	mov.w	r0, #640	; 0x280
 801239e:	f010 fe0b 	bl	8022fb8 <malloc>
 80123a2:	4603      	mov	r3, r0
 80123a4:	60bb      	str	r3, [r7, #8]
HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 80123a6:	2200      	movs	r2, #0
 80123a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80123ac:	483d      	ldr	r0, [pc, #244]	; (80124a4 <LCD_ClrScrn+0x114>)
 80123ae:	f007 fdcb 	bl	8019f48 <HAL_GPIO_WritePin>

for(y=0; y<480; ++y )
 80123b2:	2300      	movs	r3, #0
 80123b4:	81fb      	strh	r3, [r7, #14]
 80123b6:	e03c      	b.n	8012432 <LCD_ClrScrn+0xa2>
{
	data[0]=data[1]= 0;
 80123b8:	4b3b      	ldr	r3, [pc, #236]	; (80124a8 <LCD_ClrScrn+0x118>)
 80123ba:	2200      	movs	r2, #0
 80123bc:	805a      	strh	r2, [r3, #2]
 80123be:	4b3a      	ldr	r3, [pc, #232]	; (80124a8 <LCD_ClrScrn+0x118>)
 80123c0:	885a      	ldrh	r2, [r3, #2]
 80123c2:	4b39      	ldr	r3, [pc, #228]	; (80124a8 <LCD_ClrScrn+0x118>)
 80123c4:	801a      	strh	r2, [r3, #0]
	data[2]= 319>>8;
 80123c6:	4b38      	ldr	r3, [pc, #224]	; (80124a8 <LCD_ClrScrn+0x118>)
 80123c8:	2201      	movs	r2, #1
 80123ca:	809a      	strh	r2, [r3, #4]
	data[3]= 319 & 0xFF;
 80123cc:	4b36      	ldr	r3, [pc, #216]	; (80124a8 <LCD_ClrScrn+0x118>)
 80123ce:	223f      	movs	r2, #63	; 0x3f
 80123d0:	80da      	strh	r2, [r3, #6]
	lcd_write_cmd_data(0x2A, 4, data);  //set x
 80123d2:	4a35      	ldr	r2, [pc, #212]	; (80124a8 <LCD_ClrScrn+0x118>)
 80123d4:	2104      	movs	r1, #4
 80123d6:	202a      	movs	r0, #42	; 0x2a
 80123d8:	f7ff fe98 	bl	801210c <lcd_write_cmd_data>
	data[0]= y>>8;
 80123dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80123e0:	121b      	asrs	r3, r3, #8
 80123e2:	b21b      	sxth	r3, r3
 80123e4:	b29a      	uxth	r2, r3
 80123e6:	4b30      	ldr	r3, [pc, #192]	; (80124a8 <LCD_ClrScrn+0x118>)
 80123e8:	801a      	strh	r2, [r3, #0]
	data[1]= y & 0xFF;
 80123ea:	89fb      	ldrh	r3, [r7, #14]
 80123ec:	b2db      	uxtb	r3, r3
 80123ee:	b29a      	uxth	r2, r3
 80123f0:	4b2d      	ldr	r3, [pc, #180]	; (80124a8 <LCD_ClrScrn+0x118>)
 80123f2:	805a      	strh	r2, [r3, #2]
	data[2]= 479>>8;
 80123f4:	4b2c      	ldr	r3, [pc, #176]	; (80124a8 <LCD_ClrScrn+0x118>)
 80123f6:	2201      	movs	r2, #1
 80123f8:	809a      	strh	r2, [r3, #4]
	data[3]= 479 & 0xFF;
 80123fa:	4b2b      	ldr	r3, [pc, #172]	; (80124a8 <LCD_ClrScrn+0x118>)
 80123fc:	22df      	movs	r2, #223	; 0xdf
 80123fe:	80da      	strh	r2, [r3, #6]
	lcd_write_cmd_data(0x2B, 4, data);  //set y
 8012400:	4a29      	ldr	r2, [pc, #164]	; (80124a8 <LCD_ClrScrn+0x118>)
 8012402:	2104      	movs	r1, #4
 8012404:	202b      	movs	r0, #43	; 0x2b
 8012406:	f7ff fe81 	bl	801210c <lcd_write_cmd_data>

	if(ptr != NULL)
 801240a:	68bb      	ldr	r3, [r7, #8]
 801240c:	2b00      	cmp	r3, #0
 801240e:	d016      	beq.n	801243e <LCD_ClrScrn+0xae>
	{
		memset16(ptr, Color, 320);
 8012410:	88fb      	ldrh	r3, [r7, #6]
 8012412:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8012416:	4619      	mov	r1, r3
 8012418:	68b8      	ldr	r0, [r7, #8]
 801241a:	f7ff fc67 	bl	8011cec <memset16>
		lcd_write_cmd_data(0x2C, 320, ptr);  //write out pixels
 801241e:	68ba      	ldr	r2, [r7, #8]
 8012420:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012424:	202c      	movs	r0, #44	; 0x2c
 8012426:	f7ff fe71 	bl	801210c <lcd_write_cmd_data>
for(y=0; y<480; ++y )
 801242a:	89fb      	ldrh	r3, [r7, #14]
 801242c:	3301      	adds	r3, #1
 801242e:	b29b      	uxth	r3, r3
 8012430:	81fb      	strh	r3, [r7, #14]
 8012432:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012436:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 801243a:	dbbd      	blt.n	80123b8 <LCD_ClrScrn+0x28>
 801243c:	e000      	b.n	8012440 <LCD_ClrScrn+0xb0>
	}
	else
		break; //bail out
 801243e:	bf00      	nop
}

free(ptr);
 8012440:	68b8      	ldr	r0, [r7, #8]
 8012442:	f010 fdc1 	bl	8022fc8 <free>

data[0]=data[1]= 0;
 8012446:	4b18      	ldr	r3, [pc, #96]	; (80124a8 <LCD_ClrScrn+0x118>)
 8012448:	2200      	movs	r2, #0
 801244a:	805a      	strh	r2, [r3, #2]
 801244c:	4b16      	ldr	r3, [pc, #88]	; (80124a8 <LCD_ClrScrn+0x118>)
 801244e:	885a      	ldrh	r2, [r3, #2]
 8012450:	4b15      	ldr	r3, [pc, #84]	; (80124a8 <LCD_ClrScrn+0x118>)
 8012452:	801a      	strh	r2, [r3, #0]
data[2]= 319>>8;
 8012454:	4b14      	ldr	r3, [pc, #80]	; (80124a8 <LCD_ClrScrn+0x118>)
 8012456:	2201      	movs	r2, #1
 8012458:	809a      	strh	r2, [r3, #4]
data[3]= 319 & 0xFF;
 801245a:	4b13      	ldr	r3, [pc, #76]	; (80124a8 <LCD_ClrScrn+0x118>)
 801245c:	223f      	movs	r2, #63	; 0x3f
 801245e:	80da      	strh	r2, [r3, #6]
lcd_write_cmd_data(0x2A, 4, data);  //set x
 8012460:	4a11      	ldr	r2, [pc, #68]	; (80124a8 <LCD_ClrScrn+0x118>)
 8012462:	2104      	movs	r1, #4
 8012464:	202a      	movs	r0, #42	; 0x2a
 8012466:	f7ff fe51 	bl	801210c <lcd_write_cmd_data>
data[0]=data[1]= 0;
 801246a:	4b0f      	ldr	r3, [pc, #60]	; (80124a8 <LCD_ClrScrn+0x118>)
 801246c:	2200      	movs	r2, #0
 801246e:	805a      	strh	r2, [r3, #2]
 8012470:	4b0d      	ldr	r3, [pc, #52]	; (80124a8 <LCD_ClrScrn+0x118>)
 8012472:	885a      	ldrh	r2, [r3, #2]
 8012474:	4b0c      	ldr	r3, [pc, #48]	; (80124a8 <LCD_ClrScrn+0x118>)
 8012476:	801a      	strh	r2, [r3, #0]
data[2]= 479>>8;
 8012478:	4b0b      	ldr	r3, [pc, #44]	; (80124a8 <LCD_ClrScrn+0x118>)
 801247a:	2201      	movs	r2, #1
 801247c:	809a      	strh	r2, [r3, #4]
data[3]= 479 & 0xFF;
 801247e:	4b0a      	ldr	r3, [pc, #40]	; (80124a8 <LCD_ClrScrn+0x118>)
 8012480:	22df      	movs	r2, #223	; 0xdf
 8012482:	80da      	strh	r2, [r3, #6]
lcd_write_cmd_data(0x2B, 4, data);  //set y
 8012484:	4a08      	ldr	r2, [pc, #32]	; (80124a8 <LCD_ClrScrn+0x118>)
 8012486:	2104      	movs	r1, #4
 8012488:	202b      	movs	r0, #43	; 0x2b
 801248a:	f7ff fe3f 	bl	801210c <lcd_write_cmd_data>

HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);  //disable lcd controller
 801248e:	2201      	movs	r2, #1
 8012490:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012494:	4803      	ldr	r0, [pc, #12]	; (80124a4 <LCD_ClrScrn+0x114>)
 8012496:	f007 fd57 	bl	8019f48 <HAL_GPIO_WritePin>

}
 801249a:	bf00      	nop
 801249c:	3710      	adds	r7, #16
 801249e:	46bd      	mov	sp, r7
 80124a0:	bd80      	pop	{r7, pc}
 80124a2:	bf00      	nop
 80124a4:	40020800 	.word	0x40020800
 80124a8:	20002824 	.word	0x20002824

080124ac <LCD_Set_Posi>:

void LCD_Set_Posi(short Sx, short Sy)
{
 80124ac:	b580      	push	{r7, lr}
 80124ae:	b082      	sub	sp, #8
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	4603      	mov	r3, r0
 80124b4:	460a      	mov	r2, r1
 80124b6:	80fb      	strh	r3, [r7, #6]
 80124b8:	4613      	mov	r3, r2
 80124ba:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 80124bc:	2200      	movs	r2, #0
 80124be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80124c2:	481f      	ldr	r0, [pc, #124]	; (8012540 <LCD_Set_Posi+0x94>)
 80124c4:	f007 fd40 	bl	8019f48 <HAL_GPIO_WritePin>

	data[0]= data[2]= Sx>>8;
 80124c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80124cc:	121b      	asrs	r3, r3, #8
 80124ce:	b21b      	sxth	r3, r3
 80124d0:	b29a      	uxth	r2, r3
 80124d2:	4b1c      	ldr	r3, [pc, #112]	; (8012544 <LCD_Set_Posi+0x98>)
 80124d4:	809a      	strh	r2, [r3, #4]
 80124d6:	4b1b      	ldr	r3, [pc, #108]	; (8012544 <LCD_Set_Posi+0x98>)
 80124d8:	889a      	ldrh	r2, [r3, #4]
 80124da:	4b1a      	ldr	r3, [pc, #104]	; (8012544 <LCD_Set_Posi+0x98>)
 80124dc:	801a      	strh	r2, [r3, #0]
	data[1]= data[3]= Sx & 0xFF;
 80124de:	88fb      	ldrh	r3, [r7, #6]
 80124e0:	b2db      	uxtb	r3, r3
 80124e2:	b29a      	uxth	r2, r3
 80124e4:	4b17      	ldr	r3, [pc, #92]	; (8012544 <LCD_Set_Posi+0x98>)
 80124e6:	80da      	strh	r2, [r3, #6]
 80124e8:	4b16      	ldr	r3, [pc, #88]	; (8012544 <LCD_Set_Posi+0x98>)
 80124ea:	88da      	ldrh	r2, [r3, #6]
 80124ec:	4b15      	ldr	r3, [pc, #84]	; (8012544 <LCD_Set_Posi+0x98>)
 80124ee:	805a      	strh	r2, [r3, #2]
	lcd_write_cmd_data(0x2A, 4, data);  //set x
 80124f0:	4a14      	ldr	r2, [pc, #80]	; (8012544 <LCD_Set_Posi+0x98>)
 80124f2:	2104      	movs	r1, #4
 80124f4:	202a      	movs	r0, #42	; 0x2a
 80124f6:	f7ff fe09 	bl	801210c <lcd_write_cmd_data>
	data[0]= data[1]= Sy>>8;
 80124fa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80124fe:	121b      	asrs	r3, r3, #8
 8012500:	b21b      	sxth	r3, r3
 8012502:	b29a      	uxth	r2, r3
 8012504:	4b0f      	ldr	r3, [pc, #60]	; (8012544 <LCD_Set_Posi+0x98>)
 8012506:	805a      	strh	r2, [r3, #2]
 8012508:	4b0e      	ldr	r3, [pc, #56]	; (8012544 <LCD_Set_Posi+0x98>)
 801250a:	885a      	ldrh	r2, [r3, #2]
 801250c:	4b0d      	ldr	r3, [pc, #52]	; (8012544 <LCD_Set_Posi+0x98>)
 801250e:	801a      	strh	r2, [r3, #0]
	data[2]= data[3]= Sy & 0xFF;
 8012510:	88bb      	ldrh	r3, [r7, #4]
 8012512:	b2db      	uxtb	r3, r3
 8012514:	b29a      	uxth	r2, r3
 8012516:	4b0b      	ldr	r3, [pc, #44]	; (8012544 <LCD_Set_Posi+0x98>)
 8012518:	80da      	strh	r2, [r3, #6]
 801251a:	4b0a      	ldr	r3, [pc, #40]	; (8012544 <LCD_Set_Posi+0x98>)
 801251c:	88da      	ldrh	r2, [r3, #6]
 801251e:	4b09      	ldr	r3, [pc, #36]	; (8012544 <LCD_Set_Posi+0x98>)
 8012520:	809a      	strh	r2, [r3, #4]
	lcd_write_cmd_data(0x2B, 4, data);  //set y
 8012522:	4a08      	ldr	r2, [pc, #32]	; (8012544 <LCD_Set_Posi+0x98>)
 8012524:	2104      	movs	r1, #4
 8012526:	202b      	movs	r0, #43	; 0x2b
 8012528:	f7ff fdf0 	bl	801210c <lcd_write_cmd_data>

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);    //disable lcd controller
 801252c:	2201      	movs	r2, #1
 801252e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012532:	4803      	ldr	r0, [pc, #12]	; (8012540 <LCD_Set_Posi+0x94>)
 8012534:	f007 fd08 	bl	8019f48 <HAL_GPIO_WritePin>
}
 8012538:	bf00      	nop
 801253a:	3708      	adds	r7, #8
 801253c:	46bd      	mov	sp, r7
 801253e:	bd80      	pop	{r7, pc}
 8012540:	40020800 	.word	0x40020800
 8012544:	20002824 	.word	0x20002824

08012548 <LCD_Set_Pixel>:

void LCD_Set_Pixel(unsigned short Color)
{
 8012548:	b580      	push	{r7, lr}
 801254a:	b082      	sub	sp, #8
 801254c:	af00      	add	r7, sp, #0
 801254e:	4603      	mov	r3, r0
 8012550:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 8012552:	2200      	movs	r2, #0
 8012554:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012558:	480d      	ldr	r0, [pc, #52]	; (8012590 <LCD_Set_Pixel+0x48>)
 801255a:	f007 fcf5 	bl	8019f48 <HAL_GPIO_WritePin>

	data[0]= Color>>8;
 801255e:	88fb      	ldrh	r3, [r7, #6]
 8012560:	0a1b      	lsrs	r3, r3, #8
 8012562:	b29a      	uxth	r2, r3
 8012564:	4b0b      	ldr	r3, [pc, #44]	; (8012594 <LCD_Set_Pixel+0x4c>)
 8012566:	801a      	strh	r2, [r3, #0]
	data[1]= Color & 0xFF;
 8012568:	88fb      	ldrh	r3, [r7, #6]
 801256a:	b2db      	uxtb	r3, r3
 801256c:	b29a      	uxth	r2, r3
 801256e:	4b09      	ldr	r3, [pc, #36]	; (8012594 <LCD_Set_Pixel+0x4c>)
 8012570:	805a      	strh	r2, [r3, #2]
	lcd_write_cmd_data(0x2C, 2, data);  //set pixel
 8012572:	4a08      	ldr	r2, [pc, #32]	; (8012594 <LCD_Set_Pixel+0x4c>)
 8012574:	2102      	movs	r1, #2
 8012576:	202c      	movs	r0, #44	; 0x2c
 8012578:	f7ff fdc8 	bl	801210c <lcd_write_cmd_data>
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);    //disable lcd controller
 801257c:	2201      	movs	r2, #1
 801257e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012582:	4803      	ldr	r0, [pc, #12]	; (8012590 <LCD_Set_Pixel+0x48>)
 8012584:	f007 fce0 	bl	8019f48 <HAL_GPIO_WritePin>
}
 8012588:	bf00      	nop
 801258a:	3708      	adds	r7, #8
 801258c:	46bd      	mov	sp, r7
 801258e:	bd80      	pop	{r7, pc}
 8012590:	40020800 	.word	0x40020800
 8012594:	20002824 	.word	0x20002824

08012598 <LCD_Get_Pixel>:

unsigned short LCD_Get_Pixel(void)
{
 8012598:	b580      	push	{r7, lr}
 801259a:	b082      	sub	sp, #8
 801259c:	af00      	add	r7, sp, #0
	short ret;
	unsigned short fred;

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 801259e:	2200      	movs	r2, #0
 80125a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80125a4:	4814      	ldr	r0, [pc, #80]	; (80125f8 <LCD_Get_Pixel+0x60>)
 80125a6:	f007 fccf 	bl	8019f48 <HAL_GPIO_WritePin>
	lcd_write_cmd_data(0x2E, 0, data);  //read data
 80125aa:	4a14      	ldr	r2, [pc, #80]	; (80125fc <LCD_Get_Pixel+0x64>)
 80125ac:	2100      	movs	r1, #0
 80125ae:	202e      	movs	r0, #46	; 0x2e
 80125b0:	f7ff fdac 	bl	801210c <lcd_write_cmd_data>

	ret = HAL_SPI_Receive(&hspi3, (unsigned char *)data, 2, 1);
 80125b4:	2301      	movs	r3, #1
 80125b6:	2202      	movs	r2, #2
 80125b8:	4910      	ldr	r1, [pc, #64]	; (80125fc <LCD_Get_Pixel+0x64>)
 80125ba:	4811      	ldr	r0, [pc, #68]	; (8012600 <LCD_Get_Pixel+0x68>)
 80125bc:	f00a f905 	bl	801c7ca <HAL_SPI_Receive>
 80125c0:	4603      	mov	r3, r0
 80125c2:	80fb      	strh	r3, [r7, #6]

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);    //disable lcd controller
 80125c4:	2201      	movs	r2, #1
 80125c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80125ca:	480b      	ldr	r0, [pc, #44]	; (80125f8 <LCD_Get_Pixel+0x60>)
 80125cc:	f007 fcbc 	bl	8019f48 <HAL_GPIO_WritePin>

	if( ret == HAL_OK )
 80125d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d10a      	bne.n	80125ee <LCD_Get_Pixel+0x56>
		{
		fred =data[0]<<8;
 80125d8:	4b08      	ldr	r3, [pc, #32]	; (80125fc <LCD_Get_Pixel+0x64>)
 80125da:	881b      	ldrh	r3, [r3, #0]
 80125dc:	021b      	lsls	r3, r3, #8
 80125de:	80bb      	strh	r3, [r7, #4]
		fred |= data[1];
 80125e0:	4b06      	ldr	r3, [pc, #24]	; (80125fc <LCD_Get_Pixel+0x64>)
 80125e2:	885a      	ldrh	r2, [r3, #2]
 80125e4:	88bb      	ldrh	r3, [r7, #4]
 80125e6:	4313      	orrs	r3, r2
 80125e8:	80bb      	strh	r3, [r7, #4]
		return (fred);
 80125ea:	88bb      	ldrh	r3, [r7, #4]
 80125ec:	e000      	b.n	80125f0 <LCD_Get_Pixel+0x58>
		}
	else
		return 0;
 80125ee:	2300      	movs	r3, #0

}
 80125f0:	4618      	mov	r0, r3
 80125f2:	3708      	adds	r7, #8
 80125f4:	46bd      	mov	sp, r7
 80125f6:	bd80      	pop	{r7, pc}
 80125f8:	40020800 	.word	0x40020800
 80125fc:	20002824 	.word	0x20002824
 8012600:	200069cc 	.word	0x200069cc

08012604 <Draw_4Point>:

/*******************************************************************************
Draw_4Point:
*******************************************************************************/
void Draw_4Point(short x, short y, char Str_Cnt, char High)
{
 8012604:	b590      	push	{r4, r7, lr}
 8012606:	b083      	sub	sp, #12
 8012608:	af00      	add	r7, sp, #0
 801260a:	4604      	mov	r4, r0
 801260c:	4608      	mov	r0, r1
 801260e:	4611      	mov	r1, r2
 8012610:	461a      	mov	r2, r3
 8012612:	4623      	mov	r3, r4
 8012614:	80fb      	strh	r3, [r7, #6]
 8012616:	4603      	mov	r3, r0
 8012618:	80bb      	strh	r3, [r7, #4]
 801261a:	460b      	mov	r3, r1
 801261c:	70fb      	strb	r3, [r7, #3]
 801261e:	4613      	mov	r3, r2
 8012620:	70bb      	strb	r3, [r7, #2]
  LCD_Set_Posi(x,y);
 8012622:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8012626:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801262a:	4611      	mov	r1, r2
 801262c:	4618      	mov	r0, r3
 801262e:	f7ff ff3d 	bl	80124ac <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 8012632:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012636:	f7ff ff87 	bl	8012548 <LCD_Set_Pixel>
  LCD_Set_Posi(x,y+High-1);
 801263a:	78bb      	ldrb	r3, [r7, #2]
 801263c:	b29a      	uxth	r2, r3
 801263e:	88bb      	ldrh	r3, [r7, #4]
 8012640:	4413      	add	r3, r2
 8012642:	b29b      	uxth	r3, r3
 8012644:	3b01      	subs	r3, #1
 8012646:	b29b      	uxth	r3, r3
 8012648:	b21a      	sxth	r2, r3
 801264a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801264e:	4611      	mov	r1, r2
 8012650:	4618      	mov	r0, r3
 8012652:	f7ff ff2b 	bl	80124ac <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 8012656:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801265a:	f7ff ff75 	bl	8012548 <LCD_Set_Pixel>
  LCD_Set_Posi(x+Str_Cnt*((High>10)? 8:6),y);
 801265e:	78fb      	ldrb	r3, [r7, #3]
 8012660:	b29b      	uxth	r3, r3
 8012662:	78ba      	ldrb	r2, [r7, #2]
 8012664:	2a0a      	cmp	r2, #10
 8012666:	d901      	bls.n	801266c <Draw_4Point+0x68>
 8012668:	2208      	movs	r2, #8
 801266a:	e000      	b.n	801266e <Draw_4Point+0x6a>
 801266c:	2206      	movs	r2, #6
 801266e:	fb12 f303 	smulbb	r3, r2, r3
 8012672:	b29a      	uxth	r2, r3
 8012674:	88fb      	ldrh	r3, [r7, #6]
 8012676:	4413      	add	r3, r2
 8012678:	b29b      	uxth	r3, r3
 801267a:	b21b      	sxth	r3, r3
 801267c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8012680:	4611      	mov	r1, r2
 8012682:	4618      	mov	r0, r3
 8012684:	f7ff ff12 	bl	80124ac <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 8012688:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801268c:	f7ff ff5c 	bl	8012548 <LCD_Set_Pixel>
  LCD_Set_Posi(x+Str_Cnt*((High>10)? 8:6),y+High-1);
 8012690:	78fb      	ldrb	r3, [r7, #3]
 8012692:	b29b      	uxth	r3, r3
 8012694:	78ba      	ldrb	r2, [r7, #2]
 8012696:	2a0a      	cmp	r2, #10
 8012698:	d901      	bls.n	801269e <Draw_4Point+0x9a>
 801269a:	2208      	movs	r2, #8
 801269c:	e000      	b.n	80126a0 <Draw_4Point+0x9c>
 801269e:	2206      	movs	r2, #6
 80126a0:	fb12 f303 	smulbb	r3, r2, r3
 80126a4:	b29a      	uxth	r2, r3
 80126a6:	88fb      	ldrh	r3, [r7, #6]
 80126a8:	4413      	add	r3, r2
 80126aa:	b29b      	uxth	r3, r3
 80126ac:	b218      	sxth	r0, r3
 80126ae:	78bb      	ldrb	r3, [r7, #2]
 80126b0:	b29a      	uxth	r2, r3
 80126b2:	88bb      	ldrh	r3, [r7, #4]
 80126b4:	4413      	add	r3, r2
 80126b6:	b29b      	uxth	r3, r3
 80126b8:	3b01      	subs	r3, #1
 80126ba:	b29b      	uxth	r3, r3
 80126bc:	b21b      	sxth	r3, r3
 80126be:	4619      	mov	r1, r3
 80126c0:	f7ff fef4 	bl	80124ac <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 80126c4:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80126c8:	f7ff ff3e 	bl	8012548 <LCD_Set_Pixel>
}
 80126cc:	bf00      	nop
 80126ce:	370c      	adds	r7, #12
 80126d0:	46bd      	mov	sp, r7
 80126d2:	bd90      	pop	{r4, r7, pc}

080126d4 <Update_Title>:

/*******************************************************************************
 Update_Item:
*******************************************************************************/
void Update_Title(void)
{
 80126d4:	b580      	push	{r7, lr}
 80126d6:	b082      	sub	sp, #8
 80126d8:	af00      	add	r7, sp, #0
  short i;

  for(i=0; i<8; i++)
 80126da:	2300      	movs	r3, #0
 80126dc:	80fb      	strh	r3, [r7, #6]
 80126de:	e03b      	b.n	8012758 <Update_Title+0x84>
  {
    SetColor(GRY, TCOLOR[i]);
 80126e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80126e4:	4a21      	ldr	r2, [pc, #132]	; (801276c <Update_Title+0x98>)
 80126e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80126ea:	4619      	mov	r1, r3
 80126ec:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80126f0:	f7fb fc2c 	bl	800df4c <SetColor>
    DispStr8x14(T_X-2, TITLE_Y[i], (Current == i)? INV : PRN, (char*)TSTR[i]);
 80126f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80126f8:	4a1d      	ldr	r2, [pc, #116]	; (8012770 <Update_Title+0x9c>)
 80126fa:	5cd3      	ldrb	r3, [r2, r3]
 80126fc:	b219      	sxth	r1, r3
 80126fe:	4b1d      	ldr	r3, [pc, #116]	; (8012774 <Update_Title+0xa0>)
 8012700:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012704:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012708:	429a      	cmp	r2, r3
 801270a:	bf0c      	ite	eq
 801270c:	2301      	moveq	r3, #1
 801270e:	2300      	movne	r3, #0
 8012710:	b2db      	uxtb	r3, r3
 8012712:	4618      	mov	r0, r3
 8012714:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012718:	009b      	lsls	r3, r3, #2
 801271a:	4a17      	ldr	r2, [pc, #92]	; (8012778 <Update_Title+0xa4>)
 801271c:	4413      	add	r3, r2
 801271e:	4602      	mov	r2, r0
 8012720:	f240 102f 	movw	r0, #303	; 0x12f
 8012724:	f7fb fbba 	bl	800de9c <DispStr8x14>
    if(Current == i)
 8012728:	4b12      	ldr	r3, [pc, #72]	; (8012774 <Update_Title+0xa0>)
 801272a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801272e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012732:	429a      	cmp	r2, r3
 8012734:	d10a      	bne.n	801274c <Update_Title+0x78>
    {
        Draw_4Point(T_X-2, TITLE_Y[i], 2, Font8x14_H);
 8012736:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801273a:	4a0d      	ldr	r2, [pc, #52]	; (8012770 <Update_Title+0x9c>)
 801273c:	5cd3      	ldrb	r3, [r2, r3]
 801273e:	b219      	sxth	r1, r3
 8012740:	230e      	movs	r3, #14
 8012742:	2202      	movs	r2, #2
 8012744:	f240 102f 	movw	r0, #303	; 0x12f
 8012748:	f7ff ff5c 	bl	8012604 <Draw_4Point>
  for(i=0; i<8; i++)
 801274c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012750:	b29b      	uxth	r3, r3
 8012752:	3301      	adds	r3, #1
 8012754:	b29b      	uxth	r3, r3
 8012756:	80fb      	strh	r3, [r7, #6]
 8012758:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801275c:	2b07      	cmp	r3, #7
 801275e:	ddbf      	ble.n	80126e0 <Update_Title+0xc>
    }
  }
}
 8012760:	bf00      	nop
 8012762:	bf00      	nop
 8012764:	3708      	adds	r7, #8
 8012766:	46bd      	mov	sp, r7
 8012768:	bd80      	pop	{r7, pc}
 801276a:	bf00      	nop
 801276c:	08001f08 	.word	0x08001f08
 8012770:	08001f38 	.word	0x08001f38
 8012774:	200007a6 	.word	0x200007a6
 8012778:	08001f18 	.word	0x08001f18

0801277c <Update_Blink>:

/*******************************************************************************
 Update_Blink:
*******************************************************************************/
void Update_Blink(void)
{
 801277c:	b590      	push	{r4, r7, lr}
 801277e:	b087      	sub	sp, #28
 8012780:	af02      	add	r7, sp, #8
  char* ptr;
  long Tmp;
  unsigned short i, Range = List[Y_RANGES].Val + 10*List[PROBEATT].Val;
 8012782:	4bbd      	ldr	r3, [pc, #756]	; (8012a78 <Update_Blink+0x2fc>)
 8012784:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012788:	b29a      	uxth	r2, r3
 801278a:	4bbb      	ldr	r3, [pc, #748]	; (8012a78 <Update_Blink+0x2fc>)
 801278c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8012790:	b29b      	uxth	r3, r3
 8012792:	4619      	mov	r1, r3
 8012794:	0089      	lsls	r1, r1, #2
 8012796:	440b      	add	r3, r1
 8012798:	005b      	lsls	r3, r3, #1
 801279a:	b29b      	uxth	r3, r3
 801279c:	4413      	add	r3, r2
 801279e:	81fb      	strh	r3, [r7, #14]

  i = MenuNow[Current];
 80127a0:	4bb6      	ldr	r3, [pc, #728]	; (8012a7c <Update_Blink+0x300>)
 80127a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80127a6:	461a      	mov	r2, r3
 80127a8:	4bb5      	ldr	r3, [pc, #724]	; (8012a80 <Update_Blink+0x304>)
 80127aa:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80127ae:	81bb      	strh	r3, [r7, #12]
  ptr = (char*)(List[i].PTR +(List[i].Val)*6);
 80127b0:	89bb      	ldrh	r3, [r7, #12]
 80127b2:	4ab1      	ldr	r2, [pc, #708]	; (8012a78 <Update_Blink+0x2fc>)
 80127b4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80127b8:	89bb      	ldrh	r3, [r7, #12]
 80127ba:	49af      	ldr	r1, [pc, #700]	; (8012a78 <Update_Blink+0x2fc>)
 80127bc:	00db      	lsls	r3, r3, #3
 80127be:	440b      	add	r3, r1
 80127c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80127c4:	4619      	mov	r1, r3
 80127c6:	460b      	mov	r3, r1
 80127c8:	005b      	lsls	r3, r3, #1
 80127ca:	440b      	add	r3, r1
 80127cc:	005b      	lsls	r3, r3, #1
 80127ce:	4413      	add	r3, r2
 80127d0:	60bb      	str	r3, [r7, #8]
  if(Blink == BLINK)
 80127d2:	4bac      	ldr	r3, [pc, #688]	; (8012a84 <Update_Blink+0x308>)
 80127d4:	781b      	ldrb	r3, [r3, #0]
 80127d6:	b2db      	uxtb	r3, r3
 80127d8:	2b01      	cmp	r3, #1
 80127da:	f040 86ca 	bne.w	8013572 <Update_Blink+0xdf6>
  {
    Blink = 0;
 80127de:	4ba9      	ldr	r3, [pc, #676]	; (8012a84 <Update_Blink+0x308>)
 80127e0:	2200      	movs	r2, #0
 80127e2:	701a      	strb	r2, [r3, #0]
    List[MenuNow[ME]].Flg |= UPD; //
 80127e4:	4ba6      	ldr	r3, [pc, #664]	; (8012a80 <Update_Blink+0x304>)
 80127e6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80127ea:	4aa3      	ldr	r2, [pc, #652]	; (8012a78 <Update_Blink+0x2fc>)
 80127ec:	00db      	lsls	r3, r3, #3
 80127ee:	4413      	add	r3, r2
 80127f0:	799b      	ldrb	r3, [r3, #6]
 80127f2:	4aa3      	ldr	r2, [pc, #652]	; (8012a80 <Update_Blink+0x304>)
 80127f4:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80127f8:	4610      	mov	r0, r2
 80127fa:	f043 0320 	orr.w	r3, r3, #32
 80127fe:	b2d9      	uxtb	r1, r3
 8012800:	4a9d      	ldr	r2, [pc, #628]	; (8012a78 <Update_Blink+0x2fc>)
 8012802:	00c3      	lsls	r3, r0, #3
 8012804:	4413      	add	r3, r2
 8012806:	460a      	mov	r2, r1
 8012808:	719a      	strb	r2, [r3, #6]
    switch(i)
 801280a:	89bb      	ldrh	r3, [r7, #12]
 801280c:	2b29      	cmp	r3, #41	; 0x29
 801280e:	f200 86aa 	bhi.w	8013566 <Update_Blink+0xdea>
 8012812:	a201      	add	r2, pc, #4	; (adr r2, 8012818 <Update_Blink+0x9c>)
 8012814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012818:	08012983 	.word	0x08012983
 801281c:	08012983 	.word	0x08012983
 8012820:	08012983 	.word	0x08012983
 8012824:	08012a17 	.word	0x08012a17
 8012828:	08012a49 	.word	0x08012a49
 801282c:	08012a49 	.word	0x08012a49
 8012830:	08012b7f 	.word	0x08012b7f
 8012834:	08012bdd 	.word	0x08012bdd
 8012838:	08012c35 	.word	0x08012c35
 801283c:	08012c67 	.word	0x08012c67
 8012840:	08012cd3 	.word	0x08012cd3
 8012844:	08012cd3 	.word	0x08012cd3
 8012848:	08012e35 	.word	0x08012e35
 801284c:	08012e8f 	.word	0x08012e8f
 8012850:	08012eed 	.word	0x08012eed
 8012854:	08012fbd 	.word	0x08012fbd
 8012858:	08012fe7 	.word	0x08012fe7
 801285c:	08012eed 	.word	0x08012eed
 8012860:	08013015 	.word	0x08013015
 8012864:	08013567 	.word	0x08013567
 8012868:	08013567 	.word	0x08013567
 801286c:	08013567 	.word	0x08013567
 8012870:	08013567 	.word	0x08013567
 8012874:	08013567 	.word	0x08013567
 8012878:	08013567 	.word	0x08013567
 801287c:	08013567 	.word	0x08013567
 8012880:	0801308d 	.word	0x0801308d
 8012884:	08013109 	.word	0x08013109
 8012888:	08013137 	.word	0x08013137
 801288c:	080128c1 	.word	0x080128c1
 8012890:	080128c1 	.word	0x080128c1
 8012894:	080128c1 	.word	0x080128c1
 8012898:	080128c1 	.word	0x080128c1
 801289c:	080128c1 	.word	0x080128c1
 80128a0:	080128c1 	.word	0x080128c1
 80128a4:	080128c1 	.word	0x080128c1
 80128a8:	080131b3 	.word	0x080131b3
 80128ac:	0801324d 	.word	0x0801324d
 80128b0:	08013311 	.word	0x08013311
 80128b4:	080133bf 	.word	0x080133bf
 80128b8:	08013459 	.word	0x08013459
 80128bc:	080134c7 	.word	0x080134c7
    case SAVE_BUF:
    case SAVE_CSV:
    case SAVE_SVG:
    case LOAD_DAT:
    case LOAD_BUF:
      SetColor(GRY, TCOLOR[FN]);
 80128c0:	f64f 4310 	movw	r3, #64528	; 0xfc10
 80128c4:	4619      	mov	r1, r3
 80128c6:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80128ca:	f7fb fb3f 	bl	800df4c <SetColor>
      u8ToDec3(NumStr, List[i].Val);
 80128ce:	89bb      	ldrh	r3, [r7, #12]
 80128d0:	4a69      	ldr	r2, [pc, #420]	; (8012a78 <Update_Blink+0x2fc>)
 80128d2:	00db      	lsls	r3, r3, #3
 80128d4:	4413      	add	r3, r2
 80128d6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80128da:	b2db      	uxtb	r3, r3
 80128dc:	4619      	mov	r1, r3
 80128de:	486a      	ldr	r0, [pc, #424]	; (8012a88 <Update_Blink+0x30c>)
 80128e0:	f7ff f9bc 	bl	8011c5c <u8ToDec3>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*11);
 80128e4:	4b69      	ldr	r3, [pc, #420]	; (8012a8c <Update_Blink+0x310>)
 80128e6:	781b      	ldrb	r3, [r3, #0]
 80128e8:	b2d8      	uxtb	r0, r3
 80128ea:	89bb      	ldrh	r3, [r7, #12]
 80128ec:	4a68      	ldr	r2, [pc, #416]	; (8012a90 <Update_Blink+0x314>)
 80128ee:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80128f2:	b29b      	uxth	r3, r3
 80128f4:	3b03      	subs	r3, #3
 80128f6:	b29b      	uxth	r3, r3
 80128f8:	b219      	sxth	r1, r3
 80128fa:	2342      	movs	r3, #66	; 0x42
 80128fc:	9301      	str	r3, [sp, #4]
 80128fe:	2300      	movs	r3, #0
 8012900:	9300      	str	r3, [sp, #0]
 8012902:	230b      	movs	r3, #11
 8012904:	2203      	movs	r2, #3
 8012906:	f7fb fc0f 	bl	800e128 <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, ((i > SAVE_SVG)? "Load" : "Save"));//0513
 801290a:	89bb      	ldrh	r3, [r7, #12]
 801290c:	4a60      	ldr	r2, [pc, #384]	; (8012a90 <Update_Blink+0x314>)
 801290e:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012912:	4b5e      	ldr	r3, [pc, #376]	; (8012a8c <Update_Blink+0x310>)
 8012914:	781b      	ldrb	r3, [r3, #0]
 8012916:	b2da      	uxtb	r2, r3
 8012918:	89bb      	ldrh	r3, [r7, #12]
 801291a:	2b21      	cmp	r3, #33	; 0x21
 801291c:	d901      	bls.n	8012922 <Update_Blink+0x1a6>
 801291e:	4b5d      	ldr	r3, [pc, #372]	; (8012a94 <Update_Blink+0x318>)
 8012920:	e000      	b.n	8012924 <Update_Blink+0x1a8>
 8012922:	4b5d      	ldr	r3, [pc, #372]	; (8012a98 <Update_Blink+0x31c>)
 8012924:	2103      	movs	r1, #3
 8012926:	f7fb fb29 	bl	800df7c <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, (char *)NumStr);
 801292a:	89bb      	ldrh	r3, [r7, #12]
 801292c:	4a58      	ldr	r2, [pc, #352]	; (8012a90 <Update_Blink+0x314>)
 801292e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012932:	b29b      	uxth	r3, r3
 8012934:	3318      	adds	r3, #24
 8012936:	b29b      	uxth	r3, r3
 8012938:	b218      	sxth	r0, r3
 801293a:	4b54      	ldr	r3, [pc, #336]	; (8012a8c <Update_Blink+0x310>)
 801293c:	781b      	ldrb	r3, [r3, #0]
 801293e:	b2da      	uxtb	r2, r3
 8012940:	4b51      	ldr	r3, [pc, #324]	; (8012a88 <Update_Blink+0x30c>)
 8012942:	2103      	movs	r1, #3
 8012944:	f7fb fb1a 	bl	800df7c <DispStr>
      DispStr(S_X[i]+42, LABLE_Y, Twink, (List[i].PTR +(i - SAVE_BMP)*6));
 8012948:	89bb      	ldrh	r3, [r7, #12]
 801294a:	4a51      	ldr	r2, [pc, #324]	; (8012a90 <Update_Blink+0x314>)
 801294c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012950:	b29b      	uxth	r3, r3
 8012952:	332a      	adds	r3, #42	; 0x2a
 8012954:	b29b      	uxth	r3, r3
 8012956:	b218      	sxth	r0, r3
 8012958:	4b4c      	ldr	r3, [pc, #304]	; (8012a8c <Update_Blink+0x310>)
 801295a:	781b      	ldrb	r3, [r3, #0]
 801295c:	b2dc      	uxtb	r4, r3
 801295e:	89bb      	ldrh	r3, [r7, #12]
 8012960:	4a45      	ldr	r2, [pc, #276]	; (8012a78 <Update_Blink+0x2fc>)
 8012962:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8012966:	89bb      	ldrh	r3, [r7, #12]
 8012968:	f1a3 021d 	sub.w	r2, r3, #29
 801296c:	4613      	mov	r3, r2
 801296e:	005b      	lsls	r3, r3, #1
 8012970:	4413      	add	r3, r2
 8012972:	005b      	lsls	r3, r3, #1
 8012974:	440b      	add	r3, r1
 8012976:	4622      	mov	r2, r4
 8012978:	2103      	movs	r1, #3
 801297a:	f7fb faff 	bl	800df7c <DispStr>
      break;
 801297e:	f000 bdf2 	b.w	8013566 <Update_Blink+0xdea>

    case Y_RANGES:
    case COUPLING:
    case PROBEATT:
      SetColor(GRY, TCOLOR[YN]);
 8012982:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8012986:	4619      	mov	r1, r3
 8012988:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801298c:	f7fb fade 	bl	800df4c <SetColor>
      Draw_Circle_D(Twink, S_X[Y_RANGES]-3, TITLE_Y_POS, 11, 0, 6*7);
 8012990:	4b3e      	ldr	r3, [pc, #248]	; (8012a8c <Update_Blink+0x310>)
 8012992:	781b      	ldrb	r3, [r3, #0]
 8012994:	b2d8      	uxtb	r0, r3
 8012996:	232f      	movs	r3, #47	; 0x2f
 8012998:	b29b      	uxth	r3, r3
 801299a:	3b03      	subs	r3, #3
 801299c:	b29b      	uxth	r3, r3
 801299e:	b219      	sxth	r1, r3
 80129a0:	232a      	movs	r3, #42	; 0x2a
 80129a2:	9301      	str	r3, [sp, #4]
 80129a4:	2300      	movs	r3, #0
 80129a6:	9300      	str	r3, [sp, #0]
 80129a8:	230b      	movs	r3, #11
 80129aa:	22e1      	movs	r2, #225	; 0xe1
 80129ac:	f7fb fbbc 	bl	800e128 <Draw_Circle_D>
      DispStr(S_X[Y_RANGES], TITLE_Y_POS, Twink, (List[Y_RANGES].PTR +(Range)*6));
 80129b0:	242f      	movs	r4, #47	; 0x2f
 80129b2:	4b36      	ldr	r3, [pc, #216]	; (8012a8c <Update_Blink+0x310>)
 80129b4:	781b      	ldrb	r3, [r3, #0]
 80129b6:	b2d8      	uxtb	r0, r3
 80129b8:	4b2f      	ldr	r3, [pc, #188]	; (8012a78 <Update_Blink+0x2fc>)
 80129ba:	6819      	ldr	r1, [r3, #0]
 80129bc:	89fa      	ldrh	r2, [r7, #14]
 80129be:	4613      	mov	r3, r2
 80129c0:	005b      	lsls	r3, r3, #1
 80129c2:	4413      	add	r3, r2
 80129c4:	005b      	lsls	r3, r3, #1
 80129c6:	440b      	add	r3, r1
 80129c8:	4602      	mov	r2, r0
 80129ca:	21e1      	movs	r1, #225	; 0xe1
 80129cc:	4620      	mov	r0, r4
 80129ce:	f7fb fad5 	bl	800df7c <DispStr>
      DispStr(S_X[COUPLING], TITLE_Y_POS, Twink, (List[COUPLING].PTR +(List[COUPLING].Val)*6));
 80129d2:	2047      	movs	r0, #71	; 0x47
 80129d4:	4b2d      	ldr	r3, [pc, #180]	; (8012a8c <Update_Blink+0x310>)
 80129d6:	781b      	ldrb	r3, [r3, #0]
 80129d8:	b2d9      	uxtb	r1, r3
 80129da:	4b27      	ldr	r3, [pc, #156]	; (8012a78 <Update_Blink+0x2fc>)
 80129dc:	689a      	ldr	r2, [r3, #8]
 80129de:	4b26      	ldr	r3, [pc, #152]	; (8012a78 <Update_Blink+0x2fc>)
 80129e0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80129e4:	461c      	mov	r4, r3
 80129e6:	4623      	mov	r3, r4
 80129e8:	005b      	lsls	r3, r3, #1
 80129ea:	4423      	add	r3, r4
 80129ec:	005b      	lsls	r3, r3, #1
 80129ee:	4413      	add	r3, r2
 80129f0:	460a      	mov	r2, r1
 80129f2:	21e1      	movs	r1, #225	; 0xe1
 80129f4:	f7fb fac2 	bl	800df7c <DispStr>
      DispStr10x14(S_X[PROBEATT], TITLE_Y_POS, PRN+SYMB,(List[PROBEATT].Val?("A"):("B")));
 80129f8:	2020      	movs	r0, #32
 80129fa:	4b1f      	ldr	r3, [pc, #124]	; (8012a78 <Update_Blink+0x2fc>)
 80129fc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d001      	beq.n	8012a08 <Update_Blink+0x28c>
 8012a04:	4b25      	ldr	r3, [pc, #148]	; (8012a9c <Update_Blink+0x320>)
 8012a06:	e000      	b.n	8012a0a <Update_Blink+0x28e>
 8012a08:	4b25      	ldr	r3, [pc, #148]	; (8012aa0 <Update_Blink+0x324>)
 8012a0a:	2210      	movs	r2, #16
 8012a0c:	21e1      	movs	r1, #225	; 0xe1
 8012a0e:	f7fb fd1d 	bl	800e44c <DispStr10x14>
      break;
 8012a12:	f000 bda8 	b.w	8013566 <Update_Blink+0xdea>

    case V0_POSI:
      if(Twink) ParamTab[P1F] |=  D_HID;
 8012a16:	4b1d      	ldr	r3, [pc, #116]	; (8012a8c <Update_Blink+0x310>)
 8012a18:	781b      	ldrb	r3, [r3, #0]
 8012a1a:	b2db      	uxtb	r3, r3
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d009      	beq.n	8012a34 <Update_Blink+0x2b8>
 8012a20:	4b20      	ldr	r3, [pc, #128]	; (8012aa4 <Update_Blink+0x328>)
 8012a22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012a26:	f043 0301 	orr.w	r3, r3, #1
 8012a2a:	b21a      	sxth	r2, r3
 8012a2c:	4b1d      	ldr	r3, [pc, #116]	; (8012aa4 <Update_Blink+0x328>)
 8012a2e:	801a      	strh	r2, [r3, #0]
      else      ParamTab[P1F] &= ~D_HID;
      break;
 8012a30:	f000 bd99 	b.w	8013566 <Update_Blink+0xdea>
      else      ParamTab[P1F] &= ~D_HID;
 8012a34:	4b1b      	ldr	r3, [pc, #108]	; (8012aa4 <Update_Blink+0x328>)
 8012a36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012a3a:	f023 0301 	bic.w	r3, r3, #1
 8012a3e:	b21a      	sxth	r2, r3
 8012a40:	4b18      	ldr	r3, [pc, #96]	; (8012aa4 <Update_Blink+0x328>)
 8012a42:	801a      	strh	r2, [r3, #0]
      break;
 8012a44:	f000 bd8f 	b.w	8013566 <Update_Blink+0xdea>

    case V1_POSI:
    case V2_POSI:
      Tmp = (i == V1_POSI)? V1F : V2F;
 8012a48:	89bb      	ldrh	r3, [r7, #12]
 8012a4a:	2b04      	cmp	r3, #4
 8012a4c:	d101      	bne.n	8012a52 <Update_Blink+0x2d6>
 8012a4e:	2305      	movs	r3, #5
 8012a50:	e000      	b.n	8012a54 <Update_Blink+0x2d8>
 8012a52:	2306      	movs	r3, #6
 8012a54:	607b      	str	r3, [r7, #4]
      if(Twink) ParamTab[Tmp] |=  D_HID;
 8012a56:	4b0d      	ldr	r3, [pc, #52]	; (8012a8c <Update_Blink+0x310>)
 8012a58:	781b      	ldrb	r3, [r3, #0]
 8012a5a:	b2db      	uxtb	r3, r3
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d023      	beq.n	8012aa8 <Update_Blink+0x32c>
 8012a60:	4a10      	ldr	r2, [pc, #64]	; (8012aa4 <Update_Blink+0x328>)
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012a68:	f043 0301 	orr.w	r3, r3, #1
 8012a6c:	b219      	sxth	r1, r3
 8012a6e:	4a0d      	ldr	r2, [pc, #52]	; (8012aa4 <Update_Blink+0x328>)
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8012a76:	e022      	b.n	8012abe <Update_Blink+0x342>
 8012a78:	2000029c 	.word	0x2000029c
 8012a7c:	200007a6 	.word	0x200007a6
 8012a80:	2000053c 	.word	0x2000053c
 8012a84:	20000a39 	.word	0x20000a39
 8012a88:	20002844 	.word	0x20002844
 8012a8c:	20000780 	.word	0x20000780
 8012a90:	0800215c 	.word	0x0800215c
 8012a94:	08000948 	.word	0x08000948
 8012a98:	08000950 	.word	0x08000950
 8012a9c:	08000958 	.word	0x08000958
 8012aa0:	0800095c 	.word	0x0800095c
 8012aa4:	20000144 	.word	0x20000144
      else      ParamTab[Tmp] &= ~D_HID;
 8012aa8:	4ab1      	ldr	r2, [pc, #708]	; (8012d70 <Update_Blink+0x5f4>)
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012ab0:	f023 0301 	bic.w	r3, r3, #1
 8012ab4:	b219      	sxth	r1, r3
 8012ab6:	4aae      	ldr	r2, [pc, #696]	; (8012d70 <Update_Blink+0x5f4>)
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      Tmp  =(ParamTab[V1x2]- ParamTab[V2x2])/2;         // V2 - V1 ��ֵ
 8012abe:	4bac      	ldr	r3, [pc, #688]	; (8012d70 <Update_Blink+0x5f4>)
 8012ac0:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8012ac4:	461a      	mov	r2, r3
 8012ac6:	4baa      	ldr	r3, [pc, #680]	; (8012d70 <Update_Blink+0x5f4>)
 8012ac8:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8012acc:	1ad3      	subs	r3, r2, r3
 8012ace:	0fda      	lsrs	r2, r3, #31
 8012ad0:	4413      	add	r3, r2
 8012ad2:	105b      	asrs	r3, r3, #1
 8012ad4:	607b      	str	r3, [r7, #4]
      Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8012ad6:	89fb      	ldrh	r3, [r7, #14]
 8012ad8:	4aa6      	ldr	r2, [pc, #664]	; (8012d74 <Update_Blink+0x5f8>)
 8012ada:	5cd3      	ldrb	r3, [r2, r3]
 8012adc:	461c      	mov	r4, r3
 8012ade:	89fb      	ldrh	r3, [r7, #14]
 8012ae0:	4aa5      	ldr	r2, [pc, #660]	; (8012d78 <Update_Blink+0x5fc>)
 8012ae2:	5cd3      	ldrb	r3, [r2, r3]
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	f7ff fa1d 	bl	8011f24 <Exp>
 8012aea:	4603      	mov	r3, r0
 8012aec:	fb03 f204 	mul.w	r2, r3, r4
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	fb02 f303 	mul.w	r3, r2, r3
 8012af6:	607b      	str	r3, [r7, #4]
      Value2Str(NumStr, Tmp, V[0], 3, UNSIGN);
 8012af8:	2301      	movs	r3, #1
 8012afa:	9300      	str	r3, [sp, #0]
 8012afc:	2303      	movs	r3, #3
 8012afe:	4a9f      	ldr	r2, [pc, #636]	; (8012d7c <Update_Blink+0x600>)
 8012b00:	6879      	ldr	r1, [r7, #4]
 8012b02:	489f      	ldr	r0, [pc, #636]	; (8012d80 <Update_Blink+0x604>)
 8012b04:	f7ff f912 	bl	8011d2c <Value2Str>
      SetColor(GRY, TCOLOR[YN]);
 8012b08:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8012b0c:	4619      	mov	r1, r3
 8012b0e:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012b12:	f7fb fa1b 	bl	800df4c <SetColor>
      Draw_Circle_D(Twink, S_X[V1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 8012b16:	4b9b      	ldr	r3, [pc, #620]	; (8012d84 <Update_Blink+0x608>)
 8012b18:	781b      	ldrb	r3, [r3, #0]
 8012b1a:	b2d8      	uxtb	r0, r3
 8012b1c:	2307      	movs	r3, #7
 8012b1e:	b29b      	uxth	r3, r3
 8012b20:	3b03      	subs	r3, #3
 8012b22:	b29b      	uxth	r3, r3
 8012b24:	b219      	sxth	r1, r3
 8012b26:	2336      	movs	r3, #54	; 0x36
 8012b28:	9301      	str	r3, [sp, #4]
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	9300      	str	r3, [sp, #0]
 8012b2e:	230b      	movs	r3, #11
 8012b30:	2203      	movs	r2, #3
 8012b32:	f7fb faf9 	bl	800e128 <Draw_Circle_D>
      DispStr(S_X[V1_POSI]+0*6, LABLE_Y, Twink+SYMB, "]");
 8012b36:	2007      	movs	r0, #7
 8012b38:	4b92      	ldr	r3, [pc, #584]	; (8012d84 <Update_Blink+0x608>)
 8012b3a:	781b      	ldrb	r3, [r3, #0]
 8012b3c:	b2db      	uxtb	r3, r3
 8012b3e:	3310      	adds	r3, #16
 8012b40:	b2da      	uxtb	r2, r3
 8012b42:	4b91      	ldr	r3, [pc, #580]	; (8012d88 <Update_Blink+0x60c>)
 8012b44:	2103      	movs	r1, #3
 8012b46:	f7fb fa19 	bl	800df7c <DispStr>
      DispStr(S_X[V1_POSI]+1*6, LABLE_Y, Twink,      "V:      ");
 8012b4a:	2307      	movs	r3, #7
 8012b4c:	b29b      	uxth	r3, r3
 8012b4e:	3306      	adds	r3, #6
 8012b50:	b29b      	uxth	r3, r3
 8012b52:	b218      	sxth	r0, r3
 8012b54:	4b8b      	ldr	r3, [pc, #556]	; (8012d84 <Update_Blink+0x608>)
 8012b56:	781b      	ldrb	r3, [r3, #0]
 8012b58:	b2da      	uxtb	r2, r3
 8012b5a:	4b8c      	ldr	r3, [pc, #560]	; (8012d8c <Update_Blink+0x610>)
 8012b5c:	2103      	movs	r1, #3
 8012b5e:	f7fb fa0d 	bl	800df7c <DispStr>
      DispStr(S_X[V1_POSI]+3*6, LABLE_Y, Twink, (char *)NumStr);
 8012b62:	2307      	movs	r3, #7
 8012b64:	b29b      	uxth	r3, r3
 8012b66:	3312      	adds	r3, #18
 8012b68:	b29b      	uxth	r3, r3
 8012b6a:	b218      	sxth	r0, r3
 8012b6c:	4b85      	ldr	r3, [pc, #532]	; (8012d84 <Update_Blink+0x608>)
 8012b6e:	781b      	ldrb	r3, [r3, #0]
 8012b70:	b2da      	uxtb	r2, r3
 8012b72:	4b83      	ldr	r3, [pc, #524]	; (8012d80 <Update_Blink+0x604>)
 8012b74:	2103      	movs	r1, #3
 8012b76:	f7fb fa01 	bl	800df7c <DispStr>
      break;
 8012b7a:	f000 bcf4 	b.w	8013566 <Update_Blink+0xdea>

    case YN_TYPE:
      if(Twink) ParamTab[V1F] |=  D_HID;
 8012b7e:	4b81      	ldr	r3, [pc, #516]	; (8012d84 <Update_Blink+0x608>)
 8012b80:	781b      	ldrb	r3, [r3, #0]
 8012b82:	b2db      	uxtb	r3, r3
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d008      	beq.n	8012b9a <Update_Blink+0x41e>
 8012b88:	4b79      	ldr	r3, [pc, #484]	; (8012d70 <Update_Blink+0x5f4>)
 8012b8a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8012b8e:	f043 0301 	orr.w	r3, r3, #1
 8012b92:	b21a      	sxth	r2, r3
 8012b94:	4b76      	ldr	r3, [pc, #472]	; (8012d70 <Update_Blink+0x5f4>)
 8012b96:	815a      	strh	r2, [r3, #10]
 8012b98:	e007      	b.n	8012baa <Update_Blink+0x42e>
      else      ParamTab[V1F] &= ~D_HID;
 8012b9a:	4b75      	ldr	r3, [pc, #468]	; (8012d70 <Update_Blink+0x5f4>)
 8012b9c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8012ba0:	f023 0301 	bic.w	r3, r3, #1
 8012ba4:	b21a      	sxth	r2, r3
 8012ba6:	4b72      	ldr	r3, [pc, #456]	; (8012d70 <Update_Blink+0x5f4>)
 8012ba8:	815a      	strh	r2, [r3, #10]
      if(Twink) ParamTab[V2F] |=  D_HID;
 8012baa:	4b76      	ldr	r3, [pc, #472]	; (8012d84 <Update_Blink+0x608>)
 8012bac:	781b      	ldrb	r3, [r3, #0]
 8012bae:	b2db      	uxtb	r3, r3
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d009      	beq.n	8012bc8 <Update_Blink+0x44c>
 8012bb4:	4b6e      	ldr	r3, [pc, #440]	; (8012d70 <Update_Blink+0x5f4>)
 8012bb6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012bba:	f043 0301 	orr.w	r3, r3, #1
 8012bbe:	b21a      	sxth	r2, r3
 8012bc0:	4b6b      	ldr	r3, [pc, #428]	; (8012d70 <Update_Blink+0x5f4>)
 8012bc2:	819a      	strh	r2, [r3, #12]
      else      ParamTab[V2F] &= ~D_HID;
      break;
 8012bc4:	f000 bccf 	b.w	8013566 <Update_Blink+0xdea>
      else      ParamTab[V2F] &= ~D_HID;
 8012bc8:	4b69      	ldr	r3, [pc, #420]	; (8012d70 <Update_Blink+0x5f4>)
 8012bca:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012bce:	f023 0301 	bic.w	r3, r3, #1
 8012bd2:	b21a      	sxth	r2, r3
 8012bd4:	4b66      	ldr	r3, [pc, #408]	; (8012d70 <Update_Blink+0x5f4>)
 8012bd6:	819a      	strh	r2, [r3, #12]
      break;
 8012bd8:	f000 bcc5 	b.w	8013566 <Update_Blink+0xdea>

    case TIM_BASE:
      SetColor(GRY, TCOLOR[XN]);
 8012bdc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8012be0:	4619      	mov	r1, r3
 8012be2:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012be6:	f7fb f9b1 	bl	800df4c <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 2, 6*5);
 8012bea:	4b66      	ldr	r3, [pc, #408]	; (8012d84 <Update_Blink+0x608>)
 8012bec:	781b      	ldrb	r3, [r3, #0]
 8012bee:	b2d8      	uxtb	r0, r3
 8012bf0:	89bb      	ldrh	r3, [r7, #12]
 8012bf2:	4a67      	ldr	r2, [pc, #412]	; (8012d90 <Update_Blink+0x614>)
 8012bf4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012bf8:	b29b      	uxth	r3, r3
 8012bfa:	3b03      	subs	r3, #3
 8012bfc:	b29b      	uxth	r3, r3
 8012bfe:	b219      	sxth	r1, r3
 8012c00:	231e      	movs	r3, #30
 8012c02:	9301      	str	r3, [sp, #4]
 8012c04:	2302      	movs	r3, #2
 8012c06:	9300      	str	r3, [sp, #0]
 8012c08:	230b      	movs	r3, #11
 8012c0a:	22e1      	movs	r2, #225	; 0xe1
 8012c0c:	f7fb fa8c 	bl	800e128 <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, TimeBase_Str[List[TIM_BASE].Val]);
 8012c10:	89bb      	ldrh	r3, [r7, #12]
 8012c12:	4a5f      	ldr	r2, [pc, #380]	; (8012d90 <Update_Blink+0x614>)
 8012c14:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012c18:	4b5a      	ldr	r3, [pc, #360]	; (8012d84 <Update_Blink+0x608>)
 8012c1a:	781b      	ldrb	r3, [r3, #0]
 8012c1c:	b2da      	uxtb	r2, r3
 8012c1e:	4b5d      	ldr	r3, [pc, #372]	; (8012d94 <Update_Blink+0x618>)
 8012c20:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012c24:	00db      	lsls	r3, r3, #3
 8012c26:	495c      	ldr	r1, [pc, #368]	; (8012d98 <Update_Blink+0x61c>)
 8012c28:	440b      	add	r3, r1
 8012c2a:	21e1      	movs	r1, #225	; 0xe1
 8012c2c:	f7fb f9a6 	bl	800df7c <DispStr>
      break;
 8012c30:	f000 bc99 	b.w	8013566 <Update_Blink+0xdea>

    case VIEWPOSI:
      if(Twink) ParamTab[T0F] |=  D_HID;
 8012c34:	4b53      	ldr	r3, [pc, #332]	; (8012d84 <Update_Blink+0x608>)
 8012c36:	781b      	ldrb	r3, [r3, #0]
 8012c38:	b2db      	uxtb	r3, r3
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d009      	beq.n	8012c52 <Update_Blink+0x4d6>
 8012c3e:	4b4c      	ldr	r3, [pc, #304]	; (8012d70 <Update_Blink+0x5f4>)
 8012c40:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012c44:	f043 0301 	orr.w	r3, r3, #1
 8012c48:	b21a      	sxth	r2, r3
 8012c4a:	4b49      	ldr	r3, [pc, #292]	; (8012d70 <Update_Blink+0x5f4>)
 8012c4c:	81da      	strh	r2, [r3, #14]
      else      ParamTab[T0F] &= ~D_HID;
      break;
 8012c4e:	f000 bc8a 	b.w	8013566 <Update_Blink+0xdea>
      else      ParamTab[T0F] &= ~D_HID;
 8012c52:	4b47      	ldr	r3, [pc, #284]	; (8012d70 <Update_Blink+0x5f4>)
 8012c54:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012c58:	f023 0301 	bic.w	r3, r3, #1
 8012c5c:	b21a      	sxth	r2, r3
 8012c5e:	4b44      	ldr	r3, [pc, #272]	; (8012d70 <Update_Blink+0x5f4>)
 8012c60:	81da      	strh	r2, [r3, #14]
      break;
 8012c62:	f000 bc80 	b.w	8013566 <Update_Blink+0xdea>

    case SMPL_DPTH:
      SetColor(GRY, TCOLOR[XN]);
 8012c66:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8012c6a:	4619      	mov	r1, r3
 8012c6c:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012c70:	f7fb f96c 	bl	800df4c <SetColor>
      Draw_Circle_D(Twink, S_X[SMPL_DPTH]-3, LABLE_Y, 11, 0, 6*11);
 8012c74:	4b43      	ldr	r3, [pc, #268]	; (8012d84 <Update_Blink+0x608>)
 8012c76:	781b      	ldrb	r3, [r3, #0]
 8012c78:	b2d8      	uxtb	r0, r3
 8012c7a:	23f8      	movs	r3, #248	; 0xf8
 8012c7c:	b29b      	uxth	r3, r3
 8012c7e:	3b03      	subs	r3, #3
 8012c80:	b29b      	uxth	r3, r3
 8012c82:	b219      	sxth	r1, r3
 8012c84:	2342      	movs	r3, #66	; 0x42
 8012c86:	9301      	str	r3, [sp, #4]
 8012c88:	2300      	movs	r3, #0
 8012c8a:	9300      	str	r3, [sp, #0]
 8012c8c:	230b      	movs	r3, #11
 8012c8e:	2203      	movs	r2, #3
 8012c90:	f7fb fa4a 	bl	800e128 <Draw_Circle_D>
      DispStr(S_X[SMPL_DPTH],    LABLE_Y,  Twink, "SmplDpth:  ");
 8012c94:	20f8      	movs	r0, #248	; 0xf8
 8012c96:	4b3b      	ldr	r3, [pc, #236]	; (8012d84 <Update_Blink+0x608>)
 8012c98:	781b      	ldrb	r3, [r3, #0]
 8012c9a:	b2da      	uxtb	r2, r3
 8012c9c:	4b3f      	ldr	r3, [pc, #252]	; (8012d9c <Update_Blink+0x620>)
 8012c9e:	2103      	movs	r1, #3
 8012ca0:	f7fb f96c 	bl	800df7c <DispStr>
      DispStr(S_X[SMPL_DPTH]+6*9, LABLE_Y,  Twink, (char *)&D[List[SMPL_DPTH].Val]);
 8012ca4:	23f8      	movs	r3, #248	; 0xf8
 8012ca6:	b29b      	uxth	r3, r3
 8012ca8:	3336      	adds	r3, #54	; 0x36
 8012caa:	b29b      	uxth	r3, r3
 8012cac:	b218      	sxth	r0, r3
 8012cae:	4b35      	ldr	r3, [pc, #212]	; (8012d84 <Update_Blink+0x608>)
 8012cb0:	781b      	ldrb	r3, [r3, #0]
 8012cb2:	b2da      	uxtb	r2, r3
 8012cb4:	4b37      	ldr	r3, [pc, #220]	; (8012d94 <Update_Blink+0x618>)
 8012cb6:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8012cba:	4619      	mov	r1, r3
 8012cbc:	460b      	mov	r3, r1
 8012cbe:	005b      	lsls	r3, r3, #1
 8012cc0:	440b      	add	r3, r1
 8012cc2:	005b      	lsls	r3, r3, #1
 8012cc4:	4936      	ldr	r1, [pc, #216]	; (8012da0 <Update_Blink+0x624>)
 8012cc6:	440b      	add	r3, r1
 8012cc8:	2103      	movs	r1, #3
 8012cca:	f7fb f957 	bl	800df7c <DispStr>
      break;
 8012cce:	f000 bc4a 	b.w	8013566 <Update_Blink+0xdea>

    case T1_POSI:
    case T2_POSI:
      Tmp = (i == T1_POSI)? T1F : T2F;
 8012cd2:	89bb      	ldrh	r3, [r7, #12]
 8012cd4:	2b0a      	cmp	r3, #10
 8012cd6:	d101      	bne.n	8012cdc <Update_Blink+0x560>
 8012cd8:	2308      	movs	r3, #8
 8012cda:	e000      	b.n	8012cde <Update_Blink+0x562>
 8012cdc:	2309      	movs	r3, #9
 8012cde:	607b      	str	r3, [r7, #4]
      if(Twink) ParamTab[Tmp] |=  D_HID;
 8012ce0:	4b28      	ldr	r3, [pc, #160]	; (8012d84 <Update_Blink+0x608>)
 8012ce2:	781b      	ldrb	r3, [r3, #0]
 8012ce4:	b2db      	uxtb	r3, r3
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d00b      	beq.n	8012d02 <Update_Blink+0x586>
 8012cea:	4a21      	ldr	r2, [pc, #132]	; (8012d70 <Update_Blink+0x5f4>)
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012cf2:	f043 0301 	orr.w	r3, r3, #1
 8012cf6:	b219      	sxth	r1, r3
 8012cf8:	4a1d      	ldr	r2, [pc, #116]	; (8012d70 <Update_Blink+0x5f4>)
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8012d00:	e00a      	b.n	8012d18 <Update_Blink+0x59c>
      else      ParamTab[Tmp] &= ~D_HID;
 8012d02:	4a1b      	ldr	r2, [pc, #108]	; (8012d70 <Update_Blink+0x5f4>)
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012d0a:	f023 0301 	bic.w	r3, r3, #1
 8012d0e:	b219      	sxth	r1, r3
 8012d10:	4a17      	ldr	r2, [pc, #92]	; (8012d70 <Update_Blink+0x5f4>)
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      Tmp  = ParamTab[T2x1] - ParamTab[T1x1];          // T2 - T1 ��ֵ
 8012d18:	4b15      	ldr	r3, [pc, #84]	; (8012d70 <Update_Blink+0x5f4>)
 8012d1a:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8012d1e:	461a      	mov	r2, r3
 8012d20:	4b13      	ldr	r3, [pc, #76]	; (8012d70 <Update_Blink+0x5f4>)
 8012d22:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8012d26:	1ad3      	subs	r3, r2, r3
 8012d28:	607b      	str	r3, [r7, #4]
      Tmp *= B_SCALE[List[TIM_BASE].Val]* Exp(T_SCALE[List[TIM_BASE].Val]);
 8012d2a:	4b1a      	ldr	r3, [pc, #104]	; (8012d94 <Update_Blink+0x618>)
 8012d2c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012d30:	461a      	mov	r2, r3
 8012d32:	4b1c      	ldr	r3, [pc, #112]	; (8012da4 <Update_Blink+0x628>)
 8012d34:	5c9b      	ldrb	r3, [r3, r2]
 8012d36:	461c      	mov	r4, r3
 8012d38:	4b16      	ldr	r3, [pc, #88]	; (8012d94 <Update_Blink+0x618>)
 8012d3a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012d3e:	461a      	mov	r2, r3
 8012d40:	4b19      	ldr	r3, [pc, #100]	; (8012da8 <Update_Blink+0x62c>)
 8012d42:	5c9b      	ldrb	r3, [r3, r2]
 8012d44:	4618      	mov	r0, r3
 8012d46:	f7ff f8ed 	bl	8011f24 <Exp>
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	fb03 f204 	mul.w	r2, r3, r4
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	fb02 f303 	mul.w	r3, r2, r3
 8012d56:	607b      	str	r3, [r7, #4]
      if(Tmp>=0)
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	db28      	blt.n	8012db0 <Update_Blink+0x634>
        Value2Str(NumStr, Tmp, T[0], 3, UNSIGN);
 8012d5e:	2301      	movs	r3, #1
 8012d60:	9300      	str	r3, [sp, #0]
 8012d62:	2303      	movs	r3, #3
 8012d64:	4a11      	ldr	r2, [pc, #68]	; (8012dac <Update_Blink+0x630>)
 8012d66:	6879      	ldr	r1, [r7, #4]
 8012d68:	4805      	ldr	r0, [pc, #20]	; (8012d80 <Update_Blink+0x604>)
 8012d6a:	f7fe ffdf 	bl	8011d2c <Value2Str>
 8012d6e:	e027      	b.n	8012dc0 <Update_Blink+0x644>
 8012d70:	20000144 	.word	0x20000144
 8012d74:	08002130 	.word	0x08002130
 8012d78:	08002108 	.word	0x08002108
 8012d7c:	08001d00 	.word	0x08001d00
 8012d80:	20002844 	.word	0x20002844
 8012d84:	20000780 	.word	0x20000780
 8012d88:	08000960 	.word	0x08000960
 8012d8c:	08000964 	.word	0x08000964
 8012d90:	0800215c 	.word	0x0800215c
 8012d94:	2000029c 	.word	0x2000029c
 8012d98:	200001d4 	.word	0x200001d4
 8012d9c:	08000970 	.word	0x08000970
 8012da0:	08001c4c 	.word	0x08001c4c
 8012da4:	0800211c 	.word	0x0800211c
 8012da8:	080020f4 	.word	0x080020f4
 8012dac:	08001ce8 	.word	0x08001ce8
      else
        Value2Str(NumStr, Tmp, T[0], 3, SIGN);
 8012db0:	2300      	movs	r3, #0
 8012db2:	9300      	str	r3, [sp, #0]
 8012db4:	2303      	movs	r3, #3
 8012db6:	4aa3      	ldr	r2, [pc, #652]	; (8013044 <Update_Blink+0x8c8>)
 8012db8:	6879      	ldr	r1, [r7, #4]
 8012dba:	48a3      	ldr	r0, [pc, #652]	; (8013048 <Update_Blink+0x8cc>)
 8012dbc:	f7fe ffb6 	bl	8011d2c <Value2Str>
      SetColor(GRY, TCOLOR[XN]);
 8012dc0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8012dc4:	4619      	mov	r1, r3
 8012dc6:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012dca:	f7fb f8bf 	bl	800df4c <SetColor>
      Draw_Circle_D(Twink, S_X[T1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 8012dce:	4b9f      	ldr	r3, [pc, #636]	; (801304c <Update_Blink+0x8d0>)
 8012dd0:	781b      	ldrb	r3, [r3, #0]
 8012dd2:	b2d8      	uxtb	r0, r3
 8012dd4:	2307      	movs	r3, #7
 8012dd6:	b29b      	uxth	r3, r3
 8012dd8:	3b03      	subs	r3, #3
 8012dda:	b29b      	uxth	r3, r3
 8012ddc:	b219      	sxth	r1, r3
 8012dde:	2336      	movs	r3, #54	; 0x36
 8012de0:	9301      	str	r3, [sp, #4]
 8012de2:	2300      	movs	r3, #0
 8012de4:	9300      	str	r3, [sp, #0]
 8012de6:	230b      	movs	r3, #11
 8012de8:	2203      	movs	r2, #3
 8012dea:	f7fb f99d 	bl	800e128 <Draw_Circle_D>
      DispStr(S_X[T1_POSI]+0*6, LABLE_Y, Twink+SYMB, "]");
 8012dee:	2007      	movs	r0, #7
 8012df0:	4b96      	ldr	r3, [pc, #600]	; (801304c <Update_Blink+0x8d0>)
 8012df2:	781b      	ldrb	r3, [r3, #0]
 8012df4:	b2db      	uxtb	r3, r3
 8012df6:	3310      	adds	r3, #16
 8012df8:	b2da      	uxtb	r2, r3
 8012dfa:	4b95      	ldr	r3, [pc, #596]	; (8013050 <Update_Blink+0x8d4>)
 8012dfc:	2103      	movs	r1, #3
 8012dfe:	f7fb f8bd 	bl	800df7c <DispStr>
      DispStr(S_X[T1_POSI]+1*6, LABLE_Y, Twink,      "T:      ");
 8012e02:	2307      	movs	r3, #7
 8012e04:	b29b      	uxth	r3, r3
 8012e06:	3306      	adds	r3, #6
 8012e08:	b29b      	uxth	r3, r3
 8012e0a:	b218      	sxth	r0, r3
 8012e0c:	4b8f      	ldr	r3, [pc, #572]	; (801304c <Update_Blink+0x8d0>)
 8012e0e:	781b      	ldrb	r3, [r3, #0]
 8012e10:	b2da      	uxtb	r2, r3
 8012e12:	4b90      	ldr	r3, [pc, #576]	; (8013054 <Update_Blink+0x8d8>)
 8012e14:	2103      	movs	r1, #3
 8012e16:	f7fb f8b1 	bl	800df7c <DispStr>
      DispStr(S_X[T1_POSI]+3*6, LABLE_Y, Twink,      (char *)NumStr);
 8012e1a:	2307      	movs	r3, #7
 8012e1c:	b29b      	uxth	r3, r3
 8012e1e:	3312      	adds	r3, #18
 8012e20:	b29b      	uxth	r3, r3
 8012e22:	b218      	sxth	r0, r3
 8012e24:	4b89      	ldr	r3, [pc, #548]	; (801304c <Update_Blink+0x8d0>)
 8012e26:	781b      	ldrb	r3, [r3, #0]
 8012e28:	b2da      	uxtb	r2, r3
 8012e2a:	4b87      	ldr	r3, [pc, #540]	; (8013048 <Update_Blink+0x8cc>)
 8012e2c:	2103      	movs	r1, #3
 8012e2e:	f7fb f8a5 	bl	800df7c <DispStr>
      break;
 8012e32:	e398      	b.n	8013566 <Update_Blink+0xdea>

    case XN_TYPE:
      if(Twink) ParamTab[T1F] |=  D_HID;
 8012e34:	4b85      	ldr	r3, [pc, #532]	; (801304c <Update_Blink+0x8d0>)
 8012e36:	781b      	ldrb	r3, [r3, #0]
 8012e38:	b2db      	uxtb	r3, r3
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d008      	beq.n	8012e50 <Update_Blink+0x6d4>
 8012e3e:	4b86      	ldr	r3, [pc, #536]	; (8013058 <Update_Blink+0x8dc>)
 8012e40:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8012e44:	f043 0301 	orr.w	r3, r3, #1
 8012e48:	b21a      	sxth	r2, r3
 8012e4a:	4b83      	ldr	r3, [pc, #524]	; (8013058 <Update_Blink+0x8dc>)
 8012e4c:	821a      	strh	r2, [r3, #16]
 8012e4e:	e007      	b.n	8012e60 <Update_Blink+0x6e4>
      else      ParamTab[T1F] &= ~D_HID;
 8012e50:	4b81      	ldr	r3, [pc, #516]	; (8013058 <Update_Blink+0x8dc>)
 8012e52:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8012e56:	f023 0301 	bic.w	r3, r3, #1
 8012e5a:	b21a      	sxth	r2, r3
 8012e5c:	4b7e      	ldr	r3, [pc, #504]	; (8013058 <Update_Blink+0x8dc>)
 8012e5e:	821a      	strh	r2, [r3, #16]
      if(Twink) ParamTab[T2F] |=  D_HID;
 8012e60:	4b7a      	ldr	r3, [pc, #488]	; (801304c <Update_Blink+0x8d0>)
 8012e62:	781b      	ldrb	r3, [r3, #0]
 8012e64:	b2db      	uxtb	r3, r3
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d008      	beq.n	8012e7c <Update_Blink+0x700>
 8012e6a:	4b7b      	ldr	r3, [pc, #492]	; (8013058 <Update_Blink+0x8dc>)
 8012e6c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8012e70:	f043 0301 	orr.w	r3, r3, #1
 8012e74:	b21a      	sxth	r2, r3
 8012e76:	4b78      	ldr	r3, [pc, #480]	; (8013058 <Update_Blink+0x8dc>)
 8012e78:	825a      	strh	r2, [r3, #18]
      else      ParamTab[T2F] &= ~D_HID;
      break;
 8012e7a:	e374      	b.n	8013566 <Update_Blink+0xdea>
      else      ParamTab[T2F] &= ~D_HID;
 8012e7c:	4b76      	ldr	r3, [pc, #472]	; (8013058 <Update_Blink+0x8dc>)
 8012e7e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8012e82:	f023 0301 	bic.w	r3, r3, #1
 8012e86:	b21a      	sxth	r2, r3
 8012e88:	4b73      	ldr	r3, [pc, #460]	; (8013058 <Update_Blink+0x8dc>)
 8012e8a:	825a      	strh	r2, [r3, #18]
      break;
 8012e8c:	e36b      	b.n	8013566 <Update_Blink+0xdea>

    case SYNCMODE:
      if(!(Status &  STOP))
 8012e8e:	4b73      	ldr	r3, [pc, #460]	; (801305c <Update_Blink+0x8e0>)
 8012e90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012e94:	b29b      	uxth	r3, r3
 8012e96:	f003 0301 	and.w	r3, r3, #1
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	f040 8362 	bne.w	8013564 <Update_Blink+0xde8>
      {
      SetColor(GRY, TCOLOR[TRG]);
 8012ea0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8012ea4:	4619      	mov	r1, r3
 8012ea6:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012eaa:	f7fb f84f 	bl	800df4c <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 1, 6*4);
 8012eae:	4b67      	ldr	r3, [pc, #412]	; (801304c <Update_Blink+0x8d0>)
 8012eb0:	781b      	ldrb	r3, [r3, #0]
 8012eb2:	b2d8      	uxtb	r0, r3
 8012eb4:	89bb      	ldrh	r3, [r7, #12]
 8012eb6:	4a6a      	ldr	r2, [pc, #424]	; (8013060 <Update_Blink+0x8e4>)
 8012eb8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012ebc:	b29b      	uxth	r3, r3
 8012ebe:	3b03      	subs	r3, #3
 8012ec0:	b29b      	uxth	r3, r3
 8012ec2:	b219      	sxth	r1, r3
 8012ec4:	2318      	movs	r3, #24
 8012ec6:	9301      	str	r3, [sp, #4]
 8012ec8:	2301      	movs	r3, #1
 8012eca:	9300      	str	r3, [sp, #0]
 8012ecc:	230b      	movs	r3, #11
 8012ece:	22e1      	movs	r2, #225	; 0xe1
 8012ed0:	f7fb f92a 	bl	800e128 <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, (char *)ptr);
 8012ed4:	89bb      	ldrh	r3, [r7, #12]
 8012ed6:	4a62      	ldr	r2, [pc, #392]	; (8013060 <Update_Blink+0x8e4>)
 8012ed8:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012edc:	4b5b      	ldr	r3, [pc, #364]	; (801304c <Update_Blink+0x8d0>)
 8012ede:	781b      	ldrb	r3, [r3, #0]
 8012ee0:	b2da      	uxtb	r2, r3
 8012ee2:	68bb      	ldr	r3, [r7, #8]
 8012ee4:	21e1      	movs	r1, #225	; 0xe1
 8012ee6:	f7fb f849 	bl	800df7c <DispStr>
      }
      break;
 8012eea:	e33b      	b.n	8013564 <Update_Blink+0xde8>

    case TR_MODE:
    case SENSITIVE:
      SetColor(GRY, TCOLOR[TRG]);
 8012eec:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8012ef0:	4619      	mov	r1, r3
 8012ef2:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012ef6:	f7fb f829 	bl	800df4c <SetColor>
      Draw_Circle_D(Twink, S_X[TR_MODE]-3, TITLE_Y_POS, 11, 0, 6*8);
 8012efa:	4b54      	ldr	r3, [pc, #336]	; (801304c <Update_Blink+0x8d0>)
 8012efc:	781b      	ldrb	r3, [r3, #0]
 8012efe:	b2d8      	uxtb	r0, r3
 8012f00:	23dd      	movs	r3, #221	; 0xdd
 8012f02:	b29b      	uxth	r3, r3
 8012f04:	3b03      	subs	r3, #3
 8012f06:	b29b      	uxth	r3, r3
 8012f08:	b219      	sxth	r1, r3
 8012f0a:	2330      	movs	r3, #48	; 0x30
 8012f0c:	9301      	str	r3, [sp, #4]
 8012f0e:	2300      	movs	r3, #0
 8012f10:	9300      	str	r3, [sp, #0]
 8012f12:	230b      	movs	r3, #11
 8012f14:	22e1      	movs	r2, #225	; 0xe1
 8012f16:	f7fb f907 	bl	800e128 <Draw_Circle_D>
      DispStr10x14(S_X[TR_MODE], TITLE_Y_POS, Twink+SYMB,(List[TR_MODE].Val?("D"):("C")));
 8012f1a:	20dd      	movs	r0, #221	; 0xdd
 8012f1c:	4b4b      	ldr	r3, [pc, #300]	; (801304c <Update_Blink+0x8d0>)
 8012f1e:	781b      	ldrb	r3, [r3, #0]
 8012f20:	b2db      	uxtb	r3, r3
 8012f22:	3310      	adds	r3, #16
 8012f24:	b2da      	uxtb	r2, r3
 8012f26:	4b4f      	ldr	r3, [pc, #316]	; (8013064 <Update_Blink+0x8e8>)
 8012f28:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d001      	beq.n	8012f34 <Update_Blink+0x7b8>
 8012f30:	4b4d      	ldr	r3, [pc, #308]	; (8013068 <Update_Blink+0x8ec>)
 8012f32:	e000      	b.n	8012f36 <Update_Blink+0x7ba>
 8012f34:	4b4d      	ldr	r3, [pc, #308]	; (801306c <Update_Blink+0x8f0>)
 8012f36:	21e1      	movs	r1, #225	; 0xe1
 8012f38:	f7fb fa88 	bl	800e44c <DispStr10x14>

      Tmp  = List[SENSITIVE].Val;                        // �����ز�ֵ
 8012f3c:	4b49      	ldr	r3, [pc, #292]	; (8013064 <Update_Blink+0x8e8>)
 8012f3e:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8012f42:	607b      	str	r3, [r7, #4]
      Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8012f44:	89fb      	ldrh	r3, [r7, #14]
 8012f46:	4a4a      	ldr	r2, [pc, #296]	; (8013070 <Update_Blink+0x8f4>)
 8012f48:	5cd3      	ldrb	r3, [r2, r3]
 8012f4a:	461c      	mov	r4, r3
 8012f4c:	89fb      	ldrh	r3, [r7, #14]
 8012f4e:	4a49      	ldr	r2, [pc, #292]	; (8013074 <Update_Blink+0x8f8>)
 8012f50:	5cd3      	ldrb	r3, [r2, r3]
 8012f52:	4618      	mov	r0, r3
 8012f54:	f7fe ffe6 	bl	8011f24 <Exp>
 8012f58:	4603      	mov	r3, r0
 8012f5a:	fb03 f204 	mul.w	r2, r3, r4
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	fb02 f303 	mul.w	r3, r2, r3
 8012f64:	607b      	str	r3, [r7, #4]
      Value2Str(NumStr, Tmp, V[0], 2, UNSIGN);
 8012f66:	2301      	movs	r3, #1
 8012f68:	9300      	str	r3, [sp, #0]
 8012f6a:	2302      	movs	r3, #2
 8012f6c:	4a42      	ldr	r2, [pc, #264]	; (8013078 <Update_Blink+0x8fc>)
 8012f6e:	6879      	ldr	r1, [r7, #4]
 8012f70:	4835      	ldr	r0, [pc, #212]	; (8013048 <Update_Blink+0x8cc>)
 8012f72:	f7fe fedb 	bl	8011d2c <Value2Str>
      DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, Twink,  "     ");
 8012f76:	23e7      	movs	r3, #231	; 0xe7
 8012f78:	b29b      	uxth	r3, r3
 8012f7a:	3309      	adds	r3, #9
 8012f7c:	b29b      	uxth	r3, r3
 8012f7e:	b218      	sxth	r0, r3
 8012f80:	4b32      	ldr	r3, [pc, #200]	; (801304c <Update_Blink+0x8d0>)
 8012f82:	781b      	ldrb	r3, [r3, #0]
 8012f84:	b2da      	uxtb	r2, r3
 8012f86:	4b3d      	ldr	r3, [pc, #244]	; (801307c <Update_Blink+0x900>)
 8012f88:	21e1      	movs	r1, #225	; 0xe1
 8012f8a:	f7fa fff7 	bl	800df7c <DispStr>
      DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, Twink+SYMB,"E");
 8012f8e:	20e7      	movs	r0, #231	; 0xe7
 8012f90:	4b2e      	ldr	r3, [pc, #184]	; (801304c <Update_Blink+0x8d0>)
 8012f92:	781b      	ldrb	r3, [r3, #0]
 8012f94:	b2db      	uxtb	r3, r3
 8012f96:	3310      	adds	r3, #16
 8012f98:	b2da      	uxtb	r2, r3
 8012f9a:	4b39      	ldr	r3, [pc, #228]	; (8013080 <Update_Blink+0x904>)
 8012f9c:	21e1      	movs	r1, #225	; 0xe1
 8012f9e:	f7fb fa55 	bl	800e44c <DispStr10x14>
      DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, Twink     ,  (char *)NumStr);
 8012fa2:	23e7      	movs	r3, #231	; 0xe7
 8012fa4:	b29b      	uxth	r3, r3
 8012fa6:	3309      	adds	r3, #9
 8012fa8:	b29b      	uxth	r3, r3
 8012faa:	b218      	sxth	r0, r3
 8012fac:	4b27      	ldr	r3, [pc, #156]	; (801304c <Update_Blink+0x8d0>)
 8012fae:	781b      	ldrb	r3, [r3, #0]
 8012fb0:	b2da      	uxtb	r2, r3
 8012fb2:	4b25      	ldr	r3, [pc, #148]	; (8013048 <Update_Blink+0x8cc>)
 8012fb4:	21e1      	movs	r1, #225	; 0xe1
 8012fb6:	f7fa ffe1 	bl	800df7c <DispStr>
      break;
 8012fba:	e2d4      	b.n	8013566 <Update_Blink+0xdea>

    case FITTRIGG:
      SetColor(GRY, TCOLOR[TRG]);
 8012fbc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8012fc0:	4619      	mov	r1, r3
 8012fc2:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012fc6:	f7fa ffc1 	bl	800df4c <SetColor>
      DispStr10x14(S_X[FITTRIGG], TITLE_Y_POS, PRN+SYMB,(List[FITTRIGG].Val?("F"):("B")));
 8012fca:	20cf      	movs	r0, #207	; 0xcf
 8012fcc:	4b25      	ldr	r3, [pc, #148]	; (8013064 <Update_Blink+0x8e8>)
 8012fce:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d001      	beq.n	8012fda <Update_Blink+0x85e>
 8012fd6:	4b2b      	ldr	r3, [pc, #172]	; (8013084 <Update_Blink+0x908>)
 8012fd8:	e000      	b.n	8012fdc <Update_Blink+0x860>
 8012fda:	4b2b      	ldr	r3, [pc, #172]	; (8013088 <Update_Blink+0x90c>)
 8012fdc:	2210      	movs	r2, #16
 8012fde:	21e1      	movs	r1, #225	; 0xe1
 8012fe0:	f7fb fa34 	bl	800e44c <DispStr10x14>
      break;
 8012fe4:	e2bf      	b.n	8013566 <Update_Blink+0xdea>

    case THRESHOLD:
      if(Twink) ParamTab[VTF] |=  D_HID;
 8012fe6:	4b19      	ldr	r3, [pc, #100]	; (801304c <Update_Blink+0x8d0>)
 8012fe8:	781b      	ldrb	r3, [r3, #0]
 8012fea:	b2db      	uxtb	r3, r3
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d008      	beq.n	8013002 <Update_Blink+0x886>
 8012ff0:	4b19      	ldr	r3, [pc, #100]	; (8013058 <Update_Blink+0x8dc>)
 8012ff2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012ff6:	f043 0301 	orr.w	r3, r3, #1
 8012ffa:	b21a      	sxth	r2, r3
 8012ffc:	4b16      	ldr	r3, [pc, #88]	; (8013058 <Update_Blink+0x8dc>)
 8012ffe:	811a      	strh	r2, [r3, #8]
      else      ParamTab[VTF] &= ~D_HID;
      break;
 8013000:	e2b1      	b.n	8013566 <Update_Blink+0xdea>
      else      ParamTab[VTF] &= ~D_HID;
 8013002:	4b15      	ldr	r3, [pc, #84]	; (8013058 <Update_Blink+0x8dc>)
 8013004:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8013008:	f023 0301 	bic.w	r3, r3, #1
 801300c:	b21a      	sxth	r2, r3
 801300e:	4b12      	ldr	r3, [pc, #72]	; (8013058 <Update_Blink+0x8dc>)
 8013010:	811a      	strh	r2, [r3, #8]
      break;
 8013012:	e2a8      	b.n	8013566 <Update_Blink+0xdea>

    case TR_TYPE:
      if(Twink) ParamTab[VTF] |=  D_HID;
 8013014:	4b0d      	ldr	r3, [pc, #52]	; (801304c <Update_Blink+0x8d0>)
 8013016:	781b      	ldrb	r3, [r3, #0]
 8013018:	b2db      	uxtb	r3, r3
 801301a:	2b00      	cmp	r3, #0
 801301c:	d008      	beq.n	8013030 <Update_Blink+0x8b4>
 801301e:	4b0e      	ldr	r3, [pc, #56]	; (8013058 <Update_Blink+0x8dc>)
 8013020:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8013024:	f043 0301 	orr.w	r3, r3, #1
 8013028:	b21a      	sxth	r2, r3
 801302a:	4b0b      	ldr	r3, [pc, #44]	; (8013058 <Update_Blink+0x8dc>)
 801302c:	811a      	strh	r2, [r3, #8]
      else      ParamTab[VTF] &= ~D_HID;
      break;
 801302e:	e29a      	b.n	8013566 <Update_Blink+0xdea>
      else      ParamTab[VTF] &= ~D_HID;
 8013030:	4b09      	ldr	r3, [pc, #36]	; (8013058 <Update_Blink+0x8dc>)
 8013032:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8013036:	f023 0301 	bic.w	r3, r3, #1
 801303a:	b21a      	sxth	r2, r3
 801303c:	4b06      	ldr	r3, [pc, #24]	; (8013058 <Update_Blink+0x8dc>)
 801303e:	811a      	strh	r2, [r3, #8]
      break;
 8013040:	e291      	b.n	8013566 <Update_Blink+0xdea>
 8013042:	bf00      	nop
 8013044:	08001ce8 	.word	0x08001ce8
 8013048:	20002844 	.word	0x20002844
 801304c:	20000780 	.word	0x20000780
 8013050:	08000960 	.word	0x08000960
 8013054:	0800097c 	.word	0x0800097c
 8013058:	20000144 	.word	0x20000144
 801305c:	200007a8 	.word	0x200007a8
 8013060:	0800215c 	.word	0x0800215c
 8013064:	2000029c 	.word	0x2000029c
 8013068:	08000988 	.word	0x08000988
 801306c:	0800098c 	.word	0x0800098c
 8013070:	08002130 	.word	0x08002130
 8013074:	08002108 	.word	0x08002108
 8013078:	08001d00 	.word	0x08001d00
 801307c:	08000990 	.word	0x08000990
 8013080:	08000998 	.word	0x08000998
 8013084:	0800099c 	.word	0x0800099c
 8013088:	0800095c 	.word	0x0800095c

    case EXT_REFN:
      SetColor(GRY, TCOLOR[EX]);
 801308c:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8013090:	4619      	mov	r1, r3
 8013092:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013096:	f7fa ff59 	bl	800df4c <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 1, 6*5);
 801309a:	4b93      	ldr	r3, [pc, #588]	; (80132e8 <Update_Blink+0xb6c>)
 801309c:	781b      	ldrb	r3, [r3, #0]
 801309e:	b2d8      	uxtb	r0, r3
 80130a0:	89bb      	ldrh	r3, [r7, #12]
 80130a2:	4a92      	ldr	r2, [pc, #584]	; (80132ec <Update_Blink+0xb70>)
 80130a4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80130a8:	b29b      	uxth	r3, r3
 80130aa:	3b03      	subs	r3, #3
 80130ac:	b29b      	uxth	r3, r3
 80130ae:	b219      	sxth	r1, r3
 80130b0:	231e      	movs	r3, #30
 80130b2:	9301      	str	r3, [sp, #4]
 80130b4:	2301      	movs	r3, #1
 80130b6:	9300      	str	r3, [sp, #0]
 80130b8:	230b      	movs	r3, #11
 80130ba:	22e1      	movs	r2, #225	; 0xe1
 80130bc:	f7fb f834 	bl	800e128 <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 80130c0:	89bb      	ldrh	r3, [r7, #12]
 80130c2:	4a8a      	ldr	r2, [pc, #552]	; (80132ec <Update_Blink+0xb70>)
 80130c4:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 80130c8:	4b87      	ldr	r3, [pc, #540]	; (80132e8 <Update_Blink+0xb6c>)
 80130ca:	781b      	ldrb	r3, [r3, #0]
 80130cc:	b2da      	uxtb	r2, r3
 80130ce:	4b88      	ldr	r3, [pc, #544]	; (80132f0 <Update_Blink+0xb74>)
 80130d0:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d00a      	beq.n	80130ee <Update_Blink+0x972>
 80130d8:	4b85      	ldr	r3, [pc, #532]	; (80132f0 <Update_Blink+0xb74>)
 80130da:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 80130de:	4619      	mov	r1, r3
 80130e0:	460b      	mov	r3, r1
 80130e2:	005b      	lsls	r3, r3, #1
 80130e4:	440b      	add	r3, r1
 80130e6:	005b      	lsls	r3, r3, #1
 80130e8:	4982      	ldr	r1, [pc, #520]	; (80132f4 <Update_Blink+0xb78>)
 80130ea:	440b      	add	r3, r1
 80130ec:	e000      	b.n	80130f0 <Update_Blink+0x974>
 80130ee:	4b82      	ldr	r3, [pc, #520]	; (80132f8 <Update_Blink+0xb7c>)
 80130f0:	21e1      	movs	r1, #225	; 0xe1
 80130f2:	f7fa ff43 	bl	800df7c <DispStr>
      ParamTab[P2F] &= ~D_HID;
 80130f6:	4b81      	ldr	r3, [pc, #516]	; (80132fc <Update_Blink+0xb80>)
 80130f8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80130fc:	f023 0301 	bic.w	r3, r3, #1
 8013100:	b21a      	sxth	r2, r3
 8013102:	4b7e      	ldr	r3, [pc, #504]	; (80132fc <Update_Blink+0xb80>)
 8013104:	805a      	strh	r2, [r3, #2]
      break;
 8013106:	e22e      	b.n	8013566 <Update_Blink+0xdea>

    case EXT_POSI:
      if(Twink) ParamTab[P2F] |=  D_HID;
 8013108:	4b77      	ldr	r3, [pc, #476]	; (80132e8 <Update_Blink+0xb6c>)
 801310a:	781b      	ldrb	r3, [r3, #0]
 801310c:	b2db      	uxtb	r3, r3
 801310e:	2b00      	cmp	r3, #0
 8013110:	d008      	beq.n	8013124 <Update_Blink+0x9a8>
 8013112:	4b7a      	ldr	r3, [pc, #488]	; (80132fc <Update_Blink+0xb80>)
 8013114:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013118:	f043 0301 	orr.w	r3, r3, #1
 801311c:	b21a      	sxth	r2, r3
 801311e:	4b77      	ldr	r3, [pc, #476]	; (80132fc <Update_Blink+0xb80>)
 8013120:	805a      	strh	r2, [r3, #2]
      else      ParamTab[P2F] &= ~D_HID;
      break;
 8013122:	e220      	b.n	8013566 <Update_Blink+0xdea>
      else      ParamTab[P2F] &= ~D_HID;
 8013124:	4b75      	ldr	r3, [pc, #468]	; (80132fc <Update_Blink+0xb80>)
 8013126:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801312a:	f023 0301 	bic.w	r3, r3, #1
 801312e:	b21a      	sxth	r2, r3
 8013130:	4b72      	ldr	r3, [pc, #456]	; (80132fc <Update_Blink+0xb80>)
 8013132:	805a      	strh	r2, [r3, #2]
      break;
 8013134:	e217      	b.n	8013566 <Update_Blink+0xdea>

    case EXT_HIDE:
      SetColor(GRY, TCOLOR[EX]);
 8013136:	f64f 031f 	movw	r3, #63519	; 0xf81f
 801313a:	4619      	mov	r1, r3
 801313c:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013140:	f7fa ff04 	bl	800df4c <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 1, 6*5);
 8013144:	4b68      	ldr	r3, [pc, #416]	; (80132e8 <Update_Blink+0xb6c>)
 8013146:	781b      	ldrb	r3, [r3, #0]
 8013148:	b2d8      	uxtb	r0, r3
 801314a:	89bb      	ldrh	r3, [r7, #12]
 801314c:	4a67      	ldr	r2, [pc, #412]	; (80132ec <Update_Blink+0xb70>)
 801314e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013152:	b29b      	uxth	r3, r3
 8013154:	3b03      	subs	r3, #3
 8013156:	b29b      	uxth	r3, r3
 8013158:	b219      	sxth	r1, r3
 801315a:	231e      	movs	r3, #30
 801315c:	9301      	str	r3, [sp, #4]
 801315e:	2301      	movs	r3, #1
 8013160:	9300      	str	r3, [sp, #0]
 8013162:	230b      	movs	r3, #11
 8013164:	22e1      	movs	r2, #225	; 0xe1
 8013166:	f7fa ffdf 	bl	800e128 <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 801316a:	89bb      	ldrh	r3, [r7, #12]
 801316c:	4a5f      	ldr	r2, [pc, #380]	; (80132ec <Update_Blink+0xb70>)
 801316e:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8013172:	4b5d      	ldr	r3, [pc, #372]	; (80132e8 <Update_Blink+0xb6c>)
 8013174:	781b      	ldrb	r3, [r3, #0]
 8013176:	b2da      	uxtb	r2, r3
 8013178:	4b5d      	ldr	r3, [pc, #372]	; (80132f0 <Update_Blink+0xb74>)
 801317a:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 801317e:	2b00      	cmp	r3, #0
 8013180:	d00a      	beq.n	8013198 <Update_Blink+0xa1c>
 8013182:	4b5b      	ldr	r3, [pc, #364]	; (80132f0 <Update_Blink+0xb74>)
 8013184:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8013188:	4619      	mov	r1, r3
 801318a:	460b      	mov	r3, r1
 801318c:	005b      	lsls	r3, r3, #1
 801318e:	440b      	add	r3, r1
 8013190:	005b      	lsls	r3, r3, #1
 8013192:	4958      	ldr	r1, [pc, #352]	; (80132f4 <Update_Blink+0xb78>)
 8013194:	440b      	add	r3, r1
 8013196:	e000      	b.n	801319a <Update_Blink+0xa1e>
 8013198:	4b57      	ldr	r3, [pc, #348]	; (80132f8 <Update_Blink+0xb7c>)
 801319a:	21e1      	movs	r1, #225	; 0xe1
 801319c:	f7fa feee 	bl	800df7c <DispStr>
      ParamTab[P2F] &= ~D_HID;
 80131a0:	4b56      	ldr	r3, [pc, #344]	; (80132fc <Update_Blink+0xb80>)
 80131a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80131a6:	f023 0301 	bic.w	r3, r3, #1
 80131aa:	b21a      	sxth	r2, r3
 80131ac:	4b53      	ldr	r3, [pc, #332]	; (80132fc <Update_Blink+0xb80>)
 80131ae:	805a      	strh	r2, [r3, #2]
      break;
 80131b0:	e1d9      	b.n	8013566 <Update_Blink+0xdea>

    case TPYE_OUT:
      SetColor(GRY, TCOLOR[SN]);
 80131b2:	f240 531f 	movw	r3, #1311	; 0x51f
 80131b6:	4619      	mov	r1, r3
 80131b8:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80131bc:	f7fa fec6 	bl	800df4c <SetColor>
      Draw_Circle_D(Twink, S_X[TPYE_OUT]-3, LABLE_Y, 11, 0, 6*9);
 80131c0:	4b49      	ldr	r3, [pc, #292]	; (80132e8 <Update_Blink+0xb6c>)
 80131c2:	781b      	ldrb	r3, [r3, #0]
 80131c4:	b2d8      	uxtb	r0, r3
 80131c6:	2307      	movs	r3, #7
 80131c8:	b29b      	uxth	r3, r3
 80131ca:	3b03      	subs	r3, #3
 80131cc:	b29b      	uxth	r3, r3
 80131ce:	b219      	sxth	r1, r3
 80131d0:	2336      	movs	r3, #54	; 0x36
 80131d2:	9301      	str	r3, [sp, #4]
 80131d4:	2300      	movs	r3, #0
 80131d6:	9300      	str	r3, [sp, #0]
 80131d8:	230b      	movs	r3, #11
 80131da:	2203      	movs	r2, #3
 80131dc:	f7fa ffa4 	bl	800e128 <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, "FO: ");
 80131e0:	89bb      	ldrh	r3, [r7, #12]
 80131e2:	4a42      	ldr	r2, [pc, #264]	; (80132ec <Update_Blink+0xb70>)
 80131e4:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 80131e8:	4b3f      	ldr	r3, [pc, #252]	; (80132e8 <Update_Blink+0xb6c>)
 80131ea:	781b      	ldrb	r3, [r3, #0]
 80131ec:	b2da      	uxtb	r2, r3
 80131ee:	4b44      	ldr	r3, [pc, #272]	; (8013300 <Update_Blink+0xb84>)
 80131f0:	2103      	movs	r1, #3
 80131f2:	f7fa fec3 	bl	800df7c <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, "     ");
 80131f6:	89bb      	ldrh	r3, [r7, #12]
 80131f8:	4a3c      	ldr	r2, [pc, #240]	; (80132ec <Update_Blink+0xb70>)
 80131fa:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80131fe:	b29b      	uxth	r3, r3
 8013200:	3318      	adds	r3, #24
 8013202:	b29b      	uxth	r3, r3
 8013204:	b218      	sxth	r0, r3
 8013206:	4b38      	ldr	r3, [pc, #224]	; (80132e8 <Update_Blink+0xb6c>)
 8013208:	781b      	ldrb	r3, [r3, #0]
 801320a:	b2da      	uxtb	r2, r3
 801320c:	4b3d      	ldr	r3, [pc, #244]	; (8013304 <Update_Blink+0xb88>)
 801320e:	2103      	movs	r1, #3
 8013210:	f7fa feb4 	bl	800df7c <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, (char*)OT[List[i].Val]);
 8013214:	89bb      	ldrh	r3, [r7, #12]
 8013216:	4a35      	ldr	r2, [pc, #212]	; (80132ec <Update_Blink+0xb70>)
 8013218:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801321c:	b29b      	uxth	r3, r3
 801321e:	3318      	adds	r3, #24
 8013220:	b29b      	uxth	r3, r3
 8013222:	b218      	sxth	r0, r3
 8013224:	4b30      	ldr	r3, [pc, #192]	; (80132e8 <Update_Blink+0xb6c>)
 8013226:	781b      	ldrb	r3, [r3, #0]
 8013228:	b2da      	uxtb	r2, r3
 801322a:	89bb      	ldrh	r3, [r7, #12]
 801322c:	4930      	ldr	r1, [pc, #192]	; (80132f0 <Update_Blink+0xb74>)
 801322e:	00db      	lsls	r3, r3, #3
 8013230:	440b      	add	r3, r1
 8013232:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013236:	4619      	mov	r1, r3
 8013238:	460b      	mov	r3, r1
 801323a:	005b      	lsls	r3, r3, #1
 801323c:	440b      	add	r3, r1
 801323e:	005b      	lsls	r3, r3, #1
 8013240:	4931      	ldr	r1, [pc, #196]	; (8013308 <Update_Blink+0xb8c>)
 8013242:	440b      	add	r3, r1
 8013244:	2103      	movs	r1, #3
 8013246:	f7fa fe99 	bl	800df7c <DispStr>
      break;
 801324a:	e18c      	b.n	8013566 <Update_Blink+0xdea>

    case FREQ_OUT:
      SetColor(GRY, TCOLOR[SN]);
 801324c:	f240 531f 	movw	r3, #1311	; 0x51f
 8013250:	4619      	mov	r1, r3
 8013252:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013256:	f7fa fe79 	bl	800df4c <SetColor>
      Draw_Circle_D(Twink, S_X[FREQ_OUT]-3, LABLE_Y, 11, 0, 6*9);
 801325a:	4b23      	ldr	r3, [pc, #140]	; (80132e8 <Update_Blink+0xb6c>)
 801325c:	781b      	ldrb	r3, [r3, #0]
 801325e:	b2d8      	uxtb	r0, r3
 8013260:	2307      	movs	r3, #7
 8013262:	b29b      	uxth	r3, r3
 8013264:	3b03      	subs	r3, #3
 8013266:	b29b      	uxth	r3, r3
 8013268:	b219      	sxth	r1, r3
 801326a:	2336      	movs	r3, #54	; 0x36
 801326c:	9301      	str	r3, [sp, #4]
 801326e:	2300      	movs	r3, #0
 8013270:	9300      	str	r3, [sp, #0]
 8013272:	230b      	movs	r3, #11
 8013274:	2203      	movs	r2, #3
 8013276:	f7fa ff57 	bl	800e128 <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, "FO: ");
 801327a:	89bb      	ldrh	r3, [r7, #12]
 801327c:	4a1b      	ldr	r2, [pc, #108]	; (80132ec <Update_Blink+0xb70>)
 801327e:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8013282:	4b19      	ldr	r3, [pc, #100]	; (80132e8 <Update_Blink+0xb6c>)
 8013284:	781b      	ldrb	r3, [r3, #0]
 8013286:	b2da      	uxtb	r2, r3
 8013288:	4b1d      	ldr	r3, [pc, #116]	; (8013300 <Update_Blink+0xb84>)
 801328a:	2103      	movs	r1, #3
 801328c:	f7fa fe76 	bl	800df7c <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, "     ");
 8013290:	89bb      	ldrh	r3, [r7, #12]
 8013292:	4a16      	ldr	r2, [pc, #88]	; (80132ec <Update_Blink+0xb70>)
 8013294:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013298:	b29b      	uxth	r3, r3
 801329a:	3318      	adds	r3, #24
 801329c:	b29b      	uxth	r3, r3
 801329e:	b218      	sxth	r0, r3
 80132a0:	4b11      	ldr	r3, [pc, #68]	; (80132e8 <Update_Blink+0xb6c>)
 80132a2:	781b      	ldrb	r3, [r3, #0]
 80132a4:	b2da      	uxtb	r2, r3
 80132a6:	4b17      	ldr	r3, [pc, #92]	; (8013304 <Update_Blink+0xb88>)
 80132a8:	2103      	movs	r1, #3
 80132aa:	f7fa fe67 	bl	800df7c <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, (char*)Q[List[i].Val]);
 80132ae:	89bb      	ldrh	r3, [r7, #12]
 80132b0:	4a0e      	ldr	r2, [pc, #56]	; (80132ec <Update_Blink+0xb70>)
 80132b2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80132b6:	b29b      	uxth	r3, r3
 80132b8:	3318      	adds	r3, #24
 80132ba:	b29b      	uxth	r3, r3
 80132bc:	b218      	sxth	r0, r3
 80132be:	4b0a      	ldr	r3, [pc, #40]	; (80132e8 <Update_Blink+0xb6c>)
 80132c0:	781b      	ldrb	r3, [r3, #0]
 80132c2:	b2da      	uxtb	r2, r3
 80132c4:	89bb      	ldrh	r3, [r7, #12]
 80132c6:	490a      	ldr	r1, [pc, #40]	; (80132f0 <Update_Blink+0xb74>)
 80132c8:	00db      	lsls	r3, r3, #3
 80132ca:	440b      	add	r3, r1
 80132cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80132d0:	4619      	mov	r1, r3
 80132d2:	460b      	mov	r3, r1
 80132d4:	005b      	lsls	r3, r3, #1
 80132d6:	440b      	add	r3, r1
 80132d8:	005b      	lsls	r3, r3, #1
 80132da:	490c      	ldr	r1, [pc, #48]	; (801330c <Update_Blink+0xb90>)
 80132dc:	440b      	add	r3, r1
 80132de:	2103      	movs	r1, #3
 80132e0:	f7fa fe4c 	bl	800df7c <DispStr>
      break;
 80132e4:	e13f      	b.n	8013566 <Update_Blink+0xdea>
 80132e6:	bf00      	nop
 80132e8:	20000780 	.word	0x20000780
 80132ec:	0800215c 	.word	0x0800215c
 80132f0:	2000029c 	.word	0x2000029c
 80132f4:	08001c88 	.word	0x08001c88
 80132f8:	08001cac 	.word	0x08001cac
 80132fc:	20000144 	.word	0x20000144
 8013300:	080009a0 	.word	0x080009a0
 8013304:	08000990 	.word	0x08000990
 8013308:	08001d50 	.word	0x08001d50
 801330c:	08001e98 	.word	0x08001e98

    case FREQ_DUT:
      SetColor(GRY, TCOLOR[SN]);
 8013310:	f240 531f 	movw	r3, #1311	; 0x51f
 8013314:	4619      	mov	r1, r3
 8013316:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801331a:	f7fa fe17 	bl	800df4c <SetColor>
      Value2Str(NumStr, List[i].Val*10, List[i].PTR, 2, UNSIGN);
 801331e:	89bb      	ldrh	r3, [r7, #12]
 8013320:	4a96      	ldr	r2, [pc, #600]	; (801357c <Update_Blink+0xe00>)
 8013322:	00db      	lsls	r3, r3, #3
 8013324:	4413      	add	r3, r2
 8013326:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801332a:	461a      	mov	r2, r3
 801332c:	4613      	mov	r3, r2
 801332e:	009b      	lsls	r3, r3, #2
 8013330:	4413      	add	r3, r2
 8013332:	005b      	lsls	r3, r3, #1
 8013334:	4619      	mov	r1, r3
 8013336:	89bb      	ldrh	r3, [r7, #12]
 8013338:	4a90      	ldr	r2, [pc, #576]	; (801357c <Update_Blink+0xe00>)
 801333a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801333e:	2301      	movs	r3, #1
 8013340:	9300      	str	r3, [sp, #0]
 8013342:	2302      	movs	r3, #2
 8013344:	488e      	ldr	r0, [pc, #568]	; (8013580 <Update_Blink+0xe04>)
 8013346:	f7fe fcf1 	bl	8011d2c <Value2Str>
      Draw_Circle_D(Twink, S_X[FREQ_DUT]-3, LABLE_Y, 11, 0, 6*9);
 801334a:	4b8e      	ldr	r3, [pc, #568]	; (8013584 <Update_Blink+0xe08>)
 801334c:	781b      	ldrb	r3, [r3, #0]
 801334e:	b2d8      	uxtb	r0, r3
 8013350:	2307      	movs	r3, #7
 8013352:	b29b      	uxth	r3, r3
 8013354:	3b03      	subs	r3, #3
 8013356:	b29b      	uxth	r3, r3
 8013358:	b219      	sxth	r1, r3
 801335a:	2336      	movs	r3, #54	; 0x36
 801335c:	9301      	str	r3, [sp, #4]
 801335e:	2300      	movs	r3, #0
 8013360:	9300      	str	r3, [sp, #0]
 8013362:	230b      	movs	r3, #11
 8013364:	2203      	movs	r2, #3
 8013366:	f7fa fedf 	bl	800e128 <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, "Duty: ");
 801336a:	89bb      	ldrh	r3, [r7, #12]
 801336c:	4a86      	ldr	r2, [pc, #536]	; (8013588 <Update_Blink+0xe0c>)
 801336e:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8013372:	4b84      	ldr	r3, [pc, #528]	; (8013584 <Update_Blink+0xe08>)
 8013374:	781b      	ldrb	r3, [r3, #0]
 8013376:	b2da      	uxtb	r2, r3
 8013378:	4b84      	ldr	r3, [pc, #528]	; (801358c <Update_Blink+0xe10>)
 801337a:	2103      	movs	r1, #3
 801337c:	f7fa fdfe 	bl	800df7c <DispStr>
      DispStr(S_X[i]+36, LABLE_Y, Twink, "   ");
 8013380:	89bb      	ldrh	r3, [r7, #12]
 8013382:	4a81      	ldr	r2, [pc, #516]	; (8013588 <Update_Blink+0xe0c>)
 8013384:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013388:	b29b      	uxth	r3, r3
 801338a:	3324      	adds	r3, #36	; 0x24
 801338c:	b29b      	uxth	r3, r3
 801338e:	b218      	sxth	r0, r3
 8013390:	4b7c      	ldr	r3, [pc, #496]	; (8013584 <Update_Blink+0xe08>)
 8013392:	781b      	ldrb	r3, [r3, #0]
 8013394:	b2da      	uxtb	r2, r3
 8013396:	4b7e      	ldr	r3, [pc, #504]	; (8013590 <Update_Blink+0xe14>)
 8013398:	2103      	movs	r1, #3
 801339a:	f7fa fdef 	bl	800df7c <DispStr>
      DispStr(S_X[i]+36, LABLE_Y, Twink, (char *)NumStr);
 801339e:	89bb      	ldrh	r3, [r7, #12]
 80133a0:	4a79      	ldr	r2, [pc, #484]	; (8013588 <Update_Blink+0xe0c>)
 80133a2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80133a6:	b29b      	uxth	r3, r3
 80133a8:	3324      	adds	r3, #36	; 0x24
 80133aa:	b29b      	uxth	r3, r3
 80133ac:	b218      	sxth	r0, r3
 80133ae:	4b75      	ldr	r3, [pc, #468]	; (8013584 <Update_Blink+0xe08>)
 80133b0:	781b      	ldrb	r3, [r3, #0]
 80133b2:	b2da      	uxtb	r2, r3
 80133b4:	4b72      	ldr	r3, [pc, #456]	; (8013580 <Update_Blink+0xe04>)
 80133b6:	2103      	movs	r1, #3
 80133b8:	f7fa fde0 	bl	800df7c <DispStr>
      break;
 80133bc:	e0d3      	b.n	8013566 <Update_Blink+0xdea>

    case AUTO_CAL:
      if(Twink) ParamTab[P1F] |=  W_HID;
 80133be:	4b71      	ldr	r3, [pc, #452]	; (8013584 <Update_Blink+0xe08>)
 80133c0:	781b      	ldrb	r3, [r3, #0]
 80133c2:	b2db      	uxtb	r3, r3
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d008      	beq.n	80133da <Update_Blink+0xc5e>
 80133c8:	4b72      	ldr	r3, [pc, #456]	; (8013594 <Update_Blink+0xe18>)
 80133ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80133ce:	f043 0304 	orr.w	r3, r3, #4
 80133d2:	b21a      	sxth	r2, r3
 80133d4:	4b6f      	ldr	r3, [pc, #444]	; (8013594 <Update_Blink+0xe18>)
 80133d6:	801a      	strh	r2, [r3, #0]
 80133d8:	e007      	b.n	80133ea <Update_Blink+0xc6e>
      else      ParamTab[P1F] &= ~W_HID;
 80133da:	4b6e      	ldr	r3, [pc, #440]	; (8013594 <Update_Blink+0xe18>)
 80133dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80133e0:	f023 0304 	bic.w	r3, r3, #4
 80133e4:	b21a      	sxth	r2, r3
 80133e6:	4b6b      	ldr	r3, [pc, #428]	; (8013594 <Update_Blink+0xe18>)
 80133e8:	801a      	strh	r2, [r3, #0]

      SetColor(GRY, TCOLOR[ST]);
 80133ea:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80133ee:	4619      	mov	r1, r3
 80133f0:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80133f4:	f7fa fdaa 	bl	800df4c <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 80133f8:	4b62      	ldr	r3, [pc, #392]	; (8013584 <Update_Blink+0xe08>)
 80133fa:	781b      	ldrb	r3, [r3, #0]
 80133fc:	b2d8      	uxtb	r0, r3
 80133fe:	89bb      	ldrh	r3, [r7, #12]
 8013400:	4a61      	ldr	r2, [pc, #388]	; (8013588 <Update_Blink+0xe0c>)
 8013402:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013406:	b29b      	uxth	r3, r3
 8013408:	3b03      	subs	r3, #3
 801340a:	b29b      	uxth	r3, r3
 801340c:	b219      	sxth	r1, r3
 801340e:	2336      	movs	r3, #54	; 0x36
 8013410:	9301      	str	r3, [sp, #4]
 8013412:	2300      	movs	r3, #0
 8013414:	9300      	str	r3, [sp, #0]
 8013416:	230b      	movs	r3, #11
 8013418:	2203      	movs	r2, #3
 801341a:	f7fa fe85 	bl	800e128 <Draw_Circle_D>
      DispStr( S_X[i]+0, LABLE_Y, Twink+PRN,  "Press:   ");
 801341e:	89bb      	ldrh	r3, [r7, #12]
 8013420:	4a59      	ldr	r2, [pc, #356]	; (8013588 <Update_Blink+0xe0c>)
 8013422:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8013426:	4b57      	ldr	r3, [pc, #348]	; (8013584 <Update_Blink+0xe08>)
 8013428:	781b      	ldrb	r3, [r3, #0]
 801342a:	b2da      	uxtb	r2, r3
 801342c:	4b5a      	ldr	r3, [pc, #360]	; (8013598 <Update_Blink+0xe1c>)
 801342e:	2103      	movs	r1, #3
 8013430:	f7fa fda4 	bl	800df7c <DispStr>
      DispStr(S_X[i]+40, LABLE_Y, Twink+SYMB, "{|");//������ͣͼ��
 8013434:	89bb      	ldrh	r3, [r7, #12]
 8013436:	4a54      	ldr	r2, [pc, #336]	; (8013588 <Update_Blink+0xe0c>)
 8013438:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801343c:	b29b      	uxth	r3, r3
 801343e:	3328      	adds	r3, #40	; 0x28
 8013440:	b29b      	uxth	r3, r3
 8013442:	b218      	sxth	r0, r3
 8013444:	4b4f      	ldr	r3, [pc, #316]	; (8013584 <Update_Blink+0xe08>)
 8013446:	781b      	ldrb	r3, [r3, #0]
 8013448:	b2db      	uxtb	r3, r3
 801344a:	3310      	adds	r3, #16
 801344c:	b2da      	uxtb	r2, r3
 801344e:	4b53      	ldr	r3, [pc, #332]	; (801359c <Update_Blink+0xe20>)
 8013450:	2103      	movs	r1, #3
 8013452:	f7fa fd93 	bl	800df7c <DispStr>
      break;
 8013456:	e086      	b.n	8013566 <Update_Blink+0xdea>

    case RESTORE:
      SetColor(GRY, TCOLOR[ST]);
 8013458:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 801345c:	4619      	mov	r1, r3
 801345e:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013462:	f7fa fd73 	bl	800df4c <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 8013466:	4b47      	ldr	r3, [pc, #284]	; (8013584 <Update_Blink+0xe08>)
 8013468:	781b      	ldrb	r3, [r3, #0]
 801346a:	b2d8      	uxtb	r0, r3
 801346c:	89bb      	ldrh	r3, [r7, #12]
 801346e:	4a46      	ldr	r2, [pc, #280]	; (8013588 <Update_Blink+0xe0c>)
 8013470:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013474:	b29b      	uxth	r3, r3
 8013476:	3b03      	subs	r3, #3
 8013478:	b29b      	uxth	r3, r3
 801347a:	b219      	sxth	r1, r3
 801347c:	2336      	movs	r3, #54	; 0x36
 801347e:	9301      	str	r3, [sp, #4]
 8013480:	2300      	movs	r3, #0
 8013482:	9300      	str	r3, [sp, #0]
 8013484:	230b      	movs	r3, #11
 8013486:	2203      	movs	r2, #3
 8013488:	f7fa fe4e 	bl	800e128 <Draw_Circle_D>
      DispStr( S_X[i]+0, LABLE_Y, Twink+PRN,  "Press:   ");
 801348c:	89bb      	ldrh	r3, [r7, #12]
 801348e:	4a3e      	ldr	r2, [pc, #248]	; (8013588 <Update_Blink+0xe0c>)
 8013490:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8013494:	4b3b      	ldr	r3, [pc, #236]	; (8013584 <Update_Blink+0xe08>)
 8013496:	781b      	ldrb	r3, [r3, #0]
 8013498:	b2da      	uxtb	r2, r3
 801349a:	4b3f      	ldr	r3, [pc, #252]	; (8013598 <Update_Blink+0xe1c>)
 801349c:	2103      	movs	r1, #3
 801349e:	f7fa fd6d 	bl	800df7c <DispStr>
      DispStr( S_X[i]+40, LABLE_Y, Twink+SYMB, "{|");//������ͣͼ��
 80134a2:	89bb      	ldrh	r3, [r7, #12]
 80134a4:	4a38      	ldr	r2, [pc, #224]	; (8013588 <Update_Blink+0xe0c>)
 80134a6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80134aa:	b29b      	uxth	r3, r3
 80134ac:	3328      	adds	r3, #40	; 0x28
 80134ae:	b29b      	uxth	r3, r3
 80134b0:	b218      	sxth	r0, r3
 80134b2:	4b34      	ldr	r3, [pc, #208]	; (8013584 <Update_Blink+0xe08>)
 80134b4:	781b      	ldrb	r3, [r3, #0]
 80134b6:	b2db      	uxtb	r3, r3
 80134b8:	3310      	adds	r3, #16
 80134ba:	b2da      	uxtb	r2, r3
 80134bc:	4b37      	ldr	r3, [pc, #220]	; (801359c <Update_Blink+0xe20>)
 80134be:	2103      	movs	r1, #3
 80134c0:	f7fa fd5c 	bl	800df7c <DispStr>
      break;
 80134c4:	e04f      	b.n	8013566 <Update_Blink+0xdea>

    case STANDBY:
      SetColor(GRY, TCOLOR[ST]);
 80134c6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80134ca:	4619      	mov	r1, r3
 80134cc:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80134d0:	f7fa fd3c 	bl	800df4c <SetColor>
      Value2Str(NumStr, List[STANDBY].Val, NSTR[0], 2, UNSIGN);
 80134d4:	4b29      	ldr	r3, [pc, #164]	; (801357c <Update_Blink+0xe00>)
 80134d6:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 80134da:	4619      	mov	r1, r3
 80134dc:	2301      	movs	r3, #1
 80134de:	9300      	str	r3, [sp, #0]
 80134e0:	2302      	movs	r3, #2
 80134e2:	4a2f      	ldr	r2, [pc, #188]	; (80135a0 <Update_Blink+0xe24>)
 80134e4:	4826      	ldr	r0, [pc, #152]	; (8013580 <Update_Blink+0xe04>)
 80134e6:	f7fe fc21 	bl	8011d2c <Value2Str>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 80134ea:	4b26      	ldr	r3, [pc, #152]	; (8013584 <Update_Blink+0xe08>)
 80134ec:	781b      	ldrb	r3, [r3, #0]
 80134ee:	b2d8      	uxtb	r0, r3
 80134f0:	89bb      	ldrh	r3, [r7, #12]
 80134f2:	4a25      	ldr	r2, [pc, #148]	; (8013588 <Update_Blink+0xe0c>)
 80134f4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80134f8:	b29b      	uxth	r3, r3
 80134fa:	3b03      	subs	r3, #3
 80134fc:	b29b      	uxth	r3, r3
 80134fe:	b219      	sxth	r1, r3
 8013500:	2336      	movs	r3, #54	; 0x36
 8013502:	9301      	str	r3, [sp, #4]
 8013504:	2300      	movs	r3, #0
 8013506:	9300      	str	r3, [sp, #0]
 8013508:	230b      	movs	r3, #11
 801350a:	2203      	movs	r2, #3
 801350c:	f7fa fe0c 	bl	800e128 <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink+PRN,  " ");
 8013510:	89bb      	ldrh	r3, [r7, #12]
 8013512:	4a1d      	ldr	r2, [pc, #116]	; (8013588 <Update_Blink+0xe0c>)
 8013514:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8013518:	4b1a      	ldr	r3, [pc, #104]	; (8013584 <Update_Blink+0xe08>)
 801351a:	781b      	ldrb	r3, [r3, #0]
 801351c:	b2da      	uxtb	r2, r3
 801351e:	4b21      	ldr	r3, [pc, #132]	; (80135a4 <Update_Blink+0xe28>)
 8013520:	2103      	movs	r1, #3
 8013522:	f7fa fd2b 	bl	800df7c <DispStr>
      DispStr(S_X[i]+6, LABLE_Y, Twink+PRN,  (char *)NumStr);
 8013526:	89bb      	ldrh	r3, [r7, #12]
 8013528:	4a17      	ldr	r2, [pc, #92]	; (8013588 <Update_Blink+0xe0c>)
 801352a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801352e:	b29b      	uxth	r3, r3
 8013530:	3306      	adds	r3, #6
 8013532:	b29b      	uxth	r3, r3
 8013534:	b218      	sxth	r0, r3
 8013536:	4b13      	ldr	r3, [pc, #76]	; (8013584 <Update_Blink+0xe08>)
 8013538:	781b      	ldrb	r3, [r3, #0]
 801353a:	b2da      	uxtb	r2, r3
 801353c:	4b10      	ldr	r3, [pc, #64]	; (8013580 <Update_Blink+0xe04>)
 801353e:	2103      	movs	r1, #3
 8013540:	f7fa fd1c 	bl	800df7c <DispStr>
      DispStr(S_X[i]+30, LABLE_Y, Twink+PRN,  "min ");
 8013544:	89bb      	ldrh	r3, [r7, #12]
 8013546:	4a10      	ldr	r2, [pc, #64]	; (8013588 <Update_Blink+0xe0c>)
 8013548:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801354c:	b29b      	uxth	r3, r3
 801354e:	331e      	adds	r3, #30
 8013550:	b29b      	uxth	r3, r3
 8013552:	b218      	sxth	r0, r3
 8013554:	4b0b      	ldr	r3, [pc, #44]	; (8013584 <Update_Blink+0xe08>)
 8013556:	781b      	ldrb	r3, [r3, #0]
 8013558:	b2da      	uxtb	r2, r3
 801355a:	4b13      	ldr	r3, [pc, #76]	; (80135a8 <Update_Blink+0xe2c>)
 801355c:	2103      	movs	r1, #3
 801355e:	f7fa fd0d 	bl	800df7c <DispStr>
      break;
 8013562:	e000      	b.n	8013566 <Update_Blink+0xdea>
      break;
 8013564:	bf00      	nop

    }
    if(i != V0_POSI)  ParamTab[P1F]   = L_HID ;//0513
 8013566:	89bb      	ldrh	r3, [r7, #12]
 8013568:	2b03      	cmp	r3, #3
 801356a:	d002      	beq.n	8013572 <Update_Blink+0xdf6>
 801356c:	4b09      	ldr	r3, [pc, #36]	; (8013594 <Update_Blink+0xe18>)
 801356e:	2202      	movs	r2, #2
 8013570:	801a      	strh	r2, [r3, #0]
  }
}
 8013572:	bf00      	nop
 8013574:	3714      	adds	r7, #20
 8013576:	46bd      	mov	sp, r7
 8013578:	bd90      	pop	{r4, r7, pc}
 801357a:	bf00      	nop
 801357c:	2000029c 	.word	0x2000029c
 8013580:	20002844 	.word	0x20002844
 8013584:	20000780 	.word	0x20000780
 8013588:	0800215c 	.word	0x0800215c
 801358c:	080009a8 	.word	0x080009a8
 8013590:	080009b0 	.word	0x080009b0
 8013594:	20000144 	.word	0x20000144
 8013598:	080009b4 	.word	0x080009b4
 801359c:	080009c0 	.word	0x080009c0
 80135a0:	2000054c 	.word	0x2000054c
 80135a4:	080009c4 	.word	0x080009c4
 80135a8:	080009c8 	.word	0x080009c8

080135ac <Update_Detail>:
/*******************************************************************************
 Update_Detail:
*******************************************************************************/
void Update_Detail(void)
{
 80135ac:	b590      	push	{r4, r7, lr}
 80135ae:	b089      	sub	sp, #36	; 0x24
 80135b0:	af02      	add	r7, sp, #8
  long scale = 0;
 80135b2:	2300      	movs	r3, #0
 80135b4:	60bb      	str	r3, [r7, #8]
  int  Ak = (KgA[KindA+(StateA?1:0)]*4)/GK[GainA];
 80135b6:	4ba9      	ldr	r3, [pc, #676]	; (801385c <Update_Detail+0x2b0>)
 80135b8:	681a      	ldr	r2, [r3, #0]
 80135ba:	4ba9      	ldr	r3, [pc, #676]	; (8013860 <Update_Detail+0x2b4>)
 80135bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80135c0:	4619      	mov	r1, r3
 80135c2:	4ba8      	ldr	r3, [pc, #672]	; (8013864 <Update_Detail+0x2b8>)
 80135c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	bf14      	ite	ne
 80135cc:	2301      	movne	r3, #1
 80135ce:	2300      	moveq	r3, #0
 80135d0:	b2db      	uxtb	r3, r3
 80135d2:	440b      	add	r3, r1
 80135d4:	005b      	lsls	r3, r3, #1
 80135d6:	4413      	add	r3, r2
 80135d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80135dc:	009b      	lsls	r3, r3, #2
 80135de:	4aa2      	ldr	r2, [pc, #648]	; (8013868 <Update_Detail+0x2bc>)
 80135e0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80135e4:	4611      	mov	r1, r2
 80135e6:	4aa1      	ldr	r2, [pc, #644]	; (801386c <Update_Detail+0x2c0>)
 80135e8:	5c52      	ldrb	r2, [r2, r1]
 80135ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80135ee:	607b      	str	r3, [r7, #4]
  unsigned short i, k = HighT+LowT;
 80135f0:	4b9f      	ldr	r3, [pc, #636]	; (8013870 <Update_Detail+0x2c4>)
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	b29a      	uxth	r2, r3
 80135f6:	4b9f      	ldr	r3, [pc, #636]	; (8013874 <Update_Detail+0x2c8>)
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	b29b      	uxth	r3, r3
 80135fc:	4413      	add	r3, r2
 80135fe:	807b      	strh	r3, [r7, #2]
  long Tmp = 0;
 8013600:	2300      	movs	r3, #0
 8013602:	613b      	str	r3, [r7, #16]
  short Range = List[Y_RANGES].Val + 10*List[PROBEATT].Val;
 8013604:	4b9c      	ldr	r3, [pc, #624]	; (8013878 <Update_Detail+0x2cc>)
 8013606:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801360a:	b29a      	uxth	r2, r3
 801360c:	4b9a      	ldr	r3, [pc, #616]	; (8013878 <Update_Detail+0x2cc>)
 801360e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8013612:	b29b      	uxth	r3, r3
 8013614:	4619      	mov	r1, r3
 8013616:	0089      	lsls	r1, r1, #2
 8013618:	440b      	add	r3, r1
 801361a:	005b      	lsls	r3, r3, #1
 801361c:	b29b      	uxth	r3, r3
 801361e:	4413      	add	r3, r2
 8013620:	b29b      	uxth	r3, r3
 8013622:	803b      	strh	r3, [r7, #0]
  unsigned long FTmp;

  for(i=Y_RANGES; i<=STANDBY; i++){
 8013624:	2300      	movs	r3, #0
 8013626:	82fb      	strh	r3, [r7, #22]
 8013628:	f000 bfb3 	b.w	8014592 <Update_Detail+0xfe6>
    if(i==FREQUENC)
 801362c:	8afb      	ldrh	r3, [r7, #22]
 801362e:	2b13      	cmp	r3, #19
 8013630:	d118      	bne.n	8013664 <Update_Detail+0xb8>
    {
      if(Freq_Cnt > 10){
 8013632:	4b92      	ldr	r3, [pc, #584]	; (801387c <Update_Detail+0x2d0>)
 8013634:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013638:	2b0a      	cmp	r3, #10
 801363a:	dd0a      	ble.n	8013652 <Update_Detail+0xa6>
        Freq_Cnt = 0;
 801363c:	4b8f      	ldr	r3, [pc, #572]	; (801387c <Update_Detail+0x2d0>)
 801363e:	2200      	movs	r2, #0
 8013640:	801a      	strh	r2, [r3, #0]
        Freq_Flag |= UPD;
 8013642:	4b8f      	ldr	r3, [pc, #572]	; (8013880 <Update_Detail+0x2d4>)
 8013644:	781b      	ldrb	r3, [r3, #0]
 8013646:	f043 0320 	orr.w	r3, r3, #32
 801364a:	b2da      	uxtb	r2, r3
 801364c:	4b8c      	ldr	r3, [pc, #560]	; (8013880 <Update_Detail+0x2d4>)
 801364e:	701a      	strb	r2, [r3, #0]
 8013650:	e008      	b.n	8013664 <Update_Detail+0xb8>
      }
      else Freq_Cnt++;
 8013652:	4b8a      	ldr	r3, [pc, #552]	; (801387c <Update_Detail+0x2d0>)
 8013654:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013658:	b29b      	uxth	r3, r3
 801365a:	3301      	adds	r3, #1
 801365c:	b29b      	uxth	r3, r3
 801365e:	b21a      	sxth	r2, r3
 8013660:	4b86      	ldr	r3, [pc, #536]	; (801387c <Update_Detail+0x2d0>)
 8013662:	801a      	strh	r2, [r3, #0]
    }

    if(List[i].Flg & UPD){
 8013664:	8afb      	ldrh	r3, [r7, #22]
 8013666:	4a84      	ldr	r2, [pc, #528]	; (8013878 <Update_Detail+0x2cc>)
 8013668:	00db      	lsls	r3, r3, #3
 801366a:	4413      	add	r3, r2
 801366c:	799b      	ldrb	r3, [r3, #6]
 801366e:	f003 0320 	and.w	r3, r3, #32
 8013672:	2b00      	cmp	r3, #0
 8013674:	f000 878a 	beq.w	801458c <Update_Detail+0xfe0>
      List[i].Flg &= ~UPD;
 8013678:	8afb      	ldrh	r3, [r7, #22]
 801367a:	4a7f      	ldr	r2, [pc, #508]	; (8013878 <Update_Detail+0x2cc>)
 801367c:	00db      	lsls	r3, r3, #3
 801367e:	4413      	add	r3, r2
 8013680:	799a      	ldrb	r2, [r3, #6]
 8013682:	8afb      	ldrh	r3, [r7, #22]
 8013684:	f022 0220 	bic.w	r2, r2, #32
 8013688:	b2d1      	uxtb	r1, r2
 801368a:	4a7b      	ldr	r2, [pc, #492]	; (8013878 <Update_Detail+0x2cc>)
 801368c:	00db      	lsls	r3, r3, #3
 801368e:	4413      	add	r3, r2
 8013690:	460a      	mov	r2, r1
 8013692:	719a      	strb	r2, [r3, #6]
      switch (i){
 8013694:	8afb      	ldrh	r3, [r7, #22]
 8013696:	2b29      	cmp	r3, #41	; 0x29
 8013698:	f200 8739 	bhi.w	801450e <Update_Detail+0xf62>
 801369c:	a201      	add	r2, pc, #4	; (adr r2, 80136a4 <Update_Detail+0xf8>)
 801369e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136a2:	bf00      	nop
 80136a4:	0801374d 	.word	0x0801374d
 80136a8:	0801374d 	.word	0x0801374d
 80136ac:	0801374d 	.word	0x0801374d
 80136b0:	0801374d 	.word	0x0801374d
 80136b4:	0801374d 	.word	0x0801374d
 80136b8:	0801374d 	.word	0x0801374d
 80136bc:	0801374d 	.word	0x0801374d
 80136c0:	08013f55 	.word	0x08013f55
 80136c4:	08013f55 	.word	0x08013f55
 80136c8:	08013f55 	.word	0x08013f55
 80136cc:	08013f55 	.word	0x08013f55
 80136d0:	08013f55 	.word	0x08013f55
 80136d4:	08013f55 	.word	0x08013f55
 80136d8:	08013deb 	.word	0x08013deb
 80136dc:	08013deb 	.word	0x08013deb
 80136e0:	08013deb 	.word	0x08013deb
 80136e4:	08013deb 	.word	0x08013deb
 80136e8:	08013deb 	.word	0x08013deb
 80136ec:	08013deb 	.word	0x08013deb
 80136f0:	080141ad 	.word	0x080141ad
 80136f4:	08014221 	.word	0x08014221
 80136f8:	08014241 	.word	0x08014241
 80136fc:	08014347 	.word	0x08014347
 8013700:	080142b7 	.word	0x080142b7
 8013704:	080143cd 	.word	0x080143cd
 8013708:	08014453 	.word	0x08014453
 801370c:	08013ccf 	.word	0x08013ccf
 8013710:	08013ccf 	.word	0x08013ccf
 8013714:	08013d67 	.word	0x08013d67
 8013718:	08013a4d 	.word	0x08013a4d
 801371c:	08013a4d 	.word	0x08013a4d
 8013720:	08013a4d 	.word	0x08013a4d
 8013724:	08013a4d 	.word	0x08013a4d
 8013728:	08013a4d 	.word	0x08013a4d
 801372c:	08013a4d 	.word	0x08013a4d
 8013730:	08013a4d 	.word	0x08013a4d
 8013734:	08013afd 	.word	0x08013afd
 8013738:	08013be9 	.word	0x08013be9
 801373c:	08013c8b 	.word	0x08013c8b
 8013740:	0801450f 	.word	0x0801450f
 8013744:	0801450f 	.word	0x0801450f
 8013748:	0801450f 	.word	0x0801450f
      case COUPLING:   // ˢ����ʾ���ģʽ״̬
      case V0_POSI:    // ˢ����ʾ��ֱƫ��λ��
      case V1_POSI:    // ˢ����ʾ��λ�α�λ��
      case V2_POSI:    // ˢ����ʾ��λ�α�λ��
      case YN_TYPE:    // ˢ����ʾ�α���ʽ
        SetColor(GRY, TCOLOR[YN]);
 801374c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8013750:	4619      	mov	r1, r3
 8013752:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013756:	f7fa fbf9 	bl	800df4c <SetColor>
        if(i == Y_RANGES || i == COUPLING||i == PROBEATT)
 801375a:	8afb      	ldrh	r3, [r7, #22]
 801375c:	2b00      	cmp	r3, #0
 801375e:	d005      	beq.n	801376c <Update_Detail+0x1c0>
 8013760:	8afb      	ldrh	r3, [r7, #22]
 8013762:	2b01      	cmp	r3, #1
 8013764:	d002      	beq.n	801376c <Update_Detail+0x1c0>
 8013766:	8afb      	ldrh	r3, [r7, #22]
 8013768:	2b02      	cmp	r3, #2
 801376a:	d138      	bne.n	80137de <Update_Detail+0x232>
        {
      Draw_Circle_D(INV, S_X[Y_RANGES]-3, TITLE_Y_POS, 11, 0, 6*7);
 801376c:	232f      	movs	r3, #47	; 0x2f
 801376e:	b29b      	uxth	r3, r3
 8013770:	3b03      	subs	r3, #3
 8013772:	b29b      	uxth	r3, r3
 8013774:	b219      	sxth	r1, r3
 8013776:	232a      	movs	r3, #42	; 0x2a
 8013778:	9301      	str	r3, [sp, #4]
 801377a:	2300      	movs	r3, #0
 801377c:	9300      	str	r3, [sp, #0]
 801377e:	230b      	movs	r3, #11
 8013780:	22e1      	movs	r2, #225	; 0xe1
 8013782:	2001      	movs	r0, #1
 8013784:	f7fa fcd0 	bl	800e128 <Draw_Circle_D>
      DispStr(S_X[Y_RANGES], TITLE_Y_POS, INV,      (List[Y_RANGES].PTR +(Range)*6));
 8013788:	202f      	movs	r0, #47	; 0x2f
 801378a:	4b3b      	ldr	r3, [pc, #236]	; (8013878 <Update_Detail+0x2cc>)
 801378c:	6819      	ldr	r1, [r3, #0]
 801378e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8013792:	4613      	mov	r3, r2
 8013794:	005b      	lsls	r3, r3, #1
 8013796:	4413      	add	r3, r2
 8013798:	005b      	lsls	r3, r3, #1
 801379a:	440b      	add	r3, r1
 801379c:	2201      	movs	r2, #1
 801379e:	21e1      	movs	r1, #225	; 0xe1
 80137a0:	f7fa fbec 	bl	800df7c <DispStr>
      DispStr(S_X[COUPLING], TITLE_Y_POS, INV,      (List[COUPLING].PTR +(List[COUPLING].Val)*6));
 80137a4:	2047      	movs	r0, #71	; 0x47
 80137a6:	4b34      	ldr	r3, [pc, #208]	; (8013878 <Update_Detail+0x2cc>)
 80137a8:	689a      	ldr	r2, [r3, #8]
 80137aa:	4b33      	ldr	r3, [pc, #204]	; (8013878 <Update_Detail+0x2cc>)
 80137ac:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80137b0:	4619      	mov	r1, r3
 80137b2:	460b      	mov	r3, r1
 80137b4:	005b      	lsls	r3, r3, #1
 80137b6:	440b      	add	r3, r1
 80137b8:	005b      	lsls	r3, r3, #1
 80137ba:	4413      	add	r3, r2
 80137bc:	2201      	movs	r2, #1
 80137be:	21e1      	movs	r1, #225	; 0xe1
 80137c0:	f7fa fbdc 	bl	800df7c <DispStr>
      DispStr10x14(S_X[PROBEATT], TITLE_Y_POS, PRN+SYMB,(List[PROBEATT].Val?("A"):("B")));
 80137c4:	2020      	movs	r0, #32
 80137c6:	4b2c      	ldr	r3, [pc, #176]	; (8013878 <Update_Detail+0x2cc>)
 80137c8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d001      	beq.n	80137d4 <Update_Detail+0x228>
 80137d0:	4b2c      	ldr	r3, [pc, #176]	; (8013884 <Update_Detail+0x2d8>)
 80137d2:	e000      	b.n	80137d6 <Update_Detail+0x22a>
 80137d4:	4b2c      	ldr	r3, [pc, #176]	; (8013888 <Update_Detail+0x2dc>)
 80137d6:	2210      	movs	r2, #16
 80137d8:	21e1      	movs	r1, #225	; 0xe1
 80137da:	f7fa fe37 	bl	800e44c <DispStr10x14>
        }
        ParamTab[P1x2] = 2*((List[V0_POSI].Val+1));
 80137de:	4b26      	ldr	r3, [pc, #152]	; (8013878 <Update_Detail+0x2cc>)
 80137e0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80137e4:	3301      	adds	r3, #1
 80137e6:	b29b      	uxth	r3, r3
 80137e8:	005b      	lsls	r3, r3, #1
 80137ea:	b29b      	uxth	r3, r3
 80137ec:	b21a      	sxth	r2, r3
 80137ee:	4b27      	ldr	r3, [pc, #156]	; (801388c <Update_Detail+0x2e0>)
 80137f0:	829a      	strh	r2, [r3, #20]
        ParamTab[VTx2] = ParamTab[P1x2]+ 2*(List[THRESHOLD].Val+1);
 80137f2:	4b26      	ldr	r3, [pc, #152]	; (801388c <Update_Detail+0x2e0>)
 80137f4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80137f8:	b29a      	uxth	r2, r3
 80137fa:	4b1f      	ldr	r3, [pc, #124]	; (8013878 <Update_Detail+0x2cc>)
 80137fc:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8013800:	3301      	adds	r3, #1
 8013802:	b29b      	uxth	r3, r3
 8013804:	005b      	lsls	r3, r3, #1
 8013806:	b29b      	uxth	r3, r3
 8013808:	4413      	add	r3, r2
 801380a:	b29b      	uxth	r3, r3
 801380c:	b21a      	sxth	r2, r3
 801380e:	4b1f      	ldr	r3, [pc, #124]	; (801388c <Update_Detail+0x2e0>)
 8013810:	839a      	strh	r2, [r3, #28]
        ParamTab[V1x2] = 2*(List[V1_POSI].Val+1);
 8013812:	4b19      	ldr	r3, [pc, #100]	; (8013878 <Update_Detail+0x2cc>)
 8013814:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8013818:	3301      	adds	r3, #1
 801381a:	b29b      	uxth	r3, r3
 801381c:	005b      	lsls	r3, r3, #1
 801381e:	b29b      	uxth	r3, r3
 8013820:	b21a      	sxth	r2, r3
 8013822:	4b1a      	ldr	r3, [pc, #104]	; (801388c <Update_Detail+0x2e0>)
 8013824:	83da      	strh	r2, [r3, #30]
        ParamTab[V2x2] = 2*(List[V2_POSI].Val+1);
 8013826:	4b14      	ldr	r3, [pc, #80]	; (8013878 <Update_Detail+0x2cc>)
 8013828:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 801382c:	3301      	adds	r3, #1
 801382e:	b29b      	uxth	r3, r3
 8013830:	005b      	lsls	r3, r3, #1
 8013832:	b29b      	uxth	r3, r3
 8013834:	b21a      	sxth	r2, r3
 8013836:	4b15      	ldr	r3, [pc, #84]	; (801388c <Update_Detail+0x2e0>)
 8013838:	841a      	strh	r2, [r3, #32]
        ParamTab[V1F]  = (List[YN_TYPE].Val)? L_HID : SHOW;
 801383a:	4b0f      	ldr	r3, [pc, #60]	; (8013878 <Update_Detail+0x2cc>)
 801383c:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8013840:	2b00      	cmp	r3, #0
 8013842:	d001      	beq.n	8013848 <Update_Detail+0x29c>
 8013844:	2202      	movs	r2, #2
 8013846:	e000      	b.n	801384a <Update_Detail+0x29e>
 8013848:	2200      	movs	r2, #0
 801384a:	4b10      	ldr	r3, [pc, #64]	; (801388c <Update_Detail+0x2e0>)
 801384c:	815a      	strh	r2, [r3, #10]
        ParamTab[V2F]  = (List[YN_TYPE].Val)? L_HID : SHOW;
 801384e:	4b0a      	ldr	r3, [pc, #40]	; (8013878 <Update_Detail+0x2cc>)
 8013850:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8013854:	2b00      	cmp	r3, #0
 8013856:	d01b      	beq.n	8013890 <Update_Detail+0x2e4>
 8013858:	2202      	movs	r2, #2
 801385a:	e01a      	b.n	8013892 <Update_Detail+0x2e6>
 801385c:	20000580 	.word	0x20000580
 8013860:	2000688e 	.word	0x2000688e
 8013864:	2000286a 	.word	0x2000286a
 8013868:	20002852 	.word	0x20002852
 801386c:	20000564 	.word	0x20000564
 8013870:	20006880 	.word	0x20006880
 8013874:	20006894 	.word	0x20006894
 8013878:	2000029c 	.word	0x2000029c
 801387c:	200007ac 	.word	0x200007ac
 8013880:	200001d0 	.word	0x200001d0
 8013884:	08000958 	.word	0x08000958
 8013888:	0800095c 	.word	0x0800095c
 801388c:	20000144 	.word	0x20000144
 8013890:	2200      	movs	r2, #0
 8013892:	4ba6      	ldr	r3, [pc, #664]	; (8013b2c <Update_Detail+0x580>)
 8013894:	819a      	strh	r2, [r3, #12]

        Tmp  =(ParamTab[V1x2]- ParamTab[V2x2])/2;         // ˢ����ʾV2-V1��ֵ
 8013896:	4ba5      	ldr	r3, [pc, #660]	; (8013b2c <Update_Detail+0x580>)
 8013898:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801389c:	461a      	mov	r2, r3
 801389e:	4ba3      	ldr	r3, [pc, #652]	; (8013b2c <Update_Detail+0x580>)
 80138a0:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80138a4:	1ad3      	subs	r3, r2, r3
 80138a6:	0fda      	lsrs	r2, r3, #31
 80138a8:	4413      	add	r3, r2
 80138aa:	105b      	asrs	r3, r3, #1
 80138ac:	613b      	str	r3, [r7, #16]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 80138ae:	f9b7 3000 	ldrsh.w	r3, [r7]
 80138b2:	4a9f      	ldr	r2, [pc, #636]	; (8013b30 <Update_Detail+0x584>)
 80138b4:	5cd3      	ldrb	r3, [r2, r3]
 80138b6:	461c      	mov	r4, r3
 80138b8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80138bc:	4a9d      	ldr	r2, [pc, #628]	; (8013b34 <Update_Detail+0x588>)
 80138be:	5cd3      	ldrb	r3, [r2, r3]
 80138c0:	4618      	mov	r0, r3
 80138c2:	f7fe fb2f 	bl	8011f24 <Exp>
 80138c6:	4603      	mov	r3, r0
 80138c8:	fb03 f204 	mul.w	r2, r3, r4
 80138cc:	693b      	ldr	r3, [r7, #16]
 80138ce:	fb02 f303 	mul.w	r3, r2, r3
 80138d2:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp, V[0], 3, UNSIGN);
 80138d4:	2301      	movs	r3, #1
 80138d6:	9300      	str	r3, [sp, #0]
 80138d8:	2303      	movs	r3, #3
 80138da:	4a97      	ldr	r2, [pc, #604]	; (8013b38 <Update_Detail+0x58c>)
 80138dc:	6939      	ldr	r1, [r7, #16]
 80138de:	4897      	ldr	r0, [pc, #604]	; (8013b3c <Update_Detail+0x590>)
 80138e0:	f7fe fa24 	bl	8011d2c <Value2Str>
        Draw_Circle_D(INV, S_X[V1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 80138e4:	2307      	movs	r3, #7
 80138e6:	b29b      	uxth	r3, r3
 80138e8:	3b03      	subs	r3, #3
 80138ea:	b29b      	uxth	r3, r3
 80138ec:	b219      	sxth	r1, r3
 80138ee:	2336      	movs	r3, #54	; 0x36
 80138f0:	9301      	str	r3, [sp, #4]
 80138f2:	2300      	movs	r3, #0
 80138f4:	9300      	str	r3, [sp, #0]
 80138f6:	230b      	movs	r3, #11
 80138f8:	2203      	movs	r2, #3
 80138fa:	2001      	movs	r0, #1
 80138fc:	f7fa fc14 	bl	800e128 <Draw_Circle_D>
        DispStr(S_X[V1_POSI]+0*6, LABLE_Y, INV+SYMB, "]");
 8013900:	2007      	movs	r0, #7
 8013902:	4b8f      	ldr	r3, [pc, #572]	; (8013b40 <Update_Detail+0x594>)
 8013904:	2211      	movs	r2, #17
 8013906:	2103      	movs	r1, #3
 8013908:	f7fa fb38 	bl	800df7c <DispStr>
        DispStr(S_X[V1_POSI]+1*6, LABLE_Y, INV,      "V:      ");
 801390c:	2307      	movs	r3, #7
 801390e:	b29b      	uxth	r3, r3
 8013910:	3306      	adds	r3, #6
 8013912:	b29b      	uxth	r3, r3
 8013914:	b218      	sxth	r0, r3
 8013916:	4b8b      	ldr	r3, [pc, #556]	; (8013b44 <Update_Detail+0x598>)
 8013918:	2201      	movs	r2, #1
 801391a:	2103      	movs	r1, #3
 801391c:	f7fa fb2e 	bl	800df7c <DispStr>
        DispStr(S_X[V1_POSI]+7*6, LABLE_Y, INV,  "  ");
 8013920:	2307      	movs	r3, #7
 8013922:	b29b      	uxth	r3, r3
 8013924:	332a      	adds	r3, #42	; 0x2a
 8013926:	b29b      	uxth	r3, r3
 8013928:	b218      	sxth	r0, r3
 801392a:	4b87      	ldr	r3, [pc, #540]	; (8013b48 <Update_Detail+0x59c>)
 801392c:	2201      	movs	r2, #1
 801392e:	2103      	movs	r1, #3
 8013930:	f7fa fb24 	bl	800df7c <DispStr>
        DispStr(S_X[V1_POSI]+3*6, LABLE_Y, INV,  (char *)NumStr);
 8013934:	2307      	movs	r3, #7
 8013936:	b29b      	uxth	r3, r3
 8013938:	3312      	adds	r3, #18
 801393a:	b29b      	uxth	r3, r3
 801393c:	b218      	sxth	r0, r3
 801393e:	4b7f      	ldr	r3, [pc, #508]	; (8013b3c <Update_Detail+0x590>)
 8013940:	2201      	movs	r2, #1
 8013942:	2103      	movs	r1, #3
 8013944:	f7fa fb1a 	bl	800df7c <DispStr>

        SetColor(GRY, TCOLOR[TRG]);
 8013948:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 801394c:	4619      	mov	r1, r3
 801394e:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013952:	f7fa fafb 	bl	800df4c <SetColor>
        Tmp  = List[SENSITIVE].Val;                       // ˢ����ʾ�����ز�ֵ
 8013956:	4b7d      	ldr	r3, [pc, #500]	; (8013b4c <Update_Detail+0x5a0>)
 8013958:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 801395c:	613b      	str	r3, [r7, #16]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 801395e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013962:	4a73      	ldr	r2, [pc, #460]	; (8013b30 <Update_Detail+0x584>)
 8013964:	5cd3      	ldrb	r3, [r2, r3]
 8013966:	461c      	mov	r4, r3
 8013968:	f9b7 3000 	ldrsh.w	r3, [r7]
 801396c:	4a71      	ldr	r2, [pc, #452]	; (8013b34 <Update_Detail+0x588>)
 801396e:	5cd3      	ldrb	r3, [r2, r3]
 8013970:	4618      	mov	r0, r3
 8013972:	f7fe fad7 	bl	8011f24 <Exp>
 8013976:	4603      	mov	r3, r0
 8013978:	fb03 f204 	mul.w	r2, r3, r4
 801397c:	693b      	ldr	r3, [r7, #16]
 801397e:	fb02 f303 	mul.w	r3, r2, r3
 8013982:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp,V[0], 2, UNSIGN);
 8013984:	2301      	movs	r3, #1
 8013986:	9300      	str	r3, [sp, #0]
 8013988:	2302      	movs	r3, #2
 801398a:	4a6b      	ldr	r2, [pc, #428]	; (8013b38 <Update_Detail+0x58c>)
 801398c:	6939      	ldr	r1, [r7, #16]
 801398e:	486b      	ldr	r0, [pc, #428]	; (8013b3c <Update_Detail+0x590>)
 8013990:	f7fe f9cc 	bl	8011d2c <Value2Str>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  "     ");
 8013994:	23e7      	movs	r3, #231	; 0xe7
 8013996:	b29b      	uxth	r3, r3
 8013998:	3309      	adds	r3, #9
 801399a:	b29b      	uxth	r3, r3
 801399c:	b218      	sxth	r0, r3
 801399e:	4b6c      	ldr	r3, [pc, #432]	; (8013b50 <Update_Detail+0x5a4>)
 80139a0:	2201      	movs	r2, #1
 80139a2:	21e1      	movs	r1, #225	; 0xe1
 80139a4:	f7fa faea 	bl	800df7c <DispStr>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  (char *)NumStr);
 80139a8:	23e7      	movs	r3, #231	; 0xe7
 80139aa:	b29b      	uxth	r3, r3
 80139ac:	3309      	adds	r3, #9
 80139ae:	b29b      	uxth	r3, r3
 80139b0:	b218      	sxth	r0, r3
 80139b2:	4b62      	ldr	r3, [pc, #392]	; (8013b3c <Update_Detail+0x590>)
 80139b4:	2201      	movs	r2, #1
 80139b6:	21e1      	movs	r1, #225	; 0xe1
 80139b8:	f7fa fae0 	bl	800df7c <DispStr>
        DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, INV+SYMB,"E");
 80139bc:	20e7      	movs	r0, #231	; 0xe7
 80139be:	4b65      	ldr	r3, [pc, #404]	; (8013b54 <Update_Detail+0x5a8>)
 80139c0:	2211      	movs	r2, #17
 80139c2:	21e1      	movs	r1, #225	; 0xe1
 80139c4:	f7fa fd42 	bl	800e44c <DispStr10x14>
        GainA  = (char)List[Y_RANGES].Val;
 80139c8:	4b60      	ldr	r3, [pc, #384]	; (8013b4c <Update_Detail+0x5a0>)
 80139ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80139ce:	b2db      	uxtb	r3, r3
 80139d0:	b21a      	sxth	r2, r3
 80139d2:	4b61      	ldr	r3, [pc, #388]	; (8013b58 <Update_Detail+0x5ac>)
 80139d4:	801a      	strh	r2, [r3, #0]

        if((char)List[Y_RANGES].Val>1)
 80139d6:	4b5d      	ldr	r3, [pc, #372]	; (8013b4c <Update_Detail+0x5a0>)
 80139d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80139dc:	b2db      	uxtb	r3, r3
 80139de:	2b01      	cmp	r3, #1
 80139e0:	d903      	bls.n	80139ea <Update_Detail+0x43e>
          KindA  = HV;
 80139e2:	4b5e      	ldr	r3, [pc, #376]	; (8013b5c <Update_Detail+0x5b0>)
 80139e4:	2201      	movs	r2, #1
 80139e6:	801a      	strh	r2, [r3, #0]
 80139e8:	e002      	b.n	80139f0 <Update_Detail+0x444>
        else
          KindA  = LV;                //Ch1ѡ���ѹ���ѹ����
 80139ea:	4b5c      	ldr	r3, [pc, #368]	; (8013b5c <Update_Detail+0x5b0>)
 80139ec:	2200      	movs	r2, #0
 80139ee:	801a      	strh	r2, [r3, #0]
        StateA =  ((char)List[Y_RANGES].Val>5)?ACT: GND;
 80139f0:	4b56      	ldr	r3, [pc, #344]	; (8013b4c <Update_Detail+0x5a0>)
 80139f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80139f6:	b2db      	uxtb	r3, r3
 80139f8:	2b05      	cmp	r3, #5
 80139fa:	d901      	bls.n	8013a00 <Update_Detail+0x454>
 80139fc:	2204      	movs	r2, #4
 80139fe:	e000      	b.n	8013a02 <Update_Detail+0x456>
 8013a00:	2200      	movs	r2, #0
 8013a02:	4b57      	ldr	r3, [pc, #348]	; (8013b60 <Update_Detail+0x5b4>)
 8013a04:	801a      	strh	r2, [r3, #0]

        CouplA = (List[COUPLING].Val)? AC : DC;                      // AC);  //AC/DC��Ϸ�ʽ
 8013a06:	4b51      	ldr	r3, [pc, #324]	; (8013b4c <Update_Detail+0x5a0>)
 8013a08:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d001      	beq.n	8013a14 <Update_Detail+0x468>
 8013a10:	2200      	movs	r2, #0
 8013a12:	e000      	b.n	8013a16 <Update_Detail+0x46a>
 8013a14:	2202      	movs	r2, #2
 8013a16:	4b53      	ldr	r3, [pc, #332]	; (8013b64 <Update_Detail+0x5b8>)
 8013a18:	801a      	strh	r2, [r3, #0]
        BIOS_Ctrl(AiRANGE, KindA+CouplA+StateA);             //Ch1״̬ˢ��
 8013a1a:	4b50      	ldr	r3, [pc, #320]	; (8013b5c <Update_Detail+0x5b0>)
 8013a1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013a20:	461a      	mov	r2, r3
 8013a22:	4b50      	ldr	r3, [pc, #320]	; (8013b64 <Update_Detail+0x5b8>)
 8013a24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013a28:	4413      	add	r3, r2
 8013a2a:	4a4d      	ldr	r2, [pc, #308]	; (8013b60 <Update_Detail+0x5b4>)
 8013a2c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8013a30:	4413      	add	r3, r2
 8013a32:	4619      	mov	r1, r3
 8013a34:	2007      	movs	r0, #7
 8013a36:	f7f8 fc9d 	bl	800c374 <BIOS_Ctrl>
        AiPosi(List[V0_POSI].Val);                        //Ch1Ӳ����Ӧλ��
 8013a3a:	4b44      	ldr	r3, [pc, #272]	; (8013b4c <Update_Detail+0x5a0>)
 8013a3c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8013a40:	b2db      	uxtb	r3, r3
 8013a42:	4618      	mov	r0, r3
 8013a44:	f001 fc5c 	bl	8015300 <AiPosi>
        break;
 8013a48:	f000 bd61 	b.w	801450e <Update_Detail+0xf62>
      case SAVE_BUF:
      case SAVE_CSV:
      case SAVE_SVG:
      case LOAD_DAT: //��ʾ��ѡ��Ҫ��ȡ���ļ����
      case LOAD_BUF:
        SetColor(GRY, TCOLOR[FN]);
 8013a4c:	f64f 4310 	movw	r3, #64528	; 0xfc10
 8013a50:	4619      	mov	r1, r3
 8013a52:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013a56:	f7fa fa79 	bl	800df4c <SetColor>
        u8ToDec3(NumStr, List[i].Val);
 8013a5a:	8afb      	ldrh	r3, [r7, #22]
 8013a5c:	4a3b      	ldr	r2, [pc, #236]	; (8013b4c <Update_Detail+0x5a0>)
 8013a5e:	00db      	lsls	r3, r3, #3
 8013a60:	4413      	add	r3, r2
 8013a62:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013a66:	b2db      	uxtb	r3, r3
 8013a68:	4619      	mov	r1, r3
 8013a6a:	4834      	ldr	r0, [pc, #208]	; (8013b3c <Update_Detail+0x590>)
 8013a6c:	f7fe f8f6 	bl	8011c5c <u8ToDec3>
        Draw_Circle_D(INV, S_X[i]-3, LABLE_Y, 11, 0, 6*11);
 8013a70:	8afb      	ldrh	r3, [r7, #22]
 8013a72:	4a3d      	ldr	r2, [pc, #244]	; (8013b68 <Update_Detail+0x5bc>)
 8013a74:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013a78:	b29b      	uxth	r3, r3
 8013a7a:	3b03      	subs	r3, #3
 8013a7c:	b29b      	uxth	r3, r3
 8013a7e:	b219      	sxth	r1, r3
 8013a80:	2342      	movs	r3, #66	; 0x42
 8013a82:	9301      	str	r3, [sp, #4]
 8013a84:	2300      	movs	r3, #0
 8013a86:	9300      	str	r3, [sp, #0]
 8013a88:	230b      	movs	r3, #11
 8013a8a:	2203      	movs	r2, #3
 8013a8c:	2001      	movs	r0, #1
 8013a8e:	f7fa fb4b 	bl	800e128 <Draw_Circle_D>
        DispStr(S_X[i],    LABLE_Y, INV, ((i > SAVE_SVG)? "Load" : "Save"));//0513
 8013a92:	8afb      	ldrh	r3, [r7, #22]
 8013a94:	4a34      	ldr	r2, [pc, #208]	; (8013b68 <Update_Detail+0x5bc>)
 8013a96:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8013a9a:	8afb      	ldrh	r3, [r7, #22]
 8013a9c:	2b21      	cmp	r3, #33	; 0x21
 8013a9e:	d901      	bls.n	8013aa4 <Update_Detail+0x4f8>
 8013aa0:	4b32      	ldr	r3, [pc, #200]	; (8013b6c <Update_Detail+0x5c0>)
 8013aa2:	e000      	b.n	8013aa6 <Update_Detail+0x4fa>
 8013aa4:	4b32      	ldr	r3, [pc, #200]	; (8013b70 <Update_Detail+0x5c4>)
 8013aa6:	2201      	movs	r2, #1
 8013aa8:	2103      	movs	r1, #3
 8013aaa:	f7fa fa67 	bl	800df7c <DispStr>
        DispStr(S_X[i]+24, LABLE_Y, INV, (char *)NumStr);
 8013aae:	8afb      	ldrh	r3, [r7, #22]
 8013ab0:	4a2d      	ldr	r2, [pc, #180]	; (8013b68 <Update_Detail+0x5bc>)
 8013ab2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013ab6:	b29b      	uxth	r3, r3
 8013ab8:	3318      	adds	r3, #24
 8013aba:	b29b      	uxth	r3, r3
 8013abc:	b218      	sxth	r0, r3
 8013abe:	4b1f      	ldr	r3, [pc, #124]	; (8013b3c <Update_Detail+0x590>)
 8013ac0:	2201      	movs	r2, #1
 8013ac2:	2103      	movs	r1, #3
 8013ac4:	f7fa fa5a 	bl	800df7c <DispStr>
        DispStr(S_X[i]+42, LABLE_Y, INV, (List[i].PTR +(i - SAVE_BMP)*6));
 8013ac8:	8afb      	ldrh	r3, [r7, #22]
 8013aca:	4a27      	ldr	r2, [pc, #156]	; (8013b68 <Update_Detail+0x5bc>)
 8013acc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013ad0:	b29b      	uxth	r3, r3
 8013ad2:	332a      	adds	r3, #42	; 0x2a
 8013ad4:	b29b      	uxth	r3, r3
 8013ad6:	b218      	sxth	r0, r3
 8013ad8:	8afb      	ldrh	r3, [r7, #22]
 8013ada:	4a1c      	ldr	r2, [pc, #112]	; (8013b4c <Update_Detail+0x5a0>)
 8013adc:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8013ae0:	8afb      	ldrh	r3, [r7, #22]
 8013ae2:	f1a3 021d 	sub.w	r2, r3, #29
 8013ae6:	4613      	mov	r3, r2
 8013ae8:	005b      	lsls	r3, r3, #1
 8013aea:	4413      	add	r3, r2
 8013aec:	005b      	lsls	r3, r3, #1
 8013aee:	440b      	add	r3, r1
 8013af0:	2201      	movs	r2, #1
 8013af2:	2103      	movs	r1, #3
 8013af4:	f7fa fa42 	bl	800df7c <DispStr>
        break;
 8013af8:	f000 bd09 	b.w	801450e <Update_Detail+0xf62>

      case TPYE_OUT:
        if(List[TPYE_OUT].Val ==0) //suqar
 8013afc:	4b13      	ldr	r3, [pc, #76]	; (8013b4c <Update_Detail+0x5a0>)
 8013afe:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d136      	bne.n	8013b74 <Update_Detail+0x5c8>
        {
          BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 8013b06:	2100      	movs	r1, #0
 8013b08:	2000      	movs	r0, #0
 8013b0a:	f7f8 fc33 	bl	800c374 <BIOS_Ctrl>
          Set_Fout(List[FREQ_OUT].Val);
 8013b0e:	4b0f      	ldr	r3, [pc, #60]	; (8013b4c <Update_Detail+0x5a0>)
 8013b10:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013b14:	4618      	mov	r0, r3
 8013b16:	f7f8 fe0b 	bl	800c730 <Set_Fout>
          Set_Duty();
 8013b1a:	f7f8 fddd 	bl	800c6d8 <Set_Duty>
          BIOS_Ctrl(OUT_MOD, PULSED);             // �趨�������ģʽ
 8013b1e:	2104      	movs	r1, #4
 8013b20:	2000      	movs	r0, #0
 8013b22:	f7f8 fc27 	bl	800c374 <BIOS_Ctrl>
           BIOS_Ctrl(OUT_CNT, 180);
           BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
           BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
        }

      break;
 8013b26:	f000 bcf2 	b.w	801450e <Update_Detail+0xf62>
 8013b2a:	bf00      	nop
 8013b2c:	20000144 	.word	0x20000144
 8013b30:	08002130 	.word	0x08002130
 8013b34:	08002108 	.word	0x08002108
 8013b38:	08001d00 	.word	0x08001d00
 8013b3c:	20002844 	.word	0x20002844
 8013b40:	08000960 	.word	0x08000960
 8013b44:	08000964 	.word	0x08000964
 8013b48:	080009d0 	.word	0x080009d0
 8013b4c:	2000029c 	.word	0x2000029c
 8013b50:	08000990 	.word	0x08000990
 8013b54:	08000998 	.word	0x08000998
 8013b58:	20002852 	.word	0x20002852
 8013b5c:	2000688e 	.word	0x2000688e
 8013b60:	2000286a 	.word	0x2000286a
 8013b64:	20006890 	.word	0x20006890
 8013b68:	0800215c 	.word	0x0800215c
 8013b6c:	08000948 	.word	0x08000948
 8013b70:	08000950 	.word	0x08000950
          if(List[FREQ_OUT].Val > MAX_FREQ)
 8013b74:	4bbf      	ldr	r3, [pc, #764]	; (8013e74 <Update_Detail+0x8c8>)
 8013b76:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013b7a:	2b09      	cmp	r3, #9
 8013b7c:	dd03      	ble.n	8013b86 <Update_Detail+0x5da>
             List[FREQ_OUT].Val = MAX_FREQ ;   //10KHz
 8013b7e:	4bbd      	ldr	r3, [pc, #756]	; (8013e74 <Update_Detail+0x8c8>)
 8013b80:	2209      	movs	r2, #9
 8013b82:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
           BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 8013b86:	2100      	movs	r1, #0
 8013b88:	2000      	movs	r0, #0
 8013b8a:	f7f8 fbf3 	bl	800c374 <BIOS_Ctrl>
           htim7.Init.Prescaler = Dac_Psc[List[FREQ_OUT].Val] - 1;
 8013b8e:	4bb9      	ldr	r3, [pc, #740]	; (8013e74 <Update_Detail+0x8c8>)
 8013b90:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013b94:	461a      	mov	r2, r3
 8013b96:	4bb8      	ldr	r3, [pc, #736]	; (8013e78 <Update_Detail+0x8cc>)
 8013b98:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8013b9c:	3b01      	subs	r3, #1
 8013b9e:	461a      	mov	r2, r3
 8013ba0:	4bb6      	ldr	r3, [pc, #728]	; (8013e7c <Update_Detail+0x8d0>)
 8013ba2:	605a      	str	r2, [r3, #4]
           BIOS_Ctrl(DAC_TIM, Dac_Tim[List[FREQ_OUT].Val]-1); // 72MHz/2/180/100 = 2KHz ģ���������(ÿ����36��)
 8013ba4:	4bb3      	ldr	r3, [pc, #716]	; (8013e74 <Update_Detail+0x8c8>)
 8013ba6:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013baa:	461a      	mov	r2, r3
 8013bac:	4bb4      	ldr	r3, [pc, #720]	; (8013e80 <Update_Detail+0x8d4>)
 8013bae:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8013bb2:	3b01      	subs	r3, #1
 8013bb4:	4619      	mov	r1, r3
 8013bb6:	2001      	movs	r0, #1
 8013bb8:	f7f8 fbdc 	bl	800c374 <BIOS_Ctrl>
           BIOS_Ctrl(OUT_CNT, 180);
 8013bbc:	21b4      	movs	r1, #180	; 0xb4
 8013bbe:	2002      	movs	r0, #2
 8013bc0:	f7f8 fbd8 	bl	800c374 <BIOS_Ctrl>
           BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
 8013bc4:	4bab      	ldr	r3, [pc, #684]	; (8013e74 <Update_Detail+0x8c8>)
 8013bc6:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8013bca:	b2db      	uxtb	r3, r3
 8013bcc:	4618      	mov	r0, r3
 8013bce:	f7f8 fbbb 	bl	800c348 <BIOS_Info>
 8013bd2:	4603      	mov	r3, r0
 8013bd4:	4619      	mov	r1, r3
 8013bd6:	2003      	movs	r0, #3
 8013bd8:	f7f8 fbcc 	bl	800c374 <BIOS_Ctrl>
           BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
 8013bdc:	2102      	movs	r1, #2
 8013bde:	2000      	movs	r0, #0
 8013be0:	f7f8 fbc8 	bl	800c374 <BIOS_Ctrl>
      break;
 8013be4:	f000 bc93 	b.w	801450e <Update_Detail+0xf62>

      case FREQ_OUT: // ��ʾ�������Ƶ��
        if(List[TPYE_OUT].Val ==0) //suqar
 8013be8:	4ba2      	ldr	r3, [pc, #648]	; (8013e74 <Update_Detail+0x8c8>)
 8013bea:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d111      	bne.n	8013c16 <Update_Detail+0x66a>
        {
          BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 8013bf2:	2100      	movs	r1, #0
 8013bf4:	2000      	movs	r0, #0
 8013bf6:	f7f8 fbbd 	bl	800c374 <BIOS_Ctrl>
          Set_Fout(List[FREQ_OUT].Val);
 8013bfa:	4b9e      	ldr	r3, [pc, #632]	; (8013e74 <Update_Detail+0x8c8>)
 8013bfc:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013c00:	4618      	mov	r0, r3
 8013c02:	f7f8 fd95 	bl	800c730 <Set_Fout>
          Set_Duty();
 8013c06:	f7f8 fd67 	bl	800c6d8 <Set_Duty>
          BIOS_Ctrl(OUT_MOD, PULSED);             // �趨�������ģʽ
 8013c0a:	2104      	movs	r1, #4
 8013c0c:	2000      	movs	r0, #0
 8013c0e:	f7f8 fbb1 	bl	800c374 <BIOS_Ctrl>
          BIOS_Ctrl(DAC_TIM, Dac_Tim[List[FREQ_OUT].Val]-1); // 72MHz/2/180/100 = 2KHz ģ���������(ÿ����36��)
          BIOS_Ctrl(OUT_CNT, 180);
          BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
          BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
        }
        break;
 8013c12:	f000 bc7c 	b.w	801450e <Update_Detail+0xf62>
          if(List[FREQ_OUT].Val > MAX_FREQ)
 8013c16:	4b97      	ldr	r3, [pc, #604]	; (8013e74 <Update_Detail+0x8c8>)
 8013c18:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013c1c:	2b09      	cmp	r3, #9
 8013c1e:	dd03      	ble.n	8013c28 <Update_Detail+0x67c>
            List[FREQ_OUT].Val = MAX_FREQ ;   //10KHz
 8013c20:	4b94      	ldr	r3, [pc, #592]	; (8013e74 <Update_Detail+0x8c8>)
 8013c22:	2209      	movs	r2, #9
 8013c24:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
          BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 8013c28:	2100      	movs	r1, #0
 8013c2a:	2000      	movs	r0, #0
 8013c2c:	f7f8 fba2 	bl	800c374 <BIOS_Ctrl>
          htim7.Init.Prescaler = Dac_Psc[List[FREQ_OUT].Val] - 1;
 8013c30:	4b90      	ldr	r3, [pc, #576]	; (8013e74 <Update_Detail+0x8c8>)
 8013c32:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013c36:	461a      	mov	r2, r3
 8013c38:	4b8f      	ldr	r3, [pc, #572]	; (8013e78 <Update_Detail+0x8cc>)
 8013c3a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8013c3e:	3b01      	subs	r3, #1
 8013c40:	461a      	mov	r2, r3
 8013c42:	4b8e      	ldr	r3, [pc, #568]	; (8013e7c <Update_Detail+0x8d0>)
 8013c44:	605a      	str	r2, [r3, #4]
          BIOS_Ctrl(DAC_TIM, Dac_Tim[List[FREQ_OUT].Val]-1); // 72MHz/2/180/100 = 2KHz ģ���������(ÿ����36��)
 8013c46:	4b8b      	ldr	r3, [pc, #556]	; (8013e74 <Update_Detail+0x8c8>)
 8013c48:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013c4c:	461a      	mov	r2, r3
 8013c4e:	4b8c      	ldr	r3, [pc, #560]	; (8013e80 <Update_Detail+0x8d4>)
 8013c50:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8013c54:	3b01      	subs	r3, #1
 8013c56:	4619      	mov	r1, r3
 8013c58:	2001      	movs	r0, #1
 8013c5a:	f7f8 fb8b 	bl	800c374 <BIOS_Ctrl>
          BIOS_Ctrl(OUT_CNT, 180);
 8013c5e:	21b4      	movs	r1, #180	; 0xb4
 8013c60:	2002      	movs	r0, #2
 8013c62:	f7f8 fb87 	bl	800c374 <BIOS_Ctrl>
          BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
 8013c66:	4b83      	ldr	r3, [pc, #524]	; (8013e74 <Update_Detail+0x8c8>)
 8013c68:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8013c6c:	b2db      	uxtb	r3, r3
 8013c6e:	4618      	mov	r0, r3
 8013c70:	f7f8 fb6a 	bl	800c348 <BIOS_Info>
 8013c74:	4603      	mov	r3, r0
 8013c76:	4619      	mov	r1, r3
 8013c78:	2003      	movs	r0, #3
 8013c7a:	f7f8 fb7b 	bl	800c374 <BIOS_Ctrl>
          BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
 8013c7e:	2102      	movs	r1, #2
 8013c80:	2000      	movs	r0, #0
 8013c82:	f7f8 fb77 	bl	800c374 <BIOS_Ctrl>
        break;
 8013c86:	f000 bc42 	b.w	801450e <Update_Detail+0xf62>

      case FREQ_DUT: // ��ʾ�������ռ�ձ�
        SetColor(GRY, TCOLOR[SN]);
 8013c8a:	f240 531f 	movw	r3, #1311	; 0x51f
 8013c8e:	4619      	mov	r1, r3
 8013c90:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013c94:	f7fa f95a 	bl	800df4c <SetColor>
        Draw_Circle_D(INV, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 8013c98:	8afb      	ldrh	r3, [r7, #22]
 8013c9a:	4a7a      	ldr	r2, [pc, #488]	; (8013e84 <Update_Detail+0x8d8>)
 8013c9c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013ca0:	b29b      	uxth	r3, r3
 8013ca2:	3b03      	subs	r3, #3
 8013ca4:	b29b      	uxth	r3, r3
 8013ca6:	b219      	sxth	r1, r3
 8013ca8:	2336      	movs	r3, #54	; 0x36
 8013caa:	9301      	str	r3, [sp, #4]
 8013cac:	2300      	movs	r3, #0
 8013cae:	9300      	str	r3, [sp, #0]
 8013cb0:	230b      	movs	r3, #11
 8013cb2:	2203      	movs	r2, #3
 8013cb4:	2001      	movs	r0, #1
 8013cb6:	f7fa fa37 	bl	800e128 <Draw_Circle_D>
        if(List[TPYE_OUT].Val == 0) //suqar
 8013cba:	4b6e      	ldr	r3, [pc, #440]	; (8013e74 <Update_Detail+0x8c8>)
 8013cbc:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	f040 8423 	bne.w	801450c <Update_Detail+0xf60>
        {
          Set_Duty();
 8013cc6:	f7f8 fd07 	bl	800c6d8 <Set_Duty>
        }
        break;
 8013cca:	f000 bc1f 	b.w	801450c <Update_Detail+0xf60>

      case EXT_REFN: // ��ʾ�ο���������
      case EXT_POSI: // ��ʾ�ο�����ƫ��
        SetColor(GRY, TCOLOR[EX]);
 8013cce:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8013cd2:	4619      	mov	r1, r3
 8013cd4:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013cd8:	f7fa f938 	bl	800df4c <SetColor>
        if((i == EXT_REFN) || (i == EXT_POSI))
 8013cdc:	8afb      	ldrh	r3, [r7, #22]
 8013cde:	2b1a      	cmp	r3, #26
 8013ce0:	d002      	beq.n	8013ce8 <Update_Detail+0x73c>
 8013ce2:	8afb      	ldrh	r3, [r7, #22]
 8013ce4:	2b1b      	cmp	r3, #27
 8013ce6:	d123      	bne.n	8013d30 <Update_Detail+0x784>
        {
          Draw_Circle_D(INV, S_X[EXT_REFN]-3, TITLE_Y_POS, 11, 1, 6*5);
 8013ce8:	23a8      	movs	r3, #168	; 0xa8
 8013cea:	b29b      	uxth	r3, r3
 8013cec:	3b03      	subs	r3, #3
 8013cee:	b29b      	uxth	r3, r3
 8013cf0:	b219      	sxth	r1, r3
 8013cf2:	231e      	movs	r3, #30
 8013cf4:	9301      	str	r3, [sp, #4]
 8013cf6:	2301      	movs	r3, #1
 8013cf8:	9300      	str	r3, [sp, #0]
 8013cfa:	230b      	movs	r3, #11
 8013cfc:	22e1      	movs	r2, #225	; 0xe1
 8013cfe:	2001      	movs	r0, #1
 8013d00:	f7fa fa12 	bl	800e128 <Draw_Circle_D>
          DispStr(S_X[EXT_REFN], TITLE_Y_POS, INV, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 8013d04:	20a8      	movs	r0, #168	; 0xa8
 8013d06:	4b5b      	ldr	r3, [pc, #364]	; (8013e74 <Update_Detail+0x8c8>)
 8013d08:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d00a      	beq.n	8013d26 <Update_Detail+0x77a>
 8013d10:	4b58      	ldr	r3, [pc, #352]	; (8013e74 <Update_Detail+0x8c8>)
 8013d12:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8013d16:	461a      	mov	r2, r3
 8013d18:	4613      	mov	r3, r2
 8013d1a:	005b      	lsls	r3, r3, #1
 8013d1c:	4413      	add	r3, r2
 8013d1e:	005b      	lsls	r3, r3, #1
 8013d20:	4a59      	ldr	r2, [pc, #356]	; (8013e88 <Update_Detail+0x8dc>)
 8013d22:	4413      	add	r3, r2
 8013d24:	e000      	b.n	8013d28 <Update_Detail+0x77c>
 8013d26:	4b59      	ldr	r3, [pc, #356]	; (8013e8c <Update_Detail+0x8e0>)
 8013d28:	2201      	movs	r2, #1
 8013d2a:	21e1      	movs	r1, #225	; 0xe1
 8013d2c:	f7fa f926 	bl	800df7c <DispStr>
        }
        if(List[EXT_REFN].Val < 6) ParamTab[P2x2]=(List[EXT_POSI].Val + 1)*2;
 8013d30:	4b50      	ldr	r3, [pc, #320]	; (8013e74 <Update_Detail+0x8c8>)
 8013d32:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8013d36:	2b05      	cmp	r3, #5
 8013d38:	dc0a      	bgt.n	8013d50 <Update_Detail+0x7a4>
 8013d3a:	4b4e      	ldr	r3, [pc, #312]	; (8013e74 <Update_Detail+0x8c8>)
 8013d3c:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8013d40:	3301      	adds	r3, #1
 8013d42:	b29b      	uxth	r3, r3
 8013d44:	005b      	lsls	r3, r3, #1
 8013d46:	b29b      	uxth	r3, r3
 8013d48:	b21a      	sxth	r2, r3
 8013d4a:	4b51      	ldr	r3, [pc, #324]	; (8013e90 <Update_Detail+0x8e4>)
 8013d4c:	82da      	strh	r2, [r3, #22]
        else                       ParamTab[P2x2]=(List[ V0_POSI].Val + 1)*2;
        break;
 8013d4e:	e3de      	b.n	801450e <Update_Detail+0xf62>
        else                       ParamTab[P2x2]=(List[ V0_POSI].Val + 1)*2;
 8013d50:	4b48      	ldr	r3, [pc, #288]	; (8013e74 <Update_Detail+0x8c8>)
 8013d52:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8013d56:	3301      	adds	r3, #1
 8013d58:	b29b      	uxth	r3, r3
 8013d5a:	005b      	lsls	r3, r3, #1
 8013d5c:	b29b      	uxth	r3, r3
 8013d5e:	b21a      	sxth	r2, r3
 8013d60:	4b4b      	ldr	r3, [pc, #300]	; (8013e90 <Update_Detail+0x8e4>)
 8013d62:	82da      	strh	r2, [r3, #22]
        break;
 8013d64:	e3d3      	b.n	801450e <Update_Detail+0xf62>

      case EXT_HIDE:
        if(List[EXT_HIDE].Val == 0) ParamTab[P2F] |=  W_HID;  // W_HID�����ο�����
 8013d66:	4b43      	ldr	r3, [pc, #268]	; (8013e74 <Update_Detail+0x8c8>)
 8013d68:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d108      	bne.n	8013d82 <Update_Detail+0x7d6>
 8013d70:	4b47      	ldr	r3, [pc, #284]	; (8013e90 <Update_Detail+0x8e4>)
 8013d72:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013d76:	f043 0304 	orr.w	r3, r3, #4
 8013d7a:	b21a      	sxth	r2, r3
 8013d7c:	4b44      	ldr	r3, [pc, #272]	; (8013e90 <Update_Detail+0x8e4>)
 8013d7e:	805a      	strh	r2, [r3, #2]
 8013d80:	e007      	b.n	8013d92 <Update_Detail+0x7e6>
        else                        ParamTab[P2F] &= ~W_HID;  // W_HID��ʾ�ο�����
 8013d82:	4b43      	ldr	r3, [pc, #268]	; (8013e90 <Update_Detail+0x8e4>)
 8013d84:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013d88:	f023 0304 	bic.w	r3, r3, #4
 8013d8c:	b21a      	sxth	r2, r3
 8013d8e:	4b40      	ldr	r3, [pc, #256]	; (8013e90 <Update_Detail+0x8e4>)
 8013d90:	805a      	strh	r2, [r3, #2]
        SetColor(GRY, TCOLOR[EX]);
 8013d92:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8013d96:	4619      	mov	r1, r3
 8013d98:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013d9c:	f7fa f8d6 	bl	800df4c <SetColor>
        Draw_Circle_D(INV, S_X[EXT_REFN]-3, TITLE_Y_POS, 11, 1, 6*5);
 8013da0:	23a8      	movs	r3, #168	; 0xa8
 8013da2:	b29b      	uxth	r3, r3
 8013da4:	3b03      	subs	r3, #3
 8013da6:	b29b      	uxth	r3, r3
 8013da8:	b219      	sxth	r1, r3
 8013daa:	231e      	movs	r3, #30
 8013dac:	9301      	str	r3, [sp, #4]
 8013dae:	2301      	movs	r3, #1
 8013db0:	9300      	str	r3, [sp, #0]
 8013db2:	230b      	movs	r3, #11
 8013db4:	22e1      	movs	r2, #225	; 0xe1
 8013db6:	2001      	movs	r0, #1
 8013db8:	f7fa f9b6 	bl	800e128 <Draw_Circle_D>
        DispStr(S_X[EXT_REFN], TITLE_Y_POS, INV, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 8013dbc:	20a8      	movs	r0, #168	; 0xa8
 8013dbe:	4b2d      	ldr	r3, [pc, #180]	; (8013e74 <Update_Detail+0x8c8>)
 8013dc0:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d00a      	beq.n	8013dde <Update_Detail+0x832>
 8013dc8:	4b2a      	ldr	r3, [pc, #168]	; (8013e74 <Update_Detail+0x8c8>)
 8013dca:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8013dce:	461a      	mov	r2, r3
 8013dd0:	4613      	mov	r3, r2
 8013dd2:	005b      	lsls	r3, r3, #1
 8013dd4:	4413      	add	r3, r2
 8013dd6:	005b      	lsls	r3, r3, #1
 8013dd8:	4a2b      	ldr	r2, [pc, #172]	; (8013e88 <Update_Detail+0x8dc>)
 8013dda:	4413      	add	r3, r2
 8013ddc:	e000      	b.n	8013de0 <Update_Detail+0x834>
 8013dde:	4b2b      	ldr	r3, [pc, #172]	; (8013e8c <Update_Detail+0x8e0>)
 8013de0:	2201      	movs	r2, #1
 8013de2:	21e1      	movs	r1, #225	; 0xe1
 8013de4:	f7fa f8ca 	bl	800df7c <DispStr>
      break;
 8013de8:	e391      	b.n	801450e <Update_Detail+0xf62>
      case TR_MODE:   // ˢ����ʾ������ʽ
      case FITTRIGG:  // ˢ����ʾ�Զ�������ֵ
      case THRESHOLD: // ˢ����ʾ������ֵ
      case SENSITIVE: // ˢ����ʾ����������
      case TR_TYPE:   // ˢ����ʾ�α���ʽ
        DispStatus();
 8013dea:	f000 fc6b 	bl	80146c4 <DispStatus>
        SetColor(GRY, TCOLOR[TRG]);
 8013dee:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8013df2:	4619      	mov	r1, r3
 8013df4:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013df8:	f7fa f8a8 	bl	800df4c <SetColor>
        if(i == TR_MODE || i==SENSITIVE)
 8013dfc:	8afb      	ldrh	r3, [r7, #22]
 8013dfe:	2b0e      	cmp	r3, #14
 8013e00:	d002      	beq.n	8013e08 <Update_Detail+0x85c>
 8013e02:	8afb      	ldrh	r3, [r7, #22]
 8013e04:	2b11      	cmp	r3, #17
 8013e06:	d11a      	bne.n	8013e3e <Update_Detail+0x892>
        {
          Draw_Circle_D(INV, S_X[TR_MODE]-3, TITLE_Y_POS, 11, 0, 6*8);
 8013e08:	23dd      	movs	r3, #221	; 0xdd
 8013e0a:	b29b      	uxth	r3, r3
 8013e0c:	3b03      	subs	r3, #3
 8013e0e:	b29b      	uxth	r3, r3
 8013e10:	b219      	sxth	r1, r3
 8013e12:	2330      	movs	r3, #48	; 0x30
 8013e14:	9301      	str	r3, [sp, #4]
 8013e16:	2300      	movs	r3, #0
 8013e18:	9300      	str	r3, [sp, #0]
 8013e1a:	230b      	movs	r3, #11
 8013e1c:	22e1      	movs	r2, #225	; 0xe1
 8013e1e:	2001      	movs	r0, #1
 8013e20:	f7fa f982 	bl	800e128 <Draw_Circle_D>
          DispStr10x14(S_X[TR_MODE], TITLE_Y_POS, INV+SYMB,(List[TR_MODE].Val?("D"):("C")));
 8013e24:	20dd      	movs	r0, #221	; 0xdd
 8013e26:	4b13      	ldr	r3, [pc, #76]	; (8013e74 <Update_Detail+0x8c8>)
 8013e28:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d001      	beq.n	8013e34 <Update_Detail+0x888>
 8013e30:	4b18      	ldr	r3, [pc, #96]	; (8013e94 <Update_Detail+0x8e8>)
 8013e32:	e000      	b.n	8013e36 <Update_Detail+0x88a>
 8013e34:	4b18      	ldr	r3, [pc, #96]	; (8013e98 <Update_Detail+0x8ec>)
 8013e36:	2211      	movs	r2, #17
 8013e38:	21e1      	movs	r1, #225	; 0xe1
 8013e3a:	f7fa fb07 	bl	800e44c <DispStr10x14>
        }
        if(i == FITTRIGG)
 8013e3e:	8afb      	ldrh	r3, [r7, #22]
 8013e40:	2b0f      	cmp	r3, #15
 8013e42:	d134      	bne.n	8013eae <Update_Detail+0x902>
        {
          DispStr10x14(S_X[FITTRIGG], TITLE_Y_POS, PRN+SYMB,(List[FITTRIGG].Val?("F"):("B")));
 8013e44:	20cf      	movs	r0, #207	; 0xcf
 8013e46:	4b0b      	ldr	r3, [pc, #44]	; (8013e74 <Update_Detail+0x8c8>)
 8013e48:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d001      	beq.n	8013e54 <Update_Detail+0x8a8>
 8013e50:	4b12      	ldr	r3, [pc, #72]	; (8013e9c <Update_Detail+0x8f0>)
 8013e52:	e000      	b.n	8013e56 <Update_Detail+0x8aa>
 8013e54:	4b12      	ldr	r3, [pc, #72]	; (8013ea0 <Update_Detail+0x8f4>)
 8013e56:	2210      	movs	r2, #16
 8013e58:	21e1      	movs	r1, #225	; 0xe1
 8013e5a:	f7fa faf7 	bl	800e44c <DispStr10x14>
          if(List[FITTRIGG].Val)KEYTIME = 300;
 8013e5e:	4b05      	ldr	r3, [pc, #20]	; (8013e74 <Update_Detail+0x8c8>)
 8013e60:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d01f      	beq.n	8013ea8 <Update_Detail+0x8fc>
 8013e68:	4b0e      	ldr	r3, [pc, #56]	; (8013ea4 <Update_Detail+0x8f8>)
 8013e6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8013e6e:	801a      	strh	r2, [r3, #0]
 8013e70:	e01d      	b.n	8013eae <Update_Detail+0x902>
 8013e72:	bf00      	nop
 8013e74:	2000029c 	.word	0x2000029c
 8013e78:	08002338 	.word	0x08002338
 8013e7c:	20006bdc 	.word	0x20006bdc
 8013e80:	08001d90 	.word	0x08001d90
 8013e84:	0800215c 	.word	0x0800215c
 8013e88:	08001c88 	.word	0x08001c88
 8013e8c:	08001cac 	.word	0x08001cac
 8013e90:	20000144 	.word	0x20000144
 8013e94:	08000988 	.word	0x08000988
 8013e98:	0800098c 	.word	0x0800098c
 8013e9c:	0800099c 	.word	0x0800099c
 8013ea0:	0800095c 	.word	0x0800095c
 8013ea4:	20000786 	.word	0x20000786
          else KEYTIME = 0;
 8013ea8:	4bac      	ldr	r3, [pc, #688]	; (801415c <Update_Detail+0xbb0>)
 8013eaa:	2200      	movs	r2, #0
 8013eac:	801a      	strh	r2, [r3, #0]
        }
        ParamTab[VTx2]= ParamTab[P1x2]+2*List[THRESHOLD].Val;
 8013eae:	4bac      	ldr	r3, [pc, #688]	; (8014160 <Update_Detail+0xbb4>)
 8013eb0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8013eb4:	b29a      	uxth	r2, r3
 8013eb6:	4bab      	ldr	r3, [pc, #684]	; (8014164 <Update_Detail+0xbb8>)
 8013eb8:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8013ebc:	b29b      	uxth	r3, r3
 8013ebe:	005b      	lsls	r3, r3, #1
 8013ec0:	b29b      	uxth	r3, r3
 8013ec2:	4413      	add	r3, r2
 8013ec4:	b29b      	uxth	r3, r3
 8013ec6:	b21a      	sxth	r2, r3
 8013ec8:	4ba5      	ldr	r3, [pc, #660]	; (8014160 <Update_Detail+0xbb4>)
 8013eca:	839a      	strh	r2, [r3, #28]
        Tmp  = List[SENSITIVE].Val;
 8013ecc:	4ba5      	ldr	r3, [pc, #660]	; (8014164 <Update_Detail+0xbb8>)
 8013ece:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8013ed2:	613b      	str	r3, [r7, #16]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8013ed4:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013ed8:	4aa3      	ldr	r2, [pc, #652]	; (8014168 <Update_Detail+0xbbc>)
 8013eda:	5cd3      	ldrb	r3, [r2, r3]
 8013edc:	461c      	mov	r4, r3
 8013ede:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013ee2:	4aa2      	ldr	r2, [pc, #648]	; (801416c <Update_Detail+0xbc0>)
 8013ee4:	5cd3      	ldrb	r3, [r2, r3]
 8013ee6:	4618      	mov	r0, r3
 8013ee8:	f7fe f81c 	bl	8011f24 <Exp>
 8013eec:	4603      	mov	r3, r0
 8013eee:	fb03 f204 	mul.w	r2, r3, r4
 8013ef2:	693b      	ldr	r3, [r7, #16]
 8013ef4:	fb02 f303 	mul.w	r3, r2, r3
 8013ef8:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp, V[0], 2, UNSIGN);
 8013efa:	2301      	movs	r3, #1
 8013efc:	9300      	str	r3, [sp, #0]
 8013efe:	2302      	movs	r3, #2
 8013f00:	4a9b      	ldr	r2, [pc, #620]	; (8014170 <Update_Detail+0xbc4>)
 8013f02:	6939      	ldr	r1, [r7, #16]
 8013f04:	489b      	ldr	r0, [pc, #620]	; (8014174 <Update_Detail+0xbc8>)
 8013f06:	f7fd ff11 	bl	8011d2c <Value2Str>
        DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, INV+SYMB,"E");
 8013f0a:	20e7      	movs	r0, #231	; 0xe7
 8013f0c:	4b9a      	ldr	r3, [pc, #616]	; (8014178 <Update_Detail+0xbcc>)
 8013f0e:	2211      	movs	r2, #17
 8013f10:	21e1      	movs	r1, #225	; 0xe1
 8013f12:	f7fa fa9b 	bl	800e44c <DispStr10x14>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  "     ");
 8013f16:	23e7      	movs	r3, #231	; 0xe7
 8013f18:	b29b      	uxth	r3, r3
 8013f1a:	3309      	adds	r3, #9
 8013f1c:	b29b      	uxth	r3, r3
 8013f1e:	b218      	sxth	r0, r3
 8013f20:	4b96      	ldr	r3, [pc, #600]	; (801417c <Update_Detail+0xbd0>)
 8013f22:	2201      	movs	r2, #1
 8013f24:	21e1      	movs	r1, #225	; 0xe1
 8013f26:	f7fa f829 	bl	800df7c <DispStr>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  (char *)NumStr);
 8013f2a:	23e7      	movs	r3, #231	; 0xe7
 8013f2c:	b29b      	uxth	r3, r3
 8013f2e:	3309      	adds	r3, #9
 8013f30:	b29b      	uxth	r3, r3
 8013f32:	b218      	sxth	r0, r3
 8013f34:	4b8f      	ldr	r3, [pc, #572]	; (8014174 <Update_Detail+0xbc8>)
 8013f36:	2201      	movs	r2, #1
 8013f38:	21e1      	movs	r1, #225	; 0xe1
 8013f3a:	f7fa f81f 	bl	800df7c <DispStr>
        ParamTab[VTF]=(List[TR_TYPE].Val)? L_HID : SHOW;
 8013f3e:	4b89      	ldr	r3, [pc, #548]	; (8014164 <Update_Detail+0xbb8>)
 8013f40:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d001      	beq.n	8013f4c <Update_Detail+0x9a0>
 8013f48:	2202      	movs	r2, #2
 8013f4a:	e000      	b.n	8013f4e <Update_Detail+0x9a2>
 8013f4c:	2200      	movs	r2, #0
 8013f4e:	4b84      	ldr	r3, [pc, #528]	; (8014160 <Update_Detail+0xbb4>)
 8013f50:	811a      	strh	r2, [r3, #8]
        break;
 8013f52:	e2dc      	b.n	801450e <Update_Detail+0xf62>
      case VIEWPOSI:  // ˢ����ʾˮƽ�Ӵ�λ��
      case SMPL_DPTH: // ˢ����ʾ�������
      case T1_POSI:   // ˢ����ʾ����α�λ��
      case T2_POSI:   // ˢ����ʾ�Ҷ��α�λ��
      case XN_TYPE:   // ˢ����ʾ�α���ʽ
        SetColor(GRY, TCOLOR[XN]);
 8013f54:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8013f58:	4619      	mov	r1, r3
 8013f5a:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013f5e:	f7f9 fff5 	bl	800df4c <SetColor>
        if(i == TIM_BASE)
 8013f62:	8afb      	ldrh	r3, [r7, #22]
 8013f64:	2b07      	cmp	r3, #7
 8013f66:	d11e      	bne.n	8013fa6 <Update_Detail+0x9fa>
        {
          Draw_Circle_D(INV, S_X[i]-3, TITLE_Y_POS, 11, 2, 6*5);
 8013f68:	8afb      	ldrh	r3, [r7, #22]
 8013f6a:	4a85      	ldr	r2, [pc, #532]	; (8014180 <Update_Detail+0xbd4>)
 8013f6c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013f70:	b29b      	uxth	r3, r3
 8013f72:	3b03      	subs	r3, #3
 8013f74:	b29b      	uxth	r3, r3
 8013f76:	b219      	sxth	r1, r3
 8013f78:	231e      	movs	r3, #30
 8013f7a:	9301      	str	r3, [sp, #4]
 8013f7c:	2302      	movs	r3, #2
 8013f7e:	9300      	str	r3, [sp, #0]
 8013f80:	230b      	movs	r3, #11
 8013f82:	22e1      	movs	r2, #225	; 0xe1
 8013f84:	2001      	movs	r0, #1
 8013f86:	f7fa f8cf 	bl	800e128 <Draw_Circle_D>
          DispStr(S_X[i], TITLE_Y_POS, INV, TimeBase_Str[List[TIM_BASE].Val]);
 8013f8a:	8afb      	ldrh	r3, [r7, #22]
 8013f8c:	4a7c      	ldr	r2, [pc, #496]	; (8014180 <Update_Detail+0xbd4>)
 8013f8e:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8013f92:	4b74      	ldr	r3, [pc, #464]	; (8014164 <Update_Detail+0xbb8>)
 8013f94:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013f98:	00db      	lsls	r3, r3, #3
 8013f9a:	4a7a      	ldr	r2, [pc, #488]	; (8014184 <Update_Detail+0xbd8>)
 8013f9c:	4413      	add	r3, r2
 8013f9e:	2201      	movs	r2, #1
 8013fa0:	21e1      	movs	r1, #225	; 0xe1
 8013fa2:	f7f9 ffeb 	bl	800df7c <DispStr>
        }
        if(i == SMPL_DPTH){
 8013fa6:	8afb      	ldrh	r3, [r7, #22]
 8013fa8:	2b09      	cmp	r3, #9
 8013faa:	d126      	bne.n	8013ffa <Update_Detail+0xa4e>
          Draw_Circle_D(INV, S_X[SMPL_DPTH]-3, LABLE_Y, 11, 0, 6*11);
 8013fac:	23f8      	movs	r3, #248	; 0xf8
 8013fae:	b29b      	uxth	r3, r3
 8013fb0:	3b03      	subs	r3, #3
 8013fb2:	b29b      	uxth	r3, r3
 8013fb4:	b219      	sxth	r1, r3
 8013fb6:	2342      	movs	r3, #66	; 0x42
 8013fb8:	9301      	str	r3, [sp, #4]
 8013fba:	2300      	movs	r3, #0
 8013fbc:	9300      	str	r3, [sp, #0]
 8013fbe:	230b      	movs	r3, #11
 8013fc0:	2203      	movs	r2, #3
 8013fc2:	2001      	movs	r0, #1
 8013fc4:	f7fa f8b0 	bl	800e128 <Draw_Circle_D>
          DispStr(S_X[SMPL_DPTH],    LABLE_Y,  INV, "SmplDpth:  ");
 8013fc8:	20f8      	movs	r0, #248	; 0xf8
 8013fca:	4b6f      	ldr	r3, [pc, #444]	; (8014188 <Update_Detail+0xbdc>)
 8013fcc:	2201      	movs	r2, #1
 8013fce:	2103      	movs	r1, #3
 8013fd0:	f7f9 ffd4 	bl	800df7c <DispStr>
          DispStr(S_X[SMPL_DPTH]+6*9, LABLE_Y,  INV, (char *)&D[List[SMPL_DPTH].Val]);
 8013fd4:	23f8      	movs	r3, #248	; 0xf8
 8013fd6:	b29b      	uxth	r3, r3
 8013fd8:	3336      	adds	r3, #54	; 0x36
 8013fda:	b29b      	uxth	r3, r3
 8013fdc:	b218      	sxth	r0, r3
 8013fde:	4b61      	ldr	r3, [pc, #388]	; (8014164 <Update_Detail+0xbb8>)
 8013fe0:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8013fe4:	461a      	mov	r2, r3
 8013fe6:	4613      	mov	r3, r2
 8013fe8:	005b      	lsls	r3, r3, #1
 8013fea:	4413      	add	r3, r2
 8013fec:	005b      	lsls	r3, r3, #1
 8013fee:	4a67      	ldr	r2, [pc, #412]	; (801418c <Update_Detail+0xbe0>)
 8013ff0:	4413      	add	r3, r2
 8013ff2:	2201      	movs	r2, #1
 8013ff4:	2103      	movs	r1, #3
 8013ff6:	f7f9 ffc1 	bl	800df7c <DispStr>
        }
        Update_Windows();
 8013ffa:	f000 fbad 	bl	8014758 <Update_Windows>

        ParamTab[T0x1] = 2 + Presampling - List[VIEWPOSI].Val;
 8013ffe:	4b64      	ldr	r3, [pc, #400]	; (8014190 <Update_Detail+0xbe4>)
 8014000:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014004:	b29a      	uxth	r2, r3
 8014006:	4b57      	ldr	r3, [pc, #348]	; (8014164 <Update_Detail+0xbb8>)
 8014008:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 801400c:	b29b      	uxth	r3, r3
 801400e:	1ad3      	subs	r3, r2, r3
 8014010:	b29b      	uxth	r3, r3
 8014012:	3302      	adds	r3, #2
 8014014:	b29b      	uxth	r3, r3
 8014016:	b21a      	sxth	r2, r3
 8014018:	4b51      	ldr	r3, [pc, #324]	; (8014160 <Update_Detail+0xbb4>)
 801401a:	845a      	strh	r2, [r3, #34]	; 0x22
        ParamTab[T0F] &= ~D_HID;
 801401c:	4b50      	ldr	r3, [pc, #320]	; (8014160 <Update_Detail+0xbb4>)
 801401e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8014022:	f023 0301 	bic.w	r3, r3, #1
 8014026:	b21a      	sxth	r2, r3
 8014028:	4b4d      	ldr	r3, [pc, #308]	; (8014160 <Update_Detail+0xbb4>)
 801402a:	81da      	strh	r2, [r3, #14]
        ParamTab[T1F] &= ~D_HID;
 801402c:	4b4c      	ldr	r3, [pc, #304]	; (8014160 <Update_Detail+0xbb4>)
 801402e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8014032:	f023 0301 	bic.w	r3, r3, #1
 8014036:	b21a      	sxth	r2, r3
 8014038:	4b49      	ldr	r3, [pc, #292]	; (8014160 <Update_Detail+0xbb4>)
 801403a:	821a      	strh	r2, [r3, #16]
        ParamTab[T1F] &= ~D_HID;
 801403c:	4b48      	ldr	r3, [pc, #288]	; (8014160 <Update_Detail+0xbb4>)
 801403e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8014042:	f023 0301 	bic.w	r3, r3, #1
 8014046:	b21a      	sxth	r2, r3
 8014048:	4b45      	ldr	r3, [pc, #276]	; (8014160 <Update_Detail+0xbb4>)
 801404a:	821a      	strh	r2, [r3, #16]
        ParamTab[T1x1] = List[T1_POSI].Val+1;
 801404c:	4b45      	ldr	r3, [pc, #276]	; (8014164 <Update_Detail+0xbb8>)
 801404e:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8014052:	b29b      	uxth	r3, r3
 8014054:	3301      	adds	r3, #1
 8014056:	b29b      	uxth	r3, r3
 8014058:	b21a      	sxth	r2, r3
 801405a:	4b41      	ldr	r3, [pc, #260]	; (8014160 <Update_Detail+0xbb4>)
 801405c:	849a      	strh	r2, [r3, #36]	; 0x24
        ParamTab[T2x1] = List[T2_POSI].Val+1;
 801405e:	4b41      	ldr	r3, [pc, #260]	; (8014164 <Update_Detail+0xbb8>)
 8014060:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 8014064:	b29b      	uxth	r3, r3
 8014066:	3301      	adds	r3, #1
 8014068:	b29b      	uxth	r3, r3
 801406a:	b21a      	sxth	r2, r3
 801406c:	4b3c      	ldr	r3, [pc, #240]	; (8014160 <Update_Detail+0xbb4>)
 801406e:	84da      	strh	r2, [r3, #38]	; 0x26
        ParamTab[T1F]  = (List[XN_TYPE].Val)? L_HID : SHOW;
 8014070:	4b3c      	ldr	r3, [pc, #240]	; (8014164 <Update_Detail+0xbb8>)
 8014072:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 8014076:	2b00      	cmp	r3, #0
 8014078:	d001      	beq.n	801407e <Update_Detail+0xad2>
 801407a:	2202      	movs	r2, #2
 801407c:	e000      	b.n	8014080 <Update_Detail+0xad4>
 801407e:	2200      	movs	r2, #0
 8014080:	4b37      	ldr	r3, [pc, #220]	; (8014160 <Update_Detail+0xbb4>)
 8014082:	821a      	strh	r2, [r3, #16]
        ParamTab[T2F]  = (List[XN_TYPE].Val)? L_HID : SHOW;
 8014084:	4b37      	ldr	r3, [pc, #220]	; (8014164 <Update_Detail+0xbb8>)
 8014086:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 801408a:	2b00      	cmp	r3, #0
 801408c:	d001      	beq.n	8014092 <Update_Detail+0xae6>
 801408e:	2202      	movs	r2, #2
 8014090:	e000      	b.n	8014094 <Update_Detail+0xae8>
 8014092:	2200      	movs	r2, #0
 8014094:	4b32      	ldr	r3, [pc, #200]	; (8014160 <Update_Detail+0xbb4>)
 8014096:	825a      	strh	r2, [r3, #18]
        Tmp  = ParamTab[T2x1] - ParamTab[T1x1];
 8014098:	4b31      	ldr	r3, [pc, #196]	; (8014160 <Update_Detail+0xbb4>)
 801409a:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801409e:	461a      	mov	r2, r3
 80140a0:	4b2f      	ldr	r3, [pc, #188]	; (8014160 <Update_Detail+0xbb4>)
 80140a2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80140a6:	1ad3      	subs	r3, r2, r3
 80140a8:	613b      	str	r3, [r7, #16]
        Tmp *= B_SCALE[List[TIM_BASE].Val]* Exp(T_SCALE[List[TIM_BASE].Val]);
 80140aa:	4b2e      	ldr	r3, [pc, #184]	; (8014164 <Update_Detail+0xbb8>)
 80140ac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80140b0:	461a      	mov	r2, r3
 80140b2:	4b38      	ldr	r3, [pc, #224]	; (8014194 <Update_Detail+0xbe8>)
 80140b4:	5c9b      	ldrb	r3, [r3, r2]
 80140b6:	461c      	mov	r4, r3
 80140b8:	4b2a      	ldr	r3, [pc, #168]	; (8014164 <Update_Detail+0xbb8>)
 80140ba:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80140be:	461a      	mov	r2, r3
 80140c0:	4b35      	ldr	r3, [pc, #212]	; (8014198 <Update_Detail+0xbec>)
 80140c2:	5c9b      	ldrb	r3, [r3, r2]
 80140c4:	4618      	mov	r0, r3
 80140c6:	f7fd ff2d 	bl	8011f24 <Exp>
 80140ca:	4603      	mov	r3, r0
 80140cc:	fb03 f204 	mul.w	r2, r3, r4
 80140d0:	693b      	ldr	r3, [r7, #16]
 80140d2:	fb02 f303 	mul.w	r3, r2, r3
 80140d6:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp, T[0], 3, UNSIGN);
 80140d8:	2301      	movs	r3, #1
 80140da:	9300      	str	r3, [sp, #0]
 80140dc:	2303      	movs	r3, #3
 80140de:	4a2f      	ldr	r2, [pc, #188]	; (801419c <Update_Detail+0xbf0>)
 80140e0:	6939      	ldr	r1, [r7, #16]
 80140e2:	4824      	ldr	r0, [pc, #144]	; (8014174 <Update_Detail+0xbc8>)
 80140e4:	f7fd fe22 	bl	8011d2c <Value2Str>
        Draw_Circle_D(INV, S_X[V1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 80140e8:	2307      	movs	r3, #7
 80140ea:	b29b      	uxth	r3, r3
 80140ec:	3b03      	subs	r3, #3
 80140ee:	b29b      	uxth	r3, r3
 80140f0:	b219      	sxth	r1, r3
 80140f2:	2336      	movs	r3, #54	; 0x36
 80140f4:	9301      	str	r3, [sp, #4]
 80140f6:	2300      	movs	r3, #0
 80140f8:	9300      	str	r3, [sp, #0]
 80140fa:	230b      	movs	r3, #11
 80140fc:	2203      	movs	r2, #3
 80140fe:	2001      	movs	r0, #1
 8014100:	f7fa f812 	bl	800e128 <Draw_Circle_D>
        DispStr(S_X[T1_POSI]+0*6, LABLE_Y, INV+SYMB, "]");
 8014104:	2007      	movs	r0, #7
 8014106:	4b26      	ldr	r3, [pc, #152]	; (80141a0 <Update_Detail+0xbf4>)
 8014108:	2211      	movs	r2, #17
 801410a:	2103      	movs	r1, #3
 801410c:	f7f9 ff36 	bl	800df7c <DispStr>
        DispStr(S_X[T1_POSI]+1*6, LABLE_Y, INV,      "T:      ");
 8014110:	2307      	movs	r3, #7
 8014112:	b29b      	uxth	r3, r3
 8014114:	3306      	adds	r3, #6
 8014116:	b29b      	uxth	r3, r3
 8014118:	b218      	sxth	r0, r3
 801411a:	4b22      	ldr	r3, [pc, #136]	; (80141a4 <Update_Detail+0xbf8>)
 801411c:	2201      	movs	r2, #1
 801411e:	2103      	movs	r1, #3
 8014120:	f7f9 ff2c 	bl	800df7c <DispStr>
        DispStr(S_X[T1_POSI]+7*6, LABLE_Y, INV,  "  ");
 8014124:	2307      	movs	r3, #7
 8014126:	b29b      	uxth	r3, r3
 8014128:	332a      	adds	r3, #42	; 0x2a
 801412a:	b29b      	uxth	r3, r3
 801412c:	b218      	sxth	r0, r3
 801412e:	4b1e      	ldr	r3, [pc, #120]	; (80141a8 <Update_Detail+0xbfc>)
 8014130:	2201      	movs	r2, #1
 8014132:	2103      	movs	r1, #3
 8014134:	f7f9 ff22 	bl	800df7c <DispStr>
        DispStr(S_X[T1_POSI]+3*6, LABLE_Y, INV,  (char *)NumStr);
 8014138:	2307      	movs	r3, #7
 801413a:	b29b      	uxth	r3, r3
 801413c:	3312      	adds	r3, #18
 801413e:	b29b      	uxth	r3, r3
 8014140:	b218      	sxth	r0, r3
 8014142:	4b0c      	ldr	r3, [pc, #48]	; (8014174 <Update_Detail+0xbc8>)
 8014144:	2201      	movs	r2, #1
 8014146:	2103      	movs	r1, #3
 8014148:	f7f9 ff18 	bl	800df7c <DispStr>
        Set_Base(List[TIM_BASE].Val);          // Ӳ������ɨ��ʱ����λ
 801414c:	4b05      	ldr	r3, [pc, #20]	; (8014164 <Update_Detail+0xbb8>)
 801414e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014152:	4618      	mov	r0, r3
 8014154:	f7f8 fa8a 	bl	800c66c <Set_Base>
      break;
 8014158:	e1d9      	b.n	801450e <Update_Detail+0xf62>
 801415a:	bf00      	nop
 801415c:	20000786 	.word	0x20000786
 8014160:	20000144 	.word	0x20000144
 8014164:	2000029c 	.word	0x2000029c
 8014168:	08002130 	.word	0x08002130
 801416c:	08002108 	.word	0x08002108
 8014170:	08001d00 	.word	0x08001d00
 8014174:	20002844 	.word	0x20002844
 8014178:	08000998 	.word	0x08000998
 801417c:	08000990 	.word	0x08000990
 8014180:	0800215c 	.word	0x0800215c
 8014184:	200001d4 	.word	0x200001d4
 8014188:	08000970 	.word	0x08000970
 801418c:	08001c4c 	.word	0x08001c4c
 8014190:	2000055e 	.word	0x2000055e
 8014194:	0800211c 	.word	0x0800211c
 8014198:	080020f4 	.word	0x080020f4
 801419c:	08001ce8 	.word	0x08001ce8
 80141a0:	08000960 	.word	0x08000960
 80141a4:	0800097c 	.word	0x0800097c
 80141a8:	080009d0 	.word	0x080009d0

      case FREQUENC://��ʾƵ��
        FTmp=Edge*25*1000/2;
 80141ac:	4bb7      	ldr	r3, [pc, #732]	; (801448c <Update_Detail+0xee0>)
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	f243 02d4 	movw	r2, #12500	; 0x30d4
 80141b4:	fb02 f303 	mul.w	r3, r2, r3
 80141b8:	60fb      	str	r3, [r7, #12]
        if(List[TIM_BASE].Val<9)FTmp= FTmp*1000000;
 80141ba:	4bb5      	ldr	r3, [pc, #724]	; (8014490 <Update_Detail+0xee4>)
 80141bc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80141c0:	2b08      	cmp	r3, #8
 80141c2:	dc05      	bgt.n	80141d0 <Update_Detail+0xc24>
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	4ab3      	ldr	r2, [pc, #716]	; (8014494 <Update_Detail+0xee8>)
 80141c8:	fb02 f303 	mul.w	r3, r2, r3
 80141cc:	60fb      	str	r3, [r7, #12]
 80141ce:	e00a      	b.n	80141e6 <Update_Detail+0xc3a>
        else if(List[TIM_BASE].Val<18)FTmp= FTmp*1000;
 80141d0:	4baf      	ldr	r3, [pc, #700]	; (8014490 <Update_Detail+0xee4>)
 80141d2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80141d6:	2b11      	cmp	r3, #17
 80141d8:	dc05      	bgt.n	80141e6 <Update_Detail+0xc3a>
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80141e0:	fb02 f303 	mul.w	r3, r2, r3
 80141e4:	60fb      	str	r3, [r7, #12]
        FTmp=FTmp/Ts[List[TIM_BASE].Val]/DEPTH[List[SMPL_DPTH].Val];
 80141e6:	4baa      	ldr	r3, [pc, #680]	; (8014490 <Update_Detail+0xee4>)
 80141e8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80141ec:	461a      	mov	r2, r3
 80141ee:	4baa      	ldr	r3, [pc, #680]	; (8014498 <Update_Detail+0xeec>)
 80141f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141f4:	461a      	mov	r2, r3
 80141f6:	68fb      	ldr	r3, [r7, #12]
 80141f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80141fc:	4aa4      	ldr	r2, [pc, #656]	; (8014490 <Update_Detail+0xee4>)
 80141fe:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 8014202:	4611      	mov	r1, r2
 8014204:	4aa5      	ldr	r2, [pc, #660]	; (801449c <Update_Detail+0xef0>)
 8014206:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 801420a:	fbb3 f3f2 	udiv	r3, r3, r2
 801420e:	60fb      	str	r3, [r7, #12]
          DispMeter(i, 1, UNSIGN,FTmp);
 8014210:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	2201      	movs	r2, #1
 8014218:	2101      	movs	r1, #1
 801421a:	f000 f9d3 	bl	80145c4 <DispMeter>
      break;
 801421e:	e176      	b.n	801450e <Update_Detail+0xf62>

      case DUTY:    //��ʾռ�ձ�
         DispMeter(i, k, UNSIGN,(HighT*100)/k);
 8014220:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8014224:	887b      	ldrh	r3, [r7, #2]
 8014226:	b2d9      	uxtb	r1, r3
 8014228:	4b9d      	ldr	r3, [pc, #628]	; (80144a0 <Update_Detail+0xef4>)
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	2264      	movs	r2, #100	; 0x64
 801422e:	fb02 f203 	mul.w	r2, r2, r3
 8014232:	887b      	ldrh	r3, [r7, #2]
 8014234:	fb92 f3f3 	sdiv	r3, r2, r3
 8014238:	2201      	movs	r2, #1
 801423a:	f000 f9c3 	bl	80145c4 <DispMeter>
        break;
 801423e:	e166      	b.n	801450e <Update_Detail+0xf62>

      case VRMS://��ʾ��ѹ��Чֵ
        if(abs(Vrms)<4)
 8014240:	4b98      	ldr	r3, [pc, #608]	; (80144a4 <Update_Detail+0xef8>)
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	f113 0f03 	cmn.w	r3, #3
 8014248:	db06      	blt.n	8014258 <Update_Detail+0xcac>
 801424a:	4b96      	ldr	r3, [pc, #600]	; (80144a4 <Update_Detail+0xef8>)
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	2b03      	cmp	r3, #3
 8014250:	dc02      	bgt.n	8014258 <Update_Detail+0xcac>
        {
          Tmp = 0.00;
 8014252:	2300      	movs	r3, #0
 8014254:	613b      	str	r3, [r7, #16]
 8014256:	e026      	b.n	80142a6 <Update_Detail+0xcfa>
        }else{
		  scale = (List[PROBEATT].Val?
 8014258:	4b8d      	ldr	r3, [pc, #564]	; (8014490 <Update_Detail+0xee4>)
 801425a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 801425e:	2b00      	cmp	r3, #0
 8014260:	d00b      	beq.n	801427a <Update_Detail+0xcce>
 8014262:	4b8b      	ldr	r3, [pc, #556]	; (8014490 <Update_Detail+0xee4>)
 8014264:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014268:	461a      	mov	r2, r3
 801426a:	4b8f      	ldr	r3, [pc, #572]	; (80144a8 <Update_Detail+0xefc>)
 801426c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014270:	4613      	mov	r3, r2
 8014272:	009b      	lsls	r3, r3, #2
 8014274:	4413      	add	r3, r2
 8014276:	00db      	lsls	r3, r3, #3
 8014278:	e00a      	b.n	8014290 <Update_Detail+0xce4>
 801427a:	4b85      	ldr	r3, [pc, #532]	; (8014490 <Update_Detail+0xee4>)
 801427c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014280:	461a      	mov	r2, r3
 8014282:	4b8a      	ldr	r3, [pc, #552]	; (80144ac <Update_Detail+0xf00>)
 8014284:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014288:	4613      	mov	r3, r2
 801428a:	009b      	lsls	r3, r3, #2
 801428c:	4413      	add	r3, r2
 801428e:	00db      	lsls	r3, r3, #3
		  scale = (List[PROBEATT].Val?
 8014290:	60bb      	str	r3, [r7, #8]
	          Tmp  = ((((Vrms)*Ak)>>12))*scale;
 8014292:	4b84      	ldr	r3, [pc, #528]	; (80144a4 <Update_Detail+0xef8>)
 8014294:	681b      	ldr	r3, [r3, #0]
 8014296:	687a      	ldr	r2, [r7, #4]
 8014298:	fb02 f303 	mul.w	r3, r2, r3
 801429c:	131a      	asrs	r2, r3, #12
 801429e:	68bb      	ldr	r3, [r7, #8]
 80142a0:	fb02 f303 	mul.w	r3, r2, r3
 80142a4:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 80142a6:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 80142aa:	693b      	ldr	r3, [r7, #16]
 80142ac:	2201      	movs	r2, #1
 80142ae:	2101      	movs	r1, #1
 80142b0:	f000 f988 	bl	80145c4 <DispMeter>
        break;
 80142b4:	e12b      	b.n	801450e <Update_Detail+0xf62>

      case VP_P://��ʾ��ѹ���ֵ
        if(abs(Vpp)<7){
 80142b6:	4b7e      	ldr	r3, [pc, #504]	; (80144b0 <Update_Detail+0xf04>)
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	f113 0f06 	cmn.w	r3, #6
 80142be:	db06      	blt.n	80142ce <Update_Detail+0xd22>
 80142c0:	4b7b      	ldr	r3, [pc, #492]	; (80144b0 <Update_Detail+0xf04>)
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	2b06      	cmp	r3, #6
 80142c6:	dc02      	bgt.n	80142ce <Update_Detail+0xd22>
          Tmp = 0.00;
 80142c8:	2300      	movs	r3, #0
 80142ca:	613b      	str	r3, [r7, #16]
 80142cc:	e033      	b.n	8014336 <Update_Detail+0xd8a>
        }
        else
        {
           scale = (List[PROBEATT].Val?
 80142ce:	4b70      	ldr	r3, [pc, #448]	; (8014490 <Update_Detail+0xee4>)
 80142d0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d00b      	beq.n	80142f0 <Update_Detail+0xd44>
 80142d8:	4b6d      	ldr	r3, [pc, #436]	; (8014490 <Update_Detail+0xee4>)
 80142da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80142de:	461a      	mov	r2, r3
 80142e0:	4b71      	ldr	r3, [pc, #452]	; (80144a8 <Update_Detail+0xefc>)
 80142e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80142e6:	4613      	mov	r3, r2
 80142e8:	009b      	lsls	r3, r3, #2
 80142ea:	4413      	add	r3, r2
 80142ec:	00db      	lsls	r3, r3, #3
 80142ee:	e00a      	b.n	8014306 <Update_Detail+0xd5a>
 80142f0:	4b67      	ldr	r3, [pc, #412]	; (8014490 <Update_Detail+0xee4>)
 80142f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80142f6:	461a      	mov	r2, r3
 80142f8:	4b6c      	ldr	r3, [pc, #432]	; (80144ac <Update_Detail+0xf00>)
 80142fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80142fe:	4613      	mov	r3, r2
 8014300:	009b      	lsls	r3, r3, #2
 8014302:	4413      	add	r3, r2
 8014304:	00db      	lsls	r3, r3, #3
           scale = (List[PROBEATT].Val?
 8014306:	60bb      	str	r3, [r7, #8]
          Tmp  = ((((Vmax-2048)*(Ak))>>12)-(((Vmin-2048)*(Ak))>>12))*scale;
 8014308:	4b6a      	ldr	r3, [pc, #424]	; (80144b4 <Update_Detail+0xf08>)
 801430a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801430e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8014312:	687a      	ldr	r2, [r7, #4]
 8014314:	fb02 f303 	mul.w	r3, r2, r3
 8014318:	131a      	asrs	r2, r3, #12
 801431a:	4b67      	ldr	r3, [pc, #412]	; (80144b8 <Update_Detail+0xf0c>)
 801431c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014320:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8014324:	6879      	ldr	r1, [r7, #4]
 8014326:	fb01 f303 	mul.w	r3, r1, r3
 801432a:	131b      	asrs	r3, r3, #12
 801432c:	1ad2      	subs	r2, r2, r3
 801432e:	68bb      	ldr	r3, [r7, #8]
 8014330:	fb02 f303 	mul.w	r3, r2, r3
 8014334:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 8014336:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 801433a:	693b      	ldr	r3, [r7, #16]
 801433c:	2201      	movs	r2, #1
 801433e:	2101      	movs	r1, #1
 8014340:	f000 f940 	bl	80145c4 <DispMeter>
        break;
 8014344:	e0e3      	b.n	801450e <Update_Detail+0xf62>

      case VAVG://��ʾ��ѹƽ��ֵ
        if(abs(Vavg)<4)
 8014346:	4b5d      	ldr	r3, [pc, #372]	; (80144bc <Update_Detail+0xf10>)
 8014348:	f9b3 3000 	ldrsh.w	r3, [r3]
 801434c:	2b00      	cmp	r3, #0
 801434e:	bfb8      	it	lt
 8014350:	425b      	neglt	r3, r3
 8014352:	b29b      	uxth	r3, r3
 8014354:	2b03      	cmp	r3, #3
 8014356:	d802      	bhi.n	801435e <Update_Detail+0xdb2>
        {
          Tmp = 0.00;
 8014358:	2300      	movs	r3, #0
 801435a:	613b      	str	r3, [r7, #16]
 801435c:	e02e      	b.n	80143bc <Update_Detail+0xe10>
        }else{
          scale = (List[PROBEATT].Val?
 801435e:	4b4c      	ldr	r3, [pc, #304]	; (8014490 <Update_Detail+0xee4>)
 8014360:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 8014364:	2b00      	cmp	r3, #0
 8014366:	d00b      	beq.n	8014380 <Update_Detail+0xdd4>
 8014368:	4b49      	ldr	r3, [pc, #292]	; (8014490 <Update_Detail+0xee4>)
 801436a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801436e:	461a      	mov	r2, r3
 8014370:	4b4d      	ldr	r3, [pc, #308]	; (80144a8 <Update_Detail+0xefc>)
 8014372:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014376:	4613      	mov	r3, r2
 8014378:	009b      	lsls	r3, r3, #2
 801437a:	4413      	add	r3, r2
 801437c:	00db      	lsls	r3, r3, #3
 801437e:	e00a      	b.n	8014396 <Update_Detail+0xdea>
 8014380:	4b43      	ldr	r3, [pc, #268]	; (8014490 <Update_Detail+0xee4>)
 8014382:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014386:	461a      	mov	r2, r3
 8014388:	4b48      	ldr	r3, [pc, #288]	; (80144ac <Update_Detail+0xf00>)
 801438a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801438e:	4613      	mov	r3, r2
 8014390:	009b      	lsls	r3, r3, #2
 8014392:	4413      	add	r3, r2
 8014394:	00db      	lsls	r3, r3, #3
          scale = (List[PROBEATT].Val?
 8014396:	60bb      	str	r3, [r7, #8]
          Tmp = ((((Vavg-2048)*(Ak))>>12)+100-List[V0_POSI].Val)*scale;
 8014398:	4b48      	ldr	r3, [pc, #288]	; (80144bc <Update_Detail+0xf10>)
 801439a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801439e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80143a2:	687a      	ldr	r2, [r7, #4]
 80143a4:	fb02 f303 	mul.w	r3, r2, r3
 80143a8:	131b      	asrs	r3, r3, #12
 80143aa:	3364      	adds	r3, #100	; 0x64
 80143ac:	4a38      	ldr	r2, [pc, #224]	; (8014490 <Update_Detail+0xee4>)
 80143ae:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 80143b2:	1a9a      	subs	r2, r3, r2
 80143b4:	68bb      	ldr	r3, [r7, #8]
 80143b6:	fb02 f303 	mul.w	r3, r2, r3
 80143ba:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 80143bc:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 80143c0:	693b      	ldr	r3, [r7, #16]
 80143c2:	2201      	movs	r2, #1
 80143c4:	2101      	movs	r1, #1
 80143c6:	f000 f8fd 	bl	80145c4 <DispMeter>
        break;
 80143ca:	e0a0      	b.n	801450e <Update_Detail+0xf62>

      case VMAX://��ʾ��ѹ���ֵ
        if(abs(Vmax)<4){
 80143cc:	4b39      	ldr	r3, [pc, #228]	; (80144b4 <Update_Detail+0xf08>)
 80143ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	bfb8      	it	lt
 80143d6:	425b      	neglt	r3, r3
 80143d8:	b29b      	uxth	r3, r3
 80143da:	2b03      	cmp	r3, #3
 80143dc:	d802      	bhi.n	80143e4 <Update_Detail+0xe38>
          Tmp = 0.00;
 80143de:	2300      	movs	r3, #0
 80143e0:	613b      	str	r3, [r7, #16]
 80143e2:	e02e      	b.n	8014442 <Update_Detail+0xe96>
        }else{
		  scale = (List[PROBEATT].Val?
 80143e4:	4b2a      	ldr	r3, [pc, #168]	; (8014490 <Update_Detail+0xee4>)
 80143e6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d00b      	beq.n	8014406 <Update_Detail+0xe5a>
 80143ee:	4b28      	ldr	r3, [pc, #160]	; (8014490 <Update_Detail+0xee4>)
 80143f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80143f4:	461a      	mov	r2, r3
 80143f6:	4b2c      	ldr	r3, [pc, #176]	; (80144a8 <Update_Detail+0xefc>)
 80143f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80143fc:	4613      	mov	r3, r2
 80143fe:	009b      	lsls	r3, r3, #2
 8014400:	4413      	add	r3, r2
 8014402:	00db      	lsls	r3, r3, #3
 8014404:	e00a      	b.n	801441c <Update_Detail+0xe70>
 8014406:	4b22      	ldr	r3, [pc, #136]	; (8014490 <Update_Detail+0xee4>)
 8014408:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801440c:	461a      	mov	r2, r3
 801440e:	4b27      	ldr	r3, [pc, #156]	; (80144ac <Update_Detail+0xf00>)
 8014410:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014414:	4613      	mov	r3, r2
 8014416:	009b      	lsls	r3, r3, #2
 8014418:	4413      	add	r3, r2
 801441a:	00db      	lsls	r3, r3, #3
		  scale = (List[PROBEATT].Val?
 801441c:	60bb      	str	r3, [r7, #8]
          Tmp  = ((((Vmax-2048)*(Ak))>>12)+100-List[V0_POSI].Val)*scale;
 801441e:	4b25      	ldr	r3, [pc, #148]	; (80144b4 <Update_Detail+0xf08>)
 8014420:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014424:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8014428:	687a      	ldr	r2, [r7, #4]
 801442a:	fb02 f303 	mul.w	r3, r2, r3
 801442e:	131b      	asrs	r3, r3, #12
 8014430:	3364      	adds	r3, #100	; 0x64
 8014432:	4a17      	ldr	r2, [pc, #92]	; (8014490 <Update_Detail+0xee4>)
 8014434:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8014438:	1a9a      	subs	r2, r3, r2
 801443a:	68bb      	ldr	r3, [r7, #8]
 801443c:	fb02 f303 	mul.w	r3, r2, r3
 8014440:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 8014442:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8014446:	693b      	ldr	r3, [r7, #16]
 8014448:	2201      	movs	r2, #1
 801444a:	2101      	movs	r1, #1
 801444c:	f000 f8ba 	bl	80145c4 <DispMeter>
        break;
 8014450:	e05d      	b.n	801450e <Update_Detail+0xf62>

      case VMIN://��ʾ��ѹ��Сֵ
        if(abs(Vmin)<4){
 8014452:	4b19      	ldr	r3, [pc, #100]	; (80144b8 <Update_Detail+0xf0c>)
 8014454:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014458:	2b00      	cmp	r3, #0
 801445a:	bfb8      	it	lt
 801445c:	425b      	neglt	r3, r3
 801445e:	b29b      	uxth	r3, r3
 8014460:	2b03      	cmp	r3, #3
 8014462:	d802      	bhi.n	801446a <Update_Detail+0xebe>
          Tmp = 0.00;
 8014464:	2300      	movs	r3, #0
 8014466:	613b      	str	r3, [r7, #16]
 8014468:	e048      	b.n	80144fc <Update_Detail+0xf50>
        }else{
		  scale = (List[PROBEATT].Val?
 801446a:	4b09      	ldr	r3, [pc, #36]	; (8014490 <Update_Detail+0xee4>)
 801446c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                           VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 8014470:	2b00      	cmp	r3, #0
 8014472:	d025      	beq.n	80144c0 <Update_Detail+0xf14>
 8014474:	4b06      	ldr	r3, [pc, #24]	; (8014490 <Update_Detail+0xee4>)
 8014476:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801447a:	461a      	mov	r2, r3
 801447c:	4b0a      	ldr	r3, [pc, #40]	; (80144a8 <Update_Detail+0xefc>)
 801447e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014482:	4613      	mov	r3, r2
 8014484:	009b      	lsls	r3, r3, #2
 8014486:	4413      	add	r3, r2
 8014488:	00db      	lsls	r3, r3, #3
 801448a:	e024      	b.n	80144d6 <Update_Detail+0xf2a>
 801448c:	20002858 	.word	0x20002858
 8014490:	2000029c 	.word	0x2000029c
 8014494:	000f4240 	.word	0x000f4240
 8014498:	080022a0 	.word	0x080022a0
 801449c:	08002270 	.word	0x08002270
 80144a0:	20006880 	.word	0x20006880
 80144a4:	2000286c 	.word	0x2000286c
 80144a8:	20000274 	.word	0x20000274
 80144ac:	08001d68 	.word	0x08001d68
 80144b0:	20006888 	.word	0x20006888
 80144b4:	2000285e 	.word	0x2000285e
 80144b8:	20002870 	.word	0x20002870
 80144bc:	20002860 	.word	0x20002860
 80144c0:	4b38      	ldr	r3, [pc, #224]	; (80145a4 <Update_Detail+0xff8>)
 80144c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80144c6:	461a      	mov	r2, r3
 80144c8:	4b37      	ldr	r3, [pc, #220]	; (80145a8 <Update_Detail+0xffc>)
 80144ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80144ce:	4613      	mov	r3, r2
 80144d0:	009b      	lsls	r3, r3, #2
 80144d2:	4413      	add	r3, r2
 80144d4:	00db      	lsls	r3, r3, #3
		  scale = (List[PROBEATT].Val?
 80144d6:	60bb      	str	r3, [r7, #8]
                  Tmp  = ((((Vmin-2048)*(Ak))>>12)+100-List[V0_POSI].Val)*scale;
 80144d8:	4b34      	ldr	r3, [pc, #208]	; (80145ac <Update_Detail+0x1000>)
 80144da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80144de:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80144e2:	687a      	ldr	r2, [r7, #4]
 80144e4:	fb02 f303 	mul.w	r3, r2, r3
 80144e8:	131b      	asrs	r3, r3, #12
 80144ea:	3364      	adds	r3, #100	; 0x64
 80144ec:	4a2d      	ldr	r2, [pc, #180]	; (80145a4 <Update_Detail+0xff8>)
 80144ee:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 80144f2:	1a9a      	subs	r2, r3, r2
 80144f4:	68bb      	ldr	r3, [r7, #8]
 80144f6:	fb02 f303 	mul.w	r3, r2, r3
 80144fa:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, SIGN, Tmp);
 80144fc:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8014500:	693b      	ldr	r3, [r7, #16]
 8014502:	2200      	movs	r2, #0
 8014504:	2101      	movs	r1, #1
 8014506:	f000 f85d 	bl	80145c4 <DispMeter>
        break;
 801450a:	e000      	b.n	801450e <Update_Detail+0xf62>
        break;
 801450c:	bf00      	nop

        break;

      }
      /**/
      if(Freq_Flag){
 801450e:	4b28      	ldr	r3, [pc, #160]	; (80145b0 <Update_Detail+0x1004>)
 8014510:	781b      	ldrb	r3, [r3, #0]
 8014512:	2b00      	cmp	r3, #0
 8014514:	d03a      	beq.n	801458c <Update_Detail+0xfe0>
        Freq_Flag = 0;
 8014516:	4b26      	ldr	r3, [pc, #152]	; (80145b0 <Update_Detail+0x1004>)
 8014518:	2200      	movs	r2, #0
 801451a:	701a      	strb	r2, [r3, #0]
        FTmp=Edge*25*1000/2;
 801451c:	4b25      	ldr	r3, [pc, #148]	; (80145b4 <Update_Detail+0x1008>)
 801451e:	681b      	ldr	r3, [r3, #0]
 8014520:	f243 02d4 	movw	r2, #12500	; 0x30d4
 8014524:	fb02 f303 	mul.w	r3, r2, r3
 8014528:	60fb      	str	r3, [r7, #12]
        if(List[TIM_BASE].Val<9)FTmp= FTmp*1000000;
 801452a:	4b1e      	ldr	r3, [pc, #120]	; (80145a4 <Update_Detail+0xff8>)
 801452c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014530:	2b08      	cmp	r3, #8
 8014532:	dc05      	bgt.n	8014540 <Update_Detail+0xf94>
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	4a20      	ldr	r2, [pc, #128]	; (80145b8 <Update_Detail+0x100c>)
 8014538:	fb02 f303 	mul.w	r3, r2, r3
 801453c:	60fb      	str	r3, [r7, #12]
 801453e:	e00a      	b.n	8014556 <Update_Detail+0xfaa>
        else if(List[TIM_BASE].Val<18)FTmp= FTmp*1000;
 8014540:	4b18      	ldr	r3, [pc, #96]	; (80145a4 <Update_Detail+0xff8>)
 8014542:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014546:	2b11      	cmp	r3, #17
 8014548:	dc05      	bgt.n	8014556 <Update_Detail+0xfaa>
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014550:	fb02 f303 	mul.w	r3, r2, r3
 8014554:	60fb      	str	r3, [r7, #12]
        FTmp=FTmp/Ts[List[TIM_BASE].Val]/DEPTH[List[SMPL_DPTH].Val];
 8014556:	4b13      	ldr	r3, [pc, #76]	; (80145a4 <Update_Detail+0xff8>)
 8014558:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801455c:	461a      	mov	r2, r3
 801455e:	4b17      	ldr	r3, [pc, #92]	; (80145bc <Update_Detail+0x1010>)
 8014560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014564:	461a      	mov	r2, r3
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	fbb3 f3f2 	udiv	r3, r3, r2
 801456c:	4a0d      	ldr	r2, [pc, #52]	; (80145a4 <Update_Detail+0xff8>)
 801456e:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 8014572:	4611      	mov	r1, r2
 8014574:	4a12      	ldr	r2, [pc, #72]	; (80145c0 <Update_Detail+0x1014>)
 8014576:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 801457a:	fbb3 f3f2 	udiv	r3, r3, r2
 801457e:	60fb      	str	r3, [r7, #12]
        DispFreq(    1, UNSIGN,FTmp);
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	461a      	mov	r2, r3
 8014584:	2101      	movs	r1, #1
 8014586:	2001      	movs	r0, #1
 8014588:	f000 fa08 	bl	801499c <DispFreq>
  for(i=Y_RANGES; i<=STANDBY; i++){
 801458c:	8afb      	ldrh	r3, [r7, #22]
 801458e:	3301      	adds	r3, #1
 8014590:	82fb      	strh	r3, [r7, #22]
 8014592:	8afb      	ldrh	r3, [r7, #22]
 8014594:	2b29      	cmp	r3, #41	; 0x29
 8014596:	f67f a849 	bls.w	801362c <Update_Detail+0x80>
      }
    }
  }

}
 801459a:	bf00      	nop
 801459c:	bf00      	nop
 801459e:	371c      	adds	r7, #28
 80145a0:	46bd      	mov	sp, r7
 80145a2:	bd90      	pop	{r4, r7, pc}
 80145a4:	2000029c 	.word	0x2000029c
 80145a8:	08001d68 	.word	0x08001d68
 80145ac:	20002870 	.word	0x20002870
 80145b0:	200001d0 	.word	0x200001d0
 80145b4:	20002858 	.word	0x20002858
 80145b8:	000f4240 	.word	0x000f4240
 80145bc:	080022a0 	.word	0x080022a0
 80145c0:	08002270 	.word	0x08002270

080145c4 <DispMeter>:
/*******************************************************************************

*******************************************************************************/
void DispMeter(short Item, char St, char Mode, int Val)
{
 80145c4:	b580      	push	{r7, lr}
 80145c6:	b084      	sub	sp, #16
 80145c8:	af02      	add	r7, sp, #8
 80145ca:	603b      	str	r3, [r7, #0]
 80145cc:	4603      	mov	r3, r0
 80145ce:	80fb      	strh	r3, [r7, #6]
 80145d0:	460b      	mov	r3, r1
 80145d2:	717b      	strb	r3, [r7, #5]
 80145d4:	4613      	mov	r3, r2
 80145d6:	713b      	strb	r3, [r7, #4]
  SetColor(GRY, TCOLOR[ME]);
 80145d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80145dc:	4619      	mov	r1, r3
 80145de:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80145e2:	f7f9 fcb3 	bl	800df4c <SetColor>

  Draw_Circle_D(INV, S_X[Item]-3, LABLE_Y, 11, 0, 6*12);
 80145e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80145ea:	4a30      	ldr	r2, [pc, #192]	; (80146ac <DispMeter+0xe8>)
 80145ec:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80145f0:	b29b      	uxth	r3, r3
 80145f2:	3b03      	subs	r3, #3
 80145f4:	b29b      	uxth	r3, r3
 80145f6:	b219      	sxth	r1, r3
 80145f8:	2348      	movs	r3, #72	; 0x48
 80145fa:	9301      	str	r3, [sp, #4]
 80145fc:	2300      	movs	r3, #0
 80145fe:	9300      	str	r3, [sp, #0]
 8014600:	230b      	movs	r3, #11
 8014602:	2203      	movs	r2, #3
 8014604:	2001      	movs	r0, #1
 8014606:	f7f9 fd8f 	bl	800e128 <Draw_Circle_D>
  DispStr(S_X[Item], LABLE_Y, INV, (char *)&Z[Item-FREQUENC]);// ��ʾ������Ŀ����
 801460a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801460e:	4a27      	ldr	r2, [pc, #156]	; (80146ac <DispMeter+0xe8>)
 8014610:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8014614:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014618:	f1a3 0213 	sub.w	r2, r3, #19
 801461c:	4613      	mov	r3, r2
 801461e:	005b      	lsls	r3, r3, #1
 8014620:	4413      	add	r3, r2
 8014622:	005b      	lsls	r3, r3, #1
 8014624:	4a22      	ldr	r2, [pc, #136]	; (80146b0 <DispMeter+0xec>)
 8014626:	4413      	add	r3, r2
 8014628:	2201      	movs	r2, #1
 801462a:	2103      	movs	r1, #3
 801462c:	f7f9 fca6 	bl	800df7c <DispStr>
  Value2Str(NumStr, Val, List[Item].PTR, 3, Mode);
 8014630:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014634:	4a1f      	ldr	r2, [pc, #124]	; (80146b4 <DispMeter+0xf0>)
 8014636:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801463a:	793b      	ldrb	r3, [r7, #4]
 801463c:	9300      	str	r3, [sp, #0]
 801463e:	2303      	movs	r3, #3
 8014640:	6839      	ldr	r1, [r7, #0]
 8014642:	481d      	ldr	r0, [pc, #116]	; (80146b8 <DispMeter+0xf4>)
 8014644:	f7fd fb72 	bl	8011d2c <Value2Str>

  if(St)
 8014648:	797b      	ldrb	r3, [r7, #5]
 801464a:	2b00      	cmp	r3, #0
 801464c:	d01c      	beq.n	8014688 <DispMeter+0xc4>
  {
    DispStr(S_X[Item]+24, LABLE_Y, INV, ":       ");
 801464e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014652:	4a16      	ldr	r2, [pc, #88]	; (80146ac <DispMeter+0xe8>)
 8014654:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8014658:	b29b      	uxth	r3, r3
 801465a:	3318      	adds	r3, #24
 801465c:	b29b      	uxth	r3, r3
 801465e:	b218      	sxth	r0, r3
 8014660:	4b16      	ldr	r3, [pc, #88]	; (80146bc <DispMeter+0xf8>)
 8014662:	2201      	movs	r2, #1
 8014664:	2103      	movs	r1, #3
 8014666:	f7f9 fc89 	bl	800df7c <DispStr>
    DispStr(S_X[Item]+30, LABLE_Y, INV, (char *)NumStr);   // ��ʾ������ֵ+����
 801466a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801466e:	4a0f      	ldr	r2, [pc, #60]	; (80146ac <DispMeter+0xe8>)
 8014670:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8014674:	b29b      	uxth	r3, r3
 8014676:	331e      	adds	r3, #30
 8014678:	b29b      	uxth	r3, r3
 801467a:	b218      	sxth	r0, r3
 801467c:	4b0e      	ldr	r3, [pc, #56]	; (80146b8 <DispMeter+0xf4>)
 801467e:	2201      	movs	r2, #1
 8014680:	2103      	movs	r1, #3
 8014682:	f7f9 fc7b 	bl	800df7c <DispStr>
  }
  else
	  DispStr(S_X[Item]+24, LABLE_Y, INV, ": ----- ");
}
 8014686:	e00d      	b.n	80146a4 <DispMeter+0xe0>
	  DispStr(S_X[Item]+24, LABLE_Y, INV, ": ----- ");
 8014688:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801468c:	4a07      	ldr	r2, [pc, #28]	; (80146ac <DispMeter+0xe8>)
 801468e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8014692:	b29b      	uxth	r3, r3
 8014694:	3318      	adds	r3, #24
 8014696:	b29b      	uxth	r3, r3
 8014698:	b218      	sxth	r0, r3
 801469a:	4b09      	ldr	r3, [pc, #36]	; (80146c0 <DispMeter+0xfc>)
 801469c:	2201      	movs	r2, #1
 801469e:	2103      	movs	r1, #3
 80146a0:	f7f9 fc6c 	bl	800df7c <DispStr>
}
 80146a4:	bf00      	nop
 80146a6:	3708      	adds	r7, #8
 80146a8:	46bd      	mov	sp, r7
 80146aa:	bd80      	pop	{r7, pc}
 80146ac:	0800215c 	.word	0x0800215c
 80146b0:	08001d18 	.word	0x08001d18
 80146b4:	2000029c 	.word	0x2000029c
 80146b8:	20002844 	.word	0x20002844
 80146bc:	080009d4 	.word	0x080009d4
 80146c0:	080009e0 	.word	0x080009e0

080146c4 <DispStatus>:

/*******************************************************************************

*******************************************************************************/
void DispStatus(void)
{
 80146c4:	b580      	push	{r7, lr}
 80146c6:	b084      	sub	sp, #16
 80146c8:	af02      	add	r7, sp, #8
  char* p;
  SetColor(GRY, (Status & STOP) ? RED : TCOLOR[TRG]);
 80146ca:	4b20      	ldr	r3, [pc, #128]	; (801474c <DispStatus+0x88>)
 80146cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80146d0:	b29b      	uxth	r3, r3
 80146d2:	f003 0301 	and.w	r3, r3, #1
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d102      	bne.n	80146e0 <DispStatus+0x1c>
 80146da:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80146de:	e000      	b.n	80146e2 <DispStatus+0x1e>
 80146e0:	231f      	movs	r3, #31
 80146e2:	4619      	mov	r1, r3
 80146e4:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80146e8:	f7f9 fc30 	bl	800df4c <SetColor>
  p =(Status & STOP)?(char*)M :(List[SYNCMODE].PTR +(List[SYNCMODE].Val)*6);
 80146ec:	4b17      	ldr	r3, [pc, #92]	; (801474c <DispStatus+0x88>)
 80146ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80146f2:	b29b      	uxth	r3, r3
 80146f4:	f003 0301 	and.w	r3, r3, #1
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d10b      	bne.n	8014714 <DispStatus+0x50>
 80146fc:	4b14      	ldr	r3, [pc, #80]	; (8014750 <DispStatus+0x8c>)
 80146fe:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8014700:	4b13      	ldr	r3, [pc, #76]	; (8014750 <DispStatus+0x8c>)
 8014702:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8014706:	4619      	mov	r1, r3
 8014708:	460b      	mov	r3, r1
 801470a:	005b      	lsls	r3, r3, #1
 801470c:	440b      	add	r3, r1
 801470e:	005b      	lsls	r3, r3, #1
 8014710:	4413      	add	r3, r2
 8014712:	e000      	b.n	8014716 <DispStatus+0x52>
 8014714:	4b0f      	ldr	r3, [pc, #60]	; (8014754 <DispStatus+0x90>)
 8014716:	607b      	str	r3, [r7, #4]
  Draw_Circle_D(INV, S_X[SYNCMODE]-3, TITLE_Y_POS, 11, 1, 6*4);
 8014718:	f240 1321 	movw	r3, #289	; 0x121
 801471c:	b29b      	uxth	r3, r3
 801471e:	3b03      	subs	r3, #3
 8014720:	b29b      	uxth	r3, r3
 8014722:	b219      	sxth	r1, r3
 8014724:	2318      	movs	r3, #24
 8014726:	9301      	str	r3, [sp, #4]
 8014728:	2301      	movs	r3, #1
 801472a:	9300      	str	r3, [sp, #0]
 801472c:	230b      	movs	r3, #11
 801472e:	22e1      	movs	r2, #225	; 0xe1
 8014730:	2001      	movs	r0, #1
 8014732:	f7f9 fcf9 	bl	800e128 <Draw_Circle_D>
  DispStr(S_X[SYNCMODE], TITLE_Y_POS, INV, (char *)p);
 8014736:	f240 1021 	movw	r0, #289	; 0x121
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	2201      	movs	r2, #1
 801473e:	21e1      	movs	r1, #225	; 0xe1
 8014740:	f7f9 fc1c 	bl	800df7c <DispStr>
}
 8014744:	bf00      	nop
 8014746:	3708      	adds	r7, #8
 8014748:	46bd      	mov	sp, r7
 801474a:	bd80      	pop	{r7, pc}
 801474c:	200007a8 	.word	0x200007a8
 8014750:	2000029c 	.word	0x2000029c
 8014754:	08001cb4 	.word	0x08001cb4

08014758 <Update_Windows>:

/*******************************************************************************
���»���������λ��
*******************************************************************************/
void Update_Windows(void)
{
 8014758:	b580      	push	{r7, lr}
 801475a:	b084      	sub	sp, #16
 801475c:	af00      	add	r7, sp, #0
  short  x0,x,y,i,j,Width;
  short  Depth =  DEPTH[List[SMPL_DPTH].Val];
 801475e:	4b6a      	ldr	r3, [pc, #424]	; (8014908 <Update_Windows+0x1b0>)
 8014760:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8014764:	461a      	mov	r2, r3
 8014766:	4b69      	ldr	r3, [pc, #420]	; (801490c <Update_Windows+0x1b4>)
 8014768:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801476c:	80fb      	strh	r3, [r7, #6]
  Width =(300*300)/Depth;
 801476e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014772:	4a67      	ldr	r2, [pc, #412]	; (8014910 <Update_Windows+0x1b8>)
 8014774:	fb92 f3f3 	sdiv	r3, r2, r3
 8014778:	80bb      	strh	r3, [r7, #4]
  if(Current == XN &&(PopType & LIST_POP) )
 801477a:	4b66      	ldr	r3, [pc, #408]	; (8014914 <Update_Windows+0x1bc>)
 801477c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014780:	2b01      	cmp	r3, #1
 8014782:	f040 80a9 	bne.w	80148d8 <Update_Windows+0x180>
 8014786:	4b64      	ldr	r3, [pc, #400]	; (8014918 <Update_Windows+0x1c0>)
 8014788:	781b      	ldrb	r3, [r3, #0]
 801478a:	f003 0302 	and.w	r3, r3, #2
 801478e:	2b00      	cmp	r3, #0
 8014790:	f000 80a2 	beq.w	80148d8 <Update_Windows+0x180>
  {
      Windows_Pop = 1;
 8014794:	4b61      	ldr	r3, [pc, #388]	; (801491c <Update_Windows+0x1c4>)
 8014796:	2201      	movs	r2, #1
 8014798:	701a      	strb	r2, [r3, #0]
      x0=2+(List[VIEWPOSI].Val)*300/Depth;
 801479a:	4b5b      	ldr	r3, [pc, #364]	; (8014908 <Update_Windows+0x1b0>)
 801479c:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80147a0:	461a      	mov	r2, r3
 80147a2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80147a6:	fb03 f202 	mul.w	r2, r3, r2
 80147aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80147ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80147b2:	b29b      	uxth	r3, r3
 80147b4:	3302      	adds	r3, #2
 80147b6:	b29b      	uxth	r3, r3
 80147b8:	81fb      	strh	r3, [r7, #14]
      x=2;
 80147ba:	2302      	movs	r3, #2
 80147bc:	81bb      	strh	r3, [r7, #12]
      y=15;
 80147be:	230f      	movs	r3, #15
 80147c0:	807b      	strh	r3, [r7, #2]
      for(i=0;i<300;i++){    //��������
 80147c2:	2300      	movs	r3, #0
 80147c4:	817b      	strh	r3, [r7, #10]
 80147c6:	e029      	b.n	801481c <Update_Windows+0xc4>
        LCD_Set_Posi(x++, y);
 80147c8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80147cc:	b293      	uxth	r3, r2
 80147ce:	3301      	adds	r3, #1
 80147d0:	b29b      	uxth	r3, r3
 80147d2:	81bb      	strh	r3, [r7, #12]
 80147d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80147d8:	4619      	mov	r1, r3
 80147da:	4610      	mov	r0, r2
 80147dc:	f7fd fe66 	bl	80124ac <LCD_Set_Posi>
        LCD_Set_Pixel(DAR);
 80147e0:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80147e4:	f7fd feb0 	bl	8012548 <LCD_Set_Pixel>
        for(j=0; j<2; j++)LCD_Set_Pixel(RED);
 80147e8:	2300      	movs	r3, #0
 80147ea:	813b      	strh	r3, [r7, #8]
 80147ec:	e008      	b.n	8014800 <Update_Windows+0xa8>
 80147ee:	201f      	movs	r0, #31
 80147f0:	f7fd feaa 	bl	8012548 <LCD_Set_Pixel>
 80147f4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80147f8:	b29b      	uxth	r3, r3
 80147fa:	3301      	adds	r3, #1
 80147fc:	b29b      	uxth	r3, r3
 80147fe:	813b      	strh	r3, [r7, #8]
 8014800:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014804:	2b01      	cmp	r3, #1
 8014806:	ddf2      	ble.n	80147ee <Update_Windows+0x96>
        LCD_Set_Pixel(DAR);
 8014808:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801480c:	f7fd fe9c 	bl	8012548 <LCD_Set_Pixel>
      for(i=0;i<300;i++){    //��������
 8014810:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014814:	b29b      	uxth	r3, r3
 8014816:	3301      	adds	r3, #1
 8014818:	b29b      	uxth	r3, r3
 801481a:	817b      	strh	r3, [r7, #10]
 801481c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014820:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014824:	dbd0      	blt.n	80147c8 <Update_Windows+0x70>
      }
      if(Current == XN && (MenuNow[XN]==SMPL_DPTH ))
 8014826:	4b3b      	ldr	r3, [pc, #236]	; (8014914 <Update_Windows+0x1bc>)
 8014828:	f9b3 3000 	ldrsh.w	r3, [r3]
 801482c:	2b01      	cmp	r3, #1
 801482e:	d122      	bne.n	8014876 <Update_Windows+0x11e>
 8014830:	4b3b      	ldr	r3, [pc, #236]	; (8014920 <Update_Windows+0x1c8>)
 8014832:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014836:	2b09      	cmp	r3, #9
 8014838:	d11d      	bne.n	8014876 <Update_Windows+0x11e>
      {  //Depthѡ��
        if(Key_Buffer == KEYCODE_RIGHT || Key_Buffer == KEYCODE_LEFT)
 801483a:	4b3a      	ldr	r3, [pc, #232]	; (8014924 <Update_Windows+0x1cc>)
 801483c:	781b      	ldrb	r3, [r3, #0]
 801483e:	b2db      	uxtb	r3, r3
 8014840:	2b06      	cmp	r3, #6
 8014842:	d004      	beq.n	801484e <Update_Windows+0xf6>
 8014844:	4b37      	ldr	r3, [pc, #220]	; (8014924 <Update_Windows+0x1cc>)
 8014846:	781b      	ldrb	r3, [r3, #0]
 8014848:	b2db      	uxtb	r3, r3
 801484a:	2b05      	cmp	r3, #5
 801484c:	d113      	bne.n	8014876 <Update_Windows+0x11e>
        {  //ѡ���б䶯ʱ�ı�Ԥ����λ��
          List[VIEWPOSI].Val= 0;
 801484e:	4b2e      	ldr	r3, [pc, #184]	; (8014908 <Update_Windows+0x1b0>)
 8014850:	2200      	movs	r2, #0
 8014852:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
          x0=2+(List[VIEWPOSI].Val)*300/Depth;
 8014856:	4b2c      	ldr	r3, [pc, #176]	; (8014908 <Update_Windows+0x1b0>)
 8014858:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 801485c:	461a      	mov	r2, r3
 801485e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8014862:	fb03 f202 	mul.w	r2, r3, r2
 8014866:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801486a:	fb92 f3f3 	sdiv	r3, r2, r3
 801486e:	b29b      	uxth	r3, r3
 8014870:	3302      	adds	r3, #2
 8014872:	b29b      	uxth	r3, r3
 8014874:	81fb      	strh	r3, [r7, #14]
        }
      }
      x = x0;               //��ǰ�����ڻ�����λ��
 8014876:	89fb      	ldrh	r3, [r7, #14]
 8014878:	81bb      	strh	r3, [r7, #12]
      y=15;
 801487a:	230f      	movs	r3, #15
 801487c:	807b      	strh	r3, [r7, #2]
      for(i=0;i<Width;i++){
 801487e:	2300      	movs	r3, #0
 8014880:	817b      	strh	r3, [r7, #10]
 8014882:	e022      	b.n	80148ca <Update_Windows+0x172>
        LCD_Set_Posi(x++, y);
 8014884:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8014888:	b293      	uxth	r3, r2
 801488a:	3301      	adds	r3, #1
 801488c:	b29b      	uxth	r3, r3
 801488e:	81bb      	strh	r3, [r7, #12]
 8014890:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014894:	4619      	mov	r1, r3
 8014896:	4610      	mov	r0, r2
 8014898:	f7fd fe08 	bl	80124ac <LCD_Set_Posi>
        for(j=0; j<4; j++)LCD_Set_Pixel(GRN);
 801489c:	2300      	movs	r3, #0
 801489e:	813b      	strh	r3, [r7, #8]
 80148a0:	e009      	b.n	80148b6 <Update_Windows+0x15e>
 80148a2:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80148a6:	f7fd fe4f 	bl	8012548 <LCD_Set_Pixel>
 80148aa:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80148ae:	b29b      	uxth	r3, r3
 80148b0:	3301      	adds	r3, #1
 80148b2:	b29b      	uxth	r3, r3
 80148b4:	813b      	strh	r3, [r7, #8]
 80148b6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80148ba:	2b03      	cmp	r3, #3
 80148bc:	ddf1      	ble.n	80148a2 <Update_Windows+0x14a>
      for(i=0;i<Width;i++){
 80148be:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80148c2:	b29b      	uxth	r3, r3
 80148c4:	3301      	adds	r3, #1
 80148c6:	b29b      	uxth	r3, r3
 80148c8:	817b      	strh	r3, [r7, #10]
 80148ca:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80148ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80148d2:	429a      	cmp	r2, r3
 80148d4:	dbd6      	blt.n	8014884 <Update_Windows+0x12c>
  if(Current == XN &&(PopType & LIST_POP) )
 80148d6:	e012      	b.n	80148fe <Update_Windows+0x1a6>
      }
  }
  else if(Current == XN &&!(PopType & LIST_POP))
 80148d8:	4b0e      	ldr	r3, [pc, #56]	; (8014914 <Update_Windows+0x1bc>)
 80148da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80148de:	2b01      	cmp	r3, #1
 80148e0:	d10d      	bne.n	80148fe <Update_Windows+0x1a6>
 80148e2:	4b0d      	ldr	r3, [pc, #52]	; (8014918 <Update_Windows+0x1c0>)
 80148e4:	781b      	ldrb	r3, [r3, #0]
 80148e6:	f003 0302 	and.w	r3, r3, #2
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d107      	bne.n	80148fe <Update_Windows+0x1a6>
  {
    Windows_Pop = 0;
 80148ee:	4b0b      	ldr	r3, [pc, #44]	; (801491c <Update_Windows+0x1c4>)
 80148f0:	2200      	movs	r2, #0
 80148f2:	701a      	strb	r2, [r3, #0]
    Clr_WavePosi(DAR);
 80148f4:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80148f8:	f000 f816 	bl	8014928 <Clr_WavePosi>
  }
}
 80148fc:	e7ff      	b.n	80148fe <Update_Windows+0x1a6>
 80148fe:	bf00      	nop
 8014900:	3710      	adds	r7, #16
 8014902:	46bd      	mov	sp, r7
 8014904:	bd80      	pop	{r7, pc}
 8014906:	bf00      	nop
 8014908:	2000029c 	.word	0x2000029c
 801490c:	08002270 	.word	0x08002270
 8014910:	00015f90 	.word	0x00015f90
 8014914:	200007a6 	.word	0x200007a6
 8014918:	20000796 	.word	0x20000796
 801491c:	200007ae 	.word	0x200007ae
 8014920:	2000053c 	.word	0x2000053c
 8014924:	20000781 	.word	0x20000781

08014928 <Clr_WavePosi>:

/*******************************************************************************
 void Clr_WavePosi(u16 Col)  �������λ����ʾ
*******************************************************************************/
void Clr_WavePosi(short Col)
{
 8014928:	b580      	push	{r7, lr}
 801492a:	b084      	sub	sp, #16
 801492c:	af00      	add	r7, sp, #0
 801492e:	4603      	mov	r3, r0
 8014930:	80fb      	strh	r3, [r7, #6]
  short x,y,i,j;
  x=2;
 8014932:	2302      	movs	r3, #2
 8014934:	81fb      	strh	r3, [r7, #14]
  y=14;
 8014936:	230e      	movs	r3, #14
 8014938:	813b      	strh	r3, [r7, #8]
  for(i=0;i<300;i++)
 801493a:	2300      	movs	r3, #0
 801493c:	81bb      	strh	r3, [r7, #12]
 801493e:	e022      	b.n	8014986 <Clr_WavePosi+0x5e>
  {
    LCD_Set_Posi(x++, y);
 8014940:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8014944:	b293      	uxth	r3, r2
 8014946:	3301      	adds	r3, #1
 8014948:	b29b      	uxth	r3, r3
 801494a:	81fb      	strh	r3, [r7, #14]
 801494c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014950:	4619      	mov	r1, r3
 8014952:	4610      	mov	r0, r2
 8014954:	f7fd fdaa 	bl	80124ac <LCD_Set_Posi>
    for(j=0; j<6; j++)
 8014958:	2300      	movs	r3, #0
 801495a:	817b      	strh	r3, [r7, #10]
 801495c:	e009      	b.n	8014972 <Clr_WavePosi+0x4a>
    	LCD_Set_Pixel(Col);
 801495e:	88fb      	ldrh	r3, [r7, #6]
 8014960:	4618      	mov	r0, r3
 8014962:	f7fd fdf1 	bl	8012548 <LCD_Set_Pixel>
    for(j=0; j<6; j++)
 8014966:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801496a:	b29b      	uxth	r3, r3
 801496c:	3301      	adds	r3, #1
 801496e:	b29b      	uxth	r3, r3
 8014970:	817b      	strh	r3, [r7, #10]
 8014972:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014976:	2b05      	cmp	r3, #5
 8014978:	ddf1      	ble.n	801495e <Clr_WavePosi+0x36>
  for(i=0;i<300;i++)
 801497a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801497e:	b29b      	uxth	r3, r3
 8014980:	3301      	adds	r3, #1
 8014982:	b29b      	uxth	r3, r3
 8014984:	81bb      	strh	r3, [r7, #12]
 8014986:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801498a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801498e:	dbd7      	blt.n	8014940 <Clr_WavePosi+0x18>
  }
}
 8014990:	bf00      	nop
 8014992:	bf00      	nop
 8014994:	3710      	adds	r7, #16
 8014996:	46bd      	mov	sp, r7
 8014998:	bd80      	pop	{r7, pc}
	...

0801499c <DispFreq>:

/*******************************************************************************

*******************************************************************************/
void DispFreq(char St, char Mode, int Val)
{
 801499c:	b580      	push	{r7, lr}
 801499e:	b084      	sub	sp, #16
 80149a0:	af02      	add	r7, sp, #8
 80149a2:	4603      	mov	r3, r0
 80149a4:	603a      	str	r2, [r7, #0]
 80149a6:	71fb      	strb	r3, [r7, #7]
 80149a8:	460b      	mov	r3, r1
 80149aa:	71bb      	strb	r3, [r7, #6]
  SetColor(GRY, TCOLOR[ME]);
 80149ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80149b0:	4619      	mov	r1, r3
 80149b2:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80149b6:	f7f9 fac9 	bl	800df4c <SetColor>

  Draw_Circle_D(INV, S_X[FREQUENC]-6*15-3+4, LABLE_Y, 11, 0, 6*12);
 80149ba:	23a2      	movs	r3, #162	; 0xa2
 80149bc:	b29b      	uxth	r3, r3
 80149be:	3b59      	subs	r3, #89	; 0x59
 80149c0:	b29b      	uxth	r3, r3
 80149c2:	b219      	sxth	r1, r3
 80149c4:	2348      	movs	r3, #72	; 0x48
 80149c6:	9301      	str	r3, [sp, #4]
 80149c8:	2300      	movs	r3, #0
 80149ca:	9300      	str	r3, [sp, #0]
 80149cc:	230b      	movs	r3, #11
 80149ce:	2203      	movs	r2, #3
 80149d0:	2001      	movs	r0, #1
 80149d2:	f7f9 fba9 	bl	800e128 <Draw_Circle_D>
  DispStr(S_X[FREQUENC]-6*15+4, LABLE_Y, INV, (char*)&Z[0]);// ��ʾ������Ŀ����
 80149d6:	23a2      	movs	r3, #162	; 0xa2
 80149d8:	b29b      	uxth	r3, r3
 80149da:	3b56      	subs	r3, #86	; 0x56
 80149dc:	b29b      	uxth	r3, r3
 80149de:	b218      	sxth	r0, r3
 80149e0:	4b1a      	ldr	r3, [pc, #104]	; (8014a4c <DispFreq+0xb0>)
 80149e2:	2201      	movs	r2, #1
 80149e4:	2103      	movs	r1, #3
 80149e6:	f7f9 fac9 	bl	800df7c <DispStr>
  Value2Str(NumStr, Val, List[FREQUENC].PTR, 3, Mode);
 80149ea:	4b19      	ldr	r3, [pc, #100]	; (8014a50 <DispFreq+0xb4>)
 80149ec:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80149f0:	79bb      	ldrb	r3, [r7, #6]
 80149f2:	9300      	str	r3, [sp, #0]
 80149f4:	2303      	movs	r3, #3
 80149f6:	6839      	ldr	r1, [r7, #0]
 80149f8:	4816      	ldr	r0, [pc, #88]	; (8014a54 <DispFreq+0xb8>)
 80149fa:	f7fd f997 	bl	8011d2c <Value2Str>

  if(St) {
 80149fe:	79fb      	ldrb	r3, [r7, #7]
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d014      	beq.n	8014a2e <DispFreq+0x92>
    DispStr(24+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, ":       ");
 8014a04:	23a2      	movs	r3, #162	; 0xa2
 8014a06:	b29b      	uxth	r3, r3
 8014a08:	3b3e      	subs	r3, #62	; 0x3e
 8014a0a:	b29b      	uxth	r3, r3
 8014a0c:	b218      	sxth	r0, r3
 8014a0e:	4b12      	ldr	r3, [pc, #72]	; (8014a58 <DispFreq+0xbc>)
 8014a10:	2201      	movs	r2, #1
 8014a12:	2103      	movs	r1, #3
 8014a14:	f7f9 fab2 	bl	800df7c <DispStr>
    DispStr(30+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, (char *)NumStr);   // ��ʾ������ֵ+����
 8014a18:	23a2      	movs	r3, #162	; 0xa2
 8014a1a:	b29b      	uxth	r3, r3
 8014a1c:	3b38      	subs	r3, #56	; 0x38
 8014a1e:	b29b      	uxth	r3, r3
 8014a20:	b218      	sxth	r0, r3
 8014a22:	4b0c      	ldr	r3, [pc, #48]	; (8014a54 <DispFreq+0xb8>)
 8014a24:	2201      	movs	r2, #1
 8014a26:	2103      	movs	r1, #3
 8014a28:	f7f9 faa8 	bl	800df7c <DispStr>
  }
  else   DispStr(24+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, ": ---- ");
}
 8014a2c:	e009      	b.n	8014a42 <DispFreq+0xa6>
  else   DispStr(24+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, ": ---- ");
 8014a2e:	23a2      	movs	r3, #162	; 0xa2
 8014a30:	b29b      	uxth	r3, r3
 8014a32:	3b3e      	subs	r3, #62	; 0x3e
 8014a34:	b29b      	uxth	r3, r3
 8014a36:	b218      	sxth	r0, r3
 8014a38:	4b08      	ldr	r3, [pc, #32]	; (8014a5c <DispFreq+0xc0>)
 8014a3a:	2201      	movs	r2, #1
 8014a3c:	2103      	movs	r1, #3
 8014a3e:	f7f9 fa9d 	bl	800df7c <DispStr>
}
 8014a42:	bf00      	nop
 8014a44:	3708      	adds	r7, #8
 8014a46:	46bd      	mov	sp, r7
 8014a48:	bd80      	pop	{r7, pc}
 8014a4a:	bf00      	nop
 8014a4c:	08001d18 	.word	0x08001d18
 8014a50:	2000029c 	.word	0x2000029c
 8014a54:	20002844 	.word	0x20002844
 8014a58:	080009d4 	.word	0x080009d4
 8014a5c:	080009ec 	.word	0x080009ec

08014a60 <Show_List>:

/*******************************************************************************
 Show_List: ���ò˵���λ�á��ߴ硢��ɫ����ʾ����
*******************************************************************************/
void Show_List(void)
{
 8014a60:	b580      	push	{r7, lr}
 8014a62:	b088      	sub	sp, #32
 8014a64:	af02      	add	r7, sp, #8
  short i, Ny0, Nx0, CurrentMax = MU_BEGN[Current]+ M_ITEMS[Current];
 8014a66:	4b59      	ldr	r3, [pc, #356]	; (8014bcc <Show_List+0x16c>)
 8014a68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014a6c:	461a      	mov	r2, r3
 8014a6e:	4b58      	ldr	r3, [pc, #352]	; (8014bd0 <Show_List+0x170>)
 8014a70:	5c9b      	ldrb	r3, [r3, r2]
 8014a72:	b29a      	uxth	r2, r3
 8014a74:	4b55      	ldr	r3, [pc, #340]	; (8014bcc <Show_List+0x16c>)
 8014a76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014a7a:	4619      	mov	r1, r3
 8014a7c:	4b55      	ldr	r3, [pc, #340]	; (8014bd4 <Show_List+0x174>)
 8014a7e:	5c5b      	ldrb	r3, [r3, r1]
 8014a80:	b29b      	uxth	r3, r3
 8014a82:	4413      	add	r3, r2
 8014a84:	b29b      	uxth	r3, r3
 8014a86:	827b      	strh	r3, [r7, #18]
  char  Flag = 0;
 8014a88:	2300      	movs	r3, #0
 8014a8a:	757b      	strb	r3, [r7, #21]
  char  str[12];
  ParamTab[BXx1]= BLOCK_X[Current];
 8014a8c:	4b4f      	ldr	r3, [pc, #316]	; (8014bcc <Show_List+0x16c>)
 8014a8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014a92:	461a      	mov	r2, r3
 8014a94:	4b50      	ldr	r3, [pc, #320]	; (8014bd8 <Show_List+0x178>)
 8014a96:	5c9b      	ldrb	r3, [r3, r2]
 8014a98:	b21a      	sxth	r2, r3
 8014a9a:	4b50      	ldr	r3, [pc, #320]	; (8014bdc <Show_List+0x17c>)
 8014a9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  ParamTab[BYx2]= BLOCK_Y[Current]*2;
 8014aa0:	4b4a      	ldr	r3, [pc, #296]	; (8014bcc <Show_List+0x16c>)
 8014aa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014aa6:	461a      	mov	r2, r3
 8014aa8:	4b4d      	ldr	r3, [pc, #308]	; (8014be0 <Show_List+0x180>)
 8014aaa:	5c9b      	ldrb	r3, [r3, r2]
 8014aac:	b29b      	uxth	r3, r3
 8014aae:	005b      	lsls	r3, r3, #1
 8014ab0:	b29b      	uxth	r3, r3
 8014ab2:	b21a      	sxth	r2, r3
 8014ab4:	4b49      	ldr	r3, [pc, #292]	; (8014bdc <Show_List+0x17c>)
 8014ab6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  ParamTab[WXx1]= BLOCK_W[Current];
 8014aba:	4b44      	ldr	r3, [pc, #272]	; (8014bcc <Show_List+0x16c>)
 8014abc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014ac0:	461a      	mov	r2, r3
 8014ac2:	4b48      	ldr	r3, [pc, #288]	; (8014be4 <Show_List+0x184>)
 8014ac4:	5c9b      	ldrb	r3, [r3, r2]
 8014ac6:	b21a      	sxth	r2, r3
 8014ac8:	4b44      	ldr	r3, [pc, #272]	; (8014bdc <Show_List+0x17c>)
 8014aca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  ParamTab[HYx2]=(M_ITEMS[Current]+1)*32;
 8014ace:	4b3f      	ldr	r3, [pc, #252]	; (8014bcc <Show_List+0x16c>)
 8014ad0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014ad4:	461a      	mov	r2, r3
 8014ad6:	4b3f      	ldr	r3, [pc, #252]	; (8014bd4 <Show_List+0x174>)
 8014ad8:	5c9b      	ldrb	r3, [r3, r2]
 8014ada:	3301      	adds	r3, #1
 8014adc:	b29b      	uxth	r3, r3
 8014ade:	015b      	lsls	r3, r3, #5
 8014ae0:	b29b      	uxth	r3, r3
 8014ae2:	b21a      	sxth	r2, r3
 8014ae4:	4b3d      	ldr	r3, [pc, #244]	; (8014bdc <Show_List+0x17c>)
 8014ae6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  PopColor(WHT, DAR);
 8014aea:	f643 11e7 	movw	r1, #14823	; 0x39e7
 8014aee:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014af2:	f7f9 ff95 	bl	800ea20 <PopColor>
  Buil_Pop();
 8014af6:	f7f9 fe85 	bl	800e804 <Buil_Pop>
  for(i=MU_BEGN[Current]; i<CurrentMax; i++){
 8014afa:	4b34      	ldr	r3, [pc, #208]	; (8014bcc <Show_List+0x16c>)
 8014afc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014b00:	461a      	mov	r2, r3
 8014b02:	4b33      	ldr	r3, [pc, #204]	; (8014bd0 <Show_List+0x170>)
 8014b04:	5c9b      	ldrb	r3, [r3, r2]
 8014b06:	82fb      	strh	r3, [r7, #22]
 8014b08:	e054      	b.n	8014bb4 <Show_List+0x154>
    if(i == MenuNow[Current]) {
 8014b0a:	4b30      	ldr	r3, [pc, #192]	; (8014bcc <Show_List+0x16c>)
 8014b0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014b10:	461a      	mov	r2, r3
 8014b12:	4b35      	ldr	r3, [pc, #212]	; (8014be8 <Show_List+0x188>)
 8014b14:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8014b18:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014b1c:	429a      	cmp	r2, r3
 8014b1e:	d102      	bne.n	8014b26 <Show_List+0xc6>
      Flag = INV;
 8014b20:	2301      	movs	r3, #1
 8014b22:	757b      	strb	r3, [r7, #21]
 8014b24:	e007      	b.n	8014b36 <Show_List+0xd6>
    }
    else                      {
      PopColor(WHT, DAR);
 8014b26:	f643 11e7 	movw	r1, #14823	; 0x39e7
 8014b2a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014b2e:	f7f9 ff77 	bl	800ea20 <PopColor>
      Flag = PRN;
 8014b32:	2300      	movs	r3, #0
 8014b34:	757b      	strb	r3, [r7, #21]
    }
    Ny0 = ((CurrentMax - i)*17 - 10);
 8014b36:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8014b3a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014b3e:	1ad3      	subs	r3, r2, r3
 8014b40:	b29b      	uxth	r3, r3
 8014b42:	461a      	mov	r2, r3
 8014b44:	0112      	lsls	r2, r2, #4
 8014b46:	4413      	add	r3, r2
 8014b48:	b29b      	uxth	r3, r3
 8014b4a:	3b0a      	subs	r3, #10
 8014b4c:	b29b      	uxth	r3, r3
 8014b4e:	823b      	strh	r3, [r7, #16]
    Nx0 = N_X ;
 8014b50:	2304      	movs	r3, #4
 8014b52:	81fb      	strh	r3, [r7, #14]
    memset(str,0,12);
 8014b54:	463b      	mov	r3, r7
 8014b56:	220c      	movs	r2, #12
 8014b58:	2100      	movs	r1, #0
 8014b5a:	4618      	mov	r0, r3
 8014b5c:	f00e fa4a 	bl	8022ff4 <memset>
    memcpy(str,&ESTR[i],10);
 8014b60:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014b64:	4613      	mov	r3, r2
 8014b66:	009b      	lsls	r3, r3, #2
 8014b68:	4413      	add	r3, r2
 8014b6a:	005b      	lsls	r3, r3, #1
 8014b6c:	4a1f      	ldr	r2, [pc, #124]	; (8014bec <Show_List+0x18c>)
 8014b6e:	1899      	adds	r1, r3, r2
 8014b70:	463b      	mov	r3, r7
 8014b72:	220a      	movs	r2, #10
 8014b74:	4618      	mov	r0, r3
 8014b76:	f00e fa2f 	bl	8022fd8 <memcpy>
    NoteSTR(Nx0, Ny0, Flag, (char *)str);
 8014b7a:	463b      	mov	r3, r7
 8014b7c:	7d7a      	ldrb	r2, [r7, #21]
 8014b7e:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8014b82:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8014b86:	f7fa f89b 	bl	800ecc0 <NoteSTR>
    Note_4Point(PRN, Nx0, Ny0, strlen((char*)str), Font6x8_H);
 8014b8a:	463b      	mov	r3, r7
 8014b8c:	4618      	mov	r0, r3
 8014b8e:	f7f7 fa57 	bl	800c040 <strlen>
 8014b92:	4603      	mov	r3, r0
 8014b94:	b2db      	uxtb	r3, r3
 8014b96:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8014b9a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8014b9e:	200a      	movs	r0, #10
 8014ba0:	9000      	str	r0, [sp, #0]
 8014ba2:	2000      	movs	r0, #0
 8014ba4:	f7fa f932 	bl	800ee0c <Note_4Point>
  for(i=MU_BEGN[Current]; i<CurrentMax; i++){
 8014ba8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014bac:	b29b      	uxth	r3, r3
 8014bae:	3301      	adds	r3, #1
 8014bb0:	b29b      	uxth	r3, r3
 8014bb2:	82fb      	strh	r3, [r7, #22]
 8014bb4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014bb8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014bbc:	429a      	cmp	r2, r3
 8014bbe:	dba4      	blt.n	8014b0a <Show_List+0xaa>
  }
  List_Pop();
 8014bc0:	f7f9 ff5e 	bl	800ea80 <List_Pop>
}
 8014bc4:	bf00      	nop
 8014bc6:	3718      	adds	r7, #24
 8014bc8:	46bd      	mov	sp, r7
 8014bca:	bd80      	pop	{r7, pc}
 8014bcc:	200007a6 	.word	0x200007a6
 8014bd0:	08001f40 	.word	0x08001f40
 8014bd4:	08001f48 	.word	0x08001f48
 8014bd8:	08002144 	.word	0x08002144
 8014bdc:	20000144 	.word	0x20000144
 8014be0:	0800214c 	.word	0x0800214c
 8014be4:	08002154 	.word	0x08002154
 8014be8:	2000053c 	.word	0x2000053c
 8014bec:	08001f50 	.word	0x08001f50

08014bf0 <DispFileInfo>:

/*******************************************************************************

*******************************************************************************/
void DispFileInfo(char Info)
{
 8014bf0:	b580      	push	{r7, lr}
 8014bf2:	b084      	sub	sp, #16
 8014bf4:	af02      	add	r7, sp, #8
 8014bf6:	4603      	mov	r3, r0
 8014bf8:	71fb      	strb	r3, [r7, #7]
  SetColor(DAR, BLU);
 8014bfa:	f64f 4110 	movw	r1, #64528	; 0xfc10
 8014bfe:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014c02:	f7f9 f9a3 	bl	800df4c <SetColor>
  Draw_Circle_D(INV, S_X[SAVE_BMP]-3, LABLE_Y, 11, 0, 6*11);
 8014c06:	23f8      	movs	r3, #248	; 0xf8
 8014c08:	b29b      	uxth	r3, r3
 8014c0a:	3b03      	subs	r3, #3
 8014c0c:	b29b      	uxth	r3, r3
 8014c0e:	b219      	sxth	r1, r3
 8014c10:	2342      	movs	r3, #66	; 0x42
 8014c12:	9301      	str	r3, [sp, #4]
 8014c14:	2300      	movs	r3, #0
 8014c16:	9300      	str	r3, [sp, #0]
 8014c18:	230b      	movs	r3, #11
 8014c1a:	2203      	movs	r2, #3
 8014c1c:	2001      	movs	r0, #1
 8014c1e:	f7f9 fa83 	bl	800e128 <Draw_Circle_D>
  DispStr(S_X[SAVE_BMP], LABLE_Y, INV, (char *)(&FnNote+14*Info));
 8014c22:	20f8      	movs	r0, #248	; 0xf8
 8014c24:	79fb      	ldrb	r3, [r7, #7]
 8014c26:	f44f 7275 	mov.w	r2, #980	; 0x3d4
 8014c2a:	fb02 f303 	mul.w	r3, r2, r3
 8014c2e:	4a07      	ldr	r2, [pc, #28]	; (8014c4c <DispFileInfo+0x5c>)
 8014c30:	4413      	add	r3, r2
 8014c32:	2201      	movs	r2, #1
 8014c34:	2103      	movs	r1, #3
 8014c36:	f7f9 f9a1 	bl	800df7c <DispStr>
  HAL_Delay(2000);
 8014c3a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8014c3e:	f003 fda5 	bl	801878c <HAL_Delay>

}
 8014c42:	bf00      	nop
 8014c44:	3708      	adds	r7, #8
 8014c46:	46bd      	mov	sp, r7
 8014c48:	bd80      	pop	{r7, pc}
 8014c4a:	bf00      	nop
 8014c4c:	080022f0 	.word	0x080022f0

08014c50 <DispBMPInfo>:

/*******************************************************************************

*******************************************************************************/
void DispBMPInfo(void)
{
 8014c50:	b580      	push	{r7, lr}
 8014c52:	b082      	sub	sp, #8
 8014c54:	af02      	add	r7, sp, #8
  SetColor(GRY, TCOLOR[FN]);
 8014c56:	f64f 4310 	movw	r3, #64528	; 0xfc10
 8014c5a:	4619      	mov	r1, r3
 8014c5c:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014c60:	f7f9 f974 	bl	800df4c <SetColor>
  u8ToDec3(NumStr, List[SAVE_BMP].Val);
 8014c64:	4b1a      	ldr	r3, [pc, #104]	; (8014cd0 <DispBMPInfo+0x80>)
 8014c66:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 8014c6a:	b2db      	uxtb	r3, r3
 8014c6c:	4619      	mov	r1, r3
 8014c6e:	4819      	ldr	r0, [pc, #100]	; (8014cd4 <DispBMPInfo+0x84>)
 8014c70:	f7fc fff4 	bl	8011c5c <u8ToDec3>
  Draw_Circle_D(INV, S_X[SAVE_BMP]-3, LABLE_Y, 11, 0, 6*11);
 8014c74:	23f8      	movs	r3, #248	; 0xf8
 8014c76:	b29b      	uxth	r3, r3
 8014c78:	3b03      	subs	r3, #3
 8014c7a:	b29b      	uxth	r3, r3
 8014c7c:	b219      	sxth	r1, r3
 8014c7e:	2342      	movs	r3, #66	; 0x42
 8014c80:	9301      	str	r3, [sp, #4]
 8014c82:	2300      	movs	r3, #0
 8014c84:	9300      	str	r3, [sp, #0]
 8014c86:	230b      	movs	r3, #11
 8014c88:	2203      	movs	r2, #3
 8014c8a:	2001      	movs	r0, #1
 8014c8c:	f7f9 fa4c 	bl	800e128 <Draw_Circle_D>
  DispStr(S_X[SAVE_BMP],    LABLE_Y, INV, ("Save"));//0513
 8014c90:	20f8      	movs	r0, #248	; 0xf8
 8014c92:	4b11      	ldr	r3, [pc, #68]	; (8014cd8 <DispBMPInfo+0x88>)
 8014c94:	2201      	movs	r2, #1
 8014c96:	2103      	movs	r1, #3
 8014c98:	f7f9 f970 	bl	800df7c <DispStr>
  DispStr(S_X[SAVE_BMP]+24, LABLE_Y, INV, (char *)NumStr);
 8014c9c:	23f8      	movs	r3, #248	; 0xf8
 8014c9e:	b29b      	uxth	r3, r3
 8014ca0:	3318      	adds	r3, #24
 8014ca2:	b29b      	uxth	r3, r3
 8014ca4:	b218      	sxth	r0, r3
 8014ca6:	4b0b      	ldr	r3, [pc, #44]	; (8014cd4 <DispBMPInfo+0x84>)
 8014ca8:	2201      	movs	r2, #1
 8014caa:	2103      	movs	r1, #3
 8014cac:	f7f9 f966 	bl	800df7c <DispStr>
  DispStr(S_X[SAVE_BMP]+42, LABLE_Y, INV, (List[SAVE_BMP].PTR ));
 8014cb0:	23f8      	movs	r3, #248	; 0xf8
 8014cb2:	b29b      	uxth	r3, r3
 8014cb4:	332a      	adds	r3, #42	; 0x2a
 8014cb6:	b29b      	uxth	r3, r3
 8014cb8:	b218      	sxth	r0, r3
 8014cba:	4b05      	ldr	r3, [pc, #20]	; (8014cd0 <DispBMPInfo+0x80>)
 8014cbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014cc0:	2201      	movs	r2, #1
 8014cc2:	2103      	movs	r1, #3
 8014cc4:	f7f9 f95a 	bl	800df7c <DispStr>
}
 8014cc8:	bf00      	nop
 8014cca:	46bd      	mov	sp, r7
 8014ccc:	bd80      	pop	{r7, pc}
 8014cce:	bf00      	nop
 8014cd0:	2000029c 	.word	0x2000029c
 8014cd4:	20002844 	.word	0x20002844
 8014cd8:	08000950 	.word	0x08000950

08014cdc <Update_Proc_All>:

/*******************************************************************************
Update_Proc_All  ȫ��ˢ��
*******************************************************************************/
void Update_Proc_All(void)
{
 8014cdc:	b590      	push	{r4, r7, lr}
 8014cde:	b087      	sub	sp, #28
 8014ce0:	af02      	add	r7, sp, #8
  short i;
  long Tmp = 0;
 8014ce2:	2300      	movs	r3, #0
 8014ce4:	60bb      	str	r3, [r7, #8]
  short Range = List[Y_RANGES].Val + 10*List[PROBEATT].Val;
 8014ce6:	4ba3      	ldr	r3, [pc, #652]	; (8014f74 <Update_Proc_All+0x298>)
 8014ce8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014cec:	b29a      	uxth	r2, r3
 8014cee:	4ba1      	ldr	r3, [pc, #644]	; (8014f74 <Update_Proc_All+0x298>)
 8014cf0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8014cf4:	b29b      	uxth	r3, r3
 8014cf6:	4619      	mov	r1, r3
 8014cf8:	0089      	lsls	r1, r1, #2
 8014cfa:	440b      	add	r3, r1
 8014cfc:	005b      	lsls	r3, r3, #1
 8014cfe:	b29b      	uxth	r3, r3
 8014d00:	4413      	add	r3, r2
 8014d02:	b29b      	uxth	r3, r3
 8014d04:	80fb      	strh	r3, [r7, #6]

  for(i=Y_RANGES; i<=STANDBY; i++){
 8014d06:	2300      	movs	r3, #0
 8014d08:	81fb      	strh	r3, [r7, #14]
 8014d0a:	e015      	b.n	8014d38 <Update_Proc_All+0x5c>
    List[i].Flg |= UPD;
 8014d0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014d10:	4a98      	ldr	r2, [pc, #608]	; (8014f74 <Update_Proc_All+0x298>)
 8014d12:	00db      	lsls	r3, r3, #3
 8014d14:	4413      	add	r3, r2
 8014d16:	799a      	ldrb	r2, [r3, #6]
 8014d18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014d1c:	f042 0220 	orr.w	r2, r2, #32
 8014d20:	b2d1      	uxtb	r1, r2
 8014d22:	4a94      	ldr	r2, [pc, #592]	; (8014f74 <Update_Proc_All+0x298>)
 8014d24:	00db      	lsls	r3, r3, #3
 8014d26:	4413      	add	r3, r2
 8014d28:	460a      	mov	r2, r1
 8014d2a:	719a      	strb	r2, [r3, #6]
  for(i=Y_RANGES; i<=STANDBY; i++){
 8014d2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014d30:	b29b      	uxth	r3, r3
 8014d32:	3301      	adds	r3, #1
 8014d34:	b29b      	uxth	r3, r3
 8014d36:	81fb      	strh	r3, [r7, #14]
 8014d38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014d3c:	2b29      	cmp	r3, #41	; 0x29
 8014d3e:	dde5      	ble.n	8014d0c <Update_Proc_All+0x30>
  }

  for(i=Y_RANGES; i<=STANDBY; i++){
 8014d40:	2300      	movs	r3, #0
 8014d42:	81fb      	strh	r3, [r7, #14]
 8014d44:	e1be      	b.n	80150c4 <Update_Proc_All+0x3e8>
    if(List[i].Flg & UPD){
 8014d46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014d4a:	4a8a      	ldr	r2, [pc, #552]	; (8014f74 <Update_Proc_All+0x298>)
 8014d4c:	00db      	lsls	r3, r3, #3
 8014d4e:	4413      	add	r3, r2
 8014d50:	799b      	ldrb	r3, [r3, #6]
 8014d52:	f003 0320 	and.w	r3, r3, #32
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	f000 81ad 	beq.w	80150b6 <Update_Proc_All+0x3da>
      List[i].Flg &= ~UPD;
 8014d5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014d60:	4a84      	ldr	r2, [pc, #528]	; (8014f74 <Update_Proc_All+0x298>)
 8014d62:	00db      	lsls	r3, r3, #3
 8014d64:	4413      	add	r3, r2
 8014d66:	799a      	ldrb	r2, [r3, #6]
 8014d68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014d6c:	f022 0220 	bic.w	r2, r2, #32
 8014d70:	b2d1      	uxtb	r1, r2
 8014d72:	4a80      	ldr	r2, [pc, #512]	; (8014f74 <Update_Proc_All+0x298>)
 8014d74:	00db      	lsls	r3, r3, #3
 8014d76:	4413      	add	r3, r2
 8014d78:	460a      	mov	r2, r1
 8014d7a:	719a      	strb	r2, [r3, #6]
      switch (i){
 8014d7c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014d80:	2b12      	cmp	r3, #18
 8014d82:	f300 8199 	bgt.w	80150b8 <Update_Proc_All+0x3dc>
 8014d86:	2b0d      	cmp	r3, #13
 8014d88:	f280 80ac 	bge.w	8014ee4 <Update_Proc_All+0x208>
 8014d8c:	2b03      	cmp	r3, #3
 8014d8e:	dc02      	bgt.n	8014d96 <Update_Proc_All+0xba>
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	da04      	bge.n	8014d9e <Update_Proc_All+0xc2>
 8014d94:	e190      	b.n	80150b8 <Update_Proc_All+0x3dc>
 8014d96:	2b07      	cmp	r3, #7
 8014d98:	f000 815a 	beq.w	8015050 <Update_Proc_All+0x374>
 8014d9c:	e18c      	b.n	80150b8 <Update_Proc_All+0x3dc>
      case Y_RANGES:   // ˢ����ʾ Y ���̵�λ
      case PROBEATT:   // ˢ����ʾ̽ͷ˥������
      case COUPLING:   // ˢ����ʾ���ģʽ״̬
      case V0_POSI:    // ˢ����ʾ��ֱƫ��λ��
        SetColor(GRY, TCOLOR[YN]);
 8014d9e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8014da2:	4619      	mov	r1, r3
 8014da4:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014da8:	f7f9 f8d0 	bl	800df4c <SetColor>
        if(i == Y_RANGES || i == COUPLING||i == PROBEATT){
 8014dac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d007      	beq.n	8014dc4 <Update_Proc_All+0xe8>
 8014db4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014db8:	2b01      	cmp	r3, #1
 8014dba:	d003      	beq.n	8014dc4 <Update_Proc_All+0xe8>
 8014dbc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014dc0:	2b02      	cmp	r3, #2
 8014dc2:	d138      	bne.n	8014e36 <Update_Proc_All+0x15a>
          Draw_Circle_D(INV, S_X[Y_RANGES]-3, TITLE_Y_POS, 11, 0, 6*7);
 8014dc4:	232f      	movs	r3, #47	; 0x2f
 8014dc6:	b29b      	uxth	r3, r3
 8014dc8:	3b03      	subs	r3, #3
 8014dca:	b29b      	uxth	r3, r3
 8014dcc:	b219      	sxth	r1, r3
 8014dce:	232a      	movs	r3, #42	; 0x2a
 8014dd0:	9301      	str	r3, [sp, #4]
 8014dd2:	2300      	movs	r3, #0
 8014dd4:	9300      	str	r3, [sp, #0]
 8014dd6:	230b      	movs	r3, #11
 8014dd8:	22e1      	movs	r2, #225	; 0xe1
 8014dda:	2001      	movs	r0, #1
 8014ddc:	f7f9 f9a4 	bl	800e128 <Draw_Circle_D>
          DispStr(S_X[Y_RANGES], TITLE_Y_POS, INV,      (List[Y_RANGES].PTR +(Range)*6));
 8014de0:	202f      	movs	r0, #47	; 0x2f
 8014de2:	4b64      	ldr	r3, [pc, #400]	; (8014f74 <Update_Proc_All+0x298>)
 8014de4:	6819      	ldr	r1, [r3, #0]
 8014de6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014dea:	4613      	mov	r3, r2
 8014dec:	005b      	lsls	r3, r3, #1
 8014dee:	4413      	add	r3, r2
 8014df0:	005b      	lsls	r3, r3, #1
 8014df2:	440b      	add	r3, r1
 8014df4:	2201      	movs	r2, #1
 8014df6:	21e1      	movs	r1, #225	; 0xe1
 8014df8:	f7f9 f8c0 	bl	800df7c <DispStr>
          DispStr(S_X[COUPLING], TITLE_Y_POS, INV,      (List[COUPLING].PTR +(List[COUPLING].Val)*6));
 8014dfc:	2047      	movs	r0, #71	; 0x47
 8014dfe:	4b5d      	ldr	r3, [pc, #372]	; (8014f74 <Update_Proc_All+0x298>)
 8014e00:	689a      	ldr	r2, [r3, #8]
 8014e02:	4b5c      	ldr	r3, [pc, #368]	; (8014f74 <Update_Proc_All+0x298>)
 8014e04:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8014e08:	4619      	mov	r1, r3
 8014e0a:	460b      	mov	r3, r1
 8014e0c:	005b      	lsls	r3, r3, #1
 8014e0e:	440b      	add	r3, r1
 8014e10:	005b      	lsls	r3, r3, #1
 8014e12:	4413      	add	r3, r2
 8014e14:	2201      	movs	r2, #1
 8014e16:	21e1      	movs	r1, #225	; 0xe1
 8014e18:	f7f9 f8b0 	bl	800df7c <DispStr>
          DispStr10x14(S_X[PROBEATT], TITLE_Y_POS, PRN+SYMB,(List[PROBEATT].Val?("A"):("B")));
 8014e1c:	2020      	movs	r0, #32
 8014e1e:	4b55      	ldr	r3, [pc, #340]	; (8014f74 <Update_Proc_All+0x298>)
 8014e20:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d001      	beq.n	8014e2c <Update_Proc_All+0x150>
 8014e28:	4b53      	ldr	r3, [pc, #332]	; (8014f78 <Update_Proc_All+0x29c>)
 8014e2a:	e000      	b.n	8014e2e <Update_Proc_All+0x152>
 8014e2c:	4b53      	ldr	r3, [pc, #332]	; (8014f7c <Update_Proc_All+0x2a0>)
 8014e2e:	2210      	movs	r2, #16
 8014e30:	21e1      	movs	r1, #225	; 0xe1
 8014e32:	f7f9 fb0b 	bl	800e44c <DispStr10x14>
        }
        ParamTab[P1x2] = 2*((List[V0_POSI].Val+1));
 8014e36:	4b4f      	ldr	r3, [pc, #316]	; (8014f74 <Update_Proc_All+0x298>)
 8014e38:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8014e3c:	3301      	adds	r3, #1
 8014e3e:	b29b      	uxth	r3, r3
 8014e40:	005b      	lsls	r3, r3, #1
 8014e42:	b29b      	uxth	r3, r3
 8014e44:	b21a      	sxth	r2, r3
 8014e46:	4b4e      	ldr	r3, [pc, #312]	; (8014f80 <Update_Proc_All+0x2a4>)
 8014e48:	829a      	strh	r2, [r3, #20]
        ParamTab[VTx2] = ParamTab[P1x2]+ 2*(List[THRESHOLD].Val+1);
 8014e4a:	4b4d      	ldr	r3, [pc, #308]	; (8014f80 <Update_Proc_All+0x2a4>)
 8014e4c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8014e50:	b29a      	uxth	r2, r3
 8014e52:	4b48      	ldr	r3, [pc, #288]	; (8014f74 <Update_Proc_All+0x298>)
 8014e54:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8014e58:	3301      	adds	r3, #1
 8014e5a:	b29b      	uxth	r3, r3
 8014e5c:	005b      	lsls	r3, r3, #1
 8014e5e:	b29b      	uxth	r3, r3
 8014e60:	4413      	add	r3, r2
 8014e62:	b29b      	uxth	r3, r3
 8014e64:	b21a      	sxth	r2, r3
 8014e66:	4b46      	ldr	r3, [pc, #280]	; (8014f80 <Update_Proc_All+0x2a4>)
 8014e68:	839a      	strh	r2, [r3, #28]

        StateA =  (List[Y_RANGES].Val>5)?ACT: GND;                                    //ACT GND �ӵػ򼤻�״̬
 8014e6a:	4b42      	ldr	r3, [pc, #264]	; (8014f74 <Update_Proc_All+0x298>)
 8014e6c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014e70:	2b05      	cmp	r3, #5
 8014e72:	dd01      	ble.n	8014e78 <Update_Proc_All+0x19c>
 8014e74:	2204      	movs	r2, #4
 8014e76:	e000      	b.n	8014e7a <Update_Proc_All+0x19e>
 8014e78:	2200      	movs	r2, #0
 8014e7a:	4b42      	ldr	r3, [pc, #264]	; (8014f84 <Update_Proc_All+0x2a8>)
 8014e7c:	801a      	strh	r2, [r3, #0]
        GainA  = List[Y_RANGES].Val;
 8014e7e:	4b3d      	ldr	r3, [pc, #244]	; (8014f74 <Update_Proc_All+0x298>)
 8014e80:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8014e84:	4b40      	ldr	r3, [pc, #256]	; (8014f88 <Update_Proc_All+0x2ac>)
 8014e86:	801a      	strh	r2, [r3, #0]
        if(List[Y_RANGES].Val>1)
 8014e88:	4b3a      	ldr	r3, [pc, #232]	; (8014f74 <Update_Proc_All+0x298>)
 8014e8a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014e8e:	2b01      	cmp	r3, #1
 8014e90:	dd03      	ble.n	8014e9a <Update_Proc_All+0x1be>
          KindA  = HV;
 8014e92:	4b3e      	ldr	r3, [pc, #248]	; (8014f8c <Update_Proc_All+0x2b0>)
 8014e94:	2201      	movs	r2, #1
 8014e96:	801a      	strh	r2, [r3, #0]
 8014e98:	e002      	b.n	8014ea0 <Update_Proc_All+0x1c4>
        else
          KindA  = LV;                //Ch1ѡ���ѹ���ѹ����
 8014e9a:	4b3c      	ldr	r3, [pc, #240]	; (8014f8c <Update_Proc_All+0x2b0>)
 8014e9c:	2200      	movs	r2, #0
 8014e9e:	801a      	strh	r2, [r3, #0]

        CouplA = (List[COUPLING].Val)? AC : DC;                      // AC);  //AC/DC��Ϸ�ʽ
 8014ea0:	4b34      	ldr	r3, [pc, #208]	; (8014f74 <Update_Proc_All+0x298>)
 8014ea2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d001      	beq.n	8014eae <Update_Proc_All+0x1d2>
 8014eaa:	2200      	movs	r2, #0
 8014eac:	e000      	b.n	8014eb0 <Update_Proc_All+0x1d4>
 8014eae:	2202      	movs	r2, #2
 8014eb0:	4b37      	ldr	r3, [pc, #220]	; (8014f90 <Update_Proc_All+0x2b4>)
 8014eb2:	801a      	strh	r2, [r3, #0]
        BIOS_Ctrl(AiRANGE, KindA+CouplA+StateA);             //Ch1״̬ˢ��
 8014eb4:	4b35      	ldr	r3, [pc, #212]	; (8014f8c <Update_Proc_All+0x2b0>)
 8014eb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014eba:	461a      	mov	r2, r3
 8014ebc:	4b34      	ldr	r3, [pc, #208]	; (8014f90 <Update_Proc_All+0x2b4>)
 8014ebe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014ec2:	4413      	add	r3, r2
 8014ec4:	4a2f      	ldr	r2, [pc, #188]	; (8014f84 <Update_Proc_All+0x2a8>)
 8014ec6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014eca:	4413      	add	r3, r2
 8014ecc:	4619      	mov	r1, r3
 8014ece:	2007      	movs	r0, #7
 8014ed0:	f7f7 fa50 	bl	800c374 <BIOS_Ctrl>
        AiPosi(List[V0_POSI].Val);                        //Ch1Ӳ����Ӧλ��
 8014ed4:	4b27      	ldr	r3, [pc, #156]	; (8014f74 <Update_Proc_All+0x298>)
 8014ed6:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8014eda:	b2db      	uxtb	r3, r3
 8014edc:	4618      	mov	r0, r3
 8014ede:	f000 fa0f 	bl	8015300 <AiPosi>

        break;
 8014ee2:	e0e9      	b.n	80150b8 <Update_Proc_All+0x3dc>
      case TR_MODE:   // ˢ����ʾ������ʽ
      case FITTRIGG:  // ˢ����ʾ�Զ�������ֵ
      case THRESHOLD: // ˢ����ʾ������ֵ
      case SENSITIVE: // ˢ����ʾ����������
      case TR_TYPE:   // ˢ����ʾ�α���ʽ
        DispStatus();
 8014ee4:	f7ff fbee 	bl	80146c4 <DispStatus>
        SetColor(GRY, TCOLOR[TRG]);
 8014ee8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8014eec:	4619      	mov	r1, r3
 8014eee:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014ef2:	f7f9 f82b 	bl	800df4c <SetColor>
        if(i == TR_MODE || i==SENSITIVE)
 8014ef6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014efa:	2b0e      	cmp	r3, #14
 8014efc:	d003      	beq.n	8014f06 <Update_Proc_All+0x22a>
 8014efe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014f02:	2b11      	cmp	r3, #17
 8014f04:	d11a      	bne.n	8014f3c <Update_Proc_All+0x260>
        {
          Draw_Circle_D(INV, S_X[TR_MODE]-3, TITLE_Y_POS, 11, 0, 6*8);
 8014f06:	23dd      	movs	r3, #221	; 0xdd
 8014f08:	b29b      	uxth	r3, r3
 8014f0a:	3b03      	subs	r3, #3
 8014f0c:	b29b      	uxth	r3, r3
 8014f0e:	b219      	sxth	r1, r3
 8014f10:	2330      	movs	r3, #48	; 0x30
 8014f12:	9301      	str	r3, [sp, #4]
 8014f14:	2300      	movs	r3, #0
 8014f16:	9300      	str	r3, [sp, #0]
 8014f18:	230b      	movs	r3, #11
 8014f1a:	22e1      	movs	r2, #225	; 0xe1
 8014f1c:	2001      	movs	r0, #1
 8014f1e:	f7f9 f903 	bl	800e128 <Draw_Circle_D>
          DispStr10x14(S_X[TR_MODE], TITLE_Y_POS, INV+SYMB,(List[TR_MODE].Val?("D"):("C")));
 8014f22:	20dd      	movs	r0, #221	; 0xdd
 8014f24:	4b13      	ldr	r3, [pc, #76]	; (8014f74 <Update_Proc_All+0x298>)
 8014f26:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d001      	beq.n	8014f32 <Update_Proc_All+0x256>
 8014f2e:	4b19      	ldr	r3, [pc, #100]	; (8014f94 <Update_Proc_All+0x2b8>)
 8014f30:	e000      	b.n	8014f34 <Update_Proc_All+0x258>
 8014f32:	4b19      	ldr	r3, [pc, #100]	; (8014f98 <Update_Proc_All+0x2bc>)
 8014f34:	2211      	movs	r2, #17
 8014f36:	21e1      	movs	r1, #225	; 0xe1
 8014f38:	f7f9 fa88 	bl	800e44c <DispStr10x14>
        }
        if(i == FITTRIGG)
 8014f3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014f40:	2b0f      	cmp	r3, #15
 8014f42:	d132      	bne.n	8014faa <Update_Proc_All+0x2ce>
        {
          DispStr10x14(S_X[FITTRIGG], TITLE_Y_POS, PRN+SYMB,(List[FITTRIGG].Val?("F"):("B")));
 8014f44:	20cf      	movs	r0, #207	; 0xcf
 8014f46:	4b0b      	ldr	r3, [pc, #44]	; (8014f74 <Update_Proc_All+0x298>)
 8014f48:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d001      	beq.n	8014f54 <Update_Proc_All+0x278>
 8014f50:	4b12      	ldr	r3, [pc, #72]	; (8014f9c <Update_Proc_All+0x2c0>)
 8014f52:	e000      	b.n	8014f56 <Update_Proc_All+0x27a>
 8014f54:	4b09      	ldr	r3, [pc, #36]	; (8014f7c <Update_Proc_All+0x2a0>)
 8014f56:	2210      	movs	r2, #16
 8014f58:	21e1      	movs	r1, #225	; 0xe1
 8014f5a:	f7f9 fa77 	bl	800e44c <DispStr10x14>
          if(List[FITTRIGG].Val)KEYTIME = 300;
 8014f5e:	4b05      	ldr	r3, [pc, #20]	; (8014f74 <Update_Proc_All+0x298>)
 8014f60:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d01d      	beq.n	8014fa4 <Update_Proc_All+0x2c8>
 8014f68:	4b0d      	ldr	r3, [pc, #52]	; (8014fa0 <Update_Proc_All+0x2c4>)
 8014f6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8014f6e:	801a      	strh	r2, [r3, #0]
 8014f70:	e01b      	b.n	8014faa <Update_Proc_All+0x2ce>
 8014f72:	bf00      	nop
 8014f74:	2000029c 	.word	0x2000029c
 8014f78:	08000958 	.word	0x08000958
 8014f7c:	0800095c 	.word	0x0800095c
 8014f80:	20000144 	.word	0x20000144
 8014f84:	2000286a 	.word	0x2000286a
 8014f88:	20002852 	.word	0x20002852
 8014f8c:	2000688e 	.word	0x2000688e
 8014f90:	20006890 	.word	0x20006890
 8014f94:	08000988 	.word	0x08000988
 8014f98:	0800098c 	.word	0x0800098c
 8014f9c:	0800099c 	.word	0x0800099c
 8014fa0:	20000786 	.word	0x20000786
          else KEYTIME = 0;
 8014fa4:	4b4c      	ldr	r3, [pc, #304]	; (80150d8 <Update_Proc_All+0x3fc>)
 8014fa6:	2200      	movs	r2, #0
 8014fa8:	801a      	strh	r2, [r3, #0]
        };
        ParamTab[VTx2]= ParamTab[P1x2]+2*List[THRESHOLD].Val;
 8014faa:	4b4c      	ldr	r3, [pc, #304]	; (80150dc <Update_Proc_All+0x400>)
 8014fac:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8014fb0:	b29a      	uxth	r2, r3
 8014fb2:	4b4b      	ldr	r3, [pc, #300]	; (80150e0 <Update_Proc_All+0x404>)
 8014fb4:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8014fb8:	b29b      	uxth	r3, r3
 8014fba:	005b      	lsls	r3, r3, #1
 8014fbc:	b29b      	uxth	r3, r3
 8014fbe:	4413      	add	r3, r2
 8014fc0:	b29b      	uxth	r3, r3
 8014fc2:	b21a      	sxth	r2, r3
 8014fc4:	4b45      	ldr	r3, [pc, #276]	; (80150dc <Update_Proc_All+0x400>)
 8014fc6:	839a      	strh	r2, [r3, #28]
        Tmp  = List[SENSITIVE].Val;
 8014fc8:	4b45      	ldr	r3, [pc, #276]	; (80150e0 <Update_Proc_All+0x404>)
 8014fca:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8014fce:	60bb      	str	r3, [r7, #8]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8014fd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014fd4:	4a43      	ldr	r2, [pc, #268]	; (80150e4 <Update_Proc_All+0x408>)
 8014fd6:	5cd3      	ldrb	r3, [r2, r3]
 8014fd8:	461c      	mov	r4, r3
 8014fda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014fde:	4a42      	ldr	r2, [pc, #264]	; (80150e8 <Update_Proc_All+0x40c>)
 8014fe0:	5cd3      	ldrb	r3, [r2, r3]
 8014fe2:	4618      	mov	r0, r3
 8014fe4:	f7fc ff9e 	bl	8011f24 <Exp>
 8014fe8:	4603      	mov	r3, r0
 8014fea:	fb03 f204 	mul.w	r2, r3, r4
 8014fee:	68bb      	ldr	r3, [r7, #8]
 8014ff0:	fb02 f303 	mul.w	r3, r2, r3
 8014ff4:	60bb      	str	r3, [r7, #8]
        Value2Str(NumStr, Tmp, V[2], 2, UNSIGN);
 8014ff6:	2301      	movs	r3, #1
 8014ff8:	9300      	str	r3, [sp, #0]
 8014ffa:	2302      	movs	r3, #2
 8014ffc:	4a3b      	ldr	r2, [pc, #236]	; (80150ec <Update_Proc_All+0x410>)
 8014ffe:	68b9      	ldr	r1, [r7, #8]
 8015000:	483b      	ldr	r0, [pc, #236]	; (80150f0 <Update_Proc_All+0x414>)
 8015002:	f7fc fe93 	bl	8011d2c <Value2Str>
        DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, INV+SYMB,"E");
 8015006:	20e7      	movs	r0, #231	; 0xe7
 8015008:	4b3a      	ldr	r3, [pc, #232]	; (80150f4 <Update_Proc_All+0x418>)
 801500a:	2211      	movs	r2, #17
 801500c:	21e1      	movs	r1, #225	; 0xe1
 801500e:	f7f9 fa1d 	bl	800e44c <DispStr10x14>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  "     ");
 8015012:	23e7      	movs	r3, #231	; 0xe7
 8015014:	b29b      	uxth	r3, r3
 8015016:	3309      	adds	r3, #9
 8015018:	b29b      	uxth	r3, r3
 801501a:	b218      	sxth	r0, r3
 801501c:	4b36      	ldr	r3, [pc, #216]	; (80150f8 <Update_Proc_All+0x41c>)
 801501e:	2201      	movs	r2, #1
 8015020:	21e1      	movs	r1, #225	; 0xe1
 8015022:	f7f8 ffab 	bl	800df7c <DispStr>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  (char *)NumStr);
 8015026:	23e7      	movs	r3, #231	; 0xe7
 8015028:	b29b      	uxth	r3, r3
 801502a:	3309      	adds	r3, #9
 801502c:	b29b      	uxth	r3, r3
 801502e:	b218      	sxth	r0, r3
 8015030:	4b2f      	ldr	r3, [pc, #188]	; (80150f0 <Update_Proc_All+0x414>)
 8015032:	2201      	movs	r2, #1
 8015034:	21e1      	movs	r1, #225	; 0xe1
 8015036:	f7f8 ffa1 	bl	800df7c <DispStr>
        ParamTab[VTF]=(List[TR_TYPE].Val)? L_HID : SHOW;
 801503a:	4b29      	ldr	r3, [pc, #164]	; (80150e0 <Update_Proc_All+0x404>)
 801503c:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 8015040:	2b00      	cmp	r3, #0
 8015042:	d001      	beq.n	8015048 <Update_Proc_All+0x36c>
 8015044:	2202      	movs	r2, #2
 8015046:	e000      	b.n	801504a <Update_Proc_All+0x36e>
 8015048:	2200      	movs	r2, #0
 801504a:	4b24      	ldr	r3, [pc, #144]	; (80150dc <Update_Proc_All+0x400>)
 801504c:	811a      	strh	r2, [r3, #8]
        break;
 801504e:	e033      	b.n	80150b8 <Update_Proc_All+0x3dc>

      case TIM_BASE:  // ˢ����ʾʱ����λ
        SetColor(GRY, TCOLOR[XN]);
 8015050:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8015054:	4619      	mov	r1, r3
 8015056:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801505a:	f7f8 ff77 	bl	800df4c <SetColor>
        if(i == TIM_BASE)
 801505e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015062:	2b07      	cmp	r3, #7
 8015064:	d120      	bne.n	80150a8 <Update_Proc_All+0x3cc>
        {
          Draw_Circle_D(INV, S_X[i]-3, TITLE_Y_POS, 11, 2, 6*5);
 8015066:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801506a:	4a24      	ldr	r2, [pc, #144]	; (80150fc <Update_Proc_All+0x420>)
 801506c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8015070:	b29b      	uxth	r3, r3
 8015072:	3b03      	subs	r3, #3
 8015074:	b29b      	uxth	r3, r3
 8015076:	b219      	sxth	r1, r3
 8015078:	231e      	movs	r3, #30
 801507a:	9301      	str	r3, [sp, #4]
 801507c:	2302      	movs	r3, #2
 801507e:	9300      	str	r3, [sp, #0]
 8015080:	230b      	movs	r3, #11
 8015082:	22e1      	movs	r2, #225	; 0xe1
 8015084:	2001      	movs	r0, #1
 8015086:	f7f9 f84f 	bl	800e128 <Draw_Circle_D>
          DispStr(S_X[i], TITLE_Y_POS, INV, (char *)TimeBase_Str[List[TIM_BASE].Val]);
 801508a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801508e:	4a1b      	ldr	r2, [pc, #108]	; (80150fc <Update_Proc_All+0x420>)
 8015090:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8015094:	4b12      	ldr	r3, [pc, #72]	; (80150e0 <Update_Proc_All+0x404>)
 8015096:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801509a:	00db      	lsls	r3, r3, #3
 801509c:	4a18      	ldr	r2, [pc, #96]	; (8015100 <Update_Proc_All+0x424>)
 801509e:	4413      	add	r3, r2
 80150a0:	2201      	movs	r2, #1
 80150a2:	21e1      	movs	r1, #225	; 0xe1
 80150a4:	f7f8 ff6a 	bl	800df7c <DispStr>
        }
        Set_Base(List[TIM_BASE].Val);          // Ӳ������ɨ��ʱ����λ
 80150a8:	4b0d      	ldr	r3, [pc, #52]	; (80150e0 <Update_Proc_All+0x404>)
 80150aa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80150ae:	4618      	mov	r0, r3
 80150b0:	f7f7 fadc 	bl	800c66c <Set_Base>
      break;
 80150b4:	e000      	b.n	80150b8 <Update_Proc_All+0x3dc>

      }
    }
 80150b6:	bf00      	nop
  for(i=Y_RANGES; i<=STANDBY; i++){
 80150b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80150bc:	b29b      	uxth	r3, r3
 80150be:	3301      	adds	r3, #1
 80150c0:	b29b      	uxth	r3, r3
 80150c2:	81fb      	strh	r3, [r7, #14]
 80150c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80150c8:	2b29      	cmp	r3, #41	; 0x29
 80150ca:	f77f ae3c 	ble.w	8014d46 <Update_Proc_All+0x6a>
  }
}
 80150ce:	bf00      	nop
 80150d0:	bf00      	nop
 80150d2:	3714      	adds	r7, #20
 80150d4:	46bd      	mov	sp, r7
 80150d6:	bd90      	pop	{r4, r7, pc}
 80150d8:	20000786 	.word	0x20000786
 80150dc:	20000144 	.word	0x20000144
 80150e0:	2000029c 	.word	0x2000029c
 80150e4:	08002130 	.word	0x08002130
 80150e8:	08002108 	.word	0x08002108
 80150ec:	08001d0c 	.word	0x08001d0c
 80150f0:	20002844 	.word	0x20002844
 80150f4:	08000998 	.word	0x08000998
 80150f8:	08000990 	.word	0x08000990
 80150fc:	0800215c 	.word	0x0800215c
 8015100:	200001d4 	.word	0x200001d4

08015104 <Align_Set>:

/*******************************************************************************
 Align_Set:
*******************************************************************************/
void Align_Set(void)
{
 8015104:	b580      	push	{r7, lr}
 8015106:	b082      	sub	sp, #8
 8015108:	af00      	add	r7, sp, #0
  unsigned short i, TmpA = 0, StA = 0;
 801510a:	2300      	movs	r3, #0
 801510c:	807b      	strh	r3, [r7, #2]
 801510e:	2300      	movs	r3, #0
 8015110:	80bb      	strh	r3, [r7, #4]

  Analys();
 8015112:	f000 f8b1 	bl	8015278 <Analys>
  for(i=0; i<100; i++)
 8015116:	2300      	movs	r3, #0
 8015118:	80fb      	strh	r3, [r7, #6]
 801511a:	e051      	b.n	80151c0 <Align_Set+0xbc>
  {
    AiPosi(100);
 801511c:	2064      	movs	r0, #100	; 0x64
 801511e:	f000 f8ef 	bl	8015300 <AiPosi>
    HAL_Delay(10);                             // Wait 10mS
 8015122:	200a      	movs	r0, #10
 8015124:	f003 fb32 	bl	801878c <HAL_Delay>
    Analys();
 8015128:	f000 f8a6 	bl	8015278 <Analys>
    TmpA = 2048-Vavg;
 801512c:	4b28      	ldr	r3, [pc, #160]	; (80151d0 <Align_Set+0xcc>)
 801512e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015132:	b29b      	uxth	r3, r3
 8015134:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8015138:	807b      	strh	r3, [r7, #2]

    if(TmpA != 0)
 801513a:	887b      	ldrh	r3, [r7, #2]
 801513c:	2b00      	cmp	r3, #0
 801513e:	d036      	beq.n	80151ae <Align_Set+0xaa>
    {
      KpA[KindA+(StateA?1:0)] += 700*TmpA/2048;
 8015140:	4b24      	ldr	r3, [pc, #144]	; (80151d4 <Align_Set+0xd0>)
 8015142:	681a      	ldr	r2, [r3, #0]
 8015144:	4b24      	ldr	r3, [pc, #144]	; (80151d8 <Align_Set+0xd4>)
 8015146:	f9b3 3000 	ldrsh.w	r3, [r3]
 801514a:	4619      	mov	r1, r3
 801514c:	4b23      	ldr	r3, [pc, #140]	; (80151dc <Align_Set+0xd8>)
 801514e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015152:	2b00      	cmp	r3, #0
 8015154:	bf14      	ite	ne
 8015156:	2301      	movne	r3, #1
 8015158:	2300      	moveq	r3, #0
 801515a:	b2db      	uxtb	r3, r3
 801515c:	440b      	add	r3, r1
 801515e:	005b      	lsls	r3, r3, #1
 8015160:	4413      	add	r3, r2
 8015162:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015166:	b29a      	uxth	r2, r3
 8015168:	887b      	ldrh	r3, [r7, #2]
 801516a:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 801516e:	fb01 f303 	mul.w	r3, r1, r3
 8015172:	2b00      	cmp	r3, #0
 8015174:	da01      	bge.n	801517a <Align_Set+0x76>
 8015176:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801517a:	12db      	asrs	r3, r3, #11
 801517c:	b29b      	uxth	r3, r3
 801517e:	4413      	add	r3, r2
 8015180:	b299      	uxth	r1, r3
 8015182:	4b14      	ldr	r3, [pc, #80]	; (80151d4 <Align_Set+0xd0>)
 8015184:	681a      	ldr	r2, [r3, #0]
 8015186:	4b14      	ldr	r3, [pc, #80]	; (80151d8 <Align_Set+0xd4>)
 8015188:	f9b3 3000 	ldrsh.w	r3, [r3]
 801518c:	4618      	mov	r0, r3
 801518e:	4b13      	ldr	r3, [pc, #76]	; (80151dc <Align_Set+0xd8>)
 8015190:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015194:	2b00      	cmp	r3, #0
 8015196:	bf14      	ite	ne
 8015198:	2301      	movne	r3, #1
 801519a:	2300      	moveq	r3, #0
 801519c:	b2db      	uxtb	r3, r3
 801519e:	4403      	add	r3, r0
 80151a0:	005b      	lsls	r3, r3, #1
 80151a2:	4413      	add	r3, r2
 80151a4:	b20a      	sxth	r2, r1
 80151a6:	801a      	strh	r2, [r3, #0]
      StA = 0;
 80151a8:	2300      	movs	r3, #0
 80151aa:	80bb      	strh	r3, [r7, #4]
 80151ac:	e002      	b.n	80151b4 <Align_Set+0xb0>
    }
    else
      StA++;
 80151ae:	88bb      	ldrh	r3, [r7, #4]
 80151b0:	3301      	adds	r3, #1
 80151b2:	80bb      	strh	r3, [r7, #4]

    if(StA > 4)
 80151b4:	88bb      	ldrh	r3, [r7, #4]
 80151b6:	2b04      	cmp	r3, #4
 80151b8:	d806      	bhi.n	80151c8 <Align_Set+0xc4>
  for(i=0; i<100; i++)
 80151ba:	88fb      	ldrh	r3, [r7, #6]
 80151bc:	3301      	adds	r3, #1
 80151be:	80fb      	strh	r3, [r7, #6]
 80151c0:	88fb      	ldrh	r3, [r7, #6]
 80151c2:	2b63      	cmp	r3, #99	; 0x63
 80151c4:	d9aa      	bls.n	801511c <Align_Set+0x18>
 80151c6:	e000      	b.n	80151ca <Align_Set+0xc6>
    	return;
 80151c8:	bf00      	nop
  }

}
 80151ca:	3708      	adds	r7, #8
 80151cc:	46bd      	mov	sp, r7
 80151ce:	bd80      	pop	{r7, pc}
 80151d0:	20002860 	.word	0x20002860
 80151d4:	2000057c 	.word	0x2000057c
 80151d8:	2000688e 	.word	0x2000688e
 80151dc:	2000286a 	.word	0x2000286a

080151e0 <Zero_Align>:

/*******************************************************************************
 Channel's zero alignment:
*******************************************************************************/
void Zero_Align(void)
{
 80151e0:	b580      	push	{r7, lr}
 80151e2:	af00      	add	r7, sp, #0
  GainA  = 0;//0x20;
 80151e4:	4b21      	ldr	r3, [pc, #132]	; (801526c <Zero_Align+0x8c>)
 80151e6:	2200      	movs	r2, #0
 80151e8:	801a      	strh	r2, [r3, #0]
  KindA  = HV;
 80151ea:	4b21      	ldr	r3, [pc, #132]	; (8015270 <Zero_Align+0x90>)
 80151ec:	2201      	movs	r2, #1
 80151ee:	801a      	strh	r2, [r3, #0]
  StateA = ACT;
 80151f0:	4b20      	ldr	r3, [pc, #128]	; (8015274 <Zero_Align+0x94>)
 80151f2:	2204      	movs	r2, #4
 80151f4:	801a      	strh	r2, [r3, #0]
  BIOS_Ctrl(AiRANGE, HV+AC+ACT);
 80151f6:	2105      	movs	r1, #5
 80151f8:	2007      	movs	r0, #7
 80151fa:	f7f7 f8bb 	bl	800c374 <BIOS_Ctrl>
  AiPosi(100);
 80151fe:	2064      	movs	r0, #100	; 0x64
 8015200:	f000 f87e 	bl	8015300 <AiPosi>
  HAL_Delay(1000);
 8015204:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8015208:	f003 fac0 	bl	801878c <HAL_Delay>
  Align_Set();
 801520c:	f7ff ff7a 	bl	8015104 <Align_Set>

  GainA  = 0;//0x20;
 8015210:	4b16      	ldr	r3, [pc, #88]	; (801526c <Zero_Align+0x8c>)
 8015212:	2200      	movs	r2, #0
 8015214:	801a      	strh	r2, [r3, #0]
  KindA  = HV;
 8015216:	4b16      	ldr	r3, [pc, #88]	; (8015270 <Zero_Align+0x90>)
 8015218:	2201      	movs	r2, #1
 801521a:	801a      	strh	r2, [r3, #0]
  StateA = GND;
 801521c:	4b15      	ldr	r3, [pc, #84]	; (8015274 <Zero_Align+0x94>)
 801521e:	2200      	movs	r2, #0
 8015220:	801a      	strh	r2, [r3, #0]
  BIOS_Ctrl(AiRANGE, HV+AC+GND);
 8015222:	2101      	movs	r1, #1
 8015224:	2007      	movs	r0, #7
 8015226:	f7f7 f8a5 	bl	800c374 <BIOS_Ctrl>
  AiPosi(100);
 801522a:	2064      	movs	r0, #100	; 0x64
 801522c:	f000 f868 	bl	8015300 <AiPosi>
  HAL_Delay(1000);
 8015230:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8015234:	f003 faaa 	bl	801878c <HAL_Delay>
  Align_Set();
 8015238:	f7ff ff64 	bl	8015104 <Align_Set>

  GainA  = 0;//0x20;
 801523c:	4b0b      	ldr	r3, [pc, #44]	; (801526c <Zero_Align+0x8c>)
 801523e:	2200      	movs	r2, #0
 8015240:	801a      	strh	r2, [r3, #0]
  KindA  = LV;
 8015242:	4b0b      	ldr	r3, [pc, #44]	; (8015270 <Zero_Align+0x90>)
 8015244:	2200      	movs	r2, #0
 8015246:	801a      	strh	r2, [r3, #0]
  StateA = GND;
 8015248:	4b0a      	ldr	r3, [pc, #40]	; (8015274 <Zero_Align+0x94>)
 801524a:	2200      	movs	r2, #0
 801524c:	801a      	strh	r2, [r3, #0]
  BIOS_Ctrl(AiRANGE, LV+AC+GND);
 801524e:	2100      	movs	r1, #0
 8015250:	2007      	movs	r0, #7
 8015252:	f7f7 f88f 	bl	800c374 <BIOS_Ctrl>
  AiPosi(100);
 8015256:	2064      	movs	r0, #100	; 0x64
 8015258:	f000 f852 	bl	8015300 <AiPosi>
  HAL_Delay(1000);
 801525c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8015260:	f003 fa94 	bl	801878c <HAL_Delay>
  Align_Set();
 8015264:	f7ff ff4e 	bl	8015104 <Align_Set>

}
 8015268:	bf00      	nop
 801526a:	bd80      	pop	{r7, pc}
 801526c:	20002852 	.word	0x20002852
 8015270:	2000688e 	.word	0x2000688e
 8015274:	2000286a 	.word	0x2000286a

08015278 <Analys>:

/*******************************************************************************
 Channel's error analys
*******************************************************************************/
void Analys(void)
{
 8015278:	b580      	push	{r7, lr}
 801527a:	b082      	sub	sp, #8
 801527c:	af00      	add	r7, sp, #0
  unsigned i, SumA = 0;
 801527e:	2300      	movs	r3, #0
 8015280:	603b      	str	r3, [r7, #0]

  BIOS_Ctrl(SMPL_ST, DISABLE);
 8015282:	2100      	movs	r1, #0
 8015284:	2004      	movs	r0, #4
 8015286:	f7f7 f875 	bl	800c374 <BIOS_Ctrl>
  BIOS_Ctrl(SMPLTIM, 720-1);      // 72MHz/360 = 400kHz = 2.5uS
 801528a:	f240 21cf 	movw	r1, #719	; 0x2cf
 801528e:	2005      	movs	r0, #5
 8015290:	f7f7 f870 	bl	800c374 <BIOS_Ctrl>
  BIOS_Ctrl(SMPLNUM, 4096);       // 8192
 8015294:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8015298:	2006      	movs	r0, #6
 801529a:	f7f7 f86b 	bl	800c374 <BIOS_Ctrl>
  BIOS_Ctrl(SMPL_ST, ENABLE);
 801529e:	2101      	movs	r1, #1
 80152a0:	2004      	movs	r0, #4
 80152a2:	f7f7 f867 	bl	800c374 <BIOS_Ctrl>
  while((BIOS_Info(CHA_CNT) != 0)) {};
 80152a6:	bf00      	nop
 80152a8:	2000      	movs	r0, #0
 80152aa:	f7f7 f84d 	bl	800c348 <BIOS_Info>
 80152ae:	4603      	mov	r3, r0
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d1f9      	bne.n	80152a8 <Analys+0x30>
  for(i=2; i<4000+2; i++){
 80152b4:	2302      	movs	r3, #2
 80152b6:	607b      	str	r3, [r7, #4]
 80152b8:	e00a      	b.n	80152d0 <Analys+0x58>
    SumA += Sampl[i];
 80152ba:	4a0e      	ldr	r2, [pc, #56]	; (80152f4 <Analys+0x7c>)
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80152c2:	461a      	mov	r2, r3
 80152c4:	683b      	ldr	r3, [r7, #0]
 80152c6:	4413      	add	r3, r2
 80152c8:	603b      	str	r3, [r7, #0]
  for(i=2; i<4000+2; i++){
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	3301      	adds	r3, #1
 80152ce:	607b      	str	r3, [r7, #4]
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	f640 72a1 	movw	r2, #4001	; 0xfa1
 80152d6:	4293      	cmp	r3, r2
 80152d8:	d9ef      	bls.n	80152ba <Analys+0x42>
  }
  Vavg = SumA/4000; // 4000
 80152da:	683b      	ldr	r3, [r7, #0]
 80152dc:	4a06      	ldr	r2, [pc, #24]	; (80152f8 <Analys+0x80>)
 80152de:	fba2 2303 	umull	r2, r3, r2, r3
 80152e2:	0a1b      	lsrs	r3, r3, #8
 80152e4:	b21a      	sxth	r2, r3
 80152e6:	4b05      	ldr	r3, [pc, #20]	; (80152fc <Analys+0x84>)
 80152e8:	801a      	strh	r2, [r3, #0]
}
 80152ea:	bf00      	nop
 80152ec:	3708      	adds	r7, #8
 80152ee:	46bd      	mov	sp, r7
 80152f0:	bd80      	pop	{r7, pc}
 80152f2:	bf00      	nop
 80152f4:	20002878 	.word	0x20002878
 80152f8:	10624dd3 	.word	0x10624dd3
 80152fc:	20002860 	.word	0x20002860

08015300 <AiPosi>:

/*******************************************************************************
 DevCtrl:  offset
*******************************************************************************/
void AiPosi(char Val)
{
 8015300:	b580      	push	{r7, lr}
 8015302:	b082      	sub	sp, #8
 8015304:	af00      	add	r7, sp, #0
 8015306:	4603      	mov	r3, r0
 8015308:	71fb      	strb	r3, [r7, #7]
   BIOS_Ctrl(AOFFSET,((char)Val-100)*(KpA[KindA+(StateA?1:0)]/2)*GK[GainA]/KgA[KindA+(StateA?1:0)]+KpA[KindA+(StateA?1:0)]);
 801530a:	79fb      	ldrb	r3, [r7, #7]
 801530c:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8015310:	4b28      	ldr	r3, [pc, #160]	; (80153b4 <AiPosi+0xb4>)
 8015312:	6819      	ldr	r1, [r3, #0]
 8015314:	4b28      	ldr	r3, [pc, #160]	; (80153b8 <AiPosi+0xb8>)
 8015316:	f9b3 3000 	ldrsh.w	r3, [r3]
 801531a:	4618      	mov	r0, r3
 801531c:	4b27      	ldr	r3, [pc, #156]	; (80153bc <AiPosi+0xbc>)
 801531e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015322:	2b00      	cmp	r3, #0
 8015324:	bf14      	ite	ne
 8015326:	2301      	movne	r3, #1
 8015328:	2300      	moveq	r3, #0
 801532a:	b2db      	uxtb	r3, r3
 801532c:	4403      	add	r3, r0
 801532e:	005b      	lsls	r3, r3, #1
 8015330:	440b      	add	r3, r1
 8015332:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015336:	0fd9      	lsrs	r1, r3, #31
 8015338:	440b      	add	r3, r1
 801533a:	105b      	asrs	r3, r3, #1
 801533c:	b21b      	sxth	r3, r3
 801533e:	fb03 f302 	mul.w	r3, r3, r2
 8015342:	4a1f      	ldr	r2, [pc, #124]	; (80153c0 <AiPosi+0xc0>)
 8015344:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015348:	4611      	mov	r1, r2
 801534a:	4a1e      	ldr	r2, [pc, #120]	; (80153c4 <AiPosi+0xc4>)
 801534c:	5c52      	ldrb	r2, [r2, r1]
 801534e:	fb02 f303 	mul.w	r3, r2, r3
 8015352:	4a1d      	ldr	r2, [pc, #116]	; (80153c8 <AiPosi+0xc8>)
 8015354:	6811      	ldr	r1, [r2, #0]
 8015356:	4a18      	ldr	r2, [pc, #96]	; (80153b8 <AiPosi+0xb8>)
 8015358:	f9b2 2000 	ldrsh.w	r2, [r2]
 801535c:	4610      	mov	r0, r2
 801535e:	4a17      	ldr	r2, [pc, #92]	; (80153bc <AiPosi+0xbc>)
 8015360:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015364:	2a00      	cmp	r2, #0
 8015366:	bf14      	ite	ne
 8015368:	2201      	movne	r2, #1
 801536a:	2200      	moveq	r2, #0
 801536c:	b2d2      	uxtb	r2, r2
 801536e:	4402      	add	r2, r0
 8015370:	0052      	lsls	r2, r2, #1
 8015372:	440a      	add	r2, r1
 8015374:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015378:	fb93 f3f2 	sdiv	r3, r3, r2
 801537c:	4a0d      	ldr	r2, [pc, #52]	; (80153b4 <AiPosi+0xb4>)
 801537e:	6811      	ldr	r1, [r2, #0]
 8015380:	4a0d      	ldr	r2, [pc, #52]	; (80153b8 <AiPosi+0xb8>)
 8015382:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015386:	4610      	mov	r0, r2
 8015388:	4a0c      	ldr	r2, [pc, #48]	; (80153bc <AiPosi+0xbc>)
 801538a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801538e:	2a00      	cmp	r2, #0
 8015390:	bf14      	ite	ne
 8015392:	2201      	movne	r2, #1
 8015394:	2200      	moveq	r2, #0
 8015396:	b2d2      	uxtb	r2, r2
 8015398:	4402      	add	r2, r0
 801539a:	0052      	lsls	r2, r2, #1
 801539c:	440a      	add	r2, r1
 801539e:	f9b2 2000 	ldrsh.w	r2, [r2]
 80153a2:	4413      	add	r3, r2
 80153a4:	4619      	mov	r1, r3
 80153a6:	2008      	movs	r0, #8
 80153a8:	f7f6 ffe4 	bl	800c374 <BIOS_Ctrl>
}
 80153ac:	bf00      	nop
 80153ae:	3708      	adds	r7, #8
 80153b0:	46bd      	mov	sp, r7
 80153b2:	bd80      	pop	{r7, pc}
 80153b4:	2000057c 	.word	0x2000057c
 80153b8:	2000688e 	.word	0x2000688e
 80153bc:	2000286a 	.word	0x2000286a
 80153c0:	20002852 	.word	0x20002852
 80153c4:	20000564 	.word	0x20000564
 80153c8:	20000580 	.word	0x20000580

080153cc <WaveProcess>:
/*******************************************************************************
 WaveProcess: ���㴦���������������
*******************************************************************************/

void WaveProcess(void)
{
 80153cc:	b580      	push	{r7, lr}
 80153ce:	b094      	sub	sp, #80	; 0x50
 80153d0:	af00      	add	r7, sp, #0
  //------------------ ����Ԥ����,���ɽ���ָ��������ݵ���Ч�� -----------------//

  short* Ain  = (short*)&Sampl[2];
 80153d2:	4bb0      	ldr	r3, [pc, #704]	; (8015694 <WaveProcess+0x2c8>)
 80153d4:	617b      	str	r3, [r7, #20]

  int  Ak = (KgA[KindA+(StateA?1:0)]*4)/GK[GainA];
 80153d6:	4bb0      	ldr	r3, [pc, #704]	; (8015698 <WaveProcess+0x2cc>)
 80153d8:	681a      	ldr	r2, [r3, #0]
 80153da:	4bb0      	ldr	r3, [pc, #704]	; (801569c <WaveProcess+0x2d0>)
 80153dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80153e0:	4619      	mov	r1, r3
 80153e2:	4baf      	ldr	r3, [pc, #700]	; (80156a0 <WaveProcess+0x2d4>)
 80153e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	bf14      	ite	ne
 80153ec:	2301      	movne	r3, #1
 80153ee:	2300      	moveq	r3, #0
 80153f0:	b2db      	uxtb	r3, r3
 80153f2:	440b      	add	r3, r1
 80153f4:	005b      	lsls	r3, r3, #1
 80153f6:	4413      	add	r3, r2
 80153f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80153fc:	009b      	lsls	r3, r3, #2
 80153fe:	4aa9      	ldr	r2, [pc, #676]	; (80156a4 <WaveProcess+0x2d8>)
 8015400:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015404:	4611      	mov	r1, r2
 8015406:	4aa8      	ldr	r2, [pc, #672]	; (80156a8 <WaveProcess+0x2dc>)
 8015408:	5c52      	ldrb	r2, [r2, r1]
 801540a:	fb93 f3f2 	sdiv	r3, r3, r2
 801540e:	613b      	str	r3, [r7, #16]
  short  i, n, k, p = 0;
 8015410:	2300      	movs	r3, #0
 8015412:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

  short  VtlA, ViA, VthA, VeA, VpA, VoA;            // VtA,

  short  DtA   = 0, TslA  =  0, TshA = 0, StA  = 2;
 8015416:	2300      	movs	r3, #0
 8015418:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801541a:	2300      	movs	r3, #0
 801541c:	877b      	strh	r3, [r7, #58]	; 0x3a
 801541e:	2300      	movs	r3, #0
 8015420:	873b      	strh	r3, [r7, #56]	; 0x38
 8015422:	2302      	movs	r3, #2
 8015424:	86fb      	strh	r3, [r7, #54]	; 0x36
  short  FallA = 0, RiseA =  0, UpA  = 0, DnA  = 0;
 8015426:	2300      	movs	r3, #0
 8015428:	86bb      	strh	r3, [r7, #52]	; 0x34
 801542a:	2300      	movs	r3, #0
 801542c:	867b      	strh	r3, [r7, #50]	; 0x32
 801542e:	2300      	movs	r3, #0
 8015430:	863b      	strh	r3, [r7, #48]	; 0x30
 8015432:	2300      	movs	r3, #0
 8015434:	85fb      	strh	r3, [r7, #46]	; 0x2e
  int  MaxA  = 0, MinA  = ~0, SumA = 0, SsqA = 0; // ���/��Сֵ,�ۼ�/ƽ���� = 0
 8015436:	2300      	movs	r3, #0
 8015438:	62bb      	str	r3, [r7, #40]	; 0x28
 801543a:	f04f 33ff 	mov.w	r3, #4294967295
 801543e:	627b      	str	r3, [r7, #36]	; 0x24
 8015440:	2300      	movs	r3, #0
 8015442:	623b      	str	r3, [r7, #32]
 8015444:	2300      	movs	r3, #0
 8015446:	61fb      	str	r3, [r7, #28]

  short  Dpth  = DEPTH[List[SMPL_DPTH].Val] - 1;
 8015448:	4b98      	ldr	r3, [pc, #608]	; (80156ac <WaveProcess+0x2e0>)
 801544a:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 801544e:	461a      	mov	r2, r3
 8015450:	4b97      	ldr	r3, [pc, #604]	; (80156b0 <WaveProcess+0x2e4>)
 8015452:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8015456:	b29b      	uxth	r3, r3
 8015458:	3b01      	subs	r3, #1
 801545a:	b29b      	uxth	r3, r3
 801545c:	837b      	strh	r3, [r7, #26]
  short  Tp    = PRE_SMPL+1, Tm = List[TR_MODE].Val & 1;
 801545e:	2397      	movs	r3, #151	; 0x97
 8015460:	81fb      	strh	r3, [r7, #14]
 8015462:	4b92      	ldr	r3, [pc, #584]	; (80156ac <WaveProcess+0x2e0>)
 8015464:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8015468:	f003 0301 	and.w	r3, r3, #1
 801546c:	81bb      	strh	r3, [r7, #12]
  short  Ks    = KS[List[TIM_BASE].Val],  Sm = List[SYNCMODE].Val;
 801546e:	4b8f      	ldr	r3, [pc, #572]	; (80156ac <WaveProcess+0x2e0>)
 8015470:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015474:	461a      	mov	r2, r3
 8015476:	4b8f      	ldr	r3, [pc, #572]	; (80156b4 <WaveProcess+0x2e8>)
 8015478:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801547c:	817b      	strh	r3, [r7, #10]
 801547e:	4b8b      	ldr	r3, [pc, #556]	; (80156ac <WaveProcess+0x2e0>)
 8015480:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8015484:	813b      	strh	r3, [r7, #8]
  char   Ext = List[EXT_REFN].Val;
 8015486:	4b89      	ldr	r3, [pc, #548]	; (80156ac <WaveProcess+0x2e0>)
 8015488:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 801548c:	71fb      	strb	r3, [r7, #7]

//---------------------- ��������Ԥ����,����ʵ�ʴ�����ֵ ---------------------//
  if(Status == STOP)
 801548e:	4b8a      	ldr	r3, [pc, #552]	; (80156b8 <WaveProcess+0x2ec>)
 8015490:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015494:	2b01      	cmp	r3, #1
 8015496:	d13c      	bne.n	8015512 <WaveProcess+0x146>
  {
    VtlA  = (((Tri_Posi + Ch1_Posi - List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 8015498:	4b88      	ldr	r3, [pc, #544]	; (80156bc <WaveProcess+0x2f0>)
 801549a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801549e:	461a      	mov	r2, r3
 80154a0:	4b87      	ldr	r3, [pc, #540]	; (80156c0 <WaveProcess+0x2f4>)
 80154a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80154a6:	4413      	add	r3, r2
 80154a8:	4a80      	ldr	r2, [pc, #512]	; (80156ac <WaveProcess+0x2e0>)
 80154aa:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 80154ae:	1a9b      	subs	r3, r3, r2
 80154b0:	3b64      	subs	r3, #100	; 0x64
 80154b2:	031a      	lsls	r2, r3, #12
 80154b4:	693b      	ldr	r3, [r7, #16]
 80154b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80154ba:	b29b      	uxth	r3, r3
 80154bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80154c0:	b29b      	uxth	r3, r3
 80154c2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    VthA  = (((Tri_Posi + Ch1_Posi + List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 80154c6:	4b7d      	ldr	r3, [pc, #500]	; (80156bc <WaveProcess+0x2f0>)
 80154c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80154cc:	461a      	mov	r2, r3
 80154ce:	4b7c      	ldr	r3, [pc, #496]	; (80156c0 <WaveProcess+0x2f4>)
 80154d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80154d4:	4413      	add	r3, r2
 80154d6:	4a75      	ldr	r2, [pc, #468]	; (80156ac <WaveProcess+0x2e0>)
 80154d8:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 80154dc:	4413      	add	r3, r2
 80154de:	3b64      	subs	r3, #100	; 0x64
 80154e0:	031a      	lsls	r2, r3, #12
 80154e2:	693b      	ldr	r3, [r7, #16]
 80154e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80154e8:	b29b      	uxth	r3, r3
 80154ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80154ee:	b29b      	uxth	r3, r3
 80154f0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    VpA   = ((((List[V0_POSI].Val)       -100)<<12)/Ak)+2048; //??
 80154f4:	4b6d      	ldr	r3, [pc, #436]	; (80156ac <WaveProcess+0x2e0>)
 80154f6:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80154fa:	3b64      	subs	r3, #100	; 0x64
 80154fc:	031a      	lsls	r2, r3, #12
 80154fe:	693b      	ldr	r3, [r7, #16]
 8015500:	fb92 f3f3 	sdiv	r3, r2, r3
 8015504:	b29b      	uxth	r3, r3
 8015506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801550a:	b29b      	uxth	r3, r3
 801550c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8015510:	e03b      	b.n	801558a <WaveProcess+0x1be>
  }
  else
  {
    VtlA  = (((List[THRESHOLD].Val + List[V0_POSI].Val - List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 8015512:	4b66      	ldr	r3, [pc, #408]	; (80156ac <WaveProcess+0x2e0>)
 8015514:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8015518:	461a      	mov	r2, r3
 801551a:	4b64      	ldr	r3, [pc, #400]	; (80156ac <WaveProcess+0x2e0>)
 801551c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015520:	4413      	add	r3, r2
 8015522:	4a62      	ldr	r2, [pc, #392]	; (80156ac <WaveProcess+0x2e0>)
 8015524:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 8015528:	1a9b      	subs	r3, r3, r2
 801552a:	3b64      	subs	r3, #100	; 0x64
 801552c:	031a      	lsls	r2, r3, #12
 801552e:	693b      	ldr	r3, [r7, #16]
 8015530:	fb92 f3f3 	sdiv	r3, r2, r3
 8015534:	b29b      	uxth	r3, r3
 8015536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801553a:	b29b      	uxth	r3, r3
 801553c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    VthA  = (((List[THRESHOLD].Val + List[V0_POSI].Val + List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 8015540:	4b5a      	ldr	r3, [pc, #360]	; (80156ac <WaveProcess+0x2e0>)
 8015542:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8015546:	461a      	mov	r2, r3
 8015548:	4b58      	ldr	r3, [pc, #352]	; (80156ac <WaveProcess+0x2e0>)
 801554a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801554e:	4413      	add	r3, r2
 8015550:	4a56      	ldr	r2, [pc, #344]	; (80156ac <WaveProcess+0x2e0>)
 8015552:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 8015556:	4413      	add	r3, r2
 8015558:	3b64      	subs	r3, #100	; 0x64
 801555a:	031a      	lsls	r2, r3, #12
 801555c:	693b      	ldr	r3, [r7, #16]
 801555e:	fb92 f3f3 	sdiv	r3, r2, r3
 8015562:	b29b      	uxth	r3, r3
 8015564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015568:	b29b      	uxth	r3, r3
 801556a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    VpA   = ((((List[V0_POSI].Val)       -100)<<12)/Ak)+2048;
 801556e:	4b4f      	ldr	r3, [pc, #316]	; (80156ac <WaveProcess+0x2e0>)
 8015570:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015574:	3b64      	subs	r3, #100	; 0x64
 8015576:	031a      	lsls	r2, r3, #12
 8015578:	693b      	ldr	r3, [r7, #16]
 801557a:	fb92 f3f3 	sdiv	r3, r2, r3
 801557e:	b29b      	uxth	r3, r3
 8015580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015584:	b29b      	uxth	r3, r3
 8015586:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  }
//-------------------------- ��������ͳ������� ------------------------------//


  if(((List[SYNCMODE].Val == NONE)||(List[SYNCMODE].Val == SCAN))
 801558a:	4b48      	ldr	r3, [pc, #288]	; (80156ac <WaveProcess+0x2e0>)
 801558c:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8015590:	2b05      	cmp	r3, #5
 8015592:	d004      	beq.n	801559e <WaveProcess+0x1d2>
 8015594:	4b45      	ldr	r3, [pc, #276]	; (80156ac <WaveProcess+0x2e0>)
 8015596:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 801559a:	2b01      	cmp	r3, #1
 801559c:	d10b      	bne.n	80155b6 <WaveProcess+0x1ea>
     &&(List[TIM_BASE].Val>11))
 801559e:	4b43      	ldr	r3, [pc, #268]	; (80156ac <WaveProcess+0x2e0>)
 80155a0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80155a4:	2b0b      	cmp	r3, #11
 80155a6:	dd06      	ble.n	80155b6 <WaveProcess+0x1ea>
  {
    Dpth = 302;
 80155a8:	f44f 7397 	mov.w	r3, #302	; 0x12e
 80155ac:	837b      	strh	r3, [r7, #26]
    List[VIEWPOSI].Val = 0;
 80155ae:	4b3f      	ldr	r3, [pc, #252]	; (80156ac <WaveProcess+0x2e0>)
 80155b0:	2200      	movs	r2, #0
 80155b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  for(i=0; i<Dpth; i++)
 80155b6:	2300      	movs	r3, #0
 80155b8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80155bc:	e0ad      	b.n	801571a <WaveProcess+0x34e>
  {
	n = __HAL_DMA_GET_COUNTER(&hdma_adc1);//    DMA1_Channel1->CNDTR;              //DMA_CH_A->CNDTR; //DMA1_CNDTR1
 80155be:	4b41      	ldr	r3, [pc, #260]	; (80156c4 <WaveProcess+0x2f8>)
 80155c0:	681b      	ldr	r3, [r3, #0]
 80155c2:	685b      	ldr	r3, [r3, #4]
 80155c4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    if(i >= (Dpth-n)) break;      // ����һ���ڵȴ�A/Dת�����
 80155c8:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 80155cc:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 80155d0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80155d4:	1acb      	subs	r3, r1, r3
 80155d6:	429a      	cmp	r2, r3
 80155d8:	f280 80a7 	bge.w	801572a <WaveProcess+0x35e>
    ViA = Ain[i];
 80155dc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80155e0:	005b      	lsls	r3, r3, #1
 80155e2:	697a      	ldr	r2, [r7, #20]
 80155e4:	4413      	add	r3, r2
 80155e6:	881b      	ldrh	r3, [r3, #0]
 80155e8:	80bb      	strh	r3, [r7, #4]

    if(MaxA < ViA) MaxA = ViA;    // ͳ�����ֵ
 80155ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80155ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80155f0:	429a      	cmp	r2, r3
 80155f2:	da02      	bge.n	80155fa <WaveProcess+0x22e>
 80155f4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80155f8:	62bb      	str	r3, [r7, #40]	; 0x28
    if(MinA > ViA) MinA = ViA;    // ͳ����Сֵ
 80155fa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80155fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015600:	429a      	cmp	r2, r3
 8015602:	dd02      	ble.n	801560a <WaveProcess+0x23e>
 8015604:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015608:	627b      	str	r3, [r7, #36]	; 0x24
    SumA += ViA;                  // ͳ���ۼӺ�
 801560a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801560e:	6a3a      	ldr	r2, [r7, #32]
 8015610:	4413      	add	r3, r2
 8015612:	623b      	str	r3, [r7, #32]
    SsqA +=(ViA-VpA)*(ViA-VpA);   // ͳ��ƽ����
 8015614:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8015618:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 801561c:	1ad3      	subs	r3, r2, r3
 801561e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8015622:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 8015626:	1a8a      	subs	r2, r1, r2
 8015628:	fb02 f303 	mul.w	r3, r2, r3
 801562c:	69fa      	ldr	r2, [r7, #28]
 801562e:	4413      	add	r3, r2
 8015630:	61fb      	str	r3, [r7, #28]


    if(StA == 2) DtA = 0;                  // ����CH_A�׸�������ǰ��ʱ���ۼ�
 8015632:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8015636:	2b02      	cmp	r3, #2
 8015638:	d102      	bne.n	8015640 <WaveProcess+0x274>
 801563a:	2300      	movs	r3, #0
 801563c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801563e:	e005      	b.n	801564c <WaveProcess+0x280>
    else         DtA++;
 8015640:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8015644:	b29b      	uxth	r3, r3
 8015646:	3301      	adds	r3, #1
 8015648:	b29b      	uxth	r3, r3
 801564a:	87bb      	strh	r3, [r7, #60]	; 0x3c

    if(ViA > VthA){                        // ViA ������ֵ����
 801564c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8015650:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8015654:	429a      	cmp	r2, r3
 8015656:	dd37      	ble.n	80156c8 <WaveProcess+0x2fc>
      if(StA == 0){
 8015658:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801565c:	2b00      	cmp	r3, #0
 801565e:	d115      	bne.n	801568c <WaveProcess+0x2c0>
        TslA += DtA; DtA = 0; RiseA++;     // CH_A��λʱ���ۼƣ��������ۼ�
 8015660:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015662:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015664:	4413      	add	r3, r2
 8015666:	b29b      	uxth	r3, r3
 8015668:	877b      	strh	r3, [r7, #58]	; 0x3a
 801566a:	2300      	movs	r3, #0
 801566c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801566e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8015672:	b29b      	uxth	r3, r3
 8015674:	3301      	adds	r3, #1
 8015676:	b29b      	uxth	r3, r3
 8015678:	867b      	strh	r3, [r7, #50]	; 0x32
        if(UpA < Tp) UpA = i;              // ��¼Ԥ������CH_A��һ��������λ��
 801567a:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 801567e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015682:	429a      	cmp	r2, r3
 8015684:	da02      	bge.n	801568c <WaveProcess+0x2c0>
 8015686:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801568a:	863b      	strh	r3, [r7, #48]	; 0x30
      }
      StA = 1;                             // ��ǰCH_A״̬��Ϊ��λ
 801568c:	2301      	movs	r3, #1
 801568e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8015690:	e03c      	b.n	801570c <WaveProcess+0x340>
 8015692:	bf00      	nop
 8015694:	2000287c 	.word	0x2000287c
 8015698:	20000580 	.word	0x20000580
 801569c:	2000688e 	.word	0x2000688e
 80156a0:	2000286a 	.word	0x2000286a
 80156a4:	20002852 	.word	0x20002852
 80156a8:	20000564 	.word	0x20000564
 80156ac:	2000029c 	.word	0x2000029c
 80156b0:	08002270 	.word	0x08002270
 80156b4:	08002278 	.word	0x08002278
 80156b8:	200007a8 	.word	0x200007a8
 80156bc:	20002868 	.word	0x20002868
 80156c0:	2000688c 	.word	0x2000688c
 80156c4:	20006b18 	.word	0x20006b18
    } else if(ViA < VtlA){                 // ViA ������ֵ����
 80156c8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80156cc:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80156d0:	429a      	cmp	r2, r3
 80156d2:	da1b      	bge.n	801570c <WaveProcess+0x340>
      if(StA == 1){
 80156d4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80156d8:	2b01      	cmp	r3, #1
 80156da:	d115      	bne.n	8015708 <WaveProcess+0x33c>
        TshA += DtA; DtA = 0; FallA++;     // CH_A��λʱ���ۼƣ��½����ۼ�
 80156dc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80156de:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80156e0:	4413      	add	r3, r2
 80156e2:	b29b      	uxth	r3, r3
 80156e4:	873b      	strh	r3, [r7, #56]	; 0x38
 80156e6:	2300      	movs	r3, #0
 80156e8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80156ea:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80156ee:	b29b      	uxth	r3, r3
 80156f0:	3301      	adds	r3, #1
 80156f2:	b29b      	uxth	r3, r3
 80156f4:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(DnA < Tp) DnA = i;              // ��¼Ԥ������CH_A��һ���½���λ��
 80156f6:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80156fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80156fe:	429a      	cmp	r2, r3
 8015700:	da02      	bge.n	8015708 <WaveProcess+0x33c>
 8015702:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015706:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      StA = 0;                             // ��ǰCH_A״̬��Ϊ��λ
 8015708:	2300      	movs	r3, #0
 801570a:	86fb      	strh	r3, [r7, #54]	; 0x36
  for(i=0; i<Dpth; i++)
 801570c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015710:	b29b      	uxth	r3, r3
 8015712:	3301      	adds	r3, #1
 8015714:	b29b      	uxth	r3, r3
 8015716:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 801571a:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 801571e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8015722:	429a      	cmp	r2, r3
 8015724:	f6ff af4b 	blt.w	80155be <WaveProcess+0x1f2>
 8015728:	e000      	b.n	801572c <WaveProcess+0x360>
    if(i >= (Dpth-n)) break;      // ����һ���ڵȴ�A/Dת�����
 801572a:	bf00      	nop
    }
  }
  if(n == 0)
 801572c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015730:	2b00      	cmp	r3, #0
 8015732:	d14f      	bne.n	80157d4 <WaveProcess+0x408>
  {                              // ����ȫ����ɺ��������ֵ i == Dpth
    Vmax = MaxA; Vmin = MinA; Vavg = SumA/i; Vssq = SsqA/(i+1);
 8015734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015736:	b21a      	sxth	r2, r3
 8015738:	4b9a      	ldr	r3, [pc, #616]	; (80159a4 <WaveProcess+0x5d8>)
 801573a:	801a      	strh	r2, [r3, #0]
 801573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801573e:	b21a      	sxth	r2, r3
 8015740:	4b99      	ldr	r3, [pc, #612]	; (80159a8 <WaveProcess+0x5dc>)
 8015742:	801a      	strh	r2, [r3, #0]
 8015744:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015748:	6a3a      	ldr	r2, [r7, #32]
 801574a:	fb92 f3f3 	sdiv	r3, r2, r3
 801574e:	b21a      	sxth	r2, r3
 8015750:	4b96      	ldr	r3, [pc, #600]	; (80159ac <WaveProcess+0x5e0>)
 8015752:	801a      	strh	r2, [r3, #0]
 8015754:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015758:	3301      	adds	r3, #1
 801575a:	69fa      	ldr	r2, [r7, #28]
 801575c:	fb92 f3f3 	sdiv	r3, r2, r3
 8015760:	4a93      	ldr	r2, [pc, #588]	; (80159b0 <WaveProcess+0x5e4>)
 8015762:	6013      	str	r3, [r2, #0]
    Vrms = (Sqrt32(Vssq)); Vmid = (Vmax + Vmin)/2; Vpp = Vmax - Vmin;
 8015764:	4b92      	ldr	r3, [pc, #584]	; (80159b0 <WaveProcess+0x5e4>)
 8015766:	681b      	ldr	r3, [r3, #0]
 8015768:	4618      	mov	r0, r3
 801576a:	f7fc fbf5 	bl	8011f58 <Sqrt32>
 801576e:	4603      	mov	r3, r0
 8015770:	461a      	mov	r2, r3
 8015772:	4b90      	ldr	r3, [pc, #576]	; (80159b4 <WaveProcess+0x5e8>)
 8015774:	601a      	str	r2, [r3, #0]
 8015776:	4b8b      	ldr	r3, [pc, #556]	; (80159a4 <WaveProcess+0x5d8>)
 8015778:	f9b3 3000 	ldrsh.w	r3, [r3]
 801577c:	461a      	mov	r2, r3
 801577e:	4b8a      	ldr	r3, [pc, #552]	; (80159a8 <WaveProcess+0x5dc>)
 8015780:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015784:	4413      	add	r3, r2
 8015786:	0fda      	lsrs	r2, r3, #31
 8015788:	4413      	add	r3, r2
 801578a:	105b      	asrs	r3, r3, #1
 801578c:	b21a      	sxth	r2, r3
 801578e:	4b8a      	ldr	r3, [pc, #552]	; (80159b8 <WaveProcess+0x5ec>)
 8015790:	801a      	strh	r2, [r3, #0]
 8015792:	4b84      	ldr	r3, [pc, #528]	; (80159a4 <WaveProcess+0x5d8>)
 8015794:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015798:	461a      	mov	r2, r3
 801579a:	4b83      	ldr	r3, [pc, #524]	; (80159a8 <WaveProcess+0x5dc>)
 801579c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80157a0:	1ad3      	subs	r3, r2, r3
 80157a2:	4a86      	ldr	r2, [pc, #536]	; (80159bc <WaveProcess+0x5f0>)
 80157a4:	6013      	str	r3, [r2, #0]
    HighT = TshA/FallA; LowT = TslA/RiseA; Edge = FallA+ RiseA;
 80157a6:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 80157aa:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80157ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80157b2:	4a83      	ldr	r2, [pc, #524]	; (80159c0 <WaveProcess+0x5f4>)
 80157b4:	6013      	str	r3, [r2, #0]
 80157b6:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 80157ba:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80157be:	fb92 f3f3 	sdiv	r3, r2, r3
 80157c2:	4a80      	ldr	r2, [pc, #512]	; (80159c4 <WaveProcess+0x5f8>)
 80157c4:	6013      	str	r3, [r2, #0]
 80157c6:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 80157ca:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80157ce:	4413      	add	r3, r2
 80157d0:	4a7d      	ldr	r2, [pc, #500]	; (80159c8 <WaveProcess+0x5fc>)
 80157d2:	6013      	str	r3, [r2, #0]

  }
//--------------------------- ���ɲ�����ʾ���� -------------------------------//

  if(((Sm == NONE)||(Sm == SCAN))){
 80157d4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80157d8:	2b05      	cmp	r3, #5
 80157da:	d003      	beq.n	80157e4 <WaveProcess+0x418>
 80157dc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80157e0:	2b01      	cmp	r3, #1
 80157e2:	d12f      	bne.n	8015844 <WaveProcess+0x478>
    if(List[TIM_BASE].Val > 11)
 80157e4:	4b79      	ldr	r3, [pc, #484]	; (80159cc <WaveProcess+0x600>)
 80157e6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80157ea:	2b0b      	cmp	r3, #11
 80157ec:	dd03      	ble.n	80157f6 <WaveProcess+0x42a>
      k = 1;                         // NONE SCAN ģʽ��ǿ�ƴ���
 80157ee:	2301      	movs	r3, #1
 80157f0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if(List[TIM_BASE].Val > 11)
 80157f4:	e033      	b.n	801585e <WaveProcess+0x492>
    else
    {
      k =((Tm == RISE)? UpA : DnA)-Tp; // k:Ԥ�����󴥷���λ��
 80157f6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	d101      	bne.n	8015802 <WaveProcess+0x436>
 80157fe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8015800:	e000      	b.n	8015804 <WaveProcess+0x438>
 8015802:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015804:	89fa      	ldrh	r2, [r7, #14]
 8015806:	1a9b      	subs	r3, r3, r2
 8015808:	b29b      	uxth	r3, r3
 801580a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if((Sm == SCAN)&&(k < 0)){ // AUTO ģʽ���޴���ʱ
 801580e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8015812:	2b01      	cmp	r3, #1
 8015814:	d123      	bne.n	801585e <WaveProcess+0x492>
 8015816:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 801581a:	2b00      	cmp	r3, #0
 801581c:	da1f      	bge.n	801585e <WaveProcess+0x492>
        if(i > Dpth/4) k = 1;    // ������1/4����ǿ�ƴ���
 801581e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8015822:	2b00      	cmp	r3, #0
 8015824:	da00      	bge.n	8015828 <WaveProcess+0x45c>
 8015826:	3303      	adds	r3, #3
 8015828:	109b      	asrs	r3, r3, #2
 801582a:	b21b      	sxth	r3, r3
 801582c:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8015830:	429a      	cmp	r2, r3
 8015832:	dd03      	ble.n	801583c <WaveProcess+0x470>
 8015834:	2301      	movs	r3, #1
 8015836:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if(List[TIM_BASE].Val > 11)
 801583a:	e010      	b.n	801585e <WaveProcess+0x492>
        else           k = 0;    // ������1/4��ǰ����ʾ
 801583c:	2300      	movs	r3, #0
 801583e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if(List[TIM_BASE].Val > 11)
 8015842:	e00c      	b.n	801585e <WaveProcess+0x492>
      }

    }
  } else
    k =((Tm == RISE)? UpA : DnA)-Tp; // k:Ԥ�����󴥷���λ��
 8015844:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8015848:	2b00      	cmp	r3, #0
 801584a:	d101      	bne.n	8015850 <WaveProcess+0x484>
 801584c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801584e:	e000      	b.n	8015852 <WaveProcess+0x486>
 8015850:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015852:	89fa      	ldrh	r2, [r7, #14]
 8015854:	1a9b      	subs	r3, r3, r2
 8015856:	b29b      	uxth	r3, r3
 8015858:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 801585c:	e000      	b.n	8015860 <WaveProcess+0x494>
    if(List[TIM_BASE].Val > 11)
 801585e:	bf00      	nop

  if((!n)&&(Sm == SINGL)&&(k > 0)){ // SNGL ģʽ���д���ʱ�����������Զ�ֹͣ
 8015860:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015864:	2b00      	cmp	r3, #0
 8015866:	d10c      	bne.n	8015882 <WaveProcess+0x4b6>
 8015868:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801586c:	2b04      	cmp	r3, #4
 801586e:	d108      	bne.n	8015882 <WaveProcess+0x4b6>
 8015870:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8015874:	2b00      	cmp	r3, #0
 8015876:	dd04      	ble.n	8015882 <WaveProcess+0x4b6>
    Status = STOP;
 8015878:	4b55      	ldr	r3, [pc, #340]	; (80159d0 <WaveProcess+0x604>)
 801587a:	2201      	movs	r2, #1
 801587c:	801a      	strh	r2, [r3, #0]
    DispStatus();
 801587e:	f7fe ff21 	bl	80146c4 <DispStatus>
  }

  if((Sm == AUTO)&&(k < 0)){ // AUTO ģʽ���޴���ʱ
 8015882:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8015886:	2b02      	cmp	r3, #2
 8015888:	d115      	bne.n	80158b6 <WaveProcess+0x4ea>
 801588a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 801588e:	2b00      	cmp	r3, #0
 8015890:	da11      	bge.n	80158b6 <WaveProcess+0x4ea>
    if(i > Dpth/4) k = 1;    // ������1/4����ǿ�ƴ���
 8015892:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8015896:	2b00      	cmp	r3, #0
 8015898:	da00      	bge.n	801589c <WaveProcess+0x4d0>
 801589a:	3303      	adds	r3, #3
 801589c:	109b      	asrs	r3, r3, #2
 801589e:	b21b      	sxth	r3, r3
 80158a0:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 80158a4:	429a      	cmp	r2, r3
 80158a6:	dd03      	ble.n	80158b0 <WaveProcess+0x4e4>
 80158a8:	2301      	movs	r3, #1
 80158aa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80158ae:	e002      	b.n	80158b6 <WaveProcess+0x4ea>
    else           k = 0;    // ������1/4��ǰ����ʾ
 80158b0:	2300      	movs	r3, #0
 80158b2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  }

  Trigger_k = k;
 80158b6:	4a47      	ldr	r2, [pc, #284]	; (80159d4 <WaveProcess+0x608>)
 80158b8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80158bc:	8013      	strh	r3, [r2, #0]

  if(Trigger_k>0)NORM_Kflag = 1;
 80158be:	4b45      	ldr	r3, [pc, #276]	; (80159d4 <WaveProcess+0x608>)
 80158c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	dd02      	ble.n	80158ce <WaveProcess+0x502>
 80158c8:	4b43      	ldr	r3, [pc, #268]	; (80159d8 <WaveProcess+0x60c>)
 80158ca:	2201      	movs	r2, #1
 80158cc:	701a      	strb	r2, [r3, #0]

  if((SNGL_Kflag)&&(Status == STOP))
 80158ce:	4b43      	ldr	r3, [pc, #268]	; (80159dc <WaveProcess+0x610>)
 80158d0:	781b      	ldrb	r3, [r3, #0]
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d016      	beq.n	8015904 <WaveProcess+0x538>
 80158d6:	4b3e      	ldr	r3, [pc, #248]	; (80159d0 <WaveProcess+0x604>)
 80158d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80158dc:	2b01      	cmp	r3, #1
 80158de:	d111      	bne.n	8015904 <WaveProcess+0x538>
  {
    Ch1_Posi = List[V0_POSI].Val;
 80158e0:	4b3a      	ldr	r3, [pc, #232]	; (80159cc <WaveProcess+0x600>)
 80158e2:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 80158e6:	4b3e      	ldr	r3, [pc, #248]	; (80159e0 <WaveProcess+0x614>)
 80158e8:	801a      	strh	r2, [r3, #0]
    Ch2_Posi = List[EXT_POSI].Val;
 80158ea:	4b38      	ldr	r3, [pc, #224]	; (80159cc <WaveProcess+0x600>)
 80158ec:	f9b3 20dc 	ldrsh.w	r2, [r3, #220]	; 0xdc
 80158f0:	4b3c      	ldr	r3, [pc, #240]	; (80159e4 <WaveProcess+0x618>)
 80158f2:	801a      	strh	r2, [r3, #0]
    Tri_Posi = List[THRESHOLD].Val;
 80158f4:	4b35      	ldr	r3, [pc, #212]	; (80159cc <WaveProcess+0x600>)
 80158f6:	f9b3 2084 	ldrsh.w	r2, [r3, #132]	; 0x84
 80158fa:	4b3b      	ldr	r3, [pc, #236]	; (80159e8 <WaveProcess+0x61c>)
 80158fc:	801a      	strh	r2, [r3, #0]
    SNGL_Kflag = 0;
 80158fe:	4b37      	ldr	r3, [pc, #220]	; (80159dc <WaveProcess+0x610>)
 8015900:	2200      	movs	r2, #0
 8015902:	701a      	strb	r2, [r3, #0]
  }

  if(k > 0)
 8015904:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8015908:	2b00      	cmp	r3, #0
 801590a:	f340 8104 	ble.w	8015b16 <WaveProcess+0x74a>
  {                                               // �д���ʱ����ʾ����
    k += List[VIEWPOSI].Val+((1024-Ks)*Tp+512)/1024; // ���β�ֵ���
 801590e:	4b2f      	ldr	r3, [pc, #188]	; (80159cc <WaveProcess+0x600>)
 8015910:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8015914:	b29a      	uxth	r2, r3
 8015916:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801591a:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801591e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8015922:	fb01 f303 	mul.w	r3, r1, r3
 8015926:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801592a:	2b00      	cmp	r3, #0
 801592c:	da01      	bge.n	8015932 <WaveProcess+0x566>
 801592e:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8015932:	129b      	asrs	r3, r3, #10
 8015934:	b29b      	uxth	r3, r3
 8015936:	4413      	add	r3, r2
 8015938:	b29a      	uxth	r2, r3
 801593a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 801593e:	4413      	add	r3, r2
 8015940:	b29b      	uxth	r3, r3
 8015942:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    VeA =(((Ain[k]-2048)*Ak)>>12)+100;
 8015946:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 801594a:	005b      	lsls	r3, r3, #1
 801594c:	697a      	ldr	r2, [r7, #20]
 801594e:	4413      	add	r3, r2
 8015950:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015954:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015958:	693a      	ldr	r2, [r7, #16]
 801595a:	fb02 f303 	mul.w	r3, r2, r3
 801595e:	131b      	asrs	r3, r3, #12
 8015960:	b29b      	uxth	r3, r3
 8015962:	3364      	adds	r3, #100	; 0x64
 8015964:	b29b      	uxth	r3, r3
 8015966:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    for(n=0; n<300;)
 801596a:	2300      	movs	r3, #0
 801596c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8015970:	e0c7      	b.n	8015b02 <WaveProcess+0x736>
    {
      ViA =(((Ain[k]-2048)*Ak)>>12)+100;
 8015972:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8015976:	005b      	lsls	r3, r3, #1
 8015978:	697a      	ldr	r2, [r7, #20]
 801597a:	4413      	add	r3, r2
 801597c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015980:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015984:	693a      	ldr	r2, [r7, #16]
 8015986:	fb02 f303 	mul.w	r3, r2, r3
 801598a:	131b      	asrs	r3, r3, #12
 801598c:	b29b      	uxth	r3, r3
 801598e:	3364      	adds	r3, #100	; 0x64
 8015990:	b29b      	uxth	r3, r3
 8015992:	80bb      	strh	r3, [r7, #4]
      k++;
 8015994:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8015998:	b29b      	uxth	r3, r3
 801599a:	3301      	adds	r3, #1
 801599c:	b29b      	uxth	r3, r3
 801599e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
      while(p > 0){
 80159a2:	e09e      	b.n	8015ae2 <WaveProcess+0x716>
 80159a4:	2000285e 	.word	0x2000285e
 80159a8:	20002870 	.word	0x20002870
 80159ac:	20002860 	.word	0x20002860
 80159b0:	20002864 	.word	0x20002864
 80159b4:	2000286c 	.word	0x2000286c
 80159b8:	20002872 	.word	0x20002872
 80159bc:	20006888 	.word	0x20006888
 80159c0:	20006880 	.word	0x20006880
 80159c4:	20006894 	.word	0x20006894
 80159c8:	20002858 	.word	0x20002858
 80159cc:	2000029c 	.word	0x2000029c
 80159d0:	200007a8 	.word	0x200007a8
 80159d4:	2000285c 	.word	0x2000285c
 80159d8:	20002874 	.word	0x20002874
 80159dc:	20000560 	.word	0x20000560
 80159e0:	2000688c 	.word	0x2000688c
 80159e4:	20006884 	.word	0x20006884
 80159e8:	20002868 	.word	0x20002868
        VoA = VeA +((ViA-VeA)*(1024-p))/1024; // ���� A ͨ����ǰ���ε�Ĳ�ֵ
 80159ec:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80159f0:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80159f4:	1ad3      	subs	r3, r2, r3
 80159f6:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80159fa:	f5c2 6280 	rsb	r2, r2, #1024	; 0x400
 80159fe:	fb02 f303 	mul.w	r3, r2, r3
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	da01      	bge.n	8015a0a <WaveProcess+0x63e>
 8015a06:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8015a0a:	129b      	asrs	r3, r3, #10
 8015a0c:	b29a      	uxth	r2, r3
 8015a0e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015a12:	4413      	add	r3, r2
 8015a14:	b29b      	uxth	r3, r3
 8015a16:	87fb      	strh	r3, [r7, #62]	; 0x3e
        if(Status == STOP){
 8015a18:	4b63      	ldr	r3, [pc, #396]	; (8015ba8 <WaveProcess+0x7dc>)
 8015a1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015a1e:	2b01      	cmp	r3, #1
 8015a20:	d132      	bne.n	8015a88 <WaveProcess+0x6bc>

          Vo_Temp = VoA+(List[V0_POSI].Val-Ch1_Posi);
 8015a22:	4b62      	ldr	r3, [pc, #392]	; (8015bac <WaveProcess+0x7e0>)
 8015a24:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015a28:	b29a      	uxth	r2, r3
 8015a2a:	4b61      	ldr	r3, [pc, #388]	; (8015bb0 <WaveProcess+0x7e4>)
 8015a2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015a30:	b29b      	uxth	r3, r3
 8015a32:	1ad3      	subs	r3, r2, r3
 8015a34:	b29a      	uxth	r2, r3
 8015a36:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015a38:	4413      	add	r3, r2
 8015a3a:	b29b      	uxth	r3, r3
 8015a3c:	b21a      	sxth	r2, r3
 8015a3e:	4b5d      	ldr	r3, [pc, #372]	; (8015bb4 <WaveProcess+0x7e8>)
 8015a40:	801a      	strh	r2, [r3, #0]

          if(Vo_Temp > 199) Vo_Temp = 202;
 8015a42:	4b5c      	ldr	r3, [pc, #368]	; (8015bb4 <WaveProcess+0x7e8>)
 8015a44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015a48:	2bc7      	cmp	r3, #199	; 0xc7
 8015a4a:	dd02      	ble.n	8015a52 <WaveProcess+0x686>
 8015a4c:	4b59      	ldr	r3, [pc, #356]	; (8015bb4 <WaveProcess+0x7e8>)
 8015a4e:	22ca      	movs	r2, #202	; 0xca
 8015a50:	801a      	strh	r2, [r3, #0]
          if(Vo_Temp <   3) Vo_Temp = 1;                     // �����޷�
 8015a52:	4b58      	ldr	r3, [pc, #352]	; (8015bb4 <WaveProcess+0x7e8>)
 8015a54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015a58:	2b02      	cmp	r3, #2
 8015a5a:	dc02      	bgt.n	8015a62 <WaveProcess+0x696>
 8015a5c:	4b55      	ldr	r3, [pc, #340]	; (8015bb4 <WaveProcess+0x7e8>)
 8015a5e:	2201      	movs	r2, #1
 8015a60:	801a      	strh	r2, [r3, #0]

          WaveBuf[n]= Vo_Temp;
 8015a62:	4b54      	ldr	r3, [pc, #336]	; (8015bb4 <WaveProcess+0x7e8>)
 8015a64:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015a68:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015a6c:	b2d1      	uxtb	r1, r2
 8015a6e:	4a52      	ldr	r2, [pc, #328]	; (8015bb8 <WaveProcess+0x7ec>)
 8015a70:	54d1      	strb	r1, [r2, r3]

          Build_Ext(n, Ext, List[V0_POSI].Val);
 8015a72:	4b4e      	ldr	r3, [pc, #312]	; (8015bac <WaveProcess+0x7e0>)
 8015a74:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015a78:	b2da      	uxtb	r2, r3
 8015a7a:	79f9      	ldrb	r1, [r7, #7]
 8015a7c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015a80:	4618      	mov	r0, r3
 8015a82:	f000 f89d 	bl	8015bc0 <Build_Ext>
 8015a86:	e01b      	b.n	8015ac0 <WaveProcess+0x6f4>
        }
        else{
          if(VoA > 199) VoA = 202;                   // �����޷�  ��������
 8015a88:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8015a8c:	2bc7      	cmp	r3, #199	; 0xc7
 8015a8e:	dd01      	ble.n	8015a94 <WaveProcess+0x6c8>
 8015a90:	23ca      	movs	r3, #202	; 0xca
 8015a92:	87fb      	strh	r3, [r7, #62]	; 0x3e
          if(VoA <   3) VoA = 2;                     // �����޷�
 8015a94:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8015a98:	2b02      	cmp	r3, #2
 8015a9a:	dc01      	bgt.n	8015aa0 <WaveProcess+0x6d4>
 8015a9c:	2302      	movs	r3, #2
 8015a9e:	87fb      	strh	r3, [r7, #62]	; 0x3e
          WaveBuf[n]= VoA;
 8015aa0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015aa4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015aa6:	b2d1      	uxtb	r1, r2
 8015aa8:	4a43      	ldr	r2, [pc, #268]	; (8015bb8 <WaveProcess+0x7ec>)
 8015aaa:	54d1      	strb	r1, [r2, r3]

          Build_Ext(n, Ext, List[V0_POSI].Val);
 8015aac:	4b3f      	ldr	r3, [pc, #252]	; (8015bac <WaveProcess+0x7e0>)
 8015aae:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015ab2:	b2da      	uxtb	r2, r3
 8015ab4:	79f9      	ldrb	r1, [r7, #7]
 8015ab6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015aba:	4618      	mov	r0, r3
 8015abc:	f000 f880 	bl	8015bc0 <Build_Ext>
        }

        if(n++ >= 300) break;
 8015ac0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015ac4:	b29a      	uxth	r2, r3
 8015ac6:	3201      	adds	r2, #1
 8015ac8:	b292      	uxth	r2, r2
 8015aca:	f8a7 204c 	strh.w	r2, [r7, #76]	; 0x4c
 8015ace:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015ad2:	da0b      	bge.n	8015aec <WaveProcess+0x720>
        p -= Ks;
 8015ad4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8015ad8:	897b      	ldrh	r3, [r7, #10]
 8015ada:	1ad3      	subs	r3, r2, r3
 8015adc:	b29b      	uxth	r3, r3
 8015ade:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      while(p > 0){
 8015ae2:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	dc80      	bgt.n	80159ec <WaveProcess+0x620>
 8015aea:	e000      	b.n	8015aee <WaveProcess+0x722>
        if(n++ >= 300) break;
 8015aec:	bf00      	nop
      }
      p += 1024;
 8015aee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8015af2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015af6:	b29b      	uxth	r3, r3
 8015af8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      VeA = ViA;                              // �ݴ浱ǰ���ε��ֵ
 8015afc:	88bb      	ldrh	r3, [r7, #4]
 8015afe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    for(n=0; n<300;)
 8015b02:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015b06:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015b0a:	f6ff af32 	blt.w	8015972 <WaveProcess+0x5a6>
    }
    Norm_Clr = 0;                                          //NORM����
 8015b0e:	4b2b      	ldr	r3, [pc, #172]	; (8015bbc <WaveProcess+0x7f0>)
 8015b10:	2200      	movs	r2, #0
 8015b12:	701a      	strb	r2, [r3, #0]
 8015b14:	e037      	b.n	8015b86 <WaveProcess+0x7ba>
  }
  else if((k < 0) && ((Sm != NORM)||(Norm_Clr))){          //NORM��������Ļ
 8015b16:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	da33      	bge.n	8015b86 <WaveProcess+0x7ba>
 8015b1e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8015b22:	2b03      	cmp	r3, #3
 8015b24:	d103      	bne.n	8015b2e <WaveProcess+0x762>
 8015b26:	4b25      	ldr	r3, [pc, #148]	; (8015bbc <WaveProcess+0x7f0>)
 8015b28:	781b      	ldrb	r3, [r3, #0]
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d02b      	beq.n	8015b86 <WaveProcess+0x7ba>
    for(n=0; n<300;){
 8015b2e:	2300      	movs	r3, #0
 8015b30:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8015b34:	e022      	b.n	8015b7c <WaveProcess+0x7b0>
      while(p > 0){
        WaveBuf[n]= 255;
 8015b36:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015b3a:	4a1f      	ldr	r2, [pc, #124]	; (8015bb8 <WaveProcess+0x7ec>)
 8015b3c:	21ff      	movs	r1, #255	; 0xff
 8015b3e:	54d1      	strb	r1, [r2, r3]

        if(n++ >= 300) break;
 8015b40:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015b44:	b29a      	uxth	r2, r3
 8015b46:	3201      	adds	r2, #1
 8015b48:	b292      	uxth	r2, r2
 8015b4a:	f8a7 204c 	strh.w	r2, [r7, #76]	; 0x4c
 8015b4e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015b52:	da0b      	bge.n	8015b6c <WaveProcess+0x7a0>
        p -= Ks;
 8015b54:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8015b58:	897b      	ldrh	r3, [r7, #10]
 8015b5a:	1ad3      	subs	r3, r2, r3
 8015b5c:	b29b      	uxth	r3, r3
 8015b5e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      while(p > 0){
 8015b62:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	dce5      	bgt.n	8015b36 <WaveProcess+0x76a>
 8015b6a:	e000      	b.n	8015b6e <WaveProcess+0x7a2>
        if(n++ >= 300) break;
 8015b6c:	bf00      	nop
      }
      p += 1024;
 8015b6e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8015b72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015b76:	b29b      	uxth	r3, r3
 8015b78:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    for(n=0; n<300;){
 8015b7c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015b80:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015b84:	dbed      	blt.n	8015b62 <WaveProcess+0x796>
    }
  }
  if((i == Dpth)&&(Status != STOP))
 8015b86:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8015b8a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8015b8e:	429a      	cmp	r2, r3
 8015b90:	d106      	bne.n	8015ba0 <WaveProcess+0x7d4>
 8015b92:	4b05      	ldr	r3, [pc, #20]	; (8015ba8 <WaveProcess+0x7dc>)
 8015b94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015b98:	2b01      	cmp	r3, #1
 8015b9a:	d001      	beq.n	8015ba0 <WaveProcess+0x7d4>
  {
	  ADC_Start();       // ���¿�ʼ ADC ɨ�����
 8015b9c:	f7f6 fdfe 	bl	800c79c <ADC_Start>
  }
}
 8015ba0:	bf00      	nop
 8015ba2:	3750      	adds	r7, #80	; 0x50
 8015ba4:	46bd      	mov	sp, r7
 8015ba6:	bd80      	pop	{r7, pc}
 8015ba8:	200007a8 	.word	0x200007a8
 8015bac:	2000029c 	.word	0x2000029c
 8015bb0:	2000688c 	.word	0x2000688c
 8015bb4:	20002850 	.word	0x20002850
 8015bb8:	20000c10 	.word	0x20000c10
 8015bbc:	200007af 	.word	0x200007af

08015bc0 <Build_Ext>:

/*******************************************************************************
 Build_Ext: ��չͨ��������ʾ
*******************************************************************************/
void  Build_Ext(short x, char Ext, char Yp)
{
 8015bc0:	b480      	push	{r7}
 8015bc2:	b085      	sub	sp, #20
 8015bc4:	af00      	add	r7, sp, #0
 8015bc6:	4603      	mov	r3, r0
 8015bc8:	80fb      	strh	r3, [r7, #6]
 8015bca:	460b      	mov	r3, r1
 8015bcc:	717b      	strb	r3, [r7, #5]
 8015bce:	4613      	mov	r3, r2
 8015bd0:	713b      	strb	r3, [r7, #4]
  char* Buf = WaveBuf + TRACK1_SIZE;
 8015bd2:	4b69      	ldr	r3, [pc, #420]	; (8015d78 <Build_Ext+0x1b8>)
 8015bd4:	60bb      	str	r3, [r7, #8]
  short  Vo;

  Posi_2F1 = List[EXT_POSI].Val -  Data[1] - List[V0_POSI].Val;
 8015bd6:	4b69      	ldr	r3, [pc, #420]	; (8015d7c <Build_Ext+0x1bc>)
 8015bd8:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015bdc:	b29a      	uxth	r2, r3
 8015bde:	4b68      	ldr	r3, [pc, #416]	; (8015d80 <Build_Ext+0x1c0>)
 8015be0:	785b      	ldrb	r3, [r3, #1]
 8015be2:	b29b      	uxth	r3, r3
 8015be4:	1ad3      	subs	r3, r2, r3
 8015be6:	b29a      	uxth	r2, r3
 8015be8:	4b64      	ldr	r3, [pc, #400]	; (8015d7c <Build_Ext+0x1bc>)
 8015bea:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015bee:	b29b      	uxth	r3, r3
 8015bf0:	1ad3      	subs	r3, r2, r3
 8015bf2:	b29b      	uxth	r3, r3
 8015bf4:	b21a      	sxth	r2, r3
 8015bf6:	4b63      	ldr	r3, [pc, #396]	; (8015d84 <Build_Ext+0x1c4>)
 8015bf8:	801a      	strh	r2, [r3, #0]
  Posi_2F2 = List[EXT_POSI].Val;// - Data[2];
 8015bfa:	4b60      	ldr	r3, [pc, #384]	; (8015d7c <Build_Ext+0x1bc>)
 8015bfc:	f9b3 20dc 	ldrsh.w	r2, [r3, #220]	; 0xdc
 8015c00:	4b61      	ldr	r3, [pc, #388]	; (8015d88 <Build_Ext+0x1c8>)
 8015c02:	801a      	strh	r2, [r3, #0]

  switch(Ext)
 8015c04:	797b      	ldrb	r3, [r7, #5]
 8015c06:	2b05      	cmp	r3, #5
 8015c08:	f200 809c 	bhi.w	8015d44 <Build_Ext+0x184>
 8015c0c:	a201      	add	r2, pc, #4	; (adr r2, 8015c14 <Build_Ext+0x54>)
 8015c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c12:	bf00      	nop
 8015c14:	08015c2d 	.word	0x08015c2d
 8015c18:	08015c53 	.word	0x08015c53
 8015c1c:	08015c79 	.word	0x08015c79
 8015c20:	08015ca3 	.word	0x08015ca3
 8015c24:	08015ce3 	.word	0x08015ce3
 8015c28:	08015d23 	.word	0x08015d23
  {
  case 0: // D
    Vo = Data[x+10]-Data[1]+List[EXT_POSI].Val; break;
 8015c2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015c30:	330a      	adds	r3, #10
 8015c32:	4a53      	ldr	r2, [pc, #332]	; (8015d80 <Build_Ext+0x1c0>)
 8015c34:	5cd3      	ldrb	r3, [r2, r3]
 8015c36:	b29a      	uxth	r2, r3
 8015c38:	4b51      	ldr	r3, [pc, #324]	; (8015d80 <Build_Ext+0x1c0>)
 8015c3a:	785b      	ldrb	r3, [r3, #1]
 8015c3c:	b29b      	uxth	r3, r3
 8015c3e:	1ad3      	subs	r3, r2, r3
 8015c40:	b29a      	uxth	r2, r3
 8015c42:	4b4e      	ldr	r3, [pc, #312]	; (8015d7c <Build_Ext+0x1bc>)
 8015c44:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015c48:	b29b      	uxth	r3, r3
 8015c4a:	4413      	add	r3, r2
 8015c4c:	b29b      	uxth	r3, r3
 8015c4e:	81fb      	strh	r3, [r7, #14]
 8015c50:	e078      	b.n	8015d44 <Build_Ext+0x184>
  case 1: // -D
    Vo = List[EXT_POSI].Val+Data[1]-Data[x+10]; break;
 8015c52:	4b4a      	ldr	r3, [pc, #296]	; (8015d7c <Build_Ext+0x1bc>)
 8015c54:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015c58:	b29a      	uxth	r2, r3
 8015c5a:	4b49      	ldr	r3, [pc, #292]	; (8015d80 <Build_Ext+0x1c0>)
 8015c5c:	785b      	ldrb	r3, [r3, #1]
 8015c5e:	b29b      	uxth	r3, r3
 8015c60:	4413      	add	r3, r2
 8015c62:	b29a      	uxth	r2, r3
 8015c64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015c68:	330a      	adds	r3, #10
 8015c6a:	4945      	ldr	r1, [pc, #276]	; (8015d80 <Build_Ext+0x1c0>)
 8015c6c:	5ccb      	ldrb	r3, [r1, r3]
 8015c6e:	b29b      	uxth	r3, r3
 8015c70:	1ad3      	subs	r3, r2, r3
 8015c72:	b29b      	uxth	r3, r3
 8015c74:	81fb      	strh	r3, [r7, #14]
 8015c76:	e065      	b.n	8015d44 <Build_Ext+0x184>
  case 2: // Inp+D
    Vo = Data[x+10]+ WaveBuf[x]+Posi_2F1; break;
 8015c78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015c7c:	330a      	adds	r3, #10
 8015c7e:	4a40      	ldr	r2, [pc, #256]	; (8015d80 <Build_Ext+0x1c0>)
 8015c80:	5cd3      	ldrb	r3, [r2, r3]
 8015c82:	b29a      	uxth	r2, r3
 8015c84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015c88:	4940      	ldr	r1, [pc, #256]	; (8015d8c <Build_Ext+0x1cc>)
 8015c8a:	5ccb      	ldrb	r3, [r1, r3]
 8015c8c:	b29b      	uxth	r3, r3
 8015c8e:	4413      	add	r3, r2
 8015c90:	b29a      	uxth	r2, r3
 8015c92:	4b3c      	ldr	r3, [pc, #240]	; (8015d84 <Build_Ext+0x1c4>)
 8015c94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015c98:	b29b      	uxth	r3, r3
 8015c9a:	4413      	add	r3, r2
 8015c9c:	b29b      	uxth	r3, r3
 8015c9e:	81fb      	strh	r3, [r7, #14]
 8015ca0:	e050      	b.n	8015d44 <Build_Ext+0x184>
  case 3: // D-Inp
    Vo = (Data[x+10]-Data[1])- (WaveBuf[x]-List[V0_POSI].Val)+ List[EXT_POSI].Val; break;
 8015ca2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015ca6:	330a      	adds	r3, #10
 8015ca8:	4a35      	ldr	r2, [pc, #212]	; (8015d80 <Build_Ext+0x1c0>)
 8015caa:	5cd3      	ldrb	r3, [r2, r3]
 8015cac:	b29a      	uxth	r2, r3
 8015cae:	4b34      	ldr	r3, [pc, #208]	; (8015d80 <Build_Ext+0x1c0>)
 8015cb0:	785b      	ldrb	r3, [r3, #1]
 8015cb2:	b29b      	uxth	r3, r3
 8015cb4:	1ad3      	subs	r3, r2, r3
 8015cb6:	b29a      	uxth	r2, r3
 8015cb8:	4b30      	ldr	r3, [pc, #192]	; (8015d7c <Build_Ext+0x1bc>)
 8015cba:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015cbe:	b299      	uxth	r1, r3
 8015cc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015cc4:	4831      	ldr	r0, [pc, #196]	; (8015d8c <Build_Ext+0x1cc>)
 8015cc6:	5cc3      	ldrb	r3, [r0, r3]
 8015cc8:	b29b      	uxth	r3, r3
 8015cca:	1acb      	subs	r3, r1, r3
 8015ccc:	b29b      	uxth	r3, r3
 8015cce:	4413      	add	r3, r2
 8015cd0:	b29a      	uxth	r2, r3
 8015cd2:	4b2a      	ldr	r3, [pc, #168]	; (8015d7c <Build_Ext+0x1bc>)
 8015cd4:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015cd8:	b29b      	uxth	r3, r3
 8015cda:	4413      	add	r3, r2
 8015cdc:	b29b      	uxth	r3, r3
 8015cde:	81fb      	strh	r3, [r7, #14]
 8015ce0:	e030      	b.n	8015d44 <Build_Ext+0x184>
  case 4: // Inp-D
    Vo = (WaveBuf[x]-List[V0_POSI].Val)-(Data[x+10]-Data[1]) + List[EXT_POSI].Val; break;
 8015ce2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015ce6:	4a29      	ldr	r2, [pc, #164]	; (8015d8c <Build_Ext+0x1cc>)
 8015ce8:	5cd3      	ldrb	r3, [r2, r3]
 8015cea:	b29a      	uxth	r2, r3
 8015cec:	4b23      	ldr	r3, [pc, #140]	; (8015d7c <Build_Ext+0x1bc>)
 8015cee:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015cf2:	b29b      	uxth	r3, r3
 8015cf4:	1ad3      	subs	r3, r2, r3
 8015cf6:	b29a      	uxth	r2, r3
 8015cf8:	4b21      	ldr	r3, [pc, #132]	; (8015d80 <Build_Ext+0x1c0>)
 8015cfa:	785b      	ldrb	r3, [r3, #1]
 8015cfc:	b299      	uxth	r1, r3
 8015cfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015d02:	330a      	adds	r3, #10
 8015d04:	481e      	ldr	r0, [pc, #120]	; (8015d80 <Build_Ext+0x1c0>)
 8015d06:	5cc3      	ldrb	r3, [r0, r3]
 8015d08:	b29b      	uxth	r3, r3
 8015d0a:	1acb      	subs	r3, r1, r3
 8015d0c:	b29b      	uxth	r3, r3
 8015d0e:	4413      	add	r3, r2
 8015d10:	b29a      	uxth	r2, r3
 8015d12:	4b1a      	ldr	r3, [pc, #104]	; (8015d7c <Build_Ext+0x1bc>)
 8015d14:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015d18:	b29b      	uxth	r3, r3
 8015d1a:	4413      	add	r3, r2
 8015d1c:	b29b      	uxth	r3, r3
 8015d1e:	81fb      	strh	r3, [r7, #14]
 8015d20:	e010      	b.n	8015d44 <Build_Ext+0x184>
  case 5: // -Inp
    Vo = Yp+List[EXT_POSI].Val - WaveBuf[x]; break;
 8015d22:	793b      	ldrb	r3, [r7, #4]
 8015d24:	b29a      	uxth	r2, r3
 8015d26:	4b15      	ldr	r3, [pc, #84]	; (8015d7c <Build_Ext+0x1bc>)
 8015d28:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015d2c:	b29b      	uxth	r3, r3
 8015d2e:	4413      	add	r3, r2
 8015d30:	b29a      	uxth	r2, r3
 8015d32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015d36:	4915      	ldr	r1, [pc, #84]	; (8015d8c <Build_Ext+0x1cc>)
 8015d38:	5ccb      	ldrb	r3, [r1, r3]
 8015d3a:	b29b      	uxth	r3, r3
 8015d3c:	1ad3      	subs	r3, r2, r3
 8015d3e:	b29b      	uxth	r3, r3
 8015d40:	81fb      	strh	r3, [r7, #14]
 8015d42:	bf00      	nop
  }
  if(Vo > 199) Vo = 202;
 8015d44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015d48:	2bc7      	cmp	r3, #199	; 0xc7
 8015d4a:	dd01      	ble.n	8015d50 <Build_Ext+0x190>
 8015d4c:	23ca      	movs	r3, #202	; 0xca
 8015d4e:	81fb      	strh	r3, [r7, #14]
  if(Vo <   3) Vo = 1;                     // �����޷�
 8015d50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015d54:	2b02      	cmp	r3, #2
 8015d56:	dc01      	bgt.n	8015d5c <Build_Ext+0x19c>
 8015d58:	2301      	movs	r3, #1
 8015d5a:	81fb      	strh	r3, [r7, #14]
  Buf[x]= Vo;
 8015d5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015d60:	68ba      	ldr	r2, [r7, #8]
 8015d62:	4413      	add	r3, r2
 8015d64:	89fa      	ldrh	r2, [r7, #14]
 8015d66:	b2d2      	uxtb	r2, r2
 8015d68:	701a      	strb	r2, [r3, #0]
}
 8015d6a:	bf00      	nop
 8015d6c:	3714      	adds	r7, #20
 8015d6e:	46bd      	mov	sp, r7
 8015d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d74:	4770      	bx	lr
 8015d76:	bf00      	nop
 8015d78:	20000d3c 	.word	0x20000d3c
 8015d7c:	2000029c 	.word	0x2000029c
 8015d80:	2000000c 	.word	0x2000000c
 8015d84:	20002854 	.word	0x20002854
 8015d88:	2000687c 	.word	0x2000687c
 8015d8c:	20000c10 	.word	0x20000c10

08015d90 <Auto_Fit>:

void Auto_Fit(void)
{
 8015d90:	b590      	push	{r4, r7, lr}
 8015d92:	b083      	sub	sp, #12
 8015d94:	af00      	add	r7, sp, #0
  char i,j,k=0;
 8015d96:	2300      	movs	r3, #0
 8015d98:	717b      	strb	r3, [r7, #5]
  short Tmp,Tmp1;

  if(Status != STOP){
 8015d9a:	4b38      	ldr	r3, [pc, #224]	; (8015e7c <Auto_Fit+0xec>)
 8015d9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015da0:	2b01      	cmp	r3, #1
 8015da2:	f000 83de 	beq.w	8016562 <Auto_Fit+0x7d2>
    //======��ѹ���Զ�ѡ��==============
    for(i=0;i<9;i++){
 8015da6:	2300      	movs	r3, #0
 8015da8:	71fb      	strb	r3, [r7, #7]
 8015daa:	e098      	b.n	8015ede <Auto_Fit+0x14e>
      //******Aͨ��***********
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015dac:	4b34      	ldr	r3, [pc, #208]	; (8015e80 <Auto_Fit+0xf0>)
 8015dae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015db2:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015db6:	4a33      	ldr	r2, [pc, #204]	; (8015e84 <Auto_Fit+0xf4>)
 8015db8:	6811      	ldr	r1, [r2, #0]
 8015dba:	4a33      	ldr	r2, [pc, #204]	; (8015e88 <Auto_Fit+0xf8>)
 8015dbc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015dc0:	4610      	mov	r0, r2
 8015dc2:	4a32      	ldr	r2, [pc, #200]	; (8015e8c <Auto_Fit+0xfc>)
 8015dc4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015dc8:	2a00      	cmp	r2, #0
 8015dca:	bf14      	ite	ne
 8015dcc:	2201      	movne	r2, #1
 8015dce:	2200      	moveq	r2, #0
 8015dd0:	b2d2      	uxtb	r2, r2
 8015dd2:	4402      	add	r2, r0
 8015dd4:	0052      	lsls	r2, r2, #1
 8015dd6:	440a      	add	r2, r1
 8015dd8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015ddc:	0092      	lsls	r2, r2, #2
 8015dde:	492c      	ldr	r1, [pc, #176]	; (8015e90 <Auto_Fit+0x100>)
 8015de0:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015de4:	4608      	mov	r0, r1
 8015de6:	492b      	ldr	r1, [pc, #172]	; (8015e94 <Auto_Fit+0x104>)
 8015de8:	5c09      	ldrb	r1, [r1, r0]
 8015dea:	fb92 f2f1 	sdiv	r2, r2, r1
 8015dee:	fb02 f303 	mul.w	r3, r2, r3
 8015df2:	131b      	asrs	r3, r3, #12
           - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val);
 8015df4:	b29a      	uxth	r2, r3
 8015df6:	4b28      	ldr	r3, [pc, #160]	; (8015e98 <Auto_Fit+0x108>)
 8015df8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015dfc:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015e00:	4920      	ldr	r1, [pc, #128]	; (8015e84 <Auto_Fit+0xf4>)
 8015e02:	6808      	ldr	r0, [r1, #0]
 8015e04:	4920      	ldr	r1, [pc, #128]	; (8015e88 <Auto_Fit+0xf8>)
 8015e06:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015e0a:	460c      	mov	r4, r1
 8015e0c:	491f      	ldr	r1, [pc, #124]	; (8015e8c <Auto_Fit+0xfc>)
 8015e0e:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015e12:	2900      	cmp	r1, #0
 8015e14:	bf14      	ite	ne
 8015e16:	2101      	movne	r1, #1
 8015e18:	2100      	moveq	r1, #0
 8015e1a:	b2c9      	uxtb	r1, r1
 8015e1c:	4421      	add	r1, r4
 8015e1e:	0049      	lsls	r1, r1, #1
 8015e20:	4401      	add	r1, r0
 8015e22:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015e26:	0089      	lsls	r1, r1, #2
 8015e28:	4819      	ldr	r0, [pc, #100]	; (8015e90 <Auto_Fit+0x100>)
 8015e2a:	f9b0 0000 	ldrsh.w	r0, [r0]
 8015e2e:	4604      	mov	r4, r0
 8015e30:	4818      	ldr	r0, [pc, #96]	; (8015e94 <Auto_Fit+0x104>)
 8015e32:	5d00      	ldrb	r0, [r0, r4]
 8015e34:	fb91 f1f0 	sdiv	r1, r1, r0
 8015e38:	fb01 f303 	mul.w	r3, r1, r3
 8015e3c:	131b      	asrs	r3, r3, #12
 8015e3e:	b29b      	uxth	r3, r3
 8015e40:	1ad3      	subs	r3, r2, r3
 8015e42:	b29b      	uxth	r3, r3
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015e44:	803b      	strh	r3, [r7, #0]
      if((Tmp1 < 40)&&(List[Y_RANGES].Val > 2)){       //40
 8015e46:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015e4a:	2b27      	cmp	r3, #39	; 0x27
 8015e4c:	dc28      	bgt.n	8015ea0 <Auto_Fit+0x110>
 8015e4e:	4b13      	ldr	r3, [pc, #76]	; (8015e9c <Auto_Fit+0x10c>)
 8015e50:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015e54:	2b02      	cmp	r3, #2
 8015e56:	dd23      	ble.n	8015ea0 <Auto_Fit+0x110>
        List[Y_RANGES].Val--;
 8015e58:	4b10      	ldr	r3, [pc, #64]	; (8015e9c <Auto_Fit+0x10c>)
 8015e5a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015e5e:	b29b      	uxth	r3, r3
 8015e60:	3b01      	subs	r3, #1
 8015e62:	b29b      	uxth	r3, r3
 8015e64:	b21a      	sxth	r2, r3
 8015e66:	4b0d      	ldr	r3, [pc, #52]	; (8015e9c <Auto_Fit+0x10c>)
 8015e68:	809a      	strh	r2, [r3, #4]
        List[V0_POSI].Val=100;
 8015e6a:	4b0c      	ldr	r3, [pc, #48]	; (8015e9c <Auto_Fit+0x10c>)
 8015e6c:	2264      	movs	r2, #100	; 0x64
 8015e6e:	839a      	strh	r2, [r3, #28]
        WaveProcess();
 8015e70:	f7ff faac 	bl	80153cc <WaveProcess>
        Update_Proc_All();
 8015e74:	f7fe ff32 	bl	8014cdc <Update_Proc_All>
 8015e78:	e02b      	b.n	8015ed2 <Auto_Fit+0x142>
 8015e7a:	bf00      	nop
 8015e7c:	200007a8 	.word	0x200007a8
 8015e80:	2000285e 	.word	0x2000285e
 8015e84:	20000580 	.word	0x20000580
 8015e88:	2000688e 	.word	0x2000688e
 8015e8c:	2000286a 	.word	0x2000286a
 8015e90:	20002852 	.word	0x20002852
 8015e94:	20000564 	.word	0x20000564
 8015e98:	20002870 	.word	0x20002870
 8015e9c:	2000029c 	.word	0x2000029c
      }
      else if((Tmp1 > 110)&&(List[Y_RANGES].Val < 9)){ //110
 8015ea0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015ea4:	2b6e      	cmp	r3, #110	; 0x6e
 8015ea6:	dd14      	ble.n	8015ed2 <Auto_Fit+0x142>
 8015ea8:	4bbe      	ldr	r3, [pc, #760]	; (80161a4 <Auto_Fit+0x414>)
 8015eaa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015eae:	2b08      	cmp	r3, #8
 8015eb0:	dc0f      	bgt.n	8015ed2 <Auto_Fit+0x142>
        List[Y_RANGES].Val++;
 8015eb2:	4bbc      	ldr	r3, [pc, #752]	; (80161a4 <Auto_Fit+0x414>)
 8015eb4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015eb8:	b29b      	uxth	r3, r3
 8015eba:	3301      	adds	r3, #1
 8015ebc:	b29b      	uxth	r3, r3
 8015ebe:	b21a      	sxth	r2, r3
 8015ec0:	4bb8      	ldr	r3, [pc, #736]	; (80161a4 <Auto_Fit+0x414>)
 8015ec2:	809a      	strh	r2, [r3, #4]
        List[V0_POSI].Val=100;
 8015ec4:	4bb7      	ldr	r3, [pc, #732]	; (80161a4 <Auto_Fit+0x414>)
 8015ec6:	2264      	movs	r2, #100	; 0x64
 8015ec8:	839a      	strh	r2, [r3, #28]
        WaveProcess();
 8015eca:	f7ff fa7f 	bl	80153cc <WaveProcess>
        Update_Proc_All();
 8015ece:	f7fe ff05 	bl	8014cdc <Update_Proc_All>
      }
      HAL_Delay(50);
 8015ed2:	2032      	movs	r0, #50	; 0x32
 8015ed4:	f002 fc5a 	bl	801878c <HAL_Delay>
    for(i=0;i<9;i++){
 8015ed8:	79fb      	ldrb	r3, [r7, #7]
 8015eda:	3301      	adds	r3, #1
 8015edc:	71fb      	strb	r3, [r7, #7]
 8015ede:	79fb      	ldrb	r3, [r7, #7]
 8015ee0:	2b08      	cmp	r3, #8
 8015ee2:	f67f af63 	bls.w	8015dac <Auto_Fit+0x1c>
    //============ʶ�𴥷�Դ======================


    //======�������Զ�ѡ��==============
    //if(!List[TRI_Ch]){//******Aͨ��***********
      Tmp = (((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015ee6:	4bb0      	ldr	r3, [pc, #704]	; (80161a8 <Auto_Fit+0x418>)
 8015ee8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015eec:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015ef0:	4aae      	ldr	r2, [pc, #696]	; (80161ac <Auto_Fit+0x41c>)
 8015ef2:	6811      	ldr	r1, [r2, #0]
 8015ef4:	4aae      	ldr	r2, [pc, #696]	; (80161b0 <Auto_Fit+0x420>)
 8015ef6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015efa:	4610      	mov	r0, r2
 8015efc:	4aad      	ldr	r2, [pc, #692]	; (80161b4 <Auto_Fit+0x424>)
 8015efe:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015f02:	2a00      	cmp	r2, #0
 8015f04:	bf14      	ite	ne
 8015f06:	2201      	movne	r2, #1
 8015f08:	2200      	moveq	r2, #0
 8015f0a:	b2d2      	uxtb	r2, r2
 8015f0c:	4402      	add	r2, r0
 8015f0e:	0052      	lsls	r2, r2, #1
 8015f10:	440a      	add	r2, r1
 8015f12:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015f16:	0092      	lsls	r2, r2, #2
 8015f18:	49a7      	ldr	r1, [pc, #668]	; (80161b8 <Auto_Fit+0x428>)
 8015f1a:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015f1e:	4608      	mov	r0, r1
 8015f20:	49a6      	ldr	r1, [pc, #664]	; (80161bc <Auto_Fit+0x42c>)
 8015f22:	5c09      	ldrb	r1, [r1, r0]
 8015f24:	fb92 f2f1 	sdiv	r2, r2, r1
 8015f28:	fb02 f303 	mul.w	r3, r2, r3
 8015f2c:	131a      	asrs	r2, r3, #12
           - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val))/4;
 8015f2e:	4ba4      	ldr	r3, [pc, #656]	; (80161c0 <Auto_Fit+0x430>)
 8015f30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015f34:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015f38:	499c      	ldr	r1, [pc, #624]	; (80161ac <Auto_Fit+0x41c>)
 8015f3a:	6808      	ldr	r0, [r1, #0]
 8015f3c:	499c      	ldr	r1, [pc, #624]	; (80161b0 <Auto_Fit+0x420>)
 8015f3e:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015f42:	460c      	mov	r4, r1
 8015f44:	499b      	ldr	r1, [pc, #620]	; (80161b4 <Auto_Fit+0x424>)
 8015f46:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015f4a:	2900      	cmp	r1, #0
 8015f4c:	bf14      	ite	ne
 8015f4e:	2101      	movne	r1, #1
 8015f50:	2100      	moveq	r1, #0
 8015f52:	b2c9      	uxtb	r1, r1
 8015f54:	4421      	add	r1, r4
 8015f56:	0049      	lsls	r1, r1, #1
 8015f58:	4401      	add	r1, r0
 8015f5a:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015f5e:	0089      	lsls	r1, r1, #2
 8015f60:	4895      	ldr	r0, [pc, #596]	; (80161b8 <Auto_Fit+0x428>)
 8015f62:	f9b0 0000 	ldrsh.w	r0, [r0]
 8015f66:	4604      	mov	r4, r0
 8015f68:	4894      	ldr	r0, [pc, #592]	; (80161bc <Auto_Fit+0x42c>)
 8015f6a:	5d00      	ldrb	r0, [r0, r4]
 8015f6c:	fb91 f1f0 	sdiv	r1, r1, r0
 8015f70:	fb01 f303 	mul.w	r3, r1, r3
 8015f74:	131b      	asrs	r3, r3, #12
 8015f76:	1ad3      	subs	r3, r2, r3
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	da00      	bge.n	8015f7e <Auto_Fit+0x1ee>
 8015f7c:	3303      	adds	r3, #3
 8015f7e:	109b      	asrs	r3, r3, #2
      Tmp = (((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015f80:	807b      	strh	r3, [r7, #2]
      if((List[THRESHOLD].Val > (((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)  + Tmp))||
 8015f82:	4b88      	ldr	r3, [pc, #544]	; (80161a4 <Auto_Fit+0x414>)
 8015f84:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8015f88:	4618      	mov	r0, r3
 8015f8a:	4b8e      	ldr	r3, [pc, #568]	; (80161c4 <Auto_Fit+0x434>)
 8015f8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015f90:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015f94:	4a85      	ldr	r2, [pc, #532]	; (80161ac <Auto_Fit+0x41c>)
 8015f96:	6811      	ldr	r1, [r2, #0]
 8015f98:	4a85      	ldr	r2, [pc, #532]	; (80161b0 <Auto_Fit+0x420>)
 8015f9a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015f9e:	4614      	mov	r4, r2
 8015fa0:	4a84      	ldr	r2, [pc, #528]	; (80161b4 <Auto_Fit+0x424>)
 8015fa2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015fa6:	2a00      	cmp	r2, #0
 8015fa8:	bf14      	ite	ne
 8015faa:	2201      	movne	r2, #1
 8015fac:	2200      	moveq	r2, #0
 8015fae:	b2d2      	uxtb	r2, r2
 8015fb0:	4422      	add	r2, r4
 8015fb2:	0052      	lsls	r2, r2, #1
 8015fb4:	440a      	add	r2, r1
 8015fb6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015fba:	0092      	lsls	r2, r2, #2
 8015fbc:	497e      	ldr	r1, [pc, #504]	; (80161b8 <Auto_Fit+0x428>)
 8015fbe:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015fc2:	460c      	mov	r4, r1
 8015fc4:	497d      	ldr	r1, [pc, #500]	; (80161bc <Auto_Fit+0x42c>)
 8015fc6:	5d09      	ldrb	r1, [r1, r4]
 8015fc8:	fb92 f2f1 	sdiv	r2, r2, r1
 8015fcc:	fb02 f303 	mul.w	r3, r2, r3
 8015fd0:	131b      	asrs	r3, r3, #12
 8015fd2:	3364      	adds	r3, #100	; 0x64
 8015fd4:	4a73      	ldr	r2, [pc, #460]	; (80161a4 <Auto_Fit+0x414>)
 8015fd6:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015fda:	1a9a      	subs	r2, r3, r2
 8015fdc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015fe0:	4413      	add	r3, r2
 8015fe2:	4298      	cmp	r0, r3
 8015fe4:	dc32      	bgt.n	801604c <Auto_Fit+0x2bc>
         (List[THRESHOLD].Val < (((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)  - Tmp))){
 8015fe6:	4b6f      	ldr	r3, [pc, #444]	; (80161a4 <Auto_Fit+0x414>)
 8015fe8:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8015fec:	4618      	mov	r0, r3
 8015fee:	4b75      	ldr	r3, [pc, #468]	; (80161c4 <Auto_Fit+0x434>)
 8015ff0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015ff4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015ff8:	4a6c      	ldr	r2, [pc, #432]	; (80161ac <Auto_Fit+0x41c>)
 8015ffa:	6811      	ldr	r1, [r2, #0]
 8015ffc:	4a6c      	ldr	r2, [pc, #432]	; (80161b0 <Auto_Fit+0x420>)
 8015ffe:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016002:	4614      	mov	r4, r2
 8016004:	4a6b      	ldr	r2, [pc, #428]	; (80161b4 <Auto_Fit+0x424>)
 8016006:	f9b2 2000 	ldrsh.w	r2, [r2]
 801600a:	2a00      	cmp	r2, #0
 801600c:	bf14      	ite	ne
 801600e:	2201      	movne	r2, #1
 8016010:	2200      	moveq	r2, #0
 8016012:	b2d2      	uxtb	r2, r2
 8016014:	4422      	add	r2, r4
 8016016:	0052      	lsls	r2, r2, #1
 8016018:	440a      	add	r2, r1
 801601a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801601e:	0092      	lsls	r2, r2, #2
 8016020:	4965      	ldr	r1, [pc, #404]	; (80161b8 <Auto_Fit+0x428>)
 8016022:	f9b1 1000 	ldrsh.w	r1, [r1]
 8016026:	460c      	mov	r4, r1
 8016028:	4964      	ldr	r1, [pc, #400]	; (80161bc <Auto_Fit+0x42c>)
 801602a:	5d09      	ldrb	r1, [r1, r4]
 801602c:	fb92 f2f1 	sdiv	r2, r2, r1
 8016030:	fb02 f303 	mul.w	r3, r2, r3
 8016034:	131b      	asrs	r3, r3, #12
 8016036:	3364      	adds	r3, #100	; 0x64
 8016038:	4a5a      	ldr	r2, [pc, #360]	; (80161a4 <Auto_Fit+0x414>)
 801603a:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 801603e:	1a9a      	subs	r2, r3, r2
 8016040:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016044:	1ad3      	subs	r3, r2, r3
      if((List[THRESHOLD].Val > (((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)  + Tmp))||
 8016046:	4298      	cmp	r0, r3
 8016048:	f280 808e 	bge.w	8016168 <Auto_Fit+0x3d8>
           if(abs(((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)+15)<195)
 801604c:	4b5d      	ldr	r3, [pc, #372]	; (80161c4 <Auto_Fit+0x434>)
 801604e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016052:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8016056:	4a55      	ldr	r2, [pc, #340]	; (80161ac <Auto_Fit+0x41c>)
 8016058:	6811      	ldr	r1, [r2, #0]
 801605a:	4a55      	ldr	r2, [pc, #340]	; (80161b0 <Auto_Fit+0x420>)
 801605c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016060:	4610      	mov	r0, r2
 8016062:	4a54      	ldr	r2, [pc, #336]	; (80161b4 <Auto_Fit+0x424>)
 8016064:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016068:	2a00      	cmp	r2, #0
 801606a:	bf14      	ite	ne
 801606c:	2201      	movne	r2, #1
 801606e:	2200      	moveq	r2, #0
 8016070:	b2d2      	uxtb	r2, r2
 8016072:	4402      	add	r2, r0
 8016074:	0052      	lsls	r2, r2, #1
 8016076:	440a      	add	r2, r1
 8016078:	f9b2 2000 	ldrsh.w	r2, [r2]
 801607c:	0092      	lsls	r2, r2, #2
 801607e:	494e      	ldr	r1, [pc, #312]	; (80161b8 <Auto_Fit+0x428>)
 8016080:	f9b1 1000 	ldrsh.w	r1, [r1]
 8016084:	4608      	mov	r0, r1
 8016086:	494d      	ldr	r1, [pc, #308]	; (80161bc <Auto_Fit+0x42c>)
 8016088:	5c09      	ldrb	r1, [r1, r0]
 801608a:	fb92 f2f1 	sdiv	r2, r2, r1
 801608e:	fb02 f303 	mul.w	r3, r2, r3
 8016092:	131b      	asrs	r3, r3, #12
 8016094:	3364      	adds	r3, #100	; 0x64
 8016096:	4a43      	ldr	r2, [pc, #268]	; (80161a4 <Auto_Fit+0x414>)
 8016098:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 801609c:	1a9b      	subs	r3, r3, r2
 801609e:	330f      	adds	r3, #15
 80160a0:	f113 0fc2 	cmn.w	r3, #194	; 0xc2
 80160a4:	db5c      	blt.n	8016160 <Auto_Fit+0x3d0>
 80160a6:	4b47      	ldr	r3, [pc, #284]	; (80161c4 <Auto_Fit+0x434>)
 80160a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80160ac:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80160b0:	4a3e      	ldr	r2, [pc, #248]	; (80161ac <Auto_Fit+0x41c>)
 80160b2:	6811      	ldr	r1, [r2, #0]
 80160b4:	4a3e      	ldr	r2, [pc, #248]	; (80161b0 <Auto_Fit+0x420>)
 80160b6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80160ba:	4610      	mov	r0, r2
 80160bc:	4a3d      	ldr	r2, [pc, #244]	; (80161b4 <Auto_Fit+0x424>)
 80160be:	f9b2 2000 	ldrsh.w	r2, [r2]
 80160c2:	2a00      	cmp	r2, #0
 80160c4:	bf14      	ite	ne
 80160c6:	2201      	movne	r2, #1
 80160c8:	2200      	moveq	r2, #0
 80160ca:	b2d2      	uxtb	r2, r2
 80160cc:	4402      	add	r2, r0
 80160ce:	0052      	lsls	r2, r2, #1
 80160d0:	440a      	add	r2, r1
 80160d2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80160d6:	0092      	lsls	r2, r2, #2
 80160d8:	4937      	ldr	r1, [pc, #220]	; (80161b8 <Auto_Fit+0x428>)
 80160da:	f9b1 1000 	ldrsh.w	r1, [r1]
 80160de:	4608      	mov	r0, r1
 80160e0:	4936      	ldr	r1, [pc, #216]	; (80161bc <Auto_Fit+0x42c>)
 80160e2:	5c09      	ldrb	r1, [r1, r0]
 80160e4:	fb92 f2f1 	sdiv	r2, r2, r1
 80160e8:	fb02 f303 	mul.w	r3, r2, r3
 80160ec:	131b      	asrs	r3, r3, #12
 80160ee:	3364      	adds	r3, #100	; 0x64
 80160f0:	4a2c      	ldr	r2, [pc, #176]	; (80161a4 <Auto_Fit+0x414>)
 80160f2:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 80160f6:	1a9b      	subs	r3, r3, r2
 80160f8:	330f      	adds	r3, #15
 80160fa:	2bc2      	cmp	r3, #194	; 0xc2
 80160fc:	dc30      	bgt.n	8016160 <Auto_Fit+0x3d0>
             List[THRESHOLD].Val = ((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)+15 ;
 80160fe:	4b31      	ldr	r3, [pc, #196]	; (80161c4 <Auto_Fit+0x434>)
 8016100:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016104:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8016108:	4a28      	ldr	r2, [pc, #160]	; (80161ac <Auto_Fit+0x41c>)
 801610a:	6811      	ldr	r1, [r2, #0]
 801610c:	4a28      	ldr	r2, [pc, #160]	; (80161b0 <Auto_Fit+0x420>)
 801610e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016112:	4610      	mov	r0, r2
 8016114:	4a27      	ldr	r2, [pc, #156]	; (80161b4 <Auto_Fit+0x424>)
 8016116:	f9b2 2000 	ldrsh.w	r2, [r2]
 801611a:	2a00      	cmp	r2, #0
 801611c:	bf14      	ite	ne
 801611e:	2201      	movne	r2, #1
 8016120:	2200      	moveq	r2, #0
 8016122:	b2d2      	uxtb	r2, r2
 8016124:	4402      	add	r2, r0
 8016126:	0052      	lsls	r2, r2, #1
 8016128:	440a      	add	r2, r1
 801612a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801612e:	0092      	lsls	r2, r2, #2
 8016130:	4921      	ldr	r1, [pc, #132]	; (80161b8 <Auto_Fit+0x428>)
 8016132:	f9b1 1000 	ldrsh.w	r1, [r1]
 8016136:	4608      	mov	r0, r1
 8016138:	4920      	ldr	r1, [pc, #128]	; (80161bc <Auto_Fit+0x42c>)
 801613a:	5c09      	ldrb	r1, [r1, r0]
 801613c:	fb92 f2f1 	sdiv	r2, r2, r1
 8016140:	fb02 f303 	mul.w	r3, r2, r3
 8016144:	131b      	asrs	r3, r3, #12
 8016146:	b29a      	uxth	r2, r3
 8016148:	4b16      	ldr	r3, [pc, #88]	; (80161a4 <Auto_Fit+0x414>)
 801614a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801614e:	b29b      	uxth	r3, r3
 8016150:	1ad3      	subs	r3, r2, r3
 8016152:	b29b      	uxth	r3, r3
 8016154:	3373      	adds	r3, #115	; 0x73
 8016156:	b29b      	uxth	r3, r3
 8016158:	b21a      	sxth	r2, r3
 801615a:	4b12      	ldr	r3, [pc, #72]	; (80161a4 <Auto_Fit+0x414>)
 801615c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
           WaveProcess();
 8016160:	f7ff f934 	bl	80153cc <WaveProcess>
           Update_Proc_All();
 8016164:	f7fe fdba 	bl	8014cdc <Update_Proc_All>
         }

      ParamTab[VTx2]= ParamTab[P1x2] + 2*List[THRESHOLD].Val;
 8016168:	4b17      	ldr	r3, [pc, #92]	; (80161c8 <Auto_Fit+0x438>)
 801616a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801616e:	b29a      	uxth	r2, r3
 8016170:	4b0c      	ldr	r3, [pc, #48]	; (80161a4 <Auto_Fit+0x414>)
 8016172:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8016176:	b29b      	uxth	r3, r3
 8016178:	005b      	lsls	r3, r3, #1
 801617a:	b29b      	uxth	r3, r3
 801617c:	4413      	add	r3, r2
 801617e:	b29b      	uxth	r3, r3
 8016180:	b21a      	sxth	r2, r3
 8016182:	4b11      	ldr	r3, [pc, #68]	; (80161c8 <Auto_Fit+0x438>)
 8016184:	839a      	strh	r2, [r3, #28]
      List[THRESHOLD].Flg |= UPD;
 8016186:	4b07      	ldr	r3, [pc, #28]	; (80161a4 <Auto_Fit+0x414>)
 8016188:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 801618c:	f043 0320 	orr.w	r3, r3, #32
 8016190:	b2da      	uxtb	r2, r3
 8016192:	4b04      	ldr	r3, [pc, #16]	; (80161a4 <Auto_Fit+0x414>)
 8016194:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      Update_Title();
 8016198:	f7fc fa9c 	bl	80126d4 <Update_Title>

    //===========��ƽʱ��������==================
    HAL_Delay(100);
 801619c:	2064      	movs	r0, #100	; 0x64
 801619e:	f002 faf5 	bl	801878c <HAL_Delay>
 80161a2:	e013      	b.n	80161cc <Auto_Fit+0x43c>
 80161a4:	2000029c 	.word	0x2000029c
 80161a8:	2000285e 	.word	0x2000285e
 80161ac:	20000580 	.word	0x20000580
 80161b0:	2000688e 	.word	0x2000688e
 80161b4:	2000286a 	.word	0x2000286a
 80161b8:	20002852 	.word	0x20002852
 80161bc:	20000564 	.word	0x20000564
 80161c0:	20002870 	.word	0x20002870
 80161c4:	20002872 	.word	0x20002872
 80161c8:	20000144 	.word	0x20000144

        if(((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)>10){
 80161cc:	4ba3      	ldr	r3, [pc, #652]	; (801645c <Auto_Fit+0x6cc>)
 80161ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80161d2:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80161d6:	4aa2      	ldr	r2, [pc, #648]	; (8016460 <Auto_Fit+0x6d0>)
 80161d8:	6811      	ldr	r1, [r2, #0]
 80161da:	4aa2      	ldr	r2, [pc, #648]	; (8016464 <Auto_Fit+0x6d4>)
 80161dc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80161e0:	4610      	mov	r0, r2
 80161e2:	4aa1      	ldr	r2, [pc, #644]	; (8016468 <Auto_Fit+0x6d8>)
 80161e4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80161e8:	2a00      	cmp	r2, #0
 80161ea:	bf14      	ite	ne
 80161ec:	2201      	movne	r2, #1
 80161ee:	2200      	moveq	r2, #0
 80161f0:	b2d2      	uxtb	r2, r2
 80161f2:	4402      	add	r2, r0
 80161f4:	0052      	lsls	r2, r2, #1
 80161f6:	440a      	add	r2, r1
 80161f8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80161fc:	0092      	lsls	r2, r2, #2
 80161fe:	499b      	ldr	r1, [pc, #620]	; (801646c <Auto_Fit+0x6dc>)
 8016200:	f9b1 1000 	ldrsh.w	r1, [r1]
 8016204:	4608      	mov	r0, r1
 8016206:	499a      	ldr	r1, [pc, #616]	; (8016470 <Auto_Fit+0x6e0>)
 8016208:	5c09      	ldrb	r1, [r1, r0]
 801620a:	fb92 f2f1 	sdiv	r2, r2, r1
 801620e:	fb02 f303 	mul.w	r3, r2, r3
 8016212:	131b      	asrs	r3, r3, #12
 8016214:	3364      	adds	r3, #100	; 0x64
 8016216:	4a97      	ldr	r2, [pc, #604]	; (8016474 <Auto_Fit+0x6e4>)
 8016218:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 801621c:	1a9b      	subs	r3, r3, r2
 801621e:	2b0a      	cmp	r3, #10
 8016220:	dd76      	ble.n	8016310 <Auto_Fit+0x580>
      WaveProcess();
 8016222:	f7ff f8d3 	bl	80153cc <WaveProcess>
      Update_Proc_All();
 8016226:	f7fe fd59 	bl	8014cdc <Update_Proc_All>
      HAL_Delay(100);
 801622a:	2064      	movs	r0, #100	; 0x64
 801622c:	f002 faae 	bl	801878c <HAL_Delay>
      for(i=0;i<9;i++){
 8016230:	2300      	movs	r3, #0
 8016232:	71fb      	strb	r3, [r7, #7]
 8016234:	e068      	b.n	8016308 <Auto_Fit+0x578>
        WaveProcess();
 8016236:	f7ff f8c9 	bl	80153cc <WaveProcess>
        Tmp1 = (((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val;
 801623a:	4b8f      	ldr	r3, [pc, #572]	; (8016478 <Auto_Fit+0x6e8>)
 801623c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016240:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8016244:	4a86      	ldr	r2, [pc, #536]	; (8016460 <Auto_Fit+0x6d0>)
 8016246:	6811      	ldr	r1, [r2, #0]
 8016248:	4a86      	ldr	r2, [pc, #536]	; (8016464 <Auto_Fit+0x6d4>)
 801624a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801624e:	4610      	mov	r0, r2
 8016250:	4a85      	ldr	r2, [pc, #532]	; (8016468 <Auto_Fit+0x6d8>)
 8016252:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016256:	2a00      	cmp	r2, #0
 8016258:	bf14      	ite	ne
 801625a:	2201      	movne	r2, #1
 801625c:	2200      	moveq	r2, #0
 801625e:	b2d2      	uxtb	r2, r2
 8016260:	4402      	add	r2, r0
 8016262:	0052      	lsls	r2, r2, #1
 8016264:	440a      	add	r2, r1
 8016266:	f9b2 2000 	ldrsh.w	r2, [r2]
 801626a:	0092      	lsls	r2, r2, #2
 801626c:	497f      	ldr	r1, [pc, #508]	; (801646c <Auto_Fit+0x6dc>)
 801626e:	f9b1 1000 	ldrsh.w	r1, [r1]
 8016272:	4608      	mov	r0, r1
 8016274:	497e      	ldr	r1, [pc, #504]	; (8016470 <Auto_Fit+0x6e0>)
 8016276:	5c09      	ldrb	r1, [r1, r0]
 8016278:	fb92 f2f1 	sdiv	r2, r2, r1
 801627c:	fb02 f303 	mul.w	r3, r2, r3
 8016280:	131b      	asrs	r3, r3, #12
 8016282:	b29a      	uxth	r2, r3
 8016284:	4b7b      	ldr	r3, [pc, #492]	; (8016474 <Auto_Fit+0x6e4>)
 8016286:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801628a:	b29b      	uxth	r3, r3
 801628c:	1ad3      	subs	r3, r2, r3
 801628e:	b29b      	uxth	r3, r3
 8016290:	3364      	adds	r3, #100	; 0x64
 8016292:	b29b      	uxth	r3, r3
 8016294:	803b      	strh	r3, [r7, #0]
        if((Tmp1 < 40)&&(List[Y_RANGES].Val > 2)){       //40
 8016296:	f9b7 3000 	ldrsh.w	r3, [r7]
 801629a:	2b27      	cmp	r3, #39	; 0x27
 801629c:	dc15      	bgt.n	80162ca <Auto_Fit+0x53a>
 801629e:	4b75      	ldr	r3, [pc, #468]	; (8016474 <Auto_Fit+0x6e4>)
 80162a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80162a4:	2b02      	cmp	r3, #2
 80162a6:	dd10      	ble.n	80162ca <Auto_Fit+0x53a>
          List[Y_RANGES].Val--;
 80162a8:	4b72      	ldr	r3, [pc, #456]	; (8016474 <Auto_Fit+0x6e4>)
 80162aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80162ae:	b29b      	uxth	r3, r3
 80162b0:	3b01      	subs	r3, #1
 80162b2:	b29b      	uxth	r3, r3
 80162b4:	b21a      	sxth	r2, r3
 80162b6:	4b6f      	ldr	r3, [pc, #444]	; (8016474 <Auto_Fit+0x6e4>)
 80162b8:	809a      	strh	r2, [r3, #4]
          List[V0_POSI].Val=100;
 80162ba:	4b6e      	ldr	r3, [pc, #440]	; (8016474 <Auto_Fit+0x6e4>)
 80162bc:	2264      	movs	r2, #100	; 0x64
 80162be:	839a      	strh	r2, [r3, #28]
          WaveProcess();
 80162c0:	f7ff f884 	bl	80153cc <WaveProcess>
          Update_Proc_All();
 80162c4:	f7fe fd0a 	bl	8014cdc <Update_Proc_All>
 80162c8:	e018      	b.n	80162fc <Auto_Fit+0x56c>
        }
        else if((Tmp1 > 100)&&(List[Y_RANGES].Val < 9)){ //110
 80162ca:	f9b7 3000 	ldrsh.w	r3, [r7]
 80162ce:	2b64      	cmp	r3, #100	; 0x64
 80162d0:	dd14      	ble.n	80162fc <Auto_Fit+0x56c>
 80162d2:	4b68      	ldr	r3, [pc, #416]	; (8016474 <Auto_Fit+0x6e4>)
 80162d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80162d8:	2b08      	cmp	r3, #8
 80162da:	dc0f      	bgt.n	80162fc <Auto_Fit+0x56c>
          List[Y_RANGES].Val++;
 80162dc:	4b65      	ldr	r3, [pc, #404]	; (8016474 <Auto_Fit+0x6e4>)
 80162de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80162e2:	b29b      	uxth	r3, r3
 80162e4:	3301      	adds	r3, #1
 80162e6:	b29b      	uxth	r3, r3
 80162e8:	b21a      	sxth	r2, r3
 80162ea:	4b62      	ldr	r3, [pc, #392]	; (8016474 <Auto_Fit+0x6e4>)
 80162ec:	809a      	strh	r2, [r3, #4]
          List[V0_POSI].Val=100;
 80162ee:	4b61      	ldr	r3, [pc, #388]	; (8016474 <Auto_Fit+0x6e4>)
 80162f0:	2264      	movs	r2, #100	; 0x64
 80162f2:	839a      	strh	r2, [r3, #28]
          WaveProcess();
 80162f4:	f7ff f86a 	bl	80153cc <WaveProcess>
          Update_Proc_All();
 80162f8:	f7fe fcf0 	bl	8014cdc <Update_Proc_All>
        }
        HAL_Delay(50);
 80162fc:	2032      	movs	r0, #50	; 0x32
 80162fe:	f002 fa45 	bl	801878c <HAL_Delay>
      for(i=0;i<9;i++){
 8016302:	79fb      	ldrb	r3, [r7, #7]
 8016304:	3301      	adds	r3, #1
 8016306:	71fb      	strb	r3, [r7, #7]
 8016308:	79fb      	ldrb	r3, [r7, #7]
 801630a:	2b08      	cmp	r3, #8
 801630c:	d993      	bls.n	8016236 <Auto_Fit+0x4a6>
 801630e:	e054      	b.n	80163ba <Auto_Fit+0x62a>
      }
    }
    else if((((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8016310:	4b59      	ldr	r3, [pc, #356]	; (8016478 <Auto_Fit+0x6e8>)
 8016312:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016316:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801631a:	4a51      	ldr	r2, [pc, #324]	; (8016460 <Auto_Fit+0x6d0>)
 801631c:	6811      	ldr	r1, [r2, #0]
 801631e:	4a51      	ldr	r2, [pc, #324]	; (8016464 <Auto_Fit+0x6d4>)
 8016320:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016324:	4610      	mov	r0, r2
 8016326:	4a50      	ldr	r2, [pc, #320]	; (8016468 <Auto_Fit+0x6d8>)
 8016328:	f9b2 2000 	ldrsh.w	r2, [r2]
 801632c:	2a00      	cmp	r2, #0
 801632e:	bf14      	ite	ne
 8016330:	2201      	movne	r2, #1
 8016332:	2200      	moveq	r2, #0
 8016334:	b2d2      	uxtb	r2, r2
 8016336:	4402      	add	r2, r0
 8016338:	0052      	lsls	r2, r2, #1
 801633a:	440a      	add	r2, r1
 801633c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016340:	0092      	lsls	r2, r2, #2
 8016342:	494a      	ldr	r1, [pc, #296]	; (801646c <Auto_Fit+0x6dc>)
 8016344:	f9b1 1000 	ldrsh.w	r1, [r1]
 8016348:	4608      	mov	r0, r1
 801634a:	4949      	ldr	r1, [pc, #292]	; (8016470 <Auto_Fit+0x6e0>)
 801634c:	5c09      	ldrb	r1, [r1, r0]
 801634e:	fb92 f2f1 	sdiv	r2, r2, r1
 8016352:	fb02 f303 	mul.w	r3, r2, r3
 8016356:	131a      	asrs	r2, r3, #12
         - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)) <10){
 8016358:	4b48      	ldr	r3, [pc, #288]	; (801647c <Auto_Fit+0x6ec>)
 801635a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801635e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8016362:	493f      	ldr	r1, [pc, #252]	; (8016460 <Auto_Fit+0x6d0>)
 8016364:	6808      	ldr	r0, [r1, #0]
 8016366:	493f      	ldr	r1, [pc, #252]	; (8016464 <Auto_Fit+0x6d4>)
 8016368:	f9b1 1000 	ldrsh.w	r1, [r1]
 801636c:	460c      	mov	r4, r1
 801636e:	493e      	ldr	r1, [pc, #248]	; (8016468 <Auto_Fit+0x6d8>)
 8016370:	f9b1 1000 	ldrsh.w	r1, [r1]
 8016374:	2900      	cmp	r1, #0
 8016376:	bf14      	ite	ne
 8016378:	2101      	movne	r1, #1
 801637a:	2100      	moveq	r1, #0
 801637c:	b2c9      	uxtb	r1, r1
 801637e:	4421      	add	r1, r4
 8016380:	0049      	lsls	r1, r1, #1
 8016382:	4401      	add	r1, r0
 8016384:	f9b1 1000 	ldrsh.w	r1, [r1]
 8016388:	0089      	lsls	r1, r1, #2
 801638a:	4838      	ldr	r0, [pc, #224]	; (801646c <Auto_Fit+0x6dc>)
 801638c:	f9b0 0000 	ldrsh.w	r0, [r0]
 8016390:	4604      	mov	r4, r0
 8016392:	4837      	ldr	r0, [pc, #220]	; (8016470 <Auto_Fit+0x6e0>)
 8016394:	5d00      	ldrb	r0, [r0, r4]
 8016396:	fb91 f1f0 	sdiv	r1, r1, r0
 801639a:	fb01 f303 	mul.w	r3, r1, r3
 801639e:	131b      	asrs	r3, r3, #12
 80163a0:	1ad3      	subs	r3, r2, r3
    else if((((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 80163a2:	2b09      	cmp	r3, #9
 80163a4:	dc09      	bgt.n	80163ba <Auto_Fit+0x62a>
      //===========���ź�ʱ��ѹ��2V==================
        List[Y_RANGES].Val=7; //2v
 80163a6:	4b33      	ldr	r3, [pc, #204]	; (8016474 <Auto_Fit+0x6e4>)
 80163a8:	2207      	movs	r2, #7
 80163aa:	809a      	strh	r2, [r3, #4]
        WaveProcess();
 80163ac:	f7ff f80e 	bl	80153cc <WaveProcess>
        Update_Proc_All();
 80163b0:	f7fe fc94 	bl	8014cdc <Update_Proc_All>
        HAL_Delay(50);
 80163b4:	2032      	movs	r0, #50	; 0x32
 80163b6:	f002 f9e9 	bl	801878c <HAL_Delay>


    //======ʱ���Զ�ѡ��==============

    //if(!List[TRI_Ch].Val){//******Aͨ��***********
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 80163ba:	4b2f      	ldr	r3, [pc, #188]	; (8016478 <Auto_Fit+0x6e8>)
 80163bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80163c0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80163c4:	4a26      	ldr	r2, [pc, #152]	; (8016460 <Auto_Fit+0x6d0>)
 80163c6:	6811      	ldr	r1, [r2, #0]
 80163c8:	4a26      	ldr	r2, [pc, #152]	; (8016464 <Auto_Fit+0x6d4>)
 80163ca:	f9b2 2000 	ldrsh.w	r2, [r2]
 80163ce:	4610      	mov	r0, r2
 80163d0:	4a25      	ldr	r2, [pc, #148]	; (8016468 <Auto_Fit+0x6d8>)
 80163d2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80163d6:	2a00      	cmp	r2, #0
 80163d8:	bf14      	ite	ne
 80163da:	2201      	movne	r2, #1
 80163dc:	2200      	moveq	r2, #0
 80163de:	b2d2      	uxtb	r2, r2
 80163e0:	4402      	add	r2, r0
 80163e2:	0052      	lsls	r2, r2, #1
 80163e4:	440a      	add	r2, r1
 80163e6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80163ea:	0092      	lsls	r2, r2, #2
 80163ec:	491f      	ldr	r1, [pc, #124]	; (801646c <Auto_Fit+0x6dc>)
 80163ee:	f9b1 1000 	ldrsh.w	r1, [r1]
 80163f2:	4608      	mov	r0, r1
 80163f4:	491e      	ldr	r1, [pc, #120]	; (8016470 <Auto_Fit+0x6e0>)
 80163f6:	5c09      	ldrb	r1, [r1, r0]
 80163f8:	fb92 f2f1 	sdiv	r2, r2, r1
 80163fc:	fb02 f303 	mul.w	r3, r2, r3
 8016400:	131b      	asrs	r3, r3, #12
           - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val);
 8016402:	b29a      	uxth	r2, r3
 8016404:	4b1d      	ldr	r3, [pc, #116]	; (801647c <Auto_Fit+0x6ec>)
 8016406:	f9b3 3000 	ldrsh.w	r3, [r3]
 801640a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801640e:	4914      	ldr	r1, [pc, #80]	; (8016460 <Auto_Fit+0x6d0>)
 8016410:	6808      	ldr	r0, [r1, #0]
 8016412:	4914      	ldr	r1, [pc, #80]	; (8016464 <Auto_Fit+0x6d4>)
 8016414:	f9b1 1000 	ldrsh.w	r1, [r1]
 8016418:	460c      	mov	r4, r1
 801641a:	4913      	ldr	r1, [pc, #76]	; (8016468 <Auto_Fit+0x6d8>)
 801641c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8016420:	2900      	cmp	r1, #0
 8016422:	bf14      	ite	ne
 8016424:	2101      	movne	r1, #1
 8016426:	2100      	moveq	r1, #0
 8016428:	b2c9      	uxtb	r1, r1
 801642a:	4421      	add	r1, r4
 801642c:	0049      	lsls	r1, r1, #1
 801642e:	4401      	add	r1, r0
 8016430:	f9b1 1000 	ldrsh.w	r1, [r1]
 8016434:	0089      	lsls	r1, r1, #2
 8016436:	480d      	ldr	r0, [pc, #52]	; (801646c <Auto_Fit+0x6dc>)
 8016438:	f9b0 0000 	ldrsh.w	r0, [r0]
 801643c:	4604      	mov	r4, r0
 801643e:	480c      	ldr	r0, [pc, #48]	; (8016470 <Auto_Fit+0x6e0>)
 8016440:	5d00      	ldrb	r0, [r0, r4]
 8016442:	fb91 f1f0 	sdiv	r1, r1, r0
 8016446:	fb01 f303 	mul.w	r3, r1, r3
 801644a:	131b      	asrs	r3, r3, #12
 801644c:	b29b      	uxth	r3, r3
 801644e:	1ad3      	subs	r3, r2, r3
 8016450:	b29b      	uxth	r3, r3
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8016452:	803b      	strh	r3, [r7, #0]
      for(j=0;j<11;j++){
 8016454:	2300      	movs	r3, #0
 8016456:	71bb      	strb	r3, [r7, #6]
 8016458:	e06e      	b.n	8016538 <Auto_Fit+0x7a8>
 801645a:	bf00      	nop
 801645c:	20002872 	.word	0x20002872
 8016460:	20000580 	.word	0x20000580
 8016464:	2000688e 	.word	0x2000688e
 8016468:	2000286a 	.word	0x2000286a
 801646c:	20002852 	.word	0x20002852
 8016470:	20000564 	.word	0x20000564
 8016474:	2000029c 	.word	0x2000029c
 8016478:	2000285e 	.word	0x2000285e
 801647c:	20002870 	.word	0x20002870
        WaveProcess();
 8016480:	f7fe ffa4 	bl	80153cc <WaveProcess>
        if((k==0)&&(Edge < 60)&&(List[TIM_BASE].Val >5)){
 8016484:	797b      	ldrb	r3, [r7, #5]
 8016486:	2b00      	cmp	r3, #0
 8016488:	d114      	bne.n	80164b4 <Auto_Fit+0x724>
 801648a:	4b38      	ldr	r3, [pc, #224]	; (801656c <Auto_Fit+0x7dc>)
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	2b3b      	cmp	r3, #59	; 0x3b
 8016490:	dc10      	bgt.n	80164b4 <Auto_Fit+0x724>
 8016492:	4b37      	ldr	r3, [pc, #220]	; (8016570 <Auto_Fit+0x7e0>)
 8016494:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016498:	2b05      	cmp	r3, #5
 801649a:	dd0b      	ble.n	80164b4 <Auto_Fit+0x724>
          Set_Base(5);                           // Ӳ������ɨ��ʱ����λ
 801649c:	2005      	movs	r0, #5
 801649e:	f7f6 f8e5 	bl	800c66c <Set_Base>
          List[TIM_BASE].Val = 5;
 80164a2:	4b33      	ldr	r3, [pc, #204]	; (8016570 <Auto_Fit+0x7e0>)
 80164a4:	2205      	movs	r2, #5
 80164a6:	879a      	strh	r2, [r3, #60]	; 0x3c
          WaveProcess();
 80164a8:	f7fe ff90 	bl	80153cc <WaveProcess>
          Update_Proc_All();
 80164ac:	f7fe fc16 	bl	8014cdc <Update_Proc_All>
          k=1;
 80164b0:	2301      	movs	r3, #1
 80164b2:	717b      	strb	r3, [r7, #5]
        }
        if((Edge > 180)&&(List[TIM_BASE].Val > 2)){
 80164b4:	4b2d      	ldr	r3, [pc, #180]	; (801656c <Auto_Fit+0x7dc>)
 80164b6:	681b      	ldr	r3, [r3, #0]
 80164b8:	2bb4      	cmp	r3, #180	; 0xb4
 80164ba:	dd1b      	ble.n	80164f4 <Auto_Fit+0x764>
 80164bc:	4b2c      	ldr	r3, [pc, #176]	; (8016570 <Auto_Fit+0x7e0>)
 80164be:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80164c2:	2b02      	cmp	r3, #2
 80164c4:	dd16      	ble.n	80164f4 <Auto_Fit+0x764>
          List[TIM_BASE].Val--;
 80164c6:	4b2a      	ldr	r3, [pc, #168]	; (8016570 <Auto_Fit+0x7e0>)
 80164c8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80164cc:	b29b      	uxth	r3, r3
 80164ce:	3b01      	subs	r3, #1
 80164d0:	b29b      	uxth	r3, r3
 80164d2:	b21a      	sxth	r2, r3
 80164d4:	4b26      	ldr	r3, [pc, #152]	; (8016570 <Auto_Fit+0x7e0>)
 80164d6:	879a      	strh	r2, [r3, #60]	; 0x3c
          Set_Base(List[TIM_BASE].Val);   // Ӳ������ɨ��ʱ����λ
 80164d8:	4b25      	ldr	r3, [pc, #148]	; (8016570 <Auto_Fit+0x7e0>)
 80164da:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80164de:	4618      	mov	r0, r3
 80164e0:	f7f6 f8c4 	bl	800c66c <Set_Base>
          WaveProcess();
 80164e4:	f7fe ff72 	bl	80153cc <WaveProcess>
                 Update_Proc_All();
 80164e8:	f7fe fbf8 	bl	8014cdc <Update_Proc_All>
          HAL_Delay(50);
 80164ec:	2032      	movs	r0, #50	; 0x32
 80164ee:	f002 f94d 	bl	801878c <HAL_Delay>
 80164f2:	e01e      	b.n	8016532 <Auto_Fit+0x7a2>
        }
        else if((Edge < 80)&&(List[TIM_BASE].Val< 11)){
 80164f4:	4b1d      	ldr	r3, [pc, #116]	; (801656c <Auto_Fit+0x7dc>)
 80164f6:	681b      	ldr	r3, [r3, #0]
 80164f8:	2b4f      	cmp	r3, #79	; 0x4f
 80164fa:	dc1a      	bgt.n	8016532 <Auto_Fit+0x7a2>
 80164fc:	4b1c      	ldr	r3, [pc, #112]	; (8016570 <Auto_Fit+0x7e0>)
 80164fe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016502:	2b0a      	cmp	r3, #10
 8016504:	dc15      	bgt.n	8016532 <Auto_Fit+0x7a2>
          List[TIM_BASE].Val++;
 8016506:	4b1a      	ldr	r3, [pc, #104]	; (8016570 <Auto_Fit+0x7e0>)
 8016508:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801650c:	b29b      	uxth	r3, r3
 801650e:	3301      	adds	r3, #1
 8016510:	b29b      	uxth	r3, r3
 8016512:	b21a      	sxth	r2, r3
 8016514:	4b16      	ldr	r3, [pc, #88]	; (8016570 <Auto_Fit+0x7e0>)
 8016516:	879a      	strh	r2, [r3, #60]	; 0x3c
          Set_Base(List[TIM_BASE].Val);   // Ӳ������ɨ��ʱ����λ
 8016518:	4b15      	ldr	r3, [pc, #84]	; (8016570 <Auto_Fit+0x7e0>)
 801651a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801651e:	4618      	mov	r0, r3
 8016520:	f7f6 f8a4 	bl	800c66c <Set_Base>
          WaveProcess();
 8016524:	f7fe ff52 	bl	80153cc <WaveProcess>
                 Update_Proc_All();
 8016528:	f7fe fbd8 	bl	8014cdc <Update_Proc_All>
          HAL_Delay(50);
 801652c:	2032      	movs	r0, #50	; 0x32
 801652e:	f002 f92d 	bl	801878c <HAL_Delay>
      for(j=0;j<11;j++){
 8016532:	79bb      	ldrb	r3, [r7, #6]
 8016534:	3301      	adds	r3, #1
 8016536:	71bb      	strb	r3, [r7, #6]
 8016538:	79bb      	ldrb	r3, [r7, #6]
 801653a:	2b0a      	cmp	r3, #10
 801653c:	d9a0      	bls.n	8016480 <Auto_Fit+0x6f0>
        }
      }

      if(Tmp1 < 20){
 801653e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8016542:	2b13      	cmp	r3, #19
 8016544:	dc0b      	bgt.n	801655e <Auto_Fit+0x7ce>
        List[TIM_BASE].Val=5; //50us
 8016546:	4b0a      	ldr	r3, [pc, #40]	; (8016570 <Auto_Fit+0x7e0>)
 8016548:	2205      	movs	r2, #5
 801654a:	879a      	strh	r2, [r3, #60]	; 0x3c
        Set_Base(List[TIM_BASE].Val);   // Ӳ������ɨ��ʱ����λ
 801654c:	4b08      	ldr	r3, [pc, #32]	; (8016570 <Auto_Fit+0x7e0>)
 801654e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016552:	4618      	mov	r0, r3
 8016554:	f7f6 f88a 	bl	800c66c <Set_Base>
        HAL_Delay(50);
 8016558:	2032      	movs	r0, #50	; 0x32
 801655a:	f002 f917 	bl	801878c <HAL_Delay>
      }
       Update_Proc_All();
 801655e:	f7fe fbbd 	bl	8014cdc <Update_Proc_All>
  }
}
 8016562:	bf00      	nop
 8016564:	370c      	adds	r7, #12
 8016566:	46bd      	mov	sp, r7
 8016568:	bd90      	pop	{r4, r7, pc}
 801656a:	bf00      	nop
 801656c:	20002858 	.word	0x20002858
 8016570:	2000029c 	.word	0x2000029c

08016574 <Init_Touch>:

unsigned char val[2]; //input buffer

// initialize touch screen
void Init_Touch(void)
{
 8016574:	b580      	push	{r7, lr}
 8016576:	af00      	add	r7, sp, #0
	Touch_SPI();
 8016578:	f000 f810 	bl	801659c <Touch_SPI>
	HAL_GPIO_WritePin( TpCs_GPIO_Port, TpCs_Pin, GPIO_PIN_RESET);
 801657c:	2200      	movs	r2, #0
 801657e:	2140      	movs	r1, #64	; 0x40
 8016580:	4805      	ldr	r0, [pc, #20]	; (8016598 <Init_Touch+0x24>)
 8016582:	f003 fce1 	bl	8019f48 <HAL_GPIO_WritePin>
// not needed yet
	HAL_GPIO_WritePin( TpCs_GPIO_Port, TpCs_Pin, GPIO_PIN_SET);
 8016586:	2201      	movs	r2, #1
 8016588:	2140      	movs	r1, #64	; 0x40
 801658a:	4803      	ldr	r0, [pc, #12]	; (8016598 <Init_Touch+0x24>)
 801658c:	f003 fcdc 	bl	8019f48 <HAL_GPIO_WritePin>
	LCD_SPI();
 8016590:	f000 f814 	bl	80165bc <LCD_SPI>
}
 8016594:	bf00      	nop
 8016596:	bd80      	pop	{r7, pc}
 8016598:	40020400 	.word	0x40020400

0801659c <Touch_SPI>:

// set SPI for touch controller
void Touch_SPI(void)
{
 801659c:	b580      	push	{r7, lr}
 801659e:	af00      	add	r7, sp, #0
//	HAL_SPI_DeInit(&hspi3);  switch on the fly
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80165a0:	4b05      	ldr	r3, [pc, #20]	; (80165b8 <Touch_SPI+0x1c>)
 80165a2:	2200      	movs	r2, #0
 80165a4:	60da      	str	r2, [r3, #12]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16; //slow clock for touch controller
 80165a6:	4b04      	ldr	r3, [pc, #16]	; (80165b8 <Touch_SPI+0x1c>)
 80165a8:	2218      	movs	r2, #24
 80165aa:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi3);
 80165ac:	4802      	ldr	r0, [pc, #8]	; (80165b8 <Touch_SPI+0x1c>)
 80165ae:	f005 ff47 	bl	801c440 <HAL_SPI_Init>
}
 80165b2:	bf00      	nop
 80165b4:	bd80      	pop	{r7, pc}
 80165b6:	bf00      	nop
 80165b8:	200069cc 	.word	0x200069cc

080165bc <LCD_SPI>:

// set SPI for LCD display
void LCD_SPI(void)
{
 80165bc:	b580      	push	{r7, lr}
 80165be:	af00      	add	r7, sp, #0
//	HAL_SPI_DeInit(&hspi3); switch on fly
	hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80165c0:	4b05      	ldr	r3, [pc, #20]	; (80165d8 <LCD_SPI+0x1c>)
 80165c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80165c6:	60da      	str	r2, [r3, #12]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80165c8:	4b03      	ldr	r3, [pc, #12]	; (80165d8 <LCD_SPI+0x1c>)
 80165ca:	2210      	movs	r2, #16
 80165cc:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi3);
 80165ce:	4802      	ldr	r0, [pc, #8]	; (80165d8 <LCD_SPI+0x1c>)
 80165d0:	f005 ff36 	bl	801c440 <HAL_SPI_Init>
}
 80165d4:	bf00      	nop
 80165d6:	bd80      	pop	{r7, pc}
 80165d8:	200069cc 	.word	0x200069cc

080165dc <read_2046>:

short read_2046( unsigned char cmd )  //internal value read
{
 80165dc:	b580      	push	{r7, lr}
 80165de:	b084      	sub	sp, #16
 80165e0:	af00      	add	r7, sp, #0
 80165e2:	4603      	mov	r3, r0
 80165e4:	71fb      	strb	r3, [r7, #7]
	short xyz;

	HAL_SPI_Transmit(&hspi3, &cmd, 1, 1);// timeout 1 ms
 80165e6:	1df9      	adds	r1, r7, #7
 80165e8:	2301      	movs	r3, #1
 80165ea:	2201      	movs	r2, #1
 80165ec:	480e      	ldr	r0, [pc, #56]	; (8016628 <read_2046+0x4c>)
 80165ee:	f005 ffb0 	bl	801c552 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,val,2,1);   // read value
 80165f2:	2301      	movs	r3, #1
 80165f4:	2202      	movs	r2, #2
 80165f6:	490d      	ldr	r1, [pc, #52]	; (801662c <read_2046+0x50>)
 80165f8:	480b      	ldr	r0, [pc, #44]	; (8016628 <read_2046+0x4c>)
 80165fa:	f006 f8e6 	bl	801c7ca <HAL_SPI_Receive>

	xyz = (val[0] <<8) +val[1];
 80165fe:	4b0b      	ldr	r3, [pc, #44]	; (801662c <read_2046+0x50>)
 8016600:	781b      	ldrb	r3, [r3, #0]
 8016602:	b29b      	uxth	r3, r3
 8016604:	021b      	lsls	r3, r3, #8
 8016606:	b29a      	uxth	r2, r3
 8016608:	4b08      	ldr	r3, [pc, #32]	; (801662c <read_2046+0x50>)
 801660a:	785b      	ldrb	r3, [r3, #1]
 801660c:	b29b      	uxth	r3, r3
 801660e:	4413      	add	r3, r2
 8016610:	b29b      	uxth	r3, r3
 8016612:	81fb      	strh	r3, [r7, #14]
	xyz = xyz >> 3;  //12 bit value
 8016614:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016618:	10db      	asrs	r3, r3, #3
 801661a:	81fb      	strh	r3, [r7, #14]
	return xyz;
 801661c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8016620:	4618      	mov	r0, r3
 8016622:	3710      	adds	r7, #16
 8016624:	46bd      	mov	sp, r7
 8016626:	bd80      	pop	{r7, pc}
 8016628:	200069cc 	.word	0x200069cc
 801662c:	20006898 	.word	0x20006898

08016630 <Touch_Read>:

char Touch_Read(short *x, short*y)
{
 8016630:	b580      	push	{r7, lr}
 8016632:	b084      	sub	sp, #16
 8016634:	af00      	add	r7, sp, #0
 8016636:	6078      	str	r0, [r7, #4]
 8016638:	6039      	str	r1, [r7, #0]
	short z1,z2;
	short press;
	press =0;
 801663a:	2300      	movs	r3, #0
 801663c:	81fb      	strh	r3, [r7, #14]

	Touch_SPI();
 801663e:	f7ff ffad 	bl	801659c <Touch_SPI>
	HAL_GPIO_WritePin( TpCs_GPIO_Port, TpCs_Pin, GPIO_PIN_RESET);
 8016642:	2200      	movs	r2, #0
 8016644:	2140      	movs	r1, #64	; 0x40
 8016646:	481f      	ldr	r0, [pc, #124]	; (80166c4 <Touch_Read+0x94>)
 8016648:	f003 fc7e 	bl	8019f48 <HAL_GPIO_WritePin>

	z1 = read_2046(0xB0);  //read z1 cmd 8+3
 801664c:	20b0      	movs	r0, #176	; 0xb0
 801664e:	f7ff ffc5 	bl	80165dc <read_2046>
 8016652:	4603      	mov	r3, r0
 8016654:	81bb      	strh	r3, [r7, #12]
	z2 = read_2046(0xC0);  //read z2 cmd 8+4
 8016656:	20c0      	movs	r0, #192	; 0xc0
 8016658:	f7ff ffc0 	bl	80165dc <read_2046>
 801665c:	4603      	mov	r3, r0
 801665e:	817b      	strh	r3, [r7, #10]
	press = z1 + 4095;
 8016660:	89bb      	ldrh	r3, [r7, #12]
 8016662:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8016666:	b29b      	uxth	r3, r3
 8016668:	81fb      	strh	r3, [r7, #14]
	press -= z2;
 801666a:	89fa      	ldrh	r2, [r7, #14]
 801666c:	897b      	ldrh	r3, [r7, #10]
 801666e:	1ad3      	subs	r3, r2, r3
 8016670:	b29b      	uxth	r3, r3
 8016672:	81fb      	strh	r3, [r7, #14]

	if( press >= 400 )
 8016674:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016678:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 801667c:	db0d      	blt.n	801669a <Touch_Read+0x6a>
	{
		*x = read_2046(0xD0);  //read x cmd 8+5
 801667e:	20d0      	movs	r0, #208	; 0xd0
 8016680:	f7ff ffac 	bl	80165dc <read_2046>
 8016684:	4603      	mov	r3, r0
 8016686:	461a      	mov	r2, r3
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	801a      	strh	r2, [r3, #0]
		*y = read_2046(0x90);  //read y cmd 8+1
 801668c:	2090      	movs	r0, #144	; 0x90
 801668e:	f7ff ffa5 	bl	80165dc <read_2046>
 8016692:	4603      	mov	r3, r0
 8016694:	461a      	mov	r2, r3
 8016696:	683b      	ldr	r3, [r7, #0]
 8016698:	801a      	strh	r2, [r3, #0]
	}

	HAL_GPIO_WritePin( TpCs_GPIO_Port, TpCs_Pin, GPIO_PIN_SET);
 801669a:	2201      	movs	r2, #1
 801669c:	2140      	movs	r1, #64	; 0x40
 801669e:	4809      	ldr	r0, [pc, #36]	; (80166c4 <Touch_Read+0x94>)
 80166a0:	f003 fc52 	bl	8019f48 <HAL_GPIO_WritePin>
	LCD_SPI();
 80166a4:	f7ff ff8a 	bl	80165bc <LCD_SPI>

	return (press<400)?0:1;
 80166a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80166ac:	f240 128f 	movw	r2, #399	; 0x18f
 80166b0:	4293      	cmp	r3, r2
 80166b2:	bfcc      	ite	gt
 80166b4:	2301      	movgt	r3, #1
 80166b6:	2300      	movle	r3, #0
 80166b8:	b2db      	uxtb	r3, r3
}
 80166ba:	4618      	mov	r0, r3
 80166bc:	3710      	adds	r7, #16
 80166be:	46bd      	mov	sp, r7
 80166c0:	bd80      	pop	{r7, pc}
 80166c2:	bf00      	nop
 80166c4:	40020400 	.word	0x40020400

080166c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80166c8:	b580      	push	{r7, lr}
 80166ca:	b082      	sub	sp, #8
 80166cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  short i;
  char SAVE_FLAG = 0;
 80166ce:	2300      	movs	r3, #0
 80166d0:	717b      	strb	r3, [r7, #5]
  char Pop_Num = 0;
 80166d2:	2300      	movs	r3, #0
 80166d4:	713b      	strb	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80166d6:	f001 ffe7 	bl	80186a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80166da:	f001 f859 	bl	8017790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80166de:	f001 fbfb 	bl	8017ed8 <MX_GPIO_Init>
  MX_DMA_Init();
 80166e2:	f001 fbc3 	bl	8017e6c <MX_DMA_Init>
  MX_ADC1_Init();
 80166e6:	f001 f8c7 	bl	8017878 <MX_ADC1_Init>
  MX_ADC2_Init();
 80166ea:	f001 f917 	bl	801791c <MX_ADC2_Init>
  MX_DAC_Init();
 80166ee:	f001 f967 	bl	80179c0 <MX_DAC_Init>
  MX_SPI2_Init();
 80166f2:	f001 f9a3 	bl	8017a3c <MX_SPI2_Init>
  MX_SPI3_Init();
 80166f6:	f001 f9d7 	bl	8017aa8 <MX_SPI3_Init>
  MX_TIM1_Init();
 80166fa:	f001 fa0d 	bl	8017b18 <MX_TIM1_Init>
  MX_TIM3_Init();
 80166fe:	f001 fa81 	bl	8017c04 <MX_TIM3_Init>
  MX_TIM5_Init();
 8016702:	f001 fadf 	bl	8017cc4 <MX_TIM5_Init>
  MX_USB_DEVICE_Init();
 8016706:	f00b fec9 	bl	802249c <MX_USB_DEVICE_Init>
  MX_TIM7_Init();
 801670a:	f001 fb69 	bl	8017de0 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  // initialize adc dma
  __HAL_DMA_DISABLE(&hdma_adc1);
 801670e:	4bb1      	ldr	r3, [pc, #708]	; (80169d4 <main+0x30c>)
 8016710:	681b      	ldr	r3, [r3, #0]
 8016712:	681a      	ldr	r2, [r3, #0]
 8016714:	4baf      	ldr	r3, [pc, #700]	; (80169d4 <main+0x30c>)
 8016716:	681b      	ldr	r3, [r3, #0]
 8016718:	f022 0201 	bic.w	r2, r2, #1
 801671c:	601a      	str	r2, [r3, #0]
  dma_tmp = hdma_adc1.Instance->CR;
 801671e:	4bad      	ldr	r3, [pc, #692]	; (80169d4 <main+0x30c>)
 8016720:	681b      	ldr	r3, [r3, #0]
 8016722:	681b      	ldr	r3, [r3, #0]
 8016724:	603b      	str	r3, [r7, #0]
  dma_tmp &= 0x0FFCFFFE;
 8016726:	683a      	ldr	r2, [r7, #0]
 8016728:	4bab      	ldr	r3, [pc, #684]	; (80169d8 <main+0x310>)
 801672a:	4013      	ands	r3, r2
 801672c:	603b      	str	r3, [r7, #0]
  dma_tmp |= 0x30000; //set very high pirority
 801672e:	683b      	ldr	r3, [r7, #0]
 8016730:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8016734:	603b      	str	r3, [r7, #0]
  hdma_adc1.Instance->CR = dma_tmp;
 8016736:	4ba7      	ldr	r3, [pc, #668]	; (80169d4 <main+0x30c>)
 8016738:	681b      	ldr	r3, [r3, #0]
 801673a:	683a      	ldr	r2, [r7, #0]
 801673c:	601a      	str	r2, [r3, #0]

   hdma_adc1.Instance->M0AR = (unsigned)&Sampl[2];
 801673e:	4ba5      	ldr	r3, [pc, #660]	; (80169d4 <main+0x30c>)
 8016740:	681b      	ldr	r3, [r3, #0]
 8016742:	4aa6      	ldr	r2, [pc, #664]	; (80169dc <main+0x314>)
 8016744:	60da      	str	r2, [r3, #12]
   hdma_adc1.Instance->PAR = hadc1.Instance->DR;
 8016746:	4ba6      	ldr	r3, [pc, #664]	; (80169e0 <main+0x318>)
 8016748:	681a      	ldr	r2, [r3, #0]
 801674a:	4ba2      	ldr	r3, [pc, #648]	; (80169d4 <main+0x30c>)
 801674c:	681b      	ldr	r3, [r3, #0]
 801674e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8016750:	609a      	str	r2, [r3, #8]
   __HAL_DMA_SET_COUNTER(&hdma_adc1, 0x1000);
 8016752:	4ba0      	ldr	r3, [pc, #640]	; (80169d4 <main+0x30c>)
 8016754:	681b      	ldr	r3, [r3, #0]
 8016756:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801675a:	605a      	str	r2, [r3, #4]
   __HAL_DMA_ENABLE(&hdma_adc1);
 801675c:	4b9d      	ldr	r3, [pc, #628]	; (80169d4 <main+0x30c>)
 801675e:	681b      	ldr	r3, [r3, #0]
 8016760:	681a      	ldr	r2, [r3, #0]
 8016762:	4b9c      	ldr	r3, [pc, #624]	; (80169d4 <main+0x30c>)
 8016764:	681b      	ldr	r3, [r3, #0]
 8016766:	f042 0201 	orr.w	r2, r2, #1
 801676a:	601a      	str	r2, [r3, #0]

  // inittialize LCD and touch screen
  Init_LCD();
 801676c:	f7fb fcfa 	bl	8012164 <Init_LCD>
  Init_Touch();
 8016770:	f7ff ff00 	bl	8016574 <Init_Touch>

  SetColor(BLK, WHT);
 8016774:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016778:	2000      	movs	r0, #0
 801677a:	f7f7 fbe7 	bl	800df4c <SetColor>

  DispStr8x14(8, 90, PRN, "         Oscilloscope              ");
 801677e:	4b99      	ldr	r3, [pc, #612]	; (80169e4 <main+0x31c>)
 8016780:	2200      	movs	r2, #0
 8016782:	215a      	movs	r1, #90	; 0x5a
 8016784:	2008      	movs	r0, #8
 8016786:	f7f7 fb89 	bl	800de9c <DispStr8x14>
  DispStr8x14(8+22*8, 90, PRN, APP_VERSION);
 801678a:	4b97      	ldr	r3, [pc, #604]	; (80169e8 <main+0x320>)
 801678c:	2200      	movs	r2, #0
 801678e:	215a      	movs	r1, #90	; 0x5a
 8016790:	20b8      	movs	r0, #184	; 0xb8
 8016792:	f7f7 fb83 	bl	800de9c <DispStr8x14>
  DispStr8x14(8, 70, PRN, "        System Initializing...       ");
 8016796:	4b95      	ldr	r3, [pc, #596]	; (80169ec <main+0x324>)
 8016798:	2200      	movs	r2, #0
 801679a:	2146      	movs	r1, #70	; 0x46
 801679c:	2008      	movs	r0, #8
 801679e:	f7f7 fb7d 	bl	800de9c <DispStr8x14>

  HAL_Delay(1000);
 80167a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80167a6:	f001 fff1 	bl	801878c <HAL_Delay>

//=============================check callibration׼===========================
  Read_CalFlag();
 80167aa:	f7fa ff43 	bl	8011634 <Read_CalFlag>

  if(Cal_Flag == 1)
 80167ae:	4b90      	ldr	r3, [pc, #576]	; (80169f0 <main+0x328>)
 80167b0:	781b      	ldrb	r3, [r3, #0]
 80167b2:	2b01      	cmp	r3, #1
 80167b4:	d10f      	bne.n	80167d6 <main+0x10e>
  {
	  Cal_Flag = 0;
 80167b6:	4b8e      	ldr	r3, [pc, #568]	; (80169f0 <main+0x328>)
 80167b8:	2200      	movs	r2, #0
 80167ba:	701a      	strb	r2, [r3, #0]
	  SetColor(BLK, WHT);
 80167bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80167c0:	2000      	movs	r0, #0
 80167c2:	f7f7 fbc3 	bl	800df4c <SetColor>
	  Zero_Align();                              //set zero
 80167c6:	f7fe fd0b 	bl	80151e0 <Zero_Align>
	  Restore();                                 //restore list
 80167ca:	f7fb f93d 	bl	8011a48 <Restore>
	  Save_Parameter();                          //save list
 80167ce:	f7fa ff59 	bl	8011684 <Save_Parameter>
	  Save_Kpg();
 80167d2:	f7fb f881 	bl	80118d8 <Save_Kpg>
  }
  Read_Kpg();
 80167d6:	f7fb f8f5 	bl	80119c4 <Read_Kpg>
  Read_Parameter();
 80167da:	f7fa ffef 	bl	80117bc <Read_Parameter>
  File_Num();
 80167de:	f7f9 fc35 	bl	801004c <File_Num>
  memcpy(Data, DEMO, 310);
 80167e2:	f44f 729b 	mov.w	r2, #310	; 0x136
 80167e6:	4983      	ldr	r1, [pc, #524]	; (80169f4 <main+0x32c>)
 80167e8:	4883      	ldr	r0, [pc, #524]	; (80169f8 <main+0x330>)
 80167ea:	f00c fbf5 	bl	8022fd8 <memcpy>

  LCD_ClrScrn(GRY);
 80167ee:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80167f2:	f7fb fdcd 	bl	8012390 <LCD_ClrScrn>
  Update_Title();
 80167f6:	f7fb ff6d 	bl	80126d4 <Update_Title>

  List[SMPL_DPTH].Flg |= UPD;
 80167fa:	4b80      	ldr	r3, [pc, #512]	; (80169fc <main+0x334>)
 80167fc:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8016800:	f043 0320 	orr.w	r3, r3, #32
 8016804:	b2da      	uxtb	r2, r3
 8016806:	4b7d      	ldr	r3, [pc, #500]	; (80169fc <main+0x334>)
 8016808:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

  StdBy_Time = List[STANDBY].Val * MIN_UNIT;
 801680c:	4b7b      	ldr	r3, [pc, #492]	; (80169fc <main+0x334>)
 801680e:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 8016812:	b29b      	uxth	r3, r3
 8016814:	461a      	mov	r2, r3
 8016816:	0112      	lsls	r2, r2, #4
 8016818:	1ad3      	subs	r3, r2, r3
 801681a:	009b      	lsls	r3, r3, #2
 801681c:	b29b      	uxth	r3, r3
 801681e:	b21a      	sxth	r2, r3
 8016820:	4b77      	ldr	r3, [pc, #476]	; (8016a00 <main+0x338>)
 8016822:	801a      	strh	r2, [r3, #0]

  // Start timer
  HAL_TIM_Base_Start_IT(&htim3);
 8016824:	4877      	ldr	r0, [pc, #476]	; (8016a04 <main+0x33c>)
 8016826:	f006 fd2f 	bl	801d288 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    if((List[STANDBY].Val != 0)&&(StdBy_Time == 0))
 801682a:	4b74      	ldr	r3, [pc, #464]	; (80169fc <main+0x334>)
 801682c:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 8016830:	2b00      	cmp	r3, #0
 8016832:	d007      	beq.n	8016844 <main+0x17c>
 8016834:	4b72      	ldr	r3, [pc, #456]	; (8016a00 <main+0x338>)
 8016836:	f9b3 3000 	ldrsh.w	r3, [r3]
 801683a:	2b00      	cmp	r3, #0
 801683c:	d102      	bne.n	8016844 <main+0x17c>
	    {
	      StdBy_Flag = 1;
 801683e:	4b72      	ldr	r3, [pc, #456]	; (8016a08 <main+0x340>)
 8016840:	2201      	movs	r2, #1
 8016842:	701a      	strb	r2, [r3, #0]
	    }

	    Update_Detail();
 8016844:	f7fc feb2 	bl	80135ac <Update_Detail>
	    Update_Blink();
 8016848:	f7fb ff98 	bl	801277c <Update_Blink>
	    WaveProcess();
 801684c:	f7fe fdbe 	bl	80153cc <WaveProcess>
	    DrawWindow(WaveBuf, ParamTab);
 8016850:	496e      	ldr	r1, [pc, #440]	; (8016a0c <main+0x344>)
 8016852:	486f      	ldr	r0, [pc, #444]	; (8016a10 <main+0x348>)
 8016854:	f7f7 f8fe 	bl	800da54 <DrawWindow>

	   if(TIM_BASE_Val!=0)
 8016858:	4b6e      	ldr	r3, [pc, #440]	; (8016a14 <main+0x34c>)
 801685a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801685e:	2b00      	cmp	r3, #0
 8016860:	d01c      	beq.n	801689c <main+0x1d4>
	    {
	      List[TIM_BASE].Val=TIM_BASE_Val;
 8016862:	4b6c      	ldr	r3, [pc, #432]	; (8016a14 <main+0x34c>)
 8016864:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016868:	4b64      	ldr	r3, [pc, #400]	; (80169fc <main+0x334>)
 801686a:	879a      	strh	r2, [r3, #60]	; 0x3c
	      List[TIM_BASE].Flg |= UPD;
 801686c:	4b63      	ldr	r3, [pc, #396]	; (80169fc <main+0x334>)
 801686e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016872:	f043 0320 	orr.w	r3, r3, #32
 8016876:	b2da      	uxtb	r2, r3
 8016878:	4b60      	ldr	r3, [pc, #384]	; (80169fc <main+0x334>)
 801687a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	      TIM_BASE_Val=Current;
 801687e:	4b66      	ldr	r3, [pc, #408]	; (8016a18 <main+0x350>)
 8016880:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016884:	4b63      	ldr	r3, [pc, #396]	; (8016a14 <main+0x34c>)
 8016886:	801a      	strh	r2, [r3, #0]
	      Update_Title();
 8016888:	f7fb ff24 	bl	80126d4 <Update_Title>
	      Current=TIM_BASE_Val;
 801688c:	4b61      	ldr	r3, [pc, #388]	; (8016a14 <main+0x34c>)
 801688e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016892:	4b61      	ldr	r3, [pc, #388]	; (8016a18 <main+0x350>)
 8016894:	801a      	strh	r2, [r3, #0]
	      TIM_BASE_Val=0;
 8016896:	4b5f      	ldr	r3, [pc, #380]	; (8016a14 <main+0x34c>)
 8016898:	2200      	movs	r2, #0
 801689a:	801a      	strh	r2, [r3, #0]
	    }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    if(Key_Buffer != 0)
 801689c:	4b5f      	ldr	r3, [pc, #380]	; (8016a1c <main+0x354>)
 801689e:	781b      	ldrb	r3, [r3, #0]
 80168a0:	b2db      	uxtb	r3, r3
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d0c1      	beq.n	801682a <main+0x162>
	    {
	      StdBy_Flag = 0;
 80168a6:	4b58      	ldr	r3, [pc, #352]	; (8016a08 <main+0x340>)
 80168a8:	2200      	movs	r2, #0
 80168aa:	701a      	strb	r2, [r3, #0]
	      PopupCnt = 10;                  // �ް���ʱ�˵���ά����ʾ 10��
 80168ac:	4b5c      	ldr	r3, [pc, #368]	; (8016a20 <main+0x358>)
 80168ae:	220a      	movs	r2, #10
 80168b0:	801a      	strh	r2, [r3, #0]
	      List[MenuNow[Current]].Flg |= UPD;
 80168b2:	4b59      	ldr	r3, [pc, #356]	; (8016a18 <main+0x350>)
 80168b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80168b8:	461a      	mov	r2, r3
 80168ba:	4b5a      	ldr	r3, [pc, #360]	; (8016a24 <main+0x35c>)
 80168bc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80168c0:	4a4e      	ldr	r2, [pc, #312]	; (80169fc <main+0x334>)
 80168c2:	00db      	lsls	r3, r3, #3
 80168c4:	4413      	add	r3, r2
 80168c6:	799b      	ldrb	r3, [r3, #6]
 80168c8:	4a53      	ldr	r2, [pc, #332]	; (8016a18 <main+0x350>)
 80168ca:	f9b2 2000 	ldrsh.w	r2, [r2]
 80168ce:	4611      	mov	r1, r2
 80168d0:	4a54      	ldr	r2, [pc, #336]	; (8016a24 <main+0x35c>)
 80168d2:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80168d6:	4610      	mov	r0, r2
 80168d8:	f043 0320 	orr.w	r3, r3, #32
 80168dc:	b2d9      	uxtb	r1, r3
 80168de:	4a47      	ldr	r2, [pc, #284]	; (80169fc <main+0x334>)
 80168e0:	00c3      	lsls	r3, r0, #3
 80168e2:	4413      	add	r3, r2
 80168e4:	460a      	mov	r2, r1
 80168e6:	719a      	strb	r2, [r3, #6]

	      switch (Key_Buffer)
 80168e8:	4b4c      	ldr	r3, [pc, #304]	; (8016a1c <main+0x354>)
 80168ea:	781b      	ldrb	r3, [r3, #0]
 80168ec:	b2db      	uxtb	r3, r3
 80168ee:	3b01      	subs	r3, #1
 80168f0:	2b09      	cmp	r3, #9
 80168f2:	f200 8709 	bhi.w	8017708 <main+0x1040>
 80168f6:	a201      	add	r2, pc, #4	; (adr r2, 80168fc <main+0x234>)
 80168f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80168fc:	0801696d 	.word	0x0801696d
 8016900:	08016c81 	.word	0x08016c81
 8016904:	08016dd9 	.word	0x08016dd9
 8016908:	08016e87 	.word	0x08016e87
 801690c:	08016f3d 	.word	0x08016f3d
 8016910:	080172e3 	.word	0x080172e3
 8016914:	08017709 	.word	0x08017709
 8016918:	08016947 	.word	0x08016947
 801691c:	08016925 	.word	0x08016925
 8016920:	08016c6d 	.word	0x08016c6d
	      {
	     case KEYCODE_MEM:
	         i = Save_Bmp(List[SAVE_BMP].Val);
 8016924:	4b35      	ldr	r3, [pc, #212]	; (80169fc <main+0x334>)
 8016926:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 801692a:	4618      	mov	r0, r3
 801692c:	f7f9 feb0 	bl	8010690 <Save_Bmp>
 8016930:	4603      	mov	r3, r0
 8016932:	80fb      	strh	r3, [r7, #6]
	         DispFileInfo(i);
 8016934:	88fb      	ldrh	r3, [r7, #6]
 8016936:	b2db      	uxtb	r3, r3
 8016938:	4618      	mov	r0, r3
 801693a:	f7fe f959 	bl	8014bf0 <DispFileInfo>
	         DispBMPInfo();
 801693e:	f7fe f987 	bl	8014c50 <DispBMPInfo>
	        break;
 8016942:	f000 bee1 	b.w	8017708 <main+0x1040>

	     case KEYCODE_ACT:
	       SAVE_FLAG=0;
 8016946:	2300      	movs	r3, #0
 8016948:	717b      	strb	r3, [r7, #5]
	       if(PopType & DAILOG_POP) Close_Pop();
 801694a:	4b37      	ldr	r3, [pc, #220]	; (8016a28 <main+0x360>)
 801694c:	781b      	ldrb	r3, [r3, #0]
 801694e:	f003 0304 	and.w	r3, r3, #4
 8016952:	2b00      	cmp	r3, #0
 8016954:	d003      	beq.n	801695e <main+0x296>
 8016956:	f7f8 f87d 	bl	800ea54 <Close_Pop>
	       else {
	         Dialog_Pop("Save All ParamTab?");
	         Pop_Num = 1;
	       }
	       break;
 801695a:	f000 bed5 	b.w	8017708 <main+0x1040>
	         Dialog_Pop("Save All ParamTab?");
 801695e:	4833      	ldr	r0, [pc, #204]	; (8016a2c <main+0x364>)
 8016960:	f7f8 f8a4 	bl	800eaac <Dialog_Pop>
	         Pop_Num = 1;
 8016964:	2301      	movs	r3, #1
 8016966:	713b      	strb	r3, [r7, #4]
	       break;
 8016968:	f000 bece 	b.w	8017708 <main+0x1040>

	     case KEYCODE_PLAY:
	       if((Current == ST)&&(Cal_Flag==0))
 801696c:	4b2a      	ldr	r3, [pc, #168]	; (8016a18 <main+0x350>)
 801696e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016972:	2b07      	cmp	r3, #7
 8016974:	f040 8080 	bne.w	8016a78 <main+0x3b0>
 8016978:	4b1d      	ldr	r3, [pc, #116]	; (80169f0 <main+0x328>)
 801697a:	781b      	ldrb	r3, [r3, #0]
 801697c:	2b00      	cmp	r3, #0
 801697e:	d17b      	bne.n	8016a78 <main+0x3b0>
	       {
	         if(PopType & DAILOG_POP){
 8016980:	4b29      	ldr	r3, [pc, #164]	; (8016a28 <main+0x360>)
 8016982:	781b      	ldrb	r3, [r3, #0]
 8016984:	f003 0304 	and.w	r3, r3, #4
 8016988:	2b00      	cmp	r3, #0
 801698a:	d00e      	beq.n	80169aa <main+0x2e2>
	           if(Pop_Num == 1){
 801698c:	793b      	ldrb	r3, [r7, #4]
 801698e:	2b01      	cmp	r3, #1
 8016990:	d105      	bne.n	801699e <main+0x2d6>
	             Save_Parameter();
 8016992:	f7fa fe77 	bl	8011684 <Save_Parameter>
	             Close_Pop();
 8016996:	f7f8 f85d 	bl	800ea54 <Close_Pop>
	           Zero_Align();
	           Update_Proc_All();
	           Close_Pop();
	           CalSave_Pop("Save Cal ParamTab?");
	         }
	         break;
 801699a:	f000 bea6 	b.w	80176ea <main+0x1022>
	             Close_Pop();
 801699e:	f7f8 f859 	bl	800ea54 <Close_Pop>
	             List_Pop();
 80169a2:	f7f8 f86d 	bl	800ea80 <List_Pop>
	         break;
 80169a6:	f000 bea0 	b.w	80176ea <main+0x1022>
	         else if((PopType & LIST_POP) && (MenuNow[ST]==RESTORE )) {
 80169aa:	4b1f      	ldr	r3, [pc, #124]	; (8016a28 <main+0x360>)
 80169ac:	781b      	ldrb	r3, [r3, #0]
 80169ae:	f003 0302 	and.w	r3, r3, #2
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	d03c      	beq.n	8016a30 <main+0x368>
 80169b6:	4b1b      	ldr	r3, [pc, #108]	; (8016a24 <main+0x35c>)
 80169b8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80169bc:	2b28      	cmp	r3, #40	; 0x28
 80169be:	d137      	bne.n	8016a30 <main+0x368>
	           Restore_CalPar();
 80169c0:	f7fb f8ac 	bl	8011b1c <Restore_CalPar>
	           Dialog_Pop("Save All ParamTab?");
 80169c4:	4819      	ldr	r0, [pc, #100]	; (8016a2c <main+0x364>)
 80169c6:	f7f8 f871 	bl	800eaac <Dialog_Pop>
	           Cal_Flag = 1;
 80169ca:	4b09      	ldr	r3, [pc, #36]	; (80169f0 <main+0x328>)
 80169cc:	2201      	movs	r2, #1
 80169ce:	701a      	strb	r2, [r3, #0]
	         break;
 80169d0:	f000 be8b 	b.w	80176ea <main+0x1022>
 80169d4:	20006b18 	.word	0x20006b18
 80169d8:	0ffcfffe 	.word	0x0ffcfffe
 80169dc:	2000287c 	.word	0x2000287c
 80169e0:	20006a84 	.word	0x20006a84
 80169e4:	080009f4 	.word	0x080009f4
 80169e8:	20000584 	.word	0x20000584
 80169ec:	08000a18 	.word	0x08000a18
 80169f0:	200001b8 	.word	0x200001b8
 80169f4:	08000b58 	.word	0x08000b58
 80169f8:	2000000c 	.word	0x2000000c
 80169fc:	2000029c 	.word	0x2000029c
 8016a00:	200007a4 	.word	0x200007a4
 8016a04:	20006984 	.word	0x20006984
 8016a08:	200007aa 	.word	0x200007aa
 8016a0c:	20000144 	.word	0x20000144
 8016a10:	20000c10 	.word	0x20000c10
 8016a14:	2000281c 	.word	0x2000281c
 8016a18:	200007a6 	.word	0x200007a6
 8016a1c:	20000781 	.word	0x20000781
 8016a20:	20000000 	.word	0x20000000
 8016a24:	2000053c 	.word	0x2000053c
 8016a28:	20000796 	.word	0x20000796
 8016a2c:	08000a40 	.word	0x08000a40
	         else if((PopType & LIST_POP) && (MenuNow[ST]==AUTO_CAL )) {
 8016a30:	4baf      	ldr	r3, [pc, #700]	; (8016cf0 <main+0x628>)
 8016a32:	781b      	ldrb	r3, [r3, #0]
 8016a34:	f003 0302 	and.w	r3, r3, #2
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	f000 8656 	beq.w	80176ea <main+0x1022>
 8016a3e:	4bad      	ldr	r3, [pc, #692]	; (8016cf4 <main+0x62c>)
 8016a40:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8016a44:	2b27      	cmp	r3, #39	; 0x27
 8016a46:	f040 8650 	bne.w	80176ea <main+0x1022>
	           Close_Pop();
 8016a4a:	f7f8 f803 	bl	800ea54 <Close_Pop>
	           Calibrate_Pop("Waiting for Calibration...");
 8016a4e:	48aa      	ldr	r0, [pc, #680]	; (8016cf8 <main+0x630>)
 8016a50:	f7f8 f892 	bl	800eb78 <Calibrate_Pop>
	           Cal_Flag = 1;
 8016a54:	4ba9      	ldr	r3, [pc, #676]	; (8016cfc <main+0x634>)
 8016a56:	2201      	movs	r2, #1
 8016a58:	701a      	strb	r2, [r3, #0]
	           DrawWindow(WaveBuf, ParamTab);
 8016a5a:	49a9      	ldr	r1, [pc, #676]	; (8016d00 <main+0x638>)
 8016a5c:	48a9      	ldr	r0, [pc, #676]	; (8016d04 <main+0x63c>)
 8016a5e:	f7f6 fff9 	bl	800da54 <DrawWindow>
	           Zero_Align();
 8016a62:	f7fe fbbd 	bl	80151e0 <Zero_Align>
	           Update_Proc_All();
 8016a66:	f7fe f939 	bl	8014cdc <Update_Proc_All>
	           Close_Pop();
 8016a6a:	f7f7 fff3 	bl	800ea54 <Close_Pop>
	           CalSave_Pop("Save Cal ParamTab?");
 8016a6e:	48a6      	ldr	r0, [pc, #664]	; (8016d08 <main+0x640>)
 8016a70:	f7f8 f8b8 	bl	800ebe4 <CalSave_Pop>
	         break;
 8016a74:	f000 be39 	b.w	80176ea <main+0x1022>
	       }
	       else if((Current == ST)&&(Cal_Flag==1)){
 8016a78:	4ba4      	ldr	r3, [pc, #656]	; (8016d0c <main+0x644>)
 8016a7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a7e:	2b07      	cmp	r3, #7
 8016a80:	d113      	bne.n	8016aaa <main+0x3e2>
 8016a82:	4b9e      	ldr	r3, [pc, #632]	; (8016cfc <main+0x634>)
 8016a84:	781b      	ldrb	r3, [r3, #0]
 8016a86:	2b01      	cmp	r3, #1
 8016a88:	d10f      	bne.n	8016aaa <main+0x3e2>
	         if(PopType & DAILOG_POP){
 8016a8a:	4b99      	ldr	r3, [pc, #612]	; (8016cf0 <main+0x628>)
 8016a8c:	781b      	ldrb	r3, [r3, #0]
 8016a8e:	f003 0304 	and.w	r3, r3, #4
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	f000 862b 	beq.w	80176ee <main+0x1026>
	           Save_Kpg();
 8016a98:	f7fa ff1e 	bl	80118d8 <Save_Kpg>
	           Close_Pop();
 8016a9c:	f7f7 ffda 	bl	800ea54 <Close_Pop>
	           Cal_Flag = 0;
 8016aa0:	4b96      	ldr	r3, [pc, #600]	; (8016cfc <main+0x634>)
 8016aa2:	2200      	movs	r2, #0
 8016aa4:	701a      	strb	r2, [r3, #0]
	         }
	         break;
 8016aa6:	f000 be22 	b.w	80176ee <main+0x1026>
	       }

	       if ((Current == FN)&&(PopType & LIST_POP)){
 8016aaa:	4b98      	ldr	r3, [pc, #608]	; (8016d0c <main+0x644>)
 8016aac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ab0:	2b05      	cmp	r3, #5
 8016ab2:	d177      	bne.n	8016ba4 <main+0x4dc>
 8016ab4:	4b8e      	ldr	r3, [pc, #568]	; (8016cf0 <main+0x628>)
 8016ab6:	781b      	ldrb	r3, [r3, #0]
 8016ab8:	f003 0302 	and.w	r3, r3, #2
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	d071      	beq.n	8016ba4 <main+0x4dc>
	         i = 0;
 8016ac0:	2300      	movs	r3, #0
 8016ac2:	80fb      	strh	r3, [r7, #6]
	         {
	           if(SAVE_FLAG==KEYCODE_MEM)Close_Pop();
 8016ac4:	797b      	ldrb	r3, [r7, #5]
 8016ac6:	2b09      	cmp	r3, #9
 8016ac8:	d101      	bne.n	8016ace <main+0x406>
 8016aca:	f7f7 ffc3 	bl	800ea54 <Close_Pop>
	           if(MenuNow[FN] == SAVE_BMP) i = Save_Bmp(List[SAVE_BMP].Val);
 8016ace:	4b89      	ldr	r3, [pc, #548]	; (8016cf4 <main+0x62c>)
 8016ad0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016ad4:	2b1d      	cmp	r3, #29
 8016ad6:	d107      	bne.n	8016ae8 <main+0x420>
 8016ad8:	4b8d      	ldr	r3, [pc, #564]	; (8016d10 <main+0x648>)
 8016ada:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 8016ade:	4618      	mov	r0, r3
 8016ae0:	f7f9 fdd6 	bl	8010690 <Save_Bmp>
 8016ae4:	4603      	mov	r3, r0
 8016ae6:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_DAT) i = Save_Dat(List[SAVE_DAT].Val);
 8016ae8:	4b82      	ldr	r3, [pc, #520]	; (8016cf4 <main+0x62c>)
 8016aea:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016aee:	2b1e      	cmp	r3, #30
 8016af0:	d107      	bne.n	8016b02 <main+0x43a>
 8016af2:	4b87      	ldr	r3, [pc, #540]	; (8016d10 <main+0x648>)
 8016af4:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 8016af8:	4618      	mov	r0, r3
 8016afa:	f7f9 fc89 	bl	8010410 <Save_Dat>
 8016afe:	4603      	mov	r3, r0
 8016b00:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_BUF) i = Save_Buf(List[SAVE_BUF].Val);
 8016b02:	4b7c      	ldr	r3, [pc, #496]	; (8016cf4 <main+0x62c>)
 8016b04:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016b08:	2b1f      	cmp	r3, #31
 8016b0a:	d107      	bne.n	8016b1c <main+0x454>
 8016b0c:	4b80      	ldr	r3, [pc, #512]	; (8016d10 <main+0x648>)
 8016b0e:	f9b3 30fc 	ldrsh.w	r3, [r3, #252]	; 0xfc
 8016b12:	4618      	mov	r0, r3
 8016b14:	f7f9 fba6 	bl	8010264 <Save_Buf>
 8016b18:	4603      	mov	r3, r0
 8016b1a:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_CSV) i = Save_Csv(List[SAVE_CSV].Val);
 8016b1c:	4b75      	ldr	r3, [pc, #468]	; (8016cf4 <main+0x62c>)
 8016b1e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016b22:	2b20      	cmp	r3, #32
 8016b24:	d107      	bne.n	8016b36 <main+0x46e>
 8016b26:	4b7a      	ldr	r3, [pc, #488]	; (8016d10 <main+0x648>)
 8016b28:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
 8016b2c:	4618      	mov	r0, r3
 8016b2e:	f7f9 ff19 	bl	8010964 <Save_Csv>
 8016b32:	4603      	mov	r3, r0
 8016b34:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_SVG) i = Save_Svg(List[SAVE_SVG].Val);
 8016b36:	4b6f      	ldr	r3, [pc, #444]	; (8016cf4 <main+0x62c>)
 8016b38:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016b3c:	2b21      	cmp	r3, #33	; 0x21
 8016b3e:	d107      	bne.n	8016b50 <main+0x488>
 8016b40:	4b73      	ldr	r3, [pc, #460]	; (8016d10 <main+0x648>)
 8016b42:	f9b3 310c 	ldrsh.w	r3, [r3, #268]	; 0x10c
 8016b46:	4618      	mov	r0, r3
 8016b48:	f7fa f932 	bl	8010db0 <Save_Svg>
 8016b4c:	4603      	mov	r3, r0
 8016b4e:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == LOAD_DAT) i = Load_Dat(List[LOAD_DAT].Val);
 8016b50:	4b68      	ldr	r3, [pc, #416]	; (8016cf4 <main+0x62c>)
 8016b52:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016b56:	2b22      	cmp	r3, #34	; 0x22
 8016b58:	d107      	bne.n	8016b6a <main+0x4a2>
 8016b5a:	4b6d      	ldr	r3, [pc, #436]	; (8016d10 <main+0x648>)
 8016b5c:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	; 0x114
 8016b60:	4618      	mov	r0, r3
 8016b62:	f7f9 fce9 	bl	8010538 <Load_Dat>
 8016b66:	4603      	mov	r3, r0
 8016b68:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == LOAD_BUF) i = Load_Buf(List[LOAD_BUF].Val);
 8016b6a:	4b62      	ldr	r3, [pc, #392]	; (8016cf4 <main+0x62c>)
 8016b6c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016b70:	2b23      	cmp	r3, #35	; 0x23
 8016b72:	d107      	bne.n	8016b84 <main+0x4bc>
 8016b74:	4b66      	ldr	r3, [pc, #408]	; (8016d10 <main+0x648>)
 8016b76:	f9b3 311c 	ldrsh.w	r3, [r3, #284]	; 0x11c
 8016b7a:	4618      	mov	r0, r3
 8016b7c:	f7f9 fa94 	bl	80100a8 <Load_Buf>
 8016b80:	4603      	mov	r3, r0
 8016b82:	80fb      	strh	r3, [r7, #6]
	           SAVE_FLAG = 0;
 8016b84:	2300      	movs	r3, #0
 8016b86:	717b      	strb	r3, [r7, #5]
	         }
	         DispFileInfo(i);
 8016b88:	88fb      	ldrh	r3, [r7, #6]
 8016b8a:	b2db      	uxtb	r3, r3
 8016b8c:	4618      	mov	r0, r3
 8016b8e:	f7fe f82f 	bl	8014bf0 <DispFileInfo>

	         if(PopType & DAILOG_POP)  Close_Pop();
 8016b92:	4b57      	ldr	r3, [pc, #348]	; (8016cf0 <main+0x628>)
 8016b94:	781b      	ldrb	r3, [r3, #0]
 8016b96:	f003 0304 	and.w	r3, r3, #4
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d062      	beq.n	8016c64 <main+0x59c>
 8016b9e:	f7f7 ff59 	bl	800ea54 <Close_Pop>
 8016ba2:	e05f      	b.n	8016c64 <main+0x59c>

	       }
	       else if((PopType & DAILOG_POP ) &&(SAVE_FLAG!=KEYCODE_MEM)){
 8016ba4:	4b52      	ldr	r3, [pc, #328]	; (8016cf0 <main+0x628>)
 8016ba6:	781b      	ldrb	r3, [r3, #0]
 8016ba8:	f003 0304 	and.w	r3, r3, #4
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d00b      	beq.n	8016bc8 <main+0x500>
 8016bb0:	797b      	ldrb	r3, [r7, #5]
 8016bb2:	2b09      	cmp	r3, #9
 8016bb4:	d008      	beq.n	8016bc8 <main+0x500>
	         Save_Parameter();
 8016bb6:	f7fa fd65 	bl	8011684 <Save_Parameter>
	         Cal_Flag = 0;
 8016bba:	4b50      	ldr	r3, [pc, #320]	; (8016cfc <main+0x634>)
 8016bbc:	2200      	movs	r2, #0
 8016bbe:	701a      	strb	r2, [r3, #0]
	         Close_Pop();
 8016bc0:	f7f7 ff48 	bl	800ea54 <Close_Pop>
	         break;
 8016bc4:	f000 bda0 	b.w	8017708 <main+0x1040>
	       }
	       else {
	          if(Status & STOP){
 8016bc8:	4b52      	ldr	r3, [pc, #328]	; (8016d14 <main+0x64c>)
 8016bca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016bce:	b29b      	uxth	r3, r3
 8016bd0:	f003 0301 	and.w	r3, r3, #1
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	d02e      	beq.n	8016c36 <main+0x56e>
	            if(Status & LOADM )Status &= ~LOADM;
 8016bd8:	4b4e      	ldr	r3, [pc, #312]	; (8016d14 <main+0x64c>)
 8016bda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016bde:	b29b      	uxth	r3, r3
 8016be0:	f003 0310 	and.w	r3, r3, #16
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	d007      	beq.n	8016bf8 <main+0x530>
 8016be8:	4b4a      	ldr	r3, [pc, #296]	; (8016d14 <main+0x64c>)
 8016bea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016bee:	f023 0310 	bic.w	r3, r3, #16
 8016bf2:	b21a      	sxth	r2, r3
 8016bf4:	4b47      	ldr	r3, [pc, #284]	; (8016d14 <main+0x64c>)
 8016bf6:	801a      	strh	r2, [r3, #0]
	            Status &= ~STOP;     // ��������״̬
 8016bf8:	4b46      	ldr	r3, [pc, #280]	; (8016d14 <main+0x64c>)
 8016bfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016bfe:	f023 0301 	bic.w	r3, r3, #1
 8016c02:	b21a      	sxth	r2, r3
 8016c04:	4b43      	ldr	r3, [pc, #268]	; (8016d14 <main+0x64c>)
 8016c06:	801a      	strh	r2, [r3, #0]
	            if(List[SYNCMODE].Val==SINGL) ADC_Start();
 8016c08:	4b41      	ldr	r3, [pc, #260]	; (8016d10 <main+0x648>)
 8016c0a:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8016c0e:	2b04      	cmp	r3, #4
 8016c10:	d101      	bne.n	8016c16 <main+0x54e>
 8016c12:	f7f5 fdc3 	bl	800c79c <ADC_Start>
	            if(List[SYNCMODE].Val==NORM)  ADC_Start();
 8016c16:	4b3e      	ldr	r3, [pc, #248]	; (8016d10 <main+0x648>)
 8016c18:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8016c1c:	2b03      	cmp	r3, #3
 8016c1e:	d101      	bne.n	8016c24 <main+0x55c>
 8016c20:	f7f5 fdbc 	bl	800c79c <ADC_Start>
	            Norm_Clr = 1;
 8016c24:	4b3c      	ldr	r3, [pc, #240]	; (8016d18 <main+0x650>)
 8016c26:	2201      	movs	r2, #1
 8016c28:	701a      	strb	r2, [r3, #0]
	            SNGL_Kflag = 1;
 8016c2a:	4b3c      	ldr	r3, [pc, #240]	; (8016d1c <main+0x654>)
 8016c2c:	2201      	movs	r2, #1
 8016c2e:	701a      	strb	r2, [r3, #0]
	            Update_Proc_All();
 8016c30:	f7fe f854 	bl	8014cdc <Update_Proc_All>
 8016c34:	e016      	b.n	8016c64 <main+0x59c>

	            if(*(short*)F_Sector==0xaa55)Restore_Scene();

	          }
	          else {
	            Status |=  STOP;     // ������ͣ״̬
 8016c36:	4b37      	ldr	r3, [pc, #220]	; (8016d14 <main+0x64c>)
 8016c38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c3c:	f043 0301 	orr.w	r3, r3, #1
 8016c40:	b21a      	sxth	r2, r3
 8016c42:	4b34      	ldr	r3, [pc, #208]	; (8016d14 <main+0x64c>)
 8016c44:	801a      	strh	r2, [r3, #0]
	            Ch1_Posi = List[V0_POSI].Val;
 8016c46:	4b32      	ldr	r3, [pc, #200]	; (8016d10 <main+0x648>)
 8016c48:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 8016c4c:	4b34      	ldr	r3, [pc, #208]	; (8016d20 <main+0x658>)
 8016c4e:	801a      	strh	r2, [r3, #0]
	            Ch2_Posi = List[EXT_POSI].Val;
 8016c50:	4b2f      	ldr	r3, [pc, #188]	; (8016d10 <main+0x648>)
 8016c52:	f9b3 20dc 	ldrsh.w	r2, [r3, #220]	; 0xdc
 8016c56:	4b33      	ldr	r3, [pc, #204]	; (8016d24 <main+0x65c>)
 8016c58:	801a      	strh	r2, [r3, #0]
	            Tri_Posi = List[THRESHOLD].Val;
 8016c5a:	4b2d      	ldr	r3, [pc, #180]	; (8016d10 <main+0x648>)
 8016c5c:	f9b3 2084 	ldrsh.w	r2, [r3, #132]	; 0x84
 8016c60:	4b31      	ldr	r3, [pc, #196]	; (8016d28 <main+0x660>)
 8016c62:	801a      	strh	r2, [r3, #0]
	            Save_Bmp(List[SAVE_BMP].Val);
	            List[SAVE_BMP].Val++;
	          #endif
	          }
	        }
	        DispStatus();            // ��ʾ����״̬
 8016c64:	f7fd fd2e 	bl	80146c4 <DispStatus>
 	       break;
 8016c68:	f000 bd4e 	b.w	8017708 <main+0x1040>

	      case KEYCODE_D_MANU:
	        if(List[FITTRIGG].Val)
 8016c6c:	4b28      	ldr	r3, [pc, #160]	; (8016d10 <main+0x648>)
 8016c6e:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	f000 853d 	beq.w	80176f2 <main+0x102a>
	        {
	          Auto_Fit();
 8016c78:	f7ff f88a 	bl	8015d90 <Auto_Fit>
	        }
	        break;
 8016c7c:	f000 bd39 	b.w	80176f2 <main+0x102a>

	      case KEYCODE_MANU:
	        if(!(PopType & LIST_POP)){
 8016c80:	4b1b      	ldr	r3, [pc, #108]	; (8016cf0 <main+0x628>)
 8016c82:	781b      	ldrb	r3, [r3, #0]
 8016c84:	f003 0302 	and.w	r3, r3, #2
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d111      	bne.n	8016cb0 <main+0x5e8>
	            if(Cal_Flag){
 8016c8c:	4b1b      	ldr	r3, [pc, #108]	; (8016cfc <main+0x634>)
 8016c8e:	781b      	ldrb	r3, [r3, #0]
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d006      	beq.n	8016ca2 <main+0x5da>
	              Cal_Flag = 0;
 8016c94:	4b19      	ldr	r3, [pc, #100]	; (8016cfc <main+0x634>)
 8016c96:	2200      	movs	r2, #0
 8016c98:	701a      	strb	r2, [r3, #0]
	              Close_Pop();
 8016c9a:	f7f7 fedb 	bl	800ea54 <Close_Pop>
	          // ------------ �ָ���ʾ��Ϣ��ʾ���Ҷ�ԭ����ʾ��Ϣ ------------
	          if(MenuNow[Current] == SMPL_DPTH) List[SMPL_DPTH].Flg  |= UPD; // ������ȸ�����ʾ
	          else if(Current == FN)           List[MenuNow[FN]].Flg |= UPD; // ָ�����ļ���д�������ʾ
	          else                             List[MenuNow[ME]].Flg |= UPD; // ָ���Ĳ��β����������ʾ
	        }
	        break;
 8016c9e:	f000 bd33 	b.w	8017708 <main+0x1040>
	              Cal_Flag = 0;
 8016ca2:	4b16      	ldr	r3, [pc, #88]	; (8016cfc <main+0x634>)
 8016ca4:	2200      	movs	r2, #0
 8016ca6:	701a      	strb	r2, [r3, #0]
	              List_Pop(); // �˵����ر�ʱ, �򿪲˵���
 8016ca8:	f7f7 feea 	bl	800ea80 <List_Pop>
	        break;
 8016cac:	f000 bd2c 	b.w	8017708 <main+0x1040>
	          Close_Pop();                // �˵����Ѵ�ʱ, �رղ˵���
 8016cb0:	f7f7 fed0 	bl	800ea54 <Close_Pop>
	          if(Current == XN)      List[T1_POSI   ].Flg |= UPD;
 8016cb4:	4b15      	ldr	r3, [pc, #84]	; (8016d0c <main+0x644>)
 8016cb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016cba:	2b01      	cmp	r3, #1
 8016cbc:	d109      	bne.n	8016cd2 <main+0x60a>
 8016cbe:	4b14      	ldr	r3, [pc, #80]	; (8016d10 <main+0x648>)
 8016cc0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8016cc4:	f043 0320 	orr.w	r3, r3, #32
 8016cc8:	b2da      	uxtb	r2, r3
 8016cca:	4b11      	ldr	r3, [pc, #68]	; (8016d10 <main+0x648>)
 8016ccc:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 8016cd0:	e03f      	b.n	8016d52 <main+0x68a>
	          else if(Current == YN) List[V1_POSI   ].Flg |= UPD;
 8016cd2:	4b0e      	ldr	r3, [pc, #56]	; (8016d0c <main+0x644>)
 8016cd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d127      	bne.n	8016d2c <main+0x664>
 8016cdc:	4b0c      	ldr	r3, [pc, #48]	; (8016d10 <main+0x648>)
 8016cde:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8016ce2:	f043 0320 	orr.w	r3, r3, #32
 8016ce6:	b2da      	uxtb	r2, r3
 8016ce8:	4b09      	ldr	r3, [pc, #36]	; (8016d10 <main+0x648>)
 8016cea:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8016cee:	e030      	b.n	8016d52 <main+0x68a>
 8016cf0:	20000796 	.word	0x20000796
 8016cf4:	2000053c 	.word	0x2000053c
 8016cf8:	08000a54 	.word	0x08000a54
 8016cfc:	200001b8 	.word	0x200001b8
 8016d00:	20000144 	.word	0x20000144
 8016d04:	20000c10 	.word	0x20000c10
 8016d08:	08000a70 	.word	0x08000a70
 8016d0c:	200007a6 	.word	0x200007a6
 8016d10:	2000029c 	.word	0x2000029c
 8016d14:	200007a8 	.word	0x200007a8
 8016d18:	200007af 	.word	0x200007af
 8016d1c:	20000560 	.word	0x20000560
 8016d20:	2000688c 	.word	0x2000688c
 8016d24:	20006884 	.word	0x20006884
 8016d28:	20002868 	.word	0x20002868
	          else                   List[MenuNow[SN]].Flg |= UPD;
 8016d2c:	4b7d      	ldr	r3, [pc, #500]	; (8016f24 <main+0x85c>)
 8016d2e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8016d32:	4a7d      	ldr	r2, [pc, #500]	; (8016f28 <main+0x860>)
 8016d34:	00db      	lsls	r3, r3, #3
 8016d36:	4413      	add	r3, r2
 8016d38:	799b      	ldrb	r3, [r3, #6]
 8016d3a:	4a7a      	ldr	r2, [pc, #488]	; (8016f24 <main+0x85c>)
 8016d3c:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8016d40:	4610      	mov	r0, r2
 8016d42:	f043 0320 	orr.w	r3, r3, #32
 8016d46:	b2d9      	uxtb	r1, r3
 8016d48:	4a77      	ldr	r2, [pc, #476]	; (8016f28 <main+0x860>)
 8016d4a:	00c3      	lsls	r3, r0, #3
 8016d4c:	4413      	add	r3, r2
 8016d4e:	460a      	mov	r2, r1
 8016d50:	719a      	strb	r2, [r3, #6]
	          if(MenuNow[Current] == SMPL_DPTH) List[SMPL_DPTH].Flg  |= UPD; // ������ȸ�����ʾ
 8016d52:	4b76      	ldr	r3, [pc, #472]	; (8016f2c <main+0x864>)
 8016d54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d58:	461a      	mov	r2, r3
 8016d5a:	4b72      	ldr	r3, [pc, #456]	; (8016f24 <main+0x85c>)
 8016d5c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016d60:	2b09      	cmp	r3, #9
 8016d62:	d10a      	bne.n	8016d7a <main+0x6b2>
 8016d64:	4b70      	ldr	r3, [pc, #448]	; (8016f28 <main+0x860>)
 8016d66:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8016d6a:	f043 0320 	orr.w	r3, r3, #32
 8016d6e:	b2da      	uxtb	r2, r3
 8016d70:	4b6d      	ldr	r3, [pc, #436]	; (8016f28 <main+0x860>)
 8016d72:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	        break;
 8016d76:	f000 bcc7 	b.w	8017708 <main+0x1040>
	          else if(Current == FN)           List[MenuNow[FN]].Flg |= UPD; // ָ�����ļ���д�������ʾ
 8016d7a:	4b6c      	ldr	r3, [pc, #432]	; (8016f2c <main+0x864>)
 8016d7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d80:	2b05      	cmp	r3, #5
 8016d82:	d114      	bne.n	8016dae <main+0x6e6>
 8016d84:	4b67      	ldr	r3, [pc, #412]	; (8016f24 <main+0x85c>)
 8016d86:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016d8a:	4a67      	ldr	r2, [pc, #412]	; (8016f28 <main+0x860>)
 8016d8c:	00db      	lsls	r3, r3, #3
 8016d8e:	4413      	add	r3, r2
 8016d90:	799b      	ldrb	r3, [r3, #6]
 8016d92:	4a64      	ldr	r2, [pc, #400]	; (8016f24 <main+0x85c>)
 8016d94:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8016d98:	4610      	mov	r0, r2
 8016d9a:	f043 0320 	orr.w	r3, r3, #32
 8016d9e:	b2d9      	uxtb	r1, r3
 8016da0:	4a61      	ldr	r2, [pc, #388]	; (8016f28 <main+0x860>)
 8016da2:	00c3      	lsls	r3, r0, #3
 8016da4:	4413      	add	r3, r2
 8016da6:	460a      	mov	r2, r1
 8016da8:	719a      	strb	r2, [r3, #6]
	        break;
 8016daa:	f000 bcad 	b.w	8017708 <main+0x1040>
	          else                             List[MenuNow[ME]].Flg |= UPD; // ָ���Ĳ��β����������ʾ
 8016dae:	4b5d      	ldr	r3, [pc, #372]	; (8016f24 <main+0x85c>)
 8016db0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8016db4:	4a5c      	ldr	r2, [pc, #368]	; (8016f28 <main+0x860>)
 8016db6:	00db      	lsls	r3, r3, #3
 8016db8:	4413      	add	r3, r2
 8016dba:	799b      	ldrb	r3, [r3, #6]
 8016dbc:	4a59      	ldr	r2, [pc, #356]	; (8016f24 <main+0x85c>)
 8016dbe:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8016dc2:	4610      	mov	r0, r2
 8016dc4:	f043 0320 	orr.w	r3, r3, #32
 8016dc8:	b2d9      	uxtb	r1, r3
 8016dca:	4a57      	ldr	r2, [pc, #348]	; (8016f28 <main+0x860>)
 8016dcc:	00c3      	lsls	r3, r0, #3
 8016dce:	4413      	add	r3, r2
 8016dd0:	460a      	mov	r2, r1
 8016dd2:	719a      	strb	r2, [r3, #6]
	        break;
 8016dd4:	f000 bc98 	b.w	8017708 <main+0x1040>

	      case KEYCODE_UP:
	        if (PopType & LIST_POP){
 8016dd8:	4b55      	ldr	r3, [pc, #340]	; (8016f30 <main+0x868>)
 8016dda:	781b      	ldrb	r3, [r3, #0]
 8016ddc:	f003 0302 	and.w	r3, r3, #2
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d03b      	beq.n	8016e5c <main+0x794>
	          if(MenuNow[Current] > MU_BEGN[Current]) MenuNow[Current]--;
 8016de4:	4b51      	ldr	r3, [pc, #324]	; (8016f2c <main+0x864>)
 8016de6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016dea:	461a      	mov	r2, r3
 8016dec:	4b4d      	ldr	r3, [pc, #308]	; (8016f24 <main+0x85c>)
 8016dee:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016df2:	461a      	mov	r2, r3
 8016df4:	4b4d      	ldr	r3, [pc, #308]	; (8016f2c <main+0x864>)
 8016df6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016dfa:	4619      	mov	r1, r3
 8016dfc:	4b4d      	ldr	r3, [pc, #308]	; (8016f34 <main+0x86c>)
 8016dfe:	5c5b      	ldrb	r3, [r3, r1]
 8016e00:	429a      	cmp	r2, r3
 8016e02:	dd0e      	ble.n	8016e22 <main+0x75a>
 8016e04:	4b49      	ldr	r3, [pc, #292]	; (8016f2c <main+0x864>)
 8016e06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e0a:	4a46      	ldr	r2, [pc, #280]	; (8016f24 <main+0x85c>)
 8016e0c:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8016e10:	b292      	uxth	r2, r2
 8016e12:	3a01      	subs	r2, #1
 8016e14:	b292      	uxth	r2, r2
 8016e16:	b211      	sxth	r1, r2
 8016e18:	4a42      	ldr	r2, [pc, #264]	; (8016f24 <main+0x85c>)
 8016e1a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	          else                  MenuNow[Current] += M_ITEMS[Current]-1;
	        } else {
	          if (Current > 0) Current--;
	          else             Current = ST;
	        }
	        break;
 8016e1e:	f000 bc73 	b.w	8017708 <main+0x1040>
	          else                  MenuNow[Current] += M_ITEMS[Current]-1;
 8016e22:	4b42      	ldr	r3, [pc, #264]	; (8016f2c <main+0x864>)
 8016e24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e28:	461a      	mov	r2, r3
 8016e2a:	4b3e      	ldr	r3, [pc, #248]	; (8016f24 <main+0x85c>)
 8016e2c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016e30:	b29a      	uxth	r2, r3
 8016e32:	4b3e      	ldr	r3, [pc, #248]	; (8016f2c <main+0x864>)
 8016e34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e38:	4619      	mov	r1, r3
 8016e3a:	4b3f      	ldr	r3, [pc, #252]	; (8016f38 <main+0x870>)
 8016e3c:	5c5b      	ldrb	r3, [r3, r1]
 8016e3e:	b29b      	uxth	r3, r3
 8016e40:	4413      	add	r3, r2
 8016e42:	b29b      	uxth	r3, r3
 8016e44:	3b01      	subs	r3, #1
 8016e46:	b299      	uxth	r1, r3
 8016e48:	4b38      	ldr	r3, [pc, #224]	; (8016f2c <main+0x864>)
 8016e4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e4e:	461a      	mov	r2, r3
 8016e50:	b209      	sxth	r1, r1
 8016e52:	4b34      	ldr	r3, [pc, #208]	; (8016f24 <main+0x85c>)
 8016e54:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	        break;
 8016e58:	f000 bc56 	b.w	8017708 <main+0x1040>
	          if (Current > 0) Current--;
 8016e5c:	4b33      	ldr	r3, [pc, #204]	; (8016f2c <main+0x864>)
 8016e5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	dd0a      	ble.n	8016e7c <main+0x7b4>
 8016e66:	4b31      	ldr	r3, [pc, #196]	; (8016f2c <main+0x864>)
 8016e68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e6c:	b29b      	uxth	r3, r3
 8016e6e:	3b01      	subs	r3, #1
 8016e70:	b29b      	uxth	r3, r3
 8016e72:	b21a      	sxth	r2, r3
 8016e74:	4b2d      	ldr	r3, [pc, #180]	; (8016f2c <main+0x864>)
 8016e76:	801a      	strh	r2, [r3, #0]
	        break;
 8016e78:	f000 bc46 	b.w	8017708 <main+0x1040>
	          else             Current = ST;
 8016e7c:	4b2b      	ldr	r3, [pc, #172]	; (8016f2c <main+0x864>)
 8016e7e:	2207      	movs	r2, #7
 8016e80:	801a      	strh	r2, [r3, #0]
	        break;
 8016e82:	f000 bc41 	b.w	8017708 <main+0x1040>

	     case KEYCODE_DOWN:
	        if(PopType & LIST_POP){
 8016e86:	4b2a      	ldr	r3, [pc, #168]	; (8016f30 <main+0x868>)
 8016e88:	781b      	ldrb	r3, [r3, #0]
 8016e8a:	f003 0302 	and.w	r3, r3, #2
 8016e8e:	2b00      	cmp	r3, #0
 8016e90:	d034      	beq.n	8016efc <main+0x834>
	          MenuNow[Current]++;
 8016e92:	4b26      	ldr	r3, [pc, #152]	; (8016f2c <main+0x864>)
 8016e94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e98:	4a22      	ldr	r2, [pc, #136]	; (8016f24 <main+0x85c>)
 8016e9a:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8016e9e:	b292      	uxth	r2, r2
 8016ea0:	3201      	adds	r2, #1
 8016ea2:	b292      	uxth	r2, r2
 8016ea4:	b211      	sxth	r1, r2
 8016ea6:	4a1f      	ldr	r2, [pc, #124]	; (8016f24 <main+0x85c>)
 8016ea8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	          if(MenuNow[Current] >=(MU_BEGN[Current]+M_ITEMS[Current])){
 8016eac:	4b1f      	ldr	r3, [pc, #124]	; (8016f2c <main+0x864>)
 8016eae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016eb2:	461a      	mov	r2, r3
 8016eb4:	4b1b      	ldr	r3, [pc, #108]	; (8016f24 <main+0x85c>)
 8016eb6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016eba:	461a      	mov	r2, r3
 8016ebc:	4b1b      	ldr	r3, [pc, #108]	; (8016f2c <main+0x864>)
 8016ebe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ec2:	4619      	mov	r1, r3
 8016ec4:	4b1b      	ldr	r3, [pc, #108]	; (8016f34 <main+0x86c>)
 8016ec6:	5c5b      	ldrb	r3, [r3, r1]
 8016ec8:	4619      	mov	r1, r3
 8016eca:	4b18      	ldr	r3, [pc, #96]	; (8016f2c <main+0x864>)
 8016ecc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ed0:	4618      	mov	r0, r3
 8016ed2:	4b19      	ldr	r3, [pc, #100]	; (8016f38 <main+0x870>)
 8016ed4:	5c1b      	ldrb	r3, [r3, r0]
 8016ed6:	440b      	add	r3, r1
 8016ed8:	429a      	cmp	r2, r3
 8016eda:	f2c0 840c 	blt.w	80176f6 <main+0x102e>
	            MenuNow[Current] = MU_BEGN[Current];
 8016ede:	4b13      	ldr	r3, [pc, #76]	; (8016f2c <main+0x864>)
 8016ee0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ee4:	461a      	mov	r2, r3
 8016ee6:	4b13      	ldr	r3, [pc, #76]	; (8016f34 <main+0x86c>)
 8016ee8:	5c99      	ldrb	r1, [r3, r2]
 8016eea:	4b10      	ldr	r3, [pc, #64]	; (8016f2c <main+0x864>)
 8016eec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ef0:	461a      	mov	r2, r3
 8016ef2:	b209      	sxth	r1, r1
 8016ef4:	4b0b      	ldr	r3, [pc, #44]	; (8016f24 <main+0x85c>)
 8016ef6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	          }
	        } else {
	          if (Current < 7) Current++;
	          else             Current = YN;
	        }
	        break;
 8016efa:	e3fc      	b.n	80176f6 <main+0x102e>
	          if (Current < 7) Current++;
 8016efc:	4b0b      	ldr	r3, [pc, #44]	; (8016f2c <main+0x864>)
 8016efe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f02:	2b06      	cmp	r3, #6
 8016f04:	dc09      	bgt.n	8016f1a <main+0x852>
 8016f06:	4b09      	ldr	r3, [pc, #36]	; (8016f2c <main+0x864>)
 8016f08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f0c:	b29b      	uxth	r3, r3
 8016f0e:	3301      	adds	r3, #1
 8016f10:	b29b      	uxth	r3, r3
 8016f12:	b21a      	sxth	r2, r3
 8016f14:	4b05      	ldr	r3, [pc, #20]	; (8016f2c <main+0x864>)
 8016f16:	801a      	strh	r2, [r3, #0]
	        break;
 8016f18:	e3ed      	b.n	80176f6 <main+0x102e>
	          else             Current = YN;
 8016f1a:	4b04      	ldr	r3, [pc, #16]	; (8016f2c <main+0x864>)
 8016f1c:	2200      	movs	r2, #0
 8016f1e:	801a      	strh	r2, [r3, #0]
	        break;
 8016f20:	e3e9      	b.n	80176f6 <main+0x102e>
 8016f22:	bf00      	nop
 8016f24:	2000053c 	.word	0x2000053c
 8016f28:	2000029c 	.word	0x2000029c
 8016f2c:	200007a6 	.word	0x200007a6
 8016f30:	20000796 	.word	0x20000796
 8016f34:	08001f40 	.word	0x08001f40
 8016f38:	08001f48 	.word	0x08001f48

	      case KEYCODE_LEFT:
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 8016f3c:	4bb9      	ldr	r3, [pc, #740]	; (8017224 <main+0xb5c>)
 8016f3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f42:	2b07      	cmp	r3, #7
 8016f44:	d106      	bne.n	8016f54 <main+0x88c>
 8016f46:	4bb8      	ldr	r3, [pc, #736]	; (8017228 <main+0xb60>)
 8016f48:	781b      	ldrb	r3, [r3, #0]
 8016f4a:	f003 0302 	and.w	r3, r3, #2
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	f000 83d3 	beq.w	80176fa <main+0x1032>
	        List[MenuNow[Current]].Flg |= UPD;  // ˢ�±��ǰԭ��ʾ��Ŀ����
 8016f54:	4bb3      	ldr	r3, [pc, #716]	; (8017224 <main+0xb5c>)
 8016f56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f5a:	461a      	mov	r2, r3
 8016f5c:	4bb3      	ldr	r3, [pc, #716]	; (801722c <main+0xb64>)
 8016f5e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016f62:	4ab3      	ldr	r2, [pc, #716]	; (8017230 <main+0xb68>)
 8016f64:	00db      	lsls	r3, r3, #3
 8016f66:	4413      	add	r3, r2
 8016f68:	799b      	ldrb	r3, [r3, #6]
 8016f6a:	4aae      	ldr	r2, [pc, #696]	; (8017224 <main+0xb5c>)
 8016f6c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016f70:	4611      	mov	r1, r2
 8016f72:	4aae      	ldr	r2, [pc, #696]	; (801722c <main+0xb64>)
 8016f74:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8016f78:	4610      	mov	r0, r2
 8016f7a:	f043 0320 	orr.w	r3, r3, #32
 8016f7e:	b2d9      	uxtb	r1, r3
 8016f80:	4aab      	ldr	r2, [pc, #684]	; (8017230 <main+0xb68>)
 8016f82:	00c3      	lsls	r3, r0, #3
 8016f84:	4413      	add	r3, r2
 8016f86:	460a      	mov	r2, r1
 8016f88:	719a      	strb	r2, [r3, #6]
	        if(List[MenuNow[Current]].Val <=MIN[MenuNow[Current]]){
 8016f8a:	4ba6      	ldr	r3, [pc, #664]	; (8017224 <main+0xb5c>)
 8016f8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f90:	461a      	mov	r2, r3
 8016f92:	4ba6      	ldr	r3, [pc, #664]	; (801722c <main+0xb64>)
 8016f94:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016f98:	4aa5      	ldr	r2, [pc, #660]	; (8017230 <main+0xb68>)
 8016f9a:	00db      	lsls	r3, r3, #3
 8016f9c:	4413      	add	r3, r2
 8016f9e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8016fa2:	4ba0      	ldr	r3, [pc, #640]	; (8017224 <main+0xb5c>)
 8016fa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016fa8:	4619      	mov	r1, r3
 8016faa:	4ba0      	ldr	r3, [pc, #640]	; (801722c <main+0xb64>)
 8016fac:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016fb0:	4619      	mov	r1, r3
 8016fb2:	4ba0      	ldr	r3, [pc, #640]	; (8017234 <main+0xb6c>)
 8016fb4:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016fb8:	429a      	cmp	r2, r3
 8016fba:	dc73      	bgt.n	80170a4 <main+0x9dc>
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 8016fbc:	4b99      	ldr	r3, [pc, #612]	; (8017224 <main+0xb5c>)
 8016fbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016fc2:	461a      	mov	r2, r3
 8016fc4:	4b99      	ldr	r3, [pc, #612]	; (801722c <main+0xb64>)
 8016fc6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016fca:	2b01      	cmp	r3, #1
 8016fcc:	d051      	beq.n	8017072 <main+0x9aa>
 8016fce:	4b95      	ldr	r3, [pc, #596]	; (8017224 <main+0xb5c>)
 8016fd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016fd4:	461a      	mov	r2, r3
 8016fd6:	4b95      	ldr	r3, [pc, #596]	; (801722c <main+0xb64>)
 8016fd8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016fdc:	2b06      	cmp	r3, #6
 8016fde:	d048      	beq.n	8017072 <main+0x9aa>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016fe0:	4b90      	ldr	r3, [pc, #576]	; (8017224 <main+0xb5c>)
 8016fe2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016fe6:	461a      	mov	r2, r3
 8016fe8:	4b90      	ldr	r3, [pc, #576]	; (801722c <main+0xb64>)
 8016fea:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 8016fee:	2b0c      	cmp	r3, #12
 8016ff0:	d03f      	beq.n	8017072 <main+0x9aa>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016ff2:	4b8c      	ldr	r3, [pc, #560]	; (8017224 <main+0xb5c>)
 8016ff4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ff8:	461a      	mov	r2, r3
 8016ffa:	4b8c      	ldr	r3, [pc, #560]	; (801722c <main+0xb64>)
 8016ffc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017000:	2b1c      	cmp	r3, #28
 8017002:	d036      	beq.n	8017072 <main+0x9aa>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8017004:	4b87      	ldr	r3, [pc, #540]	; (8017224 <main+0xb5c>)
 8017006:	f9b3 3000 	ldrsh.w	r3, [r3]
 801700a:	461a      	mov	r2, r3
 801700c:	4b87      	ldr	r3, [pc, #540]	; (801722c <main+0xb64>)
 801700e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8017012:	2b0f      	cmp	r3, #15
 8017014:	d02d      	beq.n	8017072 <main+0x9aa>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8017016:	4b83      	ldr	r3, [pc, #524]	; (8017224 <main+0xb5c>)
 8017018:	f9b3 3000 	ldrsh.w	r3, [r3]
 801701c:	461a      	mov	r2, r3
 801701e:	4b83      	ldr	r3, [pc, #524]	; (801722c <main+0xb64>)
 8017020:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017024:	2b0e      	cmp	r3, #14
 8017026:	d024      	beq.n	8017072 <main+0x9aa>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8017028:	4b7e      	ldr	r3, [pc, #504]	; (8017224 <main+0xb5c>)
 801702a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801702e:	461a      	mov	r2, r3
 8017030:	4b7e      	ldr	r3, [pc, #504]	; (801722c <main+0xb64>)
 8017032:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8017036:	2b0d      	cmp	r3, #13
 8017038:	d01b      	beq.n	8017072 <main+0x9aa>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 801703a:	4b7a      	ldr	r3, [pc, #488]	; (8017224 <main+0xb5c>)
 801703c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017040:	461a      	mov	r2, r3
 8017042:	4b7a      	ldr	r3, [pc, #488]	; (801722c <main+0xb64>)
 8017044:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017048:	2b1a      	cmp	r3, #26
 801704a:	d012      	beq.n	8017072 <main+0x9aa>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 801704c:	4b75      	ldr	r3, [pc, #468]	; (8017224 <main+0xb5c>)
 801704e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017052:	461a      	mov	r2, r3
 8017054:	4b75      	ldr	r3, [pc, #468]	; (801722c <main+0xb64>)
 8017056:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 801705a:	2b02      	cmp	r3, #2
 801705c:	d009      	beq.n	8017072 <main+0x9aa>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 801705e:	4b71      	ldr	r3, [pc, #452]	; (8017224 <main+0xb5c>)
 8017060:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017064:	461a      	mov	r2, r3
 8017066:	4b71      	ldr	r3, [pc, #452]	; (801722c <main+0xb64>)
 8017068:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801706c:	2b24      	cmp	r3, #36	; 0x24
 801706e:	f040 8129 	bne.w	80172c4 <main+0xbfc>
	            List[MenuNow[Current]].Val =MAX[MenuNow[Current]] ;
 8017072:	4b6c      	ldr	r3, [pc, #432]	; (8017224 <main+0xb5c>)
 8017074:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017078:	461a      	mov	r2, r3
 801707a:	4b6c      	ldr	r3, [pc, #432]	; (801722c <main+0xb64>)
 801707c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017080:	461a      	mov	r2, r3
 8017082:	4b68      	ldr	r3, [pc, #416]	; (8017224 <main+0xb5c>)
 8017084:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017088:	4619      	mov	r1, r3
 801708a:	4b68      	ldr	r3, [pc, #416]	; (801722c <main+0xb64>)
 801708c:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8017090:	4618      	mov	r0, r3
 8017092:	4b69      	ldr	r3, [pc, #420]	; (8017238 <main+0xb70>)
 8017094:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 8017098:	4a65      	ldr	r2, [pc, #404]	; (8017230 <main+0xb68>)
 801709a:	00c3      	lsls	r3, r0, #3
 801709c:	4413      	add	r3, r2
 801709e:	460a      	mov	r2, r1
 80170a0:	809a      	strh	r2, [r3, #4]
 80170a2:	e10f      	b.n	80172c4 <main+0xbfc>
	        } else {
	          if((MenuNow[Current] == VIEWPOSI)&&((List[MenuNow[Current]].Val) >=150 ))
 80170a4:	4b5f      	ldr	r3, [pc, #380]	; (8017224 <main+0xb5c>)
 80170a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80170aa:	461a      	mov	r2, r3
 80170ac:	4b5f      	ldr	r3, [pc, #380]	; (801722c <main+0xb64>)
 80170ae:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80170b2:	2b08      	cmp	r3, #8
 80170b4:	d12a      	bne.n	801710c <main+0xa44>
 80170b6:	4b5b      	ldr	r3, [pc, #364]	; (8017224 <main+0xb5c>)
 80170b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80170bc:	461a      	mov	r2, r3
 80170be:	4b5b      	ldr	r3, [pc, #364]	; (801722c <main+0xb64>)
 80170c0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80170c4:	4a5a      	ldr	r2, [pc, #360]	; (8017230 <main+0xb68>)
 80170c6:	00db      	lsls	r3, r3, #3
 80170c8:	4413      	add	r3, r2
 80170ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80170ce:	2b95      	cmp	r3, #149	; 0x95
 80170d0:	dd1c      	ble.n	801710c <main+0xa44>
	            List[MenuNow[Current]].Val-=25;
 80170d2:	4b54      	ldr	r3, [pc, #336]	; (8017224 <main+0xb5c>)
 80170d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80170d8:	461a      	mov	r2, r3
 80170da:	4b54      	ldr	r3, [pc, #336]	; (801722c <main+0xb64>)
 80170dc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80170e0:	4a53      	ldr	r2, [pc, #332]	; (8017230 <main+0xb68>)
 80170e2:	00db      	lsls	r3, r3, #3
 80170e4:	4413      	add	r3, r2
 80170e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80170ea:	b29b      	uxth	r3, r3
 80170ec:	3b19      	subs	r3, #25
 80170ee:	b29a      	uxth	r2, r3
 80170f0:	4b4c      	ldr	r3, [pc, #304]	; (8017224 <main+0xb5c>)
 80170f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80170f6:	4619      	mov	r1, r3
 80170f8:	4b4c      	ldr	r3, [pc, #304]	; (801722c <main+0xb64>)
 80170fa:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 80170fe:	b211      	sxth	r1, r2
 8017100:	4a4b      	ldr	r2, [pc, #300]	; (8017230 <main+0xb68>)
 8017102:	00db      	lsls	r3, r3, #3
 8017104:	4413      	add	r3, r2
 8017106:	460a      	mov	r2, r1
 8017108:	809a      	strh	r2, [r3, #4]
 801710a:	e0ad      	b.n	8017268 <main+0xba0>
	          else{
	          //============5.04�޸������߳�����������========
	            if(MenuNow[Current] == THRESHOLD){
 801710c:	4b45      	ldr	r3, [pc, #276]	; (8017224 <main+0xb5c>)
 801710e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017112:	461a      	mov	r2, r3
 8017114:	4b45      	ldr	r3, [pc, #276]	; (801722c <main+0xb64>)
 8017116:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801711a:	2b10      	cmp	r3, #16
 801711c:	d121      	bne.n	8017162 <main+0xa9a>
	              if((List[V0_POSI].Val + List[THRESHOLD].Val) > 2)  //����������
 801711e:	4b44      	ldr	r3, [pc, #272]	; (8017230 <main+0xb68>)
 8017120:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8017124:	461a      	mov	r2, r3
 8017126:	4b42      	ldr	r3, [pc, #264]	; (8017230 <main+0xb68>)
 8017128:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 801712c:	4413      	add	r3, r2
 801712e:	2b02      	cmp	r3, #2
 8017130:	f340 809a 	ble.w	8017268 <main+0xba0>
	                List[MenuNow[Current]].Val--;
 8017134:	4b3b      	ldr	r3, [pc, #236]	; (8017224 <main+0xb5c>)
 8017136:	f9b3 3000 	ldrsh.w	r3, [r3]
 801713a:	461a      	mov	r2, r3
 801713c:	4b3b      	ldr	r3, [pc, #236]	; (801722c <main+0xb64>)
 801713e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017142:	461a      	mov	r2, r3
 8017144:	493a      	ldr	r1, [pc, #232]	; (8017230 <main+0xb68>)
 8017146:	00d3      	lsls	r3, r2, #3
 8017148:	440b      	add	r3, r1
 801714a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801714e:	b29b      	uxth	r3, r3
 8017150:	3b01      	subs	r3, #1
 8017152:	b29b      	uxth	r3, r3
 8017154:	b218      	sxth	r0, r3
 8017156:	4936      	ldr	r1, [pc, #216]	; (8017230 <main+0xb68>)
 8017158:	00d3      	lsls	r3, r2, #3
 801715a:	440b      	add	r3, r1
 801715c:	4602      	mov	r2, r0
 801715e:	809a      	strh	r2, [r3, #4]
 8017160:	e082      	b.n	8017268 <main+0xba0>
	            }
	            else if(MenuNow[Current] == V0_POSI){
 8017162:	4b30      	ldr	r3, [pc, #192]	; (8017224 <main+0xb5c>)
 8017164:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017168:	461a      	mov	r2, r3
 801716a:	4b30      	ldr	r3, [pc, #192]	; (801722c <main+0xb64>)
 801716c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017170:	2b03      	cmp	r3, #3
 8017172:	d134      	bne.n	80171de <main+0xb16>
	              if((List[V0_POSI].Val + List[THRESHOLD].Val) <2){
 8017174:	4b2e      	ldr	r3, [pc, #184]	; (8017230 <main+0xb68>)
 8017176:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801717a:	461a      	mov	r2, r3
 801717c:	4b2c      	ldr	r3, [pc, #176]	; (8017230 <main+0xb68>)
 801717e:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8017182:	4413      	add	r3, r2
 8017184:	2b01      	cmp	r3, #1
 8017186:	dc13      	bgt.n	80171b0 <main+0xae8>
	                List[V0_POSI].Val--;
 8017188:	4b29      	ldr	r3, [pc, #164]	; (8017230 <main+0xb68>)
 801718a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801718e:	b29b      	uxth	r3, r3
 8017190:	3b01      	subs	r3, #1
 8017192:	b29b      	uxth	r3, r3
 8017194:	b21a      	sxth	r2, r3
 8017196:	4b26      	ldr	r3, [pc, #152]	; (8017230 <main+0xb68>)
 8017198:	839a      	strh	r2, [r3, #28]
	                List[THRESHOLD].Val++;
 801719a:	4b25      	ldr	r3, [pc, #148]	; (8017230 <main+0xb68>)
 801719c:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 80171a0:	b29b      	uxth	r3, r3
 80171a2:	3301      	adds	r3, #1
 80171a4:	b29b      	uxth	r3, r3
 80171a6:	b21a      	sxth	r2, r3
 80171a8:	4b21      	ldr	r3, [pc, #132]	; (8017230 <main+0xb68>)
 80171aa:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80171ae:	e05b      	b.n	8017268 <main+0xba0>
	              }else List[MenuNow[Current]].Val--;
 80171b0:	4b1c      	ldr	r3, [pc, #112]	; (8017224 <main+0xb5c>)
 80171b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80171b6:	461a      	mov	r2, r3
 80171b8:	4b1c      	ldr	r3, [pc, #112]	; (801722c <main+0xb64>)
 80171ba:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80171be:	461a      	mov	r2, r3
 80171c0:	491b      	ldr	r1, [pc, #108]	; (8017230 <main+0xb68>)
 80171c2:	00d3      	lsls	r3, r2, #3
 80171c4:	440b      	add	r3, r1
 80171c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80171ca:	b29b      	uxth	r3, r3
 80171cc:	3b01      	subs	r3, #1
 80171ce:	b29b      	uxth	r3, r3
 80171d0:	b218      	sxth	r0, r3
 80171d2:	4917      	ldr	r1, [pc, #92]	; (8017230 <main+0xb68>)
 80171d4:	00d3      	lsls	r3, r2, #3
 80171d6:	440b      	add	r3, r1
 80171d8:	4602      	mov	r2, r0
 80171da:	809a      	strh	r2, [r3, #4]
 80171dc:	e044      	b.n	8017268 <main+0xba0>
	            }
	            else if((MenuNow[Current] ==V1_POSI) && (List[V1_POSI].Val <= List[V2_POSI].Val))
 80171de:	4b11      	ldr	r3, [pc, #68]	; (8017224 <main+0xb5c>)
 80171e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80171e4:	461a      	mov	r2, r3
 80171e6:	4b11      	ldr	r3, [pc, #68]	; (801722c <main+0xb64>)
 80171e8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80171ec:	2b04      	cmp	r3, #4
 80171ee:	d125      	bne.n	801723c <main+0xb74>
 80171f0:	4b0f      	ldr	r3, [pc, #60]	; (8017230 <main+0xb68>)
 80171f2:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 80171f6:	4b0e      	ldr	r3, [pc, #56]	; (8017230 <main+0xb68>)
 80171f8:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80171fc:	429a      	cmp	r2, r3
 80171fe:	dc1d      	bgt.n	801723c <main+0xb74>
	            List[MenuNow[Current]].Val=List[V2_POSI].Val;
 8017200:	4b08      	ldr	r3, [pc, #32]	; (8017224 <main+0xb5c>)
 8017202:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017206:	461a      	mov	r2, r3
 8017208:	4b08      	ldr	r3, [pc, #32]	; (801722c <main+0xb64>)
 801720a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801720e:	4618      	mov	r0, r3
 8017210:	4b07      	ldr	r3, [pc, #28]	; (8017230 <main+0xb68>)
 8017212:	f9b3 102c 	ldrsh.w	r1, [r3, #44]	; 0x2c
 8017216:	4a06      	ldr	r2, [pc, #24]	; (8017230 <main+0xb68>)
 8017218:	00c3      	lsls	r3, r0, #3
 801721a:	4413      	add	r3, r2
 801721c:	460a      	mov	r2, r1
 801721e:	809a      	strh	r2, [r3, #4]
 8017220:	e022      	b.n	8017268 <main+0xba0>
 8017222:	bf00      	nop
 8017224:	200007a6 	.word	0x200007a6
 8017228:	20000796 	.word	0x20000796
 801722c:	2000053c 	.word	0x2000053c
 8017230:	2000029c 	.word	0x2000029c
 8017234:	08002214 	.word	0x08002214
 8017238:	080021b8 	.word	0x080021b8
	            else List[MenuNow[Current]].Val--;
 801723c:	4bb7      	ldr	r3, [pc, #732]	; (801751c <main+0xe54>)
 801723e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017242:	461a      	mov	r2, r3
 8017244:	4bb6      	ldr	r3, [pc, #728]	; (8017520 <main+0xe58>)
 8017246:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801724a:	461a      	mov	r2, r3
 801724c:	49b5      	ldr	r1, [pc, #724]	; (8017524 <main+0xe5c>)
 801724e:	00d3      	lsls	r3, r2, #3
 8017250:	440b      	add	r3, r1
 8017252:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017256:	b29b      	uxth	r3, r3
 8017258:	3b01      	subs	r3, #1
 801725a:	b29b      	uxth	r3, r3
 801725c:	b218      	sxth	r0, r3
 801725e:	49b1      	ldr	r1, [pc, #708]	; (8017524 <main+0xe5c>)
 8017260:	00d3      	lsls	r3, r2, #3
 8017262:	440b      	add	r3, r1
 8017264:	4602      	mov	r2, r0
 8017266:	809a      	strh	r2, [r3, #4]
	          }
	          //==============================================
	            if(MenuNow[Current] == SMPL_DPTH){
 8017268:	4bac      	ldr	r3, [pc, #688]	; (801751c <main+0xe54>)
 801726a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801726e:	461a      	mov	r2, r3
 8017270:	4bab      	ldr	r3, [pc, #684]	; (8017520 <main+0xe58>)
 8017272:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017276:	2b09      	cmp	r3, #9
 8017278:	d103      	bne.n	8017282 <main+0xbba>
	              List[VIEWPOSI].Val=1 ;
 801727a:	4baa      	ldr	r3, [pc, #680]	; (8017524 <main+0xe5c>)
 801727c:	2201      	movs	r2, #1
 801727e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	           }
	            if((MenuNow[Current] ==T2_POSI) && (List[T2_POSI].Val <= List[T1_POSI].Val))
 8017282:	4ba6      	ldr	r3, [pc, #664]	; (801751c <main+0xe54>)
 8017284:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017288:	461a      	mov	r2, r3
 801728a:	4ba5      	ldr	r3, [pc, #660]	; (8017520 <main+0xe58>)
 801728c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017290:	2b0b      	cmp	r3, #11
 8017292:	d117      	bne.n	80172c4 <main+0xbfc>
 8017294:	4ba3      	ldr	r3, [pc, #652]	; (8017524 <main+0xe5c>)
 8017296:	f9b3 205c 	ldrsh.w	r2, [r3, #92]	; 0x5c
 801729a:	4ba2      	ldr	r3, [pc, #648]	; (8017524 <main+0xe5c>)
 801729c:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 80172a0:	429a      	cmp	r2, r3
 80172a2:	dc0f      	bgt.n	80172c4 <main+0xbfc>
	              List[MenuNow[Current]].Val=List[T1_POSI].Val;
 80172a4:	4b9d      	ldr	r3, [pc, #628]	; (801751c <main+0xe54>)
 80172a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80172aa:	461a      	mov	r2, r3
 80172ac:	4b9c      	ldr	r3, [pc, #624]	; (8017520 <main+0xe58>)
 80172ae:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80172b2:	4618      	mov	r0, r3
 80172b4:	4b9b      	ldr	r3, [pc, #620]	; (8017524 <main+0xe5c>)
 80172b6:	f9b3 1054 	ldrsh.w	r1, [r3, #84]	; 0x54
 80172ba:	4a9a      	ldr	r2, [pc, #616]	; (8017524 <main+0xe5c>)
 80172bc:	00c3      	lsls	r3, r0, #3
 80172be:	4413      	add	r3, r2
 80172c0:	460a      	mov	r2, r1
 80172c2:	809a      	strh	r2, [r3, #4]
	        }
	        if(Current == TRG) Status &= ~STOP; // �ı�ͬ��ģʽ��ָ�����״̬
 80172c4:	4b95      	ldr	r3, [pc, #596]	; (801751c <main+0xe54>)
 80172c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80172ca:	2b02      	cmp	r3, #2
 80172cc:	f040 8217 	bne.w	80176fe <main+0x1036>
 80172d0:	4b95      	ldr	r3, [pc, #596]	; (8017528 <main+0xe60>)
 80172d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80172d6:	f023 0301 	bic.w	r3, r3, #1
 80172da:	b21a      	sxth	r2, r3
 80172dc:	4b92      	ldr	r3, [pc, #584]	; (8017528 <main+0xe60>)
 80172de:	801a      	strh	r2, [r3, #0]
	        break;
 80172e0:	e20d      	b.n	80176fe <main+0x1036>

	      case KEYCODE_RIGHT:
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 80172e2:	4b8e      	ldr	r3, [pc, #568]	; (801751c <main+0xe54>)
 80172e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80172e8:	2b07      	cmp	r3, #7
 80172ea:	d106      	bne.n	80172fa <main+0xc32>
 80172ec:	4b8f      	ldr	r3, [pc, #572]	; (801752c <main+0xe64>)
 80172ee:	781b      	ldrb	r3, [r3, #0]
 80172f0:	f003 0302 	and.w	r3, r3, #2
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	f000 8204 	beq.w	8017702 <main+0x103a>
	        List[MenuNow[Current]].Flg |= UPD;  // ˢ�±��ǰԭ��ʾ��Ŀ����
 80172fa:	4b88      	ldr	r3, [pc, #544]	; (801751c <main+0xe54>)
 80172fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017300:	461a      	mov	r2, r3
 8017302:	4b87      	ldr	r3, [pc, #540]	; (8017520 <main+0xe58>)
 8017304:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017308:	4a86      	ldr	r2, [pc, #536]	; (8017524 <main+0xe5c>)
 801730a:	00db      	lsls	r3, r3, #3
 801730c:	4413      	add	r3, r2
 801730e:	799b      	ldrb	r3, [r3, #6]
 8017310:	4a82      	ldr	r2, [pc, #520]	; (801751c <main+0xe54>)
 8017312:	f9b2 2000 	ldrsh.w	r2, [r2]
 8017316:	4611      	mov	r1, r2
 8017318:	4a81      	ldr	r2, [pc, #516]	; (8017520 <main+0xe58>)
 801731a:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 801731e:	4610      	mov	r0, r2
 8017320:	f043 0320 	orr.w	r3, r3, #32
 8017324:	b2d9      	uxtb	r1, r3
 8017326:	4a7f      	ldr	r2, [pc, #508]	; (8017524 <main+0xe5c>)
 8017328:	00c3      	lsls	r3, r0, #3
 801732a:	4413      	add	r3, r2
 801732c:	460a      	mov	r2, r1
 801732e:	719a      	strb	r2, [r3, #6]
	        if(List[MenuNow[Current]].Val >=MAX[MenuNow[Current]] ){
 8017330:	4b7a      	ldr	r3, [pc, #488]	; (801751c <main+0xe54>)
 8017332:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017336:	461a      	mov	r2, r3
 8017338:	4b79      	ldr	r3, [pc, #484]	; (8017520 <main+0xe58>)
 801733a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801733e:	4a79      	ldr	r2, [pc, #484]	; (8017524 <main+0xe5c>)
 8017340:	00db      	lsls	r3, r3, #3
 8017342:	4413      	add	r3, r2
 8017344:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8017348:	4b74      	ldr	r3, [pc, #464]	; (801751c <main+0xe54>)
 801734a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801734e:	4619      	mov	r1, r3
 8017350:	4b73      	ldr	r3, [pc, #460]	; (8017520 <main+0xe58>)
 8017352:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8017356:	4619      	mov	r1, r3
 8017358:	4b75      	ldr	r3, [pc, #468]	; (8017530 <main+0xe68>)
 801735a:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 801735e:	429a      	cmp	r2, r3
 8017360:	db73      	blt.n	801744a <main+0xd82>
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 8017362:	4b6e      	ldr	r3, [pc, #440]	; (801751c <main+0xe54>)
 8017364:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017368:	461a      	mov	r2, r3
 801736a:	4b6d      	ldr	r3, [pc, #436]	; (8017520 <main+0xe58>)
 801736c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017370:	2b01      	cmp	r3, #1
 8017372:	d051      	beq.n	8017418 <main+0xd50>
 8017374:	4b69      	ldr	r3, [pc, #420]	; (801751c <main+0xe54>)
 8017376:	f9b3 3000 	ldrsh.w	r3, [r3]
 801737a:	461a      	mov	r2, r3
 801737c:	4b68      	ldr	r3, [pc, #416]	; (8017520 <main+0xe58>)
 801737e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017382:	2b06      	cmp	r3, #6
 8017384:	d048      	beq.n	8017418 <main+0xd50>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8017386:	4b65      	ldr	r3, [pc, #404]	; (801751c <main+0xe54>)
 8017388:	f9b3 3000 	ldrsh.w	r3, [r3]
 801738c:	461a      	mov	r2, r3
 801738e:	4b64      	ldr	r3, [pc, #400]	; (8017520 <main+0xe58>)
 8017390:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 8017394:	2b0c      	cmp	r3, #12
 8017396:	d03f      	beq.n	8017418 <main+0xd50>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8017398:	4b60      	ldr	r3, [pc, #384]	; (801751c <main+0xe54>)
 801739a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801739e:	461a      	mov	r2, r3
 80173a0:	4b5f      	ldr	r3, [pc, #380]	; (8017520 <main+0xe58>)
 80173a2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80173a6:	2b1c      	cmp	r3, #28
 80173a8:	d036      	beq.n	8017418 <main+0xd50>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 80173aa:	4b5c      	ldr	r3, [pc, #368]	; (801751c <main+0xe54>)
 80173ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80173b0:	461a      	mov	r2, r3
 80173b2:	4b5b      	ldr	r3, [pc, #364]	; (8017520 <main+0xe58>)
 80173b4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 80173b8:	2b0f      	cmp	r3, #15
 80173ba:	d02d      	beq.n	8017418 <main+0xd50>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 80173bc:	4b57      	ldr	r3, [pc, #348]	; (801751c <main+0xe54>)
 80173be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80173c2:	461a      	mov	r2, r3
 80173c4:	4b56      	ldr	r3, [pc, #344]	; (8017520 <main+0xe58>)
 80173c6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80173ca:	2b0e      	cmp	r3, #14
 80173cc:	d024      	beq.n	8017418 <main+0xd50>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 80173ce:	4b53      	ldr	r3, [pc, #332]	; (801751c <main+0xe54>)
 80173d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80173d4:	461a      	mov	r2, r3
 80173d6:	4b52      	ldr	r3, [pc, #328]	; (8017520 <main+0xe58>)
 80173d8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 80173dc:	2b0d      	cmp	r3, #13
 80173de:	d01b      	beq.n	8017418 <main+0xd50>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 80173e0:	4b4e      	ldr	r3, [pc, #312]	; (801751c <main+0xe54>)
 80173e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80173e6:	461a      	mov	r2, r3
 80173e8:	4b4d      	ldr	r3, [pc, #308]	; (8017520 <main+0xe58>)
 80173ea:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80173ee:	2b1a      	cmp	r3, #26
 80173f0:	d012      	beq.n	8017418 <main+0xd50>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 80173f2:	4b4a      	ldr	r3, [pc, #296]	; (801751c <main+0xe54>)
 80173f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80173f8:	461a      	mov	r2, r3
 80173fa:	4b49      	ldr	r3, [pc, #292]	; (8017520 <main+0xe58>)
 80173fc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8017400:	2b02      	cmp	r3, #2
 8017402:	d009      	beq.n	8017418 <main+0xd50>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 8017404:	4b45      	ldr	r3, [pc, #276]	; (801751c <main+0xe54>)
 8017406:	f9b3 3000 	ldrsh.w	r3, [r3]
 801740a:	461a      	mov	r2, r3
 801740c:	4b44      	ldr	r3, [pc, #272]	; (8017520 <main+0xe58>)
 801740e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017412:	2b24      	cmp	r3, #36	; 0x24
 8017414:	f040 8154 	bne.w	80176c0 <main+0xff8>
	            List[MenuNow[Current]].Val =MIN[MenuNow[Current]] ;
 8017418:	4b40      	ldr	r3, [pc, #256]	; (801751c <main+0xe54>)
 801741a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801741e:	461a      	mov	r2, r3
 8017420:	4b3f      	ldr	r3, [pc, #252]	; (8017520 <main+0xe58>)
 8017422:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017426:	461a      	mov	r2, r3
 8017428:	4b3c      	ldr	r3, [pc, #240]	; (801751c <main+0xe54>)
 801742a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801742e:	4619      	mov	r1, r3
 8017430:	4b3b      	ldr	r3, [pc, #236]	; (8017520 <main+0xe58>)
 8017432:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8017436:	4618      	mov	r0, r3
 8017438:	4b3e      	ldr	r3, [pc, #248]	; (8017534 <main+0xe6c>)
 801743a:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 801743e:	4a39      	ldr	r2, [pc, #228]	; (8017524 <main+0xe5c>)
 8017440:	00c3      	lsls	r3, r0, #3
 8017442:	4413      	add	r3, r2
 8017444:	460a      	mov	r2, r1
 8017446:	809a      	strh	r2, [r3, #4]
 8017448:	e13a      	b.n	80176c0 <main+0xff8>
	        } else {
	            if(MenuNow[Current] == VIEWPOSI)
 801744a:	4b34      	ldr	r3, [pc, #208]	; (801751c <main+0xe54>)
 801744c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017450:	461a      	mov	r2, r3
 8017452:	4b33      	ldr	r3, [pc, #204]	; (8017520 <main+0xe58>)
 8017454:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017458:	2b08      	cmp	r3, #8
 801745a:	d16f      	bne.n	801753c <main+0xe74>
	            {
	              if(List[MenuNow[Current]].Val <(DEPTH[List[SMPL_DPTH].Val]-(350-List[SMPL_DPTH].Val)))
 801745c:	4b2f      	ldr	r3, [pc, #188]	; (801751c <main+0xe54>)
 801745e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017462:	461a      	mov	r2, r3
 8017464:	4b2e      	ldr	r3, [pc, #184]	; (8017520 <main+0xe58>)
 8017466:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801746a:	4a2e      	ldr	r2, [pc, #184]	; (8017524 <main+0xe5c>)
 801746c:	00db      	lsls	r3, r3, #3
 801746e:	4413      	add	r3, r2
 8017470:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017474:	461a      	mov	r2, r3
 8017476:	4b2b      	ldr	r3, [pc, #172]	; (8017524 <main+0xe5c>)
 8017478:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 801747c:	4619      	mov	r1, r3
 801747e:	4b2e      	ldr	r3, [pc, #184]	; (8017538 <main+0xe70>)
 8017480:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8017484:	4619      	mov	r1, r3
 8017486:	4b27      	ldr	r3, [pc, #156]	; (8017524 <main+0xe5c>)
 8017488:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 801748c:	f5c3 73af 	rsb	r3, r3, #350	; 0x15e
 8017490:	1acb      	subs	r3, r1, r3
 8017492:	429a      	cmp	r2, r3
 8017494:	f280 80f3 	bge.w	801767e <main+0xfb6>
	              {
	                if(List[MenuNow[Current]].Val >150 )
 8017498:	4b20      	ldr	r3, [pc, #128]	; (801751c <main+0xe54>)
 801749a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801749e:	461a      	mov	r2, r3
 80174a0:	4b1f      	ldr	r3, [pc, #124]	; (8017520 <main+0xe58>)
 80174a2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80174a6:	4a1f      	ldr	r2, [pc, #124]	; (8017524 <main+0xe5c>)
 80174a8:	00db      	lsls	r3, r3, #3
 80174aa:	4413      	add	r3, r2
 80174ac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80174b0:	2b96      	cmp	r3, #150	; 0x96
 80174b2:	dd1c      	ble.n	80174ee <main+0xe26>
	                  List[MenuNow[Current]].Val += 25;
 80174b4:	4b19      	ldr	r3, [pc, #100]	; (801751c <main+0xe54>)
 80174b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80174ba:	461a      	mov	r2, r3
 80174bc:	4b18      	ldr	r3, [pc, #96]	; (8017520 <main+0xe58>)
 80174be:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80174c2:	4a18      	ldr	r2, [pc, #96]	; (8017524 <main+0xe5c>)
 80174c4:	00db      	lsls	r3, r3, #3
 80174c6:	4413      	add	r3, r2
 80174c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80174cc:	b29b      	uxth	r3, r3
 80174ce:	3319      	adds	r3, #25
 80174d0:	b29a      	uxth	r2, r3
 80174d2:	4b12      	ldr	r3, [pc, #72]	; (801751c <main+0xe54>)
 80174d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80174d8:	4619      	mov	r1, r3
 80174da:	4b11      	ldr	r3, [pc, #68]	; (8017520 <main+0xe58>)
 80174dc:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 80174e0:	b211      	sxth	r1, r2
 80174e2:	4a10      	ldr	r2, [pc, #64]	; (8017524 <main+0xe5c>)
 80174e4:	00db      	lsls	r3, r3, #3
 80174e6:	4413      	add	r3, r2
 80174e8:	460a      	mov	r2, r1
 80174ea:	809a      	strh	r2, [r3, #4]
 80174ec:	e0c7      	b.n	801767e <main+0xfb6>
	                else
	                  List[MenuNow[Current]].Val++;
 80174ee:	4b0b      	ldr	r3, [pc, #44]	; (801751c <main+0xe54>)
 80174f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80174f4:	461a      	mov	r2, r3
 80174f6:	4b0a      	ldr	r3, [pc, #40]	; (8017520 <main+0xe58>)
 80174f8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80174fc:	461a      	mov	r2, r3
 80174fe:	4909      	ldr	r1, [pc, #36]	; (8017524 <main+0xe5c>)
 8017500:	00d3      	lsls	r3, r2, #3
 8017502:	440b      	add	r3, r1
 8017504:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017508:	b29b      	uxth	r3, r3
 801750a:	3301      	adds	r3, #1
 801750c:	b29b      	uxth	r3, r3
 801750e:	b218      	sxth	r0, r3
 8017510:	4904      	ldr	r1, [pc, #16]	; (8017524 <main+0xe5c>)
 8017512:	00d3      	lsls	r3, r2, #3
 8017514:	440b      	add	r3, r1
 8017516:	4602      	mov	r2, r0
 8017518:	809a      	strh	r2, [r3, #4]
 801751a:	e0b0      	b.n	801767e <main+0xfb6>
 801751c:	200007a6 	.word	0x200007a6
 8017520:	2000053c 	.word	0x2000053c
 8017524:	2000029c 	.word	0x2000029c
 8017528:	200007a8 	.word	0x200007a8
 801752c:	20000796 	.word	0x20000796
 8017530:	080021b8 	.word	0x080021b8
 8017534:	08002214 	.word	0x08002214
 8017538:	08002270 	.word	0x08002270
	              }
	            }
	            else{
	              //============4.27�޸������߳�����������========
	              if(MenuNow[Current] == THRESHOLD){
 801753c:	4b8d      	ldr	r3, [pc, #564]	; (8017774 <main+0x10ac>)
 801753e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017542:	461a      	mov	r2, r3
 8017544:	4b8c      	ldr	r3, [pc, #560]	; (8017778 <main+0x10b0>)
 8017546:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801754a:	2b10      	cmp	r3, #16
 801754c:	d121      	bne.n	8017592 <main+0xeca>
	                if((List[V0_POSI].Val + List[THRESHOLD].Val) < 198)
 801754e:	4b8b      	ldr	r3, [pc, #556]	; (801777c <main+0x10b4>)
 8017550:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8017554:	461a      	mov	r2, r3
 8017556:	4b89      	ldr	r3, [pc, #548]	; (801777c <main+0x10b4>)
 8017558:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 801755c:	4413      	add	r3, r2
 801755e:	2bc5      	cmp	r3, #197	; 0xc5
 8017560:	f300 808d 	bgt.w	801767e <main+0xfb6>
	                 List[MenuNow[Current]].Val++;
 8017564:	4b83      	ldr	r3, [pc, #524]	; (8017774 <main+0x10ac>)
 8017566:	f9b3 3000 	ldrsh.w	r3, [r3]
 801756a:	461a      	mov	r2, r3
 801756c:	4b82      	ldr	r3, [pc, #520]	; (8017778 <main+0x10b0>)
 801756e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017572:	461a      	mov	r2, r3
 8017574:	4981      	ldr	r1, [pc, #516]	; (801777c <main+0x10b4>)
 8017576:	00d3      	lsls	r3, r2, #3
 8017578:	440b      	add	r3, r1
 801757a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801757e:	b29b      	uxth	r3, r3
 8017580:	3301      	adds	r3, #1
 8017582:	b29b      	uxth	r3, r3
 8017584:	b218      	sxth	r0, r3
 8017586:	497d      	ldr	r1, [pc, #500]	; (801777c <main+0x10b4>)
 8017588:	00d3      	lsls	r3, r2, #3
 801758a:	440b      	add	r3, r1
 801758c:	4602      	mov	r2, r0
 801758e:	809a      	strh	r2, [r3, #4]
 8017590:	e075      	b.n	801767e <main+0xfb6>
	              }
	              else if(MenuNow[Current] == V0_POSI){
 8017592:	4b78      	ldr	r3, [pc, #480]	; (8017774 <main+0x10ac>)
 8017594:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017598:	461a      	mov	r2, r3
 801759a:	4b77      	ldr	r3, [pc, #476]	; (8017778 <main+0x10b0>)
 801759c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80175a0:	2b03      	cmp	r3, #3
 80175a2:	d134      	bne.n	801760e <main+0xf46>
	                if((List[V0_POSI].Val + List[THRESHOLD].Val) > 198){
 80175a4:	4b75      	ldr	r3, [pc, #468]	; (801777c <main+0x10b4>)
 80175a6:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80175aa:	461a      	mov	r2, r3
 80175ac:	4b73      	ldr	r3, [pc, #460]	; (801777c <main+0x10b4>)
 80175ae:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 80175b2:	4413      	add	r3, r2
 80175b4:	2bc6      	cmp	r3, #198	; 0xc6
 80175b6:	dd13      	ble.n	80175e0 <main+0xf18>
	                  List[V0_POSI].Val++;
 80175b8:	4b70      	ldr	r3, [pc, #448]	; (801777c <main+0x10b4>)
 80175ba:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80175be:	b29b      	uxth	r3, r3
 80175c0:	3301      	adds	r3, #1
 80175c2:	b29b      	uxth	r3, r3
 80175c4:	b21a      	sxth	r2, r3
 80175c6:	4b6d      	ldr	r3, [pc, #436]	; (801777c <main+0x10b4>)
 80175c8:	839a      	strh	r2, [r3, #28]
	                  List[THRESHOLD].Val--;
 80175ca:	4b6c      	ldr	r3, [pc, #432]	; (801777c <main+0x10b4>)
 80175cc:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 80175d0:	b29b      	uxth	r3, r3
 80175d2:	3b01      	subs	r3, #1
 80175d4:	b29b      	uxth	r3, r3
 80175d6:	b21a      	sxth	r2, r3
 80175d8:	4b68      	ldr	r3, [pc, #416]	; (801777c <main+0x10b4>)
 80175da:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80175de:	e04e      	b.n	801767e <main+0xfb6>
	                }else List[MenuNow[Current]].Val++;
 80175e0:	4b64      	ldr	r3, [pc, #400]	; (8017774 <main+0x10ac>)
 80175e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80175e6:	461a      	mov	r2, r3
 80175e8:	4b63      	ldr	r3, [pc, #396]	; (8017778 <main+0x10b0>)
 80175ea:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80175ee:	461a      	mov	r2, r3
 80175f0:	4962      	ldr	r1, [pc, #392]	; (801777c <main+0x10b4>)
 80175f2:	00d3      	lsls	r3, r2, #3
 80175f4:	440b      	add	r3, r1
 80175f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80175fa:	b29b      	uxth	r3, r3
 80175fc:	3301      	adds	r3, #1
 80175fe:	b29b      	uxth	r3, r3
 8017600:	b218      	sxth	r0, r3
 8017602:	495e      	ldr	r1, [pc, #376]	; (801777c <main+0x10b4>)
 8017604:	00d3      	lsls	r3, r2, #3
 8017606:	440b      	add	r3, r1
 8017608:	4602      	mov	r2, r0
 801760a:	809a      	strh	r2, [r3, #4]
 801760c:	e037      	b.n	801767e <main+0xfb6>
	              }
	              else if((MenuNow[Current] ==V2_POSI) && (List[V2_POSI].Val >= List[V1_POSI].Val))
 801760e:	4b59      	ldr	r3, [pc, #356]	; (8017774 <main+0x10ac>)
 8017610:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017614:	461a      	mov	r2, r3
 8017616:	4b58      	ldr	r3, [pc, #352]	; (8017778 <main+0x10b0>)
 8017618:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801761c:	2b05      	cmp	r3, #5
 801761e:	d118      	bne.n	8017652 <main+0xf8a>
 8017620:	4b56      	ldr	r3, [pc, #344]	; (801777c <main+0x10b4>)
 8017622:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 8017626:	4b55      	ldr	r3, [pc, #340]	; (801777c <main+0x10b4>)
 8017628:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 801762c:	429a      	cmp	r2, r3
 801762e:	db10      	blt.n	8017652 <main+0xf8a>
	                List[MenuNow[Current]].Val=List[V1_POSI].Val;
 8017630:	4b50      	ldr	r3, [pc, #320]	; (8017774 <main+0x10ac>)
 8017632:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017636:	461a      	mov	r2, r3
 8017638:	4b4f      	ldr	r3, [pc, #316]	; (8017778 <main+0x10b0>)
 801763a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801763e:	4618      	mov	r0, r3
 8017640:	4b4e      	ldr	r3, [pc, #312]	; (801777c <main+0x10b4>)
 8017642:	f9b3 1024 	ldrsh.w	r1, [r3, #36]	; 0x24
 8017646:	4a4d      	ldr	r2, [pc, #308]	; (801777c <main+0x10b4>)
 8017648:	00c3      	lsls	r3, r0, #3
 801764a:	4413      	add	r3, r2
 801764c:	460a      	mov	r2, r1
 801764e:	809a      	strh	r2, [r3, #4]
 8017650:	e015      	b.n	801767e <main+0xfb6>
	              else List[MenuNow[Current]].Val++;
 8017652:	4b48      	ldr	r3, [pc, #288]	; (8017774 <main+0x10ac>)
 8017654:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017658:	461a      	mov	r2, r3
 801765a:	4b47      	ldr	r3, [pc, #284]	; (8017778 <main+0x10b0>)
 801765c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017660:	461a      	mov	r2, r3
 8017662:	4946      	ldr	r1, [pc, #280]	; (801777c <main+0x10b4>)
 8017664:	00d3      	lsls	r3, r2, #3
 8017666:	440b      	add	r3, r1
 8017668:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801766c:	b29b      	uxth	r3, r3
 801766e:	3301      	adds	r3, #1
 8017670:	b29b      	uxth	r3, r3
 8017672:	b218      	sxth	r0, r3
 8017674:	4941      	ldr	r1, [pc, #260]	; (801777c <main+0x10b4>)
 8017676:	00d3      	lsls	r3, r2, #3
 8017678:	440b      	add	r3, r1
 801767a:	4602      	mov	r2, r0
 801767c:	809a      	strh	r2, [r3, #4]
	            }
	            //==============================================
	            if((MenuNow[Current] ==T1_POSI) && (List[T1_POSI].Val >= List[T2_POSI].Val))
 801767e:	4b3d      	ldr	r3, [pc, #244]	; (8017774 <main+0x10ac>)
 8017680:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017684:	461a      	mov	r2, r3
 8017686:	4b3c      	ldr	r3, [pc, #240]	; (8017778 <main+0x10b0>)
 8017688:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801768c:	2b0a      	cmp	r3, #10
 801768e:	d117      	bne.n	80176c0 <main+0xff8>
 8017690:	4b3a      	ldr	r3, [pc, #232]	; (801777c <main+0x10b4>)
 8017692:	f9b3 2054 	ldrsh.w	r2, [r3, #84]	; 0x54
 8017696:	4b39      	ldr	r3, [pc, #228]	; (801777c <main+0x10b4>)
 8017698:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 801769c:	429a      	cmp	r2, r3
 801769e:	db0f      	blt.n	80176c0 <main+0xff8>
	               List[MenuNow[Current]].Val=List[T2_POSI].Val;
 80176a0:	4b34      	ldr	r3, [pc, #208]	; (8017774 <main+0x10ac>)
 80176a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80176a6:	461a      	mov	r2, r3
 80176a8:	4b33      	ldr	r3, [pc, #204]	; (8017778 <main+0x10b0>)
 80176aa:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80176ae:	4618      	mov	r0, r3
 80176b0:	4b32      	ldr	r3, [pc, #200]	; (801777c <main+0x10b4>)
 80176b2:	f9b3 105c 	ldrsh.w	r1, [r3, #92]	; 0x5c
 80176b6:	4a31      	ldr	r2, [pc, #196]	; (801777c <main+0x10b4>)
 80176b8:	00c3      	lsls	r3, r0, #3
 80176ba:	4413      	add	r3, r2
 80176bc:	460a      	mov	r2, r1
 80176be:	809a      	strh	r2, [r3, #4]
	        }
	        if(Current == TRG) {Status &= ~STOP; // �ı�ͬ��ģʽ��ָ�����״̬
 80176c0:	4b2c      	ldr	r3, [pc, #176]	; (8017774 <main+0x10ac>)
 80176c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80176c6:	2b02      	cmp	r3, #2
 80176c8:	d11d      	bne.n	8017706 <main+0x103e>
 80176ca:	4b2d      	ldr	r3, [pc, #180]	; (8017780 <main+0x10b8>)
 80176cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80176d0:	f023 0301 	bic.w	r3, r3, #1
 80176d4:	b21a      	sxth	r2, r3
 80176d6:	4b2a      	ldr	r3, [pc, #168]	; (8017780 <main+0x10b8>)
 80176d8:	801a      	strh	r2, [r3, #0]
	        if(List[SYNCMODE].Val==SINGL)ADC_Start(); }
 80176da:	4b28      	ldr	r3, [pc, #160]	; (801777c <main+0x10b4>)
 80176dc:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 80176e0:	2b04      	cmp	r3, #4
 80176e2:	d110      	bne.n	8017706 <main+0x103e>
 80176e4:	f7f5 f85a 	bl	800c79c <ADC_Start>
	        break;
 80176e8:	e00d      	b.n	8017706 <main+0x103e>
	         break;
 80176ea:	bf00      	nop
 80176ec:	e00c      	b.n	8017708 <main+0x1040>
	         break;
 80176ee:	bf00      	nop
 80176f0:	e00a      	b.n	8017708 <main+0x1040>
	        break;
 80176f2:	bf00      	nop
 80176f4:	e008      	b.n	8017708 <main+0x1040>
	        break;
 80176f6:	bf00      	nop
 80176f8:	e006      	b.n	8017708 <main+0x1040>
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 80176fa:	bf00      	nop
 80176fc:	e004      	b.n	8017708 <main+0x1040>
	        break;
 80176fe:	bf00      	nop
 8017700:	e002      	b.n	8017708 <main+0x1040>
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 8017702:	bf00      	nop
 8017704:	e000      	b.n	8017708 <main+0x1040>
	        break;
 8017706:	bf00      	nop

	     } //switch end
	     List[MenuNow[Current]].Flg |= UPD;
 8017708:	4b1a      	ldr	r3, [pc, #104]	; (8017774 <main+0x10ac>)
 801770a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801770e:	461a      	mov	r2, r3
 8017710:	4b19      	ldr	r3, [pc, #100]	; (8017778 <main+0x10b0>)
 8017712:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017716:	4a19      	ldr	r2, [pc, #100]	; (801777c <main+0x10b4>)
 8017718:	00db      	lsls	r3, r3, #3
 801771a:	4413      	add	r3, r2
 801771c:	799b      	ldrb	r3, [r3, #6]
 801771e:	4a15      	ldr	r2, [pc, #84]	; (8017774 <main+0x10ac>)
 8017720:	f9b2 2000 	ldrsh.w	r2, [r2]
 8017724:	4611      	mov	r1, r2
 8017726:	4a14      	ldr	r2, [pc, #80]	; (8017778 <main+0x10b0>)
 8017728:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 801772c:	4610      	mov	r0, r2
 801772e:	f043 0320 	orr.w	r3, r3, #32
 8017732:	b2d9      	uxtb	r1, r3
 8017734:	4a11      	ldr	r2, [pc, #68]	; (801777c <main+0x10b4>)
 8017736:	00c3      	lsls	r3, r0, #3
 8017738:	4413      	add	r3, r2
 801773a:	460a      	mov	r2, r1
 801773c:	719a      	strb	r2, [r3, #6]
	     StdBy_Time  = List[STANDBY].Val * MIN_UNIT;  //����
 801773e:	4b0f      	ldr	r3, [pc, #60]	; (801777c <main+0x10b4>)
 8017740:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 8017744:	b29b      	uxth	r3, r3
 8017746:	461a      	mov	r2, r3
 8017748:	0112      	lsls	r2, r2, #4
 801774a:	1ad3      	subs	r3, r2, r3
 801774c:	009b      	lsls	r3, r3, #2
 801774e:	b29b      	uxth	r3, r3
 8017750:	b21a      	sxth	r2, r3
 8017752:	4b0c      	ldr	r3, [pc, #48]	; (8017784 <main+0x10bc>)
 8017754:	801a      	strh	r2, [r3, #0]

	      if(PopType & LIST_POP) Show_List();
 8017756:	4b0c      	ldr	r3, [pc, #48]	; (8017788 <main+0x10c0>)
 8017758:	781b      	ldrb	r3, [r3, #0]
 801775a:	f003 0302 	and.w	r3, r3, #2
 801775e:	2b00      	cmp	r3, #0
 8017760:	d001      	beq.n	8017766 <main+0x109e>
 8017762:	f7fd f97d 	bl	8014a60 <Show_List>
	      Update_Title();
 8017766:	f7fa ffb5 	bl	80126d4 <Update_Title>
	      Key_Buffer = 0;
 801776a:	4b08      	ldr	r3, [pc, #32]	; (801778c <main+0x10c4>)
 801776c:	2200      	movs	r2, #0
 801776e:	701a      	strb	r2, [r3, #0]
	    if((List[STANDBY].Val != 0)&&(StdBy_Time == 0))
 8017770:	f7ff b85b 	b.w	801682a <main+0x162>
 8017774:	200007a6 	.word	0x200007a6
 8017778:	2000053c 	.word	0x2000053c
 801777c:	2000029c 	.word	0x2000029c
 8017780:	200007a8 	.word	0x200007a8
 8017784:	200007a4 	.word	0x200007a4
 8017788:	20000796 	.word	0x20000796
 801778c:	20000781 	.word	0x20000781

08017790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8017790:	b580      	push	{r7, lr}
 8017792:	b094      	sub	sp, #80	; 0x50
 8017794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8017796:	f107 031c 	add.w	r3, r7, #28
 801779a:	2234      	movs	r2, #52	; 0x34
 801779c:	2100      	movs	r1, #0
 801779e:	4618      	mov	r0, r3
 80177a0:	f00b fc28 	bl	8022ff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80177a4:	f107 0308 	add.w	r3, r7, #8
 80177a8:	2200      	movs	r2, #0
 80177aa:	601a      	str	r2, [r3, #0]
 80177ac:	605a      	str	r2, [r3, #4]
 80177ae:	609a      	str	r2, [r3, #8]
 80177b0:	60da      	str	r2, [r3, #12]
 80177b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80177b4:	2300      	movs	r3, #0
 80177b6:	607b      	str	r3, [r7, #4]
 80177b8:	4b2d      	ldr	r3, [pc, #180]	; (8017870 <SystemClock_Config+0xe0>)
 80177ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177bc:	4a2c      	ldr	r2, [pc, #176]	; (8017870 <SystemClock_Config+0xe0>)
 80177be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80177c2:	6413      	str	r3, [r2, #64]	; 0x40
 80177c4:	4b2a      	ldr	r3, [pc, #168]	; (8017870 <SystemClock_Config+0xe0>)
 80177c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80177cc:	607b      	str	r3, [r7, #4]
 80177ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80177d0:	2300      	movs	r3, #0
 80177d2:	603b      	str	r3, [r7, #0]
 80177d4:	4b27      	ldr	r3, [pc, #156]	; (8017874 <SystemClock_Config+0xe4>)
 80177d6:	681b      	ldr	r3, [r3, #0]
 80177d8:	4a26      	ldr	r2, [pc, #152]	; (8017874 <SystemClock_Config+0xe4>)
 80177da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80177de:	6013      	str	r3, [r2, #0]
 80177e0:	4b24      	ldr	r3, [pc, #144]	; (8017874 <SystemClock_Config+0xe4>)
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80177e8:	603b      	str	r3, [r7, #0]
 80177ea:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80177ec:	2301      	movs	r3, #1
 80177ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80177f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80177f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80177f6:	2302      	movs	r3, #2
 80177f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80177fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80177fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8017800:	2319      	movs	r3, #25
 8017802:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8017804:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8017808:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 801780a:	2302      	movs	r3, #2
 801780c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 5;
 801780e:	2305      	movs	r3, #5
 8017810:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8017812:	2302      	movs	r3, #2
 8017814:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8017816:	f107 031c 	add.w	r3, r7, #28
 801781a:	4618      	mov	r0, r3
 801781c:	f004 fb72 	bl	801bf04 <HAL_RCC_OscConfig>
 8017820:	4603      	mov	r3, r0
 8017822:	2b00      	cmp	r3, #0
 8017824:	d001      	beq.n	801782a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8017826:	f000 fc1d 	bl	8018064 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 801782a:	f003 fda3 	bl	801b374 <HAL_PWREx_EnableOverDrive>
 801782e:	4603      	mov	r3, r0
 8017830:	2b00      	cmp	r3, #0
 8017832:	d001      	beq.n	8017838 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8017834:	f000 fc16 	bl	8018064 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8017838:	230f      	movs	r3, #15
 801783a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801783c:	2302      	movs	r3, #2
 801783e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8017840:	2300      	movs	r3, #0
 8017842:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8017844:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8017848:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 801784a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801784e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8017850:	f107 0308 	add.w	r3, r7, #8
 8017854:	2105      	movs	r1, #5
 8017856:	4618      	mov	r0, r3
 8017858:	f003 fddc 	bl	801b414 <HAL_RCC_ClockConfig>
 801785c:	4603      	mov	r3, r0
 801785e:	2b00      	cmp	r3, #0
 8017860:	d001      	beq.n	8017866 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8017862:	f000 fbff 	bl	8018064 <Error_Handler>
  }
}
 8017866:	bf00      	nop
 8017868:	3750      	adds	r7, #80	; 0x50
 801786a:	46bd      	mov	sp, r7
 801786c:	bd80      	pop	{r7, pc}
 801786e:	bf00      	nop
 8017870:	40023800 	.word	0x40023800
 8017874:	40007000 	.word	0x40007000

08017878 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8017878:	b580      	push	{r7, lr}
 801787a:	b084      	sub	sp, #16
 801787c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 801787e:	463b      	mov	r3, r7
 8017880:	2200      	movs	r2, #0
 8017882:	601a      	str	r2, [r3, #0]
 8017884:	605a      	str	r2, [r3, #4]
 8017886:	609a      	str	r2, [r3, #8]
 8017888:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 801788a:	4b22      	ldr	r3, [pc, #136]	; (8017914 <MX_ADC1_Init+0x9c>)
 801788c:	4a22      	ldr	r2, [pc, #136]	; (8017918 <MX_ADC1_Init+0xa0>)
 801788e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8017890:	4b20      	ldr	r3, [pc, #128]	; (8017914 <MX_ADC1_Init+0x9c>)
 8017892:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8017896:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8017898:	4b1e      	ldr	r3, [pc, #120]	; (8017914 <MX_ADC1_Init+0x9c>)
 801789a:	2200      	movs	r2, #0
 801789c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 801789e:	4b1d      	ldr	r3, [pc, #116]	; (8017914 <MX_ADC1_Init+0x9c>)
 80178a0:	2200      	movs	r2, #0
 80178a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80178a4:	4b1b      	ldr	r3, [pc, #108]	; (8017914 <MX_ADC1_Init+0x9c>)
 80178a6:	2200      	movs	r2, #0
 80178a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80178aa:	4b1a      	ldr	r3, [pc, #104]	; (8017914 <MX_ADC1_Init+0x9c>)
 80178ac:	2200      	movs	r2, #0
 80178ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80178b2:	4b18      	ldr	r3, [pc, #96]	; (8017914 <MX_ADC1_Init+0x9c>)
 80178b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80178b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 80178ba:	4b16      	ldr	r3, [pc, #88]	; (8017914 <MX_ADC1_Init+0x9c>)
 80178bc:	2200      	movs	r2, #0
 80178be:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80178c0:	4b14      	ldr	r3, [pc, #80]	; (8017914 <MX_ADC1_Init+0x9c>)
 80178c2:	2200      	movs	r2, #0
 80178c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80178c6:	4b13      	ldr	r3, [pc, #76]	; (8017914 <MX_ADC1_Init+0x9c>)
 80178c8:	2201      	movs	r2, #1
 80178ca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80178cc:	4b11      	ldr	r3, [pc, #68]	; (8017914 <MX_ADC1_Init+0x9c>)
 80178ce:	2200      	movs	r2, #0
 80178d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80178d4:	4b0f      	ldr	r3, [pc, #60]	; (8017914 <MX_ADC1_Init+0x9c>)
 80178d6:	2201      	movs	r2, #1
 80178d8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80178da:	480e      	ldr	r0, [pc, #56]	; (8017914 <MX_ADC1_Init+0x9c>)
 80178dc:	f000 ff7a 	bl	80187d4 <HAL_ADC_Init>
 80178e0:	4603      	mov	r3, r0
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	d001      	beq.n	80178ea <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80178e6:	f000 fbbd 	bl	8018064 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80178ea:	2306      	movs	r3, #6
 80178ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80178ee:	2301      	movs	r3, #1
 80178f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80178f2:	2300      	movs	r3, #0
 80178f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80178f6:	463b      	mov	r3, r7
 80178f8:	4619      	mov	r1, r3
 80178fa:	4806      	ldr	r0, [pc, #24]	; (8017914 <MX_ADC1_Init+0x9c>)
 80178fc:	f000 ffae 	bl	801885c <HAL_ADC_ConfigChannel>
 8017900:	4603      	mov	r3, r0
 8017902:	2b00      	cmp	r3, #0
 8017904:	d001      	beq.n	801790a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8017906:	f000 fbad 	bl	8018064 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 801790a:	bf00      	nop
 801790c:	3710      	adds	r7, #16
 801790e:	46bd      	mov	sp, r7
 8017910:	bd80      	pop	{r7, pc}
 8017912:	bf00      	nop
 8017914:	20006a84 	.word	0x20006a84
 8017918:	40012000 	.word	0x40012000

0801791c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 801791c:	b580      	push	{r7, lr}
 801791e:	b084      	sub	sp, #16
 8017920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8017922:	463b      	mov	r3, r7
 8017924:	2200      	movs	r2, #0
 8017926:	601a      	str	r2, [r3, #0]
 8017928:	605a      	str	r2, [r3, #4]
 801792a:	609a      	str	r2, [r3, #8]
 801792c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 801792e:	4b22      	ldr	r3, [pc, #136]	; (80179b8 <MX_ADC2_Init+0x9c>)
 8017930:	4a22      	ldr	r2, [pc, #136]	; (80179bc <MX_ADC2_Init+0xa0>)
 8017932:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8017934:	4b20      	ldr	r3, [pc, #128]	; (80179b8 <MX_ADC2_Init+0x9c>)
 8017936:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801793a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 801793c:	4b1e      	ldr	r3, [pc, #120]	; (80179b8 <MX_ADC2_Init+0x9c>)
 801793e:	2200      	movs	r2, #0
 8017940:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8017942:	4b1d      	ldr	r3, [pc, #116]	; (80179b8 <MX_ADC2_Init+0x9c>)
 8017944:	2200      	movs	r2, #0
 8017946:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8017948:	4b1b      	ldr	r3, [pc, #108]	; (80179b8 <MX_ADC2_Init+0x9c>)
 801794a:	2200      	movs	r2, #0
 801794c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 801794e:	4b1a      	ldr	r3, [pc, #104]	; (80179b8 <MX_ADC2_Init+0x9c>)
 8017950:	2200      	movs	r2, #0
 8017952:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8017956:	4b18      	ldr	r3, [pc, #96]	; (80179b8 <MX_ADC2_Init+0x9c>)
 8017958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801795c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 801795e:	4b16      	ldr	r3, [pc, #88]	; (80179b8 <MX_ADC2_Init+0x9c>)
 8017960:	2200      	movs	r2, #0
 8017962:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8017964:	4b14      	ldr	r3, [pc, #80]	; (80179b8 <MX_ADC2_Init+0x9c>)
 8017966:	2200      	movs	r2, #0
 8017968:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 801796a:	4b13      	ldr	r3, [pc, #76]	; (80179b8 <MX_ADC2_Init+0x9c>)
 801796c:	2201      	movs	r2, #1
 801796e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8017970:	4b11      	ldr	r3, [pc, #68]	; (80179b8 <MX_ADC2_Init+0x9c>)
 8017972:	2200      	movs	r2, #0
 8017974:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8017978:	4b0f      	ldr	r3, [pc, #60]	; (80179b8 <MX_ADC2_Init+0x9c>)
 801797a:	2201      	movs	r2, #1
 801797c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 801797e:	480e      	ldr	r0, [pc, #56]	; (80179b8 <MX_ADC2_Init+0x9c>)
 8017980:	f000 ff28 	bl	80187d4 <HAL_ADC_Init>
 8017984:	4603      	mov	r3, r0
 8017986:	2b00      	cmp	r3, #0
 8017988:	d001      	beq.n	801798e <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 801798a:	f000 fb6b 	bl	8018064 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 801798e:	2307      	movs	r3, #7
 8017990:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8017992:	2301      	movs	r3, #1
 8017994:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8017996:	2300      	movs	r3, #0
 8017998:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 801799a:	463b      	mov	r3, r7
 801799c:	4619      	mov	r1, r3
 801799e:	4806      	ldr	r0, [pc, #24]	; (80179b8 <MX_ADC2_Init+0x9c>)
 80179a0:	f000 ff5c 	bl	801885c <HAL_ADC_ConfigChannel>
 80179a4:	4603      	mov	r3, r0
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	d001      	beq.n	80179ae <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 80179aa:	f000 fb5b 	bl	8018064 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80179ae:	bf00      	nop
 80179b0:	3710      	adds	r7, #16
 80179b2:	46bd      	mov	sp, r7
 80179b4:	bd80      	pop	{r7, pc}
 80179b6:	bf00      	nop
 80179b8:	200068f4 	.word	0x200068f4
 80179bc:	40012100 	.word	0x40012100

080179c0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80179c0:	b580      	push	{r7, lr}
 80179c2:	b082      	sub	sp, #8
 80179c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80179c6:	463b      	mov	r3, r7
 80179c8:	2200      	movs	r2, #0
 80179ca:	601a      	str	r2, [r3, #0]
 80179cc:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80179ce:	4b19      	ldr	r3, [pc, #100]	; (8017a34 <MX_DAC_Init+0x74>)
 80179d0:	4a19      	ldr	r2, [pc, #100]	; (8017a38 <MX_DAC_Init+0x78>)
 80179d2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80179d4:	4817      	ldr	r0, [pc, #92]	; (8017a34 <MX_DAC_Init+0x74>)
 80179d6:	f001 fa80 	bl	8018eda <HAL_DAC_Init>
 80179da:	4603      	mov	r3, r0
 80179dc:	2b00      	cmp	r3, #0
 80179de:	d001      	beq.n	80179e4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80179e0:	f000 fb40 	bl	8018064 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80179e4:	2300      	movs	r3, #0
 80179e6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80179e8:	2300      	movs	r3, #0
 80179ea:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80179ec:	463b      	mov	r3, r7
 80179ee:	2200      	movs	r2, #0
 80179f0:	4619      	mov	r1, r3
 80179f2:	4810      	ldr	r0, [pc, #64]	; (8017a34 <MX_DAC_Init+0x74>)
 80179f4:	f001 fab8 	bl	8018f68 <HAL_DAC_ConfigChannel>
 80179f8:	4603      	mov	r3, r0
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	d001      	beq.n	8017a02 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80179fe:	f000 fb31 	bl	8018064 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8017a02:	2302      	movs	r3, #2
 8017a04:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8017a06:	463b      	mov	r3, r7
 8017a08:	2210      	movs	r2, #16
 8017a0a:	4619      	mov	r1, r3
 8017a0c:	4809      	ldr	r0, [pc, #36]	; (8017a34 <MX_DAC_Init+0x74>)
 8017a0e:	f001 faab 	bl	8018f68 <HAL_DAC_ConfigChannel>
 8017a12:	4603      	mov	r3, r0
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	d001      	beq.n	8017a1c <MX_DAC_Init+0x5c>
  {
    Error_Handler();
 8017a18:	f000 fb24 	bl	8018064 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 620);  //(620*4095)/330;//50mv
 8017a1c:	f44f 731b 	mov.w	r3, #620	; 0x26c
 8017a20:	2200      	movs	r2, #0
 8017a22:	2110      	movs	r1, #16
 8017a24:	4803      	ldr	r0, [pc, #12]	; (8017a34 <MX_DAC_Init+0x74>)
 8017a26:	f001 fa7a 	bl	8018f1e <HAL_DAC_SetValue>
  /* USER CODE END DAC_Init 2 */

}
 8017a2a:	bf00      	nop
 8017a2c:	3708      	adds	r7, #8
 8017a2e:	46bd      	mov	sp, r7
 8017a30:	bd80      	pop	{r7, pc}
 8017a32:	bf00      	nop
 8017a34:	20006b04 	.word	0x20006b04
 8017a38:	40007400 	.word	0x40007400

08017a3c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8017a3c:	b580      	push	{r7, lr}
 8017a3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8017a40:	4b17      	ldr	r3, [pc, #92]	; (8017aa0 <MX_SPI2_Init+0x64>)
 8017a42:	4a18      	ldr	r2, [pc, #96]	; (8017aa4 <MX_SPI2_Init+0x68>)
 8017a44:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8017a46:	4b16      	ldr	r3, [pc, #88]	; (8017aa0 <MX_SPI2_Init+0x64>)
 8017a48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8017a4c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8017a4e:	4b14      	ldr	r3, [pc, #80]	; (8017aa0 <MX_SPI2_Init+0x64>)
 8017a50:	2200      	movs	r2, #0
 8017a52:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8017a54:	4b12      	ldr	r3, [pc, #72]	; (8017aa0 <MX_SPI2_Init+0x64>)
 8017a56:	2200      	movs	r2, #0
 8017a58:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8017a5a:	4b11      	ldr	r3, [pc, #68]	; (8017aa0 <MX_SPI2_Init+0x64>)
 8017a5c:	2202      	movs	r2, #2
 8017a5e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8017a60:	4b0f      	ldr	r3, [pc, #60]	; (8017aa0 <MX_SPI2_Init+0x64>)
 8017a62:	2201      	movs	r2, #1
 8017a64:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8017a66:	4b0e      	ldr	r3, [pc, #56]	; (8017aa0 <MX_SPI2_Init+0x64>)
 8017a68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017a6c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8017a6e:	4b0c      	ldr	r3, [pc, #48]	; (8017aa0 <MX_SPI2_Init+0x64>)
 8017a70:	2200      	movs	r2, #0
 8017a72:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8017a74:	4b0a      	ldr	r3, [pc, #40]	; (8017aa0 <MX_SPI2_Init+0x64>)
 8017a76:	2280      	movs	r2, #128	; 0x80
 8017a78:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8017a7a:	4b09      	ldr	r3, [pc, #36]	; (8017aa0 <MX_SPI2_Init+0x64>)
 8017a7c:	2200      	movs	r2, #0
 8017a7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8017a80:	4b07      	ldr	r3, [pc, #28]	; (8017aa0 <MX_SPI2_Init+0x64>)
 8017a82:	2200      	movs	r2, #0
 8017a84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8017a86:	4b06      	ldr	r3, [pc, #24]	; (8017aa0 <MX_SPI2_Init+0x64>)
 8017a88:	220a      	movs	r2, #10
 8017a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8017a8c:	4804      	ldr	r0, [pc, #16]	; (8017aa0 <MX_SPI2_Init+0x64>)
 8017a8e:	f004 fcd7 	bl	801c440 <HAL_SPI_Init>
 8017a92:	4603      	mov	r3, r0
 8017a94:	2b00      	cmp	r3, #0
 8017a96:	d001      	beq.n	8017a9c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8017a98:	f000 fae4 	bl	8018064 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8017a9c:	bf00      	nop
 8017a9e:	bd80      	pop	{r7, pc}
 8017aa0:	2000689c 	.word	0x2000689c
 8017aa4:	40003800 	.word	0x40003800

08017aa8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8017aa8:	b580      	push	{r7, lr}
 8017aaa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8017aac:	4b18      	ldr	r3, [pc, #96]	; (8017b10 <MX_SPI3_Init+0x68>)
 8017aae:	4a19      	ldr	r2, [pc, #100]	; (8017b14 <MX_SPI3_Init+0x6c>)
 8017ab0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8017ab2:	4b17      	ldr	r3, [pc, #92]	; (8017b10 <MX_SPI3_Init+0x68>)
 8017ab4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8017ab8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8017aba:	4b15      	ldr	r3, [pc, #84]	; (8017b10 <MX_SPI3_Init+0x68>)
 8017abc:	2200      	movs	r2, #0
 8017abe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8017ac0:	4b13      	ldr	r3, [pc, #76]	; (8017b10 <MX_SPI3_Init+0x68>)
 8017ac2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017ac6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8017ac8:	4b11      	ldr	r3, [pc, #68]	; (8017b10 <MX_SPI3_Init+0x68>)
 8017aca:	2200      	movs	r2, #0
 8017acc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8017ace:	4b10      	ldr	r3, [pc, #64]	; (8017b10 <MX_SPI3_Init+0x68>)
 8017ad0:	2200      	movs	r2, #0
 8017ad2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8017ad4:	4b0e      	ldr	r3, [pc, #56]	; (8017b10 <MX_SPI3_Init+0x68>)
 8017ad6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017ada:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8017adc:	4b0c      	ldr	r3, [pc, #48]	; (8017b10 <MX_SPI3_Init+0x68>)
 8017ade:	2210      	movs	r2, #16
 8017ae0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8017ae2:	4b0b      	ldr	r3, [pc, #44]	; (8017b10 <MX_SPI3_Init+0x68>)
 8017ae4:	2280      	movs	r2, #128	; 0x80
 8017ae6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8017ae8:	4b09      	ldr	r3, [pc, #36]	; (8017b10 <MX_SPI3_Init+0x68>)
 8017aea:	2200      	movs	r2, #0
 8017aec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8017aee:	4b08      	ldr	r3, [pc, #32]	; (8017b10 <MX_SPI3_Init+0x68>)
 8017af0:	2200      	movs	r2, #0
 8017af2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8017af4:	4b06      	ldr	r3, [pc, #24]	; (8017b10 <MX_SPI3_Init+0x68>)
 8017af6:	220a      	movs	r2, #10
 8017af8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8017afa:	4805      	ldr	r0, [pc, #20]	; (8017b10 <MX_SPI3_Init+0x68>)
 8017afc:	f004 fca0 	bl	801c440 <HAL_SPI_Init>
 8017b00:	4603      	mov	r3, r0
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d001      	beq.n	8017b0a <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8017b06:	f000 faad 	bl	8018064 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8017b0a:	bf00      	nop
 8017b0c:	bd80      	pop	{r7, pc}
 8017b0e:	bf00      	nop
 8017b10:	200069cc 	.word	0x200069cc
 8017b14:	40003c00 	.word	0x40003c00

08017b18 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8017b18:	b580      	push	{r7, lr}
 8017b1a:	b086      	sub	sp, #24
 8017b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8017b1e:	f107 0308 	add.w	r3, r7, #8
 8017b22:	2200      	movs	r2, #0
 8017b24:	601a      	str	r2, [r3, #0]
 8017b26:	605a      	str	r2, [r3, #4]
 8017b28:	609a      	str	r2, [r3, #8]
 8017b2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017b2c:	463b      	mov	r3, r7
 8017b2e:	2200      	movs	r2, #0
 8017b30:	601a      	str	r2, [r3, #0]
 8017b32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */
  octim1.Pulse = 500;
 8017b34:	4b30      	ldr	r3, [pc, #192]	; (8017bf8 <MX_TIM1_Init+0xe0>)
 8017b36:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8017b3a:	605a      	str	r2, [r3, #4]
  octim1.OCMode = TIM_OCMODE_PWM2;
 8017b3c:	4b2e      	ldr	r3, [pc, #184]	; (8017bf8 <MX_TIM1_Init+0xe0>)
 8017b3e:	2270      	movs	r2, #112	; 0x70
 8017b40:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8017b42:	4b2e      	ldr	r3, [pc, #184]	; (8017bfc <MX_TIM1_Init+0xe4>)
 8017b44:	4a2e      	ldr	r2, [pc, #184]	; (8017c00 <MX_TIM1_Init+0xe8>)
 8017b46:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 89;
 8017b48:	4b2c      	ldr	r3, [pc, #176]	; (8017bfc <MX_TIM1_Init+0xe4>)
 8017b4a:	2259      	movs	r2, #89	; 0x59
 8017b4c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8017b4e:	4b2b      	ldr	r3, [pc, #172]	; (8017bfc <MX_TIM1_Init+0xe4>)
 8017b50:	2210      	movs	r2, #16
 8017b52:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8017b54:	4b29      	ldr	r3, [pc, #164]	; (8017bfc <MX_TIM1_Init+0xe4>)
 8017b56:	f240 32e7 	movw	r2, #999	; 0x3e7
 8017b5a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017b5c:	4b27      	ldr	r3, [pc, #156]	; (8017bfc <MX_TIM1_Init+0xe4>)
 8017b5e:	2200      	movs	r2, #0
 8017b60:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8017b62:	4b26      	ldr	r3, [pc, #152]	; (8017bfc <MX_TIM1_Init+0xe4>)
 8017b64:	2200      	movs	r2, #0
 8017b66:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8017b68:	4b24      	ldr	r3, [pc, #144]	; (8017bfc <MX_TIM1_Init+0xe4>)
 8017b6a:	2280      	movs	r2, #128	; 0x80
 8017b6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8017b6e:	4823      	ldr	r0, [pc, #140]	; (8017bfc <MX_TIM1_Init+0xe4>)
 8017b70:	f005 fb3a 	bl	801d1e8 <HAL_TIM_Base_Init>
 8017b74:	4603      	mov	r3, r0
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	d001      	beq.n	8017b7e <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8017b7a:	f000 fa73 	bl	8018064 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8017b7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017b82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8017b84:	f107 0308 	add.w	r3, r7, #8
 8017b88:	4619      	mov	r1, r3
 8017b8a:	481c      	ldr	r0, [pc, #112]	; (8017bfc <MX_TIM1_Init+0xe4>)
 8017b8c:	f005 fd50 	bl	801d630 <HAL_TIM_ConfigClockSource>
 8017b90:	4603      	mov	r3, r0
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	d001      	beq.n	8017b9a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8017b96:	f000 fa65 	bl	8018064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017b9a:	2300      	movs	r3, #0
 8017b9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8017b9e:	2300      	movs	r3, #0
 8017ba0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8017ba2:	463b      	mov	r3, r7
 8017ba4:	4619      	mov	r1, r3
 8017ba6:	4815      	ldr	r0, [pc, #84]	; (8017bfc <MX_TIM1_Init+0xe4>)
 8017ba8:	f006 f91c 	bl	801dde4 <HAL_TIMEx_MasterConfigSynchronization>
 8017bac:	4603      	mov	r3, r0
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	d001      	beq.n	8017bb6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8017bb2:	f000 fa57 	bl	8018064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_OC_ConfigChannel(&htim1, &octim1, 1 );
 8017bb6:	2201      	movs	r2, #1
 8017bb8:	490f      	ldr	r1, [pc, #60]	; (8017bf8 <MX_TIM1_Init+0xe0>)
 8017bba:	4810      	ldr	r0, [pc, #64]	; (8017bfc <MX_TIM1_Init+0xe4>)
 8017bbc:	f005 fcdc 	bl	801d578 <HAL_TIM_OC_ConfigChannel>
  __HAL_TIM_URS_ENABLE(&htim1);
 8017bc0:	4b0e      	ldr	r3, [pc, #56]	; (8017bfc <MX_TIM1_Init+0xe4>)
 8017bc2:	681b      	ldr	r3, [r3, #0]
 8017bc4:	681a      	ldr	r2, [r3, #0]
 8017bc6:	4b0d      	ldr	r3, [pc, #52]	; (8017bfc <MX_TIM1_Init+0xe4>)
 8017bc8:	681b      	ldr	r3, [r3, #0]
 8017bca:	f042 0204 	orr.w	r2, r2, #4
 8017bce:	601a      	str	r2, [r3, #0]
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_CC1 | TIM_DMA_TRIGGER);
 8017bd0:	4b0a      	ldr	r3, [pc, #40]	; (8017bfc <MX_TIM1_Init+0xe4>)
 8017bd2:	681b      	ldr	r3, [r3, #0]
 8017bd4:	68da      	ldr	r2, [r3, #12]
 8017bd6:	4b09      	ldr	r3, [pc, #36]	; (8017bfc <MX_TIM1_Init+0xe4>)
 8017bd8:	681b      	ldr	r3, [r3, #0]
 8017bda:	f442 4284 	orr.w	r2, r2, #16896	; 0x4200
 8017bde:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 8017be0:	4b06      	ldr	r3, [pc, #24]	; (8017bfc <MX_TIM1_Init+0xe4>)
 8017be2:	681b      	ldr	r3, [r3, #0]
 8017be4:	681a      	ldr	r2, [r3, #0]
 8017be6:	4b05      	ldr	r3, [pc, #20]	; (8017bfc <MX_TIM1_Init+0xe4>)
 8017be8:	681b      	ldr	r3, [r3, #0]
 8017bea:	f042 0201 	orr.w	r2, r2, #1
 8017bee:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM1_Init 2 */

}
 8017bf0:	bf00      	nop
 8017bf2:	3718      	adds	r7, #24
 8017bf4:	46bd      	mov	sp, r7
 8017bf6:	bd80      	pop	{r7, pc}
 8017bf8:	20006b78 	.word	0x20006b78
 8017bfc:	20006b94 	.word	0x20006b94
 8017c00:	40010000 	.word	0x40010000

08017c04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8017c04:	b580      	push	{r7, lr}
 8017c06:	b086      	sub	sp, #24
 8017c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8017c0a:	f107 0308 	add.w	r3, r7, #8
 8017c0e:	2200      	movs	r2, #0
 8017c10:	601a      	str	r2, [r3, #0]
 8017c12:	605a      	str	r2, [r3, #4]
 8017c14:	609a      	str	r2, [r3, #8]
 8017c16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017c18:	463b      	mov	r3, r7
 8017c1a:	2200      	movs	r2, #0
 8017c1c:	601a      	str	r2, [r3, #0]
 8017c1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */
  octim3.Pulse = 3750;
 8017c20:	4b25      	ldr	r3, [pc, #148]	; (8017cb8 <MX_TIM3_Init+0xb4>)
 8017c22:	f640 62a6 	movw	r2, #3750	; 0xea6
 8017c26:	605a      	str	r2, [r3, #4]
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8017c28:	4b24      	ldr	r3, [pc, #144]	; (8017cbc <MX_TIM3_Init+0xb8>)
 8017c2a:	4a25      	ldr	r2, [pc, #148]	; (8017cc0 <MX_TIM3_Init+0xbc>)
 8017c2c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 11;
 8017c2e:	4b23      	ldr	r3, [pc, #140]	; (8017cbc <MX_TIM3_Init+0xb8>)
 8017c30:	220b      	movs	r2, #11
 8017c32:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017c34:	4b21      	ldr	r3, [pc, #132]	; (8017cbc <MX_TIM3_Init+0xb8>)
 8017c36:	2200      	movs	r2, #0
 8017c38:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7499;
 8017c3a:	4b20      	ldr	r3, [pc, #128]	; (8017cbc <MX_TIM3_Init+0xb8>)
 8017c3c:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8017c40:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017c42:	4b1e      	ldr	r3, [pc, #120]	; (8017cbc <MX_TIM3_Init+0xb8>)
 8017c44:	2200      	movs	r2, #0
 8017c46:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8017c48:	4b1c      	ldr	r3, [pc, #112]	; (8017cbc <MX_TIM3_Init+0xb8>)
 8017c4a:	2280      	movs	r2, #128	; 0x80
 8017c4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8017c4e:	481b      	ldr	r0, [pc, #108]	; (8017cbc <MX_TIM3_Init+0xb8>)
 8017c50:	f005 faca 	bl	801d1e8 <HAL_TIM_Base_Init>
 8017c54:	4603      	mov	r3, r0
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	d001      	beq.n	8017c5e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8017c5a:	f000 fa03 	bl	8018064 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8017c5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017c62:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8017c64:	f107 0308 	add.w	r3, r7, #8
 8017c68:	4619      	mov	r1, r3
 8017c6a:	4814      	ldr	r0, [pc, #80]	; (8017cbc <MX_TIM3_Init+0xb8>)
 8017c6c:	f005 fce0 	bl	801d630 <HAL_TIM_ConfigClockSource>
 8017c70:	4603      	mov	r3, r0
 8017c72:	2b00      	cmp	r3, #0
 8017c74:	d001      	beq.n	8017c7a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8017c76:	f000 f9f5 	bl	8018064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8017c7a:	2320      	movs	r3, #32
 8017c7c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8017c7e:	2300      	movs	r3, #0
 8017c80:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8017c82:	463b      	mov	r3, r7
 8017c84:	4619      	mov	r1, r3
 8017c86:	480d      	ldr	r0, [pc, #52]	; (8017cbc <MX_TIM3_Init+0xb8>)
 8017c88:	f006 f8ac 	bl	801dde4 <HAL_TIMEx_MasterConfigSynchronization>
 8017c8c:	4603      	mov	r3, r0
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	d001      	beq.n	8017c96 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8017c92:	f000 f9e7 	bl	8018064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_OC_ConfigChannel(&htim3, &octim3, 1 );
 8017c96:	2201      	movs	r2, #1
 8017c98:	4907      	ldr	r1, [pc, #28]	; (8017cb8 <MX_TIM3_Init+0xb4>)
 8017c9a:	4808      	ldr	r0, [pc, #32]	; (8017cbc <MX_TIM3_Init+0xb8>)
 8017c9c:	f005 fc6c 	bl	801d578 <HAL_TIM_OC_ConfigChannel>
  __HAL_TIM_ENABLE(&htim3);
 8017ca0:	4b06      	ldr	r3, [pc, #24]	; (8017cbc <MX_TIM3_Init+0xb8>)
 8017ca2:	681b      	ldr	r3, [r3, #0]
 8017ca4:	681a      	ldr	r2, [r3, #0]
 8017ca6:	4b05      	ldr	r3, [pc, #20]	; (8017cbc <MX_TIM3_Init+0xb8>)
 8017ca8:	681b      	ldr	r3, [r3, #0]
 8017caa:	f042 0201 	orr.w	r2, r2, #1
 8017cae:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM3_Init 2 */

}
 8017cb0:	bf00      	nop
 8017cb2:	3718      	adds	r7, #24
 8017cb4:	46bd      	mov	sp, r7
 8017cb6:	bd80      	pop	{r7, pc}
 8017cb8:	20006acc 	.word	0x20006acc
 8017cbc:	20006984 	.word	0x20006984
 8017cc0:	40000400 	.word	0x40000400

08017cc4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8017cc4:	b580      	push	{r7, lr}
 8017cc6:	b086      	sub	sp, #24
 8017cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8017cca:	f107 0308 	add.w	r3, r7, #8
 8017cce:	2200      	movs	r2, #0
 8017cd0:	601a      	str	r2, [r3, #0]
 8017cd2:	605a      	str	r2, [r3, #4]
 8017cd4:	609a      	str	r2, [r3, #8]
 8017cd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017cd8:	463b      	mov	r3, r7
 8017cda:	2200      	movs	r2, #0
 8017cdc:	601a      	str	r2, [r3, #0]
 8017cde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */
  octim5.Pulse = (FARR[List[FREQ_OUT].Val]+1)/2;
 8017ce0:	4b3a      	ldr	r3, [pc, #232]	; (8017dcc <MX_TIM5_Init+0x108>)
 8017ce2:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8017ce6:	461a      	mov	r2, r3
 8017ce8:	4b39      	ldr	r3, [pc, #228]	; (8017dd0 <MX_TIM5_Init+0x10c>)
 8017cea:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017cee:	3301      	adds	r3, #1
 8017cf0:	0fda      	lsrs	r2, r3, #31
 8017cf2:	4413      	add	r3, r2
 8017cf4:	105b      	asrs	r3, r3, #1
 8017cf6:	461a      	mov	r2, r3
 8017cf8:	4b36      	ldr	r3, [pc, #216]	; (8017dd4 <MX_TIM5_Init+0x110>)
 8017cfa:	605a      	str	r2, [r3, #4]
  octim5.OCMode = TIM_OCMODE_PWM2;
 8017cfc:	4b35      	ldr	r3, [pc, #212]	; (8017dd4 <MX_TIM5_Init+0x110>)
 8017cfe:	2270      	movs	r2, #112	; 0x70
 8017d00:	601a      	str	r2, [r3, #0]
  octim5.OCFastMode = TIM_OCFAST_ENABLE;
 8017d02:	4b34      	ldr	r3, [pc, #208]	; (8017dd4 <MX_TIM5_Init+0x110>)
 8017d04:	2204      	movs	r2, #4
 8017d06:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8017d08:	4b33      	ldr	r3, [pc, #204]	; (8017dd8 <MX_TIM5_Init+0x114>)
 8017d0a:	4a34      	ldr	r2, [pc, #208]	; (8017ddc <MX_TIM5_Init+0x118>)
 8017d0c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9;
 8017d0e:	4b32      	ldr	r3, [pc, #200]	; (8017dd8 <MX_TIM5_Init+0x114>)
 8017d10:	2209      	movs	r2, #9
 8017d12:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017d14:	4b30      	ldr	r3, [pc, #192]	; (8017dd8 <MX_TIM5_Init+0x114>)
 8017d16:	2200      	movs	r2, #0
 8017d18:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 18000;
 8017d1a:	4b2f      	ldr	r3, [pc, #188]	; (8017dd8 <MX_TIM5_Init+0x114>)
 8017d1c:	f244 6250 	movw	r2, #18000	; 0x4650
 8017d20:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017d22:	4b2d      	ldr	r3, [pc, #180]	; (8017dd8 <MX_TIM5_Init+0x114>)
 8017d24:	2200      	movs	r2, #0
 8017d26:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8017d28:	4b2b      	ldr	r3, [pc, #172]	; (8017dd8 <MX_TIM5_Init+0x114>)
 8017d2a:	2280      	movs	r2, #128	; 0x80
 8017d2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8017d2e:	482a      	ldr	r0, [pc, #168]	; (8017dd8 <MX_TIM5_Init+0x114>)
 8017d30:	f005 fa5a 	bl	801d1e8 <HAL_TIM_Base_Init>
 8017d34:	4603      	mov	r3, r0
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	d001      	beq.n	8017d3e <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
 8017d3a:	f000 f993 	bl	8018064 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8017d3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017d42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8017d44:	f107 0308 	add.w	r3, r7, #8
 8017d48:	4619      	mov	r1, r3
 8017d4a:	4823      	ldr	r0, [pc, #140]	; (8017dd8 <MX_TIM5_Init+0x114>)
 8017d4c:	f005 fc70 	bl	801d630 <HAL_TIM_ConfigClockSource>
 8017d50:	4603      	mov	r3, r0
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	d001      	beq.n	8017d5a <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 8017d56:	f000 f985 	bl	8018064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017d5a:	2300      	movs	r3, #0
 8017d5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8017d5e:	2300      	movs	r3, #0
 8017d60:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8017d62:	463b      	mov	r3, r7
 8017d64:	4619      	mov	r1, r3
 8017d66:	481c      	ldr	r0, [pc, #112]	; (8017dd8 <MX_TIM5_Init+0x114>)
 8017d68:	f006 f83c 	bl	801dde4 <HAL_TIMEx_MasterConfigSynchronization>
 8017d6c:	4603      	mov	r3, r0
 8017d6e:	2b00      	cmp	r3, #0
 8017d70:	d001      	beq.n	8017d76 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8017d72:	f000 f977 	bl	8018064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  htim5.Init.Period = FARR[List[FREQ_OUT].Val];
 8017d76:	4b15      	ldr	r3, [pc, #84]	; (8017dcc <MX_TIM5_Init+0x108>)
 8017d78:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8017d7c:	461a      	mov	r2, r3
 8017d7e:	4b14      	ldr	r3, [pc, #80]	; (8017dd0 <MX_TIM5_Init+0x10c>)
 8017d80:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017d84:	461a      	mov	r2, r3
 8017d86:	4b14      	ldr	r3, [pc, #80]	; (8017dd8 <MX_TIM5_Init+0x114>)
 8017d88:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8017d8a:	4813      	ldr	r0, [pc, #76]	; (8017dd8 <MX_TIM5_Init+0x114>)
 8017d8c:	f005 fa2c 	bl	801d1e8 <HAL_TIM_Base_Init>
 8017d90:	4603      	mov	r3, r0
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	d001      	beq.n	8017d9a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8017d96:	f000 f965 	bl	8018064 <Error_Handler>
  }
  HAL_TIM_OC_ConfigChannel(&htim5, &octim5, 3 );
 8017d9a:	2203      	movs	r2, #3
 8017d9c:	490d      	ldr	r1, [pc, #52]	; (8017dd4 <MX_TIM5_Init+0x110>)
 8017d9e:	480e      	ldr	r0, [pc, #56]	; (8017dd8 <MX_TIM5_Init+0x114>)
 8017da0:	f005 fbea 	bl	801d578 <HAL_TIM_OC_ConfigChannel>
  __HAL_TIM_URS_ENABLE(&htim5);
 8017da4:	4b0c      	ldr	r3, [pc, #48]	; (8017dd8 <MX_TIM5_Init+0x114>)
 8017da6:	681b      	ldr	r3, [r3, #0]
 8017da8:	681a      	ldr	r2, [r3, #0]
 8017daa:	4b0b      	ldr	r3, [pc, #44]	; (8017dd8 <MX_TIM5_Init+0x114>)
 8017dac:	681b      	ldr	r3, [r3, #0]
 8017dae:	f042 0204 	orr.w	r2, r2, #4
 8017db2:	601a      	str	r2, [r3, #0]
  __HAL_TIM_ENABLE(&htim5);
 8017db4:	4b08      	ldr	r3, [pc, #32]	; (8017dd8 <MX_TIM5_Init+0x114>)
 8017db6:	681b      	ldr	r3, [r3, #0]
 8017db8:	681a      	ldr	r2, [r3, #0]
 8017dba:	4b07      	ldr	r3, [pc, #28]	; (8017dd8 <MX_TIM5_Init+0x114>)
 8017dbc:	681b      	ldr	r3, [r3, #0]
 8017dbe:	f042 0201 	orr.w	r2, r2, #1
 8017dc2:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM5_Init 2 */

}
 8017dc4:	bf00      	nop
 8017dc6:	3718      	adds	r7, #24
 8017dc8:	46bd      	mov	sp, r7
 8017dca:	bd80      	pop	{r7, pc}
 8017dcc:	2000029c 	.word	0x2000029c
 8017dd0:	08000ae8 	.word	0x08000ae8
 8017dd4:	20006ae8 	.word	0x20006ae8
 8017dd8:	2000693c 	.word	0x2000693c
 8017ddc:	40000c00 	.word	0x40000c00

08017de0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8017de0:	b580      	push	{r7, lr}
 8017de2:	b082      	sub	sp, #8
 8017de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */
  // aka tim_da
  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017de6:	463b      	mov	r3, r7
 8017de8:	2200      	movs	r2, #0
 8017dea:	601a      	str	r2, [r3, #0]
 8017dec:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8017dee:	4b1d      	ldr	r3, [pc, #116]	; (8017e64 <MX_TIM7_Init+0x84>)
 8017df0:	4a1d      	ldr	r2, [pc, #116]	; (8017e68 <MX_TIM7_Init+0x88>)
 8017df2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2;
 8017df4:	4b1b      	ldr	r3, [pc, #108]	; (8017e64 <MX_TIM7_Init+0x84>)
 8017df6:	2202      	movs	r2, #2
 8017df8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017dfa:	4b1a      	ldr	r3, [pc, #104]	; (8017e64 <MX_TIM7_Init+0x84>)
 8017dfc:	2200      	movs	r2, #0
 8017dfe:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8017e00:	4b18      	ldr	r3, [pc, #96]	; (8017e64 <MX_TIM7_Init+0x84>)
 8017e02:	f240 32e7 	movw	r2, #999	; 0x3e7
 8017e06:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8017e08:	4b16      	ldr	r3, [pc, #88]	; (8017e64 <MX_TIM7_Init+0x84>)
 8017e0a:	2200      	movs	r2, #0
 8017e0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8017e0e:	4815      	ldr	r0, [pc, #84]	; (8017e64 <MX_TIM7_Init+0x84>)
 8017e10:	f005 f9ea 	bl	801d1e8 <HAL_TIM_Base_Init>
 8017e14:	4603      	mov	r3, r0
 8017e16:	2b00      	cmp	r3, #0
 8017e18:	d001      	beq.n	8017e1e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8017e1a:	f000 f923 	bl	8018064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017e1e:	2300      	movs	r3, #0
 8017e20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8017e22:	2300      	movs	r3, #0
 8017e24:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8017e26:	463b      	mov	r3, r7
 8017e28:	4619      	mov	r1, r3
 8017e2a:	480e      	ldr	r0, [pc, #56]	; (8017e64 <MX_TIM7_Init+0x84>)
 8017e2c:	f005 ffda 	bl	801dde4 <HAL_TIMEx_MasterConfigSynchronization>
 8017e30:	4603      	mov	r3, r0
 8017e32:	2b00      	cmp	r3, #0
 8017e34:	d001      	beq.n	8017e3a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8017e36:	f000 f915 	bl	8018064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  __HAL_TIM_ENABLE_DMA(&htim7,TIM_DMA_UPDATE);
 8017e3a:	4b0a      	ldr	r3, [pc, #40]	; (8017e64 <MX_TIM7_Init+0x84>)
 8017e3c:	681b      	ldr	r3, [r3, #0]
 8017e3e:	68da      	ldr	r2, [r3, #12]
 8017e40:	4b08      	ldr	r3, [pc, #32]	; (8017e64 <MX_TIM7_Init+0x84>)
 8017e42:	681b      	ldr	r3, [r3, #0]
 8017e44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017e48:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim7);
 8017e4a:	4b06      	ldr	r3, [pc, #24]	; (8017e64 <MX_TIM7_Init+0x84>)
 8017e4c:	681b      	ldr	r3, [r3, #0]
 8017e4e:	681a      	ldr	r2, [r3, #0]
 8017e50:	4b04      	ldr	r3, [pc, #16]	; (8017e64 <MX_TIM7_Init+0x84>)
 8017e52:	681b      	ldr	r3, [r3, #0]
 8017e54:	f042 0201 	orr.w	r2, r2, #1
 8017e58:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM7_Init 2 */

}
 8017e5a:	bf00      	nop
 8017e5c:	3708      	adds	r7, #8
 8017e5e:	46bd      	mov	sp, r7
 8017e60:	bd80      	pop	{r7, pc}
 8017e62:	bf00      	nop
 8017e64:	20006bdc 	.word	0x20006bdc
 8017e68:	40001400 	.word	0x40001400

08017e6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8017e6c:	b580      	push	{r7, lr}
 8017e6e:	b082      	sub	sp, #8
 8017e70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8017e72:	2300      	movs	r3, #0
 8017e74:	607b      	str	r3, [r7, #4]
 8017e76:	4b17      	ldr	r3, [pc, #92]	; (8017ed4 <MX_DMA_Init+0x68>)
 8017e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e7a:	4a16      	ldr	r2, [pc, #88]	; (8017ed4 <MX_DMA_Init+0x68>)
 8017e7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8017e80:	6313      	str	r3, [r2, #48]	; 0x30
 8017e82:	4b14      	ldr	r3, [pc, #80]	; (8017ed4 <MX_DMA_Init+0x68>)
 8017e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8017e8a:	607b      	str	r3, [r7, #4]
 8017e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8017e8e:	2300      	movs	r3, #0
 8017e90:	603b      	str	r3, [r7, #0]
 8017e92:	4b10      	ldr	r3, [pc, #64]	; (8017ed4 <MX_DMA_Init+0x68>)
 8017e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e96:	4a0f      	ldr	r2, [pc, #60]	; (8017ed4 <MX_DMA_Init+0x68>)
 8017e98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8017e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8017e9e:	4b0d      	ldr	r3, [pc, #52]	; (8017ed4 <MX_DMA_Init+0x68>)
 8017ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ea2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8017ea6:	603b      	str	r3, [r7, #0]
 8017ea8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8017eaa:	2200      	movs	r2, #0
 8017eac:	2100      	movs	r1, #0
 8017eae:	2010      	movs	r0, #16
 8017eb0:	f000 ffdd 	bl	8018e6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8017eb4:	2010      	movs	r0, #16
 8017eb6:	f000 fff6 	bl	8018ea6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8017eba:	2200      	movs	r2, #0
 8017ebc:	2100      	movs	r1, #0
 8017ebe:	2038      	movs	r0, #56	; 0x38
 8017ec0:	f000 ffd5 	bl	8018e6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8017ec4:	2038      	movs	r0, #56	; 0x38
 8017ec6:	f000 ffee 	bl	8018ea6 <HAL_NVIC_EnableIRQ>

}
 8017eca:	bf00      	nop
 8017ecc:	3708      	adds	r7, #8
 8017ece:	46bd      	mov	sp, r7
 8017ed0:	bd80      	pop	{r7, pc}
 8017ed2:	bf00      	nop
 8017ed4:	40023800 	.word	0x40023800

08017ed8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8017ed8:	b580      	push	{r7, lr}
 8017eda:	b08a      	sub	sp, #40	; 0x28
 8017edc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017ede:	f107 0314 	add.w	r3, r7, #20
 8017ee2:	2200      	movs	r2, #0
 8017ee4:	601a      	str	r2, [r3, #0]
 8017ee6:	605a      	str	r2, [r3, #4]
 8017ee8:	609a      	str	r2, [r3, #8]
 8017eea:	60da      	str	r2, [r3, #12]
 8017eec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8017eee:	2300      	movs	r3, #0
 8017ef0:	613b      	str	r3, [r7, #16]
 8017ef2:	4b4e      	ldr	r3, [pc, #312]	; (801802c <MX_GPIO_Init+0x154>)
 8017ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ef6:	4a4d      	ldr	r2, [pc, #308]	; (801802c <MX_GPIO_Init+0x154>)
 8017ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017efc:	6313      	str	r3, [r2, #48]	; 0x30
 8017efe:	4b4b      	ldr	r3, [pc, #300]	; (801802c <MX_GPIO_Init+0x154>)
 8017f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017f06:	613b      	str	r3, [r7, #16]
 8017f08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8017f0a:	2300      	movs	r3, #0
 8017f0c:	60fb      	str	r3, [r7, #12]
 8017f0e:	4b47      	ldr	r3, [pc, #284]	; (801802c <MX_GPIO_Init+0x154>)
 8017f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f12:	4a46      	ldr	r2, [pc, #280]	; (801802c <MX_GPIO_Init+0x154>)
 8017f14:	f043 0301 	orr.w	r3, r3, #1
 8017f18:	6313      	str	r3, [r2, #48]	; 0x30
 8017f1a:	4b44      	ldr	r3, [pc, #272]	; (801802c <MX_GPIO_Init+0x154>)
 8017f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f1e:	f003 0301 	and.w	r3, r3, #1
 8017f22:	60fb      	str	r3, [r7, #12]
 8017f24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8017f26:	2300      	movs	r3, #0
 8017f28:	60bb      	str	r3, [r7, #8]
 8017f2a:	4b40      	ldr	r3, [pc, #256]	; (801802c <MX_GPIO_Init+0x154>)
 8017f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f2e:	4a3f      	ldr	r2, [pc, #252]	; (801802c <MX_GPIO_Init+0x154>)
 8017f30:	f043 0304 	orr.w	r3, r3, #4
 8017f34:	6313      	str	r3, [r2, #48]	; 0x30
 8017f36:	4b3d      	ldr	r3, [pc, #244]	; (801802c <MX_GPIO_Init+0x154>)
 8017f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f3a:	f003 0304 	and.w	r3, r3, #4
 8017f3e:	60bb      	str	r3, [r7, #8]
 8017f40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8017f42:	2300      	movs	r3, #0
 8017f44:	607b      	str	r3, [r7, #4]
 8017f46:	4b39      	ldr	r3, [pc, #228]	; (801802c <MX_GPIO_Init+0x154>)
 8017f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f4a:	4a38      	ldr	r2, [pc, #224]	; (801802c <MX_GPIO_Init+0x154>)
 8017f4c:	f043 0302 	orr.w	r3, r3, #2
 8017f50:	6313      	str	r3, [r2, #48]	; 0x30
 8017f52:	4b36      	ldr	r3, [pc, #216]	; (801802c <MX_GPIO_Init+0x154>)
 8017f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f56:	f003 0302 	and.w	r3, r3, #2
 8017f5a:	607b      	str	r3, [r7, #4]
 8017f5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Fo2_GPIO_Port, Fo2_Pin, GPIO_PIN_RESET);
 8017f5e:	2200      	movs	r2, #0
 8017f60:	2104      	movs	r1, #4
 8017f62:	4833      	ldr	r0, [pc, #204]	; (8018030 <MX_GPIO_Init+0x158>)
 8017f64:	f001 fff0 	bl	8019f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Az_Pin|Ay_Pin|LcdRs_Pin, GPIO_PIN_RESET);
 8017f68:	2200      	movs	r2, #0
 8017f6a:	f44f 6103 	mov.w	r1, #2096	; 0x830
 8017f6e:	4831      	ldr	r0, [pc, #196]	; (8018034 <MX_GPIO_Init+0x15c>)
 8017f70:	f001 ffea 	bl	8019f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Ax_Pin|Dres_Pin, GPIO_PIN_RESET);
 8017f74:	2200      	movs	r2, #0
 8017f76:	f240 2101 	movw	r1, #513	; 0x201
 8017f7a:	482f      	ldr	r0, [pc, #188]	; (8018038 <MX_GPIO_Init+0x160>)
 8017f7c:	f001 ffe4 	bl	8019f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS_Pin|TpCs_Pin, GPIO_PIN_SET);
 8017f80:	2201      	movs	r2, #1
 8017f82:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8017f86:	482c      	ldr	r0, [pc, #176]	; (8018038 <MX_GPIO_Init+0x160>)
 8017f88:	f001 ffde 	bl	8019f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);
 8017f8c:	2201      	movs	r2, #1
 8017f8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017f92:	4828      	ldr	r0, [pc, #160]	; (8018034 <MX_GPIO_Init+0x15c>)
 8017f94:	f001 ffd8 	bl	8019f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Fo2_Pin */
  GPIO_InitStruct.Pin = Fo2_Pin;
 8017f98:	2304      	movs	r3, #4
 8017f9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017f9c:	2301      	movs	r3, #1
 8017f9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017fa0:	2300      	movs	r3, #0
 8017fa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017fa4:	2300      	movs	r3, #0
 8017fa6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStruct);
 8017fa8:	f107 0314 	add.w	r3, r7, #20
 8017fac:	4619      	mov	r1, r3
 8017fae:	4820      	ldr	r0, [pc, #128]	; (8018030 <MX_GPIO_Init+0x158>)
 8017fb0:	f001 fe1e 	bl	8019bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Az_Pin Ay_Pin LcdRs_Pin LcdCs_Pin */
  GPIO_InitStruct.Pin = Az_Pin|Ay_Pin|LcdRs_Pin|LcdCs_Pin;
 8017fb4:	f641 0330 	movw	r3, #6192	; 0x1830
 8017fb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017fba:	2301      	movs	r3, #1
 8017fbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017fbe:	2300      	movs	r3, #0
 8017fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017fc2:	2300      	movs	r3, #0
 8017fc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8017fc6:	f107 0314 	add.w	r3, r7, #20
 8017fca:	4619      	mov	r1, r3
 8017fcc:	4819      	ldr	r0, [pc, #100]	; (8018034 <MX_GPIO_Init+0x15c>)
 8017fce:	f001 fe0f 	bl	8019bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Ax_Pin SS_Pin TpCs_Pin Dres_Pin */
  GPIO_InitStruct.Pin = Ax_Pin|SS_Pin|TpCs_Pin|Dres_Pin;
 8017fd2:	f241 2341 	movw	r3, #4673	; 0x1241
 8017fd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017fd8:	2301      	movs	r3, #1
 8017fda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017fdc:	2300      	movs	r3, #0
 8017fde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017fe0:	2300      	movs	r3, #0
 8017fe2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017fe4:	f107 0314 	add.w	r3, r7, #20
 8017fe8:	4619      	mov	r1, r3
 8017fea:	4813      	ldr	r0, [pc, #76]	; (8018038 <MX_GPIO_Init+0x160>)
 8017fec:	f001 fe00 	bl	8019bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Boot1_Pin */
  GPIO_InitStruct.Pin = Boot1_Pin;
 8017ff0:	2304      	movs	r3, #4
 8017ff2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8017ff4:	2300      	movs	r3, #0
 8017ff6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017ff8:	2300      	movs	r3, #0
 8017ffa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Boot1_GPIO_Port, &GPIO_InitStruct);
 8017ffc:	f107 0314 	add.w	r3, r7, #20
 8018000:	4619      	mov	r1, r3
 8018002:	480d      	ldr	r0, [pc, #52]	; (8018038 <MX_GPIO_Init+0x160>)
 8018004:	f001 fdf4 	bl	8019bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TpI_Pin */
  GPIO_InitStruct.Pin = TpI_Pin;
 8018008:	f44f 7380 	mov.w	r3, #256	; 0x100
 801800c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801800e:	2300      	movs	r3, #0
 8018010:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8018012:	2301      	movs	r3, #1
 8018014:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TpI_GPIO_Port, &GPIO_InitStruct);
 8018016:	f107 0314 	add.w	r3, r7, #20
 801801a:	4619      	mov	r1, r3
 801801c:	4806      	ldr	r0, [pc, #24]	; (8018038 <MX_GPIO_Init+0x160>)
 801801e:	f001 fde7 	bl	8019bf0 <HAL_GPIO_Init>

}
 8018022:	bf00      	nop
 8018024:	3728      	adds	r7, #40	; 0x28
 8018026:	46bd      	mov	sp, r7
 8018028:	bd80      	pop	{r7, pc}
 801802a:	bf00      	nop
 801802c:	40023800 	.word	0x40023800
 8018030:	40020000 	.word	0x40020000
 8018034:	40020800 	.word	0x40020800
 8018038:	40020400 	.word	0x40020400

0801803c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801803c:	b580      	push	{r7, lr}
 801803e:	b082      	sub	sp, #8
 8018040:	af00      	add	r7, sp, #0
 8018042:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback
  if (htim == &htim3 )
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	4a06      	ldr	r2, [pc, #24]	; (8018060 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8018048:	4293      	cmp	r3, r2
 801804a:	d105      	bne.n	8018058 <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
	  htim->Instance->SR =0;
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	681b      	ldr	r3, [r3, #0]
 8018050:	2200      	movs	r2, #0
 8018052:	611a      	str	r2, [r3, #16]
	  Tim3_ISP();
 8018054:	f7f4 fd20 	bl	800ca98 <Tim3_ISP>
  }
}
 8018058:	bf00      	nop
 801805a:	3708      	adds	r7, #8
 801805c:	46bd      	mov	sp, r7
 801805e:	bd80      	pop	{r7, pc}
 8018060:	20006984 	.word	0x20006984

08018064 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8018064:	b480      	push	{r7}
 8018066:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8018068:	b672      	cpsid	i
}
 801806a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 801806c:	e7fe      	b.n	801806c <Error_Handler+0x8>
	...

08018070 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8018070:	b480      	push	{r7}
 8018072:	b083      	sub	sp, #12
 8018074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8018076:	2300      	movs	r3, #0
 8018078:	607b      	str	r3, [r7, #4]
 801807a:	4b10      	ldr	r3, [pc, #64]	; (80180bc <HAL_MspInit+0x4c>)
 801807c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801807e:	4a0f      	ldr	r2, [pc, #60]	; (80180bc <HAL_MspInit+0x4c>)
 8018080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8018084:	6453      	str	r3, [r2, #68]	; 0x44
 8018086:	4b0d      	ldr	r3, [pc, #52]	; (80180bc <HAL_MspInit+0x4c>)
 8018088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801808a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801808e:	607b      	str	r3, [r7, #4]
 8018090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8018092:	2300      	movs	r3, #0
 8018094:	603b      	str	r3, [r7, #0]
 8018096:	4b09      	ldr	r3, [pc, #36]	; (80180bc <HAL_MspInit+0x4c>)
 8018098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801809a:	4a08      	ldr	r2, [pc, #32]	; (80180bc <HAL_MspInit+0x4c>)
 801809c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80180a0:	6413      	str	r3, [r2, #64]	; 0x40
 80180a2:	4b06      	ldr	r3, [pc, #24]	; (80180bc <HAL_MspInit+0x4c>)
 80180a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80180a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80180aa:	603b      	str	r3, [r7, #0]
 80180ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80180ae:	bf00      	nop
 80180b0:	370c      	adds	r7, #12
 80180b2:	46bd      	mov	sp, r7
 80180b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180b8:	4770      	bx	lr
 80180ba:	bf00      	nop
 80180bc:	40023800 	.word	0x40023800

080180c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80180c0:	b580      	push	{r7, lr}
 80180c2:	b08c      	sub	sp, #48	; 0x30
 80180c4:	af00      	add	r7, sp, #0
 80180c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80180c8:	f107 031c 	add.w	r3, r7, #28
 80180cc:	2200      	movs	r2, #0
 80180ce:	601a      	str	r2, [r3, #0]
 80180d0:	605a      	str	r2, [r3, #4]
 80180d2:	609a      	str	r2, [r3, #8]
 80180d4:	60da      	str	r2, [r3, #12]
 80180d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	681b      	ldr	r3, [r3, #0]
 80180dc:	4a45      	ldr	r2, [pc, #276]	; (80181f4 <HAL_ADC_MspInit+0x134>)
 80180de:	4293      	cmp	r3, r2
 80180e0:	d157      	bne.n	8018192 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80180e2:	2300      	movs	r3, #0
 80180e4:	61bb      	str	r3, [r7, #24]
 80180e6:	4b44      	ldr	r3, [pc, #272]	; (80181f8 <HAL_ADC_MspInit+0x138>)
 80180e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80180ea:	4a43      	ldr	r2, [pc, #268]	; (80181f8 <HAL_ADC_MspInit+0x138>)
 80180ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80180f0:	6453      	str	r3, [r2, #68]	; 0x44
 80180f2:	4b41      	ldr	r3, [pc, #260]	; (80181f8 <HAL_ADC_MspInit+0x138>)
 80180f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80180f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80180fa:	61bb      	str	r3, [r7, #24]
 80180fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80180fe:	2300      	movs	r3, #0
 8018100:	617b      	str	r3, [r7, #20]
 8018102:	4b3d      	ldr	r3, [pc, #244]	; (80181f8 <HAL_ADC_MspInit+0x138>)
 8018104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018106:	4a3c      	ldr	r2, [pc, #240]	; (80181f8 <HAL_ADC_MspInit+0x138>)
 8018108:	f043 0301 	orr.w	r3, r3, #1
 801810c:	6313      	str	r3, [r2, #48]	; 0x30
 801810e:	4b3a      	ldr	r3, [pc, #232]	; (80181f8 <HAL_ADC_MspInit+0x138>)
 8018110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018112:	f003 0301 	and.w	r3, r3, #1
 8018116:	617b      	str	r3, [r7, #20]
 8018118:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = Ao_Pin;
 801811a:	2340      	movs	r3, #64	; 0x40
 801811c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801811e:	2303      	movs	r3, #3
 8018120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018122:	2300      	movs	r3, #0
 8018124:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Ao_GPIO_Port, &GPIO_InitStruct);
 8018126:	f107 031c 	add.w	r3, r7, #28
 801812a:	4619      	mov	r1, r3
 801812c:	4833      	ldr	r0, [pc, #204]	; (80181fc <HAL_ADC_MspInit+0x13c>)
 801812e:	f001 fd5f 	bl	8019bf0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8018132:	4b33      	ldr	r3, [pc, #204]	; (8018200 <HAL_ADC_MspInit+0x140>)
 8018134:	4a33      	ldr	r2, [pc, #204]	; (8018204 <HAL_ADC_MspInit+0x144>)
 8018136:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8018138:	4b31      	ldr	r3, [pc, #196]	; (8018200 <HAL_ADC_MspInit+0x140>)
 801813a:	2200      	movs	r2, #0
 801813c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 801813e:	4b30      	ldr	r3, [pc, #192]	; (8018200 <HAL_ADC_MspInit+0x140>)
 8018140:	2200      	movs	r2, #0
 8018142:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8018144:	4b2e      	ldr	r3, [pc, #184]	; (8018200 <HAL_ADC_MspInit+0x140>)
 8018146:	2200      	movs	r2, #0
 8018148:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 801814a:	4b2d      	ldr	r3, [pc, #180]	; (8018200 <HAL_ADC_MspInit+0x140>)
 801814c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018150:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8018152:	4b2b      	ldr	r3, [pc, #172]	; (8018200 <HAL_ADC_MspInit+0x140>)
 8018154:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018158:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801815a:	4b29      	ldr	r3, [pc, #164]	; (8018200 <HAL_ADC_MspInit+0x140>)
 801815c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018160:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8018162:	4b27      	ldr	r3, [pc, #156]	; (8018200 <HAL_ADC_MspInit+0x140>)
 8018164:	2200      	movs	r2, #0
 8018166:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8018168:	4b25      	ldr	r3, [pc, #148]	; (8018200 <HAL_ADC_MspInit+0x140>)
 801816a:	2200      	movs	r2, #0
 801816c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801816e:	4b24      	ldr	r3, [pc, #144]	; (8018200 <HAL_ADC_MspInit+0x140>)
 8018170:	2200      	movs	r2, #0
 8018172:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8018174:	4822      	ldr	r0, [pc, #136]	; (8018200 <HAL_ADC_MspInit+0x140>)
 8018176:	f000 ff47 	bl	8019008 <HAL_DMA_Init>
 801817a:	4603      	mov	r3, r0
 801817c:	2b00      	cmp	r3, #0
 801817e:	d001      	beq.n	8018184 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8018180:	f7ff ff70 	bl	8018064 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	4a1e      	ldr	r2, [pc, #120]	; (8018200 <HAL_ADC_MspInit+0x140>)
 8018188:	639a      	str	r2, [r3, #56]	; 0x38
 801818a:	4a1d      	ldr	r2, [pc, #116]	; (8018200 <HAL_ADC_MspInit+0x140>)
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8018190:	e02c      	b.n	80181ec <HAL_ADC_MspInit+0x12c>
  else if(hadc->Instance==ADC2)
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	681b      	ldr	r3, [r3, #0]
 8018196:	4a1c      	ldr	r2, [pc, #112]	; (8018208 <HAL_ADC_MspInit+0x148>)
 8018198:	4293      	cmp	r3, r2
 801819a:	d127      	bne.n	80181ec <HAL_ADC_MspInit+0x12c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 801819c:	2300      	movs	r3, #0
 801819e:	613b      	str	r3, [r7, #16]
 80181a0:	4b15      	ldr	r3, [pc, #84]	; (80181f8 <HAL_ADC_MspInit+0x138>)
 80181a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80181a4:	4a14      	ldr	r2, [pc, #80]	; (80181f8 <HAL_ADC_MspInit+0x138>)
 80181a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80181aa:	6453      	str	r3, [r2, #68]	; 0x44
 80181ac:	4b12      	ldr	r3, [pc, #72]	; (80181f8 <HAL_ADC_MspInit+0x138>)
 80181ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80181b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80181b4:	613b      	str	r3, [r7, #16]
 80181b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80181b8:	2300      	movs	r3, #0
 80181ba:	60fb      	str	r3, [r7, #12]
 80181bc:	4b0e      	ldr	r3, [pc, #56]	; (80181f8 <HAL_ADC_MspInit+0x138>)
 80181be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80181c0:	4a0d      	ldr	r2, [pc, #52]	; (80181f8 <HAL_ADC_MspInit+0x138>)
 80181c2:	f043 0301 	orr.w	r3, r3, #1
 80181c6:	6313      	str	r3, [r2, #48]	; 0x30
 80181c8:	4b0b      	ldr	r3, [pc, #44]	; (80181f8 <HAL_ADC_MspInit+0x138>)
 80181ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80181cc:	f003 0301 	and.w	r3, r3, #1
 80181d0:	60fb      	str	r3, [r7, #12]
 80181d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AoA7_Pin;
 80181d4:	2380      	movs	r3, #128	; 0x80
 80181d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80181d8:	2303      	movs	r3, #3
 80181da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80181dc:	2300      	movs	r3, #0
 80181de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AoA7_GPIO_Port, &GPIO_InitStruct);
 80181e0:	f107 031c 	add.w	r3, r7, #28
 80181e4:	4619      	mov	r1, r3
 80181e6:	4805      	ldr	r0, [pc, #20]	; (80181fc <HAL_ADC_MspInit+0x13c>)
 80181e8:	f001 fd02 	bl	8019bf0 <HAL_GPIO_Init>
}
 80181ec:	bf00      	nop
 80181ee:	3730      	adds	r7, #48	; 0x30
 80181f0:	46bd      	mov	sp, r7
 80181f2:	bd80      	pop	{r7, pc}
 80181f4:	40012000 	.word	0x40012000
 80181f8:	40023800 	.word	0x40023800
 80181fc:	40020000 	.word	0x40020000
 8018200:	20006b18 	.word	0x20006b18
 8018204:	40026410 	.word	0x40026410
 8018208:	40012100 	.word	0x40012100

0801820c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 801820c:	b580      	push	{r7, lr}
 801820e:	b08a      	sub	sp, #40	; 0x28
 8018210:	af00      	add	r7, sp, #0
 8018212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018214:	f107 0314 	add.w	r3, r7, #20
 8018218:	2200      	movs	r2, #0
 801821a:	601a      	str	r2, [r3, #0]
 801821c:	605a      	str	r2, [r3, #4]
 801821e:	609a      	str	r2, [r3, #8]
 8018220:	60da      	str	r2, [r3, #12]
 8018222:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8018224:	687b      	ldr	r3, [r7, #4]
 8018226:	681b      	ldr	r3, [r3, #0]
 8018228:	4a33      	ldr	r2, [pc, #204]	; (80182f8 <HAL_DAC_MspInit+0xec>)
 801822a:	4293      	cmp	r3, r2
 801822c:	d15f      	bne.n	80182ee <HAL_DAC_MspInit+0xe2>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 801822e:	2300      	movs	r3, #0
 8018230:	613b      	str	r3, [r7, #16]
 8018232:	4b32      	ldr	r3, [pc, #200]	; (80182fc <HAL_DAC_MspInit+0xf0>)
 8018234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018236:	4a31      	ldr	r2, [pc, #196]	; (80182fc <HAL_DAC_MspInit+0xf0>)
 8018238:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801823c:	6413      	str	r3, [r2, #64]	; 0x40
 801823e:	4b2f      	ldr	r3, [pc, #188]	; (80182fc <HAL_DAC_MspInit+0xf0>)
 8018240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018242:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8018246:	613b      	str	r3, [r7, #16]
 8018248:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801824a:	2300      	movs	r3, #0
 801824c:	60fb      	str	r3, [r7, #12]
 801824e:	4b2b      	ldr	r3, [pc, #172]	; (80182fc <HAL_DAC_MspInit+0xf0>)
 8018250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018252:	4a2a      	ldr	r2, [pc, #168]	; (80182fc <HAL_DAC_MspInit+0xf0>)
 8018254:	f043 0301 	orr.w	r3, r3, #1
 8018258:	6313      	str	r3, [r2, #48]	; 0x30
 801825a:	4b28      	ldr	r3, [pc, #160]	; (80182fc <HAL_DAC_MspInit+0xf0>)
 801825c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801825e:	f003 0301 	and.w	r3, r3, #1
 8018262:	60fb      	str	r3, [r7, #12]
 8018264:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = Fo4_Pin|Ap_Pin;
 8018266:	2330      	movs	r3, #48	; 0x30
 8018268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801826a:	2303      	movs	r3, #3
 801826c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801826e:	2300      	movs	r3, #0
 8018270:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018272:	f107 0314 	add.w	r3, r7, #20
 8018276:	4619      	mov	r1, r3
 8018278:	4821      	ldr	r0, [pc, #132]	; (8018300 <HAL_DAC_MspInit+0xf4>)
 801827a:	f001 fcb9 	bl	8019bf0 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 801827e:	4b21      	ldr	r3, [pc, #132]	; (8018304 <HAL_DAC_MspInit+0xf8>)
 8018280:	4a21      	ldr	r2, [pc, #132]	; (8018308 <HAL_DAC_MspInit+0xfc>)
 8018282:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8018284:	4b1f      	ldr	r3, [pc, #124]	; (8018304 <HAL_DAC_MspInit+0xf8>)
 8018286:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 801828a:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801828c:	4b1d      	ldr	r3, [pc, #116]	; (8018304 <HAL_DAC_MspInit+0xf8>)
 801828e:	2240      	movs	r2, #64	; 0x40
 8018290:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8018292:	4b1c      	ldr	r3, [pc, #112]	; (8018304 <HAL_DAC_MspInit+0xf8>)
 8018294:	2200      	movs	r2, #0
 8018296:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8018298:	4b1a      	ldr	r3, [pc, #104]	; (8018304 <HAL_DAC_MspInit+0xf8>)
 801829a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801829e:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80182a0:	4b18      	ldr	r3, [pc, #96]	; (8018304 <HAL_DAC_MspInit+0xf8>)
 80182a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80182a6:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80182a8:	4b16      	ldr	r3, [pc, #88]	; (8018304 <HAL_DAC_MspInit+0xf8>)
 80182aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80182ae:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 80182b0:	4b14      	ldr	r3, [pc, #80]	; (8018304 <HAL_DAC_MspInit+0xf8>)
 80182b2:	2200      	movs	r2, #0
 80182b4:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80182b6:	4b13      	ldr	r3, [pc, #76]	; (8018304 <HAL_DAC_MspInit+0xf8>)
 80182b8:	2200      	movs	r2, #0
 80182ba:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80182bc:	4b11      	ldr	r3, [pc, #68]	; (8018304 <HAL_DAC_MspInit+0xf8>)
 80182be:	2200      	movs	r2, #0
 80182c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80182c2:	4810      	ldr	r0, [pc, #64]	; (8018304 <HAL_DAC_MspInit+0xf8>)
 80182c4:	f000 fea0 	bl	8019008 <HAL_DMA_Init>
 80182c8:	4603      	mov	r3, r0
 80182ca:	2b00      	cmp	r3, #0
 80182cc:	d001      	beq.n	80182d2 <HAL_DAC_MspInit+0xc6>
    {
      Error_Handler();
 80182ce:	f7ff fec9 	bl	8018064 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	4a0b      	ldr	r2, [pc, #44]	; (8018304 <HAL_DAC_MspInit+0xf8>)
 80182d6:	609a      	str	r2, [r3, #8]
 80182d8:	4a0a      	ldr	r2, [pc, #40]	; (8018304 <HAL_DAC_MspInit+0xf8>)
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80182de:	2200      	movs	r2, #0
 80182e0:	2100      	movs	r1, #0
 80182e2:	2036      	movs	r0, #54	; 0x36
 80182e4:	f000 fdc3 	bl	8018e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80182e8:	2036      	movs	r0, #54	; 0x36
 80182ea:	f000 fddc 	bl	8018ea6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80182ee:	bf00      	nop
 80182f0:	3728      	adds	r7, #40	; 0x28
 80182f2:	46bd      	mov	sp, r7
 80182f4:	bd80      	pop	{r7, pc}
 80182f6:	bf00      	nop
 80182f8:	40007400 	.word	0x40007400
 80182fc:	40023800 	.word	0x40023800
 8018300:	40020000 	.word	0x40020000
 8018304:	20006a24 	.word	0x20006a24
 8018308:	40026088 	.word	0x40026088

0801830c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 801830c:	b580      	push	{r7, lr}
 801830e:	b08c      	sub	sp, #48	; 0x30
 8018310:	af00      	add	r7, sp, #0
 8018312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018314:	f107 031c 	add.w	r3, r7, #28
 8018318:	2200      	movs	r2, #0
 801831a:	601a      	str	r2, [r3, #0]
 801831c:	605a      	str	r2, [r3, #4]
 801831e:	609a      	str	r2, [r3, #8]
 8018320:	60da      	str	r2, [r3, #12]
 8018322:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	681b      	ldr	r3, [r3, #0]
 8018328:	4a3a      	ldr	r2, [pc, #232]	; (8018414 <HAL_SPI_MspInit+0x108>)
 801832a:	4293      	cmp	r3, r2
 801832c:	d135      	bne.n	801839a <HAL_SPI_MspInit+0x8e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 801832e:	2300      	movs	r3, #0
 8018330:	61bb      	str	r3, [r7, #24]
 8018332:	4b39      	ldr	r3, [pc, #228]	; (8018418 <HAL_SPI_MspInit+0x10c>)
 8018334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018336:	4a38      	ldr	r2, [pc, #224]	; (8018418 <HAL_SPI_MspInit+0x10c>)
 8018338:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801833c:	6413      	str	r3, [r2, #64]	; 0x40
 801833e:	4b36      	ldr	r3, [pc, #216]	; (8018418 <HAL_SPI_MspInit+0x10c>)
 8018340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018346:	61bb      	str	r3, [r7, #24]
 8018348:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 801834a:	2300      	movs	r3, #0
 801834c:	617b      	str	r3, [r7, #20]
 801834e:	4b32      	ldr	r3, [pc, #200]	; (8018418 <HAL_SPI_MspInit+0x10c>)
 8018350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018352:	4a31      	ldr	r2, [pc, #196]	; (8018418 <HAL_SPI_MspInit+0x10c>)
 8018354:	f043 0302 	orr.w	r3, r3, #2
 8018358:	6313      	str	r3, [r2, #48]	; 0x30
 801835a:	4b2f      	ldr	r3, [pc, #188]	; (8018418 <HAL_SPI_MspInit+0x10c>)
 801835c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801835e:	f003 0302 	and.w	r3, r3, #2
 8018362:	617b      	str	r3, [r7, #20]
 8018364:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|So_Pin|Si_Pin;
 8018366:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 801836a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801836c:	2302      	movs	r3, #2
 801836e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018370:	2300      	movs	r3, #0
 8018372:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018374:	2303      	movs	r3, #3
 8018376:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8018378:	2305      	movs	r3, #5
 801837a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801837c:	f107 031c 	add.w	r3, r7, #28
 8018380:	4619      	mov	r1, r3
 8018382:	4826      	ldr	r0, [pc, #152]	; (801841c <HAL_SPI_MspInit+0x110>)
 8018384:	f001 fc34 	bl	8019bf0 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 1, 0);
 8018388:	2200      	movs	r2, #0
 801838a:	2101      	movs	r1, #1
 801838c:	2024      	movs	r0, #36	; 0x24
 801838e:	f000 fd6e 	bl	8018e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8018392:	2024      	movs	r0, #36	; 0x24
 8018394:	f000 fd87 	bl	8018ea6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8018398:	e038      	b.n	801840c <HAL_SPI_MspInit+0x100>
  else if(hspi->Instance==SPI3)
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	681b      	ldr	r3, [r3, #0]
 801839e:	4a20      	ldr	r2, [pc, #128]	; (8018420 <HAL_SPI_MspInit+0x114>)
 80183a0:	4293      	cmp	r3, r2
 80183a2:	d133      	bne.n	801840c <HAL_SPI_MspInit+0x100>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80183a4:	2300      	movs	r3, #0
 80183a6:	613b      	str	r3, [r7, #16]
 80183a8:	4b1b      	ldr	r3, [pc, #108]	; (8018418 <HAL_SPI_MspInit+0x10c>)
 80183aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183ac:	4a1a      	ldr	r2, [pc, #104]	; (8018418 <HAL_SPI_MspInit+0x10c>)
 80183ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80183b2:	6413      	str	r3, [r2, #64]	; 0x40
 80183b4:	4b18      	ldr	r3, [pc, #96]	; (8018418 <HAL_SPI_MspInit+0x10c>)
 80183b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80183bc:	613b      	str	r3, [r7, #16]
 80183be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80183c0:	2300      	movs	r3, #0
 80183c2:	60fb      	str	r3, [r7, #12]
 80183c4:	4b14      	ldr	r3, [pc, #80]	; (8018418 <HAL_SPI_MspInit+0x10c>)
 80183c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80183c8:	4a13      	ldr	r2, [pc, #76]	; (8018418 <HAL_SPI_MspInit+0x10c>)
 80183ca:	f043 0302 	orr.w	r3, r3, #2
 80183ce:	6313      	str	r3, [r2, #48]	; 0x30
 80183d0:	4b11      	ldr	r3, [pc, #68]	; (8018418 <HAL_SPI_MspInit+0x10c>)
 80183d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80183d4:	f003 0302 	and.w	r3, r3, #2
 80183d8:	60fb      	str	r3, [r7, #12]
 80183da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TpCk_Pin|TpSo_Pin|TpSi_Pin;
 80183dc:	2338      	movs	r3, #56	; 0x38
 80183de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80183e0:	2302      	movs	r3, #2
 80183e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80183e4:	2300      	movs	r3, #0
 80183e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80183e8:	2303      	movs	r3, #3
 80183ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80183ec:	2306      	movs	r3, #6
 80183ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80183f0:	f107 031c 	add.w	r3, r7, #28
 80183f4:	4619      	mov	r1, r3
 80183f6:	4809      	ldr	r0, [pc, #36]	; (801841c <HAL_SPI_MspInit+0x110>)
 80183f8:	f001 fbfa 	bl	8019bf0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 1, 0);
 80183fc:	2200      	movs	r2, #0
 80183fe:	2101      	movs	r1, #1
 8018400:	2033      	movs	r0, #51	; 0x33
 8018402:	f000 fd34 	bl	8018e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8018406:	2033      	movs	r0, #51	; 0x33
 8018408:	f000 fd4d 	bl	8018ea6 <HAL_NVIC_EnableIRQ>
}
 801840c:	bf00      	nop
 801840e:	3730      	adds	r7, #48	; 0x30
 8018410:	46bd      	mov	sp, r7
 8018412:	bd80      	pop	{r7, pc}
 8018414:	40003800 	.word	0x40003800
 8018418:	40023800 	.word	0x40023800
 801841c:	40020400 	.word	0x40020400
 8018420:	40003c00 	.word	0x40003c00

08018424 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8018424:	b580      	push	{r7, lr}
 8018426:	b086      	sub	sp, #24
 8018428:	af00      	add	r7, sp, #0
 801842a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	681b      	ldr	r3, [r3, #0]
 8018430:	4a2c      	ldr	r2, [pc, #176]	; (80184e4 <HAL_TIM_Base_MspInit+0xc0>)
 8018432:	4293      	cmp	r3, r2
 8018434:	d10e      	bne.n	8018454 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8018436:	2300      	movs	r3, #0
 8018438:	617b      	str	r3, [r7, #20]
 801843a:	4b2b      	ldr	r3, [pc, #172]	; (80184e8 <HAL_TIM_Base_MspInit+0xc4>)
 801843c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801843e:	4a2a      	ldr	r2, [pc, #168]	; (80184e8 <HAL_TIM_Base_MspInit+0xc4>)
 8018440:	f043 0301 	orr.w	r3, r3, #1
 8018444:	6453      	str	r3, [r2, #68]	; 0x44
 8018446:	4b28      	ldr	r3, [pc, #160]	; (80184e8 <HAL_TIM_Base_MspInit+0xc4>)
 8018448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801844a:	f003 0301 	and.w	r3, r3, #1
 801844e:	617b      	str	r3, [r7, #20]
 8018450:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8018452:	e042      	b.n	80184da <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	681b      	ldr	r3, [r3, #0]
 8018458:	4a24      	ldr	r2, [pc, #144]	; (80184ec <HAL_TIM_Base_MspInit+0xc8>)
 801845a:	4293      	cmp	r3, r2
 801845c:	d116      	bne.n	801848c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 801845e:	2300      	movs	r3, #0
 8018460:	613b      	str	r3, [r7, #16]
 8018462:	4b21      	ldr	r3, [pc, #132]	; (80184e8 <HAL_TIM_Base_MspInit+0xc4>)
 8018464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018466:	4a20      	ldr	r2, [pc, #128]	; (80184e8 <HAL_TIM_Base_MspInit+0xc4>)
 8018468:	f043 0302 	orr.w	r3, r3, #2
 801846c:	6413      	str	r3, [r2, #64]	; 0x40
 801846e:	4b1e      	ldr	r3, [pc, #120]	; (80184e8 <HAL_TIM_Base_MspInit+0xc4>)
 8018470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018472:	f003 0302 	and.w	r3, r3, #2
 8018476:	613b      	str	r3, [r7, #16]
 8018478:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 801847a:	2200      	movs	r2, #0
 801847c:	2100      	movs	r1, #0
 801847e:	201d      	movs	r0, #29
 8018480:	f000 fcf5 	bl	8018e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8018484:	201d      	movs	r0, #29
 8018486:	f000 fd0e 	bl	8018ea6 <HAL_NVIC_EnableIRQ>
}
 801848a:	e026      	b.n	80184da <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM5)
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	681b      	ldr	r3, [r3, #0]
 8018490:	4a17      	ldr	r2, [pc, #92]	; (80184f0 <HAL_TIM_Base_MspInit+0xcc>)
 8018492:	4293      	cmp	r3, r2
 8018494:	d10e      	bne.n	80184b4 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8018496:	2300      	movs	r3, #0
 8018498:	60fb      	str	r3, [r7, #12]
 801849a:	4b13      	ldr	r3, [pc, #76]	; (80184e8 <HAL_TIM_Base_MspInit+0xc4>)
 801849c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801849e:	4a12      	ldr	r2, [pc, #72]	; (80184e8 <HAL_TIM_Base_MspInit+0xc4>)
 80184a0:	f043 0308 	orr.w	r3, r3, #8
 80184a4:	6413      	str	r3, [r2, #64]	; 0x40
 80184a6:	4b10      	ldr	r3, [pc, #64]	; (80184e8 <HAL_TIM_Base_MspInit+0xc4>)
 80184a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80184aa:	f003 0308 	and.w	r3, r3, #8
 80184ae:	60fb      	str	r3, [r7, #12]
 80184b0:	68fb      	ldr	r3, [r7, #12]
}
 80184b2:	e012      	b.n	80184da <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM7)
 80184b4:	687b      	ldr	r3, [r7, #4]
 80184b6:	681b      	ldr	r3, [r3, #0]
 80184b8:	4a0e      	ldr	r2, [pc, #56]	; (80184f4 <HAL_TIM_Base_MspInit+0xd0>)
 80184ba:	4293      	cmp	r3, r2
 80184bc:	d10d      	bne.n	80184da <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80184be:	2300      	movs	r3, #0
 80184c0:	60bb      	str	r3, [r7, #8]
 80184c2:	4b09      	ldr	r3, [pc, #36]	; (80184e8 <HAL_TIM_Base_MspInit+0xc4>)
 80184c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80184c6:	4a08      	ldr	r2, [pc, #32]	; (80184e8 <HAL_TIM_Base_MspInit+0xc4>)
 80184c8:	f043 0320 	orr.w	r3, r3, #32
 80184cc:	6413      	str	r3, [r2, #64]	; 0x40
 80184ce:	4b06      	ldr	r3, [pc, #24]	; (80184e8 <HAL_TIM_Base_MspInit+0xc4>)
 80184d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80184d2:	f003 0320 	and.w	r3, r3, #32
 80184d6:	60bb      	str	r3, [r7, #8]
 80184d8:	68bb      	ldr	r3, [r7, #8]
}
 80184da:	bf00      	nop
 80184dc:	3718      	adds	r7, #24
 80184de:	46bd      	mov	sp, r7
 80184e0:	bd80      	pop	{r7, pc}
 80184e2:	bf00      	nop
 80184e4:	40010000 	.word	0x40010000
 80184e8:	40023800 	.word	0x40023800
 80184ec:	40000400 	.word	0x40000400
 80184f0:	40000c00 	.word	0x40000c00
 80184f4:	40001400 	.word	0x40001400

080184f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80184f8:	b480      	push	{r7}
 80184fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80184fc:	e7fe      	b.n	80184fc <NMI_Handler+0x4>

080184fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80184fe:	b480      	push	{r7}
 8018500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8018502:	e7fe      	b.n	8018502 <HardFault_Handler+0x4>

08018504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8018504:	b480      	push	{r7}
 8018506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8018508:	e7fe      	b.n	8018508 <MemManage_Handler+0x4>

0801850a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801850a:	b480      	push	{r7}
 801850c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801850e:	e7fe      	b.n	801850e <BusFault_Handler+0x4>

08018510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8018510:	b480      	push	{r7}
 8018512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8018514:	e7fe      	b.n	8018514 <UsageFault_Handler+0x4>

08018516 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8018516:	b480      	push	{r7}
 8018518:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 801851a:	bf00      	nop
 801851c:	46bd      	mov	sp, r7
 801851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018522:	4770      	bx	lr

08018524 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8018524:	b480      	push	{r7}
 8018526:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8018528:	bf00      	nop
 801852a:	46bd      	mov	sp, r7
 801852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018530:	4770      	bx	lr

08018532 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8018532:	b480      	push	{r7}
 8018534:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8018536:	bf00      	nop
 8018538:	46bd      	mov	sp, r7
 801853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801853e:	4770      	bx	lr

08018540 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8018540:	b580      	push	{r7, lr}
 8018542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8018544:	f000 f902 	bl	801874c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8018548:	bf00      	nop
 801854a:	bd80      	pop	{r7, pc}

0801854c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 801854c:	b580      	push	{r7, lr}
 801854e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8018550:	4802      	ldr	r0, [pc, #8]	; (801855c <DMA1_Stream5_IRQHandler+0x10>)
 8018552:	f000 fe29 	bl	80191a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8018556:	bf00      	nop
 8018558:	bd80      	pop	{r7, pc}
 801855a:	bf00      	nop
 801855c:	20006a24 	.word	0x20006a24

08018560 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8018560:	b580      	push	{r7, lr}
 8018562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8018564:	4802      	ldr	r0, [pc, #8]	; (8018570 <TIM3_IRQHandler+0x10>)
 8018566:	f004 feff 	bl	801d368 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 801856a:	bf00      	nop
 801856c:	bd80      	pop	{r7, pc}
 801856e:	bf00      	nop
 8018570:	20006984 	.word	0x20006984

08018574 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8018574:	b580      	push	{r7, lr}
 8018576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8018578:	4802      	ldr	r0, [pc, #8]	; (8018584 <SPI2_IRQHandler+0x10>)
 801857a:	f004 fbd9 	bl	801cd30 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 801857e:	bf00      	nop
 8018580:	bd80      	pop	{r7, pc}
 8018582:	bf00      	nop
 8018584:	2000689c 	.word	0x2000689c

08018588 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8018588:	b580      	push	{r7, lr}
 801858a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 801858c:	4802      	ldr	r0, [pc, #8]	; (8018598 <SPI3_IRQHandler+0x10>)
 801858e:	f004 fbcf 	bl	801cd30 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8018592:	bf00      	nop
 8018594:	bd80      	pop	{r7, pc}
 8018596:	bf00      	nop
 8018598:	200069cc 	.word	0x200069cc

0801859c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 801859c:	b580      	push	{r7, lr}
 801859e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80185a0:	4802      	ldr	r0, [pc, #8]	; (80185ac <DMA2_Stream0_IRQHandler+0x10>)
 80185a2:	f000 fe01 	bl	80191a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80185a6:	bf00      	nop
 80185a8:	bd80      	pop	{r7, pc}
 80185aa:	bf00      	nop
 80185ac:	20006b18 	.word	0x20006b18

080185b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80185b0:	b580      	push	{r7, lr}
 80185b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80185b4:	4802      	ldr	r0, [pc, #8]	; (80185c0 <OTG_FS_IRQHandler+0x10>)
 80185b6:	f001 fe37 	bl	801a228 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80185ba:	bf00      	nop
 80185bc:	bd80      	pop	{r7, pc}
 80185be:	bf00      	nop
 80185c0:	20007118 	.word	0x20007118

080185c4 <_sbrk>:
 80185c4:	b580      	push	{r7, lr}
 80185c6:	b086      	sub	sp, #24
 80185c8:	af00      	add	r7, sp, #0
 80185ca:	6078      	str	r0, [r7, #4]
 80185cc:	4a14      	ldr	r2, [pc, #80]	; (8018620 <_sbrk+0x5c>)
 80185ce:	4b15      	ldr	r3, [pc, #84]	; (8018624 <_sbrk+0x60>)
 80185d0:	1ad3      	subs	r3, r2, r3
 80185d2:	617b      	str	r3, [r7, #20]
 80185d4:	697b      	ldr	r3, [r7, #20]
 80185d6:	613b      	str	r3, [r7, #16]
 80185d8:	4b13      	ldr	r3, [pc, #76]	; (8018628 <_sbrk+0x64>)
 80185da:	681b      	ldr	r3, [r3, #0]
 80185dc:	2b00      	cmp	r3, #0
 80185de:	d102      	bne.n	80185e6 <_sbrk+0x22>
 80185e0:	4b11      	ldr	r3, [pc, #68]	; (8018628 <_sbrk+0x64>)
 80185e2:	4a12      	ldr	r2, [pc, #72]	; (801862c <_sbrk+0x68>)
 80185e4:	601a      	str	r2, [r3, #0]
 80185e6:	4b10      	ldr	r3, [pc, #64]	; (8018628 <_sbrk+0x64>)
 80185e8:	681a      	ldr	r2, [r3, #0]
 80185ea:	687b      	ldr	r3, [r7, #4]
 80185ec:	4413      	add	r3, r2
 80185ee:	693a      	ldr	r2, [r7, #16]
 80185f0:	429a      	cmp	r2, r3
 80185f2:	d207      	bcs.n	8018604 <_sbrk+0x40>
 80185f4:	f00a fcb6 	bl	8022f64 <__errno>
 80185f8:	4603      	mov	r3, r0
 80185fa:	220c      	movs	r2, #12
 80185fc:	601a      	str	r2, [r3, #0]
 80185fe:	f04f 33ff 	mov.w	r3, #4294967295
 8018602:	e009      	b.n	8018618 <_sbrk+0x54>
 8018604:	4b08      	ldr	r3, [pc, #32]	; (8018628 <_sbrk+0x64>)
 8018606:	681b      	ldr	r3, [r3, #0]
 8018608:	60fb      	str	r3, [r7, #12]
 801860a:	4b07      	ldr	r3, [pc, #28]	; (8018628 <_sbrk+0x64>)
 801860c:	681a      	ldr	r2, [r3, #0]
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	4413      	add	r3, r2
 8018612:	4a05      	ldr	r2, [pc, #20]	; (8018628 <_sbrk+0x64>)
 8018614:	6013      	str	r3, [r2, #0]
 8018616:	68fb      	ldr	r3, [r7, #12]
 8018618:	4618      	mov	r0, r3
 801861a:	3718      	adds	r7, #24
 801861c:	46bd      	mov	sp, r7
 801861e:	bd80      	pop	{r7, pc}
 8018620:	20020000 	.word	0x20020000
 8018624:	00000600 	.word	0x00000600
 8018628:	200007b0 	.word	0x200007b0
 801862c:	20007530 	.word	0x20007530

08018630 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8018630:	b480      	push	{r7}
 8018632:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8018634:	4b06      	ldr	r3, [pc, #24]	; (8018650 <SystemInit+0x20>)
 8018636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801863a:	4a05      	ldr	r2, [pc, #20]	; (8018650 <SystemInit+0x20>)
 801863c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018640:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8018644:	bf00      	nop
 8018646:	46bd      	mov	sp, r7
 8018648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801864c:	4770      	bx	lr
 801864e:	bf00      	nop
 8018650:	e000ed00 	.word	0xe000ed00

08018654 <Reset_Handler>:
 8018654:	f8df d034 	ldr.w	sp, [pc, #52]	; 801868c <LoopFillZerobss+0x12>
 8018658:	480d      	ldr	r0, [pc, #52]	; (8018690 <LoopFillZerobss+0x16>)
 801865a:	490e      	ldr	r1, [pc, #56]	; (8018694 <LoopFillZerobss+0x1a>)
 801865c:	4a0e      	ldr	r2, [pc, #56]	; (8018698 <LoopFillZerobss+0x1e>)
 801865e:	2300      	movs	r3, #0
 8018660:	e002      	b.n	8018668 <LoopCopyDataInit>

08018662 <CopyDataInit>:
 8018662:	58d4      	ldr	r4, [r2, r3]
 8018664:	50c4      	str	r4, [r0, r3]
 8018666:	3304      	adds	r3, #4

08018668 <LoopCopyDataInit>:
 8018668:	18c4      	adds	r4, r0, r3
 801866a:	428c      	cmp	r4, r1
 801866c:	d3f9      	bcc.n	8018662 <CopyDataInit>
 801866e:	4a0b      	ldr	r2, [pc, #44]	; (801869c <LoopFillZerobss+0x22>)
 8018670:	4c0b      	ldr	r4, [pc, #44]	; (80186a0 <LoopFillZerobss+0x26>)
 8018672:	2300      	movs	r3, #0
 8018674:	e001      	b.n	801867a <LoopFillZerobss>

08018676 <FillZerobss>:
 8018676:	6013      	str	r3, [r2, #0]
 8018678:	3204      	adds	r2, #4

0801867a <LoopFillZerobss>:
 801867a:	42a2      	cmp	r2, r4
 801867c:	d3fb      	bcc.n	8018676 <FillZerobss>
 801867e:	f7ff ffd7 	bl	8018630 <SystemInit>
 8018682:	f00a fc75 	bl	8022f70 <__libc_init_array>
 8018686:	f7fe f81f 	bl	80166c8 <main>
 801868a:	4770      	bx	lr
 801868c:	20020000 	.word	0x20020000
 8018690:	20000000 	.word	0x20000000
 8018694:	20000764 	.word	0x20000764
 8018698:	080231bc 	.word	0x080231bc
 801869c:	20000764 	.word	0x20000764
 80186a0:	20007530 	.word	0x20007530

080186a4 <ADC_IRQHandler>:
 80186a4:	e7fe      	b.n	80186a4 <ADC_IRQHandler>
	...

080186a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80186a8:	b580      	push	{r7, lr}
 80186aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80186ac:	4b0e      	ldr	r3, [pc, #56]	; (80186e8 <HAL_Init+0x40>)
 80186ae:	681b      	ldr	r3, [r3, #0]
 80186b0:	4a0d      	ldr	r2, [pc, #52]	; (80186e8 <HAL_Init+0x40>)
 80186b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80186b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80186b8:	4b0b      	ldr	r3, [pc, #44]	; (80186e8 <HAL_Init+0x40>)
 80186ba:	681b      	ldr	r3, [r3, #0]
 80186bc:	4a0a      	ldr	r2, [pc, #40]	; (80186e8 <HAL_Init+0x40>)
 80186be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80186c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80186c4:	4b08      	ldr	r3, [pc, #32]	; (80186e8 <HAL_Init+0x40>)
 80186c6:	681b      	ldr	r3, [r3, #0]
 80186c8:	4a07      	ldr	r2, [pc, #28]	; (80186e8 <HAL_Init+0x40>)
 80186ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80186ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80186d0:	2003      	movs	r0, #3
 80186d2:	f000 fbc1 	bl	8018e58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80186d6:	2000      	movs	r0, #0
 80186d8:	f000 f808 	bl	80186ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80186dc:	f7ff fcc8 	bl	8018070 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80186e0:	2300      	movs	r3, #0
}
 80186e2:	4618      	mov	r0, r3
 80186e4:	bd80      	pop	{r7, pc}
 80186e6:	bf00      	nop
 80186e8:	40023c00 	.word	0x40023c00

080186ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80186ec:	b580      	push	{r7, lr}
 80186ee:	b082      	sub	sp, #8
 80186f0:	af00      	add	r7, sp, #0
 80186f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80186f4:	4b12      	ldr	r3, [pc, #72]	; (8018740 <HAL_InitTick+0x54>)
 80186f6:	681a      	ldr	r2, [r3, #0]
 80186f8:	4b12      	ldr	r3, [pc, #72]	; (8018744 <HAL_InitTick+0x58>)
 80186fa:	781b      	ldrb	r3, [r3, #0]
 80186fc:	4619      	mov	r1, r3
 80186fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018702:	fbb3 f3f1 	udiv	r3, r3, r1
 8018706:	fbb2 f3f3 	udiv	r3, r2, r3
 801870a:	4618      	mov	r0, r3
 801870c:	f000 fbd9 	bl	8018ec2 <HAL_SYSTICK_Config>
 8018710:	4603      	mov	r3, r0
 8018712:	2b00      	cmp	r3, #0
 8018714:	d001      	beq.n	801871a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8018716:	2301      	movs	r3, #1
 8018718:	e00e      	b.n	8018738 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	2b0f      	cmp	r3, #15
 801871e:	d80a      	bhi.n	8018736 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8018720:	2200      	movs	r2, #0
 8018722:	6879      	ldr	r1, [r7, #4]
 8018724:	f04f 30ff 	mov.w	r0, #4294967295
 8018728:	f000 fba1 	bl	8018e6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801872c:	4a06      	ldr	r2, [pc, #24]	; (8018748 <HAL_InitTick+0x5c>)
 801872e:	687b      	ldr	r3, [r7, #4]
 8018730:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8018732:	2300      	movs	r3, #0
 8018734:	e000      	b.n	8018738 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8018736:	2301      	movs	r3, #1
}
 8018738:	4618      	mov	r0, r3
 801873a:	3708      	adds	r7, #8
 801873c:	46bd      	mov	sp, r7
 801873e:	bd80      	pop	{r7, pc}
 8018740:	2000058c 	.word	0x2000058c
 8018744:	20000594 	.word	0x20000594
 8018748:	20000590 	.word	0x20000590

0801874c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801874c:	b480      	push	{r7}
 801874e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8018750:	4b06      	ldr	r3, [pc, #24]	; (801876c <HAL_IncTick+0x20>)
 8018752:	781b      	ldrb	r3, [r3, #0]
 8018754:	461a      	mov	r2, r3
 8018756:	4b06      	ldr	r3, [pc, #24]	; (8018770 <HAL_IncTick+0x24>)
 8018758:	681b      	ldr	r3, [r3, #0]
 801875a:	4413      	add	r3, r2
 801875c:	4a04      	ldr	r2, [pc, #16]	; (8018770 <HAL_IncTick+0x24>)
 801875e:	6013      	str	r3, [r2, #0]
}
 8018760:	bf00      	nop
 8018762:	46bd      	mov	sp, r7
 8018764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018768:	4770      	bx	lr
 801876a:	bf00      	nop
 801876c:	20000594 	.word	0x20000594
 8018770:	20006c24 	.word	0x20006c24

08018774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8018774:	b480      	push	{r7}
 8018776:	af00      	add	r7, sp, #0
  return uwTick;
 8018778:	4b03      	ldr	r3, [pc, #12]	; (8018788 <HAL_GetTick+0x14>)
 801877a:	681b      	ldr	r3, [r3, #0]
}
 801877c:	4618      	mov	r0, r3
 801877e:	46bd      	mov	sp, r7
 8018780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018784:	4770      	bx	lr
 8018786:	bf00      	nop
 8018788:	20006c24 	.word	0x20006c24

0801878c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801878c:	b580      	push	{r7, lr}
 801878e:	b084      	sub	sp, #16
 8018790:	af00      	add	r7, sp, #0
 8018792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8018794:	f7ff ffee 	bl	8018774 <HAL_GetTick>
 8018798:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801879a:	687b      	ldr	r3, [r7, #4]
 801879c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801879e:	68fb      	ldr	r3, [r7, #12]
 80187a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80187a4:	d005      	beq.n	80187b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80187a6:	4b0a      	ldr	r3, [pc, #40]	; (80187d0 <HAL_Delay+0x44>)
 80187a8:	781b      	ldrb	r3, [r3, #0]
 80187aa:	461a      	mov	r2, r3
 80187ac:	68fb      	ldr	r3, [r7, #12]
 80187ae:	4413      	add	r3, r2
 80187b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80187b2:	bf00      	nop
 80187b4:	f7ff ffde 	bl	8018774 <HAL_GetTick>
 80187b8:	4602      	mov	r2, r0
 80187ba:	68bb      	ldr	r3, [r7, #8]
 80187bc:	1ad3      	subs	r3, r2, r3
 80187be:	68fa      	ldr	r2, [r7, #12]
 80187c0:	429a      	cmp	r2, r3
 80187c2:	d8f7      	bhi.n	80187b4 <HAL_Delay+0x28>
  {
  }
}
 80187c4:	bf00      	nop
 80187c6:	bf00      	nop
 80187c8:	3710      	adds	r7, #16
 80187ca:	46bd      	mov	sp, r7
 80187cc:	bd80      	pop	{r7, pc}
 80187ce:	bf00      	nop
 80187d0:	20000594 	.word	0x20000594

080187d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80187d4:	b580      	push	{r7, lr}
 80187d6:	b084      	sub	sp, #16
 80187d8:	af00      	add	r7, sp, #0
 80187da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80187dc:	2300      	movs	r3, #0
 80187de:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80187e0:	687b      	ldr	r3, [r7, #4]
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	d101      	bne.n	80187ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80187e6:	2301      	movs	r3, #1
 80187e8:	e033      	b.n	8018852 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80187ea:	687b      	ldr	r3, [r7, #4]
 80187ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80187ee:	2b00      	cmp	r3, #0
 80187f0:	d109      	bne.n	8018806 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80187f2:	6878      	ldr	r0, [r7, #4]
 80187f4:	f7ff fc64 	bl	80180c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	2200      	movs	r2, #0
 80187fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	2200      	movs	r2, #0
 8018802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8018806:	687b      	ldr	r3, [r7, #4]
 8018808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801880a:	f003 0310 	and.w	r3, r3, #16
 801880e:	2b00      	cmp	r3, #0
 8018810:	d118      	bne.n	8018844 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018816:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801881a:	f023 0302 	bic.w	r3, r3, #2
 801881e:	f043 0202 	orr.w	r2, r3, #2
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8018826:	6878      	ldr	r0, [r7, #4]
 8018828:	f000 f94a 	bl	8018ac0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	2200      	movs	r2, #0
 8018830:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018836:	f023 0303 	bic.w	r3, r3, #3
 801883a:	f043 0201 	orr.w	r2, r3, #1
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	641a      	str	r2, [r3, #64]	; 0x40
 8018842:	e001      	b.n	8018848 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8018844:	2301      	movs	r3, #1
 8018846:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	2200      	movs	r2, #0
 801884c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8018850:	7bfb      	ldrb	r3, [r7, #15]
}
 8018852:	4618      	mov	r0, r3
 8018854:	3710      	adds	r7, #16
 8018856:	46bd      	mov	sp, r7
 8018858:	bd80      	pop	{r7, pc}
	...

0801885c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 801885c:	b480      	push	{r7}
 801885e:	b085      	sub	sp, #20
 8018860:	af00      	add	r7, sp, #0
 8018862:	6078      	str	r0, [r7, #4]
 8018864:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8018866:	2300      	movs	r3, #0
 8018868:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 801886a:	687b      	ldr	r3, [r7, #4]
 801886c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8018870:	2b01      	cmp	r3, #1
 8018872:	d101      	bne.n	8018878 <HAL_ADC_ConfigChannel+0x1c>
 8018874:	2302      	movs	r3, #2
 8018876:	e113      	b.n	8018aa0 <HAL_ADC_ConfigChannel+0x244>
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	2201      	movs	r2, #1
 801887c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8018880:	683b      	ldr	r3, [r7, #0]
 8018882:	681b      	ldr	r3, [r3, #0]
 8018884:	2b09      	cmp	r3, #9
 8018886:	d925      	bls.n	80188d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	681b      	ldr	r3, [r3, #0]
 801888c:	68d9      	ldr	r1, [r3, #12]
 801888e:	683b      	ldr	r3, [r7, #0]
 8018890:	681b      	ldr	r3, [r3, #0]
 8018892:	b29b      	uxth	r3, r3
 8018894:	461a      	mov	r2, r3
 8018896:	4613      	mov	r3, r2
 8018898:	005b      	lsls	r3, r3, #1
 801889a:	4413      	add	r3, r2
 801889c:	3b1e      	subs	r3, #30
 801889e:	2207      	movs	r2, #7
 80188a0:	fa02 f303 	lsl.w	r3, r2, r3
 80188a4:	43da      	mvns	r2, r3
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	681b      	ldr	r3, [r3, #0]
 80188aa:	400a      	ands	r2, r1
 80188ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	681b      	ldr	r3, [r3, #0]
 80188b2:	68d9      	ldr	r1, [r3, #12]
 80188b4:	683b      	ldr	r3, [r7, #0]
 80188b6:	689a      	ldr	r2, [r3, #8]
 80188b8:	683b      	ldr	r3, [r7, #0]
 80188ba:	681b      	ldr	r3, [r3, #0]
 80188bc:	b29b      	uxth	r3, r3
 80188be:	4618      	mov	r0, r3
 80188c0:	4603      	mov	r3, r0
 80188c2:	005b      	lsls	r3, r3, #1
 80188c4:	4403      	add	r3, r0
 80188c6:	3b1e      	subs	r3, #30
 80188c8:	409a      	lsls	r2, r3
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	681b      	ldr	r3, [r3, #0]
 80188ce:	430a      	orrs	r2, r1
 80188d0:	60da      	str	r2, [r3, #12]
 80188d2:	e022      	b.n	801891a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80188d4:	687b      	ldr	r3, [r7, #4]
 80188d6:	681b      	ldr	r3, [r3, #0]
 80188d8:	6919      	ldr	r1, [r3, #16]
 80188da:	683b      	ldr	r3, [r7, #0]
 80188dc:	681b      	ldr	r3, [r3, #0]
 80188de:	b29b      	uxth	r3, r3
 80188e0:	461a      	mov	r2, r3
 80188e2:	4613      	mov	r3, r2
 80188e4:	005b      	lsls	r3, r3, #1
 80188e6:	4413      	add	r3, r2
 80188e8:	2207      	movs	r2, #7
 80188ea:	fa02 f303 	lsl.w	r3, r2, r3
 80188ee:	43da      	mvns	r2, r3
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	681b      	ldr	r3, [r3, #0]
 80188f4:	400a      	ands	r2, r1
 80188f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	681b      	ldr	r3, [r3, #0]
 80188fc:	6919      	ldr	r1, [r3, #16]
 80188fe:	683b      	ldr	r3, [r7, #0]
 8018900:	689a      	ldr	r2, [r3, #8]
 8018902:	683b      	ldr	r3, [r7, #0]
 8018904:	681b      	ldr	r3, [r3, #0]
 8018906:	b29b      	uxth	r3, r3
 8018908:	4618      	mov	r0, r3
 801890a:	4603      	mov	r3, r0
 801890c:	005b      	lsls	r3, r3, #1
 801890e:	4403      	add	r3, r0
 8018910:	409a      	lsls	r2, r3
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	681b      	ldr	r3, [r3, #0]
 8018916:	430a      	orrs	r2, r1
 8018918:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 801891a:	683b      	ldr	r3, [r7, #0]
 801891c:	685b      	ldr	r3, [r3, #4]
 801891e:	2b06      	cmp	r3, #6
 8018920:	d824      	bhi.n	801896c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	681b      	ldr	r3, [r3, #0]
 8018926:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8018928:	683b      	ldr	r3, [r7, #0]
 801892a:	685a      	ldr	r2, [r3, #4]
 801892c:	4613      	mov	r3, r2
 801892e:	009b      	lsls	r3, r3, #2
 8018930:	4413      	add	r3, r2
 8018932:	3b05      	subs	r3, #5
 8018934:	221f      	movs	r2, #31
 8018936:	fa02 f303 	lsl.w	r3, r2, r3
 801893a:	43da      	mvns	r2, r3
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	681b      	ldr	r3, [r3, #0]
 8018940:	400a      	ands	r2, r1
 8018942:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	681b      	ldr	r3, [r3, #0]
 8018948:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801894a:	683b      	ldr	r3, [r7, #0]
 801894c:	681b      	ldr	r3, [r3, #0]
 801894e:	b29b      	uxth	r3, r3
 8018950:	4618      	mov	r0, r3
 8018952:	683b      	ldr	r3, [r7, #0]
 8018954:	685a      	ldr	r2, [r3, #4]
 8018956:	4613      	mov	r3, r2
 8018958:	009b      	lsls	r3, r3, #2
 801895a:	4413      	add	r3, r2
 801895c:	3b05      	subs	r3, #5
 801895e:	fa00 f203 	lsl.w	r2, r0, r3
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	681b      	ldr	r3, [r3, #0]
 8018966:	430a      	orrs	r2, r1
 8018968:	635a      	str	r2, [r3, #52]	; 0x34
 801896a:	e04c      	b.n	8018a06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 801896c:	683b      	ldr	r3, [r7, #0]
 801896e:	685b      	ldr	r3, [r3, #4]
 8018970:	2b0c      	cmp	r3, #12
 8018972:	d824      	bhi.n	80189be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	681b      	ldr	r3, [r3, #0]
 8018978:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801897a:	683b      	ldr	r3, [r7, #0]
 801897c:	685a      	ldr	r2, [r3, #4]
 801897e:	4613      	mov	r3, r2
 8018980:	009b      	lsls	r3, r3, #2
 8018982:	4413      	add	r3, r2
 8018984:	3b23      	subs	r3, #35	; 0x23
 8018986:	221f      	movs	r2, #31
 8018988:	fa02 f303 	lsl.w	r3, r2, r3
 801898c:	43da      	mvns	r2, r3
 801898e:	687b      	ldr	r3, [r7, #4]
 8018990:	681b      	ldr	r3, [r3, #0]
 8018992:	400a      	ands	r2, r1
 8018994:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	681b      	ldr	r3, [r3, #0]
 801899a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801899c:	683b      	ldr	r3, [r7, #0]
 801899e:	681b      	ldr	r3, [r3, #0]
 80189a0:	b29b      	uxth	r3, r3
 80189a2:	4618      	mov	r0, r3
 80189a4:	683b      	ldr	r3, [r7, #0]
 80189a6:	685a      	ldr	r2, [r3, #4]
 80189a8:	4613      	mov	r3, r2
 80189aa:	009b      	lsls	r3, r3, #2
 80189ac:	4413      	add	r3, r2
 80189ae:	3b23      	subs	r3, #35	; 0x23
 80189b0:	fa00 f203 	lsl.w	r2, r0, r3
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	681b      	ldr	r3, [r3, #0]
 80189b8:	430a      	orrs	r2, r1
 80189ba:	631a      	str	r2, [r3, #48]	; 0x30
 80189bc:	e023      	b.n	8018a06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	681b      	ldr	r3, [r3, #0]
 80189c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80189c4:	683b      	ldr	r3, [r7, #0]
 80189c6:	685a      	ldr	r2, [r3, #4]
 80189c8:	4613      	mov	r3, r2
 80189ca:	009b      	lsls	r3, r3, #2
 80189cc:	4413      	add	r3, r2
 80189ce:	3b41      	subs	r3, #65	; 0x41
 80189d0:	221f      	movs	r2, #31
 80189d2:	fa02 f303 	lsl.w	r3, r2, r3
 80189d6:	43da      	mvns	r2, r3
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	681b      	ldr	r3, [r3, #0]
 80189dc:	400a      	ands	r2, r1
 80189de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	681b      	ldr	r3, [r3, #0]
 80189e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80189e6:	683b      	ldr	r3, [r7, #0]
 80189e8:	681b      	ldr	r3, [r3, #0]
 80189ea:	b29b      	uxth	r3, r3
 80189ec:	4618      	mov	r0, r3
 80189ee:	683b      	ldr	r3, [r7, #0]
 80189f0:	685a      	ldr	r2, [r3, #4]
 80189f2:	4613      	mov	r3, r2
 80189f4:	009b      	lsls	r3, r3, #2
 80189f6:	4413      	add	r3, r2
 80189f8:	3b41      	subs	r3, #65	; 0x41
 80189fa:	fa00 f203 	lsl.w	r2, r0, r3
 80189fe:	687b      	ldr	r3, [r7, #4]
 8018a00:	681b      	ldr	r3, [r3, #0]
 8018a02:	430a      	orrs	r2, r1
 8018a04:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8018a06:	4b29      	ldr	r3, [pc, #164]	; (8018aac <HAL_ADC_ConfigChannel+0x250>)
 8018a08:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	681b      	ldr	r3, [r3, #0]
 8018a0e:	4a28      	ldr	r2, [pc, #160]	; (8018ab0 <HAL_ADC_ConfigChannel+0x254>)
 8018a10:	4293      	cmp	r3, r2
 8018a12:	d10f      	bne.n	8018a34 <HAL_ADC_ConfigChannel+0x1d8>
 8018a14:	683b      	ldr	r3, [r7, #0]
 8018a16:	681b      	ldr	r3, [r3, #0]
 8018a18:	2b12      	cmp	r3, #18
 8018a1a:	d10b      	bne.n	8018a34 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8018a1c:	68fb      	ldr	r3, [r7, #12]
 8018a1e:	685b      	ldr	r3, [r3, #4]
 8018a20:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8018a24:	68fb      	ldr	r3, [r7, #12]
 8018a26:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8018a28:	68fb      	ldr	r3, [r7, #12]
 8018a2a:	685b      	ldr	r3, [r3, #4]
 8018a2c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8018a30:	68fb      	ldr	r3, [r7, #12]
 8018a32:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	681b      	ldr	r3, [r3, #0]
 8018a38:	4a1d      	ldr	r2, [pc, #116]	; (8018ab0 <HAL_ADC_ConfigChannel+0x254>)
 8018a3a:	4293      	cmp	r3, r2
 8018a3c:	d12b      	bne.n	8018a96 <HAL_ADC_ConfigChannel+0x23a>
 8018a3e:	683b      	ldr	r3, [r7, #0]
 8018a40:	681b      	ldr	r3, [r3, #0]
 8018a42:	4a1c      	ldr	r2, [pc, #112]	; (8018ab4 <HAL_ADC_ConfigChannel+0x258>)
 8018a44:	4293      	cmp	r3, r2
 8018a46:	d003      	beq.n	8018a50 <HAL_ADC_ConfigChannel+0x1f4>
 8018a48:	683b      	ldr	r3, [r7, #0]
 8018a4a:	681b      	ldr	r3, [r3, #0]
 8018a4c:	2b11      	cmp	r3, #17
 8018a4e:	d122      	bne.n	8018a96 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8018a50:	68fb      	ldr	r3, [r7, #12]
 8018a52:	685b      	ldr	r3, [r3, #4]
 8018a54:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8018a58:	68fb      	ldr	r3, [r7, #12]
 8018a5a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8018a5c:	68fb      	ldr	r3, [r7, #12]
 8018a5e:	685b      	ldr	r3, [r3, #4]
 8018a60:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8018a64:	68fb      	ldr	r3, [r7, #12]
 8018a66:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8018a68:	683b      	ldr	r3, [r7, #0]
 8018a6a:	681b      	ldr	r3, [r3, #0]
 8018a6c:	4a11      	ldr	r2, [pc, #68]	; (8018ab4 <HAL_ADC_ConfigChannel+0x258>)
 8018a6e:	4293      	cmp	r3, r2
 8018a70:	d111      	bne.n	8018a96 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8018a72:	4b11      	ldr	r3, [pc, #68]	; (8018ab8 <HAL_ADC_ConfigChannel+0x25c>)
 8018a74:	681b      	ldr	r3, [r3, #0]
 8018a76:	4a11      	ldr	r2, [pc, #68]	; (8018abc <HAL_ADC_ConfigChannel+0x260>)
 8018a78:	fba2 2303 	umull	r2, r3, r2, r3
 8018a7c:	0c9a      	lsrs	r2, r3, #18
 8018a7e:	4613      	mov	r3, r2
 8018a80:	009b      	lsls	r3, r3, #2
 8018a82:	4413      	add	r3, r2
 8018a84:	005b      	lsls	r3, r3, #1
 8018a86:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8018a88:	e002      	b.n	8018a90 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8018a8a:	68bb      	ldr	r3, [r7, #8]
 8018a8c:	3b01      	subs	r3, #1
 8018a8e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8018a90:	68bb      	ldr	r3, [r7, #8]
 8018a92:	2b00      	cmp	r3, #0
 8018a94:	d1f9      	bne.n	8018a8a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8018a96:	687b      	ldr	r3, [r7, #4]
 8018a98:	2200      	movs	r2, #0
 8018a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8018a9e:	2300      	movs	r3, #0
}
 8018aa0:	4618      	mov	r0, r3
 8018aa2:	3714      	adds	r7, #20
 8018aa4:	46bd      	mov	sp, r7
 8018aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aaa:	4770      	bx	lr
 8018aac:	40012300 	.word	0x40012300
 8018ab0:	40012000 	.word	0x40012000
 8018ab4:	10000012 	.word	0x10000012
 8018ab8:	2000058c 	.word	0x2000058c
 8018abc:	431bde83 	.word	0x431bde83

08018ac0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8018ac0:	b480      	push	{r7}
 8018ac2:	b085      	sub	sp, #20
 8018ac4:	af00      	add	r7, sp, #0
 8018ac6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8018ac8:	4b79      	ldr	r3, [pc, #484]	; (8018cb0 <ADC_Init+0x1f0>)
 8018aca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8018acc:	68fb      	ldr	r3, [r7, #12]
 8018ace:	685b      	ldr	r3, [r3, #4]
 8018ad0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8018ad4:	68fb      	ldr	r3, [r7, #12]
 8018ad6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8018ad8:	68fb      	ldr	r3, [r7, #12]
 8018ada:	685a      	ldr	r2, [r3, #4]
 8018adc:	687b      	ldr	r3, [r7, #4]
 8018ade:	685b      	ldr	r3, [r3, #4]
 8018ae0:	431a      	orrs	r2, r3
 8018ae2:	68fb      	ldr	r3, [r7, #12]
 8018ae4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	681b      	ldr	r3, [r3, #0]
 8018aea:	685a      	ldr	r2, [r3, #4]
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	681b      	ldr	r3, [r3, #0]
 8018af0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8018af4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8018af6:	687b      	ldr	r3, [r7, #4]
 8018af8:	681b      	ldr	r3, [r3, #0]
 8018afa:	6859      	ldr	r1, [r3, #4]
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	691b      	ldr	r3, [r3, #16]
 8018b00:	021a      	lsls	r2, r3, #8
 8018b02:	687b      	ldr	r3, [r7, #4]
 8018b04:	681b      	ldr	r3, [r3, #0]
 8018b06:	430a      	orrs	r2, r1
 8018b08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	681b      	ldr	r3, [r3, #0]
 8018b0e:	685a      	ldr	r2, [r3, #4]
 8018b10:	687b      	ldr	r3, [r7, #4]
 8018b12:	681b      	ldr	r3, [r3, #0]
 8018b14:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8018b18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	681b      	ldr	r3, [r3, #0]
 8018b1e:	6859      	ldr	r1, [r3, #4]
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	689a      	ldr	r2, [r3, #8]
 8018b24:	687b      	ldr	r3, [r7, #4]
 8018b26:	681b      	ldr	r3, [r3, #0]
 8018b28:	430a      	orrs	r2, r1
 8018b2a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8018b2c:	687b      	ldr	r3, [r7, #4]
 8018b2e:	681b      	ldr	r3, [r3, #0]
 8018b30:	689a      	ldr	r2, [r3, #8]
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	681b      	ldr	r3, [r3, #0]
 8018b36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8018b3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	681b      	ldr	r3, [r3, #0]
 8018b40:	6899      	ldr	r1, [r3, #8]
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	68da      	ldr	r2, [r3, #12]
 8018b46:	687b      	ldr	r3, [r7, #4]
 8018b48:	681b      	ldr	r3, [r3, #0]
 8018b4a:	430a      	orrs	r2, r1
 8018b4c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8018b4e:	687b      	ldr	r3, [r7, #4]
 8018b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b52:	4a58      	ldr	r2, [pc, #352]	; (8018cb4 <ADC_Init+0x1f4>)
 8018b54:	4293      	cmp	r3, r2
 8018b56:	d022      	beq.n	8018b9e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8018b58:	687b      	ldr	r3, [r7, #4]
 8018b5a:	681b      	ldr	r3, [r3, #0]
 8018b5c:	689a      	ldr	r2, [r3, #8]
 8018b5e:	687b      	ldr	r3, [r7, #4]
 8018b60:	681b      	ldr	r3, [r3, #0]
 8018b62:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8018b66:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8018b68:	687b      	ldr	r3, [r7, #4]
 8018b6a:	681b      	ldr	r3, [r3, #0]
 8018b6c:	6899      	ldr	r1, [r3, #8]
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	681b      	ldr	r3, [r3, #0]
 8018b76:	430a      	orrs	r2, r1
 8018b78:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	681b      	ldr	r3, [r3, #0]
 8018b7e:	689a      	ldr	r2, [r3, #8]
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	681b      	ldr	r3, [r3, #0]
 8018b84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8018b88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	681b      	ldr	r3, [r3, #0]
 8018b8e:	6899      	ldr	r1, [r3, #8]
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	681b      	ldr	r3, [r3, #0]
 8018b98:	430a      	orrs	r2, r1
 8018b9a:	609a      	str	r2, [r3, #8]
 8018b9c:	e00f      	b.n	8018bbe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8018b9e:	687b      	ldr	r3, [r7, #4]
 8018ba0:	681b      	ldr	r3, [r3, #0]
 8018ba2:	689a      	ldr	r2, [r3, #8]
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	681b      	ldr	r3, [r3, #0]
 8018ba8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8018bac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	681b      	ldr	r3, [r3, #0]
 8018bb2:	689a      	ldr	r2, [r3, #8]
 8018bb4:	687b      	ldr	r3, [r7, #4]
 8018bb6:	681b      	ldr	r3, [r3, #0]
 8018bb8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8018bbc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8018bbe:	687b      	ldr	r3, [r7, #4]
 8018bc0:	681b      	ldr	r3, [r3, #0]
 8018bc2:	689a      	ldr	r2, [r3, #8]
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	681b      	ldr	r3, [r3, #0]
 8018bc8:	f022 0202 	bic.w	r2, r2, #2
 8018bcc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8018bce:	687b      	ldr	r3, [r7, #4]
 8018bd0:	681b      	ldr	r3, [r3, #0]
 8018bd2:	6899      	ldr	r1, [r3, #8]
 8018bd4:	687b      	ldr	r3, [r7, #4]
 8018bd6:	7e1b      	ldrb	r3, [r3, #24]
 8018bd8:	005a      	lsls	r2, r3, #1
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	681b      	ldr	r3, [r3, #0]
 8018bde:	430a      	orrs	r2, r1
 8018be0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8018be2:	687b      	ldr	r3, [r7, #4]
 8018be4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8018be8:	2b00      	cmp	r3, #0
 8018bea:	d01b      	beq.n	8018c24 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8018bec:	687b      	ldr	r3, [r7, #4]
 8018bee:	681b      	ldr	r3, [r3, #0]
 8018bf0:	685a      	ldr	r2, [r3, #4]
 8018bf2:	687b      	ldr	r3, [r7, #4]
 8018bf4:	681b      	ldr	r3, [r3, #0]
 8018bf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8018bfa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	681b      	ldr	r3, [r3, #0]
 8018c00:	685a      	ldr	r2, [r3, #4]
 8018c02:	687b      	ldr	r3, [r7, #4]
 8018c04:	681b      	ldr	r3, [r3, #0]
 8018c06:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8018c0a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	681b      	ldr	r3, [r3, #0]
 8018c10:	6859      	ldr	r1, [r3, #4]
 8018c12:	687b      	ldr	r3, [r7, #4]
 8018c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c16:	3b01      	subs	r3, #1
 8018c18:	035a      	lsls	r2, r3, #13
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	681b      	ldr	r3, [r3, #0]
 8018c1e:	430a      	orrs	r2, r1
 8018c20:	605a      	str	r2, [r3, #4]
 8018c22:	e007      	b.n	8018c34 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	681b      	ldr	r3, [r3, #0]
 8018c28:	685a      	ldr	r2, [r3, #4]
 8018c2a:	687b      	ldr	r3, [r7, #4]
 8018c2c:	681b      	ldr	r3, [r3, #0]
 8018c2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8018c32:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	681b      	ldr	r3, [r3, #0]
 8018c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	681b      	ldr	r3, [r3, #0]
 8018c3e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8018c42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	681b      	ldr	r3, [r3, #0]
 8018c48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8018c4a:	687b      	ldr	r3, [r7, #4]
 8018c4c:	69db      	ldr	r3, [r3, #28]
 8018c4e:	3b01      	subs	r3, #1
 8018c50:	051a      	lsls	r2, r3, #20
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	681b      	ldr	r3, [r3, #0]
 8018c56:	430a      	orrs	r2, r1
 8018c58:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	681b      	ldr	r3, [r3, #0]
 8018c5e:	689a      	ldr	r2, [r3, #8]
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	681b      	ldr	r3, [r3, #0]
 8018c64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8018c68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	681b      	ldr	r3, [r3, #0]
 8018c6e:	6899      	ldr	r1, [r3, #8]
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018c76:	025a      	lsls	r2, r3, #9
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	681b      	ldr	r3, [r3, #0]
 8018c7c:	430a      	orrs	r2, r1
 8018c7e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	681b      	ldr	r3, [r3, #0]
 8018c84:	689a      	ldr	r2, [r3, #8]
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	681b      	ldr	r3, [r3, #0]
 8018c8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018c8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	681b      	ldr	r3, [r3, #0]
 8018c94:	6899      	ldr	r1, [r3, #8]
 8018c96:	687b      	ldr	r3, [r7, #4]
 8018c98:	695b      	ldr	r3, [r3, #20]
 8018c9a:	029a      	lsls	r2, r3, #10
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	681b      	ldr	r3, [r3, #0]
 8018ca0:	430a      	orrs	r2, r1
 8018ca2:	609a      	str	r2, [r3, #8]
}
 8018ca4:	bf00      	nop
 8018ca6:	3714      	adds	r7, #20
 8018ca8:	46bd      	mov	sp, r7
 8018caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cae:	4770      	bx	lr
 8018cb0:	40012300 	.word	0x40012300
 8018cb4:	0f000001 	.word	0x0f000001

08018cb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8018cb8:	b480      	push	{r7}
 8018cba:	b085      	sub	sp, #20
 8018cbc:	af00      	add	r7, sp, #0
 8018cbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	f003 0307 	and.w	r3, r3, #7
 8018cc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8018cc8:	4b0c      	ldr	r3, [pc, #48]	; (8018cfc <__NVIC_SetPriorityGrouping+0x44>)
 8018cca:	68db      	ldr	r3, [r3, #12]
 8018ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8018cce:	68ba      	ldr	r2, [r7, #8]
 8018cd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8018cd4:	4013      	ands	r3, r2
 8018cd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8018cd8:	68fb      	ldr	r3, [r7, #12]
 8018cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8018cdc:	68bb      	ldr	r3, [r7, #8]
 8018cde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8018ce0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8018ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8018ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8018cea:	4a04      	ldr	r2, [pc, #16]	; (8018cfc <__NVIC_SetPriorityGrouping+0x44>)
 8018cec:	68bb      	ldr	r3, [r7, #8]
 8018cee:	60d3      	str	r3, [r2, #12]
}
 8018cf0:	bf00      	nop
 8018cf2:	3714      	adds	r7, #20
 8018cf4:	46bd      	mov	sp, r7
 8018cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cfa:	4770      	bx	lr
 8018cfc:	e000ed00 	.word	0xe000ed00

08018d00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8018d00:	b480      	push	{r7}
 8018d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8018d04:	4b04      	ldr	r3, [pc, #16]	; (8018d18 <__NVIC_GetPriorityGrouping+0x18>)
 8018d06:	68db      	ldr	r3, [r3, #12]
 8018d08:	0a1b      	lsrs	r3, r3, #8
 8018d0a:	f003 0307 	and.w	r3, r3, #7
}
 8018d0e:	4618      	mov	r0, r3
 8018d10:	46bd      	mov	sp, r7
 8018d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d16:	4770      	bx	lr
 8018d18:	e000ed00 	.word	0xe000ed00

08018d1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8018d1c:	b480      	push	{r7}
 8018d1e:	b083      	sub	sp, #12
 8018d20:	af00      	add	r7, sp, #0
 8018d22:	4603      	mov	r3, r0
 8018d24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8018d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018d2a:	2b00      	cmp	r3, #0
 8018d2c:	db0b      	blt.n	8018d46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8018d2e:	79fb      	ldrb	r3, [r7, #7]
 8018d30:	f003 021f 	and.w	r2, r3, #31
 8018d34:	4907      	ldr	r1, [pc, #28]	; (8018d54 <__NVIC_EnableIRQ+0x38>)
 8018d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018d3a:	095b      	lsrs	r3, r3, #5
 8018d3c:	2001      	movs	r0, #1
 8018d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8018d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8018d46:	bf00      	nop
 8018d48:	370c      	adds	r7, #12
 8018d4a:	46bd      	mov	sp, r7
 8018d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d50:	4770      	bx	lr
 8018d52:	bf00      	nop
 8018d54:	e000e100 	.word	0xe000e100

08018d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8018d58:	b480      	push	{r7}
 8018d5a:	b083      	sub	sp, #12
 8018d5c:	af00      	add	r7, sp, #0
 8018d5e:	4603      	mov	r3, r0
 8018d60:	6039      	str	r1, [r7, #0]
 8018d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8018d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018d68:	2b00      	cmp	r3, #0
 8018d6a:	db0a      	blt.n	8018d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018d6c:	683b      	ldr	r3, [r7, #0]
 8018d6e:	b2da      	uxtb	r2, r3
 8018d70:	490c      	ldr	r1, [pc, #48]	; (8018da4 <__NVIC_SetPriority+0x4c>)
 8018d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018d76:	0112      	lsls	r2, r2, #4
 8018d78:	b2d2      	uxtb	r2, r2
 8018d7a:	440b      	add	r3, r1
 8018d7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8018d80:	e00a      	b.n	8018d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018d82:	683b      	ldr	r3, [r7, #0]
 8018d84:	b2da      	uxtb	r2, r3
 8018d86:	4908      	ldr	r1, [pc, #32]	; (8018da8 <__NVIC_SetPriority+0x50>)
 8018d88:	79fb      	ldrb	r3, [r7, #7]
 8018d8a:	f003 030f 	and.w	r3, r3, #15
 8018d8e:	3b04      	subs	r3, #4
 8018d90:	0112      	lsls	r2, r2, #4
 8018d92:	b2d2      	uxtb	r2, r2
 8018d94:	440b      	add	r3, r1
 8018d96:	761a      	strb	r2, [r3, #24]
}
 8018d98:	bf00      	nop
 8018d9a:	370c      	adds	r7, #12
 8018d9c:	46bd      	mov	sp, r7
 8018d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018da2:	4770      	bx	lr
 8018da4:	e000e100 	.word	0xe000e100
 8018da8:	e000ed00 	.word	0xe000ed00

08018dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8018dac:	b480      	push	{r7}
 8018dae:	b089      	sub	sp, #36	; 0x24
 8018db0:	af00      	add	r7, sp, #0
 8018db2:	60f8      	str	r0, [r7, #12]
 8018db4:	60b9      	str	r1, [r7, #8]
 8018db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8018db8:	68fb      	ldr	r3, [r7, #12]
 8018dba:	f003 0307 	and.w	r3, r3, #7
 8018dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8018dc0:	69fb      	ldr	r3, [r7, #28]
 8018dc2:	f1c3 0307 	rsb	r3, r3, #7
 8018dc6:	2b04      	cmp	r3, #4
 8018dc8:	bf28      	it	cs
 8018dca:	2304      	movcs	r3, #4
 8018dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8018dce:	69fb      	ldr	r3, [r7, #28]
 8018dd0:	3304      	adds	r3, #4
 8018dd2:	2b06      	cmp	r3, #6
 8018dd4:	d902      	bls.n	8018ddc <NVIC_EncodePriority+0x30>
 8018dd6:	69fb      	ldr	r3, [r7, #28]
 8018dd8:	3b03      	subs	r3, #3
 8018dda:	e000      	b.n	8018dde <NVIC_EncodePriority+0x32>
 8018ddc:	2300      	movs	r3, #0
 8018dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8018de0:	f04f 32ff 	mov.w	r2, #4294967295
 8018de4:	69bb      	ldr	r3, [r7, #24]
 8018de6:	fa02 f303 	lsl.w	r3, r2, r3
 8018dea:	43da      	mvns	r2, r3
 8018dec:	68bb      	ldr	r3, [r7, #8]
 8018dee:	401a      	ands	r2, r3
 8018df0:	697b      	ldr	r3, [r7, #20]
 8018df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8018df4:	f04f 31ff 	mov.w	r1, #4294967295
 8018df8:	697b      	ldr	r3, [r7, #20]
 8018dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8018dfe:	43d9      	mvns	r1, r3
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8018e04:	4313      	orrs	r3, r2
         );
}
 8018e06:	4618      	mov	r0, r3
 8018e08:	3724      	adds	r7, #36	; 0x24
 8018e0a:	46bd      	mov	sp, r7
 8018e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e10:	4770      	bx	lr
	...

08018e14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8018e14:	b580      	push	{r7, lr}
 8018e16:	b082      	sub	sp, #8
 8018e18:	af00      	add	r7, sp, #0
 8018e1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	3b01      	subs	r3, #1
 8018e20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8018e24:	d301      	bcc.n	8018e2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8018e26:	2301      	movs	r3, #1
 8018e28:	e00f      	b.n	8018e4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8018e2a:	4a0a      	ldr	r2, [pc, #40]	; (8018e54 <SysTick_Config+0x40>)
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	3b01      	subs	r3, #1
 8018e30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8018e32:	210f      	movs	r1, #15
 8018e34:	f04f 30ff 	mov.w	r0, #4294967295
 8018e38:	f7ff ff8e 	bl	8018d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8018e3c:	4b05      	ldr	r3, [pc, #20]	; (8018e54 <SysTick_Config+0x40>)
 8018e3e:	2200      	movs	r2, #0
 8018e40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8018e42:	4b04      	ldr	r3, [pc, #16]	; (8018e54 <SysTick_Config+0x40>)
 8018e44:	2207      	movs	r2, #7
 8018e46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8018e48:	2300      	movs	r3, #0
}
 8018e4a:	4618      	mov	r0, r3
 8018e4c:	3708      	adds	r7, #8
 8018e4e:	46bd      	mov	sp, r7
 8018e50:	bd80      	pop	{r7, pc}
 8018e52:	bf00      	nop
 8018e54:	e000e010 	.word	0xe000e010

08018e58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8018e58:	b580      	push	{r7, lr}
 8018e5a:	b082      	sub	sp, #8
 8018e5c:	af00      	add	r7, sp, #0
 8018e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8018e60:	6878      	ldr	r0, [r7, #4]
 8018e62:	f7ff ff29 	bl	8018cb8 <__NVIC_SetPriorityGrouping>
}
 8018e66:	bf00      	nop
 8018e68:	3708      	adds	r7, #8
 8018e6a:	46bd      	mov	sp, r7
 8018e6c:	bd80      	pop	{r7, pc}

08018e6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8018e6e:	b580      	push	{r7, lr}
 8018e70:	b086      	sub	sp, #24
 8018e72:	af00      	add	r7, sp, #0
 8018e74:	4603      	mov	r3, r0
 8018e76:	60b9      	str	r1, [r7, #8]
 8018e78:	607a      	str	r2, [r7, #4]
 8018e7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8018e7c:	2300      	movs	r3, #0
 8018e7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8018e80:	f7ff ff3e 	bl	8018d00 <__NVIC_GetPriorityGrouping>
 8018e84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8018e86:	687a      	ldr	r2, [r7, #4]
 8018e88:	68b9      	ldr	r1, [r7, #8]
 8018e8a:	6978      	ldr	r0, [r7, #20]
 8018e8c:	f7ff ff8e 	bl	8018dac <NVIC_EncodePriority>
 8018e90:	4602      	mov	r2, r0
 8018e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018e96:	4611      	mov	r1, r2
 8018e98:	4618      	mov	r0, r3
 8018e9a:	f7ff ff5d 	bl	8018d58 <__NVIC_SetPriority>
}
 8018e9e:	bf00      	nop
 8018ea0:	3718      	adds	r7, #24
 8018ea2:	46bd      	mov	sp, r7
 8018ea4:	bd80      	pop	{r7, pc}

08018ea6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8018ea6:	b580      	push	{r7, lr}
 8018ea8:	b082      	sub	sp, #8
 8018eaa:	af00      	add	r7, sp, #0
 8018eac:	4603      	mov	r3, r0
 8018eae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8018eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018eb4:	4618      	mov	r0, r3
 8018eb6:	f7ff ff31 	bl	8018d1c <__NVIC_EnableIRQ>
}
 8018eba:	bf00      	nop
 8018ebc:	3708      	adds	r7, #8
 8018ebe:	46bd      	mov	sp, r7
 8018ec0:	bd80      	pop	{r7, pc}

08018ec2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8018ec2:	b580      	push	{r7, lr}
 8018ec4:	b082      	sub	sp, #8
 8018ec6:	af00      	add	r7, sp, #0
 8018ec8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8018eca:	6878      	ldr	r0, [r7, #4]
 8018ecc:	f7ff ffa2 	bl	8018e14 <SysTick_Config>
 8018ed0:	4603      	mov	r3, r0
}
 8018ed2:	4618      	mov	r0, r3
 8018ed4:	3708      	adds	r7, #8
 8018ed6:	46bd      	mov	sp, r7
 8018ed8:	bd80      	pop	{r7, pc}

08018eda <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8018eda:	b580      	push	{r7, lr}
 8018edc:	b082      	sub	sp, #8
 8018ede:	af00      	add	r7, sp, #0
 8018ee0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8018ee2:	687b      	ldr	r3, [r7, #4]
 8018ee4:	2b00      	cmp	r3, #0
 8018ee6:	d101      	bne.n	8018eec <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8018ee8:	2301      	movs	r3, #1
 8018eea:	e014      	b.n	8018f16 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	791b      	ldrb	r3, [r3, #4]
 8018ef0:	b2db      	uxtb	r3, r3
 8018ef2:	2b00      	cmp	r3, #0
 8018ef4:	d105      	bne.n	8018f02 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8018ef6:	687b      	ldr	r3, [r7, #4]
 8018ef8:	2200      	movs	r2, #0
 8018efa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8018efc:	6878      	ldr	r0, [r7, #4]
 8018efe:	f7ff f985 	bl	801820c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8018f02:	687b      	ldr	r3, [r7, #4]
 8018f04:	2202      	movs	r2, #2
 8018f06:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	2200      	movs	r2, #0
 8018f0c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	2201      	movs	r2, #1
 8018f12:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8018f14:	2300      	movs	r3, #0
}
 8018f16:	4618      	mov	r0, r3
 8018f18:	3708      	adds	r7, #8
 8018f1a:	46bd      	mov	sp, r7
 8018f1c:	bd80      	pop	{r7, pc}

08018f1e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8018f1e:	b480      	push	{r7}
 8018f20:	b087      	sub	sp, #28
 8018f22:	af00      	add	r7, sp, #0
 8018f24:	60f8      	str	r0, [r7, #12]
 8018f26:	60b9      	str	r1, [r7, #8]
 8018f28:	607a      	str	r2, [r7, #4]
 8018f2a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8018f2c:	2300      	movs	r3, #0
 8018f2e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8018f30:	68fb      	ldr	r3, [r7, #12]
 8018f32:	681b      	ldr	r3, [r3, #0]
 8018f34:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8018f36:	68bb      	ldr	r3, [r7, #8]
 8018f38:	2b00      	cmp	r3, #0
 8018f3a:	d105      	bne.n	8018f48 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8018f3c:	697a      	ldr	r2, [r7, #20]
 8018f3e:	687b      	ldr	r3, [r7, #4]
 8018f40:	4413      	add	r3, r2
 8018f42:	3308      	adds	r3, #8
 8018f44:	617b      	str	r3, [r7, #20]
 8018f46:	e004      	b.n	8018f52 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8018f48:	697a      	ldr	r2, [r7, #20]
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	4413      	add	r3, r2
 8018f4e:	3314      	adds	r3, #20
 8018f50:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8018f52:	697b      	ldr	r3, [r7, #20]
 8018f54:	461a      	mov	r2, r3
 8018f56:	683b      	ldr	r3, [r7, #0]
 8018f58:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8018f5a:	2300      	movs	r3, #0
}
 8018f5c:	4618      	mov	r0, r3
 8018f5e:	371c      	adds	r7, #28
 8018f60:	46bd      	mov	sp, r7
 8018f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f66:	4770      	bx	lr

08018f68 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8018f68:	b480      	push	{r7}
 8018f6a:	b087      	sub	sp, #28
 8018f6c:	af00      	add	r7, sp, #0
 8018f6e:	60f8      	str	r0, [r7, #12]
 8018f70:	60b9      	str	r1, [r7, #8]
 8018f72:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8018f74:	68fb      	ldr	r3, [r7, #12]
 8018f76:	795b      	ldrb	r3, [r3, #5]
 8018f78:	2b01      	cmp	r3, #1
 8018f7a:	d101      	bne.n	8018f80 <HAL_DAC_ConfigChannel+0x18>
 8018f7c:	2302      	movs	r3, #2
 8018f7e:	e03c      	b.n	8018ffa <HAL_DAC_ConfigChannel+0x92>
 8018f80:	68fb      	ldr	r3, [r7, #12]
 8018f82:	2201      	movs	r2, #1
 8018f84:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8018f86:	68fb      	ldr	r3, [r7, #12]
 8018f88:	2202      	movs	r2, #2
 8018f8a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8018f8c:	68fb      	ldr	r3, [r7, #12]
 8018f8e:	681b      	ldr	r3, [r3, #0]
 8018f90:	681b      	ldr	r3, [r3, #0]
 8018f92:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8018f94:	687b      	ldr	r3, [r7, #4]
 8018f96:	f003 0310 	and.w	r3, r3, #16
 8018f9a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8018f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8018fa2:	43db      	mvns	r3, r3
 8018fa4:	697a      	ldr	r2, [r7, #20]
 8018fa6:	4013      	ands	r3, r2
 8018fa8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8018faa:	68bb      	ldr	r3, [r7, #8]
 8018fac:	681a      	ldr	r2, [r3, #0]
 8018fae:	68bb      	ldr	r3, [r7, #8]
 8018fb0:	685b      	ldr	r3, [r3, #4]
 8018fb2:	4313      	orrs	r3, r2
 8018fb4:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8018fb6:	687b      	ldr	r3, [r7, #4]
 8018fb8:	f003 0310 	and.w	r3, r3, #16
 8018fbc:	693a      	ldr	r2, [r7, #16]
 8018fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8018fc2:	697a      	ldr	r2, [r7, #20]
 8018fc4:	4313      	orrs	r3, r2
 8018fc6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8018fc8:	68fb      	ldr	r3, [r7, #12]
 8018fca:	681b      	ldr	r3, [r3, #0]
 8018fcc:	697a      	ldr	r2, [r7, #20]
 8018fce:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8018fd0:	68fb      	ldr	r3, [r7, #12]
 8018fd2:	681b      	ldr	r3, [r3, #0]
 8018fd4:	6819      	ldr	r1, [r3, #0]
 8018fd6:	687b      	ldr	r3, [r7, #4]
 8018fd8:	f003 0310 	and.w	r3, r3, #16
 8018fdc:	22c0      	movs	r2, #192	; 0xc0
 8018fde:	fa02 f303 	lsl.w	r3, r2, r3
 8018fe2:	43da      	mvns	r2, r3
 8018fe4:	68fb      	ldr	r3, [r7, #12]
 8018fe6:	681b      	ldr	r3, [r3, #0]
 8018fe8:	400a      	ands	r2, r1
 8018fea:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8018fec:	68fb      	ldr	r3, [r7, #12]
 8018fee:	2201      	movs	r2, #1
 8018ff0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8018ff2:	68fb      	ldr	r3, [r7, #12]
 8018ff4:	2200      	movs	r2, #0
 8018ff6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8018ff8:	2300      	movs	r3, #0
}
 8018ffa:	4618      	mov	r0, r3
 8018ffc:	371c      	adds	r7, #28
 8018ffe:	46bd      	mov	sp, r7
 8019000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019004:	4770      	bx	lr
	...

08019008 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8019008:	b580      	push	{r7, lr}
 801900a:	b086      	sub	sp, #24
 801900c:	af00      	add	r7, sp, #0
 801900e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8019010:	2300      	movs	r3, #0
 8019012:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8019014:	f7ff fbae 	bl	8018774 <HAL_GetTick>
 8019018:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 801901a:	687b      	ldr	r3, [r7, #4]
 801901c:	2b00      	cmp	r3, #0
 801901e:	d101      	bne.n	8019024 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8019020:	2301      	movs	r3, #1
 8019022:	e099      	b.n	8019158 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	2202      	movs	r2, #2
 8019028:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 801902c:	687b      	ldr	r3, [r7, #4]
 801902e:	2200      	movs	r2, #0
 8019030:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	681b      	ldr	r3, [r3, #0]
 8019038:	681a      	ldr	r2, [r3, #0]
 801903a:	687b      	ldr	r3, [r7, #4]
 801903c:	681b      	ldr	r3, [r3, #0]
 801903e:	f022 0201 	bic.w	r2, r2, #1
 8019042:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8019044:	e00f      	b.n	8019066 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8019046:	f7ff fb95 	bl	8018774 <HAL_GetTick>
 801904a:	4602      	mov	r2, r0
 801904c:	693b      	ldr	r3, [r7, #16]
 801904e:	1ad3      	subs	r3, r2, r3
 8019050:	2b05      	cmp	r3, #5
 8019052:	d908      	bls.n	8019066 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8019054:	687b      	ldr	r3, [r7, #4]
 8019056:	2220      	movs	r2, #32
 8019058:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 801905a:	687b      	ldr	r3, [r7, #4]
 801905c:	2203      	movs	r2, #3
 801905e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8019062:	2303      	movs	r3, #3
 8019064:	e078      	b.n	8019158 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	681b      	ldr	r3, [r3, #0]
 801906a:	681b      	ldr	r3, [r3, #0]
 801906c:	f003 0301 	and.w	r3, r3, #1
 8019070:	2b00      	cmp	r3, #0
 8019072:	d1e8      	bne.n	8019046 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	681b      	ldr	r3, [r3, #0]
 8019078:	681b      	ldr	r3, [r3, #0]
 801907a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801907c:	697a      	ldr	r2, [r7, #20]
 801907e:	4b38      	ldr	r3, [pc, #224]	; (8019160 <HAL_DMA_Init+0x158>)
 8019080:	4013      	ands	r3, r2
 8019082:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8019084:	687b      	ldr	r3, [r7, #4]
 8019086:	685a      	ldr	r2, [r3, #4]
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	689b      	ldr	r3, [r3, #8]
 801908c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801908e:	687b      	ldr	r3, [r7, #4]
 8019090:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8019092:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	691b      	ldr	r3, [r3, #16]
 8019098:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801909a:	687b      	ldr	r3, [r7, #4]
 801909c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801909e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80190a0:	687b      	ldr	r3, [r7, #4]
 80190a2:	699b      	ldr	r3, [r3, #24]
 80190a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80190a6:	687b      	ldr	r3, [r7, #4]
 80190a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80190aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80190ac:	687b      	ldr	r3, [r7, #4]
 80190ae:	6a1b      	ldr	r3, [r3, #32]
 80190b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80190b2:	697a      	ldr	r2, [r7, #20]
 80190b4:	4313      	orrs	r3, r2
 80190b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190bc:	2b04      	cmp	r3, #4
 80190be:	d107      	bne.n	80190d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80190c0:	687b      	ldr	r3, [r7, #4]
 80190c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80190c4:	687b      	ldr	r3, [r7, #4]
 80190c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80190c8:	4313      	orrs	r3, r2
 80190ca:	697a      	ldr	r2, [r7, #20]
 80190cc:	4313      	orrs	r3, r2
 80190ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80190d0:	687b      	ldr	r3, [r7, #4]
 80190d2:	681b      	ldr	r3, [r3, #0]
 80190d4:	697a      	ldr	r2, [r7, #20]
 80190d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80190d8:	687b      	ldr	r3, [r7, #4]
 80190da:	681b      	ldr	r3, [r3, #0]
 80190dc:	695b      	ldr	r3, [r3, #20]
 80190de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80190e0:	697b      	ldr	r3, [r7, #20]
 80190e2:	f023 0307 	bic.w	r3, r3, #7
 80190e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80190e8:	687b      	ldr	r3, [r7, #4]
 80190ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190ec:	697a      	ldr	r2, [r7, #20]
 80190ee:	4313      	orrs	r3, r2
 80190f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80190f2:	687b      	ldr	r3, [r7, #4]
 80190f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190f6:	2b04      	cmp	r3, #4
 80190f8:	d117      	bne.n	801912a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80190fa:	687b      	ldr	r3, [r7, #4]
 80190fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80190fe:	697a      	ldr	r2, [r7, #20]
 8019100:	4313      	orrs	r3, r2
 8019102:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8019104:	687b      	ldr	r3, [r7, #4]
 8019106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019108:	2b00      	cmp	r3, #0
 801910a:	d00e      	beq.n	801912a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801910c:	6878      	ldr	r0, [r7, #4]
 801910e:	f000 fa0b 	bl	8019528 <DMA_CheckFifoParam>
 8019112:	4603      	mov	r3, r0
 8019114:	2b00      	cmp	r3, #0
 8019116:	d008      	beq.n	801912a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8019118:	687b      	ldr	r3, [r7, #4]
 801911a:	2240      	movs	r2, #64	; 0x40
 801911c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801911e:	687b      	ldr	r3, [r7, #4]
 8019120:	2201      	movs	r2, #1
 8019122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8019126:	2301      	movs	r3, #1
 8019128:	e016      	b.n	8019158 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	681b      	ldr	r3, [r3, #0]
 801912e:	697a      	ldr	r2, [r7, #20]
 8019130:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8019132:	6878      	ldr	r0, [r7, #4]
 8019134:	f000 f9c2 	bl	80194bc <DMA_CalcBaseAndBitshift>
 8019138:	4603      	mov	r3, r0
 801913a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 801913c:	687b      	ldr	r3, [r7, #4]
 801913e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019140:	223f      	movs	r2, #63	; 0x3f
 8019142:	409a      	lsls	r2, r3
 8019144:	68fb      	ldr	r3, [r7, #12]
 8019146:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8019148:	687b      	ldr	r3, [r7, #4]
 801914a:	2200      	movs	r2, #0
 801914c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801914e:	687b      	ldr	r3, [r7, #4]
 8019150:	2201      	movs	r2, #1
 8019152:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8019156:	2300      	movs	r3, #0
}
 8019158:	4618      	mov	r0, r3
 801915a:	3718      	adds	r7, #24
 801915c:	46bd      	mov	sp, r7
 801915e:	bd80      	pop	{r7, pc}
 8019160:	f010803f 	.word	0xf010803f

08019164 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8019164:	b480      	push	{r7}
 8019166:	b083      	sub	sp, #12
 8019168:	af00      	add	r7, sp, #0
 801916a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801916c:	687b      	ldr	r3, [r7, #4]
 801916e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8019172:	b2db      	uxtb	r3, r3
 8019174:	2b02      	cmp	r3, #2
 8019176:	d004      	beq.n	8019182 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8019178:	687b      	ldr	r3, [r7, #4]
 801917a:	2280      	movs	r2, #128	; 0x80
 801917c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 801917e:	2301      	movs	r3, #1
 8019180:	e00c      	b.n	801919c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8019182:	687b      	ldr	r3, [r7, #4]
 8019184:	2205      	movs	r2, #5
 8019186:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	681b      	ldr	r3, [r3, #0]
 801918e:	681a      	ldr	r2, [r3, #0]
 8019190:	687b      	ldr	r3, [r7, #4]
 8019192:	681b      	ldr	r3, [r3, #0]
 8019194:	f022 0201 	bic.w	r2, r2, #1
 8019198:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801919a:	2300      	movs	r3, #0
}
 801919c:	4618      	mov	r0, r3
 801919e:	370c      	adds	r7, #12
 80191a0:	46bd      	mov	sp, r7
 80191a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191a6:	4770      	bx	lr

080191a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80191a8:	b580      	push	{r7, lr}
 80191aa:	b086      	sub	sp, #24
 80191ac:	af00      	add	r7, sp, #0
 80191ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80191b0:	2300      	movs	r3, #0
 80191b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80191b4:	4b92      	ldr	r3, [pc, #584]	; (8019400 <HAL_DMA_IRQHandler+0x258>)
 80191b6:	681b      	ldr	r3, [r3, #0]
 80191b8:	4a92      	ldr	r2, [pc, #584]	; (8019404 <HAL_DMA_IRQHandler+0x25c>)
 80191ba:	fba2 2303 	umull	r2, r3, r2, r3
 80191be:	0a9b      	lsrs	r3, r3, #10
 80191c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80191c2:	687b      	ldr	r3, [r7, #4]
 80191c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80191c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80191c8:	693b      	ldr	r3, [r7, #16]
 80191ca:	681b      	ldr	r3, [r3, #0]
 80191cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80191ce:	687b      	ldr	r3, [r7, #4]
 80191d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80191d2:	2208      	movs	r2, #8
 80191d4:	409a      	lsls	r2, r3
 80191d6:	68fb      	ldr	r3, [r7, #12]
 80191d8:	4013      	ands	r3, r2
 80191da:	2b00      	cmp	r3, #0
 80191dc:	d01a      	beq.n	8019214 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80191de:	687b      	ldr	r3, [r7, #4]
 80191e0:	681b      	ldr	r3, [r3, #0]
 80191e2:	681b      	ldr	r3, [r3, #0]
 80191e4:	f003 0304 	and.w	r3, r3, #4
 80191e8:	2b00      	cmp	r3, #0
 80191ea:	d013      	beq.n	8019214 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80191ec:	687b      	ldr	r3, [r7, #4]
 80191ee:	681b      	ldr	r3, [r3, #0]
 80191f0:	681a      	ldr	r2, [r3, #0]
 80191f2:	687b      	ldr	r3, [r7, #4]
 80191f4:	681b      	ldr	r3, [r3, #0]
 80191f6:	f022 0204 	bic.w	r2, r2, #4
 80191fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80191fc:	687b      	ldr	r3, [r7, #4]
 80191fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019200:	2208      	movs	r2, #8
 8019202:	409a      	lsls	r2, r3
 8019204:	693b      	ldr	r3, [r7, #16]
 8019206:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801920c:	f043 0201 	orr.w	r2, r3, #1
 8019210:	687b      	ldr	r3, [r7, #4]
 8019212:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8019214:	687b      	ldr	r3, [r7, #4]
 8019216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019218:	2201      	movs	r2, #1
 801921a:	409a      	lsls	r2, r3
 801921c:	68fb      	ldr	r3, [r7, #12]
 801921e:	4013      	ands	r3, r2
 8019220:	2b00      	cmp	r3, #0
 8019222:	d012      	beq.n	801924a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8019224:	687b      	ldr	r3, [r7, #4]
 8019226:	681b      	ldr	r3, [r3, #0]
 8019228:	695b      	ldr	r3, [r3, #20]
 801922a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801922e:	2b00      	cmp	r3, #0
 8019230:	d00b      	beq.n	801924a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019236:	2201      	movs	r2, #1
 8019238:	409a      	lsls	r2, r3
 801923a:	693b      	ldr	r3, [r7, #16]
 801923c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801923e:	687b      	ldr	r3, [r7, #4]
 8019240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019242:	f043 0202 	orr.w	r2, r3, #2
 8019246:	687b      	ldr	r3, [r7, #4]
 8019248:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 801924a:	687b      	ldr	r3, [r7, #4]
 801924c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801924e:	2204      	movs	r2, #4
 8019250:	409a      	lsls	r2, r3
 8019252:	68fb      	ldr	r3, [r7, #12]
 8019254:	4013      	ands	r3, r2
 8019256:	2b00      	cmp	r3, #0
 8019258:	d012      	beq.n	8019280 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 801925a:	687b      	ldr	r3, [r7, #4]
 801925c:	681b      	ldr	r3, [r3, #0]
 801925e:	681b      	ldr	r3, [r3, #0]
 8019260:	f003 0302 	and.w	r3, r3, #2
 8019264:	2b00      	cmp	r3, #0
 8019266:	d00b      	beq.n	8019280 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8019268:	687b      	ldr	r3, [r7, #4]
 801926a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801926c:	2204      	movs	r2, #4
 801926e:	409a      	lsls	r2, r3
 8019270:	693b      	ldr	r3, [r7, #16]
 8019272:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8019274:	687b      	ldr	r3, [r7, #4]
 8019276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019278:	f043 0204 	orr.w	r2, r3, #4
 801927c:	687b      	ldr	r3, [r7, #4]
 801927e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8019280:	687b      	ldr	r3, [r7, #4]
 8019282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019284:	2210      	movs	r2, #16
 8019286:	409a      	lsls	r2, r3
 8019288:	68fb      	ldr	r3, [r7, #12]
 801928a:	4013      	ands	r3, r2
 801928c:	2b00      	cmp	r3, #0
 801928e:	d043      	beq.n	8019318 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8019290:	687b      	ldr	r3, [r7, #4]
 8019292:	681b      	ldr	r3, [r3, #0]
 8019294:	681b      	ldr	r3, [r3, #0]
 8019296:	f003 0308 	and.w	r3, r3, #8
 801929a:	2b00      	cmp	r3, #0
 801929c:	d03c      	beq.n	8019318 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 801929e:	687b      	ldr	r3, [r7, #4]
 80192a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80192a2:	2210      	movs	r2, #16
 80192a4:	409a      	lsls	r2, r3
 80192a6:	693b      	ldr	r3, [r7, #16]
 80192a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80192aa:	687b      	ldr	r3, [r7, #4]
 80192ac:	681b      	ldr	r3, [r3, #0]
 80192ae:	681b      	ldr	r3, [r3, #0]
 80192b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80192b4:	2b00      	cmp	r3, #0
 80192b6:	d018      	beq.n	80192ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80192b8:	687b      	ldr	r3, [r7, #4]
 80192ba:	681b      	ldr	r3, [r3, #0]
 80192bc:	681b      	ldr	r3, [r3, #0]
 80192be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80192c2:	2b00      	cmp	r3, #0
 80192c4:	d108      	bne.n	80192d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80192c6:	687b      	ldr	r3, [r7, #4]
 80192c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	d024      	beq.n	8019318 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80192ce:	687b      	ldr	r3, [r7, #4]
 80192d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80192d2:	6878      	ldr	r0, [r7, #4]
 80192d4:	4798      	blx	r3
 80192d6:	e01f      	b.n	8019318 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80192dc:	2b00      	cmp	r3, #0
 80192de:	d01b      	beq.n	8019318 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80192e0:	687b      	ldr	r3, [r7, #4]
 80192e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80192e4:	6878      	ldr	r0, [r7, #4]
 80192e6:	4798      	blx	r3
 80192e8:	e016      	b.n	8019318 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	681b      	ldr	r3, [r3, #0]
 80192ee:	681b      	ldr	r3, [r3, #0]
 80192f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80192f4:	2b00      	cmp	r3, #0
 80192f6:	d107      	bne.n	8019308 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	681b      	ldr	r3, [r3, #0]
 80192fc:	681a      	ldr	r2, [r3, #0]
 80192fe:	687b      	ldr	r3, [r7, #4]
 8019300:	681b      	ldr	r3, [r3, #0]
 8019302:	f022 0208 	bic.w	r2, r2, #8
 8019306:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8019308:	687b      	ldr	r3, [r7, #4]
 801930a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801930c:	2b00      	cmp	r3, #0
 801930e:	d003      	beq.n	8019318 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8019310:	687b      	ldr	r3, [r7, #4]
 8019312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019314:	6878      	ldr	r0, [r7, #4]
 8019316:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8019318:	687b      	ldr	r3, [r7, #4]
 801931a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801931c:	2220      	movs	r2, #32
 801931e:	409a      	lsls	r2, r3
 8019320:	68fb      	ldr	r3, [r7, #12]
 8019322:	4013      	ands	r3, r2
 8019324:	2b00      	cmp	r3, #0
 8019326:	f000 808e 	beq.w	8019446 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	681b      	ldr	r3, [r3, #0]
 801932e:	681b      	ldr	r3, [r3, #0]
 8019330:	f003 0310 	and.w	r3, r3, #16
 8019334:	2b00      	cmp	r3, #0
 8019336:	f000 8086 	beq.w	8019446 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801933e:	2220      	movs	r2, #32
 8019340:	409a      	lsls	r2, r3
 8019342:	693b      	ldr	r3, [r7, #16]
 8019344:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8019346:	687b      	ldr	r3, [r7, #4]
 8019348:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801934c:	b2db      	uxtb	r3, r3
 801934e:	2b05      	cmp	r3, #5
 8019350:	d136      	bne.n	80193c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8019352:	687b      	ldr	r3, [r7, #4]
 8019354:	681b      	ldr	r3, [r3, #0]
 8019356:	681a      	ldr	r2, [r3, #0]
 8019358:	687b      	ldr	r3, [r7, #4]
 801935a:	681b      	ldr	r3, [r3, #0]
 801935c:	f022 0216 	bic.w	r2, r2, #22
 8019360:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8019362:	687b      	ldr	r3, [r7, #4]
 8019364:	681b      	ldr	r3, [r3, #0]
 8019366:	695a      	ldr	r2, [r3, #20]
 8019368:	687b      	ldr	r3, [r7, #4]
 801936a:	681b      	ldr	r3, [r3, #0]
 801936c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8019370:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8019372:	687b      	ldr	r3, [r7, #4]
 8019374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019376:	2b00      	cmp	r3, #0
 8019378:	d103      	bne.n	8019382 <HAL_DMA_IRQHandler+0x1da>
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801937e:	2b00      	cmp	r3, #0
 8019380:	d007      	beq.n	8019392 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8019382:	687b      	ldr	r3, [r7, #4]
 8019384:	681b      	ldr	r3, [r3, #0]
 8019386:	681a      	ldr	r2, [r3, #0]
 8019388:	687b      	ldr	r3, [r7, #4]
 801938a:	681b      	ldr	r3, [r3, #0]
 801938c:	f022 0208 	bic.w	r2, r2, #8
 8019390:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8019392:	687b      	ldr	r3, [r7, #4]
 8019394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019396:	223f      	movs	r2, #63	; 0x3f
 8019398:	409a      	lsls	r2, r3
 801939a:	693b      	ldr	r3, [r7, #16]
 801939c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801939e:	687b      	ldr	r3, [r7, #4]
 80193a0:	2201      	movs	r2, #1
 80193a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80193a6:	687b      	ldr	r3, [r7, #4]
 80193a8:	2200      	movs	r2, #0
 80193aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80193ae:	687b      	ldr	r3, [r7, #4]
 80193b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80193b2:	2b00      	cmp	r3, #0
 80193b4:	d07d      	beq.n	80194b2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80193b6:	687b      	ldr	r3, [r7, #4]
 80193b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80193ba:	6878      	ldr	r0, [r7, #4]
 80193bc:	4798      	blx	r3
        }
        return;
 80193be:	e078      	b.n	80194b2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80193c0:	687b      	ldr	r3, [r7, #4]
 80193c2:	681b      	ldr	r3, [r3, #0]
 80193c4:	681b      	ldr	r3, [r3, #0]
 80193c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80193ca:	2b00      	cmp	r3, #0
 80193cc:	d01c      	beq.n	8019408 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80193ce:	687b      	ldr	r3, [r7, #4]
 80193d0:	681b      	ldr	r3, [r3, #0]
 80193d2:	681b      	ldr	r3, [r3, #0]
 80193d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80193d8:	2b00      	cmp	r3, #0
 80193da:	d108      	bne.n	80193ee <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80193dc:	687b      	ldr	r3, [r7, #4]
 80193de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80193e0:	2b00      	cmp	r3, #0
 80193e2:	d030      	beq.n	8019446 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80193e4:	687b      	ldr	r3, [r7, #4]
 80193e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80193e8:	6878      	ldr	r0, [r7, #4]
 80193ea:	4798      	blx	r3
 80193ec:	e02b      	b.n	8019446 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80193ee:	687b      	ldr	r3, [r7, #4]
 80193f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80193f2:	2b00      	cmp	r3, #0
 80193f4:	d027      	beq.n	8019446 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80193f6:	687b      	ldr	r3, [r7, #4]
 80193f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80193fa:	6878      	ldr	r0, [r7, #4]
 80193fc:	4798      	blx	r3
 80193fe:	e022      	b.n	8019446 <HAL_DMA_IRQHandler+0x29e>
 8019400:	2000058c 	.word	0x2000058c
 8019404:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8019408:	687b      	ldr	r3, [r7, #4]
 801940a:	681b      	ldr	r3, [r3, #0]
 801940c:	681b      	ldr	r3, [r3, #0]
 801940e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019412:	2b00      	cmp	r3, #0
 8019414:	d10f      	bne.n	8019436 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8019416:	687b      	ldr	r3, [r7, #4]
 8019418:	681b      	ldr	r3, [r3, #0]
 801941a:	681a      	ldr	r2, [r3, #0]
 801941c:	687b      	ldr	r3, [r7, #4]
 801941e:	681b      	ldr	r3, [r3, #0]
 8019420:	f022 0210 	bic.w	r2, r2, #16
 8019424:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8019426:	687b      	ldr	r3, [r7, #4]
 8019428:	2201      	movs	r2, #1
 801942a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801942e:	687b      	ldr	r3, [r7, #4]
 8019430:	2200      	movs	r2, #0
 8019432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8019436:	687b      	ldr	r3, [r7, #4]
 8019438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801943a:	2b00      	cmp	r3, #0
 801943c:	d003      	beq.n	8019446 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801943e:	687b      	ldr	r3, [r7, #4]
 8019440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019442:	6878      	ldr	r0, [r7, #4]
 8019444:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8019446:	687b      	ldr	r3, [r7, #4]
 8019448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801944a:	2b00      	cmp	r3, #0
 801944c:	d032      	beq.n	80194b4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 801944e:	687b      	ldr	r3, [r7, #4]
 8019450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019452:	f003 0301 	and.w	r3, r3, #1
 8019456:	2b00      	cmp	r3, #0
 8019458:	d022      	beq.n	80194a0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 801945a:	687b      	ldr	r3, [r7, #4]
 801945c:	2205      	movs	r2, #5
 801945e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8019462:	687b      	ldr	r3, [r7, #4]
 8019464:	681b      	ldr	r3, [r3, #0]
 8019466:	681a      	ldr	r2, [r3, #0]
 8019468:	687b      	ldr	r3, [r7, #4]
 801946a:	681b      	ldr	r3, [r3, #0]
 801946c:	f022 0201 	bic.w	r2, r2, #1
 8019470:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8019472:	68bb      	ldr	r3, [r7, #8]
 8019474:	3301      	adds	r3, #1
 8019476:	60bb      	str	r3, [r7, #8]
 8019478:	697a      	ldr	r2, [r7, #20]
 801947a:	429a      	cmp	r2, r3
 801947c:	d307      	bcc.n	801948e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 801947e:	687b      	ldr	r3, [r7, #4]
 8019480:	681b      	ldr	r3, [r3, #0]
 8019482:	681b      	ldr	r3, [r3, #0]
 8019484:	f003 0301 	and.w	r3, r3, #1
 8019488:	2b00      	cmp	r3, #0
 801948a:	d1f2      	bne.n	8019472 <HAL_DMA_IRQHandler+0x2ca>
 801948c:	e000      	b.n	8019490 <HAL_DMA_IRQHandler+0x2e8>
          break;
 801948e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8019490:	687b      	ldr	r3, [r7, #4]
 8019492:	2201      	movs	r2, #1
 8019494:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8019498:	687b      	ldr	r3, [r7, #4]
 801949a:	2200      	movs	r2, #0
 801949c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80194a4:	2b00      	cmp	r3, #0
 80194a6:	d005      	beq.n	80194b4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80194ac:	6878      	ldr	r0, [r7, #4]
 80194ae:	4798      	blx	r3
 80194b0:	e000      	b.n	80194b4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80194b2:	bf00      	nop
    }
  }
}
 80194b4:	3718      	adds	r7, #24
 80194b6:	46bd      	mov	sp, r7
 80194b8:	bd80      	pop	{r7, pc}
 80194ba:	bf00      	nop

080194bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80194bc:	b480      	push	{r7}
 80194be:	b085      	sub	sp, #20
 80194c0:	af00      	add	r7, sp, #0
 80194c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80194c4:	687b      	ldr	r3, [r7, #4]
 80194c6:	681b      	ldr	r3, [r3, #0]
 80194c8:	b2db      	uxtb	r3, r3
 80194ca:	3b10      	subs	r3, #16
 80194cc:	4a14      	ldr	r2, [pc, #80]	; (8019520 <DMA_CalcBaseAndBitshift+0x64>)
 80194ce:	fba2 2303 	umull	r2, r3, r2, r3
 80194d2:	091b      	lsrs	r3, r3, #4
 80194d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80194d6:	4a13      	ldr	r2, [pc, #76]	; (8019524 <DMA_CalcBaseAndBitshift+0x68>)
 80194d8:	68fb      	ldr	r3, [r7, #12]
 80194da:	4413      	add	r3, r2
 80194dc:	781b      	ldrb	r3, [r3, #0]
 80194de:	461a      	mov	r2, r3
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80194e4:	68fb      	ldr	r3, [r7, #12]
 80194e6:	2b03      	cmp	r3, #3
 80194e8:	d909      	bls.n	80194fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80194ea:	687b      	ldr	r3, [r7, #4]
 80194ec:	681b      	ldr	r3, [r3, #0]
 80194ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80194f2:	f023 0303 	bic.w	r3, r3, #3
 80194f6:	1d1a      	adds	r2, r3, #4
 80194f8:	687b      	ldr	r3, [r7, #4]
 80194fa:	659a      	str	r2, [r3, #88]	; 0x58
 80194fc:	e007      	b.n	801950e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	681b      	ldr	r3, [r3, #0]
 8019502:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8019506:	f023 0303 	bic.w	r3, r3, #3
 801950a:	687a      	ldr	r2, [r7, #4]
 801950c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 801950e:	687b      	ldr	r3, [r7, #4]
 8019510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8019512:	4618      	mov	r0, r3
 8019514:	3714      	adds	r7, #20
 8019516:	46bd      	mov	sp, r7
 8019518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801951c:	4770      	bx	lr
 801951e:	bf00      	nop
 8019520:	aaaaaaab 	.word	0xaaaaaaab
 8019524:	08002360 	.word	0x08002360

08019528 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8019528:	b480      	push	{r7}
 801952a:	b085      	sub	sp, #20
 801952c:	af00      	add	r7, sp, #0
 801952e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8019530:	2300      	movs	r3, #0
 8019532:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019538:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801953a:	687b      	ldr	r3, [r7, #4]
 801953c:	699b      	ldr	r3, [r3, #24]
 801953e:	2b00      	cmp	r3, #0
 8019540:	d11f      	bne.n	8019582 <DMA_CheckFifoParam+0x5a>
 8019542:	68bb      	ldr	r3, [r7, #8]
 8019544:	2b03      	cmp	r3, #3
 8019546:	d856      	bhi.n	80195f6 <DMA_CheckFifoParam+0xce>
 8019548:	a201      	add	r2, pc, #4	; (adr r2, 8019550 <DMA_CheckFifoParam+0x28>)
 801954a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801954e:	bf00      	nop
 8019550:	08019561 	.word	0x08019561
 8019554:	08019573 	.word	0x08019573
 8019558:	08019561 	.word	0x08019561
 801955c:	080195f7 	.word	0x080195f7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019564:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8019568:	2b00      	cmp	r3, #0
 801956a:	d046      	beq.n	80195fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 801956c:	2301      	movs	r3, #1
 801956e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8019570:	e043      	b.n	80195fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8019572:	687b      	ldr	r3, [r7, #4]
 8019574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019576:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801957a:	d140      	bne.n	80195fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 801957c:	2301      	movs	r3, #1
 801957e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8019580:	e03d      	b.n	80195fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8019582:	687b      	ldr	r3, [r7, #4]
 8019584:	699b      	ldr	r3, [r3, #24]
 8019586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801958a:	d121      	bne.n	80195d0 <DMA_CheckFifoParam+0xa8>
 801958c:	68bb      	ldr	r3, [r7, #8]
 801958e:	2b03      	cmp	r3, #3
 8019590:	d837      	bhi.n	8019602 <DMA_CheckFifoParam+0xda>
 8019592:	a201      	add	r2, pc, #4	; (adr r2, 8019598 <DMA_CheckFifoParam+0x70>)
 8019594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019598:	080195a9 	.word	0x080195a9
 801959c:	080195af 	.word	0x080195af
 80195a0:	080195a9 	.word	0x080195a9
 80195a4:	080195c1 	.word	0x080195c1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80195a8:	2301      	movs	r3, #1
 80195aa:	73fb      	strb	r3, [r7, #15]
      break;
 80195ac:	e030      	b.n	8019610 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80195ae:	687b      	ldr	r3, [r7, #4]
 80195b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80195b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80195b6:	2b00      	cmp	r3, #0
 80195b8:	d025      	beq.n	8019606 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80195ba:	2301      	movs	r3, #1
 80195bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80195be:	e022      	b.n	8019606 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80195c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80195c8:	d11f      	bne.n	801960a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80195ca:	2301      	movs	r3, #1
 80195cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80195ce:	e01c      	b.n	801960a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80195d0:	68bb      	ldr	r3, [r7, #8]
 80195d2:	2b02      	cmp	r3, #2
 80195d4:	d903      	bls.n	80195de <DMA_CheckFifoParam+0xb6>
 80195d6:	68bb      	ldr	r3, [r7, #8]
 80195d8:	2b03      	cmp	r3, #3
 80195da:	d003      	beq.n	80195e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80195dc:	e018      	b.n	8019610 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80195de:	2301      	movs	r3, #1
 80195e0:	73fb      	strb	r3, [r7, #15]
      break;
 80195e2:	e015      	b.n	8019610 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80195e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80195ec:	2b00      	cmp	r3, #0
 80195ee:	d00e      	beq.n	801960e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80195f0:	2301      	movs	r3, #1
 80195f2:	73fb      	strb	r3, [r7, #15]
      break;
 80195f4:	e00b      	b.n	801960e <DMA_CheckFifoParam+0xe6>
      break;
 80195f6:	bf00      	nop
 80195f8:	e00a      	b.n	8019610 <DMA_CheckFifoParam+0xe8>
      break;
 80195fa:	bf00      	nop
 80195fc:	e008      	b.n	8019610 <DMA_CheckFifoParam+0xe8>
      break;
 80195fe:	bf00      	nop
 8019600:	e006      	b.n	8019610 <DMA_CheckFifoParam+0xe8>
      break;
 8019602:	bf00      	nop
 8019604:	e004      	b.n	8019610 <DMA_CheckFifoParam+0xe8>
      break;
 8019606:	bf00      	nop
 8019608:	e002      	b.n	8019610 <DMA_CheckFifoParam+0xe8>
      break;   
 801960a:	bf00      	nop
 801960c:	e000      	b.n	8019610 <DMA_CheckFifoParam+0xe8>
      break;
 801960e:	bf00      	nop
    }
  } 
  
  return status; 
 8019610:	7bfb      	ldrb	r3, [r7, #15]
}
 8019612:	4618      	mov	r0, r3
 8019614:	3714      	adds	r7, #20
 8019616:	46bd      	mov	sp, r7
 8019618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801961c:	4770      	bx	lr
 801961e:	bf00      	nop

08019620 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8019620:	b580      	push	{r7, lr}
 8019622:	b086      	sub	sp, #24
 8019624:	af00      	add	r7, sp, #0
 8019626:	60f8      	str	r0, [r7, #12]
 8019628:	60b9      	str	r1, [r7, #8]
 801962a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 801962e:	2301      	movs	r3, #1
 8019630:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8019632:	4b23      	ldr	r3, [pc, #140]	; (80196c0 <HAL_FLASH_Program+0xa0>)
 8019634:	7e1b      	ldrb	r3, [r3, #24]
 8019636:	2b01      	cmp	r3, #1
 8019638:	d101      	bne.n	801963e <HAL_FLASH_Program+0x1e>
 801963a:	2302      	movs	r3, #2
 801963c:	e03b      	b.n	80196b6 <HAL_FLASH_Program+0x96>
 801963e:	4b20      	ldr	r3, [pc, #128]	; (80196c0 <HAL_FLASH_Program+0xa0>)
 8019640:	2201      	movs	r2, #1
 8019642:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8019644:	f24c 3050 	movw	r0, #50000	; 0xc350
 8019648:	f000 f870 	bl	801972c <FLASH_WaitForLastOperation>
 801964c:	4603      	mov	r3, r0
 801964e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8019650:	7dfb      	ldrb	r3, [r7, #23]
 8019652:	2b00      	cmp	r3, #0
 8019654:	d12b      	bne.n	80196ae <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8019656:	68fb      	ldr	r3, [r7, #12]
 8019658:	2b00      	cmp	r3, #0
 801965a:	d105      	bne.n	8019668 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 801965c:	783b      	ldrb	r3, [r7, #0]
 801965e:	4619      	mov	r1, r3
 8019660:	68b8      	ldr	r0, [r7, #8]
 8019662:	f000 f91b 	bl	801989c <FLASH_Program_Byte>
 8019666:	e016      	b.n	8019696 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8019668:	68fb      	ldr	r3, [r7, #12]
 801966a:	2b01      	cmp	r3, #1
 801966c:	d105      	bne.n	801967a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 801966e:	883b      	ldrh	r3, [r7, #0]
 8019670:	4619      	mov	r1, r3
 8019672:	68b8      	ldr	r0, [r7, #8]
 8019674:	f000 f8ee 	bl	8019854 <FLASH_Program_HalfWord>
 8019678:	e00d      	b.n	8019696 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 801967a:	68fb      	ldr	r3, [r7, #12]
 801967c:	2b02      	cmp	r3, #2
 801967e:	d105      	bne.n	801968c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8019680:	683b      	ldr	r3, [r7, #0]
 8019682:	4619      	mov	r1, r3
 8019684:	68b8      	ldr	r0, [r7, #8]
 8019686:	f000 f8c3 	bl	8019810 <FLASH_Program_Word>
 801968a:	e004      	b.n	8019696 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 801968c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019690:	68b8      	ldr	r0, [r7, #8]
 8019692:	f000 f88b 	bl	80197ac <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8019696:	f24c 3050 	movw	r0, #50000	; 0xc350
 801969a:	f000 f847 	bl	801972c <FLASH_WaitForLastOperation>
 801969e:	4603      	mov	r3, r0
 80196a0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80196a2:	4b08      	ldr	r3, [pc, #32]	; (80196c4 <HAL_FLASH_Program+0xa4>)
 80196a4:	691b      	ldr	r3, [r3, #16]
 80196a6:	4a07      	ldr	r2, [pc, #28]	; (80196c4 <HAL_FLASH_Program+0xa4>)
 80196a8:	f023 0301 	bic.w	r3, r3, #1
 80196ac:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80196ae:	4b04      	ldr	r3, [pc, #16]	; (80196c0 <HAL_FLASH_Program+0xa0>)
 80196b0:	2200      	movs	r2, #0
 80196b2:	761a      	strb	r2, [r3, #24]
  
  return status;
 80196b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80196b6:	4618      	mov	r0, r3
 80196b8:	3718      	adds	r7, #24
 80196ba:	46bd      	mov	sp, r7
 80196bc:	bd80      	pop	{r7, pc}
 80196be:	bf00      	nop
 80196c0:	20006c28 	.word	0x20006c28
 80196c4:	40023c00 	.word	0x40023c00

080196c8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80196c8:	b480      	push	{r7}
 80196ca:	b083      	sub	sp, #12
 80196cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80196ce:	2300      	movs	r3, #0
 80196d0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80196d2:	4b0b      	ldr	r3, [pc, #44]	; (8019700 <HAL_FLASH_Unlock+0x38>)
 80196d4:	691b      	ldr	r3, [r3, #16]
 80196d6:	2b00      	cmp	r3, #0
 80196d8:	da0b      	bge.n	80196f2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80196da:	4b09      	ldr	r3, [pc, #36]	; (8019700 <HAL_FLASH_Unlock+0x38>)
 80196dc:	4a09      	ldr	r2, [pc, #36]	; (8019704 <HAL_FLASH_Unlock+0x3c>)
 80196de:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80196e0:	4b07      	ldr	r3, [pc, #28]	; (8019700 <HAL_FLASH_Unlock+0x38>)
 80196e2:	4a09      	ldr	r2, [pc, #36]	; (8019708 <HAL_FLASH_Unlock+0x40>)
 80196e4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80196e6:	4b06      	ldr	r3, [pc, #24]	; (8019700 <HAL_FLASH_Unlock+0x38>)
 80196e8:	691b      	ldr	r3, [r3, #16]
 80196ea:	2b00      	cmp	r3, #0
 80196ec:	da01      	bge.n	80196f2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80196ee:	2301      	movs	r3, #1
 80196f0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80196f2:	79fb      	ldrb	r3, [r7, #7]
}
 80196f4:	4618      	mov	r0, r3
 80196f6:	370c      	adds	r7, #12
 80196f8:	46bd      	mov	sp, r7
 80196fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196fe:	4770      	bx	lr
 8019700:	40023c00 	.word	0x40023c00
 8019704:	45670123 	.word	0x45670123
 8019708:	cdef89ab 	.word	0xcdef89ab

0801970c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 801970c:	b480      	push	{r7}
 801970e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8019710:	4b05      	ldr	r3, [pc, #20]	; (8019728 <HAL_FLASH_Lock+0x1c>)
 8019712:	691b      	ldr	r3, [r3, #16]
 8019714:	4a04      	ldr	r2, [pc, #16]	; (8019728 <HAL_FLASH_Lock+0x1c>)
 8019716:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801971a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 801971c:	2300      	movs	r3, #0
}
 801971e:	4618      	mov	r0, r3
 8019720:	46bd      	mov	sp, r7
 8019722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019726:	4770      	bx	lr
 8019728:	40023c00 	.word	0x40023c00

0801972c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 801972c:	b580      	push	{r7, lr}
 801972e:	b084      	sub	sp, #16
 8019730:	af00      	add	r7, sp, #0
 8019732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8019734:	2300      	movs	r3, #0
 8019736:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8019738:	4b1a      	ldr	r3, [pc, #104]	; (80197a4 <FLASH_WaitForLastOperation+0x78>)
 801973a:	2200      	movs	r2, #0
 801973c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 801973e:	f7ff f819 	bl	8018774 <HAL_GetTick>
 8019742:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8019744:	e010      	b.n	8019768 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8019746:	687b      	ldr	r3, [r7, #4]
 8019748:	f1b3 3fff 	cmp.w	r3, #4294967295
 801974c:	d00c      	beq.n	8019768 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 801974e:	687b      	ldr	r3, [r7, #4]
 8019750:	2b00      	cmp	r3, #0
 8019752:	d007      	beq.n	8019764 <FLASH_WaitForLastOperation+0x38>
 8019754:	f7ff f80e 	bl	8018774 <HAL_GetTick>
 8019758:	4602      	mov	r2, r0
 801975a:	68fb      	ldr	r3, [r7, #12]
 801975c:	1ad3      	subs	r3, r2, r3
 801975e:	687a      	ldr	r2, [r7, #4]
 8019760:	429a      	cmp	r2, r3
 8019762:	d201      	bcs.n	8019768 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8019764:	2303      	movs	r3, #3
 8019766:	e019      	b.n	801979c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8019768:	4b0f      	ldr	r3, [pc, #60]	; (80197a8 <FLASH_WaitForLastOperation+0x7c>)
 801976a:	68db      	ldr	r3, [r3, #12]
 801976c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019770:	2b00      	cmp	r3, #0
 8019772:	d1e8      	bne.n	8019746 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8019774:	4b0c      	ldr	r3, [pc, #48]	; (80197a8 <FLASH_WaitForLastOperation+0x7c>)
 8019776:	68db      	ldr	r3, [r3, #12]
 8019778:	f003 0301 	and.w	r3, r3, #1
 801977c:	2b00      	cmp	r3, #0
 801977e:	d002      	beq.n	8019786 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8019780:	4b09      	ldr	r3, [pc, #36]	; (80197a8 <FLASH_WaitForLastOperation+0x7c>)
 8019782:	2201      	movs	r2, #1
 8019784:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8019786:	4b08      	ldr	r3, [pc, #32]	; (80197a8 <FLASH_WaitForLastOperation+0x7c>)
 8019788:	68db      	ldr	r3, [r3, #12]
 801978a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 801978e:	2b00      	cmp	r3, #0
 8019790:	d003      	beq.n	801979a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8019792:	f000 f8a5 	bl	80198e0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8019796:	2301      	movs	r3, #1
 8019798:	e000      	b.n	801979c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 801979a:	2300      	movs	r3, #0
  
}  
 801979c:	4618      	mov	r0, r3
 801979e:	3710      	adds	r7, #16
 80197a0:	46bd      	mov	sp, r7
 80197a2:	bd80      	pop	{r7, pc}
 80197a4:	20006c28 	.word	0x20006c28
 80197a8:	40023c00 	.word	0x40023c00

080197ac <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80197ac:	b480      	push	{r7}
 80197ae:	b085      	sub	sp, #20
 80197b0:	af00      	add	r7, sp, #0
 80197b2:	60f8      	str	r0, [r7, #12]
 80197b4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80197b8:	4b14      	ldr	r3, [pc, #80]	; (801980c <FLASH_Program_DoubleWord+0x60>)
 80197ba:	691b      	ldr	r3, [r3, #16]
 80197bc:	4a13      	ldr	r2, [pc, #76]	; (801980c <FLASH_Program_DoubleWord+0x60>)
 80197be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80197c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80197c4:	4b11      	ldr	r3, [pc, #68]	; (801980c <FLASH_Program_DoubleWord+0x60>)
 80197c6:	691b      	ldr	r3, [r3, #16]
 80197c8:	4a10      	ldr	r2, [pc, #64]	; (801980c <FLASH_Program_DoubleWord+0x60>)
 80197ca:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80197ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80197d0:	4b0e      	ldr	r3, [pc, #56]	; (801980c <FLASH_Program_DoubleWord+0x60>)
 80197d2:	691b      	ldr	r3, [r3, #16]
 80197d4:	4a0d      	ldr	r2, [pc, #52]	; (801980c <FLASH_Program_DoubleWord+0x60>)
 80197d6:	f043 0301 	orr.w	r3, r3, #1
 80197da:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80197dc:	68fb      	ldr	r3, [r7, #12]
 80197de:	683a      	ldr	r2, [r7, #0]
 80197e0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80197e2:	f3bf 8f6f 	isb	sy
}
 80197e6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80197e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80197ec:	f04f 0200 	mov.w	r2, #0
 80197f0:	f04f 0300 	mov.w	r3, #0
 80197f4:	000a      	movs	r2, r1
 80197f6:	2300      	movs	r3, #0
 80197f8:	68f9      	ldr	r1, [r7, #12]
 80197fa:	3104      	adds	r1, #4
 80197fc:	4613      	mov	r3, r2
 80197fe:	600b      	str	r3, [r1, #0]
}
 8019800:	bf00      	nop
 8019802:	3714      	adds	r7, #20
 8019804:	46bd      	mov	sp, r7
 8019806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801980a:	4770      	bx	lr
 801980c:	40023c00 	.word	0x40023c00

08019810 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8019810:	b480      	push	{r7}
 8019812:	b083      	sub	sp, #12
 8019814:	af00      	add	r7, sp, #0
 8019816:	6078      	str	r0, [r7, #4]
 8019818:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801981a:	4b0d      	ldr	r3, [pc, #52]	; (8019850 <FLASH_Program_Word+0x40>)
 801981c:	691b      	ldr	r3, [r3, #16]
 801981e:	4a0c      	ldr	r2, [pc, #48]	; (8019850 <FLASH_Program_Word+0x40>)
 8019820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019824:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8019826:	4b0a      	ldr	r3, [pc, #40]	; (8019850 <FLASH_Program_Word+0x40>)
 8019828:	691b      	ldr	r3, [r3, #16]
 801982a:	4a09      	ldr	r2, [pc, #36]	; (8019850 <FLASH_Program_Word+0x40>)
 801982c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8019830:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8019832:	4b07      	ldr	r3, [pc, #28]	; (8019850 <FLASH_Program_Word+0x40>)
 8019834:	691b      	ldr	r3, [r3, #16]
 8019836:	4a06      	ldr	r2, [pc, #24]	; (8019850 <FLASH_Program_Word+0x40>)
 8019838:	f043 0301 	orr.w	r3, r3, #1
 801983c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 801983e:	687b      	ldr	r3, [r7, #4]
 8019840:	683a      	ldr	r2, [r7, #0]
 8019842:	601a      	str	r2, [r3, #0]
}
 8019844:	bf00      	nop
 8019846:	370c      	adds	r7, #12
 8019848:	46bd      	mov	sp, r7
 801984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801984e:	4770      	bx	lr
 8019850:	40023c00 	.word	0x40023c00

08019854 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8019854:	b480      	push	{r7}
 8019856:	b083      	sub	sp, #12
 8019858:	af00      	add	r7, sp, #0
 801985a:	6078      	str	r0, [r7, #4]
 801985c:	460b      	mov	r3, r1
 801985e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8019860:	4b0d      	ldr	r3, [pc, #52]	; (8019898 <FLASH_Program_HalfWord+0x44>)
 8019862:	691b      	ldr	r3, [r3, #16]
 8019864:	4a0c      	ldr	r2, [pc, #48]	; (8019898 <FLASH_Program_HalfWord+0x44>)
 8019866:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801986a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 801986c:	4b0a      	ldr	r3, [pc, #40]	; (8019898 <FLASH_Program_HalfWord+0x44>)
 801986e:	691b      	ldr	r3, [r3, #16]
 8019870:	4a09      	ldr	r2, [pc, #36]	; (8019898 <FLASH_Program_HalfWord+0x44>)
 8019872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8019876:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8019878:	4b07      	ldr	r3, [pc, #28]	; (8019898 <FLASH_Program_HalfWord+0x44>)
 801987a:	691b      	ldr	r3, [r3, #16]
 801987c:	4a06      	ldr	r2, [pc, #24]	; (8019898 <FLASH_Program_HalfWord+0x44>)
 801987e:	f043 0301 	orr.w	r3, r3, #1
 8019882:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8019884:	687b      	ldr	r3, [r7, #4]
 8019886:	887a      	ldrh	r2, [r7, #2]
 8019888:	801a      	strh	r2, [r3, #0]
}
 801988a:	bf00      	nop
 801988c:	370c      	adds	r7, #12
 801988e:	46bd      	mov	sp, r7
 8019890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019894:	4770      	bx	lr
 8019896:	bf00      	nop
 8019898:	40023c00 	.word	0x40023c00

0801989c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 801989c:	b480      	push	{r7}
 801989e:	b083      	sub	sp, #12
 80198a0:	af00      	add	r7, sp, #0
 80198a2:	6078      	str	r0, [r7, #4]
 80198a4:	460b      	mov	r3, r1
 80198a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80198a8:	4b0c      	ldr	r3, [pc, #48]	; (80198dc <FLASH_Program_Byte+0x40>)
 80198aa:	691b      	ldr	r3, [r3, #16]
 80198ac:	4a0b      	ldr	r2, [pc, #44]	; (80198dc <FLASH_Program_Byte+0x40>)
 80198ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80198b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80198b4:	4b09      	ldr	r3, [pc, #36]	; (80198dc <FLASH_Program_Byte+0x40>)
 80198b6:	4a09      	ldr	r2, [pc, #36]	; (80198dc <FLASH_Program_Byte+0x40>)
 80198b8:	691b      	ldr	r3, [r3, #16]
 80198ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80198bc:	4b07      	ldr	r3, [pc, #28]	; (80198dc <FLASH_Program_Byte+0x40>)
 80198be:	691b      	ldr	r3, [r3, #16]
 80198c0:	4a06      	ldr	r2, [pc, #24]	; (80198dc <FLASH_Program_Byte+0x40>)
 80198c2:	f043 0301 	orr.w	r3, r3, #1
 80198c6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80198c8:	687b      	ldr	r3, [r7, #4]
 80198ca:	78fa      	ldrb	r2, [r7, #3]
 80198cc:	701a      	strb	r2, [r3, #0]
}
 80198ce:	bf00      	nop
 80198d0:	370c      	adds	r7, #12
 80198d2:	46bd      	mov	sp, r7
 80198d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198d8:	4770      	bx	lr
 80198da:	bf00      	nop
 80198dc:	40023c00 	.word	0x40023c00

080198e0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80198e0:	b480      	push	{r7}
 80198e2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80198e4:	4b2f      	ldr	r3, [pc, #188]	; (80199a4 <FLASH_SetErrorCode+0xc4>)
 80198e6:	68db      	ldr	r3, [r3, #12]
 80198e8:	f003 0310 	and.w	r3, r3, #16
 80198ec:	2b00      	cmp	r3, #0
 80198ee:	d008      	beq.n	8019902 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80198f0:	4b2d      	ldr	r3, [pc, #180]	; (80199a8 <FLASH_SetErrorCode+0xc8>)
 80198f2:	69db      	ldr	r3, [r3, #28]
 80198f4:	f043 0310 	orr.w	r3, r3, #16
 80198f8:	4a2b      	ldr	r2, [pc, #172]	; (80199a8 <FLASH_SetErrorCode+0xc8>)
 80198fa:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80198fc:	4b29      	ldr	r3, [pc, #164]	; (80199a4 <FLASH_SetErrorCode+0xc4>)
 80198fe:	2210      	movs	r2, #16
 8019900:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8019902:	4b28      	ldr	r3, [pc, #160]	; (80199a4 <FLASH_SetErrorCode+0xc4>)
 8019904:	68db      	ldr	r3, [r3, #12]
 8019906:	f003 0320 	and.w	r3, r3, #32
 801990a:	2b00      	cmp	r3, #0
 801990c:	d008      	beq.n	8019920 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 801990e:	4b26      	ldr	r3, [pc, #152]	; (80199a8 <FLASH_SetErrorCode+0xc8>)
 8019910:	69db      	ldr	r3, [r3, #28]
 8019912:	f043 0308 	orr.w	r3, r3, #8
 8019916:	4a24      	ldr	r2, [pc, #144]	; (80199a8 <FLASH_SetErrorCode+0xc8>)
 8019918:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 801991a:	4b22      	ldr	r3, [pc, #136]	; (80199a4 <FLASH_SetErrorCode+0xc4>)
 801991c:	2220      	movs	r2, #32
 801991e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8019920:	4b20      	ldr	r3, [pc, #128]	; (80199a4 <FLASH_SetErrorCode+0xc4>)
 8019922:	68db      	ldr	r3, [r3, #12]
 8019924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019928:	2b00      	cmp	r3, #0
 801992a:	d008      	beq.n	801993e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 801992c:	4b1e      	ldr	r3, [pc, #120]	; (80199a8 <FLASH_SetErrorCode+0xc8>)
 801992e:	69db      	ldr	r3, [r3, #28]
 8019930:	f043 0304 	orr.w	r3, r3, #4
 8019934:	4a1c      	ldr	r2, [pc, #112]	; (80199a8 <FLASH_SetErrorCode+0xc8>)
 8019936:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8019938:	4b1a      	ldr	r3, [pc, #104]	; (80199a4 <FLASH_SetErrorCode+0xc4>)
 801993a:	2240      	movs	r2, #64	; 0x40
 801993c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 801993e:	4b19      	ldr	r3, [pc, #100]	; (80199a4 <FLASH_SetErrorCode+0xc4>)
 8019940:	68db      	ldr	r3, [r3, #12]
 8019942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019946:	2b00      	cmp	r3, #0
 8019948:	d008      	beq.n	801995c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 801994a:	4b17      	ldr	r3, [pc, #92]	; (80199a8 <FLASH_SetErrorCode+0xc8>)
 801994c:	69db      	ldr	r3, [r3, #28]
 801994e:	f043 0302 	orr.w	r3, r3, #2
 8019952:	4a15      	ldr	r2, [pc, #84]	; (80199a8 <FLASH_SetErrorCode+0xc8>)
 8019954:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8019956:	4b13      	ldr	r3, [pc, #76]	; (80199a4 <FLASH_SetErrorCode+0xc4>)
 8019958:	2280      	movs	r2, #128	; 0x80
 801995a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 801995c:	4b11      	ldr	r3, [pc, #68]	; (80199a4 <FLASH_SetErrorCode+0xc4>)
 801995e:	68db      	ldr	r3, [r3, #12]
 8019960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019964:	2b00      	cmp	r3, #0
 8019966:	d009      	beq.n	801997c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8019968:	4b0f      	ldr	r3, [pc, #60]	; (80199a8 <FLASH_SetErrorCode+0xc8>)
 801996a:	69db      	ldr	r3, [r3, #28]
 801996c:	f043 0301 	orr.w	r3, r3, #1
 8019970:	4a0d      	ldr	r2, [pc, #52]	; (80199a8 <FLASH_SetErrorCode+0xc8>)
 8019972:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8019974:	4b0b      	ldr	r3, [pc, #44]	; (80199a4 <FLASH_SetErrorCode+0xc4>)
 8019976:	f44f 7280 	mov.w	r2, #256	; 0x100
 801997a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 801997c:	4b09      	ldr	r3, [pc, #36]	; (80199a4 <FLASH_SetErrorCode+0xc4>)
 801997e:	68db      	ldr	r3, [r3, #12]
 8019980:	f003 0302 	and.w	r3, r3, #2
 8019984:	2b00      	cmp	r3, #0
 8019986:	d008      	beq.n	801999a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8019988:	4b07      	ldr	r3, [pc, #28]	; (80199a8 <FLASH_SetErrorCode+0xc8>)
 801998a:	69db      	ldr	r3, [r3, #28]
 801998c:	f043 0320 	orr.w	r3, r3, #32
 8019990:	4a05      	ldr	r2, [pc, #20]	; (80199a8 <FLASH_SetErrorCode+0xc8>)
 8019992:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8019994:	4b03      	ldr	r3, [pc, #12]	; (80199a4 <FLASH_SetErrorCode+0xc4>)
 8019996:	2202      	movs	r2, #2
 8019998:	60da      	str	r2, [r3, #12]
  }
}
 801999a:	bf00      	nop
 801999c:	46bd      	mov	sp, r7
 801999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199a2:	4770      	bx	lr
 80199a4:	40023c00 	.word	0x40023c00
 80199a8:	20006c28 	.word	0x20006c28

080199ac <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80199ac:	b580      	push	{r7, lr}
 80199ae:	b084      	sub	sp, #16
 80199b0:	af00      	add	r7, sp, #0
 80199b2:	6078      	str	r0, [r7, #4]
 80199b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80199b6:	2301      	movs	r3, #1
 80199b8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80199ba:	2300      	movs	r3, #0
 80199bc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80199be:	4b31      	ldr	r3, [pc, #196]	; (8019a84 <HAL_FLASHEx_Erase+0xd8>)
 80199c0:	7e1b      	ldrb	r3, [r3, #24]
 80199c2:	2b01      	cmp	r3, #1
 80199c4:	d101      	bne.n	80199ca <HAL_FLASHEx_Erase+0x1e>
 80199c6:	2302      	movs	r3, #2
 80199c8:	e058      	b.n	8019a7c <HAL_FLASHEx_Erase+0xd0>
 80199ca:	4b2e      	ldr	r3, [pc, #184]	; (8019a84 <HAL_FLASHEx_Erase+0xd8>)
 80199cc:	2201      	movs	r2, #1
 80199ce:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80199d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80199d4:	f7ff feaa 	bl	801972c <FLASH_WaitForLastOperation>
 80199d8:	4603      	mov	r3, r0
 80199da:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80199dc:	7bfb      	ldrb	r3, [r7, #15]
 80199de:	2b00      	cmp	r3, #0
 80199e0:	d148      	bne.n	8019a74 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80199e2:	683b      	ldr	r3, [r7, #0]
 80199e4:	f04f 32ff 	mov.w	r2, #4294967295
 80199e8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80199ea:	687b      	ldr	r3, [r7, #4]
 80199ec:	681b      	ldr	r3, [r3, #0]
 80199ee:	2b01      	cmp	r3, #1
 80199f0:	d115      	bne.n	8019a1e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80199f2:	687b      	ldr	r3, [r7, #4]
 80199f4:	691b      	ldr	r3, [r3, #16]
 80199f6:	b2da      	uxtb	r2, r3
 80199f8:	687b      	ldr	r3, [r7, #4]
 80199fa:	685b      	ldr	r3, [r3, #4]
 80199fc:	4619      	mov	r1, r3
 80199fe:	4610      	mov	r0, r2
 8019a00:	f000 f844 	bl	8019a8c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8019a04:	f24c 3050 	movw	r0, #50000	; 0xc350
 8019a08:	f7ff fe90 	bl	801972c <FLASH_WaitForLastOperation>
 8019a0c:	4603      	mov	r3, r0
 8019a0e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8019a10:	4b1d      	ldr	r3, [pc, #116]	; (8019a88 <HAL_FLASHEx_Erase+0xdc>)
 8019a12:	691b      	ldr	r3, [r3, #16]
 8019a14:	4a1c      	ldr	r2, [pc, #112]	; (8019a88 <HAL_FLASHEx_Erase+0xdc>)
 8019a16:	f023 0304 	bic.w	r3, r3, #4
 8019a1a:	6113      	str	r3, [r2, #16]
 8019a1c:	e028      	b.n	8019a70 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8019a1e:	687b      	ldr	r3, [r7, #4]
 8019a20:	689b      	ldr	r3, [r3, #8]
 8019a22:	60bb      	str	r3, [r7, #8]
 8019a24:	e01c      	b.n	8019a60 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8019a26:	687b      	ldr	r3, [r7, #4]
 8019a28:	691b      	ldr	r3, [r3, #16]
 8019a2a:	b2db      	uxtb	r3, r3
 8019a2c:	4619      	mov	r1, r3
 8019a2e:	68b8      	ldr	r0, [r7, #8]
 8019a30:	f000 f850 	bl	8019ad4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8019a34:	f24c 3050 	movw	r0, #50000	; 0xc350
 8019a38:	f7ff fe78 	bl	801972c <FLASH_WaitForLastOperation>
 8019a3c:	4603      	mov	r3, r0
 8019a3e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8019a40:	4b11      	ldr	r3, [pc, #68]	; (8019a88 <HAL_FLASHEx_Erase+0xdc>)
 8019a42:	691b      	ldr	r3, [r3, #16]
 8019a44:	4a10      	ldr	r2, [pc, #64]	; (8019a88 <HAL_FLASHEx_Erase+0xdc>)
 8019a46:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8019a4a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8019a4c:	7bfb      	ldrb	r3, [r7, #15]
 8019a4e:	2b00      	cmp	r3, #0
 8019a50:	d003      	beq.n	8019a5a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8019a52:	683b      	ldr	r3, [r7, #0]
 8019a54:	68ba      	ldr	r2, [r7, #8]
 8019a56:	601a      	str	r2, [r3, #0]
          break;
 8019a58:	e00a      	b.n	8019a70 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8019a5a:	68bb      	ldr	r3, [r7, #8]
 8019a5c:	3301      	adds	r3, #1
 8019a5e:	60bb      	str	r3, [r7, #8]
 8019a60:	687b      	ldr	r3, [r7, #4]
 8019a62:	68da      	ldr	r2, [r3, #12]
 8019a64:	687b      	ldr	r3, [r7, #4]
 8019a66:	689b      	ldr	r3, [r3, #8]
 8019a68:	4413      	add	r3, r2
 8019a6a:	68ba      	ldr	r2, [r7, #8]
 8019a6c:	429a      	cmp	r2, r3
 8019a6e:	d3da      	bcc.n	8019a26 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8019a70:	f000 f878 	bl	8019b64 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8019a74:	4b03      	ldr	r3, [pc, #12]	; (8019a84 <HAL_FLASHEx_Erase+0xd8>)
 8019a76:	2200      	movs	r2, #0
 8019a78:	761a      	strb	r2, [r3, #24]

  return status;
 8019a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8019a7c:	4618      	mov	r0, r3
 8019a7e:	3710      	adds	r7, #16
 8019a80:	46bd      	mov	sp, r7
 8019a82:	bd80      	pop	{r7, pc}
 8019a84:	20006c28 	.word	0x20006c28
 8019a88:	40023c00 	.word	0x40023c00

08019a8c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8019a8c:	b480      	push	{r7}
 8019a8e:	b083      	sub	sp, #12
 8019a90:	af00      	add	r7, sp, #0
 8019a92:	4603      	mov	r3, r0
 8019a94:	6039      	str	r1, [r7, #0]
 8019a96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8019a98:	4b0d      	ldr	r3, [pc, #52]	; (8019ad0 <FLASH_MassErase+0x44>)
 8019a9a:	691b      	ldr	r3, [r3, #16]
 8019a9c:	4a0c      	ldr	r2, [pc, #48]	; (8019ad0 <FLASH_MassErase+0x44>)
 8019a9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019aa2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8019aa4:	4b0a      	ldr	r3, [pc, #40]	; (8019ad0 <FLASH_MassErase+0x44>)
 8019aa6:	691b      	ldr	r3, [r3, #16]
 8019aa8:	4a09      	ldr	r2, [pc, #36]	; (8019ad0 <FLASH_MassErase+0x44>)
 8019aaa:	f043 0304 	orr.w	r3, r3, #4
 8019aae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8019ab0:	4b07      	ldr	r3, [pc, #28]	; (8019ad0 <FLASH_MassErase+0x44>)
 8019ab2:	691a      	ldr	r2, [r3, #16]
 8019ab4:	79fb      	ldrb	r3, [r7, #7]
 8019ab6:	021b      	lsls	r3, r3, #8
 8019ab8:	4313      	orrs	r3, r2
 8019aba:	4a05      	ldr	r2, [pc, #20]	; (8019ad0 <FLASH_MassErase+0x44>)
 8019abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019ac0:	6113      	str	r3, [r2, #16]
}
 8019ac2:	bf00      	nop
 8019ac4:	370c      	adds	r7, #12
 8019ac6:	46bd      	mov	sp, r7
 8019ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019acc:	4770      	bx	lr
 8019ace:	bf00      	nop
 8019ad0:	40023c00 	.word	0x40023c00

08019ad4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8019ad4:	b480      	push	{r7}
 8019ad6:	b085      	sub	sp, #20
 8019ad8:	af00      	add	r7, sp, #0
 8019ada:	6078      	str	r0, [r7, #4]
 8019adc:	460b      	mov	r3, r1
 8019ade:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8019ae0:	2300      	movs	r3, #0
 8019ae2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8019ae4:	78fb      	ldrb	r3, [r7, #3]
 8019ae6:	2b00      	cmp	r3, #0
 8019ae8:	d102      	bne.n	8019af0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8019aea:	2300      	movs	r3, #0
 8019aec:	60fb      	str	r3, [r7, #12]
 8019aee:	e010      	b.n	8019b12 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8019af0:	78fb      	ldrb	r3, [r7, #3]
 8019af2:	2b01      	cmp	r3, #1
 8019af4:	d103      	bne.n	8019afe <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8019af6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019afa:	60fb      	str	r3, [r7, #12]
 8019afc:	e009      	b.n	8019b12 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8019afe:	78fb      	ldrb	r3, [r7, #3]
 8019b00:	2b02      	cmp	r3, #2
 8019b02:	d103      	bne.n	8019b0c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8019b04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8019b08:	60fb      	str	r3, [r7, #12]
 8019b0a:	e002      	b.n	8019b12 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8019b0c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8019b10:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8019b12:	4b13      	ldr	r3, [pc, #76]	; (8019b60 <FLASH_Erase_Sector+0x8c>)
 8019b14:	691b      	ldr	r3, [r3, #16]
 8019b16:	4a12      	ldr	r2, [pc, #72]	; (8019b60 <FLASH_Erase_Sector+0x8c>)
 8019b18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019b1c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8019b1e:	4b10      	ldr	r3, [pc, #64]	; (8019b60 <FLASH_Erase_Sector+0x8c>)
 8019b20:	691a      	ldr	r2, [r3, #16]
 8019b22:	490f      	ldr	r1, [pc, #60]	; (8019b60 <FLASH_Erase_Sector+0x8c>)
 8019b24:	68fb      	ldr	r3, [r7, #12]
 8019b26:	4313      	orrs	r3, r2
 8019b28:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8019b2a:	4b0d      	ldr	r3, [pc, #52]	; (8019b60 <FLASH_Erase_Sector+0x8c>)
 8019b2c:	691b      	ldr	r3, [r3, #16]
 8019b2e:	4a0c      	ldr	r2, [pc, #48]	; (8019b60 <FLASH_Erase_Sector+0x8c>)
 8019b30:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8019b34:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8019b36:	4b0a      	ldr	r3, [pc, #40]	; (8019b60 <FLASH_Erase_Sector+0x8c>)
 8019b38:	691a      	ldr	r2, [r3, #16]
 8019b3a:	687b      	ldr	r3, [r7, #4]
 8019b3c:	00db      	lsls	r3, r3, #3
 8019b3e:	4313      	orrs	r3, r2
 8019b40:	4a07      	ldr	r2, [pc, #28]	; (8019b60 <FLASH_Erase_Sector+0x8c>)
 8019b42:	f043 0302 	orr.w	r3, r3, #2
 8019b46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8019b48:	4b05      	ldr	r3, [pc, #20]	; (8019b60 <FLASH_Erase_Sector+0x8c>)
 8019b4a:	691b      	ldr	r3, [r3, #16]
 8019b4c:	4a04      	ldr	r2, [pc, #16]	; (8019b60 <FLASH_Erase_Sector+0x8c>)
 8019b4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019b52:	6113      	str	r3, [r2, #16]
}
 8019b54:	bf00      	nop
 8019b56:	3714      	adds	r7, #20
 8019b58:	46bd      	mov	sp, r7
 8019b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b5e:	4770      	bx	lr
 8019b60:	40023c00 	.word	0x40023c00

08019b64 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8019b64:	b480      	push	{r7}
 8019b66:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8019b68:	4b20      	ldr	r3, [pc, #128]	; (8019bec <FLASH_FlushCaches+0x88>)
 8019b6a:	681b      	ldr	r3, [r3, #0]
 8019b6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019b70:	2b00      	cmp	r3, #0
 8019b72:	d017      	beq.n	8019ba4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8019b74:	4b1d      	ldr	r3, [pc, #116]	; (8019bec <FLASH_FlushCaches+0x88>)
 8019b76:	681b      	ldr	r3, [r3, #0]
 8019b78:	4a1c      	ldr	r2, [pc, #112]	; (8019bec <FLASH_FlushCaches+0x88>)
 8019b7a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8019b7e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8019b80:	4b1a      	ldr	r3, [pc, #104]	; (8019bec <FLASH_FlushCaches+0x88>)
 8019b82:	681b      	ldr	r3, [r3, #0]
 8019b84:	4a19      	ldr	r2, [pc, #100]	; (8019bec <FLASH_FlushCaches+0x88>)
 8019b86:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8019b8a:	6013      	str	r3, [r2, #0]
 8019b8c:	4b17      	ldr	r3, [pc, #92]	; (8019bec <FLASH_FlushCaches+0x88>)
 8019b8e:	681b      	ldr	r3, [r3, #0]
 8019b90:	4a16      	ldr	r2, [pc, #88]	; (8019bec <FLASH_FlushCaches+0x88>)
 8019b92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019b96:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8019b98:	4b14      	ldr	r3, [pc, #80]	; (8019bec <FLASH_FlushCaches+0x88>)
 8019b9a:	681b      	ldr	r3, [r3, #0]
 8019b9c:	4a13      	ldr	r2, [pc, #76]	; (8019bec <FLASH_FlushCaches+0x88>)
 8019b9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8019ba2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8019ba4:	4b11      	ldr	r3, [pc, #68]	; (8019bec <FLASH_FlushCaches+0x88>)
 8019ba6:	681b      	ldr	r3, [r3, #0]
 8019ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019bac:	2b00      	cmp	r3, #0
 8019bae:	d017      	beq.n	8019be0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8019bb0:	4b0e      	ldr	r3, [pc, #56]	; (8019bec <FLASH_FlushCaches+0x88>)
 8019bb2:	681b      	ldr	r3, [r3, #0]
 8019bb4:	4a0d      	ldr	r2, [pc, #52]	; (8019bec <FLASH_FlushCaches+0x88>)
 8019bb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8019bba:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8019bbc:	4b0b      	ldr	r3, [pc, #44]	; (8019bec <FLASH_FlushCaches+0x88>)
 8019bbe:	681b      	ldr	r3, [r3, #0]
 8019bc0:	4a0a      	ldr	r2, [pc, #40]	; (8019bec <FLASH_FlushCaches+0x88>)
 8019bc2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8019bc6:	6013      	str	r3, [r2, #0]
 8019bc8:	4b08      	ldr	r3, [pc, #32]	; (8019bec <FLASH_FlushCaches+0x88>)
 8019bca:	681b      	ldr	r3, [r3, #0]
 8019bcc:	4a07      	ldr	r2, [pc, #28]	; (8019bec <FLASH_FlushCaches+0x88>)
 8019bce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019bd2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8019bd4:	4b05      	ldr	r3, [pc, #20]	; (8019bec <FLASH_FlushCaches+0x88>)
 8019bd6:	681b      	ldr	r3, [r3, #0]
 8019bd8:	4a04      	ldr	r2, [pc, #16]	; (8019bec <FLASH_FlushCaches+0x88>)
 8019bda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8019bde:	6013      	str	r3, [r2, #0]
  }
}
 8019be0:	bf00      	nop
 8019be2:	46bd      	mov	sp, r7
 8019be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019be8:	4770      	bx	lr
 8019bea:	bf00      	nop
 8019bec:	40023c00 	.word	0x40023c00

08019bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8019bf0:	b480      	push	{r7}
 8019bf2:	b089      	sub	sp, #36	; 0x24
 8019bf4:	af00      	add	r7, sp, #0
 8019bf6:	6078      	str	r0, [r7, #4]
 8019bf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8019bfa:	2300      	movs	r3, #0
 8019bfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8019bfe:	2300      	movs	r3, #0
 8019c00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8019c02:	2300      	movs	r3, #0
 8019c04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8019c06:	2300      	movs	r3, #0
 8019c08:	61fb      	str	r3, [r7, #28]
 8019c0a:	e165      	b.n	8019ed8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8019c0c:	2201      	movs	r2, #1
 8019c0e:	69fb      	ldr	r3, [r7, #28]
 8019c10:	fa02 f303 	lsl.w	r3, r2, r3
 8019c14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8019c16:	683b      	ldr	r3, [r7, #0]
 8019c18:	681b      	ldr	r3, [r3, #0]
 8019c1a:	697a      	ldr	r2, [r7, #20]
 8019c1c:	4013      	ands	r3, r2
 8019c1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8019c20:	693a      	ldr	r2, [r7, #16]
 8019c22:	697b      	ldr	r3, [r7, #20]
 8019c24:	429a      	cmp	r2, r3
 8019c26:	f040 8154 	bne.w	8019ed2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8019c2a:	683b      	ldr	r3, [r7, #0]
 8019c2c:	685b      	ldr	r3, [r3, #4]
 8019c2e:	f003 0303 	and.w	r3, r3, #3
 8019c32:	2b01      	cmp	r3, #1
 8019c34:	d005      	beq.n	8019c42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8019c36:	683b      	ldr	r3, [r7, #0]
 8019c38:	685b      	ldr	r3, [r3, #4]
 8019c3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8019c3e:	2b02      	cmp	r3, #2
 8019c40:	d130      	bne.n	8019ca4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8019c42:	687b      	ldr	r3, [r7, #4]
 8019c44:	689b      	ldr	r3, [r3, #8]
 8019c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8019c48:	69fb      	ldr	r3, [r7, #28]
 8019c4a:	005b      	lsls	r3, r3, #1
 8019c4c:	2203      	movs	r2, #3
 8019c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8019c52:	43db      	mvns	r3, r3
 8019c54:	69ba      	ldr	r2, [r7, #24]
 8019c56:	4013      	ands	r3, r2
 8019c58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8019c5a:	683b      	ldr	r3, [r7, #0]
 8019c5c:	68da      	ldr	r2, [r3, #12]
 8019c5e:	69fb      	ldr	r3, [r7, #28]
 8019c60:	005b      	lsls	r3, r3, #1
 8019c62:	fa02 f303 	lsl.w	r3, r2, r3
 8019c66:	69ba      	ldr	r2, [r7, #24]
 8019c68:	4313      	orrs	r3, r2
 8019c6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8019c6c:	687b      	ldr	r3, [r7, #4]
 8019c6e:	69ba      	ldr	r2, [r7, #24]
 8019c70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8019c72:	687b      	ldr	r3, [r7, #4]
 8019c74:	685b      	ldr	r3, [r3, #4]
 8019c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8019c78:	2201      	movs	r2, #1
 8019c7a:	69fb      	ldr	r3, [r7, #28]
 8019c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8019c80:	43db      	mvns	r3, r3
 8019c82:	69ba      	ldr	r2, [r7, #24]
 8019c84:	4013      	ands	r3, r2
 8019c86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8019c88:	683b      	ldr	r3, [r7, #0]
 8019c8a:	685b      	ldr	r3, [r3, #4]
 8019c8c:	091b      	lsrs	r3, r3, #4
 8019c8e:	f003 0201 	and.w	r2, r3, #1
 8019c92:	69fb      	ldr	r3, [r7, #28]
 8019c94:	fa02 f303 	lsl.w	r3, r2, r3
 8019c98:	69ba      	ldr	r2, [r7, #24]
 8019c9a:	4313      	orrs	r3, r2
 8019c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	69ba      	ldr	r2, [r7, #24]
 8019ca2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8019ca4:	683b      	ldr	r3, [r7, #0]
 8019ca6:	685b      	ldr	r3, [r3, #4]
 8019ca8:	f003 0303 	and.w	r3, r3, #3
 8019cac:	2b03      	cmp	r3, #3
 8019cae:	d017      	beq.n	8019ce0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8019cb0:	687b      	ldr	r3, [r7, #4]
 8019cb2:	68db      	ldr	r3, [r3, #12]
 8019cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8019cb6:	69fb      	ldr	r3, [r7, #28]
 8019cb8:	005b      	lsls	r3, r3, #1
 8019cba:	2203      	movs	r2, #3
 8019cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8019cc0:	43db      	mvns	r3, r3
 8019cc2:	69ba      	ldr	r2, [r7, #24]
 8019cc4:	4013      	ands	r3, r2
 8019cc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8019cc8:	683b      	ldr	r3, [r7, #0]
 8019cca:	689a      	ldr	r2, [r3, #8]
 8019ccc:	69fb      	ldr	r3, [r7, #28]
 8019cce:	005b      	lsls	r3, r3, #1
 8019cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8019cd4:	69ba      	ldr	r2, [r7, #24]
 8019cd6:	4313      	orrs	r3, r2
 8019cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8019cda:	687b      	ldr	r3, [r7, #4]
 8019cdc:	69ba      	ldr	r2, [r7, #24]
 8019cde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8019ce0:	683b      	ldr	r3, [r7, #0]
 8019ce2:	685b      	ldr	r3, [r3, #4]
 8019ce4:	f003 0303 	and.w	r3, r3, #3
 8019ce8:	2b02      	cmp	r3, #2
 8019cea:	d123      	bne.n	8019d34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8019cec:	69fb      	ldr	r3, [r7, #28]
 8019cee:	08da      	lsrs	r2, r3, #3
 8019cf0:	687b      	ldr	r3, [r7, #4]
 8019cf2:	3208      	adds	r2, #8
 8019cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8019cfa:	69fb      	ldr	r3, [r7, #28]
 8019cfc:	f003 0307 	and.w	r3, r3, #7
 8019d00:	009b      	lsls	r3, r3, #2
 8019d02:	220f      	movs	r2, #15
 8019d04:	fa02 f303 	lsl.w	r3, r2, r3
 8019d08:	43db      	mvns	r3, r3
 8019d0a:	69ba      	ldr	r2, [r7, #24]
 8019d0c:	4013      	ands	r3, r2
 8019d0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8019d10:	683b      	ldr	r3, [r7, #0]
 8019d12:	691a      	ldr	r2, [r3, #16]
 8019d14:	69fb      	ldr	r3, [r7, #28]
 8019d16:	f003 0307 	and.w	r3, r3, #7
 8019d1a:	009b      	lsls	r3, r3, #2
 8019d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8019d20:	69ba      	ldr	r2, [r7, #24]
 8019d22:	4313      	orrs	r3, r2
 8019d24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8019d26:	69fb      	ldr	r3, [r7, #28]
 8019d28:	08da      	lsrs	r2, r3, #3
 8019d2a:	687b      	ldr	r3, [r7, #4]
 8019d2c:	3208      	adds	r2, #8
 8019d2e:	69b9      	ldr	r1, [r7, #24]
 8019d30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8019d34:	687b      	ldr	r3, [r7, #4]
 8019d36:	681b      	ldr	r3, [r3, #0]
 8019d38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8019d3a:	69fb      	ldr	r3, [r7, #28]
 8019d3c:	005b      	lsls	r3, r3, #1
 8019d3e:	2203      	movs	r2, #3
 8019d40:	fa02 f303 	lsl.w	r3, r2, r3
 8019d44:	43db      	mvns	r3, r3
 8019d46:	69ba      	ldr	r2, [r7, #24]
 8019d48:	4013      	ands	r3, r2
 8019d4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8019d4c:	683b      	ldr	r3, [r7, #0]
 8019d4e:	685b      	ldr	r3, [r3, #4]
 8019d50:	f003 0203 	and.w	r2, r3, #3
 8019d54:	69fb      	ldr	r3, [r7, #28]
 8019d56:	005b      	lsls	r3, r3, #1
 8019d58:	fa02 f303 	lsl.w	r3, r2, r3
 8019d5c:	69ba      	ldr	r2, [r7, #24]
 8019d5e:	4313      	orrs	r3, r2
 8019d60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8019d62:	687b      	ldr	r3, [r7, #4]
 8019d64:	69ba      	ldr	r2, [r7, #24]
 8019d66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8019d68:	683b      	ldr	r3, [r7, #0]
 8019d6a:	685b      	ldr	r3, [r3, #4]
 8019d6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8019d70:	2b00      	cmp	r3, #0
 8019d72:	f000 80ae 	beq.w	8019ed2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8019d76:	2300      	movs	r3, #0
 8019d78:	60fb      	str	r3, [r7, #12]
 8019d7a:	4b5d      	ldr	r3, [pc, #372]	; (8019ef0 <HAL_GPIO_Init+0x300>)
 8019d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019d7e:	4a5c      	ldr	r2, [pc, #368]	; (8019ef0 <HAL_GPIO_Init+0x300>)
 8019d80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8019d84:	6453      	str	r3, [r2, #68]	; 0x44
 8019d86:	4b5a      	ldr	r3, [pc, #360]	; (8019ef0 <HAL_GPIO_Init+0x300>)
 8019d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8019d8e:	60fb      	str	r3, [r7, #12]
 8019d90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8019d92:	4a58      	ldr	r2, [pc, #352]	; (8019ef4 <HAL_GPIO_Init+0x304>)
 8019d94:	69fb      	ldr	r3, [r7, #28]
 8019d96:	089b      	lsrs	r3, r3, #2
 8019d98:	3302      	adds	r3, #2
 8019d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8019da0:	69fb      	ldr	r3, [r7, #28]
 8019da2:	f003 0303 	and.w	r3, r3, #3
 8019da6:	009b      	lsls	r3, r3, #2
 8019da8:	220f      	movs	r2, #15
 8019daa:	fa02 f303 	lsl.w	r3, r2, r3
 8019dae:	43db      	mvns	r3, r3
 8019db0:	69ba      	ldr	r2, [r7, #24]
 8019db2:	4013      	ands	r3, r2
 8019db4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8019db6:	687b      	ldr	r3, [r7, #4]
 8019db8:	4a4f      	ldr	r2, [pc, #316]	; (8019ef8 <HAL_GPIO_Init+0x308>)
 8019dba:	4293      	cmp	r3, r2
 8019dbc:	d025      	beq.n	8019e0a <HAL_GPIO_Init+0x21a>
 8019dbe:	687b      	ldr	r3, [r7, #4]
 8019dc0:	4a4e      	ldr	r2, [pc, #312]	; (8019efc <HAL_GPIO_Init+0x30c>)
 8019dc2:	4293      	cmp	r3, r2
 8019dc4:	d01f      	beq.n	8019e06 <HAL_GPIO_Init+0x216>
 8019dc6:	687b      	ldr	r3, [r7, #4]
 8019dc8:	4a4d      	ldr	r2, [pc, #308]	; (8019f00 <HAL_GPIO_Init+0x310>)
 8019dca:	4293      	cmp	r3, r2
 8019dcc:	d019      	beq.n	8019e02 <HAL_GPIO_Init+0x212>
 8019dce:	687b      	ldr	r3, [r7, #4]
 8019dd0:	4a4c      	ldr	r2, [pc, #304]	; (8019f04 <HAL_GPIO_Init+0x314>)
 8019dd2:	4293      	cmp	r3, r2
 8019dd4:	d013      	beq.n	8019dfe <HAL_GPIO_Init+0x20e>
 8019dd6:	687b      	ldr	r3, [r7, #4]
 8019dd8:	4a4b      	ldr	r2, [pc, #300]	; (8019f08 <HAL_GPIO_Init+0x318>)
 8019dda:	4293      	cmp	r3, r2
 8019ddc:	d00d      	beq.n	8019dfa <HAL_GPIO_Init+0x20a>
 8019dde:	687b      	ldr	r3, [r7, #4]
 8019de0:	4a4a      	ldr	r2, [pc, #296]	; (8019f0c <HAL_GPIO_Init+0x31c>)
 8019de2:	4293      	cmp	r3, r2
 8019de4:	d007      	beq.n	8019df6 <HAL_GPIO_Init+0x206>
 8019de6:	687b      	ldr	r3, [r7, #4]
 8019de8:	4a49      	ldr	r2, [pc, #292]	; (8019f10 <HAL_GPIO_Init+0x320>)
 8019dea:	4293      	cmp	r3, r2
 8019dec:	d101      	bne.n	8019df2 <HAL_GPIO_Init+0x202>
 8019dee:	2306      	movs	r3, #6
 8019df0:	e00c      	b.n	8019e0c <HAL_GPIO_Init+0x21c>
 8019df2:	2307      	movs	r3, #7
 8019df4:	e00a      	b.n	8019e0c <HAL_GPIO_Init+0x21c>
 8019df6:	2305      	movs	r3, #5
 8019df8:	e008      	b.n	8019e0c <HAL_GPIO_Init+0x21c>
 8019dfa:	2304      	movs	r3, #4
 8019dfc:	e006      	b.n	8019e0c <HAL_GPIO_Init+0x21c>
 8019dfe:	2303      	movs	r3, #3
 8019e00:	e004      	b.n	8019e0c <HAL_GPIO_Init+0x21c>
 8019e02:	2302      	movs	r3, #2
 8019e04:	e002      	b.n	8019e0c <HAL_GPIO_Init+0x21c>
 8019e06:	2301      	movs	r3, #1
 8019e08:	e000      	b.n	8019e0c <HAL_GPIO_Init+0x21c>
 8019e0a:	2300      	movs	r3, #0
 8019e0c:	69fa      	ldr	r2, [r7, #28]
 8019e0e:	f002 0203 	and.w	r2, r2, #3
 8019e12:	0092      	lsls	r2, r2, #2
 8019e14:	4093      	lsls	r3, r2
 8019e16:	69ba      	ldr	r2, [r7, #24]
 8019e18:	4313      	orrs	r3, r2
 8019e1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8019e1c:	4935      	ldr	r1, [pc, #212]	; (8019ef4 <HAL_GPIO_Init+0x304>)
 8019e1e:	69fb      	ldr	r3, [r7, #28]
 8019e20:	089b      	lsrs	r3, r3, #2
 8019e22:	3302      	adds	r3, #2
 8019e24:	69ba      	ldr	r2, [r7, #24]
 8019e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8019e2a:	4b3a      	ldr	r3, [pc, #232]	; (8019f14 <HAL_GPIO_Init+0x324>)
 8019e2c:	681b      	ldr	r3, [r3, #0]
 8019e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019e30:	693b      	ldr	r3, [r7, #16]
 8019e32:	43db      	mvns	r3, r3
 8019e34:	69ba      	ldr	r2, [r7, #24]
 8019e36:	4013      	ands	r3, r2
 8019e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8019e3a:	683b      	ldr	r3, [r7, #0]
 8019e3c:	685b      	ldr	r3, [r3, #4]
 8019e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019e42:	2b00      	cmp	r3, #0
 8019e44:	d003      	beq.n	8019e4e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8019e46:	69ba      	ldr	r2, [r7, #24]
 8019e48:	693b      	ldr	r3, [r7, #16]
 8019e4a:	4313      	orrs	r3, r2
 8019e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8019e4e:	4a31      	ldr	r2, [pc, #196]	; (8019f14 <HAL_GPIO_Init+0x324>)
 8019e50:	69bb      	ldr	r3, [r7, #24]
 8019e52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8019e54:	4b2f      	ldr	r3, [pc, #188]	; (8019f14 <HAL_GPIO_Init+0x324>)
 8019e56:	685b      	ldr	r3, [r3, #4]
 8019e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019e5a:	693b      	ldr	r3, [r7, #16]
 8019e5c:	43db      	mvns	r3, r3
 8019e5e:	69ba      	ldr	r2, [r7, #24]
 8019e60:	4013      	ands	r3, r2
 8019e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8019e64:	683b      	ldr	r3, [r7, #0]
 8019e66:	685b      	ldr	r3, [r3, #4]
 8019e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019e6c:	2b00      	cmp	r3, #0
 8019e6e:	d003      	beq.n	8019e78 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8019e70:	69ba      	ldr	r2, [r7, #24]
 8019e72:	693b      	ldr	r3, [r7, #16]
 8019e74:	4313      	orrs	r3, r2
 8019e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8019e78:	4a26      	ldr	r2, [pc, #152]	; (8019f14 <HAL_GPIO_Init+0x324>)
 8019e7a:	69bb      	ldr	r3, [r7, #24]
 8019e7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8019e7e:	4b25      	ldr	r3, [pc, #148]	; (8019f14 <HAL_GPIO_Init+0x324>)
 8019e80:	689b      	ldr	r3, [r3, #8]
 8019e82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019e84:	693b      	ldr	r3, [r7, #16]
 8019e86:	43db      	mvns	r3, r3
 8019e88:	69ba      	ldr	r2, [r7, #24]
 8019e8a:	4013      	ands	r3, r2
 8019e8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8019e8e:	683b      	ldr	r3, [r7, #0]
 8019e90:	685b      	ldr	r3, [r3, #4]
 8019e92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8019e96:	2b00      	cmp	r3, #0
 8019e98:	d003      	beq.n	8019ea2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8019e9a:	69ba      	ldr	r2, [r7, #24]
 8019e9c:	693b      	ldr	r3, [r7, #16]
 8019e9e:	4313      	orrs	r3, r2
 8019ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8019ea2:	4a1c      	ldr	r2, [pc, #112]	; (8019f14 <HAL_GPIO_Init+0x324>)
 8019ea4:	69bb      	ldr	r3, [r7, #24]
 8019ea6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8019ea8:	4b1a      	ldr	r3, [pc, #104]	; (8019f14 <HAL_GPIO_Init+0x324>)
 8019eaa:	68db      	ldr	r3, [r3, #12]
 8019eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019eae:	693b      	ldr	r3, [r7, #16]
 8019eb0:	43db      	mvns	r3, r3
 8019eb2:	69ba      	ldr	r2, [r7, #24]
 8019eb4:	4013      	ands	r3, r2
 8019eb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8019eb8:	683b      	ldr	r3, [r7, #0]
 8019eba:	685b      	ldr	r3, [r3, #4]
 8019ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8019ec0:	2b00      	cmp	r3, #0
 8019ec2:	d003      	beq.n	8019ecc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8019ec4:	69ba      	ldr	r2, [r7, #24]
 8019ec6:	693b      	ldr	r3, [r7, #16]
 8019ec8:	4313      	orrs	r3, r2
 8019eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8019ecc:	4a11      	ldr	r2, [pc, #68]	; (8019f14 <HAL_GPIO_Init+0x324>)
 8019ece:	69bb      	ldr	r3, [r7, #24]
 8019ed0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8019ed2:	69fb      	ldr	r3, [r7, #28]
 8019ed4:	3301      	adds	r3, #1
 8019ed6:	61fb      	str	r3, [r7, #28]
 8019ed8:	69fb      	ldr	r3, [r7, #28]
 8019eda:	2b0f      	cmp	r3, #15
 8019edc:	f67f ae96 	bls.w	8019c0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8019ee0:	bf00      	nop
 8019ee2:	bf00      	nop
 8019ee4:	3724      	adds	r7, #36	; 0x24
 8019ee6:	46bd      	mov	sp, r7
 8019ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019eec:	4770      	bx	lr
 8019eee:	bf00      	nop
 8019ef0:	40023800 	.word	0x40023800
 8019ef4:	40013800 	.word	0x40013800
 8019ef8:	40020000 	.word	0x40020000
 8019efc:	40020400 	.word	0x40020400
 8019f00:	40020800 	.word	0x40020800
 8019f04:	40020c00 	.word	0x40020c00
 8019f08:	40021000 	.word	0x40021000
 8019f0c:	40021400 	.word	0x40021400
 8019f10:	40021800 	.word	0x40021800
 8019f14:	40013c00 	.word	0x40013c00

08019f18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8019f18:	b480      	push	{r7}
 8019f1a:	b085      	sub	sp, #20
 8019f1c:	af00      	add	r7, sp, #0
 8019f1e:	6078      	str	r0, [r7, #4]
 8019f20:	460b      	mov	r3, r1
 8019f22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8019f24:	687b      	ldr	r3, [r7, #4]
 8019f26:	691a      	ldr	r2, [r3, #16]
 8019f28:	887b      	ldrh	r3, [r7, #2]
 8019f2a:	4013      	ands	r3, r2
 8019f2c:	2b00      	cmp	r3, #0
 8019f2e:	d002      	beq.n	8019f36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8019f30:	2301      	movs	r3, #1
 8019f32:	73fb      	strb	r3, [r7, #15]
 8019f34:	e001      	b.n	8019f3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8019f36:	2300      	movs	r3, #0
 8019f38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8019f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8019f3c:	4618      	mov	r0, r3
 8019f3e:	3714      	adds	r7, #20
 8019f40:	46bd      	mov	sp, r7
 8019f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f46:	4770      	bx	lr

08019f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8019f48:	b480      	push	{r7}
 8019f4a:	b083      	sub	sp, #12
 8019f4c:	af00      	add	r7, sp, #0
 8019f4e:	6078      	str	r0, [r7, #4]
 8019f50:	460b      	mov	r3, r1
 8019f52:	807b      	strh	r3, [r7, #2]
 8019f54:	4613      	mov	r3, r2
 8019f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8019f58:	787b      	ldrb	r3, [r7, #1]
 8019f5a:	2b00      	cmp	r3, #0
 8019f5c:	d003      	beq.n	8019f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8019f5e:	887a      	ldrh	r2, [r7, #2]
 8019f60:	687b      	ldr	r3, [r7, #4]
 8019f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8019f64:	e003      	b.n	8019f6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8019f66:	887b      	ldrh	r3, [r7, #2]
 8019f68:	041a      	lsls	r2, r3, #16
 8019f6a:	687b      	ldr	r3, [r7, #4]
 8019f6c:	619a      	str	r2, [r3, #24]
}
 8019f6e:	bf00      	nop
 8019f70:	370c      	adds	r7, #12
 8019f72:	46bd      	mov	sp, r7
 8019f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f78:	4770      	bx	lr

08019f7a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8019f7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019f7c:	b08f      	sub	sp, #60	; 0x3c
 8019f7e:	af0a      	add	r7, sp, #40	; 0x28
 8019f80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8019f82:	687b      	ldr	r3, [r7, #4]
 8019f84:	2b00      	cmp	r3, #0
 8019f86:	d101      	bne.n	8019f8c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8019f88:	2301      	movs	r3, #1
 8019f8a:	e116      	b.n	801a1ba <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8019f8c:	687b      	ldr	r3, [r7, #4]
 8019f8e:	681b      	ldr	r3, [r3, #0]
 8019f90:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8019f98:	b2db      	uxtb	r3, r3
 8019f9a:	2b00      	cmp	r3, #0
 8019f9c:	d106      	bne.n	8019fac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8019f9e:	687b      	ldr	r3, [r7, #4]
 8019fa0:	2200      	movs	r2, #0
 8019fa2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8019fa6:	6878      	ldr	r0, [r7, #4]
 8019fa8:	f008 fc38 	bl	802281c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8019fac:	687b      	ldr	r3, [r7, #4]
 8019fae:	2203      	movs	r2, #3
 8019fb0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8019fb4:	68bb      	ldr	r3, [r7, #8]
 8019fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019fbc:	2b00      	cmp	r3, #0
 8019fbe:	d102      	bne.n	8019fc6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8019fc0:	687b      	ldr	r3, [r7, #4]
 8019fc2:	2200      	movs	r2, #0
 8019fc4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	681b      	ldr	r3, [r3, #0]
 8019fca:	4618      	mov	r0, r3
 8019fcc:	f004 f8af 	bl	801e12e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8019fd0:	687b      	ldr	r3, [r7, #4]
 8019fd2:	681b      	ldr	r3, [r3, #0]
 8019fd4:	603b      	str	r3, [r7, #0]
 8019fd6:	687e      	ldr	r6, [r7, #4]
 8019fd8:	466d      	mov	r5, sp
 8019fda:	f106 0410 	add.w	r4, r6, #16
 8019fde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019fe0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019fe2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019fe4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019fe6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8019fea:	e885 0003 	stmia.w	r5, {r0, r1}
 8019fee:	1d33      	adds	r3, r6, #4
 8019ff0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019ff2:	6838      	ldr	r0, [r7, #0]
 8019ff4:	f003 ff86 	bl	801df04 <USB_CoreInit>
 8019ff8:	4603      	mov	r3, r0
 8019ffa:	2b00      	cmp	r3, #0
 8019ffc:	d005      	beq.n	801a00a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8019ffe:	687b      	ldr	r3, [r7, #4]
 801a000:	2202      	movs	r2, #2
 801a002:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 801a006:	2301      	movs	r3, #1
 801a008:	e0d7      	b.n	801a1ba <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 801a00a:	687b      	ldr	r3, [r7, #4]
 801a00c:	681b      	ldr	r3, [r3, #0]
 801a00e:	2100      	movs	r1, #0
 801a010:	4618      	mov	r0, r3
 801a012:	f004 f89d 	bl	801e150 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801a016:	2300      	movs	r3, #0
 801a018:	73fb      	strb	r3, [r7, #15]
 801a01a:	e04a      	b.n	801a0b2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 801a01c:	7bfa      	ldrb	r2, [r7, #15]
 801a01e:	6879      	ldr	r1, [r7, #4]
 801a020:	4613      	mov	r3, r2
 801a022:	00db      	lsls	r3, r3, #3
 801a024:	1a9b      	subs	r3, r3, r2
 801a026:	009b      	lsls	r3, r3, #2
 801a028:	440b      	add	r3, r1
 801a02a:	333d      	adds	r3, #61	; 0x3d
 801a02c:	2201      	movs	r2, #1
 801a02e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 801a030:	7bfa      	ldrb	r2, [r7, #15]
 801a032:	6879      	ldr	r1, [r7, #4]
 801a034:	4613      	mov	r3, r2
 801a036:	00db      	lsls	r3, r3, #3
 801a038:	1a9b      	subs	r3, r3, r2
 801a03a:	009b      	lsls	r3, r3, #2
 801a03c:	440b      	add	r3, r1
 801a03e:	333c      	adds	r3, #60	; 0x3c
 801a040:	7bfa      	ldrb	r2, [r7, #15]
 801a042:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 801a044:	7bfa      	ldrb	r2, [r7, #15]
 801a046:	7bfb      	ldrb	r3, [r7, #15]
 801a048:	b298      	uxth	r0, r3
 801a04a:	6879      	ldr	r1, [r7, #4]
 801a04c:	4613      	mov	r3, r2
 801a04e:	00db      	lsls	r3, r3, #3
 801a050:	1a9b      	subs	r3, r3, r2
 801a052:	009b      	lsls	r3, r3, #2
 801a054:	440b      	add	r3, r1
 801a056:	3342      	adds	r3, #66	; 0x42
 801a058:	4602      	mov	r2, r0
 801a05a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 801a05c:	7bfa      	ldrb	r2, [r7, #15]
 801a05e:	6879      	ldr	r1, [r7, #4]
 801a060:	4613      	mov	r3, r2
 801a062:	00db      	lsls	r3, r3, #3
 801a064:	1a9b      	subs	r3, r3, r2
 801a066:	009b      	lsls	r3, r3, #2
 801a068:	440b      	add	r3, r1
 801a06a:	333f      	adds	r3, #63	; 0x3f
 801a06c:	2200      	movs	r2, #0
 801a06e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 801a070:	7bfa      	ldrb	r2, [r7, #15]
 801a072:	6879      	ldr	r1, [r7, #4]
 801a074:	4613      	mov	r3, r2
 801a076:	00db      	lsls	r3, r3, #3
 801a078:	1a9b      	subs	r3, r3, r2
 801a07a:	009b      	lsls	r3, r3, #2
 801a07c:	440b      	add	r3, r1
 801a07e:	3344      	adds	r3, #68	; 0x44
 801a080:	2200      	movs	r2, #0
 801a082:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 801a084:	7bfa      	ldrb	r2, [r7, #15]
 801a086:	6879      	ldr	r1, [r7, #4]
 801a088:	4613      	mov	r3, r2
 801a08a:	00db      	lsls	r3, r3, #3
 801a08c:	1a9b      	subs	r3, r3, r2
 801a08e:	009b      	lsls	r3, r3, #2
 801a090:	440b      	add	r3, r1
 801a092:	3348      	adds	r3, #72	; 0x48
 801a094:	2200      	movs	r2, #0
 801a096:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 801a098:	7bfa      	ldrb	r2, [r7, #15]
 801a09a:	6879      	ldr	r1, [r7, #4]
 801a09c:	4613      	mov	r3, r2
 801a09e:	00db      	lsls	r3, r3, #3
 801a0a0:	1a9b      	subs	r3, r3, r2
 801a0a2:	009b      	lsls	r3, r3, #2
 801a0a4:	440b      	add	r3, r1
 801a0a6:	3350      	adds	r3, #80	; 0x50
 801a0a8:	2200      	movs	r2, #0
 801a0aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801a0ac:	7bfb      	ldrb	r3, [r7, #15]
 801a0ae:	3301      	adds	r3, #1
 801a0b0:	73fb      	strb	r3, [r7, #15]
 801a0b2:	7bfa      	ldrb	r2, [r7, #15]
 801a0b4:	687b      	ldr	r3, [r7, #4]
 801a0b6:	685b      	ldr	r3, [r3, #4]
 801a0b8:	429a      	cmp	r2, r3
 801a0ba:	d3af      	bcc.n	801a01c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801a0bc:	2300      	movs	r3, #0
 801a0be:	73fb      	strb	r3, [r7, #15]
 801a0c0:	e044      	b.n	801a14c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 801a0c2:	7bfa      	ldrb	r2, [r7, #15]
 801a0c4:	6879      	ldr	r1, [r7, #4]
 801a0c6:	4613      	mov	r3, r2
 801a0c8:	00db      	lsls	r3, r3, #3
 801a0ca:	1a9b      	subs	r3, r3, r2
 801a0cc:	009b      	lsls	r3, r3, #2
 801a0ce:	440b      	add	r3, r1
 801a0d0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 801a0d4:	2200      	movs	r2, #0
 801a0d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 801a0d8:	7bfa      	ldrb	r2, [r7, #15]
 801a0da:	6879      	ldr	r1, [r7, #4]
 801a0dc:	4613      	mov	r3, r2
 801a0de:	00db      	lsls	r3, r3, #3
 801a0e0:	1a9b      	subs	r3, r3, r2
 801a0e2:	009b      	lsls	r3, r3, #2
 801a0e4:	440b      	add	r3, r1
 801a0e6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 801a0ea:	7bfa      	ldrb	r2, [r7, #15]
 801a0ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 801a0ee:	7bfa      	ldrb	r2, [r7, #15]
 801a0f0:	6879      	ldr	r1, [r7, #4]
 801a0f2:	4613      	mov	r3, r2
 801a0f4:	00db      	lsls	r3, r3, #3
 801a0f6:	1a9b      	subs	r3, r3, r2
 801a0f8:	009b      	lsls	r3, r3, #2
 801a0fa:	440b      	add	r3, r1
 801a0fc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 801a100:	2200      	movs	r2, #0
 801a102:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 801a104:	7bfa      	ldrb	r2, [r7, #15]
 801a106:	6879      	ldr	r1, [r7, #4]
 801a108:	4613      	mov	r3, r2
 801a10a:	00db      	lsls	r3, r3, #3
 801a10c:	1a9b      	subs	r3, r3, r2
 801a10e:	009b      	lsls	r3, r3, #2
 801a110:	440b      	add	r3, r1
 801a112:	f503 7301 	add.w	r3, r3, #516	; 0x204
 801a116:	2200      	movs	r2, #0
 801a118:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 801a11a:	7bfa      	ldrb	r2, [r7, #15]
 801a11c:	6879      	ldr	r1, [r7, #4]
 801a11e:	4613      	mov	r3, r2
 801a120:	00db      	lsls	r3, r3, #3
 801a122:	1a9b      	subs	r3, r3, r2
 801a124:	009b      	lsls	r3, r3, #2
 801a126:	440b      	add	r3, r1
 801a128:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801a12c:	2200      	movs	r2, #0
 801a12e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 801a130:	7bfa      	ldrb	r2, [r7, #15]
 801a132:	6879      	ldr	r1, [r7, #4]
 801a134:	4613      	mov	r3, r2
 801a136:	00db      	lsls	r3, r3, #3
 801a138:	1a9b      	subs	r3, r3, r2
 801a13a:	009b      	lsls	r3, r3, #2
 801a13c:	440b      	add	r3, r1
 801a13e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 801a142:	2200      	movs	r2, #0
 801a144:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801a146:	7bfb      	ldrb	r3, [r7, #15]
 801a148:	3301      	adds	r3, #1
 801a14a:	73fb      	strb	r3, [r7, #15]
 801a14c:	7bfa      	ldrb	r2, [r7, #15]
 801a14e:	687b      	ldr	r3, [r7, #4]
 801a150:	685b      	ldr	r3, [r3, #4]
 801a152:	429a      	cmp	r2, r3
 801a154:	d3b5      	bcc.n	801a0c2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 801a156:	687b      	ldr	r3, [r7, #4]
 801a158:	681b      	ldr	r3, [r3, #0]
 801a15a:	603b      	str	r3, [r7, #0]
 801a15c:	687e      	ldr	r6, [r7, #4]
 801a15e:	466d      	mov	r5, sp
 801a160:	f106 0410 	add.w	r4, r6, #16
 801a164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a166:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a168:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a16a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a16c:	e894 0003 	ldmia.w	r4, {r0, r1}
 801a170:	e885 0003 	stmia.w	r5, {r0, r1}
 801a174:	1d33      	adds	r3, r6, #4
 801a176:	cb0e      	ldmia	r3, {r1, r2, r3}
 801a178:	6838      	ldr	r0, [r7, #0]
 801a17a:	f004 f835 	bl	801e1e8 <USB_DevInit>
 801a17e:	4603      	mov	r3, r0
 801a180:	2b00      	cmp	r3, #0
 801a182:	d005      	beq.n	801a190 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 801a184:	687b      	ldr	r3, [r7, #4]
 801a186:	2202      	movs	r2, #2
 801a188:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 801a18c:	2301      	movs	r3, #1
 801a18e:	e014      	b.n	801a1ba <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 801a190:	687b      	ldr	r3, [r7, #4]
 801a192:	2200      	movs	r2, #0
 801a194:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 801a198:	687b      	ldr	r3, [r7, #4]
 801a19a:	2201      	movs	r2, #1
 801a19c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 801a1a0:	687b      	ldr	r3, [r7, #4]
 801a1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1a4:	2b01      	cmp	r3, #1
 801a1a6:	d102      	bne.n	801a1ae <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 801a1a8:	6878      	ldr	r0, [r7, #4]
 801a1aa:	f001 f8bf 	bl	801b32c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 801a1ae:	687b      	ldr	r3, [r7, #4]
 801a1b0:	681b      	ldr	r3, [r3, #0]
 801a1b2:	4618      	mov	r0, r3
 801a1b4:	f005 f8a4 	bl	801f300 <USB_DevDisconnect>

  return HAL_OK;
 801a1b8:	2300      	movs	r3, #0
}
 801a1ba:	4618      	mov	r0, r3
 801a1bc:	3714      	adds	r7, #20
 801a1be:	46bd      	mov	sp, r7
 801a1c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a1c2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 801a1c2:	b580      	push	{r7, lr}
 801a1c4:	b084      	sub	sp, #16
 801a1c6:	af00      	add	r7, sp, #0
 801a1c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801a1ca:	687b      	ldr	r3, [r7, #4]
 801a1cc:	681b      	ldr	r3, [r3, #0]
 801a1ce:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801a1d6:	2b01      	cmp	r3, #1
 801a1d8:	d101      	bne.n	801a1de <HAL_PCD_Start+0x1c>
 801a1da:	2302      	movs	r3, #2
 801a1dc:	e020      	b.n	801a220 <HAL_PCD_Start+0x5e>
 801a1de:	687b      	ldr	r3, [r7, #4]
 801a1e0:	2201      	movs	r2, #1
 801a1e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 801a1e6:	687b      	ldr	r3, [r7, #4]
 801a1e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a1ea:	2b01      	cmp	r3, #1
 801a1ec:	d109      	bne.n	801a202 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 801a1ee:	687b      	ldr	r3, [r7, #4]
 801a1f0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 801a1f2:	2b01      	cmp	r3, #1
 801a1f4:	d005      	beq.n	801a202 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801a1f6:	68fb      	ldr	r3, [r7, #12]
 801a1f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a1fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801a1fe:	68fb      	ldr	r3, [r7, #12]
 801a200:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 801a202:	687b      	ldr	r3, [r7, #4]
 801a204:	681b      	ldr	r3, [r3, #0]
 801a206:	4618      	mov	r0, r3
 801a208:	f003 ff80 	bl	801e10c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 801a20c:	687b      	ldr	r3, [r7, #4]
 801a20e:	681b      	ldr	r3, [r3, #0]
 801a210:	4618      	mov	r0, r3
 801a212:	f005 f854 	bl	801f2be <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 801a216:	687b      	ldr	r3, [r7, #4]
 801a218:	2200      	movs	r2, #0
 801a21a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801a21e:	2300      	movs	r3, #0
}
 801a220:	4618      	mov	r0, r3
 801a222:	3710      	adds	r7, #16
 801a224:	46bd      	mov	sp, r7
 801a226:	bd80      	pop	{r7, pc}

0801a228 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 801a228:	b590      	push	{r4, r7, lr}
 801a22a:	b08d      	sub	sp, #52	; 0x34
 801a22c:	af00      	add	r7, sp, #0
 801a22e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801a230:	687b      	ldr	r3, [r7, #4]
 801a232:	681b      	ldr	r3, [r3, #0]
 801a234:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a236:	6a3b      	ldr	r3, [r7, #32]
 801a238:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	681b      	ldr	r3, [r3, #0]
 801a23e:	4618      	mov	r0, r3
 801a240:	f005 f912 	bl	801f468 <USB_GetMode>
 801a244:	4603      	mov	r3, r0
 801a246:	2b00      	cmp	r3, #0
 801a248:	f040 83ca 	bne.w	801a9e0 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 801a24c:	687b      	ldr	r3, [r7, #4]
 801a24e:	681b      	ldr	r3, [r3, #0]
 801a250:	4618      	mov	r0, r3
 801a252:	f005 f876 	bl	801f342 <USB_ReadInterrupts>
 801a256:	4603      	mov	r3, r0
 801a258:	2b00      	cmp	r3, #0
 801a25a:	f000 83c0 	beq.w	801a9de <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 801a25e:	687b      	ldr	r3, [r7, #4]
 801a260:	681b      	ldr	r3, [r3, #0]
 801a262:	4618      	mov	r0, r3
 801a264:	f005 f86d 	bl	801f342 <USB_ReadInterrupts>
 801a268:	4603      	mov	r3, r0
 801a26a:	f003 0302 	and.w	r3, r3, #2
 801a26e:	2b02      	cmp	r3, #2
 801a270:	d107      	bne.n	801a282 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 801a272:	687b      	ldr	r3, [r7, #4]
 801a274:	681b      	ldr	r3, [r3, #0]
 801a276:	695a      	ldr	r2, [r3, #20]
 801a278:	687b      	ldr	r3, [r7, #4]
 801a27a:	681b      	ldr	r3, [r3, #0]
 801a27c:	f002 0202 	and.w	r2, r2, #2
 801a280:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 801a282:	687b      	ldr	r3, [r7, #4]
 801a284:	681b      	ldr	r3, [r3, #0]
 801a286:	4618      	mov	r0, r3
 801a288:	f005 f85b 	bl	801f342 <USB_ReadInterrupts>
 801a28c:	4603      	mov	r3, r0
 801a28e:	f003 0310 	and.w	r3, r3, #16
 801a292:	2b10      	cmp	r3, #16
 801a294:	d161      	bne.n	801a35a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 801a296:	687b      	ldr	r3, [r7, #4]
 801a298:	681b      	ldr	r3, [r3, #0]
 801a29a:	699a      	ldr	r2, [r3, #24]
 801a29c:	687b      	ldr	r3, [r7, #4]
 801a29e:	681b      	ldr	r3, [r3, #0]
 801a2a0:	f022 0210 	bic.w	r2, r2, #16
 801a2a4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 801a2a6:	6a3b      	ldr	r3, [r7, #32]
 801a2a8:	6a1b      	ldr	r3, [r3, #32]
 801a2aa:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 801a2ac:	69bb      	ldr	r3, [r7, #24]
 801a2ae:	f003 020f 	and.w	r2, r3, #15
 801a2b2:	4613      	mov	r3, r2
 801a2b4:	00db      	lsls	r3, r3, #3
 801a2b6:	1a9b      	subs	r3, r3, r2
 801a2b8:	009b      	lsls	r3, r3, #2
 801a2ba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801a2be:	687a      	ldr	r2, [r7, #4]
 801a2c0:	4413      	add	r3, r2
 801a2c2:	3304      	adds	r3, #4
 801a2c4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 801a2c6:	69bb      	ldr	r3, [r7, #24]
 801a2c8:	0c5b      	lsrs	r3, r3, #17
 801a2ca:	f003 030f 	and.w	r3, r3, #15
 801a2ce:	2b02      	cmp	r3, #2
 801a2d0:	d124      	bne.n	801a31c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 801a2d2:	69ba      	ldr	r2, [r7, #24]
 801a2d4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 801a2d8:	4013      	ands	r3, r2
 801a2da:	2b00      	cmp	r3, #0
 801a2dc:	d035      	beq.n	801a34a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 801a2de:	697b      	ldr	r3, [r7, #20]
 801a2e0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 801a2e2:	69bb      	ldr	r3, [r7, #24]
 801a2e4:	091b      	lsrs	r3, r3, #4
 801a2e6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 801a2e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a2ec:	b29b      	uxth	r3, r3
 801a2ee:	461a      	mov	r2, r3
 801a2f0:	6a38      	ldr	r0, [r7, #32]
 801a2f2:	f004 fe92 	bl	801f01a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 801a2f6:	697b      	ldr	r3, [r7, #20]
 801a2f8:	68da      	ldr	r2, [r3, #12]
 801a2fa:	69bb      	ldr	r3, [r7, #24]
 801a2fc:	091b      	lsrs	r3, r3, #4
 801a2fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a302:	441a      	add	r2, r3
 801a304:	697b      	ldr	r3, [r7, #20]
 801a306:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 801a308:	697b      	ldr	r3, [r7, #20]
 801a30a:	699a      	ldr	r2, [r3, #24]
 801a30c:	69bb      	ldr	r3, [r7, #24]
 801a30e:	091b      	lsrs	r3, r3, #4
 801a310:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a314:	441a      	add	r2, r3
 801a316:	697b      	ldr	r3, [r7, #20]
 801a318:	619a      	str	r2, [r3, #24]
 801a31a:	e016      	b.n	801a34a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 801a31c:	69bb      	ldr	r3, [r7, #24]
 801a31e:	0c5b      	lsrs	r3, r3, #17
 801a320:	f003 030f 	and.w	r3, r3, #15
 801a324:	2b06      	cmp	r3, #6
 801a326:	d110      	bne.n	801a34a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 801a328:	687b      	ldr	r3, [r7, #4]
 801a32a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801a32e:	2208      	movs	r2, #8
 801a330:	4619      	mov	r1, r3
 801a332:	6a38      	ldr	r0, [r7, #32]
 801a334:	f004 fe71 	bl	801f01a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 801a338:	697b      	ldr	r3, [r7, #20]
 801a33a:	699a      	ldr	r2, [r3, #24]
 801a33c:	69bb      	ldr	r3, [r7, #24]
 801a33e:	091b      	lsrs	r3, r3, #4
 801a340:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a344:	441a      	add	r2, r3
 801a346:	697b      	ldr	r3, [r7, #20]
 801a348:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 801a34a:	687b      	ldr	r3, [r7, #4]
 801a34c:	681b      	ldr	r3, [r3, #0]
 801a34e:	699a      	ldr	r2, [r3, #24]
 801a350:	687b      	ldr	r3, [r7, #4]
 801a352:	681b      	ldr	r3, [r3, #0]
 801a354:	f042 0210 	orr.w	r2, r2, #16
 801a358:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 801a35a:	687b      	ldr	r3, [r7, #4]
 801a35c:	681b      	ldr	r3, [r3, #0]
 801a35e:	4618      	mov	r0, r3
 801a360:	f004 ffef 	bl	801f342 <USB_ReadInterrupts>
 801a364:	4603      	mov	r3, r0
 801a366:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801a36a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 801a36e:	d16e      	bne.n	801a44e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 801a370:	2300      	movs	r3, #0
 801a372:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 801a374:	687b      	ldr	r3, [r7, #4]
 801a376:	681b      	ldr	r3, [r3, #0]
 801a378:	4618      	mov	r0, r3
 801a37a:	f004 fff5 	bl	801f368 <USB_ReadDevAllOutEpInterrupt>
 801a37e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 801a380:	e062      	b.n	801a448 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 801a382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a384:	f003 0301 	and.w	r3, r3, #1
 801a388:	2b00      	cmp	r3, #0
 801a38a:	d057      	beq.n	801a43c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 801a38c:	687b      	ldr	r3, [r7, #4]
 801a38e:	681b      	ldr	r3, [r3, #0]
 801a390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a392:	b2d2      	uxtb	r2, r2
 801a394:	4611      	mov	r1, r2
 801a396:	4618      	mov	r0, r3
 801a398:	f005 f81a 	bl	801f3d0 <USB_ReadDevOutEPInterrupt>
 801a39c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 801a39e:	693b      	ldr	r3, [r7, #16]
 801a3a0:	f003 0301 	and.w	r3, r3, #1
 801a3a4:	2b00      	cmp	r3, #0
 801a3a6:	d00c      	beq.n	801a3c2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 801a3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3aa:	015a      	lsls	r2, r3, #5
 801a3ac:	69fb      	ldr	r3, [r7, #28]
 801a3ae:	4413      	add	r3, r2
 801a3b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a3b4:	461a      	mov	r2, r3
 801a3b6:	2301      	movs	r3, #1
 801a3b8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 801a3ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a3bc:	6878      	ldr	r0, [r7, #4]
 801a3be:	f000 fe0b 	bl	801afd8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 801a3c2:	693b      	ldr	r3, [r7, #16]
 801a3c4:	f003 0308 	and.w	r3, r3, #8
 801a3c8:	2b00      	cmp	r3, #0
 801a3ca:	d00c      	beq.n	801a3e6 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 801a3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3ce:	015a      	lsls	r2, r3, #5
 801a3d0:	69fb      	ldr	r3, [r7, #28]
 801a3d2:	4413      	add	r3, r2
 801a3d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a3d8:	461a      	mov	r2, r3
 801a3da:	2308      	movs	r3, #8
 801a3dc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 801a3de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a3e0:	6878      	ldr	r0, [r7, #4]
 801a3e2:	f000 ff05 	bl	801b1f0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 801a3e6:	693b      	ldr	r3, [r7, #16]
 801a3e8:	f003 0310 	and.w	r3, r3, #16
 801a3ec:	2b00      	cmp	r3, #0
 801a3ee:	d008      	beq.n	801a402 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 801a3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3f2:	015a      	lsls	r2, r3, #5
 801a3f4:	69fb      	ldr	r3, [r7, #28]
 801a3f6:	4413      	add	r3, r2
 801a3f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a3fc:	461a      	mov	r2, r3
 801a3fe:	2310      	movs	r3, #16
 801a400:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 801a402:	693b      	ldr	r3, [r7, #16]
 801a404:	f003 0320 	and.w	r3, r3, #32
 801a408:	2b00      	cmp	r3, #0
 801a40a:	d008      	beq.n	801a41e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801a40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a40e:	015a      	lsls	r2, r3, #5
 801a410:	69fb      	ldr	r3, [r7, #28]
 801a412:	4413      	add	r3, r2
 801a414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a418:	461a      	mov	r2, r3
 801a41a:	2320      	movs	r3, #32
 801a41c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 801a41e:	693b      	ldr	r3, [r7, #16]
 801a420:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a424:	2b00      	cmp	r3, #0
 801a426:	d009      	beq.n	801a43c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 801a428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a42a:	015a      	lsls	r2, r3, #5
 801a42c:	69fb      	ldr	r3, [r7, #28]
 801a42e:	4413      	add	r3, r2
 801a430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a434:	461a      	mov	r2, r3
 801a436:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801a43a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 801a43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a43e:	3301      	adds	r3, #1
 801a440:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 801a442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a444:	085b      	lsrs	r3, r3, #1
 801a446:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 801a448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a44a:	2b00      	cmp	r3, #0
 801a44c:	d199      	bne.n	801a382 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 801a44e:	687b      	ldr	r3, [r7, #4]
 801a450:	681b      	ldr	r3, [r3, #0]
 801a452:	4618      	mov	r0, r3
 801a454:	f004 ff75 	bl	801f342 <USB_ReadInterrupts>
 801a458:	4603      	mov	r3, r0
 801a45a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801a45e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801a462:	f040 80c0 	bne.w	801a5e6 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 801a466:	687b      	ldr	r3, [r7, #4]
 801a468:	681b      	ldr	r3, [r3, #0]
 801a46a:	4618      	mov	r0, r3
 801a46c:	f004 ff96 	bl	801f39c <USB_ReadDevAllInEpInterrupt>
 801a470:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 801a472:	2300      	movs	r3, #0
 801a474:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 801a476:	e0b2      	b.n	801a5de <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 801a478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a47a:	f003 0301 	and.w	r3, r3, #1
 801a47e:	2b00      	cmp	r3, #0
 801a480:	f000 80a7 	beq.w	801a5d2 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 801a484:	687b      	ldr	r3, [r7, #4]
 801a486:	681b      	ldr	r3, [r3, #0]
 801a488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a48a:	b2d2      	uxtb	r2, r2
 801a48c:	4611      	mov	r1, r2
 801a48e:	4618      	mov	r0, r3
 801a490:	f004 ffbc 	bl	801f40c <USB_ReadDevInEPInterrupt>
 801a494:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 801a496:	693b      	ldr	r3, [r7, #16]
 801a498:	f003 0301 	and.w	r3, r3, #1
 801a49c:	2b00      	cmp	r3, #0
 801a49e:	d057      	beq.n	801a550 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 801a4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4a2:	f003 030f 	and.w	r3, r3, #15
 801a4a6:	2201      	movs	r2, #1
 801a4a8:	fa02 f303 	lsl.w	r3, r2, r3
 801a4ac:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 801a4ae:	69fb      	ldr	r3, [r7, #28]
 801a4b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a4b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801a4b6:	68fb      	ldr	r3, [r7, #12]
 801a4b8:	43db      	mvns	r3, r3
 801a4ba:	69f9      	ldr	r1, [r7, #28]
 801a4bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801a4c0:	4013      	ands	r3, r2
 801a4c2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 801a4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4c6:	015a      	lsls	r2, r3, #5
 801a4c8:	69fb      	ldr	r3, [r7, #28]
 801a4ca:	4413      	add	r3, r2
 801a4cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a4d0:	461a      	mov	r2, r3
 801a4d2:	2301      	movs	r3, #1
 801a4d4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 801a4d6:	687b      	ldr	r3, [r7, #4]
 801a4d8:	691b      	ldr	r3, [r3, #16]
 801a4da:	2b01      	cmp	r3, #1
 801a4dc:	d132      	bne.n	801a544 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 801a4de:	6879      	ldr	r1, [r7, #4]
 801a4e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a4e2:	4613      	mov	r3, r2
 801a4e4:	00db      	lsls	r3, r3, #3
 801a4e6:	1a9b      	subs	r3, r3, r2
 801a4e8:	009b      	lsls	r3, r3, #2
 801a4ea:	440b      	add	r3, r1
 801a4ec:	3348      	adds	r3, #72	; 0x48
 801a4ee:	6819      	ldr	r1, [r3, #0]
 801a4f0:	6878      	ldr	r0, [r7, #4]
 801a4f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a4f4:	4613      	mov	r3, r2
 801a4f6:	00db      	lsls	r3, r3, #3
 801a4f8:	1a9b      	subs	r3, r3, r2
 801a4fa:	009b      	lsls	r3, r3, #2
 801a4fc:	4403      	add	r3, r0
 801a4fe:	3344      	adds	r3, #68	; 0x44
 801a500:	681b      	ldr	r3, [r3, #0]
 801a502:	4419      	add	r1, r3
 801a504:	6878      	ldr	r0, [r7, #4]
 801a506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a508:	4613      	mov	r3, r2
 801a50a:	00db      	lsls	r3, r3, #3
 801a50c:	1a9b      	subs	r3, r3, r2
 801a50e:	009b      	lsls	r3, r3, #2
 801a510:	4403      	add	r3, r0
 801a512:	3348      	adds	r3, #72	; 0x48
 801a514:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 801a516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a518:	2b00      	cmp	r3, #0
 801a51a:	d113      	bne.n	801a544 <HAL_PCD_IRQHandler+0x31c>
 801a51c:	6879      	ldr	r1, [r7, #4]
 801a51e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a520:	4613      	mov	r3, r2
 801a522:	00db      	lsls	r3, r3, #3
 801a524:	1a9b      	subs	r3, r3, r2
 801a526:	009b      	lsls	r3, r3, #2
 801a528:	440b      	add	r3, r1
 801a52a:	3350      	adds	r3, #80	; 0x50
 801a52c:	681b      	ldr	r3, [r3, #0]
 801a52e:	2b00      	cmp	r3, #0
 801a530:	d108      	bne.n	801a544 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801a532:	687b      	ldr	r3, [r7, #4]
 801a534:	6818      	ldr	r0, [r3, #0]
 801a536:	687b      	ldr	r3, [r7, #4]
 801a538:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801a53c:	461a      	mov	r2, r3
 801a53e:	2101      	movs	r1, #1
 801a540:	f004 ffc4 	bl	801f4cc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 801a544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a546:	b2db      	uxtb	r3, r3
 801a548:	4619      	mov	r1, r3
 801a54a:	6878      	ldr	r0, [r7, #4]
 801a54c:	f008 fa09 	bl	8022962 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 801a550:	693b      	ldr	r3, [r7, #16]
 801a552:	f003 0308 	and.w	r3, r3, #8
 801a556:	2b00      	cmp	r3, #0
 801a558:	d008      	beq.n	801a56c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 801a55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a55c:	015a      	lsls	r2, r3, #5
 801a55e:	69fb      	ldr	r3, [r7, #28]
 801a560:	4413      	add	r3, r2
 801a562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a566:	461a      	mov	r2, r3
 801a568:	2308      	movs	r3, #8
 801a56a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 801a56c:	693b      	ldr	r3, [r7, #16]
 801a56e:	f003 0310 	and.w	r3, r3, #16
 801a572:	2b00      	cmp	r3, #0
 801a574:	d008      	beq.n	801a588 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 801a576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a578:	015a      	lsls	r2, r3, #5
 801a57a:	69fb      	ldr	r3, [r7, #28]
 801a57c:	4413      	add	r3, r2
 801a57e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a582:	461a      	mov	r2, r3
 801a584:	2310      	movs	r3, #16
 801a586:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 801a588:	693b      	ldr	r3, [r7, #16]
 801a58a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a58e:	2b00      	cmp	r3, #0
 801a590:	d008      	beq.n	801a5a4 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 801a592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a594:	015a      	lsls	r2, r3, #5
 801a596:	69fb      	ldr	r3, [r7, #28]
 801a598:	4413      	add	r3, r2
 801a59a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a59e:	461a      	mov	r2, r3
 801a5a0:	2340      	movs	r3, #64	; 0x40
 801a5a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 801a5a4:	693b      	ldr	r3, [r7, #16]
 801a5a6:	f003 0302 	and.w	r3, r3, #2
 801a5aa:	2b00      	cmp	r3, #0
 801a5ac:	d008      	beq.n	801a5c0 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 801a5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5b0:	015a      	lsls	r2, r3, #5
 801a5b2:	69fb      	ldr	r3, [r7, #28]
 801a5b4:	4413      	add	r3, r2
 801a5b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a5ba:	461a      	mov	r2, r3
 801a5bc:	2302      	movs	r3, #2
 801a5be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 801a5c0:	693b      	ldr	r3, [r7, #16]
 801a5c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a5c6:	2b00      	cmp	r3, #0
 801a5c8:	d003      	beq.n	801a5d2 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 801a5ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a5cc:	6878      	ldr	r0, [r7, #4]
 801a5ce:	f000 fc75 	bl	801aebc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 801a5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5d4:	3301      	adds	r3, #1
 801a5d6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 801a5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5da:	085b      	lsrs	r3, r3, #1
 801a5dc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 801a5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5e0:	2b00      	cmp	r3, #0
 801a5e2:	f47f af49 	bne.w	801a478 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 801a5e6:	687b      	ldr	r3, [r7, #4]
 801a5e8:	681b      	ldr	r3, [r3, #0]
 801a5ea:	4618      	mov	r0, r3
 801a5ec:	f004 fea9 	bl	801f342 <USB_ReadInterrupts>
 801a5f0:	4603      	mov	r3, r0
 801a5f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801a5f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a5fa:	d122      	bne.n	801a642 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 801a5fc:	69fb      	ldr	r3, [r7, #28]
 801a5fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a602:	685b      	ldr	r3, [r3, #4]
 801a604:	69fa      	ldr	r2, [r7, #28]
 801a606:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a60a:	f023 0301 	bic.w	r3, r3, #1
 801a60e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 801a610:	687b      	ldr	r3, [r7, #4]
 801a612:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 801a616:	2b01      	cmp	r3, #1
 801a618:	d108      	bne.n	801a62c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 801a61a:	687b      	ldr	r3, [r7, #4]
 801a61c:	2200      	movs	r2, #0
 801a61e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 801a622:	2100      	movs	r1, #0
 801a624:	6878      	ldr	r0, [r7, #4]
 801a626:	f008 fc0b 	bl	8022e40 <HAL_PCDEx_LPM_Callback>
 801a62a:	e002      	b.n	801a632 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 801a62c:	6878      	ldr	r0, [r7, #4]
 801a62e:	f008 fa0f 	bl	8022a50 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 801a632:	687b      	ldr	r3, [r7, #4]
 801a634:	681b      	ldr	r3, [r3, #0]
 801a636:	695a      	ldr	r2, [r3, #20]
 801a638:	687b      	ldr	r3, [r7, #4]
 801a63a:	681b      	ldr	r3, [r3, #0]
 801a63c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 801a640:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 801a642:	687b      	ldr	r3, [r7, #4]
 801a644:	681b      	ldr	r3, [r3, #0]
 801a646:	4618      	mov	r0, r3
 801a648:	f004 fe7b 	bl	801f342 <USB_ReadInterrupts>
 801a64c:	4603      	mov	r3, r0
 801a64e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801a652:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a656:	d112      	bne.n	801a67e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 801a658:	69fb      	ldr	r3, [r7, #28]
 801a65a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a65e:	689b      	ldr	r3, [r3, #8]
 801a660:	f003 0301 	and.w	r3, r3, #1
 801a664:	2b01      	cmp	r3, #1
 801a666:	d102      	bne.n	801a66e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 801a668:	6878      	ldr	r0, [r7, #4]
 801a66a:	f008 f9cb 	bl	8022a04 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	681b      	ldr	r3, [r3, #0]
 801a672:	695a      	ldr	r2, [r3, #20]
 801a674:	687b      	ldr	r3, [r7, #4]
 801a676:	681b      	ldr	r3, [r3, #0]
 801a678:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 801a67c:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 801a67e:	687b      	ldr	r3, [r7, #4]
 801a680:	681b      	ldr	r3, [r3, #0]
 801a682:	4618      	mov	r0, r3
 801a684:	f004 fe5d 	bl	801f342 <USB_ReadInterrupts>
 801a688:	4603      	mov	r3, r0
 801a68a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801a68e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801a692:	d121      	bne.n	801a6d8 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 801a694:	687b      	ldr	r3, [r7, #4]
 801a696:	681b      	ldr	r3, [r3, #0]
 801a698:	695a      	ldr	r2, [r3, #20]
 801a69a:	687b      	ldr	r3, [r7, #4]
 801a69c:	681b      	ldr	r3, [r3, #0]
 801a69e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 801a6a2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 801a6a4:	687b      	ldr	r3, [r7, #4]
 801a6a6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 801a6aa:	2b00      	cmp	r3, #0
 801a6ac:	d111      	bne.n	801a6d2 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 801a6ae:	687b      	ldr	r3, [r7, #4]
 801a6b0:	2201      	movs	r2, #1
 801a6b2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 801a6b6:	687b      	ldr	r3, [r7, #4]
 801a6b8:	681b      	ldr	r3, [r3, #0]
 801a6ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a6bc:	089b      	lsrs	r3, r3, #2
 801a6be:	f003 020f 	and.w	r2, r3, #15
 801a6c2:	687b      	ldr	r3, [r7, #4]
 801a6c4:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 801a6c8:	2101      	movs	r1, #1
 801a6ca:	6878      	ldr	r0, [r7, #4]
 801a6cc:	f008 fbb8 	bl	8022e40 <HAL_PCDEx_LPM_Callback>
 801a6d0:	e002      	b.n	801a6d8 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 801a6d2:	6878      	ldr	r0, [r7, #4]
 801a6d4:	f008 f996 	bl	8022a04 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 801a6d8:	687b      	ldr	r3, [r7, #4]
 801a6da:	681b      	ldr	r3, [r3, #0]
 801a6dc:	4618      	mov	r0, r3
 801a6de:	f004 fe30 	bl	801f342 <USB_ReadInterrupts>
 801a6e2:	4603      	mov	r3, r0
 801a6e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801a6e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a6ec:	f040 80c7 	bne.w	801a87e <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 801a6f0:	69fb      	ldr	r3, [r7, #28]
 801a6f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a6f6:	685b      	ldr	r3, [r3, #4]
 801a6f8:	69fa      	ldr	r2, [r7, #28]
 801a6fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a6fe:	f023 0301 	bic.w	r3, r3, #1
 801a702:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	681b      	ldr	r3, [r3, #0]
 801a708:	2110      	movs	r1, #16
 801a70a:	4618      	mov	r0, r3
 801a70c:	f003 feca 	bl	801e4a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801a710:	2300      	movs	r3, #0
 801a712:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a714:	e056      	b.n	801a7c4 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 801a716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a718:	015a      	lsls	r2, r3, #5
 801a71a:	69fb      	ldr	r3, [r7, #28]
 801a71c:	4413      	add	r3, r2
 801a71e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a722:	461a      	mov	r2, r3
 801a724:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801a728:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801a72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a72c:	015a      	lsls	r2, r3, #5
 801a72e:	69fb      	ldr	r3, [r7, #28]
 801a730:	4413      	add	r3, r2
 801a732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a736:	681b      	ldr	r3, [r3, #0]
 801a738:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a73a:	0151      	lsls	r1, r2, #5
 801a73c:	69fa      	ldr	r2, [r7, #28]
 801a73e:	440a      	add	r2, r1
 801a740:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a744:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801a748:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801a74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a74c:	015a      	lsls	r2, r3, #5
 801a74e:	69fb      	ldr	r3, [r7, #28]
 801a750:	4413      	add	r3, r2
 801a752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a756:	681b      	ldr	r3, [r3, #0]
 801a758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a75a:	0151      	lsls	r1, r2, #5
 801a75c:	69fa      	ldr	r2, [r7, #28]
 801a75e:	440a      	add	r2, r1
 801a760:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a764:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801a768:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 801a76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a76c:	015a      	lsls	r2, r3, #5
 801a76e:	69fb      	ldr	r3, [r7, #28]
 801a770:	4413      	add	r3, r2
 801a772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a776:	461a      	mov	r2, r3
 801a778:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801a77c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801a77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a780:	015a      	lsls	r2, r3, #5
 801a782:	69fb      	ldr	r3, [r7, #28]
 801a784:	4413      	add	r3, r2
 801a786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a78a:	681b      	ldr	r3, [r3, #0]
 801a78c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a78e:	0151      	lsls	r1, r2, #5
 801a790:	69fa      	ldr	r2, [r7, #28]
 801a792:	440a      	add	r2, r1
 801a794:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a798:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801a79c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801a79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7a0:	015a      	lsls	r2, r3, #5
 801a7a2:	69fb      	ldr	r3, [r7, #28]
 801a7a4:	4413      	add	r3, r2
 801a7a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a7aa:	681b      	ldr	r3, [r3, #0]
 801a7ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a7ae:	0151      	lsls	r1, r2, #5
 801a7b0:	69fa      	ldr	r2, [r7, #28]
 801a7b2:	440a      	add	r2, r1
 801a7b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a7b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801a7bc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801a7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7c0:	3301      	adds	r3, #1
 801a7c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a7c4:	687b      	ldr	r3, [r7, #4]
 801a7c6:	685b      	ldr	r3, [r3, #4]
 801a7c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a7ca:	429a      	cmp	r2, r3
 801a7cc:	d3a3      	bcc.n	801a716 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 801a7ce:	69fb      	ldr	r3, [r7, #28]
 801a7d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a7d4:	69db      	ldr	r3, [r3, #28]
 801a7d6:	69fa      	ldr	r2, [r7, #28]
 801a7d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a7dc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 801a7e0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 801a7e2:	687b      	ldr	r3, [r7, #4]
 801a7e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a7e6:	2b00      	cmp	r3, #0
 801a7e8:	d016      	beq.n	801a818 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 801a7ea:	69fb      	ldr	r3, [r7, #28]
 801a7ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a7f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a7f4:	69fa      	ldr	r2, [r7, #28]
 801a7f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a7fa:	f043 030b 	orr.w	r3, r3, #11
 801a7fe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 801a802:	69fb      	ldr	r3, [r7, #28]
 801a804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a80a:	69fa      	ldr	r2, [r7, #28]
 801a80c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a810:	f043 030b 	orr.w	r3, r3, #11
 801a814:	6453      	str	r3, [r2, #68]	; 0x44
 801a816:	e015      	b.n	801a844 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 801a818:	69fb      	ldr	r3, [r7, #28]
 801a81a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a81e:	695b      	ldr	r3, [r3, #20]
 801a820:	69fa      	ldr	r2, [r7, #28]
 801a822:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a826:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a82a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 801a82e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 801a830:	69fb      	ldr	r3, [r7, #28]
 801a832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a836:	691b      	ldr	r3, [r3, #16]
 801a838:	69fa      	ldr	r2, [r7, #28]
 801a83a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a83e:	f043 030b 	orr.w	r3, r3, #11
 801a842:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 801a844:	69fb      	ldr	r3, [r7, #28]
 801a846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a84a:	681b      	ldr	r3, [r3, #0]
 801a84c:	69fa      	ldr	r2, [r7, #28]
 801a84e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a852:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801a856:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 801a858:	687b      	ldr	r3, [r7, #4]
 801a85a:	6818      	ldr	r0, [r3, #0]
 801a85c:	687b      	ldr	r3, [r7, #4]
 801a85e:	691b      	ldr	r3, [r3, #16]
 801a860:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 801a862:	687b      	ldr	r3, [r7, #4]
 801a864:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 801a868:	461a      	mov	r2, r3
 801a86a:	f004 fe2f 	bl	801f4cc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 801a86e:	687b      	ldr	r3, [r7, #4]
 801a870:	681b      	ldr	r3, [r3, #0]
 801a872:	695a      	ldr	r2, [r3, #20]
 801a874:	687b      	ldr	r3, [r7, #4]
 801a876:	681b      	ldr	r3, [r3, #0]
 801a878:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 801a87c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 801a87e:	687b      	ldr	r3, [r7, #4]
 801a880:	681b      	ldr	r3, [r3, #0]
 801a882:	4618      	mov	r0, r3
 801a884:	f004 fd5d 	bl	801f342 <USB_ReadInterrupts>
 801a888:	4603      	mov	r3, r0
 801a88a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a88e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801a892:	d124      	bne.n	801a8de <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 801a894:	687b      	ldr	r3, [r7, #4]
 801a896:	681b      	ldr	r3, [r3, #0]
 801a898:	4618      	mov	r0, r3
 801a89a:	f004 fdf3 	bl	801f484 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 801a89e:	687b      	ldr	r3, [r7, #4]
 801a8a0:	681b      	ldr	r3, [r3, #0]
 801a8a2:	4618      	mov	r0, r3
 801a8a4:	f003 fe5b 	bl	801e55e <USB_GetDevSpeed>
 801a8a8:	4603      	mov	r3, r0
 801a8aa:	461a      	mov	r2, r3
 801a8ac:	687b      	ldr	r3, [r7, #4]
 801a8ae:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 801a8b0:	687b      	ldr	r3, [r7, #4]
 801a8b2:	681c      	ldr	r4, [r3, #0]
 801a8b4:	f000 fe94 	bl	801b5e0 <HAL_RCC_GetHCLKFreq>
 801a8b8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 801a8ba:	687b      	ldr	r3, [r7, #4]
 801a8bc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 801a8be:	b2db      	uxtb	r3, r3
 801a8c0:	461a      	mov	r2, r3
 801a8c2:	4620      	mov	r0, r4
 801a8c4:	f003 fb80 	bl	801dfc8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 801a8c8:	6878      	ldr	r0, [r7, #4]
 801a8ca:	f008 f872 	bl	80229b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 801a8ce:	687b      	ldr	r3, [r7, #4]
 801a8d0:	681b      	ldr	r3, [r3, #0]
 801a8d2:	695a      	ldr	r2, [r3, #20]
 801a8d4:	687b      	ldr	r3, [r7, #4]
 801a8d6:	681b      	ldr	r3, [r3, #0]
 801a8d8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 801a8dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 801a8de:	687b      	ldr	r3, [r7, #4]
 801a8e0:	681b      	ldr	r3, [r3, #0]
 801a8e2:	4618      	mov	r0, r3
 801a8e4:	f004 fd2d 	bl	801f342 <USB_ReadInterrupts>
 801a8e8:	4603      	mov	r3, r0
 801a8ea:	f003 0308 	and.w	r3, r3, #8
 801a8ee:	2b08      	cmp	r3, #8
 801a8f0:	d10a      	bne.n	801a908 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 801a8f2:	6878      	ldr	r0, [r7, #4]
 801a8f4:	f008 f84f 	bl	8022996 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 801a8f8:	687b      	ldr	r3, [r7, #4]
 801a8fa:	681b      	ldr	r3, [r3, #0]
 801a8fc:	695a      	ldr	r2, [r3, #20]
 801a8fe:	687b      	ldr	r3, [r7, #4]
 801a900:	681b      	ldr	r3, [r3, #0]
 801a902:	f002 0208 	and.w	r2, r2, #8
 801a906:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 801a908:	687b      	ldr	r3, [r7, #4]
 801a90a:	681b      	ldr	r3, [r3, #0]
 801a90c:	4618      	mov	r0, r3
 801a90e:	f004 fd18 	bl	801f342 <USB_ReadInterrupts>
 801a912:	4603      	mov	r3, r0
 801a914:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801a918:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801a91c:	d10f      	bne.n	801a93e <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 801a91e:	2300      	movs	r3, #0
 801a920:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 801a922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a924:	b2db      	uxtb	r3, r3
 801a926:	4619      	mov	r1, r3
 801a928:	6878      	ldr	r0, [r7, #4]
 801a92a:	f008 f8b1 	bl	8022a90 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 801a92e:	687b      	ldr	r3, [r7, #4]
 801a930:	681b      	ldr	r3, [r3, #0]
 801a932:	695a      	ldr	r2, [r3, #20]
 801a934:	687b      	ldr	r3, [r7, #4]
 801a936:	681b      	ldr	r3, [r3, #0]
 801a938:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 801a93c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 801a93e:	687b      	ldr	r3, [r7, #4]
 801a940:	681b      	ldr	r3, [r3, #0]
 801a942:	4618      	mov	r0, r3
 801a944:	f004 fcfd 	bl	801f342 <USB_ReadInterrupts>
 801a948:	4603      	mov	r3, r0
 801a94a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801a94e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801a952:	d10f      	bne.n	801a974 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 801a954:	2300      	movs	r3, #0
 801a956:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 801a958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a95a:	b2db      	uxtb	r3, r3
 801a95c:	4619      	mov	r1, r3
 801a95e:	6878      	ldr	r0, [r7, #4]
 801a960:	f008 f884 	bl	8022a6c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 801a964:	687b      	ldr	r3, [r7, #4]
 801a966:	681b      	ldr	r3, [r3, #0]
 801a968:	695a      	ldr	r2, [r3, #20]
 801a96a:	687b      	ldr	r3, [r7, #4]
 801a96c:	681b      	ldr	r3, [r3, #0]
 801a96e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 801a972:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 801a974:	687b      	ldr	r3, [r7, #4]
 801a976:	681b      	ldr	r3, [r3, #0]
 801a978:	4618      	mov	r0, r3
 801a97a:	f004 fce2 	bl	801f342 <USB_ReadInterrupts>
 801a97e:	4603      	mov	r3, r0
 801a980:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801a984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a988:	d10a      	bne.n	801a9a0 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 801a98a:	6878      	ldr	r0, [r7, #4]
 801a98c:	f008 f892 	bl	8022ab4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 801a990:	687b      	ldr	r3, [r7, #4]
 801a992:	681b      	ldr	r3, [r3, #0]
 801a994:	695a      	ldr	r2, [r3, #20]
 801a996:	687b      	ldr	r3, [r7, #4]
 801a998:	681b      	ldr	r3, [r3, #0]
 801a99a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 801a99e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 801a9a0:	687b      	ldr	r3, [r7, #4]
 801a9a2:	681b      	ldr	r3, [r3, #0]
 801a9a4:	4618      	mov	r0, r3
 801a9a6:	f004 fccc 	bl	801f342 <USB_ReadInterrupts>
 801a9aa:	4603      	mov	r3, r0
 801a9ac:	f003 0304 	and.w	r3, r3, #4
 801a9b0:	2b04      	cmp	r3, #4
 801a9b2:	d115      	bne.n	801a9e0 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 801a9b4:	687b      	ldr	r3, [r7, #4]
 801a9b6:	681b      	ldr	r3, [r3, #0]
 801a9b8:	685b      	ldr	r3, [r3, #4]
 801a9ba:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 801a9bc:	69bb      	ldr	r3, [r7, #24]
 801a9be:	f003 0304 	and.w	r3, r3, #4
 801a9c2:	2b00      	cmp	r3, #0
 801a9c4:	d002      	beq.n	801a9cc <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 801a9c6:	6878      	ldr	r0, [r7, #4]
 801a9c8:	f008 f882 	bl	8022ad0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 801a9cc:	687b      	ldr	r3, [r7, #4]
 801a9ce:	681b      	ldr	r3, [r3, #0]
 801a9d0:	6859      	ldr	r1, [r3, #4]
 801a9d2:	687b      	ldr	r3, [r7, #4]
 801a9d4:	681b      	ldr	r3, [r3, #0]
 801a9d6:	69ba      	ldr	r2, [r7, #24]
 801a9d8:	430a      	orrs	r2, r1
 801a9da:	605a      	str	r2, [r3, #4]
 801a9dc:	e000      	b.n	801a9e0 <HAL_PCD_IRQHandler+0x7b8>
      return;
 801a9de:	bf00      	nop
    }
  }
}
 801a9e0:	3734      	adds	r7, #52	; 0x34
 801a9e2:	46bd      	mov	sp, r7
 801a9e4:	bd90      	pop	{r4, r7, pc}

0801a9e6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 801a9e6:	b580      	push	{r7, lr}
 801a9e8:	b082      	sub	sp, #8
 801a9ea:	af00      	add	r7, sp, #0
 801a9ec:	6078      	str	r0, [r7, #4]
 801a9ee:	460b      	mov	r3, r1
 801a9f0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 801a9f2:	687b      	ldr	r3, [r7, #4]
 801a9f4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801a9f8:	2b01      	cmp	r3, #1
 801a9fa:	d101      	bne.n	801aa00 <HAL_PCD_SetAddress+0x1a>
 801a9fc:	2302      	movs	r3, #2
 801a9fe:	e013      	b.n	801aa28 <HAL_PCD_SetAddress+0x42>
 801aa00:	687b      	ldr	r3, [r7, #4]
 801aa02:	2201      	movs	r2, #1
 801aa04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 801aa08:	687b      	ldr	r3, [r7, #4]
 801aa0a:	78fa      	ldrb	r2, [r7, #3]
 801aa0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 801aa10:	687b      	ldr	r3, [r7, #4]
 801aa12:	681b      	ldr	r3, [r3, #0]
 801aa14:	78fa      	ldrb	r2, [r7, #3]
 801aa16:	4611      	mov	r1, r2
 801aa18:	4618      	mov	r0, r3
 801aa1a:	f004 fc2a 	bl	801f272 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 801aa1e:	687b      	ldr	r3, [r7, #4]
 801aa20:	2200      	movs	r2, #0
 801aa22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801aa26:	2300      	movs	r3, #0
}
 801aa28:	4618      	mov	r0, r3
 801aa2a:	3708      	adds	r7, #8
 801aa2c:	46bd      	mov	sp, r7
 801aa2e:	bd80      	pop	{r7, pc}

0801aa30 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 801aa30:	b580      	push	{r7, lr}
 801aa32:	b084      	sub	sp, #16
 801aa34:	af00      	add	r7, sp, #0
 801aa36:	6078      	str	r0, [r7, #4]
 801aa38:	4608      	mov	r0, r1
 801aa3a:	4611      	mov	r1, r2
 801aa3c:	461a      	mov	r2, r3
 801aa3e:	4603      	mov	r3, r0
 801aa40:	70fb      	strb	r3, [r7, #3]
 801aa42:	460b      	mov	r3, r1
 801aa44:	803b      	strh	r3, [r7, #0]
 801aa46:	4613      	mov	r3, r2
 801aa48:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 801aa4a:	2300      	movs	r3, #0
 801aa4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801aa4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801aa52:	2b00      	cmp	r3, #0
 801aa54:	da0f      	bge.n	801aa76 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801aa56:	78fb      	ldrb	r3, [r7, #3]
 801aa58:	f003 020f 	and.w	r2, r3, #15
 801aa5c:	4613      	mov	r3, r2
 801aa5e:	00db      	lsls	r3, r3, #3
 801aa60:	1a9b      	subs	r3, r3, r2
 801aa62:	009b      	lsls	r3, r3, #2
 801aa64:	3338      	adds	r3, #56	; 0x38
 801aa66:	687a      	ldr	r2, [r7, #4]
 801aa68:	4413      	add	r3, r2
 801aa6a:	3304      	adds	r3, #4
 801aa6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801aa6e:	68fb      	ldr	r3, [r7, #12]
 801aa70:	2201      	movs	r2, #1
 801aa72:	705a      	strb	r2, [r3, #1]
 801aa74:	e00f      	b.n	801aa96 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801aa76:	78fb      	ldrb	r3, [r7, #3]
 801aa78:	f003 020f 	and.w	r2, r3, #15
 801aa7c:	4613      	mov	r3, r2
 801aa7e:	00db      	lsls	r3, r3, #3
 801aa80:	1a9b      	subs	r3, r3, r2
 801aa82:	009b      	lsls	r3, r3, #2
 801aa84:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801aa88:	687a      	ldr	r2, [r7, #4]
 801aa8a:	4413      	add	r3, r2
 801aa8c:	3304      	adds	r3, #4
 801aa8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801aa90:	68fb      	ldr	r3, [r7, #12]
 801aa92:	2200      	movs	r2, #0
 801aa94:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 801aa96:	78fb      	ldrb	r3, [r7, #3]
 801aa98:	f003 030f 	and.w	r3, r3, #15
 801aa9c:	b2da      	uxtb	r2, r3
 801aa9e:	68fb      	ldr	r3, [r7, #12]
 801aaa0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 801aaa2:	883a      	ldrh	r2, [r7, #0]
 801aaa4:	68fb      	ldr	r3, [r7, #12]
 801aaa6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 801aaa8:	68fb      	ldr	r3, [r7, #12]
 801aaaa:	78ba      	ldrb	r2, [r7, #2]
 801aaac:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 801aaae:	68fb      	ldr	r3, [r7, #12]
 801aab0:	785b      	ldrb	r3, [r3, #1]
 801aab2:	2b00      	cmp	r3, #0
 801aab4:	d004      	beq.n	801aac0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 801aab6:	68fb      	ldr	r3, [r7, #12]
 801aab8:	781b      	ldrb	r3, [r3, #0]
 801aaba:	b29a      	uxth	r2, r3
 801aabc:	68fb      	ldr	r3, [r7, #12]
 801aabe:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 801aac0:	78bb      	ldrb	r3, [r7, #2]
 801aac2:	2b02      	cmp	r3, #2
 801aac4:	d102      	bne.n	801aacc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 801aac6:	68fb      	ldr	r3, [r7, #12]
 801aac8:	2200      	movs	r2, #0
 801aaca:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 801aacc:	687b      	ldr	r3, [r7, #4]
 801aace:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801aad2:	2b01      	cmp	r3, #1
 801aad4:	d101      	bne.n	801aada <HAL_PCD_EP_Open+0xaa>
 801aad6:	2302      	movs	r3, #2
 801aad8:	e00e      	b.n	801aaf8 <HAL_PCD_EP_Open+0xc8>
 801aada:	687b      	ldr	r3, [r7, #4]
 801aadc:	2201      	movs	r2, #1
 801aade:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 801aae2:	687b      	ldr	r3, [r7, #4]
 801aae4:	681b      	ldr	r3, [r3, #0]
 801aae6:	68f9      	ldr	r1, [r7, #12]
 801aae8:	4618      	mov	r0, r3
 801aaea:	f003 fd5d 	bl	801e5a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801aaee:	687b      	ldr	r3, [r7, #4]
 801aaf0:	2200      	movs	r2, #0
 801aaf2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 801aaf6:	7afb      	ldrb	r3, [r7, #11]
}
 801aaf8:	4618      	mov	r0, r3
 801aafa:	3710      	adds	r7, #16
 801aafc:	46bd      	mov	sp, r7
 801aafe:	bd80      	pop	{r7, pc}

0801ab00 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801ab00:	b580      	push	{r7, lr}
 801ab02:	b084      	sub	sp, #16
 801ab04:	af00      	add	r7, sp, #0
 801ab06:	6078      	str	r0, [r7, #4]
 801ab08:	460b      	mov	r3, r1
 801ab0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801ab0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ab10:	2b00      	cmp	r3, #0
 801ab12:	da0f      	bge.n	801ab34 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801ab14:	78fb      	ldrb	r3, [r7, #3]
 801ab16:	f003 020f 	and.w	r2, r3, #15
 801ab1a:	4613      	mov	r3, r2
 801ab1c:	00db      	lsls	r3, r3, #3
 801ab1e:	1a9b      	subs	r3, r3, r2
 801ab20:	009b      	lsls	r3, r3, #2
 801ab22:	3338      	adds	r3, #56	; 0x38
 801ab24:	687a      	ldr	r2, [r7, #4]
 801ab26:	4413      	add	r3, r2
 801ab28:	3304      	adds	r3, #4
 801ab2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801ab2c:	68fb      	ldr	r3, [r7, #12]
 801ab2e:	2201      	movs	r2, #1
 801ab30:	705a      	strb	r2, [r3, #1]
 801ab32:	e00f      	b.n	801ab54 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801ab34:	78fb      	ldrb	r3, [r7, #3]
 801ab36:	f003 020f 	and.w	r2, r3, #15
 801ab3a:	4613      	mov	r3, r2
 801ab3c:	00db      	lsls	r3, r3, #3
 801ab3e:	1a9b      	subs	r3, r3, r2
 801ab40:	009b      	lsls	r3, r3, #2
 801ab42:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801ab46:	687a      	ldr	r2, [r7, #4]
 801ab48:	4413      	add	r3, r2
 801ab4a:	3304      	adds	r3, #4
 801ab4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801ab4e:	68fb      	ldr	r3, [r7, #12]
 801ab50:	2200      	movs	r2, #0
 801ab52:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 801ab54:	78fb      	ldrb	r3, [r7, #3]
 801ab56:	f003 030f 	and.w	r3, r3, #15
 801ab5a:	b2da      	uxtb	r2, r3
 801ab5c:	68fb      	ldr	r3, [r7, #12]
 801ab5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801ab60:	687b      	ldr	r3, [r7, #4]
 801ab62:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801ab66:	2b01      	cmp	r3, #1
 801ab68:	d101      	bne.n	801ab6e <HAL_PCD_EP_Close+0x6e>
 801ab6a:	2302      	movs	r3, #2
 801ab6c:	e00e      	b.n	801ab8c <HAL_PCD_EP_Close+0x8c>
 801ab6e:	687b      	ldr	r3, [r7, #4]
 801ab70:	2201      	movs	r2, #1
 801ab72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 801ab76:	687b      	ldr	r3, [r7, #4]
 801ab78:	681b      	ldr	r3, [r3, #0]
 801ab7a:	68f9      	ldr	r1, [r7, #12]
 801ab7c:	4618      	mov	r0, r3
 801ab7e:	f003 fd9b 	bl	801e6b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801ab82:	687b      	ldr	r3, [r7, #4]
 801ab84:	2200      	movs	r2, #0
 801ab86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 801ab8a:	2300      	movs	r3, #0
}
 801ab8c:	4618      	mov	r0, r3
 801ab8e:	3710      	adds	r7, #16
 801ab90:	46bd      	mov	sp, r7
 801ab92:	bd80      	pop	{r7, pc}

0801ab94 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801ab94:	b580      	push	{r7, lr}
 801ab96:	b086      	sub	sp, #24
 801ab98:	af00      	add	r7, sp, #0
 801ab9a:	60f8      	str	r0, [r7, #12]
 801ab9c:	607a      	str	r2, [r7, #4]
 801ab9e:	603b      	str	r3, [r7, #0]
 801aba0:	460b      	mov	r3, r1
 801aba2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801aba4:	7afb      	ldrb	r3, [r7, #11]
 801aba6:	f003 020f 	and.w	r2, r3, #15
 801abaa:	4613      	mov	r3, r2
 801abac:	00db      	lsls	r3, r3, #3
 801abae:	1a9b      	subs	r3, r3, r2
 801abb0:	009b      	lsls	r3, r3, #2
 801abb2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801abb6:	68fa      	ldr	r2, [r7, #12]
 801abb8:	4413      	add	r3, r2
 801abba:	3304      	adds	r3, #4
 801abbc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801abbe:	697b      	ldr	r3, [r7, #20]
 801abc0:	687a      	ldr	r2, [r7, #4]
 801abc2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 801abc4:	697b      	ldr	r3, [r7, #20]
 801abc6:	683a      	ldr	r2, [r7, #0]
 801abc8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 801abca:	697b      	ldr	r3, [r7, #20]
 801abcc:	2200      	movs	r2, #0
 801abce:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 801abd0:	697b      	ldr	r3, [r7, #20]
 801abd2:	2200      	movs	r2, #0
 801abd4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801abd6:	7afb      	ldrb	r3, [r7, #11]
 801abd8:	f003 030f 	and.w	r3, r3, #15
 801abdc:	b2da      	uxtb	r2, r3
 801abde:	697b      	ldr	r3, [r7, #20]
 801abe0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 801abe2:	68fb      	ldr	r3, [r7, #12]
 801abe4:	691b      	ldr	r3, [r3, #16]
 801abe6:	2b01      	cmp	r3, #1
 801abe8:	d102      	bne.n	801abf0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 801abea:	687a      	ldr	r2, [r7, #4]
 801abec:	697b      	ldr	r3, [r7, #20]
 801abee:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801abf0:	7afb      	ldrb	r3, [r7, #11]
 801abf2:	f003 030f 	and.w	r3, r3, #15
 801abf6:	2b00      	cmp	r3, #0
 801abf8:	d109      	bne.n	801ac0e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801abfa:	68fb      	ldr	r3, [r7, #12]
 801abfc:	6818      	ldr	r0, [r3, #0]
 801abfe:	68fb      	ldr	r3, [r7, #12]
 801ac00:	691b      	ldr	r3, [r3, #16]
 801ac02:	b2db      	uxtb	r3, r3
 801ac04:	461a      	mov	r2, r3
 801ac06:	6979      	ldr	r1, [r7, #20]
 801ac08:	f004 f876 	bl	801ecf8 <USB_EP0StartXfer>
 801ac0c:	e008      	b.n	801ac20 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801ac0e:	68fb      	ldr	r3, [r7, #12]
 801ac10:	6818      	ldr	r0, [r3, #0]
 801ac12:	68fb      	ldr	r3, [r7, #12]
 801ac14:	691b      	ldr	r3, [r3, #16]
 801ac16:	b2db      	uxtb	r3, r3
 801ac18:	461a      	mov	r2, r3
 801ac1a:	6979      	ldr	r1, [r7, #20]
 801ac1c:	f003 fe28 	bl	801e870 <USB_EPStartXfer>
  }

  return HAL_OK;
 801ac20:	2300      	movs	r3, #0
}
 801ac22:	4618      	mov	r0, r3
 801ac24:	3718      	adds	r7, #24
 801ac26:	46bd      	mov	sp, r7
 801ac28:	bd80      	pop	{r7, pc}

0801ac2a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801ac2a:	b480      	push	{r7}
 801ac2c:	b083      	sub	sp, #12
 801ac2e:	af00      	add	r7, sp, #0
 801ac30:	6078      	str	r0, [r7, #4]
 801ac32:	460b      	mov	r3, r1
 801ac34:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 801ac36:	78fb      	ldrb	r3, [r7, #3]
 801ac38:	f003 020f 	and.w	r2, r3, #15
 801ac3c:	6879      	ldr	r1, [r7, #4]
 801ac3e:	4613      	mov	r3, r2
 801ac40:	00db      	lsls	r3, r3, #3
 801ac42:	1a9b      	subs	r3, r3, r2
 801ac44:	009b      	lsls	r3, r3, #2
 801ac46:	440b      	add	r3, r1
 801ac48:	f503 7305 	add.w	r3, r3, #532	; 0x214
 801ac4c:	681b      	ldr	r3, [r3, #0]
}
 801ac4e:	4618      	mov	r0, r3
 801ac50:	370c      	adds	r7, #12
 801ac52:	46bd      	mov	sp, r7
 801ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac58:	4770      	bx	lr

0801ac5a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801ac5a:	b580      	push	{r7, lr}
 801ac5c:	b086      	sub	sp, #24
 801ac5e:	af00      	add	r7, sp, #0
 801ac60:	60f8      	str	r0, [r7, #12]
 801ac62:	607a      	str	r2, [r7, #4]
 801ac64:	603b      	str	r3, [r7, #0]
 801ac66:	460b      	mov	r3, r1
 801ac68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801ac6a:	7afb      	ldrb	r3, [r7, #11]
 801ac6c:	f003 020f 	and.w	r2, r3, #15
 801ac70:	4613      	mov	r3, r2
 801ac72:	00db      	lsls	r3, r3, #3
 801ac74:	1a9b      	subs	r3, r3, r2
 801ac76:	009b      	lsls	r3, r3, #2
 801ac78:	3338      	adds	r3, #56	; 0x38
 801ac7a:	68fa      	ldr	r2, [r7, #12]
 801ac7c:	4413      	add	r3, r2
 801ac7e:	3304      	adds	r3, #4
 801ac80:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801ac82:	697b      	ldr	r3, [r7, #20]
 801ac84:	687a      	ldr	r2, [r7, #4]
 801ac86:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 801ac88:	697b      	ldr	r3, [r7, #20]
 801ac8a:	683a      	ldr	r2, [r7, #0]
 801ac8c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 801ac8e:	697b      	ldr	r3, [r7, #20]
 801ac90:	2200      	movs	r2, #0
 801ac92:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 801ac94:	697b      	ldr	r3, [r7, #20]
 801ac96:	2201      	movs	r2, #1
 801ac98:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801ac9a:	7afb      	ldrb	r3, [r7, #11]
 801ac9c:	f003 030f 	and.w	r3, r3, #15
 801aca0:	b2da      	uxtb	r2, r3
 801aca2:	697b      	ldr	r3, [r7, #20]
 801aca4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 801aca6:	68fb      	ldr	r3, [r7, #12]
 801aca8:	691b      	ldr	r3, [r3, #16]
 801acaa:	2b01      	cmp	r3, #1
 801acac:	d102      	bne.n	801acb4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 801acae:	687a      	ldr	r2, [r7, #4]
 801acb0:	697b      	ldr	r3, [r7, #20]
 801acb2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801acb4:	7afb      	ldrb	r3, [r7, #11]
 801acb6:	f003 030f 	and.w	r3, r3, #15
 801acba:	2b00      	cmp	r3, #0
 801acbc:	d109      	bne.n	801acd2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801acbe:	68fb      	ldr	r3, [r7, #12]
 801acc0:	6818      	ldr	r0, [r3, #0]
 801acc2:	68fb      	ldr	r3, [r7, #12]
 801acc4:	691b      	ldr	r3, [r3, #16]
 801acc6:	b2db      	uxtb	r3, r3
 801acc8:	461a      	mov	r2, r3
 801acca:	6979      	ldr	r1, [r7, #20]
 801accc:	f004 f814 	bl	801ecf8 <USB_EP0StartXfer>
 801acd0:	e008      	b.n	801ace4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801acd2:	68fb      	ldr	r3, [r7, #12]
 801acd4:	6818      	ldr	r0, [r3, #0]
 801acd6:	68fb      	ldr	r3, [r7, #12]
 801acd8:	691b      	ldr	r3, [r3, #16]
 801acda:	b2db      	uxtb	r3, r3
 801acdc:	461a      	mov	r2, r3
 801acde:	6979      	ldr	r1, [r7, #20]
 801ace0:	f003 fdc6 	bl	801e870 <USB_EPStartXfer>
  }

  return HAL_OK;
 801ace4:	2300      	movs	r3, #0
}
 801ace6:	4618      	mov	r0, r3
 801ace8:	3718      	adds	r7, #24
 801acea:	46bd      	mov	sp, r7
 801acec:	bd80      	pop	{r7, pc}

0801acee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801acee:	b580      	push	{r7, lr}
 801acf0:	b084      	sub	sp, #16
 801acf2:	af00      	add	r7, sp, #0
 801acf4:	6078      	str	r0, [r7, #4]
 801acf6:	460b      	mov	r3, r1
 801acf8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 801acfa:	78fb      	ldrb	r3, [r7, #3]
 801acfc:	f003 020f 	and.w	r2, r3, #15
 801ad00:	687b      	ldr	r3, [r7, #4]
 801ad02:	685b      	ldr	r3, [r3, #4]
 801ad04:	429a      	cmp	r2, r3
 801ad06:	d901      	bls.n	801ad0c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 801ad08:	2301      	movs	r3, #1
 801ad0a:	e050      	b.n	801adae <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801ad0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ad10:	2b00      	cmp	r3, #0
 801ad12:	da0f      	bge.n	801ad34 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801ad14:	78fb      	ldrb	r3, [r7, #3]
 801ad16:	f003 020f 	and.w	r2, r3, #15
 801ad1a:	4613      	mov	r3, r2
 801ad1c:	00db      	lsls	r3, r3, #3
 801ad1e:	1a9b      	subs	r3, r3, r2
 801ad20:	009b      	lsls	r3, r3, #2
 801ad22:	3338      	adds	r3, #56	; 0x38
 801ad24:	687a      	ldr	r2, [r7, #4]
 801ad26:	4413      	add	r3, r2
 801ad28:	3304      	adds	r3, #4
 801ad2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801ad2c:	68fb      	ldr	r3, [r7, #12]
 801ad2e:	2201      	movs	r2, #1
 801ad30:	705a      	strb	r2, [r3, #1]
 801ad32:	e00d      	b.n	801ad50 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801ad34:	78fa      	ldrb	r2, [r7, #3]
 801ad36:	4613      	mov	r3, r2
 801ad38:	00db      	lsls	r3, r3, #3
 801ad3a:	1a9b      	subs	r3, r3, r2
 801ad3c:	009b      	lsls	r3, r3, #2
 801ad3e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801ad42:	687a      	ldr	r2, [r7, #4]
 801ad44:	4413      	add	r3, r2
 801ad46:	3304      	adds	r3, #4
 801ad48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801ad4a:	68fb      	ldr	r3, [r7, #12]
 801ad4c:	2200      	movs	r2, #0
 801ad4e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 801ad50:	68fb      	ldr	r3, [r7, #12]
 801ad52:	2201      	movs	r2, #1
 801ad54:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801ad56:	78fb      	ldrb	r3, [r7, #3]
 801ad58:	f003 030f 	and.w	r3, r3, #15
 801ad5c:	b2da      	uxtb	r2, r3
 801ad5e:	68fb      	ldr	r3, [r7, #12]
 801ad60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801ad62:	687b      	ldr	r3, [r7, #4]
 801ad64:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801ad68:	2b01      	cmp	r3, #1
 801ad6a:	d101      	bne.n	801ad70 <HAL_PCD_EP_SetStall+0x82>
 801ad6c:	2302      	movs	r3, #2
 801ad6e:	e01e      	b.n	801adae <HAL_PCD_EP_SetStall+0xc0>
 801ad70:	687b      	ldr	r3, [r7, #4]
 801ad72:	2201      	movs	r2, #1
 801ad74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 801ad78:	687b      	ldr	r3, [r7, #4]
 801ad7a:	681b      	ldr	r3, [r3, #0]
 801ad7c:	68f9      	ldr	r1, [r7, #12]
 801ad7e:	4618      	mov	r0, r3
 801ad80:	f004 f9a3 	bl	801f0ca <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801ad84:	78fb      	ldrb	r3, [r7, #3]
 801ad86:	f003 030f 	and.w	r3, r3, #15
 801ad8a:	2b00      	cmp	r3, #0
 801ad8c:	d10a      	bne.n	801ada4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 801ad8e:	687b      	ldr	r3, [r7, #4]
 801ad90:	6818      	ldr	r0, [r3, #0]
 801ad92:	687b      	ldr	r3, [r7, #4]
 801ad94:	691b      	ldr	r3, [r3, #16]
 801ad96:	b2d9      	uxtb	r1, r3
 801ad98:	687b      	ldr	r3, [r7, #4]
 801ad9a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801ad9e:	461a      	mov	r2, r3
 801ada0:	f004 fb94 	bl	801f4cc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 801ada4:	687b      	ldr	r3, [r7, #4]
 801ada6:	2200      	movs	r2, #0
 801ada8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801adac:	2300      	movs	r3, #0
}
 801adae:	4618      	mov	r0, r3
 801adb0:	3710      	adds	r7, #16
 801adb2:	46bd      	mov	sp, r7
 801adb4:	bd80      	pop	{r7, pc}

0801adb6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801adb6:	b580      	push	{r7, lr}
 801adb8:	b084      	sub	sp, #16
 801adba:	af00      	add	r7, sp, #0
 801adbc:	6078      	str	r0, [r7, #4]
 801adbe:	460b      	mov	r3, r1
 801adc0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 801adc2:	78fb      	ldrb	r3, [r7, #3]
 801adc4:	f003 020f 	and.w	r2, r3, #15
 801adc8:	687b      	ldr	r3, [r7, #4]
 801adca:	685b      	ldr	r3, [r3, #4]
 801adcc:	429a      	cmp	r2, r3
 801adce:	d901      	bls.n	801add4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 801add0:	2301      	movs	r3, #1
 801add2:	e042      	b.n	801ae5a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801add4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801add8:	2b00      	cmp	r3, #0
 801adda:	da0f      	bge.n	801adfc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801addc:	78fb      	ldrb	r3, [r7, #3]
 801adde:	f003 020f 	and.w	r2, r3, #15
 801ade2:	4613      	mov	r3, r2
 801ade4:	00db      	lsls	r3, r3, #3
 801ade6:	1a9b      	subs	r3, r3, r2
 801ade8:	009b      	lsls	r3, r3, #2
 801adea:	3338      	adds	r3, #56	; 0x38
 801adec:	687a      	ldr	r2, [r7, #4]
 801adee:	4413      	add	r3, r2
 801adf0:	3304      	adds	r3, #4
 801adf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801adf4:	68fb      	ldr	r3, [r7, #12]
 801adf6:	2201      	movs	r2, #1
 801adf8:	705a      	strb	r2, [r3, #1]
 801adfa:	e00f      	b.n	801ae1c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801adfc:	78fb      	ldrb	r3, [r7, #3]
 801adfe:	f003 020f 	and.w	r2, r3, #15
 801ae02:	4613      	mov	r3, r2
 801ae04:	00db      	lsls	r3, r3, #3
 801ae06:	1a9b      	subs	r3, r3, r2
 801ae08:	009b      	lsls	r3, r3, #2
 801ae0a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801ae0e:	687a      	ldr	r2, [r7, #4]
 801ae10:	4413      	add	r3, r2
 801ae12:	3304      	adds	r3, #4
 801ae14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801ae16:	68fb      	ldr	r3, [r7, #12]
 801ae18:	2200      	movs	r2, #0
 801ae1a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 801ae1c:	68fb      	ldr	r3, [r7, #12]
 801ae1e:	2200      	movs	r2, #0
 801ae20:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801ae22:	78fb      	ldrb	r3, [r7, #3]
 801ae24:	f003 030f 	and.w	r3, r3, #15
 801ae28:	b2da      	uxtb	r2, r3
 801ae2a:	68fb      	ldr	r3, [r7, #12]
 801ae2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801ae2e:	687b      	ldr	r3, [r7, #4]
 801ae30:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801ae34:	2b01      	cmp	r3, #1
 801ae36:	d101      	bne.n	801ae3c <HAL_PCD_EP_ClrStall+0x86>
 801ae38:	2302      	movs	r3, #2
 801ae3a:	e00e      	b.n	801ae5a <HAL_PCD_EP_ClrStall+0xa4>
 801ae3c:	687b      	ldr	r3, [r7, #4]
 801ae3e:	2201      	movs	r2, #1
 801ae40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 801ae44:	687b      	ldr	r3, [r7, #4]
 801ae46:	681b      	ldr	r3, [r3, #0]
 801ae48:	68f9      	ldr	r1, [r7, #12]
 801ae4a:	4618      	mov	r0, r3
 801ae4c:	f004 f9ab 	bl	801f1a6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 801ae50:	687b      	ldr	r3, [r7, #4]
 801ae52:	2200      	movs	r2, #0
 801ae54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801ae58:	2300      	movs	r3, #0
}
 801ae5a:	4618      	mov	r0, r3
 801ae5c:	3710      	adds	r7, #16
 801ae5e:	46bd      	mov	sp, r7
 801ae60:	bd80      	pop	{r7, pc}

0801ae62 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801ae62:	b580      	push	{r7, lr}
 801ae64:	b082      	sub	sp, #8
 801ae66:	af00      	add	r7, sp, #0
 801ae68:	6078      	str	r0, [r7, #4]
 801ae6a:	460b      	mov	r3, r1
 801ae6c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 801ae6e:	687b      	ldr	r3, [r7, #4]
 801ae70:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801ae74:	2b01      	cmp	r3, #1
 801ae76:	d101      	bne.n	801ae7c <HAL_PCD_EP_Flush+0x1a>
 801ae78:	2302      	movs	r3, #2
 801ae7a:	e01b      	b.n	801aeb4 <HAL_PCD_EP_Flush+0x52>
 801ae7c:	687b      	ldr	r3, [r7, #4]
 801ae7e:	2201      	movs	r2, #1
 801ae80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 801ae84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ae88:	2b00      	cmp	r3, #0
 801ae8a:	da09      	bge.n	801aea0 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 801ae8c:	687b      	ldr	r3, [r7, #4]
 801ae8e:	681a      	ldr	r2, [r3, #0]
 801ae90:	78fb      	ldrb	r3, [r7, #3]
 801ae92:	f003 030f 	and.w	r3, r3, #15
 801ae96:	4619      	mov	r1, r3
 801ae98:	4610      	mov	r0, r2
 801ae9a:	f003 fb03 	bl	801e4a4 <USB_FlushTxFifo>
 801ae9e:	e004      	b.n	801aeaa <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 801aea0:	687b      	ldr	r3, [r7, #4]
 801aea2:	681b      	ldr	r3, [r3, #0]
 801aea4:	4618      	mov	r0, r3
 801aea6:	f003 fb21 	bl	801e4ec <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 801aeaa:	687b      	ldr	r3, [r7, #4]
 801aeac:	2200      	movs	r2, #0
 801aeae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801aeb2:	2300      	movs	r3, #0
}
 801aeb4:	4618      	mov	r0, r3
 801aeb6:	3708      	adds	r7, #8
 801aeb8:	46bd      	mov	sp, r7
 801aeba:	bd80      	pop	{r7, pc}

0801aebc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801aebc:	b580      	push	{r7, lr}
 801aebe:	b08a      	sub	sp, #40	; 0x28
 801aec0:	af02      	add	r7, sp, #8
 801aec2:	6078      	str	r0, [r7, #4]
 801aec4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801aec6:	687b      	ldr	r3, [r7, #4]
 801aec8:	681b      	ldr	r3, [r3, #0]
 801aeca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801aecc:	697b      	ldr	r3, [r7, #20]
 801aece:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 801aed0:	683a      	ldr	r2, [r7, #0]
 801aed2:	4613      	mov	r3, r2
 801aed4:	00db      	lsls	r3, r3, #3
 801aed6:	1a9b      	subs	r3, r3, r2
 801aed8:	009b      	lsls	r3, r3, #2
 801aeda:	3338      	adds	r3, #56	; 0x38
 801aedc:	687a      	ldr	r2, [r7, #4]
 801aede:	4413      	add	r3, r2
 801aee0:	3304      	adds	r3, #4
 801aee2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 801aee4:	68fb      	ldr	r3, [r7, #12]
 801aee6:	699a      	ldr	r2, [r3, #24]
 801aee8:	68fb      	ldr	r3, [r7, #12]
 801aeea:	695b      	ldr	r3, [r3, #20]
 801aeec:	429a      	cmp	r2, r3
 801aeee:	d901      	bls.n	801aef4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 801aef0:	2301      	movs	r3, #1
 801aef2:	e06c      	b.n	801afce <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 801aef4:	68fb      	ldr	r3, [r7, #12]
 801aef6:	695a      	ldr	r2, [r3, #20]
 801aef8:	68fb      	ldr	r3, [r7, #12]
 801aefa:	699b      	ldr	r3, [r3, #24]
 801aefc:	1ad3      	subs	r3, r2, r3
 801aefe:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 801af00:	68fb      	ldr	r3, [r7, #12]
 801af02:	689b      	ldr	r3, [r3, #8]
 801af04:	69fa      	ldr	r2, [r7, #28]
 801af06:	429a      	cmp	r2, r3
 801af08:	d902      	bls.n	801af10 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 801af0a:	68fb      	ldr	r3, [r7, #12]
 801af0c:	689b      	ldr	r3, [r3, #8]
 801af0e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 801af10:	69fb      	ldr	r3, [r7, #28]
 801af12:	3303      	adds	r3, #3
 801af14:	089b      	lsrs	r3, r3, #2
 801af16:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801af18:	e02b      	b.n	801af72 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 801af1a:	68fb      	ldr	r3, [r7, #12]
 801af1c:	695a      	ldr	r2, [r3, #20]
 801af1e:	68fb      	ldr	r3, [r7, #12]
 801af20:	699b      	ldr	r3, [r3, #24]
 801af22:	1ad3      	subs	r3, r2, r3
 801af24:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 801af26:	68fb      	ldr	r3, [r7, #12]
 801af28:	689b      	ldr	r3, [r3, #8]
 801af2a:	69fa      	ldr	r2, [r7, #28]
 801af2c:	429a      	cmp	r2, r3
 801af2e:	d902      	bls.n	801af36 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 801af30:	68fb      	ldr	r3, [r7, #12]
 801af32:	689b      	ldr	r3, [r3, #8]
 801af34:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 801af36:	69fb      	ldr	r3, [r7, #28]
 801af38:	3303      	adds	r3, #3
 801af3a:	089b      	lsrs	r3, r3, #2
 801af3c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 801af3e:	68fb      	ldr	r3, [r7, #12]
 801af40:	68d9      	ldr	r1, [r3, #12]
 801af42:	683b      	ldr	r3, [r7, #0]
 801af44:	b2da      	uxtb	r2, r3
 801af46:	69fb      	ldr	r3, [r7, #28]
 801af48:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 801af4a:	687b      	ldr	r3, [r7, #4]
 801af4c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 801af4e:	b2db      	uxtb	r3, r3
 801af50:	9300      	str	r3, [sp, #0]
 801af52:	4603      	mov	r3, r0
 801af54:	6978      	ldr	r0, [r7, #20]
 801af56:	f004 f822 	bl	801ef9e <USB_WritePacket>

    ep->xfer_buff  += len;
 801af5a:	68fb      	ldr	r3, [r7, #12]
 801af5c:	68da      	ldr	r2, [r3, #12]
 801af5e:	69fb      	ldr	r3, [r7, #28]
 801af60:	441a      	add	r2, r3
 801af62:	68fb      	ldr	r3, [r7, #12]
 801af64:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 801af66:	68fb      	ldr	r3, [r7, #12]
 801af68:	699a      	ldr	r2, [r3, #24]
 801af6a:	69fb      	ldr	r3, [r7, #28]
 801af6c:	441a      	add	r2, r3
 801af6e:	68fb      	ldr	r3, [r7, #12]
 801af70:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801af72:	683b      	ldr	r3, [r7, #0]
 801af74:	015a      	lsls	r2, r3, #5
 801af76:	693b      	ldr	r3, [r7, #16]
 801af78:	4413      	add	r3, r2
 801af7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801af7e:	699b      	ldr	r3, [r3, #24]
 801af80:	b29b      	uxth	r3, r3
 801af82:	69ba      	ldr	r2, [r7, #24]
 801af84:	429a      	cmp	r2, r3
 801af86:	d809      	bhi.n	801af9c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801af88:	68fb      	ldr	r3, [r7, #12]
 801af8a:	699a      	ldr	r2, [r3, #24]
 801af8c:	68fb      	ldr	r3, [r7, #12]
 801af8e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801af90:	429a      	cmp	r2, r3
 801af92:	d203      	bcs.n	801af9c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801af94:	68fb      	ldr	r3, [r7, #12]
 801af96:	695b      	ldr	r3, [r3, #20]
 801af98:	2b00      	cmp	r3, #0
 801af9a:	d1be      	bne.n	801af1a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 801af9c:	68fb      	ldr	r3, [r7, #12]
 801af9e:	695a      	ldr	r2, [r3, #20]
 801afa0:	68fb      	ldr	r3, [r7, #12]
 801afa2:	699b      	ldr	r3, [r3, #24]
 801afa4:	429a      	cmp	r2, r3
 801afa6:	d811      	bhi.n	801afcc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 801afa8:	683b      	ldr	r3, [r7, #0]
 801afaa:	f003 030f 	and.w	r3, r3, #15
 801afae:	2201      	movs	r2, #1
 801afb0:	fa02 f303 	lsl.w	r3, r2, r3
 801afb4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 801afb6:	693b      	ldr	r3, [r7, #16]
 801afb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801afbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801afbe:	68bb      	ldr	r3, [r7, #8]
 801afc0:	43db      	mvns	r3, r3
 801afc2:	6939      	ldr	r1, [r7, #16]
 801afc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801afc8:	4013      	ands	r3, r2
 801afca:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 801afcc:	2300      	movs	r3, #0
}
 801afce:	4618      	mov	r0, r3
 801afd0:	3720      	adds	r7, #32
 801afd2:	46bd      	mov	sp, r7
 801afd4:	bd80      	pop	{r7, pc}
	...

0801afd8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801afd8:	b580      	push	{r7, lr}
 801afda:	b086      	sub	sp, #24
 801afdc:	af00      	add	r7, sp, #0
 801afde:	6078      	str	r0, [r7, #4]
 801afe0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801afe2:	687b      	ldr	r3, [r7, #4]
 801afe4:	681b      	ldr	r3, [r3, #0]
 801afe6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801afe8:	697b      	ldr	r3, [r7, #20]
 801afea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801afec:	697b      	ldr	r3, [r7, #20]
 801afee:	333c      	adds	r3, #60	; 0x3c
 801aff0:	3304      	adds	r3, #4
 801aff2:	681b      	ldr	r3, [r3, #0]
 801aff4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801aff6:	683b      	ldr	r3, [r7, #0]
 801aff8:	015a      	lsls	r2, r3, #5
 801affa:	693b      	ldr	r3, [r7, #16]
 801affc:	4413      	add	r3, r2
 801affe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b002:	689b      	ldr	r3, [r3, #8]
 801b004:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 801b006:	687b      	ldr	r3, [r7, #4]
 801b008:	691b      	ldr	r3, [r3, #16]
 801b00a:	2b01      	cmp	r3, #1
 801b00c:	f040 80a0 	bne.w	801b150 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 801b010:	68bb      	ldr	r3, [r7, #8]
 801b012:	f003 0308 	and.w	r3, r3, #8
 801b016:	2b00      	cmp	r3, #0
 801b018:	d015      	beq.n	801b046 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801b01a:	68fb      	ldr	r3, [r7, #12]
 801b01c:	4a72      	ldr	r2, [pc, #456]	; (801b1e8 <PCD_EP_OutXfrComplete_int+0x210>)
 801b01e:	4293      	cmp	r3, r2
 801b020:	f240 80dd 	bls.w	801b1de <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801b024:	68bb      	ldr	r3, [r7, #8]
 801b026:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801b02a:	2b00      	cmp	r3, #0
 801b02c:	f000 80d7 	beq.w	801b1de <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801b030:	683b      	ldr	r3, [r7, #0]
 801b032:	015a      	lsls	r2, r3, #5
 801b034:	693b      	ldr	r3, [r7, #16]
 801b036:	4413      	add	r3, r2
 801b038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b03c:	461a      	mov	r2, r3
 801b03e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801b042:	6093      	str	r3, [r2, #8]
 801b044:	e0cb      	b.n	801b1de <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 801b046:	68bb      	ldr	r3, [r7, #8]
 801b048:	f003 0320 	and.w	r3, r3, #32
 801b04c:	2b00      	cmp	r3, #0
 801b04e:	d009      	beq.n	801b064 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801b050:	683b      	ldr	r3, [r7, #0]
 801b052:	015a      	lsls	r2, r3, #5
 801b054:	693b      	ldr	r3, [r7, #16]
 801b056:	4413      	add	r3, r2
 801b058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b05c:	461a      	mov	r2, r3
 801b05e:	2320      	movs	r3, #32
 801b060:	6093      	str	r3, [r2, #8]
 801b062:	e0bc      	b.n	801b1de <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 801b064:	68bb      	ldr	r3, [r7, #8]
 801b066:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801b06a:	2b00      	cmp	r3, #0
 801b06c:	f040 80b7 	bne.w	801b1de <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801b070:	68fb      	ldr	r3, [r7, #12]
 801b072:	4a5d      	ldr	r2, [pc, #372]	; (801b1e8 <PCD_EP_OutXfrComplete_int+0x210>)
 801b074:	4293      	cmp	r3, r2
 801b076:	d90f      	bls.n	801b098 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801b078:	68bb      	ldr	r3, [r7, #8]
 801b07a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801b07e:	2b00      	cmp	r3, #0
 801b080:	d00a      	beq.n	801b098 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801b082:	683b      	ldr	r3, [r7, #0]
 801b084:	015a      	lsls	r2, r3, #5
 801b086:	693b      	ldr	r3, [r7, #16]
 801b088:	4413      	add	r3, r2
 801b08a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b08e:	461a      	mov	r2, r3
 801b090:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801b094:	6093      	str	r3, [r2, #8]
 801b096:	e0a2      	b.n	801b1de <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 801b098:	6879      	ldr	r1, [r7, #4]
 801b09a:	683a      	ldr	r2, [r7, #0]
 801b09c:	4613      	mov	r3, r2
 801b09e:	00db      	lsls	r3, r3, #3
 801b0a0:	1a9b      	subs	r3, r3, r2
 801b0a2:	009b      	lsls	r3, r3, #2
 801b0a4:	440b      	add	r3, r1
 801b0a6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 801b0aa:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 801b0ac:	683b      	ldr	r3, [r7, #0]
 801b0ae:	0159      	lsls	r1, r3, #5
 801b0b0:	693b      	ldr	r3, [r7, #16]
 801b0b2:	440b      	add	r3, r1
 801b0b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b0b8:	691b      	ldr	r3, [r3, #16]
 801b0ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 801b0be:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 801b0c0:	6878      	ldr	r0, [r7, #4]
 801b0c2:	683a      	ldr	r2, [r7, #0]
 801b0c4:	4613      	mov	r3, r2
 801b0c6:	00db      	lsls	r3, r3, #3
 801b0c8:	1a9b      	subs	r3, r3, r2
 801b0ca:	009b      	lsls	r3, r3, #2
 801b0cc:	4403      	add	r3, r0
 801b0ce:	f503 7305 	add.w	r3, r3, #532	; 0x214
 801b0d2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 801b0d4:	6879      	ldr	r1, [r7, #4]
 801b0d6:	683a      	ldr	r2, [r7, #0]
 801b0d8:	4613      	mov	r3, r2
 801b0da:	00db      	lsls	r3, r3, #3
 801b0dc:	1a9b      	subs	r3, r3, r2
 801b0de:	009b      	lsls	r3, r3, #2
 801b0e0:	440b      	add	r3, r1
 801b0e2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801b0e6:	6819      	ldr	r1, [r3, #0]
 801b0e8:	6878      	ldr	r0, [r7, #4]
 801b0ea:	683a      	ldr	r2, [r7, #0]
 801b0ec:	4613      	mov	r3, r2
 801b0ee:	00db      	lsls	r3, r3, #3
 801b0f0:	1a9b      	subs	r3, r3, r2
 801b0f2:	009b      	lsls	r3, r3, #2
 801b0f4:	4403      	add	r3, r0
 801b0f6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 801b0fa:	681b      	ldr	r3, [r3, #0]
 801b0fc:	4419      	add	r1, r3
 801b0fe:	6878      	ldr	r0, [r7, #4]
 801b100:	683a      	ldr	r2, [r7, #0]
 801b102:	4613      	mov	r3, r2
 801b104:	00db      	lsls	r3, r3, #3
 801b106:	1a9b      	subs	r3, r3, r2
 801b108:	009b      	lsls	r3, r3, #2
 801b10a:	4403      	add	r3, r0
 801b10c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801b110:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 801b112:	683b      	ldr	r3, [r7, #0]
 801b114:	2b00      	cmp	r3, #0
 801b116:	d114      	bne.n	801b142 <PCD_EP_OutXfrComplete_int+0x16a>
 801b118:	6879      	ldr	r1, [r7, #4]
 801b11a:	683a      	ldr	r2, [r7, #0]
 801b11c:	4613      	mov	r3, r2
 801b11e:	00db      	lsls	r3, r3, #3
 801b120:	1a9b      	subs	r3, r3, r2
 801b122:	009b      	lsls	r3, r3, #2
 801b124:	440b      	add	r3, r1
 801b126:	f503 7304 	add.w	r3, r3, #528	; 0x210
 801b12a:	681b      	ldr	r3, [r3, #0]
 801b12c:	2b00      	cmp	r3, #0
 801b12e:	d108      	bne.n	801b142 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801b130:	687b      	ldr	r3, [r7, #4]
 801b132:	6818      	ldr	r0, [r3, #0]
 801b134:	687b      	ldr	r3, [r7, #4]
 801b136:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801b13a:	461a      	mov	r2, r3
 801b13c:	2101      	movs	r1, #1
 801b13e:	f004 f9c5 	bl	801f4cc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801b142:	683b      	ldr	r3, [r7, #0]
 801b144:	b2db      	uxtb	r3, r3
 801b146:	4619      	mov	r1, r3
 801b148:	6878      	ldr	r0, [r7, #4]
 801b14a:	f007 fbef 	bl	802292c <HAL_PCD_DataOutStageCallback>
 801b14e:	e046      	b.n	801b1de <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 801b150:	68fb      	ldr	r3, [r7, #12]
 801b152:	4a26      	ldr	r2, [pc, #152]	; (801b1ec <PCD_EP_OutXfrComplete_int+0x214>)
 801b154:	4293      	cmp	r3, r2
 801b156:	d124      	bne.n	801b1a2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 801b158:	68bb      	ldr	r3, [r7, #8]
 801b15a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801b15e:	2b00      	cmp	r3, #0
 801b160:	d00a      	beq.n	801b178 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801b162:	683b      	ldr	r3, [r7, #0]
 801b164:	015a      	lsls	r2, r3, #5
 801b166:	693b      	ldr	r3, [r7, #16]
 801b168:	4413      	add	r3, r2
 801b16a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b16e:	461a      	mov	r2, r3
 801b170:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801b174:	6093      	str	r3, [r2, #8]
 801b176:	e032      	b.n	801b1de <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 801b178:	68bb      	ldr	r3, [r7, #8]
 801b17a:	f003 0320 	and.w	r3, r3, #32
 801b17e:	2b00      	cmp	r3, #0
 801b180:	d008      	beq.n	801b194 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801b182:	683b      	ldr	r3, [r7, #0]
 801b184:	015a      	lsls	r2, r3, #5
 801b186:	693b      	ldr	r3, [r7, #16]
 801b188:	4413      	add	r3, r2
 801b18a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b18e:	461a      	mov	r2, r3
 801b190:	2320      	movs	r3, #32
 801b192:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801b194:	683b      	ldr	r3, [r7, #0]
 801b196:	b2db      	uxtb	r3, r3
 801b198:	4619      	mov	r1, r3
 801b19a:	6878      	ldr	r0, [r7, #4]
 801b19c:	f007 fbc6 	bl	802292c <HAL_PCD_DataOutStageCallback>
 801b1a0:	e01d      	b.n	801b1de <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 801b1a2:	683b      	ldr	r3, [r7, #0]
 801b1a4:	2b00      	cmp	r3, #0
 801b1a6:	d114      	bne.n	801b1d2 <PCD_EP_OutXfrComplete_int+0x1fa>
 801b1a8:	6879      	ldr	r1, [r7, #4]
 801b1aa:	683a      	ldr	r2, [r7, #0]
 801b1ac:	4613      	mov	r3, r2
 801b1ae:	00db      	lsls	r3, r3, #3
 801b1b0:	1a9b      	subs	r3, r3, r2
 801b1b2:	009b      	lsls	r3, r3, #2
 801b1b4:	440b      	add	r3, r1
 801b1b6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 801b1ba:	681b      	ldr	r3, [r3, #0]
 801b1bc:	2b00      	cmp	r3, #0
 801b1be:	d108      	bne.n	801b1d2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 801b1c0:	687b      	ldr	r3, [r7, #4]
 801b1c2:	6818      	ldr	r0, [r3, #0]
 801b1c4:	687b      	ldr	r3, [r7, #4]
 801b1c6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801b1ca:	461a      	mov	r2, r3
 801b1cc:	2100      	movs	r1, #0
 801b1ce:	f004 f97d 	bl	801f4cc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801b1d2:	683b      	ldr	r3, [r7, #0]
 801b1d4:	b2db      	uxtb	r3, r3
 801b1d6:	4619      	mov	r1, r3
 801b1d8:	6878      	ldr	r0, [r7, #4]
 801b1da:	f007 fba7 	bl	802292c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 801b1de:	2300      	movs	r3, #0
}
 801b1e0:	4618      	mov	r0, r3
 801b1e2:	3718      	adds	r7, #24
 801b1e4:	46bd      	mov	sp, r7
 801b1e6:	bd80      	pop	{r7, pc}
 801b1e8:	4f54300a 	.word	0x4f54300a
 801b1ec:	4f54310a 	.word	0x4f54310a

0801b1f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801b1f0:	b580      	push	{r7, lr}
 801b1f2:	b086      	sub	sp, #24
 801b1f4:	af00      	add	r7, sp, #0
 801b1f6:	6078      	str	r0, [r7, #4]
 801b1f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801b1fa:	687b      	ldr	r3, [r7, #4]
 801b1fc:	681b      	ldr	r3, [r3, #0]
 801b1fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b200:	697b      	ldr	r3, [r7, #20]
 801b202:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801b204:	697b      	ldr	r3, [r7, #20]
 801b206:	333c      	adds	r3, #60	; 0x3c
 801b208:	3304      	adds	r3, #4
 801b20a:	681b      	ldr	r3, [r3, #0]
 801b20c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801b20e:	683b      	ldr	r3, [r7, #0]
 801b210:	015a      	lsls	r2, r3, #5
 801b212:	693b      	ldr	r3, [r7, #16]
 801b214:	4413      	add	r3, r2
 801b216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b21a:	689b      	ldr	r3, [r3, #8]
 801b21c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801b21e:	68fb      	ldr	r3, [r7, #12]
 801b220:	4a15      	ldr	r2, [pc, #84]	; (801b278 <PCD_EP_OutSetupPacket_int+0x88>)
 801b222:	4293      	cmp	r3, r2
 801b224:	d90e      	bls.n	801b244 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801b226:	68bb      	ldr	r3, [r7, #8]
 801b228:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801b22c:	2b00      	cmp	r3, #0
 801b22e:	d009      	beq.n	801b244 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801b230:	683b      	ldr	r3, [r7, #0]
 801b232:	015a      	lsls	r2, r3, #5
 801b234:	693b      	ldr	r3, [r7, #16]
 801b236:	4413      	add	r3, r2
 801b238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b23c:	461a      	mov	r2, r3
 801b23e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801b242:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 801b244:	6878      	ldr	r0, [r7, #4]
 801b246:	f007 fb5f 	bl	8022908 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 801b24a:	68fb      	ldr	r3, [r7, #12]
 801b24c:	4a0a      	ldr	r2, [pc, #40]	; (801b278 <PCD_EP_OutSetupPacket_int+0x88>)
 801b24e:	4293      	cmp	r3, r2
 801b250:	d90c      	bls.n	801b26c <PCD_EP_OutSetupPacket_int+0x7c>
 801b252:	687b      	ldr	r3, [r7, #4]
 801b254:	691b      	ldr	r3, [r3, #16]
 801b256:	2b01      	cmp	r3, #1
 801b258:	d108      	bne.n	801b26c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801b25a:	687b      	ldr	r3, [r7, #4]
 801b25c:	6818      	ldr	r0, [r3, #0]
 801b25e:	687b      	ldr	r3, [r7, #4]
 801b260:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801b264:	461a      	mov	r2, r3
 801b266:	2101      	movs	r1, #1
 801b268:	f004 f930 	bl	801f4cc <USB_EP0_OutStart>
  }

  return HAL_OK;
 801b26c:	2300      	movs	r3, #0
}
 801b26e:	4618      	mov	r0, r3
 801b270:	3718      	adds	r7, #24
 801b272:	46bd      	mov	sp, r7
 801b274:	bd80      	pop	{r7, pc}
 801b276:	bf00      	nop
 801b278:	4f54300a 	.word	0x4f54300a

0801b27c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 801b27c:	b480      	push	{r7}
 801b27e:	b085      	sub	sp, #20
 801b280:	af00      	add	r7, sp, #0
 801b282:	6078      	str	r0, [r7, #4]
 801b284:	460b      	mov	r3, r1
 801b286:	70fb      	strb	r3, [r7, #3]
 801b288:	4613      	mov	r3, r2
 801b28a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 801b28c:	687b      	ldr	r3, [r7, #4]
 801b28e:	681b      	ldr	r3, [r3, #0]
 801b290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b292:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 801b294:	78fb      	ldrb	r3, [r7, #3]
 801b296:	2b00      	cmp	r3, #0
 801b298:	d107      	bne.n	801b2aa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 801b29a:	883b      	ldrh	r3, [r7, #0]
 801b29c:	0419      	lsls	r1, r3, #16
 801b29e:	687b      	ldr	r3, [r7, #4]
 801b2a0:	681b      	ldr	r3, [r3, #0]
 801b2a2:	68ba      	ldr	r2, [r7, #8]
 801b2a4:	430a      	orrs	r2, r1
 801b2a6:	629a      	str	r2, [r3, #40]	; 0x28
 801b2a8:	e028      	b.n	801b2fc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 801b2aa:	687b      	ldr	r3, [r7, #4]
 801b2ac:	681b      	ldr	r3, [r3, #0]
 801b2ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b2b0:	0c1b      	lsrs	r3, r3, #16
 801b2b2:	68ba      	ldr	r2, [r7, #8]
 801b2b4:	4413      	add	r3, r2
 801b2b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 801b2b8:	2300      	movs	r3, #0
 801b2ba:	73fb      	strb	r3, [r7, #15]
 801b2bc:	e00d      	b.n	801b2da <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 801b2be:	687b      	ldr	r3, [r7, #4]
 801b2c0:	681a      	ldr	r2, [r3, #0]
 801b2c2:	7bfb      	ldrb	r3, [r7, #15]
 801b2c4:	3340      	adds	r3, #64	; 0x40
 801b2c6:	009b      	lsls	r3, r3, #2
 801b2c8:	4413      	add	r3, r2
 801b2ca:	685b      	ldr	r3, [r3, #4]
 801b2cc:	0c1b      	lsrs	r3, r3, #16
 801b2ce:	68ba      	ldr	r2, [r7, #8]
 801b2d0:	4413      	add	r3, r2
 801b2d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 801b2d4:	7bfb      	ldrb	r3, [r7, #15]
 801b2d6:	3301      	adds	r3, #1
 801b2d8:	73fb      	strb	r3, [r7, #15]
 801b2da:	7bfa      	ldrb	r2, [r7, #15]
 801b2dc:	78fb      	ldrb	r3, [r7, #3]
 801b2de:	3b01      	subs	r3, #1
 801b2e0:	429a      	cmp	r2, r3
 801b2e2:	d3ec      	bcc.n	801b2be <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 801b2e4:	883b      	ldrh	r3, [r7, #0]
 801b2e6:	0418      	lsls	r0, r3, #16
 801b2e8:	687b      	ldr	r3, [r7, #4]
 801b2ea:	6819      	ldr	r1, [r3, #0]
 801b2ec:	78fb      	ldrb	r3, [r7, #3]
 801b2ee:	3b01      	subs	r3, #1
 801b2f0:	68ba      	ldr	r2, [r7, #8]
 801b2f2:	4302      	orrs	r2, r0
 801b2f4:	3340      	adds	r3, #64	; 0x40
 801b2f6:	009b      	lsls	r3, r3, #2
 801b2f8:	440b      	add	r3, r1
 801b2fa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 801b2fc:	2300      	movs	r3, #0
}
 801b2fe:	4618      	mov	r0, r3
 801b300:	3714      	adds	r7, #20
 801b302:	46bd      	mov	sp, r7
 801b304:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b308:	4770      	bx	lr

0801b30a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 801b30a:	b480      	push	{r7}
 801b30c:	b083      	sub	sp, #12
 801b30e:	af00      	add	r7, sp, #0
 801b310:	6078      	str	r0, [r7, #4]
 801b312:	460b      	mov	r3, r1
 801b314:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 801b316:	687b      	ldr	r3, [r7, #4]
 801b318:	681b      	ldr	r3, [r3, #0]
 801b31a:	887a      	ldrh	r2, [r7, #2]
 801b31c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 801b31e:	2300      	movs	r3, #0
}
 801b320:	4618      	mov	r0, r3
 801b322:	370c      	adds	r7, #12
 801b324:	46bd      	mov	sp, r7
 801b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b32a:	4770      	bx	lr

0801b32c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801b32c:	b480      	push	{r7}
 801b32e:	b085      	sub	sp, #20
 801b330:	af00      	add	r7, sp, #0
 801b332:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801b334:	687b      	ldr	r3, [r7, #4]
 801b336:	681b      	ldr	r3, [r3, #0]
 801b338:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 801b33a:	687b      	ldr	r3, [r7, #4]
 801b33c:	2201      	movs	r2, #1
 801b33e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 801b342:	687b      	ldr	r3, [r7, #4]
 801b344:	2200      	movs	r2, #0
 801b346:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 801b34a:	68fb      	ldr	r3, [r7, #12]
 801b34c:	699b      	ldr	r3, [r3, #24]
 801b34e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801b352:	68fb      	ldr	r3, [r7, #12]
 801b354:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 801b356:	68fb      	ldr	r3, [r7, #12]
 801b358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b35a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b35e:	f043 0303 	orr.w	r3, r3, #3
 801b362:	68fa      	ldr	r2, [r7, #12]
 801b364:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 801b366:	2300      	movs	r3, #0
}
 801b368:	4618      	mov	r0, r3
 801b36a:	3714      	adds	r7, #20
 801b36c:	46bd      	mov	sp, r7
 801b36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b372:	4770      	bx	lr

0801b374 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 801b374:	b580      	push	{r7, lr}
 801b376:	b082      	sub	sp, #8
 801b378:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 801b37a:	2300      	movs	r3, #0
 801b37c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 801b37e:	2300      	movs	r3, #0
 801b380:	603b      	str	r3, [r7, #0]
 801b382:	4b20      	ldr	r3, [pc, #128]	; (801b404 <HAL_PWREx_EnableOverDrive+0x90>)
 801b384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b386:	4a1f      	ldr	r2, [pc, #124]	; (801b404 <HAL_PWREx_EnableOverDrive+0x90>)
 801b388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b38c:	6413      	str	r3, [r2, #64]	; 0x40
 801b38e:	4b1d      	ldr	r3, [pc, #116]	; (801b404 <HAL_PWREx_EnableOverDrive+0x90>)
 801b390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b396:	603b      	str	r3, [r7, #0]
 801b398:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 801b39a:	4b1b      	ldr	r3, [pc, #108]	; (801b408 <HAL_PWREx_EnableOverDrive+0x94>)
 801b39c:	2201      	movs	r2, #1
 801b39e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801b3a0:	f7fd f9e8 	bl	8018774 <HAL_GetTick>
 801b3a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801b3a6:	e009      	b.n	801b3bc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801b3a8:	f7fd f9e4 	bl	8018774 <HAL_GetTick>
 801b3ac:	4602      	mov	r2, r0
 801b3ae:	687b      	ldr	r3, [r7, #4]
 801b3b0:	1ad3      	subs	r3, r2, r3
 801b3b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801b3b6:	d901      	bls.n	801b3bc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 801b3b8:	2303      	movs	r3, #3
 801b3ba:	e01f      	b.n	801b3fc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801b3bc:	4b13      	ldr	r3, [pc, #76]	; (801b40c <HAL_PWREx_EnableOverDrive+0x98>)
 801b3be:	685b      	ldr	r3, [r3, #4]
 801b3c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801b3c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b3c8:	d1ee      	bne.n	801b3a8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 801b3ca:	4b11      	ldr	r3, [pc, #68]	; (801b410 <HAL_PWREx_EnableOverDrive+0x9c>)
 801b3cc:	2201      	movs	r2, #1
 801b3ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801b3d0:	f7fd f9d0 	bl	8018774 <HAL_GetTick>
 801b3d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801b3d6:	e009      	b.n	801b3ec <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801b3d8:	f7fd f9cc 	bl	8018774 <HAL_GetTick>
 801b3dc:	4602      	mov	r2, r0
 801b3de:	687b      	ldr	r3, [r7, #4]
 801b3e0:	1ad3      	subs	r3, r2, r3
 801b3e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801b3e6:	d901      	bls.n	801b3ec <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 801b3e8:	2303      	movs	r3, #3
 801b3ea:	e007      	b.n	801b3fc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801b3ec:	4b07      	ldr	r3, [pc, #28]	; (801b40c <HAL_PWREx_EnableOverDrive+0x98>)
 801b3ee:	685b      	ldr	r3, [r3, #4]
 801b3f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b3f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801b3f8:	d1ee      	bne.n	801b3d8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 801b3fa:	2300      	movs	r3, #0
}
 801b3fc:	4618      	mov	r0, r3
 801b3fe:	3708      	adds	r7, #8
 801b400:	46bd      	mov	sp, r7
 801b402:	bd80      	pop	{r7, pc}
 801b404:	40023800 	.word	0x40023800
 801b408:	420e0040 	.word	0x420e0040
 801b40c:	40007000 	.word	0x40007000
 801b410:	420e0044 	.word	0x420e0044

0801b414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801b414:	b580      	push	{r7, lr}
 801b416:	b084      	sub	sp, #16
 801b418:	af00      	add	r7, sp, #0
 801b41a:	6078      	str	r0, [r7, #4]
 801b41c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801b41e:	687b      	ldr	r3, [r7, #4]
 801b420:	2b00      	cmp	r3, #0
 801b422:	d101      	bne.n	801b428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801b424:	2301      	movs	r3, #1
 801b426:	e0cc      	b.n	801b5c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801b428:	4b68      	ldr	r3, [pc, #416]	; (801b5cc <HAL_RCC_ClockConfig+0x1b8>)
 801b42a:	681b      	ldr	r3, [r3, #0]
 801b42c:	f003 030f 	and.w	r3, r3, #15
 801b430:	683a      	ldr	r2, [r7, #0]
 801b432:	429a      	cmp	r2, r3
 801b434:	d90c      	bls.n	801b450 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b436:	4b65      	ldr	r3, [pc, #404]	; (801b5cc <HAL_RCC_ClockConfig+0x1b8>)
 801b438:	683a      	ldr	r2, [r7, #0]
 801b43a:	b2d2      	uxtb	r2, r2
 801b43c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801b43e:	4b63      	ldr	r3, [pc, #396]	; (801b5cc <HAL_RCC_ClockConfig+0x1b8>)
 801b440:	681b      	ldr	r3, [r3, #0]
 801b442:	f003 030f 	and.w	r3, r3, #15
 801b446:	683a      	ldr	r2, [r7, #0]
 801b448:	429a      	cmp	r2, r3
 801b44a:	d001      	beq.n	801b450 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801b44c:	2301      	movs	r3, #1
 801b44e:	e0b8      	b.n	801b5c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801b450:	687b      	ldr	r3, [r7, #4]
 801b452:	681b      	ldr	r3, [r3, #0]
 801b454:	f003 0302 	and.w	r3, r3, #2
 801b458:	2b00      	cmp	r3, #0
 801b45a:	d020      	beq.n	801b49e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b45c:	687b      	ldr	r3, [r7, #4]
 801b45e:	681b      	ldr	r3, [r3, #0]
 801b460:	f003 0304 	and.w	r3, r3, #4
 801b464:	2b00      	cmp	r3, #0
 801b466:	d005      	beq.n	801b474 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801b468:	4b59      	ldr	r3, [pc, #356]	; (801b5d0 <HAL_RCC_ClockConfig+0x1bc>)
 801b46a:	689b      	ldr	r3, [r3, #8]
 801b46c:	4a58      	ldr	r2, [pc, #352]	; (801b5d0 <HAL_RCC_ClockConfig+0x1bc>)
 801b46e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801b472:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b474:	687b      	ldr	r3, [r7, #4]
 801b476:	681b      	ldr	r3, [r3, #0]
 801b478:	f003 0308 	and.w	r3, r3, #8
 801b47c:	2b00      	cmp	r3, #0
 801b47e:	d005      	beq.n	801b48c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801b480:	4b53      	ldr	r3, [pc, #332]	; (801b5d0 <HAL_RCC_ClockConfig+0x1bc>)
 801b482:	689b      	ldr	r3, [r3, #8]
 801b484:	4a52      	ldr	r2, [pc, #328]	; (801b5d0 <HAL_RCC_ClockConfig+0x1bc>)
 801b486:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801b48a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801b48c:	4b50      	ldr	r3, [pc, #320]	; (801b5d0 <HAL_RCC_ClockConfig+0x1bc>)
 801b48e:	689b      	ldr	r3, [r3, #8]
 801b490:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801b494:	687b      	ldr	r3, [r7, #4]
 801b496:	689b      	ldr	r3, [r3, #8]
 801b498:	494d      	ldr	r1, [pc, #308]	; (801b5d0 <HAL_RCC_ClockConfig+0x1bc>)
 801b49a:	4313      	orrs	r3, r2
 801b49c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801b49e:	687b      	ldr	r3, [r7, #4]
 801b4a0:	681b      	ldr	r3, [r3, #0]
 801b4a2:	f003 0301 	and.w	r3, r3, #1
 801b4a6:	2b00      	cmp	r3, #0
 801b4a8:	d044      	beq.n	801b534 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801b4aa:	687b      	ldr	r3, [r7, #4]
 801b4ac:	685b      	ldr	r3, [r3, #4]
 801b4ae:	2b01      	cmp	r3, #1
 801b4b0:	d107      	bne.n	801b4c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801b4b2:	4b47      	ldr	r3, [pc, #284]	; (801b5d0 <HAL_RCC_ClockConfig+0x1bc>)
 801b4b4:	681b      	ldr	r3, [r3, #0]
 801b4b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b4ba:	2b00      	cmp	r3, #0
 801b4bc:	d119      	bne.n	801b4f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801b4be:	2301      	movs	r3, #1
 801b4c0:	e07f      	b.n	801b5c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801b4c2:	687b      	ldr	r3, [r7, #4]
 801b4c4:	685b      	ldr	r3, [r3, #4]
 801b4c6:	2b02      	cmp	r3, #2
 801b4c8:	d003      	beq.n	801b4d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801b4ca:	687b      	ldr	r3, [r7, #4]
 801b4cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801b4ce:	2b03      	cmp	r3, #3
 801b4d0:	d107      	bne.n	801b4e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801b4d2:	4b3f      	ldr	r3, [pc, #252]	; (801b5d0 <HAL_RCC_ClockConfig+0x1bc>)
 801b4d4:	681b      	ldr	r3, [r3, #0]
 801b4d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b4da:	2b00      	cmp	r3, #0
 801b4dc:	d109      	bne.n	801b4f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801b4de:	2301      	movs	r3, #1
 801b4e0:	e06f      	b.n	801b5c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801b4e2:	4b3b      	ldr	r3, [pc, #236]	; (801b5d0 <HAL_RCC_ClockConfig+0x1bc>)
 801b4e4:	681b      	ldr	r3, [r3, #0]
 801b4e6:	f003 0302 	and.w	r3, r3, #2
 801b4ea:	2b00      	cmp	r3, #0
 801b4ec:	d101      	bne.n	801b4f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801b4ee:	2301      	movs	r3, #1
 801b4f0:	e067      	b.n	801b5c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801b4f2:	4b37      	ldr	r3, [pc, #220]	; (801b5d0 <HAL_RCC_ClockConfig+0x1bc>)
 801b4f4:	689b      	ldr	r3, [r3, #8]
 801b4f6:	f023 0203 	bic.w	r2, r3, #3
 801b4fa:	687b      	ldr	r3, [r7, #4]
 801b4fc:	685b      	ldr	r3, [r3, #4]
 801b4fe:	4934      	ldr	r1, [pc, #208]	; (801b5d0 <HAL_RCC_ClockConfig+0x1bc>)
 801b500:	4313      	orrs	r3, r2
 801b502:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801b504:	f7fd f936 	bl	8018774 <HAL_GetTick>
 801b508:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b50a:	e00a      	b.n	801b522 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b50c:	f7fd f932 	bl	8018774 <HAL_GetTick>
 801b510:	4602      	mov	r2, r0
 801b512:	68fb      	ldr	r3, [r7, #12]
 801b514:	1ad3      	subs	r3, r2, r3
 801b516:	f241 3288 	movw	r2, #5000	; 0x1388
 801b51a:	4293      	cmp	r3, r2
 801b51c:	d901      	bls.n	801b522 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801b51e:	2303      	movs	r3, #3
 801b520:	e04f      	b.n	801b5c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b522:	4b2b      	ldr	r3, [pc, #172]	; (801b5d0 <HAL_RCC_ClockConfig+0x1bc>)
 801b524:	689b      	ldr	r3, [r3, #8]
 801b526:	f003 020c 	and.w	r2, r3, #12
 801b52a:	687b      	ldr	r3, [r7, #4]
 801b52c:	685b      	ldr	r3, [r3, #4]
 801b52e:	009b      	lsls	r3, r3, #2
 801b530:	429a      	cmp	r2, r3
 801b532:	d1eb      	bne.n	801b50c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801b534:	4b25      	ldr	r3, [pc, #148]	; (801b5cc <HAL_RCC_ClockConfig+0x1b8>)
 801b536:	681b      	ldr	r3, [r3, #0]
 801b538:	f003 030f 	and.w	r3, r3, #15
 801b53c:	683a      	ldr	r2, [r7, #0]
 801b53e:	429a      	cmp	r2, r3
 801b540:	d20c      	bcs.n	801b55c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b542:	4b22      	ldr	r3, [pc, #136]	; (801b5cc <HAL_RCC_ClockConfig+0x1b8>)
 801b544:	683a      	ldr	r2, [r7, #0]
 801b546:	b2d2      	uxtb	r2, r2
 801b548:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801b54a:	4b20      	ldr	r3, [pc, #128]	; (801b5cc <HAL_RCC_ClockConfig+0x1b8>)
 801b54c:	681b      	ldr	r3, [r3, #0]
 801b54e:	f003 030f 	and.w	r3, r3, #15
 801b552:	683a      	ldr	r2, [r7, #0]
 801b554:	429a      	cmp	r2, r3
 801b556:	d001      	beq.n	801b55c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801b558:	2301      	movs	r3, #1
 801b55a:	e032      	b.n	801b5c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b55c:	687b      	ldr	r3, [r7, #4]
 801b55e:	681b      	ldr	r3, [r3, #0]
 801b560:	f003 0304 	and.w	r3, r3, #4
 801b564:	2b00      	cmp	r3, #0
 801b566:	d008      	beq.n	801b57a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801b568:	4b19      	ldr	r3, [pc, #100]	; (801b5d0 <HAL_RCC_ClockConfig+0x1bc>)
 801b56a:	689b      	ldr	r3, [r3, #8]
 801b56c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801b570:	687b      	ldr	r3, [r7, #4]
 801b572:	68db      	ldr	r3, [r3, #12]
 801b574:	4916      	ldr	r1, [pc, #88]	; (801b5d0 <HAL_RCC_ClockConfig+0x1bc>)
 801b576:	4313      	orrs	r3, r2
 801b578:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b57a:	687b      	ldr	r3, [r7, #4]
 801b57c:	681b      	ldr	r3, [r3, #0]
 801b57e:	f003 0308 	and.w	r3, r3, #8
 801b582:	2b00      	cmp	r3, #0
 801b584:	d009      	beq.n	801b59a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801b586:	4b12      	ldr	r3, [pc, #72]	; (801b5d0 <HAL_RCC_ClockConfig+0x1bc>)
 801b588:	689b      	ldr	r3, [r3, #8]
 801b58a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801b58e:	687b      	ldr	r3, [r7, #4]
 801b590:	691b      	ldr	r3, [r3, #16]
 801b592:	00db      	lsls	r3, r3, #3
 801b594:	490e      	ldr	r1, [pc, #56]	; (801b5d0 <HAL_RCC_ClockConfig+0x1bc>)
 801b596:	4313      	orrs	r3, r2
 801b598:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801b59a:	f000 fb57 	bl	801bc4c <HAL_RCC_GetSysClockFreq>
 801b59e:	4602      	mov	r2, r0
 801b5a0:	4b0b      	ldr	r3, [pc, #44]	; (801b5d0 <HAL_RCC_ClockConfig+0x1bc>)
 801b5a2:	689b      	ldr	r3, [r3, #8]
 801b5a4:	091b      	lsrs	r3, r3, #4
 801b5a6:	f003 030f 	and.w	r3, r3, #15
 801b5aa:	490a      	ldr	r1, [pc, #40]	; (801b5d4 <HAL_RCC_ClockConfig+0x1c0>)
 801b5ac:	5ccb      	ldrb	r3, [r1, r3]
 801b5ae:	fa22 f303 	lsr.w	r3, r2, r3
 801b5b2:	4a09      	ldr	r2, [pc, #36]	; (801b5d8 <HAL_RCC_ClockConfig+0x1c4>)
 801b5b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801b5b6:	4b09      	ldr	r3, [pc, #36]	; (801b5dc <HAL_RCC_ClockConfig+0x1c8>)
 801b5b8:	681b      	ldr	r3, [r3, #0]
 801b5ba:	4618      	mov	r0, r3
 801b5bc:	f7fd f896 	bl	80186ec <HAL_InitTick>

  return HAL_OK;
 801b5c0:	2300      	movs	r3, #0
}
 801b5c2:	4618      	mov	r0, r3
 801b5c4:	3710      	adds	r7, #16
 801b5c6:	46bd      	mov	sp, r7
 801b5c8:	bd80      	pop	{r7, pc}
 801b5ca:	bf00      	nop
 801b5cc:	40023c00 	.word	0x40023c00
 801b5d0:	40023800 	.word	0x40023800
 801b5d4:	08002350 	.word	0x08002350
 801b5d8:	2000058c 	.word	0x2000058c
 801b5dc:	20000590 	.word	0x20000590

0801b5e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801b5e0:	b480      	push	{r7}
 801b5e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801b5e4:	4b03      	ldr	r3, [pc, #12]	; (801b5f4 <HAL_RCC_GetHCLKFreq+0x14>)
 801b5e6:	681b      	ldr	r3, [r3, #0]
}
 801b5e8:	4618      	mov	r0, r3
 801b5ea:	46bd      	mov	sp, r7
 801b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5f0:	4770      	bx	lr
 801b5f2:	bf00      	nop
 801b5f4:	2000058c 	.word	0x2000058c

0801b5f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801b5f8:	b580      	push	{r7, lr}
 801b5fa:	b08c      	sub	sp, #48	; 0x30
 801b5fc:	af00      	add	r7, sp, #0
 801b5fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801b600:	2300      	movs	r3, #0
 801b602:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 801b604:	2300      	movs	r3, #0
 801b606:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 801b608:	2300      	movs	r3, #0
 801b60a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 801b60c:	2300      	movs	r3, #0
 801b60e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 801b610:	2300      	movs	r3, #0
 801b612:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 801b614:	2300      	movs	r3, #0
 801b616:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 801b618:	2300      	movs	r3, #0
 801b61a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 801b61c:	2300      	movs	r3, #0
 801b61e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 801b620:	2300      	movs	r3, #0
 801b622:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 801b624:	687b      	ldr	r3, [r7, #4]
 801b626:	681b      	ldr	r3, [r3, #0]
 801b628:	f003 0301 	and.w	r3, r3, #1
 801b62c:	2b00      	cmp	r3, #0
 801b62e:	d010      	beq.n	801b652 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 801b630:	4b6f      	ldr	r3, [pc, #444]	; (801b7f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b632:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b636:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 801b63a:	687b      	ldr	r3, [r7, #4]
 801b63c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b63e:	496c      	ldr	r1, [pc, #432]	; (801b7f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b640:	4313      	orrs	r3, r2
 801b642:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 801b646:	687b      	ldr	r3, [r7, #4]
 801b648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b64a:	2b00      	cmp	r3, #0
 801b64c:	d101      	bne.n	801b652 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 801b64e:	2301      	movs	r3, #1
 801b650:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 801b652:	687b      	ldr	r3, [r7, #4]
 801b654:	681b      	ldr	r3, [r3, #0]
 801b656:	f003 0302 	and.w	r3, r3, #2
 801b65a:	2b00      	cmp	r3, #0
 801b65c:	d010      	beq.n	801b680 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 801b65e:	4b64      	ldr	r3, [pc, #400]	; (801b7f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b664:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 801b668:	687b      	ldr	r3, [r7, #4]
 801b66a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b66c:	4960      	ldr	r1, [pc, #384]	; (801b7f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b66e:	4313      	orrs	r3, r2
 801b670:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 801b674:	687b      	ldr	r3, [r7, #4]
 801b676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b678:	2b00      	cmp	r3, #0
 801b67a:	d101      	bne.n	801b680 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 801b67c:	2301      	movs	r3, #1
 801b67e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 801b680:	687b      	ldr	r3, [r7, #4]
 801b682:	681b      	ldr	r3, [r3, #0]
 801b684:	f003 0304 	and.w	r3, r3, #4
 801b688:	2b00      	cmp	r3, #0
 801b68a:	d017      	beq.n	801b6bc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801b68c:	4b58      	ldr	r3, [pc, #352]	; (801b7f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b68e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b692:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801b696:	687b      	ldr	r3, [r7, #4]
 801b698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b69a:	4955      	ldr	r1, [pc, #340]	; (801b7f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b69c:	4313      	orrs	r3, r2
 801b69e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 801b6a2:	687b      	ldr	r3, [r7, #4]
 801b6a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b6a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801b6aa:	d101      	bne.n	801b6b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 801b6ac:	2301      	movs	r3, #1
 801b6ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 801b6b0:	687b      	ldr	r3, [r7, #4]
 801b6b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b6b4:	2b00      	cmp	r3, #0
 801b6b6:	d101      	bne.n	801b6bc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 801b6b8:	2301      	movs	r3, #1
 801b6ba:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 801b6bc:	687b      	ldr	r3, [r7, #4]
 801b6be:	681b      	ldr	r3, [r3, #0]
 801b6c0:	f003 0308 	and.w	r3, r3, #8
 801b6c4:	2b00      	cmp	r3, #0
 801b6c6:	d017      	beq.n	801b6f8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 801b6c8:	4b49      	ldr	r3, [pc, #292]	; (801b7f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b6ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b6ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801b6d2:	687b      	ldr	r3, [r7, #4]
 801b6d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b6d6:	4946      	ldr	r1, [pc, #280]	; (801b7f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b6d8:	4313      	orrs	r3, r2
 801b6da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 801b6de:	687b      	ldr	r3, [r7, #4]
 801b6e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b6e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801b6e6:	d101      	bne.n	801b6ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 801b6e8:	2301      	movs	r3, #1
 801b6ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 801b6ec:	687b      	ldr	r3, [r7, #4]
 801b6ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b6f0:	2b00      	cmp	r3, #0
 801b6f2:	d101      	bne.n	801b6f8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 801b6f4:	2301      	movs	r3, #1
 801b6f6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801b6f8:	687b      	ldr	r3, [r7, #4]
 801b6fa:	681b      	ldr	r3, [r3, #0]
 801b6fc:	f003 0320 	and.w	r3, r3, #32
 801b700:	2b00      	cmp	r3, #0
 801b702:	f000 808a 	beq.w	801b81a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 801b706:	2300      	movs	r3, #0
 801b708:	60bb      	str	r3, [r7, #8]
 801b70a:	4b39      	ldr	r3, [pc, #228]	; (801b7f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b70c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b70e:	4a38      	ldr	r2, [pc, #224]	; (801b7f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b714:	6413      	str	r3, [r2, #64]	; 0x40
 801b716:	4b36      	ldr	r3, [pc, #216]	; (801b7f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b71a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b71e:	60bb      	str	r3, [r7, #8]
 801b720:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 801b722:	4b34      	ldr	r3, [pc, #208]	; (801b7f4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 801b724:	681b      	ldr	r3, [r3, #0]
 801b726:	4a33      	ldr	r2, [pc, #204]	; (801b7f4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 801b728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b72c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 801b72e:	f7fd f821 	bl	8018774 <HAL_GetTick>
 801b732:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 801b734:	e008      	b.n	801b748 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 801b736:	f7fd f81d 	bl	8018774 <HAL_GetTick>
 801b73a:	4602      	mov	r2, r0
 801b73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b73e:	1ad3      	subs	r3, r2, r3
 801b740:	2b02      	cmp	r3, #2
 801b742:	d901      	bls.n	801b748 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 801b744:	2303      	movs	r3, #3
 801b746:	e278      	b.n	801bc3a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 801b748:	4b2a      	ldr	r3, [pc, #168]	; (801b7f4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 801b74a:	681b      	ldr	r3, [r3, #0]
 801b74c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b750:	2b00      	cmp	r3, #0
 801b752:	d0f0      	beq.n	801b736 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 801b754:	4b26      	ldr	r3, [pc, #152]	; (801b7f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b758:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b75c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 801b75e:	6a3b      	ldr	r3, [r7, #32]
 801b760:	2b00      	cmp	r3, #0
 801b762:	d02f      	beq.n	801b7c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 801b764:	687b      	ldr	r3, [r7, #4]
 801b766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b768:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b76c:	6a3a      	ldr	r2, [r7, #32]
 801b76e:	429a      	cmp	r2, r3
 801b770:	d028      	beq.n	801b7c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801b772:	4b1f      	ldr	r3, [pc, #124]	; (801b7f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b776:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b77a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801b77c:	4b1e      	ldr	r3, [pc, #120]	; (801b7f8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 801b77e:	2201      	movs	r2, #1
 801b780:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 801b782:	4b1d      	ldr	r3, [pc, #116]	; (801b7f8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 801b784:	2200      	movs	r2, #0
 801b786:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 801b788:	4a19      	ldr	r2, [pc, #100]	; (801b7f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b78a:	6a3b      	ldr	r3, [r7, #32]
 801b78c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 801b78e:	4b18      	ldr	r3, [pc, #96]	; (801b7f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b792:	f003 0301 	and.w	r3, r3, #1
 801b796:	2b01      	cmp	r3, #1
 801b798:	d114      	bne.n	801b7c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 801b79a:	f7fc ffeb 	bl	8018774 <HAL_GetTick>
 801b79e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801b7a0:	e00a      	b.n	801b7b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801b7a2:	f7fc ffe7 	bl	8018774 <HAL_GetTick>
 801b7a6:	4602      	mov	r2, r0
 801b7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7aa:	1ad3      	subs	r3, r2, r3
 801b7ac:	f241 3288 	movw	r2, #5000	; 0x1388
 801b7b0:	4293      	cmp	r3, r2
 801b7b2:	d901      	bls.n	801b7b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 801b7b4:	2303      	movs	r3, #3
 801b7b6:	e240      	b.n	801bc3a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801b7b8:	4b0d      	ldr	r3, [pc, #52]	; (801b7f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b7ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b7bc:	f003 0302 	and.w	r3, r3, #2
 801b7c0:	2b00      	cmp	r3, #0
 801b7c2:	d0ee      	beq.n	801b7a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801b7c4:	687b      	ldr	r3, [r7, #4]
 801b7c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b7c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b7cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801b7d0:	d114      	bne.n	801b7fc <HAL_RCCEx_PeriphCLKConfig+0x204>
 801b7d2:	4b07      	ldr	r3, [pc, #28]	; (801b7f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b7d4:	689b      	ldr	r3, [r3, #8]
 801b7d6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 801b7da:	687b      	ldr	r3, [r7, #4]
 801b7dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b7de:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801b7e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b7e6:	4902      	ldr	r1, [pc, #8]	; (801b7f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b7e8:	4313      	orrs	r3, r2
 801b7ea:	608b      	str	r3, [r1, #8]
 801b7ec:	e00c      	b.n	801b808 <HAL_RCCEx_PeriphCLKConfig+0x210>
 801b7ee:	bf00      	nop
 801b7f0:	40023800 	.word	0x40023800
 801b7f4:	40007000 	.word	0x40007000
 801b7f8:	42470e40 	.word	0x42470e40
 801b7fc:	4b4a      	ldr	r3, [pc, #296]	; (801b928 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b7fe:	689b      	ldr	r3, [r3, #8]
 801b800:	4a49      	ldr	r2, [pc, #292]	; (801b928 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b802:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 801b806:	6093      	str	r3, [r2, #8]
 801b808:	4b47      	ldr	r3, [pc, #284]	; (801b928 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b80a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801b80c:	687b      	ldr	r3, [r7, #4]
 801b80e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801b814:	4944      	ldr	r1, [pc, #272]	; (801b928 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b816:	4313      	orrs	r3, r2
 801b818:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 801b81a:	687b      	ldr	r3, [r7, #4]
 801b81c:	681b      	ldr	r3, [r3, #0]
 801b81e:	f003 0310 	and.w	r3, r3, #16
 801b822:	2b00      	cmp	r3, #0
 801b824:	d004      	beq.n	801b830 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801b826:	687b      	ldr	r3, [r7, #4]
 801b828:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 801b82c:	4b3f      	ldr	r3, [pc, #252]	; (801b92c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 801b82e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 801b830:	687b      	ldr	r3, [r7, #4]
 801b832:	681b      	ldr	r3, [r3, #0]
 801b834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b838:	2b00      	cmp	r3, #0
 801b83a:	d00a      	beq.n	801b852 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 801b83c:	4b3a      	ldr	r3, [pc, #232]	; (801b928 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b83e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b842:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801b846:	687b      	ldr	r3, [r7, #4]
 801b848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b84a:	4937      	ldr	r1, [pc, #220]	; (801b928 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b84c:	4313      	orrs	r3, r2
 801b84e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801b852:	687b      	ldr	r3, [r7, #4]
 801b854:	681b      	ldr	r3, [r3, #0]
 801b856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b85a:	2b00      	cmp	r3, #0
 801b85c:	d00a      	beq.n	801b874 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801b85e:	4b32      	ldr	r3, [pc, #200]	; (801b928 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b864:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 801b868:	687b      	ldr	r3, [r7, #4]
 801b86a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b86c:	492e      	ldr	r1, [pc, #184]	; (801b928 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b86e:	4313      	orrs	r3, r2
 801b870:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 801b874:	687b      	ldr	r3, [r7, #4]
 801b876:	681b      	ldr	r3, [r3, #0]
 801b878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b87c:	2b00      	cmp	r3, #0
 801b87e:	d011      	beq.n	801b8a4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 801b880:	4b29      	ldr	r3, [pc, #164]	; (801b928 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b882:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b886:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 801b88a:	687b      	ldr	r3, [r7, #4]
 801b88c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b88e:	4926      	ldr	r1, [pc, #152]	; (801b928 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b890:	4313      	orrs	r3, r2
 801b892:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 801b896:	687b      	ldr	r3, [r7, #4]
 801b898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b89a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801b89e:	d101      	bne.n	801b8a4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 801b8a0:	2301      	movs	r3, #1
 801b8a2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 801b8a4:	687b      	ldr	r3, [r7, #4]
 801b8a6:	681b      	ldr	r3, [r3, #0]
 801b8a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801b8ac:	2b00      	cmp	r3, #0
 801b8ae:	d00a      	beq.n	801b8c6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 801b8b0:	4b1d      	ldr	r3, [pc, #116]	; (801b928 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b8b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b8b6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801b8ba:	687b      	ldr	r3, [r7, #4]
 801b8bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b8be:	491a      	ldr	r1, [pc, #104]	; (801b928 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b8c0:	4313      	orrs	r3, r2
 801b8c2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801b8c6:	687b      	ldr	r3, [r7, #4]
 801b8c8:	681b      	ldr	r3, [r3, #0]
 801b8ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b8ce:	2b00      	cmp	r3, #0
 801b8d0:	d011      	beq.n	801b8f6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 801b8d2:	4b15      	ldr	r3, [pc, #84]	; (801b928 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b8d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b8d8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801b8dc:	687b      	ldr	r3, [r7, #4]
 801b8de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b8e0:	4911      	ldr	r1, [pc, #68]	; (801b928 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b8e2:	4313      	orrs	r3, r2
 801b8e4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 801b8e8:	687b      	ldr	r3, [r7, #4]
 801b8ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b8ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b8f0:	d101      	bne.n	801b8f6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 801b8f2:	2301      	movs	r3, #1
 801b8f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 801b8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b8f8:	2b01      	cmp	r3, #1
 801b8fa:	d005      	beq.n	801b908 <HAL_RCCEx_PeriphCLKConfig+0x310>
 801b8fc:	687b      	ldr	r3, [r7, #4]
 801b8fe:	681b      	ldr	r3, [r3, #0]
 801b900:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801b904:	f040 80ff 	bne.w	801bb06 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 801b908:	4b09      	ldr	r3, [pc, #36]	; (801b930 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b90a:	2200      	movs	r2, #0
 801b90c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801b90e:	f7fc ff31 	bl	8018774 <HAL_GetTick>
 801b912:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801b914:	e00e      	b.n	801b934 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 801b916:	f7fc ff2d 	bl	8018774 <HAL_GetTick>
 801b91a:	4602      	mov	r2, r0
 801b91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b91e:	1ad3      	subs	r3, r2, r3
 801b920:	2b02      	cmp	r3, #2
 801b922:	d907      	bls.n	801b934 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801b924:	2303      	movs	r3, #3
 801b926:	e188      	b.n	801bc3a <HAL_RCCEx_PeriphCLKConfig+0x642>
 801b928:	40023800 	.word	0x40023800
 801b92c:	424711e0 	.word	0x424711e0
 801b930:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801b934:	4b7e      	ldr	r3, [pc, #504]	; (801bb30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b936:	681b      	ldr	r3, [r3, #0]
 801b938:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801b93c:	2b00      	cmp	r3, #0
 801b93e:	d1ea      	bne.n	801b916 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 801b940:	687b      	ldr	r3, [r7, #4]
 801b942:	681b      	ldr	r3, [r3, #0]
 801b944:	f003 0301 	and.w	r3, r3, #1
 801b948:	2b00      	cmp	r3, #0
 801b94a:	d003      	beq.n	801b954 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 801b94c:	687b      	ldr	r3, [r7, #4]
 801b94e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b950:	2b00      	cmp	r3, #0
 801b952:	d009      	beq.n	801b968 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 801b954:	687b      	ldr	r3, [r7, #4]
 801b956:	681b      	ldr	r3, [r3, #0]
 801b958:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 801b95c:	2b00      	cmp	r3, #0
 801b95e:	d028      	beq.n	801b9b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 801b960:	687b      	ldr	r3, [r7, #4]
 801b962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b964:	2b00      	cmp	r3, #0
 801b966:	d124      	bne.n	801b9b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 801b968:	4b71      	ldr	r3, [pc, #452]	; (801bb30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b96a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b96e:	0c1b      	lsrs	r3, r3, #16
 801b970:	f003 0303 	and.w	r3, r3, #3
 801b974:	3301      	adds	r3, #1
 801b976:	005b      	lsls	r3, r3, #1
 801b978:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 801b97a:	4b6d      	ldr	r3, [pc, #436]	; (801bb30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b97c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b980:	0e1b      	lsrs	r3, r3, #24
 801b982:	f003 030f 	and.w	r3, r3, #15
 801b986:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 801b988:	687b      	ldr	r3, [r7, #4]
 801b98a:	685a      	ldr	r2, [r3, #4]
 801b98c:	687b      	ldr	r3, [r7, #4]
 801b98e:	689b      	ldr	r3, [r3, #8]
 801b990:	019b      	lsls	r3, r3, #6
 801b992:	431a      	orrs	r2, r3
 801b994:	69fb      	ldr	r3, [r7, #28]
 801b996:	085b      	lsrs	r3, r3, #1
 801b998:	3b01      	subs	r3, #1
 801b99a:	041b      	lsls	r3, r3, #16
 801b99c:	431a      	orrs	r2, r3
 801b99e:	69bb      	ldr	r3, [r7, #24]
 801b9a0:	061b      	lsls	r3, r3, #24
 801b9a2:	431a      	orrs	r2, r3
 801b9a4:	687b      	ldr	r3, [r7, #4]
 801b9a6:	695b      	ldr	r3, [r3, #20]
 801b9a8:	071b      	lsls	r3, r3, #28
 801b9aa:	4961      	ldr	r1, [pc, #388]	; (801bb30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b9ac:	4313      	orrs	r3, r2
 801b9ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801b9b2:	687b      	ldr	r3, [r7, #4]
 801b9b4:	681b      	ldr	r3, [r3, #0]
 801b9b6:	f003 0304 	and.w	r3, r3, #4
 801b9ba:	2b00      	cmp	r3, #0
 801b9bc:	d004      	beq.n	801b9c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 801b9be:	687b      	ldr	r3, [r7, #4]
 801b9c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b9c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801b9c6:	d00a      	beq.n	801b9de <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801b9c8:	687b      	ldr	r3, [r7, #4]
 801b9ca:	681b      	ldr	r3, [r3, #0]
 801b9cc:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801b9d0:	2b00      	cmp	r3, #0
 801b9d2:	d035      	beq.n	801ba40 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801b9d4:	687b      	ldr	r3, [r7, #4]
 801b9d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b9d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801b9dc:	d130      	bne.n	801ba40 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 801b9de:	4b54      	ldr	r3, [pc, #336]	; (801bb30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b9e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b9e4:	0c1b      	lsrs	r3, r3, #16
 801b9e6:	f003 0303 	and.w	r3, r3, #3
 801b9ea:	3301      	adds	r3, #1
 801b9ec:	005b      	lsls	r3, r3, #1
 801b9ee:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801b9f0:	4b4f      	ldr	r3, [pc, #316]	; (801bb30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b9f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b9f6:	0f1b      	lsrs	r3, r3, #28
 801b9f8:	f003 0307 	and.w	r3, r3, #7
 801b9fc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 801b9fe:	687b      	ldr	r3, [r7, #4]
 801ba00:	685a      	ldr	r2, [r3, #4]
 801ba02:	687b      	ldr	r3, [r7, #4]
 801ba04:	689b      	ldr	r3, [r3, #8]
 801ba06:	019b      	lsls	r3, r3, #6
 801ba08:	431a      	orrs	r2, r3
 801ba0a:	69fb      	ldr	r3, [r7, #28]
 801ba0c:	085b      	lsrs	r3, r3, #1
 801ba0e:	3b01      	subs	r3, #1
 801ba10:	041b      	lsls	r3, r3, #16
 801ba12:	431a      	orrs	r2, r3
 801ba14:	687b      	ldr	r3, [r7, #4]
 801ba16:	691b      	ldr	r3, [r3, #16]
 801ba18:	061b      	lsls	r3, r3, #24
 801ba1a:	431a      	orrs	r2, r3
 801ba1c:	697b      	ldr	r3, [r7, #20]
 801ba1e:	071b      	lsls	r3, r3, #28
 801ba20:	4943      	ldr	r1, [pc, #268]	; (801bb30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801ba22:	4313      	orrs	r3, r2
 801ba24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 801ba28:	4b41      	ldr	r3, [pc, #260]	; (801bb30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801ba2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801ba2e:	f023 021f 	bic.w	r2, r3, #31
 801ba32:	687b      	ldr	r3, [r7, #4]
 801ba34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ba36:	3b01      	subs	r3, #1
 801ba38:	493d      	ldr	r1, [pc, #244]	; (801bb30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801ba3a:	4313      	orrs	r3, r2
 801ba3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 801ba40:	687b      	ldr	r3, [r7, #4]
 801ba42:	681b      	ldr	r3, [r3, #0]
 801ba44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801ba48:	2b00      	cmp	r3, #0
 801ba4a:	d029      	beq.n	801baa0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 801ba4c:	687b      	ldr	r3, [r7, #4]
 801ba4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ba50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801ba54:	d124      	bne.n	801baa0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 801ba56:	4b36      	ldr	r3, [pc, #216]	; (801bb30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801ba58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ba5c:	0c1b      	lsrs	r3, r3, #16
 801ba5e:	f003 0303 	and.w	r3, r3, #3
 801ba62:	3301      	adds	r3, #1
 801ba64:	005b      	lsls	r3, r3, #1
 801ba66:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801ba68:	4b31      	ldr	r3, [pc, #196]	; (801bb30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801ba6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ba6e:	0f1b      	lsrs	r3, r3, #28
 801ba70:	f003 0307 	and.w	r3, r3, #7
 801ba74:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 801ba76:	687b      	ldr	r3, [r7, #4]
 801ba78:	685a      	ldr	r2, [r3, #4]
 801ba7a:	687b      	ldr	r3, [r7, #4]
 801ba7c:	689b      	ldr	r3, [r3, #8]
 801ba7e:	019b      	lsls	r3, r3, #6
 801ba80:	431a      	orrs	r2, r3
 801ba82:	687b      	ldr	r3, [r7, #4]
 801ba84:	68db      	ldr	r3, [r3, #12]
 801ba86:	085b      	lsrs	r3, r3, #1
 801ba88:	3b01      	subs	r3, #1
 801ba8a:	041b      	lsls	r3, r3, #16
 801ba8c:	431a      	orrs	r2, r3
 801ba8e:	69bb      	ldr	r3, [r7, #24]
 801ba90:	061b      	lsls	r3, r3, #24
 801ba92:	431a      	orrs	r2, r3
 801ba94:	697b      	ldr	r3, [r7, #20]
 801ba96:	071b      	lsls	r3, r3, #28
 801ba98:	4925      	ldr	r1, [pc, #148]	; (801bb30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801ba9a:	4313      	orrs	r3, r2
 801ba9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 801baa0:	687b      	ldr	r3, [r7, #4]
 801baa2:	681b      	ldr	r3, [r3, #0]
 801baa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801baa8:	2b00      	cmp	r3, #0
 801baaa:	d016      	beq.n	801bada <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 801baac:	687b      	ldr	r3, [r7, #4]
 801baae:	685a      	ldr	r2, [r3, #4]
 801bab0:	687b      	ldr	r3, [r7, #4]
 801bab2:	689b      	ldr	r3, [r3, #8]
 801bab4:	019b      	lsls	r3, r3, #6
 801bab6:	431a      	orrs	r2, r3
 801bab8:	687b      	ldr	r3, [r7, #4]
 801baba:	68db      	ldr	r3, [r3, #12]
 801babc:	085b      	lsrs	r3, r3, #1
 801babe:	3b01      	subs	r3, #1
 801bac0:	041b      	lsls	r3, r3, #16
 801bac2:	431a      	orrs	r2, r3
 801bac4:	687b      	ldr	r3, [r7, #4]
 801bac6:	691b      	ldr	r3, [r3, #16]
 801bac8:	061b      	lsls	r3, r3, #24
 801baca:	431a      	orrs	r2, r3
 801bacc:	687b      	ldr	r3, [r7, #4]
 801bace:	695b      	ldr	r3, [r3, #20]
 801bad0:	071b      	lsls	r3, r3, #28
 801bad2:	4917      	ldr	r1, [pc, #92]	; (801bb30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801bad4:	4313      	orrs	r3, r2
 801bad6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 801bada:	4b16      	ldr	r3, [pc, #88]	; (801bb34 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 801badc:	2201      	movs	r2, #1
 801bade:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801bae0:	f7fc fe48 	bl	8018774 <HAL_GetTick>
 801bae4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801bae6:	e008      	b.n	801bafa <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 801bae8:	f7fc fe44 	bl	8018774 <HAL_GetTick>
 801baec:	4602      	mov	r2, r0
 801baee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801baf0:	1ad3      	subs	r3, r2, r3
 801baf2:	2b02      	cmp	r3, #2
 801baf4:	d901      	bls.n	801bafa <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801baf6:	2303      	movs	r3, #3
 801baf8:	e09f      	b.n	801bc3a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801bafa:	4b0d      	ldr	r3, [pc, #52]	; (801bb30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801bafc:	681b      	ldr	r3, [r3, #0]
 801bafe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801bb02:	2b00      	cmp	r3, #0
 801bb04:	d0f0      	beq.n	801bae8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 801bb06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bb08:	2b01      	cmp	r3, #1
 801bb0a:	f040 8095 	bne.w	801bc38 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 801bb0e:	4b0a      	ldr	r3, [pc, #40]	; (801bb38 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 801bb10:	2200      	movs	r2, #0
 801bb12:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801bb14:	f7fc fe2e 	bl	8018774 <HAL_GetTick>
 801bb18:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801bb1a:	e00f      	b.n	801bb3c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 801bb1c:	f7fc fe2a 	bl	8018774 <HAL_GetTick>
 801bb20:	4602      	mov	r2, r0
 801bb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb24:	1ad3      	subs	r3, r2, r3
 801bb26:	2b02      	cmp	r3, #2
 801bb28:	d908      	bls.n	801bb3c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801bb2a:	2303      	movs	r3, #3
 801bb2c:	e085      	b.n	801bc3a <HAL_RCCEx_PeriphCLKConfig+0x642>
 801bb2e:	bf00      	nop
 801bb30:	40023800 	.word	0x40023800
 801bb34:	42470068 	.word	0x42470068
 801bb38:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801bb3c:	4b41      	ldr	r3, [pc, #260]	; (801bc44 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801bb3e:	681b      	ldr	r3, [r3, #0]
 801bb40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801bb44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801bb48:	d0e8      	beq.n	801bb1c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 801bb4a:	687b      	ldr	r3, [r7, #4]
 801bb4c:	681b      	ldr	r3, [r3, #0]
 801bb4e:	f003 0304 	and.w	r3, r3, #4
 801bb52:	2b00      	cmp	r3, #0
 801bb54:	d003      	beq.n	801bb5e <HAL_RCCEx_PeriphCLKConfig+0x566>
 801bb56:	687b      	ldr	r3, [r7, #4]
 801bb58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bb5a:	2b00      	cmp	r3, #0
 801bb5c:	d009      	beq.n	801bb72 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801bb5e:	687b      	ldr	r3, [r7, #4]
 801bb60:	681b      	ldr	r3, [r3, #0]
 801bb62:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 801bb66:	2b00      	cmp	r3, #0
 801bb68:	d02b      	beq.n	801bbc2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801bb6a:	687b      	ldr	r3, [r7, #4]
 801bb6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bb6e:	2b00      	cmp	r3, #0
 801bb70:	d127      	bne.n	801bbc2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 801bb72:	4b34      	ldr	r3, [pc, #208]	; (801bc44 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801bb74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bb78:	0c1b      	lsrs	r3, r3, #16
 801bb7a:	f003 0303 	and.w	r3, r3, #3
 801bb7e:	3301      	adds	r3, #1
 801bb80:	005b      	lsls	r3, r3, #1
 801bb82:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 801bb84:	687b      	ldr	r3, [r7, #4]
 801bb86:	699a      	ldr	r2, [r3, #24]
 801bb88:	687b      	ldr	r3, [r7, #4]
 801bb8a:	69db      	ldr	r3, [r3, #28]
 801bb8c:	019b      	lsls	r3, r3, #6
 801bb8e:	431a      	orrs	r2, r3
 801bb90:	693b      	ldr	r3, [r7, #16]
 801bb92:	085b      	lsrs	r3, r3, #1
 801bb94:	3b01      	subs	r3, #1
 801bb96:	041b      	lsls	r3, r3, #16
 801bb98:	431a      	orrs	r2, r3
 801bb9a:	687b      	ldr	r3, [r7, #4]
 801bb9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bb9e:	061b      	lsls	r3, r3, #24
 801bba0:	4928      	ldr	r1, [pc, #160]	; (801bc44 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801bba2:	4313      	orrs	r3, r2
 801bba4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 801bba8:	4b26      	ldr	r3, [pc, #152]	; (801bc44 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801bbaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801bbae:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 801bbb2:	687b      	ldr	r3, [r7, #4]
 801bbb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bbb6:	3b01      	subs	r3, #1
 801bbb8:	021b      	lsls	r3, r3, #8
 801bbba:	4922      	ldr	r1, [pc, #136]	; (801bc44 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801bbbc:	4313      	orrs	r3, r2
 801bbbe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 801bbc2:	687b      	ldr	r3, [r7, #4]
 801bbc4:	681b      	ldr	r3, [r3, #0]
 801bbc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bbca:	2b00      	cmp	r3, #0
 801bbcc:	d01d      	beq.n	801bc0a <HAL_RCCEx_PeriphCLKConfig+0x612>
 801bbce:	687b      	ldr	r3, [r7, #4]
 801bbd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801bbd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801bbd6:	d118      	bne.n	801bc0a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 801bbd8:	4b1a      	ldr	r3, [pc, #104]	; (801bc44 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801bbda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bbde:	0e1b      	lsrs	r3, r3, #24
 801bbe0:	f003 030f 	and.w	r3, r3, #15
 801bbe4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 801bbe6:	687b      	ldr	r3, [r7, #4]
 801bbe8:	699a      	ldr	r2, [r3, #24]
 801bbea:	687b      	ldr	r3, [r7, #4]
 801bbec:	69db      	ldr	r3, [r3, #28]
 801bbee:	019b      	lsls	r3, r3, #6
 801bbf0:	431a      	orrs	r2, r3
 801bbf2:	687b      	ldr	r3, [r7, #4]
 801bbf4:	6a1b      	ldr	r3, [r3, #32]
 801bbf6:	085b      	lsrs	r3, r3, #1
 801bbf8:	3b01      	subs	r3, #1
 801bbfa:	041b      	lsls	r3, r3, #16
 801bbfc:	431a      	orrs	r2, r3
 801bbfe:	68fb      	ldr	r3, [r7, #12]
 801bc00:	061b      	lsls	r3, r3, #24
 801bc02:	4910      	ldr	r1, [pc, #64]	; (801bc44 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801bc04:	4313      	orrs	r3, r2
 801bc06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 801bc0a:	4b0f      	ldr	r3, [pc, #60]	; (801bc48 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 801bc0c:	2201      	movs	r2, #1
 801bc0e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801bc10:	f7fc fdb0 	bl	8018774 <HAL_GetTick>
 801bc14:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801bc16:	e008      	b.n	801bc2a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 801bc18:	f7fc fdac 	bl	8018774 <HAL_GetTick>
 801bc1c:	4602      	mov	r2, r0
 801bc1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc20:	1ad3      	subs	r3, r2, r3
 801bc22:	2b02      	cmp	r3, #2
 801bc24:	d901      	bls.n	801bc2a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801bc26:	2303      	movs	r3, #3
 801bc28:	e007      	b.n	801bc3a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801bc2a:	4b06      	ldr	r3, [pc, #24]	; (801bc44 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801bc2c:	681b      	ldr	r3, [r3, #0]
 801bc2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801bc32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801bc36:	d1ef      	bne.n	801bc18 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 801bc38:	2300      	movs	r3, #0
}
 801bc3a:	4618      	mov	r0, r3
 801bc3c:	3730      	adds	r7, #48	; 0x30
 801bc3e:	46bd      	mov	sp, r7
 801bc40:	bd80      	pop	{r7, pc}
 801bc42:	bf00      	nop
 801bc44:	40023800 	.word	0x40023800
 801bc48:	42470070 	.word	0x42470070

0801bc4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801bc4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bc50:	b087      	sub	sp, #28
 801bc52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 801bc54:	2600      	movs	r6, #0
 801bc56:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 801bc58:	2600      	movs	r6, #0
 801bc5a:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 801bc5c:	2600      	movs	r6, #0
 801bc5e:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 801bc60:	2600      	movs	r6, #0
 801bc62:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 801bc64:	2600      	movs	r6, #0
 801bc66:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801bc68:	4ea3      	ldr	r6, [pc, #652]	; (801bef8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801bc6a:	68b6      	ldr	r6, [r6, #8]
 801bc6c:	f006 060c 	and.w	r6, r6, #12
 801bc70:	2e0c      	cmp	r6, #12
 801bc72:	f200 8137 	bhi.w	801bee4 <HAL_RCC_GetSysClockFreq+0x298>
 801bc76:	f20f 0c08 	addw	ip, pc, #8
 801bc7a:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 801bc7e:	bf00      	nop
 801bc80:	0801bcb5 	.word	0x0801bcb5
 801bc84:	0801bee5 	.word	0x0801bee5
 801bc88:	0801bee5 	.word	0x0801bee5
 801bc8c:	0801bee5 	.word	0x0801bee5
 801bc90:	0801bcbb 	.word	0x0801bcbb
 801bc94:	0801bee5 	.word	0x0801bee5
 801bc98:	0801bee5 	.word	0x0801bee5
 801bc9c:	0801bee5 	.word	0x0801bee5
 801bca0:	0801bcc1 	.word	0x0801bcc1
 801bca4:	0801bee5 	.word	0x0801bee5
 801bca8:	0801bee5 	.word	0x0801bee5
 801bcac:	0801bee5 	.word	0x0801bee5
 801bcb0:	0801bdd7 	.word	0x0801bdd7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801bcb4:	4b91      	ldr	r3, [pc, #580]	; (801befc <HAL_RCC_GetSysClockFreq+0x2b0>)
 801bcb6:	613b      	str	r3, [r7, #16]
       break;
 801bcb8:	e117      	b.n	801beea <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801bcba:	4b91      	ldr	r3, [pc, #580]	; (801bf00 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801bcbc:	613b      	str	r3, [r7, #16]
      break;
 801bcbe:	e114      	b.n	801beea <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801bcc0:	4b8d      	ldr	r3, [pc, #564]	; (801bef8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801bcc2:	685b      	ldr	r3, [r3, #4]
 801bcc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801bcc8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801bcca:	4b8b      	ldr	r3, [pc, #556]	; (801bef8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801bccc:	685b      	ldr	r3, [r3, #4]
 801bcce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bcd2:	2b00      	cmp	r3, #0
 801bcd4:	d024      	beq.n	801bd20 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801bcd6:	4b88      	ldr	r3, [pc, #544]	; (801bef8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801bcd8:	685b      	ldr	r3, [r3, #4]
 801bcda:	099b      	lsrs	r3, r3, #6
 801bcdc:	461a      	mov	r2, r3
 801bcde:	f04f 0300 	mov.w	r3, #0
 801bce2:	f240 14ff 	movw	r4, #511	; 0x1ff
 801bce6:	f04f 0500 	mov.w	r5, #0
 801bcea:	ea02 0004 	and.w	r0, r2, r4
 801bcee:	ea03 0105 	and.w	r1, r3, r5
 801bcf2:	4b83      	ldr	r3, [pc, #524]	; (801bf00 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801bcf4:	fb03 f201 	mul.w	r2, r3, r1
 801bcf8:	2300      	movs	r3, #0
 801bcfa:	fb03 f300 	mul.w	r3, r3, r0
 801bcfe:	4413      	add	r3, r2
 801bd00:	4a7f      	ldr	r2, [pc, #508]	; (801bf00 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801bd02:	fba0 0102 	umull	r0, r1, r0, r2
 801bd06:	440b      	add	r3, r1
 801bd08:	4619      	mov	r1, r3
 801bd0a:	68fb      	ldr	r3, [r7, #12]
 801bd0c:	461a      	mov	r2, r3
 801bd0e:	f04f 0300 	mov.w	r3, #0
 801bd12:	f7f0 f99d 	bl	800c050 <__aeabi_uldivmod>
 801bd16:	4602      	mov	r2, r0
 801bd18:	460b      	mov	r3, r1
 801bd1a:	4613      	mov	r3, r2
 801bd1c:	617b      	str	r3, [r7, #20]
 801bd1e:	e04c      	b.n	801bdba <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801bd20:	4b75      	ldr	r3, [pc, #468]	; (801bef8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801bd22:	685b      	ldr	r3, [r3, #4]
 801bd24:	099b      	lsrs	r3, r3, #6
 801bd26:	461a      	mov	r2, r3
 801bd28:	f04f 0300 	mov.w	r3, #0
 801bd2c:	f240 10ff 	movw	r0, #511	; 0x1ff
 801bd30:	f04f 0100 	mov.w	r1, #0
 801bd34:	ea02 0800 	and.w	r8, r2, r0
 801bd38:	ea03 0901 	and.w	r9, r3, r1
 801bd3c:	4640      	mov	r0, r8
 801bd3e:	4649      	mov	r1, r9
 801bd40:	f04f 0200 	mov.w	r2, #0
 801bd44:	f04f 0300 	mov.w	r3, #0
 801bd48:	014b      	lsls	r3, r1, #5
 801bd4a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 801bd4e:	0142      	lsls	r2, r0, #5
 801bd50:	4610      	mov	r0, r2
 801bd52:	4619      	mov	r1, r3
 801bd54:	ebb0 0008 	subs.w	r0, r0, r8
 801bd58:	eb61 0109 	sbc.w	r1, r1, r9
 801bd5c:	f04f 0200 	mov.w	r2, #0
 801bd60:	f04f 0300 	mov.w	r3, #0
 801bd64:	018b      	lsls	r3, r1, #6
 801bd66:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 801bd6a:	0182      	lsls	r2, r0, #6
 801bd6c:	1a12      	subs	r2, r2, r0
 801bd6e:	eb63 0301 	sbc.w	r3, r3, r1
 801bd72:	f04f 0000 	mov.w	r0, #0
 801bd76:	f04f 0100 	mov.w	r1, #0
 801bd7a:	00d9      	lsls	r1, r3, #3
 801bd7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801bd80:	00d0      	lsls	r0, r2, #3
 801bd82:	4602      	mov	r2, r0
 801bd84:	460b      	mov	r3, r1
 801bd86:	eb12 0208 	adds.w	r2, r2, r8
 801bd8a:	eb43 0309 	adc.w	r3, r3, r9
 801bd8e:	f04f 0000 	mov.w	r0, #0
 801bd92:	f04f 0100 	mov.w	r1, #0
 801bd96:	0299      	lsls	r1, r3, #10
 801bd98:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 801bd9c:	0290      	lsls	r0, r2, #10
 801bd9e:	4602      	mov	r2, r0
 801bda0:	460b      	mov	r3, r1
 801bda2:	4610      	mov	r0, r2
 801bda4:	4619      	mov	r1, r3
 801bda6:	68fb      	ldr	r3, [r7, #12]
 801bda8:	461a      	mov	r2, r3
 801bdaa:	f04f 0300 	mov.w	r3, #0
 801bdae:	f7f0 f94f 	bl	800c050 <__aeabi_uldivmod>
 801bdb2:	4602      	mov	r2, r0
 801bdb4:	460b      	mov	r3, r1
 801bdb6:	4613      	mov	r3, r2
 801bdb8:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801bdba:	4b4f      	ldr	r3, [pc, #316]	; (801bef8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801bdbc:	685b      	ldr	r3, [r3, #4]
 801bdbe:	0c1b      	lsrs	r3, r3, #16
 801bdc0:	f003 0303 	and.w	r3, r3, #3
 801bdc4:	3301      	adds	r3, #1
 801bdc6:	005b      	lsls	r3, r3, #1
 801bdc8:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 801bdca:	697a      	ldr	r2, [r7, #20]
 801bdcc:	68bb      	ldr	r3, [r7, #8]
 801bdce:	fbb2 f3f3 	udiv	r3, r2, r3
 801bdd2:	613b      	str	r3, [r7, #16]
      break;
 801bdd4:	e089      	b.n	801beea <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801bdd6:	4948      	ldr	r1, [pc, #288]	; (801bef8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801bdd8:	6849      	ldr	r1, [r1, #4]
 801bdda:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 801bdde:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801bde0:	4945      	ldr	r1, [pc, #276]	; (801bef8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801bde2:	6849      	ldr	r1, [r1, #4]
 801bde4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 801bde8:	2900      	cmp	r1, #0
 801bdea:	d024      	beq.n	801be36 <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801bdec:	4942      	ldr	r1, [pc, #264]	; (801bef8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801bdee:	6849      	ldr	r1, [r1, #4]
 801bdf0:	0989      	lsrs	r1, r1, #6
 801bdf2:	4608      	mov	r0, r1
 801bdf4:	f04f 0100 	mov.w	r1, #0
 801bdf8:	f240 14ff 	movw	r4, #511	; 0x1ff
 801bdfc:	f04f 0500 	mov.w	r5, #0
 801be00:	ea00 0204 	and.w	r2, r0, r4
 801be04:	ea01 0305 	and.w	r3, r1, r5
 801be08:	493d      	ldr	r1, [pc, #244]	; (801bf00 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801be0a:	fb01 f003 	mul.w	r0, r1, r3
 801be0e:	2100      	movs	r1, #0
 801be10:	fb01 f102 	mul.w	r1, r1, r2
 801be14:	1844      	adds	r4, r0, r1
 801be16:	493a      	ldr	r1, [pc, #232]	; (801bf00 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801be18:	fba2 0101 	umull	r0, r1, r2, r1
 801be1c:	1863      	adds	r3, r4, r1
 801be1e:	4619      	mov	r1, r3
 801be20:	68fb      	ldr	r3, [r7, #12]
 801be22:	461a      	mov	r2, r3
 801be24:	f04f 0300 	mov.w	r3, #0
 801be28:	f7f0 f912 	bl	800c050 <__aeabi_uldivmod>
 801be2c:	4602      	mov	r2, r0
 801be2e:	460b      	mov	r3, r1
 801be30:	4613      	mov	r3, r2
 801be32:	617b      	str	r3, [r7, #20]
 801be34:	e04a      	b.n	801becc <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801be36:	4b30      	ldr	r3, [pc, #192]	; (801bef8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801be38:	685b      	ldr	r3, [r3, #4]
 801be3a:	099b      	lsrs	r3, r3, #6
 801be3c:	461a      	mov	r2, r3
 801be3e:	f04f 0300 	mov.w	r3, #0
 801be42:	f240 10ff 	movw	r0, #511	; 0x1ff
 801be46:	f04f 0100 	mov.w	r1, #0
 801be4a:	ea02 0400 	and.w	r4, r2, r0
 801be4e:	ea03 0501 	and.w	r5, r3, r1
 801be52:	4620      	mov	r0, r4
 801be54:	4629      	mov	r1, r5
 801be56:	f04f 0200 	mov.w	r2, #0
 801be5a:	f04f 0300 	mov.w	r3, #0
 801be5e:	014b      	lsls	r3, r1, #5
 801be60:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 801be64:	0142      	lsls	r2, r0, #5
 801be66:	4610      	mov	r0, r2
 801be68:	4619      	mov	r1, r3
 801be6a:	1b00      	subs	r0, r0, r4
 801be6c:	eb61 0105 	sbc.w	r1, r1, r5
 801be70:	f04f 0200 	mov.w	r2, #0
 801be74:	f04f 0300 	mov.w	r3, #0
 801be78:	018b      	lsls	r3, r1, #6
 801be7a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 801be7e:	0182      	lsls	r2, r0, #6
 801be80:	1a12      	subs	r2, r2, r0
 801be82:	eb63 0301 	sbc.w	r3, r3, r1
 801be86:	f04f 0000 	mov.w	r0, #0
 801be8a:	f04f 0100 	mov.w	r1, #0
 801be8e:	00d9      	lsls	r1, r3, #3
 801be90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801be94:	00d0      	lsls	r0, r2, #3
 801be96:	4602      	mov	r2, r0
 801be98:	460b      	mov	r3, r1
 801be9a:	1912      	adds	r2, r2, r4
 801be9c:	eb45 0303 	adc.w	r3, r5, r3
 801bea0:	f04f 0000 	mov.w	r0, #0
 801bea4:	f04f 0100 	mov.w	r1, #0
 801bea8:	0299      	lsls	r1, r3, #10
 801beaa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 801beae:	0290      	lsls	r0, r2, #10
 801beb0:	4602      	mov	r2, r0
 801beb2:	460b      	mov	r3, r1
 801beb4:	4610      	mov	r0, r2
 801beb6:	4619      	mov	r1, r3
 801beb8:	68fb      	ldr	r3, [r7, #12]
 801beba:	461a      	mov	r2, r3
 801bebc:	f04f 0300 	mov.w	r3, #0
 801bec0:	f7f0 f8c6 	bl	800c050 <__aeabi_uldivmod>
 801bec4:	4602      	mov	r2, r0
 801bec6:	460b      	mov	r3, r1
 801bec8:	4613      	mov	r3, r2
 801beca:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 801becc:	4b0a      	ldr	r3, [pc, #40]	; (801bef8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801bece:	685b      	ldr	r3, [r3, #4]
 801bed0:	0f1b      	lsrs	r3, r3, #28
 801bed2:	f003 0307 	and.w	r3, r3, #7
 801bed6:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 801bed8:	697a      	ldr	r2, [r7, #20]
 801beda:	687b      	ldr	r3, [r7, #4]
 801bedc:	fbb2 f3f3 	udiv	r3, r2, r3
 801bee0:	613b      	str	r3, [r7, #16]
      break;
 801bee2:	e002      	b.n	801beea <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801bee4:	4b05      	ldr	r3, [pc, #20]	; (801befc <HAL_RCC_GetSysClockFreq+0x2b0>)
 801bee6:	613b      	str	r3, [r7, #16]
      break;
 801bee8:	bf00      	nop
    }
  }
  return sysclockfreq;
 801beea:	693b      	ldr	r3, [r7, #16]
}
 801beec:	4618      	mov	r0, r3
 801beee:	371c      	adds	r7, #28
 801bef0:	46bd      	mov	sp, r7
 801bef2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bef6:	bf00      	nop
 801bef8:	40023800 	.word	0x40023800
 801befc:	00f42400 	.word	0x00f42400
 801bf00:	017d7840 	.word	0x017d7840

0801bf04 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801bf04:	b580      	push	{r7, lr}
 801bf06:	b086      	sub	sp, #24
 801bf08:	af00      	add	r7, sp, #0
 801bf0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801bf0c:	687b      	ldr	r3, [r7, #4]
 801bf0e:	2b00      	cmp	r3, #0
 801bf10:	d101      	bne.n	801bf16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801bf12:	2301      	movs	r3, #1
 801bf14:	e28d      	b.n	801c432 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801bf16:	687b      	ldr	r3, [r7, #4]
 801bf18:	681b      	ldr	r3, [r3, #0]
 801bf1a:	f003 0301 	and.w	r3, r3, #1
 801bf1e:	2b00      	cmp	r3, #0
 801bf20:	f000 8083 	beq.w	801c02a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 801bf24:	4b94      	ldr	r3, [pc, #592]	; (801c178 <HAL_RCC_OscConfig+0x274>)
 801bf26:	689b      	ldr	r3, [r3, #8]
 801bf28:	f003 030c 	and.w	r3, r3, #12
 801bf2c:	2b04      	cmp	r3, #4
 801bf2e:	d019      	beq.n	801bf64 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 801bf30:	4b91      	ldr	r3, [pc, #580]	; (801c178 <HAL_RCC_OscConfig+0x274>)
 801bf32:	689b      	ldr	r3, [r3, #8]
 801bf34:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 801bf38:	2b08      	cmp	r3, #8
 801bf3a:	d106      	bne.n	801bf4a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 801bf3c:	4b8e      	ldr	r3, [pc, #568]	; (801c178 <HAL_RCC_OscConfig+0x274>)
 801bf3e:	685b      	ldr	r3, [r3, #4]
 801bf40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bf44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801bf48:	d00c      	beq.n	801bf64 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801bf4a:	4b8b      	ldr	r3, [pc, #556]	; (801c178 <HAL_RCC_OscConfig+0x274>)
 801bf4c:	689b      	ldr	r3, [r3, #8]
 801bf4e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 801bf52:	2b0c      	cmp	r3, #12
 801bf54:	d112      	bne.n	801bf7c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801bf56:	4b88      	ldr	r3, [pc, #544]	; (801c178 <HAL_RCC_OscConfig+0x274>)
 801bf58:	685b      	ldr	r3, [r3, #4]
 801bf5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bf5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801bf62:	d10b      	bne.n	801bf7c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801bf64:	4b84      	ldr	r3, [pc, #528]	; (801c178 <HAL_RCC_OscConfig+0x274>)
 801bf66:	681b      	ldr	r3, [r3, #0]
 801bf68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bf6c:	2b00      	cmp	r3, #0
 801bf6e:	d05b      	beq.n	801c028 <HAL_RCC_OscConfig+0x124>
 801bf70:	687b      	ldr	r3, [r7, #4]
 801bf72:	685b      	ldr	r3, [r3, #4]
 801bf74:	2b00      	cmp	r3, #0
 801bf76:	d157      	bne.n	801c028 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 801bf78:	2301      	movs	r3, #1
 801bf7a:	e25a      	b.n	801c432 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801bf7c:	687b      	ldr	r3, [r7, #4]
 801bf7e:	685b      	ldr	r3, [r3, #4]
 801bf80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801bf84:	d106      	bne.n	801bf94 <HAL_RCC_OscConfig+0x90>
 801bf86:	4b7c      	ldr	r3, [pc, #496]	; (801c178 <HAL_RCC_OscConfig+0x274>)
 801bf88:	681b      	ldr	r3, [r3, #0]
 801bf8a:	4a7b      	ldr	r2, [pc, #492]	; (801c178 <HAL_RCC_OscConfig+0x274>)
 801bf8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bf90:	6013      	str	r3, [r2, #0]
 801bf92:	e01d      	b.n	801bfd0 <HAL_RCC_OscConfig+0xcc>
 801bf94:	687b      	ldr	r3, [r7, #4]
 801bf96:	685b      	ldr	r3, [r3, #4]
 801bf98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801bf9c:	d10c      	bne.n	801bfb8 <HAL_RCC_OscConfig+0xb4>
 801bf9e:	4b76      	ldr	r3, [pc, #472]	; (801c178 <HAL_RCC_OscConfig+0x274>)
 801bfa0:	681b      	ldr	r3, [r3, #0]
 801bfa2:	4a75      	ldr	r2, [pc, #468]	; (801c178 <HAL_RCC_OscConfig+0x274>)
 801bfa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801bfa8:	6013      	str	r3, [r2, #0]
 801bfaa:	4b73      	ldr	r3, [pc, #460]	; (801c178 <HAL_RCC_OscConfig+0x274>)
 801bfac:	681b      	ldr	r3, [r3, #0]
 801bfae:	4a72      	ldr	r2, [pc, #456]	; (801c178 <HAL_RCC_OscConfig+0x274>)
 801bfb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bfb4:	6013      	str	r3, [r2, #0]
 801bfb6:	e00b      	b.n	801bfd0 <HAL_RCC_OscConfig+0xcc>
 801bfb8:	4b6f      	ldr	r3, [pc, #444]	; (801c178 <HAL_RCC_OscConfig+0x274>)
 801bfba:	681b      	ldr	r3, [r3, #0]
 801bfbc:	4a6e      	ldr	r2, [pc, #440]	; (801c178 <HAL_RCC_OscConfig+0x274>)
 801bfbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801bfc2:	6013      	str	r3, [r2, #0]
 801bfc4:	4b6c      	ldr	r3, [pc, #432]	; (801c178 <HAL_RCC_OscConfig+0x274>)
 801bfc6:	681b      	ldr	r3, [r3, #0]
 801bfc8:	4a6b      	ldr	r2, [pc, #428]	; (801c178 <HAL_RCC_OscConfig+0x274>)
 801bfca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801bfce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801bfd0:	687b      	ldr	r3, [r7, #4]
 801bfd2:	685b      	ldr	r3, [r3, #4]
 801bfd4:	2b00      	cmp	r3, #0
 801bfd6:	d013      	beq.n	801c000 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bfd8:	f7fc fbcc 	bl	8018774 <HAL_GetTick>
 801bfdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801bfde:	e008      	b.n	801bff2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801bfe0:	f7fc fbc8 	bl	8018774 <HAL_GetTick>
 801bfe4:	4602      	mov	r2, r0
 801bfe6:	693b      	ldr	r3, [r7, #16]
 801bfe8:	1ad3      	subs	r3, r2, r3
 801bfea:	2b64      	cmp	r3, #100	; 0x64
 801bfec:	d901      	bls.n	801bff2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 801bfee:	2303      	movs	r3, #3
 801bff0:	e21f      	b.n	801c432 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801bff2:	4b61      	ldr	r3, [pc, #388]	; (801c178 <HAL_RCC_OscConfig+0x274>)
 801bff4:	681b      	ldr	r3, [r3, #0]
 801bff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bffa:	2b00      	cmp	r3, #0
 801bffc:	d0f0      	beq.n	801bfe0 <HAL_RCC_OscConfig+0xdc>
 801bffe:	e014      	b.n	801c02a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c000:	f7fc fbb8 	bl	8018774 <HAL_GetTick>
 801c004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801c006:	e008      	b.n	801c01a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801c008:	f7fc fbb4 	bl	8018774 <HAL_GetTick>
 801c00c:	4602      	mov	r2, r0
 801c00e:	693b      	ldr	r3, [r7, #16]
 801c010:	1ad3      	subs	r3, r2, r3
 801c012:	2b64      	cmp	r3, #100	; 0x64
 801c014:	d901      	bls.n	801c01a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 801c016:	2303      	movs	r3, #3
 801c018:	e20b      	b.n	801c432 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801c01a:	4b57      	ldr	r3, [pc, #348]	; (801c178 <HAL_RCC_OscConfig+0x274>)
 801c01c:	681b      	ldr	r3, [r3, #0]
 801c01e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c022:	2b00      	cmp	r3, #0
 801c024:	d1f0      	bne.n	801c008 <HAL_RCC_OscConfig+0x104>
 801c026:	e000      	b.n	801c02a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801c028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801c02a:	687b      	ldr	r3, [r7, #4]
 801c02c:	681b      	ldr	r3, [r3, #0]
 801c02e:	f003 0302 	and.w	r3, r3, #2
 801c032:	2b00      	cmp	r3, #0
 801c034:	d06f      	beq.n	801c116 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 801c036:	4b50      	ldr	r3, [pc, #320]	; (801c178 <HAL_RCC_OscConfig+0x274>)
 801c038:	689b      	ldr	r3, [r3, #8]
 801c03a:	f003 030c 	and.w	r3, r3, #12
 801c03e:	2b00      	cmp	r3, #0
 801c040:	d017      	beq.n	801c072 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 801c042:	4b4d      	ldr	r3, [pc, #308]	; (801c178 <HAL_RCC_OscConfig+0x274>)
 801c044:	689b      	ldr	r3, [r3, #8]
 801c046:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 801c04a:	2b08      	cmp	r3, #8
 801c04c:	d105      	bne.n	801c05a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 801c04e:	4b4a      	ldr	r3, [pc, #296]	; (801c178 <HAL_RCC_OscConfig+0x274>)
 801c050:	685b      	ldr	r3, [r3, #4]
 801c052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801c056:	2b00      	cmp	r3, #0
 801c058:	d00b      	beq.n	801c072 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801c05a:	4b47      	ldr	r3, [pc, #284]	; (801c178 <HAL_RCC_OscConfig+0x274>)
 801c05c:	689b      	ldr	r3, [r3, #8]
 801c05e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 801c062:	2b0c      	cmp	r3, #12
 801c064:	d11c      	bne.n	801c0a0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801c066:	4b44      	ldr	r3, [pc, #272]	; (801c178 <HAL_RCC_OscConfig+0x274>)
 801c068:	685b      	ldr	r3, [r3, #4]
 801c06a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801c06e:	2b00      	cmp	r3, #0
 801c070:	d116      	bne.n	801c0a0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801c072:	4b41      	ldr	r3, [pc, #260]	; (801c178 <HAL_RCC_OscConfig+0x274>)
 801c074:	681b      	ldr	r3, [r3, #0]
 801c076:	f003 0302 	and.w	r3, r3, #2
 801c07a:	2b00      	cmp	r3, #0
 801c07c:	d005      	beq.n	801c08a <HAL_RCC_OscConfig+0x186>
 801c07e:	687b      	ldr	r3, [r7, #4]
 801c080:	68db      	ldr	r3, [r3, #12]
 801c082:	2b01      	cmp	r3, #1
 801c084:	d001      	beq.n	801c08a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 801c086:	2301      	movs	r3, #1
 801c088:	e1d3      	b.n	801c432 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c08a:	4b3b      	ldr	r3, [pc, #236]	; (801c178 <HAL_RCC_OscConfig+0x274>)
 801c08c:	681b      	ldr	r3, [r3, #0]
 801c08e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801c092:	687b      	ldr	r3, [r7, #4]
 801c094:	691b      	ldr	r3, [r3, #16]
 801c096:	00db      	lsls	r3, r3, #3
 801c098:	4937      	ldr	r1, [pc, #220]	; (801c178 <HAL_RCC_OscConfig+0x274>)
 801c09a:	4313      	orrs	r3, r2
 801c09c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801c09e:	e03a      	b.n	801c116 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801c0a0:	687b      	ldr	r3, [r7, #4]
 801c0a2:	68db      	ldr	r3, [r3, #12]
 801c0a4:	2b00      	cmp	r3, #0
 801c0a6:	d020      	beq.n	801c0ea <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801c0a8:	4b34      	ldr	r3, [pc, #208]	; (801c17c <HAL_RCC_OscConfig+0x278>)
 801c0aa:	2201      	movs	r2, #1
 801c0ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c0ae:	f7fc fb61 	bl	8018774 <HAL_GetTick>
 801c0b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801c0b4:	e008      	b.n	801c0c8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801c0b6:	f7fc fb5d 	bl	8018774 <HAL_GetTick>
 801c0ba:	4602      	mov	r2, r0
 801c0bc:	693b      	ldr	r3, [r7, #16]
 801c0be:	1ad3      	subs	r3, r2, r3
 801c0c0:	2b02      	cmp	r3, #2
 801c0c2:	d901      	bls.n	801c0c8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 801c0c4:	2303      	movs	r3, #3
 801c0c6:	e1b4      	b.n	801c432 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801c0c8:	4b2b      	ldr	r3, [pc, #172]	; (801c178 <HAL_RCC_OscConfig+0x274>)
 801c0ca:	681b      	ldr	r3, [r3, #0]
 801c0cc:	f003 0302 	and.w	r3, r3, #2
 801c0d0:	2b00      	cmp	r3, #0
 801c0d2:	d0f0      	beq.n	801c0b6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c0d4:	4b28      	ldr	r3, [pc, #160]	; (801c178 <HAL_RCC_OscConfig+0x274>)
 801c0d6:	681b      	ldr	r3, [r3, #0]
 801c0d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801c0dc:	687b      	ldr	r3, [r7, #4]
 801c0de:	691b      	ldr	r3, [r3, #16]
 801c0e0:	00db      	lsls	r3, r3, #3
 801c0e2:	4925      	ldr	r1, [pc, #148]	; (801c178 <HAL_RCC_OscConfig+0x274>)
 801c0e4:	4313      	orrs	r3, r2
 801c0e6:	600b      	str	r3, [r1, #0]
 801c0e8:	e015      	b.n	801c116 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801c0ea:	4b24      	ldr	r3, [pc, #144]	; (801c17c <HAL_RCC_OscConfig+0x278>)
 801c0ec:	2200      	movs	r2, #0
 801c0ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c0f0:	f7fc fb40 	bl	8018774 <HAL_GetTick>
 801c0f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801c0f6:	e008      	b.n	801c10a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801c0f8:	f7fc fb3c 	bl	8018774 <HAL_GetTick>
 801c0fc:	4602      	mov	r2, r0
 801c0fe:	693b      	ldr	r3, [r7, #16]
 801c100:	1ad3      	subs	r3, r2, r3
 801c102:	2b02      	cmp	r3, #2
 801c104:	d901      	bls.n	801c10a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 801c106:	2303      	movs	r3, #3
 801c108:	e193      	b.n	801c432 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801c10a:	4b1b      	ldr	r3, [pc, #108]	; (801c178 <HAL_RCC_OscConfig+0x274>)
 801c10c:	681b      	ldr	r3, [r3, #0]
 801c10e:	f003 0302 	and.w	r3, r3, #2
 801c112:	2b00      	cmp	r3, #0
 801c114:	d1f0      	bne.n	801c0f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801c116:	687b      	ldr	r3, [r7, #4]
 801c118:	681b      	ldr	r3, [r3, #0]
 801c11a:	f003 0308 	and.w	r3, r3, #8
 801c11e:	2b00      	cmp	r3, #0
 801c120:	d036      	beq.n	801c190 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801c122:	687b      	ldr	r3, [r7, #4]
 801c124:	695b      	ldr	r3, [r3, #20]
 801c126:	2b00      	cmp	r3, #0
 801c128:	d016      	beq.n	801c158 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801c12a:	4b15      	ldr	r3, [pc, #84]	; (801c180 <HAL_RCC_OscConfig+0x27c>)
 801c12c:	2201      	movs	r2, #1
 801c12e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c130:	f7fc fb20 	bl	8018774 <HAL_GetTick>
 801c134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801c136:	e008      	b.n	801c14a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801c138:	f7fc fb1c 	bl	8018774 <HAL_GetTick>
 801c13c:	4602      	mov	r2, r0
 801c13e:	693b      	ldr	r3, [r7, #16]
 801c140:	1ad3      	subs	r3, r2, r3
 801c142:	2b02      	cmp	r3, #2
 801c144:	d901      	bls.n	801c14a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 801c146:	2303      	movs	r3, #3
 801c148:	e173      	b.n	801c432 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801c14a:	4b0b      	ldr	r3, [pc, #44]	; (801c178 <HAL_RCC_OscConfig+0x274>)
 801c14c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c14e:	f003 0302 	and.w	r3, r3, #2
 801c152:	2b00      	cmp	r3, #0
 801c154:	d0f0      	beq.n	801c138 <HAL_RCC_OscConfig+0x234>
 801c156:	e01b      	b.n	801c190 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801c158:	4b09      	ldr	r3, [pc, #36]	; (801c180 <HAL_RCC_OscConfig+0x27c>)
 801c15a:	2200      	movs	r2, #0
 801c15c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c15e:	f7fc fb09 	bl	8018774 <HAL_GetTick>
 801c162:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801c164:	e00e      	b.n	801c184 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801c166:	f7fc fb05 	bl	8018774 <HAL_GetTick>
 801c16a:	4602      	mov	r2, r0
 801c16c:	693b      	ldr	r3, [r7, #16]
 801c16e:	1ad3      	subs	r3, r2, r3
 801c170:	2b02      	cmp	r3, #2
 801c172:	d907      	bls.n	801c184 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 801c174:	2303      	movs	r3, #3
 801c176:	e15c      	b.n	801c432 <HAL_RCC_OscConfig+0x52e>
 801c178:	40023800 	.word	0x40023800
 801c17c:	42470000 	.word	0x42470000
 801c180:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801c184:	4b8a      	ldr	r3, [pc, #552]	; (801c3b0 <HAL_RCC_OscConfig+0x4ac>)
 801c186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c188:	f003 0302 	and.w	r3, r3, #2
 801c18c:	2b00      	cmp	r3, #0
 801c18e:	d1ea      	bne.n	801c166 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801c190:	687b      	ldr	r3, [r7, #4]
 801c192:	681b      	ldr	r3, [r3, #0]
 801c194:	f003 0304 	and.w	r3, r3, #4
 801c198:	2b00      	cmp	r3, #0
 801c19a:	f000 8097 	beq.w	801c2cc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801c19e:	2300      	movs	r3, #0
 801c1a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801c1a2:	4b83      	ldr	r3, [pc, #524]	; (801c3b0 <HAL_RCC_OscConfig+0x4ac>)
 801c1a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c1a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c1aa:	2b00      	cmp	r3, #0
 801c1ac:	d10f      	bne.n	801c1ce <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801c1ae:	2300      	movs	r3, #0
 801c1b0:	60bb      	str	r3, [r7, #8]
 801c1b2:	4b7f      	ldr	r3, [pc, #508]	; (801c3b0 <HAL_RCC_OscConfig+0x4ac>)
 801c1b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c1b6:	4a7e      	ldr	r2, [pc, #504]	; (801c3b0 <HAL_RCC_OscConfig+0x4ac>)
 801c1b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801c1bc:	6413      	str	r3, [r2, #64]	; 0x40
 801c1be:	4b7c      	ldr	r3, [pc, #496]	; (801c3b0 <HAL_RCC_OscConfig+0x4ac>)
 801c1c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c1c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c1c6:	60bb      	str	r3, [r7, #8]
 801c1c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801c1ca:	2301      	movs	r3, #1
 801c1cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801c1ce:	4b79      	ldr	r3, [pc, #484]	; (801c3b4 <HAL_RCC_OscConfig+0x4b0>)
 801c1d0:	681b      	ldr	r3, [r3, #0]
 801c1d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c1d6:	2b00      	cmp	r3, #0
 801c1d8:	d118      	bne.n	801c20c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801c1da:	4b76      	ldr	r3, [pc, #472]	; (801c3b4 <HAL_RCC_OscConfig+0x4b0>)
 801c1dc:	681b      	ldr	r3, [r3, #0]
 801c1de:	4a75      	ldr	r2, [pc, #468]	; (801c3b4 <HAL_RCC_OscConfig+0x4b0>)
 801c1e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c1e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801c1e6:	f7fc fac5 	bl	8018774 <HAL_GetTick>
 801c1ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801c1ec:	e008      	b.n	801c200 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801c1ee:	f7fc fac1 	bl	8018774 <HAL_GetTick>
 801c1f2:	4602      	mov	r2, r0
 801c1f4:	693b      	ldr	r3, [r7, #16]
 801c1f6:	1ad3      	subs	r3, r2, r3
 801c1f8:	2b02      	cmp	r3, #2
 801c1fa:	d901      	bls.n	801c200 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 801c1fc:	2303      	movs	r3, #3
 801c1fe:	e118      	b.n	801c432 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801c200:	4b6c      	ldr	r3, [pc, #432]	; (801c3b4 <HAL_RCC_OscConfig+0x4b0>)
 801c202:	681b      	ldr	r3, [r3, #0]
 801c204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c208:	2b00      	cmp	r3, #0
 801c20a:	d0f0      	beq.n	801c1ee <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801c20c:	687b      	ldr	r3, [r7, #4]
 801c20e:	689b      	ldr	r3, [r3, #8]
 801c210:	2b01      	cmp	r3, #1
 801c212:	d106      	bne.n	801c222 <HAL_RCC_OscConfig+0x31e>
 801c214:	4b66      	ldr	r3, [pc, #408]	; (801c3b0 <HAL_RCC_OscConfig+0x4ac>)
 801c216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c218:	4a65      	ldr	r2, [pc, #404]	; (801c3b0 <HAL_RCC_OscConfig+0x4ac>)
 801c21a:	f043 0301 	orr.w	r3, r3, #1
 801c21e:	6713      	str	r3, [r2, #112]	; 0x70
 801c220:	e01c      	b.n	801c25c <HAL_RCC_OscConfig+0x358>
 801c222:	687b      	ldr	r3, [r7, #4]
 801c224:	689b      	ldr	r3, [r3, #8]
 801c226:	2b05      	cmp	r3, #5
 801c228:	d10c      	bne.n	801c244 <HAL_RCC_OscConfig+0x340>
 801c22a:	4b61      	ldr	r3, [pc, #388]	; (801c3b0 <HAL_RCC_OscConfig+0x4ac>)
 801c22c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c22e:	4a60      	ldr	r2, [pc, #384]	; (801c3b0 <HAL_RCC_OscConfig+0x4ac>)
 801c230:	f043 0304 	orr.w	r3, r3, #4
 801c234:	6713      	str	r3, [r2, #112]	; 0x70
 801c236:	4b5e      	ldr	r3, [pc, #376]	; (801c3b0 <HAL_RCC_OscConfig+0x4ac>)
 801c238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c23a:	4a5d      	ldr	r2, [pc, #372]	; (801c3b0 <HAL_RCC_OscConfig+0x4ac>)
 801c23c:	f043 0301 	orr.w	r3, r3, #1
 801c240:	6713      	str	r3, [r2, #112]	; 0x70
 801c242:	e00b      	b.n	801c25c <HAL_RCC_OscConfig+0x358>
 801c244:	4b5a      	ldr	r3, [pc, #360]	; (801c3b0 <HAL_RCC_OscConfig+0x4ac>)
 801c246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c248:	4a59      	ldr	r2, [pc, #356]	; (801c3b0 <HAL_RCC_OscConfig+0x4ac>)
 801c24a:	f023 0301 	bic.w	r3, r3, #1
 801c24e:	6713      	str	r3, [r2, #112]	; 0x70
 801c250:	4b57      	ldr	r3, [pc, #348]	; (801c3b0 <HAL_RCC_OscConfig+0x4ac>)
 801c252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c254:	4a56      	ldr	r2, [pc, #344]	; (801c3b0 <HAL_RCC_OscConfig+0x4ac>)
 801c256:	f023 0304 	bic.w	r3, r3, #4
 801c25a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801c25c:	687b      	ldr	r3, [r7, #4]
 801c25e:	689b      	ldr	r3, [r3, #8]
 801c260:	2b00      	cmp	r3, #0
 801c262:	d015      	beq.n	801c290 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c264:	f7fc fa86 	bl	8018774 <HAL_GetTick>
 801c268:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801c26a:	e00a      	b.n	801c282 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801c26c:	f7fc fa82 	bl	8018774 <HAL_GetTick>
 801c270:	4602      	mov	r2, r0
 801c272:	693b      	ldr	r3, [r7, #16]
 801c274:	1ad3      	subs	r3, r2, r3
 801c276:	f241 3288 	movw	r2, #5000	; 0x1388
 801c27a:	4293      	cmp	r3, r2
 801c27c:	d901      	bls.n	801c282 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 801c27e:	2303      	movs	r3, #3
 801c280:	e0d7      	b.n	801c432 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801c282:	4b4b      	ldr	r3, [pc, #300]	; (801c3b0 <HAL_RCC_OscConfig+0x4ac>)
 801c284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c286:	f003 0302 	and.w	r3, r3, #2
 801c28a:	2b00      	cmp	r3, #0
 801c28c:	d0ee      	beq.n	801c26c <HAL_RCC_OscConfig+0x368>
 801c28e:	e014      	b.n	801c2ba <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c290:	f7fc fa70 	bl	8018774 <HAL_GetTick>
 801c294:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801c296:	e00a      	b.n	801c2ae <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801c298:	f7fc fa6c 	bl	8018774 <HAL_GetTick>
 801c29c:	4602      	mov	r2, r0
 801c29e:	693b      	ldr	r3, [r7, #16]
 801c2a0:	1ad3      	subs	r3, r2, r3
 801c2a2:	f241 3288 	movw	r2, #5000	; 0x1388
 801c2a6:	4293      	cmp	r3, r2
 801c2a8:	d901      	bls.n	801c2ae <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 801c2aa:	2303      	movs	r3, #3
 801c2ac:	e0c1      	b.n	801c432 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801c2ae:	4b40      	ldr	r3, [pc, #256]	; (801c3b0 <HAL_RCC_OscConfig+0x4ac>)
 801c2b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c2b2:	f003 0302 	and.w	r3, r3, #2
 801c2b6:	2b00      	cmp	r3, #0
 801c2b8:	d1ee      	bne.n	801c298 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801c2ba:	7dfb      	ldrb	r3, [r7, #23]
 801c2bc:	2b01      	cmp	r3, #1
 801c2be:	d105      	bne.n	801c2cc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801c2c0:	4b3b      	ldr	r3, [pc, #236]	; (801c3b0 <HAL_RCC_OscConfig+0x4ac>)
 801c2c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c2c4:	4a3a      	ldr	r2, [pc, #232]	; (801c3b0 <HAL_RCC_OscConfig+0x4ac>)
 801c2c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801c2ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801c2cc:	687b      	ldr	r3, [r7, #4]
 801c2ce:	699b      	ldr	r3, [r3, #24]
 801c2d0:	2b00      	cmp	r3, #0
 801c2d2:	f000 80ad 	beq.w	801c430 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801c2d6:	4b36      	ldr	r3, [pc, #216]	; (801c3b0 <HAL_RCC_OscConfig+0x4ac>)
 801c2d8:	689b      	ldr	r3, [r3, #8]
 801c2da:	f003 030c 	and.w	r3, r3, #12
 801c2de:	2b08      	cmp	r3, #8
 801c2e0:	d060      	beq.n	801c3a4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801c2e2:	687b      	ldr	r3, [r7, #4]
 801c2e4:	699b      	ldr	r3, [r3, #24]
 801c2e6:	2b02      	cmp	r3, #2
 801c2e8:	d145      	bne.n	801c376 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c2ea:	4b33      	ldr	r3, [pc, #204]	; (801c3b8 <HAL_RCC_OscConfig+0x4b4>)
 801c2ec:	2200      	movs	r2, #0
 801c2ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c2f0:	f7fc fa40 	bl	8018774 <HAL_GetTick>
 801c2f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801c2f6:	e008      	b.n	801c30a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801c2f8:	f7fc fa3c 	bl	8018774 <HAL_GetTick>
 801c2fc:	4602      	mov	r2, r0
 801c2fe:	693b      	ldr	r3, [r7, #16]
 801c300:	1ad3      	subs	r3, r2, r3
 801c302:	2b02      	cmp	r3, #2
 801c304:	d901      	bls.n	801c30a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 801c306:	2303      	movs	r3, #3
 801c308:	e093      	b.n	801c432 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801c30a:	4b29      	ldr	r3, [pc, #164]	; (801c3b0 <HAL_RCC_OscConfig+0x4ac>)
 801c30c:	681b      	ldr	r3, [r3, #0]
 801c30e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c312:	2b00      	cmp	r3, #0
 801c314:	d1f0      	bne.n	801c2f8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801c316:	687b      	ldr	r3, [r7, #4]
 801c318:	69da      	ldr	r2, [r3, #28]
 801c31a:	687b      	ldr	r3, [r7, #4]
 801c31c:	6a1b      	ldr	r3, [r3, #32]
 801c31e:	431a      	orrs	r2, r3
 801c320:	687b      	ldr	r3, [r7, #4]
 801c322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c324:	019b      	lsls	r3, r3, #6
 801c326:	431a      	orrs	r2, r3
 801c328:	687b      	ldr	r3, [r7, #4]
 801c32a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c32c:	085b      	lsrs	r3, r3, #1
 801c32e:	3b01      	subs	r3, #1
 801c330:	041b      	lsls	r3, r3, #16
 801c332:	431a      	orrs	r2, r3
 801c334:	687b      	ldr	r3, [r7, #4]
 801c336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c338:	061b      	lsls	r3, r3, #24
 801c33a:	431a      	orrs	r2, r3
 801c33c:	687b      	ldr	r3, [r7, #4]
 801c33e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c340:	071b      	lsls	r3, r3, #28
 801c342:	491b      	ldr	r1, [pc, #108]	; (801c3b0 <HAL_RCC_OscConfig+0x4ac>)
 801c344:	4313      	orrs	r3, r2
 801c346:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801c348:	4b1b      	ldr	r3, [pc, #108]	; (801c3b8 <HAL_RCC_OscConfig+0x4b4>)
 801c34a:	2201      	movs	r2, #1
 801c34c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c34e:	f7fc fa11 	bl	8018774 <HAL_GetTick>
 801c352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801c354:	e008      	b.n	801c368 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801c356:	f7fc fa0d 	bl	8018774 <HAL_GetTick>
 801c35a:	4602      	mov	r2, r0
 801c35c:	693b      	ldr	r3, [r7, #16]
 801c35e:	1ad3      	subs	r3, r2, r3
 801c360:	2b02      	cmp	r3, #2
 801c362:	d901      	bls.n	801c368 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 801c364:	2303      	movs	r3, #3
 801c366:	e064      	b.n	801c432 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801c368:	4b11      	ldr	r3, [pc, #68]	; (801c3b0 <HAL_RCC_OscConfig+0x4ac>)
 801c36a:	681b      	ldr	r3, [r3, #0]
 801c36c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c370:	2b00      	cmp	r3, #0
 801c372:	d0f0      	beq.n	801c356 <HAL_RCC_OscConfig+0x452>
 801c374:	e05c      	b.n	801c430 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c376:	4b10      	ldr	r3, [pc, #64]	; (801c3b8 <HAL_RCC_OscConfig+0x4b4>)
 801c378:	2200      	movs	r2, #0
 801c37a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c37c:	f7fc f9fa 	bl	8018774 <HAL_GetTick>
 801c380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801c382:	e008      	b.n	801c396 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801c384:	f7fc f9f6 	bl	8018774 <HAL_GetTick>
 801c388:	4602      	mov	r2, r0
 801c38a:	693b      	ldr	r3, [r7, #16]
 801c38c:	1ad3      	subs	r3, r2, r3
 801c38e:	2b02      	cmp	r3, #2
 801c390:	d901      	bls.n	801c396 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 801c392:	2303      	movs	r3, #3
 801c394:	e04d      	b.n	801c432 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801c396:	4b06      	ldr	r3, [pc, #24]	; (801c3b0 <HAL_RCC_OscConfig+0x4ac>)
 801c398:	681b      	ldr	r3, [r3, #0]
 801c39a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c39e:	2b00      	cmp	r3, #0
 801c3a0:	d1f0      	bne.n	801c384 <HAL_RCC_OscConfig+0x480>
 801c3a2:	e045      	b.n	801c430 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801c3a4:	687b      	ldr	r3, [r7, #4]
 801c3a6:	699b      	ldr	r3, [r3, #24]
 801c3a8:	2b01      	cmp	r3, #1
 801c3aa:	d107      	bne.n	801c3bc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 801c3ac:	2301      	movs	r3, #1
 801c3ae:	e040      	b.n	801c432 <HAL_RCC_OscConfig+0x52e>
 801c3b0:	40023800 	.word	0x40023800
 801c3b4:	40007000 	.word	0x40007000
 801c3b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801c3bc:	4b1f      	ldr	r3, [pc, #124]	; (801c43c <HAL_RCC_OscConfig+0x538>)
 801c3be:	685b      	ldr	r3, [r3, #4]
 801c3c0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801c3c2:	687b      	ldr	r3, [r7, #4]
 801c3c4:	699b      	ldr	r3, [r3, #24]
 801c3c6:	2b01      	cmp	r3, #1
 801c3c8:	d030      	beq.n	801c42c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c3ca:	68fb      	ldr	r3, [r7, #12]
 801c3cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801c3d0:	687b      	ldr	r3, [r7, #4]
 801c3d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801c3d4:	429a      	cmp	r2, r3
 801c3d6:	d129      	bne.n	801c42c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801c3d8:	68fb      	ldr	r3, [r7, #12]
 801c3da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801c3de:	687b      	ldr	r3, [r7, #4]
 801c3e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c3e2:	429a      	cmp	r2, r3
 801c3e4:	d122      	bne.n	801c42c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801c3e6:	68fa      	ldr	r2, [r7, #12]
 801c3e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801c3ec:	4013      	ands	r3, r2
 801c3ee:	687a      	ldr	r2, [r7, #4]
 801c3f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801c3f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801c3f4:	4293      	cmp	r3, r2
 801c3f6:	d119      	bne.n	801c42c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801c3f8:	68fb      	ldr	r3, [r7, #12]
 801c3fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801c3fe:	687b      	ldr	r3, [r7, #4]
 801c400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c402:	085b      	lsrs	r3, r3, #1
 801c404:	3b01      	subs	r3, #1
 801c406:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801c408:	429a      	cmp	r2, r3
 801c40a:	d10f      	bne.n	801c42c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801c40c:	68fb      	ldr	r3, [r7, #12]
 801c40e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801c412:	687b      	ldr	r3, [r7, #4]
 801c414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c416:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801c418:	429a      	cmp	r2, r3
 801c41a:	d107      	bne.n	801c42c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 801c41c:	68fb      	ldr	r3, [r7, #12]
 801c41e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 801c422:	687b      	ldr	r3, [r7, #4]
 801c424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c426:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801c428:	429a      	cmp	r2, r3
 801c42a:	d001      	beq.n	801c430 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 801c42c:	2301      	movs	r3, #1
 801c42e:	e000      	b.n	801c432 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 801c430:	2300      	movs	r3, #0
}
 801c432:	4618      	mov	r0, r3
 801c434:	3718      	adds	r7, #24
 801c436:	46bd      	mov	sp, r7
 801c438:	bd80      	pop	{r7, pc}
 801c43a:	bf00      	nop
 801c43c:	40023800 	.word	0x40023800

0801c440 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801c440:	b580      	push	{r7, lr}
 801c442:	b082      	sub	sp, #8
 801c444:	af00      	add	r7, sp, #0
 801c446:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801c448:	687b      	ldr	r3, [r7, #4]
 801c44a:	2b00      	cmp	r3, #0
 801c44c:	d101      	bne.n	801c452 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801c44e:	2301      	movs	r3, #1
 801c450:	e07b      	b.n	801c54a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801c452:	687b      	ldr	r3, [r7, #4]
 801c454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c456:	2b00      	cmp	r3, #0
 801c458:	d108      	bne.n	801c46c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801c45a:	687b      	ldr	r3, [r7, #4]
 801c45c:	685b      	ldr	r3, [r3, #4]
 801c45e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c462:	d009      	beq.n	801c478 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801c464:	687b      	ldr	r3, [r7, #4]
 801c466:	2200      	movs	r2, #0
 801c468:	61da      	str	r2, [r3, #28]
 801c46a:	e005      	b.n	801c478 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801c46c:	687b      	ldr	r3, [r7, #4]
 801c46e:	2200      	movs	r2, #0
 801c470:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801c472:	687b      	ldr	r3, [r7, #4]
 801c474:	2200      	movs	r2, #0
 801c476:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801c478:	687b      	ldr	r3, [r7, #4]
 801c47a:	2200      	movs	r2, #0
 801c47c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801c47e:	687b      	ldr	r3, [r7, #4]
 801c480:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c484:	b2db      	uxtb	r3, r3
 801c486:	2b00      	cmp	r3, #0
 801c488:	d106      	bne.n	801c498 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801c48a:	687b      	ldr	r3, [r7, #4]
 801c48c:	2200      	movs	r2, #0
 801c48e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801c492:	6878      	ldr	r0, [r7, #4]
 801c494:	f7fb ff3a 	bl	801830c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801c498:	687b      	ldr	r3, [r7, #4]
 801c49a:	2202      	movs	r2, #2
 801c49c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801c4a0:	687b      	ldr	r3, [r7, #4]
 801c4a2:	681b      	ldr	r3, [r3, #0]
 801c4a4:	681a      	ldr	r2, [r3, #0]
 801c4a6:	687b      	ldr	r3, [r7, #4]
 801c4a8:	681b      	ldr	r3, [r3, #0]
 801c4aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c4ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801c4b0:	687b      	ldr	r3, [r7, #4]
 801c4b2:	685b      	ldr	r3, [r3, #4]
 801c4b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801c4b8:	687b      	ldr	r3, [r7, #4]
 801c4ba:	689b      	ldr	r3, [r3, #8]
 801c4bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801c4c0:	431a      	orrs	r2, r3
 801c4c2:	687b      	ldr	r3, [r7, #4]
 801c4c4:	68db      	ldr	r3, [r3, #12]
 801c4c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c4ca:	431a      	orrs	r2, r3
 801c4cc:	687b      	ldr	r3, [r7, #4]
 801c4ce:	691b      	ldr	r3, [r3, #16]
 801c4d0:	f003 0302 	and.w	r3, r3, #2
 801c4d4:	431a      	orrs	r2, r3
 801c4d6:	687b      	ldr	r3, [r7, #4]
 801c4d8:	695b      	ldr	r3, [r3, #20]
 801c4da:	f003 0301 	and.w	r3, r3, #1
 801c4de:	431a      	orrs	r2, r3
 801c4e0:	687b      	ldr	r3, [r7, #4]
 801c4e2:	699b      	ldr	r3, [r3, #24]
 801c4e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801c4e8:	431a      	orrs	r2, r3
 801c4ea:	687b      	ldr	r3, [r7, #4]
 801c4ec:	69db      	ldr	r3, [r3, #28]
 801c4ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801c4f2:	431a      	orrs	r2, r3
 801c4f4:	687b      	ldr	r3, [r7, #4]
 801c4f6:	6a1b      	ldr	r3, [r3, #32]
 801c4f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c4fc:	ea42 0103 	orr.w	r1, r2, r3
 801c500:	687b      	ldr	r3, [r7, #4]
 801c502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c504:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801c508:	687b      	ldr	r3, [r7, #4]
 801c50a:	681b      	ldr	r3, [r3, #0]
 801c50c:	430a      	orrs	r2, r1
 801c50e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 801c510:	687b      	ldr	r3, [r7, #4]
 801c512:	699b      	ldr	r3, [r3, #24]
 801c514:	0c1b      	lsrs	r3, r3, #16
 801c516:	f003 0104 	and.w	r1, r3, #4
 801c51a:	687b      	ldr	r3, [r7, #4]
 801c51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c51e:	f003 0210 	and.w	r2, r3, #16
 801c522:	687b      	ldr	r3, [r7, #4]
 801c524:	681b      	ldr	r3, [r3, #0]
 801c526:	430a      	orrs	r2, r1
 801c528:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801c52a:	687b      	ldr	r3, [r7, #4]
 801c52c:	681b      	ldr	r3, [r3, #0]
 801c52e:	69da      	ldr	r2, [r3, #28]
 801c530:	687b      	ldr	r3, [r7, #4]
 801c532:	681b      	ldr	r3, [r3, #0]
 801c534:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801c538:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801c53a:	687b      	ldr	r3, [r7, #4]
 801c53c:	2200      	movs	r2, #0
 801c53e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 801c540:	687b      	ldr	r3, [r7, #4]
 801c542:	2201      	movs	r2, #1
 801c544:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 801c548:	2300      	movs	r3, #0
}
 801c54a:	4618      	mov	r0, r3
 801c54c:	3708      	adds	r7, #8
 801c54e:	46bd      	mov	sp, r7
 801c550:	bd80      	pop	{r7, pc}

0801c552 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c552:	b580      	push	{r7, lr}
 801c554:	b088      	sub	sp, #32
 801c556:	af00      	add	r7, sp, #0
 801c558:	60f8      	str	r0, [r7, #12]
 801c55a:	60b9      	str	r1, [r7, #8]
 801c55c:	603b      	str	r3, [r7, #0]
 801c55e:	4613      	mov	r3, r2
 801c560:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801c562:	2300      	movs	r3, #0
 801c564:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c566:	68fb      	ldr	r3, [r7, #12]
 801c568:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801c56c:	2b01      	cmp	r3, #1
 801c56e:	d101      	bne.n	801c574 <HAL_SPI_Transmit+0x22>
 801c570:	2302      	movs	r3, #2
 801c572:	e126      	b.n	801c7c2 <HAL_SPI_Transmit+0x270>
 801c574:	68fb      	ldr	r3, [r7, #12]
 801c576:	2201      	movs	r2, #1
 801c578:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c57c:	f7fc f8fa 	bl	8018774 <HAL_GetTick>
 801c580:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801c582:	88fb      	ldrh	r3, [r7, #6]
 801c584:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801c586:	68fb      	ldr	r3, [r7, #12]
 801c588:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c58c:	b2db      	uxtb	r3, r3
 801c58e:	2b01      	cmp	r3, #1
 801c590:	d002      	beq.n	801c598 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801c592:	2302      	movs	r3, #2
 801c594:	77fb      	strb	r3, [r7, #31]
    goto error;
 801c596:	e10b      	b.n	801c7b0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 801c598:	68bb      	ldr	r3, [r7, #8]
 801c59a:	2b00      	cmp	r3, #0
 801c59c:	d002      	beq.n	801c5a4 <HAL_SPI_Transmit+0x52>
 801c59e:	88fb      	ldrh	r3, [r7, #6]
 801c5a0:	2b00      	cmp	r3, #0
 801c5a2:	d102      	bne.n	801c5aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801c5a4:	2301      	movs	r3, #1
 801c5a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 801c5a8:	e102      	b.n	801c7b0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801c5aa:	68fb      	ldr	r3, [r7, #12]
 801c5ac:	2203      	movs	r2, #3
 801c5ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c5b2:	68fb      	ldr	r3, [r7, #12]
 801c5b4:	2200      	movs	r2, #0
 801c5b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801c5b8:	68fb      	ldr	r3, [r7, #12]
 801c5ba:	68ba      	ldr	r2, [r7, #8]
 801c5bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 801c5be:	68fb      	ldr	r3, [r7, #12]
 801c5c0:	88fa      	ldrh	r2, [r7, #6]
 801c5c2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 801c5c4:	68fb      	ldr	r3, [r7, #12]
 801c5c6:	88fa      	ldrh	r2, [r7, #6]
 801c5c8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801c5ca:	68fb      	ldr	r3, [r7, #12]
 801c5cc:	2200      	movs	r2, #0
 801c5ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 801c5d0:	68fb      	ldr	r3, [r7, #12]
 801c5d2:	2200      	movs	r2, #0
 801c5d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 801c5d6:	68fb      	ldr	r3, [r7, #12]
 801c5d8:	2200      	movs	r2, #0
 801c5da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 801c5dc:	68fb      	ldr	r3, [r7, #12]
 801c5de:	2200      	movs	r2, #0
 801c5e0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 801c5e2:	68fb      	ldr	r3, [r7, #12]
 801c5e4:	2200      	movs	r2, #0
 801c5e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c5e8:	68fb      	ldr	r3, [r7, #12]
 801c5ea:	689b      	ldr	r3, [r3, #8]
 801c5ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c5f0:	d10f      	bne.n	801c612 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801c5f2:	68fb      	ldr	r3, [r7, #12]
 801c5f4:	681b      	ldr	r3, [r3, #0]
 801c5f6:	681a      	ldr	r2, [r3, #0]
 801c5f8:	68fb      	ldr	r3, [r7, #12]
 801c5fa:	681b      	ldr	r3, [r3, #0]
 801c5fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c600:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801c602:	68fb      	ldr	r3, [r7, #12]
 801c604:	681b      	ldr	r3, [r3, #0]
 801c606:	681a      	ldr	r2, [r3, #0]
 801c608:	68fb      	ldr	r3, [r7, #12]
 801c60a:	681b      	ldr	r3, [r3, #0]
 801c60c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801c610:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c612:	68fb      	ldr	r3, [r7, #12]
 801c614:	681b      	ldr	r3, [r3, #0]
 801c616:	681b      	ldr	r3, [r3, #0]
 801c618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c61c:	2b40      	cmp	r3, #64	; 0x40
 801c61e:	d007      	beq.n	801c630 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c620:	68fb      	ldr	r3, [r7, #12]
 801c622:	681b      	ldr	r3, [r3, #0]
 801c624:	681a      	ldr	r2, [r3, #0]
 801c626:	68fb      	ldr	r3, [r7, #12]
 801c628:	681b      	ldr	r3, [r3, #0]
 801c62a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c62e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801c630:	68fb      	ldr	r3, [r7, #12]
 801c632:	68db      	ldr	r3, [r3, #12]
 801c634:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c638:	d14b      	bne.n	801c6d2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c63a:	68fb      	ldr	r3, [r7, #12]
 801c63c:	685b      	ldr	r3, [r3, #4]
 801c63e:	2b00      	cmp	r3, #0
 801c640:	d002      	beq.n	801c648 <HAL_SPI_Transmit+0xf6>
 801c642:	8afb      	ldrh	r3, [r7, #22]
 801c644:	2b01      	cmp	r3, #1
 801c646:	d13e      	bne.n	801c6c6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c648:	68fb      	ldr	r3, [r7, #12]
 801c64a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c64c:	881a      	ldrh	r2, [r3, #0]
 801c64e:	68fb      	ldr	r3, [r7, #12]
 801c650:	681b      	ldr	r3, [r3, #0]
 801c652:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801c654:	68fb      	ldr	r3, [r7, #12]
 801c656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c658:	1c9a      	adds	r2, r3, #2
 801c65a:	68fb      	ldr	r3, [r7, #12]
 801c65c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801c65e:	68fb      	ldr	r3, [r7, #12]
 801c660:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c662:	b29b      	uxth	r3, r3
 801c664:	3b01      	subs	r3, #1
 801c666:	b29a      	uxth	r2, r3
 801c668:	68fb      	ldr	r3, [r7, #12]
 801c66a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801c66c:	e02b      	b.n	801c6c6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801c66e:	68fb      	ldr	r3, [r7, #12]
 801c670:	681b      	ldr	r3, [r3, #0]
 801c672:	689b      	ldr	r3, [r3, #8]
 801c674:	f003 0302 	and.w	r3, r3, #2
 801c678:	2b02      	cmp	r3, #2
 801c67a:	d112      	bne.n	801c6a2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c67c:	68fb      	ldr	r3, [r7, #12]
 801c67e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c680:	881a      	ldrh	r2, [r3, #0]
 801c682:	68fb      	ldr	r3, [r7, #12]
 801c684:	681b      	ldr	r3, [r3, #0]
 801c686:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801c688:	68fb      	ldr	r3, [r7, #12]
 801c68a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c68c:	1c9a      	adds	r2, r3, #2
 801c68e:	68fb      	ldr	r3, [r7, #12]
 801c690:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801c692:	68fb      	ldr	r3, [r7, #12]
 801c694:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c696:	b29b      	uxth	r3, r3
 801c698:	3b01      	subs	r3, #1
 801c69a:	b29a      	uxth	r2, r3
 801c69c:	68fb      	ldr	r3, [r7, #12]
 801c69e:	86da      	strh	r2, [r3, #54]	; 0x36
 801c6a0:	e011      	b.n	801c6c6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c6a2:	f7fc f867 	bl	8018774 <HAL_GetTick>
 801c6a6:	4602      	mov	r2, r0
 801c6a8:	69bb      	ldr	r3, [r7, #24]
 801c6aa:	1ad3      	subs	r3, r2, r3
 801c6ac:	683a      	ldr	r2, [r7, #0]
 801c6ae:	429a      	cmp	r2, r3
 801c6b0:	d803      	bhi.n	801c6ba <HAL_SPI_Transmit+0x168>
 801c6b2:	683b      	ldr	r3, [r7, #0]
 801c6b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c6b8:	d102      	bne.n	801c6c0 <HAL_SPI_Transmit+0x16e>
 801c6ba:	683b      	ldr	r3, [r7, #0]
 801c6bc:	2b00      	cmp	r3, #0
 801c6be:	d102      	bne.n	801c6c6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 801c6c0:	2303      	movs	r3, #3
 801c6c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 801c6c4:	e074      	b.n	801c7b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 801c6c6:	68fb      	ldr	r3, [r7, #12]
 801c6c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c6ca:	b29b      	uxth	r3, r3
 801c6cc:	2b00      	cmp	r3, #0
 801c6ce:	d1ce      	bne.n	801c66e <HAL_SPI_Transmit+0x11c>
 801c6d0:	e04c      	b.n	801c76c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c6d2:	68fb      	ldr	r3, [r7, #12]
 801c6d4:	685b      	ldr	r3, [r3, #4]
 801c6d6:	2b00      	cmp	r3, #0
 801c6d8:	d002      	beq.n	801c6e0 <HAL_SPI_Transmit+0x18e>
 801c6da:	8afb      	ldrh	r3, [r7, #22]
 801c6dc:	2b01      	cmp	r3, #1
 801c6de:	d140      	bne.n	801c762 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801c6e0:	68fb      	ldr	r3, [r7, #12]
 801c6e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c6e4:	68fb      	ldr	r3, [r7, #12]
 801c6e6:	681b      	ldr	r3, [r3, #0]
 801c6e8:	330c      	adds	r3, #12
 801c6ea:	7812      	ldrb	r2, [r2, #0]
 801c6ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801c6ee:	68fb      	ldr	r3, [r7, #12]
 801c6f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c6f2:	1c5a      	adds	r2, r3, #1
 801c6f4:	68fb      	ldr	r3, [r7, #12]
 801c6f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801c6f8:	68fb      	ldr	r3, [r7, #12]
 801c6fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c6fc:	b29b      	uxth	r3, r3
 801c6fe:	3b01      	subs	r3, #1
 801c700:	b29a      	uxth	r2, r3
 801c702:	68fb      	ldr	r3, [r7, #12]
 801c704:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 801c706:	e02c      	b.n	801c762 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801c708:	68fb      	ldr	r3, [r7, #12]
 801c70a:	681b      	ldr	r3, [r3, #0]
 801c70c:	689b      	ldr	r3, [r3, #8]
 801c70e:	f003 0302 	and.w	r3, r3, #2
 801c712:	2b02      	cmp	r3, #2
 801c714:	d113      	bne.n	801c73e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801c716:	68fb      	ldr	r3, [r7, #12]
 801c718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c71a:	68fb      	ldr	r3, [r7, #12]
 801c71c:	681b      	ldr	r3, [r3, #0]
 801c71e:	330c      	adds	r3, #12
 801c720:	7812      	ldrb	r2, [r2, #0]
 801c722:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801c724:	68fb      	ldr	r3, [r7, #12]
 801c726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c728:	1c5a      	adds	r2, r3, #1
 801c72a:	68fb      	ldr	r3, [r7, #12]
 801c72c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801c72e:	68fb      	ldr	r3, [r7, #12]
 801c730:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c732:	b29b      	uxth	r3, r3
 801c734:	3b01      	subs	r3, #1
 801c736:	b29a      	uxth	r2, r3
 801c738:	68fb      	ldr	r3, [r7, #12]
 801c73a:	86da      	strh	r2, [r3, #54]	; 0x36
 801c73c:	e011      	b.n	801c762 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c73e:	f7fc f819 	bl	8018774 <HAL_GetTick>
 801c742:	4602      	mov	r2, r0
 801c744:	69bb      	ldr	r3, [r7, #24]
 801c746:	1ad3      	subs	r3, r2, r3
 801c748:	683a      	ldr	r2, [r7, #0]
 801c74a:	429a      	cmp	r2, r3
 801c74c:	d803      	bhi.n	801c756 <HAL_SPI_Transmit+0x204>
 801c74e:	683b      	ldr	r3, [r7, #0]
 801c750:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c754:	d102      	bne.n	801c75c <HAL_SPI_Transmit+0x20a>
 801c756:	683b      	ldr	r3, [r7, #0]
 801c758:	2b00      	cmp	r3, #0
 801c75a:	d102      	bne.n	801c762 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 801c75c:	2303      	movs	r3, #3
 801c75e:	77fb      	strb	r3, [r7, #31]
          goto error;
 801c760:	e026      	b.n	801c7b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 801c762:	68fb      	ldr	r3, [r7, #12]
 801c764:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c766:	b29b      	uxth	r3, r3
 801c768:	2b00      	cmp	r3, #0
 801c76a:	d1cd      	bne.n	801c708 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c76c:	69ba      	ldr	r2, [r7, #24]
 801c76e:	6839      	ldr	r1, [r7, #0]
 801c770:	68f8      	ldr	r0, [r7, #12]
 801c772:	f000 fcf7 	bl	801d164 <SPI_EndRxTxTransaction>
 801c776:	4603      	mov	r3, r0
 801c778:	2b00      	cmp	r3, #0
 801c77a:	d002      	beq.n	801c782 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c77c:	68fb      	ldr	r3, [r7, #12]
 801c77e:	2220      	movs	r2, #32
 801c780:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801c782:	68fb      	ldr	r3, [r7, #12]
 801c784:	689b      	ldr	r3, [r3, #8]
 801c786:	2b00      	cmp	r3, #0
 801c788:	d10a      	bne.n	801c7a0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801c78a:	2300      	movs	r3, #0
 801c78c:	613b      	str	r3, [r7, #16]
 801c78e:	68fb      	ldr	r3, [r7, #12]
 801c790:	681b      	ldr	r3, [r3, #0]
 801c792:	68db      	ldr	r3, [r3, #12]
 801c794:	613b      	str	r3, [r7, #16]
 801c796:	68fb      	ldr	r3, [r7, #12]
 801c798:	681b      	ldr	r3, [r3, #0]
 801c79a:	689b      	ldr	r3, [r3, #8]
 801c79c:	613b      	str	r3, [r7, #16]
 801c79e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801c7a0:	68fb      	ldr	r3, [r7, #12]
 801c7a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c7a4:	2b00      	cmp	r3, #0
 801c7a6:	d002      	beq.n	801c7ae <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 801c7a8:	2301      	movs	r3, #1
 801c7aa:	77fb      	strb	r3, [r7, #31]
 801c7ac:	e000      	b.n	801c7b0 <HAL_SPI_Transmit+0x25e>
  }

error:
 801c7ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c7b0:	68fb      	ldr	r3, [r7, #12]
 801c7b2:	2201      	movs	r2, #1
 801c7b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801c7b8:	68fb      	ldr	r3, [r7, #12]
 801c7ba:	2200      	movs	r2, #0
 801c7bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801c7c0:	7ffb      	ldrb	r3, [r7, #31]
}
 801c7c2:	4618      	mov	r0, r3
 801c7c4:	3720      	adds	r7, #32
 801c7c6:	46bd      	mov	sp, r7
 801c7c8:	bd80      	pop	{r7, pc}

0801c7ca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c7ca:	b580      	push	{r7, lr}
 801c7cc:	b088      	sub	sp, #32
 801c7ce:	af02      	add	r7, sp, #8
 801c7d0:	60f8      	str	r0, [r7, #12]
 801c7d2:	60b9      	str	r1, [r7, #8]
 801c7d4:	603b      	str	r3, [r7, #0]
 801c7d6:	4613      	mov	r3, r2
 801c7d8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801c7da:	2300      	movs	r3, #0
 801c7dc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801c7de:	68fb      	ldr	r3, [r7, #12]
 801c7e0:	685b      	ldr	r3, [r3, #4]
 801c7e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c7e6:	d112      	bne.n	801c80e <HAL_SPI_Receive+0x44>
 801c7e8:	68fb      	ldr	r3, [r7, #12]
 801c7ea:	689b      	ldr	r3, [r3, #8]
 801c7ec:	2b00      	cmp	r3, #0
 801c7ee:	d10e      	bne.n	801c80e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801c7f0:	68fb      	ldr	r3, [r7, #12]
 801c7f2:	2204      	movs	r2, #4
 801c7f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801c7f8:	88fa      	ldrh	r2, [r7, #6]
 801c7fa:	683b      	ldr	r3, [r7, #0]
 801c7fc:	9300      	str	r3, [sp, #0]
 801c7fe:	4613      	mov	r3, r2
 801c800:	68ba      	ldr	r2, [r7, #8]
 801c802:	68b9      	ldr	r1, [r7, #8]
 801c804:	68f8      	ldr	r0, [r7, #12]
 801c806:	f000 f8f1 	bl	801c9ec <HAL_SPI_TransmitReceive>
 801c80a:	4603      	mov	r3, r0
 801c80c:	e0ea      	b.n	801c9e4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c80e:	68fb      	ldr	r3, [r7, #12]
 801c810:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801c814:	2b01      	cmp	r3, #1
 801c816:	d101      	bne.n	801c81c <HAL_SPI_Receive+0x52>
 801c818:	2302      	movs	r3, #2
 801c81a:	e0e3      	b.n	801c9e4 <HAL_SPI_Receive+0x21a>
 801c81c:	68fb      	ldr	r3, [r7, #12]
 801c81e:	2201      	movs	r2, #1
 801c820:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c824:	f7fb ffa6 	bl	8018774 <HAL_GetTick>
 801c828:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801c82a:	68fb      	ldr	r3, [r7, #12]
 801c82c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c830:	b2db      	uxtb	r3, r3
 801c832:	2b01      	cmp	r3, #1
 801c834:	d002      	beq.n	801c83c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801c836:	2302      	movs	r3, #2
 801c838:	75fb      	strb	r3, [r7, #23]
    goto error;
 801c83a:	e0ca      	b.n	801c9d2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 801c83c:	68bb      	ldr	r3, [r7, #8]
 801c83e:	2b00      	cmp	r3, #0
 801c840:	d002      	beq.n	801c848 <HAL_SPI_Receive+0x7e>
 801c842:	88fb      	ldrh	r3, [r7, #6]
 801c844:	2b00      	cmp	r3, #0
 801c846:	d102      	bne.n	801c84e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801c848:	2301      	movs	r3, #1
 801c84a:	75fb      	strb	r3, [r7, #23]
    goto error;
 801c84c:	e0c1      	b.n	801c9d2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801c84e:	68fb      	ldr	r3, [r7, #12]
 801c850:	2204      	movs	r2, #4
 801c852:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c856:	68fb      	ldr	r3, [r7, #12]
 801c858:	2200      	movs	r2, #0
 801c85a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801c85c:	68fb      	ldr	r3, [r7, #12]
 801c85e:	68ba      	ldr	r2, [r7, #8]
 801c860:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 801c862:	68fb      	ldr	r3, [r7, #12]
 801c864:	88fa      	ldrh	r2, [r7, #6]
 801c866:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 801c868:	68fb      	ldr	r3, [r7, #12]
 801c86a:	88fa      	ldrh	r2, [r7, #6]
 801c86c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801c86e:	68fb      	ldr	r3, [r7, #12]
 801c870:	2200      	movs	r2, #0
 801c872:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 801c874:	68fb      	ldr	r3, [r7, #12]
 801c876:	2200      	movs	r2, #0
 801c878:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 801c87a:	68fb      	ldr	r3, [r7, #12]
 801c87c:	2200      	movs	r2, #0
 801c87e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 801c880:	68fb      	ldr	r3, [r7, #12]
 801c882:	2200      	movs	r2, #0
 801c884:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801c886:	68fb      	ldr	r3, [r7, #12]
 801c888:	2200      	movs	r2, #0
 801c88a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c88c:	68fb      	ldr	r3, [r7, #12]
 801c88e:	689b      	ldr	r3, [r3, #8]
 801c890:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c894:	d10f      	bne.n	801c8b6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801c896:	68fb      	ldr	r3, [r7, #12]
 801c898:	681b      	ldr	r3, [r3, #0]
 801c89a:	681a      	ldr	r2, [r3, #0]
 801c89c:	68fb      	ldr	r3, [r7, #12]
 801c89e:	681b      	ldr	r3, [r3, #0]
 801c8a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c8a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801c8a6:	68fb      	ldr	r3, [r7, #12]
 801c8a8:	681b      	ldr	r3, [r3, #0]
 801c8aa:	681a      	ldr	r2, [r3, #0]
 801c8ac:	68fb      	ldr	r3, [r7, #12]
 801c8ae:	681b      	ldr	r3, [r3, #0]
 801c8b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801c8b4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c8b6:	68fb      	ldr	r3, [r7, #12]
 801c8b8:	681b      	ldr	r3, [r3, #0]
 801c8ba:	681b      	ldr	r3, [r3, #0]
 801c8bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c8c0:	2b40      	cmp	r3, #64	; 0x40
 801c8c2:	d007      	beq.n	801c8d4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c8c4:	68fb      	ldr	r3, [r7, #12]
 801c8c6:	681b      	ldr	r3, [r3, #0]
 801c8c8:	681a      	ldr	r2, [r3, #0]
 801c8ca:	68fb      	ldr	r3, [r7, #12]
 801c8cc:	681b      	ldr	r3, [r3, #0]
 801c8ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c8d2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 801c8d4:	68fb      	ldr	r3, [r7, #12]
 801c8d6:	68db      	ldr	r3, [r3, #12]
 801c8d8:	2b00      	cmp	r3, #0
 801c8da:	d162      	bne.n	801c9a2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801c8dc:	e02e      	b.n	801c93c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801c8de:	68fb      	ldr	r3, [r7, #12]
 801c8e0:	681b      	ldr	r3, [r3, #0]
 801c8e2:	689b      	ldr	r3, [r3, #8]
 801c8e4:	f003 0301 	and.w	r3, r3, #1
 801c8e8:	2b01      	cmp	r3, #1
 801c8ea:	d115      	bne.n	801c918 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801c8ec:	68fb      	ldr	r3, [r7, #12]
 801c8ee:	681b      	ldr	r3, [r3, #0]
 801c8f0:	f103 020c 	add.w	r2, r3, #12
 801c8f4:	68fb      	ldr	r3, [r7, #12]
 801c8f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c8f8:	7812      	ldrb	r2, [r2, #0]
 801c8fa:	b2d2      	uxtb	r2, r2
 801c8fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801c8fe:	68fb      	ldr	r3, [r7, #12]
 801c900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c902:	1c5a      	adds	r2, r3, #1
 801c904:	68fb      	ldr	r3, [r7, #12]
 801c906:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801c908:	68fb      	ldr	r3, [r7, #12]
 801c90a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c90c:	b29b      	uxth	r3, r3
 801c90e:	3b01      	subs	r3, #1
 801c910:	b29a      	uxth	r2, r3
 801c912:	68fb      	ldr	r3, [r7, #12]
 801c914:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c916:	e011      	b.n	801c93c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c918:	f7fb ff2c 	bl	8018774 <HAL_GetTick>
 801c91c:	4602      	mov	r2, r0
 801c91e:	693b      	ldr	r3, [r7, #16]
 801c920:	1ad3      	subs	r3, r2, r3
 801c922:	683a      	ldr	r2, [r7, #0]
 801c924:	429a      	cmp	r2, r3
 801c926:	d803      	bhi.n	801c930 <HAL_SPI_Receive+0x166>
 801c928:	683b      	ldr	r3, [r7, #0]
 801c92a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c92e:	d102      	bne.n	801c936 <HAL_SPI_Receive+0x16c>
 801c930:	683b      	ldr	r3, [r7, #0]
 801c932:	2b00      	cmp	r3, #0
 801c934:	d102      	bne.n	801c93c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 801c936:	2303      	movs	r3, #3
 801c938:	75fb      	strb	r3, [r7, #23]
          goto error;
 801c93a:	e04a      	b.n	801c9d2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 801c93c:	68fb      	ldr	r3, [r7, #12]
 801c93e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c940:	b29b      	uxth	r3, r3
 801c942:	2b00      	cmp	r3, #0
 801c944:	d1cb      	bne.n	801c8de <HAL_SPI_Receive+0x114>
 801c946:	e031      	b.n	801c9ac <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801c948:	68fb      	ldr	r3, [r7, #12]
 801c94a:	681b      	ldr	r3, [r3, #0]
 801c94c:	689b      	ldr	r3, [r3, #8]
 801c94e:	f003 0301 	and.w	r3, r3, #1
 801c952:	2b01      	cmp	r3, #1
 801c954:	d113      	bne.n	801c97e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801c956:	68fb      	ldr	r3, [r7, #12]
 801c958:	681b      	ldr	r3, [r3, #0]
 801c95a:	68da      	ldr	r2, [r3, #12]
 801c95c:	68fb      	ldr	r3, [r7, #12]
 801c95e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c960:	b292      	uxth	r2, r2
 801c962:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801c964:	68fb      	ldr	r3, [r7, #12]
 801c966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c968:	1c9a      	adds	r2, r3, #2
 801c96a:	68fb      	ldr	r3, [r7, #12]
 801c96c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801c96e:	68fb      	ldr	r3, [r7, #12]
 801c970:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c972:	b29b      	uxth	r3, r3
 801c974:	3b01      	subs	r3, #1
 801c976:	b29a      	uxth	r2, r3
 801c978:	68fb      	ldr	r3, [r7, #12]
 801c97a:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c97c:	e011      	b.n	801c9a2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c97e:	f7fb fef9 	bl	8018774 <HAL_GetTick>
 801c982:	4602      	mov	r2, r0
 801c984:	693b      	ldr	r3, [r7, #16]
 801c986:	1ad3      	subs	r3, r2, r3
 801c988:	683a      	ldr	r2, [r7, #0]
 801c98a:	429a      	cmp	r2, r3
 801c98c:	d803      	bhi.n	801c996 <HAL_SPI_Receive+0x1cc>
 801c98e:	683b      	ldr	r3, [r7, #0]
 801c990:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c994:	d102      	bne.n	801c99c <HAL_SPI_Receive+0x1d2>
 801c996:	683b      	ldr	r3, [r7, #0]
 801c998:	2b00      	cmp	r3, #0
 801c99a:	d102      	bne.n	801c9a2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 801c99c:	2303      	movs	r3, #3
 801c99e:	75fb      	strb	r3, [r7, #23]
          goto error;
 801c9a0:	e017      	b.n	801c9d2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 801c9a2:	68fb      	ldr	r3, [r7, #12]
 801c9a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c9a6:	b29b      	uxth	r3, r3
 801c9a8:	2b00      	cmp	r3, #0
 801c9aa:	d1cd      	bne.n	801c948 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c9ac:	693a      	ldr	r2, [r7, #16]
 801c9ae:	6839      	ldr	r1, [r7, #0]
 801c9b0:	68f8      	ldr	r0, [r7, #12]
 801c9b2:	f000 fb71 	bl	801d098 <SPI_EndRxTransaction>
 801c9b6:	4603      	mov	r3, r0
 801c9b8:	2b00      	cmp	r3, #0
 801c9ba:	d002      	beq.n	801c9c2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c9bc:	68fb      	ldr	r3, [r7, #12]
 801c9be:	2220      	movs	r2, #32
 801c9c0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801c9c2:	68fb      	ldr	r3, [r7, #12]
 801c9c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c9c6:	2b00      	cmp	r3, #0
 801c9c8:	d002      	beq.n	801c9d0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 801c9ca:	2301      	movs	r3, #1
 801c9cc:	75fb      	strb	r3, [r7, #23]
 801c9ce:	e000      	b.n	801c9d2 <HAL_SPI_Receive+0x208>
  }

error :
 801c9d0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c9d2:	68fb      	ldr	r3, [r7, #12]
 801c9d4:	2201      	movs	r2, #1
 801c9d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801c9da:	68fb      	ldr	r3, [r7, #12]
 801c9dc:	2200      	movs	r2, #0
 801c9de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801c9e2:	7dfb      	ldrb	r3, [r7, #23]
}
 801c9e4:	4618      	mov	r0, r3
 801c9e6:	3718      	adds	r7, #24
 801c9e8:	46bd      	mov	sp, r7
 801c9ea:	bd80      	pop	{r7, pc}

0801c9ec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801c9ec:	b580      	push	{r7, lr}
 801c9ee:	b08c      	sub	sp, #48	; 0x30
 801c9f0:	af00      	add	r7, sp, #0
 801c9f2:	60f8      	str	r0, [r7, #12]
 801c9f4:	60b9      	str	r1, [r7, #8]
 801c9f6:	607a      	str	r2, [r7, #4]
 801c9f8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801c9fa:	2301      	movs	r3, #1
 801c9fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801c9fe:	2300      	movs	r3, #0
 801ca00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801ca04:	68fb      	ldr	r3, [r7, #12]
 801ca06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801ca0a:	2b01      	cmp	r3, #1
 801ca0c:	d101      	bne.n	801ca12 <HAL_SPI_TransmitReceive+0x26>
 801ca0e:	2302      	movs	r3, #2
 801ca10:	e18a      	b.n	801cd28 <HAL_SPI_TransmitReceive+0x33c>
 801ca12:	68fb      	ldr	r3, [r7, #12]
 801ca14:	2201      	movs	r2, #1
 801ca16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801ca1a:	f7fb feab 	bl	8018774 <HAL_GetTick>
 801ca1e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801ca20:	68fb      	ldr	r3, [r7, #12]
 801ca22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801ca26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 801ca2a:	68fb      	ldr	r3, [r7, #12]
 801ca2c:	685b      	ldr	r3, [r3, #4]
 801ca2e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 801ca30:	887b      	ldrh	r3, [r7, #2]
 801ca32:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801ca34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801ca38:	2b01      	cmp	r3, #1
 801ca3a:	d00f      	beq.n	801ca5c <HAL_SPI_TransmitReceive+0x70>
 801ca3c:	69fb      	ldr	r3, [r7, #28]
 801ca3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801ca42:	d107      	bne.n	801ca54 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801ca44:	68fb      	ldr	r3, [r7, #12]
 801ca46:	689b      	ldr	r3, [r3, #8]
 801ca48:	2b00      	cmp	r3, #0
 801ca4a:	d103      	bne.n	801ca54 <HAL_SPI_TransmitReceive+0x68>
 801ca4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801ca50:	2b04      	cmp	r3, #4
 801ca52:	d003      	beq.n	801ca5c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 801ca54:	2302      	movs	r3, #2
 801ca56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801ca5a:	e15b      	b.n	801cd14 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801ca5c:	68bb      	ldr	r3, [r7, #8]
 801ca5e:	2b00      	cmp	r3, #0
 801ca60:	d005      	beq.n	801ca6e <HAL_SPI_TransmitReceive+0x82>
 801ca62:	687b      	ldr	r3, [r7, #4]
 801ca64:	2b00      	cmp	r3, #0
 801ca66:	d002      	beq.n	801ca6e <HAL_SPI_TransmitReceive+0x82>
 801ca68:	887b      	ldrh	r3, [r7, #2]
 801ca6a:	2b00      	cmp	r3, #0
 801ca6c:	d103      	bne.n	801ca76 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 801ca6e:	2301      	movs	r3, #1
 801ca70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801ca74:	e14e      	b.n	801cd14 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801ca76:	68fb      	ldr	r3, [r7, #12]
 801ca78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801ca7c:	b2db      	uxtb	r3, r3
 801ca7e:	2b04      	cmp	r3, #4
 801ca80:	d003      	beq.n	801ca8a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801ca82:	68fb      	ldr	r3, [r7, #12]
 801ca84:	2205      	movs	r2, #5
 801ca86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801ca8a:	68fb      	ldr	r3, [r7, #12]
 801ca8c:	2200      	movs	r2, #0
 801ca8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801ca90:	68fb      	ldr	r3, [r7, #12]
 801ca92:	687a      	ldr	r2, [r7, #4]
 801ca94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 801ca96:	68fb      	ldr	r3, [r7, #12]
 801ca98:	887a      	ldrh	r2, [r7, #2]
 801ca9a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 801ca9c:	68fb      	ldr	r3, [r7, #12]
 801ca9e:	887a      	ldrh	r2, [r7, #2]
 801caa0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801caa2:	68fb      	ldr	r3, [r7, #12]
 801caa4:	68ba      	ldr	r2, [r7, #8]
 801caa6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 801caa8:	68fb      	ldr	r3, [r7, #12]
 801caaa:	887a      	ldrh	r2, [r7, #2]
 801caac:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 801caae:	68fb      	ldr	r3, [r7, #12]
 801cab0:	887a      	ldrh	r2, [r7, #2]
 801cab2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801cab4:	68fb      	ldr	r3, [r7, #12]
 801cab6:	2200      	movs	r2, #0
 801cab8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801caba:	68fb      	ldr	r3, [r7, #12]
 801cabc:	2200      	movs	r2, #0
 801cabe:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801cac0:	68fb      	ldr	r3, [r7, #12]
 801cac2:	681b      	ldr	r3, [r3, #0]
 801cac4:	681b      	ldr	r3, [r3, #0]
 801cac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801caca:	2b40      	cmp	r3, #64	; 0x40
 801cacc:	d007      	beq.n	801cade <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801cace:	68fb      	ldr	r3, [r7, #12]
 801cad0:	681b      	ldr	r3, [r3, #0]
 801cad2:	681a      	ldr	r2, [r3, #0]
 801cad4:	68fb      	ldr	r3, [r7, #12]
 801cad6:	681b      	ldr	r3, [r3, #0]
 801cad8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801cadc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801cade:	68fb      	ldr	r3, [r7, #12]
 801cae0:	68db      	ldr	r3, [r3, #12]
 801cae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801cae6:	d178      	bne.n	801cbda <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801cae8:	68fb      	ldr	r3, [r7, #12]
 801caea:	685b      	ldr	r3, [r3, #4]
 801caec:	2b00      	cmp	r3, #0
 801caee:	d002      	beq.n	801caf6 <HAL_SPI_TransmitReceive+0x10a>
 801caf0:	8b7b      	ldrh	r3, [r7, #26]
 801caf2:	2b01      	cmp	r3, #1
 801caf4:	d166      	bne.n	801cbc4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801caf6:	68fb      	ldr	r3, [r7, #12]
 801caf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cafa:	881a      	ldrh	r2, [r3, #0]
 801cafc:	68fb      	ldr	r3, [r7, #12]
 801cafe:	681b      	ldr	r3, [r3, #0]
 801cb00:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801cb02:	68fb      	ldr	r3, [r7, #12]
 801cb04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cb06:	1c9a      	adds	r2, r3, #2
 801cb08:	68fb      	ldr	r3, [r7, #12]
 801cb0a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801cb0c:	68fb      	ldr	r3, [r7, #12]
 801cb0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801cb10:	b29b      	uxth	r3, r3
 801cb12:	3b01      	subs	r3, #1
 801cb14:	b29a      	uxth	r2, r3
 801cb16:	68fb      	ldr	r3, [r7, #12]
 801cb18:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801cb1a:	e053      	b.n	801cbc4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801cb1c:	68fb      	ldr	r3, [r7, #12]
 801cb1e:	681b      	ldr	r3, [r3, #0]
 801cb20:	689b      	ldr	r3, [r3, #8]
 801cb22:	f003 0302 	and.w	r3, r3, #2
 801cb26:	2b02      	cmp	r3, #2
 801cb28:	d11b      	bne.n	801cb62 <HAL_SPI_TransmitReceive+0x176>
 801cb2a:	68fb      	ldr	r3, [r7, #12]
 801cb2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801cb2e:	b29b      	uxth	r3, r3
 801cb30:	2b00      	cmp	r3, #0
 801cb32:	d016      	beq.n	801cb62 <HAL_SPI_TransmitReceive+0x176>
 801cb34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cb36:	2b01      	cmp	r3, #1
 801cb38:	d113      	bne.n	801cb62 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801cb3a:	68fb      	ldr	r3, [r7, #12]
 801cb3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cb3e:	881a      	ldrh	r2, [r3, #0]
 801cb40:	68fb      	ldr	r3, [r7, #12]
 801cb42:	681b      	ldr	r3, [r3, #0]
 801cb44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801cb46:	68fb      	ldr	r3, [r7, #12]
 801cb48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cb4a:	1c9a      	adds	r2, r3, #2
 801cb4c:	68fb      	ldr	r3, [r7, #12]
 801cb4e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801cb50:	68fb      	ldr	r3, [r7, #12]
 801cb52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801cb54:	b29b      	uxth	r3, r3
 801cb56:	3b01      	subs	r3, #1
 801cb58:	b29a      	uxth	r2, r3
 801cb5a:	68fb      	ldr	r3, [r7, #12]
 801cb5c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801cb5e:	2300      	movs	r3, #0
 801cb60:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801cb62:	68fb      	ldr	r3, [r7, #12]
 801cb64:	681b      	ldr	r3, [r3, #0]
 801cb66:	689b      	ldr	r3, [r3, #8]
 801cb68:	f003 0301 	and.w	r3, r3, #1
 801cb6c:	2b01      	cmp	r3, #1
 801cb6e:	d119      	bne.n	801cba4 <HAL_SPI_TransmitReceive+0x1b8>
 801cb70:	68fb      	ldr	r3, [r7, #12]
 801cb72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cb74:	b29b      	uxth	r3, r3
 801cb76:	2b00      	cmp	r3, #0
 801cb78:	d014      	beq.n	801cba4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801cb7a:	68fb      	ldr	r3, [r7, #12]
 801cb7c:	681b      	ldr	r3, [r3, #0]
 801cb7e:	68da      	ldr	r2, [r3, #12]
 801cb80:	68fb      	ldr	r3, [r7, #12]
 801cb82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cb84:	b292      	uxth	r2, r2
 801cb86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801cb88:	68fb      	ldr	r3, [r7, #12]
 801cb8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cb8c:	1c9a      	adds	r2, r3, #2
 801cb8e:	68fb      	ldr	r3, [r7, #12]
 801cb90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801cb92:	68fb      	ldr	r3, [r7, #12]
 801cb94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cb96:	b29b      	uxth	r3, r3
 801cb98:	3b01      	subs	r3, #1
 801cb9a:	b29a      	uxth	r2, r3
 801cb9c:	68fb      	ldr	r3, [r7, #12]
 801cb9e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801cba0:	2301      	movs	r3, #1
 801cba2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801cba4:	f7fb fde6 	bl	8018774 <HAL_GetTick>
 801cba8:	4602      	mov	r2, r0
 801cbaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbac:	1ad3      	subs	r3, r2, r3
 801cbae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801cbb0:	429a      	cmp	r2, r3
 801cbb2:	d807      	bhi.n	801cbc4 <HAL_SPI_TransmitReceive+0x1d8>
 801cbb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cbb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cbba:	d003      	beq.n	801cbc4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 801cbbc:	2303      	movs	r3, #3
 801cbbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 801cbc2:	e0a7      	b.n	801cd14 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801cbc4:	68fb      	ldr	r3, [r7, #12]
 801cbc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801cbc8:	b29b      	uxth	r3, r3
 801cbca:	2b00      	cmp	r3, #0
 801cbcc:	d1a6      	bne.n	801cb1c <HAL_SPI_TransmitReceive+0x130>
 801cbce:	68fb      	ldr	r3, [r7, #12]
 801cbd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cbd2:	b29b      	uxth	r3, r3
 801cbd4:	2b00      	cmp	r3, #0
 801cbd6:	d1a1      	bne.n	801cb1c <HAL_SPI_TransmitReceive+0x130>
 801cbd8:	e07c      	b.n	801ccd4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801cbda:	68fb      	ldr	r3, [r7, #12]
 801cbdc:	685b      	ldr	r3, [r3, #4]
 801cbde:	2b00      	cmp	r3, #0
 801cbe0:	d002      	beq.n	801cbe8 <HAL_SPI_TransmitReceive+0x1fc>
 801cbe2:	8b7b      	ldrh	r3, [r7, #26]
 801cbe4:	2b01      	cmp	r3, #1
 801cbe6:	d16b      	bne.n	801ccc0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801cbe8:	68fb      	ldr	r3, [r7, #12]
 801cbea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801cbec:	68fb      	ldr	r3, [r7, #12]
 801cbee:	681b      	ldr	r3, [r3, #0]
 801cbf0:	330c      	adds	r3, #12
 801cbf2:	7812      	ldrb	r2, [r2, #0]
 801cbf4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801cbf6:	68fb      	ldr	r3, [r7, #12]
 801cbf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cbfa:	1c5a      	adds	r2, r3, #1
 801cbfc:	68fb      	ldr	r3, [r7, #12]
 801cbfe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801cc00:	68fb      	ldr	r3, [r7, #12]
 801cc02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801cc04:	b29b      	uxth	r3, r3
 801cc06:	3b01      	subs	r3, #1
 801cc08:	b29a      	uxth	r2, r3
 801cc0a:	68fb      	ldr	r3, [r7, #12]
 801cc0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801cc0e:	e057      	b.n	801ccc0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801cc10:	68fb      	ldr	r3, [r7, #12]
 801cc12:	681b      	ldr	r3, [r3, #0]
 801cc14:	689b      	ldr	r3, [r3, #8]
 801cc16:	f003 0302 	and.w	r3, r3, #2
 801cc1a:	2b02      	cmp	r3, #2
 801cc1c:	d11c      	bne.n	801cc58 <HAL_SPI_TransmitReceive+0x26c>
 801cc1e:	68fb      	ldr	r3, [r7, #12]
 801cc20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801cc22:	b29b      	uxth	r3, r3
 801cc24:	2b00      	cmp	r3, #0
 801cc26:	d017      	beq.n	801cc58 <HAL_SPI_TransmitReceive+0x26c>
 801cc28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cc2a:	2b01      	cmp	r3, #1
 801cc2c:	d114      	bne.n	801cc58 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801cc2e:	68fb      	ldr	r3, [r7, #12]
 801cc30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801cc32:	68fb      	ldr	r3, [r7, #12]
 801cc34:	681b      	ldr	r3, [r3, #0]
 801cc36:	330c      	adds	r3, #12
 801cc38:	7812      	ldrb	r2, [r2, #0]
 801cc3a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801cc3c:	68fb      	ldr	r3, [r7, #12]
 801cc3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cc40:	1c5a      	adds	r2, r3, #1
 801cc42:	68fb      	ldr	r3, [r7, #12]
 801cc44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801cc46:	68fb      	ldr	r3, [r7, #12]
 801cc48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801cc4a:	b29b      	uxth	r3, r3
 801cc4c:	3b01      	subs	r3, #1
 801cc4e:	b29a      	uxth	r2, r3
 801cc50:	68fb      	ldr	r3, [r7, #12]
 801cc52:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801cc54:	2300      	movs	r3, #0
 801cc56:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801cc58:	68fb      	ldr	r3, [r7, #12]
 801cc5a:	681b      	ldr	r3, [r3, #0]
 801cc5c:	689b      	ldr	r3, [r3, #8]
 801cc5e:	f003 0301 	and.w	r3, r3, #1
 801cc62:	2b01      	cmp	r3, #1
 801cc64:	d119      	bne.n	801cc9a <HAL_SPI_TransmitReceive+0x2ae>
 801cc66:	68fb      	ldr	r3, [r7, #12]
 801cc68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cc6a:	b29b      	uxth	r3, r3
 801cc6c:	2b00      	cmp	r3, #0
 801cc6e:	d014      	beq.n	801cc9a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 801cc70:	68fb      	ldr	r3, [r7, #12]
 801cc72:	681b      	ldr	r3, [r3, #0]
 801cc74:	68da      	ldr	r2, [r3, #12]
 801cc76:	68fb      	ldr	r3, [r7, #12]
 801cc78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cc7a:	b2d2      	uxtb	r2, r2
 801cc7c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 801cc7e:	68fb      	ldr	r3, [r7, #12]
 801cc80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cc82:	1c5a      	adds	r2, r3, #1
 801cc84:	68fb      	ldr	r3, [r7, #12]
 801cc86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801cc88:	68fb      	ldr	r3, [r7, #12]
 801cc8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cc8c:	b29b      	uxth	r3, r3
 801cc8e:	3b01      	subs	r3, #1
 801cc90:	b29a      	uxth	r2, r3
 801cc92:	68fb      	ldr	r3, [r7, #12]
 801cc94:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801cc96:	2301      	movs	r3, #1
 801cc98:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801cc9a:	f7fb fd6b 	bl	8018774 <HAL_GetTick>
 801cc9e:	4602      	mov	r2, r0
 801cca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cca2:	1ad3      	subs	r3, r2, r3
 801cca4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801cca6:	429a      	cmp	r2, r3
 801cca8:	d803      	bhi.n	801ccb2 <HAL_SPI_TransmitReceive+0x2c6>
 801ccaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ccac:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ccb0:	d102      	bne.n	801ccb8 <HAL_SPI_TransmitReceive+0x2cc>
 801ccb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ccb4:	2b00      	cmp	r3, #0
 801ccb6:	d103      	bne.n	801ccc0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 801ccb8:	2303      	movs	r3, #3
 801ccba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 801ccbe:	e029      	b.n	801cd14 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801ccc0:	68fb      	ldr	r3, [r7, #12]
 801ccc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801ccc4:	b29b      	uxth	r3, r3
 801ccc6:	2b00      	cmp	r3, #0
 801ccc8:	d1a2      	bne.n	801cc10 <HAL_SPI_TransmitReceive+0x224>
 801ccca:	68fb      	ldr	r3, [r7, #12]
 801cccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ccce:	b29b      	uxth	r3, r3
 801ccd0:	2b00      	cmp	r3, #0
 801ccd2:	d19d      	bne.n	801cc10 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801ccd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ccd6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801ccd8:	68f8      	ldr	r0, [r7, #12]
 801ccda:	f000 fa43 	bl	801d164 <SPI_EndRxTxTransaction>
 801ccde:	4603      	mov	r3, r0
 801cce0:	2b00      	cmp	r3, #0
 801cce2:	d006      	beq.n	801ccf2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 801cce4:	2301      	movs	r3, #1
 801cce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801ccea:	68fb      	ldr	r3, [r7, #12]
 801ccec:	2220      	movs	r2, #32
 801ccee:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 801ccf0:	e010      	b.n	801cd14 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801ccf2:	68fb      	ldr	r3, [r7, #12]
 801ccf4:	689b      	ldr	r3, [r3, #8]
 801ccf6:	2b00      	cmp	r3, #0
 801ccf8:	d10b      	bne.n	801cd12 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801ccfa:	2300      	movs	r3, #0
 801ccfc:	617b      	str	r3, [r7, #20]
 801ccfe:	68fb      	ldr	r3, [r7, #12]
 801cd00:	681b      	ldr	r3, [r3, #0]
 801cd02:	68db      	ldr	r3, [r3, #12]
 801cd04:	617b      	str	r3, [r7, #20]
 801cd06:	68fb      	ldr	r3, [r7, #12]
 801cd08:	681b      	ldr	r3, [r3, #0]
 801cd0a:	689b      	ldr	r3, [r3, #8]
 801cd0c:	617b      	str	r3, [r7, #20]
 801cd0e:	697b      	ldr	r3, [r7, #20]
 801cd10:	e000      	b.n	801cd14 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 801cd12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801cd14:	68fb      	ldr	r3, [r7, #12]
 801cd16:	2201      	movs	r2, #1
 801cd18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801cd1c:	68fb      	ldr	r3, [r7, #12]
 801cd1e:	2200      	movs	r2, #0
 801cd20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801cd24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 801cd28:	4618      	mov	r0, r3
 801cd2a:	3730      	adds	r7, #48	; 0x30
 801cd2c:	46bd      	mov	sp, r7
 801cd2e:	bd80      	pop	{r7, pc}

0801cd30 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801cd30:	b580      	push	{r7, lr}
 801cd32:	b088      	sub	sp, #32
 801cd34:	af00      	add	r7, sp, #0
 801cd36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 801cd38:	687b      	ldr	r3, [r7, #4]
 801cd3a:	681b      	ldr	r3, [r3, #0]
 801cd3c:	685b      	ldr	r3, [r3, #4]
 801cd3e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 801cd40:	687b      	ldr	r3, [r7, #4]
 801cd42:	681b      	ldr	r3, [r3, #0]
 801cd44:	689b      	ldr	r3, [r3, #8]
 801cd46:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 801cd48:	69bb      	ldr	r3, [r7, #24]
 801cd4a:	099b      	lsrs	r3, r3, #6
 801cd4c:	f003 0301 	and.w	r3, r3, #1
 801cd50:	2b00      	cmp	r3, #0
 801cd52:	d10f      	bne.n	801cd74 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801cd54:	69bb      	ldr	r3, [r7, #24]
 801cd56:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 801cd5a:	2b00      	cmp	r3, #0
 801cd5c:	d00a      	beq.n	801cd74 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801cd5e:	69fb      	ldr	r3, [r7, #28]
 801cd60:	099b      	lsrs	r3, r3, #6
 801cd62:	f003 0301 	and.w	r3, r3, #1
 801cd66:	2b00      	cmp	r3, #0
 801cd68:	d004      	beq.n	801cd74 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 801cd6a:	687b      	ldr	r3, [r7, #4]
 801cd6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cd6e:	6878      	ldr	r0, [r7, #4]
 801cd70:	4798      	blx	r3
    return;
 801cd72:	e0d7      	b.n	801cf24 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 801cd74:	69bb      	ldr	r3, [r7, #24]
 801cd76:	085b      	lsrs	r3, r3, #1
 801cd78:	f003 0301 	and.w	r3, r3, #1
 801cd7c:	2b00      	cmp	r3, #0
 801cd7e:	d00a      	beq.n	801cd96 <HAL_SPI_IRQHandler+0x66>
 801cd80:	69fb      	ldr	r3, [r7, #28]
 801cd82:	09db      	lsrs	r3, r3, #7
 801cd84:	f003 0301 	and.w	r3, r3, #1
 801cd88:	2b00      	cmp	r3, #0
 801cd8a:	d004      	beq.n	801cd96 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 801cd8c:	687b      	ldr	r3, [r7, #4]
 801cd8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cd90:	6878      	ldr	r0, [r7, #4]
 801cd92:	4798      	blx	r3
    return;
 801cd94:	e0c6      	b.n	801cf24 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801cd96:	69bb      	ldr	r3, [r7, #24]
 801cd98:	095b      	lsrs	r3, r3, #5
 801cd9a:	f003 0301 	and.w	r3, r3, #1
 801cd9e:	2b00      	cmp	r3, #0
 801cda0:	d10c      	bne.n	801cdbc <HAL_SPI_IRQHandler+0x8c>
 801cda2:	69bb      	ldr	r3, [r7, #24]
 801cda4:	099b      	lsrs	r3, r3, #6
 801cda6:	f003 0301 	and.w	r3, r3, #1
 801cdaa:	2b00      	cmp	r3, #0
 801cdac:	d106      	bne.n	801cdbc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 801cdae:	69bb      	ldr	r3, [r7, #24]
 801cdb0:	0a1b      	lsrs	r3, r3, #8
 801cdb2:	f003 0301 	and.w	r3, r3, #1
 801cdb6:	2b00      	cmp	r3, #0
 801cdb8:	f000 80b4 	beq.w	801cf24 <HAL_SPI_IRQHandler+0x1f4>
 801cdbc:	69fb      	ldr	r3, [r7, #28]
 801cdbe:	095b      	lsrs	r3, r3, #5
 801cdc0:	f003 0301 	and.w	r3, r3, #1
 801cdc4:	2b00      	cmp	r3, #0
 801cdc6:	f000 80ad 	beq.w	801cf24 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801cdca:	69bb      	ldr	r3, [r7, #24]
 801cdcc:	099b      	lsrs	r3, r3, #6
 801cdce:	f003 0301 	and.w	r3, r3, #1
 801cdd2:	2b00      	cmp	r3, #0
 801cdd4:	d023      	beq.n	801ce1e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801cdd6:	687b      	ldr	r3, [r7, #4]
 801cdd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801cddc:	b2db      	uxtb	r3, r3
 801cdde:	2b03      	cmp	r3, #3
 801cde0:	d011      	beq.n	801ce06 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801cde2:	687b      	ldr	r3, [r7, #4]
 801cde4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cde6:	f043 0204 	orr.w	r2, r3, #4
 801cdea:	687b      	ldr	r3, [r7, #4]
 801cdec:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801cdee:	2300      	movs	r3, #0
 801cdf0:	617b      	str	r3, [r7, #20]
 801cdf2:	687b      	ldr	r3, [r7, #4]
 801cdf4:	681b      	ldr	r3, [r3, #0]
 801cdf6:	68db      	ldr	r3, [r3, #12]
 801cdf8:	617b      	str	r3, [r7, #20]
 801cdfa:	687b      	ldr	r3, [r7, #4]
 801cdfc:	681b      	ldr	r3, [r3, #0]
 801cdfe:	689b      	ldr	r3, [r3, #8]
 801ce00:	617b      	str	r3, [r7, #20]
 801ce02:	697b      	ldr	r3, [r7, #20]
 801ce04:	e00b      	b.n	801ce1e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801ce06:	2300      	movs	r3, #0
 801ce08:	613b      	str	r3, [r7, #16]
 801ce0a:	687b      	ldr	r3, [r7, #4]
 801ce0c:	681b      	ldr	r3, [r3, #0]
 801ce0e:	68db      	ldr	r3, [r3, #12]
 801ce10:	613b      	str	r3, [r7, #16]
 801ce12:	687b      	ldr	r3, [r7, #4]
 801ce14:	681b      	ldr	r3, [r3, #0]
 801ce16:	689b      	ldr	r3, [r3, #8]
 801ce18:	613b      	str	r3, [r7, #16]
 801ce1a:	693b      	ldr	r3, [r7, #16]
        return;
 801ce1c:	e082      	b.n	801cf24 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 801ce1e:	69bb      	ldr	r3, [r7, #24]
 801ce20:	095b      	lsrs	r3, r3, #5
 801ce22:	f003 0301 	and.w	r3, r3, #1
 801ce26:	2b00      	cmp	r3, #0
 801ce28:	d014      	beq.n	801ce54 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801ce2a:	687b      	ldr	r3, [r7, #4]
 801ce2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ce2e:	f043 0201 	orr.w	r2, r3, #1
 801ce32:	687b      	ldr	r3, [r7, #4]
 801ce34:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801ce36:	2300      	movs	r3, #0
 801ce38:	60fb      	str	r3, [r7, #12]
 801ce3a:	687b      	ldr	r3, [r7, #4]
 801ce3c:	681b      	ldr	r3, [r3, #0]
 801ce3e:	689b      	ldr	r3, [r3, #8]
 801ce40:	60fb      	str	r3, [r7, #12]
 801ce42:	687b      	ldr	r3, [r7, #4]
 801ce44:	681b      	ldr	r3, [r3, #0]
 801ce46:	681a      	ldr	r2, [r3, #0]
 801ce48:	687b      	ldr	r3, [r7, #4]
 801ce4a:	681b      	ldr	r3, [r3, #0]
 801ce4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801ce50:	601a      	str	r2, [r3, #0]
 801ce52:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 801ce54:	69bb      	ldr	r3, [r7, #24]
 801ce56:	0a1b      	lsrs	r3, r3, #8
 801ce58:	f003 0301 	and.w	r3, r3, #1
 801ce5c:	2b00      	cmp	r3, #0
 801ce5e:	d00c      	beq.n	801ce7a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801ce60:	687b      	ldr	r3, [r7, #4]
 801ce62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ce64:	f043 0208 	orr.w	r2, r3, #8
 801ce68:	687b      	ldr	r3, [r7, #4]
 801ce6a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 801ce6c:	2300      	movs	r3, #0
 801ce6e:	60bb      	str	r3, [r7, #8]
 801ce70:	687b      	ldr	r3, [r7, #4]
 801ce72:	681b      	ldr	r3, [r3, #0]
 801ce74:	689b      	ldr	r3, [r3, #8]
 801ce76:	60bb      	str	r3, [r7, #8]
 801ce78:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801ce7a:	687b      	ldr	r3, [r7, #4]
 801ce7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ce7e:	2b00      	cmp	r3, #0
 801ce80:	d04f      	beq.n	801cf22 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 801ce82:	687b      	ldr	r3, [r7, #4]
 801ce84:	681b      	ldr	r3, [r3, #0]
 801ce86:	685a      	ldr	r2, [r3, #4]
 801ce88:	687b      	ldr	r3, [r7, #4]
 801ce8a:	681b      	ldr	r3, [r3, #0]
 801ce8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801ce90:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 801ce92:	687b      	ldr	r3, [r7, #4]
 801ce94:	2201      	movs	r2, #1
 801ce96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 801ce9a:	69fb      	ldr	r3, [r7, #28]
 801ce9c:	f003 0302 	and.w	r3, r3, #2
 801cea0:	2b00      	cmp	r3, #0
 801cea2:	d104      	bne.n	801ceae <HAL_SPI_IRQHandler+0x17e>
 801cea4:	69fb      	ldr	r3, [r7, #28]
 801cea6:	f003 0301 	and.w	r3, r3, #1
 801ceaa:	2b00      	cmp	r3, #0
 801ceac:	d034      	beq.n	801cf18 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 801ceae:	687b      	ldr	r3, [r7, #4]
 801ceb0:	681b      	ldr	r3, [r3, #0]
 801ceb2:	685a      	ldr	r2, [r3, #4]
 801ceb4:	687b      	ldr	r3, [r7, #4]
 801ceb6:	681b      	ldr	r3, [r3, #0]
 801ceb8:	f022 0203 	bic.w	r2, r2, #3
 801cebc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801cebe:	687b      	ldr	r3, [r7, #4]
 801cec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cec2:	2b00      	cmp	r3, #0
 801cec4:	d011      	beq.n	801ceea <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801cec6:	687b      	ldr	r3, [r7, #4]
 801cec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ceca:	4a18      	ldr	r2, [pc, #96]	; (801cf2c <HAL_SPI_IRQHandler+0x1fc>)
 801cecc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801cece:	687b      	ldr	r3, [r7, #4]
 801ced0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ced2:	4618      	mov	r0, r3
 801ced4:	f7fc f946 	bl	8019164 <HAL_DMA_Abort_IT>
 801ced8:	4603      	mov	r3, r0
 801ceda:	2b00      	cmp	r3, #0
 801cedc:	d005      	beq.n	801ceea <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801cede:	687b      	ldr	r3, [r7, #4]
 801cee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cee2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801cee6:	687b      	ldr	r3, [r7, #4]
 801cee8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801ceea:	687b      	ldr	r3, [r7, #4]
 801ceec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ceee:	2b00      	cmp	r3, #0
 801cef0:	d016      	beq.n	801cf20 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801cef2:	687b      	ldr	r3, [r7, #4]
 801cef4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cef6:	4a0d      	ldr	r2, [pc, #52]	; (801cf2c <HAL_SPI_IRQHandler+0x1fc>)
 801cef8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801cefa:	687b      	ldr	r3, [r7, #4]
 801cefc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cefe:	4618      	mov	r0, r3
 801cf00:	f7fc f930 	bl	8019164 <HAL_DMA_Abort_IT>
 801cf04:	4603      	mov	r3, r0
 801cf06:	2b00      	cmp	r3, #0
 801cf08:	d00a      	beq.n	801cf20 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801cf0a:	687b      	ldr	r3, [r7, #4]
 801cf0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cf0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801cf12:	687b      	ldr	r3, [r7, #4]
 801cf14:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 801cf16:	e003      	b.n	801cf20 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 801cf18:	6878      	ldr	r0, [r7, #4]
 801cf1a:	f000 f809 	bl	801cf30 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801cf1e:	e000      	b.n	801cf22 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 801cf20:	bf00      	nop
    return;
 801cf22:	bf00      	nop
  }
}
 801cf24:	3720      	adds	r7, #32
 801cf26:	46bd      	mov	sp, r7
 801cf28:	bd80      	pop	{r7, pc}
 801cf2a:	bf00      	nop
 801cf2c:	0801cf61 	.word	0x0801cf61

0801cf30 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 801cf30:	b480      	push	{r7}
 801cf32:	b083      	sub	sp, #12
 801cf34:	af00      	add	r7, sp, #0
 801cf36:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 801cf38:	bf00      	nop
 801cf3a:	370c      	adds	r7, #12
 801cf3c:	46bd      	mov	sp, r7
 801cf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf42:	4770      	bx	lr

0801cf44 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 801cf44:	b480      	push	{r7}
 801cf46:	b083      	sub	sp, #12
 801cf48:	af00      	add	r7, sp, #0
 801cf4a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 801cf4c:	687b      	ldr	r3, [r7, #4]
 801cf4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801cf52:	b2db      	uxtb	r3, r3
}
 801cf54:	4618      	mov	r0, r3
 801cf56:	370c      	adds	r7, #12
 801cf58:	46bd      	mov	sp, r7
 801cf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf5e:	4770      	bx	lr

0801cf60 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801cf60:	b580      	push	{r7, lr}
 801cf62:	b084      	sub	sp, #16
 801cf64:	af00      	add	r7, sp, #0
 801cf66:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801cf68:	687b      	ldr	r3, [r7, #4]
 801cf6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cf6c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 801cf6e:	68fb      	ldr	r3, [r7, #12]
 801cf70:	2200      	movs	r2, #0
 801cf72:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 801cf74:	68fb      	ldr	r3, [r7, #12]
 801cf76:	2200      	movs	r2, #0
 801cf78:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801cf7a:	68f8      	ldr	r0, [r7, #12]
 801cf7c:	f7ff ffd8 	bl	801cf30 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801cf80:	bf00      	nop
 801cf82:	3710      	adds	r7, #16
 801cf84:	46bd      	mov	sp, r7
 801cf86:	bd80      	pop	{r7, pc}

0801cf88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801cf88:	b580      	push	{r7, lr}
 801cf8a:	b088      	sub	sp, #32
 801cf8c:	af00      	add	r7, sp, #0
 801cf8e:	60f8      	str	r0, [r7, #12]
 801cf90:	60b9      	str	r1, [r7, #8]
 801cf92:	603b      	str	r3, [r7, #0]
 801cf94:	4613      	mov	r3, r2
 801cf96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801cf98:	f7fb fbec 	bl	8018774 <HAL_GetTick>
 801cf9c:	4602      	mov	r2, r0
 801cf9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cfa0:	1a9b      	subs	r3, r3, r2
 801cfa2:	683a      	ldr	r2, [r7, #0]
 801cfa4:	4413      	add	r3, r2
 801cfa6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801cfa8:	f7fb fbe4 	bl	8018774 <HAL_GetTick>
 801cfac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801cfae:	4b39      	ldr	r3, [pc, #228]	; (801d094 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801cfb0:	681b      	ldr	r3, [r3, #0]
 801cfb2:	015b      	lsls	r3, r3, #5
 801cfb4:	0d1b      	lsrs	r3, r3, #20
 801cfb6:	69fa      	ldr	r2, [r7, #28]
 801cfb8:	fb02 f303 	mul.w	r3, r2, r3
 801cfbc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801cfbe:	e054      	b.n	801d06a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801cfc0:	683b      	ldr	r3, [r7, #0]
 801cfc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cfc6:	d050      	beq.n	801d06a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801cfc8:	f7fb fbd4 	bl	8018774 <HAL_GetTick>
 801cfcc:	4602      	mov	r2, r0
 801cfce:	69bb      	ldr	r3, [r7, #24]
 801cfd0:	1ad3      	subs	r3, r2, r3
 801cfd2:	69fa      	ldr	r2, [r7, #28]
 801cfd4:	429a      	cmp	r2, r3
 801cfd6:	d902      	bls.n	801cfde <SPI_WaitFlagStateUntilTimeout+0x56>
 801cfd8:	69fb      	ldr	r3, [r7, #28]
 801cfda:	2b00      	cmp	r3, #0
 801cfdc:	d13d      	bne.n	801d05a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801cfde:	68fb      	ldr	r3, [r7, #12]
 801cfe0:	681b      	ldr	r3, [r3, #0]
 801cfe2:	685a      	ldr	r2, [r3, #4]
 801cfe4:	68fb      	ldr	r3, [r7, #12]
 801cfe6:	681b      	ldr	r3, [r3, #0]
 801cfe8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801cfec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801cfee:	68fb      	ldr	r3, [r7, #12]
 801cff0:	685b      	ldr	r3, [r3, #4]
 801cff2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801cff6:	d111      	bne.n	801d01c <SPI_WaitFlagStateUntilTimeout+0x94>
 801cff8:	68fb      	ldr	r3, [r7, #12]
 801cffa:	689b      	ldr	r3, [r3, #8]
 801cffc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801d000:	d004      	beq.n	801d00c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801d002:	68fb      	ldr	r3, [r7, #12]
 801d004:	689b      	ldr	r3, [r3, #8]
 801d006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801d00a:	d107      	bne.n	801d01c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801d00c:	68fb      	ldr	r3, [r7, #12]
 801d00e:	681b      	ldr	r3, [r3, #0]
 801d010:	681a      	ldr	r2, [r3, #0]
 801d012:	68fb      	ldr	r3, [r7, #12]
 801d014:	681b      	ldr	r3, [r3, #0]
 801d016:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801d01a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801d01c:	68fb      	ldr	r3, [r7, #12]
 801d01e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d024:	d10f      	bne.n	801d046 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801d026:	68fb      	ldr	r3, [r7, #12]
 801d028:	681b      	ldr	r3, [r3, #0]
 801d02a:	681a      	ldr	r2, [r3, #0]
 801d02c:	68fb      	ldr	r3, [r7, #12]
 801d02e:	681b      	ldr	r3, [r3, #0]
 801d030:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801d034:	601a      	str	r2, [r3, #0]
 801d036:	68fb      	ldr	r3, [r7, #12]
 801d038:	681b      	ldr	r3, [r3, #0]
 801d03a:	681a      	ldr	r2, [r3, #0]
 801d03c:	68fb      	ldr	r3, [r7, #12]
 801d03e:	681b      	ldr	r3, [r3, #0]
 801d040:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801d044:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801d046:	68fb      	ldr	r3, [r7, #12]
 801d048:	2201      	movs	r2, #1
 801d04a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801d04e:	68fb      	ldr	r3, [r7, #12]
 801d050:	2200      	movs	r2, #0
 801d052:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 801d056:	2303      	movs	r3, #3
 801d058:	e017      	b.n	801d08a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 801d05a:	697b      	ldr	r3, [r7, #20]
 801d05c:	2b00      	cmp	r3, #0
 801d05e:	d101      	bne.n	801d064 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801d060:	2300      	movs	r3, #0
 801d062:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801d064:	697b      	ldr	r3, [r7, #20]
 801d066:	3b01      	subs	r3, #1
 801d068:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801d06a:	68fb      	ldr	r3, [r7, #12]
 801d06c:	681b      	ldr	r3, [r3, #0]
 801d06e:	689a      	ldr	r2, [r3, #8]
 801d070:	68bb      	ldr	r3, [r7, #8]
 801d072:	4013      	ands	r3, r2
 801d074:	68ba      	ldr	r2, [r7, #8]
 801d076:	429a      	cmp	r2, r3
 801d078:	bf0c      	ite	eq
 801d07a:	2301      	moveq	r3, #1
 801d07c:	2300      	movne	r3, #0
 801d07e:	b2db      	uxtb	r3, r3
 801d080:	461a      	mov	r2, r3
 801d082:	79fb      	ldrb	r3, [r7, #7]
 801d084:	429a      	cmp	r2, r3
 801d086:	d19b      	bne.n	801cfc0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801d088:	2300      	movs	r3, #0
}
 801d08a:	4618      	mov	r0, r3
 801d08c:	3720      	adds	r7, #32
 801d08e:	46bd      	mov	sp, r7
 801d090:	bd80      	pop	{r7, pc}
 801d092:	bf00      	nop
 801d094:	2000058c 	.word	0x2000058c

0801d098 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801d098:	b580      	push	{r7, lr}
 801d09a:	b086      	sub	sp, #24
 801d09c:	af02      	add	r7, sp, #8
 801d09e:	60f8      	str	r0, [r7, #12]
 801d0a0:	60b9      	str	r1, [r7, #8]
 801d0a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801d0a4:	68fb      	ldr	r3, [r7, #12]
 801d0a6:	685b      	ldr	r3, [r3, #4]
 801d0a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801d0ac:	d111      	bne.n	801d0d2 <SPI_EndRxTransaction+0x3a>
 801d0ae:	68fb      	ldr	r3, [r7, #12]
 801d0b0:	689b      	ldr	r3, [r3, #8]
 801d0b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801d0b6:	d004      	beq.n	801d0c2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801d0b8:	68fb      	ldr	r3, [r7, #12]
 801d0ba:	689b      	ldr	r3, [r3, #8]
 801d0bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801d0c0:	d107      	bne.n	801d0d2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801d0c2:	68fb      	ldr	r3, [r7, #12]
 801d0c4:	681b      	ldr	r3, [r3, #0]
 801d0c6:	681a      	ldr	r2, [r3, #0]
 801d0c8:	68fb      	ldr	r3, [r7, #12]
 801d0ca:	681b      	ldr	r3, [r3, #0]
 801d0cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801d0d0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801d0d2:	68fb      	ldr	r3, [r7, #12]
 801d0d4:	685b      	ldr	r3, [r3, #4]
 801d0d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801d0da:	d12a      	bne.n	801d132 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 801d0dc:	68fb      	ldr	r3, [r7, #12]
 801d0de:	689b      	ldr	r3, [r3, #8]
 801d0e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801d0e4:	d012      	beq.n	801d10c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801d0e6:	687b      	ldr	r3, [r7, #4]
 801d0e8:	9300      	str	r3, [sp, #0]
 801d0ea:	68bb      	ldr	r3, [r7, #8]
 801d0ec:	2200      	movs	r2, #0
 801d0ee:	2180      	movs	r1, #128	; 0x80
 801d0f0:	68f8      	ldr	r0, [r7, #12]
 801d0f2:	f7ff ff49 	bl	801cf88 <SPI_WaitFlagStateUntilTimeout>
 801d0f6:	4603      	mov	r3, r0
 801d0f8:	2b00      	cmp	r3, #0
 801d0fa:	d02d      	beq.n	801d158 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801d0fc:	68fb      	ldr	r3, [r7, #12]
 801d0fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d100:	f043 0220 	orr.w	r2, r3, #32
 801d104:	68fb      	ldr	r3, [r7, #12]
 801d106:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801d108:	2303      	movs	r3, #3
 801d10a:	e026      	b.n	801d15a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801d10c:	687b      	ldr	r3, [r7, #4]
 801d10e:	9300      	str	r3, [sp, #0]
 801d110:	68bb      	ldr	r3, [r7, #8]
 801d112:	2200      	movs	r2, #0
 801d114:	2101      	movs	r1, #1
 801d116:	68f8      	ldr	r0, [r7, #12]
 801d118:	f7ff ff36 	bl	801cf88 <SPI_WaitFlagStateUntilTimeout>
 801d11c:	4603      	mov	r3, r0
 801d11e:	2b00      	cmp	r3, #0
 801d120:	d01a      	beq.n	801d158 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801d122:	68fb      	ldr	r3, [r7, #12]
 801d124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d126:	f043 0220 	orr.w	r2, r3, #32
 801d12a:	68fb      	ldr	r3, [r7, #12]
 801d12c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801d12e:	2303      	movs	r3, #3
 801d130:	e013      	b.n	801d15a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801d132:	687b      	ldr	r3, [r7, #4]
 801d134:	9300      	str	r3, [sp, #0]
 801d136:	68bb      	ldr	r3, [r7, #8]
 801d138:	2200      	movs	r2, #0
 801d13a:	2101      	movs	r1, #1
 801d13c:	68f8      	ldr	r0, [r7, #12]
 801d13e:	f7ff ff23 	bl	801cf88 <SPI_WaitFlagStateUntilTimeout>
 801d142:	4603      	mov	r3, r0
 801d144:	2b00      	cmp	r3, #0
 801d146:	d007      	beq.n	801d158 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801d148:	68fb      	ldr	r3, [r7, #12]
 801d14a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d14c:	f043 0220 	orr.w	r2, r3, #32
 801d150:	68fb      	ldr	r3, [r7, #12]
 801d152:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801d154:	2303      	movs	r3, #3
 801d156:	e000      	b.n	801d15a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 801d158:	2300      	movs	r3, #0
}
 801d15a:	4618      	mov	r0, r3
 801d15c:	3710      	adds	r7, #16
 801d15e:	46bd      	mov	sp, r7
 801d160:	bd80      	pop	{r7, pc}
	...

0801d164 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801d164:	b580      	push	{r7, lr}
 801d166:	b088      	sub	sp, #32
 801d168:	af02      	add	r7, sp, #8
 801d16a:	60f8      	str	r0, [r7, #12]
 801d16c:	60b9      	str	r1, [r7, #8]
 801d16e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801d170:	4b1b      	ldr	r3, [pc, #108]	; (801d1e0 <SPI_EndRxTxTransaction+0x7c>)
 801d172:	681b      	ldr	r3, [r3, #0]
 801d174:	4a1b      	ldr	r2, [pc, #108]	; (801d1e4 <SPI_EndRxTxTransaction+0x80>)
 801d176:	fba2 2303 	umull	r2, r3, r2, r3
 801d17a:	0d5b      	lsrs	r3, r3, #21
 801d17c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d180:	fb02 f303 	mul.w	r3, r2, r3
 801d184:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801d186:	68fb      	ldr	r3, [r7, #12]
 801d188:	685b      	ldr	r3, [r3, #4]
 801d18a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801d18e:	d112      	bne.n	801d1b6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801d190:	687b      	ldr	r3, [r7, #4]
 801d192:	9300      	str	r3, [sp, #0]
 801d194:	68bb      	ldr	r3, [r7, #8]
 801d196:	2200      	movs	r2, #0
 801d198:	2180      	movs	r1, #128	; 0x80
 801d19a:	68f8      	ldr	r0, [r7, #12]
 801d19c:	f7ff fef4 	bl	801cf88 <SPI_WaitFlagStateUntilTimeout>
 801d1a0:	4603      	mov	r3, r0
 801d1a2:	2b00      	cmp	r3, #0
 801d1a4:	d016      	beq.n	801d1d4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801d1a6:	68fb      	ldr	r3, [r7, #12]
 801d1a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d1aa:	f043 0220 	orr.w	r2, r3, #32
 801d1ae:	68fb      	ldr	r3, [r7, #12]
 801d1b0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801d1b2:	2303      	movs	r3, #3
 801d1b4:	e00f      	b.n	801d1d6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801d1b6:	697b      	ldr	r3, [r7, #20]
 801d1b8:	2b00      	cmp	r3, #0
 801d1ba:	d00a      	beq.n	801d1d2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 801d1bc:	697b      	ldr	r3, [r7, #20]
 801d1be:	3b01      	subs	r3, #1
 801d1c0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801d1c2:	68fb      	ldr	r3, [r7, #12]
 801d1c4:	681b      	ldr	r3, [r3, #0]
 801d1c6:	689b      	ldr	r3, [r3, #8]
 801d1c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d1cc:	2b80      	cmp	r3, #128	; 0x80
 801d1ce:	d0f2      	beq.n	801d1b6 <SPI_EndRxTxTransaction+0x52>
 801d1d0:	e000      	b.n	801d1d4 <SPI_EndRxTxTransaction+0x70>
        break;
 801d1d2:	bf00      	nop
  }

  return HAL_OK;
 801d1d4:	2300      	movs	r3, #0
}
 801d1d6:	4618      	mov	r0, r3
 801d1d8:	3718      	adds	r7, #24
 801d1da:	46bd      	mov	sp, r7
 801d1dc:	bd80      	pop	{r7, pc}
 801d1de:	bf00      	nop
 801d1e0:	2000058c 	.word	0x2000058c
 801d1e4:	165e9f81 	.word	0x165e9f81

0801d1e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801d1e8:	b580      	push	{r7, lr}
 801d1ea:	b082      	sub	sp, #8
 801d1ec:	af00      	add	r7, sp, #0
 801d1ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801d1f0:	687b      	ldr	r3, [r7, #4]
 801d1f2:	2b00      	cmp	r3, #0
 801d1f4:	d101      	bne.n	801d1fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801d1f6:	2301      	movs	r3, #1
 801d1f8:	e041      	b.n	801d27e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801d1fa:	687b      	ldr	r3, [r7, #4]
 801d1fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d200:	b2db      	uxtb	r3, r3
 801d202:	2b00      	cmp	r3, #0
 801d204:	d106      	bne.n	801d214 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801d206:	687b      	ldr	r3, [r7, #4]
 801d208:	2200      	movs	r2, #0
 801d20a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801d20e:	6878      	ldr	r0, [r7, #4]
 801d210:	f7fb f908 	bl	8018424 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801d214:	687b      	ldr	r3, [r7, #4]
 801d216:	2202      	movs	r2, #2
 801d218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801d21c:	687b      	ldr	r3, [r7, #4]
 801d21e:	681a      	ldr	r2, [r3, #0]
 801d220:	687b      	ldr	r3, [r7, #4]
 801d222:	3304      	adds	r3, #4
 801d224:	4619      	mov	r1, r3
 801d226:	4610      	mov	r0, r2
 801d228:	f000 faf2 	bl	801d810 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801d22c:	687b      	ldr	r3, [r7, #4]
 801d22e:	2201      	movs	r2, #1
 801d230:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801d234:	687b      	ldr	r3, [r7, #4]
 801d236:	2201      	movs	r2, #1
 801d238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801d23c:	687b      	ldr	r3, [r7, #4]
 801d23e:	2201      	movs	r2, #1
 801d240:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801d244:	687b      	ldr	r3, [r7, #4]
 801d246:	2201      	movs	r2, #1
 801d248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801d24c:	687b      	ldr	r3, [r7, #4]
 801d24e:	2201      	movs	r2, #1
 801d250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801d254:	687b      	ldr	r3, [r7, #4]
 801d256:	2201      	movs	r2, #1
 801d258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801d25c:	687b      	ldr	r3, [r7, #4]
 801d25e:	2201      	movs	r2, #1
 801d260:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801d264:	687b      	ldr	r3, [r7, #4]
 801d266:	2201      	movs	r2, #1
 801d268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801d26c:	687b      	ldr	r3, [r7, #4]
 801d26e:	2201      	movs	r2, #1
 801d270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801d274:	687b      	ldr	r3, [r7, #4]
 801d276:	2201      	movs	r2, #1
 801d278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801d27c:	2300      	movs	r3, #0
}
 801d27e:	4618      	mov	r0, r3
 801d280:	3708      	adds	r7, #8
 801d282:	46bd      	mov	sp, r7
 801d284:	bd80      	pop	{r7, pc}
	...

0801d288 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801d288:	b480      	push	{r7}
 801d28a:	b085      	sub	sp, #20
 801d28c:	af00      	add	r7, sp, #0
 801d28e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801d290:	687b      	ldr	r3, [r7, #4]
 801d292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d296:	b2db      	uxtb	r3, r3
 801d298:	2b01      	cmp	r3, #1
 801d29a:	d001      	beq.n	801d2a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801d29c:	2301      	movs	r3, #1
 801d29e:	e04e      	b.n	801d33e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801d2a0:	687b      	ldr	r3, [r7, #4]
 801d2a2:	2202      	movs	r2, #2
 801d2a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801d2a8:	687b      	ldr	r3, [r7, #4]
 801d2aa:	681b      	ldr	r3, [r3, #0]
 801d2ac:	68da      	ldr	r2, [r3, #12]
 801d2ae:	687b      	ldr	r3, [r7, #4]
 801d2b0:	681b      	ldr	r3, [r3, #0]
 801d2b2:	f042 0201 	orr.w	r2, r2, #1
 801d2b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801d2b8:	687b      	ldr	r3, [r7, #4]
 801d2ba:	681b      	ldr	r3, [r3, #0]
 801d2bc:	4a23      	ldr	r2, [pc, #140]	; (801d34c <HAL_TIM_Base_Start_IT+0xc4>)
 801d2be:	4293      	cmp	r3, r2
 801d2c0:	d022      	beq.n	801d308 <HAL_TIM_Base_Start_IT+0x80>
 801d2c2:	687b      	ldr	r3, [r7, #4]
 801d2c4:	681b      	ldr	r3, [r3, #0]
 801d2c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d2ca:	d01d      	beq.n	801d308 <HAL_TIM_Base_Start_IT+0x80>
 801d2cc:	687b      	ldr	r3, [r7, #4]
 801d2ce:	681b      	ldr	r3, [r3, #0]
 801d2d0:	4a1f      	ldr	r2, [pc, #124]	; (801d350 <HAL_TIM_Base_Start_IT+0xc8>)
 801d2d2:	4293      	cmp	r3, r2
 801d2d4:	d018      	beq.n	801d308 <HAL_TIM_Base_Start_IT+0x80>
 801d2d6:	687b      	ldr	r3, [r7, #4]
 801d2d8:	681b      	ldr	r3, [r3, #0]
 801d2da:	4a1e      	ldr	r2, [pc, #120]	; (801d354 <HAL_TIM_Base_Start_IT+0xcc>)
 801d2dc:	4293      	cmp	r3, r2
 801d2de:	d013      	beq.n	801d308 <HAL_TIM_Base_Start_IT+0x80>
 801d2e0:	687b      	ldr	r3, [r7, #4]
 801d2e2:	681b      	ldr	r3, [r3, #0]
 801d2e4:	4a1c      	ldr	r2, [pc, #112]	; (801d358 <HAL_TIM_Base_Start_IT+0xd0>)
 801d2e6:	4293      	cmp	r3, r2
 801d2e8:	d00e      	beq.n	801d308 <HAL_TIM_Base_Start_IT+0x80>
 801d2ea:	687b      	ldr	r3, [r7, #4]
 801d2ec:	681b      	ldr	r3, [r3, #0]
 801d2ee:	4a1b      	ldr	r2, [pc, #108]	; (801d35c <HAL_TIM_Base_Start_IT+0xd4>)
 801d2f0:	4293      	cmp	r3, r2
 801d2f2:	d009      	beq.n	801d308 <HAL_TIM_Base_Start_IT+0x80>
 801d2f4:	687b      	ldr	r3, [r7, #4]
 801d2f6:	681b      	ldr	r3, [r3, #0]
 801d2f8:	4a19      	ldr	r2, [pc, #100]	; (801d360 <HAL_TIM_Base_Start_IT+0xd8>)
 801d2fa:	4293      	cmp	r3, r2
 801d2fc:	d004      	beq.n	801d308 <HAL_TIM_Base_Start_IT+0x80>
 801d2fe:	687b      	ldr	r3, [r7, #4]
 801d300:	681b      	ldr	r3, [r3, #0]
 801d302:	4a18      	ldr	r2, [pc, #96]	; (801d364 <HAL_TIM_Base_Start_IT+0xdc>)
 801d304:	4293      	cmp	r3, r2
 801d306:	d111      	bne.n	801d32c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801d308:	687b      	ldr	r3, [r7, #4]
 801d30a:	681b      	ldr	r3, [r3, #0]
 801d30c:	689b      	ldr	r3, [r3, #8]
 801d30e:	f003 0307 	and.w	r3, r3, #7
 801d312:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801d314:	68fb      	ldr	r3, [r7, #12]
 801d316:	2b06      	cmp	r3, #6
 801d318:	d010      	beq.n	801d33c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 801d31a:	687b      	ldr	r3, [r7, #4]
 801d31c:	681b      	ldr	r3, [r3, #0]
 801d31e:	681a      	ldr	r2, [r3, #0]
 801d320:	687b      	ldr	r3, [r7, #4]
 801d322:	681b      	ldr	r3, [r3, #0]
 801d324:	f042 0201 	orr.w	r2, r2, #1
 801d328:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801d32a:	e007      	b.n	801d33c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801d32c:	687b      	ldr	r3, [r7, #4]
 801d32e:	681b      	ldr	r3, [r3, #0]
 801d330:	681a      	ldr	r2, [r3, #0]
 801d332:	687b      	ldr	r3, [r7, #4]
 801d334:	681b      	ldr	r3, [r3, #0]
 801d336:	f042 0201 	orr.w	r2, r2, #1
 801d33a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801d33c:	2300      	movs	r3, #0
}
 801d33e:	4618      	mov	r0, r3
 801d340:	3714      	adds	r7, #20
 801d342:	46bd      	mov	sp, r7
 801d344:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d348:	4770      	bx	lr
 801d34a:	bf00      	nop
 801d34c:	40010000 	.word	0x40010000
 801d350:	40000400 	.word	0x40000400
 801d354:	40000800 	.word	0x40000800
 801d358:	40000c00 	.word	0x40000c00
 801d35c:	40010400 	.word	0x40010400
 801d360:	40014000 	.word	0x40014000
 801d364:	40001800 	.word	0x40001800

0801d368 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801d368:	b580      	push	{r7, lr}
 801d36a:	b082      	sub	sp, #8
 801d36c:	af00      	add	r7, sp, #0
 801d36e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801d370:	687b      	ldr	r3, [r7, #4]
 801d372:	681b      	ldr	r3, [r3, #0]
 801d374:	691b      	ldr	r3, [r3, #16]
 801d376:	f003 0302 	and.w	r3, r3, #2
 801d37a:	2b02      	cmp	r3, #2
 801d37c:	d122      	bne.n	801d3c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801d37e:	687b      	ldr	r3, [r7, #4]
 801d380:	681b      	ldr	r3, [r3, #0]
 801d382:	68db      	ldr	r3, [r3, #12]
 801d384:	f003 0302 	and.w	r3, r3, #2
 801d388:	2b02      	cmp	r3, #2
 801d38a:	d11b      	bne.n	801d3c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801d38c:	687b      	ldr	r3, [r7, #4]
 801d38e:	681b      	ldr	r3, [r3, #0]
 801d390:	f06f 0202 	mvn.w	r2, #2
 801d394:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801d396:	687b      	ldr	r3, [r7, #4]
 801d398:	2201      	movs	r2, #1
 801d39a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801d39c:	687b      	ldr	r3, [r7, #4]
 801d39e:	681b      	ldr	r3, [r3, #0]
 801d3a0:	699b      	ldr	r3, [r3, #24]
 801d3a2:	f003 0303 	and.w	r3, r3, #3
 801d3a6:	2b00      	cmp	r3, #0
 801d3a8:	d003      	beq.n	801d3b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801d3aa:	6878      	ldr	r0, [r7, #4]
 801d3ac:	f000 fa11 	bl	801d7d2 <HAL_TIM_IC_CaptureCallback>
 801d3b0:	e005      	b.n	801d3be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801d3b2:	6878      	ldr	r0, [r7, #4]
 801d3b4:	f000 fa03 	bl	801d7be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d3b8:	6878      	ldr	r0, [r7, #4]
 801d3ba:	f000 fa14 	bl	801d7e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d3be:	687b      	ldr	r3, [r7, #4]
 801d3c0:	2200      	movs	r2, #0
 801d3c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801d3c4:	687b      	ldr	r3, [r7, #4]
 801d3c6:	681b      	ldr	r3, [r3, #0]
 801d3c8:	691b      	ldr	r3, [r3, #16]
 801d3ca:	f003 0304 	and.w	r3, r3, #4
 801d3ce:	2b04      	cmp	r3, #4
 801d3d0:	d122      	bne.n	801d418 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801d3d2:	687b      	ldr	r3, [r7, #4]
 801d3d4:	681b      	ldr	r3, [r3, #0]
 801d3d6:	68db      	ldr	r3, [r3, #12]
 801d3d8:	f003 0304 	and.w	r3, r3, #4
 801d3dc:	2b04      	cmp	r3, #4
 801d3de:	d11b      	bne.n	801d418 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801d3e0:	687b      	ldr	r3, [r7, #4]
 801d3e2:	681b      	ldr	r3, [r3, #0]
 801d3e4:	f06f 0204 	mvn.w	r2, #4
 801d3e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801d3ea:	687b      	ldr	r3, [r7, #4]
 801d3ec:	2202      	movs	r2, #2
 801d3ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801d3f0:	687b      	ldr	r3, [r7, #4]
 801d3f2:	681b      	ldr	r3, [r3, #0]
 801d3f4:	699b      	ldr	r3, [r3, #24]
 801d3f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d3fa:	2b00      	cmp	r3, #0
 801d3fc:	d003      	beq.n	801d406 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d3fe:	6878      	ldr	r0, [r7, #4]
 801d400:	f000 f9e7 	bl	801d7d2 <HAL_TIM_IC_CaptureCallback>
 801d404:	e005      	b.n	801d412 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d406:	6878      	ldr	r0, [r7, #4]
 801d408:	f000 f9d9 	bl	801d7be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d40c:	6878      	ldr	r0, [r7, #4]
 801d40e:	f000 f9ea 	bl	801d7e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d412:	687b      	ldr	r3, [r7, #4]
 801d414:	2200      	movs	r2, #0
 801d416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801d418:	687b      	ldr	r3, [r7, #4]
 801d41a:	681b      	ldr	r3, [r3, #0]
 801d41c:	691b      	ldr	r3, [r3, #16]
 801d41e:	f003 0308 	and.w	r3, r3, #8
 801d422:	2b08      	cmp	r3, #8
 801d424:	d122      	bne.n	801d46c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801d426:	687b      	ldr	r3, [r7, #4]
 801d428:	681b      	ldr	r3, [r3, #0]
 801d42a:	68db      	ldr	r3, [r3, #12]
 801d42c:	f003 0308 	and.w	r3, r3, #8
 801d430:	2b08      	cmp	r3, #8
 801d432:	d11b      	bne.n	801d46c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801d434:	687b      	ldr	r3, [r7, #4]
 801d436:	681b      	ldr	r3, [r3, #0]
 801d438:	f06f 0208 	mvn.w	r2, #8
 801d43c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801d43e:	687b      	ldr	r3, [r7, #4]
 801d440:	2204      	movs	r2, #4
 801d442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801d444:	687b      	ldr	r3, [r7, #4]
 801d446:	681b      	ldr	r3, [r3, #0]
 801d448:	69db      	ldr	r3, [r3, #28]
 801d44a:	f003 0303 	and.w	r3, r3, #3
 801d44e:	2b00      	cmp	r3, #0
 801d450:	d003      	beq.n	801d45a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d452:	6878      	ldr	r0, [r7, #4]
 801d454:	f000 f9bd 	bl	801d7d2 <HAL_TIM_IC_CaptureCallback>
 801d458:	e005      	b.n	801d466 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d45a:	6878      	ldr	r0, [r7, #4]
 801d45c:	f000 f9af 	bl	801d7be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d460:	6878      	ldr	r0, [r7, #4]
 801d462:	f000 f9c0 	bl	801d7e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d466:	687b      	ldr	r3, [r7, #4]
 801d468:	2200      	movs	r2, #0
 801d46a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801d46c:	687b      	ldr	r3, [r7, #4]
 801d46e:	681b      	ldr	r3, [r3, #0]
 801d470:	691b      	ldr	r3, [r3, #16]
 801d472:	f003 0310 	and.w	r3, r3, #16
 801d476:	2b10      	cmp	r3, #16
 801d478:	d122      	bne.n	801d4c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801d47a:	687b      	ldr	r3, [r7, #4]
 801d47c:	681b      	ldr	r3, [r3, #0]
 801d47e:	68db      	ldr	r3, [r3, #12]
 801d480:	f003 0310 	and.w	r3, r3, #16
 801d484:	2b10      	cmp	r3, #16
 801d486:	d11b      	bne.n	801d4c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801d488:	687b      	ldr	r3, [r7, #4]
 801d48a:	681b      	ldr	r3, [r3, #0]
 801d48c:	f06f 0210 	mvn.w	r2, #16
 801d490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801d492:	687b      	ldr	r3, [r7, #4]
 801d494:	2208      	movs	r2, #8
 801d496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801d498:	687b      	ldr	r3, [r7, #4]
 801d49a:	681b      	ldr	r3, [r3, #0]
 801d49c:	69db      	ldr	r3, [r3, #28]
 801d49e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d4a2:	2b00      	cmp	r3, #0
 801d4a4:	d003      	beq.n	801d4ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d4a6:	6878      	ldr	r0, [r7, #4]
 801d4a8:	f000 f993 	bl	801d7d2 <HAL_TIM_IC_CaptureCallback>
 801d4ac:	e005      	b.n	801d4ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d4ae:	6878      	ldr	r0, [r7, #4]
 801d4b0:	f000 f985 	bl	801d7be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d4b4:	6878      	ldr	r0, [r7, #4]
 801d4b6:	f000 f996 	bl	801d7e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d4ba:	687b      	ldr	r3, [r7, #4]
 801d4bc:	2200      	movs	r2, #0
 801d4be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801d4c0:	687b      	ldr	r3, [r7, #4]
 801d4c2:	681b      	ldr	r3, [r3, #0]
 801d4c4:	691b      	ldr	r3, [r3, #16]
 801d4c6:	f003 0301 	and.w	r3, r3, #1
 801d4ca:	2b01      	cmp	r3, #1
 801d4cc:	d10e      	bne.n	801d4ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801d4ce:	687b      	ldr	r3, [r7, #4]
 801d4d0:	681b      	ldr	r3, [r3, #0]
 801d4d2:	68db      	ldr	r3, [r3, #12]
 801d4d4:	f003 0301 	and.w	r3, r3, #1
 801d4d8:	2b01      	cmp	r3, #1
 801d4da:	d107      	bne.n	801d4ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801d4dc:	687b      	ldr	r3, [r7, #4]
 801d4de:	681b      	ldr	r3, [r3, #0]
 801d4e0:	f06f 0201 	mvn.w	r2, #1
 801d4e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801d4e6:	6878      	ldr	r0, [r7, #4]
 801d4e8:	f7fa fda8 	bl	801803c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801d4ec:	687b      	ldr	r3, [r7, #4]
 801d4ee:	681b      	ldr	r3, [r3, #0]
 801d4f0:	691b      	ldr	r3, [r3, #16]
 801d4f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d4f6:	2b80      	cmp	r3, #128	; 0x80
 801d4f8:	d10e      	bne.n	801d518 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801d4fa:	687b      	ldr	r3, [r7, #4]
 801d4fc:	681b      	ldr	r3, [r3, #0]
 801d4fe:	68db      	ldr	r3, [r3, #12]
 801d500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d504:	2b80      	cmp	r3, #128	; 0x80
 801d506:	d107      	bne.n	801d518 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801d508:	687b      	ldr	r3, [r7, #4]
 801d50a:	681b      	ldr	r3, [r3, #0]
 801d50c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801d510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801d512:	6878      	ldr	r0, [r7, #4]
 801d514:	f000 fcec 	bl	801def0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801d518:	687b      	ldr	r3, [r7, #4]
 801d51a:	681b      	ldr	r3, [r3, #0]
 801d51c:	691b      	ldr	r3, [r3, #16]
 801d51e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d522:	2b40      	cmp	r3, #64	; 0x40
 801d524:	d10e      	bne.n	801d544 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801d526:	687b      	ldr	r3, [r7, #4]
 801d528:	681b      	ldr	r3, [r3, #0]
 801d52a:	68db      	ldr	r3, [r3, #12]
 801d52c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d530:	2b40      	cmp	r3, #64	; 0x40
 801d532:	d107      	bne.n	801d544 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801d534:	687b      	ldr	r3, [r7, #4]
 801d536:	681b      	ldr	r3, [r3, #0]
 801d538:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801d53c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801d53e:	6878      	ldr	r0, [r7, #4]
 801d540:	f000 f95b 	bl	801d7fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801d544:	687b      	ldr	r3, [r7, #4]
 801d546:	681b      	ldr	r3, [r3, #0]
 801d548:	691b      	ldr	r3, [r3, #16]
 801d54a:	f003 0320 	and.w	r3, r3, #32
 801d54e:	2b20      	cmp	r3, #32
 801d550:	d10e      	bne.n	801d570 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801d552:	687b      	ldr	r3, [r7, #4]
 801d554:	681b      	ldr	r3, [r3, #0]
 801d556:	68db      	ldr	r3, [r3, #12]
 801d558:	f003 0320 	and.w	r3, r3, #32
 801d55c:	2b20      	cmp	r3, #32
 801d55e:	d107      	bne.n	801d570 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801d560:	687b      	ldr	r3, [r7, #4]
 801d562:	681b      	ldr	r3, [r3, #0]
 801d564:	f06f 0220 	mvn.w	r2, #32
 801d568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801d56a:	6878      	ldr	r0, [r7, #4]
 801d56c:	f000 fcb6 	bl	801dedc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801d570:	bf00      	nop
 801d572:	3708      	adds	r7, #8
 801d574:	46bd      	mov	sp, r7
 801d576:	bd80      	pop	{r7, pc}

0801d578 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 801d578:	b580      	push	{r7, lr}
 801d57a:	b086      	sub	sp, #24
 801d57c:	af00      	add	r7, sp, #0
 801d57e:	60f8      	str	r0, [r7, #12]
 801d580:	60b9      	str	r1, [r7, #8]
 801d582:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801d584:	2300      	movs	r3, #0
 801d586:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 801d588:	68fb      	ldr	r3, [r7, #12]
 801d58a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d58e:	2b01      	cmp	r3, #1
 801d590:	d101      	bne.n	801d596 <HAL_TIM_OC_ConfigChannel+0x1e>
 801d592:	2302      	movs	r3, #2
 801d594:	e048      	b.n	801d628 <HAL_TIM_OC_ConfigChannel+0xb0>
 801d596:	68fb      	ldr	r3, [r7, #12]
 801d598:	2201      	movs	r2, #1
 801d59a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 801d59e:	687b      	ldr	r3, [r7, #4]
 801d5a0:	2b0c      	cmp	r3, #12
 801d5a2:	d839      	bhi.n	801d618 <HAL_TIM_OC_ConfigChannel+0xa0>
 801d5a4:	a201      	add	r2, pc, #4	; (adr r2, 801d5ac <HAL_TIM_OC_ConfigChannel+0x34>)
 801d5a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d5aa:	bf00      	nop
 801d5ac:	0801d5e1 	.word	0x0801d5e1
 801d5b0:	0801d619 	.word	0x0801d619
 801d5b4:	0801d619 	.word	0x0801d619
 801d5b8:	0801d619 	.word	0x0801d619
 801d5bc:	0801d5ef 	.word	0x0801d5ef
 801d5c0:	0801d619 	.word	0x0801d619
 801d5c4:	0801d619 	.word	0x0801d619
 801d5c8:	0801d619 	.word	0x0801d619
 801d5cc:	0801d5fd 	.word	0x0801d5fd
 801d5d0:	0801d619 	.word	0x0801d619
 801d5d4:	0801d619 	.word	0x0801d619
 801d5d8:	0801d619 	.word	0x0801d619
 801d5dc:	0801d60b 	.word	0x0801d60b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801d5e0:	68fb      	ldr	r3, [r7, #12]
 801d5e2:	681b      	ldr	r3, [r3, #0]
 801d5e4:	68b9      	ldr	r1, [r7, #8]
 801d5e6:	4618      	mov	r0, r3
 801d5e8:	f000 f9b2 	bl	801d950 <TIM_OC1_SetConfig>
      break;
 801d5ec:	e017      	b.n	801d61e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801d5ee:	68fb      	ldr	r3, [r7, #12]
 801d5f0:	681b      	ldr	r3, [r3, #0]
 801d5f2:	68b9      	ldr	r1, [r7, #8]
 801d5f4:	4618      	mov	r0, r3
 801d5f6:	f000 fa1b 	bl	801da30 <TIM_OC2_SetConfig>
      break;
 801d5fa:	e010      	b.n	801d61e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801d5fc:	68fb      	ldr	r3, [r7, #12]
 801d5fe:	681b      	ldr	r3, [r3, #0]
 801d600:	68b9      	ldr	r1, [r7, #8]
 801d602:	4618      	mov	r0, r3
 801d604:	f000 fa8a 	bl	801db1c <TIM_OC3_SetConfig>
      break;
 801d608:	e009      	b.n	801d61e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801d60a:	68fb      	ldr	r3, [r7, #12]
 801d60c:	681b      	ldr	r3, [r3, #0]
 801d60e:	68b9      	ldr	r1, [r7, #8]
 801d610:	4618      	mov	r0, r3
 801d612:	f000 faf7 	bl	801dc04 <TIM_OC4_SetConfig>
      break;
 801d616:	e002      	b.n	801d61e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 801d618:	2301      	movs	r3, #1
 801d61a:	75fb      	strb	r3, [r7, #23]
      break;
 801d61c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801d61e:	68fb      	ldr	r3, [r7, #12]
 801d620:	2200      	movs	r2, #0
 801d622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801d626:	7dfb      	ldrb	r3, [r7, #23]
}
 801d628:	4618      	mov	r0, r3
 801d62a:	3718      	adds	r7, #24
 801d62c:	46bd      	mov	sp, r7
 801d62e:	bd80      	pop	{r7, pc}

0801d630 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801d630:	b580      	push	{r7, lr}
 801d632:	b084      	sub	sp, #16
 801d634:	af00      	add	r7, sp, #0
 801d636:	6078      	str	r0, [r7, #4]
 801d638:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801d63a:	2300      	movs	r3, #0
 801d63c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801d63e:	687b      	ldr	r3, [r7, #4]
 801d640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d644:	2b01      	cmp	r3, #1
 801d646:	d101      	bne.n	801d64c <HAL_TIM_ConfigClockSource+0x1c>
 801d648:	2302      	movs	r3, #2
 801d64a:	e0b4      	b.n	801d7b6 <HAL_TIM_ConfigClockSource+0x186>
 801d64c:	687b      	ldr	r3, [r7, #4]
 801d64e:	2201      	movs	r2, #1
 801d650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801d654:	687b      	ldr	r3, [r7, #4]
 801d656:	2202      	movs	r2, #2
 801d658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801d65c:	687b      	ldr	r3, [r7, #4]
 801d65e:	681b      	ldr	r3, [r3, #0]
 801d660:	689b      	ldr	r3, [r3, #8]
 801d662:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801d664:	68bb      	ldr	r3, [r7, #8]
 801d666:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801d66a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801d66c:	68bb      	ldr	r3, [r7, #8]
 801d66e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801d672:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801d674:	687b      	ldr	r3, [r7, #4]
 801d676:	681b      	ldr	r3, [r3, #0]
 801d678:	68ba      	ldr	r2, [r7, #8]
 801d67a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801d67c:	683b      	ldr	r3, [r7, #0]
 801d67e:	681b      	ldr	r3, [r3, #0]
 801d680:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d684:	d03e      	beq.n	801d704 <HAL_TIM_ConfigClockSource+0xd4>
 801d686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d68a:	f200 8087 	bhi.w	801d79c <HAL_TIM_ConfigClockSource+0x16c>
 801d68e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d692:	f000 8086 	beq.w	801d7a2 <HAL_TIM_ConfigClockSource+0x172>
 801d696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d69a:	d87f      	bhi.n	801d79c <HAL_TIM_ConfigClockSource+0x16c>
 801d69c:	2b70      	cmp	r3, #112	; 0x70
 801d69e:	d01a      	beq.n	801d6d6 <HAL_TIM_ConfigClockSource+0xa6>
 801d6a0:	2b70      	cmp	r3, #112	; 0x70
 801d6a2:	d87b      	bhi.n	801d79c <HAL_TIM_ConfigClockSource+0x16c>
 801d6a4:	2b60      	cmp	r3, #96	; 0x60
 801d6a6:	d050      	beq.n	801d74a <HAL_TIM_ConfigClockSource+0x11a>
 801d6a8:	2b60      	cmp	r3, #96	; 0x60
 801d6aa:	d877      	bhi.n	801d79c <HAL_TIM_ConfigClockSource+0x16c>
 801d6ac:	2b50      	cmp	r3, #80	; 0x50
 801d6ae:	d03c      	beq.n	801d72a <HAL_TIM_ConfigClockSource+0xfa>
 801d6b0:	2b50      	cmp	r3, #80	; 0x50
 801d6b2:	d873      	bhi.n	801d79c <HAL_TIM_ConfigClockSource+0x16c>
 801d6b4:	2b40      	cmp	r3, #64	; 0x40
 801d6b6:	d058      	beq.n	801d76a <HAL_TIM_ConfigClockSource+0x13a>
 801d6b8:	2b40      	cmp	r3, #64	; 0x40
 801d6ba:	d86f      	bhi.n	801d79c <HAL_TIM_ConfigClockSource+0x16c>
 801d6bc:	2b30      	cmp	r3, #48	; 0x30
 801d6be:	d064      	beq.n	801d78a <HAL_TIM_ConfigClockSource+0x15a>
 801d6c0:	2b30      	cmp	r3, #48	; 0x30
 801d6c2:	d86b      	bhi.n	801d79c <HAL_TIM_ConfigClockSource+0x16c>
 801d6c4:	2b20      	cmp	r3, #32
 801d6c6:	d060      	beq.n	801d78a <HAL_TIM_ConfigClockSource+0x15a>
 801d6c8:	2b20      	cmp	r3, #32
 801d6ca:	d867      	bhi.n	801d79c <HAL_TIM_ConfigClockSource+0x16c>
 801d6cc:	2b00      	cmp	r3, #0
 801d6ce:	d05c      	beq.n	801d78a <HAL_TIM_ConfigClockSource+0x15a>
 801d6d0:	2b10      	cmp	r3, #16
 801d6d2:	d05a      	beq.n	801d78a <HAL_TIM_ConfigClockSource+0x15a>
 801d6d4:	e062      	b.n	801d79c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801d6d6:	687b      	ldr	r3, [r7, #4]
 801d6d8:	6818      	ldr	r0, [r3, #0]
 801d6da:	683b      	ldr	r3, [r7, #0]
 801d6dc:	6899      	ldr	r1, [r3, #8]
 801d6de:	683b      	ldr	r3, [r7, #0]
 801d6e0:	685a      	ldr	r2, [r3, #4]
 801d6e2:	683b      	ldr	r3, [r7, #0]
 801d6e4:	68db      	ldr	r3, [r3, #12]
 801d6e6:	f000 fb5d 	bl	801dda4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801d6ea:	687b      	ldr	r3, [r7, #4]
 801d6ec:	681b      	ldr	r3, [r3, #0]
 801d6ee:	689b      	ldr	r3, [r3, #8]
 801d6f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801d6f2:	68bb      	ldr	r3, [r7, #8]
 801d6f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801d6f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801d6fa:	687b      	ldr	r3, [r7, #4]
 801d6fc:	681b      	ldr	r3, [r3, #0]
 801d6fe:	68ba      	ldr	r2, [r7, #8]
 801d700:	609a      	str	r2, [r3, #8]
      break;
 801d702:	e04f      	b.n	801d7a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801d704:	687b      	ldr	r3, [r7, #4]
 801d706:	6818      	ldr	r0, [r3, #0]
 801d708:	683b      	ldr	r3, [r7, #0]
 801d70a:	6899      	ldr	r1, [r3, #8]
 801d70c:	683b      	ldr	r3, [r7, #0]
 801d70e:	685a      	ldr	r2, [r3, #4]
 801d710:	683b      	ldr	r3, [r7, #0]
 801d712:	68db      	ldr	r3, [r3, #12]
 801d714:	f000 fb46 	bl	801dda4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801d718:	687b      	ldr	r3, [r7, #4]
 801d71a:	681b      	ldr	r3, [r3, #0]
 801d71c:	689a      	ldr	r2, [r3, #8]
 801d71e:	687b      	ldr	r3, [r7, #4]
 801d720:	681b      	ldr	r3, [r3, #0]
 801d722:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801d726:	609a      	str	r2, [r3, #8]
      break;
 801d728:	e03c      	b.n	801d7a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801d72a:	687b      	ldr	r3, [r7, #4]
 801d72c:	6818      	ldr	r0, [r3, #0]
 801d72e:	683b      	ldr	r3, [r7, #0]
 801d730:	6859      	ldr	r1, [r3, #4]
 801d732:	683b      	ldr	r3, [r7, #0]
 801d734:	68db      	ldr	r3, [r3, #12]
 801d736:	461a      	mov	r2, r3
 801d738:	f000 faba 	bl	801dcb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801d73c:	687b      	ldr	r3, [r7, #4]
 801d73e:	681b      	ldr	r3, [r3, #0]
 801d740:	2150      	movs	r1, #80	; 0x50
 801d742:	4618      	mov	r0, r3
 801d744:	f000 fb13 	bl	801dd6e <TIM_ITRx_SetConfig>
      break;
 801d748:	e02c      	b.n	801d7a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801d74a:	687b      	ldr	r3, [r7, #4]
 801d74c:	6818      	ldr	r0, [r3, #0]
 801d74e:	683b      	ldr	r3, [r7, #0]
 801d750:	6859      	ldr	r1, [r3, #4]
 801d752:	683b      	ldr	r3, [r7, #0]
 801d754:	68db      	ldr	r3, [r3, #12]
 801d756:	461a      	mov	r2, r3
 801d758:	f000 fad9 	bl	801dd0e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801d75c:	687b      	ldr	r3, [r7, #4]
 801d75e:	681b      	ldr	r3, [r3, #0]
 801d760:	2160      	movs	r1, #96	; 0x60
 801d762:	4618      	mov	r0, r3
 801d764:	f000 fb03 	bl	801dd6e <TIM_ITRx_SetConfig>
      break;
 801d768:	e01c      	b.n	801d7a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801d76a:	687b      	ldr	r3, [r7, #4]
 801d76c:	6818      	ldr	r0, [r3, #0]
 801d76e:	683b      	ldr	r3, [r7, #0]
 801d770:	6859      	ldr	r1, [r3, #4]
 801d772:	683b      	ldr	r3, [r7, #0]
 801d774:	68db      	ldr	r3, [r3, #12]
 801d776:	461a      	mov	r2, r3
 801d778:	f000 fa9a 	bl	801dcb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801d77c:	687b      	ldr	r3, [r7, #4]
 801d77e:	681b      	ldr	r3, [r3, #0]
 801d780:	2140      	movs	r1, #64	; 0x40
 801d782:	4618      	mov	r0, r3
 801d784:	f000 faf3 	bl	801dd6e <TIM_ITRx_SetConfig>
      break;
 801d788:	e00c      	b.n	801d7a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801d78a:	687b      	ldr	r3, [r7, #4]
 801d78c:	681a      	ldr	r2, [r3, #0]
 801d78e:	683b      	ldr	r3, [r7, #0]
 801d790:	681b      	ldr	r3, [r3, #0]
 801d792:	4619      	mov	r1, r3
 801d794:	4610      	mov	r0, r2
 801d796:	f000 faea 	bl	801dd6e <TIM_ITRx_SetConfig>
      break;
 801d79a:	e003      	b.n	801d7a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 801d79c:	2301      	movs	r3, #1
 801d79e:	73fb      	strb	r3, [r7, #15]
      break;
 801d7a0:	e000      	b.n	801d7a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 801d7a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801d7a4:	687b      	ldr	r3, [r7, #4]
 801d7a6:	2201      	movs	r2, #1
 801d7a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801d7ac:	687b      	ldr	r3, [r7, #4]
 801d7ae:	2200      	movs	r2, #0
 801d7b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801d7b4:	7bfb      	ldrb	r3, [r7, #15]
}
 801d7b6:	4618      	mov	r0, r3
 801d7b8:	3710      	adds	r7, #16
 801d7ba:	46bd      	mov	sp, r7
 801d7bc:	bd80      	pop	{r7, pc}

0801d7be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801d7be:	b480      	push	{r7}
 801d7c0:	b083      	sub	sp, #12
 801d7c2:	af00      	add	r7, sp, #0
 801d7c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801d7c6:	bf00      	nop
 801d7c8:	370c      	adds	r7, #12
 801d7ca:	46bd      	mov	sp, r7
 801d7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7d0:	4770      	bx	lr

0801d7d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801d7d2:	b480      	push	{r7}
 801d7d4:	b083      	sub	sp, #12
 801d7d6:	af00      	add	r7, sp, #0
 801d7d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801d7da:	bf00      	nop
 801d7dc:	370c      	adds	r7, #12
 801d7de:	46bd      	mov	sp, r7
 801d7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7e4:	4770      	bx	lr

0801d7e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801d7e6:	b480      	push	{r7}
 801d7e8:	b083      	sub	sp, #12
 801d7ea:	af00      	add	r7, sp, #0
 801d7ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801d7ee:	bf00      	nop
 801d7f0:	370c      	adds	r7, #12
 801d7f2:	46bd      	mov	sp, r7
 801d7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7f8:	4770      	bx	lr

0801d7fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801d7fa:	b480      	push	{r7}
 801d7fc:	b083      	sub	sp, #12
 801d7fe:	af00      	add	r7, sp, #0
 801d800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801d802:	bf00      	nop
 801d804:	370c      	adds	r7, #12
 801d806:	46bd      	mov	sp, r7
 801d808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d80c:	4770      	bx	lr
	...

0801d810 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801d810:	b480      	push	{r7}
 801d812:	b085      	sub	sp, #20
 801d814:	af00      	add	r7, sp, #0
 801d816:	6078      	str	r0, [r7, #4]
 801d818:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801d81a:	687b      	ldr	r3, [r7, #4]
 801d81c:	681b      	ldr	r3, [r3, #0]
 801d81e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801d820:	687b      	ldr	r3, [r7, #4]
 801d822:	4a40      	ldr	r2, [pc, #256]	; (801d924 <TIM_Base_SetConfig+0x114>)
 801d824:	4293      	cmp	r3, r2
 801d826:	d013      	beq.n	801d850 <TIM_Base_SetConfig+0x40>
 801d828:	687b      	ldr	r3, [r7, #4]
 801d82a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d82e:	d00f      	beq.n	801d850 <TIM_Base_SetConfig+0x40>
 801d830:	687b      	ldr	r3, [r7, #4]
 801d832:	4a3d      	ldr	r2, [pc, #244]	; (801d928 <TIM_Base_SetConfig+0x118>)
 801d834:	4293      	cmp	r3, r2
 801d836:	d00b      	beq.n	801d850 <TIM_Base_SetConfig+0x40>
 801d838:	687b      	ldr	r3, [r7, #4]
 801d83a:	4a3c      	ldr	r2, [pc, #240]	; (801d92c <TIM_Base_SetConfig+0x11c>)
 801d83c:	4293      	cmp	r3, r2
 801d83e:	d007      	beq.n	801d850 <TIM_Base_SetConfig+0x40>
 801d840:	687b      	ldr	r3, [r7, #4]
 801d842:	4a3b      	ldr	r2, [pc, #236]	; (801d930 <TIM_Base_SetConfig+0x120>)
 801d844:	4293      	cmp	r3, r2
 801d846:	d003      	beq.n	801d850 <TIM_Base_SetConfig+0x40>
 801d848:	687b      	ldr	r3, [r7, #4]
 801d84a:	4a3a      	ldr	r2, [pc, #232]	; (801d934 <TIM_Base_SetConfig+0x124>)
 801d84c:	4293      	cmp	r3, r2
 801d84e:	d108      	bne.n	801d862 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801d850:	68fb      	ldr	r3, [r7, #12]
 801d852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d856:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801d858:	683b      	ldr	r3, [r7, #0]
 801d85a:	685b      	ldr	r3, [r3, #4]
 801d85c:	68fa      	ldr	r2, [r7, #12]
 801d85e:	4313      	orrs	r3, r2
 801d860:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801d862:	687b      	ldr	r3, [r7, #4]
 801d864:	4a2f      	ldr	r2, [pc, #188]	; (801d924 <TIM_Base_SetConfig+0x114>)
 801d866:	4293      	cmp	r3, r2
 801d868:	d02b      	beq.n	801d8c2 <TIM_Base_SetConfig+0xb2>
 801d86a:	687b      	ldr	r3, [r7, #4]
 801d86c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d870:	d027      	beq.n	801d8c2 <TIM_Base_SetConfig+0xb2>
 801d872:	687b      	ldr	r3, [r7, #4]
 801d874:	4a2c      	ldr	r2, [pc, #176]	; (801d928 <TIM_Base_SetConfig+0x118>)
 801d876:	4293      	cmp	r3, r2
 801d878:	d023      	beq.n	801d8c2 <TIM_Base_SetConfig+0xb2>
 801d87a:	687b      	ldr	r3, [r7, #4]
 801d87c:	4a2b      	ldr	r2, [pc, #172]	; (801d92c <TIM_Base_SetConfig+0x11c>)
 801d87e:	4293      	cmp	r3, r2
 801d880:	d01f      	beq.n	801d8c2 <TIM_Base_SetConfig+0xb2>
 801d882:	687b      	ldr	r3, [r7, #4]
 801d884:	4a2a      	ldr	r2, [pc, #168]	; (801d930 <TIM_Base_SetConfig+0x120>)
 801d886:	4293      	cmp	r3, r2
 801d888:	d01b      	beq.n	801d8c2 <TIM_Base_SetConfig+0xb2>
 801d88a:	687b      	ldr	r3, [r7, #4]
 801d88c:	4a29      	ldr	r2, [pc, #164]	; (801d934 <TIM_Base_SetConfig+0x124>)
 801d88e:	4293      	cmp	r3, r2
 801d890:	d017      	beq.n	801d8c2 <TIM_Base_SetConfig+0xb2>
 801d892:	687b      	ldr	r3, [r7, #4]
 801d894:	4a28      	ldr	r2, [pc, #160]	; (801d938 <TIM_Base_SetConfig+0x128>)
 801d896:	4293      	cmp	r3, r2
 801d898:	d013      	beq.n	801d8c2 <TIM_Base_SetConfig+0xb2>
 801d89a:	687b      	ldr	r3, [r7, #4]
 801d89c:	4a27      	ldr	r2, [pc, #156]	; (801d93c <TIM_Base_SetConfig+0x12c>)
 801d89e:	4293      	cmp	r3, r2
 801d8a0:	d00f      	beq.n	801d8c2 <TIM_Base_SetConfig+0xb2>
 801d8a2:	687b      	ldr	r3, [r7, #4]
 801d8a4:	4a26      	ldr	r2, [pc, #152]	; (801d940 <TIM_Base_SetConfig+0x130>)
 801d8a6:	4293      	cmp	r3, r2
 801d8a8:	d00b      	beq.n	801d8c2 <TIM_Base_SetConfig+0xb2>
 801d8aa:	687b      	ldr	r3, [r7, #4]
 801d8ac:	4a25      	ldr	r2, [pc, #148]	; (801d944 <TIM_Base_SetConfig+0x134>)
 801d8ae:	4293      	cmp	r3, r2
 801d8b0:	d007      	beq.n	801d8c2 <TIM_Base_SetConfig+0xb2>
 801d8b2:	687b      	ldr	r3, [r7, #4]
 801d8b4:	4a24      	ldr	r2, [pc, #144]	; (801d948 <TIM_Base_SetConfig+0x138>)
 801d8b6:	4293      	cmp	r3, r2
 801d8b8:	d003      	beq.n	801d8c2 <TIM_Base_SetConfig+0xb2>
 801d8ba:	687b      	ldr	r3, [r7, #4]
 801d8bc:	4a23      	ldr	r2, [pc, #140]	; (801d94c <TIM_Base_SetConfig+0x13c>)
 801d8be:	4293      	cmp	r3, r2
 801d8c0:	d108      	bne.n	801d8d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801d8c2:	68fb      	ldr	r3, [r7, #12]
 801d8c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d8c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801d8ca:	683b      	ldr	r3, [r7, #0]
 801d8cc:	68db      	ldr	r3, [r3, #12]
 801d8ce:	68fa      	ldr	r2, [r7, #12]
 801d8d0:	4313      	orrs	r3, r2
 801d8d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801d8d4:	68fb      	ldr	r3, [r7, #12]
 801d8d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801d8da:	683b      	ldr	r3, [r7, #0]
 801d8dc:	695b      	ldr	r3, [r3, #20]
 801d8de:	4313      	orrs	r3, r2
 801d8e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801d8e2:	687b      	ldr	r3, [r7, #4]
 801d8e4:	68fa      	ldr	r2, [r7, #12]
 801d8e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801d8e8:	683b      	ldr	r3, [r7, #0]
 801d8ea:	689a      	ldr	r2, [r3, #8]
 801d8ec:	687b      	ldr	r3, [r7, #4]
 801d8ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801d8f0:	683b      	ldr	r3, [r7, #0]
 801d8f2:	681a      	ldr	r2, [r3, #0]
 801d8f4:	687b      	ldr	r3, [r7, #4]
 801d8f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801d8f8:	687b      	ldr	r3, [r7, #4]
 801d8fa:	4a0a      	ldr	r2, [pc, #40]	; (801d924 <TIM_Base_SetConfig+0x114>)
 801d8fc:	4293      	cmp	r3, r2
 801d8fe:	d003      	beq.n	801d908 <TIM_Base_SetConfig+0xf8>
 801d900:	687b      	ldr	r3, [r7, #4]
 801d902:	4a0c      	ldr	r2, [pc, #48]	; (801d934 <TIM_Base_SetConfig+0x124>)
 801d904:	4293      	cmp	r3, r2
 801d906:	d103      	bne.n	801d910 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801d908:	683b      	ldr	r3, [r7, #0]
 801d90a:	691a      	ldr	r2, [r3, #16]
 801d90c:	687b      	ldr	r3, [r7, #4]
 801d90e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801d910:	687b      	ldr	r3, [r7, #4]
 801d912:	2201      	movs	r2, #1
 801d914:	615a      	str	r2, [r3, #20]
}
 801d916:	bf00      	nop
 801d918:	3714      	adds	r7, #20
 801d91a:	46bd      	mov	sp, r7
 801d91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d920:	4770      	bx	lr
 801d922:	bf00      	nop
 801d924:	40010000 	.word	0x40010000
 801d928:	40000400 	.word	0x40000400
 801d92c:	40000800 	.word	0x40000800
 801d930:	40000c00 	.word	0x40000c00
 801d934:	40010400 	.word	0x40010400
 801d938:	40014000 	.word	0x40014000
 801d93c:	40014400 	.word	0x40014400
 801d940:	40014800 	.word	0x40014800
 801d944:	40001800 	.word	0x40001800
 801d948:	40001c00 	.word	0x40001c00
 801d94c:	40002000 	.word	0x40002000

0801d950 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d950:	b480      	push	{r7}
 801d952:	b087      	sub	sp, #28
 801d954:	af00      	add	r7, sp, #0
 801d956:	6078      	str	r0, [r7, #4]
 801d958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801d95a:	687b      	ldr	r3, [r7, #4]
 801d95c:	6a1b      	ldr	r3, [r3, #32]
 801d95e:	f023 0201 	bic.w	r2, r3, #1
 801d962:	687b      	ldr	r3, [r7, #4]
 801d964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d966:	687b      	ldr	r3, [r7, #4]
 801d968:	6a1b      	ldr	r3, [r3, #32]
 801d96a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d96c:	687b      	ldr	r3, [r7, #4]
 801d96e:	685b      	ldr	r3, [r3, #4]
 801d970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d972:	687b      	ldr	r3, [r7, #4]
 801d974:	699b      	ldr	r3, [r3, #24]
 801d976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801d978:	68fb      	ldr	r3, [r7, #12]
 801d97a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d97e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801d980:	68fb      	ldr	r3, [r7, #12]
 801d982:	f023 0303 	bic.w	r3, r3, #3
 801d986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d988:	683b      	ldr	r3, [r7, #0]
 801d98a:	681b      	ldr	r3, [r3, #0]
 801d98c:	68fa      	ldr	r2, [r7, #12]
 801d98e:	4313      	orrs	r3, r2
 801d990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801d992:	697b      	ldr	r3, [r7, #20]
 801d994:	f023 0302 	bic.w	r3, r3, #2
 801d998:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801d99a:	683b      	ldr	r3, [r7, #0]
 801d99c:	689b      	ldr	r3, [r3, #8]
 801d99e:	697a      	ldr	r2, [r7, #20]
 801d9a0:	4313      	orrs	r3, r2
 801d9a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801d9a4:	687b      	ldr	r3, [r7, #4]
 801d9a6:	4a20      	ldr	r2, [pc, #128]	; (801da28 <TIM_OC1_SetConfig+0xd8>)
 801d9a8:	4293      	cmp	r3, r2
 801d9aa:	d003      	beq.n	801d9b4 <TIM_OC1_SetConfig+0x64>
 801d9ac:	687b      	ldr	r3, [r7, #4]
 801d9ae:	4a1f      	ldr	r2, [pc, #124]	; (801da2c <TIM_OC1_SetConfig+0xdc>)
 801d9b0:	4293      	cmp	r3, r2
 801d9b2:	d10c      	bne.n	801d9ce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801d9b4:	697b      	ldr	r3, [r7, #20]
 801d9b6:	f023 0308 	bic.w	r3, r3, #8
 801d9ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801d9bc:	683b      	ldr	r3, [r7, #0]
 801d9be:	68db      	ldr	r3, [r3, #12]
 801d9c0:	697a      	ldr	r2, [r7, #20]
 801d9c2:	4313      	orrs	r3, r2
 801d9c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801d9c6:	697b      	ldr	r3, [r7, #20]
 801d9c8:	f023 0304 	bic.w	r3, r3, #4
 801d9cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d9ce:	687b      	ldr	r3, [r7, #4]
 801d9d0:	4a15      	ldr	r2, [pc, #84]	; (801da28 <TIM_OC1_SetConfig+0xd8>)
 801d9d2:	4293      	cmp	r3, r2
 801d9d4:	d003      	beq.n	801d9de <TIM_OC1_SetConfig+0x8e>
 801d9d6:	687b      	ldr	r3, [r7, #4]
 801d9d8:	4a14      	ldr	r2, [pc, #80]	; (801da2c <TIM_OC1_SetConfig+0xdc>)
 801d9da:	4293      	cmp	r3, r2
 801d9dc:	d111      	bne.n	801da02 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801d9de:	693b      	ldr	r3, [r7, #16]
 801d9e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801d9e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801d9e6:	693b      	ldr	r3, [r7, #16]
 801d9e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801d9ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801d9ee:	683b      	ldr	r3, [r7, #0]
 801d9f0:	695b      	ldr	r3, [r3, #20]
 801d9f2:	693a      	ldr	r2, [r7, #16]
 801d9f4:	4313      	orrs	r3, r2
 801d9f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801d9f8:	683b      	ldr	r3, [r7, #0]
 801d9fa:	699b      	ldr	r3, [r3, #24]
 801d9fc:	693a      	ldr	r2, [r7, #16]
 801d9fe:	4313      	orrs	r3, r2
 801da00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801da02:	687b      	ldr	r3, [r7, #4]
 801da04:	693a      	ldr	r2, [r7, #16]
 801da06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801da08:	687b      	ldr	r3, [r7, #4]
 801da0a:	68fa      	ldr	r2, [r7, #12]
 801da0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801da0e:	683b      	ldr	r3, [r7, #0]
 801da10:	685a      	ldr	r2, [r3, #4]
 801da12:	687b      	ldr	r3, [r7, #4]
 801da14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801da16:	687b      	ldr	r3, [r7, #4]
 801da18:	697a      	ldr	r2, [r7, #20]
 801da1a:	621a      	str	r2, [r3, #32]
}
 801da1c:	bf00      	nop
 801da1e:	371c      	adds	r7, #28
 801da20:	46bd      	mov	sp, r7
 801da22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da26:	4770      	bx	lr
 801da28:	40010000 	.word	0x40010000
 801da2c:	40010400 	.word	0x40010400

0801da30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801da30:	b480      	push	{r7}
 801da32:	b087      	sub	sp, #28
 801da34:	af00      	add	r7, sp, #0
 801da36:	6078      	str	r0, [r7, #4]
 801da38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801da3a:	687b      	ldr	r3, [r7, #4]
 801da3c:	6a1b      	ldr	r3, [r3, #32]
 801da3e:	f023 0210 	bic.w	r2, r3, #16
 801da42:	687b      	ldr	r3, [r7, #4]
 801da44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801da46:	687b      	ldr	r3, [r7, #4]
 801da48:	6a1b      	ldr	r3, [r3, #32]
 801da4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801da4c:	687b      	ldr	r3, [r7, #4]
 801da4e:	685b      	ldr	r3, [r3, #4]
 801da50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801da52:	687b      	ldr	r3, [r7, #4]
 801da54:	699b      	ldr	r3, [r3, #24]
 801da56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801da58:	68fb      	ldr	r3, [r7, #12]
 801da5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801da5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801da60:	68fb      	ldr	r3, [r7, #12]
 801da62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801da66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801da68:	683b      	ldr	r3, [r7, #0]
 801da6a:	681b      	ldr	r3, [r3, #0]
 801da6c:	021b      	lsls	r3, r3, #8
 801da6e:	68fa      	ldr	r2, [r7, #12]
 801da70:	4313      	orrs	r3, r2
 801da72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801da74:	697b      	ldr	r3, [r7, #20]
 801da76:	f023 0320 	bic.w	r3, r3, #32
 801da7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801da7c:	683b      	ldr	r3, [r7, #0]
 801da7e:	689b      	ldr	r3, [r3, #8]
 801da80:	011b      	lsls	r3, r3, #4
 801da82:	697a      	ldr	r2, [r7, #20]
 801da84:	4313      	orrs	r3, r2
 801da86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801da88:	687b      	ldr	r3, [r7, #4]
 801da8a:	4a22      	ldr	r2, [pc, #136]	; (801db14 <TIM_OC2_SetConfig+0xe4>)
 801da8c:	4293      	cmp	r3, r2
 801da8e:	d003      	beq.n	801da98 <TIM_OC2_SetConfig+0x68>
 801da90:	687b      	ldr	r3, [r7, #4]
 801da92:	4a21      	ldr	r2, [pc, #132]	; (801db18 <TIM_OC2_SetConfig+0xe8>)
 801da94:	4293      	cmp	r3, r2
 801da96:	d10d      	bne.n	801dab4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801da98:	697b      	ldr	r3, [r7, #20]
 801da9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801da9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801daa0:	683b      	ldr	r3, [r7, #0]
 801daa2:	68db      	ldr	r3, [r3, #12]
 801daa4:	011b      	lsls	r3, r3, #4
 801daa6:	697a      	ldr	r2, [r7, #20]
 801daa8:	4313      	orrs	r3, r2
 801daaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801daac:	697b      	ldr	r3, [r7, #20]
 801daae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801dab2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801dab4:	687b      	ldr	r3, [r7, #4]
 801dab6:	4a17      	ldr	r2, [pc, #92]	; (801db14 <TIM_OC2_SetConfig+0xe4>)
 801dab8:	4293      	cmp	r3, r2
 801daba:	d003      	beq.n	801dac4 <TIM_OC2_SetConfig+0x94>
 801dabc:	687b      	ldr	r3, [r7, #4]
 801dabe:	4a16      	ldr	r2, [pc, #88]	; (801db18 <TIM_OC2_SetConfig+0xe8>)
 801dac0:	4293      	cmp	r3, r2
 801dac2:	d113      	bne.n	801daec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801dac4:	693b      	ldr	r3, [r7, #16]
 801dac6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801daca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801dacc:	693b      	ldr	r3, [r7, #16]
 801dace:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801dad2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801dad4:	683b      	ldr	r3, [r7, #0]
 801dad6:	695b      	ldr	r3, [r3, #20]
 801dad8:	009b      	lsls	r3, r3, #2
 801dada:	693a      	ldr	r2, [r7, #16]
 801dadc:	4313      	orrs	r3, r2
 801dade:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801dae0:	683b      	ldr	r3, [r7, #0]
 801dae2:	699b      	ldr	r3, [r3, #24]
 801dae4:	009b      	lsls	r3, r3, #2
 801dae6:	693a      	ldr	r2, [r7, #16]
 801dae8:	4313      	orrs	r3, r2
 801daea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801daec:	687b      	ldr	r3, [r7, #4]
 801daee:	693a      	ldr	r2, [r7, #16]
 801daf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801daf2:	687b      	ldr	r3, [r7, #4]
 801daf4:	68fa      	ldr	r2, [r7, #12]
 801daf6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801daf8:	683b      	ldr	r3, [r7, #0]
 801dafa:	685a      	ldr	r2, [r3, #4]
 801dafc:	687b      	ldr	r3, [r7, #4]
 801dafe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801db00:	687b      	ldr	r3, [r7, #4]
 801db02:	697a      	ldr	r2, [r7, #20]
 801db04:	621a      	str	r2, [r3, #32]
}
 801db06:	bf00      	nop
 801db08:	371c      	adds	r7, #28
 801db0a:	46bd      	mov	sp, r7
 801db0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db10:	4770      	bx	lr
 801db12:	bf00      	nop
 801db14:	40010000 	.word	0x40010000
 801db18:	40010400 	.word	0x40010400

0801db1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801db1c:	b480      	push	{r7}
 801db1e:	b087      	sub	sp, #28
 801db20:	af00      	add	r7, sp, #0
 801db22:	6078      	str	r0, [r7, #4]
 801db24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801db26:	687b      	ldr	r3, [r7, #4]
 801db28:	6a1b      	ldr	r3, [r3, #32]
 801db2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801db2e:	687b      	ldr	r3, [r7, #4]
 801db30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801db32:	687b      	ldr	r3, [r7, #4]
 801db34:	6a1b      	ldr	r3, [r3, #32]
 801db36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801db38:	687b      	ldr	r3, [r7, #4]
 801db3a:	685b      	ldr	r3, [r3, #4]
 801db3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801db3e:	687b      	ldr	r3, [r7, #4]
 801db40:	69db      	ldr	r3, [r3, #28]
 801db42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801db44:	68fb      	ldr	r3, [r7, #12]
 801db46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801db4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801db4c:	68fb      	ldr	r3, [r7, #12]
 801db4e:	f023 0303 	bic.w	r3, r3, #3
 801db52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801db54:	683b      	ldr	r3, [r7, #0]
 801db56:	681b      	ldr	r3, [r3, #0]
 801db58:	68fa      	ldr	r2, [r7, #12]
 801db5a:	4313      	orrs	r3, r2
 801db5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801db5e:	697b      	ldr	r3, [r7, #20]
 801db60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801db64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801db66:	683b      	ldr	r3, [r7, #0]
 801db68:	689b      	ldr	r3, [r3, #8]
 801db6a:	021b      	lsls	r3, r3, #8
 801db6c:	697a      	ldr	r2, [r7, #20]
 801db6e:	4313      	orrs	r3, r2
 801db70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801db72:	687b      	ldr	r3, [r7, #4]
 801db74:	4a21      	ldr	r2, [pc, #132]	; (801dbfc <TIM_OC3_SetConfig+0xe0>)
 801db76:	4293      	cmp	r3, r2
 801db78:	d003      	beq.n	801db82 <TIM_OC3_SetConfig+0x66>
 801db7a:	687b      	ldr	r3, [r7, #4]
 801db7c:	4a20      	ldr	r2, [pc, #128]	; (801dc00 <TIM_OC3_SetConfig+0xe4>)
 801db7e:	4293      	cmp	r3, r2
 801db80:	d10d      	bne.n	801db9e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801db82:	697b      	ldr	r3, [r7, #20]
 801db84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801db88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801db8a:	683b      	ldr	r3, [r7, #0]
 801db8c:	68db      	ldr	r3, [r3, #12]
 801db8e:	021b      	lsls	r3, r3, #8
 801db90:	697a      	ldr	r2, [r7, #20]
 801db92:	4313      	orrs	r3, r2
 801db94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801db96:	697b      	ldr	r3, [r7, #20]
 801db98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801db9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801db9e:	687b      	ldr	r3, [r7, #4]
 801dba0:	4a16      	ldr	r2, [pc, #88]	; (801dbfc <TIM_OC3_SetConfig+0xe0>)
 801dba2:	4293      	cmp	r3, r2
 801dba4:	d003      	beq.n	801dbae <TIM_OC3_SetConfig+0x92>
 801dba6:	687b      	ldr	r3, [r7, #4]
 801dba8:	4a15      	ldr	r2, [pc, #84]	; (801dc00 <TIM_OC3_SetConfig+0xe4>)
 801dbaa:	4293      	cmp	r3, r2
 801dbac:	d113      	bne.n	801dbd6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801dbae:	693b      	ldr	r3, [r7, #16]
 801dbb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801dbb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801dbb6:	693b      	ldr	r3, [r7, #16]
 801dbb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801dbbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801dbbe:	683b      	ldr	r3, [r7, #0]
 801dbc0:	695b      	ldr	r3, [r3, #20]
 801dbc2:	011b      	lsls	r3, r3, #4
 801dbc4:	693a      	ldr	r2, [r7, #16]
 801dbc6:	4313      	orrs	r3, r2
 801dbc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801dbca:	683b      	ldr	r3, [r7, #0]
 801dbcc:	699b      	ldr	r3, [r3, #24]
 801dbce:	011b      	lsls	r3, r3, #4
 801dbd0:	693a      	ldr	r2, [r7, #16]
 801dbd2:	4313      	orrs	r3, r2
 801dbd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801dbd6:	687b      	ldr	r3, [r7, #4]
 801dbd8:	693a      	ldr	r2, [r7, #16]
 801dbda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801dbdc:	687b      	ldr	r3, [r7, #4]
 801dbde:	68fa      	ldr	r2, [r7, #12]
 801dbe0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801dbe2:	683b      	ldr	r3, [r7, #0]
 801dbe4:	685a      	ldr	r2, [r3, #4]
 801dbe6:	687b      	ldr	r3, [r7, #4]
 801dbe8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801dbea:	687b      	ldr	r3, [r7, #4]
 801dbec:	697a      	ldr	r2, [r7, #20]
 801dbee:	621a      	str	r2, [r3, #32]
}
 801dbf0:	bf00      	nop
 801dbf2:	371c      	adds	r7, #28
 801dbf4:	46bd      	mov	sp, r7
 801dbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbfa:	4770      	bx	lr
 801dbfc:	40010000 	.word	0x40010000
 801dc00:	40010400 	.word	0x40010400

0801dc04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801dc04:	b480      	push	{r7}
 801dc06:	b087      	sub	sp, #28
 801dc08:	af00      	add	r7, sp, #0
 801dc0a:	6078      	str	r0, [r7, #4]
 801dc0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801dc0e:	687b      	ldr	r3, [r7, #4]
 801dc10:	6a1b      	ldr	r3, [r3, #32]
 801dc12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801dc16:	687b      	ldr	r3, [r7, #4]
 801dc18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801dc1a:	687b      	ldr	r3, [r7, #4]
 801dc1c:	6a1b      	ldr	r3, [r3, #32]
 801dc1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801dc20:	687b      	ldr	r3, [r7, #4]
 801dc22:	685b      	ldr	r3, [r3, #4]
 801dc24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801dc26:	687b      	ldr	r3, [r7, #4]
 801dc28:	69db      	ldr	r3, [r3, #28]
 801dc2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801dc2c:	68fb      	ldr	r3, [r7, #12]
 801dc2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801dc32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801dc34:	68fb      	ldr	r3, [r7, #12]
 801dc36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801dc3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801dc3c:	683b      	ldr	r3, [r7, #0]
 801dc3e:	681b      	ldr	r3, [r3, #0]
 801dc40:	021b      	lsls	r3, r3, #8
 801dc42:	68fa      	ldr	r2, [r7, #12]
 801dc44:	4313      	orrs	r3, r2
 801dc46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801dc48:	693b      	ldr	r3, [r7, #16]
 801dc4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801dc4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801dc50:	683b      	ldr	r3, [r7, #0]
 801dc52:	689b      	ldr	r3, [r3, #8]
 801dc54:	031b      	lsls	r3, r3, #12
 801dc56:	693a      	ldr	r2, [r7, #16]
 801dc58:	4313      	orrs	r3, r2
 801dc5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801dc5c:	687b      	ldr	r3, [r7, #4]
 801dc5e:	4a12      	ldr	r2, [pc, #72]	; (801dca8 <TIM_OC4_SetConfig+0xa4>)
 801dc60:	4293      	cmp	r3, r2
 801dc62:	d003      	beq.n	801dc6c <TIM_OC4_SetConfig+0x68>
 801dc64:	687b      	ldr	r3, [r7, #4]
 801dc66:	4a11      	ldr	r2, [pc, #68]	; (801dcac <TIM_OC4_SetConfig+0xa8>)
 801dc68:	4293      	cmp	r3, r2
 801dc6a:	d109      	bne.n	801dc80 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801dc6c:	697b      	ldr	r3, [r7, #20]
 801dc6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801dc72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801dc74:	683b      	ldr	r3, [r7, #0]
 801dc76:	695b      	ldr	r3, [r3, #20]
 801dc78:	019b      	lsls	r3, r3, #6
 801dc7a:	697a      	ldr	r2, [r7, #20]
 801dc7c:	4313      	orrs	r3, r2
 801dc7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801dc80:	687b      	ldr	r3, [r7, #4]
 801dc82:	697a      	ldr	r2, [r7, #20]
 801dc84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801dc86:	687b      	ldr	r3, [r7, #4]
 801dc88:	68fa      	ldr	r2, [r7, #12]
 801dc8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801dc8c:	683b      	ldr	r3, [r7, #0]
 801dc8e:	685a      	ldr	r2, [r3, #4]
 801dc90:	687b      	ldr	r3, [r7, #4]
 801dc92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801dc94:	687b      	ldr	r3, [r7, #4]
 801dc96:	693a      	ldr	r2, [r7, #16]
 801dc98:	621a      	str	r2, [r3, #32]
}
 801dc9a:	bf00      	nop
 801dc9c:	371c      	adds	r7, #28
 801dc9e:	46bd      	mov	sp, r7
 801dca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dca4:	4770      	bx	lr
 801dca6:	bf00      	nop
 801dca8:	40010000 	.word	0x40010000
 801dcac:	40010400 	.word	0x40010400

0801dcb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801dcb0:	b480      	push	{r7}
 801dcb2:	b087      	sub	sp, #28
 801dcb4:	af00      	add	r7, sp, #0
 801dcb6:	60f8      	str	r0, [r7, #12]
 801dcb8:	60b9      	str	r1, [r7, #8]
 801dcba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801dcbc:	68fb      	ldr	r3, [r7, #12]
 801dcbe:	6a1b      	ldr	r3, [r3, #32]
 801dcc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801dcc2:	68fb      	ldr	r3, [r7, #12]
 801dcc4:	6a1b      	ldr	r3, [r3, #32]
 801dcc6:	f023 0201 	bic.w	r2, r3, #1
 801dcca:	68fb      	ldr	r3, [r7, #12]
 801dccc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801dcce:	68fb      	ldr	r3, [r7, #12]
 801dcd0:	699b      	ldr	r3, [r3, #24]
 801dcd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801dcd4:	693b      	ldr	r3, [r7, #16]
 801dcd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801dcda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801dcdc:	687b      	ldr	r3, [r7, #4]
 801dcde:	011b      	lsls	r3, r3, #4
 801dce0:	693a      	ldr	r2, [r7, #16]
 801dce2:	4313      	orrs	r3, r2
 801dce4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801dce6:	697b      	ldr	r3, [r7, #20]
 801dce8:	f023 030a 	bic.w	r3, r3, #10
 801dcec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801dcee:	697a      	ldr	r2, [r7, #20]
 801dcf0:	68bb      	ldr	r3, [r7, #8]
 801dcf2:	4313      	orrs	r3, r2
 801dcf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801dcf6:	68fb      	ldr	r3, [r7, #12]
 801dcf8:	693a      	ldr	r2, [r7, #16]
 801dcfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801dcfc:	68fb      	ldr	r3, [r7, #12]
 801dcfe:	697a      	ldr	r2, [r7, #20]
 801dd00:	621a      	str	r2, [r3, #32]
}
 801dd02:	bf00      	nop
 801dd04:	371c      	adds	r7, #28
 801dd06:	46bd      	mov	sp, r7
 801dd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd0c:	4770      	bx	lr

0801dd0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801dd0e:	b480      	push	{r7}
 801dd10:	b087      	sub	sp, #28
 801dd12:	af00      	add	r7, sp, #0
 801dd14:	60f8      	str	r0, [r7, #12]
 801dd16:	60b9      	str	r1, [r7, #8]
 801dd18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801dd1a:	68fb      	ldr	r3, [r7, #12]
 801dd1c:	6a1b      	ldr	r3, [r3, #32]
 801dd1e:	f023 0210 	bic.w	r2, r3, #16
 801dd22:	68fb      	ldr	r3, [r7, #12]
 801dd24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801dd26:	68fb      	ldr	r3, [r7, #12]
 801dd28:	699b      	ldr	r3, [r3, #24]
 801dd2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801dd2c:	68fb      	ldr	r3, [r7, #12]
 801dd2e:	6a1b      	ldr	r3, [r3, #32]
 801dd30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801dd32:	697b      	ldr	r3, [r7, #20]
 801dd34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801dd38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801dd3a:	687b      	ldr	r3, [r7, #4]
 801dd3c:	031b      	lsls	r3, r3, #12
 801dd3e:	697a      	ldr	r2, [r7, #20]
 801dd40:	4313      	orrs	r3, r2
 801dd42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801dd44:	693b      	ldr	r3, [r7, #16]
 801dd46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801dd4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801dd4c:	68bb      	ldr	r3, [r7, #8]
 801dd4e:	011b      	lsls	r3, r3, #4
 801dd50:	693a      	ldr	r2, [r7, #16]
 801dd52:	4313      	orrs	r3, r2
 801dd54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801dd56:	68fb      	ldr	r3, [r7, #12]
 801dd58:	697a      	ldr	r2, [r7, #20]
 801dd5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801dd5c:	68fb      	ldr	r3, [r7, #12]
 801dd5e:	693a      	ldr	r2, [r7, #16]
 801dd60:	621a      	str	r2, [r3, #32]
}
 801dd62:	bf00      	nop
 801dd64:	371c      	adds	r7, #28
 801dd66:	46bd      	mov	sp, r7
 801dd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd6c:	4770      	bx	lr

0801dd6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801dd6e:	b480      	push	{r7}
 801dd70:	b085      	sub	sp, #20
 801dd72:	af00      	add	r7, sp, #0
 801dd74:	6078      	str	r0, [r7, #4]
 801dd76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801dd78:	687b      	ldr	r3, [r7, #4]
 801dd7a:	689b      	ldr	r3, [r3, #8]
 801dd7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801dd7e:	68fb      	ldr	r3, [r7, #12]
 801dd80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801dd84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801dd86:	683a      	ldr	r2, [r7, #0]
 801dd88:	68fb      	ldr	r3, [r7, #12]
 801dd8a:	4313      	orrs	r3, r2
 801dd8c:	f043 0307 	orr.w	r3, r3, #7
 801dd90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801dd92:	687b      	ldr	r3, [r7, #4]
 801dd94:	68fa      	ldr	r2, [r7, #12]
 801dd96:	609a      	str	r2, [r3, #8]
}
 801dd98:	bf00      	nop
 801dd9a:	3714      	adds	r7, #20
 801dd9c:	46bd      	mov	sp, r7
 801dd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dda2:	4770      	bx	lr

0801dda4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801dda4:	b480      	push	{r7}
 801dda6:	b087      	sub	sp, #28
 801dda8:	af00      	add	r7, sp, #0
 801ddaa:	60f8      	str	r0, [r7, #12]
 801ddac:	60b9      	str	r1, [r7, #8]
 801ddae:	607a      	str	r2, [r7, #4]
 801ddb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801ddb2:	68fb      	ldr	r3, [r7, #12]
 801ddb4:	689b      	ldr	r3, [r3, #8]
 801ddb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801ddb8:	697b      	ldr	r3, [r7, #20]
 801ddba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801ddbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801ddc0:	683b      	ldr	r3, [r7, #0]
 801ddc2:	021a      	lsls	r2, r3, #8
 801ddc4:	687b      	ldr	r3, [r7, #4]
 801ddc6:	431a      	orrs	r2, r3
 801ddc8:	68bb      	ldr	r3, [r7, #8]
 801ddca:	4313      	orrs	r3, r2
 801ddcc:	697a      	ldr	r2, [r7, #20]
 801ddce:	4313      	orrs	r3, r2
 801ddd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801ddd2:	68fb      	ldr	r3, [r7, #12]
 801ddd4:	697a      	ldr	r2, [r7, #20]
 801ddd6:	609a      	str	r2, [r3, #8]
}
 801ddd8:	bf00      	nop
 801ddda:	371c      	adds	r7, #28
 801dddc:	46bd      	mov	sp, r7
 801ddde:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dde2:	4770      	bx	lr

0801dde4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801dde4:	b480      	push	{r7}
 801dde6:	b085      	sub	sp, #20
 801dde8:	af00      	add	r7, sp, #0
 801ddea:	6078      	str	r0, [r7, #4]
 801ddec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801ddee:	687b      	ldr	r3, [r7, #4]
 801ddf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801ddf4:	2b01      	cmp	r3, #1
 801ddf6:	d101      	bne.n	801ddfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801ddf8:	2302      	movs	r3, #2
 801ddfa:	e05a      	b.n	801deb2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 801ddfc:	687b      	ldr	r3, [r7, #4]
 801ddfe:	2201      	movs	r2, #1
 801de00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801de04:	687b      	ldr	r3, [r7, #4]
 801de06:	2202      	movs	r2, #2
 801de08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801de0c:	687b      	ldr	r3, [r7, #4]
 801de0e:	681b      	ldr	r3, [r3, #0]
 801de10:	685b      	ldr	r3, [r3, #4]
 801de12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801de14:	687b      	ldr	r3, [r7, #4]
 801de16:	681b      	ldr	r3, [r3, #0]
 801de18:	689b      	ldr	r3, [r3, #8]
 801de1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801de1c:	68fb      	ldr	r3, [r7, #12]
 801de1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801de22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801de24:	683b      	ldr	r3, [r7, #0]
 801de26:	681b      	ldr	r3, [r3, #0]
 801de28:	68fa      	ldr	r2, [r7, #12]
 801de2a:	4313      	orrs	r3, r2
 801de2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801de2e:	687b      	ldr	r3, [r7, #4]
 801de30:	681b      	ldr	r3, [r3, #0]
 801de32:	68fa      	ldr	r2, [r7, #12]
 801de34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801de36:	687b      	ldr	r3, [r7, #4]
 801de38:	681b      	ldr	r3, [r3, #0]
 801de3a:	4a21      	ldr	r2, [pc, #132]	; (801dec0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 801de3c:	4293      	cmp	r3, r2
 801de3e:	d022      	beq.n	801de86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801de40:	687b      	ldr	r3, [r7, #4]
 801de42:	681b      	ldr	r3, [r3, #0]
 801de44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801de48:	d01d      	beq.n	801de86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801de4a:	687b      	ldr	r3, [r7, #4]
 801de4c:	681b      	ldr	r3, [r3, #0]
 801de4e:	4a1d      	ldr	r2, [pc, #116]	; (801dec4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 801de50:	4293      	cmp	r3, r2
 801de52:	d018      	beq.n	801de86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801de54:	687b      	ldr	r3, [r7, #4]
 801de56:	681b      	ldr	r3, [r3, #0]
 801de58:	4a1b      	ldr	r2, [pc, #108]	; (801dec8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801de5a:	4293      	cmp	r3, r2
 801de5c:	d013      	beq.n	801de86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801de5e:	687b      	ldr	r3, [r7, #4]
 801de60:	681b      	ldr	r3, [r3, #0]
 801de62:	4a1a      	ldr	r2, [pc, #104]	; (801decc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 801de64:	4293      	cmp	r3, r2
 801de66:	d00e      	beq.n	801de86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801de68:	687b      	ldr	r3, [r7, #4]
 801de6a:	681b      	ldr	r3, [r3, #0]
 801de6c:	4a18      	ldr	r2, [pc, #96]	; (801ded0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801de6e:	4293      	cmp	r3, r2
 801de70:	d009      	beq.n	801de86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801de72:	687b      	ldr	r3, [r7, #4]
 801de74:	681b      	ldr	r3, [r3, #0]
 801de76:	4a17      	ldr	r2, [pc, #92]	; (801ded4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 801de78:	4293      	cmp	r3, r2
 801de7a:	d004      	beq.n	801de86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801de7c:	687b      	ldr	r3, [r7, #4]
 801de7e:	681b      	ldr	r3, [r3, #0]
 801de80:	4a15      	ldr	r2, [pc, #84]	; (801ded8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 801de82:	4293      	cmp	r3, r2
 801de84:	d10c      	bne.n	801dea0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801de86:	68bb      	ldr	r3, [r7, #8]
 801de88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801de8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801de8e:	683b      	ldr	r3, [r7, #0]
 801de90:	685b      	ldr	r3, [r3, #4]
 801de92:	68ba      	ldr	r2, [r7, #8]
 801de94:	4313      	orrs	r3, r2
 801de96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801de98:	687b      	ldr	r3, [r7, #4]
 801de9a:	681b      	ldr	r3, [r3, #0]
 801de9c:	68ba      	ldr	r2, [r7, #8]
 801de9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801dea0:	687b      	ldr	r3, [r7, #4]
 801dea2:	2201      	movs	r2, #1
 801dea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801dea8:	687b      	ldr	r3, [r7, #4]
 801deaa:	2200      	movs	r2, #0
 801deac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801deb0:	2300      	movs	r3, #0
}
 801deb2:	4618      	mov	r0, r3
 801deb4:	3714      	adds	r7, #20
 801deb6:	46bd      	mov	sp, r7
 801deb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801debc:	4770      	bx	lr
 801debe:	bf00      	nop
 801dec0:	40010000 	.word	0x40010000
 801dec4:	40000400 	.word	0x40000400
 801dec8:	40000800 	.word	0x40000800
 801decc:	40000c00 	.word	0x40000c00
 801ded0:	40010400 	.word	0x40010400
 801ded4:	40014000 	.word	0x40014000
 801ded8:	40001800 	.word	0x40001800

0801dedc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801dedc:	b480      	push	{r7}
 801dede:	b083      	sub	sp, #12
 801dee0:	af00      	add	r7, sp, #0
 801dee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801dee4:	bf00      	nop
 801dee6:	370c      	adds	r7, #12
 801dee8:	46bd      	mov	sp, r7
 801deea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801deee:	4770      	bx	lr

0801def0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801def0:	b480      	push	{r7}
 801def2:	b083      	sub	sp, #12
 801def4:	af00      	add	r7, sp, #0
 801def6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801def8:	bf00      	nop
 801defa:	370c      	adds	r7, #12
 801defc:	46bd      	mov	sp, r7
 801defe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df02:	4770      	bx	lr

0801df04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801df04:	b084      	sub	sp, #16
 801df06:	b580      	push	{r7, lr}
 801df08:	b084      	sub	sp, #16
 801df0a:	af00      	add	r7, sp, #0
 801df0c:	6078      	str	r0, [r7, #4]
 801df0e:	f107 001c 	add.w	r0, r7, #28
 801df12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801df16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801df18:	2b01      	cmp	r3, #1
 801df1a:	d122      	bne.n	801df62 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801df1c:	687b      	ldr	r3, [r7, #4]
 801df1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801df20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801df24:	687b      	ldr	r3, [r7, #4]
 801df26:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801df28:	687b      	ldr	r3, [r7, #4]
 801df2a:	68db      	ldr	r3, [r3, #12]
 801df2c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 801df30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801df34:	687a      	ldr	r2, [r7, #4]
 801df36:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801df38:	687b      	ldr	r3, [r7, #4]
 801df3a:	68db      	ldr	r3, [r3, #12]
 801df3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801df40:	687b      	ldr	r3, [r7, #4]
 801df42:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801df44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801df46:	2b01      	cmp	r3, #1
 801df48:	d105      	bne.n	801df56 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801df4a:	687b      	ldr	r3, [r7, #4]
 801df4c:	68db      	ldr	r3, [r3, #12]
 801df4e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801df52:	687b      	ldr	r3, [r7, #4]
 801df54:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801df56:	6878      	ldr	r0, [r7, #4]
 801df58:	f001 fb16 	bl	801f588 <USB_CoreReset>
 801df5c:	4603      	mov	r3, r0
 801df5e:	73fb      	strb	r3, [r7, #15]
 801df60:	e01a      	b.n	801df98 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801df62:	687b      	ldr	r3, [r7, #4]
 801df64:	68db      	ldr	r3, [r3, #12]
 801df66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801df6a:	687b      	ldr	r3, [r7, #4]
 801df6c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801df6e:	6878      	ldr	r0, [r7, #4]
 801df70:	f001 fb0a 	bl	801f588 <USB_CoreReset>
 801df74:	4603      	mov	r3, r0
 801df76:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801df78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801df7a:	2b00      	cmp	r3, #0
 801df7c:	d106      	bne.n	801df8c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801df7e:	687b      	ldr	r3, [r7, #4]
 801df80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801df82:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801df86:	687b      	ldr	r3, [r7, #4]
 801df88:	639a      	str	r2, [r3, #56]	; 0x38
 801df8a:	e005      	b.n	801df98 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801df8c:	687b      	ldr	r3, [r7, #4]
 801df8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801df90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801df94:	687b      	ldr	r3, [r7, #4]
 801df96:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801df98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801df9a:	2b01      	cmp	r3, #1
 801df9c:	d10b      	bne.n	801dfb6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801df9e:	687b      	ldr	r3, [r7, #4]
 801dfa0:	689b      	ldr	r3, [r3, #8]
 801dfa2:	f043 0206 	orr.w	r2, r3, #6
 801dfa6:	687b      	ldr	r3, [r7, #4]
 801dfa8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801dfaa:	687b      	ldr	r3, [r7, #4]
 801dfac:	689b      	ldr	r3, [r3, #8]
 801dfae:	f043 0220 	orr.w	r2, r3, #32
 801dfb2:	687b      	ldr	r3, [r7, #4]
 801dfb4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801dfb6:	7bfb      	ldrb	r3, [r7, #15]
}
 801dfb8:	4618      	mov	r0, r3
 801dfba:	3710      	adds	r7, #16
 801dfbc:	46bd      	mov	sp, r7
 801dfbe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801dfc2:	b004      	add	sp, #16
 801dfc4:	4770      	bx	lr
	...

0801dfc8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801dfc8:	b480      	push	{r7}
 801dfca:	b087      	sub	sp, #28
 801dfcc:	af00      	add	r7, sp, #0
 801dfce:	60f8      	str	r0, [r7, #12]
 801dfd0:	60b9      	str	r1, [r7, #8]
 801dfd2:	4613      	mov	r3, r2
 801dfd4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801dfd6:	79fb      	ldrb	r3, [r7, #7]
 801dfd8:	2b02      	cmp	r3, #2
 801dfda:	d165      	bne.n	801e0a8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801dfdc:	68bb      	ldr	r3, [r7, #8]
 801dfde:	4a41      	ldr	r2, [pc, #260]	; (801e0e4 <USB_SetTurnaroundTime+0x11c>)
 801dfe0:	4293      	cmp	r3, r2
 801dfe2:	d906      	bls.n	801dff2 <USB_SetTurnaroundTime+0x2a>
 801dfe4:	68bb      	ldr	r3, [r7, #8]
 801dfe6:	4a40      	ldr	r2, [pc, #256]	; (801e0e8 <USB_SetTurnaroundTime+0x120>)
 801dfe8:	4293      	cmp	r3, r2
 801dfea:	d202      	bcs.n	801dff2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801dfec:	230f      	movs	r3, #15
 801dfee:	617b      	str	r3, [r7, #20]
 801dff0:	e062      	b.n	801e0b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801dff2:	68bb      	ldr	r3, [r7, #8]
 801dff4:	4a3c      	ldr	r2, [pc, #240]	; (801e0e8 <USB_SetTurnaroundTime+0x120>)
 801dff6:	4293      	cmp	r3, r2
 801dff8:	d306      	bcc.n	801e008 <USB_SetTurnaroundTime+0x40>
 801dffa:	68bb      	ldr	r3, [r7, #8]
 801dffc:	4a3b      	ldr	r2, [pc, #236]	; (801e0ec <USB_SetTurnaroundTime+0x124>)
 801dffe:	4293      	cmp	r3, r2
 801e000:	d202      	bcs.n	801e008 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801e002:	230e      	movs	r3, #14
 801e004:	617b      	str	r3, [r7, #20]
 801e006:	e057      	b.n	801e0b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801e008:	68bb      	ldr	r3, [r7, #8]
 801e00a:	4a38      	ldr	r2, [pc, #224]	; (801e0ec <USB_SetTurnaroundTime+0x124>)
 801e00c:	4293      	cmp	r3, r2
 801e00e:	d306      	bcc.n	801e01e <USB_SetTurnaroundTime+0x56>
 801e010:	68bb      	ldr	r3, [r7, #8]
 801e012:	4a37      	ldr	r2, [pc, #220]	; (801e0f0 <USB_SetTurnaroundTime+0x128>)
 801e014:	4293      	cmp	r3, r2
 801e016:	d202      	bcs.n	801e01e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801e018:	230d      	movs	r3, #13
 801e01a:	617b      	str	r3, [r7, #20]
 801e01c:	e04c      	b.n	801e0b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801e01e:	68bb      	ldr	r3, [r7, #8]
 801e020:	4a33      	ldr	r2, [pc, #204]	; (801e0f0 <USB_SetTurnaroundTime+0x128>)
 801e022:	4293      	cmp	r3, r2
 801e024:	d306      	bcc.n	801e034 <USB_SetTurnaroundTime+0x6c>
 801e026:	68bb      	ldr	r3, [r7, #8]
 801e028:	4a32      	ldr	r2, [pc, #200]	; (801e0f4 <USB_SetTurnaroundTime+0x12c>)
 801e02a:	4293      	cmp	r3, r2
 801e02c:	d802      	bhi.n	801e034 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801e02e:	230c      	movs	r3, #12
 801e030:	617b      	str	r3, [r7, #20]
 801e032:	e041      	b.n	801e0b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 801e034:	68bb      	ldr	r3, [r7, #8]
 801e036:	4a2f      	ldr	r2, [pc, #188]	; (801e0f4 <USB_SetTurnaroundTime+0x12c>)
 801e038:	4293      	cmp	r3, r2
 801e03a:	d906      	bls.n	801e04a <USB_SetTurnaroundTime+0x82>
 801e03c:	68bb      	ldr	r3, [r7, #8]
 801e03e:	4a2e      	ldr	r2, [pc, #184]	; (801e0f8 <USB_SetTurnaroundTime+0x130>)
 801e040:	4293      	cmp	r3, r2
 801e042:	d802      	bhi.n	801e04a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 801e044:	230b      	movs	r3, #11
 801e046:	617b      	str	r3, [r7, #20]
 801e048:	e036      	b.n	801e0b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801e04a:	68bb      	ldr	r3, [r7, #8]
 801e04c:	4a2a      	ldr	r2, [pc, #168]	; (801e0f8 <USB_SetTurnaroundTime+0x130>)
 801e04e:	4293      	cmp	r3, r2
 801e050:	d906      	bls.n	801e060 <USB_SetTurnaroundTime+0x98>
 801e052:	68bb      	ldr	r3, [r7, #8]
 801e054:	4a29      	ldr	r2, [pc, #164]	; (801e0fc <USB_SetTurnaroundTime+0x134>)
 801e056:	4293      	cmp	r3, r2
 801e058:	d802      	bhi.n	801e060 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801e05a:	230a      	movs	r3, #10
 801e05c:	617b      	str	r3, [r7, #20]
 801e05e:	e02b      	b.n	801e0b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801e060:	68bb      	ldr	r3, [r7, #8]
 801e062:	4a26      	ldr	r2, [pc, #152]	; (801e0fc <USB_SetTurnaroundTime+0x134>)
 801e064:	4293      	cmp	r3, r2
 801e066:	d906      	bls.n	801e076 <USB_SetTurnaroundTime+0xae>
 801e068:	68bb      	ldr	r3, [r7, #8]
 801e06a:	4a25      	ldr	r2, [pc, #148]	; (801e100 <USB_SetTurnaroundTime+0x138>)
 801e06c:	4293      	cmp	r3, r2
 801e06e:	d202      	bcs.n	801e076 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801e070:	2309      	movs	r3, #9
 801e072:	617b      	str	r3, [r7, #20]
 801e074:	e020      	b.n	801e0b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801e076:	68bb      	ldr	r3, [r7, #8]
 801e078:	4a21      	ldr	r2, [pc, #132]	; (801e100 <USB_SetTurnaroundTime+0x138>)
 801e07a:	4293      	cmp	r3, r2
 801e07c:	d306      	bcc.n	801e08c <USB_SetTurnaroundTime+0xc4>
 801e07e:	68bb      	ldr	r3, [r7, #8]
 801e080:	4a20      	ldr	r2, [pc, #128]	; (801e104 <USB_SetTurnaroundTime+0x13c>)
 801e082:	4293      	cmp	r3, r2
 801e084:	d802      	bhi.n	801e08c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801e086:	2308      	movs	r3, #8
 801e088:	617b      	str	r3, [r7, #20]
 801e08a:	e015      	b.n	801e0b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801e08c:	68bb      	ldr	r3, [r7, #8]
 801e08e:	4a1d      	ldr	r2, [pc, #116]	; (801e104 <USB_SetTurnaroundTime+0x13c>)
 801e090:	4293      	cmp	r3, r2
 801e092:	d906      	bls.n	801e0a2 <USB_SetTurnaroundTime+0xda>
 801e094:	68bb      	ldr	r3, [r7, #8]
 801e096:	4a1c      	ldr	r2, [pc, #112]	; (801e108 <USB_SetTurnaroundTime+0x140>)
 801e098:	4293      	cmp	r3, r2
 801e09a:	d202      	bcs.n	801e0a2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 801e09c:	2307      	movs	r3, #7
 801e09e:	617b      	str	r3, [r7, #20]
 801e0a0:	e00a      	b.n	801e0b8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801e0a2:	2306      	movs	r3, #6
 801e0a4:	617b      	str	r3, [r7, #20]
 801e0a6:	e007      	b.n	801e0b8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 801e0a8:	79fb      	ldrb	r3, [r7, #7]
 801e0aa:	2b00      	cmp	r3, #0
 801e0ac:	d102      	bne.n	801e0b4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801e0ae:	2309      	movs	r3, #9
 801e0b0:	617b      	str	r3, [r7, #20]
 801e0b2:	e001      	b.n	801e0b8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 801e0b4:	2309      	movs	r3, #9
 801e0b6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801e0b8:	68fb      	ldr	r3, [r7, #12]
 801e0ba:	68db      	ldr	r3, [r3, #12]
 801e0bc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 801e0c0:	68fb      	ldr	r3, [r7, #12]
 801e0c2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 801e0c4:	68fb      	ldr	r3, [r7, #12]
 801e0c6:	68da      	ldr	r2, [r3, #12]
 801e0c8:	697b      	ldr	r3, [r7, #20]
 801e0ca:	029b      	lsls	r3, r3, #10
 801e0cc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 801e0d0:	431a      	orrs	r2, r3
 801e0d2:	68fb      	ldr	r3, [r7, #12]
 801e0d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801e0d6:	2300      	movs	r3, #0
}
 801e0d8:	4618      	mov	r0, r3
 801e0da:	371c      	adds	r7, #28
 801e0dc:	46bd      	mov	sp, r7
 801e0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0e2:	4770      	bx	lr
 801e0e4:	00d8acbf 	.word	0x00d8acbf
 801e0e8:	00e4e1c0 	.word	0x00e4e1c0
 801e0ec:	00f42400 	.word	0x00f42400
 801e0f0:	01067380 	.word	0x01067380
 801e0f4:	011a499f 	.word	0x011a499f
 801e0f8:	01312cff 	.word	0x01312cff
 801e0fc:	014ca43f 	.word	0x014ca43f
 801e100:	016e3600 	.word	0x016e3600
 801e104:	01a6ab1f 	.word	0x01a6ab1f
 801e108:	01e84800 	.word	0x01e84800

0801e10c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801e10c:	b480      	push	{r7}
 801e10e:	b083      	sub	sp, #12
 801e110:	af00      	add	r7, sp, #0
 801e112:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801e114:	687b      	ldr	r3, [r7, #4]
 801e116:	689b      	ldr	r3, [r3, #8]
 801e118:	f043 0201 	orr.w	r2, r3, #1
 801e11c:	687b      	ldr	r3, [r7, #4]
 801e11e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801e120:	2300      	movs	r3, #0
}
 801e122:	4618      	mov	r0, r3
 801e124:	370c      	adds	r7, #12
 801e126:	46bd      	mov	sp, r7
 801e128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e12c:	4770      	bx	lr

0801e12e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801e12e:	b480      	push	{r7}
 801e130:	b083      	sub	sp, #12
 801e132:	af00      	add	r7, sp, #0
 801e134:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801e136:	687b      	ldr	r3, [r7, #4]
 801e138:	689b      	ldr	r3, [r3, #8]
 801e13a:	f023 0201 	bic.w	r2, r3, #1
 801e13e:	687b      	ldr	r3, [r7, #4]
 801e140:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801e142:	2300      	movs	r3, #0
}
 801e144:	4618      	mov	r0, r3
 801e146:	370c      	adds	r7, #12
 801e148:	46bd      	mov	sp, r7
 801e14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e14e:	4770      	bx	lr

0801e150 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801e150:	b580      	push	{r7, lr}
 801e152:	b084      	sub	sp, #16
 801e154:	af00      	add	r7, sp, #0
 801e156:	6078      	str	r0, [r7, #4]
 801e158:	460b      	mov	r3, r1
 801e15a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801e15c:	2300      	movs	r3, #0
 801e15e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801e160:	687b      	ldr	r3, [r7, #4]
 801e162:	68db      	ldr	r3, [r3, #12]
 801e164:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 801e168:	687b      	ldr	r3, [r7, #4]
 801e16a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801e16c:	78fb      	ldrb	r3, [r7, #3]
 801e16e:	2b01      	cmp	r3, #1
 801e170:	d115      	bne.n	801e19e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801e172:	687b      	ldr	r3, [r7, #4]
 801e174:	68db      	ldr	r3, [r3, #12]
 801e176:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801e17a:	687b      	ldr	r3, [r7, #4]
 801e17c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801e17e:	2001      	movs	r0, #1
 801e180:	f7fa fb04 	bl	801878c <HAL_Delay>
      ms++;
 801e184:	68fb      	ldr	r3, [r7, #12]
 801e186:	3301      	adds	r3, #1
 801e188:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801e18a:	6878      	ldr	r0, [r7, #4]
 801e18c:	f001 f96c 	bl	801f468 <USB_GetMode>
 801e190:	4603      	mov	r3, r0
 801e192:	2b01      	cmp	r3, #1
 801e194:	d01e      	beq.n	801e1d4 <USB_SetCurrentMode+0x84>
 801e196:	68fb      	ldr	r3, [r7, #12]
 801e198:	2b31      	cmp	r3, #49	; 0x31
 801e19a:	d9f0      	bls.n	801e17e <USB_SetCurrentMode+0x2e>
 801e19c:	e01a      	b.n	801e1d4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801e19e:	78fb      	ldrb	r3, [r7, #3]
 801e1a0:	2b00      	cmp	r3, #0
 801e1a2:	d115      	bne.n	801e1d0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801e1a4:	687b      	ldr	r3, [r7, #4]
 801e1a6:	68db      	ldr	r3, [r3, #12]
 801e1a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801e1ac:	687b      	ldr	r3, [r7, #4]
 801e1ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801e1b0:	2001      	movs	r0, #1
 801e1b2:	f7fa faeb 	bl	801878c <HAL_Delay>
      ms++;
 801e1b6:	68fb      	ldr	r3, [r7, #12]
 801e1b8:	3301      	adds	r3, #1
 801e1ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 801e1bc:	6878      	ldr	r0, [r7, #4]
 801e1be:	f001 f953 	bl	801f468 <USB_GetMode>
 801e1c2:	4603      	mov	r3, r0
 801e1c4:	2b00      	cmp	r3, #0
 801e1c6:	d005      	beq.n	801e1d4 <USB_SetCurrentMode+0x84>
 801e1c8:	68fb      	ldr	r3, [r7, #12]
 801e1ca:	2b31      	cmp	r3, #49	; 0x31
 801e1cc:	d9f0      	bls.n	801e1b0 <USB_SetCurrentMode+0x60>
 801e1ce:	e001      	b.n	801e1d4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801e1d0:	2301      	movs	r3, #1
 801e1d2:	e005      	b.n	801e1e0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 801e1d4:	68fb      	ldr	r3, [r7, #12]
 801e1d6:	2b32      	cmp	r3, #50	; 0x32
 801e1d8:	d101      	bne.n	801e1de <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801e1da:	2301      	movs	r3, #1
 801e1dc:	e000      	b.n	801e1e0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801e1de:	2300      	movs	r3, #0
}
 801e1e0:	4618      	mov	r0, r3
 801e1e2:	3710      	adds	r7, #16
 801e1e4:	46bd      	mov	sp, r7
 801e1e6:	bd80      	pop	{r7, pc}

0801e1e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801e1e8:	b084      	sub	sp, #16
 801e1ea:	b580      	push	{r7, lr}
 801e1ec:	b086      	sub	sp, #24
 801e1ee:	af00      	add	r7, sp, #0
 801e1f0:	6078      	str	r0, [r7, #4]
 801e1f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801e1f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801e1fa:	2300      	movs	r3, #0
 801e1fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e1fe:	687b      	ldr	r3, [r7, #4]
 801e200:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801e202:	2300      	movs	r3, #0
 801e204:	613b      	str	r3, [r7, #16]
 801e206:	e009      	b.n	801e21c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801e208:	687a      	ldr	r2, [r7, #4]
 801e20a:	693b      	ldr	r3, [r7, #16]
 801e20c:	3340      	adds	r3, #64	; 0x40
 801e20e:	009b      	lsls	r3, r3, #2
 801e210:	4413      	add	r3, r2
 801e212:	2200      	movs	r2, #0
 801e214:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801e216:	693b      	ldr	r3, [r7, #16]
 801e218:	3301      	adds	r3, #1
 801e21a:	613b      	str	r3, [r7, #16]
 801e21c:	693b      	ldr	r3, [r7, #16]
 801e21e:	2b0e      	cmp	r3, #14
 801e220:	d9f2      	bls.n	801e208 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801e222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e224:	2b00      	cmp	r3, #0
 801e226:	d11c      	bne.n	801e262 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801e228:	68fb      	ldr	r3, [r7, #12]
 801e22a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e22e:	685b      	ldr	r3, [r3, #4]
 801e230:	68fa      	ldr	r2, [r7, #12]
 801e232:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801e236:	f043 0302 	orr.w	r3, r3, #2
 801e23a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801e23c:	687b      	ldr	r3, [r7, #4]
 801e23e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e240:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801e244:	687b      	ldr	r3, [r7, #4]
 801e246:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801e248:	687b      	ldr	r3, [r7, #4]
 801e24a:	681b      	ldr	r3, [r3, #0]
 801e24c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801e250:	687b      	ldr	r3, [r7, #4]
 801e252:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801e254:	687b      	ldr	r3, [r7, #4]
 801e256:	681b      	ldr	r3, [r3, #0]
 801e258:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801e25c:	687b      	ldr	r3, [r7, #4]
 801e25e:	601a      	str	r2, [r3, #0]
 801e260:	e005      	b.n	801e26e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801e262:	687b      	ldr	r3, [r7, #4]
 801e264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e266:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801e26a:	687b      	ldr	r3, [r7, #4]
 801e26c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801e26e:	68fb      	ldr	r3, [r7, #12]
 801e270:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801e274:	461a      	mov	r2, r3
 801e276:	2300      	movs	r3, #0
 801e278:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801e27a:	68fb      	ldr	r3, [r7, #12]
 801e27c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e280:	4619      	mov	r1, r3
 801e282:	68fb      	ldr	r3, [r7, #12]
 801e284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e288:	461a      	mov	r2, r3
 801e28a:	680b      	ldr	r3, [r1, #0]
 801e28c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801e28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e290:	2b01      	cmp	r3, #1
 801e292:	d10c      	bne.n	801e2ae <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 801e294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e296:	2b00      	cmp	r3, #0
 801e298:	d104      	bne.n	801e2a4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801e29a:	2100      	movs	r1, #0
 801e29c:	6878      	ldr	r0, [r7, #4]
 801e29e:	f000 f945 	bl	801e52c <USB_SetDevSpeed>
 801e2a2:	e008      	b.n	801e2b6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801e2a4:	2101      	movs	r1, #1
 801e2a6:	6878      	ldr	r0, [r7, #4]
 801e2a8:	f000 f940 	bl	801e52c <USB_SetDevSpeed>
 801e2ac:	e003      	b.n	801e2b6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801e2ae:	2103      	movs	r1, #3
 801e2b0:	6878      	ldr	r0, [r7, #4]
 801e2b2:	f000 f93b 	bl	801e52c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801e2b6:	2110      	movs	r1, #16
 801e2b8:	6878      	ldr	r0, [r7, #4]
 801e2ba:	f000 f8f3 	bl	801e4a4 <USB_FlushTxFifo>
 801e2be:	4603      	mov	r3, r0
 801e2c0:	2b00      	cmp	r3, #0
 801e2c2:	d001      	beq.n	801e2c8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 801e2c4:	2301      	movs	r3, #1
 801e2c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801e2c8:	6878      	ldr	r0, [r7, #4]
 801e2ca:	f000 f90f 	bl	801e4ec <USB_FlushRxFifo>
 801e2ce:	4603      	mov	r3, r0
 801e2d0:	2b00      	cmp	r3, #0
 801e2d2:	d001      	beq.n	801e2d8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 801e2d4:	2301      	movs	r3, #1
 801e2d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801e2d8:	68fb      	ldr	r3, [r7, #12]
 801e2da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e2de:	461a      	mov	r2, r3
 801e2e0:	2300      	movs	r3, #0
 801e2e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801e2e4:	68fb      	ldr	r3, [r7, #12]
 801e2e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e2ea:	461a      	mov	r2, r3
 801e2ec:	2300      	movs	r3, #0
 801e2ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801e2f0:	68fb      	ldr	r3, [r7, #12]
 801e2f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e2f6:	461a      	mov	r2, r3
 801e2f8:	2300      	movs	r3, #0
 801e2fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801e2fc:	2300      	movs	r3, #0
 801e2fe:	613b      	str	r3, [r7, #16]
 801e300:	e043      	b.n	801e38a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801e302:	693b      	ldr	r3, [r7, #16]
 801e304:	015a      	lsls	r2, r3, #5
 801e306:	68fb      	ldr	r3, [r7, #12]
 801e308:	4413      	add	r3, r2
 801e30a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e30e:	681b      	ldr	r3, [r3, #0]
 801e310:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801e314:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801e318:	d118      	bne.n	801e34c <USB_DevInit+0x164>
    {
      if (i == 0U)
 801e31a:	693b      	ldr	r3, [r7, #16]
 801e31c:	2b00      	cmp	r3, #0
 801e31e:	d10a      	bne.n	801e336 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801e320:	693b      	ldr	r3, [r7, #16]
 801e322:	015a      	lsls	r2, r3, #5
 801e324:	68fb      	ldr	r3, [r7, #12]
 801e326:	4413      	add	r3, r2
 801e328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e32c:	461a      	mov	r2, r3
 801e32e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801e332:	6013      	str	r3, [r2, #0]
 801e334:	e013      	b.n	801e35e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801e336:	693b      	ldr	r3, [r7, #16]
 801e338:	015a      	lsls	r2, r3, #5
 801e33a:	68fb      	ldr	r3, [r7, #12]
 801e33c:	4413      	add	r3, r2
 801e33e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e342:	461a      	mov	r2, r3
 801e344:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801e348:	6013      	str	r3, [r2, #0]
 801e34a:	e008      	b.n	801e35e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801e34c:	693b      	ldr	r3, [r7, #16]
 801e34e:	015a      	lsls	r2, r3, #5
 801e350:	68fb      	ldr	r3, [r7, #12]
 801e352:	4413      	add	r3, r2
 801e354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e358:	461a      	mov	r2, r3
 801e35a:	2300      	movs	r3, #0
 801e35c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801e35e:	693b      	ldr	r3, [r7, #16]
 801e360:	015a      	lsls	r2, r3, #5
 801e362:	68fb      	ldr	r3, [r7, #12]
 801e364:	4413      	add	r3, r2
 801e366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e36a:	461a      	mov	r2, r3
 801e36c:	2300      	movs	r3, #0
 801e36e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801e370:	693b      	ldr	r3, [r7, #16]
 801e372:	015a      	lsls	r2, r3, #5
 801e374:	68fb      	ldr	r3, [r7, #12]
 801e376:	4413      	add	r3, r2
 801e378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e37c:	461a      	mov	r2, r3
 801e37e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801e382:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801e384:	693b      	ldr	r3, [r7, #16]
 801e386:	3301      	adds	r3, #1
 801e388:	613b      	str	r3, [r7, #16]
 801e38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e38c:	693a      	ldr	r2, [r7, #16]
 801e38e:	429a      	cmp	r2, r3
 801e390:	d3b7      	bcc.n	801e302 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801e392:	2300      	movs	r3, #0
 801e394:	613b      	str	r3, [r7, #16]
 801e396:	e043      	b.n	801e420 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801e398:	693b      	ldr	r3, [r7, #16]
 801e39a:	015a      	lsls	r2, r3, #5
 801e39c:	68fb      	ldr	r3, [r7, #12]
 801e39e:	4413      	add	r3, r2
 801e3a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e3a4:	681b      	ldr	r3, [r3, #0]
 801e3a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801e3aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801e3ae:	d118      	bne.n	801e3e2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 801e3b0:	693b      	ldr	r3, [r7, #16]
 801e3b2:	2b00      	cmp	r3, #0
 801e3b4:	d10a      	bne.n	801e3cc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801e3b6:	693b      	ldr	r3, [r7, #16]
 801e3b8:	015a      	lsls	r2, r3, #5
 801e3ba:	68fb      	ldr	r3, [r7, #12]
 801e3bc:	4413      	add	r3, r2
 801e3be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e3c2:	461a      	mov	r2, r3
 801e3c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801e3c8:	6013      	str	r3, [r2, #0]
 801e3ca:	e013      	b.n	801e3f4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801e3cc:	693b      	ldr	r3, [r7, #16]
 801e3ce:	015a      	lsls	r2, r3, #5
 801e3d0:	68fb      	ldr	r3, [r7, #12]
 801e3d2:	4413      	add	r3, r2
 801e3d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e3d8:	461a      	mov	r2, r3
 801e3da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801e3de:	6013      	str	r3, [r2, #0]
 801e3e0:	e008      	b.n	801e3f4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801e3e2:	693b      	ldr	r3, [r7, #16]
 801e3e4:	015a      	lsls	r2, r3, #5
 801e3e6:	68fb      	ldr	r3, [r7, #12]
 801e3e8:	4413      	add	r3, r2
 801e3ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e3ee:	461a      	mov	r2, r3
 801e3f0:	2300      	movs	r3, #0
 801e3f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801e3f4:	693b      	ldr	r3, [r7, #16]
 801e3f6:	015a      	lsls	r2, r3, #5
 801e3f8:	68fb      	ldr	r3, [r7, #12]
 801e3fa:	4413      	add	r3, r2
 801e3fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e400:	461a      	mov	r2, r3
 801e402:	2300      	movs	r3, #0
 801e404:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801e406:	693b      	ldr	r3, [r7, #16]
 801e408:	015a      	lsls	r2, r3, #5
 801e40a:	68fb      	ldr	r3, [r7, #12]
 801e40c:	4413      	add	r3, r2
 801e40e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e412:	461a      	mov	r2, r3
 801e414:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801e418:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801e41a:	693b      	ldr	r3, [r7, #16]
 801e41c:	3301      	adds	r3, #1
 801e41e:	613b      	str	r3, [r7, #16]
 801e420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e422:	693a      	ldr	r2, [r7, #16]
 801e424:	429a      	cmp	r2, r3
 801e426:	d3b7      	bcc.n	801e398 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801e428:	68fb      	ldr	r3, [r7, #12]
 801e42a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e42e:	691b      	ldr	r3, [r3, #16]
 801e430:	68fa      	ldr	r2, [r7, #12]
 801e432:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801e436:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801e43a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801e43c:	687b      	ldr	r3, [r7, #4]
 801e43e:	2200      	movs	r2, #0
 801e440:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801e442:	687b      	ldr	r3, [r7, #4]
 801e444:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801e448:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801e44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e44c:	2b00      	cmp	r3, #0
 801e44e:	d105      	bne.n	801e45c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801e450:	687b      	ldr	r3, [r7, #4]
 801e452:	699b      	ldr	r3, [r3, #24]
 801e454:	f043 0210 	orr.w	r2, r3, #16
 801e458:	687b      	ldr	r3, [r7, #4]
 801e45a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801e45c:	687b      	ldr	r3, [r7, #4]
 801e45e:	699a      	ldr	r2, [r3, #24]
 801e460:	4b0f      	ldr	r3, [pc, #60]	; (801e4a0 <USB_DevInit+0x2b8>)
 801e462:	4313      	orrs	r3, r2
 801e464:	687a      	ldr	r2, [r7, #4]
 801e466:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801e468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e46a:	2b00      	cmp	r3, #0
 801e46c:	d005      	beq.n	801e47a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801e46e:	687b      	ldr	r3, [r7, #4]
 801e470:	699b      	ldr	r3, [r3, #24]
 801e472:	f043 0208 	orr.w	r2, r3, #8
 801e476:	687b      	ldr	r3, [r7, #4]
 801e478:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801e47a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e47c:	2b01      	cmp	r3, #1
 801e47e:	d107      	bne.n	801e490 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801e480:	687b      	ldr	r3, [r7, #4]
 801e482:	699b      	ldr	r3, [r3, #24]
 801e484:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801e488:	f043 0304 	orr.w	r3, r3, #4
 801e48c:	687a      	ldr	r2, [r7, #4]
 801e48e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801e490:	7dfb      	ldrb	r3, [r7, #23]
}
 801e492:	4618      	mov	r0, r3
 801e494:	3718      	adds	r7, #24
 801e496:	46bd      	mov	sp, r7
 801e498:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801e49c:	b004      	add	sp, #16
 801e49e:	4770      	bx	lr
 801e4a0:	803c3800 	.word	0x803c3800

0801e4a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801e4a4:	b480      	push	{r7}
 801e4a6:	b085      	sub	sp, #20
 801e4a8:	af00      	add	r7, sp, #0
 801e4aa:	6078      	str	r0, [r7, #4]
 801e4ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801e4ae:	2300      	movs	r3, #0
 801e4b0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801e4b2:	683b      	ldr	r3, [r7, #0]
 801e4b4:	019b      	lsls	r3, r3, #6
 801e4b6:	f043 0220 	orr.w	r2, r3, #32
 801e4ba:	687b      	ldr	r3, [r7, #4]
 801e4bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801e4be:	68fb      	ldr	r3, [r7, #12]
 801e4c0:	3301      	adds	r3, #1
 801e4c2:	60fb      	str	r3, [r7, #12]
 801e4c4:	4a08      	ldr	r2, [pc, #32]	; (801e4e8 <USB_FlushTxFifo+0x44>)
 801e4c6:	4293      	cmp	r3, r2
 801e4c8:	d901      	bls.n	801e4ce <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 801e4ca:	2303      	movs	r3, #3
 801e4cc:	e006      	b.n	801e4dc <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801e4ce:	687b      	ldr	r3, [r7, #4]
 801e4d0:	691b      	ldr	r3, [r3, #16]
 801e4d2:	f003 0320 	and.w	r3, r3, #32
 801e4d6:	2b20      	cmp	r3, #32
 801e4d8:	d0f1      	beq.n	801e4be <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 801e4da:	2300      	movs	r3, #0
}
 801e4dc:	4618      	mov	r0, r3
 801e4de:	3714      	adds	r7, #20
 801e4e0:	46bd      	mov	sp, r7
 801e4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e4e6:	4770      	bx	lr
 801e4e8:	00030d40 	.word	0x00030d40

0801e4ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801e4ec:	b480      	push	{r7}
 801e4ee:	b085      	sub	sp, #20
 801e4f0:	af00      	add	r7, sp, #0
 801e4f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801e4f4:	2300      	movs	r3, #0
 801e4f6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801e4f8:	687b      	ldr	r3, [r7, #4]
 801e4fa:	2210      	movs	r2, #16
 801e4fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801e4fe:	68fb      	ldr	r3, [r7, #12]
 801e500:	3301      	adds	r3, #1
 801e502:	60fb      	str	r3, [r7, #12]
 801e504:	4a08      	ldr	r2, [pc, #32]	; (801e528 <USB_FlushRxFifo+0x3c>)
 801e506:	4293      	cmp	r3, r2
 801e508:	d901      	bls.n	801e50e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 801e50a:	2303      	movs	r3, #3
 801e50c:	e006      	b.n	801e51c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801e50e:	687b      	ldr	r3, [r7, #4]
 801e510:	691b      	ldr	r3, [r3, #16]
 801e512:	f003 0310 	and.w	r3, r3, #16
 801e516:	2b10      	cmp	r3, #16
 801e518:	d0f1      	beq.n	801e4fe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 801e51a:	2300      	movs	r3, #0
}
 801e51c:	4618      	mov	r0, r3
 801e51e:	3714      	adds	r7, #20
 801e520:	46bd      	mov	sp, r7
 801e522:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e526:	4770      	bx	lr
 801e528:	00030d40 	.word	0x00030d40

0801e52c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801e52c:	b480      	push	{r7}
 801e52e:	b085      	sub	sp, #20
 801e530:	af00      	add	r7, sp, #0
 801e532:	6078      	str	r0, [r7, #4]
 801e534:	460b      	mov	r3, r1
 801e536:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e538:	687b      	ldr	r3, [r7, #4]
 801e53a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801e53c:	68fb      	ldr	r3, [r7, #12]
 801e53e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e542:	681a      	ldr	r2, [r3, #0]
 801e544:	78fb      	ldrb	r3, [r7, #3]
 801e546:	68f9      	ldr	r1, [r7, #12]
 801e548:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e54c:	4313      	orrs	r3, r2
 801e54e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801e550:	2300      	movs	r3, #0
}
 801e552:	4618      	mov	r0, r3
 801e554:	3714      	adds	r7, #20
 801e556:	46bd      	mov	sp, r7
 801e558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e55c:	4770      	bx	lr

0801e55e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801e55e:	b480      	push	{r7}
 801e560:	b087      	sub	sp, #28
 801e562:	af00      	add	r7, sp, #0
 801e564:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e566:	687b      	ldr	r3, [r7, #4]
 801e568:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801e56a:	693b      	ldr	r3, [r7, #16]
 801e56c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e570:	689b      	ldr	r3, [r3, #8]
 801e572:	f003 0306 	and.w	r3, r3, #6
 801e576:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801e578:	68fb      	ldr	r3, [r7, #12]
 801e57a:	2b00      	cmp	r3, #0
 801e57c:	d102      	bne.n	801e584 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801e57e:	2300      	movs	r3, #0
 801e580:	75fb      	strb	r3, [r7, #23]
 801e582:	e00a      	b.n	801e59a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801e584:	68fb      	ldr	r3, [r7, #12]
 801e586:	2b02      	cmp	r3, #2
 801e588:	d002      	beq.n	801e590 <USB_GetDevSpeed+0x32>
 801e58a:	68fb      	ldr	r3, [r7, #12]
 801e58c:	2b06      	cmp	r3, #6
 801e58e:	d102      	bne.n	801e596 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801e590:	2302      	movs	r3, #2
 801e592:	75fb      	strb	r3, [r7, #23]
 801e594:	e001      	b.n	801e59a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801e596:	230f      	movs	r3, #15
 801e598:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801e59a:	7dfb      	ldrb	r3, [r7, #23]
}
 801e59c:	4618      	mov	r0, r3
 801e59e:	371c      	adds	r7, #28
 801e5a0:	46bd      	mov	sp, r7
 801e5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e5a6:	4770      	bx	lr

0801e5a8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801e5a8:	b480      	push	{r7}
 801e5aa:	b085      	sub	sp, #20
 801e5ac:	af00      	add	r7, sp, #0
 801e5ae:	6078      	str	r0, [r7, #4]
 801e5b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e5b2:	687b      	ldr	r3, [r7, #4]
 801e5b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801e5b6:	683b      	ldr	r3, [r7, #0]
 801e5b8:	781b      	ldrb	r3, [r3, #0]
 801e5ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801e5bc:	683b      	ldr	r3, [r7, #0]
 801e5be:	785b      	ldrb	r3, [r3, #1]
 801e5c0:	2b01      	cmp	r3, #1
 801e5c2:	d13a      	bne.n	801e63a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801e5c4:	68fb      	ldr	r3, [r7, #12]
 801e5c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e5ca:	69da      	ldr	r2, [r3, #28]
 801e5cc:	683b      	ldr	r3, [r7, #0]
 801e5ce:	781b      	ldrb	r3, [r3, #0]
 801e5d0:	f003 030f 	and.w	r3, r3, #15
 801e5d4:	2101      	movs	r1, #1
 801e5d6:	fa01 f303 	lsl.w	r3, r1, r3
 801e5da:	b29b      	uxth	r3, r3
 801e5dc:	68f9      	ldr	r1, [r7, #12]
 801e5de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e5e2:	4313      	orrs	r3, r2
 801e5e4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801e5e6:	68bb      	ldr	r3, [r7, #8]
 801e5e8:	015a      	lsls	r2, r3, #5
 801e5ea:	68fb      	ldr	r3, [r7, #12]
 801e5ec:	4413      	add	r3, r2
 801e5ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e5f2:	681b      	ldr	r3, [r3, #0]
 801e5f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801e5f8:	2b00      	cmp	r3, #0
 801e5fa:	d155      	bne.n	801e6a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801e5fc:	68bb      	ldr	r3, [r7, #8]
 801e5fe:	015a      	lsls	r2, r3, #5
 801e600:	68fb      	ldr	r3, [r7, #12]
 801e602:	4413      	add	r3, r2
 801e604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e608:	681a      	ldr	r2, [r3, #0]
 801e60a:	683b      	ldr	r3, [r7, #0]
 801e60c:	689b      	ldr	r3, [r3, #8]
 801e60e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801e612:	683b      	ldr	r3, [r7, #0]
 801e614:	78db      	ldrb	r3, [r3, #3]
 801e616:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801e618:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801e61a:	68bb      	ldr	r3, [r7, #8]
 801e61c:	059b      	lsls	r3, r3, #22
 801e61e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801e620:	4313      	orrs	r3, r2
 801e622:	68ba      	ldr	r2, [r7, #8]
 801e624:	0151      	lsls	r1, r2, #5
 801e626:	68fa      	ldr	r2, [r7, #12]
 801e628:	440a      	add	r2, r1
 801e62a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e62e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801e636:	6013      	str	r3, [r2, #0]
 801e638:	e036      	b.n	801e6a8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801e63a:	68fb      	ldr	r3, [r7, #12]
 801e63c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e640:	69da      	ldr	r2, [r3, #28]
 801e642:	683b      	ldr	r3, [r7, #0]
 801e644:	781b      	ldrb	r3, [r3, #0]
 801e646:	f003 030f 	and.w	r3, r3, #15
 801e64a:	2101      	movs	r1, #1
 801e64c:	fa01 f303 	lsl.w	r3, r1, r3
 801e650:	041b      	lsls	r3, r3, #16
 801e652:	68f9      	ldr	r1, [r7, #12]
 801e654:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e658:	4313      	orrs	r3, r2
 801e65a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801e65c:	68bb      	ldr	r3, [r7, #8]
 801e65e:	015a      	lsls	r2, r3, #5
 801e660:	68fb      	ldr	r3, [r7, #12]
 801e662:	4413      	add	r3, r2
 801e664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e668:	681b      	ldr	r3, [r3, #0]
 801e66a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801e66e:	2b00      	cmp	r3, #0
 801e670:	d11a      	bne.n	801e6a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801e672:	68bb      	ldr	r3, [r7, #8]
 801e674:	015a      	lsls	r2, r3, #5
 801e676:	68fb      	ldr	r3, [r7, #12]
 801e678:	4413      	add	r3, r2
 801e67a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e67e:	681a      	ldr	r2, [r3, #0]
 801e680:	683b      	ldr	r3, [r7, #0]
 801e682:	689b      	ldr	r3, [r3, #8]
 801e684:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801e688:	683b      	ldr	r3, [r7, #0]
 801e68a:	78db      	ldrb	r3, [r3, #3]
 801e68c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801e68e:	430b      	orrs	r3, r1
 801e690:	4313      	orrs	r3, r2
 801e692:	68ba      	ldr	r2, [r7, #8]
 801e694:	0151      	lsls	r1, r2, #5
 801e696:	68fa      	ldr	r2, [r7, #12]
 801e698:	440a      	add	r2, r1
 801e69a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e69e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e6a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801e6a6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801e6a8:	2300      	movs	r3, #0
}
 801e6aa:	4618      	mov	r0, r3
 801e6ac:	3714      	adds	r7, #20
 801e6ae:	46bd      	mov	sp, r7
 801e6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6b4:	4770      	bx	lr
	...

0801e6b8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801e6b8:	b480      	push	{r7}
 801e6ba:	b085      	sub	sp, #20
 801e6bc:	af00      	add	r7, sp, #0
 801e6be:	6078      	str	r0, [r7, #4]
 801e6c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e6c2:	687b      	ldr	r3, [r7, #4]
 801e6c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801e6c6:	683b      	ldr	r3, [r7, #0]
 801e6c8:	781b      	ldrb	r3, [r3, #0]
 801e6ca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801e6cc:	683b      	ldr	r3, [r7, #0]
 801e6ce:	785b      	ldrb	r3, [r3, #1]
 801e6d0:	2b01      	cmp	r3, #1
 801e6d2:	d161      	bne.n	801e798 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801e6d4:	68bb      	ldr	r3, [r7, #8]
 801e6d6:	015a      	lsls	r2, r3, #5
 801e6d8:	68fb      	ldr	r3, [r7, #12]
 801e6da:	4413      	add	r3, r2
 801e6dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e6e0:	681b      	ldr	r3, [r3, #0]
 801e6e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801e6e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801e6ea:	d11f      	bne.n	801e72c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801e6ec:	68bb      	ldr	r3, [r7, #8]
 801e6ee:	015a      	lsls	r2, r3, #5
 801e6f0:	68fb      	ldr	r3, [r7, #12]
 801e6f2:	4413      	add	r3, r2
 801e6f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e6f8:	681b      	ldr	r3, [r3, #0]
 801e6fa:	68ba      	ldr	r2, [r7, #8]
 801e6fc:	0151      	lsls	r1, r2, #5
 801e6fe:	68fa      	ldr	r2, [r7, #12]
 801e700:	440a      	add	r2, r1
 801e702:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e706:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801e70a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801e70c:	68bb      	ldr	r3, [r7, #8]
 801e70e:	015a      	lsls	r2, r3, #5
 801e710:	68fb      	ldr	r3, [r7, #12]
 801e712:	4413      	add	r3, r2
 801e714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e718:	681b      	ldr	r3, [r3, #0]
 801e71a:	68ba      	ldr	r2, [r7, #8]
 801e71c:	0151      	lsls	r1, r2, #5
 801e71e:	68fa      	ldr	r2, [r7, #12]
 801e720:	440a      	add	r2, r1
 801e722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e726:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801e72a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801e72c:	68fb      	ldr	r3, [r7, #12]
 801e72e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e732:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e734:	683b      	ldr	r3, [r7, #0]
 801e736:	781b      	ldrb	r3, [r3, #0]
 801e738:	f003 030f 	and.w	r3, r3, #15
 801e73c:	2101      	movs	r1, #1
 801e73e:	fa01 f303 	lsl.w	r3, r1, r3
 801e742:	b29b      	uxth	r3, r3
 801e744:	43db      	mvns	r3, r3
 801e746:	68f9      	ldr	r1, [r7, #12]
 801e748:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e74c:	4013      	ands	r3, r2
 801e74e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801e750:	68fb      	ldr	r3, [r7, #12]
 801e752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e756:	69da      	ldr	r2, [r3, #28]
 801e758:	683b      	ldr	r3, [r7, #0]
 801e75a:	781b      	ldrb	r3, [r3, #0]
 801e75c:	f003 030f 	and.w	r3, r3, #15
 801e760:	2101      	movs	r1, #1
 801e762:	fa01 f303 	lsl.w	r3, r1, r3
 801e766:	b29b      	uxth	r3, r3
 801e768:	43db      	mvns	r3, r3
 801e76a:	68f9      	ldr	r1, [r7, #12]
 801e76c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e770:	4013      	ands	r3, r2
 801e772:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801e774:	68bb      	ldr	r3, [r7, #8]
 801e776:	015a      	lsls	r2, r3, #5
 801e778:	68fb      	ldr	r3, [r7, #12]
 801e77a:	4413      	add	r3, r2
 801e77c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e780:	681a      	ldr	r2, [r3, #0]
 801e782:	68bb      	ldr	r3, [r7, #8]
 801e784:	0159      	lsls	r1, r3, #5
 801e786:	68fb      	ldr	r3, [r7, #12]
 801e788:	440b      	add	r3, r1
 801e78a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e78e:	4619      	mov	r1, r3
 801e790:	4b35      	ldr	r3, [pc, #212]	; (801e868 <USB_DeactivateEndpoint+0x1b0>)
 801e792:	4013      	ands	r3, r2
 801e794:	600b      	str	r3, [r1, #0]
 801e796:	e060      	b.n	801e85a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801e798:	68bb      	ldr	r3, [r7, #8]
 801e79a:	015a      	lsls	r2, r3, #5
 801e79c:	68fb      	ldr	r3, [r7, #12]
 801e79e:	4413      	add	r3, r2
 801e7a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e7a4:	681b      	ldr	r3, [r3, #0]
 801e7a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801e7aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801e7ae:	d11f      	bne.n	801e7f0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801e7b0:	68bb      	ldr	r3, [r7, #8]
 801e7b2:	015a      	lsls	r2, r3, #5
 801e7b4:	68fb      	ldr	r3, [r7, #12]
 801e7b6:	4413      	add	r3, r2
 801e7b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e7bc:	681b      	ldr	r3, [r3, #0]
 801e7be:	68ba      	ldr	r2, [r7, #8]
 801e7c0:	0151      	lsls	r1, r2, #5
 801e7c2:	68fa      	ldr	r2, [r7, #12]
 801e7c4:	440a      	add	r2, r1
 801e7c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e7ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801e7ce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801e7d0:	68bb      	ldr	r3, [r7, #8]
 801e7d2:	015a      	lsls	r2, r3, #5
 801e7d4:	68fb      	ldr	r3, [r7, #12]
 801e7d6:	4413      	add	r3, r2
 801e7d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e7dc:	681b      	ldr	r3, [r3, #0]
 801e7de:	68ba      	ldr	r2, [r7, #8]
 801e7e0:	0151      	lsls	r1, r2, #5
 801e7e2:	68fa      	ldr	r2, [r7, #12]
 801e7e4:	440a      	add	r2, r1
 801e7e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e7ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801e7ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801e7f0:	68fb      	ldr	r3, [r7, #12]
 801e7f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e7f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e7f8:	683b      	ldr	r3, [r7, #0]
 801e7fa:	781b      	ldrb	r3, [r3, #0]
 801e7fc:	f003 030f 	and.w	r3, r3, #15
 801e800:	2101      	movs	r1, #1
 801e802:	fa01 f303 	lsl.w	r3, r1, r3
 801e806:	041b      	lsls	r3, r3, #16
 801e808:	43db      	mvns	r3, r3
 801e80a:	68f9      	ldr	r1, [r7, #12]
 801e80c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e810:	4013      	ands	r3, r2
 801e812:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801e814:	68fb      	ldr	r3, [r7, #12]
 801e816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e81a:	69da      	ldr	r2, [r3, #28]
 801e81c:	683b      	ldr	r3, [r7, #0]
 801e81e:	781b      	ldrb	r3, [r3, #0]
 801e820:	f003 030f 	and.w	r3, r3, #15
 801e824:	2101      	movs	r1, #1
 801e826:	fa01 f303 	lsl.w	r3, r1, r3
 801e82a:	041b      	lsls	r3, r3, #16
 801e82c:	43db      	mvns	r3, r3
 801e82e:	68f9      	ldr	r1, [r7, #12]
 801e830:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e834:	4013      	ands	r3, r2
 801e836:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801e838:	68bb      	ldr	r3, [r7, #8]
 801e83a:	015a      	lsls	r2, r3, #5
 801e83c:	68fb      	ldr	r3, [r7, #12]
 801e83e:	4413      	add	r3, r2
 801e840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e844:	681a      	ldr	r2, [r3, #0]
 801e846:	68bb      	ldr	r3, [r7, #8]
 801e848:	0159      	lsls	r1, r3, #5
 801e84a:	68fb      	ldr	r3, [r7, #12]
 801e84c:	440b      	add	r3, r1
 801e84e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e852:	4619      	mov	r1, r3
 801e854:	4b05      	ldr	r3, [pc, #20]	; (801e86c <USB_DeactivateEndpoint+0x1b4>)
 801e856:	4013      	ands	r3, r2
 801e858:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801e85a:	2300      	movs	r3, #0
}
 801e85c:	4618      	mov	r0, r3
 801e85e:	3714      	adds	r7, #20
 801e860:	46bd      	mov	sp, r7
 801e862:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e866:	4770      	bx	lr
 801e868:	ec337800 	.word	0xec337800
 801e86c:	eff37800 	.word	0xeff37800

0801e870 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801e870:	b580      	push	{r7, lr}
 801e872:	b08a      	sub	sp, #40	; 0x28
 801e874:	af02      	add	r7, sp, #8
 801e876:	60f8      	str	r0, [r7, #12]
 801e878:	60b9      	str	r1, [r7, #8]
 801e87a:	4613      	mov	r3, r2
 801e87c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e87e:	68fb      	ldr	r3, [r7, #12]
 801e880:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801e882:	68bb      	ldr	r3, [r7, #8]
 801e884:	781b      	ldrb	r3, [r3, #0]
 801e886:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801e888:	68bb      	ldr	r3, [r7, #8]
 801e88a:	785b      	ldrb	r3, [r3, #1]
 801e88c:	2b01      	cmp	r3, #1
 801e88e:	f040 815c 	bne.w	801eb4a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801e892:	68bb      	ldr	r3, [r7, #8]
 801e894:	695b      	ldr	r3, [r3, #20]
 801e896:	2b00      	cmp	r3, #0
 801e898:	d132      	bne.n	801e900 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801e89a:	69bb      	ldr	r3, [r7, #24]
 801e89c:	015a      	lsls	r2, r3, #5
 801e89e:	69fb      	ldr	r3, [r7, #28]
 801e8a0:	4413      	add	r3, r2
 801e8a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e8a6:	691b      	ldr	r3, [r3, #16]
 801e8a8:	69ba      	ldr	r2, [r7, #24]
 801e8aa:	0151      	lsls	r1, r2, #5
 801e8ac:	69fa      	ldr	r2, [r7, #28]
 801e8ae:	440a      	add	r2, r1
 801e8b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e8b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e8b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e8bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801e8be:	69bb      	ldr	r3, [r7, #24]
 801e8c0:	015a      	lsls	r2, r3, #5
 801e8c2:	69fb      	ldr	r3, [r7, #28]
 801e8c4:	4413      	add	r3, r2
 801e8c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e8ca:	691b      	ldr	r3, [r3, #16]
 801e8cc:	69ba      	ldr	r2, [r7, #24]
 801e8ce:	0151      	lsls	r1, r2, #5
 801e8d0:	69fa      	ldr	r2, [r7, #28]
 801e8d2:	440a      	add	r2, r1
 801e8d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e8d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801e8dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801e8de:	69bb      	ldr	r3, [r7, #24]
 801e8e0:	015a      	lsls	r2, r3, #5
 801e8e2:	69fb      	ldr	r3, [r7, #28]
 801e8e4:	4413      	add	r3, r2
 801e8e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e8ea:	691b      	ldr	r3, [r3, #16]
 801e8ec:	69ba      	ldr	r2, [r7, #24]
 801e8ee:	0151      	lsls	r1, r2, #5
 801e8f0:	69fa      	ldr	r2, [r7, #28]
 801e8f2:	440a      	add	r2, r1
 801e8f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e8f8:	0cdb      	lsrs	r3, r3, #19
 801e8fa:	04db      	lsls	r3, r3, #19
 801e8fc:	6113      	str	r3, [r2, #16]
 801e8fe:	e074      	b.n	801e9ea <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801e900:	69bb      	ldr	r3, [r7, #24]
 801e902:	015a      	lsls	r2, r3, #5
 801e904:	69fb      	ldr	r3, [r7, #28]
 801e906:	4413      	add	r3, r2
 801e908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e90c:	691b      	ldr	r3, [r3, #16]
 801e90e:	69ba      	ldr	r2, [r7, #24]
 801e910:	0151      	lsls	r1, r2, #5
 801e912:	69fa      	ldr	r2, [r7, #28]
 801e914:	440a      	add	r2, r1
 801e916:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e91a:	0cdb      	lsrs	r3, r3, #19
 801e91c:	04db      	lsls	r3, r3, #19
 801e91e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801e920:	69bb      	ldr	r3, [r7, #24]
 801e922:	015a      	lsls	r2, r3, #5
 801e924:	69fb      	ldr	r3, [r7, #28]
 801e926:	4413      	add	r3, r2
 801e928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e92c:	691b      	ldr	r3, [r3, #16]
 801e92e:	69ba      	ldr	r2, [r7, #24]
 801e930:	0151      	lsls	r1, r2, #5
 801e932:	69fa      	ldr	r2, [r7, #28]
 801e934:	440a      	add	r2, r1
 801e936:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e93a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e93e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e942:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801e944:	69bb      	ldr	r3, [r7, #24]
 801e946:	015a      	lsls	r2, r3, #5
 801e948:	69fb      	ldr	r3, [r7, #28]
 801e94a:	4413      	add	r3, r2
 801e94c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e950:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801e952:	68bb      	ldr	r3, [r7, #8]
 801e954:	6959      	ldr	r1, [r3, #20]
 801e956:	68bb      	ldr	r3, [r7, #8]
 801e958:	689b      	ldr	r3, [r3, #8]
 801e95a:	440b      	add	r3, r1
 801e95c:	1e59      	subs	r1, r3, #1
 801e95e:	68bb      	ldr	r3, [r7, #8]
 801e960:	689b      	ldr	r3, [r3, #8]
 801e962:	fbb1 f3f3 	udiv	r3, r1, r3
 801e966:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801e968:	4b9d      	ldr	r3, [pc, #628]	; (801ebe0 <USB_EPStartXfer+0x370>)
 801e96a:	400b      	ands	r3, r1
 801e96c:	69b9      	ldr	r1, [r7, #24]
 801e96e:	0148      	lsls	r0, r1, #5
 801e970:	69f9      	ldr	r1, [r7, #28]
 801e972:	4401      	add	r1, r0
 801e974:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801e978:	4313      	orrs	r3, r2
 801e97a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801e97c:	69bb      	ldr	r3, [r7, #24]
 801e97e:	015a      	lsls	r2, r3, #5
 801e980:	69fb      	ldr	r3, [r7, #28]
 801e982:	4413      	add	r3, r2
 801e984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e988:	691a      	ldr	r2, [r3, #16]
 801e98a:	68bb      	ldr	r3, [r7, #8]
 801e98c:	695b      	ldr	r3, [r3, #20]
 801e98e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801e992:	69b9      	ldr	r1, [r7, #24]
 801e994:	0148      	lsls	r0, r1, #5
 801e996:	69f9      	ldr	r1, [r7, #28]
 801e998:	4401      	add	r1, r0
 801e99a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801e99e:	4313      	orrs	r3, r2
 801e9a0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801e9a2:	68bb      	ldr	r3, [r7, #8]
 801e9a4:	78db      	ldrb	r3, [r3, #3]
 801e9a6:	2b01      	cmp	r3, #1
 801e9a8:	d11f      	bne.n	801e9ea <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801e9aa:	69bb      	ldr	r3, [r7, #24]
 801e9ac:	015a      	lsls	r2, r3, #5
 801e9ae:	69fb      	ldr	r3, [r7, #28]
 801e9b0:	4413      	add	r3, r2
 801e9b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e9b6:	691b      	ldr	r3, [r3, #16]
 801e9b8:	69ba      	ldr	r2, [r7, #24]
 801e9ba:	0151      	lsls	r1, r2, #5
 801e9bc:	69fa      	ldr	r2, [r7, #28]
 801e9be:	440a      	add	r2, r1
 801e9c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e9c4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801e9c8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801e9ca:	69bb      	ldr	r3, [r7, #24]
 801e9cc:	015a      	lsls	r2, r3, #5
 801e9ce:	69fb      	ldr	r3, [r7, #28]
 801e9d0:	4413      	add	r3, r2
 801e9d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e9d6:	691b      	ldr	r3, [r3, #16]
 801e9d8:	69ba      	ldr	r2, [r7, #24]
 801e9da:	0151      	lsls	r1, r2, #5
 801e9dc:	69fa      	ldr	r2, [r7, #28]
 801e9de:	440a      	add	r2, r1
 801e9e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e9e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801e9e8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801e9ea:	79fb      	ldrb	r3, [r7, #7]
 801e9ec:	2b01      	cmp	r3, #1
 801e9ee:	d14b      	bne.n	801ea88 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801e9f0:	68bb      	ldr	r3, [r7, #8]
 801e9f2:	691b      	ldr	r3, [r3, #16]
 801e9f4:	2b00      	cmp	r3, #0
 801e9f6:	d009      	beq.n	801ea0c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801e9f8:	69bb      	ldr	r3, [r7, #24]
 801e9fa:	015a      	lsls	r2, r3, #5
 801e9fc:	69fb      	ldr	r3, [r7, #28]
 801e9fe:	4413      	add	r3, r2
 801ea00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ea04:	461a      	mov	r2, r3
 801ea06:	68bb      	ldr	r3, [r7, #8]
 801ea08:	691b      	ldr	r3, [r3, #16]
 801ea0a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801ea0c:	68bb      	ldr	r3, [r7, #8]
 801ea0e:	78db      	ldrb	r3, [r3, #3]
 801ea10:	2b01      	cmp	r3, #1
 801ea12:	d128      	bne.n	801ea66 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801ea14:	69fb      	ldr	r3, [r7, #28]
 801ea16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ea1a:	689b      	ldr	r3, [r3, #8]
 801ea1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ea20:	2b00      	cmp	r3, #0
 801ea22:	d110      	bne.n	801ea46 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801ea24:	69bb      	ldr	r3, [r7, #24]
 801ea26:	015a      	lsls	r2, r3, #5
 801ea28:	69fb      	ldr	r3, [r7, #28]
 801ea2a:	4413      	add	r3, r2
 801ea2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ea30:	681b      	ldr	r3, [r3, #0]
 801ea32:	69ba      	ldr	r2, [r7, #24]
 801ea34:	0151      	lsls	r1, r2, #5
 801ea36:	69fa      	ldr	r2, [r7, #28]
 801ea38:	440a      	add	r2, r1
 801ea3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ea3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801ea42:	6013      	str	r3, [r2, #0]
 801ea44:	e00f      	b.n	801ea66 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801ea46:	69bb      	ldr	r3, [r7, #24]
 801ea48:	015a      	lsls	r2, r3, #5
 801ea4a:	69fb      	ldr	r3, [r7, #28]
 801ea4c:	4413      	add	r3, r2
 801ea4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ea52:	681b      	ldr	r3, [r3, #0]
 801ea54:	69ba      	ldr	r2, [r7, #24]
 801ea56:	0151      	lsls	r1, r2, #5
 801ea58:	69fa      	ldr	r2, [r7, #28]
 801ea5a:	440a      	add	r2, r1
 801ea5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ea60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801ea64:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801ea66:	69bb      	ldr	r3, [r7, #24]
 801ea68:	015a      	lsls	r2, r3, #5
 801ea6a:	69fb      	ldr	r3, [r7, #28]
 801ea6c:	4413      	add	r3, r2
 801ea6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ea72:	681b      	ldr	r3, [r3, #0]
 801ea74:	69ba      	ldr	r2, [r7, #24]
 801ea76:	0151      	lsls	r1, r2, #5
 801ea78:	69fa      	ldr	r2, [r7, #28]
 801ea7a:	440a      	add	r2, r1
 801ea7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ea80:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801ea84:	6013      	str	r3, [r2, #0]
 801ea86:	e12f      	b.n	801ece8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801ea88:	69bb      	ldr	r3, [r7, #24]
 801ea8a:	015a      	lsls	r2, r3, #5
 801ea8c:	69fb      	ldr	r3, [r7, #28]
 801ea8e:	4413      	add	r3, r2
 801ea90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ea94:	681b      	ldr	r3, [r3, #0]
 801ea96:	69ba      	ldr	r2, [r7, #24]
 801ea98:	0151      	lsls	r1, r2, #5
 801ea9a:	69fa      	ldr	r2, [r7, #28]
 801ea9c:	440a      	add	r2, r1
 801ea9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801eaa2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801eaa6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801eaa8:	68bb      	ldr	r3, [r7, #8]
 801eaaa:	78db      	ldrb	r3, [r3, #3]
 801eaac:	2b01      	cmp	r3, #1
 801eaae:	d015      	beq.n	801eadc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801eab0:	68bb      	ldr	r3, [r7, #8]
 801eab2:	695b      	ldr	r3, [r3, #20]
 801eab4:	2b00      	cmp	r3, #0
 801eab6:	f000 8117 	beq.w	801ece8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801eaba:	69fb      	ldr	r3, [r7, #28]
 801eabc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801eac0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801eac2:	68bb      	ldr	r3, [r7, #8]
 801eac4:	781b      	ldrb	r3, [r3, #0]
 801eac6:	f003 030f 	and.w	r3, r3, #15
 801eaca:	2101      	movs	r1, #1
 801eacc:	fa01 f303 	lsl.w	r3, r1, r3
 801ead0:	69f9      	ldr	r1, [r7, #28]
 801ead2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801ead6:	4313      	orrs	r3, r2
 801ead8:	634b      	str	r3, [r1, #52]	; 0x34
 801eada:	e105      	b.n	801ece8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801eadc:	69fb      	ldr	r3, [r7, #28]
 801eade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801eae2:	689b      	ldr	r3, [r3, #8]
 801eae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801eae8:	2b00      	cmp	r3, #0
 801eaea:	d110      	bne.n	801eb0e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801eaec:	69bb      	ldr	r3, [r7, #24]
 801eaee:	015a      	lsls	r2, r3, #5
 801eaf0:	69fb      	ldr	r3, [r7, #28]
 801eaf2:	4413      	add	r3, r2
 801eaf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801eaf8:	681b      	ldr	r3, [r3, #0]
 801eafa:	69ba      	ldr	r2, [r7, #24]
 801eafc:	0151      	lsls	r1, r2, #5
 801eafe:	69fa      	ldr	r2, [r7, #28]
 801eb00:	440a      	add	r2, r1
 801eb02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801eb06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801eb0a:	6013      	str	r3, [r2, #0]
 801eb0c:	e00f      	b.n	801eb2e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801eb0e:	69bb      	ldr	r3, [r7, #24]
 801eb10:	015a      	lsls	r2, r3, #5
 801eb12:	69fb      	ldr	r3, [r7, #28]
 801eb14:	4413      	add	r3, r2
 801eb16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801eb1a:	681b      	ldr	r3, [r3, #0]
 801eb1c:	69ba      	ldr	r2, [r7, #24]
 801eb1e:	0151      	lsls	r1, r2, #5
 801eb20:	69fa      	ldr	r2, [r7, #28]
 801eb22:	440a      	add	r2, r1
 801eb24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801eb28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801eb2c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801eb2e:	68bb      	ldr	r3, [r7, #8]
 801eb30:	68d9      	ldr	r1, [r3, #12]
 801eb32:	68bb      	ldr	r3, [r7, #8]
 801eb34:	781a      	ldrb	r2, [r3, #0]
 801eb36:	68bb      	ldr	r3, [r7, #8]
 801eb38:	695b      	ldr	r3, [r3, #20]
 801eb3a:	b298      	uxth	r0, r3
 801eb3c:	79fb      	ldrb	r3, [r7, #7]
 801eb3e:	9300      	str	r3, [sp, #0]
 801eb40:	4603      	mov	r3, r0
 801eb42:	68f8      	ldr	r0, [r7, #12]
 801eb44:	f000 fa2b 	bl	801ef9e <USB_WritePacket>
 801eb48:	e0ce      	b.n	801ece8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801eb4a:	69bb      	ldr	r3, [r7, #24]
 801eb4c:	015a      	lsls	r2, r3, #5
 801eb4e:	69fb      	ldr	r3, [r7, #28]
 801eb50:	4413      	add	r3, r2
 801eb52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eb56:	691b      	ldr	r3, [r3, #16]
 801eb58:	69ba      	ldr	r2, [r7, #24]
 801eb5a:	0151      	lsls	r1, r2, #5
 801eb5c:	69fa      	ldr	r2, [r7, #28]
 801eb5e:	440a      	add	r2, r1
 801eb60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801eb64:	0cdb      	lsrs	r3, r3, #19
 801eb66:	04db      	lsls	r3, r3, #19
 801eb68:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801eb6a:	69bb      	ldr	r3, [r7, #24]
 801eb6c:	015a      	lsls	r2, r3, #5
 801eb6e:	69fb      	ldr	r3, [r7, #28]
 801eb70:	4413      	add	r3, r2
 801eb72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eb76:	691b      	ldr	r3, [r3, #16]
 801eb78:	69ba      	ldr	r2, [r7, #24]
 801eb7a:	0151      	lsls	r1, r2, #5
 801eb7c:	69fa      	ldr	r2, [r7, #28]
 801eb7e:	440a      	add	r2, r1
 801eb80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801eb84:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801eb88:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801eb8c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 801eb8e:	68bb      	ldr	r3, [r7, #8]
 801eb90:	695b      	ldr	r3, [r3, #20]
 801eb92:	2b00      	cmp	r3, #0
 801eb94:	d126      	bne.n	801ebe4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801eb96:	69bb      	ldr	r3, [r7, #24]
 801eb98:	015a      	lsls	r2, r3, #5
 801eb9a:	69fb      	ldr	r3, [r7, #28]
 801eb9c:	4413      	add	r3, r2
 801eb9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eba2:	691a      	ldr	r2, [r3, #16]
 801eba4:	68bb      	ldr	r3, [r7, #8]
 801eba6:	689b      	ldr	r3, [r3, #8]
 801eba8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801ebac:	69b9      	ldr	r1, [r7, #24]
 801ebae:	0148      	lsls	r0, r1, #5
 801ebb0:	69f9      	ldr	r1, [r7, #28]
 801ebb2:	4401      	add	r1, r0
 801ebb4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801ebb8:	4313      	orrs	r3, r2
 801ebba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801ebbc:	69bb      	ldr	r3, [r7, #24]
 801ebbe:	015a      	lsls	r2, r3, #5
 801ebc0:	69fb      	ldr	r3, [r7, #28]
 801ebc2:	4413      	add	r3, r2
 801ebc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ebc8:	691b      	ldr	r3, [r3, #16]
 801ebca:	69ba      	ldr	r2, [r7, #24]
 801ebcc:	0151      	lsls	r1, r2, #5
 801ebce:	69fa      	ldr	r2, [r7, #28]
 801ebd0:	440a      	add	r2, r1
 801ebd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ebd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801ebda:	6113      	str	r3, [r2, #16]
 801ebdc:	e036      	b.n	801ec4c <USB_EPStartXfer+0x3dc>
 801ebde:	bf00      	nop
 801ebe0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801ebe4:	68bb      	ldr	r3, [r7, #8]
 801ebe6:	695a      	ldr	r2, [r3, #20]
 801ebe8:	68bb      	ldr	r3, [r7, #8]
 801ebea:	689b      	ldr	r3, [r3, #8]
 801ebec:	4413      	add	r3, r2
 801ebee:	1e5a      	subs	r2, r3, #1
 801ebf0:	68bb      	ldr	r3, [r7, #8]
 801ebf2:	689b      	ldr	r3, [r3, #8]
 801ebf4:	fbb2 f3f3 	udiv	r3, r2, r3
 801ebf8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801ebfa:	69bb      	ldr	r3, [r7, #24]
 801ebfc:	015a      	lsls	r2, r3, #5
 801ebfe:	69fb      	ldr	r3, [r7, #28]
 801ec00:	4413      	add	r3, r2
 801ec02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ec06:	691a      	ldr	r2, [r3, #16]
 801ec08:	8afb      	ldrh	r3, [r7, #22]
 801ec0a:	04d9      	lsls	r1, r3, #19
 801ec0c:	4b39      	ldr	r3, [pc, #228]	; (801ecf4 <USB_EPStartXfer+0x484>)
 801ec0e:	400b      	ands	r3, r1
 801ec10:	69b9      	ldr	r1, [r7, #24]
 801ec12:	0148      	lsls	r0, r1, #5
 801ec14:	69f9      	ldr	r1, [r7, #28]
 801ec16:	4401      	add	r1, r0
 801ec18:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801ec1c:	4313      	orrs	r3, r2
 801ec1e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 801ec20:	69bb      	ldr	r3, [r7, #24]
 801ec22:	015a      	lsls	r2, r3, #5
 801ec24:	69fb      	ldr	r3, [r7, #28]
 801ec26:	4413      	add	r3, r2
 801ec28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ec2c:	691a      	ldr	r2, [r3, #16]
 801ec2e:	68bb      	ldr	r3, [r7, #8]
 801ec30:	689b      	ldr	r3, [r3, #8]
 801ec32:	8af9      	ldrh	r1, [r7, #22]
 801ec34:	fb01 f303 	mul.w	r3, r1, r3
 801ec38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801ec3c:	69b9      	ldr	r1, [r7, #24]
 801ec3e:	0148      	lsls	r0, r1, #5
 801ec40:	69f9      	ldr	r1, [r7, #28]
 801ec42:	4401      	add	r1, r0
 801ec44:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801ec48:	4313      	orrs	r3, r2
 801ec4a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801ec4c:	79fb      	ldrb	r3, [r7, #7]
 801ec4e:	2b01      	cmp	r3, #1
 801ec50:	d10d      	bne.n	801ec6e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801ec52:	68bb      	ldr	r3, [r7, #8]
 801ec54:	68db      	ldr	r3, [r3, #12]
 801ec56:	2b00      	cmp	r3, #0
 801ec58:	d009      	beq.n	801ec6e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801ec5a:	68bb      	ldr	r3, [r7, #8]
 801ec5c:	68d9      	ldr	r1, [r3, #12]
 801ec5e:	69bb      	ldr	r3, [r7, #24]
 801ec60:	015a      	lsls	r2, r3, #5
 801ec62:	69fb      	ldr	r3, [r7, #28]
 801ec64:	4413      	add	r3, r2
 801ec66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ec6a:	460a      	mov	r2, r1
 801ec6c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801ec6e:	68bb      	ldr	r3, [r7, #8]
 801ec70:	78db      	ldrb	r3, [r3, #3]
 801ec72:	2b01      	cmp	r3, #1
 801ec74:	d128      	bne.n	801ecc8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801ec76:	69fb      	ldr	r3, [r7, #28]
 801ec78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ec7c:	689b      	ldr	r3, [r3, #8]
 801ec7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ec82:	2b00      	cmp	r3, #0
 801ec84:	d110      	bne.n	801eca8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801ec86:	69bb      	ldr	r3, [r7, #24]
 801ec88:	015a      	lsls	r2, r3, #5
 801ec8a:	69fb      	ldr	r3, [r7, #28]
 801ec8c:	4413      	add	r3, r2
 801ec8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ec92:	681b      	ldr	r3, [r3, #0]
 801ec94:	69ba      	ldr	r2, [r7, #24]
 801ec96:	0151      	lsls	r1, r2, #5
 801ec98:	69fa      	ldr	r2, [r7, #28]
 801ec9a:	440a      	add	r2, r1
 801ec9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801eca0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801eca4:	6013      	str	r3, [r2, #0]
 801eca6:	e00f      	b.n	801ecc8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801eca8:	69bb      	ldr	r3, [r7, #24]
 801ecaa:	015a      	lsls	r2, r3, #5
 801ecac:	69fb      	ldr	r3, [r7, #28]
 801ecae:	4413      	add	r3, r2
 801ecb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ecb4:	681b      	ldr	r3, [r3, #0]
 801ecb6:	69ba      	ldr	r2, [r7, #24]
 801ecb8:	0151      	lsls	r1, r2, #5
 801ecba:	69fa      	ldr	r2, [r7, #28]
 801ecbc:	440a      	add	r2, r1
 801ecbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ecc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801ecc6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801ecc8:	69bb      	ldr	r3, [r7, #24]
 801ecca:	015a      	lsls	r2, r3, #5
 801eccc:	69fb      	ldr	r3, [r7, #28]
 801ecce:	4413      	add	r3, r2
 801ecd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ecd4:	681b      	ldr	r3, [r3, #0]
 801ecd6:	69ba      	ldr	r2, [r7, #24]
 801ecd8:	0151      	lsls	r1, r2, #5
 801ecda:	69fa      	ldr	r2, [r7, #28]
 801ecdc:	440a      	add	r2, r1
 801ecde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ece2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801ece6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801ece8:	2300      	movs	r3, #0
}
 801ecea:	4618      	mov	r0, r3
 801ecec:	3720      	adds	r7, #32
 801ecee:	46bd      	mov	sp, r7
 801ecf0:	bd80      	pop	{r7, pc}
 801ecf2:	bf00      	nop
 801ecf4:	1ff80000 	.word	0x1ff80000

0801ecf8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801ecf8:	b480      	push	{r7}
 801ecfa:	b087      	sub	sp, #28
 801ecfc:	af00      	add	r7, sp, #0
 801ecfe:	60f8      	str	r0, [r7, #12]
 801ed00:	60b9      	str	r1, [r7, #8]
 801ed02:	4613      	mov	r3, r2
 801ed04:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ed06:	68fb      	ldr	r3, [r7, #12]
 801ed08:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801ed0a:	68bb      	ldr	r3, [r7, #8]
 801ed0c:	781b      	ldrb	r3, [r3, #0]
 801ed0e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801ed10:	68bb      	ldr	r3, [r7, #8]
 801ed12:	785b      	ldrb	r3, [r3, #1]
 801ed14:	2b01      	cmp	r3, #1
 801ed16:	f040 80cd 	bne.w	801eeb4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801ed1a:	68bb      	ldr	r3, [r7, #8]
 801ed1c:	695b      	ldr	r3, [r3, #20]
 801ed1e:	2b00      	cmp	r3, #0
 801ed20:	d132      	bne.n	801ed88 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801ed22:	693b      	ldr	r3, [r7, #16]
 801ed24:	015a      	lsls	r2, r3, #5
 801ed26:	697b      	ldr	r3, [r7, #20]
 801ed28:	4413      	add	r3, r2
 801ed2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ed2e:	691b      	ldr	r3, [r3, #16]
 801ed30:	693a      	ldr	r2, [r7, #16]
 801ed32:	0151      	lsls	r1, r2, #5
 801ed34:	697a      	ldr	r2, [r7, #20]
 801ed36:	440a      	add	r2, r1
 801ed38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ed3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801ed40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801ed44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801ed46:	693b      	ldr	r3, [r7, #16]
 801ed48:	015a      	lsls	r2, r3, #5
 801ed4a:	697b      	ldr	r3, [r7, #20]
 801ed4c:	4413      	add	r3, r2
 801ed4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ed52:	691b      	ldr	r3, [r3, #16]
 801ed54:	693a      	ldr	r2, [r7, #16]
 801ed56:	0151      	lsls	r1, r2, #5
 801ed58:	697a      	ldr	r2, [r7, #20]
 801ed5a:	440a      	add	r2, r1
 801ed5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ed60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801ed64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801ed66:	693b      	ldr	r3, [r7, #16]
 801ed68:	015a      	lsls	r2, r3, #5
 801ed6a:	697b      	ldr	r3, [r7, #20]
 801ed6c:	4413      	add	r3, r2
 801ed6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ed72:	691b      	ldr	r3, [r3, #16]
 801ed74:	693a      	ldr	r2, [r7, #16]
 801ed76:	0151      	lsls	r1, r2, #5
 801ed78:	697a      	ldr	r2, [r7, #20]
 801ed7a:	440a      	add	r2, r1
 801ed7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ed80:	0cdb      	lsrs	r3, r3, #19
 801ed82:	04db      	lsls	r3, r3, #19
 801ed84:	6113      	str	r3, [r2, #16]
 801ed86:	e04e      	b.n	801ee26 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801ed88:	693b      	ldr	r3, [r7, #16]
 801ed8a:	015a      	lsls	r2, r3, #5
 801ed8c:	697b      	ldr	r3, [r7, #20]
 801ed8e:	4413      	add	r3, r2
 801ed90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ed94:	691b      	ldr	r3, [r3, #16]
 801ed96:	693a      	ldr	r2, [r7, #16]
 801ed98:	0151      	lsls	r1, r2, #5
 801ed9a:	697a      	ldr	r2, [r7, #20]
 801ed9c:	440a      	add	r2, r1
 801ed9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801eda2:	0cdb      	lsrs	r3, r3, #19
 801eda4:	04db      	lsls	r3, r3, #19
 801eda6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801eda8:	693b      	ldr	r3, [r7, #16]
 801edaa:	015a      	lsls	r2, r3, #5
 801edac:	697b      	ldr	r3, [r7, #20]
 801edae:	4413      	add	r3, r2
 801edb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801edb4:	691b      	ldr	r3, [r3, #16]
 801edb6:	693a      	ldr	r2, [r7, #16]
 801edb8:	0151      	lsls	r1, r2, #5
 801edba:	697a      	ldr	r2, [r7, #20]
 801edbc:	440a      	add	r2, r1
 801edbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801edc2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801edc6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801edca:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 801edcc:	68bb      	ldr	r3, [r7, #8]
 801edce:	695a      	ldr	r2, [r3, #20]
 801edd0:	68bb      	ldr	r3, [r7, #8]
 801edd2:	689b      	ldr	r3, [r3, #8]
 801edd4:	429a      	cmp	r2, r3
 801edd6:	d903      	bls.n	801ede0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 801edd8:	68bb      	ldr	r3, [r7, #8]
 801edda:	689a      	ldr	r2, [r3, #8]
 801eddc:	68bb      	ldr	r3, [r7, #8]
 801edde:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801ede0:	693b      	ldr	r3, [r7, #16]
 801ede2:	015a      	lsls	r2, r3, #5
 801ede4:	697b      	ldr	r3, [r7, #20]
 801ede6:	4413      	add	r3, r2
 801ede8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801edec:	691b      	ldr	r3, [r3, #16]
 801edee:	693a      	ldr	r2, [r7, #16]
 801edf0:	0151      	lsls	r1, r2, #5
 801edf2:	697a      	ldr	r2, [r7, #20]
 801edf4:	440a      	add	r2, r1
 801edf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801edfa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801edfe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801ee00:	693b      	ldr	r3, [r7, #16]
 801ee02:	015a      	lsls	r2, r3, #5
 801ee04:	697b      	ldr	r3, [r7, #20]
 801ee06:	4413      	add	r3, r2
 801ee08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ee0c:	691a      	ldr	r2, [r3, #16]
 801ee0e:	68bb      	ldr	r3, [r7, #8]
 801ee10:	695b      	ldr	r3, [r3, #20]
 801ee12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801ee16:	6939      	ldr	r1, [r7, #16]
 801ee18:	0148      	lsls	r0, r1, #5
 801ee1a:	6979      	ldr	r1, [r7, #20]
 801ee1c:	4401      	add	r1, r0
 801ee1e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801ee22:	4313      	orrs	r3, r2
 801ee24:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801ee26:	79fb      	ldrb	r3, [r7, #7]
 801ee28:	2b01      	cmp	r3, #1
 801ee2a:	d11e      	bne.n	801ee6a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801ee2c:	68bb      	ldr	r3, [r7, #8]
 801ee2e:	691b      	ldr	r3, [r3, #16]
 801ee30:	2b00      	cmp	r3, #0
 801ee32:	d009      	beq.n	801ee48 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801ee34:	693b      	ldr	r3, [r7, #16]
 801ee36:	015a      	lsls	r2, r3, #5
 801ee38:	697b      	ldr	r3, [r7, #20]
 801ee3a:	4413      	add	r3, r2
 801ee3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ee40:	461a      	mov	r2, r3
 801ee42:	68bb      	ldr	r3, [r7, #8]
 801ee44:	691b      	ldr	r3, [r3, #16]
 801ee46:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801ee48:	693b      	ldr	r3, [r7, #16]
 801ee4a:	015a      	lsls	r2, r3, #5
 801ee4c:	697b      	ldr	r3, [r7, #20]
 801ee4e:	4413      	add	r3, r2
 801ee50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ee54:	681b      	ldr	r3, [r3, #0]
 801ee56:	693a      	ldr	r2, [r7, #16]
 801ee58:	0151      	lsls	r1, r2, #5
 801ee5a:	697a      	ldr	r2, [r7, #20]
 801ee5c:	440a      	add	r2, r1
 801ee5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ee62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801ee66:	6013      	str	r3, [r2, #0]
 801ee68:	e092      	b.n	801ef90 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801ee6a:	693b      	ldr	r3, [r7, #16]
 801ee6c:	015a      	lsls	r2, r3, #5
 801ee6e:	697b      	ldr	r3, [r7, #20]
 801ee70:	4413      	add	r3, r2
 801ee72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ee76:	681b      	ldr	r3, [r3, #0]
 801ee78:	693a      	ldr	r2, [r7, #16]
 801ee7a:	0151      	lsls	r1, r2, #5
 801ee7c:	697a      	ldr	r2, [r7, #20]
 801ee7e:	440a      	add	r2, r1
 801ee80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ee84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801ee88:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801ee8a:	68bb      	ldr	r3, [r7, #8]
 801ee8c:	695b      	ldr	r3, [r3, #20]
 801ee8e:	2b00      	cmp	r3, #0
 801ee90:	d07e      	beq.n	801ef90 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801ee92:	697b      	ldr	r3, [r7, #20]
 801ee94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ee98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801ee9a:	68bb      	ldr	r3, [r7, #8]
 801ee9c:	781b      	ldrb	r3, [r3, #0]
 801ee9e:	f003 030f 	and.w	r3, r3, #15
 801eea2:	2101      	movs	r1, #1
 801eea4:	fa01 f303 	lsl.w	r3, r1, r3
 801eea8:	6979      	ldr	r1, [r7, #20]
 801eeaa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801eeae:	4313      	orrs	r3, r2
 801eeb0:	634b      	str	r3, [r1, #52]	; 0x34
 801eeb2:	e06d      	b.n	801ef90 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801eeb4:	693b      	ldr	r3, [r7, #16]
 801eeb6:	015a      	lsls	r2, r3, #5
 801eeb8:	697b      	ldr	r3, [r7, #20]
 801eeba:	4413      	add	r3, r2
 801eebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eec0:	691b      	ldr	r3, [r3, #16]
 801eec2:	693a      	ldr	r2, [r7, #16]
 801eec4:	0151      	lsls	r1, r2, #5
 801eec6:	697a      	ldr	r2, [r7, #20]
 801eec8:	440a      	add	r2, r1
 801eeca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801eece:	0cdb      	lsrs	r3, r3, #19
 801eed0:	04db      	lsls	r3, r3, #19
 801eed2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801eed4:	693b      	ldr	r3, [r7, #16]
 801eed6:	015a      	lsls	r2, r3, #5
 801eed8:	697b      	ldr	r3, [r7, #20]
 801eeda:	4413      	add	r3, r2
 801eedc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eee0:	691b      	ldr	r3, [r3, #16]
 801eee2:	693a      	ldr	r2, [r7, #16]
 801eee4:	0151      	lsls	r1, r2, #5
 801eee6:	697a      	ldr	r2, [r7, #20]
 801eee8:	440a      	add	r2, r1
 801eeea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801eeee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801eef2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801eef6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 801eef8:	68bb      	ldr	r3, [r7, #8]
 801eefa:	695b      	ldr	r3, [r3, #20]
 801eefc:	2b00      	cmp	r3, #0
 801eefe:	d003      	beq.n	801ef08 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 801ef00:	68bb      	ldr	r3, [r7, #8]
 801ef02:	689a      	ldr	r2, [r3, #8]
 801ef04:	68bb      	ldr	r3, [r7, #8]
 801ef06:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801ef08:	693b      	ldr	r3, [r7, #16]
 801ef0a:	015a      	lsls	r2, r3, #5
 801ef0c:	697b      	ldr	r3, [r7, #20]
 801ef0e:	4413      	add	r3, r2
 801ef10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ef14:	691b      	ldr	r3, [r3, #16]
 801ef16:	693a      	ldr	r2, [r7, #16]
 801ef18:	0151      	lsls	r1, r2, #5
 801ef1a:	697a      	ldr	r2, [r7, #20]
 801ef1c:	440a      	add	r2, r1
 801ef1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ef22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801ef26:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 801ef28:	693b      	ldr	r3, [r7, #16]
 801ef2a:	015a      	lsls	r2, r3, #5
 801ef2c:	697b      	ldr	r3, [r7, #20]
 801ef2e:	4413      	add	r3, r2
 801ef30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ef34:	691a      	ldr	r2, [r3, #16]
 801ef36:	68bb      	ldr	r3, [r7, #8]
 801ef38:	689b      	ldr	r3, [r3, #8]
 801ef3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801ef3e:	6939      	ldr	r1, [r7, #16]
 801ef40:	0148      	lsls	r0, r1, #5
 801ef42:	6979      	ldr	r1, [r7, #20]
 801ef44:	4401      	add	r1, r0
 801ef46:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801ef4a:	4313      	orrs	r3, r2
 801ef4c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 801ef4e:	79fb      	ldrb	r3, [r7, #7]
 801ef50:	2b01      	cmp	r3, #1
 801ef52:	d10d      	bne.n	801ef70 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801ef54:	68bb      	ldr	r3, [r7, #8]
 801ef56:	68db      	ldr	r3, [r3, #12]
 801ef58:	2b00      	cmp	r3, #0
 801ef5a:	d009      	beq.n	801ef70 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801ef5c:	68bb      	ldr	r3, [r7, #8]
 801ef5e:	68d9      	ldr	r1, [r3, #12]
 801ef60:	693b      	ldr	r3, [r7, #16]
 801ef62:	015a      	lsls	r2, r3, #5
 801ef64:	697b      	ldr	r3, [r7, #20]
 801ef66:	4413      	add	r3, r2
 801ef68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ef6c:	460a      	mov	r2, r1
 801ef6e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801ef70:	693b      	ldr	r3, [r7, #16]
 801ef72:	015a      	lsls	r2, r3, #5
 801ef74:	697b      	ldr	r3, [r7, #20]
 801ef76:	4413      	add	r3, r2
 801ef78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ef7c:	681b      	ldr	r3, [r3, #0]
 801ef7e:	693a      	ldr	r2, [r7, #16]
 801ef80:	0151      	lsls	r1, r2, #5
 801ef82:	697a      	ldr	r2, [r7, #20]
 801ef84:	440a      	add	r2, r1
 801ef86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ef8a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801ef8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801ef90:	2300      	movs	r3, #0
}
 801ef92:	4618      	mov	r0, r3
 801ef94:	371c      	adds	r7, #28
 801ef96:	46bd      	mov	sp, r7
 801ef98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef9c:	4770      	bx	lr

0801ef9e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801ef9e:	b480      	push	{r7}
 801efa0:	b089      	sub	sp, #36	; 0x24
 801efa2:	af00      	add	r7, sp, #0
 801efa4:	60f8      	str	r0, [r7, #12]
 801efa6:	60b9      	str	r1, [r7, #8]
 801efa8:	4611      	mov	r1, r2
 801efaa:	461a      	mov	r2, r3
 801efac:	460b      	mov	r3, r1
 801efae:	71fb      	strb	r3, [r7, #7]
 801efb0:	4613      	mov	r3, r2
 801efb2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801efb4:	68fb      	ldr	r3, [r7, #12]
 801efb6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801efb8:	68bb      	ldr	r3, [r7, #8]
 801efba:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801efbc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801efc0:	2b00      	cmp	r3, #0
 801efc2:	d123      	bne.n	801f00c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801efc4:	88bb      	ldrh	r3, [r7, #4]
 801efc6:	3303      	adds	r3, #3
 801efc8:	089b      	lsrs	r3, r3, #2
 801efca:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801efcc:	2300      	movs	r3, #0
 801efce:	61bb      	str	r3, [r7, #24]
 801efd0:	e018      	b.n	801f004 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801efd2:	79fb      	ldrb	r3, [r7, #7]
 801efd4:	031a      	lsls	r2, r3, #12
 801efd6:	697b      	ldr	r3, [r7, #20]
 801efd8:	4413      	add	r3, r2
 801efda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801efde:	461a      	mov	r2, r3
 801efe0:	69fb      	ldr	r3, [r7, #28]
 801efe2:	681b      	ldr	r3, [r3, #0]
 801efe4:	6013      	str	r3, [r2, #0]
      pSrc++;
 801efe6:	69fb      	ldr	r3, [r7, #28]
 801efe8:	3301      	adds	r3, #1
 801efea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801efec:	69fb      	ldr	r3, [r7, #28]
 801efee:	3301      	adds	r3, #1
 801eff0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801eff2:	69fb      	ldr	r3, [r7, #28]
 801eff4:	3301      	adds	r3, #1
 801eff6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801eff8:	69fb      	ldr	r3, [r7, #28]
 801effa:	3301      	adds	r3, #1
 801effc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801effe:	69bb      	ldr	r3, [r7, #24]
 801f000:	3301      	adds	r3, #1
 801f002:	61bb      	str	r3, [r7, #24]
 801f004:	69ba      	ldr	r2, [r7, #24]
 801f006:	693b      	ldr	r3, [r7, #16]
 801f008:	429a      	cmp	r2, r3
 801f00a:	d3e2      	bcc.n	801efd2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801f00c:	2300      	movs	r3, #0
}
 801f00e:	4618      	mov	r0, r3
 801f010:	3724      	adds	r7, #36	; 0x24
 801f012:	46bd      	mov	sp, r7
 801f014:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f018:	4770      	bx	lr

0801f01a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801f01a:	b480      	push	{r7}
 801f01c:	b08b      	sub	sp, #44	; 0x2c
 801f01e:	af00      	add	r7, sp, #0
 801f020:	60f8      	str	r0, [r7, #12]
 801f022:	60b9      	str	r1, [r7, #8]
 801f024:	4613      	mov	r3, r2
 801f026:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f028:	68fb      	ldr	r3, [r7, #12]
 801f02a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801f02c:	68bb      	ldr	r3, [r7, #8]
 801f02e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801f030:	88fb      	ldrh	r3, [r7, #6]
 801f032:	089b      	lsrs	r3, r3, #2
 801f034:	b29b      	uxth	r3, r3
 801f036:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801f038:	88fb      	ldrh	r3, [r7, #6]
 801f03a:	f003 0303 	and.w	r3, r3, #3
 801f03e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801f040:	2300      	movs	r3, #0
 801f042:	623b      	str	r3, [r7, #32]
 801f044:	e014      	b.n	801f070 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801f046:	69bb      	ldr	r3, [r7, #24]
 801f048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801f04c:	681a      	ldr	r2, [r3, #0]
 801f04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f050:	601a      	str	r2, [r3, #0]
    pDest++;
 801f052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f054:	3301      	adds	r3, #1
 801f056:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801f058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f05a:	3301      	adds	r3, #1
 801f05c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801f05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f060:	3301      	adds	r3, #1
 801f062:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801f064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f066:	3301      	adds	r3, #1
 801f068:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 801f06a:	6a3b      	ldr	r3, [r7, #32]
 801f06c:	3301      	adds	r3, #1
 801f06e:	623b      	str	r3, [r7, #32]
 801f070:	6a3a      	ldr	r2, [r7, #32]
 801f072:	697b      	ldr	r3, [r7, #20]
 801f074:	429a      	cmp	r2, r3
 801f076:	d3e6      	bcc.n	801f046 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801f078:	8bfb      	ldrh	r3, [r7, #30]
 801f07a:	2b00      	cmp	r3, #0
 801f07c:	d01e      	beq.n	801f0bc <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801f07e:	2300      	movs	r3, #0
 801f080:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801f082:	69bb      	ldr	r3, [r7, #24]
 801f084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801f088:	461a      	mov	r2, r3
 801f08a:	f107 0310 	add.w	r3, r7, #16
 801f08e:	6812      	ldr	r2, [r2, #0]
 801f090:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801f092:	693a      	ldr	r2, [r7, #16]
 801f094:	6a3b      	ldr	r3, [r7, #32]
 801f096:	b2db      	uxtb	r3, r3
 801f098:	00db      	lsls	r3, r3, #3
 801f09a:	fa22 f303 	lsr.w	r3, r2, r3
 801f09e:	b2da      	uxtb	r2, r3
 801f0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f0a2:	701a      	strb	r2, [r3, #0]
      i++;
 801f0a4:	6a3b      	ldr	r3, [r7, #32]
 801f0a6:	3301      	adds	r3, #1
 801f0a8:	623b      	str	r3, [r7, #32]
      pDest++;
 801f0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f0ac:	3301      	adds	r3, #1
 801f0ae:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801f0b0:	8bfb      	ldrh	r3, [r7, #30]
 801f0b2:	3b01      	subs	r3, #1
 801f0b4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801f0b6:	8bfb      	ldrh	r3, [r7, #30]
 801f0b8:	2b00      	cmp	r3, #0
 801f0ba:	d1ea      	bne.n	801f092 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801f0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801f0be:	4618      	mov	r0, r3
 801f0c0:	372c      	adds	r7, #44	; 0x2c
 801f0c2:	46bd      	mov	sp, r7
 801f0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f0c8:	4770      	bx	lr

0801f0ca <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801f0ca:	b480      	push	{r7}
 801f0cc:	b085      	sub	sp, #20
 801f0ce:	af00      	add	r7, sp, #0
 801f0d0:	6078      	str	r0, [r7, #4]
 801f0d2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f0d4:	687b      	ldr	r3, [r7, #4]
 801f0d6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801f0d8:	683b      	ldr	r3, [r7, #0]
 801f0da:	781b      	ldrb	r3, [r3, #0]
 801f0dc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801f0de:	683b      	ldr	r3, [r7, #0]
 801f0e0:	785b      	ldrb	r3, [r3, #1]
 801f0e2:	2b01      	cmp	r3, #1
 801f0e4:	d12c      	bne.n	801f140 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801f0e6:	68bb      	ldr	r3, [r7, #8]
 801f0e8:	015a      	lsls	r2, r3, #5
 801f0ea:	68fb      	ldr	r3, [r7, #12]
 801f0ec:	4413      	add	r3, r2
 801f0ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801f0f2:	681b      	ldr	r3, [r3, #0]
 801f0f4:	2b00      	cmp	r3, #0
 801f0f6:	db12      	blt.n	801f11e <USB_EPSetStall+0x54>
 801f0f8:	68bb      	ldr	r3, [r7, #8]
 801f0fa:	2b00      	cmp	r3, #0
 801f0fc:	d00f      	beq.n	801f11e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801f0fe:	68bb      	ldr	r3, [r7, #8]
 801f100:	015a      	lsls	r2, r3, #5
 801f102:	68fb      	ldr	r3, [r7, #12]
 801f104:	4413      	add	r3, r2
 801f106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801f10a:	681b      	ldr	r3, [r3, #0]
 801f10c:	68ba      	ldr	r2, [r7, #8]
 801f10e:	0151      	lsls	r1, r2, #5
 801f110:	68fa      	ldr	r2, [r7, #12]
 801f112:	440a      	add	r2, r1
 801f114:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801f118:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801f11c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801f11e:	68bb      	ldr	r3, [r7, #8]
 801f120:	015a      	lsls	r2, r3, #5
 801f122:	68fb      	ldr	r3, [r7, #12]
 801f124:	4413      	add	r3, r2
 801f126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801f12a:	681b      	ldr	r3, [r3, #0]
 801f12c:	68ba      	ldr	r2, [r7, #8]
 801f12e:	0151      	lsls	r1, r2, #5
 801f130:	68fa      	ldr	r2, [r7, #12]
 801f132:	440a      	add	r2, r1
 801f134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801f138:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801f13c:	6013      	str	r3, [r2, #0]
 801f13e:	e02b      	b.n	801f198 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801f140:	68bb      	ldr	r3, [r7, #8]
 801f142:	015a      	lsls	r2, r3, #5
 801f144:	68fb      	ldr	r3, [r7, #12]
 801f146:	4413      	add	r3, r2
 801f148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f14c:	681b      	ldr	r3, [r3, #0]
 801f14e:	2b00      	cmp	r3, #0
 801f150:	db12      	blt.n	801f178 <USB_EPSetStall+0xae>
 801f152:	68bb      	ldr	r3, [r7, #8]
 801f154:	2b00      	cmp	r3, #0
 801f156:	d00f      	beq.n	801f178 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801f158:	68bb      	ldr	r3, [r7, #8]
 801f15a:	015a      	lsls	r2, r3, #5
 801f15c:	68fb      	ldr	r3, [r7, #12]
 801f15e:	4413      	add	r3, r2
 801f160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f164:	681b      	ldr	r3, [r3, #0]
 801f166:	68ba      	ldr	r2, [r7, #8]
 801f168:	0151      	lsls	r1, r2, #5
 801f16a:	68fa      	ldr	r2, [r7, #12]
 801f16c:	440a      	add	r2, r1
 801f16e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f172:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801f176:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801f178:	68bb      	ldr	r3, [r7, #8]
 801f17a:	015a      	lsls	r2, r3, #5
 801f17c:	68fb      	ldr	r3, [r7, #12]
 801f17e:	4413      	add	r3, r2
 801f180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f184:	681b      	ldr	r3, [r3, #0]
 801f186:	68ba      	ldr	r2, [r7, #8]
 801f188:	0151      	lsls	r1, r2, #5
 801f18a:	68fa      	ldr	r2, [r7, #12]
 801f18c:	440a      	add	r2, r1
 801f18e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f192:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801f196:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801f198:	2300      	movs	r3, #0
}
 801f19a:	4618      	mov	r0, r3
 801f19c:	3714      	adds	r7, #20
 801f19e:	46bd      	mov	sp, r7
 801f1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f1a4:	4770      	bx	lr

0801f1a6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801f1a6:	b480      	push	{r7}
 801f1a8:	b085      	sub	sp, #20
 801f1aa:	af00      	add	r7, sp, #0
 801f1ac:	6078      	str	r0, [r7, #4]
 801f1ae:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f1b0:	687b      	ldr	r3, [r7, #4]
 801f1b2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801f1b4:	683b      	ldr	r3, [r7, #0]
 801f1b6:	781b      	ldrb	r3, [r3, #0]
 801f1b8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801f1ba:	683b      	ldr	r3, [r7, #0]
 801f1bc:	785b      	ldrb	r3, [r3, #1]
 801f1be:	2b01      	cmp	r3, #1
 801f1c0:	d128      	bne.n	801f214 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801f1c2:	68bb      	ldr	r3, [r7, #8]
 801f1c4:	015a      	lsls	r2, r3, #5
 801f1c6:	68fb      	ldr	r3, [r7, #12]
 801f1c8:	4413      	add	r3, r2
 801f1ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801f1ce:	681b      	ldr	r3, [r3, #0]
 801f1d0:	68ba      	ldr	r2, [r7, #8]
 801f1d2:	0151      	lsls	r1, r2, #5
 801f1d4:	68fa      	ldr	r2, [r7, #12]
 801f1d6:	440a      	add	r2, r1
 801f1d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801f1dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801f1e0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801f1e2:	683b      	ldr	r3, [r7, #0]
 801f1e4:	78db      	ldrb	r3, [r3, #3]
 801f1e6:	2b03      	cmp	r3, #3
 801f1e8:	d003      	beq.n	801f1f2 <USB_EPClearStall+0x4c>
 801f1ea:	683b      	ldr	r3, [r7, #0]
 801f1ec:	78db      	ldrb	r3, [r3, #3]
 801f1ee:	2b02      	cmp	r3, #2
 801f1f0:	d138      	bne.n	801f264 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801f1f2:	68bb      	ldr	r3, [r7, #8]
 801f1f4:	015a      	lsls	r2, r3, #5
 801f1f6:	68fb      	ldr	r3, [r7, #12]
 801f1f8:	4413      	add	r3, r2
 801f1fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801f1fe:	681b      	ldr	r3, [r3, #0]
 801f200:	68ba      	ldr	r2, [r7, #8]
 801f202:	0151      	lsls	r1, r2, #5
 801f204:	68fa      	ldr	r2, [r7, #12]
 801f206:	440a      	add	r2, r1
 801f208:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801f20c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801f210:	6013      	str	r3, [r2, #0]
 801f212:	e027      	b.n	801f264 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801f214:	68bb      	ldr	r3, [r7, #8]
 801f216:	015a      	lsls	r2, r3, #5
 801f218:	68fb      	ldr	r3, [r7, #12]
 801f21a:	4413      	add	r3, r2
 801f21c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f220:	681b      	ldr	r3, [r3, #0]
 801f222:	68ba      	ldr	r2, [r7, #8]
 801f224:	0151      	lsls	r1, r2, #5
 801f226:	68fa      	ldr	r2, [r7, #12]
 801f228:	440a      	add	r2, r1
 801f22a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f22e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801f232:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801f234:	683b      	ldr	r3, [r7, #0]
 801f236:	78db      	ldrb	r3, [r3, #3]
 801f238:	2b03      	cmp	r3, #3
 801f23a:	d003      	beq.n	801f244 <USB_EPClearStall+0x9e>
 801f23c:	683b      	ldr	r3, [r7, #0]
 801f23e:	78db      	ldrb	r3, [r3, #3]
 801f240:	2b02      	cmp	r3, #2
 801f242:	d10f      	bne.n	801f264 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801f244:	68bb      	ldr	r3, [r7, #8]
 801f246:	015a      	lsls	r2, r3, #5
 801f248:	68fb      	ldr	r3, [r7, #12]
 801f24a:	4413      	add	r3, r2
 801f24c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f250:	681b      	ldr	r3, [r3, #0]
 801f252:	68ba      	ldr	r2, [r7, #8]
 801f254:	0151      	lsls	r1, r2, #5
 801f256:	68fa      	ldr	r2, [r7, #12]
 801f258:	440a      	add	r2, r1
 801f25a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f25e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801f262:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801f264:	2300      	movs	r3, #0
}
 801f266:	4618      	mov	r0, r3
 801f268:	3714      	adds	r7, #20
 801f26a:	46bd      	mov	sp, r7
 801f26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f270:	4770      	bx	lr

0801f272 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801f272:	b480      	push	{r7}
 801f274:	b085      	sub	sp, #20
 801f276:	af00      	add	r7, sp, #0
 801f278:	6078      	str	r0, [r7, #4]
 801f27a:	460b      	mov	r3, r1
 801f27c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f27e:	687b      	ldr	r3, [r7, #4]
 801f280:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801f282:	68fb      	ldr	r3, [r7, #12]
 801f284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f288:	681b      	ldr	r3, [r3, #0]
 801f28a:	68fa      	ldr	r2, [r7, #12]
 801f28c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801f290:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801f294:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801f296:	68fb      	ldr	r3, [r7, #12]
 801f298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f29c:	681a      	ldr	r2, [r3, #0]
 801f29e:	78fb      	ldrb	r3, [r7, #3]
 801f2a0:	011b      	lsls	r3, r3, #4
 801f2a2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801f2a6:	68f9      	ldr	r1, [r7, #12]
 801f2a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801f2ac:	4313      	orrs	r3, r2
 801f2ae:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801f2b0:	2300      	movs	r3, #0
}
 801f2b2:	4618      	mov	r0, r3
 801f2b4:	3714      	adds	r7, #20
 801f2b6:	46bd      	mov	sp, r7
 801f2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2bc:	4770      	bx	lr

0801f2be <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801f2be:	b480      	push	{r7}
 801f2c0:	b085      	sub	sp, #20
 801f2c2:	af00      	add	r7, sp, #0
 801f2c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f2c6:	687b      	ldr	r3, [r7, #4]
 801f2c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801f2ca:	68fb      	ldr	r3, [r7, #12]
 801f2cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801f2d0:	681b      	ldr	r3, [r3, #0]
 801f2d2:	68fa      	ldr	r2, [r7, #12]
 801f2d4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801f2d8:	f023 0303 	bic.w	r3, r3, #3
 801f2dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801f2de:	68fb      	ldr	r3, [r7, #12]
 801f2e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f2e4:	685b      	ldr	r3, [r3, #4]
 801f2e6:	68fa      	ldr	r2, [r7, #12]
 801f2e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801f2ec:	f023 0302 	bic.w	r3, r3, #2
 801f2f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801f2f2:	2300      	movs	r3, #0
}
 801f2f4:	4618      	mov	r0, r3
 801f2f6:	3714      	adds	r7, #20
 801f2f8:	46bd      	mov	sp, r7
 801f2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2fe:	4770      	bx	lr

0801f300 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801f300:	b480      	push	{r7}
 801f302:	b085      	sub	sp, #20
 801f304:	af00      	add	r7, sp, #0
 801f306:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f308:	687b      	ldr	r3, [r7, #4]
 801f30a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801f30c:	68fb      	ldr	r3, [r7, #12]
 801f30e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801f312:	681b      	ldr	r3, [r3, #0]
 801f314:	68fa      	ldr	r2, [r7, #12]
 801f316:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801f31a:	f023 0303 	bic.w	r3, r3, #3
 801f31e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801f320:	68fb      	ldr	r3, [r7, #12]
 801f322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f326:	685b      	ldr	r3, [r3, #4]
 801f328:	68fa      	ldr	r2, [r7, #12]
 801f32a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801f32e:	f043 0302 	orr.w	r3, r3, #2
 801f332:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801f334:	2300      	movs	r3, #0
}
 801f336:	4618      	mov	r0, r3
 801f338:	3714      	adds	r7, #20
 801f33a:	46bd      	mov	sp, r7
 801f33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f340:	4770      	bx	lr

0801f342 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801f342:	b480      	push	{r7}
 801f344:	b085      	sub	sp, #20
 801f346:	af00      	add	r7, sp, #0
 801f348:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801f34a:	687b      	ldr	r3, [r7, #4]
 801f34c:	695b      	ldr	r3, [r3, #20]
 801f34e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801f350:	687b      	ldr	r3, [r7, #4]
 801f352:	699b      	ldr	r3, [r3, #24]
 801f354:	68fa      	ldr	r2, [r7, #12]
 801f356:	4013      	ands	r3, r2
 801f358:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801f35a:	68fb      	ldr	r3, [r7, #12]
}
 801f35c:	4618      	mov	r0, r3
 801f35e:	3714      	adds	r7, #20
 801f360:	46bd      	mov	sp, r7
 801f362:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f366:	4770      	bx	lr

0801f368 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801f368:	b480      	push	{r7}
 801f36a:	b085      	sub	sp, #20
 801f36c:	af00      	add	r7, sp, #0
 801f36e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f370:	687b      	ldr	r3, [r7, #4]
 801f372:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801f374:	68fb      	ldr	r3, [r7, #12]
 801f376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f37a:	699b      	ldr	r3, [r3, #24]
 801f37c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801f37e:	68fb      	ldr	r3, [r7, #12]
 801f380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f384:	69db      	ldr	r3, [r3, #28]
 801f386:	68ba      	ldr	r2, [r7, #8]
 801f388:	4013      	ands	r3, r2
 801f38a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801f38c:	68bb      	ldr	r3, [r7, #8]
 801f38e:	0c1b      	lsrs	r3, r3, #16
}
 801f390:	4618      	mov	r0, r3
 801f392:	3714      	adds	r7, #20
 801f394:	46bd      	mov	sp, r7
 801f396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f39a:	4770      	bx	lr

0801f39c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801f39c:	b480      	push	{r7}
 801f39e:	b085      	sub	sp, #20
 801f3a0:	af00      	add	r7, sp, #0
 801f3a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f3a4:	687b      	ldr	r3, [r7, #4]
 801f3a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801f3a8:	68fb      	ldr	r3, [r7, #12]
 801f3aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f3ae:	699b      	ldr	r3, [r3, #24]
 801f3b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801f3b2:	68fb      	ldr	r3, [r7, #12]
 801f3b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f3b8:	69db      	ldr	r3, [r3, #28]
 801f3ba:	68ba      	ldr	r2, [r7, #8]
 801f3bc:	4013      	ands	r3, r2
 801f3be:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801f3c0:	68bb      	ldr	r3, [r7, #8]
 801f3c2:	b29b      	uxth	r3, r3
}
 801f3c4:	4618      	mov	r0, r3
 801f3c6:	3714      	adds	r7, #20
 801f3c8:	46bd      	mov	sp, r7
 801f3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3ce:	4770      	bx	lr

0801f3d0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801f3d0:	b480      	push	{r7}
 801f3d2:	b085      	sub	sp, #20
 801f3d4:	af00      	add	r7, sp, #0
 801f3d6:	6078      	str	r0, [r7, #4]
 801f3d8:	460b      	mov	r3, r1
 801f3da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f3dc:	687b      	ldr	r3, [r7, #4]
 801f3de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801f3e0:	78fb      	ldrb	r3, [r7, #3]
 801f3e2:	015a      	lsls	r2, r3, #5
 801f3e4:	68fb      	ldr	r3, [r7, #12]
 801f3e6:	4413      	add	r3, r2
 801f3e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f3ec:	689b      	ldr	r3, [r3, #8]
 801f3ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801f3f0:	68fb      	ldr	r3, [r7, #12]
 801f3f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f3f6:	695b      	ldr	r3, [r3, #20]
 801f3f8:	68ba      	ldr	r2, [r7, #8]
 801f3fa:	4013      	ands	r3, r2
 801f3fc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801f3fe:	68bb      	ldr	r3, [r7, #8]
}
 801f400:	4618      	mov	r0, r3
 801f402:	3714      	adds	r7, #20
 801f404:	46bd      	mov	sp, r7
 801f406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f40a:	4770      	bx	lr

0801f40c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801f40c:	b480      	push	{r7}
 801f40e:	b087      	sub	sp, #28
 801f410:	af00      	add	r7, sp, #0
 801f412:	6078      	str	r0, [r7, #4]
 801f414:	460b      	mov	r3, r1
 801f416:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f418:	687b      	ldr	r3, [r7, #4]
 801f41a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801f41c:	697b      	ldr	r3, [r7, #20]
 801f41e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f422:	691b      	ldr	r3, [r3, #16]
 801f424:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801f426:	697b      	ldr	r3, [r7, #20]
 801f428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f42c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f42e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801f430:	78fb      	ldrb	r3, [r7, #3]
 801f432:	f003 030f 	and.w	r3, r3, #15
 801f436:	68fa      	ldr	r2, [r7, #12]
 801f438:	fa22 f303 	lsr.w	r3, r2, r3
 801f43c:	01db      	lsls	r3, r3, #7
 801f43e:	b2db      	uxtb	r3, r3
 801f440:	693a      	ldr	r2, [r7, #16]
 801f442:	4313      	orrs	r3, r2
 801f444:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801f446:	78fb      	ldrb	r3, [r7, #3]
 801f448:	015a      	lsls	r2, r3, #5
 801f44a:	697b      	ldr	r3, [r7, #20]
 801f44c:	4413      	add	r3, r2
 801f44e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801f452:	689b      	ldr	r3, [r3, #8]
 801f454:	693a      	ldr	r2, [r7, #16]
 801f456:	4013      	ands	r3, r2
 801f458:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801f45a:	68bb      	ldr	r3, [r7, #8]
}
 801f45c:	4618      	mov	r0, r3
 801f45e:	371c      	adds	r7, #28
 801f460:	46bd      	mov	sp, r7
 801f462:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f466:	4770      	bx	lr

0801f468 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801f468:	b480      	push	{r7}
 801f46a:	b083      	sub	sp, #12
 801f46c:	af00      	add	r7, sp, #0
 801f46e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801f470:	687b      	ldr	r3, [r7, #4]
 801f472:	695b      	ldr	r3, [r3, #20]
 801f474:	f003 0301 	and.w	r3, r3, #1
}
 801f478:	4618      	mov	r0, r3
 801f47a:	370c      	adds	r7, #12
 801f47c:	46bd      	mov	sp, r7
 801f47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f482:	4770      	bx	lr

0801f484 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801f484:	b480      	push	{r7}
 801f486:	b085      	sub	sp, #20
 801f488:	af00      	add	r7, sp, #0
 801f48a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f48c:	687b      	ldr	r3, [r7, #4]
 801f48e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801f490:	68fb      	ldr	r3, [r7, #12]
 801f492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801f496:	681b      	ldr	r3, [r3, #0]
 801f498:	68fa      	ldr	r2, [r7, #12]
 801f49a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801f49e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801f4a2:	f023 0307 	bic.w	r3, r3, #7
 801f4a6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801f4a8:	68fb      	ldr	r3, [r7, #12]
 801f4aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f4ae:	685b      	ldr	r3, [r3, #4]
 801f4b0:	68fa      	ldr	r2, [r7, #12]
 801f4b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801f4b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801f4ba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801f4bc:	2300      	movs	r3, #0
}
 801f4be:	4618      	mov	r0, r3
 801f4c0:	3714      	adds	r7, #20
 801f4c2:	46bd      	mov	sp, r7
 801f4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4c8:	4770      	bx	lr
	...

0801f4cc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 801f4cc:	b480      	push	{r7}
 801f4ce:	b087      	sub	sp, #28
 801f4d0:	af00      	add	r7, sp, #0
 801f4d2:	60f8      	str	r0, [r7, #12]
 801f4d4:	460b      	mov	r3, r1
 801f4d6:	607a      	str	r2, [r7, #4]
 801f4d8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f4da:	68fb      	ldr	r3, [r7, #12]
 801f4dc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801f4de:	68fb      	ldr	r3, [r7, #12]
 801f4e0:	333c      	adds	r3, #60	; 0x3c
 801f4e2:	3304      	adds	r3, #4
 801f4e4:	681b      	ldr	r3, [r3, #0]
 801f4e6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801f4e8:	693b      	ldr	r3, [r7, #16]
 801f4ea:	4a26      	ldr	r2, [pc, #152]	; (801f584 <USB_EP0_OutStart+0xb8>)
 801f4ec:	4293      	cmp	r3, r2
 801f4ee:	d90a      	bls.n	801f506 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801f4f0:	697b      	ldr	r3, [r7, #20]
 801f4f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f4f6:	681b      	ldr	r3, [r3, #0]
 801f4f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801f4fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801f500:	d101      	bne.n	801f506 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801f502:	2300      	movs	r3, #0
 801f504:	e037      	b.n	801f576 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801f506:	697b      	ldr	r3, [r7, #20]
 801f508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f50c:	461a      	mov	r2, r3
 801f50e:	2300      	movs	r3, #0
 801f510:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801f512:	697b      	ldr	r3, [r7, #20]
 801f514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f518:	691b      	ldr	r3, [r3, #16]
 801f51a:	697a      	ldr	r2, [r7, #20]
 801f51c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f520:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801f524:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801f526:	697b      	ldr	r3, [r7, #20]
 801f528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f52c:	691b      	ldr	r3, [r3, #16]
 801f52e:	697a      	ldr	r2, [r7, #20]
 801f530:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f534:	f043 0318 	orr.w	r3, r3, #24
 801f538:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801f53a:	697b      	ldr	r3, [r7, #20]
 801f53c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f540:	691b      	ldr	r3, [r3, #16]
 801f542:	697a      	ldr	r2, [r7, #20]
 801f544:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f548:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801f54c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801f54e:	7afb      	ldrb	r3, [r7, #11]
 801f550:	2b01      	cmp	r3, #1
 801f552:	d10f      	bne.n	801f574 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801f554:	697b      	ldr	r3, [r7, #20]
 801f556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f55a:	461a      	mov	r2, r3
 801f55c:	687b      	ldr	r3, [r7, #4]
 801f55e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801f560:	697b      	ldr	r3, [r7, #20]
 801f562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f566:	681b      	ldr	r3, [r3, #0]
 801f568:	697a      	ldr	r2, [r7, #20]
 801f56a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f56e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801f572:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801f574:	2300      	movs	r3, #0
}
 801f576:	4618      	mov	r0, r3
 801f578:	371c      	adds	r7, #28
 801f57a:	46bd      	mov	sp, r7
 801f57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f580:	4770      	bx	lr
 801f582:	bf00      	nop
 801f584:	4f54300a 	.word	0x4f54300a

0801f588 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801f588:	b480      	push	{r7}
 801f58a:	b085      	sub	sp, #20
 801f58c:	af00      	add	r7, sp, #0
 801f58e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801f590:	2300      	movs	r3, #0
 801f592:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 801f594:	68fb      	ldr	r3, [r7, #12]
 801f596:	3301      	adds	r3, #1
 801f598:	60fb      	str	r3, [r7, #12]
 801f59a:	4a13      	ldr	r2, [pc, #76]	; (801f5e8 <USB_CoreReset+0x60>)
 801f59c:	4293      	cmp	r3, r2
 801f59e:	d901      	bls.n	801f5a4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 801f5a0:	2303      	movs	r3, #3
 801f5a2:	e01a      	b.n	801f5da <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801f5a4:	687b      	ldr	r3, [r7, #4]
 801f5a6:	691b      	ldr	r3, [r3, #16]
 801f5a8:	2b00      	cmp	r3, #0
 801f5aa:	daf3      	bge.n	801f594 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801f5ac:	2300      	movs	r3, #0
 801f5ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801f5b0:	687b      	ldr	r3, [r7, #4]
 801f5b2:	691b      	ldr	r3, [r3, #16]
 801f5b4:	f043 0201 	orr.w	r2, r3, #1
 801f5b8:	687b      	ldr	r3, [r7, #4]
 801f5ba:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801f5bc:	68fb      	ldr	r3, [r7, #12]
 801f5be:	3301      	adds	r3, #1
 801f5c0:	60fb      	str	r3, [r7, #12]
 801f5c2:	4a09      	ldr	r2, [pc, #36]	; (801f5e8 <USB_CoreReset+0x60>)
 801f5c4:	4293      	cmp	r3, r2
 801f5c6:	d901      	bls.n	801f5cc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 801f5c8:	2303      	movs	r3, #3
 801f5ca:	e006      	b.n	801f5da <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801f5cc:	687b      	ldr	r3, [r7, #4]
 801f5ce:	691b      	ldr	r3, [r3, #16]
 801f5d0:	f003 0301 	and.w	r3, r3, #1
 801f5d4:	2b01      	cmp	r3, #1
 801f5d6:	d0f1      	beq.n	801f5bc <USB_CoreReset+0x34>

  return HAL_OK;
 801f5d8:	2300      	movs	r3, #0
}
 801f5da:	4618      	mov	r0, r3
 801f5dc:	3714      	adds	r7, #20
 801f5de:	46bd      	mov	sp, r7
 801f5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5e4:	4770      	bx	lr
 801f5e6:	bf00      	nop
 801f5e8:	00030d40 	.word	0x00030d40

0801f5ec <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801f5ec:	b580      	push	{r7, lr}
 801f5ee:	b084      	sub	sp, #16
 801f5f0:	af00      	add	r7, sp, #0
 801f5f2:	6078      	str	r0, [r7, #4]
 801f5f4:	460b      	mov	r3, r1
 801f5f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 801f5f8:	f44f 701d 	mov.w	r0, #628	; 0x274
 801f5fc:	f003 fc6e 	bl	8022edc <USBD_static_malloc>
 801f600:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 801f602:	68fb      	ldr	r3, [r7, #12]
 801f604:	2b00      	cmp	r3, #0
 801f606:	d105      	bne.n	801f614 <USBD_MSC_Init+0x28>
  {
    pdev->pClassData = NULL;
 801f608:	687b      	ldr	r3, [r7, #4]
 801f60a:	2200      	movs	r2, #0
 801f60c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 801f610:	2302      	movs	r3, #2
 801f612:	e034      	b.n	801f67e <USBD_MSC_Init+0x92>
  }

  pdev->pClassData = (void *)hmsc;
 801f614:	687b      	ldr	r3, [r7, #4]
 801f616:	68fa      	ldr	r2, [r7, #12]
 801f618:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801f61c:	687b      	ldr	r3, [r7, #4]
 801f61e:	7c1b      	ldrb	r3, [r3, #16]
 801f620:	2b00      	cmp	r3, #0
 801f622:	d115      	bne.n	801f650 <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801f624:	f44f 7300 	mov.w	r3, #512	; 0x200
 801f628:	2202      	movs	r2, #2
 801f62a:	2101      	movs	r1, #1
 801f62c:	6878      	ldr	r0, [r7, #4]
 801f62e:	f003 fac4 	bl	8022bba <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 801f632:	687b      	ldr	r3, [r7, #4]
 801f634:	2201      	movs	r2, #1
 801f636:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801f63a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801f63e:	2202      	movs	r2, #2
 801f640:	2181      	movs	r1, #129	; 0x81
 801f642:	6878      	ldr	r0, [r7, #4]
 801f644:	f003 fab9 	bl	8022bba <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 801f648:	687b      	ldr	r3, [r7, #4]
 801f64a:	2201      	movs	r2, #1
 801f64c:	871a      	strh	r2, [r3, #56]	; 0x38
 801f64e:	e012      	b.n	801f676 <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801f650:	2340      	movs	r3, #64	; 0x40
 801f652:	2202      	movs	r2, #2
 801f654:	2101      	movs	r1, #1
 801f656:	6878      	ldr	r0, [r7, #4]
 801f658:	f003 faaf 	bl	8022bba <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 801f65c:	687b      	ldr	r3, [r7, #4]
 801f65e:	2201      	movs	r2, #1
 801f660:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801f664:	2340      	movs	r3, #64	; 0x40
 801f666:	2202      	movs	r2, #2
 801f668:	2181      	movs	r1, #129	; 0x81
 801f66a:	6878      	ldr	r0, [r7, #4]
 801f66c:	f003 faa5 	bl	8022bba <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 801f670:	687b      	ldr	r3, [r7, #4]
 801f672:	2201      	movs	r2, #1
 801f674:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 801f676:	6878      	ldr	r0, [r7, #4]
 801f678:	f000 f999 	bl	801f9ae <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 801f67c:	2300      	movs	r3, #0
}
 801f67e:	4618      	mov	r0, r3
 801f680:	3710      	adds	r7, #16
 801f682:	46bd      	mov	sp, r7
 801f684:	bd80      	pop	{r7, pc}

0801f686 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801f686:	b580      	push	{r7, lr}
 801f688:	b082      	sub	sp, #8
 801f68a:	af00      	add	r7, sp, #0
 801f68c:	6078      	str	r0, [r7, #4]
 801f68e:	460b      	mov	r3, r1
 801f690:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 801f692:	2101      	movs	r1, #1
 801f694:	6878      	ldr	r0, [r7, #4]
 801f696:	f003 fab6 	bl	8022c06 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 801f69a:	687b      	ldr	r3, [r7, #4]
 801f69c:	2200      	movs	r2, #0
 801f69e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 801f6a2:	2181      	movs	r1, #129	; 0x81
 801f6a4:	6878      	ldr	r0, [r7, #4]
 801f6a6:	f003 faae 	bl	8022c06 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 801f6aa:	687b      	ldr	r3, [r7, #4]
 801f6ac:	2200      	movs	r2, #0
 801f6ae:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 801f6b0:	687b      	ldr	r3, [r7, #4]
 801f6b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f6b6:	2b00      	cmp	r3, #0
 801f6b8:	d00c      	beq.n	801f6d4 <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 801f6ba:	6878      	ldr	r0, [r7, #4]
 801f6bc:	f000 f9d5 	bl	801fa6a <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassData);
 801f6c0:	687b      	ldr	r3, [r7, #4]
 801f6c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f6c6:	4618      	mov	r0, r3
 801f6c8:	f003 fc16 	bl	8022ef8 <USBD_static_free>
    pdev->pClassData = NULL;
 801f6cc:	687b      	ldr	r3, [r7, #4]
 801f6ce:	2200      	movs	r2, #0
 801f6d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801f6d4:	2300      	movs	r3, #0
}
 801f6d6:	4618      	mov	r0, r3
 801f6d8:	3708      	adds	r7, #8
 801f6da:	46bd      	mov	sp, r7
 801f6dc:	bd80      	pop	{r7, pc}
	...

0801f6e0 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801f6e0:	b580      	push	{r7, lr}
 801f6e2:	b086      	sub	sp, #24
 801f6e4:	af00      	add	r7, sp, #0
 801f6e6:	6078      	str	r0, [r7, #4]
 801f6e8:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f6ea:	687b      	ldr	r3, [r7, #4]
 801f6ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f6f0:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 801f6f2:	2300      	movs	r3, #0
 801f6f4:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 801f6f6:	2300      	movs	r3, #0
 801f6f8:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 801f6fa:	693b      	ldr	r3, [r7, #16]
 801f6fc:	2b00      	cmp	r3, #0
 801f6fe:	d101      	bne.n	801f704 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801f700:	2303      	movs	r3, #3
 801f702:	e0db      	b.n	801f8bc <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801f704:	683b      	ldr	r3, [r7, #0]
 801f706:	781b      	ldrb	r3, [r3, #0]
 801f708:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801f70c:	2b00      	cmp	r3, #0
 801f70e:	d04e      	beq.n	801f7ae <USBD_MSC_Setup+0xce>
 801f710:	2b20      	cmp	r3, #32
 801f712:	f040 80cb 	bne.w	801f8ac <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 801f716:	683b      	ldr	r3, [r7, #0]
 801f718:	785b      	ldrb	r3, [r3, #1]
 801f71a:	2bfe      	cmp	r3, #254	; 0xfe
 801f71c:	d002      	beq.n	801f724 <USBD_MSC_Setup+0x44>
 801f71e:	2bff      	cmp	r3, #255	; 0xff
 801f720:	d025      	beq.n	801f76e <USBD_MSC_Setup+0x8e>
 801f722:	e03c      	b.n	801f79e <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801f724:	683b      	ldr	r3, [r7, #0]
 801f726:	885b      	ldrh	r3, [r3, #2]
 801f728:	2b00      	cmp	r3, #0
 801f72a:	d119      	bne.n	801f760 <USBD_MSC_Setup+0x80>
 801f72c:	683b      	ldr	r3, [r7, #0]
 801f72e:	88db      	ldrh	r3, [r3, #6]
 801f730:	2b01      	cmp	r3, #1
 801f732:	d115      	bne.n	801f760 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 801f734:	683b      	ldr	r3, [r7, #0]
 801f736:	781b      	ldrb	r3, [r3, #0]
 801f738:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801f73a:	2b00      	cmp	r3, #0
 801f73c:	da10      	bge.n	801f760 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 801f73e:	687b      	ldr	r3, [r7, #4]
 801f740:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801f744:	699b      	ldr	r3, [r3, #24]
 801f746:	4798      	blx	r3
 801f748:	4603      	mov	r3, r0
 801f74a:	461a      	mov	r2, r3
 801f74c:	693b      	ldr	r3, [r7, #16]
 801f74e:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 801f750:	693b      	ldr	r3, [r7, #16]
 801f752:	2201      	movs	r2, #1
 801f754:	4619      	mov	r1, r3
 801f756:	6878      	ldr	r0, [r7, #4]
 801f758:	f002 fe3d 	bl	80223d6 <USBD_CtlSendData>
 801f75c:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f75e:	e025      	b.n	801f7ac <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 801f760:	6839      	ldr	r1, [r7, #0]
 801f762:	6878      	ldr	r0, [r7, #4]
 801f764:	f002 fdc6 	bl	80222f4 <USBD_CtlError>
            ret = USBD_FAIL;
 801f768:	2303      	movs	r3, #3
 801f76a:	75fb      	strb	r3, [r7, #23]
          break;
 801f76c:	e01e      	b.n	801f7ac <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801f76e:	683b      	ldr	r3, [r7, #0]
 801f770:	885b      	ldrh	r3, [r3, #2]
 801f772:	2b00      	cmp	r3, #0
 801f774:	d10c      	bne.n	801f790 <USBD_MSC_Setup+0xb0>
 801f776:	683b      	ldr	r3, [r7, #0]
 801f778:	88db      	ldrh	r3, [r3, #6]
 801f77a:	2b00      	cmp	r3, #0
 801f77c:	d108      	bne.n	801f790 <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 801f77e:	683b      	ldr	r3, [r7, #0]
 801f780:	781b      	ldrb	r3, [r3, #0]
 801f782:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801f784:	2b00      	cmp	r3, #0
 801f786:	db03      	blt.n	801f790 <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 801f788:	6878      	ldr	r0, [r7, #4]
 801f78a:	f000 f948 	bl	801fa1e <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f78e:	e00d      	b.n	801f7ac <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 801f790:	6839      	ldr	r1, [r7, #0]
 801f792:	6878      	ldr	r0, [r7, #4]
 801f794:	f002 fdae 	bl	80222f4 <USBD_CtlError>
            ret = USBD_FAIL;
 801f798:	2303      	movs	r3, #3
 801f79a:	75fb      	strb	r3, [r7, #23]
          break;
 801f79c:	e006      	b.n	801f7ac <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801f79e:	6839      	ldr	r1, [r7, #0]
 801f7a0:	6878      	ldr	r0, [r7, #4]
 801f7a2:	f002 fda7 	bl	80222f4 <USBD_CtlError>
          ret = USBD_FAIL;
 801f7a6:	2303      	movs	r3, #3
 801f7a8:	75fb      	strb	r3, [r7, #23]
          break;
 801f7aa:	bf00      	nop
      }
      break;
 801f7ac:	e085      	b.n	801f8ba <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801f7ae:	683b      	ldr	r3, [r7, #0]
 801f7b0:	785b      	ldrb	r3, [r3, #1]
 801f7b2:	2b0b      	cmp	r3, #11
 801f7b4:	d871      	bhi.n	801f89a <USBD_MSC_Setup+0x1ba>
 801f7b6:	a201      	add	r2, pc, #4	; (adr r2, 801f7bc <USBD_MSC_Setup+0xdc>)
 801f7b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f7bc:	0801f7ed 	.word	0x0801f7ed
 801f7c0:	0801f869 	.word	0x0801f869
 801f7c4:	0801f89b 	.word	0x0801f89b
 801f7c8:	0801f89b 	.word	0x0801f89b
 801f7cc:	0801f89b 	.word	0x0801f89b
 801f7d0:	0801f89b 	.word	0x0801f89b
 801f7d4:	0801f89b 	.word	0x0801f89b
 801f7d8:	0801f89b 	.word	0x0801f89b
 801f7dc:	0801f89b 	.word	0x0801f89b
 801f7e0:	0801f89b 	.word	0x0801f89b
 801f7e4:	0801f817 	.word	0x0801f817
 801f7e8:	0801f841 	.word	0x0801f841
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f7ec:	687b      	ldr	r3, [r7, #4]
 801f7ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f7f2:	b2db      	uxtb	r3, r3
 801f7f4:	2b03      	cmp	r3, #3
 801f7f6:	d107      	bne.n	801f808 <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801f7f8:	f107 030e 	add.w	r3, r7, #14
 801f7fc:	2202      	movs	r2, #2
 801f7fe:	4619      	mov	r1, r3
 801f800:	6878      	ldr	r0, [r7, #4]
 801f802:	f002 fde8 	bl	80223d6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f806:	e050      	b.n	801f8aa <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801f808:	6839      	ldr	r1, [r7, #0]
 801f80a:	6878      	ldr	r0, [r7, #4]
 801f80c:	f002 fd72 	bl	80222f4 <USBD_CtlError>
            ret = USBD_FAIL;
 801f810:	2303      	movs	r3, #3
 801f812:	75fb      	strb	r3, [r7, #23]
          break;
 801f814:	e049      	b.n	801f8aa <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f816:	687b      	ldr	r3, [r7, #4]
 801f818:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f81c:	b2db      	uxtb	r3, r3
 801f81e:	2b03      	cmp	r3, #3
 801f820:	d107      	bne.n	801f832 <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 801f822:	693b      	ldr	r3, [r7, #16]
 801f824:	3304      	adds	r3, #4
 801f826:	2201      	movs	r2, #1
 801f828:	4619      	mov	r1, r3
 801f82a:	6878      	ldr	r0, [r7, #4]
 801f82c:	f002 fdd3 	bl	80223d6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f830:	e03b      	b.n	801f8aa <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801f832:	6839      	ldr	r1, [r7, #0]
 801f834:	6878      	ldr	r0, [r7, #4]
 801f836:	f002 fd5d 	bl	80222f4 <USBD_CtlError>
            ret = USBD_FAIL;
 801f83a:	2303      	movs	r3, #3
 801f83c:	75fb      	strb	r3, [r7, #23]
          break;
 801f83e:	e034      	b.n	801f8aa <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f840:	687b      	ldr	r3, [r7, #4]
 801f842:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f846:	b2db      	uxtb	r3, r3
 801f848:	2b03      	cmp	r3, #3
 801f84a:	d106      	bne.n	801f85a <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 801f84c:	683b      	ldr	r3, [r7, #0]
 801f84e:	885b      	ldrh	r3, [r3, #2]
 801f850:	b2db      	uxtb	r3, r3
 801f852:	461a      	mov	r2, r3
 801f854:	693b      	ldr	r3, [r7, #16]
 801f856:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f858:	e027      	b.n	801f8aa <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801f85a:	6839      	ldr	r1, [r7, #0]
 801f85c:	6878      	ldr	r0, [r7, #4]
 801f85e:	f002 fd49 	bl	80222f4 <USBD_CtlError>
            ret = USBD_FAIL;
 801f862:	2303      	movs	r3, #3
 801f864:	75fb      	strb	r3, [r7, #23]
          break;
 801f866:	e020      	b.n	801f8aa <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f868:	687b      	ldr	r3, [r7, #4]
 801f86a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f86e:	b2db      	uxtb	r3, r3
 801f870:	2b03      	cmp	r3, #3
 801f872:	d119      	bne.n	801f8a8 <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 801f874:	683b      	ldr	r3, [r7, #0]
 801f876:	885b      	ldrh	r3, [r3, #2]
 801f878:	2b00      	cmp	r3, #0
 801f87a:	d115      	bne.n	801f8a8 <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 801f87c:	683b      	ldr	r3, [r7, #0]
 801f87e:	889b      	ldrh	r3, [r3, #4]
 801f880:	b2db      	uxtb	r3, r3
 801f882:	4619      	mov	r1, r3
 801f884:	6878      	ldr	r0, [r7, #4]
 801f886:	f003 f9dd 	bl	8022c44 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 801f88a:	683b      	ldr	r3, [r7, #0]
 801f88c:	889b      	ldrh	r3, [r3, #4]
 801f88e:	b2db      	uxtb	r3, r3
 801f890:	4619      	mov	r1, r3
 801f892:	6878      	ldr	r0, [r7, #4]
 801f894:	f000 fa82 	bl	801fd9c <MSC_BOT_CplClrFeature>
            }
          }
          break;
 801f898:	e006      	b.n	801f8a8 <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 801f89a:	6839      	ldr	r1, [r7, #0]
 801f89c:	6878      	ldr	r0, [r7, #4]
 801f89e:	f002 fd29 	bl	80222f4 <USBD_CtlError>
          ret = USBD_FAIL;
 801f8a2:	2303      	movs	r3, #3
 801f8a4:	75fb      	strb	r3, [r7, #23]
          break;
 801f8a6:	e000      	b.n	801f8aa <USBD_MSC_Setup+0x1ca>
          break;
 801f8a8:	bf00      	nop
      }
      break;
 801f8aa:	e006      	b.n	801f8ba <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 801f8ac:	6839      	ldr	r1, [r7, #0]
 801f8ae:	6878      	ldr	r0, [r7, #4]
 801f8b0:	f002 fd20 	bl	80222f4 <USBD_CtlError>
      ret = USBD_FAIL;
 801f8b4:	2303      	movs	r3, #3
 801f8b6:	75fb      	strb	r3, [r7, #23]
      break;
 801f8b8:	bf00      	nop
  }

  return (uint8_t)ret;
 801f8ba:	7dfb      	ldrb	r3, [r7, #23]
}
 801f8bc:	4618      	mov	r0, r3
 801f8be:	3718      	adds	r7, #24
 801f8c0:	46bd      	mov	sp, r7
 801f8c2:	bd80      	pop	{r7, pc}

0801f8c4 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f8c4:	b580      	push	{r7, lr}
 801f8c6:	b082      	sub	sp, #8
 801f8c8:	af00      	add	r7, sp, #0
 801f8ca:	6078      	str	r0, [r7, #4]
 801f8cc:	460b      	mov	r3, r1
 801f8ce:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 801f8d0:	78fb      	ldrb	r3, [r7, #3]
 801f8d2:	4619      	mov	r1, r3
 801f8d4:	6878      	ldr	r0, [r7, #4]
 801f8d6:	f000 f8dc 	bl	801fa92 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 801f8da:	2300      	movs	r3, #0
}
 801f8dc:	4618      	mov	r0, r3
 801f8de:	3708      	adds	r7, #8
 801f8e0:	46bd      	mov	sp, r7
 801f8e2:	bd80      	pop	{r7, pc}

0801f8e4 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f8e4:	b580      	push	{r7, lr}
 801f8e6:	b082      	sub	sp, #8
 801f8e8:	af00      	add	r7, sp, #0
 801f8ea:	6078      	str	r0, [r7, #4]
 801f8ec:	460b      	mov	r3, r1
 801f8ee:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 801f8f0:	78fb      	ldrb	r3, [r7, #3]
 801f8f2:	4619      	mov	r1, r3
 801f8f4:	6878      	ldr	r0, [r7, #4]
 801f8f6:	f000 f902 	bl	801fafe <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 801f8fa:	2300      	movs	r3, #0
}
 801f8fc:	4618      	mov	r0, r3
 801f8fe:	3708      	adds	r7, #8
 801f900:	46bd      	mov	sp, r7
 801f902:	bd80      	pop	{r7, pc}

0801f904 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 801f904:	b480      	push	{r7}
 801f906:	b083      	sub	sp, #12
 801f908:	af00      	add	r7, sp, #0
 801f90a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 801f90c:	687b      	ldr	r3, [r7, #4]
 801f90e:	2220      	movs	r2, #32
 801f910:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 801f912:	4b03      	ldr	r3, [pc, #12]	; (801f920 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 801f914:	4618      	mov	r0, r3
 801f916:	370c      	adds	r7, #12
 801f918:	46bd      	mov	sp, r7
 801f91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f91e:	4770      	bx	lr
 801f920:	200005d0 	.word	0x200005d0

0801f924 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 801f924:	b480      	push	{r7}
 801f926:	b083      	sub	sp, #12
 801f928:	af00      	add	r7, sp, #0
 801f92a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 801f92c:	687b      	ldr	r3, [r7, #4]
 801f92e:	2220      	movs	r2, #32
 801f930:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 801f932:	4b03      	ldr	r3, [pc, #12]	; (801f940 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 801f934:	4618      	mov	r0, r3
 801f936:	370c      	adds	r7, #12
 801f938:	46bd      	mov	sp, r7
 801f93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f93e:	4770      	bx	lr
 801f940:	200005f0 	.word	0x200005f0

0801f944 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801f944:	b480      	push	{r7}
 801f946:	b083      	sub	sp, #12
 801f948:	af00      	add	r7, sp, #0
 801f94a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 801f94c:	687b      	ldr	r3, [r7, #4]
 801f94e:	2220      	movs	r2, #32
 801f950:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 801f952:	4b03      	ldr	r3, [pc, #12]	; (801f960 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 801f954:	4618      	mov	r0, r3
 801f956:	370c      	adds	r7, #12
 801f958:	46bd      	mov	sp, r7
 801f95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f95e:	4770      	bx	lr
 801f960:	20000610 	.word	0x20000610

0801f964 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801f964:	b480      	push	{r7}
 801f966:	b083      	sub	sp, #12
 801f968:	af00      	add	r7, sp, #0
 801f96a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 801f96c:	687b      	ldr	r3, [r7, #4]
 801f96e:	220a      	movs	r2, #10
 801f970:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 801f972:	4b03      	ldr	r3, [pc, #12]	; (801f980 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 801f974:	4618      	mov	r0, r3
 801f976:	370c      	adds	r7, #12
 801f978:	46bd      	mov	sp, r7
 801f97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f97e:	4770      	bx	lr
 801f980:	20000630 	.word	0x20000630

0801f984 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 801f984:	b480      	push	{r7}
 801f986:	b083      	sub	sp, #12
 801f988:	af00      	add	r7, sp, #0
 801f98a:	6078      	str	r0, [r7, #4]
 801f98c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801f98e:	683b      	ldr	r3, [r7, #0]
 801f990:	2b00      	cmp	r3, #0
 801f992:	d101      	bne.n	801f998 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801f994:	2303      	movs	r3, #3
 801f996:	e004      	b.n	801f9a2 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 801f998:	687b      	ldr	r3, [r7, #4]
 801f99a:	683a      	ldr	r2, [r7, #0]
 801f99c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 801f9a0:	2300      	movs	r3, #0
}
 801f9a2:	4618      	mov	r0, r3
 801f9a4:	370c      	adds	r7, #12
 801f9a6:	46bd      	mov	sp, r7
 801f9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9ac:	4770      	bx	lr

0801f9ae <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 801f9ae:	b580      	push	{r7, lr}
 801f9b0:	b084      	sub	sp, #16
 801f9b2:	af00      	add	r7, sp, #0
 801f9b4:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f9b6:	687b      	ldr	r3, [r7, #4]
 801f9b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f9bc:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f9be:	68fb      	ldr	r3, [r7, #12]
 801f9c0:	2b00      	cmp	r3, #0
 801f9c2:	d028      	beq.n	801fa16 <MSC_BOT_Init+0x68>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 801f9c4:	68fb      	ldr	r3, [r7, #12]
 801f9c6:	2200      	movs	r2, #0
 801f9c8:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 801f9ca:	68fb      	ldr	r3, [r7, #12]
 801f9cc:	2200      	movs	r2, #0
 801f9ce:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 801f9d0:	68fb      	ldr	r3, [r7, #12]
 801f9d2:	2200      	movs	r2, #0
 801f9d4:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 801f9d8:	68fb      	ldr	r3, [r7, #12]
 801f9da:	2200      	movs	r2, #0
 801f9dc:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801f9e0:	68fb      	ldr	r3, [r7, #12]
 801f9e2:	2200      	movs	r2, #0
 801f9e4:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 801f9e8:	687b      	ldr	r3, [r7, #4]
 801f9ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801f9ee:	681b      	ldr	r3, [r3, #0]
 801f9f0:	2000      	movs	r0, #0
 801f9f2:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 801f9f4:	2101      	movs	r1, #1
 801f9f6:	6878      	ldr	r0, [r7, #4]
 801f9f8:	f003 f924 	bl	8022c44 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 801f9fc:	2181      	movs	r1, #129	; 0x81
 801f9fe:	6878      	ldr	r0, [r7, #4]
 801fa00:	f003 f920 	bl	8022c44 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 801fa04:	68fb      	ldr	r3, [r7, #12]
 801fa06:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801fa0a:	231f      	movs	r3, #31
 801fa0c:	2101      	movs	r1, #1
 801fa0e:	6878      	ldr	r0, [r7, #4]
 801fa10:	f003 f9e1 	bl	8022dd6 <USBD_LL_PrepareReceive>
 801fa14:	e000      	b.n	801fa18 <MSC_BOT_Init+0x6a>
    return;
 801fa16:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801fa18:	3710      	adds	r7, #16
 801fa1a:	46bd      	mov	sp, r7
 801fa1c:	bd80      	pop	{r7, pc}

0801fa1e <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 801fa1e:	b580      	push	{r7, lr}
 801fa20:	b084      	sub	sp, #16
 801fa22:	af00      	add	r7, sp, #0
 801fa24:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fa26:	687b      	ldr	r3, [r7, #4]
 801fa28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fa2c:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801fa2e:	68fb      	ldr	r3, [r7, #12]
 801fa30:	2b00      	cmp	r3, #0
 801fa32:	d016      	beq.n	801fa62 <MSC_BOT_Reset+0x44>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 801fa34:	68fb      	ldr	r3, [r7, #12]
 801fa36:	2200      	movs	r2, #0
 801fa38:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 801fa3a:	68fb      	ldr	r3, [r7, #12]
 801fa3c:	2201      	movs	r2, #1
 801fa3e:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 801fa40:	2181      	movs	r1, #129	; 0x81
 801fa42:	6878      	ldr	r0, [r7, #4]
 801fa44:	f003 f93c 	bl	8022cc0 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 801fa48:	2101      	movs	r1, #1
 801fa4a:	6878      	ldr	r0, [r7, #4]
 801fa4c:	f003 f938 	bl	8022cc0 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 801fa50:	68fb      	ldr	r3, [r7, #12]
 801fa52:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801fa56:	231f      	movs	r3, #31
 801fa58:	2101      	movs	r1, #1
 801fa5a:	6878      	ldr	r0, [r7, #4]
 801fa5c:	f003 f9bb 	bl	8022dd6 <USBD_LL_PrepareReceive>
 801fa60:	e000      	b.n	801fa64 <MSC_BOT_Reset+0x46>
    return;
 801fa62:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801fa64:	3710      	adds	r7, #16
 801fa66:	46bd      	mov	sp, r7
 801fa68:	bd80      	pop	{r7, pc}

0801fa6a <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 801fa6a:	b480      	push	{r7}
 801fa6c:	b085      	sub	sp, #20
 801fa6e:	af00      	add	r7, sp, #0
 801fa70:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fa72:	687b      	ldr	r3, [r7, #4]
 801fa74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fa78:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 801fa7a:	68fb      	ldr	r3, [r7, #12]
 801fa7c:	2b00      	cmp	r3, #0
 801fa7e:	d002      	beq.n	801fa86 <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 801fa80:	68fb      	ldr	r3, [r7, #12]
 801fa82:	2200      	movs	r2, #0
 801fa84:	721a      	strb	r2, [r3, #8]
  }
}
 801fa86:	bf00      	nop
 801fa88:	3714      	adds	r7, #20
 801fa8a:	46bd      	mov	sp, r7
 801fa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa90:	4770      	bx	lr

0801fa92 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801fa92:	b580      	push	{r7, lr}
 801fa94:	b084      	sub	sp, #16
 801fa96:	af00      	add	r7, sp, #0
 801fa98:	6078      	str	r0, [r7, #4]
 801fa9a:	460b      	mov	r3, r1
 801fa9c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fa9e:	687b      	ldr	r3, [r7, #4]
 801faa0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801faa4:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801faa6:	68fb      	ldr	r3, [r7, #12]
 801faa8:	2b00      	cmp	r3, #0
 801faaa:	d020      	beq.n	801faee <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 801faac:	68fb      	ldr	r3, [r7, #12]
 801faae:	7a1b      	ldrb	r3, [r3, #8]
 801fab0:	2b02      	cmp	r3, #2
 801fab2:	d005      	beq.n	801fac0 <MSC_BOT_DataIn+0x2e>
 801fab4:	2b02      	cmp	r3, #2
 801fab6:	db1c      	blt.n	801faf2 <MSC_BOT_DataIn+0x60>
 801fab8:	3b03      	subs	r3, #3
 801faba:	2b01      	cmp	r3, #1
 801fabc:	d819      	bhi.n	801faf2 <MSC_BOT_DataIn+0x60>
 801fabe:	e011      	b.n	801fae4 <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801fac0:	68fb      	ldr	r3, [r7, #12]
 801fac2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801fac6:	68fb      	ldr	r3, [r7, #12]
 801fac8:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801facc:	461a      	mov	r2, r3
 801face:	6878      	ldr	r0, [r7, #4]
 801fad0:	f000 f992 	bl	801fdf8 <SCSI_ProcessCmd>
 801fad4:	4603      	mov	r3, r0
 801fad6:	2b00      	cmp	r3, #0
 801fad8:	da0d      	bge.n	801faf6 <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801fada:	2101      	movs	r1, #1
 801fadc:	6878      	ldr	r0, [r7, #4]
 801fade:	f000 f8fb 	bl	801fcd8 <MSC_BOT_SendCSW>
      }
      break;
 801fae2:	e008      	b.n	801faf6 <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801fae4:	2100      	movs	r1, #0
 801fae6:	6878      	ldr	r0, [r7, #4]
 801fae8:	f000 f8f6 	bl	801fcd8 <MSC_BOT_SendCSW>
      break;
 801faec:	e004      	b.n	801faf8 <MSC_BOT_DataIn+0x66>
    return;
 801faee:	bf00      	nop
 801faf0:	e002      	b.n	801faf8 <MSC_BOT_DataIn+0x66>

    default:
      break;
 801faf2:	bf00      	nop
 801faf4:	e000      	b.n	801faf8 <MSC_BOT_DataIn+0x66>
      break;
 801faf6:	bf00      	nop
  }
}
 801faf8:	3710      	adds	r7, #16
 801fafa:	46bd      	mov	sp, r7
 801fafc:	bd80      	pop	{r7, pc}

0801fafe <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801fafe:	b580      	push	{r7, lr}
 801fb00:	b084      	sub	sp, #16
 801fb02:	af00      	add	r7, sp, #0
 801fb04:	6078      	str	r0, [r7, #4]
 801fb06:	460b      	mov	r3, r1
 801fb08:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fb0a:	687b      	ldr	r3, [r7, #4]
 801fb0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fb10:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801fb12:	68fb      	ldr	r3, [r7, #12]
 801fb14:	2b00      	cmp	r3, #0
 801fb16:	d01c      	beq.n	801fb52 <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 801fb18:	68fb      	ldr	r3, [r7, #12]
 801fb1a:	7a1b      	ldrb	r3, [r3, #8]
 801fb1c:	2b00      	cmp	r3, #0
 801fb1e:	d002      	beq.n	801fb26 <MSC_BOT_DataOut+0x28>
 801fb20:	2b01      	cmp	r3, #1
 801fb22:	d004      	beq.n	801fb2e <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 801fb24:	e018      	b.n	801fb58 <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 801fb26:	6878      	ldr	r0, [r7, #4]
 801fb28:	f000 f81a 	bl	801fb60 <MSC_BOT_CBW_Decode>
      break;
 801fb2c:	e014      	b.n	801fb58 <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801fb2e:	68fb      	ldr	r3, [r7, #12]
 801fb30:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801fb34:	68fb      	ldr	r3, [r7, #12]
 801fb36:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801fb3a:	461a      	mov	r2, r3
 801fb3c:	6878      	ldr	r0, [r7, #4]
 801fb3e:	f000 f95b 	bl	801fdf8 <SCSI_ProcessCmd>
 801fb42:	4603      	mov	r3, r0
 801fb44:	2b00      	cmp	r3, #0
 801fb46:	da06      	bge.n	801fb56 <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801fb48:	2101      	movs	r1, #1
 801fb4a:	6878      	ldr	r0, [r7, #4]
 801fb4c:	f000 f8c4 	bl	801fcd8 <MSC_BOT_SendCSW>
      break;
 801fb50:	e001      	b.n	801fb56 <MSC_BOT_DataOut+0x58>
    return;
 801fb52:	bf00      	nop
 801fb54:	e000      	b.n	801fb58 <MSC_BOT_DataOut+0x5a>
      break;
 801fb56:	bf00      	nop
  }
}
 801fb58:	3710      	adds	r7, #16
 801fb5a:	46bd      	mov	sp, r7
 801fb5c:	bd80      	pop	{r7, pc}
	...

0801fb60 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 801fb60:	b580      	push	{r7, lr}
 801fb62:	b084      	sub	sp, #16
 801fb64:	af00      	add	r7, sp, #0
 801fb66:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fb68:	687b      	ldr	r3, [r7, #4]
 801fb6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fb6e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801fb70:	68fb      	ldr	r3, [r7, #12]
 801fb72:	2b00      	cmp	r3, #0
 801fb74:	d077      	beq.n	801fc66 <MSC_BOT_CBW_Decode+0x106>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 801fb76:	68fb      	ldr	r3, [r7, #12]
 801fb78:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 801fb7c:	68fb      	ldr	r3, [r7, #12]
 801fb7e:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 801fb82:	68fb      	ldr	r3, [r7, #12]
 801fb84:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801fb88:	68fb      	ldr	r3, [r7, #12]
 801fb8a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 801fb8e:	2101      	movs	r1, #1
 801fb90:	6878      	ldr	r0, [r7, #4]
 801fb92:	f003 f941 	bl	8022e18 <USBD_LL_GetRxDataSize>
 801fb96:	4603      	mov	r3, r0
 801fb98:	2b1f      	cmp	r3, #31
 801fb9a:	d114      	bne.n	801fbc6 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801fb9c:	68fb      	ldr	r3, [r7, #12]
 801fb9e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 801fba2:	4a34      	ldr	r2, [pc, #208]	; (801fc74 <MSC_BOT_CBW_Decode+0x114>)
 801fba4:	4293      	cmp	r3, r2
 801fba6:	d10e      	bne.n	801fbc6 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801fba8:	68fb      	ldr	r3, [r7, #12]
 801fbaa:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801fbae:	2b01      	cmp	r3, #1
 801fbb0:	d809      	bhi.n	801fbc6 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801fbb2:	68fb      	ldr	r3, [r7, #12]
 801fbb4:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 801fbb8:	2b00      	cmp	r3, #0
 801fbba:	d004      	beq.n	801fbc6 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bCBLength > 16U))
 801fbbc:	68fb      	ldr	r3, [r7, #12]
 801fbbe:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801fbc2:	2b10      	cmp	r3, #16
 801fbc4:	d90e      	bls.n	801fbe4 <MSC_BOT_CBW_Decode+0x84>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801fbc6:	68fb      	ldr	r3, [r7, #12]
 801fbc8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801fbcc:	2320      	movs	r3, #32
 801fbce:	2205      	movs	r2, #5
 801fbd0:	6878      	ldr	r0, [r7, #4]
 801fbd2:	f000 fdbc 	bl	802074e <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801fbd6:	68fb      	ldr	r3, [r7, #12]
 801fbd8:	2202      	movs	r2, #2
 801fbda:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 801fbdc:	6878      	ldr	r0, [r7, #4]
 801fbde:	f000 f8ab 	bl	801fd38 <MSC_BOT_Abort>
 801fbe2:	e043      	b.n	801fc6c <MSC_BOT_CBW_Decode+0x10c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801fbe4:	68fb      	ldr	r3, [r7, #12]
 801fbe6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801fbea:	68fb      	ldr	r3, [r7, #12]
 801fbec:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801fbf0:	461a      	mov	r2, r3
 801fbf2:	6878      	ldr	r0, [r7, #4]
 801fbf4:	f000 f900 	bl	801fdf8 <SCSI_ProcessCmd>
 801fbf8:	4603      	mov	r3, r0
 801fbfa:	2b00      	cmp	r3, #0
 801fbfc:	da0c      	bge.n	801fc18 <MSC_BOT_CBW_Decode+0xb8>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 801fbfe:	68fb      	ldr	r3, [r7, #12]
 801fc00:	7a1b      	ldrb	r3, [r3, #8]
 801fc02:	2b05      	cmp	r3, #5
 801fc04:	d104      	bne.n	801fc10 <MSC_BOT_CBW_Decode+0xb0>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801fc06:	2101      	movs	r1, #1
 801fc08:	6878      	ldr	r0, [r7, #4]
 801fc0a:	f000 f865 	bl	801fcd8 <MSC_BOT_SendCSW>
 801fc0e:	e02d      	b.n	801fc6c <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801fc10:	6878      	ldr	r0, [r7, #4]
 801fc12:	f000 f891 	bl	801fd38 <MSC_BOT_Abort>
 801fc16:	e029      	b.n	801fc6c <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801fc18:	68fb      	ldr	r3, [r7, #12]
 801fc1a:	7a1b      	ldrb	r3, [r3, #8]
 801fc1c:	2b02      	cmp	r3, #2
 801fc1e:	d024      	beq.n	801fc6a <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801fc20:	68fb      	ldr	r3, [r7, #12]
 801fc22:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801fc24:	2b01      	cmp	r3, #1
 801fc26:	d020      	beq.n	801fc6a <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 801fc28:	68fb      	ldr	r3, [r7, #12]
 801fc2a:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801fc2c:	2b03      	cmp	r3, #3
 801fc2e:	d01c      	beq.n	801fc6a <MSC_BOT_CBW_Decode+0x10a>
    {
      if (hmsc->bot_data_length > 0U)
 801fc30:	68fb      	ldr	r3, [r7, #12]
 801fc32:	68db      	ldr	r3, [r3, #12]
 801fc34:	2b00      	cmp	r3, #0
 801fc36:	d009      	beq.n	801fc4c <MSC_BOT_CBW_Decode+0xec>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 801fc38:	68fb      	ldr	r3, [r7, #12]
 801fc3a:	f103 0110 	add.w	r1, r3, #16
 801fc3e:	68fb      	ldr	r3, [r7, #12]
 801fc40:	68db      	ldr	r3, [r3, #12]
 801fc42:	461a      	mov	r2, r3
 801fc44:	6878      	ldr	r0, [r7, #4]
 801fc46:	f000 f817 	bl	801fc78 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 801fc4a:	e00f      	b.n	801fc6c <MSC_BOT_CBW_Decode+0x10c>
      }
      else if (hmsc->bot_data_length == 0U)
 801fc4c:	68fb      	ldr	r3, [r7, #12]
 801fc4e:	68db      	ldr	r3, [r3, #12]
 801fc50:	2b00      	cmp	r3, #0
 801fc52:	d104      	bne.n	801fc5e <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801fc54:	2100      	movs	r1, #0
 801fc56:	6878      	ldr	r0, [r7, #4]
 801fc58:	f000 f83e 	bl	801fcd8 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 801fc5c:	e006      	b.n	801fc6c <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801fc5e:	6878      	ldr	r0, [r7, #4]
 801fc60:	f000 f86a 	bl	801fd38 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 801fc64:	e002      	b.n	801fc6c <MSC_BOT_CBW_Decode+0x10c>
    return;
 801fc66:	bf00      	nop
 801fc68:	e000      	b.n	801fc6c <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    else
    {
      return;
 801fc6a:	bf00      	nop
    }
  }
}
 801fc6c:	3710      	adds	r7, #16
 801fc6e:	46bd      	mov	sp, r7
 801fc70:	bd80      	pop	{r7, pc}
 801fc72:	bf00      	nop
 801fc74:	43425355 	.word	0x43425355

0801fc78 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 801fc78:	b580      	push	{r7, lr}
 801fc7a:	b086      	sub	sp, #24
 801fc7c:	af00      	add	r7, sp, #0
 801fc7e:	60f8      	str	r0, [r7, #12]
 801fc80:	60b9      	str	r1, [r7, #8]
 801fc82:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fc84:	68fb      	ldr	r3, [r7, #12]
 801fc86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fc8a:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 801fc8c:	697b      	ldr	r3, [r7, #20]
 801fc8e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801fc92:	687a      	ldr	r2, [r7, #4]
 801fc94:	4293      	cmp	r3, r2
 801fc96:	bf28      	it	cs
 801fc98:	4613      	movcs	r3, r2
 801fc9a:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801fc9c:	697b      	ldr	r3, [r7, #20]
 801fc9e:	2b00      	cmp	r3, #0
 801fca0:	d015      	beq.n	801fcce <MSC_BOT_SendData+0x56>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 801fca2:	697b      	ldr	r3, [r7, #20]
 801fca4:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 801fca8:	687b      	ldr	r3, [r7, #4]
 801fcaa:	1ad2      	subs	r2, r2, r3
 801fcac:	697b      	ldr	r3, [r7, #20]
 801fcae:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 801fcb2:	697b      	ldr	r3, [r7, #20]
 801fcb4:	2200      	movs	r2, #0
 801fcb6:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 801fcba:	697b      	ldr	r3, [r7, #20]
 801fcbc:	2204      	movs	r2, #4
 801fcbe:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 801fcc0:	693b      	ldr	r3, [r7, #16]
 801fcc2:	68ba      	ldr	r2, [r7, #8]
 801fcc4:	2181      	movs	r1, #129	; 0x81
 801fcc6:	68f8      	ldr	r0, [r7, #12]
 801fcc8:	f003 f864 	bl	8022d94 <USBD_LL_Transmit>
 801fccc:	e000      	b.n	801fcd0 <MSC_BOT_SendData+0x58>
    return;
 801fcce:	bf00      	nop
}
 801fcd0:	3718      	adds	r7, #24
 801fcd2:	46bd      	mov	sp, r7
 801fcd4:	bd80      	pop	{r7, pc}
	...

0801fcd8 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 801fcd8:	b580      	push	{r7, lr}
 801fcda:	b084      	sub	sp, #16
 801fcdc:	af00      	add	r7, sp, #0
 801fcde:	6078      	str	r0, [r7, #4]
 801fce0:	460b      	mov	r3, r1
 801fce2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fce4:	687b      	ldr	r3, [r7, #4]
 801fce6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fcea:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801fcec:	68fb      	ldr	r3, [r7, #12]
 801fcee:	2b00      	cmp	r3, #0
 801fcf0:	d01b      	beq.n	801fd2a <MSC_BOT_SendCSW+0x52>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 801fcf2:	68fb      	ldr	r3, [r7, #12]
 801fcf4:	4a0f      	ldr	r2, [pc, #60]	; (801fd34 <MSC_BOT_SendCSW+0x5c>)
 801fcf6:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 801fcfa:	68fb      	ldr	r3, [r7, #12]
 801fcfc:	78fa      	ldrb	r2, [r7, #3]
 801fcfe:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 801fd02:	68fb      	ldr	r3, [r7, #12]
 801fd04:	2200      	movs	r2, #0
 801fd06:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 801fd08:	68fb      	ldr	r3, [r7, #12]
 801fd0a:	f503 720c 	add.w	r2, r3, #560	; 0x230
 801fd0e:	230d      	movs	r3, #13
 801fd10:	2181      	movs	r1, #129	; 0x81
 801fd12:	6878      	ldr	r0, [r7, #4]
 801fd14:	f003 f83e 	bl	8022d94 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 801fd18:	68fb      	ldr	r3, [r7, #12]
 801fd1a:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801fd1e:	231f      	movs	r3, #31
 801fd20:	2101      	movs	r1, #1
 801fd22:	6878      	ldr	r0, [r7, #4]
 801fd24:	f003 f857 	bl	8022dd6 <USBD_LL_PrepareReceive>
 801fd28:	e000      	b.n	801fd2c <MSC_BOT_SendCSW+0x54>
    return;
 801fd2a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801fd2c:	3710      	adds	r7, #16
 801fd2e:	46bd      	mov	sp, r7
 801fd30:	bd80      	pop	{r7, pc}
 801fd32:	bf00      	nop
 801fd34:	53425355 	.word	0x53425355

0801fd38 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 801fd38:	b580      	push	{r7, lr}
 801fd3a:	b084      	sub	sp, #16
 801fd3c:	af00      	add	r7, sp, #0
 801fd3e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fd40:	687b      	ldr	r3, [r7, #4]
 801fd42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fd46:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801fd48:	68fb      	ldr	r3, [r7, #12]
 801fd4a:	2b00      	cmp	r3, #0
 801fd4c:	d022      	beq.n	801fd94 <MSC_BOT_Abort+0x5c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 801fd4e:	68fb      	ldr	r3, [r7, #12]
 801fd50:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801fd54:	2b00      	cmp	r3, #0
 801fd56:	d10c      	bne.n	801fd72 <MSC_BOT_Abort+0x3a>
      (hmsc->cbw.dDataLength != 0U) &&
 801fd58:	68fb      	ldr	r3, [r7, #12]
 801fd5a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 801fd5e:	2b00      	cmp	r3, #0
 801fd60:	d007      	beq.n	801fd72 <MSC_BOT_Abort+0x3a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 801fd62:	68fb      	ldr	r3, [r7, #12]
 801fd64:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 801fd66:	2b00      	cmp	r3, #0
 801fd68:	d103      	bne.n	801fd72 <MSC_BOT_Abort+0x3a>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 801fd6a:	2101      	movs	r1, #1
 801fd6c:	6878      	ldr	r0, [r7, #4]
 801fd6e:	f002 ff88 	bl	8022c82 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 801fd72:	2181      	movs	r1, #129	; 0x81
 801fd74:	6878      	ldr	r0, [r7, #4]
 801fd76:	f002 ff84 	bl	8022c82 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 801fd7a:	68fb      	ldr	r3, [r7, #12]
 801fd7c:	7a5b      	ldrb	r3, [r3, #9]
 801fd7e:	2b02      	cmp	r3, #2
 801fd80:	d109      	bne.n	801fd96 <MSC_BOT_Abort+0x5e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 801fd82:	2181      	movs	r1, #129	; 0x81
 801fd84:	6878      	ldr	r0, [r7, #4]
 801fd86:	f002 ff7c 	bl	8022c82 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 801fd8a:	2101      	movs	r1, #1
 801fd8c:	6878      	ldr	r0, [r7, #4]
 801fd8e:	f002 ff78 	bl	8022c82 <USBD_LL_StallEP>
 801fd92:	e000      	b.n	801fd96 <MSC_BOT_Abort+0x5e>
    return;
 801fd94:	bf00      	nop
  }
}
 801fd96:	3710      	adds	r7, #16
 801fd98:	46bd      	mov	sp, r7
 801fd9a:	bd80      	pop	{r7, pc}

0801fd9c <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801fd9c:	b580      	push	{r7, lr}
 801fd9e:	b084      	sub	sp, #16
 801fda0:	af00      	add	r7, sp, #0
 801fda2:	6078      	str	r0, [r7, #4]
 801fda4:	460b      	mov	r3, r1
 801fda6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fda8:	687b      	ldr	r3, [r7, #4]
 801fdaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fdae:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801fdb0:	68fb      	ldr	r3, [r7, #12]
 801fdb2:	2b00      	cmp	r3, #0
 801fdb4:	d019      	beq.n	801fdea <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 801fdb6:	68fb      	ldr	r3, [r7, #12]
 801fdb8:	7a5b      	ldrb	r3, [r3, #9]
 801fdba:	2b02      	cmp	r3, #2
 801fdbc:	d108      	bne.n	801fdd0 <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 801fdbe:	2181      	movs	r1, #129	; 0x81
 801fdc0:	6878      	ldr	r0, [r7, #4]
 801fdc2:	f002 ff5e 	bl	8022c82 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 801fdc6:	2101      	movs	r1, #1
 801fdc8:	6878      	ldr	r0, [r7, #4]
 801fdca:	f002 ff5a 	bl	8022c82 <USBD_LL_StallEP>
 801fdce:	e00f      	b.n	801fdf0 <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 801fdd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801fdd4:	2b00      	cmp	r3, #0
 801fdd6:	da0a      	bge.n	801fdee <MSC_BOT_CplClrFeature+0x52>
 801fdd8:	68fb      	ldr	r3, [r7, #12]
 801fdda:	7a5b      	ldrb	r3, [r3, #9]
 801fddc:	2b01      	cmp	r3, #1
 801fdde:	d006      	beq.n	801fdee <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801fde0:	2101      	movs	r1, #1
 801fde2:	6878      	ldr	r0, [r7, #4]
 801fde4:	f7ff ff78 	bl	801fcd8 <MSC_BOT_SendCSW>
 801fde8:	e002      	b.n	801fdf0 <MSC_BOT_CplClrFeature+0x54>
    return;
 801fdea:	bf00      	nop
 801fdec:	e000      	b.n	801fdf0 <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 801fdee:	bf00      	nop
  }
}
 801fdf0:	3710      	adds	r7, #16
 801fdf2:	46bd      	mov	sp, r7
 801fdf4:	bd80      	pop	{r7, pc}
	...

0801fdf8 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 801fdf8:	b580      	push	{r7, lr}
 801fdfa:	b086      	sub	sp, #24
 801fdfc:	af00      	add	r7, sp, #0
 801fdfe:	60f8      	str	r0, [r7, #12]
 801fe00:	460b      	mov	r3, r1
 801fe02:	607a      	str	r2, [r7, #4]
 801fe04:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fe06:	68fb      	ldr	r3, [r7, #12]
 801fe08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fe0c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801fe0e:	693b      	ldr	r3, [r7, #16]
 801fe10:	2b00      	cmp	r3, #0
 801fe12:	d102      	bne.n	801fe1a <SCSI_ProcessCmd+0x22>
  {
    return -1;
 801fe14:	f04f 33ff 	mov.w	r3, #4294967295
 801fe18:	e168      	b.n	80200ec <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 801fe1a:	687b      	ldr	r3, [r7, #4]
 801fe1c:	781b      	ldrb	r3, [r3, #0]
 801fe1e:	2baa      	cmp	r3, #170	; 0xaa
 801fe20:	f000 8144 	beq.w	80200ac <SCSI_ProcessCmd+0x2b4>
 801fe24:	2baa      	cmp	r3, #170	; 0xaa
 801fe26:	f300 8153 	bgt.w	80200d0 <SCSI_ProcessCmd+0x2d8>
 801fe2a:	2ba8      	cmp	r3, #168	; 0xa8
 801fe2c:	f000 812c 	beq.w	8020088 <SCSI_ProcessCmd+0x290>
 801fe30:	2ba8      	cmp	r3, #168	; 0xa8
 801fe32:	f300 814d 	bgt.w	80200d0 <SCSI_ProcessCmd+0x2d8>
 801fe36:	2b5a      	cmp	r3, #90	; 0x5a
 801fe38:	f300 80c0 	bgt.w	801ffbc <SCSI_ProcessCmd+0x1c4>
 801fe3c:	2b00      	cmp	r3, #0
 801fe3e:	f2c0 8147 	blt.w	80200d0 <SCSI_ProcessCmd+0x2d8>
 801fe42:	2b5a      	cmp	r3, #90	; 0x5a
 801fe44:	f200 8144 	bhi.w	80200d0 <SCSI_ProcessCmd+0x2d8>
 801fe48:	a201      	add	r2, pc, #4	; (adr r2, 801fe50 <SCSI_ProcessCmd+0x58>)
 801fe4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fe4e:	bf00      	nop
 801fe50:	0801ffc3 	.word	0x0801ffc3
 801fe54:	080200d1 	.word	0x080200d1
 801fe58:	080200d1 	.word	0x080200d1
 801fe5c:	0801ffd5 	.word	0x0801ffd5
 801fe60:	080200d1 	.word	0x080200d1
 801fe64:	080200d1 	.word	0x080200d1
 801fe68:	080200d1 	.word	0x080200d1
 801fe6c:	080200d1 	.word	0x080200d1
 801fe70:	080200d1 	.word	0x080200d1
 801fe74:	080200d1 	.word	0x080200d1
 801fe78:	080200d1 	.word	0x080200d1
 801fe7c:	080200d1 	.word	0x080200d1
 801fe80:	080200d1 	.word	0x080200d1
 801fe84:	080200d1 	.word	0x080200d1
 801fe88:	080200d1 	.word	0x080200d1
 801fe8c:	080200d1 	.word	0x080200d1
 801fe90:	080200d1 	.word	0x080200d1
 801fe94:	080200d1 	.word	0x080200d1
 801fe98:	0801ffe7 	.word	0x0801ffe7
 801fe9c:	080200d1 	.word	0x080200d1
 801fea0:	080200d1 	.word	0x080200d1
 801fea4:	080200d1 	.word	0x080200d1
 801fea8:	080200d1 	.word	0x080200d1
 801feac:	080200d1 	.word	0x080200d1
 801feb0:	080200d1 	.word	0x080200d1
 801feb4:	080200d1 	.word	0x080200d1
 801feb8:	0802001d 	.word	0x0802001d
 801febc:	0801fff9 	.word	0x0801fff9
 801fec0:	080200d1 	.word	0x080200d1
 801fec4:	080200d1 	.word	0x080200d1
 801fec8:	0802000b 	.word	0x0802000b
 801fecc:	080200d1 	.word	0x080200d1
 801fed0:	080200d1 	.word	0x080200d1
 801fed4:	080200d1 	.word	0x080200d1
 801fed8:	080200d1 	.word	0x080200d1
 801fedc:	08020041 	.word	0x08020041
 801fee0:	080200d1 	.word	0x080200d1
 801fee4:	08020053 	.word	0x08020053
 801fee8:	080200d1 	.word	0x080200d1
 801feec:	080200d1 	.word	0x080200d1
 801fef0:	08020077 	.word	0x08020077
 801fef4:	080200d1 	.word	0x080200d1
 801fef8:	0802009b 	.word	0x0802009b
 801fefc:	080200d1 	.word	0x080200d1
 801ff00:	080200d1 	.word	0x080200d1
 801ff04:	080200d1 	.word	0x080200d1
 801ff08:	080200d1 	.word	0x080200d1
 801ff0c:	080200bf 	.word	0x080200bf
 801ff10:	080200d1 	.word	0x080200d1
 801ff14:	080200d1 	.word	0x080200d1
 801ff18:	080200d1 	.word	0x080200d1
 801ff1c:	080200d1 	.word	0x080200d1
 801ff20:	080200d1 	.word	0x080200d1
 801ff24:	080200d1 	.word	0x080200d1
 801ff28:	080200d1 	.word	0x080200d1
 801ff2c:	080200d1 	.word	0x080200d1
 801ff30:	080200d1 	.word	0x080200d1
 801ff34:	080200d1 	.word	0x080200d1
 801ff38:	080200d1 	.word	0x080200d1
 801ff3c:	080200d1 	.word	0x080200d1
 801ff40:	080200d1 	.word	0x080200d1
 801ff44:	080200d1 	.word	0x080200d1
 801ff48:	080200d1 	.word	0x080200d1
 801ff4c:	080200d1 	.word	0x080200d1
 801ff50:	080200d1 	.word	0x080200d1
 801ff54:	080200d1 	.word	0x080200d1
 801ff58:	080200d1 	.word	0x080200d1
 801ff5c:	080200d1 	.word	0x080200d1
 801ff60:	080200d1 	.word	0x080200d1
 801ff64:	080200d1 	.word	0x080200d1
 801ff68:	080200d1 	.word	0x080200d1
 801ff6c:	080200d1 	.word	0x080200d1
 801ff70:	080200d1 	.word	0x080200d1
 801ff74:	080200d1 	.word	0x080200d1
 801ff78:	080200d1 	.word	0x080200d1
 801ff7c:	080200d1 	.word	0x080200d1
 801ff80:	080200d1 	.word	0x080200d1
 801ff84:	080200d1 	.word	0x080200d1
 801ff88:	080200d1 	.word	0x080200d1
 801ff8c:	080200d1 	.word	0x080200d1
 801ff90:	080200d1 	.word	0x080200d1
 801ff94:	080200d1 	.word	0x080200d1
 801ff98:	080200d1 	.word	0x080200d1
 801ff9c:	080200d1 	.word	0x080200d1
 801ffa0:	080200d1 	.word	0x080200d1
 801ffa4:	080200d1 	.word	0x080200d1
 801ffa8:	080200d1 	.word	0x080200d1
 801ffac:	080200d1 	.word	0x080200d1
 801ffb0:	080200d1 	.word	0x080200d1
 801ffb4:	080200d1 	.word	0x080200d1
 801ffb8:	0802002f 	.word	0x0802002f
 801ffbc:	2b9e      	cmp	r3, #158	; 0x9e
 801ffbe:	d051      	beq.n	8020064 <SCSI_ProcessCmd+0x26c>
 801ffc0:	e086      	b.n	80200d0 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 801ffc2:	7afb      	ldrb	r3, [r7, #11]
 801ffc4:	687a      	ldr	r2, [r7, #4]
 801ffc6:	4619      	mov	r1, r3
 801ffc8:	68f8      	ldr	r0, [r7, #12]
 801ffca:	f000 f893 	bl	80200f4 <SCSI_TestUnitReady>
 801ffce:	4603      	mov	r3, r0
 801ffd0:	75fb      	strb	r3, [r7, #23]
      break;
 801ffd2:	e089      	b.n	80200e8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 801ffd4:	7afb      	ldrb	r3, [r7, #11]
 801ffd6:	687a      	ldr	r2, [r7, #4]
 801ffd8:	4619      	mov	r1, r3
 801ffda:	68f8      	ldr	r0, [r7, #12]
 801ffdc:	f000 fb38 	bl	8020650 <SCSI_RequestSense>
 801ffe0:	4603      	mov	r3, r0
 801ffe2:	75fb      	strb	r3, [r7, #23]
      break;
 801ffe4:	e080      	b.n	80200e8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 801ffe6:	7afb      	ldrb	r3, [r7, #11]
 801ffe8:	687a      	ldr	r2, [r7, #4]
 801ffea:	4619      	mov	r1, r3
 801ffec:	68f8      	ldr	r0, [r7, #12]
 801ffee:	f000 f8d1 	bl	8020194 <SCSI_Inquiry>
 801fff2:	4603      	mov	r3, r0
 801fff4:	75fb      	strb	r3, [r7, #23]
      break;
 801fff6:	e077      	b.n	80200e8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 801fff8:	7afb      	ldrb	r3, [r7, #11]
 801fffa:	687a      	ldr	r2, [r7, #4]
 801fffc:	4619      	mov	r1, r3
 801fffe:	68f8      	ldr	r0, [r7, #12]
 8020000:	f000 fbec 	bl	80207dc <SCSI_StartStopUnit>
 8020004:	4603      	mov	r3, r0
 8020006:	75fb      	strb	r3, [r7, #23]
      break;
 8020008:	e06e      	b.n	80200e8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 802000a:	7afb      	ldrb	r3, [r7, #11]
 802000c:	687a      	ldr	r2, [r7, #4]
 802000e:	4619      	mov	r1, r3
 8020010:	68f8      	ldr	r0, [r7, #12]
 8020012:	f000 fc34 	bl	802087e <SCSI_AllowPreventRemovable>
 8020016:	4603      	mov	r3, r0
 8020018:	75fb      	strb	r3, [r7, #23]
      break;
 802001a:	e065      	b.n	80200e8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 802001c:	7afb      	ldrb	r3, [r7, #11]
 802001e:	687a      	ldr	r2, [r7, #4]
 8020020:	4619      	mov	r1, r3
 8020022:	68f8      	ldr	r0, [r7, #12]
 8020024:	f000 fabc 	bl	80205a0 <SCSI_ModeSense6>
 8020028:	4603      	mov	r3, r0
 802002a:	75fb      	strb	r3, [r7, #23]
      break;
 802002c:	e05c      	b.n	80200e8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 802002e:	7afb      	ldrb	r3, [r7, #11]
 8020030:	687a      	ldr	r2, [r7, #4]
 8020032:	4619      	mov	r1, r3
 8020034:	68f8      	ldr	r0, [r7, #12]
 8020036:	f000 fadf 	bl	80205f8 <SCSI_ModeSense10>
 802003a:	4603      	mov	r3, r0
 802003c:	75fb      	strb	r3, [r7, #23]
      break;
 802003e:	e053      	b.n	80200e8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8020040:	7afb      	ldrb	r3, [r7, #11]
 8020042:	687a      	ldr	r2, [r7, #4]
 8020044:	4619      	mov	r1, r3
 8020046:	68f8      	ldr	r0, [r7, #12]
 8020048:	f000 fa37 	bl	80204ba <SCSI_ReadFormatCapacity>
 802004c:	4603      	mov	r3, r0
 802004e:	75fb      	strb	r3, [r7, #23]
      break;
 8020050:	e04a      	b.n	80200e8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8020052:	7afb      	ldrb	r3, [r7, #11]
 8020054:	687a      	ldr	r2, [r7, #4]
 8020056:	4619      	mov	r1, r3
 8020058:	68f8      	ldr	r0, [r7, #12]
 802005a:	f000 f90f 	bl	802027c <SCSI_ReadCapacity10>
 802005e:	4603      	mov	r3, r0
 8020060:	75fb      	strb	r3, [r7, #23]
      break;
 8020062:	e041      	b.n	80200e8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8020064:	7afb      	ldrb	r3, [r7, #11]
 8020066:	687a      	ldr	r2, [r7, #4]
 8020068:	4619      	mov	r1, r3
 802006a:	68f8      	ldr	r0, [r7, #12]
 802006c:	f000 f97b 	bl	8020366 <SCSI_ReadCapacity16>
 8020070:	4603      	mov	r3, r0
 8020072:	75fb      	strb	r3, [r7, #23]
      break;
 8020074:	e038      	b.n	80200e8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8020076:	7afb      	ldrb	r3, [r7, #11]
 8020078:	687a      	ldr	r2, [r7, #4]
 802007a:	4619      	mov	r1, r3
 802007c:	68f8      	ldr	r0, [r7, #12]
 802007e:	f000 fc27 	bl	80208d0 <SCSI_Read10>
 8020082:	4603      	mov	r3, r0
 8020084:	75fb      	strb	r3, [r7, #23]
      break;
 8020086:	e02f      	b.n	80200e8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8020088:	7afb      	ldrb	r3, [r7, #11]
 802008a:	687a      	ldr	r2, [r7, #4]
 802008c:	4619      	mov	r1, r3
 802008e:	68f8      	ldr	r0, [r7, #12]
 8020090:	f000 fcbe 	bl	8020a10 <SCSI_Read12>
 8020094:	4603      	mov	r3, r0
 8020096:	75fb      	strb	r3, [r7, #23]
      break;
 8020098:	e026      	b.n	80200e8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 802009a:	7afb      	ldrb	r3, [r7, #11]
 802009c:	687a      	ldr	r2, [r7, #4]
 802009e:	4619      	mov	r1, r3
 80200a0:	68f8      	ldr	r0, [r7, #12]
 80200a2:	f000 fd60 	bl	8020b66 <SCSI_Write10>
 80200a6:	4603      	mov	r3, r0
 80200a8:	75fb      	strb	r3, [r7, #23]
      break;
 80200aa:	e01d      	b.n	80200e8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 80200ac:	7afb      	ldrb	r3, [r7, #11]
 80200ae:	687a      	ldr	r2, [r7, #4]
 80200b0:	4619      	mov	r1, r3
 80200b2:	68f8      	ldr	r0, [r7, #12]
 80200b4:	f000 fe1c 	bl	8020cf0 <SCSI_Write12>
 80200b8:	4603      	mov	r3, r0
 80200ba:	75fb      	strb	r3, [r7, #23]
      break;
 80200bc:	e014      	b.n	80200e8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 80200be:	7afb      	ldrb	r3, [r7, #11]
 80200c0:	687a      	ldr	r2, [r7, #4]
 80200c2:	4619      	mov	r1, r3
 80200c4:	68f8      	ldr	r0, [r7, #12]
 80200c6:	f000 fee8 	bl	8020e9a <SCSI_Verify10>
 80200ca:	4603      	mov	r3, r0
 80200cc:	75fb      	strb	r3, [r7, #23]
      break;
 80200ce:	e00b      	b.n	80200e8 <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80200d0:	7af9      	ldrb	r1, [r7, #11]
 80200d2:	2320      	movs	r3, #32
 80200d4:	2205      	movs	r2, #5
 80200d6:	68f8      	ldr	r0, [r7, #12]
 80200d8:	f000 fb39 	bl	802074e <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80200dc:	693b      	ldr	r3, [r7, #16]
 80200de:	2202      	movs	r2, #2
 80200e0:	725a      	strb	r2, [r3, #9]
      ret = -1;
 80200e2:	23ff      	movs	r3, #255	; 0xff
 80200e4:	75fb      	strb	r3, [r7, #23]
      break;
 80200e6:	bf00      	nop
  }

  return ret;
 80200e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80200ec:	4618      	mov	r0, r3
 80200ee:	3718      	adds	r7, #24
 80200f0:	46bd      	mov	sp, r7
 80200f2:	bd80      	pop	{r7, pc}

080200f4 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80200f4:	b580      	push	{r7, lr}
 80200f6:	b086      	sub	sp, #24
 80200f8:	af00      	add	r7, sp, #0
 80200fa:	60f8      	str	r0, [r7, #12]
 80200fc:	460b      	mov	r3, r1
 80200fe:	607a      	str	r2, [r7, #4]
 8020100:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020102:	68fb      	ldr	r3, [r7, #12]
 8020104:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020108:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 802010a:	697b      	ldr	r3, [r7, #20]
 802010c:	2b00      	cmp	r3, #0
 802010e:	d102      	bne.n	8020116 <SCSI_TestUnitReady+0x22>
  {
    return -1;
 8020110:	f04f 33ff 	mov.w	r3, #4294967295
 8020114:	e03a      	b.n	802018c <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8020116:	697b      	ldr	r3, [r7, #20]
 8020118:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 802011c:	2b00      	cmp	r3, #0
 802011e:	d00a      	beq.n	8020136 <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020120:	697b      	ldr	r3, [r7, #20]
 8020122:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020126:	2320      	movs	r3, #32
 8020128:	2205      	movs	r2, #5
 802012a:	68f8      	ldr	r0, [r7, #12]
 802012c:	f000 fb0f 	bl	802074e <SCSI_SenseCode>

    return -1;
 8020130:	f04f 33ff 	mov.w	r3, #4294967295
 8020134:	e02a      	b.n	802018c <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8020136:	697b      	ldr	r3, [r7, #20]
 8020138:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 802013c:	2b02      	cmp	r3, #2
 802013e:	d10b      	bne.n	8020158 <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020140:	7af9      	ldrb	r1, [r7, #11]
 8020142:	233a      	movs	r3, #58	; 0x3a
 8020144:	2202      	movs	r2, #2
 8020146:	68f8      	ldr	r0, [r7, #12]
 8020148:	f000 fb01 	bl	802074e <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 802014c:	697b      	ldr	r3, [r7, #20]
 802014e:	2205      	movs	r2, #5
 8020150:	721a      	strb	r2, [r3, #8]
    return -1;
 8020152:	f04f 33ff 	mov.w	r3, #4294967295
 8020156:	e019      	b.n	802018c <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8020158:	68fb      	ldr	r3, [r7, #12]
 802015a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802015e:	689b      	ldr	r3, [r3, #8]
 8020160:	7afa      	ldrb	r2, [r7, #11]
 8020162:	4610      	mov	r0, r2
 8020164:	4798      	blx	r3
 8020166:	4603      	mov	r3, r0
 8020168:	2b00      	cmp	r3, #0
 802016a:	d00b      	beq.n	8020184 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 802016c:	7af9      	ldrb	r1, [r7, #11]
 802016e:	233a      	movs	r3, #58	; 0x3a
 8020170:	2202      	movs	r2, #2
 8020172:	68f8      	ldr	r0, [r7, #12]
 8020174:	f000 faeb 	bl	802074e <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8020178:	697b      	ldr	r3, [r7, #20]
 802017a:	2205      	movs	r2, #5
 802017c:	721a      	strb	r2, [r3, #8]

    return -1;
 802017e:	f04f 33ff 	mov.w	r3, #4294967295
 8020182:	e003      	b.n	802018c <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 8020184:	697b      	ldr	r3, [r7, #20]
 8020186:	2200      	movs	r2, #0
 8020188:	60da      	str	r2, [r3, #12]

  return 0;
 802018a:	2300      	movs	r3, #0
}
 802018c:	4618      	mov	r0, r3
 802018e:	3718      	adds	r7, #24
 8020190:	46bd      	mov	sp, r7
 8020192:	bd80      	pop	{r7, pc}

08020194 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020194:	b580      	push	{r7, lr}
 8020196:	b088      	sub	sp, #32
 8020198:	af00      	add	r7, sp, #0
 802019a:	60f8      	str	r0, [r7, #12]
 802019c:	460b      	mov	r3, r1
 802019e:	607a      	str	r2, [r7, #4]
 80201a0:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80201a2:	68fb      	ldr	r3, [r7, #12]
 80201a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80201a8:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80201aa:	69bb      	ldr	r3, [r7, #24]
 80201ac:	2b00      	cmp	r3, #0
 80201ae:	d102      	bne.n	80201b6 <SCSI_Inquiry+0x22>
  {
    return -1;
 80201b0:	f04f 33ff 	mov.w	r3, #4294967295
 80201b4:	e05a      	b.n	802026c <SCSI_Inquiry+0xd8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80201b6:	69bb      	ldr	r3, [r7, #24]
 80201b8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80201bc:	2b00      	cmp	r3, #0
 80201be:	d10a      	bne.n	80201d6 <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80201c0:	69bb      	ldr	r3, [r7, #24]
 80201c2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80201c6:	2320      	movs	r3, #32
 80201c8:	2205      	movs	r2, #5
 80201ca:	68f8      	ldr	r0, [r7, #12]
 80201cc:	f000 fabf 	bl	802074e <SCSI_SenseCode>
    return -1;
 80201d0:	f04f 33ff 	mov.w	r3, #4294967295
 80201d4:	e04a      	b.n	802026c <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 80201d6:	687b      	ldr	r3, [r7, #4]
 80201d8:	3301      	adds	r3, #1
 80201da:	781b      	ldrb	r3, [r3, #0]
 80201dc:	f003 0301 	and.w	r3, r3, #1
 80201e0:	2b00      	cmp	r3, #0
 80201e2:	d020      	beq.n	8020226 <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 80201e4:	687b      	ldr	r3, [r7, #4]
 80201e6:	3302      	adds	r3, #2
 80201e8:	781b      	ldrb	r3, [r3, #0]
 80201ea:	2b00      	cmp	r3, #0
 80201ec:	d105      	bne.n	80201fa <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 80201ee:	2206      	movs	r2, #6
 80201f0:	4920      	ldr	r1, [pc, #128]	; (8020274 <SCSI_Inquiry+0xe0>)
 80201f2:	69b8      	ldr	r0, [r7, #24]
 80201f4:	f000 ffb4 	bl	8021160 <SCSI_UpdateBotData>
 80201f8:	e037      	b.n	802026a <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 80201fa:	687b      	ldr	r3, [r7, #4]
 80201fc:	3302      	adds	r3, #2
 80201fe:	781b      	ldrb	r3, [r3, #0]
 8020200:	2b80      	cmp	r3, #128	; 0x80
 8020202:	d105      	bne.n	8020210 <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8020204:	2208      	movs	r2, #8
 8020206:	491c      	ldr	r1, [pc, #112]	; (8020278 <SCSI_Inquiry+0xe4>)
 8020208:	69b8      	ldr	r0, [r7, #24]
 802020a:	f000 ffa9 	bl	8021160 <SCSI_UpdateBotData>
 802020e:	e02c      	b.n	802026a <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8020210:	69bb      	ldr	r3, [r7, #24]
 8020212:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020216:	2324      	movs	r3, #36	; 0x24
 8020218:	2205      	movs	r2, #5
 802021a:	68f8      	ldr	r0, [r7, #12]
 802021c:	f000 fa97 	bl	802074e <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8020220:	f04f 33ff 	mov.w	r3, #4294967295
 8020224:	e022      	b.n	802026c <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8020226:	68fb      	ldr	r3, [r7, #12]
 8020228:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802022c:	69d9      	ldr	r1, [r3, #28]
 802022e:	7afa      	ldrb	r2, [r7, #11]
 8020230:	4613      	mov	r3, r2
 8020232:	00db      	lsls	r3, r3, #3
 8020234:	4413      	add	r3, r2
 8020236:	009b      	lsls	r3, r3, #2
 8020238:	440b      	add	r3, r1
 802023a:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 802023c:	697b      	ldr	r3, [r7, #20]
 802023e:	3304      	adds	r3, #4
 8020240:	781b      	ldrb	r3, [r3, #0]
 8020242:	b29b      	uxth	r3, r3
 8020244:	3305      	adds	r3, #5
 8020246:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8020248:	687b      	ldr	r3, [r7, #4]
 802024a:	3304      	adds	r3, #4
 802024c:	781b      	ldrb	r3, [r3, #0]
 802024e:	b29b      	uxth	r3, r3
 8020250:	8bfa      	ldrh	r2, [r7, #30]
 8020252:	429a      	cmp	r2, r3
 8020254:	d303      	bcc.n	802025e <SCSI_Inquiry+0xca>
    {
      len = params[4];
 8020256:	687b      	ldr	r3, [r7, #4]
 8020258:	3304      	adds	r3, #4
 802025a:	781b      	ldrb	r3, [r3, #0]
 802025c:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 802025e:	8bfb      	ldrh	r3, [r7, #30]
 8020260:	461a      	mov	r2, r3
 8020262:	6979      	ldr	r1, [r7, #20]
 8020264:	69b8      	ldr	r0, [r7, #24]
 8020266:	f000 ff7b 	bl	8021160 <SCSI_UpdateBotData>
  }

  return 0;
 802026a:	2300      	movs	r3, #0
}
 802026c:	4618      	mov	r0, r3
 802026e:	3720      	adds	r7, #32
 8020270:	46bd      	mov	sp, r7
 8020272:	bd80      	pop	{r7, pc}
 8020274:	2000063c 	.word	0x2000063c
 8020278:	20000644 	.word	0x20000644

0802027c <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 802027c:	b580      	push	{r7, lr}
 802027e:	b086      	sub	sp, #24
 8020280:	af00      	add	r7, sp, #0
 8020282:	60f8      	str	r0, [r7, #12]
 8020284:	460b      	mov	r3, r1
 8020286:	607a      	str	r2, [r7, #4]
 8020288:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 802028a:	68fb      	ldr	r3, [r7, #12]
 802028c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020290:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020292:	697b      	ldr	r3, [r7, #20]
 8020294:	2b00      	cmp	r3, #0
 8020296:	d102      	bne.n	802029e <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 8020298:	f04f 33ff 	mov.w	r3, #4294967295
 802029c:	e05f      	b.n	802035e <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 802029e:	68fb      	ldr	r3, [r7, #12]
 80202a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80202a4:	685b      	ldr	r3, [r3, #4]
 80202a6:	697a      	ldr	r2, [r7, #20]
 80202a8:	f502 711a 	add.w	r1, r2, #616	; 0x268
 80202ac:	697a      	ldr	r2, [r7, #20]
 80202ae:	f502 7219 	add.w	r2, r2, #612	; 0x264
 80202b2:	7af8      	ldrb	r0, [r7, #11]
 80202b4:	4798      	blx	r3
 80202b6:	4603      	mov	r3, r0
 80202b8:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80202ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80202be:	2b00      	cmp	r3, #0
 80202c0:	d104      	bne.n	80202cc <SCSI_ReadCapacity10+0x50>
 80202c2:	697b      	ldr	r3, [r7, #20]
 80202c4:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80202c8:	2b02      	cmp	r3, #2
 80202ca:	d108      	bne.n	80202de <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80202cc:	7af9      	ldrb	r1, [r7, #11]
 80202ce:	233a      	movs	r3, #58	; 0x3a
 80202d0:	2202      	movs	r2, #2
 80202d2:	68f8      	ldr	r0, [r7, #12]
 80202d4:	f000 fa3b 	bl	802074e <SCSI_SenseCode>
    return -1;
 80202d8:	f04f 33ff 	mov.w	r3, #4294967295
 80202dc:	e03f      	b.n	802035e <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80202de:	697b      	ldr	r3, [r7, #20]
 80202e0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80202e4:	3b01      	subs	r3, #1
 80202e6:	0e1b      	lsrs	r3, r3, #24
 80202e8:	b2da      	uxtb	r2, r3
 80202ea:	697b      	ldr	r3, [r7, #20]
 80202ec:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80202ee:	697b      	ldr	r3, [r7, #20]
 80202f0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80202f4:	3b01      	subs	r3, #1
 80202f6:	0c1b      	lsrs	r3, r3, #16
 80202f8:	b2da      	uxtb	r2, r3
 80202fa:	697b      	ldr	r3, [r7, #20]
 80202fc:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80202fe:	697b      	ldr	r3, [r7, #20]
 8020300:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8020304:	3b01      	subs	r3, #1
 8020306:	0a1b      	lsrs	r3, r3, #8
 8020308:	b2da      	uxtb	r2, r3
 802030a:	697b      	ldr	r3, [r7, #20]
 802030c:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 802030e:	697b      	ldr	r3, [r7, #20]
 8020310:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8020314:	b2db      	uxtb	r3, r3
 8020316:	3b01      	subs	r3, #1
 8020318:	b2da      	uxtb	r2, r3
 802031a:	697b      	ldr	r3, [r7, #20]
 802031c:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 802031e:	697b      	ldr	r3, [r7, #20]
 8020320:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020324:	161b      	asrs	r3, r3, #24
 8020326:	b2da      	uxtb	r2, r3
 8020328:	697b      	ldr	r3, [r7, #20]
 802032a:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 802032c:	697b      	ldr	r3, [r7, #20]
 802032e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020332:	141b      	asrs	r3, r3, #16
 8020334:	b2da      	uxtb	r2, r3
 8020336:	697b      	ldr	r3, [r7, #20]
 8020338:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 802033a:	697b      	ldr	r3, [r7, #20]
 802033c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020340:	0a1b      	lsrs	r3, r3, #8
 8020342:	b29b      	uxth	r3, r3
 8020344:	b2da      	uxtb	r2, r3
 8020346:	697b      	ldr	r3, [r7, #20]
 8020348:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 802034a:	697b      	ldr	r3, [r7, #20]
 802034c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020350:	b2da      	uxtb	r2, r3
 8020352:	697b      	ldr	r3, [r7, #20]
 8020354:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8020356:	697b      	ldr	r3, [r7, #20]
 8020358:	2208      	movs	r2, #8
 802035a:	60da      	str	r2, [r3, #12]

  return 0;
 802035c:	2300      	movs	r3, #0

}
 802035e:	4618      	mov	r0, r3
 8020360:	3718      	adds	r7, #24
 8020362:	46bd      	mov	sp, r7
 8020364:	bd80      	pop	{r7, pc}

08020366 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020366:	b580      	push	{r7, lr}
 8020368:	b088      	sub	sp, #32
 802036a:	af00      	add	r7, sp, #0
 802036c:	60f8      	str	r0, [r7, #12]
 802036e:	460b      	mov	r3, r1
 8020370:	607a      	str	r2, [r7, #4]
 8020372:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020374:	68fb      	ldr	r3, [r7, #12]
 8020376:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802037a:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 802037c:	69bb      	ldr	r3, [r7, #24]
 802037e:	2b00      	cmp	r3, #0
 8020380:	d102      	bne.n	8020388 <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 8020382:	f04f 33ff 	mov.w	r3, #4294967295
 8020386:	e094      	b.n	80204b2 <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8020388:	68fb      	ldr	r3, [r7, #12]
 802038a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802038e:	685b      	ldr	r3, [r3, #4]
 8020390:	69ba      	ldr	r2, [r7, #24]
 8020392:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8020396:	69ba      	ldr	r2, [r7, #24]
 8020398:	f502 7219 	add.w	r2, r2, #612	; 0x264
 802039c:	7af8      	ldrb	r0, [r7, #11]
 802039e:	4798      	blx	r3
 80203a0:	4603      	mov	r3, r0
 80203a2:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80203a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80203a8:	2b00      	cmp	r3, #0
 80203aa:	d104      	bne.n	80203b6 <SCSI_ReadCapacity16+0x50>
 80203ac:	69bb      	ldr	r3, [r7, #24]
 80203ae:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80203b2:	2b02      	cmp	r3, #2
 80203b4:	d108      	bne.n	80203c8 <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80203b6:	7af9      	ldrb	r1, [r7, #11]
 80203b8:	233a      	movs	r3, #58	; 0x3a
 80203ba:	2202      	movs	r2, #2
 80203bc:	68f8      	ldr	r0, [r7, #12]
 80203be:	f000 f9c6 	bl	802074e <SCSI_SenseCode>
    return -1;
 80203c2:	f04f 33ff 	mov.w	r3, #4294967295
 80203c6:	e074      	b.n	80204b2 <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80203c8:	687b      	ldr	r3, [r7, #4]
 80203ca:	330a      	adds	r3, #10
 80203cc:	781b      	ldrb	r3, [r3, #0]
 80203ce:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80203d0:	687b      	ldr	r3, [r7, #4]
 80203d2:	330b      	adds	r3, #11
 80203d4:	781b      	ldrb	r3, [r3, #0]
 80203d6:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80203d8:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80203da:	687b      	ldr	r3, [r7, #4]
 80203dc:	330c      	adds	r3, #12
 80203de:	781b      	ldrb	r3, [r3, #0]
 80203e0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80203e2:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80203e4:	687a      	ldr	r2, [r7, #4]
 80203e6:	320d      	adds	r2, #13
 80203e8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80203ea:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80203ec:	69bb      	ldr	r3, [r7, #24]
 80203ee:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80203f0:	2300      	movs	r3, #0
 80203f2:	77fb      	strb	r3, [r7, #31]
 80203f4:	e007      	b.n	8020406 <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 80203f6:	7ffb      	ldrb	r3, [r7, #31]
 80203f8:	69ba      	ldr	r2, [r7, #24]
 80203fa:	4413      	add	r3, r2
 80203fc:	2200      	movs	r2, #0
 80203fe:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8020400:	7ffb      	ldrb	r3, [r7, #31]
 8020402:	3301      	adds	r3, #1
 8020404:	77fb      	strb	r3, [r7, #31]
 8020406:	7ffa      	ldrb	r2, [r7, #31]
 8020408:	69bb      	ldr	r3, [r7, #24]
 802040a:	68db      	ldr	r3, [r3, #12]
 802040c:	429a      	cmp	r2, r3
 802040e:	d3f2      	bcc.n	80203f6 <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8020410:	69bb      	ldr	r3, [r7, #24]
 8020412:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8020416:	3b01      	subs	r3, #1
 8020418:	0e1b      	lsrs	r3, r3, #24
 802041a:	b2da      	uxtb	r2, r3
 802041c:	69bb      	ldr	r3, [r7, #24]
 802041e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8020420:	69bb      	ldr	r3, [r7, #24]
 8020422:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8020426:	3b01      	subs	r3, #1
 8020428:	0c1b      	lsrs	r3, r3, #16
 802042a:	b2da      	uxtb	r2, r3
 802042c:	69bb      	ldr	r3, [r7, #24]
 802042e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8020430:	69bb      	ldr	r3, [r7, #24]
 8020432:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8020436:	3b01      	subs	r3, #1
 8020438:	0a1b      	lsrs	r3, r3, #8
 802043a:	b2da      	uxtb	r2, r3
 802043c:	69bb      	ldr	r3, [r7, #24]
 802043e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8020440:	69bb      	ldr	r3, [r7, #24]
 8020442:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8020446:	b2db      	uxtb	r3, r3
 8020448:	3b01      	subs	r3, #1
 802044a:	b2da      	uxtb	r2, r3
 802044c:	69bb      	ldr	r3, [r7, #24]
 802044e:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8020450:	69bb      	ldr	r3, [r7, #24]
 8020452:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020456:	161b      	asrs	r3, r3, #24
 8020458:	b2da      	uxtb	r2, r3
 802045a:	69bb      	ldr	r3, [r7, #24]
 802045c:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 802045e:	69bb      	ldr	r3, [r7, #24]
 8020460:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020464:	141b      	asrs	r3, r3, #16
 8020466:	b2da      	uxtb	r2, r3
 8020468:	69bb      	ldr	r3, [r7, #24]
 802046a:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 802046c:	69bb      	ldr	r3, [r7, #24]
 802046e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020472:	0a1b      	lsrs	r3, r3, #8
 8020474:	b29b      	uxth	r3, r3
 8020476:	b2da      	uxtb	r2, r3
 8020478:	69bb      	ldr	r3, [r7, #24]
 802047a:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 802047c:	69bb      	ldr	r3, [r7, #24]
 802047e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020482:	b2da      	uxtb	r2, r3
 8020484:	69bb      	ldr	r3, [r7, #24]
 8020486:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8020488:	687b      	ldr	r3, [r7, #4]
 802048a:	330a      	adds	r3, #10
 802048c:	781b      	ldrb	r3, [r3, #0]
 802048e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8020490:	687b      	ldr	r3, [r7, #4]
 8020492:	330b      	adds	r3, #11
 8020494:	781b      	ldrb	r3, [r3, #0]
 8020496:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8020498:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 802049a:	687b      	ldr	r3, [r7, #4]
 802049c:	330c      	adds	r3, #12
 802049e:	781b      	ldrb	r3, [r3, #0]
 80204a0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80204a2:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80204a4:	687a      	ldr	r2, [r7, #4]
 80204a6:	320d      	adds	r2, #13
 80204a8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80204aa:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80204ac:	69bb      	ldr	r3, [r7, #24]
 80204ae:	60da      	str	r2, [r3, #12]

  return 0;
 80204b0:	2300      	movs	r3, #0
}
 80204b2:	4618      	mov	r0, r3
 80204b4:	3720      	adds	r7, #32
 80204b6:	46bd      	mov	sp, r7
 80204b8:	bd80      	pop	{r7, pc}

080204ba <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80204ba:	b580      	push	{r7, lr}
 80204bc:	b088      	sub	sp, #32
 80204be:	af00      	add	r7, sp, #0
 80204c0:	60f8      	str	r0, [r7, #12]
 80204c2:	460b      	mov	r3, r1
 80204c4:	607a      	str	r2, [r7, #4]
 80204c6:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80204c8:	68fb      	ldr	r3, [r7, #12]
 80204ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80204ce:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80204d0:	69bb      	ldr	r3, [r7, #24]
 80204d2:	2b00      	cmp	r3, #0
 80204d4:	d102      	bne.n	80204dc <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 80204d6:	f04f 33ff 	mov.w	r3, #4294967295
 80204da:	e05c      	b.n	8020596 <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 80204dc:	68fb      	ldr	r3, [r7, #12]
 80204de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80204e2:	685b      	ldr	r3, [r3, #4]
 80204e4:	f107 0214 	add.w	r2, r7, #20
 80204e8:	f107 0110 	add.w	r1, r7, #16
 80204ec:	7af8      	ldrb	r0, [r7, #11]
 80204ee:	4798      	blx	r3
 80204f0:	4603      	mov	r3, r0
 80204f2:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80204f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80204f8:	2b00      	cmp	r3, #0
 80204fa:	d104      	bne.n	8020506 <SCSI_ReadFormatCapacity+0x4c>
 80204fc:	69bb      	ldr	r3, [r7, #24]
 80204fe:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8020502:	2b02      	cmp	r3, #2
 8020504:	d108      	bne.n	8020518 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020506:	7af9      	ldrb	r1, [r7, #11]
 8020508:	233a      	movs	r3, #58	; 0x3a
 802050a:	2202      	movs	r2, #2
 802050c:	68f8      	ldr	r0, [r7, #12]
 802050e:	f000 f91e 	bl	802074e <SCSI_SenseCode>
    return -1;
 8020512:	f04f 33ff 	mov.w	r3, #4294967295
 8020516:	e03e      	b.n	8020596 <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 8020518:	2300      	movs	r3, #0
 802051a:	83fb      	strh	r3, [r7, #30]
 802051c:	e007      	b.n	802052e <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 802051e:	8bfb      	ldrh	r3, [r7, #30]
 8020520:	69ba      	ldr	r2, [r7, #24]
 8020522:	4413      	add	r3, r2
 8020524:	2200      	movs	r2, #0
 8020526:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8020528:	8bfb      	ldrh	r3, [r7, #30]
 802052a:	3301      	adds	r3, #1
 802052c:	83fb      	strh	r3, [r7, #30]
 802052e:	8bfb      	ldrh	r3, [r7, #30]
 8020530:	2b0b      	cmp	r3, #11
 8020532:	d9f4      	bls.n	802051e <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 8020534:	69bb      	ldr	r3, [r7, #24]
 8020536:	2208      	movs	r2, #8
 8020538:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 802053a:	693b      	ldr	r3, [r7, #16]
 802053c:	3b01      	subs	r3, #1
 802053e:	0e1b      	lsrs	r3, r3, #24
 8020540:	b2da      	uxtb	r2, r3
 8020542:	69bb      	ldr	r3, [r7, #24]
 8020544:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8020546:	693b      	ldr	r3, [r7, #16]
 8020548:	3b01      	subs	r3, #1
 802054a:	0c1b      	lsrs	r3, r3, #16
 802054c:	b2da      	uxtb	r2, r3
 802054e:	69bb      	ldr	r3, [r7, #24]
 8020550:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8020552:	693b      	ldr	r3, [r7, #16]
 8020554:	3b01      	subs	r3, #1
 8020556:	0a1b      	lsrs	r3, r3, #8
 8020558:	b2da      	uxtb	r2, r3
 802055a:	69bb      	ldr	r3, [r7, #24]
 802055c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 802055e:	693b      	ldr	r3, [r7, #16]
 8020560:	b2db      	uxtb	r3, r3
 8020562:	3b01      	subs	r3, #1
 8020564:	b2da      	uxtb	r2, r3
 8020566:	69bb      	ldr	r3, [r7, #24]
 8020568:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 802056a:	69bb      	ldr	r3, [r7, #24]
 802056c:	2202      	movs	r2, #2
 802056e:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8020570:	8abb      	ldrh	r3, [r7, #20]
 8020572:	141b      	asrs	r3, r3, #16
 8020574:	b2da      	uxtb	r2, r3
 8020576:	69bb      	ldr	r3, [r7, #24]
 8020578:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 802057a:	8abb      	ldrh	r3, [r7, #20]
 802057c:	0a1b      	lsrs	r3, r3, #8
 802057e:	b29b      	uxth	r3, r3
 8020580:	b2da      	uxtb	r2, r3
 8020582:	69bb      	ldr	r3, [r7, #24]
 8020584:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8020586:	8abb      	ldrh	r3, [r7, #20]
 8020588:	b2da      	uxtb	r2, r3
 802058a:	69bb      	ldr	r3, [r7, #24]
 802058c:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 802058e:	69bb      	ldr	r3, [r7, #24]
 8020590:	220c      	movs	r2, #12
 8020592:	60da      	str	r2, [r3, #12]

  return 0;
 8020594:	2300      	movs	r3, #0
}
 8020596:	4618      	mov	r0, r3
 8020598:	3720      	adds	r7, #32
 802059a:	46bd      	mov	sp, r7
 802059c:	bd80      	pop	{r7, pc}
	...

080205a0 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80205a0:	b580      	push	{r7, lr}
 80205a2:	b086      	sub	sp, #24
 80205a4:	af00      	add	r7, sp, #0
 80205a6:	60f8      	str	r0, [r7, #12]
 80205a8:	460b      	mov	r3, r1
 80205aa:	607a      	str	r2, [r7, #4]
 80205ac:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80205ae:	68fb      	ldr	r3, [r7, #12]
 80205b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80205b4:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 80205b6:	2317      	movs	r3, #23
 80205b8:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80205ba:	693b      	ldr	r3, [r7, #16]
 80205bc:	2b00      	cmp	r3, #0
 80205be:	d102      	bne.n	80205c6 <SCSI_ModeSense6+0x26>
  {
    return -1;
 80205c0:	f04f 33ff 	mov.w	r3, #4294967295
 80205c4:	e011      	b.n	80205ea <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 80205c6:	687b      	ldr	r3, [r7, #4]
 80205c8:	3304      	adds	r3, #4
 80205ca:	781b      	ldrb	r3, [r3, #0]
 80205cc:	b29b      	uxth	r3, r3
 80205ce:	8afa      	ldrh	r2, [r7, #22]
 80205d0:	429a      	cmp	r2, r3
 80205d2:	d303      	bcc.n	80205dc <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 80205d4:	687b      	ldr	r3, [r7, #4]
 80205d6:	3304      	adds	r3, #4
 80205d8:	781b      	ldrb	r3, [r3, #0]
 80205da:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 80205dc:	8afb      	ldrh	r3, [r7, #22]
 80205de:	461a      	mov	r2, r3
 80205e0:	4904      	ldr	r1, [pc, #16]	; (80205f4 <SCSI_ModeSense6+0x54>)
 80205e2:	6938      	ldr	r0, [r7, #16]
 80205e4:	f000 fdbc 	bl	8021160 <SCSI_UpdateBotData>

  return 0;
 80205e8:	2300      	movs	r3, #0
}
 80205ea:	4618      	mov	r0, r3
 80205ec:	3718      	adds	r7, #24
 80205ee:	46bd      	mov	sp, r7
 80205f0:	bd80      	pop	{r7, pc}
 80205f2:	bf00      	nop
 80205f4:	2000064c 	.word	0x2000064c

080205f8 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80205f8:	b580      	push	{r7, lr}
 80205fa:	b086      	sub	sp, #24
 80205fc:	af00      	add	r7, sp, #0
 80205fe:	60f8      	str	r0, [r7, #12]
 8020600:	460b      	mov	r3, r1
 8020602:	607a      	str	r2, [r7, #4]
 8020604:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020606:	68fb      	ldr	r3, [r7, #12]
 8020608:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802060c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 802060e:	231b      	movs	r3, #27
 8020610:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8020612:	693b      	ldr	r3, [r7, #16]
 8020614:	2b00      	cmp	r3, #0
 8020616:	d102      	bne.n	802061e <SCSI_ModeSense10+0x26>
  {
    return -1;
 8020618:	f04f 33ff 	mov.w	r3, #4294967295
 802061c:	e011      	b.n	8020642 <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 802061e:	687b      	ldr	r3, [r7, #4]
 8020620:	3308      	adds	r3, #8
 8020622:	781b      	ldrb	r3, [r3, #0]
 8020624:	b29b      	uxth	r3, r3
 8020626:	8afa      	ldrh	r2, [r7, #22]
 8020628:	429a      	cmp	r2, r3
 802062a:	d303      	bcc.n	8020634 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 802062c:	687b      	ldr	r3, [r7, #4]
 802062e:	3308      	adds	r3, #8
 8020630:	781b      	ldrb	r3, [r3, #0]
 8020632:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8020634:	8afb      	ldrh	r3, [r7, #22]
 8020636:	461a      	mov	r2, r3
 8020638:	4904      	ldr	r1, [pc, #16]	; (802064c <SCSI_ModeSense10+0x54>)
 802063a:	6938      	ldr	r0, [r7, #16]
 802063c:	f000 fd90 	bl	8021160 <SCSI_UpdateBotData>

  return 0;
 8020640:	2300      	movs	r3, #0
}
 8020642:	4618      	mov	r0, r3
 8020644:	3718      	adds	r7, #24
 8020646:	46bd      	mov	sp, r7
 8020648:	bd80      	pop	{r7, pc}
 802064a:	bf00      	nop
 802064c:	20000664 	.word	0x20000664

08020650 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020650:	b580      	push	{r7, lr}
 8020652:	b086      	sub	sp, #24
 8020654:	af00      	add	r7, sp, #0
 8020656:	60f8      	str	r0, [r7, #12]
 8020658:	460b      	mov	r3, r1
 802065a:	607a      	str	r2, [r7, #4]
 802065c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 802065e:	68fb      	ldr	r3, [r7, #12]
 8020660:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020664:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8020666:	693b      	ldr	r3, [r7, #16]
 8020668:	2b00      	cmp	r3, #0
 802066a:	d102      	bne.n	8020672 <SCSI_RequestSense+0x22>
  {
    return -1;
 802066c:	f04f 33ff 	mov.w	r3, #4294967295
 8020670:	e069      	b.n	8020746 <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8020672:	693b      	ldr	r3, [r7, #16]
 8020674:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8020678:	2b00      	cmp	r3, #0
 802067a:	d10a      	bne.n	8020692 <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 802067c:	693b      	ldr	r3, [r7, #16]
 802067e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020682:	2320      	movs	r3, #32
 8020684:	2205      	movs	r2, #5
 8020686:	68f8      	ldr	r0, [r7, #12]
 8020688:	f000 f861 	bl	802074e <SCSI_SenseCode>
    return -1;
 802068c:	f04f 33ff 	mov.w	r3, #4294967295
 8020690:	e059      	b.n	8020746 <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8020692:	2300      	movs	r3, #0
 8020694:	75fb      	strb	r3, [r7, #23]
 8020696:	e007      	b.n	80206a8 <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 8020698:	7dfb      	ldrb	r3, [r7, #23]
 802069a:	693a      	ldr	r2, [r7, #16]
 802069c:	4413      	add	r3, r2
 802069e:	2200      	movs	r2, #0
 80206a0:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80206a2:	7dfb      	ldrb	r3, [r7, #23]
 80206a4:	3301      	adds	r3, #1
 80206a6:	75fb      	strb	r3, [r7, #23]
 80206a8:	7dfb      	ldrb	r3, [r7, #23]
 80206aa:	2b11      	cmp	r3, #17
 80206ac:	d9f4      	bls.n	8020698 <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 80206ae:	693b      	ldr	r3, [r7, #16]
 80206b0:	2270      	movs	r2, #112	; 0x70
 80206b2:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 80206b4:	693b      	ldr	r3, [r7, #16]
 80206b6:	220c      	movs	r2, #12
 80206b8:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 80206ba:	693b      	ldr	r3, [r7, #16]
 80206bc:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 80206c0:	693b      	ldr	r3, [r7, #16]
 80206c2:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80206c6:	429a      	cmp	r2, r3
 80206c8:	d02e      	beq.n	8020728 <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 80206ca:	693b      	ldr	r3, [r7, #16]
 80206cc:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80206d0:	461a      	mov	r2, r3
 80206d2:	693b      	ldr	r3, [r7, #16]
 80206d4:	3248      	adds	r2, #72	; 0x48
 80206d6:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 80206da:	693b      	ldr	r3, [r7, #16]
 80206dc:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 80206de:	693b      	ldr	r3, [r7, #16]
 80206e0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80206e4:	693a      	ldr	r2, [r7, #16]
 80206e6:	3348      	adds	r3, #72	; 0x48
 80206e8:	00db      	lsls	r3, r3, #3
 80206ea:	4413      	add	r3, r2
 80206ec:	791a      	ldrb	r2, [r3, #4]
 80206ee:	693b      	ldr	r3, [r7, #16]
 80206f0:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80206f2:	693b      	ldr	r3, [r7, #16]
 80206f4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80206f8:	693a      	ldr	r2, [r7, #16]
 80206fa:	3348      	adds	r3, #72	; 0x48
 80206fc:	00db      	lsls	r3, r3, #3
 80206fe:	4413      	add	r3, r2
 8020700:	795a      	ldrb	r2, [r3, #5]
 8020702:	693b      	ldr	r3, [r7, #16]
 8020704:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8020706:	693b      	ldr	r3, [r7, #16]
 8020708:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 802070c:	3301      	adds	r3, #1
 802070e:	b2da      	uxtb	r2, r3
 8020710:	693b      	ldr	r3, [r7, #16]
 8020712:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8020716:	693b      	ldr	r3, [r7, #16]
 8020718:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 802071c:	2b04      	cmp	r3, #4
 802071e:	d103      	bne.n	8020728 <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 8020720:	693b      	ldr	r3, [r7, #16]
 8020722:	2200      	movs	r2, #0
 8020724:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8020728:	693b      	ldr	r3, [r7, #16]
 802072a:	2212      	movs	r2, #18
 802072c:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 802072e:	687b      	ldr	r3, [r7, #4]
 8020730:	3304      	adds	r3, #4
 8020732:	781b      	ldrb	r3, [r3, #0]
 8020734:	2b12      	cmp	r3, #18
 8020736:	d805      	bhi.n	8020744 <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 8020738:	687b      	ldr	r3, [r7, #4]
 802073a:	3304      	adds	r3, #4
 802073c:	781b      	ldrb	r3, [r3, #0]
 802073e:	461a      	mov	r2, r3
 8020740:	693b      	ldr	r3, [r7, #16]
 8020742:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8020744:	2300      	movs	r3, #0
}
 8020746:	4618      	mov	r0, r3
 8020748:	3718      	adds	r7, #24
 802074a:	46bd      	mov	sp, r7
 802074c:	bd80      	pop	{r7, pc}

0802074e <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 802074e:	b480      	push	{r7}
 8020750:	b085      	sub	sp, #20
 8020752:	af00      	add	r7, sp, #0
 8020754:	6078      	str	r0, [r7, #4]
 8020756:	4608      	mov	r0, r1
 8020758:	4611      	mov	r1, r2
 802075a:	461a      	mov	r2, r3
 802075c:	4603      	mov	r3, r0
 802075e:	70fb      	strb	r3, [r7, #3]
 8020760:	460b      	mov	r3, r1
 8020762:	70bb      	strb	r3, [r7, #2]
 8020764:	4613      	mov	r3, r2
 8020766:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020768:	687b      	ldr	r3, [r7, #4]
 802076a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802076e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8020770:	68fb      	ldr	r3, [r7, #12]
 8020772:	2b00      	cmp	r3, #0
 8020774:	d02c      	beq.n	80207d0 <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8020776:	68fb      	ldr	r3, [r7, #12]
 8020778:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 802077c:	461a      	mov	r2, r3
 802077e:	68fb      	ldr	r3, [r7, #12]
 8020780:	3248      	adds	r2, #72	; 0x48
 8020782:	78b9      	ldrb	r1, [r7, #2]
 8020784:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8020788:	68fb      	ldr	r3, [r7, #12]
 802078a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 802078e:	68fa      	ldr	r2, [r7, #12]
 8020790:	3348      	adds	r3, #72	; 0x48
 8020792:	00db      	lsls	r3, r3, #3
 8020794:	4413      	add	r3, r2
 8020796:	787a      	ldrb	r2, [r7, #1]
 8020798:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 802079a:	68fb      	ldr	r3, [r7, #12]
 802079c:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80207a0:	68fa      	ldr	r2, [r7, #12]
 80207a2:	3348      	adds	r3, #72	; 0x48
 80207a4:	00db      	lsls	r3, r3, #3
 80207a6:	4413      	add	r3, r2
 80207a8:	2200      	movs	r2, #0
 80207aa:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 80207ac:	68fb      	ldr	r3, [r7, #12]
 80207ae:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80207b2:	3301      	adds	r3, #1
 80207b4:	b2da      	uxtb	r2, r3
 80207b6:	68fb      	ldr	r3, [r7, #12]
 80207b8:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80207bc:	68fb      	ldr	r3, [r7, #12]
 80207be:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80207c2:	2b04      	cmp	r3, #4
 80207c4:	d105      	bne.n	80207d2 <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 80207c6:	68fb      	ldr	r3, [r7, #12]
 80207c8:	2200      	movs	r2, #0
 80207ca:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 80207ce:	e000      	b.n	80207d2 <SCSI_SenseCode+0x84>
    return;
 80207d0:	bf00      	nop
  }
}
 80207d2:	3714      	adds	r7, #20
 80207d4:	46bd      	mov	sp, r7
 80207d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207da:	4770      	bx	lr

080207dc <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80207dc:	b580      	push	{r7, lr}
 80207de:	b086      	sub	sp, #24
 80207e0:	af00      	add	r7, sp, #0
 80207e2:	60f8      	str	r0, [r7, #12]
 80207e4:	460b      	mov	r3, r1
 80207e6:	607a      	str	r2, [r7, #4]
 80207e8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80207ea:	68fb      	ldr	r3, [r7, #12]
 80207ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80207f0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80207f2:	697b      	ldr	r3, [r7, #20]
 80207f4:	2b00      	cmp	r3, #0
 80207f6:	d102      	bne.n	80207fe <SCSI_StartStopUnit+0x22>
  {
    return -1;
 80207f8:	f04f 33ff 	mov.w	r3, #4294967295
 80207fc:	e03b      	b.n	8020876 <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 80207fe:	697b      	ldr	r3, [r7, #20]
 8020800:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8020804:	2b01      	cmp	r3, #1
 8020806:	d10f      	bne.n	8020828 <SCSI_StartStopUnit+0x4c>
 8020808:	687b      	ldr	r3, [r7, #4]
 802080a:	3304      	adds	r3, #4
 802080c:	781b      	ldrb	r3, [r3, #0]
 802080e:	f003 0303 	and.w	r3, r3, #3
 8020812:	2b02      	cmp	r3, #2
 8020814:	d108      	bne.n	8020828 <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8020816:	7af9      	ldrb	r1, [r7, #11]
 8020818:	2324      	movs	r3, #36	; 0x24
 802081a:	2205      	movs	r2, #5
 802081c:	68f8      	ldr	r0, [r7, #12]
 802081e:	f7ff ff96 	bl	802074e <SCSI_SenseCode>

    return -1;
 8020822:	f04f 33ff 	mov.w	r3, #4294967295
 8020826:	e026      	b.n	8020876 <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8020828:	687b      	ldr	r3, [r7, #4]
 802082a:	3304      	adds	r3, #4
 802082c:	781b      	ldrb	r3, [r3, #0]
 802082e:	f003 0303 	and.w	r3, r3, #3
 8020832:	2b01      	cmp	r3, #1
 8020834:	d104      	bne.n	8020840 <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8020836:	697b      	ldr	r3, [r7, #20]
 8020838:	2200      	movs	r2, #0
 802083a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 802083e:	e016      	b.n	802086e <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8020840:	687b      	ldr	r3, [r7, #4]
 8020842:	3304      	adds	r3, #4
 8020844:	781b      	ldrb	r3, [r3, #0]
 8020846:	f003 0303 	and.w	r3, r3, #3
 802084a:	2b02      	cmp	r3, #2
 802084c:	d104      	bne.n	8020858 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 802084e:	697b      	ldr	r3, [r7, #20]
 8020850:	2202      	movs	r2, #2
 8020852:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8020856:	e00a      	b.n	802086e <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8020858:	687b      	ldr	r3, [r7, #4]
 802085a:	3304      	adds	r3, #4
 802085c:	781b      	ldrb	r3, [r3, #0]
 802085e:	f003 0303 	and.w	r3, r3, #3
 8020862:	2b03      	cmp	r3, #3
 8020864:	d103      	bne.n	802086e <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8020866:	697b      	ldr	r3, [r7, #20]
 8020868:	2200      	movs	r2, #0
 802086a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 802086e:	697b      	ldr	r3, [r7, #20]
 8020870:	2200      	movs	r2, #0
 8020872:	60da      	str	r2, [r3, #12]

  return 0;
 8020874:	2300      	movs	r3, #0
}
 8020876:	4618      	mov	r0, r3
 8020878:	3718      	adds	r7, #24
 802087a:	46bd      	mov	sp, r7
 802087c:	bd80      	pop	{r7, pc}

0802087e <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 802087e:	b480      	push	{r7}
 8020880:	b087      	sub	sp, #28
 8020882:	af00      	add	r7, sp, #0
 8020884:	60f8      	str	r0, [r7, #12]
 8020886:	460b      	mov	r3, r1
 8020888:	607a      	str	r2, [r7, #4]
 802088a:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 802088c:	68fb      	ldr	r3, [r7, #12]
 802088e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020892:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020894:	697b      	ldr	r3, [r7, #20]
 8020896:	2b00      	cmp	r3, #0
 8020898:	d102      	bne.n	80208a0 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 802089a:	f04f 33ff 	mov.w	r3, #4294967295
 802089e:	e011      	b.n	80208c4 <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 80208a0:	687b      	ldr	r3, [r7, #4]
 80208a2:	3304      	adds	r3, #4
 80208a4:	781b      	ldrb	r3, [r3, #0]
 80208a6:	2b00      	cmp	r3, #0
 80208a8:	d104      	bne.n	80208b4 <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80208aa:	697b      	ldr	r3, [r7, #20]
 80208ac:	2200      	movs	r2, #0
 80208ae:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80208b2:	e003      	b.n	80208bc <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 80208b4:	697b      	ldr	r3, [r7, #20]
 80208b6:	2201      	movs	r2, #1
 80208b8:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 80208bc:	697b      	ldr	r3, [r7, #20]
 80208be:	2200      	movs	r2, #0
 80208c0:	60da      	str	r2, [r3, #12]

  return 0;
 80208c2:	2300      	movs	r3, #0
}
 80208c4:	4618      	mov	r0, r3
 80208c6:	371c      	adds	r7, #28
 80208c8:	46bd      	mov	sp, r7
 80208ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208ce:	4770      	bx	lr

080208d0 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80208d0:	b580      	push	{r7, lr}
 80208d2:	b086      	sub	sp, #24
 80208d4:	af00      	add	r7, sp, #0
 80208d6:	60f8      	str	r0, [r7, #12]
 80208d8:	460b      	mov	r3, r1
 80208da:	607a      	str	r2, [r7, #4]
 80208dc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80208de:	68fb      	ldr	r3, [r7, #12]
 80208e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80208e4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80208e6:	697b      	ldr	r3, [r7, #20]
 80208e8:	2b00      	cmp	r3, #0
 80208ea:	d102      	bne.n	80208f2 <SCSI_Read10+0x22>
  {
    return -1;
 80208ec:	f04f 33ff 	mov.w	r3, #4294967295
 80208f0:	e08a      	b.n	8020a08 <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80208f2:	697b      	ldr	r3, [r7, #20]
 80208f4:	7a1b      	ldrb	r3, [r3, #8]
 80208f6:	2b00      	cmp	r3, #0
 80208f8:	d17c      	bne.n	80209f4 <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80208fa:	697b      	ldr	r3, [r7, #20]
 80208fc:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8020900:	b25b      	sxtb	r3, r3
 8020902:	2b00      	cmp	r3, #0
 8020904:	db0a      	blt.n	802091c <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020906:	697b      	ldr	r3, [r7, #20]
 8020908:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 802090c:	2320      	movs	r3, #32
 802090e:	2205      	movs	r2, #5
 8020910:	68f8      	ldr	r0, [r7, #12]
 8020912:	f7ff ff1c 	bl	802074e <SCSI_SenseCode>
      return -1;
 8020916:	f04f 33ff 	mov.w	r3, #4294967295
 802091a:	e075      	b.n	8020a08 <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 802091c:	697b      	ldr	r3, [r7, #20]
 802091e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8020922:	2b02      	cmp	r3, #2
 8020924:	d108      	bne.n	8020938 <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020926:	7af9      	ldrb	r1, [r7, #11]
 8020928:	233a      	movs	r3, #58	; 0x3a
 802092a:	2202      	movs	r2, #2
 802092c:	68f8      	ldr	r0, [r7, #12]
 802092e:	f7ff ff0e 	bl	802074e <SCSI_SenseCode>

      return -1;
 8020932:	f04f 33ff 	mov.w	r3, #4294967295
 8020936:	e067      	b.n	8020a08 <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8020938:	68fb      	ldr	r3, [r7, #12]
 802093a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802093e:	689b      	ldr	r3, [r3, #8]
 8020940:	7afa      	ldrb	r2, [r7, #11]
 8020942:	4610      	mov	r0, r2
 8020944:	4798      	blx	r3
 8020946:	4603      	mov	r3, r0
 8020948:	2b00      	cmp	r3, #0
 802094a:	d008      	beq.n	802095e <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 802094c:	7af9      	ldrb	r1, [r7, #11]
 802094e:	233a      	movs	r3, #58	; 0x3a
 8020950:	2202      	movs	r2, #2
 8020952:	68f8      	ldr	r0, [r7, #12]
 8020954:	f7ff fefb 	bl	802074e <SCSI_SenseCode>
      return -1;
 8020958:	f04f 33ff 	mov.w	r3, #4294967295
 802095c:	e054      	b.n	8020a08 <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 802095e:	687b      	ldr	r3, [r7, #4]
 8020960:	3302      	adds	r3, #2
 8020962:	781b      	ldrb	r3, [r3, #0]
 8020964:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8020966:	687b      	ldr	r3, [r7, #4]
 8020968:	3303      	adds	r3, #3
 802096a:	781b      	ldrb	r3, [r3, #0]
 802096c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 802096e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8020970:	687b      	ldr	r3, [r7, #4]
 8020972:	3304      	adds	r3, #4
 8020974:	781b      	ldrb	r3, [r3, #0]
 8020976:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8020978:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 802097a:	687a      	ldr	r2, [r7, #4]
 802097c:	3205      	adds	r2, #5
 802097e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8020980:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020982:	697b      	ldr	r3, [r7, #20]
 8020984:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8020988:	687b      	ldr	r3, [r7, #4]
 802098a:	3307      	adds	r3, #7
 802098c:	781b      	ldrb	r3, [r3, #0]
 802098e:	021b      	lsls	r3, r3, #8
 8020990:	687a      	ldr	r2, [r7, #4]
 8020992:	3208      	adds	r2, #8
 8020994:	7812      	ldrb	r2, [r2, #0]
 8020996:	431a      	orrs	r2, r3
 8020998:	697b      	ldr	r3, [r7, #20]
 802099a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 802099e:	697b      	ldr	r3, [r7, #20]
 80209a0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80209a4:	697b      	ldr	r3, [r7, #20]
 80209a6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80209aa:	7af9      	ldrb	r1, [r7, #11]
 80209ac:	68f8      	ldr	r0, [r7, #12]
 80209ae:	f000 faad 	bl	8020f0c <SCSI_CheckAddressRange>
 80209b2:	4603      	mov	r3, r0
 80209b4:	2b00      	cmp	r3, #0
 80209b6:	da02      	bge.n	80209be <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80209b8:	f04f 33ff 	mov.w	r3, #4294967295
 80209bc:	e024      	b.n	8020a08 <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80209be:	697b      	ldr	r3, [r7, #20]
 80209c0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80209c4:	697b      	ldr	r3, [r7, #20]
 80209c6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80209ca:	6979      	ldr	r1, [r7, #20]
 80209cc:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 80209d0:	fb01 f303 	mul.w	r3, r1, r3
 80209d4:	429a      	cmp	r2, r3
 80209d6:	d00a      	beq.n	80209ee <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80209d8:	697b      	ldr	r3, [r7, #20]
 80209da:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80209de:	2320      	movs	r3, #32
 80209e0:	2205      	movs	r2, #5
 80209e2:	68f8      	ldr	r0, [r7, #12]
 80209e4:	f7ff feb3 	bl	802074e <SCSI_SenseCode>
      return -1;
 80209e8:	f04f 33ff 	mov.w	r3, #4294967295
 80209ec:	e00c      	b.n	8020a08 <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80209ee:	697b      	ldr	r3, [r7, #20]
 80209f0:	2202      	movs	r2, #2
 80209f2:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80209f4:	697b      	ldr	r3, [r7, #20]
 80209f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80209fa:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80209fc:	7afb      	ldrb	r3, [r7, #11]
 80209fe:	4619      	mov	r1, r3
 8020a00:	68f8      	ldr	r0, [r7, #12]
 8020a02:	f000 faab 	bl	8020f5c <SCSI_ProcessRead>
 8020a06:	4603      	mov	r3, r0
}
 8020a08:	4618      	mov	r0, r3
 8020a0a:	3718      	adds	r7, #24
 8020a0c:	46bd      	mov	sp, r7
 8020a0e:	bd80      	pop	{r7, pc}

08020a10 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020a10:	b580      	push	{r7, lr}
 8020a12:	b086      	sub	sp, #24
 8020a14:	af00      	add	r7, sp, #0
 8020a16:	60f8      	str	r0, [r7, #12]
 8020a18:	460b      	mov	r3, r1
 8020a1a:	607a      	str	r2, [r7, #4]
 8020a1c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020a1e:	68fb      	ldr	r3, [r7, #12]
 8020a20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020a24:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020a26:	697b      	ldr	r3, [r7, #20]
 8020a28:	2b00      	cmp	r3, #0
 8020a2a:	d102      	bne.n	8020a32 <SCSI_Read12+0x22>
  {
    return -1;
 8020a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8020a30:	e095      	b.n	8020b5e <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8020a32:	697b      	ldr	r3, [r7, #20]
 8020a34:	7a1b      	ldrb	r3, [r3, #8]
 8020a36:	2b00      	cmp	r3, #0
 8020a38:	f040 8087 	bne.w	8020b4a <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8020a3c:	697b      	ldr	r3, [r7, #20]
 8020a3e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8020a42:	b25b      	sxtb	r3, r3
 8020a44:	2b00      	cmp	r3, #0
 8020a46:	db0a      	blt.n	8020a5e <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020a48:	697b      	ldr	r3, [r7, #20]
 8020a4a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020a4e:	2320      	movs	r3, #32
 8020a50:	2205      	movs	r2, #5
 8020a52:	68f8      	ldr	r0, [r7, #12]
 8020a54:	f7ff fe7b 	bl	802074e <SCSI_SenseCode>
      return -1;
 8020a58:	f04f 33ff 	mov.w	r3, #4294967295
 8020a5c:	e07f      	b.n	8020b5e <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8020a5e:	697b      	ldr	r3, [r7, #20]
 8020a60:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8020a64:	2b02      	cmp	r3, #2
 8020a66:	d108      	bne.n	8020a7a <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020a68:	7af9      	ldrb	r1, [r7, #11]
 8020a6a:	233a      	movs	r3, #58	; 0x3a
 8020a6c:	2202      	movs	r2, #2
 8020a6e:	68f8      	ldr	r0, [r7, #12]
 8020a70:	f7ff fe6d 	bl	802074e <SCSI_SenseCode>
      return -1;
 8020a74:	f04f 33ff 	mov.w	r3, #4294967295
 8020a78:	e071      	b.n	8020b5e <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8020a7a:	68fb      	ldr	r3, [r7, #12]
 8020a7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020a80:	689b      	ldr	r3, [r3, #8]
 8020a82:	7afa      	ldrb	r2, [r7, #11]
 8020a84:	4610      	mov	r0, r2
 8020a86:	4798      	blx	r3
 8020a88:	4603      	mov	r3, r0
 8020a8a:	2b00      	cmp	r3, #0
 8020a8c:	d008      	beq.n	8020aa0 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020a8e:	7af9      	ldrb	r1, [r7, #11]
 8020a90:	233a      	movs	r3, #58	; 0x3a
 8020a92:	2202      	movs	r2, #2
 8020a94:	68f8      	ldr	r0, [r7, #12]
 8020a96:	f7ff fe5a 	bl	802074e <SCSI_SenseCode>
      return -1;
 8020a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8020a9e:	e05e      	b.n	8020b5e <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020aa0:	687b      	ldr	r3, [r7, #4]
 8020aa2:	3302      	adds	r3, #2
 8020aa4:	781b      	ldrb	r3, [r3, #0]
 8020aa6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8020aa8:	687b      	ldr	r3, [r7, #4]
 8020aaa:	3303      	adds	r3, #3
 8020aac:	781b      	ldrb	r3, [r3, #0]
 8020aae:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020ab0:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8020ab2:	687b      	ldr	r3, [r7, #4]
 8020ab4:	3304      	adds	r3, #4
 8020ab6:	781b      	ldrb	r3, [r3, #0]
 8020ab8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8020aba:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8020abc:	687a      	ldr	r2, [r7, #4]
 8020abe:	3205      	adds	r2, #5
 8020ac0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8020ac2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020ac4:	697b      	ldr	r3, [r7, #20]
 8020ac6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020aca:	687b      	ldr	r3, [r7, #4]
 8020acc:	3306      	adds	r3, #6
 8020ace:	781b      	ldrb	r3, [r3, #0]
 8020ad0:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8020ad2:	687b      	ldr	r3, [r7, #4]
 8020ad4:	3307      	adds	r3, #7
 8020ad6:	781b      	ldrb	r3, [r3, #0]
 8020ad8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020ada:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8020adc:	687b      	ldr	r3, [r7, #4]
 8020ade:	3308      	adds	r3, #8
 8020ae0:	781b      	ldrb	r3, [r3, #0]
 8020ae2:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8020ae4:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8020ae6:	687a      	ldr	r2, [r7, #4]
 8020ae8:	3209      	adds	r2, #9
 8020aea:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8020aec:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020aee:	697b      	ldr	r3, [r7, #20]
 8020af0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8020af4:	697b      	ldr	r3, [r7, #20]
 8020af6:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020afa:	697b      	ldr	r3, [r7, #20]
 8020afc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020b00:	7af9      	ldrb	r1, [r7, #11]
 8020b02:	68f8      	ldr	r0, [r7, #12]
 8020b04:	f000 fa02 	bl	8020f0c <SCSI_CheckAddressRange>
 8020b08:	4603      	mov	r3, r0
 8020b0a:	2b00      	cmp	r3, #0
 8020b0c:	da02      	bge.n	8020b14 <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8020b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8020b12:	e024      	b.n	8020b5e <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8020b14:	697b      	ldr	r3, [r7, #20]
 8020b16:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8020b1a:	697b      	ldr	r3, [r7, #20]
 8020b1c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020b20:	6979      	ldr	r1, [r7, #20]
 8020b22:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8020b26:	fb01 f303 	mul.w	r3, r1, r3
 8020b2a:	429a      	cmp	r2, r3
 8020b2c:	d00a      	beq.n	8020b44 <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020b2e:	697b      	ldr	r3, [r7, #20]
 8020b30:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020b34:	2320      	movs	r3, #32
 8020b36:	2205      	movs	r2, #5
 8020b38:	68f8      	ldr	r0, [r7, #12]
 8020b3a:	f7ff fe08 	bl	802074e <SCSI_SenseCode>
      return -1;
 8020b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8020b42:	e00c      	b.n	8020b5e <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8020b44:	697b      	ldr	r3, [r7, #20]
 8020b46:	2202      	movs	r2, #2
 8020b48:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8020b4a:	697b      	ldr	r3, [r7, #20]
 8020b4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020b50:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8020b52:	7afb      	ldrb	r3, [r7, #11]
 8020b54:	4619      	mov	r1, r3
 8020b56:	68f8      	ldr	r0, [r7, #12]
 8020b58:	f000 fa00 	bl	8020f5c <SCSI_ProcessRead>
 8020b5c:	4603      	mov	r3, r0
}
 8020b5e:	4618      	mov	r0, r3
 8020b60:	3718      	adds	r7, #24
 8020b62:	46bd      	mov	sp, r7
 8020b64:	bd80      	pop	{r7, pc}

08020b66 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020b66:	b580      	push	{r7, lr}
 8020b68:	b086      	sub	sp, #24
 8020b6a:	af00      	add	r7, sp, #0
 8020b6c:	60f8      	str	r0, [r7, #12]
 8020b6e:	460b      	mov	r3, r1
 8020b70:	607a      	str	r2, [r7, #4]
 8020b72:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020b74:	68fb      	ldr	r3, [r7, #12]
 8020b76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020b7a:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8020b7c:	697b      	ldr	r3, [r7, #20]
 8020b7e:	2b00      	cmp	r3, #0
 8020b80:	d102      	bne.n	8020b88 <SCSI_Write10+0x22>
  {
    return -1;
 8020b82:	f04f 33ff 	mov.w	r3, #4294967295
 8020b86:	e0af      	b.n	8020ce8 <SCSI_Write10+0x182>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8020b88:	697b      	ldr	r3, [r7, #20]
 8020b8a:	7a1b      	ldrb	r3, [r3, #8]
 8020b8c:	2b00      	cmp	r3, #0
 8020b8e:	f040 80a5 	bne.w	8020cdc <SCSI_Write10+0x176>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8020b92:	697b      	ldr	r3, [r7, #20]
 8020b94:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8020b98:	2b00      	cmp	r3, #0
 8020b9a:	d10a      	bne.n	8020bb2 <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020b9c:	697b      	ldr	r3, [r7, #20]
 8020b9e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020ba2:	2320      	movs	r3, #32
 8020ba4:	2205      	movs	r2, #5
 8020ba6:	68f8      	ldr	r0, [r7, #12]
 8020ba8:	f7ff fdd1 	bl	802074e <SCSI_SenseCode>
      return -1;
 8020bac:	f04f 33ff 	mov.w	r3, #4294967295
 8020bb0:	e09a      	b.n	8020ce8 <SCSI_Write10+0x182>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8020bb2:	697b      	ldr	r3, [r7, #20]
 8020bb4:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8020bb8:	b25b      	sxtb	r3, r3
 8020bba:	2b00      	cmp	r3, #0
 8020bbc:	da0a      	bge.n	8020bd4 <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020bbe:	697b      	ldr	r3, [r7, #20]
 8020bc0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020bc4:	2320      	movs	r3, #32
 8020bc6:	2205      	movs	r2, #5
 8020bc8:	68f8      	ldr	r0, [r7, #12]
 8020bca:	f7ff fdc0 	bl	802074e <SCSI_SenseCode>
      return -1;
 8020bce:	f04f 33ff 	mov.w	r3, #4294967295
 8020bd2:	e089      	b.n	8020ce8 <SCSI_Write10+0x182>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8020bd4:	68fb      	ldr	r3, [r7, #12]
 8020bd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020bda:	689b      	ldr	r3, [r3, #8]
 8020bdc:	7afa      	ldrb	r2, [r7, #11]
 8020bde:	4610      	mov	r0, r2
 8020be0:	4798      	blx	r3
 8020be2:	4603      	mov	r3, r0
 8020be4:	2b00      	cmp	r3, #0
 8020be6:	d008      	beq.n	8020bfa <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020be8:	7af9      	ldrb	r1, [r7, #11]
 8020bea:	233a      	movs	r3, #58	; 0x3a
 8020bec:	2202      	movs	r2, #2
 8020bee:	68f8      	ldr	r0, [r7, #12]
 8020bf0:	f7ff fdad 	bl	802074e <SCSI_SenseCode>
      return -1;
 8020bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8020bf8:	e076      	b.n	8020ce8 <SCSI_Write10+0x182>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8020bfa:	68fb      	ldr	r3, [r7, #12]
 8020bfc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020c00:	68db      	ldr	r3, [r3, #12]
 8020c02:	7afa      	ldrb	r2, [r7, #11]
 8020c04:	4610      	mov	r0, r2
 8020c06:	4798      	blx	r3
 8020c08:	4603      	mov	r3, r0
 8020c0a:	2b00      	cmp	r3, #0
 8020c0c:	d008      	beq.n	8020c20 <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8020c0e:	7af9      	ldrb	r1, [r7, #11]
 8020c10:	2327      	movs	r3, #39	; 0x27
 8020c12:	2202      	movs	r2, #2
 8020c14:	68f8      	ldr	r0, [r7, #12]
 8020c16:	f7ff fd9a 	bl	802074e <SCSI_SenseCode>
      return -1;
 8020c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8020c1e:	e063      	b.n	8020ce8 <SCSI_Write10+0x182>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020c20:	687b      	ldr	r3, [r7, #4]
 8020c22:	3302      	adds	r3, #2
 8020c24:	781b      	ldrb	r3, [r3, #0]
 8020c26:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8020c28:	687b      	ldr	r3, [r7, #4]
 8020c2a:	3303      	adds	r3, #3
 8020c2c:	781b      	ldrb	r3, [r3, #0]
 8020c2e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020c30:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8020c32:	687b      	ldr	r3, [r7, #4]
 8020c34:	3304      	adds	r3, #4
 8020c36:	781b      	ldrb	r3, [r3, #0]
 8020c38:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8020c3a:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8020c3c:	687a      	ldr	r2, [r7, #4]
 8020c3e:	3205      	adds	r2, #5
 8020c40:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8020c42:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020c44:	697b      	ldr	r3, [r7, #20]
 8020c46:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8020c4a:	687b      	ldr	r3, [r7, #4]
 8020c4c:	3307      	adds	r3, #7
 8020c4e:	781b      	ldrb	r3, [r3, #0]
 8020c50:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8020c52:	687a      	ldr	r2, [r7, #4]
 8020c54:	3208      	adds	r2, #8
 8020c56:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8020c58:	431a      	orrs	r2, r3
 8020c5a:	697b      	ldr	r3, [r7, #20]
 8020c5c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8020c60:	697b      	ldr	r3, [r7, #20]
 8020c62:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020c66:	697b      	ldr	r3, [r7, #20]
 8020c68:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020c6c:	7af9      	ldrb	r1, [r7, #11]
 8020c6e:	68f8      	ldr	r0, [r7, #12]
 8020c70:	f000 f94c 	bl	8020f0c <SCSI_CheckAddressRange>
 8020c74:	4603      	mov	r3, r0
 8020c76:	2b00      	cmp	r3, #0
 8020c78:	da02      	bge.n	8020c80 <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8020c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8020c7e:	e033      	b.n	8020ce8 <SCSI_Write10+0x182>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8020c80:	697b      	ldr	r3, [r7, #20]
 8020c82:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020c86:	697a      	ldr	r2, [r7, #20]
 8020c88:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8020c8c:	fb02 f303 	mul.w	r3, r2, r3
 8020c90:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8020c92:	697b      	ldr	r3, [r7, #20]
 8020c94:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8020c98:	693a      	ldr	r2, [r7, #16]
 8020c9a:	429a      	cmp	r2, r3
 8020c9c:	d00a      	beq.n	8020cb4 <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020c9e:	697b      	ldr	r3, [r7, #20]
 8020ca0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020ca4:	2320      	movs	r3, #32
 8020ca6:	2205      	movs	r2, #5
 8020ca8:	68f8      	ldr	r0, [r7, #12]
 8020caa:	f7ff fd50 	bl	802074e <SCSI_SenseCode>
      return -1;
 8020cae:	f04f 33ff 	mov.w	r3, #4294967295
 8020cb2:	e019      	b.n	8020ce8 <SCSI_Write10+0x182>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8020cb4:	693b      	ldr	r3, [r7, #16]
 8020cb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020cba:	bf28      	it	cs
 8020cbc:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8020cc0:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8020cc2:	697b      	ldr	r3, [r7, #20]
 8020cc4:	2201      	movs	r2, #1
 8020cc6:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8020cc8:	697b      	ldr	r3, [r7, #20]
 8020cca:	f103 0210 	add.w	r2, r3, #16
 8020cce:	693b      	ldr	r3, [r7, #16]
 8020cd0:	2101      	movs	r1, #1
 8020cd2:	68f8      	ldr	r0, [r7, #12]
 8020cd4:	f002 f87f 	bl	8022dd6 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8020cd8:	2300      	movs	r3, #0
 8020cda:	e005      	b.n	8020ce8 <SCSI_Write10+0x182>
    return SCSI_ProcessWrite(pdev, lun);
 8020cdc:	7afb      	ldrb	r3, [r7, #11]
 8020cde:	4619      	mov	r1, r3
 8020ce0:	68f8      	ldr	r0, [r7, #12]
 8020ce2:	f000 f9b4 	bl	802104e <SCSI_ProcessWrite>
 8020ce6:	4603      	mov	r3, r0
}
 8020ce8:	4618      	mov	r0, r3
 8020cea:	3718      	adds	r7, #24
 8020cec:	46bd      	mov	sp, r7
 8020cee:	bd80      	pop	{r7, pc}

08020cf0 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020cf0:	b580      	push	{r7, lr}
 8020cf2:	b086      	sub	sp, #24
 8020cf4:	af00      	add	r7, sp, #0
 8020cf6:	60f8      	str	r0, [r7, #12]
 8020cf8:	460b      	mov	r3, r1
 8020cfa:	607a      	str	r2, [r7, #4]
 8020cfc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020cfe:	68fb      	ldr	r3, [r7, #12]
 8020d00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020d04:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8020d06:	697b      	ldr	r3, [r7, #20]
 8020d08:	2b00      	cmp	r3, #0
 8020d0a:	d102      	bne.n	8020d12 <SCSI_Write12+0x22>
  {
    return -1;
 8020d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8020d10:	e0bf      	b.n	8020e92 <SCSI_Write12+0x1a2>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8020d12:	697b      	ldr	r3, [r7, #20]
 8020d14:	7a1b      	ldrb	r3, [r3, #8]
 8020d16:	2b00      	cmp	r3, #0
 8020d18:	f040 80b5 	bne.w	8020e86 <SCSI_Write12+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8020d1c:	697b      	ldr	r3, [r7, #20]
 8020d1e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8020d22:	2b00      	cmp	r3, #0
 8020d24:	d10a      	bne.n	8020d3c <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020d26:	697b      	ldr	r3, [r7, #20]
 8020d28:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020d2c:	2320      	movs	r3, #32
 8020d2e:	2205      	movs	r2, #5
 8020d30:	68f8      	ldr	r0, [r7, #12]
 8020d32:	f7ff fd0c 	bl	802074e <SCSI_SenseCode>
      return -1;
 8020d36:	f04f 33ff 	mov.w	r3, #4294967295
 8020d3a:	e0aa      	b.n	8020e92 <SCSI_Write12+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8020d3c:	697b      	ldr	r3, [r7, #20]
 8020d3e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8020d42:	b25b      	sxtb	r3, r3
 8020d44:	2b00      	cmp	r3, #0
 8020d46:	da0a      	bge.n	8020d5e <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020d48:	697b      	ldr	r3, [r7, #20]
 8020d4a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020d4e:	2320      	movs	r3, #32
 8020d50:	2205      	movs	r2, #5
 8020d52:	68f8      	ldr	r0, [r7, #12]
 8020d54:	f7ff fcfb 	bl	802074e <SCSI_SenseCode>
      return -1;
 8020d58:	f04f 33ff 	mov.w	r3, #4294967295
 8020d5c:	e099      	b.n	8020e92 <SCSI_Write12+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8020d5e:	68fb      	ldr	r3, [r7, #12]
 8020d60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020d64:	689b      	ldr	r3, [r3, #8]
 8020d66:	7afa      	ldrb	r2, [r7, #11]
 8020d68:	4610      	mov	r0, r2
 8020d6a:	4798      	blx	r3
 8020d6c:	4603      	mov	r3, r0
 8020d6e:	2b00      	cmp	r3, #0
 8020d70:	d00b      	beq.n	8020d8a <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020d72:	7af9      	ldrb	r1, [r7, #11]
 8020d74:	233a      	movs	r3, #58	; 0x3a
 8020d76:	2202      	movs	r2, #2
 8020d78:	68f8      	ldr	r0, [r7, #12]
 8020d7a:	f7ff fce8 	bl	802074e <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8020d7e:	697b      	ldr	r3, [r7, #20]
 8020d80:	2205      	movs	r2, #5
 8020d82:	721a      	strb	r2, [r3, #8]
      return -1;
 8020d84:	f04f 33ff 	mov.w	r3, #4294967295
 8020d88:	e083      	b.n	8020e92 <SCSI_Write12+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8020d8a:	68fb      	ldr	r3, [r7, #12]
 8020d8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020d90:	68db      	ldr	r3, [r3, #12]
 8020d92:	7afa      	ldrb	r2, [r7, #11]
 8020d94:	4610      	mov	r0, r2
 8020d96:	4798      	blx	r3
 8020d98:	4603      	mov	r3, r0
 8020d9a:	2b00      	cmp	r3, #0
 8020d9c:	d00b      	beq.n	8020db6 <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8020d9e:	7af9      	ldrb	r1, [r7, #11]
 8020da0:	2327      	movs	r3, #39	; 0x27
 8020da2:	2202      	movs	r2, #2
 8020da4:	68f8      	ldr	r0, [r7, #12]
 8020da6:	f7ff fcd2 	bl	802074e <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8020daa:	697b      	ldr	r3, [r7, #20]
 8020dac:	2205      	movs	r2, #5
 8020dae:	721a      	strb	r2, [r3, #8]
      return -1;
 8020db0:	f04f 33ff 	mov.w	r3, #4294967295
 8020db4:	e06d      	b.n	8020e92 <SCSI_Write12+0x1a2>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020db6:	687b      	ldr	r3, [r7, #4]
 8020db8:	3302      	adds	r3, #2
 8020dba:	781b      	ldrb	r3, [r3, #0]
 8020dbc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8020dbe:	687b      	ldr	r3, [r7, #4]
 8020dc0:	3303      	adds	r3, #3
 8020dc2:	781b      	ldrb	r3, [r3, #0]
 8020dc4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020dc6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8020dc8:	687b      	ldr	r3, [r7, #4]
 8020dca:	3304      	adds	r3, #4
 8020dcc:	781b      	ldrb	r3, [r3, #0]
 8020dce:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8020dd0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8020dd2:	687a      	ldr	r2, [r7, #4]
 8020dd4:	3205      	adds	r2, #5
 8020dd6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8020dd8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020dda:	697b      	ldr	r3, [r7, #20]
 8020ddc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020de0:	687b      	ldr	r3, [r7, #4]
 8020de2:	3306      	adds	r3, #6
 8020de4:	781b      	ldrb	r3, [r3, #0]
 8020de6:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8020de8:	687b      	ldr	r3, [r7, #4]
 8020dea:	3307      	adds	r3, #7
 8020dec:	781b      	ldrb	r3, [r3, #0]
 8020dee:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020df0:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8020df2:	687b      	ldr	r3, [r7, #4]
 8020df4:	3308      	adds	r3, #8
 8020df6:	781b      	ldrb	r3, [r3, #0]
 8020df8:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8020dfa:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8020dfc:	687a      	ldr	r2, [r7, #4]
 8020dfe:	3209      	adds	r2, #9
 8020e00:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8020e02:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020e04:	697b      	ldr	r3, [r7, #20]
 8020e06:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8020e0a:	697b      	ldr	r3, [r7, #20]
 8020e0c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020e10:	697b      	ldr	r3, [r7, #20]
 8020e12:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020e16:	7af9      	ldrb	r1, [r7, #11]
 8020e18:	68f8      	ldr	r0, [r7, #12]
 8020e1a:	f000 f877 	bl	8020f0c <SCSI_CheckAddressRange>
 8020e1e:	4603      	mov	r3, r0
 8020e20:	2b00      	cmp	r3, #0
 8020e22:	da02      	bge.n	8020e2a <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8020e24:	f04f 33ff 	mov.w	r3, #4294967295
 8020e28:	e033      	b.n	8020e92 <SCSI_Write12+0x1a2>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8020e2a:	697b      	ldr	r3, [r7, #20]
 8020e2c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020e30:	697a      	ldr	r2, [r7, #20]
 8020e32:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8020e36:	fb02 f303 	mul.w	r3, r2, r3
 8020e3a:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8020e3c:	697b      	ldr	r3, [r7, #20]
 8020e3e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8020e42:	693a      	ldr	r2, [r7, #16]
 8020e44:	429a      	cmp	r2, r3
 8020e46:	d00a      	beq.n	8020e5e <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020e48:	697b      	ldr	r3, [r7, #20]
 8020e4a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020e4e:	2320      	movs	r3, #32
 8020e50:	2205      	movs	r2, #5
 8020e52:	68f8      	ldr	r0, [r7, #12]
 8020e54:	f7ff fc7b 	bl	802074e <SCSI_SenseCode>
      return -1;
 8020e58:	f04f 33ff 	mov.w	r3, #4294967295
 8020e5c:	e019      	b.n	8020e92 <SCSI_Write12+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8020e5e:	693b      	ldr	r3, [r7, #16]
 8020e60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020e64:	bf28      	it	cs
 8020e66:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8020e6a:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8020e6c:	697b      	ldr	r3, [r7, #20]
 8020e6e:	2201      	movs	r2, #1
 8020e70:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8020e72:	697b      	ldr	r3, [r7, #20]
 8020e74:	f103 0210 	add.w	r2, r3, #16
 8020e78:	693b      	ldr	r3, [r7, #16]
 8020e7a:	2101      	movs	r1, #1
 8020e7c:	68f8      	ldr	r0, [r7, #12]
 8020e7e:	f001 ffaa 	bl	8022dd6 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8020e82:	2300      	movs	r3, #0
 8020e84:	e005      	b.n	8020e92 <SCSI_Write12+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 8020e86:	7afb      	ldrb	r3, [r7, #11]
 8020e88:	4619      	mov	r1, r3
 8020e8a:	68f8      	ldr	r0, [r7, #12]
 8020e8c:	f000 f8df 	bl	802104e <SCSI_ProcessWrite>
 8020e90:	4603      	mov	r3, r0
}
 8020e92:	4618      	mov	r0, r3
 8020e94:	3718      	adds	r7, #24
 8020e96:	46bd      	mov	sp, r7
 8020e98:	bd80      	pop	{r7, pc}

08020e9a <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020e9a:	b580      	push	{r7, lr}
 8020e9c:	b086      	sub	sp, #24
 8020e9e:	af00      	add	r7, sp, #0
 8020ea0:	60f8      	str	r0, [r7, #12]
 8020ea2:	460b      	mov	r3, r1
 8020ea4:	607a      	str	r2, [r7, #4]
 8020ea6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020ea8:	68fb      	ldr	r3, [r7, #12]
 8020eaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020eae:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020eb0:	697b      	ldr	r3, [r7, #20]
 8020eb2:	2b00      	cmp	r3, #0
 8020eb4:	d102      	bne.n	8020ebc <SCSI_Verify10+0x22>
  {
    return -1;
 8020eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8020eba:	e023      	b.n	8020f04 <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8020ebc:	687b      	ldr	r3, [r7, #4]
 8020ebe:	3301      	adds	r3, #1
 8020ec0:	781b      	ldrb	r3, [r3, #0]
 8020ec2:	f003 0302 	and.w	r3, r3, #2
 8020ec6:	2b00      	cmp	r3, #0
 8020ec8:	d008      	beq.n	8020edc <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8020eca:	7af9      	ldrb	r1, [r7, #11]
 8020ecc:	2324      	movs	r3, #36	; 0x24
 8020ece:	2205      	movs	r2, #5
 8020ed0:	68f8      	ldr	r0, [r7, #12]
 8020ed2:	f7ff fc3c 	bl	802074e <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8020ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8020eda:	e013      	b.n	8020f04 <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8020edc:	697b      	ldr	r3, [r7, #20]
 8020ede:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020ee2:	697b      	ldr	r3, [r7, #20]
 8020ee4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020ee8:	7af9      	ldrb	r1, [r7, #11]
 8020eea:	68f8      	ldr	r0, [r7, #12]
 8020eec:	f000 f80e 	bl	8020f0c <SCSI_CheckAddressRange>
 8020ef0:	4603      	mov	r3, r0
 8020ef2:	2b00      	cmp	r3, #0
 8020ef4:	da02      	bge.n	8020efc <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 8020ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8020efa:	e003      	b.n	8020f04 <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 8020efc:	697b      	ldr	r3, [r7, #20]
 8020efe:	2200      	movs	r2, #0
 8020f00:	60da      	str	r2, [r3, #12]

  return 0;
 8020f02:	2300      	movs	r3, #0
}
 8020f04:	4618      	mov	r0, r3
 8020f06:	3718      	adds	r7, #24
 8020f08:	46bd      	mov	sp, r7
 8020f0a:	bd80      	pop	{r7, pc}

08020f0c <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8020f0c:	b580      	push	{r7, lr}
 8020f0e:	b086      	sub	sp, #24
 8020f10:	af00      	add	r7, sp, #0
 8020f12:	60f8      	str	r0, [r7, #12]
 8020f14:	607a      	str	r2, [r7, #4]
 8020f16:	603b      	str	r3, [r7, #0]
 8020f18:	460b      	mov	r3, r1
 8020f1a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020f1c:	68fb      	ldr	r3, [r7, #12]
 8020f1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020f22:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020f24:	697b      	ldr	r3, [r7, #20]
 8020f26:	2b00      	cmp	r3, #0
 8020f28:	d102      	bne.n	8020f30 <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 8020f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8020f2e:	e011      	b.n	8020f54 <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8020f30:	687a      	ldr	r2, [r7, #4]
 8020f32:	683b      	ldr	r3, [r7, #0]
 8020f34:	441a      	add	r2, r3
 8020f36:	697b      	ldr	r3, [r7, #20]
 8020f38:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8020f3c:	429a      	cmp	r2, r3
 8020f3e:	d908      	bls.n	8020f52 <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8020f40:	7af9      	ldrb	r1, [r7, #11]
 8020f42:	2321      	movs	r3, #33	; 0x21
 8020f44:	2205      	movs	r2, #5
 8020f46:	68f8      	ldr	r0, [r7, #12]
 8020f48:	f7ff fc01 	bl	802074e <SCSI_SenseCode>
    return -1;
 8020f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8020f50:	e000      	b.n	8020f54 <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 8020f52:	2300      	movs	r3, #0
}
 8020f54:	4618      	mov	r0, r3
 8020f56:	3718      	adds	r7, #24
 8020f58:	46bd      	mov	sp, r7
 8020f5a:	bd80      	pop	{r7, pc}

08020f5c <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8020f5c:	b590      	push	{r4, r7, lr}
 8020f5e:	b085      	sub	sp, #20
 8020f60:	af00      	add	r7, sp, #0
 8020f62:	6078      	str	r0, [r7, #4]
 8020f64:	460b      	mov	r3, r1
 8020f66:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020f68:	687b      	ldr	r3, [r7, #4]
 8020f6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020f6e:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8020f70:	68fb      	ldr	r3, [r7, #12]
 8020f72:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020f76:	68fa      	ldr	r2, [r7, #12]
 8020f78:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8020f7c:	fb02 f303 	mul.w	r3, r2, r3
 8020f80:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8020f82:	68fb      	ldr	r3, [r7, #12]
 8020f84:	2b00      	cmp	r3, #0
 8020f86:	d102      	bne.n	8020f8e <SCSI_ProcessRead+0x32>
  {
    return -1;
 8020f88:	f04f 33ff 	mov.w	r3, #4294967295
 8020f8c:	e05b      	b.n	8021046 <SCSI_ProcessRead+0xea>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8020f8e:	68bb      	ldr	r3, [r7, #8]
 8020f90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020f94:	bf28      	it	cs
 8020f96:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8020f9a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8020f9c:	687b      	ldr	r3, [r7, #4]
 8020f9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020fa2:	691c      	ldr	r4, [r3, #16]
 8020fa4:	68fb      	ldr	r3, [r7, #12]
 8020fa6:	f103 0110 	add.w	r1, r3, #16
 8020faa:	68fb      	ldr	r3, [r7, #12]
 8020fac:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8020fb0:	68fb      	ldr	r3, [r7, #12]
 8020fb2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020fb6:	4618      	mov	r0, r3
 8020fb8:	68bb      	ldr	r3, [r7, #8]
 8020fba:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8020fbe:	b29b      	uxth	r3, r3
 8020fc0:	78f8      	ldrb	r0, [r7, #3]
 8020fc2:	47a0      	blx	r4
 8020fc4:	4603      	mov	r3, r0
 8020fc6:	2b00      	cmp	r3, #0
 8020fc8:	da08      	bge.n	8020fdc <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8020fca:	78f9      	ldrb	r1, [r7, #3]
 8020fcc:	2311      	movs	r3, #17
 8020fce:	2204      	movs	r2, #4
 8020fd0:	6878      	ldr	r0, [r7, #4]
 8020fd2:	f7ff fbbc 	bl	802074e <SCSI_SenseCode>
    return -1;
 8020fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8020fda:	e034      	b.n	8021046 <SCSI_ProcessRead+0xea>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8020fdc:	68fb      	ldr	r3, [r7, #12]
 8020fde:	f103 0210 	add.w	r2, r3, #16
 8020fe2:	68bb      	ldr	r3, [r7, #8]
 8020fe4:	2181      	movs	r1, #129	; 0x81
 8020fe6:	6878      	ldr	r0, [r7, #4]
 8020fe8:	f001 fed4 	bl	8022d94 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8020fec:	68fb      	ldr	r3, [r7, #12]
 8020fee:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020ff2:	68fb      	ldr	r3, [r7, #12]
 8020ff4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020ff8:	4619      	mov	r1, r3
 8020ffa:	68bb      	ldr	r3, [r7, #8]
 8020ffc:	fbb3 f3f1 	udiv	r3, r3, r1
 8021000:	441a      	add	r2, r3
 8021002:	68fb      	ldr	r3, [r7, #12]
 8021004:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8021008:	68fb      	ldr	r3, [r7, #12]
 802100a:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 802100e:	68fb      	ldr	r3, [r7, #12]
 8021010:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8021014:	4619      	mov	r1, r3
 8021016:	68bb      	ldr	r3, [r7, #8]
 8021018:	fbb3 f3f1 	udiv	r3, r3, r1
 802101c:	1ad2      	subs	r2, r2, r3
 802101e:	68fb      	ldr	r3, [r7, #12]
 8021020:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8021024:	68fb      	ldr	r3, [r7, #12]
 8021026:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 802102a:	68bb      	ldr	r3, [r7, #8]
 802102c:	1ad2      	subs	r2, r2, r3
 802102e:	68fb      	ldr	r3, [r7, #12]
 8021030:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8021034:	68fb      	ldr	r3, [r7, #12]
 8021036:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 802103a:	2b00      	cmp	r3, #0
 802103c:	d102      	bne.n	8021044 <SCSI_ProcessRead+0xe8>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 802103e:	68fb      	ldr	r3, [r7, #12]
 8021040:	2203      	movs	r2, #3
 8021042:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8021044:	2300      	movs	r3, #0
}
 8021046:	4618      	mov	r0, r3
 8021048:	3714      	adds	r7, #20
 802104a:	46bd      	mov	sp, r7
 802104c:	bd90      	pop	{r4, r7, pc}

0802104e <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 802104e:	b590      	push	{r4, r7, lr}
 8021050:	b085      	sub	sp, #20
 8021052:	af00      	add	r7, sp, #0
 8021054:	6078      	str	r0, [r7, #4]
 8021056:	460b      	mov	r3, r1
 8021058:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 802105a:	687b      	ldr	r3, [r7, #4]
 802105c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8021060:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8021062:	68fb      	ldr	r3, [r7, #12]
 8021064:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8021068:	68fa      	ldr	r2, [r7, #12]
 802106a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 802106e:	fb02 f303 	mul.w	r3, r2, r3
 8021072:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8021074:	68fb      	ldr	r3, [r7, #12]
 8021076:	2b00      	cmp	r3, #0
 8021078:	d102      	bne.n	8021080 <SCSI_ProcessWrite+0x32>
  {
    return -1;
 802107a:	f04f 33ff 	mov.w	r3, #4294967295
 802107e:	e06b      	b.n	8021158 <SCSI_ProcessWrite+0x10a>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8021080:	68bb      	ldr	r3, [r7, #8]
 8021082:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021086:	bf28      	it	cs
 8021088:	f44f 7300 	movcs.w	r3, #512	; 0x200
 802108c:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 802108e:	687b      	ldr	r3, [r7, #4]
 8021090:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8021094:	695c      	ldr	r4, [r3, #20]
 8021096:	68fb      	ldr	r3, [r7, #12]
 8021098:	f103 0110 	add.w	r1, r3, #16
 802109c:	68fb      	ldr	r3, [r7, #12]
 802109e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 80210a2:	68fb      	ldr	r3, [r7, #12]
 80210a4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80210a8:	4618      	mov	r0, r3
 80210aa:	68bb      	ldr	r3, [r7, #8]
 80210ac:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80210b0:	b29b      	uxth	r3, r3
 80210b2:	78f8      	ldrb	r0, [r7, #3]
 80210b4:	47a0      	blx	r4
 80210b6:	4603      	mov	r3, r0
 80210b8:	2b00      	cmp	r3, #0
 80210ba:	da08      	bge.n	80210ce <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 80210bc:	78f9      	ldrb	r1, [r7, #3]
 80210be:	2303      	movs	r3, #3
 80210c0:	2204      	movs	r2, #4
 80210c2:	6878      	ldr	r0, [r7, #4]
 80210c4:	f7ff fb43 	bl	802074e <SCSI_SenseCode>
    return -1;
 80210c8:	f04f 33ff 	mov.w	r3, #4294967295
 80210cc:	e044      	b.n	8021158 <SCSI_ProcessWrite+0x10a>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80210ce:	68fb      	ldr	r3, [r7, #12]
 80210d0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80210d4:	68fb      	ldr	r3, [r7, #12]
 80210d6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80210da:	4619      	mov	r1, r3
 80210dc:	68bb      	ldr	r3, [r7, #8]
 80210de:	fbb3 f3f1 	udiv	r3, r3, r1
 80210e2:	441a      	add	r2, r3
 80210e4:	68fb      	ldr	r3, [r7, #12]
 80210e6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80210ea:	68fb      	ldr	r3, [r7, #12]
 80210ec:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 80210f0:	68fb      	ldr	r3, [r7, #12]
 80210f2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80210f6:	4619      	mov	r1, r3
 80210f8:	68bb      	ldr	r3, [r7, #8]
 80210fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80210fe:	1ad2      	subs	r2, r2, r3
 8021100:	68fb      	ldr	r3, [r7, #12]
 8021102:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8021106:	68fb      	ldr	r3, [r7, #12]
 8021108:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 802110c:	68bb      	ldr	r3, [r7, #8]
 802110e:	1ad2      	subs	r2, r2, r3
 8021110:	68fb      	ldr	r3, [r7, #12]
 8021112:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8021116:	68fb      	ldr	r3, [r7, #12]
 8021118:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 802111c:	2b00      	cmp	r3, #0
 802111e:	d104      	bne.n	802112a <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8021120:	2100      	movs	r1, #0
 8021122:	6878      	ldr	r0, [r7, #4]
 8021124:	f7fe fdd8 	bl	801fcd8 <MSC_BOT_SendCSW>
 8021128:	e015      	b.n	8021156 <SCSI_ProcessWrite+0x108>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 802112a:	68fb      	ldr	r3, [r7, #12]
 802112c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8021130:	68fa      	ldr	r2, [r7, #12]
 8021132:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8021136:	fb02 f303 	mul.w	r3, r2, r3
 802113a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802113e:	bf28      	it	cs
 8021140:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8021144:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8021146:	68fb      	ldr	r3, [r7, #12]
 8021148:	f103 0210 	add.w	r2, r3, #16
 802114c:	68bb      	ldr	r3, [r7, #8]
 802114e:	2101      	movs	r1, #1
 8021150:	6878      	ldr	r0, [r7, #4]
 8021152:	f001 fe40 	bl	8022dd6 <USBD_LL_PrepareReceive>
  }

  return 0;
 8021156:	2300      	movs	r3, #0
}
 8021158:	4618      	mov	r0, r3
 802115a:	3714      	adds	r7, #20
 802115c:	46bd      	mov	sp, r7
 802115e:	bd90      	pop	{r4, r7, pc}

08021160 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8021160:	b480      	push	{r7}
 8021162:	b087      	sub	sp, #28
 8021164:	af00      	add	r7, sp, #0
 8021166:	60f8      	str	r0, [r7, #12]
 8021168:	60b9      	str	r1, [r7, #8]
 802116a:	4613      	mov	r3, r2
 802116c:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 802116e:	88fb      	ldrh	r3, [r7, #6]
 8021170:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8021172:	68fb      	ldr	r3, [r7, #12]
 8021174:	2b00      	cmp	r3, #0
 8021176:	d102      	bne.n	802117e <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8021178:	f04f 33ff 	mov.w	r3, #4294967295
 802117c:	e013      	b.n	80211a6 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 802117e:	8afa      	ldrh	r2, [r7, #22]
 8021180:	68fb      	ldr	r3, [r7, #12]
 8021182:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8021184:	e00b      	b.n	802119e <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8021186:	8afb      	ldrh	r3, [r7, #22]
 8021188:	3b01      	subs	r3, #1
 802118a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 802118c:	8afb      	ldrh	r3, [r7, #22]
 802118e:	68ba      	ldr	r2, [r7, #8]
 8021190:	441a      	add	r2, r3
 8021192:	8afb      	ldrh	r3, [r7, #22]
 8021194:	7811      	ldrb	r1, [r2, #0]
 8021196:	68fa      	ldr	r2, [r7, #12]
 8021198:	4413      	add	r3, r2
 802119a:	460a      	mov	r2, r1
 802119c:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 802119e:	8afb      	ldrh	r3, [r7, #22]
 80211a0:	2b00      	cmp	r3, #0
 80211a2:	d1f0      	bne.n	8021186 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 80211a4:	2300      	movs	r3, #0
}
 80211a6:	4618      	mov	r0, r3
 80211a8:	371c      	adds	r7, #28
 80211aa:	46bd      	mov	sp, r7
 80211ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211b0:	4770      	bx	lr

080211b2 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80211b2:	b580      	push	{r7, lr}
 80211b4:	b086      	sub	sp, #24
 80211b6:	af00      	add	r7, sp, #0
 80211b8:	60f8      	str	r0, [r7, #12]
 80211ba:	60b9      	str	r1, [r7, #8]
 80211bc:	4613      	mov	r3, r2
 80211be:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80211c0:	68fb      	ldr	r3, [r7, #12]
 80211c2:	2b00      	cmp	r3, #0
 80211c4:	d101      	bne.n	80211ca <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80211c6:	2303      	movs	r3, #3
 80211c8:	e01f      	b.n	802120a <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80211ca:	68fb      	ldr	r3, [r7, #12]
 80211cc:	2200      	movs	r2, #0
 80211ce:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80211d2:	68fb      	ldr	r3, [r7, #12]
 80211d4:	2200      	movs	r2, #0
 80211d6:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80211da:	68fb      	ldr	r3, [r7, #12]
 80211dc:	2200      	movs	r2, #0
 80211de:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80211e2:	68bb      	ldr	r3, [r7, #8]
 80211e4:	2b00      	cmp	r3, #0
 80211e6:	d003      	beq.n	80211f0 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80211e8:	68fb      	ldr	r3, [r7, #12]
 80211ea:	68ba      	ldr	r2, [r7, #8]
 80211ec:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80211f0:	68fb      	ldr	r3, [r7, #12]
 80211f2:	2201      	movs	r2, #1
 80211f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80211f8:	68fb      	ldr	r3, [r7, #12]
 80211fa:	79fa      	ldrb	r2, [r7, #7]
 80211fc:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80211fe:	68f8      	ldr	r0, [r7, #12]
 8021200:	f001 fc74 	bl	8022aec <USBD_LL_Init>
 8021204:	4603      	mov	r3, r0
 8021206:	75fb      	strb	r3, [r7, #23]

  return ret;
 8021208:	7dfb      	ldrb	r3, [r7, #23]
}
 802120a:	4618      	mov	r0, r3
 802120c:	3718      	adds	r7, #24
 802120e:	46bd      	mov	sp, r7
 8021210:	bd80      	pop	{r7, pc}

08021212 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8021212:	b580      	push	{r7, lr}
 8021214:	b084      	sub	sp, #16
 8021216:	af00      	add	r7, sp, #0
 8021218:	6078      	str	r0, [r7, #4]
 802121a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 802121c:	2300      	movs	r3, #0
 802121e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8021220:	683b      	ldr	r3, [r7, #0]
 8021222:	2b00      	cmp	r3, #0
 8021224:	d101      	bne.n	802122a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8021226:	2303      	movs	r3, #3
 8021228:	e016      	b.n	8021258 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 802122a:	687b      	ldr	r3, [r7, #4]
 802122c:	683a      	ldr	r2, [r7, #0]
 802122e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8021232:	687b      	ldr	r3, [r7, #4]
 8021234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802123a:	2b00      	cmp	r3, #0
 802123c:	d00b      	beq.n	8021256 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 802123e:	687b      	ldr	r3, [r7, #4]
 8021240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021246:	f107 020e 	add.w	r2, r7, #14
 802124a:	4610      	mov	r0, r2
 802124c:	4798      	blx	r3
 802124e:	4602      	mov	r2, r0
 8021250:	687b      	ldr	r3, [r7, #4]
 8021252:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8021256:	2300      	movs	r3, #0
}
 8021258:	4618      	mov	r0, r3
 802125a:	3710      	adds	r7, #16
 802125c:	46bd      	mov	sp, r7
 802125e:	bd80      	pop	{r7, pc}

08021260 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8021260:	b580      	push	{r7, lr}
 8021262:	b082      	sub	sp, #8
 8021264:	af00      	add	r7, sp, #0
 8021266:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8021268:	6878      	ldr	r0, [r7, #4]
 802126a:	f001 fc8b 	bl	8022b84 <USBD_LL_Start>
 802126e:	4603      	mov	r3, r0
}
 8021270:	4618      	mov	r0, r3
 8021272:	3708      	adds	r7, #8
 8021274:	46bd      	mov	sp, r7
 8021276:	bd80      	pop	{r7, pc}

08021278 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8021278:	b480      	push	{r7}
 802127a:	b083      	sub	sp, #12
 802127c:	af00      	add	r7, sp, #0
 802127e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8021280:	2300      	movs	r3, #0
}
 8021282:	4618      	mov	r0, r3
 8021284:	370c      	adds	r7, #12
 8021286:	46bd      	mov	sp, r7
 8021288:	f85d 7b04 	ldr.w	r7, [sp], #4
 802128c:	4770      	bx	lr

0802128e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 802128e:	b580      	push	{r7, lr}
 8021290:	b084      	sub	sp, #16
 8021292:	af00      	add	r7, sp, #0
 8021294:	6078      	str	r0, [r7, #4]
 8021296:	460b      	mov	r3, r1
 8021298:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 802129a:	2303      	movs	r3, #3
 802129c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 802129e:	687b      	ldr	r3, [r7, #4]
 80212a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80212a4:	2b00      	cmp	r3, #0
 80212a6:	d009      	beq.n	80212bc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80212a8:	687b      	ldr	r3, [r7, #4]
 80212aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80212ae:	681b      	ldr	r3, [r3, #0]
 80212b0:	78fa      	ldrb	r2, [r7, #3]
 80212b2:	4611      	mov	r1, r2
 80212b4:	6878      	ldr	r0, [r7, #4]
 80212b6:	4798      	blx	r3
 80212b8:	4603      	mov	r3, r0
 80212ba:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80212bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80212be:	4618      	mov	r0, r3
 80212c0:	3710      	adds	r7, #16
 80212c2:	46bd      	mov	sp, r7
 80212c4:	bd80      	pop	{r7, pc}

080212c6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80212c6:	b580      	push	{r7, lr}
 80212c8:	b082      	sub	sp, #8
 80212ca:	af00      	add	r7, sp, #0
 80212cc:	6078      	str	r0, [r7, #4]
 80212ce:	460b      	mov	r3, r1
 80212d0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80212d2:	687b      	ldr	r3, [r7, #4]
 80212d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80212d8:	2b00      	cmp	r3, #0
 80212da:	d007      	beq.n	80212ec <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80212dc:	687b      	ldr	r3, [r7, #4]
 80212de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80212e2:	685b      	ldr	r3, [r3, #4]
 80212e4:	78fa      	ldrb	r2, [r7, #3]
 80212e6:	4611      	mov	r1, r2
 80212e8:	6878      	ldr	r0, [r7, #4]
 80212ea:	4798      	blx	r3
  }

  return USBD_OK;
 80212ec:	2300      	movs	r3, #0
}
 80212ee:	4618      	mov	r0, r3
 80212f0:	3708      	adds	r7, #8
 80212f2:	46bd      	mov	sp, r7
 80212f4:	bd80      	pop	{r7, pc}

080212f6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80212f6:	b580      	push	{r7, lr}
 80212f8:	b084      	sub	sp, #16
 80212fa:	af00      	add	r7, sp, #0
 80212fc:	6078      	str	r0, [r7, #4]
 80212fe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8021300:	687b      	ldr	r3, [r7, #4]
 8021302:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8021306:	6839      	ldr	r1, [r7, #0]
 8021308:	4618      	mov	r0, r3
 802130a:	f000 ffb9 	bl	8022280 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 802130e:	687b      	ldr	r3, [r7, #4]
 8021310:	2201      	movs	r2, #1
 8021312:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8021316:	687b      	ldr	r3, [r7, #4]
 8021318:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 802131c:	461a      	mov	r2, r3
 802131e:	687b      	ldr	r3, [r7, #4]
 8021320:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8021324:	687b      	ldr	r3, [r7, #4]
 8021326:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 802132a:	f003 031f 	and.w	r3, r3, #31
 802132e:	2b02      	cmp	r3, #2
 8021330:	d01a      	beq.n	8021368 <USBD_LL_SetupStage+0x72>
 8021332:	2b02      	cmp	r3, #2
 8021334:	d822      	bhi.n	802137c <USBD_LL_SetupStage+0x86>
 8021336:	2b00      	cmp	r3, #0
 8021338:	d002      	beq.n	8021340 <USBD_LL_SetupStage+0x4a>
 802133a:	2b01      	cmp	r3, #1
 802133c:	d00a      	beq.n	8021354 <USBD_LL_SetupStage+0x5e>
 802133e:	e01d      	b.n	802137c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8021340:	687b      	ldr	r3, [r7, #4]
 8021342:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8021346:	4619      	mov	r1, r3
 8021348:	6878      	ldr	r0, [r7, #4]
 802134a:	f000 fa61 	bl	8021810 <USBD_StdDevReq>
 802134e:	4603      	mov	r3, r0
 8021350:	73fb      	strb	r3, [r7, #15]
      break;
 8021352:	e020      	b.n	8021396 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8021354:	687b      	ldr	r3, [r7, #4]
 8021356:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 802135a:	4619      	mov	r1, r3
 802135c:	6878      	ldr	r0, [r7, #4]
 802135e:	f000 fac5 	bl	80218ec <USBD_StdItfReq>
 8021362:	4603      	mov	r3, r0
 8021364:	73fb      	strb	r3, [r7, #15]
      break;
 8021366:	e016      	b.n	8021396 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8021368:	687b      	ldr	r3, [r7, #4]
 802136a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 802136e:	4619      	mov	r1, r3
 8021370:	6878      	ldr	r0, [r7, #4]
 8021372:	f000 fb04 	bl	802197e <USBD_StdEPReq>
 8021376:	4603      	mov	r3, r0
 8021378:	73fb      	strb	r3, [r7, #15]
      break;
 802137a:	e00c      	b.n	8021396 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 802137c:	687b      	ldr	r3, [r7, #4]
 802137e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8021382:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8021386:	b2db      	uxtb	r3, r3
 8021388:	4619      	mov	r1, r3
 802138a:	6878      	ldr	r0, [r7, #4]
 802138c:	f001 fc79 	bl	8022c82 <USBD_LL_StallEP>
 8021390:	4603      	mov	r3, r0
 8021392:	73fb      	strb	r3, [r7, #15]
      break;
 8021394:	bf00      	nop
  }

  return ret;
 8021396:	7bfb      	ldrb	r3, [r7, #15]
}
 8021398:	4618      	mov	r0, r3
 802139a:	3710      	adds	r7, #16
 802139c:	46bd      	mov	sp, r7
 802139e:	bd80      	pop	{r7, pc}

080213a0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80213a0:	b580      	push	{r7, lr}
 80213a2:	b086      	sub	sp, #24
 80213a4:	af00      	add	r7, sp, #0
 80213a6:	60f8      	str	r0, [r7, #12]
 80213a8:	460b      	mov	r3, r1
 80213aa:	607a      	str	r2, [r7, #4]
 80213ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80213ae:	7afb      	ldrb	r3, [r7, #11]
 80213b0:	2b00      	cmp	r3, #0
 80213b2:	d138      	bne.n	8021426 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80213b4:	68fb      	ldr	r3, [r7, #12]
 80213b6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80213ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80213bc:	68fb      	ldr	r3, [r7, #12]
 80213be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80213c2:	2b03      	cmp	r3, #3
 80213c4:	d14a      	bne.n	802145c <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80213c6:	693b      	ldr	r3, [r7, #16]
 80213c8:	689a      	ldr	r2, [r3, #8]
 80213ca:	693b      	ldr	r3, [r7, #16]
 80213cc:	68db      	ldr	r3, [r3, #12]
 80213ce:	429a      	cmp	r2, r3
 80213d0:	d913      	bls.n	80213fa <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80213d2:	693b      	ldr	r3, [r7, #16]
 80213d4:	689a      	ldr	r2, [r3, #8]
 80213d6:	693b      	ldr	r3, [r7, #16]
 80213d8:	68db      	ldr	r3, [r3, #12]
 80213da:	1ad2      	subs	r2, r2, r3
 80213dc:	693b      	ldr	r3, [r7, #16]
 80213de:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80213e0:	693b      	ldr	r3, [r7, #16]
 80213e2:	68da      	ldr	r2, [r3, #12]
 80213e4:	693b      	ldr	r3, [r7, #16]
 80213e6:	689b      	ldr	r3, [r3, #8]
 80213e8:	4293      	cmp	r3, r2
 80213ea:	bf28      	it	cs
 80213ec:	4613      	movcs	r3, r2
 80213ee:	461a      	mov	r2, r3
 80213f0:	6879      	ldr	r1, [r7, #4]
 80213f2:	68f8      	ldr	r0, [r7, #12]
 80213f4:	f001 f81b 	bl	802242e <USBD_CtlContinueRx>
 80213f8:	e030      	b.n	802145c <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80213fa:	68fb      	ldr	r3, [r7, #12]
 80213fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021400:	b2db      	uxtb	r3, r3
 8021402:	2b03      	cmp	r3, #3
 8021404:	d10b      	bne.n	802141e <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8021406:	68fb      	ldr	r3, [r7, #12]
 8021408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802140c:	691b      	ldr	r3, [r3, #16]
 802140e:	2b00      	cmp	r3, #0
 8021410:	d005      	beq.n	802141e <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8021412:	68fb      	ldr	r3, [r7, #12]
 8021414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021418:	691b      	ldr	r3, [r3, #16]
 802141a:	68f8      	ldr	r0, [r7, #12]
 802141c:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 802141e:	68f8      	ldr	r0, [r7, #12]
 8021420:	f001 f816 	bl	8022450 <USBD_CtlSendStatus>
 8021424:	e01a      	b.n	802145c <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021426:	68fb      	ldr	r3, [r7, #12]
 8021428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802142c:	b2db      	uxtb	r3, r3
 802142e:	2b03      	cmp	r3, #3
 8021430:	d114      	bne.n	802145c <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8021432:	68fb      	ldr	r3, [r7, #12]
 8021434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021438:	699b      	ldr	r3, [r3, #24]
 802143a:	2b00      	cmp	r3, #0
 802143c:	d00e      	beq.n	802145c <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 802143e:	68fb      	ldr	r3, [r7, #12]
 8021440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021444:	699b      	ldr	r3, [r3, #24]
 8021446:	7afa      	ldrb	r2, [r7, #11]
 8021448:	4611      	mov	r1, r2
 802144a:	68f8      	ldr	r0, [r7, #12]
 802144c:	4798      	blx	r3
 802144e:	4603      	mov	r3, r0
 8021450:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8021452:	7dfb      	ldrb	r3, [r7, #23]
 8021454:	2b00      	cmp	r3, #0
 8021456:	d001      	beq.n	802145c <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8021458:	7dfb      	ldrb	r3, [r7, #23]
 802145a:	e000      	b.n	802145e <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 802145c:	2300      	movs	r3, #0
}
 802145e:	4618      	mov	r0, r3
 8021460:	3718      	adds	r7, #24
 8021462:	46bd      	mov	sp, r7
 8021464:	bd80      	pop	{r7, pc}

08021466 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8021466:	b580      	push	{r7, lr}
 8021468:	b086      	sub	sp, #24
 802146a:	af00      	add	r7, sp, #0
 802146c:	60f8      	str	r0, [r7, #12]
 802146e:	460b      	mov	r3, r1
 8021470:	607a      	str	r2, [r7, #4]
 8021472:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8021474:	7afb      	ldrb	r3, [r7, #11]
 8021476:	2b00      	cmp	r3, #0
 8021478:	d16b      	bne.n	8021552 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 802147a:	68fb      	ldr	r3, [r7, #12]
 802147c:	3314      	adds	r3, #20
 802147e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8021480:	68fb      	ldr	r3, [r7, #12]
 8021482:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8021486:	2b02      	cmp	r3, #2
 8021488:	d156      	bne.n	8021538 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 802148a:	693b      	ldr	r3, [r7, #16]
 802148c:	689a      	ldr	r2, [r3, #8]
 802148e:	693b      	ldr	r3, [r7, #16]
 8021490:	68db      	ldr	r3, [r3, #12]
 8021492:	429a      	cmp	r2, r3
 8021494:	d914      	bls.n	80214c0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8021496:	693b      	ldr	r3, [r7, #16]
 8021498:	689a      	ldr	r2, [r3, #8]
 802149a:	693b      	ldr	r3, [r7, #16]
 802149c:	68db      	ldr	r3, [r3, #12]
 802149e:	1ad2      	subs	r2, r2, r3
 80214a0:	693b      	ldr	r3, [r7, #16]
 80214a2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80214a4:	693b      	ldr	r3, [r7, #16]
 80214a6:	689b      	ldr	r3, [r3, #8]
 80214a8:	461a      	mov	r2, r3
 80214aa:	6879      	ldr	r1, [r7, #4]
 80214ac:	68f8      	ldr	r0, [r7, #12]
 80214ae:	f000 ffad 	bl	802240c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80214b2:	2300      	movs	r3, #0
 80214b4:	2200      	movs	r2, #0
 80214b6:	2100      	movs	r1, #0
 80214b8:	68f8      	ldr	r0, [r7, #12]
 80214ba:	f001 fc8c 	bl	8022dd6 <USBD_LL_PrepareReceive>
 80214be:	e03b      	b.n	8021538 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80214c0:	693b      	ldr	r3, [r7, #16]
 80214c2:	68da      	ldr	r2, [r3, #12]
 80214c4:	693b      	ldr	r3, [r7, #16]
 80214c6:	689b      	ldr	r3, [r3, #8]
 80214c8:	429a      	cmp	r2, r3
 80214ca:	d11c      	bne.n	8021506 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80214cc:	693b      	ldr	r3, [r7, #16]
 80214ce:	685a      	ldr	r2, [r3, #4]
 80214d0:	693b      	ldr	r3, [r7, #16]
 80214d2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80214d4:	429a      	cmp	r2, r3
 80214d6:	d316      	bcc.n	8021506 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80214d8:	693b      	ldr	r3, [r7, #16]
 80214da:	685a      	ldr	r2, [r3, #4]
 80214dc:	68fb      	ldr	r3, [r7, #12]
 80214de:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80214e2:	429a      	cmp	r2, r3
 80214e4:	d20f      	bcs.n	8021506 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80214e6:	2200      	movs	r2, #0
 80214e8:	2100      	movs	r1, #0
 80214ea:	68f8      	ldr	r0, [r7, #12]
 80214ec:	f000 ff8e 	bl	802240c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80214f0:	68fb      	ldr	r3, [r7, #12]
 80214f2:	2200      	movs	r2, #0
 80214f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80214f8:	2300      	movs	r3, #0
 80214fa:	2200      	movs	r2, #0
 80214fc:	2100      	movs	r1, #0
 80214fe:	68f8      	ldr	r0, [r7, #12]
 8021500:	f001 fc69 	bl	8022dd6 <USBD_LL_PrepareReceive>
 8021504:	e018      	b.n	8021538 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021506:	68fb      	ldr	r3, [r7, #12]
 8021508:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802150c:	b2db      	uxtb	r3, r3
 802150e:	2b03      	cmp	r3, #3
 8021510:	d10b      	bne.n	802152a <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8021512:	68fb      	ldr	r3, [r7, #12]
 8021514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021518:	68db      	ldr	r3, [r3, #12]
 802151a:	2b00      	cmp	r3, #0
 802151c:	d005      	beq.n	802152a <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 802151e:	68fb      	ldr	r3, [r7, #12]
 8021520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021524:	68db      	ldr	r3, [r3, #12]
 8021526:	68f8      	ldr	r0, [r7, #12]
 8021528:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 802152a:	2180      	movs	r1, #128	; 0x80
 802152c:	68f8      	ldr	r0, [r7, #12]
 802152e:	f001 fba8 	bl	8022c82 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8021532:	68f8      	ldr	r0, [r7, #12]
 8021534:	f000 ff9f 	bl	8022476 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8021538:	68fb      	ldr	r3, [r7, #12]
 802153a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 802153e:	2b01      	cmp	r3, #1
 8021540:	d122      	bne.n	8021588 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8021542:	68f8      	ldr	r0, [r7, #12]
 8021544:	f7ff fe98 	bl	8021278 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8021548:	68fb      	ldr	r3, [r7, #12]
 802154a:	2200      	movs	r2, #0
 802154c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8021550:	e01a      	b.n	8021588 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021552:	68fb      	ldr	r3, [r7, #12]
 8021554:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021558:	b2db      	uxtb	r3, r3
 802155a:	2b03      	cmp	r3, #3
 802155c:	d114      	bne.n	8021588 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 802155e:	68fb      	ldr	r3, [r7, #12]
 8021560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021564:	695b      	ldr	r3, [r3, #20]
 8021566:	2b00      	cmp	r3, #0
 8021568:	d00e      	beq.n	8021588 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 802156a:	68fb      	ldr	r3, [r7, #12]
 802156c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021570:	695b      	ldr	r3, [r3, #20]
 8021572:	7afa      	ldrb	r2, [r7, #11]
 8021574:	4611      	mov	r1, r2
 8021576:	68f8      	ldr	r0, [r7, #12]
 8021578:	4798      	blx	r3
 802157a:	4603      	mov	r3, r0
 802157c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 802157e:	7dfb      	ldrb	r3, [r7, #23]
 8021580:	2b00      	cmp	r3, #0
 8021582:	d001      	beq.n	8021588 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8021584:	7dfb      	ldrb	r3, [r7, #23]
 8021586:	e000      	b.n	802158a <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8021588:	2300      	movs	r3, #0
}
 802158a:	4618      	mov	r0, r3
 802158c:	3718      	adds	r7, #24
 802158e:	46bd      	mov	sp, r7
 8021590:	bd80      	pop	{r7, pc}

08021592 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8021592:	b580      	push	{r7, lr}
 8021594:	b082      	sub	sp, #8
 8021596:	af00      	add	r7, sp, #0
 8021598:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 802159a:	687b      	ldr	r3, [r7, #4]
 802159c:	2201      	movs	r2, #1
 802159e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80215a2:	687b      	ldr	r3, [r7, #4]
 80215a4:	2200      	movs	r2, #0
 80215a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80215aa:	687b      	ldr	r3, [r7, #4]
 80215ac:	2200      	movs	r2, #0
 80215ae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80215b0:	687b      	ldr	r3, [r7, #4]
 80215b2:	2200      	movs	r2, #0
 80215b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80215b8:	687b      	ldr	r3, [r7, #4]
 80215ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80215be:	2b00      	cmp	r3, #0
 80215c0:	d101      	bne.n	80215c6 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80215c2:	2303      	movs	r3, #3
 80215c4:	e02f      	b.n	8021626 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80215c6:	687b      	ldr	r3, [r7, #4]
 80215c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80215cc:	2b00      	cmp	r3, #0
 80215ce:	d00f      	beq.n	80215f0 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80215d0:	687b      	ldr	r3, [r7, #4]
 80215d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80215d6:	685b      	ldr	r3, [r3, #4]
 80215d8:	2b00      	cmp	r3, #0
 80215da:	d009      	beq.n	80215f0 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80215dc:	687b      	ldr	r3, [r7, #4]
 80215de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80215e2:	685b      	ldr	r3, [r3, #4]
 80215e4:	687a      	ldr	r2, [r7, #4]
 80215e6:	6852      	ldr	r2, [r2, #4]
 80215e8:	b2d2      	uxtb	r2, r2
 80215ea:	4611      	mov	r1, r2
 80215ec:	6878      	ldr	r0, [r7, #4]
 80215ee:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80215f0:	2340      	movs	r3, #64	; 0x40
 80215f2:	2200      	movs	r2, #0
 80215f4:	2100      	movs	r1, #0
 80215f6:	6878      	ldr	r0, [r7, #4]
 80215f8:	f001 fadf 	bl	8022bba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80215fc:	687b      	ldr	r3, [r7, #4]
 80215fe:	2201      	movs	r2, #1
 8021600:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8021604:	687b      	ldr	r3, [r7, #4]
 8021606:	2240      	movs	r2, #64	; 0x40
 8021608:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 802160c:	2340      	movs	r3, #64	; 0x40
 802160e:	2200      	movs	r2, #0
 8021610:	2180      	movs	r1, #128	; 0x80
 8021612:	6878      	ldr	r0, [r7, #4]
 8021614:	f001 fad1 	bl	8022bba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8021618:	687b      	ldr	r3, [r7, #4]
 802161a:	2201      	movs	r2, #1
 802161c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 802161e:	687b      	ldr	r3, [r7, #4]
 8021620:	2240      	movs	r2, #64	; 0x40
 8021622:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8021624:	2300      	movs	r3, #0
}
 8021626:	4618      	mov	r0, r3
 8021628:	3708      	adds	r7, #8
 802162a:	46bd      	mov	sp, r7
 802162c:	bd80      	pop	{r7, pc}

0802162e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 802162e:	b480      	push	{r7}
 8021630:	b083      	sub	sp, #12
 8021632:	af00      	add	r7, sp, #0
 8021634:	6078      	str	r0, [r7, #4]
 8021636:	460b      	mov	r3, r1
 8021638:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 802163a:	687b      	ldr	r3, [r7, #4]
 802163c:	78fa      	ldrb	r2, [r7, #3]
 802163e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8021640:	2300      	movs	r3, #0
}
 8021642:	4618      	mov	r0, r3
 8021644:	370c      	adds	r7, #12
 8021646:	46bd      	mov	sp, r7
 8021648:	f85d 7b04 	ldr.w	r7, [sp], #4
 802164c:	4770      	bx	lr

0802164e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 802164e:	b480      	push	{r7}
 8021650:	b083      	sub	sp, #12
 8021652:	af00      	add	r7, sp, #0
 8021654:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8021656:	687b      	ldr	r3, [r7, #4]
 8021658:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802165c:	b2da      	uxtb	r2, r3
 802165e:	687b      	ldr	r3, [r7, #4]
 8021660:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8021664:	687b      	ldr	r3, [r7, #4]
 8021666:	2204      	movs	r2, #4
 8021668:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 802166c:	2300      	movs	r3, #0
}
 802166e:	4618      	mov	r0, r3
 8021670:	370c      	adds	r7, #12
 8021672:	46bd      	mov	sp, r7
 8021674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021678:	4770      	bx	lr

0802167a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 802167a:	b480      	push	{r7}
 802167c:	b083      	sub	sp, #12
 802167e:	af00      	add	r7, sp, #0
 8021680:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8021682:	687b      	ldr	r3, [r7, #4]
 8021684:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021688:	b2db      	uxtb	r3, r3
 802168a:	2b04      	cmp	r3, #4
 802168c:	d106      	bne.n	802169c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 802168e:	687b      	ldr	r3, [r7, #4]
 8021690:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8021694:	b2da      	uxtb	r2, r3
 8021696:	687b      	ldr	r3, [r7, #4]
 8021698:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 802169c:	2300      	movs	r3, #0
}
 802169e:	4618      	mov	r0, r3
 80216a0:	370c      	adds	r7, #12
 80216a2:	46bd      	mov	sp, r7
 80216a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216a8:	4770      	bx	lr

080216aa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80216aa:	b580      	push	{r7, lr}
 80216ac:	b082      	sub	sp, #8
 80216ae:	af00      	add	r7, sp, #0
 80216b0:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80216b2:	687b      	ldr	r3, [r7, #4]
 80216b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80216b8:	2b00      	cmp	r3, #0
 80216ba:	d101      	bne.n	80216c0 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80216bc:	2303      	movs	r3, #3
 80216be:	e012      	b.n	80216e6 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80216c0:	687b      	ldr	r3, [r7, #4]
 80216c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80216c6:	b2db      	uxtb	r3, r3
 80216c8:	2b03      	cmp	r3, #3
 80216ca:	d10b      	bne.n	80216e4 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80216cc:	687b      	ldr	r3, [r7, #4]
 80216ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80216d2:	69db      	ldr	r3, [r3, #28]
 80216d4:	2b00      	cmp	r3, #0
 80216d6:	d005      	beq.n	80216e4 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80216d8:	687b      	ldr	r3, [r7, #4]
 80216da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80216de:	69db      	ldr	r3, [r3, #28]
 80216e0:	6878      	ldr	r0, [r7, #4]
 80216e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80216e4:	2300      	movs	r3, #0
}
 80216e6:	4618      	mov	r0, r3
 80216e8:	3708      	adds	r7, #8
 80216ea:	46bd      	mov	sp, r7
 80216ec:	bd80      	pop	{r7, pc}

080216ee <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80216ee:	b580      	push	{r7, lr}
 80216f0:	b082      	sub	sp, #8
 80216f2:	af00      	add	r7, sp, #0
 80216f4:	6078      	str	r0, [r7, #4]
 80216f6:	460b      	mov	r3, r1
 80216f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80216fa:	687b      	ldr	r3, [r7, #4]
 80216fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021700:	2b00      	cmp	r3, #0
 8021702:	d101      	bne.n	8021708 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8021704:	2303      	movs	r3, #3
 8021706:	e014      	b.n	8021732 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021708:	687b      	ldr	r3, [r7, #4]
 802170a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802170e:	b2db      	uxtb	r3, r3
 8021710:	2b03      	cmp	r3, #3
 8021712:	d10d      	bne.n	8021730 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8021714:	687b      	ldr	r3, [r7, #4]
 8021716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802171a:	6a1b      	ldr	r3, [r3, #32]
 802171c:	2b00      	cmp	r3, #0
 802171e:	d007      	beq.n	8021730 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8021720:	687b      	ldr	r3, [r7, #4]
 8021722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021726:	6a1b      	ldr	r3, [r3, #32]
 8021728:	78fa      	ldrb	r2, [r7, #3]
 802172a:	4611      	mov	r1, r2
 802172c:	6878      	ldr	r0, [r7, #4]
 802172e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8021730:	2300      	movs	r3, #0
}
 8021732:	4618      	mov	r0, r3
 8021734:	3708      	adds	r7, #8
 8021736:	46bd      	mov	sp, r7
 8021738:	bd80      	pop	{r7, pc}

0802173a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 802173a:	b580      	push	{r7, lr}
 802173c:	b082      	sub	sp, #8
 802173e:	af00      	add	r7, sp, #0
 8021740:	6078      	str	r0, [r7, #4]
 8021742:	460b      	mov	r3, r1
 8021744:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8021746:	687b      	ldr	r3, [r7, #4]
 8021748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802174c:	2b00      	cmp	r3, #0
 802174e:	d101      	bne.n	8021754 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8021750:	2303      	movs	r3, #3
 8021752:	e014      	b.n	802177e <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021754:	687b      	ldr	r3, [r7, #4]
 8021756:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802175a:	b2db      	uxtb	r3, r3
 802175c:	2b03      	cmp	r3, #3
 802175e:	d10d      	bne.n	802177c <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8021760:	687b      	ldr	r3, [r7, #4]
 8021762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021768:	2b00      	cmp	r3, #0
 802176a:	d007      	beq.n	802177c <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 802176c:	687b      	ldr	r3, [r7, #4]
 802176e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021774:	78fa      	ldrb	r2, [r7, #3]
 8021776:	4611      	mov	r1, r2
 8021778:	6878      	ldr	r0, [r7, #4]
 802177a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 802177c:	2300      	movs	r3, #0
}
 802177e:	4618      	mov	r0, r3
 8021780:	3708      	adds	r7, #8
 8021782:	46bd      	mov	sp, r7
 8021784:	bd80      	pop	{r7, pc}

08021786 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8021786:	b480      	push	{r7}
 8021788:	b083      	sub	sp, #12
 802178a:	af00      	add	r7, sp, #0
 802178c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 802178e:	2300      	movs	r3, #0
}
 8021790:	4618      	mov	r0, r3
 8021792:	370c      	adds	r7, #12
 8021794:	46bd      	mov	sp, r7
 8021796:	f85d 7b04 	ldr.w	r7, [sp], #4
 802179a:	4770      	bx	lr

0802179c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 802179c:	b580      	push	{r7, lr}
 802179e:	b082      	sub	sp, #8
 80217a0:	af00      	add	r7, sp, #0
 80217a2:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80217a4:	687b      	ldr	r3, [r7, #4]
 80217a6:	2201      	movs	r2, #1
 80217a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80217ac:	687b      	ldr	r3, [r7, #4]
 80217ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80217b2:	2b00      	cmp	r3, #0
 80217b4:	d009      	beq.n	80217ca <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80217b6:	687b      	ldr	r3, [r7, #4]
 80217b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80217bc:	685b      	ldr	r3, [r3, #4]
 80217be:	687a      	ldr	r2, [r7, #4]
 80217c0:	6852      	ldr	r2, [r2, #4]
 80217c2:	b2d2      	uxtb	r2, r2
 80217c4:	4611      	mov	r1, r2
 80217c6:	6878      	ldr	r0, [r7, #4]
 80217c8:	4798      	blx	r3
  }

  return USBD_OK;
 80217ca:	2300      	movs	r3, #0
}
 80217cc:	4618      	mov	r0, r3
 80217ce:	3708      	adds	r7, #8
 80217d0:	46bd      	mov	sp, r7
 80217d2:	bd80      	pop	{r7, pc}

080217d4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80217d4:	b480      	push	{r7}
 80217d6:	b087      	sub	sp, #28
 80217d8:	af00      	add	r7, sp, #0
 80217da:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80217dc:	687b      	ldr	r3, [r7, #4]
 80217de:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80217e0:	697b      	ldr	r3, [r7, #20]
 80217e2:	781b      	ldrb	r3, [r3, #0]
 80217e4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80217e6:	697b      	ldr	r3, [r7, #20]
 80217e8:	3301      	adds	r3, #1
 80217ea:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80217ec:	697b      	ldr	r3, [r7, #20]
 80217ee:	781b      	ldrb	r3, [r3, #0]
 80217f0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80217f2:	8a3b      	ldrh	r3, [r7, #16]
 80217f4:	021b      	lsls	r3, r3, #8
 80217f6:	b21a      	sxth	r2, r3
 80217f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80217fc:	4313      	orrs	r3, r2
 80217fe:	b21b      	sxth	r3, r3
 8021800:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8021802:	89fb      	ldrh	r3, [r7, #14]
}
 8021804:	4618      	mov	r0, r3
 8021806:	371c      	adds	r7, #28
 8021808:	46bd      	mov	sp, r7
 802180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802180e:	4770      	bx	lr

08021810 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021810:	b580      	push	{r7, lr}
 8021812:	b084      	sub	sp, #16
 8021814:	af00      	add	r7, sp, #0
 8021816:	6078      	str	r0, [r7, #4]
 8021818:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 802181a:	2300      	movs	r3, #0
 802181c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802181e:	683b      	ldr	r3, [r7, #0]
 8021820:	781b      	ldrb	r3, [r3, #0]
 8021822:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8021826:	2b40      	cmp	r3, #64	; 0x40
 8021828:	d005      	beq.n	8021836 <USBD_StdDevReq+0x26>
 802182a:	2b40      	cmp	r3, #64	; 0x40
 802182c:	d853      	bhi.n	80218d6 <USBD_StdDevReq+0xc6>
 802182e:	2b00      	cmp	r3, #0
 8021830:	d00b      	beq.n	802184a <USBD_StdDevReq+0x3a>
 8021832:	2b20      	cmp	r3, #32
 8021834:	d14f      	bne.n	80218d6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8021836:	687b      	ldr	r3, [r7, #4]
 8021838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802183c:	689b      	ldr	r3, [r3, #8]
 802183e:	6839      	ldr	r1, [r7, #0]
 8021840:	6878      	ldr	r0, [r7, #4]
 8021842:	4798      	blx	r3
 8021844:	4603      	mov	r3, r0
 8021846:	73fb      	strb	r3, [r7, #15]
      break;
 8021848:	e04a      	b.n	80218e0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 802184a:	683b      	ldr	r3, [r7, #0]
 802184c:	785b      	ldrb	r3, [r3, #1]
 802184e:	2b09      	cmp	r3, #9
 8021850:	d83b      	bhi.n	80218ca <USBD_StdDevReq+0xba>
 8021852:	a201      	add	r2, pc, #4	; (adr r2, 8021858 <USBD_StdDevReq+0x48>)
 8021854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021858:	080218ad 	.word	0x080218ad
 802185c:	080218c1 	.word	0x080218c1
 8021860:	080218cb 	.word	0x080218cb
 8021864:	080218b7 	.word	0x080218b7
 8021868:	080218cb 	.word	0x080218cb
 802186c:	0802188b 	.word	0x0802188b
 8021870:	08021881 	.word	0x08021881
 8021874:	080218cb 	.word	0x080218cb
 8021878:	080218a3 	.word	0x080218a3
 802187c:	08021895 	.word	0x08021895
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8021880:	6839      	ldr	r1, [r7, #0]
 8021882:	6878      	ldr	r0, [r7, #4]
 8021884:	f000 f9de 	bl	8021c44 <USBD_GetDescriptor>
          break;
 8021888:	e024      	b.n	80218d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 802188a:	6839      	ldr	r1, [r7, #0]
 802188c:	6878      	ldr	r0, [r7, #4]
 802188e:	f000 fb6d 	bl	8021f6c <USBD_SetAddress>
          break;
 8021892:	e01f      	b.n	80218d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8021894:	6839      	ldr	r1, [r7, #0]
 8021896:	6878      	ldr	r0, [r7, #4]
 8021898:	f000 fbac 	bl	8021ff4 <USBD_SetConfig>
 802189c:	4603      	mov	r3, r0
 802189e:	73fb      	strb	r3, [r7, #15]
          break;
 80218a0:	e018      	b.n	80218d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80218a2:	6839      	ldr	r1, [r7, #0]
 80218a4:	6878      	ldr	r0, [r7, #4]
 80218a6:	f000 fc4b 	bl	8022140 <USBD_GetConfig>
          break;
 80218aa:	e013      	b.n	80218d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80218ac:	6839      	ldr	r1, [r7, #0]
 80218ae:	6878      	ldr	r0, [r7, #4]
 80218b0:	f000 fc7c 	bl	80221ac <USBD_GetStatus>
          break;
 80218b4:	e00e      	b.n	80218d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80218b6:	6839      	ldr	r1, [r7, #0]
 80218b8:	6878      	ldr	r0, [r7, #4]
 80218ba:	f000 fcab 	bl	8022214 <USBD_SetFeature>
          break;
 80218be:	e009      	b.n	80218d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80218c0:	6839      	ldr	r1, [r7, #0]
 80218c2:	6878      	ldr	r0, [r7, #4]
 80218c4:	f000 fcba 	bl	802223c <USBD_ClrFeature>
          break;
 80218c8:	e004      	b.n	80218d4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80218ca:	6839      	ldr	r1, [r7, #0]
 80218cc:	6878      	ldr	r0, [r7, #4]
 80218ce:	f000 fd11 	bl	80222f4 <USBD_CtlError>
          break;
 80218d2:	bf00      	nop
      }
      break;
 80218d4:	e004      	b.n	80218e0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80218d6:	6839      	ldr	r1, [r7, #0]
 80218d8:	6878      	ldr	r0, [r7, #4]
 80218da:	f000 fd0b 	bl	80222f4 <USBD_CtlError>
      break;
 80218de:	bf00      	nop
  }

  return ret;
 80218e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80218e2:	4618      	mov	r0, r3
 80218e4:	3710      	adds	r7, #16
 80218e6:	46bd      	mov	sp, r7
 80218e8:	bd80      	pop	{r7, pc}
 80218ea:	bf00      	nop

080218ec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80218ec:	b580      	push	{r7, lr}
 80218ee:	b084      	sub	sp, #16
 80218f0:	af00      	add	r7, sp, #0
 80218f2:	6078      	str	r0, [r7, #4]
 80218f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80218f6:	2300      	movs	r3, #0
 80218f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80218fa:	683b      	ldr	r3, [r7, #0]
 80218fc:	781b      	ldrb	r3, [r3, #0]
 80218fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8021902:	2b40      	cmp	r3, #64	; 0x40
 8021904:	d005      	beq.n	8021912 <USBD_StdItfReq+0x26>
 8021906:	2b40      	cmp	r3, #64	; 0x40
 8021908:	d82f      	bhi.n	802196a <USBD_StdItfReq+0x7e>
 802190a:	2b00      	cmp	r3, #0
 802190c:	d001      	beq.n	8021912 <USBD_StdItfReq+0x26>
 802190e:	2b20      	cmp	r3, #32
 8021910:	d12b      	bne.n	802196a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8021912:	687b      	ldr	r3, [r7, #4]
 8021914:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021918:	b2db      	uxtb	r3, r3
 802191a:	3b01      	subs	r3, #1
 802191c:	2b02      	cmp	r3, #2
 802191e:	d81d      	bhi.n	802195c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8021920:	683b      	ldr	r3, [r7, #0]
 8021922:	889b      	ldrh	r3, [r3, #4]
 8021924:	b2db      	uxtb	r3, r3
 8021926:	2b01      	cmp	r3, #1
 8021928:	d813      	bhi.n	8021952 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 802192a:	687b      	ldr	r3, [r7, #4]
 802192c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021930:	689b      	ldr	r3, [r3, #8]
 8021932:	6839      	ldr	r1, [r7, #0]
 8021934:	6878      	ldr	r0, [r7, #4]
 8021936:	4798      	blx	r3
 8021938:	4603      	mov	r3, r0
 802193a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 802193c:	683b      	ldr	r3, [r7, #0]
 802193e:	88db      	ldrh	r3, [r3, #6]
 8021940:	2b00      	cmp	r3, #0
 8021942:	d110      	bne.n	8021966 <USBD_StdItfReq+0x7a>
 8021944:	7bfb      	ldrb	r3, [r7, #15]
 8021946:	2b00      	cmp	r3, #0
 8021948:	d10d      	bne.n	8021966 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 802194a:	6878      	ldr	r0, [r7, #4]
 802194c:	f000 fd80 	bl	8022450 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8021950:	e009      	b.n	8021966 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8021952:	6839      	ldr	r1, [r7, #0]
 8021954:	6878      	ldr	r0, [r7, #4]
 8021956:	f000 fccd 	bl	80222f4 <USBD_CtlError>
          break;
 802195a:	e004      	b.n	8021966 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 802195c:	6839      	ldr	r1, [r7, #0]
 802195e:	6878      	ldr	r0, [r7, #4]
 8021960:	f000 fcc8 	bl	80222f4 <USBD_CtlError>
          break;
 8021964:	e000      	b.n	8021968 <USBD_StdItfReq+0x7c>
          break;
 8021966:	bf00      	nop
      }
      break;
 8021968:	e004      	b.n	8021974 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 802196a:	6839      	ldr	r1, [r7, #0]
 802196c:	6878      	ldr	r0, [r7, #4]
 802196e:	f000 fcc1 	bl	80222f4 <USBD_CtlError>
      break;
 8021972:	bf00      	nop
  }

  return ret;
 8021974:	7bfb      	ldrb	r3, [r7, #15]
}
 8021976:	4618      	mov	r0, r3
 8021978:	3710      	adds	r7, #16
 802197a:	46bd      	mov	sp, r7
 802197c:	bd80      	pop	{r7, pc}

0802197e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802197e:	b580      	push	{r7, lr}
 8021980:	b084      	sub	sp, #16
 8021982:	af00      	add	r7, sp, #0
 8021984:	6078      	str	r0, [r7, #4]
 8021986:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8021988:	2300      	movs	r3, #0
 802198a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 802198c:	683b      	ldr	r3, [r7, #0]
 802198e:	889b      	ldrh	r3, [r3, #4]
 8021990:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8021992:	683b      	ldr	r3, [r7, #0]
 8021994:	781b      	ldrb	r3, [r3, #0]
 8021996:	f003 0360 	and.w	r3, r3, #96	; 0x60
 802199a:	2b40      	cmp	r3, #64	; 0x40
 802199c:	d007      	beq.n	80219ae <USBD_StdEPReq+0x30>
 802199e:	2b40      	cmp	r3, #64	; 0x40
 80219a0:	f200 8145 	bhi.w	8021c2e <USBD_StdEPReq+0x2b0>
 80219a4:	2b00      	cmp	r3, #0
 80219a6:	d00c      	beq.n	80219c2 <USBD_StdEPReq+0x44>
 80219a8:	2b20      	cmp	r3, #32
 80219aa:	f040 8140 	bne.w	8021c2e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80219ae:	687b      	ldr	r3, [r7, #4]
 80219b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80219b4:	689b      	ldr	r3, [r3, #8]
 80219b6:	6839      	ldr	r1, [r7, #0]
 80219b8:	6878      	ldr	r0, [r7, #4]
 80219ba:	4798      	blx	r3
 80219bc:	4603      	mov	r3, r0
 80219be:	73fb      	strb	r3, [r7, #15]
      break;
 80219c0:	e13a      	b.n	8021c38 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80219c2:	683b      	ldr	r3, [r7, #0]
 80219c4:	785b      	ldrb	r3, [r3, #1]
 80219c6:	2b03      	cmp	r3, #3
 80219c8:	d007      	beq.n	80219da <USBD_StdEPReq+0x5c>
 80219ca:	2b03      	cmp	r3, #3
 80219cc:	f300 8129 	bgt.w	8021c22 <USBD_StdEPReq+0x2a4>
 80219d0:	2b00      	cmp	r3, #0
 80219d2:	d07f      	beq.n	8021ad4 <USBD_StdEPReq+0x156>
 80219d4:	2b01      	cmp	r3, #1
 80219d6:	d03c      	beq.n	8021a52 <USBD_StdEPReq+0xd4>
 80219d8:	e123      	b.n	8021c22 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80219da:	687b      	ldr	r3, [r7, #4]
 80219dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80219e0:	b2db      	uxtb	r3, r3
 80219e2:	2b02      	cmp	r3, #2
 80219e4:	d002      	beq.n	80219ec <USBD_StdEPReq+0x6e>
 80219e6:	2b03      	cmp	r3, #3
 80219e8:	d016      	beq.n	8021a18 <USBD_StdEPReq+0x9a>
 80219ea:	e02c      	b.n	8021a46 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80219ec:	7bbb      	ldrb	r3, [r7, #14]
 80219ee:	2b00      	cmp	r3, #0
 80219f0:	d00d      	beq.n	8021a0e <USBD_StdEPReq+0x90>
 80219f2:	7bbb      	ldrb	r3, [r7, #14]
 80219f4:	2b80      	cmp	r3, #128	; 0x80
 80219f6:	d00a      	beq.n	8021a0e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80219f8:	7bbb      	ldrb	r3, [r7, #14]
 80219fa:	4619      	mov	r1, r3
 80219fc:	6878      	ldr	r0, [r7, #4]
 80219fe:	f001 f940 	bl	8022c82 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8021a02:	2180      	movs	r1, #128	; 0x80
 8021a04:	6878      	ldr	r0, [r7, #4]
 8021a06:	f001 f93c 	bl	8022c82 <USBD_LL_StallEP>
 8021a0a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8021a0c:	e020      	b.n	8021a50 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8021a0e:	6839      	ldr	r1, [r7, #0]
 8021a10:	6878      	ldr	r0, [r7, #4]
 8021a12:	f000 fc6f 	bl	80222f4 <USBD_CtlError>
              break;
 8021a16:	e01b      	b.n	8021a50 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8021a18:	683b      	ldr	r3, [r7, #0]
 8021a1a:	885b      	ldrh	r3, [r3, #2]
 8021a1c:	2b00      	cmp	r3, #0
 8021a1e:	d10e      	bne.n	8021a3e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8021a20:	7bbb      	ldrb	r3, [r7, #14]
 8021a22:	2b00      	cmp	r3, #0
 8021a24:	d00b      	beq.n	8021a3e <USBD_StdEPReq+0xc0>
 8021a26:	7bbb      	ldrb	r3, [r7, #14]
 8021a28:	2b80      	cmp	r3, #128	; 0x80
 8021a2a:	d008      	beq.n	8021a3e <USBD_StdEPReq+0xc0>
 8021a2c:	683b      	ldr	r3, [r7, #0]
 8021a2e:	88db      	ldrh	r3, [r3, #6]
 8021a30:	2b00      	cmp	r3, #0
 8021a32:	d104      	bne.n	8021a3e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8021a34:	7bbb      	ldrb	r3, [r7, #14]
 8021a36:	4619      	mov	r1, r3
 8021a38:	6878      	ldr	r0, [r7, #4]
 8021a3a:	f001 f922 	bl	8022c82 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8021a3e:	6878      	ldr	r0, [r7, #4]
 8021a40:	f000 fd06 	bl	8022450 <USBD_CtlSendStatus>

              break;
 8021a44:	e004      	b.n	8021a50 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8021a46:	6839      	ldr	r1, [r7, #0]
 8021a48:	6878      	ldr	r0, [r7, #4]
 8021a4a:	f000 fc53 	bl	80222f4 <USBD_CtlError>
              break;
 8021a4e:	bf00      	nop
          }
          break;
 8021a50:	e0ec      	b.n	8021c2c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8021a52:	687b      	ldr	r3, [r7, #4]
 8021a54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021a58:	b2db      	uxtb	r3, r3
 8021a5a:	2b02      	cmp	r3, #2
 8021a5c:	d002      	beq.n	8021a64 <USBD_StdEPReq+0xe6>
 8021a5e:	2b03      	cmp	r3, #3
 8021a60:	d016      	beq.n	8021a90 <USBD_StdEPReq+0x112>
 8021a62:	e030      	b.n	8021ac6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8021a64:	7bbb      	ldrb	r3, [r7, #14]
 8021a66:	2b00      	cmp	r3, #0
 8021a68:	d00d      	beq.n	8021a86 <USBD_StdEPReq+0x108>
 8021a6a:	7bbb      	ldrb	r3, [r7, #14]
 8021a6c:	2b80      	cmp	r3, #128	; 0x80
 8021a6e:	d00a      	beq.n	8021a86 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8021a70:	7bbb      	ldrb	r3, [r7, #14]
 8021a72:	4619      	mov	r1, r3
 8021a74:	6878      	ldr	r0, [r7, #4]
 8021a76:	f001 f904 	bl	8022c82 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8021a7a:	2180      	movs	r1, #128	; 0x80
 8021a7c:	6878      	ldr	r0, [r7, #4]
 8021a7e:	f001 f900 	bl	8022c82 <USBD_LL_StallEP>
 8021a82:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8021a84:	e025      	b.n	8021ad2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8021a86:	6839      	ldr	r1, [r7, #0]
 8021a88:	6878      	ldr	r0, [r7, #4]
 8021a8a:	f000 fc33 	bl	80222f4 <USBD_CtlError>
              break;
 8021a8e:	e020      	b.n	8021ad2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8021a90:	683b      	ldr	r3, [r7, #0]
 8021a92:	885b      	ldrh	r3, [r3, #2]
 8021a94:	2b00      	cmp	r3, #0
 8021a96:	d11b      	bne.n	8021ad0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8021a98:	7bbb      	ldrb	r3, [r7, #14]
 8021a9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8021a9e:	2b00      	cmp	r3, #0
 8021aa0:	d004      	beq.n	8021aac <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8021aa2:	7bbb      	ldrb	r3, [r7, #14]
 8021aa4:	4619      	mov	r1, r3
 8021aa6:	6878      	ldr	r0, [r7, #4]
 8021aa8:	f001 f90a 	bl	8022cc0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8021aac:	6878      	ldr	r0, [r7, #4]
 8021aae:	f000 fccf 	bl	8022450 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8021ab2:	687b      	ldr	r3, [r7, #4]
 8021ab4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021ab8:	689b      	ldr	r3, [r3, #8]
 8021aba:	6839      	ldr	r1, [r7, #0]
 8021abc:	6878      	ldr	r0, [r7, #4]
 8021abe:	4798      	blx	r3
 8021ac0:	4603      	mov	r3, r0
 8021ac2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8021ac4:	e004      	b.n	8021ad0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8021ac6:	6839      	ldr	r1, [r7, #0]
 8021ac8:	6878      	ldr	r0, [r7, #4]
 8021aca:	f000 fc13 	bl	80222f4 <USBD_CtlError>
              break;
 8021ace:	e000      	b.n	8021ad2 <USBD_StdEPReq+0x154>
              break;
 8021ad0:	bf00      	nop
          }
          break;
 8021ad2:	e0ab      	b.n	8021c2c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8021ad4:	687b      	ldr	r3, [r7, #4]
 8021ad6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021ada:	b2db      	uxtb	r3, r3
 8021adc:	2b02      	cmp	r3, #2
 8021ade:	d002      	beq.n	8021ae6 <USBD_StdEPReq+0x168>
 8021ae0:	2b03      	cmp	r3, #3
 8021ae2:	d032      	beq.n	8021b4a <USBD_StdEPReq+0x1cc>
 8021ae4:	e097      	b.n	8021c16 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8021ae6:	7bbb      	ldrb	r3, [r7, #14]
 8021ae8:	2b00      	cmp	r3, #0
 8021aea:	d007      	beq.n	8021afc <USBD_StdEPReq+0x17e>
 8021aec:	7bbb      	ldrb	r3, [r7, #14]
 8021aee:	2b80      	cmp	r3, #128	; 0x80
 8021af0:	d004      	beq.n	8021afc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8021af2:	6839      	ldr	r1, [r7, #0]
 8021af4:	6878      	ldr	r0, [r7, #4]
 8021af6:	f000 fbfd 	bl	80222f4 <USBD_CtlError>
                break;
 8021afa:	e091      	b.n	8021c20 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8021afc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8021b00:	2b00      	cmp	r3, #0
 8021b02:	da0b      	bge.n	8021b1c <USBD_StdEPReq+0x19e>
 8021b04:	7bbb      	ldrb	r3, [r7, #14]
 8021b06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8021b0a:	4613      	mov	r3, r2
 8021b0c:	009b      	lsls	r3, r3, #2
 8021b0e:	4413      	add	r3, r2
 8021b10:	009b      	lsls	r3, r3, #2
 8021b12:	3310      	adds	r3, #16
 8021b14:	687a      	ldr	r2, [r7, #4]
 8021b16:	4413      	add	r3, r2
 8021b18:	3304      	adds	r3, #4
 8021b1a:	e00b      	b.n	8021b34 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8021b1c:	7bbb      	ldrb	r3, [r7, #14]
 8021b1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8021b22:	4613      	mov	r3, r2
 8021b24:	009b      	lsls	r3, r3, #2
 8021b26:	4413      	add	r3, r2
 8021b28:	009b      	lsls	r3, r3, #2
 8021b2a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8021b2e:	687a      	ldr	r2, [r7, #4]
 8021b30:	4413      	add	r3, r2
 8021b32:	3304      	adds	r3, #4
 8021b34:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8021b36:	68bb      	ldr	r3, [r7, #8]
 8021b38:	2200      	movs	r2, #0
 8021b3a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8021b3c:	68bb      	ldr	r3, [r7, #8]
 8021b3e:	2202      	movs	r2, #2
 8021b40:	4619      	mov	r1, r3
 8021b42:	6878      	ldr	r0, [r7, #4]
 8021b44:	f000 fc47 	bl	80223d6 <USBD_CtlSendData>
              break;
 8021b48:	e06a      	b.n	8021c20 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8021b4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8021b4e:	2b00      	cmp	r3, #0
 8021b50:	da11      	bge.n	8021b76 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8021b52:	7bbb      	ldrb	r3, [r7, #14]
 8021b54:	f003 020f 	and.w	r2, r3, #15
 8021b58:	6879      	ldr	r1, [r7, #4]
 8021b5a:	4613      	mov	r3, r2
 8021b5c:	009b      	lsls	r3, r3, #2
 8021b5e:	4413      	add	r3, r2
 8021b60:	009b      	lsls	r3, r3, #2
 8021b62:	440b      	add	r3, r1
 8021b64:	3324      	adds	r3, #36	; 0x24
 8021b66:	881b      	ldrh	r3, [r3, #0]
 8021b68:	2b00      	cmp	r3, #0
 8021b6a:	d117      	bne.n	8021b9c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8021b6c:	6839      	ldr	r1, [r7, #0]
 8021b6e:	6878      	ldr	r0, [r7, #4]
 8021b70:	f000 fbc0 	bl	80222f4 <USBD_CtlError>
                  break;
 8021b74:	e054      	b.n	8021c20 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8021b76:	7bbb      	ldrb	r3, [r7, #14]
 8021b78:	f003 020f 	and.w	r2, r3, #15
 8021b7c:	6879      	ldr	r1, [r7, #4]
 8021b7e:	4613      	mov	r3, r2
 8021b80:	009b      	lsls	r3, r3, #2
 8021b82:	4413      	add	r3, r2
 8021b84:	009b      	lsls	r3, r3, #2
 8021b86:	440b      	add	r3, r1
 8021b88:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8021b8c:	881b      	ldrh	r3, [r3, #0]
 8021b8e:	2b00      	cmp	r3, #0
 8021b90:	d104      	bne.n	8021b9c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8021b92:	6839      	ldr	r1, [r7, #0]
 8021b94:	6878      	ldr	r0, [r7, #4]
 8021b96:	f000 fbad 	bl	80222f4 <USBD_CtlError>
                  break;
 8021b9a:	e041      	b.n	8021c20 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8021b9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8021ba0:	2b00      	cmp	r3, #0
 8021ba2:	da0b      	bge.n	8021bbc <USBD_StdEPReq+0x23e>
 8021ba4:	7bbb      	ldrb	r3, [r7, #14]
 8021ba6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8021baa:	4613      	mov	r3, r2
 8021bac:	009b      	lsls	r3, r3, #2
 8021bae:	4413      	add	r3, r2
 8021bb0:	009b      	lsls	r3, r3, #2
 8021bb2:	3310      	adds	r3, #16
 8021bb4:	687a      	ldr	r2, [r7, #4]
 8021bb6:	4413      	add	r3, r2
 8021bb8:	3304      	adds	r3, #4
 8021bba:	e00b      	b.n	8021bd4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8021bbc:	7bbb      	ldrb	r3, [r7, #14]
 8021bbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8021bc2:	4613      	mov	r3, r2
 8021bc4:	009b      	lsls	r3, r3, #2
 8021bc6:	4413      	add	r3, r2
 8021bc8:	009b      	lsls	r3, r3, #2
 8021bca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8021bce:	687a      	ldr	r2, [r7, #4]
 8021bd0:	4413      	add	r3, r2
 8021bd2:	3304      	adds	r3, #4
 8021bd4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8021bd6:	7bbb      	ldrb	r3, [r7, #14]
 8021bd8:	2b00      	cmp	r3, #0
 8021bda:	d002      	beq.n	8021be2 <USBD_StdEPReq+0x264>
 8021bdc:	7bbb      	ldrb	r3, [r7, #14]
 8021bde:	2b80      	cmp	r3, #128	; 0x80
 8021be0:	d103      	bne.n	8021bea <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8021be2:	68bb      	ldr	r3, [r7, #8]
 8021be4:	2200      	movs	r2, #0
 8021be6:	601a      	str	r2, [r3, #0]
 8021be8:	e00e      	b.n	8021c08 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8021bea:	7bbb      	ldrb	r3, [r7, #14]
 8021bec:	4619      	mov	r1, r3
 8021bee:	6878      	ldr	r0, [r7, #4]
 8021bf0:	f001 f885 	bl	8022cfe <USBD_LL_IsStallEP>
 8021bf4:	4603      	mov	r3, r0
 8021bf6:	2b00      	cmp	r3, #0
 8021bf8:	d003      	beq.n	8021c02 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8021bfa:	68bb      	ldr	r3, [r7, #8]
 8021bfc:	2201      	movs	r2, #1
 8021bfe:	601a      	str	r2, [r3, #0]
 8021c00:	e002      	b.n	8021c08 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8021c02:	68bb      	ldr	r3, [r7, #8]
 8021c04:	2200      	movs	r2, #0
 8021c06:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8021c08:	68bb      	ldr	r3, [r7, #8]
 8021c0a:	2202      	movs	r2, #2
 8021c0c:	4619      	mov	r1, r3
 8021c0e:	6878      	ldr	r0, [r7, #4]
 8021c10:	f000 fbe1 	bl	80223d6 <USBD_CtlSendData>
              break;
 8021c14:	e004      	b.n	8021c20 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8021c16:	6839      	ldr	r1, [r7, #0]
 8021c18:	6878      	ldr	r0, [r7, #4]
 8021c1a:	f000 fb6b 	bl	80222f4 <USBD_CtlError>
              break;
 8021c1e:	bf00      	nop
          }
          break;
 8021c20:	e004      	b.n	8021c2c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8021c22:	6839      	ldr	r1, [r7, #0]
 8021c24:	6878      	ldr	r0, [r7, #4]
 8021c26:	f000 fb65 	bl	80222f4 <USBD_CtlError>
          break;
 8021c2a:	bf00      	nop
      }
      break;
 8021c2c:	e004      	b.n	8021c38 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8021c2e:	6839      	ldr	r1, [r7, #0]
 8021c30:	6878      	ldr	r0, [r7, #4]
 8021c32:	f000 fb5f 	bl	80222f4 <USBD_CtlError>
      break;
 8021c36:	bf00      	nop
  }

  return ret;
 8021c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8021c3a:	4618      	mov	r0, r3
 8021c3c:	3710      	adds	r7, #16
 8021c3e:	46bd      	mov	sp, r7
 8021c40:	bd80      	pop	{r7, pc}
	...

08021c44 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021c44:	b580      	push	{r7, lr}
 8021c46:	b084      	sub	sp, #16
 8021c48:	af00      	add	r7, sp, #0
 8021c4a:	6078      	str	r0, [r7, #4]
 8021c4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8021c4e:	2300      	movs	r3, #0
 8021c50:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8021c52:	2300      	movs	r3, #0
 8021c54:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8021c56:	2300      	movs	r3, #0
 8021c58:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8021c5a:	683b      	ldr	r3, [r7, #0]
 8021c5c:	885b      	ldrh	r3, [r3, #2]
 8021c5e:	0a1b      	lsrs	r3, r3, #8
 8021c60:	b29b      	uxth	r3, r3
 8021c62:	3b01      	subs	r3, #1
 8021c64:	2b0e      	cmp	r3, #14
 8021c66:	f200 8152 	bhi.w	8021f0e <USBD_GetDescriptor+0x2ca>
 8021c6a:	a201      	add	r2, pc, #4	; (adr r2, 8021c70 <USBD_GetDescriptor+0x2c>)
 8021c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021c70:	08021ce1 	.word	0x08021ce1
 8021c74:	08021cf9 	.word	0x08021cf9
 8021c78:	08021d39 	.word	0x08021d39
 8021c7c:	08021f0f 	.word	0x08021f0f
 8021c80:	08021f0f 	.word	0x08021f0f
 8021c84:	08021eaf 	.word	0x08021eaf
 8021c88:	08021edb 	.word	0x08021edb
 8021c8c:	08021f0f 	.word	0x08021f0f
 8021c90:	08021f0f 	.word	0x08021f0f
 8021c94:	08021f0f 	.word	0x08021f0f
 8021c98:	08021f0f 	.word	0x08021f0f
 8021c9c:	08021f0f 	.word	0x08021f0f
 8021ca0:	08021f0f 	.word	0x08021f0f
 8021ca4:	08021f0f 	.word	0x08021f0f
 8021ca8:	08021cad 	.word	0x08021cad
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8021cac:	687b      	ldr	r3, [r7, #4]
 8021cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021cb2:	69db      	ldr	r3, [r3, #28]
 8021cb4:	2b00      	cmp	r3, #0
 8021cb6:	d00b      	beq.n	8021cd0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8021cb8:	687b      	ldr	r3, [r7, #4]
 8021cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021cbe:	69db      	ldr	r3, [r3, #28]
 8021cc0:	687a      	ldr	r2, [r7, #4]
 8021cc2:	7c12      	ldrb	r2, [r2, #16]
 8021cc4:	f107 0108 	add.w	r1, r7, #8
 8021cc8:	4610      	mov	r0, r2
 8021cca:	4798      	blx	r3
 8021ccc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8021cce:	e126      	b.n	8021f1e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8021cd0:	6839      	ldr	r1, [r7, #0]
 8021cd2:	6878      	ldr	r0, [r7, #4]
 8021cd4:	f000 fb0e 	bl	80222f4 <USBD_CtlError>
        err++;
 8021cd8:	7afb      	ldrb	r3, [r7, #11]
 8021cda:	3301      	adds	r3, #1
 8021cdc:	72fb      	strb	r3, [r7, #11]
      break;
 8021cde:	e11e      	b.n	8021f1e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8021ce0:	687b      	ldr	r3, [r7, #4]
 8021ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021ce6:	681b      	ldr	r3, [r3, #0]
 8021ce8:	687a      	ldr	r2, [r7, #4]
 8021cea:	7c12      	ldrb	r2, [r2, #16]
 8021cec:	f107 0108 	add.w	r1, r7, #8
 8021cf0:	4610      	mov	r0, r2
 8021cf2:	4798      	blx	r3
 8021cf4:	60f8      	str	r0, [r7, #12]
      break;
 8021cf6:	e112      	b.n	8021f1e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021cf8:	687b      	ldr	r3, [r7, #4]
 8021cfa:	7c1b      	ldrb	r3, [r3, #16]
 8021cfc:	2b00      	cmp	r3, #0
 8021cfe:	d10d      	bne.n	8021d1c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8021d00:	687b      	ldr	r3, [r7, #4]
 8021d02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021d08:	f107 0208 	add.w	r2, r7, #8
 8021d0c:	4610      	mov	r0, r2
 8021d0e:	4798      	blx	r3
 8021d10:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8021d12:	68fb      	ldr	r3, [r7, #12]
 8021d14:	3301      	adds	r3, #1
 8021d16:	2202      	movs	r2, #2
 8021d18:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8021d1a:	e100      	b.n	8021f1e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8021d1c:	687b      	ldr	r3, [r7, #4]
 8021d1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021d24:	f107 0208 	add.w	r2, r7, #8
 8021d28:	4610      	mov	r0, r2
 8021d2a:	4798      	blx	r3
 8021d2c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8021d2e:	68fb      	ldr	r3, [r7, #12]
 8021d30:	3301      	adds	r3, #1
 8021d32:	2202      	movs	r2, #2
 8021d34:	701a      	strb	r2, [r3, #0]
      break;
 8021d36:	e0f2      	b.n	8021f1e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8021d38:	683b      	ldr	r3, [r7, #0]
 8021d3a:	885b      	ldrh	r3, [r3, #2]
 8021d3c:	b2db      	uxtb	r3, r3
 8021d3e:	2b05      	cmp	r3, #5
 8021d40:	f200 80ac 	bhi.w	8021e9c <USBD_GetDescriptor+0x258>
 8021d44:	a201      	add	r2, pc, #4	; (adr r2, 8021d4c <USBD_GetDescriptor+0x108>)
 8021d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021d4a:	bf00      	nop
 8021d4c:	08021d65 	.word	0x08021d65
 8021d50:	08021d99 	.word	0x08021d99
 8021d54:	08021dcd 	.word	0x08021dcd
 8021d58:	08021e01 	.word	0x08021e01
 8021d5c:	08021e35 	.word	0x08021e35
 8021d60:	08021e69 	.word	0x08021e69
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8021d64:	687b      	ldr	r3, [r7, #4]
 8021d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021d6a:	685b      	ldr	r3, [r3, #4]
 8021d6c:	2b00      	cmp	r3, #0
 8021d6e:	d00b      	beq.n	8021d88 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8021d70:	687b      	ldr	r3, [r7, #4]
 8021d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021d76:	685b      	ldr	r3, [r3, #4]
 8021d78:	687a      	ldr	r2, [r7, #4]
 8021d7a:	7c12      	ldrb	r2, [r2, #16]
 8021d7c:	f107 0108 	add.w	r1, r7, #8
 8021d80:	4610      	mov	r0, r2
 8021d82:	4798      	blx	r3
 8021d84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021d86:	e091      	b.n	8021eac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021d88:	6839      	ldr	r1, [r7, #0]
 8021d8a:	6878      	ldr	r0, [r7, #4]
 8021d8c:	f000 fab2 	bl	80222f4 <USBD_CtlError>
            err++;
 8021d90:	7afb      	ldrb	r3, [r7, #11]
 8021d92:	3301      	adds	r3, #1
 8021d94:	72fb      	strb	r3, [r7, #11]
          break;
 8021d96:	e089      	b.n	8021eac <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8021d98:	687b      	ldr	r3, [r7, #4]
 8021d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021d9e:	689b      	ldr	r3, [r3, #8]
 8021da0:	2b00      	cmp	r3, #0
 8021da2:	d00b      	beq.n	8021dbc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8021da4:	687b      	ldr	r3, [r7, #4]
 8021da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021daa:	689b      	ldr	r3, [r3, #8]
 8021dac:	687a      	ldr	r2, [r7, #4]
 8021dae:	7c12      	ldrb	r2, [r2, #16]
 8021db0:	f107 0108 	add.w	r1, r7, #8
 8021db4:	4610      	mov	r0, r2
 8021db6:	4798      	blx	r3
 8021db8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021dba:	e077      	b.n	8021eac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021dbc:	6839      	ldr	r1, [r7, #0]
 8021dbe:	6878      	ldr	r0, [r7, #4]
 8021dc0:	f000 fa98 	bl	80222f4 <USBD_CtlError>
            err++;
 8021dc4:	7afb      	ldrb	r3, [r7, #11]
 8021dc6:	3301      	adds	r3, #1
 8021dc8:	72fb      	strb	r3, [r7, #11]
          break;
 8021dca:	e06f      	b.n	8021eac <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8021dcc:	687b      	ldr	r3, [r7, #4]
 8021dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021dd2:	68db      	ldr	r3, [r3, #12]
 8021dd4:	2b00      	cmp	r3, #0
 8021dd6:	d00b      	beq.n	8021df0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8021dd8:	687b      	ldr	r3, [r7, #4]
 8021dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021dde:	68db      	ldr	r3, [r3, #12]
 8021de0:	687a      	ldr	r2, [r7, #4]
 8021de2:	7c12      	ldrb	r2, [r2, #16]
 8021de4:	f107 0108 	add.w	r1, r7, #8
 8021de8:	4610      	mov	r0, r2
 8021dea:	4798      	blx	r3
 8021dec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021dee:	e05d      	b.n	8021eac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021df0:	6839      	ldr	r1, [r7, #0]
 8021df2:	6878      	ldr	r0, [r7, #4]
 8021df4:	f000 fa7e 	bl	80222f4 <USBD_CtlError>
            err++;
 8021df8:	7afb      	ldrb	r3, [r7, #11]
 8021dfa:	3301      	adds	r3, #1
 8021dfc:	72fb      	strb	r3, [r7, #11]
          break;
 8021dfe:	e055      	b.n	8021eac <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8021e00:	687b      	ldr	r3, [r7, #4]
 8021e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021e06:	691b      	ldr	r3, [r3, #16]
 8021e08:	2b00      	cmp	r3, #0
 8021e0a:	d00b      	beq.n	8021e24 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8021e0c:	687b      	ldr	r3, [r7, #4]
 8021e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021e12:	691b      	ldr	r3, [r3, #16]
 8021e14:	687a      	ldr	r2, [r7, #4]
 8021e16:	7c12      	ldrb	r2, [r2, #16]
 8021e18:	f107 0108 	add.w	r1, r7, #8
 8021e1c:	4610      	mov	r0, r2
 8021e1e:	4798      	blx	r3
 8021e20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021e22:	e043      	b.n	8021eac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021e24:	6839      	ldr	r1, [r7, #0]
 8021e26:	6878      	ldr	r0, [r7, #4]
 8021e28:	f000 fa64 	bl	80222f4 <USBD_CtlError>
            err++;
 8021e2c:	7afb      	ldrb	r3, [r7, #11]
 8021e2e:	3301      	adds	r3, #1
 8021e30:	72fb      	strb	r3, [r7, #11]
          break;
 8021e32:	e03b      	b.n	8021eac <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8021e34:	687b      	ldr	r3, [r7, #4]
 8021e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021e3a:	695b      	ldr	r3, [r3, #20]
 8021e3c:	2b00      	cmp	r3, #0
 8021e3e:	d00b      	beq.n	8021e58 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8021e40:	687b      	ldr	r3, [r7, #4]
 8021e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021e46:	695b      	ldr	r3, [r3, #20]
 8021e48:	687a      	ldr	r2, [r7, #4]
 8021e4a:	7c12      	ldrb	r2, [r2, #16]
 8021e4c:	f107 0108 	add.w	r1, r7, #8
 8021e50:	4610      	mov	r0, r2
 8021e52:	4798      	blx	r3
 8021e54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021e56:	e029      	b.n	8021eac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021e58:	6839      	ldr	r1, [r7, #0]
 8021e5a:	6878      	ldr	r0, [r7, #4]
 8021e5c:	f000 fa4a 	bl	80222f4 <USBD_CtlError>
            err++;
 8021e60:	7afb      	ldrb	r3, [r7, #11]
 8021e62:	3301      	adds	r3, #1
 8021e64:	72fb      	strb	r3, [r7, #11]
          break;
 8021e66:	e021      	b.n	8021eac <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8021e68:	687b      	ldr	r3, [r7, #4]
 8021e6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021e6e:	699b      	ldr	r3, [r3, #24]
 8021e70:	2b00      	cmp	r3, #0
 8021e72:	d00b      	beq.n	8021e8c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8021e74:	687b      	ldr	r3, [r7, #4]
 8021e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021e7a:	699b      	ldr	r3, [r3, #24]
 8021e7c:	687a      	ldr	r2, [r7, #4]
 8021e7e:	7c12      	ldrb	r2, [r2, #16]
 8021e80:	f107 0108 	add.w	r1, r7, #8
 8021e84:	4610      	mov	r0, r2
 8021e86:	4798      	blx	r3
 8021e88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021e8a:	e00f      	b.n	8021eac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021e8c:	6839      	ldr	r1, [r7, #0]
 8021e8e:	6878      	ldr	r0, [r7, #4]
 8021e90:	f000 fa30 	bl	80222f4 <USBD_CtlError>
            err++;
 8021e94:	7afb      	ldrb	r3, [r7, #11]
 8021e96:	3301      	adds	r3, #1
 8021e98:	72fb      	strb	r3, [r7, #11]
          break;
 8021e9a:	e007      	b.n	8021eac <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8021e9c:	6839      	ldr	r1, [r7, #0]
 8021e9e:	6878      	ldr	r0, [r7, #4]
 8021ea0:	f000 fa28 	bl	80222f4 <USBD_CtlError>
          err++;
 8021ea4:	7afb      	ldrb	r3, [r7, #11]
 8021ea6:	3301      	adds	r3, #1
 8021ea8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8021eaa:	bf00      	nop
      }
      break;
 8021eac:	e037      	b.n	8021f1e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021eae:	687b      	ldr	r3, [r7, #4]
 8021eb0:	7c1b      	ldrb	r3, [r3, #16]
 8021eb2:	2b00      	cmp	r3, #0
 8021eb4:	d109      	bne.n	8021eca <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8021eb6:	687b      	ldr	r3, [r7, #4]
 8021eb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021ebe:	f107 0208 	add.w	r2, r7, #8
 8021ec2:	4610      	mov	r0, r2
 8021ec4:	4798      	blx	r3
 8021ec6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8021ec8:	e029      	b.n	8021f1e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8021eca:	6839      	ldr	r1, [r7, #0]
 8021ecc:	6878      	ldr	r0, [r7, #4]
 8021ece:	f000 fa11 	bl	80222f4 <USBD_CtlError>
        err++;
 8021ed2:	7afb      	ldrb	r3, [r7, #11]
 8021ed4:	3301      	adds	r3, #1
 8021ed6:	72fb      	strb	r3, [r7, #11]
      break;
 8021ed8:	e021      	b.n	8021f1e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021eda:	687b      	ldr	r3, [r7, #4]
 8021edc:	7c1b      	ldrb	r3, [r3, #16]
 8021ede:	2b00      	cmp	r3, #0
 8021ee0:	d10d      	bne.n	8021efe <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8021ee2:	687b      	ldr	r3, [r7, #4]
 8021ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021eea:	f107 0208 	add.w	r2, r7, #8
 8021eee:	4610      	mov	r0, r2
 8021ef0:	4798      	blx	r3
 8021ef2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8021ef4:	68fb      	ldr	r3, [r7, #12]
 8021ef6:	3301      	adds	r3, #1
 8021ef8:	2207      	movs	r2, #7
 8021efa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8021efc:	e00f      	b.n	8021f1e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8021efe:	6839      	ldr	r1, [r7, #0]
 8021f00:	6878      	ldr	r0, [r7, #4]
 8021f02:	f000 f9f7 	bl	80222f4 <USBD_CtlError>
        err++;
 8021f06:	7afb      	ldrb	r3, [r7, #11]
 8021f08:	3301      	adds	r3, #1
 8021f0a:	72fb      	strb	r3, [r7, #11]
      break;
 8021f0c:	e007      	b.n	8021f1e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8021f0e:	6839      	ldr	r1, [r7, #0]
 8021f10:	6878      	ldr	r0, [r7, #4]
 8021f12:	f000 f9ef 	bl	80222f4 <USBD_CtlError>
      err++;
 8021f16:	7afb      	ldrb	r3, [r7, #11]
 8021f18:	3301      	adds	r3, #1
 8021f1a:	72fb      	strb	r3, [r7, #11]
      break;
 8021f1c:	bf00      	nop
  }

  if (err != 0U)
 8021f1e:	7afb      	ldrb	r3, [r7, #11]
 8021f20:	2b00      	cmp	r3, #0
 8021f22:	d11e      	bne.n	8021f62 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8021f24:	683b      	ldr	r3, [r7, #0]
 8021f26:	88db      	ldrh	r3, [r3, #6]
 8021f28:	2b00      	cmp	r3, #0
 8021f2a:	d016      	beq.n	8021f5a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8021f2c:	893b      	ldrh	r3, [r7, #8]
 8021f2e:	2b00      	cmp	r3, #0
 8021f30:	d00e      	beq.n	8021f50 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8021f32:	683b      	ldr	r3, [r7, #0]
 8021f34:	88da      	ldrh	r2, [r3, #6]
 8021f36:	893b      	ldrh	r3, [r7, #8]
 8021f38:	4293      	cmp	r3, r2
 8021f3a:	bf28      	it	cs
 8021f3c:	4613      	movcs	r3, r2
 8021f3e:	b29b      	uxth	r3, r3
 8021f40:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8021f42:	893b      	ldrh	r3, [r7, #8]
 8021f44:	461a      	mov	r2, r3
 8021f46:	68f9      	ldr	r1, [r7, #12]
 8021f48:	6878      	ldr	r0, [r7, #4]
 8021f4a:	f000 fa44 	bl	80223d6 <USBD_CtlSendData>
 8021f4e:	e009      	b.n	8021f64 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8021f50:	6839      	ldr	r1, [r7, #0]
 8021f52:	6878      	ldr	r0, [r7, #4]
 8021f54:	f000 f9ce 	bl	80222f4 <USBD_CtlError>
 8021f58:	e004      	b.n	8021f64 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8021f5a:	6878      	ldr	r0, [r7, #4]
 8021f5c:	f000 fa78 	bl	8022450 <USBD_CtlSendStatus>
 8021f60:	e000      	b.n	8021f64 <USBD_GetDescriptor+0x320>
    return;
 8021f62:	bf00      	nop
  }
}
 8021f64:	3710      	adds	r7, #16
 8021f66:	46bd      	mov	sp, r7
 8021f68:	bd80      	pop	{r7, pc}
 8021f6a:	bf00      	nop

08021f6c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021f6c:	b580      	push	{r7, lr}
 8021f6e:	b084      	sub	sp, #16
 8021f70:	af00      	add	r7, sp, #0
 8021f72:	6078      	str	r0, [r7, #4]
 8021f74:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8021f76:	683b      	ldr	r3, [r7, #0]
 8021f78:	889b      	ldrh	r3, [r3, #4]
 8021f7a:	2b00      	cmp	r3, #0
 8021f7c:	d131      	bne.n	8021fe2 <USBD_SetAddress+0x76>
 8021f7e:	683b      	ldr	r3, [r7, #0]
 8021f80:	88db      	ldrh	r3, [r3, #6]
 8021f82:	2b00      	cmp	r3, #0
 8021f84:	d12d      	bne.n	8021fe2 <USBD_SetAddress+0x76>
 8021f86:	683b      	ldr	r3, [r7, #0]
 8021f88:	885b      	ldrh	r3, [r3, #2]
 8021f8a:	2b7f      	cmp	r3, #127	; 0x7f
 8021f8c:	d829      	bhi.n	8021fe2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8021f8e:	683b      	ldr	r3, [r7, #0]
 8021f90:	885b      	ldrh	r3, [r3, #2]
 8021f92:	b2db      	uxtb	r3, r3
 8021f94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8021f98:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021f9a:	687b      	ldr	r3, [r7, #4]
 8021f9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021fa0:	b2db      	uxtb	r3, r3
 8021fa2:	2b03      	cmp	r3, #3
 8021fa4:	d104      	bne.n	8021fb0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8021fa6:	6839      	ldr	r1, [r7, #0]
 8021fa8:	6878      	ldr	r0, [r7, #4]
 8021faa:	f000 f9a3 	bl	80222f4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021fae:	e01d      	b.n	8021fec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8021fb0:	687b      	ldr	r3, [r7, #4]
 8021fb2:	7bfa      	ldrb	r2, [r7, #15]
 8021fb4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8021fb8:	7bfb      	ldrb	r3, [r7, #15]
 8021fba:	4619      	mov	r1, r3
 8021fbc:	6878      	ldr	r0, [r7, #4]
 8021fbe:	f000 feca 	bl	8022d56 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8021fc2:	6878      	ldr	r0, [r7, #4]
 8021fc4:	f000 fa44 	bl	8022450 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8021fc8:	7bfb      	ldrb	r3, [r7, #15]
 8021fca:	2b00      	cmp	r3, #0
 8021fcc:	d004      	beq.n	8021fd8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8021fce:	687b      	ldr	r3, [r7, #4]
 8021fd0:	2202      	movs	r2, #2
 8021fd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021fd6:	e009      	b.n	8021fec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8021fd8:	687b      	ldr	r3, [r7, #4]
 8021fda:	2201      	movs	r2, #1
 8021fdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021fe0:	e004      	b.n	8021fec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8021fe2:	6839      	ldr	r1, [r7, #0]
 8021fe4:	6878      	ldr	r0, [r7, #4]
 8021fe6:	f000 f985 	bl	80222f4 <USBD_CtlError>
  }
}
 8021fea:	bf00      	nop
 8021fec:	bf00      	nop
 8021fee:	3710      	adds	r7, #16
 8021ff0:	46bd      	mov	sp, r7
 8021ff2:	bd80      	pop	{r7, pc}

08021ff4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021ff4:	b580      	push	{r7, lr}
 8021ff6:	b084      	sub	sp, #16
 8021ff8:	af00      	add	r7, sp, #0
 8021ffa:	6078      	str	r0, [r7, #4]
 8021ffc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8021ffe:	2300      	movs	r3, #0
 8022000:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8022002:	683b      	ldr	r3, [r7, #0]
 8022004:	885b      	ldrh	r3, [r3, #2]
 8022006:	b2da      	uxtb	r2, r3
 8022008:	4b4c      	ldr	r3, [pc, #304]	; (802213c <USBD_SetConfig+0x148>)
 802200a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 802200c:	4b4b      	ldr	r3, [pc, #300]	; (802213c <USBD_SetConfig+0x148>)
 802200e:	781b      	ldrb	r3, [r3, #0]
 8022010:	2b01      	cmp	r3, #1
 8022012:	d905      	bls.n	8022020 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8022014:	6839      	ldr	r1, [r7, #0]
 8022016:	6878      	ldr	r0, [r7, #4]
 8022018:	f000 f96c 	bl	80222f4 <USBD_CtlError>
    return USBD_FAIL;
 802201c:	2303      	movs	r3, #3
 802201e:	e088      	b.n	8022132 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8022020:	687b      	ldr	r3, [r7, #4]
 8022022:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8022026:	b2db      	uxtb	r3, r3
 8022028:	2b02      	cmp	r3, #2
 802202a:	d002      	beq.n	8022032 <USBD_SetConfig+0x3e>
 802202c:	2b03      	cmp	r3, #3
 802202e:	d025      	beq.n	802207c <USBD_SetConfig+0x88>
 8022030:	e071      	b.n	8022116 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8022032:	4b42      	ldr	r3, [pc, #264]	; (802213c <USBD_SetConfig+0x148>)
 8022034:	781b      	ldrb	r3, [r3, #0]
 8022036:	2b00      	cmp	r3, #0
 8022038:	d01c      	beq.n	8022074 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 802203a:	4b40      	ldr	r3, [pc, #256]	; (802213c <USBD_SetConfig+0x148>)
 802203c:	781b      	ldrb	r3, [r3, #0]
 802203e:	461a      	mov	r2, r3
 8022040:	687b      	ldr	r3, [r7, #4]
 8022042:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8022044:	4b3d      	ldr	r3, [pc, #244]	; (802213c <USBD_SetConfig+0x148>)
 8022046:	781b      	ldrb	r3, [r3, #0]
 8022048:	4619      	mov	r1, r3
 802204a:	6878      	ldr	r0, [r7, #4]
 802204c:	f7ff f91f 	bl	802128e <USBD_SetClassConfig>
 8022050:	4603      	mov	r3, r0
 8022052:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8022054:	7bfb      	ldrb	r3, [r7, #15]
 8022056:	2b00      	cmp	r3, #0
 8022058:	d004      	beq.n	8022064 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 802205a:	6839      	ldr	r1, [r7, #0]
 802205c:	6878      	ldr	r0, [r7, #4]
 802205e:	f000 f949 	bl	80222f4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8022062:	e065      	b.n	8022130 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8022064:	6878      	ldr	r0, [r7, #4]
 8022066:	f000 f9f3 	bl	8022450 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 802206a:	687b      	ldr	r3, [r7, #4]
 802206c:	2203      	movs	r2, #3
 802206e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8022072:	e05d      	b.n	8022130 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8022074:	6878      	ldr	r0, [r7, #4]
 8022076:	f000 f9eb 	bl	8022450 <USBD_CtlSendStatus>
      break;
 802207a:	e059      	b.n	8022130 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 802207c:	4b2f      	ldr	r3, [pc, #188]	; (802213c <USBD_SetConfig+0x148>)
 802207e:	781b      	ldrb	r3, [r3, #0]
 8022080:	2b00      	cmp	r3, #0
 8022082:	d112      	bne.n	80220aa <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8022084:	687b      	ldr	r3, [r7, #4]
 8022086:	2202      	movs	r2, #2
 8022088:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 802208c:	4b2b      	ldr	r3, [pc, #172]	; (802213c <USBD_SetConfig+0x148>)
 802208e:	781b      	ldrb	r3, [r3, #0]
 8022090:	461a      	mov	r2, r3
 8022092:	687b      	ldr	r3, [r7, #4]
 8022094:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8022096:	4b29      	ldr	r3, [pc, #164]	; (802213c <USBD_SetConfig+0x148>)
 8022098:	781b      	ldrb	r3, [r3, #0]
 802209a:	4619      	mov	r1, r3
 802209c:	6878      	ldr	r0, [r7, #4]
 802209e:	f7ff f912 	bl	80212c6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80220a2:	6878      	ldr	r0, [r7, #4]
 80220a4:	f000 f9d4 	bl	8022450 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80220a8:	e042      	b.n	8022130 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80220aa:	4b24      	ldr	r3, [pc, #144]	; (802213c <USBD_SetConfig+0x148>)
 80220ac:	781b      	ldrb	r3, [r3, #0]
 80220ae:	461a      	mov	r2, r3
 80220b0:	687b      	ldr	r3, [r7, #4]
 80220b2:	685b      	ldr	r3, [r3, #4]
 80220b4:	429a      	cmp	r2, r3
 80220b6:	d02a      	beq.n	802210e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80220b8:	687b      	ldr	r3, [r7, #4]
 80220ba:	685b      	ldr	r3, [r3, #4]
 80220bc:	b2db      	uxtb	r3, r3
 80220be:	4619      	mov	r1, r3
 80220c0:	6878      	ldr	r0, [r7, #4]
 80220c2:	f7ff f900 	bl	80212c6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80220c6:	4b1d      	ldr	r3, [pc, #116]	; (802213c <USBD_SetConfig+0x148>)
 80220c8:	781b      	ldrb	r3, [r3, #0]
 80220ca:	461a      	mov	r2, r3
 80220cc:	687b      	ldr	r3, [r7, #4]
 80220ce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80220d0:	4b1a      	ldr	r3, [pc, #104]	; (802213c <USBD_SetConfig+0x148>)
 80220d2:	781b      	ldrb	r3, [r3, #0]
 80220d4:	4619      	mov	r1, r3
 80220d6:	6878      	ldr	r0, [r7, #4]
 80220d8:	f7ff f8d9 	bl	802128e <USBD_SetClassConfig>
 80220dc:	4603      	mov	r3, r0
 80220de:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80220e0:	7bfb      	ldrb	r3, [r7, #15]
 80220e2:	2b00      	cmp	r3, #0
 80220e4:	d00f      	beq.n	8022106 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80220e6:	6839      	ldr	r1, [r7, #0]
 80220e8:	6878      	ldr	r0, [r7, #4]
 80220ea:	f000 f903 	bl	80222f4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80220ee:	687b      	ldr	r3, [r7, #4]
 80220f0:	685b      	ldr	r3, [r3, #4]
 80220f2:	b2db      	uxtb	r3, r3
 80220f4:	4619      	mov	r1, r3
 80220f6:	6878      	ldr	r0, [r7, #4]
 80220f8:	f7ff f8e5 	bl	80212c6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80220fc:	687b      	ldr	r3, [r7, #4]
 80220fe:	2202      	movs	r2, #2
 8022100:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8022104:	e014      	b.n	8022130 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8022106:	6878      	ldr	r0, [r7, #4]
 8022108:	f000 f9a2 	bl	8022450 <USBD_CtlSendStatus>
      break;
 802210c:	e010      	b.n	8022130 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 802210e:	6878      	ldr	r0, [r7, #4]
 8022110:	f000 f99e 	bl	8022450 <USBD_CtlSendStatus>
      break;
 8022114:	e00c      	b.n	8022130 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8022116:	6839      	ldr	r1, [r7, #0]
 8022118:	6878      	ldr	r0, [r7, #4]
 802211a:	f000 f8eb 	bl	80222f4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 802211e:	4b07      	ldr	r3, [pc, #28]	; (802213c <USBD_SetConfig+0x148>)
 8022120:	781b      	ldrb	r3, [r3, #0]
 8022122:	4619      	mov	r1, r3
 8022124:	6878      	ldr	r0, [r7, #4]
 8022126:	f7ff f8ce 	bl	80212c6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 802212a:	2303      	movs	r3, #3
 802212c:	73fb      	strb	r3, [r7, #15]
      break;
 802212e:	bf00      	nop
  }

  return ret;
 8022130:	7bfb      	ldrb	r3, [r7, #15]
}
 8022132:	4618      	mov	r0, r3
 8022134:	3710      	adds	r7, #16
 8022136:	46bd      	mov	sp, r7
 8022138:	bd80      	pop	{r7, pc}
 802213a:	bf00      	nop
 802213c:	200007b4 	.word	0x200007b4

08022140 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8022140:	b580      	push	{r7, lr}
 8022142:	b082      	sub	sp, #8
 8022144:	af00      	add	r7, sp, #0
 8022146:	6078      	str	r0, [r7, #4]
 8022148:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 802214a:	683b      	ldr	r3, [r7, #0]
 802214c:	88db      	ldrh	r3, [r3, #6]
 802214e:	2b01      	cmp	r3, #1
 8022150:	d004      	beq.n	802215c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8022152:	6839      	ldr	r1, [r7, #0]
 8022154:	6878      	ldr	r0, [r7, #4]
 8022156:	f000 f8cd 	bl	80222f4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 802215a:	e023      	b.n	80221a4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 802215c:	687b      	ldr	r3, [r7, #4]
 802215e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8022162:	b2db      	uxtb	r3, r3
 8022164:	2b02      	cmp	r3, #2
 8022166:	dc02      	bgt.n	802216e <USBD_GetConfig+0x2e>
 8022168:	2b00      	cmp	r3, #0
 802216a:	dc03      	bgt.n	8022174 <USBD_GetConfig+0x34>
 802216c:	e015      	b.n	802219a <USBD_GetConfig+0x5a>
 802216e:	2b03      	cmp	r3, #3
 8022170:	d00b      	beq.n	802218a <USBD_GetConfig+0x4a>
 8022172:	e012      	b.n	802219a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8022174:	687b      	ldr	r3, [r7, #4]
 8022176:	2200      	movs	r2, #0
 8022178:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 802217a:	687b      	ldr	r3, [r7, #4]
 802217c:	3308      	adds	r3, #8
 802217e:	2201      	movs	r2, #1
 8022180:	4619      	mov	r1, r3
 8022182:	6878      	ldr	r0, [r7, #4]
 8022184:	f000 f927 	bl	80223d6 <USBD_CtlSendData>
        break;
 8022188:	e00c      	b.n	80221a4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 802218a:	687b      	ldr	r3, [r7, #4]
 802218c:	3304      	adds	r3, #4
 802218e:	2201      	movs	r2, #1
 8022190:	4619      	mov	r1, r3
 8022192:	6878      	ldr	r0, [r7, #4]
 8022194:	f000 f91f 	bl	80223d6 <USBD_CtlSendData>
        break;
 8022198:	e004      	b.n	80221a4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 802219a:	6839      	ldr	r1, [r7, #0]
 802219c:	6878      	ldr	r0, [r7, #4]
 802219e:	f000 f8a9 	bl	80222f4 <USBD_CtlError>
        break;
 80221a2:	bf00      	nop
}
 80221a4:	bf00      	nop
 80221a6:	3708      	adds	r7, #8
 80221a8:	46bd      	mov	sp, r7
 80221aa:	bd80      	pop	{r7, pc}

080221ac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80221ac:	b580      	push	{r7, lr}
 80221ae:	b082      	sub	sp, #8
 80221b0:	af00      	add	r7, sp, #0
 80221b2:	6078      	str	r0, [r7, #4]
 80221b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80221b6:	687b      	ldr	r3, [r7, #4]
 80221b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80221bc:	b2db      	uxtb	r3, r3
 80221be:	3b01      	subs	r3, #1
 80221c0:	2b02      	cmp	r3, #2
 80221c2:	d81e      	bhi.n	8022202 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80221c4:	683b      	ldr	r3, [r7, #0]
 80221c6:	88db      	ldrh	r3, [r3, #6]
 80221c8:	2b02      	cmp	r3, #2
 80221ca:	d004      	beq.n	80221d6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80221cc:	6839      	ldr	r1, [r7, #0]
 80221ce:	6878      	ldr	r0, [r7, #4]
 80221d0:	f000 f890 	bl	80222f4 <USBD_CtlError>
        break;
 80221d4:	e01a      	b.n	802220c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80221d6:	687b      	ldr	r3, [r7, #4]
 80221d8:	2201      	movs	r2, #1
 80221da:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80221dc:	687b      	ldr	r3, [r7, #4]
 80221de:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80221e2:	2b00      	cmp	r3, #0
 80221e4:	d005      	beq.n	80221f2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80221e6:	687b      	ldr	r3, [r7, #4]
 80221e8:	68db      	ldr	r3, [r3, #12]
 80221ea:	f043 0202 	orr.w	r2, r3, #2
 80221ee:	687b      	ldr	r3, [r7, #4]
 80221f0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80221f2:	687b      	ldr	r3, [r7, #4]
 80221f4:	330c      	adds	r3, #12
 80221f6:	2202      	movs	r2, #2
 80221f8:	4619      	mov	r1, r3
 80221fa:	6878      	ldr	r0, [r7, #4]
 80221fc:	f000 f8eb 	bl	80223d6 <USBD_CtlSendData>
      break;
 8022200:	e004      	b.n	802220c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8022202:	6839      	ldr	r1, [r7, #0]
 8022204:	6878      	ldr	r0, [r7, #4]
 8022206:	f000 f875 	bl	80222f4 <USBD_CtlError>
      break;
 802220a:	bf00      	nop
  }
}
 802220c:	bf00      	nop
 802220e:	3708      	adds	r7, #8
 8022210:	46bd      	mov	sp, r7
 8022212:	bd80      	pop	{r7, pc}

08022214 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8022214:	b580      	push	{r7, lr}
 8022216:	b082      	sub	sp, #8
 8022218:	af00      	add	r7, sp, #0
 802221a:	6078      	str	r0, [r7, #4]
 802221c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 802221e:	683b      	ldr	r3, [r7, #0]
 8022220:	885b      	ldrh	r3, [r3, #2]
 8022222:	2b01      	cmp	r3, #1
 8022224:	d106      	bne.n	8022234 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8022226:	687b      	ldr	r3, [r7, #4]
 8022228:	2201      	movs	r2, #1
 802222a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 802222e:	6878      	ldr	r0, [r7, #4]
 8022230:	f000 f90e 	bl	8022450 <USBD_CtlSendStatus>
  }
}
 8022234:	bf00      	nop
 8022236:	3708      	adds	r7, #8
 8022238:	46bd      	mov	sp, r7
 802223a:	bd80      	pop	{r7, pc}

0802223c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802223c:	b580      	push	{r7, lr}
 802223e:	b082      	sub	sp, #8
 8022240:	af00      	add	r7, sp, #0
 8022242:	6078      	str	r0, [r7, #4]
 8022244:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8022246:	687b      	ldr	r3, [r7, #4]
 8022248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802224c:	b2db      	uxtb	r3, r3
 802224e:	3b01      	subs	r3, #1
 8022250:	2b02      	cmp	r3, #2
 8022252:	d80b      	bhi.n	802226c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8022254:	683b      	ldr	r3, [r7, #0]
 8022256:	885b      	ldrh	r3, [r3, #2]
 8022258:	2b01      	cmp	r3, #1
 802225a:	d10c      	bne.n	8022276 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 802225c:	687b      	ldr	r3, [r7, #4]
 802225e:	2200      	movs	r2, #0
 8022260:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8022264:	6878      	ldr	r0, [r7, #4]
 8022266:	f000 f8f3 	bl	8022450 <USBD_CtlSendStatus>
      }
      break;
 802226a:	e004      	b.n	8022276 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 802226c:	6839      	ldr	r1, [r7, #0]
 802226e:	6878      	ldr	r0, [r7, #4]
 8022270:	f000 f840 	bl	80222f4 <USBD_CtlError>
      break;
 8022274:	e000      	b.n	8022278 <USBD_ClrFeature+0x3c>
      break;
 8022276:	bf00      	nop
  }
}
 8022278:	bf00      	nop
 802227a:	3708      	adds	r7, #8
 802227c:	46bd      	mov	sp, r7
 802227e:	bd80      	pop	{r7, pc}

08022280 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8022280:	b580      	push	{r7, lr}
 8022282:	b084      	sub	sp, #16
 8022284:	af00      	add	r7, sp, #0
 8022286:	6078      	str	r0, [r7, #4]
 8022288:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 802228a:	683b      	ldr	r3, [r7, #0]
 802228c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 802228e:	68fb      	ldr	r3, [r7, #12]
 8022290:	781a      	ldrb	r2, [r3, #0]
 8022292:	687b      	ldr	r3, [r7, #4]
 8022294:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8022296:	68fb      	ldr	r3, [r7, #12]
 8022298:	3301      	adds	r3, #1
 802229a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 802229c:	68fb      	ldr	r3, [r7, #12]
 802229e:	781a      	ldrb	r2, [r3, #0]
 80222a0:	687b      	ldr	r3, [r7, #4]
 80222a2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80222a4:	68fb      	ldr	r3, [r7, #12]
 80222a6:	3301      	adds	r3, #1
 80222a8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80222aa:	68f8      	ldr	r0, [r7, #12]
 80222ac:	f7ff fa92 	bl	80217d4 <SWAPBYTE>
 80222b0:	4603      	mov	r3, r0
 80222b2:	461a      	mov	r2, r3
 80222b4:	687b      	ldr	r3, [r7, #4]
 80222b6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80222b8:	68fb      	ldr	r3, [r7, #12]
 80222ba:	3301      	adds	r3, #1
 80222bc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80222be:	68fb      	ldr	r3, [r7, #12]
 80222c0:	3301      	adds	r3, #1
 80222c2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80222c4:	68f8      	ldr	r0, [r7, #12]
 80222c6:	f7ff fa85 	bl	80217d4 <SWAPBYTE>
 80222ca:	4603      	mov	r3, r0
 80222cc:	461a      	mov	r2, r3
 80222ce:	687b      	ldr	r3, [r7, #4]
 80222d0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80222d2:	68fb      	ldr	r3, [r7, #12]
 80222d4:	3301      	adds	r3, #1
 80222d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80222d8:	68fb      	ldr	r3, [r7, #12]
 80222da:	3301      	adds	r3, #1
 80222dc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80222de:	68f8      	ldr	r0, [r7, #12]
 80222e0:	f7ff fa78 	bl	80217d4 <SWAPBYTE>
 80222e4:	4603      	mov	r3, r0
 80222e6:	461a      	mov	r2, r3
 80222e8:	687b      	ldr	r3, [r7, #4]
 80222ea:	80da      	strh	r2, [r3, #6]
}
 80222ec:	bf00      	nop
 80222ee:	3710      	adds	r7, #16
 80222f0:	46bd      	mov	sp, r7
 80222f2:	bd80      	pop	{r7, pc}

080222f4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80222f4:	b580      	push	{r7, lr}
 80222f6:	b082      	sub	sp, #8
 80222f8:	af00      	add	r7, sp, #0
 80222fa:	6078      	str	r0, [r7, #4]
 80222fc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80222fe:	2180      	movs	r1, #128	; 0x80
 8022300:	6878      	ldr	r0, [r7, #4]
 8022302:	f000 fcbe 	bl	8022c82 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8022306:	2100      	movs	r1, #0
 8022308:	6878      	ldr	r0, [r7, #4]
 802230a:	f000 fcba 	bl	8022c82 <USBD_LL_StallEP>
}
 802230e:	bf00      	nop
 8022310:	3708      	adds	r7, #8
 8022312:	46bd      	mov	sp, r7
 8022314:	bd80      	pop	{r7, pc}

08022316 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8022316:	b580      	push	{r7, lr}
 8022318:	b086      	sub	sp, #24
 802231a:	af00      	add	r7, sp, #0
 802231c:	60f8      	str	r0, [r7, #12]
 802231e:	60b9      	str	r1, [r7, #8]
 8022320:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8022322:	2300      	movs	r3, #0
 8022324:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8022326:	68fb      	ldr	r3, [r7, #12]
 8022328:	2b00      	cmp	r3, #0
 802232a:	d036      	beq.n	802239a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 802232c:	68fb      	ldr	r3, [r7, #12]
 802232e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8022330:	6938      	ldr	r0, [r7, #16]
 8022332:	f000 f836 	bl	80223a2 <USBD_GetLen>
 8022336:	4603      	mov	r3, r0
 8022338:	3301      	adds	r3, #1
 802233a:	b29b      	uxth	r3, r3
 802233c:	005b      	lsls	r3, r3, #1
 802233e:	b29a      	uxth	r2, r3
 8022340:	687b      	ldr	r3, [r7, #4]
 8022342:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8022344:	7dfb      	ldrb	r3, [r7, #23]
 8022346:	68ba      	ldr	r2, [r7, #8]
 8022348:	4413      	add	r3, r2
 802234a:	687a      	ldr	r2, [r7, #4]
 802234c:	7812      	ldrb	r2, [r2, #0]
 802234e:	701a      	strb	r2, [r3, #0]
  idx++;
 8022350:	7dfb      	ldrb	r3, [r7, #23]
 8022352:	3301      	adds	r3, #1
 8022354:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8022356:	7dfb      	ldrb	r3, [r7, #23]
 8022358:	68ba      	ldr	r2, [r7, #8]
 802235a:	4413      	add	r3, r2
 802235c:	2203      	movs	r2, #3
 802235e:	701a      	strb	r2, [r3, #0]
  idx++;
 8022360:	7dfb      	ldrb	r3, [r7, #23]
 8022362:	3301      	adds	r3, #1
 8022364:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8022366:	e013      	b.n	8022390 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8022368:	7dfb      	ldrb	r3, [r7, #23]
 802236a:	68ba      	ldr	r2, [r7, #8]
 802236c:	4413      	add	r3, r2
 802236e:	693a      	ldr	r2, [r7, #16]
 8022370:	7812      	ldrb	r2, [r2, #0]
 8022372:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8022374:	693b      	ldr	r3, [r7, #16]
 8022376:	3301      	adds	r3, #1
 8022378:	613b      	str	r3, [r7, #16]
    idx++;
 802237a:	7dfb      	ldrb	r3, [r7, #23]
 802237c:	3301      	adds	r3, #1
 802237e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8022380:	7dfb      	ldrb	r3, [r7, #23]
 8022382:	68ba      	ldr	r2, [r7, #8]
 8022384:	4413      	add	r3, r2
 8022386:	2200      	movs	r2, #0
 8022388:	701a      	strb	r2, [r3, #0]
    idx++;
 802238a:	7dfb      	ldrb	r3, [r7, #23]
 802238c:	3301      	adds	r3, #1
 802238e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8022390:	693b      	ldr	r3, [r7, #16]
 8022392:	781b      	ldrb	r3, [r3, #0]
 8022394:	2b00      	cmp	r3, #0
 8022396:	d1e7      	bne.n	8022368 <USBD_GetString+0x52>
 8022398:	e000      	b.n	802239c <USBD_GetString+0x86>
    return;
 802239a:	bf00      	nop
  }
}
 802239c:	3718      	adds	r7, #24
 802239e:	46bd      	mov	sp, r7
 80223a0:	bd80      	pop	{r7, pc}

080223a2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80223a2:	b480      	push	{r7}
 80223a4:	b085      	sub	sp, #20
 80223a6:	af00      	add	r7, sp, #0
 80223a8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80223aa:	2300      	movs	r3, #0
 80223ac:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80223ae:	687b      	ldr	r3, [r7, #4]
 80223b0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80223b2:	e005      	b.n	80223c0 <USBD_GetLen+0x1e>
  {
    len++;
 80223b4:	7bfb      	ldrb	r3, [r7, #15]
 80223b6:	3301      	adds	r3, #1
 80223b8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80223ba:	68bb      	ldr	r3, [r7, #8]
 80223bc:	3301      	adds	r3, #1
 80223be:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80223c0:	68bb      	ldr	r3, [r7, #8]
 80223c2:	781b      	ldrb	r3, [r3, #0]
 80223c4:	2b00      	cmp	r3, #0
 80223c6:	d1f5      	bne.n	80223b4 <USBD_GetLen+0x12>
  }

  return len;
 80223c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80223ca:	4618      	mov	r0, r3
 80223cc:	3714      	adds	r7, #20
 80223ce:	46bd      	mov	sp, r7
 80223d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223d4:	4770      	bx	lr

080223d6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80223d6:	b580      	push	{r7, lr}
 80223d8:	b084      	sub	sp, #16
 80223da:	af00      	add	r7, sp, #0
 80223dc:	60f8      	str	r0, [r7, #12]
 80223de:	60b9      	str	r1, [r7, #8]
 80223e0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80223e2:	68fb      	ldr	r3, [r7, #12]
 80223e4:	2202      	movs	r2, #2
 80223e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80223ea:	68fb      	ldr	r3, [r7, #12]
 80223ec:	687a      	ldr	r2, [r7, #4]
 80223ee:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80223f0:	68fb      	ldr	r3, [r7, #12]
 80223f2:	687a      	ldr	r2, [r7, #4]
 80223f4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80223f6:	687b      	ldr	r3, [r7, #4]
 80223f8:	68ba      	ldr	r2, [r7, #8]
 80223fa:	2100      	movs	r1, #0
 80223fc:	68f8      	ldr	r0, [r7, #12]
 80223fe:	f000 fcc9 	bl	8022d94 <USBD_LL_Transmit>

  return USBD_OK;
 8022402:	2300      	movs	r3, #0
}
 8022404:	4618      	mov	r0, r3
 8022406:	3710      	adds	r7, #16
 8022408:	46bd      	mov	sp, r7
 802240a:	bd80      	pop	{r7, pc}

0802240c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 802240c:	b580      	push	{r7, lr}
 802240e:	b084      	sub	sp, #16
 8022410:	af00      	add	r7, sp, #0
 8022412:	60f8      	str	r0, [r7, #12]
 8022414:	60b9      	str	r1, [r7, #8]
 8022416:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8022418:	687b      	ldr	r3, [r7, #4]
 802241a:	68ba      	ldr	r2, [r7, #8]
 802241c:	2100      	movs	r1, #0
 802241e:	68f8      	ldr	r0, [r7, #12]
 8022420:	f000 fcb8 	bl	8022d94 <USBD_LL_Transmit>

  return USBD_OK;
 8022424:	2300      	movs	r3, #0
}
 8022426:	4618      	mov	r0, r3
 8022428:	3710      	adds	r7, #16
 802242a:	46bd      	mov	sp, r7
 802242c:	bd80      	pop	{r7, pc}

0802242e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 802242e:	b580      	push	{r7, lr}
 8022430:	b084      	sub	sp, #16
 8022432:	af00      	add	r7, sp, #0
 8022434:	60f8      	str	r0, [r7, #12]
 8022436:	60b9      	str	r1, [r7, #8]
 8022438:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 802243a:	687b      	ldr	r3, [r7, #4]
 802243c:	68ba      	ldr	r2, [r7, #8]
 802243e:	2100      	movs	r1, #0
 8022440:	68f8      	ldr	r0, [r7, #12]
 8022442:	f000 fcc8 	bl	8022dd6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8022446:	2300      	movs	r3, #0
}
 8022448:	4618      	mov	r0, r3
 802244a:	3710      	adds	r7, #16
 802244c:	46bd      	mov	sp, r7
 802244e:	bd80      	pop	{r7, pc}

08022450 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8022450:	b580      	push	{r7, lr}
 8022452:	b082      	sub	sp, #8
 8022454:	af00      	add	r7, sp, #0
 8022456:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8022458:	687b      	ldr	r3, [r7, #4]
 802245a:	2204      	movs	r2, #4
 802245c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8022460:	2300      	movs	r3, #0
 8022462:	2200      	movs	r2, #0
 8022464:	2100      	movs	r1, #0
 8022466:	6878      	ldr	r0, [r7, #4]
 8022468:	f000 fc94 	bl	8022d94 <USBD_LL_Transmit>

  return USBD_OK;
 802246c:	2300      	movs	r3, #0
}
 802246e:	4618      	mov	r0, r3
 8022470:	3708      	adds	r7, #8
 8022472:	46bd      	mov	sp, r7
 8022474:	bd80      	pop	{r7, pc}

08022476 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8022476:	b580      	push	{r7, lr}
 8022478:	b082      	sub	sp, #8
 802247a:	af00      	add	r7, sp, #0
 802247c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 802247e:	687b      	ldr	r3, [r7, #4]
 8022480:	2205      	movs	r2, #5
 8022482:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8022486:	2300      	movs	r3, #0
 8022488:	2200      	movs	r2, #0
 802248a:	2100      	movs	r1, #0
 802248c:	6878      	ldr	r0, [r7, #4]
 802248e:	f000 fca2 	bl	8022dd6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8022492:	2300      	movs	r3, #0
}
 8022494:	4618      	mov	r0, r3
 8022496:	3708      	adds	r7, #8
 8022498:	46bd      	mov	sp, r7
 802249a:	bd80      	pop	{r7, pc}

0802249c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 802249c:	b580      	push	{r7, lr}
 802249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80224a0:	2200      	movs	r2, #0
 80224a2:	4912      	ldr	r1, [pc, #72]	; (80224ec <MX_USB_DEVICE_Init+0x50>)
 80224a4:	4812      	ldr	r0, [pc, #72]	; (80224f0 <MX_USB_DEVICE_Init+0x54>)
 80224a6:	f7fe fe84 	bl	80211b2 <USBD_Init>
 80224aa:	4603      	mov	r3, r0
 80224ac:	2b00      	cmp	r3, #0
 80224ae:	d001      	beq.n	80224b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80224b0:	f7f5 fdd8 	bl	8018064 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 80224b4:	490f      	ldr	r1, [pc, #60]	; (80224f4 <MX_USB_DEVICE_Init+0x58>)
 80224b6:	480e      	ldr	r0, [pc, #56]	; (80224f0 <MX_USB_DEVICE_Init+0x54>)
 80224b8:	f7fe feab 	bl	8021212 <USBD_RegisterClass>
 80224bc:	4603      	mov	r3, r0
 80224be:	2b00      	cmp	r3, #0
 80224c0:	d001      	beq.n	80224c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80224c2:	f7f5 fdcf 	bl	8018064 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 80224c6:	490c      	ldr	r1, [pc, #48]	; (80224f8 <MX_USB_DEVICE_Init+0x5c>)
 80224c8:	4809      	ldr	r0, [pc, #36]	; (80224f0 <MX_USB_DEVICE_Init+0x54>)
 80224ca:	f7fd fa5b 	bl	801f984 <USBD_MSC_RegisterStorage>
 80224ce:	4603      	mov	r3, r0
 80224d0:	2b00      	cmp	r3, #0
 80224d2:	d001      	beq.n	80224d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80224d4:	f7f5 fdc6 	bl	8018064 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80224d8:	4805      	ldr	r0, [pc, #20]	; (80224f0 <MX_USB_DEVICE_Init+0x54>)
 80224da:	f7fe fec1 	bl	8021260 <USBD_Start>
 80224de:	4603      	mov	r3, r0
 80224e0:	2b00      	cmp	r3, #0
 80224e2:	d001      	beq.n	80224e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80224e4:	f7f5 fdbe 	bl	8018064 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80224e8:	bf00      	nop
 80224ea:	bd80      	pop	{r7, pc}
 80224ec:	20000680 	.word	0x20000680
 80224f0:	20006c48 	.word	0x20006c48
 80224f4:	20000598 	.word	0x20000598
 80224f8:	200006e0 	.word	0x200006e0

080224fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80224fc:	b480      	push	{r7}
 80224fe:	b083      	sub	sp, #12
 8022500:	af00      	add	r7, sp, #0
 8022502:	4603      	mov	r3, r0
 8022504:	6039      	str	r1, [r7, #0]
 8022506:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8022508:	683b      	ldr	r3, [r7, #0]
 802250a:	2212      	movs	r2, #18
 802250c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 802250e:	4b03      	ldr	r3, [pc, #12]	; (802251c <USBD_FS_DeviceDescriptor+0x20>)
}
 8022510:	4618      	mov	r0, r3
 8022512:	370c      	adds	r7, #12
 8022514:	46bd      	mov	sp, r7
 8022516:	f85d 7b04 	ldr.w	r7, [sp], #4
 802251a:	4770      	bx	lr
 802251c:	200006a0 	.word	0x200006a0

08022520 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022520:	b480      	push	{r7}
 8022522:	b083      	sub	sp, #12
 8022524:	af00      	add	r7, sp, #0
 8022526:	4603      	mov	r3, r0
 8022528:	6039      	str	r1, [r7, #0]
 802252a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 802252c:	683b      	ldr	r3, [r7, #0]
 802252e:	2204      	movs	r2, #4
 8022530:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8022532:	4b03      	ldr	r3, [pc, #12]	; (8022540 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8022534:	4618      	mov	r0, r3
 8022536:	370c      	adds	r7, #12
 8022538:	46bd      	mov	sp, r7
 802253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802253e:	4770      	bx	lr
 8022540:	200006c0 	.word	0x200006c0

08022544 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022544:	b580      	push	{r7, lr}
 8022546:	b082      	sub	sp, #8
 8022548:	af00      	add	r7, sp, #0
 802254a:	4603      	mov	r3, r0
 802254c:	6039      	str	r1, [r7, #0]
 802254e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8022550:	79fb      	ldrb	r3, [r7, #7]
 8022552:	2b00      	cmp	r3, #0
 8022554:	d105      	bne.n	8022562 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8022556:	683a      	ldr	r2, [r7, #0]
 8022558:	4907      	ldr	r1, [pc, #28]	; (8022578 <USBD_FS_ProductStrDescriptor+0x34>)
 802255a:	4808      	ldr	r0, [pc, #32]	; (802257c <USBD_FS_ProductStrDescriptor+0x38>)
 802255c:	f7ff fedb 	bl	8022316 <USBD_GetString>
 8022560:	e004      	b.n	802256c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8022562:	683a      	ldr	r2, [r7, #0]
 8022564:	4904      	ldr	r1, [pc, #16]	; (8022578 <USBD_FS_ProductStrDescriptor+0x34>)
 8022566:	4805      	ldr	r0, [pc, #20]	; (802257c <USBD_FS_ProductStrDescriptor+0x38>)
 8022568:	f7ff fed5 	bl	8022316 <USBD_GetString>
  }
  return USBD_StrDesc;
 802256c:	4b02      	ldr	r3, [pc, #8]	; (8022578 <USBD_FS_ProductStrDescriptor+0x34>)
}
 802256e:	4618      	mov	r0, r3
 8022570:	3708      	adds	r7, #8
 8022572:	46bd      	mov	sp, r7
 8022574:	bd80      	pop	{r7, pc}
 8022576:	bf00      	nop
 8022578:	20006f18 	.word	0x20006f18
 802257c:	08000a84 	.word	0x08000a84

08022580 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022580:	b580      	push	{r7, lr}
 8022582:	b082      	sub	sp, #8
 8022584:	af00      	add	r7, sp, #0
 8022586:	4603      	mov	r3, r0
 8022588:	6039      	str	r1, [r7, #0]
 802258a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 802258c:	683a      	ldr	r2, [r7, #0]
 802258e:	4904      	ldr	r1, [pc, #16]	; (80225a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8022590:	4804      	ldr	r0, [pc, #16]	; (80225a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8022592:	f7ff fec0 	bl	8022316 <USBD_GetString>
  return USBD_StrDesc;
 8022596:	4b02      	ldr	r3, [pc, #8]	; (80225a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8022598:	4618      	mov	r0, r3
 802259a:	3708      	adds	r7, #8
 802259c:	46bd      	mov	sp, r7
 802259e:	bd80      	pop	{r7, pc}
 80225a0:	20006f18 	.word	0x20006f18
 80225a4:	08000a98 	.word	0x08000a98

080225a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80225a8:	b580      	push	{r7, lr}
 80225aa:	b082      	sub	sp, #8
 80225ac:	af00      	add	r7, sp, #0
 80225ae:	4603      	mov	r3, r0
 80225b0:	6039      	str	r1, [r7, #0]
 80225b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80225b4:	683b      	ldr	r3, [r7, #0]
 80225b6:	221a      	movs	r2, #26
 80225b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80225ba:	f000 f855 	bl	8022668 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80225be:	4b02      	ldr	r3, [pc, #8]	; (80225c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80225c0:	4618      	mov	r0, r3
 80225c2:	3708      	adds	r7, #8
 80225c4:	46bd      	mov	sp, r7
 80225c6:	bd80      	pop	{r7, pc}
 80225c8:	200006c4 	.word	0x200006c4

080225cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80225cc:	b580      	push	{r7, lr}
 80225ce:	b082      	sub	sp, #8
 80225d0:	af00      	add	r7, sp, #0
 80225d2:	4603      	mov	r3, r0
 80225d4:	6039      	str	r1, [r7, #0]
 80225d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80225d8:	79fb      	ldrb	r3, [r7, #7]
 80225da:	2b00      	cmp	r3, #0
 80225dc:	d105      	bne.n	80225ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80225de:	683a      	ldr	r2, [r7, #0]
 80225e0:	4907      	ldr	r1, [pc, #28]	; (8022600 <USBD_FS_ConfigStrDescriptor+0x34>)
 80225e2:	4808      	ldr	r0, [pc, #32]	; (8022604 <USBD_FS_ConfigStrDescriptor+0x38>)
 80225e4:	f7ff fe97 	bl	8022316 <USBD_GetString>
 80225e8:	e004      	b.n	80225f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80225ea:	683a      	ldr	r2, [r7, #0]
 80225ec:	4904      	ldr	r1, [pc, #16]	; (8022600 <USBD_FS_ConfigStrDescriptor+0x34>)
 80225ee:	4805      	ldr	r0, [pc, #20]	; (8022604 <USBD_FS_ConfigStrDescriptor+0x38>)
 80225f0:	f7ff fe91 	bl	8022316 <USBD_GetString>
  }
  return USBD_StrDesc;
 80225f4:	4b02      	ldr	r3, [pc, #8]	; (8022600 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80225f6:	4618      	mov	r0, r3
 80225f8:	3708      	adds	r7, #8
 80225fa:	46bd      	mov	sp, r7
 80225fc:	bd80      	pop	{r7, pc}
 80225fe:	bf00      	nop
 8022600:	20006f18 	.word	0x20006f18
 8022604:	08000aac 	.word	0x08000aac

08022608 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022608:	b580      	push	{r7, lr}
 802260a:	b082      	sub	sp, #8
 802260c:	af00      	add	r7, sp, #0
 802260e:	4603      	mov	r3, r0
 8022610:	6039      	str	r1, [r7, #0]
 8022612:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8022614:	79fb      	ldrb	r3, [r7, #7]
 8022616:	2b00      	cmp	r3, #0
 8022618:	d105      	bne.n	8022626 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 802261a:	683a      	ldr	r2, [r7, #0]
 802261c:	4907      	ldr	r1, [pc, #28]	; (802263c <USBD_FS_InterfaceStrDescriptor+0x34>)
 802261e:	4808      	ldr	r0, [pc, #32]	; (8022640 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8022620:	f7ff fe79 	bl	8022316 <USBD_GetString>
 8022624:	e004      	b.n	8022630 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8022626:	683a      	ldr	r2, [r7, #0]
 8022628:	4904      	ldr	r1, [pc, #16]	; (802263c <USBD_FS_InterfaceStrDescriptor+0x34>)
 802262a:	4805      	ldr	r0, [pc, #20]	; (8022640 <USBD_FS_InterfaceStrDescriptor+0x38>)
 802262c:	f7ff fe73 	bl	8022316 <USBD_GetString>
  }
  return USBD_StrDesc;
 8022630:	4b02      	ldr	r3, [pc, #8]	; (802263c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8022632:	4618      	mov	r0, r3
 8022634:	3708      	adds	r7, #8
 8022636:	46bd      	mov	sp, r7
 8022638:	bd80      	pop	{r7, pc}
 802263a:	bf00      	nop
 802263c:	20006f18 	.word	0x20006f18
 8022640:	08000ab8 	.word	0x08000ab8

08022644 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022644:	b480      	push	{r7}
 8022646:	b083      	sub	sp, #12
 8022648:	af00      	add	r7, sp, #0
 802264a:	4603      	mov	r3, r0
 802264c:	6039      	str	r1, [r7, #0]
 802264e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8022650:	683b      	ldr	r3, [r7, #0]
 8022652:	220c      	movs	r2, #12
 8022654:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8022656:	4b03      	ldr	r3, [pc, #12]	; (8022664 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8022658:	4618      	mov	r0, r3
 802265a:	370c      	adds	r7, #12
 802265c:	46bd      	mov	sp, r7
 802265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022662:	4770      	bx	lr
 8022664:	200006b4 	.word	0x200006b4

08022668 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8022668:	b580      	push	{r7, lr}
 802266a:	b084      	sub	sp, #16
 802266c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 802266e:	4b0f      	ldr	r3, [pc, #60]	; (80226ac <Get_SerialNum+0x44>)
 8022670:	681b      	ldr	r3, [r3, #0]
 8022672:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8022674:	4b0e      	ldr	r3, [pc, #56]	; (80226b0 <Get_SerialNum+0x48>)
 8022676:	681b      	ldr	r3, [r3, #0]
 8022678:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 802267a:	4b0e      	ldr	r3, [pc, #56]	; (80226b4 <Get_SerialNum+0x4c>)
 802267c:	681b      	ldr	r3, [r3, #0]
 802267e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8022680:	68fa      	ldr	r2, [r7, #12]
 8022682:	687b      	ldr	r3, [r7, #4]
 8022684:	4413      	add	r3, r2
 8022686:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8022688:	68fb      	ldr	r3, [r7, #12]
 802268a:	2b00      	cmp	r3, #0
 802268c:	d009      	beq.n	80226a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 802268e:	2208      	movs	r2, #8
 8022690:	4909      	ldr	r1, [pc, #36]	; (80226b8 <Get_SerialNum+0x50>)
 8022692:	68f8      	ldr	r0, [r7, #12]
 8022694:	f000 f814 	bl	80226c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8022698:	2204      	movs	r2, #4
 802269a:	4908      	ldr	r1, [pc, #32]	; (80226bc <Get_SerialNum+0x54>)
 802269c:	68b8      	ldr	r0, [r7, #8]
 802269e:	f000 f80f 	bl	80226c0 <IntToUnicode>
  }
}
 80226a2:	bf00      	nop
 80226a4:	3710      	adds	r7, #16
 80226a6:	46bd      	mov	sp, r7
 80226a8:	bd80      	pop	{r7, pc}
 80226aa:	bf00      	nop
 80226ac:	1fff7a10 	.word	0x1fff7a10
 80226b0:	1fff7a14 	.word	0x1fff7a14
 80226b4:	1fff7a18 	.word	0x1fff7a18
 80226b8:	200006c6 	.word	0x200006c6
 80226bc:	200006d6 	.word	0x200006d6

080226c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80226c0:	b480      	push	{r7}
 80226c2:	b087      	sub	sp, #28
 80226c4:	af00      	add	r7, sp, #0
 80226c6:	60f8      	str	r0, [r7, #12]
 80226c8:	60b9      	str	r1, [r7, #8]
 80226ca:	4613      	mov	r3, r2
 80226cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80226ce:	2300      	movs	r3, #0
 80226d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80226d2:	2300      	movs	r3, #0
 80226d4:	75fb      	strb	r3, [r7, #23]
 80226d6:	e027      	b.n	8022728 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80226d8:	68fb      	ldr	r3, [r7, #12]
 80226da:	0f1b      	lsrs	r3, r3, #28
 80226dc:	2b09      	cmp	r3, #9
 80226de:	d80b      	bhi.n	80226f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80226e0:	68fb      	ldr	r3, [r7, #12]
 80226e2:	0f1b      	lsrs	r3, r3, #28
 80226e4:	b2da      	uxtb	r2, r3
 80226e6:	7dfb      	ldrb	r3, [r7, #23]
 80226e8:	005b      	lsls	r3, r3, #1
 80226ea:	4619      	mov	r1, r3
 80226ec:	68bb      	ldr	r3, [r7, #8]
 80226ee:	440b      	add	r3, r1
 80226f0:	3230      	adds	r2, #48	; 0x30
 80226f2:	b2d2      	uxtb	r2, r2
 80226f4:	701a      	strb	r2, [r3, #0]
 80226f6:	e00a      	b.n	802270e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80226f8:	68fb      	ldr	r3, [r7, #12]
 80226fa:	0f1b      	lsrs	r3, r3, #28
 80226fc:	b2da      	uxtb	r2, r3
 80226fe:	7dfb      	ldrb	r3, [r7, #23]
 8022700:	005b      	lsls	r3, r3, #1
 8022702:	4619      	mov	r1, r3
 8022704:	68bb      	ldr	r3, [r7, #8]
 8022706:	440b      	add	r3, r1
 8022708:	3237      	adds	r2, #55	; 0x37
 802270a:	b2d2      	uxtb	r2, r2
 802270c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 802270e:	68fb      	ldr	r3, [r7, #12]
 8022710:	011b      	lsls	r3, r3, #4
 8022712:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8022714:	7dfb      	ldrb	r3, [r7, #23]
 8022716:	005b      	lsls	r3, r3, #1
 8022718:	3301      	adds	r3, #1
 802271a:	68ba      	ldr	r2, [r7, #8]
 802271c:	4413      	add	r3, r2
 802271e:	2200      	movs	r2, #0
 8022720:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8022722:	7dfb      	ldrb	r3, [r7, #23]
 8022724:	3301      	adds	r3, #1
 8022726:	75fb      	strb	r3, [r7, #23]
 8022728:	7dfa      	ldrb	r2, [r7, #23]
 802272a:	79fb      	ldrb	r3, [r7, #7]
 802272c:	429a      	cmp	r2, r3
 802272e:	d3d3      	bcc.n	80226d8 <IntToUnicode+0x18>
  }
}
 8022730:	bf00      	nop
 8022732:	bf00      	nop
 8022734:	371c      	adds	r7, #28
 8022736:	46bd      	mov	sp, r7
 8022738:	f85d 7b04 	ldr.w	r7, [sp], #4
 802273c:	4770      	bx	lr

0802273e <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 802273e:	b480      	push	{r7}
 8022740:	b083      	sub	sp, #12
 8022742:	af00      	add	r7, sp, #0
 8022744:	4603      	mov	r3, r0
 8022746:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8022748:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 802274a:	4618      	mov	r0, r3
 802274c:	370c      	adds	r7, #12
 802274e:	46bd      	mov	sp, r7
 8022750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022754:	4770      	bx	lr

08022756 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8022756:	b480      	push	{r7}
 8022758:	b085      	sub	sp, #20
 802275a:	af00      	add	r7, sp, #0
 802275c:	4603      	mov	r3, r0
 802275e:	60b9      	str	r1, [r7, #8]
 8022760:	607a      	str	r2, [r7, #4]
 8022762:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8022764:	68bb      	ldr	r3, [r7, #8]
 8022766:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 802276a:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 802276c:	687b      	ldr	r3, [r7, #4]
 802276e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8022772:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8022774:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8022776:	4618      	mov	r0, r3
 8022778:	3714      	adds	r7, #20
 802277a:	46bd      	mov	sp, r7
 802277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022780:	4770      	bx	lr

08022782 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8022782:	b480      	push	{r7}
 8022784:	b083      	sub	sp, #12
 8022786:	af00      	add	r7, sp, #0
 8022788:	4603      	mov	r3, r0
 802278a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 802278c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 802278e:	4618      	mov	r0, r3
 8022790:	370c      	adds	r7, #12
 8022792:	46bd      	mov	sp, r7
 8022794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022798:	4770      	bx	lr

0802279a <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 802279a:	b480      	push	{r7}
 802279c:	b083      	sub	sp, #12
 802279e:	af00      	add	r7, sp, #0
 80227a0:	4603      	mov	r3, r0
 80227a2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80227a4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80227a6:	4618      	mov	r0, r3
 80227a8:	370c      	adds	r7, #12
 80227aa:	46bd      	mov	sp, r7
 80227ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80227b0:	4770      	bx	lr

080227b2 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80227b2:	b580      	push	{r7, lr}
 80227b4:	b084      	sub	sp, #16
 80227b6:	af00      	add	r7, sp, #0
 80227b8:	60b9      	str	r1, [r7, #8]
 80227ba:	607a      	str	r2, [r7, #4]
 80227bc:	461a      	mov	r2, r3
 80227be:	4603      	mov	r3, r0
 80227c0:	73fb      	strb	r3, [r7, #15]
 80227c2:	4613      	mov	r3, r2
 80227c4:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	ExtFlash_PageRD( (char *)buf, blk_addr*STORAGE_BLK_SIZ, blk_len);
 80227c6:	687b      	ldr	r3, [r7, #4]
 80227c8:	025b      	lsls	r3, r3, #9
 80227ca:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80227ce:	4619      	mov	r1, r3
 80227d0:	68b8      	ldr	r0, [r7, #8]
 80227d2:	f7ec fc0b 	bl	800efec <ExtFlash_PageRD>
  return (USBD_OK);
 80227d6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80227d8:	4618      	mov	r0, r3
 80227da:	3710      	adds	r7, #16
 80227dc:	46bd      	mov	sp, r7
 80227de:	bd80      	pop	{r7, pc}

080227e0 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80227e0:	b580      	push	{r7, lr}
 80227e2:	b084      	sub	sp, #16
 80227e4:	af00      	add	r7, sp, #0
 80227e6:	60b9      	str	r1, [r7, #8]
 80227e8:	607a      	str	r2, [r7, #4]
 80227ea:	461a      	mov	r2, r3
 80227ec:	4603      	mov	r3, r0
 80227ee:	73fb      	strb	r3, [r7, #15]
 80227f0:	4613      	mov	r3, r2
 80227f2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	ExtFlash_PageWR( (char *)buf, blk_addr*STORAGE_BLK_SIZ);
 80227f4:	687b      	ldr	r3, [r7, #4]
 80227f6:	025b      	lsls	r3, r3, #9
 80227f8:	4619      	mov	r1, r3
 80227fa:	68b8      	ldr	r0, [r7, #8]
 80227fc:	f7ec fcce 	bl	800f19c <ExtFlash_PageWR>
	return (USBD_OK);
 8022800:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8022802:	4618      	mov	r0, r3
 8022804:	3710      	adds	r7, #16
 8022806:	46bd      	mov	sp, r7
 8022808:	bd80      	pop	{r7, pc}

0802280a <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 802280a:	b480      	push	{r7}
 802280c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 802280e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8022810:	4618      	mov	r0, r3
 8022812:	46bd      	mov	sp, r7
 8022814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022818:	4770      	bx	lr
	...

0802281c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 802281c:	b580      	push	{r7, lr}
 802281e:	b0a0      	sub	sp, #128	; 0x80
 8022820:	af00      	add	r7, sp, #0
 8022822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8022824:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8022828:	2200      	movs	r2, #0
 802282a:	601a      	str	r2, [r3, #0]
 802282c:	605a      	str	r2, [r3, #4]
 802282e:	609a      	str	r2, [r3, #8]
 8022830:	60da      	str	r2, [r3, #12]
 8022832:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8022834:	f107 0310 	add.w	r3, r7, #16
 8022838:	225c      	movs	r2, #92	; 0x5c
 802283a:	2100      	movs	r1, #0
 802283c:	4618      	mov	r0, r3
 802283e:	f000 fbd9 	bl	8022ff4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8022842:	687b      	ldr	r3, [r7, #4]
 8022844:	681b      	ldr	r3, [r3, #0]
 8022846:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 802284a:	d154      	bne.n	80228f6 <HAL_PCD_MspInit+0xda>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 802284c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8022850:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 25;
 8022852:	2319      	movs	r3, #25
 8022854:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8022856:	23c0      	movs	r3, #192	; 0xc0
 8022858:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 802285a:	2302      	movs	r3, #2
 802285c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 802285e:	2304      	movs	r3, #4
 8022860:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8022862:	2301      	movs	r3, #1
 8022864:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8022866:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 802286a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802286c:	f107 0310 	add.w	r3, r7, #16
 8022870:	4618      	mov	r0, r3
 8022872:	f7f8 fec1 	bl	801b5f8 <HAL_RCCEx_PeriphCLKConfig>
 8022876:	4603      	mov	r3, r0
 8022878:	2b00      	cmp	r3, #0
 802287a:	d001      	beq.n	8022880 <HAL_PCD_MspInit+0x64>
    {
      Error_Handler();
 802287c:	f7f5 fbf2 	bl	8018064 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8022880:	2300      	movs	r3, #0
 8022882:	60fb      	str	r3, [r7, #12]
 8022884:	4b1e      	ldr	r3, [pc, #120]	; (8022900 <HAL_PCD_MspInit+0xe4>)
 8022886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022888:	4a1d      	ldr	r2, [pc, #116]	; (8022900 <HAL_PCD_MspInit+0xe4>)
 802288a:	f043 0301 	orr.w	r3, r3, #1
 802288e:	6313      	str	r3, [r2, #48]	; 0x30
 8022890:	4b1b      	ldr	r3, [pc, #108]	; (8022900 <HAL_PCD_MspInit+0xe4>)
 8022892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022894:	f003 0301 	and.w	r3, r3, #1
 8022898:	60fb      	str	r3, [r7, #12]
 802289a:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = D__Pin|D_A12_Pin;
 802289c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80228a0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80228a2:	2302      	movs	r3, #2
 80228a4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80228a6:	2300      	movs	r3, #0
 80228a8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80228aa:	2303      	movs	r3, #3
 80228ac:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80228ae:	230a      	movs	r3, #10
 80228b0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80228b2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80228b6:	4619      	mov	r1, r3
 80228b8:	4812      	ldr	r0, [pc, #72]	; (8022904 <HAL_PCD_MspInit+0xe8>)
 80228ba:	f7f7 f999 	bl	8019bf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80228be:	4b10      	ldr	r3, [pc, #64]	; (8022900 <HAL_PCD_MspInit+0xe4>)
 80228c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80228c2:	4a0f      	ldr	r2, [pc, #60]	; (8022900 <HAL_PCD_MspInit+0xe4>)
 80228c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80228c8:	6353      	str	r3, [r2, #52]	; 0x34
 80228ca:	2300      	movs	r3, #0
 80228cc:	60bb      	str	r3, [r7, #8]
 80228ce:	4b0c      	ldr	r3, [pc, #48]	; (8022900 <HAL_PCD_MspInit+0xe4>)
 80228d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80228d2:	4a0b      	ldr	r2, [pc, #44]	; (8022900 <HAL_PCD_MspInit+0xe4>)
 80228d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80228d8:	6453      	str	r3, [r2, #68]	; 0x44
 80228da:	4b09      	ldr	r3, [pc, #36]	; (8022900 <HAL_PCD_MspInit+0xe4>)
 80228dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80228de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80228e2:	60bb      	str	r3, [r7, #8]
 80228e4:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80228e6:	2200      	movs	r2, #0
 80228e8:	2100      	movs	r1, #0
 80228ea:	2043      	movs	r0, #67	; 0x43
 80228ec:	f7f6 fabf 	bl	8018e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80228f0:	2043      	movs	r0, #67	; 0x43
 80228f2:	f7f6 fad8 	bl	8018ea6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80228f6:	bf00      	nop
 80228f8:	3780      	adds	r7, #128	; 0x80
 80228fa:	46bd      	mov	sp, r7
 80228fc:	bd80      	pop	{r7, pc}
 80228fe:	bf00      	nop
 8022900:	40023800 	.word	0x40023800
 8022904:	40020000 	.word	0x40020000

08022908 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022908:	b580      	push	{r7, lr}
 802290a:	b082      	sub	sp, #8
 802290c:	af00      	add	r7, sp, #0
 802290e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8022910:	687b      	ldr	r3, [r7, #4]
 8022912:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8022916:	687b      	ldr	r3, [r7, #4]
 8022918:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 802291c:	4619      	mov	r1, r3
 802291e:	4610      	mov	r0, r2
 8022920:	f7fe fce9 	bl	80212f6 <USBD_LL_SetupStage>
}
 8022924:	bf00      	nop
 8022926:	3708      	adds	r7, #8
 8022928:	46bd      	mov	sp, r7
 802292a:	bd80      	pop	{r7, pc}

0802292c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802292c:	b580      	push	{r7, lr}
 802292e:	b082      	sub	sp, #8
 8022930:	af00      	add	r7, sp, #0
 8022932:	6078      	str	r0, [r7, #4]
 8022934:	460b      	mov	r3, r1
 8022936:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8022938:	687b      	ldr	r3, [r7, #4]
 802293a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 802293e:	78fa      	ldrb	r2, [r7, #3]
 8022940:	6879      	ldr	r1, [r7, #4]
 8022942:	4613      	mov	r3, r2
 8022944:	00db      	lsls	r3, r3, #3
 8022946:	1a9b      	subs	r3, r3, r2
 8022948:	009b      	lsls	r3, r3, #2
 802294a:	440b      	add	r3, r1
 802294c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8022950:	681a      	ldr	r2, [r3, #0]
 8022952:	78fb      	ldrb	r3, [r7, #3]
 8022954:	4619      	mov	r1, r3
 8022956:	f7fe fd23 	bl	80213a0 <USBD_LL_DataOutStage>
}
 802295a:	bf00      	nop
 802295c:	3708      	adds	r7, #8
 802295e:	46bd      	mov	sp, r7
 8022960:	bd80      	pop	{r7, pc}

08022962 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022962:	b580      	push	{r7, lr}
 8022964:	b082      	sub	sp, #8
 8022966:	af00      	add	r7, sp, #0
 8022968:	6078      	str	r0, [r7, #4]
 802296a:	460b      	mov	r3, r1
 802296c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 802296e:	687b      	ldr	r3, [r7, #4]
 8022970:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8022974:	78fa      	ldrb	r2, [r7, #3]
 8022976:	6879      	ldr	r1, [r7, #4]
 8022978:	4613      	mov	r3, r2
 802297a:	00db      	lsls	r3, r3, #3
 802297c:	1a9b      	subs	r3, r3, r2
 802297e:	009b      	lsls	r3, r3, #2
 8022980:	440b      	add	r3, r1
 8022982:	3348      	adds	r3, #72	; 0x48
 8022984:	681a      	ldr	r2, [r3, #0]
 8022986:	78fb      	ldrb	r3, [r7, #3]
 8022988:	4619      	mov	r1, r3
 802298a:	f7fe fd6c 	bl	8021466 <USBD_LL_DataInStage>
}
 802298e:	bf00      	nop
 8022990:	3708      	adds	r7, #8
 8022992:	46bd      	mov	sp, r7
 8022994:	bd80      	pop	{r7, pc}

08022996 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022996:	b580      	push	{r7, lr}
 8022998:	b082      	sub	sp, #8
 802299a:	af00      	add	r7, sp, #0
 802299c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 802299e:	687b      	ldr	r3, [r7, #4]
 80229a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80229a4:	4618      	mov	r0, r3
 80229a6:	f7fe fe80 	bl	80216aa <USBD_LL_SOF>
}
 80229aa:	bf00      	nop
 80229ac:	3708      	adds	r7, #8
 80229ae:	46bd      	mov	sp, r7
 80229b0:	bd80      	pop	{r7, pc}

080229b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80229b2:	b580      	push	{r7, lr}
 80229b4:	b084      	sub	sp, #16
 80229b6:	af00      	add	r7, sp, #0
 80229b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80229ba:	2301      	movs	r3, #1
 80229bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80229be:	687b      	ldr	r3, [r7, #4]
 80229c0:	68db      	ldr	r3, [r3, #12]
 80229c2:	2b00      	cmp	r3, #0
 80229c4:	d102      	bne.n	80229cc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80229c6:	2300      	movs	r3, #0
 80229c8:	73fb      	strb	r3, [r7, #15]
 80229ca:	e008      	b.n	80229de <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80229cc:	687b      	ldr	r3, [r7, #4]
 80229ce:	68db      	ldr	r3, [r3, #12]
 80229d0:	2b02      	cmp	r3, #2
 80229d2:	d102      	bne.n	80229da <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80229d4:	2301      	movs	r3, #1
 80229d6:	73fb      	strb	r3, [r7, #15]
 80229d8:	e001      	b.n	80229de <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80229da:	f7f5 fb43 	bl	8018064 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80229de:	687b      	ldr	r3, [r7, #4]
 80229e0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80229e4:	7bfa      	ldrb	r2, [r7, #15]
 80229e6:	4611      	mov	r1, r2
 80229e8:	4618      	mov	r0, r3
 80229ea:	f7fe fe20 	bl	802162e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80229ee:	687b      	ldr	r3, [r7, #4]
 80229f0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80229f4:	4618      	mov	r0, r3
 80229f6:	f7fe fdcc 	bl	8021592 <USBD_LL_Reset>
}
 80229fa:	bf00      	nop
 80229fc:	3710      	adds	r7, #16
 80229fe:	46bd      	mov	sp, r7
 8022a00:	bd80      	pop	{r7, pc}
	...

08022a04 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022a04:	b580      	push	{r7, lr}
 8022a06:	b082      	sub	sp, #8
 8022a08:	af00      	add	r7, sp, #0
 8022a0a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8022a0c:	687b      	ldr	r3, [r7, #4]
 8022a0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022a12:	4618      	mov	r0, r3
 8022a14:	f7fe fe1b 	bl	802164e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8022a18:	687b      	ldr	r3, [r7, #4]
 8022a1a:	681b      	ldr	r3, [r3, #0]
 8022a1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8022a20:	681b      	ldr	r3, [r3, #0]
 8022a22:	687a      	ldr	r2, [r7, #4]
 8022a24:	6812      	ldr	r2, [r2, #0]
 8022a26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8022a2a:	f043 0301 	orr.w	r3, r3, #1
 8022a2e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8022a30:	687b      	ldr	r3, [r7, #4]
 8022a32:	6a1b      	ldr	r3, [r3, #32]
 8022a34:	2b00      	cmp	r3, #0
 8022a36:	d005      	beq.n	8022a44 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8022a38:	4b04      	ldr	r3, [pc, #16]	; (8022a4c <HAL_PCD_SuspendCallback+0x48>)
 8022a3a:	691b      	ldr	r3, [r3, #16]
 8022a3c:	4a03      	ldr	r2, [pc, #12]	; (8022a4c <HAL_PCD_SuspendCallback+0x48>)
 8022a3e:	f043 0306 	orr.w	r3, r3, #6
 8022a42:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8022a44:	bf00      	nop
 8022a46:	3708      	adds	r7, #8
 8022a48:	46bd      	mov	sp, r7
 8022a4a:	bd80      	pop	{r7, pc}
 8022a4c:	e000ed00 	.word	0xe000ed00

08022a50 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022a50:	b580      	push	{r7, lr}
 8022a52:	b082      	sub	sp, #8
 8022a54:	af00      	add	r7, sp, #0
 8022a56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8022a58:	687b      	ldr	r3, [r7, #4]
 8022a5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022a5e:	4618      	mov	r0, r3
 8022a60:	f7fe fe0b 	bl	802167a <USBD_LL_Resume>
}
 8022a64:	bf00      	nop
 8022a66:	3708      	adds	r7, #8
 8022a68:	46bd      	mov	sp, r7
 8022a6a:	bd80      	pop	{r7, pc}

08022a6c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022a6c:	b580      	push	{r7, lr}
 8022a6e:	b082      	sub	sp, #8
 8022a70:	af00      	add	r7, sp, #0
 8022a72:	6078      	str	r0, [r7, #4]
 8022a74:	460b      	mov	r3, r1
 8022a76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8022a78:	687b      	ldr	r3, [r7, #4]
 8022a7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022a7e:	78fa      	ldrb	r2, [r7, #3]
 8022a80:	4611      	mov	r1, r2
 8022a82:	4618      	mov	r0, r3
 8022a84:	f7fe fe59 	bl	802173a <USBD_LL_IsoOUTIncomplete>
}
 8022a88:	bf00      	nop
 8022a8a:	3708      	adds	r7, #8
 8022a8c:	46bd      	mov	sp, r7
 8022a8e:	bd80      	pop	{r7, pc}

08022a90 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022a90:	b580      	push	{r7, lr}
 8022a92:	b082      	sub	sp, #8
 8022a94:	af00      	add	r7, sp, #0
 8022a96:	6078      	str	r0, [r7, #4]
 8022a98:	460b      	mov	r3, r1
 8022a9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8022a9c:	687b      	ldr	r3, [r7, #4]
 8022a9e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022aa2:	78fa      	ldrb	r2, [r7, #3]
 8022aa4:	4611      	mov	r1, r2
 8022aa6:	4618      	mov	r0, r3
 8022aa8:	f7fe fe21 	bl	80216ee <USBD_LL_IsoINIncomplete>
}
 8022aac:	bf00      	nop
 8022aae:	3708      	adds	r7, #8
 8022ab0:	46bd      	mov	sp, r7
 8022ab2:	bd80      	pop	{r7, pc}

08022ab4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022ab4:	b580      	push	{r7, lr}
 8022ab6:	b082      	sub	sp, #8
 8022ab8:	af00      	add	r7, sp, #0
 8022aba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8022abc:	687b      	ldr	r3, [r7, #4]
 8022abe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022ac2:	4618      	mov	r0, r3
 8022ac4:	f7fe fe5f 	bl	8021786 <USBD_LL_DevConnected>
}
 8022ac8:	bf00      	nop
 8022aca:	3708      	adds	r7, #8
 8022acc:	46bd      	mov	sp, r7
 8022ace:	bd80      	pop	{r7, pc}

08022ad0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022ad0:	b580      	push	{r7, lr}
 8022ad2:	b082      	sub	sp, #8
 8022ad4:	af00      	add	r7, sp, #0
 8022ad6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8022ad8:	687b      	ldr	r3, [r7, #4]
 8022ada:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022ade:	4618      	mov	r0, r3
 8022ae0:	f7fe fe5c 	bl	802179c <USBD_LL_DevDisconnected>
}
 8022ae4:	bf00      	nop
 8022ae6:	3708      	adds	r7, #8
 8022ae8:	46bd      	mov	sp, r7
 8022aea:	bd80      	pop	{r7, pc}

08022aec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8022aec:	b580      	push	{r7, lr}
 8022aee:	b082      	sub	sp, #8
 8022af0:	af00      	add	r7, sp, #0
 8022af2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8022af4:	687b      	ldr	r3, [r7, #4]
 8022af6:	781b      	ldrb	r3, [r3, #0]
 8022af8:	2b00      	cmp	r3, #0
 8022afa:	d13c      	bne.n	8022b76 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8022afc:	4a20      	ldr	r2, [pc, #128]	; (8022b80 <USBD_LL_Init+0x94>)
 8022afe:	687b      	ldr	r3, [r7, #4]
 8022b00:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8022b04:	687b      	ldr	r3, [r7, #4]
 8022b06:	4a1e      	ldr	r2, [pc, #120]	; (8022b80 <USBD_LL_Init+0x94>)
 8022b08:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8022b0c:	4b1c      	ldr	r3, [pc, #112]	; (8022b80 <USBD_LL_Init+0x94>)
 8022b0e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8022b12:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8022b14:	4b1a      	ldr	r3, [pc, #104]	; (8022b80 <USBD_LL_Init+0x94>)
 8022b16:	2206      	movs	r2, #6
 8022b18:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8022b1a:	4b19      	ldr	r3, [pc, #100]	; (8022b80 <USBD_LL_Init+0x94>)
 8022b1c:	2202      	movs	r2, #2
 8022b1e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8022b20:	4b17      	ldr	r3, [pc, #92]	; (8022b80 <USBD_LL_Init+0x94>)
 8022b22:	2200      	movs	r2, #0
 8022b24:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8022b26:	4b16      	ldr	r3, [pc, #88]	; (8022b80 <USBD_LL_Init+0x94>)
 8022b28:	2202      	movs	r2, #2
 8022b2a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8022b2c:	4b14      	ldr	r3, [pc, #80]	; (8022b80 <USBD_LL_Init+0x94>)
 8022b2e:	2200      	movs	r2, #0
 8022b30:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8022b32:	4b13      	ldr	r3, [pc, #76]	; (8022b80 <USBD_LL_Init+0x94>)
 8022b34:	2200      	movs	r2, #0
 8022b36:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8022b38:	4b11      	ldr	r3, [pc, #68]	; (8022b80 <USBD_LL_Init+0x94>)
 8022b3a:	2200      	movs	r2, #0
 8022b3c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8022b3e:	4b10      	ldr	r3, [pc, #64]	; (8022b80 <USBD_LL_Init+0x94>)
 8022b40:	2200      	movs	r2, #0
 8022b42:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8022b44:	4b0e      	ldr	r3, [pc, #56]	; (8022b80 <USBD_LL_Init+0x94>)
 8022b46:	2200      	movs	r2, #0
 8022b48:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8022b4a:	480d      	ldr	r0, [pc, #52]	; (8022b80 <USBD_LL_Init+0x94>)
 8022b4c:	f7f7 fa15 	bl	8019f7a <HAL_PCD_Init>
 8022b50:	4603      	mov	r3, r0
 8022b52:	2b00      	cmp	r3, #0
 8022b54:	d001      	beq.n	8022b5a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8022b56:	f7f5 fa85 	bl	8018064 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8022b5a:	2180      	movs	r1, #128	; 0x80
 8022b5c:	4808      	ldr	r0, [pc, #32]	; (8022b80 <USBD_LL_Init+0x94>)
 8022b5e:	f7f8 fbd4 	bl	801b30a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8022b62:	2240      	movs	r2, #64	; 0x40
 8022b64:	2100      	movs	r1, #0
 8022b66:	4806      	ldr	r0, [pc, #24]	; (8022b80 <USBD_LL_Init+0x94>)
 8022b68:	f7f8 fb88 	bl	801b27c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8022b6c:	2280      	movs	r2, #128	; 0x80
 8022b6e:	2101      	movs	r1, #1
 8022b70:	4803      	ldr	r0, [pc, #12]	; (8022b80 <USBD_LL_Init+0x94>)
 8022b72:	f7f8 fb83 	bl	801b27c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8022b76:	2300      	movs	r3, #0
}
 8022b78:	4618      	mov	r0, r3
 8022b7a:	3708      	adds	r7, #8
 8022b7c:	46bd      	mov	sp, r7
 8022b7e:	bd80      	pop	{r7, pc}
 8022b80:	20007118 	.word	0x20007118

08022b84 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8022b84:	b580      	push	{r7, lr}
 8022b86:	b084      	sub	sp, #16
 8022b88:	af00      	add	r7, sp, #0
 8022b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022b8c:	2300      	movs	r3, #0
 8022b8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022b90:	2300      	movs	r3, #0
 8022b92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8022b94:	687b      	ldr	r3, [r7, #4]
 8022b96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022b9a:	4618      	mov	r0, r3
 8022b9c:	f7f7 fb11 	bl	801a1c2 <HAL_PCD_Start>
 8022ba0:	4603      	mov	r3, r0
 8022ba2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022ba4:	7bfb      	ldrb	r3, [r7, #15]
 8022ba6:	4618      	mov	r0, r3
 8022ba8:	f000 f9b0 	bl	8022f0c <USBD_Get_USB_Status>
 8022bac:	4603      	mov	r3, r0
 8022bae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022bb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8022bb2:	4618      	mov	r0, r3
 8022bb4:	3710      	adds	r7, #16
 8022bb6:	46bd      	mov	sp, r7
 8022bb8:	bd80      	pop	{r7, pc}

08022bba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8022bba:	b580      	push	{r7, lr}
 8022bbc:	b084      	sub	sp, #16
 8022bbe:	af00      	add	r7, sp, #0
 8022bc0:	6078      	str	r0, [r7, #4]
 8022bc2:	4608      	mov	r0, r1
 8022bc4:	4611      	mov	r1, r2
 8022bc6:	461a      	mov	r2, r3
 8022bc8:	4603      	mov	r3, r0
 8022bca:	70fb      	strb	r3, [r7, #3]
 8022bcc:	460b      	mov	r3, r1
 8022bce:	70bb      	strb	r3, [r7, #2]
 8022bd0:	4613      	mov	r3, r2
 8022bd2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022bd4:	2300      	movs	r3, #0
 8022bd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022bd8:	2300      	movs	r3, #0
 8022bda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8022bdc:	687b      	ldr	r3, [r7, #4]
 8022bde:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8022be2:	78bb      	ldrb	r3, [r7, #2]
 8022be4:	883a      	ldrh	r2, [r7, #0]
 8022be6:	78f9      	ldrb	r1, [r7, #3]
 8022be8:	f7f7 ff22 	bl	801aa30 <HAL_PCD_EP_Open>
 8022bec:	4603      	mov	r3, r0
 8022bee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022bf0:	7bfb      	ldrb	r3, [r7, #15]
 8022bf2:	4618      	mov	r0, r3
 8022bf4:	f000 f98a 	bl	8022f0c <USBD_Get_USB_Status>
 8022bf8:	4603      	mov	r3, r0
 8022bfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022bfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8022bfe:	4618      	mov	r0, r3
 8022c00:	3710      	adds	r7, #16
 8022c02:	46bd      	mov	sp, r7
 8022c04:	bd80      	pop	{r7, pc}

08022c06 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022c06:	b580      	push	{r7, lr}
 8022c08:	b084      	sub	sp, #16
 8022c0a:	af00      	add	r7, sp, #0
 8022c0c:	6078      	str	r0, [r7, #4]
 8022c0e:	460b      	mov	r3, r1
 8022c10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022c12:	2300      	movs	r3, #0
 8022c14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022c16:	2300      	movs	r3, #0
 8022c18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8022c1a:	687b      	ldr	r3, [r7, #4]
 8022c1c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022c20:	78fa      	ldrb	r2, [r7, #3]
 8022c22:	4611      	mov	r1, r2
 8022c24:	4618      	mov	r0, r3
 8022c26:	f7f7 ff6b 	bl	801ab00 <HAL_PCD_EP_Close>
 8022c2a:	4603      	mov	r3, r0
 8022c2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022c2e:	7bfb      	ldrb	r3, [r7, #15]
 8022c30:	4618      	mov	r0, r3
 8022c32:	f000 f96b 	bl	8022f0c <USBD_Get_USB_Status>
 8022c36:	4603      	mov	r3, r0
 8022c38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022c3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8022c3c:	4618      	mov	r0, r3
 8022c3e:	3710      	adds	r7, #16
 8022c40:	46bd      	mov	sp, r7
 8022c42:	bd80      	pop	{r7, pc}

08022c44 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022c44:	b580      	push	{r7, lr}
 8022c46:	b084      	sub	sp, #16
 8022c48:	af00      	add	r7, sp, #0
 8022c4a:	6078      	str	r0, [r7, #4]
 8022c4c:	460b      	mov	r3, r1
 8022c4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022c50:	2300      	movs	r3, #0
 8022c52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022c54:	2300      	movs	r3, #0
 8022c56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8022c58:	687b      	ldr	r3, [r7, #4]
 8022c5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022c5e:	78fa      	ldrb	r2, [r7, #3]
 8022c60:	4611      	mov	r1, r2
 8022c62:	4618      	mov	r0, r3
 8022c64:	f7f8 f8fd 	bl	801ae62 <HAL_PCD_EP_Flush>
 8022c68:	4603      	mov	r3, r0
 8022c6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022c6c:	7bfb      	ldrb	r3, [r7, #15]
 8022c6e:	4618      	mov	r0, r3
 8022c70:	f000 f94c 	bl	8022f0c <USBD_Get_USB_Status>
 8022c74:	4603      	mov	r3, r0
 8022c76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022c78:	7bbb      	ldrb	r3, [r7, #14]
}
 8022c7a:	4618      	mov	r0, r3
 8022c7c:	3710      	adds	r7, #16
 8022c7e:	46bd      	mov	sp, r7
 8022c80:	bd80      	pop	{r7, pc}

08022c82 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022c82:	b580      	push	{r7, lr}
 8022c84:	b084      	sub	sp, #16
 8022c86:	af00      	add	r7, sp, #0
 8022c88:	6078      	str	r0, [r7, #4]
 8022c8a:	460b      	mov	r3, r1
 8022c8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022c8e:	2300      	movs	r3, #0
 8022c90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022c92:	2300      	movs	r3, #0
 8022c94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8022c96:	687b      	ldr	r3, [r7, #4]
 8022c98:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022c9c:	78fa      	ldrb	r2, [r7, #3]
 8022c9e:	4611      	mov	r1, r2
 8022ca0:	4618      	mov	r0, r3
 8022ca2:	f7f8 f824 	bl	801acee <HAL_PCD_EP_SetStall>
 8022ca6:	4603      	mov	r3, r0
 8022ca8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022caa:	7bfb      	ldrb	r3, [r7, #15]
 8022cac:	4618      	mov	r0, r3
 8022cae:	f000 f92d 	bl	8022f0c <USBD_Get_USB_Status>
 8022cb2:	4603      	mov	r3, r0
 8022cb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022cb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8022cb8:	4618      	mov	r0, r3
 8022cba:	3710      	adds	r7, #16
 8022cbc:	46bd      	mov	sp, r7
 8022cbe:	bd80      	pop	{r7, pc}

08022cc0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022cc0:	b580      	push	{r7, lr}
 8022cc2:	b084      	sub	sp, #16
 8022cc4:	af00      	add	r7, sp, #0
 8022cc6:	6078      	str	r0, [r7, #4]
 8022cc8:	460b      	mov	r3, r1
 8022cca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022ccc:	2300      	movs	r3, #0
 8022cce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022cd0:	2300      	movs	r3, #0
 8022cd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8022cd4:	687b      	ldr	r3, [r7, #4]
 8022cd6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022cda:	78fa      	ldrb	r2, [r7, #3]
 8022cdc:	4611      	mov	r1, r2
 8022cde:	4618      	mov	r0, r3
 8022ce0:	f7f8 f869 	bl	801adb6 <HAL_PCD_EP_ClrStall>
 8022ce4:	4603      	mov	r3, r0
 8022ce6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022ce8:	7bfb      	ldrb	r3, [r7, #15]
 8022cea:	4618      	mov	r0, r3
 8022cec:	f000 f90e 	bl	8022f0c <USBD_Get_USB_Status>
 8022cf0:	4603      	mov	r3, r0
 8022cf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022cf4:	7bbb      	ldrb	r3, [r7, #14]
}
 8022cf6:	4618      	mov	r0, r3
 8022cf8:	3710      	adds	r7, #16
 8022cfa:	46bd      	mov	sp, r7
 8022cfc:	bd80      	pop	{r7, pc}

08022cfe <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022cfe:	b480      	push	{r7}
 8022d00:	b085      	sub	sp, #20
 8022d02:	af00      	add	r7, sp, #0
 8022d04:	6078      	str	r0, [r7, #4]
 8022d06:	460b      	mov	r3, r1
 8022d08:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8022d0a:	687b      	ldr	r3, [r7, #4]
 8022d0c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022d10:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8022d12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8022d16:	2b00      	cmp	r3, #0
 8022d18:	da0b      	bge.n	8022d32 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8022d1a:	78fb      	ldrb	r3, [r7, #3]
 8022d1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8022d20:	68f9      	ldr	r1, [r7, #12]
 8022d22:	4613      	mov	r3, r2
 8022d24:	00db      	lsls	r3, r3, #3
 8022d26:	1a9b      	subs	r3, r3, r2
 8022d28:	009b      	lsls	r3, r3, #2
 8022d2a:	440b      	add	r3, r1
 8022d2c:	333e      	adds	r3, #62	; 0x3e
 8022d2e:	781b      	ldrb	r3, [r3, #0]
 8022d30:	e00b      	b.n	8022d4a <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8022d32:	78fb      	ldrb	r3, [r7, #3]
 8022d34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8022d38:	68f9      	ldr	r1, [r7, #12]
 8022d3a:	4613      	mov	r3, r2
 8022d3c:	00db      	lsls	r3, r3, #3
 8022d3e:	1a9b      	subs	r3, r3, r2
 8022d40:	009b      	lsls	r3, r3, #2
 8022d42:	440b      	add	r3, r1
 8022d44:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8022d48:	781b      	ldrb	r3, [r3, #0]
  }
}
 8022d4a:	4618      	mov	r0, r3
 8022d4c:	3714      	adds	r7, #20
 8022d4e:	46bd      	mov	sp, r7
 8022d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d54:	4770      	bx	lr

08022d56 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8022d56:	b580      	push	{r7, lr}
 8022d58:	b084      	sub	sp, #16
 8022d5a:	af00      	add	r7, sp, #0
 8022d5c:	6078      	str	r0, [r7, #4]
 8022d5e:	460b      	mov	r3, r1
 8022d60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022d62:	2300      	movs	r3, #0
 8022d64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022d66:	2300      	movs	r3, #0
 8022d68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8022d6a:	687b      	ldr	r3, [r7, #4]
 8022d6c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022d70:	78fa      	ldrb	r2, [r7, #3]
 8022d72:	4611      	mov	r1, r2
 8022d74:	4618      	mov	r0, r3
 8022d76:	f7f7 fe36 	bl	801a9e6 <HAL_PCD_SetAddress>
 8022d7a:	4603      	mov	r3, r0
 8022d7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022d7e:	7bfb      	ldrb	r3, [r7, #15]
 8022d80:	4618      	mov	r0, r3
 8022d82:	f000 f8c3 	bl	8022f0c <USBD_Get_USB_Status>
 8022d86:	4603      	mov	r3, r0
 8022d88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022d8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8022d8c:	4618      	mov	r0, r3
 8022d8e:	3710      	adds	r7, #16
 8022d90:	46bd      	mov	sp, r7
 8022d92:	bd80      	pop	{r7, pc}

08022d94 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8022d94:	b580      	push	{r7, lr}
 8022d96:	b086      	sub	sp, #24
 8022d98:	af00      	add	r7, sp, #0
 8022d9a:	60f8      	str	r0, [r7, #12]
 8022d9c:	607a      	str	r2, [r7, #4]
 8022d9e:	603b      	str	r3, [r7, #0]
 8022da0:	460b      	mov	r3, r1
 8022da2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022da4:	2300      	movs	r3, #0
 8022da6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022da8:	2300      	movs	r3, #0
 8022daa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8022dac:	68fb      	ldr	r3, [r7, #12]
 8022dae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8022db2:	7af9      	ldrb	r1, [r7, #11]
 8022db4:	683b      	ldr	r3, [r7, #0]
 8022db6:	687a      	ldr	r2, [r7, #4]
 8022db8:	f7f7 ff4f 	bl	801ac5a <HAL_PCD_EP_Transmit>
 8022dbc:	4603      	mov	r3, r0
 8022dbe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022dc0:	7dfb      	ldrb	r3, [r7, #23]
 8022dc2:	4618      	mov	r0, r3
 8022dc4:	f000 f8a2 	bl	8022f0c <USBD_Get_USB_Status>
 8022dc8:	4603      	mov	r3, r0
 8022dca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8022dcc:	7dbb      	ldrb	r3, [r7, #22]
}
 8022dce:	4618      	mov	r0, r3
 8022dd0:	3718      	adds	r7, #24
 8022dd2:	46bd      	mov	sp, r7
 8022dd4:	bd80      	pop	{r7, pc}

08022dd6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8022dd6:	b580      	push	{r7, lr}
 8022dd8:	b086      	sub	sp, #24
 8022dda:	af00      	add	r7, sp, #0
 8022ddc:	60f8      	str	r0, [r7, #12]
 8022dde:	607a      	str	r2, [r7, #4]
 8022de0:	603b      	str	r3, [r7, #0]
 8022de2:	460b      	mov	r3, r1
 8022de4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022de6:	2300      	movs	r3, #0
 8022de8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022dea:	2300      	movs	r3, #0
 8022dec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8022dee:	68fb      	ldr	r3, [r7, #12]
 8022df0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8022df4:	7af9      	ldrb	r1, [r7, #11]
 8022df6:	683b      	ldr	r3, [r7, #0]
 8022df8:	687a      	ldr	r2, [r7, #4]
 8022dfa:	f7f7 fecb 	bl	801ab94 <HAL_PCD_EP_Receive>
 8022dfe:	4603      	mov	r3, r0
 8022e00:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022e02:	7dfb      	ldrb	r3, [r7, #23]
 8022e04:	4618      	mov	r0, r3
 8022e06:	f000 f881 	bl	8022f0c <USBD_Get_USB_Status>
 8022e0a:	4603      	mov	r3, r0
 8022e0c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8022e0e:	7dbb      	ldrb	r3, [r7, #22]
}
 8022e10:	4618      	mov	r0, r3
 8022e12:	3718      	adds	r7, #24
 8022e14:	46bd      	mov	sp, r7
 8022e16:	bd80      	pop	{r7, pc}

08022e18 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022e18:	b580      	push	{r7, lr}
 8022e1a:	b082      	sub	sp, #8
 8022e1c:	af00      	add	r7, sp, #0
 8022e1e:	6078      	str	r0, [r7, #4]
 8022e20:	460b      	mov	r3, r1
 8022e22:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8022e24:	687b      	ldr	r3, [r7, #4]
 8022e26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022e2a:	78fa      	ldrb	r2, [r7, #3]
 8022e2c:	4611      	mov	r1, r2
 8022e2e:	4618      	mov	r0, r3
 8022e30:	f7f7 fefb 	bl	801ac2a <HAL_PCD_EP_GetRxCount>
 8022e34:	4603      	mov	r3, r0
}
 8022e36:	4618      	mov	r0, r3
 8022e38:	3708      	adds	r7, #8
 8022e3a:	46bd      	mov	sp, r7
 8022e3c:	bd80      	pop	{r7, pc}
	...

08022e40 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8022e40:	b580      	push	{r7, lr}
 8022e42:	b082      	sub	sp, #8
 8022e44:	af00      	add	r7, sp, #0
 8022e46:	6078      	str	r0, [r7, #4]
 8022e48:	460b      	mov	r3, r1
 8022e4a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8022e4c:	78fb      	ldrb	r3, [r7, #3]
 8022e4e:	2b00      	cmp	r3, #0
 8022e50:	d002      	beq.n	8022e58 <HAL_PCDEx_LPM_Callback+0x18>
 8022e52:	2b01      	cmp	r3, #1
 8022e54:	d01f      	beq.n	8022e96 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8022e56:	e03b      	b.n	8022ed0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8022e58:	687b      	ldr	r3, [r7, #4]
 8022e5a:	6a1b      	ldr	r3, [r3, #32]
 8022e5c:	2b00      	cmp	r3, #0
 8022e5e:	d007      	beq.n	8022e70 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8022e60:	f7f4 fc96 	bl	8017790 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8022e64:	4b1c      	ldr	r3, [pc, #112]	; (8022ed8 <HAL_PCDEx_LPM_Callback+0x98>)
 8022e66:	691b      	ldr	r3, [r3, #16]
 8022e68:	4a1b      	ldr	r2, [pc, #108]	; (8022ed8 <HAL_PCDEx_LPM_Callback+0x98>)
 8022e6a:	f023 0306 	bic.w	r3, r3, #6
 8022e6e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8022e70:	687b      	ldr	r3, [r7, #4]
 8022e72:	681b      	ldr	r3, [r3, #0]
 8022e74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8022e78:	681b      	ldr	r3, [r3, #0]
 8022e7a:	687a      	ldr	r2, [r7, #4]
 8022e7c:	6812      	ldr	r2, [r2, #0]
 8022e7e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8022e82:	f023 0301 	bic.w	r3, r3, #1
 8022e86:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8022e88:	687b      	ldr	r3, [r7, #4]
 8022e8a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022e8e:	4618      	mov	r0, r3
 8022e90:	f7fe fbf3 	bl	802167a <USBD_LL_Resume>
    break;
 8022e94:	e01c      	b.n	8022ed0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8022e96:	687b      	ldr	r3, [r7, #4]
 8022e98:	681b      	ldr	r3, [r3, #0]
 8022e9a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8022e9e:	681b      	ldr	r3, [r3, #0]
 8022ea0:	687a      	ldr	r2, [r7, #4]
 8022ea2:	6812      	ldr	r2, [r2, #0]
 8022ea4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8022ea8:	f043 0301 	orr.w	r3, r3, #1
 8022eac:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8022eae:	687b      	ldr	r3, [r7, #4]
 8022eb0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022eb4:	4618      	mov	r0, r3
 8022eb6:	f7fe fbca 	bl	802164e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8022eba:	687b      	ldr	r3, [r7, #4]
 8022ebc:	6a1b      	ldr	r3, [r3, #32]
 8022ebe:	2b00      	cmp	r3, #0
 8022ec0:	d005      	beq.n	8022ece <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8022ec2:	4b05      	ldr	r3, [pc, #20]	; (8022ed8 <HAL_PCDEx_LPM_Callback+0x98>)
 8022ec4:	691b      	ldr	r3, [r3, #16]
 8022ec6:	4a04      	ldr	r2, [pc, #16]	; (8022ed8 <HAL_PCDEx_LPM_Callback+0x98>)
 8022ec8:	f043 0306 	orr.w	r3, r3, #6
 8022ecc:	6113      	str	r3, [r2, #16]
    break;
 8022ece:	bf00      	nop
}
 8022ed0:	bf00      	nop
 8022ed2:	3708      	adds	r7, #8
 8022ed4:	46bd      	mov	sp, r7
 8022ed6:	bd80      	pop	{r7, pc}
 8022ed8:	e000ed00 	.word	0xe000ed00

08022edc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8022edc:	b480      	push	{r7}
 8022ede:	b083      	sub	sp, #12
 8022ee0:	af00      	add	r7, sp, #0
 8022ee2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8022ee4:	4b03      	ldr	r3, [pc, #12]	; (8022ef4 <USBD_static_malloc+0x18>)
}
 8022ee6:	4618      	mov	r0, r3
 8022ee8:	370c      	adds	r7, #12
 8022eea:	46bd      	mov	sp, r7
 8022eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ef0:	4770      	bx	lr
 8022ef2:	bf00      	nop
 8022ef4:	200007b8 	.word	0x200007b8

08022ef8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8022ef8:	b480      	push	{r7}
 8022efa:	b083      	sub	sp, #12
 8022efc:	af00      	add	r7, sp, #0
 8022efe:	6078      	str	r0, [r7, #4]

}
 8022f00:	bf00      	nop
 8022f02:	370c      	adds	r7, #12
 8022f04:	46bd      	mov	sp, r7
 8022f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f0a:	4770      	bx	lr

08022f0c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8022f0c:	b480      	push	{r7}
 8022f0e:	b085      	sub	sp, #20
 8022f10:	af00      	add	r7, sp, #0
 8022f12:	4603      	mov	r3, r0
 8022f14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022f16:	2300      	movs	r3, #0
 8022f18:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8022f1a:	79fb      	ldrb	r3, [r7, #7]
 8022f1c:	2b03      	cmp	r3, #3
 8022f1e:	d817      	bhi.n	8022f50 <USBD_Get_USB_Status+0x44>
 8022f20:	a201      	add	r2, pc, #4	; (adr r2, 8022f28 <USBD_Get_USB_Status+0x1c>)
 8022f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022f26:	bf00      	nop
 8022f28:	08022f39 	.word	0x08022f39
 8022f2c:	08022f3f 	.word	0x08022f3f
 8022f30:	08022f45 	.word	0x08022f45
 8022f34:	08022f4b 	.word	0x08022f4b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8022f38:	2300      	movs	r3, #0
 8022f3a:	73fb      	strb	r3, [r7, #15]
    break;
 8022f3c:	e00b      	b.n	8022f56 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8022f3e:	2303      	movs	r3, #3
 8022f40:	73fb      	strb	r3, [r7, #15]
    break;
 8022f42:	e008      	b.n	8022f56 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8022f44:	2301      	movs	r3, #1
 8022f46:	73fb      	strb	r3, [r7, #15]
    break;
 8022f48:	e005      	b.n	8022f56 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8022f4a:	2303      	movs	r3, #3
 8022f4c:	73fb      	strb	r3, [r7, #15]
    break;
 8022f4e:	e002      	b.n	8022f56 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8022f50:	2303      	movs	r3, #3
 8022f52:	73fb      	strb	r3, [r7, #15]
    break;
 8022f54:	bf00      	nop
  }
  return usb_status;
 8022f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8022f58:	4618      	mov	r0, r3
 8022f5a:	3714      	adds	r7, #20
 8022f5c:	46bd      	mov	sp, r7
 8022f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f62:	4770      	bx	lr

08022f64 <__errno>:
 8022f64:	4b01      	ldr	r3, [pc, #4]	; (8022f6c <__errno+0x8>)
 8022f66:	6818      	ldr	r0, [r3, #0]
 8022f68:	4770      	bx	lr
 8022f6a:	bf00      	nop
 8022f6c:	20000700 	.word	0x20000700

08022f70 <__libc_init_array>:
 8022f70:	b570      	push	{r4, r5, r6, lr}
 8022f72:	4d0d      	ldr	r5, [pc, #52]	; (8022fa8 <__libc_init_array+0x38>)
 8022f74:	4c0d      	ldr	r4, [pc, #52]	; (8022fac <__libc_init_array+0x3c>)
 8022f76:	1b64      	subs	r4, r4, r5
 8022f78:	10a4      	asrs	r4, r4, #2
 8022f7a:	2600      	movs	r6, #0
 8022f7c:	42a6      	cmp	r6, r4
 8022f7e:	d109      	bne.n	8022f94 <__libc_init_array+0x24>
 8022f80:	4d0b      	ldr	r5, [pc, #44]	; (8022fb0 <__libc_init_array+0x40>)
 8022f82:	4c0c      	ldr	r4, [pc, #48]	; (8022fb4 <__libc_init_array+0x44>)
 8022f84:	f000 f906 	bl	8023194 <_init>
 8022f88:	1b64      	subs	r4, r4, r5
 8022f8a:	10a4      	asrs	r4, r4, #2
 8022f8c:	2600      	movs	r6, #0
 8022f8e:	42a6      	cmp	r6, r4
 8022f90:	d105      	bne.n	8022f9e <__libc_init_array+0x2e>
 8022f92:	bd70      	pop	{r4, r5, r6, pc}
 8022f94:	f855 3b04 	ldr.w	r3, [r5], #4
 8022f98:	4798      	blx	r3
 8022f9a:	3601      	adds	r6, #1
 8022f9c:	e7ee      	b.n	8022f7c <__libc_init_array+0xc>
 8022f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8022fa2:	4798      	blx	r3
 8022fa4:	3601      	adds	r6, #1
 8022fa6:	e7f2      	b.n	8022f8e <__libc_init_array+0x1e>
 8022fa8:	080231b4 	.word	0x080231b4
 8022fac:	080231b4 	.word	0x080231b4
 8022fb0:	080231b4 	.word	0x080231b4
 8022fb4:	080231b8 	.word	0x080231b8

08022fb8 <malloc>:
 8022fb8:	4b02      	ldr	r3, [pc, #8]	; (8022fc4 <malloc+0xc>)
 8022fba:	4601      	mov	r1, r0
 8022fbc:	6818      	ldr	r0, [r3, #0]
 8022fbe:	f000 b871 	b.w	80230a4 <_malloc_r>
 8022fc2:	bf00      	nop
 8022fc4:	20000700 	.word	0x20000700

08022fc8 <free>:
 8022fc8:	4b02      	ldr	r3, [pc, #8]	; (8022fd4 <free+0xc>)
 8022fca:	4601      	mov	r1, r0
 8022fcc:	6818      	ldr	r0, [r3, #0]
 8022fce:	f000 b819 	b.w	8023004 <_free_r>
 8022fd2:	bf00      	nop
 8022fd4:	20000700 	.word	0x20000700

08022fd8 <memcpy>:
 8022fd8:	440a      	add	r2, r1
 8022fda:	4291      	cmp	r1, r2
 8022fdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8022fe0:	d100      	bne.n	8022fe4 <memcpy+0xc>
 8022fe2:	4770      	bx	lr
 8022fe4:	b510      	push	{r4, lr}
 8022fe6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022fea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8022fee:	4291      	cmp	r1, r2
 8022ff0:	d1f9      	bne.n	8022fe6 <memcpy+0xe>
 8022ff2:	bd10      	pop	{r4, pc}

08022ff4 <memset>:
 8022ff4:	4402      	add	r2, r0
 8022ff6:	4603      	mov	r3, r0
 8022ff8:	4293      	cmp	r3, r2
 8022ffa:	d100      	bne.n	8022ffe <memset+0xa>
 8022ffc:	4770      	bx	lr
 8022ffe:	f803 1b01 	strb.w	r1, [r3], #1
 8023002:	e7f9      	b.n	8022ff8 <memset+0x4>

08023004 <_free_r>:
 8023004:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023006:	2900      	cmp	r1, #0
 8023008:	d048      	beq.n	802309c <_free_r+0x98>
 802300a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802300e:	9001      	str	r0, [sp, #4]
 8023010:	2b00      	cmp	r3, #0
 8023012:	f1a1 0404 	sub.w	r4, r1, #4
 8023016:	bfb8      	it	lt
 8023018:	18e4      	addlt	r4, r4, r3
 802301a:	f000 f8ad 	bl	8023178 <__malloc_lock>
 802301e:	4a20      	ldr	r2, [pc, #128]	; (80230a0 <_free_r+0x9c>)
 8023020:	9801      	ldr	r0, [sp, #4]
 8023022:	6813      	ldr	r3, [r2, #0]
 8023024:	4615      	mov	r5, r2
 8023026:	b933      	cbnz	r3, 8023036 <_free_r+0x32>
 8023028:	6063      	str	r3, [r4, #4]
 802302a:	6014      	str	r4, [r2, #0]
 802302c:	b003      	add	sp, #12
 802302e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8023032:	f000 b8a7 	b.w	8023184 <__malloc_unlock>
 8023036:	42a3      	cmp	r3, r4
 8023038:	d90b      	bls.n	8023052 <_free_r+0x4e>
 802303a:	6821      	ldr	r1, [r4, #0]
 802303c:	1862      	adds	r2, r4, r1
 802303e:	4293      	cmp	r3, r2
 8023040:	bf04      	itt	eq
 8023042:	681a      	ldreq	r2, [r3, #0]
 8023044:	685b      	ldreq	r3, [r3, #4]
 8023046:	6063      	str	r3, [r4, #4]
 8023048:	bf04      	itt	eq
 802304a:	1852      	addeq	r2, r2, r1
 802304c:	6022      	streq	r2, [r4, #0]
 802304e:	602c      	str	r4, [r5, #0]
 8023050:	e7ec      	b.n	802302c <_free_r+0x28>
 8023052:	461a      	mov	r2, r3
 8023054:	685b      	ldr	r3, [r3, #4]
 8023056:	b10b      	cbz	r3, 802305c <_free_r+0x58>
 8023058:	42a3      	cmp	r3, r4
 802305a:	d9fa      	bls.n	8023052 <_free_r+0x4e>
 802305c:	6811      	ldr	r1, [r2, #0]
 802305e:	1855      	adds	r5, r2, r1
 8023060:	42a5      	cmp	r5, r4
 8023062:	d10b      	bne.n	802307c <_free_r+0x78>
 8023064:	6824      	ldr	r4, [r4, #0]
 8023066:	4421      	add	r1, r4
 8023068:	1854      	adds	r4, r2, r1
 802306a:	42a3      	cmp	r3, r4
 802306c:	6011      	str	r1, [r2, #0]
 802306e:	d1dd      	bne.n	802302c <_free_r+0x28>
 8023070:	681c      	ldr	r4, [r3, #0]
 8023072:	685b      	ldr	r3, [r3, #4]
 8023074:	6053      	str	r3, [r2, #4]
 8023076:	4421      	add	r1, r4
 8023078:	6011      	str	r1, [r2, #0]
 802307a:	e7d7      	b.n	802302c <_free_r+0x28>
 802307c:	d902      	bls.n	8023084 <_free_r+0x80>
 802307e:	230c      	movs	r3, #12
 8023080:	6003      	str	r3, [r0, #0]
 8023082:	e7d3      	b.n	802302c <_free_r+0x28>
 8023084:	6825      	ldr	r5, [r4, #0]
 8023086:	1961      	adds	r1, r4, r5
 8023088:	428b      	cmp	r3, r1
 802308a:	bf04      	itt	eq
 802308c:	6819      	ldreq	r1, [r3, #0]
 802308e:	685b      	ldreq	r3, [r3, #4]
 8023090:	6063      	str	r3, [r4, #4]
 8023092:	bf04      	itt	eq
 8023094:	1949      	addeq	r1, r1, r5
 8023096:	6021      	streq	r1, [r4, #0]
 8023098:	6054      	str	r4, [r2, #4]
 802309a:	e7c7      	b.n	802302c <_free_r+0x28>
 802309c:	b003      	add	sp, #12
 802309e:	bd30      	pop	{r4, r5, pc}
 80230a0:	20000a30 	.word	0x20000a30

080230a4 <_malloc_r>:
 80230a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80230a6:	1ccd      	adds	r5, r1, #3
 80230a8:	f025 0503 	bic.w	r5, r5, #3
 80230ac:	3508      	adds	r5, #8
 80230ae:	2d0c      	cmp	r5, #12
 80230b0:	bf38      	it	cc
 80230b2:	250c      	movcc	r5, #12
 80230b4:	2d00      	cmp	r5, #0
 80230b6:	4606      	mov	r6, r0
 80230b8:	db01      	blt.n	80230be <_malloc_r+0x1a>
 80230ba:	42a9      	cmp	r1, r5
 80230bc:	d903      	bls.n	80230c6 <_malloc_r+0x22>
 80230be:	230c      	movs	r3, #12
 80230c0:	6033      	str	r3, [r6, #0]
 80230c2:	2000      	movs	r0, #0
 80230c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80230c6:	f000 f857 	bl	8023178 <__malloc_lock>
 80230ca:	4921      	ldr	r1, [pc, #132]	; (8023150 <_malloc_r+0xac>)
 80230cc:	680a      	ldr	r2, [r1, #0]
 80230ce:	4614      	mov	r4, r2
 80230d0:	b99c      	cbnz	r4, 80230fa <_malloc_r+0x56>
 80230d2:	4f20      	ldr	r7, [pc, #128]	; (8023154 <_malloc_r+0xb0>)
 80230d4:	683b      	ldr	r3, [r7, #0]
 80230d6:	b923      	cbnz	r3, 80230e2 <_malloc_r+0x3e>
 80230d8:	4621      	mov	r1, r4
 80230da:	4630      	mov	r0, r6
 80230dc:	f000 f83c 	bl	8023158 <_sbrk_r>
 80230e0:	6038      	str	r0, [r7, #0]
 80230e2:	4629      	mov	r1, r5
 80230e4:	4630      	mov	r0, r6
 80230e6:	f000 f837 	bl	8023158 <_sbrk_r>
 80230ea:	1c43      	adds	r3, r0, #1
 80230ec:	d123      	bne.n	8023136 <_malloc_r+0x92>
 80230ee:	230c      	movs	r3, #12
 80230f0:	6033      	str	r3, [r6, #0]
 80230f2:	4630      	mov	r0, r6
 80230f4:	f000 f846 	bl	8023184 <__malloc_unlock>
 80230f8:	e7e3      	b.n	80230c2 <_malloc_r+0x1e>
 80230fa:	6823      	ldr	r3, [r4, #0]
 80230fc:	1b5b      	subs	r3, r3, r5
 80230fe:	d417      	bmi.n	8023130 <_malloc_r+0x8c>
 8023100:	2b0b      	cmp	r3, #11
 8023102:	d903      	bls.n	802310c <_malloc_r+0x68>
 8023104:	6023      	str	r3, [r4, #0]
 8023106:	441c      	add	r4, r3
 8023108:	6025      	str	r5, [r4, #0]
 802310a:	e004      	b.n	8023116 <_malloc_r+0x72>
 802310c:	6863      	ldr	r3, [r4, #4]
 802310e:	42a2      	cmp	r2, r4
 8023110:	bf0c      	ite	eq
 8023112:	600b      	streq	r3, [r1, #0]
 8023114:	6053      	strne	r3, [r2, #4]
 8023116:	4630      	mov	r0, r6
 8023118:	f000 f834 	bl	8023184 <__malloc_unlock>
 802311c:	f104 000b 	add.w	r0, r4, #11
 8023120:	1d23      	adds	r3, r4, #4
 8023122:	f020 0007 	bic.w	r0, r0, #7
 8023126:	1ac2      	subs	r2, r0, r3
 8023128:	d0cc      	beq.n	80230c4 <_malloc_r+0x20>
 802312a:	1a1b      	subs	r3, r3, r0
 802312c:	50a3      	str	r3, [r4, r2]
 802312e:	e7c9      	b.n	80230c4 <_malloc_r+0x20>
 8023130:	4622      	mov	r2, r4
 8023132:	6864      	ldr	r4, [r4, #4]
 8023134:	e7cc      	b.n	80230d0 <_malloc_r+0x2c>
 8023136:	1cc4      	adds	r4, r0, #3
 8023138:	f024 0403 	bic.w	r4, r4, #3
 802313c:	42a0      	cmp	r0, r4
 802313e:	d0e3      	beq.n	8023108 <_malloc_r+0x64>
 8023140:	1a21      	subs	r1, r4, r0
 8023142:	4630      	mov	r0, r6
 8023144:	f000 f808 	bl	8023158 <_sbrk_r>
 8023148:	3001      	adds	r0, #1
 802314a:	d1dd      	bne.n	8023108 <_malloc_r+0x64>
 802314c:	e7cf      	b.n	80230ee <_malloc_r+0x4a>
 802314e:	bf00      	nop
 8023150:	20000a30 	.word	0x20000a30
 8023154:	20000a34 	.word	0x20000a34

08023158 <_sbrk_r>:
 8023158:	b538      	push	{r3, r4, r5, lr}
 802315a:	4d06      	ldr	r5, [pc, #24]	; (8023174 <_sbrk_r+0x1c>)
 802315c:	2300      	movs	r3, #0
 802315e:	4604      	mov	r4, r0
 8023160:	4608      	mov	r0, r1
 8023162:	602b      	str	r3, [r5, #0]
 8023164:	f7f5 fa2e 	bl	80185c4 <_sbrk>
 8023168:	1c43      	adds	r3, r0, #1
 802316a:	d102      	bne.n	8023172 <_sbrk_r+0x1a>
 802316c:	682b      	ldr	r3, [r5, #0]
 802316e:	b103      	cbz	r3, 8023172 <_sbrk_r+0x1a>
 8023170:	6023      	str	r3, [r4, #0]
 8023172:	bd38      	pop	{r3, r4, r5, pc}
 8023174:	20007520 	.word	0x20007520

08023178 <__malloc_lock>:
 8023178:	4801      	ldr	r0, [pc, #4]	; (8023180 <__malloc_lock+0x8>)
 802317a:	f000 b809 	b.w	8023190 <__retarget_lock_acquire_recursive>
 802317e:	bf00      	nop
 8023180:	20007528 	.word	0x20007528

08023184 <__malloc_unlock>:
 8023184:	4801      	ldr	r0, [pc, #4]	; (802318c <__malloc_unlock+0x8>)
 8023186:	f000 b804 	b.w	8023192 <__retarget_lock_release_recursive>
 802318a:	bf00      	nop
 802318c:	20007528 	.word	0x20007528

08023190 <__retarget_lock_acquire_recursive>:
 8023190:	4770      	bx	lr

08023192 <__retarget_lock_release_recursive>:
 8023192:	4770      	bx	lr

08023194 <_init>:
 8023194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023196:	bf00      	nop
 8023198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802319a:	bc08      	pop	{r3}
 802319c:	469e      	mov	lr, r3
 802319e:	4770      	bx	lr

080231a0 <_fini>:
 80231a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80231a2:	bf00      	nop
 80231a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80231a6:	bc08      	pop	{r3}
 80231a8:	469e      	mov	lr, r3
 80231aa:	4770      	bx	lr
